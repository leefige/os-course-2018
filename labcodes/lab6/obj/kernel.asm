
bin/kernel:     file format elf32-i386


Disassembly of section .text:

c0100000 <kern_entry>:

.text
.globl kern_entry
kern_entry:
    # load pa of boot pgdir
    movl $REALLOC(__boot_pgdir), %eax
c0100000:	b8 00 e0 1a 00       	mov    $0x1ae000,%eax
    movl %eax, %cr3
c0100005:	0f 22 d8             	mov    %eax,%cr3

    # enable paging
    movl %cr0, %eax
c0100008:	0f 20 c0             	mov    %cr0,%eax
    orl $(CR0_PE | CR0_PG | CR0_AM | CR0_WP | CR0_NE | CR0_TS | CR0_EM | CR0_MP), %eax
c010000b:	0d 2f 00 05 80       	or     $0x8005002f,%eax
    andl $~(CR0_TS | CR0_EM), %eax
c0100010:	83 e0 f3             	and    $0xfffffff3,%eax
    movl %eax, %cr0
c0100013:	0f 22 c0             	mov    %eax,%cr0

    # update eip
    # now, eip = 0x1.....
    leal next, %eax
c0100016:	8d 05 1e 00 10 c0    	lea    0xc010001e,%eax
    # set eip = KERNBASE + 0x1.....
    jmp *%eax
c010001c:	ff e0                	jmp    *%eax

c010001e <next>:
next:

    # unmap va 0 ~ 4M, it's temporary mapping
    xorl %eax, %eax
c010001e:	31 c0                	xor    %eax,%eax
    movl %eax, __boot_pgdir
c0100020:	a3 00 e0 1a c0       	mov    %eax,0xc01ae000

    # set ebp, esp
    movl $0x0, %ebp
c0100025:	bd 00 00 00 00       	mov    $0x0,%ebp
    # the kernel stack region is from bootstack -- bootstacktop,
    # the kernel stack size is KSTACKSIZE (8KB)defined in memlayout.h
    movl $bootstacktop, %esp
c010002a:	bc 00 c0 12 c0       	mov    $0xc012c000,%esp
    # now kernel stack is ready , call the first C function
    call kern_init
c010002f:	e8 02 00 00 00       	call   c0100036 <kern_init>

c0100034 <spin>:

# should never get here
spin:
    jmp spin
c0100034:	eb fe                	jmp    c0100034 <spin>

c0100036 <kern_init>:
int kern_init(void) __attribute__((noreturn));
void grade_backtrace(void);
static void lab1_switch_test(void);

int
kern_init(void) {
c0100036:	55                   	push   %ebp
c0100037:	89 e5                	mov    %esp,%ebp
c0100039:	83 ec 18             	sub    $0x18,%esp
    extern char edata[], end[];
    memset(edata, 0, end - edata);
c010003c:	ba c4 31 1b c0       	mov    $0xc01b31c4,%edx
c0100041:	b8 00 00 1b c0       	mov    $0xc01b0000,%eax
c0100046:	29 c2                	sub    %eax,%edx
c0100048:	89 d0                	mov    %edx,%eax
c010004a:	83 ec 04             	sub    $0x4,%esp
c010004d:	50                   	push   %eax
c010004e:	6a 00                	push   $0x0
c0100050:	68 00 00 1b c0       	push   $0xc01b0000
c0100055:	e8 c4 b0 00 00       	call   c010b11e <memset>
c010005a:	83 c4 10             	add    $0x10,%esp

    cons_init();                // init the console
c010005d:	e8 a4 1e 00 00       	call   c0101f06 <cons_init>

    const char *message = "(THU.CST) os is loading ...";
c0100062:	c7 45 f4 c0 b9 10 c0 	movl   $0xc010b9c0,-0xc(%ebp)
    cprintf("%s\n\n", message);
c0100069:	83 ec 08             	sub    $0x8,%esp
c010006c:	ff 75 f4             	pushl  -0xc(%ebp)
c010006f:	68 dc b9 10 c0       	push   $0xc010b9dc
c0100074:	e8 1e 02 00 00       	call   c0100297 <cprintf>
c0100079:	83 c4 10             	add    $0x10,%esp

    print_kerninfo();
c010007c:	e8 8c 09 00 00       	call   c0100a0d <print_kerninfo>

    grade_backtrace();
c0100081:	e8 90 00 00 00       	call   c0100116 <grade_backtrace>

    pmm_init();                 // init physical memory management
c0100086:	e8 c8 75 00 00       	call   c0107653 <pmm_init>

    pic_init();                 // init interrupt controller
c010008b:	e8 e8 1f 00 00       	call   c0102078 <pic_init>
    idt_init();                 // init interrupt descriptor table
c0100090:	e8 6a 21 00 00       	call   c01021ff <idt_init>

    vmm_init();                 // init virtual memory management
c0100095:	e8 c3 3c 00 00       	call   c0103d5d <vmm_init>
    sched_init();               // init scheduler
c010009a:	e8 67 a6 00 00       	call   c010a706 <sched_init>
    proc_init();                // init process table
c010009f:	e8 9b a3 00 00       	call   c010a43f <proc_init>
    
    ide_init();                 // init ide devices
c01000a4:	e8 2c 0e 00 00       	call   c0100ed5 <ide_init>
    swap_init();                // init swap
c01000a9:	e8 cd 52 00 00       	call   c010537b <swap_init>

    clock_init();               // init clock interrupt
c01000ae:	e8 fa 15 00 00       	call   c01016ad <clock_init>
    intr_enable();              // enable irq interrupt
c01000b3:	e8 fd 20 00 00       	call   c01021b5 <intr_enable>

    //LAB1: CAHLLENGE 1 If you try to do it, uncomment lab1_switch_test()
    // user/kernel mode switch test
    //lab1_switch_test();
    
    cpu_idle();                 // run idle process
c01000b8:	e8 1f a5 00 00       	call   c010a5dc <cpu_idle>

c01000bd <grade_backtrace2>:
}

void __attribute__((noinline))
grade_backtrace2(int arg0, int arg1, int arg2, int arg3) {
c01000bd:	55                   	push   %ebp
c01000be:	89 e5                	mov    %esp,%ebp
c01000c0:	83 ec 08             	sub    $0x8,%esp
    mon_backtrace(0, NULL, NULL);
c01000c3:	83 ec 04             	sub    $0x4,%esp
c01000c6:	6a 00                	push   $0x0
c01000c8:	6a 00                	push   $0x0
c01000ca:	6a 00                	push   $0x0
c01000cc:	e8 98 0d 00 00       	call   c0100e69 <mon_backtrace>
c01000d1:	83 c4 10             	add    $0x10,%esp
}
c01000d4:	90                   	nop
c01000d5:	c9                   	leave  
c01000d6:	c3                   	ret    

c01000d7 <grade_backtrace1>:

void __attribute__((noinline))
grade_backtrace1(int arg0, int arg1) {
c01000d7:	55                   	push   %ebp
c01000d8:	89 e5                	mov    %esp,%ebp
c01000da:	53                   	push   %ebx
c01000db:	83 ec 04             	sub    $0x4,%esp
    grade_backtrace2(arg0, (int)&arg0, arg1, (int)&arg1);
c01000de:	8d 4d 0c             	lea    0xc(%ebp),%ecx
c01000e1:	8b 55 0c             	mov    0xc(%ebp),%edx
c01000e4:	8d 5d 08             	lea    0x8(%ebp),%ebx
c01000e7:	8b 45 08             	mov    0x8(%ebp),%eax
c01000ea:	51                   	push   %ecx
c01000eb:	52                   	push   %edx
c01000ec:	53                   	push   %ebx
c01000ed:	50                   	push   %eax
c01000ee:	e8 ca ff ff ff       	call   c01000bd <grade_backtrace2>
c01000f3:	83 c4 10             	add    $0x10,%esp
}
c01000f6:	90                   	nop
c01000f7:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c01000fa:	c9                   	leave  
c01000fb:	c3                   	ret    

c01000fc <grade_backtrace0>:

void __attribute__((noinline))
grade_backtrace0(int arg0, int arg1, int arg2) {
c01000fc:	55                   	push   %ebp
c01000fd:	89 e5                	mov    %esp,%ebp
c01000ff:	83 ec 08             	sub    $0x8,%esp
    grade_backtrace1(arg0, arg2);
c0100102:	83 ec 08             	sub    $0x8,%esp
c0100105:	ff 75 10             	pushl  0x10(%ebp)
c0100108:	ff 75 08             	pushl  0x8(%ebp)
c010010b:	e8 c7 ff ff ff       	call   c01000d7 <grade_backtrace1>
c0100110:	83 c4 10             	add    $0x10,%esp
}
c0100113:	90                   	nop
c0100114:	c9                   	leave  
c0100115:	c3                   	ret    

c0100116 <grade_backtrace>:

void
grade_backtrace(void) {
c0100116:	55                   	push   %ebp
c0100117:	89 e5                	mov    %esp,%ebp
c0100119:	83 ec 08             	sub    $0x8,%esp
    grade_backtrace0(0, (int)kern_init, 0xffff0000);
c010011c:	b8 36 00 10 c0       	mov    $0xc0100036,%eax
c0100121:	83 ec 04             	sub    $0x4,%esp
c0100124:	68 00 00 ff ff       	push   $0xffff0000
c0100129:	50                   	push   %eax
c010012a:	6a 00                	push   $0x0
c010012c:	e8 cb ff ff ff       	call   c01000fc <grade_backtrace0>
c0100131:	83 c4 10             	add    $0x10,%esp
}
c0100134:	90                   	nop
c0100135:	c9                   	leave  
c0100136:	c3                   	ret    

c0100137 <lab1_print_cur_status>:

static void
lab1_print_cur_status(void) {
c0100137:	55                   	push   %ebp
c0100138:	89 e5                	mov    %esp,%ebp
c010013a:	83 ec 18             	sub    $0x18,%esp
    static int round = 0;
    uint16_t reg1, reg2, reg3, reg4;
    asm volatile (
c010013d:	8c 4d f6             	mov    %cs,-0xa(%ebp)
c0100140:	8c 5d f4             	mov    %ds,-0xc(%ebp)
c0100143:	8c 45 f2             	mov    %es,-0xe(%ebp)
c0100146:	8c 55 f0             	mov    %ss,-0x10(%ebp)
            "mov %%cs, %0;"
            "mov %%ds, %1;"
            "mov %%es, %2;"
            "mov %%ss, %3;"
            : "=m"(reg1), "=m"(reg2), "=m"(reg3), "=m"(reg4));
    cprintf("%d: @ring %d\n", round, reg1 & 3);
c0100149:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010014d:	0f b7 c0             	movzwl %ax,%eax
c0100150:	83 e0 03             	and    $0x3,%eax
c0100153:	89 c2                	mov    %eax,%edx
c0100155:	a1 00 00 1b c0       	mov    0xc01b0000,%eax
c010015a:	83 ec 04             	sub    $0x4,%esp
c010015d:	52                   	push   %edx
c010015e:	50                   	push   %eax
c010015f:	68 e1 b9 10 c0       	push   $0xc010b9e1
c0100164:	e8 2e 01 00 00       	call   c0100297 <cprintf>
c0100169:	83 c4 10             	add    $0x10,%esp
    cprintf("%d:  cs = %x\n", round, reg1);
c010016c:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100170:	0f b7 d0             	movzwl %ax,%edx
c0100173:	a1 00 00 1b c0       	mov    0xc01b0000,%eax
c0100178:	83 ec 04             	sub    $0x4,%esp
c010017b:	52                   	push   %edx
c010017c:	50                   	push   %eax
c010017d:	68 ef b9 10 c0       	push   $0xc010b9ef
c0100182:	e8 10 01 00 00       	call   c0100297 <cprintf>
c0100187:	83 c4 10             	add    $0x10,%esp
    cprintf("%d:  ds = %x\n", round, reg2);
c010018a:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c010018e:	0f b7 d0             	movzwl %ax,%edx
c0100191:	a1 00 00 1b c0       	mov    0xc01b0000,%eax
c0100196:	83 ec 04             	sub    $0x4,%esp
c0100199:	52                   	push   %edx
c010019a:	50                   	push   %eax
c010019b:	68 fd b9 10 c0       	push   $0xc010b9fd
c01001a0:	e8 f2 00 00 00       	call   c0100297 <cprintf>
c01001a5:	83 c4 10             	add    $0x10,%esp
    cprintf("%d:  es = %x\n", round, reg3);
c01001a8:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01001ac:	0f b7 d0             	movzwl %ax,%edx
c01001af:	a1 00 00 1b c0       	mov    0xc01b0000,%eax
c01001b4:	83 ec 04             	sub    $0x4,%esp
c01001b7:	52                   	push   %edx
c01001b8:	50                   	push   %eax
c01001b9:	68 0b ba 10 c0       	push   $0xc010ba0b
c01001be:	e8 d4 00 00 00       	call   c0100297 <cprintf>
c01001c3:	83 c4 10             	add    $0x10,%esp
    cprintf("%d:  ss = %x\n", round, reg4);
c01001c6:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c01001ca:	0f b7 d0             	movzwl %ax,%edx
c01001cd:	a1 00 00 1b c0       	mov    0xc01b0000,%eax
c01001d2:	83 ec 04             	sub    $0x4,%esp
c01001d5:	52                   	push   %edx
c01001d6:	50                   	push   %eax
c01001d7:	68 19 ba 10 c0       	push   $0xc010ba19
c01001dc:	e8 b6 00 00 00       	call   c0100297 <cprintf>
c01001e1:	83 c4 10             	add    $0x10,%esp
    round ++;
c01001e4:	a1 00 00 1b c0       	mov    0xc01b0000,%eax
c01001e9:	83 c0 01             	add    $0x1,%eax
c01001ec:	a3 00 00 1b c0       	mov    %eax,0xc01b0000
}
c01001f1:	90                   	nop
c01001f2:	c9                   	leave  
c01001f3:	c3                   	ret    

c01001f4 <lab1_switch_to_user>:

static void
lab1_switch_to_user(void) {
c01001f4:	55                   	push   %ebp
c01001f5:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 : TODO
    asm volatile (
c01001f7:	cd 78                	int    $0x78
c01001f9:	89 ec                	mov    %ebp,%esp
	    "int %0;"
        "movl %%ebp, %%esp"
	    : 
	    : "i"(T_SWITCH_TOU)
	);
}
c01001fb:	90                   	nop
c01001fc:	5d                   	pop    %ebp
c01001fd:	c3                   	ret    

c01001fe <lab1_switch_to_kernel>:

static void
lab1_switch_to_kernel(void) {
c01001fe:	55                   	push   %ebp
c01001ff:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 :  TODO
    // cprintf("in lab1_switch_to_kernel\n");
    asm volatile (
c0100201:	cd 79                	int    $0x79
c0100203:	89 ec                	mov    %ebp,%esp
	    "int %0;"
        "movl %%ebp, %%esp"
        : 
	    : "i"(T_SWITCH_TOK)
	);
}
c0100205:	90                   	nop
c0100206:	5d                   	pop    %ebp
c0100207:	c3                   	ret    

c0100208 <lab1_switch_test>:

static void
lab1_switch_test(void) {
c0100208:	55                   	push   %ebp
c0100209:	89 e5                	mov    %esp,%ebp
c010020b:	83 ec 08             	sub    $0x8,%esp
    lab1_print_cur_status();
c010020e:	e8 24 ff ff ff       	call   c0100137 <lab1_print_cur_status>
    cprintf("+++ switch to  user  mode +++\n");
c0100213:	83 ec 0c             	sub    $0xc,%esp
c0100216:	68 28 ba 10 c0       	push   $0xc010ba28
c010021b:	e8 77 00 00 00       	call   c0100297 <cprintf>
c0100220:	83 c4 10             	add    $0x10,%esp
    lab1_switch_to_user();
c0100223:	e8 cc ff ff ff       	call   c01001f4 <lab1_switch_to_user>
    lab1_print_cur_status();
c0100228:	e8 0a ff ff ff       	call   c0100137 <lab1_print_cur_status>
    cprintf("+++ switch to kernel mode +++\n");
c010022d:	83 ec 0c             	sub    $0xc,%esp
c0100230:	68 48 ba 10 c0       	push   $0xc010ba48
c0100235:	e8 5d 00 00 00       	call   c0100297 <cprintf>
c010023a:	83 c4 10             	add    $0x10,%esp
    lab1_switch_to_kernel();
c010023d:	e8 bc ff ff ff       	call   c01001fe <lab1_switch_to_kernel>
    lab1_print_cur_status();
c0100242:	e8 f0 fe ff ff       	call   c0100137 <lab1_print_cur_status>
}
c0100247:	90                   	nop
c0100248:	c9                   	leave  
c0100249:	c3                   	ret    

c010024a <cputch>:
/* *
 * cputch - writes a single character @c to stdout, and it will
 * increace the value of counter pointed by @cnt.
 * */
static void
cputch(int c, int *cnt) {
c010024a:	55                   	push   %ebp
c010024b:	89 e5                	mov    %esp,%ebp
c010024d:	83 ec 08             	sub    $0x8,%esp
    cons_putc(c);
c0100250:	83 ec 0c             	sub    $0xc,%esp
c0100253:	ff 75 08             	pushl  0x8(%ebp)
c0100256:	e8 dc 1c 00 00       	call   c0101f37 <cons_putc>
c010025b:	83 c4 10             	add    $0x10,%esp
    (*cnt) ++;
c010025e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100261:	8b 00                	mov    (%eax),%eax
c0100263:	8d 50 01             	lea    0x1(%eax),%edx
c0100266:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100269:	89 10                	mov    %edx,(%eax)
}
c010026b:	90                   	nop
c010026c:	c9                   	leave  
c010026d:	c3                   	ret    

c010026e <vcprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want cprintf() instead.
 * */
int
vcprintf(const char *fmt, va_list ap) {
c010026e:	55                   	push   %ebp
c010026f:	89 e5                	mov    %esp,%ebp
c0100271:	83 ec 18             	sub    $0x18,%esp
    int cnt = 0;
c0100274:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    vprintfmt((void*)cputch, &cnt, fmt, ap);
c010027b:	ff 75 0c             	pushl  0xc(%ebp)
c010027e:	ff 75 08             	pushl  0x8(%ebp)
c0100281:	8d 45 f4             	lea    -0xc(%ebp),%eax
c0100284:	50                   	push   %eax
c0100285:	68 4a 02 10 c0       	push   $0xc010024a
c010028a:	e8 c5 b1 00 00       	call   c010b454 <vprintfmt>
c010028f:	83 c4 10             	add    $0x10,%esp
    return cnt;
c0100292:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100295:	c9                   	leave  
c0100296:	c3                   	ret    

c0100297 <cprintf>:
 *
 * The return value is the number of characters which would be
 * written to stdout.
 * */
int
cprintf(const char *fmt, ...) {
c0100297:	55                   	push   %ebp
c0100298:	89 e5                	mov    %esp,%ebp
c010029a:	83 ec 18             	sub    $0x18,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c010029d:	8d 45 0c             	lea    0xc(%ebp),%eax
c01002a0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cnt = vcprintf(fmt, ap);
c01002a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002a6:	83 ec 08             	sub    $0x8,%esp
c01002a9:	50                   	push   %eax
c01002aa:	ff 75 08             	pushl  0x8(%ebp)
c01002ad:	e8 bc ff ff ff       	call   c010026e <vcprintf>
c01002b2:	83 c4 10             	add    $0x10,%esp
c01002b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c01002b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01002bb:	c9                   	leave  
c01002bc:	c3                   	ret    

c01002bd <cputchar>:

/* cputchar - writes a single character to stdout */
void
cputchar(int c) {
c01002bd:	55                   	push   %ebp
c01002be:	89 e5                	mov    %esp,%ebp
c01002c0:	83 ec 08             	sub    $0x8,%esp
    cons_putc(c);
c01002c3:	83 ec 0c             	sub    $0xc,%esp
c01002c6:	ff 75 08             	pushl  0x8(%ebp)
c01002c9:	e8 69 1c 00 00       	call   c0101f37 <cons_putc>
c01002ce:	83 c4 10             	add    $0x10,%esp
}
c01002d1:	90                   	nop
c01002d2:	c9                   	leave  
c01002d3:	c3                   	ret    

c01002d4 <cputs>:
/* *
 * cputs- writes the string pointed by @str to stdout and
 * appends a newline character.
 * */
int
cputs(const char *str) {
c01002d4:	55                   	push   %ebp
c01002d5:	89 e5                	mov    %esp,%ebp
c01002d7:	83 ec 18             	sub    $0x18,%esp
    int cnt = 0;
c01002da:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    char c;
    while ((c = *str ++) != '\0') {
c01002e1:	eb 14                	jmp    c01002f7 <cputs+0x23>
        cputch(c, &cnt);
c01002e3:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
c01002e7:	83 ec 08             	sub    $0x8,%esp
c01002ea:	8d 55 f0             	lea    -0x10(%ebp),%edx
c01002ed:	52                   	push   %edx
c01002ee:	50                   	push   %eax
c01002ef:	e8 56 ff ff ff       	call   c010024a <cputch>
c01002f4:	83 c4 10             	add    $0x10,%esp
 * */
int
cputs(const char *str) {
    int cnt = 0;
    char c;
    while ((c = *str ++) != '\0') {
c01002f7:	8b 45 08             	mov    0x8(%ebp),%eax
c01002fa:	8d 50 01             	lea    0x1(%eax),%edx
c01002fd:	89 55 08             	mov    %edx,0x8(%ebp)
c0100300:	0f b6 00             	movzbl (%eax),%eax
c0100303:	88 45 f7             	mov    %al,-0x9(%ebp)
c0100306:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
c010030a:	75 d7                	jne    c01002e3 <cputs+0xf>
        cputch(c, &cnt);
    }
    cputch('\n', &cnt);
c010030c:	83 ec 08             	sub    $0x8,%esp
c010030f:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0100312:	50                   	push   %eax
c0100313:	6a 0a                	push   $0xa
c0100315:	e8 30 ff ff ff       	call   c010024a <cputch>
c010031a:	83 c4 10             	add    $0x10,%esp
    return cnt;
c010031d:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0100320:	c9                   	leave  
c0100321:	c3                   	ret    

c0100322 <getchar>:

/* getchar - reads a single non-zero character from stdin */
int
getchar(void) {
c0100322:	55                   	push   %ebp
c0100323:	89 e5                	mov    %esp,%ebp
c0100325:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = cons_getc()) == 0)
c0100328:	e8 53 1c 00 00       	call   c0101f80 <cons_getc>
c010032d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100330:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100334:	74 f2                	je     c0100328 <getchar+0x6>
        /* do nothing */;
    return c;
c0100336:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100339:	c9                   	leave  
c010033a:	c3                   	ret    

c010033b <readline>:
 * The readline() function returns the text of the line read. If some errors
 * are happened, NULL is returned. The return value is a global variable,
 * thus it should be copied before it is used.
 * */
char *
readline(const char *prompt) {
c010033b:	55                   	push   %ebp
c010033c:	89 e5                	mov    %esp,%ebp
c010033e:	83 ec 18             	sub    $0x18,%esp
    if (prompt != NULL) {
c0100341:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0100345:	74 13                	je     c010035a <readline+0x1f>
        cprintf("%s", prompt);
c0100347:	83 ec 08             	sub    $0x8,%esp
c010034a:	ff 75 08             	pushl  0x8(%ebp)
c010034d:	68 67 ba 10 c0       	push   $0xc010ba67
c0100352:	e8 40 ff ff ff       	call   c0100297 <cprintf>
c0100357:	83 c4 10             	add    $0x10,%esp
    }
    int i = 0, c;
c010035a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        c = getchar();
c0100361:	e8 bc ff ff ff       	call   c0100322 <getchar>
c0100366:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (c < 0) {
c0100369:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010036d:	79 0a                	jns    c0100379 <readline+0x3e>
            return NULL;
c010036f:	b8 00 00 00 00       	mov    $0x0,%eax
c0100374:	e9 82 00 00 00       	jmp    c01003fb <readline+0xc0>
        }
        else if (c >= ' ' && i < BUFSIZE - 1) {
c0100379:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
c010037d:	7e 2b                	jle    c01003aa <readline+0x6f>
c010037f:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
c0100386:	7f 22                	jg     c01003aa <readline+0x6f>
            cputchar(c);
c0100388:	83 ec 0c             	sub    $0xc,%esp
c010038b:	ff 75 f0             	pushl  -0x10(%ebp)
c010038e:	e8 2a ff ff ff       	call   c01002bd <cputchar>
c0100393:	83 c4 10             	add    $0x10,%esp
            buf[i ++] = c;
c0100396:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100399:	8d 50 01             	lea    0x1(%eax),%edx
c010039c:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010039f:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01003a2:	88 90 20 00 1b c0    	mov    %dl,-0x3fe4ffe0(%eax)
c01003a8:	eb 4c                	jmp    c01003f6 <readline+0xbb>
        }
        else if (c == '\b' && i > 0) {
c01003aa:	83 7d f0 08          	cmpl   $0x8,-0x10(%ebp)
c01003ae:	75 1a                	jne    c01003ca <readline+0x8f>
c01003b0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01003b4:	7e 14                	jle    c01003ca <readline+0x8f>
            cputchar(c);
c01003b6:	83 ec 0c             	sub    $0xc,%esp
c01003b9:	ff 75 f0             	pushl  -0x10(%ebp)
c01003bc:	e8 fc fe ff ff       	call   c01002bd <cputchar>
c01003c1:	83 c4 10             	add    $0x10,%esp
            i --;
c01003c4:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c01003c8:	eb 2c                	jmp    c01003f6 <readline+0xbb>
        }
        else if (c == '\n' || c == '\r') {
c01003ca:	83 7d f0 0a          	cmpl   $0xa,-0x10(%ebp)
c01003ce:	74 06                	je     c01003d6 <readline+0x9b>
c01003d0:	83 7d f0 0d          	cmpl   $0xd,-0x10(%ebp)
c01003d4:	75 8b                	jne    c0100361 <readline+0x26>
            cputchar(c);
c01003d6:	83 ec 0c             	sub    $0xc,%esp
c01003d9:	ff 75 f0             	pushl  -0x10(%ebp)
c01003dc:	e8 dc fe ff ff       	call   c01002bd <cputchar>
c01003e1:	83 c4 10             	add    $0x10,%esp
            buf[i] = '\0';
c01003e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01003e7:	05 20 00 1b c0       	add    $0xc01b0020,%eax
c01003ec:	c6 00 00             	movb   $0x0,(%eax)
            return buf;
c01003ef:	b8 20 00 1b c0       	mov    $0xc01b0020,%eax
c01003f4:	eb 05                	jmp    c01003fb <readline+0xc0>
        }
    }
c01003f6:	e9 66 ff ff ff       	jmp    c0100361 <readline+0x26>
}
c01003fb:	c9                   	leave  
c01003fc:	c3                   	ret    

c01003fd <__panic>:
/* *
 * __panic - __panic is called on unresolvable fatal errors. it prints
 * "panic: 'message'", and then enters the kernel monitor.
 * */
void
__panic(const char *file, int line, const char *fmt, ...) {
c01003fd:	55                   	push   %ebp
c01003fe:	89 e5                	mov    %esp,%ebp
c0100400:	83 ec 18             	sub    $0x18,%esp
    if (is_panic) {
c0100403:	a1 20 04 1b c0       	mov    0xc01b0420,%eax
c0100408:	85 c0                	test   %eax,%eax
c010040a:	75 5f                	jne    c010046b <__panic+0x6e>
        goto panic_dead;
    }
    is_panic = 1;
c010040c:	c7 05 20 04 1b c0 01 	movl   $0x1,0xc01b0420
c0100413:	00 00 00 

    // print the 'message'
    va_list ap;
    va_start(ap, fmt);
c0100416:	8d 45 14             	lea    0x14(%ebp),%eax
c0100419:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cprintf("kernel panic at %s:%d:\n    ", file, line);
c010041c:	83 ec 04             	sub    $0x4,%esp
c010041f:	ff 75 0c             	pushl  0xc(%ebp)
c0100422:	ff 75 08             	pushl  0x8(%ebp)
c0100425:	68 6a ba 10 c0       	push   $0xc010ba6a
c010042a:	e8 68 fe ff ff       	call   c0100297 <cprintf>
c010042f:	83 c4 10             	add    $0x10,%esp
    vcprintf(fmt, ap);
c0100432:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100435:	83 ec 08             	sub    $0x8,%esp
c0100438:	50                   	push   %eax
c0100439:	ff 75 10             	pushl  0x10(%ebp)
c010043c:	e8 2d fe ff ff       	call   c010026e <vcprintf>
c0100441:	83 c4 10             	add    $0x10,%esp
    cprintf("\n");
c0100444:	83 ec 0c             	sub    $0xc,%esp
c0100447:	68 86 ba 10 c0       	push   $0xc010ba86
c010044c:	e8 46 fe ff ff       	call   c0100297 <cprintf>
c0100451:	83 c4 10             	add    $0x10,%esp
    
    cprintf("stack trackback:\n");
c0100454:	83 ec 0c             	sub    $0xc,%esp
c0100457:	68 88 ba 10 c0       	push   $0xc010ba88
c010045c:	e8 36 fe ff ff       	call   c0100297 <cprintf>
c0100461:	83 c4 10             	add    $0x10,%esp
    print_stackframe();
c0100464:	e8 ee 06 00 00       	call   c0100b57 <print_stackframe>
c0100469:	eb 01                	jmp    c010046c <__panic+0x6f>
 * "panic: 'message'", and then enters the kernel monitor.
 * */
void
__panic(const char *file, int line, const char *fmt, ...) {
    if (is_panic) {
        goto panic_dead;
c010046b:	90                   	nop
    print_stackframe();
    
    va_end(ap);

panic_dead:
    intr_disable();
c010046c:	e8 4b 1d 00 00       	call   c01021bc <intr_disable>
    while (1) {
        kmonitor(NULL);
c0100471:	83 ec 0c             	sub    $0xc,%esp
c0100474:	6a 00                	push   $0x0
c0100476:	e8 14 09 00 00       	call   c0100d8f <kmonitor>
c010047b:	83 c4 10             	add    $0x10,%esp
    }
c010047e:	eb f1                	jmp    c0100471 <__panic+0x74>

c0100480 <__warn>:
}

/* __warn - like panic, but don't */
void
__warn(const char *file, int line, const char *fmt, ...) {
c0100480:	55                   	push   %ebp
c0100481:	89 e5                	mov    %esp,%ebp
c0100483:	83 ec 18             	sub    $0x18,%esp
    va_list ap;
    va_start(ap, fmt);
c0100486:	8d 45 14             	lea    0x14(%ebp),%eax
c0100489:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cprintf("kernel warning at %s:%d:\n    ", file, line);
c010048c:	83 ec 04             	sub    $0x4,%esp
c010048f:	ff 75 0c             	pushl  0xc(%ebp)
c0100492:	ff 75 08             	pushl  0x8(%ebp)
c0100495:	68 9a ba 10 c0       	push   $0xc010ba9a
c010049a:	e8 f8 fd ff ff       	call   c0100297 <cprintf>
c010049f:	83 c4 10             	add    $0x10,%esp
    vcprintf(fmt, ap);
c01004a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01004a5:	83 ec 08             	sub    $0x8,%esp
c01004a8:	50                   	push   %eax
c01004a9:	ff 75 10             	pushl  0x10(%ebp)
c01004ac:	e8 bd fd ff ff       	call   c010026e <vcprintf>
c01004b1:	83 c4 10             	add    $0x10,%esp
    cprintf("\n");
c01004b4:	83 ec 0c             	sub    $0xc,%esp
c01004b7:	68 86 ba 10 c0       	push   $0xc010ba86
c01004bc:	e8 d6 fd ff ff       	call   c0100297 <cprintf>
c01004c1:	83 c4 10             	add    $0x10,%esp
    va_end(ap);
}
c01004c4:	90                   	nop
c01004c5:	c9                   	leave  
c01004c6:	c3                   	ret    

c01004c7 <is_kernel_panic>:

bool
is_kernel_panic(void) {
c01004c7:	55                   	push   %ebp
c01004c8:	89 e5                	mov    %esp,%ebp
    return is_panic;
c01004ca:	a1 20 04 1b c0       	mov    0xc01b0420,%eax
}
c01004cf:	5d                   	pop    %ebp
c01004d0:	c3                   	ret    

c01004d1 <stab_binsearch>:
 *      stab_binsearch(stabs, &left, &right, N_SO, 0xf0100184);
 * will exit setting left = 118, right = 554.
 * */
static void
stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
           int type, uintptr_t addr) {
c01004d1:	55                   	push   %ebp
c01004d2:	89 e5                	mov    %esp,%ebp
c01004d4:	83 ec 20             	sub    $0x20,%esp
    int l = *region_left, r = *region_right, any_matches = 0;
c01004d7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01004da:	8b 00                	mov    (%eax),%eax
c01004dc:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01004df:	8b 45 10             	mov    0x10(%ebp),%eax
c01004e2:	8b 00                	mov    (%eax),%eax
c01004e4:	89 45 f8             	mov    %eax,-0x8(%ebp)
c01004e7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    while (l <= r) {
c01004ee:	e9 d2 00 00 00       	jmp    c01005c5 <stab_binsearch+0xf4>
        int true_m = (l + r) / 2, m = true_m;
c01004f3:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01004f6:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01004f9:	01 d0                	add    %edx,%eax
c01004fb:	89 c2                	mov    %eax,%edx
c01004fd:	c1 ea 1f             	shr    $0x1f,%edx
c0100500:	01 d0                	add    %edx,%eax
c0100502:	d1 f8                	sar    %eax
c0100504:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0100507:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010050a:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // search for earliest stab with right type
        while (m >= l && stabs[m].n_type != type) {
c010050d:	eb 04                	jmp    c0100513 <stab_binsearch+0x42>
            m --;
c010050f:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)

    while (l <= r) {
        int true_m = (l + r) / 2, m = true_m;

        // search for earliest stab with right type
        while (m >= l && stabs[m].n_type != type) {
c0100513:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100516:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100519:	7c 1f                	jl     c010053a <stab_binsearch+0x69>
c010051b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010051e:	89 d0                	mov    %edx,%eax
c0100520:	01 c0                	add    %eax,%eax
c0100522:	01 d0                	add    %edx,%eax
c0100524:	c1 e0 02             	shl    $0x2,%eax
c0100527:	89 c2                	mov    %eax,%edx
c0100529:	8b 45 08             	mov    0x8(%ebp),%eax
c010052c:	01 d0                	add    %edx,%eax
c010052e:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100532:	0f b6 c0             	movzbl %al,%eax
c0100535:	3b 45 14             	cmp    0x14(%ebp),%eax
c0100538:	75 d5                	jne    c010050f <stab_binsearch+0x3e>
            m --;
        }
        if (m < l) {    // no match in [l, m]
c010053a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010053d:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100540:	7d 0b                	jge    c010054d <stab_binsearch+0x7c>
            l = true_m + 1;
c0100542:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100545:	83 c0 01             	add    $0x1,%eax
c0100548:	89 45 fc             	mov    %eax,-0x4(%ebp)
            continue;
c010054b:	eb 78                	jmp    c01005c5 <stab_binsearch+0xf4>
        }

        // actual binary search
        any_matches = 1;
c010054d:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
        if (stabs[m].n_value < addr) {
c0100554:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100557:	89 d0                	mov    %edx,%eax
c0100559:	01 c0                	add    %eax,%eax
c010055b:	01 d0                	add    %edx,%eax
c010055d:	c1 e0 02             	shl    $0x2,%eax
c0100560:	89 c2                	mov    %eax,%edx
c0100562:	8b 45 08             	mov    0x8(%ebp),%eax
c0100565:	01 d0                	add    %edx,%eax
c0100567:	8b 40 08             	mov    0x8(%eax),%eax
c010056a:	3b 45 18             	cmp    0x18(%ebp),%eax
c010056d:	73 13                	jae    c0100582 <stab_binsearch+0xb1>
            *region_left = m;
c010056f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100572:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100575:	89 10                	mov    %edx,(%eax)
            l = true_m + 1;
c0100577:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010057a:	83 c0 01             	add    $0x1,%eax
c010057d:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0100580:	eb 43                	jmp    c01005c5 <stab_binsearch+0xf4>
        } else if (stabs[m].n_value > addr) {
c0100582:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100585:	89 d0                	mov    %edx,%eax
c0100587:	01 c0                	add    %eax,%eax
c0100589:	01 d0                	add    %edx,%eax
c010058b:	c1 e0 02             	shl    $0x2,%eax
c010058e:	89 c2                	mov    %eax,%edx
c0100590:	8b 45 08             	mov    0x8(%ebp),%eax
c0100593:	01 d0                	add    %edx,%eax
c0100595:	8b 40 08             	mov    0x8(%eax),%eax
c0100598:	3b 45 18             	cmp    0x18(%ebp),%eax
c010059b:	76 16                	jbe    c01005b3 <stab_binsearch+0xe2>
            *region_right = m - 1;
c010059d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01005a0:	8d 50 ff             	lea    -0x1(%eax),%edx
c01005a3:	8b 45 10             	mov    0x10(%ebp),%eax
c01005a6:	89 10                	mov    %edx,(%eax)
            r = m - 1;
c01005a8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01005ab:	83 e8 01             	sub    $0x1,%eax
c01005ae:	89 45 f8             	mov    %eax,-0x8(%ebp)
c01005b1:	eb 12                	jmp    c01005c5 <stab_binsearch+0xf4>
        } else {
            // exact match for 'addr', but continue loop to find
            // *region_right
            *region_left = m;
c01005b3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01005b6:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01005b9:	89 10                	mov    %edx,(%eax)
            l = m;
c01005bb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01005be:	89 45 fc             	mov    %eax,-0x4(%ebp)
            addr ++;
c01005c1:	83 45 18 01          	addl   $0x1,0x18(%ebp)
static void
stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
           int type, uintptr_t addr) {
    int l = *region_left, r = *region_right, any_matches = 0;

    while (l <= r) {
c01005c5:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01005c8:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c01005cb:	0f 8e 22 ff ff ff    	jle    c01004f3 <stab_binsearch+0x22>
            l = m;
            addr ++;
        }
    }

    if (!any_matches) {
c01005d1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01005d5:	75 0f                	jne    c01005e6 <stab_binsearch+0x115>
        *region_right = *region_left - 1;
c01005d7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01005da:	8b 00                	mov    (%eax),%eax
c01005dc:	8d 50 ff             	lea    -0x1(%eax),%edx
c01005df:	8b 45 10             	mov    0x10(%ebp),%eax
c01005e2:	89 10                	mov    %edx,(%eax)
        l = *region_right;
        for (; l > *region_left && stabs[l].n_type != type; l --)
            /* do nothing */;
        *region_left = l;
    }
}
c01005e4:	eb 3f                	jmp    c0100625 <stab_binsearch+0x154>
    if (!any_matches) {
        *region_right = *region_left - 1;
    }
    else {
        // find rightmost region containing 'addr'
        l = *region_right;
c01005e6:	8b 45 10             	mov    0x10(%ebp),%eax
c01005e9:	8b 00                	mov    (%eax),%eax
c01005eb:	89 45 fc             	mov    %eax,-0x4(%ebp)
        for (; l > *region_left && stabs[l].n_type != type; l --)
c01005ee:	eb 04                	jmp    c01005f4 <stab_binsearch+0x123>
c01005f0:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
c01005f4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01005f7:	8b 00                	mov    (%eax),%eax
c01005f9:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c01005fc:	7d 1f                	jge    c010061d <stab_binsearch+0x14c>
c01005fe:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0100601:	89 d0                	mov    %edx,%eax
c0100603:	01 c0                	add    %eax,%eax
c0100605:	01 d0                	add    %edx,%eax
c0100607:	c1 e0 02             	shl    $0x2,%eax
c010060a:	89 c2                	mov    %eax,%edx
c010060c:	8b 45 08             	mov    0x8(%ebp),%eax
c010060f:	01 d0                	add    %edx,%eax
c0100611:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100615:	0f b6 c0             	movzbl %al,%eax
c0100618:	3b 45 14             	cmp    0x14(%ebp),%eax
c010061b:	75 d3                	jne    c01005f0 <stab_binsearch+0x11f>
            /* do nothing */;
        *region_left = l;
c010061d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100620:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0100623:	89 10                	mov    %edx,(%eax)
    }
}
c0100625:	90                   	nop
c0100626:	c9                   	leave  
c0100627:	c3                   	ret    

c0100628 <debuginfo_eip>:
 * the specified instruction address, @addr.  Returns 0 if information
 * was found, and negative if not.  But even if it returns negative it
 * has stored some information into '*info'.
 * */
int
debuginfo_eip(uintptr_t addr, struct eipdebuginfo *info) {
c0100628:	55                   	push   %ebp
c0100629:	89 e5                	mov    %esp,%ebp
c010062b:	83 ec 38             	sub    $0x38,%esp
    const struct stab *stabs, *stab_end;
    const char *stabstr, *stabstr_end;

    info->eip_file = "<unknown>";
c010062e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100631:	c7 00 b8 ba 10 c0    	movl   $0xc010bab8,(%eax)
    info->eip_line = 0;
c0100637:	8b 45 0c             	mov    0xc(%ebp),%eax
c010063a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    info->eip_fn_name = "<unknown>";
c0100641:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100644:	c7 40 08 b8 ba 10 c0 	movl   $0xc010bab8,0x8(%eax)
    info->eip_fn_namelen = 9;
c010064b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010064e:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
    info->eip_fn_addr = addr;
c0100655:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100658:	8b 55 08             	mov    0x8(%ebp),%edx
c010065b:	89 50 10             	mov    %edx,0x10(%eax)
    info->eip_fn_narg = 0;
c010065e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100661:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

    // find the relevant set of stabs
    if (addr >= KERNBASE) {
c0100668:	81 7d 08 ff ff ff bf 	cmpl   $0xbfffffff,0x8(%ebp)
c010066f:	76 21                	jbe    c0100692 <debuginfo_eip+0x6a>
        stabs = __STAB_BEGIN__;
c0100671:	c7 45 f4 e0 e1 10 c0 	movl   $0xc010e1e0,-0xc(%ebp)
        stab_end = __STAB_END__;
c0100678:	c7 45 f0 88 38 12 c0 	movl   $0xc0123888,-0x10(%ebp)
        stabstr = __STABSTR_BEGIN__;
c010067f:	c7 45 ec 89 38 12 c0 	movl   $0xc0123889,-0x14(%ebp)
        stabstr_end = __STABSTR_END__;
c0100686:	c7 45 e8 75 9a 12 c0 	movl   $0xc0129a75,-0x18(%ebp)
c010068d:	e9 c3 00 00 00       	jmp    c0100755 <debuginfo_eip+0x12d>
    }
    else {
        // user-program linker script, tools/user.ld puts the information about the
        // program's stabs (included __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__,
        // and __STABSTR_END__) in a structure located at virtual address USTAB.
        const struct userstabdata *usd = (struct userstabdata *)USTAB;
c0100692:	c7 45 e4 00 00 20 00 	movl   $0x200000,-0x1c(%ebp)

        // make sure that debugger (current process) can access this memory
        struct mm_struct *mm;
        if (current == NULL || (mm = current->mm) == NULL) {
c0100699:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010069e:	85 c0                	test   %eax,%eax
c01006a0:	74 11                	je     c01006b3 <debuginfo_eip+0x8b>
c01006a2:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c01006a7:	8b 40 18             	mov    0x18(%eax),%eax
c01006aa:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01006ad:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01006b1:	75 0a                	jne    c01006bd <debuginfo_eip+0x95>
            return -1;
c01006b3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01006b8:	e9 4e 03 00 00       	jmp    c0100a0b <debuginfo_eip+0x3e3>
        }
        if (!user_mem_check(mm, (uintptr_t)usd, sizeof(struct userstabdata), 0)) {
c01006bd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01006c0:	6a 00                	push   $0x0
c01006c2:	6a 10                	push   $0x10
c01006c4:	50                   	push   %eax
c01006c5:	ff 75 e0             	pushl  -0x20(%ebp)
c01006c8:	e8 d8 3e 00 00       	call   c01045a5 <user_mem_check>
c01006cd:	83 c4 10             	add    $0x10,%esp
c01006d0:	85 c0                	test   %eax,%eax
c01006d2:	75 0a                	jne    c01006de <debuginfo_eip+0xb6>
            return -1;
c01006d4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01006d9:	e9 2d 03 00 00       	jmp    c0100a0b <debuginfo_eip+0x3e3>
        }

        stabs = usd->stabs;
c01006de:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01006e1:	8b 00                	mov    (%eax),%eax
c01006e3:	89 45 f4             	mov    %eax,-0xc(%ebp)
        stab_end = usd->stab_end;
c01006e6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01006e9:	8b 40 04             	mov    0x4(%eax),%eax
c01006ec:	89 45 f0             	mov    %eax,-0x10(%ebp)
        stabstr = usd->stabstr;
c01006ef:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01006f2:	8b 40 08             	mov    0x8(%eax),%eax
c01006f5:	89 45 ec             	mov    %eax,-0x14(%ebp)
        stabstr_end = usd->stabstr_end;
c01006f8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01006fb:	8b 40 0c             	mov    0xc(%eax),%eax
c01006fe:	89 45 e8             	mov    %eax,-0x18(%ebp)

        // make sure the STABS and string table memory is valid
        if (!user_mem_check(mm, (uintptr_t)stabs, (uintptr_t)stab_end - (uintptr_t)stabs, 0)) {
c0100701:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100704:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100707:	29 c2                	sub    %eax,%edx
c0100709:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010070c:	6a 00                	push   $0x0
c010070e:	52                   	push   %edx
c010070f:	50                   	push   %eax
c0100710:	ff 75 e0             	pushl  -0x20(%ebp)
c0100713:	e8 8d 3e 00 00       	call   c01045a5 <user_mem_check>
c0100718:	83 c4 10             	add    $0x10,%esp
c010071b:	85 c0                	test   %eax,%eax
c010071d:	75 0a                	jne    c0100729 <debuginfo_eip+0x101>
            return -1;
c010071f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100724:	e9 e2 02 00 00       	jmp    c0100a0b <debuginfo_eip+0x3e3>
        }
        if (!user_mem_check(mm, (uintptr_t)stabstr, stabstr_end - stabstr, 0)) {
c0100729:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010072c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010072f:	29 c2                	sub    %eax,%edx
c0100731:	89 d0                	mov    %edx,%eax
c0100733:	89 c2                	mov    %eax,%edx
c0100735:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100738:	6a 00                	push   $0x0
c010073a:	52                   	push   %edx
c010073b:	50                   	push   %eax
c010073c:	ff 75 e0             	pushl  -0x20(%ebp)
c010073f:	e8 61 3e 00 00       	call   c01045a5 <user_mem_check>
c0100744:	83 c4 10             	add    $0x10,%esp
c0100747:	85 c0                	test   %eax,%eax
c0100749:	75 0a                	jne    c0100755 <debuginfo_eip+0x12d>
            return -1;
c010074b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100750:	e9 b6 02 00 00       	jmp    c0100a0b <debuginfo_eip+0x3e3>
        }
    }

    // String table validity checks
    if (stabstr_end <= stabstr || stabstr_end[-1] != 0) {
c0100755:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100758:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010075b:	76 0d                	jbe    c010076a <debuginfo_eip+0x142>
c010075d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100760:	83 e8 01             	sub    $0x1,%eax
c0100763:	0f b6 00             	movzbl (%eax),%eax
c0100766:	84 c0                	test   %al,%al
c0100768:	74 0a                	je     c0100774 <debuginfo_eip+0x14c>
        return -1;
c010076a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010076f:	e9 97 02 00 00       	jmp    c0100a0b <debuginfo_eip+0x3e3>
    // 'eip'.  First, we find the basic source file containing 'eip'.
    // Then, we look in that source file for the function.  Then we look
    // for the line number.

    // Search the entire set of stabs for the source file (type N_SO).
    int lfile = 0, rfile = (stab_end - stabs) - 1;
c0100774:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c010077b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010077e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100781:	29 c2                	sub    %eax,%edx
c0100783:	89 d0                	mov    %edx,%eax
c0100785:	c1 f8 02             	sar    $0x2,%eax
c0100788:	69 c0 ab aa aa aa    	imul   $0xaaaaaaab,%eax,%eax
c010078e:	83 e8 01             	sub    $0x1,%eax
c0100791:	89 45 d8             	mov    %eax,-0x28(%ebp)
    stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
c0100794:	83 ec 0c             	sub    $0xc,%esp
c0100797:	ff 75 08             	pushl  0x8(%ebp)
c010079a:	6a 64                	push   $0x64
c010079c:	8d 45 d8             	lea    -0x28(%ebp),%eax
c010079f:	50                   	push   %eax
c01007a0:	8d 45 dc             	lea    -0x24(%ebp),%eax
c01007a3:	50                   	push   %eax
c01007a4:	ff 75 f4             	pushl  -0xc(%ebp)
c01007a7:	e8 25 fd ff ff       	call   c01004d1 <stab_binsearch>
c01007ac:	83 c4 20             	add    $0x20,%esp
    if (lfile == 0)
c01007af:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01007b2:	85 c0                	test   %eax,%eax
c01007b4:	75 0a                	jne    c01007c0 <debuginfo_eip+0x198>
        return -1;
c01007b6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01007bb:	e9 4b 02 00 00       	jmp    c0100a0b <debuginfo_eip+0x3e3>

    // Search within that file's stabs for the function definition
    // (N_FUN).
    int lfun = lfile, rfun = rfile;
c01007c0:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01007c3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c01007c6:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01007c9:	89 45 d0             	mov    %eax,-0x30(%ebp)
    int lline, rline;
    stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
c01007cc:	83 ec 0c             	sub    $0xc,%esp
c01007cf:	ff 75 08             	pushl  0x8(%ebp)
c01007d2:	6a 24                	push   $0x24
c01007d4:	8d 45 d0             	lea    -0x30(%ebp),%eax
c01007d7:	50                   	push   %eax
c01007d8:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c01007db:	50                   	push   %eax
c01007dc:	ff 75 f4             	pushl  -0xc(%ebp)
c01007df:	e8 ed fc ff ff       	call   c01004d1 <stab_binsearch>
c01007e4:	83 c4 20             	add    $0x20,%esp

    if (lfun <= rfun) {
c01007e7:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01007ea:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01007ed:	39 c2                	cmp    %eax,%edx
c01007ef:	7f 7c                	jg     c010086d <debuginfo_eip+0x245>
        // stabs[lfun] points to the function name
        // in the string table, but check bounds just in case.
        if (stabs[lfun].n_strx < stabstr_end - stabstr) {
c01007f1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01007f4:	89 c2                	mov    %eax,%edx
c01007f6:	89 d0                	mov    %edx,%eax
c01007f8:	01 c0                	add    %eax,%eax
c01007fa:	01 d0                	add    %edx,%eax
c01007fc:	c1 e0 02             	shl    $0x2,%eax
c01007ff:	89 c2                	mov    %eax,%edx
c0100801:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100804:	01 d0                	add    %edx,%eax
c0100806:	8b 00                	mov    (%eax),%eax
c0100808:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c010080b:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010080e:	29 d1                	sub    %edx,%ecx
c0100810:	89 ca                	mov    %ecx,%edx
c0100812:	39 d0                	cmp    %edx,%eax
c0100814:	73 22                	jae    c0100838 <debuginfo_eip+0x210>
            info->eip_fn_name = stabstr + stabs[lfun].n_strx;
c0100816:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100819:	89 c2                	mov    %eax,%edx
c010081b:	89 d0                	mov    %edx,%eax
c010081d:	01 c0                	add    %eax,%eax
c010081f:	01 d0                	add    %edx,%eax
c0100821:	c1 e0 02             	shl    $0x2,%eax
c0100824:	89 c2                	mov    %eax,%edx
c0100826:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100829:	01 d0                	add    %edx,%eax
c010082b:	8b 10                	mov    (%eax),%edx
c010082d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100830:	01 c2                	add    %eax,%edx
c0100832:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100835:	89 50 08             	mov    %edx,0x8(%eax)
        }
        info->eip_fn_addr = stabs[lfun].n_value;
c0100838:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010083b:	89 c2                	mov    %eax,%edx
c010083d:	89 d0                	mov    %edx,%eax
c010083f:	01 c0                	add    %eax,%eax
c0100841:	01 d0                	add    %edx,%eax
c0100843:	c1 e0 02             	shl    $0x2,%eax
c0100846:	89 c2                	mov    %eax,%edx
c0100848:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010084b:	01 d0                	add    %edx,%eax
c010084d:	8b 50 08             	mov    0x8(%eax),%edx
c0100850:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100853:	89 50 10             	mov    %edx,0x10(%eax)
        addr -= info->eip_fn_addr;
c0100856:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100859:	8b 40 10             	mov    0x10(%eax),%eax
c010085c:	29 45 08             	sub    %eax,0x8(%ebp)
        // Search within the function definition for the line number.
        lline = lfun;
c010085f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100862:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfun;
c0100865:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0100868:	89 45 c8             	mov    %eax,-0x38(%ebp)
c010086b:	eb 15                	jmp    c0100882 <debuginfo_eip+0x25a>
    } else {
        // Couldn't find function stab!  Maybe we're in an assembly
        // file.  Search the whole file for the line number.
        info->eip_fn_addr = addr;
c010086d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100870:	8b 55 08             	mov    0x8(%ebp),%edx
c0100873:	89 50 10             	mov    %edx,0x10(%eax)
        lline = lfile;
c0100876:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100879:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfile;
c010087c:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010087f:	89 45 c8             	mov    %eax,-0x38(%ebp)
    }
    info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
c0100882:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100885:	8b 40 08             	mov    0x8(%eax),%eax
c0100888:	83 ec 08             	sub    $0x8,%esp
c010088b:	6a 3a                	push   $0x3a
c010088d:	50                   	push   %eax
c010088e:	e8 ff a6 00 00       	call   c010af92 <strfind>
c0100893:	83 c4 10             	add    $0x10,%esp
c0100896:	89 c2                	mov    %eax,%edx
c0100898:	8b 45 0c             	mov    0xc(%ebp),%eax
c010089b:	8b 40 08             	mov    0x8(%eax),%eax
c010089e:	29 c2                	sub    %eax,%edx
c01008a0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01008a3:	89 50 0c             	mov    %edx,0xc(%eax)

    // Search within [lline, rline] for the line number stab.
    // If found, set info->eip_line to the right line number.
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
c01008a6:	83 ec 0c             	sub    $0xc,%esp
c01008a9:	ff 75 08             	pushl  0x8(%ebp)
c01008ac:	6a 44                	push   $0x44
c01008ae:	8d 45 c8             	lea    -0x38(%ebp),%eax
c01008b1:	50                   	push   %eax
c01008b2:	8d 45 cc             	lea    -0x34(%ebp),%eax
c01008b5:	50                   	push   %eax
c01008b6:	ff 75 f4             	pushl  -0xc(%ebp)
c01008b9:	e8 13 fc ff ff       	call   c01004d1 <stab_binsearch>
c01008be:	83 c4 20             	add    $0x20,%esp
    if (lline <= rline) {
c01008c1:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01008c4:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01008c7:	39 c2                	cmp    %eax,%edx
c01008c9:	7f 24                	jg     c01008ef <debuginfo_eip+0x2c7>
        info->eip_line = stabs[rline].n_desc;
c01008cb:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01008ce:	89 c2                	mov    %eax,%edx
c01008d0:	89 d0                	mov    %edx,%eax
c01008d2:	01 c0                	add    %eax,%eax
c01008d4:	01 d0                	add    %edx,%eax
c01008d6:	c1 e0 02             	shl    $0x2,%eax
c01008d9:	89 c2                	mov    %eax,%edx
c01008db:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01008de:	01 d0                	add    %edx,%eax
c01008e0:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c01008e4:	0f b7 d0             	movzwl %ax,%edx
c01008e7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01008ea:	89 50 04             	mov    %edx,0x4(%eax)

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c01008ed:	eb 13                	jmp    c0100902 <debuginfo_eip+0x2da>
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
    if (lline <= rline) {
        info->eip_line = stabs[rline].n_desc;
    } else {
        return -1;
c01008ef:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01008f4:	e9 12 01 00 00       	jmp    c0100a0b <debuginfo_eip+0x3e3>
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
           && stabs[lline].n_type != N_SOL
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
        lline --;
c01008f9:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01008fc:	83 e8 01             	sub    $0x1,%eax
c01008ff:	89 45 cc             	mov    %eax,-0x34(%ebp)

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c0100902:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0100905:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100908:	39 c2                	cmp    %eax,%edx
c010090a:	7c 56                	jl     c0100962 <debuginfo_eip+0x33a>
           && stabs[lline].n_type != N_SOL
c010090c:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010090f:	89 c2                	mov    %eax,%edx
c0100911:	89 d0                	mov    %edx,%eax
c0100913:	01 c0                	add    %eax,%eax
c0100915:	01 d0                	add    %edx,%eax
c0100917:	c1 e0 02             	shl    $0x2,%eax
c010091a:	89 c2                	mov    %eax,%edx
c010091c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010091f:	01 d0                	add    %edx,%eax
c0100921:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100925:	3c 84                	cmp    $0x84,%al
c0100927:	74 39                	je     c0100962 <debuginfo_eip+0x33a>
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
c0100929:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010092c:	89 c2                	mov    %eax,%edx
c010092e:	89 d0                	mov    %edx,%eax
c0100930:	01 c0                	add    %eax,%eax
c0100932:	01 d0                	add    %edx,%eax
c0100934:	c1 e0 02             	shl    $0x2,%eax
c0100937:	89 c2                	mov    %eax,%edx
c0100939:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010093c:	01 d0                	add    %edx,%eax
c010093e:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100942:	3c 64                	cmp    $0x64,%al
c0100944:	75 b3                	jne    c01008f9 <debuginfo_eip+0x2d1>
c0100946:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100949:	89 c2                	mov    %eax,%edx
c010094b:	89 d0                	mov    %edx,%eax
c010094d:	01 c0                	add    %eax,%eax
c010094f:	01 d0                	add    %edx,%eax
c0100951:	c1 e0 02             	shl    $0x2,%eax
c0100954:	89 c2                	mov    %eax,%edx
c0100956:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100959:	01 d0                	add    %edx,%eax
c010095b:	8b 40 08             	mov    0x8(%eax),%eax
c010095e:	85 c0                	test   %eax,%eax
c0100960:	74 97                	je     c01008f9 <debuginfo_eip+0x2d1>
        lline --;
    }
    if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr) {
c0100962:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0100965:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100968:	39 c2                	cmp    %eax,%edx
c010096a:	7c 46                	jl     c01009b2 <debuginfo_eip+0x38a>
c010096c:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010096f:	89 c2                	mov    %eax,%edx
c0100971:	89 d0                	mov    %edx,%eax
c0100973:	01 c0                	add    %eax,%eax
c0100975:	01 d0                	add    %edx,%eax
c0100977:	c1 e0 02             	shl    $0x2,%eax
c010097a:	89 c2                	mov    %eax,%edx
c010097c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010097f:	01 d0                	add    %edx,%eax
c0100981:	8b 00                	mov    (%eax),%eax
c0100983:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c0100986:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0100989:	29 d1                	sub    %edx,%ecx
c010098b:	89 ca                	mov    %ecx,%edx
c010098d:	39 d0                	cmp    %edx,%eax
c010098f:	73 21                	jae    c01009b2 <debuginfo_eip+0x38a>
        info->eip_file = stabstr + stabs[lline].n_strx;
c0100991:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100994:	89 c2                	mov    %eax,%edx
c0100996:	89 d0                	mov    %edx,%eax
c0100998:	01 c0                	add    %eax,%eax
c010099a:	01 d0                	add    %edx,%eax
c010099c:	c1 e0 02             	shl    $0x2,%eax
c010099f:	89 c2                	mov    %eax,%edx
c01009a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01009a4:	01 d0                	add    %edx,%eax
c01009a6:	8b 10                	mov    (%eax),%edx
c01009a8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01009ab:	01 c2                	add    %eax,%edx
c01009ad:	8b 45 0c             	mov    0xc(%ebp),%eax
c01009b0:	89 10                	mov    %edx,(%eax)
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
c01009b2:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01009b5:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01009b8:	39 c2                	cmp    %eax,%edx
c01009ba:	7d 4a                	jge    c0100a06 <debuginfo_eip+0x3de>
        for (lline = lfun + 1;
c01009bc:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01009bf:	83 c0 01             	add    $0x1,%eax
c01009c2:	89 45 cc             	mov    %eax,-0x34(%ebp)
c01009c5:	eb 18                	jmp    c01009df <debuginfo_eip+0x3b7>
             lline < rfun && stabs[lline].n_type == N_PSYM;
             lline ++) {
            info->eip_fn_narg ++;
c01009c7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01009ca:	8b 40 14             	mov    0x14(%eax),%eax
c01009cd:	8d 50 01             	lea    0x1(%eax),%edx
c01009d0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01009d3:	89 50 14             	mov    %edx,0x14(%eax)
    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
             lline < rfun && stabs[lline].n_type == N_PSYM;
             lline ++) {
c01009d6:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01009d9:	83 c0 01             	add    $0x1,%eax
c01009dc:	89 45 cc             	mov    %eax,-0x34(%ebp)

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
             lline < rfun && stabs[lline].n_type == N_PSYM;
c01009df:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01009e2:	8b 45 d0             	mov    -0x30(%ebp),%eax
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
c01009e5:	39 c2                	cmp    %eax,%edx
c01009e7:	7d 1d                	jge    c0100a06 <debuginfo_eip+0x3de>
             lline < rfun && stabs[lline].n_type == N_PSYM;
c01009e9:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01009ec:	89 c2                	mov    %eax,%edx
c01009ee:	89 d0                	mov    %edx,%eax
c01009f0:	01 c0                	add    %eax,%eax
c01009f2:	01 d0                	add    %edx,%eax
c01009f4:	c1 e0 02             	shl    $0x2,%eax
c01009f7:	89 c2                	mov    %eax,%edx
c01009f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01009fc:	01 d0                	add    %edx,%eax
c01009fe:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100a02:	3c a0                	cmp    $0xa0,%al
c0100a04:	74 c1                	je     c01009c7 <debuginfo_eip+0x39f>
             lline ++) {
            info->eip_fn_narg ++;
        }
    }
    return 0;
c0100a06:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100a0b:	c9                   	leave  
c0100a0c:	c3                   	ret    

c0100a0d <print_kerninfo>:
 * print_kerninfo - print the information about kernel, including the location
 * of kernel entry, the start addresses of data and text segements, the start
 * address of free memory and how many memory that kernel has used.
 * */
void
print_kerninfo(void) {
c0100a0d:	55                   	push   %ebp
c0100a0e:	89 e5                	mov    %esp,%ebp
c0100a10:	83 ec 08             	sub    $0x8,%esp
    extern char etext[], edata[], end[], kern_init[];
    cprintf("Special kernel symbols:\n");
c0100a13:	83 ec 0c             	sub    $0xc,%esp
c0100a16:	68 c2 ba 10 c0       	push   $0xc010bac2
c0100a1b:	e8 77 f8 ff ff       	call   c0100297 <cprintf>
c0100a20:	83 c4 10             	add    $0x10,%esp
    cprintf("  entry  0x%08x (phys)\n", kern_init);
c0100a23:	83 ec 08             	sub    $0x8,%esp
c0100a26:	68 36 00 10 c0       	push   $0xc0100036
c0100a2b:	68 db ba 10 c0       	push   $0xc010badb
c0100a30:	e8 62 f8 ff ff       	call   c0100297 <cprintf>
c0100a35:	83 c4 10             	add    $0x10,%esp
    cprintf("  etext  0x%08x (phys)\n", etext);
c0100a38:	83 ec 08             	sub    $0x8,%esp
c0100a3b:	68 b2 b9 10 c0       	push   $0xc010b9b2
c0100a40:	68 f3 ba 10 c0       	push   $0xc010baf3
c0100a45:	e8 4d f8 ff ff       	call   c0100297 <cprintf>
c0100a4a:	83 c4 10             	add    $0x10,%esp
    cprintf("  edata  0x%08x (phys)\n", edata);
c0100a4d:	83 ec 08             	sub    $0x8,%esp
c0100a50:	68 00 00 1b c0       	push   $0xc01b0000
c0100a55:	68 0b bb 10 c0       	push   $0xc010bb0b
c0100a5a:	e8 38 f8 ff ff       	call   c0100297 <cprintf>
c0100a5f:	83 c4 10             	add    $0x10,%esp
    cprintf("  end    0x%08x (phys)\n", end);
c0100a62:	83 ec 08             	sub    $0x8,%esp
c0100a65:	68 c4 31 1b c0       	push   $0xc01b31c4
c0100a6a:	68 23 bb 10 c0       	push   $0xc010bb23
c0100a6f:	e8 23 f8 ff ff       	call   c0100297 <cprintf>
c0100a74:	83 c4 10             	add    $0x10,%esp
    cprintf("Kernel executable memory footprint: %dKB\n", (end - kern_init + 1023)/1024);
c0100a77:	b8 c4 31 1b c0       	mov    $0xc01b31c4,%eax
c0100a7c:	05 ff 03 00 00       	add    $0x3ff,%eax
c0100a81:	ba 36 00 10 c0       	mov    $0xc0100036,%edx
c0100a86:	29 d0                	sub    %edx,%eax
c0100a88:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
c0100a8e:	85 c0                	test   %eax,%eax
c0100a90:	0f 48 c2             	cmovs  %edx,%eax
c0100a93:	c1 f8 0a             	sar    $0xa,%eax
c0100a96:	83 ec 08             	sub    $0x8,%esp
c0100a99:	50                   	push   %eax
c0100a9a:	68 3c bb 10 c0       	push   $0xc010bb3c
c0100a9f:	e8 f3 f7 ff ff       	call   c0100297 <cprintf>
c0100aa4:	83 c4 10             	add    $0x10,%esp
}
c0100aa7:	90                   	nop
c0100aa8:	c9                   	leave  
c0100aa9:	c3                   	ret    

c0100aaa <print_debuginfo>:
/* *
 * print_debuginfo - read and print the stat information for the address @eip,
 * and info.eip_fn_addr should be the first address of the related function.
 * */
void
print_debuginfo(uintptr_t eip) {
c0100aaa:	55                   	push   %ebp
c0100aab:	89 e5                	mov    %esp,%ebp
c0100aad:	81 ec 28 01 00 00    	sub    $0x128,%esp
    struct eipdebuginfo info;
    if (debuginfo_eip(eip, &info) != 0) {
c0100ab3:	83 ec 08             	sub    $0x8,%esp
c0100ab6:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0100ab9:	50                   	push   %eax
c0100aba:	ff 75 08             	pushl  0x8(%ebp)
c0100abd:	e8 66 fb ff ff       	call   c0100628 <debuginfo_eip>
c0100ac2:	83 c4 10             	add    $0x10,%esp
c0100ac5:	85 c0                	test   %eax,%eax
c0100ac7:	74 15                	je     c0100ade <print_debuginfo+0x34>
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
c0100ac9:	83 ec 08             	sub    $0x8,%esp
c0100acc:	ff 75 08             	pushl  0x8(%ebp)
c0100acf:	68 66 bb 10 c0       	push   $0xc010bb66
c0100ad4:	e8 be f7 ff ff       	call   c0100297 <cprintf>
c0100ad9:	83 c4 10             	add    $0x10,%esp
        }
        fnname[j] = '\0';
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
                fnname, eip - info.eip_fn_addr);
    }
}
c0100adc:	eb 65                	jmp    c0100b43 <print_debuginfo+0x99>
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
    }
    else {
        char fnname[256];
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0100ade:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100ae5:	eb 1c                	jmp    c0100b03 <print_debuginfo+0x59>
            fnname[j] = info.eip_fn_name[j];
c0100ae7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0100aea:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100aed:	01 d0                	add    %edx,%eax
c0100aef:	0f b6 00             	movzbl (%eax),%eax
c0100af2:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
c0100af8:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100afb:	01 ca                	add    %ecx,%edx
c0100afd:	88 02                	mov    %al,(%edx)
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
    }
    else {
        char fnname[256];
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0100aff:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100b03:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100b06:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0100b09:	7f dc                	jg     c0100ae7 <print_debuginfo+0x3d>
            fnname[j] = info.eip_fn_name[j];
        }
        fnname[j] = '\0';
c0100b0b:	8d 95 dc fe ff ff    	lea    -0x124(%ebp),%edx
c0100b11:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b14:	01 d0                	add    %edx,%eax
c0100b16:	c6 00 00             	movb   $0x0,(%eax)
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
                fnname, eip - info.eip_fn_addr);
c0100b19:	8b 45 ec             	mov    -0x14(%ebp),%eax
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
            fnname[j] = info.eip_fn_name[j];
        }
        fnname[j] = '\0';
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
c0100b1c:	8b 55 08             	mov    0x8(%ebp),%edx
c0100b1f:	89 d1                	mov    %edx,%ecx
c0100b21:	29 c1                	sub    %eax,%ecx
c0100b23:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0100b26:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100b29:	83 ec 0c             	sub    $0xc,%esp
c0100b2c:	51                   	push   %ecx
c0100b2d:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
c0100b33:	51                   	push   %ecx
c0100b34:	52                   	push   %edx
c0100b35:	50                   	push   %eax
c0100b36:	68 82 bb 10 c0       	push   $0xc010bb82
c0100b3b:	e8 57 f7 ff ff       	call   c0100297 <cprintf>
c0100b40:	83 c4 20             	add    $0x20,%esp
                fnname, eip - info.eip_fn_addr);
    }
}
c0100b43:	90                   	nop
c0100b44:	c9                   	leave  
c0100b45:	c3                   	ret    

c0100b46 <read_eip>:

static __noinline uint32_t
read_eip(void) {
c0100b46:	55                   	push   %ebp
c0100b47:	89 e5                	mov    %esp,%ebp
c0100b49:	83 ec 10             	sub    $0x10,%esp
    uint32_t eip;
    asm volatile("movl 4(%%ebp), %0" : "=r" (eip));
c0100b4c:	8b 45 04             	mov    0x4(%ebp),%eax
c0100b4f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eip;
c0100b52:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0100b55:	c9                   	leave  
c0100b56:	c3                   	ret    

c0100b57 <print_stackframe>:
 *
 * Note that, the length of ebp-chain is limited. In boot/bootasm.S, before jumping
 * to the kernel entry, the value of ebp has been set to zero, that's the boundary.
 * */
void
print_stackframe(void) {
c0100b57:	55                   	push   %ebp
c0100b58:	89 e5                	mov    %esp,%ebp
c0100b5a:	53                   	push   %ebx
c0100b5b:	83 ec 34             	sub    $0x34,%esp
}

static inline uint32_t
read_ebp(void) {
    uint32_t ebp;
    asm volatile ("movl %%ebp, %0" : "=r" (ebp));
c0100b5e:	89 e8                	mov    %ebp,%eax
c0100b60:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return ebp;
c0100b63:	8b 45 e4             	mov    -0x1c(%ebp),%eax
      *    (3.5) popup a calling stackframe
      *           NOTICE: the calling funciton's return addr eip  = ss:[ebp+4]
      *                   the calling funciton's ebp = ss:[ebp]
      */
    // 1. read_ebp
    uint32_t stack_val_ebp = read_ebp();
c0100b66:	89 45 f4             	mov    %eax,-0xc(%ebp)
    // 2. read_eip
    uint32_t stack_val_eip = read_eip();
c0100b69:	e8 d8 ff ff ff       	call   c0100b46 <read_eip>
c0100b6e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    // 3. iterate stacks
    uint32_t stack_val_args[4];
    for (int i = 0; i < STACKFRAME_DEPTH; i++) {
c0100b71:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0100b78:	e9 93 00 00 00       	jmp    c0100c10 <print_stackframe+0xb9>
        cprintf("ebp:0x%08x eip:0x%08x ", stack_val_ebp, stack_val_eip);
c0100b7d:	83 ec 04             	sub    $0x4,%esp
c0100b80:	ff 75 f0             	pushl  -0x10(%ebp)
c0100b83:	ff 75 f4             	pushl  -0xc(%ebp)
c0100b86:	68 94 bb 10 c0       	push   $0xc010bb94
c0100b8b:	e8 07 f7 ff ff       	call   c0100297 <cprintf>
c0100b90:	83 c4 10             	add    $0x10,%esp
        // get args
        for (int j = 0; j < 4; j++) {
c0100b93:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c0100b9a:	eb 1f                	jmp    c0100bbb <print_stackframe+0x64>
            stack_val_args[j] = *(((uint32_t*) stack_val_ebp) + 2 + j);
c0100b9c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100b9f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0100ba6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100ba9:	01 d0                	add    %edx,%eax
c0100bab:	83 c0 08             	add    $0x8,%eax
c0100bae:	8b 10                	mov    (%eax),%edx
c0100bb0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100bb3:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
    // 3. iterate stacks
    uint32_t stack_val_args[4];
    for (int i = 0; i < STACKFRAME_DEPTH; i++) {
        cprintf("ebp:0x%08x eip:0x%08x ", stack_val_ebp, stack_val_eip);
        // get args
        for (int j = 0; j < 4; j++) {
c0100bb7:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
c0100bbb:	83 7d e8 03          	cmpl   $0x3,-0x18(%ebp)
c0100bbf:	7e db                	jle    c0100b9c <print_stackframe+0x45>
            stack_val_args[j] = *(((uint32_t*) stack_val_ebp) + 2 + j);
        }
        cprintf("args:0x%08x 0x%08x 0x%08x 0x%08x\n", stack_val_args[0], 
c0100bc1:	8b 5d e0             	mov    -0x20(%ebp),%ebx
c0100bc4:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0100bc7:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0100bca:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100bcd:	83 ec 0c             	sub    $0xc,%esp
c0100bd0:	53                   	push   %ebx
c0100bd1:	51                   	push   %ecx
c0100bd2:	52                   	push   %edx
c0100bd3:	50                   	push   %eax
c0100bd4:	68 ac bb 10 c0       	push   $0xc010bbac
c0100bd9:	e8 b9 f6 ff ff       	call   c0100297 <cprintf>
c0100bde:	83 c4 20             	add    $0x20,%esp
                stack_val_args[1], stack_val_args[2], stack_val_args[3]);
        // print function info
        print_debuginfo(stack_val_eip - 1);
c0100be1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100be4:	83 e8 01             	sub    $0x1,%eax
c0100be7:	83 ec 0c             	sub    $0xc,%esp
c0100bea:	50                   	push   %eax
c0100beb:	e8 ba fe ff ff       	call   c0100aaa <print_debuginfo>
c0100bf0:	83 c4 10             	add    $0x10,%esp
        // pop up stackframe, refresh ebp & eip
        stack_val_eip = *(((uint32_t*) stack_val_ebp) + 1);
c0100bf3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100bf6:	83 c0 04             	add    $0x4,%eax
c0100bf9:	8b 00                	mov    (%eax),%eax
c0100bfb:	89 45 f0             	mov    %eax,-0x10(%ebp)
        stack_val_ebp = *(((uint32_t*) stack_val_ebp));
c0100bfe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100c01:	8b 00                	mov    (%eax),%eax
c0100c03:	89 45 f4             	mov    %eax,-0xc(%ebp)
        // ebp should be valid
        if (stack_val_ebp <= 0) {
c0100c06:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100c0a:	74 10                	je     c0100c1c <print_stackframe+0xc5>
    uint32_t stack_val_ebp = read_ebp();
    // 2. read_eip
    uint32_t stack_val_eip = read_eip();
    // 3. iterate stacks
    uint32_t stack_val_args[4];
    for (int i = 0; i < STACKFRAME_DEPTH; i++) {
c0100c0c:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0100c10:	83 7d ec 13          	cmpl   $0x13,-0x14(%ebp)
c0100c14:	0f 8e 63 ff ff ff    	jle    c0100b7d <print_stackframe+0x26>
        // ebp should be valid
        if (stack_val_ebp <= 0) {
            break;
        }
    }
}
c0100c1a:	eb 01                	jmp    c0100c1d <print_stackframe+0xc6>
        // pop up stackframe, refresh ebp & eip
        stack_val_eip = *(((uint32_t*) stack_val_ebp) + 1);
        stack_val_ebp = *(((uint32_t*) stack_val_ebp));
        // ebp should be valid
        if (stack_val_ebp <= 0) {
            break;
c0100c1c:	90                   	nop
        }
    }
}
c0100c1d:	90                   	nop
c0100c1e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0100c21:	c9                   	leave  
c0100c22:	c3                   	ret    

c0100c23 <parse>:
#define MAXARGS         16
#define WHITESPACE      " \t\n\r"

/* parse - parse the command buffer into whitespace-separated arguments */
static int
parse(char *buf, char **argv) {
c0100c23:	55                   	push   %ebp
c0100c24:	89 e5                	mov    %esp,%ebp
c0100c26:	83 ec 18             	sub    $0x18,%esp
    int argc = 0;
c0100c29:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100c30:	eb 0c                	jmp    c0100c3e <parse+0x1b>
            *buf ++ = '\0';
c0100c32:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c35:	8d 50 01             	lea    0x1(%eax),%edx
c0100c38:	89 55 08             	mov    %edx,0x8(%ebp)
c0100c3b:	c6 00 00             	movb   $0x0,(%eax)
static int
parse(char *buf, char **argv) {
    int argc = 0;
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100c3e:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c41:	0f b6 00             	movzbl (%eax),%eax
c0100c44:	84 c0                	test   %al,%al
c0100c46:	74 1e                	je     c0100c66 <parse+0x43>
c0100c48:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c4b:	0f b6 00             	movzbl (%eax),%eax
c0100c4e:	0f be c0             	movsbl %al,%eax
c0100c51:	83 ec 08             	sub    $0x8,%esp
c0100c54:	50                   	push   %eax
c0100c55:	68 50 bc 10 c0       	push   $0xc010bc50
c0100c5a:	e8 00 a3 00 00       	call   c010af5f <strchr>
c0100c5f:	83 c4 10             	add    $0x10,%esp
c0100c62:	85 c0                	test   %eax,%eax
c0100c64:	75 cc                	jne    c0100c32 <parse+0xf>
            *buf ++ = '\0';
        }
        if (*buf == '\0') {
c0100c66:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c69:	0f b6 00             	movzbl (%eax),%eax
c0100c6c:	84 c0                	test   %al,%al
c0100c6e:	74 69                	je     c0100cd9 <parse+0xb6>
            break;
        }

        // save and scan past next arg
        if (argc == MAXARGS - 1) {
c0100c70:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
c0100c74:	75 12                	jne    c0100c88 <parse+0x65>
            cprintf("Too many arguments (max %d).\n", MAXARGS);
c0100c76:	83 ec 08             	sub    $0x8,%esp
c0100c79:	6a 10                	push   $0x10
c0100c7b:	68 55 bc 10 c0       	push   $0xc010bc55
c0100c80:	e8 12 f6 ff ff       	call   c0100297 <cprintf>
c0100c85:	83 c4 10             	add    $0x10,%esp
        }
        argv[argc ++] = buf;
c0100c88:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100c8b:	8d 50 01             	lea    0x1(%eax),%edx
c0100c8e:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0100c91:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0100c98:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100c9b:	01 c2                	add    %eax,%edx
c0100c9d:	8b 45 08             	mov    0x8(%ebp),%eax
c0100ca0:	89 02                	mov    %eax,(%edx)
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c0100ca2:	eb 04                	jmp    c0100ca8 <parse+0x85>
            buf ++;
c0100ca4:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        // save and scan past next arg
        if (argc == MAXARGS - 1) {
            cprintf("Too many arguments (max %d).\n", MAXARGS);
        }
        argv[argc ++] = buf;
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c0100ca8:	8b 45 08             	mov    0x8(%ebp),%eax
c0100cab:	0f b6 00             	movzbl (%eax),%eax
c0100cae:	84 c0                	test   %al,%al
c0100cb0:	0f 84 7a ff ff ff    	je     c0100c30 <parse+0xd>
c0100cb6:	8b 45 08             	mov    0x8(%ebp),%eax
c0100cb9:	0f b6 00             	movzbl (%eax),%eax
c0100cbc:	0f be c0             	movsbl %al,%eax
c0100cbf:	83 ec 08             	sub    $0x8,%esp
c0100cc2:	50                   	push   %eax
c0100cc3:	68 50 bc 10 c0       	push   $0xc010bc50
c0100cc8:	e8 92 a2 00 00       	call   c010af5f <strchr>
c0100ccd:	83 c4 10             	add    $0x10,%esp
c0100cd0:	85 c0                	test   %eax,%eax
c0100cd2:	74 d0                	je     c0100ca4 <parse+0x81>
            buf ++;
        }
    }
c0100cd4:	e9 57 ff ff ff       	jmp    c0100c30 <parse+0xd>
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
            *buf ++ = '\0';
        }
        if (*buf == '\0') {
            break;
c0100cd9:	90                   	nop
        argv[argc ++] = buf;
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
            buf ++;
        }
    }
    return argc;
c0100cda:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100cdd:	c9                   	leave  
c0100cde:	c3                   	ret    

c0100cdf <runcmd>:
/* *
 * runcmd - parse the input string, split it into separated arguments
 * and then lookup and invoke some related commands/
 * */
static int
runcmd(char *buf, struct trapframe *tf) {
c0100cdf:	55                   	push   %ebp
c0100ce0:	89 e5                	mov    %esp,%ebp
c0100ce2:	83 ec 58             	sub    $0x58,%esp
    char *argv[MAXARGS];
    int argc = parse(buf, argv);
c0100ce5:	83 ec 08             	sub    $0x8,%esp
c0100ce8:	8d 45 b0             	lea    -0x50(%ebp),%eax
c0100ceb:	50                   	push   %eax
c0100cec:	ff 75 08             	pushl  0x8(%ebp)
c0100cef:	e8 2f ff ff ff       	call   c0100c23 <parse>
c0100cf4:	83 c4 10             	add    $0x10,%esp
c0100cf7:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (argc == 0) {
c0100cfa:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0100cfe:	75 0a                	jne    c0100d0a <runcmd+0x2b>
        return 0;
c0100d00:	b8 00 00 00 00       	mov    $0x0,%eax
c0100d05:	e9 83 00 00 00       	jmp    c0100d8d <runcmd+0xae>
    }
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100d0a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100d11:	eb 59                	jmp    c0100d6c <runcmd+0x8d>
        if (strcmp(commands[i].name, argv[0]) == 0) {
c0100d13:	8b 4d b0             	mov    -0x50(%ebp),%ecx
c0100d16:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100d19:	89 d0                	mov    %edx,%eax
c0100d1b:	01 c0                	add    %eax,%eax
c0100d1d:	01 d0                	add    %edx,%eax
c0100d1f:	c1 e0 02             	shl    $0x2,%eax
c0100d22:	05 00 c0 12 c0       	add    $0xc012c000,%eax
c0100d27:	8b 00                	mov    (%eax),%eax
c0100d29:	83 ec 08             	sub    $0x8,%esp
c0100d2c:	51                   	push   %ecx
c0100d2d:	50                   	push   %eax
c0100d2e:	e8 8c a1 00 00       	call   c010aebf <strcmp>
c0100d33:	83 c4 10             	add    $0x10,%esp
c0100d36:	85 c0                	test   %eax,%eax
c0100d38:	75 2e                	jne    c0100d68 <runcmd+0x89>
            return commands[i].func(argc - 1, argv + 1, tf);
c0100d3a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100d3d:	89 d0                	mov    %edx,%eax
c0100d3f:	01 c0                	add    %eax,%eax
c0100d41:	01 d0                	add    %edx,%eax
c0100d43:	c1 e0 02             	shl    $0x2,%eax
c0100d46:	05 08 c0 12 c0       	add    $0xc012c008,%eax
c0100d4b:	8b 10                	mov    (%eax),%edx
c0100d4d:	8d 45 b0             	lea    -0x50(%ebp),%eax
c0100d50:	83 c0 04             	add    $0x4,%eax
c0100d53:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c0100d56:	83 e9 01             	sub    $0x1,%ecx
c0100d59:	83 ec 04             	sub    $0x4,%esp
c0100d5c:	ff 75 0c             	pushl  0xc(%ebp)
c0100d5f:	50                   	push   %eax
c0100d60:	51                   	push   %ecx
c0100d61:	ff d2                	call   *%edx
c0100d63:	83 c4 10             	add    $0x10,%esp
c0100d66:	eb 25                	jmp    c0100d8d <runcmd+0xae>
    int argc = parse(buf, argv);
    if (argc == 0) {
        return 0;
    }
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100d68:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100d6c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100d6f:	83 f8 02             	cmp    $0x2,%eax
c0100d72:	76 9f                	jbe    c0100d13 <runcmd+0x34>
        if (strcmp(commands[i].name, argv[0]) == 0) {
            return commands[i].func(argc - 1, argv + 1, tf);
        }
    }
    cprintf("Unknown command '%s'\n", argv[0]);
c0100d74:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0100d77:	83 ec 08             	sub    $0x8,%esp
c0100d7a:	50                   	push   %eax
c0100d7b:	68 73 bc 10 c0       	push   $0xc010bc73
c0100d80:	e8 12 f5 ff ff       	call   c0100297 <cprintf>
c0100d85:	83 c4 10             	add    $0x10,%esp
    return 0;
c0100d88:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100d8d:	c9                   	leave  
c0100d8e:	c3                   	ret    

c0100d8f <kmonitor>:

/***** Implementations of basic kernel monitor commands *****/

void
kmonitor(struct trapframe *tf) {
c0100d8f:	55                   	push   %ebp
c0100d90:	89 e5                	mov    %esp,%ebp
c0100d92:	83 ec 18             	sub    $0x18,%esp
    cprintf("Welcome to the kernel debug monitor!!\n");
c0100d95:	83 ec 0c             	sub    $0xc,%esp
c0100d98:	68 8c bc 10 c0       	push   $0xc010bc8c
c0100d9d:	e8 f5 f4 ff ff       	call   c0100297 <cprintf>
c0100da2:	83 c4 10             	add    $0x10,%esp
    cprintf("Type 'help' for a list of commands.\n");
c0100da5:	83 ec 0c             	sub    $0xc,%esp
c0100da8:	68 b4 bc 10 c0       	push   $0xc010bcb4
c0100dad:	e8 e5 f4 ff ff       	call   c0100297 <cprintf>
c0100db2:	83 c4 10             	add    $0x10,%esp

    if (tf != NULL) {
c0100db5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0100db9:	74 0e                	je     c0100dc9 <kmonitor+0x3a>
        print_trapframe(tf);
c0100dbb:	83 ec 0c             	sub    $0xc,%esp
c0100dbe:	ff 75 08             	pushl  0x8(%ebp)
c0100dc1:	e8 6d 16 00 00       	call   c0102433 <print_trapframe>
c0100dc6:	83 c4 10             	add    $0x10,%esp
    }

    char *buf;
    while (1) {
        if ((buf = readline("K> ")) != NULL) {
c0100dc9:	83 ec 0c             	sub    $0xc,%esp
c0100dcc:	68 d9 bc 10 c0       	push   $0xc010bcd9
c0100dd1:	e8 65 f5 ff ff       	call   c010033b <readline>
c0100dd6:	83 c4 10             	add    $0x10,%esp
c0100dd9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100ddc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100de0:	74 e7                	je     c0100dc9 <kmonitor+0x3a>
            if (runcmd(buf, tf) < 0) {
c0100de2:	83 ec 08             	sub    $0x8,%esp
c0100de5:	ff 75 08             	pushl  0x8(%ebp)
c0100de8:	ff 75 f4             	pushl  -0xc(%ebp)
c0100deb:	e8 ef fe ff ff       	call   c0100cdf <runcmd>
c0100df0:	83 c4 10             	add    $0x10,%esp
c0100df3:	85 c0                	test   %eax,%eax
c0100df5:	78 02                	js     c0100df9 <kmonitor+0x6a>
                break;
            }
        }
    }
c0100df7:	eb d0                	jmp    c0100dc9 <kmonitor+0x3a>

    char *buf;
    while (1) {
        if ((buf = readline("K> ")) != NULL) {
            if (runcmd(buf, tf) < 0) {
                break;
c0100df9:	90                   	nop
            }
        }
    }
}
c0100dfa:	90                   	nop
c0100dfb:	c9                   	leave  
c0100dfc:	c3                   	ret    

c0100dfd <mon_help>:

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
c0100dfd:	55                   	push   %ebp
c0100dfe:	89 e5                	mov    %esp,%ebp
c0100e00:	83 ec 18             	sub    $0x18,%esp
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100e03:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100e0a:	eb 3c                	jmp    c0100e48 <mon_help+0x4b>
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
c0100e0c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100e0f:	89 d0                	mov    %edx,%eax
c0100e11:	01 c0                	add    %eax,%eax
c0100e13:	01 d0                	add    %edx,%eax
c0100e15:	c1 e0 02             	shl    $0x2,%eax
c0100e18:	05 04 c0 12 c0       	add    $0xc012c004,%eax
c0100e1d:	8b 08                	mov    (%eax),%ecx
c0100e1f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100e22:	89 d0                	mov    %edx,%eax
c0100e24:	01 c0                	add    %eax,%eax
c0100e26:	01 d0                	add    %edx,%eax
c0100e28:	c1 e0 02             	shl    $0x2,%eax
c0100e2b:	05 00 c0 12 c0       	add    $0xc012c000,%eax
c0100e30:	8b 00                	mov    (%eax),%eax
c0100e32:	83 ec 04             	sub    $0x4,%esp
c0100e35:	51                   	push   %ecx
c0100e36:	50                   	push   %eax
c0100e37:	68 dd bc 10 c0       	push   $0xc010bcdd
c0100e3c:	e8 56 f4 ff ff       	call   c0100297 <cprintf>
c0100e41:	83 c4 10             	add    $0x10,%esp

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100e44:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100e48:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100e4b:	83 f8 02             	cmp    $0x2,%eax
c0100e4e:	76 bc                	jbe    c0100e0c <mon_help+0xf>
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
    }
    return 0;
c0100e50:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100e55:	c9                   	leave  
c0100e56:	c3                   	ret    

c0100e57 <mon_kerninfo>:
/* *
 * mon_kerninfo - call print_kerninfo in kern/debug/kdebug.c to
 * print the memory occupancy in kernel.
 * */
int
mon_kerninfo(int argc, char **argv, struct trapframe *tf) {
c0100e57:	55                   	push   %ebp
c0100e58:	89 e5                	mov    %esp,%ebp
c0100e5a:	83 ec 08             	sub    $0x8,%esp
    print_kerninfo();
c0100e5d:	e8 ab fb ff ff       	call   c0100a0d <print_kerninfo>
    return 0;
c0100e62:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100e67:	c9                   	leave  
c0100e68:	c3                   	ret    

c0100e69 <mon_backtrace>:
/* *
 * mon_backtrace - call print_stackframe in kern/debug/kdebug.c to
 * print a backtrace of the stack.
 * */
int
mon_backtrace(int argc, char **argv, struct trapframe *tf) {
c0100e69:	55                   	push   %ebp
c0100e6a:	89 e5                	mov    %esp,%ebp
c0100e6c:	83 ec 08             	sub    $0x8,%esp
    print_stackframe();
c0100e6f:	e8 e3 fc ff ff       	call   c0100b57 <print_stackframe>
    return 0;
c0100e74:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100e79:	c9                   	leave  
c0100e7a:	c3                   	ret    

c0100e7b <ide_wait_ready>:
    unsigned int size;          // Size in Sectors
    unsigned char model[41];    // Model in String
} ide_devices[MAX_IDE];

static int
ide_wait_ready(unsigned short iobase, bool check_error) {
c0100e7b:	55                   	push   %ebp
c0100e7c:	89 e5                	mov    %esp,%ebp
c0100e7e:	83 ec 14             	sub    $0x14,%esp
c0100e81:	8b 45 08             	mov    0x8(%ebp),%eax
c0100e84:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    int r;
    while ((r = inb(iobase + ISA_STATUS)) & IDE_BSY)
c0100e88:	90                   	nop
c0100e89:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0100e8d:	83 c0 07             	add    $0x7,%eax
c0100e90:	0f b7 c0             	movzwl %ax,%eax
c0100e93:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0100e97:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0100e9b:	89 c2                	mov    %eax,%edx
c0100e9d:	ec                   	in     (%dx),%al
c0100e9e:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c0100ea1:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c0100ea5:	0f b6 c0             	movzbl %al,%eax
c0100ea8:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0100eab:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100eae:	25 80 00 00 00       	and    $0x80,%eax
c0100eb3:	85 c0                	test   %eax,%eax
c0100eb5:	75 d2                	jne    c0100e89 <ide_wait_ready+0xe>
        /* nothing */;
    if (check_error && (r & (IDE_DF | IDE_ERR)) != 0) {
c0100eb7:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0100ebb:	74 11                	je     c0100ece <ide_wait_ready+0x53>
c0100ebd:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100ec0:	83 e0 21             	and    $0x21,%eax
c0100ec3:	85 c0                	test   %eax,%eax
c0100ec5:	74 07                	je     c0100ece <ide_wait_ready+0x53>
        return -1;
c0100ec7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100ecc:	eb 05                	jmp    c0100ed3 <ide_wait_ready+0x58>
    }
    return 0;
c0100ece:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100ed3:	c9                   	leave  
c0100ed4:	c3                   	ret    

c0100ed5 <ide_init>:

void
ide_init(void) {
c0100ed5:	55                   	push   %ebp
c0100ed6:	89 e5                	mov    %esp,%ebp
c0100ed8:	57                   	push   %edi
c0100ed9:	53                   	push   %ebx
c0100eda:	81 ec 40 02 00 00    	sub    $0x240,%esp
    static_assert((SECTSIZE % 4) == 0);
    unsigned short ideno, iobase;
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c0100ee0:	66 c7 45 f6 00 00    	movw   $0x0,-0xa(%ebp)
c0100ee6:	e9 c1 02 00 00       	jmp    c01011ac <ide_init+0x2d7>
        /* assume that no device here */
        ide_devices[ideno].valid = 0;
c0100eeb:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100eef:	c1 e0 03             	shl    $0x3,%eax
c0100ef2:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0100ef9:	29 c2                	sub    %eax,%edx
c0100efb:	89 d0                	mov    %edx,%eax
c0100efd:	05 40 04 1b c0       	add    $0xc01b0440,%eax
c0100f02:	c6 00 00             	movb   $0x0,(%eax)

        iobase = IO_BASE(ideno);
c0100f05:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100f09:	66 d1 e8             	shr    %ax
c0100f0c:	0f b7 c0             	movzwl %ax,%eax
c0100f0f:	0f b7 04 85 e8 bc 10 	movzwl -0x3fef4318(,%eax,4),%eax
c0100f16:	c0 
c0100f17:	66 89 45 ea          	mov    %ax,-0x16(%ebp)

        /* wait device ready */
        ide_wait_ready(iobase, 0);
c0100f1b:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0100f1f:	6a 00                	push   $0x0
c0100f21:	50                   	push   %eax
c0100f22:	e8 54 ff ff ff       	call   c0100e7b <ide_wait_ready>
c0100f27:	83 c4 08             	add    $0x8,%esp

        /* step1: select drive */
        outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4));
c0100f2a:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100f2e:	83 e0 01             	and    $0x1,%eax
c0100f31:	c1 e0 04             	shl    $0x4,%eax
c0100f34:	83 c8 e0             	or     $0xffffffe0,%eax
c0100f37:	0f b6 c0             	movzbl %al,%eax
c0100f3a:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0100f3e:	83 c2 06             	add    $0x6,%edx
c0100f41:	0f b7 d2             	movzwl %dx,%edx
c0100f44:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c0100f48:	88 45 c7             	mov    %al,-0x39(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0100f4b:	0f b6 45 c7          	movzbl -0x39(%ebp),%eax
c0100f4f:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0100f53:	ee                   	out    %al,(%dx)
        ide_wait_ready(iobase, 0);
c0100f54:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0100f58:	6a 00                	push   $0x0
c0100f5a:	50                   	push   %eax
c0100f5b:	e8 1b ff ff ff       	call   c0100e7b <ide_wait_ready>
c0100f60:	83 c4 08             	add    $0x8,%esp

        /* step2: send ATA identify command */
        outb(iobase + ISA_COMMAND, IDE_CMD_IDENTIFY);
c0100f63:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0100f67:	83 c0 07             	add    $0x7,%eax
c0100f6a:	0f b7 c0             	movzwl %ax,%eax
c0100f6d:	66 89 45 e0          	mov    %ax,-0x20(%ebp)
c0100f71:	c6 45 c8 ec          	movb   $0xec,-0x38(%ebp)
c0100f75:	0f b6 45 c8          	movzbl -0x38(%ebp),%eax
c0100f79:	0f b7 55 e0          	movzwl -0x20(%ebp),%edx
c0100f7d:	ee                   	out    %al,(%dx)
        ide_wait_ready(iobase, 0);
c0100f7e:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0100f82:	6a 00                	push   $0x0
c0100f84:	50                   	push   %eax
c0100f85:	e8 f1 fe ff ff       	call   c0100e7b <ide_wait_ready>
c0100f8a:	83 c4 08             	add    $0x8,%esp

        /* step3: polling */
        if (inb(iobase + ISA_STATUS) == 0 || ide_wait_ready(iobase, 1) != 0) {
c0100f8d:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0100f91:	83 c0 07             	add    $0x7,%eax
c0100f94:	0f b7 c0             	movzwl %ax,%eax
c0100f97:	66 89 45 ca          	mov    %ax,-0x36(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0100f9b:	0f b7 45 ca          	movzwl -0x36(%ebp),%eax
c0100f9f:	89 c2                	mov    %eax,%edx
c0100fa1:	ec                   	in     (%dx),%al
c0100fa2:	88 45 c9             	mov    %al,-0x37(%ebp)
    return data;
c0100fa5:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
c0100fa9:	84 c0                	test   %al,%al
c0100fab:	0f 84 ef 01 00 00    	je     c01011a0 <ide_init+0x2cb>
c0100fb1:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0100fb5:	6a 01                	push   $0x1
c0100fb7:	50                   	push   %eax
c0100fb8:	e8 be fe ff ff       	call   c0100e7b <ide_wait_ready>
c0100fbd:	83 c4 08             	add    $0x8,%esp
c0100fc0:	85 c0                	test   %eax,%eax
c0100fc2:	0f 85 d8 01 00 00    	jne    c01011a0 <ide_init+0x2cb>
            continue ;
        }

        /* device is ok */
        ide_devices[ideno].valid = 1;
c0100fc8:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100fcc:	c1 e0 03             	shl    $0x3,%eax
c0100fcf:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0100fd6:	29 c2                	sub    %eax,%edx
c0100fd8:	89 d0                	mov    %edx,%eax
c0100fda:	05 40 04 1b c0       	add    $0xc01b0440,%eax
c0100fdf:	c6 00 01             	movb   $0x1,(%eax)

        /* read identification space of the device */
        unsigned int buffer[128];
        insl(iobase + ISA_DATA, buffer, sizeof(buffer) / sizeof(unsigned int));
c0100fe2:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0100fe6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0100fe9:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
c0100fef:	89 45 c0             	mov    %eax,-0x40(%ebp)
c0100ff2:	c7 45 bc 80 00 00 00 	movl   $0x80,-0x44(%ebp)
}

static inline void
insl(uint32_t port, void *addr, int cnt) {
    asm volatile (
c0100ff9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0100ffc:	8b 4d c0             	mov    -0x40(%ebp),%ecx
c0100fff:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0101002:	89 cb                	mov    %ecx,%ebx
c0101004:	89 df                	mov    %ebx,%edi
c0101006:	89 c1                	mov    %eax,%ecx
c0101008:	fc                   	cld    
c0101009:	f2 6d                	repnz insl (%dx),%es:(%edi)
c010100b:	89 c8                	mov    %ecx,%eax
c010100d:	89 fb                	mov    %edi,%ebx
c010100f:	89 5d c0             	mov    %ebx,-0x40(%ebp)
c0101012:	89 45 bc             	mov    %eax,-0x44(%ebp)

        unsigned char *ident = (unsigned char *)buffer;
c0101015:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
c010101b:	89 45 dc             	mov    %eax,-0x24(%ebp)
        unsigned int sectors;
        unsigned int cmdsets = *(unsigned int *)(ident + IDE_IDENT_CMDSETS);
c010101e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101021:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
c0101027:	89 45 d8             	mov    %eax,-0x28(%ebp)
        /* device use 48-bits or 28-bits addressing */
        if (cmdsets & (1 << 26)) {
c010102a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010102d:	25 00 00 00 04       	and    $0x4000000,%eax
c0101032:	85 c0                	test   %eax,%eax
c0101034:	74 0e                	je     c0101044 <ide_init+0x16f>
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA_EXT);
c0101036:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101039:	8b 80 c8 00 00 00    	mov    0xc8(%eax),%eax
c010103f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0101042:	eb 09                	jmp    c010104d <ide_init+0x178>
        }
        else {
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA);
c0101044:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101047:	8b 40 78             	mov    0x78(%eax),%eax
c010104a:	89 45 f0             	mov    %eax,-0x10(%ebp)
        }
        ide_devices[ideno].sets = cmdsets;
c010104d:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101051:	c1 e0 03             	shl    $0x3,%eax
c0101054:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c010105b:	29 c2                	sub    %eax,%edx
c010105d:	89 d0                	mov    %edx,%eax
c010105f:	8d 90 44 04 1b c0    	lea    -0x3fe4fbbc(%eax),%edx
c0101065:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0101068:	89 02                	mov    %eax,(%edx)
        ide_devices[ideno].size = sectors;
c010106a:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010106e:	c1 e0 03             	shl    $0x3,%eax
c0101071:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101078:	29 c2                	sub    %eax,%edx
c010107a:	89 d0                	mov    %edx,%eax
c010107c:	8d 90 48 04 1b c0    	lea    -0x3fe4fbb8(%eax),%edx
c0101082:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0101085:	89 02                	mov    %eax,(%edx)

        /* check if supports LBA */
        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);
c0101087:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010108a:	83 c0 62             	add    $0x62,%eax
c010108d:	0f b7 00             	movzwl (%eax),%eax
c0101090:	0f b7 c0             	movzwl %ax,%eax
c0101093:	25 00 02 00 00       	and    $0x200,%eax
c0101098:	85 c0                	test   %eax,%eax
c010109a:	75 16                	jne    c01010b2 <ide_init+0x1dd>
c010109c:	68 f0 bc 10 c0       	push   $0xc010bcf0
c01010a1:	68 33 bd 10 c0       	push   $0xc010bd33
c01010a6:	6a 7d                	push   $0x7d
c01010a8:	68 48 bd 10 c0       	push   $0xc010bd48
c01010ad:	e8 4b f3 ff ff       	call   c01003fd <__panic>

        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
c01010b2:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c01010b6:	89 c2                	mov    %eax,%edx
c01010b8:	8d 04 d5 00 00 00 00 	lea    0x0(,%edx,8),%eax
c01010bf:	89 c2                	mov    %eax,%edx
c01010c1:	8d 04 d5 00 00 00 00 	lea    0x0(,%edx,8),%eax
c01010c8:	29 d0                	sub    %edx,%eax
c01010ca:	05 40 04 1b c0       	add    $0xc01b0440,%eax
c01010cf:	83 c0 0c             	add    $0xc,%eax
c01010d2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c01010d5:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01010d8:	83 c0 36             	add    $0x36,%eax
c01010db:	89 45 d0             	mov    %eax,-0x30(%ebp)
        unsigned int i, length = 40;
c01010de:	c7 45 cc 28 00 00 00 	movl   $0x28,-0x34(%ebp)
        for (i = 0; i < length; i += 2) {
c01010e5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01010ec:	eb 34                	jmp    c0101122 <ide_init+0x24d>
            model[i] = data[i + 1], model[i + 1] = data[i];
c01010ee:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01010f1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01010f4:	01 c2                	add    %eax,%edx
c01010f6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01010f9:	8d 48 01             	lea    0x1(%eax),%ecx
c01010fc:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01010ff:	01 c8                	add    %ecx,%eax
c0101101:	0f b6 00             	movzbl (%eax),%eax
c0101104:	88 02                	mov    %al,(%edx)
c0101106:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101109:	8d 50 01             	lea    0x1(%eax),%edx
c010110c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010110f:	01 c2                	add    %eax,%edx
c0101111:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c0101114:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101117:	01 c8                	add    %ecx,%eax
c0101119:	0f b6 00             	movzbl (%eax),%eax
c010111c:	88 02                	mov    %al,(%edx)
        /* check if supports LBA */
        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);

        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
        unsigned int i, length = 40;
        for (i = 0; i < length; i += 2) {
c010111e:	83 45 ec 02          	addl   $0x2,-0x14(%ebp)
c0101122:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101125:	3b 45 cc             	cmp    -0x34(%ebp),%eax
c0101128:	72 c4                	jb     c01010ee <ide_init+0x219>
            model[i] = data[i + 1], model[i + 1] = data[i];
        }
        do {
            model[i] = '\0';
c010112a:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010112d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101130:	01 d0                	add    %edx,%eax
c0101132:	c6 00 00             	movb   $0x0,(%eax)
        } while (i -- > 0 && model[i] == ' ');
c0101135:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101138:	8d 50 ff             	lea    -0x1(%eax),%edx
c010113b:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010113e:	85 c0                	test   %eax,%eax
c0101140:	74 0f                	je     c0101151 <ide_init+0x27c>
c0101142:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0101145:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101148:	01 d0                	add    %edx,%eax
c010114a:	0f b6 00             	movzbl (%eax),%eax
c010114d:	3c 20                	cmp    $0x20,%al
c010114f:	74 d9                	je     c010112a <ide_init+0x255>

        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
c0101151:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101155:	89 c2                	mov    %eax,%edx
c0101157:	8d 04 d5 00 00 00 00 	lea    0x0(,%edx,8),%eax
c010115e:	89 c2                	mov    %eax,%edx
c0101160:	8d 04 d5 00 00 00 00 	lea    0x0(,%edx,8),%eax
c0101167:	29 d0                	sub    %edx,%eax
c0101169:	05 40 04 1b c0       	add    $0xc01b0440,%eax
c010116e:	8d 48 0c             	lea    0xc(%eax),%ecx
c0101171:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101175:	c1 e0 03             	shl    $0x3,%eax
c0101178:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c010117f:	29 c2                	sub    %eax,%edx
c0101181:	89 d0                	mov    %edx,%eax
c0101183:	05 48 04 1b c0       	add    $0xc01b0448,%eax
c0101188:	8b 10                	mov    (%eax),%edx
c010118a:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010118e:	51                   	push   %ecx
c010118f:	52                   	push   %edx
c0101190:	50                   	push   %eax
c0101191:	68 5a bd 10 c0       	push   $0xc010bd5a
c0101196:	e8 fc f0 ff ff       	call   c0100297 <cprintf>
c010119b:	83 c4 10             	add    $0x10,%esp
c010119e:	eb 01                	jmp    c01011a1 <ide_init+0x2cc>
        outb(iobase + ISA_COMMAND, IDE_CMD_IDENTIFY);
        ide_wait_ready(iobase, 0);

        /* step3: polling */
        if (inb(iobase + ISA_STATUS) == 0 || ide_wait_ready(iobase, 1) != 0) {
            continue ;
c01011a0:	90                   	nop

void
ide_init(void) {
    static_assert((SECTSIZE % 4) == 0);
    unsigned short ideno, iobase;
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c01011a1:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c01011a5:	83 c0 01             	add    $0x1,%eax
c01011a8:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
c01011ac:	66 83 7d f6 03       	cmpw   $0x3,-0xa(%ebp)
c01011b1:	0f 86 34 fd ff ff    	jbe    c0100eeb <ide_init+0x16>

        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
    }

    // enable ide interrupt
    pic_enable(IRQ_IDE1);
c01011b7:	83 ec 0c             	sub    $0xc,%esp
c01011ba:	6a 0e                	push   $0xe
c01011bc:	e8 8a 0e 00 00       	call   c010204b <pic_enable>
c01011c1:	83 c4 10             	add    $0x10,%esp
    pic_enable(IRQ_IDE2);
c01011c4:	83 ec 0c             	sub    $0xc,%esp
c01011c7:	6a 0f                	push   $0xf
c01011c9:	e8 7d 0e 00 00       	call   c010204b <pic_enable>
c01011ce:	83 c4 10             	add    $0x10,%esp
}
c01011d1:	90                   	nop
c01011d2:	8d 65 f8             	lea    -0x8(%ebp),%esp
c01011d5:	5b                   	pop    %ebx
c01011d6:	5f                   	pop    %edi
c01011d7:	5d                   	pop    %ebp
c01011d8:	c3                   	ret    

c01011d9 <ide_device_valid>:

bool
ide_device_valid(unsigned short ideno) {
c01011d9:	55                   	push   %ebp
c01011da:	89 e5                	mov    %esp,%ebp
c01011dc:	83 ec 04             	sub    $0x4,%esp
c01011df:	8b 45 08             	mov    0x8(%ebp),%eax
c01011e2:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    return VALID_IDE(ideno);
c01011e6:	66 83 7d fc 03       	cmpw   $0x3,-0x4(%ebp)
c01011eb:	77 25                	ja     c0101212 <ide_device_valid+0x39>
c01011ed:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c01011f1:	c1 e0 03             	shl    $0x3,%eax
c01011f4:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c01011fb:	29 c2                	sub    %eax,%edx
c01011fd:	89 d0                	mov    %edx,%eax
c01011ff:	05 40 04 1b c0       	add    $0xc01b0440,%eax
c0101204:	0f b6 00             	movzbl (%eax),%eax
c0101207:	84 c0                	test   %al,%al
c0101209:	74 07                	je     c0101212 <ide_device_valid+0x39>
c010120b:	b8 01 00 00 00       	mov    $0x1,%eax
c0101210:	eb 05                	jmp    c0101217 <ide_device_valid+0x3e>
c0101212:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101217:	c9                   	leave  
c0101218:	c3                   	ret    

c0101219 <ide_device_size>:

size_t
ide_device_size(unsigned short ideno) {
c0101219:	55                   	push   %ebp
c010121a:	89 e5                	mov    %esp,%ebp
c010121c:	83 ec 04             	sub    $0x4,%esp
c010121f:	8b 45 08             	mov    0x8(%ebp),%eax
c0101222:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    if (ide_device_valid(ideno)) {
c0101226:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c010122a:	50                   	push   %eax
c010122b:	e8 a9 ff ff ff       	call   c01011d9 <ide_device_valid>
c0101230:	83 c4 04             	add    $0x4,%esp
c0101233:	85 c0                	test   %eax,%eax
c0101235:	74 1b                	je     c0101252 <ide_device_size+0x39>
        return ide_devices[ideno].size;
c0101237:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c010123b:	c1 e0 03             	shl    $0x3,%eax
c010123e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101245:	29 c2                	sub    %eax,%edx
c0101247:	89 d0                	mov    %edx,%eax
c0101249:	05 48 04 1b c0       	add    $0xc01b0448,%eax
c010124e:	8b 00                	mov    (%eax),%eax
c0101250:	eb 05                	jmp    c0101257 <ide_device_size+0x3e>
    }
    return 0;
c0101252:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101257:	c9                   	leave  
c0101258:	c3                   	ret    

c0101259 <ide_read_secs>:

int
ide_read_secs(unsigned short ideno, uint32_t secno, void *dst, size_t nsecs) {
c0101259:	55                   	push   %ebp
c010125a:	89 e5                	mov    %esp,%ebp
c010125c:	57                   	push   %edi
c010125d:	53                   	push   %ebx
c010125e:	83 ec 40             	sub    $0x40,%esp
c0101261:	8b 45 08             	mov    0x8(%ebp),%eax
c0101264:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c0101268:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c010126f:	77 25                	ja     c0101296 <ide_read_secs+0x3d>
c0101271:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
c0101276:	77 1e                	ja     c0101296 <ide_read_secs+0x3d>
c0101278:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c010127c:	c1 e0 03             	shl    $0x3,%eax
c010127f:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101286:	29 c2                	sub    %eax,%edx
c0101288:	89 d0                	mov    %edx,%eax
c010128a:	05 40 04 1b c0       	add    $0xc01b0440,%eax
c010128f:	0f b6 00             	movzbl (%eax),%eax
c0101292:	84 c0                	test   %al,%al
c0101294:	75 19                	jne    c01012af <ide_read_secs+0x56>
c0101296:	68 78 bd 10 c0       	push   $0xc010bd78
c010129b:	68 33 bd 10 c0       	push   $0xc010bd33
c01012a0:	68 9f 00 00 00       	push   $0x9f
c01012a5:	68 48 bd 10 c0       	push   $0xc010bd48
c01012aa:	e8 4e f1 ff ff       	call   c01003fd <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c01012af:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c01012b6:	77 0f                	ja     c01012c7 <ide_read_secs+0x6e>
c01012b8:	8b 55 0c             	mov    0xc(%ebp),%edx
c01012bb:	8b 45 14             	mov    0x14(%ebp),%eax
c01012be:	01 d0                	add    %edx,%eax
c01012c0:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c01012c5:	76 19                	jbe    c01012e0 <ide_read_secs+0x87>
c01012c7:	68 a0 bd 10 c0       	push   $0xc010bda0
c01012cc:	68 33 bd 10 c0       	push   $0xc010bd33
c01012d1:	68 a0 00 00 00       	push   $0xa0
c01012d6:	68 48 bd 10 c0       	push   $0xc010bd48
c01012db:	e8 1d f1 ff ff       	call   c01003fd <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c01012e0:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c01012e4:	66 d1 e8             	shr    %ax
c01012e7:	0f b7 c0             	movzwl %ax,%eax
c01012ea:	0f b7 04 85 e8 bc 10 	movzwl -0x3fef4318(,%eax,4),%eax
c01012f1:	c0 
c01012f2:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c01012f6:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c01012fa:	66 d1 e8             	shr    %ax
c01012fd:	0f b7 c0             	movzwl %ax,%eax
c0101300:	0f b7 04 85 ea bc 10 	movzwl -0x3fef4316(,%eax,4),%eax
c0101307:	c0 
c0101308:	66 89 45 f0          	mov    %ax,-0x10(%ebp)

    ide_wait_ready(iobase, 0);
c010130c:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101310:	83 ec 08             	sub    $0x8,%esp
c0101313:	6a 00                	push   $0x0
c0101315:	50                   	push   %eax
c0101316:	e8 60 fb ff ff       	call   c0100e7b <ide_wait_ready>
c010131b:	83 c4 10             	add    $0x10,%esp

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c010131e:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c0101322:	83 c0 02             	add    $0x2,%eax
c0101325:	0f b7 c0             	movzwl %ax,%eax
c0101328:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
c010132c:	c6 45 d7 00          	movb   $0x0,-0x29(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101330:	0f b6 45 d7          	movzbl -0x29(%ebp),%eax
c0101334:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101338:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECCNT, nsecs);
c0101339:	8b 45 14             	mov    0x14(%ebp),%eax
c010133c:	0f b6 c0             	movzbl %al,%eax
c010133f:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101343:	83 c2 02             	add    $0x2,%edx
c0101346:	0f b7 d2             	movzwl %dx,%edx
c0101349:	66 89 55 e8          	mov    %dx,-0x18(%ebp)
c010134d:	88 45 d8             	mov    %al,-0x28(%ebp)
c0101350:	0f b6 45 d8          	movzbl -0x28(%ebp),%eax
c0101354:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c0101358:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c0101359:	8b 45 0c             	mov    0xc(%ebp),%eax
c010135c:	0f b6 c0             	movzbl %al,%eax
c010135f:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101363:	83 c2 03             	add    $0x3,%edx
c0101366:	0f b7 d2             	movzwl %dx,%edx
c0101369:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c010136d:	88 45 d9             	mov    %al,-0x27(%ebp)
c0101370:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c0101374:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0101378:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c0101379:	8b 45 0c             	mov    0xc(%ebp),%eax
c010137c:	c1 e8 08             	shr    $0x8,%eax
c010137f:	0f b6 c0             	movzbl %al,%eax
c0101382:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101386:	83 c2 04             	add    $0x4,%edx
c0101389:	0f b7 d2             	movzwl %dx,%edx
c010138c:	66 89 55 e4          	mov    %dx,-0x1c(%ebp)
c0101390:	88 45 da             	mov    %al,-0x26(%ebp)
c0101393:	0f b6 45 da          	movzbl -0x26(%ebp),%eax
c0101397:	0f b7 55 e4          	movzwl -0x1c(%ebp),%edx
c010139b:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c010139c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010139f:	c1 e8 10             	shr    $0x10,%eax
c01013a2:	0f b6 c0             	movzbl %al,%eax
c01013a5:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01013a9:	83 c2 05             	add    $0x5,%edx
c01013ac:	0f b7 d2             	movzwl %dx,%edx
c01013af:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c01013b3:	88 45 db             	mov    %al,-0x25(%ebp)
c01013b6:	0f b6 45 db          	movzbl -0x25(%ebp),%eax
c01013ba:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c01013be:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c01013bf:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c01013c3:	83 e0 01             	and    $0x1,%eax
c01013c6:	c1 e0 04             	shl    $0x4,%eax
c01013c9:	89 c2                	mov    %eax,%edx
c01013cb:	8b 45 0c             	mov    0xc(%ebp),%eax
c01013ce:	c1 e8 18             	shr    $0x18,%eax
c01013d1:	83 e0 0f             	and    $0xf,%eax
c01013d4:	09 d0                	or     %edx,%eax
c01013d6:	83 c8 e0             	or     $0xffffffe0,%eax
c01013d9:	0f b6 c0             	movzbl %al,%eax
c01013dc:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01013e0:	83 c2 06             	add    $0x6,%edx
c01013e3:	0f b7 d2             	movzwl %dx,%edx
c01013e6:	66 89 55 e0          	mov    %dx,-0x20(%ebp)
c01013ea:	88 45 dc             	mov    %al,-0x24(%ebp)
c01013ed:	0f b6 45 dc          	movzbl -0x24(%ebp),%eax
c01013f1:	0f b7 55 e0          	movzwl -0x20(%ebp),%edx
c01013f5:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_COMMAND, IDE_CMD_READ);
c01013f6:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01013fa:	83 c0 07             	add    $0x7,%eax
c01013fd:	0f b7 c0             	movzwl %ax,%eax
c0101400:	66 89 45 de          	mov    %ax,-0x22(%ebp)
c0101404:	c6 45 dd 20          	movb   $0x20,-0x23(%ebp)
c0101408:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c010140c:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c0101410:	ee                   	out    %al,(%dx)

    int ret = 0;
c0101411:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c0101418:	eb 56                	jmp    c0101470 <ide_read_secs+0x217>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c010141a:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c010141e:	83 ec 08             	sub    $0x8,%esp
c0101421:	6a 01                	push   $0x1
c0101423:	50                   	push   %eax
c0101424:	e8 52 fa ff ff       	call   c0100e7b <ide_wait_ready>
c0101429:	83 c4 10             	add    $0x10,%esp
c010142c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010142f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0101433:	75 43                	jne    c0101478 <ide_read_secs+0x21f>
            goto out;
        }
        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
c0101435:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101439:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010143c:	8b 45 10             	mov    0x10(%ebp),%eax
c010143f:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0101442:	c7 45 cc 80 00 00 00 	movl   $0x80,-0x34(%ebp)
    return data;
}

static inline void
insl(uint32_t port, void *addr, int cnt) {
    asm volatile (
c0101449:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010144c:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c010144f:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0101452:	89 cb                	mov    %ecx,%ebx
c0101454:	89 df                	mov    %ebx,%edi
c0101456:	89 c1                	mov    %eax,%ecx
c0101458:	fc                   	cld    
c0101459:	f2 6d                	repnz insl (%dx),%es:(%edi)
c010145b:	89 c8                	mov    %ecx,%eax
c010145d:	89 fb                	mov    %edi,%ebx
c010145f:	89 5d d0             	mov    %ebx,-0x30(%ebp)
c0101462:	89 45 cc             	mov    %eax,-0x34(%ebp)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
    outb(iobase + ISA_COMMAND, IDE_CMD_READ);

    int ret = 0;
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c0101465:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0101469:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c0101470:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0101474:	75 a4                	jne    c010141a <ide_read_secs+0x1c1>
c0101476:	eb 01                	jmp    c0101479 <ide_read_secs+0x220>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
            goto out;
c0101478:	90                   	nop
        }
        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
    }

out:
    return ret;
c0101479:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010147c:	8d 65 f8             	lea    -0x8(%ebp),%esp
c010147f:	5b                   	pop    %ebx
c0101480:	5f                   	pop    %edi
c0101481:	5d                   	pop    %ebp
c0101482:	c3                   	ret    

c0101483 <ide_write_secs>:

int
ide_write_secs(unsigned short ideno, uint32_t secno, const void *src, size_t nsecs) {
c0101483:	55                   	push   %ebp
c0101484:	89 e5                	mov    %esp,%ebp
c0101486:	56                   	push   %esi
c0101487:	53                   	push   %ebx
c0101488:	83 ec 40             	sub    $0x40,%esp
c010148b:	8b 45 08             	mov    0x8(%ebp),%eax
c010148e:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c0101492:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c0101499:	77 25                	ja     c01014c0 <ide_write_secs+0x3d>
c010149b:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
c01014a0:	77 1e                	ja     c01014c0 <ide_write_secs+0x3d>
c01014a2:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c01014a6:	c1 e0 03             	shl    $0x3,%eax
c01014a9:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c01014b0:	29 c2                	sub    %eax,%edx
c01014b2:	89 d0                	mov    %edx,%eax
c01014b4:	05 40 04 1b c0       	add    $0xc01b0440,%eax
c01014b9:	0f b6 00             	movzbl (%eax),%eax
c01014bc:	84 c0                	test   %al,%al
c01014be:	75 19                	jne    c01014d9 <ide_write_secs+0x56>
c01014c0:	68 78 bd 10 c0       	push   $0xc010bd78
c01014c5:	68 33 bd 10 c0       	push   $0xc010bd33
c01014ca:	68 bc 00 00 00       	push   $0xbc
c01014cf:	68 48 bd 10 c0       	push   $0xc010bd48
c01014d4:	e8 24 ef ff ff       	call   c01003fd <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c01014d9:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c01014e0:	77 0f                	ja     c01014f1 <ide_write_secs+0x6e>
c01014e2:	8b 55 0c             	mov    0xc(%ebp),%edx
c01014e5:	8b 45 14             	mov    0x14(%ebp),%eax
c01014e8:	01 d0                	add    %edx,%eax
c01014ea:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c01014ef:	76 19                	jbe    c010150a <ide_write_secs+0x87>
c01014f1:	68 a0 bd 10 c0       	push   $0xc010bda0
c01014f6:	68 33 bd 10 c0       	push   $0xc010bd33
c01014fb:	68 bd 00 00 00       	push   $0xbd
c0101500:	68 48 bd 10 c0       	push   $0xc010bd48
c0101505:	e8 f3 ee ff ff       	call   c01003fd <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c010150a:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c010150e:	66 d1 e8             	shr    %ax
c0101511:	0f b7 c0             	movzwl %ax,%eax
c0101514:	0f b7 04 85 e8 bc 10 	movzwl -0x3fef4318(,%eax,4),%eax
c010151b:	c0 
c010151c:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0101520:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101524:	66 d1 e8             	shr    %ax
c0101527:	0f b7 c0             	movzwl %ax,%eax
c010152a:	0f b7 04 85 ea bc 10 	movzwl -0x3fef4316(,%eax,4),%eax
c0101531:	c0 
c0101532:	66 89 45 f0          	mov    %ax,-0x10(%ebp)

    ide_wait_ready(iobase, 0);
c0101536:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c010153a:	83 ec 08             	sub    $0x8,%esp
c010153d:	6a 00                	push   $0x0
c010153f:	50                   	push   %eax
c0101540:	e8 36 f9 ff ff       	call   c0100e7b <ide_wait_ready>
c0101545:	83 c4 10             	add    $0x10,%esp

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c0101548:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c010154c:	83 c0 02             	add    $0x2,%eax
c010154f:	0f b7 c0             	movzwl %ax,%eax
c0101552:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
c0101556:	c6 45 d7 00          	movb   $0x0,-0x29(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010155a:	0f b6 45 d7          	movzbl -0x29(%ebp),%eax
c010155e:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101562:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECCNT, nsecs);
c0101563:	8b 45 14             	mov    0x14(%ebp),%eax
c0101566:	0f b6 c0             	movzbl %al,%eax
c0101569:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010156d:	83 c2 02             	add    $0x2,%edx
c0101570:	0f b7 d2             	movzwl %dx,%edx
c0101573:	66 89 55 e8          	mov    %dx,-0x18(%ebp)
c0101577:	88 45 d8             	mov    %al,-0x28(%ebp)
c010157a:	0f b6 45 d8          	movzbl -0x28(%ebp),%eax
c010157e:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c0101582:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c0101583:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101586:	0f b6 c0             	movzbl %al,%eax
c0101589:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010158d:	83 c2 03             	add    $0x3,%edx
c0101590:	0f b7 d2             	movzwl %dx,%edx
c0101593:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c0101597:	88 45 d9             	mov    %al,-0x27(%ebp)
c010159a:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c010159e:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c01015a2:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c01015a3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01015a6:	c1 e8 08             	shr    $0x8,%eax
c01015a9:	0f b6 c0             	movzbl %al,%eax
c01015ac:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01015b0:	83 c2 04             	add    $0x4,%edx
c01015b3:	0f b7 d2             	movzwl %dx,%edx
c01015b6:	66 89 55 e4          	mov    %dx,-0x1c(%ebp)
c01015ba:	88 45 da             	mov    %al,-0x26(%ebp)
c01015bd:	0f b6 45 da          	movzbl -0x26(%ebp),%eax
c01015c1:	0f b7 55 e4          	movzwl -0x1c(%ebp),%edx
c01015c5:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c01015c6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01015c9:	c1 e8 10             	shr    $0x10,%eax
c01015cc:	0f b6 c0             	movzbl %al,%eax
c01015cf:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01015d3:	83 c2 05             	add    $0x5,%edx
c01015d6:	0f b7 d2             	movzwl %dx,%edx
c01015d9:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c01015dd:	88 45 db             	mov    %al,-0x25(%ebp)
c01015e0:	0f b6 45 db          	movzbl -0x25(%ebp),%eax
c01015e4:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c01015e8:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c01015e9:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c01015ed:	83 e0 01             	and    $0x1,%eax
c01015f0:	c1 e0 04             	shl    $0x4,%eax
c01015f3:	89 c2                	mov    %eax,%edx
c01015f5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01015f8:	c1 e8 18             	shr    $0x18,%eax
c01015fb:	83 e0 0f             	and    $0xf,%eax
c01015fe:	09 d0                	or     %edx,%eax
c0101600:	83 c8 e0             	or     $0xffffffe0,%eax
c0101603:	0f b6 c0             	movzbl %al,%eax
c0101606:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010160a:	83 c2 06             	add    $0x6,%edx
c010160d:	0f b7 d2             	movzwl %dx,%edx
c0101610:	66 89 55 e0          	mov    %dx,-0x20(%ebp)
c0101614:	88 45 dc             	mov    %al,-0x24(%ebp)
c0101617:	0f b6 45 dc          	movzbl -0x24(%ebp),%eax
c010161b:	0f b7 55 e0          	movzwl -0x20(%ebp),%edx
c010161f:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);
c0101620:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101624:	83 c0 07             	add    $0x7,%eax
c0101627:	0f b7 c0             	movzwl %ax,%eax
c010162a:	66 89 45 de          	mov    %ax,-0x22(%ebp)
c010162e:	c6 45 dd 30          	movb   $0x30,-0x23(%ebp)
c0101632:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0101636:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c010163a:	ee                   	out    %al,(%dx)

    int ret = 0;
c010163b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c0101642:	eb 56                	jmp    c010169a <ide_write_secs+0x217>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c0101644:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101648:	83 ec 08             	sub    $0x8,%esp
c010164b:	6a 01                	push   $0x1
c010164d:	50                   	push   %eax
c010164e:	e8 28 f8 ff ff       	call   c0100e7b <ide_wait_ready>
c0101653:	83 c4 10             	add    $0x10,%esp
c0101656:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0101659:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010165d:	75 43                	jne    c01016a2 <ide_write_secs+0x21f>
            goto out;
        }
        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
c010165f:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101663:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0101666:	8b 45 10             	mov    0x10(%ebp),%eax
c0101669:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010166c:	c7 45 cc 80 00 00 00 	movl   $0x80,-0x34(%ebp)
    asm volatile ("outw %0, %1" :: "a" (data), "d" (port) : "memory");
}

static inline void
outsl(uint32_t port, const void *addr, int cnt) {
    asm volatile (
c0101673:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0101676:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c0101679:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010167c:	89 cb                	mov    %ecx,%ebx
c010167e:	89 de                	mov    %ebx,%esi
c0101680:	89 c1                	mov    %eax,%ecx
c0101682:	fc                   	cld    
c0101683:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
c0101685:	89 c8                	mov    %ecx,%eax
c0101687:	89 f3                	mov    %esi,%ebx
c0101689:	89 5d d0             	mov    %ebx,-0x30(%ebp)
c010168c:	89 45 cc             	mov    %eax,-0x34(%ebp)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);

    int ret = 0;
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c010168f:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0101693:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c010169a:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010169e:	75 a4                	jne    c0101644 <ide_write_secs+0x1c1>
c01016a0:	eb 01                	jmp    c01016a3 <ide_write_secs+0x220>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
            goto out;
c01016a2:	90                   	nop
        }
        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
    }

out:
    return ret;
c01016a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01016a6:	8d 65 f8             	lea    -0x8(%ebp),%esp
c01016a9:	5b                   	pop    %ebx
c01016aa:	5e                   	pop    %esi
c01016ab:	5d                   	pop    %ebp
c01016ac:	c3                   	ret    

c01016ad <clock_init>:
/* *
 * clock_init - initialize 8253 clock to interrupt 100 times per second,
 * and then enable IRQ_TIMER.
 * */
void
clock_init(void) {
c01016ad:	55                   	push   %ebp
c01016ae:	89 e5                	mov    %esp,%ebp
c01016b0:	83 ec 18             	sub    $0x18,%esp
c01016b3:	66 c7 45 f6 43 00    	movw   $0x43,-0xa(%ebp)
c01016b9:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01016bd:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
c01016c1:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c01016c5:	ee                   	out    %al,(%dx)
c01016c6:	66 c7 45 f4 40 00    	movw   $0x40,-0xc(%ebp)
c01016cc:	c6 45 f0 9c          	movb   $0x9c,-0x10(%ebp)
c01016d0:	0f b6 45 f0          	movzbl -0x10(%ebp),%eax
c01016d4:	0f b7 55 f4          	movzwl -0xc(%ebp),%edx
c01016d8:	ee                   	out    %al,(%dx)
c01016d9:	66 c7 45 f2 40 00    	movw   $0x40,-0xe(%ebp)
c01016df:	c6 45 f1 2e          	movb   $0x2e,-0xf(%ebp)
c01016e3:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c01016e7:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01016eb:	ee                   	out    %al,(%dx)
    outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
    outb(IO_TIMER1, TIMER_DIV(100) % 256);
    outb(IO_TIMER1, TIMER_DIV(100) / 256);

    // initialize time counter 'ticks' to zero
    ticks = 0;
c01016ec:	c7 05 78 30 1b c0 00 	movl   $0x0,0xc01b3078
c01016f3:	00 00 00 

    cprintf("++ setup timer interrupts\n");
c01016f6:	83 ec 0c             	sub    $0xc,%esp
c01016f9:	68 da bd 10 c0       	push   $0xc010bdda
c01016fe:	e8 94 eb ff ff       	call   c0100297 <cprintf>
c0101703:	83 c4 10             	add    $0x10,%esp
    pic_enable(IRQ_TIMER);
c0101706:	83 ec 0c             	sub    $0xc,%esp
c0101709:	6a 00                	push   $0x0
c010170b:	e8 3b 09 00 00       	call   c010204b <pic_enable>
c0101710:	83 c4 10             	add    $0x10,%esp
}
c0101713:	90                   	nop
c0101714:	c9                   	leave  
c0101715:	c3                   	ret    

c0101716 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0101716:	55                   	push   %ebp
c0101717:	89 e5                	mov    %esp,%ebp
c0101719:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010171c:	9c                   	pushf  
c010171d:	58                   	pop    %eax
c010171e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0101721:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0101724:	25 00 02 00 00       	and    $0x200,%eax
c0101729:	85 c0                	test   %eax,%eax
c010172b:	74 0c                	je     c0101739 <__intr_save+0x23>
        intr_disable();
c010172d:	e8 8a 0a 00 00       	call   c01021bc <intr_disable>
        return 1;
c0101732:	b8 01 00 00 00       	mov    $0x1,%eax
c0101737:	eb 05                	jmp    c010173e <__intr_save+0x28>
    }
    return 0;
c0101739:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010173e:	c9                   	leave  
c010173f:	c3                   	ret    

c0101740 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0101740:	55                   	push   %ebp
c0101741:	89 e5                	mov    %esp,%ebp
c0101743:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0101746:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010174a:	74 05                	je     c0101751 <__intr_restore+0x11>
        intr_enable();
c010174c:	e8 64 0a 00 00       	call   c01021b5 <intr_enable>
    }
}
c0101751:	90                   	nop
c0101752:	c9                   	leave  
c0101753:	c3                   	ret    

c0101754 <delay>:
#include <memlayout.h>
#include <sync.h>

/* stupid I/O delay routine necessitated by historical PC design flaws */
static void
delay(void) {
c0101754:	55                   	push   %ebp
c0101755:	89 e5                	mov    %esp,%ebp
c0101757:	83 ec 10             	sub    $0x10,%esp
c010175a:	66 c7 45 fe 84 00    	movw   $0x84,-0x2(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101760:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c0101764:	89 c2                	mov    %eax,%edx
c0101766:	ec                   	in     (%dx),%al
c0101767:	88 45 f4             	mov    %al,-0xc(%ebp)
c010176a:	66 c7 45 fc 84 00    	movw   $0x84,-0x4(%ebp)
c0101770:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101774:	89 c2                	mov    %eax,%edx
c0101776:	ec                   	in     (%dx),%al
c0101777:	88 45 f5             	mov    %al,-0xb(%ebp)
c010177a:	66 c7 45 fa 84 00    	movw   $0x84,-0x6(%ebp)
c0101780:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0101784:	89 c2                	mov    %eax,%edx
c0101786:	ec                   	in     (%dx),%al
c0101787:	88 45 f6             	mov    %al,-0xa(%ebp)
c010178a:	66 c7 45 f8 84 00    	movw   $0x84,-0x8(%ebp)
c0101790:	0f b7 45 f8          	movzwl -0x8(%ebp),%eax
c0101794:	89 c2                	mov    %eax,%edx
c0101796:	ec                   	in     (%dx),%al
c0101797:	88 45 f7             	mov    %al,-0x9(%ebp)
    inb(0x84);
    inb(0x84);
    inb(0x84);
    inb(0x84);
}
c010179a:	90                   	nop
c010179b:	c9                   	leave  
c010179c:	c3                   	ret    

c010179d <cga_init>:
static uint16_t addr_6845;

/* TEXT-mode CGA/VGA display output */

static void
cga_init(void) {
c010179d:	55                   	push   %ebp
c010179e:	89 e5                	mov    %esp,%ebp
c01017a0:	83 ec 20             	sub    $0x20,%esp
    volatile uint16_t *cp = (uint16_t *)(CGA_BUF + KERNBASE);
c01017a3:	c7 45 fc 00 80 0b c0 	movl   $0xc00b8000,-0x4(%ebp)
    uint16_t was = *cp;
c01017aa:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01017ad:	0f b7 00             	movzwl (%eax),%eax
c01017b0:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    *cp = (uint16_t) 0xA55A;
c01017b4:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01017b7:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
    if (*cp != 0xA55A) {
c01017bc:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01017bf:	0f b7 00             	movzwl (%eax),%eax
c01017c2:	66 3d 5a a5          	cmp    $0xa55a,%ax
c01017c6:	74 12                	je     c01017da <cga_init+0x3d>
        cp = (uint16_t*)(MONO_BUF + KERNBASE);
c01017c8:	c7 45 fc 00 00 0b c0 	movl   $0xc00b0000,-0x4(%ebp)
        addr_6845 = MONO_BASE;
c01017cf:	66 c7 05 26 05 1b c0 	movw   $0x3b4,0xc01b0526
c01017d6:	b4 03 
c01017d8:	eb 13                	jmp    c01017ed <cga_init+0x50>
    } else {
        *cp = was;
c01017da:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01017dd:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c01017e1:	66 89 10             	mov    %dx,(%eax)
        addr_6845 = CGA_BASE;
c01017e4:	66 c7 05 26 05 1b c0 	movw   $0x3d4,0xc01b0526
c01017eb:	d4 03 
    }

    // Extract cursor location
    uint32_t pos;
    outb(addr_6845, 14);
c01017ed:	0f b7 05 26 05 1b c0 	movzwl 0xc01b0526,%eax
c01017f4:	0f b7 c0             	movzwl %ax,%eax
c01017f7:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
c01017fb:	c6 45 ea 0e          	movb   $0xe,-0x16(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01017ff:	0f b6 45 ea          	movzbl -0x16(%ebp),%eax
c0101803:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
c0101807:	ee                   	out    %al,(%dx)
    pos = inb(addr_6845 + 1) << 8;
c0101808:	0f b7 05 26 05 1b c0 	movzwl 0xc01b0526,%eax
c010180f:	83 c0 01             	add    $0x1,%eax
c0101812:	0f b7 c0             	movzwl %ax,%eax
c0101815:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101819:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c010181d:	89 c2                	mov    %eax,%edx
c010181f:	ec                   	in     (%dx),%al
c0101820:	88 45 eb             	mov    %al,-0x15(%ebp)
    return data;
c0101823:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
c0101827:	0f b6 c0             	movzbl %al,%eax
c010182a:	c1 e0 08             	shl    $0x8,%eax
c010182d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    outb(addr_6845, 15);
c0101830:	0f b7 05 26 05 1b c0 	movzwl 0xc01b0526,%eax
c0101837:	0f b7 c0             	movzwl %ax,%eax
c010183a:	66 89 45 f0          	mov    %ax,-0x10(%ebp)
c010183e:	c6 45 ec 0f          	movb   $0xf,-0x14(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101842:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
c0101846:	0f b7 55 f0          	movzwl -0x10(%ebp),%edx
c010184a:	ee                   	out    %al,(%dx)
    pos |= inb(addr_6845 + 1);
c010184b:	0f b7 05 26 05 1b c0 	movzwl 0xc01b0526,%eax
c0101852:	83 c0 01             	add    $0x1,%eax
c0101855:	0f b7 c0             	movzwl %ax,%eax
c0101858:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c010185c:	0f b7 45 ee          	movzwl -0x12(%ebp),%eax
c0101860:	89 c2                	mov    %eax,%edx
c0101862:	ec                   	in     (%dx),%al
c0101863:	88 45 ed             	mov    %al,-0x13(%ebp)
    return data;
c0101866:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c010186a:	0f b6 c0             	movzbl %al,%eax
c010186d:	09 45 f4             	or     %eax,-0xc(%ebp)

    crt_buf = (uint16_t*) cp;
c0101870:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0101873:	a3 20 05 1b c0       	mov    %eax,0xc01b0520
    crt_pos = pos;
c0101878:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010187b:	66 a3 24 05 1b c0    	mov    %ax,0xc01b0524
}
c0101881:	90                   	nop
c0101882:	c9                   	leave  
c0101883:	c3                   	ret    

c0101884 <serial_init>:

static bool serial_exists = 0;

static void
serial_init(void) {
c0101884:	55                   	push   %ebp
c0101885:	89 e5                	mov    %esp,%ebp
c0101887:	83 ec 28             	sub    $0x28,%esp
c010188a:	66 c7 45 f6 fa 03    	movw   $0x3fa,-0xa(%ebp)
c0101890:	c6 45 da 00          	movb   $0x0,-0x26(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101894:	0f b6 45 da          	movzbl -0x26(%ebp),%eax
c0101898:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c010189c:	ee                   	out    %al,(%dx)
c010189d:	66 c7 45 f4 fb 03    	movw   $0x3fb,-0xc(%ebp)
c01018a3:	c6 45 db 80          	movb   $0x80,-0x25(%ebp)
c01018a7:	0f b6 45 db          	movzbl -0x25(%ebp),%eax
c01018ab:	0f b7 55 f4          	movzwl -0xc(%ebp),%edx
c01018af:	ee                   	out    %al,(%dx)
c01018b0:	66 c7 45 f2 f8 03    	movw   $0x3f8,-0xe(%ebp)
c01018b6:	c6 45 dc 0c          	movb   $0xc,-0x24(%ebp)
c01018ba:	0f b6 45 dc          	movzbl -0x24(%ebp),%eax
c01018be:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01018c2:	ee                   	out    %al,(%dx)
c01018c3:	66 c7 45 f0 f9 03    	movw   $0x3f9,-0x10(%ebp)
c01018c9:	c6 45 dd 00          	movb   $0x0,-0x23(%ebp)
c01018cd:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c01018d1:	0f b7 55 f0          	movzwl -0x10(%ebp),%edx
c01018d5:	ee                   	out    %al,(%dx)
c01018d6:	66 c7 45 ee fb 03    	movw   $0x3fb,-0x12(%ebp)
c01018dc:	c6 45 de 03          	movb   $0x3,-0x22(%ebp)
c01018e0:	0f b6 45 de          	movzbl -0x22(%ebp),%eax
c01018e4:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c01018e8:	ee                   	out    %al,(%dx)
c01018e9:	66 c7 45 ec fc 03    	movw   $0x3fc,-0x14(%ebp)
c01018ef:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
c01018f3:	0f b6 45 df          	movzbl -0x21(%ebp),%eax
c01018f7:	0f b7 55 ec          	movzwl -0x14(%ebp),%edx
c01018fb:	ee                   	out    %al,(%dx)
c01018fc:	66 c7 45 ea f9 03    	movw   $0x3f9,-0x16(%ebp)
c0101902:	c6 45 e0 01          	movb   $0x1,-0x20(%ebp)
c0101906:	0f b6 45 e0          	movzbl -0x20(%ebp),%eax
c010190a:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c010190e:	ee                   	out    %al,(%dx)
c010190f:	66 c7 45 e8 fd 03    	movw   $0x3fd,-0x18(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101915:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
c0101919:	89 c2                	mov    %eax,%edx
c010191b:	ec                   	in     (%dx),%al
c010191c:	88 45 e1             	mov    %al,-0x1f(%ebp)
    return data;
c010191f:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
    // Enable rcv interrupts
    outb(COM1 + COM_IER, COM_IER_RDI);

    // Clear any preexisting overrun indications and interrupts
    // Serial port doesn't exist if COM_LSR returns 0xFF
    serial_exists = (inb(COM1 + COM_LSR) != 0xFF);
c0101923:	3c ff                	cmp    $0xff,%al
c0101925:	0f 95 c0             	setne  %al
c0101928:	0f b6 c0             	movzbl %al,%eax
c010192b:	a3 28 05 1b c0       	mov    %eax,0xc01b0528
c0101930:	66 c7 45 e6 fa 03    	movw   $0x3fa,-0x1a(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101936:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c010193a:	89 c2                	mov    %eax,%edx
c010193c:	ec                   	in     (%dx),%al
c010193d:	88 45 e2             	mov    %al,-0x1e(%ebp)
c0101940:	66 c7 45 e4 f8 03    	movw   $0x3f8,-0x1c(%ebp)
c0101946:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
c010194a:	89 c2                	mov    %eax,%edx
c010194c:	ec                   	in     (%dx),%al
c010194d:	88 45 e3             	mov    %al,-0x1d(%ebp)
    (void) inb(COM1+COM_IIR);
    (void) inb(COM1+COM_RX);

    if (serial_exists) {
c0101950:	a1 28 05 1b c0       	mov    0xc01b0528,%eax
c0101955:	85 c0                	test   %eax,%eax
c0101957:	74 0d                	je     c0101966 <serial_init+0xe2>
        pic_enable(IRQ_COM1);
c0101959:	83 ec 0c             	sub    $0xc,%esp
c010195c:	6a 04                	push   $0x4
c010195e:	e8 e8 06 00 00       	call   c010204b <pic_enable>
c0101963:	83 c4 10             	add    $0x10,%esp
    }
}
c0101966:	90                   	nop
c0101967:	c9                   	leave  
c0101968:	c3                   	ret    

c0101969 <lpt_putc_sub>:

static void
lpt_putc_sub(int c) {
c0101969:	55                   	push   %ebp
c010196a:	89 e5                	mov    %esp,%ebp
c010196c:	83 ec 10             	sub    $0x10,%esp
    int i;
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c010196f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0101976:	eb 09                	jmp    c0101981 <lpt_putc_sub+0x18>
        delay();
c0101978:	e8 d7 fd ff ff       	call   c0101754 <delay>
}

static void
lpt_putc_sub(int c) {
    int i;
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c010197d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0101981:	66 c7 45 f4 79 03    	movw   $0x379,-0xc(%ebp)
c0101987:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c010198b:	89 c2                	mov    %eax,%edx
c010198d:	ec                   	in     (%dx),%al
c010198e:	88 45 f3             	mov    %al,-0xd(%ebp)
    return data;
c0101991:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101995:	84 c0                	test   %al,%al
c0101997:	78 09                	js     c01019a2 <lpt_putc_sub+0x39>
c0101999:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
c01019a0:	7e d6                	jle    c0101978 <lpt_putc_sub+0xf>
        delay();
    }
    outb(LPTPORT + 0, c);
c01019a2:	8b 45 08             	mov    0x8(%ebp),%eax
c01019a5:	0f b6 c0             	movzbl %al,%eax
c01019a8:	66 c7 45 f8 78 03    	movw   $0x378,-0x8(%ebp)
c01019ae:	88 45 f0             	mov    %al,-0x10(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01019b1:	0f b6 45 f0          	movzbl -0x10(%ebp),%eax
c01019b5:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
c01019b9:	ee                   	out    %al,(%dx)
c01019ba:	66 c7 45 f6 7a 03    	movw   $0x37a,-0xa(%ebp)
c01019c0:	c6 45 f1 0d          	movb   $0xd,-0xf(%ebp)
c01019c4:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c01019c8:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c01019cc:	ee                   	out    %al,(%dx)
c01019cd:	66 c7 45 fa 7a 03    	movw   $0x37a,-0x6(%ebp)
c01019d3:	c6 45 f2 08          	movb   $0x8,-0xe(%ebp)
c01019d7:	0f b6 45 f2          	movzbl -0xe(%ebp),%eax
c01019db:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c01019df:	ee                   	out    %al,(%dx)
    outb(LPTPORT + 2, 0x08 | 0x04 | 0x01);
    outb(LPTPORT + 2, 0x08);
}
c01019e0:	90                   	nop
c01019e1:	c9                   	leave  
c01019e2:	c3                   	ret    

c01019e3 <lpt_putc>:

/* lpt_putc - copy console output to parallel port */
static void
lpt_putc(int c) {
c01019e3:	55                   	push   %ebp
c01019e4:	89 e5                	mov    %esp,%ebp
    if (c != '\b') {
c01019e6:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c01019ea:	74 0d                	je     c01019f9 <lpt_putc+0x16>
        lpt_putc_sub(c);
c01019ec:	ff 75 08             	pushl  0x8(%ebp)
c01019ef:	e8 75 ff ff ff       	call   c0101969 <lpt_putc_sub>
c01019f4:	83 c4 04             	add    $0x4,%esp
    else {
        lpt_putc_sub('\b');
        lpt_putc_sub(' ');
        lpt_putc_sub('\b');
    }
}
c01019f7:	eb 1e                	jmp    c0101a17 <lpt_putc+0x34>
lpt_putc(int c) {
    if (c != '\b') {
        lpt_putc_sub(c);
    }
    else {
        lpt_putc_sub('\b');
c01019f9:	6a 08                	push   $0x8
c01019fb:	e8 69 ff ff ff       	call   c0101969 <lpt_putc_sub>
c0101a00:	83 c4 04             	add    $0x4,%esp
        lpt_putc_sub(' ');
c0101a03:	6a 20                	push   $0x20
c0101a05:	e8 5f ff ff ff       	call   c0101969 <lpt_putc_sub>
c0101a0a:	83 c4 04             	add    $0x4,%esp
        lpt_putc_sub('\b');
c0101a0d:	6a 08                	push   $0x8
c0101a0f:	e8 55 ff ff ff       	call   c0101969 <lpt_putc_sub>
c0101a14:	83 c4 04             	add    $0x4,%esp
    }
}
c0101a17:	90                   	nop
c0101a18:	c9                   	leave  
c0101a19:	c3                   	ret    

c0101a1a <cga_putc>:

/* cga_putc - print character to console */
static void
cga_putc(int c) {
c0101a1a:	55                   	push   %ebp
c0101a1b:	89 e5                	mov    %esp,%ebp
c0101a1d:	53                   	push   %ebx
c0101a1e:	83 ec 14             	sub    $0x14,%esp
    // set black on white
    if (!(c & ~0xFF)) {
c0101a21:	8b 45 08             	mov    0x8(%ebp),%eax
c0101a24:	b0 00                	mov    $0x0,%al
c0101a26:	85 c0                	test   %eax,%eax
c0101a28:	75 07                	jne    c0101a31 <cga_putc+0x17>
        c |= 0x0700;
c0101a2a:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)
    }

    switch (c & 0xff) {
c0101a31:	8b 45 08             	mov    0x8(%ebp),%eax
c0101a34:	0f b6 c0             	movzbl %al,%eax
c0101a37:	83 f8 0a             	cmp    $0xa,%eax
c0101a3a:	74 4e                	je     c0101a8a <cga_putc+0x70>
c0101a3c:	83 f8 0d             	cmp    $0xd,%eax
c0101a3f:	74 59                	je     c0101a9a <cga_putc+0x80>
c0101a41:	83 f8 08             	cmp    $0x8,%eax
c0101a44:	0f 85 8a 00 00 00    	jne    c0101ad4 <cga_putc+0xba>
    case '\b':
        if (crt_pos > 0) {
c0101a4a:	0f b7 05 24 05 1b c0 	movzwl 0xc01b0524,%eax
c0101a51:	66 85 c0             	test   %ax,%ax
c0101a54:	0f 84 a0 00 00 00    	je     c0101afa <cga_putc+0xe0>
            crt_pos --;
c0101a5a:	0f b7 05 24 05 1b c0 	movzwl 0xc01b0524,%eax
c0101a61:	83 e8 01             	sub    $0x1,%eax
c0101a64:	66 a3 24 05 1b c0    	mov    %ax,0xc01b0524
            crt_buf[crt_pos] = (c & ~0xff) | ' ';
c0101a6a:	a1 20 05 1b c0       	mov    0xc01b0520,%eax
c0101a6f:	0f b7 15 24 05 1b c0 	movzwl 0xc01b0524,%edx
c0101a76:	0f b7 d2             	movzwl %dx,%edx
c0101a79:	01 d2                	add    %edx,%edx
c0101a7b:	01 d0                	add    %edx,%eax
c0101a7d:	8b 55 08             	mov    0x8(%ebp),%edx
c0101a80:	b2 00                	mov    $0x0,%dl
c0101a82:	83 ca 20             	or     $0x20,%edx
c0101a85:	66 89 10             	mov    %dx,(%eax)
        }
        break;
c0101a88:	eb 70                	jmp    c0101afa <cga_putc+0xe0>
    case '\n':
        crt_pos += CRT_COLS;
c0101a8a:	0f b7 05 24 05 1b c0 	movzwl 0xc01b0524,%eax
c0101a91:	83 c0 50             	add    $0x50,%eax
c0101a94:	66 a3 24 05 1b c0    	mov    %ax,0xc01b0524
    case '\r':
        crt_pos -= (crt_pos % CRT_COLS);
c0101a9a:	0f b7 1d 24 05 1b c0 	movzwl 0xc01b0524,%ebx
c0101aa1:	0f b7 0d 24 05 1b c0 	movzwl 0xc01b0524,%ecx
c0101aa8:	0f b7 c1             	movzwl %cx,%eax
c0101aab:	69 c0 cd cc 00 00    	imul   $0xcccd,%eax,%eax
c0101ab1:	c1 e8 10             	shr    $0x10,%eax
c0101ab4:	89 c2                	mov    %eax,%edx
c0101ab6:	66 c1 ea 06          	shr    $0x6,%dx
c0101aba:	89 d0                	mov    %edx,%eax
c0101abc:	c1 e0 02             	shl    $0x2,%eax
c0101abf:	01 d0                	add    %edx,%eax
c0101ac1:	c1 e0 04             	shl    $0x4,%eax
c0101ac4:	29 c1                	sub    %eax,%ecx
c0101ac6:	89 ca                	mov    %ecx,%edx
c0101ac8:	89 d8                	mov    %ebx,%eax
c0101aca:	29 d0                	sub    %edx,%eax
c0101acc:	66 a3 24 05 1b c0    	mov    %ax,0xc01b0524
        break;
c0101ad2:	eb 27                	jmp    c0101afb <cga_putc+0xe1>
    default:
        crt_buf[crt_pos ++] = c;     // write the character
c0101ad4:	8b 0d 20 05 1b c0    	mov    0xc01b0520,%ecx
c0101ada:	0f b7 05 24 05 1b c0 	movzwl 0xc01b0524,%eax
c0101ae1:	8d 50 01             	lea    0x1(%eax),%edx
c0101ae4:	66 89 15 24 05 1b c0 	mov    %dx,0xc01b0524
c0101aeb:	0f b7 c0             	movzwl %ax,%eax
c0101aee:	01 c0                	add    %eax,%eax
c0101af0:	01 c8                	add    %ecx,%eax
c0101af2:	8b 55 08             	mov    0x8(%ebp),%edx
c0101af5:	66 89 10             	mov    %dx,(%eax)
        break;
c0101af8:	eb 01                	jmp    c0101afb <cga_putc+0xe1>
    case '\b':
        if (crt_pos > 0) {
            crt_pos --;
            crt_buf[crt_pos] = (c & ~0xff) | ' ';
        }
        break;
c0101afa:	90                   	nop
        crt_buf[crt_pos ++] = c;     // write the character
        break;
    }

    // What is the purpose of this?
    if (crt_pos >= CRT_SIZE) {
c0101afb:	0f b7 05 24 05 1b c0 	movzwl 0xc01b0524,%eax
c0101b02:	66 3d cf 07          	cmp    $0x7cf,%ax
c0101b06:	76 59                	jbe    c0101b61 <cga_putc+0x147>
        int i;
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
c0101b08:	a1 20 05 1b c0       	mov    0xc01b0520,%eax
c0101b0d:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
c0101b13:	a1 20 05 1b c0       	mov    0xc01b0520,%eax
c0101b18:	83 ec 04             	sub    $0x4,%esp
c0101b1b:	68 00 0f 00 00       	push   $0xf00
c0101b20:	52                   	push   %edx
c0101b21:	50                   	push   %eax
c0101b22:	e8 37 96 00 00       	call   c010b15e <memmove>
c0101b27:	83 c4 10             	add    $0x10,%esp
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c0101b2a:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
c0101b31:	eb 15                	jmp    c0101b48 <cga_putc+0x12e>
            crt_buf[i] = 0x0700 | ' ';
c0101b33:	a1 20 05 1b c0       	mov    0xc01b0520,%eax
c0101b38:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0101b3b:	01 d2                	add    %edx,%edx
c0101b3d:	01 d0                	add    %edx,%eax
c0101b3f:	66 c7 00 20 07       	movw   $0x720,(%eax)

    // What is the purpose of this?
    if (crt_pos >= CRT_SIZE) {
        int i;
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c0101b44:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0101b48:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
c0101b4f:	7e e2                	jle    c0101b33 <cga_putc+0x119>
            crt_buf[i] = 0x0700 | ' ';
        }
        crt_pos -= CRT_COLS;
c0101b51:	0f b7 05 24 05 1b c0 	movzwl 0xc01b0524,%eax
c0101b58:	83 e8 50             	sub    $0x50,%eax
c0101b5b:	66 a3 24 05 1b c0    	mov    %ax,0xc01b0524
    }

    // move that little blinky thing
    outb(addr_6845, 14);
c0101b61:	0f b7 05 26 05 1b c0 	movzwl 0xc01b0526,%eax
c0101b68:	0f b7 c0             	movzwl %ax,%eax
c0101b6b:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0101b6f:	c6 45 e8 0e          	movb   $0xe,-0x18(%ebp)
c0101b73:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
c0101b77:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101b7b:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos >> 8);
c0101b7c:	0f b7 05 24 05 1b c0 	movzwl 0xc01b0524,%eax
c0101b83:	66 c1 e8 08          	shr    $0x8,%ax
c0101b87:	0f b6 c0             	movzbl %al,%eax
c0101b8a:	0f b7 15 26 05 1b c0 	movzwl 0xc01b0526,%edx
c0101b91:	83 c2 01             	add    $0x1,%edx
c0101b94:	0f b7 d2             	movzwl %dx,%edx
c0101b97:	66 89 55 f0          	mov    %dx,-0x10(%ebp)
c0101b9b:	88 45 e9             	mov    %al,-0x17(%ebp)
c0101b9e:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101ba2:	0f b7 55 f0          	movzwl -0x10(%ebp),%edx
c0101ba6:	ee                   	out    %al,(%dx)
    outb(addr_6845, 15);
c0101ba7:	0f b7 05 26 05 1b c0 	movzwl 0xc01b0526,%eax
c0101bae:	0f b7 c0             	movzwl %ax,%eax
c0101bb1:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
c0101bb5:	c6 45 ea 0f          	movb   $0xf,-0x16(%ebp)
c0101bb9:	0f b6 45 ea          	movzbl -0x16(%ebp),%eax
c0101bbd:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101bc1:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos);
c0101bc2:	0f b7 05 24 05 1b c0 	movzwl 0xc01b0524,%eax
c0101bc9:	0f b6 c0             	movzbl %al,%eax
c0101bcc:	0f b7 15 26 05 1b c0 	movzwl 0xc01b0526,%edx
c0101bd3:	83 c2 01             	add    $0x1,%edx
c0101bd6:	0f b7 d2             	movzwl %dx,%edx
c0101bd9:	66 89 55 ec          	mov    %dx,-0x14(%ebp)
c0101bdd:	88 45 eb             	mov    %al,-0x15(%ebp)
c0101be0:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
c0101be4:	0f b7 55 ec          	movzwl -0x14(%ebp),%edx
c0101be8:	ee                   	out    %al,(%dx)
}
c0101be9:	90                   	nop
c0101bea:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0101bed:	c9                   	leave  
c0101bee:	c3                   	ret    

c0101bef <serial_putc_sub>:

static void
serial_putc_sub(int c) {
c0101bef:	55                   	push   %ebp
c0101bf0:	89 e5                	mov    %esp,%ebp
c0101bf2:	83 ec 10             	sub    $0x10,%esp
    int i;
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c0101bf5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0101bfc:	eb 09                	jmp    c0101c07 <serial_putc_sub+0x18>
        delay();
c0101bfe:	e8 51 fb ff ff       	call   c0101754 <delay>
}

static void
serial_putc_sub(int c) {
    int i;
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c0101c03:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0101c07:	66 c7 45 f8 fd 03    	movw   $0x3fd,-0x8(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101c0d:	0f b7 45 f8          	movzwl -0x8(%ebp),%eax
c0101c11:	89 c2                	mov    %eax,%edx
c0101c13:	ec                   	in     (%dx),%al
c0101c14:	88 45 f7             	mov    %al,-0x9(%ebp)
    return data;
c0101c17:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0101c1b:	0f b6 c0             	movzbl %al,%eax
c0101c1e:	83 e0 20             	and    $0x20,%eax
c0101c21:	85 c0                	test   %eax,%eax
c0101c23:	75 09                	jne    c0101c2e <serial_putc_sub+0x3f>
c0101c25:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
c0101c2c:	7e d0                	jle    c0101bfe <serial_putc_sub+0xf>
        delay();
    }
    outb(COM1 + COM_TX, c);
c0101c2e:	8b 45 08             	mov    0x8(%ebp),%eax
c0101c31:	0f b6 c0             	movzbl %al,%eax
c0101c34:	66 c7 45 fa f8 03    	movw   $0x3f8,-0x6(%ebp)
c0101c3a:	88 45 f6             	mov    %al,-0xa(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101c3d:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
c0101c41:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c0101c45:	ee                   	out    %al,(%dx)
}
c0101c46:	90                   	nop
c0101c47:	c9                   	leave  
c0101c48:	c3                   	ret    

c0101c49 <serial_putc>:

/* serial_putc - print character to serial port */
static void
serial_putc(int c) {
c0101c49:	55                   	push   %ebp
c0101c4a:	89 e5                	mov    %esp,%ebp
    if (c != '\b') {
c0101c4c:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c0101c50:	74 0d                	je     c0101c5f <serial_putc+0x16>
        serial_putc_sub(c);
c0101c52:	ff 75 08             	pushl  0x8(%ebp)
c0101c55:	e8 95 ff ff ff       	call   c0101bef <serial_putc_sub>
c0101c5a:	83 c4 04             	add    $0x4,%esp
    else {
        serial_putc_sub('\b');
        serial_putc_sub(' ');
        serial_putc_sub('\b');
    }
}
c0101c5d:	eb 1e                	jmp    c0101c7d <serial_putc+0x34>
serial_putc(int c) {
    if (c != '\b') {
        serial_putc_sub(c);
    }
    else {
        serial_putc_sub('\b');
c0101c5f:	6a 08                	push   $0x8
c0101c61:	e8 89 ff ff ff       	call   c0101bef <serial_putc_sub>
c0101c66:	83 c4 04             	add    $0x4,%esp
        serial_putc_sub(' ');
c0101c69:	6a 20                	push   $0x20
c0101c6b:	e8 7f ff ff ff       	call   c0101bef <serial_putc_sub>
c0101c70:	83 c4 04             	add    $0x4,%esp
        serial_putc_sub('\b');
c0101c73:	6a 08                	push   $0x8
c0101c75:	e8 75 ff ff ff       	call   c0101bef <serial_putc_sub>
c0101c7a:	83 c4 04             	add    $0x4,%esp
    }
}
c0101c7d:	90                   	nop
c0101c7e:	c9                   	leave  
c0101c7f:	c3                   	ret    

c0101c80 <cons_intr>:
/* *
 * cons_intr - called by device interrupt routines to feed input
 * characters into the circular console input buffer.
 * */
static void
cons_intr(int (*proc)(void)) {
c0101c80:	55                   	push   %ebp
c0101c81:	89 e5                	mov    %esp,%ebp
c0101c83:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = (*proc)()) != -1) {
c0101c86:	eb 33                	jmp    c0101cbb <cons_intr+0x3b>
        if (c != 0) {
c0101c88:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0101c8c:	74 2d                	je     c0101cbb <cons_intr+0x3b>
            cons.buf[cons.wpos ++] = c;
c0101c8e:	a1 44 07 1b c0       	mov    0xc01b0744,%eax
c0101c93:	8d 50 01             	lea    0x1(%eax),%edx
c0101c96:	89 15 44 07 1b c0    	mov    %edx,0xc01b0744
c0101c9c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0101c9f:	88 90 40 05 1b c0    	mov    %dl,-0x3fe4fac0(%eax)
            if (cons.wpos == CONSBUFSIZE) {
c0101ca5:	a1 44 07 1b c0       	mov    0xc01b0744,%eax
c0101caa:	3d 00 02 00 00       	cmp    $0x200,%eax
c0101caf:	75 0a                	jne    c0101cbb <cons_intr+0x3b>
                cons.wpos = 0;
c0101cb1:	c7 05 44 07 1b c0 00 	movl   $0x0,0xc01b0744
c0101cb8:	00 00 00 
 * characters into the circular console input buffer.
 * */
static void
cons_intr(int (*proc)(void)) {
    int c;
    while ((c = (*proc)()) != -1) {
c0101cbb:	8b 45 08             	mov    0x8(%ebp),%eax
c0101cbe:	ff d0                	call   *%eax
c0101cc0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0101cc3:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
c0101cc7:	75 bf                	jne    c0101c88 <cons_intr+0x8>
            if (cons.wpos == CONSBUFSIZE) {
                cons.wpos = 0;
            }
        }
    }
}
c0101cc9:	90                   	nop
c0101cca:	c9                   	leave  
c0101ccb:	c3                   	ret    

c0101ccc <serial_proc_data>:

/* serial_proc_data - get data from serial port */
static int
serial_proc_data(void) {
c0101ccc:	55                   	push   %ebp
c0101ccd:	89 e5                	mov    %esp,%ebp
c0101ccf:	83 ec 10             	sub    $0x10,%esp
c0101cd2:	66 c7 45 f8 fd 03    	movw   $0x3fd,-0x8(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101cd8:	0f b7 45 f8          	movzwl -0x8(%ebp),%eax
c0101cdc:	89 c2                	mov    %eax,%edx
c0101cde:	ec                   	in     (%dx),%al
c0101cdf:	88 45 f7             	mov    %al,-0x9(%ebp)
    return data;
c0101ce2:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
    if (!(inb(COM1 + COM_LSR) & COM_LSR_DATA)) {
c0101ce6:	0f b6 c0             	movzbl %al,%eax
c0101ce9:	83 e0 01             	and    $0x1,%eax
c0101cec:	85 c0                	test   %eax,%eax
c0101cee:	75 07                	jne    c0101cf7 <serial_proc_data+0x2b>
        return -1;
c0101cf0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101cf5:	eb 2a                	jmp    c0101d21 <serial_proc_data+0x55>
c0101cf7:	66 c7 45 fa f8 03    	movw   $0x3f8,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101cfd:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0101d01:	89 c2                	mov    %eax,%edx
c0101d03:	ec                   	in     (%dx),%al
c0101d04:	88 45 f6             	mov    %al,-0xa(%ebp)
    return data;
c0101d07:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
    }
    int c = inb(COM1 + COM_RX);
c0101d0b:	0f b6 c0             	movzbl %al,%eax
c0101d0e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (c == 127) {
c0101d11:	83 7d fc 7f          	cmpl   $0x7f,-0x4(%ebp)
c0101d15:	75 07                	jne    c0101d1e <serial_proc_data+0x52>
        c = '\b';
c0101d17:	c7 45 fc 08 00 00 00 	movl   $0x8,-0x4(%ebp)
    }
    return c;
c0101d1e:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0101d21:	c9                   	leave  
c0101d22:	c3                   	ret    

c0101d23 <serial_intr>:

/* serial_intr - try to feed input characters from serial port */
void
serial_intr(void) {
c0101d23:	55                   	push   %ebp
c0101d24:	89 e5                	mov    %esp,%ebp
c0101d26:	83 ec 08             	sub    $0x8,%esp
    if (serial_exists) {
c0101d29:	a1 28 05 1b c0       	mov    0xc01b0528,%eax
c0101d2e:	85 c0                	test   %eax,%eax
c0101d30:	74 10                	je     c0101d42 <serial_intr+0x1f>
        cons_intr(serial_proc_data);
c0101d32:	83 ec 0c             	sub    $0xc,%esp
c0101d35:	68 cc 1c 10 c0       	push   $0xc0101ccc
c0101d3a:	e8 41 ff ff ff       	call   c0101c80 <cons_intr>
c0101d3f:	83 c4 10             	add    $0x10,%esp
    }
}
c0101d42:	90                   	nop
c0101d43:	c9                   	leave  
c0101d44:	c3                   	ret    

c0101d45 <kbd_proc_data>:
 *
 * The kbd_proc_data() function gets data from the keyboard.
 * If we finish a character, return it, else 0. And return -1 if no data.
 * */
static int
kbd_proc_data(void) {
c0101d45:	55                   	push   %ebp
c0101d46:	89 e5                	mov    %esp,%ebp
c0101d48:	83 ec 18             	sub    $0x18,%esp
c0101d4b:	66 c7 45 ec 64 00    	movw   $0x64,-0x14(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101d51:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0101d55:	89 c2                	mov    %eax,%edx
c0101d57:	ec                   	in     (%dx),%al
c0101d58:	88 45 eb             	mov    %al,-0x15(%ebp)
    return data;
c0101d5b:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
    int c;
    uint8_t data;
    static uint32_t shift;

    if ((inb(KBSTATP) & KBS_DIB) == 0) {
c0101d5f:	0f b6 c0             	movzbl %al,%eax
c0101d62:	83 e0 01             	and    $0x1,%eax
c0101d65:	85 c0                	test   %eax,%eax
c0101d67:	75 0a                	jne    c0101d73 <kbd_proc_data+0x2e>
        return -1;
c0101d69:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101d6e:	e9 5d 01 00 00       	jmp    c0101ed0 <kbd_proc_data+0x18b>
c0101d73:	66 c7 45 f0 60 00    	movw   $0x60,-0x10(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101d79:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c0101d7d:	89 c2                	mov    %eax,%edx
c0101d7f:	ec                   	in     (%dx),%al
c0101d80:	88 45 ea             	mov    %al,-0x16(%ebp)
    return data;
c0101d83:	0f b6 45 ea          	movzbl -0x16(%ebp),%eax
    }

    data = inb(KBDATAP);
c0101d87:	88 45 f3             	mov    %al,-0xd(%ebp)

    if (data == 0xE0) {
c0101d8a:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
c0101d8e:	75 17                	jne    c0101da7 <kbd_proc_data+0x62>
        // E0 escape character
        shift |= E0ESC;
c0101d90:	a1 48 07 1b c0       	mov    0xc01b0748,%eax
c0101d95:	83 c8 40             	or     $0x40,%eax
c0101d98:	a3 48 07 1b c0       	mov    %eax,0xc01b0748
        return 0;
c0101d9d:	b8 00 00 00 00       	mov    $0x0,%eax
c0101da2:	e9 29 01 00 00       	jmp    c0101ed0 <kbd_proc_data+0x18b>
    } else if (data & 0x80) {
c0101da7:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101dab:	84 c0                	test   %al,%al
c0101dad:	79 47                	jns    c0101df6 <kbd_proc_data+0xb1>
        // Key released
        data = (shift & E0ESC ? data : data & 0x7F);
c0101daf:	a1 48 07 1b c0       	mov    0xc01b0748,%eax
c0101db4:	83 e0 40             	and    $0x40,%eax
c0101db7:	85 c0                	test   %eax,%eax
c0101db9:	75 09                	jne    c0101dc4 <kbd_proc_data+0x7f>
c0101dbb:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101dbf:	83 e0 7f             	and    $0x7f,%eax
c0101dc2:	eb 04                	jmp    c0101dc8 <kbd_proc_data+0x83>
c0101dc4:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101dc8:	88 45 f3             	mov    %al,-0xd(%ebp)
        shift &= ~(shiftcode[data] | E0ESC);
c0101dcb:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101dcf:	0f b6 80 40 c0 12 c0 	movzbl -0x3fed3fc0(%eax),%eax
c0101dd6:	83 c8 40             	or     $0x40,%eax
c0101dd9:	0f b6 c0             	movzbl %al,%eax
c0101ddc:	f7 d0                	not    %eax
c0101dde:	89 c2                	mov    %eax,%edx
c0101de0:	a1 48 07 1b c0       	mov    0xc01b0748,%eax
c0101de5:	21 d0                	and    %edx,%eax
c0101de7:	a3 48 07 1b c0       	mov    %eax,0xc01b0748
        return 0;
c0101dec:	b8 00 00 00 00       	mov    $0x0,%eax
c0101df1:	e9 da 00 00 00       	jmp    c0101ed0 <kbd_proc_data+0x18b>
    } else if (shift & E0ESC) {
c0101df6:	a1 48 07 1b c0       	mov    0xc01b0748,%eax
c0101dfb:	83 e0 40             	and    $0x40,%eax
c0101dfe:	85 c0                	test   %eax,%eax
c0101e00:	74 11                	je     c0101e13 <kbd_proc_data+0xce>
        // Last character was an E0 escape; or with 0x80
        data |= 0x80;
c0101e02:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
        shift &= ~E0ESC;
c0101e06:	a1 48 07 1b c0       	mov    0xc01b0748,%eax
c0101e0b:	83 e0 bf             	and    $0xffffffbf,%eax
c0101e0e:	a3 48 07 1b c0       	mov    %eax,0xc01b0748
    }

    shift |= shiftcode[data];
c0101e13:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101e17:	0f b6 80 40 c0 12 c0 	movzbl -0x3fed3fc0(%eax),%eax
c0101e1e:	0f b6 d0             	movzbl %al,%edx
c0101e21:	a1 48 07 1b c0       	mov    0xc01b0748,%eax
c0101e26:	09 d0                	or     %edx,%eax
c0101e28:	a3 48 07 1b c0       	mov    %eax,0xc01b0748
    shift ^= togglecode[data];
c0101e2d:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101e31:	0f b6 80 40 c1 12 c0 	movzbl -0x3fed3ec0(%eax),%eax
c0101e38:	0f b6 d0             	movzbl %al,%edx
c0101e3b:	a1 48 07 1b c0       	mov    0xc01b0748,%eax
c0101e40:	31 d0                	xor    %edx,%eax
c0101e42:	a3 48 07 1b c0       	mov    %eax,0xc01b0748

    c = charcode[shift & (CTL | SHIFT)][data];
c0101e47:	a1 48 07 1b c0       	mov    0xc01b0748,%eax
c0101e4c:	83 e0 03             	and    $0x3,%eax
c0101e4f:	8b 14 85 40 c5 12 c0 	mov    -0x3fed3ac0(,%eax,4),%edx
c0101e56:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101e5a:	01 d0                	add    %edx,%eax
c0101e5c:	0f b6 00             	movzbl (%eax),%eax
c0101e5f:	0f b6 c0             	movzbl %al,%eax
c0101e62:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (shift & CAPSLOCK) {
c0101e65:	a1 48 07 1b c0       	mov    0xc01b0748,%eax
c0101e6a:	83 e0 08             	and    $0x8,%eax
c0101e6d:	85 c0                	test   %eax,%eax
c0101e6f:	74 22                	je     c0101e93 <kbd_proc_data+0x14e>
        if ('a' <= c && c <= 'z')
c0101e71:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
c0101e75:	7e 0c                	jle    c0101e83 <kbd_proc_data+0x13e>
c0101e77:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
c0101e7b:	7f 06                	jg     c0101e83 <kbd_proc_data+0x13e>
            c += 'A' - 'a';
c0101e7d:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
c0101e81:	eb 10                	jmp    c0101e93 <kbd_proc_data+0x14e>
        else if ('A' <= c && c <= 'Z')
c0101e83:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
c0101e87:	7e 0a                	jle    c0101e93 <kbd_proc_data+0x14e>
c0101e89:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
c0101e8d:	7f 04                	jg     c0101e93 <kbd_proc_data+0x14e>
            c += 'a' - 'A';
c0101e8f:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
    }

    // Process special keys
    // Ctrl-Alt-Del: reboot
    if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
c0101e93:	a1 48 07 1b c0       	mov    0xc01b0748,%eax
c0101e98:	f7 d0                	not    %eax
c0101e9a:	83 e0 06             	and    $0x6,%eax
c0101e9d:	85 c0                	test   %eax,%eax
c0101e9f:	75 2c                	jne    c0101ecd <kbd_proc_data+0x188>
c0101ea1:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
c0101ea8:	75 23                	jne    c0101ecd <kbd_proc_data+0x188>
        cprintf("Rebooting!\n");
c0101eaa:	83 ec 0c             	sub    $0xc,%esp
c0101ead:	68 f5 bd 10 c0       	push   $0xc010bdf5
c0101eb2:	e8 e0 e3 ff ff       	call   c0100297 <cprintf>
c0101eb7:	83 c4 10             	add    $0x10,%esp
c0101eba:	66 c7 45 ee 92 00    	movw   $0x92,-0x12(%ebp)
c0101ec0:	c6 45 e9 03          	movb   $0x3,-0x17(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101ec4:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101ec8:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101ecc:	ee                   	out    %al,(%dx)
        outb(0x92, 0x3); // courtesy of Chris Frost
    }
    return c;
c0101ecd:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0101ed0:	c9                   	leave  
c0101ed1:	c3                   	ret    

c0101ed2 <kbd_intr>:

/* kbd_intr - try to feed input characters from keyboard */
static void
kbd_intr(void) {
c0101ed2:	55                   	push   %ebp
c0101ed3:	89 e5                	mov    %esp,%ebp
c0101ed5:	83 ec 08             	sub    $0x8,%esp
    cons_intr(kbd_proc_data);
c0101ed8:	83 ec 0c             	sub    $0xc,%esp
c0101edb:	68 45 1d 10 c0       	push   $0xc0101d45
c0101ee0:	e8 9b fd ff ff       	call   c0101c80 <cons_intr>
c0101ee5:	83 c4 10             	add    $0x10,%esp
}
c0101ee8:	90                   	nop
c0101ee9:	c9                   	leave  
c0101eea:	c3                   	ret    

c0101eeb <kbd_init>:

static void
kbd_init(void) {
c0101eeb:	55                   	push   %ebp
c0101eec:	89 e5                	mov    %esp,%ebp
c0101eee:	83 ec 08             	sub    $0x8,%esp
    // drain the kbd buffer
    kbd_intr();
c0101ef1:	e8 dc ff ff ff       	call   c0101ed2 <kbd_intr>
    pic_enable(IRQ_KBD);
c0101ef6:	83 ec 0c             	sub    $0xc,%esp
c0101ef9:	6a 01                	push   $0x1
c0101efb:	e8 4b 01 00 00       	call   c010204b <pic_enable>
c0101f00:	83 c4 10             	add    $0x10,%esp
}
c0101f03:	90                   	nop
c0101f04:	c9                   	leave  
c0101f05:	c3                   	ret    

c0101f06 <cons_init>:

/* cons_init - initializes the console devices */
void
cons_init(void) {
c0101f06:	55                   	push   %ebp
c0101f07:	89 e5                	mov    %esp,%ebp
c0101f09:	83 ec 08             	sub    $0x8,%esp
    cga_init();
c0101f0c:	e8 8c f8 ff ff       	call   c010179d <cga_init>
    serial_init();
c0101f11:	e8 6e f9 ff ff       	call   c0101884 <serial_init>
    kbd_init();
c0101f16:	e8 d0 ff ff ff       	call   c0101eeb <kbd_init>
    if (!serial_exists) {
c0101f1b:	a1 28 05 1b c0       	mov    0xc01b0528,%eax
c0101f20:	85 c0                	test   %eax,%eax
c0101f22:	75 10                	jne    c0101f34 <cons_init+0x2e>
        cprintf("serial port does not exist!!\n");
c0101f24:	83 ec 0c             	sub    $0xc,%esp
c0101f27:	68 01 be 10 c0       	push   $0xc010be01
c0101f2c:	e8 66 e3 ff ff       	call   c0100297 <cprintf>
c0101f31:	83 c4 10             	add    $0x10,%esp
    }
}
c0101f34:	90                   	nop
c0101f35:	c9                   	leave  
c0101f36:	c3                   	ret    

c0101f37 <cons_putc>:

/* cons_putc - print a single character @c to console devices */
void
cons_putc(int c) {
c0101f37:	55                   	push   %ebp
c0101f38:	89 e5                	mov    %esp,%ebp
c0101f3a:	83 ec 18             	sub    $0x18,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c0101f3d:	e8 d4 f7 ff ff       	call   c0101716 <__intr_save>
c0101f42:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        lpt_putc(c);
c0101f45:	83 ec 0c             	sub    $0xc,%esp
c0101f48:	ff 75 08             	pushl  0x8(%ebp)
c0101f4b:	e8 93 fa ff ff       	call   c01019e3 <lpt_putc>
c0101f50:	83 c4 10             	add    $0x10,%esp
        cga_putc(c);
c0101f53:	83 ec 0c             	sub    $0xc,%esp
c0101f56:	ff 75 08             	pushl  0x8(%ebp)
c0101f59:	e8 bc fa ff ff       	call   c0101a1a <cga_putc>
c0101f5e:	83 c4 10             	add    $0x10,%esp
        serial_putc(c);
c0101f61:	83 ec 0c             	sub    $0xc,%esp
c0101f64:	ff 75 08             	pushl  0x8(%ebp)
c0101f67:	e8 dd fc ff ff       	call   c0101c49 <serial_putc>
c0101f6c:	83 c4 10             	add    $0x10,%esp
    }
    local_intr_restore(intr_flag);
c0101f6f:	83 ec 0c             	sub    $0xc,%esp
c0101f72:	ff 75 f4             	pushl  -0xc(%ebp)
c0101f75:	e8 c6 f7 ff ff       	call   c0101740 <__intr_restore>
c0101f7a:	83 c4 10             	add    $0x10,%esp
}
c0101f7d:	90                   	nop
c0101f7e:	c9                   	leave  
c0101f7f:	c3                   	ret    

c0101f80 <cons_getc>:
/* *
 * cons_getc - return the next input character from console,
 * or 0 if none waiting.
 * */
int
cons_getc(void) {
c0101f80:	55                   	push   %ebp
c0101f81:	89 e5                	mov    %esp,%ebp
c0101f83:	83 ec 18             	sub    $0x18,%esp
    int c = 0;
c0101f86:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    local_intr_save(intr_flag);
c0101f8d:	e8 84 f7 ff ff       	call   c0101716 <__intr_save>
c0101f92:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        // poll for any pending input characters,
        // so that this function works even when interrupts are disabled
        // (e.g., when called from the kernel monitor).
        serial_intr();
c0101f95:	e8 89 fd ff ff       	call   c0101d23 <serial_intr>
        kbd_intr();
c0101f9a:	e8 33 ff ff ff       	call   c0101ed2 <kbd_intr>

        // grab the next character from the input buffer.
        if (cons.rpos != cons.wpos) {
c0101f9f:	8b 15 40 07 1b c0    	mov    0xc01b0740,%edx
c0101fa5:	a1 44 07 1b c0       	mov    0xc01b0744,%eax
c0101faa:	39 c2                	cmp    %eax,%edx
c0101fac:	74 31                	je     c0101fdf <cons_getc+0x5f>
            c = cons.buf[cons.rpos ++];
c0101fae:	a1 40 07 1b c0       	mov    0xc01b0740,%eax
c0101fb3:	8d 50 01             	lea    0x1(%eax),%edx
c0101fb6:	89 15 40 07 1b c0    	mov    %edx,0xc01b0740
c0101fbc:	0f b6 80 40 05 1b c0 	movzbl -0x3fe4fac0(%eax),%eax
c0101fc3:	0f b6 c0             	movzbl %al,%eax
c0101fc6:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (cons.rpos == CONSBUFSIZE) {
c0101fc9:	a1 40 07 1b c0       	mov    0xc01b0740,%eax
c0101fce:	3d 00 02 00 00       	cmp    $0x200,%eax
c0101fd3:	75 0a                	jne    c0101fdf <cons_getc+0x5f>
                cons.rpos = 0;
c0101fd5:	c7 05 40 07 1b c0 00 	movl   $0x0,0xc01b0740
c0101fdc:	00 00 00 
            }
        }
    }
    local_intr_restore(intr_flag);
c0101fdf:	83 ec 0c             	sub    $0xc,%esp
c0101fe2:	ff 75 f0             	pushl  -0x10(%ebp)
c0101fe5:	e8 56 f7 ff ff       	call   c0101740 <__intr_restore>
c0101fea:	83 c4 10             	add    $0x10,%esp
    return c;
c0101fed:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0101ff0:	c9                   	leave  
c0101ff1:	c3                   	ret    

c0101ff2 <pic_setmask>:
// Initial IRQ mask has interrupt 2 enabled (for slave 8259A).
static uint16_t irq_mask = 0xFFFF & ~(1 << IRQ_SLAVE);
static bool did_init = 0;

static void
pic_setmask(uint16_t mask) {
c0101ff2:	55                   	push   %ebp
c0101ff3:	89 e5                	mov    %esp,%ebp
c0101ff5:	83 ec 14             	sub    $0x14,%esp
c0101ff8:	8b 45 08             	mov    0x8(%ebp),%eax
c0101ffb:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    irq_mask = mask;
c0101fff:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0102003:	66 a3 50 c5 12 c0    	mov    %ax,0xc012c550
    if (did_init) {
c0102009:	a1 4c 07 1b c0       	mov    0xc01b074c,%eax
c010200e:	85 c0                	test   %eax,%eax
c0102010:	74 36                	je     c0102048 <pic_setmask+0x56>
        outb(IO_PIC1 + 1, mask);
c0102012:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0102016:	0f b6 c0             	movzbl %al,%eax
c0102019:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
c010201f:	88 45 fa             	mov    %al,-0x6(%ebp)
c0102022:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
c0102026:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c010202a:	ee                   	out    %al,(%dx)
        outb(IO_PIC2 + 1, mask >> 8);
c010202b:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c010202f:	66 c1 e8 08          	shr    $0x8,%ax
c0102033:	0f b6 c0             	movzbl %al,%eax
c0102036:	66 c7 45 fc a1 00    	movw   $0xa1,-0x4(%ebp)
c010203c:	88 45 fb             	mov    %al,-0x5(%ebp)
c010203f:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
c0102043:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c0102047:	ee                   	out    %al,(%dx)
    }
}
c0102048:	90                   	nop
c0102049:	c9                   	leave  
c010204a:	c3                   	ret    

c010204b <pic_enable>:

void
pic_enable(unsigned int irq) {
c010204b:	55                   	push   %ebp
c010204c:	89 e5                	mov    %esp,%ebp
    pic_setmask(irq_mask & ~(1 << irq));
c010204e:	8b 45 08             	mov    0x8(%ebp),%eax
c0102051:	ba 01 00 00 00       	mov    $0x1,%edx
c0102056:	89 c1                	mov    %eax,%ecx
c0102058:	d3 e2                	shl    %cl,%edx
c010205a:	89 d0                	mov    %edx,%eax
c010205c:	f7 d0                	not    %eax
c010205e:	89 c2                	mov    %eax,%edx
c0102060:	0f b7 05 50 c5 12 c0 	movzwl 0xc012c550,%eax
c0102067:	21 d0                	and    %edx,%eax
c0102069:	0f b7 c0             	movzwl %ax,%eax
c010206c:	50                   	push   %eax
c010206d:	e8 80 ff ff ff       	call   c0101ff2 <pic_setmask>
c0102072:	83 c4 04             	add    $0x4,%esp
}
c0102075:	90                   	nop
c0102076:	c9                   	leave  
c0102077:	c3                   	ret    

c0102078 <pic_init>:

/* pic_init - initialize the 8259A interrupt controllers */
void
pic_init(void) {
c0102078:	55                   	push   %ebp
c0102079:	89 e5                	mov    %esp,%ebp
c010207b:	83 ec 30             	sub    $0x30,%esp
    did_init = 1;
c010207e:	c7 05 4c 07 1b c0 01 	movl   $0x1,0xc01b074c
c0102085:	00 00 00 
c0102088:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
c010208e:	c6 45 d6 ff          	movb   $0xff,-0x2a(%ebp)
c0102092:	0f b6 45 d6          	movzbl -0x2a(%ebp),%eax
c0102096:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c010209a:	ee                   	out    %al,(%dx)
c010209b:	66 c7 45 fc a1 00    	movw   $0xa1,-0x4(%ebp)
c01020a1:	c6 45 d7 ff          	movb   $0xff,-0x29(%ebp)
c01020a5:	0f b6 45 d7          	movzbl -0x29(%ebp),%eax
c01020a9:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c01020ad:	ee                   	out    %al,(%dx)
c01020ae:	66 c7 45 fa 20 00    	movw   $0x20,-0x6(%ebp)
c01020b4:	c6 45 d8 11          	movb   $0x11,-0x28(%ebp)
c01020b8:	0f b6 45 d8          	movzbl -0x28(%ebp),%eax
c01020bc:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c01020c0:	ee                   	out    %al,(%dx)
c01020c1:	66 c7 45 f8 21 00    	movw   $0x21,-0x8(%ebp)
c01020c7:	c6 45 d9 20          	movb   $0x20,-0x27(%ebp)
c01020cb:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c01020cf:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
c01020d3:	ee                   	out    %al,(%dx)
c01020d4:	66 c7 45 f6 21 00    	movw   $0x21,-0xa(%ebp)
c01020da:	c6 45 da 04          	movb   $0x4,-0x26(%ebp)
c01020de:	0f b6 45 da          	movzbl -0x26(%ebp),%eax
c01020e2:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c01020e6:	ee                   	out    %al,(%dx)
c01020e7:	66 c7 45 f4 21 00    	movw   $0x21,-0xc(%ebp)
c01020ed:	c6 45 db 03          	movb   $0x3,-0x25(%ebp)
c01020f1:	0f b6 45 db          	movzbl -0x25(%ebp),%eax
c01020f5:	0f b7 55 f4          	movzwl -0xc(%ebp),%edx
c01020f9:	ee                   	out    %al,(%dx)
c01020fa:	66 c7 45 f2 a0 00    	movw   $0xa0,-0xe(%ebp)
c0102100:	c6 45 dc 11          	movb   $0x11,-0x24(%ebp)
c0102104:	0f b6 45 dc          	movzbl -0x24(%ebp),%eax
c0102108:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010210c:	ee                   	out    %al,(%dx)
c010210d:	66 c7 45 f0 a1 00    	movw   $0xa1,-0x10(%ebp)
c0102113:	c6 45 dd 28          	movb   $0x28,-0x23(%ebp)
c0102117:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c010211b:	0f b7 55 f0          	movzwl -0x10(%ebp),%edx
c010211f:	ee                   	out    %al,(%dx)
c0102120:	66 c7 45 ee a1 00    	movw   $0xa1,-0x12(%ebp)
c0102126:	c6 45 de 02          	movb   $0x2,-0x22(%ebp)
c010212a:	0f b6 45 de          	movzbl -0x22(%ebp),%eax
c010212e:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0102132:	ee                   	out    %al,(%dx)
c0102133:	66 c7 45 ec a1 00    	movw   $0xa1,-0x14(%ebp)
c0102139:	c6 45 df 03          	movb   $0x3,-0x21(%ebp)
c010213d:	0f b6 45 df          	movzbl -0x21(%ebp),%eax
c0102141:	0f b7 55 ec          	movzwl -0x14(%ebp),%edx
c0102145:	ee                   	out    %al,(%dx)
c0102146:	66 c7 45 ea 20 00    	movw   $0x20,-0x16(%ebp)
c010214c:	c6 45 e0 68          	movb   $0x68,-0x20(%ebp)
c0102150:	0f b6 45 e0          	movzbl -0x20(%ebp),%eax
c0102154:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0102158:	ee                   	out    %al,(%dx)
c0102159:	66 c7 45 e8 20 00    	movw   $0x20,-0x18(%ebp)
c010215f:	c6 45 e1 0a          	movb   $0xa,-0x1f(%ebp)
c0102163:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0102167:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c010216b:	ee                   	out    %al,(%dx)
c010216c:	66 c7 45 e6 a0 00    	movw   $0xa0,-0x1a(%ebp)
c0102172:	c6 45 e2 68          	movb   $0x68,-0x1e(%ebp)
c0102176:	0f b6 45 e2          	movzbl -0x1e(%ebp),%eax
c010217a:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c010217e:	ee                   	out    %al,(%dx)
c010217f:	66 c7 45 e4 a0 00    	movw   $0xa0,-0x1c(%ebp)
c0102185:	c6 45 e3 0a          	movb   $0xa,-0x1d(%ebp)
c0102189:	0f b6 45 e3          	movzbl -0x1d(%ebp),%eax
c010218d:	0f b7 55 e4          	movzwl -0x1c(%ebp),%edx
c0102191:	ee                   	out    %al,(%dx)
    outb(IO_PIC1, 0x0a);    // read IRR by default

    outb(IO_PIC2, 0x68);    // OCW3
    outb(IO_PIC2, 0x0a);    // OCW3

    if (irq_mask != 0xFFFF) {
c0102192:	0f b7 05 50 c5 12 c0 	movzwl 0xc012c550,%eax
c0102199:	66 83 f8 ff          	cmp    $0xffff,%ax
c010219d:	74 13                	je     c01021b2 <pic_init+0x13a>
        pic_setmask(irq_mask);
c010219f:	0f b7 05 50 c5 12 c0 	movzwl 0xc012c550,%eax
c01021a6:	0f b7 c0             	movzwl %ax,%eax
c01021a9:	50                   	push   %eax
c01021aa:	e8 43 fe ff ff       	call   c0101ff2 <pic_setmask>
c01021af:	83 c4 04             	add    $0x4,%esp
    }
}
c01021b2:	90                   	nop
c01021b3:	c9                   	leave  
c01021b4:	c3                   	ret    

c01021b5 <intr_enable>:
#include <x86.h>
#include <intr.h>

/* intr_enable - enable irq interrupt */
void
intr_enable(void) {
c01021b5:	55                   	push   %ebp
c01021b6:	89 e5                	mov    %esp,%ebp
    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
}

static inline void
sti(void) {
    asm volatile ("sti");
c01021b8:	fb                   	sti    
    sti();
}
c01021b9:	90                   	nop
c01021ba:	5d                   	pop    %ebp
c01021bb:	c3                   	ret    

c01021bc <intr_disable>:

/* intr_disable - disable irq interrupt */
void
intr_disable(void) {
c01021bc:	55                   	push   %ebp
c01021bd:	89 e5                	mov    %esp,%ebp
}

static inline void
cli(void) {
    asm volatile ("cli" ::: "memory");
c01021bf:	fa                   	cli    
    cli();
}
c01021c0:	90                   	nop
c01021c1:	5d                   	pop    %ebp
c01021c2:	c3                   	ret    

c01021c3 <print_ticks>:
#include <sync.h>
#include <proc.h>

#define TICK_NUM 100

static void print_ticks() {
c01021c3:	55                   	push   %ebp
c01021c4:	89 e5                	mov    %esp,%ebp
c01021c6:	83 ec 08             	sub    $0x8,%esp
    cprintf("%d ticks\n",TICK_NUM);
c01021c9:	83 ec 08             	sub    $0x8,%esp
c01021cc:	6a 64                	push   $0x64
c01021ce:	68 20 be 10 c0       	push   $0xc010be20
c01021d3:	e8 bf e0 ff ff       	call   c0100297 <cprintf>
c01021d8:	83 c4 10             	add    $0x10,%esp
#ifdef DEBUG_GRADE
    cprintf("End of Test.\n");
c01021db:	83 ec 0c             	sub    $0xc,%esp
c01021de:	68 2a be 10 c0       	push   $0xc010be2a
c01021e3:	e8 af e0 ff ff       	call   c0100297 <cprintf>
c01021e8:	83 c4 10             	add    $0x10,%esp
    panic("EOT: kernel seems ok.");
c01021eb:	83 ec 04             	sub    $0x4,%esp
c01021ee:	68 38 be 10 c0       	push   $0xc010be38
c01021f3:	6a 1a                	push   $0x1a
c01021f5:	68 4e be 10 c0       	push   $0xc010be4e
c01021fa:	e8 fe e1 ff ff       	call   c01003fd <__panic>

c01021ff <idt_init>:
/* temporary trapframe or pointer to trapframe */
struct trapframe switchk2u, *switchu2k;

/* idt_init - initialize IDT to each of the entry points in kern/trap/vectors.S */
void
idt_init(void) {
c01021ff:	55                   	push   %ebp
c0102200:	89 e5                	mov    %esp,%ebp
c0102202:	83 ec 10             	sub    $0x10,%esp
     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
     //so you should setup the syscall interrupt gate in here
    // 1. get vectors
    extern uintptr_t __vectors[];
    // 2. setup entries
    for (int i = 0; i < 256; i++) {
c0102205:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c010220c:	e9 c3 00 00 00       	jmp    c01022d4 <idt_init+0xd5>
        SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);
c0102211:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102214:	8b 04 85 e0 c5 12 c0 	mov    -0x3fed3a20(,%eax,4),%eax
c010221b:	89 c2                	mov    %eax,%edx
c010221d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102220:	66 89 14 c5 60 07 1b 	mov    %dx,-0x3fe4f8a0(,%eax,8)
c0102227:	c0 
c0102228:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010222b:	66 c7 04 c5 62 07 1b 	movw   $0x8,-0x3fe4f89e(,%eax,8)
c0102232:	c0 08 00 
c0102235:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102238:	0f b6 14 c5 64 07 1b 	movzbl -0x3fe4f89c(,%eax,8),%edx
c010223f:	c0 
c0102240:	83 e2 e0             	and    $0xffffffe0,%edx
c0102243:	88 14 c5 64 07 1b c0 	mov    %dl,-0x3fe4f89c(,%eax,8)
c010224a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010224d:	0f b6 14 c5 64 07 1b 	movzbl -0x3fe4f89c(,%eax,8),%edx
c0102254:	c0 
c0102255:	83 e2 1f             	and    $0x1f,%edx
c0102258:	88 14 c5 64 07 1b c0 	mov    %dl,-0x3fe4f89c(,%eax,8)
c010225f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102262:	0f b6 14 c5 65 07 1b 	movzbl -0x3fe4f89b(,%eax,8),%edx
c0102269:	c0 
c010226a:	83 e2 f0             	and    $0xfffffff0,%edx
c010226d:	83 ca 0e             	or     $0xe,%edx
c0102270:	88 14 c5 65 07 1b c0 	mov    %dl,-0x3fe4f89b(,%eax,8)
c0102277:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010227a:	0f b6 14 c5 65 07 1b 	movzbl -0x3fe4f89b(,%eax,8),%edx
c0102281:	c0 
c0102282:	83 e2 ef             	and    $0xffffffef,%edx
c0102285:	88 14 c5 65 07 1b c0 	mov    %dl,-0x3fe4f89b(,%eax,8)
c010228c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010228f:	0f b6 14 c5 65 07 1b 	movzbl -0x3fe4f89b(,%eax,8),%edx
c0102296:	c0 
c0102297:	83 e2 9f             	and    $0xffffff9f,%edx
c010229a:	88 14 c5 65 07 1b c0 	mov    %dl,-0x3fe4f89b(,%eax,8)
c01022a1:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01022a4:	0f b6 14 c5 65 07 1b 	movzbl -0x3fe4f89b(,%eax,8),%edx
c01022ab:	c0 
c01022ac:	83 ca 80             	or     $0xffffff80,%edx
c01022af:	88 14 c5 65 07 1b c0 	mov    %dl,-0x3fe4f89b(,%eax,8)
c01022b6:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01022b9:	8b 04 85 e0 c5 12 c0 	mov    -0x3fed3a20(,%eax,4),%eax
c01022c0:	c1 e8 10             	shr    $0x10,%eax
c01022c3:	89 c2                	mov    %eax,%edx
c01022c5:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01022c8:	66 89 14 c5 66 07 1b 	mov    %dx,-0x3fe4f89a(,%eax,8)
c01022cf:	c0 
     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
     //so you should setup the syscall interrupt gate in here
    // 1. get vectors
    extern uintptr_t __vectors[];
    // 2. setup entries
    for (int i = 0; i < 256; i++) {
c01022d0:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c01022d4:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
c01022db:	0f 8e 30 ff ff ff    	jle    c0102211 <idt_init+0x12>
        SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);
    }
	// set RPL of switch_to_kernel as user 
    SETGATE(idt[T_SWITCH_TOK], 0, GD_KTEXT, __vectors[T_SWITCH_TOK], DPL_USER);
c01022e1:	a1 c4 c7 12 c0       	mov    0xc012c7c4,%eax
c01022e6:	66 a3 28 0b 1b c0    	mov    %ax,0xc01b0b28
c01022ec:	66 c7 05 2a 0b 1b c0 	movw   $0x8,0xc01b0b2a
c01022f3:	08 00 
c01022f5:	0f b6 05 2c 0b 1b c0 	movzbl 0xc01b0b2c,%eax
c01022fc:	83 e0 e0             	and    $0xffffffe0,%eax
c01022ff:	a2 2c 0b 1b c0       	mov    %al,0xc01b0b2c
c0102304:	0f b6 05 2c 0b 1b c0 	movzbl 0xc01b0b2c,%eax
c010230b:	83 e0 1f             	and    $0x1f,%eax
c010230e:	a2 2c 0b 1b c0       	mov    %al,0xc01b0b2c
c0102313:	0f b6 05 2d 0b 1b c0 	movzbl 0xc01b0b2d,%eax
c010231a:	83 e0 f0             	and    $0xfffffff0,%eax
c010231d:	83 c8 0e             	or     $0xe,%eax
c0102320:	a2 2d 0b 1b c0       	mov    %al,0xc01b0b2d
c0102325:	0f b6 05 2d 0b 1b c0 	movzbl 0xc01b0b2d,%eax
c010232c:	83 e0 ef             	and    $0xffffffef,%eax
c010232f:	a2 2d 0b 1b c0       	mov    %al,0xc01b0b2d
c0102334:	0f b6 05 2d 0b 1b c0 	movzbl 0xc01b0b2d,%eax
c010233b:	83 c8 60             	or     $0x60,%eax
c010233e:	a2 2d 0b 1b c0       	mov    %al,0xc01b0b2d
c0102343:	0f b6 05 2d 0b 1b c0 	movzbl 0xc01b0b2d,%eax
c010234a:	83 c8 80             	or     $0xffffff80,%eax
c010234d:	a2 2d 0b 1b c0       	mov    %al,0xc01b0b2d
c0102352:	a1 c4 c7 12 c0       	mov    0xc012c7c4,%eax
c0102357:	c1 e8 10             	shr    $0x10,%eax
c010235a:	66 a3 2e 0b 1b c0    	mov    %ax,0xc01b0b2e
    // set trap gate
    SETGATE(idt[T_SYSCALL], 1, GD_KTEXT, __vectors[T_SYSCALL], DPL_USER);
c0102360:	a1 e0 c7 12 c0       	mov    0xc012c7e0,%eax
c0102365:	66 a3 60 0b 1b c0    	mov    %ax,0xc01b0b60
c010236b:	66 c7 05 62 0b 1b c0 	movw   $0x8,0xc01b0b62
c0102372:	08 00 
c0102374:	0f b6 05 64 0b 1b c0 	movzbl 0xc01b0b64,%eax
c010237b:	83 e0 e0             	and    $0xffffffe0,%eax
c010237e:	a2 64 0b 1b c0       	mov    %al,0xc01b0b64
c0102383:	0f b6 05 64 0b 1b c0 	movzbl 0xc01b0b64,%eax
c010238a:	83 e0 1f             	and    $0x1f,%eax
c010238d:	a2 64 0b 1b c0       	mov    %al,0xc01b0b64
c0102392:	0f b6 05 65 0b 1b c0 	movzbl 0xc01b0b65,%eax
c0102399:	83 c8 0f             	or     $0xf,%eax
c010239c:	a2 65 0b 1b c0       	mov    %al,0xc01b0b65
c01023a1:	0f b6 05 65 0b 1b c0 	movzbl 0xc01b0b65,%eax
c01023a8:	83 e0 ef             	and    $0xffffffef,%eax
c01023ab:	a2 65 0b 1b c0       	mov    %al,0xc01b0b65
c01023b0:	0f b6 05 65 0b 1b c0 	movzbl 0xc01b0b65,%eax
c01023b7:	83 c8 60             	or     $0x60,%eax
c01023ba:	a2 65 0b 1b c0       	mov    %al,0xc01b0b65
c01023bf:	0f b6 05 65 0b 1b c0 	movzbl 0xc01b0b65,%eax
c01023c6:	83 c8 80             	or     $0xffffff80,%eax
c01023c9:	a2 65 0b 1b c0       	mov    %al,0xc01b0b65
c01023ce:	a1 e0 c7 12 c0       	mov    0xc012c7e0,%eax
c01023d3:	c1 e8 10             	shr    $0x10,%eax
c01023d6:	66 a3 66 0b 1b c0    	mov    %ax,0xc01b0b66
c01023dc:	c7 45 f8 60 c5 12 c0 	movl   $0xc012c560,-0x8(%ebp)
    }
}

static inline void
lidt(struct pseudodesc *pd) {
    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
c01023e3:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01023e6:	0f 01 18             	lidtl  (%eax)
    // 3. LIDT
    lidt(&idt_pd);
}
c01023e9:	90                   	nop
c01023ea:	c9                   	leave  
c01023eb:	c3                   	ret    

c01023ec <trapname>:

static const char *
trapname(int trapno) {
c01023ec:	55                   	push   %ebp
c01023ed:	89 e5                	mov    %esp,%ebp
        "Alignment Check",
        "Machine-Check",
        "SIMD Floating-Point Exception"
    };

    if (trapno < sizeof(excnames)/sizeof(const char * const)) {
c01023ef:	8b 45 08             	mov    0x8(%ebp),%eax
c01023f2:	83 f8 13             	cmp    $0x13,%eax
c01023f5:	77 0c                	ja     c0102403 <trapname+0x17>
        return excnames[trapno];
c01023f7:	8b 45 08             	mov    0x8(%ebp),%eax
c01023fa:	8b 04 85 c0 c2 10 c0 	mov    -0x3fef3d40(,%eax,4),%eax
c0102401:	eb 18                	jmp    c010241b <trapname+0x2f>
    }
    if (trapno >= IRQ_OFFSET && trapno < IRQ_OFFSET + 16) {
c0102403:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
c0102407:	7e 0d                	jle    c0102416 <trapname+0x2a>
c0102409:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
c010240d:	7f 07                	jg     c0102416 <trapname+0x2a>
        return "Hardware Interrupt";
c010240f:	b8 5f be 10 c0       	mov    $0xc010be5f,%eax
c0102414:	eb 05                	jmp    c010241b <trapname+0x2f>
    }
    return "(unknown trap)";
c0102416:	b8 72 be 10 c0       	mov    $0xc010be72,%eax
}
c010241b:	5d                   	pop    %ebp
c010241c:	c3                   	ret    

c010241d <trap_in_kernel>:

/* trap_in_kernel - test if trap happened in kernel */
bool
trap_in_kernel(struct trapframe *tf) {
c010241d:	55                   	push   %ebp
c010241e:	89 e5                	mov    %esp,%ebp
    return (tf->tf_cs == (uint16_t)KERNEL_CS);
c0102420:	8b 45 08             	mov    0x8(%ebp),%eax
c0102423:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c0102427:	66 83 f8 08          	cmp    $0x8,%ax
c010242b:	0f 94 c0             	sete   %al
c010242e:	0f b6 c0             	movzbl %al,%eax
}
c0102431:	5d                   	pop    %ebp
c0102432:	c3                   	ret    

c0102433 <print_trapframe>:
    "TF", "IF", "DF", "OF", NULL, NULL, "NT", NULL,
    "RF", "VM", "AC", "VIF", "VIP", "ID", NULL, NULL,
};

void
print_trapframe(struct trapframe *tf) {
c0102433:	55                   	push   %ebp
c0102434:	89 e5                	mov    %esp,%ebp
c0102436:	83 ec 18             	sub    $0x18,%esp
    cprintf("trapframe at %p\n", tf);
c0102439:	83 ec 08             	sub    $0x8,%esp
c010243c:	ff 75 08             	pushl  0x8(%ebp)
c010243f:	68 b3 be 10 c0       	push   $0xc010beb3
c0102444:	e8 4e de ff ff       	call   c0100297 <cprintf>
c0102449:	83 c4 10             	add    $0x10,%esp
    print_regs(&tf->tf_regs);
c010244c:	8b 45 08             	mov    0x8(%ebp),%eax
c010244f:	83 ec 0c             	sub    $0xc,%esp
c0102452:	50                   	push   %eax
c0102453:	e8 b8 01 00 00       	call   c0102610 <print_regs>
c0102458:	83 c4 10             	add    $0x10,%esp
    cprintf("  ds   0x----%04x\n", tf->tf_ds);
c010245b:	8b 45 08             	mov    0x8(%ebp),%eax
c010245e:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c0102462:	0f b7 c0             	movzwl %ax,%eax
c0102465:	83 ec 08             	sub    $0x8,%esp
c0102468:	50                   	push   %eax
c0102469:	68 c4 be 10 c0       	push   $0xc010bec4
c010246e:	e8 24 de ff ff       	call   c0100297 <cprintf>
c0102473:	83 c4 10             	add    $0x10,%esp
    cprintf("  es   0x----%04x\n", tf->tf_es);
c0102476:	8b 45 08             	mov    0x8(%ebp),%eax
c0102479:	0f b7 40 28          	movzwl 0x28(%eax),%eax
c010247d:	0f b7 c0             	movzwl %ax,%eax
c0102480:	83 ec 08             	sub    $0x8,%esp
c0102483:	50                   	push   %eax
c0102484:	68 d7 be 10 c0       	push   $0xc010bed7
c0102489:	e8 09 de ff ff       	call   c0100297 <cprintf>
c010248e:	83 c4 10             	add    $0x10,%esp
    cprintf("  fs   0x----%04x\n", tf->tf_fs);
c0102491:	8b 45 08             	mov    0x8(%ebp),%eax
c0102494:	0f b7 40 24          	movzwl 0x24(%eax),%eax
c0102498:	0f b7 c0             	movzwl %ax,%eax
c010249b:	83 ec 08             	sub    $0x8,%esp
c010249e:	50                   	push   %eax
c010249f:	68 ea be 10 c0       	push   $0xc010beea
c01024a4:	e8 ee dd ff ff       	call   c0100297 <cprintf>
c01024a9:	83 c4 10             	add    $0x10,%esp
    cprintf("  gs   0x----%04x\n", tf->tf_gs);
c01024ac:	8b 45 08             	mov    0x8(%ebp),%eax
c01024af:	0f b7 40 20          	movzwl 0x20(%eax),%eax
c01024b3:	0f b7 c0             	movzwl %ax,%eax
c01024b6:	83 ec 08             	sub    $0x8,%esp
c01024b9:	50                   	push   %eax
c01024ba:	68 fd be 10 c0       	push   $0xc010befd
c01024bf:	e8 d3 dd ff ff       	call   c0100297 <cprintf>
c01024c4:	83 c4 10             	add    $0x10,%esp
    cprintf("  trap 0x%08x %s\n", tf->tf_trapno, trapname(tf->tf_trapno));
c01024c7:	8b 45 08             	mov    0x8(%ebp),%eax
c01024ca:	8b 40 30             	mov    0x30(%eax),%eax
c01024cd:	83 ec 0c             	sub    $0xc,%esp
c01024d0:	50                   	push   %eax
c01024d1:	e8 16 ff ff ff       	call   c01023ec <trapname>
c01024d6:	83 c4 10             	add    $0x10,%esp
c01024d9:	89 c2                	mov    %eax,%edx
c01024db:	8b 45 08             	mov    0x8(%ebp),%eax
c01024de:	8b 40 30             	mov    0x30(%eax),%eax
c01024e1:	83 ec 04             	sub    $0x4,%esp
c01024e4:	52                   	push   %edx
c01024e5:	50                   	push   %eax
c01024e6:	68 10 bf 10 c0       	push   $0xc010bf10
c01024eb:	e8 a7 dd ff ff       	call   c0100297 <cprintf>
c01024f0:	83 c4 10             	add    $0x10,%esp
    cprintf("  err  0x%08x\n", tf->tf_err);
c01024f3:	8b 45 08             	mov    0x8(%ebp),%eax
c01024f6:	8b 40 34             	mov    0x34(%eax),%eax
c01024f9:	83 ec 08             	sub    $0x8,%esp
c01024fc:	50                   	push   %eax
c01024fd:	68 22 bf 10 c0       	push   $0xc010bf22
c0102502:	e8 90 dd ff ff       	call   c0100297 <cprintf>
c0102507:	83 c4 10             	add    $0x10,%esp
    cprintf("  eip  0x%08x\n", tf->tf_eip);
c010250a:	8b 45 08             	mov    0x8(%ebp),%eax
c010250d:	8b 40 38             	mov    0x38(%eax),%eax
c0102510:	83 ec 08             	sub    $0x8,%esp
c0102513:	50                   	push   %eax
c0102514:	68 31 bf 10 c0       	push   $0xc010bf31
c0102519:	e8 79 dd ff ff       	call   c0100297 <cprintf>
c010251e:	83 c4 10             	add    $0x10,%esp
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
c0102521:	8b 45 08             	mov    0x8(%ebp),%eax
c0102524:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c0102528:	0f b7 c0             	movzwl %ax,%eax
c010252b:	83 ec 08             	sub    $0x8,%esp
c010252e:	50                   	push   %eax
c010252f:	68 40 bf 10 c0       	push   $0xc010bf40
c0102534:	e8 5e dd ff ff       	call   c0100297 <cprintf>
c0102539:	83 c4 10             	add    $0x10,%esp
    cprintf("  flag 0x%08x ", tf->tf_eflags);
c010253c:	8b 45 08             	mov    0x8(%ebp),%eax
c010253f:	8b 40 40             	mov    0x40(%eax),%eax
c0102542:	83 ec 08             	sub    $0x8,%esp
c0102545:	50                   	push   %eax
c0102546:	68 53 bf 10 c0       	push   $0xc010bf53
c010254b:	e8 47 dd ff ff       	call   c0100297 <cprintf>
c0102550:	83 c4 10             	add    $0x10,%esp

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c0102553:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010255a:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c0102561:	eb 3f                	jmp    c01025a2 <print_trapframe+0x16f>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
c0102563:	8b 45 08             	mov    0x8(%ebp),%eax
c0102566:	8b 50 40             	mov    0x40(%eax),%edx
c0102569:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010256c:	21 d0                	and    %edx,%eax
c010256e:	85 c0                	test   %eax,%eax
c0102570:	74 29                	je     c010259b <print_trapframe+0x168>
c0102572:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102575:	8b 04 85 80 c5 12 c0 	mov    -0x3fed3a80(,%eax,4),%eax
c010257c:	85 c0                	test   %eax,%eax
c010257e:	74 1b                	je     c010259b <print_trapframe+0x168>
            cprintf("%s,", IA32flags[i]);
c0102580:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102583:	8b 04 85 80 c5 12 c0 	mov    -0x3fed3a80(,%eax,4),%eax
c010258a:	83 ec 08             	sub    $0x8,%esp
c010258d:	50                   	push   %eax
c010258e:	68 62 bf 10 c0       	push   $0xc010bf62
c0102593:	e8 ff dc ff ff       	call   c0100297 <cprintf>
c0102598:	83 c4 10             	add    $0x10,%esp
    cprintf("  eip  0x%08x\n", tf->tf_eip);
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
    cprintf("  flag 0x%08x ", tf->tf_eflags);

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c010259b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010259f:	d1 65 f0             	shll   -0x10(%ebp)
c01025a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01025a5:	83 f8 17             	cmp    $0x17,%eax
c01025a8:	76 b9                	jbe    c0102563 <print_trapframe+0x130>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
            cprintf("%s,", IA32flags[i]);
        }
    }
    cprintf("IOPL=%d\n", (tf->tf_eflags & FL_IOPL_MASK) >> 12);
c01025aa:	8b 45 08             	mov    0x8(%ebp),%eax
c01025ad:	8b 40 40             	mov    0x40(%eax),%eax
c01025b0:	25 00 30 00 00       	and    $0x3000,%eax
c01025b5:	c1 e8 0c             	shr    $0xc,%eax
c01025b8:	83 ec 08             	sub    $0x8,%esp
c01025bb:	50                   	push   %eax
c01025bc:	68 66 bf 10 c0       	push   $0xc010bf66
c01025c1:	e8 d1 dc ff ff       	call   c0100297 <cprintf>
c01025c6:	83 c4 10             	add    $0x10,%esp

    if (!trap_in_kernel(tf)) {
c01025c9:	83 ec 0c             	sub    $0xc,%esp
c01025cc:	ff 75 08             	pushl  0x8(%ebp)
c01025cf:	e8 49 fe ff ff       	call   c010241d <trap_in_kernel>
c01025d4:	83 c4 10             	add    $0x10,%esp
c01025d7:	85 c0                	test   %eax,%eax
c01025d9:	75 32                	jne    c010260d <print_trapframe+0x1da>
        cprintf("  esp  0x%08x\n", tf->tf_esp);
c01025db:	8b 45 08             	mov    0x8(%ebp),%eax
c01025de:	8b 40 44             	mov    0x44(%eax),%eax
c01025e1:	83 ec 08             	sub    $0x8,%esp
c01025e4:	50                   	push   %eax
c01025e5:	68 6f bf 10 c0       	push   $0xc010bf6f
c01025ea:	e8 a8 dc ff ff       	call   c0100297 <cprintf>
c01025ef:	83 c4 10             	add    $0x10,%esp
        cprintf("  ss   0x----%04x\n", tf->tf_ss);
c01025f2:	8b 45 08             	mov    0x8(%ebp),%eax
c01025f5:	0f b7 40 48          	movzwl 0x48(%eax),%eax
c01025f9:	0f b7 c0             	movzwl %ax,%eax
c01025fc:	83 ec 08             	sub    $0x8,%esp
c01025ff:	50                   	push   %eax
c0102600:	68 7e bf 10 c0       	push   $0xc010bf7e
c0102605:	e8 8d dc ff ff       	call   c0100297 <cprintf>
c010260a:	83 c4 10             	add    $0x10,%esp
    }
}
c010260d:	90                   	nop
c010260e:	c9                   	leave  
c010260f:	c3                   	ret    

c0102610 <print_regs>:

void
print_regs(struct pushregs *regs) {
c0102610:	55                   	push   %ebp
c0102611:	89 e5                	mov    %esp,%ebp
c0102613:	83 ec 08             	sub    $0x8,%esp
    cprintf("  edi  0x%08x\n", regs->reg_edi);
c0102616:	8b 45 08             	mov    0x8(%ebp),%eax
c0102619:	8b 00                	mov    (%eax),%eax
c010261b:	83 ec 08             	sub    $0x8,%esp
c010261e:	50                   	push   %eax
c010261f:	68 91 bf 10 c0       	push   $0xc010bf91
c0102624:	e8 6e dc ff ff       	call   c0100297 <cprintf>
c0102629:	83 c4 10             	add    $0x10,%esp
    cprintf("  esi  0x%08x\n", regs->reg_esi);
c010262c:	8b 45 08             	mov    0x8(%ebp),%eax
c010262f:	8b 40 04             	mov    0x4(%eax),%eax
c0102632:	83 ec 08             	sub    $0x8,%esp
c0102635:	50                   	push   %eax
c0102636:	68 a0 bf 10 c0       	push   $0xc010bfa0
c010263b:	e8 57 dc ff ff       	call   c0100297 <cprintf>
c0102640:	83 c4 10             	add    $0x10,%esp
    cprintf("  ebp  0x%08x\n", regs->reg_ebp);
c0102643:	8b 45 08             	mov    0x8(%ebp),%eax
c0102646:	8b 40 08             	mov    0x8(%eax),%eax
c0102649:	83 ec 08             	sub    $0x8,%esp
c010264c:	50                   	push   %eax
c010264d:	68 af bf 10 c0       	push   $0xc010bfaf
c0102652:	e8 40 dc ff ff       	call   c0100297 <cprintf>
c0102657:	83 c4 10             	add    $0x10,%esp
    cprintf("  oesp 0x%08x\n", regs->reg_oesp);
c010265a:	8b 45 08             	mov    0x8(%ebp),%eax
c010265d:	8b 40 0c             	mov    0xc(%eax),%eax
c0102660:	83 ec 08             	sub    $0x8,%esp
c0102663:	50                   	push   %eax
c0102664:	68 be bf 10 c0       	push   $0xc010bfbe
c0102669:	e8 29 dc ff ff       	call   c0100297 <cprintf>
c010266e:	83 c4 10             	add    $0x10,%esp
    cprintf("  ebx  0x%08x\n", regs->reg_ebx);
c0102671:	8b 45 08             	mov    0x8(%ebp),%eax
c0102674:	8b 40 10             	mov    0x10(%eax),%eax
c0102677:	83 ec 08             	sub    $0x8,%esp
c010267a:	50                   	push   %eax
c010267b:	68 cd bf 10 c0       	push   $0xc010bfcd
c0102680:	e8 12 dc ff ff       	call   c0100297 <cprintf>
c0102685:	83 c4 10             	add    $0x10,%esp
    cprintf("  edx  0x%08x\n", regs->reg_edx);
c0102688:	8b 45 08             	mov    0x8(%ebp),%eax
c010268b:	8b 40 14             	mov    0x14(%eax),%eax
c010268e:	83 ec 08             	sub    $0x8,%esp
c0102691:	50                   	push   %eax
c0102692:	68 dc bf 10 c0       	push   $0xc010bfdc
c0102697:	e8 fb db ff ff       	call   c0100297 <cprintf>
c010269c:	83 c4 10             	add    $0x10,%esp
    cprintf("  ecx  0x%08x\n", regs->reg_ecx);
c010269f:	8b 45 08             	mov    0x8(%ebp),%eax
c01026a2:	8b 40 18             	mov    0x18(%eax),%eax
c01026a5:	83 ec 08             	sub    $0x8,%esp
c01026a8:	50                   	push   %eax
c01026a9:	68 eb bf 10 c0       	push   $0xc010bfeb
c01026ae:	e8 e4 db ff ff       	call   c0100297 <cprintf>
c01026b3:	83 c4 10             	add    $0x10,%esp
    cprintf("  eax  0x%08x\n", regs->reg_eax);
c01026b6:	8b 45 08             	mov    0x8(%ebp),%eax
c01026b9:	8b 40 1c             	mov    0x1c(%eax),%eax
c01026bc:	83 ec 08             	sub    $0x8,%esp
c01026bf:	50                   	push   %eax
c01026c0:	68 fa bf 10 c0       	push   $0xc010bffa
c01026c5:	e8 cd db ff ff       	call   c0100297 <cprintf>
c01026ca:	83 c4 10             	add    $0x10,%esp
}
c01026cd:	90                   	nop
c01026ce:	c9                   	leave  
c01026cf:	c3                   	ret    

c01026d0 <print_pgfault>:

static inline void
print_pgfault(struct trapframe *tf) {
c01026d0:	55                   	push   %ebp
c01026d1:	89 e5                	mov    %esp,%ebp
c01026d3:	53                   	push   %ebx
c01026d4:	83 ec 14             	sub    $0x14,%esp
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
            (tf->tf_err & 1) ? "protection fault" : "no page found");
c01026d7:	8b 45 08             	mov    0x8(%ebp),%eax
c01026da:	8b 40 34             	mov    0x34(%eax),%eax
c01026dd:	83 e0 01             	and    $0x1,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c01026e0:	85 c0                	test   %eax,%eax
c01026e2:	74 07                	je     c01026eb <print_pgfault+0x1b>
c01026e4:	bb 09 c0 10 c0       	mov    $0xc010c009,%ebx
c01026e9:	eb 05                	jmp    c01026f0 <print_pgfault+0x20>
c01026eb:	bb 1a c0 10 c0       	mov    $0xc010c01a,%ebx
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
c01026f0:	8b 45 08             	mov    0x8(%ebp),%eax
c01026f3:	8b 40 34             	mov    0x34(%eax),%eax
c01026f6:	83 e0 02             	and    $0x2,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c01026f9:	85 c0                	test   %eax,%eax
c01026fb:	74 07                	je     c0102704 <print_pgfault+0x34>
c01026fd:	b9 57 00 00 00       	mov    $0x57,%ecx
c0102702:	eb 05                	jmp    c0102709 <print_pgfault+0x39>
c0102704:	b9 52 00 00 00       	mov    $0x52,%ecx
            (tf->tf_err & 4) ? 'U' : 'K',
c0102709:	8b 45 08             	mov    0x8(%ebp),%eax
c010270c:	8b 40 34             	mov    0x34(%eax),%eax
c010270f:	83 e0 04             	and    $0x4,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c0102712:	85 c0                	test   %eax,%eax
c0102714:	74 07                	je     c010271d <print_pgfault+0x4d>
c0102716:	ba 55 00 00 00       	mov    $0x55,%edx
c010271b:	eb 05                	jmp    c0102722 <print_pgfault+0x52>
c010271d:	ba 4b 00 00 00       	mov    $0x4b,%edx
}

static inline uintptr_t
rcr2(void) {
    uintptr_t cr2;
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c0102722:	0f 20 d0             	mov    %cr2,%eax
c0102725:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return cr2;
c0102728:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010272b:	83 ec 0c             	sub    $0xc,%esp
c010272e:	53                   	push   %ebx
c010272f:	51                   	push   %ecx
c0102730:	52                   	push   %edx
c0102731:	50                   	push   %eax
c0102732:	68 28 c0 10 c0       	push   $0xc010c028
c0102737:	e8 5b db ff ff       	call   c0100297 <cprintf>
c010273c:	83 c4 20             	add    $0x20,%esp
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
            (tf->tf_err & 1) ? "protection fault" : "no page found");
}
c010273f:	90                   	nop
c0102740:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0102743:	c9                   	leave  
c0102744:	c3                   	ret    

c0102745 <pgfault_handler>:

static int
pgfault_handler(struct trapframe *tf) {
c0102745:	55                   	push   %ebp
c0102746:	89 e5                	mov    %esp,%ebp
c0102748:	83 ec 18             	sub    $0x18,%esp
    extern struct mm_struct *check_mm_struct;
    if(check_mm_struct !=NULL) { //used for test check_swap
c010274b:	a1 d0 30 1b c0       	mov    0xc01b30d0,%eax
c0102750:	85 c0                	test   %eax,%eax
c0102752:	74 0e                	je     c0102762 <pgfault_handler+0x1d>
            print_pgfault(tf);
c0102754:	83 ec 0c             	sub    $0xc,%esp
c0102757:	ff 75 08             	pushl  0x8(%ebp)
c010275a:	e8 71 ff ff ff       	call   c01026d0 <print_pgfault>
c010275f:	83 c4 10             	add    $0x10,%esp
        }
    struct mm_struct *mm;
    if (check_mm_struct != NULL) {
c0102762:	a1 d0 30 1b c0       	mov    0xc01b30d0,%eax
c0102767:	85 c0                	test   %eax,%eax
c0102769:	74 32                	je     c010279d <pgfault_handler+0x58>
        assert(current == idleproc);
c010276b:	8b 15 28 10 1b c0    	mov    0xc01b1028,%edx
c0102771:	a1 20 10 1b c0       	mov    0xc01b1020,%eax
c0102776:	39 c2                	cmp    %eax,%edx
c0102778:	74 19                	je     c0102793 <pgfault_handler+0x4e>
c010277a:	68 4b c0 10 c0       	push   $0xc010c04b
c010277f:	68 5f c0 10 c0       	push   $0xc010c05f
c0102784:	68 b9 00 00 00       	push   $0xb9
c0102789:	68 4e be 10 c0       	push   $0xc010be4e
c010278e:	e8 6a dc ff ff       	call   c01003fd <__panic>
        mm = check_mm_struct;
c0102793:	a1 d0 30 1b c0       	mov    0xc01b30d0,%eax
c0102798:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010279b:	eb 47                	jmp    c01027e4 <pgfault_handler+0x9f>
    }
    else {
        if (current == NULL) {
c010279d:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c01027a2:	85 c0                	test   %eax,%eax
c01027a4:	75 33                	jne    c01027d9 <pgfault_handler+0x94>
            print_trapframe(tf);
c01027a6:	83 ec 0c             	sub    $0xc,%esp
c01027a9:	ff 75 08             	pushl  0x8(%ebp)
c01027ac:	e8 82 fc ff ff       	call   c0102433 <print_trapframe>
c01027b1:	83 c4 10             	add    $0x10,%esp
            print_pgfault(tf);
c01027b4:	83 ec 0c             	sub    $0xc,%esp
c01027b7:	ff 75 08             	pushl  0x8(%ebp)
c01027ba:	e8 11 ff ff ff       	call   c01026d0 <print_pgfault>
c01027bf:	83 c4 10             	add    $0x10,%esp
            panic("unhandled page fault.\n");
c01027c2:	83 ec 04             	sub    $0x4,%esp
c01027c5:	68 74 c0 10 c0       	push   $0xc010c074
c01027ca:	68 c0 00 00 00       	push   $0xc0
c01027cf:	68 4e be 10 c0       	push   $0xc010be4e
c01027d4:	e8 24 dc ff ff       	call   c01003fd <__panic>
        }
        mm = current->mm;
c01027d9:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c01027de:	8b 40 18             	mov    0x18(%eax),%eax
c01027e1:	89 45 f4             	mov    %eax,-0xc(%ebp)
}

static inline uintptr_t
rcr2(void) {
    uintptr_t cr2;
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c01027e4:	0f 20 d0             	mov    %cr2,%eax
c01027e7:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return cr2;
c01027ea:	8b 55 f0             	mov    -0x10(%ebp),%edx
    }
    return do_pgfault(mm, tf->tf_err, rcr2());
c01027ed:	8b 45 08             	mov    0x8(%ebp),%eax
c01027f0:	8b 40 34             	mov    0x34(%eax),%eax
c01027f3:	83 ec 04             	sub    $0x4,%esp
c01027f6:	52                   	push   %edx
c01027f7:	50                   	push   %eax
c01027f8:	ff 75 f4             	pushl  -0xc(%ebp)
c01027fb:	e8 98 1b 00 00       	call   c0104398 <do_pgfault>
c0102800:	83 c4 10             	add    $0x10,%esp
}
c0102803:	c9                   	leave  
c0102804:	c3                   	ret    

c0102805 <trap_dispatch>:

static volatile int in_swap_tick_event = 0;
extern struct mm_struct *check_mm_struct;

static void
trap_dispatch(struct trapframe *tf) {
c0102805:	55                   	push   %ebp
c0102806:	89 e5                	mov    %esp,%ebp
c0102808:	57                   	push   %edi
c0102809:	56                   	push   %esi
c010280a:	53                   	push   %ebx
c010280b:	83 ec 1c             	sub    $0x1c,%esp
    char c;

    int ret=0;
c010280e:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

    switch (tf->tf_trapno) {
c0102815:	8b 45 08             	mov    0x8(%ebp),%eax
c0102818:	8b 40 30             	mov    0x30(%eax),%eax
c010281b:	83 f8 2f             	cmp    $0x2f,%eax
c010281e:	77 38                	ja     c0102858 <trap_dispatch+0x53>
c0102820:	83 f8 2e             	cmp    $0x2e,%eax
c0102823:	0f 83 75 02 00 00    	jae    c0102a9e <trap_dispatch+0x299>
c0102829:	83 f8 20             	cmp    $0x20,%eax
c010282c:	0f 84 eb 00 00 00    	je     c010291d <trap_dispatch+0x118>
c0102832:	83 f8 20             	cmp    $0x20,%eax
c0102835:	77 0a                	ja     c0102841 <trap_dispatch+0x3c>
c0102837:	83 f8 0e             	cmp    $0xe,%eax
c010283a:	74 3e                	je     c010287a <trap_dispatch+0x75>
c010283c:	e9 12 02 00 00       	jmp    c0102a53 <trap_dispatch+0x24e>
c0102841:	83 f8 21             	cmp    $0x21,%eax
c0102844:	0f 84 3f 01 00 00    	je     c0102989 <trap_dispatch+0x184>
c010284a:	83 f8 24             	cmp    $0x24,%eax
c010284d:	0f 84 0f 01 00 00    	je     c0102962 <trap_dispatch+0x15d>
c0102853:	e9 fb 01 00 00       	jmp    c0102a53 <trap_dispatch+0x24e>
c0102858:	83 f8 79             	cmp    $0x79,%eax
c010285b:	0f 84 c4 01 00 00    	je     c0102a25 <trap_dispatch+0x220>
c0102861:	3d 80 00 00 00       	cmp    $0x80,%eax
c0102866:	0f 84 a7 00 00 00    	je     c0102913 <trap_dispatch+0x10e>
c010286c:	83 f8 78             	cmp    $0x78,%eax
c010286f:	0f 84 3b 01 00 00    	je     c01029b0 <trap_dispatch+0x1ab>
c0102875:	e9 d9 01 00 00       	jmp    c0102a53 <trap_dispatch+0x24e>
    case T_PGFLT:  //page fault
        if ((ret = pgfault_handler(tf)) != 0) {
c010287a:	83 ec 0c             	sub    $0xc,%esp
c010287d:	ff 75 08             	pushl  0x8(%ebp)
c0102880:	e8 c0 fe ff ff       	call   c0102745 <pgfault_handler>
c0102885:	83 c4 10             	add    $0x10,%esp
c0102888:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010288b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010288f:	0f 84 0c 02 00 00    	je     c0102aa1 <trap_dispatch+0x29c>
            print_trapframe(tf);
c0102895:	83 ec 0c             	sub    $0xc,%esp
c0102898:	ff 75 08             	pushl  0x8(%ebp)
c010289b:	e8 93 fb ff ff       	call   c0102433 <print_trapframe>
c01028a0:	83 c4 10             	add    $0x10,%esp
            if (current == NULL) {
c01028a3:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c01028a8:	85 c0                	test   %eax,%eax
c01028aa:	75 17                	jne    c01028c3 <trap_dispatch+0xbe>
                panic("handle pgfault failed. ret=%d\n", ret);
c01028ac:	ff 75 e4             	pushl  -0x1c(%ebp)
c01028af:	68 8c c0 10 c0       	push   $0xc010c08c
c01028b4:	68 d5 00 00 00       	push   $0xd5
c01028b9:	68 4e be 10 c0       	push   $0xc010be4e
c01028be:	e8 3a db ff ff       	call   c01003fd <__panic>
            }
            else {
                if (trap_in_kernel(tf)) {
c01028c3:	83 ec 0c             	sub    $0xc,%esp
c01028c6:	ff 75 08             	pushl  0x8(%ebp)
c01028c9:	e8 4f fb ff ff       	call   c010241d <trap_in_kernel>
c01028ce:	83 c4 10             	add    $0x10,%esp
c01028d1:	85 c0                	test   %eax,%eax
c01028d3:	74 17                	je     c01028ec <trap_dispatch+0xe7>
                    panic("handle pgfault failed in kernel mode. ret=%d\n", ret);
c01028d5:	ff 75 e4             	pushl  -0x1c(%ebp)
c01028d8:	68 ac c0 10 c0       	push   $0xc010c0ac
c01028dd:	68 d9 00 00 00       	push   $0xd9
c01028e2:	68 4e be 10 c0       	push   $0xc010be4e
c01028e7:	e8 11 db ff ff       	call   c01003fd <__panic>
                }
                cprintf("killed by kernel.\n");
c01028ec:	83 ec 0c             	sub    $0xc,%esp
c01028ef:	68 da c0 10 c0       	push   $0xc010c0da
c01028f4:	e8 9e d9 ff ff       	call   c0100297 <cprintf>
c01028f9:	83 c4 10             	add    $0x10,%esp
                panic("handle user mode pgfault failed. ret=%d\n", ret); 
c01028fc:	ff 75 e4             	pushl  -0x1c(%ebp)
c01028ff:	68 f0 c0 10 c0       	push   $0xc010c0f0
c0102904:	68 dc 00 00 00       	push   $0xdc
c0102909:	68 4e be 10 c0       	push   $0xc010be4e
c010290e:	e8 ea da ff ff       	call   c01003fd <__panic>
                do_exit(-E_KILLED);
            }
        }
        break;
    case T_SYSCALL:
        syscall();
c0102913:	e8 18 84 00 00       	call   c010ad30 <syscall>
        break;
c0102918:	e9 85 01 00 00       	jmp    c0102aa2 <trap_dispatch+0x29d>
        /* LAB6 2015010062 */
        /* you should upate you lab5 code
         * IMPORTANT FUNCTIONS:
	     * sched_class_proc_tick
         */
        ticks++;
c010291d:	a1 78 30 1b c0       	mov    0xc01b3078,%eax
c0102922:	83 c0 01             	add    $0x1,%eax
c0102925:	a3 78 30 1b c0       	mov    %eax,0xc01b3078
        // if (ticks % TICK_NUM == 0) {
            // print_ticks();
            // current->need_resched = 1;
        assert(current != NULL);
c010292a:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010292f:	85 c0                	test   %eax,%eax
c0102931:	75 19                	jne    c010294c <trap_dispatch+0x147>
c0102933:	68 19 c1 10 c0       	push   $0xc010c119
c0102938:	68 5f c0 10 c0       	push   $0xc010c05f
c010293d:	68 fc 00 00 00       	push   $0xfc
c0102942:	68 4e be 10 c0       	push   $0xc010be4e
c0102947:	e8 b1 da ff ff       	call   c01003fd <__panic>
        sched_class_proc_tick(current);
c010294c:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c0102951:	83 ec 0c             	sub    $0xc,%esp
c0102954:	50                   	push   %eax
c0102955:	e8 73 7d 00 00       	call   c010a6cd <sched_class_proc_tick>
c010295a:	83 c4 10             	add    $0x10,%esp
        // }
        break;
c010295d:	e9 40 01 00 00       	jmp    c0102aa2 <trap_dispatch+0x29d>
    case IRQ_OFFSET + IRQ_COM1:
        c = cons_getc();
c0102962:	e8 19 f6 ff ff       	call   c0101f80 <cons_getc>
c0102967:	88 45 e3             	mov    %al,-0x1d(%ebp)
        cprintf("serial [%03d] %c\n", c, c);
c010296a:	0f be 55 e3          	movsbl -0x1d(%ebp),%edx
c010296e:	0f be 45 e3          	movsbl -0x1d(%ebp),%eax
c0102972:	83 ec 04             	sub    $0x4,%esp
c0102975:	52                   	push   %edx
c0102976:	50                   	push   %eax
c0102977:	68 29 c1 10 c0       	push   $0xc010c129
c010297c:	e8 16 d9 ff ff       	call   c0100297 <cprintf>
c0102981:	83 c4 10             	add    $0x10,%esp
        break;
c0102984:	e9 19 01 00 00       	jmp    c0102aa2 <trap_dispatch+0x29d>
    case IRQ_OFFSET + IRQ_KBD:
        c = cons_getc();
c0102989:	e8 f2 f5 ff ff       	call   c0101f80 <cons_getc>
c010298e:	88 45 e3             	mov    %al,-0x1d(%ebp)
        cprintf("kbd [%03d] %c\n", c, c);
c0102991:	0f be 55 e3          	movsbl -0x1d(%ebp),%edx
c0102995:	0f be 45 e3          	movsbl -0x1d(%ebp),%eax
c0102999:	83 ec 04             	sub    $0x4,%esp
c010299c:	52                   	push   %edx
c010299d:	50                   	push   %eax
c010299e:	68 3b c1 10 c0       	push   $0xc010c13b
c01029a3:	e8 ef d8 ff ff       	call   c0100297 <cprintf>
c01029a8:	83 c4 10             	add    $0x10,%esp
        break;
c01029ab:	e9 f2 00 00 00       	jmp    c0102aa2 <trap_dispatch+0x29d>
    //LAB1 CHALLENGE 1 : YOUR CODE you should modify below codes.
    case T_SWITCH_TOU:
        switchk2u = *tf;
c01029b0:	8b 55 08             	mov    0x8(%ebp),%edx
c01029b3:	b8 80 30 1b c0       	mov    $0xc01b3080,%eax
c01029b8:	89 d3                	mov    %edx,%ebx
c01029ba:	ba 4c 00 00 00       	mov    $0x4c,%edx
c01029bf:	8b 0b                	mov    (%ebx),%ecx
c01029c1:	89 08                	mov    %ecx,(%eax)
c01029c3:	8b 4c 13 fc          	mov    -0x4(%ebx,%edx,1),%ecx
c01029c7:	89 4c 10 fc          	mov    %ecx,-0x4(%eax,%edx,1)
c01029cb:	8d 78 04             	lea    0x4(%eax),%edi
c01029ce:	83 e7 fc             	and    $0xfffffffc,%edi
c01029d1:	29 f8                	sub    %edi,%eax
c01029d3:	29 c3                	sub    %eax,%ebx
c01029d5:	01 c2                	add    %eax,%edx
c01029d7:	83 e2 fc             	and    $0xfffffffc,%edx
c01029da:	89 d0                	mov    %edx,%eax
c01029dc:	c1 e8 02             	shr    $0x2,%eax
c01029df:	89 de                	mov    %ebx,%esi
c01029e1:	89 c1                	mov    %eax,%ecx
c01029e3:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
        switchk2u.tf_cs = USER_CS;
c01029e5:	66 c7 05 bc 30 1b c0 	movw   $0x1b,0xc01b30bc
c01029ec:	1b 00 
        switchk2u.tf_ds = USER_DS;
c01029ee:	66 c7 05 ac 30 1b c0 	movw   $0x23,0xc01b30ac
c01029f5:	23 00 
        switchk2u.tf_es = USER_DS;
c01029f7:	66 c7 05 a8 30 1b c0 	movw   $0x23,0xc01b30a8
c01029fe:	23 00 
        switchk2u.tf_ss = USER_DS;
c0102a00:	66 c7 05 c8 30 1b c0 	movw   $0x23,0xc01b30c8
c0102a07:	23 00 
        switchk2u.tf_eflags |= FL_IOPL_MASK;
c0102a09:	a1 c0 30 1b c0       	mov    0xc01b30c0,%eax
c0102a0e:	80 cc 30             	or     $0x30,%ah
c0102a11:	a3 c0 30 1b c0       	mov    %eax,0xc01b30c0
        *((uint32_t *)tf - 1) = (uint32_t)&switchk2u;
c0102a16:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a19:	83 e8 04             	sub    $0x4,%eax
c0102a1c:	ba 80 30 1b c0       	mov    $0xc01b3080,%edx
c0102a21:	89 10                	mov    %edx,(%eax)
        break;
c0102a23:	eb 7d                	jmp    c0102aa2 <trap_dispatch+0x29d>
    case T_SWITCH_TOK:
        tf->tf_cs = KERNEL_CS;
c0102a25:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a28:	66 c7 40 3c 08 00    	movw   $0x8,0x3c(%eax)
        tf->tf_ds = KERNEL_DS;
c0102a2e:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a31:	66 c7 40 2c 10 00    	movw   $0x10,0x2c(%eax)
        tf->tf_es = KERNEL_DS;
c0102a37:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a3a:	66 c7 40 28 10 00    	movw   $0x10,0x28(%eax)
        tf->tf_eflags &= ~FL_IOPL_MASK;
c0102a40:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a43:	8b 40 40             	mov    0x40(%eax),%eax
c0102a46:	80 e4 cf             	and    $0xcf,%ah
c0102a49:	89 c2                	mov    %eax,%edx
c0102a4b:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a4e:	89 50 40             	mov    %edx,0x40(%eax)
        break;
c0102a51:	eb 4f                	jmp    c0102aa2 <trap_dispatch+0x29d>
    case IRQ_OFFSET + IRQ_IDE1:
    case IRQ_OFFSET + IRQ_IDE2:
        /* do nothing */
        break;
    default:
        print_trapframe(tf);
c0102a53:	83 ec 0c             	sub    $0xc,%esp
c0102a56:	ff 75 08             	pushl  0x8(%ebp)
c0102a59:	e8 d5 f9 ff ff       	call   c0102433 <print_trapframe>
c0102a5e:	83 c4 10             	add    $0x10,%esp
        if (current != NULL) {
c0102a61:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c0102a66:	85 c0                	test   %eax,%eax
c0102a68:	74 1d                	je     c0102a87 <trap_dispatch+0x282>
            cprintf("unhandled trap.\n");
c0102a6a:	83 ec 0c             	sub    $0xc,%esp
c0102a6d:	68 4a c1 10 c0       	push   $0xc010c14a
c0102a72:	e8 20 d8 ff ff       	call   c0100297 <cprintf>
c0102a77:	83 c4 10             	add    $0x10,%esp
            do_exit(-E_KILLED);
c0102a7a:	83 ec 0c             	sub    $0xc,%esp
c0102a7d:	6a f7                	push   $0xfffffff7
c0102a7f:	e8 08 6d 00 00       	call   c010978c <do_exit>
c0102a84:	83 c4 10             	add    $0x10,%esp
        }
        // in kernel, it must be a mistake
        panic("unexpected trap in kernel.\n");
c0102a87:	83 ec 04             	sub    $0x4,%esp
c0102a8a:	68 5b c1 10 c0       	push   $0xc010c15b
c0102a8f:	68 24 01 00 00       	push   $0x124
c0102a94:	68 4e be 10 c0       	push   $0xc010be4e
c0102a99:	e8 5f d9 ff ff       	call   c01003fd <__panic>
        break;
    // end of copy
    case IRQ_OFFSET + IRQ_IDE1:
    case IRQ_OFFSET + IRQ_IDE2:
        /* do nothing */
        break;
c0102a9e:	90                   	nop
c0102a9f:	eb 01                	jmp    c0102aa2 <trap_dispatch+0x29d>
                cprintf("killed by kernel.\n");
                panic("handle user mode pgfault failed. ret=%d\n", ret); 
                do_exit(-E_KILLED);
            }
        }
        break;
c0102aa1:	90                   	nop
        }
        // in kernel, it must be a mistake
        panic("unexpected trap in kernel.\n");

    }
}
c0102aa2:	90                   	nop
c0102aa3:	8d 65 f4             	lea    -0xc(%ebp),%esp
c0102aa6:	5b                   	pop    %ebx
c0102aa7:	5e                   	pop    %esi
c0102aa8:	5f                   	pop    %edi
c0102aa9:	5d                   	pop    %ebp
c0102aaa:	c3                   	ret    

c0102aab <trap>:
 * trap - handles or dispatches an exception/interrupt. if and when trap() returns,
 * the code in kern/trap/trapentry.S restores the old CPU state saved in the
 * trapframe and then uses the iret instruction to return from the exception.
 * */
void
trap(struct trapframe *tf) {
c0102aab:	55                   	push   %ebp
c0102aac:	89 e5                	mov    %esp,%ebp
c0102aae:	83 ec 18             	sub    $0x18,%esp
    // dispatch based on what type of trap occurred
    // used for previous projects
    if (current == NULL) {
c0102ab1:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c0102ab6:	85 c0                	test   %eax,%eax
c0102ab8:	75 10                	jne    c0102aca <trap+0x1f>
        trap_dispatch(tf);
c0102aba:	83 ec 0c             	sub    $0xc,%esp
c0102abd:	ff 75 08             	pushl  0x8(%ebp)
c0102ac0:	e8 40 fd ff ff       	call   c0102805 <trap_dispatch>
c0102ac5:	83 c4 10             	add    $0x10,%esp
                // cprintf("calling schedule()...\n");
                schedule();
            }
        }
    }
}
c0102ac8:	eb 73                	jmp    c0102b3d <trap+0x92>
    if (current == NULL) {
        trap_dispatch(tf);
    }
    else {
        // keep a trapframe chain in stack
        struct trapframe *otf = current->tf;
c0102aca:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c0102acf:	8b 40 3c             	mov    0x3c(%eax),%eax
c0102ad2:	89 45 f4             	mov    %eax,-0xc(%ebp)
        current->tf = tf;
c0102ad5:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c0102ada:	8b 55 08             	mov    0x8(%ebp),%edx
c0102add:	89 50 3c             	mov    %edx,0x3c(%eax)
    
        bool in_kernel = trap_in_kernel(tf);
c0102ae0:	83 ec 0c             	sub    $0xc,%esp
c0102ae3:	ff 75 08             	pushl  0x8(%ebp)
c0102ae6:	e8 32 f9 ff ff       	call   c010241d <trap_in_kernel>
c0102aeb:	83 c4 10             	add    $0x10,%esp
c0102aee:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
        trap_dispatch(tf);
c0102af1:	83 ec 0c             	sub    $0xc,%esp
c0102af4:	ff 75 08             	pushl  0x8(%ebp)
c0102af7:	e8 09 fd ff ff       	call   c0102805 <trap_dispatch>
c0102afc:	83 c4 10             	add    $0x10,%esp
    
        current->tf = otf;
c0102aff:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c0102b04:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0102b07:	89 50 3c             	mov    %edx,0x3c(%eax)
        if (!in_kernel) {
c0102b0a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0102b0e:	75 2d                	jne    c0102b3d <trap+0x92>
            if (current->flags & PF_EXITING) {
c0102b10:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c0102b15:	8b 40 44             	mov    0x44(%eax),%eax
c0102b18:	83 e0 01             	and    $0x1,%eax
c0102b1b:	85 c0                	test   %eax,%eax
c0102b1d:	74 0d                	je     c0102b2c <trap+0x81>
                do_exit(-E_KILLED);
c0102b1f:	83 ec 0c             	sub    $0xc,%esp
c0102b22:	6a f7                	push   $0xfffffff7
c0102b24:	e8 63 6c 00 00       	call   c010978c <do_exit>
c0102b29:	83 c4 10             	add    $0x10,%esp
            }
            if (current->need_resched) {
c0102b2c:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c0102b31:	8b 40 10             	mov    0x10(%eax),%eax
c0102b34:	85 c0                	test   %eax,%eax
c0102b36:	74 05                	je     c0102b3d <trap+0x92>
                // cprintf("calling schedule()...\n");
                schedule();
c0102b38:	e8 c9 7c 00 00       	call   c010a806 <schedule>
            }
        }
    }
}
c0102b3d:	90                   	nop
c0102b3e:	c9                   	leave  
c0102b3f:	c3                   	ret    

c0102b40 <vector0>:
# handler
.text
.globl __alltraps
.globl vector0
vector0:
  pushl $0
c0102b40:	6a 00                	push   $0x0
  pushl $0
c0102b42:	6a 00                	push   $0x0
  jmp __alltraps
c0102b44:	e9 69 0a 00 00       	jmp    c01035b2 <__alltraps>

c0102b49 <vector1>:
.globl vector1
vector1:
  pushl $0
c0102b49:	6a 00                	push   $0x0
  pushl $1
c0102b4b:	6a 01                	push   $0x1
  jmp __alltraps
c0102b4d:	e9 60 0a 00 00       	jmp    c01035b2 <__alltraps>

c0102b52 <vector2>:
.globl vector2
vector2:
  pushl $0
c0102b52:	6a 00                	push   $0x0
  pushl $2
c0102b54:	6a 02                	push   $0x2
  jmp __alltraps
c0102b56:	e9 57 0a 00 00       	jmp    c01035b2 <__alltraps>

c0102b5b <vector3>:
.globl vector3
vector3:
  pushl $0
c0102b5b:	6a 00                	push   $0x0
  pushl $3
c0102b5d:	6a 03                	push   $0x3
  jmp __alltraps
c0102b5f:	e9 4e 0a 00 00       	jmp    c01035b2 <__alltraps>

c0102b64 <vector4>:
.globl vector4
vector4:
  pushl $0
c0102b64:	6a 00                	push   $0x0
  pushl $4
c0102b66:	6a 04                	push   $0x4
  jmp __alltraps
c0102b68:	e9 45 0a 00 00       	jmp    c01035b2 <__alltraps>

c0102b6d <vector5>:
.globl vector5
vector5:
  pushl $0
c0102b6d:	6a 00                	push   $0x0
  pushl $5
c0102b6f:	6a 05                	push   $0x5
  jmp __alltraps
c0102b71:	e9 3c 0a 00 00       	jmp    c01035b2 <__alltraps>

c0102b76 <vector6>:
.globl vector6
vector6:
  pushl $0
c0102b76:	6a 00                	push   $0x0
  pushl $6
c0102b78:	6a 06                	push   $0x6
  jmp __alltraps
c0102b7a:	e9 33 0a 00 00       	jmp    c01035b2 <__alltraps>

c0102b7f <vector7>:
.globl vector7
vector7:
  pushl $0
c0102b7f:	6a 00                	push   $0x0
  pushl $7
c0102b81:	6a 07                	push   $0x7
  jmp __alltraps
c0102b83:	e9 2a 0a 00 00       	jmp    c01035b2 <__alltraps>

c0102b88 <vector8>:
.globl vector8
vector8:
  pushl $8
c0102b88:	6a 08                	push   $0x8
  jmp __alltraps
c0102b8a:	e9 23 0a 00 00       	jmp    c01035b2 <__alltraps>

c0102b8f <vector9>:
.globl vector9
vector9:
  pushl $0
c0102b8f:	6a 00                	push   $0x0
  pushl $9
c0102b91:	6a 09                	push   $0x9
  jmp __alltraps
c0102b93:	e9 1a 0a 00 00       	jmp    c01035b2 <__alltraps>

c0102b98 <vector10>:
.globl vector10
vector10:
  pushl $10
c0102b98:	6a 0a                	push   $0xa
  jmp __alltraps
c0102b9a:	e9 13 0a 00 00       	jmp    c01035b2 <__alltraps>

c0102b9f <vector11>:
.globl vector11
vector11:
  pushl $11
c0102b9f:	6a 0b                	push   $0xb
  jmp __alltraps
c0102ba1:	e9 0c 0a 00 00       	jmp    c01035b2 <__alltraps>

c0102ba6 <vector12>:
.globl vector12
vector12:
  pushl $12
c0102ba6:	6a 0c                	push   $0xc
  jmp __alltraps
c0102ba8:	e9 05 0a 00 00       	jmp    c01035b2 <__alltraps>

c0102bad <vector13>:
.globl vector13
vector13:
  pushl $13
c0102bad:	6a 0d                	push   $0xd
  jmp __alltraps
c0102baf:	e9 fe 09 00 00       	jmp    c01035b2 <__alltraps>

c0102bb4 <vector14>:
.globl vector14
vector14:
  pushl $14
c0102bb4:	6a 0e                	push   $0xe
  jmp __alltraps
c0102bb6:	e9 f7 09 00 00       	jmp    c01035b2 <__alltraps>

c0102bbb <vector15>:
.globl vector15
vector15:
  pushl $0
c0102bbb:	6a 00                	push   $0x0
  pushl $15
c0102bbd:	6a 0f                	push   $0xf
  jmp __alltraps
c0102bbf:	e9 ee 09 00 00       	jmp    c01035b2 <__alltraps>

c0102bc4 <vector16>:
.globl vector16
vector16:
  pushl $0
c0102bc4:	6a 00                	push   $0x0
  pushl $16
c0102bc6:	6a 10                	push   $0x10
  jmp __alltraps
c0102bc8:	e9 e5 09 00 00       	jmp    c01035b2 <__alltraps>

c0102bcd <vector17>:
.globl vector17
vector17:
  pushl $17
c0102bcd:	6a 11                	push   $0x11
  jmp __alltraps
c0102bcf:	e9 de 09 00 00       	jmp    c01035b2 <__alltraps>

c0102bd4 <vector18>:
.globl vector18
vector18:
  pushl $0
c0102bd4:	6a 00                	push   $0x0
  pushl $18
c0102bd6:	6a 12                	push   $0x12
  jmp __alltraps
c0102bd8:	e9 d5 09 00 00       	jmp    c01035b2 <__alltraps>

c0102bdd <vector19>:
.globl vector19
vector19:
  pushl $0
c0102bdd:	6a 00                	push   $0x0
  pushl $19
c0102bdf:	6a 13                	push   $0x13
  jmp __alltraps
c0102be1:	e9 cc 09 00 00       	jmp    c01035b2 <__alltraps>

c0102be6 <vector20>:
.globl vector20
vector20:
  pushl $0
c0102be6:	6a 00                	push   $0x0
  pushl $20
c0102be8:	6a 14                	push   $0x14
  jmp __alltraps
c0102bea:	e9 c3 09 00 00       	jmp    c01035b2 <__alltraps>

c0102bef <vector21>:
.globl vector21
vector21:
  pushl $0
c0102bef:	6a 00                	push   $0x0
  pushl $21
c0102bf1:	6a 15                	push   $0x15
  jmp __alltraps
c0102bf3:	e9 ba 09 00 00       	jmp    c01035b2 <__alltraps>

c0102bf8 <vector22>:
.globl vector22
vector22:
  pushl $0
c0102bf8:	6a 00                	push   $0x0
  pushl $22
c0102bfa:	6a 16                	push   $0x16
  jmp __alltraps
c0102bfc:	e9 b1 09 00 00       	jmp    c01035b2 <__alltraps>

c0102c01 <vector23>:
.globl vector23
vector23:
  pushl $0
c0102c01:	6a 00                	push   $0x0
  pushl $23
c0102c03:	6a 17                	push   $0x17
  jmp __alltraps
c0102c05:	e9 a8 09 00 00       	jmp    c01035b2 <__alltraps>

c0102c0a <vector24>:
.globl vector24
vector24:
  pushl $0
c0102c0a:	6a 00                	push   $0x0
  pushl $24
c0102c0c:	6a 18                	push   $0x18
  jmp __alltraps
c0102c0e:	e9 9f 09 00 00       	jmp    c01035b2 <__alltraps>

c0102c13 <vector25>:
.globl vector25
vector25:
  pushl $0
c0102c13:	6a 00                	push   $0x0
  pushl $25
c0102c15:	6a 19                	push   $0x19
  jmp __alltraps
c0102c17:	e9 96 09 00 00       	jmp    c01035b2 <__alltraps>

c0102c1c <vector26>:
.globl vector26
vector26:
  pushl $0
c0102c1c:	6a 00                	push   $0x0
  pushl $26
c0102c1e:	6a 1a                	push   $0x1a
  jmp __alltraps
c0102c20:	e9 8d 09 00 00       	jmp    c01035b2 <__alltraps>

c0102c25 <vector27>:
.globl vector27
vector27:
  pushl $0
c0102c25:	6a 00                	push   $0x0
  pushl $27
c0102c27:	6a 1b                	push   $0x1b
  jmp __alltraps
c0102c29:	e9 84 09 00 00       	jmp    c01035b2 <__alltraps>

c0102c2e <vector28>:
.globl vector28
vector28:
  pushl $0
c0102c2e:	6a 00                	push   $0x0
  pushl $28
c0102c30:	6a 1c                	push   $0x1c
  jmp __alltraps
c0102c32:	e9 7b 09 00 00       	jmp    c01035b2 <__alltraps>

c0102c37 <vector29>:
.globl vector29
vector29:
  pushl $0
c0102c37:	6a 00                	push   $0x0
  pushl $29
c0102c39:	6a 1d                	push   $0x1d
  jmp __alltraps
c0102c3b:	e9 72 09 00 00       	jmp    c01035b2 <__alltraps>

c0102c40 <vector30>:
.globl vector30
vector30:
  pushl $0
c0102c40:	6a 00                	push   $0x0
  pushl $30
c0102c42:	6a 1e                	push   $0x1e
  jmp __alltraps
c0102c44:	e9 69 09 00 00       	jmp    c01035b2 <__alltraps>

c0102c49 <vector31>:
.globl vector31
vector31:
  pushl $0
c0102c49:	6a 00                	push   $0x0
  pushl $31
c0102c4b:	6a 1f                	push   $0x1f
  jmp __alltraps
c0102c4d:	e9 60 09 00 00       	jmp    c01035b2 <__alltraps>

c0102c52 <vector32>:
.globl vector32
vector32:
  pushl $0
c0102c52:	6a 00                	push   $0x0
  pushl $32
c0102c54:	6a 20                	push   $0x20
  jmp __alltraps
c0102c56:	e9 57 09 00 00       	jmp    c01035b2 <__alltraps>

c0102c5b <vector33>:
.globl vector33
vector33:
  pushl $0
c0102c5b:	6a 00                	push   $0x0
  pushl $33
c0102c5d:	6a 21                	push   $0x21
  jmp __alltraps
c0102c5f:	e9 4e 09 00 00       	jmp    c01035b2 <__alltraps>

c0102c64 <vector34>:
.globl vector34
vector34:
  pushl $0
c0102c64:	6a 00                	push   $0x0
  pushl $34
c0102c66:	6a 22                	push   $0x22
  jmp __alltraps
c0102c68:	e9 45 09 00 00       	jmp    c01035b2 <__alltraps>

c0102c6d <vector35>:
.globl vector35
vector35:
  pushl $0
c0102c6d:	6a 00                	push   $0x0
  pushl $35
c0102c6f:	6a 23                	push   $0x23
  jmp __alltraps
c0102c71:	e9 3c 09 00 00       	jmp    c01035b2 <__alltraps>

c0102c76 <vector36>:
.globl vector36
vector36:
  pushl $0
c0102c76:	6a 00                	push   $0x0
  pushl $36
c0102c78:	6a 24                	push   $0x24
  jmp __alltraps
c0102c7a:	e9 33 09 00 00       	jmp    c01035b2 <__alltraps>

c0102c7f <vector37>:
.globl vector37
vector37:
  pushl $0
c0102c7f:	6a 00                	push   $0x0
  pushl $37
c0102c81:	6a 25                	push   $0x25
  jmp __alltraps
c0102c83:	e9 2a 09 00 00       	jmp    c01035b2 <__alltraps>

c0102c88 <vector38>:
.globl vector38
vector38:
  pushl $0
c0102c88:	6a 00                	push   $0x0
  pushl $38
c0102c8a:	6a 26                	push   $0x26
  jmp __alltraps
c0102c8c:	e9 21 09 00 00       	jmp    c01035b2 <__alltraps>

c0102c91 <vector39>:
.globl vector39
vector39:
  pushl $0
c0102c91:	6a 00                	push   $0x0
  pushl $39
c0102c93:	6a 27                	push   $0x27
  jmp __alltraps
c0102c95:	e9 18 09 00 00       	jmp    c01035b2 <__alltraps>

c0102c9a <vector40>:
.globl vector40
vector40:
  pushl $0
c0102c9a:	6a 00                	push   $0x0
  pushl $40
c0102c9c:	6a 28                	push   $0x28
  jmp __alltraps
c0102c9e:	e9 0f 09 00 00       	jmp    c01035b2 <__alltraps>

c0102ca3 <vector41>:
.globl vector41
vector41:
  pushl $0
c0102ca3:	6a 00                	push   $0x0
  pushl $41
c0102ca5:	6a 29                	push   $0x29
  jmp __alltraps
c0102ca7:	e9 06 09 00 00       	jmp    c01035b2 <__alltraps>

c0102cac <vector42>:
.globl vector42
vector42:
  pushl $0
c0102cac:	6a 00                	push   $0x0
  pushl $42
c0102cae:	6a 2a                	push   $0x2a
  jmp __alltraps
c0102cb0:	e9 fd 08 00 00       	jmp    c01035b2 <__alltraps>

c0102cb5 <vector43>:
.globl vector43
vector43:
  pushl $0
c0102cb5:	6a 00                	push   $0x0
  pushl $43
c0102cb7:	6a 2b                	push   $0x2b
  jmp __alltraps
c0102cb9:	e9 f4 08 00 00       	jmp    c01035b2 <__alltraps>

c0102cbe <vector44>:
.globl vector44
vector44:
  pushl $0
c0102cbe:	6a 00                	push   $0x0
  pushl $44
c0102cc0:	6a 2c                	push   $0x2c
  jmp __alltraps
c0102cc2:	e9 eb 08 00 00       	jmp    c01035b2 <__alltraps>

c0102cc7 <vector45>:
.globl vector45
vector45:
  pushl $0
c0102cc7:	6a 00                	push   $0x0
  pushl $45
c0102cc9:	6a 2d                	push   $0x2d
  jmp __alltraps
c0102ccb:	e9 e2 08 00 00       	jmp    c01035b2 <__alltraps>

c0102cd0 <vector46>:
.globl vector46
vector46:
  pushl $0
c0102cd0:	6a 00                	push   $0x0
  pushl $46
c0102cd2:	6a 2e                	push   $0x2e
  jmp __alltraps
c0102cd4:	e9 d9 08 00 00       	jmp    c01035b2 <__alltraps>

c0102cd9 <vector47>:
.globl vector47
vector47:
  pushl $0
c0102cd9:	6a 00                	push   $0x0
  pushl $47
c0102cdb:	6a 2f                	push   $0x2f
  jmp __alltraps
c0102cdd:	e9 d0 08 00 00       	jmp    c01035b2 <__alltraps>

c0102ce2 <vector48>:
.globl vector48
vector48:
  pushl $0
c0102ce2:	6a 00                	push   $0x0
  pushl $48
c0102ce4:	6a 30                	push   $0x30
  jmp __alltraps
c0102ce6:	e9 c7 08 00 00       	jmp    c01035b2 <__alltraps>

c0102ceb <vector49>:
.globl vector49
vector49:
  pushl $0
c0102ceb:	6a 00                	push   $0x0
  pushl $49
c0102ced:	6a 31                	push   $0x31
  jmp __alltraps
c0102cef:	e9 be 08 00 00       	jmp    c01035b2 <__alltraps>

c0102cf4 <vector50>:
.globl vector50
vector50:
  pushl $0
c0102cf4:	6a 00                	push   $0x0
  pushl $50
c0102cf6:	6a 32                	push   $0x32
  jmp __alltraps
c0102cf8:	e9 b5 08 00 00       	jmp    c01035b2 <__alltraps>

c0102cfd <vector51>:
.globl vector51
vector51:
  pushl $0
c0102cfd:	6a 00                	push   $0x0
  pushl $51
c0102cff:	6a 33                	push   $0x33
  jmp __alltraps
c0102d01:	e9 ac 08 00 00       	jmp    c01035b2 <__alltraps>

c0102d06 <vector52>:
.globl vector52
vector52:
  pushl $0
c0102d06:	6a 00                	push   $0x0
  pushl $52
c0102d08:	6a 34                	push   $0x34
  jmp __alltraps
c0102d0a:	e9 a3 08 00 00       	jmp    c01035b2 <__alltraps>

c0102d0f <vector53>:
.globl vector53
vector53:
  pushl $0
c0102d0f:	6a 00                	push   $0x0
  pushl $53
c0102d11:	6a 35                	push   $0x35
  jmp __alltraps
c0102d13:	e9 9a 08 00 00       	jmp    c01035b2 <__alltraps>

c0102d18 <vector54>:
.globl vector54
vector54:
  pushl $0
c0102d18:	6a 00                	push   $0x0
  pushl $54
c0102d1a:	6a 36                	push   $0x36
  jmp __alltraps
c0102d1c:	e9 91 08 00 00       	jmp    c01035b2 <__alltraps>

c0102d21 <vector55>:
.globl vector55
vector55:
  pushl $0
c0102d21:	6a 00                	push   $0x0
  pushl $55
c0102d23:	6a 37                	push   $0x37
  jmp __alltraps
c0102d25:	e9 88 08 00 00       	jmp    c01035b2 <__alltraps>

c0102d2a <vector56>:
.globl vector56
vector56:
  pushl $0
c0102d2a:	6a 00                	push   $0x0
  pushl $56
c0102d2c:	6a 38                	push   $0x38
  jmp __alltraps
c0102d2e:	e9 7f 08 00 00       	jmp    c01035b2 <__alltraps>

c0102d33 <vector57>:
.globl vector57
vector57:
  pushl $0
c0102d33:	6a 00                	push   $0x0
  pushl $57
c0102d35:	6a 39                	push   $0x39
  jmp __alltraps
c0102d37:	e9 76 08 00 00       	jmp    c01035b2 <__alltraps>

c0102d3c <vector58>:
.globl vector58
vector58:
  pushl $0
c0102d3c:	6a 00                	push   $0x0
  pushl $58
c0102d3e:	6a 3a                	push   $0x3a
  jmp __alltraps
c0102d40:	e9 6d 08 00 00       	jmp    c01035b2 <__alltraps>

c0102d45 <vector59>:
.globl vector59
vector59:
  pushl $0
c0102d45:	6a 00                	push   $0x0
  pushl $59
c0102d47:	6a 3b                	push   $0x3b
  jmp __alltraps
c0102d49:	e9 64 08 00 00       	jmp    c01035b2 <__alltraps>

c0102d4e <vector60>:
.globl vector60
vector60:
  pushl $0
c0102d4e:	6a 00                	push   $0x0
  pushl $60
c0102d50:	6a 3c                	push   $0x3c
  jmp __alltraps
c0102d52:	e9 5b 08 00 00       	jmp    c01035b2 <__alltraps>

c0102d57 <vector61>:
.globl vector61
vector61:
  pushl $0
c0102d57:	6a 00                	push   $0x0
  pushl $61
c0102d59:	6a 3d                	push   $0x3d
  jmp __alltraps
c0102d5b:	e9 52 08 00 00       	jmp    c01035b2 <__alltraps>

c0102d60 <vector62>:
.globl vector62
vector62:
  pushl $0
c0102d60:	6a 00                	push   $0x0
  pushl $62
c0102d62:	6a 3e                	push   $0x3e
  jmp __alltraps
c0102d64:	e9 49 08 00 00       	jmp    c01035b2 <__alltraps>

c0102d69 <vector63>:
.globl vector63
vector63:
  pushl $0
c0102d69:	6a 00                	push   $0x0
  pushl $63
c0102d6b:	6a 3f                	push   $0x3f
  jmp __alltraps
c0102d6d:	e9 40 08 00 00       	jmp    c01035b2 <__alltraps>

c0102d72 <vector64>:
.globl vector64
vector64:
  pushl $0
c0102d72:	6a 00                	push   $0x0
  pushl $64
c0102d74:	6a 40                	push   $0x40
  jmp __alltraps
c0102d76:	e9 37 08 00 00       	jmp    c01035b2 <__alltraps>

c0102d7b <vector65>:
.globl vector65
vector65:
  pushl $0
c0102d7b:	6a 00                	push   $0x0
  pushl $65
c0102d7d:	6a 41                	push   $0x41
  jmp __alltraps
c0102d7f:	e9 2e 08 00 00       	jmp    c01035b2 <__alltraps>

c0102d84 <vector66>:
.globl vector66
vector66:
  pushl $0
c0102d84:	6a 00                	push   $0x0
  pushl $66
c0102d86:	6a 42                	push   $0x42
  jmp __alltraps
c0102d88:	e9 25 08 00 00       	jmp    c01035b2 <__alltraps>

c0102d8d <vector67>:
.globl vector67
vector67:
  pushl $0
c0102d8d:	6a 00                	push   $0x0
  pushl $67
c0102d8f:	6a 43                	push   $0x43
  jmp __alltraps
c0102d91:	e9 1c 08 00 00       	jmp    c01035b2 <__alltraps>

c0102d96 <vector68>:
.globl vector68
vector68:
  pushl $0
c0102d96:	6a 00                	push   $0x0
  pushl $68
c0102d98:	6a 44                	push   $0x44
  jmp __alltraps
c0102d9a:	e9 13 08 00 00       	jmp    c01035b2 <__alltraps>

c0102d9f <vector69>:
.globl vector69
vector69:
  pushl $0
c0102d9f:	6a 00                	push   $0x0
  pushl $69
c0102da1:	6a 45                	push   $0x45
  jmp __alltraps
c0102da3:	e9 0a 08 00 00       	jmp    c01035b2 <__alltraps>

c0102da8 <vector70>:
.globl vector70
vector70:
  pushl $0
c0102da8:	6a 00                	push   $0x0
  pushl $70
c0102daa:	6a 46                	push   $0x46
  jmp __alltraps
c0102dac:	e9 01 08 00 00       	jmp    c01035b2 <__alltraps>

c0102db1 <vector71>:
.globl vector71
vector71:
  pushl $0
c0102db1:	6a 00                	push   $0x0
  pushl $71
c0102db3:	6a 47                	push   $0x47
  jmp __alltraps
c0102db5:	e9 f8 07 00 00       	jmp    c01035b2 <__alltraps>

c0102dba <vector72>:
.globl vector72
vector72:
  pushl $0
c0102dba:	6a 00                	push   $0x0
  pushl $72
c0102dbc:	6a 48                	push   $0x48
  jmp __alltraps
c0102dbe:	e9 ef 07 00 00       	jmp    c01035b2 <__alltraps>

c0102dc3 <vector73>:
.globl vector73
vector73:
  pushl $0
c0102dc3:	6a 00                	push   $0x0
  pushl $73
c0102dc5:	6a 49                	push   $0x49
  jmp __alltraps
c0102dc7:	e9 e6 07 00 00       	jmp    c01035b2 <__alltraps>

c0102dcc <vector74>:
.globl vector74
vector74:
  pushl $0
c0102dcc:	6a 00                	push   $0x0
  pushl $74
c0102dce:	6a 4a                	push   $0x4a
  jmp __alltraps
c0102dd0:	e9 dd 07 00 00       	jmp    c01035b2 <__alltraps>

c0102dd5 <vector75>:
.globl vector75
vector75:
  pushl $0
c0102dd5:	6a 00                	push   $0x0
  pushl $75
c0102dd7:	6a 4b                	push   $0x4b
  jmp __alltraps
c0102dd9:	e9 d4 07 00 00       	jmp    c01035b2 <__alltraps>

c0102dde <vector76>:
.globl vector76
vector76:
  pushl $0
c0102dde:	6a 00                	push   $0x0
  pushl $76
c0102de0:	6a 4c                	push   $0x4c
  jmp __alltraps
c0102de2:	e9 cb 07 00 00       	jmp    c01035b2 <__alltraps>

c0102de7 <vector77>:
.globl vector77
vector77:
  pushl $0
c0102de7:	6a 00                	push   $0x0
  pushl $77
c0102de9:	6a 4d                	push   $0x4d
  jmp __alltraps
c0102deb:	e9 c2 07 00 00       	jmp    c01035b2 <__alltraps>

c0102df0 <vector78>:
.globl vector78
vector78:
  pushl $0
c0102df0:	6a 00                	push   $0x0
  pushl $78
c0102df2:	6a 4e                	push   $0x4e
  jmp __alltraps
c0102df4:	e9 b9 07 00 00       	jmp    c01035b2 <__alltraps>

c0102df9 <vector79>:
.globl vector79
vector79:
  pushl $0
c0102df9:	6a 00                	push   $0x0
  pushl $79
c0102dfb:	6a 4f                	push   $0x4f
  jmp __alltraps
c0102dfd:	e9 b0 07 00 00       	jmp    c01035b2 <__alltraps>

c0102e02 <vector80>:
.globl vector80
vector80:
  pushl $0
c0102e02:	6a 00                	push   $0x0
  pushl $80
c0102e04:	6a 50                	push   $0x50
  jmp __alltraps
c0102e06:	e9 a7 07 00 00       	jmp    c01035b2 <__alltraps>

c0102e0b <vector81>:
.globl vector81
vector81:
  pushl $0
c0102e0b:	6a 00                	push   $0x0
  pushl $81
c0102e0d:	6a 51                	push   $0x51
  jmp __alltraps
c0102e0f:	e9 9e 07 00 00       	jmp    c01035b2 <__alltraps>

c0102e14 <vector82>:
.globl vector82
vector82:
  pushl $0
c0102e14:	6a 00                	push   $0x0
  pushl $82
c0102e16:	6a 52                	push   $0x52
  jmp __alltraps
c0102e18:	e9 95 07 00 00       	jmp    c01035b2 <__alltraps>

c0102e1d <vector83>:
.globl vector83
vector83:
  pushl $0
c0102e1d:	6a 00                	push   $0x0
  pushl $83
c0102e1f:	6a 53                	push   $0x53
  jmp __alltraps
c0102e21:	e9 8c 07 00 00       	jmp    c01035b2 <__alltraps>

c0102e26 <vector84>:
.globl vector84
vector84:
  pushl $0
c0102e26:	6a 00                	push   $0x0
  pushl $84
c0102e28:	6a 54                	push   $0x54
  jmp __alltraps
c0102e2a:	e9 83 07 00 00       	jmp    c01035b2 <__alltraps>

c0102e2f <vector85>:
.globl vector85
vector85:
  pushl $0
c0102e2f:	6a 00                	push   $0x0
  pushl $85
c0102e31:	6a 55                	push   $0x55
  jmp __alltraps
c0102e33:	e9 7a 07 00 00       	jmp    c01035b2 <__alltraps>

c0102e38 <vector86>:
.globl vector86
vector86:
  pushl $0
c0102e38:	6a 00                	push   $0x0
  pushl $86
c0102e3a:	6a 56                	push   $0x56
  jmp __alltraps
c0102e3c:	e9 71 07 00 00       	jmp    c01035b2 <__alltraps>

c0102e41 <vector87>:
.globl vector87
vector87:
  pushl $0
c0102e41:	6a 00                	push   $0x0
  pushl $87
c0102e43:	6a 57                	push   $0x57
  jmp __alltraps
c0102e45:	e9 68 07 00 00       	jmp    c01035b2 <__alltraps>

c0102e4a <vector88>:
.globl vector88
vector88:
  pushl $0
c0102e4a:	6a 00                	push   $0x0
  pushl $88
c0102e4c:	6a 58                	push   $0x58
  jmp __alltraps
c0102e4e:	e9 5f 07 00 00       	jmp    c01035b2 <__alltraps>

c0102e53 <vector89>:
.globl vector89
vector89:
  pushl $0
c0102e53:	6a 00                	push   $0x0
  pushl $89
c0102e55:	6a 59                	push   $0x59
  jmp __alltraps
c0102e57:	e9 56 07 00 00       	jmp    c01035b2 <__alltraps>

c0102e5c <vector90>:
.globl vector90
vector90:
  pushl $0
c0102e5c:	6a 00                	push   $0x0
  pushl $90
c0102e5e:	6a 5a                	push   $0x5a
  jmp __alltraps
c0102e60:	e9 4d 07 00 00       	jmp    c01035b2 <__alltraps>

c0102e65 <vector91>:
.globl vector91
vector91:
  pushl $0
c0102e65:	6a 00                	push   $0x0
  pushl $91
c0102e67:	6a 5b                	push   $0x5b
  jmp __alltraps
c0102e69:	e9 44 07 00 00       	jmp    c01035b2 <__alltraps>

c0102e6e <vector92>:
.globl vector92
vector92:
  pushl $0
c0102e6e:	6a 00                	push   $0x0
  pushl $92
c0102e70:	6a 5c                	push   $0x5c
  jmp __alltraps
c0102e72:	e9 3b 07 00 00       	jmp    c01035b2 <__alltraps>

c0102e77 <vector93>:
.globl vector93
vector93:
  pushl $0
c0102e77:	6a 00                	push   $0x0
  pushl $93
c0102e79:	6a 5d                	push   $0x5d
  jmp __alltraps
c0102e7b:	e9 32 07 00 00       	jmp    c01035b2 <__alltraps>

c0102e80 <vector94>:
.globl vector94
vector94:
  pushl $0
c0102e80:	6a 00                	push   $0x0
  pushl $94
c0102e82:	6a 5e                	push   $0x5e
  jmp __alltraps
c0102e84:	e9 29 07 00 00       	jmp    c01035b2 <__alltraps>

c0102e89 <vector95>:
.globl vector95
vector95:
  pushl $0
c0102e89:	6a 00                	push   $0x0
  pushl $95
c0102e8b:	6a 5f                	push   $0x5f
  jmp __alltraps
c0102e8d:	e9 20 07 00 00       	jmp    c01035b2 <__alltraps>

c0102e92 <vector96>:
.globl vector96
vector96:
  pushl $0
c0102e92:	6a 00                	push   $0x0
  pushl $96
c0102e94:	6a 60                	push   $0x60
  jmp __alltraps
c0102e96:	e9 17 07 00 00       	jmp    c01035b2 <__alltraps>

c0102e9b <vector97>:
.globl vector97
vector97:
  pushl $0
c0102e9b:	6a 00                	push   $0x0
  pushl $97
c0102e9d:	6a 61                	push   $0x61
  jmp __alltraps
c0102e9f:	e9 0e 07 00 00       	jmp    c01035b2 <__alltraps>

c0102ea4 <vector98>:
.globl vector98
vector98:
  pushl $0
c0102ea4:	6a 00                	push   $0x0
  pushl $98
c0102ea6:	6a 62                	push   $0x62
  jmp __alltraps
c0102ea8:	e9 05 07 00 00       	jmp    c01035b2 <__alltraps>

c0102ead <vector99>:
.globl vector99
vector99:
  pushl $0
c0102ead:	6a 00                	push   $0x0
  pushl $99
c0102eaf:	6a 63                	push   $0x63
  jmp __alltraps
c0102eb1:	e9 fc 06 00 00       	jmp    c01035b2 <__alltraps>

c0102eb6 <vector100>:
.globl vector100
vector100:
  pushl $0
c0102eb6:	6a 00                	push   $0x0
  pushl $100
c0102eb8:	6a 64                	push   $0x64
  jmp __alltraps
c0102eba:	e9 f3 06 00 00       	jmp    c01035b2 <__alltraps>

c0102ebf <vector101>:
.globl vector101
vector101:
  pushl $0
c0102ebf:	6a 00                	push   $0x0
  pushl $101
c0102ec1:	6a 65                	push   $0x65
  jmp __alltraps
c0102ec3:	e9 ea 06 00 00       	jmp    c01035b2 <__alltraps>

c0102ec8 <vector102>:
.globl vector102
vector102:
  pushl $0
c0102ec8:	6a 00                	push   $0x0
  pushl $102
c0102eca:	6a 66                	push   $0x66
  jmp __alltraps
c0102ecc:	e9 e1 06 00 00       	jmp    c01035b2 <__alltraps>

c0102ed1 <vector103>:
.globl vector103
vector103:
  pushl $0
c0102ed1:	6a 00                	push   $0x0
  pushl $103
c0102ed3:	6a 67                	push   $0x67
  jmp __alltraps
c0102ed5:	e9 d8 06 00 00       	jmp    c01035b2 <__alltraps>

c0102eda <vector104>:
.globl vector104
vector104:
  pushl $0
c0102eda:	6a 00                	push   $0x0
  pushl $104
c0102edc:	6a 68                	push   $0x68
  jmp __alltraps
c0102ede:	e9 cf 06 00 00       	jmp    c01035b2 <__alltraps>

c0102ee3 <vector105>:
.globl vector105
vector105:
  pushl $0
c0102ee3:	6a 00                	push   $0x0
  pushl $105
c0102ee5:	6a 69                	push   $0x69
  jmp __alltraps
c0102ee7:	e9 c6 06 00 00       	jmp    c01035b2 <__alltraps>

c0102eec <vector106>:
.globl vector106
vector106:
  pushl $0
c0102eec:	6a 00                	push   $0x0
  pushl $106
c0102eee:	6a 6a                	push   $0x6a
  jmp __alltraps
c0102ef0:	e9 bd 06 00 00       	jmp    c01035b2 <__alltraps>

c0102ef5 <vector107>:
.globl vector107
vector107:
  pushl $0
c0102ef5:	6a 00                	push   $0x0
  pushl $107
c0102ef7:	6a 6b                	push   $0x6b
  jmp __alltraps
c0102ef9:	e9 b4 06 00 00       	jmp    c01035b2 <__alltraps>

c0102efe <vector108>:
.globl vector108
vector108:
  pushl $0
c0102efe:	6a 00                	push   $0x0
  pushl $108
c0102f00:	6a 6c                	push   $0x6c
  jmp __alltraps
c0102f02:	e9 ab 06 00 00       	jmp    c01035b2 <__alltraps>

c0102f07 <vector109>:
.globl vector109
vector109:
  pushl $0
c0102f07:	6a 00                	push   $0x0
  pushl $109
c0102f09:	6a 6d                	push   $0x6d
  jmp __alltraps
c0102f0b:	e9 a2 06 00 00       	jmp    c01035b2 <__alltraps>

c0102f10 <vector110>:
.globl vector110
vector110:
  pushl $0
c0102f10:	6a 00                	push   $0x0
  pushl $110
c0102f12:	6a 6e                	push   $0x6e
  jmp __alltraps
c0102f14:	e9 99 06 00 00       	jmp    c01035b2 <__alltraps>

c0102f19 <vector111>:
.globl vector111
vector111:
  pushl $0
c0102f19:	6a 00                	push   $0x0
  pushl $111
c0102f1b:	6a 6f                	push   $0x6f
  jmp __alltraps
c0102f1d:	e9 90 06 00 00       	jmp    c01035b2 <__alltraps>

c0102f22 <vector112>:
.globl vector112
vector112:
  pushl $0
c0102f22:	6a 00                	push   $0x0
  pushl $112
c0102f24:	6a 70                	push   $0x70
  jmp __alltraps
c0102f26:	e9 87 06 00 00       	jmp    c01035b2 <__alltraps>

c0102f2b <vector113>:
.globl vector113
vector113:
  pushl $0
c0102f2b:	6a 00                	push   $0x0
  pushl $113
c0102f2d:	6a 71                	push   $0x71
  jmp __alltraps
c0102f2f:	e9 7e 06 00 00       	jmp    c01035b2 <__alltraps>

c0102f34 <vector114>:
.globl vector114
vector114:
  pushl $0
c0102f34:	6a 00                	push   $0x0
  pushl $114
c0102f36:	6a 72                	push   $0x72
  jmp __alltraps
c0102f38:	e9 75 06 00 00       	jmp    c01035b2 <__alltraps>

c0102f3d <vector115>:
.globl vector115
vector115:
  pushl $0
c0102f3d:	6a 00                	push   $0x0
  pushl $115
c0102f3f:	6a 73                	push   $0x73
  jmp __alltraps
c0102f41:	e9 6c 06 00 00       	jmp    c01035b2 <__alltraps>

c0102f46 <vector116>:
.globl vector116
vector116:
  pushl $0
c0102f46:	6a 00                	push   $0x0
  pushl $116
c0102f48:	6a 74                	push   $0x74
  jmp __alltraps
c0102f4a:	e9 63 06 00 00       	jmp    c01035b2 <__alltraps>

c0102f4f <vector117>:
.globl vector117
vector117:
  pushl $0
c0102f4f:	6a 00                	push   $0x0
  pushl $117
c0102f51:	6a 75                	push   $0x75
  jmp __alltraps
c0102f53:	e9 5a 06 00 00       	jmp    c01035b2 <__alltraps>

c0102f58 <vector118>:
.globl vector118
vector118:
  pushl $0
c0102f58:	6a 00                	push   $0x0
  pushl $118
c0102f5a:	6a 76                	push   $0x76
  jmp __alltraps
c0102f5c:	e9 51 06 00 00       	jmp    c01035b2 <__alltraps>

c0102f61 <vector119>:
.globl vector119
vector119:
  pushl $0
c0102f61:	6a 00                	push   $0x0
  pushl $119
c0102f63:	6a 77                	push   $0x77
  jmp __alltraps
c0102f65:	e9 48 06 00 00       	jmp    c01035b2 <__alltraps>

c0102f6a <vector120>:
.globl vector120
vector120:
  pushl $0
c0102f6a:	6a 00                	push   $0x0
  pushl $120
c0102f6c:	6a 78                	push   $0x78
  jmp __alltraps
c0102f6e:	e9 3f 06 00 00       	jmp    c01035b2 <__alltraps>

c0102f73 <vector121>:
.globl vector121
vector121:
  pushl $0
c0102f73:	6a 00                	push   $0x0
  pushl $121
c0102f75:	6a 79                	push   $0x79
  jmp __alltraps
c0102f77:	e9 36 06 00 00       	jmp    c01035b2 <__alltraps>

c0102f7c <vector122>:
.globl vector122
vector122:
  pushl $0
c0102f7c:	6a 00                	push   $0x0
  pushl $122
c0102f7e:	6a 7a                	push   $0x7a
  jmp __alltraps
c0102f80:	e9 2d 06 00 00       	jmp    c01035b2 <__alltraps>

c0102f85 <vector123>:
.globl vector123
vector123:
  pushl $0
c0102f85:	6a 00                	push   $0x0
  pushl $123
c0102f87:	6a 7b                	push   $0x7b
  jmp __alltraps
c0102f89:	e9 24 06 00 00       	jmp    c01035b2 <__alltraps>

c0102f8e <vector124>:
.globl vector124
vector124:
  pushl $0
c0102f8e:	6a 00                	push   $0x0
  pushl $124
c0102f90:	6a 7c                	push   $0x7c
  jmp __alltraps
c0102f92:	e9 1b 06 00 00       	jmp    c01035b2 <__alltraps>

c0102f97 <vector125>:
.globl vector125
vector125:
  pushl $0
c0102f97:	6a 00                	push   $0x0
  pushl $125
c0102f99:	6a 7d                	push   $0x7d
  jmp __alltraps
c0102f9b:	e9 12 06 00 00       	jmp    c01035b2 <__alltraps>

c0102fa0 <vector126>:
.globl vector126
vector126:
  pushl $0
c0102fa0:	6a 00                	push   $0x0
  pushl $126
c0102fa2:	6a 7e                	push   $0x7e
  jmp __alltraps
c0102fa4:	e9 09 06 00 00       	jmp    c01035b2 <__alltraps>

c0102fa9 <vector127>:
.globl vector127
vector127:
  pushl $0
c0102fa9:	6a 00                	push   $0x0
  pushl $127
c0102fab:	6a 7f                	push   $0x7f
  jmp __alltraps
c0102fad:	e9 00 06 00 00       	jmp    c01035b2 <__alltraps>

c0102fb2 <vector128>:
.globl vector128
vector128:
  pushl $0
c0102fb2:	6a 00                	push   $0x0
  pushl $128
c0102fb4:	68 80 00 00 00       	push   $0x80
  jmp __alltraps
c0102fb9:	e9 f4 05 00 00       	jmp    c01035b2 <__alltraps>

c0102fbe <vector129>:
.globl vector129
vector129:
  pushl $0
c0102fbe:	6a 00                	push   $0x0
  pushl $129
c0102fc0:	68 81 00 00 00       	push   $0x81
  jmp __alltraps
c0102fc5:	e9 e8 05 00 00       	jmp    c01035b2 <__alltraps>

c0102fca <vector130>:
.globl vector130
vector130:
  pushl $0
c0102fca:	6a 00                	push   $0x0
  pushl $130
c0102fcc:	68 82 00 00 00       	push   $0x82
  jmp __alltraps
c0102fd1:	e9 dc 05 00 00       	jmp    c01035b2 <__alltraps>

c0102fd6 <vector131>:
.globl vector131
vector131:
  pushl $0
c0102fd6:	6a 00                	push   $0x0
  pushl $131
c0102fd8:	68 83 00 00 00       	push   $0x83
  jmp __alltraps
c0102fdd:	e9 d0 05 00 00       	jmp    c01035b2 <__alltraps>

c0102fe2 <vector132>:
.globl vector132
vector132:
  pushl $0
c0102fe2:	6a 00                	push   $0x0
  pushl $132
c0102fe4:	68 84 00 00 00       	push   $0x84
  jmp __alltraps
c0102fe9:	e9 c4 05 00 00       	jmp    c01035b2 <__alltraps>

c0102fee <vector133>:
.globl vector133
vector133:
  pushl $0
c0102fee:	6a 00                	push   $0x0
  pushl $133
c0102ff0:	68 85 00 00 00       	push   $0x85
  jmp __alltraps
c0102ff5:	e9 b8 05 00 00       	jmp    c01035b2 <__alltraps>

c0102ffa <vector134>:
.globl vector134
vector134:
  pushl $0
c0102ffa:	6a 00                	push   $0x0
  pushl $134
c0102ffc:	68 86 00 00 00       	push   $0x86
  jmp __alltraps
c0103001:	e9 ac 05 00 00       	jmp    c01035b2 <__alltraps>

c0103006 <vector135>:
.globl vector135
vector135:
  pushl $0
c0103006:	6a 00                	push   $0x0
  pushl $135
c0103008:	68 87 00 00 00       	push   $0x87
  jmp __alltraps
c010300d:	e9 a0 05 00 00       	jmp    c01035b2 <__alltraps>

c0103012 <vector136>:
.globl vector136
vector136:
  pushl $0
c0103012:	6a 00                	push   $0x0
  pushl $136
c0103014:	68 88 00 00 00       	push   $0x88
  jmp __alltraps
c0103019:	e9 94 05 00 00       	jmp    c01035b2 <__alltraps>

c010301e <vector137>:
.globl vector137
vector137:
  pushl $0
c010301e:	6a 00                	push   $0x0
  pushl $137
c0103020:	68 89 00 00 00       	push   $0x89
  jmp __alltraps
c0103025:	e9 88 05 00 00       	jmp    c01035b2 <__alltraps>

c010302a <vector138>:
.globl vector138
vector138:
  pushl $0
c010302a:	6a 00                	push   $0x0
  pushl $138
c010302c:	68 8a 00 00 00       	push   $0x8a
  jmp __alltraps
c0103031:	e9 7c 05 00 00       	jmp    c01035b2 <__alltraps>

c0103036 <vector139>:
.globl vector139
vector139:
  pushl $0
c0103036:	6a 00                	push   $0x0
  pushl $139
c0103038:	68 8b 00 00 00       	push   $0x8b
  jmp __alltraps
c010303d:	e9 70 05 00 00       	jmp    c01035b2 <__alltraps>

c0103042 <vector140>:
.globl vector140
vector140:
  pushl $0
c0103042:	6a 00                	push   $0x0
  pushl $140
c0103044:	68 8c 00 00 00       	push   $0x8c
  jmp __alltraps
c0103049:	e9 64 05 00 00       	jmp    c01035b2 <__alltraps>

c010304e <vector141>:
.globl vector141
vector141:
  pushl $0
c010304e:	6a 00                	push   $0x0
  pushl $141
c0103050:	68 8d 00 00 00       	push   $0x8d
  jmp __alltraps
c0103055:	e9 58 05 00 00       	jmp    c01035b2 <__alltraps>

c010305a <vector142>:
.globl vector142
vector142:
  pushl $0
c010305a:	6a 00                	push   $0x0
  pushl $142
c010305c:	68 8e 00 00 00       	push   $0x8e
  jmp __alltraps
c0103061:	e9 4c 05 00 00       	jmp    c01035b2 <__alltraps>

c0103066 <vector143>:
.globl vector143
vector143:
  pushl $0
c0103066:	6a 00                	push   $0x0
  pushl $143
c0103068:	68 8f 00 00 00       	push   $0x8f
  jmp __alltraps
c010306d:	e9 40 05 00 00       	jmp    c01035b2 <__alltraps>

c0103072 <vector144>:
.globl vector144
vector144:
  pushl $0
c0103072:	6a 00                	push   $0x0
  pushl $144
c0103074:	68 90 00 00 00       	push   $0x90
  jmp __alltraps
c0103079:	e9 34 05 00 00       	jmp    c01035b2 <__alltraps>

c010307e <vector145>:
.globl vector145
vector145:
  pushl $0
c010307e:	6a 00                	push   $0x0
  pushl $145
c0103080:	68 91 00 00 00       	push   $0x91
  jmp __alltraps
c0103085:	e9 28 05 00 00       	jmp    c01035b2 <__alltraps>

c010308a <vector146>:
.globl vector146
vector146:
  pushl $0
c010308a:	6a 00                	push   $0x0
  pushl $146
c010308c:	68 92 00 00 00       	push   $0x92
  jmp __alltraps
c0103091:	e9 1c 05 00 00       	jmp    c01035b2 <__alltraps>

c0103096 <vector147>:
.globl vector147
vector147:
  pushl $0
c0103096:	6a 00                	push   $0x0
  pushl $147
c0103098:	68 93 00 00 00       	push   $0x93
  jmp __alltraps
c010309d:	e9 10 05 00 00       	jmp    c01035b2 <__alltraps>

c01030a2 <vector148>:
.globl vector148
vector148:
  pushl $0
c01030a2:	6a 00                	push   $0x0
  pushl $148
c01030a4:	68 94 00 00 00       	push   $0x94
  jmp __alltraps
c01030a9:	e9 04 05 00 00       	jmp    c01035b2 <__alltraps>

c01030ae <vector149>:
.globl vector149
vector149:
  pushl $0
c01030ae:	6a 00                	push   $0x0
  pushl $149
c01030b0:	68 95 00 00 00       	push   $0x95
  jmp __alltraps
c01030b5:	e9 f8 04 00 00       	jmp    c01035b2 <__alltraps>

c01030ba <vector150>:
.globl vector150
vector150:
  pushl $0
c01030ba:	6a 00                	push   $0x0
  pushl $150
c01030bc:	68 96 00 00 00       	push   $0x96
  jmp __alltraps
c01030c1:	e9 ec 04 00 00       	jmp    c01035b2 <__alltraps>

c01030c6 <vector151>:
.globl vector151
vector151:
  pushl $0
c01030c6:	6a 00                	push   $0x0
  pushl $151
c01030c8:	68 97 00 00 00       	push   $0x97
  jmp __alltraps
c01030cd:	e9 e0 04 00 00       	jmp    c01035b2 <__alltraps>

c01030d2 <vector152>:
.globl vector152
vector152:
  pushl $0
c01030d2:	6a 00                	push   $0x0
  pushl $152
c01030d4:	68 98 00 00 00       	push   $0x98
  jmp __alltraps
c01030d9:	e9 d4 04 00 00       	jmp    c01035b2 <__alltraps>

c01030de <vector153>:
.globl vector153
vector153:
  pushl $0
c01030de:	6a 00                	push   $0x0
  pushl $153
c01030e0:	68 99 00 00 00       	push   $0x99
  jmp __alltraps
c01030e5:	e9 c8 04 00 00       	jmp    c01035b2 <__alltraps>

c01030ea <vector154>:
.globl vector154
vector154:
  pushl $0
c01030ea:	6a 00                	push   $0x0
  pushl $154
c01030ec:	68 9a 00 00 00       	push   $0x9a
  jmp __alltraps
c01030f1:	e9 bc 04 00 00       	jmp    c01035b2 <__alltraps>

c01030f6 <vector155>:
.globl vector155
vector155:
  pushl $0
c01030f6:	6a 00                	push   $0x0
  pushl $155
c01030f8:	68 9b 00 00 00       	push   $0x9b
  jmp __alltraps
c01030fd:	e9 b0 04 00 00       	jmp    c01035b2 <__alltraps>

c0103102 <vector156>:
.globl vector156
vector156:
  pushl $0
c0103102:	6a 00                	push   $0x0
  pushl $156
c0103104:	68 9c 00 00 00       	push   $0x9c
  jmp __alltraps
c0103109:	e9 a4 04 00 00       	jmp    c01035b2 <__alltraps>

c010310e <vector157>:
.globl vector157
vector157:
  pushl $0
c010310e:	6a 00                	push   $0x0
  pushl $157
c0103110:	68 9d 00 00 00       	push   $0x9d
  jmp __alltraps
c0103115:	e9 98 04 00 00       	jmp    c01035b2 <__alltraps>

c010311a <vector158>:
.globl vector158
vector158:
  pushl $0
c010311a:	6a 00                	push   $0x0
  pushl $158
c010311c:	68 9e 00 00 00       	push   $0x9e
  jmp __alltraps
c0103121:	e9 8c 04 00 00       	jmp    c01035b2 <__alltraps>

c0103126 <vector159>:
.globl vector159
vector159:
  pushl $0
c0103126:	6a 00                	push   $0x0
  pushl $159
c0103128:	68 9f 00 00 00       	push   $0x9f
  jmp __alltraps
c010312d:	e9 80 04 00 00       	jmp    c01035b2 <__alltraps>

c0103132 <vector160>:
.globl vector160
vector160:
  pushl $0
c0103132:	6a 00                	push   $0x0
  pushl $160
c0103134:	68 a0 00 00 00       	push   $0xa0
  jmp __alltraps
c0103139:	e9 74 04 00 00       	jmp    c01035b2 <__alltraps>

c010313e <vector161>:
.globl vector161
vector161:
  pushl $0
c010313e:	6a 00                	push   $0x0
  pushl $161
c0103140:	68 a1 00 00 00       	push   $0xa1
  jmp __alltraps
c0103145:	e9 68 04 00 00       	jmp    c01035b2 <__alltraps>

c010314a <vector162>:
.globl vector162
vector162:
  pushl $0
c010314a:	6a 00                	push   $0x0
  pushl $162
c010314c:	68 a2 00 00 00       	push   $0xa2
  jmp __alltraps
c0103151:	e9 5c 04 00 00       	jmp    c01035b2 <__alltraps>

c0103156 <vector163>:
.globl vector163
vector163:
  pushl $0
c0103156:	6a 00                	push   $0x0
  pushl $163
c0103158:	68 a3 00 00 00       	push   $0xa3
  jmp __alltraps
c010315d:	e9 50 04 00 00       	jmp    c01035b2 <__alltraps>

c0103162 <vector164>:
.globl vector164
vector164:
  pushl $0
c0103162:	6a 00                	push   $0x0
  pushl $164
c0103164:	68 a4 00 00 00       	push   $0xa4
  jmp __alltraps
c0103169:	e9 44 04 00 00       	jmp    c01035b2 <__alltraps>

c010316e <vector165>:
.globl vector165
vector165:
  pushl $0
c010316e:	6a 00                	push   $0x0
  pushl $165
c0103170:	68 a5 00 00 00       	push   $0xa5
  jmp __alltraps
c0103175:	e9 38 04 00 00       	jmp    c01035b2 <__alltraps>

c010317a <vector166>:
.globl vector166
vector166:
  pushl $0
c010317a:	6a 00                	push   $0x0
  pushl $166
c010317c:	68 a6 00 00 00       	push   $0xa6
  jmp __alltraps
c0103181:	e9 2c 04 00 00       	jmp    c01035b2 <__alltraps>

c0103186 <vector167>:
.globl vector167
vector167:
  pushl $0
c0103186:	6a 00                	push   $0x0
  pushl $167
c0103188:	68 a7 00 00 00       	push   $0xa7
  jmp __alltraps
c010318d:	e9 20 04 00 00       	jmp    c01035b2 <__alltraps>

c0103192 <vector168>:
.globl vector168
vector168:
  pushl $0
c0103192:	6a 00                	push   $0x0
  pushl $168
c0103194:	68 a8 00 00 00       	push   $0xa8
  jmp __alltraps
c0103199:	e9 14 04 00 00       	jmp    c01035b2 <__alltraps>

c010319e <vector169>:
.globl vector169
vector169:
  pushl $0
c010319e:	6a 00                	push   $0x0
  pushl $169
c01031a0:	68 a9 00 00 00       	push   $0xa9
  jmp __alltraps
c01031a5:	e9 08 04 00 00       	jmp    c01035b2 <__alltraps>

c01031aa <vector170>:
.globl vector170
vector170:
  pushl $0
c01031aa:	6a 00                	push   $0x0
  pushl $170
c01031ac:	68 aa 00 00 00       	push   $0xaa
  jmp __alltraps
c01031b1:	e9 fc 03 00 00       	jmp    c01035b2 <__alltraps>

c01031b6 <vector171>:
.globl vector171
vector171:
  pushl $0
c01031b6:	6a 00                	push   $0x0
  pushl $171
c01031b8:	68 ab 00 00 00       	push   $0xab
  jmp __alltraps
c01031bd:	e9 f0 03 00 00       	jmp    c01035b2 <__alltraps>

c01031c2 <vector172>:
.globl vector172
vector172:
  pushl $0
c01031c2:	6a 00                	push   $0x0
  pushl $172
c01031c4:	68 ac 00 00 00       	push   $0xac
  jmp __alltraps
c01031c9:	e9 e4 03 00 00       	jmp    c01035b2 <__alltraps>

c01031ce <vector173>:
.globl vector173
vector173:
  pushl $0
c01031ce:	6a 00                	push   $0x0
  pushl $173
c01031d0:	68 ad 00 00 00       	push   $0xad
  jmp __alltraps
c01031d5:	e9 d8 03 00 00       	jmp    c01035b2 <__alltraps>

c01031da <vector174>:
.globl vector174
vector174:
  pushl $0
c01031da:	6a 00                	push   $0x0
  pushl $174
c01031dc:	68 ae 00 00 00       	push   $0xae
  jmp __alltraps
c01031e1:	e9 cc 03 00 00       	jmp    c01035b2 <__alltraps>

c01031e6 <vector175>:
.globl vector175
vector175:
  pushl $0
c01031e6:	6a 00                	push   $0x0
  pushl $175
c01031e8:	68 af 00 00 00       	push   $0xaf
  jmp __alltraps
c01031ed:	e9 c0 03 00 00       	jmp    c01035b2 <__alltraps>

c01031f2 <vector176>:
.globl vector176
vector176:
  pushl $0
c01031f2:	6a 00                	push   $0x0
  pushl $176
c01031f4:	68 b0 00 00 00       	push   $0xb0
  jmp __alltraps
c01031f9:	e9 b4 03 00 00       	jmp    c01035b2 <__alltraps>

c01031fe <vector177>:
.globl vector177
vector177:
  pushl $0
c01031fe:	6a 00                	push   $0x0
  pushl $177
c0103200:	68 b1 00 00 00       	push   $0xb1
  jmp __alltraps
c0103205:	e9 a8 03 00 00       	jmp    c01035b2 <__alltraps>

c010320a <vector178>:
.globl vector178
vector178:
  pushl $0
c010320a:	6a 00                	push   $0x0
  pushl $178
c010320c:	68 b2 00 00 00       	push   $0xb2
  jmp __alltraps
c0103211:	e9 9c 03 00 00       	jmp    c01035b2 <__alltraps>

c0103216 <vector179>:
.globl vector179
vector179:
  pushl $0
c0103216:	6a 00                	push   $0x0
  pushl $179
c0103218:	68 b3 00 00 00       	push   $0xb3
  jmp __alltraps
c010321d:	e9 90 03 00 00       	jmp    c01035b2 <__alltraps>

c0103222 <vector180>:
.globl vector180
vector180:
  pushl $0
c0103222:	6a 00                	push   $0x0
  pushl $180
c0103224:	68 b4 00 00 00       	push   $0xb4
  jmp __alltraps
c0103229:	e9 84 03 00 00       	jmp    c01035b2 <__alltraps>

c010322e <vector181>:
.globl vector181
vector181:
  pushl $0
c010322e:	6a 00                	push   $0x0
  pushl $181
c0103230:	68 b5 00 00 00       	push   $0xb5
  jmp __alltraps
c0103235:	e9 78 03 00 00       	jmp    c01035b2 <__alltraps>

c010323a <vector182>:
.globl vector182
vector182:
  pushl $0
c010323a:	6a 00                	push   $0x0
  pushl $182
c010323c:	68 b6 00 00 00       	push   $0xb6
  jmp __alltraps
c0103241:	e9 6c 03 00 00       	jmp    c01035b2 <__alltraps>

c0103246 <vector183>:
.globl vector183
vector183:
  pushl $0
c0103246:	6a 00                	push   $0x0
  pushl $183
c0103248:	68 b7 00 00 00       	push   $0xb7
  jmp __alltraps
c010324d:	e9 60 03 00 00       	jmp    c01035b2 <__alltraps>

c0103252 <vector184>:
.globl vector184
vector184:
  pushl $0
c0103252:	6a 00                	push   $0x0
  pushl $184
c0103254:	68 b8 00 00 00       	push   $0xb8
  jmp __alltraps
c0103259:	e9 54 03 00 00       	jmp    c01035b2 <__alltraps>

c010325e <vector185>:
.globl vector185
vector185:
  pushl $0
c010325e:	6a 00                	push   $0x0
  pushl $185
c0103260:	68 b9 00 00 00       	push   $0xb9
  jmp __alltraps
c0103265:	e9 48 03 00 00       	jmp    c01035b2 <__alltraps>

c010326a <vector186>:
.globl vector186
vector186:
  pushl $0
c010326a:	6a 00                	push   $0x0
  pushl $186
c010326c:	68 ba 00 00 00       	push   $0xba
  jmp __alltraps
c0103271:	e9 3c 03 00 00       	jmp    c01035b2 <__alltraps>

c0103276 <vector187>:
.globl vector187
vector187:
  pushl $0
c0103276:	6a 00                	push   $0x0
  pushl $187
c0103278:	68 bb 00 00 00       	push   $0xbb
  jmp __alltraps
c010327d:	e9 30 03 00 00       	jmp    c01035b2 <__alltraps>

c0103282 <vector188>:
.globl vector188
vector188:
  pushl $0
c0103282:	6a 00                	push   $0x0
  pushl $188
c0103284:	68 bc 00 00 00       	push   $0xbc
  jmp __alltraps
c0103289:	e9 24 03 00 00       	jmp    c01035b2 <__alltraps>

c010328e <vector189>:
.globl vector189
vector189:
  pushl $0
c010328e:	6a 00                	push   $0x0
  pushl $189
c0103290:	68 bd 00 00 00       	push   $0xbd
  jmp __alltraps
c0103295:	e9 18 03 00 00       	jmp    c01035b2 <__alltraps>

c010329a <vector190>:
.globl vector190
vector190:
  pushl $0
c010329a:	6a 00                	push   $0x0
  pushl $190
c010329c:	68 be 00 00 00       	push   $0xbe
  jmp __alltraps
c01032a1:	e9 0c 03 00 00       	jmp    c01035b2 <__alltraps>

c01032a6 <vector191>:
.globl vector191
vector191:
  pushl $0
c01032a6:	6a 00                	push   $0x0
  pushl $191
c01032a8:	68 bf 00 00 00       	push   $0xbf
  jmp __alltraps
c01032ad:	e9 00 03 00 00       	jmp    c01035b2 <__alltraps>

c01032b2 <vector192>:
.globl vector192
vector192:
  pushl $0
c01032b2:	6a 00                	push   $0x0
  pushl $192
c01032b4:	68 c0 00 00 00       	push   $0xc0
  jmp __alltraps
c01032b9:	e9 f4 02 00 00       	jmp    c01035b2 <__alltraps>

c01032be <vector193>:
.globl vector193
vector193:
  pushl $0
c01032be:	6a 00                	push   $0x0
  pushl $193
c01032c0:	68 c1 00 00 00       	push   $0xc1
  jmp __alltraps
c01032c5:	e9 e8 02 00 00       	jmp    c01035b2 <__alltraps>

c01032ca <vector194>:
.globl vector194
vector194:
  pushl $0
c01032ca:	6a 00                	push   $0x0
  pushl $194
c01032cc:	68 c2 00 00 00       	push   $0xc2
  jmp __alltraps
c01032d1:	e9 dc 02 00 00       	jmp    c01035b2 <__alltraps>

c01032d6 <vector195>:
.globl vector195
vector195:
  pushl $0
c01032d6:	6a 00                	push   $0x0
  pushl $195
c01032d8:	68 c3 00 00 00       	push   $0xc3
  jmp __alltraps
c01032dd:	e9 d0 02 00 00       	jmp    c01035b2 <__alltraps>

c01032e2 <vector196>:
.globl vector196
vector196:
  pushl $0
c01032e2:	6a 00                	push   $0x0
  pushl $196
c01032e4:	68 c4 00 00 00       	push   $0xc4
  jmp __alltraps
c01032e9:	e9 c4 02 00 00       	jmp    c01035b2 <__alltraps>

c01032ee <vector197>:
.globl vector197
vector197:
  pushl $0
c01032ee:	6a 00                	push   $0x0
  pushl $197
c01032f0:	68 c5 00 00 00       	push   $0xc5
  jmp __alltraps
c01032f5:	e9 b8 02 00 00       	jmp    c01035b2 <__alltraps>

c01032fa <vector198>:
.globl vector198
vector198:
  pushl $0
c01032fa:	6a 00                	push   $0x0
  pushl $198
c01032fc:	68 c6 00 00 00       	push   $0xc6
  jmp __alltraps
c0103301:	e9 ac 02 00 00       	jmp    c01035b2 <__alltraps>

c0103306 <vector199>:
.globl vector199
vector199:
  pushl $0
c0103306:	6a 00                	push   $0x0
  pushl $199
c0103308:	68 c7 00 00 00       	push   $0xc7
  jmp __alltraps
c010330d:	e9 a0 02 00 00       	jmp    c01035b2 <__alltraps>

c0103312 <vector200>:
.globl vector200
vector200:
  pushl $0
c0103312:	6a 00                	push   $0x0
  pushl $200
c0103314:	68 c8 00 00 00       	push   $0xc8
  jmp __alltraps
c0103319:	e9 94 02 00 00       	jmp    c01035b2 <__alltraps>

c010331e <vector201>:
.globl vector201
vector201:
  pushl $0
c010331e:	6a 00                	push   $0x0
  pushl $201
c0103320:	68 c9 00 00 00       	push   $0xc9
  jmp __alltraps
c0103325:	e9 88 02 00 00       	jmp    c01035b2 <__alltraps>

c010332a <vector202>:
.globl vector202
vector202:
  pushl $0
c010332a:	6a 00                	push   $0x0
  pushl $202
c010332c:	68 ca 00 00 00       	push   $0xca
  jmp __alltraps
c0103331:	e9 7c 02 00 00       	jmp    c01035b2 <__alltraps>

c0103336 <vector203>:
.globl vector203
vector203:
  pushl $0
c0103336:	6a 00                	push   $0x0
  pushl $203
c0103338:	68 cb 00 00 00       	push   $0xcb
  jmp __alltraps
c010333d:	e9 70 02 00 00       	jmp    c01035b2 <__alltraps>

c0103342 <vector204>:
.globl vector204
vector204:
  pushl $0
c0103342:	6a 00                	push   $0x0
  pushl $204
c0103344:	68 cc 00 00 00       	push   $0xcc
  jmp __alltraps
c0103349:	e9 64 02 00 00       	jmp    c01035b2 <__alltraps>

c010334e <vector205>:
.globl vector205
vector205:
  pushl $0
c010334e:	6a 00                	push   $0x0
  pushl $205
c0103350:	68 cd 00 00 00       	push   $0xcd
  jmp __alltraps
c0103355:	e9 58 02 00 00       	jmp    c01035b2 <__alltraps>

c010335a <vector206>:
.globl vector206
vector206:
  pushl $0
c010335a:	6a 00                	push   $0x0
  pushl $206
c010335c:	68 ce 00 00 00       	push   $0xce
  jmp __alltraps
c0103361:	e9 4c 02 00 00       	jmp    c01035b2 <__alltraps>

c0103366 <vector207>:
.globl vector207
vector207:
  pushl $0
c0103366:	6a 00                	push   $0x0
  pushl $207
c0103368:	68 cf 00 00 00       	push   $0xcf
  jmp __alltraps
c010336d:	e9 40 02 00 00       	jmp    c01035b2 <__alltraps>

c0103372 <vector208>:
.globl vector208
vector208:
  pushl $0
c0103372:	6a 00                	push   $0x0
  pushl $208
c0103374:	68 d0 00 00 00       	push   $0xd0
  jmp __alltraps
c0103379:	e9 34 02 00 00       	jmp    c01035b2 <__alltraps>

c010337e <vector209>:
.globl vector209
vector209:
  pushl $0
c010337e:	6a 00                	push   $0x0
  pushl $209
c0103380:	68 d1 00 00 00       	push   $0xd1
  jmp __alltraps
c0103385:	e9 28 02 00 00       	jmp    c01035b2 <__alltraps>

c010338a <vector210>:
.globl vector210
vector210:
  pushl $0
c010338a:	6a 00                	push   $0x0
  pushl $210
c010338c:	68 d2 00 00 00       	push   $0xd2
  jmp __alltraps
c0103391:	e9 1c 02 00 00       	jmp    c01035b2 <__alltraps>

c0103396 <vector211>:
.globl vector211
vector211:
  pushl $0
c0103396:	6a 00                	push   $0x0
  pushl $211
c0103398:	68 d3 00 00 00       	push   $0xd3
  jmp __alltraps
c010339d:	e9 10 02 00 00       	jmp    c01035b2 <__alltraps>

c01033a2 <vector212>:
.globl vector212
vector212:
  pushl $0
c01033a2:	6a 00                	push   $0x0
  pushl $212
c01033a4:	68 d4 00 00 00       	push   $0xd4
  jmp __alltraps
c01033a9:	e9 04 02 00 00       	jmp    c01035b2 <__alltraps>

c01033ae <vector213>:
.globl vector213
vector213:
  pushl $0
c01033ae:	6a 00                	push   $0x0
  pushl $213
c01033b0:	68 d5 00 00 00       	push   $0xd5
  jmp __alltraps
c01033b5:	e9 f8 01 00 00       	jmp    c01035b2 <__alltraps>

c01033ba <vector214>:
.globl vector214
vector214:
  pushl $0
c01033ba:	6a 00                	push   $0x0
  pushl $214
c01033bc:	68 d6 00 00 00       	push   $0xd6
  jmp __alltraps
c01033c1:	e9 ec 01 00 00       	jmp    c01035b2 <__alltraps>

c01033c6 <vector215>:
.globl vector215
vector215:
  pushl $0
c01033c6:	6a 00                	push   $0x0
  pushl $215
c01033c8:	68 d7 00 00 00       	push   $0xd7
  jmp __alltraps
c01033cd:	e9 e0 01 00 00       	jmp    c01035b2 <__alltraps>

c01033d2 <vector216>:
.globl vector216
vector216:
  pushl $0
c01033d2:	6a 00                	push   $0x0
  pushl $216
c01033d4:	68 d8 00 00 00       	push   $0xd8
  jmp __alltraps
c01033d9:	e9 d4 01 00 00       	jmp    c01035b2 <__alltraps>

c01033de <vector217>:
.globl vector217
vector217:
  pushl $0
c01033de:	6a 00                	push   $0x0
  pushl $217
c01033e0:	68 d9 00 00 00       	push   $0xd9
  jmp __alltraps
c01033e5:	e9 c8 01 00 00       	jmp    c01035b2 <__alltraps>

c01033ea <vector218>:
.globl vector218
vector218:
  pushl $0
c01033ea:	6a 00                	push   $0x0
  pushl $218
c01033ec:	68 da 00 00 00       	push   $0xda
  jmp __alltraps
c01033f1:	e9 bc 01 00 00       	jmp    c01035b2 <__alltraps>

c01033f6 <vector219>:
.globl vector219
vector219:
  pushl $0
c01033f6:	6a 00                	push   $0x0
  pushl $219
c01033f8:	68 db 00 00 00       	push   $0xdb
  jmp __alltraps
c01033fd:	e9 b0 01 00 00       	jmp    c01035b2 <__alltraps>

c0103402 <vector220>:
.globl vector220
vector220:
  pushl $0
c0103402:	6a 00                	push   $0x0
  pushl $220
c0103404:	68 dc 00 00 00       	push   $0xdc
  jmp __alltraps
c0103409:	e9 a4 01 00 00       	jmp    c01035b2 <__alltraps>

c010340e <vector221>:
.globl vector221
vector221:
  pushl $0
c010340e:	6a 00                	push   $0x0
  pushl $221
c0103410:	68 dd 00 00 00       	push   $0xdd
  jmp __alltraps
c0103415:	e9 98 01 00 00       	jmp    c01035b2 <__alltraps>

c010341a <vector222>:
.globl vector222
vector222:
  pushl $0
c010341a:	6a 00                	push   $0x0
  pushl $222
c010341c:	68 de 00 00 00       	push   $0xde
  jmp __alltraps
c0103421:	e9 8c 01 00 00       	jmp    c01035b2 <__alltraps>

c0103426 <vector223>:
.globl vector223
vector223:
  pushl $0
c0103426:	6a 00                	push   $0x0
  pushl $223
c0103428:	68 df 00 00 00       	push   $0xdf
  jmp __alltraps
c010342d:	e9 80 01 00 00       	jmp    c01035b2 <__alltraps>

c0103432 <vector224>:
.globl vector224
vector224:
  pushl $0
c0103432:	6a 00                	push   $0x0
  pushl $224
c0103434:	68 e0 00 00 00       	push   $0xe0
  jmp __alltraps
c0103439:	e9 74 01 00 00       	jmp    c01035b2 <__alltraps>

c010343e <vector225>:
.globl vector225
vector225:
  pushl $0
c010343e:	6a 00                	push   $0x0
  pushl $225
c0103440:	68 e1 00 00 00       	push   $0xe1
  jmp __alltraps
c0103445:	e9 68 01 00 00       	jmp    c01035b2 <__alltraps>

c010344a <vector226>:
.globl vector226
vector226:
  pushl $0
c010344a:	6a 00                	push   $0x0
  pushl $226
c010344c:	68 e2 00 00 00       	push   $0xe2
  jmp __alltraps
c0103451:	e9 5c 01 00 00       	jmp    c01035b2 <__alltraps>

c0103456 <vector227>:
.globl vector227
vector227:
  pushl $0
c0103456:	6a 00                	push   $0x0
  pushl $227
c0103458:	68 e3 00 00 00       	push   $0xe3
  jmp __alltraps
c010345d:	e9 50 01 00 00       	jmp    c01035b2 <__alltraps>

c0103462 <vector228>:
.globl vector228
vector228:
  pushl $0
c0103462:	6a 00                	push   $0x0
  pushl $228
c0103464:	68 e4 00 00 00       	push   $0xe4
  jmp __alltraps
c0103469:	e9 44 01 00 00       	jmp    c01035b2 <__alltraps>

c010346e <vector229>:
.globl vector229
vector229:
  pushl $0
c010346e:	6a 00                	push   $0x0
  pushl $229
c0103470:	68 e5 00 00 00       	push   $0xe5
  jmp __alltraps
c0103475:	e9 38 01 00 00       	jmp    c01035b2 <__alltraps>

c010347a <vector230>:
.globl vector230
vector230:
  pushl $0
c010347a:	6a 00                	push   $0x0
  pushl $230
c010347c:	68 e6 00 00 00       	push   $0xe6
  jmp __alltraps
c0103481:	e9 2c 01 00 00       	jmp    c01035b2 <__alltraps>

c0103486 <vector231>:
.globl vector231
vector231:
  pushl $0
c0103486:	6a 00                	push   $0x0
  pushl $231
c0103488:	68 e7 00 00 00       	push   $0xe7
  jmp __alltraps
c010348d:	e9 20 01 00 00       	jmp    c01035b2 <__alltraps>

c0103492 <vector232>:
.globl vector232
vector232:
  pushl $0
c0103492:	6a 00                	push   $0x0
  pushl $232
c0103494:	68 e8 00 00 00       	push   $0xe8
  jmp __alltraps
c0103499:	e9 14 01 00 00       	jmp    c01035b2 <__alltraps>

c010349e <vector233>:
.globl vector233
vector233:
  pushl $0
c010349e:	6a 00                	push   $0x0
  pushl $233
c01034a0:	68 e9 00 00 00       	push   $0xe9
  jmp __alltraps
c01034a5:	e9 08 01 00 00       	jmp    c01035b2 <__alltraps>

c01034aa <vector234>:
.globl vector234
vector234:
  pushl $0
c01034aa:	6a 00                	push   $0x0
  pushl $234
c01034ac:	68 ea 00 00 00       	push   $0xea
  jmp __alltraps
c01034b1:	e9 fc 00 00 00       	jmp    c01035b2 <__alltraps>

c01034b6 <vector235>:
.globl vector235
vector235:
  pushl $0
c01034b6:	6a 00                	push   $0x0
  pushl $235
c01034b8:	68 eb 00 00 00       	push   $0xeb
  jmp __alltraps
c01034bd:	e9 f0 00 00 00       	jmp    c01035b2 <__alltraps>

c01034c2 <vector236>:
.globl vector236
vector236:
  pushl $0
c01034c2:	6a 00                	push   $0x0
  pushl $236
c01034c4:	68 ec 00 00 00       	push   $0xec
  jmp __alltraps
c01034c9:	e9 e4 00 00 00       	jmp    c01035b2 <__alltraps>

c01034ce <vector237>:
.globl vector237
vector237:
  pushl $0
c01034ce:	6a 00                	push   $0x0
  pushl $237
c01034d0:	68 ed 00 00 00       	push   $0xed
  jmp __alltraps
c01034d5:	e9 d8 00 00 00       	jmp    c01035b2 <__alltraps>

c01034da <vector238>:
.globl vector238
vector238:
  pushl $0
c01034da:	6a 00                	push   $0x0
  pushl $238
c01034dc:	68 ee 00 00 00       	push   $0xee
  jmp __alltraps
c01034e1:	e9 cc 00 00 00       	jmp    c01035b2 <__alltraps>

c01034e6 <vector239>:
.globl vector239
vector239:
  pushl $0
c01034e6:	6a 00                	push   $0x0
  pushl $239
c01034e8:	68 ef 00 00 00       	push   $0xef
  jmp __alltraps
c01034ed:	e9 c0 00 00 00       	jmp    c01035b2 <__alltraps>

c01034f2 <vector240>:
.globl vector240
vector240:
  pushl $0
c01034f2:	6a 00                	push   $0x0
  pushl $240
c01034f4:	68 f0 00 00 00       	push   $0xf0
  jmp __alltraps
c01034f9:	e9 b4 00 00 00       	jmp    c01035b2 <__alltraps>

c01034fe <vector241>:
.globl vector241
vector241:
  pushl $0
c01034fe:	6a 00                	push   $0x0
  pushl $241
c0103500:	68 f1 00 00 00       	push   $0xf1
  jmp __alltraps
c0103505:	e9 a8 00 00 00       	jmp    c01035b2 <__alltraps>

c010350a <vector242>:
.globl vector242
vector242:
  pushl $0
c010350a:	6a 00                	push   $0x0
  pushl $242
c010350c:	68 f2 00 00 00       	push   $0xf2
  jmp __alltraps
c0103511:	e9 9c 00 00 00       	jmp    c01035b2 <__alltraps>

c0103516 <vector243>:
.globl vector243
vector243:
  pushl $0
c0103516:	6a 00                	push   $0x0
  pushl $243
c0103518:	68 f3 00 00 00       	push   $0xf3
  jmp __alltraps
c010351d:	e9 90 00 00 00       	jmp    c01035b2 <__alltraps>

c0103522 <vector244>:
.globl vector244
vector244:
  pushl $0
c0103522:	6a 00                	push   $0x0
  pushl $244
c0103524:	68 f4 00 00 00       	push   $0xf4
  jmp __alltraps
c0103529:	e9 84 00 00 00       	jmp    c01035b2 <__alltraps>

c010352e <vector245>:
.globl vector245
vector245:
  pushl $0
c010352e:	6a 00                	push   $0x0
  pushl $245
c0103530:	68 f5 00 00 00       	push   $0xf5
  jmp __alltraps
c0103535:	e9 78 00 00 00       	jmp    c01035b2 <__alltraps>

c010353a <vector246>:
.globl vector246
vector246:
  pushl $0
c010353a:	6a 00                	push   $0x0
  pushl $246
c010353c:	68 f6 00 00 00       	push   $0xf6
  jmp __alltraps
c0103541:	e9 6c 00 00 00       	jmp    c01035b2 <__alltraps>

c0103546 <vector247>:
.globl vector247
vector247:
  pushl $0
c0103546:	6a 00                	push   $0x0
  pushl $247
c0103548:	68 f7 00 00 00       	push   $0xf7
  jmp __alltraps
c010354d:	e9 60 00 00 00       	jmp    c01035b2 <__alltraps>

c0103552 <vector248>:
.globl vector248
vector248:
  pushl $0
c0103552:	6a 00                	push   $0x0
  pushl $248
c0103554:	68 f8 00 00 00       	push   $0xf8
  jmp __alltraps
c0103559:	e9 54 00 00 00       	jmp    c01035b2 <__alltraps>

c010355e <vector249>:
.globl vector249
vector249:
  pushl $0
c010355e:	6a 00                	push   $0x0
  pushl $249
c0103560:	68 f9 00 00 00       	push   $0xf9
  jmp __alltraps
c0103565:	e9 48 00 00 00       	jmp    c01035b2 <__alltraps>

c010356a <vector250>:
.globl vector250
vector250:
  pushl $0
c010356a:	6a 00                	push   $0x0
  pushl $250
c010356c:	68 fa 00 00 00       	push   $0xfa
  jmp __alltraps
c0103571:	e9 3c 00 00 00       	jmp    c01035b2 <__alltraps>

c0103576 <vector251>:
.globl vector251
vector251:
  pushl $0
c0103576:	6a 00                	push   $0x0
  pushl $251
c0103578:	68 fb 00 00 00       	push   $0xfb
  jmp __alltraps
c010357d:	e9 30 00 00 00       	jmp    c01035b2 <__alltraps>

c0103582 <vector252>:
.globl vector252
vector252:
  pushl $0
c0103582:	6a 00                	push   $0x0
  pushl $252
c0103584:	68 fc 00 00 00       	push   $0xfc
  jmp __alltraps
c0103589:	e9 24 00 00 00       	jmp    c01035b2 <__alltraps>

c010358e <vector253>:
.globl vector253
vector253:
  pushl $0
c010358e:	6a 00                	push   $0x0
  pushl $253
c0103590:	68 fd 00 00 00       	push   $0xfd
  jmp __alltraps
c0103595:	e9 18 00 00 00       	jmp    c01035b2 <__alltraps>

c010359a <vector254>:
.globl vector254
vector254:
  pushl $0
c010359a:	6a 00                	push   $0x0
  pushl $254
c010359c:	68 fe 00 00 00       	push   $0xfe
  jmp __alltraps
c01035a1:	e9 0c 00 00 00       	jmp    c01035b2 <__alltraps>

c01035a6 <vector255>:
.globl vector255
vector255:
  pushl $0
c01035a6:	6a 00                	push   $0x0
  pushl $255
c01035a8:	68 ff 00 00 00       	push   $0xff
  jmp __alltraps
c01035ad:	e9 00 00 00 00       	jmp    c01035b2 <__alltraps>

c01035b2 <__alltraps>:
.text
.globl __alltraps
__alltraps:
    # push registers to build a trap frame
    # therefore make the stack look like a struct trapframe
    pushl %ds
c01035b2:	1e                   	push   %ds
    pushl %es
c01035b3:	06                   	push   %es
    pushl %fs
c01035b4:	0f a0                	push   %fs
    pushl %gs
c01035b6:	0f a8                	push   %gs
    pushal
c01035b8:	60                   	pusha  

    # load GD_KDATA into %ds and %es to set up data segments for kernel
    movl $GD_KDATA, %eax
c01035b9:	b8 10 00 00 00       	mov    $0x10,%eax
    movw %ax, %ds
c01035be:	8e d8                	mov    %eax,%ds
    movw %ax, %es
c01035c0:	8e c0                	mov    %eax,%es

    # push %esp to pass a pointer to the trapframe as an argument to trap()
    pushl %esp
c01035c2:	54                   	push   %esp

    # call trap(tf), where tf=%esp
    call trap
c01035c3:	e8 e3 f4 ff ff       	call   c0102aab <trap>

    # pop the pushed stack pointer
    popl %esp
c01035c8:	5c                   	pop    %esp

c01035c9 <__trapret>:

    # return falls through to trapret...
.globl __trapret
__trapret:
    # restore registers from stack
    popal
c01035c9:	61                   	popa   

    # restore %ds, %es, %fs and %gs
    popl %gs
c01035ca:	0f a9                	pop    %gs
    popl %fs
c01035cc:	0f a1                	pop    %fs
    popl %es
c01035ce:	07                   	pop    %es
    popl %ds
c01035cf:	1f                   	pop    %ds

    # get rid of the trap number and error code
    addl $0x8, %esp
c01035d0:	83 c4 08             	add    $0x8,%esp
    iret
c01035d3:	cf                   	iret   

c01035d4 <forkrets>:

.globl forkrets
forkrets:
    # set stack to this new process's trapframe
    movl 4(%esp), %esp
c01035d4:	8b 64 24 04          	mov    0x4(%esp),%esp
    jmp __trapret
c01035d8:	eb ef                	jmp    c01035c9 <__trapret>

c01035da <lock_init>:
#define local_intr_restore(x)   __intr_restore(x);

typedef volatile bool lock_t;

static inline void
lock_init(lock_t *lock) {
c01035da:	55                   	push   %ebp
c01035db:	89 e5                	mov    %esp,%ebp
    *lock = 0;
c01035dd:	8b 45 08             	mov    0x8(%ebp),%eax
c01035e0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
c01035e6:	90                   	nop
c01035e7:	5d                   	pop    %ebp
c01035e8:	c3                   	ret    

c01035e9 <mm_count>:
bool user_mem_check(struct mm_struct *mm, uintptr_t start, size_t len, bool write);
bool copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable);
bool copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len);

static inline int
mm_count(struct mm_struct *mm) {
c01035e9:	55                   	push   %ebp
c01035ea:	89 e5                	mov    %esp,%ebp
    return mm->mm_count;
c01035ec:	8b 45 08             	mov    0x8(%ebp),%eax
c01035ef:	8b 40 18             	mov    0x18(%eax),%eax
}
c01035f2:	5d                   	pop    %ebp
c01035f3:	c3                   	ret    

c01035f4 <set_mm_count>:

static inline void
set_mm_count(struct mm_struct *mm, int val) {
c01035f4:	55                   	push   %ebp
c01035f5:	89 e5                	mov    %esp,%ebp
    mm->mm_count = val;
c01035f7:	8b 45 08             	mov    0x8(%ebp),%eax
c01035fa:	8b 55 0c             	mov    0xc(%ebp),%edx
c01035fd:	89 50 18             	mov    %edx,0x18(%eax)
}
c0103600:	90                   	nop
c0103601:	5d                   	pop    %ebp
c0103602:	c3                   	ret    

c0103603 <pa2page>:
page2pa(struct Page *page) {
    return page2ppn(page) << PGSHIFT;
}

static inline struct Page *
pa2page(uintptr_t pa) {
c0103603:	55                   	push   %ebp
c0103604:	89 e5                	mov    %esp,%ebp
c0103606:	83 ec 08             	sub    $0x8,%esp
    if (PPN(pa) >= npage) {
c0103609:	8b 45 08             	mov    0x8(%ebp),%eax
c010360c:	c1 e8 0c             	shr    $0xc,%eax
c010360f:	89 c2                	mov    %eax,%edx
c0103611:	a1 80 0f 1b c0       	mov    0xc01b0f80,%eax
c0103616:	39 c2                	cmp    %eax,%edx
c0103618:	72 14                	jb     c010362e <pa2page+0x2b>
        panic("pa2page called with invalid pa");
c010361a:	83 ec 04             	sub    $0x4,%esp
c010361d:	68 10 c3 10 c0       	push   $0xc010c310
c0103622:	6a 5e                	push   $0x5e
c0103624:	68 2f c3 10 c0       	push   $0xc010c32f
c0103629:	e8 cf cd ff ff       	call   c01003fd <__panic>
    }
    return &pages[PPN(pa)];
c010362e:	a1 b8 31 1b c0       	mov    0xc01b31b8,%eax
c0103633:	8b 55 08             	mov    0x8(%ebp),%edx
c0103636:	c1 ea 0c             	shr    $0xc,%edx
c0103639:	c1 e2 05             	shl    $0x5,%edx
c010363c:	01 d0                	add    %edx,%eax
}
c010363e:	c9                   	leave  
c010363f:	c3                   	ret    

c0103640 <pde2page>:
    }
    return pa2page(PTE_ADDR(pte));
}

static inline struct Page *
pde2page(pde_t pde) {
c0103640:	55                   	push   %ebp
c0103641:	89 e5                	mov    %esp,%ebp
c0103643:	83 ec 08             	sub    $0x8,%esp
    return pa2page(PDE_ADDR(pde));
c0103646:	8b 45 08             	mov    0x8(%ebp),%eax
c0103649:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010364e:	83 ec 0c             	sub    $0xc,%esp
c0103651:	50                   	push   %eax
c0103652:	e8 ac ff ff ff       	call   c0103603 <pa2page>
c0103657:	83 c4 10             	add    $0x10,%esp
}
c010365a:	c9                   	leave  
c010365b:	c3                   	ret    

c010365c <mm_create>:
static void check_vma_struct(void);
static void check_pgfault(void);

// mm_create -  alloc a mm_struct & initialize it.
struct mm_struct *
mm_create(void) {
c010365c:	55                   	push   %ebp
c010365d:	89 e5                	mov    %esp,%ebp
c010365f:	83 ec 18             	sub    $0x18,%esp
    struct mm_struct *mm = kmalloc(sizeof(struct mm_struct));
c0103662:	83 ec 0c             	sub    $0xc,%esp
c0103665:	6a 20                	push   $0x20
c0103667:	e8 16 1b 00 00       	call   c0105182 <kmalloc>
c010366c:	83 c4 10             	add    $0x10,%esp
c010366f:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (mm != NULL) {
c0103672:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0103676:	74 7d                	je     c01036f5 <mm_create+0x99>
        list_init(&(mm->mmap_list));
c0103678:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010367b:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010367e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103681:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0103684:	89 50 04             	mov    %edx,0x4(%eax)
c0103687:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010368a:	8b 50 04             	mov    0x4(%eax),%edx
c010368d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103690:	89 10                	mov    %edx,(%eax)
        mm->mmap_cache = NULL;
c0103692:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103695:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        mm->pgdir = NULL;
c010369c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010369f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        mm->map_count = 0;
c01036a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036a9:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)

        if (swap_init_ok) swap_init_mm(mm);
c01036b0:	a1 6c 0f 1b c0       	mov    0xc01b0f6c,%eax
c01036b5:	85 c0                	test   %eax,%eax
c01036b7:	74 10                	je     c01036c9 <mm_create+0x6d>
c01036b9:	83 ec 0c             	sub    $0xc,%esp
c01036bc:	ff 75 f4             	pushl  -0xc(%ebp)
c01036bf:	e8 3a 1d 00 00       	call   c01053fe <swap_init_mm>
c01036c4:	83 c4 10             	add    $0x10,%esp
c01036c7:	eb 0a                	jmp    c01036d3 <mm_create+0x77>
        else mm->sm_priv = NULL;
c01036c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036cc:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
        
        set_mm_count(mm, 0);
c01036d3:	83 ec 08             	sub    $0x8,%esp
c01036d6:	6a 00                	push   $0x0
c01036d8:	ff 75 f4             	pushl  -0xc(%ebp)
c01036db:	e8 14 ff ff ff       	call   c01035f4 <set_mm_count>
c01036e0:	83 c4 10             	add    $0x10,%esp
        lock_init(&(mm->mm_lock));
c01036e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036e6:	83 c0 1c             	add    $0x1c,%eax
c01036e9:	83 ec 0c             	sub    $0xc,%esp
c01036ec:	50                   	push   %eax
c01036ed:	e8 e8 fe ff ff       	call   c01035da <lock_init>
c01036f2:	83 c4 10             	add    $0x10,%esp
    }    
    return mm;
c01036f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01036f8:	c9                   	leave  
c01036f9:	c3                   	ret    

c01036fa <vma_create>:

// vma_create - alloc a vma_struct & initialize it. (addr range: vm_start~vm_end)
struct vma_struct *
vma_create(uintptr_t vm_start, uintptr_t vm_end, uint32_t vm_flags) {
c01036fa:	55                   	push   %ebp
c01036fb:	89 e5                	mov    %esp,%ebp
c01036fd:	83 ec 18             	sub    $0x18,%esp
    struct vma_struct *vma = kmalloc(sizeof(struct vma_struct));
c0103700:	83 ec 0c             	sub    $0xc,%esp
c0103703:	6a 18                	push   $0x18
c0103705:	e8 78 1a 00 00       	call   c0105182 <kmalloc>
c010370a:	83 c4 10             	add    $0x10,%esp
c010370d:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (vma != NULL) {
c0103710:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0103714:	74 1b                	je     c0103731 <vma_create+0x37>
        vma->vm_start = vm_start;
c0103716:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103719:	8b 55 08             	mov    0x8(%ebp),%edx
c010371c:	89 50 04             	mov    %edx,0x4(%eax)
        vma->vm_end = vm_end;
c010371f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103722:	8b 55 0c             	mov    0xc(%ebp),%edx
c0103725:	89 50 08             	mov    %edx,0x8(%eax)
        vma->vm_flags = vm_flags;
c0103728:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010372b:	8b 55 10             	mov    0x10(%ebp),%edx
c010372e:	89 50 0c             	mov    %edx,0xc(%eax)
    }
    return vma;
c0103731:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0103734:	c9                   	leave  
c0103735:	c3                   	ret    

c0103736 <find_vma>:


// find_vma - find a vma  (vma->vm_start <= addr <= vma_vm_end)
struct vma_struct *
find_vma(struct mm_struct *mm, uintptr_t addr) {
c0103736:	55                   	push   %ebp
c0103737:	89 e5                	mov    %esp,%ebp
c0103739:	83 ec 20             	sub    $0x20,%esp
    struct vma_struct *vma = NULL;
c010373c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    if (mm != NULL) {
c0103743:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0103747:	0f 84 95 00 00 00    	je     c01037e2 <find_vma+0xac>
        vma = mm->mmap_cache;
c010374d:	8b 45 08             	mov    0x8(%ebp),%eax
c0103750:	8b 40 08             	mov    0x8(%eax),%eax
c0103753:	89 45 fc             	mov    %eax,-0x4(%ebp)
        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
c0103756:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c010375a:	74 16                	je     c0103772 <find_vma+0x3c>
c010375c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010375f:	8b 40 04             	mov    0x4(%eax),%eax
c0103762:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0103765:	77 0b                	ja     c0103772 <find_vma+0x3c>
c0103767:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010376a:	8b 40 08             	mov    0x8(%eax),%eax
c010376d:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0103770:	77 61                	ja     c01037d3 <find_vma+0x9d>
                bool found = 0;
c0103772:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
                list_entry_t *list = &(mm->mmap_list), *le = list;
c0103779:	8b 45 08             	mov    0x8(%ebp),%eax
c010377c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010377f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103782:	89 45 f4             	mov    %eax,-0xc(%ebp)
                while ((le = list_next(le)) != list) {
c0103785:	eb 28                	jmp    c01037af <find_vma+0x79>
                    vma = le2vma(le, list_link);
c0103787:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010378a:	83 e8 10             	sub    $0x10,%eax
c010378d:	89 45 fc             	mov    %eax,-0x4(%ebp)
                    if (vma->vm_start<=addr && addr < vma->vm_end) {
c0103790:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103793:	8b 40 04             	mov    0x4(%eax),%eax
c0103796:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0103799:	77 14                	ja     c01037af <find_vma+0x79>
c010379b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010379e:	8b 40 08             	mov    0x8(%eax),%eax
c01037a1:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01037a4:	76 09                	jbe    c01037af <find_vma+0x79>
                        found = 1;
c01037a6:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
                        break;
c01037ad:	eb 17                	jmp    c01037c6 <find_vma+0x90>
c01037af:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01037b2:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01037b5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01037b8:	8b 40 04             	mov    0x4(%eax),%eax
    if (mm != NULL) {
        vma = mm->mmap_cache;
        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
                bool found = 0;
                list_entry_t *list = &(mm->mmap_list), *le = list;
                while ((le = list_next(le)) != list) {
c01037bb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01037be:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01037c1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01037c4:	75 c1                	jne    c0103787 <find_vma+0x51>
                    if (vma->vm_start<=addr && addr < vma->vm_end) {
                        found = 1;
                        break;
                    }
                }
                if (!found) {
c01037c6:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
c01037ca:	75 07                	jne    c01037d3 <find_vma+0x9d>
                    vma = NULL;
c01037cc:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
                }
        }
        if (vma != NULL) {
c01037d3:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c01037d7:	74 09                	je     c01037e2 <find_vma+0xac>
            mm->mmap_cache = vma;
c01037d9:	8b 45 08             	mov    0x8(%ebp),%eax
c01037dc:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01037df:	89 50 08             	mov    %edx,0x8(%eax)
        }
    }
    return vma;
c01037e2:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c01037e5:	c9                   	leave  
c01037e6:	c3                   	ret    

c01037e7 <check_vma_overlap>:


// check_vma_overlap - check if vma1 overlaps vma2 ?
static inline void
check_vma_overlap(struct vma_struct *prev, struct vma_struct *next) {
c01037e7:	55                   	push   %ebp
c01037e8:	89 e5                	mov    %esp,%ebp
c01037ea:	83 ec 08             	sub    $0x8,%esp
    assert(prev->vm_start < prev->vm_end);
c01037ed:	8b 45 08             	mov    0x8(%ebp),%eax
c01037f0:	8b 50 04             	mov    0x4(%eax),%edx
c01037f3:	8b 45 08             	mov    0x8(%ebp),%eax
c01037f6:	8b 40 08             	mov    0x8(%eax),%eax
c01037f9:	39 c2                	cmp    %eax,%edx
c01037fb:	72 16                	jb     c0103813 <check_vma_overlap+0x2c>
c01037fd:	68 3d c3 10 c0       	push   $0xc010c33d
c0103802:	68 5b c3 10 c0       	push   $0xc010c35b
c0103807:	6a 6b                	push   $0x6b
c0103809:	68 70 c3 10 c0       	push   $0xc010c370
c010380e:	e8 ea cb ff ff       	call   c01003fd <__panic>
    assert(prev->vm_end <= next->vm_start);
c0103813:	8b 45 08             	mov    0x8(%ebp),%eax
c0103816:	8b 50 08             	mov    0x8(%eax),%edx
c0103819:	8b 45 0c             	mov    0xc(%ebp),%eax
c010381c:	8b 40 04             	mov    0x4(%eax),%eax
c010381f:	39 c2                	cmp    %eax,%edx
c0103821:	76 16                	jbe    c0103839 <check_vma_overlap+0x52>
c0103823:	68 80 c3 10 c0       	push   $0xc010c380
c0103828:	68 5b c3 10 c0       	push   $0xc010c35b
c010382d:	6a 6c                	push   $0x6c
c010382f:	68 70 c3 10 c0       	push   $0xc010c370
c0103834:	e8 c4 cb ff ff       	call   c01003fd <__panic>
    assert(next->vm_start < next->vm_end);
c0103839:	8b 45 0c             	mov    0xc(%ebp),%eax
c010383c:	8b 50 04             	mov    0x4(%eax),%edx
c010383f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103842:	8b 40 08             	mov    0x8(%eax),%eax
c0103845:	39 c2                	cmp    %eax,%edx
c0103847:	72 16                	jb     c010385f <check_vma_overlap+0x78>
c0103849:	68 9f c3 10 c0       	push   $0xc010c39f
c010384e:	68 5b c3 10 c0       	push   $0xc010c35b
c0103853:	6a 6d                	push   $0x6d
c0103855:	68 70 c3 10 c0       	push   $0xc010c370
c010385a:	e8 9e cb ff ff       	call   c01003fd <__panic>
}
c010385f:	90                   	nop
c0103860:	c9                   	leave  
c0103861:	c3                   	ret    

c0103862 <insert_vma_struct>:


// insert_vma_struct -insert vma in mm's list link
void
insert_vma_struct(struct mm_struct *mm, struct vma_struct *vma) {
c0103862:	55                   	push   %ebp
c0103863:	89 e5                	mov    %esp,%ebp
c0103865:	83 ec 38             	sub    $0x38,%esp
    assert(vma->vm_start < vma->vm_end);
c0103868:	8b 45 0c             	mov    0xc(%ebp),%eax
c010386b:	8b 50 04             	mov    0x4(%eax),%edx
c010386e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103871:	8b 40 08             	mov    0x8(%eax),%eax
c0103874:	39 c2                	cmp    %eax,%edx
c0103876:	72 16                	jb     c010388e <insert_vma_struct+0x2c>
c0103878:	68 bd c3 10 c0       	push   $0xc010c3bd
c010387d:	68 5b c3 10 c0       	push   $0xc010c35b
c0103882:	6a 74                	push   $0x74
c0103884:	68 70 c3 10 c0       	push   $0xc010c370
c0103889:	e8 6f cb ff ff       	call   c01003fd <__panic>
    list_entry_t *list = &(mm->mmap_list);
c010388e:	8b 45 08             	mov    0x8(%ebp),%eax
c0103891:	89 45 ec             	mov    %eax,-0x14(%ebp)
    list_entry_t *le_prev = list, *le_next;
c0103894:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103897:	89 45 f4             	mov    %eax,-0xc(%ebp)

        list_entry_t *le = list;
c010389a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010389d:	89 45 f0             	mov    %eax,-0x10(%ebp)
        while ((le = list_next(le)) != list) {
c01038a0:	eb 1f                	jmp    c01038c1 <insert_vma_struct+0x5f>
            struct vma_struct *mmap_prev = le2vma(le, list_link);
c01038a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01038a5:	83 e8 10             	sub    $0x10,%eax
c01038a8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            if (mmap_prev->vm_start > vma->vm_start) {
c01038ab:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01038ae:	8b 50 04             	mov    0x4(%eax),%edx
c01038b1:	8b 45 0c             	mov    0xc(%ebp),%eax
c01038b4:	8b 40 04             	mov    0x4(%eax),%eax
c01038b7:	39 c2                	cmp    %eax,%edx
c01038b9:	77 1f                	ja     c01038da <insert_vma_struct+0x78>
                break;
            }
            le_prev = le;
c01038bb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01038be:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01038c1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01038c4:	89 45 d8             	mov    %eax,-0x28(%ebp)
c01038c7:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01038ca:	8b 40 04             	mov    0x4(%eax),%eax
    assert(vma->vm_start < vma->vm_end);
    list_entry_t *list = &(mm->mmap_list);
    list_entry_t *le_prev = list, *le_next;

        list_entry_t *le = list;
        while ((le = list_next(le)) != list) {
c01038cd:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01038d0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01038d3:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01038d6:	75 ca                	jne    c01038a2 <insert_vma_struct+0x40>
c01038d8:	eb 01                	jmp    c01038db <insert_vma_struct+0x79>
            struct vma_struct *mmap_prev = le2vma(le, list_link);
            if (mmap_prev->vm_start > vma->vm_start) {
                break;
c01038da:	90                   	nop
c01038db:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01038de:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01038e1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01038e4:	8b 40 04             	mov    0x4(%eax),%eax
            }
            le_prev = le;
        }

    le_next = list_next(le_prev);
c01038e7:	89 45 dc             	mov    %eax,-0x24(%ebp)

    /* check overlap */
    if (le_prev != list) {
c01038ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01038ed:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01038f0:	74 15                	je     c0103907 <insert_vma_struct+0xa5>
        check_vma_overlap(le2vma(le_prev, list_link), vma);
c01038f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01038f5:	83 e8 10             	sub    $0x10,%eax
c01038f8:	83 ec 08             	sub    $0x8,%esp
c01038fb:	ff 75 0c             	pushl  0xc(%ebp)
c01038fe:	50                   	push   %eax
c01038ff:	e8 e3 fe ff ff       	call   c01037e7 <check_vma_overlap>
c0103904:	83 c4 10             	add    $0x10,%esp
    }
    if (le_next != list) {
c0103907:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010390a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010390d:	74 15                	je     c0103924 <insert_vma_struct+0xc2>
        check_vma_overlap(vma, le2vma(le_next, list_link));
c010390f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103912:	83 e8 10             	sub    $0x10,%eax
c0103915:	83 ec 08             	sub    $0x8,%esp
c0103918:	50                   	push   %eax
c0103919:	ff 75 0c             	pushl  0xc(%ebp)
c010391c:	e8 c6 fe ff ff       	call   c01037e7 <check_vma_overlap>
c0103921:	83 c4 10             	add    $0x10,%esp
    }

    vma->vm_mm = mm;
c0103924:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103927:	8b 55 08             	mov    0x8(%ebp),%edx
c010392a:	89 10                	mov    %edx,(%eax)
    list_add_after(le_prev, &(vma->list_link));
c010392c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010392f:	8d 50 10             	lea    0x10(%eax),%edx
c0103932:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103935:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0103938:	89 55 d4             	mov    %edx,-0x2c(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010393b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010393e:	8b 40 04             	mov    0x4(%eax),%eax
c0103941:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0103944:	89 55 d0             	mov    %edx,-0x30(%ebp)
c0103947:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010394a:	89 55 cc             	mov    %edx,-0x34(%ebp)
c010394d:	89 45 c8             	mov    %eax,-0x38(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0103950:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0103953:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0103956:	89 10                	mov    %edx,(%eax)
c0103958:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010395b:	8b 10                	mov    (%eax),%edx
c010395d:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0103960:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0103963:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0103966:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0103969:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010396c:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010396f:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0103972:	89 10                	mov    %edx,(%eax)

    mm->map_count ++;
c0103974:	8b 45 08             	mov    0x8(%ebp),%eax
c0103977:	8b 40 10             	mov    0x10(%eax),%eax
c010397a:	8d 50 01             	lea    0x1(%eax),%edx
c010397d:	8b 45 08             	mov    0x8(%ebp),%eax
c0103980:	89 50 10             	mov    %edx,0x10(%eax)
}
c0103983:	90                   	nop
c0103984:	c9                   	leave  
c0103985:	c3                   	ret    

c0103986 <mm_destroy>:

// mm_destroy - free mm and mm internal fields
void
mm_destroy(struct mm_struct *mm) {
c0103986:	55                   	push   %ebp
c0103987:	89 e5                	mov    %esp,%ebp
c0103989:	83 ec 28             	sub    $0x28,%esp
    assert(mm_count(mm) == 0);
c010398c:	ff 75 08             	pushl  0x8(%ebp)
c010398f:	e8 55 fc ff ff       	call   c01035e9 <mm_count>
c0103994:	83 c4 04             	add    $0x4,%esp
c0103997:	85 c0                	test   %eax,%eax
c0103999:	74 19                	je     c01039b4 <mm_destroy+0x2e>
c010399b:	68 d9 c3 10 c0       	push   $0xc010c3d9
c01039a0:	68 5b c3 10 c0       	push   $0xc010c35b
c01039a5:	68 94 00 00 00       	push   $0x94
c01039aa:	68 70 c3 10 c0       	push   $0xc010c370
c01039af:	e8 49 ca ff ff       	call   c01003fd <__panic>

    list_entry_t *list = &(mm->mmap_list), *le;
c01039b4:	8b 45 08             	mov    0x8(%ebp),%eax
c01039b7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(list)) != list) {
c01039ba:	eb 3a                	jmp    c01039f6 <mm_destroy+0x70>
c01039bc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01039bf:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c01039c2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01039c5:	8b 40 04             	mov    0x4(%eax),%eax
c01039c8:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01039cb:	8b 12                	mov    (%edx),%edx
c01039cd:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c01039d0:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c01039d3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01039d6:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01039d9:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c01039dc:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01039df:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01039e2:	89 10                	mov    %edx,(%eax)
        list_del(le);
        kfree(le2vma(le, list_link));  //kfree vma        
c01039e4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01039e7:	83 e8 10             	sub    $0x10,%eax
c01039ea:	83 ec 0c             	sub    $0xc,%esp
c01039ed:	50                   	push   %eax
c01039ee:	e8 a7 17 00 00       	call   c010519a <kfree>
c01039f3:	83 c4 10             	add    $0x10,%esp
c01039f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01039f9:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01039fc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01039ff:	8b 40 04             	mov    0x4(%eax),%eax
void
mm_destroy(struct mm_struct *mm) {
    assert(mm_count(mm) == 0);

    list_entry_t *list = &(mm->mmap_list), *le;
    while ((le = list_next(list)) != list) {
c0103a02:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103a05:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103a08:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103a0b:	75 af                	jne    c01039bc <mm_destroy+0x36>
        list_del(le);
        kfree(le2vma(le, list_link));  //kfree vma        
    }
    kfree(mm); //kfree mm
c0103a0d:	83 ec 0c             	sub    $0xc,%esp
c0103a10:	ff 75 08             	pushl  0x8(%ebp)
c0103a13:	e8 82 17 00 00       	call   c010519a <kfree>
c0103a18:	83 c4 10             	add    $0x10,%esp
    mm=NULL;
c0103a1b:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
}
c0103a22:	90                   	nop
c0103a23:	c9                   	leave  
c0103a24:	c3                   	ret    

c0103a25 <mm_map>:

int
mm_map(struct mm_struct *mm, uintptr_t addr, size_t len, uint32_t vm_flags,
       struct vma_struct **vma_store) {
c0103a25:	55                   	push   %ebp
c0103a26:	89 e5                	mov    %esp,%ebp
c0103a28:	83 ec 28             	sub    $0x28,%esp
    uintptr_t start = ROUNDDOWN(addr, PGSIZE), end = ROUNDUP(addr + len, PGSIZE);
c0103a2b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103a2e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103a31:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103a34:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0103a39:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0103a3c:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
c0103a43:	8b 55 0c             	mov    0xc(%ebp),%edx
c0103a46:	8b 45 10             	mov    0x10(%ebp),%eax
c0103a49:	01 c2                	add    %eax,%edx
c0103a4b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103a4e:	01 d0                	add    %edx,%eax
c0103a50:	83 e8 01             	sub    $0x1,%eax
c0103a53:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0103a56:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103a59:	ba 00 00 00 00       	mov    $0x0,%edx
c0103a5e:	f7 75 e8             	divl   -0x18(%ebp)
c0103a61:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103a64:	29 d0                	sub    %edx,%eax
c0103a66:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if (!USER_ACCESS(start, end)) {
c0103a69:	81 7d ec ff ff 1f 00 	cmpl   $0x1fffff,-0x14(%ebp)
c0103a70:	76 11                	jbe    c0103a83 <mm_map+0x5e>
c0103a72:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103a75:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0103a78:	73 09                	jae    c0103a83 <mm_map+0x5e>
c0103a7a:	81 7d e0 00 00 00 b0 	cmpl   $0xb0000000,-0x20(%ebp)
c0103a81:	76 0a                	jbe    c0103a8d <mm_map+0x68>
        return -E_INVAL;
c0103a83:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0103a88:	e9 9e 00 00 00       	jmp    c0103b2b <mm_map+0x106>
    }

    assert(mm != NULL);
c0103a8d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0103a91:	75 19                	jne    c0103aac <mm_map+0x87>
c0103a93:	68 eb c3 10 c0       	push   $0xc010c3eb
c0103a98:	68 5b c3 10 c0       	push   $0xc010c35b
c0103a9d:	68 a7 00 00 00       	push   $0xa7
c0103aa2:	68 70 c3 10 c0       	push   $0xc010c370
c0103aa7:	e8 51 c9 ff ff       	call   c01003fd <__panic>

    int ret = -E_INVAL;
c0103aac:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)

    struct vma_struct *vma;
    if ((vma = find_vma(mm, start)) != NULL && end > vma->vm_start) {
c0103ab3:	83 ec 08             	sub    $0x8,%esp
c0103ab6:	ff 75 ec             	pushl  -0x14(%ebp)
c0103ab9:	ff 75 08             	pushl  0x8(%ebp)
c0103abc:	e8 75 fc ff ff       	call   c0103736 <find_vma>
c0103ac1:	83 c4 10             	add    $0x10,%esp
c0103ac4:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0103ac7:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0103acb:	74 0b                	je     c0103ad8 <mm_map+0xb3>
c0103acd:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103ad0:	8b 40 04             	mov    0x4(%eax),%eax
c0103ad3:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0103ad6:	72 4c                	jb     c0103b24 <mm_map+0xff>
        goto out;
    }
    ret = -E_NO_MEM;
c0103ad8:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    if ((vma = vma_create(start, end, vm_flags)) == NULL) {
c0103adf:	83 ec 04             	sub    $0x4,%esp
c0103ae2:	ff 75 14             	pushl  0x14(%ebp)
c0103ae5:	ff 75 e0             	pushl  -0x20(%ebp)
c0103ae8:	ff 75 ec             	pushl  -0x14(%ebp)
c0103aeb:	e8 0a fc ff ff       	call   c01036fa <vma_create>
c0103af0:	83 c4 10             	add    $0x10,%esp
c0103af3:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0103af6:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0103afa:	74 2b                	je     c0103b27 <mm_map+0x102>
        goto out;
    }
    insert_vma_struct(mm, vma);
c0103afc:	83 ec 08             	sub    $0x8,%esp
c0103aff:	ff 75 dc             	pushl  -0x24(%ebp)
c0103b02:	ff 75 08             	pushl  0x8(%ebp)
c0103b05:	e8 58 fd ff ff       	call   c0103862 <insert_vma_struct>
c0103b0a:	83 c4 10             	add    $0x10,%esp
    if (vma_store != NULL) {
c0103b0d:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0103b11:	74 08                	je     c0103b1b <mm_map+0xf6>
        *vma_store = vma;
c0103b13:	8b 45 18             	mov    0x18(%ebp),%eax
c0103b16:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0103b19:	89 10                	mov    %edx,(%eax)
    }
    ret = 0;
c0103b1b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0103b22:	eb 04                	jmp    c0103b28 <mm_map+0x103>

    int ret = -E_INVAL;

    struct vma_struct *vma;
    if ((vma = find_vma(mm, start)) != NULL && end > vma->vm_start) {
        goto out;
c0103b24:	90                   	nop
c0103b25:	eb 01                	jmp    c0103b28 <mm_map+0x103>
    }
    ret = -E_NO_MEM;

    if ((vma = vma_create(start, end, vm_flags)) == NULL) {
        goto out;
c0103b27:	90                   	nop
        *vma_store = vma;
    }
    ret = 0;

out:
    return ret;
c0103b28:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0103b2b:	c9                   	leave  
c0103b2c:	c3                   	ret    

c0103b2d <dup_mmap>:

int
dup_mmap(struct mm_struct *to, struct mm_struct *from) {
c0103b2d:	55                   	push   %ebp
c0103b2e:	89 e5                	mov    %esp,%ebp
c0103b30:	53                   	push   %ebx
c0103b31:	83 ec 24             	sub    $0x24,%esp
    assert(to != NULL && from != NULL);
c0103b34:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0103b38:	74 06                	je     c0103b40 <dup_mmap+0x13>
c0103b3a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0103b3e:	75 19                	jne    c0103b59 <dup_mmap+0x2c>
c0103b40:	68 f6 c3 10 c0       	push   $0xc010c3f6
c0103b45:	68 5b c3 10 c0       	push   $0xc010c35b
c0103b4a:	68 c0 00 00 00       	push   $0xc0
c0103b4f:	68 70 c3 10 c0       	push   $0xc010c370
c0103b54:	e8 a4 c8 ff ff       	call   c01003fd <__panic>
    list_entry_t *list = &(from->mmap_list), *le = list;
c0103b59:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103b5c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103b5f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103b62:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_prev(le)) != list) {
c0103b65:	e9 86 00 00 00       	jmp    c0103bf0 <dup_mmap+0xc3>
        struct vma_struct *vma, *nvma;
        vma = le2vma(le, list_link);
c0103b6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103b6d:	83 e8 10             	sub    $0x10,%eax
c0103b70:	89 45 ec             	mov    %eax,-0x14(%ebp)
        nvma = vma_create(vma->vm_start, vma->vm_end, vma->vm_flags);
c0103b73:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103b76:	8b 48 0c             	mov    0xc(%eax),%ecx
c0103b79:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103b7c:	8b 50 08             	mov    0x8(%eax),%edx
c0103b7f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103b82:	8b 40 04             	mov    0x4(%eax),%eax
c0103b85:	83 ec 04             	sub    $0x4,%esp
c0103b88:	51                   	push   %ecx
c0103b89:	52                   	push   %edx
c0103b8a:	50                   	push   %eax
c0103b8b:	e8 6a fb ff ff       	call   c01036fa <vma_create>
c0103b90:	83 c4 10             	add    $0x10,%esp
c0103b93:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (nvma == NULL) {
c0103b96:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0103b9a:	75 07                	jne    c0103ba3 <dup_mmap+0x76>
            return -E_NO_MEM;
c0103b9c:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0103ba1:	eb 6c                	jmp    c0103c0f <dup_mmap+0xe2>
        }

        insert_vma_struct(to, nvma);
c0103ba3:	83 ec 08             	sub    $0x8,%esp
c0103ba6:	ff 75 e8             	pushl  -0x18(%ebp)
c0103ba9:	ff 75 08             	pushl  0x8(%ebp)
c0103bac:	e8 b1 fc ff ff       	call   c0103862 <insert_vma_struct>
c0103bb1:	83 c4 10             	add    $0x10,%esp

        bool share = 0;
c0103bb4:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
c0103bbb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103bbe:	8b 58 08             	mov    0x8(%eax),%ebx
c0103bc1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103bc4:	8b 48 04             	mov    0x4(%eax),%ecx
c0103bc7:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103bca:	8b 50 0c             	mov    0xc(%eax),%edx
c0103bcd:	8b 45 08             	mov    0x8(%ebp),%eax
c0103bd0:	8b 40 0c             	mov    0xc(%eax),%eax
c0103bd3:	83 ec 0c             	sub    $0xc,%esp
c0103bd6:	ff 75 e4             	pushl  -0x1c(%ebp)
c0103bd9:	53                   	push   %ebx
c0103bda:	51                   	push   %ecx
c0103bdb:	52                   	push   %edx
c0103bdc:	50                   	push   %eax
c0103bdd:	e8 03 3f 00 00       	call   c0107ae5 <copy_range>
c0103be2:	83 c4 20             	add    $0x20,%esp
c0103be5:	85 c0                	test   %eax,%eax
c0103be7:	74 07                	je     c0103bf0 <dup_mmap+0xc3>
            return -E_NO_MEM;
c0103be9:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0103bee:	eb 1f                	jmp    c0103c0f <dup_mmap+0xe2>
c0103bf0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103bf3:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c0103bf6:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103bf9:	8b 00                	mov    (%eax),%eax

int
dup_mmap(struct mm_struct *to, struct mm_struct *from) {
    assert(to != NULL && from != NULL);
    list_entry_t *list = &(from->mmap_list), *le = list;
    while ((le = list_prev(le)) != list) {
c0103bfb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103bfe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103c01:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0103c04:	0f 85 60 ff ff ff    	jne    c0103b6a <dup_mmap+0x3d>
        bool share = 0;
        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
            return -E_NO_MEM;
        }
    }
    return 0;
c0103c0a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0103c0f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0103c12:	c9                   	leave  
c0103c13:	c3                   	ret    

c0103c14 <exit_mmap>:

void
exit_mmap(struct mm_struct *mm) {
c0103c14:	55                   	push   %ebp
c0103c15:	89 e5                	mov    %esp,%ebp
c0103c17:	83 ec 28             	sub    $0x28,%esp
    assert(mm != NULL && mm_count(mm) == 0);
c0103c1a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0103c1e:	74 0f                	je     c0103c2f <exit_mmap+0x1b>
c0103c20:	ff 75 08             	pushl  0x8(%ebp)
c0103c23:	e8 c1 f9 ff ff       	call   c01035e9 <mm_count>
c0103c28:	83 c4 04             	add    $0x4,%esp
c0103c2b:	85 c0                	test   %eax,%eax
c0103c2d:	74 19                	je     c0103c48 <exit_mmap+0x34>
c0103c2f:	68 14 c4 10 c0       	push   $0xc010c414
c0103c34:	68 5b c3 10 c0       	push   $0xc010c35b
c0103c39:	68 d6 00 00 00       	push   $0xd6
c0103c3e:	68 70 c3 10 c0       	push   $0xc010c370
c0103c43:	e8 b5 c7 ff ff       	call   c01003fd <__panic>
    pde_t *pgdir = mm->pgdir;
c0103c48:	8b 45 08             	mov    0x8(%ebp),%eax
c0103c4b:	8b 40 0c             	mov    0xc(%eax),%eax
c0103c4e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    list_entry_t *list = &(mm->mmap_list), *le = list;
c0103c51:	8b 45 08             	mov    0x8(%ebp),%eax
c0103c54:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0103c57:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103c5a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c0103c5d:	eb 25                	jmp    c0103c84 <exit_mmap+0x70>
        struct vma_struct *vma = le2vma(le, list_link);
c0103c5f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103c62:	83 e8 10             	sub    $0x10,%eax
c0103c65:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
c0103c68:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103c6b:	8b 50 08             	mov    0x8(%eax),%edx
c0103c6e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103c71:	8b 40 04             	mov    0x4(%eax),%eax
c0103c74:	83 ec 04             	sub    $0x4,%esp
c0103c77:	52                   	push   %edx
c0103c78:	50                   	push   %eax
c0103c79:	ff 75 f0             	pushl  -0x10(%ebp)
c0103c7c:	e8 9d 3c 00 00       	call   c010791e <unmap_range>
c0103c81:	83 c4 10             	add    $0x10,%esp
c0103c84:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103c87:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0103c8a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103c8d:	8b 40 04             	mov    0x4(%eax),%eax
void
exit_mmap(struct mm_struct *mm) {
    assert(mm != NULL && mm_count(mm) == 0);
    pde_t *pgdir = mm->pgdir;
    list_entry_t *list = &(mm->mmap_list), *le = list;
    while ((le = list_next(le)) != list) {
c0103c90:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103c93:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103c96:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0103c99:	75 c4                	jne    c0103c5f <exit_mmap+0x4b>
        struct vma_struct *vma = le2vma(le, list_link);
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
    }
    while ((le = list_next(le)) != list) {
c0103c9b:	eb 25                	jmp    c0103cc2 <exit_mmap+0xae>
        struct vma_struct *vma = le2vma(le, list_link);
c0103c9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103ca0:	83 e8 10             	sub    $0x10,%eax
c0103ca3:	89 45 e0             	mov    %eax,-0x20(%ebp)
        exit_range(pgdir, vma->vm_start, vma->vm_end);
c0103ca6:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103ca9:	8b 50 08             	mov    0x8(%eax),%edx
c0103cac:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103caf:	8b 40 04             	mov    0x4(%eax),%eax
c0103cb2:	83 ec 04             	sub    $0x4,%esp
c0103cb5:	52                   	push   %edx
c0103cb6:	50                   	push   %eax
c0103cb7:	ff 75 f0             	pushl  -0x10(%ebp)
c0103cba:	e8 32 3d 00 00       	call   c01079f1 <exit_range>
c0103cbf:	83 c4 10             	add    $0x10,%esp
c0103cc2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103cc5:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0103cc8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103ccb:	8b 40 04             	mov    0x4(%eax),%eax
    list_entry_t *list = &(mm->mmap_list), *le = list;
    while ((le = list_next(le)) != list) {
        struct vma_struct *vma = le2vma(le, list_link);
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
    }
    while ((le = list_next(le)) != list) {
c0103cce:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103cd1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103cd4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0103cd7:	75 c4                	jne    c0103c9d <exit_mmap+0x89>
        struct vma_struct *vma = le2vma(le, list_link);
        exit_range(pgdir, vma->vm_start, vma->vm_end);
    }
}
c0103cd9:	90                   	nop
c0103cda:	c9                   	leave  
c0103cdb:	c3                   	ret    

c0103cdc <copy_from_user>:

bool
copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable) {
c0103cdc:	55                   	push   %ebp
c0103cdd:	89 e5                	mov    %esp,%ebp
c0103cdf:	83 ec 08             	sub    $0x8,%esp
    if (!user_mem_check(mm, (uintptr_t)src, len, writable)) {
c0103ce2:	8b 45 10             	mov    0x10(%ebp),%eax
c0103ce5:	ff 75 18             	pushl  0x18(%ebp)
c0103ce8:	ff 75 14             	pushl  0x14(%ebp)
c0103ceb:	50                   	push   %eax
c0103cec:	ff 75 08             	pushl  0x8(%ebp)
c0103cef:	e8 b1 08 00 00       	call   c01045a5 <user_mem_check>
c0103cf4:	83 c4 10             	add    $0x10,%esp
c0103cf7:	85 c0                	test   %eax,%eax
c0103cf9:	75 07                	jne    c0103d02 <copy_from_user+0x26>
        return 0;
c0103cfb:	b8 00 00 00 00       	mov    $0x0,%eax
c0103d00:	eb 19                	jmp    c0103d1b <copy_from_user+0x3f>
    }
    memcpy(dst, src, len);
c0103d02:	83 ec 04             	sub    $0x4,%esp
c0103d05:	ff 75 14             	pushl  0x14(%ebp)
c0103d08:	ff 75 10             	pushl  0x10(%ebp)
c0103d0b:	ff 75 0c             	pushl  0xc(%ebp)
c0103d0e:	e8 ee 74 00 00       	call   c010b201 <memcpy>
c0103d13:	83 c4 10             	add    $0x10,%esp
    return 1;
c0103d16:	b8 01 00 00 00       	mov    $0x1,%eax
}
c0103d1b:	c9                   	leave  
c0103d1c:	c3                   	ret    

c0103d1d <copy_to_user>:

bool
copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len) {
c0103d1d:	55                   	push   %ebp
c0103d1e:	89 e5                	mov    %esp,%ebp
c0103d20:	83 ec 08             	sub    $0x8,%esp
    if (!user_mem_check(mm, (uintptr_t)dst, len, 1)) {
c0103d23:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103d26:	6a 01                	push   $0x1
c0103d28:	ff 75 14             	pushl  0x14(%ebp)
c0103d2b:	50                   	push   %eax
c0103d2c:	ff 75 08             	pushl  0x8(%ebp)
c0103d2f:	e8 71 08 00 00       	call   c01045a5 <user_mem_check>
c0103d34:	83 c4 10             	add    $0x10,%esp
c0103d37:	85 c0                	test   %eax,%eax
c0103d39:	75 07                	jne    c0103d42 <copy_to_user+0x25>
        return 0;
c0103d3b:	b8 00 00 00 00       	mov    $0x0,%eax
c0103d40:	eb 19                	jmp    c0103d5b <copy_to_user+0x3e>
    }
    memcpy(dst, src, len);
c0103d42:	83 ec 04             	sub    $0x4,%esp
c0103d45:	ff 75 14             	pushl  0x14(%ebp)
c0103d48:	ff 75 10             	pushl  0x10(%ebp)
c0103d4b:	ff 75 0c             	pushl  0xc(%ebp)
c0103d4e:	e8 ae 74 00 00       	call   c010b201 <memcpy>
c0103d53:	83 c4 10             	add    $0x10,%esp
    return 1;
c0103d56:	b8 01 00 00 00       	mov    $0x1,%eax
}
c0103d5b:	c9                   	leave  
c0103d5c:	c3                   	ret    

c0103d5d <vmm_init>:

// vmm_init - initialize virtual memory management
//          - now just call check_vmm to check correctness of vmm
void
vmm_init(void) {
c0103d5d:	55                   	push   %ebp
c0103d5e:	89 e5                	mov    %esp,%ebp
c0103d60:	83 ec 08             	sub    $0x8,%esp
    check_vmm();
c0103d63:	e8 03 00 00 00       	call   c0103d6b <check_vmm>
}
c0103d68:	90                   	nop
c0103d69:	c9                   	leave  
c0103d6a:	c3                   	ret    

c0103d6b <check_vmm>:

// check_vmm - check correctness of vmm
static void
check_vmm(void) {
c0103d6b:	55                   	push   %ebp
c0103d6c:	89 e5                	mov    %esp,%ebp
c0103d6e:	83 ec 18             	sub    $0x18,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0103d71:	e8 d7 33 00 00       	call   c010714d <nr_free_pages>
c0103d76:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    check_vma_struct();
c0103d79:	e8 18 00 00 00       	call   c0103d96 <check_vma_struct>
    check_pgfault();
c0103d7e:	e8 10 04 00 00       	call   c0104193 <check_pgfault>

    cprintf("check_vmm() succeeded.\n");
c0103d83:	83 ec 0c             	sub    $0xc,%esp
c0103d86:	68 34 c4 10 c0       	push   $0xc010c434
c0103d8b:	e8 07 c5 ff ff       	call   c0100297 <cprintf>
c0103d90:	83 c4 10             	add    $0x10,%esp
}
c0103d93:	90                   	nop
c0103d94:	c9                   	leave  
c0103d95:	c3                   	ret    

c0103d96 <check_vma_struct>:

static void
check_vma_struct(void) {
c0103d96:	55                   	push   %ebp
c0103d97:	89 e5                	mov    %esp,%ebp
c0103d99:	83 ec 58             	sub    $0x58,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0103d9c:	e8 ac 33 00 00       	call   c010714d <nr_free_pages>
c0103da1:	89 45 ec             	mov    %eax,-0x14(%ebp)

    struct mm_struct *mm = mm_create();
c0103da4:	e8 b3 f8 ff ff       	call   c010365c <mm_create>
c0103da9:	89 45 e8             	mov    %eax,-0x18(%ebp)
    assert(mm != NULL);
c0103dac:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0103db0:	75 19                	jne    c0103dcb <check_vma_struct+0x35>
c0103db2:	68 eb c3 10 c0       	push   $0xc010c3eb
c0103db7:	68 5b c3 10 c0       	push   $0xc010c35b
c0103dbc:	68 0c 01 00 00       	push   $0x10c
c0103dc1:	68 70 c3 10 c0       	push   $0xc010c370
c0103dc6:	e8 32 c6 ff ff       	call   c01003fd <__panic>

    int step1 = 10, step2 = step1 * 10;
c0103dcb:	c7 45 e4 0a 00 00 00 	movl   $0xa,-0x1c(%ebp)
c0103dd2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0103dd5:	89 d0                	mov    %edx,%eax
c0103dd7:	c1 e0 02             	shl    $0x2,%eax
c0103dda:	01 d0                	add    %edx,%eax
c0103ddc:	01 c0                	add    %eax,%eax
c0103dde:	89 45 e0             	mov    %eax,-0x20(%ebp)

    int i;
    for (i = step1; i >= 1; i --) {
c0103de1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103de4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103de7:	eb 5f                	jmp    c0103e48 <check_vma_struct+0xb2>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c0103de9:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0103dec:	89 d0                	mov    %edx,%eax
c0103dee:	c1 e0 02             	shl    $0x2,%eax
c0103df1:	01 d0                	add    %edx,%eax
c0103df3:	83 c0 02             	add    $0x2,%eax
c0103df6:	89 c1                	mov    %eax,%ecx
c0103df8:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0103dfb:	89 d0                	mov    %edx,%eax
c0103dfd:	c1 e0 02             	shl    $0x2,%eax
c0103e00:	01 d0                	add    %edx,%eax
c0103e02:	83 ec 04             	sub    $0x4,%esp
c0103e05:	6a 00                	push   $0x0
c0103e07:	51                   	push   %ecx
c0103e08:	50                   	push   %eax
c0103e09:	e8 ec f8 ff ff       	call   c01036fa <vma_create>
c0103e0e:	83 c4 10             	add    $0x10,%esp
c0103e11:	89 45 dc             	mov    %eax,-0x24(%ebp)
        assert(vma != NULL);
c0103e14:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0103e18:	75 19                	jne    c0103e33 <check_vma_struct+0x9d>
c0103e1a:	68 4c c4 10 c0       	push   $0xc010c44c
c0103e1f:	68 5b c3 10 c0       	push   $0xc010c35b
c0103e24:	68 13 01 00 00       	push   $0x113
c0103e29:	68 70 c3 10 c0       	push   $0xc010c370
c0103e2e:	e8 ca c5 ff ff       	call   c01003fd <__panic>
        insert_vma_struct(mm, vma);
c0103e33:	83 ec 08             	sub    $0x8,%esp
c0103e36:	ff 75 dc             	pushl  -0x24(%ebp)
c0103e39:	ff 75 e8             	pushl  -0x18(%ebp)
c0103e3c:	e8 21 fa ff ff       	call   c0103862 <insert_vma_struct>
c0103e41:	83 c4 10             	add    $0x10,%esp
    assert(mm != NULL);

    int step1 = 10, step2 = step1 * 10;

    int i;
    for (i = step1; i >= 1; i --) {
c0103e44:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0103e48:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0103e4c:	7f 9b                	jg     c0103de9 <check_vma_struct+0x53>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    for (i = step1 + 1; i <= step2; i ++) {
c0103e4e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103e51:	83 c0 01             	add    $0x1,%eax
c0103e54:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103e57:	eb 5f                	jmp    c0103eb8 <check_vma_struct+0x122>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c0103e59:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0103e5c:	89 d0                	mov    %edx,%eax
c0103e5e:	c1 e0 02             	shl    $0x2,%eax
c0103e61:	01 d0                	add    %edx,%eax
c0103e63:	83 c0 02             	add    $0x2,%eax
c0103e66:	89 c1                	mov    %eax,%ecx
c0103e68:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0103e6b:	89 d0                	mov    %edx,%eax
c0103e6d:	c1 e0 02             	shl    $0x2,%eax
c0103e70:	01 d0                	add    %edx,%eax
c0103e72:	83 ec 04             	sub    $0x4,%esp
c0103e75:	6a 00                	push   $0x0
c0103e77:	51                   	push   %ecx
c0103e78:	50                   	push   %eax
c0103e79:	e8 7c f8 ff ff       	call   c01036fa <vma_create>
c0103e7e:	83 c4 10             	add    $0x10,%esp
c0103e81:	89 45 d8             	mov    %eax,-0x28(%ebp)
        assert(vma != NULL);
c0103e84:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c0103e88:	75 19                	jne    c0103ea3 <check_vma_struct+0x10d>
c0103e8a:	68 4c c4 10 c0       	push   $0xc010c44c
c0103e8f:	68 5b c3 10 c0       	push   $0xc010c35b
c0103e94:	68 19 01 00 00       	push   $0x119
c0103e99:	68 70 c3 10 c0       	push   $0xc010c370
c0103e9e:	e8 5a c5 ff ff       	call   c01003fd <__panic>
        insert_vma_struct(mm, vma);
c0103ea3:	83 ec 08             	sub    $0x8,%esp
c0103ea6:	ff 75 d8             	pushl  -0x28(%ebp)
c0103ea9:	ff 75 e8             	pushl  -0x18(%ebp)
c0103eac:	e8 b1 f9 ff ff       	call   c0103862 <insert_vma_struct>
c0103eb1:	83 c4 10             	add    $0x10,%esp
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    for (i = step1 + 1; i <= step2; i ++) {
c0103eb4:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0103eb8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103ebb:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0103ebe:	7e 99                	jle    c0103e59 <check_vma_struct+0xc3>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    list_entry_t *le = list_next(&(mm->mmap_list));
c0103ec0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103ec3:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c0103ec6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0103ec9:	8b 40 04             	mov    0x4(%eax),%eax
c0103ecc:	89 45 f0             	mov    %eax,-0x10(%ebp)

    for (i = 1; i <= step2; i ++) {
c0103ecf:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
c0103ed6:	e9 81 00 00 00       	jmp    c0103f5c <check_vma_struct+0x1c6>
        assert(le != &(mm->mmap_list));
c0103edb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103ede:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0103ee1:	75 19                	jne    c0103efc <check_vma_struct+0x166>
c0103ee3:	68 58 c4 10 c0       	push   $0xc010c458
c0103ee8:	68 5b c3 10 c0       	push   $0xc010c35b
c0103eed:	68 20 01 00 00       	push   $0x120
c0103ef2:	68 70 c3 10 c0       	push   $0xc010c370
c0103ef7:	e8 01 c5 ff ff       	call   c01003fd <__panic>
        struct vma_struct *mmap = le2vma(le, list_link);
c0103efc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103eff:	83 e8 10             	sub    $0x10,%eax
c0103f02:	89 45 d0             	mov    %eax,-0x30(%ebp)
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
c0103f05:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0103f08:	8b 48 04             	mov    0x4(%eax),%ecx
c0103f0b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0103f0e:	89 d0                	mov    %edx,%eax
c0103f10:	c1 e0 02             	shl    $0x2,%eax
c0103f13:	01 d0                	add    %edx,%eax
c0103f15:	39 c1                	cmp    %eax,%ecx
c0103f17:	75 17                	jne    c0103f30 <check_vma_struct+0x19a>
c0103f19:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0103f1c:	8b 48 08             	mov    0x8(%eax),%ecx
c0103f1f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0103f22:	89 d0                	mov    %edx,%eax
c0103f24:	c1 e0 02             	shl    $0x2,%eax
c0103f27:	01 d0                	add    %edx,%eax
c0103f29:	83 c0 02             	add    $0x2,%eax
c0103f2c:	39 c1                	cmp    %eax,%ecx
c0103f2e:	74 19                	je     c0103f49 <check_vma_struct+0x1b3>
c0103f30:	68 70 c4 10 c0       	push   $0xc010c470
c0103f35:	68 5b c3 10 c0       	push   $0xc010c35b
c0103f3a:	68 22 01 00 00       	push   $0x122
c0103f3f:	68 70 c3 10 c0       	push   $0xc010c370
c0103f44:	e8 b4 c4 ff ff       	call   c01003fd <__panic>
c0103f49:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103f4c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c0103f4f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0103f52:	8b 40 04             	mov    0x4(%eax),%eax
        le = list_next(le);
c0103f55:	89 45 f0             	mov    %eax,-0x10(%ebp)
        insert_vma_struct(mm, vma);
    }

    list_entry_t *le = list_next(&(mm->mmap_list));

    for (i = 1; i <= step2; i ++) {
c0103f58:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0103f5c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103f5f:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0103f62:	0f 8e 73 ff ff ff    	jle    c0103edb <check_vma_struct+0x145>
        struct vma_struct *mmap = le2vma(le, list_link);
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
        le = list_next(le);
    }

    for (i = 5; i <= 5 * step2; i +=5) {
c0103f68:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
c0103f6f:	e9 80 01 00 00       	jmp    c01040f4 <check_vma_struct+0x35e>
        struct vma_struct *vma1 = find_vma(mm, i);
c0103f74:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103f77:	83 ec 08             	sub    $0x8,%esp
c0103f7a:	50                   	push   %eax
c0103f7b:	ff 75 e8             	pushl  -0x18(%ebp)
c0103f7e:	e8 b3 f7 ff ff       	call   c0103736 <find_vma>
c0103f83:	83 c4 10             	add    $0x10,%esp
c0103f86:	89 45 cc             	mov    %eax,-0x34(%ebp)
        assert(vma1 != NULL);
c0103f89:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0103f8d:	75 19                	jne    c0103fa8 <check_vma_struct+0x212>
c0103f8f:	68 a5 c4 10 c0       	push   $0xc010c4a5
c0103f94:	68 5b c3 10 c0       	push   $0xc010c35b
c0103f99:	68 28 01 00 00       	push   $0x128
c0103f9e:	68 70 c3 10 c0       	push   $0xc010c370
c0103fa3:	e8 55 c4 ff ff       	call   c01003fd <__panic>
        struct vma_struct *vma2 = find_vma(mm, i+1);
c0103fa8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103fab:	83 c0 01             	add    $0x1,%eax
c0103fae:	83 ec 08             	sub    $0x8,%esp
c0103fb1:	50                   	push   %eax
c0103fb2:	ff 75 e8             	pushl  -0x18(%ebp)
c0103fb5:	e8 7c f7 ff ff       	call   c0103736 <find_vma>
c0103fba:	83 c4 10             	add    $0x10,%esp
c0103fbd:	89 45 c8             	mov    %eax,-0x38(%ebp)
        assert(vma2 != NULL);
c0103fc0:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c0103fc4:	75 19                	jne    c0103fdf <check_vma_struct+0x249>
c0103fc6:	68 b2 c4 10 c0       	push   $0xc010c4b2
c0103fcb:	68 5b c3 10 c0       	push   $0xc010c35b
c0103fd0:	68 2a 01 00 00       	push   $0x12a
c0103fd5:	68 70 c3 10 c0       	push   $0xc010c370
c0103fda:	e8 1e c4 ff ff       	call   c01003fd <__panic>
        struct vma_struct *vma3 = find_vma(mm, i+2);
c0103fdf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103fe2:	83 c0 02             	add    $0x2,%eax
c0103fe5:	83 ec 08             	sub    $0x8,%esp
c0103fe8:	50                   	push   %eax
c0103fe9:	ff 75 e8             	pushl  -0x18(%ebp)
c0103fec:	e8 45 f7 ff ff       	call   c0103736 <find_vma>
c0103ff1:	83 c4 10             	add    $0x10,%esp
c0103ff4:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        assert(vma3 == NULL);
c0103ff7:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
c0103ffb:	74 19                	je     c0104016 <check_vma_struct+0x280>
c0103ffd:	68 bf c4 10 c0       	push   $0xc010c4bf
c0104002:	68 5b c3 10 c0       	push   $0xc010c35b
c0104007:	68 2c 01 00 00       	push   $0x12c
c010400c:	68 70 c3 10 c0       	push   $0xc010c370
c0104011:	e8 e7 c3 ff ff       	call   c01003fd <__panic>
        struct vma_struct *vma4 = find_vma(mm, i+3);
c0104016:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104019:	83 c0 03             	add    $0x3,%eax
c010401c:	83 ec 08             	sub    $0x8,%esp
c010401f:	50                   	push   %eax
c0104020:	ff 75 e8             	pushl  -0x18(%ebp)
c0104023:	e8 0e f7 ff ff       	call   c0103736 <find_vma>
c0104028:	83 c4 10             	add    $0x10,%esp
c010402b:	89 45 c0             	mov    %eax,-0x40(%ebp)
        assert(vma4 == NULL);
c010402e:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
c0104032:	74 19                	je     c010404d <check_vma_struct+0x2b7>
c0104034:	68 cc c4 10 c0       	push   $0xc010c4cc
c0104039:	68 5b c3 10 c0       	push   $0xc010c35b
c010403e:	68 2e 01 00 00       	push   $0x12e
c0104043:	68 70 c3 10 c0       	push   $0xc010c370
c0104048:	e8 b0 c3 ff ff       	call   c01003fd <__panic>
        struct vma_struct *vma5 = find_vma(mm, i+4);
c010404d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104050:	83 c0 04             	add    $0x4,%eax
c0104053:	83 ec 08             	sub    $0x8,%esp
c0104056:	50                   	push   %eax
c0104057:	ff 75 e8             	pushl  -0x18(%ebp)
c010405a:	e8 d7 f6 ff ff       	call   c0103736 <find_vma>
c010405f:	83 c4 10             	add    $0x10,%esp
c0104062:	89 45 bc             	mov    %eax,-0x44(%ebp)
        assert(vma5 == NULL);
c0104065:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0104069:	74 19                	je     c0104084 <check_vma_struct+0x2ee>
c010406b:	68 d9 c4 10 c0       	push   $0xc010c4d9
c0104070:	68 5b c3 10 c0       	push   $0xc010c35b
c0104075:	68 30 01 00 00       	push   $0x130
c010407a:	68 70 c3 10 c0       	push   $0xc010c370
c010407f:	e8 79 c3 ff ff       	call   c01003fd <__panic>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
c0104084:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0104087:	8b 50 04             	mov    0x4(%eax),%edx
c010408a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010408d:	39 c2                	cmp    %eax,%edx
c010408f:	75 10                	jne    c01040a1 <check_vma_struct+0x30b>
c0104091:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0104094:	8b 40 08             	mov    0x8(%eax),%eax
c0104097:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010409a:	83 c2 02             	add    $0x2,%edx
c010409d:	39 d0                	cmp    %edx,%eax
c010409f:	74 19                	je     c01040ba <check_vma_struct+0x324>
c01040a1:	68 e8 c4 10 c0       	push   $0xc010c4e8
c01040a6:	68 5b c3 10 c0       	push   $0xc010c35b
c01040ab:	68 32 01 00 00       	push   $0x132
c01040b0:	68 70 c3 10 c0       	push   $0xc010c370
c01040b5:	e8 43 c3 ff ff       	call   c01003fd <__panic>
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
c01040ba:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01040bd:	8b 50 04             	mov    0x4(%eax),%edx
c01040c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01040c3:	39 c2                	cmp    %eax,%edx
c01040c5:	75 10                	jne    c01040d7 <check_vma_struct+0x341>
c01040c7:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01040ca:	8b 40 08             	mov    0x8(%eax),%eax
c01040cd:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01040d0:	83 c2 02             	add    $0x2,%edx
c01040d3:	39 d0                	cmp    %edx,%eax
c01040d5:	74 19                	je     c01040f0 <check_vma_struct+0x35a>
c01040d7:	68 18 c5 10 c0       	push   $0xc010c518
c01040dc:	68 5b c3 10 c0       	push   $0xc010c35b
c01040e1:	68 33 01 00 00       	push   $0x133
c01040e6:	68 70 c3 10 c0       	push   $0xc010c370
c01040eb:	e8 0d c3 ff ff       	call   c01003fd <__panic>
        struct vma_struct *mmap = le2vma(le, list_link);
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
        le = list_next(le);
    }

    for (i = 5; i <= 5 * step2; i +=5) {
c01040f0:	83 45 f4 05          	addl   $0x5,-0xc(%ebp)
c01040f4:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01040f7:	89 d0                	mov    %edx,%eax
c01040f9:	c1 e0 02             	shl    $0x2,%eax
c01040fc:	01 d0                	add    %edx,%eax
c01040fe:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104101:	0f 8d 6d fe ff ff    	jge    c0103f74 <check_vma_struct+0x1de>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
    }

    for (i =4; i>=0; i--) {
c0104107:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%ebp)
c010410e:	eb 5c                	jmp    c010416c <check_vma_struct+0x3d6>
        struct vma_struct *vma_below_5= find_vma(mm,i);
c0104110:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104113:	83 ec 08             	sub    $0x8,%esp
c0104116:	50                   	push   %eax
c0104117:	ff 75 e8             	pushl  -0x18(%ebp)
c010411a:	e8 17 f6 ff ff       	call   c0103736 <find_vma>
c010411f:	83 c4 10             	add    $0x10,%esp
c0104122:	89 45 b8             	mov    %eax,-0x48(%ebp)
        if (vma_below_5 != NULL ) {
c0104125:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
c0104129:	74 1e                	je     c0104149 <check_vma_struct+0x3b3>
           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
c010412b:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010412e:	8b 50 08             	mov    0x8(%eax),%edx
c0104131:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0104134:	8b 40 04             	mov    0x4(%eax),%eax
c0104137:	52                   	push   %edx
c0104138:	50                   	push   %eax
c0104139:	ff 75 f4             	pushl  -0xc(%ebp)
c010413c:	68 48 c5 10 c0       	push   $0xc010c548
c0104141:	e8 51 c1 ff ff       	call   c0100297 <cprintf>
c0104146:	83 c4 10             	add    $0x10,%esp
        }
        assert(vma_below_5 == NULL);
c0104149:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
c010414d:	74 19                	je     c0104168 <check_vma_struct+0x3d2>
c010414f:	68 6d c5 10 c0       	push   $0xc010c56d
c0104154:	68 5b c3 10 c0       	push   $0xc010c35b
c0104159:	68 3b 01 00 00       	push   $0x13b
c010415e:	68 70 c3 10 c0       	push   $0xc010c370
c0104163:	e8 95 c2 ff ff       	call   c01003fd <__panic>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
    }

    for (i =4; i>=0; i--) {
c0104168:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c010416c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104170:	79 9e                	jns    c0104110 <check_vma_struct+0x37a>
           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
        }
        assert(vma_below_5 == NULL);
    }

    mm_destroy(mm);
c0104172:	83 ec 0c             	sub    $0xc,%esp
c0104175:	ff 75 e8             	pushl  -0x18(%ebp)
c0104178:	e8 09 f8 ff ff       	call   c0103986 <mm_destroy>
c010417d:	83 c4 10             	add    $0x10,%esp

    cprintf("check_vma_struct() succeeded!\n");
c0104180:	83 ec 0c             	sub    $0xc,%esp
c0104183:	68 84 c5 10 c0       	push   $0xc010c584
c0104188:	e8 0a c1 ff ff       	call   c0100297 <cprintf>
c010418d:	83 c4 10             	add    $0x10,%esp
}
c0104190:	90                   	nop
c0104191:	c9                   	leave  
c0104192:	c3                   	ret    

c0104193 <check_pgfault>:

struct mm_struct *check_mm_struct;

// check_pgfault - check correctness of pgfault handler
static void
check_pgfault(void) {
c0104193:	55                   	push   %ebp
c0104194:	89 e5                	mov    %esp,%ebp
c0104196:	83 ec 28             	sub    $0x28,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0104199:	e8 af 2f 00 00       	call   c010714d <nr_free_pages>
c010419e:	89 45 ec             	mov    %eax,-0x14(%ebp)

    check_mm_struct = mm_create();
c01041a1:	e8 b6 f4 ff ff       	call   c010365c <mm_create>
c01041a6:	a3 d0 30 1b c0       	mov    %eax,0xc01b30d0
    assert(check_mm_struct != NULL);
c01041ab:	a1 d0 30 1b c0       	mov    0xc01b30d0,%eax
c01041b0:	85 c0                	test   %eax,%eax
c01041b2:	75 19                	jne    c01041cd <check_pgfault+0x3a>
c01041b4:	68 a3 c5 10 c0       	push   $0xc010c5a3
c01041b9:	68 5b c3 10 c0       	push   $0xc010c35b
c01041be:	68 4b 01 00 00       	push   $0x14b
c01041c3:	68 70 c3 10 c0       	push   $0xc010c370
c01041c8:	e8 30 c2 ff ff       	call   c01003fd <__panic>

    struct mm_struct *mm = check_mm_struct;
c01041cd:	a1 d0 30 1b c0       	mov    0xc01b30d0,%eax
c01041d2:	89 45 e8             	mov    %eax,-0x18(%ebp)
    pde_t *pgdir = mm->pgdir = boot_pgdir;
c01041d5:	8b 15 20 ca 12 c0    	mov    0xc012ca20,%edx
c01041db:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01041de:	89 50 0c             	mov    %edx,0xc(%eax)
c01041e1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01041e4:	8b 40 0c             	mov    0xc(%eax),%eax
c01041e7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(pgdir[0] == 0);
c01041ea:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01041ed:	8b 00                	mov    (%eax),%eax
c01041ef:	85 c0                	test   %eax,%eax
c01041f1:	74 19                	je     c010420c <check_pgfault+0x79>
c01041f3:	68 bb c5 10 c0       	push   $0xc010c5bb
c01041f8:	68 5b c3 10 c0       	push   $0xc010c35b
c01041fd:	68 4f 01 00 00       	push   $0x14f
c0104202:	68 70 c3 10 c0       	push   $0xc010c370
c0104207:	e8 f1 c1 ff ff       	call   c01003fd <__panic>

    struct vma_struct *vma = vma_create(0, PTSIZE, VM_WRITE);
c010420c:	83 ec 04             	sub    $0x4,%esp
c010420f:	6a 02                	push   $0x2
c0104211:	68 00 00 40 00       	push   $0x400000
c0104216:	6a 00                	push   $0x0
c0104218:	e8 dd f4 ff ff       	call   c01036fa <vma_create>
c010421d:	83 c4 10             	add    $0x10,%esp
c0104220:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(vma != NULL);
c0104223:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0104227:	75 19                	jne    c0104242 <check_pgfault+0xaf>
c0104229:	68 4c c4 10 c0       	push   $0xc010c44c
c010422e:	68 5b c3 10 c0       	push   $0xc010c35b
c0104233:	68 52 01 00 00       	push   $0x152
c0104238:	68 70 c3 10 c0       	push   $0xc010c370
c010423d:	e8 bb c1 ff ff       	call   c01003fd <__panic>

    insert_vma_struct(mm, vma);
c0104242:	83 ec 08             	sub    $0x8,%esp
c0104245:	ff 75 e0             	pushl  -0x20(%ebp)
c0104248:	ff 75 e8             	pushl  -0x18(%ebp)
c010424b:	e8 12 f6 ff ff       	call   c0103862 <insert_vma_struct>
c0104250:	83 c4 10             	add    $0x10,%esp

    uintptr_t addr = 0x100;
c0104253:	c7 45 dc 00 01 00 00 	movl   $0x100,-0x24(%ebp)
    assert(find_vma(mm, addr) == vma);
c010425a:	83 ec 08             	sub    $0x8,%esp
c010425d:	ff 75 dc             	pushl  -0x24(%ebp)
c0104260:	ff 75 e8             	pushl  -0x18(%ebp)
c0104263:	e8 ce f4 ff ff       	call   c0103736 <find_vma>
c0104268:	83 c4 10             	add    $0x10,%esp
c010426b:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c010426e:	74 19                	je     c0104289 <check_pgfault+0xf6>
c0104270:	68 c9 c5 10 c0       	push   $0xc010c5c9
c0104275:	68 5b c3 10 c0       	push   $0xc010c35b
c010427a:	68 57 01 00 00       	push   $0x157
c010427f:	68 70 c3 10 c0       	push   $0xc010c370
c0104284:	e8 74 c1 ff ff       	call   c01003fd <__panic>

    int i, sum = 0;
c0104289:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    for (i = 0; i < 100; i ++) {
c0104290:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0104297:	eb 19                	jmp    c01042b2 <check_pgfault+0x11f>
        *(char *)(addr + i) = i;
c0104299:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010429c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010429f:	01 d0                	add    %edx,%eax
c01042a1:	89 c2                	mov    %eax,%edx
c01042a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01042a6:	88 02                	mov    %al,(%edx)
        sum += i;
c01042a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01042ab:	01 45 f0             	add    %eax,-0x10(%ebp)

    uintptr_t addr = 0x100;
    assert(find_vma(mm, addr) == vma);

    int i, sum = 0;
    for (i = 0; i < 100; i ++) {
c01042ae:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01042b2:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c01042b6:	7e e1                	jle    c0104299 <check_pgfault+0x106>
        *(char *)(addr + i) = i;
        sum += i;
    }
    for (i = 0; i < 100; i ++) {
c01042b8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01042bf:	eb 15                	jmp    c01042d6 <check_pgfault+0x143>
        sum -= *(char *)(addr + i);
c01042c1:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01042c4:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01042c7:	01 d0                	add    %edx,%eax
c01042c9:	0f b6 00             	movzbl (%eax),%eax
c01042cc:	0f be c0             	movsbl %al,%eax
c01042cf:	29 45 f0             	sub    %eax,-0x10(%ebp)
    int i, sum = 0;
    for (i = 0; i < 100; i ++) {
        *(char *)(addr + i) = i;
        sum += i;
    }
    for (i = 0; i < 100; i ++) {
c01042d2:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01042d6:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c01042da:	7e e5                	jle    c01042c1 <check_pgfault+0x12e>
        sum -= *(char *)(addr + i);
    }
    assert(sum == 0);
c01042dc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01042e0:	74 19                	je     c01042fb <check_pgfault+0x168>
c01042e2:	68 e3 c5 10 c0       	push   $0xc010c5e3
c01042e7:	68 5b c3 10 c0       	push   $0xc010c35b
c01042ec:	68 61 01 00 00       	push   $0x161
c01042f1:	68 70 c3 10 c0       	push   $0xc010c370
c01042f6:	e8 02 c1 ff ff       	call   c01003fd <__panic>

    page_remove(pgdir, ROUNDDOWN(addr, PGSIZE));
c01042fb:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01042fe:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0104301:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0104304:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0104309:	83 ec 08             	sub    $0x8,%esp
c010430c:	50                   	push   %eax
c010430d:	ff 75 e4             	pushl  -0x1c(%ebp)
c0104310:	e8 ab 39 00 00       	call   c0107cc0 <page_remove>
c0104315:	83 c4 10             	add    $0x10,%esp
    free_page(pde2page(pgdir[0]));
c0104318:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010431b:	8b 00                	mov    (%eax),%eax
c010431d:	83 ec 0c             	sub    $0xc,%esp
c0104320:	50                   	push   %eax
c0104321:	e8 1a f3 ff ff       	call   c0103640 <pde2page>
c0104326:	83 c4 10             	add    $0x10,%esp
c0104329:	83 ec 08             	sub    $0x8,%esp
c010432c:	6a 01                	push   $0x1
c010432e:	50                   	push   %eax
c010432f:	e8 e4 2d 00 00       	call   c0107118 <free_pages>
c0104334:	83 c4 10             	add    $0x10,%esp
    pgdir[0] = 0;
c0104337:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010433a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    mm->pgdir = NULL;
c0104340:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104343:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
    mm_destroy(mm);
c010434a:	83 ec 0c             	sub    $0xc,%esp
c010434d:	ff 75 e8             	pushl  -0x18(%ebp)
c0104350:	e8 31 f6 ff ff       	call   c0103986 <mm_destroy>
c0104355:	83 c4 10             	add    $0x10,%esp
    check_mm_struct = NULL;
c0104358:	c7 05 d0 30 1b c0 00 	movl   $0x0,0xc01b30d0
c010435f:	00 00 00 

    assert(nr_free_pages_store == nr_free_pages());
c0104362:	e8 e6 2d 00 00       	call   c010714d <nr_free_pages>
c0104367:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010436a:	74 19                	je     c0104385 <check_pgfault+0x1f2>
c010436c:	68 ec c5 10 c0       	push   $0xc010c5ec
c0104371:	68 5b c3 10 c0       	push   $0xc010c35b
c0104376:	68 6b 01 00 00       	push   $0x16b
c010437b:	68 70 c3 10 c0       	push   $0xc010c370
c0104380:	e8 78 c0 ff ff       	call   c01003fd <__panic>

    cprintf("check_pgfault() succeeded!\n");
c0104385:	83 ec 0c             	sub    $0xc,%esp
c0104388:	68 13 c6 10 c0       	push   $0xc010c613
c010438d:	e8 05 bf ff ff       	call   c0100297 <cprintf>
c0104392:	83 c4 10             	add    $0x10,%esp
}
c0104395:	90                   	nop
c0104396:	c9                   	leave  
c0104397:	c3                   	ret    

c0104398 <do_pgfault>:
 *            was a read (0) or write (1).
 *         -- The U/S flag (bit 2) indicates whether the processor was executing at user mode (1)
 *            or supervisor mode (0) at the time of the exception.
 */
int
do_pgfault(struct mm_struct *mm, uint32_t error_code, uintptr_t addr) {
c0104398:	55                   	push   %ebp
c0104399:	89 e5                	mov    %esp,%ebp
c010439b:	83 ec 28             	sub    $0x28,%esp
    int ret = -E_INVAL;
c010439e:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
    //try to find a vma which include addr
    struct vma_struct *vma = find_vma(mm, addr);
c01043a5:	ff 75 10             	pushl  0x10(%ebp)
c01043a8:	ff 75 08             	pushl  0x8(%ebp)
c01043ab:	e8 86 f3 ff ff       	call   c0103736 <find_vma>
c01043b0:	83 c4 08             	add    $0x8,%esp
c01043b3:	89 45 ec             	mov    %eax,-0x14(%ebp)

    pgfault_num++;
c01043b6:	a1 64 0f 1b c0       	mov    0xc01b0f64,%eax
c01043bb:	83 c0 01             	add    $0x1,%eax
c01043be:	a3 64 0f 1b c0       	mov    %eax,0xc01b0f64
    //If the addr is in the range of a mm's vma?
    if (vma == NULL || vma->vm_start > addr) {
c01043c3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01043c7:	74 0b                	je     c01043d4 <do_pgfault+0x3c>
c01043c9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01043cc:	8b 40 04             	mov    0x4(%eax),%eax
c01043cf:	3b 45 10             	cmp    0x10(%ebp),%eax
c01043d2:	76 18                	jbe    c01043ec <do_pgfault+0x54>
        cprintf("not valid addr %x, and  can not find it in vma\n", addr);
c01043d4:	83 ec 08             	sub    $0x8,%esp
c01043d7:	ff 75 10             	pushl  0x10(%ebp)
c01043da:	68 30 c6 10 c0       	push   $0xc010c630
c01043df:	e8 b3 be ff ff       	call   c0100297 <cprintf>
c01043e4:	83 c4 10             	add    $0x10,%esp
        goto failed;
c01043e7:	e9 b4 01 00 00       	jmp    c01045a0 <do_pgfault+0x208>
    }
    //check the error_code
    switch (error_code & 3) {
c01043ec:	8b 45 0c             	mov    0xc(%ebp),%eax
c01043ef:	83 e0 03             	and    $0x3,%eax
c01043f2:	85 c0                	test   %eax,%eax
c01043f4:	74 3c                	je     c0104432 <do_pgfault+0x9a>
c01043f6:	83 f8 01             	cmp    $0x1,%eax
c01043f9:	74 22                	je     c010441d <do_pgfault+0x85>
    default:
            /* error code flag : default is 3 ( W/R=1, P=1): write, present */
    case 2: /* error code flag : (W/R=1, P=0): write, not present */
        if (!(vma->vm_flags & VM_WRITE)) {
c01043fb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01043fe:	8b 40 0c             	mov    0xc(%eax),%eax
c0104401:	83 e0 02             	and    $0x2,%eax
c0104404:	85 c0                	test   %eax,%eax
c0104406:	75 4c                	jne    c0104454 <do_pgfault+0xbc>
            cprintf("do_pgfault failed: error code flag = write AND not present, but the addr's vma cannot write\n");
c0104408:	83 ec 0c             	sub    $0xc,%esp
c010440b:	68 60 c6 10 c0       	push   $0xc010c660
c0104410:	e8 82 be ff ff       	call   c0100297 <cprintf>
c0104415:	83 c4 10             	add    $0x10,%esp
            goto failed;
c0104418:	e9 83 01 00 00       	jmp    c01045a0 <do_pgfault+0x208>
        }
        break;
    case 1: /* error code flag : (W/R=0, P=1): read, present */
        cprintf("do_pgfault failed: error code flag = read AND present\n");
c010441d:	83 ec 0c             	sub    $0xc,%esp
c0104420:	68 c0 c6 10 c0       	push   $0xc010c6c0
c0104425:	e8 6d be ff ff       	call   c0100297 <cprintf>
c010442a:	83 c4 10             	add    $0x10,%esp
        goto failed;
c010442d:	e9 6e 01 00 00       	jmp    c01045a0 <do_pgfault+0x208>
    case 0: /* error code flag : (W/R=0, P=0): read, not present */
        if (!(vma->vm_flags & (VM_READ | VM_EXEC))) {
c0104432:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104435:	8b 40 0c             	mov    0xc(%eax),%eax
c0104438:	83 e0 05             	and    $0x5,%eax
c010443b:	85 c0                	test   %eax,%eax
c010443d:	75 16                	jne    c0104455 <do_pgfault+0xbd>
            cprintf("do_pgfault failed: error code flag = read AND not present, but the addr's vma cannot read or exec\n");
c010443f:	83 ec 0c             	sub    $0xc,%esp
c0104442:	68 f8 c6 10 c0       	push   $0xc010c6f8
c0104447:	e8 4b be ff ff       	call   c0100297 <cprintf>
c010444c:	83 c4 10             	add    $0x10,%esp
            goto failed;
c010444f:	e9 4c 01 00 00       	jmp    c01045a0 <do_pgfault+0x208>
    case 2: /* error code flag : (W/R=1, P=0): write, not present */
        if (!(vma->vm_flags & VM_WRITE)) {
            cprintf("do_pgfault failed: error code flag = write AND not present, but the addr's vma cannot write\n");
            goto failed;
        }
        break;
c0104454:	90                   	nop
     *    (write an non_existed addr && addr is writable) OR
     *    (read  an non_existed addr && addr is readable)
     * THEN
     *    continue process
     */
    uint32_t perm = PTE_U;
c0104455:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
    if (vma->vm_flags & VM_WRITE) {
c010445c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010445f:	8b 40 0c             	mov    0xc(%eax),%eax
c0104462:	83 e0 02             	and    $0x2,%eax
c0104465:	85 c0                	test   %eax,%eax
c0104467:	74 04                	je     c010446d <do_pgfault+0xd5>
        perm |= PTE_W;
c0104469:	83 4d f0 02          	orl    $0x2,-0x10(%ebp)
    }
    addr = ROUNDDOWN(addr, PGSIZE);
c010446d:	8b 45 10             	mov    0x10(%ebp),%eax
c0104470:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0104473:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104476:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010447b:	89 45 10             	mov    %eax,0x10(%ebp)

    ret = -E_NO_MEM;
c010447e:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    pte_t *ptep=NULL;
c0104485:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    *   mm->pgdir : the PDT of these vma
    *
    */
   /*LAB3 EXERCISE 1: YOUR CODE*/
    //(1) try to find a pte, if pte's PT(Page Table) isn't existed, then create a PT.
    ptep = get_pte(mm->pgdir, addr, 1);
c010448c:	8b 45 08             	mov    0x8(%ebp),%eax
c010448f:	8b 40 0c             	mov    0xc(%eax),%eax
c0104492:	83 ec 04             	sub    $0x4,%esp
c0104495:	6a 01                	push   $0x1
c0104497:	ff 75 10             	pushl  0x10(%ebp)
c010449a:	50                   	push   %eax
c010449b:	e8 78 32 00 00       	call   c0107718 <get_pte>
c01044a0:	83 c4 10             	add    $0x10,%esp
c01044a3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(ptep != NULL);
c01044a6:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c01044aa:	75 19                	jne    c01044c5 <do_pgfault+0x12d>
c01044ac:	68 5b c7 10 c0       	push   $0xc010c75b
c01044b1:	68 5b c3 10 c0       	push   $0xc010c35b
c01044b6:	68 c9 01 00 00       	push   $0x1c9
c01044bb:	68 70 c3 10 c0       	push   $0xc010c370
c01044c0:	e8 38 bf ff ff       	call   c01003fd <__panic>
    //(2) if the phy addr isn't exist, then alloc a page & map the phy addr with logical addr
    if (*ptep == 0) {
c01044c5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01044c8:	8b 00                	mov    (%eax),%eax
c01044ca:	85 c0                	test   %eax,%eax
c01044cc:	75 39                	jne    c0104507 <do_pgfault+0x16f>
        assert(pgdir_alloc_page(mm->pgdir, addr, perm) != NULL);
c01044ce:	8b 45 08             	mov    0x8(%ebp),%eax
c01044d1:	8b 40 0c             	mov    0xc(%eax),%eax
c01044d4:	83 ec 04             	sub    $0x4,%esp
c01044d7:	ff 75 f0             	pushl  -0x10(%ebp)
c01044da:	ff 75 10             	pushl  0x10(%ebp)
c01044dd:	50                   	push   %eax
c01044de:	e8 1f 39 00 00       	call   c0107e02 <pgdir_alloc_page>
c01044e3:	83 c4 10             	add    $0x10,%esp
c01044e6:	85 c0                	test   %eax,%eax
c01044e8:	0f 85 ab 00 00 00    	jne    c0104599 <do_pgfault+0x201>
c01044ee:	68 68 c7 10 c0       	push   $0xc010c768
c01044f3:	68 5b c3 10 c0       	push   $0xc010c35b
c01044f8:	68 cc 01 00 00       	push   $0x1cc
c01044fd:	68 70 c3 10 c0       	push   $0xc010c370
c0104502:	e8 f6 be ff ff       	call   c01003fd <__panic>
    *    swap_in(mm, addr, &page) : alloc a memory page, then according to the swap entry in PTE for addr,
    *                               find the addr of disk page, read the content of disk page into this memroy page
    *    page_insert ： build the map of phy addr of an Page with the linear addr la
    *    swap_map_swappable ： set the page swappable
    */
        if(swap_init_ok) {
c0104507:	a1 6c 0f 1b c0       	mov    0xc01b0f6c,%eax
c010450c:	85 c0                	test   %eax,%eax
c010450e:	74 71                	je     c0104581 <do_pgfault+0x1e9>
            struct Page *page=NULL;
c0104510:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
            //(1）According to the mm AND addr, try to load the content of right disk page
            //    into the memory which page managed.
            assert(swap_in(mm, addr, &page) == 0);
c0104517:	83 ec 04             	sub    $0x4,%esp
c010451a:	8d 45 e0             	lea    -0x20(%ebp),%eax
c010451d:	50                   	push   %eax
c010451e:	ff 75 10             	pushl  0x10(%ebp)
c0104521:	ff 75 08             	pushl  0x8(%ebp)
c0104524:	e8 9b 10 00 00       	call   c01055c4 <swap_in>
c0104529:	83 c4 10             	add    $0x10,%esp
c010452c:	85 c0                	test   %eax,%eax
c010452e:	74 19                	je     c0104549 <do_pgfault+0x1b1>
c0104530:	68 98 c7 10 c0       	push   $0xc010c798
c0104535:	68 5b c3 10 c0       	push   $0xc010c35b
c010453a:	68 de 01 00 00       	push   $0x1de
c010453f:	68 70 c3 10 c0       	push   $0xc010c370
c0104544:	e8 b4 be ff ff       	call   c01003fd <__panic>
            page->pra_vaddr = addr;
c0104549:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010454c:	8b 55 10             	mov    0x10(%ebp),%edx
c010454f:	89 50 1c             	mov    %edx,0x1c(%eax)
            //(2) According to the mm, addr AND page, setup the map of phy addr <---> logical addr
            page_insert(mm->pgdir, page, addr, perm);
c0104552:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0104555:	8b 45 08             	mov    0x8(%ebp),%eax
c0104558:	8b 40 0c             	mov    0xc(%eax),%eax
c010455b:	ff 75 f0             	pushl  -0x10(%ebp)
c010455e:	ff 75 10             	pushl  0x10(%ebp)
c0104561:	52                   	push   %edx
c0104562:	50                   	push   %eax
c0104563:	e8 91 37 00 00       	call   c0107cf9 <page_insert>
c0104568:	83 c4 10             	add    $0x10,%esp
            //(3) make the page swappable.
            swap_map_swappable(mm, addr, page, 1);
c010456b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010456e:	6a 01                	push   $0x1
c0104570:	50                   	push   %eax
c0104571:	ff 75 10             	pushl  0x10(%ebp)
c0104574:	ff 75 08             	pushl  0x8(%ebp)
c0104577:	e8 b8 0e 00 00       	call   c0105434 <swap_map_swappable>
c010457c:	83 c4 10             	add    $0x10,%esp
c010457f:	eb 18                	jmp    c0104599 <do_pgfault+0x201>
        }
        else {
            cprintf("no swap_init_ok but ptep is %x, failed\n",*ptep);
c0104581:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104584:	8b 00                	mov    (%eax),%eax
c0104586:	83 ec 08             	sub    $0x8,%esp
c0104589:	50                   	push   %eax
c010458a:	68 b8 c7 10 c0       	push   $0xc010c7b8
c010458f:	e8 03 bd ff ff       	call   c0100297 <cprintf>
c0104594:	83 c4 10             	add    $0x10,%esp
            goto failed;
c0104597:	eb 07                	jmp    c01045a0 <do_pgfault+0x208>
            cprintf("no swap_init_ok but ptep is %x, failed\n",*ptep);
            goto failed;
        }
#endif
   }
   ret = 0;
c0104599:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
failed:
    return ret;
c01045a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01045a3:	c9                   	leave  
c01045a4:	c3                   	ret    

c01045a5 <user_mem_check>:

bool
user_mem_check(struct mm_struct *mm, uintptr_t addr, size_t len, bool write) {
c01045a5:	55                   	push   %ebp
c01045a6:	89 e5                	mov    %esp,%ebp
c01045a8:	83 ec 10             	sub    $0x10,%esp
    if (mm != NULL) {
c01045ab:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01045af:	0f 84 dc 00 00 00    	je     c0104691 <user_mem_check+0xec>
        if (!USER_ACCESS(addr, addr + len)) {
c01045b5:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c01045bc:	76 1c                	jbe    c01045da <user_mem_check+0x35>
c01045be:	8b 55 0c             	mov    0xc(%ebp),%edx
c01045c1:	8b 45 10             	mov    0x10(%ebp),%eax
c01045c4:	01 d0                	add    %edx,%eax
c01045c6:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01045c9:	76 0f                	jbe    c01045da <user_mem_check+0x35>
c01045cb:	8b 55 0c             	mov    0xc(%ebp),%edx
c01045ce:	8b 45 10             	mov    0x10(%ebp),%eax
c01045d1:	01 d0                	add    %edx,%eax
c01045d3:	3d 00 00 00 b0       	cmp    $0xb0000000,%eax
c01045d8:	76 0a                	jbe    c01045e4 <user_mem_check+0x3f>
            return 0;
c01045da:	b8 00 00 00 00       	mov    $0x0,%eax
c01045df:	e9 df 00 00 00       	jmp    c01046c3 <user_mem_check+0x11e>
        }
        struct vma_struct *vma;
        uintptr_t start = addr, end = addr + len;
c01045e4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01045e7:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01045ea:	8b 55 0c             	mov    0xc(%ebp),%edx
c01045ed:	8b 45 10             	mov    0x10(%ebp),%eax
c01045f0:	01 d0                	add    %edx,%eax
c01045f2:	89 45 f8             	mov    %eax,-0x8(%ebp)
        while (start < end) {
c01045f5:	e9 84 00 00 00       	jmp    c010467e <user_mem_check+0xd9>
            if ((vma = find_vma(mm, start)) == NULL || start < vma->vm_start) {
c01045fa:	ff 75 fc             	pushl  -0x4(%ebp)
c01045fd:	ff 75 08             	pushl  0x8(%ebp)
c0104600:	e8 31 f1 ff ff       	call   c0103736 <find_vma>
c0104605:	83 c4 08             	add    $0x8,%esp
c0104608:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010460b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010460f:	74 0b                	je     c010461c <user_mem_check+0x77>
c0104611:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104614:	8b 40 04             	mov    0x4(%eax),%eax
c0104617:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c010461a:	76 0a                	jbe    c0104626 <user_mem_check+0x81>
                return 0;
c010461c:	b8 00 00 00 00       	mov    $0x0,%eax
c0104621:	e9 9d 00 00 00       	jmp    c01046c3 <user_mem_check+0x11e>
            }
            if (!(vma->vm_flags & ((write) ? VM_WRITE : VM_READ))) {
c0104626:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104629:	8b 40 0c             	mov    0xc(%eax),%eax
c010462c:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0104630:	74 07                	je     c0104639 <user_mem_check+0x94>
c0104632:	ba 02 00 00 00       	mov    $0x2,%edx
c0104637:	eb 05                	jmp    c010463e <user_mem_check+0x99>
c0104639:	ba 01 00 00 00       	mov    $0x1,%edx
c010463e:	21 d0                	and    %edx,%eax
c0104640:	85 c0                	test   %eax,%eax
c0104642:	75 07                	jne    c010464b <user_mem_check+0xa6>
                return 0;
c0104644:	b8 00 00 00 00       	mov    $0x0,%eax
c0104649:	eb 78                	jmp    c01046c3 <user_mem_check+0x11e>
            }
            if (write && (vma->vm_flags & VM_STACK)) {
c010464b:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010464f:	74 24                	je     c0104675 <user_mem_check+0xd0>
c0104651:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104654:	8b 40 0c             	mov    0xc(%eax),%eax
c0104657:	83 e0 08             	and    $0x8,%eax
c010465a:	85 c0                	test   %eax,%eax
c010465c:	74 17                	je     c0104675 <user_mem_check+0xd0>
                if (start < vma->vm_start + PGSIZE) { //check stack start & size
c010465e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104661:	8b 40 04             	mov    0x4(%eax),%eax
c0104664:	05 00 10 00 00       	add    $0x1000,%eax
c0104669:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c010466c:	76 07                	jbe    c0104675 <user_mem_check+0xd0>
                    return 0;
c010466e:	b8 00 00 00 00       	mov    $0x0,%eax
c0104673:	eb 4e                	jmp    c01046c3 <user_mem_check+0x11e>
                }
            }
            start = vma->vm_end;
c0104675:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104678:	8b 40 08             	mov    0x8(%eax),%eax
c010467b:	89 45 fc             	mov    %eax,-0x4(%ebp)
        if (!USER_ACCESS(addr, addr + len)) {
            return 0;
        }
        struct vma_struct *vma;
        uintptr_t start = addr, end = addr + len;
        while (start < end) {
c010467e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0104681:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c0104684:	0f 82 70 ff ff ff    	jb     c01045fa <user_mem_check+0x55>
                    return 0;
                }
            }
            start = vma->vm_end;
        }
        return 1;
c010468a:	b8 01 00 00 00       	mov    $0x1,%eax
c010468f:	eb 32                	jmp    c01046c3 <user_mem_check+0x11e>
    }
    return KERN_ACCESS(addr, addr + len);
c0104691:	81 7d 0c ff ff ff bf 	cmpl   $0xbfffffff,0xc(%ebp)
c0104698:	76 23                	jbe    c01046bd <user_mem_check+0x118>
c010469a:	8b 55 0c             	mov    0xc(%ebp),%edx
c010469d:	8b 45 10             	mov    0x10(%ebp),%eax
c01046a0:	01 d0                	add    %edx,%eax
c01046a2:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01046a5:	76 16                	jbe    c01046bd <user_mem_check+0x118>
c01046a7:	8b 55 0c             	mov    0xc(%ebp),%edx
c01046aa:	8b 45 10             	mov    0x10(%ebp),%eax
c01046ad:	01 d0                	add    %edx,%eax
c01046af:	3d 00 00 00 f8       	cmp    $0xf8000000,%eax
c01046b4:	77 07                	ja     c01046bd <user_mem_check+0x118>
c01046b6:	b8 01 00 00 00       	mov    $0x1,%eax
c01046bb:	eb 05                	jmp    c01046c2 <user_mem_check+0x11d>
c01046bd:	b8 00 00 00 00       	mov    $0x0,%eax
c01046c2:	90                   	nop
}
c01046c3:	c9                   	leave  
c01046c4:	c3                   	ret    

c01046c5 <_fifo_init_mm>:
 * (2) _fifo_init_mm: init pra_list_head and let  mm->sm_priv point to the addr of pra_list_head.
 *              Now, From the memory control struct mm_struct, we can access FIFO PRA
 */
static int
_fifo_init_mm(struct mm_struct *mm)
{     
c01046c5:	55                   	push   %ebp
c01046c6:	89 e5                	mov    %esp,%ebp
c01046c8:	83 ec 10             	sub    $0x10,%esp
c01046cb:	c7 45 fc d4 30 1b c0 	movl   $0xc01b30d4,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c01046d2:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01046d5:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01046d8:	89 50 04             	mov    %edx,0x4(%eax)
c01046db:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01046de:	8b 50 04             	mov    0x4(%eax),%edx
c01046e1:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01046e4:	89 10                	mov    %edx,(%eax)
     list_init(&pra_list_head);
     mm->sm_priv = &pra_list_head;
c01046e6:	8b 45 08             	mov    0x8(%ebp),%eax
c01046e9:	c7 40 14 d4 30 1b c0 	movl   $0xc01b30d4,0x14(%eax)
     //cprintf(" mm->sm_priv %x in fifo_init_mm\n",mm->sm_priv);
     return 0;
c01046f0:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01046f5:	c9                   	leave  
c01046f6:	c3                   	ret    

c01046f7 <_fifo_map_swappable>:
/*
 * (3)_fifo_map_swappable: According FIFO PRA, we should link the most recent arrival page at the back of pra_list_head qeueue
 */
static int
_fifo_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c01046f7:	55                   	push   %ebp
c01046f8:	89 e5                	mov    %esp,%ebp
c01046fa:	83 ec 48             	sub    $0x48,%esp
    list_entry_t *head=(list_entry_t*) mm->sm_priv;
c01046fd:	8b 45 08             	mov    0x8(%ebp),%eax
c0104700:	8b 40 14             	mov    0x14(%eax),%eax
c0104703:	89 45 f0             	mov    %eax,-0x10(%ebp)
    list_entry_t *entry=&(page->pra_page_link);
c0104706:	8b 45 10             	mov    0x10(%ebp),%eax
c0104709:	83 c0 14             	add    $0x14,%eax
c010470c:	89 45 ec             	mov    %eax,-0x14(%ebp)
 
    assert(entry != NULL && head != NULL);
c010470f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0104713:	74 06                	je     c010471b <_fifo_map_swappable+0x24>
c0104715:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0104719:	75 16                	jne    c0104731 <_fifo_map_swappable+0x3a>
c010471b:	68 e0 c7 10 c0       	push   $0xc010c7e0
c0104720:	68 fe c7 10 c0       	push   $0xc010c7fe
c0104725:	6a 32                	push   $0x32
c0104727:	68 13 c8 10 c0       	push   $0xc010c813
c010472c:	e8 cc bc ff ff       	call   c01003fd <__panic>
    //record the page access situlation
    /*LAB3 EXERCISE 2: YOUR CODE*/ 
    // not swap in but call this func, means failed to swap out 
    if (swap_in == 0) {
c0104731:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0104735:	75 57                	jne    c010478e <_fifo_map_swappable+0x97>
        list_entry_t *le_prev = head, *le;
c0104737:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010473a:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while ((le = list_next(le_prev)) != head) {
c010473d:	eb 38                	jmp    c0104777 <_fifo_map_swappable+0x80>
            if (le == entry) {
c010473f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104742:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0104745:	75 2a                	jne    c0104771 <_fifo_map_swappable+0x7a>
c0104747:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010474a:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010474d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104750:	8b 40 04             	mov    0x4(%eax),%eax
c0104753:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0104756:	8b 12                	mov    (%edx),%edx
c0104758:	89 55 d8             	mov    %edx,-0x28(%ebp)
c010475b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010475e:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0104761:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0104764:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0104767:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010476a:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010476d:	89 10                	mov    %edx,(%eax)
                list_del(le);
                break;
c010476f:	eb 1d                	jmp    c010478e <_fifo_map_swappable+0x97>
            }
            le_prev = le;        
c0104771:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104774:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104777:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010477a:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010477d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104780:	8b 40 04             	mov    0x4(%eax),%eax
    //record the page access situlation
    /*LAB3 EXERCISE 2: YOUR CODE*/ 
    // not swap in but call this func, means failed to swap out 
    if (swap_in == 0) {
        list_entry_t *le_prev = head, *le;
        while ((le = list_next(le_prev)) != head) {
c0104783:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0104786:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104789:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010478c:	75 b1                	jne    c010473f <_fifo_map_swappable+0x48>
c010478e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104791:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0104794:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104797:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c010479a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010479d:	8b 00                	mov    (%eax),%eax
c010479f:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01047a2:	89 55 cc             	mov    %edx,-0x34(%ebp)
c01047a5:	89 45 c8             	mov    %eax,-0x38(%ebp)
c01047a8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01047ab:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c01047ae:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01047b1:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01047b4:	89 10                	mov    %edx,(%eax)
c01047b6:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01047b9:	8b 10                	mov    (%eax),%edx
c01047bb:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01047be:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c01047c1:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01047c4:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c01047c7:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c01047ca:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01047cd:	8b 55 c8             	mov    -0x38(%ebp),%edx
c01047d0:	89 10                	mov    %edx,(%eax)
            le_prev = le;        
        }
    }
    //(1)link the most recent arrival page at the back of the pra_list_head qeueue.
    list_add_before(head, entry);
    return 0;
c01047d2:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01047d7:	c9                   	leave  
c01047d8:	c3                   	ret    

c01047d9 <_fifo_swap_out_victim>:
 *  (4)_fifo_swap_out_victim: According FIFO PRA, we should unlink the  earliest arrival page in front of pra_list_head qeueue,
 *                            then assign the value of *ptr_page to the addr of this page.
 */
static int
_fifo_swap_out_victim(struct mm_struct *mm, struct Page ** ptr_page, int in_tick)
{
c01047d9:	55                   	push   %ebp
c01047da:	89 e5                	mov    %esp,%ebp
c01047dc:	83 ec 28             	sub    $0x28,%esp
     list_entry_t *head=(list_entry_t*) mm->sm_priv;
c01047df:	8b 45 08             	mov    0x8(%ebp),%eax
c01047e2:	8b 40 14             	mov    0x14(%eax),%eax
c01047e5:	89 45 f4             	mov    %eax,-0xc(%ebp)
         assert(head != NULL);
c01047e8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01047ec:	75 16                	jne    c0104804 <_fifo_swap_out_victim+0x2b>
c01047ee:	68 27 c8 10 c0       	push   $0xc010c827
c01047f3:	68 fe c7 10 c0       	push   $0xc010c7fe
c01047f8:	6a 4c                	push   $0x4c
c01047fa:	68 13 c8 10 c0       	push   $0xc010c813
c01047ff:	e8 f9 bb ff ff       	call   c01003fd <__panic>
     assert(in_tick==0);
c0104804:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0104808:	74 16                	je     c0104820 <_fifo_swap_out_victim+0x47>
c010480a:	68 34 c8 10 c0       	push   $0xc010c834
c010480f:	68 fe c7 10 c0       	push   $0xc010c7fe
c0104814:	6a 4d                	push   $0x4d
c0104816:	68 13 c8 10 c0       	push   $0xc010c813
c010481b:	e8 dd bb ff ff       	call   c01003fd <__panic>
c0104820:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104823:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0104826:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104829:	8b 40 04             	mov    0x4(%eax),%eax
     /* Select the victim */
     /*LAB3 EXERCISE 2: YOUR CODE*/ 
    //(1)  unlink the  earliest arrival page in front of pra_list_head qeueue
    list_entry_t *front = list_next(head);
c010482c:	89 45 ec             	mov    %eax,-0x14(%ebp)
    assert(front != head);
c010482f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104832:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104835:	75 16                	jne    c010484d <_fifo_swap_out_victim+0x74>
c0104837:	68 3f c8 10 c0       	push   $0xc010c83f
c010483c:	68 fe c7 10 c0       	push   $0xc010c7fe
c0104841:	6a 52                	push   $0x52
c0104843:	68 13 c8 10 c0       	push   $0xc010c813
c0104848:	e8 b0 bb ff ff       	call   c01003fd <__panic>
c010484d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104850:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0104853:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104856:	8b 40 04             	mov    0x4(%eax),%eax
c0104859:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010485c:	8b 12                	mov    (%edx),%edx
c010485e:	89 55 e0             	mov    %edx,-0x20(%ebp)
c0104861:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0104864:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104867:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010486a:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010486d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104870:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0104873:	89 10                	mov    %edx,(%eax)
    list_del(front);
    //(2)  assign the value of *ptr_page to the addr of this page
    struct Page *page = le2page(front, pra_page_link);
c0104875:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104878:	83 e8 14             	sub    $0x14,%eax
c010487b:	89 45 e8             	mov    %eax,-0x18(%ebp)
    assert(page != NULL);
c010487e:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0104882:	75 16                	jne    c010489a <_fifo_swap_out_victim+0xc1>
c0104884:	68 4d c8 10 c0       	push   $0xc010c84d
c0104889:	68 fe c7 10 c0       	push   $0xc010c7fe
c010488e:	6a 56                	push   $0x56
c0104890:	68 13 c8 10 c0       	push   $0xc010c813
c0104895:	e8 63 bb ff ff       	call   c01003fd <__panic>
    *ptr_page = page;
c010489a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010489d:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01048a0:	89 10                	mov    %edx,(%eax)
    return 0;
c01048a2:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01048a7:	c9                   	leave  
c01048a8:	c3                   	ret    

c01048a9 <_fifo_check_swap>:

static int
_fifo_check_swap(void) {
c01048a9:	55                   	push   %ebp
c01048aa:	89 e5                	mov    %esp,%ebp
c01048ac:	83 ec 08             	sub    $0x8,%esp
    cprintf("write Virt Page c in fifo_check_swap\n");
c01048af:	83 ec 0c             	sub    $0xc,%esp
c01048b2:	68 5c c8 10 c0       	push   $0xc010c85c
c01048b7:	e8 db b9 ff ff       	call   c0100297 <cprintf>
c01048bc:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x3000 = 0x0c;
c01048bf:	b8 00 30 00 00       	mov    $0x3000,%eax
c01048c4:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==4);
c01048c7:	a1 64 0f 1b c0       	mov    0xc01b0f64,%eax
c01048cc:	83 f8 04             	cmp    $0x4,%eax
c01048cf:	74 16                	je     c01048e7 <_fifo_check_swap+0x3e>
c01048d1:	68 82 c8 10 c0       	push   $0xc010c882
c01048d6:	68 fe c7 10 c0       	push   $0xc010c7fe
c01048db:	6a 5f                	push   $0x5f
c01048dd:	68 13 c8 10 c0       	push   $0xc010c813
c01048e2:	e8 16 bb ff ff       	call   c01003fd <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c01048e7:	83 ec 0c             	sub    $0xc,%esp
c01048ea:	68 94 c8 10 c0       	push   $0xc010c894
c01048ef:	e8 a3 b9 ff ff       	call   c0100297 <cprintf>
c01048f4:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x1000 = 0x0a;
c01048f7:	b8 00 10 00 00       	mov    $0x1000,%eax
c01048fc:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==4);
c01048ff:	a1 64 0f 1b c0       	mov    0xc01b0f64,%eax
c0104904:	83 f8 04             	cmp    $0x4,%eax
c0104907:	74 16                	je     c010491f <_fifo_check_swap+0x76>
c0104909:	68 82 c8 10 c0       	push   $0xc010c882
c010490e:	68 fe c7 10 c0       	push   $0xc010c7fe
c0104913:	6a 62                	push   $0x62
c0104915:	68 13 c8 10 c0       	push   $0xc010c813
c010491a:	e8 de ba ff ff       	call   c01003fd <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c010491f:	83 ec 0c             	sub    $0xc,%esp
c0104922:	68 bc c8 10 c0       	push   $0xc010c8bc
c0104927:	e8 6b b9 ff ff       	call   c0100297 <cprintf>
c010492c:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x4000 = 0x0d;
c010492f:	b8 00 40 00 00       	mov    $0x4000,%eax
c0104934:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==4);
c0104937:	a1 64 0f 1b c0       	mov    0xc01b0f64,%eax
c010493c:	83 f8 04             	cmp    $0x4,%eax
c010493f:	74 16                	je     c0104957 <_fifo_check_swap+0xae>
c0104941:	68 82 c8 10 c0       	push   $0xc010c882
c0104946:	68 fe c7 10 c0       	push   $0xc010c7fe
c010494b:	6a 65                	push   $0x65
c010494d:	68 13 c8 10 c0       	push   $0xc010c813
c0104952:	e8 a6 ba ff ff       	call   c01003fd <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0104957:	83 ec 0c             	sub    $0xc,%esp
c010495a:	68 e4 c8 10 c0       	push   $0xc010c8e4
c010495f:	e8 33 b9 ff ff       	call   c0100297 <cprintf>
c0104964:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x2000 = 0x0b;
c0104967:	b8 00 20 00 00       	mov    $0x2000,%eax
c010496c:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==4);
c010496f:	a1 64 0f 1b c0       	mov    0xc01b0f64,%eax
c0104974:	83 f8 04             	cmp    $0x4,%eax
c0104977:	74 16                	je     c010498f <_fifo_check_swap+0xe6>
c0104979:	68 82 c8 10 c0       	push   $0xc010c882
c010497e:	68 fe c7 10 c0       	push   $0xc010c7fe
c0104983:	6a 68                	push   $0x68
c0104985:	68 13 c8 10 c0       	push   $0xc010c813
c010498a:	e8 6e ba ff ff       	call   c01003fd <__panic>
    cprintf("write Virt Page e in fifo_check_swap\n");
c010498f:	83 ec 0c             	sub    $0xc,%esp
c0104992:	68 0c c9 10 c0       	push   $0xc010c90c
c0104997:	e8 fb b8 ff ff       	call   c0100297 <cprintf>
c010499c:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x5000 = 0x0e;
c010499f:	b8 00 50 00 00       	mov    $0x5000,%eax
c01049a4:	c6 00 0e             	movb   $0xe,(%eax)
    assert(pgfault_num==5);
c01049a7:	a1 64 0f 1b c0       	mov    0xc01b0f64,%eax
c01049ac:	83 f8 05             	cmp    $0x5,%eax
c01049af:	74 16                	je     c01049c7 <_fifo_check_swap+0x11e>
c01049b1:	68 32 c9 10 c0       	push   $0xc010c932
c01049b6:	68 fe c7 10 c0       	push   $0xc010c7fe
c01049bb:	6a 6b                	push   $0x6b
c01049bd:	68 13 c8 10 c0       	push   $0xc010c813
c01049c2:	e8 36 ba ff ff       	call   c01003fd <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c01049c7:	83 ec 0c             	sub    $0xc,%esp
c01049ca:	68 e4 c8 10 c0       	push   $0xc010c8e4
c01049cf:	e8 c3 b8 ff ff       	call   c0100297 <cprintf>
c01049d4:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x2000 = 0x0b;
c01049d7:	b8 00 20 00 00       	mov    $0x2000,%eax
c01049dc:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==5);
c01049df:	a1 64 0f 1b c0       	mov    0xc01b0f64,%eax
c01049e4:	83 f8 05             	cmp    $0x5,%eax
c01049e7:	74 16                	je     c01049ff <_fifo_check_swap+0x156>
c01049e9:	68 32 c9 10 c0       	push   $0xc010c932
c01049ee:	68 fe c7 10 c0       	push   $0xc010c7fe
c01049f3:	6a 6e                	push   $0x6e
c01049f5:	68 13 c8 10 c0       	push   $0xc010c813
c01049fa:	e8 fe b9 ff ff       	call   c01003fd <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c01049ff:	83 ec 0c             	sub    $0xc,%esp
c0104a02:	68 94 c8 10 c0       	push   $0xc010c894
c0104a07:	e8 8b b8 ff ff       	call   c0100297 <cprintf>
c0104a0c:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x1000 = 0x0a;
c0104a0f:	b8 00 10 00 00       	mov    $0x1000,%eax
c0104a14:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==6);
c0104a17:	a1 64 0f 1b c0       	mov    0xc01b0f64,%eax
c0104a1c:	83 f8 06             	cmp    $0x6,%eax
c0104a1f:	74 16                	je     c0104a37 <_fifo_check_swap+0x18e>
c0104a21:	68 41 c9 10 c0       	push   $0xc010c941
c0104a26:	68 fe c7 10 c0       	push   $0xc010c7fe
c0104a2b:	6a 71                	push   $0x71
c0104a2d:	68 13 c8 10 c0       	push   $0xc010c813
c0104a32:	e8 c6 b9 ff ff       	call   c01003fd <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0104a37:	83 ec 0c             	sub    $0xc,%esp
c0104a3a:	68 e4 c8 10 c0       	push   $0xc010c8e4
c0104a3f:	e8 53 b8 ff ff       	call   c0100297 <cprintf>
c0104a44:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x2000 = 0x0b;
c0104a47:	b8 00 20 00 00       	mov    $0x2000,%eax
c0104a4c:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==7);
c0104a4f:	a1 64 0f 1b c0       	mov    0xc01b0f64,%eax
c0104a54:	83 f8 07             	cmp    $0x7,%eax
c0104a57:	74 16                	je     c0104a6f <_fifo_check_swap+0x1c6>
c0104a59:	68 50 c9 10 c0       	push   $0xc010c950
c0104a5e:	68 fe c7 10 c0       	push   $0xc010c7fe
c0104a63:	6a 74                	push   $0x74
c0104a65:	68 13 c8 10 c0       	push   $0xc010c813
c0104a6a:	e8 8e b9 ff ff       	call   c01003fd <__panic>
    cprintf("write Virt Page c in fifo_check_swap\n");
c0104a6f:	83 ec 0c             	sub    $0xc,%esp
c0104a72:	68 5c c8 10 c0       	push   $0xc010c85c
c0104a77:	e8 1b b8 ff ff       	call   c0100297 <cprintf>
c0104a7c:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x3000 = 0x0c;
c0104a7f:	b8 00 30 00 00       	mov    $0x3000,%eax
c0104a84:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==8);
c0104a87:	a1 64 0f 1b c0       	mov    0xc01b0f64,%eax
c0104a8c:	83 f8 08             	cmp    $0x8,%eax
c0104a8f:	74 16                	je     c0104aa7 <_fifo_check_swap+0x1fe>
c0104a91:	68 5f c9 10 c0       	push   $0xc010c95f
c0104a96:	68 fe c7 10 c0       	push   $0xc010c7fe
c0104a9b:	6a 77                	push   $0x77
c0104a9d:	68 13 c8 10 c0       	push   $0xc010c813
c0104aa2:	e8 56 b9 ff ff       	call   c01003fd <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c0104aa7:	83 ec 0c             	sub    $0xc,%esp
c0104aaa:	68 bc c8 10 c0       	push   $0xc010c8bc
c0104aaf:	e8 e3 b7 ff ff       	call   c0100297 <cprintf>
c0104ab4:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x4000 = 0x0d;
c0104ab7:	b8 00 40 00 00       	mov    $0x4000,%eax
c0104abc:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==9);
c0104abf:	a1 64 0f 1b c0       	mov    0xc01b0f64,%eax
c0104ac4:	83 f8 09             	cmp    $0x9,%eax
c0104ac7:	74 16                	je     c0104adf <_fifo_check_swap+0x236>
c0104ac9:	68 6e c9 10 c0       	push   $0xc010c96e
c0104ace:	68 fe c7 10 c0       	push   $0xc010c7fe
c0104ad3:	6a 7a                	push   $0x7a
c0104ad5:	68 13 c8 10 c0       	push   $0xc010c813
c0104ada:	e8 1e b9 ff ff       	call   c01003fd <__panic>
    cprintf("write Virt Page e in fifo_check_swap\n");
c0104adf:	83 ec 0c             	sub    $0xc,%esp
c0104ae2:	68 0c c9 10 c0       	push   $0xc010c90c
c0104ae7:	e8 ab b7 ff ff       	call   c0100297 <cprintf>
c0104aec:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x5000 = 0x0e;
c0104aef:	b8 00 50 00 00       	mov    $0x5000,%eax
c0104af4:	c6 00 0e             	movb   $0xe,(%eax)
    assert(pgfault_num==10);
c0104af7:	a1 64 0f 1b c0       	mov    0xc01b0f64,%eax
c0104afc:	83 f8 0a             	cmp    $0xa,%eax
c0104aff:	74 16                	je     c0104b17 <_fifo_check_swap+0x26e>
c0104b01:	68 7d c9 10 c0       	push   $0xc010c97d
c0104b06:	68 fe c7 10 c0       	push   $0xc010c7fe
c0104b0b:	6a 7d                	push   $0x7d
c0104b0d:	68 13 c8 10 c0       	push   $0xc010c813
c0104b12:	e8 e6 b8 ff ff       	call   c01003fd <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c0104b17:	83 ec 0c             	sub    $0xc,%esp
c0104b1a:	68 94 c8 10 c0       	push   $0xc010c894
c0104b1f:	e8 73 b7 ff ff       	call   c0100297 <cprintf>
c0104b24:	83 c4 10             	add    $0x10,%esp
    assert(*(unsigned char *)0x1000 == 0x0a);
c0104b27:	b8 00 10 00 00       	mov    $0x1000,%eax
c0104b2c:	0f b6 00             	movzbl (%eax),%eax
c0104b2f:	3c 0a                	cmp    $0xa,%al
c0104b31:	74 16                	je     c0104b49 <_fifo_check_swap+0x2a0>
c0104b33:	68 90 c9 10 c0       	push   $0xc010c990
c0104b38:	68 fe c7 10 c0       	push   $0xc010c7fe
c0104b3d:	6a 7f                	push   $0x7f
c0104b3f:	68 13 c8 10 c0       	push   $0xc010c813
c0104b44:	e8 b4 b8 ff ff       	call   c01003fd <__panic>
    *(unsigned char *)0x1000 = 0x0a;
c0104b49:	b8 00 10 00 00       	mov    $0x1000,%eax
c0104b4e:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==11);
c0104b51:	a1 64 0f 1b c0       	mov    0xc01b0f64,%eax
c0104b56:	83 f8 0b             	cmp    $0xb,%eax
c0104b59:	74 19                	je     c0104b74 <_fifo_check_swap+0x2cb>
c0104b5b:	68 b1 c9 10 c0       	push   $0xc010c9b1
c0104b60:	68 fe c7 10 c0       	push   $0xc010c7fe
c0104b65:	68 81 00 00 00       	push   $0x81
c0104b6a:	68 13 c8 10 c0       	push   $0xc010c813
c0104b6f:	e8 89 b8 ff ff       	call   c01003fd <__panic>
    return 0;
c0104b74:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104b79:	c9                   	leave  
c0104b7a:	c3                   	ret    

c0104b7b <_fifo_init>:


static int
_fifo_init(void)
{
c0104b7b:	55                   	push   %ebp
c0104b7c:	89 e5                	mov    %esp,%ebp
    return 0;
c0104b7e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104b83:	5d                   	pop    %ebp
c0104b84:	c3                   	ret    

c0104b85 <_fifo_set_unswappable>:

static int
_fifo_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c0104b85:	55                   	push   %ebp
c0104b86:	89 e5                	mov    %esp,%ebp
    return 0;
c0104b88:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104b8d:	5d                   	pop    %ebp
c0104b8e:	c3                   	ret    

c0104b8f <_fifo_tick_event>:

static int
_fifo_tick_event(struct mm_struct *mm)
{ return 0; }
c0104b8f:	55                   	push   %ebp
c0104b90:	89 e5                	mov    %esp,%ebp
c0104b92:	b8 00 00 00 00       	mov    $0x0,%eax
c0104b97:	5d                   	pop    %ebp
c0104b98:	c3                   	ret    

c0104b99 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0104b99:	55                   	push   %ebp
c0104b9a:	89 e5                	mov    %esp,%ebp
c0104b9c:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0104b9f:	9c                   	pushf  
c0104ba0:	58                   	pop    %eax
c0104ba1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0104ba4:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0104ba7:	25 00 02 00 00       	and    $0x200,%eax
c0104bac:	85 c0                	test   %eax,%eax
c0104bae:	74 0c                	je     c0104bbc <__intr_save+0x23>
        intr_disable();
c0104bb0:	e8 07 d6 ff ff       	call   c01021bc <intr_disable>
        return 1;
c0104bb5:	b8 01 00 00 00       	mov    $0x1,%eax
c0104bba:	eb 05                	jmp    c0104bc1 <__intr_save+0x28>
    }
    return 0;
c0104bbc:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104bc1:	c9                   	leave  
c0104bc2:	c3                   	ret    

c0104bc3 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0104bc3:	55                   	push   %ebp
c0104bc4:	89 e5                	mov    %esp,%ebp
c0104bc6:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0104bc9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104bcd:	74 05                	je     c0104bd4 <__intr_restore+0x11>
        intr_enable();
c0104bcf:	e8 e1 d5 ff ff       	call   c01021b5 <intr_enable>
    }
}
c0104bd4:	90                   	nop
c0104bd5:	c9                   	leave  
c0104bd6:	c3                   	ret    

c0104bd7 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0104bd7:	55                   	push   %ebp
c0104bd8:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0104bda:	8b 45 08             	mov    0x8(%ebp),%eax
c0104bdd:	8b 15 b8 31 1b c0    	mov    0xc01b31b8,%edx
c0104be3:	29 d0                	sub    %edx,%eax
c0104be5:	c1 f8 05             	sar    $0x5,%eax
}
c0104be8:	5d                   	pop    %ebp
c0104be9:	c3                   	ret    

c0104bea <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0104bea:	55                   	push   %ebp
c0104beb:	89 e5                	mov    %esp,%ebp
    return page2ppn(page) << PGSHIFT;
c0104bed:	ff 75 08             	pushl  0x8(%ebp)
c0104bf0:	e8 e2 ff ff ff       	call   c0104bd7 <page2ppn>
c0104bf5:	83 c4 04             	add    $0x4,%esp
c0104bf8:	c1 e0 0c             	shl    $0xc,%eax
}
c0104bfb:	c9                   	leave  
c0104bfc:	c3                   	ret    

c0104bfd <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c0104bfd:	55                   	push   %ebp
c0104bfe:	89 e5                	mov    %esp,%ebp
c0104c00:	83 ec 08             	sub    $0x8,%esp
    if (PPN(pa) >= npage) {
c0104c03:	8b 45 08             	mov    0x8(%ebp),%eax
c0104c06:	c1 e8 0c             	shr    $0xc,%eax
c0104c09:	89 c2                	mov    %eax,%edx
c0104c0b:	a1 80 0f 1b c0       	mov    0xc01b0f80,%eax
c0104c10:	39 c2                	cmp    %eax,%edx
c0104c12:	72 14                	jb     c0104c28 <pa2page+0x2b>
        panic("pa2page called with invalid pa");
c0104c14:	83 ec 04             	sub    $0x4,%esp
c0104c17:	68 d4 c9 10 c0       	push   $0xc010c9d4
c0104c1c:	6a 5e                	push   $0x5e
c0104c1e:	68 f3 c9 10 c0       	push   $0xc010c9f3
c0104c23:	e8 d5 b7 ff ff       	call   c01003fd <__panic>
    }
    return &pages[PPN(pa)];
c0104c28:	a1 b8 31 1b c0       	mov    0xc01b31b8,%eax
c0104c2d:	8b 55 08             	mov    0x8(%ebp),%edx
c0104c30:	c1 ea 0c             	shr    $0xc,%edx
c0104c33:	c1 e2 05             	shl    $0x5,%edx
c0104c36:	01 d0                	add    %edx,%eax
}
c0104c38:	c9                   	leave  
c0104c39:	c3                   	ret    

c0104c3a <page2kva>:

static inline void *
page2kva(struct Page *page) {
c0104c3a:	55                   	push   %ebp
c0104c3b:	89 e5                	mov    %esp,%ebp
c0104c3d:	83 ec 18             	sub    $0x18,%esp
    return KADDR(page2pa(page));
c0104c40:	ff 75 08             	pushl  0x8(%ebp)
c0104c43:	e8 a2 ff ff ff       	call   c0104bea <page2pa>
c0104c48:	83 c4 04             	add    $0x4,%esp
c0104c4b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104c4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c51:	c1 e8 0c             	shr    $0xc,%eax
c0104c54:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104c57:	a1 80 0f 1b c0       	mov    0xc01b0f80,%eax
c0104c5c:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0104c5f:	72 14                	jb     c0104c75 <page2kva+0x3b>
c0104c61:	ff 75 f4             	pushl  -0xc(%ebp)
c0104c64:	68 04 ca 10 c0       	push   $0xc010ca04
c0104c69:	6a 65                	push   $0x65
c0104c6b:	68 f3 c9 10 c0       	push   $0xc010c9f3
c0104c70:	e8 88 b7 ff ff       	call   c01003fd <__panic>
c0104c75:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c78:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c0104c7d:	c9                   	leave  
c0104c7e:	c3                   	ret    

c0104c7f <kva2page>:

static inline struct Page *
kva2page(void *kva) {
c0104c7f:	55                   	push   %ebp
c0104c80:	89 e5                	mov    %esp,%ebp
c0104c82:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PADDR(kva));
c0104c85:	8b 45 08             	mov    0x8(%ebp),%eax
c0104c88:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104c8b:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c0104c92:	77 14                	ja     c0104ca8 <kva2page+0x29>
c0104c94:	ff 75 f4             	pushl  -0xc(%ebp)
c0104c97:	68 28 ca 10 c0       	push   $0xc010ca28
c0104c9c:	6a 6a                	push   $0x6a
c0104c9e:	68 f3 c9 10 c0       	push   $0xc010c9f3
c0104ca3:	e8 55 b7 ff ff       	call   c01003fd <__panic>
c0104ca8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104cab:	05 00 00 00 40       	add    $0x40000000,%eax
c0104cb0:	83 ec 0c             	sub    $0xc,%esp
c0104cb3:	50                   	push   %eax
c0104cb4:	e8 44 ff ff ff       	call   c0104bfd <pa2page>
c0104cb9:	83 c4 10             	add    $0x10,%esp
}
c0104cbc:	c9                   	leave  
c0104cbd:	c3                   	ret    

c0104cbe <__slob_get_free_pages>:
static slob_t *slobfree = &arena;
static bigblock_t *bigblocks;


static void* __slob_get_free_pages(gfp_t gfp, int order)
{
c0104cbe:	55                   	push   %ebp
c0104cbf:	89 e5                	mov    %esp,%ebp
c0104cc1:	83 ec 18             	sub    $0x18,%esp
  struct Page * page = alloc_pages(1 << order);
c0104cc4:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104cc7:	ba 01 00 00 00       	mov    $0x1,%edx
c0104ccc:	89 c1                	mov    %eax,%ecx
c0104cce:	d3 e2                	shl    %cl,%edx
c0104cd0:	89 d0                	mov    %edx,%eax
c0104cd2:	83 ec 0c             	sub    $0xc,%esp
c0104cd5:	50                   	push   %eax
c0104cd6:	e8 d1 23 00 00       	call   c01070ac <alloc_pages>
c0104cdb:	83 c4 10             	add    $0x10,%esp
c0104cde:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if(!page)
c0104ce1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104ce5:	75 07                	jne    c0104cee <__slob_get_free_pages+0x30>
    return NULL;
c0104ce7:	b8 00 00 00 00       	mov    $0x0,%eax
c0104cec:	eb 0e                	jmp    c0104cfc <__slob_get_free_pages+0x3e>
  return page2kva(page);
c0104cee:	83 ec 0c             	sub    $0xc,%esp
c0104cf1:	ff 75 f4             	pushl  -0xc(%ebp)
c0104cf4:	e8 41 ff ff ff       	call   c0104c3a <page2kva>
c0104cf9:	83 c4 10             	add    $0x10,%esp
}
c0104cfc:	c9                   	leave  
c0104cfd:	c3                   	ret    

c0104cfe <__slob_free_pages>:

#define __slob_get_free_page(gfp) __slob_get_free_pages(gfp, 0)

static inline void __slob_free_pages(unsigned long kva, int order)
{
c0104cfe:	55                   	push   %ebp
c0104cff:	89 e5                	mov    %esp,%ebp
c0104d01:	53                   	push   %ebx
c0104d02:	83 ec 04             	sub    $0x4,%esp
  free_pages(kva2page(kva), 1 << order);
c0104d05:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104d08:	ba 01 00 00 00       	mov    $0x1,%edx
c0104d0d:	89 c1                	mov    %eax,%ecx
c0104d0f:	d3 e2                	shl    %cl,%edx
c0104d11:	89 d0                	mov    %edx,%eax
c0104d13:	89 c3                	mov    %eax,%ebx
c0104d15:	8b 45 08             	mov    0x8(%ebp),%eax
c0104d18:	83 ec 0c             	sub    $0xc,%esp
c0104d1b:	50                   	push   %eax
c0104d1c:	e8 5e ff ff ff       	call   c0104c7f <kva2page>
c0104d21:	83 c4 10             	add    $0x10,%esp
c0104d24:	83 ec 08             	sub    $0x8,%esp
c0104d27:	53                   	push   %ebx
c0104d28:	50                   	push   %eax
c0104d29:	e8 ea 23 00 00       	call   c0107118 <free_pages>
c0104d2e:	83 c4 10             	add    $0x10,%esp
}
c0104d31:	90                   	nop
c0104d32:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0104d35:	c9                   	leave  
c0104d36:	c3                   	ret    

c0104d37 <slob_alloc>:

static void slob_free(void *b, int size);

static void *slob_alloc(size_t size, gfp_t gfp, int align)
{
c0104d37:	55                   	push   %ebp
c0104d38:	89 e5                	mov    %esp,%ebp
c0104d3a:	83 ec 28             	sub    $0x28,%esp
  assert( (size + SLOB_UNIT) < PAGE_SIZE );
c0104d3d:	8b 45 08             	mov    0x8(%ebp),%eax
c0104d40:	83 c0 08             	add    $0x8,%eax
c0104d43:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c0104d48:	76 16                	jbe    c0104d60 <slob_alloc+0x29>
c0104d4a:	68 4c ca 10 c0       	push   $0xc010ca4c
c0104d4f:	68 6b ca 10 c0       	push   $0xc010ca6b
c0104d54:	6a 64                	push   $0x64
c0104d56:	68 80 ca 10 c0       	push   $0xc010ca80
c0104d5b:	e8 9d b6 ff ff       	call   c01003fd <__panic>

	slob_t *prev, *cur, *aligned = 0;
c0104d60:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	int delta = 0, units = SLOB_UNITS(size);
c0104d67:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c0104d6e:	8b 45 08             	mov    0x8(%ebp),%eax
c0104d71:	83 c0 07             	add    $0x7,%eax
c0104d74:	c1 e8 03             	shr    $0x3,%eax
c0104d77:	89 45 e0             	mov    %eax,-0x20(%ebp)
	unsigned long flags;

	spin_lock_irqsave(&slob_lock, flags);
c0104d7a:	e8 1a fe ff ff       	call   c0104b99 <__intr_save>
c0104d7f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	prev = slobfree;
c0104d82:	a1 08 ca 12 c0       	mov    0xc012ca08,%eax
c0104d87:	89 45 f4             	mov    %eax,-0xc(%ebp)
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c0104d8a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d8d:	8b 40 04             	mov    0x4(%eax),%eax
c0104d90:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (align) {
c0104d93:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0104d97:	74 25                	je     c0104dbe <slob_alloc+0x87>
			aligned = (slob_t *)ALIGN((unsigned long)cur, align);
c0104d99:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104d9c:	8b 45 10             	mov    0x10(%ebp),%eax
c0104d9f:	01 d0                	add    %edx,%eax
c0104da1:	8d 50 ff             	lea    -0x1(%eax),%edx
c0104da4:	8b 45 10             	mov    0x10(%ebp),%eax
c0104da7:	f7 d8                	neg    %eax
c0104da9:	21 d0                	and    %edx,%eax
c0104dab:	89 45 ec             	mov    %eax,-0x14(%ebp)
			delta = aligned - cur;
c0104dae:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0104db1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104db4:	29 c2                	sub    %eax,%edx
c0104db6:	89 d0                	mov    %edx,%eax
c0104db8:	c1 f8 03             	sar    $0x3,%eax
c0104dbb:	89 45 e8             	mov    %eax,-0x18(%ebp)
		}
		if (cur->units >= units + delta) { /* room enough? */
c0104dbe:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104dc1:	8b 00                	mov    (%eax),%eax
c0104dc3:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c0104dc6:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0104dc9:	01 ca                	add    %ecx,%edx
c0104dcb:	39 d0                	cmp    %edx,%eax
c0104dcd:	0f 8c b1 00 00 00    	jl     c0104e84 <slob_alloc+0x14d>
			if (delta) { /* need to fragment head to align? */
c0104dd3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0104dd7:	74 38                	je     c0104e11 <slob_alloc+0xda>
				aligned->units = cur->units - delta;
c0104dd9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104ddc:	8b 00                	mov    (%eax),%eax
c0104dde:	2b 45 e8             	sub    -0x18(%ebp),%eax
c0104de1:	89 c2                	mov    %eax,%edx
c0104de3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104de6:	89 10                	mov    %edx,(%eax)
				aligned->next = cur->next;
c0104de8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104deb:	8b 50 04             	mov    0x4(%eax),%edx
c0104dee:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104df1:	89 50 04             	mov    %edx,0x4(%eax)
				cur->next = aligned;
c0104df4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104df7:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0104dfa:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = delta;
c0104dfd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104e00:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0104e03:	89 10                	mov    %edx,(%eax)
				prev = cur;
c0104e05:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104e08:	89 45 f4             	mov    %eax,-0xc(%ebp)
				cur = aligned;
c0104e0b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104e0e:	89 45 f0             	mov    %eax,-0x10(%ebp)
			}

			if (cur->units == units) /* exact fit? */
c0104e11:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104e14:	8b 00                	mov    (%eax),%eax
c0104e16:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0104e19:	75 0e                	jne    c0104e29 <slob_alloc+0xf2>
				prev->next = cur->next; /* unlink */
c0104e1b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104e1e:	8b 50 04             	mov    0x4(%eax),%edx
c0104e21:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e24:	89 50 04             	mov    %edx,0x4(%eax)
c0104e27:	eb 3c                	jmp    c0104e65 <slob_alloc+0x12e>
			else { /* fragment */
				prev->next = cur + units;
c0104e29:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104e2c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0104e33:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104e36:	01 c2                	add    %eax,%edx
c0104e38:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e3b:	89 50 04             	mov    %edx,0x4(%eax)
				prev->next->units = cur->units - units;
c0104e3e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e41:	8b 40 04             	mov    0x4(%eax),%eax
c0104e44:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104e47:	8b 12                	mov    (%edx),%edx
c0104e49:	2b 55 e0             	sub    -0x20(%ebp),%edx
c0104e4c:	89 10                	mov    %edx,(%eax)
				prev->next->next = cur->next;
c0104e4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e51:	8b 40 04             	mov    0x4(%eax),%eax
c0104e54:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104e57:	8b 52 04             	mov    0x4(%edx),%edx
c0104e5a:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = units;
c0104e5d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104e60:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0104e63:	89 10                	mov    %edx,(%eax)
			}

			slobfree = prev;
c0104e65:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e68:	a3 08 ca 12 c0       	mov    %eax,0xc012ca08
			spin_unlock_irqrestore(&slob_lock, flags);
c0104e6d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104e70:	83 ec 0c             	sub    $0xc,%esp
c0104e73:	50                   	push   %eax
c0104e74:	e8 4a fd ff ff       	call   c0104bc3 <__intr_restore>
c0104e79:	83 c4 10             	add    $0x10,%esp
			return cur;
c0104e7c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104e7f:	e9 80 00 00 00       	jmp    c0104f04 <slob_alloc+0x1cd>
		}
		if (cur == slobfree) {
c0104e84:	a1 08 ca 12 c0       	mov    0xc012ca08,%eax
c0104e89:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0104e8c:	75 62                	jne    c0104ef0 <slob_alloc+0x1b9>
			spin_unlock_irqrestore(&slob_lock, flags);
c0104e8e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104e91:	83 ec 0c             	sub    $0xc,%esp
c0104e94:	50                   	push   %eax
c0104e95:	e8 29 fd ff ff       	call   c0104bc3 <__intr_restore>
c0104e9a:	83 c4 10             	add    $0x10,%esp

			if (size == PAGE_SIZE) /* trying to shrink arena? */
c0104e9d:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c0104ea4:	75 07                	jne    c0104ead <slob_alloc+0x176>
				return 0;
c0104ea6:	b8 00 00 00 00       	mov    $0x0,%eax
c0104eab:	eb 57                	jmp    c0104f04 <slob_alloc+0x1cd>

			cur = (slob_t *)__slob_get_free_page(gfp);
c0104ead:	83 ec 08             	sub    $0x8,%esp
c0104eb0:	6a 00                	push   $0x0
c0104eb2:	ff 75 0c             	pushl  0xc(%ebp)
c0104eb5:	e8 04 fe ff ff       	call   c0104cbe <__slob_get_free_pages>
c0104eba:	83 c4 10             	add    $0x10,%esp
c0104ebd:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (!cur)
c0104ec0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0104ec4:	75 07                	jne    c0104ecd <slob_alloc+0x196>
				return 0;
c0104ec6:	b8 00 00 00 00       	mov    $0x0,%eax
c0104ecb:	eb 37                	jmp    c0104f04 <slob_alloc+0x1cd>

			slob_free(cur, PAGE_SIZE);
c0104ecd:	83 ec 08             	sub    $0x8,%esp
c0104ed0:	68 00 10 00 00       	push   $0x1000
c0104ed5:	ff 75 f0             	pushl  -0x10(%ebp)
c0104ed8:	e8 29 00 00 00       	call   c0104f06 <slob_free>
c0104edd:	83 c4 10             	add    $0x10,%esp
			spin_lock_irqsave(&slob_lock, flags);
c0104ee0:	e8 b4 fc ff ff       	call   c0104b99 <__intr_save>
c0104ee5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			cur = slobfree;
c0104ee8:	a1 08 ca 12 c0       	mov    0xc012ca08,%eax
c0104eed:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int delta = 0, units = SLOB_UNITS(size);
	unsigned long flags;

	spin_lock_irqsave(&slob_lock, flags);
	prev = slobfree;
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c0104ef0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104ef3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104ef6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104ef9:	8b 40 04             	mov    0x4(%eax),%eax
c0104efc:	89 45 f0             	mov    %eax,-0x10(%ebp)

			slob_free(cur, PAGE_SIZE);
			spin_lock_irqsave(&slob_lock, flags);
			cur = slobfree;
		}
	}
c0104eff:	e9 8f fe ff ff       	jmp    c0104d93 <slob_alloc+0x5c>
}
c0104f04:	c9                   	leave  
c0104f05:	c3                   	ret    

c0104f06 <slob_free>:

static void slob_free(void *block, int size)
{
c0104f06:	55                   	push   %ebp
c0104f07:	89 e5                	mov    %esp,%ebp
c0104f09:	83 ec 18             	sub    $0x18,%esp
	slob_t *cur, *b = (slob_t *)block;
c0104f0c:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f0f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c0104f12:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104f16:	0f 84 05 01 00 00    	je     c0105021 <slob_free+0x11b>
		return;

	if (size)
c0104f1c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0104f20:	74 10                	je     c0104f32 <slob_free+0x2c>
		b->units = SLOB_UNITS(size);
c0104f22:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104f25:	83 c0 07             	add    $0x7,%eax
c0104f28:	c1 e8 03             	shr    $0x3,%eax
c0104f2b:	89 c2                	mov    %eax,%edx
c0104f2d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104f30:	89 10                	mov    %edx,(%eax)

	/* Find reinsertion point */
	spin_lock_irqsave(&slob_lock, flags);
c0104f32:	e8 62 fc ff ff       	call   c0104b99 <__intr_save>
c0104f37:	89 45 ec             	mov    %eax,-0x14(%ebp)
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c0104f3a:	a1 08 ca 12 c0       	mov    0xc012ca08,%eax
c0104f3f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104f42:	eb 27                	jmp    c0104f6b <slob_free+0x65>
		if (cur >= cur->next && (b > cur || b < cur->next))
c0104f44:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104f47:	8b 40 04             	mov    0x4(%eax),%eax
c0104f4a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104f4d:	77 13                	ja     c0104f62 <slob_free+0x5c>
c0104f4f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104f52:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104f55:	77 27                	ja     c0104f7e <slob_free+0x78>
c0104f57:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104f5a:	8b 40 04             	mov    0x4(%eax),%eax
c0104f5d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104f60:	77 1c                	ja     c0104f7e <slob_free+0x78>
	if (size)
		b->units = SLOB_UNITS(size);

	/* Find reinsertion point */
	spin_lock_irqsave(&slob_lock, flags);
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c0104f62:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104f65:	8b 40 04             	mov    0x4(%eax),%eax
c0104f68:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104f6b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104f6e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104f71:	76 d1                	jbe    c0104f44 <slob_free+0x3e>
c0104f73:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104f76:	8b 40 04             	mov    0x4(%eax),%eax
c0104f79:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104f7c:	76 c6                	jbe    c0104f44 <slob_free+0x3e>
		if (cur >= cur->next && (b > cur || b < cur->next))
			break;

	if (b + b->units == cur->next) {
c0104f7e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104f81:	8b 00                	mov    (%eax),%eax
c0104f83:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0104f8a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104f8d:	01 c2                	add    %eax,%edx
c0104f8f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104f92:	8b 40 04             	mov    0x4(%eax),%eax
c0104f95:	39 c2                	cmp    %eax,%edx
c0104f97:	75 25                	jne    c0104fbe <slob_free+0xb8>
		b->units += cur->next->units;
c0104f99:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104f9c:	8b 10                	mov    (%eax),%edx
c0104f9e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104fa1:	8b 40 04             	mov    0x4(%eax),%eax
c0104fa4:	8b 00                	mov    (%eax),%eax
c0104fa6:	01 c2                	add    %eax,%edx
c0104fa8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104fab:	89 10                	mov    %edx,(%eax)
		b->next = cur->next->next;
c0104fad:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104fb0:	8b 40 04             	mov    0x4(%eax),%eax
c0104fb3:	8b 50 04             	mov    0x4(%eax),%edx
c0104fb6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104fb9:	89 50 04             	mov    %edx,0x4(%eax)
c0104fbc:	eb 0c                	jmp    c0104fca <slob_free+0xc4>
	} else
		b->next = cur->next;
c0104fbe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104fc1:	8b 50 04             	mov    0x4(%eax),%edx
c0104fc4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104fc7:	89 50 04             	mov    %edx,0x4(%eax)

	if (cur + cur->units == b) {
c0104fca:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104fcd:	8b 00                	mov    (%eax),%eax
c0104fcf:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0104fd6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104fd9:	01 d0                	add    %edx,%eax
c0104fdb:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104fde:	75 1f                	jne    c0104fff <slob_free+0xf9>
		cur->units += b->units;
c0104fe0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104fe3:	8b 10                	mov    (%eax),%edx
c0104fe5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104fe8:	8b 00                	mov    (%eax),%eax
c0104fea:	01 c2                	add    %eax,%edx
c0104fec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104fef:	89 10                	mov    %edx,(%eax)
		cur->next = b->next;
c0104ff1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104ff4:	8b 50 04             	mov    0x4(%eax),%edx
c0104ff7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ffa:	89 50 04             	mov    %edx,0x4(%eax)
c0104ffd:	eb 09                	jmp    c0105008 <slob_free+0x102>
	} else
		cur->next = b;
c0104fff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105002:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0105005:	89 50 04             	mov    %edx,0x4(%eax)

	slobfree = cur;
c0105008:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010500b:	a3 08 ca 12 c0       	mov    %eax,0xc012ca08

	spin_unlock_irqrestore(&slob_lock, flags);
c0105010:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105013:	83 ec 0c             	sub    $0xc,%esp
c0105016:	50                   	push   %eax
c0105017:	e8 a7 fb ff ff       	call   c0104bc3 <__intr_restore>
c010501c:	83 c4 10             	add    $0x10,%esp
c010501f:	eb 01                	jmp    c0105022 <slob_free+0x11c>
{
	slob_t *cur, *b = (slob_t *)block;
	unsigned long flags;

	if (!block)
		return;
c0105021:	90                   	nop
		cur->next = b;

	slobfree = cur;

	spin_unlock_irqrestore(&slob_lock, flags);
}
c0105022:	c9                   	leave  
c0105023:	c3                   	ret    

c0105024 <slob_init>:



void
slob_init(void) {
c0105024:	55                   	push   %ebp
c0105025:	89 e5                	mov    %esp,%ebp
c0105027:	83 ec 08             	sub    $0x8,%esp
  cprintf("use SLOB allocator\n");
c010502a:	83 ec 0c             	sub    $0xc,%esp
c010502d:	68 92 ca 10 c0       	push   $0xc010ca92
c0105032:	e8 60 b2 ff ff       	call   c0100297 <cprintf>
c0105037:	83 c4 10             	add    $0x10,%esp
}
c010503a:	90                   	nop
c010503b:	c9                   	leave  
c010503c:	c3                   	ret    

c010503d <kmalloc_init>:

inline void 
kmalloc_init(void) {
c010503d:	55                   	push   %ebp
c010503e:	89 e5                	mov    %esp,%ebp
c0105040:	83 ec 08             	sub    $0x8,%esp
    slob_init();
c0105043:	e8 dc ff ff ff       	call   c0105024 <slob_init>
    cprintf("kmalloc_init() succeeded!\n");
c0105048:	83 ec 0c             	sub    $0xc,%esp
c010504b:	68 a6 ca 10 c0       	push   $0xc010caa6
c0105050:	e8 42 b2 ff ff       	call   c0100297 <cprintf>
c0105055:	83 c4 10             	add    $0x10,%esp
}
c0105058:	90                   	nop
c0105059:	c9                   	leave  
c010505a:	c3                   	ret    

c010505b <slob_allocated>:

size_t
slob_allocated(void) {
c010505b:	55                   	push   %ebp
c010505c:	89 e5                	mov    %esp,%ebp
  return 0;
c010505e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105063:	5d                   	pop    %ebp
c0105064:	c3                   	ret    

c0105065 <kallocated>:

size_t
kallocated(void) {
c0105065:	55                   	push   %ebp
c0105066:	89 e5                	mov    %esp,%ebp
   return slob_allocated();
c0105068:	e8 ee ff ff ff       	call   c010505b <slob_allocated>
}
c010506d:	5d                   	pop    %ebp
c010506e:	c3                   	ret    

c010506f <find_order>:

static int find_order(int size)
{
c010506f:	55                   	push   %ebp
c0105070:	89 e5                	mov    %esp,%ebp
c0105072:	83 ec 10             	sub    $0x10,%esp
	int order = 0;
c0105075:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for ( ; size > 4096 ; size >>=1)
c010507c:	eb 07                	jmp    c0105085 <find_order+0x16>
		order++;
c010507e:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
}

static int find_order(int size)
{
	int order = 0;
	for ( ; size > 4096 ; size >>=1)
c0105082:	d1 7d 08             	sarl   0x8(%ebp)
c0105085:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c010508c:	7f f0                	jg     c010507e <find_order+0xf>
		order++;
	return order;
c010508e:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0105091:	c9                   	leave  
c0105092:	c3                   	ret    

c0105093 <__kmalloc>:

static void *__kmalloc(size_t size, gfp_t gfp)
{
c0105093:	55                   	push   %ebp
c0105094:	89 e5                	mov    %esp,%ebp
c0105096:	83 ec 18             	sub    $0x18,%esp
	slob_t *m;
	bigblock_t *bb;
	unsigned long flags;

	if (size < PAGE_SIZE - SLOB_UNIT) {
c0105099:	81 7d 08 f7 0f 00 00 	cmpl   $0xff7,0x8(%ebp)
c01050a0:	77 35                	ja     c01050d7 <__kmalloc+0x44>
		m = slob_alloc(size + SLOB_UNIT, gfp, 0);
c01050a2:	8b 45 08             	mov    0x8(%ebp),%eax
c01050a5:	83 c0 08             	add    $0x8,%eax
c01050a8:	83 ec 04             	sub    $0x4,%esp
c01050ab:	6a 00                	push   $0x0
c01050ad:	ff 75 0c             	pushl  0xc(%ebp)
c01050b0:	50                   	push   %eax
c01050b1:	e8 81 fc ff ff       	call   c0104d37 <slob_alloc>
c01050b6:	83 c4 10             	add    $0x10,%esp
c01050b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
		return m ? (void *)(m + 1) : 0;
c01050bc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01050c0:	74 0b                	je     c01050cd <__kmalloc+0x3a>
c01050c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01050c5:	83 c0 08             	add    $0x8,%eax
c01050c8:	e9 b3 00 00 00       	jmp    c0105180 <__kmalloc+0xed>
c01050cd:	b8 00 00 00 00       	mov    $0x0,%eax
c01050d2:	e9 a9 00 00 00       	jmp    c0105180 <__kmalloc+0xed>
	}

	bb = slob_alloc(sizeof(bigblock_t), gfp, 0);
c01050d7:	83 ec 04             	sub    $0x4,%esp
c01050da:	6a 00                	push   $0x0
c01050dc:	ff 75 0c             	pushl  0xc(%ebp)
c01050df:	6a 0c                	push   $0xc
c01050e1:	e8 51 fc ff ff       	call   c0104d37 <slob_alloc>
c01050e6:	83 c4 10             	add    $0x10,%esp
c01050e9:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (!bb)
c01050ec:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01050f0:	75 0a                	jne    c01050fc <__kmalloc+0x69>
		return 0;
c01050f2:	b8 00 00 00 00       	mov    $0x0,%eax
c01050f7:	e9 84 00 00 00       	jmp    c0105180 <__kmalloc+0xed>

	bb->order = find_order(size);
c01050fc:	8b 45 08             	mov    0x8(%ebp),%eax
c01050ff:	83 ec 0c             	sub    $0xc,%esp
c0105102:	50                   	push   %eax
c0105103:	e8 67 ff ff ff       	call   c010506f <find_order>
c0105108:	83 c4 10             	add    $0x10,%esp
c010510b:	89 c2                	mov    %eax,%edx
c010510d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105110:	89 10                	mov    %edx,(%eax)
	bb->pages = (void *)__slob_get_free_pages(gfp, bb->order);
c0105112:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105115:	8b 00                	mov    (%eax),%eax
c0105117:	83 ec 08             	sub    $0x8,%esp
c010511a:	50                   	push   %eax
c010511b:	ff 75 0c             	pushl  0xc(%ebp)
c010511e:	e8 9b fb ff ff       	call   c0104cbe <__slob_get_free_pages>
c0105123:	83 c4 10             	add    $0x10,%esp
c0105126:	89 c2                	mov    %eax,%edx
c0105128:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010512b:	89 50 04             	mov    %edx,0x4(%eax)

	if (bb->pages) {
c010512e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105131:	8b 40 04             	mov    0x4(%eax),%eax
c0105134:	85 c0                	test   %eax,%eax
c0105136:	74 33                	je     c010516b <__kmalloc+0xd8>
		spin_lock_irqsave(&block_lock, flags);
c0105138:	e8 5c fa ff ff       	call   c0104b99 <__intr_save>
c010513d:	89 45 ec             	mov    %eax,-0x14(%ebp)
		bb->next = bigblocks;
c0105140:	8b 15 68 0f 1b c0    	mov    0xc01b0f68,%edx
c0105146:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105149:	89 50 08             	mov    %edx,0x8(%eax)
		bigblocks = bb;
c010514c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010514f:	a3 68 0f 1b c0       	mov    %eax,0xc01b0f68
		spin_unlock_irqrestore(&block_lock, flags);
c0105154:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105157:	83 ec 0c             	sub    $0xc,%esp
c010515a:	50                   	push   %eax
c010515b:	e8 63 fa ff ff       	call   c0104bc3 <__intr_restore>
c0105160:	83 c4 10             	add    $0x10,%esp
		return bb->pages;
c0105163:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105166:	8b 40 04             	mov    0x4(%eax),%eax
c0105169:	eb 15                	jmp    c0105180 <__kmalloc+0xed>
	}

	slob_free(bb, sizeof(bigblock_t));
c010516b:	83 ec 08             	sub    $0x8,%esp
c010516e:	6a 0c                	push   $0xc
c0105170:	ff 75 f0             	pushl  -0x10(%ebp)
c0105173:	e8 8e fd ff ff       	call   c0104f06 <slob_free>
c0105178:	83 c4 10             	add    $0x10,%esp
	return 0;
c010517b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105180:	c9                   	leave  
c0105181:	c3                   	ret    

c0105182 <kmalloc>:

void *
kmalloc(size_t size)
{
c0105182:	55                   	push   %ebp
c0105183:	89 e5                	mov    %esp,%ebp
c0105185:	83 ec 08             	sub    $0x8,%esp
  return __kmalloc(size, 0);
c0105188:	83 ec 08             	sub    $0x8,%esp
c010518b:	6a 00                	push   $0x0
c010518d:	ff 75 08             	pushl  0x8(%ebp)
c0105190:	e8 fe fe ff ff       	call   c0105093 <__kmalloc>
c0105195:	83 c4 10             	add    $0x10,%esp
}
c0105198:	c9                   	leave  
c0105199:	c3                   	ret    

c010519a <kfree>:


void kfree(void *block)
{
c010519a:	55                   	push   %ebp
c010519b:	89 e5                	mov    %esp,%ebp
c010519d:	83 ec 18             	sub    $0x18,%esp
	bigblock_t *bb, **last = &bigblocks;
c01051a0:	c7 45 f0 68 0f 1b c0 	movl   $0xc01b0f68,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c01051a7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01051ab:	0f 84 ac 00 00 00    	je     c010525d <kfree+0xc3>
		return;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c01051b1:	8b 45 08             	mov    0x8(%ebp),%eax
c01051b4:	25 ff 0f 00 00       	and    $0xfff,%eax
c01051b9:	85 c0                	test   %eax,%eax
c01051bb:	0f 85 85 00 00 00    	jne    c0105246 <kfree+0xac>
		/* might be on the big block list */
		spin_lock_irqsave(&block_lock, flags);
c01051c1:	e8 d3 f9 ff ff       	call   c0104b99 <__intr_save>
c01051c6:	89 45 ec             	mov    %eax,-0x14(%ebp)
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c01051c9:	a1 68 0f 1b c0       	mov    0xc01b0f68,%eax
c01051ce:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01051d1:	eb 5e                	jmp    c0105231 <kfree+0x97>
			if (bb->pages == block) {
c01051d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01051d6:	8b 40 04             	mov    0x4(%eax),%eax
c01051d9:	3b 45 08             	cmp    0x8(%ebp),%eax
c01051dc:	75 41                	jne    c010521f <kfree+0x85>
				*last = bb->next;
c01051de:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01051e1:	8b 50 08             	mov    0x8(%eax),%edx
c01051e4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01051e7:	89 10                	mov    %edx,(%eax)
				spin_unlock_irqrestore(&block_lock, flags);
c01051e9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01051ec:	83 ec 0c             	sub    $0xc,%esp
c01051ef:	50                   	push   %eax
c01051f0:	e8 ce f9 ff ff       	call   c0104bc3 <__intr_restore>
c01051f5:	83 c4 10             	add    $0x10,%esp
				__slob_free_pages((unsigned long)block, bb->order);
c01051f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01051fb:	8b 10                	mov    (%eax),%edx
c01051fd:	8b 45 08             	mov    0x8(%ebp),%eax
c0105200:	83 ec 08             	sub    $0x8,%esp
c0105203:	52                   	push   %edx
c0105204:	50                   	push   %eax
c0105205:	e8 f4 fa ff ff       	call   c0104cfe <__slob_free_pages>
c010520a:	83 c4 10             	add    $0x10,%esp
				slob_free(bb, sizeof(bigblock_t));
c010520d:	83 ec 08             	sub    $0x8,%esp
c0105210:	6a 0c                	push   $0xc
c0105212:	ff 75 f4             	pushl  -0xc(%ebp)
c0105215:	e8 ec fc ff ff       	call   c0104f06 <slob_free>
c010521a:	83 c4 10             	add    $0x10,%esp
				return;
c010521d:	eb 3f                	jmp    c010525e <kfree+0xc4>
		return;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
		/* might be on the big block list */
		spin_lock_irqsave(&block_lock, flags);
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c010521f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105222:	83 c0 08             	add    $0x8,%eax
c0105225:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105228:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010522b:	8b 40 08             	mov    0x8(%eax),%eax
c010522e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105231:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105235:	75 9c                	jne    c01051d3 <kfree+0x39>
				__slob_free_pages((unsigned long)block, bb->order);
				slob_free(bb, sizeof(bigblock_t));
				return;
			}
		}
		spin_unlock_irqrestore(&block_lock, flags);
c0105237:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010523a:	83 ec 0c             	sub    $0xc,%esp
c010523d:	50                   	push   %eax
c010523e:	e8 80 f9 ff ff       	call   c0104bc3 <__intr_restore>
c0105243:	83 c4 10             	add    $0x10,%esp
	}

	slob_free((slob_t *)block - 1, 0);
c0105246:	8b 45 08             	mov    0x8(%ebp),%eax
c0105249:	83 e8 08             	sub    $0x8,%eax
c010524c:	83 ec 08             	sub    $0x8,%esp
c010524f:	6a 00                	push   $0x0
c0105251:	50                   	push   %eax
c0105252:	e8 af fc ff ff       	call   c0104f06 <slob_free>
c0105257:	83 c4 10             	add    $0x10,%esp
	return;
c010525a:	90                   	nop
c010525b:	eb 01                	jmp    c010525e <kfree+0xc4>
{
	bigblock_t *bb, **last = &bigblocks;
	unsigned long flags;

	if (!block)
		return;
c010525d:	90                   	nop
		spin_unlock_irqrestore(&block_lock, flags);
	}

	slob_free((slob_t *)block - 1, 0);
	return;
}
c010525e:	c9                   	leave  
c010525f:	c3                   	ret    

c0105260 <ksize>:


unsigned int ksize(const void *block)
{
c0105260:	55                   	push   %ebp
c0105261:	89 e5                	mov    %esp,%ebp
c0105263:	83 ec 18             	sub    $0x18,%esp
	bigblock_t *bb;
	unsigned long flags;

	if (!block)
c0105266:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010526a:	75 07                	jne    c0105273 <ksize+0x13>
		return 0;
c010526c:	b8 00 00 00 00       	mov    $0x0,%eax
c0105271:	eb 73                	jmp    c01052e6 <ksize+0x86>

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c0105273:	8b 45 08             	mov    0x8(%ebp),%eax
c0105276:	25 ff 0f 00 00       	and    $0xfff,%eax
c010527b:	85 c0                	test   %eax,%eax
c010527d:	75 5c                	jne    c01052db <ksize+0x7b>
		spin_lock_irqsave(&block_lock, flags);
c010527f:	e8 15 f9 ff ff       	call   c0104b99 <__intr_save>
c0105284:	89 45 f0             	mov    %eax,-0x10(%ebp)
		for (bb = bigblocks; bb; bb = bb->next)
c0105287:	a1 68 0f 1b c0       	mov    0xc01b0f68,%eax
c010528c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010528f:	eb 35                	jmp    c01052c6 <ksize+0x66>
			if (bb->pages == block) {
c0105291:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105294:	8b 40 04             	mov    0x4(%eax),%eax
c0105297:	3b 45 08             	cmp    0x8(%ebp),%eax
c010529a:	75 21                	jne    c01052bd <ksize+0x5d>
				spin_unlock_irqrestore(&slob_lock, flags);
c010529c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010529f:	83 ec 0c             	sub    $0xc,%esp
c01052a2:	50                   	push   %eax
c01052a3:	e8 1b f9 ff ff       	call   c0104bc3 <__intr_restore>
c01052a8:	83 c4 10             	add    $0x10,%esp
				return PAGE_SIZE << bb->order;
c01052ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01052ae:	8b 00                	mov    (%eax),%eax
c01052b0:	ba 00 10 00 00       	mov    $0x1000,%edx
c01052b5:	89 c1                	mov    %eax,%ecx
c01052b7:	d3 e2                	shl    %cl,%edx
c01052b9:	89 d0                	mov    %edx,%eax
c01052bb:	eb 29                	jmp    c01052e6 <ksize+0x86>
	if (!block)
		return 0;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
		spin_lock_irqsave(&block_lock, flags);
		for (bb = bigblocks; bb; bb = bb->next)
c01052bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01052c0:	8b 40 08             	mov    0x8(%eax),%eax
c01052c3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01052c6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01052ca:	75 c5                	jne    c0105291 <ksize+0x31>
			if (bb->pages == block) {
				spin_unlock_irqrestore(&slob_lock, flags);
				return PAGE_SIZE << bb->order;
			}
		spin_unlock_irqrestore(&block_lock, flags);
c01052cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01052cf:	83 ec 0c             	sub    $0xc,%esp
c01052d2:	50                   	push   %eax
c01052d3:	e8 eb f8 ff ff       	call   c0104bc3 <__intr_restore>
c01052d8:	83 c4 10             	add    $0x10,%esp
	}

	return ((slob_t *)block - 1)->units * SLOB_UNIT;
c01052db:	8b 45 08             	mov    0x8(%ebp),%eax
c01052de:	83 e8 08             	sub    $0x8,%eax
c01052e1:	8b 00                	mov    (%eax),%eax
c01052e3:	c1 e0 03             	shl    $0x3,%eax
}
c01052e6:	c9                   	leave  
c01052e7:	c3                   	ret    

c01052e8 <pa2page>:
page2pa(struct Page *page) {
    return page2ppn(page) << PGSHIFT;
}

static inline struct Page *
pa2page(uintptr_t pa) {
c01052e8:	55                   	push   %ebp
c01052e9:	89 e5                	mov    %esp,%ebp
c01052eb:	83 ec 08             	sub    $0x8,%esp
    if (PPN(pa) >= npage) {
c01052ee:	8b 45 08             	mov    0x8(%ebp),%eax
c01052f1:	c1 e8 0c             	shr    $0xc,%eax
c01052f4:	89 c2                	mov    %eax,%edx
c01052f6:	a1 80 0f 1b c0       	mov    0xc01b0f80,%eax
c01052fb:	39 c2                	cmp    %eax,%edx
c01052fd:	72 14                	jb     c0105313 <pa2page+0x2b>
        panic("pa2page called with invalid pa");
c01052ff:	83 ec 04             	sub    $0x4,%esp
c0105302:	68 c4 ca 10 c0       	push   $0xc010cac4
c0105307:	6a 5e                	push   $0x5e
c0105309:	68 e3 ca 10 c0       	push   $0xc010cae3
c010530e:	e8 ea b0 ff ff       	call   c01003fd <__panic>
    }
    return &pages[PPN(pa)];
c0105313:	a1 b8 31 1b c0       	mov    0xc01b31b8,%eax
c0105318:	8b 55 08             	mov    0x8(%ebp),%edx
c010531b:	c1 ea 0c             	shr    $0xc,%edx
c010531e:	c1 e2 05             	shl    $0x5,%edx
c0105321:	01 d0                	add    %edx,%eax
}
c0105323:	c9                   	leave  
c0105324:	c3                   	ret    

c0105325 <pte2page>:
kva2page(void *kva) {
    return pa2page(PADDR(kva));
}

static inline struct Page *
pte2page(pte_t pte) {
c0105325:	55                   	push   %ebp
c0105326:	89 e5                	mov    %esp,%ebp
c0105328:	83 ec 08             	sub    $0x8,%esp
    if (!(pte & PTE_P)) {
c010532b:	8b 45 08             	mov    0x8(%ebp),%eax
c010532e:	83 e0 01             	and    $0x1,%eax
c0105331:	85 c0                	test   %eax,%eax
c0105333:	75 14                	jne    c0105349 <pte2page+0x24>
        panic("pte2page called with invalid pte");
c0105335:	83 ec 04             	sub    $0x4,%esp
c0105338:	68 f4 ca 10 c0       	push   $0xc010caf4
c010533d:	6a 70                	push   $0x70
c010533f:	68 e3 ca 10 c0       	push   $0xc010cae3
c0105344:	e8 b4 b0 ff ff       	call   c01003fd <__panic>
    }
    return pa2page(PTE_ADDR(pte));
c0105349:	8b 45 08             	mov    0x8(%ebp),%eax
c010534c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0105351:	83 ec 0c             	sub    $0xc,%esp
c0105354:	50                   	push   %eax
c0105355:	e8 8e ff ff ff       	call   c01052e8 <pa2page>
c010535a:	83 c4 10             	add    $0x10,%esp
}
c010535d:	c9                   	leave  
c010535e:	c3                   	ret    

c010535f <pde2page>:

static inline struct Page *
pde2page(pde_t pde) {
c010535f:	55                   	push   %ebp
c0105360:	89 e5                	mov    %esp,%ebp
c0105362:	83 ec 08             	sub    $0x8,%esp
    return pa2page(PDE_ADDR(pde));
c0105365:	8b 45 08             	mov    0x8(%ebp),%eax
c0105368:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010536d:	83 ec 0c             	sub    $0xc,%esp
c0105370:	50                   	push   %eax
c0105371:	e8 72 ff ff ff       	call   c01052e8 <pa2page>
c0105376:	83 c4 10             	add    $0x10,%esp
}
c0105379:	c9                   	leave  
c010537a:	c3                   	ret    

c010537b <swap_init>:

static void check_swap(void);

int
swap_init(void)
{
c010537b:	55                   	push   %ebp
c010537c:	89 e5                	mov    %esp,%ebp
c010537e:	83 ec 18             	sub    $0x18,%esp
     swapfs_init();
c0105381:	e8 70 36 00 00       	call   c01089f6 <swapfs_init>

     if (!(1024 <= max_swap_offset && max_swap_offset < MAX_SWAP_OFFSET_LIMIT))
c0105386:	a1 7c 31 1b c0       	mov    0xc01b317c,%eax
c010538b:	3d ff 03 00 00       	cmp    $0x3ff,%eax
c0105390:	76 0c                	jbe    c010539e <swap_init+0x23>
c0105392:	a1 7c 31 1b c0       	mov    0xc01b317c,%eax
c0105397:	3d ff ff ff 00       	cmp    $0xffffff,%eax
c010539c:	76 17                	jbe    c01053b5 <swap_init+0x3a>
     {
          panic("bad max_swap_offset %08x.\n", max_swap_offset);
c010539e:	a1 7c 31 1b c0       	mov    0xc01b317c,%eax
c01053a3:	50                   	push   %eax
c01053a4:	68 15 cb 10 c0       	push   $0xc010cb15
c01053a9:	6a 27                	push   $0x27
c01053ab:	68 30 cb 10 c0       	push   $0xc010cb30
c01053b0:	e8 48 b0 ff ff       	call   c01003fd <__panic>
     }
     

     sm = &swap_manager_fifo;
c01053b5:	c7 05 74 0f 1b c0 e0 	movl   $0xc012c9e0,0xc01b0f74
c01053bc:	c9 12 c0 
     int r = sm->init();
c01053bf:	a1 74 0f 1b c0       	mov    0xc01b0f74,%eax
c01053c4:	8b 40 04             	mov    0x4(%eax),%eax
c01053c7:	ff d0                	call   *%eax
c01053c9:	89 45 f4             	mov    %eax,-0xc(%ebp)
     
     if (r == 0)
c01053cc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01053d0:	75 27                	jne    c01053f9 <swap_init+0x7e>
     {
          swap_init_ok = 1;
c01053d2:	c7 05 6c 0f 1b c0 01 	movl   $0x1,0xc01b0f6c
c01053d9:	00 00 00 
          cprintf("SWAP: manager = %s\n", sm->name);
c01053dc:	a1 74 0f 1b c0       	mov    0xc01b0f74,%eax
c01053e1:	8b 00                	mov    (%eax),%eax
c01053e3:	83 ec 08             	sub    $0x8,%esp
c01053e6:	50                   	push   %eax
c01053e7:	68 3f cb 10 c0       	push   $0xc010cb3f
c01053ec:	e8 a6 ae ff ff       	call   c0100297 <cprintf>
c01053f1:	83 c4 10             	add    $0x10,%esp
          check_swap();
c01053f4:	e8 f7 03 00 00       	call   c01057f0 <check_swap>
     }

     return r;
c01053f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01053fc:	c9                   	leave  
c01053fd:	c3                   	ret    

c01053fe <swap_init_mm>:

int
swap_init_mm(struct mm_struct *mm)
{
c01053fe:	55                   	push   %ebp
c01053ff:	89 e5                	mov    %esp,%ebp
c0105401:	83 ec 08             	sub    $0x8,%esp
     return sm->init_mm(mm);
c0105404:	a1 74 0f 1b c0       	mov    0xc01b0f74,%eax
c0105409:	8b 40 08             	mov    0x8(%eax),%eax
c010540c:	83 ec 0c             	sub    $0xc,%esp
c010540f:	ff 75 08             	pushl  0x8(%ebp)
c0105412:	ff d0                	call   *%eax
c0105414:	83 c4 10             	add    $0x10,%esp
}
c0105417:	c9                   	leave  
c0105418:	c3                   	ret    

c0105419 <swap_tick_event>:

int
swap_tick_event(struct mm_struct *mm)
{
c0105419:	55                   	push   %ebp
c010541a:	89 e5                	mov    %esp,%ebp
c010541c:	83 ec 08             	sub    $0x8,%esp
     return sm->tick_event(mm);
c010541f:	a1 74 0f 1b c0       	mov    0xc01b0f74,%eax
c0105424:	8b 40 0c             	mov    0xc(%eax),%eax
c0105427:	83 ec 0c             	sub    $0xc,%esp
c010542a:	ff 75 08             	pushl  0x8(%ebp)
c010542d:	ff d0                	call   *%eax
c010542f:	83 c4 10             	add    $0x10,%esp
}
c0105432:	c9                   	leave  
c0105433:	c3                   	ret    

c0105434 <swap_map_swappable>:

int
swap_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c0105434:	55                   	push   %ebp
c0105435:	89 e5                	mov    %esp,%ebp
c0105437:	83 ec 08             	sub    $0x8,%esp
     return sm->map_swappable(mm, addr, page, swap_in);
c010543a:	a1 74 0f 1b c0       	mov    0xc01b0f74,%eax
c010543f:	8b 40 10             	mov    0x10(%eax),%eax
c0105442:	ff 75 14             	pushl  0x14(%ebp)
c0105445:	ff 75 10             	pushl  0x10(%ebp)
c0105448:	ff 75 0c             	pushl  0xc(%ebp)
c010544b:	ff 75 08             	pushl  0x8(%ebp)
c010544e:	ff d0                	call   *%eax
c0105450:	83 c4 10             	add    $0x10,%esp
}
c0105453:	c9                   	leave  
c0105454:	c3                   	ret    

c0105455 <swap_set_unswappable>:

int
swap_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c0105455:	55                   	push   %ebp
c0105456:	89 e5                	mov    %esp,%ebp
c0105458:	83 ec 08             	sub    $0x8,%esp
     return sm->set_unswappable(mm, addr);
c010545b:	a1 74 0f 1b c0       	mov    0xc01b0f74,%eax
c0105460:	8b 40 14             	mov    0x14(%eax),%eax
c0105463:	83 ec 08             	sub    $0x8,%esp
c0105466:	ff 75 0c             	pushl  0xc(%ebp)
c0105469:	ff 75 08             	pushl  0x8(%ebp)
c010546c:	ff d0                	call   *%eax
c010546e:	83 c4 10             	add    $0x10,%esp
}
c0105471:	c9                   	leave  
c0105472:	c3                   	ret    

c0105473 <swap_out>:

volatile unsigned int swap_out_num=0;

int
swap_out(struct mm_struct *mm, int n, int in_tick)
{
c0105473:	55                   	push   %ebp
c0105474:	89 e5                	mov    %esp,%ebp
c0105476:	83 ec 28             	sub    $0x28,%esp
     int i;
     for (i = 0; i != n; ++ i)
c0105479:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0105480:	e9 2e 01 00 00       	jmp    c01055b3 <swap_out+0x140>
     {
          uintptr_t v;
          //struct Page **ptr_page=NULL;
          struct Page *page;
          // cprintf("i %d, SWAP: call swap_out_victim\n",i);
          int r = sm->swap_out_victim(mm, &page, in_tick);
c0105485:	a1 74 0f 1b c0       	mov    0xc01b0f74,%eax
c010548a:	8b 40 18             	mov    0x18(%eax),%eax
c010548d:	83 ec 04             	sub    $0x4,%esp
c0105490:	ff 75 10             	pushl  0x10(%ebp)
c0105493:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c0105496:	52                   	push   %edx
c0105497:	ff 75 08             	pushl  0x8(%ebp)
c010549a:	ff d0                	call   *%eax
c010549c:	83 c4 10             	add    $0x10,%esp
c010549f:	89 45 f0             	mov    %eax,-0x10(%ebp)
          if (r != 0) {
c01054a2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01054a6:	74 18                	je     c01054c0 <swap_out+0x4d>
                    cprintf("i %d, swap_out: call swap_out_victim failed\n",i);
c01054a8:	83 ec 08             	sub    $0x8,%esp
c01054ab:	ff 75 f4             	pushl  -0xc(%ebp)
c01054ae:	68 54 cb 10 c0       	push   $0xc010cb54
c01054b3:	e8 df ad ff ff       	call   c0100297 <cprintf>
c01054b8:	83 c4 10             	add    $0x10,%esp
c01054bb:	e9 ff 00 00 00       	jmp    c01055bf <swap_out+0x14c>
          }          
          //assert(!PageReserved(page));

          //cprintf("SWAP: choose victim page 0x%08x\n", page);
          
          v=page->pra_vaddr; 
c01054c0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01054c3:	8b 40 1c             	mov    0x1c(%eax),%eax
c01054c6:	89 45 ec             	mov    %eax,-0x14(%ebp)
          pte_t *ptep = get_pte(mm->pgdir, v, 0);
c01054c9:	8b 45 08             	mov    0x8(%ebp),%eax
c01054cc:	8b 40 0c             	mov    0xc(%eax),%eax
c01054cf:	83 ec 04             	sub    $0x4,%esp
c01054d2:	6a 00                	push   $0x0
c01054d4:	ff 75 ec             	pushl  -0x14(%ebp)
c01054d7:	50                   	push   %eax
c01054d8:	e8 3b 22 00 00       	call   c0107718 <get_pte>
c01054dd:	83 c4 10             	add    $0x10,%esp
c01054e0:	89 45 e8             	mov    %eax,-0x18(%ebp)
          assert((*ptep & PTE_P) != 0);
c01054e3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01054e6:	8b 00                	mov    (%eax),%eax
c01054e8:	83 e0 01             	and    $0x1,%eax
c01054eb:	85 c0                	test   %eax,%eax
c01054ed:	75 16                	jne    c0105505 <swap_out+0x92>
c01054ef:	68 81 cb 10 c0       	push   $0xc010cb81
c01054f4:	68 96 cb 10 c0       	push   $0xc010cb96
c01054f9:	6a 67                	push   $0x67
c01054fb:	68 30 cb 10 c0       	push   $0xc010cb30
c0105500:	e8 f8 ae ff ff       	call   c01003fd <__panic>

          if (swapfs_write( (page->pra_vaddr/PGSIZE+1)<<8, page) != 0) {
c0105505:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105508:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010550b:	8b 52 1c             	mov    0x1c(%edx),%edx
c010550e:	c1 ea 0c             	shr    $0xc,%edx
c0105511:	83 c2 01             	add    $0x1,%edx
c0105514:	c1 e2 08             	shl    $0x8,%edx
c0105517:	83 ec 08             	sub    $0x8,%esp
c010551a:	50                   	push   %eax
c010551b:	52                   	push   %edx
c010551c:	e8 71 35 00 00       	call   c0108a92 <swapfs_write>
c0105521:	83 c4 10             	add    $0x10,%esp
c0105524:	85 c0                	test   %eax,%eax
c0105526:	74 2b                	je     c0105553 <swap_out+0xe0>
                    cprintf("SWAP: failed to save\n");
c0105528:	83 ec 0c             	sub    $0xc,%esp
c010552b:	68 ab cb 10 c0       	push   $0xc010cbab
c0105530:	e8 62 ad ff ff       	call   c0100297 <cprintf>
c0105535:	83 c4 10             	add    $0x10,%esp
                    sm->map_swappable(mm, v, page, 0);
c0105538:	a1 74 0f 1b c0       	mov    0xc01b0f74,%eax
c010553d:	8b 40 10             	mov    0x10(%eax),%eax
c0105540:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0105543:	6a 00                	push   $0x0
c0105545:	52                   	push   %edx
c0105546:	ff 75 ec             	pushl  -0x14(%ebp)
c0105549:	ff 75 08             	pushl  0x8(%ebp)
c010554c:	ff d0                	call   *%eax
c010554e:	83 c4 10             	add    $0x10,%esp
c0105551:	eb 5c                	jmp    c01055af <swap_out+0x13c>
                    continue;
          }
          else {
                    cprintf("swap_out: i %d, store page in vaddr 0x%x to disk swap entry %d\n", i, v, page->pra_vaddr/PGSIZE+1);
c0105553:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105556:	8b 40 1c             	mov    0x1c(%eax),%eax
c0105559:	c1 e8 0c             	shr    $0xc,%eax
c010555c:	83 c0 01             	add    $0x1,%eax
c010555f:	50                   	push   %eax
c0105560:	ff 75 ec             	pushl  -0x14(%ebp)
c0105563:	ff 75 f4             	pushl  -0xc(%ebp)
c0105566:	68 c4 cb 10 c0       	push   $0xc010cbc4
c010556b:	e8 27 ad ff ff       	call   c0100297 <cprintf>
c0105570:	83 c4 10             	add    $0x10,%esp
                    *ptep = (page->pra_vaddr/PGSIZE+1)<<8;
c0105573:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105576:	8b 40 1c             	mov    0x1c(%eax),%eax
c0105579:	c1 e8 0c             	shr    $0xc,%eax
c010557c:	83 c0 01             	add    $0x1,%eax
c010557f:	c1 e0 08             	shl    $0x8,%eax
c0105582:	89 c2                	mov    %eax,%edx
c0105584:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105587:	89 10                	mov    %edx,(%eax)
                    free_page(page);
c0105589:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010558c:	83 ec 08             	sub    $0x8,%esp
c010558f:	6a 01                	push   $0x1
c0105591:	50                   	push   %eax
c0105592:	e8 81 1b 00 00       	call   c0107118 <free_pages>
c0105597:	83 c4 10             	add    $0x10,%esp
          }
          
          tlb_invalidate(mm->pgdir, v);
c010559a:	8b 45 08             	mov    0x8(%ebp),%eax
c010559d:	8b 40 0c             	mov    0xc(%eax),%eax
c01055a0:	83 ec 08             	sub    $0x8,%esp
c01055a3:	ff 75 ec             	pushl  -0x14(%ebp)
c01055a6:	50                   	push   %eax
c01055a7:	e8 06 28 00 00       	call   c0107db2 <tlb_invalidate>
c01055ac:	83 c4 10             	add    $0x10,%esp

int
swap_out(struct mm_struct *mm, int n, int in_tick)
{
     int i;
     for (i = 0; i != n; ++ i)
c01055af:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01055b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01055b6:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01055b9:	0f 85 c6 fe ff ff    	jne    c0105485 <swap_out+0x12>
                    free_page(page);
          }
          
          tlb_invalidate(mm->pgdir, v);
     }
     return i;
c01055bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01055c2:	c9                   	leave  
c01055c3:	c3                   	ret    

c01055c4 <swap_in>:

int
swap_in(struct mm_struct *mm, uintptr_t addr, struct Page **ptr_result)
{
c01055c4:	55                   	push   %ebp
c01055c5:	89 e5                	mov    %esp,%ebp
c01055c7:	83 ec 18             	sub    $0x18,%esp
     struct Page *result = alloc_page();
c01055ca:	83 ec 0c             	sub    $0xc,%esp
c01055cd:	6a 01                	push   $0x1
c01055cf:	e8 d8 1a 00 00       	call   c01070ac <alloc_pages>
c01055d4:	83 c4 10             	add    $0x10,%esp
c01055d7:	89 45 f4             	mov    %eax,-0xc(%ebp)
     assert(result!=NULL);
c01055da:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01055de:	75 16                	jne    c01055f6 <swap_in+0x32>
c01055e0:	68 04 cc 10 c0       	push   $0xc010cc04
c01055e5:	68 96 cb 10 c0       	push   $0xc010cb96
c01055ea:	6a 7d                	push   $0x7d
c01055ec:	68 30 cb 10 c0       	push   $0xc010cb30
c01055f1:	e8 07 ae ff ff       	call   c01003fd <__panic>

     pte_t *ptep = get_pte(mm->pgdir, addr, 0);
c01055f6:	8b 45 08             	mov    0x8(%ebp),%eax
c01055f9:	8b 40 0c             	mov    0xc(%eax),%eax
c01055fc:	83 ec 04             	sub    $0x4,%esp
c01055ff:	6a 00                	push   $0x0
c0105601:	ff 75 0c             	pushl  0xc(%ebp)
c0105604:	50                   	push   %eax
c0105605:	e8 0e 21 00 00       	call   c0107718 <get_pte>
c010560a:	83 c4 10             	add    $0x10,%esp
c010560d:	89 45 f0             	mov    %eax,-0x10(%ebp)
     // cprintf("SWAP: load ptep %x swap entry %d to vaddr 0x%08x, page %x, No %d\n", ptep, (*ptep)>>8, addr, result, (result-pages));
    
     int r;
     if ((r = swapfs_read((*ptep), result)) != 0)
c0105610:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105613:	8b 00                	mov    (%eax),%eax
c0105615:	83 ec 08             	sub    $0x8,%esp
c0105618:	ff 75 f4             	pushl  -0xc(%ebp)
c010561b:	50                   	push   %eax
c010561c:	e8 18 34 00 00       	call   c0108a39 <swapfs_read>
c0105621:	83 c4 10             	add    $0x10,%esp
c0105624:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0105627:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010562b:	74 1f                	je     c010564c <swap_in+0x88>
     {
        assert(r!=0);
c010562d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0105631:	75 19                	jne    c010564c <swap_in+0x88>
c0105633:	68 11 cc 10 c0       	push   $0xc010cc11
c0105638:	68 96 cb 10 c0       	push   $0xc010cb96
c010563d:	68 85 00 00 00       	push   $0x85
c0105642:	68 30 cb 10 c0       	push   $0xc010cb30
c0105647:	e8 b1 ad ff ff       	call   c01003fd <__panic>
     }
     cprintf("swap_in: load disk swap entry %d with swap_page in vadr 0x%x\n", (*ptep)>>8, addr);
c010564c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010564f:	8b 00                	mov    (%eax),%eax
c0105651:	c1 e8 08             	shr    $0x8,%eax
c0105654:	83 ec 04             	sub    $0x4,%esp
c0105657:	ff 75 0c             	pushl  0xc(%ebp)
c010565a:	50                   	push   %eax
c010565b:	68 18 cc 10 c0       	push   $0xc010cc18
c0105660:	e8 32 ac ff ff       	call   c0100297 <cprintf>
c0105665:	83 c4 10             	add    $0x10,%esp
     *ptr_result=result;
c0105668:	8b 45 10             	mov    0x10(%ebp),%eax
c010566b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010566e:	89 10                	mov    %edx,(%eax)
     return 0;
c0105670:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105675:	c9                   	leave  
c0105676:	c3                   	ret    

c0105677 <check_content_set>:



static inline void
check_content_set(void)
{
c0105677:	55                   	push   %ebp
c0105678:	89 e5                	mov    %esp,%ebp
c010567a:	83 ec 08             	sub    $0x8,%esp
     *(unsigned char *)0x1000 = 0x0a;
c010567d:	b8 00 10 00 00       	mov    $0x1000,%eax
c0105682:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c0105685:	a1 64 0f 1b c0       	mov    0xc01b0f64,%eax
c010568a:	83 f8 01             	cmp    $0x1,%eax
c010568d:	74 19                	je     c01056a8 <check_content_set+0x31>
c010568f:	68 56 cc 10 c0       	push   $0xc010cc56
c0105694:	68 96 cb 10 c0       	push   $0xc010cb96
c0105699:	68 92 00 00 00       	push   $0x92
c010569e:	68 30 cb 10 c0       	push   $0xc010cb30
c01056a3:	e8 55 ad ff ff       	call   c01003fd <__panic>
     *(unsigned char *)0x1010 = 0x0a;
c01056a8:	b8 10 10 00 00       	mov    $0x1010,%eax
c01056ad:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c01056b0:	a1 64 0f 1b c0       	mov    0xc01b0f64,%eax
c01056b5:	83 f8 01             	cmp    $0x1,%eax
c01056b8:	74 19                	je     c01056d3 <check_content_set+0x5c>
c01056ba:	68 56 cc 10 c0       	push   $0xc010cc56
c01056bf:	68 96 cb 10 c0       	push   $0xc010cb96
c01056c4:	68 94 00 00 00       	push   $0x94
c01056c9:	68 30 cb 10 c0       	push   $0xc010cb30
c01056ce:	e8 2a ad ff ff       	call   c01003fd <__panic>
     *(unsigned char *)0x2000 = 0x0b;
c01056d3:	b8 00 20 00 00       	mov    $0x2000,%eax
c01056d8:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c01056db:	a1 64 0f 1b c0       	mov    0xc01b0f64,%eax
c01056e0:	83 f8 02             	cmp    $0x2,%eax
c01056e3:	74 19                	je     c01056fe <check_content_set+0x87>
c01056e5:	68 65 cc 10 c0       	push   $0xc010cc65
c01056ea:	68 96 cb 10 c0       	push   $0xc010cb96
c01056ef:	68 96 00 00 00       	push   $0x96
c01056f4:	68 30 cb 10 c0       	push   $0xc010cb30
c01056f9:	e8 ff ac ff ff       	call   c01003fd <__panic>
     *(unsigned char *)0x2010 = 0x0b;
c01056fe:	b8 10 20 00 00       	mov    $0x2010,%eax
c0105703:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c0105706:	a1 64 0f 1b c0       	mov    0xc01b0f64,%eax
c010570b:	83 f8 02             	cmp    $0x2,%eax
c010570e:	74 19                	je     c0105729 <check_content_set+0xb2>
c0105710:	68 65 cc 10 c0       	push   $0xc010cc65
c0105715:	68 96 cb 10 c0       	push   $0xc010cb96
c010571a:	68 98 00 00 00       	push   $0x98
c010571f:	68 30 cb 10 c0       	push   $0xc010cb30
c0105724:	e8 d4 ac ff ff       	call   c01003fd <__panic>
     *(unsigned char *)0x3000 = 0x0c;
c0105729:	b8 00 30 00 00       	mov    $0x3000,%eax
c010572e:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c0105731:	a1 64 0f 1b c0       	mov    0xc01b0f64,%eax
c0105736:	83 f8 03             	cmp    $0x3,%eax
c0105739:	74 19                	je     c0105754 <check_content_set+0xdd>
c010573b:	68 74 cc 10 c0       	push   $0xc010cc74
c0105740:	68 96 cb 10 c0       	push   $0xc010cb96
c0105745:	68 9a 00 00 00       	push   $0x9a
c010574a:	68 30 cb 10 c0       	push   $0xc010cb30
c010574f:	e8 a9 ac ff ff       	call   c01003fd <__panic>
     *(unsigned char *)0x3010 = 0x0c;
c0105754:	b8 10 30 00 00       	mov    $0x3010,%eax
c0105759:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c010575c:	a1 64 0f 1b c0       	mov    0xc01b0f64,%eax
c0105761:	83 f8 03             	cmp    $0x3,%eax
c0105764:	74 19                	je     c010577f <check_content_set+0x108>
c0105766:	68 74 cc 10 c0       	push   $0xc010cc74
c010576b:	68 96 cb 10 c0       	push   $0xc010cb96
c0105770:	68 9c 00 00 00       	push   $0x9c
c0105775:	68 30 cb 10 c0       	push   $0xc010cb30
c010577a:	e8 7e ac ff ff       	call   c01003fd <__panic>
     *(unsigned char *)0x4000 = 0x0d;
c010577f:	b8 00 40 00 00       	mov    $0x4000,%eax
c0105784:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c0105787:	a1 64 0f 1b c0       	mov    0xc01b0f64,%eax
c010578c:	83 f8 04             	cmp    $0x4,%eax
c010578f:	74 19                	je     c01057aa <check_content_set+0x133>
c0105791:	68 83 cc 10 c0       	push   $0xc010cc83
c0105796:	68 96 cb 10 c0       	push   $0xc010cb96
c010579b:	68 9e 00 00 00       	push   $0x9e
c01057a0:	68 30 cb 10 c0       	push   $0xc010cb30
c01057a5:	e8 53 ac ff ff       	call   c01003fd <__panic>
     *(unsigned char *)0x4010 = 0x0d;
c01057aa:	b8 10 40 00 00       	mov    $0x4010,%eax
c01057af:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c01057b2:	a1 64 0f 1b c0       	mov    0xc01b0f64,%eax
c01057b7:	83 f8 04             	cmp    $0x4,%eax
c01057ba:	74 19                	je     c01057d5 <check_content_set+0x15e>
c01057bc:	68 83 cc 10 c0       	push   $0xc010cc83
c01057c1:	68 96 cb 10 c0       	push   $0xc010cb96
c01057c6:	68 a0 00 00 00       	push   $0xa0
c01057cb:	68 30 cb 10 c0       	push   $0xc010cb30
c01057d0:	e8 28 ac ff ff       	call   c01003fd <__panic>
}
c01057d5:	90                   	nop
c01057d6:	c9                   	leave  
c01057d7:	c3                   	ret    

c01057d8 <check_content_access>:

static inline int
check_content_access(void)
{
c01057d8:	55                   	push   %ebp
c01057d9:	89 e5                	mov    %esp,%ebp
c01057db:	83 ec 18             	sub    $0x18,%esp
    int ret = sm->check_swap();
c01057de:	a1 74 0f 1b c0       	mov    0xc01b0f74,%eax
c01057e3:	8b 40 1c             	mov    0x1c(%eax),%eax
c01057e6:	ff d0                	call   *%eax
c01057e8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return ret;
c01057eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01057ee:	c9                   	leave  
c01057ef:	c3                   	ret    

c01057f0 <check_swap>:
#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
check_swap(void)
{
c01057f0:	55                   	push   %ebp
c01057f1:	89 e5                	mov    %esp,%ebp
c01057f3:	83 ec 68             	sub    $0x68,%esp
    //backup mem env
     int ret, count = 0, total = 0, i;
c01057f6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01057fd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
     list_entry_t *le = &free_list;
c0105804:	c7 45 e8 a4 31 1b c0 	movl   $0xc01b31a4,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c010580b:	eb 60                	jmp    c010586d <check_swap+0x7d>
        struct Page *p = le2page(le, page_link);
c010580d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105810:	83 e8 0c             	sub    $0xc,%eax
c0105813:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(PageProperty(p));
c0105816:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105819:	83 c0 04             	add    $0x4,%eax
c010581c:	c7 45 b0 01 00 00 00 	movl   $0x1,-0x50(%ebp)
c0105823:	89 45 ac             	mov    %eax,-0x54(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0105826:	8b 45 ac             	mov    -0x54(%ebp),%eax
c0105829:	8b 55 b0             	mov    -0x50(%ebp),%edx
c010582c:	0f a3 10             	bt     %edx,(%eax)
c010582f:	19 c0                	sbb    %eax,%eax
c0105831:	89 45 a8             	mov    %eax,-0x58(%ebp)
    return oldbit != 0;
c0105834:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
c0105838:	0f 95 c0             	setne  %al
c010583b:	0f b6 c0             	movzbl %al,%eax
c010583e:	85 c0                	test   %eax,%eax
c0105840:	75 19                	jne    c010585b <check_swap+0x6b>
c0105842:	68 92 cc 10 c0       	push   $0xc010cc92
c0105847:	68 96 cb 10 c0       	push   $0xc010cb96
c010584c:	68 bb 00 00 00       	push   $0xbb
c0105851:	68 30 cb 10 c0       	push   $0xc010cb30
c0105856:	e8 a2 ab ff ff       	call   c01003fd <__panic>
        count ++, total += p->property;
c010585b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010585f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105862:	8b 50 08             	mov    0x8(%eax),%edx
c0105865:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105868:	01 d0                	add    %edx,%eax
c010586a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010586d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105870:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0105873:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0105876:	8b 40 04             	mov    0x4(%eax),%eax
check_swap(void)
{
    //backup mem env
     int ret, count = 0, total = 0, i;
     list_entry_t *le = &free_list;
     while ((le = list_next(le)) != &free_list) {
c0105879:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010587c:	81 7d e8 a4 31 1b c0 	cmpl   $0xc01b31a4,-0x18(%ebp)
c0105883:	75 88                	jne    c010580d <check_swap+0x1d>
        struct Page *p = le2page(le, page_link);
        assert(PageProperty(p));
        count ++, total += p->property;
     }
     assert(total == nr_free_pages());
c0105885:	e8 c3 18 00 00       	call   c010714d <nr_free_pages>
c010588a:	89 c2                	mov    %eax,%edx
c010588c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010588f:	39 c2                	cmp    %eax,%edx
c0105891:	74 19                	je     c01058ac <check_swap+0xbc>
c0105893:	68 a2 cc 10 c0       	push   $0xc010cca2
c0105898:	68 96 cb 10 c0       	push   $0xc010cb96
c010589d:	68 be 00 00 00       	push   $0xbe
c01058a2:	68 30 cb 10 c0       	push   $0xc010cb30
c01058a7:	e8 51 ab ff ff       	call   c01003fd <__panic>
     cprintf("BEGIN check_swap: count %d, total %d\n",count,total);
c01058ac:	83 ec 04             	sub    $0x4,%esp
c01058af:	ff 75 f0             	pushl  -0x10(%ebp)
c01058b2:	ff 75 f4             	pushl  -0xc(%ebp)
c01058b5:	68 bc cc 10 c0       	push   $0xc010ccbc
c01058ba:	e8 d8 a9 ff ff       	call   c0100297 <cprintf>
c01058bf:	83 c4 10             	add    $0x10,%esp
     
     //now we set the phy pages env     
     struct mm_struct *mm = mm_create();
c01058c2:	e8 95 dd ff ff       	call   c010365c <mm_create>
c01058c7:	89 45 d8             	mov    %eax,-0x28(%ebp)
     assert(mm != NULL);
c01058ca:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c01058ce:	75 19                	jne    c01058e9 <check_swap+0xf9>
c01058d0:	68 e2 cc 10 c0       	push   $0xc010cce2
c01058d5:	68 96 cb 10 c0       	push   $0xc010cb96
c01058da:	68 c3 00 00 00       	push   $0xc3
c01058df:	68 30 cb 10 c0       	push   $0xc010cb30
c01058e4:	e8 14 ab ff ff       	call   c01003fd <__panic>

     extern struct mm_struct *check_mm_struct;
     assert(check_mm_struct == NULL);
c01058e9:	a1 d0 30 1b c0       	mov    0xc01b30d0,%eax
c01058ee:	85 c0                	test   %eax,%eax
c01058f0:	74 19                	je     c010590b <check_swap+0x11b>
c01058f2:	68 ed cc 10 c0       	push   $0xc010cced
c01058f7:	68 96 cb 10 c0       	push   $0xc010cb96
c01058fc:	68 c6 00 00 00       	push   $0xc6
c0105901:	68 30 cb 10 c0       	push   $0xc010cb30
c0105906:	e8 f2 aa ff ff       	call   c01003fd <__panic>

     check_mm_struct = mm;
c010590b:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010590e:	a3 d0 30 1b c0       	mov    %eax,0xc01b30d0

     pde_t *pgdir = mm->pgdir = boot_pgdir;
c0105913:	8b 15 20 ca 12 c0    	mov    0xc012ca20,%edx
c0105919:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010591c:	89 50 0c             	mov    %edx,0xc(%eax)
c010591f:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0105922:	8b 40 0c             	mov    0xc(%eax),%eax
c0105925:	89 45 d4             	mov    %eax,-0x2c(%ebp)
     assert(pgdir[0] == 0);
c0105928:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010592b:	8b 00                	mov    (%eax),%eax
c010592d:	85 c0                	test   %eax,%eax
c010592f:	74 19                	je     c010594a <check_swap+0x15a>
c0105931:	68 05 cd 10 c0       	push   $0xc010cd05
c0105936:	68 96 cb 10 c0       	push   $0xc010cb96
c010593b:	68 cb 00 00 00       	push   $0xcb
c0105940:	68 30 cb 10 c0       	push   $0xc010cb30
c0105945:	e8 b3 aa ff ff       	call   c01003fd <__panic>

     struct vma_struct *vma = vma_create(BEING_CHECK_VALID_VADDR, CHECK_VALID_VADDR, VM_WRITE | VM_READ);
c010594a:	83 ec 04             	sub    $0x4,%esp
c010594d:	6a 03                	push   $0x3
c010594f:	68 00 60 00 00       	push   $0x6000
c0105954:	68 00 10 00 00       	push   $0x1000
c0105959:	e8 9c dd ff ff       	call   c01036fa <vma_create>
c010595e:	83 c4 10             	add    $0x10,%esp
c0105961:	89 45 d0             	mov    %eax,-0x30(%ebp)
     assert(vma != NULL);
c0105964:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c0105968:	75 19                	jne    c0105983 <check_swap+0x193>
c010596a:	68 13 cd 10 c0       	push   $0xc010cd13
c010596f:	68 96 cb 10 c0       	push   $0xc010cb96
c0105974:	68 ce 00 00 00       	push   $0xce
c0105979:	68 30 cb 10 c0       	push   $0xc010cb30
c010597e:	e8 7a aa ff ff       	call   c01003fd <__panic>

     insert_vma_struct(mm, vma);
c0105983:	83 ec 08             	sub    $0x8,%esp
c0105986:	ff 75 d0             	pushl  -0x30(%ebp)
c0105989:	ff 75 d8             	pushl  -0x28(%ebp)
c010598c:	e8 d1 de ff ff       	call   c0103862 <insert_vma_struct>
c0105991:	83 c4 10             	add    $0x10,%esp

     //setup the temp Page Table vaddr 0~4MB
     cprintf("setup Page Table for vaddr 0X1000, so alloc a page\n");
c0105994:	83 ec 0c             	sub    $0xc,%esp
c0105997:	68 20 cd 10 c0       	push   $0xc010cd20
c010599c:	e8 f6 a8 ff ff       	call   c0100297 <cprintf>
c01059a1:	83 c4 10             	add    $0x10,%esp
     pte_t *temp_ptep=NULL;
c01059a4:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
c01059ab:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01059ae:	8b 40 0c             	mov    0xc(%eax),%eax
c01059b1:	83 ec 04             	sub    $0x4,%esp
c01059b4:	6a 01                	push   $0x1
c01059b6:	68 00 10 00 00       	push   $0x1000
c01059bb:	50                   	push   %eax
c01059bc:	e8 57 1d 00 00       	call   c0107718 <get_pte>
c01059c1:	83 c4 10             	add    $0x10,%esp
c01059c4:	89 45 cc             	mov    %eax,-0x34(%ebp)
     assert(temp_ptep!= NULL);
c01059c7:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c01059cb:	75 19                	jne    c01059e6 <check_swap+0x1f6>
c01059cd:	68 54 cd 10 c0       	push   $0xc010cd54
c01059d2:	68 96 cb 10 c0       	push   $0xc010cb96
c01059d7:	68 d6 00 00 00       	push   $0xd6
c01059dc:	68 30 cb 10 c0       	push   $0xc010cb30
c01059e1:	e8 17 aa ff ff       	call   c01003fd <__panic>
     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
c01059e6:	83 ec 0c             	sub    $0xc,%esp
c01059e9:	68 68 cd 10 c0       	push   $0xc010cd68
c01059ee:	e8 a4 a8 ff ff       	call   c0100297 <cprintf>
c01059f3:	83 c4 10             	add    $0x10,%esp
     
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01059f6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01059fd:	e9 90 00 00 00       	jmp    c0105a92 <check_swap+0x2a2>
          check_rp[i] = alloc_page();
c0105a02:	83 ec 0c             	sub    $0xc,%esp
c0105a05:	6a 01                	push   $0x1
c0105a07:	e8 a0 16 00 00       	call   c01070ac <alloc_pages>
c0105a0c:	83 c4 10             	add    $0x10,%esp
c0105a0f:	89 c2                	mov    %eax,%edx
c0105a11:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105a14:	89 14 85 e0 30 1b c0 	mov    %edx,-0x3fe4cf20(,%eax,4)
          assert(check_rp[i] != NULL );
c0105a1b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105a1e:	8b 04 85 e0 30 1b c0 	mov    -0x3fe4cf20(,%eax,4),%eax
c0105a25:	85 c0                	test   %eax,%eax
c0105a27:	75 19                	jne    c0105a42 <check_swap+0x252>
c0105a29:	68 8c cd 10 c0       	push   $0xc010cd8c
c0105a2e:	68 96 cb 10 c0       	push   $0xc010cb96
c0105a33:	68 db 00 00 00       	push   $0xdb
c0105a38:	68 30 cb 10 c0       	push   $0xc010cb30
c0105a3d:	e8 bb a9 ff ff       	call   c01003fd <__panic>
          assert(!PageProperty(check_rp[i]));
c0105a42:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105a45:	8b 04 85 e0 30 1b c0 	mov    -0x3fe4cf20(,%eax,4),%eax
c0105a4c:	83 c0 04             	add    $0x4,%eax
c0105a4f:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
c0105a56:	89 45 a4             	mov    %eax,-0x5c(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0105a59:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0105a5c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0105a5f:	0f a3 10             	bt     %edx,(%eax)
c0105a62:	19 c0                	sbb    %eax,%eax
c0105a64:	89 45 a0             	mov    %eax,-0x60(%ebp)
    return oldbit != 0;
c0105a67:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
c0105a6b:	0f 95 c0             	setne  %al
c0105a6e:	0f b6 c0             	movzbl %al,%eax
c0105a71:	85 c0                	test   %eax,%eax
c0105a73:	74 19                	je     c0105a8e <check_swap+0x29e>
c0105a75:	68 a0 cd 10 c0       	push   $0xc010cda0
c0105a7a:	68 96 cb 10 c0       	push   $0xc010cb96
c0105a7f:	68 dc 00 00 00       	push   $0xdc
c0105a84:	68 30 cb 10 c0       	push   $0xc010cb30
c0105a89:	e8 6f a9 ff ff       	call   c01003fd <__panic>
     pte_t *temp_ptep=NULL;
     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
     assert(temp_ptep!= NULL);
     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
     
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0105a8e:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0105a92:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0105a96:	0f 8e 66 ff ff ff    	jle    c0105a02 <check_swap+0x212>
          check_rp[i] = alloc_page();
          assert(check_rp[i] != NULL );
          assert(!PageProperty(check_rp[i]));
     }
     list_entry_t free_list_store = free_list;
c0105a9c:	a1 a4 31 1b c0       	mov    0xc01b31a4,%eax
c0105aa1:	8b 15 a8 31 1b c0    	mov    0xc01b31a8,%edx
c0105aa7:	89 45 98             	mov    %eax,-0x68(%ebp)
c0105aaa:	89 55 9c             	mov    %edx,-0x64(%ebp)
c0105aad:	c7 45 c0 a4 31 1b c0 	movl   $0xc01b31a4,-0x40(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0105ab4:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0105ab7:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0105aba:	89 50 04             	mov    %edx,0x4(%eax)
c0105abd:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0105ac0:	8b 50 04             	mov    0x4(%eax),%edx
c0105ac3:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0105ac6:	89 10                	mov    %edx,(%eax)
c0105ac8:	c7 45 c8 a4 31 1b c0 	movl   $0xc01b31a4,-0x38(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0105acf:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0105ad2:	8b 40 04             	mov    0x4(%eax),%eax
c0105ad5:	39 45 c8             	cmp    %eax,-0x38(%ebp)
c0105ad8:	0f 94 c0             	sete   %al
c0105adb:	0f b6 c0             	movzbl %al,%eax
     list_init(&free_list);
     assert(list_empty(&free_list));
c0105ade:	85 c0                	test   %eax,%eax
c0105ae0:	75 19                	jne    c0105afb <check_swap+0x30b>
c0105ae2:	68 bb cd 10 c0       	push   $0xc010cdbb
c0105ae7:	68 96 cb 10 c0       	push   $0xc010cb96
c0105aec:	68 e0 00 00 00       	push   $0xe0
c0105af1:	68 30 cb 10 c0       	push   $0xc010cb30
c0105af6:	e8 02 a9 ff ff       	call   c01003fd <__panic>
     
     //assert(alloc_page() == NULL);
     
     unsigned int nr_free_store = nr_free;
c0105afb:	a1 ac 31 1b c0       	mov    0xc01b31ac,%eax
c0105b00:	89 45 bc             	mov    %eax,-0x44(%ebp)
     nr_free = 0;
c0105b03:	c7 05 ac 31 1b c0 00 	movl   $0x0,0xc01b31ac
c0105b0a:	00 00 00 
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0105b0d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0105b14:	eb 1c                	jmp    c0105b32 <check_swap+0x342>
        free_pages(check_rp[i],1);
c0105b16:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105b19:	8b 04 85 e0 30 1b c0 	mov    -0x3fe4cf20(,%eax,4),%eax
c0105b20:	83 ec 08             	sub    $0x8,%esp
c0105b23:	6a 01                	push   $0x1
c0105b25:	50                   	push   %eax
c0105b26:	e8 ed 15 00 00       	call   c0107118 <free_pages>
c0105b2b:	83 c4 10             	add    $0x10,%esp
     
     //assert(alloc_page() == NULL);
     
     unsigned int nr_free_store = nr_free;
     nr_free = 0;
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0105b2e:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0105b32:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0105b36:	7e de                	jle    c0105b16 <check_swap+0x326>
        free_pages(check_rp[i],1);
     }
     assert(nr_free==CHECK_VALID_PHY_PAGE_NUM);
c0105b38:	a1 ac 31 1b c0       	mov    0xc01b31ac,%eax
c0105b3d:	83 f8 04             	cmp    $0x4,%eax
c0105b40:	74 19                	je     c0105b5b <check_swap+0x36b>
c0105b42:	68 d4 cd 10 c0       	push   $0xc010cdd4
c0105b47:	68 96 cb 10 c0       	push   $0xc010cb96
c0105b4c:	68 e9 00 00 00       	push   $0xe9
c0105b51:	68 30 cb 10 c0       	push   $0xc010cb30
c0105b56:	e8 a2 a8 ff ff       	call   c01003fd <__panic>
     
     cprintf("set up init env for check_swap begin!\n");
c0105b5b:	83 ec 0c             	sub    $0xc,%esp
c0105b5e:	68 f8 cd 10 c0       	push   $0xc010cdf8
c0105b63:	e8 2f a7 ff ff       	call   c0100297 <cprintf>
c0105b68:	83 c4 10             	add    $0x10,%esp
     //setup initial vir_page<->phy_page environment for page relpacement algorithm 

     
     pgfault_num=0;
c0105b6b:	c7 05 64 0f 1b c0 00 	movl   $0x0,0xc01b0f64
c0105b72:	00 00 00 
     
     check_content_set();
c0105b75:	e8 fd fa ff ff       	call   c0105677 <check_content_set>
     assert( nr_free == 0);         
c0105b7a:	a1 ac 31 1b c0       	mov    0xc01b31ac,%eax
c0105b7f:	85 c0                	test   %eax,%eax
c0105b81:	74 19                	je     c0105b9c <check_swap+0x3ac>
c0105b83:	68 1f ce 10 c0       	push   $0xc010ce1f
c0105b88:	68 96 cb 10 c0       	push   $0xc010cb96
c0105b8d:	68 f2 00 00 00       	push   $0xf2
c0105b92:	68 30 cb 10 c0       	push   $0xc010cb30
c0105b97:	e8 61 a8 ff ff       	call   c01003fd <__panic>
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c0105b9c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0105ba3:	eb 26                	jmp    c0105bcb <check_swap+0x3db>
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
c0105ba5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105ba8:	c7 04 85 00 31 1b c0 	movl   $0xffffffff,-0x3fe4cf00(,%eax,4)
c0105baf:	ff ff ff ff 
c0105bb3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105bb6:	8b 14 85 00 31 1b c0 	mov    -0x3fe4cf00(,%eax,4),%edx
c0105bbd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105bc0:	89 14 85 40 31 1b c0 	mov    %edx,-0x3fe4cec0(,%eax,4)
     
     pgfault_num=0;
     
     check_content_set();
     assert( nr_free == 0);         
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c0105bc7:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0105bcb:	83 7d ec 09          	cmpl   $0x9,-0x14(%ebp)
c0105bcf:	7e d4                	jle    c0105ba5 <check_swap+0x3b5>
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
     
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0105bd1:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0105bd8:	e9 cc 00 00 00       	jmp    c0105ca9 <check_swap+0x4b9>
         check_ptep[i]=0;
c0105bdd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105be0:	c7 04 85 94 31 1b c0 	movl   $0x0,-0x3fe4ce6c(,%eax,4)
c0105be7:	00 00 00 00 
         check_ptep[i] = get_pte(pgdir, (i+1)*0x1000, 0);
c0105beb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105bee:	83 c0 01             	add    $0x1,%eax
c0105bf1:	c1 e0 0c             	shl    $0xc,%eax
c0105bf4:	83 ec 04             	sub    $0x4,%esp
c0105bf7:	6a 00                	push   $0x0
c0105bf9:	50                   	push   %eax
c0105bfa:	ff 75 d4             	pushl  -0x2c(%ebp)
c0105bfd:	e8 16 1b 00 00       	call   c0107718 <get_pte>
c0105c02:	83 c4 10             	add    $0x10,%esp
c0105c05:	89 c2                	mov    %eax,%edx
c0105c07:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105c0a:	89 14 85 94 31 1b c0 	mov    %edx,-0x3fe4ce6c(,%eax,4)
         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
         assert(check_ptep[i] != NULL);
c0105c11:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105c14:	8b 04 85 94 31 1b c0 	mov    -0x3fe4ce6c(,%eax,4),%eax
c0105c1b:	85 c0                	test   %eax,%eax
c0105c1d:	75 19                	jne    c0105c38 <check_swap+0x448>
c0105c1f:	68 2c ce 10 c0       	push   $0xc010ce2c
c0105c24:	68 96 cb 10 c0       	push   $0xc010cb96
c0105c29:	68 fa 00 00 00       	push   $0xfa
c0105c2e:	68 30 cb 10 c0       	push   $0xc010cb30
c0105c33:	e8 c5 a7 ff ff       	call   c01003fd <__panic>
         assert(pte2page(*check_ptep[i]) == check_rp[i]);
c0105c38:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105c3b:	8b 04 85 94 31 1b c0 	mov    -0x3fe4ce6c(,%eax,4),%eax
c0105c42:	8b 00                	mov    (%eax),%eax
c0105c44:	83 ec 0c             	sub    $0xc,%esp
c0105c47:	50                   	push   %eax
c0105c48:	e8 d8 f6 ff ff       	call   c0105325 <pte2page>
c0105c4d:	83 c4 10             	add    $0x10,%esp
c0105c50:	89 c2                	mov    %eax,%edx
c0105c52:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105c55:	8b 04 85 e0 30 1b c0 	mov    -0x3fe4cf20(,%eax,4),%eax
c0105c5c:	39 c2                	cmp    %eax,%edx
c0105c5e:	74 19                	je     c0105c79 <check_swap+0x489>
c0105c60:	68 44 ce 10 c0       	push   $0xc010ce44
c0105c65:	68 96 cb 10 c0       	push   $0xc010cb96
c0105c6a:	68 fb 00 00 00       	push   $0xfb
c0105c6f:	68 30 cb 10 c0       	push   $0xc010cb30
c0105c74:	e8 84 a7 ff ff       	call   c01003fd <__panic>
         assert((*check_ptep[i] & PTE_P));          
c0105c79:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105c7c:	8b 04 85 94 31 1b c0 	mov    -0x3fe4ce6c(,%eax,4),%eax
c0105c83:	8b 00                	mov    (%eax),%eax
c0105c85:	83 e0 01             	and    $0x1,%eax
c0105c88:	85 c0                	test   %eax,%eax
c0105c8a:	75 19                	jne    c0105ca5 <check_swap+0x4b5>
c0105c8c:	68 6c ce 10 c0       	push   $0xc010ce6c
c0105c91:	68 96 cb 10 c0       	push   $0xc010cb96
c0105c96:	68 fc 00 00 00       	push   $0xfc
c0105c9b:	68 30 cb 10 c0       	push   $0xc010cb30
c0105ca0:	e8 58 a7 ff ff       	call   c01003fd <__panic>
     check_content_set();
     assert( nr_free == 0);         
     for(i = 0; i<MAX_SEQ_NO ; i++) 
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
     
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0105ca5:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0105ca9:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0105cad:	0f 8e 2a ff ff ff    	jle    c0105bdd <check_swap+0x3ed>
         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
         assert(check_ptep[i] != NULL);
         assert(pte2page(*check_ptep[i]) == check_rp[i]);
         assert((*check_ptep[i] & PTE_P));          
     }
     cprintf("set up init env for check_swap over!\n");
c0105cb3:	83 ec 0c             	sub    $0xc,%esp
c0105cb6:	68 88 ce 10 c0       	push   $0xc010ce88
c0105cbb:	e8 d7 a5 ff ff       	call   c0100297 <cprintf>
c0105cc0:	83 c4 10             	add    $0x10,%esp
     // now access the virt pages to test  page relpacement algorithm 
     ret=check_content_access();
c0105cc3:	e8 10 fb ff ff       	call   c01057d8 <check_content_access>
c0105cc8:	89 45 b8             	mov    %eax,-0x48(%ebp)
     assert(ret==0);
c0105ccb:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
c0105ccf:	74 19                	je     c0105cea <check_swap+0x4fa>
c0105cd1:	68 ae ce 10 c0       	push   $0xc010ceae
c0105cd6:	68 96 cb 10 c0       	push   $0xc010cb96
c0105cdb:	68 01 01 00 00       	push   $0x101
c0105ce0:	68 30 cb 10 c0       	push   $0xc010cb30
c0105ce5:	e8 13 a7 ff ff       	call   c01003fd <__panic>
     
     //restore kernel mem env
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0105cea:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0105cf1:	eb 1c                	jmp    c0105d0f <check_swap+0x51f>
         free_pages(check_rp[i],1);
c0105cf3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105cf6:	8b 04 85 e0 30 1b c0 	mov    -0x3fe4cf20(,%eax,4),%eax
c0105cfd:	83 ec 08             	sub    $0x8,%esp
c0105d00:	6a 01                	push   $0x1
c0105d02:	50                   	push   %eax
c0105d03:	e8 10 14 00 00       	call   c0107118 <free_pages>
c0105d08:	83 c4 10             	add    $0x10,%esp
     // now access the virt pages to test  page relpacement algorithm 
     ret=check_content_access();
     assert(ret==0);
     
     //restore kernel mem env
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0105d0b:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0105d0f:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0105d13:	7e de                	jle    c0105cf3 <check_swap+0x503>
         free_pages(check_rp[i],1);
     } 

     //free_page(pte2page(*temp_ptep));
    free_page(pde2page(pgdir[0]));
c0105d15:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0105d18:	8b 00                	mov    (%eax),%eax
c0105d1a:	83 ec 0c             	sub    $0xc,%esp
c0105d1d:	50                   	push   %eax
c0105d1e:	e8 3c f6 ff ff       	call   c010535f <pde2page>
c0105d23:	83 c4 10             	add    $0x10,%esp
c0105d26:	83 ec 08             	sub    $0x8,%esp
c0105d29:	6a 01                	push   $0x1
c0105d2b:	50                   	push   %eax
c0105d2c:	e8 e7 13 00 00       	call   c0107118 <free_pages>
c0105d31:	83 c4 10             	add    $0x10,%esp
     pgdir[0] = 0;
c0105d34:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0105d37:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
     mm->pgdir = NULL;
c0105d3d:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0105d40:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
     mm_destroy(mm);
c0105d47:	83 ec 0c             	sub    $0xc,%esp
c0105d4a:	ff 75 d8             	pushl  -0x28(%ebp)
c0105d4d:	e8 34 dc ff ff       	call   c0103986 <mm_destroy>
c0105d52:	83 c4 10             	add    $0x10,%esp
     check_mm_struct = NULL;
c0105d55:	c7 05 d0 30 1b c0 00 	movl   $0x0,0xc01b30d0
c0105d5c:	00 00 00 
     
     nr_free = nr_free_store;
c0105d5f:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0105d62:	a3 ac 31 1b c0       	mov    %eax,0xc01b31ac
     free_list = free_list_store;
c0105d67:	8b 45 98             	mov    -0x68(%ebp),%eax
c0105d6a:	8b 55 9c             	mov    -0x64(%ebp),%edx
c0105d6d:	a3 a4 31 1b c0       	mov    %eax,0xc01b31a4
c0105d72:	89 15 a8 31 1b c0    	mov    %edx,0xc01b31a8

     
     le = &free_list;
c0105d78:	c7 45 e8 a4 31 1b c0 	movl   $0xc01b31a4,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c0105d7f:	eb 1d                	jmp    c0105d9e <check_swap+0x5ae>
         struct Page *p = le2page(le, page_link);
c0105d81:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105d84:	83 e8 0c             	sub    $0xc,%eax
c0105d87:	89 45 b4             	mov    %eax,-0x4c(%ebp)
         count --, total -= p->property;
c0105d8a:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0105d8e:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0105d91:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0105d94:	8b 40 08             	mov    0x8(%eax),%eax
c0105d97:	29 c2                	sub    %eax,%edx
c0105d99:	89 d0                	mov    %edx,%eax
c0105d9b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105d9e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105da1:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0105da4:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0105da7:	8b 40 04             	mov    0x4(%eax),%eax
     nr_free = nr_free_store;
     free_list = free_list_store;

     
     le = &free_list;
     while ((le = list_next(le)) != &free_list) {
c0105daa:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0105dad:	81 7d e8 a4 31 1b c0 	cmpl   $0xc01b31a4,-0x18(%ebp)
c0105db4:	75 cb                	jne    c0105d81 <check_swap+0x591>
         struct Page *p = le2page(le, page_link);
         count --, total -= p->property;
     }
     cprintf("count is %d, total is %d\n",count,total);
c0105db6:	83 ec 04             	sub    $0x4,%esp
c0105db9:	ff 75 f0             	pushl  -0x10(%ebp)
c0105dbc:	ff 75 f4             	pushl  -0xc(%ebp)
c0105dbf:	68 b5 ce 10 c0       	push   $0xc010ceb5
c0105dc4:	e8 ce a4 ff ff       	call   c0100297 <cprintf>
c0105dc9:	83 c4 10             	add    $0x10,%esp
     //assert(count == 0);
     
     cprintf("check_swap() succeeded!\n");
c0105dcc:	83 ec 0c             	sub    $0xc,%esp
c0105dcf:	68 cf ce 10 c0       	push   $0xc010cecf
c0105dd4:	e8 be a4 ff ff       	call   c0100297 <cprintf>
c0105dd9:	83 c4 10             	add    $0x10,%esp
}
c0105ddc:	90                   	nop
c0105ddd:	c9                   	leave  
c0105dde:	c3                   	ret    

c0105ddf <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0105ddf:	55                   	push   %ebp
c0105de0:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0105de2:	8b 45 08             	mov    0x8(%ebp),%eax
c0105de5:	8b 15 b8 31 1b c0    	mov    0xc01b31b8,%edx
c0105deb:	29 d0                	sub    %edx,%eax
c0105ded:	c1 f8 05             	sar    $0x5,%eax
}
c0105df0:	5d                   	pop    %ebp
c0105df1:	c3                   	ret    

c0105df2 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0105df2:	55                   	push   %ebp
c0105df3:	89 e5                	mov    %esp,%ebp
    return page2ppn(page) << PGSHIFT;
c0105df5:	ff 75 08             	pushl  0x8(%ebp)
c0105df8:	e8 e2 ff ff ff       	call   c0105ddf <page2ppn>
c0105dfd:	83 c4 04             	add    $0x4,%esp
c0105e00:	c1 e0 0c             	shl    $0xc,%eax
}
c0105e03:	c9                   	leave  
c0105e04:	c3                   	ret    

c0105e05 <page_ref>:
pde2page(pde_t pde) {
    return pa2page(PDE_ADDR(pde));
}

static inline int
page_ref(struct Page *page) {
c0105e05:	55                   	push   %ebp
c0105e06:	89 e5                	mov    %esp,%ebp
    return page->ref;
c0105e08:	8b 45 08             	mov    0x8(%ebp),%eax
c0105e0b:	8b 00                	mov    (%eax),%eax
}
c0105e0d:	5d                   	pop    %ebp
c0105e0e:	c3                   	ret    

c0105e0f <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c0105e0f:	55                   	push   %ebp
c0105e10:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c0105e12:	8b 45 08             	mov    0x8(%ebp),%eax
c0105e15:	8b 55 0c             	mov    0xc(%ebp),%edx
c0105e18:	89 10                	mov    %edx,(%eax)
}
c0105e1a:	90                   	nop
c0105e1b:	5d                   	pop    %ebp
c0105e1c:	c3                   	ret    

c0105e1d <default_init>:

#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
default_init(void) {
c0105e1d:	55                   	push   %ebp
c0105e1e:	89 e5                	mov    %esp,%ebp
c0105e20:	83 ec 10             	sub    $0x10,%esp
c0105e23:	c7 45 fc a4 31 1b c0 	movl   $0xc01b31a4,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0105e2a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0105e2d:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0105e30:	89 50 04             	mov    %edx,0x4(%eax)
c0105e33:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0105e36:	8b 50 04             	mov    0x4(%eax),%edx
c0105e39:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0105e3c:	89 10                	mov    %edx,(%eax)
    list_init(&free_list);
    nr_free = 0;
c0105e3e:	c7 05 ac 31 1b c0 00 	movl   $0x0,0xc01b31ac
c0105e45:	00 00 00 
}
c0105e48:	90                   	nop
c0105e49:	c9                   	leave  
c0105e4a:	c3                   	ret    

c0105e4b <default_init_memmap>:

static void
default_init_memmap(struct Page *base, size_t n) {
c0105e4b:	55                   	push   %ebp
c0105e4c:	89 e5                	mov    %esp,%ebp
c0105e4e:	83 ec 48             	sub    $0x48,%esp
    assert(n > 0);
c0105e51:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0105e55:	75 16                	jne    c0105e6d <default_init_memmap+0x22>
c0105e57:	68 e8 ce 10 c0       	push   $0xc010cee8
c0105e5c:	68 ee ce 10 c0       	push   $0xc010ceee
c0105e61:	6a 6d                	push   $0x6d
c0105e63:	68 03 cf 10 c0       	push   $0xc010cf03
c0105e68:	e8 90 a5 ff ff       	call   c01003fd <__panic>
    struct Page *p = base;
c0105e6d:	8b 45 08             	mov    0x8(%ebp),%eax
c0105e70:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (; p != base + n; p ++) {
c0105e73:	eb 6c                	jmp    c0105ee1 <default_init_memmap+0x96>
        assert(PageReserved(p));
c0105e75:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105e78:	83 c0 04             	add    $0x4,%eax
c0105e7b:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c0105e82:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0105e85:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105e88:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0105e8b:	0f a3 10             	bt     %edx,(%eax)
c0105e8e:	19 c0                	sbb    %eax,%eax
c0105e90:	89 45 e0             	mov    %eax,-0x20(%ebp)
    return oldbit != 0;
c0105e93:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0105e97:	0f 95 c0             	setne  %al
c0105e9a:	0f b6 c0             	movzbl %al,%eax
c0105e9d:	85 c0                	test   %eax,%eax
c0105e9f:	75 16                	jne    c0105eb7 <default_init_memmap+0x6c>
c0105ea1:	68 19 cf 10 c0       	push   $0xc010cf19
c0105ea6:	68 ee ce 10 c0       	push   $0xc010ceee
c0105eab:	6a 70                	push   $0x70
c0105ead:	68 03 cf 10 c0       	push   $0xc010cf03
c0105eb2:	e8 46 a5 ff ff       	call   c01003fd <__panic>
        p->flags = p->property = 0;
c0105eb7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105eba:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
c0105ec1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105ec4:	8b 50 08             	mov    0x8(%eax),%edx
c0105ec7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105eca:	89 50 04             	mov    %edx,0x4(%eax)
        set_page_ref(p, 0);
c0105ecd:	83 ec 08             	sub    $0x8,%esp
c0105ed0:	6a 00                	push   $0x0
c0105ed2:	ff 75 f4             	pushl  -0xc(%ebp)
c0105ed5:	e8 35 ff ff ff       	call   c0105e0f <set_page_ref>
c0105eda:	83 c4 10             	add    $0x10,%esp

static void
default_init_memmap(struct Page *base, size_t n) {
    assert(n > 0);
    struct Page *p = base;
    for (; p != base + n; p ++) {
c0105edd:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
c0105ee1:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105ee4:	c1 e0 05             	shl    $0x5,%eax
c0105ee7:	89 c2                	mov    %eax,%edx
c0105ee9:	8b 45 08             	mov    0x8(%ebp),%eax
c0105eec:	01 d0                	add    %edx,%eax
c0105eee:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0105ef1:	75 82                	jne    c0105e75 <default_init_memmap+0x2a>
        assert(PageReserved(p));
        p->flags = p->property = 0;
        set_page_ref(p, 0);
    }
    base->property = n;
c0105ef3:	8b 45 08             	mov    0x8(%ebp),%eax
c0105ef6:	8b 55 0c             	mov    0xc(%ebp),%edx
c0105ef9:	89 50 08             	mov    %edx,0x8(%eax)
    SetPageProperty(base);
c0105efc:	8b 45 08             	mov    0x8(%ebp),%eax
c0105eff:	83 c0 04             	add    $0x4,%eax
c0105f02:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
c0105f09:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0105f0c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0105f0f:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0105f12:	0f ab 10             	bts    %edx,(%eax)
    nr_free += n;
c0105f15:	8b 15 ac 31 1b c0    	mov    0xc01b31ac,%edx
c0105f1b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105f1e:	01 d0                	add    %edx,%eax
c0105f20:	a3 ac 31 1b c0       	mov    %eax,0xc01b31ac
    list_add(&free_list, &(base->page_link));
c0105f25:	8b 45 08             	mov    0x8(%ebp),%eax
c0105f28:	83 c0 0c             	add    $0xc,%eax
c0105f2b:	c7 45 f0 a4 31 1b c0 	movl   $0xc01b31a4,-0x10(%ebp)
c0105f32:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0105f35:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105f38:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0105f3b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0105f3e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0105f41:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0105f44:	8b 40 04             	mov    0x4(%eax),%eax
c0105f47:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0105f4a:	89 55 d0             	mov    %edx,-0x30(%ebp)
c0105f4d:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0105f50:	89 55 cc             	mov    %edx,-0x34(%ebp)
c0105f53:	89 45 c8             	mov    %eax,-0x38(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0105f56:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0105f59:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0105f5c:	89 10                	mov    %edx,(%eax)
c0105f5e:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0105f61:	8b 10                	mov    (%eax),%edx
c0105f63:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0105f66:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0105f69:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0105f6c:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0105f6f:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0105f72:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0105f75:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0105f78:	89 10                	mov    %edx,(%eax)
}
c0105f7a:	90                   	nop
c0105f7b:	c9                   	leave  
c0105f7c:	c3                   	ret    

c0105f7d <default_alloc_pages>:

// LAB2 MODIFIED need to be rewritten
static struct Page *
default_alloc_pages(size_t n) {
c0105f7d:	55                   	push   %ebp
c0105f7e:	89 e5                	mov    %esp,%ebp
c0105f80:	83 ec 58             	sub    $0x58,%esp
    assert(n > 0);
c0105f83:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0105f87:	75 16                	jne    c0105f9f <default_alloc_pages+0x22>
c0105f89:	68 e8 ce 10 c0       	push   $0xc010cee8
c0105f8e:	68 ee ce 10 c0       	push   $0xc010ceee
c0105f93:	6a 7d                	push   $0x7d
c0105f95:	68 03 cf 10 c0       	push   $0xc010cf03
c0105f9a:	e8 5e a4 ff ff       	call   c01003fd <__panic>
    if (n > nr_free) {
c0105f9f:	a1 ac 31 1b c0       	mov    0xc01b31ac,%eax
c0105fa4:	3b 45 08             	cmp    0x8(%ebp),%eax
c0105fa7:	73 0a                	jae    c0105fb3 <default_alloc_pages+0x36>
        return NULL;
c0105fa9:	b8 00 00 00 00       	mov    $0x0,%eax
c0105fae:	e9 41 01 00 00       	jmp    c01060f4 <default_alloc_pages+0x177>
    }
    struct Page *page = NULL;
c0105fb3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    list_entry_t *le = &free_list;
c0105fba:	c7 45 f0 a4 31 1b c0 	movl   $0xc01b31a4,-0x10(%ebp)
    while ((le = list_next(le)) != &free_list) {
c0105fc1:	eb 1c                	jmp    c0105fdf <default_alloc_pages+0x62>
        struct Page *p = le2page(le, page_link);
c0105fc3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105fc6:	83 e8 0c             	sub    $0xc,%eax
c0105fc9:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (p->property >= n) {
c0105fcc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105fcf:	8b 40 08             	mov    0x8(%eax),%eax
c0105fd2:	3b 45 08             	cmp    0x8(%ebp),%eax
c0105fd5:	72 08                	jb     c0105fdf <default_alloc_pages+0x62>
            page = p;
c0105fd7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105fda:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
c0105fdd:	eb 18                	jmp    c0105ff7 <default_alloc_pages+0x7a>
c0105fdf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105fe2:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0105fe5:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0105fe8:	8b 40 04             	mov    0x4(%eax),%eax
    if (n > nr_free) {
        return NULL;
    }
    struct Page *page = NULL;
    list_entry_t *le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c0105feb:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105fee:	81 7d f0 a4 31 1b c0 	cmpl   $0xc01b31a4,-0x10(%ebp)
c0105ff5:	75 cc                	jne    c0105fc3 <default_alloc_pages+0x46>
        if (p->property >= n) {
            page = p;
            break;
        }
    }
    if (page != NULL) {
c0105ff7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105ffb:	0f 84 f0 00 00 00    	je     c01060f1 <default_alloc_pages+0x174>
c0106001:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106004:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0106007:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010600a:	8b 40 04             	mov    0x4(%eax),%eax
        list_entry_t *following_le = list_next(le);
c010600d:	89 45 e0             	mov    %eax,-0x20(%ebp)
        list_del(&(page->page_link));
c0106010:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106013:	83 c0 0c             	add    $0xc,%eax
c0106016:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0106019:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010601c:	8b 40 04             	mov    0x4(%eax),%eax
c010601f:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0106022:	8b 12                	mov    (%edx),%edx
c0106024:	89 55 c8             	mov    %edx,-0x38(%ebp)
c0106027:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010602a:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010602d:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0106030:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0106033:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0106036:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0106039:	89 10                	mov    %edx,(%eax)
        if (page->property > n) {
c010603b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010603e:	8b 40 08             	mov    0x8(%eax),%eax
c0106041:	3b 45 08             	cmp    0x8(%ebp),%eax
c0106044:	0f 86 81 00 00 00    	jbe    c01060cb <default_alloc_pages+0x14e>
            struct Page *p = page + n;                      // split the allocated page
c010604a:	8b 45 08             	mov    0x8(%ebp),%eax
c010604d:	c1 e0 05             	shl    $0x5,%eax
c0106050:	89 c2                	mov    %eax,%edx
c0106052:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106055:	01 d0                	add    %edx,%eax
c0106057:	89 45 d8             	mov    %eax,-0x28(%ebp)
            p->property = page->property - n;               // set page num
c010605a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010605d:	8b 40 08             	mov    0x8(%eax),%eax
c0106060:	2b 45 08             	sub    0x8(%ebp),%eax
c0106063:	89 c2                	mov    %eax,%edx
c0106065:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0106068:	89 50 08             	mov    %edx,0x8(%eax)
            SetPageProperty(p);                             // mark as the head page
c010606b:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010606e:	83 c0 04             	add    $0x4,%eax
c0106071:	c7 45 d0 01 00 00 00 	movl   $0x1,-0x30(%ebp)
c0106078:	89 45 b0             	mov    %eax,-0x50(%ebp)
c010607b:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010607e:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0106081:	0f ab 10             	bts    %edx,(%eax)
            list_add_before(following_le, &(p->page_link)); // add the remaining block before the formerly following block
c0106084:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0106087:	8d 50 0c             	lea    0xc(%eax),%edx
c010608a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010608d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0106090:	89 55 c0             	mov    %edx,-0x40(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c0106093:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106096:	8b 00                	mov    (%eax),%eax
c0106098:	8b 55 c0             	mov    -0x40(%ebp),%edx
c010609b:	89 55 bc             	mov    %edx,-0x44(%ebp)
c010609e:	89 45 b8             	mov    %eax,-0x48(%ebp)
c01060a1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01060a4:	89 45 b4             	mov    %eax,-0x4c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c01060a7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01060aa:	8b 55 bc             	mov    -0x44(%ebp),%edx
c01060ad:	89 10                	mov    %edx,(%eax)
c01060af:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01060b2:	8b 10                	mov    (%eax),%edx
c01060b4:	8b 45 b8             	mov    -0x48(%ebp),%eax
c01060b7:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c01060ba:	8b 45 bc             	mov    -0x44(%ebp),%eax
c01060bd:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c01060c0:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c01060c3:	8b 45 bc             	mov    -0x44(%ebp),%eax
c01060c6:	8b 55 b8             	mov    -0x48(%ebp),%edx
c01060c9:	89 10                	mov    %edx,(%eax)
        }
        nr_free -= n;
c01060cb:	a1 ac 31 1b c0       	mov    0xc01b31ac,%eax
c01060d0:	2b 45 08             	sub    0x8(%ebp),%eax
c01060d3:	a3 ac 31 1b c0       	mov    %eax,0xc01b31ac
        ClearPageProperty(page);    // mark as "not head page"
c01060d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01060db:	83 c0 04             	add    $0x4,%eax
c01060de:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
c01060e5:	89 45 ac             	mov    %eax,-0x54(%ebp)
 * @nr:     the bit to clear
 * @addr:   the address to start counting from
 * */
static inline void
clear_bit(int nr, volatile void *addr) {
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c01060e8:	8b 45 ac             	mov    -0x54(%ebp),%eax
c01060eb:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01060ee:	0f b3 10             	btr    %edx,(%eax)
    }
    return page;
c01060f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01060f4:	c9                   	leave  
c01060f5:	c3                   	ret    

c01060f6 <default_free_pages>:

// LAB2 MODIFIED
static void
default_free_pages(struct Page *base, size_t n) {
c01060f6:	55                   	push   %ebp
c01060f7:	89 e5                	mov    %esp,%ebp
c01060f9:	81 ec 88 00 00 00    	sub    $0x88,%esp
    assert(n > 0);
c01060ff:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0106103:	75 19                	jne    c010611e <default_free_pages+0x28>
c0106105:	68 e8 ce 10 c0       	push   $0xc010cee8
c010610a:	68 ee ce 10 c0       	push   $0xc010ceee
c010610f:	68 9c 00 00 00       	push   $0x9c
c0106114:	68 03 cf 10 c0       	push   $0xc010cf03
c0106119:	e8 df a2 ff ff       	call   c01003fd <__panic>
    struct Page *p = base;
c010611e:	8b 45 08             	mov    0x8(%ebp),%eax
c0106121:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (; p != base + n; p ++) {
c0106124:	e9 8f 00 00 00       	jmp    c01061b8 <default_free_pages+0xc2>
        assert(!PageReserved(p) && !PageProperty(p));
c0106129:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010612c:	83 c0 04             	add    $0x4,%eax
c010612f:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
c0106136:	89 45 bc             	mov    %eax,-0x44(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0106139:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010613c:	8b 55 c0             	mov    -0x40(%ebp),%edx
c010613f:	0f a3 10             	bt     %edx,(%eax)
c0106142:	19 c0                	sbb    %eax,%eax
c0106144:	89 45 b8             	mov    %eax,-0x48(%ebp)
    return oldbit != 0;
c0106147:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
c010614b:	0f 95 c0             	setne  %al
c010614e:	0f b6 c0             	movzbl %al,%eax
c0106151:	85 c0                	test   %eax,%eax
c0106153:	75 2c                	jne    c0106181 <default_free_pages+0x8b>
c0106155:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106158:	83 c0 04             	add    $0x4,%eax
c010615b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
c0106162:	89 45 b4             	mov    %eax,-0x4c(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0106165:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0106168:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010616b:	0f a3 10             	bt     %edx,(%eax)
c010616e:	19 c0                	sbb    %eax,%eax
c0106170:	89 45 b0             	mov    %eax,-0x50(%ebp)
    return oldbit != 0;
c0106173:	83 7d b0 00          	cmpl   $0x0,-0x50(%ebp)
c0106177:	0f 95 c0             	setne  %al
c010617a:	0f b6 c0             	movzbl %al,%eax
c010617d:	85 c0                	test   %eax,%eax
c010617f:	74 19                	je     c010619a <default_free_pages+0xa4>
c0106181:	68 2c cf 10 c0       	push   $0xc010cf2c
c0106186:	68 ee ce 10 c0       	push   $0xc010ceee
c010618b:	68 9f 00 00 00       	push   $0x9f
c0106190:	68 03 cf 10 c0       	push   $0xc010cf03
c0106195:	e8 63 a2 ff ff       	call   c01003fd <__panic>
        p->flags = 0;
c010619a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010619d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
        set_page_ref(p, 0);     // clear ref flag
c01061a4:	83 ec 08             	sub    $0x8,%esp
c01061a7:	6a 00                	push   $0x0
c01061a9:	ff 75 f4             	pushl  -0xc(%ebp)
c01061ac:	e8 5e fc ff ff       	call   c0105e0f <set_page_ref>
c01061b1:	83 c4 10             	add    $0x10,%esp
// LAB2 MODIFIED
static void
default_free_pages(struct Page *base, size_t n) {
    assert(n > 0);
    struct Page *p = base;
    for (; p != base + n; p ++) {
c01061b4:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
c01061b8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01061bb:	c1 e0 05             	shl    $0x5,%eax
c01061be:	89 c2                	mov    %eax,%edx
c01061c0:	8b 45 08             	mov    0x8(%ebp),%eax
c01061c3:	01 d0                	add    %edx,%eax
c01061c5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01061c8:	0f 85 5b ff ff ff    	jne    c0106129 <default_free_pages+0x33>
        assert(!PageReserved(p) && !PageProperty(p));
        p->flags = 0;
        set_page_ref(p, 0);     // clear ref flag
    }
    base->property = n;
c01061ce:	8b 45 08             	mov    0x8(%ebp),%eax
c01061d1:	8b 55 0c             	mov    0xc(%ebp),%edx
c01061d4:	89 50 08             	mov    %edx,0x8(%eax)
    SetPageProperty(base);
c01061d7:	8b 45 08             	mov    0x8(%ebp),%eax
c01061da:	83 c0 04             	add    $0x4,%eax
c01061dd:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
c01061e4:	89 45 ac             	mov    %eax,-0x54(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c01061e7:	8b 45 ac             	mov    -0x54(%ebp),%eax
c01061ea:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01061ed:	0f ab 10             	bts    %edx,(%eax)
c01061f0:	c7 45 e8 a4 31 1b c0 	movl   $0xc01b31a4,-0x18(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01061f7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01061fa:	8b 40 04             	mov    0x4(%eax),%eax
    // try to extend free block
    list_entry_t *le = list_next(&free_list);
c01061fd:	89 45 f0             	mov    %eax,-0x10(%ebp)
    while (le != &free_list) {
c0106200:	e9 0e 01 00 00       	jmp    c0106313 <default_free_pages+0x21d>
        p = le2page(le, page_link);
c0106205:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106208:	83 e8 0c             	sub    $0xc,%eax
c010620b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010620e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106211:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0106214:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106217:	8b 40 04             	mov    0x4(%eax),%eax
        le = list_next(le);
c010621a:	89 45 f0             	mov    %eax,-0x10(%ebp)
        // page is exactly before one page
        if (base + base->property == p) {
c010621d:	8b 45 08             	mov    0x8(%ebp),%eax
c0106220:	8b 40 08             	mov    0x8(%eax),%eax
c0106223:	c1 e0 05             	shl    $0x5,%eax
c0106226:	89 c2                	mov    %eax,%edx
c0106228:	8b 45 08             	mov    0x8(%ebp),%eax
c010622b:	01 d0                	add    %edx,%eax
c010622d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0106230:	75 64                	jne    c0106296 <default_free_pages+0x1a0>
            base->property += p->property;
c0106232:	8b 45 08             	mov    0x8(%ebp),%eax
c0106235:	8b 50 08             	mov    0x8(%eax),%edx
c0106238:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010623b:	8b 40 08             	mov    0x8(%eax),%eax
c010623e:	01 c2                	add    %eax,%edx
c0106240:	8b 45 08             	mov    0x8(%ebp),%eax
c0106243:	89 50 08             	mov    %edx,0x8(%eax)
            p->property = 0;     // clear properties of p
c0106246:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106249:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
            ClearPageProperty(p);
c0106250:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106253:	83 c0 04             	add    $0x4,%eax
c0106256:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
c010625d:	89 45 a0             	mov    %eax,-0x60(%ebp)
 * @nr:     the bit to clear
 * @addr:   the address to start counting from
 * */
static inline void
clear_bit(int nr, volatile void *addr) {
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0106260:	8b 45 a0             	mov    -0x60(%ebp),%eax
c0106263:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0106266:	0f b3 10             	btr    %edx,(%eax)
            list_del(&(p->page_link));
c0106269:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010626c:	83 c0 0c             	add    $0xc,%eax
c010626f:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0106272:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106275:	8b 40 04             	mov    0x4(%eax),%eax
c0106278:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010627b:	8b 12                	mov    (%edx),%edx
c010627d:	89 55 a8             	mov    %edx,-0x58(%ebp)
c0106280:	89 45 a4             	mov    %eax,-0x5c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0106283:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0106286:	8b 55 a4             	mov    -0x5c(%ebp),%edx
c0106289:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010628c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c010628f:	8b 55 a8             	mov    -0x58(%ebp),%edx
c0106292:	89 10                	mov    %edx,(%eax)
c0106294:	eb 7d                	jmp    c0106313 <default_free_pages+0x21d>
        }
        // page is exactly after one page
        else if (p + p->property == base) {
c0106296:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106299:	8b 40 08             	mov    0x8(%eax),%eax
c010629c:	c1 e0 05             	shl    $0x5,%eax
c010629f:	89 c2                	mov    %eax,%edx
c01062a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01062a4:	01 d0                	add    %edx,%eax
c01062a6:	3b 45 08             	cmp    0x8(%ebp),%eax
c01062a9:	75 68                	jne    c0106313 <default_free_pages+0x21d>
            p->property += base->property;
c01062ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01062ae:	8b 50 08             	mov    0x8(%eax),%edx
c01062b1:	8b 45 08             	mov    0x8(%ebp),%eax
c01062b4:	8b 40 08             	mov    0x8(%eax),%eax
c01062b7:	01 c2                	add    %eax,%edx
c01062b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01062bc:	89 50 08             	mov    %edx,0x8(%eax)
            base->property = 0;     // clear properties of base
c01062bf:	8b 45 08             	mov    0x8(%ebp),%eax
c01062c2:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
            ClearPageProperty(base);
c01062c9:	8b 45 08             	mov    0x8(%ebp),%eax
c01062cc:	83 c0 04             	add    $0x4,%eax
c01062cf:	c7 45 cc 01 00 00 00 	movl   $0x1,-0x34(%ebp)
c01062d6:	89 45 94             	mov    %eax,-0x6c(%ebp)
c01062d9:	8b 45 94             	mov    -0x6c(%ebp),%eax
c01062dc:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01062df:	0f b3 10             	btr    %edx,(%eax)
            base = p;
c01062e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01062e5:	89 45 08             	mov    %eax,0x8(%ebp)
            list_del(&(p->page_link));
c01062e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01062eb:	83 c0 0c             	add    $0xc,%eax
c01062ee:	89 45 d8             	mov    %eax,-0x28(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c01062f1:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01062f4:	8b 40 04             	mov    0x4(%eax),%eax
c01062f7:	8b 55 d8             	mov    -0x28(%ebp),%edx
c01062fa:	8b 12                	mov    (%edx),%edx
c01062fc:	89 55 9c             	mov    %edx,-0x64(%ebp)
c01062ff:	89 45 98             	mov    %eax,-0x68(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0106302:	8b 45 9c             	mov    -0x64(%ebp),%eax
c0106305:	8b 55 98             	mov    -0x68(%ebp),%edx
c0106308:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010630b:	8b 45 98             	mov    -0x68(%ebp),%eax
c010630e:	8b 55 9c             	mov    -0x64(%ebp),%edx
c0106311:	89 10                	mov    %edx,(%eax)
    }
    base->property = n;
    SetPageProperty(base);
    // try to extend free block
    list_entry_t *le = list_next(&free_list);
    while (le != &free_list) {
c0106313:	81 7d f0 a4 31 1b c0 	cmpl   $0xc01b31a4,-0x10(%ebp)
c010631a:	0f 85 e5 fe ff ff    	jne    c0106205 <default_free_pages+0x10f>
c0106320:	c7 45 d0 a4 31 1b c0 	movl   $0xc01b31a4,-0x30(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0106327:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010632a:	8b 40 04             	mov    0x4(%eax),%eax
            base = p;
            list_del(&(p->page_link));
        }
    }
    // search for a place to add page into list
    le = list_next(&free_list);
c010632d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    while (le != &free_list) {
c0106330:	eb 20                	jmp    c0106352 <default_free_pages+0x25c>
        p = le2page(le, page_link);
c0106332:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106335:	83 e8 0c             	sub    $0xc,%eax
c0106338:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (p > base) {
c010633b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010633e:	3b 45 08             	cmp    0x8(%ebp),%eax
c0106341:	77 1a                	ja     c010635d <default_free_pages+0x267>
c0106343:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106346:	89 45 c8             	mov    %eax,-0x38(%ebp)
c0106349:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010634c:	8b 40 04             	mov    0x4(%eax),%eax
            break;
        }
        le = list_next(le);
c010634f:	89 45 f0             	mov    %eax,-0x10(%ebp)
            list_del(&(p->page_link));
        }
    }
    // search for a place to add page into list
    le = list_next(&free_list);
    while (le != &free_list) {
c0106352:	81 7d f0 a4 31 1b c0 	cmpl   $0xc01b31a4,-0x10(%ebp)
c0106359:	75 d7                	jne    c0106332 <default_free_pages+0x23c>
c010635b:	eb 01                	jmp    c010635e <default_free_pages+0x268>
        p = le2page(le, page_link);
        if (p > base) {
            break;
c010635d:	90                   	nop
        }
        le = list_next(le);
    }
    nr_free += n;
c010635e:	8b 15 ac 31 1b c0    	mov    0xc01b31ac,%edx
c0106364:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106367:	01 d0                	add    %edx,%eax
c0106369:	a3 ac 31 1b c0       	mov    %eax,0xc01b31ac
    list_add_before(le, &(base->page_link)); 
c010636e:	8b 45 08             	mov    0x8(%ebp),%eax
c0106371:	8d 50 0c             	lea    0xc(%eax),%edx
c0106374:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106377:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c010637a:	89 55 90             	mov    %edx,-0x70(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c010637d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0106380:	8b 00                	mov    (%eax),%eax
c0106382:	8b 55 90             	mov    -0x70(%ebp),%edx
c0106385:	89 55 8c             	mov    %edx,-0x74(%ebp)
c0106388:	89 45 88             	mov    %eax,-0x78(%ebp)
c010638b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010638e:	89 45 84             	mov    %eax,-0x7c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0106391:	8b 45 84             	mov    -0x7c(%ebp),%eax
c0106394:	8b 55 8c             	mov    -0x74(%ebp),%edx
c0106397:	89 10                	mov    %edx,(%eax)
c0106399:	8b 45 84             	mov    -0x7c(%ebp),%eax
c010639c:	8b 10                	mov    (%eax),%edx
c010639e:	8b 45 88             	mov    -0x78(%ebp),%eax
c01063a1:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c01063a4:	8b 45 8c             	mov    -0x74(%ebp),%eax
c01063a7:	8b 55 84             	mov    -0x7c(%ebp),%edx
c01063aa:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c01063ad:	8b 45 8c             	mov    -0x74(%ebp),%eax
c01063b0:	8b 55 88             	mov    -0x78(%ebp),%edx
c01063b3:	89 10                	mov    %edx,(%eax)
}
c01063b5:	90                   	nop
c01063b6:	c9                   	leave  
c01063b7:	c3                   	ret    

c01063b8 <default_nr_free_pages>:


static size_t
default_nr_free_pages(void) {
c01063b8:	55                   	push   %ebp
c01063b9:	89 e5                	mov    %esp,%ebp
    return nr_free;
c01063bb:	a1 ac 31 1b c0       	mov    0xc01b31ac,%eax
}
c01063c0:	5d                   	pop    %ebp
c01063c1:	c3                   	ret    

c01063c2 <basic_check>:

static void
basic_check(void) {
c01063c2:	55                   	push   %ebp
c01063c3:	89 e5                	mov    %esp,%ebp
c01063c5:	83 ec 38             	sub    $0x38,%esp
    struct Page *p0, *p1, *p2;
    p0 = p1 = p2 = NULL;
c01063c8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01063cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01063d2:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01063d5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01063d8:	89 45 ec             	mov    %eax,-0x14(%ebp)
    assert((p0 = alloc_page()) != NULL);
c01063db:	83 ec 0c             	sub    $0xc,%esp
c01063de:	6a 01                	push   $0x1
c01063e0:	e8 c7 0c 00 00       	call   c01070ac <alloc_pages>
c01063e5:	83 c4 10             	add    $0x10,%esp
c01063e8:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01063eb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01063ef:	75 19                	jne    c010640a <basic_check+0x48>
c01063f1:	68 51 cf 10 c0       	push   $0xc010cf51
c01063f6:	68 ee ce 10 c0       	push   $0xc010ceee
c01063fb:	68 d1 00 00 00       	push   $0xd1
c0106400:	68 03 cf 10 c0       	push   $0xc010cf03
c0106405:	e8 f3 9f ff ff       	call   c01003fd <__panic>
    assert((p1 = alloc_page()) != NULL);
c010640a:	83 ec 0c             	sub    $0xc,%esp
c010640d:	6a 01                	push   $0x1
c010640f:	e8 98 0c 00 00       	call   c01070ac <alloc_pages>
c0106414:	83 c4 10             	add    $0x10,%esp
c0106417:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010641a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010641e:	75 19                	jne    c0106439 <basic_check+0x77>
c0106420:	68 6d cf 10 c0       	push   $0xc010cf6d
c0106425:	68 ee ce 10 c0       	push   $0xc010ceee
c010642a:	68 d2 00 00 00       	push   $0xd2
c010642f:	68 03 cf 10 c0       	push   $0xc010cf03
c0106434:	e8 c4 9f ff ff       	call   c01003fd <__panic>
    assert((p2 = alloc_page()) != NULL);
c0106439:	83 ec 0c             	sub    $0xc,%esp
c010643c:	6a 01                	push   $0x1
c010643e:	e8 69 0c 00 00       	call   c01070ac <alloc_pages>
c0106443:	83 c4 10             	add    $0x10,%esp
c0106446:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0106449:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010644d:	75 19                	jne    c0106468 <basic_check+0xa6>
c010644f:	68 89 cf 10 c0       	push   $0xc010cf89
c0106454:	68 ee ce 10 c0       	push   $0xc010ceee
c0106459:	68 d3 00 00 00       	push   $0xd3
c010645e:	68 03 cf 10 c0       	push   $0xc010cf03
c0106463:	e8 95 9f ff ff       	call   c01003fd <__panic>

    assert(p0 != p1 && p0 != p2 && p1 != p2);
c0106468:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010646b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010646e:	74 10                	je     c0106480 <basic_check+0xbe>
c0106470:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106473:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0106476:	74 08                	je     c0106480 <basic_check+0xbe>
c0106478:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010647b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010647e:	75 19                	jne    c0106499 <basic_check+0xd7>
c0106480:	68 a8 cf 10 c0       	push   $0xc010cfa8
c0106485:	68 ee ce 10 c0       	push   $0xc010ceee
c010648a:	68 d5 00 00 00       	push   $0xd5
c010648f:	68 03 cf 10 c0       	push   $0xc010cf03
c0106494:	e8 64 9f ff ff       	call   c01003fd <__panic>
    assert(page_ref(p0) == 0 && page_ref(p1) == 0 && page_ref(p2) == 0);
c0106499:	83 ec 0c             	sub    $0xc,%esp
c010649c:	ff 75 ec             	pushl  -0x14(%ebp)
c010649f:	e8 61 f9 ff ff       	call   c0105e05 <page_ref>
c01064a4:	83 c4 10             	add    $0x10,%esp
c01064a7:	85 c0                	test   %eax,%eax
c01064a9:	75 24                	jne    c01064cf <basic_check+0x10d>
c01064ab:	83 ec 0c             	sub    $0xc,%esp
c01064ae:	ff 75 f0             	pushl  -0x10(%ebp)
c01064b1:	e8 4f f9 ff ff       	call   c0105e05 <page_ref>
c01064b6:	83 c4 10             	add    $0x10,%esp
c01064b9:	85 c0                	test   %eax,%eax
c01064bb:	75 12                	jne    c01064cf <basic_check+0x10d>
c01064bd:	83 ec 0c             	sub    $0xc,%esp
c01064c0:	ff 75 f4             	pushl  -0xc(%ebp)
c01064c3:	e8 3d f9 ff ff       	call   c0105e05 <page_ref>
c01064c8:	83 c4 10             	add    $0x10,%esp
c01064cb:	85 c0                	test   %eax,%eax
c01064cd:	74 19                	je     c01064e8 <basic_check+0x126>
c01064cf:	68 cc cf 10 c0       	push   $0xc010cfcc
c01064d4:	68 ee ce 10 c0       	push   $0xc010ceee
c01064d9:	68 d6 00 00 00       	push   $0xd6
c01064de:	68 03 cf 10 c0       	push   $0xc010cf03
c01064e3:	e8 15 9f ff ff       	call   c01003fd <__panic>

    assert(page2pa(p0) < npage * PGSIZE);
c01064e8:	83 ec 0c             	sub    $0xc,%esp
c01064eb:	ff 75 ec             	pushl  -0x14(%ebp)
c01064ee:	e8 ff f8 ff ff       	call   c0105df2 <page2pa>
c01064f3:	83 c4 10             	add    $0x10,%esp
c01064f6:	89 c2                	mov    %eax,%edx
c01064f8:	a1 80 0f 1b c0       	mov    0xc01b0f80,%eax
c01064fd:	c1 e0 0c             	shl    $0xc,%eax
c0106500:	39 c2                	cmp    %eax,%edx
c0106502:	72 19                	jb     c010651d <basic_check+0x15b>
c0106504:	68 08 d0 10 c0       	push   $0xc010d008
c0106509:	68 ee ce 10 c0       	push   $0xc010ceee
c010650e:	68 d8 00 00 00       	push   $0xd8
c0106513:	68 03 cf 10 c0       	push   $0xc010cf03
c0106518:	e8 e0 9e ff ff       	call   c01003fd <__panic>
    assert(page2pa(p1) < npage * PGSIZE);
c010651d:	83 ec 0c             	sub    $0xc,%esp
c0106520:	ff 75 f0             	pushl  -0x10(%ebp)
c0106523:	e8 ca f8 ff ff       	call   c0105df2 <page2pa>
c0106528:	83 c4 10             	add    $0x10,%esp
c010652b:	89 c2                	mov    %eax,%edx
c010652d:	a1 80 0f 1b c0       	mov    0xc01b0f80,%eax
c0106532:	c1 e0 0c             	shl    $0xc,%eax
c0106535:	39 c2                	cmp    %eax,%edx
c0106537:	72 19                	jb     c0106552 <basic_check+0x190>
c0106539:	68 25 d0 10 c0       	push   $0xc010d025
c010653e:	68 ee ce 10 c0       	push   $0xc010ceee
c0106543:	68 d9 00 00 00       	push   $0xd9
c0106548:	68 03 cf 10 c0       	push   $0xc010cf03
c010654d:	e8 ab 9e ff ff       	call   c01003fd <__panic>
    assert(page2pa(p2) < npage * PGSIZE);
c0106552:	83 ec 0c             	sub    $0xc,%esp
c0106555:	ff 75 f4             	pushl  -0xc(%ebp)
c0106558:	e8 95 f8 ff ff       	call   c0105df2 <page2pa>
c010655d:	83 c4 10             	add    $0x10,%esp
c0106560:	89 c2                	mov    %eax,%edx
c0106562:	a1 80 0f 1b c0       	mov    0xc01b0f80,%eax
c0106567:	c1 e0 0c             	shl    $0xc,%eax
c010656a:	39 c2                	cmp    %eax,%edx
c010656c:	72 19                	jb     c0106587 <basic_check+0x1c5>
c010656e:	68 42 d0 10 c0       	push   $0xc010d042
c0106573:	68 ee ce 10 c0       	push   $0xc010ceee
c0106578:	68 da 00 00 00       	push   $0xda
c010657d:	68 03 cf 10 c0       	push   $0xc010cf03
c0106582:	e8 76 9e ff ff       	call   c01003fd <__panic>

    list_entry_t free_list_store = free_list;
c0106587:	a1 a4 31 1b c0       	mov    0xc01b31a4,%eax
c010658c:	8b 15 a8 31 1b c0    	mov    0xc01b31a8,%edx
c0106592:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0106595:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0106598:	c7 45 e4 a4 31 1b c0 	movl   $0xc01b31a4,-0x1c(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010659f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01065a2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01065a5:	89 50 04             	mov    %edx,0x4(%eax)
c01065a8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01065ab:	8b 50 04             	mov    0x4(%eax),%edx
c01065ae:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01065b1:	89 10                	mov    %edx,(%eax)
c01065b3:	c7 45 d8 a4 31 1b c0 	movl   $0xc01b31a4,-0x28(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c01065ba:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01065bd:	8b 40 04             	mov    0x4(%eax),%eax
c01065c0:	39 45 d8             	cmp    %eax,-0x28(%ebp)
c01065c3:	0f 94 c0             	sete   %al
c01065c6:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c01065c9:	85 c0                	test   %eax,%eax
c01065cb:	75 19                	jne    c01065e6 <basic_check+0x224>
c01065cd:	68 5f d0 10 c0       	push   $0xc010d05f
c01065d2:	68 ee ce 10 c0       	push   $0xc010ceee
c01065d7:	68 de 00 00 00       	push   $0xde
c01065dc:	68 03 cf 10 c0       	push   $0xc010cf03
c01065e1:	e8 17 9e ff ff       	call   c01003fd <__panic>

    unsigned int nr_free_store = nr_free;
c01065e6:	a1 ac 31 1b c0       	mov    0xc01b31ac,%eax
c01065eb:	89 45 e0             	mov    %eax,-0x20(%ebp)
    nr_free = 0;
c01065ee:	c7 05 ac 31 1b c0 00 	movl   $0x0,0xc01b31ac
c01065f5:	00 00 00 

    assert(alloc_page() == NULL);
c01065f8:	83 ec 0c             	sub    $0xc,%esp
c01065fb:	6a 01                	push   $0x1
c01065fd:	e8 aa 0a 00 00       	call   c01070ac <alloc_pages>
c0106602:	83 c4 10             	add    $0x10,%esp
c0106605:	85 c0                	test   %eax,%eax
c0106607:	74 19                	je     c0106622 <basic_check+0x260>
c0106609:	68 76 d0 10 c0       	push   $0xc010d076
c010660e:	68 ee ce 10 c0       	push   $0xc010ceee
c0106613:	68 e3 00 00 00       	push   $0xe3
c0106618:	68 03 cf 10 c0       	push   $0xc010cf03
c010661d:	e8 db 9d ff ff       	call   c01003fd <__panic>

    free_page(p0);
c0106622:	83 ec 08             	sub    $0x8,%esp
c0106625:	6a 01                	push   $0x1
c0106627:	ff 75 ec             	pushl  -0x14(%ebp)
c010662a:	e8 e9 0a 00 00       	call   c0107118 <free_pages>
c010662f:	83 c4 10             	add    $0x10,%esp
    free_page(p1);
c0106632:	83 ec 08             	sub    $0x8,%esp
c0106635:	6a 01                	push   $0x1
c0106637:	ff 75 f0             	pushl  -0x10(%ebp)
c010663a:	e8 d9 0a 00 00       	call   c0107118 <free_pages>
c010663f:	83 c4 10             	add    $0x10,%esp
    free_page(p2);
c0106642:	83 ec 08             	sub    $0x8,%esp
c0106645:	6a 01                	push   $0x1
c0106647:	ff 75 f4             	pushl  -0xc(%ebp)
c010664a:	e8 c9 0a 00 00       	call   c0107118 <free_pages>
c010664f:	83 c4 10             	add    $0x10,%esp
    assert(nr_free == 3);
c0106652:	a1 ac 31 1b c0       	mov    0xc01b31ac,%eax
c0106657:	83 f8 03             	cmp    $0x3,%eax
c010665a:	74 19                	je     c0106675 <basic_check+0x2b3>
c010665c:	68 8b d0 10 c0       	push   $0xc010d08b
c0106661:	68 ee ce 10 c0       	push   $0xc010ceee
c0106666:	68 e8 00 00 00       	push   $0xe8
c010666b:	68 03 cf 10 c0       	push   $0xc010cf03
c0106670:	e8 88 9d ff ff       	call   c01003fd <__panic>

    assert((p0 = alloc_page()) != NULL);
c0106675:	83 ec 0c             	sub    $0xc,%esp
c0106678:	6a 01                	push   $0x1
c010667a:	e8 2d 0a 00 00       	call   c01070ac <alloc_pages>
c010667f:	83 c4 10             	add    $0x10,%esp
c0106682:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0106685:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0106689:	75 19                	jne    c01066a4 <basic_check+0x2e2>
c010668b:	68 51 cf 10 c0       	push   $0xc010cf51
c0106690:	68 ee ce 10 c0       	push   $0xc010ceee
c0106695:	68 ea 00 00 00       	push   $0xea
c010669a:	68 03 cf 10 c0       	push   $0xc010cf03
c010669f:	e8 59 9d ff ff       	call   c01003fd <__panic>
    assert((p1 = alloc_page()) != NULL);
c01066a4:	83 ec 0c             	sub    $0xc,%esp
c01066a7:	6a 01                	push   $0x1
c01066a9:	e8 fe 09 00 00       	call   c01070ac <alloc_pages>
c01066ae:	83 c4 10             	add    $0x10,%esp
c01066b1:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01066b4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01066b8:	75 19                	jne    c01066d3 <basic_check+0x311>
c01066ba:	68 6d cf 10 c0       	push   $0xc010cf6d
c01066bf:	68 ee ce 10 c0       	push   $0xc010ceee
c01066c4:	68 eb 00 00 00       	push   $0xeb
c01066c9:	68 03 cf 10 c0       	push   $0xc010cf03
c01066ce:	e8 2a 9d ff ff       	call   c01003fd <__panic>
    assert((p2 = alloc_page()) != NULL);
c01066d3:	83 ec 0c             	sub    $0xc,%esp
c01066d6:	6a 01                	push   $0x1
c01066d8:	e8 cf 09 00 00       	call   c01070ac <alloc_pages>
c01066dd:	83 c4 10             	add    $0x10,%esp
c01066e0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01066e3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01066e7:	75 19                	jne    c0106702 <basic_check+0x340>
c01066e9:	68 89 cf 10 c0       	push   $0xc010cf89
c01066ee:	68 ee ce 10 c0       	push   $0xc010ceee
c01066f3:	68 ec 00 00 00       	push   $0xec
c01066f8:	68 03 cf 10 c0       	push   $0xc010cf03
c01066fd:	e8 fb 9c ff ff       	call   c01003fd <__panic>

    assert(alloc_page() == NULL);
c0106702:	83 ec 0c             	sub    $0xc,%esp
c0106705:	6a 01                	push   $0x1
c0106707:	e8 a0 09 00 00       	call   c01070ac <alloc_pages>
c010670c:	83 c4 10             	add    $0x10,%esp
c010670f:	85 c0                	test   %eax,%eax
c0106711:	74 19                	je     c010672c <basic_check+0x36a>
c0106713:	68 76 d0 10 c0       	push   $0xc010d076
c0106718:	68 ee ce 10 c0       	push   $0xc010ceee
c010671d:	68 ee 00 00 00       	push   $0xee
c0106722:	68 03 cf 10 c0       	push   $0xc010cf03
c0106727:	e8 d1 9c ff ff       	call   c01003fd <__panic>

    free_page(p0);
c010672c:	83 ec 08             	sub    $0x8,%esp
c010672f:	6a 01                	push   $0x1
c0106731:	ff 75 ec             	pushl  -0x14(%ebp)
c0106734:	e8 df 09 00 00       	call   c0107118 <free_pages>
c0106739:	83 c4 10             	add    $0x10,%esp
c010673c:	c7 45 e8 a4 31 1b c0 	movl   $0xc01b31a4,-0x18(%ebp)
c0106743:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106746:	8b 40 04             	mov    0x4(%eax),%eax
c0106749:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c010674c:	0f 94 c0             	sete   %al
c010674f:	0f b6 c0             	movzbl %al,%eax
    assert(!list_empty(&free_list));
c0106752:	85 c0                	test   %eax,%eax
c0106754:	74 19                	je     c010676f <basic_check+0x3ad>
c0106756:	68 98 d0 10 c0       	push   $0xc010d098
c010675b:	68 ee ce 10 c0       	push   $0xc010ceee
c0106760:	68 f1 00 00 00       	push   $0xf1
c0106765:	68 03 cf 10 c0       	push   $0xc010cf03
c010676a:	e8 8e 9c ff ff       	call   c01003fd <__panic>

    struct Page *p;
    assert((p = alloc_page()) == p0);
c010676f:	83 ec 0c             	sub    $0xc,%esp
c0106772:	6a 01                	push   $0x1
c0106774:	e8 33 09 00 00       	call   c01070ac <alloc_pages>
c0106779:	83 c4 10             	add    $0x10,%esp
c010677c:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010677f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106782:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0106785:	74 19                	je     c01067a0 <basic_check+0x3de>
c0106787:	68 b0 d0 10 c0       	push   $0xc010d0b0
c010678c:	68 ee ce 10 c0       	push   $0xc010ceee
c0106791:	68 f4 00 00 00       	push   $0xf4
c0106796:	68 03 cf 10 c0       	push   $0xc010cf03
c010679b:	e8 5d 9c ff ff       	call   c01003fd <__panic>
    assert(alloc_page() == NULL);
c01067a0:	83 ec 0c             	sub    $0xc,%esp
c01067a3:	6a 01                	push   $0x1
c01067a5:	e8 02 09 00 00       	call   c01070ac <alloc_pages>
c01067aa:	83 c4 10             	add    $0x10,%esp
c01067ad:	85 c0                	test   %eax,%eax
c01067af:	74 19                	je     c01067ca <basic_check+0x408>
c01067b1:	68 76 d0 10 c0       	push   $0xc010d076
c01067b6:	68 ee ce 10 c0       	push   $0xc010ceee
c01067bb:	68 f5 00 00 00       	push   $0xf5
c01067c0:	68 03 cf 10 c0       	push   $0xc010cf03
c01067c5:	e8 33 9c ff ff       	call   c01003fd <__panic>

    assert(nr_free == 0);
c01067ca:	a1 ac 31 1b c0       	mov    0xc01b31ac,%eax
c01067cf:	85 c0                	test   %eax,%eax
c01067d1:	74 19                	je     c01067ec <basic_check+0x42a>
c01067d3:	68 c9 d0 10 c0       	push   $0xc010d0c9
c01067d8:	68 ee ce 10 c0       	push   $0xc010ceee
c01067dd:	68 f7 00 00 00       	push   $0xf7
c01067e2:	68 03 cf 10 c0       	push   $0xc010cf03
c01067e7:	e8 11 9c ff ff       	call   c01003fd <__panic>
    free_list = free_list_store;
c01067ec:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01067ef:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01067f2:	a3 a4 31 1b c0       	mov    %eax,0xc01b31a4
c01067f7:	89 15 a8 31 1b c0    	mov    %edx,0xc01b31a8
    nr_free = nr_free_store;
c01067fd:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106800:	a3 ac 31 1b c0       	mov    %eax,0xc01b31ac

    free_page(p);
c0106805:	83 ec 08             	sub    $0x8,%esp
c0106808:	6a 01                	push   $0x1
c010680a:	ff 75 dc             	pushl  -0x24(%ebp)
c010680d:	e8 06 09 00 00       	call   c0107118 <free_pages>
c0106812:	83 c4 10             	add    $0x10,%esp
    free_page(p1);
c0106815:	83 ec 08             	sub    $0x8,%esp
c0106818:	6a 01                	push   $0x1
c010681a:	ff 75 f0             	pushl  -0x10(%ebp)
c010681d:	e8 f6 08 00 00       	call   c0107118 <free_pages>
c0106822:	83 c4 10             	add    $0x10,%esp
    free_page(p2);
c0106825:	83 ec 08             	sub    $0x8,%esp
c0106828:	6a 01                	push   $0x1
c010682a:	ff 75 f4             	pushl  -0xc(%ebp)
c010682d:	e8 e6 08 00 00       	call   c0107118 <free_pages>
c0106832:	83 c4 10             	add    $0x10,%esp
}
c0106835:	90                   	nop
c0106836:	c9                   	leave  
c0106837:	c3                   	ret    

c0106838 <default_check>:

// LAB2: below code is used to check the first fit allocation algorithm (your EXERCISE 1) 
// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
static void
default_check(void) {
c0106838:	55                   	push   %ebp
c0106839:	89 e5                	mov    %esp,%ebp
c010683b:	81 ec 88 00 00 00    	sub    $0x88,%esp
    int count = 0, total = 0;
c0106841:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0106848:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    list_entry_t *le = &free_list;
c010684f:	c7 45 ec a4 31 1b c0 	movl   $0xc01b31a4,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c0106856:	eb 60                	jmp    c01068b8 <default_check+0x80>
        struct Page *p = le2page(le, page_link);
c0106858:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010685b:	83 e8 0c             	sub    $0xc,%eax
c010685e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        assert(PageProperty(p));
c0106861:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106864:	83 c0 04             	add    $0x4,%eax
c0106867:	c7 45 b0 01 00 00 00 	movl   $0x1,-0x50(%ebp)
c010686e:	89 45 ac             	mov    %eax,-0x54(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0106871:	8b 45 ac             	mov    -0x54(%ebp),%eax
c0106874:	8b 55 b0             	mov    -0x50(%ebp),%edx
c0106877:	0f a3 10             	bt     %edx,(%eax)
c010687a:	19 c0                	sbb    %eax,%eax
c010687c:	89 45 a8             	mov    %eax,-0x58(%ebp)
    return oldbit != 0;
c010687f:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
c0106883:	0f 95 c0             	setne  %al
c0106886:	0f b6 c0             	movzbl %al,%eax
c0106889:	85 c0                	test   %eax,%eax
c010688b:	75 19                	jne    c01068a6 <default_check+0x6e>
c010688d:	68 d6 d0 10 c0       	push   $0xc010d0d6
c0106892:	68 ee ce 10 c0       	push   $0xc010ceee
c0106897:	68 08 01 00 00       	push   $0x108
c010689c:	68 03 cf 10 c0       	push   $0xc010cf03
c01068a1:	e8 57 9b ff ff       	call   c01003fd <__panic>
        count ++, total += p->property;
c01068a6:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01068aa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01068ad:	8b 50 08             	mov    0x8(%eax),%edx
c01068b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01068b3:	01 d0                	add    %edx,%eax
c01068b5:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01068b8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01068bb:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01068be:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01068c1:	8b 40 04             	mov    0x4(%eax),%eax
// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
static void
default_check(void) {
    int count = 0, total = 0;
    list_entry_t *le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c01068c4:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01068c7:	81 7d ec a4 31 1b c0 	cmpl   $0xc01b31a4,-0x14(%ebp)
c01068ce:	75 88                	jne    c0106858 <default_check+0x20>
        struct Page *p = le2page(le, page_link);
        assert(PageProperty(p));
        count ++, total += p->property;
    }
    assert(total == nr_free_pages());
c01068d0:	e8 78 08 00 00       	call   c010714d <nr_free_pages>
c01068d5:	89 c2                	mov    %eax,%edx
c01068d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01068da:	39 c2                	cmp    %eax,%edx
c01068dc:	74 19                	je     c01068f7 <default_check+0xbf>
c01068de:	68 e6 d0 10 c0       	push   $0xc010d0e6
c01068e3:	68 ee ce 10 c0       	push   $0xc010ceee
c01068e8:	68 0b 01 00 00       	push   $0x10b
c01068ed:	68 03 cf 10 c0       	push   $0xc010cf03
c01068f2:	e8 06 9b ff ff       	call   c01003fd <__panic>

    basic_check();
c01068f7:	e8 c6 fa ff ff       	call   c01063c2 <basic_check>

    struct Page *p0 = alloc_pages(5), *p1, *p2;
c01068fc:	83 ec 0c             	sub    $0xc,%esp
c01068ff:	6a 05                	push   $0x5
c0106901:	e8 a6 07 00 00       	call   c01070ac <alloc_pages>
c0106906:	83 c4 10             	add    $0x10,%esp
c0106909:	89 45 dc             	mov    %eax,-0x24(%ebp)
    assert(p0 != NULL);
c010690c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0106910:	75 19                	jne    c010692b <default_check+0xf3>
c0106912:	68 ff d0 10 c0       	push   $0xc010d0ff
c0106917:	68 ee ce 10 c0       	push   $0xc010ceee
c010691c:	68 10 01 00 00       	push   $0x110
c0106921:	68 03 cf 10 c0       	push   $0xc010cf03
c0106926:	e8 d2 9a ff ff       	call   c01003fd <__panic>
    assert(!PageProperty(p0));
c010692b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010692e:	83 c0 04             	add    $0x4,%eax
c0106931:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
c0106938:	89 45 a4             	mov    %eax,-0x5c(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010693b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c010693e:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0106941:	0f a3 10             	bt     %edx,(%eax)
c0106944:	19 c0                	sbb    %eax,%eax
c0106946:	89 45 a0             	mov    %eax,-0x60(%ebp)
    return oldbit != 0;
c0106949:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
c010694d:	0f 95 c0             	setne  %al
c0106950:	0f b6 c0             	movzbl %al,%eax
c0106953:	85 c0                	test   %eax,%eax
c0106955:	74 19                	je     c0106970 <default_check+0x138>
c0106957:	68 0a d1 10 c0       	push   $0xc010d10a
c010695c:	68 ee ce 10 c0       	push   $0xc010ceee
c0106961:	68 11 01 00 00       	push   $0x111
c0106966:	68 03 cf 10 c0       	push   $0xc010cf03
c010696b:	e8 8d 9a ff ff       	call   c01003fd <__panic>

    list_entry_t free_list_store = free_list;
c0106970:	a1 a4 31 1b c0       	mov    0xc01b31a4,%eax
c0106975:	8b 15 a8 31 1b c0    	mov    0xc01b31a8,%edx
c010697b:	89 45 80             	mov    %eax,-0x80(%ebp)
c010697e:	89 55 84             	mov    %edx,-0x7c(%ebp)
c0106981:	c7 45 d0 a4 31 1b c0 	movl   $0xc01b31a4,-0x30(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0106988:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010698b:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010698e:	89 50 04             	mov    %edx,0x4(%eax)
c0106991:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0106994:	8b 50 04             	mov    0x4(%eax),%edx
c0106997:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010699a:	89 10                	mov    %edx,(%eax)
c010699c:	c7 45 d8 a4 31 1b c0 	movl   $0xc01b31a4,-0x28(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c01069a3:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01069a6:	8b 40 04             	mov    0x4(%eax),%eax
c01069a9:	39 45 d8             	cmp    %eax,-0x28(%ebp)
c01069ac:	0f 94 c0             	sete   %al
c01069af:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c01069b2:	85 c0                	test   %eax,%eax
c01069b4:	75 19                	jne    c01069cf <default_check+0x197>
c01069b6:	68 5f d0 10 c0       	push   $0xc010d05f
c01069bb:	68 ee ce 10 c0       	push   $0xc010ceee
c01069c0:	68 15 01 00 00       	push   $0x115
c01069c5:	68 03 cf 10 c0       	push   $0xc010cf03
c01069ca:	e8 2e 9a ff ff       	call   c01003fd <__panic>
    assert(alloc_page() == NULL);
c01069cf:	83 ec 0c             	sub    $0xc,%esp
c01069d2:	6a 01                	push   $0x1
c01069d4:	e8 d3 06 00 00       	call   c01070ac <alloc_pages>
c01069d9:	83 c4 10             	add    $0x10,%esp
c01069dc:	85 c0                	test   %eax,%eax
c01069de:	74 19                	je     c01069f9 <default_check+0x1c1>
c01069e0:	68 76 d0 10 c0       	push   $0xc010d076
c01069e5:	68 ee ce 10 c0       	push   $0xc010ceee
c01069ea:	68 16 01 00 00       	push   $0x116
c01069ef:	68 03 cf 10 c0       	push   $0xc010cf03
c01069f4:	e8 04 9a ff ff       	call   c01003fd <__panic>

    unsigned int nr_free_store = nr_free;
c01069f9:	a1 ac 31 1b c0       	mov    0xc01b31ac,%eax
c01069fe:	89 45 cc             	mov    %eax,-0x34(%ebp)
    nr_free = 0;
c0106a01:	c7 05 ac 31 1b c0 00 	movl   $0x0,0xc01b31ac
c0106a08:	00 00 00 

    free_pages(p0 + 2, 3);
c0106a0b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106a0e:	83 c0 40             	add    $0x40,%eax
c0106a11:	83 ec 08             	sub    $0x8,%esp
c0106a14:	6a 03                	push   $0x3
c0106a16:	50                   	push   %eax
c0106a17:	e8 fc 06 00 00       	call   c0107118 <free_pages>
c0106a1c:	83 c4 10             	add    $0x10,%esp
    assert(alloc_pages(4) == NULL);
c0106a1f:	83 ec 0c             	sub    $0xc,%esp
c0106a22:	6a 04                	push   $0x4
c0106a24:	e8 83 06 00 00       	call   c01070ac <alloc_pages>
c0106a29:	83 c4 10             	add    $0x10,%esp
c0106a2c:	85 c0                	test   %eax,%eax
c0106a2e:	74 19                	je     c0106a49 <default_check+0x211>
c0106a30:	68 1c d1 10 c0       	push   $0xc010d11c
c0106a35:	68 ee ce 10 c0       	push   $0xc010ceee
c0106a3a:	68 1c 01 00 00       	push   $0x11c
c0106a3f:	68 03 cf 10 c0       	push   $0xc010cf03
c0106a44:	e8 b4 99 ff ff       	call   c01003fd <__panic>
    assert(PageProperty(p0 + 2) && p0[2].property == 3);
c0106a49:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106a4c:	83 c0 40             	add    $0x40,%eax
c0106a4f:	83 c0 04             	add    $0x4,%eax
c0106a52:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
c0106a59:	89 45 9c             	mov    %eax,-0x64(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0106a5c:	8b 45 9c             	mov    -0x64(%ebp),%eax
c0106a5f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0106a62:	0f a3 10             	bt     %edx,(%eax)
c0106a65:	19 c0                	sbb    %eax,%eax
c0106a67:	89 45 98             	mov    %eax,-0x68(%ebp)
    return oldbit != 0;
c0106a6a:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
c0106a6e:	0f 95 c0             	setne  %al
c0106a71:	0f b6 c0             	movzbl %al,%eax
c0106a74:	85 c0                	test   %eax,%eax
c0106a76:	74 0e                	je     c0106a86 <default_check+0x24e>
c0106a78:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106a7b:	83 c0 40             	add    $0x40,%eax
c0106a7e:	8b 40 08             	mov    0x8(%eax),%eax
c0106a81:	83 f8 03             	cmp    $0x3,%eax
c0106a84:	74 19                	je     c0106a9f <default_check+0x267>
c0106a86:	68 34 d1 10 c0       	push   $0xc010d134
c0106a8b:	68 ee ce 10 c0       	push   $0xc010ceee
c0106a90:	68 1d 01 00 00       	push   $0x11d
c0106a95:	68 03 cf 10 c0       	push   $0xc010cf03
c0106a9a:	e8 5e 99 ff ff       	call   c01003fd <__panic>
    assert((p1 = alloc_pages(3)) != NULL);
c0106a9f:	83 ec 0c             	sub    $0xc,%esp
c0106aa2:	6a 03                	push   $0x3
c0106aa4:	e8 03 06 00 00       	call   c01070ac <alloc_pages>
c0106aa9:	83 c4 10             	add    $0x10,%esp
c0106aac:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c0106aaf:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
c0106ab3:	75 19                	jne    c0106ace <default_check+0x296>
c0106ab5:	68 60 d1 10 c0       	push   $0xc010d160
c0106aba:	68 ee ce 10 c0       	push   $0xc010ceee
c0106abf:	68 1e 01 00 00       	push   $0x11e
c0106ac4:	68 03 cf 10 c0       	push   $0xc010cf03
c0106ac9:	e8 2f 99 ff ff       	call   c01003fd <__panic>
    assert(alloc_page() == NULL);
c0106ace:	83 ec 0c             	sub    $0xc,%esp
c0106ad1:	6a 01                	push   $0x1
c0106ad3:	e8 d4 05 00 00       	call   c01070ac <alloc_pages>
c0106ad8:	83 c4 10             	add    $0x10,%esp
c0106adb:	85 c0                	test   %eax,%eax
c0106add:	74 19                	je     c0106af8 <default_check+0x2c0>
c0106adf:	68 76 d0 10 c0       	push   $0xc010d076
c0106ae4:	68 ee ce 10 c0       	push   $0xc010ceee
c0106ae9:	68 1f 01 00 00       	push   $0x11f
c0106aee:	68 03 cf 10 c0       	push   $0xc010cf03
c0106af3:	e8 05 99 ff ff       	call   c01003fd <__panic>
    assert(p0 + 2 == p1);
c0106af8:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106afb:	83 c0 40             	add    $0x40,%eax
c0106afe:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
c0106b01:	74 19                	je     c0106b1c <default_check+0x2e4>
c0106b03:	68 7e d1 10 c0       	push   $0xc010d17e
c0106b08:	68 ee ce 10 c0       	push   $0xc010ceee
c0106b0d:	68 20 01 00 00       	push   $0x120
c0106b12:	68 03 cf 10 c0       	push   $0xc010cf03
c0106b17:	e8 e1 98 ff ff       	call   c01003fd <__panic>

    p2 = p0 + 1;
c0106b1c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106b1f:	83 c0 20             	add    $0x20,%eax
c0106b22:	89 45 c0             	mov    %eax,-0x40(%ebp)
    free_page(p0);
c0106b25:	83 ec 08             	sub    $0x8,%esp
c0106b28:	6a 01                	push   $0x1
c0106b2a:	ff 75 dc             	pushl  -0x24(%ebp)
c0106b2d:	e8 e6 05 00 00       	call   c0107118 <free_pages>
c0106b32:	83 c4 10             	add    $0x10,%esp
    free_pages(p1, 3);
c0106b35:	83 ec 08             	sub    $0x8,%esp
c0106b38:	6a 03                	push   $0x3
c0106b3a:	ff 75 c4             	pushl  -0x3c(%ebp)
c0106b3d:	e8 d6 05 00 00       	call   c0107118 <free_pages>
c0106b42:	83 c4 10             	add    $0x10,%esp
    assert(PageProperty(p0) && p0->property == 1);
c0106b45:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106b48:	83 c0 04             	add    $0x4,%eax
c0106b4b:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
c0106b52:	89 45 94             	mov    %eax,-0x6c(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0106b55:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0106b58:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0106b5b:	0f a3 10             	bt     %edx,(%eax)
c0106b5e:	19 c0                	sbb    %eax,%eax
c0106b60:	89 45 90             	mov    %eax,-0x70(%ebp)
    return oldbit != 0;
c0106b63:	83 7d 90 00          	cmpl   $0x0,-0x70(%ebp)
c0106b67:	0f 95 c0             	setne  %al
c0106b6a:	0f b6 c0             	movzbl %al,%eax
c0106b6d:	85 c0                	test   %eax,%eax
c0106b6f:	74 0b                	je     c0106b7c <default_check+0x344>
c0106b71:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106b74:	8b 40 08             	mov    0x8(%eax),%eax
c0106b77:	83 f8 01             	cmp    $0x1,%eax
c0106b7a:	74 19                	je     c0106b95 <default_check+0x35d>
c0106b7c:	68 8c d1 10 c0       	push   $0xc010d18c
c0106b81:	68 ee ce 10 c0       	push   $0xc010ceee
c0106b86:	68 25 01 00 00       	push   $0x125
c0106b8b:	68 03 cf 10 c0       	push   $0xc010cf03
c0106b90:	e8 68 98 ff ff       	call   c01003fd <__panic>
    assert(PageProperty(p1) && p1->property == 3);
c0106b95:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0106b98:	83 c0 04             	add    $0x4,%eax
c0106b9b:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
c0106ba2:	89 45 8c             	mov    %eax,-0x74(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0106ba5:	8b 45 8c             	mov    -0x74(%ebp),%eax
c0106ba8:	8b 55 bc             	mov    -0x44(%ebp),%edx
c0106bab:	0f a3 10             	bt     %edx,(%eax)
c0106bae:	19 c0                	sbb    %eax,%eax
c0106bb0:	89 45 88             	mov    %eax,-0x78(%ebp)
    return oldbit != 0;
c0106bb3:	83 7d 88 00          	cmpl   $0x0,-0x78(%ebp)
c0106bb7:	0f 95 c0             	setne  %al
c0106bba:	0f b6 c0             	movzbl %al,%eax
c0106bbd:	85 c0                	test   %eax,%eax
c0106bbf:	74 0b                	je     c0106bcc <default_check+0x394>
c0106bc1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0106bc4:	8b 40 08             	mov    0x8(%eax),%eax
c0106bc7:	83 f8 03             	cmp    $0x3,%eax
c0106bca:	74 19                	je     c0106be5 <default_check+0x3ad>
c0106bcc:	68 b4 d1 10 c0       	push   $0xc010d1b4
c0106bd1:	68 ee ce 10 c0       	push   $0xc010ceee
c0106bd6:	68 26 01 00 00       	push   $0x126
c0106bdb:	68 03 cf 10 c0       	push   $0xc010cf03
c0106be0:	e8 18 98 ff ff       	call   c01003fd <__panic>

    assert((p0 = alloc_page()) == p2 - 1);
c0106be5:	83 ec 0c             	sub    $0xc,%esp
c0106be8:	6a 01                	push   $0x1
c0106bea:	e8 bd 04 00 00       	call   c01070ac <alloc_pages>
c0106bef:	83 c4 10             	add    $0x10,%esp
c0106bf2:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0106bf5:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0106bf8:	83 e8 20             	sub    $0x20,%eax
c0106bfb:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c0106bfe:	74 19                	je     c0106c19 <default_check+0x3e1>
c0106c00:	68 da d1 10 c0       	push   $0xc010d1da
c0106c05:	68 ee ce 10 c0       	push   $0xc010ceee
c0106c0a:	68 28 01 00 00       	push   $0x128
c0106c0f:	68 03 cf 10 c0       	push   $0xc010cf03
c0106c14:	e8 e4 97 ff ff       	call   c01003fd <__panic>
    free_page(p0);
c0106c19:	83 ec 08             	sub    $0x8,%esp
c0106c1c:	6a 01                	push   $0x1
c0106c1e:	ff 75 dc             	pushl  -0x24(%ebp)
c0106c21:	e8 f2 04 00 00       	call   c0107118 <free_pages>
c0106c26:	83 c4 10             	add    $0x10,%esp
    assert((p0 = alloc_pages(2)) == p2 + 1);
c0106c29:	83 ec 0c             	sub    $0xc,%esp
c0106c2c:	6a 02                	push   $0x2
c0106c2e:	e8 79 04 00 00       	call   c01070ac <alloc_pages>
c0106c33:	83 c4 10             	add    $0x10,%esp
c0106c36:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0106c39:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0106c3c:	83 c0 20             	add    $0x20,%eax
c0106c3f:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c0106c42:	74 19                	je     c0106c5d <default_check+0x425>
c0106c44:	68 f8 d1 10 c0       	push   $0xc010d1f8
c0106c49:	68 ee ce 10 c0       	push   $0xc010ceee
c0106c4e:	68 2a 01 00 00       	push   $0x12a
c0106c53:	68 03 cf 10 c0       	push   $0xc010cf03
c0106c58:	e8 a0 97 ff ff       	call   c01003fd <__panic>

    free_pages(p0, 2);
c0106c5d:	83 ec 08             	sub    $0x8,%esp
c0106c60:	6a 02                	push   $0x2
c0106c62:	ff 75 dc             	pushl  -0x24(%ebp)
c0106c65:	e8 ae 04 00 00       	call   c0107118 <free_pages>
c0106c6a:	83 c4 10             	add    $0x10,%esp
    free_page(p2);
c0106c6d:	83 ec 08             	sub    $0x8,%esp
c0106c70:	6a 01                	push   $0x1
c0106c72:	ff 75 c0             	pushl  -0x40(%ebp)
c0106c75:	e8 9e 04 00 00       	call   c0107118 <free_pages>
c0106c7a:	83 c4 10             	add    $0x10,%esp

    assert((p0 = alloc_pages(5)) != NULL);
c0106c7d:	83 ec 0c             	sub    $0xc,%esp
c0106c80:	6a 05                	push   $0x5
c0106c82:	e8 25 04 00 00       	call   c01070ac <alloc_pages>
c0106c87:	83 c4 10             	add    $0x10,%esp
c0106c8a:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0106c8d:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0106c91:	75 19                	jne    c0106cac <default_check+0x474>
c0106c93:	68 18 d2 10 c0       	push   $0xc010d218
c0106c98:	68 ee ce 10 c0       	push   $0xc010ceee
c0106c9d:	68 2f 01 00 00       	push   $0x12f
c0106ca2:	68 03 cf 10 c0       	push   $0xc010cf03
c0106ca7:	e8 51 97 ff ff       	call   c01003fd <__panic>
    assert(alloc_page() == NULL);
c0106cac:	83 ec 0c             	sub    $0xc,%esp
c0106caf:	6a 01                	push   $0x1
c0106cb1:	e8 f6 03 00 00       	call   c01070ac <alloc_pages>
c0106cb6:	83 c4 10             	add    $0x10,%esp
c0106cb9:	85 c0                	test   %eax,%eax
c0106cbb:	74 19                	je     c0106cd6 <default_check+0x49e>
c0106cbd:	68 76 d0 10 c0       	push   $0xc010d076
c0106cc2:	68 ee ce 10 c0       	push   $0xc010ceee
c0106cc7:	68 30 01 00 00       	push   $0x130
c0106ccc:	68 03 cf 10 c0       	push   $0xc010cf03
c0106cd1:	e8 27 97 ff ff       	call   c01003fd <__panic>

    assert(nr_free == 0);
c0106cd6:	a1 ac 31 1b c0       	mov    0xc01b31ac,%eax
c0106cdb:	85 c0                	test   %eax,%eax
c0106cdd:	74 19                	je     c0106cf8 <default_check+0x4c0>
c0106cdf:	68 c9 d0 10 c0       	push   $0xc010d0c9
c0106ce4:	68 ee ce 10 c0       	push   $0xc010ceee
c0106ce9:	68 32 01 00 00       	push   $0x132
c0106cee:	68 03 cf 10 c0       	push   $0xc010cf03
c0106cf3:	e8 05 97 ff ff       	call   c01003fd <__panic>
    nr_free = nr_free_store;
c0106cf8:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0106cfb:	a3 ac 31 1b c0       	mov    %eax,0xc01b31ac

    free_list = free_list_store;
c0106d00:	8b 45 80             	mov    -0x80(%ebp),%eax
c0106d03:	8b 55 84             	mov    -0x7c(%ebp),%edx
c0106d06:	a3 a4 31 1b c0       	mov    %eax,0xc01b31a4
c0106d0b:	89 15 a8 31 1b c0    	mov    %edx,0xc01b31a8
    free_pages(p0, 5);
c0106d11:	83 ec 08             	sub    $0x8,%esp
c0106d14:	6a 05                	push   $0x5
c0106d16:	ff 75 dc             	pushl  -0x24(%ebp)
c0106d19:	e8 fa 03 00 00       	call   c0107118 <free_pages>
c0106d1e:	83 c4 10             	add    $0x10,%esp

    le = &free_list;
c0106d21:	c7 45 ec a4 31 1b c0 	movl   $0xc01b31a4,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c0106d28:	eb 1d                	jmp    c0106d47 <default_check+0x50f>
        struct Page *p = le2page(le, page_link);
c0106d2a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106d2d:	83 e8 0c             	sub    $0xc,%eax
c0106d30:	89 45 b4             	mov    %eax,-0x4c(%ebp)
        count --, total -= p->property;
c0106d33:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0106d37:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0106d3a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0106d3d:	8b 40 08             	mov    0x8(%eax),%eax
c0106d40:	29 c2                	sub    %eax,%edx
c0106d42:	89 d0                	mov    %edx,%eax
c0106d44:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106d47:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106d4a:	89 45 b8             	mov    %eax,-0x48(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0106d4d:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0106d50:	8b 40 04             	mov    0x4(%eax),%eax

    free_list = free_list_store;
    free_pages(p0, 5);

    le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c0106d53:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0106d56:	81 7d ec a4 31 1b c0 	cmpl   $0xc01b31a4,-0x14(%ebp)
c0106d5d:	75 cb                	jne    c0106d2a <default_check+0x4f2>
        struct Page *p = le2page(le, page_link);
        count --, total -= p->property;
    }
    assert(count == 0);
c0106d5f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106d63:	74 19                	je     c0106d7e <default_check+0x546>
c0106d65:	68 36 d2 10 c0       	push   $0xc010d236
c0106d6a:	68 ee ce 10 c0       	push   $0xc010ceee
c0106d6f:	68 3d 01 00 00       	push   $0x13d
c0106d74:	68 03 cf 10 c0       	push   $0xc010cf03
c0106d79:	e8 7f 96 ff ff       	call   c01003fd <__panic>
    assert(total == 0);
c0106d7e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106d82:	74 19                	je     c0106d9d <default_check+0x565>
c0106d84:	68 41 d2 10 c0       	push   $0xc010d241
c0106d89:	68 ee ce 10 c0       	push   $0xc010ceee
c0106d8e:	68 3e 01 00 00       	push   $0x13e
c0106d93:	68 03 cf 10 c0       	push   $0xc010cf03
c0106d98:	e8 60 96 ff ff       	call   c01003fd <__panic>
}
c0106d9d:	90                   	nop
c0106d9e:	c9                   	leave  
c0106d9f:	c3                   	ret    

c0106da0 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0106da0:	55                   	push   %ebp
c0106da1:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0106da3:	8b 45 08             	mov    0x8(%ebp),%eax
c0106da6:	8b 15 b8 31 1b c0    	mov    0xc01b31b8,%edx
c0106dac:	29 d0                	sub    %edx,%eax
c0106dae:	c1 f8 05             	sar    $0x5,%eax
}
c0106db1:	5d                   	pop    %ebp
c0106db2:	c3                   	ret    

c0106db3 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0106db3:	55                   	push   %ebp
c0106db4:	89 e5                	mov    %esp,%ebp
    return page2ppn(page) << PGSHIFT;
c0106db6:	ff 75 08             	pushl  0x8(%ebp)
c0106db9:	e8 e2 ff ff ff       	call   c0106da0 <page2ppn>
c0106dbe:	83 c4 04             	add    $0x4,%esp
c0106dc1:	c1 e0 0c             	shl    $0xc,%eax
}
c0106dc4:	c9                   	leave  
c0106dc5:	c3                   	ret    

c0106dc6 <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c0106dc6:	55                   	push   %ebp
c0106dc7:	89 e5                	mov    %esp,%ebp
c0106dc9:	83 ec 08             	sub    $0x8,%esp
    if (PPN(pa) >= npage) {
c0106dcc:	8b 45 08             	mov    0x8(%ebp),%eax
c0106dcf:	c1 e8 0c             	shr    $0xc,%eax
c0106dd2:	89 c2                	mov    %eax,%edx
c0106dd4:	a1 80 0f 1b c0       	mov    0xc01b0f80,%eax
c0106dd9:	39 c2                	cmp    %eax,%edx
c0106ddb:	72 14                	jb     c0106df1 <pa2page+0x2b>
        panic("pa2page called with invalid pa");
c0106ddd:	83 ec 04             	sub    $0x4,%esp
c0106de0:	68 7c d2 10 c0       	push   $0xc010d27c
c0106de5:	6a 5e                	push   $0x5e
c0106de7:	68 9b d2 10 c0       	push   $0xc010d29b
c0106dec:	e8 0c 96 ff ff       	call   c01003fd <__panic>
    }
    return &pages[PPN(pa)];
c0106df1:	a1 b8 31 1b c0       	mov    0xc01b31b8,%eax
c0106df6:	8b 55 08             	mov    0x8(%ebp),%edx
c0106df9:	c1 ea 0c             	shr    $0xc,%edx
c0106dfc:	c1 e2 05             	shl    $0x5,%edx
c0106dff:	01 d0                	add    %edx,%eax
}
c0106e01:	c9                   	leave  
c0106e02:	c3                   	ret    

c0106e03 <page2kva>:

static inline void *
page2kva(struct Page *page) {
c0106e03:	55                   	push   %ebp
c0106e04:	89 e5                	mov    %esp,%ebp
c0106e06:	83 ec 18             	sub    $0x18,%esp
    return KADDR(page2pa(page));
c0106e09:	ff 75 08             	pushl  0x8(%ebp)
c0106e0c:	e8 a2 ff ff ff       	call   c0106db3 <page2pa>
c0106e11:	83 c4 04             	add    $0x4,%esp
c0106e14:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0106e17:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106e1a:	c1 e8 0c             	shr    $0xc,%eax
c0106e1d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106e20:	a1 80 0f 1b c0       	mov    0xc01b0f80,%eax
c0106e25:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0106e28:	72 14                	jb     c0106e3e <page2kva+0x3b>
c0106e2a:	ff 75 f4             	pushl  -0xc(%ebp)
c0106e2d:	68 ac d2 10 c0       	push   $0xc010d2ac
c0106e32:	6a 65                	push   $0x65
c0106e34:	68 9b d2 10 c0       	push   $0xc010d29b
c0106e39:	e8 bf 95 ff ff       	call   c01003fd <__panic>
c0106e3e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106e41:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c0106e46:	c9                   	leave  
c0106e47:	c3                   	ret    

c0106e48 <pte2page>:
kva2page(void *kva) {
    return pa2page(PADDR(kva));
}

static inline struct Page *
pte2page(pte_t pte) {
c0106e48:	55                   	push   %ebp
c0106e49:	89 e5                	mov    %esp,%ebp
c0106e4b:	83 ec 08             	sub    $0x8,%esp
    if (!(pte & PTE_P)) {
c0106e4e:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e51:	83 e0 01             	and    $0x1,%eax
c0106e54:	85 c0                	test   %eax,%eax
c0106e56:	75 14                	jne    c0106e6c <pte2page+0x24>
        panic("pte2page called with invalid pte");
c0106e58:	83 ec 04             	sub    $0x4,%esp
c0106e5b:	68 d0 d2 10 c0       	push   $0xc010d2d0
c0106e60:	6a 70                	push   $0x70
c0106e62:	68 9b d2 10 c0       	push   $0xc010d29b
c0106e67:	e8 91 95 ff ff       	call   c01003fd <__panic>
    }
    return pa2page(PTE_ADDR(pte));
c0106e6c:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e6f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106e74:	83 ec 0c             	sub    $0xc,%esp
c0106e77:	50                   	push   %eax
c0106e78:	e8 49 ff ff ff       	call   c0106dc6 <pa2page>
c0106e7d:	83 c4 10             	add    $0x10,%esp
}
c0106e80:	c9                   	leave  
c0106e81:	c3                   	ret    

c0106e82 <pde2page>:

static inline struct Page *
pde2page(pde_t pde) {
c0106e82:	55                   	push   %ebp
c0106e83:	89 e5                	mov    %esp,%ebp
c0106e85:	83 ec 08             	sub    $0x8,%esp
    return pa2page(PDE_ADDR(pde));
c0106e88:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e8b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106e90:	83 ec 0c             	sub    $0xc,%esp
c0106e93:	50                   	push   %eax
c0106e94:	e8 2d ff ff ff       	call   c0106dc6 <pa2page>
c0106e99:	83 c4 10             	add    $0x10,%esp
}
c0106e9c:	c9                   	leave  
c0106e9d:	c3                   	ret    

c0106e9e <page_ref>:

static inline int
page_ref(struct Page *page) {
c0106e9e:	55                   	push   %ebp
c0106e9f:	89 e5                	mov    %esp,%ebp
    return page->ref;
c0106ea1:	8b 45 08             	mov    0x8(%ebp),%eax
c0106ea4:	8b 00                	mov    (%eax),%eax
}
c0106ea6:	5d                   	pop    %ebp
c0106ea7:	c3                   	ret    

c0106ea8 <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c0106ea8:	55                   	push   %ebp
c0106ea9:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c0106eab:	8b 45 08             	mov    0x8(%ebp),%eax
c0106eae:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106eb1:	89 10                	mov    %edx,(%eax)
}
c0106eb3:	90                   	nop
c0106eb4:	5d                   	pop    %ebp
c0106eb5:	c3                   	ret    

c0106eb6 <page_ref_inc>:

static inline int
page_ref_inc(struct Page *page) {
c0106eb6:	55                   	push   %ebp
c0106eb7:	89 e5                	mov    %esp,%ebp
    page->ref += 1;
c0106eb9:	8b 45 08             	mov    0x8(%ebp),%eax
c0106ebc:	8b 00                	mov    (%eax),%eax
c0106ebe:	8d 50 01             	lea    0x1(%eax),%edx
c0106ec1:	8b 45 08             	mov    0x8(%ebp),%eax
c0106ec4:	89 10                	mov    %edx,(%eax)
    return page->ref;
c0106ec6:	8b 45 08             	mov    0x8(%ebp),%eax
c0106ec9:	8b 00                	mov    (%eax),%eax
}
c0106ecb:	5d                   	pop    %ebp
c0106ecc:	c3                   	ret    

c0106ecd <page_ref_dec>:

static inline int
page_ref_dec(struct Page *page) {
c0106ecd:	55                   	push   %ebp
c0106ece:	89 e5                	mov    %esp,%ebp
    page->ref -= 1;
c0106ed0:	8b 45 08             	mov    0x8(%ebp),%eax
c0106ed3:	8b 00                	mov    (%eax),%eax
c0106ed5:	8d 50 ff             	lea    -0x1(%eax),%edx
c0106ed8:	8b 45 08             	mov    0x8(%ebp),%eax
c0106edb:	89 10                	mov    %edx,(%eax)
    return page->ref;
c0106edd:	8b 45 08             	mov    0x8(%ebp),%eax
c0106ee0:	8b 00                	mov    (%eax),%eax
}
c0106ee2:	5d                   	pop    %ebp
c0106ee3:	c3                   	ret    

c0106ee4 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0106ee4:	55                   	push   %ebp
c0106ee5:	89 e5                	mov    %esp,%ebp
c0106ee7:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0106eea:	9c                   	pushf  
c0106eeb:	58                   	pop    %eax
c0106eec:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0106eef:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0106ef2:	25 00 02 00 00       	and    $0x200,%eax
c0106ef7:	85 c0                	test   %eax,%eax
c0106ef9:	74 0c                	je     c0106f07 <__intr_save+0x23>
        intr_disable();
c0106efb:	e8 bc b2 ff ff       	call   c01021bc <intr_disable>
        return 1;
c0106f00:	b8 01 00 00 00       	mov    $0x1,%eax
c0106f05:	eb 05                	jmp    c0106f0c <__intr_save+0x28>
    }
    return 0;
c0106f07:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0106f0c:	c9                   	leave  
c0106f0d:	c3                   	ret    

c0106f0e <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0106f0e:	55                   	push   %ebp
c0106f0f:	89 e5                	mov    %esp,%ebp
c0106f11:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0106f14:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0106f18:	74 05                	je     c0106f1f <__intr_restore+0x11>
        intr_enable();
c0106f1a:	e8 96 b2 ff ff       	call   c01021b5 <intr_enable>
    }
}
c0106f1f:	90                   	nop
c0106f20:	c9                   	leave  
c0106f21:	c3                   	ret    

c0106f22 <lgdt>:
/* *
 * lgdt - load the global descriptor table register and reset the
 * data/code segement registers for kernel.
 * */
static inline void
lgdt(struct pseudodesc *pd) {
c0106f22:	55                   	push   %ebp
c0106f23:	89 e5                	mov    %esp,%ebp
    asm volatile ("lgdt (%0)" :: "r" (pd));
c0106f25:	8b 45 08             	mov    0x8(%ebp),%eax
c0106f28:	0f 01 10             	lgdtl  (%eax)
    asm volatile ("movw %%ax, %%gs" :: "a" (USER_DS));
c0106f2b:	b8 23 00 00 00       	mov    $0x23,%eax
c0106f30:	8e e8                	mov    %eax,%gs
    asm volatile ("movw %%ax, %%fs" :: "a" (USER_DS));
c0106f32:	b8 23 00 00 00       	mov    $0x23,%eax
c0106f37:	8e e0                	mov    %eax,%fs
    asm volatile ("movw %%ax, %%es" :: "a" (KERNEL_DS));
c0106f39:	b8 10 00 00 00       	mov    $0x10,%eax
c0106f3e:	8e c0                	mov    %eax,%es
    asm volatile ("movw %%ax, %%ds" :: "a" (KERNEL_DS));
c0106f40:	b8 10 00 00 00       	mov    $0x10,%eax
c0106f45:	8e d8                	mov    %eax,%ds
    asm volatile ("movw %%ax, %%ss" :: "a" (KERNEL_DS));
c0106f47:	b8 10 00 00 00       	mov    $0x10,%eax
c0106f4c:	8e d0                	mov    %eax,%ss
    // reload cs
    asm volatile ("ljmp %0, $1f\n 1:\n" :: "i" (KERNEL_CS));
c0106f4e:	ea 55 6f 10 c0 08 00 	ljmp   $0x8,$0xc0106f55
}
c0106f55:	90                   	nop
c0106f56:	5d                   	pop    %ebp
c0106f57:	c3                   	ret    

c0106f58 <load_esp0>:
 * load_esp0 - change the ESP0 in default task state segment,
 * so that we can use different kernel stack when we trap frame
 * user to kernel.
 * */
void
load_esp0(uintptr_t esp0) {
c0106f58:	55                   	push   %ebp
c0106f59:	89 e5                	mov    %esp,%ebp
    ts.ts_esp0 = esp0;
c0106f5b:	8b 45 08             	mov    0x8(%ebp),%eax
c0106f5e:	a3 a4 0f 1b c0       	mov    %eax,0xc01b0fa4
}
c0106f63:	90                   	nop
c0106f64:	5d                   	pop    %ebp
c0106f65:	c3                   	ret    

c0106f66 <gdt_init>:

/* gdt_init - initialize the default GDT and TSS */
static void
gdt_init(void) {
c0106f66:	55                   	push   %ebp
c0106f67:	89 e5                	mov    %esp,%ebp
c0106f69:	83 ec 10             	sub    $0x10,%esp
    // set boot kernel stack and default SS0
    load_esp0((uintptr_t)bootstacktop);
c0106f6c:	b8 00 c0 12 c0       	mov    $0xc012c000,%eax
c0106f71:	50                   	push   %eax
c0106f72:	e8 e1 ff ff ff       	call   c0106f58 <load_esp0>
c0106f77:	83 c4 04             	add    $0x4,%esp
    ts.ts_ss0 = KERNEL_DS;
c0106f7a:	66 c7 05 a8 0f 1b c0 	movw   $0x10,0xc01b0fa8
c0106f81:	10 00 

    // initialize the TSS filed of the gdt
    gdt[SEG_TSS] = SEGTSS(STS_T32A, (uintptr_t)&ts, sizeof(ts), DPL_KERNEL);
c0106f83:	66 c7 05 68 ca 12 c0 	movw   $0x68,0xc012ca68
c0106f8a:	68 00 
c0106f8c:	b8 a0 0f 1b c0       	mov    $0xc01b0fa0,%eax
c0106f91:	66 a3 6a ca 12 c0    	mov    %ax,0xc012ca6a
c0106f97:	b8 a0 0f 1b c0       	mov    $0xc01b0fa0,%eax
c0106f9c:	c1 e8 10             	shr    $0x10,%eax
c0106f9f:	a2 6c ca 12 c0       	mov    %al,0xc012ca6c
c0106fa4:	0f b6 05 6d ca 12 c0 	movzbl 0xc012ca6d,%eax
c0106fab:	83 e0 f0             	and    $0xfffffff0,%eax
c0106fae:	83 c8 09             	or     $0x9,%eax
c0106fb1:	a2 6d ca 12 c0       	mov    %al,0xc012ca6d
c0106fb6:	0f b6 05 6d ca 12 c0 	movzbl 0xc012ca6d,%eax
c0106fbd:	83 e0 ef             	and    $0xffffffef,%eax
c0106fc0:	a2 6d ca 12 c0       	mov    %al,0xc012ca6d
c0106fc5:	0f b6 05 6d ca 12 c0 	movzbl 0xc012ca6d,%eax
c0106fcc:	83 e0 9f             	and    $0xffffff9f,%eax
c0106fcf:	a2 6d ca 12 c0       	mov    %al,0xc012ca6d
c0106fd4:	0f b6 05 6d ca 12 c0 	movzbl 0xc012ca6d,%eax
c0106fdb:	83 c8 80             	or     $0xffffff80,%eax
c0106fde:	a2 6d ca 12 c0       	mov    %al,0xc012ca6d
c0106fe3:	0f b6 05 6e ca 12 c0 	movzbl 0xc012ca6e,%eax
c0106fea:	83 e0 f0             	and    $0xfffffff0,%eax
c0106fed:	a2 6e ca 12 c0       	mov    %al,0xc012ca6e
c0106ff2:	0f b6 05 6e ca 12 c0 	movzbl 0xc012ca6e,%eax
c0106ff9:	83 e0 ef             	and    $0xffffffef,%eax
c0106ffc:	a2 6e ca 12 c0       	mov    %al,0xc012ca6e
c0107001:	0f b6 05 6e ca 12 c0 	movzbl 0xc012ca6e,%eax
c0107008:	83 e0 df             	and    $0xffffffdf,%eax
c010700b:	a2 6e ca 12 c0       	mov    %al,0xc012ca6e
c0107010:	0f b6 05 6e ca 12 c0 	movzbl 0xc012ca6e,%eax
c0107017:	83 c8 40             	or     $0x40,%eax
c010701a:	a2 6e ca 12 c0       	mov    %al,0xc012ca6e
c010701f:	0f b6 05 6e ca 12 c0 	movzbl 0xc012ca6e,%eax
c0107026:	83 e0 7f             	and    $0x7f,%eax
c0107029:	a2 6e ca 12 c0       	mov    %al,0xc012ca6e
c010702e:	b8 a0 0f 1b c0       	mov    $0xc01b0fa0,%eax
c0107033:	c1 e8 18             	shr    $0x18,%eax
c0107036:	a2 6f ca 12 c0       	mov    %al,0xc012ca6f

    // reload all segment registers
    lgdt(&gdt_pd);
c010703b:	68 70 ca 12 c0       	push   $0xc012ca70
c0107040:	e8 dd fe ff ff       	call   c0106f22 <lgdt>
c0107045:	83 c4 04             	add    $0x4,%esp
c0107048:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
    asm volatile ("cli" ::: "memory");
}

static inline void
ltr(uint16_t sel) {
    asm volatile ("ltr %0" :: "r" (sel) : "memory");
c010704e:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c0107052:	0f 00 d8             	ltr    %ax

    // load the TSS
    ltr(GD_TSS);
}
c0107055:	90                   	nop
c0107056:	c9                   	leave  
c0107057:	c3                   	ret    

c0107058 <init_pmm_manager>:

//init_pmm_manager - initialize a pmm_manager instance
static void
init_pmm_manager(void) {
c0107058:	55                   	push   %ebp
c0107059:	89 e5                	mov    %esp,%ebp
c010705b:	83 ec 08             	sub    $0x8,%esp
    pmm_manager = &default_pmm_manager;
c010705e:	c7 05 b0 31 1b c0 60 	movl   $0xc010d260,0xc01b31b0
c0107065:	d2 10 c0 
    cprintf("memory management: %s\n", pmm_manager->name);
c0107068:	a1 b0 31 1b c0       	mov    0xc01b31b0,%eax
c010706d:	8b 00                	mov    (%eax),%eax
c010706f:	83 ec 08             	sub    $0x8,%esp
c0107072:	50                   	push   %eax
c0107073:	68 fc d2 10 c0       	push   $0xc010d2fc
c0107078:	e8 1a 92 ff ff       	call   c0100297 <cprintf>
c010707d:	83 c4 10             	add    $0x10,%esp
    pmm_manager->init();
c0107080:	a1 b0 31 1b c0       	mov    0xc01b31b0,%eax
c0107085:	8b 40 04             	mov    0x4(%eax),%eax
c0107088:	ff d0                	call   *%eax
}
c010708a:	90                   	nop
c010708b:	c9                   	leave  
c010708c:	c3                   	ret    

c010708d <init_memmap>:

//init_memmap - call pmm->init_memmap to build Page struct for free memory  
static void
init_memmap(struct Page *base, size_t n) {
c010708d:	55                   	push   %ebp
c010708e:	89 e5                	mov    %esp,%ebp
c0107090:	83 ec 08             	sub    $0x8,%esp
    pmm_manager->init_memmap(base, n);
c0107093:	a1 b0 31 1b c0       	mov    0xc01b31b0,%eax
c0107098:	8b 40 08             	mov    0x8(%eax),%eax
c010709b:	83 ec 08             	sub    $0x8,%esp
c010709e:	ff 75 0c             	pushl  0xc(%ebp)
c01070a1:	ff 75 08             	pushl  0x8(%ebp)
c01070a4:	ff d0                	call   *%eax
c01070a6:	83 c4 10             	add    $0x10,%esp
}
c01070a9:	90                   	nop
c01070aa:	c9                   	leave  
c01070ab:	c3                   	ret    

c01070ac <alloc_pages>:

//alloc_pages - call pmm->alloc_pages to allocate a continuous n*PAGESIZE memory 
struct Page *
alloc_pages(size_t n) {
c01070ac:	55                   	push   %ebp
c01070ad:	89 e5                	mov    %esp,%ebp
c01070af:	83 ec 18             	sub    $0x18,%esp
    struct Page *page=NULL;
c01070b2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    
    while (1)
    {
         local_intr_save(intr_flag);
c01070b9:	e8 26 fe ff ff       	call   c0106ee4 <__intr_save>
c01070be:	89 45 f0             	mov    %eax,-0x10(%ebp)
         {
              page = pmm_manager->alloc_pages(n);
c01070c1:	a1 b0 31 1b c0       	mov    0xc01b31b0,%eax
c01070c6:	8b 40 0c             	mov    0xc(%eax),%eax
c01070c9:	83 ec 0c             	sub    $0xc,%esp
c01070cc:	ff 75 08             	pushl  0x8(%ebp)
c01070cf:	ff d0                	call   *%eax
c01070d1:	83 c4 10             	add    $0x10,%esp
c01070d4:	89 45 f4             	mov    %eax,-0xc(%ebp)
         }
         local_intr_restore(intr_flag);
c01070d7:	83 ec 0c             	sub    $0xc,%esp
c01070da:	ff 75 f0             	pushl  -0x10(%ebp)
c01070dd:	e8 2c fe ff ff       	call   c0106f0e <__intr_restore>
c01070e2:	83 c4 10             	add    $0x10,%esp

         if (page != NULL || n > 1 || swap_init_ok == 0) break;
c01070e5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01070e9:	75 28                	jne    c0107113 <alloc_pages+0x67>
c01070eb:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c01070ef:	77 22                	ja     c0107113 <alloc_pages+0x67>
c01070f1:	a1 6c 0f 1b c0       	mov    0xc01b0f6c,%eax
c01070f6:	85 c0                	test   %eax,%eax
c01070f8:	74 19                	je     c0107113 <alloc_pages+0x67>
         
         extern struct mm_struct *check_mm_struct;
         //cprintf("page %x, call swap_out in alloc_pages %d\n",page, n);
         swap_out(check_mm_struct, n, 0);
c01070fa:	8b 55 08             	mov    0x8(%ebp),%edx
c01070fd:	a1 d0 30 1b c0       	mov    0xc01b30d0,%eax
c0107102:	83 ec 04             	sub    $0x4,%esp
c0107105:	6a 00                	push   $0x0
c0107107:	52                   	push   %edx
c0107108:	50                   	push   %eax
c0107109:	e8 65 e3 ff ff       	call   c0105473 <swap_out>
c010710e:	83 c4 10             	add    $0x10,%esp
    }
c0107111:	eb a6                	jmp    c01070b9 <alloc_pages+0xd>
    //cprintf("n %d,get page %x, No %d in alloc_pages\n",n,page,(page-pages));
    return page;
c0107113:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0107116:	c9                   	leave  
c0107117:	c3                   	ret    

c0107118 <free_pages>:

//free_pages - call pmm->free_pages to free a continuous n*PAGESIZE memory 
void
free_pages(struct Page *base, size_t n) {
c0107118:	55                   	push   %ebp
c0107119:	89 e5                	mov    %esp,%ebp
c010711b:	83 ec 18             	sub    $0x18,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010711e:	e8 c1 fd ff ff       	call   c0106ee4 <__intr_save>
c0107123:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        pmm_manager->free_pages(base, n);
c0107126:	a1 b0 31 1b c0       	mov    0xc01b31b0,%eax
c010712b:	8b 40 10             	mov    0x10(%eax),%eax
c010712e:	83 ec 08             	sub    $0x8,%esp
c0107131:	ff 75 0c             	pushl  0xc(%ebp)
c0107134:	ff 75 08             	pushl  0x8(%ebp)
c0107137:	ff d0                	call   *%eax
c0107139:	83 c4 10             	add    $0x10,%esp
    }
    local_intr_restore(intr_flag);
c010713c:	83 ec 0c             	sub    $0xc,%esp
c010713f:	ff 75 f4             	pushl  -0xc(%ebp)
c0107142:	e8 c7 fd ff ff       	call   c0106f0e <__intr_restore>
c0107147:	83 c4 10             	add    $0x10,%esp
}
c010714a:	90                   	nop
c010714b:	c9                   	leave  
c010714c:	c3                   	ret    

c010714d <nr_free_pages>:

//nr_free_pages - call pmm->nr_free_pages to get the size (nr*PAGESIZE) 
//of current free memory
size_t
nr_free_pages(void) {
c010714d:	55                   	push   %ebp
c010714e:	89 e5                	mov    %esp,%ebp
c0107150:	83 ec 18             	sub    $0x18,%esp
    size_t ret;
    bool intr_flag;
    local_intr_save(intr_flag);
c0107153:	e8 8c fd ff ff       	call   c0106ee4 <__intr_save>
c0107158:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        ret = pmm_manager->nr_free_pages();
c010715b:	a1 b0 31 1b c0       	mov    0xc01b31b0,%eax
c0107160:	8b 40 14             	mov    0x14(%eax),%eax
c0107163:	ff d0                	call   *%eax
c0107165:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    local_intr_restore(intr_flag);
c0107168:	83 ec 0c             	sub    $0xc,%esp
c010716b:	ff 75 f4             	pushl  -0xc(%ebp)
c010716e:	e8 9b fd ff ff       	call   c0106f0e <__intr_restore>
c0107173:	83 c4 10             	add    $0x10,%esp
    return ret;
c0107176:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0107179:	c9                   	leave  
c010717a:	c3                   	ret    

c010717b <page_init>:

/* pmm_init - initialize the physical memory management */
static void
page_init(void) {
c010717b:	55                   	push   %ebp
c010717c:	89 e5                	mov    %esp,%ebp
c010717e:	57                   	push   %edi
c010717f:	56                   	push   %esi
c0107180:	53                   	push   %ebx
c0107181:	83 ec 7c             	sub    $0x7c,%esp
    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
c0107184:	c7 45 c4 00 80 00 c0 	movl   $0xc0008000,-0x3c(%ebp)
    uint64_t maxpa = 0;
c010718b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
c0107192:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

    cprintf("e820map:\n");
c0107199:	83 ec 0c             	sub    $0xc,%esp
c010719c:	68 13 d3 10 c0       	push   $0xc010d313
c01071a1:	e8 f1 90 ff ff       	call   c0100297 <cprintf>
c01071a6:	83 c4 10             	add    $0x10,%esp
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
c01071a9:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c01071b0:	e9 fc 00 00 00       	jmp    c01072b1 <page_init+0x136>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c01071b5:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01071b8:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01071bb:	89 d0                	mov    %edx,%eax
c01071bd:	c1 e0 02             	shl    $0x2,%eax
c01071c0:	01 d0                	add    %edx,%eax
c01071c2:	c1 e0 02             	shl    $0x2,%eax
c01071c5:	01 c8                	add    %ecx,%eax
c01071c7:	8b 50 08             	mov    0x8(%eax),%edx
c01071ca:	8b 40 04             	mov    0x4(%eax),%eax
c01071cd:	89 45 b8             	mov    %eax,-0x48(%ebp)
c01071d0:	89 55 bc             	mov    %edx,-0x44(%ebp)
c01071d3:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01071d6:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01071d9:	89 d0                	mov    %edx,%eax
c01071db:	c1 e0 02             	shl    $0x2,%eax
c01071de:	01 d0                	add    %edx,%eax
c01071e0:	c1 e0 02             	shl    $0x2,%eax
c01071e3:	01 c8                	add    %ecx,%eax
c01071e5:	8b 48 0c             	mov    0xc(%eax),%ecx
c01071e8:	8b 58 10             	mov    0x10(%eax),%ebx
c01071eb:	8b 45 b8             	mov    -0x48(%ebp),%eax
c01071ee:	8b 55 bc             	mov    -0x44(%ebp),%edx
c01071f1:	01 c8                	add    %ecx,%eax
c01071f3:	11 da                	adc    %ebx,%edx
c01071f5:	89 45 b0             	mov    %eax,-0x50(%ebp)
c01071f8:	89 55 b4             	mov    %edx,-0x4c(%ebp)
        cprintf("  memory: %08llx, [%08llx, %08llx], type = %d.\n",
c01071fb:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01071fe:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0107201:	89 d0                	mov    %edx,%eax
c0107203:	c1 e0 02             	shl    $0x2,%eax
c0107206:	01 d0                	add    %edx,%eax
c0107208:	c1 e0 02             	shl    $0x2,%eax
c010720b:	01 c8                	add    %ecx,%eax
c010720d:	83 c0 14             	add    $0x14,%eax
c0107210:	8b 00                	mov    (%eax),%eax
c0107212:	89 45 84             	mov    %eax,-0x7c(%ebp)
c0107215:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0107218:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c010721b:	83 c0 ff             	add    $0xffffffff,%eax
c010721e:	83 d2 ff             	adc    $0xffffffff,%edx
c0107221:	89 c1                	mov    %eax,%ecx
c0107223:	89 d3                	mov    %edx,%ebx
c0107225:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0107228:	89 55 80             	mov    %edx,-0x80(%ebp)
c010722b:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010722e:	89 d0                	mov    %edx,%eax
c0107230:	c1 e0 02             	shl    $0x2,%eax
c0107233:	01 d0                	add    %edx,%eax
c0107235:	c1 e0 02             	shl    $0x2,%eax
c0107238:	03 45 80             	add    -0x80(%ebp),%eax
c010723b:	8b 50 10             	mov    0x10(%eax),%edx
c010723e:	8b 40 0c             	mov    0xc(%eax),%eax
c0107241:	ff 75 84             	pushl  -0x7c(%ebp)
c0107244:	53                   	push   %ebx
c0107245:	51                   	push   %ecx
c0107246:	ff 75 bc             	pushl  -0x44(%ebp)
c0107249:	ff 75 b8             	pushl  -0x48(%ebp)
c010724c:	52                   	push   %edx
c010724d:	50                   	push   %eax
c010724e:	68 20 d3 10 c0       	push   $0xc010d320
c0107253:	e8 3f 90 ff ff       	call   c0100297 <cprintf>
c0107258:	83 c4 20             	add    $0x20,%esp
                memmap->map[i].size, begin, end - 1, memmap->map[i].type);
        if (memmap->map[i].type == E820_ARM) {
c010725b:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c010725e:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0107261:	89 d0                	mov    %edx,%eax
c0107263:	c1 e0 02             	shl    $0x2,%eax
c0107266:	01 d0                	add    %edx,%eax
c0107268:	c1 e0 02             	shl    $0x2,%eax
c010726b:	01 c8                	add    %ecx,%eax
c010726d:	83 c0 14             	add    $0x14,%eax
c0107270:	8b 00                	mov    (%eax),%eax
c0107272:	83 f8 01             	cmp    $0x1,%eax
c0107275:	75 36                	jne    c01072ad <page_init+0x132>
            if (maxpa < end && begin < KMEMSIZE) {
c0107277:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010727a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010727d:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c0107280:	77 2b                	ja     c01072ad <page_init+0x132>
c0107282:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c0107285:	72 05                	jb     c010728c <page_init+0x111>
c0107287:	3b 45 b0             	cmp    -0x50(%ebp),%eax
c010728a:	73 21                	jae    c01072ad <page_init+0x132>
c010728c:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0107290:	77 1b                	ja     c01072ad <page_init+0x132>
c0107292:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0107296:	72 09                	jb     c01072a1 <page_init+0x126>
c0107298:	81 7d b8 ff ff ff 37 	cmpl   $0x37ffffff,-0x48(%ebp)
c010729f:	77 0c                	ja     c01072ad <page_init+0x132>
                maxpa = end;
c01072a1:	8b 45 b0             	mov    -0x50(%ebp),%eax
c01072a4:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c01072a7:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01072aa:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
    uint64_t maxpa = 0;

    cprintf("e820map:\n");
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
c01072ad:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c01072b1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01072b4:	8b 00                	mov    (%eax),%eax
c01072b6:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c01072b9:	0f 8f f6 fe ff ff    	jg     c01071b5 <page_init+0x3a>
            if (maxpa < end && begin < KMEMSIZE) {
                maxpa = end;
            }
        }
    }
    if (maxpa > KMEMSIZE) {
c01072bf:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c01072c3:	72 1d                	jb     c01072e2 <page_init+0x167>
c01072c5:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c01072c9:	77 09                	ja     c01072d4 <page_init+0x159>
c01072cb:	81 7d e0 00 00 00 38 	cmpl   $0x38000000,-0x20(%ebp)
c01072d2:	76 0e                	jbe    c01072e2 <page_init+0x167>
        maxpa = KMEMSIZE;
c01072d4:	c7 45 e0 00 00 00 38 	movl   $0x38000000,-0x20(%ebp)
c01072db:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    }

    extern char end[];

    npage = maxpa / PGSIZE;
c01072e2:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01072e5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01072e8:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c01072ec:	c1 ea 0c             	shr    $0xc,%edx
c01072ef:	a3 80 0f 1b c0       	mov    %eax,0xc01b0f80
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);
c01072f4:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
c01072fb:	b8 c4 31 1b c0       	mov    $0xc01b31c4,%eax
c0107300:	8d 50 ff             	lea    -0x1(%eax),%edx
c0107303:	8b 45 ac             	mov    -0x54(%ebp),%eax
c0107306:	01 d0                	add    %edx,%eax
c0107308:	89 45 a8             	mov    %eax,-0x58(%ebp)
c010730b:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010730e:	ba 00 00 00 00       	mov    $0x0,%edx
c0107313:	f7 75 ac             	divl   -0x54(%ebp)
c0107316:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0107319:	29 d0                	sub    %edx,%eax
c010731b:	a3 b8 31 1b c0       	mov    %eax,0xc01b31b8

    for (i = 0; i < npage; i ++) {
c0107320:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0107327:	eb 27                	jmp    c0107350 <page_init+0x1d5>
        SetPageReserved(pages + i);
c0107329:	a1 b8 31 1b c0       	mov    0xc01b31b8,%eax
c010732e:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0107331:	c1 e2 05             	shl    $0x5,%edx
c0107334:	01 d0                	add    %edx,%eax
c0107336:	83 c0 04             	add    $0x4,%eax
c0107339:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
c0107340:	89 45 8c             	mov    %eax,-0x74(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0107343:	8b 45 8c             	mov    -0x74(%ebp),%eax
c0107346:	8b 55 90             	mov    -0x70(%ebp),%edx
c0107349:	0f ab 10             	bts    %edx,(%eax)
    extern char end[];

    npage = maxpa / PGSIZE;
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);

    for (i = 0; i < npage; i ++) {
c010734c:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c0107350:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0107353:	a1 80 0f 1b c0       	mov    0xc01b0f80,%eax
c0107358:	39 c2                	cmp    %eax,%edx
c010735a:	72 cd                	jb     c0107329 <page_init+0x1ae>
        SetPageReserved(pages + i);
    }

    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);
c010735c:	a1 80 0f 1b c0       	mov    0xc01b0f80,%eax
c0107361:	c1 e0 05             	shl    $0x5,%eax
c0107364:	89 c2                	mov    %eax,%edx
c0107366:	a1 b8 31 1b c0       	mov    0xc01b31b8,%eax
c010736b:	01 d0                	add    %edx,%eax
c010736d:	89 45 a4             	mov    %eax,-0x5c(%ebp)
c0107370:	81 7d a4 ff ff ff bf 	cmpl   $0xbfffffff,-0x5c(%ebp)
c0107377:	77 17                	ja     c0107390 <page_init+0x215>
c0107379:	ff 75 a4             	pushl  -0x5c(%ebp)
c010737c:	68 50 d3 10 c0       	push   $0xc010d350
c0107381:	68 ea 00 00 00       	push   $0xea
c0107386:	68 74 d3 10 c0       	push   $0xc010d374
c010738b:	e8 6d 90 ff ff       	call   c01003fd <__panic>
c0107390:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0107393:	05 00 00 00 40       	add    $0x40000000,%eax
c0107398:	89 45 a0             	mov    %eax,-0x60(%ebp)

    for (i = 0; i < memmap->nr_map; i ++) {
c010739b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c01073a2:	e9 69 01 00 00       	jmp    c0107510 <page_init+0x395>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c01073a7:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01073aa:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01073ad:	89 d0                	mov    %edx,%eax
c01073af:	c1 e0 02             	shl    $0x2,%eax
c01073b2:	01 d0                	add    %edx,%eax
c01073b4:	c1 e0 02             	shl    $0x2,%eax
c01073b7:	01 c8                	add    %ecx,%eax
c01073b9:	8b 50 08             	mov    0x8(%eax),%edx
c01073bc:	8b 40 04             	mov    0x4(%eax),%eax
c01073bf:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01073c2:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c01073c5:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01073c8:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01073cb:	89 d0                	mov    %edx,%eax
c01073cd:	c1 e0 02             	shl    $0x2,%eax
c01073d0:	01 d0                	add    %edx,%eax
c01073d2:	c1 e0 02             	shl    $0x2,%eax
c01073d5:	01 c8                	add    %ecx,%eax
c01073d7:	8b 48 0c             	mov    0xc(%eax),%ecx
c01073da:	8b 58 10             	mov    0x10(%eax),%ebx
c01073dd:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01073e0:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01073e3:	01 c8                	add    %ecx,%eax
c01073e5:	11 da                	adc    %ebx,%edx
c01073e7:	89 45 c8             	mov    %eax,-0x38(%ebp)
c01073ea:	89 55 cc             	mov    %edx,-0x34(%ebp)
        if (memmap->map[i].type == E820_ARM) {
c01073ed:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01073f0:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01073f3:	89 d0                	mov    %edx,%eax
c01073f5:	c1 e0 02             	shl    $0x2,%eax
c01073f8:	01 d0                	add    %edx,%eax
c01073fa:	c1 e0 02             	shl    $0x2,%eax
c01073fd:	01 c8                	add    %ecx,%eax
c01073ff:	83 c0 14             	add    $0x14,%eax
c0107402:	8b 00                	mov    (%eax),%eax
c0107404:	83 f8 01             	cmp    $0x1,%eax
c0107407:	0f 85 ff 00 00 00    	jne    c010750c <page_init+0x391>
            if (begin < freemem) {
c010740d:	8b 45 a0             	mov    -0x60(%ebp),%eax
c0107410:	ba 00 00 00 00       	mov    $0x0,%edx
c0107415:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c0107418:	72 17                	jb     c0107431 <page_init+0x2b6>
c010741a:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c010741d:	77 05                	ja     c0107424 <page_init+0x2a9>
c010741f:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c0107422:	76 0d                	jbe    c0107431 <page_init+0x2b6>
                begin = freemem;
c0107424:	8b 45 a0             	mov    -0x60(%ebp),%eax
c0107427:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010742a:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
            }
            if (end > KMEMSIZE) {
c0107431:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0107435:	72 1d                	jb     c0107454 <page_init+0x2d9>
c0107437:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c010743b:	77 09                	ja     c0107446 <page_init+0x2cb>
c010743d:	81 7d c8 00 00 00 38 	cmpl   $0x38000000,-0x38(%ebp)
c0107444:	76 0e                	jbe    c0107454 <page_init+0x2d9>
                end = KMEMSIZE;
c0107446:	c7 45 c8 00 00 00 38 	movl   $0x38000000,-0x38(%ebp)
c010744d:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
            }
            if (begin < end) {
c0107454:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0107457:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010745a:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c010745d:	0f 87 a9 00 00 00    	ja     c010750c <page_init+0x391>
c0107463:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c0107466:	72 09                	jb     c0107471 <page_init+0x2f6>
c0107468:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c010746b:	0f 83 9b 00 00 00    	jae    c010750c <page_init+0x391>
                begin = ROUNDUP(begin, PGSIZE);
c0107471:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
c0107478:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010747b:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010747e:	01 d0                	add    %edx,%eax
c0107480:	83 e8 01             	sub    $0x1,%eax
c0107483:	89 45 98             	mov    %eax,-0x68(%ebp)
c0107486:	8b 45 98             	mov    -0x68(%ebp),%eax
c0107489:	ba 00 00 00 00       	mov    $0x0,%edx
c010748e:	f7 75 9c             	divl   -0x64(%ebp)
c0107491:	8b 45 98             	mov    -0x68(%ebp),%eax
c0107494:	29 d0                	sub    %edx,%eax
c0107496:	ba 00 00 00 00       	mov    $0x0,%edx
c010749b:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010749e:	89 55 d4             	mov    %edx,-0x2c(%ebp)
                end = ROUNDDOWN(end, PGSIZE);
c01074a1:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01074a4:	89 45 94             	mov    %eax,-0x6c(%ebp)
c01074a7:	8b 45 94             	mov    -0x6c(%ebp),%eax
c01074aa:	ba 00 00 00 00       	mov    $0x0,%edx
c01074af:	89 c3                	mov    %eax,%ebx
c01074b1:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
c01074b7:	89 de                	mov    %ebx,%esi
c01074b9:	89 d0                	mov    %edx,%eax
c01074bb:	83 e0 00             	and    $0x0,%eax
c01074be:	89 c7                	mov    %eax,%edi
c01074c0:	89 75 c8             	mov    %esi,-0x38(%ebp)
c01074c3:	89 7d cc             	mov    %edi,-0x34(%ebp)
                if (begin < end) {
c01074c6:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01074c9:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01074cc:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c01074cf:	77 3b                	ja     c010750c <page_init+0x391>
c01074d1:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c01074d4:	72 05                	jb     c01074db <page_init+0x360>
c01074d6:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c01074d9:	73 31                	jae    c010750c <page_init+0x391>
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
c01074db:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01074de:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01074e1:	2b 45 d0             	sub    -0x30(%ebp),%eax
c01074e4:	1b 55 d4             	sbb    -0x2c(%ebp),%edx
c01074e7:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c01074eb:	c1 ea 0c             	shr    $0xc,%edx
c01074ee:	89 c3                	mov    %eax,%ebx
c01074f0:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01074f3:	83 ec 0c             	sub    $0xc,%esp
c01074f6:	50                   	push   %eax
c01074f7:	e8 ca f8 ff ff       	call   c0106dc6 <pa2page>
c01074fc:	83 c4 10             	add    $0x10,%esp
c01074ff:	83 ec 08             	sub    $0x8,%esp
c0107502:	53                   	push   %ebx
c0107503:	50                   	push   %eax
c0107504:	e8 84 fb ff ff       	call   c010708d <init_memmap>
c0107509:	83 c4 10             	add    $0x10,%esp
        SetPageReserved(pages + i);
    }

    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);

    for (i = 0; i < memmap->nr_map; i ++) {
c010750c:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c0107510:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0107513:	8b 00                	mov    (%eax),%eax
c0107515:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c0107518:	0f 8f 89 fe ff ff    	jg     c01073a7 <page_init+0x22c>
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
                }
            }
        }
    }
}
c010751e:	90                   	nop
c010751f:	8d 65 f4             	lea    -0xc(%ebp),%esp
c0107522:	5b                   	pop    %ebx
c0107523:	5e                   	pop    %esi
c0107524:	5f                   	pop    %edi
c0107525:	5d                   	pop    %ebp
c0107526:	c3                   	ret    

c0107527 <boot_map_segment>:
//  la:   linear address of this memory need to map (after x86 segment map)
//  size: memory size
//  pa:   physical address of this memory
//  perm: permission of this memory  
static void
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
c0107527:	55                   	push   %ebp
c0107528:	89 e5                	mov    %esp,%ebp
c010752a:	83 ec 28             	sub    $0x28,%esp
    assert(PGOFF(la) == PGOFF(pa));
c010752d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107530:	33 45 14             	xor    0x14(%ebp),%eax
c0107533:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107538:	85 c0                	test   %eax,%eax
c010753a:	74 19                	je     c0107555 <boot_map_segment+0x2e>
c010753c:	68 82 d3 10 c0       	push   $0xc010d382
c0107541:	68 99 d3 10 c0       	push   $0xc010d399
c0107546:	68 08 01 00 00       	push   $0x108
c010754b:	68 74 d3 10 c0       	push   $0xc010d374
c0107550:	e8 a8 8e ff ff       	call   c01003fd <__panic>
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
c0107555:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
c010755c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010755f:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107564:	89 c2                	mov    %eax,%edx
c0107566:	8b 45 10             	mov    0x10(%ebp),%eax
c0107569:	01 c2                	add    %eax,%edx
c010756b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010756e:	01 d0                	add    %edx,%eax
c0107570:	83 e8 01             	sub    $0x1,%eax
c0107573:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0107576:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107579:	ba 00 00 00 00       	mov    $0x0,%edx
c010757e:	f7 75 f0             	divl   -0x10(%ebp)
c0107581:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107584:	29 d0                	sub    %edx,%eax
c0107586:	c1 e8 0c             	shr    $0xc,%eax
c0107589:	89 45 f4             	mov    %eax,-0xc(%ebp)
    la = ROUNDDOWN(la, PGSIZE);
c010758c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010758f:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0107592:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107595:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010759a:	89 45 0c             	mov    %eax,0xc(%ebp)
    pa = ROUNDDOWN(pa, PGSIZE);
c010759d:	8b 45 14             	mov    0x14(%ebp),%eax
c01075a0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01075a3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01075a6:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01075ab:	89 45 14             	mov    %eax,0x14(%ebp)
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c01075ae:	eb 57                	jmp    c0107607 <boot_map_segment+0xe0>
        pte_t *ptep = get_pte(pgdir, la, 1);
c01075b0:	83 ec 04             	sub    $0x4,%esp
c01075b3:	6a 01                	push   $0x1
c01075b5:	ff 75 0c             	pushl  0xc(%ebp)
c01075b8:	ff 75 08             	pushl  0x8(%ebp)
c01075bb:	e8 58 01 00 00       	call   c0107718 <get_pte>
c01075c0:	83 c4 10             	add    $0x10,%esp
c01075c3:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(ptep != NULL);
c01075c6:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01075ca:	75 19                	jne    c01075e5 <boot_map_segment+0xbe>
c01075cc:	68 ae d3 10 c0       	push   $0xc010d3ae
c01075d1:	68 99 d3 10 c0       	push   $0xc010d399
c01075d6:	68 0e 01 00 00       	push   $0x10e
c01075db:	68 74 d3 10 c0       	push   $0xc010d374
c01075e0:	e8 18 8e ff ff       	call   c01003fd <__panic>
        *ptep = pa | PTE_P | perm;
c01075e5:	8b 45 14             	mov    0x14(%ebp),%eax
c01075e8:	0b 45 18             	or     0x18(%ebp),%eax
c01075eb:	83 c8 01             	or     $0x1,%eax
c01075ee:	89 c2                	mov    %eax,%edx
c01075f0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01075f3:	89 10                	mov    %edx,(%eax)
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
    assert(PGOFF(la) == PGOFF(pa));
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
    la = ROUNDDOWN(la, PGSIZE);
    pa = ROUNDDOWN(pa, PGSIZE);
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c01075f5:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c01075f9:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
c0107600:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
c0107607:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010760b:	75 a3                	jne    c01075b0 <boot_map_segment+0x89>
        pte_t *ptep = get_pte(pgdir, la, 1);
        assert(ptep != NULL);
        *ptep = pa | PTE_P | perm;
    }
}
c010760d:	90                   	nop
c010760e:	c9                   	leave  
c010760f:	c3                   	ret    

c0107610 <boot_alloc_page>:

//boot_alloc_page - allocate one page using pmm->alloc_pages(1) 
// return value: the kernel virtual address of this allocated page
//note: this function is used to get the memory for PDT(Page Directory Table)&PT(Page Table)
static void *
boot_alloc_page(void) {
c0107610:	55                   	push   %ebp
c0107611:	89 e5                	mov    %esp,%ebp
c0107613:	83 ec 18             	sub    $0x18,%esp
    struct Page *p = alloc_page();
c0107616:	83 ec 0c             	sub    $0xc,%esp
c0107619:	6a 01                	push   $0x1
c010761b:	e8 8c fa ff ff       	call   c01070ac <alloc_pages>
c0107620:	83 c4 10             	add    $0x10,%esp
c0107623:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (p == NULL) {
c0107626:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010762a:	75 17                	jne    c0107643 <boot_alloc_page+0x33>
        panic("boot_alloc_page failed.\n");
c010762c:	83 ec 04             	sub    $0x4,%esp
c010762f:	68 bb d3 10 c0       	push   $0xc010d3bb
c0107634:	68 1a 01 00 00       	push   $0x11a
c0107639:	68 74 d3 10 c0       	push   $0xc010d374
c010763e:	e8 ba 8d ff ff       	call   c01003fd <__panic>
    }
    return page2kva(p);
c0107643:	83 ec 0c             	sub    $0xc,%esp
c0107646:	ff 75 f4             	pushl  -0xc(%ebp)
c0107649:	e8 b5 f7 ff ff       	call   c0106e03 <page2kva>
c010764e:	83 c4 10             	add    $0x10,%esp
}
c0107651:	c9                   	leave  
c0107652:	c3                   	ret    

c0107653 <pmm_init>:

//pmm_init - setup a pmm to manage physical memory, build PDT&PT to setup paging mechanism 
//         - check the correctness of pmm & paging mechanism, print PDT&PT
void
pmm_init(void) {
c0107653:	55                   	push   %ebp
c0107654:	89 e5                	mov    %esp,%ebp
c0107656:	83 ec 18             	sub    $0x18,%esp
    // We've already enabled paging
    boot_cr3 = PADDR(boot_pgdir);
c0107659:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c010765e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0107661:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c0107668:	77 17                	ja     c0107681 <pmm_init+0x2e>
c010766a:	ff 75 f4             	pushl  -0xc(%ebp)
c010766d:	68 50 d3 10 c0       	push   $0xc010d350
c0107672:	68 24 01 00 00       	push   $0x124
c0107677:	68 74 d3 10 c0       	push   $0xc010d374
c010767c:	e8 7c 8d ff ff       	call   c01003fd <__panic>
c0107681:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107684:	05 00 00 00 40       	add    $0x40000000,%eax
c0107689:	a3 b4 31 1b c0       	mov    %eax,0xc01b31b4
    //We need to alloc/free the physical memory (granularity is 4KB or other size). 
    //So a framework of physical memory manager (struct pmm_manager)is defined in pmm.h
    //First we should init a physical memory manager(pmm) based on the framework.
    //Then pmm can alloc/free the physical memory. 
    //Now the first_fit/best_fit/worst_fit/buddy_system pmm are available.
    init_pmm_manager();
c010768e:	e8 c5 f9 ff ff       	call   c0107058 <init_pmm_manager>

    // detect physical memory space, reserve already used memory,
    // then use pmm->init_memmap to create free page list
    page_init();
c0107693:	e8 e3 fa ff ff       	call   c010717b <page_init>

    //use pmm->check to verify the correctness of the alloc/free function in a pmm
    check_alloc_page();
c0107698:	e8 16 08 00 00       	call   c0107eb3 <check_alloc_page>

    check_pgdir();
c010769d:	e8 34 08 00 00       	call   c0107ed6 <check_pgdir>

    static_assert(KERNBASE % PTSIZE == 0 && KERNTOP % PTSIZE == 0);

    // recursively insert boot_pgdir in itself
    // to form a virtual page table at virtual address VPT
    boot_pgdir[PDX(VPT)] = PADDR(boot_pgdir) | PTE_P | PTE_W;
c01076a2:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c01076a7:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
c01076ad:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c01076b2:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01076b5:	81 7d f0 ff ff ff bf 	cmpl   $0xbfffffff,-0x10(%ebp)
c01076bc:	77 17                	ja     c01076d5 <pmm_init+0x82>
c01076be:	ff 75 f0             	pushl  -0x10(%ebp)
c01076c1:	68 50 d3 10 c0       	push   $0xc010d350
c01076c6:	68 3a 01 00 00       	push   $0x13a
c01076cb:	68 74 d3 10 c0       	push   $0xc010d374
c01076d0:	e8 28 8d ff ff       	call   c01003fd <__panic>
c01076d5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01076d8:	05 00 00 00 40       	add    $0x40000000,%eax
c01076dd:	83 c8 03             	or     $0x3,%eax
c01076e0:	89 02                	mov    %eax,(%edx)

    // map all physical memory to linear memory with base linear addr KERNBASE
    // linear_addr KERNBASE ~ KERNBASE + KMEMSIZE = phy_addr 0 ~ KMEMSIZE
    boot_map_segment(boot_pgdir, KERNBASE, KMEMSIZE, 0, PTE_W);
c01076e2:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c01076e7:	83 ec 0c             	sub    $0xc,%esp
c01076ea:	6a 02                	push   $0x2
c01076ec:	6a 00                	push   $0x0
c01076ee:	68 00 00 00 38       	push   $0x38000000
c01076f3:	68 00 00 00 c0       	push   $0xc0000000
c01076f8:	50                   	push   %eax
c01076f9:	e8 29 fe ff ff       	call   c0107527 <boot_map_segment>
c01076fe:	83 c4 20             	add    $0x20,%esp

    // Since we are using bootloader's GDT,
    // we should reload gdt (second time, the last time) to get user segments and the TSS
    // map virtual_addr 0 ~ 4G = linear_addr 0 ~ 4G
    // then set kernel stack (ss:esp) in TSS, setup TSS in gdt, load TSS
    gdt_init();
c0107701:	e8 60 f8 ff ff       	call   c0106f66 <gdt_init>

    //now the basic virtual memory map(see memalyout.h) is established.
    //check the correctness of the basic virtual memory map.
    check_boot_pgdir();
c0107706:	e8 31 0d 00 00       	call   c010843c <check_boot_pgdir>

    print_pgdir();
c010770b:	e8 27 11 00 00       	call   c0108837 <print_pgdir>
    
    kmalloc_init();
c0107710:	e8 28 d9 ff ff       	call   c010503d <kmalloc_init>

}
c0107715:	90                   	nop
c0107716:	c9                   	leave  
c0107717:	c3                   	ret    

c0107718 <get_pte>:
//  pgdir:  the kernel virtual base address of PDT
//  la:     the linear address need to map
//  create: a logical value to decide if alloc a page for PT
// return vaule: the kernel virtual address of this pte
pte_t *
get_pte(pde_t *pgdir, uintptr_t la, bool create) {
c0107718:	55                   	push   %ebp
c0107719:	89 e5                	mov    %esp,%ebp
c010771b:	83 ec 38             	sub    $0x38,%esp
                          // (7) set page directory entry's permission
    }
    return NULL;          // (8) return page table entry
#endif
    // (1) find page directory entry
    size_t pdx = PDX(la);       // index of this la in page dir table
c010771e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107721:	c1 e8 16             	shr    $0x16,%eax
c0107724:	89 45 f4             	mov    %eax,-0xc(%ebp)
    pde_t * pdep = pgdir + pdx; // NOTE: this is a virtual addr
c0107727:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010772a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0107731:	8b 45 08             	mov    0x8(%ebp),%eax
c0107734:	01 d0                	add    %edx,%eax
c0107736:	89 45 f0             	mov    %eax,-0x10(%ebp)
    // (2) check if entry is not present
    if (!(*pdep & PTE_P)) {
c0107739:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010773c:	8b 00                	mov    (%eax),%eax
c010773e:	83 e0 01             	and    $0x1,%eax
c0107741:	85 c0                	test   %eax,%eax
c0107743:	0f 85 ae 00 00 00    	jne    c01077f7 <get_pte+0xdf>
        // (3) check if creating is needed
        if (!create) {
c0107749:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010774d:	75 0a                	jne    c0107759 <get_pte+0x41>
            return NULL;
c010774f:	b8 00 00 00 00       	mov    $0x0,%eax
c0107754:	e9 01 01 00 00       	jmp    c010785a <get_pte+0x142>
        }
        // alloc page for page table
        struct Page * pt_page =  alloc_page();
c0107759:	83 ec 0c             	sub    $0xc,%esp
c010775c:	6a 01                	push   $0x1
c010775e:	e8 49 f9 ff ff       	call   c01070ac <alloc_pages>
c0107763:	83 c4 10             	add    $0x10,%esp
c0107766:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (pt_page == NULL) {
c0107769:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010776d:	75 0a                	jne    c0107779 <get_pte+0x61>
            return NULL;
c010776f:	b8 00 00 00 00       	mov    $0x0,%eax
c0107774:	e9 e1 00 00 00       	jmp    c010785a <get_pte+0x142>
        }
        // (4) set page reference
        set_page_ref(pt_page, 1);
c0107779:	83 ec 08             	sub    $0x8,%esp
c010777c:	6a 01                	push   $0x1
c010777e:	ff 75 ec             	pushl  -0x14(%ebp)
c0107781:	e8 22 f7 ff ff       	call   c0106ea8 <set_page_ref>
c0107786:	83 c4 10             	add    $0x10,%esp
        // (5) get linear address of page
        uintptr_t pt_addr = page2pa(pt_page);
c0107789:	83 ec 0c             	sub    $0xc,%esp
c010778c:	ff 75 ec             	pushl  -0x14(%ebp)
c010778f:	e8 1f f6 ff ff       	call   c0106db3 <page2pa>
c0107794:	83 c4 10             	add    $0x10,%esp
c0107797:	89 45 e8             	mov    %eax,-0x18(%ebp)
        // (6) clear page content using memset
        memset(KADDR(pt_addr), 0, PGSIZE);
c010779a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010779d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01077a0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01077a3:	c1 e8 0c             	shr    $0xc,%eax
c01077a6:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01077a9:	a1 80 0f 1b c0       	mov    0xc01b0f80,%eax
c01077ae:	39 45 e0             	cmp    %eax,-0x20(%ebp)
c01077b1:	72 17                	jb     c01077ca <get_pte+0xb2>
c01077b3:	ff 75 e4             	pushl  -0x1c(%ebp)
c01077b6:	68 ac d2 10 c0       	push   $0xc010d2ac
c01077bb:	68 8d 01 00 00       	push   $0x18d
c01077c0:	68 74 d3 10 c0       	push   $0xc010d374
c01077c5:	e8 33 8c ff ff       	call   c01003fd <__panic>
c01077ca:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01077cd:	2d 00 00 00 40       	sub    $0x40000000,%eax
c01077d2:	83 ec 04             	sub    $0x4,%esp
c01077d5:	68 00 10 00 00       	push   $0x1000
c01077da:	6a 00                	push   $0x0
c01077dc:	50                   	push   %eax
c01077dd:	e8 3c 39 00 00       	call   c010b11e <memset>
c01077e2:	83 c4 10             	add    $0x10,%esp
        // (7) set page directory entry's permission
        *pdep = (PDE_ADDR(pt_addr)) | PTE_U | PTE_W | PTE_P; // PDE_ADDR: get pa &= ~0xFFF
c01077e5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01077e8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01077ed:	83 c8 07             	or     $0x7,%eax
c01077f0:	89 c2                	mov    %eax,%edx
c01077f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01077f5:	89 10                	mov    %edx,(%eax)
    }
    // (8) return page table entry
    size_t ptx = PTX(la);   // index of this la in page dir table
c01077f7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01077fa:	c1 e8 0c             	shr    $0xc,%eax
c01077fd:	25 ff 03 00 00       	and    $0x3ff,%eax
c0107802:	89 45 dc             	mov    %eax,-0x24(%ebp)
    uintptr_t pt_pa = PDE_ADDR(*pdep);
c0107805:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107808:	8b 00                	mov    (%eax),%eax
c010780a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010780f:	89 45 d8             	mov    %eax,-0x28(%ebp)
    pte_t * ptep = (pte_t *)KADDR(pt_pa) + ptx;
c0107812:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0107815:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c0107818:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010781b:	c1 e8 0c             	shr    $0xc,%eax
c010781e:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0107821:	a1 80 0f 1b c0       	mov    0xc01b0f80,%eax
c0107826:	39 45 d0             	cmp    %eax,-0x30(%ebp)
c0107829:	72 17                	jb     c0107842 <get_pte+0x12a>
c010782b:	ff 75 d4             	pushl  -0x2c(%ebp)
c010782e:	68 ac d2 10 c0       	push   $0xc010d2ac
c0107833:	68 94 01 00 00       	push   $0x194
c0107838:	68 74 d3 10 c0       	push   $0xc010d374
c010783d:	e8 bb 8b ff ff       	call   c01003fd <__panic>
c0107842:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0107845:	2d 00 00 00 40       	sub    $0x40000000,%eax
c010784a:	89 c2                	mov    %eax,%edx
c010784c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010784f:	c1 e0 02             	shl    $0x2,%eax
c0107852:	01 d0                	add    %edx,%eax
c0107854:	89 45 cc             	mov    %eax,-0x34(%ebp)
    return ptep;
c0107857:	8b 45 cc             	mov    -0x34(%ebp),%eax
}
c010785a:	c9                   	leave  
c010785b:	c3                   	ret    

c010785c <get_page>:

//get_page - get related Page struct for linear address la using PDT pgdir
struct Page *
get_page(pde_t *pgdir, uintptr_t la, pte_t **ptep_store) {
c010785c:	55                   	push   %ebp
c010785d:	89 e5                	mov    %esp,%ebp
c010785f:	83 ec 18             	sub    $0x18,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c0107862:	83 ec 04             	sub    $0x4,%esp
c0107865:	6a 00                	push   $0x0
c0107867:	ff 75 0c             	pushl  0xc(%ebp)
c010786a:	ff 75 08             	pushl  0x8(%ebp)
c010786d:	e8 a6 fe ff ff       	call   c0107718 <get_pte>
c0107872:	83 c4 10             	add    $0x10,%esp
c0107875:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep_store != NULL) {
c0107878:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010787c:	74 08                	je     c0107886 <get_page+0x2a>
        *ptep_store = ptep;
c010787e:	8b 45 10             	mov    0x10(%ebp),%eax
c0107881:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0107884:	89 10                	mov    %edx,(%eax)
    }
    if (ptep != NULL && *ptep & PTE_P) {
c0107886:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010788a:	74 1f                	je     c01078ab <get_page+0x4f>
c010788c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010788f:	8b 00                	mov    (%eax),%eax
c0107891:	83 e0 01             	and    $0x1,%eax
c0107894:	85 c0                	test   %eax,%eax
c0107896:	74 13                	je     c01078ab <get_page+0x4f>
        return pte2page(*ptep);
c0107898:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010789b:	8b 00                	mov    (%eax),%eax
c010789d:	83 ec 0c             	sub    $0xc,%esp
c01078a0:	50                   	push   %eax
c01078a1:	e8 a2 f5 ff ff       	call   c0106e48 <pte2page>
c01078a6:	83 c4 10             	add    $0x10,%esp
c01078a9:	eb 05                	jmp    c01078b0 <get_page+0x54>
    }
    return NULL;
c01078ab:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01078b0:	c9                   	leave  
c01078b1:	c3                   	ret    

c01078b2 <page_remove_pte>:

//page_remove_pte - free an Page sturct which is related linear address la
//                - and clean(invalidate) pte which is related linear address la
//note: PT is changed, so the TLB need to be invalidate 
static inline void
page_remove_pte(pde_t *pgdir, uintptr_t la, pte_t *ptep) {
c01078b2:	55                   	push   %ebp
c01078b3:	89 e5                	mov    %esp,%ebp
c01078b5:	83 ec 18             	sub    $0x18,%esp
                                  //(5) clear second page table entry
                                  //(6) flush tlb
    }
#endif
    //(1) check if this page table entry is present
    if (!(*ptep & PTE_P)) {
c01078b8:	8b 45 10             	mov    0x10(%ebp),%eax
c01078bb:	8b 00                	mov    (%eax),%eax
c01078bd:	83 e0 01             	and    $0x1,%eax
c01078c0:	85 c0                	test   %eax,%eax
c01078c2:	74 57                	je     c010791b <page_remove_pte+0x69>
        return;
    }
    //(2) find corresponding page to pte
    struct Page *page = pte2page(*ptep);
c01078c4:	8b 45 10             	mov    0x10(%ebp),%eax
c01078c7:	8b 00                	mov    (%eax),%eax
c01078c9:	83 ec 0c             	sub    $0xc,%esp
c01078cc:	50                   	push   %eax
c01078cd:	e8 76 f5 ff ff       	call   c0106e48 <pte2page>
c01078d2:	83 c4 10             	add    $0x10,%esp
c01078d5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    //(3) decrease page reference
    page_ref_dec(page);
c01078d8:	83 ec 0c             	sub    $0xc,%esp
c01078db:	ff 75 f4             	pushl  -0xc(%ebp)
c01078de:	e8 ea f5 ff ff       	call   c0106ecd <page_ref_dec>
c01078e3:	83 c4 10             	add    $0x10,%esp
    //(4) and free this page when page reference reachs 0
    if (page->ref == 0) {
c01078e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01078e9:	8b 00                	mov    (%eax),%eax
c01078eb:	85 c0                	test   %eax,%eax
c01078ed:	75 10                	jne    c01078ff <page_remove_pte+0x4d>
        free_page(page);
c01078ef:	83 ec 08             	sub    $0x8,%esp
c01078f2:	6a 01                	push   $0x1
c01078f4:	ff 75 f4             	pushl  -0xc(%ebp)
c01078f7:	e8 1c f8 ff ff       	call   c0107118 <free_pages>
c01078fc:	83 c4 10             	add    $0x10,%esp
    }
    //(5) clear second page table entry
    *ptep = 0;
c01078ff:	8b 45 10             	mov    0x10(%ebp),%eax
c0107902:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    //(6) flush tlb
    tlb_invalidate(pgdir, la);
c0107908:	83 ec 08             	sub    $0x8,%esp
c010790b:	ff 75 0c             	pushl  0xc(%ebp)
c010790e:	ff 75 08             	pushl  0x8(%ebp)
c0107911:	e8 9c 04 00 00       	call   c0107db2 <tlb_invalidate>
c0107916:	83 c4 10             	add    $0x10,%esp
c0107919:	eb 01                	jmp    c010791c <page_remove_pte+0x6a>
                                  //(6) flush tlb
    }
#endif
    //(1) check if this page table entry is present
    if (!(*ptep & PTE_P)) {
        return;
c010791b:	90                   	nop
    }
    //(5) clear second page table entry
    *ptep = 0;
    //(6) flush tlb
    tlb_invalidate(pgdir, la);
}
c010791c:	c9                   	leave  
c010791d:	c3                   	ret    

c010791e <unmap_range>:

void
unmap_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c010791e:	55                   	push   %ebp
c010791f:	89 e5                	mov    %esp,%ebp
c0107921:	83 ec 18             	sub    $0x18,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0107924:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107927:	25 ff 0f 00 00       	and    $0xfff,%eax
c010792c:	85 c0                	test   %eax,%eax
c010792e:	75 0c                	jne    c010793c <unmap_range+0x1e>
c0107930:	8b 45 10             	mov    0x10(%ebp),%eax
c0107933:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107938:	85 c0                	test   %eax,%eax
c010793a:	74 19                	je     c0107955 <unmap_range+0x37>
c010793c:	68 d4 d3 10 c0       	push   $0xc010d3d4
c0107941:	68 99 d3 10 c0       	push   $0xc010d399
c0107946:	68 d7 01 00 00       	push   $0x1d7
c010794b:	68 74 d3 10 c0       	push   $0xc010d374
c0107950:	e8 a8 8a ff ff       	call   c01003fd <__panic>
    assert(USER_ACCESS(start, end));
c0107955:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c010795c:	76 11                	jbe    c010796f <unmap_range+0x51>
c010795e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107961:	3b 45 10             	cmp    0x10(%ebp),%eax
c0107964:	73 09                	jae    c010796f <unmap_range+0x51>
c0107966:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c010796d:	76 19                	jbe    c0107988 <unmap_range+0x6a>
c010796f:	68 fd d3 10 c0       	push   $0xc010d3fd
c0107974:	68 99 d3 10 c0       	push   $0xc010d399
c0107979:	68 d8 01 00 00       	push   $0x1d8
c010797e:	68 74 d3 10 c0       	push   $0xc010d374
c0107983:	e8 75 8a ff ff       	call   c01003fd <__panic>

    do {
        pte_t *ptep = get_pte(pgdir, start, 0);
c0107988:	83 ec 04             	sub    $0x4,%esp
c010798b:	6a 00                	push   $0x0
c010798d:	ff 75 0c             	pushl  0xc(%ebp)
c0107990:	ff 75 08             	pushl  0x8(%ebp)
c0107993:	e8 80 fd ff ff       	call   c0107718 <get_pte>
c0107998:	83 c4 10             	add    $0x10,%esp
c010799b:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ptep == NULL) {
c010799e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01079a2:	75 18                	jne    c01079bc <unmap_range+0x9e>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
c01079a4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01079a7:	05 00 00 40 00       	add    $0x400000,%eax
c01079ac:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01079af:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01079b2:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c01079b7:	89 45 0c             	mov    %eax,0xc(%ebp)
            continue ;
c01079ba:	eb 24                	jmp    c01079e0 <unmap_range+0xc2>
        }
        if (*ptep != 0) {
c01079bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01079bf:	8b 00                	mov    (%eax),%eax
c01079c1:	85 c0                	test   %eax,%eax
c01079c3:	74 14                	je     c01079d9 <unmap_range+0xbb>
            page_remove_pte(pgdir, start, ptep);
c01079c5:	83 ec 04             	sub    $0x4,%esp
c01079c8:	ff 75 f4             	pushl  -0xc(%ebp)
c01079cb:	ff 75 0c             	pushl  0xc(%ebp)
c01079ce:	ff 75 08             	pushl  0x8(%ebp)
c01079d1:	e8 dc fe ff ff       	call   c01078b2 <page_remove_pte>
c01079d6:	83 c4 10             	add    $0x10,%esp
        }
        start += PGSIZE;
c01079d9:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
    } while (start != 0 && start < end);
c01079e0:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01079e4:	74 08                	je     c01079ee <unmap_range+0xd0>
c01079e6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01079e9:	3b 45 10             	cmp    0x10(%ebp),%eax
c01079ec:	72 9a                	jb     c0107988 <unmap_range+0x6a>
}
c01079ee:	90                   	nop
c01079ef:	c9                   	leave  
c01079f0:	c3                   	ret    

c01079f1 <exit_range>:

void
exit_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c01079f1:	55                   	push   %ebp
c01079f2:	89 e5                	mov    %esp,%ebp
c01079f4:	83 ec 18             	sub    $0x18,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c01079f7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01079fa:	25 ff 0f 00 00       	and    $0xfff,%eax
c01079ff:	85 c0                	test   %eax,%eax
c0107a01:	75 0c                	jne    c0107a0f <exit_range+0x1e>
c0107a03:	8b 45 10             	mov    0x10(%ebp),%eax
c0107a06:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107a0b:	85 c0                	test   %eax,%eax
c0107a0d:	74 19                	je     c0107a28 <exit_range+0x37>
c0107a0f:	68 d4 d3 10 c0       	push   $0xc010d3d4
c0107a14:	68 99 d3 10 c0       	push   $0xc010d399
c0107a19:	68 e9 01 00 00       	push   $0x1e9
c0107a1e:	68 74 d3 10 c0       	push   $0xc010d374
c0107a23:	e8 d5 89 ff ff       	call   c01003fd <__panic>
    assert(USER_ACCESS(start, end));
c0107a28:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0107a2f:	76 11                	jbe    c0107a42 <exit_range+0x51>
c0107a31:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107a34:	3b 45 10             	cmp    0x10(%ebp),%eax
c0107a37:	73 09                	jae    c0107a42 <exit_range+0x51>
c0107a39:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c0107a40:	76 19                	jbe    c0107a5b <exit_range+0x6a>
c0107a42:	68 fd d3 10 c0       	push   $0xc010d3fd
c0107a47:	68 99 d3 10 c0       	push   $0xc010d399
c0107a4c:	68 ea 01 00 00       	push   $0x1ea
c0107a51:	68 74 d3 10 c0       	push   $0xc010d374
c0107a56:	e8 a2 89 ff ff       	call   c01003fd <__panic>

    start = ROUNDDOWN(start, PTSIZE);
c0107a5b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107a5e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0107a61:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107a64:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0107a69:	89 45 0c             	mov    %eax,0xc(%ebp)
    do {
        int pde_idx = PDX(start);
c0107a6c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107a6f:	c1 e8 16             	shr    $0x16,%eax
c0107a72:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pgdir[pde_idx] & PTE_P) {
c0107a75:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107a78:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0107a7f:	8b 45 08             	mov    0x8(%ebp),%eax
c0107a82:	01 d0                	add    %edx,%eax
c0107a84:	8b 00                	mov    (%eax),%eax
c0107a86:	83 e0 01             	and    $0x1,%eax
c0107a89:	85 c0                	test   %eax,%eax
c0107a8b:	74 40                	je     c0107acd <exit_range+0xdc>
            free_page(pde2page(pgdir[pde_idx]));
c0107a8d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107a90:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0107a97:	8b 45 08             	mov    0x8(%ebp),%eax
c0107a9a:	01 d0                	add    %edx,%eax
c0107a9c:	8b 00                	mov    (%eax),%eax
c0107a9e:	83 ec 0c             	sub    $0xc,%esp
c0107aa1:	50                   	push   %eax
c0107aa2:	e8 db f3 ff ff       	call   c0106e82 <pde2page>
c0107aa7:	83 c4 10             	add    $0x10,%esp
c0107aaa:	83 ec 08             	sub    $0x8,%esp
c0107aad:	6a 01                	push   $0x1
c0107aaf:	50                   	push   %eax
c0107ab0:	e8 63 f6 ff ff       	call   c0107118 <free_pages>
c0107ab5:	83 c4 10             	add    $0x10,%esp
            pgdir[pde_idx] = 0;
c0107ab8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107abb:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0107ac2:	8b 45 08             	mov    0x8(%ebp),%eax
c0107ac5:	01 d0                	add    %edx,%eax
c0107ac7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        }
        start += PTSIZE;
c0107acd:	81 45 0c 00 00 40 00 	addl   $0x400000,0xc(%ebp)
    } while (start != 0 && start < end);
c0107ad4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0107ad8:	74 08                	je     c0107ae2 <exit_range+0xf1>
c0107ada:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107add:	3b 45 10             	cmp    0x10(%ebp),%eax
c0107ae0:	72 8a                	jb     c0107a6c <exit_range+0x7b>
}
c0107ae2:	90                   	nop
c0107ae3:	c9                   	leave  
c0107ae4:	c3                   	ret    

c0107ae5 <copy_range>:
 * @share: flags to indicate to dup OR share. We just use dup method, so it didn't be used.
 *
 * CALL GRAPH: copy_mm-->dup_mmap-->copy_range
 */
int
copy_range(pde_t *to, pde_t *from, uintptr_t start, uintptr_t end, bool share) {
c0107ae5:	55                   	push   %ebp
c0107ae6:	89 e5                	mov    %esp,%ebp
c0107ae8:	83 ec 38             	sub    $0x38,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0107aeb:	8b 45 10             	mov    0x10(%ebp),%eax
c0107aee:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107af3:	85 c0                	test   %eax,%eax
c0107af5:	75 0c                	jne    c0107b03 <copy_range+0x1e>
c0107af7:	8b 45 14             	mov    0x14(%ebp),%eax
c0107afa:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107aff:	85 c0                	test   %eax,%eax
c0107b01:	74 19                	je     c0107b1c <copy_range+0x37>
c0107b03:	68 d4 d3 10 c0       	push   $0xc010d3d4
c0107b08:	68 99 d3 10 c0       	push   $0xc010d399
c0107b0d:	68 ff 01 00 00       	push   $0x1ff
c0107b12:	68 74 d3 10 c0       	push   $0xc010d374
c0107b17:	e8 e1 88 ff ff       	call   c01003fd <__panic>
    assert(USER_ACCESS(start, end));
c0107b1c:	81 7d 10 ff ff 1f 00 	cmpl   $0x1fffff,0x10(%ebp)
c0107b23:	76 11                	jbe    c0107b36 <copy_range+0x51>
c0107b25:	8b 45 10             	mov    0x10(%ebp),%eax
c0107b28:	3b 45 14             	cmp    0x14(%ebp),%eax
c0107b2b:	73 09                	jae    c0107b36 <copy_range+0x51>
c0107b2d:	81 7d 14 00 00 00 b0 	cmpl   $0xb0000000,0x14(%ebp)
c0107b34:	76 19                	jbe    c0107b4f <copy_range+0x6a>
c0107b36:	68 fd d3 10 c0       	push   $0xc010d3fd
c0107b3b:	68 99 d3 10 c0       	push   $0xc010d399
c0107b40:	68 00 02 00 00       	push   $0x200
c0107b45:	68 74 d3 10 c0       	push   $0xc010d374
c0107b4a:	e8 ae 88 ff ff       	call   c01003fd <__panic>
    // copy content by page unit.
    do {
        //call get_pte to find process A's pte according to the addr start
        pte_t *ptep = get_pte(from, start, 0), *nptep;
c0107b4f:	83 ec 04             	sub    $0x4,%esp
c0107b52:	6a 00                	push   $0x0
c0107b54:	ff 75 10             	pushl  0x10(%ebp)
c0107b57:	ff 75 0c             	pushl  0xc(%ebp)
c0107b5a:	e8 b9 fb ff ff       	call   c0107718 <get_pte>
c0107b5f:	83 c4 10             	add    $0x10,%esp
c0107b62:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ptep == NULL) {
c0107b65:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107b69:	75 1b                	jne    c0107b86 <copy_range+0xa1>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
c0107b6b:	8b 45 10             	mov    0x10(%ebp),%eax
c0107b6e:	05 00 00 40 00       	add    $0x400000,%eax
c0107b73:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107b76:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107b79:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0107b7e:	89 45 10             	mov    %eax,0x10(%ebp)
            continue ;
c0107b81:	e9 21 01 00 00       	jmp    c0107ca7 <copy_range+0x1c2>
        }
        //call get_pte to find process B's pte according to the addr start. If pte is NULL, just alloc a PT
        if (*ptep & PTE_P) {
c0107b86:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107b89:	8b 00                	mov    (%eax),%eax
c0107b8b:	83 e0 01             	and    $0x1,%eax
c0107b8e:	85 c0                	test   %eax,%eax
c0107b90:	0f 84 0a 01 00 00    	je     c0107ca0 <copy_range+0x1bb>
            if ((nptep = get_pte(to, start, 1)) == NULL) {
c0107b96:	83 ec 04             	sub    $0x4,%esp
c0107b99:	6a 01                	push   $0x1
c0107b9b:	ff 75 10             	pushl  0x10(%ebp)
c0107b9e:	ff 75 08             	pushl  0x8(%ebp)
c0107ba1:	e8 72 fb ff ff       	call   c0107718 <get_pte>
c0107ba6:	83 c4 10             	add    $0x10,%esp
c0107ba9:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0107bac:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0107bb0:	75 0a                	jne    c0107bbc <copy_range+0xd7>
                return -E_NO_MEM;
c0107bb2:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0107bb7:	e9 02 01 00 00       	jmp    c0107cbe <copy_range+0x1d9>
            }
            uint32_t perm = (*ptep & PTE_USER);
c0107bbc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107bbf:	8b 00                	mov    (%eax),%eax
c0107bc1:	83 e0 07             	and    $0x7,%eax
c0107bc4:	89 45 e8             	mov    %eax,-0x18(%ebp)
            //get page from ptep
            struct Page *page = pte2page(*ptep);
c0107bc7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107bca:	8b 00                	mov    (%eax),%eax
c0107bcc:	83 ec 0c             	sub    $0xc,%esp
c0107bcf:	50                   	push   %eax
c0107bd0:	e8 73 f2 ff ff       	call   c0106e48 <pte2page>
c0107bd5:	83 c4 10             	add    $0x10,%esp
c0107bd8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            // alloc a page for process B
            struct Page *npage=alloc_page();
c0107bdb:	83 ec 0c             	sub    $0xc,%esp
c0107bde:	6a 01                	push   $0x1
c0107be0:	e8 c7 f4 ff ff       	call   c01070ac <alloc_pages>
c0107be5:	83 c4 10             	add    $0x10,%esp
c0107be8:	89 45 e0             	mov    %eax,-0x20(%ebp)
            assert(page!=NULL);
c0107beb:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0107bef:	75 19                	jne    c0107c0a <copy_range+0x125>
c0107bf1:	68 15 d4 10 c0       	push   $0xc010d415
c0107bf6:	68 99 d3 10 c0       	push   $0xc010d399
c0107bfb:	68 13 02 00 00       	push   $0x213
c0107c00:	68 74 d3 10 c0       	push   $0xc010d374
c0107c05:	e8 f3 87 ff ff       	call   c01003fd <__panic>
            assert(npage!=NULL);
c0107c0a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0107c0e:	75 19                	jne    c0107c29 <copy_range+0x144>
c0107c10:	68 20 d4 10 c0       	push   $0xc010d420
c0107c15:	68 99 d3 10 c0       	push   $0xc010d399
c0107c1a:	68 14 02 00 00       	push   $0x214
c0107c1f:	68 74 d3 10 c0       	push   $0xc010d374
c0107c24:	e8 d4 87 ff ff       	call   c01003fd <__panic>
            int ret=0;
c0107c29:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
            * (2) find dst_kvaddr: the kernel virtual address of npage
            * (3) memory copy from src_kvaddr to dst_kvaddr, size is PGSIZE
            * (4) build the map of phy addr of  nage with the linear addr start
            */
            // (1) find src_kvaddr: the kernel virtual address of page
            uintptr_t src_kvaddr = page2kva(page);
c0107c30:	83 ec 0c             	sub    $0xc,%esp
c0107c33:	ff 75 e4             	pushl  -0x1c(%ebp)
c0107c36:	e8 c8 f1 ff ff       	call   c0106e03 <page2kva>
c0107c3b:	83 c4 10             	add    $0x10,%esp
c0107c3e:	89 45 d8             	mov    %eax,-0x28(%ebp)
            // (2) find dst_kvaddr: the kernel virtual address of npage
            uintptr_t dst_kvaddr = page2kva(npage);
c0107c41:	83 ec 0c             	sub    $0xc,%esp
c0107c44:	ff 75 e0             	pushl  -0x20(%ebp)
c0107c47:	e8 b7 f1 ff ff       	call   c0106e03 <page2kva>
c0107c4c:	83 c4 10             	add    $0x10,%esp
c0107c4f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
            // (3) memory copy from src_kvaddr to dst_kvaddr, size is PGSIZE
            memcpy(dst_kvaddr, src_kvaddr, PGSIZE);
c0107c52:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0107c55:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0107c58:	83 ec 04             	sub    $0x4,%esp
c0107c5b:	68 00 10 00 00       	push   $0x1000
c0107c60:	52                   	push   %edx
c0107c61:	50                   	push   %eax
c0107c62:	e8 9a 35 00 00       	call   c010b201 <memcpy>
c0107c67:	83 c4 10             	add    $0x10,%esp
            // (4) build the map of phy addr of  nage with the linear addr start
            ret = page_insert(to, npage, start, perm);
c0107c6a:	ff 75 e8             	pushl  -0x18(%ebp)
c0107c6d:	ff 75 10             	pushl  0x10(%ebp)
c0107c70:	ff 75 e0             	pushl  -0x20(%ebp)
c0107c73:	ff 75 08             	pushl  0x8(%ebp)
c0107c76:	e8 7e 00 00 00       	call   c0107cf9 <page_insert>
c0107c7b:	83 c4 10             	add    $0x10,%esp
c0107c7e:	89 45 dc             	mov    %eax,-0x24(%ebp)
            assert(ret == 0);
c0107c81:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0107c85:	74 19                	je     c0107ca0 <copy_range+0x1bb>
c0107c87:	68 2c d4 10 c0       	push   $0xc010d42c
c0107c8c:	68 99 d3 10 c0       	push   $0xc010d399
c0107c91:	68 2c 02 00 00       	push   $0x22c
c0107c96:	68 74 d3 10 c0       	push   $0xc010d374
c0107c9b:	e8 5d 87 ff ff       	call   c01003fd <__panic>
        }
        start += PGSIZE;
c0107ca0:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    } while (start != 0 && start < end);
c0107ca7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0107cab:	74 0c                	je     c0107cb9 <copy_range+0x1d4>
c0107cad:	8b 45 10             	mov    0x10(%ebp),%eax
c0107cb0:	3b 45 14             	cmp    0x14(%ebp),%eax
c0107cb3:	0f 82 96 fe ff ff    	jb     c0107b4f <copy_range+0x6a>
    return 0;
c0107cb9:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107cbe:	c9                   	leave  
c0107cbf:	c3                   	ret    

c0107cc0 <page_remove>:

//page_remove - free an Page which is related linear address la and has an validated pte
void
page_remove(pde_t *pgdir, uintptr_t la) {
c0107cc0:	55                   	push   %ebp
c0107cc1:	89 e5                	mov    %esp,%ebp
c0107cc3:	83 ec 18             	sub    $0x18,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c0107cc6:	83 ec 04             	sub    $0x4,%esp
c0107cc9:	6a 00                	push   $0x0
c0107ccb:	ff 75 0c             	pushl  0xc(%ebp)
c0107cce:	ff 75 08             	pushl  0x8(%ebp)
c0107cd1:	e8 42 fa ff ff       	call   c0107718 <get_pte>
c0107cd6:	83 c4 10             	add    $0x10,%esp
c0107cd9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep != NULL) {
c0107cdc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107ce0:	74 14                	je     c0107cf6 <page_remove+0x36>
        page_remove_pte(pgdir, la, ptep);
c0107ce2:	83 ec 04             	sub    $0x4,%esp
c0107ce5:	ff 75 f4             	pushl  -0xc(%ebp)
c0107ce8:	ff 75 0c             	pushl  0xc(%ebp)
c0107ceb:	ff 75 08             	pushl  0x8(%ebp)
c0107cee:	e8 bf fb ff ff       	call   c01078b2 <page_remove_pte>
c0107cf3:	83 c4 10             	add    $0x10,%esp
    }
}
c0107cf6:	90                   	nop
c0107cf7:	c9                   	leave  
c0107cf8:	c3                   	ret    

c0107cf9 <page_insert>:
//  la:    the linear address need to map
//  perm:  the permission of this Page which is setted in related pte
// return value: always 0
//note: PT is changed, so the TLB need to be invalidate 
int
page_insert(pde_t *pgdir, struct Page *page, uintptr_t la, uint32_t perm) {
c0107cf9:	55                   	push   %ebp
c0107cfa:	89 e5                	mov    %esp,%ebp
c0107cfc:	83 ec 18             	sub    $0x18,%esp
    pte_t *ptep = get_pte(pgdir, la, 1);
c0107cff:	83 ec 04             	sub    $0x4,%esp
c0107d02:	6a 01                	push   $0x1
c0107d04:	ff 75 10             	pushl  0x10(%ebp)
c0107d07:	ff 75 08             	pushl  0x8(%ebp)
c0107d0a:	e8 09 fa ff ff       	call   c0107718 <get_pte>
c0107d0f:	83 c4 10             	add    $0x10,%esp
c0107d12:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep == NULL) {
c0107d15:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107d19:	75 0a                	jne    c0107d25 <page_insert+0x2c>
        return -E_NO_MEM;
c0107d1b:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0107d20:	e9 8b 00 00 00       	jmp    c0107db0 <page_insert+0xb7>
    }
    page_ref_inc(page);
c0107d25:	83 ec 0c             	sub    $0xc,%esp
c0107d28:	ff 75 0c             	pushl  0xc(%ebp)
c0107d2b:	e8 86 f1 ff ff       	call   c0106eb6 <page_ref_inc>
c0107d30:	83 c4 10             	add    $0x10,%esp
    if (*ptep & PTE_P) {
c0107d33:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107d36:	8b 00                	mov    (%eax),%eax
c0107d38:	83 e0 01             	and    $0x1,%eax
c0107d3b:	85 c0                	test   %eax,%eax
c0107d3d:	74 40                	je     c0107d7f <page_insert+0x86>
        struct Page *p = pte2page(*ptep);
c0107d3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107d42:	8b 00                	mov    (%eax),%eax
c0107d44:	83 ec 0c             	sub    $0xc,%esp
c0107d47:	50                   	push   %eax
c0107d48:	e8 fb f0 ff ff       	call   c0106e48 <pte2page>
c0107d4d:	83 c4 10             	add    $0x10,%esp
c0107d50:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (p == page) {
c0107d53:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107d56:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0107d59:	75 10                	jne    c0107d6b <page_insert+0x72>
            page_ref_dec(page);
c0107d5b:	83 ec 0c             	sub    $0xc,%esp
c0107d5e:	ff 75 0c             	pushl  0xc(%ebp)
c0107d61:	e8 67 f1 ff ff       	call   c0106ecd <page_ref_dec>
c0107d66:	83 c4 10             	add    $0x10,%esp
c0107d69:	eb 14                	jmp    c0107d7f <page_insert+0x86>
        }
        else {
            page_remove_pte(pgdir, la, ptep);
c0107d6b:	83 ec 04             	sub    $0x4,%esp
c0107d6e:	ff 75 f4             	pushl  -0xc(%ebp)
c0107d71:	ff 75 10             	pushl  0x10(%ebp)
c0107d74:	ff 75 08             	pushl  0x8(%ebp)
c0107d77:	e8 36 fb ff ff       	call   c01078b2 <page_remove_pte>
c0107d7c:	83 c4 10             	add    $0x10,%esp
        }
    }
    *ptep = page2pa(page) | PTE_P | perm;
c0107d7f:	83 ec 0c             	sub    $0xc,%esp
c0107d82:	ff 75 0c             	pushl  0xc(%ebp)
c0107d85:	e8 29 f0 ff ff       	call   c0106db3 <page2pa>
c0107d8a:	83 c4 10             	add    $0x10,%esp
c0107d8d:	0b 45 14             	or     0x14(%ebp),%eax
c0107d90:	83 c8 01             	or     $0x1,%eax
c0107d93:	89 c2                	mov    %eax,%edx
c0107d95:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107d98:	89 10                	mov    %edx,(%eax)
    tlb_invalidate(pgdir, la);
c0107d9a:	83 ec 08             	sub    $0x8,%esp
c0107d9d:	ff 75 10             	pushl  0x10(%ebp)
c0107da0:	ff 75 08             	pushl  0x8(%ebp)
c0107da3:	e8 0a 00 00 00       	call   c0107db2 <tlb_invalidate>
c0107da8:	83 c4 10             	add    $0x10,%esp
    return 0;
c0107dab:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107db0:	c9                   	leave  
c0107db1:	c3                   	ret    

c0107db2 <tlb_invalidate>:

// invalidate a TLB entry, but only if the page tables being
// edited are the ones currently in use by the processor.
void
tlb_invalidate(pde_t *pgdir, uintptr_t la) {
c0107db2:	55                   	push   %ebp
c0107db3:	89 e5                	mov    %esp,%ebp
c0107db5:	83 ec 18             	sub    $0x18,%esp
}

static inline uintptr_t
rcr3(void) {
    uintptr_t cr3;
    asm volatile ("mov %%cr3, %0" : "=r" (cr3) :: "memory");
c0107db8:	0f 20 d8             	mov    %cr3,%eax
c0107dbb:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return cr3;
c0107dbe:	8b 55 ec             	mov    -0x14(%ebp),%edx
    if (rcr3() == PADDR(pgdir)) {
c0107dc1:	8b 45 08             	mov    0x8(%ebp),%eax
c0107dc4:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107dc7:	81 7d f0 ff ff ff bf 	cmpl   $0xbfffffff,-0x10(%ebp)
c0107dce:	77 17                	ja     c0107de7 <tlb_invalidate+0x35>
c0107dd0:	ff 75 f0             	pushl  -0x10(%ebp)
c0107dd3:	68 50 d3 10 c0       	push   $0xc010d350
c0107dd8:	68 5d 02 00 00       	push   $0x25d
c0107ddd:	68 74 d3 10 c0       	push   $0xc010d374
c0107de2:	e8 16 86 ff ff       	call   c01003fd <__panic>
c0107de7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107dea:	05 00 00 00 40       	add    $0x40000000,%eax
c0107def:	39 c2                	cmp    %eax,%edx
c0107df1:	75 0c                	jne    c0107dff <tlb_invalidate+0x4d>
        invlpg((void *)la);
c0107df3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107df6:	89 45 f4             	mov    %eax,-0xc(%ebp)
}

static inline void
invlpg(void *addr) {
    asm volatile ("invlpg (%0)" :: "r" (addr) : "memory");
c0107df9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107dfc:	0f 01 38             	invlpg (%eax)
    }
}
c0107dff:	90                   	nop
c0107e00:	c9                   	leave  
c0107e01:	c3                   	ret    

c0107e02 <pgdir_alloc_page>:

// pgdir_alloc_page - call alloc_page & page_insert functions to 
//                  - allocate a page size memory & setup an addr map
//                  - pa<->la with linear address la and the PDT pgdir
struct Page *
pgdir_alloc_page(pde_t *pgdir, uintptr_t la, uint32_t perm) {
c0107e02:	55                   	push   %ebp
c0107e03:	89 e5                	mov    %esp,%ebp
c0107e05:	83 ec 18             	sub    $0x18,%esp
    struct Page *page = alloc_page();
c0107e08:	83 ec 0c             	sub    $0xc,%esp
c0107e0b:	6a 01                	push   $0x1
c0107e0d:	e8 9a f2 ff ff       	call   c01070ac <alloc_pages>
c0107e12:	83 c4 10             	add    $0x10,%esp
c0107e15:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c0107e18:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107e1c:	0f 84 8c 00 00 00    	je     c0107eae <pgdir_alloc_page+0xac>
        if (page_insert(pgdir, page, la, perm) != 0) {
c0107e22:	ff 75 10             	pushl  0x10(%ebp)
c0107e25:	ff 75 0c             	pushl  0xc(%ebp)
c0107e28:	ff 75 f4             	pushl  -0xc(%ebp)
c0107e2b:	ff 75 08             	pushl  0x8(%ebp)
c0107e2e:	e8 c6 fe ff ff       	call   c0107cf9 <page_insert>
c0107e33:	83 c4 10             	add    $0x10,%esp
c0107e36:	85 c0                	test   %eax,%eax
c0107e38:	74 17                	je     c0107e51 <pgdir_alloc_page+0x4f>
            free_page(page);
c0107e3a:	83 ec 08             	sub    $0x8,%esp
c0107e3d:	6a 01                	push   $0x1
c0107e3f:	ff 75 f4             	pushl  -0xc(%ebp)
c0107e42:	e8 d1 f2 ff ff       	call   c0107118 <free_pages>
c0107e47:	83 c4 10             	add    $0x10,%esp
            return NULL;
c0107e4a:	b8 00 00 00 00       	mov    $0x0,%eax
c0107e4f:	eb 60                	jmp    c0107eb1 <pgdir_alloc_page+0xaf>
        }
        if (swap_init_ok){
c0107e51:	a1 6c 0f 1b c0       	mov    0xc01b0f6c,%eax
c0107e56:	85 c0                	test   %eax,%eax
c0107e58:	74 54                	je     c0107eae <pgdir_alloc_page+0xac>
            if(check_mm_struct!=NULL) {
c0107e5a:	a1 d0 30 1b c0       	mov    0xc01b30d0,%eax
c0107e5f:	85 c0                	test   %eax,%eax
c0107e61:	74 4b                	je     c0107eae <pgdir_alloc_page+0xac>
                swap_map_swappable(check_mm_struct, la, page, 0);
c0107e63:	a1 d0 30 1b c0       	mov    0xc01b30d0,%eax
c0107e68:	6a 00                	push   $0x0
c0107e6a:	ff 75 f4             	pushl  -0xc(%ebp)
c0107e6d:	ff 75 0c             	pushl  0xc(%ebp)
c0107e70:	50                   	push   %eax
c0107e71:	e8 be d5 ff ff       	call   c0105434 <swap_map_swappable>
c0107e76:	83 c4 10             	add    $0x10,%esp
                page->pra_vaddr=la;
c0107e79:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107e7c:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107e7f:	89 50 1c             	mov    %edx,0x1c(%eax)
                assert(page_ref(page) == 1);
c0107e82:	83 ec 0c             	sub    $0xc,%esp
c0107e85:	ff 75 f4             	pushl  -0xc(%ebp)
c0107e88:	e8 11 f0 ff ff       	call   c0106e9e <page_ref>
c0107e8d:	83 c4 10             	add    $0x10,%esp
c0107e90:	83 f8 01             	cmp    $0x1,%eax
c0107e93:	74 19                	je     c0107eae <pgdir_alloc_page+0xac>
c0107e95:	68 35 d4 10 c0       	push   $0xc010d435
c0107e9a:	68 99 d3 10 c0       	push   $0xc010d399
c0107e9f:	68 71 02 00 00       	push   $0x271
c0107ea4:	68 74 d3 10 c0       	push   $0xc010d374
c0107ea9:	e8 4f 85 ff ff       	call   c01003fd <__panic>
            }
        }

    }

    return page;
c0107eae:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0107eb1:	c9                   	leave  
c0107eb2:	c3                   	ret    

c0107eb3 <check_alloc_page>:

static void
check_alloc_page(void) {
c0107eb3:	55                   	push   %ebp
c0107eb4:	89 e5                	mov    %esp,%ebp
c0107eb6:	83 ec 08             	sub    $0x8,%esp
    pmm_manager->check();
c0107eb9:	a1 b0 31 1b c0       	mov    0xc01b31b0,%eax
c0107ebe:	8b 40 18             	mov    0x18(%eax),%eax
c0107ec1:	ff d0                	call   *%eax
    cprintf("check_alloc_page() succeeded!\n");
c0107ec3:	83 ec 0c             	sub    $0xc,%esp
c0107ec6:	68 4c d4 10 c0       	push   $0xc010d44c
c0107ecb:	e8 c7 83 ff ff       	call   c0100297 <cprintf>
c0107ed0:	83 c4 10             	add    $0x10,%esp
}
c0107ed3:	90                   	nop
c0107ed4:	c9                   	leave  
c0107ed5:	c3                   	ret    

c0107ed6 <check_pgdir>:

static void
check_pgdir(void) {
c0107ed6:	55                   	push   %ebp
c0107ed7:	89 e5                	mov    %esp,%ebp
c0107ed9:	83 ec 28             	sub    $0x28,%esp
    assert(npage <= KMEMSIZE / PGSIZE);
c0107edc:	a1 80 0f 1b c0       	mov    0xc01b0f80,%eax
c0107ee1:	3d 00 80 03 00       	cmp    $0x38000,%eax
c0107ee6:	76 19                	jbe    c0107f01 <check_pgdir+0x2b>
c0107ee8:	68 6b d4 10 c0       	push   $0xc010d46b
c0107eed:	68 99 d3 10 c0       	push   $0xc010d399
c0107ef2:	68 89 02 00 00       	push   $0x289
c0107ef7:	68 74 d3 10 c0       	push   $0xc010d374
c0107efc:	e8 fc 84 ff ff       	call   c01003fd <__panic>
    assert(boot_pgdir != NULL && (uint32_t)PGOFF(boot_pgdir) == 0);
c0107f01:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c0107f06:	85 c0                	test   %eax,%eax
c0107f08:	74 0e                	je     c0107f18 <check_pgdir+0x42>
c0107f0a:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c0107f0f:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107f14:	85 c0                	test   %eax,%eax
c0107f16:	74 19                	je     c0107f31 <check_pgdir+0x5b>
c0107f18:	68 88 d4 10 c0       	push   $0xc010d488
c0107f1d:	68 99 d3 10 c0       	push   $0xc010d399
c0107f22:	68 8a 02 00 00       	push   $0x28a
c0107f27:	68 74 d3 10 c0       	push   $0xc010d374
c0107f2c:	e8 cc 84 ff ff       	call   c01003fd <__panic>
    assert(get_page(boot_pgdir, 0x0, NULL) == NULL);
c0107f31:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c0107f36:	83 ec 04             	sub    $0x4,%esp
c0107f39:	6a 00                	push   $0x0
c0107f3b:	6a 00                	push   $0x0
c0107f3d:	50                   	push   %eax
c0107f3e:	e8 19 f9 ff ff       	call   c010785c <get_page>
c0107f43:	83 c4 10             	add    $0x10,%esp
c0107f46:	85 c0                	test   %eax,%eax
c0107f48:	74 19                	je     c0107f63 <check_pgdir+0x8d>
c0107f4a:	68 c0 d4 10 c0       	push   $0xc010d4c0
c0107f4f:	68 99 d3 10 c0       	push   $0xc010d399
c0107f54:	68 8b 02 00 00       	push   $0x28b
c0107f59:	68 74 d3 10 c0       	push   $0xc010d374
c0107f5e:	e8 9a 84 ff ff       	call   c01003fd <__panic>

    struct Page *p1, *p2;
    p1 = alloc_page();
c0107f63:	83 ec 0c             	sub    $0xc,%esp
c0107f66:	6a 01                	push   $0x1
c0107f68:	e8 3f f1 ff ff       	call   c01070ac <alloc_pages>
c0107f6d:	83 c4 10             	add    $0x10,%esp
c0107f70:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(page_insert(boot_pgdir, p1, 0x0, 0) == 0);
c0107f73:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c0107f78:	6a 00                	push   $0x0
c0107f7a:	6a 00                	push   $0x0
c0107f7c:	ff 75 f4             	pushl  -0xc(%ebp)
c0107f7f:	50                   	push   %eax
c0107f80:	e8 74 fd ff ff       	call   c0107cf9 <page_insert>
c0107f85:	83 c4 10             	add    $0x10,%esp
c0107f88:	85 c0                	test   %eax,%eax
c0107f8a:	74 19                	je     c0107fa5 <check_pgdir+0xcf>
c0107f8c:	68 e8 d4 10 c0       	push   $0xc010d4e8
c0107f91:	68 99 d3 10 c0       	push   $0xc010d399
c0107f96:	68 8f 02 00 00       	push   $0x28f
c0107f9b:	68 74 d3 10 c0       	push   $0xc010d374
c0107fa0:	e8 58 84 ff ff       	call   c01003fd <__panic>

    pte_t *ptep;
    assert((ptep = get_pte(boot_pgdir, 0x0, 0)) != NULL);
c0107fa5:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c0107faa:	83 ec 04             	sub    $0x4,%esp
c0107fad:	6a 00                	push   $0x0
c0107faf:	6a 00                	push   $0x0
c0107fb1:	50                   	push   %eax
c0107fb2:	e8 61 f7 ff ff       	call   c0107718 <get_pte>
c0107fb7:	83 c4 10             	add    $0x10,%esp
c0107fba:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107fbd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0107fc1:	75 19                	jne    c0107fdc <check_pgdir+0x106>
c0107fc3:	68 14 d5 10 c0       	push   $0xc010d514
c0107fc8:	68 99 d3 10 c0       	push   $0xc010d399
c0107fcd:	68 92 02 00 00       	push   $0x292
c0107fd2:	68 74 d3 10 c0       	push   $0xc010d374
c0107fd7:	e8 21 84 ff ff       	call   c01003fd <__panic>
    assert(pte2page(*ptep) == p1);
c0107fdc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107fdf:	8b 00                	mov    (%eax),%eax
c0107fe1:	83 ec 0c             	sub    $0xc,%esp
c0107fe4:	50                   	push   %eax
c0107fe5:	e8 5e ee ff ff       	call   c0106e48 <pte2page>
c0107fea:	83 c4 10             	add    $0x10,%esp
c0107fed:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0107ff0:	74 19                	je     c010800b <check_pgdir+0x135>
c0107ff2:	68 41 d5 10 c0       	push   $0xc010d541
c0107ff7:	68 99 d3 10 c0       	push   $0xc010d399
c0107ffc:	68 93 02 00 00       	push   $0x293
c0108001:	68 74 d3 10 c0       	push   $0xc010d374
c0108006:	e8 f2 83 ff ff       	call   c01003fd <__panic>
    assert(page_ref(p1) == 1);
c010800b:	83 ec 0c             	sub    $0xc,%esp
c010800e:	ff 75 f4             	pushl  -0xc(%ebp)
c0108011:	e8 88 ee ff ff       	call   c0106e9e <page_ref>
c0108016:	83 c4 10             	add    $0x10,%esp
c0108019:	83 f8 01             	cmp    $0x1,%eax
c010801c:	74 19                	je     c0108037 <check_pgdir+0x161>
c010801e:	68 57 d5 10 c0       	push   $0xc010d557
c0108023:	68 99 d3 10 c0       	push   $0xc010d399
c0108028:	68 94 02 00 00       	push   $0x294
c010802d:	68 74 d3 10 c0       	push   $0xc010d374
c0108032:	e8 c6 83 ff ff       	call   c01003fd <__panic>

    ptep = &((pte_t *)KADDR(PDE_ADDR(boot_pgdir[0])))[1];
c0108037:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c010803c:	8b 00                	mov    (%eax),%eax
c010803e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0108043:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0108046:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108049:	c1 e8 0c             	shr    $0xc,%eax
c010804c:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010804f:	a1 80 0f 1b c0       	mov    0xc01b0f80,%eax
c0108054:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c0108057:	72 17                	jb     c0108070 <check_pgdir+0x19a>
c0108059:	ff 75 ec             	pushl  -0x14(%ebp)
c010805c:	68 ac d2 10 c0       	push   $0xc010d2ac
c0108061:	68 96 02 00 00       	push   $0x296
c0108066:	68 74 d3 10 c0       	push   $0xc010d374
c010806b:	e8 8d 83 ff ff       	call   c01003fd <__panic>
c0108070:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108073:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0108078:	83 c0 04             	add    $0x4,%eax
c010807b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    assert(get_pte(boot_pgdir, PGSIZE, 0) == ptep);
c010807e:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c0108083:	83 ec 04             	sub    $0x4,%esp
c0108086:	6a 00                	push   $0x0
c0108088:	68 00 10 00 00       	push   $0x1000
c010808d:	50                   	push   %eax
c010808e:	e8 85 f6 ff ff       	call   c0107718 <get_pte>
c0108093:	83 c4 10             	add    $0x10,%esp
c0108096:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0108099:	74 19                	je     c01080b4 <check_pgdir+0x1de>
c010809b:	68 6c d5 10 c0       	push   $0xc010d56c
c01080a0:	68 99 d3 10 c0       	push   $0xc010d399
c01080a5:	68 97 02 00 00       	push   $0x297
c01080aa:	68 74 d3 10 c0       	push   $0xc010d374
c01080af:	e8 49 83 ff ff       	call   c01003fd <__panic>

    p2 = alloc_page();
c01080b4:	83 ec 0c             	sub    $0xc,%esp
c01080b7:	6a 01                	push   $0x1
c01080b9:	e8 ee ef ff ff       	call   c01070ac <alloc_pages>
c01080be:	83 c4 10             	add    $0x10,%esp
c01080c1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(page_insert(boot_pgdir, p2, PGSIZE, PTE_U | PTE_W) == 0);
c01080c4:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c01080c9:	6a 06                	push   $0x6
c01080cb:	68 00 10 00 00       	push   $0x1000
c01080d0:	ff 75 e4             	pushl  -0x1c(%ebp)
c01080d3:	50                   	push   %eax
c01080d4:	e8 20 fc ff ff       	call   c0107cf9 <page_insert>
c01080d9:	83 c4 10             	add    $0x10,%esp
c01080dc:	85 c0                	test   %eax,%eax
c01080de:	74 19                	je     c01080f9 <check_pgdir+0x223>
c01080e0:	68 94 d5 10 c0       	push   $0xc010d594
c01080e5:	68 99 d3 10 c0       	push   $0xc010d399
c01080ea:	68 9a 02 00 00       	push   $0x29a
c01080ef:	68 74 d3 10 c0       	push   $0xc010d374
c01080f4:	e8 04 83 ff ff       	call   c01003fd <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c01080f9:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c01080fe:	83 ec 04             	sub    $0x4,%esp
c0108101:	6a 00                	push   $0x0
c0108103:	68 00 10 00 00       	push   $0x1000
c0108108:	50                   	push   %eax
c0108109:	e8 0a f6 ff ff       	call   c0107718 <get_pte>
c010810e:	83 c4 10             	add    $0x10,%esp
c0108111:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108114:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0108118:	75 19                	jne    c0108133 <check_pgdir+0x25d>
c010811a:	68 cc d5 10 c0       	push   $0xc010d5cc
c010811f:	68 99 d3 10 c0       	push   $0xc010d399
c0108124:	68 9b 02 00 00       	push   $0x29b
c0108129:	68 74 d3 10 c0       	push   $0xc010d374
c010812e:	e8 ca 82 ff ff       	call   c01003fd <__panic>
    assert(*ptep & PTE_U);
c0108133:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108136:	8b 00                	mov    (%eax),%eax
c0108138:	83 e0 04             	and    $0x4,%eax
c010813b:	85 c0                	test   %eax,%eax
c010813d:	75 19                	jne    c0108158 <check_pgdir+0x282>
c010813f:	68 fc d5 10 c0       	push   $0xc010d5fc
c0108144:	68 99 d3 10 c0       	push   $0xc010d399
c0108149:	68 9c 02 00 00       	push   $0x29c
c010814e:	68 74 d3 10 c0       	push   $0xc010d374
c0108153:	e8 a5 82 ff ff       	call   c01003fd <__panic>
    assert(*ptep & PTE_W);
c0108158:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010815b:	8b 00                	mov    (%eax),%eax
c010815d:	83 e0 02             	and    $0x2,%eax
c0108160:	85 c0                	test   %eax,%eax
c0108162:	75 19                	jne    c010817d <check_pgdir+0x2a7>
c0108164:	68 0a d6 10 c0       	push   $0xc010d60a
c0108169:	68 99 d3 10 c0       	push   $0xc010d399
c010816e:	68 9d 02 00 00       	push   $0x29d
c0108173:	68 74 d3 10 c0       	push   $0xc010d374
c0108178:	e8 80 82 ff ff       	call   c01003fd <__panic>
    assert(boot_pgdir[0] & PTE_U);
c010817d:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c0108182:	8b 00                	mov    (%eax),%eax
c0108184:	83 e0 04             	and    $0x4,%eax
c0108187:	85 c0                	test   %eax,%eax
c0108189:	75 19                	jne    c01081a4 <check_pgdir+0x2ce>
c010818b:	68 18 d6 10 c0       	push   $0xc010d618
c0108190:	68 99 d3 10 c0       	push   $0xc010d399
c0108195:	68 9e 02 00 00       	push   $0x29e
c010819a:	68 74 d3 10 c0       	push   $0xc010d374
c010819f:	e8 59 82 ff ff       	call   c01003fd <__panic>
    assert(page_ref(p2) == 1);
c01081a4:	83 ec 0c             	sub    $0xc,%esp
c01081a7:	ff 75 e4             	pushl  -0x1c(%ebp)
c01081aa:	e8 ef ec ff ff       	call   c0106e9e <page_ref>
c01081af:	83 c4 10             	add    $0x10,%esp
c01081b2:	83 f8 01             	cmp    $0x1,%eax
c01081b5:	74 19                	je     c01081d0 <check_pgdir+0x2fa>
c01081b7:	68 2e d6 10 c0       	push   $0xc010d62e
c01081bc:	68 99 d3 10 c0       	push   $0xc010d399
c01081c1:	68 9f 02 00 00       	push   $0x29f
c01081c6:	68 74 d3 10 c0       	push   $0xc010d374
c01081cb:	e8 2d 82 ff ff       	call   c01003fd <__panic>

    assert(page_insert(boot_pgdir, p1, PGSIZE, 0) == 0);
c01081d0:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c01081d5:	6a 00                	push   $0x0
c01081d7:	68 00 10 00 00       	push   $0x1000
c01081dc:	ff 75 f4             	pushl  -0xc(%ebp)
c01081df:	50                   	push   %eax
c01081e0:	e8 14 fb ff ff       	call   c0107cf9 <page_insert>
c01081e5:	83 c4 10             	add    $0x10,%esp
c01081e8:	85 c0                	test   %eax,%eax
c01081ea:	74 19                	je     c0108205 <check_pgdir+0x32f>
c01081ec:	68 40 d6 10 c0       	push   $0xc010d640
c01081f1:	68 99 d3 10 c0       	push   $0xc010d399
c01081f6:	68 a1 02 00 00       	push   $0x2a1
c01081fb:	68 74 d3 10 c0       	push   $0xc010d374
c0108200:	e8 f8 81 ff ff       	call   c01003fd <__panic>
    assert(page_ref(p1) == 2);
c0108205:	83 ec 0c             	sub    $0xc,%esp
c0108208:	ff 75 f4             	pushl  -0xc(%ebp)
c010820b:	e8 8e ec ff ff       	call   c0106e9e <page_ref>
c0108210:	83 c4 10             	add    $0x10,%esp
c0108213:	83 f8 02             	cmp    $0x2,%eax
c0108216:	74 19                	je     c0108231 <check_pgdir+0x35b>
c0108218:	68 6c d6 10 c0       	push   $0xc010d66c
c010821d:	68 99 d3 10 c0       	push   $0xc010d399
c0108222:	68 a2 02 00 00       	push   $0x2a2
c0108227:	68 74 d3 10 c0       	push   $0xc010d374
c010822c:	e8 cc 81 ff ff       	call   c01003fd <__panic>
    assert(page_ref(p2) == 0);
c0108231:	83 ec 0c             	sub    $0xc,%esp
c0108234:	ff 75 e4             	pushl  -0x1c(%ebp)
c0108237:	e8 62 ec ff ff       	call   c0106e9e <page_ref>
c010823c:	83 c4 10             	add    $0x10,%esp
c010823f:	85 c0                	test   %eax,%eax
c0108241:	74 19                	je     c010825c <check_pgdir+0x386>
c0108243:	68 7e d6 10 c0       	push   $0xc010d67e
c0108248:	68 99 d3 10 c0       	push   $0xc010d399
c010824d:	68 a3 02 00 00       	push   $0x2a3
c0108252:	68 74 d3 10 c0       	push   $0xc010d374
c0108257:	e8 a1 81 ff ff       	call   c01003fd <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c010825c:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c0108261:	83 ec 04             	sub    $0x4,%esp
c0108264:	6a 00                	push   $0x0
c0108266:	68 00 10 00 00       	push   $0x1000
c010826b:	50                   	push   %eax
c010826c:	e8 a7 f4 ff ff       	call   c0107718 <get_pte>
c0108271:	83 c4 10             	add    $0x10,%esp
c0108274:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108277:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010827b:	75 19                	jne    c0108296 <check_pgdir+0x3c0>
c010827d:	68 cc d5 10 c0       	push   $0xc010d5cc
c0108282:	68 99 d3 10 c0       	push   $0xc010d399
c0108287:	68 a4 02 00 00       	push   $0x2a4
c010828c:	68 74 d3 10 c0       	push   $0xc010d374
c0108291:	e8 67 81 ff ff       	call   c01003fd <__panic>
    assert(pte2page(*ptep) == p1);
c0108296:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108299:	8b 00                	mov    (%eax),%eax
c010829b:	83 ec 0c             	sub    $0xc,%esp
c010829e:	50                   	push   %eax
c010829f:	e8 a4 eb ff ff       	call   c0106e48 <pte2page>
c01082a4:	83 c4 10             	add    $0x10,%esp
c01082a7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01082aa:	74 19                	je     c01082c5 <check_pgdir+0x3ef>
c01082ac:	68 41 d5 10 c0       	push   $0xc010d541
c01082b1:	68 99 d3 10 c0       	push   $0xc010d399
c01082b6:	68 a5 02 00 00       	push   $0x2a5
c01082bb:	68 74 d3 10 c0       	push   $0xc010d374
c01082c0:	e8 38 81 ff ff       	call   c01003fd <__panic>
    assert((*ptep & PTE_U) == 0);
c01082c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01082c8:	8b 00                	mov    (%eax),%eax
c01082ca:	83 e0 04             	and    $0x4,%eax
c01082cd:	85 c0                	test   %eax,%eax
c01082cf:	74 19                	je     c01082ea <check_pgdir+0x414>
c01082d1:	68 90 d6 10 c0       	push   $0xc010d690
c01082d6:	68 99 d3 10 c0       	push   $0xc010d399
c01082db:	68 a6 02 00 00       	push   $0x2a6
c01082e0:	68 74 d3 10 c0       	push   $0xc010d374
c01082e5:	e8 13 81 ff ff       	call   c01003fd <__panic>

    page_remove(boot_pgdir, 0x0);
c01082ea:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c01082ef:	83 ec 08             	sub    $0x8,%esp
c01082f2:	6a 00                	push   $0x0
c01082f4:	50                   	push   %eax
c01082f5:	e8 c6 f9 ff ff       	call   c0107cc0 <page_remove>
c01082fa:	83 c4 10             	add    $0x10,%esp
    assert(page_ref(p1) == 1);
c01082fd:	83 ec 0c             	sub    $0xc,%esp
c0108300:	ff 75 f4             	pushl  -0xc(%ebp)
c0108303:	e8 96 eb ff ff       	call   c0106e9e <page_ref>
c0108308:	83 c4 10             	add    $0x10,%esp
c010830b:	83 f8 01             	cmp    $0x1,%eax
c010830e:	74 19                	je     c0108329 <check_pgdir+0x453>
c0108310:	68 57 d5 10 c0       	push   $0xc010d557
c0108315:	68 99 d3 10 c0       	push   $0xc010d399
c010831a:	68 a9 02 00 00       	push   $0x2a9
c010831f:	68 74 d3 10 c0       	push   $0xc010d374
c0108324:	e8 d4 80 ff ff       	call   c01003fd <__panic>
    assert(page_ref(p2) == 0);
c0108329:	83 ec 0c             	sub    $0xc,%esp
c010832c:	ff 75 e4             	pushl  -0x1c(%ebp)
c010832f:	e8 6a eb ff ff       	call   c0106e9e <page_ref>
c0108334:	83 c4 10             	add    $0x10,%esp
c0108337:	85 c0                	test   %eax,%eax
c0108339:	74 19                	je     c0108354 <check_pgdir+0x47e>
c010833b:	68 7e d6 10 c0       	push   $0xc010d67e
c0108340:	68 99 d3 10 c0       	push   $0xc010d399
c0108345:	68 aa 02 00 00       	push   $0x2aa
c010834a:	68 74 d3 10 c0       	push   $0xc010d374
c010834f:	e8 a9 80 ff ff       	call   c01003fd <__panic>

    page_remove(boot_pgdir, PGSIZE);
c0108354:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c0108359:	83 ec 08             	sub    $0x8,%esp
c010835c:	68 00 10 00 00       	push   $0x1000
c0108361:	50                   	push   %eax
c0108362:	e8 59 f9 ff ff       	call   c0107cc0 <page_remove>
c0108367:	83 c4 10             	add    $0x10,%esp
    assert(page_ref(p1) == 0);
c010836a:	83 ec 0c             	sub    $0xc,%esp
c010836d:	ff 75 f4             	pushl  -0xc(%ebp)
c0108370:	e8 29 eb ff ff       	call   c0106e9e <page_ref>
c0108375:	83 c4 10             	add    $0x10,%esp
c0108378:	85 c0                	test   %eax,%eax
c010837a:	74 19                	je     c0108395 <check_pgdir+0x4bf>
c010837c:	68 a5 d6 10 c0       	push   $0xc010d6a5
c0108381:	68 99 d3 10 c0       	push   $0xc010d399
c0108386:	68 ad 02 00 00       	push   $0x2ad
c010838b:	68 74 d3 10 c0       	push   $0xc010d374
c0108390:	e8 68 80 ff ff       	call   c01003fd <__panic>
    assert(page_ref(p2) == 0);
c0108395:	83 ec 0c             	sub    $0xc,%esp
c0108398:	ff 75 e4             	pushl  -0x1c(%ebp)
c010839b:	e8 fe ea ff ff       	call   c0106e9e <page_ref>
c01083a0:	83 c4 10             	add    $0x10,%esp
c01083a3:	85 c0                	test   %eax,%eax
c01083a5:	74 19                	je     c01083c0 <check_pgdir+0x4ea>
c01083a7:	68 7e d6 10 c0       	push   $0xc010d67e
c01083ac:	68 99 d3 10 c0       	push   $0xc010d399
c01083b1:	68 ae 02 00 00       	push   $0x2ae
c01083b6:	68 74 d3 10 c0       	push   $0xc010d374
c01083bb:	e8 3d 80 ff ff       	call   c01003fd <__panic>

    assert(page_ref(pde2page(boot_pgdir[0])) == 1);
c01083c0:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c01083c5:	8b 00                	mov    (%eax),%eax
c01083c7:	83 ec 0c             	sub    $0xc,%esp
c01083ca:	50                   	push   %eax
c01083cb:	e8 b2 ea ff ff       	call   c0106e82 <pde2page>
c01083d0:	83 c4 10             	add    $0x10,%esp
c01083d3:	83 ec 0c             	sub    $0xc,%esp
c01083d6:	50                   	push   %eax
c01083d7:	e8 c2 ea ff ff       	call   c0106e9e <page_ref>
c01083dc:	83 c4 10             	add    $0x10,%esp
c01083df:	83 f8 01             	cmp    $0x1,%eax
c01083e2:	74 19                	je     c01083fd <check_pgdir+0x527>
c01083e4:	68 b8 d6 10 c0       	push   $0xc010d6b8
c01083e9:	68 99 d3 10 c0       	push   $0xc010d399
c01083ee:	68 b0 02 00 00       	push   $0x2b0
c01083f3:	68 74 d3 10 c0       	push   $0xc010d374
c01083f8:	e8 00 80 ff ff       	call   c01003fd <__panic>
    free_page(pde2page(boot_pgdir[0]));
c01083fd:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c0108402:	8b 00                	mov    (%eax),%eax
c0108404:	83 ec 0c             	sub    $0xc,%esp
c0108407:	50                   	push   %eax
c0108408:	e8 75 ea ff ff       	call   c0106e82 <pde2page>
c010840d:	83 c4 10             	add    $0x10,%esp
c0108410:	83 ec 08             	sub    $0x8,%esp
c0108413:	6a 01                	push   $0x1
c0108415:	50                   	push   %eax
c0108416:	e8 fd ec ff ff       	call   c0107118 <free_pages>
c010841b:	83 c4 10             	add    $0x10,%esp
    boot_pgdir[0] = 0;
c010841e:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c0108423:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    cprintf("check_pgdir() succeeded!\n");
c0108429:	83 ec 0c             	sub    $0xc,%esp
c010842c:	68 df d6 10 c0       	push   $0xc010d6df
c0108431:	e8 61 7e ff ff       	call   c0100297 <cprintf>
c0108436:	83 c4 10             	add    $0x10,%esp
}
c0108439:	90                   	nop
c010843a:	c9                   	leave  
c010843b:	c3                   	ret    

c010843c <check_boot_pgdir>:

static void
check_boot_pgdir(void) {
c010843c:	55                   	push   %ebp
c010843d:	89 e5                	mov    %esp,%ebp
c010843f:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
c0108442:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0108449:	e9 a3 00 00 00       	jmp    c01084f1 <check_boot_pgdir+0xb5>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
c010844e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108451:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108454:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108457:	c1 e8 0c             	shr    $0xc,%eax
c010845a:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010845d:	a1 80 0f 1b c0       	mov    0xc01b0f80,%eax
c0108462:	39 45 ec             	cmp    %eax,-0x14(%ebp)
c0108465:	72 17                	jb     c010847e <check_boot_pgdir+0x42>
c0108467:	ff 75 f0             	pushl  -0x10(%ebp)
c010846a:	68 ac d2 10 c0       	push   $0xc010d2ac
c010846f:	68 bc 02 00 00       	push   $0x2bc
c0108474:	68 74 d3 10 c0       	push   $0xc010d374
c0108479:	e8 7f 7f ff ff       	call   c01003fd <__panic>
c010847e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108481:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0108486:	89 c2                	mov    %eax,%edx
c0108488:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c010848d:	83 ec 04             	sub    $0x4,%esp
c0108490:	6a 00                	push   $0x0
c0108492:	52                   	push   %edx
c0108493:	50                   	push   %eax
c0108494:	e8 7f f2 ff ff       	call   c0107718 <get_pte>
c0108499:	83 c4 10             	add    $0x10,%esp
c010849c:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010849f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01084a3:	75 19                	jne    c01084be <check_boot_pgdir+0x82>
c01084a5:	68 fc d6 10 c0       	push   $0xc010d6fc
c01084aa:	68 99 d3 10 c0       	push   $0xc010d399
c01084af:	68 bc 02 00 00       	push   $0x2bc
c01084b4:	68 74 d3 10 c0       	push   $0xc010d374
c01084b9:	e8 3f 7f ff ff       	call   c01003fd <__panic>
        assert(PTE_ADDR(*ptep) == i);
c01084be:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01084c1:	8b 00                	mov    (%eax),%eax
c01084c3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01084c8:	89 c2                	mov    %eax,%edx
c01084ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01084cd:	39 c2                	cmp    %eax,%edx
c01084cf:	74 19                	je     c01084ea <check_boot_pgdir+0xae>
c01084d1:	68 39 d7 10 c0       	push   $0xc010d739
c01084d6:	68 99 d3 10 c0       	push   $0xc010d399
c01084db:	68 bd 02 00 00       	push   $0x2bd
c01084e0:	68 74 d3 10 c0       	push   $0xc010d374
c01084e5:	e8 13 7f ff ff       	call   c01003fd <__panic>

static void
check_boot_pgdir(void) {
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
c01084ea:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
c01084f1:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01084f4:	a1 80 0f 1b c0       	mov    0xc01b0f80,%eax
c01084f9:	39 c2                	cmp    %eax,%edx
c01084fb:	0f 82 4d ff ff ff    	jb     c010844e <check_boot_pgdir+0x12>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
        assert(PTE_ADDR(*ptep) == i);
    }

    assert(PDE_ADDR(boot_pgdir[PDX(VPT)]) == PADDR(boot_pgdir));
c0108501:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c0108506:	05 ac 0f 00 00       	add    $0xfac,%eax
c010850b:	8b 00                	mov    (%eax),%eax
c010850d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0108512:	89 c2                	mov    %eax,%edx
c0108514:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c0108519:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010851c:	81 7d e4 ff ff ff bf 	cmpl   $0xbfffffff,-0x1c(%ebp)
c0108523:	77 17                	ja     c010853c <check_boot_pgdir+0x100>
c0108525:	ff 75 e4             	pushl  -0x1c(%ebp)
c0108528:	68 50 d3 10 c0       	push   $0xc010d350
c010852d:	68 c0 02 00 00       	push   $0x2c0
c0108532:	68 74 d3 10 c0       	push   $0xc010d374
c0108537:	e8 c1 7e ff ff       	call   c01003fd <__panic>
c010853c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010853f:	05 00 00 00 40       	add    $0x40000000,%eax
c0108544:	39 c2                	cmp    %eax,%edx
c0108546:	74 19                	je     c0108561 <check_boot_pgdir+0x125>
c0108548:	68 50 d7 10 c0       	push   $0xc010d750
c010854d:	68 99 d3 10 c0       	push   $0xc010d399
c0108552:	68 c0 02 00 00       	push   $0x2c0
c0108557:	68 74 d3 10 c0       	push   $0xc010d374
c010855c:	e8 9c 7e ff ff       	call   c01003fd <__panic>

    assert(boot_pgdir[0] == 0);
c0108561:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c0108566:	8b 00                	mov    (%eax),%eax
c0108568:	85 c0                	test   %eax,%eax
c010856a:	74 19                	je     c0108585 <check_boot_pgdir+0x149>
c010856c:	68 84 d7 10 c0       	push   $0xc010d784
c0108571:	68 99 d3 10 c0       	push   $0xc010d399
c0108576:	68 c2 02 00 00       	push   $0x2c2
c010857b:	68 74 d3 10 c0       	push   $0xc010d374
c0108580:	e8 78 7e ff ff       	call   c01003fd <__panic>

    struct Page *p;
    p = alloc_page();
c0108585:	83 ec 0c             	sub    $0xc,%esp
c0108588:	6a 01                	push   $0x1
c010858a:	e8 1d eb ff ff       	call   c01070ac <alloc_pages>
c010858f:	83 c4 10             	add    $0x10,%esp
c0108592:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(page_insert(boot_pgdir, p, 0x100, PTE_W) == 0);
c0108595:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c010859a:	6a 02                	push   $0x2
c010859c:	68 00 01 00 00       	push   $0x100
c01085a1:	ff 75 e0             	pushl  -0x20(%ebp)
c01085a4:	50                   	push   %eax
c01085a5:	e8 4f f7 ff ff       	call   c0107cf9 <page_insert>
c01085aa:	83 c4 10             	add    $0x10,%esp
c01085ad:	85 c0                	test   %eax,%eax
c01085af:	74 19                	je     c01085ca <check_boot_pgdir+0x18e>
c01085b1:	68 98 d7 10 c0       	push   $0xc010d798
c01085b6:	68 99 d3 10 c0       	push   $0xc010d399
c01085bb:	68 c6 02 00 00       	push   $0x2c6
c01085c0:	68 74 d3 10 c0       	push   $0xc010d374
c01085c5:	e8 33 7e ff ff       	call   c01003fd <__panic>
    assert(page_ref(p) == 1);
c01085ca:	83 ec 0c             	sub    $0xc,%esp
c01085cd:	ff 75 e0             	pushl  -0x20(%ebp)
c01085d0:	e8 c9 e8 ff ff       	call   c0106e9e <page_ref>
c01085d5:	83 c4 10             	add    $0x10,%esp
c01085d8:	83 f8 01             	cmp    $0x1,%eax
c01085db:	74 19                	je     c01085f6 <check_boot_pgdir+0x1ba>
c01085dd:	68 c6 d7 10 c0       	push   $0xc010d7c6
c01085e2:	68 99 d3 10 c0       	push   $0xc010d399
c01085e7:	68 c7 02 00 00       	push   $0x2c7
c01085ec:	68 74 d3 10 c0       	push   $0xc010d374
c01085f1:	e8 07 7e ff ff       	call   c01003fd <__panic>
    assert(page_insert(boot_pgdir, p, 0x100 + PGSIZE, PTE_W) == 0);
c01085f6:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c01085fb:	6a 02                	push   $0x2
c01085fd:	68 00 11 00 00       	push   $0x1100
c0108602:	ff 75 e0             	pushl  -0x20(%ebp)
c0108605:	50                   	push   %eax
c0108606:	e8 ee f6 ff ff       	call   c0107cf9 <page_insert>
c010860b:	83 c4 10             	add    $0x10,%esp
c010860e:	85 c0                	test   %eax,%eax
c0108610:	74 19                	je     c010862b <check_boot_pgdir+0x1ef>
c0108612:	68 d8 d7 10 c0       	push   $0xc010d7d8
c0108617:	68 99 d3 10 c0       	push   $0xc010d399
c010861c:	68 c8 02 00 00       	push   $0x2c8
c0108621:	68 74 d3 10 c0       	push   $0xc010d374
c0108626:	e8 d2 7d ff ff       	call   c01003fd <__panic>
    assert(page_ref(p) == 2);
c010862b:	83 ec 0c             	sub    $0xc,%esp
c010862e:	ff 75 e0             	pushl  -0x20(%ebp)
c0108631:	e8 68 e8 ff ff       	call   c0106e9e <page_ref>
c0108636:	83 c4 10             	add    $0x10,%esp
c0108639:	83 f8 02             	cmp    $0x2,%eax
c010863c:	74 19                	je     c0108657 <check_boot_pgdir+0x21b>
c010863e:	68 0f d8 10 c0       	push   $0xc010d80f
c0108643:	68 99 d3 10 c0       	push   $0xc010d399
c0108648:	68 c9 02 00 00       	push   $0x2c9
c010864d:	68 74 d3 10 c0       	push   $0xc010d374
c0108652:	e8 a6 7d ff ff       	call   c01003fd <__panic>

    const char *str = "ucore: Hello world!!";
c0108657:	c7 45 dc 20 d8 10 c0 	movl   $0xc010d820,-0x24(%ebp)
    strcpy((void *)0x100, str);
c010865e:	83 ec 08             	sub    $0x8,%esp
c0108661:	ff 75 dc             	pushl  -0x24(%ebp)
c0108664:	68 00 01 00 00       	push   $0x100
c0108669:	e8 d7 27 00 00       	call   c010ae45 <strcpy>
c010866e:	83 c4 10             	add    $0x10,%esp
    assert(strcmp((void *)0x100, (void *)(0x100 + PGSIZE)) == 0);
c0108671:	83 ec 08             	sub    $0x8,%esp
c0108674:	68 00 11 00 00       	push   $0x1100
c0108679:	68 00 01 00 00       	push   $0x100
c010867e:	e8 3c 28 00 00       	call   c010aebf <strcmp>
c0108683:	83 c4 10             	add    $0x10,%esp
c0108686:	85 c0                	test   %eax,%eax
c0108688:	74 19                	je     c01086a3 <check_boot_pgdir+0x267>
c010868a:	68 38 d8 10 c0       	push   $0xc010d838
c010868f:	68 99 d3 10 c0       	push   $0xc010d399
c0108694:	68 cd 02 00 00       	push   $0x2cd
c0108699:	68 74 d3 10 c0       	push   $0xc010d374
c010869e:	e8 5a 7d ff ff       	call   c01003fd <__panic>

    *(char *)(page2kva(p) + 0x100) = '\0';
c01086a3:	83 ec 0c             	sub    $0xc,%esp
c01086a6:	ff 75 e0             	pushl  -0x20(%ebp)
c01086a9:	e8 55 e7 ff ff       	call   c0106e03 <page2kva>
c01086ae:	83 c4 10             	add    $0x10,%esp
c01086b1:	05 00 01 00 00       	add    $0x100,%eax
c01086b6:	c6 00 00             	movb   $0x0,(%eax)
    assert(strlen((const char *)0x100) == 0);
c01086b9:	83 ec 0c             	sub    $0xc,%esp
c01086bc:	68 00 01 00 00       	push   $0x100
c01086c1:	e8 27 27 00 00       	call   c010aded <strlen>
c01086c6:	83 c4 10             	add    $0x10,%esp
c01086c9:	85 c0                	test   %eax,%eax
c01086cb:	74 19                	je     c01086e6 <check_boot_pgdir+0x2aa>
c01086cd:	68 70 d8 10 c0       	push   $0xc010d870
c01086d2:	68 99 d3 10 c0       	push   $0xc010d399
c01086d7:	68 d0 02 00 00       	push   $0x2d0
c01086dc:	68 74 d3 10 c0       	push   $0xc010d374
c01086e1:	e8 17 7d ff ff       	call   c01003fd <__panic>

    free_page(p);
c01086e6:	83 ec 08             	sub    $0x8,%esp
c01086e9:	6a 01                	push   $0x1
c01086eb:	ff 75 e0             	pushl  -0x20(%ebp)
c01086ee:	e8 25 ea ff ff       	call   c0107118 <free_pages>
c01086f3:	83 c4 10             	add    $0x10,%esp
    free_page(pde2page(boot_pgdir[0]));
c01086f6:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c01086fb:	8b 00                	mov    (%eax),%eax
c01086fd:	83 ec 0c             	sub    $0xc,%esp
c0108700:	50                   	push   %eax
c0108701:	e8 7c e7 ff ff       	call   c0106e82 <pde2page>
c0108706:	83 c4 10             	add    $0x10,%esp
c0108709:	83 ec 08             	sub    $0x8,%esp
c010870c:	6a 01                	push   $0x1
c010870e:	50                   	push   %eax
c010870f:	e8 04 ea ff ff       	call   c0107118 <free_pages>
c0108714:	83 c4 10             	add    $0x10,%esp
    boot_pgdir[0] = 0;
c0108717:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c010871c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    cprintf("check_boot_pgdir() succeeded!\n");
c0108722:	83 ec 0c             	sub    $0xc,%esp
c0108725:	68 94 d8 10 c0       	push   $0xc010d894
c010872a:	e8 68 7b ff ff       	call   c0100297 <cprintf>
c010872f:	83 c4 10             	add    $0x10,%esp
}
c0108732:	90                   	nop
c0108733:	c9                   	leave  
c0108734:	c3                   	ret    

c0108735 <perm2str>:

//perm2str - use string 'u,r,w,-' to present the permission
static const char *
perm2str(int perm) {
c0108735:	55                   	push   %ebp
c0108736:	89 e5                	mov    %esp,%ebp
    static char str[4];
    str[0] = (perm & PTE_U) ? 'u' : '-';
c0108738:	8b 45 08             	mov    0x8(%ebp),%eax
c010873b:	83 e0 04             	and    $0x4,%eax
c010873e:	85 c0                	test   %eax,%eax
c0108740:	74 07                	je     c0108749 <perm2str+0x14>
c0108742:	b8 75 00 00 00       	mov    $0x75,%eax
c0108747:	eb 05                	jmp    c010874e <perm2str+0x19>
c0108749:	b8 2d 00 00 00       	mov    $0x2d,%eax
c010874e:	a2 08 10 1b c0       	mov    %al,0xc01b1008
    str[1] = 'r';
c0108753:	c6 05 09 10 1b c0 72 	movb   $0x72,0xc01b1009
    str[2] = (perm & PTE_W) ? 'w' : '-';
c010875a:	8b 45 08             	mov    0x8(%ebp),%eax
c010875d:	83 e0 02             	and    $0x2,%eax
c0108760:	85 c0                	test   %eax,%eax
c0108762:	74 07                	je     c010876b <perm2str+0x36>
c0108764:	b8 77 00 00 00       	mov    $0x77,%eax
c0108769:	eb 05                	jmp    c0108770 <perm2str+0x3b>
c010876b:	b8 2d 00 00 00       	mov    $0x2d,%eax
c0108770:	a2 0a 10 1b c0       	mov    %al,0xc01b100a
    str[3] = '\0';
c0108775:	c6 05 0b 10 1b c0 00 	movb   $0x0,0xc01b100b
    return str;
c010877c:	b8 08 10 1b c0       	mov    $0xc01b1008,%eax
}
c0108781:	5d                   	pop    %ebp
c0108782:	c3                   	ret    

c0108783 <get_pgtable_items>:
//  table:       the beginning addr of table
//  left_store:  the pointer of the high side of table's next range
//  right_store: the pointer of the low side of table's next range
// return value: 0 - not a invalid item range, perm - a valid item range with perm permission 
static int
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
c0108783:	55                   	push   %ebp
c0108784:	89 e5                	mov    %esp,%ebp
c0108786:	83 ec 10             	sub    $0x10,%esp
    if (start >= right) {
c0108789:	8b 45 10             	mov    0x10(%ebp),%eax
c010878c:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010878f:	72 0e                	jb     c010879f <get_pgtable_items+0x1c>
        return 0;
c0108791:	b8 00 00 00 00       	mov    $0x0,%eax
c0108796:	e9 9a 00 00 00       	jmp    c0108835 <get_pgtable_items+0xb2>
    }
    while (start < right && !(table[start] & PTE_P)) {
        start ++;
c010879b:	83 45 10 01          	addl   $0x1,0x10(%ebp)
static int
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
    if (start >= right) {
        return 0;
    }
    while (start < right && !(table[start] & PTE_P)) {
c010879f:	8b 45 10             	mov    0x10(%ebp),%eax
c01087a2:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01087a5:	73 18                	jae    c01087bf <get_pgtable_items+0x3c>
c01087a7:	8b 45 10             	mov    0x10(%ebp),%eax
c01087aa:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01087b1:	8b 45 14             	mov    0x14(%ebp),%eax
c01087b4:	01 d0                	add    %edx,%eax
c01087b6:	8b 00                	mov    (%eax),%eax
c01087b8:	83 e0 01             	and    $0x1,%eax
c01087bb:	85 c0                	test   %eax,%eax
c01087bd:	74 dc                	je     c010879b <get_pgtable_items+0x18>
        start ++;
    }
    if (start < right) {
c01087bf:	8b 45 10             	mov    0x10(%ebp),%eax
c01087c2:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01087c5:	73 69                	jae    c0108830 <get_pgtable_items+0xad>
        if (left_store != NULL) {
c01087c7:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c01087cb:	74 08                	je     c01087d5 <get_pgtable_items+0x52>
            *left_store = start;
c01087cd:	8b 45 18             	mov    0x18(%ebp),%eax
c01087d0:	8b 55 10             	mov    0x10(%ebp),%edx
c01087d3:	89 10                	mov    %edx,(%eax)
        }
        int perm = (table[start ++] & PTE_USER);
c01087d5:	8b 45 10             	mov    0x10(%ebp),%eax
c01087d8:	8d 50 01             	lea    0x1(%eax),%edx
c01087db:	89 55 10             	mov    %edx,0x10(%ebp)
c01087de:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01087e5:	8b 45 14             	mov    0x14(%ebp),%eax
c01087e8:	01 d0                	add    %edx,%eax
c01087ea:	8b 00                	mov    (%eax),%eax
c01087ec:	83 e0 07             	and    $0x7,%eax
c01087ef:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while (start < right && (table[start] & PTE_USER) == perm) {
c01087f2:	eb 04                	jmp    c01087f8 <get_pgtable_items+0x75>
            start ++;
c01087f4:	83 45 10 01          	addl   $0x1,0x10(%ebp)
    if (start < right) {
        if (left_store != NULL) {
            *left_store = start;
        }
        int perm = (table[start ++] & PTE_USER);
        while (start < right && (table[start] & PTE_USER) == perm) {
c01087f8:	8b 45 10             	mov    0x10(%ebp),%eax
c01087fb:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01087fe:	73 1d                	jae    c010881d <get_pgtable_items+0x9a>
c0108800:	8b 45 10             	mov    0x10(%ebp),%eax
c0108803:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010880a:	8b 45 14             	mov    0x14(%ebp),%eax
c010880d:	01 d0                	add    %edx,%eax
c010880f:	8b 00                	mov    (%eax),%eax
c0108811:	83 e0 07             	and    $0x7,%eax
c0108814:	89 c2                	mov    %eax,%edx
c0108816:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108819:	39 c2                	cmp    %eax,%edx
c010881b:	74 d7                	je     c01087f4 <get_pgtable_items+0x71>
            start ++;
        }
        if (right_store != NULL) {
c010881d:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c0108821:	74 08                	je     c010882b <get_pgtable_items+0xa8>
            *right_store = start;
c0108823:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0108826:	8b 55 10             	mov    0x10(%ebp),%edx
c0108829:	89 10                	mov    %edx,(%eax)
        }
        return perm;
c010882b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010882e:	eb 05                	jmp    c0108835 <get_pgtable_items+0xb2>
    }
    return 0;
c0108830:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0108835:	c9                   	leave  
c0108836:	c3                   	ret    

c0108837 <print_pgdir>:

//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
c0108837:	55                   	push   %ebp
c0108838:	89 e5                	mov    %esp,%ebp
c010883a:	57                   	push   %edi
c010883b:	56                   	push   %esi
c010883c:	53                   	push   %ebx
c010883d:	83 ec 2c             	sub    $0x2c,%esp
    cprintf("-------------------- BEGIN --------------------\n");
c0108840:	83 ec 0c             	sub    $0xc,%esp
c0108843:	68 b4 d8 10 c0       	push   $0xc010d8b4
c0108848:	e8 4a 7a ff ff       	call   c0100297 <cprintf>
c010884d:	83 c4 10             	add    $0x10,%esp
    size_t left, right = 0, perm;
c0108850:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c0108857:	e9 e5 00 00 00       	jmp    c0108941 <print_pgdir+0x10a>
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c010885c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010885f:	83 ec 0c             	sub    $0xc,%esp
c0108862:	50                   	push   %eax
c0108863:	e8 cd fe ff ff       	call   c0108735 <perm2str>
c0108868:	83 c4 10             	add    $0x10,%esp
c010886b:	89 c7                	mov    %eax,%edi
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
c010886d:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0108870:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108873:	29 c2                	sub    %eax,%edx
c0108875:	89 d0                	mov    %edx,%eax
void
print_pgdir(void) {
    cprintf("-------------------- BEGIN --------------------\n");
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c0108877:	c1 e0 16             	shl    $0x16,%eax
c010887a:	89 c3                	mov    %eax,%ebx
c010887c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010887f:	c1 e0 16             	shl    $0x16,%eax
c0108882:	89 c1                	mov    %eax,%ecx
c0108884:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108887:	c1 e0 16             	shl    $0x16,%eax
c010888a:	89 c2                	mov    %eax,%edx
c010888c:	8b 75 dc             	mov    -0x24(%ebp),%esi
c010888f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108892:	29 c6                	sub    %eax,%esi
c0108894:	89 f0                	mov    %esi,%eax
c0108896:	83 ec 08             	sub    $0x8,%esp
c0108899:	57                   	push   %edi
c010889a:	53                   	push   %ebx
c010889b:	51                   	push   %ecx
c010889c:	52                   	push   %edx
c010889d:	50                   	push   %eax
c010889e:	68 e5 d8 10 c0       	push   $0xc010d8e5
c01088a3:	e8 ef 79 ff ff       	call   c0100297 <cprintf>
c01088a8:	83 c4 20             	add    $0x20,%esp
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
c01088ab:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01088ae:	c1 e0 0a             	shl    $0xa,%eax
c01088b1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c01088b4:	eb 4f                	jmp    c0108905 <print_pgdir+0xce>
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c01088b6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01088b9:	83 ec 0c             	sub    $0xc,%esp
c01088bc:	50                   	push   %eax
c01088bd:	e8 73 fe ff ff       	call   c0108735 <perm2str>
c01088c2:	83 c4 10             	add    $0x10,%esp
c01088c5:	89 c7                	mov    %eax,%edi
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
c01088c7:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01088ca:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01088cd:	29 c2                	sub    %eax,%edx
c01088cf:	89 d0                	mov    %edx,%eax
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c01088d1:	c1 e0 0c             	shl    $0xc,%eax
c01088d4:	89 c3                	mov    %eax,%ebx
c01088d6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01088d9:	c1 e0 0c             	shl    $0xc,%eax
c01088dc:	89 c1                	mov    %eax,%ecx
c01088de:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01088e1:	c1 e0 0c             	shl    $0xc,%eax
c01088e4:	89 c2                	mov    %eax,%edx
c01088e6:	8b 75 d4             	mov    -0x2c(%ebp),%esi
c01088e9:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01088ec:	29 c6                	sub    %eax,%esi
c01088ee:	89 f0                	mov    %esi,%eax
c01088f0:	83 ec 08             	sub    $0x8,%esp
c01088f3:	57                   	push   %edi
c01088f4:	53                   	push   %ebx
c01088f5:	51                   	push   %ecx
c01088f6:	52                   	push   %edx
c01088f7:	50                   	push   %eax
c01088f8:	68 04 d9 10 c0       	push   $0xc010d904
c01088fd:	e8 95 79 ff ff       	call   c0100297 <cprintf>
c0108902:	83 c4 20             	add    $0x20,%esp
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c0108905:	be 00 00 c0 fa       	mov    $0xfac00000,%esi
c010890a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010890d:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0108910:	89 d3                	mov    %edx,%ebx
c0108912:	c1 e3 0a             	shl    $0xa,%ebx
c0108915:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0108918:	89 d1                	mov    %edx,%ecx
c010891a:	c1 e1 0a             	shl    $0xa,%ecx
c010891d:	83 ec 08             	sub    $0x8,%esp
c0108920:	8d 55 d4             	lea    -0x2c(%ebp),%edx
c0108923:	52                   	push   %edx
c0108924:	8d 55 d8             	lea    -0x28(%ebp),%edx
c0108927:	52                   	push   %edx
c0108928:	56                   	push   %esi
c0108929:	50                   	push   %eax
c010892a:	53                   	push   %ebx
c010892b:	51                   	push   %ecx
c010892c:	e8 52 fe ff ff       	call   c0108783 <get_pgtable_items>
c0108931:	83 c4 20             	add    $0x20,%esp
c0108934:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0108937:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010893b:	0f 85 75 ff ff ff    	jne    c01088b6 <print_pgdir+0x7f>
//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
    cprintf("-------------------- BEGIN --------------------\n");
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c0108941:	b9 00 b0 fe fa       	mov    $0xfafeb000,%ecx
c0108946:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108949:	83 ec 08             	sub    $0x8,%esp
c010894c:	8d 55 dc             	lea    -0x24(%ebp),%edx
c010894f:	52                   	push   %edx
c0108950:	8d 55 e0             	lea    -0x20(%ebp),%edx
c0108953:	52                   	push   %edx
c0108954:	51                   	push   %ecx
c0108955:	50                   	push   %eax
c0108956:	68 00 04 00 00       	push   $0x400
c010895b:	6a 00                	push   $0x0
c010895d:	e8 21 fe ff ff       	call   c0108783 <get_pgtable_items>
c0108962:	83 c4 20             	add    $0x20,%esp
c0108965:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0108968:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010896c:	0f 85 ea fe ff ff    	jne    c010885c <print_pgdir+0x25>
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
        }
    }
    cprintf("--------------------- END ---------------------\n");
c0108972:	83 ec 0c             	sub    $0xc,%esp
c0108975:	68 28 d9 10 c0       	push   $0xc010d928
c010897a:	e8 18 79 ff ff       	call   c0100297 <cprintf>
c010897f:	83 c4 10             	add    $0x10,%esp
}
c0108982:	90                   	nop
c0108983:	8d 65 f4             	lea    -0xc(%ebp),%esp
c0108986:	5b                   	pop    %ebx
c0108987:	5e                   	pop    %esi
c0108988:	5f                   	pop    %edi
c0108989:	5d                   	pop    %ebp
c010898a:	c3                   	ret    

c010898b <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c010898b:	55                   	push   %ebp
c010898c:	89 e5                	mov    %esp,%ebp
    return page - pages;
c010898e:	8b 45 08             	mov    0x8(%ebp),%eax
c0108991:	8b 15 b8 31 1b c0    	mov    0xc01b31b8,%edx
c0108997:	29 d0                	sub    %edx,%eax
c0108999:	c1 f8 05             	sar    $0x5,%eax
}
c010899c:	5d                   	pop    %ebp
c010899d:	c3                   	ret    

c010899e <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c010899e:	55                   	push   %ebp
c010899f:	89 e5                	mov    %esp,%ebp
    return page2ppn(page) << PGSHIFT;
c01089a1:	ff 75 08             	pushl  0x8(%ebp)
c01089a4:	e8 e2 ff ff ff       	call   c010898b <page2ppn>
c01089a9:	83 c4 04             	add    $0x4,%esp
c01089ac:	c1 e0 0c             	shl    $0xc,%eax
}
c01089af:	c9                   	leave  
c01089b0:	c3                   	ret    

c01089b1 <page2kva>:
    }
    return &pages[PPN(pa)];
}

static inline void *
page2kva(struct Page *page) {
c01089b1:	55                   	push   %ebp
c01089b2:	89 e5                	mov    %esp,%ebp
c01089b4:	83 ec 18             	sub    $0x18,%esp
    return KADDR(page2pa(page));
c01089b7:	ff 75 08             	pushl  0x8(%ebp)
c01089ba:	e8 df ff ff ff       	call   c010899e <page2pa>
c01089bf:	83 c4 04             	add    $0x4,%esp
c01089c2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01089c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01089c8:	c1 e8 0c             	shr    $0xc,%eax
c01089cb:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01089ce:	a1 80 0f 1b c0       	mov    0xc01b0f80,%eax
c01089d3:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c01089d6:	72 14                	jb     c01089ec <page2kva+0x3b>
c01089d8:	ff 75 f4             	pushl  -0xc(%ebp)
c01089db:	68 5c d9 10 c0       	push   $0xc010d95c
c01089e0:	6a 65                	push   $0x65
c01089e2:	68 7f d9 10 c0       	push   $0xc010d97f
c01089e7:	e8 11 7a ff ff       	call   c01003fd <__panic>
c01089ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01089ef:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c01089f4:	c9                   	leave  
c01089f5:	c3                   	ret    

c01089f6 <swapfs_init>:
#include <ide.h>
#include <pmm.h>
#include <assert.h>

void
swapfs_init(void) {
c01089f6:	55                   	push   %ebp
c01089f7:	89 e5                	mov    %esp,%ebp
c01089f9:	83 ec 08             	sub    $0x8,%esp
    static_assert((PGSIZE % SECTSIZE) == 0);
    if (!ide_device_valid(SWAP_DEV_NO)) {
c01089fc:	83 ec 0c             	sub    $0xc,%esp
c01089ff:	6a 01                	push   $0x1
c0108a01:	e8 d3 87 ff ff       	call   c01011d9 <ide_device_valid>
c0108a06:	83 c4 10             	add    $0x10,%esp
c0108a09:	85 c0                	test   %eax,%eax
c0108a0b:	75 14                	jne    c0108a21 <swapfs_init+0x2b>
        panic("swap fs isn't available.\n");
c0108a0d:	83 ec 04             	sub    $0x4,%esp
c0108a10:	68 8d d9 10 c0       	push   $0xc010d98d
c0108a15:	6a 0d                	push   $0xd
c0108a17:	68 a7 d9 10 c0       	push   $0xc010d9a7
c0108a1c:	e8 dc 79 ff ff       	call   c01003fd <__panic>
    }
    max_swap_offset = ide_device_size(SWAP_DEV_NO) / (PGSIZE / SECTSIZE);
c0108a21:	83 ec 0c             	sub    $0xc,%esp
c0108a24:	6a 01                	push   $0x1
c0108a26:	e8 ee 87 ff ff       	call   c0101219 <ide_device_size>
c0108a2b:	83 c4 10             	add    $0x10,%esp
c0108a2e:	c1 e8 03             	shr    $0x3,%eax
c0108a31:	a3 7c 31 1b c0       	mov    %eax,0xc01b317c
}
c0108a36:	90                   	nop
c0108a37:	c9                   	leave  
c0108a38:	c3                   	ret    

c0108a39 <swapfs_read>:

int
swapfs_read(swap_entry_t entry, struct Page *page) {
c0108a39:	55                   	push   %ebp
c0108a3a:	89 e5                	mov    %esp,%ebp
c0108a3c:	83 ec 18             	sub    $0x18,%esp
    return ide_read_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c0108a3f:	83 ec 0c             	sub    $0xc,%esp
c0108a42:	ff 75 0c             	pushl  0xc(%ebp)
c0108a45:	e8 67 ff ff ff       	call   c01089b1 <page2kva>
c0108a4a:	83 c4 10             	add    $0x10,%esp
c0108a4d:	89 c2                	mov    %eax,%edx
c0108a4f:	8b 45 08             	mov    0x8(%ebp),%eax
c0108a52:	c1 e8 08             	shr    $0x8,%eax
c0108a55:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108a58:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108a5c:	74 0a                	je     c0108a68 <swapfs_read+0x2f>
c0108a5e:	a1 7c 31 1b c0       	mov    0xc01b317c,%eax
c0108a63:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0108a66:	72 14                	jb     c0108a7c <swapfs_read+0x43>
c0108a68:	ff 75 08             	pushl  0x8(%ebp)
c0108a6b:	68 b8 d9 10 c0       	push   $0xc010d9b8
c0108a70:	6a 14                	push   $0x14
c0108a72:	68 a7 d9 10 c0       	push   $0xc010d9a7
c0108a77:	e8 81 79 ff ff       	call   c01003fd <__panic>
c0108a7c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108a7f:	c1 e0 03             	shl    $0x3,%eax
c0108a82:	6a 08                	push   $0x8
c0108a84:	52                   	push   %edx
c0108a85:	50                   	push   %eax
c0108a86:	6a 01                	push   $0x1
c0108a88:	e8 cc 87 ff ff       	call   c0101259 <ide_read_secs>
c0108a8d:	83 c4 10             	add    $0x10,%esp
}
c0108a90:	c9                   	leave  
c0108a91:	c3                   	ret    

c0108a92 <swapfs_write>:

int
swapfs_write(swap_entry_t entry, struct Page *page) {
c0108a92:	55                   	push   %ebp
c0108a93:	89 e5                	mov    %esp,%ebp
c0108a95:	83 ec 18             	sub    $0x18,%esp
    return ide_write_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c0108a98:	83 ec 0c             	sub    $0xc,%esp
c0108a9b:	ff 75 0c             	pushl  0xc(%ebp)
c0108a9e:	e8 0e ff ff ff       	call   c01089b1 <page2kva>
c0108aa3:	83 c4 10             	add    $0x10,%esp
c0108aa6:	89 c2                	mov    %eax,%edx
c0108aa8:	8b 45 08             	mov    0x8(%ebp),%eax
c0108aab:	c1 e8 08             	shr    $0x8,%eax
c0108aae:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108ab1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108ab5:	74 0a                	je     c0108ac1 <swapfs_write+0x2f>
c0108ab7:	a1 7c 31 1b c0       	mov    0xc01b317c,%eax
c0108abc:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0108abf:	72 14                	jb     c0108ad5 <swapfs_write+0x43>
c0108ac1:	ff 75 08             	pushl  0x8(%ebp)
c0108ac4:	68 b8 d9 10 c0       	push   $0xc010d9b8
c0108ac9:	6a 19                	push   $0x19
c0108acb:	68 a7 d9 10 c0       	push   $0xc010d9a7
c0108ad0:	e8 28 79 ff ff       	call   c01003fd <__panic>
c0108ad5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108ad8:	c1 e0 03             	shl    $0x3,%eax
c0108adb:	6a 08                	push   $0x8
c0108add:	52                   	push   %edx
c0108ade:	50                   	push   %eax
c0108adf:	6a 01                	push   $0x1
c0108ae1:	e8 9d 89 ff ff       	call   c0101483 <ide_write_secs>
c0108ae6:	83 c4 10             	add    $0x10,%esp
}
c0108ae9:	c9                   	leave  
c0108aea:	c3                   	ret    

c0108aeb <kernel_thread_entry>:
.text
.globl kernel_thread_entry
kernel_thread_entry:        # void kernel_thread(void)

    pushl %edx              # push arg
c0108aeb:	52                   	push   %edx
    call *%ebx              # call fn
c0108aec:	ff d3                	call   *%ebx

    pushl %eax              # save the return value of fn(arg)
c0108aee:	50                   	push   %eax
    call do_exit            # call do_exit to terminate current thread
c0108aef:	e8 98 0c 00 00       	call   c010978c <do_exit>

c0108af4 <switch_to>:
.text
.globl switch_to
switch_to:                      # switch_to(from, to)

    # save from's registers
    movl 4(%esp), %eax          # eax points to from
c0108af4:	8b 44 24 04          	mov    0x4(%esp),%eax
    popl 0(%eax)                # save eip !popl
c0108af8:	8f 00                	popl   (%eax)
    movl %esp, 4(%eax)
c0108afa:	89 60 04             	mov    %esp,0x4(%eax)
    movl %ebx, 8(%eax)
c0108afd:	89 58 08             	mov    %ebx,0x8(%eax)
    movl %ecx, 12(%eax)
c0108b00:	89 48 0c             	mov    %ecx,0xc(%eax)
    movl %edx, 16(%eax)
c0108b03:	89 50 10             	mov    %edx,0x10(%eax)
    movl %esi, 20(%eax)
c0108b06:	89 70 14             	mov    %esi,0x14(%eax)
    movl %edi, 24(%eax)
c0108b09:	89 78 18             	mov    %edi,0x18(%eax)
    movl %ebp, 28(%eax)
c0108b0c:	89 68 1c             	mov    %ebp,0x1c(%eax)

    # restore to's registers
    movl 4(%esp), %eax          # not 8(%esp): popped return address already
c0108b0f:	8b 44 24 04          	mov    0x4(%esp),%eax
                                # eax now points to to
    movl 28(%eax), %ebp
c0108b13:	8b 68 1c             	mov    0x1c(%eax),%ebp
    movl 24(%eax), %edi
c0108b16:	8b 78 18             	mov    0x18(%eax),%edi
    movl 20(%eax), %esi
c0108b19:	8b 70 14             	mov    0x14(%eax),%esi
    movl 16(%eax), %edx
c0108b1c:	8b 50 10             	mov    0x10(%eax),%edx
    movl 12(%eax), %ecx
c0108b1f:	8b 48 0c             	mov    0xc(%eax),%ecx
    movl 8(%eax), %ebx
c0108b22:	8b 58 08             	mov    0x8(%eax),%ebx
    movl 4(%eax), %esp
c0108b25:	8b 60 04             	mov    0x4(%eax),%esp

    pushl 0(%eax)               # push eip
c0108b28:	ff 30                	pushl  (%eax)

    ret
c0108b2a:	c3                   	ret    

c0108b2b <test_and_set_bit>:
 * test_and_set_bit - Atomically set a bit and return its old value
 * @nr:     the bit to set
 * @addr:   the address to count from
 * */
static inline bool
test_and_set_bit(int nr, volatile void *addr) {
c0108b2b:	55                   	push   %ebp
c0108b2c:	89 e5                	mov    %esp,%ebp
c0108b2e:	83 ec 10             	sub    $0x10,%esp
    int oldbit;
    asm volatile ("btsl %2, %1; sbbl %0, %0" : "=r" (oldbit), "=m" (*(volatile long *)addr) : "Ir" (nr) : "memory");
c0108b31:	8b 55 0c             	mov    0xc(%ebp),%edx
c0108b34:	8b 45 08             	mov    0x8(%ebp),%eax
c0108b37:	0f ab 02             	bts    %eax,(%edx)
c0108b3a:	19 c0                	sbb    %eax,%eax
c0108b3c:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return oldbit != 0;
c0108b3f:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0108b43:	0f 95 c0             	setne  %al
c0108b46:	0f b6 c0             	movzbl %al,%eax
}
c0108b49:	c9                   	leave  
c0108b4a:	c3                   	ret    

c0108b4b <test_and_clear_bit>:
 * test_and_clear_bit - Atomically clear a bit and return its old value
 * @nr:     the bit to clear
 * @addr:   the address to count from
 * */
static inline bool
test_and_clear_bit(int nr, volatile void *addr) {
c0108b4b:	55                   	push   %ebp
c0108b4c:	89 e5                	mov    %esp,%ebp
c0108b4e:	83 ec 10             	sub    $0x10,%esp
    int oldbit;
    asm volatile ("btrl %2, %1; sbbl %0, %0" : "=r" (oldbit), "=m" (*(volatile long *)addr) : "Ir" (nr) : "memory");
c0108b51:	8b 55 0c             	mov    0xc(%ebp),%edx
c0108b54:	8b 45 08             	mov    0x8(%ebp),%eax
c0108b57:	0f b3 02             	btr    %eax,(%edx)
c0108b5a:	19 c0                	sbb    %eax,%eax
c0108b5c:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return oldbit != 0;
c0108b5f:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0108b63:	0f 95 c0             	setne  %al
c0108b66:	0f b6 c0             	movzbl %al,%eax
}
c0108b69:	c9                   	leave  
c0108b6a:	c3                   	ret    

c0108b6b <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0108b6b:	55                   	push   %ebp
c0108b6c:	89 e5                	mov    %esp,%ebp
c0108b6e:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0108b71:	9c                   	pushf  
c0108b72:	58                   	pop    %eax
c0108b73:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0108b76:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0108b79:	25 00 02 00 00       	and    $0x200,%eax
c0108b7e:	85 c0                	test   %eax,%eax
c0108b80:	74 0c                	je     c0108b8e <__intr_save+0x23>
        intr_disable();
c0108b82:	e8 35 96 ff ff       	call   c01021bc <intr_disable>
        return 1;
c0108b87:	b8 01 00 00 00       	mov    $0x1,%eax
c0108b8c:	eb 05                	jmp    c0108b93 <__intr_save+0x28>
    }
    return 0;
c0108b8e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0108b93:	c9                   	leave  
c0108b94:	c3                   	ret    

c0108b95 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0108b95:	55                   	push   %ebp
c0108b96:	89 e5                	mov    %esp,%ebp
c0108b98:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0108b9b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0108b9f:	74 05                	je     c0108ba6 <__intr_restore+0x11>
        intr_enable();
c0108ba1:	e8 0f 96 ff ff       	call   c01021b5 <intr_enable>
    }
}
c0108ba6:	90                   	nop
c0108ba7:	c9                   	leave  
c0108ba8:	c3                   	ret    

c0108ba9 <try_lock>:
lock_init(lock_t *lock) {
    *lock = 0;
}

static inline bool
try_lock(lock_t *lock) {
c0108ba9:	55                   	push   %ebp
c0108baa:	89 e5                	mov    %esp,%ebp
    return !test_and_set_bit(0, lock);
c0108bac:	ff 75 08             	pushl  0x8(%ebp)
c0108baf:	6a 00                	push   $0x0
c0108bb1:	e8 75 ff ff ff       	call   c0108b2b <test_and_set_bit>
c0108bb6:	83 c4 08             	add    $0x8,%esp
c0108bb9:	85 c0                	test   %eax,%eax
c0108bbb:	0f 94 c0             	sete   %al
c0108bbe:	0f b6 c0             	movzbl %al,%eax
}
c0108bc1:	c9                   	leave  
c0108bc2:	c3                   	ret    

c0108bc3 <lock>:

static inline void
lock(lock_t *lock) {
c0108bc3:	55                   	push   %ebp
c0108bc4:	89 e5                	mov    %esp,%ebp
c0108bc6:	83 ec 08             	sub    $0x8,%esp
    while (!try_lock(lock)) {
c0108bc9:	eb 05                	jmp    c0108bd0 <lock+0xd>
        schedule();
c0108bcb:	e8 36 1c 00 00       	call   c010a806 <schedule>
    return !test_and_set_bit(0, lock);
}

static inline void
lock(lock_t *lock) {
    while (!try_lock(lock)) {
c0108bd0:	83 ec 0c             	sub    $0xc,%esp
c0108bd3:	ff 75 08             	pushl  0x8(%ebp)
c0108bd6:	e8 ce ff ff ff       	call   c0108ba9 <try_lock>
c0108bdb:	83 c4 10             	add    $0x10,%esp
c0108bde:	85 c0                	test   %eax,%eax
c0108be0:	74 e9                	je     c0108bcb <lock+0x8>
        schedule();
    }
}
c0108be2:	90                   	nop
c0108be3:	c9                   	leave  
c0108be4:	c3                   	ret    

c0108be5 <unlock>:

static inline void
unlock(lock_t *lock) {
c0108be5:	55                   	push   %ebp
c0108be6:	89 e5                	mov    %esp,%ebp
c0108be8:	83 ec 08             	sub    $0x8,%esp
    if (!test_and_clear_bit(0, lock)) {
c0108beb:	ff 75 08             	pushl  0x8(%ebp)
c0108bee:	6a 00                	push   $0x0
c0108bf0:	e8 56 ff ff ff       	call   c0108b4b <test_and_clear_bit>
c0108bf5:	83 c4 08             	add    $0x8,%esp
c0108bf8:	85 c0                	test   %eax,%eax
c0108bfa:	75 14                	jne    c0108c10 <unlock+0x2b>
        panic("Unlock failed.\n");
c0108bfc:	83 ec 04             	sub    $0x4,%esp
c0108bff:	68 d8 d9 10 c0       	push   $0xc010d9d8
c0108c04:	6a 34                	push   $0x34
c0108c06:	68 e8 d9 10 c0       	push   $0xc010d9e8
c0108c0b:	e8 ed 77 ff ff       	call   c01003fd <__panic>
    }
}
c0108c10:	90                   	nop
c0108c11:	c9                   	leave  
c0108c12:	c3                   	ret    

c0108c13 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0108c13:	55                   	push   %ebp
c0108c14:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0108c16:	8b 45 08             	mov    0x8(%ebp),%eax
c0108c19:	8b 15 b8 31 1b c0    	mov    0xc01b31b8,%edx
c0108c1f:	29 d0                	sub    %edx,%eax
c0108c21:	c1 f8 05             	sar    $0x5,%eax
}
c0108c24:	5d                   	pop    %ebp
c0108c25:	c3                   	ret    

c0108c26 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0108c26:	55                   	push   %ebp
c0108c27:	89 e5                	mov    %esp,%ebp
    return page2ppn(page) << PGSHIFT;
c0108c29:	ff 75 08             	pushl  0x8(%ebp)
c0108c2c:	e8 e2 ff ff ff       	call   c0108c13 <page2ppn>
c0108c31:	83 c4 04             	add    $0x4,%esp
c0108c34:	c1 e0 0c             	shl    $0xc,%eax
}
c0108c37:	c9                   	leave  
c0108c38:	c3                   	ret    

c0108c39 <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c0108c39:	55                   	push   %ebp
c0108c3a:	89 e5                	mov    %esp,%ebp
c0108c3c:	83 ec 08             	sub    $0x8,%esp
    if (PPN(pa) >= npage) {
c0108c3f:	8b 45 08             	mov    0x8(%ebp),%eax
c0108c42:	c1 e8 0c             	shr    $0xc,%eax
c0108c45:	89 c2                	mov    %eax,%edx
c0108c47:	a1 80 0f 1b c0       	mov    0xc01b0f80,%eax
c0108c4c:	39 c2                	cmp    %eax,%edx
c0108c4e:	72 14                	jb     c0108c64 <pa2page+0x2b>
        panic("pa2page called with invalid pa");
c0108c50:	83 ec 04             	sub    $0x4,%esp
c0108c53:	68 fc d9 10 c0       	push   $0xc010d9fc
c0108c58:	6a 5e                	push   $0x5e
c0108c5a:	68 1b da 10 c0       	push   $0xc010da1b
c0108c5f:	e8 99 77 ff ff       	call   c01003fd <__panic>
    }
    return &pages[PPN(pa)];
c0108c64:	a1 b8 31 1b c0       	mov    0xc01b31b8,%eax
c0108c69:	8b 55 08             	mov    0x8(%ebp),%edx
c0108c6c:	c1 ea 0c             	shr    $0xc,%edx
c0108c6f:	c1 e2 05             	shl    $0x5,%edx
c0108c72:	01 d0                	add    %edx,%eax
}
c0108c74:	c9                   	leave  
c0108c75:	c3                   	ret    

c0108c76 <page2kva>:

static inline void *
page2kva(struct Page *page) {
c0108c76:	55                   	push   %ebp
c0108c77:	89 e5                	mov    %esp,%ebp
c0108c79:	83 ec 18             	sub    $0x18,%esp
    return KADDR(page2pa(page));
c0108c7c:	ff 75 08             	pushl  0x8(%ebp)
c0108c7f:	e8 a2 ff ff ff       	call   c0108c26 <page2pa>
c0108c84:	83 c4 04             	add    $0x4,%esp
c0108c87:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108c8a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108c8d:	c1 e8 0c             	shr    $0xc,%eax
c0108c90:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108c93:	a1 80 0f 1b c0       	mov    0xc01b0f80,%eax
c0108c98:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0108c9b:	72 14                	jb     c0108cb1 <page2kva+0x3b>
c0108c9d:	ff 75 f4             	pushl  -0xc(%ebp)
c0108ca0:	68 2c da 10 c0       	push   $0xc010da2c
c0108ca5:	6a 65                	push   $0x65
c0108ca7:	68 1b da 10 c0       	push   $0xc010da1b
c0108cac:	e8 4c 77 ff ff       	call   c01003fd <__panic>
c0108cb1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108cb4:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c0108cb9:	c9                   	leave  
c0108cba:	c3                   	ret    

c0108cbb <kva2page>:

static inline struct Page *
kva2page(void *kva) {
c0108cbb:	55                   	push   %ebp
c0108cbc:	89 e5                	mov    %esp,%ebp
c0108cbe:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PADDR(kva));
c0108cc1:	8b 45 08             	mov    0x8(%ebp),%eax
c0108cc4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108cc7:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c0108cce:	77 14                	ja     c0108ce4 <kva2page+0x29>
c0108cd0:	ff 75 f4             	pushl  -0xc(%ebp)
c0108cd3:	68 50 da 10 c0       	push   $0xc010da50
c0108cd8:	6a 6a                	push   $0x6a
c0108cda:	68 1b da 10 c0       	push   $0xc010da1b
c0108cdf:	e8 19 77 ff ff       	call   c01003fd <__panic>
c0108ce4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108ce7:	05 00 00 00 40       	add    $0x40000000,%eax
c0108cec:	83 ec 0c             	sub    $0xc,%esp
c0108cef:	50                   	push   %eax
c0108cf0:	e8 44 ff ff ff       	call   c0108c39 <pa2page>
c0108cf5:	83 c4 10             	add    $0x10,%esp
}
c0108cf8:	c9                   	leave  
c0108cf9:	c3                   	ret    

c0108cfa <mm_count_inc>:

static inline int
mm_count_inc(struct mm_struct *mm) {
c0108cfa:	55                   	push   %ebp
c0108cfb:	89 e5                	mov    %esp,%ebp
    mm->mm_count += 1;
c0108cfd:	8b 45 08             	mov    0x8(%ebp),%eax
c0108d00:	8b 40 18             	mov    0x18(%eax),%eax
c0108d03:	8d 50 01             	lea    0x1(%eax),%edx
c0108d06:	8b 45 08             	mov    0x8(%ebp),%eax
c0108d09:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c0108d0c:	8b 45 08             	mov    0x8(%ebp),%eax
c0108d0f:	8b 40 18             	mov    0x18(%eax),%eax
}
c0108d12:	5d                   	pop    %ebp
c0108d13:	c3                   	ret    

c0108d14 <mm_count_dec>:

static inline int
mm_count_dec(struct mm_struct *mm) {
c0108d14:	55                   	push   %ebp
c0108d15:	89 e5                	mov    %esp,%ebp
    mm->mm_count -= 1;
c0108d17:	8b 45 08             	mov    0x8(%ebp),%eax
c0108d1a:	8b 40 18             	mov    0x18(%eax),%eax
c0108d1d:	8d 50 ff             	lea    -0x1(%eax),%edx
c0108d20:	8b 45 08             	mov    0x8(%ebp),%eax
c0108d23:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c0108d26:	8b 45 08             	mov    0x8(%ebp),%eax
c0108d29:	8b 40 18             	mov    0x18(%eax),%eax
}
c0108d2c:	5d                   	pop    %ebp
c0108d2d:	c3                   	ret    

c0108d2e <lock_mm>:

static inline void
lock_mm(struct mm_struct *mm) {
c0108d2e:	55                   	push   %ebp
c0108d2f:	89 e5                	mov    %esp,%ebp
c0108d31:	83 ec 08             	sub    $0x8,%esp
    if (mm != NULL) {
c0108d34:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0108d38:	74 12                	je     c0108d4c <lock_mm+0x1e>
        lock(&(mm->mm_lock));
c0108d3a:	8b 45 08             	mov    0x8(%ebp),%eax
c0108d3d:	83 c0 1c             	add    $0x1c,%eax
c0108d40:	83 ec 0c             	sub    $0xc,%esp
c0108d43:	50                   	push   %eax
c0108d44:	e8 7a fe ff ff       	call   c0108bc3 <lock>
c0108d49:	83 c4 10             	add    $0x10,%esp
    }
}
c0108d4c:	90                   	nop
c0108d4d:	c9                   	leave  
c0108d4e:	c3                   	ret    

c0108d4f <unlock_mm>:

static inline void
unlock_mm(struct mm_struct *mm) {
c0108d4f:	55                   	push   %ebp
c0108d50:	89 e5                	mov    %esp,%ebp
c0108d52:	83 ec 08             	sub    $0x8,%esp
    if (mm != NULL) {
c0108d55:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0108d59:	74 12                	je     c0108d6d <unlock_mm+0x1e>
        unlock(&(mm->mm_lock));
c0108d5b:	8b 45 08             	mov    0x8(%ebp),%eax
c0108d5e:	83 c0 1c             	add    $0x1c,%eax
c0108d61:	83 ec 0c             	sub    $0xc,%esp
c0108d64:	50                   	push   %eax
c0108d65:	e8 7b fe ff ff       	call   c0108be5 <unlock>
c0108d6a:	83 c4 10             	add    $0x10,%esp
    }
}
c0108d6d:	90                   	nop
c0108d6e:	c9                   	leave  
c0108d6f:	c3                   	ret    

c0108d70 <alloc_proc>:
void forkrets(struct trapframe *tf);
void switch_to(struct context *from, struct context *to);

// alloc_proc - alloc a proc_struct and init all fields of proc_struct
static struct proc_struct *
alloc_proc(void) {
c0108d70:	55                   	push   %ebp
c0108d71:	89 e5                	mov    %esp,%ebp
c0108d73:	83 ec 18             	sub    $0x18,%esp
    struct proc_struct *proc = kmalloc(sizeof(struct proc_struct));
c0108d76:	83 ec 0c             	sub    $0xc,%esp
c0108d79:	68 a0 00 00 00       	push   $0xa0
c0108d7e:	e8 ff c3 ff ff       	call   c0105182 <kmalloc>
c0108d83:	83 c4 10             	add    $0x10,%esp
c0108d86:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (proc != NULL) {
c0108d89:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108d8d:	0f 84 32 01 00 00    	je     c0108ec5 <alloc_proc+0x155>
     *     int time_slice;                             // time slice for occupying the CPU
     *     skew_heap_entry_t lab6_run_pool;            // FOR LAB6 ONLY: the entry in the run pool
     *     uint32_t lab6_stride;                       // FOR LAB6 ONLY: the current stride of the process
     *     uint32_t lab6_priority;                     // FOR LAB6 ONLY: the priority of process, set by lab6_set_priority(uint32_t)
     */
        proc->state = PROC_UNINIT;
c0108d93:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108d96:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        proc->pid = -1;         // an invalid pid
c0108d9c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108d9f:	c7 40 04 ff ff ff ff 	movl   $0xffffffff,0x4(%eax)
        proc->runs = 0;
c0108da6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108da9:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        proc->kstack = 0;
c0108db0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108db3:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        proc->need_resched = 0;
c0108dba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108dbd:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
        proc->parent = NULL;
c0108dc4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108dc7:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
        proc->mm = NULL;
c0108dce:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108dd1:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
        proc->tf = NULL;
c0108dd8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108ddb:	c7 40 3c 00 00 00 00 	movl   $0x0,0x3c(%eax)
        proc->cr3 = boot_cr3;   // kernel threads share boot_cr3
c0108de2:	8b 15 b4 31 1b c0    	mov    0xc01b31b4,%edx
c0108de8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108deb:	89 50 40             	mov    %edx,0x40(%eax)
        proc->flags = 0;
c0108dee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108df1:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
        // NEW
        proc->wait_state = 0;
c0108df8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108dfb:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
        proc->cptr = NULL;
c0108e02:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108e05:	c7 40 70 00 00 00 00 	movl   $0x0,0x70(%eax)
        proc->yptr = NULL;
c0108e0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108e0f:	c7 40 74 00 00 00 00 	movl   $0x0,0x74(%eax)
        proc->optr = NULL;
c0108e16:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108e19:	c7 40 78 00 00 00 00 	movl   $0x0,0x78(%eax)
        // NEW IN LAB 6
        proc->rq = NULL;
c0108e20:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108e23:	c7 40 7c 00 00 00 00 	movl   $0x0,0x7c(%eax)
        list_init(&(proc->run_link));
c0108e2a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108e2d:	83 e8 80             	sub    $0xffffff80,%eax
c0108e30:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0108e33:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108e36:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0108e39:	89 50 04             	mov    %edx,0x4(%eax)
c0108e3c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108e3f:	8b 50 04             	mov    0x4(%eax),%edx
c0108e42:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108e45:	89 10                	mov    %edx,(%eax)
        proc->time_slice = 0;
c0108e47:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108e4a:	c7 80 88 00 00 00 00 	movl   $0x0,0x88(%eax)
c0108e51:	00 00 00 
        // for stride
        skew_heap_init(&(proc->lab6_run_pool));
c0108e54:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108e57:	05 8c 00 00 00       	add    $0x8c,%eax
c0108e5c:	89 45 ec             	mov    %eax,-0x14(%ebp)
     compare_f comp) __attribute__((always_inline));

static inline void
skew_heap_init(skew_heap_entry_t *a)
{
     a->left = a->right = a->parent = NULL;
c0108e5f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108e62:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0108e68:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108e6b:	8b 10                	mov    (%eax),%edx
c0108e6d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108e70:	89 50 08             	mov    %edx,0x8(%eax)
c0108e73:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108e76:	8b 50 08             	mov    0x8(%eax),%edx
c0108e79:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108e7c:	89 50 04             	mov    %edx,0x4(%eax)
        proc->lab6_stride = 0;
c0108e7f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108e82:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
c0108e89:	00 00 00 
        proc->lab6_priority = 1;
c0108e8c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108e8f:	c7 80 9c 00 00 00 01 	movl   $0x1,0x9c(%eax)
c0108e96:	00 00 00 

        memset(&(proc->context), 0, sizeof(struct context));
c0108e99:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108e9c:	83 c0 1c             	add    $0x1c,%eax
c0108e9f:	83 ec 04             	sub    $0x4,%esp
c0108ea2:	6a 20                	push   $0x20
c0108ea4:	6a 00                	push   $0x0
c0108ea6:	50                   	push   %eax
c0108ea7:	e8 72 22 00 00       	call   c010b11e <memset>
c0108eac:	83 c4 10             	add    $0x10,%esp
        memset(proc->name, 0, sizeof(char) * (PROC_NAME_LEN + 1));
c0108eaf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108eb2:	83 c0 48             	add    $0x48,%eax
c0108eb5:	83 ec 04             	sub    $0x4,%esp
c0108eb8:	6a 10                	push   $0x10
c0108eba:	6a 00                	push   $0x0
c0108ebc:	50                   	push   %eax
c0108ebd:	e8 5c 22 00 00       	call   c010b11e <memset>
c0108ec2:	83 c4 10             	add    $0x10,%esp
    }
    return proc;
c0108ec5:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0108ec8:	c9                   	leave  
c0108ec9:	c3                   	ret    

c0108eca <set_proc_name>:

// set_proc_name - set the name of proc
char *
set_proc_name(struct proc_struct *proc, const char *name) {
c0108eca:	55                   	push   %ebp
c0108ecb:	89 e5                	mov    %esp,%ebp
c0108ecd:	83 ec 08             	sub    $0x8,%esp
    memset(proc->name, 0, sizeof(proc->name));
c0108ed0:	8b 45 08             	mov    0x8(%ebp),%eax
c0108ed3:	83 c0 48             	add    $0x48,%eax
c0108ed6:	83 ec 04             	sub    $0x4,%esp
c0108ed9:	6a 10                	push   $0x10
c0108edb:	6a 00                	push   $0x0
c0108edd:	50                   	push   %eax
c0108ede:	e8 3b 22 00 00       	call   c010b11e <memset>
c0108ee3:	83 c4 10             	add    $0x10,%esp
    return memcpy(proc->name, name, PROC_NAME_LEN);
c0108ee6:	8b 45 08             	mov    0x8(%ebp),%eax
c0108ee9:	83 c0 48             	add    $0x48,%eax
c0108eec:	83 ec 04             	sub    $0x4,%esp
c0108eef:	6a 0f                	push   $0xf
c0108ef1:	ff 75 0c             	pushl  0xc(%ebp)
c0108ef4:	50                   	push   %eax
c0108ef5:	e8 07 23 00 00       	call   c010b201 <memcpy>
c0108efa:	83 c4 10             	add    $0x10,%esp
}
c0108efd:	c9                   	leave  
c0108efe:	c3                   	ret    

c0108eff <get_proc_name>:

// get_proc_name - get the name of proc
char *
get_proc_name(struct proc_struct *proc) {
c0108eff:	55                   	push   %ebp
c0108f00:	89 e5                	mov    %esp,%ebp
c0108f02:	83 ec 08             	sub    $0x8,%esp
    static char name[PROC_NAME_LEN + 1];
    memset(name, 0, sizeof(name));
c0108f05:	83 ec 04             	sub    $0x4,%esp
c0108f08:	6a 10                	push   $0x10
c0108f0a:	6a 00                	push   $0x0
c0108f0c:	68 44 30 1b c0       	push   $0xc01b3044
c0108f11:	e8 08 22 00 00       	call   c010b11e <memset>
c0108f16:	83 c4 10             	add    $0x10,%esp
    return memcpy(name, proc->name, PROC_NAME_LEN);
c0108f19:	8b 45 08             	mov    0x8(%ebp),%eax
c0108f1c:	83 c0 48             	add    $0x48,%eax
c0108f1f:	83 ec 04             	sub    $0x4,%esp
c0108f22:	6a 0f                	push   $0xf
c0108f24:	50                   	push   %eax
c0108f25:	68 44 30 1b c0       	push   $0xc01b3044
c0108f2a:	e8 d2 22 00 00       	call   c010b201 <memcpy>
c0108f2f:	83 c4 10             	add    $0x10,%esp
}
c0108f32:	c9                   	leave  
c0108f33:	c3                   	ret    

c0108f34 <set_links>:

// set_links - set the relation links of process
static void
set_links(struct proc_struct *proc) {
c0108f34:	55                   	push   %ebp
c0108f35:	89 e5                	mov    %esp,%ebp
c0108f37:	83 ec 20             	sub    $0x20,%esp
    list_add(&proc_list, &(proc->list_link));
c0108f3a:	8b 45 08             	mov    0x8(%ebp),%eax
c0108f3d:	83 c0 58             	add    $0x58,%eax
c0108f40:	c7 45 fc bc 31 1b c0 	movl   $0xc01b31bc,-0x4(%ebp)
c0108f47:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0108f4a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108f4d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108f50:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0108f53:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0108f56:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108f59:	8b 40 04             	mov    0x4(%eax),%eax
c0108f5c:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0108f5f:	89 55 ec             	mov    %edx,-0x14(%ebp)
c0108f62:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108f65:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0108f68:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0108f6b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108f6e:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0108f71:	89 10                	mov    %edx,(%eax)
c0108f73:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108f76:	8b 10                	mov    (%eax),%edx
c0108f78:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108f7b:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0108f7e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108f81:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0108f84:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0108f87:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108f8a:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0108f8d:	89 10                	mov    %edx,(%eax)
    proc->yptr = NULL;
c0108f8f:	8b 45 08             	mov    0x8(%ebp),%eax
c0108f92:	c7 40 74 00 00 00 00 	movl   $0x0,0x74(%eax)
    if ((proc->optr = proc->parent->cptr) != NULL) {
c0108f99:	8b 45 08             	mov    0x8(%ebp),%eax
c0108f9c:	8b 40 14             	mov    0x14(%eax),%eax
c0108f9f:	8b 50 70             	mov    0x70(%eax),%edx
c0108fa2:	8b 45 08             	mov    0x8(%ebp),%eax
c0108fa5:	89 50 78             	mov    %edx,0x78(%eax)
c0108fa8:	8b 45 08             	mov    0x8(%ebp),%eax
c0108fab:	8b 40 78             	mov    0x78(%eax),%eax
c0108fae:	85 c0                	test   %eax,%eax
c0108fb0:	74 0c                	je     c0108fbe <set_links+0x8a>
        proc->optr->yptr = proc;
c0108fb2:	8b 45 08             	mov    0x8(%ebp),%eax
c0108fb5:	8b 40 78             	mov    0x78(%eax),%eax
c0108fb8:	8b 55 08             	mov    0x8(%ebp),%edx
c0108fbb:	89 50 74             	mov    %edx,0x74(%eax)
    }
    proc->parent->cptr = proc;
c0108fbe:	8b 45 08             	mov    0x8(%ebp),%eax
c0108fc1:	8b 40 14             	mov    0x14(%eax),%eax
c0108fc4:	8b 55 08             	mov    0x8(%ebp),%edx
c0108fc7:	89 50 70             	mov    %edx,0x70(%eax)
    nr_process ++;
c0108fca:	a1 40 30 1b c0       	mov    0xc01b3040,%eax
c0108fcf:	83 c0 01             	add    $0x1,%eax
c0108fd2:	a3 40 30 1b c0       	mov    %eax,0xc01b3040
}
c0108fd7:	90                   	nop
c0108fd8:	c9                   	leave  
c0108fd9:	c3                   	ret    

c0108fda <remove_links>:

// remove_links - clean the relation links of process
static void
remove_links(struct proc_struct *proc) {
c0108fda:	55                   	push   %ebp
c0108fdb:	89 e5                	mov    %esp,%ebp
c0108fdd:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->list_link));
c0108fe0:	8b 45 08             	mov    0x8(%ebp),%eax
c0108fe3:	83 c0 58             	add    $0x58,%eax
c0108fe6:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0108fe9:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108fec:	8b 40 04             	mov    0x4(%eax),%eax
c0108fef:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0108ff2:	8b 12                	mov    (%edx),%edx
c0108ff4:	89 55 f8             	mov    %edx,-0x8(%ebp)
c0108ff7:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0108ffa:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0108ffd:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109000:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0109003:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109006:	8b 55 f8             	mov    -0x8(%ebp),%edx
c0109009:	89 10                	mov    %edx,(%eax)
    if (proc->optr != NULL) {
c010900b:	8b 45 08             	mov    0x8(%ebp),%eax
c010900e:	8b 40 78             	mov    0x78(%eax),%eax
c0109011:	85 c0                	test   %eax,%eax
c0109013:	74 0f                	je     c0109024 <remove_links+0x4a>
        proc->optr->yptr = proc->yptr;
c0109015:	8b 45 08             	mov    0x8(%ebp),%eax
c0109018:	8b 40 78             	mov    0x78(%eax),%eax
c010901b:	8b 55 08             	mov    0x8(%ebp),%edx
c010901e:	8b 52 74             	mov    0x74(%edx),%edx
c0109021:	89 50 74             	mov    %edx,0x74(%eax)
    }
    if (proc->yptr != NULL) {
c0109024:	8b 45 08             	mov    0x8(%ebp),%eax
c0109027:	8b 40 74             	mov    0x74(%eax),%eax
c010902a:	85 c0                	test   %eax,%eax
c010902c:	74 11                	je     c010903f <remove_links+0x65>
        proc->yptr->optr = proc->optr;
c010902e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109031:	8b 40 74             	mov    0x74(%eax),%eax
c0109034:	8b 55 08             	mov    0x8(%ebp),%edx
c0109037:	8b 52 78             	mov    0x78(%edx),%edx
c010903a:	89 50 78             	mov    %edx,0x78(%eax)
c010903d:	eb 0f                	jmp    c010904e <remove_links+0x74>
    }
    else {
       proc->parent->cptr = proc->optr;
c010903f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109042:	8b 40 14             	mov    0x14(%eax),%eax
c0109045:	8b 55 08             	mov    0x8(%ebp),%edx
c0109048:	8b 52 78             	mov    0x78(%edx),%edx
c010904b:	89 50 70             	mov    %edx,0x70(%eax)
    }
    nr_process --;
c010904e:	a1 40 30 1b c0       	mov    0xc01b3040,%eax
c0109053:	83 e8 01             	sub    $0x1,%eax
c0109056:	a3 40 30 1b c0       	mov    %eax,0xc01b3040
}
c010905b:	90                   	nop
c010905c:	c9                   	leave  
c010905d:	c3                   	ret    

c010905e <get_pid>:

// get_pid - alloc a unique pid for process
static int
get_pid(void) {
c010905e:	55                   	push   %ebp
c010905f:	89 e5                	mov    %esp,%ebp
c0109061:	83 ec 10             	sub    $0x10,%esp
    static_assert(MAX_PID > MAX_PROCESS);
    struct proc_struct *proc;
    list_entry_t *list = &proc_list, *le;
c0109064:	c7 45 f8 bc 31 1b c0 	movl   $0xc01b31bc,-0x8(%ebp)
    static int next_safe = MAX_PID, last_pid = MAX_PID;
    if (++ last_pid >= MAX_PID) {
c010906b:	a1 78 ca 12 c0       	mov    0xc012ca78,%eax
c0109070:	83 c0 01             	add    $0x1,%eax
c0109073:	a3 78 ca 12 c0       	mov    %eax,0xc012ca78
c0109078:	a1 78 ca 12 c0       	mov    0xc012ca78,%eax
c010907d:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c0109082:	7e 0c                	jle    c0109090 <get_pid+0x32>
        last_pid = 1;
c0109084:	c7 05 78 ca 12 c0 01 	movl   $0x1,0xc012ca78
c010908b:	00 00 00 
        goto inside;
c010908e:	eb 13                	jmp    c01090a3 <get_pid+0x45>
    }
    if (last_pid >= next_safe) {
c0109090:	8b 15 78 ca 12 c0    	mov    0xc012ca78,%edx
c0109096:	a1 7c ca 12 c0       	mov    0xc012ca7c,%eax
c010909b:	39 c2                	cmp    %eax,%edx
c010909d:	0f 8c ac 00 00 00    	jl     c010914f <get_pid+0xf1>
    inside:
        next_safe = MAX_PID;
c01090a3:	c7 05 7c ca 12 c0 00 	movl   $0x2000,0xc012ca7c
c01090aa:	20 00 00 
    repeat:
        le = list;
c01090ad:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01090b0:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while ((le = list_next(le)) != list) {
c01090b3:	eb 7f                	jmp    c0109134 <get_pid+0xd6>
            proc = le2proc(le, list_link);
c01090b5:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01090b8:	83 e8 58             	sub    $0x58,%eax
c01090bb:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (proc->pid == last_pid) {
c01090be:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01090c1:	8b 50 04             	mov    0x4(%eax),%edx
c01090c4:	a1 78 ca 12 c0       	mov    0xc012ca78,%eax
c01090c9:	39 c2                	cmp    %eax,%edx
c01090cb:	75 3e                	jne    c010910b <get_pid+0xad>
                if (++ last_pid >= next_safe) {
c01090cd:	a1 78 ca 12 c0       	mov    0xc012ca78,%eax
c01090d2:	83 c0 01             	add    $0x1,%eax
c01090d5:	a3 78 ca 12 c0       	mov    %eax,0xc012ca78
c01090da:	8b 15 78 ca 12 c0    	mov    0xc012ca78,%edx
c01090e0:	a1 7c ca 12 c0       	mov    0xc012ca7c,%eax
c01090e5:	39 c2                	cmp    %eax,%edx
c01090e7:	7c 4b                	jl     c0109134 <get_pid+0xd6>
                    if (last_pid >= MAX_PID) {
c01090e9:	a1 78 ca 12 c0       	mov    0xc012ca78,%eax
c01090ee:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c01090f3:	7e 0a                	jle    c01090ff <get_pid+0xa1>
                        last_pid = 1;
c01090f5:	c7 05 78 ca 12 c0 01 	movl   $0x1,0xc012ca78
c01090fc:	00 00 00 
                    }
                    next_safe = MAX_PID;
c01090ff:	c7 05 7c ca 12 c0 00 	movl   $0x2000,0xc012ca7c
c0109106:	20 00 00 
                    goto repeat;
c0109109:	eb a2                	jmp    c01090ad <get_pid+0x4f>
                }
            }
            else if (proc->pid > last_pid && next_safe > proc->pid) {
c010910b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010910e:	8b 50 04             	mov    0x4(%eax),%edx
c0109111:	a1 78 ca 12 c0       	mov    0xc012ca78,%eax
c0109116:	39 c2                	cmp    %eax,%edx
c0109118:	7e 1a                	jle    c0109134 <get_pid+0xd6>
c010911a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010911d:	8b 50 04             	mov    0x4(%eax),%edx
c0109120:	a1 7c ca 12 c0       	mov    0xc012ca7c,%eax
c0109125:	39 c2                	cmp    %eax,%edx
c0109127:	7d 0b                	jge    c0109134 <get_pid+0xd6>
                next_safe = proc->pid;
c0109129:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010912c:	8b 40 04             	mov    0x4(%eax),%eax
c010912f:	a3 7c ca 12 c0       	mov    %eax,0xc012ca7c
c0109134:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109137:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010913a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010913d:	8b 40 04             	mov    0x4(%eax),%eax
    if (last_pid >= next_safe) {
    inside:
        next_safe = MAX_PID;
    repeat:
        le = list;
        while ((le = list_next(le)) != list) {
c0109140:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0109143:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109146:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c0109149:	0f 85 66 ff ff ff    	jne    c01090b5 <get_pid+0x57>
            else if (proc->pid > last_pid && next_safe > proc->pid) {
                next_safe = proc->pid;
            }
        }
    }
    return last_pid;
c010914f:	a1 78 ca 12 c0       	mov    0xc012ca78,%eax
}
c0109154:	c9                   	leave  
c0109155:	c3                   	ret    

c0109156 <proc_run>:

// proc_run - make process "proc" running on cpu
// NOTE: before call switch_to, should load  base addr of "proc"'s new PDT
void
proc_run(struct proc_struct *proc) {
c0109156:	55                   	push   %ebp
c0109157:	89 e5                	mov    %esp,%ebp
c0109159:	83 ec 18             	sub    $0x18,%esp
    if (proc != current) {
c010915c:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c0109161:	39 45 08             	cmp    %eax,0x8(%ebp)
c0109164:	74 6b                	je     c01091d1 <proc_run+0x7b>
        bool intr_flag;
        struct proc_struct *prev = current, *next = proc;
c0109166:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010916b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010916e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109171:	89 45 f0             	mov    %eax,-0x10(%ebp)
        local_intr_save(intr_flag);
c0109174:	e8 f2 f9 ff ff       	call   c0108b6b <__intr_save>
c0109179:	89 45 ec             	mov    %eax,-0x14(%ebp)
        {
            current = proc;
c010917c:	8b 45 08             	mov    0x8(%ebp),%eax
c010917f:	a3 28 10 1b c0       	mov    %eax,0xc01b1028
            load_esp0(next->kstack + KSTACKSIZE);
c0109184:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109187:	8b 40 0c             	mov    0xc(%eax),%eax
c010918a:	05 00 20 00 00       	add    $0x2000,%eax
c010918f:	83 ec 0c             	sub    $0xc,%esp
c0109192:	50                   	push   %eax
c0109193:	e8 c0 dd ff ff       	call   c0106f58 <load_esp0>
c0109198:	83 c4 10             	add    $0x10,%esp
            lcr3(next->cr3);
c010919b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010919e:	8b 40 40             	mov    0x40(%eax),%eax
c01091a1:	89 45 e8             	mov    %eax,-0x18(%ebp)
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
}

static inline void
lcr3(uintptr_t cr3) {
    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
c01091a4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01091a7:	0f 22 d8             	mov    %eax,%cr3
            switch_to(&(prev->context), &(next->context));
c01091aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01091ad:	8d 50 1c             	lea    0x1c(%eax),%edx
c01091b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01091b3:	83 c0 1c             	add    $0x1c,%eax
c01091b6:	83 ec 08             	sub    $0x8,%esp
c01091b9:	52                   	push   %edx
c01091ba:	50                   	push   %eax
c01091bb:	e8 34 f9 ff ff       	call   c0108af4 <switch_to>
c01091c0:	83 c4 10             	add    $0x10,%esp
        }
        local_intr_restore(intr_flag);
c01091c3:	83 ec 0c             	sub    $0xc,%esp
c01091c6:	ff 75 ec             	pushl  -0x14(%ebp)
c01091c9:	e8 c7 f9 ff ff       	call   c0108b95 <__intr_restore>
c01091ce:	83 c4 10             	add    $0x10,%esp
    }
}
c01091d1:	90                   	nop
c01091d2:	c9                   	leave  
c01091d3:	c3                   	ret    

c01091d4 <forkret>:

// forkret -- the first kernel entry point of a new thread/process
// NOTE: the addr of forkret is setted in copy_thread function
//       after switch_to, the current proc will execute here.
static void
forkret(void) {
c01091d4:	55                   	push   %ebp
c01091d5:	89 e5                	mov    %esp,%ebp
c01091d7:	83 ec 08             	sub    $0x8,%esp
    forkrets(current->tf);
c01091da:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c01091df:	8b 40 3c             	mov    0x3c(%eax),%eax
c01091e2:	83 ec 0c             	sub    $0xc,%esp
c01091e5:	50                   	push   %eax
c01091e6:	e8 e9 a3 ff ff       	call   c01035d4 <forkrets>
c01091eb:	83 c4 10             	add    $0x10,%esp
}
c01091ee:	90                   	nop
c01091ef:	c9                   	leave  
c01091f0:	c3                   	ret    

c01091f1 <hash_proc>:

// hash_proc - add proc into proc hash_list
static void
hash_proc(struct proc_struct *proc) {
c01091f1:	55                   	push   %ebp
c01091f2:	89 e5                	mov    %esp,%ebp
c01091f4:	53                   	push   %ebx
c01091f5:	83 ec 24             	sub    $0x24,%esp
    list_add(hash_list + pid_hashfn(proc->pid), &(proc->hash_link));
c01091f8:	8b 45 08             	mov    0x8(%ebp),%eax
c01091fb:	8d 58 60             	lea    0x60(%eax),%ebx
c01091fe:	8b 45 08             	mov    0x8(%ebp),%eax
c0109201:	8b 40 04             	mov    0x4(%eax),%eax
c0109204:	83 ec 08             	sub    $0x8,%esp
c0109207:	6a 0a                	push   $0xa
c0109209:	50                   	push   %eax
c010920a:	e8 a6 26 00 00       	call   c010b8b5 <hash32>
c010920f:	83 c4 10             	add    $0x10,%esp
c0109212:	c1 e0 03             	shl    $0x3,%eax
c0109215:	05 40 10 1b c0       	add    $0xc01b1040,%eax
c010921a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010921d:	89 5d f0             	mov    %ebx,-0x10(%ebp)
c0109220:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109223:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0109226:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109229:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010922c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010922f:	8b 40 04             	mov    0x4(%eax),%eax
c0109232:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0109235:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0109238:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010923b:	89 55 e0             	mov    %edx,-0x20(%ebp)
c010923e:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0109241:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0109244:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0109247:	89 10                	mov    %edx,(%eax)
c0109249:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010924c:	8b 10                	mov    (%eax),%edx
c010924e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109251:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0109254:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109257:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010925a:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010925d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109260:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0109263:	89 10                	mov    %edx,(%eax)
}
c0109265:	90                   	nop
c0109266:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0109269:	c9                   	leave  
c010926a:	c3                   	ret    

c010926b <unhash_proc>:

// unhash_proc - delete proc from proc hash_list
static void
unhash_proc(struct proc_struct *proc) {
c010926b:	55                   	push   %ebp
c010926c:	89 e5                	mov    %esp,%ebp
c010926e:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->hash_link));
c0109271:	8b 45 08             	mov    0x8(%ebp),%eax
c0109274:	83 c0 60             	add    $0x60,%eax
c0109277:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010927a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010927d:	8b 40 04             	mov    0x4(%eax),%eax
c0109280:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0109283:	8b 12                	mov    (%edx),%edx
c0109285:	89 55 f8             	mov    %edx,-0x8(%ebp)
c0109288:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010928b:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010928e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109291:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0109294:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109297:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010929a:	89 10                	mov    %edx,(%eax)
}
c010929c:	90                   	nop
c010929d:	c9                   	leave  
c010929e:	c3                   	ret    

c010929f <find_proc>:

// find_proc - find proc frome proc hash_list according to pid
struct proc_struct *
find_proc(int pid) {
c010929f:	55                   	push   %ebp
c01092a0:	89 e5                	mov    %esp,%ebp
c01092a2:	83 ec 18             	sub    $0x18,%esp
    if (0 < pid && pid < MAX_PID) {
c01092a5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01092a9:	7e 5d                	jle    c0109308 <find_proc+0x69>
c01092ab:	81 7d 08 ff 1f 00 00 	cmpl   $0x1fff,0x8(%ebp)
c01092b2:	7f 54                	jg     c0109308 <find_proc+0x69>
        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
c01092b4:	8b 45 08             	mov    0x8(%ebp),%eax
c01092b7:	83 ec 08             	sub    $0x8,%esp
c01092ba:	6a 0a                	push   $0xa
c01092bc:	50                   	push   %eax
c01092bd:	e8 f3 25 00 00       	call   c010b8b5 <hash32>
c01092c2:	83 c4 10             	add    $0x10,%esp
c01092c5:	c1 e0 03             	shl    $0x3,%eax
c01092c8:	05 40 10 1b c0       	add    $0xc01b1040,%eax
c01092cd:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01092d0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01092d3:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while ((le = list_next(le)) != list) {
c01092d6:	eb 19                	jmp    c01092f1 <find_proc+0x52>
            struct proc_struct *proc = le2proc(le, hash_link);
c01092d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01092db:	83 e8 60             	sub    $0x60,%eax
c01092de:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if (proc->pid == pid) {
c01092e1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01092e4:	8b 40 04             	mov    0x4(%eax),%eax
c01092e7:	3b 45 08             	cmp    0x8(%ebp),%eax
c01092ea:	75 05                	jne    c01092f1 <find_proc+0x52>
                return proc;
c01092ec:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01092ef:	eb 1c                	jmp    c010930d <find_proc+0x6e>
c01092f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01092f4:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01092f7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01092fa:	8b 40 04             	mov    0x4(%eax),%eax
// find_proc - find proc frome proc hash_list according to pid
struct proc_struct *
find_proc(int pid) {
    if (0 < pid && pid < MAX_PID) {
        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
        while ((le = list_next(le)) != list) {
c01092fd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109300:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109303:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0109306:	75 d0                	jne    c01092d8 <find_proc+0x39>
            if (proc->pid == pid) {
                return proc;
            }
        }
    }
    return NULL;
c0109308:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010930d:	c9                   	leave  
c010930e:	c3                   	ret    

c010930f <kernel_thread>:

// kernel_thread - create a kernel thread using "fn" function
// NOTE: the contents of temp trapframe tf will be copied to 
//       proc->tf in do_fork-->copy_thread function
int
kernel_thread(int (*fn)(void *), void *arg, uint32_t clone_flags) {
c010930f:	55                   	push   %ebp
c0109310:	89 e5                	mov    %esp,%ebp
c0109312:	83 ec 58             	sub    $0x58,%esp
    struct trapframe tf;
    memset(&tf, 0, sizeof(struct trapframe));
c0109315:	83 ec 04             	sub    $0x4,%esp
c0109318:	6a 4c                	push   $0x4c
c010931a:	6a 00                	push   $0x0
c010931c:	8d 45 ac             	lea    -0x54(%ebp),%eax
c010931f:	50                   	push   %eax
c0109320:	e8 f9 1d 00 00       	call   c010b11e <memset>
c0109325:	83 c4 10             	add    $0x10,%esp
    tf.tf_cs = KERNEL_CS;
c0109328:	66 c7 45 e8 08 00    	movw   $0x8,-0x18(%ebp)
    tf.tf_ds = tf.tf_es = tf.tf_ss = KERNEL_DS;
c010932e:	66 c7 45 f4 10 00    	movw   $0x10,-0xc(%ebp)
c0109334:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c0109338:	66 89 45 d4          	mov    %ax,-0x2c(%ebp)
c010933c:	0f b7 45 d4          	movzwl -0x2c(%ebp),%eax
c0109340:	66 89 45 d8          	mov    %ax,-0x28(%ebp)
    tf.tf_regs.reg_ebx = (uint32_t)fn;
c0109344:	8b 45 08             	mov    0x8(%ebp),%eax
c0109347:	89 45 bc             	mov    %eax,-0x44(%ebp)
    tf.tf_regs.reg_edx = (uint32_t)arg;
c010934a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010934d:	89 45 c0             	mov    %eax,-0x40(%ebp)
    tf.tf_eip = (uint32_t)kernel_thread_entry;
c0109350:	b8 eb 8a 10 c0       	mov    $0xc0108aeb,%eax
c0109355:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return do_fork(clone_flags | CLONE_VM, 0, &tf);
c0109358:	8b 45 10             	mov    0x10(%ebp),%eax
c010935b:	80 cc 01             	or     $0x1,%ah
c010935e:	89 c2                	mov    %eax,%edx
c0109360:	83 ec 04             	sub    $0x4,%esp
c0109363:	8d 45 ac             	lea    -0x54(%ebp),%eax
c0109366:	50                   	push   %eax
c0109367:	6a 00                	push   $0x0
c0109369:	52                   	push   %edx
c010936a:	e8 f2 02 00 00       	call   c0109661 <do_fork>
c010936f:	83 c4 10             	add    $0x10,%esp
}
c0109372:	c9                   	leave  
c0109373:	c3                   	ret    

c0109374 <setup_kstack>:

// setup_kstack - alloc pages with size KSTACKPAGE as process kernel stack
static int
setup_kstack(struct proc_struct *proc) {
c0109374:	55                   	push   %ebp
c0109375:	89 e5                	mov    %esp,%ebp
c0109377:	83 ec 18             	sub    $0x18,%esp
    struct Page *page = alloc_pages(KSTACKPAGE);
c010937a:	83 ec 0c             	sub    $0xc,%esp
c010937d:	6a 02                	push   $0x2
c010937f:	e8 28 dd ff ff       	call   c01070ac <alloc_pages>
c0109384:	83 c4 10             	add    $0x10,%esp
c0109387:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c010938a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010938e:	74 1d                	je     c01093ad <setup_kstack+0x39>
        proc->kstack = (uintptr_t)page2kva(page);
c0109390:	83 ec 0c             	sub    $0xc,%esp
c0109393:	ff 75 f4             	pushl  -0xc(%ebp)
c0109396:	e8 db f8 ff ff       	call   c0108c76 <page2kva>
c010939b:	83 c4 10             	add    $0x10,%esp
c010939e:	89 c2                	mov    %eax,%edx
c01093a0:	8b 45 08             	mov    0x8(%ebp),%eax
c01093a3:	89 50 0c             	mov    %edx,0xc(%eax)
        return 0;
c01093a6:	b8 00 00 00 00       	mov    $0x0,%eax
c01093ab:	eb 05                	jmp    c01093b2 <setup_kstack+0x3e>
    }
    return -E_NO_MEM;
c01093ad:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c01093b2:	c9                   	leave  
c01093b3:	c3                   	ret    

c01093b4 <put_kstack>:

// put_kstack - free the memory space of process kernel stack
static void
put_kstack(struct proc_struct *proc) {
c01093b4:	55                   	push   %ebp
c01093b5:	89 e5                	mov    %esp,%ebp
c01093b7:	83 ec 08             	sub    $0x8,%esp
    free_pages(kva2page((void *)(proc->kstack)), KSTACKPAGE);
c01093ba:	8b 45 08             	mov    0x8(%ebp),%eax
c01093bd:	8b 40 0c             	mov    0xc(%eax),%eax
c01093c0:	83 ec 0c             	sub    $0xc,%esp
c01093c3:	50                   	push   %eax
c01093c4:	e8 f2 f8 ff ff       	call   c0108cbb <kva2page>
c01093c9:	83 c4 10             	add    $0x10,%esp
c01093cc:	83 ec 08             	sub    $0x8,%esp
c01093cf:	6a 02                	push   $0x2
c01093d1:	50                   	push   %eax
c01093d2:	e8 41 dd ff ff       	call   c0107118 <free_pages>
c01093d7:	83 c4 10             	add    $0x10,%esp
}
c01093da:	90                   	nop
c01093db:	c9                   	leave  
c01093dc:	c3                   	ret    

c01093dd <setup_pgdir>:

// setup_pgdir - alloc one page as PDT
static int
setup_pgdir(struct mm_struct *mm) {
c01093dd:	55                   	push   %ebp
c01093de:	89 e5                	mov    %esp,%ebp
c01093e0:	83 ec 18             	sub    $0x18,%esp
    struct Page *page;
    if ((page = alloc_page()) == NULL) {
c01093e3:	83 ec 0c             	sub    $0xc,%esp
c01093e6:	6a 01                	push   $0x1
c01093e8:	e8 bf dc ff ff       	call   c01070ac <alloc_pages>
c01093ed:	83 c4 10             	add    $0x10,%esp
c01093f0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01093f3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01093f7:	75 07                	jne    c0109400 <setup_pgdir+0x23>
        return -E_NO_MEM;
c01093f9:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c01093fe:	eb 74                	jmp    c0109474 <setup_pgdir+0x97>
    }
    pde_t *pgdir = page2kva(page);
c0109400:	83 ec 0c             	sub    $0xc,%esp
c0109403:	ff 75 f4             	pushl  -0xc(%ebp)
c0109406:	e8 6b f8 ff ff       	call   c0108c76 <page2kva>
c010940b:	83 c4 10             	add    $0x10,%esp
c010940e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    memcpy(pgdir, boot_pgdir, PGSIZE);
c0109411:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c0109416:	83 ec 04             	sub    $0x4,%esp
c0109419:	68 00 10 00 00       	push   $0x1000
c010941e:	50                   	push   %eax
c010941f:	ff 75 f0             	pushl  -0x10(%ebp)
c0109422:	e8 da 1d 00 00       	call   c010b201 <memcpy>
c0109427:	83 c4 10             	add    $0x10,%esp
    pgdir[PDX(VPT)] = PADDR(pgdir) | PTE_P | PTE_W;
c010942a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010942d:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
c0109433:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109436:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0109439:	81 7d ec ff ff ff bf 	cmpl   $0xbfffffff,-0x14(%ebp)
c0109440:	77 17                	ja     c0109459 <setup_pgdir+0x7c>
c0109442:	ff 75 ec             	pushl  -0x14(%ebp)
c0109445:	68 50 da 10 c0       	push   $0xc010da50
c010944a:	68 44 01 00 00       	push   $0x144
c010944f:	68 74 da 10 c0       	push   $0xc010da74
c0109454:	e8 a4 6f ff ff       	call   c01003fd <__panic>
c0109459:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010945c:	05 00 00 00 40       	add    $0x40000000,%eax
c0109461:	83 c8 03             	or     $0x3,%eax
c0109464:	89 02                	mov    %eax,(%edx)
    mm->pgdir = pgdir;
c0109466:	8b 45 08             	mov    0x8(%ebp),%eax
c0109469:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010946c:	89 50 0c             	mov    %edx,0xc(%eax)
    return 0;
c010946f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109474:	c9                   	leave  
c0109475:	c3                   	ret    

c0109476 <put_pgdir>:

// put_pgdir - free the memory space of PDT
static void
put_pgdir(struct mm_struct *mm) {
c0109476:	55                   	push   %ebp
c0109477:	89 e5                	mov    %esp,%ebp
c0109479:	83 ec 08             	sub    $0x8,%esp
    free_page(kva2page(mm->pgdir));
c010947c:	8b 45 08             	mov    0x8(%ebp),%eax
c010947f:	8b 40 0c             	mov    0xc(%eax),%eax
c0109482:	83 ec 0c             	sub    $0xc,%esp
c0109485:	50                   	push   %eax
c0109486:	e8 30 f8 ff ff       	call   c0108cbb <kva2page>
c010948b:	83 c4 10             	add    $0x10,%esp
c010948e:	83 ec 08             	sub    $0x8,%esp
c0109491:	6a 01                	push   $0x1
c0109493:	50                   	push   %eax
c0109494:	e8 7f dc ff ff       	call   c0107118 <free_pages>
c0109499:	83 c4 10             	add    $0x10,%esp
}
c010949c:	90                   	nop
c010949d:	c9                   	leave  
c010949e:	c3                   	ret    

c010949f <copy_mm>:

// copy_mm - process "proc" duplicate OR share process "current"'s mm according clone_flags
//         - if clone_flags & CLONE_VM, then "share" ; else "duplicate"
static int
copy_mm(uint32_t clone_flags, struct proc_struct *proc) {
c010949f:	55                   	push   %ebp
c01094a0:	89 e5                	mov    %esp,%ebp
c01094a2:	83 ec 18             	sub    $0x18,%esp
    struct mm_struct *mm, *oldmm = current->mm;
c01094a5:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c01094aa:	8b 40 18             	mov    0x18(%eax),%eax
c01094ad:	89 45 ec             	mov    %eax,-0x14(%ebp)

    /* current is a kernel thread */
    if (oldmm == NULL) {
c01094b0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01094b4:	75 0a                	jne    c01094c0 <copy_mm+0x21>
        return 0;
c01094b6:	b8 00 00 00 00       	mov    $0x0,%eax
c01094bb:	e9 03 01 00 00       	jmp    c01095c3 <copy_mm+0x124>
    }
    if (clone_flags & CLONE_VM) {
c01094c0:	8b 45 08             	mov    0x8(%ebp),%eax
c01094c3:	25 00 01 00 00       	and    $0x100,%eax
c01094c8:	85 c0                	test   %eax,%eax
c01094ca:	74 08                	je     c01094d4 <copy_mm+0x35>
        mm = oldmm;
c01094cc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01094cf:	89 45 f4             	mov    %eax,-0xc(%ebp)
        goto good_mm;
c01094d2:	eb 65                	jmp    c0109539 <copy_mm+0x9a>
    }

    int ret = -E_NO_MEM;
c01094d4:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
    if ((mm = mm_create()) == NULL) {
c01094db:	e8 7c a1 ff ff       	call   c010365c <mm_create>
c01094e0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01094e3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01094e7:	0f 84 d2 00 00 00    	je     c01095bf <copy_mm+0x120>
        goto bad_mm;
    }
    if (setup_pgdir(mm) != 0) {
c01094ed:	83 ec 0c             	sub    $0xc,%esp
c01094f0:	ff 75 f4             	pushl  -0xc(%ebp)
c01094f3:	e8 e5 fe ff ff       	call   c01093dd <setup_pgdir>
c01094f8:	83 c4 10             	add    $0x10,%esp
c01094fb:	85 c0                	test   %eax,%eax
c01094fd:	0f 85 ab 00 00 00    	jne    c01095ae <copy_mm+0x10f>
        goto bad_pgdir_cleanup_mm;
    }

    lock_mm(oldmm);
c0109503:	83 ec 0c             	sub    $0xc,%esp
c0109506:	ff 75 ec             	pushl  -0x14(%ebp)
c0109509:	e8 20 f8 ff ff       	call   c0108d2e <lock_mm>
c010950e:	83 c4 10             	add    $0x10,%esp
    {
        ret = dup_mmap(mm, oldmm);
c0109511:	83 ec 08             	sub    $0x8,%esp
c0109514:	ff 75 ec             	pushl  -0x14(%ebp)
c0109517:	ff 75 f4             	pushl  -0xc(%ebp)
c010951a:	e8 0e a6 ff ff       	call   c0103b2d <dup_mmap>
c010951f:	83 c4 10             	add    $0x10,%esp
c0109522:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    unlock_mm(oldmm);
c0109525:	83 ec 0c             	sub    $0xc,%esp
c0109528:	ff 75 ec             	pushl  -0x14(%ebp)
c010952b:	e8 1f f8 ff ff       	call   c0108d4f <unlock_mm>
c0109530:	83 c4 10             	add    $0x10,%esp

    if (ret != 0) {
c0109533:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0109537:	75 56                	jne    c010958f <copy_mm+0xf0>
        goto bad_dup_cleanup_mmap;
    }

good_mm:
    mm_count_inc(mm);
c0109539:	83 ec 0c             	sub    $0xc,%esp
c010953c:	ff 75 f4             	pushl  -0xc(%ebp)
c010953f:	e8 b6 f7 ff ff       	call   c0108cfa <mm_count_inc>
c0109544:	83 c4 10             	add    $0x10,%esp
    proc->mm = mm;
c0109547:	8b 45 0c             	mov    0xc(%ebp),%eax
c010954a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010954d:	89 50 18             	mov    %edx,0x18(%eax)
    proc->cr3 = PADDR(mm->pgdir);
c0109550:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109553:	8b 40 0c             	mov    0xc(%eax),%eax
c0109556:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0109559:	81 7d e8 ff ff ff bf 	cmpl   $0xbfffffff,-0x18(%ebp)
c0109560:	77 17                	ja     c0109579 <copy_mm+0xda>
c0109562:	ff 75 e8             	pushl  -0x18(%ebp)
c0109565:	68 50 da 10 c0       	push   $0xc010da50
c010956a:	68 73 01 00 00       	push   $0x173
c010956f:	68 74 da 10 c0       	push   $0xc010da74
c0109574:	e8 84 6e ff ff       	call   c01003fd <__panic>
c0109579:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010957c:	8d 90 00 00 00 40    	lea    0x40000000(%eax),%edx
c0109582:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109585:	89 50 40             	mov    %edx,0x40(%eax)
    return 0;
c0109588:	b8 00 00 00 00       	mov    $0x0,%eax
c010958d:	eb 34                	jmp    c01095c3 <copy_mm+0x124>
        ret = dup_mmap(mm, oldmm);
    }
    unlock_mm(oldmm);

    if (ret != 0) {
        goto bad_dup_cleanup_mmap;
c010958f:	90                   	nop
    mm_count_inc(mm);
    proc->mm = mm;
    proc->cr3 = PADDR(mm->pgdir);
    return 0;
bad_dup_cleanup_mmap:
    exit_mmap(mm);
c0109590:	83 ec 0c             	sub    $0xc,%esp
c0109593:	ff 75 f4             	pushl  -0xc(%ebp)
c0109596:	e8 79 a6 ff ff       	call   c0103c14 <exit_mmap>
c010959b:	83 c4 10             	add    $0x10,%esp
    put_pgdir(mm);
c010959e:	83 ec 0c             	sub    $0xc,%esp
c01095a1:	ff 75 f4             	pushl  -0xc(%ebp)
c01095a4:	e8 cd fe ff ff       	call   c0109476 <put_pgdir>
c01095a9:	83 c4 10             	add    $0x10,%esp
c01095ac:	eb 01                	jmp    c01095af <copy_mm+0x110>
    int ret = -E_NO_MEM;
    if ((mm = mm_create()) == NULL) {
        goto bad_mm;
    }
    if (setup_pgdir(mm) != 0) {
        goto bad_pgdir_cleanup_mm;
c01095ae:	90                   	nop
    return 0;
bad_dup_cleanup_mmap:
    exit_mmap(mm);
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
c01095af:	83 ec 0c             	sub    $0xc,%esp
c01095b2:	ff 75 f4             	pushl  -0xc(%ebp)
c01095b5:	e8 cc a3 ff ff       	call   c0103986 <mm_destroy>
c01095ba:	83 c4 10             	add    $0x10,%esp
c01095bd:	eb 01                	jmp    c01095c0 <copy_mm+0x121>
        goto good_mm;
    }

    int ret = -E_NO_MEM;
    if ((mm = mm_create()) == NULL) {
        goto bad_mm;
c01095bf:	90                   	nop
    exit_mmap(mm);
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
bad_mm:
    return ret;
c01095c0:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c01095c3:	c9                   	leave  
c01095c4:	c3                   	ret    

c01095c5 <copy_thread>:

// copy_thread - setup the trapframe on the  process's kernel stack top and
//             - setup the kernel entry point and stack of process
static void
copy_thread(struct proc_struct *proc, uintptr_t esp, struct trapframe *tf) {
c01095c5:	55                   	push   %ebp
c01095c6:	89 e5                	mov    %esp,%ebp
c01095c8:	57                   	push   %edi
c01095c9:	56                   	push   %esi
c01095ca:	53                   	push   %ebx
    proc->tf = (struct trapframe *)(proc->kstack + KSTACKSIZE) - 1;
c01095cb:	8b 45 08             	mov    0x8(%ebp),%eax
c01095ce:	8b 40 0c             	mov    0xc(%eax),%eax
c01095d1:	05 b4 1f 00 00       	add    $0x1fb4,%eax
c01095d6:	89 c2                	mov    %eax,%edx
c01095d8:	8b 45 08             	mov    0x8(%ebp),%eax
c01095db:	89 50 3c             	mov    %edx,0x3c(%eax)
    *(proc->tf) = *tf;
c01095de:	8b 45 08             	mov    0x8(%ebp),%eax
c01095e1:	8b 40 3c             	mov    0x3c(%eax),%eax
c01095e4:	8b 55 10             	mov    0x10(%ebp),%edx
c01095e7:	89 d3                	mov    %edx,%ebx
c01095e9:	ba 4c 00 00 00       	mov    $0x4c,%edx
c01095ee:	8b 0b                	mov    (%ebx),%ecx
c01095f0:	89 08                	mov    %ecx,(%eax)
c01095f2:	8b 4c 13 fc          	mov    -0x4(%ebx,%edx,1),%ecx
c01095f6:	89 4c 10 fc          	mov    %ecx,-0x4(%eax,%edx,1)
c01095fa:	8d 78 04             	lea    0x4(%eax),%edi
c01095fd:	83 e7 fc             	and    $0xfffffffc,%edi
c0109600:	29 f8                	sub    %edi,%eax
c0109602:	29 c3                	sub    %eax,%ebx
c0109604:	01 c2                	add    %eax,%edx
c0109606:	83 e2 fc             	and    $0xfffffffc,%edx
c0109609:	89 d0                	mov    %edx,%eax
c010960b:	c1 e8 02             	shr    $0x2,%eax
c010960e:	89 de                	mov    %ebx,%esi
c0109610:	89 c1                	mov    %eax,%ecx
c0109612:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
    proc->tf->tf_regs.reg_eax = 0;
c0109614:	8b 45 08             	mov    0x8(%ebp),%eax
c0109617:	8b 40 3c             	mov    0x3c(%eax),%eax
c010961a:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    proc->tf->tf_esp = esp;
c0109621:	8b 45 08             	mov    0x8(%ebp),%eax
c0109624:	8b 40 3c             	mov    0x3c(%eax),%eax
c0109627:	8b 55 0c             	mov    0xc(%ebp),%edx
c010962a:	89 50 44             	mov    %edx,0x44(%eax)
    proc->tf->tf_eflags |= FL_IF;
c010962d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109630:	8b 40 3c             	mov    0x3c(%eax),%eax
c0109633:	8b 55 08             	mov    0x8(%ebp),%edx
c0109636:	8b 52 3c             	mov    0x3c(%edx),%edx
c0109639:	8b 52 40             	mov    0x40(%edx),%edx
c010963c:	80 ce 02             	or     $0x2,%dh
c010963f:	89 50 40             	mov    %edx,0x40(%eax)

    proc->context.eip = (uintptr_t)forkret;
c0109642:	ba d4 91 10 c0       	mov    $0xc01091d4,%edx
c0109647:	8b 45 08             	mov    0x8(%ebp),%eax
c010964a:	89 50 1c             	mov    %edx,0x1c(%eax)
    proc->context.esp = (uintptr_t)(proc->tf);
c010964d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109650:	8b 40 3c             	mov    0x3c(%eax),%eax
c0109653:	89 c2                	mov    %eax,%edx
c0109655:	8b 45 08             	mov    0x8(%ebp),%eax
c0109658:	89 50 20             	mov    %edx,0x20(%eax)
}
c010965b:	90                   	nop
c010965c:	5b                   	pop    %ebx
c010965d:	5e                   	pop    %esi
c010965e:	5f                   	pop    %edi
c010965f:	5d                   	pop    %ebp
c0109660:	c3                   	ret    

c0109661 <do_fork>:
 * @clone_flags: used to guide how to clone the child process
 * @stack:       the parent's user stack pointer. if stack==0, It means to fork a kernel thread.
 * @tf:          the trapframe info, which will be copied to child process's proc->tf
 */
int
do_fork(uint32_t clone_flags, uintptr_t stack, struct trapframe *tf) {
c0109661:	55                   	push   %ebp
c0109662:	89 e5                	mov    %esp,%ebp
c0109664:	83 ec 18             	sub    $0x18,%esp
    int ret = -E_NO_FREE_PROC;
c0109667:	c7 45 f4 fb ff ff ff 	movl   $0xfffffffb,-0xc(%ebp)
    struct proc_struct *proc;
    if (nr_process >= MAX_PROCESS) {
c010966e:	a1 40 30 1b c0       	mov    0xc01b3040,%eax
c0109673:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c0109678:	0f 8f e1 00 00 00    	jg     c010975f <do_fork+0xfe>
        goto fork_out;
    }
    ret = -E_NO_MEM;
c010967e:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    *    -------------------
	*    update step 1: set child proc's parent to current process, make sure current process's wait_state is 0
	*    update step 5: insert proc_struct into hash_list && proc_list, set the relation links of process
    */
    //    1. call alloc_proc to allocate a proc_struct
    proc = alloc_proc();
c0109685:	e8 e6 f6 ff ff       	call   c0108d70 <alloc_proc>
c010968a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (proc == NULL) {
c010968d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0109691:	0f 84 cb 00 00 00    	je     c0109762 <do_fork+0x101>
        goto fork_out;
    }
    // update
    assert(current->wait_state == 0);
c0109697:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010969c:	8b 40 6c             	mov    0x6c(%eax),%eax
c010969f:	85 c0                	test   %eax,%eax
c01096a1:	74 19                	je     c01096bc <do_fork+0x5b>
c01096a3:	68 88 da 10 c0       	push   $0xc010da88
c01096a8:	68 a1 da 10 c0       	push   $0xc010daa1
c01096ad:	68 c0 01 00 00       	push   $0x1c0
c01096b2:	68 74 da 10 c0       	push   $0xc010da74
c01096b7:	e8 41 6d ff ff       	call   c01003fd <__panic>
    proc->parent = current;
c01096bc:	8b 15 28 10 1b c0    	mov    0xc01b1028,%edx
c01096c2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01096c5:	89 50 14             	mov    %edx,0x14(%eax)
    //    2. call setup_kstack to allocate a kernel stack for child process
    if (setup_kstack(proc) != 0) {
c01096c8:	83 ec 0c             	sub    $0xc,%esp
c01096cb:	ff 75 f0             	pushl  -0x10(%ebp)
c01096ce:	e8 a1 fc ff ff       	call   c0109374 <setup_kstack>
c01096d3:	83 c4 10             	add    $0x10,%esp
c01096d6:	85 c0                	test   %eax,%eax
c01096d8:	0f 85 9b 00 00 00    	jne    c0109779 <do_fork+0x118>
        goto bad_fork_cleanup_proc;
    }
    //    3. call copy_mm to dup OR share mm according clone_flag
    if (copy_mm(clone_flags, proc) != 0) {
c01096de:	83 ec 08             	sub    $0x8,%esp
c01096e1:	ff 75 f0             	pushl  -0x10(%ebp)
c01096e4:	ff 75 08             	pushl  0x8(%ebp)
c01096e7:	e8 b3 fd ff ff       	call   c010949f <copy_mm>
c01096ec:	83 c4 10             	add    $0x10,%esp
c01096ef:	85 c0                	test   %eax,%eax
c01096f1:	75 75                	jne    c0109768 <do_fork+0x107>
        goto bad_fork_cleanup_kstack;
    }
    //    4. call copy_thread to setup tf & context in proc_struct
    copy_thread(proc, stack, tf);   // note: if stack == 0, this is a kernel thread
c01096f3:	83 ec 04             	sub    $0x4,%esp
c01096f6:	ff 75 10             	pushl  0x10(%ebp)
c01096f9:	ff 75 0c             	pushl  0xc(%ebp)
c01096fc:	ff 75 f0             	pushl  -0x10(%ebp)
c01096ff:	e8 c1 fe ff ff       	call   c01095c5 <copy_thread>
c0109704:	83 c4 10             	add    $0x10,%esp
    //    5. insert proc_struct into hash_list && proc_list
    // this need disabling interrupt
    bool intr_flag;
    local_intr_save(intr_flag);
c0109707:	e8 5f f4 ff ff       	call   c0108b6b <__intr_save>
c010970c:	89 45 ec             	mov    %eax,-0x14(%ebp)
    {
        proc->pid = get_pid();
c010970f:	e8 4a f9 ff ff       	call   c010905e <get_pid>
c0109714:	89 c2                	mov    %eax,%edx
c0109716:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109719:	89 50 04             	mov    %edx,0x4(%eax)
        hash_proc(proc);
c010971c:	83 ec 0c             	sub    $0xc,%esp
c010971f:	ff 75 f0             	pushl  -0x10(%ebp)
c0109722:	e8 ca fa ff ff       	call   c01091f1 <hash_proc>
c0109727:	83 c4 10             	add    $0x10,%esp
        // list_add(&proc_list, &(proc->list_link));
        // nr_process++;
        // update
        set_links(proc);
c010972a:	83 ec 0c             	sub    $0xc,%esp
c010972d:	ff 75 f0             	pushl  -0x10(%ebp)
c0109730:	e8 ff f7 ff ff       	call   c0108f34 <set_links>
c0109735:	83 c4 10             	add    $0x10,%esp
    }
    local_intr_restore(intr_flag);
c0109738:	83 ec 0c             	sub    $0xc,%esp
c010973b:	ff 75 ec             	pushl  -0x14(%ebp)
c010973e:	e8 52 f4 ff ff       	call   c0108b95 <__intr_restore>
c0109743:	83 c4 10             	add    $0x10,%esp
    //    6. call wakeup_proc to make the new child process RUNNABLE
    wakeup_proc(proc);
c0109746:	83 ec 0c             	sub    $0xc,%esp
c0109749:	ff 75 f0             	pushl  -0x10(%ebp)
c010974c:	e8 28 10 00 00       	call   c010a779 <wakeup_proc>
c0109751:	83 c4 10             	add    $0x10,%esp
    //    7. set ret vaule using child proc's pid
    ret = proc->pid;
c0109754:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109757:	8b 40 04             	mov    0x4(%eax),%eax
c010975a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010975d:	eb 04                	jmp    c0109763 <do_fork+0x102>
int
do_fork(uint32_t clone_flags, uintptr_t stack, struct trapframe *tf) {
    int ret = -E_NO_FREE_PROC;
    struct proc_struct *proc;
    if (nr_process >= MAX_PROCESS) {
        goto fork_out;
c010975f:	90                   	nop
c0109760:	eb 01                	jmp    c0109763 <do_fork+0x102>
	*    update step 5: insert proc_struct into hash_list && proc_list, set the relation links of process
    */
    //    1. call alloc_proc to allocate a proc_struct
    proc = alloc_proc();
    if (proc == NULL) {
        goto fork_out;
c0109762:	90                   	nop
    wakeup_proc(proc);
    //    7. set ret vaule using child proc's pid
    ret = proc->pid;
	
fork_out:
    return ret;
c0109763:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109766:	eb 22                	jmp    c010978a <do_fork+0x129>
    if (setup_kstack(proc) != 0) {
        goto bad_fork_cleanup_proc;
    }
    //    3. call copy_mm to dup OR share mm according clone_flag
    if (copy_mm(clone_flags, proc) != 0) {
        goto bad_fork_cleanup_kstack;
c0109768:	90                   	nop
	
fork_out:
    return ret;

bad_fork_cleanup_kstack:
    put_kstack(proc);
c0109769:	83 ec 0c             	sub    $0xc,%esp
c010976c:	ff 75 f0             	pushl  -0x10(%ebp)
c010976f:	e8 40 fc ff ff       	call   c01093b4 <put_kstack>
c0109774:	83 c4 10             	add    $0x10,%esp
c0109777:	eb 01                	jmp    c010977a <do_fork+0x119>
    // update
    assert(current->wait_state == 0);
    proc->parent = current;
    //    2. call setup_kstack to allocate a kernel stack for child process
    if (setup_kstack(proc) != 0) {
        goto bad_fork_cleanup_proc;
c0109779:	90                   	nop
    return ret;

bad_fork_cleanup_kstack:
    put_kstack(proc);
bad_fork_cleanup_proc:
    kfree(proc);
c010977a:	83 ec 0c             	sub    $0xc,%esp
c010977d:	ff 75 f0             	pushl  -0x10(%ebp)
c0109780:	e8 15 ba ff ff       	call   c010519a <kfree>
c0109785:	83 c4 10             	add    $0x10,%esp
    goto fork_out;
c0109788:	eb d9                	jmp    c0109763 <do_fork+0x102>
}
c010978a:	c9                   	leave  
c010978b:	c3                   	ret    

c010978c <do_exit>:
// do_exit - called by sys_exit
//   1. call exit_mmap & put_pgdir & mm_destroy to free the almost all memory space of process
//   2. set process' state as PROC_ZOMBIE, then call wakeup_proc(parent) to ask parent reclaim itself.
//   3. call scheduler to switch to other process
int
do_exit(int error_code) {
c010978c:	55                   	push   %ebp
c010978d:	89 e5                	mov    %esp,%ebp
c010978f:	83 ec 18             	sub    $0x18,%esp
    if (current == idleproc) {
c0109792:	8b 15 28 10 1b c0    	mov    0xc01b1028,%edx
c0109798:	a1 20 10 1b c0       	mov    0xc01b1020,%eax
c010979d:	39 c2                	cmp    %eax,%edx
c010979f:	75 17                	jne    c01097b8 <do_exit+0x2c>
        panic("idleproc exit.\n");
c01097a1:	83 ec 04             	sub    $0x4,%esp
c01097a4:	68 b6 da 10 c0       	push   $0xc010dab6
c01097a9:	68 ef 01 00 00       	push   $0x1ef
c01097ae:	68 74 da 10 c0       	push   $0xc010da74
c01097b3:	e8 45 6c ff ff       	call   c01003fd <__panic>
    }
    if (current == initproc) {
c01097b8:	8b 15 28 10 1b c0    	mov    0xc01b1028,%edx
c01097be:	a1 24 10 1b c0       	mov    0xc01b1024,%eax
c01097c3:	39 c2                	cmp    %eax,%edx
c01097c5:	75 17                	jne    c01097de <do_exit+0x52>
        panic("initproc exit.\n");
c01097c7:	83 ec 04             	sub    $0x4,%esp
c01097ca:	68 c6 da 10 c0       	push   $0xc010dac6
c01097cf:	68 f2 01 00 00       	push   $0x1f2
c01097d4:	68 74 da 10 c0       	push   $0xc010da74
c01097d9:	e8 1f 6c ff ff       	call   c01003fd <__panic>
    }
    
    struct mm_struct *mm = current->mm;
c01097de:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c01097e3:	8b 40 18             	mov    0x18(%eax),%eax
c01097e6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (mm != NULL) {
c01097e9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01097ed:	74 56                	je     c0109845 <do_exit+0xb9>
        lcr3(boot_cr3);
c01097ef:	a1 b4 31 1b c0       	mov    0xc01b31b4,%eax
c01097f4:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01097f7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01097fa:	0f 22 d8             	mov    %eax,%cr3
        if (mm_count_dec(mm) == 0) {
c01097fd:	83 ec 0c             	sub    $0xc,%esp
c0109800:	ff 75 f4             	pushl  -0xc(%ebp)
c0109803:	e8 0c f5 ff ff       	call   c0108d14 <mm_count_dec>
c0109808:	83 c4 10             	add    $0x10,%esp
c010980b:	85 c0                	test   %eax,%eax
c010980d:	75 2a                	jne    c0109839 <do_exit+0xad>
            exit_mmap(mm);
c010980f:	83 ec 0c             	sub    $0xc,%esp
c0109812:	ff 75 f4             	pushl  -0xc(%ebp)
c0109815:	e8 fa a3 ff ff       	call   c0103c14 <exit_mmap>
c010981a:	83 c4 10             	add    $0x10,%esp
            put_pgdir(mm);
c010981d:	83 ec 0c             	sub    $0xc,%esp
c0109820:	ff 75 f4             	pushl  -0xc(%ebp)
c0109823:	e8 4e fc ff ff       	call   c0109476 <put_pgdir>
c0109828:	83 c4 10             	add    $0x10,%esp
            mm_destroy(mm);
c010982b:	83 ec 0c             	sub    $0xc,%esp
c010982e:	ff 75 f4             	pushl  -0xc(%ebp)
c0109831:	e8 50 a1 ff ff       	call   c0103986 <mm_destroy>
c0109836:	83 c4 10             	add    $0x10,%esp
        }
        current->mm = NULL;
c0109839:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010983e:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    current->state = PROC_ZOMBIE;
c0109845:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010984a:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
    current->exit_code = error_code;
c0109850:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c0109855:	8b 55 08             	mov    0x8(%ebp),%edx
c0109858:	89 50 68             	mov    %edx,0x68(%eax)
    
    bool intr_flag;
    struct proc_struct *proc;
    local_intr_save(intr_flag);
c010985b:	e8 0b f3 ff ff       	call   c0108b6b <__intr_save>
c0109860:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        proc = current->parent;
c0109863:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c0109868:	8b 40 14             	mov    0x14(%eax),%eax
c010986b:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (proc->wait_state == WT_CHILD) {
c010986e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109871:	8b 40 6c             	mov    0x6c(%eax),%eax
c0109874:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c0109879:	0f 85 9d 00 00 00    	jne    c010991c <do_exit+0x190>
            wakeup_proc(proc);
c010987f:	83 ec 0c             	sub    $0xc,%esp
c0109882:	ff 75 ec             	pushl  -0x14(%ebp)
c0109885:	e8 ef 0e 00 00       	call   c010a779 <wakeup_proc>
c010988a:	83 c4 10             	add    $0x10,%esp
        }
        while (current->cptr != NULL) {
c010988d:	e9 8a 00 00 00       	jmp    c010991c <do_exit+0x190>
            proc = current->cptr;
c0109892:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c0109897:	8b 40 70             	mov    0x70(%eax),%eax
c010989a:	89 45 ec             	mov    %eax,-0x14(%ebp)
            current->cptr = proc->optr;
c010989d:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c01098a2:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01098a5:	8b 52 78             	mov    0x78(%edx),%edx
c01098a8:	89 50 70             	mov    %edx,0x70(%eax)
    
            proc->yptr = NULL;
c01098ab:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01098ae:	c7 40 74 00 00 00 00 	movl   $0x0,0x74(%eax)
            if ((proc->optr = initproc->cptr) != NULL) {
c01098b5:	a1 24 10 1b c0       	mov    0xc01b1024,%eax
c01098ba:	8b 50 70             	mov    0x70(%eax),%edx
c01098bd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01098c0:	89 50 78             	mov    %edx,0x78(%eax)
c01098c3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01098c6:	8b 40 78             	mov    0x78(%eax),%eax
c01098c9:	85 c0                	test   %eax,%eax
c01098cb:	74 0e                	je     c01098db <do_exit+0x14f>
                initproc->cptr->yptr = proc;
c01098cd:	a1 24 10 1b c0       	mov    0xc01b1024,%eax
c01098d2:	8b 40 70             	mov    0x70(%eax),%eax
c01098d5:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01098d8:	89 50 74             	mov    %edx,0x74(%eax)
            }
            proc->parent = initproc;
c01098db:	8b 15 24 10 1b c0    	mov    0xc01b1024,%edx
c01098e1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01098e4:	89 50 14             	mov    %edx,0x14(%eax)
            initproc->cptr = proc;
c01098e7:	a1 24 10 1b c0       	mov    0xc01b1024,%eax
c01098ec:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01098ef:	89 50 70             	mov    %edx,0x70(%eax)
            if (proc->state == PROC_ZOMBIE) {
c01098f2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01098f5:	8b 00                	mov    (%eax),%eax
c01098f7:	83 f8 03             	cmp    $0x3,%eax
c01098fa:	75 20                	jne    c010991c <do_exit+0x190>
                if (initproc->wait_state == WT_CHILD) {
c01098fc:	a1 24 10 1b c0       	mov    0xc01b1024,%eax
c0109901:	8b 40 6c             	mov    0x6c(%eax),%eax
c0109904:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c0109909:	75 11                	jne    c010991c <do_exit+0x190>
                    wakeup_proc(initproc);
c010990b:	a1 24 10 1b c0       	mov    0xc01b1024,%eax
c0109910:	83 ec 0c             	sub    $0xc,%esp
c0109913:	50                   	push   %eax
c0109914:	e8 60 0e 00 00       	call   c010a779 <wakeup_proc>
c0109919:	83 c4 10             	add    $0x10,%esp
    {
        proc = current->parent;
        if (proc->wait_state == WT_CHILD) {
            wakeup_proc(proc);
        }
        while (current->cptr != NULL) {
c010991c:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c0109921:	8b 40 70             	mov    0x70(%eax),%eax
c0109924:	85 c0                	test   %eax,%eax
c0109926:	0f 85 66 ff ff ff    	jne    c0109892 <do_exit+0x106>
                    wakeup_proc(initproc);
                }
            }
        }
    }
    local_intr_restore(intr_flag);
c010992c:	83 ec 0c             	sub    $0xc,%esp
c010992f:	ff 75 f0             	pushl  -0x10(%ebp)
c0109932:	e8 5e f2 ff ff       	call   c0108b95 <__intr_restore>
c0109937:	83 c4 10             	add    $0x10,%esp
    
    schedule();
c010993a:	e8 c7 0e 00 00       	call   c010a806 <schedule>
    panic("do_exit will not return!! %d.\n", current->pid);
c010993f:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c0109944:	8b 40 04             	mov    0x4(%eax),%eax
c0109947:	50                   	push   %eax
c0109948:	68 d8 da 10 c0       	push   $0xc010dad8
c010994d:	68 1e 02 00 00       	push   $0x21e
c0109952:	68 74 da 10 c0       	push   $0xc010da74
c0109957:	e8 a1 6a ff ff       	call   c01003fd <__panic>

c010995c <load_icode>:
/* load_icode - load the content of binary program(ELF format) as the new content of current process
 * @binary:  the memory addr of the content of binary program
 * @size:  the size of the content of binary program
 */
static int
load_icode(unsigned char *binary, size_t size) {
c010995c:	55                   	push   %ebp
c010995d:	89 e5                	mov    %esp,%ebp
c010995f:	83 ec 58             	sub    $0x58,%esp
    if (current->mm != NULL) {
c0109962:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c0109967:	8b 40 18             	mov    0x18(%eax),%eax
c010996a:	85 c0                	test   %eax,%eax
c010996c:	74 17                	je     c0109985 <load_icode+0x29>
        panic("load_icode: current->mm must be empty.\n");
c010996e:	83 ec 04             	sub    $0x4,%esp
c0109971:	68 f8 da 10 c0       	push   $0xc010daf8
c0109976:	68 28 02 00 00       	push   $0x228
c010997b:	68 74 da 10 c0       	push   $0xc010da74
c0109980:	e8 78 6a ff ff       	call   c01003fd <__panic>
    }

    int ret = -E_NO_MEM;
c0109985:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    struct mm_struct *mm;
    //(1) create a new mm for current process
    if ((mm = mm_create()) == NULL) {
c010998c:	e8 cb 9c ff ff       	call   c010365c <mm_create>
c0109991:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0109994:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c0109998:	0f 84 8d 05 00 00    	je     c0109f2b <load_icode+0x5cf>
        goto bad_mm;
    }
    //(2) create a new PDT, and mm->pgdir= kernel virtual addr of PDT
    if (setup_pgdir(mm) != 0) {
c010999e:	83 ec 0c             	sub    $0xc,%esp
c01099a1:	ff 75 d0             	pushl  -0x30(%ebp)
c01099a4:	e8 34 fa ff ff       	call   c01093dd <setup_pgdir>
c01099a9:	83 c4 10             	add    $0x10,%esp
c01099ac:	85 c0                	test   %eax,%eax
c01099ae:	0f 85 66 05 00 00    	jne    c0109f1a <load_icode+0x5be>
        goto bad_pgdir_cleanup_mm;
    }
    //(3) copy TEXT/DATA section, build BSS parts in binary to memory space of process
    struct Page *page;
    //(3.1) get the file header of the bianry program (ELF format)
    struct elfhdr *elf = (struct elfhdr *)binary;
c01099b4:	8b 45 08             	mov    0x8(%ebp),%eax
c01099b7:	89 45 cc             	mov    %eax,-0x34(%ebp)
    //(3.2) get the entry of the program section headers of the bianry program (ELF format)
    struct proghdr *ph = (struct proghdr *)(binary + elf->e_phoff);
c01099ba:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01099bd:	8b 50 1c             	mov    0x1c(%eax),%edx
c01099c0:	8b 45 08             	mov    0x8(%ebp),%eax
c01099c3:	01 d0                	add    %edx,%eax
c01099c5:	89 45 ec             	mov    %eax,-0x14(%ebp)
    //(3.3) This program is valid?
    if (elf->e_magic != ELF_MAGIC) {
c01099c8:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01099cb:	8b 00                	mov    (%eax),%eax
c01099cd:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
c01099d2:	74 0c                	je     c01099e0 <load_icode+0x84>
        ret = -E_INVAL_ELF;
c01099d4:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
        goto bad_elf_cleanup_pgdir;
c01099db:	e9 2a 05 00 00       	jmp    c0109f0a <load_icode+0x5ae>
    }

    uint32_t vm_flags, perm;
    struct proghdr *ph_end = ph + elf->e_phnum;
c01099e0:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01099e3:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c01099e7:	0f b7 c0             	movzwl %ax,%eax
c01099ea:	c1 e0 05             	shl    $0x5,%eax
c01099ed:	89 c2                	mov    %eax,%edx
c01099ef:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01099f2:	01 d0                	add    %edx,%eax
c01099f4:	89 45 c8             	mov    %eax,-0x38(%ebp)
    for (; ph < ph_end; ph ++) {
c01099f7:	e9 e0 02 00 00       	jmp    c0109cdc <load_icode+0x380>
    //(3.4) find every program section headers
        if (ph->p_type != ELF_PT_LOAD) {
c01099fc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01099ff:	8b 00                	mov    (%eax),%eax
c0109a01:	83 f8 01             	cmp    $0x1,%eax
c0109a04:	0f 85 c7 02 00 00    	jne    c0109cd1 <load_icode+0x375>
            continue ;
        }
        if (ph->p_filesz > ph->p_memsz) {
c0109a0a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109a0d:	8b 50 10             	mov    0x10(%eax),%edx
c0109a10:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109a13:	8b 40 14             	mov    0x14(%eax),%eax
c0109a16:	39 c2                	cmp    %eax,%edx
c0109a18:	76 0c                	jbe    c0109a26 <load_icode+0xca>
            ret = -E_INVAL_ELF;
c0109a1a:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
            goto bad_cleanup_mmap;
c0109a21:	e9 d6 04 00 00       	jmp    c0109efc <load_icode+0x5a0>
        }
        if (ph->p_filesz == 0) {
c0109a26:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109a29:	8b 40 10             	mov    0x10(%eax),%eax
c0109a2c:	85 c0                	test   %eax,%eax
c0109a2e:	0f 84 a0 02 00 00    	je     c0109cd4 <load_icode+0x378>
            continue ;
        }
    //(3.5) call mm_map fun to setup the new vma ( ph->p_va, ph->p_memsz)
        vm_flags = 0, perm = PTE_U;
c0109a34:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c0109a3b:	c7 45 e4 04 00 00 00 	movl   $0x4,-0x1c(%ebp)
        if (ph->p_flags & ELF_PF_X) vm_flags |= VM_EXEC;
c0109a42:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109a45:	8b 40 18             	mov    0x18(%eax),%eax
c0109a48:	83 e0 01             	and    $0x1,%eax
c0109a4b:	85 c0                	test   %eax,%eax
c0109a4d:	74 04                	je     c0109a53 <load_icode+0xf7>
c0109a4f:	83 4d e8 04          	orl    $0x4,-0x18(%ebp)
        if (ph->p_flags & ELF_PF_W) vm_flags |= VM_WRITE;
c0109a53:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109a56:	8b 40 18             	mov    0x18(%eax),%eax
c0109a59:	83 e0 02             	and    $0x2,%eax
c0109a5c:	85 c0                	test   %eax,%eax
c0109a5e:	74 04                	je     c0109a64 <load_icode+0x108>
c0109a60:	83 4d e8 02          	orl    $0x2,-0x18(%ebp)
        if (ph->p_flags & ELF_PF_R) vm_flags |= VM_READ;
c0109a64:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109a67:	8b 40 18             	mov    0x18(%eax),%eax
c0109a6a:	83 e0 04             	and    $0x4,%eax
c0109a6d:	85 c0                	test   %eax,%eax
c0109a6f:	74 04                	je     c0109a75 <load_icode+0x119>
c0109a71:	83 4d e8 01          	orl    $0x1,-0x18(%ebp)
        if (vm_flags & VM_WRITE) perm |= PTE_W;
c0109a75:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109a78:	83 e0 02             	and    $0x2,%eax
c0109a7b:	85 c0                	test   %eax,%eax
c0109a7d:	74 04                	je     c0109a83 <load_icode+0x127>
c0109a7f:	83 4d e4 02          	orl    $0x2,-0x1c(%ebp)
        if ((ret = mm_map(mm, ph->p_va, ph->p_memsz, vm_flags, NULL)) != 0) {
c0109a83:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109a86:	8b 50 14             	mov    0x14(%eax),%edx
c0109a89:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109a8c:	8b 40 08             	mov    0x8(%eax),%eax
c0109a8f:	83 ec 0c             	sub    $0xc,%esp
c0109a92:	6a 00                	push   $0x0
c0109a94:	ff 75 e8             	pushl  -0x18(%ebp)
c0109a97:	52                   	push   %edx
c0109a98:	50                   	push   %eax
c0109a99:	ff 75 d0             	pushl  -0x30(%ebp)
c0109a9c:	e8 84 9f ff ff       	call   c0103a25 <mm_map>
c0109aa1:	83 c4 20             	add    $0x20,%esp
c0109aa4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109aa7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109aab:	0f 85 41 04 00 00    	jne    c0109ef2 <load_icode+0x596>
            goto bad_cleanup_mmap;
        }
        unsigned char *from = binary + ph->p_offset;
c0109ab1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109ab4:	8b 50 04             	mov    0x4(%eax),%edx
c0109ab7:	8b 45 08             	mov    0x8(%ebp),%eax
c0109aba:	01 d0                	add    %edx,%eax
c0109abc:	89 45 e0             	mov    %eax,-0x20(%ebp)
        size_t off, size;
        uintptr_t start = ph->p_va, end, la = ROUNDDOWN(start, PGSIZE);
c0109abf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109ac2:	8b 40 08             	mov    0x8(%eax),%eax
c0109ac5:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0109ac8:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0109acb:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c0109ace:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0109ad1:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0109ad6:	89 45 d4             	mov    %eax,-0x2c(%ebp)

        ret = -E_NO_MEM;
c0109ad9:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
        end = ph->p_va + ph->p_filesz;
c0109ae0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109ae3:	8b 50 08             	mov    0x8(%eax),%edx
c0109ae6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109ae9:	8b 40 10             	mov    0x10(%eax),%eax
c0109aec:	01 d0                	add    %edx,%eax
c0109aee:	89 45 c0             	mov    %eax,-0x40(%ebp)
     //(3.6.1) copy TEXT/DATA section of bianry program
        while (start < end) {
c0109af1:	e9 84 00 00 00       	jmp    c0109b7a <load_icode+0x21e>
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
c0109af6:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0109af9:	8b 40 0c             	mov    0xc(%eax),%eax
c0109afc:	83 ec 04             	sub    $0x4,%esp
c0109aff:	ff 75 e4             	pushl  -0x1c(%ebp)
c0109b02:	ff 75 d4             	pushl  -0x2c(%ebp)
c0109b05:	50                   	push   %eax
c0109b06:	e8 f7 e2 ff ff       	call   c0107e02 <pgdir_alloc_page>
c0109b0b:	83 c4 10             	add    $0x10,%esp
c0109b0e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109b11:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0109b15:	0f 84 da 03 00 00    	je     c0109ef5 <load_icode+0x599>
                goto bad_cleanup_mmap;
            }
            off = start - la, size = PGSIZE - off, la += PGSIZE;
c0109b1b:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0109b1e:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c0109b21:	89 45 bc             	mov    %eax,-0x44(%ebp)
c0109b24:	b8 00 10 00 00       	mov    $0x1000,%eax
c0109b29:	2b 45 bc             	sub    -0x44(%ebp),%eax
c0109b2c:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0109b2f:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
            if (end < la) {
c0109b36:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0109b39:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0109b3c:	73 09                	jae    c0109b47 <load_icode+0x1eb>
                size -= la - end;
c0109b3e:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0109b41:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c0109b44:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memcpy(page2kva(page) + off, from, size);
c0109b47:	83 ec 0c             	sub    $0xc,%esp
c0109b4a:	ff 75 f0             	pushl  -0x10(%ebp)
c0109b4d:	e8 24 f1 ff ff       	call   c0108c76 <page2kva>
c0109b52:	83 c4 10             	add    $0x10,%esp
c0109b55:	89 c2                	mov    %eax,%edx
c0109b57:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0109b5a:	01 d0                	add    %edx,%eax
c0109b5c:	83 ec 04             	sub    $0x4,%esp
c0109b5f:	ff 75 dc             	pushl  -0x24(%ebp)
c0109b62:	ff 75 e0             	pushl  -0x20(%ebp)
c0109b65:	50                   	push   %eax
c0109b66:	e8 96 16 00 00       	call   c010b201 <memcpy>
c0109b6b:	83 c4 10             	add    $0x10,%esp
            start += size, from += size;
c0109b6e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0109b71:	01 45 d8             	add    %eax,-0x28(%ebp)
c0109b74:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0109b77:	01 45 e0             	add    %eax,-0x20(%ebp)
        ret = -E_NO_MEM;

     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
        end = ph->p_va + ph->p_filesz;
     //(3.6.1) copy TEXT/DATA section of bianry program
        while (start < end) {
c0109b7a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0109b7d:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c0109b80:	0f 82 70 ff ff ff    	jb     c0109af6 <load_icode+0x19a>
            memcpy(page2kva(page) + off, from, size);
            start += size, from += size;
        }

      //(3.6.2) build BSS section of binary program
        end = ph->p_va + ph->p_memsz;
c0109b86:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109b89:	8b 50 08             	mov    0x8(%eax),%edx
c0109b8c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109b8f:	8b 40 14             	mov    0x14(%eax),%eax
c0109b92:	01 d0                	add    %edx,%eax
c0109b94:	89 45 c0             	mov    %eax,-0x40(%ebp)
        if (start < la) {
c0109b97:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0109b9a:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0109b9d:	0f 83 20 01 00 00    	jae    c0109cc3 <load_icode+0x367>
            /* ph->p_memsz == ph->p_filesz */
            if (start == end) {
c0109ba3:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0109ba6:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c0109ba9:	0f 84 28 01 00 00    	je     c0109cd7 <load_icode+0x37b>
                continue ;
            }
            off = start + PGSIZE - la, size = PGSIZE - off;
c0109baf:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0109bb2:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c0109bb5:	05 00 10 00 00       	add    $0x1000,%eax
c0109bba:	89 45 bc             	mov    %eax,-0x44(%ebp)
c0109bbd:	b8 00 10 00 00       	mov    $0x1000,%eax
c0109bc2:	2b 45 bc             	sub    -0x44(%ebp),%eax
c0109bc5:	89 45 dc             	mov    %eax,-0x24(%ebp)
            if (end < la) {
c0109bc8:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0109bcb:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0109bce:	73 09                	jae    c0109bd9 <load_icode+0x27d>
                size -= la - end;
c0109bd0:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0109bd3:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c0109bd6:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
c0109bd9:	83 ec 0c             	sub    $0xc,%esp
c0109bdc:	ff 75 f0             	pushl  -0x10(%ebp)
c0109bdf:	e8 92 f0 ff ff       	call   c0108c76 <page2kva>
c0109be4:	83 c4 10             	add    $0x10,%esp
c0109be7:	89 c2                	mov    %eax,%edx
c0109be9:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0109bec:	01 d0                	add    %edx,%eax
c0109bee:	83 ec 04             	sub    $0x4,%esp
c0109bf1:	ff 75 dc             	pushl  -0x24(%ebp)
c0109bf4:	6a 00                	push   $0x0
c0109bf6:	50                   	push   %eax
c0109bf7:	e8 22 15 00 00       	call   c010b11e <memset>
c0109bfc:	83 c4 10             	add    $0x10,%esp
            start += size;
c0109bff:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0109c02:	01 45 d8             	add    %eax,-0x28(%ebp)
            assert((end < la && start == end) || (end >= la && start == la));
c0109c05:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0109c08:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0109c0b:	73 0c                	jae    c0109c19 <load_icode+0x2bd>
c0109c0d:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0109c10:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c0109c13:	0f 84 aa 00 00 00    	je     c0109cc3 <load_icode+0x367>
c0109c19:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0109c1c:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0109c1f:	72 0c                	jb     c0109c2d <load_icode+0x2d1>
c0109c21:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0109c24:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0109c27:	0f 84 96 00 00 00    	je     c0109cc3 <load_icode+0x367>
c0109c2d:	68 20 db 10 c0       	push   $0xc010db20
c0109c32:	68 a1 da 10 c0       	push   $0xc010daa1
c0109c37:	68 7a 02 00 00       	push   $0x27a
c0109c3c:	68 74 da 10 c0       	push   $0xc010da74
c0109c41:	e8 b7 67 ff ff       	call   c01003fd <__panic>
        }
        while (start < end) {
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
c0109c46:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0109c49:	8b 40 0c             	mov    0xc(%eax),%eax
c0109c4c:	83 ec 04             	sub    $0x4,%esp
c0109c4f:	ff 75 e4             	pushl  -0x1c(%ebp)
c0109c52:	ff 75 d4             	pushl  -0x2c(%ebp)
c0109c55:	50                   	push   %eax
c0109c56:	e8 a7 e1 ff ff       	call   c0107e02 <pgdir_alloc_page>
c0109c5b:	83 c4 10             	add    $0x10,%esp
c0109c5e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109c61:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0109c65:	0f 84 8d 02 00 00    	je     c0109ef8 <load_icode+0x59c>
                goto bad_cleanup_mmap;
            }
            off = start - la, size = PGSIZE - off, la += PGSIZE;
c0109c6b:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0109c6e:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c0109c71:	89 45 bc             	mov    %eax,-0x44(%ebp)
c0109c74:	b8 00 10 00 00       	mov    $0x1000,%eax
c0109c79:	2b 45 bc             	sub    -0x44(%ebp),%eax
c0109c7c:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0109c7f:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
            if (end < la) {
c0109c86:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0109c89:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0109c8c:	73 09                	jae    c0109c97 <load_icode+0x33b>
                size -= la - end;
c0109c8e:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0109c91:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c0109c94:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
c0109c97:	83 ec 0c             	sub    $0xc,%esp
c0109c9a:	ff 75 f0             	pushl  -0x10(%ebp)
c0109c9d:	e8 d4 ef ff ff       	call   c0108c76 <page2kva>
c0109ca2:	83 c4 10             	add    $0x10,%esp
c0109ca5:	89 c2                	mov    %eax,%edx
c0109ca7:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0109caa:	01 d0                	add    %edx,%eax
c0109cac:	83 ec 04             	sub    $0x4,%esp
c0109caf:	ff 75 dc             	pushl  -0x24(%ebp)
c0109cb2:	6a 00                	push   $0x0
c0109cb4:	50                   	push   %eax
c0109cb5:	e8 64 14 00 00       	call   c010b11e <memset>
c0109cba:	83 c4 10             	add    $0x10,%esp
            start += size;
c0109cbd:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0109cc0:	01 45 d8             	add    %eax,-0x28(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
            start += size;
            assert((end < la && start == end) || (end >= la && start == la));
        }
        while (start < end) {
c0109cc3:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0109cc6:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c0109cc9:	0f 82 77 ff ff ff    	jb     c0109c46 <load_icode+0x2ea>
c0109ccf:	eb 07                	jmp    c0109cd8 <load_icode+0x37c>
    uint32_t vm_flags, perm;
    struct proghdr *ph_end = ph + elf->e_phnum;
    for (; ph < ph_end; ph ++) {
    //(3.4) find every program section headers
        if (ph->p_type != ELF_PT_LOAD) {
            continue ;
c0109cd1:	90                   	nop
c0109cd2:	eb 04                	jmp    c0109cd8 <load_icode+0x37c>
        if (ph->p_filesz > ph->p_memsz) {
            ret = -E_INVAL_ELF;
            goto bad_cleanup_mmap;
        }
        if (ph->p_filesz == 0) {
            continue ;
c0109cd4:	90                   	nop
c0109cd5:	eb 01                	jmp    c0109cd8 <load_icode+0x37c>
      //(3.6.2) build BSS section of binary program
        end = ph->p_va + ph->p_memsz;
        if (start < la) {
            /* ph->p_memsz == ph->p_filesz */
            if (start == end) {
                continue ;
c0109cd7:	90                   	nop
        goto bad_elf_cleanup_pgdir;
    }

    uint32_t vm_flags, perm;
    struct proghdr *ph_end = ph + elf->e_phnum;
    for (; ph < ph_end; ph ++) {
c0109cd8:	83 45 ec 20          	addl   $0x20,-0x14(%ebp)
c0109cdc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109cdf:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c0109ce2:	0f 82 14 fd ff ff    	jb     c01099fc <load_icode+0xa0>
            memset(page2kva(page) + off, 0, size);
            start += size;
        }
    }
    //(4) build user stack memory
    vm_flags = VM_READ | VM_WRITE | VM_STACK;
c0109ce8:	c7 45 e8 0b 00 00 00 	movl   $0xb,-0x18(%ebp)
    if ((ret = mm_map(mm, USTACKTOP - USTACKSIZE, USTACKSIZE, vm_flags, NULL)) != 0) {
c0109cef:	83 ec 0c             	sub    $0xc,%esp
c0109cf2:	6a 00                	push   $0x0
c0109cf4:	ff 75 e8             	pushl  -0x18(%ebp)
c0109cf7:	68 00 00 10 00       	push   $0x100000
c0109cfc:	68 00 00 f0 af       	push   $0xaff00000
c0109d01:	ff 75 d0             	pushl  -0x30(%ebp)
c0109d04:	e8 1c 9d ff ff       	call   c0103a25 <mm_map>
c0109d09:	83 c4 20             	add    $0x20,%esp
c0109d0c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109d0f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109d13:	0f 85 e2 01 00 00    	jne    c0109efb <load_icode+0x59f>
        goto bad_cleanup_mmap;
    }
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-PGSIZE , PTE_USER) != NULL);
c0109d19:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0109d1c:	8b 40 0c             	mov    0xc(%eax),%eax
c0109d1f:	83 ec 04             	sub    $0x4,%esp
c0109d22:	6a 07                	push   $0x7
c0109d24:	68 00 f0 ff af       	push   $0xaffff000
c0109d29:	50                   	push   %eax
c0109d2a:	e8 d3 e0 ff ff       	call   c0107e02 <pgdir_alloc_page>
c0109d2f:	83 c4 10             	add    $0x10,%esp
c0109d32:	85 c0                	test   %eax,%eax
c0109d34:	75 19                	jne    c0109d4f <load_icode+0x3f3>
c0109d36:	68 5c db 10 c0       	push   $0xc010db5c
c0109d3b:	68 a1 da 10 c0       	push   $0xc010daa1
c0109d40:	68 8d 02 00 00       	push   $0x28d
c0109d45:	68 74 da 10 c0       	push   $0xc010da74
c0109d4a:	e8 ae 66 ff ff       	call   c01003fd <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-2*PGSIZE , PTE_USER) != NULL);
c0109d4f:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0109d52:	8b 40 0c             	mov    0xc(%eax),%eax
c0109d55:	83 ec 04             	sub    $0x4,%esp
c0109d58:	6a 07                	push   $0x7
c0109d5a:	68 00 e0 ff af       	push   $0xafffe000
c0109d5f:	50                   	push   %eax
c0109d60:	e8 9d e0 ff ff       	call   c0107e02 <pgdir_alloc_page>
c0109d65:	83 c4 10             	add    $0x10,%esp
c0109d68:	85 c0                	test   %eax,%eax
c0109d6a:	75 19                	jne    c0109d85 <load_icode+0x429>
c0109d6c:	68 a0 db 10 c0       	push   $0xc010dba0
c0109d71:	68 a1 da 10 c0       	push   $0xc010daa1
c0109d76:	68 8e 02 00 00       	push   $0x28e
c0109d7b:	68 74 da 10 c0       	push   $0xc010da74
c0109d80:	e8 78 66 ff ff       	call   c01003fd <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-3*PGSIZE , PTE_USER) != NULL);
c0109d85:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0109d88:	8b 40 0c             	mov    0xc(%eax),%eax
c0109d8b:	83 ec 04             	sub    $0x4,%esp
c0109d8e:	6a 07                	push   $0x7
c0109d90:	68 00 d0 ff af       	push   $0xafffd000
c0109d95:	50                   	push   %eax
c0109d96:	e8 67 e0 ff ff       	call   c0107e02 <pgdir_alloc_page>
c0109d9b:	83 c4 10             	add    $0x10,%esp
c0109d9e:	85 c0                	test   %eax,%eax
c0109da0:	75 19                	jne    c0109dbb <load_icode+0x45f>
c0109da2:	68 e4 db 10 c0       	push   $0xc010dbe4
c0109da7:	68 a1 da 10 c0       	push   $0xc010daa1
c0109dac:	68 8f 02 00 00       	push   $0x28f
c0109db1:	68 74 da 10 c0       	push   $0xc010da74
c0109db6:	e8 42 66 ff ff       	call   c01003fd <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-4*PGSIZE , PTE_USER) != NULL);
c0109dbb:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0109dbe:	8b 40 0c             	mov    0xc(%eax),%eax
c0109dc1:	83 ec 04             	sub    $0x4,%esp
c0109dc4:	6a 07                	push   $0x7
c0109dc6:	68 00 c0 ff af       	push   $0xafffc000
c0109dcb:	50                   	push   %eax
c0109dcc:	e8 31 e0 ff ff       	call   c0107e02 <pgdir_alloc_page>
c0109dd1:	83 c4 10             	add    $0x10,%esp
c0109dd4:	85 c0                	test   %eax,%eax
c0109dd6:	75 19                	jne    c0109df1 <load_icode+0x495>
c0109dd8:	68 28 dc 10 c0       	push   $0xc010dc28
c0109ddd:	68 a1 da 10 c0       	push   $0xc010daa1
c0109de2:	68 90 02 00 00       	push   $0x290
c0109de7:	68 74 da 10 c0       	push   $0xc010da74
c0109dec:	e8 0c 66 ff ff       	call   c01003fd <__panic>
    
    //(5) set current process's mm, sr3, and set CR3 reg = physical addr of Page Directory
    mm_count_inc(mm);
c0109df1:	83 ec 0c             	sub    $0xc,%esp
c0109df4:	ff 75 d0             	pushl  -0x30(%ebp)
c0109df7:	e8 fe ee ff ff       	call   c0108cfa <mm_count_inc>
c0109dfc:	83 c4 10             	add    $0x10,%esp
    current->mm = mm;
c0109dff:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c0109e04:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0109e07:	89 50 18             	mov    %edx,0x18(%eax)
    current->cr3 = PADDR(mm->pgdir);
c0109e0a:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c0109e0f:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0109e12:	8b 52 0c             	mov    0xc(%edx),%edx
c0109e15:	89 55 b8             	mov    %edx,-0x48(%ebp)
c0109e18:	81 7d b8 ff ff ff bf 	cmpl   $0xbfffffff,-0x48(%ebp)
c0109e1f:	77 17                	ja     c0109e38 <load_icode+0x4dc>
c0109e21:	ff 75 b8             	pushl  -0x48(%ebp)
c0109e24:	68 50 da 10 c0       	push   $0xc010da50
c0109e29:	68 95 02 00 00       	push   $0x295
c0109e2e:	68 74 da 10 c0       	push   $0xc010da74
c0109e33:	e8 c5 65 ff ff       	call   c01003fd <__panic>
c0109e38:	8b 55 b8             	mov    -0x48(%ebp),%edx
c0109e3b:	81 c2 00 00 00 40    	add    $0x40000000,%edx
c0109e41:	89 50 40             	mov    %edx,0x40(%eax)
    lcr3(PADDR(mm->pgdir));
c0109e44:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0109e47:	8b 40 0c             	mov    0xc(%eax),%eax
c0109e4a:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c0109e4d:	81 7d b4 ff ff ff bf 	cmpl   $0xbfffffff,-0x4c(%ebp)
c0109e54:	77 17                	ja     c0109e6d <load_icode+0x511>
c0109e56:	ff 75 b4             	pushl  -0x4c(%ebp)
c0109e59:	68 50 da 10 c0       	push   $0xc010da50
c0109e5e:	68 96 02 00 00       	push   $0x296
c0109e63:	68 74 da 10 c0       	push   $0xc010da74
c0109e68:	e8 90 65 ff ff       	call   c01003fd <__panic>
c0109e6d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0109e70:	05 00 00 00 40       	add    $0x40000000,%eax
c0109e75:	89 45 ac             	mov    %eax,-0x54(%ebp)
c0109e78:	8b 45 ac             	mov    -0x54(%ebp),%eax
c0109e7b:	0f 22 d8             	mov    %eax,%cr3

    //(6) setup trapframe for user environment
    struct trapframe *tf = current->tf;
c0109e7e:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c0109e83:	8b 40 3c             	mov    0x3c(%eax),%eax
c0109e86:	89 45 b0             	mov    %eax,-0x50(%ebp)
    memset(tf, 0, sizeof(struct trapframe));
c0109e89:	83 ec 04             	sub    $0x4,%esp
c0109e8c:	6a 4c                	push   $0x4c
c0109e8e:	6a 00                	push   $0x0
c0109e90:	ff 75 b0             	pushl  -0x50(%ebp)
c0109e93:	e8 86 12 00 00       	call   c010b11e <memset>
c0109e98:	83 c4 10             	add    $0x10,%esp
     *          tf_ds=tf_es=tf_ss should be USER_DS segment
     *          tf_esp should be the top addr of user stack (USTACKTOP)
     *          tf_eip should be the entry point of this binary program (elf->e_entry)
     *          tf_eflags should be set to enable computer to produce Interrupt
     */
    tf->tf_cs = USER_CS;
c0109e9b:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0109e9e:	66 c7 40 3c 1b 00    	movw   $0x1b,0x3c(%eax)
    tf->tf_ds = USER_DS;
c0109ea4:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0109ea7:	66 c7 40 2c 23 00    	movw   $0x23,0x2c(%eax)
    tf->tf_es = USER_DS;
c0109ead:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0109eb0:	66 c7 40 28 23 00    	movw   $0x23,0x28(%eax)
    tf->tf_ss = USER_DS;
c0109eb6:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0109eb9:	66 c7 40 48 23 00    	movw   $0x23,0x48(%eax)
    tf->tf_esp = USTACKTOP;
c0109ebf:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0109ec2:	c7 40 44 00 00 00 b0 	movl   $0xb0000000,0x44(%eax)
    tf->tf_eip = elf->e_entry;
c0109ec9:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0109ecc:	8b 50 18             	mov    0x18(%eax),%edx
c0109ecf:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0109ed2:	89 50 38             	mov    %edx,0x38(%eax)
    tf->tf_eflags |= FL_IF;     // enable intr
c0109ed5:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0109ed8:	8b 40 40             	mov    0x40(%eax),%eax
c0109edb:	80 cc 02             	or     $0x2,%ah
c0109ede:	89 c2                	mov    %eax,%edx
c0109ee0:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0109ee3:	89 50 40             	mov    %edx,0x40(%eax)
    
    ret = 0;
c0109ee6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
out:
    return ret;
c0109eed:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109ef0:	eb 3c                	jmp    c0109f2e <load_icode+0x5d2>
        if (ph->p_flags & ELF_PF_X) vm_flags |= VM_EXEC;
        if (ph->p_flags & ELF_PF_W) vm_flags |= VM_WRITE;
        if (ph->p_flags & ELF_PF_R) vm_flags |= VM_READ;
        if (vm_flags & VM_WRITE) perm |= PTE_W;
        if ((ret = mm_map(mm, ph->p_va, ph->p_memsz, vm_flags, NULL)) != 0) {
            goto bad_cleanup_mmap;
c0109ef2:	90                   	nop
c0109ef3:	eb 07                	jmp    c0109efc <load_icode+0x5a0>
     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
        end = ph->p_va + ph->p_filesz;
     //(3.6.1) copy TEXT/DATA section of bianry program
        while (start < end) {
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
                goto bad_cleanup_mmap;
c0109ef5:	90                   	nop
c0109ef6:	eb 04                	jmp    c0109efc <load_icode+0x5a0>
            start += size;
            assert((end < la && start == end) || (end >= la && start == la));
        }
        while (start < end) {
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
                goto bad_cleanup_mmap;
c0109ef8:	90                   	nop
c0109ef9:	eb 01                	jmp    c0109efc <load_icode+0x5a0>
        }
    }
    //(4) build user stack memory
    vm_flags = VM_READ | VM_WRITE | VM_STACK;
    if ((ret = mm_map(mm, USTACKTOP - USTACKSIZE, USTACKSIZE, vm_flags, NULL)) != 0) {
        goto bad_cleanup_mmap;
c0109efb:	90                   	nop
    
    ret = 0;
out:
    return ret;
bad_cleanup_mmap:
    exit_mmap(mm);
c0109efc:	83 ec 0c             	sub    $0xc,%esp
c0109eff:	ff 75 d0             	pushl  -0x30(%ebp)
c0109f02:	e8 0d 9d ff ff       	call   c0103c14 <exit_mmap>
c0109f07:	83 c4 10             	add    $0x10,%esp
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
c0109f0a:	83 ec 0c             	sub    $0xc,%esp
c0109f0d:	ff 75 d0             	pushl  -0x30(%ebp)
c0109f10:	e8 61 f5 ff ff       	call   c0109476 <put_pgdir>
c0109f15:	83 c4 10             	add    $0x10,%esp
c0109f18:	eb 01                	jmp    c0109f1b <load_icode+0x5bf>
    if ((mm = mm_create()) == NULL) {
        goto bad_mm;
    }
    //(2) create a new PDT, and mm->pgdir= kernel virtual addr of PDT
    if (setup_pgdir(mm) != 0) {
        goto bad_pgdir_cleanup_mm;
c0109f1a:	90                   	nop
bad_cleanup_mmap:
    exit_mmap(mm);
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
c0109f1b:	83 ec 0c             	sub    $0xc,%esp
c0109f1e:	ff 75 d0             	pushl  -0x30(%ebp)
c0109f21:	e8 60 9a ff ff       	call   c0103986 <mm_destroy>
c0109f26:	83 c4 10             	add    $0x10,%esp
bad_mm:
    goto out;
c0109f29:	eb c2                	jmp    c0109eed <load_icode+0x591>

    int ret = -E_NO_MEM;
    struct mm_struct *mm;
    //(1) create a new mm for current process
    if ((mm = mm_create()) == NULL) {
        goto bad_mm;
c0109f2b:	90                   	nop
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
bad_mm:
    goto out;
c0109f2c:	eb bf                	jmp    c0109eed <load_icode+0x591>
}
c0109f2e:	c9                   	leave  
c0109f2f:	c3                   	ret    

c0109f30 <do_execve>:

// do_execve - call exit_mmap(mm)&put_pgdir(mm) to reclaim memory space of current process
//           - call load_icode to setup new memory space accroding binary prog.
int
do_execve(const char *name, size_t len, unsigned char *binary, size_t size) {
c0109f30:	55                   	push   %ebp
c0109f31:	89 e5                	mov    %esp,%ebp
c0109f33:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = current->mm;
c0109f36:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c0109f3b:	8b 40 18             	mov    0x18(%eax),%eax
c0109f3e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!user_mem_check(mm, (uintptr_t)name, len, 0)) {
c0109f41:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f44:	6a 00                	push   $0x0
c0109f46:	ff 75 0c             	pushl  0xc(%ebp)
c0109f49:	50                   	push   %eax
c0109f4a:	ff 75 f4             	pushl  -0xc(%ebp)
c0109f4d:	e8 53 a6 ff ff       	call   c01045a5 <user_mem_check>
c0109f52:	83 c4 10             	add    $0x10,%esp
c0109f55:	85 c0                	test   %eax,%eax
c0109f57:	75 0a                	jne    c0109f63 <do_execve+0x33>
        return -E_INVAL;
c0109f59:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0109f5e:	e9 ed 00 00 00       	jmp    c010a050 <do_execve+0x120>
    }
    if (len > PROC_NAME_LEN) {
c0109f63:	83 7d 0c 0f          	cmpl   $0xf,0xc(%ebp)
c0109f67:	76 07                	jbe    c0109f70 <do_execve+0x40>
        len = PROC_NAME_LEN;
c0109f69:	c7 45 0c 0f 00 00 00 	movl   $0xf,0xc(%ebp)
    }

    char local_name[PROC_NAME_LEN + 1];
    memset(local_name, 0, sizeof(local_name));
c0109f70:	83 ec 04             	sub    $0x4,%esp
c0109f73:	6a 10                	push   $0x10
c0109f75:	6a 00                	push   $0x0
c0109f77:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0109f7a:	50                   	push   %eax
c0109f7b:	e8 9e 11 00 00       	call   c010b11e <memset>
c0109f80:	83 c4 10             	add    $0x10,%esp
    memcpy(local_name, name, len);
c0109f83:	83 ec 04             	sub    $0x4,%esp
c0109f86:	ff 75 0c             	pushl  0xc(%ebp)
c0109f89:	ff 75 08             	pushl  0x8(%ebp)
c0109f8c:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0109f8f:	50                   	push   %eax
c0109f90:	e8 6c 12 00 00       	call   c010b201 <memcpy>
c0109f95:	83 c4 10             	add    $0x10,%esp

    if (mm != NULL) {
c0109f98:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109f9c:	74 56                	je     c0109ff4 <do_execve+0xc4>
        lcr3(boot_cr3);
c0109f9e:	a1 b4 31 1b c0       	mov    0xc01b31b4,%eax
c0109fa3:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0109fa6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109fa9:	0f 22 d8             	mov    %eax,%cr3
        if (mm_count_dec(mm) == 0) {
c0109fac:	83 ec 0c             	sub    $0xc,%esp
c0109faf:	ff 75 f4             	pushl  -0xc(%ebp)
c0109fb2:	e8 5d ed ff ff       	call   c0108d14 <mm_count_dec>
c0109fb7:	83 c4 10             	add    $0x10,%esp
c0109fba:	85 c0                	test   %eax,%eax
c0109fbc:	75 2a                	jne    c0109fe8 <do_execve+0xb8>
            exit_mmap(mm);
c0109fbe:	83 ec 0c             	sub    $0xc,%esp
c0109fc1:	ff 75 f4             	pushl  -0xc(%ebp)
c0109fc4:	e8 4b 9c ff ff       	call   c0103c14 <exit_mmap>
c0109fc9:	83 c4 10             	add    $0x10,%esp
            put_pgdir(mm);
c0109fcc:	83 ec 0c             	sub    $0xc,%esp
c0109fcf:	ff 75 f4             	pushl  -0xc(%ebp)
c0109fd2:	e8 9f f4 ff ff       	call   c0109476 <put_pgdir>
c0109fd7:	83 c4 10             	add    $0x10,%esp
            mm_destroy(mm);
c0109fda:	83 ec 0c             	sub    $0xc,%esp
c0109fdd:	ff 75 f4             	pushl  -0xc(%ebp)
c0109fe0:	e8 a1 99 ff ff       	call   c0103986 <mm_destroy>
c0109fe5:	83 c4 10             	add    $0x10,%esp
        }
        current->mm = NULL;
c0109fe8:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c0109fed:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    int ret;
    if ((ret = load_icode(binary, size)) != 0) {
c0109ff4:	83 ec 08             	sub    $0x8,%esp
c0109ff7:	ff 75 14             	pushl  0x14(%ebp)
c0109ffa:	ff 75 10             	pushl  0x10(%ebp)
c0109ffd:	e8 5a f9 ff ff       	call   c010995c <load_icode>
c010a002:	83 c4 10             	add    $0x10,%esp
c010a005:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010a008:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010a00c:	75 1c                	jne    c010a02a <do_execve+0xfa>
        goto execve_exit;
    }
    set_proc_name(current, local_name);
c010a00e:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010a013:	83 ec 08             	sub    $0x8,%esp
c010a016:	8d 55 dc             	lea    -0x24(%ebp),%edx
c010a019:	52                   	push   %edx
c010a01a:	50                   	push   %eax
c010a01b:	e8 aa ee ff ff       	call   c0108eca <set_proc_name>
c010a020:	83 c4 10             	add    $0x10,%esp
    return 0;
c010a023:	b8 00 00 00 00       	mov    $0x0,%eax
c010a028:	eb 26                	jmp    c010a050 <do_execve+0x120>
        }
        current->mm = NULL;
    }
    int ret;
    if ((ret = load_icode(binary, size)) != 0) {
        goto execve_exit;
c010a02a:	90                   	nop
    }
    set_proc_name(current, local_name);
    return 0;

execve_exit:
    do_exit(ret);
c010a02b:	83 ec 0c             	sub    $0xc,%esp
c010a02e:	ff 75 f0             	pushl  -0x10(%ebp)
c010a031:	e8 56 f7 ff ff       	call   c010978c <do_exit>
c010a036:	83 c4 10             	add    $0x10,%esp
    panic("already exit: %e.\n", ret);
c010a039:	ff 75 f0             	pushl  -0x10(%ebp)
c010a03c:	68 6b dc 10 c0       	push   $0xc010dc6b
c010a041:	68 db 02 00 00       	push   $0x2db
c010a046:	68 74 da 10 c0       	push   $0xc010da74
c010a04b:	e8 ad 63 ff ff       	call   c01003fd <__panic>
}
c010a050:	c9                   	leave  
c010a051:	c3                   	ret    

c010a052 <do_yield>:

// do_yield - ask the scheduler to reschedule
int
do_yield(void) {
c010a052:	55                   	push   %ebp
c010a053:	89 e5                	mov    %esp,%ebp
    current->need_resched = 1;
c010a055:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010a05a:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    return 0;
c010a061:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a066:	5d                   	pop    %ebp
c010a067:	c3                   	ret    

c010a068 <do_wait>:

// do_wait - wait one OR any children with PROC_ZOMBIE state, and free memory space of kernel stack
//         - proc struct of this child.
// NOTE: only after do_wait function, all resources of the child proces are free.
int
do_wait(int pid, int *code_store) {
c010a068:	55                   	push   %ebp
c010a069:	89 e5                	mov    %esp,%ebp
c010a06b:	83 ec 18             	sub    $0x18,%esp
    struct mm_struct *mm = current->mm;
c010a06e:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010a073:	8b 40 18             	mov    0x18(%eax),%eax
c010a076:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (code_store != NULL) {
c010a079:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010a07d:	74 21                	je     c010a0a0 <do_wait+0x38>
        if (!user_mem_check(mm, (uintptr_t)code_store, sizeof(int), 1)) {
c010a07f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a082:	6a 01                	push   $0x1
c010a084:	6a 04                	push   $0x4
c010a086:	50                   	push   %eax
c010a087:	ff 75 ec             	pushl  -0x14(%ebp)
c010a08a:	e8 16 a5 ff ff       	call   c01045a5 <user_mem_check>
c010a08f:	83 c4 10             	add    $0x10,%esp
c010a092:	85 c0                	test   %eax,%eax
c010a094:	75 0a                	jne    c010a0a0 <do_wait+0x38>
            return -E_INVAL;
c010a096:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010a09b:	e9 54 01 00 00       	jmp    c010a1f4 <do_wait+0x18c>
    }

    struct proc_struct *proc;
    bool intr_flag, haskid;
repeat:
    haskid = 0;
c010a0a0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    if (pid != 0) {
c010a0a7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a0ab:	74 39                	je     c010a0e6 <do_wait+0x7e>
        proc = find_proc(pid);
c010a0ad:	83 ec 0c             	sub    $0xc,%esp
c010a0b0:	ff 75 08             	pushl  0x8(%ebp)
c010a0b3:	e8 e7 f1 ff ff       	call   c010929f <find_proc>
c010a0b8:	83 c4 10             	add    $0x10,%esp
c010a0bb:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (proc != NULL && proc->parent == current) {
c010a0be:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a0c2:	74 4f                	je     c010a113 <do_wait+0xab>
c010a0c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a0c7:	8b 50 14             	mov    0x14(%eax),%edx
c010a0ca:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010a0cf:	39 c2                	cmp    %eax,%edx
c010a0d1:	75 40                	jne    c010a113 <do_wait+0xab>
            haskid = 1;
c010a0d3:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c010a0da:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a0dd:	8b 00                	mov    (%eax),%eax
c010a0df:	83 f8 03             	cmp    $0x3,%eax
c010a0e2:	75 2f                	jne    c010a113 <do_wait+0xab>
                goto found;
c010a0e4:	eb 7f                	jmp    c010a165 <do_wait+0xfd>
            }
        }
    }
    else {
        proc = current->cptr;
c010a0e6:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010a0eb:	8b 40 70             	mov    0x70(%eax),%eax
c010a0ee:	89 45 f4             	mov    %eax,-0xc(%ebp)
        for (; proc != NULL; proc = proc->optr) {
c010a0f1:	eb 1a                	jmp    c010a10d <do_wait+0xa5>
            haskid = 1;
c010a0f3:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c010a0fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a0fd:	8b 00                	mov    (%eax),%eax
c010a0ff:	83 f8 03             	cmp    $0x3,%eax
c010a102:	74 60                	je     c010a164 <do_wait+0xfc>
            }
        }
    }
    else {
        proc = current->cptr;
        for (; proc != NULL; proc = proc->optr) {
c010a104:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a107:	8b 40 78             	mov    0x78(%eax),%eax
c010a10a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a10d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a111:	75 e0                	jne    c010a0f3 <do_wait+0x8b>
            if (proc->state == PROC_ZOMBIE) {
                goto found;
            }
        }
    }
    if (haskid) {
c010a113:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010a117:	74 41                	je     c010a15a <do_wait+0xf2>
        current->state = PROC_SLEEPING;
c010a119:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010a11e:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        current->wait_state = WT_CHILD;
c010a124:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010a129:	c7 40 6c 01 00 00 80 	movl   $0x80000001,0x6c(%eax)
        schedule();
c010a130:	e8 d1 06 00 00       	call   c010a806 <schedule>
        if (current->flags & PF_EXITING) {
c010a135:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010a13a:	8b 40 44             	mov    0x44(%eax),%eax
c010a13d:	83 e0 01             	and    $0x1,%eax
c010a140:	85 c0                	test   %eax,%eax
c010a142:	0f 84 58 ff ff ff    	je     c010a0a0 <do_wait+0x38>
            do_exit(-E_KILLED);
c010a148:	83 ec 0c             	sub    $0xc,%esp
c010a14b:	6a f7                	push   $0xfffffff7
c010a14d:	e8 3a f6 ff ff       	call   c010978c <do_exit>
c010a152:	83 c4 10             	add    $0x10,%esp
        }
        goto repeat;
c010a155:	e9 46 ff ff ff       	jmp    c010a0a0 <do_wait+0x38>
    }
    return -E_BAD_PROC;
c010a15a:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
c010a15f:	e9 90 00 00 00       	jmp    c010a1f4 <do_wait+0x18c>
    else {
        proc = current->cptr;
        for (; proc != NULL; proc = proc->optr) {
            haskid = 1;
            if (proc->state == PROC_ZOMBIE) {
                goto found;
c010a164:	90                   	nop
        goto repeat;
    }
    return -E_BAD_PROC;

found:
    if (proc == idleproc || proc == initproc) {
c010a165:	a1 20 10 1b c0       	mov    0xc01b1020,%eax
c010a16a:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010a16d:	74 0a                	je     c010a179 <do_wait+0x111>
c010a16f:	a1 24 10 1b c0       	mov    0xc01b1024,%eax
c010a174:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010a177:	75 17                	jne    c010a190 <do_wait+0x128>
        panic("wait idleproc or initproc.\n");
c010a179:	83 ec 04             	sub    $0x4,%esp
c010a17c:	68 7e dc 10 c0       	push   $0xc010dc7e
c010a181:	68 14 03 00 00       	push   $0x314
c010a186:	68 74 da 10 c0       	push   $0xc010da74
c010a18b:	e8 6d 62 ff ff       	call   c01003fd <__panic>
    }
    if (code_store != NULL) {
c010a190:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010a194:	74 0b                	je     c010a1a1 <do_wait+0x139>
        *code_store = proc->exit_code;
c010a196:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a199:	8b 50 68             	mov    0x68(%eax),%edx
c010a19c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a19f:	89 10                	mov    %edx,(%eax)
    }
    local_intr_save(intr_flag);
c010a1a1:	e8 c5 e9 ff ff       	call   c0108b6b <__intr_save>
c010a1a6:	89 45 e8             	mov    %eax,-0x18(%ebp)
    {
        unhash_proc(proc);
c010a1a9:	83 ec 0c             	sub    $0xc,%esp
c010a1ac:	ff 75 f4             	pushl  -0xc(%ebp)
c010a1af:	e8 b7 f0 ff ff       	call   c010926b <unhash_proc>
c010a1b4:	83 c4 10             	add    $0x10,%esp
        remove_links(proc);
c010a1b7:	83 ec 0c             	sub    $0xc,%esp
c010a1ba:	ff 75 f4             	pushl  -0xc(%ebp)
c010a1bd:	e8 18 ee ff ff       	call   c0108fda <remove_links>
c010a1c2:	83 c4 10             	add    $0x10,%esp
    }
    local_intr_restore(intr_flag);
c010a1c5:	83 ec 0c             	sub    $0xc,%esp
c010a1c8:	ff 75 e8             	pushl  -0x18(%ebp)
c010a1cb:	e8 c5 e9 ff ff       	call   c0108b95 <__intr_restore>
c010a1d0:	83 c4 10             	add    $0x10,%esp
    put_kstack(proc);
c010a1d3:	83 ec 0c             	sub    $0xc,%esp
c010a1d6:	ff 75 f4             	pushl  -0xc(%ebp)
c010a1d9:	e8 d6 f1 ff ff       	call   c01093b4 <put_kstack>
c010a1de:	83 c4 10             	add    $0x10,%esp
    kfree(proc);
c010a1e1:	83 ec 0c             	sub    $0xc,%esp
c010a1e4:	ff 75 f4             	pushl  -0xc(%ebp)
c010a1e7:	e8 ae af ff ff       	call   c010519a <kfree>
c010a1ec:	83 c4 10             	add    $0x10,%esp
    return 0;
c010a1ef:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a1f4:	c9                   	leave  
c010a1f5:	c3                   	ret    

c010a1f6 <do_kill>:

// do_kill - kill process with pid by set this process's flags with PF_EXITING
int
do_kill(int pid) {
c010a1f6:	55                   	push   %ebp
c010a1f7:	89 e5                	mov    %esp,%ebp
c010a1f9:	83 ec 18             	sub    $0x18,%esp
    struct proc_struct *proc;
    if ((proc = find_proc(pid)) != NULL) {
c010a1fc:	83 ec 0c             	sub    $0xc,%esp
c010a1ff:	ff 75 08             	pushl  0x8(%ebp)
c010a202:	e8 98 f0 ff ff       	call   c010929f <find_proc>
c010a207:	83 c4 10             	add    $0x10,%esp
c010a20a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a20d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a211:	74 44                	je     c010a257 <do_kill+0x61>
        if (!(proc->flags & PF_EXITING)) {
c010a213:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a216:	8b 40 44             	mov    0x44(%eax),%eax
c010a219:	83 e0 01             	and    $0x1,%eax
c010a21c:	85 c0                	test   %eax,%eax
c010a21e:	75 30                	jne    c010a250 <do_kill+0x5a>
            proc->flags |= PF_EXITING;
c010a220:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a223:	8b 40 44             	mov    0x44(%eax),%eax
c010a226:	83 c8 01             	or     $0x1,%eax
c010a229:	89 c2                	mov    %eax,%edx
c010a22b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a22e:	89 50 44             	mov    %edx,0x44(%eax)
            if (proc->wait_state & WT_INTERRUPTED) {
c010a231:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a234:	8b 40 6c             	mov    0x6c(%eax),%eax
c010a237:	85 c0                	test   %eax,%eax
c010a239:	79 0e                	jns    c010a249 <do_kill+0x53>
                wakeup_proc(proc);
c010a23b:	83 ec 0c             	sub    $0xc,%esp
c010a23e:	ff 75 f4             	pushl  -0xc(%ebp)
c010a241:	e8 33 05 00 00       	call   c010a779 <wakeup_proc>
c010a246:	83 c4 10             	add    $0x10,%esp
            }
            return 0;
c010a249:	b8 00 00 00 00       	mov    $0x0,%eax
c010a24e:	eb 0c                	jmp    c010a25c <do_kill+0x66>
        }
        return -E_KILLED;
c010a250:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
c010a255:	eb 05                	jmp    c010a25c <do_kill+0x66>
    }
    return -E_INVAL;
c010a257:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c010a25c:	c9                   	leave  
c010a25d:	c3                   	ret    

c010a25e <kernel_execve>:

// kernel_execve - do SYS_exec syscall to exec a user program called by user_main kernel_thread
static int
kernel_execve(const char *name, unsigned char *binary, size_t size) {
c010a25e:	55                   	push   %ebp
c010a25f:	89 e5                	mov    %esp,%ebp
c010a261:	57                   	push   %edi
c010a262:	56                   	push   %esi
c010a263:	53                   	push   %ebx
c010a264:	83 ec 1c             	sub    $0x1c,%esp
    int ret, len = strlen(name);
c010a267:	83 ec 0c             	sub    $0xc,%esp
c010a26a:	ff 75 08             	pushl  0x8(%ebp)
c010a26d:	e8 7b 0b 00 00       	call   c010aded <strlen>
c010a272:	83 c4 10             	add    $0x10,%esp
c010a275:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    asm volatile (
c010a278:	b8 04 00 00 00       	mov    $0x4,%eax
c010a27d:	8b 55 08             	mov    0x8(%ebp),%edx
c010a280:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c010a283:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c010a286:	8b 75 10             	mov    0x10(%ebp),%esi
c010a289:	89 f7                	mov    %esi,%edi
c010a28b:	cd 80                	int    $0x80
c010a28d:	89 45 e0             	mov    %eax,-0x20(%ebp)
        "int %1;"
        : "=a" (ret)
        : "i" (T_SYSCALL), "0" (SYS_exec), "d" (name), "c" (len), "b" (binary), "D" (size)
        : "memory");
    return ret;
c010a290:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
c010a293:	8d 65 f4             	lea    -0xc(%ebp),%esp
c010a296:	5b                   	pop    %ebx
c010a297:	5e                   	pop    %esi
c010a298:	5f                   	pop    %edi
c010a299:	5d                   	pop    %ebp
c010a29a:	c3                   	ret    

c010a29b <user_main>:

#define KERNEL_EXECVE2(x, xstart, xsize)        __KERNEL_EXECVE2(x, xstart, xsize)

// user_main - kernel thread used to exec a user program
static int
user_main(void *arg) {
c010a29b:	55                   	push   %ebp
c010a29c:	89 e5                	mov    %esp,%ebp
c010a29e:	83 ec 08             	sub    $0x8,%esp
#ifdef TEST
    KERNEL_EXECVE2(TEST, TESTSTART, TESTSIZE);
c010a2a1:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010a2a6:	8b 40 04             	mov    0x4(%eax),%eax
c010a2a9:	83 ec 04             	sub    $0x4,%esp
c010a2ac:	68 9a dc 10 c0       	push   $0xc010dc9a
c010a2b1:	50                   	push   %eax
c010a2b2:	68 a4 dc 10 c0       	push   $0xc010dca4
c010a2b7:	e8 db 5f ff ff       	call   c0100297 <cprintf>
c010a2bc:	83 c4 10             	add    $0x10,%esp
c010a2bf:	b8 60 79 00 00       	mov    $0x7960,%eax
c010a2c4:	83 ec 04             	sub    $0x4,%esp
c010a2c7:	50                   	push   %eax
c010a2c8:	68 ac 1c 16 c0       	push   $0xc0161cac
c010a2cd:	68 9a dc 10 c0       	push   $0xc010dc9a
c010a2d2:	e8 87 ff ff ff       	call   c010a25e <kernel_execve>
c010a2d7:	83 c4 10             	add    $0x10,%esp
#else
    KERNEL_EXECVE(exit);
#endif
    panic("user_main execve failed.\n");
c010a2da:	83 ec 04             	sub    $0x4,%esp
c010a2dd:	68 cb dc 10 c0       	push   $0xc010dccb
c010a2e2:	68 5d 03 00 00       	push   $0x35d
c010a2e7:	68 74 da 10 c0       	push   $0xc010da74
c010a2ec:	e8 0c 61 ff ff       	call   c01003fd <__panic>

c010a2f1 <init_main>:
}

// init_main - the second kernel thread used to create user_main kernel threads
static int
init_main(void *arg) {
c010a2f1:	55                   	push   %ebp
c010a2f2:	89 e5                	mov    %esp,%ebp
c010a2f4:	83 ec 28             	sub    $0x28,%esp
    size_t nr_free_pages_store = nr_free_pages();
c010a2f7:	e8 51 ce ff ff       	call   c010714d <nr_free_pages>
c010a2fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
    size_t kernel_allocated_store = kallocated();
c010a2ff:	e8 61 ad ff ff       	call   c0105065 <kallocated>
c010a304:	89 45 f0             	mov    %eax,-0x10(%ebp)

    int pid = kernel_thread(user_main, NULL, 0);
c010a307:	83 ec 04             	sub    $0x4,%esp
c010a30a:	6a 00                	push   $0x0
c010a30c:	6a 00                	push   $0x0
c010a30e:	68 9b a2 10 c0       	push   $0xc010a29b
c010a313:	e8 f7 ef ff ff       	call   c010930f <kernel_thread>
c010a318:	83 c4 10             	add    $0x10,%esp
c010a31b:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (pid <= 0) {
c010a31e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010a322:	7f 1c                	jg     c010a340 <init_main+0x4f>
        panic("create user_main failed.\n");
c010a324:	83 ec 04             	sub    $0x4,%esp
c010a327:	68 e5 dc 10 c0       	push   $0xc010dce5
c010a32c:	68 68 03 00 00       	push   $0x368
c010a331:	68 74 da 10 c0       	push   $0xc010da74
c010a336:	e8 c2 60 ff ff       	call   c01003fd <__panic>
    }

    while (do_wait(0, NULL) == 0) {
        schedule();
c010a33b:	e8 c6 04 00 00       	call   c010a806 <schedule>
    int pid = kernel_thread(user_main, NULL, 0);
    if (pid <= 0) {
        panic("create user_main failed.\n");
    }

    while (do_wait(0, NULL) == 0) {
c010a340:	83 ec 08             	sub    $0x8,%esp
c010a343:	6a 00                	push   $0x0
c010a345:	6a 00                	push   $0x0
c010a347:	e8 1c fd ff ff       	call   c010a068 <do_wait>
c010a34c:	83 c4 10             	add    $0x10,%esp
c010a34f:	85 c0                	test   %eax,%eax
c010a351:	74 e8                	je     c010a33b <init_main+0x4a>
        schedule();
    }

    cprintf("all user-mode processes have quit.\n");
c010a353:	83 ec 0c             	sub    $0xc,%esp
c010a356:	68 00 dd 10 c0       	push   $0xc010dd00
c010a35b:	e8 37 5f ff ff       	call   c0100297 <cprintf>
c010a360:	83 c4 10             	add    $0x10,%esp
    assert(initproc->cptr == NULL && initproc->yptr == NULL && initproc->optr == NULL);
c010a363:	a1 24 10 1b c0       	mov    0xc01b1024,%eax
c010a368:	8b 40 70             	mov    0x70(%eax),%eax
c010a36b:	85 c0                	test   %eax,%eax
c010a36d:	75 18                	jne    c010a387 <init_main+0x96>
c010a36f:	a1 24 10 1b c0       	mov    0xc01b1024,%eax
c010a374:	8b 40 74             	mov    0x74(%eax),%eax
c010a377:	85 c0                	test   %eax,%eax
c010a379:	75 0c                	jne    c010a387 <init_main+0x96>
c010a37b:	a1 24 10 1b c0       	mov    0xc01b1024,%eax
c010a380:	8b 40 78             	mov    0x78(%eax),%eax
c010a383:	85 c0                	test   %eax,%eax
c010a385:	74 19                	je     c010a3a0 <init_main+0xaf>
c010a387:	68 24 dd 10 c0       	push   $0xc010dd24
c010a38c:	68 a1 da 10 c0       	push   $0xc010daa1
c010a391:	68 70 03 00 00       	push   $0x370
c010a396:	68 74 da 10 c0       	push   $0xc010da74
c010a39b:	e8 5d 60 ff ff       	call   c01003fd <__panic>
    assert(nr_process == 2);
c010a3a0:	a1 40 30 1b c0       	mov    0xc01b3040,%eax
c010a3a5:	83 f8 02             	cmp    $0x2,%eax
c010a3a8:	74 19                	je     c010a3c3 <init_main+0xd2>
c010a3aa:	68 6f dd 10 c0       	push   $0xc010dd6f
c010a3af:	68 a1 da 10 c0       	push   $0xc010daa1
c010a3b4:	68 71 03 00 00       	push   $0x371
c010a3b9:	68 74 da 10 c0       	push   $0xc010da74
c010a3be:	e8 3a 60 ff ff       	call   c01003fd <__panic>
c010a3c3:	c7 45 e4 bc 31 1b c0 	movl   $0xc01b31bc,-0x1c(%ebp)
c010a3ca:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a3cd:	8b 40 04             	mov    0x4(%eax),%eax
    assert(list_next(&proc_list) == &(initproc->list_link));
c010a3d0:	8b 15 24 10 1b c0    	mov    0xc01b1024,%edx
c010a3d6:	83 c2 58             	add    $0x58,%edx
c010a3d9:	39 d0                	cmp    %edx,%eax
c010a3db:	74 19                	je     c010a3f6 <init_main+0x105>
c010a3dd:	68 80 dd 10 c0       	push   $0xc010dd80
c010a3e2:	68 a1 da 10 c0       	push   $0xc010daa1
c010a3e7:	68 72 03 00 00       	push   $0x372
c010a3ec:	68 74 da 10 c0       	push   $0xc010da74
c010a3f1:	e8 07 60 ff ff       	call   c01003fd <__panic>
c010a3f6:	c7 45 e8 bc 31 1b c0 	movl   $0xc01b31bc,-0x18(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c010a3fd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a400:	8b 00                	mov    (%eax),%eax
    assert(list_prev(&proc_list) == &(initproc->list_link));
c010a402:	8b 15 24 10 1b c0    	mov    0xc01b1024,%edx
c010a408:	83 c2 58             	add    $0x58,%edx
c010a40b:	39 d0                	cmp    %edx,%eax
c010a40d:	74 19                	je     c010a428 <init_main+0x137>
c010a40f:	68 b0 dd 10 c0       	push   $0xc010ddb0
c010a414:	68 a1 da 10 c0       	push   $0xc010daa1
c010a419:	68 73 03 00 00       	push   $0x373
c010a41e:	68 74 da 10 c0       	push   $0xc010da74
c010a423:	e8 d5 5f ff ff       	call   c01003fd <__panic>

    cprintf("init check memory pass.\n");
c010a428:	83 ec 0c             	sub    $0xc,%esp
c010a42b:	68 e0 dd 10 c0       	push   $0xc010dde0
c010a430:	e8 62 5e ff ff       	call   c0100297 <cprintf>
c010a435:	83 c4 10             	add    $0x10,%esp
    return 0;
c010a438:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a43d:	c9                   	leave  
c010a43e:	c3                   	ret    

c010a43f <proc_init>:

// proc_init - set up the first kernel thread idleproc "idle" by itself and 
//           - create the second kernel thread init_main
void
proc_init(void) {
c010a43f:	55                   	push   %ebp
c010a440:	89 e5                	mov    %esp,%ebp
c010a442:	83 ec 18             	sub    $0x18,%esp
c010a445:	c7 45 e8 bc 31 1b c0 	movl   $0xc01b31bc,-0x18(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010a44c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a44f:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010a452:	89 50 04             	mov    %edx,0x4(%eax)
c010a455:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a458:	8b 50 04             	mov    0x4(%eax),%edx
c010a45b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a45e:	89 10                	mov    %edx,(%eax)
    int i;

    list_init(&proc_list);
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c010a460:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010a467:	eb 26                	jmp    c010a48f <proc_init+0x50>
        list_init(hash_list + i);
c010a469:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a46c:	c1 e0 03             	shl    $0x3,%eax
c010a46f:	05 40 10 1b c0       	add    $0xc01b1040,%eax
c010a474:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010a477:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a47a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010a47d:	89 50 04             	mov    %edx,0x4(%eax)
c010a480:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a483:	8b 50 04             	mov    0x4(%eax),%edx
c010a486:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a489:	89 10                	mov    %edx,(%eax)
void
proc_init(void) {
    int i;

    list_init(&proc_list);
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c010a48b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010a48f:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
c010a496:	7e d1                	jle    c010a469 <proc_init+0x2a>
        list_init(hash_list + i);
    }

    if ((idleproc = alloc_proc()) == NULL) {
c010a498:	e8 d3 e8 ff ff       	call   c0108d70 <alloc_proc>
c010a49d:	a3 20 10 1b c0       	mov    %eax,0xc01b1020
c010a4a2:	a1 20 10 1b c0       	mov    0xc01b1020,%eax
c010a4a7:	85 c0                	test   %eax,%eax
c010a4a9:	75 17                	jne    c010a4c2 <proc_init+0x83>
        panic("cannot alloc idleproc.\n");
c010a4ab:	83 ec 04             	sub    $0x4,%esp
c010a4ae:	68 f9 dd 10 c0       	push   $0xc010ddf9
c010a4b3:	68 85 03 00 00       	push   $0x385
c010a4b8:	68 74 da 10 c0       	push   $0xc010da74
c010a4bd:	e8 3b 5f ff ff       	call   c01003fd <__panic>
    }

    idleproc->pid = 0;
c010a4c2:	a1 20 10 1b c0       	mov    0xc01b1020,%eax
c010a4c7:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    idleproc->state = PROC_RUNNABLE;
c010a4ce:	a1 20 10 1b c0       	mov    0xc01b1020,%eax
c010a4d3:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    idleproc->kstack = (uintptr_t)bootstack;
c010a4d9:	a1 20 10 1b c0       	mov    0xc01b1020,%eax
c010a4de:	ba 00 a0 12 c0       	mov    $0xc012a000,%edx
c010a4e3:	89 50 0c             	mov    %edx,0xc(%eax)
    idleproc->need_resched = 1;
c010a4e6:	a1 20 10 1b c0       	mov    0xc01b1020,%eax
c010a4eb:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    set_proc_name(idleproc, "idle");
c010a4f2:	a1 20 10 1b c0       	mov    0xc01b1020,%eax
c010a4f7:	83 ec 08             	sub    $0x8,%esp
c010a4fa:	68 11 de 10 c0       	push   $0xc010de11
c010a4ff:	50                   	push   %eax
c010a500:	e8 c5 e9 ff ff       	call   c0108eca <set_proc_name>
c010a505:	83 c4 10             	add    $0x10,%esp
    nr_process ++;
c010a508:	a1 40 30 1b c0       	mov    0xc01b3040,%eax
c010a50d:	83 c0 01             	add    $0x1,%eax
c010a510:	a3 40 30 1b c0       	mov    %eax,0xc01b3040

    current = idleproc;
c010a515:	a1 20 10 1b c0       	mov    0xc01b1020,%eax
c010a51a:	a3 28 10 1b c0       	mov    %eax,0xc01b1028

    int pid = kernel_thread(init_main, NULL, 0);
c010a51f:	83 ec 04             	sub    $0x4,%esp
c010a522:	6a 00                	push   $0x0
c010a524:	6a 00                	push   $0x0
c010a526:	68 f1 a2 10 c0       	push   $0xc010a2f1
c010a52b:	e8 df ed ff ff       	call   c010930f <kernel_thread>
c010a530:	83 c4 10             	add    $0x10,%esp
c010a533:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (pid <= 0) {
c010a536:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010a53a:	7f 17                	jg     c010a553 <proc_init+0x114>
        panic("create init_main failed.\n");
c010a53c:	83 ec 04             	sub    $0x4,%esp
c010a53f:	68 16 de 10 c0       	push   $0xc010de16
c010a544:	68 93 03 00 00       	push   $0x393
c010a549:	68 74 da 10 c0       	push   $0xc010da74
c010a54e:	e8 aa 5e ff ff       	call   c01003fd <__panic>
    }

    initproc = find_proc(pid);
c010a553:	83 ec 0c             	sub    $0xc,%esp
c010a556:	ff 75 ec             	pushl  -0x14(%ebp)
c010a559:	e8 41 ed ff ff       	call   c010929f <find_proc>
c010a55e:	83 c4 10             	add    $0x10,%esp
c010a561:	a3 24 10 1b c0       	mov    %eax,0xc01b1024
    set_proc_name(initproc, "init");
c010a566:	a1 24 10 1b c0       	mov    0xc01b1024,%eax
c010a56b:	83 ec 08             	sub    $0x8,%esp
c010a56e:	68 30 de 10 c0       	push   $0xc010de30
c010a573:	50                   	push   %eax
c010a574:	e8 51 e9 ff ff       	call   c0108eca <set_proc_name>
c010a579:	83 c4 10             	add    $0x10,%esp

    assert(idleproc != NULL && idleproc->pid == 0);
c010a57c:	a1 20 10 1b c0       	mov    0xc01b1020,%eax
c010a581:	85 c0                	test   %eax,%eax
c010a583:	74 0c                	je     c010a591 <proc_init+0x152>
c010a585:	a1 20 10 1b c0       	mov    0xc01b1020,%eax
c010a58a:	8b 40 04             	mov    0x4(%eax),%eax
c010a58d:	85 c0                	test   %eax,%eax
c010a58f:	74 19                	je     c010a5aa <proc_init+0x16b>
c010a591:	68 38 de 10 c0       	push   $0xc010de38
c010a596:	68 a1 da 10 c0       	push   $0xc010daa1
c010a59b:	68 99 03 00 00       	push   $0x399
c010a5a0:	68 74 da 10 c0       	push   $0xc010da74
c010a5a5:	e8 53 5e ff ff       	call   c01003fd <__panic>
    assert(initproc != NULL && initproc->pid == 1);
c010a5aa:	a1 24 10 1b c0       	mov    0xc01b1024,%eax
c010a5af:	85 c0                	test   %eax,%eax
c010a5b1:	74 0d                	je     c010a5c0 <proc_init+0x181>
c010a5b3:	a1 24 10 1b c0       	mov    0xc01b1024,%eax
c010a5b8:	8b 40 04             	mov    0x4(%eax),%eax
c010a5bb:	83 f8 01             	cmp    $0x1,%eax
c010a5be:	74 19                	je     c010a5d9 <proc_init+0x19a>
c010a5c0:	68 60 de 10 c0       	push   $0xc010de60
c010a5c5:	68 a1 da 10 c0       	push   $0xc010daa1
c010a5ca:	68 9a 03 00 00       	push   $0x39a
c010a5cf:	68 74 da 10 c0       	push   $0xc010da74
c010a5d4:	e8 24 5e ff ff       	call   c01003fd <__panic>
}
c010a5d9:	90                   	nop
c010a5da:	c9                   	leave  
c010a5db:	c3                   	ret    

c010a5dc <cpu_idle>:

// cpu_idle - at the end of kern_init, the first kernel thread idleproc will do below works
void
cpu_idle(void) {
c010a5dc:	55                   	push   %ebp
c010a5dd:	89 e5                	mov    %esp,%ebp
c010a5df:	83 ec 08             	sub    $0x8,%esp
    while (1) {
        if (current->need_resched) {
c010a5e2:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010a5e7:	8b 40 10             	mov    0x10(%eax),%eax
c010a5ea:	85 c0                	test   %eax,%eax
c010a5ec:	74 f4                	je     c010a5e2 <cpu_idle+0x6>
            schedule();
c010a5ee:	e8 13 02 00 00       	call   c010a806 <schedule>
        }
    }
c010a5f3:	eb ed                	jmp    c010a5e2 <cpu_idle+0x6>

c010a5f5 <lab6_set_priority>:
}

//FOR LAB6, set the process's priority (bigger value will get more CPU time) 
void
lab6_set_priority(uint32_t priority)
{
c010a5f5:	55                   	push   %ebp
c010a5f6:	89 e5                	mov    %esp,%ebp
    if (priority == 0)
c010a5f8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a5fc:	75 11                	jne    c010a60f <lab6_set_priority+0x1a>
        current->lab6_priority = 1;
c010a5fe:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010a603:	c7 80 9c 00 00 00 01 	movl   $0x1,0x9c(%eax)
c010a60a:	00 00 00 
    else current->lab6_priority = priority;
}
c010a60d:	eb 0e                	jmp    c010a61d <lab6_set_priority+0x28>
void
lab6_set_priority(uint32_t priority)
{
    if (priority == 0)
        current->lab6_priority = 1;
    else current->lab6_priority = priority;
c010a60f:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010a614:	8b 55 08             	mov    0x8(%ebp),%edx
c010a617:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
}
c010a61d:	90                   	nop
c010a61e:	5d                   	pop    %ebp
c010a61f:	c3                   	ret    

c010a620 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c010a620:	55                   	push   %ebp
c010a621:	89 e5                	mov    %esp,%ebp
c010a623:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010a626:	9c                   	pushf  
c010a627:	58                   	pop    %eax
c010a628:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010a62b:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010a62e:	25 00 02 00 00       	and    $0x200,%eax
c010a633:	85 c0                	test   %eax,%eax
c010a635:	74 0c                	je     c010a643 <__intr_save+0x23>
        intr_disable();
c010a637:	e8 80 7b ff ff       	call   c01021bc <intr_disable>
        return 1;
c010a63c:	b8 01 00 00 00       	mov    $0x1,%eax
c010a641:	eb 05                	jmp    c010a648 <__intr_save+0x28>
    }
    return 0;
c010a643:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a648:	c9                   	leave  
c010a649:	c3                   	ret    

c010a64a <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010a64a:	55                   	push   %ebp
c010a64b:	89 e5                	mov    %esp,%ebp
c010a64d:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010a650:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a654:	74 05                	je     c010a65b <__intr_restore+0x11>
        intr_enable();
c010a656:	e8 5a 7b ff ff       	call   c01021b5 <intr_enable>
    }
}
c010a65b:	90                   	nop
c010a65c:	c9                   	leave  
c010a65d:	c3                   	ret    

c010a65e <sched_class_enqueue>:
static struct sched_class *sched_class;

static struct run_queue *rq;

static inline void
sched_class_enqueue(struct proc_struct *proc) {
c010a65e:	55                   	push   %ebp
c010a65f:	89 e5                	mov    %esp,%ebp
c010a661:	83 ec 08             	sub    $0x8,%esp
    if (proc != idleproc) {
c010a664:	a1 20 10 1b c0       	mov    0xc01b1020,%eax
c010a669:	39 45 08             	cmp    %eax,0x8(%ebp)
c010a66c:	74 1a                	je     c010a688 <sched_class_enqueue+0x2a>
        sched_class->enqueue(rq, proc);
c010a66e:	a1 5c 30 1b c0       	mov    0xc01b305c,%eax
c010a673:	8b 40 08             	mov    0x8(%eax),%eax
c010a676:	8b 15 60 30 1b c0    	mov    0xc01b3060,%edx
c010a67c:	83 ec 08             	sub    $0x8,%esp
c010a67f:	ff 75 08             	pushl  0x8(%ebp)
c010a682:	52                   	push   %edx
c010a683:	ff d0                	call   *%eax
c010a685:	83 c4 10             	add    $0x10,%esp
    }
}
c010a688:	90                   	nop
c010a689:	c9                   	leave  
c010a68a:	c3                   	ret    

c010a68b <sched_class_dequeue>:

static inline void
sched_class_dequeue(struct proc_struct *proc) {
c010a68b:	55                   	push   %ebp
c010a68c:	89 e5                	mov    %esp,%ebp
c010a68e:	83 ec 08             	sub    $0x8,%esp
    sched_class->dequeue(rq, proc);
c010a691:	a1 5c 30 1b c0       	mov    0xc01b305c,%eax
c010a696:	8b 40 0c             	mov    0xc(%eax),%eax
c010a699:	8b 15 60 30 1b c0    	mov    0xc01b3060,%edx
c010a69f:	83 ec 08             	sub    $0x8,%esp
c010a6a2:	ff 75 08             	pushl  0x8(%ebp)
c010a6a5:	52                   	push   %edx
c010a6a6:	ff d0                	call   *%eax
c010a6a8:	83 c4 10             	add    $0x10,%esp
}
c010a6ab:	90                   	nop
c010a6ac:	c9                   	leave  
c010a6ad:	c3                   	ret    

c010a6ae <sched_class_pick_next>:

static inline struct proc_struct *
sched_class_pick_next(void) {
c010a6ae:	55                   	push   %ebp
c010a6af:	89 e5                	mov    %esp,%ebp
c010a6b1:	83 ec 08             	sub    $0x8,%esp
    return sched_class->pick_next(rq);
c010a6b4:	a1 5c 30 1b c0       	mov    0xc01b305c,%eax
c010a6b9:	8b 40 10             	mov    0x10(%eax),%eax
c010a6bc:	8b 15 60 30 1b c0    	mov    0xc01b3060,%edx
c010a6c2:	83 ec 0c             	sub    $0xc,%esp
c010a6c5:	52                   	push   %edx
c010a6c6:	ff d0                	call   *%eax
c010a6c8:	83 c4 10             	add    $0x10,%esp
}
c010a6cb:	c9                   	leave  
c010a6cc:	c3                   	ret    

c010a6cd <sched_class_proc_tick>:

void
sched_class_proc_tick(struct proc_struct *proc) {
c010a6cd:	55                   	push   %ebp
c010a6ce:	89 e5                	mov    %esp,%ebp
c010a6d0:	83 ec 08             	sub    $0x8,%esp
    if (proc != idleproc) {
c010a6d3:	a1 20 10 1b c0       	mov    0xc01b1020,%eax
c010a6d8:	39 45 08             	cmp    %eax,0x8(%ebp)
c010a6db:	74 1c                	je     c010a6f9 <sched_class_proc_tick+0x2c>
        // cprintf("calling sched_class->proc_tick()...\n");
        sched_class->proc_tick(rq, proc);
c010a6dd:	a1 5c 30 1b c0       	mov    0xc01b305c,%eax
c010a6e2:	8b 40 14             	mov    0x14(%eax),%eax
c010a6e5:	8b 15 60 30 1b c0    	mov    0xc01b3060,%edx
c010a6eb:	83 ec 08             	sub    $0x8,%esp
c010a6ee:	ff 75 08             	pushl  0x8(%ebp)
c010a6f1:	52                   	push   %edx
c010a6f2:	ff d0                	call   *%eax
c010a6f4:	83 c4 10             	add    $0x10,%esp
    }
    else {
        proc->need_resched = 1;
    }
}
c010a6f7:	eb 0a                	jmp    c010a703 <sched_class_proc_tick+0x36>
    if (proc != idleproc) {
        // cprintf("calling sched_class->proc_tick()...\n");
        sched_class->proc_tick(rq, proc);
    }
    else {
        proc->need_resched = 1;
c010a6f9:	8b 45 08             	mov    0x8(%ebp),%eax
c010a6fc:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    }
}
c010a703:	90                   	nop
c010a704:	c9                   	leave  
c010a705:	c3                   	ret    

c010a706 <sched_init>:

static struct run_queue __rq;

void
sched_init(void) {
c010a706:	55                   	push   %ebp
c010a707:	89 e5                	mov    %esp,%ebp
c010a709:	83 ec 18             	sub    $0x18,%esp
c010a70c:	c7 45 f4 54 30 1b c0 	movl   $0xc01b3054,-0xc(%ebp)
c010a713:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a716:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a719:	89 50 04             	mov    %edx,0x4(%eax)
c010a71c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a71f:	8b 50 04             	mov    0x4(%eax),%edx
c010a722:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a725:	89 10                	mov    %edx,(%eax)
    list_init(&timer_list);

    sched_class = &default_sched_class;
c010a727:	c7 05 5c 30 1b c0 80 	movl   $0xc012ca80,0xc01b305c
c010a72e:	ca 12 c0 

    rq = &__rq;
c010a731:	c7 05 60 30 1b c0 64 	movl   $0xc01b3064,0xc01b3060
c010a738:	30 1b c0 
    rq->max_time_slice = MAX_TIME_SLICE;
c010a73b:	a1 60 30 1b c0       	mov    0xc01b3060,%eax
c010a740:	c7 40 0c 05 00 00 00 	movl   $0x5,0xc(%eax)
    sched_class->init(rq);
c010a747:	a1 5c 30 1b c0       	mov    0xc01b305c,%eax
c010a74c:	8b 40 04             	mov    0x4(%eax),%eax
c010a74f:	8b 15 60 30 1b c0    	mov    0xc01b3060,%edx
c010a755:	83 ec 0c             	sub    $0xc,%esp
c010a758:	52                   	push   %edx
c010a759:	ff d0                	call   *%eax
c010a75b:	83 c4 10             	add    $0x10,%esp

    cprintf("sched class: %s\n", sched_class->name);
c010a75e:	a1 5c 30 1b c0       	mov    0xc01b305c,%eax
c010a763:	8b 00                	mov    (%eax),%eax
c010a765:	83 ec 08             	sub    $0x8,%esp
c010a768:	50                   	push   %eax
c010a769:	68 87 de 10 c0       	push   $0xc010de87
c010a76e:	e8 24 5b ff ff       	call   c0100297 <cprintf>
c010a773:	83 c4 10             	add    $0x10,%esp
}
c010a776:	90                   	nop
c010a777:	c9                   	leave  
c010a778:	c3                   	ret    

c010a779 <wakeup_proc>:

void
wakeup_proc(struct proc_struct *proc) {
c010a779:	55                   	push   %ebp
c010a77a:	89 e5                	mov    %esp,%ebp
c010a77c:	83 ec 18             	sub    $0x18,%esp
    assert(proc->state != PROC_ZOMBIE);
c010a77f:	8b 45 08             	mov    0x8(%ebp),%eax
c010a782:	8b 00                	mov    (%eax),%eax
c010a784:	83 f8 03             	cmp    $0x3,%eax
c010a787:	75 16                	jne    c010a79f <wakeup_proc+0x26>
c010a789:	68 98 de 10 c0       	push   $0xc010de98
c010a78e:	68 b3 de 10 c0       	push   $0xc010deb3
c010a793:	6a 3d                	push   $0x3d
c010a795:	68 c8 de 10 c0       	push   $0xc010dec8
c010a79a:	e8 5e 5c ff ff       	call   c01003fd <__panic>
    bool intr_flag;
    local_intr_save(intr_flag);
c010a79f:	e8 7c fe ff ff       	call   c010a620 <__intr_save>
c010a7a4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        if (proc->state != PROC_RUNNABLE) {
c010a7a7:	8b 45 08             	mov    0x8(%ebp),%eax
c010a7aa:	8b 00                	mov    (%eax),%eax
c010a7ac:	83 f8 02             	cmp    $0x2,%eax
c010a7af:	74 2d                	je     c010a7de <wakeup_proc+0x65>
            proc->state = PROC_RUNNABLE;
c010a7b1:	8b 45 08             	mov    0x8(%ebp),%eax
c010a7b4:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
            proc->wait_state = 0;
c010a7ba:	8b 45 08             	mov    0x8(%ebp),%eax
c010a7bd:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
            if (proc != current) {
c010a7c4:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010a7c9:	39 45 08             	cmp    %eax,0x8(%ebp)
c010a7cc:	74 27                	je     c010a7f5 <wakeup_proc+0x7c>
                sched_class_enqueue(proc);
c010a7ce:	83 ec 0c             	sub    $0xc,%esp
c010a7d1:	ff 75 08             	pushl  0x8(%ebp)
c010a7d4:	e8 85 fe ff ff       	call   c010a65e <sched_class_enqueue>
c010a7d9:	83 c4 10             	add    $0x10,%esp
c010a7dc:	eb 17                	jmp    c010a7f5 <wakeup_proc+0x7c>
            }
        }
        else {
            warn("wakeup runnable process.\n");
c010a7de:	83 ec 04             	sub    $0x4,%esp
c010a7e1:	68 de de 10 c0       	push   $0xc010dede
c010a7e6:	6a 49                	push   $0x49
c010a7e8:	68 c8 de 10 c0       	push   $0xc010dec8
c010a7ed:	e8 8e 5c ff ff       	call   c0100480 <__warn>
c010a7f2:	83 c4 10             	add    $0x10,%esp
        }
    }
    local_intr_restore(intr_flag);
c010a7f5:	83 ec 0c             	sub    $0xc,%esp
c010a7f8:	ff 75 f4             	pushl  -0xc(%ebp)
c010a7fb:	e8 4a fe ff ff       	call   c010a64a <__intr_restore>
c010a800:	83 c4 10             	add    $0x10,%esp
}
c010a803:	90                   	nop
c010a804:	c9                   	leave  
c010a805:	c3                   	ret    

c010a806 <schedule>:

void
schedule(void) {
c010a806:	55                   	push   %ebp
c010a807:	89 e5                	mov    %esp,%ebp
c010a809:	83 ec 18             	sub    $0x18,%esp
    bool intr_flag;
    struct proc_struct *next;
    local_intr_save(intr_flag);
c010a80c:	e8 0f fe ff ff       	call   c010a620 <__intr_save>
c010a811:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        current->need_resched = 0;
c010a814:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010a819:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
        if (current->state == PROC_RUNNABLE) {
c010a820:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010a825:	8b 00                	mov    (%eax),%eax
c010a827:	83 f8 02             	cmp    $0x2,%eax
c010a82a:	75 11                	jne    c010a83d <schedule+0x37>
            sched_class_enqueue(current);
c010a82c:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010a831:	83 ec 0c             	sub    $0xc,%esp
c010a834:	50                   	push   %eax
c010a835:	e8 24 fe ff ff       	call   c010a65e <sched_class_enqueue>
c010a83a:	83 c4 10             	add    $0x10,%esp
        }
        if ((next = sched_class_pick_next()) != NULL) {
c010a83d:	e8 6c fe ff ff       	call   c010a6ae <sched_class_pick_next>
c010a842:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a845:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a849:	74 0e                	je     c010a859 <schedule+0x53>
            sched_class_dequeue(next);
c010a84b:	83 ec 0c             	sub    $0xc,%esp
c010a84e:	ff 75 f4             	pushl  -0xc(%ebp)
c010a851:	e8 35 fe ff ff       	call   c010a68b <sched_class_dequeue>
c010a856:	83 c4 10             	add    $0x10,%esp
        }
        if (next == NULL) {
c010a859:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a85d:	75 08                	jne    c010a867 <schedule+0x61>
            next = idleproc;
c010a85f:	a1 20 10 1b c0       	mov    0xc01b1020,%eax
c010a864:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        next->runs ++;
c010a867:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a86a:	8b 40 08             	mov    0x8(%eax),%eax
c010a86d:	8d 50 01             	lea    0x1(%eax),%edx
c010a870:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a873:	89 50 08             	mov    %edx,0x8(%eax)
        if (next != current) {
c010a876:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010a87b:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010a87e:	74 0e                	je     c010a88e <schedule+0x88>
            proc_run(next);
c010a880:	83 ec 0c             	sub    $0xc,%esp
c010a883:	ff 75 f4             	pushl  -0xc(%ebp)
c010a886:	e8 cb e8 ff ff       	call   c0109156 <proc_run>
c010a88b:	83 c4 10             	add    $0x10,%esp
        }
    }
    local_intr_restore(intr_flag);
c010a88e:	83 ec 0c             	sub    $0xc,%esp
c010a891:	ff 75 f0             	pushl  -0x10(%ebp)
c010a894:	e8 b1 fd ff ff       	call   c010a64a <__intr_restore>
c010a899:	83 c4 10             	add    $0x10,%esp
}
c010a89c:	90                   	nop
c010a89d:	c9                   	leave  
c010a89e:	c3                   	ret    

c010a89f <skew_heap_merge>:
}

static inline skew_heap_entry_t *
skew_heap_merge(skew_heap_entry_t *a, skew_heap_entry_t *b,
                compare_f comp)
{
c010a89f:	55                   	push   %ebp
c010a8a0:	89 e5                	mov    %esp,%ebp
c010a8a2:	83 ec 18             	sub    $0x18,%esp
     if (a == NULL) return b;
c010a8a5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a8a9:	75 08                	jne    c010a8b3 <skew_heap_merge+0x14>
c010a8ab:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a8ae:	e9 b4 00 00 00       	jmp    c010a967 <skew_heap_merge+0xc8>
     else if (b == NULL) return a;
c010a8b3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010a8b7:	75 08                	jne    c010a8c1 <skew_heap_merge+0x22>
c010a8b9:	8b 45 08             	mov    0x8(%ebp),%eax
c010a8bc:	e9 a6 00 00 00       	jmp    c010a967 <skew_heap_merge+0xc8>
     
     skew_heap_entry_t *l, *r;
     if (comp(a, b) == -1)
c010a8c1:	83 ec 08             	sub    $0x8,%esp
c010a8c4:	ff 75 0c             	pushl  0xc(%ebp)
c010a8c7:	ff 75 08             	pushl  0x8(%ebp)
c010a8ca:	8b 45 10             	mov    0x10(%ebp),%eax
c010a8cd:	ff d0                	call   *%eax
c010a8cf:	83 c4 10             	add    $0x10,%esp
c010a8d2:	83 f8 ff             	cmp    $0xffffffff,%eax
c010a8d5:	75 49                	jne    c010a920 <skew_heap_merge+0x81>
     {
          r = a->left;
c010a8d7:	8b 45 08             	mov    0x8(%ebp),%eax
c010a8da:	8b 40 04             	mov    0x4(%eax),%eax
c010a8dd:	89 45 f4             	mov    %eax,-0xc(%ebp)
          l = skew_heap_merge(a->right, b, comp);
c010a8e0:	8b 45 08             	mov    0x8(%ebp),%eax
c010a8e3:	8b 40 08             	mov    0x8(%eax),%eax
c010a8e6:	83 ec 04             	sub    $0x4,%esp
c010a8e9:	ff 75 10             	pushl  0x10(%ebp)
c010a8ec:	ff 75 0c             	pushl  0xc(%ebp)
c010a8ef:	50                   	push   %eax
c010a8f0:	e8 aa ff ff ff       	call   c010a89f <skew_heap_merge>
c010a8f5:	83 c4 10             	add    $0x10,%esp
c010a8f8:	89 45 f0             	mov    %eax,-0x10(%ebp)
          
          a->left = l;
c010a8fb:	8b 45 08             	mov    0x8(%ebp),%eax
c010a8fe:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010a901:	89 50 04             	mov    %edx,0x4(%eax)
          a->right = r;
c010a904:	8b 45 08             	mov    0x8(%ebp),%eax
c010a907:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a90a:	89 50 08             	mov    %edx,0x8(%eax)
          if (l) l->parent = a;
c010a90d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010a911:	74 08                	je     c010a91b <skew_heap_merge+0x7c>
c010a913:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a916:	8b 55 08             	mov    0x8(%ebp),%edx
c010a919:	89 10                	mov    %edx,(%eax)

          return a;
c010a91b:	8b 45 08             	mov    0x8(%ebp),%eax
c010a91e:	eb 47                	jmp    c010a967 <skew_heap_merge+0xc8>
     }
     else
     {
          r = b->left;
c010a920:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a923:	8b 40 04             	mov    0x4(%eax),%eax
c010a926:	89 45 f4             	mov    %eax,-0xc(%ebp)
          l = skew_heap_merge(a, b->right, comp);
c010a929:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a92c:	8b 40 08             	mov    0x8(%eax),%eax
c010a92f:	83 ec 04             	sub    $0x4,%esp
c010a932:	ff 75 10             	pushl  0x10(%ebp)
c010a935:	50                   	push   %eax
c010a936:	ff 75 08             	pushl  0x8(%ebp)
c010a939:	e8 61 ff ff ff       	call   c010a89f <skew_heap_merge>
c010a93e:	83 c4 10             	add    $0x10,%esp
c010a941:	89 45 f0             	mov    %eax,-0x10(%ebp)
          
          b->left = l;
c010a944:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a947:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010a94a:	89 50 04             	mov    %edx,0x4(%eax)
          b->right = r;
c010a94d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a950:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a953:	89 50 08             	mov    %edx,0x8(%eax)
          if (l) l->parent = b;
c010a956:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010a95a:	74 08                	je     c010a964 <skew_heap_merge+0xc5>
c010a95c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a95f:	8b 55 0c             	mov    0xc(%ebp),%edx
c010a962:	89 10                	mov    %edx,(%eax)

          return b;
c010a964:	8b 45 0c             	mov    0xc(%ebp),%eax
     }
}
c010a967:	c9                   	leave  
c010a968:	c3                   	ret    

c010a969 <proc_stride_comp_f>:

/* The compare function for two skew_heap_node_t's and the
 * corresponding procs*/
static int
proc_stride_comp_f(void *a, void *b)
{
c010a969:	55                   	push   %ebp
c010a96a:	89 e5                	mov    %esp,%ebp
c010a96c:	83 ec 10             	sub    $0x10,%esp
     struct proc_struct *p = le2proc(a, lab6_run_pool);
c010a96f:	8b 45 08             	mov    0x8(%ebp),%eax
c010a972:	2d 8c 00 00 00       	sub    $0x8c,%eax
c010a977:	89 45 fc             	mov    %eax,-0x4(%ebp)
     struct proc_struct *q = le2proc(b, lab6_run_pool);
c010a97a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a97d:	2d 8c 00 00 00       	sub    $0x8c,%eax
c010a982:	89 45 f8             	mov    %eax,-0x8(%ebp)
     int32_t c = p->lab6_stride - q->lab6_stride;
c010a985:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a988:	8b 90 98 00 00 00    	mov    0x98(%eax),%edx
c010a98e:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010a991:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010a997:	29 c2                	sub    %eax,%edx
c010a999:	89 d0                	mov    %edx,%eax
c010a99b:	89 45 f4             	mov    %eax,-0xc(%ebp)
     if (c > 0) return 1;
c010a99e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a9a2:	7e 07                	jle    c010a9ab <proc_stride_comp_f+0x42>
c010a9a4:	b8 01 00 00 00       	mov    $0x1,%eax
c010a9a9:	eb 12                	jmp    c010a9bd <proc_stride_comp_f+0x54>
     else if (c == 0) return 0;
c010a9ab:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a9af:	75 07                	jne    c010a9b8 <proc_stride_comp_f+0x4f>
c010a9b1:	b8 00 00 00 00       	mov    $0x0,%eax
c010a9b6:	eb 05                	jmp    c010a9bd <proc_stride_comp_f+0x54>
     else return -1;
c010a9b8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
c010a9bd:	c9                   	leave  
c010a9be:	c3                   	ret    

c010a9bf <stride_init>:
 *   - max_time_slice: no need here, the variable would be assigned by the caller.
 *
 * hint: see libs/list.h for routines of the list structures.
 */
static void
stride_init(struct run_queue *rq) {
c010a9bf:	55                   	push   %ebp
c010a9c0:	89 e5                	mov    %esp,%ebp
c010a9c2:	83 ec 10             	sub    $0x10,%esp
      * (1) init the ready process list: rq->run_list
      * (2) init the run pool: rq->lab6_run_pool
      * (3) set number of process: rq->proc_num to 0       
      */
    // (1) init the ready process list: rq->run_list
    list_init(&(rq->run_list));
c010a9c5:	8b 45 08             	mov    0x8(%ebp),%eax
c010a9c8:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010a9cb:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a9ce:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010a9d1:	89 50 04             	mov    %edx,0x4(%eax)
c010a9d4:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a9d7:	8b 50 04             	mov    0x4(%eax),%edx
c010a9da:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a9dd:	89 10                	mov    %edx,(%eax)
    // (2) init the run pool: rq->lab6_run_pool
    rq->lab6_run_pool = NULL;
c010a9df:	8b 45 08             	mov    0x8(%ebp),%eax
c010a9e2:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
    //(3) set number of process: rq->proc_num to 0 
    rq->proc_num = 0;
c010a9e9:	8b 45 08             	mov    0x8(%ebp),%eax
c010a9ec:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
c010a9f3:	90                   	nop
c010a9f4:	c9                   	leave  
c010a9f5:	c3                   	ret    

c010a9f6 <stride_enqueue>:
 * 
 * hint: see libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static void
stride_enqueue(struct run_queue *rq, struct proc_struct *proc) {
c010a9f6:	55                   	push   %ebp
c010a9f7:	89 e5                	mov    %esp,%ebp
c010a9f9:	83 ec 18             	sub    $0x18,%esp
      * (2) recalculate proc->time_slice
      * (3) set proc->rq pointer to rq
      * (4) increase rq->proc_num
      */
    // (1) insert the proc into rq correctly
    rq->lab6_run_pool = skew_heap_insert(rq->lab6_run_pool, &(proc->lab6_run_pool), (compare_f)proc_stride_comp_f);
c010a9fc:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a9ff:	8d 90 8c 00 00 00    	lea    0x8c(%eax),%edx
c010aa05:	8b 45 08             	mov    0x8(%ebp),%eax
c010aa08:	8b 40 10             	mov    0x10(%eax),%eax
c010aa0b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010aa0e:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010aa11:	c7 45 ec 69 a9 10 c0 	movl   $0xc010a969,-0x14(%ebp)
c010aa18:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aa1b:	89 45 e8             	mov    %eax,-0x18(%ebp)
     compare_f comp) __attribute__((always_inline));

static inline void
skew_heap_init(skew_heap_entry_t *a)
{
     a->left = a->right = a->parent = NULL;
c010aa1e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010aa21:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c010aa27:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010aa2a:	8b 10                	mov    (%eax),%edx
c010aa2c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010aa2f:	89 50 08             	mov    %edx,0x8(%eax)
c010aa32:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010aa35:	8b 50 08             	mov    0x8(%eax),%edx
c010aa38:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010aa3b:	89 50 04             	mov    %edx,0x4(%eax)
static inline skew_heap_entry_t *
skew_heap_insert(skew_heap_entry_t *a, skew_heap_entry_t *b,
                 compare_f comp)
{
     skew_heap_init(b);
     return skew_heap_merge(a, b, comp);
c010aa3e:	83 ec 04             	sub    $0x4,%esp
c010aa41:	ff 75 ec             	pushl  -0x14(%ebp)
c010aa44:	ff 75 f0             	pushl  -0x10(%ebp)
c010aa47:	ff 75 f4             	pushl  -0xc(%ebp)
c010aa4a:	e8 50 fe ff ff       	call   c010a89f <skew_heap_merge>
c010aa4f:	83 c4 10             	add    $0x10,%esp
c010aa52:	89 c2                	mov    %eax,%edx
c010aa54:	8b 45 08             	mov    0x8(%ebp),%eax
c010aa57:	89 50 10             	mov    %edx,0x10(%eax)
    // (2) recalculate proc->time_slice
    if (proc->time_slice == 0 || proc->time_slice > rq->max_time_slice) {
c010aa5a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010aa5d:	8b 80 88 00 00 00    	mov    0x88(%eax),%eax
c010aa63:	85 c0                	test   %eax,%eax
c010aa65:	74 13                	je     c010aa7a <stride_enqueue+0x84>
c010aa67:	8b 45 0c             	mov    0xc(%ebp),%eax
c010aa6a:	8b 90 88 00 00 00    	mov    0x88(%eax),%edx
c010aa70:	8b 45 08             	mov    0x8(%ebp),%eax
c010aa73:	8b 40 0c             	mov    0xc(%eax),%eax
c010aa76:	39 c2                	cmp    %eax,%edx
c010aa78:	7e 0f                	jle    c010aa89 <stride_enqueue+0x93>
        proc->time_slice = rq->max_time_slice;
c010aa7a:	8b 45 08             	mov    0x8(%ebp),%eax
c010aa7d:	8b 50 0c             	mov    0xc(%eax),%edx
c010aa80:	8b 45 0c             	mov    0xc(%ebp),%eax
c010aa83:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
    }
    // (3) set proc->rq pointer to rq
    proc->rq = rq;
c010aa89:	8b 45 0c             	mov    0xc(%ebp),%eax
c010aa8c:	8b 55 08             	mov    0x8(%ebp),%edx
c010aa8f:	89 50 7c             	mov    %edx,0x7c(%eax)
    // (4) increase rq->proc_num
    rq->proc_num ++;
c010aa92:	8b 45 08             	mov    0x8(%ebp),%eax
c010aa95:	8b 40 08             	mov    0x8(%eax),%eax
c010aa98:	8d 50 01             	lea    0x1(%eax),%edx
c010aa9b:	8b 45 08             	mov    0x8(%ebp),%eax
c010aa9e:	89 50 08             	mov    %edx,0x8(%eax)
}
c010aaa1:	90                   	nop
c010aaa2:	c9                   	leave  
c010aaa3:	c3                   	ret    

c010aaa4 <stride_dequeue>:
 *
 * hint: see libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static void
stride_dequeue(struct run_queue *rq, struct proc_struct *proc) {
c010aaa4:	55                   	push   %ebp
c010aaa5:	89 e5                	mov    %esp,%ebp
c010aaa7:	83 ec 28             	sub    $0x28,%esp
      * NOTICE: you can use skew_heap or list. Important functions
      *         skew_heap_remove: remove a entry from skew_heap
      *         list_del_init: remove a entry from the  list
      */
    // (1) remove the proc from rq correctly
    rq->lab6_run_pool = skew_heap_remove(rq->lab6_run_pool, &(proc->lab6_run_pool), (compare_f)proc_stride_comp_f);
c010aaaa:	8b 45 0c             	mov    0xc(%ebp),%eax
c010aaad:	8d 90 8c 00 00 00    	lea    0x8c(%eax),%edx
c010aab3:	8b 45 08             	mov    0x8(%ebp),%eax
c010aab6:	8b 40 10             	mov    0x10(%eax),%eax
c010aab9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010aabc:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010aabf:	c7 45 ec 69 a9 10 c0 	movl   $0xc010a969,-0x14(%ebp)

static inline skew_heap_entry_t *
skew_heap_remove(skew_heap_entry_t *a, skew_heap_entry_t *b,
                 compare_f comp)
{
     skew_heap_entry_t *p   = b->parent;
c010aac6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aac9:	8b 00                	mov    (%eax),%eax
c010aacb:	89 45 e8             	mov    %eax,-0x18(%ebp)
     skew_heap_entry_t *rep = skew_heap_merge(b->left, b->right, comp);
c010aace:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aad1:	8b 50 08             	mov    0x8(%eax),%edx
c010aad4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aad7:	8b 40 04             	mov    0x4(%eax),%eax
c010aada:	83 ec 04             	sub    $0x4,%esp
c010aadd:	ff 75 ec             	pushl  -0x14(%ebp)
c010aae0:	52                   	push   %edx
c010aae1:	50                   	push   %eax
c010aae2:	e8 b8 fd ff ff       	call   c010a89f <skew_heap_merge>
c010aae7:	83 c4 10             	add    $0x10,%esp
c010aaea:	89 45 e4             	mov    %eax,-0x1c(%ebp)
     if (rep) rep->parent = p;
c010aaed:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010aaf1:	74 08                	je     c010aafb <stride_dequeue+0x57>
c010aaf3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010aaf6:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010aaf9:	89 10                	mov    %edx,(%eax)
     
     if (p)
c010aafb:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010aaff:	74 24                	je     c010ab25 <stride_dequeue+0x81>
     {
          if (p->left == b)
c010ab01:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ab04:	8b 40 04             	mov    0x4(%eax),%eax
c010ab07:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010ab0a:	75 0b                	jne    c010ab17 <stride_dequeue+0x73>
               p->left = rep;
c010ab0c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ab0f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010ab12:	89 50 04             	mov    %edx,0x4(%eax)
c010ab15:	eb 09                	jmp    c010ab20 <stride_dequeue+0x7c>
          else p->right = rep;
c010ab17:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ab1a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010ab1d:	89 50 08             	mov    %edx,0x8(%eax)
          return a;
c010ab20:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ab23:	eb 03                	jmp    c010ab28 <stride_dequeue+0x84>
     }
     else return rep;
c010ab25:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ab28:	8b 55 08             	mov    0x8(%ebp),%edx
c010ab2b:	89 42 10             	mov    %eax,0x10(%edx)
    rq->proc_num --;
c010ab2e:	8b 45 08             	mov    0x8(%ebp),%eax
c010ab31:	8b 40 08             	mov    0x8(%eax),%eax
c010ab34:	8d 50 ff             	lea    -0x1(%eax),%edx
c010ab37:	8b 45 08             	mov    0x8(%ebp),%eax
c010ab3a:	89 50 08             	mov    %edx,0x8(%eax)
}
c010ab3d:	90                   	nop
c010ab3e:	c9                   	leave  
c010ab3f:	c3                   	ret    

c010ab40 <stride_pick_next>:
 *
 * hint: see libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static struct proc_struct *
stride_pick_next(struct run_queue *rq) {
c010ab40:	55                   	push   %ebp
c010ab41:	89 e5                	mov    %esp,%ebp
c010ab43:	53                   	push   %ebx
c010ab44:	83 ec 10             	sub    $0x10,%esp
      * (3) return p
      */
    // (1) get a  proc_struct pointer p  with the minimum value of stride
    //        (1.1) If using skew_heap, we can use le2proc get the p from rq->lab6_run_poll
    // cprintf("in pick next()...\n");
    if (rq->lab6_run_pool == NULL) {
c010ab47:	8b 45 08             	mov    0x8(%ebp),%eax
c010ab4a:	8b 40 10             	mov    0x10(%eax),%eax
c010ab4d:	85 c0                	test   %eax,%eax
c010ab4f:	75 07                	jne    c010ab58 <stride_pick_next+0x18>
        return NULL;
c010ab51:	b8 00 00 00 00       	mov    $0x0,%eax
c010ab56:	eb 3b                	jmp    c010ab93 <stride_pick_next+0x53>
    }
    struct proc_struct * proc = le2proc(rq->lab6_run_pool, lab6_run_pool);
c010ab58:	8b 45 08             	mov    0x8(%ebp),%eax
c010ab5b:	8b 40 10             	mov    0x10(%eax),%eax
c010ab5e:	2d 8c 00 00 00       	sub    $0x8c,%eax
c010ab63:	89 45 f8             	mov    %eax,-0x8(%ebp)
    // (2) update p's stride value: p->lab6_stride
    proc->lab6_stride += BIG_STRIDE / proc->lab6_priority;
c010ab66:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010ab69:	8b 88 98 00 00 00    	mov    0x98(%eax),%ecx
c010ab6f:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010ab72:	8b 98 9c 00 00 00    	mov    0x9c(%eax),%ebx
c010ab78:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
c010ab7d:	ba 00 00 00 00       	mov    $0x0,%edx
c010ab82:	f7 f3                	div    %ebx
c010ab84:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c010ab87:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010ab8a:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    // (3) return p
    // cprintf("next is %s\n", proc->name);
    return proc;
c010ab90:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c010ab93:	83 c4 10             	add    $0x10,%esp
c010ab96:	5b                   	pop    %ebx
c010ab97:	5d                   	pop    %ebp
c010ab98:	c3                   	ret    

c010ab99 <stride_proc_tick>:
 * denotes the time slices left for current
 * process. proc->need_resched is the flag variable for process
 * switching.
 */
static void
stride_proc_tick(struct run_queue *rq, struct proc_struct *proc) {
c010ab99:	55                   	push   %ebp
c010ab9a:	89 e5                	mov    %esp,%ebp
     /* LAB6: 2015010062 */
    if (proc->time_slice > 0) {
c010ab9c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ab9f:	8b 80 88 00 00 00    	mov    0x88(%eax),%eax
c010aba5:	85 c0                	test   %eax,%eax
c010aba7:	7e 15                	jle    c010abbe <stride_proc_tick+0x25>
        proc->time_slice --;
c010aba9:	8b 45 0c             	mov    0xc(%ebp),%eax
c010abac:	8b 80 88 00 00 00    	mov    0x88(%eax),%eax
c010abb2:	8d 50 ff             	lea    -0x1(%eax),%edx
c010abb5:	8b 45 0c             	mov    0xc(%ebp),%eax
c010abb8:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
    }
    if (proc->time_slice == 0) {
c010abbe:	8b 45 0c             	mov    0xc(%ebp),%eax
c010abc1:	8b 80 88 00 00 00    	mov    0x88(%eax),%eax
c010abc7:	85 c0                	test   %eax,%eax
c010abc9:	75 0a                	jne    c010abd5 <stride_proc_tick+0x3c>
        proc->need_resched = 1;
c010abcb:	8b 45 0c             	mov    0xc(%ebp),%eax
c010abce:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    }
}
c010abd5:	90                   	nop
c010abd6:	5d                   	pop    %ebp
c010abd7:	c3                   	ret    

c010abd8 <sys_exit>:
#include <pmm.h>
#include <assert.h>
#include <clock.h>

static int
sys_exit(uint32_t arg[]) {
c010abd8:	55                   	push   %ebp
c010abd9:	89 e5                	mov    %esp,%ebp
c010abdb:	83 ec 18             	sub    $0x18,%esp
    int error_code = (int)arg[0];
c010abde:	8b 45 08             	mov    0x8(%ebp),%eax
c010abe1:	8b 00                	mov    (%eax),%eax
c010abe3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_exit(error_code);
c010abe6:	83 ec 0c             	sub    $0xc,%esp
c010abe9:	ff 75 f4             	pushl  -0xc(%ebp)
c010abec:	e8 9b eb ff ff       	call   c010978c <do_exit>
c010abf1:	83 c4 10             	add    $0x10,%esp
}
c010abf4:	c9                   	leave  
c010abf5:	c3                   	ret    

c010abf6 <sys_fork>:

static int
sys_fork(uint32_t arg[]) {
c010abf6:	55                   	push   %ebp
c010abf7:	89 e5                	mov    %esp,%ebp
c010abf9:	83 ec 18             	sub    $0x18,%esp
    struct trapframe *tf = current->tf;
c010abfc:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010ac01:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ac04:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uintptr_t stack = tf->tf_esp;
c010ac07:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ac0a:	8b 40 44             	mov    0x44(%eax),%eax
c010ac0d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_fork(0, stack, tf);
c010ac10:	83 ec 04             	sub    $0x4,%esp
c010ac13:	ff 75 f4             	pushl  -0xc(%ebp)
c010ac16:	ff 75 f0             	pushl  -0x10(%ebp)
c010ac19:	6a 00                	push   $0x0
c010ac1b:	e8 41 ea ff ff       	call   c0109661 <do_fork>
c010ac20:	83 c4 10             	add    $0x10,%esp
}
c010ac23:	c9                   	leave  
c010ac24:	c3                   	ret    

c010ac25 <sys_wait>:

static int
sys_wait(uint32_t arg[]) {
c010ac25:	55                   	push   %ebp
c010ac26:	89 e5                	mov    %esp,%ebp
c010ac28:	83 ec 18             	sub    $0x18,%esp
    int pid = (int)arg[0];
c010ac2b:	8b 45 08             	mov    0x8(%ebp),%eax
c010ac2e:	8b 00                	mov    (%eax),%eax
c010ac30:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int *store = (int *)arg[1];
c010ac33:	8b 45 08             	mov    0x8(%ebp),%eax
c010ac36:	83 c0 04             	add    $0x4,%eax
c010ac39:	8b 00                	mov    (%eax),%eax
c010ac3b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_wait(pid, store);
c010ac3e:	83 ec 08             	sub    $0x8,%esp
c010ac41:	ff 75 f0             	pushl  -0x10(%ebp)
c010ac44:	ff 75 f4             	pushl  -0xc(%ebp)
c010ac47:	e8 1c f4 ff ff       	call   c010a068 <do_wait>
c010ac4c:	83 c4 10             	add    $0x10,%esp
}
c010ac4f:	c9                   	leave  
c010ac50:	c3                   	ret    

c010ac51 <sys_exec>:

static int
sys_exec(uint32_t arg[]) {
c010ac51:	55                   	push   %ebp
c010ac52:	89 e5                	mov    %esp,%ebp
c010ac54:	83 ec 18             	sub    $0x18,%esp
    const char *name = (const char *)arg[0];
c010ac57:	8b 45 08             	mov    0x8(%ebp),%eax
c010ac5a:	8b 00                	mov    (%eax),%eax
c010ac5c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    size_t len = (size_t)arg[1];
c010ac5f:	8b 45 08             	mov    0x8(%ebp),%eax
c010ac62:	83 c0 04             	add    $0x4,%eax
c010ac65:	8b 00                	mov    (%eax),%eax
c010ac67:	89 45 f0             	mov    %eax,-0x10(%ebp)
    unsigned char *binary = (unsigned char *)arg[2];
c010ac6a:	8b 45 08             	mov    0x8(%ebp),%eax
c010ac6d:	83 c0 08             	add    $0x8,%eax
c010ac70:	8b 00                	mov    (%eax),%eax
c010ac72:	89 45 ec             	mov    %eax,-0x14(%ebp)
    size_t size = (size_t)arg[3];
c010ac75:	8b 45 08             	mov    0x8(%ebp),%eax
c010ac78:	83 c0 0c             	add    $0xc,%eax
c010ac7b:	8b 00                	mov    (%eax),%eax
c010ac7d:	89 45 e8             	mov    %eax,-0x18(%ebp)
    return do_execve(name, len, binary, size);
c010ac80:	ff 75 e8             	pushl  -0x18(%ebp)
c010ac83:	ff 75 ec             	pushl  -0x14(%ebp)
c010ac86:	ff 75 f0             	pushl  -0x10(%ebp)
c010ac89:	ff 75 f4             	pushl  -0xc(%ebp)
c010ac8c:	e8 9f f2 ff ff       	call   c0109f30 <do_execve>
c010ac91:	83 c4 10             	add    $0x10,%esp
}
c010ac94:	c9                   	leave  
c010ac95:	c3                   	ret    

c010ac96 <sys_yield>:

static int
sys_yield(uint32_t arg[]) {
c010ac96:	55                   	push   %ebp
c010ac97:	89 e5                	mov    %esp,%ebp
c010ac99:	83 ec 08             	sub    $0x8,%esp
    return do_yield();
c010ac9c:	e8 b1 f3 ff ff       	call   c010a052 <do_yield>
}
c010aca1:	c9                   	leave  
c010aca2:	c3                   	ret    

c010aca3 <sys_kill>:

static int
sys_kill(uint32_t arg[]) {
c010aca3:	55                   	push   %ebp
c010aca4:	89 e5                	mov    %esp,%ebp
c010aca6:	83 ec 18             	sub    $0x18,%esp
    int pid = (int)arg[0];
c010aca9:	8b 45 08             	mov    0x8(%ebp),%eax
c010acac:	8b 00                	mov    (%eax),%eax
c010acae:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_kill(pid);
c010acb1:	83 ec 0c             	sub    $0xc,%esp
c010acb4:	ff 75 f4             	pushl  -0xc(%ebp)
c010acb7:	e8 3a f5 ff ff       	call   c010a1f6 <do_kill>
c010acbc:	83 c4 10             	add    $0x10,%esp
}
c010acbf:	c9                   	leave  
c010acc0:	c3                   	ret    

c010acc1 <sys_getpid>:

static int
sys_getpid(uint32_t arg[]) {
c010acc1:	55                   	push   %ebp
c010acc2:	89 e5                	mov    %esp,%ebp
    return current->pid;
c010acc4:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010acc9:	8b 40 04             	mov    0x4(%eax),%eax
}
c010accc:	5d                   	pop    %ebp
c010accd:	c3                   	ret    

c010acce <sys_putc>:

static int
sys_putc(uint32_t arg[]) {
c010acce:	55                   	push   %ebp
c010accf:	89 e5                	mov    %esp,%ebp
c010acd1:	83 ec 18             	sub    $0x18,%esp
    int c = (int)arg[0];
c010acd4:	8b 45 08             	mov    0x8(%ebp),%eax
c010acd7:	8b 00                	mov    (%eax),%eax
c010acd9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cputchar(c);
c010acdc:	83 ec 0c             	sub    $0xc,%esp
c010acdf:	ff 75 f4             	pushl  -0xc(%ebp)
c010ace2:	e8 d6 55 ff ff       	call   c01002bd <cputchar>
c010ace7:	83 c4 10             	add    $0x10,%esp
    return 0;
c010acea:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010acef:	c9                   	leave  
c010acf0:	c3                   	ret    

c010acf1 <sys_pgdir>:

static int
sys_pgdir(uint32_t arg[]) {
c010acf1:	55                   	push   %ebp
c010acf2:	89 e5                	mov    %esp,%ebp
c010acf4:	83 ec 08             	sub    $0x8,%esp
    print_pgdir();
c010acf7:	e8 3b db ff ff       	call   c0108837 <print_pgdir>
    return 0;
c010acfc:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ad01:	c9                   	leave  
c010ad02:	c3                   	ret    

c010ad03 <sys_gettime>:

static int
sys_gettime(uint32_t arg[]) {
c010ad03:	55                   	push   %ebp
c010ad04:	89 e5                	mov    %esp,%ebp
    return (int)ticks;
c010ad06:	a1 78 30 1b c0       	mov    0xc01b3078,%eax
}
c010ad0b:	5d                   	pop    %ebp
c010ad0c:	c3                   	ret    

c010ad0d <sys_lab6_set_priority>:
static int
sys_lab6_set_priority(uint32_t arg[])
{
c010ad0d:	55                   	push   %ebp
c010ad0e:	89 e5                	mov    %esp,%ebp
c010ad10:	83 ec 18             	sub    $0x18,%esp
    uint32_t priority = (uint32_t)arg[0];
c010ad13:	8b 45 08             	mov    0x8(%ebp),%eax
c010ad16:	8b 00                	mov    (%eax),%eax
c010ad18:	89 45 f4             	mov    %eax,-0xc(%ebp)
    lab6_set_priority(priority);
c010ad1b:	83 ec 0c             	sub    $0xc,%esp
c010ad1e:	ff 75 f4             	pushl  -0xc(%ebp)
c010ad21:	e8 cf f8 ff ff       	call   c010a5f5 <lab6_set_priority>
c010ad26:	83 c4 10             	add    $0x10,%esp
    return 0;
c010ad29:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ad2e:	c9                   	leave  
c010ad2f:	c3                   	ret    

c010ad30 <syscall>:
};

#define NUM_SYSCALLS        ((sizeof(syscalls)) / (sizeof(syscalls[0])))

void
syscall(void) {
c010ad30:	55                   	push   %ebp
c010ad31:	89 e5                	mov    %esp,%ebp
c010ad33:	83 ec 28             	sub    $0x28,%esp
    struct trapframe *tf = current->tf;
c010ad36:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010ad3b:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ad3e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t arg[5];
    int num = tf->tf_regs.reg_eax;
c010ad41:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ad44:	8b 40 1c             	mov    0x1c(%eax),%eax
c010ad47:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (num >= 0 && num < NUM_SYSCALLS) {
c010ad4a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010ad4e:	78 64                	js     c010adb4 <syscall+0x84>
c010ad50:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ad53:	3d ff 00 00 00       	cmp    $0xff,%eax
c010ad58:	77 5a                	ja     c010adb4 <syscall+0x84>
        if (syscalls[num] != NULL) {
c010ad5a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ad5d:	8b 04 85 a0 ca 12 c0 	mov    -0x3fed3560(,%eax,4),%eax
c010ad64:	85 c0                	test   %eax,%eax
c010ad66:	74 4c                	je     c010adb4 <syscall+0x84>
            arg[0] = tf->tf_regs.reg_edx;
c010ad68:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ad6b:	8b 40 14             	mov    0x14(%eax),%eax
c010ad6e:	89 45 dc             	mov    %eax,-0x24(%ebp)
            arg[1] = tf->tf_regs.reg_ecx;
c010ad71:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ad74:	8b 40 18             	mov    0x18(%eax),%eax
c010ad77:	89 45 e0             	mov    %eax,-0x20(%ebp)
            arg[2] = tf->tf_regs.reg_ebx;
c010ad7a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ad7d:	8b 40 10             	mov    0x10(%eax),%eax
c010ad80:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            arg[3] = tf->tf_regs.reg_edi;
c010ad83:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ad86:	8b 00                	mov    (%eax),%eax
c010ad88:	89 45 e8             	mov    %eax,-0x18(%ebp)
            arg[4] = tf->tf_regs.reg_esi;
c010ad8b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ad8e:	8b 40 04             	mov    0x4(%eax),%eax
c010ad91:	89 45 ec             	mov    %eax,-0x14(%ebp)
            tf->tf_regs.reg_eax = syscalls[num](arg);
c010ad94:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ad97:	8b 04 85 a0 ca 12 c0 	mov    -0x3fed3560(,%eax,4),%eax
c010ad9e:	83 ec 0c             	sub    $0xc,%esp
c010ada1:	8d 55 dc             	lea    -0x24(%ebp),%edx
c010ada4:	52                   	push   %edx
c010ada5:	ff d0                	call   *%eax
c010ada7:	83 c4 10             	add    $0x10,%esp
c010adaa:	89 c2                	mov    %eax,%edx
c010adac:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010adaf:	89 50 1c             	mov    %edx,0x1c(%eax)
            return ;
c010adb2:	eb 37                	jmp    c010adeb <syscall+0xbb>
        }
    }
    print_trapframe(tf);
c010adb4:	83 ec 0c             	sub    $0xc,%esp
c010adb7:	ff 75 f4             	pushl  -0xc(%ebp)
c010adba:	e8 74 76 ff ff       	call   c0102433 <print_trapframe>
c010adbf:	83 c4 10             	add    $0x10,%esp
    panic("undefined syscall %d, pid = %d, name = %s.\n",
c010adc2:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010adc7:	8d 50 48             	lea    0x48(%eax),%edx
c010adca:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010adcf:	8b 40 04             	mov    0x4(%eax),%eax
c010add2:	83 ec 08             	sub    $0x8,%esp
c010add5:	52                   	push   %edx
c010add6:	50                   	push   %eax
c010add7:	ff 75 f0             	pushl  -0x10(%ebp)
c010adda:	68 0c df 10 c0       	push   $0xc010df0c
c010addf:	6a 72                	push   $0x72
c010ade1:	68 38 df 10 c0       	push   $0xc010df38
c010ade6:	e8 12 56 ff ff       	call   c01003fd <__panic>
            num, current->pid, current->name);
}
c010adeb:	c9                   	leave  
c010adec:	c3                   	ret    

c010aded <strlen>:
 * @s:      the input string
 *
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
c010aded:	55                   	push   %ebp
c010adee:	89 e5                	mov    %esp,%ebp
c010adf0:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c010adf3:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (*s ++ != '\0') {
c010adfa:	eb 04                	jmp    c010ae00 <strlen+0x13>
        cnt ++;
c010adfc:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
    size_t cnt = 0;
    while (*s ++ != '\0') {
c010ae00:	8b 45 08             	mov    0x8(%ebp),%eax
c010ae03:	8d 50 01             	lea    0x1(%eax),%edx
c010ae06:	89 55 08             	mov    %edx,0x8(%ebp)
c010ae09:	0f b6 00             	movzbl (%eax),%eax
c010ae0c:	84 c0                	test   %al,%al
c010ae0e:	75 ec                	jne    c010adfc <strlen+0xf>
        cnt ++;
    }
    return cnt;
c010ae10:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010ae13:	c9                   	leave  
c010ae14:	c3                   	ret    

c010ae15 <strnlen>:
 * The return value is strlen(s), if that is less than @len, or
 * @len if there is no '\0' character among the first @len characters
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
c010ae15:	55                   	push   %ebp
c010ae16:	89 e5                	mov    %esp,%ebp
c010ae18:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c010ae1b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (cnt < len && *s ++ != '\0') {
c010ae22:	eb 04                	jmp    c010ae28 <strnlen+0x13>
        cnt ++;
c010ae24:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
    size_t cnt = 0;
    while (cnt < len && *s ++ != '\0') {
c010ae28:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010ae2b:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010ae2e:	73 10                	jae    c010ae40 <strnlen+0x2b>
c010ae30:	8b 45 08             	mov    0x8(%ebp),%eax
c010ae33:	8d 50 01             	lea    0x1(%eax),%edx
c010ae36:	89 55 08             	mov    %edx,0x8(%ebp)
c010ae39:	0f b6 00             	movzbl (%eax),%eax
c010ae3c:	84 c0                	test   %al,%al
c010ae3e:	75 e4                	jne    c010ae24 <strnlen+0xf>
        cnt ++;
    }
    return cnt;
c010ae40:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010ae43:	c9                   	leave  
c010ae44:	c3                   	ret    

c010ae45 <strcpy>:
 * To avoid overflows, the size of array pointed by @dst should be long enough to
 * contain the same string as @src (including the terminating null character), and
 * should not overlap in memory with @src.
 * */
char *
strcpy(char *dst, const char *src) {
c010ae45:	55                   	push   %ebp
c010ae46:	89 e5                	mov    %esp,%ebp
c010ae48:	57                   	push   %edi
c010ae49:	56                   	push   %esi
c010ae4a:	83 ec 20             	sub    $0x20,%esp
c010ae4d:	8b 45 08             	mov    0x8(%ebp),%eax
c010ae50:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ae53:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ae56:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_STRCPY
#define __HAVE_ARCH_STRCPY
static inline char *
__strcpy(char *dst, const char *src) {
    int d0, d1, d2;
    asm volatile (
c010ae59:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010ae5c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ae5f:	89 d1                	mov    %edx,%ecx
c010ae61:	89 c2                	mov    %eax,%edx
c010ae63:	89 ce                	mov    %ecx,%esi
c010ae65:	89 d7                	mov    %edx,%edi
c010ae67:	ac                   	lods   %ds:(%esi),%al
c010ae68:	aa                   	stos   %al,%es:(%edi)
c010ae69:	84 c0                	test   %al,%al
c010ae6b:	75 fa                	jne    c010ae67 <strcpy+0x22>
c010ae6d:	89 fa                	mov    %edi,%edx
c010ae6f:	89 f1                	mov    %esi,%ecx
c010ae71:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c010ae74:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010ae77:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        "stosb;"
        "testb %%al, %%al;"
        "jne 1b;"
        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
        : "0" (src), "1" (dst) : "memory");
    return dst;
c010ae7a:	8b 45 f4             	mov    -0xc(%ebp),%eax
#ifdef __HAVE_ARCH_STRCPY
    return __strcpy(dst, src);
c010ae7d:	90                   	nop
    char *p = dst;
    while ((*p ++ = *src ++) != '\0')
        /* nothing */;
    return dst;
#endif /* __HAVE_ARCH_STRCPY */
}
c010ae7e:	83 c4 20             	add    $0x20,%esp
c010ae81:	5e                   	pop    %esi
c010ae82:	5f                   	pop    %edi
c010ae83:	5d                   	pop    %ebp
c010ae84:	c3                   	ret    

c010ae85 <strncpy>:
 * @len:    maximum number of characters to be copied from @src
 *
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
c010ae85:	55                   	push   %ebp
c010ae86:	89 e5                	mov    %esp,%ebp
c010ae88:	83 ec 10             	sub    $0x10,%esp
    char *p = dst;
c010ae8b:	8b 45 08             	mov    0x8(%ebp),%eax
c010ae8e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (len > 0) {
c010ae91:	eb 21                	jmp    c010aeb4 <strncpy+0x2f>
        if ((*p = *src) != '\0') {
c010ae93:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ae96:	0f b6 10             	movzbl (%eax),%edx
c010ae99:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010ae9c:	88 10                	mov    %dl,(%eax)
c010ae9e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010aea1:	0f b6 00             	movzbl (%eax),%eax
c010aea4:	84 c0                	test   %al,%al
c010aea6:	74 04                	je     c010aeac <strncpy+0x27>
            src ++;
c010aea8:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
        }
        p ++, len --;
c010aeac:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010aeb0:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
    char *p = dst;
    while (len > 0) {
c010aeb4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010aeb8:	75 d9                	jne    c010ae93 <strncpy+0xe>
        if ((*p = *src) != '\0') {
            src ++;
        }
        p ++, len --;
    }
    return dst;
c010aeba:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010aebd:	c9                   	leave  
c010aebe:	c3                   	ret    

c010aebf <strcmp>:
 * - A value greater than zero indicates that the first character that does
 *   not match has a greater value in @s1 than in @s2;
 * - And a value less than zero indicates the opposite.
 * */
int
strcmp(const char *s1, const char *s2) {
c010aebf:	55                   	push   %ebp
c010aec0:	89 e5                	mov    %esp,%ebp
c010aec2:	57                   	push   %edi
c010aec3:	56                   	push   %esi
c010aec4:	83 ec 20             	sub    $0x20,%esp
c010aec7:	8b 45 08             	mov    0x8(%ebp),%eax
c010aeca:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010aecd:	8b 45 0c             	mov    0xc(%ebp),%eax
c010aed0:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_STRCMP
#define __HAVE_ARCH_STRCMP
static inline int
__strcmp(const char *s1, const char *s2) {
    int d0, d1, ret;
    asm volatile (
c010aed3:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010aed6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aed9:	89 d1                	mov    %edx,%ecx
c010aedb:	89 c2                	mov    %eax,%edx
c010aedd:	89 ce                	mov    %ecx,%esi
c010aedf:	89 d7                	mov    %edx,%edi
c010aee1:	ac                   	lods   %ds:(%esi),%al
c010aee2:	ae                   	scas   %es:(%edi),%al
c010aee3:	75 08                	jne    c010aeed <strcmp+0x2e>
c010aee5:	84 c0                	test   %al,%al
c010aee7:	75 f8                	jne    c010aee1 <strcmp+0x22>
c010aee9:	31 c0                	xor    %eax,%eax
c010aeeb:	eb 04                	jmp    c010aef1 <strcmp+0x32>
c010aeed:	19 c0                	sbb    %eax,%eax
c010aeef:	0c 01                	or     $0x1,%al
c010aef1:	89 fa                	mov    %edi,%edx
c010aef3:	89 f1                	mov    %esi,%ecx
c010aef5:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010aef8:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c010aefb:	89 55 e4             	mov    %edx,-0x1c(%ebp)
        "orb $1, %%al;"
        "3:"
        : "=a" (ret), "=&S" (d0), "=&D" (d1)
        : "1" (s1), "2" (s2)
        : "memory");
    return ret;
c010aefe:	8b 45 ec             	mov    -0x14(%ebp),%eax
#ifdef __HAVE_ARCH_STRCMP
    return __strcmp(s1, s2);
c010af01:	90                   	nop
    while (*s1 != '\0' && *s1 == *s2) {
        s1 ++, s2 ++;
    }
    return (int)((unsigned char)*s1 - (unsigned char)*s2);
#endif /* __HAVE_ARCH_STRCMP */
}
c010af02:	83 c4 20             	add    $0x20,%esp
c010af05:	5e                   	pop    %esi
c010af06:	5f                   	pop    %edi
c010af07:	5d                   	pop    %ebp
c010af08:	c3                   	ret    

c010af09 <strncmp>:
 * they are equal to each other, it continues with the following pairs until
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
c010af09:	55                   	push   %ebp
c010af0a:	89 e5                	mov    %esp,%ebp
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c010af0c:	eb 0c                	jmp    c010af1a <strncmp+0x11>
        n --, s1 ++, s2 ++;
c010af0e:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c010af12:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010af16:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c010af1a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010af1e:	74 1a                	je     c010af3a <strncmp+0x31>
c010af20:	8b 45 08             	mov    0x8(%ebp),%eax
c010af23:	0f b6 00             	movzbl (%eax),%eax
c010af26:	84 c0                	test   %al,%al
c010af28:	74 10                	je     c010af3a <strncmp+0x31>
c010af2a:	8b 45 08             	mov    0x8(%ebp),%eax
c010af2d:	0f b6 10             	movzbl (%eax),%edx
c010af30:	8b 45 0c             	mov    0xc(%ebp),%eax
c010af33:	0f b6 00             	movzbl (%eax),%eax
c010af36:	38 c2                	cmp    %al,%dl
c010af38:	74 d4                	je     c010af0e <strncmp+0x5>
        n --, s1 ++, s2 ++;
    }
    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
c010af3a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010af3e:	74 18                	je     c010af58 <strncmp+0x4f>
c010af40:	8b 45 08             	mov    0x8(%ebp),%eax
c010af43:	0f b6 00             	movzbl (%eax),%eax
c010af46:	0f b6 d0             	movzbl %al,%edx
c010af49:	8b 45 0c             	mov    0xc(%ebp),%eax
c010af4c:	0f b6 00             	movzbl (%eax),%eax
c010af4f:	0f b6 c0             	movzbl %al,%eax
c010af52:	29 c2                	sub    %eax,%edx
c010af54:	89 d0                	mov    %edx,%eax
c010af56:	eb 05                	jmp    c010af5d <strncmp+0x54>
c010af58:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010af5d:	5d                   	pop    %ebp
c010af5e:	c3                   	ret    

c010af5f <strchr>:
 *
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
c010af5f:	55                   	push   %ebp
c010af60:	89 e5                	mov    %esp,%ebp
c010af62:	83 ec 04             	sub    $0x4,%esp
c010af65:	8b 45 0c             	mov    0xc(%ebp),%eax
c010af68:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c010af6b:	eb 14                	jmp    c010af81 <strchr+0x22>
        if (*s == c) {
c010af6d:	8b 45 08             	mov    0x8(%ebp),%eax
c010af70:	0f b6 00             	movzbl (%eax),%eax
c010af73:	3a 45 fc             	cmp    -0x4(%ebp),%al
c010af76:	75 05                	jne    c010af7d <strchr+0x1e>
            return (char *)s;
c010af78:	8b 45 08             	mov    0x8(%ebp),%eax
c010af7b:	eb 13                	jmp    c010af90 <strchr+0x31>
        }
        s ++;
c010af7d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
    while (*s != '\0') {
c010af81:	8b 45 08             	mov    0x8(%ebp),%eax
c010af84:	0f b6 00             	movzbl (%eax),%eax
c010af87:	84 c0                	test   %al,%al
c010af89:	75 e2                	jne    c010af6d <strchr+0xe>
        if (*s == c) {
            return (char *)s;
        }
        s ++;
    }
    return NULL;
c010af8b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010af90:	c9                   	leave  
c010af91:	c3                   	ret    

c010af92 <strfind>:
 * The strfind() function is like strchr() except that if @c is
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
c010af92:	55                   	push   %ebp
c010af93:	89 e5                	mov    %esp,%ebp
c010af95:	83 ec 04             	sub    $0x4,%esp
c010af98:	8b 45 0c             	mov    0xc(%ebp),%eax
c010af9b:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c010af9e:	eb 0f                	jmp    c010afaf <strfind+0x1d>
        if (*s == c) {
c010afa0:	8b 45 08             	mov    0x8(%ebp),%eax
c010afa3:	0f b6 00             	movzbl (%eax),%eax
c010afa6:	3a 45 fc             	cmp    -0x4(%ebp),%al
c010afa9:	74 10                	je     c010afbb <strfind+0x29>
            break;
        }
        s ++;
c010afab:	83 45 08 01          	addl   $0x1,0x8(%ebp)
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
    while (*s != '\0') {
c010afaf:	8b 45 08             	mov    0x8(%ebp),%eax
c010afb2:	0f b6 00             	movzbl (%eax),%eax
c010afb5:	84 c0                	test   %al,%al
c010afb7:	75 e7                	jne    c010afa0 <strfind+0xe>
c010afb9:	eb 01                	jmp    c010afbc <strfind+0x2a>
        if (*s == c) {
            break;
c010afbb:	90                   	nop
        }
        s ++;
    }
    return (char *)s;
c010afbc:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010afbf:	c9                   	leave  
c010afc0:	c3                   	ret    

c010afc1 <strtol>:
 * an optional "0x" or "0X" prefix.
 *
 * The strtol() function returns the converted integral number as a long int value.
 * */
long
strtol(const char *s, char **endptr, int base) {
c010afc1:	55                   	push   %ebp
c010afc2:	89 e5                	mov    %esp,%ebp
c010afc4:	83 ec 10             	sub    $0x10,%esp
    int neg = 0;
c010afc7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    long val = 0;
c010afce:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
c010afd5:	eb 04                	jmp    c010afdb <strtol+0x1a>
        s ++;
c010afd7:	83 45 08 01          	addl   $0x1,0x8(%ebp)
strtol(const char *s, char **endptr, int base) {
    int neg = 0;
    long val = 0;

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
c010afdb:	8b 45 08             	mov    0x8(%ebp),%eax
c010afde:	0f b6 00             	movzbl (%eax),%eax
c010afe1:	3c 20                	cmp    $0x20,%al
c010afe3:	74 f2                	je     c010afd7 <strtol+0x16>
c010afe5:	8b 45 08             	mov    0x8(%ebp),%eax
c010afe8:	0f b6 00             	movzbl (%eax),%eax
c010afeb:	3c 09                	cmp    $0x9,%al
c010afed:	74 e8                	je     c010afd7 <strtol+0x16>
        s ++;
    }

    // plus/minus sign
    if (*s == '+') {
c010afef:	8b 45 08             	mov    0x8(%ebp),%eax
c010aff2:	0f b6 00             	movzbl (%eax),%eax
c010aff5:	3c 2b                	cmp    $0x2b,%al
c010aff7:	75 06                	jne    c010afff <strtol+0x3e>
        s ++;
c010aff9:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010affd:	eb 15                	jmp    c010b014 <strtol+0x53>
    }
    else if (*s == '-') {
c010afff:	8b 45 08             	mov    0x8(%ebp),%eax
c010b002:	0f b6 00             	movzbl (%eax),%eax
c010b005:	3c 2d                	cmp    $0x2d,%al
c010b007:	75 0b                	jne    c010b014 <strtol+0x53>
        s ++, neg = 1;
c010b009:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010b00d:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
    }

    // hex or octal base prefix
    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
c010b014:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010b018:	74 06                	je     c010b020 <strtol+0x5f>
c010b01a:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
c010b01e:	75 24                	jne    c010b044 <strtol+0x83>
c010b020:	8b 45 08             	mov    0x8(%ebp),%eax
c010b023:	0f b6 00             	movzbl (%eax),%eax
c010b026:	3c 30                	cmp    $0x30,%al
c010b028:	75 1a                	jne    c010b044 <strtol+0x83>
c010b02a:	8b 45 08             	mov    0x8(%ebp),%eax
c010b02d:	83 c0 01             	add    $0x1,%eax
c010b030:	0f b6 00             	movzbl (%eax),%eax
c010b033:	3c 78                	cmp    $0x78,%al
c010b035:	75 0d                	jne    c010b044 <strtol+0x83>
        s += 2, base = 16;
c010b037:	83 45 08 02          	addl   $0x2,0x8(%ebp)
c010b03b:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
c010b042:	eb 2a                	jmp    c010b06e <strtol+0xad>
    }
    else if (base == 0 && s[0] == '0') {
c010b044:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010b048:	75 17                	jne    c010b061 <strtol+0xa0>
c010b04a:	8b 45 08             	mov    0x8(%ebp),%eax
c010b04d:	0f b6 00             	movzbl (%eax),%eax
c010b050:	3c 30                	cmp    $0x30,%al
c010b052:	75 0d                	jne    c010b061 <strtol+0xa0>
        s ++, base = 8;
c010b054:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010b058:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
c010b05f:	eb 0d                	jmp    c010b06e <strtol+0xad>
    }
    else if (base == 0) {
c010b061:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010b065:	75 07                	jne    c010b06e <strtol+0xad>
        base = 10;
c010b067:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

    // digits
    while (1) {
        int dig;

        if (*s >= '0' && *s <= '9') {
c010b06e:	8b 45 08             	mov    0x8(%ebp),%eax
c010b071:	0f b6 00             	movzbl (%eax),%eax
c010b074:	3c 2f                	cmp    $0x2f,%al
c010b076:	7e 1b                	jle    c010b093 <strtol+0xd2>
c010b078:	8b 45 08             	mov    0x8(%ebp),%eax
c010b07b:	0f b6 00             	movzbl (%eax),%eax
c010b07e:	3c 39                	cmp    $0x39,%al
c010b080:	7f 11                	jg     c010b093 <strtol+0xd2>
            dig = *s - '0';
c010b082:	8b 45 08             	mov    0x8(%ebp),%eax
c010b085:	0f b6 00             	movzbl (%eax),%eax
c010b088:	0f be c0             	movsbl %al,%eax
c010b08b:	83 e8 30             	sub    $0x30,%eax
c010b08e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b091:	eb 48                	jmp    c010b0db <strtol+0x11a>
        }
        else if (*s >= 'a' && *s <= 'z') {
c010b093:	8b 45 08             	mov    0x8(%ebp),%eax
c010b096:	0f b6 00             	movzbl (%eax),%eax
c010b099:	3c 60                	cmp    $0x60,%al
c010b09b:	7e 1b                	jle    c010b0b8 <strtol+0xf7>
c010b09d:	8b 45 08             	mov    0x8(%ebp),%eax
c010b0a0:	0f b6 00             	movzbl (%eax),%eax
c010b0a3:	3c 7a                	cmp    $0x7a,%al
c010b0a5:	7f 11                	jg     c010b0b8 <strtol+0xf7>
            dig = *s - 'a' + 10;
c010b0a7:	8b 45 08             	mov    0x8(%ebp),%eax
c010b0aa:	0f b6 00             	movzbl (%eax),%eax
c010b0ad:	0f be c0             	movsbl %al,%eax
c010b0b0:	83 e8 57             	sub    $0x57,%eax
c010b0b3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b0b6:	eb 23                	jmp    c010b0db <strtol+0x11a>
        }
        else if (*s >= 'A' && *s <= 'Z') {
c010b0b8:	8b 45 08             	mov    0x8(%ebp),%eax
c010b0bb:	0f b6 00             	movzbl (%eax),%eax
c010b0be:	3c 40                	cmp    $0x40,%al
c010b0c0:	7e 3c                	jle    c010b0fe <strtol+0x13d>
c010b0c2:	8b 45 08             	mov    0x8(%ebp),%eax
c010b0c5:	0f b6 00             	movzbl (%eax),%eax
c010b0c8:	3c 5a                	cmp    $0x5a,%al
c010b0ca:	7f 32                	jg     c010b0fe <strtol+0x13d>
            dig = *s - 'A' + 10;
c010b0cc:	8b 45 08             	mov    0x8(%ebp),%eax
c010b0cf:	0f b6 00             	movzbl (%eax),%eax
c010b0d2:	0f be c0             	movsbl %al,%eax
c010b0d5:	83 e8 37             	sub    $0x37,%eax
c010b0d8:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        else {
            break;
        }
        if (dig >= base) {
c010b0db:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b0de:	3b 45 10             	cmp    0x10(%ebp),%eax
c010b0e1:	7d 1a                	jge    c010b0fd <strtol+0x13c>
            break;
        }
        s ++, val = (val * base) + dig;
c010b0e3:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010b0e7:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010b0ea:	0f af 45 10          	imul   0x10(%ebp),%eax
c010b0ee:	89 c2                	mov    %eax,%edx
c010b0f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b0f3:	01 d0                	add    %edx,%eax
c010b0f5:	89 45 f8             	mov    %eax,-0x8(%ebp)
        // we don't properly detect overflow!
    }
c010b0f8:	e9 71 ff ff ff       	jmp    c010b06e <strtol+0xad>
        }
        else {
            break;
        }
        if (dig >= base) {
            break;
c010b0fd:	90                   	nop
        }
        s ++, val = (val * base) + dig;
        // we don't properly detect overflow!
    }

    if (endptr) {
c010b0fe:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010b102:	74 08                	je     c010b10c <strtol+0x14b>
        *endptr = (char *) s;
c010b104:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b107:	8b 55 08             	mov    0x8(%ebp),%edx
c010b10a:	89 10                	mov    %edx,(%eax)
    }
    return (neg ? -val : val);
c010b10c:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c010b110:	74 07                	je     c010b119 <strtol+0x158>
c010b112:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010b115:	f7 d8                	neg    %eax
c010b117:	eb 03                	jmp    c010b11c <strtol+0x15b>
c010b119:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c010b11c:	c9                   	leave  
c010b11d:	c3                   	ret    

c010b11e <memset>:
 * @n:      number of bytes to be set to the value
 *
 * The memset() function returns @s.
 * */
void *
memset(void *s, char c, size_t n) {
c010b11e:	55                   	push   %ebp
c010b11f:	89 e5                	mov    %esp,%ebp
c010b121:	57                   	push   %edi
c010b122:	83 ec 24             	sub    $0x24,%esp
c010b125:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b128:	88 45 d8             	mov    %al,-0x28(%ebp)
#ifdef __HAVE_ARCH_MEMSET
    return __memset(s, c, n);
c010b12b:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
c010b12f:	8b 55 08             	mov    0x8(%ebp),%edx
c010b132:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010b135:	88 45 f7             	mov    %al,-0x9(%ebp)
c010b138:	8b 45 10             	mov    0x10(%ebp),%eax
c010b13b:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_MEMSET
#define __HAVE_ARCH_MEMSET
static inline void *
__memset(void *s, char c, size_t n) {
    int d0, d1;
    asm volatile (
c010b13e:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010b141:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c010b145:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010b148:	89 d7                	mov    %edx,%edi
c010b14a:	f3 aa                	rep stos %al,%es:(%edi)
c010b14c:	89 fa                	mov    %edi,%edx
c010b14e:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c010b151:	89 55 e8             	mov    %edx,-0x18(%ebp)
        "rep; stosb;"
        : "=&c" (d0), "=&D" (d1)
        : "0" (n), "a" (c), "1" (s)
        : "memory");
    return s;
c010b154:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010b157:	90                   	nop
    while (n -- > 0) {
        *p ++ = c;
    }
    return s;
#endif /* __HAVE_ARCH_MEMSET */
}
c010b158:	83 c4 24             	add    $0x24,%esp
c010b15b:	5f                   	pop    %edi
c010b15c:	5d                   	pop    %ebp
c010b15d:	c3                   	ret    

c010b15e <memmove>:
 * @n:      number of bytes to copy
 *
 * The memmove() function returns @dst.
 * */
void *
memmove(void *dst, const void *src, size_t n) {
c010b15e:	55                   	push   %ebp
c010b15f:	89 e5                	mov    %esp,%ebp
c010b161:	57                   	push   %edi
c010b162:	56                   	push   %esi
c010b163:	53                   	push   %ebx
c010b164:	83 ec 30             	sub    $0x30,%esp
c010b167:	8b 45 08             	mov    0x8(%ebp),%eax
c010b16a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b16d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b170:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010b173:	8b 45 10             	mov    0x10(%ebp),%eax
c010b176:	89 45 e8             	mov    %eax,-0x18(%ebp)

#ifndef __HAVE_ARCH_MEMMOVE
#define __HAVE_ARCH_MEMMOVE
static inline void *
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
c010b179:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b17c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010b17f:	73 42                	jae    c010b1c3 <memmove+0x65>
c010b181:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b184:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010b187:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b18a:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010b18d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b190:	89 45 dc             	mov    %eax,-0x24(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c010b193:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b196:	c1 e8 02             	shr    $0x2,%eax
c010b199:	89 c1                	mov    %eax,%ecx
#ifndef __HAVE_ARCH_MEMCPY
#define __HAVE_ARCH_MEMCPY
static inline void *
__memcpy(void *dst, const void *src, size_t n) {
    int d0, d1, d2;
    asm volatile (
c010b19b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010b19e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b1a1:	89 d7                	mov    %edx,%edi
c010b1a3:	89 c6                	mov    %eax,%esi
c010b1a5:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010b1a7:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c010b1aa:	83 e1 03             	and    $0x3,%ecx
c010b1ad:	74 02                	je     c010b1b1 <memmove+0x53>
c010b1af:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010b1b1:	89 f0                	mov    %esi,%eax
c010b1b3:	89 fa                	mov    %edi,%edx
c010b1b5:	89 4d d8             	mov    %ecx,-0x28(%ebp)
c010b1b8:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010b1bb:	89 45 d0             	mov    %eax,-0x30(%ebp)
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
        : "memory");
    return dst;
c010b1be:	8b 45 e4             	mov    -0x1c(%ebp),%eax
#ifdef __HAVE_ARCH_MEMMOVE
    return __memmove(dst, src, n);
c010b1c1:	eb 36                	jmp    c010b1f9 <memmove+0x9b>
    asm volatile (
        "std;"
        "rep; movsb;"
        "cld;"
        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
c010b1c3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b1c6:	8d 50 ff             	lea    -0x1(%eax),%edx
c010b1c9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b1cc:	01 c2                	add    %eax,%edx
c010b1ce:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b1d1:	8d 48 ff             	lea    -0x1(%eax),%ecx
c010b1d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b1d7:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
        return __memcpy(dst, src, n);
    }
    int d0, d1, d2;
    asm volatile (
c010b1da:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b1dd:	89 c1                	mov    %eax,%ecx
c010b1df:	89 d8                	mov    %ebx,%eax
c010b1e1:	89 d6                	mov    %edx,%esi
c010b1e3:	89 c7                	mov    %eax,%edi
c010b1e5:	fd                   	std    
c010b1e6:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010b1e8:	fc                   	cld    
c010b1e9:	89 f8                	mov    %edi,%eax
c010b1eb:	89 f2                	mov    %esi,%edx
c010b1ed:	89 4d cc             	mov    %ecx,-0x34(%ebp)
c010b1f0:	89 55 c8             	mov    %edx,-0x38(%ebp)
c010b1f3:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        "rep; movsb;"
        "cld;"
        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
        : "memory");
    return dst;
c010b1f6:	8b 45 f0             	mov    -0x10(%ebp),%eax
            *d ++ = *s ++;
        }
    }
    return dst;
#endif /* __HAVE_ARCH_MEMMOVE */
}
c010b1f9:	83 c4 30             	add    $0x30,%esp
c010b1fc:	5b                   	pop    %ebx
c010b1fd:	5e                   	pop    %esi
c010b1fe:	5f                   	pop    %edi
c010b1ff:	5d                   	pop    %ebp
c010b200:	c3                   	ret    

c010b201 <memcpy>:
 * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
 * by both @src and @dst, should be at least @n bytes, and should not overlap
 * (for overlapping memory area, memmove is a safer approach).
 * */
void *
memcpy(void *dst, const void *src, size_t n) {
c010b201:	55                   	push   %ebp
c010b202:	89 e5                	mov    %esp,%ebp
c010b204:	57                   	push   %edi
c010b205:	56                   	push   %esi
c010b206:	83 ec 20             	sub    $0x20,%esp
c010b209:	8b 45 08             	mov    0x8(%ebp),%eax
c010b20c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b20f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b212:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b215:	8b 45 10             	mov    0x10(%ebp),%eax
c010b218:	89 45 ec             	mov    %eax,-0x14(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c010b21b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b21e:	c1 e8 02             	shr    $0x2,%eax
c010b221:	89 c1                	mov    %eax,%ecx
#ifndef __HAVE_ARCH_MEMCPY
#define __HAVE_ARCH_MEMCPY
static inline void *
__memcpy(void *dst, const void *src, size_t n) {
    int d0, d1, d2;
    asm volatile (
c010b223:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b226:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b229:	89 d7                	mov    %edx,%edi
c010b22b:	89 c6                	mov    %eax,%esi
c010b22d:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010b22f:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c010b232:	83 e1 03             	and    $0x3,%ecx
c010b235:	74 02                	je     c010b239 <memcpy+0x38>
c010b237:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010b239:	89 f0                	mov    %esi,%eax
c010b23b:	89 fa                	mov    %edi,%edx
c010b23d:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c010b240:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c010b243:	89 45 e0             	mov    %eax,-0x20(%ebp)
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
        : "memory");
    return dst;
c010b246:	8b 45 f4             	mov    -0xc(%ebp),%eax
#ifdef __HAVE_ARCH_MEMCPY
    return __memcpy(dst, src, n);
c010b249:	90                   	nop
    while (n -- > 0) {
        *d ++ = *s ++;
    }
    return dst;
#endif /* __HAVE_ARCH_MEMCPY */
}
c010b24a:	83 c4 20             	add    $0x20,%esp
c010b24d:	5e                   	pop    %esi
c010b24e:	5f                   	pop    %edi
c010b24f:	5d                   	pop    %ebp
c010b250:	c3                   	ret    

c010b251 <memcmp>:
 *   match in both memory blocks has a greater value in @v1 than in @v2
 *   as if evaluated as unsigned char values;
 * - And a value less than zero indicates the opposite.
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
c010b251:	55                   	push   %ebp
c010b252:	89 e5                	mov    %esp,%ebp
c010b254:	83 ec 10             	sub    $0x10,%esp
    const char *s1 = (const char *)v1;
c010b257:	8b 45 08             	mov    0x8(%ebp),%eax
c010b25a:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s2 = (const char *)v2;
c010b25d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b260:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (n -- > 0) {
c010b263:	eb 30                	jmp    c010b295 <memcmp+0x44>
        if (*s1 != *s2) {
c010b265:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010b268:	0f b6 10             	movzbl (%eax),%edx
c010b26b:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010b26e:	0f b6 00             	movzbl (%eax),%eax
c010b271:	38 c2                	cmp    %al,%dl
c010b273:	74 18                	je     c010b28d <memcmp+0x3c>
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
c010b275:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010b278:	0f b6 00             	movzbl (%eax),%eax
c010b27b:	0f b6 d0             	movzbl %al,%edx
c010b27e:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010b281:	0f b6 00             	movzbl (%eax),%eax
c010b284:	0f b6 c0             	movzbl %al,%eax
c010b287:	29 c2                	sub    %eax,%edx
c010b289:	89 d0                	mov    %edx,%eax
c010b28b:	eb 1a                	jmp    c010b2a7 <memcmp+0x56>
        }
        s1 ++, s2 ++;
c010b28d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010b291:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
    const char *s1 = (const char *)v1;
    const char *s2 = (const char *)v2;
    while (n -- > 0) {
c010b295:	8b 45 10             	mov    0x10(%ebp),%eax
c010b298:	8d 50 ff             	lea    -0x1(%eax),%edx
c010b29b:	89 55 10             	mov    %edx,0x10(%ebp)
c010b29e:	85 c0                	test   %eax,%eax
c010b2a0:	75 c3                	jne    c010b265 <memcmp+0x14>
        if (*s1 != *s2) {
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
        }
        s1 ++, s2 ++;
    }
    return 0;
c010b2a2:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010b2a7:	c9                   	leave  
c010b2a8:	c3                   	ret    

c010b2a9 <printnum>:
 * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
 * @padc:       character that padded on the left if the actual width is less than @width
 * */
static void
printnum(void (*putch)(int, void*), void *putdat,
        unsigned long long num, unsigned base, int width, int padc) {
c010b2a9:	55                   	push   %ebp
c010b2aa:	89 e5                	mov    %esp,%ebp
c010b2ac:	83 ec 38             	sub    $0x38,%esp
c010b2af:	8b 45 10             	mov    0x10(%ebp),%eax
c010b2b2:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010b2b5:	8b 45 14             	mov    0x14(%ebp),%eax
c010b2b8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    unsigned long long result = num;
c010b2bb:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b2be:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010b2c1:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010b2c4:	89 55 ec             	mov    %edx,-0x14(%ebp)
    unsigned mod = do_div(result, base);
c010b2c7:	8b 45 18             	mov    0x18(%ebp),%eax
c010b2ca:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010b2cd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b2d0:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010b2d3:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010b2d6:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010b2d9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b2dc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b2df:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b2e3:	74 1c                	je     c010b301 <printnum+0x58>
c010b2e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b2e8:	ba 00 00 00 00       	mov    $0x0,%edx
c010b2ed:	f7 75 e4             	divl   -0x1c(%ebp)
c010b2f0:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010b2f3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b2f6:	ba 00 00 00 00       	mov    $0x0,%edx
c010b2fb:	f7 75 e4             	divl   -0x1c(%ebp)
c010b2fe:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b301:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b304:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b307:	f7 75 e4             	divl   -0x1c(%ebp)
c010b30a:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010b30d:	89 55 dc             	mov    %edx,-0x24(%ebp)
c010b310:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b313:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010b316:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010b319:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010b31c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b31f:	89 45 d8             	mov    %eax,-0x28(%ebp)

    // first recursively print all preceding (more significant) digits
    if (num >= base) {
c010b322:	8b 45 18             	mov    0x18(%ebp),%eax
c010b325:	ba 00 00 00 00       	mov    $0x0,%edx
c010b32a:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c010b32d:	77 41                	ja     c010b370 <printnum+0xc7>
c010b32f:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c010b332:	72 05                	jb     c010b339 <printnum+0x90>
c010b334:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c010b337:	77 37                	ja     c010b370 <printnum+0xc7>
        printnum(putch, putdat, result, base, width - 1, padc);
c010b339:	8b 45 1c             	mov    0x1c(%ebp),%eax
c010b33c:	83 e8 01             	sub    $0x1,%eax
c010b33f:	83 ec 04             	sub    $0x4,%esp
c010b342:	ff 75 20             	pushl  0x20(%ebp)
c010b345:	50                   	push   %eax
c010b346:	ff 75 18             	pushl  0x18(%ebp)
c010b349:	ff 75 ec             	pushl  -0x14(%ebp)
c010b34c:	ff 75 e8             	pushl  -0x18(%ebp)
c010b34f:	ff 75 0c             	pushl  0xc(%ebp)
c010b352:	ff 75 08             	pushl  0x8(%ebp)
c010b355:	e8 4f ff ff ff       	call   c010b2a9 <printnum>
c010b35a:	83 c4 20             	add    $0x20,%esp
c010b35d:	eb 1b                	jmp    c010b37a <printnum+0xd1>
    } else {
        // print any needed pad characters before first digit
        while (-- width > 0)
            putch(padc, putdat);
c010b35f:	83 ec 08             	sub    $0x8,%esp
c010b362:	ff 75 0c             	pushl  0xc(%ebp)
c010b365:	ff 75 20             	pushl  0x20(%ebp)
c010b368:	8b 45 08             	mov    0x8(%ebp),%eax
c010b36b:	ff d0                	call   *%eax
c010b36d:	83 c4 10             	add    $0x10,%esp
    // first recursively print all preceding (more significant) digits
    if (num >= base) {
        printnum(putch, putdat, result, base, width - 1, padc);
    } else {
        // print any needed pad characters before first digit
        while (-- width > 0)
c010b370:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
c010b374:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c010b378:	7f e5                	jg     c010b35f <printnum+0xb6>
            putch(padc, putdat);
    }
    // then print this (the least significant) digit
    putch("0123456789abcdef"[mod], putdat);
c010b37a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b37d:	05 64 e0 10 c0       	add    $0xc010e064,%eax
c010b382:	0f b6 00             	movzbl (%eax),%eax
c010b385:	0f be c0             	movsbl %al,%eax
c010b388:	83 ec 08             	sub    $0x8,%esp
c010b38b:	ff 75 0c             	pushl  0xc(%ebp)
c010b38e:	50                   	push   %eax
c010b38f:	8b 45 08             	mov    0x8(%ebp),%eax
c010b392:	ff d0                	call   *%eax
c010b394:	83 c4 10             	add    $0x10,%esp
}
c010b397:	90                   	nop
c010b398:	c9                   	leave  
c010b399:	c3                   	ret    

c010b39a <getuint>:
 * getuint - get an unsigned int of various possible sizes from a varargs list
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static unsigned long long
getuint(va_list *ap, int lflag) {
c010b39a:	55                   	push   %ebp
c010b39b:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c010b39d:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c010b3a1:	7e 14                	jle    c010b3b7 <getuint+0x1d>
        return va_arg(*ap, unsigned long long);
c010b3a3:	8b 45 08             	mov    0x8(%ebp),%eax
c010b3a6:	8b 00                	mov    (%eax),%eax
c010b3a8:	8d 48 08             	lea    0x8(%eax),%ecx
c010b3ab:	8b 55 08             	mov    0x8(%ebp),%edx
c010b3ae:	89 0a                	mov    %ecx,(%edx)
c010b3b0:	8b 50 04             	mov    0x4(%eax),%edx
c010b3b3:	8b 00                	mov    (%eax),%eax
c010b3b5:	eb 30                	jmp    c010b3e7 <getuint+0x4d>
    }
    else if (lflag) {
c010b3b7:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010b3bb:	74 16                	je     c010b3d3 <getuint+0x39>
        return va_arg(*ap, unsigned long);
c010b3bd:	8b 45 08             	mov    0x8(%ebp),%eax
c010b3c0:	8b 00                	mov    (%eax),%eax
c010b3c2:	8d 48 04             	lea    0x4(%eax),%ecx
c010b3c5:	8b 55 08             	mov    0x8(%ebp),%edx
c010b3c8:	89 0a                	mov    %ecx,(%edx)
c010b3ca:	8b 00                	mov    (%eax),%eax
c010b3cc:	ba 00 00 00 00       	mov    $0x0,%edx
c010b3d1:	eb 14                	jmp    c010b3e7 <getuint+0x4d>
    }
    else {
        return va_arg(*ap, unsigned int);
c010b3d3:	8b 45 08             	mov    0x8(%ebp),%eax
c010b3d6:	8b 00                	mov    (%eax),%eax
c010b3d8:	8d 48 04             	lea    0x4(%eax),%ecx
c010b3db:	8b 55 08             	mov    0x8(%ebp),%edx
c010b3de:	89 0a                	mov    %ecx,(%edx)
c010b3e0:	8b 00                	mov    (%eax),%eax
c010b3e2:	ba 00 00 00 00       	mov    $0x0,%edx
    }
}
c010b3e7:	5d                   	pop    %ebp
c010b3e8:	c3                   	ret    

c010b3e9 <getint>:
 * getint - same as getuint but signed, we can't use getuint because of sign extension
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static long long
getint(va_list *ap, int lflag) {
c010b3e9:	55                   	push   %ebp
c010b3ea:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c010b3ec:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c010b3f0:	7e 14                	jle    c010b406 <getint+0x1d>
        return va_arg(*ap, long long);
c010b3f2:	8b 45 08             	mov    0x8(%ebp),%eax
c010b3f5:	8b 00                	mov    (%eax),%eax
c010b3f7:	8d 48 08             	lea    0x8(%eax),%ecx
c010b3fa:	8b 55 08             	mov    0x8(%ebp),%edx
c010b3fd:	89 0a                	mov    %ecx,(%edx)
c010b3ff:	8b 50 04             	mov    0x4(%eax),%edx
c010b402:	8b 00                	mov    (%eax),%eax
c010b404:	eb 28                	jmp    c010b42e <getint+0x45>
    }
    else if (lflag) {
c010b406:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010b40a:	74 12                	je     c010b41e <getint+0x35>
        return va_arg(*ap, long);
c010b40c:	8b 45 08             	mov    0x8(%ebp),%eax
c010b40f:	8b 00                	mov    (%eax),%eax
c010b411:	8d 48 04             	lea    0x4(%eax),%ecx
c010b414:	8b 55 08             	mov    0x8(%ebp),%edx
c010b417:	89 0a                	mov    %ecx,(%edx)
c010b419:	8b 00                	mov    (%eax),%eax
c010b41b:	99                   	cltd   
c010b41c:	eb 10                	jmp    c010b42e <getint+0x45>
    }
    else {
        return va_arg(*ap, int);
c010b41e:	8b 45 08             	mov    0x8(%ebp),%eax
c010b421:	8b 00                	mov    (%eax),%eax
c010b423:	8d 48 04             	lea    0x4(%eax),%ecx
c010b426:	8b 55 08             	mov    0x8(%ebp),%edx
c010b429:	89 0a                	mov    %ecx,(%edx)
c010b42b:	8b 00                	mov    (%eax),%eax
c010b42d:	99                   	cltd   
    }
}
c010b42e:	5d                   	pop    %ebp
c010b42f:	c3                   	ret    

c010b430 <printfmt>:
 * @putch:      specified putch function, print a single character
 * @putdat:     used by @putch function
 * @fmt:        the format string to use
 * */
void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
c010b430:	55                   	push   %ebp
c010b431:	89 e5                	mov    %esp,%ebp
c010b433:	83 ec 18             	sub    $0x18,%esp
    va_list ap;

    va_start(ap, fmt);
c010b436:	8d 45 14             	lea    0x14(%ebp),%eax
c010b439:	89 45 f4             	mov    %eax,-0xc(%ebp)
    vprintfmt(putch, putdat, fmt, ap);
c010b43c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b43f:	50                   	push   %eax
c010b440:	ff 75 10             	pushl  0x10(%ebp)
c010b443:	ff 75 0c             	pushl  0xc(%ebp)
c010b446:	ff 75 08             	pushl  0x8(%ebp)
c010b449:	e8 06 00 00 00       	call   c010b454 <vprintfmt>
c010b44e:	83 c4 10             	add    $0x10,%esp
    va_end(ap);
}
c010b451:	90                   	nop
c010b452:	c9                   	leave  
c010b453:	c3                   	ret    

c010b454 <vprintfmt>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want printfmt() instead.
 * */
void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
c010b454:	55                   	push   %ebp
c010b455:	89 e5                	mov    %esp,%ebp
c010b457:	56                   	push   %esi
c010b458:	53                   	push   %ebx
c010b459:	83 ec 20             	sub    $0x20,%esp
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c010b45c:	eb 17                	jmp    c010b475 <vprintfmt+0x21>
            if (ch == '\0') {
c010b45e:	85 db                	test   %ebx,%ebx
c010b460:	0f 84 8e 03 00 00    	je     c010b7f4 <vprintfmt+0x3a0>
                return;
            }
            putch(ch, putdat);
c010b466:	83 ec 08             	sub    $0x8,%esp
c010b469:	ff 75 0c             	pushl  0xc(%ebp)
c010b46c:	53                   	push   %ebx
c010b46d:	8b 45 08             	mov    0x8(%ebp),%eax
c010b470:	ff d0                	call   *%eax
c010b472:	83 c4 10             	add    $0x10,%esp
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c010b475:	8b 45 10             	mov    0x10(%ebp),%eax
c010b478:	8d 50 01             	lea    0x1(%eax),%edx
c010b47b:	89 55 10             	mov    %edx,0x10(%ebp)
c010b47e:	0f b6 00             	movzbl (%eax),%eax
c010b481:	0f b6 d8             	movzbl %al,%ebx
c010b484:	83 fb 25             	cmp    $0x25,%ebx
c010b487:	75 d5                	jne    c010b45e <vprintfmt+0xa>
            }
            putch(ch, putdat);
        }

        // Process a %-escape sequence
        char padc = ' ';
c010b489:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
        width = precision = -1;
c010b48d:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
c010b494:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b497:	89 45 e8             	mov    %eax,-0x18(%ebp)
        lflag = altflag = 0;
c010b49a:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c010b4a1:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b4a4:	89 45 e0             	mov    %eax,-0x20(%ebp)

    reswitch:
        switch (ch = *(unsigned char *)fmt ++) {
c010b4a7:	8b 45 10             	mov    0x10(%ebp),%eax
c010b4aa:	8d 50 01             	lea    0x1(%eax),%edx
c010b4ad:	89 55 10             	mov    %edx,0x10(%ebp)
c010b4b0:	0f b6 00             	movzbl (%eax),%eax
c010b4b3:	0f b6 d8             	movzbl %al,%ebx
c010b4b6:	8d 43 dd             	lea    -0x23(%ebx),%eax
c010b4b9:	83 f8 55             	cmp    $0x55,%eax
c010b4bc:	0f 87 05 03 00 00    	ja     c010b7c7 <vprintfmt+0x373>
c010b4c2:	8b 04 85 88 e0 10 c0 	mov    -0x3fef1f78(,%eax,4),%eax
c010b4c9:	ff e0                	jmp    *%eax

        // flag to pad on the right
        case '-':
            padc = '-';
c010b4cb:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
            goto reswitch;
c010b4cf:	eb d6                	jmp    c010b4a7 <vprintfmt+0x53>

        // flag to pad with 0's instead of spaces
        case '0':
            padc = '0';
c010b4d1:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
            goto reswitch;
c010b4d5:	eb d0                	jmp    c010b4a7 <vprintfmt+0x53>

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
c010b4d7:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
                precision = precision * 10 + ch - '0';
c010b4de:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010b4e1:	89 d0                	mov    %edx,%eax
c010b4e3:	c1 e0 02             	shl    $0x2,%eax
c010b4e6:	01 d0                	add    %edx,%eax
c010b4e8:	01 c0                	add    %eax,%eax
c010b4ea:	01 d8                	add    %ebx,%eax
c010b4ec:	83 e8 30             	sub    $0x30,%eax
c010b4ef:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                ch = *fmt;
c010b4f2:	8b 45 10             	mov    0x10(%ebp),%eax
c010b4f5:	0f b6 00             	movzbl (%eax),%eax
c010b4f8:	0f be d8             	movsbl %al,%ebx
                if (ch < '0' || ch > '9') {
c010b4fb:	83 fb 2f             	cmp    $0x2f,%ebx
c010b4fe:	7e 39                	jle    c010b539 <vprintfmt+0xe5>
c010b500:	83 fb 39             	cmp    $0x39,%ebx
c010b503:	7f 34                	jg     c010b539 <vprintfmt+0xe5>
            padc = '0';
            goto reswitch;

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
c010b505:	83 45 10 01          	addl   $0x1,0x10(%ebp)
                precision = precision * 10 + ch - '0';
                ch = *fmt;
                if (ch < '0' || ch > '9') {
                    break;
                }
            }
c010b509:	eb d3                	jmp    c010b4de <vprintfmt+0x8a>
            goto process_precision;

        case '*':
            precision = va_arg(ap, int);
c010b50b:	8b 45 14             	mov    0x14(%ebp),%eax
c010b50e:	8d 50 04             	lea    0x4(%eax),%edx
c010b511:	89 55 14             	mov    %edx,0x14(%ebp)
c010b514:	8b 00                	mov    (%eax),%eax
c010b516:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            goto process_precision;
c010b519:	eb 1f                	jmp    c010b53a <vprintfmt+0xe6>

        case '.':
            if (width < 0)
c010b51b:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010b51f:	79 86                	jns    c010b4a7 <vprintfmt+0x53>
                width = 0;
c010b521:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
            goto reswitch;
c010b528:	e9 7a ff ff ff       	jmp    c010b4a7 <vprintfmt+0x53>

        case '#':
            altflag = 1;
c010b52d:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
            goto reswitch;
c010b534:	e9 6e ff ff ff       	jmp    c010b4a7 <vprintfmt+0x53>
                ch = *fmt;
                if (ch < '0' || ch > '9') {
                    break;
                }
            }
            goto process_precision;
c010b539:	90                   	nop
        case '#':
            altflag = 1;
            goto reswitch;

        process_precision:
            if (width < 0)
c010b53a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010b53e:	0f 89 63 ff ff ff    	jns    c010b4a7 <vprintfmt+0x53>
                width = precision, precision = -1;
c010b544:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b547:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010b54a:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
            goto reswitch;
c010b551:	e9 51 ff ff ff       	jmp    c010b4a7 <vprintfmt+0x53>

        // long flag (doubled for long long)
        case 'l':
            lflag ++;
c010b556:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
            goto reswitch;
c010b55a:	e9 48 ff ff ff       	jmp    c010b4a7 <vprintfmt+0x53>

        // character
        case 'c':
            putch(va_arg(ap, int), putdat);
c010b55f:	8b 45 14             	mov    0x14(%ebp),%eax
c010b562:	8d 50 04             	lea    0x4(%eax),%edx
c010b565:	89 55 14             	mov    %edx,0x14(%ebp)
c010b568:	8b 00                	mov    (%eax),%eax
c010b56a:	83 ec 08             	sub    $0x8,%esp
c010b56d:	ff 75 0c             	pushl  0xc(%ebp)
c010b570:	50                   	push   %eax
c010b571:	8b 45 08             	mov    0x8(%ebp),%eax
c010b574:	ff d0                	call   *%eax
c010b576:	83 c4 10             	add    $0x10,%esp
            break;
c010b579:	e9 71 02 00 00       	jmp    c010b7ef <vprintfmt+0x39b>

        // error message
        case 'e':
            err = va_arg(ap, int);
c010b57e:	8b 45 14             	mov    0x14(%ebp),%eax
c010b581:	8d 50 04             	lea    0x4(%eax),%edx
c010b584:	89 55 14             	mov    %edx,0x14(%ebp)
c010b587:	8b 18                	mov    (%eax),%ebx
            if (err < 0) {
c010b589:	85 db                	test   %ebx,%ebx
c010b58b:	79 02                	jns    c010b58f <vprintfmt+0x13b>
                err = -err;
c010b58d:	f7 db                	neg    %ebx
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
c010b58f:	83 fb 18             	cmp    $0x18,%ebx
c010b592:	7f 0b                	jg     c010b59f <vprintfmt+0x14b>
c010b594:	8b 34 9d 00 e0 10 c0 	mov    -0x3fef2000(,%ebx,4),%esi
c010b59b:	85 f6                	test   %esi,%esi
c010b59d:	75 19                	jne    c010b5b8 <vprintfmt+0x164>
                printfmt(putch, putdat, "error %d", err);
c010b59f:	53                   	push   %ebx
c010b5a0:	68 75 e0 10 c0       	push   $0xc010e075
c010b5a5:	ff 75 0c             	pushl  0xc(%ebp)
c010b5a8:	ff 75 08             	pushl  0x8(%ebp)
c010b5ab:	e8 80 fe ff ff       	call   c010b430 <printfmt>
c010b5b0:	83 c4 10             	add    $0x10,%esp
            }
            else {
                printfmt(putch, putdat, "%s", p);
            }
            break;
c010b5b3:	e9 37 02 00 00       	jmp    c010b7ef <vprintfmt+0x39b>
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
                printfmt(putch, putdat, "error %d", err);
            }
            else {
                printfmt(putch, putdat, "%s", p);
c010b5b8:	56                   	push   %esi
c010b5b9:	68 7e e0 10 c0       	push   $0xc010e07e
c010b5be:	ff 75 0c             	pushl  0xc(%ebp)
c010b5c1:	ff 75 08             	pushl  0x8(%ebp)
c010b5c4:	e8 67 fe ff ff       	call   c010b430 <printfmt>
c010b5c9:	83 c4 10             	add    $0x10,%esp
            }
            break;
c010b5cc:	e9 1e 02 00 00       	jmp    c010b7ef <vprintfmt+0x39b>

        // string
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
c010b5d1:	8b 45 14             	mov    0x14(%ebp),%eax
c010b5d4:	8d 50 04             	lea    0x4(%eax),%edx
c010b5d7:	89 55 14             	mov    %edx,0x14(%ebp)
c010b5da:	8b 30                	mov    (%eax),%esi
c010b5dc:	85 f6                	test   %esi,%esi
c010b5de:	75 05                	jne    c010b5e5 <vprintfmt+0x191>
                p = "(null)";
c010b5e0:	be 81 e0 10 c0       	mov    $0xc010e081,%esi
            }
            if (width > 0 && padc != '-') {
c010b5e5:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010b5e9:	7e 76                	jle    c010b661 <vprintfmt+0x20d>
c010b5eb:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
c010b5ef:	74 70                	je     c010b661 <vprintfmt+0x20d>
                for (width -= strnlen(p, precision); width > 0; width --) {
c010b5f1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b5f4:	83 ec 08             	sub    $0x8,%esp
c010b5f7:	50                   	push   %eax
c010b5f8:	56                   	push   %esi
c010b5f9:	e8 17 f8 ff ff       	call   c010ae15 <strnlen>
c010b5fe:	83 c4 10             	add    $0x10,%esp
c010b601:	89 c2                	mov    %eax,%edx
c010b603:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b606:	29 d0                	sub    %edx,%eax
c010b608:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010b60b:	eb 17                	jmp    c010b624 <vprintfmt+0x1d0>
                    putch(padc, putdat);
c010b60d:	0f be 45 db          	movsbl -0x25(%ebp),%eax
c010b611:	83 ec 08             	sub    $0x8,%esp
c010b614:	ff 75 0c             	pushl  0xc(%ebp)
c010b617:	50                   	push   %eax
c010b618:	8b 45 08             	mov    0x8(%ebp),%eax
c010b61b:	ff d0                	call   *%eax
c010b61d:	83 c4 10             	add    $0x10,%esp
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
                p = "(null)";
            }
            if (width > 0 && padc != '-') {
                for (width -= strnlen(p, precision); width > 0; width --) {
c010b620:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c010b624:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010b628:	7f e3                	jg     c010b60d <vprintfmt+0x1b9>
                    putch(padc, putdat);
                }
            }
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c010b62a:	eb 35                	jmp    c010b661 <vprintfmt+0x20d>
                if (altflag && (ch < ' ' || ch > '~')) {
c010b62c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010b630:	74 1c                	je     c010b64e <vprintfmt+0x1fa>
c010b632:	83 fb 1f             	cmp    $0x1f,%ebx
c010b635:	7e 05                	jle    c010b63c <vprintfmt+0x1e8>
c010b637:	83 fb 7e             	cmp    $0x7e,%ebx
c010b63a:	7e 12                	jle    c010b64e <vprintfmt+0x1fa>
                    putch('?', putdat);
c010b63c:	83 ec 08             	sub    $0x8,%esp
c010b63f:	ff 75 0c             	pushl  0xc(%ebp)
c010b642:	6a 3f                	push   $0x3f
c010b644:	8b 45 08             	mov    0x8(%ebp),%eax
c010b647:	ff d0                	call   *%eax
c010b649:	83 c4 10             	add    $0x10,%esp
c010b64c:	eb 0f                	jmp    c010b65d <vprintfmt+0x209>
                }
                else {
                    putch(ch, putdat);
c010b64e:	83 ec 08             	sub    $0x8,%esp
c010b651:	ff 75 0c             	pushl  0xc(%ebp)
c010b654:	53                   	push   %ebx
c010b655:	8b 45 08             	mov    0x8(%ebp),%eax
c010b658:	ff d0                	call   *%eax
c010b65a:	83 c4 10             	add    $0x10,%esp
            if (width > 0 && padc != '-') {
                for (width -= strnlen(p, precision); width > 0; width --) {
                    putch(padc, putdat);
                }
            }
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c010b65d:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c010b661:	89 f0                	mov    %esi,%eax
c010b663:	8d 70 01             	lea    0x1(%eax),%esi
c010b666:	0f b6 00             	movzbl (%eax),%eax
c010b669:	0f be d8             	movsbl %al,%ebx
c010b66c:	85 db                	test   %ebx,%ebx
c010b66e:	74 26                	je     c010b696 <vprintfmt+0x242>
c010b670:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010b674:	78 b6                	js     c010b62c <vprintfmt+0x1d8>
c010b676:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
c010b67a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010b67e:	79 ac                	jns    c010b62c <vprintfmt+0x1d8>
                }
                else {
                    putch(ch, putdat);
                }
            }
            for (; width > 0; width --) {
c010b680:	eb 14                	jmp    c010b696 <vprintfmt+0x242>
                putch(' ', putdat);
c010b682:	83 ec 08             	sub    $0x8,%esp
c010b685:	ff 75 0c             	pushl  0xc(%ebp)
c010b688:	6a 20                	push   $0x20
c010b68a:	8b 45 08             	mov    0x8(%ebp),%eax
c010b68d:	ff d0                	call   *%eax
c010b68f:	83 c4 10             	add    $0x10,%esp
                }
                else {
                    putch(ch, putdat);
                }
            }
            for (; width > 0; width --) {
c010b692:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c010b696:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010b69a:	7f e6                	jg     c010b682 <vprintfmt+0x22e>
                putch(' ', putdat);
            }
            break;
c010b69c:	e9 4e 01 00 00       	jmp    c010b7ef <vprintfmt+0x39b>

        // (signed) decimal
        case 'd':
            num = getint(&ap, lflag);
c010b6a1:	83 ec 08             	sub    $0x8,%esp
c010b6a4:	ff 75 e0             	pushl  -0x20(%ebp)
c010b6a7:	8d 45 14             	lea    0x14(%ebp),%eax
c010b6aa:	50                   	push   %eax
c010b6ab:	e8 39 fd ff ff       	call   c010b3e9 <getint>
c010b6b0:	83 c4 10             	add    $0x10,%esp
c010b6b3:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b6b6:	89 55 f4             	mov    %edx,-0xc(%ebp)
            if ((long long)num < 0) {
c010b6b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b6bc:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b6bf:	85 d2                	test   %edx,%edx
c010b6c1:	79 23                	jns    c010b6e6 <vprintfmt+0x292>
                putch('-', putdat);
c010b6c3:	83 ec 08             	sub    $0x8,%esp
c010b6c6:	ff 75 0c             	pushl  0xc(%ebp)
c010b6c9:	6a 2d                	push   $0x2d
c010b6cb:	8b 45 08             	mov    0x8(%ebp),%eax
c010b6ce:	ff d0                	call   *%eax
c010b6d0:	83 c4 10             	add    $0x10,%esp
                num = -(long long)num;
c010b6d3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b6d6:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b6d9:	f7 d8                	neg    %eax
c010b6db:	83 d2 00             	adc    $0x0,%edx
c010b6de:	f7 da                	neg    %edx
c010b6e0:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b6e3:	89 55 f4             	mov    %edx,-0xc(%ebp)
            }
            base = 10;
c010b6e6:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c010b6ed:	e9 9f 00 00 00       	jmp    c010b791 <vprintfmt+0x33d>

        // unsigned decimal
        case 'u':
            num = getuint(&ap, lflag);
c010b6f2:	83 ec 08             	sub    $0x8,%esp
c010b6f5:	ff 75 e0             	pushl  -0x20(%ebp)
c010b6f8:	8d 45 14             	lea    0x14(%ebp),%eax
c010b6fb:	50                   	push   %eax
c010b6fc:	e8 99 fc ff ff       	call   c010b39a <getuint>
c010b701:	83 c4 10             	add    $0x10,%esp
c010b704:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b707:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 10;
c010b70a:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c010b711:	eb 7e                	jmp    c010b791 <vprintfmt+0x33d>

        // (unsigned) octal
        case 'o':
            num = getuint(&ap, lflag);
c010b713:	83 ec 08             	sub    $0x8,%esp
c010b716:	ff 75 e0             	pushl  -0x20(%ebp)
c010b719:	8d 45 14             	lea    0x14(%ebp),%eax
c010b71c:	50                   	push   %eax
c010b71d:	e8 78 fc ff ff       	call   c010b39a <getuint>
c010b722:	83 c4 10             	add    $0x10,%esp
c010b725:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b728:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 8;
c010b72b:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
            goto number;
c010b732:	eb 5d                	jmp    c010b791 <vprintfmt+0x33d>

        // pointer
        case 'p':
            putch('0', putdat);
c010b734:	83 ec 08             	sub    $0x8,%esp
c010b737:	ff 75 0c             	pushl  0xc(%ebp)
c010b73a:	6a 30                	push   $0x30
c010b73c:	8b 45 08             	mov    0x8(%ebp),%eax
c010b73f:	ff d0                	call   *%eax
c010b741:	83 c4 10             	add    $0x10,%esp
            putch('x', putdat);
c010b744:	83 ec 08             	sub    $0x8,%esp
c010b747:	ff 75 0c             	pushl  0xc(%ebp)
c010b74a:	6a 78                	push   $0x78
c010b74c:	8b 45 08             	mov    0x8(%ebp),%eax
c010b74f:	ff d0                	call   *%eax
c010b751:	83 c4 10             	add    $0x10,%esp
            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
c010b754:	8b 45 14             	mov    0x14(%ebp),%eax
c010b757:	8d 50 04             	lea    0x4(%eax),%edx
c010b75a:	89 55 14             	mov    %edx,0x14(%ebp)
c010b75d:	8b 00                	mov    (%eax),%eax
c010b75f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b762:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            base = 16;
c010b769:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
            goto number;
c010b770:	eb 1f                	jmp    c010b791 <vprintfmt+0x33d>

        // (unsigned) hexadecimal
        case 'x':
            num = getuint(&ap, lflag);
c010b772:	83 ec 08             	sub    $0x8,%esp
c010b775:	ff 75 e0             	pushl  -0x20(%ebp)
c010b778:	8d 45 14             	lea    0x14(%ebp),%eax
c010b77b:	50                   	push   %eax
c010b77c:	e8 19 fc ff ff       	call   c010b39a <getuint>
c010b781:	83 c4 10             	add    $0x10,%esp
c010b784:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b787:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 16;
c010b78a:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
        number:
            printnum(putch, putdat, num, base, width, padc);
c010b791:	0f be 55 db          	movsbl -0x25(%ebp),%edx
c010b795:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b798:	83 ec 04             	sub    $0x4,%esp
c010b79b:	52                   	push   %edx
c010b79c:	ff 75 e8             	pushl  -0x18(%ebp)
c010b79f:	50                   	push   %eax
c010b7a0:	ff 75 f4             	pushl  -0xc(%ebp)
c010b7a3:	ff 75 f0             	pushl  -0x10(%ebp)
c010b7a6:	ff 75 0c             	pushl  0xc(%ebp)
c010b7a9:	ff 75 08             	pushl  0x8(%ebp)
c010b7ac:	e8 f8 fa ff ff       	call   c010b2a9 <printnum>
c010b7b1:	83 c4 20             	add    $0x20,%esp
            break;
c010b7b4:	eb 39                	jmp    c010b7ef <vprintfmt+0x39b>

        // escaped '%' character
        case '%':
            putch(ch, putdat);
c010b7b6:	83 ec 08             	sub    $0x8,%esp
c010b7b9:	ff 75 0c             	pushl  0xc(%ebp)
c010b7bc:	53                   	push   %ebx
c010b7bd:	8b 45 08             	mov    0x8(%ebp),%eax
c010b7c0:	ff d0                	call   *%eax
c010b7c2:	83 c4 10             	add    $0x10,%esp
            break;
c010b7c5:	eb 28                	jmp    c010b7ef <vprintfmt+0x39b>

        // unrecognized escape sequence - just print it literally
        default:
            putch('%', putdat);
c010b7c7:	83 ec 08             	sub    $0x8,%esp
c010b7ca:	ff 75 0c             	pushl  0xc(%ebp)
c010b7cd:	6a 25                	push   $0x25
c010b7cf:	8b 45 08             	mov    0x8(%ebp),%eax
c010b7d2:	ff d0                	call   *%eax
c010b7d4:	83 c4 10             	add    $0x10,%esp
            for (fmt --; fmt[-1] != '%'; fmt --)
c010b7d7:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c010b7db:	eb 04                	jmp    c010b7e1 <vprintfmt+0x38d>
c010b7dd:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c010b7e1:	8b 45 10             	mov    0x10(%ebp),%eax
c010b7e4:	83 e8 01             	sub    $0x1,%eax
c010b7e7:	0f b6 00             	movzbl (%eax),%eax
c010b7ea:	3c 25                	cmp    $0x25,%al
c010b7ec:	75 ef                	jne    c010b7dd <vprintfmt+0x389>
                /* do nothing */;
            break;
c010b7ee:	90                   	nop
        }
    }
c010b7ef:	e9 68 fc ff ff       	jmp    c010b45c <vprintfmt+0x8>
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
            if (ch == '\0') {
                return;
c010b7f4:	90                   	nop
            for (fmt --; fmt[-1] != '%'; fmt --)
                /* do nothing */;
            break;
        }
    }
}
c010b7f5:	8d 65 f8             	lea    -0x8(%ebp),%esp
c010b7f8:	5b                   	pop    %ebx
c010b7f9:	5e                   	pop    %esi
c010b7fa:	5d                   	pop    %ebp
c010b7fb:	c3                   	ret    

c010b7fc <sprintputch>:
 * sprintputch - 'print' a single character in a buffer
 * @ch:         the character will be printed
 * @b:          the buffer to place the character @ch
 * */
static void
sprintputch(int ch, struct sprintbuf *b) {
c010b7fc:	55                   	push   %ebp
c010b7fd:	89 e5                	mov    %esp,%ebp
    b->cnt ++;
c010b7ff:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b802:	8b 40 08             	mov    0x8(%eax),%eax
c010b805:	8d 50 01             	lea    0x1(%eax),%edx
c010b808:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b80b:	89 50 08             	mov    %edx,0x8(%eax)
    if (b->buf < b->ebuf) {
c010b80e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b811:	8b 10                	mov    (%eax),%edx
c010b813:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b816:	8b 40 04             	mov    0x4(%eax),%eax
c010b819:	39 c2                	cmp    %eax,%edx
c010b81b:	73 12                	jae    c010b82f <sprintputch+0x33>
        *b->buf ++ = ch;
c010b81d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b820:	8b 00                	mov    (%eax),%eax
c010b822:	8d 48 01             	lea    0x1(%eax),%ecx
c010b825:	8b 55 0c             	mov    0xc(%ebp),%edx
c010b828:	89 0a                	mov    %ecx,(%edx)
c010b82a:	8b 55 08             	mov    0x8(%ebp),%edx
c010b82d:	88 10                	mov    %dl,(%eax)
    }
}
c010b82f:	90                   	nop
c010b830:	5d                   	pop    %ebp
c010b831:	c3                   	ret    

c010b832 <snprintf>:
 * @str:        the buffer to place the result into
 * @size:       the size of buffer, including the trailing null space
 * @fmt:        the format string to use
 * */
int
snprintf(char *str, size_t size, const char *fmt, ...) {
c010b832:	55                   	push   %ebp
c010b833:	89 e5                	mov    %esp,%ebp
c010b835:	83 ec 18             	sub    $0x18,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c010b838:	8d 45 14             	lea    0x14(%ebp),%eax
c010b83b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cnt = vsnprintf(str, size, fmt, ap);
c010b83e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b841:	50                   	push   %eax
c010b842:	ff 75 10             	pushl  0x10(%ebp)
c010b845:	ff 75 0c             	pushl  0xc(%ebp)
c010b848:	ff 75 08             	pushl  0x8(%ebp)
c010b84b:	e8 0b 00 00 00       	call   c010b85b <vsnprintf>
c010b850:	83 c4 10             	add    $0x10,%esp
c010b853:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c010b856:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010b859:	c9                   	leave  
c010b85a:	c3                   	ret    

c010b85b <vsnprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want snprintf() instead.
 * */
int
vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
c010b85b:	55                   	push   %ebp
c010b85c:	89 e5                	mov    %esp,%ebp
c010b85e:	83 ec 18             	sub    $0x18,%esp
    struct sprintbuf b = {str, str + size - 1, 0};
c010b861:	8b 45 08             	mov    0x8(%ebp),%eax
c010b864:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010b867:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b86a:	8d 50 ff             	lea    -0x1(%eax),%edx
c010b86d:	8b 45 08             	mov    0x8(%ebp),%eax
c010b870:	01 d0                	add    %edx,%eax
c010b872:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b875:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if (str == NULL || b.buf > b.ebuf) {
c010b87c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b880:	74 0a                	je     c010b88c <vsnprintf+0x31>
c010b882:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010b885:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b888:	39 c2                	cmp    %eax,%edx
c010b88a:	76 07                	jbe    c010b893 <vsnprintf+0x38>
        return -E_INVAL;
c010b88c:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010b891:	eb 20                	jmp    c010b8b3 <vsnprintf+0x58>
    }
    // print the string to the buffer
    vprintfmt((void*)sprintputch, &b, fmt, ap);
c010b893:	ff 75 14             	pushl  0x14(%ebp)
c010b896:	ff 75 10             	pushl  0x10(%ebp)
c010b899:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010b89c:	50                   	push   %eax
c010b89d:	68 fc b7 10 c0       	push   $0xc010b7fc
c010b8a2:	e8 ad fb ff ff       	call   c010b454 <vprintfmt>
c010b8a7:	83 c4 10             	add    $0x10,%esp
    // null terminate the buffer
    *b.buf = '\0';
c010b8aa:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b8ad:	c6 00 00             	movb   $0x0,(%eax)
    return b.cnt;
c010b8b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010b8b3:	c9                   	leave  
c010b8b4:	c3                   	ret    

c010b8b5 <hash32>:
 * @bits:   the number of bits in a return value
 *
 * High bits are more random, so we use them.
 * */
uint32_t
hash32(uint32_t val, unsigned int bits) {
c010b8b5:	55                   	push   %ebp
c010b8b6:	89 e5                	mov    %esp,%ebp
c010b8b8:	83 ec 10             	sub    $0x10,%esp
    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
c010b8bb:	8b 45 08             	mov    0x8(%ebp),%eax
c010b8be:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
c010b8c4:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return (hash >> (32 - bits));
c010b8c7:	b8 20 00 00 00       	mov    $0x20,%eax
c010b8cc:	2b 45 0c             	sub    0xc(%ebp),%eax
c010b8cf:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010b8d2:	89 c1                	mov    %eax,%ecx
c010b8d4:	d3 ea                	shr    %cl,%edx
c010b8d6:	89 d0                	mov    %edx,%eax
}
c010b8d8:	c9                   	leave  
c010b8d9:	c3                   	ret    

c010b8da <rand>:
 * rand - returns a pseudo-random integer
 *
 * The rand() function return a value in the range [0, RAND_MAX].
 * */
int
rand(void) {
c010b8da:	55                   	push   %ebp
c010b8db:	89 e5                	mov    %esp,%ebp
c010b8dd:	57                   	push   %edi
c010b8de:	56                   	push   %esi
c010b8df:	53                   	push   %ebx
c010b8e0:	83 ec 24             	sub    $0x24,%esp
    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
c010b8e3:	a1 a0 ce 12 c0       	mov    0xc012cea0,%eax
c010b8e8:	8b 15 a4 ce 12 c0    	mov    0xc012cea4,%edx
c010b8ee:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
c010b8f4:	6b f0 05             	imul   $0x5,%eax,%esi
c010b8f7:	01 fe                	add    %edi,%esi
c010b8f9:	bf 6d e6 ec de       	mov    $0xdeece66d,%edi
c010b8fe:	f7 e7                	mul    %edi
c010b900:	01 d6                	add    %edx,%esi
c010b902:	89 f2                	mov    %esi,%edx
c010b904:	83 c0 0b             	add    $0xb,%eax
c010b907:	83 d2 00             	adc    $0x0,%edx
c010b90a:	89 c7                	mov    %eax,%edi
c010b90c:	83 e7 ff             	and    $0xffffffff,%edi
c010b90f:	89 f9                	mov    %edi,%ecx
c010b911:	0f b7 da             	movzwl %dx,%ebx
c010b914:	89 0d a0 ce 12 c0    	mov    %ecx,0xc012cea0
c010b91a:	89 1d a4 ce 12 c0    	mov    %ebx,0xc012cea4
    unsigned long long result = (next >> 12);
c010b920:	a1 a0 ce 12 c0       	mov    0xc012cea0,%eax
c010b925:	8b 15 a4 ce 12 c0    	mov    0xc012cea4,%edx
c010b92b:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c010b92f:	c1 ea 0c             	shr    $0xc,%edx
c010b932:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010b935:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    return (int)do_div(result, RAND_MAX + 1);
c010b938:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
c010b93f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b942:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010b945:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010b948:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010b94b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b94e:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010b951:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010b955:	74 1c                	je     c010b973 <rand+0x99>
c010b957:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b95a:	ba 00 00 00 00       	mov    $0x0,%edx
c010b95f:	f7 75 dc             	divl   -0x24(%ebp)
c010b962:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010b965:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b968:	ba 00 00 00 00       	mov    $0x0,%edx
c010b96d:	f7 75 dc             	divl   -0x24(%ebp)
c010b970:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010b973:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b976:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010b979:	f7 75 dc             	divl   -0x24(%ebp)
c010b97c:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010b97f:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010b982:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b985:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010b988:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010b98b:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c010b98e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
}
c010b991:	83 c4 24             	add    $0x24,%esp
c010b994:	5b                   	pop    %ebx
c010b995:	5e                   	pop    %esi
c010b996:	5f                   	pop    %edi
c010b997:	5d                   	pop    %ebp
c010b998:	c3                   	ret    

c010b999 <srand>:
/* *
 * srand - seed the random number generator with the given number
 * @seed:   the required seed number
 * */
void
srand(unsigned int seed) {
c010b999:	55                   	push   %ebp
c010b99a:	89 e5                	mov    %esp,%ebp
    next = seed;
c010b99c:	8b 45 08             	mov    0x8(%ebp),%eax
c010b99f:	ba 00 00 00 00       	mov    $0x0,%edx
c010b9a4:	a3 a0 ce 12 c0       	mov    %eax,0xc012cea0
c010b9a9:	89 15 a4 ce 12 c0    	mov    %edx,0xc012cea4
}
c010b9af:	90                   	nop
c010b9b0:	5d                   	pop    %ebp
c010b9b1:	c3                   	ret    

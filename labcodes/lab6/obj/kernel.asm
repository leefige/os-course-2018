
bin/kernel:     file format elf32-i386


Disassembly of section .text:

c0100000 <kern_entry>:

.text
.globl kern_entry
kern_entry:
    # load pa of boot pgdir
    movl $REALLOC(__boot_pgdir), %eax
c0100000:	b8 00 e0 1a 00       	mov    $0x1ae000,%eax
    movl %eax, %cr3
c0100005:	0f 22 d8             	mov    %eax,%cr3

    # enable paging
    movl %cr0, %eax
c0100008:	0f 20 c0             	mov    %cr0,%eax
    orl $(CR0_PE | CR0_PG | CR0_AM | CR0_WP | CR0_NE | CR0_TS | CR0_EM | CR0_MP), %eax
c010000b:	0d 2f 00 05 80       	or     $0x8005002f,%eax
    andl $~(CR0_TS | CR0_EM), %eax
c0100010:	83 e0 f3             	and    $0xfffffff3,%eax
    movl %eax, %cr0
c0100013:	0f 22 c0             	mov    %eax,%cr0

    # update eip
    # now, eip = 0x1.....
    leal next, %eax
c0100016:	8d 05 1e 00 10 c0    	lea    0xc010001e,%eax
    # set eip = KERNBASE + 0x1.....
    jmp *%eax
c010001c:	ff e0                	jmp    *%eax

c010001e <next>:
next:

    # unmap va 0 ~ 4M, it's temporary mapping
    xorl %eax, %eax
c010001e:	31 c0                	xor    %eax,%eax
    movl %eax, __boot_pgdir
c0100020:	a3 00 e0 1a c0       	mov    %eax,0xc01ae000

    # set ebp, esp
    movl $0x0, %ebp
c0100025:	bd 00 00 00 00       	mov    $0x0,%ebp
    # the kernel stack region is from bootstack -- bootstacktop,
    # the kernel stack size is KSTACKSIZE (8KB)defined in memlayout.h
    movl $bootstacktop, %esp
c010002a:	bc 00 c0 12 c0       	mov    $0xc012c000,%esp
    # now kernel stack is ready , call the first C function
    call kern_init
c010002f:	e8 02 00 00 00       	call   c0100036 <kern_init>

c0100034 <spin>:

# should never get here
spin:
    jmp spin
c0100034:	eb fe                	jmp    c0100034 <spin>

c0100036 <kern_init>:
int kern_init(void) __attribute__((noreturn));
void grade_backtrace(void);
static void lab1_switch_test(void);

int
kern_init(void) {
c0100036:	55                   	push   %ebp
c0100037:	89 e5                	mov    %esp,%ebp
c0100039:	83 ec 18             	sub    $0x18,%esp
    extern char edata[], end[];
    memset(edata, 0, end - edata);
c010003c:	ba c4 31 1b c0       	mov    $0xc01b31c4,%edx
c0100041:	b8 00 00 1b c0       	mov    $0xc01b0000,%eax
c0100046:	29 c2                	sub    %eax,%edx
c0100048:	89 d0                	mov    %edx,%eax
c010004a:	83 ec 04             	sub    $0x4,%esp
c010004d:	50                   	push   %eax
c010004e:	6a 00                	push   $0x0
c0100050:	68 00 00 1b c0       	push   $0xc01b0000
c0100055:	e8 a3 b0 00 00       	call   c010b0fd <memset>
c010005a:	83 c4 10             	add    $0x10,%esp

    cons_init();                // init the console
c010005d:	e8 a4 1e 00 00       	call   c0101f06 <cons_init>

    const char *message = "(THU.CST) os is loading ...";
c0100062:	c7 45 f4 a0 b9 10 c0 	movl   $0xc010b9a0,-0xc(%ebp)
    cprintf("%s\n\n", message);
c0100069:	83 ec 08             	sub    $0x8,%esp
c010006c:	ff 75 f4             	pushl  -0xc(%ebp)
c010006f:	68 bc b9 10 c0       	push   $0xc010b9bc
c0100074:	e8 1e 02 00 00       	call   c0100297 <cprintf>
c0100079:	83 c4 10             	add    $0x10,%esp

    print_kerninfo();
c010007c:	e8 8c 09 00 00       	call   c0100a0d <print_kerninfo>

    grade_backtrace();
c0100081:	e8 90 00 00 00       	call   c0100116 <grade_backtrace>

    pmm_init();                 // init physical memory management
c0100086:	e8 a7 75 00 00       	call   c0107632 <pmm_init>

    pic_init();                 // init interrupt controller
c010008b:	e8 e8 1f 00 00       	call   c0102078 <pic_init>
    idt_init();                 // init interrupt descriptor table
c0100090:	e8 49 21 00 00       	call   c01021de <idt_init>

    vmm_init();                 // init virtual memory management
c0100095:	e8 a2 3c 00 00       	call   c0103d3c <vmm_init>
    sched_init();               // init scheduler
c010009a:	e8 46 a6 00 00       	call   c010a6e5 <sched_init>
    proc_init();                // init process table
c010009f:	e8 7a a3 00 00       	call   c010a41e <proc_init>
    
    ide_init();                 // init ide devices
c01000a4:	e8 2c 0e 00 00       	call   c0100ed5 <ide_init>
    swap_init();                // init swap
c01000a9:	e8 ac 52 00 00       	call   c010535a <swap_init>

    clock_init();               // init clock interrupt
c01000ae:	e8 fa 15 00 00       	call   c01016ad <clock_init>
    intr_enable();              // enable irq interrupt
c01000b3:	e8 fd 20 00 00       	call   c01021b5 <intr_enable>

    //LAB1: CAHLLENGE 1 If you try to do it, uncomment lab1_switch_test()
    // user/kernel mode switch test
    //lab1_switch_test();
    
    cpu_idle();                 // run idle process
c01000b8:	e8 fe a4 00 00       	call   c010a5bb <cpu_idle>

c01000bd <grade_backtrace2>:
}

void __attribute__((noinline))
grade_backtrace2(int arg0, int arg1, int arg2, int arg3) {
c01000bd:	55                   	push   %ebp
c01000be:	89 e5                	mov    %esp,%ebp
c01000c0:	83 ec 08             	sub    $0x8,%esp
    mon_backtrace(0, NULL, NULL);
c01000c3:	83 ec 04             	sub    $0x4,%esp
c01000c6:	6a 00                	push   $0x0
c01000c8:	6a 00                	push   $0x0
c01000ca:	6a 00                	push   $0x0
c01000cc:	e8 98 0d 00 00       	call   c0100e69 <mon_backtrace>
c01000d1:	83 c4 10             	add    $0x10,%esp
}
c01000d4:	90                   	nop
c01000d5:	c9                   	leave  
c01000d6:	c3                   	ret    

c01000d7 <grade_backtrace1>:

void __attribute__((noinline))
grade_backtrace1(int arg0, int arg1) {
c01000d7:	55                   	push   %ebp
c01000d8:	89 e5                	mov    %esp,%ebp
c01000da:	53                   	push   %ebx
c01000db:	83 ec 04             	sub    $0x4,%esp
    grade_backtrace2(arg0, (int)&arg0, arg1, (int)&arg1);
c01000de:	8d 4d 0c             	lea    0xc(%ebp),%ecx
c01000e1:	8b 55 0c             	mov    0xc(%ebp),%edx
c01000e4:	8d 5d 08             	lea    0x8(%ebp),%ebx
c01000e7:	8b 45 08             	mov    0x8(%ebp),%eax
c01000ea:	51                   	push   %ecx
c01000eb:	52                   	push   %edx
c01000ec:	53                   	push   %ebx
c01000ed:	50                   	push   %eax
c01000ee:	e8 ca ff ff ff       	call   c01000bd <grade_backtrace2>
c01000f3:	83 c4 10             	add    $0x10,%esp
}
c01000f6:	90                   	nop
c01000f7:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c01000fa:	c9                   	leave  
c01000fb:	c3                   	ret    

c01000fc <grade_backtrace0>:

void __attribute__((noinline))
grade_backtrace0(int arg0, int arg1, int arg2) {
c01000fc:	55                   	push   %ebp
c01000fd:	89 e5                	mov    %esp,%ebp
c01000ff:	83 ec 08             	sub    $0x8,%esp
    grade_backtrace1(arg0, arg2);
c0100102:	83 ec 08             	sub    $0x8,%esp
c0100105:	ff 75 10             	pushl  0x10(%ebp)
c0100108:	ff 75 08             	pushl  0x8(%ebp)
c010010b:	e8 c7 ff ff ff       	call   c01000d7 <grade_backtrace1>
c0100110:	83 c4 10             	add    $0x10,%esp
}
c0100113:	90                   	nop
c0100114:	c9                   	leave  
c0100115:	c3                   	ret    

c0100116 <grade_backtrace>:

void
grade_backtrace(void) {
c0100116:	55                   	push   %ebp
c0100117:	89 e5                	mov    %esp,%ebp
c0100119:	83 ec 08             	sub    $0x8,%esp
    grade_backtrace0(0, (int)kern_init, 0xffff0000);
c010011c:	b8 36 00 10 c0       	mov    $0xc0100036,%eax
c0100121:	83 ec 04             	sub    $0x4,%esp
c0100124:	68 00 00 ff ff       	push   $0xffff0000
c0100129:	50                   	push   %eax
c010012a:	6a 00                	push   $0x0
c010012c:	e8 cb ff ff ff       	call   c01000fc <grade_backtrace0>
c0100131:	83 c4 10             	add    $0x10,%esp
}
c0100134:	90                   	nop
c0100135:	c9                   	leave  
c0100136:	c3                   	ret    

c0100137 <lab1_print_cur_status>:

static void
lab1_print_cur_status(void) {
c0100137:	55                   	push   %ebp
c0100138:	89 e5                	mov    %esp,%ebp
c010013a:	83 ec 18             	sub    $0x18,%esp
    static int round = 0;
    uint16_t reg1, reg2, reg3, reg4;
    asm volatile (
c010013d:	8c 4d f6             	mov    %cs,-0xa(%ebp)
c0100140:	8c 5d f4             	mov    %ds,-0xc(%ebp)
c0100143:	8c 45 f2             	mov    %es,-0xe(%ebp)
c0100146:	8c 55 f0             	mov    %ss,-0x10(%ebp)
            "mov %%cs, %0;"
            "mov %%ds, %1;"
            "mov %%es, %2;"
            "mov %%ss, %3;"
            : "=m"(reg1), "=m"(reg2), "=m"(reg3), "=m"(reg4));
    cprintf("%d: @ring %d\n", round, reg1 & 3);
c0100149:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010014d:	0f b7 c0             	movzwl %ax,%eax
c0100150:	83 e0 03             	and    $0x3,%eax
c0100153:	89 c2                	mov    %eax,%edx
c0100155:	a1 00 00 1b c0       	mov    0xc01b0000,%eax
c010015a:	83 ec 04             	sub    $0x4,%esp
c010015d:	52                   	push   %edx
c010015e:	50                   	push   %eax
c010015f:	68 c1 b9 10 c0       	push   $0xc010b9c1
c0100164:	e8 2e 01 00 00       	call   c0100297 <cprintf>
c0100169:	83 c4 10             	add    $0x10,%esp
    cprintf("%d:  cs = %x\n", round, reg1);
c010016c:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100170:	0f b7 d0             	movzwl %ax,%edx
c0100173:	a1 00 00 1b c0       	mov    0xc01b0000,%eax
c0100178:	83 ec 04             	sub    $0x4,%esp
c010017b:	52                   	push   %edx
c010017c:	50                   	push   %eax
c010017d:	68 cf b9 10 c0       	push   $0xc010b9cf
c0100182:	e8 10 01 00 00       	call   c0100297 <cprintf>
c0100187:	83 c4 10             	add    $0x10,%esp
    cprintf("%d:  ds = %x\n", round, reg2);
c010018a:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c010018e:	0f b7 d0             	movzwl %ax,%edx
c0100191:	a1 00 00 1b c0       	mov    0xc01b0000,%eax
c0100196:	83 ec 04             	sub    $0x4,%esp
c0100199:	52                   	push   %edx
c010019a:	50                   	push   %eax
c010019b:	68 dd b9 10 c0       	push   $0xc010b9dd
c01001a0:	e8 f2 00 00 00       	call   c0100297 <cprintf>
c01001a5:	83 c4 10             	add    $0x10,%esp
    cprintf("%d:  es = %x\n", round, reg3);
c01001a8:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01001ac:	0f b7 d0             	movzwl %ax,%edx
c01001af:	a1 00 00 1b c0       	mov    0xc01b0000,%eax
c01001b4:	83 ec 04             	sub    $0x4,%esp
c01001b7:	52                   	push   %edx
c01001b8:	50                   	push   %eax
c01001b9:	68 eb b9 10 c0       	push   $0xc010b9eb
c01001be:	e8 d4 00 00 00       	call   c0100297 <cprintf>
c01001c3:	83 c4 10             	add    $0x10,%esp
    cprintf("%d:  ss = %x\n", round, reg4);
c01001c6:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c01001ca:	0f b7 d0             	movzwl %ax,%edx
c01001cd:	a1 00 00 1b c0       	mov    0xc01b0000,%eax
c01001d2:	83 ec 04             	sub    $0x4,%esp
c01001d5:	52                   	push   %edx
c01001d6:	50                   	push   %eax
c01001d7:	68 f9 b9 10 c0       	push   $0xc010b9f9
c01001dc:	e8 b6 00 00 00       	call   c0100297 <cprintf>
c01001e1:	83 c4 10             	add    $0x10,%esp
    round ++;
c01001e4:	a1 00 00 1b c0       	mov    0xc01b0000,%eax
c01001e9:	83 c0 01             	add    $0x1,%eax
c01001ec:	a3 00 00 1b c0       	mov    %eax,0xc01b0000
}
c01001f1:	90                   	nop
c01001f2:	c9                   	leave  
c01001f3:	c3                   	ret    

c01001f4 <lab1_switch_to_user>:

static void
lab1_switch_to_user(void) {
c01001f4:	55                   	push   %ebp
c01001f5:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 : TODO
    asm volatile (
c01001f7:	cd 78                	int    $0x78
c01001f9:	89 ec                	mov    %ebp,%esp
	    "int %0;"
        "movl %%ebp, %%esp"
	    : 
	    : "i"(T_SWITCH_TOU)
	);
}
c01001fb:	90                   	nop
c01001fc:	5d                   	pop    %ebp
c01001fd:	c3                   	ret    

c01001fe <lab1_switch_to_kernel>:

static void
lab1_switch_to_kernel(void) {
c01001fe:	55                   	push   %ebp
c01001ff:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 :  TODO
    // cprintf("in lab1_switch_to_kernel\n");
    asm volatile (
c0100201:	cd 79                	int    $0x79
c0100203:	89 ec                	mov    %ebp,%esp
	    "int %0;"
        "movl %%ebp, %%esp"
        : 
	    : "i"(T_SWITCH_TOK)
	);
}
c0100205:	90                   	nop
c0100206:	5d                   	pop    %ebp
c0100207:	c3                   	ret    

c0100208 <lab1_switch_test>:

static void
lab1_switch_test(void) {
c0100208:	55                   	push   %ebp
c0100209:	89 e5                	mov    %esp,%ebp
c010020b:	83 ec 08             	sub    $0x8,%esp
    lab1_print_cur_status();
c010020e:	e8 24 ff ff ff       	call   c0100137 <lab1_print_cur_status>
    cprintf("+++ switch to  user  mode +++\n");
c0100213:	83 ec 0c             	sub    $0xc,%esp
c0100216:	68 08 ba 10 c0       	push   $0xc010ba08
c010021b:	e8 77 00 00 00       	call   c0100297 <cprintf>
c0100220:	83 c4 10             	add    $0x10,%esp
    lab1_switch_to_user();
c0100223:	e8 cc ff ff ff       	call   c01001f4 <lab1_switch_to_user>
    lab1_print_cur_status();
c0100228:	e8 0a ff ff ff       	call   c0100137 <lab1_print_cur_status>
    cprintf("+++ switch to kernel mode +++\n");
c010022d:	83 ec 0c             	sub    $0xc,%esp
c0100230:	68 28 ba 10 c0       	push   $0xc010ba28
c0100235:	e8 5d 00 00 00       	call   c0100297 <cprintf>
c010023a:	83 c4 10             	add    $0x10,%esp
    lab1_switch_to_kernel();
c010023d:	e8 bc ff ff ff       	call   c01001fe <lab1_switch_to_kernel>
    lab1_print_cur_status();
c0100242:	e8 f0 fe ff ff       	call   c0100137 <lab1_print_cur_status>
}
c0100247:	90                   	nop
c0100248:	c9                   	leave  
c0100249:	c3                   	ret    

c010024a <cputch>:
/* *
 * cputch - writes a single character @c to stdout, and it will
 * increace the value of counter pointed by @cnt.
 * */
static void
cputch(int c, int *cnt) {
c010024a:	55                   	push   %ebp
c010024b:	89 e5                	mov    %esp,%ebp
c010024d:	83 ec 08             	sub    $0x8,%esp
    cons_putc(c);
c0100250:	83 ec 0c             	sub    $0xc,%esp
c0100253:	ff 75 08             	pushl  0x8(%ebp)
c0100256:	e8 dc 1c 00 00       	call   c0101f37 <cons_putc>
c010025b:	83 c4 10             	add    $0x10,%esp
    (*cnt) ++;
c010025e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100261:	8b 00                	mov    (%eax),%eax
c0100263:	8d 50 01             	lea    0x1(%eax),%edx
c0100266:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100269:	89 10                	mov    %edx,(%eax)
}
c010026b:	90                   	nop
c010026c:	c9                   	leave  
c010026d:	c3                   	ret    

c010026e <vcprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want cprintf() instead.
 * */
int
vcprintf(const char *fmt, va_list ap) {
c010026e:	55                   	push   %ebp
c010026f:	89 e5                	mov    %esp,%ebp
c0100271:	83 ec 18             	sub    $0x18,%esp
    int cnt = 0;
c0100274:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    vprintfmt((void*)cputch, &cnt, fmt, ap);
c010027b:	ff 75 0c             	pushl  0xc(%ebp)
c010027e:	ff 75 08             	pushl  0x8(%ebp)
c0100281:	8d 45 f4             	lea    -0xc(%ebp),%eax
c0100284:	50                   	push   %eax
c0100285:	68 4a 02 10 c0       	push   $0xc010024a
c010028a:	e8 a4 b1 00 00       	call   c010b433 <vprintfmt>
c010028f:	83 c4 10             	add    $0x10,%esp
    return cnt;
c0100292:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100295:	c9                   	leave  
c0100296:	c3                   	ret    

c0100297 <cprintf>:
 *
 * The return value is the number of characters which would be
 * written to stdout.
 * */
int
cprintf(const char *fmt, ...) {
c0100297:	55                   	push   %ebp
c0100298:	89 e5                	mov    %esp,%ebp
c010029a:	83 ec 18             	sub    $0x18,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c010029d:	8d 45 0c             	lea    0xc(%ebp),%eax
c01002a0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cnt = vcprintf(fmt, ap);
c01002a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002a6:	83 ec 08             	sub    $0x8,%esp
c01002a9:	50                   	push   %eax
c01002aa:	ff 75 08             	pushl  0x8(%ebp)
c01002ad:	e8 bc ff ff ff       	call   c010026e <vcprintf>
c01002b2:	83 c4 10             	add    $0x10,%esp
c01002b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c01002b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01002bb:	c9                   	leave  
c01002bc:	c3                   	ret    

c01002bd <cputchar>:

/* cputchar - writes a single character to stdout */
void
cputchar(int c) {
c01002bd:	55                   	push   %ebp
c01002be:	89 e5                	mov    %esp,%ebp
c01002c0:	83 ec 08             	sub    $0x8,%esp
    cons_putc(c);
c01002c3:	83 ec 0c             	sub    $0xc,%esp
c01002c6:	ff 75 08             	pushl  0x8(%ebp)
c01002c9:	e8 69 1c 00 00       	call   c0101f37 <cons_putc>
c01002ce:	83 c4 10             	add    $0x10,%esp
}
c01002d1:	90                   	nop
c01002d2:	c9                   	leave  
c01002d3:	c3                   	ret    

c01002d4 <cputs>:
/* *
 * cputs- writes the string pointed by @str to stdout and
 * appends a newline character.
 * */
int
cputs(const char *str) {
c01002d4:	55                   	push   %ebp
c01002d5:	89 e5                	mov    %esp,%ebp
c01002d7:	83 ec 18             	sub    $0x18,%esp
    int cnt = 0;
c01002da:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    char c;
    while ((c = *str ++) != '\0') {
c01002e1:	eb 14                	jmp    c01002f7 <cputs+0x23>
        cputch(c, &cnt);
c01002e3:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
c01002e7:	83 ec 08             	sub    $0x8,%esp
c01002ea:	8d 55 f0             	lea    -0x10(%ebp),%edx
c01002ed:	52                   	push   %edx
c01002ee:	50                   	push   %eax
c01002ef:	e8 56 ff ff ff       	call   c010024a <cputch>
c01002f4:	83 c4 10             	add    $0x10,%esp
 * */
int
cputs(const char *str) {
    int cnt = 0;
    char c;
    while ((c = *str ++) != '\0') {
c01002f7:	8b 45 08             	mov    0x8(%ebp),%eax
c01002fa:	8d 50 01             	lea    0x1(%eax),%edx
c01002fd:	89 55 08             	mov    %edx,0x8(%ebp)
c0100300:	0f b6 00             	movzbl (%eax),%eax
c0100303:	88 45 f7             	mov    %al,-0x9(%ebp)
c0100306:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
c010030a:	75 d7                	jne    c01002e3 <cputs+0xf>
        cputch(c, &cnt);
    }
    cputch('\n', &cnt);
c010030c:	83 ec 08             	sub    $0x8,%esp
c010030f:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0100312:	50                   	push   %eax
c0100313:	6a 0a                	push   $0xa
c0100315:	e8 30 ff ff ff       	call   c010024a <cputch>
c010031a:	83 c4 10             	add    $0x10,%esp
    return cnt;
c010031d:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0100320:	c9                   	leave  
c0100321:	c3                   	ret    

c0100322 <getchar>:

/* getchar - reads a single non-zero character from stdin */
int
getchar(void) {
c0100322:	55                   	push   %ebp
c0100323:	89 e5                	mov    %esp,%ebp
c0100325:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = cons_getc()) == 0)
c0100328:	e8 53 1c 00 00       	call   c0101f80 <cons_getc>
c010032d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100330:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100334:	74 f2                	je     c0100328 <getchar+0x6>
        /* do nothing */;
    return c;
c0100336:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100339:	c9                   	leave  
c010033a:	c3                   	ret    

c010033b <readline>:
 * The readline() function returns the text of the line read. If some errors
 * are happened, NULL is returned. The return value is a global variable,
 * thus it should be copied before it is used.
 * */
char *
readline(const char *prompt) {
c010033b:	55                   	push   %ebp
c010033c:	89 e5                	mov    %esp,%ebp
c010033e:	83 ec 18             	sub    $0x18,%esp
    if (prompt != NULL) {
c0100341:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0100345:	74 13                	je     c010035a <readline+0x1f>
        cprintf("%s", prompt);
c0100347:	83 ec 08             	sub    $0x8,%esp
c010034a:	ff 75 08             	pushl  0x8(%ebp)
c010034d:	68 47 ba 10 c0       	push   $0xc010ba47
c0100352:	e8 40 ff ff ff       	call   c0100297 <cprintf>
c0100357:	83 c4 10             	add    $0x10,%esp
    }
    int i = 0, c;
c010035a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        c = getchar();
c0100361:	e8 bc ff ff ff       	call   c0100322 <getchar>
c0100366:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (c < 0) {
c0100369:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010036d:	79 0a                	jns    c0100379 <readline+0x3e>
            return NULL;
c010036f:	b8 00 00 00 00       	mov    $0x0,%eax
c0100374:	e9 82 00 00 00       	jmp    c01003fb <readline+0xc0>
        }
        else if (c >= ' ' && i < BUFSIZE - 1) {
c0100379:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
c010037d:	7e 2b                	jle    c01003aa <readline+0x6f>
c010037f:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
c0100386:	7f 22                	jg     c01003aa <readline+0x6f>
            cputchar(c);
c0100388:	83 ec 0c             	sub    $0xc,%esp
c010038b:	ff 75 f0             	pushl  -0x10(%ebp)
c010038e:	e8 2a ff ff ff       	call   c01002bd <cputchar>
c0100393:	83 c4 10             	add    $0x10,%esp
            buf[i ++] = c;
c0100396:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100399:	8d 50 01             	lea    0x1(%eax),%edx
c010039c:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010039f:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01003a2:	88 90 20 00 1b c0    	mov    %dl,-0x3fe4ffe0(%eax)
c01003a8:	eb 4c                	jmp    c01003f6 <readline+0xbb>
        }
        else if (c == '\b' && i > 0) {
c01003aa:	83 7d f0 08          	cmpl   $0x8,-0x10(%ebp)
c01003ae:	75 1a                	jne    c01003ca <readline+0x8f>
c01003b0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01003b4:	7e 14                	jle    c01003ca <readline+0x8f>
            cputchar(c);
c01003b6:	83 ec 0c             	sub    $0xc,%esp
c01003b9:	ff 75 f0             	pushl  -0x10(%ebp)
c01003bc:	e8 fc fe ff ff       	call   c01002bd <cputchar>
c01003c1:	83 c4 10             	add    $0x10,%esp
            i --;
c01003c4:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c01003c8:	eb 2c                	jmp    c01003f6 <readline+0xbb>
        }
        else if (c == '\n' || c == '\r') {
c01003ca:	83 7d f0 0a          	cmpl   $0xa,-0x10(%ebp)
c01003ce:	74 06                	je     c01003d6 <readline+0x9b>
c01003d0:	83 7d f0 0d          	cmpl   $0xd,-0x10(%ebp)
c01003d4:	75 8b                	jne    c0100361 <readline+0x26>
            cputchar(c);
c01003d6:	83 ec 0c             	sub    $0xc,%esp
c01003d9:	ff 75 f0             	pushl  -0x10(%ebp)
c01003dc:	e8 dc fe ff ff       	call   c01002bd <cputchar>
c01003e1:	83 c4 10             	add    $0x10,%esp
            buf[i] = '\0';
c01003e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01003e7:	05 20 00 1b c0       	add    $0xc01b0020,%eax
c01003ec:	c6 00 00             	movb   $0x0,(%eax)
            return buf;
c01003ef:	b8 20 00 1b c0       	mov    $0xc01b0020,%eax
c01003f4:	eb 05                	jmp    c01003fb <readline+0xc0>
        }
    }
c01003f6:	e9 66 ff ff ff       	jmp    c0100361 <readline+0x26>
}
c01003fb:	c9                   	leave  
c01003fc:	c3                   	ret    

c01003fd <__panic>:
/* *
 * __panic - __panic is called on unresolvable fatal errors. it prints
 * "panic: 'message'", and then enters the kernel monitor.
 * */
void
__panic(const char *file, int line, const char *fmt, ...) {
c01003fd:	55                   	push   %ebp
c01003fe:	89 e5                	mov    %esp,%ebp
c0100400:	83 ec 18             	sub    $0x18,%esp
    if (is_panic) {
c0100403:	a1 20 04 1b c0       	mov    0xc01b0420,%eax
c0100408:	85 c0                	test   %eax,%eax
c010040a:	75 5f                	jne    c010046b <__panic+0x6e>
        goto panic_dead;
    }
    is_panic = 1;
c010040c:	c7 05 20 04 1b c0 01 	movl   $0x1,0xc01b0420
c0100413:	00 00 00 

    // print the 'message'
    va_list ap;
    va_start(ap, fmt);
c0100416:	8d 45 14             	lea    0x14(%ebp),%eax
c0100419:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cprintf("kernel panic at %s:%d:\n    ", file, line);
c010041c:	83 ec 04             	sub    $0x4,%esp
c010041f:	ff 75 0c             	pushl  0xc(%ebp)
c0100422:	ff 75 08             	pushl  0x8(%ebp)
c0100425:	68 4a ba 10 c0       	push   $0xc010ba4a
c010042a:	e8 68 fe ff ff       	call   c0100297 <cprintf>
c010042f:	83 c4 10             	add    $0x10,%esp
    vcprintf(fmt, ap);
c0100432:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100435:	83 ec 08             	sub    $0x8,%esp
c0100438:	50                   	push   %eax
c0100439:	ff 75 10             	pushl  0x10(%ebp)
c010043c:	e8 2d fe ff ff       	call   c010026e <vcprintf>
c0100441:	83 c4 10             	add    $0x10,%esp
    cprintf("\n");
c0100444:	83 ec 0c             	sub    $0xc,%esp
c0100447:	68 66 ba 10 c0       	push   $0xc010ba66
c010044c:	e8 46 fe ff ff       	call   c0100297 <cprintf>
c0100451:	83 c4 10             	add    $0x10,%esp
    
    cprintf("stack trackback:\n");
c0100454:	83 ec 0c             	sub    $0xc,%esp
c0100457:	68 68 ba 10 c0       	push   $0xc010ba68
c010045c:	e8 36 fe ff ff       	call   c0100297 <cprintf>
c0100461:	83 c4 10             	add    $0x10,%esp
    print_stackframe();
c0100464:	e8 ee 06 00 00       	call   c0100b57 <print_stackframe>
c0100469:	eb 01                	jmp    c010046c <__panic+0x6f>
 * "panic: 'message'", and then enters the kernel monitor.
 * */
void
__panic(const char *file, int line, const char *fmt, ...) {
    if (is_panic) {
        goto panic_dead;
c010046b:	90                   	nop
    print_stackframe();
    
    va_end(ap);

panic_dead:
    intr_disable();
c010046c:	e8 4b 1d 00 00       	call   c01021bc <intr_disable>
    while (1) {
        kmonitor(NULL);
c0100471:	83 ec 0c             	sub    $0xc,%esp
c0100474:	6a 00                	push   $0x0
c0100476:	e8 14 09 00 00       	call   c0100d8f <kmonitor>
c010047b:	83 c4 10             	add    $0x10,%esp
    }
c010047e:	eb f1                	jmp    c0100471 <__panic+0x74>

c0100480 <__warn>:
}

/* __warn - like panic, but don't */
void
__warn(const char *file, int line, const char *fmt, ...) {
c0100480:	55                   	push   %ebp
c0100481:	89 e5                	mov    %esp,%ebp
c0100483:	83 ec 18             	sub    $0x18,%esp
    va_list ap;
    va_start(ap, fmt);
c0100486:	8d 45 14             	lea    0x14(%ebp),%eax
c0100489:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cprintf("kernel warning at %s:%d:\n    ", file, line);
c010048c:	83 ec 04             	sub    $0x4,%esp
c010048f:	ff 75 0c             	pushl  0xc(%ebp)
c0100492:	ff 75 08             	pushl  0x8(%ebp)
c0100495:	68 7a ba 10 c0       	push   $0xc010ba7a
c010049a:	e8 f8 fd ff ff       	call   c0100297 <cprintf>
c010049f:	83 c4 10             	add    $0x10,%esp
    vcprintf(fmt, ap);
c01004a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01004a5:	83 ec 08             	sub    $0x8,%esp
c01004a8:	50                   	push   %eax
c01004a9:	ff 75 10             	pushl  0x10(%ebp)
c01004ac:	e8 bd fd ff ff       	call   c010026e <vcprintf>
c01004b1:	83 c4 10             	add    $0x10,%esp
    cprintf("\n");
c01004b4:	83 ec 0c             	sub    $0xc,%esp
c01004b7:	68 66 ba 10 c0       	push   $0xc010ba66
c01004bc:	e8 d6 fd ff ff       	call   c0100297 <cprintf>
c01004c1:	83 c4 10             	add    $0x10,%esp
    va_end(ap);
}
c01004c4:	90                   	nop
c01004c5:	c9                   	leave  
c01004c6:	c3                   	ret    

c01004c7 <is_kernel_panic>:

bool
is_kernel_panic(void) {
c01004c7:	55                   	push   %ebp
c01004c8:	89 e5                	mov    %esp,%ebp
    return is_panic;
c01004ca:	a1 20 04 1b c0       	mov    0xc01b0420,%eax
}
c01004cf:	5d                   	pop    %ebp
c01004d0:	c3                   	ret    

c01004d1 <stab_binsearch>:
 *      stab_binsearch(stabs, &left, &right, N_SO, 0xf0100184);
 * will exit setting left = 118, right = 554.
 * */
static void
stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
           int type, uintptr_t addr) {
c01004d1:	55                   	push   %ebp
c01004d2:	89 e5                	mov    %esp,%ebp
c01004d4:	83 ec 20             	sub    $0x20,%esp
    int l = *region_left, r = *region_right, any_matches = 0;
c01004d7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01004da:	8b 00                	mov    (%eax),%eax
c01004dc:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01004df:	8b 45 10             	mov    0x10(%ebp),%eax
c01004e2:	8b 00                	mov    (%eax),%eax
c01004e4:	89 45 f8             	mov    %eax,-0x8(%ebp)
c01004e7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    while (l <= r) {
c01004ee:	e9 d2 00 00 00       	jmp    c01005c5 <stab_binsearch+0xf4>
        int true_m = (l + r) / 2, m = true_m;
c01004f3:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01004f6:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01004f9:	01 d0                	add    %edx,%eax
c01004fb:	89 c2                	mov    %eax,%edx
c01004fd:	c1 ea 1f             	shr    $0x1f,%edx
c0100500:	01 d0                	add    %edx,%eax
c0100502:	d1 f8                	sar    %eax
c0100504:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0100507:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010050a:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // search for earliest stab with right type
        while (m >= l && stabs[m].n_type != type) {
c010050d:	eb 04                	jmp    c0100513 <stab_binsearch+0x42>
            m --;
c010050f:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)

    while (l <= r) {
        int true_m = (l + r) / 2, m = true_m;

        // search for earliest stab with right type
        while (m >= l && stabs[m].n_type != type) {
c0100513:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100516:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100519:	7c 1f                	jl     c010053a <stab_binsearch+0x69>
c010051b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010051e:	89 d0                	mov    %edx,%eax
c0100520:	01 c0                	add    %eax,%eax
c0100522:	01 d0                	add    %edx,%eax
c0100524:	c1 e0 02             	shl    $0x2,%eax
c0100527:	89 c2                	mov    %eax,%edx
c0100529:	8b 45 08             	mov    0x8(%ebp),%eax
c010052c:	01 d0                	add    %edx,%eax
c010052e:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100532:	0f b6 c0             	movzbl %al,%eax
c0100535:	3b 45 14             	cmp    0x14(%ebp),%eax
c0100538:	75 d5                	jne    c010050f <stab_binsearch+0x3e>
            m --;
        }
        if (m < l) {    // no match in [l, m]
c010053a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010053d:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100540:	7d 0b                	jge    c010054d <stab_binsearch+0x7c>
            l = true_m + 1;
c0100542:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100545:	83 c0 01             	add    $0x1,%eax
c0100548:	89 45 fc             	mov    %eax,-0x4(%ebp)
            continue;
c010054b:	eb 78                	jmp    c01005c5 <stab_binsearch+0xf4>
        }

        // actual binary search
        any_matches = 1;
c010054d:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
        if (stabs[m].n_value < addr) {
c0100554:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100557:	89 d0                	mov    %edx,%eax
c0100559:	01 c0                	add    %eax,%eax
c010055b:	01 d0                	add    %edx,%eax
c010055d:	c1 e0 02             	shl    $0x2,%eax
c0100560:	89 c2                	mov    %eax,%edx
c0100562:	8b 45 08             	mov    0x8(%ebp),%eax
c0100565:	01 d0                	add    %edx,%eax
c0100567:	8b 40 08             	mov    0x8(%eax),%eax
c010056a:	3b 45 18             	cmp    0x18(%ebp),%eax
c010056d:	73 13                	jae    c0100582 <stab_binsearch+0xb1>
            *region_left = m;
c010056f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100572:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100575:	89 10                	mov    %edx,(%eax)
            l = true_m + 1;
c0100577:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010057a:	83 c0 01             	add    $0x1,%eax
c010057d:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0100580:	eb 43                	jmp    c01005c5 <stab_binsearch+0xf4>
        } else if (stabs[m].n_value > addr) {
c0100582:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100585:	89 d0                	mov    %edx,%eax
c0100587:	01 c0                	add    %eax,%eax
c0100589:	01 d0                	add    %edx,%eax
c010058b:	c1 e0 02             	shl    $0x2,%eax
c010058e:	89 c2                	mov    %eax,%edx
c0100590:	8b 45 08             	mov    0x8(%ebp),%eax
c0100593:	01 d0                	add    %edx,%eax
c0100595:	8b 40 08             	mov    0x8(%eax),%eax
c0100598:	3b 45 18             	cmp    0x18(%ebp),%eax
c010059b:	76 16                	jbe    c01005b3 <stab_binsearch+0xe2>
            *region_right = m - 1;
c010059d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01005a0:	8d 50 ff             	lea    -0x1(%eax),%edx
c01005a3:	8b 45 10             	mov    0x10(%ebp),%eax
c01005a6:	89 10                	mov    %edx,(%eax)
            r = m - 1;
c01005a8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01005ab:	83 e8 01             	sub    $0x1,%eax
c01005ae:	89 45 f8             	mov    %eax,-0x8(%ebp)
c01005b1:	eb 12                	jmp    c01005c5 <stab_binsearch+0xf4>
        } else {
            // exact match for 'addr', but continue loop to find
            // *region_right
            *region_left = m;
c01005b3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01005b6:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01005b9:	89 10                	mov    %edx,(%eax)
            l = m;
c01005bb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01005be:	89 45 fc             	mov    %eax,-0x4(%ebp)
            addr ++;
c01005c1:	83 45 18 01          	addl   $0x1,0x18(%ebp)
static void
stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
           int type, uintptr_t addr) {
    int l = *region_left, r = *region_right, any_matches = 0;

    while (l <= r) {
c01005c5:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01005c8:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c01005cb:	0f 8e 22 ff ff ff    	jle    c01004f3 <stab_binsearch+0x22>
            l = m;
            addr ++;
        }
    }

    if (!any_matches) {
c01005d1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01005d5:	75 0f                	jne    c01005e6 <stab_binsearch+0x115>
        *region_right = *region_left - 1;
c01005d7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01005da:	8b 00                	mov    (%eax),%eax
c01005dc:	8d 50 ff             	lea    -0x1(%eax),%edx
c01005df:	8b 45 10             	mov    0x10(%ebp),%eax
c01005e2:	89 10                	mov    %edx,(%eax)
        l = *region_right;
        for (; l > *region_left && stabs[l].n_type != type; l --)
            /* do nothing */;
        *region_left = l;
    }
}
c01005e4:	eb 3f                	jmp    c0100625 <stab_binsearch+0x154>
    if (!any_matches) {
        *region_right = *region_left - 1;
    }
    else {
        // find rightmost region containing 'addr'
        l = *region_right;
c01005e6:	8b 45 10             	mov    0x10(%ebp),%eax
c01005e9:	8b 00                	mov    (%eax),%eax
c01005eb:	89 45 fc             	mov    %eax,-0x4(%ebp)
        for (; l > *region_left && stabs[l].n_type != type; l --)
c01005ee:	eb 04                	jmp    c01005f4 <stab_binsearch+0x123>
c01005f0:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
c01005f4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01005f7:	8b 00                	mov    (%eax),%eax
c01005f9:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c01005fc:	7d 1f                	jge    c010061d <stab_binsearch+0x14c>
c01005fe:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0100601:	89 d0                	mov    %edx,%eax
c0100603:	01 c0                	add    %eax,%eax
c0100605:	01 d0                	add    %edx,%eax
c0100607:	c1 e0 02             	shl    $0x2,%eax
c010060a:	89 c2                	mov    %eax,%edx
c010060c:	8b 45 08             	mov    0x8(%ebp),%eax
c010060f:	01 d0                	add    %edx,%eax
c0100611:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100615:	0f b6 c0             	movzbl %al,%eax
c0100618:	3b 45 14             	cmp    0x14(%ebp),%eax
c010061b:	75 d3                	jne    c01005f0 <stab_binsearch+0x11f>
            /* do nothing */;
        *region_left = l;
c010061d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100620:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0100623:	89 10                	mov    %edx,(%eax)
    }
}
c0100625:	90                   	nop
c0100626:	c9                   	leave  
c0100627:	c3                   	ret    

c0100628 <debuginfo_eip>:
 * the specified instruction address, @addr.  Returns 0 if information
 * was found, and negative if not.  But even if it returns negative it
 * has stored some information into '*info'.
 * */
int
debuginfo_eip(uintptr_t addr, struct eipdebuginfo *info) {
c0100628:	55                   	push   %ebp
c0100629:	89 e5                	mov    %esp,%ebp
c010062b:	83 ec 38             	sub    $0x38,%esp
    const struct stab *stabs, *stab_end;
    const char *stabstr, *stabstr_end;

    info->eip_file = "<unknown>";
c010062e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100631:	c7 00 98 ba 10 c0    	movl   $0xc010ba98,(%eax)
    info->eip_line = 0;
c0100637:	8b 45 0c             	mov    0xc(%ebp),%eax
c010063a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    info->eip_fn_name = "<unknown>";
c0100641:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100644:	c7 40 08 98 ba 10 c0 	movl   $0xc010ba98,0x8(%eax)
    info->eip_fn_namelen = 9;
c010064b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010064e:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
    info->eip_fn_addr = addr;
c0100655:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100658:	8b 55 08             	mov    0x8(%ebp),%edx
c010065b:	89 50 10             	mov    %edx,0x10(%eax)
    info->eip_fn_narg = 0;
c010065e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100661:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

    // find the relevant set of stabs
    if (addr >= KERNBASE) {
c0100668:	81 7d 08 ff ff ff bf 	cmpl   $0xbfffffff,0x8(%ebp)
c010066f:	76 21                	jbe    c0100692 <debuginfo_eip+0x6a>
        stabs = __STAB_BEGIN__;
c0100671:	c7 45 f4 a0 e1 10 c0 	movl   $0xc010e1a0,-0xc(%ebp)
        stab_end = __STAB_END__;
c0100678:	c7 45 f0 3c 38 12 c0 	movl   $0xc012383c,-0x10(%ebp)
        stabstr = __STABSTR_BEGIN__;
c010067f:	c7 45 ec 3d 38 12 c0 	movl   $0xc012383d,-0x14(%ebp)
        stabstr_end = __STABSTR_END__;
c0100686:	c7 45 e8 29 9a 12 c0 	movl   $0xc0129a29,-0x18(%ebp)
c010068d:	e9 c3 00 00 00       	jmp    c0100755 <debuginfo_eip+0x12d>
    }
    else {
        // user-program linker script, tools/user.ld puts the information about the
        // program's stabs (included __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__,
        // and __STABSTR_END__) in a structure located at virtual address USTAB.
        const struct userstabdata *usd = (struct userstabdata *)USTAB;
c0100692:	c7 45 e4 00 00 20 00 	movl   $0x200000,-0x1c(%ebp)

        // make sure that debugger (current process) can access this memory
        struct mm_struct *mm;
        if (current == NULL || (mm = current->mm) == NULL) {
c0100699:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010069e:	85 c0                	test   %eax,%eax
c01006a0:	74 11                	je     c01006b3 <debuginfo_eip+0x8b>
c01006a2:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c01006a7:	8b 40 18             	mov    0x18(%eax),%eax
c01006aa:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01006ad:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01006b1:	75 0a                	jne    c01006bd <debuginfo_eip+0x95>
            return -1;
c01006b3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01006b8:	e9 4e 03 00 00       	jmp    c0100a0b <debuginfo_eip+0x3e3>
        }
        if (!user_mem_check(mm, (uintptr_t)usd, sizeof(struct userstabdata), 0)) {
c01006bd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01006c0:	6a 00                	push   $0x0
c01006c2:	6a 10                	push   $0x10
c01006c4:	50                   	push   %eax
c01006c5:	ff 75 e0             	pushl  -0x20(%ebp)
c01006c8:	e8 b7 3e 00 00       	call   c0104584 <user_mem_check>
c01006cd:	83 c4 10             	add    $0x10,%esp
c01006d0:	85 c0                	test   %eax,%eax
c01006d2:	75 0a                	jne    c01006de <debuginfo_eip+0xb6>
            return -1;
c01006d4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01006d9:	e9 2d 03 00 00       	jmp    c0100a0b <debuginfo_eip+0x3e3>
        }

        stabs = usd->stabs;
c01006de:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01006e1:	8b 00                	mov    (%eax),%eax
c01006e3:	89 45 f4             	mov    %eax,-0xc(%ebp)
        stab_end = usd->stab_end;
c01006e6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01006e9:	8b 40 04             	mov    0x4(%eax),%eax
c01006ec:	89 45 f0             	mov    %eax,-0x10(%ebp)
        stabstr = usd->stabstr;
c01006ef:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01006f2:	8b 40 08             	mov    0x8(%eax),%eax
c01006f5:	89 45 ec             	mov    %eax,-0x14(%ebp)
        stabstr_end = usd->stabstr_end;
c01006f8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01006fb:	8b 40 0c             	mov    0xc(%eax),%eax
c01006fe:	89 45 e8             	mov    %eax,-0x18(%ebp)

        // make sure the STABS and string table memory is valid
        if (!user_mem_check(mm, (uintptr_t)stabs, (uintptr_t)stab_end - (uintptr_t)stabs, 0)) {
c0100701:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100704:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100707:	29 c2                	sub    %eax,%edx
c0100709:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010070c:	6a 00                	push   $0x0
c010070e:	52                   	push   %edx
c010070f:	50                   	push   %eax
c0100710:	ff 75 e0             	pushl  -0x20(%ebp)
c0100713:	e8 6c 3e 00 00       	call   c0104584 <user_mem_check>
c0100718:	83 c4 10             	add    $0x10,%esp
c010071b:	85 c0                	test   %eax,%eax
c010071d:	75 0a                	jne    c0100729 <debuginfo_eip+0x101>
            return -1;
c010071f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100724:	e9 e2 02 00 00       	jmp    c0100a0b <debuginfo_eip+0x3e3>
        }
        if (!user_mem_check(mm, (uintptr_t)stabstr, stabstr_end - stabstr, 0)) {
c0100729:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010072c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010072f:	29 c2                	sub    %eax,%edx
c0100731:	89 d0                	mov    %edx,%eax
c0100733:	89 c2                	mov    %eax,%edx
c0100735:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100738:	6a 00                	push   $0x0
c010073a:	52                   	push   %edx
c010073b:	50                   	push   %eax
c010073c:	ff 75 e0             	pushl  -0x20(%ebp)
c010073f:	e8 40 3e 00 00       	call   c0104584 <user_mem_check>
c0100744:	83 c4 10             	add    $0x10,%esp
c0100747:	85 c0                	test   %eax,%eax
c0100749:	75 0a                	jne    c0100755 <debuginfo_eip+0x12d>
            return -1;
c010074b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100750:	e9 b6 02 00 00       	jmp    c0100a0b <debuginfo_eip+0x3e3>
        }
    }

    // String table validity checks
    if (stabstr_end <= stabstr || stabstr_end[-1] != 0) {
c0100755:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100758:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010075b:	76 0d                	jbe    c010076a <debuginfo_eip+0x142>
c010075d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100760:	83 e8 01             	sub    $0x1,%eax
c0100763:	0f b6 00             	movzbl (%eax),%eax
c0100766:	84 c0                	test   %al,%al
c0100768:	74 0a                	je     c0100774 <debuginfo_eip+0x14c>
        return -1;
c010076a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010076f:	e9 97 02 00 00       	jmp    c0100a0b <debuginfo_eip+0x3e3>
    // 'eip'.  First, we find the basic source file containing 'eip'.
    // Then, we look in that source file for the function.  Then we look
    // for the line number.

    // Search the entire set of stabs for the source file (type N_SO).
    int lfile = 0, rfile = (stab_end - stabs) - 1;
c0100774:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c010077b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010077e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100781:	29 c2                	sub    %eax,%edx
c0100783:	89 d0                	mov    %edx,%eax
c0100785:	c1 f8 02             	sar    $0x2,%eax
c0100788:	69 c0 ab aa aa aa    	imul   $0xaaaaaaab,%eax,%eax
c010078e:	83 e8 01             	sub    $0x1,%eax
c0100791:	89 45 d8             	mov    %eax,-0x28(%ebp)
    stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
c0100794:	83 ec 0c             	sub    $0xc,%esp
c0100797:	ff 75 08             	pushl  0x8(%ebp)
c010079a:	6a 64                	push   $0x64
c010079c:	8d 45 d8             	lea    -0x28(%ebp),%eax
c010079f:	50                   	push   %eax
c01007a0:	8d 45 dc             	lea    -0x24(%ebp),%eax
c01007a3:	50                   	push   %eax
c01007a4:	ff 75 f4             	pushl  -0xc(%ebp)
c01007a7:	e8 25 fd ff ff       	call   c01004d1 <stab_binsearch>
c01007ac:	83 c4 20             	add    $0x20,%esp
    if (lfile == 0)
c01007af:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01007b2:	85 c0                	test   %eax,%eax
c01007b4:	75 0a                	jne    c01007c0 <debuginfo_eip+0x198>
        return -1;
c01007b6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01007bb:	e9 4b 02 00 00       	jmp    c0100a0b <debuginfo_eip+0x3e3>

    // Search within that file's stabs for the function definition
    // (N_FUN).
    int lfun = lfile, rfun = rfile;
c01007c0:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01007c3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c01007c6:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01007c9:	89 45 d0             	mov    %eax,-0x30(%ebp)
    int lline, rline;
    stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
c01007cc:	83 ec 0c             	sub    $0xc,%esp
c01007cf:	ff 75 08             	pushl  0x8(%ebp)
c01007d2:	6a 24                	push   $0x24
c01007d4:	8d 45 d0             	lea    -0x30(%ebp),%eax
c01007d7:	50                   	push   %eax
c01007d8:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c01007db:	50                   	push   %eax
c01007dc:	ff 75 f4             	pushl  -0xc(%ebp)
c01007df:	e8 ed fc ff ff       	call   c01004d1 <stab_binsearch>
c01007e4:	83 c4 20             	add    $0x20,%esp

    if (lfun <= rfun) {
c01007e7:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01007ea:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01007ed:	39 c2                	cmp    %eax,%edx
c01007ef:	7f 7c                	jg     c010086d <debuginfo_eip+0x245>
        // stabs[lfun] points to the function name
        // in the string table, but check bounds just in case.
        if (stabs[lfun].n_strx < stabstr_end - stabstr) {
c01007f1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01007f4:	89 c2                	mov    %eax,%edx
c01007f6:	89 d0                	mov    %edx,%eax
c01007f8:	01 c0                	add    %eax,%eax
c01007fa:	01 d0                	add    %edx,%eax
c01007fc:	c1 e0 02             	shl    $0x2,%eax
c01007ff:	89 c2                	mov    %eax,%edx
c0100801:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100804:	01 d0                	add    %edx,%eax
c0100806:	8b 00                	mov    (%eax),%eax
c0100808:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c010080b:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010080e:	29 d1                	sub    %edx,%ecx
c0100810:	89 ca                	mov    %ecx,%edx
c0100812:	39 d0                	cmp    %edx,%eax
c0100814:	73 22                	jae    c0100838 <debuginfo_eip+0x210>
            info->eip_fn_name = stabstr + stabs[lfun].n_strx;
c0100816:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100819:	89 c2                	mov    %eax,%edx
c010081b:	89 d0                	mov    %edx,%eax
c010081d:	01 c0                	add    %eax,%eax
c010081f:	01 d0                	add    %edx,%eax
c0100821:	c1 e0 02             	shl    $0x2,%eax
c0100824:	89 c2                	mov    %eax,%edx
c0100826:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100829:	01 d0                	add    %edx,%eax
c010082b:	8b 10                	mov    (%eax),%edx
c010082d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100830:	01 c2                	add    %eax,%edx
c0100832:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100835:	89 50 08             	mov    %edx,0x8(%eax)
        }
        info->eip_fn_addr = stabs[lfun].n_value;
c0100838:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010083b:	89 c2                	mov    %eax,%edx
c010083d:	89 d0                	mov    %edx,%eax
c010083f:	01 c0                	add    %eax,%eax
c0100841:	01 d0                	add    %edx,%eax
c0100843:	c1 e0 02             	shl    $0x2,%eax
c0100846:	89 c2                	mov    %eax,%edx
c0100848:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010084b:	01 d0                	add    %edx,%eax
c010084d:	8b 50 08             	mov    0x8(%eax),%edx
c0100850:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100853:	89 50 10             	mov    %edx,0x10(%eax)
        addr -= info->eip_fn_addr;
c0100856:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100859:	8b 40 10             	mov    0x10(%eax),%eax
c010085c:	29 45 08             	sub    %eax,0x8(%ebp)
        // Search within the function definition for the line number.
        lline = lfun;
c010085f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100862:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfun;
c0100865:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0100868:	89 45 c8             	mov    %eax,-0x38(%ebp)
c010086b:	eb 15                	jmp    c0100882 <debuginfo_eip+0x25a>
    } else {
        // Couldn't find function stab!  Maybe we're in an assembly
        // file.  Search the whole file for the line number.
        info->eip_fn_addr = addr;
c010086d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100870:	8b 55 08             	mov    0x8(%ebp),%edx
c0100873:	89 50 10             	mov    %edx,0x10(%eax)
        lline = lfile;
c0100876:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100879:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfile;
c010087c:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010087f:	89 45 c8             	mov    %eax,-0x38(%ebp)
    }
    info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
c0100882:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100885:	8b 40 08             	mov    0x8(%eax),%eax
c0100888:	83 ec 08             	sub    $0x8,%esp
c010088b:	6a 3a                	push   $0x3a
c010088d:	50                   	push   %eax
c010088e:	e8 de a6 00 00       	call   c010af71 <strfind>
c0100893:	83 c4 10             	add    $0x10,%esp
c0100896:	89 c2                	mov    %eax,%edx
c0100898:	8b 45 0c             	mov    0xc(%ebp),%eax
c010089b:	8b 40 08             	mov    0x8(%eax),%eax
c010089e:	29 c2                	sub    %eax,%edx
c01008a0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01008a3:	89 50 0c             	mov    %edx,0xc(%eax)

    // Search within [lline, rline] for the line number stab.
    // If found, set info->eip_line to the right line number.
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
c01008a6:	83 ec 0c             	sub    $0xc,%esp
c01008a9:	ff 75 08             	pushl  0x8(%ebp)
c01008ac:	6a 44                	push   $0x44
c01008ae:	8d 45 c8             	lea    -0x38(%ebp),%eax
c01008b1:	50                   	push   %eax
c01008b2:	8d 45 cc             	lea    -0x34(%ebp),%eax
c01008b5:	50                   	push   %eax
c01008b6:	ff 75 f4             	pushl  -0xc(%ebp)
c01008b9:	e8 13 fc ff ff       	call   c01004d1 <stab_binsearch>
c01008be:	83 c4 20             	add    $0x20,%esp
    if (lline <= rline) {
c01008c1:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01008c4:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01008c7:	39 c2                	cmp    %eax,%edx
c01008c9:	7f 24                	jg     c01008ef <debuginfo_eip+0x2c7>
        info->eip_line = stabs[rline].n_desc;
c01008cb:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01008ce:	89 c2                	mov    %eax,%edx
c01008d0:	89 d0                	mov    %edx,%eax
c01008d2:	01 c0                	add    %eax,%eax
c01008d4:	01 d0                	add    %edx,%eax
c01008d6:	c1 e0 02             	shl    $0x2,%eax
c01008d9:	89 c2                	mov    %eax,%edx
c01008db:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01008de:	01 d0                	add    %edx,%eax
c01008e0:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c01008e4:	0f b7 d0             	movzwl %ax,%edx
c01008e7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01008ea:	89 50 04             	mov    %edx,0x4(%eax)

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c01008ed:	eb 13                	jmp    c0100902 <debuginfo_eip+0x2da>
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
    if (lline <= rline) {
        info->eip_line = stabs[rline].n_desc;
    } else {
        return -1;
c01008ef:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01008f4:	e9 12 01 00 00       	jmp    c0100a0b <debuginfo_eip+0x3e3>
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
           && stabs[lline].n_type != N_SOL
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
        lline --;
c01008f9:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01008fc:	83 e8 01             	sub    $0x1,%eax
c01008ff:	89 45 cc             	mov    %eax,-0x34(%ebp)

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c0100902:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0100905:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100908:	39 c2                	cmp    %eax,%edx
c010090a:	7c 56                	jl     c0100962 <debuginfo_eip+0x33a>
           && stabs[lline].n_type != N_SOL
c010090c:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010090f:	89 c2                	mov    %eax,%edx
c0100911:	89 d0                	mov    %edx,%eax
c0100913:	01 c0                	add    %eax,%eax
c0100915:	01 d0                	add    %edx,%eax
c0100917:	c1 e0 02             	shl    $0x2,%eax
c010091a:	89 c2                	mov    %eax,%edx
c010091c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010091f:	01 d0                	add    %edx,%eax
c0100921:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100925:	3c 84                	cmp    $0x84,%al
c0100927:	74 39                	je     c0100962 <debuginfo_eip+0x33a>
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
c0100929:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010092c:	89 c2                	mov    %eax,%edx
c010092e:	89 d0                	mov    %edx,%eax
c0100930:	01 c0                	add    %eax,%eax
c0100932:	01 d0                	add    %edx,%eax
c0100934:	c1 e0 02             	shl    $0x2,%eax
c0100937:	89 c2                	mov    %eax,%edx
c0100939:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010093c:	01 d0                	add    %edx,%eax
c010093e:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100942:	3c 64                	cmp    $0x64,%al
c0100944:	75 b3                	jne    c01008f9 <debuginfo_eip+0x2d1>
c0100946:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100949:	89 c2                	mov    %eax,%edx
c010094b:	89 d0                	mov    %edx,%eax
c010094d:	01 c0                	add    %eax,%eax
c010094f:	01 d0                	add    %edx,%eax
c0100951:	c1 e0 02             	shl    $0x2,%eax
c0100954:	89 c2                	mov    %eax,%edx
c0100956:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100959:	01 d0                	add    %edx,%eax
c010095b:	8b 40 08             	mov    0x8(%eax),%eax
c010095e:	85 c0                	test   %eax,%eax
c0100960:	74 97                	je     c01008f9 <debuginfo_eip+0x2d1>
        lline --;
    }
    if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr) {
c0100962:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0100965:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100968:	39 c2                	cmp    %eax,%edx
c010096a:	7c 46                	jl     c01009b2 <debuginfo_eip+0x38a>
c010096c:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010096f:	89 c2                	mov    %eax,%edx
c0100971:	89 d0                	mov    %edx,%eax
c0100973:	01 c0                	add    %eax,%eax
c0100975:	01 d0                	add    %edx,%eax
c0100977:	c1 e0 02             	shl    $0x2,%eax
c010097a:	89 c2                	mov    %eax,%edx
c010097c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010097f:	01 d0                	add    %edx,%eax
c0100981:	8b 00                	mov    (%eax),%eax
c0100983:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c0100986:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0100989:	29 d1                	sub    %edx,%ecx
c010098b:	89 ca                	mov    %ecx,%edx
c010098d:	39 d0                	cmp    %edx,%eax
c010098f:	73 21                	jae    c01009b2 <debuginfo_eip+0x38a>
        info->eip_file = stabstr + stabs[lline].n_strx;
c0100991:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100994:	89 c2                	mov    %eax,%edx
c0100996:	89 d0                	mov    %edx,%eax
c0100998:	01 c0                	add    %eax,%eax
c010099a:	01 d0                	add    %edx,%eax
c010099c:	c1 e0 02             	shl    $0x2,%eax
c010099f:	89 c2                	mov    %eax,%edx
c01009a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01009a4:	01 d0                	add    %edx,%eax
c01009a6:	8b 10                	mov    (%eax),%edx
c01009a8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01009ab:	01 c2                	add    %eax,%edx
c01009ad:	8b 45 0c             	mov    0xc(%ebp),%eax
c01009b0:	89 10                	mov    %edx,(%eax)
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
c01009b2:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01009b5:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01009b8:	39 c2                	cmp    %eax,%edx
c01009ba:	7d 4a                	jge    c0100a06 <debuginfo_eip+0x3de>
        for (lline = lfun + 1;
c01009bc:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01009bf:	83 c0 01             	add    $0x1,%eax
c01009c2:	89 45 cc             	mov    %eax,-0x34(%ebp)
c01009c5:	eb 18                	jmp    c01009df <debuginfo_eip+0x3b7>
             lline < rfun && stabs[lline].n_type == N_PSYM;
             lline ++) {
            info->eip_fn_narg ++;
c01009c7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01009ca:	8b 40 14             	mov    0x14(%eax),%eax
c01009cd:	8d 50 01             	lea    0x1(%eax),%edx
c01009d0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01009d3:	89 50 14             	mov    %edx,0x14(%eax)
    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
             lline < rfun && stabs[lline].n_type == N_PSYM;
             lline ++) {
c01009d6:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01009d9:	83 c0 01             	add    $0x1,%eax
c01009dc:	89 45 cc             	mov    %eax,-0x34(%ebp)

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
             lline < rfun && stabs[lline].n_type == N_PSYM;
c01009df:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01009e2:	8b 45 d0             	mov    -0x30(%ebp),%eax
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
c01009e5:	39 c2                	cmp    %eax,%edx
c01009e7:	7d 1d                	jge    c0100a06 <debuginfo_eip+0x3de>
             lline < rfun && stabs[lline].n_type == N_PSYM;
c01009e9:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01009ec:	89 c2                	mov    %eax,%edx
c01009ee:	89 d0                	mov    %edx,%eax
c01009f0:	01 c0                	add    %eax,%eax
c01009f2:	01 d0                	add    %edx,%eax
c01009f4:	c1 e0 02             	shl    $0x2,%eax
c01009f7:	89 c2                	mov    %eax,%edx
c01009f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01009fc:	01 d0                	add    %edx,%eax
c01009fe:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100a02:	3c a0                	cmp    $0xa0,%al
c0100a04:	74 c1                	je     c01009c7 <debuginfo_eip+0x39f>
             lline ++) {
            info->eip_fn_narg ++;
        }
    }
    return 0;
c0100a06:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100a0b:	c9                   	leave  
c0100a0c:	c3                   	ret    

c0100a0d <print_kerninfo>:
 * print_kerninfo - print the information about kernel, including the location
 * of kernel entry, the start addresses of data and text segements, the start
 * address of free memory and how many memory that kernel has used.
 * */
void
print_kerninfo(void) {
c0100a0d:	55                   	push   %ebp
c0100a0e:	89 e5                	mov    %esp,%ebp
c0100a10:	83 ec 08             	sub    $0x8,%esp
    extern char etext[], edata[], end[], kern_init[];
    cprintf("Special kernel symbols:\n");
c0100a13:	83 ec 0c             	sub    $0xc,%esp
c0100a16:	68 a2 ba 10 c0       	push   $0xc010baa2
c0100a1b:	e8 77 f8 ff ff       	call   c0100297 <cprintf>
c0100a20:	83 c4 10             	add    $0x10,%esp
    cprintf("  entry  0x%08x (phys)\n", kern_init);
c0100a23:	83 ec 08             	sub    $0x8,%esp
c0100a26:	68 36 00 10 c0       	push   $0xc0100036
c0100a2b:	68 bb ba 10 c0       	push   $0xc010babb
c0100a30:	e8 62 f8 ff ff       	call   c0100297 <cprintf>
c0100a35:	83 c4 10             	add    $0x10,%esp
    cprintf("  etext  0x%08x (phys)\n", etext);
c0100a38:	83 ec 08             	sub    $0x8,%esp
c0100a3b:	68 91 b9 10 c0       	push   $0xc010b991
c0100a40:	68 d3 ba 10 c0       	push   $0xc010bad3
c0100a45:	e8 4d f8 ff ff       	call   c0100297 <cprintf>
c0100a4a:	83 c4 10             	add    $0x10,%esp
    cprintf("  edata  0x%08x (phys)\n", edata);
c0100a4d:	83 ec 08             	sub    $0x8,%esp
c0100a50:	68 00 00 1b c0       	push   $0xc01b0000
c0100a55:	68 eb ba 10 c0       	push   $0xc010baeb
c0100a5a:	e8 38 f8 ff ff       	call   c0100297 <cprintf>
c0100a5f:	83 c4 10             	add    $0x10,%esp
    cprintf("  end    0x%08x (phys)\n", end);
c0100a62:	83 ec 08             	sub    $0x8,%esp
c0100a65:	68 c4 31 1b c0       	push   $0xc01b31c4
c0100a6a:	68 03 bb 10 c0       	push   $0xc010bb03
c0100a6f:	e8 23 f8 ff ff       	call   c0100297 <cprintf>
c0100a74:	83 c4 10             	add    $0x10,%esp
    cprintf("Kernel executable memory footprint: %dKB\n", (end - kern_init + 1023)/1024);
c0100a77:	b8 c4 31 1b c0       	mov    $0xc01b31c4,%eax
c0100a7c:	05 ff 03 00 00       	add    $0x3ff,%eax
c0100a81:	ba 36 00 10 c0       	mov    $0xc0100036,%edx
c0100a86:	29 d0                	sub    %edx,%eax
c0100a88:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
c0100a8e:	85 c0                	test   %eax,%eax
c0100a90:	0f 48 c2             	cmovs  %edx,%eax
c0100a93:	c1 f8 0a             	sar    $0xa,%eax
c0100a96:	83 ec 08             	sub    $0x8,%esp
c0100a99:	50                   	push   %eax
c0100a9a:	68 1c bb 10 c0       	push   $0xc010bb1c
c0100a9f:	e8 f3 f7 ff ff       	call   c0100297 <cprintf>
c0100aa4:	83 c4 10             	add    $0x10,%esp
}
c0100aa7:	90                   	nop
c0100aa8:	c9                   	leave  
c0100aa9:	c3                   	ret    

c0100aaa <print_debuginfo>:
/* *
 * print_debuginfo - read and print the stat information for the address @eip,
 * and info.eip_fn_addr should be the first address of the related function.
 * */
void
print_debuginfo(uintptr_t eip) {
c0100aaa:	55                   	push   %ebp
c0100aab:	89 e5                	mov    %esp,%ebp
c0100aad:	81 ec 28 01 00 00    	sub    $0x128,%esp
    struct eipdebuginfo info;
    if (debuginfo_eip(eip, &info) != 0) {
c0100ab3:	83 ec 08             	sub    $0x8,%esp
c0100ab6:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0100ab9:	50                   	push   %eax
c0100aba:	ff 75 08             	pushl  0x8(%ebp)
c0100abd:	e8 66 fb ff ff       	call   c0100628 <debuginfo_eip>
c0100ac2:	83 c4 10             	add    $0x10,%esp
c0100ac5:	85 c0                	test   %eax,%eax
c0100ac7:	74 15                	je     c0100ade <print_debuginfo+0x34>
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
c0100ac9:	83 ec 08             	sub    $0x8,%esp
c0100acc:	ff 75 08             	pushl  0x8(%ebp)
c0100acf:	68 46 bb 10 c0       	push   $0xc010bb46
c0100ad4:	e8 be f7 ff ff       	call   c0100297 <cprintf>
c0100ad9:	83 c4 10             	add    $0x10,%esp
        }
        fnname[j] = '\0';
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
                fnname, eip - info.eip_fn_addr);
    }
}
c0100adc:	eb 65                	jmp    c0100b43 <print_debuginfo+0x99>
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
    }
    else {
        char fnname[256];
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0100ade:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100ae5:	eb 1c                	jmp    c0100b03 <print_debuginfo+0x59>
            fnname[j] = info.eip_fn_name[j];
c0100ae7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0100aea:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100aed:	01 d0                	add    %edx,%eax
c0100aef:	0f b6 00             	movzbl (%eax),%eax
c0100af2:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
c0100af8:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100afb:	01 ca                	add    %ecx,%edx
c0100afd:	88 02                	mov    %al,(%edx)
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
    }
    else {
        char fnname[256];
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0100aff:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100b03:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100b06:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0100b09:	7f dc                	jg     c0100ae7 <print_debuginfo+0x3d>
            fnname[j] = info.eip_fn_name[j];
        }
        fnname[j] = '\0';
c0100b0b:	8d 95 dc fe ff ff    	lea    -0x124(%ebp),%edx
c0100b11:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b14:	01 d0                	add    %edx,%eax
c0100b16:	c6 00 00             	movb   $0x0,(%eax)
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
                fnname, eip - info.eip_fn_addr);
c0100b19:	8b 45 ec             	mov    -0x14(%ebp),%eax
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
            fnname[j] = info.eip_fn_name[j];
        }
        fnname[j] = '\0';
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
c0100b1c:	8b 55 08             	mov    0x8(%ebp),%edx
c0100b1f:	89 d1                	mov    %edx,%ecx
c0100b21:	29 c1                	sub    %eax,%ecx
c0100b23:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0100b26:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100b29:	83 ec 0c             	sub    $0xc,%esp
c0100b2c:	51                   	push   %ecx
c0100b2d:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
c0100b33:	51                   	push   %ecx
c0100b34:	52                   	push   %edx
c0100b35:	50                   	push   %eax
c0100b36:	68 62 bb 10 c0       	push   $0xc010bb62
c0100b3b:	e8 57 f7 ff ff       	call   c0100297 <cprintf>
c0100b40:	83 c4 20             	add    $0x20,%esp
                fnname, eip - info.eip_fn_addr);
    }
}
c0100b43:	90                   	nop
c0100b44:	c9                   	leave  
c0100b45:	c3                   	ret    

c0100b46 <read_eip>:

static __noinline uint32_t
read_eip(void) {
c0100b46:	55                   	push   %ebp
c0100b47:	89 e5                	mov    %esp,%ebp
c0100b49:	83 ec 10             	sub    $0x10,%esp
    uint32_t eip;
    asm volatile("movl 4(%%ebp), %0" : "=r" (eip));
c0100b4c:	8b 45 04             	mov    0x4(%ebp),%eax
c0100b4f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eip;
c0100b52:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0100b55:	c9                   	leave  
c0100b56:	c3                   	ret    

c0100b57 <print_stackframe>:
 *
 * Note that, the length of ebp-chain is limited. In boot/bootasm.S, before jumping
 * to the kernel entry, the value of ebp has been set to zero, that's the boundary.
 * */
void
print_stackframe(void) {
c0100b57:	55                   	push   %ebp
c0100b58:	89 e5                	mov    %esp,%ebp
c0100b5a:	53                   	push   %ebx
c0100b5b:	83 ec 34             	sub    $0x34,%esp
}

static inline uint32_t
read_ebp(void) {
    uint32_t ebp;
    asm volatile ("movl %%ebp, %0" : "=r" (ebp));
c0100b5e:	89 e8                	mov    %ebp,%eax
c0100b60:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return ebp;
c0100b63:	8b 45 e4             	mov    -0x1c(%ebp),%eax
      *    (3.5) popup a calling stackframe
      *           NOTICE: the calling funciton's return addr eip  = ss:[ebp+4]
      *                   the calling funciton's ebp = ss:[ebp]
      */
    // 1. read_ebp
    uint32_t stack_val_ebp = read_ebp();
c0100b66:	89 45 f4             	mov    %eax,-0xc(%ebp)
    // 2. read_eip
    uint32_t stack_val_eip = read_eip();
c0100b69:	e8 d8 ff ff ff       	call   c0100b46 <read_eip>
c0100b6e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    // 3. iterate stacks
    uint32_t stack_val_args[4];
    for (int i = 0; i < STACKFRAME_DEPTH; i++) {
c0100b71:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0100b78:	e9 93 00 00 00       	jmp    c0100c10 <print_stackframe+0xb9>
        cprintf("ebp:0x%08x eip:0x%08x ", stack_val_ebp, stack_val_eip);
c0100b7d:	83 ec 04             	sub    $0x4,%esp
c0100b80:	ff 75 f0             	pushl  -0x10(%ebp)
c0100b83:	ff 75 f4             	pushl  -0xc(%ebp)
c0100b86:	68 74 bb 10 c0       	push   $0xc010bb74
c0100b8b:	e8 07 f7 ff ff       	call   c0100297 <cprintf>
c0100b90:	83 c4 10             	add    $0x10,%esp
        // get args
        for (int j = 0; j < 4; j++) {
c0100b93:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c0100b9a:	eb 1f                	jmp    c0100bbb <print_stackframe+0x64>
            stack_val_args[j] = *(((uint32_t*) stack_val_ebp) + 2 + j);
c0100b9c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100b9f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0100ba6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100ba9:	01 d0                	add    %edx,%eax
c0100bab:	83 c0 08             	add    $0x8,%eax
c0100bae:	8b 10                	mov    (%eax),%edx
c0100bb0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100bb3:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
    // 3. iterate stacks
    uint32_t stack_val_args[4];
    for (int i = 0; i < STACKFRAME_DEPTH; i++) {
        cprintf("ebp:0x%08x eip:0x%08x ", stack_val_ebp, stack_val_eip);
        // get args
        for (int j = 0; j < 4; j++) {
c0100bb7:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
c0100bbb:	83 7d e8 03          	cmpl   $0x3,-0x18(%ebp)
c0100bbf:	7e db                	jle    c0100b9c <print_stackframe+0x45>
            stack_val_args[j] = *(((uint32_t*) stack_val_ebp) + 2 + j);
        }
        cprintf("args:0x%08x 0x%08x 0x%08x 0x%08x\n", stack_val_args[0], 
c0100bc1:	8b 5d e0             	mov    -0x20(%ebp),%ebx
c0100bc4:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0100bc7:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0100bca:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100bcd:	83 ec 0c             	sub    $0xc,%esp
c0100bd0:	53                   	push   %ebx
c0100bd1:	51                   	push   %ecx
c0100bd2:	52                   	push   %edx
c0100bd3:	50                   	push   %eax
c0100bd4:	68 8c bb 10 c0       	push   $0xc010bb8c
c0100bd9:	e8 b9 f6 ff ff       	call   c0100297 <cprintf>
c0100bde:	83 c4 20             	add    $0x20,%esp
                stack_val_args[1], stack_val_args[2], stack_val_args[3]);
        // print function info
        print_debuginfo(stack_val_eip - 1);
c0100be1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100be4:	83 e8 01             	sub    $0x1,%eax
c0100be7:	83 ec 0c             	sub    $0xc,%esp
c0100bea:	50                   	push   %eax
c0100beb:	e8 ba fe ff ff       	call   c0100aaa <print_debuginfo>
c0100bf0:	83 c4 10             	add    $0x10,%esp
        // pop up stackframe, refresh ebp & eip
        stack_val_eip = *(((uint32_t*) stack_val_ebp) + 1);
c0100bf3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100bf6:	83 c0 04             	add    $0x4,%eax
c0100bf9:	8b 00                	mov    (%eax),%eax
c0100bfb:	89 45 f0             	mov    %eax,-0x10(%ebp)
        stack_val_ebp = *(((uint32_t*) stack_val_ebp));
c0100bfe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100c01:	8b 00                	mov    (%eax),%eax
c0100c03:	89 45 f4             	mov    %eax,-0xc(%ebp)
        // ebp should be valid
        if (stack_val_ebp <= 0) {
c0100c06:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100c0a:	74 10                	je     c0100c1c <print_stackframe+0xc5>
    uint32_t stack_val_ebp = read_ebp();
    // 2. read_eip
    uint32_t stack_val_eip = read_eip();
    // 3. iterate stacks
    uint32_t stack_val_args[4];
    for (int i = 0; i < STACKFRAME_DEPTH; i++) {
c0100c0c:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0100c10:	83 7d ec 13          	cmpl   $0x13,-0x14(%ebp)
c0100c14:	0f 8e 63 ff ff ff    	jle    c0100b7d <print_stackframe+0x26>
        // ebp should be valid
        if (stack_val_ebp <= 0) {
            break;
        }
    }
}
c0100c1a:	eb 01                	jmp    c0100c1d <print_stackframe+0xc6>
        // pop up stackframe, refresh ebp & eip
        stack_val_eip = *(((uint32_t*) stack_val_ebp) + 1);
        stack_val_ebp = *(((uint32_t*) stack_val_ebp));
        // ebp should be valid
        if (stack_val_ebp <= 0) {
            break;
c0100c1c:	90                   	nop
        }
    }
}
c0100c1d:	90                   	nop
c0100c1e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0100c21:	c9                   	leave  
c0100c22:	c3                   	ret    

c0100c23 <parse>:
#define MAXARGS         16
#define WHITESPACE      " \t\n\r"

/* parse - parse the command buffer into whitespace-separated arguments */
static int
parse(char *buf, char **argv) {
c0100c23:	55                   	push   %ebp
c0100c24:	89 e5                	mov    %esp,%ebp
c0100c26:	83 ec 18             	sub    $0x18,%esp
    int argc = 0;
c0100c29:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100c30:	eb 0c                	jmp    c0100c3e <parse+0x1b>
            *buf ++ = '\0';
c0100c32:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c35:	8d 50 01             	lea    0x1(%eax),%edx
c0100c38:	89 55 08             	mov    %edx,0x8(%ebp)
c0100c3b:	c6 00 00             	movb   $0x0,(%eax)
static int
parse(char *buf, char **argv) {
    int argc = 0;
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100c3e:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c41:	0f b6 00             	movzbl (%eax),%eax
c0100c44:	84 c0                	test   %al,%al
c0100c46:	74 1e                	je     c0100c66 <parse+0x43>
c0100c48:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c4b:	0f b6 00             	movzbl (%eax),%eax
c0100c4e:	0f be c0             	movsbl %al,%eax
c0100c51:	83 ec 08             	sub    $0x8,%esp
c0100c54:	50                   	push   %eax
c0100c55:	68 30 bc 10 c0       	push   $0xc010bc30
c0100c5a:	e8 df a2 00 00       	call   c010af3e <strchr>
c0100c5f:	83 c4 10             	add    $0x10,%esp
c0100c62:	85 c0                	test   %eax,%eax
c0100c64:	75 cc                	jne    c0100c32 <parse+0xf>
            *buf ++ = '\0';
        }
        if (*buf == '\0') {
c0100c66:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c69:	0f b6 00             	movzbl (%eax),%eax
c0100c6c:	84 c0                	test   %al,%al
c0100c6e:	74 69                	je     c0100cd9 <parse+0xb6>
            break;
        }

        // save and scan past next arg
        if (argc == MAXARGS - 1) {
c0100c70:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
c0100c74:	75 12                	jne    c0100c88 <parse+0x65>
            cprintf("Too many arguments (max %d).\n", MAXARGS);
c0100c76:	83 ec 08             	sub    $0x8,%esp
c0100c79:	6a 10                	push   $0x10
c0100c7b:	68 35 bc 10 c0       	push   $0xc010bc35
c0100c80:	e8 12 f6 ff ff       	call   c0100297 <cprintf>
c0100c85:	83 c4 10             	add    $0x10,%esp
        }
        argv[argc ++] = buf;
c0100c88:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100c8b:	8d 50 01             	lea    0x1(%eax),%edx
c0100c8e:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0100c91:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0100c98:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100c9b:	01 c2                	add    %eax,%edx
c0100c9d:	8b 45 08             	mov    0x8(%ebp),%eax
c0100ca0:	89 02                	mov    %eax,(%edx)
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c0100ca2:	eb 04                	jmp    c0100ca8 <parse+0x85>
            buf ++;
c0100ca4:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        // save and scan past next arg
        if (argc == MAXARGS - 1) {
            cprintf("Too many arguments (max %d).\n", MAXARGS);
        }
        argv[argc ++] = buf;
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c0100ca8:	8b 45 08             	mov    0x8(%ebp),%eax
c0100cab:	0f b6 00             	movzbl (%eax),%eax
c0100cae:	84 c0                	test   %al,%al
c0100cb0:	0f 84 7a ff ff ff    	je     c0100c30 <parse+0xd>
c0100cb6:	8b 45 08             	mov    0x8(%ebp),%eax
c0100cb9:	0f b6 00             	movzbl (%eax),%eax
c0100cbc:	0f be c0             	movsbl %al,%eax
c0100cbf:	83 ec 08             	sub    $0x8,%esp
c0100cc2:	50                   	push   %eax
c0100cc3:	68 30 bc 10 c0       	push   $0xc010bc30
c0100cc8:	e8 71 a2 00 00       	call   c010af3e <strchr>
c0100ccd:	83 c4 10             	add    $0x10,%esp
c0100cd0:	85 c0                	test   %eax,%eax
c0100cd2:	74 d0                	je     c0100ca4 <parse+0x81>
            buf ++;
        }
    }
c0100cd4:	e9 57 ff ff ff       	jmp    c0100c30 <parse+0xd>
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
            *buf ++ = '\0';
        }
        if (*buf == '\0') {
            break;
c0100cd9:	90                   	nop
        argv[argc ++] = buf;
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
            buf ++;
        }
    }
    return argc;
c0100cda:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100cdd:	c9                   	leave  
c0100cde:	c3                   	ret    

c0100cdf <runcmd>:
/* *
 * runcmd - parse the input string, split it into separated arguments
 * and then lookup and invoke some related commands/
 * */
static int
runcmd(char *buf, struct trapframe *tf) {
c0100cdf:	55                   	push   %ebp
c0100ce0:	89 e5                	mov    %esp,%ebp
c0100ce2:	83 ec 58             	sub    $0x58,%esp
    char *argv[MAXARGS];
    int argc = parse(buf, argv);
c0100ce5:	83 ec 08             	sub    $0x8,%esp
c0100ce8:	8d 45 b0             	lea    -0x50(%ebp),%eax
c0100ceb:	50                   	push   %eax
c0100cec:	ff 75 08             	pushl  0x8(%ebp)
c0100cef:	e8 2f ff ff ff       	call   c0100c23 <parse>
c0100cf4:	83 c4 10             	add    $0x10,%esp
c0100cf7:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (argc == 0) {
c0100cfa:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0100cfe:	75 0a                	jne    c0100d0a <runcmd+0x2b>
        return 0;
c0100d00:	b8 00 00 00 00       	mov    $0x0,%eax
c0100d05:	e9 83 00 00 00       	jmp    c0100d8d <runcmd+0xae>
    }
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100d0a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100d11:	eb 59                	jmp    c0100d6c <runcmd+0x8d>
        if (strcmp(commands[i].name, argv[0]) == 0) {
c0100d13:	8b 4d b0             	mov    -0x50(%ebp),%ecx
c0100d16:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100d19:	89 d0                	mov    %edx,%eax
c0100d1b:	01 c0                	add    %eax,%eax
c0100d1d:	01 d0                	add    %edx,%eax
c0100d1f:	c1 e0 02             	shl    $0x2,%eax
c0100d22:	05 00 c0 12 c0       	add    $0xc012c000,%eax
c0100d27:	8b 00                	mov    (%eax),%eax
c0100d29:	83 ec 08             	sub    $0x8,%esp
c0100d2c:	51                   	push   %ecx
c0100d2d:	50                   	push   %eax
c0100d2e:	e8 6b a1 00 00       	call   c010ae9e <strcmp>
c0100d33:	83 c4 10             	add    $0x10,%esp
c0100d36:	85 c0                	test   %eax,%eax
c0100d38:	75 2e                	jne    c0100d68 <runcmd+0x89>
            return commands[i].func(argc - 1, argv + 1, tf);
c0100d3a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100d3d:	89 d0                	mov    %edx,%eax
c0100d3f:	01 c0                	add    %eax,%eax
c0100d41:	01 d0                	add    %edx,%eax
c0100d43:	c1 e0 02             	shl    $0x2,%eax
c0100d46:	05 08 c0 12 c0       	add    $0xc012c008,%eax
c0100d4b:	8b 10                	mov    (%eax),%edx
c0100d4d:	8d 45 b0             	lea    -0x50(%ebp),%eax
c0100d50:	83 c0 04             	add    $0x4,%eax
c0100d53:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c0100d56:	83 e9 01             	sub    $0x1,%ecx
c0100d59:	83 ec 04             	sub    $0x4,%esp
c0100d5c:	ff 75 0c             	pushl  0xc(%ebp)
c0100d5f:	50                   	push   %eax
c0100d60:	51                   	push   %ecx
c0100d61:	ff d2                	call   *%edx
c0100d63:	83 c4 10             	add    $0x10,%esp
c0100d66:	eb 25                	jmp    c0100d8d <runcmd+0xae>
    int argc = parse(buf, argv);
    if (argc == 0) {
        return 0;
    }
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100d68:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100d6c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100d6f:	83 f8 02             	cmp    $0x2,%eax
c0100d72:	76 9f                	jbe    c0100d13 <runcmd+0x34>
        if (strcmp(commands[i].name, argv[0]) == 0) {
            return commands[i].func(argc - 1, argv + 1, tf);
        }
    }
    cprintf("Unknown command '%s'\n", argv[0]);
c0100d74:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0100d77:	83 ec 08             	sub    $0x8,%esp
c0100d7a:	50                   	push   %eax
c0100d7b:	68 53 bc 10 c0       	push   $0xc010bc53
c0100d80:	e8 12 f5 ff ff       	call   c0100297 <cprintf>
c0100d85:	83 c4 10             	add    $0x10,%esp
    return 0;
c0100d88:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100d8d:	c9                   	leave  
c0100d8e:	c3                   	ret    

c0100d8f <kmonitor>:

/***** Implementations of basic kernel monitor commands *****/

void
kmonitor(struct trapframe *tf) {
c0100d8f:	55                   	push   %ebp
c0100d90:	89 e5                	mov    %esp,%ebp
c0100d92:	83 ec 18             	sub    $0x18,%esp
    cprintf("Welcome to the kernel debug monitor!!\n");
c0100d95:	83 ec 0c             	sub    $0xc,%esp
c0100d98:	68 6c bc 10 c0       	push   $0xc010bc6c
c0100d9d:	e8 f5 f4 ff ff       	call   c0100297 <cprintf>
c0100da2:	83 c4 10             	add    $0x10,%esp
    cprintf("Type 'help' for a list of commands.\n");
c0100da5:	83 ec 0c             	sub    $0xc,%esp
c0100da8:	68 94 bc 10 c0       	push   $0xc010bc94
c0100dad:	e8 e5 f4 ff ff       	call   c0100297 <cprintf>
c0100db2:	83 c4 10             	add    $0x10,%esp

    if (tf != NULL) {
c0100db5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0100db9:	74 0e                	je     c0100dc9 <kmonitor+0x3a>
        print_trapframe(tf);
c0100dbb:	83 ec 0c             	sub    $0xc,%esp
c0100dbe:	ff 75 08             	pushl  0x8(%ebp)
c0100dc1:	e8 4c 16 00 00       	call   c0102412 <print_trapframe>
c0100dc6:	83 c4 10             	add    $0x10,%esp
    }

    char *buf;
    while (1) {
        if ((buf = readline("K> ")) != NULL) {
c0100dc9:	83 ec 0c             	sub    $0xc,%esp
c0100dcc:	68 b9 bc 10 c0       	push   $0xc010bcb9
c0100dd1:	e8 65 f5 ff ff       	call   c010033b <readline>
c0100dd6:	83 c4 10             	add    $0x10,%esp
c0100dd9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100ddc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100de0:	74 e7                	je     c0100dc9 <kmonitor+0x3a>
            if (runcmd(buf, tf) < 0) {
c0100de2:	83 ec 08             	sub    $0x8,%esp
c0100de5:	ff 75 08             	pushl  0x8(%ebp)
c0100de8:	ff 75 f4             	pushl  -0xc(%ebp)
c0100deb:	e8 ef fe ff ff       	call   c0100cdf <runcmd>
c0100df0:	83 c4 10             	add    $0x10,%esp
c0100df3:	85 c0                	test   %eax,%eax
c0100df5:	78 02                	js     c0100df9 <kmonitor+0x6a>
                break;
            }
        }
    }
c0100df7:	eb d0                	jmp    c0100dc9 <kmonitor+0x3a>

    char *buf;
    while (1) {
        if ((buf = readline("K> ")) != NULL) {
            if (runcmd(buf, tf) < 0) {
                break;
c0100df9:	90                   	nop
            }
        }
    }
}
c0100dfa:	90                   	nop
c0100dfb:	c9                   	leave  
c0100dfc:	c3                   	ret    

c0100dfd <mon_help>:

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
c0100dfd:	55                   	push   %ebp
c0100dfe:	89 e5                	mov    %esp,%ebp
c0100e00:	83 ec 18             	sub    $0x18,%esp
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100e03:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100e0a:	eb 3c                	jmp    c0100e48 <mon_help+0x4b>
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
c0100e0c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100e0f:	89 d0                	mov    %edx,%eax
c0100e11:	01 c0                	add    %eax,%eax
c0100e13:	01 d0                	add    %edx,%eax
c0100e15:	c1 e0 02             	shl    $0x2,%eax
c0100e18:	05 04 c0 12 c0       	add    $0xc012c004,%eax
c0100e1d:	8b 08                	mov    (%eax),%ecx
c0100e1f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100e22:	89 d0                	mov    %edx,%eax
c0100e24:	01 c0                	add    %eax,%eax
c0100e26:	01 d0                	add    %edx,%eax
c0100e28:	c1 e0 02             	shl    $0x2,%eax
c0100e2b:	05 00 c0 12 c0       	add    $0xc012c000,%eax
c0100e30:	8b 00                	mov    (%eax),%eax
c0100e32:	83 ec 04             	sub    $0x4,%esp
c0100e35:	51                   	push   %ecx
c0100e36:	50                   	push   %eax
c0100e37:	68 bd bc 10 c0       	push   $0xc010bcbd
c0100e3c:	e8 56 f4 ff ff       	call   c0100297 <cprintf>
c0100e41:	83 c4 10             	add    $0x10,%esp

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100e44:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100e48:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100e4b:	83 f8 02             	cmp    $0x2,%eax
c0100e4e:	76 bc                	jbe    c0100e0c <mon_help+0xf>
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
    }
    return 0;
c0100e50:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100e55:	c9                   	leave  
c0100e56:	c3                   	ret    

c0100e57 <mon_kerninfo>:
/* *
 * mon_kerninfo - call print_kerninfo in kern/debug/kdebug.c to
 * print the memory occupancy in kernel.
 * */
int
mon_kerninfo(int argc, char **argv, struct trapframe *tf) {
c0100e57:	55                   	push   %ebp
c0100e58:	89 e5                	mov    %esp,%ebp
c0100e5a:	83 ec 08             	sub    $0x8,%esp
    print_kerninfo();
c0100e5d:	e8 ab fb ff ff       	call   c0100a0d <print_kerninfo>
    return 0;
c0100e62:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100e67:	c9                   	leave  
c0100e68:	c3                   	ret    

c0100e69 <mon_backtrace>:
/* *
 * mon_backtrace - call print_stackframe in kern/debug/kdebug.c to
 * print a backtrace of the stack.
 * */
int
mon_backtrace(int argc, char **argv, struct trapframe *tf) {
c0100e69:	55                   	push   %ebp
c0100e6a:	89 e5                	mov    %esp,%ebp
c0100e6c:	83 ec 08             	sub    $0x8,%esp
    print_stackframe();
c0100e6f:	e8 e3 fc ff ff       	call   c0100b57 <print_stackframe>
    return 0;
c0100e74:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100e79:	c9                   	leave  
c0100e7a:	c3                   	ret    

c0100e7b <ide_wait_ready>:
    unsigned int size;          // Size in Sectors
    unsigned char model[41];    // Model in String
} ide_devices[MAX_IDE];

static int
ide_wait_ready(unsigned short iobase, bool check_error) {
c0100e7b:	55                   	push   %ebp
c0100e7c:	89 e5                	mov    %esp,%ebp
c0100e7e:	83 ec 14             	sub    $0x14,%esp
c0100e81:	8b 45 08             	mov    0x8(%ebp),%eax
c0100e84:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    int r;
    while ((r = inb(iobase + ISA_STATUS)) & IDE_BSY)
c0100e88:	90                   	nop
c0100e89:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0100e8d:	83 c0 07             	add    $0x7,%eax
c0100e90:	0f b7 c0             	movzwl %ax,%eax
c0100e93:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0100e97:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0100e9b:	89 c2                	mov    %eax,%edx
c0100e9d:	ec                   	in     (%dx),%al
c0100e9e:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c0100ea1:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c0100ea5:	0f b6 c0             	movzbl %al,%eax
c0100ea8:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0100eab:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100eae:	25 80 00 00 00       	and    $0x80,%eax
c0100eb3:	85 c0                	test   %eax,%eax
c0100eb5:	75 d2                	jne    c0100e89 <ide_wait_ready+0xe>
        /* nothing */;
    if (check_error && (r & (IDE_DF | IDE_ERR)) != 0) {
c0100eb7:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0100ebb:	74 11                	je     c0100ece <ide_wait_ready+0x53>
c0100ebd:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100ec0:	83 e0 21             	and    $0x21,%eax
c0100ec3:	85 c0                	test   %eax,%eax
c0100ec5:	74 07                	je     c0100ece <ide_wait_ready+0x53>
        return -1;
c0100ec7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100ecc:	eb 05                	jmp    c0100ed3 <ide_wait_ready+0x58>
    }
    return 0;
c0100ece:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100ed3:	c9                   	leave  
c0100ed4:	c3                   	ret    

c0100ed5 <ide_init>:

void
ide_init(void) {
c0100ed5:	55                   	push   %ebp
c0100ed6:	89 e5                	mov    %esp,%ebp
c0100ed8:	57                   	push   %edi
c0100ed9:	53                   	push   %ebx
c0100eda:	81 ec 40 02 00 00    	sub    $0x240,%esp
    static_assert((SECTSIZE % 4) == 0);
    unsigned short ideno, iobase;
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c0100ee0:	66 c7 45 f6 00 00    	movw   $0x0,-0xa(%ebp)
c0100ee6:	e9 c1 02 00 00       	jmp    c01011ac <ide_init+0x2d7>
        /* assume that no device here */
        ide_devices[ideno].valid = 0;
c0100eeb:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100eef:	c1 e0 03             	shl    $0x3,%eax
c0100ef2:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0100ef9:	29 c2                	sub    %eax,%edx
c0100efb:	89 d0                	mov    %edx,%eax
c0100efd:	05 40 04 1b c0       	add    $0xc01b0440,%eax
c0100f02:	c6 00 00             	movb   $0x0,(%eax)

        iobase = IO_BASE(ideno);
c0100f05:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100f09:	66 d1 e8             	shr    %ax
c0100f0c:	0f b7 c0             	movzwl %ax,%eax
c0100f0f:	0f b7 04 85 c8 bc 10 	movzwl -0x3fef4338(,%eax,4),%eax
c0100f16:	c0 
c0100f17:	66 89 45 ea          	mov    %ax,-0x16(%ebp)

        /* wait device ready */
        ide_wait_ready(iobase, 0);
c0100f1b:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0100f1f:	6a 00                	push   $0x0
c0100f21:	50                   	push   %eax
c0100f22:	e8 54 ff ff ff       	call   c0100e7b <ide_wait_ready>
c0100f27:	83 c4 08             	add    $0x8,%esp

        /* step1: select drive */
        outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4));
c0100f2a:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100f2e:	83 e0 01             	and    $0x1,%eax
c0100f31:	c1 e0 04             	shl    $0x4,%eax
c0100f34:	83 c8 e0             	or     $0xffffffe0,%eax
c0100f37:	0f b6 c0             	movzbl %al,%eax
c0100f3a:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0100f3e:	83 c2 06             	add    $0x6,%edx
c0100f41:	0f b7 d2             	movzwl %dx,%edx
c0100f44:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c0100f48:	88 45 c7             	mov    %al,-0x39(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0100f4b:	0f b6 45 c7          	movzbl -0x39(%ebp),%eax
c0100f4f:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0100f53:	ee                   	out    %al,(%dx)
        ide_wait_ready(iobase, 0);
c0100f54:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0100f58:	6a 00                	push   $0x0
c0100f5a:	50                   	push   %eax
c0100f5b:	e8 1b ff ff ff       	call   c0100e7b <ide_wait_ready>
c0100f60:	83 c4 08             	add    $0x8,%esp

        /* step2: send ATA identify command */
        outb(iobase + ISA_COMMAND, IDE_CMD_IDENTIFY);
c0100f63:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0100f67:	83 c0 07             	add    $0x7,%eax
c0100f6a:	0f b7 c0             	movzwl %ax,%eax
c0100f6d:	66 89 45 e0          	mov    %ax,-0x20(%ebp)
c0100f71:	c6 45 c8 ec          	movb   $0xec,-0x38(%ebp)
c0100f75:	0f b6 45 c8          	movzbl -0x38(%ebp),%eax
c0100f79:	0f b7 55 e0          	movzwl -0x20(%ebp),%edx
c0100f7d:	ee                   	out    %al,(%dx)
        ide_wait_ready(iobase, 0);
c0100f7e:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0100f82:	6a 00                	push   $0x0
c0100f84:	50                   	push   %eax
c0100f85:	e8 f1 fe ff ff       	call   c0100e7b <ide_wait_ready>
c0100f8a:	83 c4 08             	add    $0x8,%esp

        /* step3: polling */
        if (inb(iobase + ISA_STATUS) == 0 || ide_wait_ready(iobase, 1) != 0) {
c0100f8d:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0100f91:	83 c0 07             	add    $0x7,%eax
c0100f94:	0f b7 c0             	movzwl %ax,%eax
c0100f97:	66 89 45 ca          	mov    %ax,-0x36(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0100f9b:	0f b7 45 ca          	movzwl -0x36(%ebp),%eax
c0100f9f:	89 c2                	mov    %eax,%edx
c0100fa1:	ec                   	in     (%dx),%al
c0100fa2:	88 45 c9             	mov    %al,-0x37(%ebp)
    return data;
c0100fa5:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
c0100fa9:	84 c0                	test   %al,%al
c0100fab:	0f 84 ef 01 00 00    	je     c01011a0 <ide_init+0x2cb>
c0100fb1:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0100fb5:	6a 01                	push   $0x1
c0100fb7:	50                   	push   %eax
c0100fb8:	e8 be fe ff ff       	call   c0100e7b <ide_wait_ready>
c0100fbd:	83 c4 08             	add    $0x8,%esp
c0100fc0:	85 c0                	test   %eax,%eax
c0100fc2:	0f 85 d8 01 00 00    	jne    c01011a0 <ide_init+0x2cb>
            continue ;
        }

        /* device is ok */
        ide_devices[ideno].valid = 1;
c0100fc8:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100fcc:	c1 e0 03             	shl    $0x3,%eax
c0100fcf:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0100fd6:	29 c2                	sub    %eax,%edx
c0100fd8:	89 d0                	mov    %edx,%eax
c0100fda:	05 40 04 1b c0       	add    $0xc01b0440,%eax
c0100fdf:	c6 00 01             	movb   $0x1,(%eax)

        /* read identification space of the device */
        unsigned int buffer[128];
        insl(iobase + ISA_DATA, buffer, sizeof(buffer) / sizeof(unsigned int));
c0100fe2:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0100fe6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0100fe9:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
c0100fef:	89 45 c0             	mov    %eax,-0x40(%ebp)
c0100ff2:	c7 45 bc 80 00 00 00 	movl   $0x80,-0x44(%ebp)
}

static inline void
insl(uint32_t port, void *addr, int cnt) {
    asm volatile (
c0100ff9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0100ffc:	8b 4d c0             	mov    -0x40(%ebp),%ecx
c0100fff:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0101002:	89 cb                	mov    %ecx,%ebx
c0101004:	89 df                	mov    %ebx,%edi
c0101006:	89 c1                	mov    %eax,%ecx
c0101008:	fc                   	cld    
c0101009:	f2 6d                	repnz insl (%dx),%es:(%edi)
c010100b:	89 c8                	mov    %ecx,%eax
c010100d:	89 fb                	mov    %edi,%ebx
c010100f:	89 5d c0             	mov    %ebx,-0x40(%ebp)
c0101012:	89 45 bc             	mov    %eax,-0x44(%ebp)

        unsigned char *ident = (unsigned char *)buffer;
c0101015:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
c010101b:	89 45 dc             	mov    %eax,-0x24(%ebp)
        unsigned int sectors;
        unsigned int cmdsets = *(unsigned int *)(ident + IDE_IDENT_CMDSETS);
c010101e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101021:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
c0101027:	89 45 d8             	mov    %eax,-0x28(%ebp)
        /* device use 48-bits or 28-bits addressing */
        if (cmdsets & (1 << 26)) {
c010102a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010102d:	25 00 00 00 04       	and    $0x4000000,%eax
c0101032:	85 c0                	test   %eax,%eax
c0101034:	74 0e                	je     c0101044 <ide_init+0x16f>
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA_EXT);
c0101036:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101039:	8b 80 c8 00 00 00    	mov    0xc8(%eax),%eax
c010103f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0101042:	eb 09                	jmp    c010104d <ide_init+0x178>
        }
        else {
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA);
c0101044:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101047:	8b 40 78             	mov    0x78(%eax),%eax
c010104a:	89 45 f0             	mov    %eax,-0x10(%ebp)
        }
        ide_devices[ideno].sets = cmdsets;
c010104d:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101051:	c1 e0 03             	shl    $0x3,%eax
c0101054:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c010105b:	29 c2                	sub    %eax,%edx
c010105d:	89 d0                	mov    %edx,%eax
c010105f:	8d 90 44 04 1b c0    	lea    -0x3fe4fbbc(%eax),%edx
c0101065:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0101068:	89 02                	mov    %eax,(%edx)
        ide_devices[ideno].size = sectors;
c010106a:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010106e:	c1 e0 03             	shl    $0x3,%eax
c0101071:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101078:	29 c2                	sub    %eax,%edx
c010107a:	89 d0                	mov    %edx,%eax
c010107c:	8d 90 48 04 1b c0    	lea    -0x3fe4fbb8(%eax),%edx
c0101082:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0101085:	89 02                	mov    %eax,(%edx)

        /* check if supports LBA */
        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);
c0101087:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010108a:	83 c0 62             	add    $0x62,%eax
c010108d:	0f b7 00             	movzwl (%eax),%eax
c0101090:	0f b7 c0             	movzwl %ax,%eax
c0101093:	25 00 02 00 00       	and    $0x200,%eax
c0101098:	85 c0                	test   %eax,%eax
c010109a:	75 16                	jne    c01010b2 <ide_init+0x1dd>
c010109c:	68 d0 bc 10 c0       	push   $0xc010bcd0
c01010a1:	68 13 bd 10 c0       	push   $0xc010bd13
c01010a6:	6a 7d                	push   $0x7d
c01010a8:	68 28 bd 10 c0       	push   $0xc010bd28
c01010ad:	e8 4b f3 ff ff       	call   c01003fd <__panic>

        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
c01010b2:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c01010b6:	89 c2                	mov    %eax,%edx
c01010b8:	8d 04 d5 00 00 00 00 	lea    0x0(,%edx,8),%eax
c01010bf:	89 c2                	mov    %eax,%edx
c01010c1:	8d 04 d5 00 00 00 00 	lea    0x0(,%edx,8),%eax
c01010c8:	29 d0                	sub    %edx,%eax
c01010ca:	05 40 04 1b c0       	add    $0xc01b0440,%eax
c01010cf:	83 c0 0c             	add    $0xc,%eax
c01010d2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c01010d5:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01010d8:	83 c0 36             	add    $0x36,%eax
c01010db:	89 45 d0             	mov    %eax,-0x30(%ebp)
        unsigned int i, length = 40;
c01010de:	c7 45 cc 28 00 00 00 	movl   $0x28,-0x34(%ebp)
        for (i = 0; i < length; i += 2) {
c01010e5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01010ec:	eb 34                	jmp    c0101122 <ide_init+0x24d>
            model[i] = data[i + 1], model[i + 1] = data[i];
c01010ee:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01010f1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01010f4:	01 c2                	add    %eax,%edx
c01010f6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01010f9:	8d 48 01             	lea    0x1(%eax),%ecx
c01010fc:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01010ff:	01 c8                	add    %ecx,%eax
c0101101:	0f b6 00             	movzbl (%eax),%eax
c0101104:	88 02                	mov    %al,(%edx)
c0101106:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101109:	8d 50 01             	lea    0x1(%eax),%edx
c010110c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010110f:	01 c2                	add    %eax,%edx
c0101111:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c0101114:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101117:	01 c8                	add    %ecx,%eax
c0101119:	0f b6 00             	movzbl (%eax),%eax
c010111c:	88 02                	mov    %al,(%edx)
        /* check if supports LBA */
        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);

        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
        unsigned int i, length = 40;
        for (i = 0; i < length; i += 2) {
c010111e:	83 45 ec 02          	addl   $0x2,-0x14(%ebp)
c0101122:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101125:	3b 45 cc             	cmp    -0x34(%ebp),%eax
c0101128:	72 c4                	jb     c01010ee <ide_init+0x219>
            model[i] = data[i + 1], model[i + 1] = data[i];
        }
        do {
            model[i] = '\0';
c010112a:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010112d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101130:	01 d0                	add    %edx,%eax
c0101132:	c6 00 00             	movb   $0x0,(%eax)
        } while (i -- > 0 && model[i] == ' ');
c0101135:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101138:	8d 50 ff             	lea    -0x1(%eax),%edx
c010113b:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010113e:	85 c0                	test   %eax,%eax
c0101140:	74 0f                	je     c0101151 <ide_init+0x27c>
c0101142:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0101145:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101148:	01 d0                	add    %edx,%eax
c010114a:	0f b6 00             	movzbl (%eax),%eax
c010114d:	3c 20                	cmp    $0x20,%al
c010114f:	74 d9                	je     c010112a <ide_init+0x255>

        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
c0101151:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101155:	89 c2                	mov    %eax,%edx
c0101157:	8d 04 d5 00 00 00 00 	lea    0x0(,%edx,8),%eax
c010115e:	89 c2                	mov    %eax,%edx
c0101160:	8d 04 d5 00 00 00 00 	lea    0x0(,%edx,8),%eax
c0101167:	29 d0                	sub    %edx,%eax
c0101169:	05 40 04 1b c0       	add    $0xc01b0440,%eax
c010116e:	8d 48 0c             	lea    0xc(%eax),%ecx
c0101171:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101175:	c1 e0 03             	shl    $0x3,%eax
c0101178:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c010117f:	29 c2                	sub    %eax,%edx
c0101181:	89 d0                	mov    %edx,%eax
c0101183:	05 48 04 1b c0       	add    $0xc01b0448,%eax
c0101188:	8b 10                	mov    (%eax),%edx
c010118a:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010118e:	51                   	push   %ecx
c010118f:	52                   	push   %edx
c0101190:	50                   	push   %eax
c0101191:	68 3a bd 10 c0       	push   $0xc010bd3a
c0101196:	e8 fc f0 ff ff       	call   c0100297 <cprintf>
c010119b:	83 c4 10             	add    $0x10,%esp
c010119e:	eb 01                	jmp    c01011a1 <ide_init+0x2cc>
        outb(iobase + ISA_COMMAND, IDE_CMD_IDENTIFY);
        ide_wait_ready(iobase, 0);

        /* step3: polling */
        if (inb(iobase + ISA_STATUS) == 0 || ide_wait_ready(iobase, 1) != 0) {
            continue ;
c01011a0:	90                   	nop

void
ide_init(void) {
    static_assert((SECTSIZE % 4) == 0);
    unsigned short ideno, iobase;
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c01011a1:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c01011a5:	83 c0 01             	add    $0x1,%eax
c01011a8:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
c01011ac:	66 83 7d f6 03       	cmpw   $0x3,-0xa(%ebp)
c01011b1:	0f 86 34 fd ff ff    	jbe    c0100eeb <ide_init+0x16>

        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
    }

    // enable ide interrupt
    pic_enable(IRQ_IDE1);
c01011b7:	83 ec 0c             	sub    $0xc,%esp
c01011ba:	6a 0e                	push   $0xe
c01011bc:	e8 8a 0e 00 00       	call   c010204b <pic_enable>
c01011c1:	83 c4 10             	add    $0x10,%esp
    pic_enable(IRQ_IDE2);
c01011c4:	83 ec 0c             	sub    $0xc,%esp
c01011c7:	6a 0f                	push   $0xf
c01011c9:	e8 7d 0e 00 00       	call   c010204b <pic_enable>
c01011ce:	83 c4 10             	add    $0x10,%esp
}
c01011d1:	90                   	nop
c01011d2:	8d 65 f8             	lea    -0x8(%ebp),%esp
c01011d5:	5b                   	pop    %ebx
c01011d6:	5f                   	pop    %edi
c01011d7:	5d                   	pop    %ebp
c01011d8:	c3                   	ret    

c01011d9 <ide_device_valid>:

bool
ide_device_valid(unsigned short ideno) {
c01011d9:	55                   	push   %ebp
c01011da:	89 e5                	mov    %esp,%ebp
c01011dc:	83 ec 04             	sub    $0x4,%esp
c01011df:	8b 45 08             	mov    0x8(%ebp),%eax
c01011e2:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    return VALID_IDE(ideno);
c01011e6:	66 83 7d fc 03       	cmpw   $0x3,-0x4(%ebp)
c01011eb:	77 25                	ja     c0101212 <ide_device_valid+0x39>
c01011ed:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c01011f1:	c1 e0 03             	shl    $0x3,%eax
c01011f4:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c01011fb:	29 c2                	sub    %eax,%edx
c01011fd:	89 d0                	mov    %edx,%eax
c01011ff:	05 40 04 1b c0       	add    $0xc01b0440,%eax
c0101204:	0f b6 00             	movzbl (%eax),%eax
c0101207:	84 c0                	test   %al,%al
c0101209:	74 07                	je     c0101212 <ide_device_valid+0x39>
c010120b:	b8 01 00 00 00       	mov    $0x1,%eax
c0101210:	eb 05                	jmp    c0101217 <ide_device_valid+0x3e>
c0101212:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101217:	c9                   	leave  
c0101218:	c3                   	ret    

c0101219 <ide_device_size>:

size_t
ide_device_size(unsigned short ideno) {
c0101219:	55                   	push   %ebp
c010121a:	89 e5                	mov    %esp,%ebp
c010121c:	83 ec 04             	sub    $0x4,%esp
c010121f:	8b 45 08             	mov    0x8(%ebp),%eax
c0101222:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    if (ide_device_valid(ideno)) {
c0101226:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c010122a:	50                   	push   %eax
c010122b:	e8 a9 ff ff ff       	call   c01011d9 <ide_device_valid>
c0101230:	83 c4 04             	add    $0x4,%esp
c0101233:	85 c0                	test   %eax,%eax
c0101235:	74 1b                	je     c0101252 <ide_device_size+0x39>
        return ide_devices[ideno].size;
c0101237:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c010123b:	c1 e0 03             	shl    $0x3,%eax
c010123e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101245:	29 c2                	sub    %eax,%edx
c0101247:	89 d0                	mov    %edx,%eax
c0101249:	05 48 04 1b c0       	add    $0xc01b0448,%eax
c010124e:	8b 00                	mov    (%eax),%eax
c0101250:	eb 05                	jmp    c0101257 <ide_device_size+0x3e>
    }
    return 0;
c0101252:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101257:	c9                   	leave  
c0101258:	c3                   	ret    

c0101259 <ide_read_secs>:

int
ide_read_secs(unsigned short ideno, uint32_t secno, void *dst, size_t nsecs) {
c0101259:	55                   	push   %ebp
c010125a:	89 e5                	mov    %esp,%ebp
c010125c:	57                   	push   %edi
c010125d:	53                   	push   %ebx
c010125e:	83 ec 40             	sub    $0x40,%esp
c0101261:	8b 45 08             	mov    0x8(%ebp),%eax
c0101264:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c0101268:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c010126f:	77 25                	ja     c0101296 <ide_read_secs+0x3d>
c0101271:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
c0101276:	77 1e                	ja     c0101296 <ide_read_secs+0x3d>
c0101278:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c010127c:	c1 e0 03             	shl    $0x3,%eax
c010127f:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101286:	29 c2                	sub    %eax,%edx
c0101288:	89 d0                	mov    %edx,%eax
c010128a:	05 40 04 1b c0       	add    $0xc01b0440,%eax
c010128f:	0f b6 00             	movzbl (%eax),%eax
c0101292:	84 c0                	test   %al,%al
c0101294:	75 19                	jne    c01012af <ide_read_secs+0x56>
c0101296:	68 58 bd 10 c0       	push   $0xc010bd58
c010129b:	68 13 bd 10 c0       	push   $0xc010bd13
c01012a0:	68 9f 00 00 00       	push   $0x9f
c01012a5:	68 28 bd 10 c0       	push   $0xc010bd28
c01012aa:	e8 4e f1 ff ff       	call   c01003fd <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c01012af:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c01012b6:	77 0f                	ja     c01012c7 <ide_read_secs+0x6e>
c01012b8:	8b 55 0c             	mov    0xc(%ebp),%edx
c01012bb:	8b 45 14             	mov    0x14(%ebp),%eax
c01012be:	01 d0                	add    %edx,%eax
c01012c0:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c01012c5:	76 19                	jbe    c01012e0 <ide_read_secs+0x87>
c01012c7:	68 80 bd 10 c0       	push   $0xc010bd80
c01012cc:	68 13 bd 10 c0       	push   $0xc010bd13
c01012d1:	68 a0 00 00 00       	push   $0xa0
c01012d6:	68 28 bd 10 c0       	push   $0xc010bd28
c01012db:	e8 1d f1 ff ff       	call   c01003fd <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c01012e0:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c01012e4:	66 d1 e8             	shr    %ax
c01012e7:	0f b7 c0             	movzwl %ax,%eax
c01012ea:	0f b7 04 85 c8 bc 10 	movzwl -0x3fef4338(,%eax,4),%eax
c01012f1:	c0 
c01012f2:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c01012f6:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c01012fa:	66 d1 e8             	shr    %ax
c01012fd:	0f b7 c0             	movzwl %ax,%eax
c0101300:	0f b7 04 85 ca bc 10 	movzwl -0x3fef4336(,%eax,4),%eax
c0101307:	c0 
c0101308:	66 89 45 f0          	mov    %ax,-0x10(%ebp)

    ide_wait_ready(iobase, 0);
c010130c:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101310:	83 ec 08             	sub    $0x8,%esp
c0101313:	6a 00                	push   $0x0
c0101315:	50                   	push   %eax
c0101316:	e8 60 fb ff ff       	call   c0100e7b <ide_wait_ready>
c010131b:	83 c4 10             	add    $0x10,%esp

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c010131e:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c0101322:	83 c0 02             	add    $0x2,%eax
c0101325:	0f b7 c0             	movzwl %ax,%eax
c0101328:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
c010132c:	c6 45 d7 00          	movb   $0x0,-0x29(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101330:	0f b6 45 d7          	movzbl -0x29(%ebp),%eax
c0101334:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101338:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECCNT, nsecs);
c0101339:	8b 45 14             	mov    0x14(%ebp),%eax
c010133c:	0f b6 c0             	movzbl %al,%eax
c010133f:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101343:	83 c2 02             	add    $0x2,%edx
c0101346:	0f b7 d2             	movzwl %dx,%edx
c0101349:	66 89 55 e8          	mov    %dx,-0x18(%ebp)
c010134d:	88 45 d8             	mov    %al,-0x28(%ebp)
c0101350:	0f b6 45 d8          	movzbl -0x28(%ebp),%eax
c0101354:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c0101358:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c0101359:	8b 45 0c             	mov    0xc(%ebp),%eax
c010135c:	0f b6 c0             	movzbl %al,%eax
c010135f:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101363:	83 c2 03             	add    $0x3,%edx
c0101366:	0f b7 d2             	movzwl %dx,%edx
c0101369:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c010136d:	88 45 d9             	mov    %al,-0x27(%ebp)
c0101370:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c0101374:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0101378:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c0101379:	8b 45 0c             	mov    0xc(%ebp),%eax
c010137c:	c1 e8 08             	shr    $0x8,%eax
c010137f:	0f b6 c0             	movzbl %al,%eax
c0101382:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101386:	83 c2 04             	add    $0x4,%edx
c0101389:	0f b7 d2             	movzwl %dx,%edx
c010138c:	66 89 55 e4          	mov    %dx,-0x1c(%ebp)
c0101390:	88 45 da             	mov    %al,-0x26(%ebp)
c0101393:	0f b6 45 da          	movzbl -0x26(%ebp),%eax
c0101397:	0f b7 55 e4          	movzwl -0x1c(%ebp),%edx
c010139b:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c010139c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010139f:	c1 e8 10             	shr    $0x10,%eax
c01013a2:	0f b6 c0             	movzbl %al,%eax
c01013a5:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01013a9:	83 c2 05             	add    $0x5,%edx
c01013ac:	0f b7 d2             	movzwl %dx,%edx
c01013af:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c01013b3:	88 45 db             	mov    %al,-0x25(%ebp)
c01013b6:	0f b6 45 db          	movzbl -0x25(%ebp),%eax
c01013ba:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c01013be:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c01013bf:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c01013c3:	83 e0 01             	and    $0x1,%eax
c01013c6:	c1 e0 04             	shl    $0x4,%eax
c01013c9:	89 c2                	mov    %eax,%edx
c01013cb:	8b 45 0c             	mov    0xc(%ebp),%eax
c01013ce:	c1 e8 18             	shr    $0x18,%eax
c01013d1:	83 e0 0f             	and    $0xf,%eax
c01013d4:	09 d0                	or     %edx,%eax
c01013d6:	83 c8 e0             	or     $0xffffffe0,%eax
c01013d9:	0f b6 c0             	movzbl %al,%eax
c01013dc:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01013e0:	83 c2 06             	add    $0x6,%edx
c01013e3:	0f b7 d2             	movzwl %dx,%edx
c01013e6:	66 89 55 e0          	mov    %dx,-0x20(%ebp)
c01013ea:	88 45 dc             	mov    %al,-0x24(%ebp)
c01013ed:	0f b6 45 dc          	movzbl -0x24(%ebp),%eax
c01013f1:	0f b7 55 e0          	movzwl -0x20(%ebp),%edx
c01013f5:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_COMMAND, IDE_CMD_READ);
c01013f6:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01013fa:	83 c0 07             	add    $0x7,%eax
c01013fd:	0f b7 c0             	movzwl %ax,%eax
c0101400:	66 89 45 de          	mov    %ax,-0x22(%ebp)
c0101404:	c6 45 dd 20          	movb   $0x20,-0x23(%ebp)
c0101408:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c010140c:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c0101410:	ee                   	out    %al,(%dx)

    int ret = 0;
c0101411:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c0101418:	eb 56                	jmp    c0101470 <ide_read_secs+0x217>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c010141a:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c010141e:	83 ec 08             	sub    $0x8,%esp
c0101421:	6a 01                	push   $0x1
c0101423:	50                   	push   %eax
c0101424:	e8 52 fa ff ff       	call   c0100e7b <ide_wait_ready>
c0101429:	83 c4 10             	add    $0x10,%esp
c010142c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010142f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0101433:	75 43                	jne    c0101478 <ide_read_secs+0x21f>
            goto out;
        }
        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
c0101435:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101439:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010143c:	8b 45 10             	mov    0x10(%ebp),%eax
c010143f:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0101442:	c7 45 cc 80 00 00 00 	movl   $0x80,-0x34(%ebp)
    return data;
}

static inline void
insl(uint32_t port, void *addr, int cnt) {
    asm volatile (
c0101449:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010144c:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c010144f:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0101452:	89 cb                	mov    %ecx,%ebx
c0101454:	89 df                	mov    %ebx,%edi
c0101456:	89 c1                	mov    %eax,%ecx
c0101458:	fc                   	cld    
c0101459:	f2 6d                	repnz insl (%dx),%es:(%edi)
c010145b:	89 c8                	mov    %ecx,%eax
c010145d:	89 fb                	mov    %edi,%ebx
c010145f:	89 5d d0             	mov    %ebx,-0x30(%ebp)
c0101462:	89 45 cc             	mov    %eax,-0x34(%ebp)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
    outb(iobase + ISA_COMMAND, IDE_CMD_READ);

    int ret = 0;
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c0101465:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0101469:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c0101470:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0101474:	75 a4                	jne    c010141a <ide_read_secs+0x1c1>
c0101476:	eb 01                	jmp    c0101479 <ide_read_secs+0x220>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
            goto out;
c0101478:	90                   	nop
        }
        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
    }

out:
    return ret;
c0101479:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010147c:	8d 65 f8             	lea    -0x8(%ebp),%esp
c010147f:	5b                   	pop    %ebx
c0101480:	5f                   	pop    %edi
c0101481:	5d                   	pop    %ebp
c0101482:	c3                   	ret    

c0101483 <ide_write_secs>:

int
ide_write_secs(unsigned short ideno, uint32_t secno, const void *src, size_t nsecs) {
c0101483:	55                   	push   %ebp
c0101484:	89 e5                	mov    %esp,%ebp
c0101486:	56                   	push   %esi
c0101487:	53                   	push   %ebx
c0101488:	83 ec 40             	sub    $0x40,%esp
c010148b:	8b 45 08             	mov    0x8(%ebp),%eax
c010148e:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c0101492:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c0101499:	77 25                	ja     c01014c0 <ide_write_secs+0x3d>
c010149b:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
c01014a0:	77 1e                	ja     c01014c0 <ide_write_secs+0x3d>
c01014a2:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c01014a6:	c1 e0 03             	shl    $0x3,%eax
c01014a9:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c01014b0:	29 c2                	sub    %eax,%edx
c01014b2:	89 d0                	mov    %edx,%eax
c01014b4:	05 40 04 1b c0       	add    $0xc01b0440,%eax
c01014b9:	0f b6 00             	movzbl (%eax),%eax
c01014bc:	84 c0                	test   %al,%al
c01014be:	75 19                	jne    c01014d9 <ide_write_secs+0x56>
c01014c0:	68 58 bd 10 c0       	push   $0xc010bd58
c01014c5:	68 13 bd 10 c0       	push   $0xc010bd13
c01014ca:	68 bc 00 00 00       	push   $0xbc
c01014cf:	68 28 bd 10 c0       	push   $0xc010bd28
c01014d4:	e8 24 ef ff ff       	call   c01003fd <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c01014d9:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c01014e0:	77 0f                	ja     c01014f1 <ide_write_secs+0x6e>
c01014e2:	8b 55 0c             	mov    0xc(%ebp),%edx
c01014e5:	8b 45 14             	mov    0x14(%ebp),%eax
c01014e8:	01 d0                	add    %edx,%eax
c01014ea:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c01014ef:	76 19                	jbe    c010150a <ide_write_secs+0x87>
c01014f1:	68 80 bd 10 c0       	push   $0xc010bd80
c01014f6:	68 13 bd 10 c0       	push   $0xc010bd13
c01014fb:	68 bd 00 00 00       	push   $0xbd
c0101500:	68 28 bd 10 c0       	push   $0xc010bd28
c0101505:	e8 f3 ee ff ff       	call   c01003fd <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c010150a:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c010150e:	66 d1 e8             	shr    %ax
c0101511:	0f b7 c0             	movzwl %ax,%eax
c0101514:	0f b7 04 85 c8 bc 10 	movzwl -0x3fef4338(,%eax,4),%eax
c010151b:	c0 
c010151c:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0101520:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101524:	66 d1 e8             	shr    %ax
c0101527:	0f b7 c0             	movzwl %ax,%eax
c010152a:	0f b7 04 85 ca bc 10 	movzwl -0x3fef4336(,%eax,4),%eax
c0101531:	c0 
c0101532:	66 89 45 f0          	mov    %ax,-0x10(%ebp)

    ide_wait_ready(iobase, 0);
c0101536:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c010153a:	83 ec 08             	sub    $0x8,%esp
c010153d:	6a 00                	push   $0x0
c010153f:	50                   	push   %eax
c0101540:	e8 36 f9 ff ff       	call   c0100e7b <ide_wait_ready>
c0101545:	83 c4 10             	add    $0x10,%esp

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c0101548:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c010154c:	83 c0 02             	add    $0x2,%eax
c010154f:	0f b7 c0             	movzwl %ax,%eax
c0101552:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
c0101556:	c6 45 d7 00          	movb   $0x0,-0x29(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010155a:	0f b6 45 d7          	movzbl -0x29(%ebp),%eax
c010155e:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101562:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECCNT, nsecs);
c0101563:	8b 45 14             	mov    0x14(%ebp),%eax
c0101566:	0f b6 c0             	movzbl %al,%eax
c0101569:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010156d:	83 c2 02             	add    $0x2,%edx
c0101570:	0f b7 d2             	movzwl %dx,%edx
c0101573:	66 89 55 e8          	mov    %dx,-0x18(%ebp)
c0101577:	88 45 d8             	mov    %al,-0x28(%ebp)
c010157a:	0f b6 45 d8          	movzbl -0x28(%ebp),%eax
c010157e:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c0101582:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c0101583:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101586:	0f b6 c0             	movzbl %al,%eax
c0101589:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010158d:	83 c2 03             	add    $0x3,%edx
c0101590:	0f b7 d2             	movzwl %dx,%edx
c0101593:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c0101597:	88 45 d9             	mov    %al,-0x27(%ebp)
c010159a:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c010159e:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c01015a2:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c01015a3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01015a6:	c1 e8 08             	shr    $0x8,%eax
c01015a9:	0f b6 c0             	movzbl %al,%eax
c01015ac:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01015b0:	83 c2 04             	add    $0x4,%edx
c01015b3:	0f b7 d2             	movzwl %dx,%edx
c01015b6:	66 89 55 e4          	mov    %dx,-0x1c(%ebp)
c01015ba:	88 45 da             	mov    %al,-0x26(%ebp)
c01015bd:	0f b6 45 da          	movzbl -0x26(%ebp),%eax
c01015c1:	0f b7 55 e4          	movzwl -0x1c(%ebp),%edx
c01015c5:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c01015c6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01015c9:	c1 e8 10             	shr    $0x10,%eax
c01015cc:	0f b6 c0             	movzbl %al,%eax
c01015cf:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01015d3:	83 c2 05             	add    $0x5,%edx
c01015d6:	0f b7 d2             	movzwl %dx,%edx
c01015d9:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c01015dd:	88 45 db             	mov    %al,-0x25(%ebp)
c01015e0:	0f b6 45 db          	movzbl -0x25(%ebp),%eax
c01015e4:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c01015e8:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c01015e9:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c01015ed:	83 e0 01             	and    $0x1,%eax
c01015f0:	c1 e0 04             	shl    $0x4,%eax
c01015f3:	89 c2                	mov    %eax,%edx
c01015f5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01015f8:	c1 e8 18             	shr    $0x18,%eax
c01015fb:	83 e0 0f             	and    $0xf,%eax
c01015fe:	09 d0                	or     %edx,%eax
c0101600:	83 c8 e0             	or     $0xffffffe0,%eax
c0101603:	0f b6 c0             	movzbl %al,%eax
c0101606:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010160a:	83 c2 06             	add    $0x6,%edx
c010160d:	0f b7 d2             	movzwl %dx,%edx
c0101610:	66 89 55 e0          	mov    %dx,-0x20(%ebp)
c0101614:	88 45 dc             	mov    %al,-0x24(%ebp)
c0101617:	0f b6 45 dc          	movzbl -0x24(%ebp),%eax
c010161b:	0f b7 55 e0          	movzwl -0x20(%ebp),%edx
c010161f:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);
c0101620:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101624:	83 c0 07             	add    $0x7,%eax
c0101627:	0f b7 c0             	movzwl %ax,%eax
c010162a:	66 89 45 de          	mov    %ax,-0x22(%ebp)
c010162e:	c6 45 dd 30          	movb   $0x30,-0x23(%ebp)
c0101632:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0101636:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c010163a:	ee                   	out    %al,(%dx)

    int ret = 0;
c010163b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c0101642:	eb 56                	jmp    c010169a <ide_write_secs+0x217>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c0101644:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101648:	83 ec 08             	sub    $0x8,%esp
c010164b:	6a 01                	push   $0x1
c010164d:	50                   	push   %eax
c010164e:	e8 28 f8 ff ff       	call   c0100e7b <ide_wait_ready>
c0101653:	83 c4 10             	add    $0x10,%esp
c0101656:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0101659:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010165d:	75 43                	jne    c01016a2 <ide_write_secs+0x21f>
            goto out;
        }
        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
c010165f:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101663:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0101666:	8b 45 10             	mov    0x10(%ebp),%eax
c0101669:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010166c:	c7 45 cc 80 00 00 00 	movl   $0x80,-0x34(%ebp)
    asm volatile ("outw %0, %1" :: "a" (data), "d" (port) : "memory");
}

static inline void
outsl(uint32_t port, const void *addr, int cnt) {
    asm volatile (
c0101673:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0101676:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c0101679:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010167c:	89 cb                	mov    %ecx,%ebx
c010167e:	89 de                	mov    %ebx,%esi
c0101680:	89 c1                	mov    %eax,%ecx
c0101682:	fc                   	cld    
c0101683:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
c0101685:	89 c8                	mov    %ecx,%eax
c0101687:	89 f3                	mov    %esi,%ebx
c0101689:	89 5d d0             	mov    %ebx,-0x30(%ebp)
c010168c:	89 45 cc             	mov    %eax,-0x34(%ebp)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);

    int ret = 0;
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c010168f:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0101693:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c010169a:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010169e:	75 a4                	jne    c0101644 <ide_write_secs+0x1c1>
c01016a0:	eb 01                	jmp    c01016a3 <ide_write_secs+0x220>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
            goto out;
c01016a2:	90                   	nop
        }
        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
    }

out:
    return ret;
c01016a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01016a6:	8d 65 f8             	lea    -0x8(%ebp),%esp
c01016a9:	5b                   	pop    %ebx
c01016aa:	5e                   	pop    %esi
c01016ab:	5d                   	pop    %ebp
c01016ac:	c3                   	ret    

c01016ad <clock_init>:
/* *
 * clock_init - initialize 8253 clock to interrupt 100 times per second,
 * and then enable IRQ_TIMER.
 * */
void
clock_init(void) {
c01016ad:	55                   	push   %ebp
c01016ae:	89 e5                	mov    %esp,%ebp
c01016b0:	83 ec 18             	sub    $0x18,%esp
c01016b3:	66 c7 45 f6 43 00    	movw   $0x43,-0xa(%ebp)
c01016b9:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01016bd:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
c01016c1:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c01016c5:	ee                   	out    %al,(%dx)
c01016c6:	66 c7 45 f4 40 00    	movw   $0x40,-0xc(%ebp)
c01016cc:	c6 45 f0 9c          	movb   $0x9c,-0x10(%ebp)
c01016d0:	0f b6 45 f0          	movzbl -0x10(%ebp),%eax
c01016d4:	0f b7 55 f4          	movzwl -0xc(%ebp),%edx
c01016d8:	ee                   	out    %al,(%dx)
c01016d9:	66 c7 45 f2 40 00    	movw   $0x40,-0xe(%ebp)
c01016df:	c6 45 f1 2e          	movb   $0x2e,-0xf(%ebp)
c01016e3:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c01016e7:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01016eb:	ee                   	out    %al,(%dx)
    outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
    outb(IO_TIMER1, TIMER_DIV(100) % 256);
    outb(IO_TIMER1, TIMER_DIV(100) / 256);

    // initialize time counter 'ticks' to zero
    ticks = 0;
c01016ec:	c7 05 78 30 1b c0 00 	movl   $0x0,0xc01b3078
c01016f3:	00 00 00 

    cprintf("++ setup timer interrupts\n");
c01016f6:	83 ec 0c             	sub    $0xc,%esp
c01016f9:	68 ba bd 10 c0       	push   $0xc010bdba
c01016fe:	e8 94 eb ff ff       	call   c0100297 <cprintf>
c0101703:	83 c4 10             	add    $0x10,%esp
    pic_enable(IRQ_TIMER);
c0101706:	83 ec 0c             	sub    $0xc,%esp
c0101709:	6a 00                	push   $0x0
c010170b:	e8 3b 09 00 00       	call   c010204b <pic_enable>
c0101710:	83 c4 10             	add    $0x10,%esp
}
c0101713:	90                   	nop
c0101714:	c9                   	leave  
c0101715:	c3                   	ret    

c0101716 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0101716:	55                   	push   %ebp
c0101717:	89 e5                	mov    %esp,%ebp
c0101719:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010171c:	9c                   	pushf  
c010171d:	58                   	pop    %eax
c010171e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0101721:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0101724:	25 00 02 00 00       	and    $0x200,%eax
c0101729:	85 c0                	test   %eax,%eax
c010172b:	74 0c                	je     c0101739 <__intr_save+0x23>
        intr_disable();
c010172d:	e8 8a 0a 00 00       	call   c01021bc <intr_disable>
        return 1;
c0101732:	b8 01 00 00 00       	mov    $0x1,%eax
c0101737:	eb 05                	jmp    c010173e <__intr_save+0x28>
    }
    return 0;
c0101739:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010173e:	c9                   	leave  
c010173f:	c3                   	ret    

c0101740 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0101740:	55                   	push   %ebp
c0101741:	89 e5                	mov    %esp,%ebp
c0101743:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0101746:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010174a:	74 05                	je     c0101751 <__intr_restore+0x11>
        intr_enable();
c010174c:	e8 64 0a 00 00       	call   c01021b5 <intr_enable>
    }
}
c0101751:	90                   	nop
c0101752:	c9                   	leave  
c0101753:	c3                   	ret    

c0101754 <delay>:
#include <memlayout.h>
#include <sync.h>

/* stupid I/O delay routine necessitated by historical PC design flaws */
static void
delay(void) {
c0101754:	55                   	push   %ebp
c0101755:	89 e5                	mov    %esp,%ebp
c0101757:	83 ec 10             	sub    $0x10,%esp
c010175a:	66 c7 45 fe 84 00    	movw   $0x84,-0x2(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101760:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c0101764:	89 c2                	mov    %eax,%edx
c0101766:	ec                   	in     (%dx),%al
c0101767:	88 45 f4             	mov    %al,-0xc(%ebp)
c010176a:	66 c7 45 fc 84 00    	movw   $0x84,-0x4(%ebp)
c0101770:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101774:	89 c2                	mov    %eax,%edx
c0101776:	ec                   	in     (%dx),%al
c0101777:	88 45 f5             	mov    %al,-0xb(%ebp)
c010177a:	66 c7 45 fa 84 00    	movw   $0x84,-0x6(%ebp)
c0101780:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0101784:	89 c2                	mov    %eax,%edx
c0101786:	ec                   	in     (%dx),%al
c0101787:	88 45 f6             	mov    %al,-0xa(%ebp)
c010178a:	66 c7 45 f8 84 00    	movw   $0x84,-0x8(%ebp)
c0101790:	0f b7 45 f8          	movzwl -0x8(%ebp),%eax
c0101794:	89 c2                	mov    %eax,%edx
c0101796:	ec                   	in     (%dx),%al
c0101797:	88 45 f7             	mov    %al,-0x9(%ebp)
    inb(0x84);
    inb(0x84);
    inb(0x84);
    inb(0x84);
}
c010179a:	90                   	nop
c010179b:	c9                   	leave  
c010179c:	c3                   	ret    

c010179d <cga_init>:
static uint16_t addr_6845;

/* TEXT-mode CGA/VGA display output */

static void
cga_init(void) {
c010179d:	55                   	push   %ebp
c010179e:	89 e5                	mov    %esp,%ebp
c01017a0:	83 ec 20             	sub    $0x20,%esp
    volatile uint16_t *cp = (uint16_t *)(CGA_BUF + KERNBASE);
c01017a3:	c7 45 fc 00 80 0b c0 	movl   $0xc00b8000,-0x4(%ebp)
    uint16_t was = *cp;
c01017aa:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01017ad:	0f b7 00             	movzwl (%eax),%eax
c01017b0:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    *cp = (uint16_t) 0xA55A;
c01017b4:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01017b7:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
    if (*cp != 0xA55A) {
c01017bc:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01017bf:	0f b7 00             	movzwl (%eax),%eax
c01017c2:	66 3d 5a a5          	cmp    $0xa55a,%ax
c01017c6:	74 12                	je     c01017da <cga_init+0x3d>
        cp = (uint16_t*)(MONO_BUF + KERNBASE);
c01017c8:	c7 45 fc 00 00 0b c0 	movl   $0xc00b0000,-0x4(%ebp)
        addr_6845 = MONO_BASE;
c01017cf:	66 c7 05 26 05 1b c0 	movw   $0x3b4,0xc01b0526
c01017d6:	b4 03 
c01017d8:	eb 13                	jmp    c01017ed <cga_init+0x50>
    } else {
        *cp = was;
c01017da:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01017dd:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c01017e1:	66 89 10             	mov    %dx,(%eax)
        addr_6845 = CGA_BASE;
c01017e4:	66 c7 05 26 05 1b c0 	movw   $0x3d4,0xc01b0526
c01017eb:	d4 03 
    }

    // Extract cursor location
    uint32_t pos;
    outb(addr_6845, 14);
c01017ed:	0f b7 05 26 05 1b c0 	movzwl 0xc01b0526,%eax
c01017f4:	0f b7 c0             	movzwl %ax,%eax
c01017f7:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
c01017fb:	c6 45 ea 0e          	movb   $0xe,-0x16(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01017ff:	0f b6 45 ea          	movzbl -0x16(%ebp),%eax
c0101803:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
c0101807:	ee                   	out    %al,(%dx)
    pos = inb(addr_6845 + 1) << 8;
c0101808:	0f b7 05 26 05 1b c0 	movzwl 0xc01b0526,%eax
c010180f:	83 c0 01             	add    $0x1,%eax
c0101812:	0f b7 c0             	movzwl %ax,%eax
c0101815:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101819:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c010181d:	89 c2                	mov    %eax,%edx
c010181f:	ec                   	in     (%dx),%al
c0101820:	88 45 eb             	mov    %al,-0x15(%ebp)
    return data;
c0101823:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
c0101827:	0f b6 c0             	movzbl %al,%eax
c010182a:	c1 e0 08             	shl    $0x8,%eax
c010182d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    outb(addr_6845, 15);
c0101830:	0f b7 05 26 05 1b c0 	movzwl 0xc01b0526,%eax
c0101837:	0f b7 c0             	movzwl %ax,%eax
c010183a:	66 89 45 f0          	mov    %ax,-0x10(%ebp)
c010183e:	c6 45 ec 0f          	movb   $0xf,-0x14(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101842:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
c0101846:	0f b7 55 f0          	movzwl -0x10(%ebp),%edx
c010184a:	ee                   	out    %al,(%dx)
    pos |= inb(addr_6845 + 1);
c010184b:	0f b7 05 26 05 1b c0 	movzwl 0xc01b0526,%eax
c0101852:	83 c0 01             	add    $0x1,%eax
c0101855:	0f b7 c0             	movzwl %ax,%eax
c0101858:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c010185c:	0f b7 45 ee          	movzwl -0x12(%ebp),%eax
c0101860:	89 c2                	mov    %eax,%edx
c0101862:	ec                   	in     (%dx),%al
c0101863:	88 45 ed             	mov    %al,-0x13(%ebp)
    return data;
c0101866:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c010186a:	0f b6 c0             	movzbl %al,%eax
c010186d:	09 45 f4             	or     %eax,-0xc(%ebp)

    crt_buf = (uint16_t*) cp;
c0101870:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0101873:	a3 20 05 1b c0       	mov    %eax,0xc01b0520
    crt_pos = pos;
c0101878:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010187b:	66 a3 24 05 1b c0    	mov    %ax,0xc01b0524
}
c0101881:	90                   	nop
c0101882:	c9                   	leave  
c0101883:	c3                   	ret    

c0101884 <serial_init>:

static bool serial_exists = 0;

static void
serial_init(void) {
c0101884:	55                   	push   %ebp
c0101885:	89 e5                	mov    %esp,%ebp
c0101887:	83 ec 28             	sub    $0x28,%esp
c010188a:	66 c7 45 f6 fa 03    	movw   $0x3fa,-0xa(%ebp)
c0101890:	c6 45 da 00          	movb   $0x0,-0x26(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101894:	0f b6 45 da          	movzbl -0x26(%ebp),%eax
c0101898:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c010189c:	ee                   	out    %al,(%dx)
c010189d:	66 c7 45 f4 fb 03    	movw   $0x3fb,-0xc(%ebp)
c01018a3:	c6 45 db 80          	movb   $0x80,-0x25(%ebp)
c01018a7:	0f b6 45 db          	movzbl -0x25(%ebp),%eax
c01018ab:	0f b7 55 f4          	movzwl -0xc(%ebp),%edx
c01018af:	ee                   	out    %al,(%dx)
c01018b0:	66 c7 45 f2 f8 03    	movw   $0x3f8,-0xe(%ebp)
c01018b6:	c6 45 dc 0c          	movb   $0xc,-0x24(%ebp)
c01018ba:	0f b6 45 dc          	movzbl -0x24(%ebp),%eax
c01018be:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01018c2:	ee                   	out    %al,(%dx)
c01018c3:	66 c7 45 f0 f9 03    	movw   $0x3f9,-0x10(%ebp)
c01018c9:	c6 45 dd 00          	movb   $0x0,-0x23(%ebp)
c01018cd:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c01018d1:	0f b7 55 f0          	movzwl -0x10(%ebp),%edx
c01018d5:	ee                   	out    %al,(%dx)
c01018d6:	66 c7 45 ee fb 03    	movw   $0x3fb,-0x12(%ebp)
c01018dc:	c6 45 de 03          	movb   $0x3,-0x22(%ebp)
c01018e0:	0f b6 45 de          	movzbl -0x22(%ebp),%eax
c01018e4:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c01018e8:	ee                   	out    %al,(%dx)
c01018e9:	66 c7 45 ec fc 03    	movw   $0x3fc,-0x14(%ebp)
c01018ef:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
c01018f3:	0f b6 45 df          	movzbl -0x21(%ebp),%eax
c01018f7:	0f b7 55 ec          	movzwl -0x14(%ebp),%edx
c01018fb:	ee                   	out    %al,(%dx)
c01018fc:	66 c7 45 ea f9 03    	movw   $0x3f9,-0x16(%ebp)
c0101902:	c6 45 e0 01          	movb   $0x1,-0x20(%ebp)
c0101906:	0f b6 45 e0          	movzbl -0x20(%ebp),%eax
c010190a:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c010190e:	ee                   	out    %al,(%dx)
c010190f:	66 c7 45 e8 fd 03    	movw   $0x3fd,-0x18(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101915:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
c0101919:	89 c2                	mov    %eax,%edx
c010191b:	ec                   	in     (%dx),%al
c010191c:	88 45 e1             	mov    %al,-0x1f(%ebp)
    return data;
c010191f:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
    // Enable rcv interrupts
    outb(COM1 + COM_IER, COM_IER_RDI);

    // Clear any preexisting overrun indications and interrupts
    // Serial port doesn't exist if COM_LSR returns 0xFF
    serial_exists = (inb(COM1 + COM_LSR) != 0xFF);
c0101923:	3c ff                	cmp    $0xff,%al
c0101925:	0f 95 c0             	setne  %al
c0101928:	0f b6 c0             	movzbl %al,%eax
c010192b:	a3 28 05 1b c0       	mov    %eax,0xc01b0528
c0101930:	66 c7 45 e6 fa 03    	movw   $0x3fa,-0x1a(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101936:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c010193a:	89 c2                	mov    %eax,%edx
c010193c:	ec                   	in     (%dx),%al
c010193d:	88 45 e2             	mov    %al,-0x1e(%ebp)
c0101940:	66 c7 45 e4 f8 03    	movw   $0x3f8,-0x1c(%ebp)
c0101946:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
c010194a:	89 c2                	mov    %eax,%edx
c010194c:	ec                   	in     (%dx),%al
c010194d:	88 45 e3             	mov    %al,-0x1d(%ebp)
    (void) inb(COM1+COM_IIR);
    (void) inb(COM1+COM_RX);

    if (serial_exists) {
c0101950:	a1 28 05 1b c0       	mov    0xc01b0528,%eax
c0101955:	85 c0                	test   %eax,%eax
c0101957:	74 0d                	je     c0101966 <serial_init+0xe2>
        pic_enable(IRQ_COM1);
c0101959:	83 ec 0c             	sub    $0xc,%esp
c010195c:	6a 04                	push   $0x4
c010195e:	e8 e8 06 00 00       	call   c010204b <pic_enable>
c0101963:	83 c4 10             	add    $0x10,%esp
    }
}
c0101966:	90                   	nop
c0101967:	c9                   	leave  
c0101968:	c3                   	ret    

c0101969 <lpt_putc_sub>:

static void
lpt_putc_sub(int c) {
c0101969:	55                   	push   %ebp
c010196a:	89 e5                	mov    %esp,%ebp
c010196c:	83 ec 10             	sub    $0x10,%esp
    int i;
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c010196f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0101976:	eb 09                	jmp    c0101981 <lpt_putc_sub+0x18>
        delay();
c0101978:	e8 d7 fd ff ff       	call   c0101754 <delay>
}

static void
lpt_putc_sub(int c) {
    int i;
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c010197d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0101981:	66 c7 45 f4 79 03    	movw   $0x379,-0xc(%ebp)
c0101987:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c010198b:	89 c2                	mov    %eax,%edx
c010198d:	ec                   	in     (%dx),%al
c010198e:	88 45 f3             	mov    %al,-0xd(%ebp)
    return data;
c0101991:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101995:	84 c0                	test   %al,%al
c0101997:	78 09                	js     c01019a2 <lpt_putc_sub+0x39>
c0101999:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
c01019a0:	7e d6                	jle    c0101978 <lpt_putc_sub+0xf>
        delay();
    }
    outb(LPTPORT + 0, c);
c01019a2:	8b 45 08             	mov    0x8(%ebp),%eax
c01019a5:	0f b6 c0             	movzbl %al,%eax
c01019a8:	66 c7 45 f8 78 03    	movw   $0x378,-0x8(%ebp)
c01019ae:	88 45 f0             	mov    %al,-0x10(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01019b1:	0f b6 45 f0          	movzbl -0x10(%ebp),%eax
c01019b5:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
c01019b9:	ee                   	out    %al,(%dx)
c01019ba:	66 c7 45 f6 7a 03    	movw   $0x37a,-0xa(%ebp)
c01019c0:	c6 45 f1 0d          	movb   $0xd,-0xf(%ebp)
c01019c4:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c01019c8:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c01019cc:	ee                   	out    %al,(%dx)
c01019cd:	66 c7 45 fa 7a 03    	movw   $0x37a,-0x6(%ebp)
c01019d3:	c6 45 f2 08          	movb   $0x8,-0xe(%ebp)
c01019d7:	0f b6 45 f2          	movzbl -0xe(%ebp),%eax
c01019db:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c01019df:	ee                   	out    %al,(%dx)
    outb(LPTPORT + 2, 0x08 | 0x04 | 0x01);
    outb(LPTPORT + 2, 0x08);
}
c01019e0:	90                   	nop
c01019e1:	c9                   	leave  
c01019e2:	c3                   	ret    

c01019e3 <lpt_putc>:

/* lpt_putc - copy console output to parallel port */
static void
lpt_putc(int c) {
c01019e3:	55                   	push   %ebp
c01019e4:	89 e5                	mov    %esp,%ebp
    if (c != '\b') {
c01019e6:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c01019ea:	74 0d                	je     c01019f9 <lpt_putc+0x16>
        lpt_putc_sub(c);
c01019ec:	ff 75 08             	pushl  0x8(%ebp)
c01019ef:	e8 75 ff ff ff       	call   c0101969 <lpt_putc_sub>
c01019f4:	83 c4 04             	add    $0x4,%esp
    else {
        lpt_putc_sub('\b');
        lpt_putc_sub(' ');
        lpt_putc_sub('\b');
    }
}
c01019f7:	eb 1e                	jmp    c0101a17 <lpt_putc+0x34>
lpt_putc(int c) {
    if (c != '\b') {
        lpt_putc_sub(c);
    }
    else {
        lpt_putc_sub('\b');
c01019f9:	6a 08                	push   $0x8
c01019fb:	e8 69 ff ff ff       	call   c0101969 <lpt_putc_sub>
c0101a00:	83 c4 04             	add    $0x4,%esp
        lpt_putc_sub(' ');
c0101a03:	6a 20                	push   $0x20
c0101a05:	e8 5f ff ff ff       	call   c0101969 <lpt_putc_sub>
c0101a0a:	83 c4 04             	add    $0x4,%esp
        lpt_putc_sub('\b');
c0101a0d:	6a 08                	push   $0x8
c0101a0f:	e8 55 ff ff ff       	call   c0101969 <lpt_putc_sub>
c0101a14:	83 c4 04             	add    $0x4,%esp
    }
}
c0101a17:	90                   	nop
c0101a18:	c9                   	leave  
c0101a19:	c3                   	ret    

c0101a1a <cga_putc>:

/* cga_putc - print character to console */
static void
cga_putc(int c) {
c0101a1a:	55                   	push   %ebp
c0101a1b:	89 e5                	mov    %esp,%ebp
c0101a1d:	53                   	push   %ebx
c0101a1e:	83 ec 14             	sub    $0x14,%esp
    // set black on white
    if (!(c & ~0xFF)) {
c0101a21:	8b 45 08             	mov    0x8(%ebp),%eax
c0101a24:	b0 00                	mov    $0x0,%al
c0101a26:	85 c0                	test   %eax,%eax
c0101a28:	75 07                	jne    c0101a31 <cga_putc+0x17>
        c |= 0x0700;
c0101a2a:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)
    }

    switch (c & 0xff) {
c0101a31:	8b 45 08             	mov    0x8(%ebp),%eax
c0101a34:	0f b6 c0             	movzbl %al,%eax
c0101a37:	83 f8 0a             	cmp    $0xa,%eax
c0101a3a:	74 4e                	je     c0101a8a <cga_putc+0x70>
c0101a3c:	83 f8 0d             	cmp    $0xd,%eax
c0101a3f:	74 59                	je     c0101a9a <cga_putc+0x80>
c0101a41:	83 f8 08             	cmp    $0x8,%eax
c0101a44:	0f 85 8a 00 00 00    	jne    c0101ad4 <cga_putc+0xba>
    case '\b':
        if (crt_pos > 0) {
c0101a4a:	0f b7 05 24 05 1b c0 	movzwl 0xc01b0524,%eax
c0101a51:	66 85 c0             	test   %ax,%ax
c0101a54:	0f 84 a0 00 00 00    	je     c0101afa <cga_putc+0xe0>
            crt_pos --;
c0101a5a:	0f b7 05 24 05 1b c0 	movzwl 0xc01b0524,%eax
c0101a61:	83 e8 01             	sub    $0x1,%eax
c0101a64:	66 a3 24 05 1b c0    	mov    %ax,0xc01b0524
            crt_buf[crt_pos] = (c & ~0xff) | ' ';
c0101a6a:	a1 20 05 1b c0       	mov    0xc01b0520,%eax
c0101a6f:	0f b7 15 24 05 1b c0 	movzwl 0xc01b0524,%edx
c0101a76:	0f b7 d2             	movzwl %dx,%edx
c0101a79:	01 d2                	add    %edx,%edx
c0101a7b:	01 d0                	add    %edx,%eax
c0101a7d:	8b 55 08             	mov    0x8(%ebp),%edx
c0101a80:	b2 00                	mov    $0x0,%dl
c0101a82:	83 ca 20             	or     $0x20,%edx
c0101a85:	66 89 10             	mov    %dx,(%eax)
        }
        break;
c0101a88:	eb 70                	jmp    c0101afa <cga_putc+0xe0>
    case '\n':
        crt_pos += CRT_COLS;
c0101a8a:	0f b7 05 24 05 1b c0 	movzwl 0xc01b0524,%eax
c0101a91:	83 c0 50             	add    $0x50,%eax
c0101a94:	66 a3 24 05 1b c0    	mov    %ax,0xc01b0524
    case '\r':
        crt_pos -= (crt_pos % CRT_COLS);
c0101a9a:	0f b7 1d 24 05 1b c0 	movzwl 0xc01b0524,%ebx
c0101aa1:	0f b7 0d 24 05 1b c0 	movzwl 0xc01b0524,%ecx
c0101aa8:	0f b7 c1             	movzwl %cx,%eax
c0101aab:	69 c0 cd cc 00 00    	imul   $0xcccd,%eax,%eax
c0101ab1:	c1 e8 10             	shr    $0x10,%eax
c0101ab4:	89 c2                	mov    %eax,%edx
c0101ab6:	66 c1 ea 06          	shr    $0x6,%dx
c0101aba:	89 d0                	mov    %edx,%eax
c0101abc:	c1 e0 02             	shl    $0x2,%eax
c0101abf:	01 d0                	add    %edx,%eax
c0101ac1:	c1 e0 04             	shl    $0x4,%eax
c0101ac4:	29 c1                	sub    %eax,%ecx
c0101ac6:	89 ca                	mov    %ecx,%edx
c0101ac8:	89 d8                	mov    %ebx,%eax
c0101aca:	29 d0                	sub    %edx,%eax
c0101acc:	66 a3 24 05 1b c0    	mov    %ax,0xc01b0524
        break;
c0101ad2:	eb 27                	jmp    c0101afb <cga_putc+0xe1>
    default:
        crt_buf[crt_pos ++] = c;     // write the character
c0101ad4:	8b 0d 20 05 1b c0    	mov    0xc01b0520,%ecx
c0101ada:	0f b7 05 24 05 1b c0 	movzwl 0xc01b0524,%eax
c0101ae1:	8d 50 01             	lea    0x1(%eax),%edx
c0101ae4:	66 89 15 24 05 1b c0 	mov    %dx,0xc01b0524
c0101aeb:	0f b7 c0             	movzwl %ax,%eax
c0101aee:	01 c0                	add    %eax,%eax
c0101af0:	01 c8                	add    %ecx,%eax
c0101af2:	8b 55 08             	mov    0x8(%ebp),%edx
c0101af5:	66 89 10             	mov    %dx,(%eax)
        break;
c0101af8:	eb 01                	jmp    c0101afb <cga_putc+0xe1>
    case '\b':
        if (crt_pos > 0) {
            crt_pos --;
            crt_buf[crt_pos] = (c & ~0xff) | ' ';
        }
        break;
c0101afa:	90                   	nop
        crt_buf[crt_pos ++] = c;     // write the character
        break;
    }

    // What is the purpose of this?
    if (crt_pos >= CRT_SIZE) {
c0101afb:	0f b7 05 24 05 1b c0 	movzwl 0xc01b0524,%eax
c0101b02:	66 3d cf 07          	cmp    $0x7cf,%ax
c0101b06:	76 59                	jbe    c0101b61 <cga_putc+0x147>
        int i;
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
c0101b08:	a1 20 05 1b c0       	mov    0xc01b0520,%eax
c0101b0d:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
c0101b13:	a1 20 05 1b c0       	mov    0xc01b0520,%eax
c0101b18:	83 ec 04             	sub    $0x4,%esp
c0101b1b:	68 00 0f 00 00       	push   $0xf00
c0101b20:	52                   	push   %edx
c0101b21:	50                   	push   %eax
c0101b22:	e8 16 96 00 00       	call   c010b13d <memmove>
c0101b27:	83 c4 10             	add    $0x10,%esp
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c0101b2a:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
c0101b31:	eb 15                	jmp    c0101b48 <cga_putc+0x12e>
            crt_buf[i] = 0x0700 | ' ';
c0101b33:	a1 20 05 1b c0       	mov    0xc01b0520,%eax
c0101b38:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0101b3b:	01 d2                	add    %edx,%edx
c0101b3d:	01 d0                	add    %edx,%eax
c0101b3f:	66 c7 00 20 07       	movw   $0x720,(%eax)

    // What is the purpose of this?
    if (crt_pos >= CRT_SIZE) {
        int i;
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c0101b44:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0101b48:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
c0101b4f:	7e e2                	jle    c0101b33 <cga_putc+0x119>
            crt_buf[i] = 0x0700 | ' ';
        }
        crt_pos -= CRT_COLS;
c0101b51:	0f b7 05 24 05 1b c0 	movzwl 0xc01b0524,%eax
c0101b58:	83 e8 50             	sub    $0x50,%eax
c0101b5b:	66 a3 24 05 1b c0    	mov    %ax,0xc01b0524
    }

    // move that little blinky thing
    outb(addr_6845, 14);
c0101b61:	0f b7 05 26 05 1b c0 	movzwl 0xc01b0526,%eax
c0101b68:	0f b7 c0             	movzwl %ax,%eax
c0101b6b:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0101b6f:	c6 45 e8 0e          	movb   $0xe,-0x18(%ebp)
c0101b73:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
c0101b77:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101b7b:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos >> 8);
c0101b7c:	0f b7 05 24 05 1b c0 	movzwl 0xc01b0524,%eax
c0101b83:	66 c1 e8 08          	shr    $0x8,%ax
c0101b87:	0f b6 c0             	movzbl %al,%eax
c0101b8a:	0f b7 15 26 05 1b c0 	movzwl 0xc01b0526,%edx
c0101b91:	83 c2 01             	add    $0x1,%edx
c0101b94:	0f b7 d2             	movzwl %dx,%edx
c0101b97:	66 89 55 f0          	mov    %dx,-0x10(%ebp)
c0101b9b:	88 45 e9             	mov    %al,-0x17(%ebp)
c0101b9e:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101ba2:	0f b7 55 f0          	movzwl -0x10(%ebp),%edx
c0101ba6:	ee                   	out    %al,(%dx)
    outb(addr_6845, 15);
c0101ba7:	0f b7 05 26 05 1b c0 	movzwl 0xc01b0526,%eax
c0101bae:	0f b7 c0             	movzwl %ax,%eax
c0101bb1:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
c0101bb5:	c6 45 ea 0f          	movb   $0xf,-0x16(%ebp)
c0101bb9:	0f b6 45 ea          	movzbl -0x16(%ebp),%eax
c0101bbd:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101bc1:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos);
c0101bc2:	0f b7 05 24 05 1b c0 	movzwl 0xc01b0524,%eax
c0101bc9:	0f b6 c0             	movzbl %al,%eax
c0101bcc:	0f b7 15 26 05 1b c0 	movzwl 0xc01b0526,%edx
c0101bd3:	83 c2 01             	add    $0x1,%edx
c0101bd6:	0f b7 d2             	movzwl %dx,%edx
c0101bd9:	66 89 55 ec          	mov    %dx,-0x14(%ebp)
c0101bdd:	88 45 eb             	mov    %al,-0x15(%ebp)
c0101be0:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
c0101be4:	0f b7 55 ec          	movzwl -0x14(%ebp),%edx
c0101be8:	ee                   	out    %al,(%dx)
}
c0101be9:	90                   	nop
c0101bea:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0101bed:	c9                   	leave  
c0101bee:	c3                   	ret    

c0101bef <serial_putc_sub>:

static void
serial_putc_sub(int c) {
c0101bef:	55                   	push   %ebp
c0101bf0:	89 e5                	mov    %esp,%ebp
c0101bf2:	83 ec 10             	sub    $0x10,%esp
    int i;
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c0101bf5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0101bfc:	eb 09                	jmp    c0101c07 <serial_putc_sub+0x18>
        delay();
c0101bfe:	e8 51 fb ff ff       	call   c0101754 <delay>
}

static void
serial_putc_sub(int c) {
    int i;
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c0101c03:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0101c07:	66 c7 45 f8 fd 03    	movw   $0x3fd,-0x8(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101c0d:	0f b7 45 f8          	movzwl -0x8(%ebp),%eax
c0101c11:	89 c2                	mov    %eax,%edx
c0101c13:	ec                   	in     (%dx),%al
c0101c14:	88 45 f7             	mov    %al,-0x9(%ebp)
    return data;
c0101c17:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0101c1b:	0f b6 c0             	movzbl %al,%eax
c0101c1e:	83 e0 20             	and    $0x20,%eax
c0101c21:	85 c0                	test   %eax,%eax
c0101c23:	75 09                	jne    c0101c2e <serial_putc_sub+0x3f>
c0101c25:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
c0101c2c:	7e d0                	jle    c0101bfe <serial_putc_sub+0xf>
        delay();
    }
    outb(COM1 + COM_TX, c);
c0101c2e:	8b 45 08             	mov    0x8(%ebp),%eax
c0101c31:	0f b6 c0             	movzbl %al,%eax
c0101c34:	66 c7 45 fa f8 03    	movw   $0x3f8,-0x6(%ebp)
c0101c3a:	88 45 f6             	mov    %al,-0xa(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101c3d:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
c0101c41:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c0101c45:	ee                   	out    %al,(%dx)
}
c0101c46:	90                   	nop
c0101c47:	c9                   	leave  
c0101c48:	c3                   	ret    

c0101c49 <serial_putc>:

/* serial_putc - print character to serial port */
static void
serial_putc(int c) {
c0101c49:	55                   	push   %ebp
c0101c4a:	89 e5                	mov    %esp,%ebp
    if (c != '\b') {
c0101c4c:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c0101c50:	74 0d                	je     c0101c5f <serial_putc+0x16>
        serial_putc_sub(c);
c0101c52:	ff 75 08             	pushl  0x8(%ebp)
c0101c55:	e8 95 ff ff ff       	call   c0101bef <serial_putc_sub>
c0101c5a:	83 c4 04             	add    $0x4,%esp
    else {
        serial_putc_sub('\b');
        serial_putc_sub(' ');
        serial_putc_sub('\b');
    }
}
c0101c5d:	eb 1e                	jmp    c0101c7d <serial_putc+0x34>
serial_putc(int c) {
    if (c != '\b') {
        serial_putc_sub(c);
    }
    else {
        serial_putc_sub('\b');
c0101c5f:	6a 08                	push   $0x8
c0101c61:	e8 89 ff ff ff       	call   c0101bef <serial_putc_sub>
c0101c66:	83 c4 04             	add    $0x4,%esp
        serial_putc_sub(' ');
c0101c69:	6a 20                	push   $0x20
c0101c6b:	e8 7f ff ff ff       	call   c0101bef <serial_putc_sub>
c0101c70:	83 c4 04             	add    $0x4,%esp
        serial_putc_sub('\b');
c0101c73:	6a 08                	push   $0x8
c0101c75:	e8 75 ff ff ff       	call   c0101bef <serial_putc_sub>
c0101c7a:	83 c4 04             	add    $0x4,%esp
    }
}
c0101c7d:	90                   	nop
c0101c7e:	c9                   	leave  
c0101c7f:	c3                   	ret    

c0101c80 <cons_intr>:
/* *
 * cons_intr - called by device interrupt routines to feed input
 * characters into the circular console input buffer.
 * */
static void
cons_intr(int (*proc)(void)) {
c0101c80:	55                   	push   %ebp
c0101c81:	89 e5                	mov    %esp,%ebp
c0101c83:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = (*proc)()) != -1) {
c0101c86:	eb 33                	jmp    c0101cbb <cons_intr+0x3b>
        if (c != 0) {
c0101c88:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0101c8c:	74 2d                	je     c0101cbb <cons_intr+0x3b>
            cons.buf[cons.wpos ++] = c;
c0101c8e:	a1 44 07 1b c0       	mov    0xc01b0744,%eax
c0101c93:	8d 50 01             	lea    0x1(%eax),%edx
c0101c96:	89 15 44 07 1b c0    	mov    %edx,0xc01b0744
c0101c9c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0101c9f:	88 90 40 05 1b c0    	mov    %dl,-0x3fe4fac0(%eax)
            if (cons.wpos == CONSBUFSIZE) {
c0101ca5:	a1 44 07 1b c0       	mov    0xc01b0744,%eax
c0101caa:	3d 00 02 00 00       	cmp    $0x200,%eax
c0101caf:	75 0a                	jne    c0101cbb <cons_intr+0x3b>
                cons.wpos = 0;
c0101cb1:	c7 05 44 07 1b c0 00 	movl   $0x0,0xc01b0744
c0101cb8:	00 00 00 
 * characters into the circular console input buffer.
 * */
static void
cons_intr(int (*proc)(void)) {
    int c;
    while ((c = (*proc)()) != -1) {
c0101cbb:	8b 45 08             	mov    0x8(%ebp),%eax
c0101cbe:	ff d0                	call   *%eax
c0101cc0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0101cc3:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
c0101cc7:	75 bf                	jne    c0101c88 <cons_intr+0x8>
            if (cons.wpos == CONSBUFSIZE) {
                cons.wpos = 0;
            }
        }
    }
}
c0101cc9:	90                   	nop
c0101cca:	c9                   	leave  
c0101ccb:	c3                   	ret    

c0101ccc <serial_proc_data>:

/* serial_proc_data - get data from serial port */
static int
serial_proc_data(void) {
c0101ccc:	55                   	push   %ebp
c0101ccd:	89 e5                	mov    %esp,%ebp
c0101ccf:	83 ec 10             	sub    $0x10,%esp
c0101cd2:	66 c7 45 f8 fd 03    	movw   $0x3fd,-0x8(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101cd8:	0f b7 45 f8          	movzwl -0x8(%ebp),%eax
c0101cdc:	89 c2                	mov    %eax,%edx
c0101cde:	ec                   	in     (%dx),%al
c0101cdf:	88 45 f7             	mov    %al,-0x9(%ebp)
    return data;
c0101ce2:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
    if (!(inb(COM1 + COM_LSR) & COM_LSR_DATA)) {
c0101ce6:	0f b6 c0             	movzbl %al,%eax
c0101ce9:	83 e0 01             	and    $0x1,%eax
c0101cec:	85 c0                	test   %eax,%eax
c0101cee:	75 07                	jne    c0101cf7 <serial_proc_data+0x2b>
        return -1;
c0101cf0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101cf5:	eb 2a                	jmp    c0101d21 <serial_proc_data+0x55>
c0101cf7:	66 c7 45 fa f8 03    	movw   $0x3f8,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101cfd:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0101d01:	89 c2                	mov    %eax,%edx
c0101d03:	ec                   	in     (%dx),%al
c0101d04:	88 45 f6             	mov    %al,-0xa(%ebp)
    return data;
c0101d07:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
    }
    int c = inb(COM1 + COM_RX);
c0101d0b:	0f b6 c0             	movzbl %al,%eax
c0101d0e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (c == 127) {
c0101d11:	83 7d fc 7f          	cmpl   $0x7f,-0x4(%ebp)
c0101d15:	75 07                	jne    c0101d1e <serial_proc_data+0x52>
        c = '\b';
c0101d17:	c7 45 fc 08 00 00 00 	movl   $0x8,-0x4(%ebp)
    }
    return c;
c0101d1e:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0101d21:	c9                   	leave  
c0101d22:	c3                   	ret    

c0101d23 <serial_intr>:

/* serial_intr - try to feed input characters from serial port */
void
serial_intr(void) {
c0101d23:	55                   	push   %ebp
c0101d24:	89 e5                	mov    %esp,%ebp
c0101d26:	83 ec 08             	sub    $0x8,%esp
    if (serial_exists) {
c0101d29:	a1 28 05 1b c0       	mov    0xc01b0528,%eax
c0101d2e:	85 c0                	test   %eax,%eax
c0101d30:	74 10                	je     c0101d42 <serial_intr+0x1f>
        cons_intr(serial_proc_data);
c0101d32:	83 ec 0c             	sub    $0xc,%esp
c0101d35:	68 cc 1c 10 c0       	push   $0xc0101ccc
c0101d3a:	e8 41 ff ff ff       	call   c0101c80 <cons_intr>
c0101d3f:	83 c4 10             	add    $0x10,%esp
    }
}
c0101d42:	90                   	nop
c0101d43:	c9                   	leave  
c0101d44:	c3                   	ret    

c0101d45 <kbd_proc_data>:
 *
 * The kbd_proc_data() function gets data from the keyboard.
 * If we finish a character, return it, else 0. And return -1 if no data.
 * */
static int
kbd_proc_data(void) {
c0101d45:	55                   	push   %ebp
c0101d46:	89 e5                	mov    %esp,%ebp
c0101d48:	83 ec 18             	sub    $0x18,%esp
c0101d4b:	66 c7 45 ec 64 00    	movw   $0x64,-0x14(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101d51:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0101d55:	89 c2                	mov    %eax,%edx
c0101d57:	ec                   	in     (%dx),%al
c0101d58:	88 45 eb             	mov    %al,-0x15(%ebp)
    return data;
c0101d5b:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
    int c;
    uint8_t data;
    static uint32_t shift;

    if ((inb(KBSTATP) & KBS_DIB) == 0) {
c0101d5f:	0f b6 c0             	movzbl %al,%eax
c0101d62:	83 e0 01             	and    $0x1,%eax
c0101d65:	85 c0                	test   %eax,%eax
c0101d67:	75 0a                	jne    c0101d73 <kbd_proc_data+0x2e>
        return -1;
c0101d69:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101d6e:	e9 5d 01 00 00       	jmp    c0101ed0 <kbd_proc_data+0x18b>
c0101d73:	66 c7 45 f0 60 00    	movw   $0x60,-0x10(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101d79:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c0101d7d:	89 c2                	mov    %eax,%edx
c0101d7f:	ec                   	in     (%dx),%al
c0101d80:	88 45 ea             	mov    %al,-0x16(%ebp)
    return data;
c0101d83:	0f b6 45 ea          	movzbl -0x16(%ebp),%eax
    }

    data = inb(KBDATAP);
c0101d87:	88 45 f3             	mov    %al,-0xd(%ebp)

    if (data == 0xE0) {
c0101d8a:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
c0101d8e:	75 17                	jne    c0101da7 <kbd_proc_data+0x62>
        // E0 escape character
        shift |= E0ESC;
c0101d90:	a1 48 07 1b c0       	mov    0xc01b0748,%eax
c0101d95:	83 c8 40             	or     $0x40,%eax
c0101d98:	a3 48 07 1b c0       	mov    %eax,0xc01b0748
        return 0;
c0101d9d:	b8 00 00 00 00       	mov    $0x0,%eax
c0101da2:	e9 29 01 00 00       	jmp    c0101ed0 <kbd_proc_data+0x18b>
    } else if (data & 0x80) {
c0101da7:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101dab:	84 c0                	test   %al,%al
c0101dad:	79 47                	jns    c0101df6 <kbd_proc_data+0xb1>
        // Key released
        data = (shift & E0ESC ? data : data & 0x7F);
c0101daf:	a1 48 07 1b c0       	mov    0xc01b0748,%eax
c0101db4:	83 e0 40             	and    $0x40,%eax
c0101db7:	85 c0                	test   %eax,%eax
c0101db9:	75 09                	jne    c0101dc4 <kbd_proc_data+0x7f>
c0101dbb:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101dbf:	83 e0 7f             	and    $0x7f,%eax
c0101dc2:	eb 04                	jmp    c0101dc8 <kbd_proc_data+0x83>
c0101dc4:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101dc8:	88 45 f3             	mov    %al,-0xd(%ebp)
        shift &= ~(shiftcode[data] | E0ESC);
c0101dcb:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101dcf:	0f b6 80 40 c0 12 c0 	movzbl -0x3fed3fc0(%eax),%eax
c0101dd6:	83 c8 40             	or     $0x40,%eax
c0101dd9:	0f b6 c0             	movzbl %al,%eax
c0101ddc:	f7 d0                	not    %eax
c0101dde:	89 c2                	mov    %eax,%edx
c0101de0:	a1 48 07 1b c0       	mov    0xc01b0748,%eax
c0101de5:	21 d0                	and    %edx,%eax
c0101de7:	a3 48 07 1b c0       	mov    %eax,0xc01b0748
        return 0;
c0101dec:	b8 00 00 00 00       	mov    $0x0,%eax
c0101df1:	e9 da 00 00 00       	jmp    c0101ed0 <kbd_proc_data+0x18b>
    } else if (shift & E0ESC) {
c0101df6:	a1 48 07 1b c0       	mov    0xc01b0748,%eax
c0101dfb:	83 e0 40             	and    $0x40,%eax
c0101dfe:	85 c0                	test   %eax,%eax
c0101e00:	74 11                	je     c0101e13 <kbd_proc_data+0xce>
        // Last character was an E0 escape; or with 0x80
        data |= 0x80;
c0101e02:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
        shift &= ~E0ESC;
c0101e06:	a1 48 07 1b c0       	mov    0xc01b0748,%eax
c0101e0b:	83 e0 bf             	and    $0xffffffbf,%eax
c0101e0e:	a3 48 07 1b c0       	mov    %eax,0xc01b0748
    }

    shift |= shiftcode[data];
c0101e13:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101e17:	0f b6 80 40 c0 12 c0 	movzbl -0x3fed3fc0(%eax),%eax
c0101e1e:	0f b6 d0             	movzbl %al,%edx
c0101e21:	a1 48 07 1b c0       	mov    0xc01b0748,%eax
c0101e26:	09 d0                	or     %edx,%eax
c0101e28:	a3 48 07 1b c0       	mov    %eax,0xc01b0748
    shift ^= togglecode[data];
c0101e2d:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101e31:	0f b6 80 40 c1 12 c0 	movzbl -0x3fed3ec0(%eax),%eax
c0101e38:	0f b6 d0             	movzbl %al,%edx
c0101e3b:	a1 48 07 1b c0       	mov    0xc01b0748,%eax
c0101e40:	31 d0                	xor    %edx,%eax
c0101e42:	a3 48 07 1b c0       	mov    %eax,0xc01b0748

    c = charcode[shift & (CTL | SHIFT)][data];
c0101e47:	a1 48 07 1b c0       	mov    0xc01b0748,%eax
c0101e4c:	83 e0 03             	and    $0x3,%eax
c0101e4f:	8b 14 85 40 c5 12 c0 	mov    -0x3fed3ac0(,%eax,4),%edx
c0101e56:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101e5a:	01 d0                	add    %edx,%eax
c0101e5c:	0f b6 00             	movzbl (%eax),%eax
c0101e5f:	0f b6 c0             	movzbl %al,%eax
c0101e62:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (shift & CAPSLOCK) {
c0101e65:	a1 48 07 1b c0       	mov    0xc01b0748,%eax
c0101e6a:	83 e0 08             	and    $0x8,%eax
c0101e6d:	85 c0                	test   %eax,%eax
c0101e6f:	74 22                	je     c0101e93 <kbd_proc_data+0x14e>
        if ('a' <= c && c <= 'z')
c0101e71:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
c0101e75:	7e 0c                	jle    c0101e83 <kbd_proc_data+0x13e>
c0101e77:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
c0101e7b:	7f 06                	jg     c0101e83 <kbd_proc_data+0x13e>
            c += 'A' - 'a';
c0101e7d:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
c0101e81:	eb 10                	jmp    c0101e93 <kbd_proc_data+0x14e>
        else if ('A' <= c && c <= 'Z')
c0101e83:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
c0101e87:	7e 0a                	jle    c0101e93 <kbd_proc_data+0x14e>
c0101e89:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
c0101e8d:	7f 04                	jg     c0101e93 <kbd_proc_data+0x14e>
            c += 'a' - 'A';
c0101e8f:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
    }

    // Process special keys
    // Ctrl-Alt-Del: reboot
    if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
c0101e93:	a1 48 07 1b c0       	mov    0xc01b0748,%eax
c0101e98:	f7 d0                	not    %eax
c0101e9a:	83 e0 06             	and    $0x6,%eax
c0101e9d:	85 c0                	test   %eax,%eax
c0101e9f:	75 2c                	jne    c0101ecd <kbd_proc_data+0x188>
c0101ea1:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
c0101ea8:	75 23                	jne    c0101ecd <kbd_proc_data+0x188>
        cprintf("Rebooting!\n");
c0101eaa:	83 ec 0c             	sub    $0xc,%esp
c0101ead:	68 d5 bd 10 c0       	push   $0xc010bdd5
c0101eb2:	e8 e0 e3 ff ff       	call   c0100297 <cprintf>
c0101eb7:	83 c4 10             	add    $0x10,%esp
c0101eba:	66 c7 45 ee 92 00    	movw   $0x92,-0x12(%ebp)
c0101ec0:	c6 45 e9 03          	movb   $0x3,-0x17(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101ec4:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101ec8:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101ecc:	ee                   	out    %al,(%dx)
        outb(0x92, 0x3); // courtesy of Chris Frost
    }
    return c;
c0101ecd:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0101ed0:	c9                   	leave  
c0101ed1:	c3                   	ret    

c0101ed2 <kbd_intr>:

/* kbd_intr - try to feed input characters from keyboard */
static void
kbd_intr(void) {
c0101ed2:	55                   	push   %ebp
c0101ed3:	89 e5                	mov    %esp,%ebp
c0101ed5:	83 ec 08             	sub    $0x8,%esp
    cons_intr(kbd_proc_data);
c0101ed8:	83 ec 0c             	sub    $0xc,%esp
c0101edb:	68 45 1d 10 c0       	push   $0xc0101d45
c0101ee0:	e8 9b fd ff ff       	call   c0101c80 <cons_intr>
c0101ee5:	83 c4 10             	add    $0x10,%esp
}
c0101ee8:	90                   	nop
c0101ee9:	c9                   	leave  
c0101eea:	c3                   	ret    

c0101eeb <kbd_init>:

static void
kbd_init(void) {
c0101eeb:	55                   	push   %ebp
c0101eec:	89 e5                	mov    %esp,%ebp
c0101eee:	83 ec 08             	sub    $0x8,%esp
    // drain the kbd buffer
    kbd_intr();
c0101ef1:	e8 dc ff ff ff       	call   c0101ed2 <kbd_intr>
    pic_enable(IRQ_KBD);
c0101ef6:	83 ec 0c             	sub    $0xc,%esp
c0101ef9:	6a 01                	push   $0x1
c0101efb:	e8 4b 01 00 00       	call   c010204b <pic_enable>
c0101f00:	83 c4 10             	add    $0x10,%esp
}
c0101f03:	90                   	nop
c0101f04:	c9                   	leave  
c0101f05:	c3                   	ret    

c0101f06 <cons_init>:

/* cons_init - initializes the console devices */
void
cons_init(void) {
c0101f06:	55                   	push   %ebp
c0101f07:	89 e5                	mov    %esp,%ebp
c0101f09:	83 ec 08             	sub    $0x8,%esp
    cga_init();
c0101f0c:	e8 8c f8 ff ff       	call   c010179d <cga_init>
    serial_init();
c0101f11:	e8 6e f9 ff ff       	call   c0101884 <serial_init>
    kbd_init();
c0101f16:	e8 d0 ff ff ff       	call   c0101eeb <kbd_init>
    if (!serial_exists) {
c0101f1b:	a1 28 05 1b c0       	mov    0xc01b0528,%eax
c0101f20:	85 c0                	test   %eax,%eax
c0101f22:	75 10                	jne    c0101f34 <cons_init+0x2e>
        cprintf("serial port does not exist!!\n");
c0101f24:	83 ec 0c             	sub    $0xc,%esp
c0101f27:	68 e1 bd 10 c0       	push   $0xc010bde1
c0101f2c:	e8 66 e3 ff ff       	call   c0100297 <cprintf>
c0101f31:	83 c4 10             	add    $0x10,%esp
    }
}
c0101f34:	90                   	nop
c0101f35:	c9                   	leave  
c0101f36:	c3                   	ret    

c0101f37 <cons_putc>:

/* cons_putc - print a single character @c to console devices */
void
cons_putc(int c) {
c0101f37:	55                   	push   %ebp
c0101f38:	89 e5                	mov    %esp,%ebp
c0101f3a:	83 ec 18             	sub    $0x18,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c0101f3d:	e8 d4 f7 ff ff       	call   c0101716 <__intr_save>
c0101f42:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        lpt_putc(c);
c0101f45:	83 ec 0c             	sub    $0xc,%esp
c0101f48:	ff 75 08             	pushl  0x8(%ebp)
c0101f4b:	e8 93 fa ff ff       	call   c01019e3 <lpt_putc>
c0101f50:	83 c4 10             	add    $0x10,%esp
        cga_putc(c);
c0101f53:	83 ec 0c             	sub    $0xc,%esp
c0101f56:	ff 75 08             	pushl  0x8(%ebp)
c0101f59:	e8 bc fa ff ff       	call   c0101a1a <cga_putc>
c0101f5e:	83 c4 10             	add    $0x10,%esp
        serial_putc(c);
c0101f61:	83 ec 0c             	sub    $0xc,%esp
c0101f64:	ff 75 08             	pushl  0x8(%ebp)
c0101f67:	e8 dd fc ff ff       	call   c0101c49 <serial_putc>
c0101f6c:	83 c4 10             	add    $0x10,%esp
    }
    local_intr_restore(intr_flag);
c0101f6f:	83 ec 0c             	sub    $0xc,%esp
c0101f72:	ff 75 f4             	pushl  -0xc(%ebp)
c0101f75:	e8 c6 f7 ff ff       	call   c0101740 <__intr_restore>
c0101f7a:	83 c4 10             	add    $0x10,%esp
}
c0101f7d:	90                   	nop
c0101f7e:	c9                   	leave  
c0101f7f:	c3                   	ret    

c0101f80 <cons_getc>:
/* *
 * cons_getc - return the next input character from console,
 * or 0 if none waiting.
 * */
int
cons_getc(void) {
c0101f80:	55                   	push   %ebp
c0101f81:	89 e5                	mov    %esp,%ebp
c0101f83:	83 ec 18             	sub    $0x18,%esp
    int c = 0;
c0101f86:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    local_intr_save(intr_flag);
c0101f8d:	e8 84 f7 ff ff       	call   c0101716 <__intr_save>
c0101f92:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        // poll for any pending input characters,
        // so that this function works even when interrupts are disabled
        // (e.g., when called from the kernel monitor).
        serial_intr();
c0101f95:	e8 89 fd ff ff       	call   c0101d23 <serial_intr>
        kbd_intr();
c0101f9a:	e8 33 ff ff ff       	call   c0101ed2 <kbd_intr>

        // grab the next character from the input buffer.
        if (cons.rpos != cons.wpos) {
c0101f9f:	8b 15 40 07 1b c0    	mov    0xc01b0740,%edx
c0101fa5:	a1 44 07 1b c0       	mov    0xc01b0744,%eax
c0101faa:	39 c2                	cmp    %eax,%edx
c0101fac:	74 31                	je     c0101fdf <cons_getc+0x5f>
            c = cons.buf[cons.rpos ++];
c0101fae:	a1 40 07 1b c0       	mov    0xc01b0740,%eax
c0101fb3:	8d 50 01             	lea    0x1(%eax),%edx
c0101fb6:	89 15 40 07 1b c0    	mov    %edx,0xc01b0740
c0101fbc:	0f b6 80 40 05 1b c0 	movzbl -0x3fe4fac0(%eax),%eax
c0101fc3:	0f b6 c0             	movzbl %al,%eax
c0101fc6:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (cons.rpos == CONSBUFSIZE) {
c0101fc9:	a1 40 07 1b c0       	mov    0xc01b0740,%eax
c0101fce:	3d 00 02 00 00       	cmp    $0x200,%eax
c0101fd3:	75 0a                	jne    c0101fdf <cons_getc+0x5f>
                cons.rpos = 0;
c0101fd5:	c7 05 40 07 1b c0 00 	movl   $0x0,0xc01b0740
c0101fdc:	00 00 00 
            }
        }
    }
    local_intr_restore(intr_flag);
c0101fdf:	83 ec 0c             	sub    $0xc,%esp
c0101fe2:	ff 75 f0             	pushl  -0x10(%ebp)
c0101fe5:	e8 56 f7 ff ff       	call   c0101740 <__intr_restore>
c0101fea:	83 c4 10             	add    $0x10,%esp
    return c;
c0101fed:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0101ff0:	c9                   	leave  
c0101ff1:	c3                   	ret    

c0101ff2 <pic_setmask>:
// Initial IRQ mask has interrupt 2 enabled (for slave 8259A).
static uint16_t irq_mask = 0xFFFF & ~(1 << IRQ_SLAVE);
static bool did_init = 0;

static void
pic_setmask(uint16_t mask) {
c0101ff2:	55                   	push   %ebp
c0101ff3:	89 e5                	mov    %esp,%ebp
c0101ff5:	83 ec 14             	sub    $0x14,%esp
c0101ff8:	8b 45 08             	mov    0x8(%ebp),%eax
c0101ffb:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    irq_mask = mask;
c0101fff:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0102003:	66 a3 50 c5 12 c0    	mov    %ax,0xc012c550
    if (did_init) {
c0102009:	a1 4c 07 1b c0       	mov    0xc01b074c,%eax
c010200e:	85 c0                	test   %eax,%eax
c0102010:	74 36                	je     c0102048 <pic_setmask+0x56>
        outb(IO_PIC1 + 1, mask);
c0102012:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0102016:	0f b6 c0             	movzbl %al,%eax
c0102019:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
c010201f:	88 45 fa             	mov    %al,-0x6(%ebp)
c0102022:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
c0102026:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c010202a:	ee                   	out    %al,(%dx)
        outb(IO_PIC2 + 1, mask >> 8);
c010202b:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c010202f:	66 c1 e8 08          	shr    $0x8,%ax
c0102033:	0f b6 c0             	movzbl %al,%eax
c0102036:	66 c7 45 fc a1 00    	movw   $0xa1,-0x4(%ebp)
c010203c:	88 45 fb             	mov    %al,-0x5(%ebp)
c010203f:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
c0102043:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c0102047:	ee                   	out    %al,(%dx)
    }
}
c0102048:	90                   	nop
c0102049:	c9                   	leave  
c010204a:	c3                   	ret    

c010204b <pic_enable>:

void
pic_enable(unsigned int irq) {
c010204b:	55                   	push   %ebp
c010204c:	89 e5                	mov    %esp,%ebp
    pic_setmask(irq_mask & ~(1 << irq));
c010204e:	8b 45 08             	mov    0x8(%ebp),%eax
c0102051:	ba 01 00 00 00       	mov    $0x1,%edx
c0102056:	89 c1                	mov    %eax,%ecx
c0102058:	d3 e2                	shl    %cl,%edx
c010205a:	89 d0                	mov    %edx,%eax
c010205c:	f7 d0                	not    %eax
c010205e:	89 c2                	mov    %eax,%edx
c0102060:	0f b7 05 50 c5 12 c0 	movzwl 0xc012c550,%eax
c0102067:	21 d0                	and    %edx,%eax
c0102069:	0f b7 c0             	movzwl %ax,%eax
c010206c:	50                   	push   %eax
c010206d:	e8 80 ff ff ff       	call   c0101ff2 <pic_setmask>
c0102072:	83 c4 04             	add    $0x4,%esp
}
c0102075:	90                   	nop
c0102076:	c9                   	leave  
c0102077:	c3                   	ret    

c0102078 <pic_init>:

/* pic_init - initialize the 8259A interrupt controllers */
void
pic_init(void) {
c0102078:	55                   	push   %ebp
c0102079:	89 e5                	mov    %esp,%ebp
c010207b:	83 ec 30             	sub    $0x30,%esp
    did_init = 1;
c010207e:	c7 05 4c 07 1b c0 01 	movl   $0x1,0xc01b074c
c0102085:	00 00 00 
c0102088:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
c010208e:	c6 45 d6 ff          	movb   $0xff,-0x2a(%ebp)
c0102092:	0f b6 45 d6          	movzbl -0x2a(%ebp),%eax
c0102096:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c010209a:	ee                   	out    %al,(%dx)
c010209b:	66 c7 45 fc a1 00    	movw   $0xa1,-0x4(%ebp)
c01020a1:	c6 45 d7 ff          	movb   $0xff,-0x29(%ebp)
c01020a5:	0f b6 45 d7          	movzbl -0x29(%ebp),%eax
c01020a9:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c01020ad:	ee                   	out    %al,(%dx)
c01020ae:	66 c7 45 fa 20 00    	movw   $0x20,-0x6(%ebp)
c01020b4:	c6 45 d8 11          	movb   $0x11,-0x28(%ebp)
c01020b8:	0f b6 45 d8          	movzbl -0x28(%ebp),%eax
c01020bc:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c01020c0:	ee                   	out    %al,(%dx)
c01020c1:	66 c7 45 f8 21 00    	movw   $0x21,-0x8(%ebp)
c01020c7:	c6 45 d9 20          	movb   $0x20,-0x27(%ebp)
c01020cb:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c01020cf:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
c01020d3:	ee                   	out    %al,(%dx)
c01020d4:	66 c7 45 f6 21 00    	movw   $0x21,-0xa(%ebp)
c01020da:	c6 45 da 04          	movb   $0x4,-0x26(%ebp)
c01020de:	0f b6 45 da          	movzbl -0x26(%ebp),%eax
c01020e2:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c01020e6:	ee                   	out    %al,(%dx)
c01020e7:	66 c7 45 f4 21 00    	movw   $0x21,-0xc(%ebp)
c01020ed:	c6 45 db 03          	movb   $0x3,-0x25(%ebp)
c01020f1:	0f b6 45 db          	movzbl -0x25(%ebp),%eax
c01020f5:	0f b7 55 f4          	movzwl -0xc(%ebp),%edx
c01020f9:	ee                   	out    %al,(%dx)
c01020fa:	66 c7 45 f2 a0 00    	movw   $0xa0,-0xe(%ebp)
c0102100:	c6 45 dc 11          	movb   $0x11,-0x24(%ebp)
c0102104:	0f b6 45 dc          	movzbl -0x24(%ebp),%eax
c0102108:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010210c:	ee                   	out    %al,(%dx)
c010210d:	66 c7 45 f0 a1 00    	movw   $0xa1,-0x10(%ebp)
c0102113:	c6 45 dd 28          	movb   $0x28,-0x23(%ebp)
c0102117:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c010211b:	0f b7 55 f0          	movzwl -0x10(%ebp),%edx
c010211f:	ee                   	out    %al,(%dx)
c0102120:	66 c7 45 ee a1 00    	movw   $0xa1,-0x12(%ebp)
c0102126:	c6 45 de 02          	movb   $0x2,-0x22(%ebp)
c010212a:	0f b6 45 de          	movzbl -0x22(%ebp),%eax
c010212e:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0102132:	ee                   	out    %al,(%dx)
c0102133:	66 c7 45 ec a1 00    	movw   $0xa1,-0x14(%ebp)
c0102139:	c6 45 df 03          	movb   $0x3,-0x21(%ebp)
c010213d:	0f b6 45 df          	movzbl -0x21(%ebp),%eax
c0102141:	0f b7 55 ec          	movzwl -0x14(%ebp),%edx
c0102145:	ee                   	out    %al,(%dx)
c0102146:	66 c7 45 ea 20 00    	movw   $0x20,-0x16(%ebp)
c010214c:	c6 45 e0 68          	movb   $0x68,-0x20(%ebp)
c0102150:	0f b6 45 e0          	movzbl -0x20(%ebp),%eax
c0102154:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0102158:	ee                   	out    %al,(%dx)
c0102159:	66 c7 45 e8 20 00    	movw   $0x20,-0x18(%ebp)
c010215f:	c6 45 e1 0a          	movb   $0xa,-0x1f(%ebp)
c0102163:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0102167:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c010216b:	ee                   	out    %al,(%dx)
c010216c:	66 c7 45 e6 a0 00    	movw   $0xa0,-0x1a(%ebp)
c0102172:	c6 45 e2 68          	movb   $0x68,-0x1e(%ebp)
c0102176:	0f b6 45 e2          	movzbl -0x1e(%ebp),%eax
c010217a:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c010217e:	ee                   	out    %al,(%dx)
c010217f:	66 c7 45 e4 a0 00    	movw   $0xa0,-0x1c(%ebp)
c0102185:	c6 45 e3 0a          	movb   $0xa,-0x1d(%ebp)
c0102189:	0f b6 45 e3          	movzbl -0x1d(%ebp),%eax
c010218d:	0f b7 55 e4          	movzwl -0x1c(%ebp),%edx
c0102191:	ee                   	out    %al,(%dx)
    outb(IO_PIC1, 0x0a);    // read IRR by default

    outb(IO_PIC2, 0x68);    // OCW3
    outb(IO_PIC2, 0x0a);    // OCW3

    if (irq_mask != 0xFFFF) {
c0102192:	0f b7 05 50 c5 12 c0 	movzwl 0xc012c550,%eax
c0102199:	66 83 f8 ff          	cmp    $0xffff,%ax
c010219d:	74 13                	je     c01021b2 <pic_init+0x13a>
        pic_setmask(irq_mask);
c010219f:	0f b7 05 50 c5 12 c0 	movzwl 0xc012c550,%eax
c01021a6:	0f b7 c0             	movzwl %ax,%eax
c01021a9:	50                   	push   %eax
c01021aa:	e8 43 fe ff ff       	call   c0101ff2 <pic_setmask>
c01021af:	83 c4 04             	add    $0x4,%esp
    }
}
c01021b2:	90                   	nop
c01021b3:	c9                   	leave  
c01021b4:	c3                   	ret    

c01021b5 <intr_enable>:
#include <x86.h>
#include <intr.h>

/* intr_enable - enable irq interrupt */
void
intr_enable(void) {
c01021b5:	55                   	push   %ebp
c01021b6:	89 e5                	mov    %esp,%ebp
    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
}

static inline void
sti(void) {
    asm volatile ("sti");
c01021b8:	fb                   	sti    
    sti();
}
c01021b9:	90                   	nop
c01021ba:	5d                   	pop    %ebp
c01021bb:	c3                   	ret    

c01021bc <intr_disable>:

/* intr_disable - disable irq interrupt */
void
intr_disable(void) {
c01021bc:	55                   	push   %ebp
c01021bd:	89 e5                	mov    %esp,%ebp
}

static inline void
cli(void) {
    asm volatile ("cli" ::: "memory");
c01021bf:	fa                   	cli    
    cli();
}
c01021c0:	90                   	nop
c01021c1:	5d                   	pop    %ebp
c01021c2:	c3                   	ret    

c01021c3 <print_ticks>:
#include <sync.h>
#include <proc.h>

#define TICK_NUM 100

static void print_ticks() {
c01021c3:	55                   	push   %ebp
c01021c4:	89 e5                	mov    %esp,%ebp
c01021c6:	83 ec 08             	sub    $0x8,%esp
    cprintf("%d ticks\n",TICK_NUM);
c01021c9:	83 ec 08             	sub    $0x8,%esp
c01021cc:	6a 64                	push   $0x64
c01021ce:	68 00 be 10 c0       	push   $0xc010be00
c01021d3:	e8 bf e0 ff ff       	call   c0100297 <cprintf>
c01021d8:	83 c4 10             	add    $0x10,%esp
#ifdef DEBUG_GRADE
    cprintf("End of Test.\n");
    panic("EOT: kernel seems ok.");
#endif
}
c01021db:	90                   	nop
c01021dc:	c9                   	leave  
c01021dd:	c3                   	ret    

c01021de <idt_init>:
/* temporary trapframe or pointer to trapframe */
struct trapframe switchk2u, *switchu2k;

/* idt_init - initialize IDT to each of the entry points in kern/trap/vectors.S */
void
idt_init(void) {
c01021de:	55                   	push   %ebp
c01021df:	89 e5                	mov    %esp,%ebp
c01021e1:	83 ec 10             	sub    $0x10,%esp
     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
     //so you should setup the syscall interrupt gate in here
    // 1. get vectors
    extern uintptr_t __vectors[];
    // 2. setup entries
    for (int i = 0; i < 256; i++) {
c01021e4:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c01021eb:	e9 c3 00 00 00       	jmp    c01022b3 <idt_init+0xd5>
        SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);
c01021f0:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01021f3:	8b 04 85 e0 c5 12 c0 	mov    -0x3fed3a20(,%eax,4),%eax
c01021fa:	89 c2                	mov    %eax,%edx
c01021fc:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01021ff:	66 89 14 c5 60 07 1b 	mov    %dx,-0x3fe4f8a0(,%eax,8)
c0102206:	c0 
c0102207:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010220a:	66 c7 04 c5 62 07 1b 	movw   $0x8,-0x3fe4f89e(,%eax,8)
c0102211:	c0 08 00 
c0102214:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102217:	0f b6 14 c5 64 07 1b 	movzbl -0x3fe4f89c(,%eax,8),%edx
c010221e:	c0 
c010221f:	83 e2 e0             	and    $0xffffffe0,%edx
c0102222:	88 14 c5 64 07 1b c0 	mov    %dl,-0x3fe4f89c(,%eax,8)
c0102229:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010222c:	0f b6 14 c5 64 07 1b 	movzbl -0x3fe4f89c(,%eax,8),%edx
c0102233:	c0 
c0102234:	83 e2 1f             	and    $0x1f,%edx
c0102237:	88 14 c5 64 07 1b c0 	mov    %dl,-0x3fe4f89c(,%eax,8)
c010223e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102241:	0f b6 14 c5 65 07 1b 	movzbl -0x3fe4f89b(,%eax,8),%edx
c0102248:	c0 
c0102249:	83 e2 f0             	and    $0xfffffff0,%edx
c010224c:	83 ca 0e             	or     $0xe,%edx
c010224f:	88 14 c5 65 07 1b c0 	mov    %dl,-0x3fe4f89b(,%eax,8)
c0102256:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102259:	0f b6 14 c5 65 07 1b 	movzbl -0x3fe4f89b(,%eax,8),%edx
c0102260:	c0 
c0102261:	83 e2 ef             	and    $0xffffffef,%edx
c0102264:	88 14 c5 65 07 1b c0 	mov    %dl,-0x3fe4f89b(,%eax,8)
c010226b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010226e:	0f b6 14 c5 65 07 1b 	movzbl -0x3fe4f89b(,%eax,8),%edx
c0102275:	c0 
c0102276:	83 e2 9f             	and    $0xffffff9f,%edx
c0102279:	88 14 c5 65 07 1b c0 	mov    %dl,-0x3fe4f89b(,%eax,8)
c0102280:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102283:	0f b6 14 c5 65 07 1b 	movzbl -0x3fe4f89b(,%eax,8),%edx
c010228a:	c0 
c010228b:	83 ca 80             	or     $0xffffff80,%edx
c010228e:	88 14 c5 65 07 1b c0 	mov    %dl,-0x3fe4f89b(,%eax,8)
c0102295:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102298:	8b 04 85 e0 c5 12 c0 	mov    -0x3fed3a20(,%eax,4),%eax
c010229f:	c1 e8 10             	shr    $0x10,%eax
c01022a2:	89 c2                	mov    %eax,%edx
c01022a4:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01022a7:	66 89 14 c5 66 07 1b 	mov    %dx,-0x3fe4f89a(,%eax,8)
c01022ae:	c0 
     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
     //so you should setup the syscall interrupt gate in here
    // 1. get vectors
    extern uintptr_t __vectors[];
    // 2. setup entries
    for (int i = 0; i < 256; i++) {
c01022af:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c01022b3:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
c01022ba:	0f 8e 30 ff ff ff    	jle    c01021f0 <idt_init+0x12>
        SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);
    }
	// set RPL of switch_to_kernel as user 
    SETGATE(idt[T_SWITCH_TOK], 0, GD_KTEXT, __vectors[T_SWITCH_TOK], DPL_USER);
c01022c0:	a1 c4 c7 12 c0       	mov    0xc012c7c4,%eax
c01022c5:	66 a3 28 0b 1b c0    	mov    %ax,0xc01b0b28
c01022cb:	66 c7 05 2a 0b 1b c0 	movw   $0x8,0xc01b0b2a
c01022d2:	08 00 
c01022d4:	0f b6 05 2c 0b 1b c0 	movzbl 0xc01b0b2c,%eax
c01022db:	83 e0 e0             	and    $0xffffffe0,%eax
c01022de:	a2 2c 0b 1b c0       	mov    %al,0xc01b0b2c
c01022e3:	0f b6 05 2c 0b 1b c0 	movzbl 0xc01b0b2c,%eax
c01022ea:	83 e0 1f             	and    $0x1f,%eax
c01022ed:	a2 2c 0b 1b c0       	mov    %al,0xc01b0b2c
c01022f2:	0f b6 05 2d 0b 1b c0 	movzbl 0xc01b0b2d,%eax
c01022f9:	83 e0 f0             	and    $0xfffffff0,%eax
c01022fc:	83 c8 0e             	or     $0xe,%eax
c01022ff:	a2 2d 0b 1b c0       	mov    %al,0xc01b0b2d
c0102304:	0f b6 05 2d 0b 1b c0 	movzbl 0xc01b0b2d,%eax
c010230b:	83 e0 ef             	and    $0xffffffef,%eax
c010230e:	a2 2d 0b 1b c0       	mov    %al,0xc01b0b2d
c0102313:	0f b6 05 2d 0b 1b c0 	movzbl 0xc01b0b2d,%eax
c010231a:	83 c8 60             	or     $0x60,%eax
c010231d:	a2 2d 0b 1b c0       	mov    %al,0xc01b0b2d
c0102322:	0f b6 05 2d 0b 1b c0 	movzbl 0xc01b0b2d,%eax
c0102329:	83 c8 80             	or     $0xffffff80,%eax
c010232c:	a2 2d 0b 1b c0       	mov    %al,0xc01b0b2d
c0102331:	a1 c4 c7 12 c0       	mov    0xc012c7c4,%eax
c0102336:	c1 e8 10             	shr    $0x10,%eax
c0102339:	66 a3 2e 0b 1b c0    	mov    %ax,0xc01b0b2e
    // set trap gate
    SETGATE(idt[T_SYSCALL], 1, GD_KTEXT, __vectors[T_SYSCALL], DPL_USER);
c010233f:	a1 e0 c7 12 c0       	mov    0xc012c7e0,%eax
c0102344:	66 a3 60 0b 1b c0    	mov    %ax,0xc01b0b60
c010234a:	66 c7 05 62 0b 1b c0 	movw   $0x8,0xc01b0b62
c0102351:	08 00 
c0102353:	0f b6 05 64 0b 1b c0 	movzbl 0xc01b0b64,%eax
c010235a:	83 e0 e0             	and    $0xffffffe0,%eax
c010235d:	a2 64 0b 1b c0       	mov    %al,0xc01b0b64
c0102362:	0f b6 05 64 0b 1b c0 	movzbl 0xc01b0b64,%eax
c0102369:	83 e0 1f             	and    $0x1f,%eax
c010236c:	a2 64 0b 1b c0       	mov    %al,0xc01b0b64
c0102371:	0f b6 05 65 0b 1b c0 	movzbl 0xc01b0b65,%eax
c0102378:	83 c8 0f             	or     $0xf,%eax
c010237b:	a2 65 0b 1b c0       	mov    %al,0xc01b0b65
c0102380:	0f b6 05 65 0b 1b c0 	movzbl 0xc01b0b65,%eax
c0102387:	83 e0 ef             	and    $0xffffffef,%eax
c010238a:	a2 65 0b 1b c0       	mov    %al,0xc01b0b65
c010238f:	0f b6 05 65 0b 1b c0 	movzbl 0xc01b0b65,%eax
c0102396:	83 c8 60             	or     $0x60,%eax
c0102399:	a2 65 0b 1b c0       	mov    %al,0xc01b0b65
c010239e:	0f b6 05 65 0b 1b c0 	movzbl 0xc01b0b65,%eax
c01023a5:	83 c8 80             	or     $0xffffff80,%eax
c01023a8:	a2 65 0b 1b c0       	mov    %al,0xc01b0b65
c01023ad:	a1 e0 c7 12 c0       	mov    0xc012c7e0,%eax
c01023b2:	c1 e8 10             	shr    $0x10,%eax
c01023b5:	66 a3 66 0b 1b c0    	mov    %ax,0xc01b0b66
c01023bb:	c7 45 f8 60 c5 12 c0 	movl   $0xc012c560,-0x8(%ebp)
    }
}

static inline void
lidt(struct pseudodesc *pd) {
    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
c01023c2:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01023c5:	0f 01 18             	lidtl  (%eax)
    // 3. LIDT
    lidt(&idt_pd);
}
c01023c8:	90                   	nop
c01023c9:	c9                   	leave  
c01023ca:	c3                   	ret    

c01023cb <trapname>:

static const char *
trapname(int trapno) {
c01023cb:	55                   	push   %ebp
c01023cc:	89 e5                	mov    %esp,%ebp
        "Alignment Check",
        "Machine-Check",
        "SIMD Floating-Point Exception"
    };

    if (trapno < sizeof(excnames)/sizeof(const char * const)) {
c01023ce:	8b 45 08             	mov    0x8(%ebp),%eax
c01023d1:	83 f8 13             	cmp    $0x13,%eax
c01023d4:	77 0c                	ja     c01023e2 <trapname+0x17>
        return excnames[trapno];
c01023d6:	8b 45 08             	mov    0x8(%ebp),%eax
c01023d9:	8b 04 85 80 c2 10 c0 	mov    -0x3fef3d80(,%eax,4),%eax
c01023e0:	eb 18                	jmp    c01023fa <trapname+0x2f>
    }
    if (trapno >= IRQ_OFFSET && trapno < IRQ_OFFSET + 16) {
c01023e2:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
c01023e6:	7e 0d                	jle    c01023f5 <trapname+0x2a>
c01023e8:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
c01023ec:	7f 07                	jg     c01023f5 <trapname+0x2a>
        return "Hardware Interrupt";
c01023ee:	b8 0a be 10 c0       	mov    $0xc010be0a,%eax
c01023f3:	eb 05                	jmp    c01023fa <trapname+0x2f>
    }
    return "(unknown trap)";
c01023f5:	b8 1d be 10 c0       	mov    $0xc010be1d,%eax
}
c01023fa:	5d                   	pop    %ebp
c01023fb:	c3                   	ret    

c01023fc <trap_in_kernel>:

/* trap_in_kernel - test if trap happened in kernel */
bool
trap_in_kernel(struct trapframe *tf) {
c01023fc:	55                   	push   %ebp
c01023fd:	89 e5                	mov    %esp,%ebp
    return (tf->tf_cs == (uint16_t)KERNEL_CS);
c01023ff:	8b 45 08             	mov    0x8(%ebp),%eax
c0102402:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c0102406:	66 83 f8 08          	cmp    $0x8,%ax
c010240a:	0f 94 c0             	sete   %al
c010240d:	0f b6 c0             	movzbl %al,%eax
}
c0102410:	5d                   	pop    %ebp
c0102411:	c3                   	ret    

c0102412 <print_trapframe>:
    "TF", "IF", "DF", "OF", NULL, NULL, "NT", NULL,
    "RF", "VM", "AC", "VIF", "VIP", "ID", NULL, NULL,
};

void
print_trapframe(struct trapframe *tf) {
c0102412:	55                   	push   %ebp
c0102413:	89 e5                	mov    %esp,%ebp
c0102415:	83 ec 18             	sub    $0x18,%esp
    cprintf("trapframe at %p\n", tf);
c0102418:	83 ec 08             	sub    $0x8,%esp
c010241b:	ff 75 08             	pushl  0x8(%ebp)
c010241e:	68 5e be 10 c0       	push   $0xc010be5e
c0102423:	e8 6f de ff ff       	call   c0100297 <cprintf>
c0102428:	83 c4 10             	add    $0x10,%esp
    print_regs(&tf->tf_regs);
c010242b:	8b 45 08             	mov    0x8(%ebp),%eax
c010242e:	83 ec 0c             	sub    $0xc,%esp
c0102431:	50                   	push   %eax
c0102432:	e8 b8 01 00 00       	call   c01025ef <print_regs>
c0102437:	83 c4 10             	add    $0x10,%esp
    cprintf("  ds   0x----%04x\n", tf->tf_ds);
c010243a:	8b 45 08             	mov    0x8(%ebp),%eax
c010243d:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c0102441:	0f b7 c0             	movzwl %ax,%eax
c0102444:	83 ec 08             	sub    $0x8,%esp
c0102447:	50                   	push   %eax
c0102448:	68 6f be 10 c0       	push   $0xc010be6f
c010244d:	e8 45 de ff ff       	call   c0100297 <cprintf>
c0102452:	83 c4 10             	add    $0x10,%esp
    cprintf("  es   0x----%04x\n", tf->tf_es);
c0102455:	8b 45 08             	mov    0x8(%ebp),%eax
c0102458:	0f b7 40 28          	movzwl 0x28(%eax),%eax
c010245c:	0f b7 c0             	movzwl %ax,%eax
c010245f:	83 ec 08             	sub    $0x8,%esp
c0102462:	50                   	push   %eax
c0102463:	68 82 be 10 c0       	push   $0xc010be82
c0102468:	e8 2a de ff ff       	call   c0100297 <cprintf>
c010246d:	83 c4 10             	add    $0x10,%esp
    cprintf("  fs   0x----%04x\n", tf->tf_fs);
c0102470:	8b 45 08             	mov    0x8(%ebp),%eax
c0102473:	0f b7 40 24          	movzwl 0x24(%eax),%eax
c0102477:	0f b7 c0             	movzwl %ax,%eax
c010247a:	83 ec 08             	sub    $0x8,%esp
c010247d:	50                   	push   %eax
c010247e:	68 95 be 10 c0       	push   $0xc010be95
c0102483:	e8 0f de ff ff       	call   c0100297 <cprintf>
c0102488:	83 c4 10             	add    $0x10,%esp
    cprintf("  gs   0x----%04x\n", tf->tf_gs);
c010248b:	8b 45 08             	mov    0x8(%ebp),%eax
c010248e:	0f b7 40 20          	movzwl 0x20(%eax),%eax
c0102492:	0f b7 c0             	movzwl %ax,%eax
c0102495:	83 ec 08             	sub    $0x8,%esp
c0102498:	50                   	push   %eax
c0102499:	68 a8 be 10 c0       	push   $0xc010bea8
c010249e:	e8 f4 dd ff ff       	call   c0100297 <cprintf>
c01024a3:	83 c4 10             	add    $0x10,%esp
    cprintf("  trap 0x%08x %s\n", tf->tf_trapno, trapname(tf->tf_trapno));
c01024a6:	8b 45 08             	mov    0x8(%ebp),%eax
c01024a9:	8b 40 30             	mov    0x30(%eax),%eax
c01024ac:	83 ec 0c             	sub    $0xc,%esp
c01024af:	50                   	push   %eax
c01024b0:	e8 16 ff ff ff       	call   c01023cb <trapname>
c01024b5:	83 c4 10             	add    $0x10,%esp
c01024b8:	89 c2                	mov    %eax,%edx
c01024ba:	8b 45 08             	mov    0x8(%ebp),%eax
c01024bd:	8b 40 30             	mov    0x30(%eax),%eax
c01024c0:	83 ec 04             	sub    $0x4,%esp
c01024c3:	52                   	push   %edx
c01024c4:	50                   	push   %eax
c01024c5:	68 bb be 10 c0       	push   $0xc010bebb
c01024ca:	e8 c8 dd ff ff       	call   c0100297 <cprintf>
c01024cf:	83 c4 10             	add    $0x10,%esp
    cprintf("  err  0x%08x\n", tf->tf_err);
c01024d2:	8b 45 08             	mov    0x8(%ebp),%eax
c01024d5:	8b 40 34             	mov    0x34(%eax),%eax
c01024d8:	83 ec 08             	sub    $0x8,%esp
c01024db:	50                   	push   %eax
c01024dc:	68 cd be 10 c0       	push   $0xc010becd
c01024e1:	e8 b1 dd ff ff       	call   c0100297 <cprintf>
c01024e6:	83 c4 10             	add    $0x10,%esp
    cprintf("  eip  0x%08x\n", tf->tf_eip);
c01024e9:	8b 45 08             	mov    0x8(%ebp),%eax
c01024ec:	8b 40 38             	mov    0x38(%eax),%eax
c01024ef:	83 ec 08             	sub    $0x8,%esp
c01024f2:	50                   	push   %eax
c01024f3:	68 dc be 10 c0       	push   $0xc010bedc
c01024f8:	e8 9a dd ff ff       	call   c0100297 <cprintf>
c01024fd:	83 c4 10             	add    $0x10,%esp
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
c0102500:	8b 45 08             	mov    0x8(%ebp),%eax
c0102503:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c0102507:	0f b7 c0             	movzwl %ax,%eax
c010250a:	83 ec 08             	sub    $0x8,%esp
c010250d:	50                   	push   %eax
c010250e:	68 eb be 10 c0       	push   $0xc010beeb
c0102513:	e8 7f dd ff ff       	call   c0100297 <cprintf>
c0102518:	83 c4 10             	add    $0x10,%esp
    cprintf("  flag 0x%08x ", tf->tf_eflags);
c010251b:	8b 45 08             	mov    0x8(%ebp),%eax
c010251e:	8b 40 40             	mov    0x40(%eax),%eax
c0102521:	83 ec 08             	sub    $0x8,%esp
c0102524:	50                   	push   %eax
c0102525:	68 fe be 10 c0       	push   $0xc010befe
c010252a:	e8 68 dd ff ff       	call   c0100297 <cprintf>
c010252f:	83 c4 10             	add    $0x10,%esp

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c0102532:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0102539:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c0102540:	eb 3f                	jmp    c0102581 <print_trapframe+0x16f>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
c0102542:	8b 45 08             	mov    0x8(%ebp),%eax
c0102545:	8b 50 40             	mov    0x40(%eax),%edx
c0102548:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010254b:	21 d0                	and    %edx,%eax
c010254d:	85 c0                	test   %eax,%eax
c010254f:	74 29                	je     c010257a <print_trapframe+0x168>
c0102551:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102554:	8b 04 85 80 c5 12 c0 	mov    -0x3fed3a80(,%eax,4),%eax
c010255b:	85 c0                	test   %eax,%eax
c010255d:	74 1b                	je     c010257a <print_trapframe+0x168>
            cprintf("%s,", IA32flags[i]);
c010255f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102562:	8b 04 85 80 c5 12 c0 	mov    -0x3fed3a80(,%eax,4),%eax
c0102569:	83 ec 08             	sub    $0x8,%esp
c010256c:	50                   	push   %eax
c010256d:	68 0d bf 10 c0       	push   $0xc010bf0d
c0102572:	e8 20 dd ff ff       	call   c0100297 <cprintf>
c0102577:	83 c4 10             	add    $0x10,%esp
    cprintf("  eip  0x%08x\n", tf->tf_eip);
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
    cprintf("  flag 0x%08x ", tf->tf_eflags);

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c010257a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010257e:	d1 65 f0             	shll   -0x10(%ebp)
c0102581:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102584:	83 f8 17             	cmp    $0x17,%eax
c0102587:	76 b9                	jbe    c0102542 <print_trapframe+0x130>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
            cprintf("%s,", IA32flags[i]);
        }
    }
    cprintf("IOPL=%d\n", (tf->tf_eflags & FL_IOPL_MASK) >> 12);
c0102589:	8b 45 08             	mov    0x8(%ebp),%eax
c010258c:	8b 40 40             	mov    0x40(%eax),%eax
c010258f:	25 00 30 00 00       	and    $0x3000,%eax
c0102594:	c1 e8 0c             	shr    $0xc,%eax
c0102597:	83 ec 08             	sub    $0x8,%esp
c010259a:	50                   	push   %eax
c010259b:	68 11 bf 10 c0       	push   $0xc010bf11
c01025a0:	e8 f2 dc ff ff       	call   c0100297 <cprintf>
c01025a5:	83 c4 10             	add    $0x10,%esp

    if (!trap_in_kernel(tf)) {
c01025a8:	83 ec 0c             	sub    $0xc,%esp
c01025ab:	ff 75 08             	pushl  0x8(%ebp)
c01025ae:	e8 49 fe ff ff       	call   c01023fc <trap_in_kernel>
c01025b3:	83 c4 10             	add    $0x10,%esp
c01025b6:	85 c0                	test   %eax,%eax
c01025b8:	75 32                	jne    c01025ec <print_trapframe+0x1da>
        cprintf("  esp  0x%08x\n", tf->tf_esp);
c01025ba:	8b 45 08             	mov    0x8(%ebp),%eax
c01025bd:	8b 40 44             	mov    0x44(%eax),%eax
c01025c0:	83 ec 08             	sub    $0x8,%esp
c01025c3:	50                   	push   %eax
c01025c4:	68 1a bf 10 c0       	push   $0xc010bf1a
c01025c9:	e8 c9 dc ff ff       	call   c0100297 <cprintf>
c01025ce:	83 c4 10             	add    $0x10,%esp
        cprintf("  ss   0x----%04x\n", tf->tf_ss);
c01025d1:	8b 45 08             	mov    0x8(%ebp),%eax
c01025d4:	0f b7 40 48          	movzwl 0x48(%eax),%eax
c01025d8:	0f b7 c0             	movzwl %ax,%eax
c01025db:	83 ec 08             	sub    $0x8,%esp
c01025de:	50                   	push   %eax
c01025df:	68 29 bf 10 c0       	push   $0xc010bf29
c01025e4:	e8 ae dc ff ff       	call   c0100297 <cprintf>
c01025e9:	83 c4 10             	add    $0x10,%esp
    }
}
c01025ec:	90                   	nop
c01025ed:	c9                   	leave  
c01025ee:	c3                   	ret    

c01025ef <print_regs>:

void
print_regs(struct pushregs *regs) {
c01025ef:	55                   	push   %ebp
c01025f0:	89 e5                	mov    %esp,%ebp
c01025f2:	83 ec 08             	sub    $0x8,%esp
    cprintf("  edi  0x%08x\n", regs->reg_edi);
c01025f5:	8b 45 08             	mov    0x8(%ebp),%eax
c01025f8:	8b 00                	mov    (%eax),%eax
c01025fa:	83 ec 08             	sub    $0x8,%esp
c01025fd:	50                   	push   %eax
c01025fe:	68 3c bf 10 c0       	push   $0xc010bf3c
c0102603:	e8 8f dc ff ff       	call   c0100297 <cprintf>
c0102608:	83 c4 10             	add    $0x10,%esp
    cprintf("  esi  0x%08x\n", regs->reg_esi);
c010260b:	8b 45 08             	mov    0x8(%ebp),%eax
c010260e:	8b 40 04             	mov    0x4(%eax),%eax
c0102611:	83 ec 08             	sub    $0x8,%esp
c0102614:	50                   	push   %eax
c0102615:	68 4b bf 10 c0       	push   $0xc010bf4b
c010261a:	e8 78 dc ff ff       	call   c0100297 <cprintf>
c010261f:	83 c4 10             	add    $0x10,%esp
    cprintf("  ebp  0x%08x\n", regs->reg_ebp);
c0102622:	8b 45 08             	mov    0x8(%ebp),%eax
c0102625:	8b 40 08             	mov    0x8(%eax),%eax
c0102628:	83 ec 08             	sub    $0x8,%esp
c010262b:	50                   	push   %eax
c010262c:	68 5a bf 10 c0       	push   $0xc010bf5a
c0102631:	e8 61 dc ff ff       	call   c0100297 <cprintf>
c0102636:	83 c4 10             	add    $0x10,%esp
    cprintf("  oesp 0x%08x\n", regs->reg_oesp);
c0102639:	8b 45 08             	mov    0x8(%ebp),%eax
c010263c:	8b 40 0c             	mov    0xc(%eax),%eax
c010263f:	83 ec 08             	sub    $0x8,%esp
c0102642:	50                   	push   %eax
c0102643:	68 69 bf 10 c0       	push   $0xc010bf69
c0102648:	e8 4a dc ff ff       	call   c0100297 <cprintf>
c010264d:	83 c4 10             	add    $0x10,%esp
    cprintf("  ebx  0x%08x\n", regs->reg_ebx);
c0102650:	8b 45 08             	mov    0x8(%ebp),%eax
c0102653:	8b 40 10             	mov    0x10(%eax),%eax
c0102656:	83 ec 08             	sub    $0x8,%esp
c0102659:	50                   	push   %eax
c010265a:	68 78 bf 10 c0       	push   $0xc010bf78
c010265f:	e8 33 dc ff ff       	call   c0100297 <cprintf>
c0102664:	83 c4 10             	add    $0x10,%esp
    cprintf("  edx  0x%08x\n", regs->reg_edx);
c0102667:	8b 45 08             	mov    0x8(%ebp),%eax
c010266a:	8b 40 14             	mov    0x14(%eax),%eax
c010266d:	83 ec 08             	sub    $0x8,%esp
c0102670:	50                   	push   %eax
c0102671:	68 87 bf 10 c0       	push   $0xc010bf87
c0102676:	e8 1c dc ff ff       	call   c0100297 <cprintf>
c010267b:	83 c4 10             	add    $0x10,%esp
    cprintf("  ecx  0x%08x\n", regs->reg_ecx);
c010267e:	8b 45 08             	mov    0x8(%ebp),%eax
c0102681:	8b 40 18             	mov    0x18(%eax),%eax
c0102684:	83 ec 08             	sub    $0x8,%esp
c0102687:	50                   	push   %eax
c0102688:	68 96 bf 10 c0       	push   $0xc010bf96
c010268d:	e8 05 dc ff ff       	call   c0100297 <cprintf>
c0102692:	83 c4 10             	add    $0x10,%esp
    cprintf("  eax  0x%08x\n", regs->reg_eax);
c0102695:	8b 45 08             	mov    0x8(%ebp),%eax
c0102698:	8b 40 1c             	mov    0x1c(%eax),%eax
c010269b:	83 ec 08             	sub    $0x8,%esp
c010269e:	50                   	push   %eax
c010269f:	68 a5 bf 10 c0       	push   $0xc010bfa5
c01026a4:	e8 ee db ff ff       	call   c0100297 <cprintf>
c01026a9:	83 c4 10             	add    $0x10,%esp
}
c01026ac:	90                   	nop
c01026ad:	c9                   	leave  
c01026ae:	c3                   	ret    

c01026af <print_pgfault>:

static inline void
print_pgfault(struct trapframe *tf) {
c01026af:	55                   	push   %ebp
c01026b0:	89 e5                	mov    %esp,%ebp
c01026b2:	53                   	push   %ebx
c01026b3:	83 ec 14             	sub    $0x14,%esp
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
            (tf->tf_err & 1) ? "protection fault" : "no page found");
c01026b6:	8b 45 08             	mov    0x8(%ebp),%eax
c01026b9:	8b 40 34             	mov    0x34(%eax),%eax
c01026bc:	83 e0 01             	and    $0x1,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c01026bf:	85 c0                	test   %eax,%eax
c01026c1:	74 07                	je     c01026ca <print_pgfault+0x1b>
c01026c3:	bb b4 bf 10 c0       	mov    $0xc010bfb4,%ebx
c01026c8:	eb 05                	jmp    c01026cf <print_pgfault+0x20>
c01026ca:	bb c5 bf 10 c0       	mov    $0xc010bfc5,%ebx
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
c01026cf:	8b 45 08             	mov    0x8(%ebp),%eax
c01026d2:	8b 40 34             	mov    0x34(%eax),%eax
c01026d5:	83 e0 02             	and    $0x2,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c01026d8:	85 c0                	test   %eax,%eax
c01026da:	74 07                	je     c01026e3 <print_pgfault+0x34>
c01026dc:	b9 57 00 00 00       	mov    $0x57,%ecx
c01026e1:	eb 05                	jmp    c01026e8 <print_pgfault+0x39>
c01026e3:	b9 52 00 00 00       	mov    $0x52,%ecx
            (tf->tf_err & 4) ? 'U' : 'K',
c01026e8:	8b 45 08             	mov    0x8(%ebp),%eax
c01026eb:	8b 40 34             	mov    0x34(%eax),%eax
c01026ee:	83 e0 04             	and    $0x4,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c01026f1:	85 c0                	test   %eax,%eax
c01026f3:	74 07                	je     c01026fc <print_pgfault+0x4d>
c01026f5:	ba 55 00 00 00       	mov    $0x55,%edx
c01026fa:	eb 05                	jmp    c0102701 <print_pgfault+0x52>
c01026fc:	ba 4b 00 00 00       	mov    $0x4b,%edx
}

static inline uintptr_t
rcr2(void) {
    uintptr_t cr2;
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c0102701:	0f 20 d0             	mov    %cr2,%eax
c0102704:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return cr2;
c0102707:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010270a:	83 ec 0c             	sub    $0xc,%esp
c010270d:	53                   	push   %ebx
c010270e:	51                   	push   %ecx
c010270f:	52                   	push   %edx
c0102710:	50                   	push   %eax
c0102711:	68 d4 bf 10 c0       	push   $0xc010bfd4
c0102716:	e8 7c db ff ff       	call   c0100297 <cprintf>
c010271b:	83 c4 20             	add    $0x20,%esp
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
            (tf->tf_err & 1) ? "protection fault" : "no page found");
}
c010271e:	90                   	nop
c010271f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0102722:	c9                   	leave  
c0102723:	c3                   	ret    

c0102724 <pgfault_handler>:

static int
pgfault_handler(struct trapframe *tf) {
c0102724:	55                   	push   %ebp
c0102725:	89 e5                	mov    %esp,%ebp
c0102727:	83 ec 18             	sub    $0x18,%esp
    extern struct mm_struct *check_mm_struct;
    if(check_mm_struct !=NULL) { //used for test check_swap
c010272a:	a1 d0 30 1b c0       	mov    0xc01b30d0,%eax
c010272f:	85 c0                	test   %eax,%eax
c0102731:	74 0e                	je     c0102741 <pgfault_handler+0x1d>
            print_pgfault(tf);
c0102733:	83 ec 0c             	sub    $0xc,%esp
c0102736:	ff 75 08             	pushl  0x8(%ebp)
c0102739:	e8 71 ff ff ff       	call   c01026af <print_pgfault>
c010273e:	83 c4 10             	add    $0x10,%esp
        }
    struct mm_struct *mm;
    if (check_mm_struct != NULL) {
c0102741:	a1 d0 30 1b c0       	mov    0xc01b30d0,%eax
c0102746:	85 c0                	test   %eax,%eax
c0102748:	74 32                	je     c010277c <pgfault_handler+0x58>
        assert(current == idleproc);
c010274a:	8b 15 28 10 1b c0    	mov    0xc01b1028,%edx
c0102750:	a1 20 10 1b c0       	mov    0xc01b1020,%eax
c0102755:	39 c2                	cmp    %eax,%edx
c0102757:	74 19                	je     c0102772 <pgfault_handler+0x4e>
c0102759:	68 f7 bf 10 c0       	push   $0xc010bff7
c010275e:	68 0b c0 10 c0       	push   $0xc010c00b
c0102763:	68 b9 00 00 00       	push   $0xb9
c0102768:	68 20 c0 10 c0       	push   $0xc010c020
c010276d:	e8 8b dc ff ff       	call   c01003fd <__panic>
        mm = check_mm_struct;
c0102772:	a1 d0 30 1b c0       	mov    0xc01b30d0,%eax
c0102777:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010277a:	eb 47                	jmp    c01027c3 <pgfault_handler+0x9f>
    }
    else {
        if (current == NULL) {
c010277c:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c0102781:	85 c0                	test   %eax,%eax
c0102783:	75 33                	jne    c01027b8 <pgfault_handler+0x94>
            print_trapframe(tf);
c0102785:	83 ec 0c             	sub    $0xc,%esp
c0102788:	ff 75 08             	pushl  0x8(%ebp)
c010278b:	e8 82 fc ff ff       	call   c0102412 <print_trapframe>
c0102790:	83 c4 10             	add    $0x10,%esp
            print_pgfault(tf);
c0102793:	83 ec 0c             	sub    $0xc,%esp
c0102796:	ff 75 08             	pushl  0x8(%ebp)
c0102799:	e8 11 ff ff ff       	call   c01026af <print_pgfault>
c010279e:	83 c4 10             	add    $0x10,%esp
            panic("unhandled page fault.\n");
c01027a1:	83 ec 04             	sub    $0x4,%esp
c01027a4:	68 31 c0 10 c0       	push   $0xc010c031
c01027a9:	68 c0 00 00 00       	push   $0xc0
c01027ae:	68 20 c0 10 c0       	push   $0xc010c020
c01027b3:	e8 45 dc ff ff       	call   c01003fd <__panic>
        }
        mm = current->mm;
c01027b8:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c01027bd:	8b 40 18             	mov    0x18(%eax),%eax
c01027c0:	89 45 f4             	mov    %eax,-0xc(%ebp)
}

static inline uintptr_t
rcr2(void) {
    uintptr_t cr2;
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c01027c3:	0f 20 d0             	mov    %cr2,%eax
c01027c6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return cr2;
c01027c9:	8b 55 f0             	mov    -0x10(%ebp),%edx
    }
    return do_pgfault(mm, tf->tf_err, rcr2());
c01027cc:	8b 45 08             	mov    0x8(%ebp),%eax
c01027cf:	8b 40 34             	mov    0x34(%eax),%eax
c01027d2:	83 ec 04             	sub    $0x4,%esp
c01027d5:	52                   	push   %edx
c01027d6:	50                   	push   %eax
c01027d7:	ff 75 f4             	pushl  -0xc(%ebp)
c01027da:	e8 98 1b 00 00       	call   c0104377 <do_pgfault>
c01027df:	83 c4 10             	add    $0x10,%esp
}
c01027e2:	c9                   	leave  
c01027e3:	c3                   	ret    

c01027e4 <trap_dispatch>:

static volatile int in_swap_tick_event = 0;
extern struct mm_struct *check_mm_struct;

static void
trap_dispatch(struct trapframe *tf) {
c01027e4:	55                   	push   %ebp
c01027e5:	89 e5                	mov    %esp,%ebp
c01027e7:	57                   	push   %edi
c01027e8:	56                   	push   %esi
c01027e9:	53                   	push   %ebx
c01027ea:	83 ec 1c             	sub    $0x1c,%esp
    char c;

    int ret=0;
c01027ed:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

    switch (tf->tf_trapno) {
c01027f4:	8b 45 08             	mov    0x8(%ebp),%eax
c01027f7:	8b 40 30             	mov    0x30(%eax),%eax
c01027fa:	83 f8 2f             	cmp    $0x2f,%eax
c01027fd:	77 38                	ja     c0102837 <trap_dispatch+0x53>
c01027ff:	83 f8 2e             	cmp    $0x2e,%eax
c0102802:	0f 83 75 02 00 00    	jae    c0102a7d <trap_dispatch+0x299>
c0102808:	83 f8 20             	cmp    $0x20,%eax
c010280b:	0f 84 eb 00 00 00    	je     c01028fc <trap_dispatch+0x118>
c0102811:	83 f8 20             	cmp    $0x20,%eax
c0102814:	77 0a                	ja     c0102820 <trap_dispatch+0x3c>
c0102816:	83 f8 0e             	cmp    $0xe,%eax
c0102819:	74 3e                	je     c0102859 <trap_dispatch+0x75>
c010281b:	e9 12 02 00 00       	jmp    c0102a32 <trap_dispatch+0x24e>
c0102820:	83 f8 21             	cmp    $0x21,%eax
c0102823:	0f 84 3f 01 00 00    	je     c0102968 <trap_dispatch+0x184>
c0102829:	83 f8 24             	cmp    $0x24,%eax
c010282c:	0f 84 0f 01 00 00    	je     c0102941 <trap_dispatch+0x15d>
c0102832:	e9 fb 01 00 00       	jmp    c0102a32 <trap_dispatch+0x24e>
c0102837:	83 f8 79             	cmp    $0x79,%eax
c010283a:	0f 84 c4 01 00 00    	je     c0102a04 <trap_dispatch+0x220>
c0102840:	3d 80 00 00 00       	cmp    $0x80,%eax
c0102845:	0f 84 a7 00 00 00    	je     c01028f2 <trap_dispatch+0x10e>
c010284b:	83 f8 78             	cmp    $0x78,%eax
c010284e:	0f 84 3b 01 00 00    	je     c010298f <trap_dispatch+0x1ab>
c0102854:	e9 d9 01 00 00       	jmp    c0102a32 <trap_dispatch+0x24e>
    case T_PGFLT:  //page fault
        if ((ret = pgfault_handler(tf)) != 0) {
c0102859:	83 ec 0c             	sub    $0xc,%esp
c010285c:	ff 75 08             	pushl  0x8(%ebp)
c010285f:	e8 c0 fe ff ff       	call   c0102724 <pgfault_handler>
c0102864:	83 c4 10             	add    $0x10,%esp
c0102867:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010286a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010286e:	0f 84 0c 02 00 00    	je     c0102a80 <trap_dispatch+0x29c>
            print_trapframe(tf);
c0102874:	83 ec 0c             	sub    $0xc,%esp
c0102877:	ff 75 08             	pushl  0x8(%ebp)
c010287a:	e8 93 fb ff ff       	call   c0102412 <print_trapframe>
c010287f:	83 c4 10             	add    $0x10,%esp
            if (current == NULL) {
c0102882:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c0102887:	85 c0                	test   %eax,%eax
c0102889:	75 17                	jne    c01028a2 <trap_dispatch+0xbe>
                panic("handle pgfault failed. ret=%d\n", ret);
c010288b:	ff 75 e4             	pushl  -0x1c(%ebp)
c010288e:	68 48 c0 10 c0       	push   $0xc010c048
c0102893:	68 d5 00 00 00       	push   $0xd5
c0102898:	68 20 c0 10 c0       	push   $0xc010c020
c010289d:	e8 5b db ff ff       	call   c01003fd <__panic>
            }
            else {
                if (trap_in_kernel(tf)) {
c01028a2:	83 ec 0c             	sub    $0xc,%esp
c01028a5:	ff 75 08             	pushl  0x8(%ebp)
c01028a8:	e8 4f fb ff ff       	call   c01023fc <trap_in_kernel>
c01028ad:	83 c4 10             	add    $0x10,%esp
c01028b0:	85 c0                	test   %eax,%eax
c01028b2:	74 17                	je     c01028cb <trap_dispatch+0xe7>
                    panic("handle pgfault failed in kernel mode. ret=%d\n", ret);
c01028b4:	ff 75 e4             	pushl  -0x1c(%ebp)
c01028b7:	68 68 c0 10 c0       	push   $0xc010c068
c01028bc:	68 d9 00 00 00       	push   $0xd9
c01028c1:	68 20 c0 10 c0       	push   $0xc010c020
c01028c6:	e8 32 db ff ff       	call   c01003fd <__panic>
                }
                cprintf("killed by kernel.\n");
c01028cb:	83 ec 0c             	sub    $0xc,%esp
c01028ce:	68 96 c0 10 c0       	push   $0xc010c096
c01028d3:	e8 bf d9 ff ff       	call   c0100297 <cprintf>
c01028d8:	83 c4 10             	add    $0x10,%esp
                panic("handle user mode pgfault failed. ret=%d\n", ret); 
c01028db:	ff 75 e4             	pushl  -0x1c(%ebp)
c01028de:	68 ac c0 10 c0       	push   $0xc010c0ac
c01028e3:	68 dc 00 00 00       	push   $0xdc
c01028e8:	68 20 c0 10 c0       	push   $0xc010c020
c01028ed:	e8 0b db ff ff       	call   c01003fd <__panic>
                do_exit(-E_KILLED);
            }
        }
        break;
    case T_SYSCALL:
        syscall();
c01028f2:	e8 18 84 00 00       	call   c010ad0f <syscall>
        break;
c01028f7:	e9 85 01 00 00       	jmp    c0102a81 <trap_dispatch+0x29d>
        /* LAB6 2015010062 */
        /* you should upate you lab5 code
         * IMPORTANT FUNCTIONS:
	     * sched_class_proc_tick
         */
        ticks++;
c01028fc:	a1 78 30 1b c0       	mov    0xc01b3078,%eax
c0102901:	83 c0 01             	add    $0x1,%eax
c0102904:	a3 78 30 1b c0       	mov    %eax,0xc01b3078
        // if (ticks % TICK_NUM == 0) {
            // print_ticks();
            assert(current != NULL);
c0102909:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010290e:	85 c0                	test   %eax,%eax
c0102910:	75 19                	jne    c010292b <trap_dispatch+0x147>
c0102912:	68 d5 c0 10 c0       	push   $0xc010c0d5
c0102917:	68 0b c0 10 c0       	push   $0xc010c00b
c010291c:	68 fb 00 00 00       	push   $0xfb
c0102921:	68 20 c0 10 c0       	push   $0xc010c020
c0102926:	e8 d2 da ff ff       	call   c01003fd <__panic>
            // current->need_resched = 1;
            sched_class_proc_tick(current);
c010292b:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c0102930:	83 ec 0c             	sub    $0xc,%esp
c0102933:	50                   	push   %eax
c0102934:	e8 73 7d 00 00       	call   c010a6ac <sched_class_proc_tick>
c0102939:	83 c4 10             	add    $0x10,%esp
        // }
        break;
c010293c:	e9 40 01 00 00       	jmp    c0102a81 <trap_dispatch+0x29d>
    case IRQ_OFFSET + IRQ_COM1:
        c = cons_getc();
c0102941:	e8 3a f6 ff ff       	call   c0101f80 <cons_getc>
c0102946:	88 45 e3             	mov    %al,-0x1d(%ebp)
        cprintf("serial [%03d] %c\n", c, c);
c0102949:	0f be 55 e3          	movsbl -0x1d(%ebp),%edx
c010294d:	0f be 45 e3          	movsbl -0x1d(%ebp),%eax
c0102951:	83 ec 04             	sub    $0x4,%esp
c0102954:	52                   	push   %edx
c0102955:	50                   	push   %eax
c0102956:	68 e5 c0 10 c0       	push   $0xc010c0e5
c010295b:	e8 37 d9 ff ff       	call   c0100297 <cprintf>
c0102960:	83 c4 10             	add    $0x10,%esp
        break;
c0102963:	e9 19 01 00 00       	jmp    c0102a81 <trap_dispatch+0x29d>
    case IRQ_OFFSET + IRQ_KBD:
        c = cons_getc();
c0102968:	e8 13 f6 ff ff       	call   c0101f80 <cons_getc>
c010296d:	88 45 e3             	mov    %al,-0x1d(%ebp)
        cprintf("kbd [%03d] %c\n", c, c);
c0102970:	0f be 55 e3          	movsbl -0x1d(%ebp),%edx
c0102974:	0f be 45 e3          	movsbl -0x1d(%ebp),%eax
c0102978:	83 ec 04             	sub    $0x4,%esp
c010297b:	52                   	push   %edx
c010297c:	50                   	push   %eax
c010297d:	68 f7 c0 10 c0       	push   $0xc010c0f7
c0102982:	e8 10 d9 ff ff       	call   c0100297 <cprintf>
c0102987:	83 c4 10             	add    $0x10,%esp
        break;
c010298a:	e9 f2 00 00 00       	jmp    c0102a81 <trap_dispatch+0x29d>
    //LAB1 CHALLENGE 1 : YOUR CODE you should modify below codes.
    case T_SWITCH_TOU:
        switchk2u = *tf;
c010298f:	8b 55 08             	mov    0x8(%ebp),%edx
c0102992:	b8 80 30 1b c0       	mov    $0xc01b3080,%eax
c0102997:	89 d3                	mov    %edx,%ebx
c0102999:	ba 4c 00 00 00       	mov    $0x4c,%edx
c010299e:	8b 0b                	mov    (%ebx),%ecx
c01029a0:	89 08                	mov    %ecx,(%eax)
c01029a2:	8b 4c 13 fc          	mov    -0x4(%ebx,%edx,1),%ecx
c01029a6:	89 4c 10 fc          	mov    %ecx,-0x4(%eax,%edx,1)
c01029aa:	8d 78 04             	lea    0x4(%eax),%edi
c01029ad:	83 e7 fc             	and    $0xfffffffc,%edi
c01029b0:	29 f8                	sub    %edi,%eax
c01029b2:	29 c3                	sub    %eax,%ebx
c01029b4:	01 c2                	add    %eax,%edx
c01029b6:	83 e2 fc             	and    $0xfffffffc,%edx
c01029b9:	89 d0                	mov    %edx,%eax
c01029bb:	c1 e8 02             	shr    $0x2,%eax
c01029be:	89 de                	mov    %ebx,%esi
c01029c0:	89 c1                	mov    %eax,%ecx
c01029c2:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
        switchk2u.tf_cs = USER_CS;
c01029c4:	66 c7 05 bc 30 1b c0 	movw   $0x1b,0xc01b30bc
c01029cb:	1b 00 
        switchk2u.tf_ds = USER_DS;
c01029cd:	66 c7 05 ac 30 1b c0 	movw   $0x23,0xc01b30ac
c01029d4:	23 00 
        switchk2u.tf_es = USER_DS;
c01029d6:	66 c7 05 a8 30 1b c0 	movw   $0x23,0xc01b30a8
c01029dd:	23 00 
        switchk2u.tf_ss = USER_DS;
c01029df:	66 c7 05 c8 30 1b c0 	movw   $0x23,0xc01b30c8
c01029e6:	23 00 
        switchk2u.tf_eflags |= FL_IOPL_MASK;
c01029e8:	a1 c0 30 1b c0       	mov    0xc01b30c0,%eax
c01029ed:	80 cc 30             	or     $0x30,%ah
c01029f0:	a3 c0 30 1b c0       	mov    %eax,0xc01b30c0
        *((uint32_t *)tf - 1) = (uint32_t)&switchk2u;
c01029f5:	8b 45 08             	mov    0x8(%ebp),%eax
c01029f8:	83 e8 04             	sub    $0x4,%eax
c01029fb:	ba 80 30 1b c0       	mov    $0xc01b3080,%edx
c0102a00:	89 10                	mov    %edx,(%eax)
        break;
c0102a02:	eb 7d                	jmp    c0102a81 <trap_dispatch+0x29d>
    case T_SWITCH_TOK:
        tf->tf_cs = KERNEL_CS;
c0102a04:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a07:	66 c7 40 3c 08 00    	movw   $0x8,0x3c(%eax)
        tf->tf_ds = KERNEL_DS;
c0102a0d:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a10:	66 c7 40 2c 10 00    	movw   $0x10,0x2c(%eax)
        tf->tf_es = KERNEL_DS;
c0102a16:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a19:	66 c7 40 28 10 00    	movw   $0x10,0x28(%eax)
        tf->tf_eflags &= ~FL_IOPL_MASK;
c0102a1f:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a22:	8b 40 40             	mov    0x40(%eax),%eax
c0102a25:	80 e4 cf             	and    $0xcf,%ah
c0102a28:	89 c2                	mov    %eax,%edx
c0102a2a:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a2d:	89 50 40             	mov    %edx,0x40(%eax)
        break;
c0102a30:	eb 4f                	jmp    c0102a81 <trap_dispatch+0x29d>
    case IRQ_OFFSET + IRQ_IDE1:
    case IRQ_OFFSET + IRQ_IDE2:
        /* do nothing */
        break;
    default:
        print_trapframe(tf);
c0102a32:	83 ec 0c             	sub    $0xc,%esp
c0102a35:	ff 75 08             	pushl  0x8(%ebp)
c0102a38:	e8 d5 f9 ff ff       	call   c0102412 <print_trapframe>
c0102a3d:	83 c4 10             	add    $0x10,%esp
        if (current != NULL) {
c0102a40:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c0102a45:	85 c0                	test   %eax,%eax
c0102a47:	74 1d                	je     c0102a66 <trap_dispatch+0x282>
            cprintf("unhandled trap.\n");
c0102a49:	83 ec 0c             	sub    $0xc,%esp
c0102a4c:	68 06 c1 10 c0       	push   $0xc010c106
c0102a51:	e8 41 d8 ff ff       	call   c0100297 <cprintf>
c0102a56:	83 c4 10             	add    $0x10,%esp
            do_exit(-E_KILLED);
c0102a59:	83 ec 0c             	sub    $0xc,%esp
c0102a5c:	6a f7                	push   $0xfffffff7
c0102a5e:	e8 08 6d 00 00       	call   c010976b <do_exit>
c0102a63:	83 c4 10             	add    $0x10,%esp
        }
        // in kernel, it must be a mistake
        panic("unexpected trap in kernel.\n");
c0102a66:	83 ec 04             	sub    $0x4,%esp
c0102a69:	68 17 c1 10 c0       	push   $0xc010c117
c0102a6e:	68 24 01 00 00       	push   $0x124
c0102a73:	68 20 c0 10 c0       	push   $0xc010c020
c0102a78:	e8 80 d9 ff ff       	call   c01003fd <__panic>
        break;
    // end of copy
    case IRQ_OFFSET + IRQ_IDE1:
    case IRQ_OFFSET + IRQ_IDE2:
        /* do nothing */
        break;
c0102a7d:	90                   	nop
c0102a7e:	eb 01                	jmp    c0102a81 <trap_dispatch+0x29d>
                cprintf("killed by kernel.\n");
                panic("handle user mode pgfault failed. ret=%d\n", ret); 
                do_exit(-E_KILLED);
            }
        }
        break;
c0102a80:	90                   	nop
        }
        // in kernel, it must be a mistake
        panic("unexpected trap in kernel.\n");

    }
}
c0102a81:	90                   	nop
c0102a82:	8d 65 f4             	lea    -0xc(%ebp),%esp
c0102a85:	5b                   	pop    %ebx
c0102a86:	5e                   	pop    %esi
c0102a87:	5f                   	pop    %edi
c0102a88:	5d                   	pop    %ebp
c0102a89:	c3                   	ret    

c0102a8a <trap>:
 * trap - handles or dispatches an exception/interrupt. if and when trap() returns,
 * the code in kern/trap/trapentry.S restores the old CPU state saved in the
 * trapframe and then uses the iret instruction to return from the exception.
 * */
void
trap(struct trapframe *tf) {
c0102a8a:	55                   	push   %ebp
c0102a8b:	89 e5                	mov    %esp,%ebp
c0102a8d:	83 ec 18             	sub    $0x18,%esp
    // dispatch based on what type of trap occurred
    // used for previous projects
    if (current == NULL) {
c0102a90:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c0102a95:	85 c0                	test   %eax,%eax
c0102a97:	75 10                	jne    c0102aa9 <trap+0x1f>
        trap_dispatch(tf);
c0102a99:	83 ec 0c             	sub    $0xc,%esp
c0102a9c:	ff 75 08             	pushl  0x8(%ebp)
c0102a9f:	e8 40 fd ff ff       	call   c01027e4 <trap_dispatch>
c0102aa4:	83 c4 10             	add    $0x10,%esp
                // cprintf("calling schedule()...\n");
                schedule();
            }
        }
    }
}
c0102aa7:	eb 73                	jmp    c0102b1c <trap+0x92>
    if (current == NULL) {
        trap_dispatch(tf);
    }
    else {
        // keep a trapframe chain in stack
        struct trapframe *otf = current->tf;
c0102aa9:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c0102aae:	8b 40 3c             	mov    0x3c(%eax),%eax
c0102ab1:	89 45 f4             	mov    %eax,-0xc(%ebp)
        current->tf = tf;
c0102ab4:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c0102ab9:	8b 55 08             	mov    0x8(%ebp),%edx
c0102abc:	89 50 3c             	mov    %edx,0x3c(%eax)
    
        bool in_kernel = trap_in_kernel(tf);
c0102abf:	83 ec 0c             	sub    $0xc,%esp
c0102ac2:	ff 75 08             	pushl  0x8(%ebp)
c0102ac5:	e8 32 f9 ff ff       	call   c01023fc <trap_in_kernel>
c0102aca:	83 c4 10             	add    $0x10,%esp
c0102acd:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
        trap_dispatch(tf);
c0102ad0:	83 ec 0c             	sub    $0xc,%esp
c0102ad3:	ff 75 08             	pushl  0x8(%ebp)
c0102ad6:	e8 09 fd ff ff       	call   c01027e4 <trap_dispatch>
c0102adb:	83 c4 10             	add    $0x10,%esp
    
        current->tf = otf;
c0102ade:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c0102ae3:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0102ae6:	89 50 3c             	mov    %edx,0x3c(%eax)
        if (!in_kernel) {
c0102ae9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0102aed:	75 2d                	jne    c0102b1c <trap+0x92>
            if (current->flags & PF_EXITING) {
c0102aef:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c0102af4:	8b 40 44             	mov    0x44(%eax),%eax
c0102af7:	83 e0 01             	and    $0x1,%eax
c0102afa:	85 c0                	test   %eax,%eax
c0102afc:	74 0d                	je     c0102b0b <trap+0x81>
                do_exit(-E_KILLED);
c0102afe:	83 ec 0c             	sub    $0xc,%esp
c0102b01:	6a f7                	push   $0xfffffff7
c0102b03:	e8 63 6c 00 00       	call   c010976b <do_exit>
c0102b08:	83 c4 10             	add    $0x10,%esp
            }
            if (current->need_resched) {
c0102b0b:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c0102b10:	8b 40 10             	mov    0x10(%eax),%eax
c0102b13:	85 c0                	test   %eax,%eax
c0102b15:	74 05                	je     c0102b1c <trap+0x92>
                // cprintf("calling schedule()...\n");
                schedule();
c0102b17:	e8 c9 7c 00 00       	call   c010a7e5 <schedule>
            }
        }
    }
}
c0102b1c:	90                   	nop
c0102b1d:	c9                   	leave  
c0102b1e:	c3                   	ret    

c0102b1f <vector0>:
# handler
.text
.globl __alltraps
.globl vector0
vector0:
  pushl $0
c0102b1f:	6a 00                	push   $0x0
  pushl $0
c0102b21:	6a 00                	push   $0x0
  jmp __alltraps
c0102b23:	e9 69 0a 00 00       	jmp    c0103591 <__alltraps>

c0102b28 <vector1>:
.globl vector1
vector1:
  pushl $0
c0102b28:	6a 00                	push   $0x0
  pushl $1
c0102b2a:	6a 01                	push   $0x1
  jmp __alltraps
c0102b2c:	e9 60 0a 00 00       	jmp    c0103591 <__alltraps>

c0102b31 <vector2>:
.globl vector2
vector2:
  pushl $0
c0102b31:	6a 00                	push   $0x0
  pushl $2
c0102b33:	6a 02                	push   $0x2
  jmp __alltraps
c0102b35:	e9 57 0a 00 00       	jmp    c0103591 <__alltraps>

c0102b3a <vector3>:
.globl vector3
vector3:
  pushl $0
c0102b3a:	6a 00                	push   $0x0
  pushl $3
c0102b3c:	6a 03                	push   $0x3
  jmp __alltraps
c0102b3e:	e9 4e 0a 00 00       	jmp    c0103591 <__alltraps>

c0102b43 <vector4>:
.globl vector4
vector4:
  pushl $0
c0102b43:	6a 00                	push   $0x0
  pushl $4
c0102b45:	6a 04                	push   $0x4
  jmp __alltraps
c0102b47:	e9 45 0a 00 00       	jmp    c0103591 <__alltraps>

c0102b4c <vector5>:
.globl vector5
vector5:
  pushl $0
c0102b4c:	6a 00                	push   $0x0
  pushl $5
c0102b4e:	6a 05                	push   $0x5
  jmp __alltraps
c0102b50:	e9 3c 0a 00 00       	jmp    c0103591 <__alltraps>

c0102b55 <vector6>:
.globl vector6
vector6:
  pushl $0
c0102b55:	6a 00                	push   $0x0
  pushl $6
c0102b57:	6a 06                	push   $0x6
  jmp __alltraps
c0102b59:	e9 33 0a 00 00       	jmp    c0103591 <__alltraps>

c0102b5e <vector7>:
.globl vector7
vector7:
  pushl $0
c0102b5e:	6a 00                	push   $0x0
  pushl $7
c0102b60:	6a 07                	push   $0x7
  jmp __alltraps
c0102b62:	e9 2a 0a 00 00       	jmp    c0103591 <__alltraps>

c0102b67 <vector8>:
.globl vector8
vector8:
  pushl $8
c0102b67:	6a 08                	push   $0x8
  jmp __alltraps
c0102b69:	e9 23 0a 00 00       	jmp    c0103591 <__alltraps>

c0102b6e <vector9>:
.globl vector9
vector9:
  pushl $0
c0102b6e:	6a 00                	push   $0x0
  pushl $9
c0102b70:	6a 09                	push   $0x9
  jmp __alltraps
c0102b72:	e9 1a 0a 00 00       	jmp    c0103591 <__alltraps>

c0102b77 <vector10>:
.globl vector10
vector10:
  pushl $10
c0102b77:	6a 0a                	push   $0xa
  jmp __alltraps
c0102b79:	e9 13 0a 00 00       	jmp    c0103591 <__alltraps>

c0102b7e <vector11>:
.globl vector11
vector11:
  pushl $11
c0102b7e:	6a 0b                	push   $0xb
  jmp __alltraps
c0102b80:	e9 0c 0a 00 00       	jmp    c0103591 <__alltraps>

c0102b85 <vector12>:
.globl vector12
vector12:
  pushl $12
c0102b85:	6a 0c                	push   $0xc
  jmp __alltraps
c0102b87:	e9 05 0a 00 00       	jmp    c0103591 <__alltraps>

c0102b8c <vector13>:
.globl vector13
vector13:
  pushl $13
c0102b8c:	6a 0d                	push   $0xd
  jmp __alltraps
c0102b8e:	e9 fe 09 00 00       	jmp    c0103591 <__alltraps>

c0102b93 <vector14>:
.globl vector14
vector14:
  pushl $14
c0102b93:	6a 0e                	push   $0xe
  jmp __alltraps
c0102b95:	e9 f7 09 00 00       	jmp    c0103591 <__alltraps>

c0102b9a <vector15>:
.globl vector15
vector15:
  pushl $0
c0102b9a:	6a 00                	push   $0x0
  pushl $15
c0102b9c:	6a 0f                	push   $0xf
  jmp __alltraps
c0102b9e:	e9 ee 09 00 00       	jmp    c0103591 <__alltraps>

c0102ba3 <vector16>:
.globl vector16
vector16:
  pushl $0
c0102ba3:	6a 00                	push   $0x0
  pushl $16
c0102ba5:	6a 10                	push   $0x10
  jmp __alltraps
c0102ba7:	e9 e5 09 00 00       	jmp    c0103591 <__alltraps>

c0102bac <vector17>:
.globl vector17
vector17:
  pushl $17
c0102bac:	6a 11                	push   $0x11
  jmp __alltraps
c0102bae:	e9 de 09 00 00       	jmp    c0103591 <__alltraps>

c0102bb3 <vector18>:
.globl vector18
vector18:
  pushl $0
c0102bb3:	6a 00                	push   $0x0
  pushl $18
c0102bb5:	6a 12                	push   $0x12
  jmp __alltraps
c0102bb7:	e9 d5 09 00 00       	jmp    c0103591 <__alltraps>

c0102bbc <vector19>:
.globl vector19
vector19:
  pushl $0
c0102bbc:	6a 00                	push   $0x0
  pushl $19
c0102bbe:	6a 13                	push   $0x13
  jmp __alltraps
c0102bc0:	e9 cc 09 00 00       	jmp    c0103591 <__alltraps>

c0102bc5 <vector20>:
.globl vector20
vector20:
  pushl $0
c0102bc5:	6a 00                	push   $0x0
  pushl $20
c0102bc7:	6a 14                	push   $0x14
  jmp __alltraps
c0102bc9:	e9 c3 09 00 00       	jmp    c0103591 <__alltraps>

c0102bce <vector21>:
.globl vector21
vector21:
  pushl $0
c0102bce:	6a 00                	push   $0x0
  pushl $21
c0102bd0:	6a 15                	push   $0x15
  jmp __alltraps
c0102bd2:	e9 ba 09 00 00       	jmp    c0103591 <__alltraps>

c0102bd7 <vector22>:
.globl vector22
vector22:
  pushl $0
c0102bd7:	6a 00                	push   $0x0
  pushl $22
c0102bd9:	6a 16                	push   $0x16
  jmp __alltraps
c0102bdb:	e9 b1 09 00 00       	jmp    c0103591 <__alltraps>

c0102be0 <vector23>:
.globl vector23
vector23:
  pushl $0
c0102be0:	6a 00                	push   $0x0
  pushl $23
c0102be2:	6a 17                	push   $0x17
  jmp __alltraps
c0102be4:	e9 a8 09 00 00       	jmp    c0103591 <__alltraps>

c0102be9 <vector24>:
.globl vector24
vector24:
  pushl $0
c0102be9:	6a 00                	push   $0x0
  pushl $24
c0102beb:	6a 18                	push   $0x18
  jmp __alltraps
c0102bed:	e9 9f 09 00 00       	jmp    c0103591 <__alltraps>

c0102bf2 <vector25>:
.globl vector25
vector25:
  pushl $0
c0102bf2:	6a 00                	push   $0x0
  pushl $25
c0102bf4:	6a 19                	push   $0x19
  jmp __alltraps
c0102bf6:	e9 96 09 00 00       	jmp    c0103591 <__alltraps>

c0102bfb <vector26>:
.globl vector26
vector26:
  pushl $0
c0102bfb:	6a 00                	push   $0x0
  pushl $26
c0102bfd:	6a 1a                	push   $0x1a
  jmp __alltraps
c0102bff:	e9 8d 09 00 00       	jmp    c0103591 <__alltraps>

c0102c04 <vector27>:
.globl vector27
vector27:
  pushl $0
c0102c04:	6a 00                	push   $0x0
  pushl $27
c0102c06:	6a 1b                	push   $0x1b
  jmp __alltraps
c0102c08:	e9 84 09 00 00       	jmp    c0103591 <__alltraps>

c0102c0d <vector28>:
.globl vector28
vector28:
  pushl $0
c0102c0d:	6a 00                	push   $0x0
  pushl $28
c0102c0f:	6a 1c                	push   $0x1c
  jmp __alltraps
c0102c11:	e9 7b 09 00 00       	jmp    c0103591 <__alltraps>

c0102c16 <vector29>:
.globl vector29
vector29:
  pushl $0
c0102c16:	6a 00                	push   $0x0
  pushl $29
c0102c18:	6a 1d                	push   $0x1d
  jmp __alltraps
c0102c1a:	e9 72 09 00 00       	jmp    c0103591 <__alltraps>

c0102c1f <vector30>:
.globl vector30
vector30:
  pushl $0
c0102c1f:	6a 00                	push   $0x0
  pushl $30
c0102c21:	6a 1e                	push   $0x1e
  jmp __alltraps
c0102c23:	e9 69 09 00 00       	jmp    c0103591 <__alltraps>

c0102c28 <vector31>:
.globl vector31
vector31:
  pushl $0
c0102c28:	6a 00                	push   $0x0
  pushl $31
c0102c2a:	6a 1f                	push   $0x1f
  jmp __alltraps
c0102c2c:	e9 60 09 00 00       	jmp    c0103591 <__alltraps>

c0102c31 <vector32>:
.globl vector32
vector32:
  pushl $0
c0102c31:	6a 00                	push   $0x0
  pushl $32
c0102c33:	6a 20                	push   $0x20
  jmp __alltraps
c0102c35:	e9 57 09 00 00       	jmp    c0103591 <__alltraps>

c0102c3a <vector33>:
.globl vector33
vector33:
  pushl $0
c0102c3a:	6a 00                	push   $0x0
  pushl $33
c0102c3c:	6a 21                	push   $0x21
  jmp __alltraps
c0102c3e:	e9 4e 09 00 00       	jmp    c0103591 <__alltraps>

c0102c43 <vector34>:
.globl vector34
vector34:
  pushl $0
c0102c43:	6a 00                	push   $0x0
  pushl $34
c0102c45:	6a 22                	push   $0x22
  jmp __alltraps
c0102c47:	e9 45 09 00 00       	jmp    c0103591 <__alltraps>

c0102c4c <vector35>:
.globl vector35
vector35:
  pushl $0
c0102c4c:	6a 00                	push   $0x0
  pushl $35
c0102c4e:	6a 23                	push   $0x23
  jmp __alltraps
c0102c50:	e9 3c 09 00 00       	jmp    c0103591 <__alltraps>

c0102c55 <vector36>:
.globl vector36
vector36:
  pushl $0
c0102c55:	6a 00                	push   $0x0
  pushl $36
c0102c57:	6a 24                	push   $0x24
  jmp __alltraps
c0102c59:	e9 33 09 00 00       	jmp    c0103591 <__alltraps>

c0102c5e <vector37>:
.globl vector37
vector37:
  pushl $0
c0102c5e:	6a 00                	push   $0x0
  pushl $37
c0102c60:	6a 25                	push   $0x25
  jmp __alltraps
c0102c62:	e9 2a 09 00 00       	jmp    c0103591 <__alltraps>

c0102c67 <vector38>:
.globl vector38
vector38:
  pushl $0
c0102c67:	6a 00                	push   $0x0
  pushl $38
c0102c69:	6a 26                	push   $0x26
  jmp __alltraps
c0102c6b:	e9 21 09 00 00       	jmp    c0103591 <__alltraps>

c0102c70 <vector39>:
.globl vector39
vector39:
  pushl $0
c0102c70:	6a 00                	push   $0x0
  pushl $39
c0102c72:	6a 27                	push   $0x27
  jmp __alltraps
c0102c74:	e9 18 09 00 00       	jmp    c0103591 <__alltraps>

c0102c79 <vector40>:
.globl vector40
vector40:
  pushl $0
c0102c79:	6a 00                	push   $0x0
  pushl $40
c0102c7b:	6a 28                	push   $0x28
  jmp __alltraps
c0102c7d:	e9 0f 09 00 00       	jmp    c0103591 <__alltraps>

c0102c82 <vector41>:
.globl vector41
vector41:
  pushl $0
c0102c82:	6a 00                	push   $0x0
  pushl $41
c0102c84:	6a 29                	push   $0x29
  jmp __alltraps
c0102c86:	e9 06 09 00 00       	jmp    c0103591 <__alltraps>

c0102c8b <vector42>:
.globl vector42
vector42:
  pushl $0
c0102c8b:	6a 00                	push   $0x0
  pushl $42
c0102c8d:	6a 2a                	push   $0x2a
  jmp __alltraps
c0102c8f:	e9 fd 08 00 00       	jmp    c0103591 <__alltraps>

c0102c94 <vector43>:
.globl vector43
vector43:
  pushl $0
c0102c94:	6a 00                	push   $0x0
  pushl $43
c0102c96:	6a 2b                	push   $0x2b
  jmp __alltraps
c0102c98:	e9 f4 08 00 00       	jmp    c0103591 <__alltraps>

c0102c9d <vector44>:
.globl vector44
vector44:
  pushl $0
c0102c9d:	6a 00                	push   $0x0
  pushl $44
c0102c9f:	6a 2c                	push   $0x2c
  jmp __alltraps
c0102ca1:	e9 eb 08 00 00       	jmp    c0103591 <__alltraps>

c0102ca6 <vector45>:
.globl vector45
vector45:
  pushl $0
c0102ca6:	6a 00                	push   $0x0
  pushl $45
c0102ca8:	6a 2d                	push   $0x2d
  jmp __alltraps
c0102caa:	e9 e2 08 00 00       	jmp    c0103591 <__alltraps>

c0102caf <vector46>:
.globl vector46
vector46:
  pushl $0
c0102caf:	6a 00                	push   $0x0
  pushl $46
c0102cb1:	6a 2e                	push   $0x2e
  jmp __alltraps
c0102cb3:	e9 d9 08 00 00       	jmp    c0103591 <__alltraps>

c0102cb8 <vector47>:
.globl vector47
vector47:
  pushl $0
c0102cb8:	6a 00                	push   $0x0
  pushl $47
c0102cba:	6a 2f                	push   $0x2f
  jmp __alltraps
c0102cbc:	e9 d0 08 00 00       	jmp    c0103591 <__alltraps>

c0102cc1 <vector48>:
.globl vector48
vector48:
  pushl $0
c0102cc1:	6a 00                	push   $0x0
  pushl $48
c0102cc3:	6a 30                	push   $0x30
  jmp __alltraps
c0102cc5:	e9 c7 08 00 00       	jmp    c0103591 <__alltraps>

c0102cca <vector49>:
.globl vector49
vector49:
  pushl $0
c0102cca:	6a 00                	push   $0x0
  pushl $49
c0102ccc:	6a 31                	push   $0x31
  jmp __alltraps
c0102cce:	e9 be 08 00 00       	jmp    c0103591 <__alltraps>

c0102cd3 <vector50>:
.globl vector50
vector50:
  pushl $0
c0102cd3:	6a 00                	push   $0x0
  pushl $50
c0102cd5:	6a 32                	push   $0x32
  jmp __alltraps
c0102cd7:	e9 b5 08 00 00       	jmp    c0103591 <__alltraps>

c0102cdc <vector51>:
.globl vector51
vector51:
  pushl $0
c0102cdc:	6a 00                	push   $0x0
  pushl $51
c0102cde:	6a 33                	push   $0x33
  jmp __alltraps
c0102ce0:	e9 ac 08 00 00       	jmp    c0103591 <__alltraps>

c0102ce5 <vector52>:
.globl vector52
vector52:
  pushl $0
c0102ce5:	6a 00                	push   $0x0
  pushl $52
c0102ce7:	6a 34                	push   $0x34
  jmp __alltraps
c0102ce9:	e9 a3 08 00 00       	jmp    c0103591 <__alltraps>

c0102cee <vector53>:
.globl vector53
vector53:
  pushl $0
c0102cee:	6a 00                	push   $0x0
  pushl $53
c0102cf0:	6a 35                	push   $0x35
  jmp __alltraps
c0102cf2:	e9 9a 08 00 00       	jmp    c0103591 <__alltraps>

c0102cf7 <vector54>:
.globl vector54
vector54:
  pushl $0
c0102cf7:	6a 00                	push   $0x0
  pushl $54
c0102cf9:	6a 36                	push   $0x36
  jmp __alltraps
c0102cfb:	e9 91 08 00 00       	jmp    c0103591 <__alltraps>

c0102d00 <vector55>:
.globl vector55
vector55:
  pushl $0
c0102d00:	6a 00                	push   $0x0
  pushl $55
c0102d02:	6a 37                	push   $0x37
  jmp __alltraps
c0102d04:	e9 88 08 00 00       	jmp    c0103591 <__alltraps>

c0102d09 <vector56>:
.globl vector56
vector56:
  pushl $0
c0102d09:	6a 00                	push   $0x0
  pushl $56
c0102d0b:	6a 38                	push   $0x38
  jmp __alltraps
c0102d0d:	e9 7f 08 00 00       	jmp    c0103591 <__alltraps>

c0102d12 <vector57>:
.globl vector57
vector57:
  pushl $0
c0102d12:	6a 00                	push   $0x0
  pushl $57
c0102d14:	6a 39                	push   $0x39
  jmp __alltraps
c0102d16:	e9 76 08 00 00       	jmp    c0103591 <__alltraps>

c0102d1b <vector58>:
.globl vector58
vector58:
  pushl $0
c0102d1b:	6a 00                	push   $0x0
  pushl $58
c0102d1d:	6a 3a                	push   $0x3a
  jmp __alltraps
c0102d1f:	e9 6d 08 00 00       	jmp    c0103591 <__alltraps>

c0102d24 <vector59>:
.globl vector59
vector59:
  pushl $0
c0102d24:	6a 00                	push   $0x0
  pushl $59
c0102d26:	6a 3b                	push   $0x3b
  jmp __alltraps
c0102d28:	e9 64 08 00 00       	jmp    c0103591 <__alltraps>

c0102d2d <vector60>:
.globl vector60
vector60:
  pushl $0
c0102d2d:	6a 00                	push   $0x0
  pushl $60
c0102d2f:	6a 3c                	push   $0x3c
  jmp __alltraps
c0102d31:	e9 5b 08 00 00       	jmp    c0103591 <__alltraps>

c0102d36 <vector61>:
.globl vector61
vector61:
  pushl $0
c0102d36:	6a 00                	push   $0x0
  pushl $61
c0102d38:	6a 3d                	push   $0x3d
  jmp __alltraps
c0102d3a:	e9 52 08 00 00       	jmp    c0103591 <__alltraps>

c0102d3f <vector62>:
.globl vector62
vector62:
  pushl $0
c0102d3f:	6a 00                	push   $0x0
  pushl $62
c0102d41:	6a 3e                	push   $0x3e
  jmp __alltraps
c0102d43:	e9 49 08 00 00       	jmp    c0103591 <__alltraps>

c0102d48 <vector63>:
.globl vector63
vector63:
  pushl $0
c0102d48:	6a 00                	push   $0x0
  pushl $63
c0102d4a:	6a 3f                	push   $0x3f
  jmp __alltraps
c0102d4c:	e9 40 08 00 00       	jmp    c0103591 <__alltraps>

c0102d51 <vector64>:
.globl vector64
vector64:
  pushl $0
c0102d51:	6a 00                	push   $0x0
  pushl $64
c0102d53:	6a 40                	push   $0x40
  jmp __alltraps
c0102d55:	e9 37 08 00 00       	jmp    c0103591 <__alltraps>

c0102d5a <vector65>:
.globl vector65
vector65:
  pushl $0
c0102d5a:	6a 00                	push   $0x0
  pushl $65
c0102d5c:	6a 41                	push   $0x41
  jmp __alltraps
c0102d5e:	e9 2e 08 00 00       	jmp    c0103591 <__alltraps>

c0102d63 <vector66>:
.globl vector66
vector66:
  pushl $0
c0102d63:	6a 00                	push   $0x0
  pushl $66
c0102d65:	6a 42                	push   $0x42
  jmp __alltraps
c0102d67:	e9 25 08 00 00       	jmp    c0103591 <__alltraps>

c0102d6c <vector67>:
.globl vector67
vector67:
  pushl $0
c0102d6c:	6a 00                	push   $0x0
  pushl $67
c0102d6e:	6a 43                	push   $0x43
  jmp __alltraps
c0102d70:	e9 1c 08 00 00       	jmp    c0103591 <__alltraps>

c0102d75 <vector68>:
.globl vector68
vector68:
  pushl $0
c0102d75:	6a 00                	push   $0x0
  pushl $68
c0102d77:	6a 44                	push   $0x44
  jmp __alltraps
c0102d79:	e9 13 08 00 00       	jmp    c0103591 <__alltraps>

c0102d7e <vector69>:
.globl vector69
vector69:
  pushl $0
c0102d7e:	6a 00                	push   $0x0
  pushl $69
c0102d80:	6a 45                	push   $0x45
  jmp __alltraps
c0102d82:	e9 0a 08 00 00       	jmp    c0103591 <__alltraps>

c0102d87 <vector70>:
.globl vector70
vector70:
  pushl $0
c0102d87:	6a 00                	push   $0x0
  pushl $70
c0102d89:	6a 46                	push   $0x46
  jmp __alltraps
c0102d8b:	e9 01 08 00 00       	jmp    c0103591 <__alltraps>

c0102d90 <vector71>:
.globl vector71
vector71:
  pushl $0
c0102d90:	6a 00                	push   $0x0
  pushl $71
c0102d92:	6a 47                	push   $0x47
  jmp __alltraps
c0102d94:	e9 f8 07 00 00       	jmp    c0103591 <__alltraps>

c0102d99 <vector72>:
.globl vector72
vector72:
  pushl $0
c0102d99:	6a 00                	push   $0x0
  pushl $72
c0102d9b:	6a 48                	push   $0x48
  jmp __alltraps
c0102d9d:	e9 ef 07 00 00       	jmp    c0103591 <__alltraps>

c0102da2 <vector73>:
.globl vector73
vector73:
  pushl $0
c0102da2:	6a 00                	push   $0x0
  pushl $73
c0102da4:	6a 49                	push   $0x49
  jmp __alltraps
c0102da6:	e9 e6 07 00 00       	jmp    c0103591 <__alltraps>

c0102dab <vector74>:
.globl vector74
vector74:
  pushl $0
c0102dab:	6a 00                	push   $0x0
  pushl $74
c0102dad:	6a 4a                	push   $0x4a
  jmp __alltraps
c0102daf:	e9 dd 07 00 00       	jmp    c0103591 <__alltraps>

c0102db4 <vector75>:
.globl vector75
vector75:
  pushl $0
c0102db4:	6a 00                	push   $0x0
  pushl $75
c0102db6:	6a 4b                	push   $0x4b
  jmp __alltraps
c0102db8:	e9 d4 07 00 00       	jmp    c0103591 <__alltraps>

c0102dbd <vector76>:
.globl vector76
vector76:
  pushl $0
c0102dbd:	6a 00                	push   $0x0
  pushl $76
c0102dbf:	6a 4c                	push   $0x4c
  jmp __alltraps
c0102dc1:	e9 cb 07 00 00       	jmp    c0103591 <__alltraps>

c0102dc6 <vector77>:
.globl vector77
vector77:
  pushl $0
c0102dc6:	6a 00                	push   $0x0
  pushl $77
c0102dc8:	6a 4d                	push   $0x4d
  jmp __alltraps
c0102dca:	e9 c2 07 00 00       	jmp    c0103591 <__alltraps>

c0102dcf <vector78>:
.globl vector78
vector78:
  pushl $0
c0102dcf:	6a 00                	push   $0x0
  pushl $78
c0102dd1:	6a 4e                	push   $0x4e
  jmp __alltraps
c0102dd3:	e9 b9 07 00 00       	jmp    c0103591 <__alltraps>

c0102dd8 <vector79>:
.globl vector79
vector79:
  pushl $0
c0102dd8:	6a 00                	push   $0x0
  pushl $79
c0102dda:	6a 4f                	push   $0x4f
  jmp __alltraps
c0102ddc:	e9 b0 07 00 00       	jmp    c0103591 <__alltraps>

c0102de1 <vector80>:
.globl vector80
vector80:
  pushl $0
c0102de1:	6a 00                	push   $0x0
  pushl $80
c0102de3:	6a 50                	push   $0x50
  jmp __alltraps
c0102de5:	e9 a7 07 00 00       	jmp    c0103591 <__alltraps>

c0102dea <vector81>:
.globl vector81
vector81:
  pushl $0
c0102dea:	6a 00                	push   $0x0
  pushl $81
c0102dec:	6a 51                	push   $0x51
  jmp __alltraps
c0102dee:	e9 9e 07 00 00       	jmp    c0103591 <__alltraps>

c0102df3 <vector82>:
.globl vector82
vector82:
  pushl $0
c0102df3:	6a 00                	push   $0x0
  pushl $82
c0102df5:	6a 52                	push   $0x52
  jmp __alltraps
c0102df7:	e9 95 07 00 00       	jmp    c0103591 <__alltraps>

c0102dfc <vector83>:
.globl vector83
vector83:
  pushl $0
c0102dfc:	6a 00                	push   $0x0
  pushl $83
c0102dfe:	6a 53                	push   $0x53
  jmp __alltraps
c0102e00:	e9 8c 07 00 00       	jmp    c0103591 <__alltraps>

c0102e05 <vector84>:
.globl vector84
vector84:
  pushl $0
c0102e05:	6a 00                	push   $0x0
  pushl $84
c0102e07:	6a 54                	push   $0x54
  jmp __alltraps
c0102e09:	e9 83 07 00 00       	jmp    c0103591 <__alltraps>

c0102e0e <vector85>:
.globl vector85
vector85:
  pushl $0
c0102e0e:	6a 00                	push   $0x0
  pushl $85
c0102e10:	6a 55                	push   $0x55
  jmp __alltraps
c0102e12:	e9 7a 07 00 00       	jmp    c0103591 <__alltraps>

c0102e17 <vector86>:
.globl vector86
vector86:
  pushl $0
c0102e17:	6a 00                	push   $0x0
  pushl $86
c0102e19:	6a 56                	push   $0x56
  jmp __alltraps
c0102e1b:	e9 71 07 00 00       	jmp    c0103591 <__alltraps>

c0102e20 <vector87>:
.globl vector87
vector87:
  pushl $0
c0102e20:	6a 00                	push   $0x0
  pushl $87
c0102e22:	6a 57                	push   $0x57
  jmp __alltraps
c0102e24:	e9 68 07 00 00       	jmp    c0103591 <__alltraps>

c0102e29 <vector88>:
.globl vector88
vector88:
  pushl $0
c0102e29:	6a 00                	push   $0x0
  pushl $88
c0102e2b:	6a 58                	push   $0x58
  jmp __alltraps
c0102e2d:	e9 5f 07 00 00       	jmp    c0103591 <__alltraps>

c0102e32 <vector89>:
.globl vector89
vector89:
  pushl $0
c0102e32:	6a 00                	push   $0x0
  pushl $89
c0102e34:	6a 59                	push   $0x59
  jmp __alltraps
c0102e36:	e9 56 07 00 00       	jmp    c0103591 <__alltraps>

c0102e3b <vector90>:
.globl vector90
vector90:
  pushl $0
c0102e3b:	6a 00                	push   $0x0
  pushl $90
c0102e3d:	6a 5a                	push   $0x5a
  jmp __alltraps
c0102e3f:	e9 4d 07 00 00       	jmp    c0103591 <__alltraps>

c0102e44 <vector91>:
.globl vector91
vector91:
  pushl $0
c0102e44:	6a 00                	push   $0x0
  pushl $91
c0102e46:	6a 5b                	push   $0x5b
  jmp __alltraps
c0102e48:	e9 44 07 00 00       	jmp    c0103591 <__alltraps>

c0102e4d <vector92>:
.globl vector92
vector92:
  pushl $0
c0102e4d:	6a 00                	push   $0x0
  pushl $92
c0102e4f:	6a 5c                	push   $0x5c
  jmp __alltraps
c0102e51:	e9 3b 07 00 00       	jmp    c0103591 <__alltraps>

c0102e56 <vector93>:
.globl vector93
vector93:
  pushl $0
c0102e56:	6a 00                	push   $0x0
  pushl $93
c0102e58:	6a 5d                	push   $0x5d
  jmp __alltraps
c0102e5a:	e9 32 07 00 00       	jmp    c0103591 <__alltraps>

c0102e5f <vector94>:
.globl vector94
vector94:
  pushl $0
c0102e5f:	6a 00                	push   $0x0
  pushl $94
c0102e61:	6a 5e                	push   $0x5e
  jmp __alltraps
c0102e63:	e9 29 07 00 00       	jmp    c0103591 <__alltraps>

c0102e68 <vector95>:
.globl vector95
vector95:
  pushl $0
c0102e68:	6a 00                	push   $0x0
  pushl $95
c0102e6a:	6a 5f                	push   $0x5f
  jmp __alltraps
c0102e6c:	e9 20 07 00 00       	jmp    c0103591 <__alltraps>

c0102e71 <vector96>:
.globl vector96
vector96:
  pushl $0
c0102e71:	6a 00                	push   $0x0
  pushl $96
c0102e73:	6a 60                	push   $0x60
  jmp __alltraps
c0102e75:	e9 17 07 00 00       	jmp    c0103591 <__alltraps>

c0102e7a <vector97>:
.globl vector97
vector97:
  pushl $0
c0102e7a:	6a 00                	push   $0x0
  pushl $97
c0102e7c:	6a 61                	push   $0x61
  jmp __alltraps
c0102e7e:	e9 0e 07 00 00       	jmp    c0103591 <__alltraps>

c0102e83 <vector98>:
.globl vector98
vector98:
  pushl $0
c0102e83:	6a 00                	push   $0x0
  pushl $98
c0102e85:	6a 62                	push   $0x62
  jmp __alltraps
c0102e87:	e9 05 07 00 00       	jmp    c0103591 <__alltraps>

c0102e8c <vector99>:
.globl vector99
vector99:
  pushl $0
c0102e8c:	6a 00                	push   $0x0
  pushl $99
c0102e8e:	6a 63                	push   $0x63
  jmp __alltraps
c0102e90:	e9 fc 06 00 00       	jmp    c0103591 <__alltraps>

c0102e95 <vector100>:
.globl vector100
vector100:
  pushl $0
c0102e95:	6a 00                	push   $0x0
  pushl $100
c0102e97:	6a 64                	push   $0x64
  jmp __alltraps
c0102e99:	e9 f3 06 00 00       	jmp    c0103591 <__alltraps>

c0102e9e <vector101>:
.globl vector101
vector101:
  pushl $0
c0102e9e:	6a 00                	push   $0x0
  pushl $101
c0102ea0:	6a 65                	push   $0x65
  jmp __alltraps
c0102ea2:	e9 ea 06 00 00       	jmp    c0103591 <__alltraps>

c0102ea7 <vector102>:
.globl vector102
vector102:
  pushl $0
c0102ea7:	6a 00                	push   $0x0
  pushl $102
c0102ea9:	6a 66                	push   $0x66
  jmp __alltraps
c0102eab:	e9 e1 06 00 00       	jmp    c0103591 <__alltraps>

c0102eb0 <vector103>:
.globl vector103
vector103:
  pushl $0
c0102eb0:	6a 00                	push   $0x0
  pushl $103
c0102eb2:	6a 67                	push   $0x67
  jmp __alltraps
c0102eb4:	e9 d8 06 00 00       	jmp    c0103591 <__alltraps>

c0102eb9 <vector104>:
.globl vector104
vector104:
  pushl $0
c0102eb9:	6a 00                	push   $0x0
  pushl $104
c0102ebb:	6a 68                	push   $0x68
  jmp __alltraps
c0102ebd:	e9 cf 06 00 00       	jmp    c0103591 <__alltraps>

c0102ec2 <vector105>:
.globl vector105
vector105:
  pushl $0
c0102ec2:	6a 00                	push   $0x0
  pushl $105
c0102ec4:	6a 69                	push   $0x69
  jmp __alltraps
c0102ec6:	e9 c6 06 00 00       	jmp    c0103591 <__alltraps>

c0102ecb <vector106>:
.globl vector106
vector106:
  pushl $0
c0102ecb:	6a 00                	push   $0x0
  pushl $106
c0102ecd:	6a 6a                	push   $0x6a
  jmp __alltraps
c0102ecf:	e9 bd 06 00 00       	jmp    c0103591 <__alltraps>

c0102ed4 <vector107>:
.globl vector107
vector107:
  pushl $0
c0102ed4:	6a 00                	push   $0x0
  pushl $107
c0102ed6:	6a 6b                	push   $0x6b
  jmp __alltraps
c0102ed8:	e9 b4 06 00 00       	jmp    c0103591 <__alltraps>

c0102edd <vector108>:
.globl vector108
vector108:
  pushl $0
c0102edd:	6a 00                	push   $0x0
  pushl $108
c0102edf:	6a 6c                	push   $0x6c
  jmp __alltraps
c0102ee1:	e9 ab 06 00 00       	jmp    c0103591 <__alltraps>

c0102ee6 <vector109>:
.globl vector109
vector109:
  pushl $0
c0102ee6:	6a 00                	push   $0x0
  pushl $109
c0102ee8:	6a 6d                	push   $0x6d
  jmp __alltraps
c0102eea:	e9 a2 06 00 00       	jmp    c0103591 <__alltraps>

c0102eef <vector110>:
.globl vector110
vector110:
  pushl $0
c0102eef:	6a 00                	push   $0x0
  pushl $110
c0102ef1:	6a 6e                	push   $0x6e
  jmp __alltraps
c0102ef3:	e9 99 06 00 00       	jmp    c0103591 <__alltraps>

c0102ef8 <vector111>:
.globl vector111
vector111:
  pushl $0
c0102ef8:	6a 00                	push   $0x0
  pushl $111
c0102efa:	6a 6f                	push   $0x6f
  jmp __alltraps
c0102efc:	e9 90 06 00 00       	jmp    c0103591 <__alltraps>

c0102f01 <vector112>:
.globl vector112
vector112:
  pushl $0
c0102f01:	6a 00                	push   $0x0
  pushl $112
c0102f03:	6a 70                	push   $0x70
  jmp __alltraps
c0102f05:	e9 87 06 00 00       	jmp    c0103591 <__alltraps>

c0102f0a <vector113>:
.globl vector113
vector113:
  pushl $0
c0102f0a:	6a 00                	push   $0x0
  pushl $113
c0102f0c:	6a 71                	push   $0x71
  jmp __alltraps
c0102f0e:	e9 7e 06 00 00       	jmp    c0103591 <__alltraps>

c0102f13 <vector114>:
.globl vector114
vector114:
  pushl $0
c0102f13:	6a 00                	push   $0x0
  pushl $114
c0102f15:	6a 72                	push   $0x72
  jmp __alltraps
c0102f17:	e9 75 06 00 00       	jmp    c0103591 <__alltraps>

c0102f1c <vector115>:
.globl vector115
vector115:
  pushl $0
c0102f1c:	6a 00                	push   $0x0
  pushl $115
c0102f1e:	6a 73                	push   $0x73
  jmp __alltraps
c0102f20:	e9 6c 06 00 00       	jmp    c0103591 <__alltraps>

c0102f25 <vector116>:
.globl vector116
vector116:
  pushl $0
c0102f25:	6a 00                	push   $0x0
  pushl $116
c0102f27:	6a 74                	push   $0x74
  jmp __alltraps
c0102f29:	e9 63 06 00 00       	jmp    c0103591 <__alltraps>

c0102f2e <vector117>:
.globl vector117
vector117:
  pushl $0
c0102f2e:	6a 00                	push   $0x0
  pushl $117
c0102f30:	6a 75                	push   $0x75
  jmp __alltraps
c0102f32:	e9 5a 06 00 00       	jmp    c0103591 <__alltraps>

c0102f37 <vector118>:
.globl vector118
vector118:
  pushl $0
c0102f37:	6a 00                	push   $0x0
  pushl $118
c0102f39:	6a 76                	push   $0x76
  jmp __alltraps
c0102f3b:	e9 51 06 00 00       	jmp    c0103591 <__alltraps>

c0102f40 <vector119>:
.globl vector119
vector119:
  pushl $0
c0102f40:	6a 00                	push   $0x0
  pushl $119
c0102f42:	6a 77                	push   $0x77
  jmp __alltraps
c0102f44:	e9 48 06 00 00       	jmp    c0103591 <__alltraps>

c0102f49 <vector120>:
.globl vector120
vector120:
  pushl $0
c0102f49:	6a 00                	push   $0x0
  pushl $120
c0102f4b:	6a 78                	push   $0x78
  jmp __alltraps
c0102f4d:	e9 3f 06 00 00       	jmp    c0103591 <__alltraps>

c0102f52 <vector121>:
.globl vector121
vector121:
  pushl $0
c0102f52:	6a 00                	push   $0x0
  pushl $121
c0102f54:	6a 79                	push   $0x79
  jmp __alltraps
c0102f56:	e9 36 06 00 00       	jmp    c0103591 <__alltraps>

c0102f5b <vector122>:
.globl vector122
vector122:
  pushl $0
c0102f5b:	6a 00                	push   $0x0
  pushl $122
c0102f5d:	6a 7a                	push   $0x7a
  jmp __alltraps
c0102f5f:	e9 2d 06 00 00       	jmp    c0103591 <__alltraps>

c0102f64 <vector123>:
.globl vector123
vector123:
  pushl $0
c0102f64:	6a 00                	push   $0x0
  pushl $123
c0102f66:	6a 7b                	push   $0x7b
  jmp __alltraps
c0102f68:	e9 24 06 00 00       	jmp    c0103591 <__alltraps>

c0102f6d <vector124>:
.globl vector124
vector124:
  pushl $0
c0102f6d:	6a 00                	push   $0x0
  pushl $124
c0102f6f:	6a 7c                	push   $0x7c
  jmp __alltraps
c0102f71:	e9 1b 06 00 00       	jmp    c0103591 <__alltraps>

c0102f76 <vector125>:
.globl vector125
vector125:
  pushl $0
c0102f76:	6a 00                	push   $0x0
  pushl $125
c0102f78:	6a 7d                	push   $0x7d
  jmp __alltraps
c0102f7a:	e9 12 06 00 00       	jmp    c0103591 <__alltraps>

c0102f7f <vector126>:
.globl vector126
vector126:
  pushl $0
c0102f7f:	6a 00                	push   $0x0
  pushl $126
c0102f81:	6a 7e                	push   $0x7e
  jmp __alltraps
c0102f83:	e9 09 06 00 00       	jmp    c0103591 <__alltraps>

c0102f88 <vector127>:
.globl vector127
vector127:
  pushl $0
c0102f88:	6a 00                	push   $0x0
  pushl $127
c0102f8a:	6a 7f                	push   $0x7f
  jmp __alltraps
c0102f8c:	e9 00 06 00 00       	jmp    c0103591 <__alltraps>

c0102f91 <vector128>:
.globl vector128
vector128:
  pushl $0
c0102f91:	6a 00                	push   $0x0
  pushl $128
c0102f93:	68 80 00 00 00       	push   $0x80
  jmp __alltraps
c0102f98:	e9 f4 05 00 00       	jmp    c0103591 <__alltraps>

c0102f9d <vector129>:
.globl vector129
vector129:
  pushl $0
c0102f9d:	6a 00                	push   $0x0
  pushl $129
c0102f9f:	68 81 00 00 00       	push   $0x81
  jmp __alltraps
c0102fa4:	e9 e8 05 00 00       	jmp    c0103591 <__alltraps>

c0102fa9 <vector130>:
.globl vector130
vector130:
  pushl $0
c0102fa9:	6a 00                	push   $0x0
  pushl $130
c0102fab:	68 82 00 00 00       	push   $0x82
  jmp __alltraps
c0102fb0:	e9 dc 05 00 00       	jmp    c0103591 <__alltraps>

c0102fb5 <vector131>:
.globl vector131
vector131:
  pushl $0
c0102fb5:	6a 00                	push   $0x0
  pushl $131
c0102fb7:	68 83 00 00 00       	push   $0x83
  jmp __alltraps
c0102fbc:	e9 d0 05 00 00       	jmp    c0103591 <__alltraps>

c0102fc1 <vector132>:
.globl vector132
vector132:
  pushl $0
c0102fc1:	6a 00                	push   $0x0
  pushl $132
c0102fc3:	68 84 00 00 00       	push   $0x84
  jmp __alltraps
c0102fc8:	e9 c4 05 00 00       	jmp    c0103591 <__alltraps>

c0102fcd <vector133>:
.globl vector133
vector133:
  pushl $0
c0102fcd:	6a 00                	push   $0x0
  pushl $133
c0102fcf:	68 85 00 00 00       	push   $0x85
  jmp __alltraps
c0102fd4:	e9 b8 05 00 00       	jmp    c0103591 <__alltraps>

c0102fd9 <vector134>:
.globl vector134
vector134:
  pushl $0
c0102fd9:	6a 00                	push   $0x0
  pushl $134
c0102fdb:	68 86 00 00 00       	push   $0x86
  jmp __alltraps
c0102fe0:	e9 ac 05 00 00       	jmp    c0103591 <__alltraps>

c0102fe5 <vector135>:
.globl vector135
vector135:
  pushl $0
c0102fe5:	6a 00                	push   $0x0
  pushl $135
c0102fe7:	68 87 00 00 00       	push   $0x87
  jmp __alltraps
c0102fec:	e9 a0 05 00 00       	jmp    c0103591 <__alltraps>

c0102ff1 <vector136>:
.globl vector136
vector136:
  pushl $0
c0102ff1:	6a 00                	push   $0x0
  pushl $136
c0102ff3:	68 88 00 00 00       	push   $0x88
  jmp __alltraps
c0102ff8:	e9 94 05 00 00       	jmp    c0103591 <__alltraps>

c0102ffd <vector137>:
.globl vector137
vector137:
  pushl $0
c0102ffd:	6a 00                	push   $0x0
  pushl $137
c0102fff:	68 89 00 00 00       	push   $0x89
  jmp __alltraps
c0103004:	e9 88 05 00 00       	jmp    c0103591 <__alltraps>

c0103009 <vector138>:
.globl vector138
vector138:
  pushl $0
c0103009:	6a 00                	push   $0x0
  pushl $138
c010300b:	68 8a 00 00 00       	push   $0x8a
  jmp __alltraps
c0103010:	e9 7c 05 00 00       	jmp    c0103591 <__alltraps>

c0103015 <vector139>:
.globl vector139
vector139:
  pushl $0
c0103015:	6a 00                	push   $0x0
  pushl $139
c0103017:	68 8b 00 00 00       	push   $0x8b
  jmp __alltraps
c010301c:	e9 70 05 00 00       	jmp    c0103591 <__alltraps>

c0103021 <vector140>:
.globl vector140
vector140:
  pushl $0
c0103021:	6a 00                	push   $0x0
  pushl $140
c0103023:	68 8c 00 00 00       	push   $0x8c
  jmp __alltraps
c0103028:	e9 64 05 00 00       	jmp    c0103591 <__alltraps>

c010302d <vector141>:
.globl vector141
vector141:
  pushl $0
c010302d:	6a 00                	push   $0x0
  pushl $141
c010302f:	68 8d 00 00 00       	push   $0x8d
  jmp __alltraps
c0103034:	e9 58 05 00 00       	jmp    c0103591 <__alltraps>

c0103039 <vector142>:
.globl vector142
vector142:
  pushl $0
c0103039:	6a 00                	push   $0x0
  pushl $142
c010303b:	68 8e 00 00 00       	push   $0x8e
  jmp __alltraps
c0103040:	e9 4c 05 00 00       	jmp    c0103591 <__alltraps>

c0103045 <vector143>:
.globl vector143
vector143:
  pushl $0
c0103045:	6a 00                	push   $0x0
  pushl $143
c0103047:	68 8f 00 00 00       	push   $0x8f
  jmp __alltraps
c010304c:	e9 40 05 00 00       	jmp    c0103591 <__alltraps>

c0103051 <vector144>:
.globl vector144
vector144:
  pushl $0
c0103051:	6a 00                	push   $0x0
  pushl $144
c0103053:	68 90 00 00 00       	push   $0x90
  jmp __alltraps
c0103058:	e9 34 05 00 00       	jmp    c0103591 <__alltraps>

c010305d <vector145>:
.globl vector145
vector145:
  pushl $0
c010305d:	6a 00                	push   $0x0
  pushl $145
c010305f:	68 91 00 00 00       	push   $0x91
  jmp __alltraps
c0103064:	e9 28 05 00 00       	jmp    c0103591 <__alltraps>

c0103069 <vector146>:
.globl vector146
vector146:
  pushl $0
c0103069:	6a 00                	push   $0x0
  pushl $146
c010306b:	68 92 00 00 00       	push   $0x92
  jmp __alltraps
c0103070:	e9 1c 05 00 00       	jmp    c0103591 <__alltraps>

c0103075 <vector147>:
.globl vector147
vector147:
  pushl $0
c0103075:	6a 00                	push   $0x0
  pushl $147
c0103077:	68 93 00 00 00       	push   $0x93
  jmp __alltraps
c010307c:	e9 10 05 00 00       	jmp    c0103591 <__alltraps>

c0103081 <vector148>:
.globl vector148
vector148:
  pushl $0
c0103081:	6a 00                	push   $0x0
  pushl $148
c0103083:	68 94 00 00 00       	push   $0x94
  jmp __alltraps
c0103088:	e9 04 05 00 00       	jmp    c0103591 <__alltraps>

c010308d <vector149>:
.globl vector149
vector149:
  pushl $0
c010308d:	6a 00                	push   $0x0
  pushl $149
c010308f:	68 95 00 00 00       	push   $0x95
  jmp __alltraps
c0103094:	e9 f8 04 00 00       	jmp    c0103591 <__alltraps>

c0103099 <vector150>:
.globl vector150
vector150:
  pushl $0
c0103099:	6a 00                	push   $0x0
  pushl $150
c010309b:	68 96 00 00 00       	push   $0x96
  jmp __alltraps
c01030a0:	e9 ec 04 00 00       	jmp    c0103591 <__alltraps>

c01030a5 <vector151>:
.globl vector151
vector151:
  pushl $0
c01030a5:	6a 00                	push   $0x0
  pushl $151
c01030a7:	68 97 00 00 00       	push   $0x97
  jmp __alltraps
c01030ac:	e9 e0 04 00 00       	jmp    c0103591 <__alltraps>

c01030b1 <vector152>:
.globl vector152
vector152:
  pushl $0
c01030b1:	6a 00                	push   $0x0
  pushl $152
c01030b3:	68 98 00 00 00       	push   $0x98
  jmp __alltraps
c01030b8:	e9 d4 04 00 00       	jmp    c0103591 <__alltraps>

c01030bd <vector153>:
.globl vector153
vector153:
  pushl $0
c01030bd:	6a 00                	push   $0x0
  pushl $153
c01030bf:	68 99 00 00 00       	push   $0x99
  jmp __alltraps
c01030c4:	e9 c8 04 00 00       	jmp    c0103591 <__alltraps>

c01030c9 <vector154>:
.globl vector154
vector154:
  pushl $0
c01030c9:	6a 00                	push   $0x0
  pushl $154
c01030cb:	68 9a 00 00 00       	push   $0x9a
  jmp __alltraps
c01030d0:	e9 bc 04 00 00       	jmp    c0103591 <__alltraps>

c01030d5 <vector155>:
.globl vector155
vector155:
  pushl $0
c01030d5:	6a 00                	push   $0x0
  pushl $155
c01030d7:	68 9b 00 00 00       	push   $0x9b
  jmp __alltraps
c01030dc:	e9 b0 04 00 00       	jmp    c0103591 <__alltraps>

c01030e1 <vector156>:
.globl vector156
vector156:
  pushl $0
c01030e1:	6a 00                	push   $0x0
  pushl $156
c01030e3:	68 9c 00 00 00       	push   $0x9c
  jmp __alltraps
c01030e8:	e9 a4 04 00 00       	jmp    c0103591 <__alltraps>

c01030ed <vector157>:
.globl vector157
vector157:
  pushl $0
c01030ed:	6a 00                	push   $0x0
  pushl $157
c01030ef:	68 9d 00 00 00       	push   $0x9d
  jmp __alltraps
c01030f4:	e9 98 04 00 00       	jmp    c0103591 <__alltraps>

c01030f9 <vector158>:
.globl vector158
vector158:
  pushl $0
c01030f9:	6a 00                	push   $0x0
  pushl $158
c01030fb:	68 9e 00 00 00       	push   $0x9e
  jmp __alltraps
c0103100:	e9 8c 04 00 00       	jmp    c0103591 <__alltraps>

c0103105 <vector159>:
.globl vector159
vector159:
  pushl $0
c0103105:	6a 00                	push   $0x0
  pushl $159
c0103107:	68 9f 00 00 00       	push   $0x9f
  jmp __alltraps
c010310c:	e9 80 04 00 00       	jmp    c0103591 <__alltraps>

c0103111 <vector160>:
.globl vector160
vector160:
  pushl $0
c0103111:	6a 00                	push   $0x0
  pushl $160
c0103113:	68 a0 00 00 00       	push   $0xa0
  jmp __alltraps
c0103118:	e9 74 04 00 00       	jmp    c0103591 <__alltraps>

c010311d <vector161>:
.globl vector161
vector161:
  pushl $0
c010311d:	6a 00                	push   $0x0
  pushl $161
c010311f:	68 a1 00 00 00       	push   $0xa1
  jmp __alltraps
c0103124:	e9 68 04 00 00       	jmp    c0103591 <__alltraps>

c0103129 <vector162>:
.globl vector162
vector162:
  pushl $0
c0103129:	6a 00                	push   $0x0
  pushl $162
c010312b:	68 a2 00 00 00       	push   $0xa2
  jmp __alltraps
c0103130:	e9 5c 04 00 00       	jmp    c0103591 <__alltraps>

c0103135 <vector163>:
.globl vector163
vector163:
  pushl $0
c0103135:	6a 00                	push   $0x0
  pushl $163
c0103137:	68 a3 00 00 00       	push   $0xa3
  jmp __alltraps
c010313c:	e9 50 04 00 00       	jmp    c0103591 <__alltraps>

c0103141 <vector164>:
.globl vector164
vector164:
  pushl $0
c0103141:	6a 00                	push   $0x0
  pushl $164
c0103143:	68 a4 00 00 00       	push   $0xa4
  jmp __alltraps
c0103148:	e9 44 04 00 00       	jmp    c0103591 <__alltraps>

c010314d <vector165>:
.globl vector165
vector165:
  pushl $0
c010314d:	6a 00                	push   $0x0
  pushl $165
c010314f:	68 a5 00 00 00       	push   $0xa5
  jmp __alltraps
c0103154:	e9 38 04 00 00       	jmp    c0103591 <__alltraps>

c0103159 <vector166>:
.globl vector166
vector166:
  pushl $0
c0103159:	6a 00                	push   $0x0
  pushl $166
c010315b:	68 a6 00 00 00       	push   $0xa6
  jmp __alltraps
c0103160:	e9 2c 04 00 00       	jmp    c0103591 <__alltraps>

c0103165 <vector167>:
.globl vector167
vector167:
  pushl $0
c0103165:	6a 00                	push   $0x0
  pushl $167
c0103167:	68 a7 00 00 00       	push   $0xa7
  jmp __alltraps
c010316c:	e9 20 04 00 00       	jmp    c0103591 <__alltraps>

c0103171 <vector168>:
.globl vector168
vector168:
  pushl $0
c0103171:	6a 00                	push   $0x0
  pushl $168
c0103173:	68 a8 00 00 00       	push   $0xa8
  jmp __alltraps
c0103178:	e9 14 04 00 00       	jmp    c0103591 <__alltraps>

c010317d <vector169>:
.globl vector169
vector169:
  pushl $0
c010317d:	6a 00                	push   $0x0
  pushl $169
c010317f:	68 a9 00 00 00       	push   $0xa9
  jmp __alltraps
c0103184:	e9 08 04 00 00       	jmp    c0103591 <__alltraps>

c0103189 <vector170>:
.globl vector170
vector170:
  pushl $0
c0103189:	6a 00                	push   $0x0
  pushl $170
c010318b:	68 aa 00 00 00       	push   $0xaa
  jmp __alltraps
c0103190:	e9 fc 03 00 00       	jmp    c0103591 <__alltraps>

c0103195 <vector171>:
.globl vector171
vector171:
  pushl $0
c0103195:	6a 00                	push   $0x0
  pushl $171
c0103197:	68 ab 00 00 00       	push   $0xab
  jmp __alltraps
c010319c:	e9 f0 03 00 00       	jmp    c0103591 <__alltraps>

c01031a1 <vector172>:
.globl vector172
vector172:
  pushl $0
c01031a1:	6a 00                	push   $0x0
  pushl $172
c01031a3:	68 ac 00 00 00       	push   $0xac
  jmp __alltraps
c01031a8:	e9 e4 03 00 00       	jmp    c0103591 <__alltraps>

c01031ad <vector173>:
.globl vector173
vector173:
  pushl $0
c01031ad:	6a 00                	push   $0x0
  pushl $173
c01031af:	68 ad 00 00 00       	push   $0xad
  jmp __alltraps
c01031b4:	e9 d8 03 00 00       	jmp    c0103591 <__alltraps>

c01031b9 <vector174>:
.globl vector174
vector174:
  pushl $0
c01031b9:	6a 00                	push   $0x0
  pushl $174
c01031bb:	68 ae 00 00 00       	push   $0xae
  jmp __alltraps
c01031c0:	e9 cc 03 00 00       	jmp    c0103591 <__alltraps>

c01031c5 <vector175>:
.globl vector175
vector175:
  pushl $0
c01031c5:	6a 00                	push   $0x0
  pushl $175
c01031c7:	68 af 00 00 00       	push   $0xaf
  jmp __alltraps
c01031cc:	e9 c0 03 00 00       	jmp    c0103591 <__alltraps>

c01031d1 <vector176>:
.globl vector176
vector176:
  pushl $0
c01031d1:	6a 00                	push   $0x0
  pushl $176
c01031d3:	68 b0 00 00 00       	push   $0xb0
  jmp __alltraps
c01031d8:	e9 b4 03 00 00       	jmp    c0103591 <__alltraps>

c01031dd <vector177>:
.globl vector177
vector177:
  pushl $0
c01031dd:	6a 00                	push   $0x0
  pushl $177
c01031df:	68 b1 00 00 00       	push   $0xb1
  jmp __alltraps
c01031e4:	e9 a8 03 00 00       	jmp    c0103591 <__alltraps>

c01031e9 <vector178>:
.globl vector178
vector178:
  pushl $0
c01031e9:	6a 00                	push   $0x0
  pushl $178
c01031eb:	68 b2 00 00 00       	push   $0xb2
  jmp __alltraps
c01031f0:	e9 9c 03 00 00       	jmp    c0103591 <__alltraps>

c01031f5 <vector179>:
.globl vector179
vector179:
  pushl $0
c01031f5:	6a 00                	push   $0x0
  pushl $179
c01031f7:	68 b3 00 00 00       	push   $0xb3
  jmp __alltraps
c01031fc:	e9 90 03 00 00       	jmp    c0103591 <__alltraps>

c0103201 <vector180>:
.globl vector180
vector180:
  pushl $0
c0103201:	6a 00                	push   $0x0
  pushl $180
c0103203:	68 b4 00 00 00       	push   $0xb4
  jmp __alltraps
c0103208:	e9 84 03 00 00       	jmp    c0103591 <__alltraps>

c010320d <vector181>:
.globl vector181
vector181:
  pushl $0
c010320d:	6a 00                	push   $0x0
  pushl $181
c010320f:	68 b5 00 00 00       	push   $0xb5
  jmp __alltraps
c0103214:	e9 78 03 00 00       	jmp    c0103591 <__alltraps>

c0103219 <vector182>:
.globl vector182
vector182:
  pushl $0
c0103219:	6a 00                	push   $0x0
  pushl $182
c010321b:	68 b6 00 00 00       	push   $0xb6
  jmp __alltraps
c0103220:	e9 6c 03 00 00       	jmp    c0103591 <__alltraps>

c0103225 <vector183>:
.globl vector183
vector183:
  pushl $0
c0103225:	6a 00                	push   $0x0
  pushl $183
c0103227:	68 b7 00 00 00       	push   $0xb7
  jmp __alltraps
c010322c:	e9 60 03 00 00       	jmp    c0103591 <__alltraps>

c0103231 <vector184>:
.globl vector184
vector184:
  pushl $0
c0103231:	6a 00                	push   $0x0
  pushl $184
c0103233:	68 b8 00 00 00       	push   $0xb8
  jmp __alltraps
c0103238:	e9 54 03 00 00       	jmp    c0103591 <__alltraps>

c010323d <vector185>:
.globl vector185
vector185:
  pushl $0
c010323d:	6a 00                	push   $0x0
  pushl $185
c010323f:	68 b9 00 00 00       	push   $0xb9
  jmp __alltraps
c0103244:	e9 48 03 00 00       	jmp    c0103591 <__alltraps>

c0103249 <vector186>:
.globl vector186
vector186:
  pushl $0
c0103249:	6a 00                	push   $0x0
  pushl $186
c010324b:	68 ba 00 00 00       	push   $0xba
  jmp __alltraps
c0103250:	e9 3c 03 00 00       	jmp    c0103591 <__alltraps>

c0103255 <vector187>:
.globl vector187
vector187:
  pushl $0
c0103255:	6a 00                	push   $0x0
  pushl $187
c0103257:	68 bb 00 00 00       	push   $0xbb
  jmp __alltraps
c010325c:	e9 30 03 00 00       	jmp    c0103591 <__alltraps>

c0103261 <vector188>:
.globl vector188
vector188:
  pushl $0
c0103261:	6a 00                	push   $0x0
  pushl $188
c0103263:	68 bc 00 00 00       	push   $0xbc
  jmp __alltraps
c0103268:	e9 24 03 00 00       	jmp    c0103591 <__alltraps>

c010326d <vector189>:
.globl vector189
vector189:
  pushl $0
c010326d:	6a 00                	push   $0x0
  pushl $189
c010326f:	68 bd 00 00 00       	push   $0xbd
  jmp __alltraps
c0103274:	e9 18 03 00 00       	jmp    c0103591 <__alltraps>

c0103279 <vector190>:
.globl vector190
vector190:
  pushl $0
c0103279:	6a 00                	push   $0x0
  pushl $190
c010327b:	68 be 00 00 00       	push   $0xbe
  jmp __alltraps
c0103280:	e9 0c 03 00 00       	jmp    c0103591 <__alltraps>

c0103285 <vector191>:
.globl vector191
vector191:
  pushl $0
c0103285:	6a 00                	push   $0x0
  pushl $191
c0103287:	68 bf 00 00 00       	push   $0xbf
  jmp __alltraps
c010328c:	e9 00 03 00 00       	jmp    c0103591 <__alltraps>

c0103291 <vector192>:
.globl vector192
vector192:
  pushl $0
c0103291:	6a 00                	push   $0x0
  pushl $192
c0103293:	68 c0 00 00 00       	push   $0xc0
  jmp __alltraps
c0103298:	e9 f4 02 00 00       	jmp    c0103591 <__alltraps>

c010329d <vector193>:
.globl vector193
vector193:
  pushl $0
c010329d:	6a 00                	push   $0x0
  pushl $193
c010329f:	68 c1 00 00 00       	push   $0xc1
  jmp __alltraps
c01032a4:	e9 e8 02 00 00       	jmp    c0103591 <__alltraps>

c01032a9 <vector194>:
.globl vector194
vector194:
  pushl $0
c01032a9:	6a 00                	push   $0x0
  pushl $194
c01032ab:	68 c2 00 00 00       	push   $0xc2
  jmp __alltraps
c01032b0:	e9 dc 02 00 00       	jmp    c0103591 <__alltraps>

c01032b5 <vector195>:
.globl vector195
vector195:
  pushl $0
c01032b5:	6a 00                	push   $0x0
  pushl $195
c01032b7:	68 c3 00 00 00       	push   $0xc3
  jmp __alltraps
c01032bc:	e9 d0 02 00 00       	jmp    c0103591 <__alltraps>

c01032c1 <vector196>:
.globl vector196
vector196:
  pushl $0
c01032c1:	6a 00                	push   $0x0
  pushl $196
c01032c3:	68 c4 00 00 00       	push   $0xc4
  jmp __alltraps
c01032c8:	e9 c4 02 00 00       	jmp    c0103591 <__alltraps>

c01032cd <vector197>:
.globl vector197
vector197:
  pushl $0
c01032cd:	6a 00                	push   $0x0
  pushl $197
c01032cf:	68 c5 00 00 00       	push   $0xc5
  jmp __alltraps
c01032d4:	e9 b8 02 00 00       	jmp    c0103591 <__alltraps>

c01032d9 <vector198>:
.globl vector198
vector198:
  pushl $0
c01032d9:	6a 00                	push   $0x0
  pushl $198
c01032db:	68 c6 00 00 00       	push   $0xc6
  jmp __alltraps
c01032e0:	e9 ac 02 00 00       	jmp    c0103591 <__alltraps>

c01032e5 <vector199>:
.globl vector199
vector199:
  pushl $0
c01032e5:	6a 00                	push   $0x0
  pushl $199
c01032e7:	68 c7 00 00 00       	push   $0xc7
  jmp __alltraps
c01032ec:	e9 a0 02 00 00       	jmp    c0103591 <__alltraps>

c01032f1 <vector200>:
.globl vector200
vector200:
  pushl $0
c01032f1:	6a 00                	push   $0x0
  pushl $200
c01032f3:	68 c8 00 00 00       	push   $0xc8
  jmp __alltraps
c01032f8:	e9 94 02 00 00       	jmp    c0103591 <__alltraps>

c01032fd <vector201>:
.globl vector201
vector201:
  pushl $0
c01032fd:	6a 00                	push   $0x0
  pushl $201
c01032ff:	68 c9 00 00 00       	push   $0xc9
  jmp __alltraps
c0103304:	e9 88 02 00 00       	jmp    c0103591 <__alltraps>

c0103309 <vector202>:
.globl vector202
vector202:
  pushl $0
c0103309:	6a 00                	push   $0x0
  pushl $202
c010330b:	68 ca 00 00 00       	push   $0xca
  jmp __alltraps
c0103310:	e9 7c 02 00 00       	jmp    c0103591 <__alltraps>

c0103315 <vector203>:
.globl vector203
vector203:
  pushl $0
c0103315:	6a 00                	push   $0x0
  pushl $203
c0103317:	68 cb 00 00 00       	push   $0xcb
  jmp __alltraps
c010331c:	e9 70 02 00 00       	jmp    c0103591 <__alltraps>

c0103321 <vector204>:
.globl vector204
vector204:
  pushl $0
c0103321:	6a 00                	push   $0x0
  pushl $204
c0103323:	68 cc 00 00 00       	push   $0xcc
  jmp __alltraps
c0103328:	e9 64 02 00 00       	jmp    c0103591 <__alltraps>

c010332d <vector205>:
.globl vector205
vector205:
  pushl $0
c010332d:	6a 00                	push   $0x0
  pushl $205
c010332f:	68 cd 00 00 00       	push   $0xcd
  jmp __alltraps
c0103334:	e9 58 02 00 00       	jmp    c0103591 <__alltraps>

c0103339 <vector206>:
.globl vector206
vector206:
  pushl $0
c0103339:	6a 00                	push   $0x0
  pushl $206
c010333b:	68 ce 00 00 00       	push   $0xce
  jmp __alltraps
c0103340:	e9 4c 02 00 00       	jmp    c0103591 <__alltraps>

c0103345 <vector207>:
.globl vector207
vector207:
  pushl $0
c0103345:	6a 00                	push   $0x0
  pushl $207
c0103347:	68 cf 00 00 00       	push   $0xcf
  jmp __alltraps
c010334c:	e9 40 02 00 00       	jmp    c0103591 <__alltraps>

c0103351 <vector208>:
.globl vector208
vector208:
  pushl $0
c0103351:	6a 00                	push   $0x0
  pushl $208
c0103353:	68 d0 00 00 00       	push   $0xd0
  jmp __alltraps
c0103358:	e9 34 02 00 00       	jmp    c0103591 <__alltraps>

c010335d <vector209>:
.globl vector209
vector209:
  pushl $0
c010335d:	6a 00                	push   $0x0
  pushl $209
c010335f:	68 d1 00 00 00       	push   $0xd1
  jmp __alltraps
c0103364:	e9 28 02 00 00       	jmp    c0103591 <__alltraps>

c0103369 <vector210>:
.globl vector210
vector210:
  pushl $0
c0103369:	6a 00                	push   $0x0
  pushl $210
c010336b:	68 d2 00 00 00       	push   $0xd2
  jmp __alltraps
c0103370:	e9 1c 02 00 00       	jmp    c0103591 <__alltraps>

c0103375 <vector211>:
.globl vector211
vector211:
  pushl $0
c0103375:	6a 00                	push   $0x0
  pushl $211
c0103377:	68 d3 00 00 00       	push   $0xd3
  jmp __alltraps
c010337c:	e9 10 02 00 00       	jmp    c0103591 <__alltraps>

c0103381 <vector212>:
.globl vector212
vector212:
  pushl $0
c0103381:	6a 00                	push   $0x0
  pushl $212
c0103383:	68 d4 00 00 00       	push   $0xd4
  jmp __alltraps
c0103388:	e9 04 02 00 00       	jmp    c0103591 <__alltraps>

c010338d <vector213>:
.globl vector213
vector213:
  pushl $0
c010338d:	6a 00                	push   $0x0
  pushl $213
c010338f:	68 d5 00 00 00       	push   $0xd5
  jmp __alltraps
c0103394:	e9 f8 01 00 00       	jmp    c0103591 <__alltraps>

c0103399 <vector214>:
.globl vector214
vector214:
  pushl $0
c0103399:	6a 00                	push   $0x0
  pushl $214
c010339b:	68 d6 00 00 00       	push   $0xd6
  jmp __alltraps
c01033a0:	e9 ec 01 00 00       	jmp    c0103591 <__alltraps>

c01033a5 <vector215>:
.globl vector215
vector215:
  pushl $0
c01033a5:	6a 00                	push   $0x0
  pushl $215
c01033a7:	68 d7 00 00 00       	push   $0xd7
  jmp __alltraps
c01033ac:	e9 e0 01 00 00       	jmp    c0103591 <__alltraps>

c01033b1 <vector216>:
.globl vector216
vector216:
  pushl $0
c01033b1:	6a 00                	push   $0x0
  pushl $216
c01033b3:	68 d8 00 00 00       	push   $0xd8
  jmp __alltraps
c01033b8:	e9 d4 01 00 00       	jmp    c0103591 <__alltraps>

c01033bd <vector217>:
.globl vector217
vector217:
  pushl $0
c01033bd:	6a 00                	push   $0x0
  pushl $217
c01033bf:	68 d9 00 00 00       	push   $0xd9
  jmp __alltraps
c01033c4:	e9 c8 01 00 00       	jmp    c0103591 <__alltraps>

c01033c9 <vector218>:
.globl vector218
vector218:
  pushl $0
c01033c9:	6a 00                	push   $0x0
  pushl $218
c01033cb:	68 da 00 00 00       	push   $0xda
  jmp __alltraps
c01033d0:	e9 bc 01 00 00       	jmp    c0103591 <__alltraps>

c01033d5 <vector219>:
.globl vector219
vector219:
  pushl $0
c01033d5:	6a 00                	push   $0x0
  pushl $219
c01033d7:	68 db 00 00 00       	push   $0xdb
  jmp __alltraps
c01033dc:	e9 b0 01 00 00       	jmp    c0103591 <__alltraps>

c01033e1 <vector220>:
.globl vector220
vector220:
  pushl $0
c01033e1:	6a 00                	push   $0x0
  pushl $220
c01033e3:	68 dc 00 00 00       	push   $0xdc
  jmp __alltraps
c01033e8:	e9 a4 01 00 00       	jmp    c0103591 <__alltraps>

c01033ed <vector221>:
.globl vector221
vector221:
  pushl $0
c01033ed:	6a 00                	push   $0x0
  pushl $221
c01033ef:	68 dd 00 00 00       	push   $0xdd
  jmp __alltraps
c01033f4:	e9 98 01 00 00       	jmp    c0103591 <__alltraps>

c01033f9 <vector222>:
.globl vector222
vector222:
  pushl $0
c01033f9:	6a 00                	push   $0x0
  pushl $222
c01033fb:	68 de 00 00 00       	push   $0xde
  jmp __alltraps
c0103400:	e9 8c 01 00 00       	jmp    c0103591 <__alltraps>

c0103405 <vector223>:
.globl vector223
vector223:
  pushl $0
c0103405:	6a 00                	push   $0x0
  pushl $223
c0103407:	68 df 00 00 00       	push   $0xdf
  jmp __alltraps
c010340c:	e9 80 01 00 00       	jmp    c0103591 <__alltraps>

c0103411 <vector224>:
.globl vector224
vector224:
  pushl $0
c0103411:	6a 00                	push   $0x0
  pushl $224
c0103413:	68 e0 00 00 00       	push   $0xe0
  jmp __alltraps
c0103418:	e9 74 01 00 00       	jmp    c0103591 <__alltraps>

c010341d <vector225>:
.globl vector225
vector225:
  pushl $0
c010341d:	6a 00                	push   $0x0
  pushl $225
c010341f:	68 e1 00 00 00       	push   $0xe1
  jmp __alltraps
c0103424:	e9 68 01 00 00       	jmp    c0103591 <__alltraps>

c0103429 <vector226>:
.globl vector226
vector226:
  pushl $0
c0103429:	6a 00                	push   $0x0
  pushl $226
c010342b:	68 e2 00 00 00       	push   $0xe2
  jmp __alltraps
c0103430:	e9 5c 01 00 00       	jmp    c0103591 <__alltraps>

c0103435 <vector227>:
.globl vector227
vector227:
  pushl $0
c0103435:	6a 00                	push   $0x0
  pushl $227
c0103437:	68 e3 00 00 00       	push   $0xe3
  jmp __alltraps
c010343c:	e9 50 01 00 00       	jmp    c0103591 <__alltraps>

c0103441 <vector228>:
.globl vector228
vector228:
  pushl $0
c0103441:	6a 00                	push   $0x0
  pushl $228
c0103443:	68 e4 00 00 00       	push   $0xe4
  jmp __alltraps
c0103448:	e9 44 01 00 00       	jmp    c0103591 <__alltraps>

c010344d <vector229>:
.globl vector229
vector229:
  pushl $0
c010344d:	6a 00                	push   $0x0
  pushl $229
c010344f:	68 e5 00 00 00       	push   $0xe5
  jmp __alltraps
c0103454:	e9 38 01 00 00       	jmp    c0103591 <__alltraps>

c0103459 <vector230>:
.globl vector230
vector230:
  pushl $0
c0103459:	6a 00                	push   $0x0
  pushl $230
c010345b:	68 e6 00 00 00       	push   $0xe6
  jmp __alltraps
c0103460:	e9 2c 01 00 00       	jmp    c0103591 <__alltraps>

c0103465 <vector231>:
.globl vector231
vector231:
  pushl $0
c0103465:	6a 00                	push   $0x0
  pushl $231
c0103467:	68 e7 00 00 00       	push   $0xe7
  jmp __alltraps
c010346c:	e9 20 01 00 00       	jmp    c0103591 <__alltraps>

c0103471 <vector232>:
.globl vector232
vector232:
  pushl $0
c0103471:	6a 00                	push   $0x0
  pushl $232
c0103473:	68 e8 00 00 00       	push   $0xe8
  jmp __alltraps
c0103478:	e9 14 01 00 00       	jmp    c0103591 <__alltraps>

c010347d <vector233>:
.globl vector233
vector233:
  pushl $0
c010347d:	6a 00                	push   $0x0
  pushl $233
c010347f:	68 e9 00 00 00       	push   $0xe9
  jmp __alltraps
c0103484:	e9 08 01 00 00       	jmp    c0103591 <__alltraps>

c0103489 <vector234>:
.globl vector234
vector234:
  pushl $0
c0103489:	6a 00                	push   $0x0
  pushl $234
c010348b:	68 ea 00 00 00       	push   $0xea
  jmp __alltraps
c0103490:	e9 fc 00 00 00       	jmp    c0103591 <__alltraps>

c0103495 <vector235>:
.globl vector235
vector235:
  pushl $0
c0103495:	6a 00                	push   $0x0
  pushl $235
c0103497:	68 eb 00 00 00       	push   $0xeb
  jmp __alltraps
c010349c:	e9 f0 00 00 00       	jmp    c0103591 <__alltraps>

c01034a1 <vector236>:
.globl vector236
vector236:
  pushl $0
c01034a1:	6a 00                	push   $0x0
  pushl $236
c01034a3:	68 ec 00 00 00       	push   $0xec
  jmp __alltraps
c01034a8:	e9 e4 00 00 00       	jmp    c0103591 <__alltraps>

c01034ad <vector237>:
.globl vector237
vector237:
  pushl $0
c01034ad:	6a 00                	push   $0x0
  pushl $237
c01034af:	68 ed 00 00 00       	push   $0xed
  jmp __alltraps
c01034b4:	e9 d8 00 00 00       	jmp    c0103591 <__alltraps>

c01034b9 <vector238>:
.globl vector238
vector238:
  pushl $0
c01034b9:	6a 00                	push   $0x0
  pushl $238
c01034bb:	68 ee 00 00 00       	push   $0xee
  jmp __alltraps
c01034c0:	e9 cc 00 00 00       	jmp    c0103591 <__alltraps>

c01034c5 <vector239>:
.globl vector239
vector239:
  pushl $0
c01034c5:	6a 00                	push   $0x0
  pushl $239
c01034c7:	68 ef 00 00 00       	push   $0xef
  jmp __alltraps
c01034cc:	e9 c0 00 00 00       	jmp    c0103591 <__alltraps>

c01034d1 <vector240>:
.globl vector240
vector240:
  pushl $0
c01034d1:	6a 00                	push   $0x0
  pushl $240
c01034d3:	68 f0 00 00 00       	push   $0xf0
  jmp __alltraps
c01034d8:	e9 b4 00 00 00       	jmp    c0103591 <__alltraps>

c01034dd <vector241>:
.globl vector241
vector241:
  pushl $0
c01034dd:	6a 00                	push   $0x0
  pushl $241
c01034df:	68 f1 00 00 00       	push   $0xf1
  jmp __alltraps
c01034e4:	e9 a8 00 00 00       	jmp    c0103591 <__alltraps>

c01034e9 <vector242>:
.globl vector242
vector242:
  pushl $0
c01034e9:	6a 00                	push   $0x0
  pushl $242
c01034eb:	68 f2 00 00 00       	push   $0xf2
  jmp __alltraps
c01034f0:	e9 9c 00 00 00       	jmp    c0103591 <__alltraps>

c01034f5 <vector243>:
.globl vector243
vector243:
  pushl $0
c01034f5:	6a 00                	push   $0x0
  pushl $243
c01034f7:	68 f3 00 00 00       	push   $0xf3
  jmp __alltraps
c01034fc:	e9 90 00 00 00       	jmp    c0103591 <__alltraps>

c0103501 <vector244>:
.globl vector244
vector244:
  pushl $0
c0103501:	6a 00                	push   $0x0
  pushl $244
c0103503:	68 f4 00 00 00       	push   $0xf4
  jmp __alltraps
c0103508:	e9 84 00 00 00       	jmp    c0103591 <__alltraps>

c010350d <vector245>:
.globl vector245
vector245:
  pushl $0
c010350d:	6a 00                	push   $0x0
  pushl $245
c010350f:	68 f5 00 00 00       	push   $0xf5
  jmp __alltraps
c0103514:	e9 78 00 00 00       	jmp    c0103591 <__alltraps>

c0103519 <vector246>:
.globl vector246
vector246:
  pushl $0
c0103519:	6a 00                	push   $0x0
  pushl $246
c010351b:	68 f6 00 00 00       	push   $0xf6
  jmp __alltraps
c0103520:	e9 6c 00 00 00       	jmp    c0103591 <__alltraps>

c0103525 <vector247>:
.globl vector247
vector247:
  pushl $0
c0103525:	6a 00                	push   $0x0
  pushl $247
c0103527:	68 f7 00 00 00       	push   $0xf7
  jmp __alltraps
c010352c:	e9 60 00 00 00       	jmp    c0103591 <__alltraps>

c0103531 <vector248>:
.globl vector248
vector248:
  pushl $0
c0103531:	6a 00                	push   $0x0
  pushl $248
c0103533:	68 f8 00 00 00       	push   $0xf8
  jmp __alltraps
c0103538:	e9 54 00 00 00       	jmp    c0103591 <__alltraps>

c010353d <vector249>:
.globl vector249
vector249:
  pushl $0
c010353d:	6a 00                	push   $0x0
  pushl $249
c010353f:	68 f9 00 00 00       	push   $0xf9
  jmp __alltraps
c0103544:	e9 48 00 00 00       	jmp    c0103591 <__alltraps>

c0103549 <vector250>:
.globl vector250
vector250:
  pushl $0
c0103549:	6a 00                	push   $0x0
  pushl $250
c010354b:	68 fa 00 00 00       	push   $0xfa
  jmp __alltraps
c0103550:	e9 3c 00 00 00       	jmp    c0103591 <__alltraps>

c0103555 <vector251>:
.globl vector251
vector251:
  pushl $0
c0103555:	6a 00                	push   $0x0
  pushl $251
c0103557:	68 fb 00 00 00       	push   $0xfb
  jmp __alltraps
c010355c:	e9 30 00 00 00       	jmp    c0103591 <__alltraps>

c0103561 <vector252>:
.globl vector252
vector252:
  pushl $0
c0103561:	6a 00                	push   $0x0
  pushl $252
c0103563:	68 fc 00 00 00       	push   $0xfc
  jmp __alltraps
c0103568:	e9 24 00 00 00       	jmp    c0103591 <__alltraps>

c010356d <vector253>:
.globl vector253
vector253:
  pushl $0
c010356d:	6a 00                	push   $0x0
  pushl $253
c010356f:	68 fd 00 00 00       	push   $0xfd
  jmp __alltraps
c0103574:	e9 18 00 00 00       	jmp    c0103591 <__alltraps>

c0103579 <vector254>:
.globl vector254
vector254:
  pushl $0
c0103579:	6a 00                	push   $0x0
  pushl $254
c010357b:	68 fe 00 00 00       	push   $0xfe
  jmp __alltraps
c0103580:	e9 0c 00 00 00       	jmp    c0103591 <__alltraps>

c0103585 <vector255>:
.globl vector255
vector255:
  pushl $0
c0103585:	6a 00                	push   $0x0
  pushl $255
c0103587:	68 ff 00 00 00       	push   $0xff
  jmp __alltraps
c010358c:	e9 00 00 00 00       	jmp    c0103591 <__alltraps>

c0103591 <__alltraps>:
.text
.globl __alltraps
__alltraps:
    # push registers to build a trap frame
    # therefore make the stack look like a struct trapframe
    pushl %ds
c0103591:	1e                   	push   %ds
    pushl %es
c0103592:	06                   	push   %es
    pushl %fs
c0103593:	0f a0                	push   %fs
    pushl %gs
c0103595:	0f a8                	push   %gs
    pushal
c0103597:	60                   	pusha  

    # load GD_KDATA into %ds and %es to set up data segments for kernel
    movl $GD_KDATA, %eax
c0103598:	b8 10 00 00 00       	mov    $0x10,%eax
    movw %ax, %ds
c010359d:	8e d8                	mov    %eax,%ds
    movw %ax, %es
c010359f:	8e c0                	mov    %eax,%es

    # push %esp to pass a pointer to the trapframe as an argument to trap()
    pushl %esp
c01035a1:	54                   	push   %esp

    # call trap(tf), where tf=%esp
    call trap
c01035a2:	e8 e3 f4 ff ff       	call   c0102a8a <trap>

    # pop the pushed stack pointer
    popl %esp
c01035a7:	5c                   	pop    %esp

c01035a8 <__trapret>:

    # return falls through to trapret...
.globl __trapret
__trapret:
    # restore registers from stack
    popal
c01035a8:	61                   	popa   

    # restore %ds, %es, %fs and %gs
    popl %gs
c01035a9:	0f a9                	pop    %gs
    popl %fs
c01035ab:	0f a1                	pop    %fs
    popl %es
c01035ad:	07                   	pop    %es
    popl %ds
c01035ae:	1f                   	pop    %ds

    # get rid of the trap number and error code
    addl $0x8, %esp
c01035af:	83 c4 08             	add    $0x8,%esp
    iret
c01035b2:	cf                   	iret   

c01035b3 <forkrets>:

.globl forkrets
forkrets:
    # set stack to this new process's trapframe
    movl 4(%esp), %esp
c01035b3:	8b 64 24 04          	mov    0x4(%esp),%esp
    jmp __trapret
c01035b7:	eb ef                	jmp    c01035a8 <__trapret>

c01035b9 <lock_init>:
#define local_intr_restore(x)   __intr_restore(x);

typedef volatile bool lock_t;

static inline void
lock_init(lock_t *lock) {
c01035b9:	55                   	push   %ebp
c01035ba:	89 e5                	mov    %esp,%ebp
    *lock = 0;
c01035bc:	8b 45 08             	mov    0x8(%ebp),%eax
c01035bf:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
c01035c5:	90                   	nop
c01035c6:	5d                   	pop    %ebp
c01035c7:	c3                   	ret    

c01035c8 <mm_count>:
bool user_mem_check(struct mm_struct *mm, uintptr_t start, size_t len, bool write);
bool copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable);
bool copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len);

static inline int
mm_count(struct mm_struct *mm) {
c01035c8:	55                   	push   %ebp
c01035c9:	89 e5                	mov    %esp,%ebp
    return mm->mm_count;
c01035cb:	8b 45 08             	mov    0x8(%ebp),%eax
c01035ce:	8b 40 18             	mov    0x18(%eax),%eax
}
c01035d1:	5d                   	pop    %ebp
c01035d2:	c3                   	ret    

c01035d3 <set_mm_count>:

static inline void
set_mm_count(struct mm_struct *mm, int val) {
c01035d3:	55                   	push   %ebp
c01035d4:	89 e5                	mov    %esp,%ebp
    mm->mm_count = val;
c01035d6:	8b 45 08             	mov    0x8(%ebp),%eax
c01035d9:	8b 55 0c             	mov    0xc(%ebp),%edx
c01035dc:	89 50 18             	mov    %edx,0x18(%eax)
}
c01035df:	90                   	nop
c01035e0:	5d                   	pop    %ebp
c01035e1:	c3                   	ret    

c01035e2 <pa2page>:
page2pa(struct Page *page) {
    return page2ppn(page) << PGSHIFT;
}

static inline struct Page *
pa2page(uintptr_t pa) {
c01035e2:	55                   	push   %ebp
c01035e3:	89 e5                	mov    %esp,%ebp
c01035e5:	83 ec 08             	sub    $0x8,%esp
    if (PPN(pa) >= npage) {
c01035e8:	8b 45 08             	mov    0x8(%ebp),%eax
c01035eb:	c1 e8 0c             	shr    $0xc,%eax
c01035ee:	89 c2                	mov    %eax,%edx
c01035f0:	a1 80 0f 1b c0       	mov    0xc01b0f80,%eax
c01035f5:	39 c2                	cmp    %eax,%edx
c01035f7:	72 14                	jb     c010360d <pa2page+0x2b>
        panic("pa2page called with invalid pa");
c01035f9:	83 ec 04             	sub    $0x4,%esp
c01035fc:	68 d0 c2 10 c0       	push   $0xc010c2d0
c0103601:	6a 5e                	push   $0x5e
c0103603:	68 ef c2 10 c0       	push   $0xc010c2ef
c0103608:	e8 f0 cd ff ff       	call   c01003fd <__panic>
    }
    return &pages[PPN(pa)];
c010360d:	a1 b8 31 1b c0       	mov    0xc01b31b8,%eax
c0103612:	8b 55 08             	mov    0x8(%ebp),%edx
c0103615:	c1 ea 0c             	shr    $0xc,%edx
c0103618:	c1 e2 05             	shl    $0x5,%edx
c010361b:	01 d0                	add    %edx,%eax
}
c010361d:	c9                   	leave  
c010361e:	c3                   	ret    

c010361f <pde2page>:
    }
    return pa2page(PTE_ADDR(pte));
}

static inline struct Page *
pde2page(pde_t pde) {
c010361f:	55                   	push   %ebp
c0103620:	89 e5                	mov    %esp,%ebp
c0103622:	83 ec 08             	sub    $0x8,%esp
    return pa2page(PDE_ADDR(pde));
c0103625:	8b 45 08             	mov    0x8(%ebp),%eax
c0103628:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010362d:	83 ec 0c             	sub    $0xc,%esp
c0103630:	50                   	push   %eax
c0103631:	e8 ac ff ff ff       	call   c01035e2 <pa2page>
c0103636:	83 c4 10             	add    $0x10,%esp
}
c0103639:	c9                   	leave  
c010363a:	c3                   	ret    

c010363b <mm_create>:
static void check_vma_struct(void);
static void check_pgfault(void);

// mm_create -  alloc a mm_struct & initialize it.
struct mm_struct *
mm_create(void) {
c010363b:	55                   	push   %ebp
c010363c:	89 e5                	mov    %esp,%ebp
c010363e:	83 ec 18             	sub    $0x18,%esp
    struct mm_struct *mm = kmalloc(sizeof(struct mm_struct));
c0103641:	83 ec 0c             	sub    $0xc,%esp
c0103644:	6a 20                	push   $0x20
c0103646:	e8 16 1b 00 00       	call   c0105161 <kmalloc>
c010364b:	83 c4 10             	add    $0x10,%esp
c010364e:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (mm != NULL) {
c0103651:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0103655:	74 7d                	je     c01036d4 <mm_create+0x99>
        list_init(&(mm->mmap_list));
c0103657:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010365a:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010365d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103660:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0103663:	89 50 04             	mov    %edx,0x4(%eax)
c0103666:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103669:	8b 50 04             	mov    0x4(%eax),%edx
c010366c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010366f:	89 10                	mov    %edx,(%eax)
        mm->mmap_cache = NULL;
c0103671:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103674:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        mm->pgdir = NULL;
c010367b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010367e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        mm->map_count = 0;
c0103685:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103688:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)

        if (swap_init_ok) swap_init_mm(mm);
c010368f:	a1 6c 0f 1b c0       	mov    0xc01b0f6c,%eax
c0103694:	85 c0                	test   %eax,%eax
c0103696:	74 10                	je     c01036a8 <mm_create+0x6d>
c0103698:	83 ec 0c             	sub    $0xc,%esp
c010369b:	ff 75 f4             	pushl  -0xc(%ebp)
c010369e:	e8 3a 1d 00 00       	call   c01053dd <swap_init_mm>
c01036a3:	83 c4 10             	add    $0x10,%esp
c01036a6:	eb 0a                	jmp    c01036b2 <mm_create+0x77>
        else mm->sm_priv = NULL;
c01036a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036ab:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
        
        set_mm_count(mm, 0);
c01036b2:	83 ec 08             	sub    $0x8,%esp
c01036b5:	6a 00                	push   $0x0
c01036b7:	ff 75 f4             	pushl  -0xc(%ebp)
c01036ba:	e8 14 ff ff ff       	call   c01035d3 <set_mm_count>
c01036bf:	83 c4 10             	add    $0x10,%esp
        lock_init(&(mm->mm_lock));
c01036c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036c5:	83 c0 1c             	add    $0x1c,%eax
c01036c8:	83 ec 0c             	sub    $0xc,%esp
c01036cb:	50                   	push   %eax
c01036cc:	e8 e8 fe ff ff       	call   c01035b9 <lock_init>
c01036d1:	83 c4 10             	add    $0x10,%esp
    }    
    return mm;
c01036d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01036d7:	c9                   	leave  
c01036d8:	c3                   	ret    

c01036d9 <vma_create>:

// vma_create - alloc a vma_struct & initialize it. (addr range: vm_start~vm_end)
struct vma_struct *
vma_create(uintptr_t vm_start, uintptr_t vm_end, uint32_t vm_flags) {
c01036d9:	55                   	push   %ebp
c01036da:	89 e5                	mov    %esp,%ebp
c01036dc:	83 ec 18             	sub    $0x18,%esp
    struct vma_struct *vma = kmalloc(sizeof(struct vma_struct));
c01036df:	83 ec 0c             	sub    $0xc,%esp
c01036e2:	6a 18                	push   $0x18
c01036e4:	e8 78 1a 00 00       	call   c0105161 <kmalloc>
c01036e9:	83 c4 10             	add    $0x10,%esp
c01036ec:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (vma != NULL) {
c01036ef:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01036f3:	74 1b                	je     c0103710 <vma_create+0x37>
        vma->vm_start = vm_start;
c01036f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036f8:	8b 55 08             	mov    0x8(%ebp),%edx
c01036fb:	89 50 04             	mov    %edx,0x4(%eax)
        vma->vm_end = vm_end;
c01036fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103701:	8b 55 0c             	mov    0xc(%ebp),%edx
c0103704:	89 50 08             	mov    %edx,0x8(%eax)
        vma->vm_flags = vm_flags;
c0103707:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010370a:	8b 55 10             	mov    0x10(%ebp),%edx
c010370d:	89 50 0c             	mov    %edx,0xc(%eax)
    }
    return vma;
c0103710:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0103713:	c9                   	leave  
c0103714:	c3                   	ret    

c0103715 <find_vma>:


// find_vma - find a vma  (vma->vm_start <= addr <= vma_vm_end)
struct vma_struct *
find_vma(struct mm_struct *mm, uintptr_t addr) {
c0103715:	55                   	push   %ebp
c0103716:	89 e5                	mov    %esp,%ebp
c0103718:	83 ec 20             	sub    $0x20,%esp
    struct vma_struct *vma = NULL;
c010371b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    if (mm != NULL) {
c0103722:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0103726:	0f 84 95 00 00 00    	je     c01037c1 <find_vma+0xac>
        vma = mm->mmap_cache;
c010372c:	8b 45 08             	mov    0x8(%ebp),%eax
c010372f:	8b 40 08             	mov    0x8(%eax),%eax
c0103732:	89 45 fc             	mov    %eax,-0x4(%ebp)
        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
c0103735:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0103739:	74 16                	je     c0103751 <find_vma+0x3c>
c010373b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010373e:	8b 40 04             	mov    0x4(%eax),%eax
c0103741:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0103744:	77 0b                	ja     c0103751 <find_vma+0x3c>
c0103746:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103749:	8b 40 08             	mov    0x8(%eax),%eax
c010374c:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010374f:	77 61                	ja     c01037b2 <find_vma+0x9d>
                bool found = 0;
c0103751:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
                list_entry_t *list = &(mm->mmap_list), *le = list;
c0103758:	8b 45 08             	mov    0x8(%ebp),%eax
c010375b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010375e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103761:	89 45 f4             	mov    %eax,-0xc(%ebp)
                while ((le = list_next(le)) != list) {
c0103764:	eb 28                	jmp    c010378e <find_vma+0x79>
                    vma = le2vma(le, list_link);
c0103766:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103769:	83 e8 10             	sub    $0x10,%eax
c010376c:	89 45 fc             	mov    %eax,-0x4(%ebp)
                    if (vma->vm_start<=addr && addr < vma->vm_end) {
c010376f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103772:	8b 40 04             	mov    0x4(%eax),%eax
c0103775:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0103778:	77 14                	ja     c010378e <find_vma+0x79>
c010377a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010377d:	8b 40 08             	mov    0x8(%eax),%eax
c0103780:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0103783:	76 09                	jbe    c010378e <find_vma+0x79>
                        found = 1;
c0103785:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
                        break;
c010378c:	eb 17                	jmp    c01037a5 <find_vma+0x90>
c010378e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103791:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0103794:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103797:	8b 40 04             	mov    0x4(%eax),%eax
    if (mm != NULL) {
        vma = mm->mmap_cache;
        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
                bool found = 0;
                list_entry_t *list = &(mm->mmap_list), *le = list;
                while ((le = list_next(le)) != list) {
c010379a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010379d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01037a0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01037a3:	75 c1                	jne    c0103766 <find_vma+0x51>
                    if (vma->vm_start<=addr && addr < vma->vm_end) {
                        found = 1;
                        break;
                    }
                }
                if (!found) {
c01037a5:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
c01037a9:	75 07                	jne    c01037b2 <find_vma+0x9d>
                    vma = NULL;
c01037ab:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
                }
        }
        if (vma != NULL) {
c01037b2:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c01037b6:	74 09                	je     c01037c1 <find_vma+0xac>
            mm->mmap_cache = vma;
c01037b8:	8b 45 08             	mov    0x8(%ebp),%eax
c01037bb:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01037be:	89 50 08             	mov    %edx,0x8(%eax)
        }
    }
    return vma;
c01037c1:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c01037c4:	c9                   	leave  
c01037c5:	c3                   	ret    

c01037c6 <check_vma_overlap>:


// check_vma_overlap - check if vma1 overlaps vma2 ?
static inline void
check_vma_overlap(struct vma_struct *prev, struct vma_struct *next) {
c01037c6:	55                   	push   %ebp
c01037c7:	89 e5                	mov    %esp,%ebp
c01037c9:	83 ec 08             	sub    $0x8,%esp
    assert(prev->vm_start < prev->vm_end);
c01037cc:	8b 45 08             	mov    0x8(%ebp),%eax
c01037cf:	8b 50 04             	mov    0x4(%eax),%edx
c01037d2:	8b 45 08             	mov    0x8(%ebp),%eax
c01037d5:	8b 40 08             	mov    0x8(%eax),%eax
c01037d8:	39 c2                	cmp    %eax,%edx
c01037da:	72 16                	jb     c01037f2 <check_vma_overlap+0x2c>
c01037dc:	68 fd c2 10 c0       	push   $0xc010c2fd
c01037e1:	68 1b c3 10 c0       	push   $0xc010c31b
c01037e6:	6a 6b                	push   $0x6b
c01037e8:	68 30 c3 10 c0       	push   $0xc010c330
c01037ed:	e8 0b cc ff ff       	call   c01003fd <__panic>
    assert(prev->vm_end <= next->vm_start);
c01037f2:	8b 45 08             	mov    0x8(%ebp),%eax
c01037f5:	8b 50 08             	mov    0x8(%eax),%edx
c01037f8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01037fb:	8b 40 04             	mov    0x4(%eax),%eax
c01037fe:	39 c2                	cmp    %eax,%edx
c0103800:	76 16                	jbe    c0103818 <check_vma_overlap+0x52>
c0103802:	68 40 c3 10 c0       	push   $0xc010c340
c0103807:	68 1b c3 10 c0       	push   $0xc010c31b
c010380c:	6a 6c                	push   $0x6c
c010380e:	68 30 c3 10 c0       	push   $0xc010c330
c0103813:	e8 e5 cb ff ff       	call   c01003fd <__panic>
    assert(next->vm_start < next->vm_end);
c0103818:	8b 45 0c             	mov    0xc(%ebp),%eax
c010381b:	8b 50 04             	mov    0x4(%eax),%edx
c010381e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103821:	8b 40 08             	mov    0x8(%eax),%eax
c0103824:	39 c2                	cmp    %eax,%edx
c0103826:	72 16                	jb     c010383e <check_vma_overlap+0x78>
c0103828:	68 5f c3 10 c0       	push   $0xc010c35f
c010382d:	68 1b c3 10 c0       	push   $0xc010c31b
c0103832:	6a 6d                	push   $0x6d
c0103834:	68 30 c3 10 c0       	push   $0xc010c330
c0103839:	e8 bf cb ff ff       	call   c01003fd <__panic>
}
c010383e:	90                   	nop
c010383f:	c9                   	leave  
c0103840:	c3                   	ret    

c0103841 <insert_vma_struct>:


// insert_vma_struct -insert vma in mm's list link
void
insert_vma_struct(struct mm_struct *mm, struct vma_struct *vma) {
c0103841:	55                   	push   %ebp
c0103842:	89 e5                	mov    %esp,%ebp
c0103844:	83 ec 38             	sub    $0x38,%esp
    assert(vma->vm_start < vma->vm_end);
c0103847:	8b 45 0c             	mov    0xc(%ebp),%eax
c010384a:	8b 50 04             	mov    0x4(%eax),%edx
c010384d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103850:	8b 40 08             	mov    0x8(%eax),%eax
c0103853:	39 c2                	cmp    %eax,%edx
c0103855:	72 16                	jb     c010386d <insert_vma_struct+0x2c>
c0103857:	68 7d c3 10 c0       	push   $0xc010c37d
c010385c:	68 1b c3 10 c0       	push   $0xc010c31b
c0103861:	6a 74                	push   $0x74
c0103863:	68 30 c3 10 c0       	push   $0xc010c330
c0103868:	e8 90 cb ff ff       	call   c01003fd <__panic>
    list_entry_t *list = &(mm->mmap_list);
c010386d:	8b 45 08             	mov    0x8(%ebp),%eax
c0103870:	89 45 ec             	mov    %eax,-0x14(%ebp)
    list_entry_t *le_prev = list, *le_next;
c0103873:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103876:	89 45 f4             	mov    %eax,-0xc(%ebp)

        list_entry_t *le = list;
c0103879:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010387c:	89 45 f0             	mov    %eax,-0x10(%ebp)
        while ((le = list_next(le)) != list) {
c010387f:	eb 1f                	jmp    c01038a0 <insert_vma_struct+0x5f>
            struct vma_struct *mmap_prev = le2vma(le, list_link);
c0103881:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103884:	83 e8 10             	sub    $0x10,%eax
c0103887:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            if (mmap_prev->vm_start > vma->vm_start) {
c010388a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010388d:	8b 50 04             	mov    0x4(%eax),%edx
c0103890:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103893:	8b 40 04             	mov    0x4(%eax),%eax
c0103896:	39 c2                	cmp    %eax,%edx
c0103898:	77 1f                	ja     c01038b9 <insert_vma_struct+0x78>
                break;
            }
            le_prev = le;
c010389a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010389d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01038a0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01038a3:	89 45 d8             	mov    %eax,-0x28(%ebp)
c01038a6:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01038a9:	8b 40 04             	mov    0x4(%eax),%eax
    assert(vma->vm_start < vma->vm_end);
    list_entry_t *list = &(mm->mmap_list);
    list_entry_t *le_prev = list, *le_next;

        list_entry_t *le = list;
        while ((le = list_next(le)) != list) {
c01038ac:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01038af:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01038b2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01038b5:	75 ca                	jne    c0103881 <insert_vma_struct+0x40>
c01038b7:	eb 01                	jmp    c01038ba <insert_vma_struct+0x79>
            struct vma_struct *mmap_prev = le2vma(le, list_link);
            if (mmap_prev->vm_start > vma->vm_start) {
                break;
c01038b9:	90                   	nop
c01038ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01038bd:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01038c0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01038c3:	8b 40 04             	mov    0x4(%eax),%eax
            }
            le_prev = le;
        }

    le_next = list_next(le_prev);
c01038c6:	89 45 dc             	mov    %eax,-0x24(%ebp)

    /* check overlap */
    if (le_prev != list) {
c01038c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01038cc:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01038cf:	74 15                	je     c01038e6 <insert_vma_struct+0xa5>
        check_vma_overlap(le2vma(le_prev, list_link), vma);
c01038d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01038d4:	83 e8 10             	sub    $0x10,%eax
c01038d7:	83 ec 08             	sub    $0x8,%esp
c01038da:	ff 75 0c             	pushl  0xc(%ebp)
c01038dd:	50                   	push   %eax
c01038de:	e8 e3 fe ff ff       	call   c01037c6 <check_vma_overlap>
c01038e3:	83 c4 10             	add    $0x10,%esp
    }
    if (le_next != list) {
c01038e6:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01038e9:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01038ec:	74 15                	je     c0103903 <insert_vma_struct+0xc2>
        check_vma_overlap(vma, le2vma(le_next, list_link));
c01038ee:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01038f1:	83 e8 10             	sub    $0x10,%eax
c01038f4:	83 ec 08             	sub    $0x8,%esp
c01038f7:	50                   	push   %eax
c01038f8:	ff 75 0c             	pushl  0xc(%ebp)
c01038fb:	e8 c6 fe ff ff       	call   c01037c6 <check_vma_overlap>
c0103900:	83 c4 10             	add    $0x10,%esp
    }

    vma->vm_mm = mm;
c0103903:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103906:	8b 55 08             	mov    0x8(%ebp),%edx
c0103909:	89 10                	mov    %edx,(%eax)
    list_add_after(le_prev, &(vma->list_link));
c010390b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010390e:	8d 50 10             	lea    0x10(%eax),%edx
c0103911:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103914:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0103917:	89 55 d4             	mov    %edx,-0x2c(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010391a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010391d:	8b 40 04             	mov    0x4(%eax),%eax
c0103920:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0103923:	89 55 d0             	mov    %edx,-0x30(%ebp)
c0103926:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0103929:	89 55 cc             	mov    %edx,-0x34(%ebp)
c010392c:	89 45 c8             	mov    %eax,-0x38(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010392f:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0103932:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0103935:	89 10                	mov    %edx,(%eax)
c0103937:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010393a:	8b 10                	mov    (%eax),%edx
c010393c:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010393f:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0103942:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0103945:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0103948:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010394b:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010394e:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0103951:	89 10                	mov    %edx,(%eax)

    mm->map_count ++;
c0103953:	8b 45 08             	mov    0x8(%ebp),%eax
c0103956:	8b 40 10             	mov    0x10(%eax),%eax
c0103959:	8d 50 01             	lea    0x1(%eax),%edx
c010395c:	8b 45 08             	mov    0x8(%ebp),%eax
c010395f:	89 50 10             	mov    %edx,0x10(%eax)
}
c0103962:	90                   	nop
c0103963:	c9                   	leave  
c0103964:	c3                   	ret    

c0103965 <mm_destroy>:

// mm_destroy - free mm and mm internal fields
void
mm_destroy(struct mm_struct *mm) {
c0103965:	55                   	push   %ebp
c0103966:	89 e5                	mov    %esp,%ebp
c0103968:	83 ec 28             	sub    $0x28,%esp
    assert(mm_count(mm) == 0);
c010396b:	ff 75 08             	pushl  0x8(%ebp)
c010396e:	e8 55 fc ff ff       	call   c01035c8 <mm_count>
c0103973:	83 c4 04             	add    $0x4,%esp
c0103976:	85 c0                	test   %eax,%eax
c0103978:	74 19                	je     c0103993 <mm_destroy+0x2e>
c010397a:	68 99 c3 10 c0       	push   $0xc010c399
c010397f:	68 1b c3 10 c0       	push   $0xc010c31b
c0103984:	68 94 00 00 00       	push   $0x94
c0103989:	68 30 c3 10 c0       	push   $0xc010c330
c010398e:	e8 6a ca ff ff       	call   c01003fd <__panic>

    list_entry_t *list = &(mm->mmap_list), *le;
c0103993:	8b 45 08             	mov    0x8(%ebp),%eax
c0103996:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(list)) != list) {
c0103999:	eb 3a                	jmp    c01039d5 <mm_destroy+0x70>
c010399b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010399e:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c01039a1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01039a4:	8b 40 04             	mov    0x4(%eax),%eax
c01039a7:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01039aa:	8b 12                	mov    (%edx),%edx
c01039ac:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c01039af:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c01039b2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01039b5:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01039b8:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c01039bb:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01039be:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01039c1:	89 10                	mov    %edx,(%eax)
        list_del(le);
        kfree(le2vma(le, list_link));  //kfree vma        
c01039c3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01039c6:	83 e8 10             	sub    $0x10,%eax
c01039c9:	83 ec 0c             	sub    $0xc,%esp
c01039cc:	50                   	push   %eax
c01039cd:	e8 a7 17 00 00       	call   c0105179 <kfree>
c01039d2:	83 c4 10             	add    $0x10,%esp
c01039d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01039d8:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01039db:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01039de:	8b 40 04             	mov    0x4(%eax),%eax
void
mm_destroy(struct mm_struct *mm) {
    assert(mm_count(mm) == 0);

    list_entry_t *list = &(mm->mmap_list), *le;
    while ((le = list_next(list)) != list) {
c01039e1:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01039e4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01039e7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01039ea:	75 af                	jne    c010399b <mm_destroy+0x36>
        list_del(le);
        kfree(le2vma(le, list_link));  //kfree vma        
    }
    kfree(mm); //kfree mm
c01039ec:	83 ec 0c             	sub    $0xc,%esp
c01039ef:	ff 75 08             	pushl  0x8(%ebp)
c01039f2:	e8 82 17 00 00       	call   c0105179 <kfree>
c01039f7:	83 c4 10             	add    $0x10,%esp
    mm=NULL;
c01039fa:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
}
c0103a01:	90                   	nop
c0103a02:	c9                   	leave  
c0103a03:	c3                   	ret    

c0103a04 <mm_map>:

int
mm_map(struct mm_struct *mm, uintptr_t addr, size_t len, uint32_t vm_flags,
       struct vma_struct **vma_store) {
c0103a04:	55                   	push   %ebp
c0103a05:	89 e5                	mov    %esp,%ebp
c0103a07:	83 ec 28             	sub    $0x28,%esp
    uintptr_t start = ROUNDDOWN(addr, PGSIZE), end = ROUNDUP(addr + len, PGSIZE);
c0103a0a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103a0d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103a10:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103a13:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0103a18:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0103a1b:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
c0103a22:	8b 55 0c             	mov    0xc(%ebp),%edx
c0103a25:	8b 45 10             	mov    0x10(%ebp),%eax
c0103a28:	01 c2                	add    %eax,%edx
c0103a2a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103a2d:	01 d0                	add    %edx,%eax
c0103a2f:	83 e8 01             	sub    $0x1,%eax
c0103a32:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0103a35:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103a38:	ba 00 00 00 00       	mov    $0x0,%edx
c0103a3d:	f7 75 e8             	divl   -0x18(%ebp)
c0103a40:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103a43:	29 d0                	sub    %edx,%eax
c0103a45:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if (!USER_ACCESS(start, end)) {
c0103a48:	81 7d ec ff ff 1f 00 	cmpl   $0x1fffff,-0x14(%ebp)
c0103a4f:	76 11                	jbe    c0103a62 <mm_map+0x5e>
c0103a51:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103a54:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0103a57:	73 09                	jae    c0103a62 <mm_map+0x5e>
c0103a59:	81 7d e0 00 00 00 b0 	cmpl   $0xb0000000,-0x20(%ebp)
c0103a60:	76 0a                	jbe    c0103a6c <mm_map+0x68>
        return -E_INVAL;
c0103a62:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0103a67:	e9 9e 00 00 00       	jmp    c0103b0a <mm_map+0x106>
    }

    assert(mm != NULL);
c0103a6c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0103a70:	75 19                	jne    c0103a8b <mm_map+0x87>
c0103a72:	68 ab c3 10 c0       	push   $0xc010c3ab
c0103a77:	68 1b c3 10 c0       	push   $0xc010c31b
c0103a7c:	68 a7 00 00 00       	push   $0xa7
c0103a81:	68 30 c3 10 c0       	push   $0xc010c330
c0103a86:	e8 72 c9 ff ff       	call   c01003fd <__panic>

    int ret = -E_INVAL;
c0103a8b:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)

    struct vma_struct *vma;
    if ((vma = find_vma(mm, start)) != NULL && end > vma->vm_start) {
c0103a92:	83 ec 08             	sub    $0x8,%esp
c0103a95:	ff 75 ec             	pushl  -0x14(%ebp)
c0103a98:	ff 75 08             	pushl  0x8(%ebp)
c0103a9b:	e8 75 fc ff ff       	call   c0103715 <find_vma>
c0103aa0:	83 c4 10             	add    $0x10,%esp
c0103aa3:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0103aa6:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0103aaa:	74 0b                	je     c0103ab7 <mm_map+0xb3>
c0103aac:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103aaf:	8b 40 04             	mov    0x4(%eax),%eax
c0103ab2:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0103ab5:	72 4c                	jb     c0103b03 <mm_map+0xff>
        goto out;
    }
    ret = -E_NO_MEM;
c0103ab7:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    if ((vma = vma_create(start, end, vm_flags)) == NULL) {
c0103abe:	83 ec 04             	sub    $0x4,%esp
c0103ac1:	ff 75 14             	pushl  0x14(%ebp)
c0103ac4:	ff 75 e0             	pushl  -0x20(%ebp)
c0103ac7:	ff 75 ec             	pushl  -0x14(%ebp)
c0103aca:	e8 0a fc ff ff       	call   c01036d9 <vma_create>
c0103acf:	83 c4 10             	add    $0x10,%esp
c0103ad2:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0103ad5:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0103ad9:	74 2b                	je     c0103b06 <mm_map+0x102>
        goto out;
    }
    insert_vma_struct(mm, vma);
c0103adb:	83 ec 08             	sub    $0x8,%esp
c0103ade:	ff 75 dc             	pushl  -0x24(%ebp)
c0103ae1:	ff 75 08             	pushl  0x8(%ebp)
c0103ae4:	e8 58 fd ff ff       	call   c0103841 <insert_vma_struct>
c0103ae9:	83 c4 10             	add    $0x10,%esp
    if (vma_store != NULL) {
c0103aec:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0103af0:	74 08                	je     c0103afa <mm_map+0xf6>
        *vma_store = vma;
c0103af2:	8b 45 18             	mov    0x18(%ebp),%eax
c0103af5:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0103af8:	89 10                	mov    %edx,(%eax)
    }
    ret = 0;
c0103afa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0103b01:	eb 04                	jmp    c0103b07 <mm_map+0x103>

    int ret = -E_INVAL;

    struct vma_struct *vma;
    if ((vma = find_vma(mm, start)) != NULL && end > vma->vm_start) {
        goto out;
c0103b03:	90                   	nop
c0103b04:	eb 01                	jmp    c0103b07 <mm_map+0x103>
    }
    ret = -E_NO_MEM;

    if ((vma = vma_create(start, end, vm_flags)) == NULL) {
        goto out;
c0103b06:	90                   	nop
        *vma_store = vma;
    }
    ret = 0;

out:
    return ret;
c0103b07:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0103b0a:	c9                   	leave  
c0103b0b:	c3                   	ret    

c0103b0c <dup_mmap>:

int
dup_mmap(struct mm_struct *to, struct mm_struct *from) {
c0103b0c:	55                   	push   %ebp
c0103b0d:	89 e5                	mov    %esp,%ebp
c0103b0f:	53                   	push   %ebx
c0103b10:	83 ec 24             	sub    $0x24,%esp
    assert(to != NULL && from != NULL);
c0103b13:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0103b17:	74 06                	je     c0103b1f <dup_mmap+0x13>
c0103b19:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0103b1d:	75 19                	jne    c0103b38 <dup_mmap+0x2c>
c0103b1f:	68 b6 c3 10 c0       	push   $0xc010c3b6
c0103b24:	68 1b c3 10 c0       	push   $0xc010c31b
c0103b29:	68 c0 00 00 00       	push   $0xc0
c0103b2e:	68 30 c3 10 c0       	push   $0xc010c330
c0103b33:	e8 c5 c8 ff ff       	call   c01003fd <__panic>
    list_entry_t *list = &(from->mmap_list), *le = list;
c0103b38:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103b3b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103b3e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103b41:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_prev(le)) != list) {
c0103b44:	e9 86 00 00 00       	jmp    c0103bcf <dup_mmap+0xc3>
        struct vma_struct *vma, *nvma;
        vma = le2vma(le, list_link);
c0103b49:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103b4c:	83 e8 10             	sub    $0x10,%eax
c0103b4f:	89 45 ec             	mov    %eax,-0x14(%ebp)
        nvma = vma_create(vma->vm_start, vma->vm_end, vma->vm_flags);
c0103b52:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103b55:	8b 48 0c             	mov    0xc(%eax),%ecx
c0103b58:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103b5b:	8b 50 08             	mov    0x8(%eax),%edx
c0103b5e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103b61:	8b 40 04             	mov    0x4(%eax),%eax
c0103b64:	83 ec 04             	sub    $0x4,%esp
c0103b67:	51                   	push   %ecx
c0103b68:	52                   	push   %edx
c0103b69:	50                   	push   %eax
c0103b6a:	e8 6a fb ff ff       	call   c01036d9 <vma_create>
c0103b6f:	83 c4 10             	add    $0x10,%esp
c0103b72:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (nvma == NULL) {
c0103b75:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0103b79:	75 07                	jne    c0103b82 <dup_mmap+0x76>
            return -E_NO_MEM;
c0103b7b:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0103b80:	eb 6c                	jmp    c0103bee <dup_mmap+0xe2>
        }

        insert_vma_struct(to, nvma);
c0103b82:	83 ec 08             	sub    $0x8,%esp
c0103b85:	ff 75 e8             	pushl  -0x18(%ebp)
c0103b88:	ff 75 08             	pushl  0x8(%ebp)
c0103b8b:	e8 b1 fc ff ff       	call   c0103841 <insert_vma_struct>
c0103b90:	83 c4 10             	add    $0x10,%esp

        bool share = 0;
c0103b93:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
c0103b9a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103b9d:	8b 58 08             	mov    0x8(%eax),%ebx
c0103ba0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103ba3:	8b 48 04             	mov    0x4(%eax),%ecx
c0103ba6:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103ba9:	8b 50 0c             	mov    0xc(%eax),%edx
c0103bac:	8b 45 08             	mov    0x8(%ebp),%eax
c0103baf:	8b 40 0c             	mov    0xc(%eax),%eax
c0103bb2:	83 ec 0c             	sub    $0xc,%esp
c0103bb5:	ff 75 e4             	pushl  -0x1c(%ebp)
c0103bb8:	53                   	push   %ebx
c0103bb9:	51                   	push   %ecx
c0103bba:	52                   	push   %edx
c0103bbb:	50                   	push   %eax
c0103bbc:	e8 03 3f 00 00       	call   c0107ac4 <copy_range>
c0103bc1:	83 c4 20             	add    $0x20,%esp
c0103bc4:	85 c0                	test   %eax,%eax
c0103bc6:	74 07                	je     c0103bcf <dup_mmap+0xc3>
            return -E_NO_MEM;
c0103bc8:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0103bcd:	eb 1f                	jmp    c0103bee <dup_mmap+0xe2>
c0103bcf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103bd2:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c0103bd5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103bd8:	8b 00                	mov    (%eax),%eax

int
dup_mmap(struct mm_struct *to, struct mm_struct *from) {
    assert(to != NULL && from != NULL);
    list_entry_t *list = &(from->mmap_list), *le = list;
    while ((le = list_prev(le)) != list) {
c0103bda:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103bdd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103be0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0103be3:	0f 85 60 ff ff ff    	jne    c0103b49 <dup_mmap+0x3d>
        bool share = 0;
        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
            return -E_NO_MEM;
        }
    }
    return 0;
c0103be9:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0103bee:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0103bf1:	c9                   	leave  
c0103bf2:	c3                   	ret    

c0103bf3 <exit_mmap>:

void
exit_mmap(struct mm_struct *mm) {
c0103bf3:	55                   	push   %ebp
c0103bf4:	89 e5                	mov    %esp,%ebp
c0103bf6:	83 ec 28             	sub    $0x28,%esp
    assert(mm != NULL && mm_count(mm) == 0);
c0103bf9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0103bfd:	74 0f                	je     c0103c0e <exit_mmap+0x1b>
c0103bff:	ff 75 08             	pushl  0x8(%ebp)
c0103c02:	e8 c1 f9 ff ff       	call   c01035c8 <mm_count>
c0103c07:	83 c4 04             	add    $0x4,%esp
c0103c0a:	85 c0                	test   %eax,%eax
c0103c0c:	74 19                	je     c0103c27 <exit_mmap+0x34>
c0103c0e:	68 d4 c3 10 c0       	push   $0xc010c3d4
c0103c13:	68 1b c3 10 c0       	push   $0xc010c31b
c0103c18:	68 d6 00 00 00       	push   $0xd6
c0103c1d:	68 30 c3 10 c0       	push   $0xc010c330
c0103c22:	e8 d6 c7 ff ff       	call   c01003fd <__panic>
    pde_t *pgdir = mm->pgdir;
c0103c27:	8b 45 08             	mov    0x8(%ebp),%eax
c0103c2a:	8b 40 0c             	mov    0xc(%eax),%eax
c0103c2d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    list_entry_t *list = &(mm->mmap_list), *le = list;
c0103c30:	8b 45 08             	mov    0x8(%ebp),%eax
c0103c33:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0103c36:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103c39:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c0103c3c:	eb 25                	jmp    c0103c63 <exit_mmap+0x70>
        struct vma_struct *vma = le2vma(le, list_link);
c0103c3e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103c41:	83 e8 10             	sub    $0x10,%eax
c0103c44:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
c0103c47:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103c4a:	8b 50 08             	mov    0x8(%eax),%edx
c0103c4d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103c50:	8b 40 04             	mov    0x4(%eax),%eax
c0103c53:	83 ec 04             	sub    $0x4,%esp
c0103c56:	52                   	push   %edx
c0103c57:	50                   	push   %eax
c0103c58:	ff 75 f0             	pushl  -0x10(%ebp)
c0103c5b:	e8 9d 3c 00 00       	call   c01078fd <unmap_range>
c0103c60:	83 c4 10             	add    $0x10,%esp
c0103c63:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103c66:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0103c69:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103c6c:	8b 40 04             	mov    0x4(%eax),%eax
void
exit_mmap(struct mm_struct *mm) {
    assert(mm != NULL && mm_count(mm) == 0);
    pde_t *pgdir = mm->pgdir;
    list_entry_t *list = &(mm->mmap_list), *le = list;
    while ((le = list_next(le)) != list) {
c0103c6f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103c72:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103c75:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0103c78:	75 c4                	jne    c0103c3e <exit_mmap+0x4b>
        struct vma_struct *vma = le2vma(le, list_link);
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
    }
    while ((le = list_next(le)) != list) {
c0103c7a:	eb 25                	jmp    c0103ca1 <exit_mmap+0xae>
        struct vma_struct *vma = le2vma(le, list_link);
c0103c7c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103c7f:	83 e8 10             	sub    $0x10,%eax
c0103c82:	89 45 e0             	mov    %eax,-0x20(%ebp)
        exit_range(pgdir, vma->vm_start, vma->vm_end);
c0103c85:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103c88:	8b 50 08             	mov    0x8(%eax),%edx
c0103c8b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103c8e:	8b 40 04             	mov    0x4(%eax),%eax
c0103c91:	83 ec 04             	sub    $0x4,%esp
c0103c94:	52                   	push   %edx
c0103c95:	50                   	push   %eax
c0103c96:	ff 75 f0             	pushl  -0x10(%ebp)
c0103c99:	e8 32 3d 00 00       	call   c01079d0 <exit_range>
c0103c9e:	83 c4 10             	add    $0x10,%esp
c0103ca1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103ca4:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0103ca7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103caa:	8b 40 04             	mov    0x4(%eax),%eax
    list_entry_t *list = &(mm->mmap_list), *le = list;
    while ((le = list_next(le)) != list) {
        struct vma_struct *vma = le2vma(le, list_link);
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
    }
    while ((le = list_next(le)) != list) {
c0103cad:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103cb0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103cb3:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0103cb6:	75 c4                	jne    c0103c7c <exit_mmap+0x89>
        struct vma_struct *vma = le2vma(le, list_link);
        exit_range(pgdir, vma->vm_start, vma->vm_end);
    }
}
c0103cb8:	90                   	nop
c0103cb9:	c9                   	leave  
c0103cba:	c3                   	ret    

c0103cbb <copy_from_user>:

bool
copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable) {
c0103cbb:	55                   	push   %ebp
c0103cbc:	89 e5                	mov    %esp,%ebp
c0103cbe:	83 ec 08             	sub    $0x8,%esp
    if (!user_mem_check(mm, (uintptr_t)src, len, writable)) {
c0103cc1:	8b 45 10             	mov    0x10(%ebp),%eax
c0103cc4:	ff 75 18             	pushl  0x18(%ebp)
c0103cc7:	ff 75 14             	pushl  0x14(%ebp)
c0103cca:	50                   	push   %eax
c0103ccb:	ff 75 08             	pushl  0x8(%ebp)
c0103cce:	e8 b1 08 00 00       	call   c0104584 <user_mem_check>
c0103cd3:	83 c4 10             	add    $0x10,%esp
c0103cd6:	85 c0                	test   %eax,%eax
c0103cd8:	75 07                	jne    c0103ce1 <copy_from_user+0x26>
        return 0;
c0103cda:	b8 00 00 00 00       	mov    $0x0,%eax
c0103cdf:	eb 19                	jmp    c0103cfa <copy_from_user+0x3f>
    }
    memcpy(dst, src, len);
c0103ce1:	83 ec 04             	sub    $0x4,%esp
c0103ce4:	ff 75 14             	pushl  0x14(%ebp)
c0103ce7:	ff 75 10             	pushl  0x10(%ebp)
c0103cea:	ff 75 0c             	pushl  0xc(%ebp)
c0103ced:	e8 ee 74 00 00       	call   c010b1e0 <memcpy>
c0103cf2:	83 c4 10             	add    $0x10,%esp
    return 1;
c0103cf5:	b8 01 00 00 00       	mov    $0x1,%eax
}
c0103cfa:	c9                   	leave  
c0103cfb:	c3                   	ret    

c0103cfc <copy_to_user>:

bool
copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len) {
c0103cfc:	55                   	push   %ebp
c0103cfd:	89 e5                	mov    %esp,%ebp
c0103cff:	83 ec 08             	sub    $0x8,%esp
    if (!user_mem_check(mm, (uintptr_t)dst, len, 1)) {
c0103d02:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103d05:	6a 01                	push   $0x1
c0103d07:	ff 75 14             	pushl  0x14(%ebp)
c0103d0a:	50                   	push   %eax
c0103d0b:	ff 75 08             	pushl  0x8(%ebp)
c0103d0e:	e8 71 08 00 00       	call   c0104584 <user_mem_check>
c0103d13:	83 c4 10             	add    $0x10,%esp
c0103d16:	85 c0                	test   %eax,%eax
c0103d18:	75 07                	jne    c0103d21 <copy_to_user+0x25>
        return 0;
c0103d1a:	b8 00 00 00 00       	mov    $0x0,%eax
c0103d1f:	eb 19                	jmp    c0103d3a <copy_to_user+0x3e>
    }
    memcpy(dst, src, len);
c0103d21:	83 ec 04             	sub    $0x4,%esp
c0103d24:	ff 75 14             	pushl  0x14(%ebp)
c0103d27:	ff 75 10             	pushl  0x10(%ebp)
c0103d2a:	ff 75 0c             	pushl  0xc(%ebp)
c0103d2d:	e8 ae 74 00 00       	call   c010b1e0 <memcpy>
c0103d32:	83 c4 10             	add    $0x10,%esp
    return 1;
c0103d35:	b8 01 00 00 00       	mov    $0x1,%eax
}
c0103d3a:	c9                   	leave  
c0103d3b:	c3                   	ret    

c0103d3c <vmm_init>:

// vmm_init - initialize virtual memory management
//          - now just call check_vmm to check correctness of vmm
void
vmm_init(void) {
c0103d3c:	55                   	push   %ebp
c0103d3d:	89 e5                	mov    %esp,%ebp
c0103d3f:	83 ec 08             	sub    $0x8,%esp
    check_vmm();
c0103d42:	e8 03 00 00 00       	call   c0103d4a <check_vmm>
}
c0103d47:	90                   	nop
c0103d48:	c9                   	leave  
c0103d49:	c3                   	ret    

c0103d4a <check_vmm>:

// check_vmm - check correctness of vmm
static void
check_vmm(void) {
c0103d4a:	55                   	push   %ebp
c0103d4b:	89 e5                	mov    %esp,%ebp
c0103d4d:	83 ec 18             	sub    $0x18,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0103d50:	e8 d7 33 00 00       	call   c010712c <nr_free_pages>
c0103d55:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    check_vma_struct();
c0103d58:	e8 18 00 00 00       	call   c0103d75 <check_vma_struct>
    check_pgfault();
c0103d5d:	e8 10 04 00 00       	call   c0104172 <check_pgfault>

    cprintf("check_vmm() succeeded.\n");
c0103d62:	83 ec 0c             	sub    $0xc,%esp
c0103d65:	68 f4 c3 10 c0       	push   $0xc010c3f4
c0103d6a:	e8 28 c5 ff ff       	call   c0100297 <cprintf>
c0103d6f:	83 c4 10             	add    $0x10,%esp
}
c0103d72:	90                   	nop
c0103d73:	c9                   	leave  
c0103d74:	c3                   	ret    

c0103d75 <check_vma_struct>:

static void
check_vma_struct(void) {
c0103d75:	55                   	push   %ebp
c0103d76:	89 e5                	mov    %esp,%ebp
c0103d78:	83 ec 58             	sub    $0x58,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0103d7b:	e8 ac 33 00 00       	call   c010712c <nr_free_pages>
c0103d80:	89 45 ec             	mov    %eax,-0x14(%ebp)

    struct mm_struct *mm = mm_create();
c0103d83:	e8 b3 f8 ff ff       	call   c010363b <mm_create>
c0103d88:	89 45 e8             	mov    %eax,-0x18(%ebp)
    assert(mm != NULL);
c0103d8b:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0103d8f:	75 19                	jne    c0103daa <check_vma_struct+0x35>
c0103d91:	68 ab c3 10 c0       	push   $0xc010c3ab
c0103d96:	68 1b c3 10 c0       	push   $0xc010c31b
c0103d9b:	68 0c 01 00 00       	push   $0x10c
c0103da0:	68 30 c3 10 c0       	push   $0xc010c330
c0103da5:	e8 53 c6 ff ff       	call   c01003fd <__panic>

    int step1 = 10, step2 = step1 * 10;
c0103daa:	c7 45 e4 0a 00 00 00 	movl   $0xa,-0x1c(%ebp)
c0103db1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0103db4:	89 d0                	mov    %edx,%eax
c0103db6:	c1 e0 02             	shl    $0x2,%eax
c0103db9:	01 d0                	add    %edx,%eax
c0103dbb:	01 c0                	add    %eax,%eax
c0103dbd:	89 45 e0             	mov    %eax,-0x20(%ebp)

    int i;
    for (i = step1; i >= 1; i --) {
c0103dc0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103dc3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103dc6:	eb 5f                	jmp    c0103e27 <check_vma_struct+0xb2>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c0103dc8:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0103dcb:	89 d0                	mov    %edx,%eax
c0103dcd:	c1 e0 02             	shl    $0x2,%eax
c0103dd0:	01 d0                	add    %edx,%eax
c0103dd2:	83 c0 02             	add    $0x2,%eax
c0103dd5:	89 c1                	mov    %eax,%ecx
c0103dd7:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0103dda:	89 d0                	mov    %edx,%eax
c0103ddc:	c1 e0 02             	shl    $0x2,%eax
c0103ddf:	01 d0                	add    %edx,%eax
c0103de1:	83 ec 04             	sub    $0x4,%esp
c0103de4:	6a 00                	push   $0x0
c0103de6:	51                   	push   %ecx
c0103de7:	50                   	push   %eax
c0103de8:	e8 ec f8 ff ff       	call   c01036d9 <vma_create>
c0103ded:	83 c4 10             	add    $0x10,%esp
c0103df0:	89 45 dc             	mov    %eax,-0x24(%ebp)
        assert(vma != NULL);
c0103df3:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0103df7:	75 19                	jne    c0103e12 <check_vma_struct+0x9d>
c0103df9:	68 0c c4 10 c0       	push   $0xc010c40c
c0103dfe:	68 1b c3 10 c0       	push   $0xc010c31b
c0103e03:	68 13 01 00 00       	push   $0x113
c0103e08:	68 30 c3 10 c0       	push   $0xc010c330
c0103e0d:	e8 eb c5 ff ff       	call   c01003fd <__panic>
        insert_vma_struct(mm, vma);
c0103e12:	83 ec 08             	sub    $0x8,%esp
c0103e15:	ff 75 dc             	pushl  -0x24(%ebp)
c0103e18:	ff 75 e8             	pushl  -0x18(%ebp)
c0103e1b:	e8 21 fa ff ff       	call   c0103841 <insert_vma_struct>
c0103e20:	83 c4 10             	add    $0x10,%esp
    assert(mm != NULL);

    int step1 = 10, step2 = step1 * 10;

    int i;
    for (i = step1; i >= 1; i --) {
c0103e23:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0103e27:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0103e2b:	7f 9b                	jg     c0103dc8 <check_vma_struct+0x53>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    for (i = step1 + 1; i <= step2; i ++) {
c0103e2d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103e30:	83 c0 01             	add    $0x1,%eax
c0103e33:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103e36:	eb 5f                	jmp    c0103e97 <check_vma_struct+0x122>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c0103e38:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0103e3b:	89 d0                	mov    %edx,%eax
c0103e3d:	c1 e0 02             	shl    $0x2,%eax
c0103e40:	01 d0                	add    %edx,%eax
c0103e42:	83 c0 02             	add    $0x2,%eax
c0103e45:	89 c1                	mov    %eax,%ecx
c0103e47:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0103e4a:	89 d0                	mov    %edx,%eax
c0103e4c:	c1 e0 02             	shl    $0x2,%eax
c0103e4f:	01 d0                	add    %edx,%eax
c0103e51:	83 ec 04             	sub    $0x4,%esp
c0103e54:	6a 00                	push   $0x0
c0103e56:	51                   	push   %ecx
c0103e57:	50                   	push   %eax
c0103e58:	e8 7c f8 ff ff       	call   c01036d9 <vma_create>
c0103e5d:	83 c4 10             	add    $0x10,%esp
c0103e60:	89 45 d8             	mov    %eax,-0x28(%ebp)
        assert(vma != NULL);
c0103e63:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c0103e67:	75 19                	jne    c0103e82 <check_vma_struct+0x10d>
c0103e69:	68 0c c4 10 c0       	push   $0xc010c40c
c0103e6e:	68 1b c3 10 c0       	push   $0xc010c31b
c0103e73:	68 19 01 00 00       	push   $0x119
c0103e78:	68 30 c3 10 c0       	push   $0xc010c330
c0103e7d:	e8 7b c5 ff ff       	call   c01003fd <__panic>
        insert_vma_struct(mm, vma);
c0103e82:	83 ec 08             	sub    $0x8,%esp
c0103e85:	ff 75 d8             	pushl  -0x28(%ebp)
c0103e88:	ff 75 e8             	pushl  -0x18(%ebp)
c0103e8b:	e8 b1 f9 ff ff       	call   c0103841 <insert_vma_struct>
c0103e90:	83 c4 10             	add    $0x10,%esp
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    for (i = step1 + 1; i <= step2; i ++) {
c0103e93:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0103e97:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103e9a:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0103e9d:	7e 99                	jle    c0103e38 <check_vma_struct+0xc3>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    list_entry_t *le = list_next(&(mm->mmap_list));
c0103e9f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103ea2:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c0103ea5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0103ea8:	8b 40 04             	mov    0x4(%eax),%eax
c0103eab:	89 45 f0             	mov    %eax,-0x10(%ebp)

    for (i = 1; i <= step2; i ++) {
c0103eae:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
c0103eb5:	e9 81 00 00 00       	jmp    c0103f3b <check_vma_struct+0x1c6>
        assert(le != &(mm->mmap_list));
c0103eba:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103ebd:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0103ec0:	75 19                	jne    c0103edb <check_vma_struct+0x166>
c0103ec2:	68 18 c4 10 c0       	push   $0xc010c418
c0103ec7:	68 1b c3 10 c0       	push   $0xc010c31b
c0103ecc:	68 20 01 00 00       	push   $0x120
c0103ed1:	68 30 c3 10 c0       	push   $0xc010c330
c0103ed6:	e8 22 c5 ff ff       	call   c01003fd <__panic>
        struct vma_struct *mmap = le2vma(le, list_link);
c0103edb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103ede:	83 e8 10             	sub    $0x10,%eax
c0103ee1:	89 45 d0             	mov    %eax,-0x30(%ebp)
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
c0103ee4:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0103ee7:	8b 48 04             	mov    0x4(%eax),%ecx
c0103eea:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0103eed:	89 d0                	mov    %edx,%eax
c0103eef:	c1 e0 02             	shl    $0x2,%eax
c0103ef2:	01 d0                	add    %edx,%eax
c0103ef4:	39 c1                	cmp    %eax,%ecx
c0103ef6:	75 17                	jne    c0103f0f <check_vma_struct+0x19a>
c0103ef8:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0103efb:	8b 48 08             	mov    0x8(%eax),%ecx
c0103efe:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0103f01:	89 d0                	mov    %edx,%eax
c0103f03:	c1 e0 02             	shl    $0x2,%eax
c0103f06:	01 d0                	add    %edx,%eax
c0103f08:	83 c0 02             	add    $0x2,%eax
c0103f0b:	39 c1                	cmp    %eax,%ecx
c0103f0d:	74 19                	je     c0103f28 <check_vma_struct+0x1b3>
c0103f0f:	68 30 c4 10 c0       	push   $0xc010c430
c0103f14:	68 1b c3 10 c0       	push   $0xc010c31b
c0103f19:	68 22 01 00 00       	push   $0x122
c0103f1e:	68 30 c3 10 c0       	push   $0xc010c330
c0103f23:	e8 d5 c4 ff ff       	call   c01003fd <__panic>
c0103f28:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103f2b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c0103f2e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0103f31:	8b 40 04             	mov    0x4(%eax),%eax
        le = list_next(le);
c0103f34:	89 45 f0             	mov    %eax,-0x10(%ebp)
        insert_vma_struct(mm, vma);
    }

    list_entry_t *le = list_next(&(mm->mmap_list));

    for (i = 1; i <= step2; i ++) {
c0103f37:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0103f3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103f3e:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0103f41:	0f 8e 73 ff ff ff    	jle    c0103eba <check_vma_struct+0x145>
        struct vma_struct *mmap = le2vma(le, list_link);
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
        le = list_next(le);
    }

    for (i = 5; i <= 5 * step2; i +=5) {
c0103f47:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
c0103f4e:	e9 80 01 00 00       	jmp    c01040d3 <check_vma_struct+0x35e>
        struct vma_struct *vma1 = find_vma(mm, i);
c0103f53:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103f56:	83 ec 08             	sub    $0x8,%esp
c0103f59:	50                   	push   %eax
c0103f5a:	ff 75 e8             	pushl  -0x18(%ebp)
c0103f5d:	e8 b3 f7 ff ff       	call   c0103715 <find_vma>
c0103f62:	83 c4 10             	add    $0x10,%esp
c0103f65:	89 45 cc             	mov    %eax,-0x34(%ebp)
        assert(vma1 != NULL);
c0103f68:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0103f6c:	75 19                	jne    c0103f87 <check_vma_struct+0x212>
c0103f6e:	68 65 c4 10 c0       	push   $0xc010c465
c0103f73:	68 1b c3 10 c0       	push   $0xc010c31b
c0103f78:	68 28 01 00 00       	push   $0x128
c0103f7d:	68 30 c3 10 c0       	push   $0xc010c330
c0103f82:	e8 76 c4 ff ff       	call   c01003fd <__panic>
        struct vma_struct *vma2 = find_vma(mm, i+1);
c0103f87:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103f8a:	83 c0 01             	add    $0x1,%eax
c0103f8d:	83 ec 08             	sub    $0x8,%esp
c0103f90:	50                   	push   %eax
c0103f91:	ff 75 e8             	pushl  -0x18(%ebp)
c0103f94:	e8 7c f7 ff ff       	call   c0103715 <find_vma>
c0103f99:	83 c4 10             	add    $0x10,%esp
c0103f9c:	89 45 c8             	mov    %eax,-0x38(%ebp)
        assert(vma2 != NULL);
c0103f9f:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c0103fa3:	75 19                	jne    c0103fbe <check_vma_struct+0x249>
c0103fa5:	68 72 c4 10 c0       	push   $0xc010c472
c0103faa:	68 1b c3 10 c0       	push   $0xc010c31b
c0103faf:	68 2a 01 00 00       	push   $0x12a
c0103fb4:	68 30 c3 10 c0       	push   $0xc010c330
c0103fb9:	e8 3f c4 ff ff       	call   c01003fd <__panic>
        struct vma_struct *vma3 = find_vma(mm, i+2);
c0103fbe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103fc1:	83 c0 02             	add    $0x2,%eax
c0103fc4:	83 ec 08             	sub    $0x8,%esp
c0103fc7:	50                   	push   %eax
c0103fc8:	ff 75 e8             	pushl  -0x18(%ebp)
c0103fcb:	e8 45 f7 ff ff       	call   c0103715 <find_vma>
c0103fd0:	83 c4 10             	add    $0x10,%esp
c0103fd3:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        assert(vma3 == NULL);
c0103fd6:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
c0103fda:	74 19                	je     c0103ff5 <check_vma_struct+0x280>
c0103fdc:	68 7f c4 10 c0       	push   $0xc010c47f
c0103fe1:	68 1b c3 10 c0       	push   $0xc010c31b
c0103fe6:	68 2c 01 00 00       	push   $0x12c
c0103feb:	68 30 c3 10 c0       	push   $0xc010c330
c0103ff0:	e8 08 c4 ff ff       	call   c01003fd <__panic>
        struct vma_struct *vma4 = find_vma(mm, i+3);
c0103ff5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103ff8:	83 c0 03             	add    $0x3,%eax
c0103ffb:	83 ec 08             	sub    $0x8,%esp
c0103ffe:	50                   	push   %eax
c0103fff:	ff 75 e8             	pushl  -0x18(%ebp)
c0104002:	e8 0e f7 ff ff       	call   c0103715 <find_vma>
c0104007:	83 c4 10             	add    $0x10,%esp
c010400a:	89 45 c0             	mov    %eax,-0x40(%ebp)
        assert(vma4 == NULL);
c010400d:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
c0104011:	74 19                	je     c010402c <check_vma_struct+0x2b7>
c0104013:	68 8c c4 10 c0       	push   $0xc010c48c
c0104018:	68 1b c3 10 c0       	push   $0xc010c31b
c010401d:	68 2e 01 00 00       	push   $0x12e
c0104022:	68 30 c3 10 c0       	push   $0xc010c330
c0104027:	e8 d1 c3 ff ff       	call   c01003fd <__panic>
        struct vma_struct *vma5 = find_vma(mm, i+4);
c010402c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010402f:	83 c0 04             	add    $0x4,%eax
c0104032:	83 ec 08             	sub    $0x8,%esp
c0104035:	50                   	push   %eax
c0104036:	ff 75 e8             	pushl  -0x18(%ebp)
c0104039:	e8 d7 f6 ff ff       	call   c0103715 <find_vma>
c010403e:	83 c4 10             	add    $0x10,%esp
c0104041:	89 45 bc             	mov    %eax,-0x44(%ebp)
        assert(vma5 == NULL);
c0104044:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0104048:	74 19                	je     c0104063 <check_vma_struct+0x2ee>
c010404a:	68 99 c4 10 c0       	push   $0xc010c499
c010404f:	68 1b c3 10 c0       	push   $0xc010c31b
c0104054:	68 30 01 00 00       	push   $0x130
c0104059:	68 30 c3 10 c0       	push   $0xc010c330
c010405e:	e8 9a c3 ff ff       	call   c01003fd <__panic>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
c0104063:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0104066:	8b 50 04             	mov    0x4(%eax),%edx
c0104069:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010406c:	39 c2                	cmp    %eax,%edx
c010406e:	75 10                	jne    c0104080 <check_vma_struct+0x30b>
c0104070:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0104073:	8b 40 08             	mov    0x8(%eax),%eax
c0104076:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0104079:	83 c2 02             	add    $0x2,%edx
c010407c:	39 d0                	cmp    %edx,%eax
c010407e:	74 19                	je     c0104099 <check_vma_struct+0x324>
c0104080:	68 a8 c4 10 c0       	push   $0xc010c4a8
c0104085:	68 1b c3 10 c0       	push   $0xc010c31b
c010408a:	68 32 01 00 00       	push   $0x132
c010408f:	68 30 c3 10 c0       	push   $0xc010c330
c0104094:	e8 64 c3 ff ff       	call   c01003fd <__panic>
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
c0104099:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010409c:	8b 50 04             	mov    0x4(%eax),%edx
c010409f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01040a2:	39 c2                	cmp    %eax,%edx
c01040a4:	75 10                	jne    c01040b6 <check_vma_struct+0x341>
c01040a6:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01040a9:	8b 40 08             	mov    0x8(%eax),%eax
c01040ac:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01040af:	83 c2 02             	add    $0x2,%edx
c01040b2:	39 d0                	cmp    %edx,%eax
c01040b4:	74 19                	je     c01040cf <check_vma_struct+0x35a>
c01040b6:	68 d8 c4 10 c0       	push   $0xc010c4d8
c01040bb:	68 1b c3 10 c0       	push   $0xc010c31b
c01040c0:	68 33 01 00 00       	push   $0x133
c01040c5:	68 30 c3 10 c0       	push   $0xc010c330
c01040ca:	e8 2e c3 ff ff       	call   c01003fd <__panic>
        struct vma_struct *mmap = le2vma(le, list_link);
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
        le = list_next(le);
    }

    for (i = 5; i <= 5 * step2; i +=5) {
c01040cf:	83 45 f4 05          	addl   $0x5,-0xc(%ebp)
c01040d3:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01040d6:	89 d0                	mov    %edx,%eax
c01040d8:	c1 e0 02             	shl    $0x2,%eax
c01040db:	01 d0                	add    %edx,%eax
c01040dd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01040e0:	0f 8d 6d fe ff ff    	jge    c0103f53 <check_vma_struct+0x1de>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
    }

    for (i =4; i>=0; i--) {
c01040e6:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%ebp)
c01040ed:	eb 5c                	jmp    c010414b <check_vma_struct+0x3d6>
        struct vma_struct *vma_below_5= find_vma(mm,i);
c01040ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01040f2:	83 ec 08             	sub    $0x8,%esp
c01040f5:	50                   	push   %eax
c01040f6:	ff 75 e8             	pushl  -0x18(%ebp)
c01040f9:	e8 17 f6 ff ff       	call   c0103715 <find_vma>
c01040fe:	83 c4 10             	add    $0x10,%esp
c0104101:	89 45 b8             	mov    %eax,-0x48(%ebp)
        if (vma_below_5 != NULL ) {
c0104104:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
c0104108:	74 1e                	je     c0104128 <check_vma_struct+0x3b3>
           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
c010410a:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010410d:	8b 50 08             	mov    0x8(%eax),%edx
c0104110:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0104113:	8b 40 04             	mov    0x4(%eax),%eax
c0104116:	52                   	push   %edx
c0104117:	50                   	push   %eax
c0104118:	ff 75 f4             	pushl  -0xc(%ebp)
c010411b:	68 08 c5 10 c0       	push   $0xc010c508
c0104120:	e8 72 c1 ff ff       	call   c0100297 <cprintf>
c0104125:	83 c4 10             	add    $0x10,%esp
        }
        assert(vma_below_5 == NULL);
c0104128:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
c010412c:	74 19                	je     c0104147 <check_vma_struct+0x3d2>
c010412e:	68 2d c5 10 c0       	push   $0xc010c52d
c0104133:	68 1b c3 10 c0       	push   $0xc010c31b
c0104138:	68 3b 01 00 00       	push   $0x13b
c010413d:	68 30 c3 10 c0       	push   $0xc010c330
c0104142:	e8 b6 c2 ff ff       	call   c01003fd <__panic>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
    }

    for (i =4; i>=0; i--) {
c0104147:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c010414b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010414f:	79 9e                	jns    c01040ef <check_vma_struct+0x37a>
           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
        }
        assert(vma_below_5 == NULL);
    }

    mm_destroy(mm);
c0104151:	83 ec 0c             	sub    $0xc,%esp
c0104154:	ff 75 e8             	pushl  -0x18(%ebp)
c0104157:	e8 09 f8 ff ff       	call   c0103965 <mm_destroy>
c010415c:	83 c4 10             	add    $0x10,%esp

    cprintf("check_vma_struct() succeeded!\n");
c010415f:	83 ec 0c             	sub    $0xc,%esp
c0104162:	68 44 c5 10 c0       	push   $0xc010c544
c0104167:	e8 2b c1 ff ff       	call   c0100297 <cprintf>
c010416c:	83 c4 10             	add    $0x10,%esp
}
c010416f:	90                   	nop
c0104170:	c9                   	leave  
c0104171:	c3                   	ret    

c0104172 <check_pgfault>:

struct mm_struct *check_mm_struct;

// check_pgfault - check correctness of pgfault handler
static void
check_pgfault(void) {
c0104172:	55                   	push   %ebp
c0104173:	89 e5                	mov    %esp,%ebp
c0104175:	83 ec 28             	sub    $0x28,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0104178:	e8 af 2f 00 00       	call   c010712c <nr_free_pages>
c010417d:	89 45 ec             	mov    %eax,-0x14(%ebp)

    check_mm_struct = mm_create();
c0104180:	e8 b6 f4 ff ff       	call   c010363b <mm_create>
c0104185:	a3 d0 30 1b c0       	mov    %eax,0xc01b30d0
    assert(check_mm_struct != NULL);
c010418a:	a1 d0 30 1b c0       	mov    0xc01b30d0,%eax
c010418f:	85 c0                	test   %eax,%eax
c0104191:	75 19                	jne    c01041ac <check_pgfault+0x3a>
c0104193:	68 63 c5 10 c0       	push   $0xc010c563
c0104198:	68 1b c3 10 c0       	push   $0xc010c31b
c010419d:	68 4b 01 00 00       	push   $0x14b
c01041a2:	68 30 c3 10 c0       	push   $0xc010c330
c01041a7:	e8 51 c2 ff ff       	call   c01003fd <__panic>

    struct mm_struct *mm = check_mm_struct;
c01041ac:	a1 d0 30 1b c0       	mov    0xc01b30d0,%eax
c01041b1:	89 45 e8             	mov    %eax,-0x18(%ebp)
    pde_t *pgdir = mm->pgdir = boot_pgdir;
c01041b4:	8b 15 20 ca 12 c0    	mov    0xc012ca20,%edx
c01041ba:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01041bd:	89 50 0c             	mov    %edx,0xc(%eax)
c01041c0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01041c3:	8b 40 0c             	mov    0xc(%eax),%eax
c01041c6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(pgdir[0] == 0);
c01041c9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01041cc:	8b 00                	mov    (%eax),%eax
c01041ce:	85 c0                	test   %eax,%eax
c01041d0:	74 19                	je     c01041eb <check_pgfault+0x79>
c01041d2:	68 7b c5 10 c0       	push   $0xc010c57b
c01041d7:	68 1b c3 10 c0       	push   $0xc010c31b
c01041dc:	68 4f 01 00 00       	push   $0x14f
c01041e1:	68 30 c3 10 c0       	push   $0xc010c330
c01041e6:	e8 12 c2 ff ff       	call   c01003fd <__panic>

    struct vma_struct *vma = vma_create(0, PTSIZE, VM_WRITE);
c01041eb:	83 ec 04             	sub    $0x4,%esp
c01041ee:	6a 02                	push   $0x2
c01041f0:	68 00 00 40 00       	push   $0x400000
c01041f5:	6a 00                	push   $0x0
c01041f7:	e8 dd f4 ff ff       	call   c01036d9 <vma_create>
c01041fc:	83 c4 10             	add    $0x10,%esp
c01041ff:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(vma != NULL);
c0104202:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0104206:	75 19                	jne    c0104221 <check_pgfault+0xaf>
c0104208:	68 0c c4 10 c0       	push   $0xc010c40c
c010420d:	68 1b c3 10 c0       	push   $0xc010c31b
c0104212:	68 52 01 00 00       	push   $0x152
c0104217:	68 30 c3 10 c0       	push   $0xc010c330
c010421c:	e8 dc c1 ff ff       	call   c01003fd <__panic>

    insert_vma_struct(mm, vma);
c0104221:	83 ec 08             	sub    $0x8,%esp
c0104224:	ff 75 e0             	pushl  -0x20(%ebp)
c0104227:	ff 75 e8             	pushl  -0x18(%ebp)
c010422a:	e8 12 f6 ff ff       	call   c0103841 <insert_vma_struct>
c010422f:	83 c4 10             	add    $0x10,%esp

    uintptr_t addr = 0x100;
c0104232:	c7 45 dc 00 01 00 00 	movl   $0x100,-0x24(%ebp)
    assert(find_vma(mm, addr) == vma);
c0104239:	83 ec 08             	sub    $0x8,%esp
c010423c:	ff 75 dc             	pushl  -0x24(%ebp)
c010423f:	ff 75 e8             	pushl  -0x18(%ebp)
c0104242:	e8 ce f4 ff ff       	call   c0103715 <find_vma>
c0104247:	83 c4 10             	add    $0x10,%esp
c010424a:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c010424d:	74 19                	je     c0104268 <check_pgfault+0xf6>
c010424f:	68 89 c5 10 c0       	push   $0xc010c589
c0104254:	68 1b c3 10 c0       	push   $0xc010c31b
c0104259:	68 57 01 00 00       	push   $0x157
c010425e:	68 30 c3 10 c0       	push   $0xc010c330
c0104263:	e8 95 c1 ff ff       	call   c01003fd <__panic>

    int i, sum = 0;
c0104268:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    for (i = 0; i < 100; i ++) {
c010426f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0104276:	eb 19                	jmp    c0104291 <check_pgfault+0x11f>
        *(char *)(addr + i) = i;
c0104278:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010427b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010427e:	01 d0                	add    %edx,%eax
c0104280:	89 c2                	mov    %eax,%edx
c0104282:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104285:	88 02                	mov    %al,(%edx)
        sum += i;
c0104287:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010428a:	01 45 f0             	add    %eax,-0x10(%ebp)

    uintptr_t addr = 0x100;
    assert(find_vma(mm, addr) == vma);

    int i, sum = 0;
    for (i = 0; i < 100; i ++) {
c010428d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0104291:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c0104295:	7e e1                	jle    c0104278 <check_pgfault+0x106>
        *(char *)(addr + i) = i;
        sum += i;
    }
    for (i = 0; i < 100; i ++) {
c0104297:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010429e:	eb 15                	jmp    c01042b5 <check_pgfault+0x143>
        sum -= *(char *)(addr + i);
c01042a0:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01042a3:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01042a6:	01 d0                	add    %edx,%eax
c01042a8:	0f b6 00             	movzbl (%eax),%eax
c01042ab:	0f be c0             	movsbl %al,%eax
c01042ae:	29 45 f0             	sub    %eax,-0x10(%ebp)
    int i, sum = 0;
    for (i = 0; i < 100; i ++) {
        *(char *)(addr + i) = i;
        sum += i;
    }
    for (i = 0; i < 100; i ++) {
c01042b1:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01042b5:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c01042b9:	7e e5                	jle    c01042a0 <check_pgfault+0x12e>
        sum -= *(char *)(addr + i);
    }
    assert(sum == 0);
c01042bb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01042bf:	74 19                	je     c01042da <check_pgfault+0x168>
c01042c1:	68 a3 c5 10 c0       	push   $0xc010c5a3
c01042c6:	68 1b c3 10 c0       	push   $0xc010c31b
c01042cb:	68 61 01 00 00       	push   $0x161
c01042d0:	68 30 c3 10 c0       	push   $0xc010c330
c01042d5:	e8 23 c1 ff ff       	call   c01003fd <__panic>

    page_remove(pgdir, ROUNDDOWN(addr, PGSIZE));
c01042da:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01042dd:	89 45 d8             	mov    %eax,-0x28(%ebp)
c01042e0:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01042e3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01042e8:	83 ec 08             	sub    $0x8,%esp
c01042eb:	50                   	push   %eax
c01042ec:	ff 75 e4             	pushl  -0x1c(%ebp)
c01042ef:	e8 ab 39 00 00       	call   c0107c9f <page_remove>
c01042f4:	83 c4 10             	add    $0x10,%esp
    free_page(pde2page(pgdir[0]));
c01042f7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01042fa:	8b 00                	mov    (%eax),%eax
c01042fc:	83 ec 0c             	sub    $0xc,%esp
c01042ff:	50                   	push   %eax
c0104300:	e8 1a f3 ff ff       	call   c010361f <pde2page>
c0104305:	83 c4 10             	add    $0x10,%esp
c0104308:	83 ec 08             	sub    $0x8,%esp
c010430b:	6a 01                	push   $0x1
c010430d:	50                   	push   %eax
c010430e:	e8 e4 2d 00 00       	call   c01070f7 <free_pages>
c0104313:	83 c4 10             	add    $0x10,%esp
    pgdir[0] = 0;
c0104316:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104319:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    mm->pgdir = NULL;
c010431f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104322:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
    mm_destroy(mm);
c0104329:	83 ec 0c             	sub    $0xc,%esp
c010432c:	ff 75 e8             	pushl  -0x18(%ebp)
c010432f:	e8 31 f6 ff ff       	call   c0103965 <mm_destroy>
c0104334:	83 c4 10             	add    $0x10,%esp
    check_mm_struct = NULL;
c0104337:	c7 05 d0 30 1b c0 00 	movl   $0x0,0xc01b30d0
c010433e:	00 00 00 

    assert(nr_free_pages_store == nr_free_pages());
c0104341:	e8 e6 2d 00 00       	call   c010712c <nr_free_pages>
c0104346:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0104349:	74 19                	je     c0104364 <check_pgfault+0x1f2>
c010434b:	68 ac c5 10 c0       	push   $0xc010c5ac
c0104350:	68 1b c3 10 c0       	push   $0xc010c31b
c0104355:	68 6b 01 00 00       	push   $0x16b
c010435a:	68 30 c3 10 c0       	push   $0xc010c330
c010435f:	e8 99 c0 ff ff       	call   c01003fd <__panic>

    cprintf("check_pgfault() succeeded!\n");
c0104364:	83 ec 0c             	sub    $0xc,%esp
c0104367:	68 d3 c5 10 c0       	push   $0xc010c5d3
c010436c:	e8 26 bf ff ff       	call   c0100297 <cprintf>
c0104371:	83 c4 10             	add    $0x10,%esp
}
c0104374:	90                   	nop
c0104375:	c9                   	leave  
c0104376:	c3                   	ret    

c0104377 <do_pgfault>:
 *            was a read (0) or write (1).
 *         -- The U/S flag (bit 2) indicates whether the processor was executing at user mode (1)
 *            or supervisor mode (0) at the time of the exception.
 */
int
do_pgfault(struct mm_struct *mm, uint32_t error_code, uintptr_t addr) {
c0104377:	55                   	push   %ebp
c0104378:	89 e5                	mov    %esp,%ebp
c010437a:	83 ec 28             	sub    $0x28,%esp
    int ret = -E_INVAL;
c010437d:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
    //try to find a vma which include addr
    struct vma_struct *vma = find_vma(mm, addr);
c0104384:	ff 75 10             	pushl  0x10(%ebp)
c0104387:	ff 75 08             	pushl  0x8(%ebp)
c010438a:	e8 86 f3 ff ff       	call   c0103715 <find_vma>
c010438f:	83 c4 08             	add    $0x8,%esp
c0104392:	89 45 ec             	mov    %eax,-0x14(%ebp)

    pgfault_num++;
c0104395:	a1 64 0f 1b c0       	mov    0xc01b0f64,%eax
c010439a:	83 c0 01             	add    $0x1,%eax
c010439d:	a3 64 0f 1b c0       	mov    %eax,0xc01b0f64
    //If the addr is in the range of a mm's vma?
    if (vma == NULL || vma->vm_start > addr) {
c01043a2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01043a6:	74 0b                	je     c01043b3 <do_pgfault+0x3c>
c01043a8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01043ab:	8b 40 04             	mov    0x4(%eax),%eax
c01043ae:	3b 45 10             	cmp    0x10(%ebp),%eax
c01043b1:	76 18                	jbe    c01043cb <do_pgfault+0x54>
        cprintf("not valid addr %x, and  can not find it in vma\n", addr);
c01043b3:	83 ec 08             	sub    $0x8,%esp
c01043b6:	ff 75 10             	pushl  0x10(%ebp)
c01043b9:	68 f0 c5 10 c0       	push   $0xc010c5f0
c01043be:	e8 d4 be ff ff       	call   c0100297 <cprintf>
c01043c3:	83 c4 10             	add    $0x10,%esp
        goto failed;
c01043c6:	e9 b4 01 00 00       	jmp    c010457f <do_pgfault+0x208>
    }
    //check the error_code
    switch (error_code & 3) {
c01043cb:	8b 45 0c             	mov    0xc(%ebp),%eax
c01043ce:	83 e0 03             	and    $0x3,%eax
c01043d1:	85 c0                	test   %eax,%eax
c01043d3:	74 3c                	je     c0104411 <do_pgfault+0x9a>
c01043d5:	83 f8 01             	cmp    $0x1,%eax
c01043d8:	74 22                	je     c01043fc <do_pgfault+0x85>
    default:
            /* error code flag : default is 3 ( W/R=1, P=1): write, present */
    case 2: /* error code flag : (W/R=1, P=0): write, not present */
        if (!(vma->vm_flags & VM_WRITE)) {
c01043da:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01043dd:	8b 40 0c             	mov    0xc(%eax),%eax
c01043e0:	83 e0 02             	and    $0x2,%eax
c01043e3:	85 c0                	test   %eax,%eax
c01043e5:	75 4c                	jne    c0104433 <do_pgfault+0xbc>
            cprintf("do_pgfault failed: error code flag = write AND not present, but the addr's vma cannot write\n");
c01043e7:	83 ec 0c             	sub    $0xc,%esp
c01043ea:	68 20 c6 10 c0       	push   $0xc010c620
c01043ef:	e8 a3 be ff ff       	call   c0100297 <cprintf>
c01043f4:	83 c4 10             	add    $0x10,%esp
            goto failed;
c01043f7:	e9 83 01 00 00       	jmp    c010457f <do_pgfault+0x208>
        }
        break;
    case 1: /* error code flag : (W/R=0, P=1): read, present */
        cprintf("do_pgfault failed: error code flag = read AND present\n");
c01043fc:	83 ec 0c             	sub    $0xc,%esp
c01043ff:	68 80 c6 10 c0       	push   $0xc010c680
c0104404:	e8 8e be ff ff       	call   c0100297 <cprintf>
c0104409:	83 c4 10             	add    $0x10,%esp
        goto failed;
c010440c:	e9 6e 01 00 00       	jmp    c010457f <do_pgfault+0x208>
    case 0: /* error code flag : (W/R=0, P=0): read, not present */
        if (!(vma->vm_flags & (VM_READ | VM_EXEC))) {
c0104411:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104414:	8b 40 0c             	mov    0xc(%eax),%eax
c0104417:	83 e0 05             	and    $0x5,%eax
c010441a:	85 c0                	test   %eax,%eax
c010441c:	75 16                	jne    c0104434 <do_pgfault+0xbd>
            cprintf("do_pgfault failed: error code flag = read AND not present, but the addr's vma cannot read or exec\n");
c010441e:	83 ec 0c             	sub    $0xc,%esp
c0104421:	68 b8 c6 10 c0       	push   $0xc010c6b8
c0104426:	e8 6c be ff ff       	call   c0100297 <cprintf>
c010442b:	83 c4 10             	add    $0x10,%esp
            goto failed;
c010442e:	e9 4c 01 00 00       	jmp    c010457f <do_pgfault+0x208>
    case 2: /* error code flag : (W/R=1, P=0): write, not present */
        if (!(vma->vm_flags & VM_WRITE)) {
            cprintf("do_pgfault failed: error code flag = write AND not present, but the addr's vma cannot write\n");
            goto failed;
        }
        break;
c0104433:	90                   	nop
     *    (write an non_existed addr && addr is writable) OR
     *    (read  an non_existed addr && addr is readable)
     * THEN
     *    continue process
     */
    uint32_t perm = PTE_U;
c0104434:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
    if (vma->vm_flags & VM_WRITE) {
c010443b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010443e:	8b 40 0c             	mov    0xc(%eax),%eax
c0104441:	83 e0 02             	and    $0x2,%eax
c0104444:	85 c0                	test   %eax,%eax
c0104446:	74 04                	je     c010444c <do_pgfault+0xd5>
        perm |= PTE_W;
c0104448:	83 4d f0 02          	orl    $0x2,-0x10(%ebp)
    }
    addr = ROUNDDOWN(addr, PGSIZE);
c010444c:	8b 45 10             	mov    0x10(%ebp),%eax
c010444f:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0104452:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104455:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010445a:	89 45 10             	mov    %eax,0x10(%ebp)

    ret = -E_NO_MEM;
c010445d:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    pte_t *ptep=NULL;
c0104464:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    *   mm->pgdir : the PDT of these vma
    *
    */
   /*LAB3 EXERCISE 1: YOUR CODE*/
    //(1) try to find a pte, if pte's PT(Page Table) isn't existed, then create a PT.
    ptep = get_pte(mm->pgdir, addr, 1);
c010446b:	8b 45 08             	mov    0x8(%ebp),%eax
c010446e:	8b 40 0c             	mov    0xc(%eax),%eax
c0104471:	83 ec 04             	sub    $0x4,%esp
c0104474:	6a 01                	push   $0x1
c0104476:	ff 75 10             	pushl  0x10(%ebp)
c0104479:	50                   	push   %eax
c010447a:	e8 78 32 00 00       	call   c01076f7 <get_pte>
c010447f:	83 c4 10             	add    $0x10,%esp
c0104482:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(ptep != NULL);
c0104485:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0104489:	75 19                	jne    c01044a4 <do_pgfault+0x12d>
c010448b:	68 1b c7 10 c0       	push   $0xc010c71b
c0104490:	68 1b c3 10 c0       	push   $0xc010c31b
c0104495:	68 c9 01 00 00       	push   $0x1c9
c010449a:	68 30 c3 10 c0       	push   $0xc010c330
c010449f:	e8 59 bf ff ff       	call   c01003fd <__panic>
    //(2) if the phy addr isn't exist, then alloc a page & map the phy addr with logical addr
    if (*ptep == 0) {
c01044a4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01044a7:	8b 00                	mov    (%eax),%eax
c01044a9:	85 c0                	test   %eax,%eax
c01044ab:	75 39                	jne    c01044e6 <do_pgfault+0x16f>
        assert(pgdir_alloc_page(mm->pgdir, addr, perm) != NULL);
c01044ad:	8b 45 08             	mov    0x8(%ebp),%eax
c01044b0:	8b 40 0c             	mov    0xc(%eax),%eax
c01044b3:	83 ec 04             	sub    $0x4,%esp
c01044b6:	ff 75 f0             	pushl  -0x10(%ebp)
c01044b9:	ff 75 10             	pushl  0x10(%ebp)
c01044bc:	50                   	push   %eax
c01044bd:	e8 1f 39 00 00       	call   c0107de1 <pgdir_alloc_page>
c01044c2:	83 c4 10             	add    $0x10,%esp
c01044c5:	85 c0                	test   %eax,%eax
c01044c7:	0f 85 ab 00 00 00    	jne    c0104578 <do_pgfault+0x201>
c01044cd:	68 28 c7 10 c0       	push   $0xc010c728
c01044d2:	68 1b c3 10 c0       	push   $0xc010c31b
c01044d7:	68 cc 01 00 00       	push   $0x1cc
c01044dc:	68 30 c3 10 c0       	push   $0xc010c330
c01044e1:	e8 17 bf ff ff       	call   c01003fd <__panic>
    *    swap_in(mm, addr, &page) : alloc a memory page, then according to the swap entry in PTE for addr,
    *                               find the addr of disk page, read the content of disk page into this memroy page
    *    page_insert ： build the map of phy addr of an Page with the linear addr la
    *    swap_map_swappable ： set the page swappable
    */
        if(swap_init_ok) {
c01044e6:	a1 6c 0f 1b c0       	mov    0xc01b0f6c,%eax
c01044eb:	85 c0                	test   %eax,%eax
c01044ed:	74 71                	je     c0104560 <do_pgfault+0x1e9>
            struct Page *page=NULL;
c01044ef:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
            //(1）According to the mm AND addr, try to load the content of right disk page
            //    into the memory which page managed.
            assert(swap_in(mm, addr, &page) == 0);
c01044f6:	83 ec 04             	sub    $0x4,%esp
c01044f9:	8d 45 e0             	lea    -0x20(%ebp),%eax
c01044fc:	50                   	push   %eax
c01044fd:	ff 75 10             	pushl  0x10(%ebp)
c0104500:	ff 75 08             	pushl  0x8(%ebp)
c0104503:	e8 9b 10 00 00       	call   c01055a3 <swap_in>
c0104508:	83 c4 10             	add    $0x10,%esp
c010450b:	85 c0                	test   %eax,%eax
c010450d:	74 19                	je     c0104528 <do_pgfault+0x1b1>
c010450f:	68 58 c7 10 c0       	push   $0xc010c758
c0104514:	68 1b c3 10 c0       	push   $0xc010c31b
c0104519:	68 de 01 00 00       	push   $0x1de
c010451e:	68 30 c3 10 c0       	push   $0xc010c330
c0104523:	e8 d5 be ff ff       	call   c01003fd <__panic>
            page->pra_vaddr = addr;
c0104528:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010452b:	8b 55 10             	mov    0x10(%ebp),%edx
c010452e:	89 50 1c             	mov    %edx,0x1c(%eax)
            //(2) According to the mm, addr AND page, setup the map of phy addr <---> logical addr
            page_insert(mm->pgdir, page, addr, perm);
c0104531:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0104534:	8b 45 08             	mov    0x8(%ebp),%eax
c0104537:	8b 40 0c             	mov    0xc(%eax),%eax
c010453a:	ff 75 f0             	pushl  -0x10(%ebp)
c010453d:	ff 75 10             	pushl  0x10(%ebp)
c0104540:	52                   	push   %edx
c0104541:	50                   	push   %eax
c0104542:	e8 91 37 00 00       	call   c0107cd8 <page_insert>
c0104547:	83 c4 10             	add    $0x10,%esp
            //(3) make the page swappable.
            swap_map_swappable(mm, addr, page, 1);
c010454a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010454d:	6a 01                	push   $0x1
c010454f:	50                   	push   %eax
c0104550:	ff 75 10             	pushl  0x10(%ebp)
c0104553:	ff 75 08             	pushl  0x8(%ebp)
c0104556:	e8 b8 0e 00 00       	call   c0105413 <swap_map_swappable>
c010455b:	83 c4 10             	add    $0x10,%esp
c010455e:	eb 18                	jmp    c0104578 <do_pgfault+0x201>
        }
        else {
            cprintf("no swap_init_ok but ptep is %x, failed\n",*ptep);
c0104560:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104563:	8b 00                	mov    (%eax),%eax
c0104565:	83 ec 08             	sub    $0x8,%esp
c0104568:	50                   	push   %eax
c0104569:	68 78 c7 10 c0       	push   $0xc010c778
c010456e:	e8 24 bd ff ff       	call   c0100297 <cprintf>
c0104573:	83 c4 10             	add    $0x10,%esp
            goto failed;
c0104576:	eb 07                	jmp    c010457f <do_pgfault+0x208>
            cprintf("no swap_init_ok but ptep is %x, failed\n",*ptep);
            goto failed;
        }
#endif
   }
   ret = 0;
c0104578:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
failed:
    return ret;
c010457f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0104582:	c9                   	leave  
c0104583:	c3                   	ret    

c0104584 <user_mem_check>:

bool
user_mem_check(struct mm_struct *mm, uintptr_t addr, size_t len, bool write) {
c0104584:	55                   	push   %ebp
c0104585:	89 e5                	mov    %esp,%ebp
c0104587:	83 ec 10             	sub    $0x10,%esp
    if (mm != NULL) {
c010458a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010458e:	0f 84 dc 00 00 00    	je     c0104670 <user_mem_check+0xec>
        if (!USER_ACCESS(addr, addr + len)) {
c0104594:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c010459b:	76 1c                	jbe    c01045b9 <user_mem_check+0x35>
c010459d:	8b 55 0c             	mov    0xc(%ebp),%edx
c01045a0:	8b 45 10             	mov    0x10(%ebp),%eax
c01045a3:	01 d0                	add    %edx,%eax
c01045a5:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01045a8:	76 0f                	jbe    c01045b9 <user_mem_check+0x35>
c01045aa:	8b 55 0c             	mov    0xc(%ebp),%edx
c01045ad:	8b 45 10             	mov    0x10(%ebp),%eax
c01045b0:	01 d0                	add    %edx,%eax
c01045b2:	3d 00 00 00 b0       	cmp    $0xb0000000,%eax
c01045b7:	76 0a                	jbe    c01045c3 <user_mem_check+0x3f>
            return 0;
c01045b9:	b8 00 00 00 00       	mov    $0x0,%eax
c01045be:	e9 df 00 00 00       	jmp    c01046a2 <user_mem_check+0x11e>
        }
        struct vma_struct *vma;
        uintptr_t start = addr, end = addr + len;
c01045c3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01045c6:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01045c9:	8b 55 0c             	mov    0xc(%ebp),%edx
c01045cc:	8b 45 10             	mov    0x10(%ebp),%eax
c01045cf:	01 d0                	add    %edx,%eax
c01045d1:	89 45 f8             	mov    %eax,-0x8(%ebp)
        while (start < end) {
c01045d4:	e9 84 00 00 00       	jmp    c010465d <user_mem_check+0xd9>
            if ((vma = find_vma(mm, start)) == NULL || start < vma->vm_start) {
c01045d9:	ff 75 fc             	pushl  -0x4(%ebp)
c01045dc:	ff 75 08             	pushl  0x8(%ebp)
c01045df:	e8 31 f1 ff ff       	call   c0103715 <find_vma>
c01045e4:	83 c4 08             	add    $0x8,%esp
c01045e7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01045ea:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01045ee:	74 0b                	je     c01045fb <user_mem_check+0x77>
c01045f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01045f3:	8b 40 04             	mov    0x4(%eax),%eax
c01045f6:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c01045f9:	76 0a                	jbe    c0104605 <user_mem_check+0x81>
                return 0;
c01045fb:	b8 00 00 00 00       	mov    $0x0,%eax
c0104600:	e9 9d 00 00 00       	jmp    c01046a2 <user_mem_check+0x11e>
            }
            if (!(vma->vm_flags & ((write) ? VM_WRITE : VM_READ))) {
c0104605:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104608:	8b 40 0c             	mov    0xc(%eax),%eax
c010460b:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010460f:	74 07                	je     c0104618 <user_mem_check+0x94>
c0104611:	ba 02 00 00 00       	mov    $0x2,%edx
c0104616:	eb 05                	jmp    c010461d <user_mem_check+0x99>
c0104618:	ba 01 00 00 00       	mov    $0x1,%edx
c010461d:	21 d0                	and    %edx,%eax
c010461f:	85 c0                	test   %eax,%eax
c0104621:	75 07                	jne    c010462a <user_mem_check+0xa6>
                return 0;
c0104623:	b8 00 00 00 00       	mov    $0x0,%eax
c0104628:	eb 78                	jmp    c01046a2 <user_mem_check+0x11e>
            }
            if (write && (vma->vm_flags & VM_STACK)) {
c010462a:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010462e:	74 24                	je     c0104654 <user_mem_check+0xd0>
c0104630:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104633:	8b 40 0c             	mov    0xc(%eax),%eax
c0104636:	83 e0 08             	and    $0x8,%eax
c0104639:	85 c0                	test   %eax,%eax
c010463b:	74 17                	je     c0104654 <user_mem_check+0xd0>
                if (start < vma->vm_start + PGSIZE) { //check stack start & size
c010463d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104640:	8b 40 04             	mov    0x4(%eax),%eax
c0104643:	05 00 10 00 00       	add    $0x1000,%eax
c0104648:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c010464b:	76 07                	jbe    c0104654 <user_mem_check+0xd0>
                    return 0;
c010464d:	b8 00 00 00 00       	mov    $0x0,%eax
c0104652:	eb 4e                	jmp    c01046a2 <user_mem_check+0x11e>
                }
            }
            start = vma->vm_end;
c0104654:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104657:	8b 40 08             	mov    0x8(%eax),%eax
c010465a:	89 45 fc             	mov    %eax,-0x4(%ebp)
        if (!USER_ACCESS(addr, addr + len)) {
            return 0;
        }
        struct vma_struct *vma;
        uintptr_t start = addr, end = addr + len;
        while (start < end) {
c010465d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0104660:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c0104663:	0f 82 70 ff ff ff    	jb     c01045d9 <user_mem_check+0x55>
                    return 0;
                }
            }
            start = vma->vm_end;
        }
        return 1;
c0104669:	b8 01 00 00 00       	mov    $0x1,%eax
c010466e:	eb 32                	jmp    c01046a2 <user_mem_check+0x11e>
    }
    return KERN_ACCESS(addr, addr + len);
c0104670:	81 7d 0c ff ff ff bf 	cmpl   $0xbfffffff,0xc(%ebp)
c0104677:	76 23                	jbe    c010469c <user_mem_check+0x118>
c0104679:	8b 55 0c             	mov    0xc(%ebp),%edx
c010467c:	8b 45 10             	mov    0x10(%ebp),%eax
c010467f:	01 d0                	add    %edx,%eax
c0104681:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0104684:	76 16                	jbe    c010469c <user_mem_check+0x118>
c0104686:	8b 55 0c             	mov    0xc(%ebp),%edx
c0104689:	8b 45 10             	mov    0x10(%ebp),%eax
c010468c:	01 d0                	add    %edx,%eax
c010468e:	3d 00 00 00 f8       	cmp    $0xf8000000,%eax
c0104693:	77 07                	ja     c010469c <user_mem_check+0x118>
c0104695:	b8 01 00 00 00       	mov    $0x1,%eax
c010469a:	eb 05                	jmp    c01046a1 <user_mem_check+0x11d>
c010469c:	b8 00 00 00 00       	mov    $0x0,%eax
c01046a1:	90                   	nop
}
c01046a2:	c9                   	leave  
c01046a3:	c3                   	ret    

c01046a4 <_fifo_init_mm>:
 * (2) _fifo_init_mm: init pra_list_head and let  mm->sm_priv point to the addr of pra_list_head.
 *              Now, From the memory control struct mm_struct, we can access FIFO PRA
 */
static int
_fifo_init_mm(struct mm_struct *mm)
{     
c01046a4:	55                   	push   %ebp
c01046a5:	89 e5                	mov    %esp,%ebp
c01046a7:	83 ec 10             	sub    $0x10,%esp
c01046aa:	c7 45 fc d4 30 1b c0 	movl   $0xc01b30d4,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c01046b1:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01046b4:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01046b7:	89 50 04             	mov    %edx,0x4(%eax)
c01046ba:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01046bd:	8b 50 04             	mov    0x4(%eax),%edx
c01046c0:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01046c3:	89 10                	mov    %edx,(%eax)
     list_init(&pra_list_head);
     mm->sm_priv = &pra_list_head;
c01046c5:	8b 45 08             	mov    0x8(%ebp),%eax
c01046c8:	c7 40 14 d4 30 1b c0 	movl   $0xc01b30d4,0x14(%eax)
     //cprintf(" mm->sm_priv %x in fifo_init_mm\n",mm->sm_priv);
     return 0;
c01046cf:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01046d4:	c9                   	leave  
c01046d5:	c3                   	ret    

c01046d6 <_fifo_map_swappable>:
/*
 * (3)_fifo_map_swappable: According FIFO PRA, we should link the most recent arrival page at the back of pra_list_head qeueue
 */
static int
_fifo_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c01046d6:	55                   	push   %ebp
c01046d7:	89 e5                	mov    %esp,%ebp
c01046d9:	83 ec 48             	sub    $0x48,%esp
    list_entry_t *head=(list_entry_t*) mm->sm_priv;
c01046dc:	8b 45 08             	mov    0x8(%ebp),%eax
c01046df:	8b 40 14             	mov    0x14(%eax),%eax
c01046e2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    list_entry_t *entry=&(page->pra_page_link);
c01046e5:	8b 45 10             	mov    0x10(%ebp),%eax
c01046e8:	83 c0 14             	add    $0x14,%eax
c01046eb:	89 45 ec             	mov    %eax,-0x14(%ebp)
 
    assert(entry != NULL && head != NULL);
c01046ee:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01046f2:	74 06                	je     c01046fa <_fifo_map_swappable+0x24>
c01046f4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01046f8:	75 16                	jne    c0104710 <_fifo_map_swappable+0x3a>
c01046fa:	68 a0 c7 10 c0       	push   $0xc010c7a0
c01046ff:	68 be c7 10 c0       	push   $0xc010c7be
c0104704:	6a 32                	push   $0x32
c0104706:	68 d3 c7 10 c0       	push   $0xc010c7d3
c010470b:	e8 ed bc ff ff       	call   c01003fd <__panic>
    //record the page access situlation
    /*LAB3 EXERCISE 2: YOUR CODE*/ 
    // not swap in but call this func, means failed to swap out 
    if (swap_in == 0) {
c0104710:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0104714:	75 57                	jne    c010476d <_fifo_map_swappable+0x97>
        list_entry_t *le_prev = head, *le;
c0104716:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104719:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while ((le = list_next(le_prev)) != head) {
c010471c:	eb 38                	jmp    c0104756 <_fifo_map_swappable+0x80>
            if (le == entry) {
c010471e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104721:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0104724:	75 2a                	jne    c0104750 <_fifo_map_swappable+0x7a>
c0104726:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104729:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010472c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010472f:	8b 40 04             	mov    0x4(%eax),%eax
c0104732:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0104735:	8b 12                	mov    (%edx),%edx
c0104737:	89 55 d8             	mov    %edx,-0x28(%ebp)
c010473a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010473d:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0104740:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0104743:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0104746:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0104749:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010474c:	89 10                	mov    %edx,(%eax)
                list_del(le);
                break;
c010474e:	eb 1d                	jmp    c010476d <_fifo_map_swappable+0x97>
            }
            le_prev = le;        
c0104750:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104753:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104756:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104759:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010475c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010475f:	8b 40 04             	mov    0x4(%eax),%eax
    //record the page access situlation
    /*LAB3 EXERCISE 2: YOUR CODE*/ 
    // not swap in but call this func, means failed to swap out 
    if (swap_in == 0) {
        list_entry_t *le_prev = head, *le;
        while ((le = list_next(le_prev)) != head) {
c0104762:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0104765:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104768:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010476b:	75 b1                	jne    c010471e <_fifo_map_swappable+0x48>
c010476d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104770:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0104773:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104776:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c0104779:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010477c:	8b 00                	mov    (%eax),%eax
c010477e:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0104781:	89 55 cc             	mov    %edx,-0x34(%ebp)
c0104784:	89 45 c8             	mov    %eax,-0x38(%ebp)
c0104787:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010478a:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010478d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0104790:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0104793:	89 10                	mov    %edx,(%eax)
c0104795:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0104798:	8b 10                	mov    (%eax),%edx
c010479a:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010479d:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c01047a0:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01047a3:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c01047a6:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c01047a9:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01047ac:	8b 55 c8             	mov    -0x38(%ebp),%edx
c01047af:	89 10                	mov    %edx,(%eax)
            le_prev = le;        
        }
    }
    //(1)link the most recent arrival page at the back of the pra_list_head qeueue.
    list_add_before(head, entry);
    return 0;
c01047b1:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01047b6:	c9                   	leave  
c01047b7:	c3                   	ret    

c01047b8 <_fifo_swap_out_victim>:
 *  (4)_fifo_swap_out_victim: According FIFO PRA, we should unlink the  earliest arrival page in front of pra_list_head qeueue,
 *                            then assign the value of *ptr_page to the addr of this page.
 */
static int
_fifo_swap_out_victim(struct mm_struct *mm, struct Page ** ptr_page, int in_tick)
{
c01047b8:	55                   	push   %ebp
c01047b9:	89 e5                	mov    %esp,%ebp
c01047bb:	83 ec 28             	sub    $0x28,%esp
     list_entry_t *head=(list_entry_t*) mm->sm_priv;
c01047be:	8b 45 08             	mov    0x8(%ebp),%eax
c01047c1:	8b 40 14             	mov    0x14(%eax),%eax
c01047c4:	89 45 f4             	mov    %eax,-0xc(%ebp)
         assert(head != NULL);
c01047c7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01047cb:	75 16                	jne    c01047e3 <_fifo_swap_out_victim+0x2b>
c01047cd:	68 e7 c7 10 c0       	push   $0xc010c7e7
c01047d2:	68 be c7 10 c0       	push   $0xc010c7be
c01047d7:	6a 4c                	push   $0x4c
c01047d9:	68 d3 c7 10 c0       	push   $0xc010c7d3
c01047de:	e8 1a bc ff ff       	call   c01003fd <__panic>
     assert(in_tick==0);
c01047e3:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01047e7:	74 16                	je     c01047ff <_fifo_swap_out_victim+0x47>
c01047e9:	68 f4 c7 10 c0       	push   $0xc010c7f4
c01047ee:	68 be c7 10 c0       	push   $0xc010c7be
c01047f3:	6a 4d                	push   $0x4d
c01047f5:	68 d3 c7 10 c0       	push   $0xc010c7d3
c01047fa:	e8 fe bb ff ff       	call   c01003fd <__panic>
c01047ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104802:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0104805:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104808:	8b 40 04             	mov    0x4(%eax),%eax
     /* Select the victim */
     /*LAB3 EXERCISE 2: YOUR CODE*/ 
    //(1)  unlink the  earliest arrival page in front of pra_list_head qeueue
    list_entry_t *front = list_next(head);
c010480b:	89 45 ec             	mov    %eax,-0x14(%ebp)
    assert(front != head);
c010480e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104811:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104814:	75 16                	jne    c010482c <_fifo_swap_out_victim+0x74>
c0104816:	68 ff c7 10 c0       	push   $0xc010c7ff
c010481b:	68 be c7 10 c0       	push   $0xc010c7be
c0104820:	6a 52                	push   $0x52
c0104822:	68 d3 c7 10 c0       	push   $0xc010c7d3
c0104827:	e8 d1 bb ff ff       	call   c01003fd <__panic>
c010482c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010482f:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0104832:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104835:	8b 40 04             	mov    0x4(%eax),%eax
c0104838:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010483b:	8b 12                	mov    (%edx),%edx
c010483d:	89 55 e0             	mov    %edx,-0x20(%ebp)
c0104840:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0104843:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104846:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0104849:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010484c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010484f:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0104852:	89 10                	mov    %edx,(%eax)
    list_del(front);
    //(2)  assign the value of *ptr_page to the addr of this page
    struct Page *page = le2page(front, pra_page_link);
c0104854:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104857:	83 e8 14             	sub    $0x14,%eax
c010485a:	89 45 e8             	mov    %eax,-0x18(%ebp)
    assert(page != NULL);
c010485d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0104861:	75 16                	jne    c0104879 <_fifo_swap_out_victim+0xc1>
c0104863:	68 0d c8 10 c0       	push   $0xc010c80d
c0104868:	68 be c7 10 c0       	push   $0xc010c7be
c010486d:	6a 56                	push   $0x56
c010486f:	68 d3 c7 10 c0       	push   $0xc010c7d3
c0104874:	e8 84 bb ff ff       	call   c01003fd <__panic>
    *ptr_page = page;
c0104879:	8b 45 0c             	mov    0xc(%ebp),%eax
c010487c:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010487f:	89 10                	mov    %edx,(%eax)
    return 0;
c0104881:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104886:	c9                   	leave  
c0104887:	c3                   	ret    

c0104888 <_fifo_check_swap>:

static int
_fifo_check_swap(void) {
c0104888:	55                   	push   %ebp
c0104889:	89 e5                	mov    %esp,%ebp
c010488b:	83 ec 08             	sub    $0x8,%esp
    cprintf("write Virt Page c in fifo_check_swap\n");
c010488e:	83 ec 0c             	sub    $0xc,%esp
c0104891:	68 1c c8 10 c0       	push   $0xc010c81c
c0104896:	e8 fc b9 ff ff       	call   c0100297 <cprintf>
c010489b:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x3000 = 0x0c;
c010489e:	b8 00 30 00 00       	mov    $0x3000,%eax
c01048a3:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==4);
c01048a6:	a1 64 0f 1b c0       	mov    0xc01b0f64,%eax
c01048ab:	83 f8 04             	cmp    $0x4,%eax
c01048ae:	74 16                	je     c01048c6 <_fifo_check_swap+0x3e>
c01048b0:	68 42 c8 10 c0       	push   $0xc010c842
c01048b5:	68 be c7 10 c0       	push   $0xc010c7be
c01048ba:	6a 5f                	push   $0x5f
c01048bc:	68 d3 c7 10 c0       	push   $0xc010c7d3
c01048c1:	e8 37 bb ff ff       	call   c01003fd <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c01048c6:	83 ec 0c             	sub    $0xc,%esp
c01048c9:	68 54 c8 10 c0       	push   $0xc010c854
c01048ce:	e8 c4 b9 ff ff       	call   c0100297 <cprintf>
c01048d3:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x1000 = 0x0a;
c01048d6:	b8 00 10 00 00       	mov    $0x1000,%eax
c01048db:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==4);
c01048de:	a1 64 0f 1b c0       	mov    0xc01b0f64,%eax
c01048e3:	83 f8 04             	cmp    $0x4,%eax
c01048e6:	74 16                	je     c01048fe <_fifo_check_swap+0x76>
c01048e8:	68 42 c8 10 c0       	push   $0xc010c842
c01048ed:	68 be c7 10 c0       	push   $0xc010c7be
c01048f2:	6a 62                	push   $0x62
c01048f4:	68 d3 c7 10 c0       	push   $0xc010c7d3
c01048f9:	e8 ff ba ff ff       	call   c01003fd <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c01048fe:	83 ec 0c             	sub    $0xc,%esp
c0104901:	68 7c c8 10 c0       	push   $0xc010c87c
c0104906:	e8 8c b9 ff ff       	call   c0100297 <cprintf>
c010490b:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x4000 = 0x0d;
c010490e:	b8 00 40 00 00       	mov    $0x4000,%eax
c0104913:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==4);
c0104916:	a1 64 0f 1b c0       	mov    0xc01b0f64,%eax
c010491b:	83 f8 04             	cmp    $0x4,%eax
c010491e:	74 16                	je     c0104936 <_fifo_check_swap+0xae>
c0104920:	68 42 c8 10 c0       	push   $0xc010c842
c0104925:	68 be c7 10 c0       	push   $0xc010c7be
c010492a:	6a 65                	push   $0x65
c010492c:	68 d3 c7 10 c0       	push   $0xc010c7d3
c0104931:	e8 c7 ba ff ff       	call   c01003fd <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0104936:	83 ec 0c             	sub    $0xc,%esp
c0104939:	68 a4 c8 10 c0       	push   $0xc010c8a4
c010493e:	e8 54 b9 ff ff       	call   c0100297 <cprintf>
c0104943:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x2000 = 0x0b;
c0104946:	b8 00 20 00 00       	mov    $0x2000,%eax
c010494b:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==4);
c010494e:	a1 64 0f 1b c0       	mov    0xc01b0f64,%eax
c0104953:	83 f8 04             	cmp    $0x4,%eax
c0104956:	74 16                	je     c010496e <_fifo_check_swap+0xe6>
c0104958:	68 42 c8 10 c0       	push   $0xc010c842
c010495d:	68 be c7 10 c0       	push   $0xc010c7be
c0104962:	6a 68                	push   $0x68
c0104964:	68 d3 c7 10 c0       	push   $0xc010c7d3
c0104969:	e8 8f ba ff ff       	call   c01003fd <__panic>
    cprintf("write Virt Page e in fifo_check_swap\n");
c010496e:	83 ec 0c             	sub    $0xc,%esp
c0104971:	68 cc c8 10 c0       	push   $0xc010c8cc
c0104976:	e8 1c b9 ff ff       	call   c0100297 <cprintf>
c010497b:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x5000 = 0x0e;
c010497e:	b8 00 50 00 00       	mov    $0x5000,%eax
c0104983:	c6 00 0e             	movb   $0xe,(%eax)
    assert(pgfault_num==5);
c0104986:	a1 64 0f 1b c0       	mov    0xc01b0f64,%eax
c010498b:	83 f8 05             	cmp    $0x5,%eax
c010498e:	74 16                	je     c01049a6 <_fifo_check_swap+0x11e>
c0104990:	68 f2 c8 10 c0       	push   $0xc010c8f2
c0104995:	68 be c7 10 c0       	push   $0xc010c7be
c010499a:	6a 6b                	push   $0x6b
c010499c:	68 d3 c7 10 c0       	push   $0xc010c7d3
c01049a1:	e8 57 ba ff ff       	call   c01003fd <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c01049a6:	83 ec 0c             	sub    $0xc,%esp
c01049a9:	68 a4 c8 10 c0       	push   $0xc010c8a4
c01049ae:	e8 e4 b8 ff ff       	call   c0100297 <cprintf>
c01049b3:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x2000 = 0x0b;
c01049b6:	b8 00 20 00 00       	mov    $0x2000,%eax
c01049bb:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==5);
c01049be:	a1 64 0f 1b c0       	mov    0xc01b0f64,%eax
c01049c3:	83 f8 05             	cmp    $0x5,%eax
c01049c6:	74 16                	je     c01049de <_fifo_check_swap+0x156>
c01049c8:	68 f2 c8 10 c0       	push   $0xc010c8f2
c01049cd:	68 be c7 10 c0       	push   $0xc010c7be
c01049d2:	6a 6e                	push   $0x6e
c01049d4:	68 d3 c7 10 c0       	push   $0xc010c7d3
c01049d9:	e8 1f ba ff ff       	call   c01003fd <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c01049de:	83 ec 0c             	sub    $0xc,%esp
c01049e1:	68 54 c8 10 c0       	push   $0xc010c854
c01049e6:	e8 ac b8 ff ff       	call   c0100297 <cprintf>
c01049eb:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x1000 = 0x0a;
c01049ee:	b8 00 10 00 00       	mov    $0x1000,%eax
c01049f3:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==6);
c01049f6:	a1 64 0f 1b c0       	mov    0xc01b0f64,%eax
c01049fb:	83 f8 06             	cmp    $0x6,%eax
c01049fe:	74 16                	je     c0104a16 <_fifo_check_swap+0x18e>
c0104a00:	68 01 c9 10 c0       	push   $0xc010c901
c0104a05:	68 be c7 10 c0       	push   $0xc010c7be
c0104a0a:	6a 71                	push   $0x71
c0104a0c:	68 d3 c7 10 c0       	push   $0xc010c7d3
c0104a11:	e8 e7 b9 ff ff       	call   c01003fd <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0104a16:	83 ec 0c             	sub    $0xc,%esp
c0104a19:	68 a4 c8 10 c0       	push   $0xc010c8a4
c0104a1e:	e8 74 b8 ff ff       	call   c0100297 <cprintf>
c0104a23:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x2000 = 0x0b;
c0104a26:	b8 00 20 00 00       	mov    $0x2000,%eax
c0104a2b:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==7);
c0104a2e:	a1 64 0f 1b c0       	mov    0xc01b0f64,%eax
c0104a33:	83 f8 07             	cmp    $0x7,%eax
c0104a36:	74 16                	je     c0104a4e <_fifo_check_swap+0x1c6>
c0104a38:	68 10 c9 10 c0       	push   $0xc010c910
c0104a3d:	68 be c7 10 c0       	push   $0xc010c7be
c0104a42:	6a 74                	push   $0x74
c0104a44:	68 d3 c7 10 c0       	push   $0xc010c7d3
c0104a49:	e8 af b9 ff ff       	call   c01003fd <__panic>
    cprintf("write Virt Page c in fifo_check_swap\n");
c0104a4e:	83 ec 0c             	sub    $0xc,%esp
c0104a51:	68 1c c8 10 c0       	push   $0xc010c81c
c0104a56:	e8 3c b8 ff ff       	call   c0100297 <cprintf>
c0104a5b:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x3000 = 0x0c;
c0104a5e:	b8 00 30 00 00       	mov    $0x3000,%eax
c0104a63:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==8);
c0104a66:	a1 64 0f 1b c0       	mov    0xc01b0f64,%eax
c0104a6b:	83 f8 08             	cmp    $0x8,%eax
c0104a6e:	74 16                	je     c0104a86 <_fifo_check_swap+0x1fe>
c0104a70:	68 1f c9 10 c0       	push   $0xc010c91f
c0104a75:	68 be c7 10 c0       	push   $0xc010c7be
c0104a7a:	6a 77                	push   $0x77
c0104a7c:	68 d3 c7 10 c0       	push   $0xc010c7d3
c0104a81:	e8 77 b9 ff ff       	call   c01003fd <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c0104a86:	83 ec 0c             	sub    $0xc,%esp
c0104a89:	68 7c c8 10 c0       	push   $0xc010c87c
c0104a8e:	e8 04 b8 ff ff       	call   c0100297 <cprintf>
c0104a93:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x4000 = 0x0d;
c0104a96:	b8 00 40 00 00       	mov    $0x4000,%eax
c0104a9b:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==9);
c0104a9e:	a1 64 0f 1b c0       	mov    0xc01b0f64,%eax
c0104aa3:	83 f8 09             	cmp    $0x9,%eax
c0104aa6:	74 16                	je     c0104abe <_fifo_check_swap+0x236>
c0104aa8:	68 2e c9 10 c0       	push   $0xc010c92e
c0104aad:	68 be c7 10 c0       	push   $0xc010c7be
c0104ab2:	6a 7a                	push   $0x7a
c0104ab4:	68 d3 c7 10 c0       	push   $0xc010c7d3
c0104ab9:	e8 3f b9 ff ff       	call   c01003fd <__panic>
    cprintf("write Virt Page e in fifo_check_swap\n");
c0104abe:	83 ec 0c             	sub    $0xc,%esp
c0104ac1:	68 cc c8 10 c0       	push   $0xc010c8cc
c0104ac6:	e8 cc b7 ff ff       	call   c0100297 <cprintf>
c0104acb:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x5000 = 0x0e;
c0104ace:	b8 00 50 00 00       	mov    $0x5000,%eax
c0104ad3:	c6 00 0e             	movb   $0xe,(%eax)
    assert(pgfault_num==10);
c0104ad6:	a1 64 0f 1b c0       	mov    0xc01b0f64,%eax
c0104adb:	83 f8 0a             	cmp    $0xa,%eax
c0104ade:	74 16                	je     c0104af6 <_fifo_check_swap+0x26e>
c0104ae0:	68 3d c9 10 c0       	push   $0xc010c93d
c0104ae5:	68 be c7 10 c0       	push   $0xc010c7be
c0104aea:	6a 7d                	push   $0x7d
c0104aec:	68 d3 c7 10 c0       	push   $0xc010c7d3
c0104af1:	e8 07 b9 ff ff       	call   c01003fd <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c0104af6:	83 ec 0c             	sub    $0xc,%esp
c0104af9:	68 54 c8 10 c0       	push   $0xc010c854
c0104afe:	e8 94 b7 ff ff       	call   c0100297 <cprintf>
c0104b03:	83 c4 10             	add    $0x10,%esp
    assert(*(unsigned char *)0x1000 == 0x0a);
c0104b06:	b8 00 10 00 00       	mov    $0x1000,%eax
c0104b0b:	0f b6 00             	movzbl (%eax),%eax
c0104b0e:	3c 0a                	cmp    $0xa,%al
c0104b10:	74 16                	je     c0104b28 <_fifo_check_swap+0x2a0>
c0104b12:	68 50 c9 10 c0       	push   $0xc010c950
c0104b17:	68 be c7 10 c0       	push   $0xc010c7be
c0104b1c:	6a 7f                	push   $0x7f
c0104b1e:	68 d3 c7 10 c0       	push   $0xc010c7d3
c0104b23:	e8 d5 b8 ff ff       	call   c01003fd <__panic>
    *(unsigned char *)0x1000 = 0x0a;
c0104b28:	b8 00 10 00 00       	mov    $0x1000,%eax
c0104b2d:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==11);
c0104b30:	a1 64 0f 1b c0       	mov    0xc01b0f64,%eax
c0104b35:	83 f8 0b             	cmp    $0xb,%eax
c0104b38:	74 19                	je     c0104b53 <_fifo_check_swap+0x2cb>
c0104b3a:	68 71 c9 10 c0       	push   $0xc010c971
c0104b3f:	68 be c7 10 c0       	push   $0xc010c7be
c0104b44:	68 81 00 00 00       	push   $0x81
c0104b49:	68 d3 c7 10 c0       	push   $0xc010c7d3
c0104b4e:	e8 aa b8 ff ff       	call   c01003fd <__panic>
    return 0;
c0104b53:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104b58:	c9                   	leave  
c0104b59:	c3                   	ret    

c0104b5a <_fifo_init>:


static int
_fifo_init(void)
{
c0104b5a:	55                   	push   %ebp
c0104b5b:	89 e5                	mov    %esp,%ebp
    return 0;
c0104b5d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104b62:	5d                   	pop    %ebp
c0104b63:	c3                   	ret    

c0104b64 <_fifo_set_unswappable>:

static int
_fifo_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c0104b64:	55                   	push   %ebp
c0104b65:	89 e5                	mov    %esp,%ebp
    return 0;
c0104b67:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104b6c:	5d                   	pop    %ebp
c0104b6d:	c3                   	ret    

c0104b6e <_fifo_tick_event>:

static int
_fifo_tick_event(struct mm_struct *mm)
{ return 0; }
c0104b6e:	55                   	push   %ebp
c0104b6f:	89 e5                	mov    %esp,%ebp
c0104b71:	b8 00 00 00 00       	mov    $0x0,%eax
c0104b76:	5d                   	pop    %ebp
c0104b77:	c3                   	ret    

c0104b78 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0104b78:	55                   	push   %ebp
c0104b79:	89 e5                	mov    %esp,%ebp
c0104b7b:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0104b7e:	9c                   	pushf  
c0104b7f:	58                   	pop    %eax
c0104b80:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0104b83:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0104b86:	25 00 02 00 00       	and    $0x200,%eax
c0104b8b:	85 c0                	test   %eax,%eax
c0104b8d:	74 0c                	je     c0104b9b <__intr_save+0x23>
        intr_disable();
c0104b8f:	e8 28 d6 ff ff       	call   c01021bc <intr_disable>
        return 1;
c0104b94:	b8 01 00 00 00       	mov    $0x1,%eax
c0104b99:	eb 05                	jmp    c0104ba0 <__intr_save+0x28>
    }
    return 0;
c0104b9b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104ba0:	c9                   	leave  
c0104ba1:	c3                   	ret    

c0104ba2 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0104ba2:	55                   	push   %ebp
c0104ba3:	89 e5                	mov    %esp,%ebp
c0104ba5:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0104ba8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104bac:	74 05                	je     c0104bb3 <__intr_restore+0x11>
        intr_enable();
c0104bae:	e8 02 d6 ff ff       	call   c01021b5 <intr_enable>
    }
}
c0104bb3:	90                   	nop
c0104bb4:	c9                   	leave  
c0104bb5:	c3                   	ret    

c0104bb6 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0104bb6:	55                   	push   %ebp
c0104bb7:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0104bb9:	8b 45 08             	mov    0x8(%ebp),%eax
c0104bbc:	8b 15 b8 31 1b c0    	mov    0xc01b31b8,%edx
c0104bc2:	29 d0                	sub    %edx,%eax
c0104bc4:	c1 f8 05             	sar    $0x5,%eax
}
c0104bc7:	5d                   	pop    %ebp
c0104bc8:	c3                   	ret    

c0104bc9 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0104bc9:	55                   	push   %ebp
c0104bca:	89 e5                	mov    %esp,%ebp
    return page2ppn(page) << PGSHIFT;
c0104bcc:	ff 75 08             	pushl  0x8(%ebp)
c0104bcf:	e8 e2 ff ff ff       	call   c0104bb6 <page2ppn>
c0104bd4:	83 c4 04             	add    $0x4,%esp
c0104bd7:	c1 e0 0c             	shl    $0xc,%eax
}
c0104bda:	c9                   	leave  
c0104bdb:	c3                   	ret    

c0104bdc <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c0104bdc:	55                   	push   %ebp
c0104bdd:	89 e5                	mov    %esp,%ebp
c0104bdf:	83 ec 08             	sub    $0x8,%esp
    if (PPN(pa) >= npage) {
c0104be2:	8b 45 08             	mov    0x8(%ebp),%eax
c0104be5:	c1 e8 0c             	shr    $0xc,%eax
c0104be8:	89 c2                	mov    %eax,%edx
c0104bea:	a1 80 0f 1b c0       	mov    0xc01b0f80,%eax
c0104bef:	39 c2                	cmp    %eax,%edx
c0104bf1:	72 14                	jb     c0104c07 <pa2page+0x2b>
        panic("pa2page called with invalid pa");
c0104bf3:	83 ec 04             	sub    $0x4,%esp
c0104bf6:	68 94 c9 10 c0       	push   $0xc010c994
c0104bfb:	6a 5e                	push   $0x5e
c0104bfd:	68 b3 c9 10 c0       	push   $0xc010c9b3
c0104c02:	e8 f6 b7 ff ff       	call   c01003fd <__panic>
    }
    return &pages[PPN(pa)];
c0104c07:	a1 b8 31 1b c0       	mov    0xc01b31b8,%eax
c0104c0c:	8b 55 08             	mov    0x8(%ebp),%edx
c0104c0f:	c1 ea 0c             	shr    $0xc,%edx
c0104c12:	c1 e2 05             	shl    $0x5,%edx
c0104c15:	01 d0                	add    %edx,%eax
}
c0104c17:	c9                   	leave  
c0104c18:	c3                   	ret    

c0104c19 <page2kva>:

static inline void *
page2kva(struct Page *page) {
c0104c19:	55                   	push   %ebp
c0104c1a:	89 e5                	mov    %esp,%ebp
c0104c1c:	83 ec 18             	sub    $0x18,%esp
    return KADDR(page2pa(page));
c0104c1f:	ff 75 08             	pushl  0x8(%ebp)
c0104c22:	e8 a2 ff ff ff       	call   c0104bc9 <page2pa>
c0104c27:	83 c4 04             	add    $0x4,%esp
c0104c2a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104c2d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c30:	c1 e8 0c             	shr    $0xc,%eax
c0104c33:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104c36:	a1 80 0f 1b c0       	mov    0xc01b0f80,%eax
c0104c3b:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0104c3e:	72 14                	jb     c0104c54 <page2kva+0x3b>
c0104c40:	ff 75 f4             	pushl  -0xc(%ebp)
c0104c43:	68 c4 c9 10 c0       	push   $0xc010c9c4
c0104c48:	6a 65                	push   $0x65
c0104c4a:	68 b3 c9 10 c0       	push   $0xc010c9b3
c0104c4f:	e8 a9 b7 ff ff       	call   c01003fd <__panic>
c0104c54:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c57:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c0104c5c:	c9                   	leave  
c0104c5d:	c3                   	ret    

c0104c5e <kva2page>:

static inline struct Page *
kva2page(void *kva) {
c0104c5e:	55                   	push   %ebp
c0104c5f:	89 e5                	mov    %esp,%ebp
c0104c61:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PADDR(kva));
c0104c64:	8b 45 08             	mov    0x8(%ebp),%eax
c0104c67:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104c6a:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c0104c71:	77 14                	ja     c0104c87 <kva2page+0x29>
c0104c73:	ff 75 f4             	pushl  -0xc(%ebp)
c0104c76:	68 e8 c9 10 c0       	push   $0xc010c9e8
c0104c7b:	6a 6a                	push   $0x6a
c0104c7d:	68 b3 c9 10 c0       	push   $0xc010c9b3
c0104c82:	e8 76 b7 ff ff       	call   c01003fd <__panic>
c0104c87:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c8a:	05 00 00 00 40       	add    $0x40000000,%eax
c0104c8f:	83 ec 0c             	sub    $0xc,%esp
c0104c92:	50                   	push   %eax
c0104c93:	e8 44 ff ff ff       	call   c0104bdc <pa2page>
c0104c98:	83 c4 10             	add    $0x10,%esp
}
c0104c9b:	c9                   	leave  
c0104c9c:	c3                   	ret    

c0104c9d <__slob_get_free_pages>:
static slob_t *slobfree = &arena;
static bigblock_t *bigblocks;


static void* __slob_get_free_pages(gfp_t gfp, int order)
{
c0104c9d:	55                   	push   %ebp
c0104c9e:	89 e5                	mov    %esp,%ebp
c0104ca0:	83 ec 18             	sub    $0x18,%esp
  struct Page * page = alloc_pages(1 << order);
c0104ca3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104ca6:	ba 01 00 00 00       	mov    $0x1,%edx
c0104cab:	89 c1                	mov    %eax,%ecx
c0104cad:	d3 e2                	shl    %cl,%edx
c0104caf:	89 d0                	mov    %edx,%eax
c0104cb1:	83 ec 0c             	sub    $0xc,%esp
c0104cb4:	50                   	push   %eax
c0104cb5:	e8 d1 23 00 00       	call   c010708b <alloc_pages>
c0104cba:	83 c4 10             	add    $0x10,%esp
c0104cbd:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if(!page)
c0104cc0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104cc4:	75 07                	jne    c0104ccd <__slob_get_free_pages+0x30>
    return NULL;
c0104cc6:	b8 00 00 00 00       	mov    $0x0,%eax
c0104ccb:	eb 0e                	jmp    c0104cdb <__slob_get_free_pages+0x3e>
  return page2kva(page);
c0104ccd:	83 ec 0c             	sub    $0xc,%esp
c0104cd0:	ff 75 f4             	pushl  -0xc(%ebp)
c0104cd3:	e8 41 ff ff ff       	call   c0104c19 <page2kva>
c0104cd8:	83 c4 10             	add    $0x10,%esp
}
c0104cdb:	c9                   	leave  
c0104cdc:	c3                   	ret    

c0104cdd <__slob_free_pages>:

#define __slob_get_free_page(gfp) __slob_get_free_pages(gfp, 0)

static inline void __slob_free_pages(unsigned long kva, int order)
{
c0104cdd:	55                   	push   %ebp
c0104cde:	89 e5                	mov    %esp,%ebp
c0104ce0:	53                   	push   %ebx
c0104ce1:	83 ec 04             	sub    $0x4,%esp
  free_pages(kva2page(kva), 1 << order);
c0104ce4:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104ce7:	ba 01 00 00 00       	mov    $0x1,%edx
c0104cec:	89 c1                	mov    %eax,%ecx
c0104cee:	d3 e2                	shl    %cl,%edx
c0104cf0:	89 d0                	mov    %edx,%eax
c0104cf2:	89 c3                	mov    %eax,%ebx
c0104cf4:	8b 45 08             	mov    0x8(%ebp),%eax
c0104cf7:	83 ec 0c             	sub    $0xc,%esp
c0104cfa:	50                   	push   %eax
c0104cfb:	e8 5e ff ff ff       	call   c0104c5e <kva2page>
c0104d00:	83 c4 10             	add    $0x10,%esp
c0104d03:	83 ec 08             	sub    $0x8,%esp
c0104d06:	53                   	push   %ebx
c0104d07:	50                   	push   %eax
c0104d08:	e8 ea 23 00 00       	call   c01070f7 <free_pages>
c0104d0d:	83 c4 10             	add    $0x10,%esp
}
c0104d10:	90                   	nop
c0104d11:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0104d14:	c9                   	leave  
c0104d15:	c3                   	ret    

c0104d16 <slob_alloc>:

static void slob_free(void *b, int size);

static void *slob_alloc(size_t size, gfp_t gfp, int align)
{
c0104d16:	55                   	push   %ebp
c0104d17:	89 e5                	mov    %esp,%ebp
c0104d19:	83 ec 28             	sub    $0x28,%esp
  assert( (size + SLOB_UNIT) < PAGE_SIZE );
c0104d1c:	8b 45 08             	mov    0x8(%ebp),%eax
c0104d1f:	83 c0 08             	add    $0x8,%eax
c0104d22:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c0104d27:	76 16                	jbe    c0104d3f <slob_alloc+0x29>
c0104d29:	68 0c ca 10 c0       	push   $0xc010ca0c
c0104d2e:	68 2b ca 10 c0       	push   $0xc010ca2b
c0104d33:	6a 64                	push   $0x64
c0104d35:	68 40 ca 10 c0       	push   $0xc010ca40
c0104d3a:	e8 be b6 ff ff       	call   c01003fd <__panic>

	slob_t *prev, *cur, *aligned = 0;
c0104d3f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	int delta = 0, units = SLOB_UNITS(size);
c0104d46:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c0104d4d:	8b 45 08             	mov    0x8(%ebp),%eax
c0104d50:	83 c0 07             	add    $0x7,%eax
c0104d53:	c1 e8 03             	shr    $0x3,%eax
c0104d56:	89 45 e0             	mov    %eax,-0x20(%ebp)
	unsigned long flags;

	spin_lock_irqsave(&slob_lock, flags);
c0104d59:	e8 1a fe ff ff       	call   c0104b78 <__intr_save>
c0104d5e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	prev = slobfree;
c0104d61:	a1 08 ca 12 c0       	mov    0xc012ca08,%eax
c0104d66:	89 45 f4             	mov    %eax,-0xc(%ebp)
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c0104d69:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d6c:	8b 40 04             	mov    0x4(%eax),%eax
c0104d6f:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (align) {
c0104d72:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0104d76:	74 25                	je     c0104d9d <slob_alloc+0x87>
			aligned = (slob_t *)ALIGN((unsigned long)cur, align);
c0104d78:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104d7b:	8b 45 10             	mov    0x10(%ebp),%eax
c0104d7e:	01 d0                	add    %edx,%eax
c0104d80:	8d 50 ff             	lea    -0x1(%eax),%edx
c0104d83:	8b 45 10             	mov    0x10(%ebp),%eax
c0104d86:	f7 d8                	neg    %eax
c0104d88:	21 d0                	and    %edx,%eax
c0104d8a:	89 45 ec             	mov    %eax,-0x14(%ebp)
			delta = aligned - cur;
c0104d8d:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0104d90:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104d93:	29 c2                	sub    %eax,%edx
c0104d95:	89 d0                	mov    %edx,%eax
c0104d97:	c1 f8 03             	sar    $0x3,%eax
c0104d9a:	89 45 e8             	mov    %eax,-0x18(%ebp)
		}
		if (cur->units >= units + delta) { /* room enough? */
c0104d9d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104da0:	8b 00                	mov    (%eax),%eax
c0104da2:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c0104da5:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0104da8:	01 ca                	add    %ecx,%edx
c0104daa:	39 d0                	cmp    %edx,%eax
c0104dac:	0f 8c b1 00 00 00    	jl     c0104e63 <slob_alloc+0x14d>
			if (delta) { /* need to fragment head to align? */
c0104db2:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0104db6:	74 38                	je     c0104df0 <slob_alloc+0xda>
				aligned->units = cur->units - delta;
c0104db8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104dbb:	8b 00                	mov    (%eax),%eax
c0104dbd:	2b 45 e8             	sub    -0x18(%ebp),%eax
c0104dc0:	89 c2                	mov    %eax,%edx
c0104dc2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104dc5:	89 10                	mov    %edx,(%eax)
				aligned->next = cur->next;
c0104dc7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104dca:	8b 50 04             	mov    0x4(%eax),%edx
c0104dcd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104dd0:	89 50 04             	mov    %edx,0x4(%eax)
				cur->next = aligned;
c0104dd3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104dd6:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0104dd9:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = delta;
c0104ddc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104ddf:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0104de2:	89 10                	mov    %edx,(%eax)
				prev = cur;
c0104de4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104de7:	89 45 f4             	mov    %eax,-0xc(%ebp)
				cur = aligned;
c0104dea:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104ded:	89 45 f0             	mov    %eax,-0x10(%ebp)
			}

			if (cur->units == units) /* exact fit? */
c0104df0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104df3:	8b 00                	mov    (%eax),%eax
c0104df5:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0104df8:	75 0e                	jne    c0104e08 <slob_alloc+0xf2>
				prev->next = cur->next; /* unlink */
c0104dfa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104dfd:	8b 50 04             	mov    0x4(%eax),%edx
c0104e00:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e03:	89 50 04             	mov    %edx,0x4(%eax)
c0104e06:	eb 3c                	jmp    c0104e44 <slob_alloc+0x12e>
			else { /* fragment */
				prev->next = cur + units;
c0104e08:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104e0b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0104e12:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104e15:	01 c2                	add    %eax,%edx
c0104e17:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e1a:	89 50 04             	mov    %edx,0x4(%eax)
				prev->next->units = cur->units - units;
c0104e1d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e20:	8b 40 04             	mov    0x4(%eax),%eax
c0104e23:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104e26:	8b 12                	mov    (%edx),%edx
c0104e28:	2b 55 e0             	sub    -0x20(%ebp),%edx
c0104e2b:	89 10                	mov    %edx,(%eax)
				prev->next->next = cur->next;
c0104e2d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e30:	8b 40 04             	mov    0x4(%eax),%eax
c0104e33:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104e36:	8b 52 04             	mov    0x4(%edx),%edx
c0104e39:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = units;
c0104e3c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104e3f:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0104e42:	89 10                	mov    %edx,(%eax)
			}

			slobfree = prev;
c0104e44:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e47:	a3 08 ca 12 c0       	mov    %eax,0xc012ca08
			spin_unlock_irqrestore(&slob_lock, flags);
c0104e4c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104e4f:	83 ec 0c             	sub    $0xc,%esp
c0104e52:	50                   	push   %eax
c0104e53:	e8 4a fd ff ff       	call   c0104ba2 <__intr_restore>
c0104e58:	83 c4 10             	add    $0x10,%esp
			return cur;
c0104e5b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104e5e:	e9 80 00 00 00       	jmp    c0104ee3 <slob_alloc+0x1cd>
		}
		if (cur == slobfree) {
c0104e63:	a1 08 ca 12 c0       	mov    0xc012ca08,%eax
c0104e68:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0104e6b:	75 62                	jne    c0104ecf <slob_alloc+0x1b9>
			spin_unlock_irqrestore(&slob_lock, flags);
c0104e6d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104e70:	83 ec 0c             	sub    $0xc,%esp
c0104e73:	50                   	push   %eax
c0104e74:	e8 29 fd ff ff       	call   c0104ba2 <__intr_restore>
c0104e79:	83 c4 10             	add    $0x10,%esp

			if (size == PAGE_SIZE) /* trying to shrink arena? */
c0104e7c:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c0104e83:	75 07                	jne    c0104e8c <slob_alloc+0x176>
				return 0;
c0104e85:	b8 00 00 00 00       	mov    $0x0,%eax
c0104e8a:	eb 57                	jmp    c0104ee3 <slob_alloc+0x1cd>

			cur = (slob_t *)__slob_get_free_page(gfp);
c0104e8c:	83 ec 08             	sub    $0x8,%esp
c0104e8f:	6a 00                	push   $0x0
c0104e91:	ff 75 0c             	pushl  0xc(%ebp)
c0104e94:	e8 04 fe ff ff       	call   c0104c9d <__slob_get_free_pages>
c0104e99:	83 c4 10             	add    $0x10,%esp
c0104e9c:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (!cur)
c0104e9f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0104ea3:	75 07                	jne    c0104eac <slob_alloc+0x196>
				return 0;
c0104ea5:	b8 00 00 00 00       	mov    $0x0,%eax
c0104eaa:	eb 37                	jmp    c0104ee3 <slob_alloc+0x1cd>

			slob_free(cur, PAGE_SIZE);
c0104eac:	83 ec 08             	sub    $0x8,%esp
c0104eaf:	68 00 10 00 00       	push   $0x1000
c0104eb4:	ff 75 f0             	pushl  -0x10(%ebp)
c0104eb7:	e8 29 00 00 00       	call   c0104ee5 <slob_free>
c0104ebc:	83 c4 10             	add    $0x10,%esp
			spin_lock_irqsave(&slob_lock, flags);
c0104ebf:	e8 b4 fc ff ff       	call   c0104b78 <__intr_save>
c0104ec4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			cur = slobfree;
c0104ec7:	a1 08 ca 12 c0       	mov    0xc012ca08,%eax
c0104ecc:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int delta = 0, units = SLOB_UNITS(size);
	unsigned long flags;

	spin_lock_irqsave(&slob_lock, flags);
	prev = slobfree;
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c0104ecf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104ed2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104ed5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104ed8:	8b 40 04             	mov    0x4(%eax),%eax
c0104edb:	89 45 f0             	mov    %eax,-0x10(%ebp)

			slob_free(cur, PAGE_SIZE);
			spin_lock_irqsave(&slob_lock, flags);
			cur = slobfree;
		}
	}
c0104ede:	e9 8f fe ff ff       	jmp    c0104d72 <slob_alloc+0x5c>
}
c0104ee3:	c9                   	leave  
c0104ee4:	c3                   	ret    

c0104ee5 <slob_free>:

static void slob_free(void *block, int size)
{
c0104ee5:	55                   	push   %ebp
c0104ee6:	89 e5                	mov    %esp,%ebp
c0104ee8:	83 ec 18             	sub    $0x18,%esp
	slob_t *cur, *b = (slob_t *)block;
c0104eeb:	8b 45 08             	mov    0x8(%ebp),%eax
c0104eee:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c0104ef1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104ef5:	0f 84 05 01 00 00    	je     c0105000 <slob_free+0x11b>
		return;

	if (size)
c0104efb:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0104eff:	74 10                	je     c0104f11 <slob_free+0x2c>
		b->units = SLOB_UNITS(size);
c0104f01:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104f04:	83 c0 07             	add    $0x7,%eax
c0104f07:	c1 e8 03             	shr    $0x3,%eax
c0104f0a:	89 c2                	mov    %eax,%edx
c0104f0c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104f0f:	89 10                	mov    %edx,(%eax)

	/* Find reinsertion point */
	spin_lock_irqsave(&slob_lock, flags);
c0104f11:	e8 62 fc ff ff       	call   c0104b78 <__intr_save>
c0104f16:	89 45 ec             	mov    %eax,-0x14(%ebp)
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c0104f19:	a1 08 ca 12 c0       	mov    0xc012ca08,%eax
c0104f1e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104f21:	eb 27                	jmp    c0104f4a <slob_free+0x65>
		if (cur >= cur->next && (b > cur || b < cur->next))
c0104f23:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104f26:	8b 40 04             	mov    0x4(%eax),%eax
c0104f29:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104f2c:	77 13                	ja     c0104f41 <slob_free+0x5c>
c0104f2e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104f31:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104f34:	77 27                	ja     c0104f5d <slob_free+0x78>
c0104f36:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104f39:	8b 40 04             	mov    0x4(%eax),%eax
c0104f3c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104f3f:	77 1c                	ja     c0104f5d <slob_free+0x78>
	if (size)
		b->units = SLOB_UNITS(size);

	/* Find reinsertion point */
	spin_lock_irqsave(&slob_lock, flags);
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c0104f41:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104f44:	8b 40 04             	mov    0x4(%eax),%eax
c0104f47:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104f4a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104f4d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104f50:	76 d1                	jbe    c0104f23 <slob_free+0x3e>
c0104f52:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104f55:	8b 40 04             	mov    0x4(%eax),%eax
c0104f58:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104f5b:	76 c6                	jbe    c0104f23 <slob_free+0x3e>
		if (cur >= cur->next && (b > cur || b < cur->next))
			break;

	if (b + b->units == cur->next) {
c0104f5d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104f60:	8b 00                	mov    (%eax),%eax
c0104f62:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0104f69:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104f6c:	01 c2                	add    %eax,%edx
c0104f6e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104f71:	8b 40 04             	mov    0x4(%eax),%eax
c0104f74:	39 c2                	cmp    %eax,%edx
c0104f76:	75 25                	jne    c0104f9d <slob_free+0xb8>
		b->units += cur->next->units;
c0104f78:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104f7b:	8b 10                	mov    (%eax),%edx
c0104f7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104f80:	8b 40 04             	mov    0x4(%eax),%eax
c0104f83:	8b 00                	mov    (%eax),%eax
c0104f85:	01 c2                	add    %eax,%edx
c0104f87:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104f8a:	89 10                	mov    %edx,(%eax)
		b->next = cur->next->next;
c0104f8c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104f8f:	8b 40 04             	mov    0x4(%eax),%eax
c0104f92:	8b 50 04             	mov    0x4(%eax),%edx
c0104f95:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104f98:	89 50 04             	mov    %edx,0x4(%eax)
c0104f9b:	eb 0c                	jmp    c0104fa9 <slob_free+0xc4>
	} else
		b->next = cur->next;
c0104f9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104fa0:	8b 50 04             	mov    0x4(%eax),%edx
c0104fa3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104fa6:	89 50 04             	mov    %edx,0x4(%eax)

	if (cur + cur->units == b) {
c0104fa9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104fac:	8b 00                	mov    (%eax),%eax
c0104fae:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0104fb5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104fb8:	01 d0                	add    %edx,%eax
c0104fba:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104fbd:	75 1f                	jne    c0104fde <slob_free+0xf9>
		cur->units += b->units;
c0104fbf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104fc2:	8b 10                	mov    (%eax),%edx
c0104fc4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104fc7:	8b 00                	mov    (%eax),%eax
c0104fc9:	01 c2                	add    %eax,%edx
c0104fcb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104fce:	89 10                	mov    %edx,(%eax)
		cur->next = b->next;
c0104fd0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104fd3:	8b 50 04             	mov    0x4(%eax),%edx
c0104fd6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104fd9:	89 50 04             	mov    %edx,0x4(%eax)
c0104fdc:	eb 09                	jmp    c0104fe7 <slob_free+0x102>
	} else
		cur->next = b;
c0104fde:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104fe1:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104fe4:	89 50 04             	mov    %edx,0x4(%eax)

	slobfree = cur;
c0104fe7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104fea:	a3 08 ca 12 c0       	mov    %eax,0xc012ca08

	spin_unlock_irqrestore(&slob_lock, flags);
c0104fef:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104ff2:	83 ec 0c             	sub    $0xc,%esp
c0104ff5:	50                   	push   %eax
c0104ff6:	e8 a7 fb ff ff       	call   c0104ba2 <__intr_restore>
c0104ffb:	83 c4 10             	add    $0x10,%esp
c0104ffe:	eb 01                	jmp    c0105001 <slob_free+0x11c>
{
	slob_t *cur, *b = (slob_t *)block;
	unsigned long flags;

	if (!block)
		return;
c0105000:	90                   	nop
		cur->next = b;

	slobfree = cur;

	spin_unlock_irqrestore(&slob_lock, flags);
}
c0105001:	c9                   	leave  
c0105002:	c3                   	ret    

c0105003 <slob_init>:



void
slob_init(void) {
c0105003:	55                   	push   %ebp
c0105004:	89 e5                	mov    %esp,%ebp
c0105006:	83 ec 08             	sub    $0x8,%esp
  cprintf("use SLOB allocator\n");
c0105009:	83 ec 0c             	sub    $0xc,%esp
c010500c:	68 52 ca 10 c0       	push   $0xc010ca52
c0105011:	e8 81 b2 ff ff       	call   c0100297 <cprintf>
c0105016:	83 c4 10             	add    $0x10,%esp
}
c0105019:	90                   	nop
c010501a:	c9                   	leave  
c010501b:	c3                   	ret    

c010501c <kmalloc_init>:

inline void 
kmalloc_init(void) {
c010501c:	55                   	push   %ebp
c010501d:	89 e5                	mov    %esp,%ebp
c010501f:	83 ec 08             	sub    $0x8,%esp
    slob_init();
c0105022:	e8 dc ff ff ff       	call   c0105003 <slob_init>
    cprintf("kmalloc_init() succeeded!\n");
c0105027:	83 ec 0c             	sub    $0xc,%esp
c010502a:	68 66 ca 10 c0       	push   $0xc010ca66
c010502f:	e8 63 b2 ff ff       	call   c0100297 <cprintf>
c0105034:	83 c4 10             	add    $0x10,%esp
}
c0105037:	90                   	nop
c0105038:	c9                   	leave  
c0105039:	c3                   	ret    

c010503a <slob_allocated>:

size_t
slob_allocated(void) {
c010503a:	55                   	push   %ebp
c010503b:	89 e5                	mov    %esp,%ebp
  return 0;
c010503d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105042:	5d                   	pop    %ebp
c0105043:	c3                   	ret    

c0105044 <kallocated>:

size_t
kallocated(void) {
c0105044:	55                   	push   %ebp
c0105045:	89 e5                	mov    %esp,%ebp
   return slob_allocated();
c0105047:	e8 ee ff ff ff       	call   c010503a <slob_allocated>
}
c010504c:	5d                   	pop    %ebp
c010504d:	c3                   	ret    

c010504e <find_order>:

static int find_order(int size)
{
c010504e:	55                   	push   %ebp
c010504f:	89 e5                	mov    %esp,%ebp
c0105051:	83 ec 10             	sub    $0x10,%esp
	int order = 0;
c0105054:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for ( ; size > 4096 ; size >>=1)
c010505b:	eb 07                	jmp    c0105064 <find_order+0x16>
		order++;
c010505d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
}

static int find_order(int size)
{
	int order = 0;
	for ( ; size > 4096 ; size >>=1)
c0105061:	d1 7d 08             	sarl   0x8(%ebp)
c0105064:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c010506b:	7f f0                	jg     c010505d <find_order+0xf>
		order++;
	return order;
c010506d:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0105070:	c9                   	leave  
c0105071:	c3                   	ret    

c0105072 <__kmalloc>:

static void *__kmalloc(size_t size, gfp_t gfp)
{
c0105072:	55                   	push   %ebp
c0105073:	89 e5                	mov    %esp,%ebp
c0105075:	83 ec 18             	sub    $0x18,%esp
	slob_t *m;
	bigblock_t *bb;
	unsigned long flags;

	if (size < PAGE_SIZE - SLOB_UNIT) {
c0105078:	81 7d 08 f7 0f 00 00 	cmpl   $0xff7,0x8(%ebp)
c010507f:	77 35                	ja     c01050b6 <__kmalloc+0x44>
		m = slob_alloc(size + SLOB_UNIT, gfp, 0);
c0105081:	8b 45 08             	mov    0x8(%ebp),%eax
c0105084:	83 c0 08             	add    $0x8,%eax
c0105087:	83 ec 04             	sub    $0x4,%esp
c010508a:	6a 00                	push   $0x0
c010508c:	ff 75 0c             	pushl  0xc(%ebp)
c010508f:	50                   	push   %eax
c0105090:	e8 81 fc ff ff       	call   c0104d16 <slob_alloc>
c0105095:	83 c4 10             	add    $0x10,%esp
c0105098:	89 45 f4             	mov    %eax,-0xc(%ebp)
		return m ? (void *)(m + 1) : 0;
c010509b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010509f:	74 0b                	je     c01050ac <__kmalloc+0x3a>
c01050a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01050a4:	83 c0 08             	add    $0x8,%eax
c01050a7:	e9 b3 00 00 00       	jmp    c010515f <__kmalloc+0xed>
c01050ac:	b8 00 00 00 00       	mov    $0x0,%eax
c01050b1:	e9 a9 00 00 00       	jmp    c010515f <__kmalloc+0xed>
	}

	bb = slob_alloc(sizeof(bigblock_t), gfp, 0);
c01050b6:	83 ec 04             	sub    $0x4,%esp
c01050b9:	6a 00                	push   $0x0
c01050bb:	ff 75 0c             	pushl  0xc(%ebp)
c01050be:	6a 0c                	push   $0xc
c01050c0:	e8 51 fc ff ff       	call   c0104d16 <slob_alloc>
c01050c5:	83 c4 10             	add    $0x10,%esp
c01050c8:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (!bb)
c01050cb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01050cf:	75 0a                	jne    c01050db <__kmalloc+0x69>
		return 0;
c01050d1:	b8 00 00 00 00       	mov    $0x0,%eax
c01050d6:	e9 84 00 00 00       	jmp    c010515f <__kmalloc+0xed>

	bb->order = find_order(size);
c01050db:	8b 45 08             	mov    0x8(%ebp),%eax
c01050de:	83 ec 0c             	sub    $0xc,%esp
c01050e1:	50                   	push   %eax
c01050e2:	e8 67 ff ff ff       	call   c010504e <find_order>
c01050e7:	83 c4 10             	add    $0x10,%esp
c01050ea:	89 c2                	mov    %eax,%edx
c01050ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01050ef:	89 10                	mov    %edx,(%eax)
	bb->pages = (void *)__slob_get_free_pages(gfp, bb->order);
c01050f1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01050f4:	8b 00                	mov    (%eax),%eax
c01050f6:	83 ec 08             	sub    $0x8,%esp
c01050f9:	50                   	push   %eax
c01050fa:	ff 75 0c             	pushl  0xc(%ebp)
c01050fd:	e8 9b fb ff ff       	call   c0104c9d <__slob_get_free_pages>
c0105102:	83 c4 10             	add    $0x10,%esp
c0105105:	89 c2                	mov    %eax,%edx
c0105107:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010510a:	89 50 04             	mov    %edx,0x4(%eax)

	if (bb->pages) {
c010510d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105110:	8b 40 04             	mov    0x4(%eax),%eax
c0105113:	85 c0                	test   %eax,%eax
c0105115:	74 33                	je     c010514a <__kmalloc+0xd8>
		spin_lock_irqsave(&block_lock, flags);
c0105117:	e8 5c fa ff ff       	call   c0104b78 <__intr_save>
c010511c:	89 45 ec             	mov    %eax,-0x14(%ebp)
		bb->next = bigblocks;
c010511f:	8b 15 68 0f 1b c0    	mov    0xc01b0f68,%edx
c0105125:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105128:	89 50 08             	mov    %edx,0x8(%eax)
		bigblocks = bb;
c010512b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010512e:	a3 68 0f 1b c0       	mov    %eax,0xc01b0f68
		spin_unlock_irqrestore(&block_lock, flags);
c0105133:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105136:	83 ec 0c             	sub    $0xc,%esp
c0105139:	50                   	push   %eax
c010513a:	e8 63 fa ff ff       	call   c0104ba2 <__intr_restore>
c010513f:	83 c4 10             	add    $0x10,%esp
		return bb->pages;
c0105142:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105145:	8b 40 04             	mov    0x4(%eax),%eax
c0105148:	eb 15                	jmp    c010515f <__kmalloc+0xed>
	}

	slob_free(bb, sizeof(bigblock_t));
c010514a:	83 ec 08             	sub    $0x8,%esp
c010514d:	6a 0c                	push   $0xc
c010514f:	ff 75 f0             	pushl  -0x10(%ebp)
c0105152:	e8 8e fd ff ff       	call   c0104ee5 <slob_free>
c0105157:	83 c4 10             	add    $0x10,%esp
	return 0;
c010515a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010515f:	c9                   	leave  
c0105160:	c3                   	ret    

c0105161 <kmalloc>:

void *
kmalloc(size_t size)
{
c0105161:	55                   	push   %ebp
c0105162:	89 e5                	mov    %esp,%ebp
c0105164:	83 ec 08             	sub    $0x8,%esp
  return __kmalloc(size, 0);
c0105167:	83 ec 08             	sub    $0x8,%esp
c010516a:	6a 00                	push   $0x0
c010516c:	ff 75 08             	pushl  0x8(%ebp)
c010516f:	e8 fe fe ff ff       	call   c0105072 <__kmalloc>
c0105174:	83 c4 10             	add    $0x10,%esp
}
c0105177:	c9                   	leave  
c0105178:	c3                   	ret    

c0105179 <kfree>:


void kfree(void *block)
{
c0105179:	55                   	push   %ebp
c010517a:	89 e5                	mov    %esp,%ebp
c010517c:	83 ec 18             	sub    $0x18,%esp
	bigblock_t *bb, **last = &bigblocks;
c010517f:	c7 45 f0 68 0f 1b c0 	movl   $0xc01b0f68,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c0105186:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010518a:	0f 84 ac 00 00 00    	je     c010523c <kfree+0xc3>
		return;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c0105190:	8b 45 08             	mov    0x8(%ebp),%eax
c0105193:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105198:	85 c0                	test   %eax,%eax
c010519a:	0f 85 85 00 00 00    	jne    c0105225 <kfree+0xac>
		/* might be on the big block list */
		spin_lock_irqsave(&block_lock, flags);
c01051a0:	e8 d3 f9 ff ff       	call   c0104b78 <__intr_save>
c01051a5:	89 45 ec             	mov    %eax,-0x14(%ebp)
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c01051a8:	a1 68 0f 1b c0       	mov    0xc01b0f68,%eax
c01051ad:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01051b0:	eb 5e                	jmp    c0105210 <kfree+0x97>
			if (bb->pages == block) {
c01051b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01051b5:	8b 40 04             	mov    0x4(%eax),%eax
c01051b8:	3b 45 08             	cmp    0x8(%ebp),%eax
c01051bb:	75 41                	jne    c01051fe <kfree+0x85>
				*last = bb->next;
c01051bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01051c0:	8b 50 08             	mov    0x8(%eax),%edx
c01051c3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01051c6:	89 10                	mov    %edx,(%eax)
				spin_unlock_irqrestore(&block_lock, flags);
c01051c8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01051cb:	83 ec 0c             	sub    $0xc,%esp
c01051ce:	50                   	push   %eax
c01051cf:	e8 ce f9 ff ff       	call   c0104ba2 <__intr_restore>
c01051d4:	83 c4 10             	add    $0x10,%esp
				__slob_free_pages((unsigned long)block, bb->order);
c01051d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01051da:	8b 10                	mov    (%eax),%edx
c01051dc:	8b 45 08             	mov    0x8(%ebp),%eax
c01051df:	83 ec 08             	sub    $0x8,%esp
c01051e2:	52                   	push   %edx
c01051e3:	50                   	push   %eax
c01051e4:	e8 f4 fa ff ff       	call   c0104cdd <__slob_free_pages>
c01051e9:	83 c4 10             	add    $0x10,%esp
				slob_free(bb, sizeof(bigblock_t));
c01051ec:	83 ec 08             	sub    $0x8,%esp
c01051ef:	6a 0c                	push   $0xc
c01051f1:	ff 75 f4             	pushl  -0xc(%ebp)
c01051f4:	e8 ec fc ff ff       	call   c0104ee5 <slob_free>
c01051f9:	83 c4 10             	add    $0x10,%esp
				return;
c01051fc:	eb 3f                	jmp    c010523d <kfree+0xc4>
		return;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
		/* might be on the big block list */
		spin_lock_irqsave(&block_lock, flags);
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c01051fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105201:	83 c0 08             	add    $0x8,%eax
c0105204:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105207:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010520a:	8b 40 08             	mov    0x8(%eax),%eax
c010520d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105210:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105214:	75 9c                	jne    c01051b2 <kfree+0x39>
				__slob_free_pages((unsigned long)block, bb->order);
				slob_free(bb, sizeof(bigblock_t));
				return;
			}
		}
		spin_unlock_irqrestore(&block_lock, flags);
c0105216:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105219:	83 ec 0c             	sub    $0xc,%esp
c010521c:	50                   	push   %eax
c010521d:	e8 80 f9 ff ff       	call   c0104ba2 <__intr_restore>
c0105222:	83 c4 10             	add    $0x10,%esp
	}

	slob_free((slob_t *)block - 1, 0);
c0105225:	8b 45 08             	mov    0x8(%ebp),%eax
c0105228:	83 e8 08             	sub    $0x8,%eax
c010522b:	83 ec 08             	sub    $0x8,%esp
c010522e:	6a 00                	push   $0x0
c0105230:	50                   	push   %eax
c0105231:	e8 af fc ff ff       	call   c0104ee5 <slob_free>
c0105236:	83 c4 10             	add    $0x10,%esp
	return;
c0105239:	90                   	nop
c010523a:	eb 01                	jmp    c010523d <kfree+0xc4>
{
	bigblock_t *bb, **last = &bigblocks;
	unsigned long flags;

	if (!block)
		return;
c010523c:	90                   	nop
		spin_unlock_irqrestore(&block_lock, flags);
	}

	slob_free((slob_t *)block - 1, 0);
	return;
}
c010523d:	c9                   	leave  
c010523e:	c3                   	ret    

c010523f <ksize>:


unsigned int ksize(const void *block)
{
c010523f:	55                   	push   %ebp
c0105240:	89 e5                	mov    %esp,%ebp
c0105242:	83 ec 18             	sub    $0x18,%esp
	bigblock_t *bb;
	unsigned long flags;

	if (!block)
c0105245:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0105249:	75 07                	jne    c0105252 <ksize+0x13>
		return 0;
c010524b:	b8 00 00 00 00       	mov    $0x0,%eax
c0105250:	eb 73                	jmp    c01052c5 <ksize+0x86>

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c0105252:	8b 45 08             	mov    0x8(%ebp),%eax
c0105255:	25 ff 0f 00 00       	and    $0xfff,%eax
c010525a:	85 c0                	test   %eax,%eax
c010525c:	75 5c                	jne    c01052ba <ksize+0x7b>
		spin_lock_irqsave(&block_lock, flags);
c010525e:	e8 15 f9 ff ff       	call   c0104b78 <__intr_save>
c0105263:	89 45 f0             	mov    %eax,-0x10(%ebp)
		for (bb = bigblocks; bb; bb = bb->next)
c0105266:	a1 68 0f 1b c0       	mov    0xc01b0f68,%eax
c010526b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010526e:	eb 35                	jmp    c01052a5 <ksize+0x66>
			if (bb->pages == block) {
c0105270:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105273:	8b 40 04             	mov    0x4(%eax),%eax
c0105276:	3b 45 08             	cmp    0x8(%ebp),%eax
c0105279:	75 21                	jne    c010529c <ksize+0x5d>
				spin_unlock_irqrestore(&slob_lock, flags);
c010527b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010527e:	83 ec 0c             	sub    $0xc,%esp
c0105281:	50                   	push   %eax
c0105282:	e8 1b f9 ff ff       	call   c0104ba2 <__intr_restore>
c0105287:	83 c4 10             	add    $0x10,%esp
				return PAGE_SIZE << bb->order;
c010528a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010528d:	8b 00                	mov    (%eax),%eax
c010528f:	ba 00 10 00 00       	mov    $0x1000,%edx
c0105294:	89 c1                	mov    %eax,%ecx
c0105296:	d3 e2                	shl    %cl,%edx
c0105298:	89 d0                	mov    %edx,%eax
c010529a:	eb 29                	jmp    c01052c5 <ksize+0x86>
	if (!block)
		return 0;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
		spin_lock_irqsave(&block_lock, flags);
		for (bb = bigblocks; bb; bb = bb->next)
c010529c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010529f:	8b 40 08             	mov    0x8(%eax),%eax
c01052a2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01052a5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01052a9:	75 c5                	jne    c0105270 <ksize+0x31>
			if (bb->pages == block) {
				spin_unlock_irqrestore(&slob_lock, flags);
				return PAGE_SIZE << bb->order;
			}
		spin_unlock_irqrestore(&block_lock, flags);
c01052ab:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01052ae:	83 ec 0c             	sub    $0xc,%esp
c01052b1:	50                   	push   %eax
c01052b2:	e8 eb f8 ff ff       	call   c0104ba2 <__intr_restore>
c01052b7:	83 c4 10             	add    $0x10,%esp
	}

	return ((slob_t *)block - 1)->units * SLOB_UNIT;
c01052ba:	8b 45 08             	mov    0x8(%ebp),%eax
c01052bd:	83 e8 08             	sub    $0x8,%eax
c01052c0:	8b 00                	mov    (%eax),%eax
c01052c2:	c1 e0 03             	shl    $0x3,%eax
}
c01052c5:	c9                   	leave  
c01052c6:	c3                   	ret    

c01052c7 <pa2page>:
page2pa(struct Page *page) {
    return page2ppn(page) << PGSHIFT;
}

static inline struct Page *
pa2page(uintptr_t pa) {
c01052c7:	55                   	push   %ebp
c01052c8:	89 e5                	mov    %esp,%ebp
c01052ca:	83 ec 08             	sub    $0x8,%esp
    if (PPN(pa) >= npage) {
c01052cd:	8b 45 08             	mov    0x8(%ebp),%eax
c01052d0:	c1 e8 0c             	shr    $0xc,%eax
c01052d3:	89 c2                	mov    %eax,%edx
c01052d5:	a1 80 0f 1b c0       	mov    0xc01b0f80,%eax
c01052da:	39 c2                	cmp    %eax,%edx
c01052dc:	72 14                	jb     c01052f2 <pa2page+0x2b>
        panic("pa2page called with invalid pa");
c01052de:	83 ec 04             	sub    $0x4,%esp
c01052e1:	68 84 ca 10 c0       	push   $0xc010ca84
c01052e6:	6a 5e                	push   $0x5e
c01052e8:	68 a3 ca 10 c0       	push   $0xc010caa3
c01052ed:	e8 0b b1 ff ff       	call   c01003fd <__panic>
    }
    return &pages[PPN(pa)];
c01052f2:	a1 b8 31 1b c0       	mov    0xc01b31b8,%eax
c01052f7:	8b 55 08             	mov    0x8(%ebp),%edx
c01052fa:	c1 ea 0c             	shr    $0xc,%edx
c01052fd:	c1 e2 05             	shl    $0x5,%edx
c0105300:	01 d0                	add    %edx,%eax
}
c0105302:	c9                   	leave  
c0105303:	c3                   	ret    

c0105304 <pte2page>:
kva2page(void *kva) {
    return pa2page(PADDR(kva));
}

static inline struct Page *
pte2page(pte_t pte) {
c0105304:	55                   	push   %ebp
c0105305:	89 e5                	mov    %esp,%ebp
c0105307:	83 ec 08             	sub    $0x8,%esp
    if (!(pte & PTE_P)) {
c010530a:	8b 45 08             	mov    0x8(%ebp),%eax
c010530d:	83 e0 01             	and    $0x1,%eax
c0105310:	85 c0                	test   %eax,%eax
c0105312:	75 14                	jne    c0105328 <pte2page+0x24>
        panic("pte2page called with invalid pte");
c0105314:	83 ec 04             	sub    $0x4,%esp
c0105317:	68 b4 ca 10 c0       	push   $0xc010cab4
c010531c:	6a 70                	push   $0x70
c010531e:	68 a3 ca 10 c0       	push   $0xc010caa3
c0105323:	e8 d5 b0 ff ff       	call   c01003fd <__panic>
    }
    return pa2page(PTE_ADDR(pte));
c0105328:	8b 45 08             	mov    0x8(%ebp),%eax
c010532b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0105330:	83 ec 0c             	sub    $0xc,%esp
c0105333:	50                   	push   %eax
c0105334:	e8 8e ff ff ff       	call   c01052c7 <pa2page>
c0105339:	83 c4 10             	add    $0x10,%esp
}
c010533c:	c9                   	leave  
c010533d:	c3                   	ret    

c010533e <pde2page>:

static inline struct Page *
pde2page(pde_t pde) {
c010533e:	55                   	push   %ebp
c010533f:	89 e5                	mov    %esp,%ebp
c0105341:	83 ec 08             	sub    $0x8,%esp
    return pa2page(PDE_ADDR(pde));
c0105344:	8b 45 08             	mov    0x8(%ebp),%eax
c0105347:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010534c:	83 ec 0c             	sub    $0xc,%esp
c010534f:	50                   	push   %eax
c0105350:	e8 72 ff ff ff       	call   c01052c7 <pa2page>
c0105355:	83 c4 10             	add    $0x10,%esp
}
c0105358:	c9                   	leave  
c0105359:	c3                   	ret    

c010535a <swap_init>:

static void check_swap(void);

int
swap_init(void)
{
c010535a:	55                   	push   %ebp
c010535b:	89 e5                	mov    %esp,%ebp
c010535d:	83 ec 18             	sub    $0x18,%esp
     swapfs_init();
c0105360:	e8 70 36 00 00       	call   c01089d5 <swapfs_init>

     if (!(1024 <= max_swap_offset && max_swap_offset < MAX_SWAP_OFFSET_LIMIT))
c0105365:	a1 7c 31 1b c0       	mov    0xc01b317c,%eax
c010536a:	3d ff 03 00 00       	cmp    $0x3ff,%eax
c010536f:	76 0c                	jbe    c010537d <swap_init+0x23>
c0105371:	a1 7c 31 1b c0       	mov    0xc01b317c,%eax
c0105376:	3d ff ff ff 00       	cmp    $0xffffff,%eax
c010537b:	76 17                	jbe    c0105394 <swap_init+0x3a>
     {
          panic("bad max_swap_offset %08x.\n", max_swap_offset);
c010537d:	a1 7c 31 1b c0       	mov    0xc01b317c,%eax
c0105382:	50                   	push   %eax
c0105383:	68 d5 ca 10 c0       	push   $0xc010cad5
c0105388:	6a 27                	push   $0x27
c010538a:	68 f0 ca 10 c0       	push   $0xc010caf0
c010538f:	e8 69 b0 ff ff       	call   c01003fd <__panic>
     }
     

     sm = &swap_manager_fifo;
c0105394:	c7 05 74 0f 1b c0 e0 	movl   $0xc012c9e0,0xc01b0f74
c010539b:	c9 12 c0 
     int r = sm->init();
c010539e:	a1 74 0f 1b c0       	mov    0xc01b0f74,%eax
c01053a3:	8b 40 04             	mov    0x4(%eax),%eax
c01053a6:	ff d0                	call   *%eax
c01053a8:	89 45 f4             	mov    %eax,-0xc(%ebp)
     
     if (r == 0)
c01053ab:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01053af:	75 27                	jne    c01053d8 <swap_init+0x7e>
     {
          swap_init_ok = 1;
c01053b1:	c7 05 6c 0f 1b c0 01 	movl   $0x1,0xc01b0f6c
c01053b8:	00 00 00 
          cprintf("SWAP: manager = %s\n", sm->name);
c01053bb:	a1 74 0f 1b c0       	mov    0xc01b0f74,%eax
c01053c0:	8b 00                	mov    (%eax),%eax
c01053c2:	83 ec 08             	sub    $0x8,%esp
c01053c5:	50                   	push   %eax
c01053c6:	68 ff ca 10 c0       	push   $0xc010caff
c01053cb:	e8 c7 ae ff ff       	call   c0100297 <cprintf>
c01053d0:	83 c4 10             	add    $0x10,%esp
          check_swap();
c01053d3:	e8 f7 03 00 00       	call   c01057cf <check_swap>
     }

     return r;
c01053d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01053db:	c9                   	leave  
c01053dc:	c3                   	ret    

c01053dd <swap_init_mm>:

int
swap_init_mm(struct mm_struct *mm)
{
c01053dd:	55                   	push   %ebp
c01053de:	89 e5                	mov    %esp,%ebp
c01053e0:	83 ec 08             	sub    $0x8,%esp
     return sm->init_mm(mm);
c01053e3:	a1 74 0f 1b c0       	mov    0xc01b0f74,%eax
c01053e8:	8b 40 08             	mov    0x8(%eax),%eax
c01053eb:	83 ec 0c             	sub    $0xc,%esp
c01053ee:	ff 75 08             	pushl  0x8(%ebp)
c01053f1:	ff d0                	call   *%eax
c01053f3:	83 c4 10             	add    $0x10,%esp
}
c01053f6:	c9                   	leave  
c01053f7:	c3                   	ret    

c01053f8 <swap_tick_event>:

int
swap_tick_event(struct mm_struct *mm)
{
c01053f8:	55                   	push   %ebp
c01053f9:	89 e5                	mov    %esp,%ebp
c01053fb:	83 ec 08             	sub    $0x8,%esp
     return sm->tick_event(mm);
c01053fe:	a1 74 0f 1b c0       	mov    0xc01b0f74,%eax
c0105403:	8b 40 0c             	mov    0xc(%eax),%eax
c0105406:	83 ec 0c             	sub    $0xc,%esp
c0105409:	ff 75 08             	pushl  0x8(%ebp)
c010540c:	ff d0                	call   *%eax
c010540e:	83 c4 10             	add    $0x10,%esp
}
c0105411:	c9                   	leave  
c0105412:	c3                   	ret    

c0105413 <swap_map_swappable>:

int
swap_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c0105413:	55                   	push   %ebp
c0105414:	89 e5                	mov    %esp,%ebp
c0105416:	83 ec 08             	sub    $0x8,%esp
     return sm->map_swappable(mm, addr, page, swap_in);
c0105419:	a1 74 0f 1b c0       	mov    0xc01b0f74,%eax
c010541e:	8b 40 10             	mov    0x10(%eax),%eax
c0105421:	ff 75 14             	pushl  0x14(%ebp)
c0105424:	ff 75 10             	pushl  0x10(%ebp)
c0105427:	ff 75 0c             	pushl  0xc(%ebp)
c010542a:	ff 75 08             	pushl  0x8(%ebp)
c010542d:	ff d0                	call   *%eax
c010542f:	83 c4 10             	add    $0x10,%esp
}
c0105432:	c9                   	leave  
c0105433:	c3                   	ret    

c0105434 <swap_set_unswappable>:

int
swap_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c0105434:	55                   	push   %ebp
c0105435:	89 e5                	mov    %esp,%ebp
c0105437:	83 ec 08             	sub    $0x8,%esp
     return sm->set_unswappable(mm, addr);
c010543a:	a1 74 0f 1b c0       	mov    0xc01b0f74,%eax
c010543f:	8b 40 14             	mov    0x14(%eax),%eax
c0105442:	83 ec 08             	sub    $0x8,%esp
c0105445:	ff 75 0c             	pushl  0xc(%ebp)
c0105448:	ff 75 08             	pushl  0x8(%ebp)
c010544b:	ff d0                	call   *%eax
c010544d:	83 c4 10             	add    $0x10,%esp
}
c0105450:	c9                   	leave  
c0105451:	c3                   	ret    

c0105452 <swap_out>:

volatile unsigned int swap_out_num=0;

int
swap_out(struct mm_struct *mm, int n, int in_tick)
{
c0105452:	55                   	push   %ebp
c0105453:	89 e5                	mov    %esp,%ebp
c0105455:	83 ec 28             	sub    $0x28,%esp
     int i;
     for (i = 0; i != n; ++ i)
c0105458:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010545f:	e9 2e 01 00 00       	jmp    c0105592 <swap_out+0x140>
     {
          uintptr_t v;
          //struct Page **ptr_page=NULL;
          struct Page *page;
          // cprintf("i %d, SWAP: call swap_out_victim\n",i);
          int r = sm->swap_out_victim(mm, &page, in_tick);
c0105464:	a1 74 0f 1b c0       	mov    0xc01b0f74,%eax
c0105469:	8b 40 18             	mov    0x18(%eax),%eax
c010546c:	83 ec 04             	sub    $0x4,%esp
c010546f:	ff 75 10             	pushl  0x10(%ebp)
c0105472:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c0105475:	52                   	push   %edx
c0105476:	ff 75 08             	pushl  0x8(%ebp)
c0105479:	ff d0                	call   *%eax
c010547b:	83 c4 10             	add    $0x10,%esp
c010547e:	89 45 f0             	mov    %eax,-0x10(%ebp)
          if (r != 0) {
c0105481:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0105485:	74 18                	je     c010549f <swap_out+0x4d>
                    cprintf("i %d, swap_out: call swap_out_victim failed\n",i);
c0105487:	83 ec 08             	sub    $0x8,%esp
c010548a:	ff 75 f4             	pushl  -0xc(%ebp)
c010548d:	68 14 cb 10 c0       	push   $0xc010cb14
c0105492:	e8 00 ae ff ff       	call   c0100297 <cprintf>
c0105497:	83 c4 10             	add    $0x10,%esp
c010549a:	e9 ff 00 00 00       	jmp    c010559e <swap_out+0x14c>
          }          
          //assert(!PageReserved(page));

          //cprintf("SWAP: choose victim page 0x%08x\n", page);
          
          v=page->pra_vaddr; 
c010549f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01054a2:	8b 40 1c             	mov    0x1c(%eax),%eax
c01054a5:	89 45 ec             	mov    %eax,-0x14(%ebp)
          pte_t *ptep = get_pte(mm->pgdir, v, 0);
c01054a8:	8b 45 08             	mov    0x8(%ebp),%eax
c01054ab:	8b 40 0c             	mov    0xc(%eax),%eax
c01054ae:	83 ec 04             	sub    $0x4,%esp
c01054b1:	6a 00                	push   $0x0
c01054b3:	ff 75 ec             	pushl  -0x14(%ebp)
c01054b6:	50                   	push   %eax
c01054b7:	e8 3b 22 00 00       	call   c01076f7 <get_pte>
c01054bc:	83 c4 10             	add    $0x10,%esp
c01054bf:	89 45 e8             	mov    %eax,-0x18(%ebp)
          assert((*ptep & PTE_P) != 0);
c01054c2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01054c5:	8b 00                	mov    (%eax),%eax
c01054c7:	83 e0 01             	and    $0x1,%eax
c01054ca:	85 c0                	test   %eax,%eax
c01054cc:	75 16                	jne    c01054e4 <swap_out+0x92>
c01054ce:	68 41 cb 10 c0       	push   $0xc010cb41
c01054d3:	68 56 cb 10 c0       	push   $0xc010cb56
c01054d8:	6a 67                	push   $0x67
c01054da:	68 f0 ca 10 c0       	push   $0xc010caf0
c01054df:	e8 19 af ff ff       	call   c01003fd <__panic>

          if (swapfs_write( (page->pra_vaddr/PGSIZE+1)<<8, page) != 0) {
c01054e4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01054e7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01054ea:	8b 52 1c             	mov    0x1c(%edx),%edx
c01054ed:	c1 ea 0c             	shr    $0xc,%edx
c01054f0:	83 c2 01             	add    $0x1,%edx
c01054f3:	c1 e2 08             	shl    $0x8,%edx
c01054f6:	83 ec 08             	sub    $0x8,%esp
c01054f9:	50                   	push   %eax
c01054fa:	52                   	push   %edx
c01054fb:	e8 71 35 00 00       	call   c0108a71 <swapfs_write>
c0105500:	83 c4 10             	add    $0x10,%esp
c0105503:	85 c0                	test   %eax,%eax
c0105505:	74 2b                	je     c0105532 <swap_out+0xe0>
                    cprintf("SWAP: failed to save\n");
c0105507:	83 ec 0c             	sub    $0xc,%esp
c010550a:	68 6b cb 10 c0       	push   $0xc010cb6b
c010550f:	e8 83 ad ff ff       	call   c0100297 <cprintf>
c0105514:	83 c4 10             	add    $0x10,%esp
                    sm->map_swappable(mm, v, page, 0);
c0105517:	a1 74 0f 1b c0       	mov    0xc01b0f74,%eax
c010551c:	8b 40 10             	mov    0x10(%eax),%eax
c010551f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0105522:	6a 00                	push   $0x0
c0105524:	52                   	push   %edx
c0105525:	ff 75 ec             	pushl  -0x14(%ebp)
c0105528:	ff 75 08             	pushl  0x8(%ebp)
c010552b:	ff d0                	call   *%eax
c010552d:	83 c4 10             	add    $0x10,%esp
c0105530:	eb 5c                	jmp    c010558e <swap_out+0x13c>
                    continue;
          }
          else {
                    cprintf("swap_out: i %d, store page in vaddr 0x%x to disk swap entry %d\n", i, v, page->pra_vaddr/PGSIZE+1);
c0105532:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105535:	8b 40 1c             	mov    0x1c(%eax),%eax
c0105538:	c1 e8 0c             	shr    $0xc,%eax
c010553b:	83 c0 01             	add    $0x1,%eax
c010553e:	50                   	push   %eax
c010553f:	ff 75 ec             	pushl  -0x14(%ebp)
c0105542:	ff 75 f4             	pushl  -0xc(%ebp)
c0105545:	68 84 cb 10 c0       	push   $0xc010cb84
c010554a:	e8 48 ad ff ff       	call   c0100297 <cprintf>
c010554f:	83 c4 10             	add    $0x10,%esp
                    *ptep = (page->pra_vaddr/PGSIZE+1)<<8;
c0105552:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105555:	8b 40 1c             	mov    0x1c(%eax),%eax
c0105558:	c1 e8 0c             	shr    $0xc,%eax
c010555b:	83 c0 01             	add    $0x1,%eax
c010555e:	c1 e0 08             	shl    $0x8,%eax
c0105561:	89 c2                	mov    %eax,%edx
c0105563:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105566:	89 10                	mov    %edx,(%eax)
                    free_page(page);
c0105568:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010556b:	83 ec 08             	sub    $0x8,%esp
c010556e:	6a 01                	push   $0x1
c0105570:	50                   	push   %eax
c0105571:	e8 81 1b 00 00       	call   c01070f7 <free_pages>
c0105576:	83 c4 10             	add    $0x10,%esp
          }
          
          tlb_invalidate(mm->pgdir, v);
c0105579:	8b 45 08             	mov    0x8(%ebp),%eax
c010557c:	8b 40 0c             	mov    0xc(%eax),%eax
c010557f:	83 ec 08             	sub    $0x8,%esp
c0105582:	ff 75 ec             	pushl  -0x14(%ebp)
c0105585:	50                   	push   %eax
c0105586:	e8 06 28 00 00       	call   c0107d91 <tlb_invalidate>
c010558b:	83 c4 10             	add    $0x10,%esp

int
swap_out(struct mm_struct *mm, int n, int in_tick)
{
     int i;
     for (i = 0; i != n; ++ i)
c010558e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0105592:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105595:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0105598:	0f 85 c6 fe ff ff    	jne    c0105464 <swap_out+0x12>
                    free_page(page);
          }
          
          tlb_invalidate(mm->pgdir, v);
     }
     return i;
c010559e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01055a1:	c9                   	leave  
c01055a2:	c3                   	ret    

c01055a3 <swap_in>:

int
swap_in(struct mm_struct *mm, uintptr_t addr, struct Page **ptr_result)
{
c01055a3:	55                   	push   %ebp
c01055a4:	89 e5                	mov    %esp,%ebp
c01055a6:	83 ec 18             	sub    $0x18,%esp
     struct Page *result = alloc_page();
c01055a9:	83 ec 0c             	sub    $0xc,%esp
c01055ac:	6a 01                	push   $0x1
c01055ae:	e8 d8 1a 00 00       	call   c010708b <alloc_pages>
c01055b3:	83 c4 10             	add    $0x10,%esp
c01055b6:	89 45 f4             	mov    %eax,-0xc(%ebp)
     assert(result!=NULL);
c01055b9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01055bd:	75 16                	jne    c01055d5 <swap_in+0x32>
c01055bf:	68 c4 cb 10 c0       	push   $0xc010cbc4
c01055c4:	68 56 cb 10 c0       	push   $0xc010cb56
c01055c9:	6a 7d                	push   $0x7d
c01055cb:	68 f0 ca 10 c0       	push   $0xc010caf0
c01055d0:	e8 28 ae ff ff       	call   c01003fd <__panic>

     pte_t *ptep = get_pte(mm->pgdir, addr, 0);
c01055d5:	8b 45 08             	mov    0x8(%ebp),%eax
c01055d8:	8b 40 0c             	mov    0xc(%eax),%eax
c01055db:	83 ec 04             	sub    $0x4,%esp
c01055de:	6a 00                	push   $0x0
c01055e0:	ff 75 0c             	pushl  0xc(%ebp)
c01055e3:	50                   	push   %eax
c01055e4:	e8 0e 21 00 00       	call   c01076f7 <get_pte>
c01055e9:	83 c4 10             	add    $0x10,%esp
c01055ec:	89 45 f0             	mov    %eax,-0x10(%ebp)
     // cprintf("SWAP: load ptep %x swap entry %d to vaddr 0x%08x, page %x, No %d\n", ptep, (*ptep)>>8, addr, result, (result-pages));
    
     int r;
     if ((r = swapfs_read((*ptep), result)) != 0)
c01055ef:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01055f2:	8b 00                	mov    (%eax),%eax
c01055f4:	83 ec 08             	sub    $0x8,%esp
c01055f7:	ff 75 f4             	pushl  -0xc(%ebp)
c01055fa:	50                   	push   %eax
c01055fb:	e8 18 34 00 00       	call   c0108a18 <swapfs_read>
c0105600:	83 c4 10             	add    $0x10,%esp
c0105603:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0105606:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010560a:	74 1f                	je     c010562b <swap_in+0x88>
     {
        assert(r!=0);
c010560c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0105610:	75 19                	jne    c010562b <swap_in+0x88>
c0105612:	68 d1 cb 10 c0       	push   $0xc010cbd1
c0105617:	68 56 cb 10 c0       	push   $0xc010cb56
c010561c:	68 85 00 00 00       	push   $0x85
c0105621:	68 f0 ca 10 c0       	push   $0xc010caf0
c0105626:	e8 d2 ad ff ff       	call   c01003fd <__panic>
     }
     cprintf("swap_in: load disk swap entry %d with swap_page in vadr 0x%x\n", (*ptep)>>8, addr);
c010562b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010562e:	8b 00                	mov    (%eax),%eax
c0105630:	c1 e8 08             	shr    $0x8,%eax
c0105633:	83 ec 04             	sub    $0x4,%esp
c0105636:	ff 75 0c             	pushl  0xc(%ebp)
c0105639:	50                   	push   %eax
c010563a:	68 d8 cb 10 c0       	push   $0xc010cbd8
c010563f:	e8 53 ac ff ff       	call   c0100297 <cprintf>
c0105644:	83 c4 10             	add    $0x10,%esp
     *ptr_result=result;
c0105647:	8b 45 10             	mov    0x10(%ebp),%eax
c010564a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010564d:	89 10                	mov    %edx,(%eax)
     return 0;
c010564f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105654:	c9                   	leave  
c0105655:	c3                   	ret    

c0105656 <check_content_set>:



static inline void
check_content_set(void)
{
c0105656:	55                   	push   %ebp
c0105657:	89 e5                	mov    %esp,%ebp
c0105659:	83 ec 08             	sub    $0x8,%esp
     *(unsigned char *)0x1000 = 0x0a;
c010565c:	b8 00 10 00 00       	mov    $0x1000,%eax
c0105661:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c0105664:	a1 64 0f 1b c0       	mov    0xc01b0f64,%eax
c0105669:	83 f8 01             	cmp    $0x1,%eax
c010566c:	74 19                	je     c0105687 <check_content_set+0x31>
c010566e:	68 16 cc 10 c0       	push   $0xc010cc16
c0105673:	68 56 cb 10 c0       	push   $0xc010cb56
c0105678:	68 92 00 00 00       	push   $0x92
c010567d:	68 f0 ca 10 c0       	push   $0xc010caf0
c0105682:	e8 76 ad ff ff       	call   c01003fd <__panic>
     *(unsigned char *)0x1010 = 0x0a;
c0105687:	b8 10 10 00 00       	mov    $0x1010,%eax
c010568c:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c010568f:	a1 64 0f 1b c0       	mov    0xc01b0f64,%eax
c0105694:	83 f8 01             	cmp    $0x1,%eax
c0105697:	74 19                	je     c01056b2 <check_content_set+0x5c>
c0105699:	68 16 cc 10 c0       	push   $0xc010cc16
c010569e:	68 56 cb 10 c0       	push   $0xc010cb56
c01056a3:	68 94 00 00 00       	push   $0x94
c01056a8:	68 f0 ca 10 c0       	push   $0xc010caf0
c01056ad:	e8 4b ad ff ff       	call   c01003fd <__panic>
     *(unsigned char *)0x2000 = 0x0b;
c01056b2:	b8 00 20 00 00       	mov    $0x2000,%eax
c01056b7:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c01056ba:	a1 64 0f 1b c0       	mov    0xc01b0f64,%eax
c01056bf:	83 f8 02             	cmp    $0x2,%eax
c01056c2:	74 19                	je     c01056dd <check_content_set+0x87>
c01056c4:	68 25 cc 10 c0       	push   $0xc010cc25
c01056c9:	68 56 cb 10 c0       	push   $0xc010cb56
c01056ce:	68 96 00 00 00       	push   $0x96
c01056d3:	68 f0 ca 10 c0       	push   $0xc010caf0
c01056d8:	e8 20 ad ff ff       	call   c01003fd <__panic>
     *(unsigned char *)0x2010 = 0x0b;
c01056dd:	b8 10 20 00 00       	mov    $0x2010,%eax
c01056e2:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c01056e5:	a1 64 0f 1b c0       	mov    0xc01b0f64,%eax
c01056ea:	83 f8 02             	cmp    $0x2,%eax
c01056ed:	74 19                	je     c0105708 <check_content_set+0xb2>
c01056ef:	68 25 cc 10 c0       	push   $0xc010cc25
c01056f4:	68 56 cb 10 c0       	push   $0xc010cb56
c01056f9:	68 98 00 00 00       	push   $0x98
c01056fe:	68 f0 ca 10 c0       	push   $0xc010caf0
c0105703:	e8 f5 ac ff ff       	call   c01003fd <__panic>
     *(unsigned char *)0x3000 = 0x0c;
c0105708:	b8 00 30 00 00       	mov    $0x3000,%eax
c010570d:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c0105710:	a1 64 0f 1b c0       	mov    0xc01b0f64,%eax
c0105715:	83 f8 03             	cmp    $0x3,%eax
c0105718:	74 19                	je     c0105733 <check_content_set+0xdd>
c010571a:	68 34 cc 10 c0       	push   $0xc010cc34
c010571f:	68 56 cb 10 c0       	push   $0xc010cb56
c0105724:	68 9a 00 00 00       	push   $0x9a
c0105729:	68 f0 ca 10 c0       	push   $0xc010caf0
c010572e:	e8 ca ac ff ff       	call   c01003fd <__panic>
     *(unsigned char *)0x3010 = 0x0c;
c0105733:	b8 10 30 00 00       	mov    $0x3010,%eax
c0105738:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c010573b:	a1 64 0f 1b c0       	mov    0xc01b0f64,%eax
c0105740:	83 f8 03             	cmp    $0x3,%eax
c0105743:	74 19                	je     c010575e <check_content_set+0x108>
c0105745:	68 34 cc 10 c0       	push   $0xc010cc34
c010574a:	68 56 cb 10 c0       	push   $0xc010cb56
c010574f:	68 9c 00 00 00       	push   $0x9c
c0105754:	68 f0 ca 10 c0       	push   $0xc010caf0
c0105759:	e8 9f ac ff ff       	call   c01003fd <__panic>
     *(unsigned char *)0x4000 = 0x0d;
c010575e:	b8 00 40 00 00       	mov    $0x4000,%eax
c0105763:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c0105766:	a1 64 0f 1b c0       	mov    0xc01b0f64,%eax
c010576b:	83 f8 04             	cmp    $0x4,%eax
c010576e:	74 19                	je     c0105789 <check_content_set+0x133>
c0105770:	68 43 cc 10 c0       	push   $0xc010cc43
c0105775:	68 56 cb 10 c0       	push   $0xc010cb56
c010577a:	68 9e 00 00 00       	push   $0x9e
c010577f:	68 f0 ca 10 c0       	push   $0xc010caf0
c0105784:	e8 74 ac ff ff       	call   c01003fd <__panic>
     *(unsigned char *)0x4010 = 0x0d;
c0105789:	b8 10 40 00 00       	mov    $0x4010,%eax
c010578e:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c0105791:	a1 64 0f 1b c0       	mov    0xc01b0f64,%eax
c0105796:	83 f8 04             	cmp    $0x4,%eax
c0105799:	74 19                	je     c01057b4 <check_content_set+0x15e>
c010579b:	68 43 cc 10 c0       	push   $0xc010cc43
c01057a0:	68 56 cb 10 c0       	push   $0xc010cb56
c01057a5:	68 a0 00 00 00       	push   $0xa0
c01057aa:	68 f0 ca 10 c0       	push   $0xc010caf0
c01057af:	e8 49 ac ff ff       	call   c01003fd <__panic>
}
c01057b4:	90                   	nop
c01057b5:	c9                   	leave  
c01057b6:	c3                   	ret    

c01057b7 <check_content_access>:

static inline int
check_content_access(void)
{
c01057b7:	55                   	push   %ebp
c01057b8:	89 e5                	mov    %esp,%ebp
c01057ba:	83 ec 18             	sub    $0x18,%esp
    int ret = sm->check_swap();
c01057bd:	a1 74 0f 1b c0       	mov    0xc01b0f74,%eax
c01057c2:	8b 40 1c             	mov    0x1c(%eax),%eax
c01057c5:	ff d0                	call   *%eax
c01057c7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return ret;
c01057ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01057cd:	c9                   	leave  
c01057ce:	c3                   	ret    

c01057cf <check_swap>:
#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
check_swap(void)
{
c01057cf:	55                   	push   %ebp
c01057d0:	89 e5                	mov    %esp,%ebp
c01057d2:	83 ec 68             	sub    $0x68,%esp
    //backup mem env
     int ret, count = 0, total = 0, i;
c01057d5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01057dc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
     list_entry_t *le = &free_list;
c01057e3:	c7 45 e8 a4 31 1b c0 	movl   $0xc01b31a4,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c01057ea:	eb 60                	jmp    c010584c <check_swap+0x7d>
        struct Page *p = le2page(le, page_link);
c01057ec:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01057ef:	83 e8 0c             	sub    $0xc,%eax
c01057f2:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(PageProperty(p));
c01057f5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01057f8:	83 c0 04             	add    $0x4,%eax
c01057fb:	c7 45 b0 01 00 00 00 	movl   $0x1,-0x50(%ebp)
c0105802:	89 45 ac             	mov    %eax,-0x54(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0105805:	8b 45 ac             	mov    -0x54(%ebp),%eax
c0105808:	8b 55 b0             	mov    -0x50(%ebp),%edx
c010580b:	0f a3 10             	bt     %edx,(%eax)
c010580e:	19 c0                	sbb    %eax,%eax
c0105810:	89 45 a8             	mov    %eax,-0x58(%ebp)
    return oldbit != 0;
c0105813:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
c0105817:	0f 95 c0             	setne  %al
c010581a:	0f b6 c0             	movzbl %al,%eax
c010581d:	85 c0                	test   %eax,%eax
c010581f:	75 19                	jne    c010583a <check_swap+0x6b>
c0105821:	68 52 cc 10 c0       	push   $0xc010cc52
c0105826:	68 56 cb 10 c0       	push   $0xc010cb56
c010582b:	68 bb 00 00 00       	push   $0xbb
c0105830:	68 f0 ca 10 c0       	push   $0xc010caf0
c0105835:	e8 c3 ab ff ff       	call   c01003fd <__panic>
        count ++, total += p->property;
c010583a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010583e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105841:	8b 50 08             	mov    0x8(%eax),%edx
c0105844:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105847:	01 d0                	add    %edx,%eax
c0105849:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010584c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010584f:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0105852:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0105855:	8b 40 04             	mov    0x4(%eax),%eax
check_swap(void)
{
    //backup mem env
     int ret, count = 0, total = 0, i;
     list_entry_t *le = &free_list;
     while ((le = list_next(le)) != &free_list) {
c0105858:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010585b:	81 7d e8 a4 31 1b c0 	cmpl   $0xc01b31a4,-0x18(%ebp)
c0105862:	75 88                	jne    c01057ec <check_swap+0x1d>
        struct Page *p = le2page(le, page_link);
        assert(PageProperty(p));
        count ++, total += p->property;
     }
     assert(total == nr_free_pages());
c0105864:	e8 c3 18 00 00       	call   c010712c <nr_free_pages>
c0105869:	89 c2                	mov    %eax,%edx
c010586b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010586e:	39 c2                	cmp    %eax,%edx
c0105870:	74 19                	je     c010588b <check_swap+0xbc>
c0105872:	68 62 cc 10 c0       	push   $0xc010cc62
c0105877:	68 56 cb 10 c0       	push   $0xc010cb56
c010587c:	68 be 00 00 00       	push   $0xbe
c0105881:	68 f0 ca 10 c0       	push   $0xc010caf0
c0105886:	e8 72 ab ff ff       	call   c01003fd <__panic>
     cprintf("BEGIN check_swap: count %d, total %d\n",count,total);
c010588b:	83 ec 04             	sub    $0x4,%esp
c010588e:	ff 75 f0             	pushl  -0x10(%ebp)
c0105891:	ff 75 f4             	pushl  -0xc(%ebp)
c0105894:	68 7c cc 10 c0       	push   $0xc010cc7c
c0105899:	e8 f9 a9 ff ff       	call   c0100297 <cprintf>
c010589e:	83 c4 10             	add    $0x10,%esp
     
     //now we set the phy pages env     
     struct mm_struct *mm = mm_create();
c01058a1:	e8 95 dd ff ff       	call   c010363b <mm_create>
c01058a6:	89 45 d8             	mov    %eax,-0x28(%ebp)
     assert(mm != NULL);
c01058a9:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c01058ad:	75 19                	jne    c01058c8 <check_swap+0xf9>
c01058af:	68 a2 cc 10 c0       	push   $0xc010cca2
c01058b4:	68 56 cb 10 c0       	push   $0xc010cb56
c01058b9:	68 c3 00 00 00       	push   $0xc3
c01058be:	68 f0 ca 10 c0       	push   $0xc010caf0
c01058c3:	e8 35 ab ff ff       	call   c01003fd <__panic>

     extern struct mm_struct *check_mm_struct;
     assert(check_mm_struct == NULL);
c01058c8:	a1 d0 30 1b c0       	mov    0xc01b30d0,%eax
c01058cd:	85 c0                	test   %eax,%eax
c01058cf:	74 19                	je     c01058ea <check_swap+0x11b>
c01058d1:	68 ad cc 10 c0       	push   $0xc010ccad
c01058d6:	68 56 cb 10 c0       	push   $0xc010cb56
c01058db:	68 c6 00 00 00       	push   $0xc6
c01058e0:	68 f0 ca 10 c0       	push   $0xc010caf0
c01058e5:	e8 13 ab ff ff       	call   c01003fd <__panic>

     check_mm_struct = mm;
c01058ea:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01058ed:	a3 d0 30 1b c0       	mov    %eax,0xc01b30d0

     pde_t *pgdir = mm->pgdir = boot_pgdir;
c01058f2:	8b 15 20 ca 12 c0    	mov    0xc012ca20,%edx
c01058f8:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01058fb:	89 50 0c             	mov    %edx,0xc(%eax)
c01058fe:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0105901:	8b 40 0c             	mov    0xc(%eax),%eax
c0105904:	89 45 d4             	mov    %eax,-0x2c(%ebp)
     assert(pgdir[0] == 0);
c0105907:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010590a:	8b 00                	mov    (%eax),%eax
c010590c:	85 c0                	test   %eax,%eax
c010590e:	74 19                	je     c0105929 <check_swap+0x15a>
c0105910:	68 c5 cc 10 c0       	push   $0xc010ccc5
c0105915:	68 56 cb 10 c0       	push   $0xc010cb56
c010591a:	68 cb 00 00 00       	push   $0xcb
c010591f:	68 f0 ca 10 c0       	push   $0xc010caf0
c0105924:	e8 d4 aa ff ff       	call   c01003fd <__panic>

     struct vma_struct *vma = vma_create(BEING_CHECK_VALID_VADDR, CHECK_VALID_VADDR, VM_WRITE | VM_READ);
c0105929:	83 ec 04             	sub    $0x4,%esp
c010592c:	6a 03                	push   $0x3
c010592e:	68 00 60 00 00       	push   $0x6000
c0105933:	68 00 10 00 00       	push   $0x1000
c0105938:	e8 9c dd ff ff       	call   c01036d9 <vma_create>
c010593d:	83 c4 10             	add    $0x10,%esp
c0105940:	89 45 d0             	mov    %eax,-0x30(%ebp)
     assert(vma != NULL);
c0105943:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c0105947:	75 19                	jne    c0105962 <check_swap+0x193>
c0105949:	68 d3 cc 10 c0       	push   $0xc010ccd3
c010594e:	68 56 cb 10 c0       	push   $0xc010cb56
c0105953:	68 ce 00 00 00       	push   $0xce
c0105958:	68 f0 ca 10 c0       	push   $0xc010caf0
c010595d:	e8 9b aa ff ff       	call   c01003fd <__panic>

     insert_vma_struct(mm, vma);
c0105962:	83 ec 08             	sub    $0x8,%esp
c0105965:	ff 75 d0             	pushl  -0x30(%ebp)
c0105968:	ff 75 d8             	pushl  -0x28(%ebp)
c010596b:	e8 d1 de ff ff       	call   c0103841 <insert_vma_struct>
c0105970:	83 c4 10             	add    $0x10,%esp

     //setup the temp Page Table vaddr 0~4MB
     cprintf("setup Page Table for vaddr 0X1000, so alloc a page\n");
c0105973:	83 ec 0c             	sub    $0xc,%esp
c0105976:	68 e0 cc 10 c0       	push   $0xc010cce0
c010597b:	e8 17 a9 ff ff       	call   c0100297 <cprintf>
c0105980:	83 c4 10             	add    $0x10,%esp
     pte_t *temp_ptep=NULL;
c0105983:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
c010598a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010598d:	8b 40 0c             	mov    0xc(%eax),%eax
c0105990:	83 ec 04             	sub    $0x4,%esp
c0105993:	6a 01                	push   $0x1
c0105995:	68 00 10 00 00       	push   $0x1000
c010599a:	50                   	push   %eax
c010599b:	e8 57 1d 00 00       	call   c01076f7 <get_pte>
c01059a0:	83 c4 10             	add    $0x10,%esp
c01059a3:	89 45 cc             	mov    %eax,-0x34(%ebp)
     assert(temp_ptep!= NULL);
c01059a6:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c01059aa:	75 19                	jne    c01059c5 <check_swap+0x1f6>
c01059ac:	68 14 cd 10 c0       	push   $0xc010cd14
c01059b1:	68 56 cb 10 c0       	push   $0xc010cb56
c01059b6:	68 d6 00 00 00       	push   $0xd6
c01059bb:	68 f0 ca 10 c0       	push   $0xc010caf0
c01059c0:	e8 38 aa ff ff       	call   c01003fd <__panic>
     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
c01059c5:	83 ec 0c             	sub    $0xc,%esp
c01059c8:	68 28 cd 10 c0       	push   $0xc010cd28
c01059cd:	e8 c5 a8 ff ff       	call   c0100297 <cprintf>
c01059d2:	83 c4 10             	add    $0x10,%esp
     
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01059d5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01059dc:	e9 90 00 00 00       	jmp    c0105a71 <check_swap+0x2a2>
          check_rp[i] = alloc_page();
c01059e1:	83 ec 0c             	sub    $0xc,%esp
c01059e4:	6a 01                	push   $0x1
c01059e6:	e8 a0 16 00 00       	call   c010708b <alloc_pages>
c01059eb:	83 c4 10             	add    $0x10,%esp
c01059ee:	89 c2                	mov    %eax,%edx
c01059f0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01059f3:	89 14 85 e0 30 1b c0 	mov    %edx,-0x3fe4cf20(,%eax,4)
          assert(check_rp[i] != NULL );
c01059fa:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01059fd:	8b 04 85 e0 30 1b c0 	mov    -0x3fe4cf20(,%eax,4),%eax
c0105a04:	85 c0                	test   %eax,%eax
c0105a06:	75 19                	jne    c0105a21 <check_swap+0x252>
c0105a08:	68 4c cd 10 c0       	push   $0xc010cd4c
c0105a0d:	68 56 cb 10 c0       	push   $0xc010cb56
c0105a12:	68 db 00 00 00       	push   $0xdb
c0105a17:	68 f0 ca 10 c0       	push   $0xc010caf0
c0105a1c:	e8 dc a9 ff ff       	call   c01003fd <__panic>
          assert(!PageProperty(check_rp[i]));
c0105a21:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105a24:	8b 04 85 e0 30 1b c0 	mov    -0x3fe4cf20(,%eax,4),%eax
c0105a2b:	83 c0 04             	add    $0x4,%eax
c0105a2e:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
c0105a35:	89 45 a4             	mov    %eax,-0x5c(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0105a38:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0105a3b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0105a3e:	0f a3 10             	bt     %edx,(%eax)
c0105a41:	19 c0                	sbb    %eax,%eax
c0105a43:	89 45 a0             	mov    %eax,-0x60(%ebp)
    return oldbit != 0;
c0105a46:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
c0105a4a:	0f 95 c0             	setne  %al
c0105a4d:	0f b6 c0             	movzbl %al,%eax
c0105a50:	85 c0                	test   %eax,%eax
c0105a52:	74 19                	je     c0105a6d <check_swap+0x29e>
c0105a54:	68 60 cd 10 c0       	push   $0xc010cd60
c0105a59:	68 56 cb 10 c0       	push   $0xc010cb56
c0105a5e:	68 dc 00 00 00       	push   $0xdc
c0105a63:	68 f0 ca 10 c0       	push   $0xc010caf0
c0105a68:	e8 90 a9 ff ff       	call   c01003fd <__panic>
     pte_t *temp_ptep=NULL;
     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
     assert(temp_ptep!= NULL);
     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
     
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0105a6d:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0105a71:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0105a75:	0f 8e 66 ff ff ff    	jle    c01059e1 <check_swap+0x212>
          check_rp[i] = alloc_page();
          assert(check_rp[i] != NULL );
          assert(!PageProperty(check_rp[i]));
     }
     list_entry_t free_list_store = free_list;
c0105a7b:	a1 a4 31 1b c0       	mov    0xc01b31a4,%eax
c0105a80:	8b 15 a8 31 1b c0    	mov    0xc01b31a8,%edx
c0105a86:	89 45 98             	mov    %eax,-0x68(%ebp)
c0105a89:	89 55 9c             	mov    %edx,-0x64(%ebp)
c0105a8c:	c7 45 c0 a4 31 1b c0 	movl   $0xc01b31a4,-0x40(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0105a93:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0105a96:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0105a99:	89 50 04             	mov    %edx,0x4(%eax)
c0105a9c:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0105a9f:	8b 50 04             	mov    0x4(%eax),%edx
c0105aa2:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0105aa5:	89 10                	mov    %edx,(%eax)
c0105aa7:	c7 45 c8 a4 31 1b c0 	movl   $0xc01b31a4,-0x38(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0105aae:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0105ab1:	8b 40 04             	mov    0x4(%eax),%eax
c0105ab4:	39 45 c8             	cmp    %eax,-0x38(%ebp)
c0105ab7:	0f 94 c0             	sete   %al
c0105aba:	0f b6 c0             	movzbl %al,%eax
     list_init(&free_list);
     assert(list_empty(&free_list));
c0105abd:	85 c0                	test   %eax,%eax
c0105abf:	75 19                	jne    c0105ada <check_swap+0x30b>
c0105ac1:	68 7b cd 10 c0       	push   $0xc010cd7b
c0105ac6:	68 56 cb 10 c0       	push   $0xc010cb56
c0105acb:	68 e0 00 00 00       	push   $0xe0
c0105ad0:	68 f0 ca 10 c0       	push   $0xc010caf0
c0105ad5:	e8 23 a9 ff ff       	call   c01003fd <__panic>
     
     //assert(alloc_page() == NULL);
     
     unsigned int nr_free_store = nr_free;
c0105ada:	a1 ac 31 1b c0       	mov    0xc01b31ac,%eax
c0105adf:	89 45 bc             	mov    %eax,-0x44(%ebp)
     nr_free = 0;
c0105ae2:	c7 05 ac 31 1b c0 00 	movl   $0x0,0xc01b31ac
c0105ae9:	00 00 00 
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0105aec:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0105af3:	eb 1c                	jmp    c0105b11 <check_swap+0x342>
        free_pages(check_rp[i],1);
c0105af5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105af8:	8b 04 85 e0 30 1b c0 	mov    -0x3fe4cf20(,%eax,4),%eax
c0105aff:	83 ec 08             	sub    $0x8,%esp
c0105b02:	6a 01                	push   $0x1
c0105b04:	50                   	push   %eax
c0105b05:	e8 ed 15 00 00       	call   c01070f7 <free_pages>
c0105b0a:	83 c4 10             	add    $0x10,%esp
     
     //assert(alloc_page() == NULL);
     
     unsigned int nr_free_store = nr_free;
     nr_free = 0;
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0105b0d:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0105b11:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0105b15:	7e de                	jle    c0105af5 <check_swap+0x326>
        free_pages(check_rp[i],1);
     }
     assert(nr_free==CHECK_VALID_PHY_PAGE_NUM);
c0105b17:	a1 ac 31 1b c0       	mov    0xc01b31ac,%eax
c0105b1c:	83 f8 04             	cmp    $0x4,%eax
c0105b1f:	74 19                	je     c0105b3a <check_swap+0x36b>
c0105b21:	68 94 cd 10 c0       	push   $0xc010cd94
c0105b26:	68 56 cb 10 c0       	push   $0xc010cb56
c0105b2b:	68 e9 00 00 00       	push   $0xe9
c0105b30:	68 f0 ca 10 c0       	push   $0xc010caf0
c0105b35:	e8 c3 a8 ff ff       	call   c01003fd <__panic>
     
     cprintf("set up init env for check_swap begin!\n");
c0105b3a:	83 ec 0c             	sub    $0xc,%esp
c0105b3d:	68 b8 cd 10 c0       	push   $0xc010cdb8
c0105b42:	e8 50 a7 ff ff       	call   c0100297 <cprintf>
c0105b47:	83 c4 10             	add    $0x10,%esp
     //setup initial vir_page<->phy_page environment for page relpacement algorithm 

     
     pgfault_num=0;
c0105b4a:	c7 05 64 0f 1b c0 00 	movl   $0x0,0xc01b0f64
c0105b51:	00 00 00 
     
     check_content_set();
c0105b54:	e8 fd fa ff ff       	call   c0105656 <check_content_set>
     assert( nr_free == 0);         
c0105b59:	a1 ac 31 1b c0       	mov    0xc01b31ac,%eax
c0105b5e:	85 c0                	test   %eax,%eax
c0105b60:	74 19                	je     c0105b7b <check_swap+0x3ac>
c0105b62:	68 df cd 10 c0       	push   $0xc010cddf
c0105b67:	68 56 cb 10 c0       	push   $0xc010cb56
c0105b6c:	68 f2 00 00 00       	push   $0xf2
c0105b71:	68 f0 ca 10 c0       	push   $0xc010caf0
c0105b76:	e8 82 a8 ff ff       	call   c01003fd <__panic>
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c0105b7b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0105b82:	eb 26                	jmp    c0105baa <check_swap+0x3db>
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
c0105b84:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105b87:	c7 04 85 00 31 1b c0 	movl   $0xffffffff,-0x3fe4cf00(,%eax,4)
c0105b8e:	ff ff ff ff 
c0105b92:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105b95:	8b 14 85 00 31 1b c0 	mov    -0x3fe4cf00(,%eax,4),%edx
c0105b9c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105b9f:	89 14 85 40 31 1b c0 	mov    %edx,-0x3fe4cec0(,%eax,4)
     
     pgfault_num=0;
     
     check_content_set();
     assert( nr_free == 0);         
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c0105ba6:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0105baa:	83 7d ec 09          	cmpl   $0x9,-0x14(%ebp)
c0105bae:	7e d4                	jle    c0105b84 <check_swap+0x3b5>
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
     
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0105bb0:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0105bb7:	e9 cc 00 00 00       	jmp    c0105c88 <check_swap+0x4b9>
         check_ptep[i]=0;
c0105bbc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105bbf:	c7 04 85 94 31 1b c0 	movl   $0x0,-0x3fe4ce6c(,%eax,4)
c0105bc6:	00 00 00 00 
         check_ptep[i] = get_pte(pgdir, (i+1)*0x1000, 0);
c0105bca:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105bcd:	83 c0 01             	add    $0x1,%eax
c0105bd0:	c1 e0 0c             	shl    $0xc,%eax
c0105bd3:	83 ec 04             	sub    $0x4,%esp
c0105bd6:	6a 00                	push   $0x0
c0105bd8:	50                   	push   %eax
c0105bd9:	ff 75 d4             	pushl  -0x2c(%ebp)
c0105bdc:	e8 16 1b 00 00       	call   c01076f7 <get_pte>
c0105be1:	83 c4 10             	add    $0x10,%esp
c0105be4:	89 c2                	mov    %eax,%edx
c0105be6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105be9:	89 14 85 94 31 1b c0 	mov    %edx,-0x3fe4ce6c(,%eax,4)
         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
         assert(check_ptep[i] != NULL);
c0105bf0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105bf3:	8b 04 85 94 31 1b c0 	mov    -0x3fe4ce6c(,%eax,4),%eax
c0105bfa:	85 c0                	test   %eax,%eax
c0105bfc:	75 19                	jne    c0105c17 <check_swap+0x448>
c0105bfe:	68 ec cd 10 c0       	push   $0xc010cdec
c0105c03:	68 56 cb 10 c0       	push   $0xc010cb56
c0105c08:	68 fa 00 00 00       	push   $0xfa
c0105c0d:	68 f0 ca 10 c0       	push   $0xc010caf0
c0105c12:	e8 e6 a7 ff ff       	call   c01003fd <__panic>
         assert(pte2page(*check_ptep[i]) == check_rp[i]);
c0105c17:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105c1a:	8b 04 85 94 31 1b c0 	mov    -0x3fe4ce6c(,%eax,4),%eax
c0105c21:	8b 00                	mov    (%eax),%eax
c0105c23:	83 ec 0c             	sub    $0xc,%esp
c0105c26:	50                   	push   %eax
c0105c27:	e8 d8 f6 ff ff       	call   c0105304 <pte2page>
c0105c2c:	83 c4 10             	add    $0x10,%esp
c0105c2f:	89 c2                	mov    %eax,%edx
c0105c31:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105c34:	8b 04 85 e0 30 1b c0 	mov    -0x3fe4cf20(,%eax,4),%eax
c0105c3b:	39 c2                	cmp    %eax,%edx
c0105c3d:	74 19                	je     c0105c58 <check_swap+0x489>
c0105c3f:	68 04 ce 10 c0       	push   $0xc010ce04
c0105c44:	68 56 cb 10 c0       	push   $0xc010cb56
c0105c49:	68 fb 00 00 00       	push   $0xfb
c0105c4e:	68 f0 ca 10 c0       	push   $0xc010caf0
c0105c53:	e8 a5 a7 ff ff       	call   c01003fd <__panic>
         assert((*check_ptep[i] & PTE_P));          
c0105c58:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105c5b:	8b 04 85 94 31 1b c0 	mov    -0x3fe4ce6c(,%eax,4),%eax
c0105c62:	8b 00                	mov    (%eax),%eax
c0105c64:	83 e0 01             	and    $0x1,%eax
c0105c67:	85 c0                	test   %eax,%eax
c0105c69:	75 19                	jne    c0105c84 <check_swap+0x4b5>
c0105c6b:	68 2c ce 10 c0       	push   $0xc010ce2c
c0105c70:	68 56 cb 10 c0       	push   $0xc010cb56
c0105c75:	68 fc 00 00 00       	push   $0xfc
c0105c7a:	68 f0 ca 10 c0       	push   $0xc010caf0
c0105c7f:	e8 79 a7 ff ff       	call   c01003fd <__panic>
     check_content_set();
     assert( nr_free == 0);         
     for(i = 0; i<MAX_SEQ_NO ; i++) 
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
     
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0105c84:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0105c88:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0105c8c:	0f 8e 2a ff ff ff    	jle    c0105bbc <check_swap+0x3ed>
         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
         assert(check_ptep[i] != NULL);
         assert(pte2page(*check_ptep[i]) == check_rp[i]);
         assert((*check_ptep[i] & PTE_P));          
     }
     cprintf("set up init env for check_swap over!\n");
c0105c92:	83 ec 0c             	sub    $0xc,%esp
c0105c95:	68 48 ce 10 c0       	push   $0xc010ce48
c0105c9a:	e8 f8 a5 ff ff       	call   c0100297 <cprintf>
c0105c9f:	83 c4 10             	add    $0x10,%esp
     // now access the virt pages to test  page relpacement algorithm 
     ret=check_content_access();
c0105ca2:	e8 10 fb ff ff       	call   c01057b7 <check_content_access>
c0105ca7:	89 45 b8             	mov    %eax,-0x48(%ebp)
     assert(ret==0);
c0105caa:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
c0105cae:	74 19                	je     c0105cc9 <check_swap+0x4fa>
c0105cb0:	68 6e ce 10 c0       	push   $0xc010ce6e
c0105cb5:	68 56 cb 10 c0       	push   $0xc010cb56
c0105cba:	68 01 01 00 00       	push   $0x101
c0105cbf:	68 f0 ca 10 c0       	push   $0xc010caf0
c0105cc4:	e8 34 a7 ff ff       	call   c01003fd <__panic>
     
     //restore kernel mem env
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0105cc9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0105cd0:	eb 1c                	jmp    c0105cee <check_swap+0x51f>
         free_pages(check_rp[i],1);
c0105cd2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105cd5:	8b 04 85 e0 30 1b c0 	mov    -0x3fe4cf20(,%eax,4),%eax
c0105cdc:	83 ec 08             	sub    $0x8,%esp
c0105cdf:	6a 01                	push   $0x1
c0105ce1:	50                   	push   %eax
c0105ce2:	e8 10 14 00 00       	call   c01070f7 <free_pages>
c0105ce7:	83 c4 10             	add    $0x10,%esp
     // now access the virt pages to test  page relpacement algorithm 
     ret=check_content_access();
     assert(ret==0);
     
     //restore kernel mem env
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0105cea:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0105cee:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0105cf2:	7e de                	jle    c0105cd2 <check_swap+0x503>
         free_pages(check_rp[i],1);
     } 

     //free_page(pte2page(*temp_ptep));
    free_page(pde2page(pgdir[0]));
c0105cf4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0105cf7:	8b 00                	mov    (%eax),%eax
c0105cf9:	83 ec 0c             	sub    $0xc,%esp
c0105cfc:	50                   	push   %eax
c0105cfd:	e8 3c f6 ff ff       	call   c010533e <pde2page>
c0105d02:	83 c4 10             	add    $0x10,%esp
c0105d05:	83 ec 08             	sub    $0x8,%esp
c0105d08:	6a 01                	push   $0x1
c0105d0a:	50                   	push   %eax
c0105d0b:	e8 e7 13 00 00       	call   c01070f7 <free_pages>
c0105d10:	83 c4 10             	add    $0x10,%esp
     pgdir[0] = 0;
c0105d13:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0105d16:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
     mm->pgdir = NULL;
c0105d1c:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0105d1f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
     mm_destroy(mm);
c0105d26:	83 ec 0c             	sub    $0xc,%esp
c0105d29:	ff 75 d8             	pushl  -0x28(%ebp)
c0105d2c:	e8 34 dc ff ff       	call   c0103965 <mm_destroy>
c0105d31:	83 c4 10             	add    $0x10,%esp
     check_mm_struct = NULL;
c0105d34:	c7 05 d0 30 1b c0 00 	movl   $0x0,0xc01b30d0
c0105d3b:	00 00 00 
     
     nr_free = nr_free_store;
c0105d3e:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0105d41:	a3 ac 31 1b c0       	mov    %eax,0xc01b31ac
     free_list = free_list_store;
c0105d46:	8b 45 98             	mov    -0x68(%ebp),%eax
c0105d49:	8b 55 9c             	mov    -0x64(%ebp),%edx
c0105d4c:	a3 a4 31 1b c0       	mov    %eax,0xc01b31a4
c0105d51:	89 15 a8 31 1b c0    	mov    %edx,0xc01b31a8

     
     le = &free_list;
c0105d57:	c7 45 e8 a4 31 1b c0 	movl   $0xc01b31a4,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c0105d5e:	eb 1d                	jmp    c0105d7d <check_swap+0x5ae>
         struct Page *p = le2page(le, page_link);
c0105d60:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105d63:	83 e8 0c             	sub    $0xc,%eax
c0105d66:	89 45 b4             	mov    %eax,-0x4c(%ebp)
         count --, total -= p->property;
c0105d69:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0105d6d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0105d70:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0105d73:	8b 40 08             	mov    0x8(%eax),%eax
c0105d76:	29 c2                	sub    %eax,%edx
c0105d78:	89 d0                	mov    %edx,%eax
c0105d7a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105d7d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105d80:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0105d83:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0105d86:	8b 40 04             	mov    0x4(%eax),%eax
     nr_free = nr_free_store;
     free_list = free_list_store;

     
     le = &free_list;
     while ((le = list_next(le)) != &free_list) {
c0105d89:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0105d8c:	81 7d e8 a4 31 1b c0 	cmpl   $0xc01b31a4,-0x18(%ebp)
c0105d93:	75 cb                	jne    c0105d60 <check_swap+0x591>
         struct Page *p = le2page(le, page_link);
         count --, total -= p->property;
     }
     cprintf("count is %d, total is %d\n",count,total);
c0105d95:	83 ec 04             	sub    $0x4,%esp
c0105d98:	ff 75 f0             	pushl  -0x10(%ebp)
c0105d9b:	ff 75 f4             	pushl  -0xc(%ebp)
c0105d9e:	68 75 ce 10 c0       	push   $0xc010ce75
c0105da3:	e8 ef a4 ff ff       	call   c0100297 <cprintf>
c0105da8:	83 c4 10             	add    $0x10,%esp
     //assert(count == 0);
     
     cprintf("check_swap() succeeded!\n");
c0105dab:	83 ec 0c             	sub    $0xc,%esp
c0105dae:	68 8f ce 10 c0       	push   $0xc010ce8f
c0105db3:	e8 df a4 ff ff       	call   c0100297 <cprintf>
c0105db8:	83 c4 10             	add    $0x10,%esp
}
c0105dbb:	90                   	nop
c0105dbc:	c9                   	leave  
c0105dbd:	c3                   	ret    

c0105dbe <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0105dbe:	55                   	push   %ebp
c0105dbf:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0105dc1:	8b 45 08             	mov    0x8(%ebp),%eax
c0105dc4:	8b 15 b8 31 1b c0    	mov    0xc01b31b8,%edx
c0105dca:	29 d0                	sub    %edx,%eax
c0105dcc:	c1 f8 05             	sar    $0x5,%eax
}
c0105dcf:	5d                   	pop    %ebp
c0105dd0:	c3                   	ret    

c0105dd1 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0105dd1:	55                   	push   %ebp
c0105dd2:	89 e5                	mov    %esp,%ebp
    return page2ppn(page) << PGSHIFT;
c0105dd4:	ff 75 08             	pushl  0x8(%ebp)
c0105dd7:	e8 e2 ff ff ff       	call   c0105dbe <page2ppn>
c0105ddc:	83 c4 04             	add    $0x4,%esp
c0105ddf:	c1 e0 0c             	shl    $0xc,%eax
}
c0105de2:	c9                   	leave  
c0105de3:	c3                   	ret    

c0105de4 <page_ref>:
pde2page(pde_t pde) {
    return pa2page(PDE_ADDR(pde));
}

static inline int
page_ref(struct Page *page) {
c0105de4:	55                   	push   %ebp
c0105de5:	89 e5                	mov    %esp,%ebp
    return page->ref;
c0105de7:	8b 45 08             	mov    0x8(%ebp),%eax
c0105dea:	8b 00                	mov    (%eax),%eax
}
c0105dec:	5d                   	pop    %ebp
c0105ded:	c3                   	ret    

c0105dee <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c0105dee:	55                   	push   %ebp
c0105def:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c0105df1:	8b 45 08             	mov    0x8(%ebp),%eax
c0105df4:	8b 55 0c             	mov    0xc(%ebp),%edx
c0105df7:	89 10                	mov    %edx,(%eax)
}
c0105df9:	90                   	nop
c0105dfa:	5d                   	pop    %ebp
c0105dfb:	c3                   	ret    

c0105dfc <default_init>:

#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
default_init(void) {
c0105dfc:	55                   	push   %ebp
c0105dfd:	89 e5                	mov    %esp,%ebp
c0105dff:	83 ec 10             	sub    $0x10,%esp
c0105e02:	c7 45 fc a4 31 1b c0 	movl   $0xc01b31a4,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0105e09:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0105e0c:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0105e0f:	89 50 04             	mov    %edx,0x4(%eax)
c0105e12:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0105e15:	8b 50 04             	mov    0x4(%eax),%edx
c0105e18:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0105e1b:	89 10                	mov    %edx,(%eax)
    list_init(&free_list);
    nr_free = 0;
c0105e1d:	c7 05 ac 31 1b c0 00 	movl   $0x0,0xc01b31ac
c0105e24:	00 00 00 
}
c0105e27:	90                   	nop
c0105e28:	c9                   	leave  
c0105e29:	c3                   	ret    

c0105e2a <default_init_memmap>:

static void
default_init_memmap(struct Page *base, size_t n) {
c0105e2a:	55                   	push   %ebp
c0105e2b:	89 e5                	mov    %esp,%ebp
c0105e2d:	83 ec 48             	sub    $0x48,%esp
    assert(n > 0);
c0105e30:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0105e34:	75 16                	jne    c0105e4c <default_init_memmap+0x22>
c0105e36:	68 a8 ce 10 c0       	push   $0xc010cea8
c0105e3b:	68 ae ce 10 c0       	push   $0xc010ceae
c0105e40:	6a 6d                	push   $0x6d
c0105e42:	68 c3 ce 10 c0       	push   $0xc010cec3
c0105e47:	e8 b1 a5 ff ff       	call   c01003fd <__panic>
    struct Page *p = base;
c0105e4c:	8b 45 08             	mov    0x8(%ebp),%eax
c0105e4f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (; p != base + n; p ++) {
c0105e52:	eb 6c                	jmp    c0105ec0 <default_init_memmap+0x96>
        assert(PageReserved(p));
c0105e54:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105e57:	83 c0 04             	add    $0x4,%eax
c0105e5a:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c0105e61:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0105e64:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105e67:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0105e6a:	0f a3 10             	bt     %edx,(%eax)
c0105e6d:	19 c0                	sbb    %eax,%eax
c0105e6f:	89 45 e0             	mov    %eax,-0x20(%ebp)
    return oldbit != 0;
c0105e72:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0105e76:	0f 95 c0             	setne  %al
c0105e79:	0f b6 c0             	movzbl %al,%eax
c0105e7c:	85 c0                	test   %eax,%eax
c0105e7e:	75 16                	jne    c0105e96 <default_init_memmap+0x6c>
c0105e80:	68 d9 ce 10 c0       	push   $0xc010ced9
c0105e85:	68 ae ce 10 c0       	push   $0xc010ceae
c0105e8a:	6a 70                	push   $0x70
c0105e8c:	68 c3 ce 10 c0       	push   $0xc010cec3
c0105e91:	e8 67 a5 ff ff       	call   c01003fd <__panic>
        p->flags = p->property = 0;
c0105e96:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105e99:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
c0105ea0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105ea3:	8b 50 08             	mov    0x8(%eax),%edx
c0105ea6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105ea9:	89 50 04             	mov    %edx,0x4(%eax)
        set_page_ref(p, 0);
c0105eac:	83 ec 08             	sub    $0x8,%esp
c0105eaf:	6a 00                	push   $0x0
c0105eb1:	ff 75 f4             	pushl  -0xc(%ebp)
c0105eb4:	e8 35 ff ff ff       	call   c0105dee <set_page_ref>
c0105eb9:	83 c4 10             	add    $0x10,%esp

static void
default_init_memmap(struct Page *base, size_t n) {
    assert(n > 0);
    struct Page *p = base;
    for (; p != base + n; p ++) {
c0105ebc:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
c0105ec0:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105ec3:	c1 e0 05             	shl    $0x5,%eax
c0105ec6:	89 c2                	mov    %eax,%edx
c0105ec8:	8b 45 08             	mov    0x8(%ebp),%eax
c0105ecb:	01 d0                	add    %edx,%eax
c0105ecd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0105ed0:	75 82                	jne    c0105e54 <default_init_memmap+0x2a>
        assert(PageReserved(p));
        p->flags = p->property = 0;
        set_page_ref(p, 0);
    }
    base->property = n;
c0105ed2:	8b 45 08             	mov    0x8(%ebp),%eax
c0105ed5:	8b 55 0c             	mov    0xc(%ebp),%edx
c0105ed8:	89 50 08             	mov    %edx,0x8(%eax)
    SetPageProperty(base);
c0105edb:	8b 45 08             	mov    0x8(%ebp),%eax
c0105ede:	83 c0 04             	add    $0x4,%eax
c0105ee1:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
c0105ee8:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0105eeb:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0105eee:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0105ef1:	0f ab 10             	bts    %edx,(%eax)
    nr_free += n;
c0105ef4:	8b 15 ac 31 1b c0    	mov    0xc01b31ac,%edx
c0105efa:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105efd:	01 d0                	add    %edx,%eax
c0105eff:	a3 ac 31 1b c0       	mov    %eax,0xc01b31ac
    list_add(&free_list, &(base->page_link));
c0105f04:	8b 45 08             	mov    0x8(%ebp),%eax
c0105f07:	83 c0 0c             	add    $0xc,%eax
c0105f0a:	c7 45 f0 a4 31 1b c0 	movl   $0xc01b31a4,-0x10(%ebp)
c0105f11:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0105f14:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105f17:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0105f1a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0105f1d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0105f20:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0105f23:	8b 40 04             	mov    0x4(%eax),%eax
c0105f26:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0105f29:	89 55 d0             	mov    %edx,-0x30(%ebp)
c0105f2c:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0105f2f:	89 55 cc             	mov    %edx,-0x34(%ebp)
c0105f32:	89 45 c8             	mov    %eax,-0x38(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0105f35:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0105f38:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0105f3b:	89 10                	mov    %edx,(%eax)
c0105f3d:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0105f40:	8b 10                	mov    (%eax),%edx
c0105f42:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0105f45:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0105f48:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0105f4b:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0105f4e:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0105f51:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0105f54:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0105f57:	89 10                	mov    %edx,(%eax)
}
c0105f59:	90                   	nop
c0105f5a:	c9                   	leave  
c0105f5b:	c3                   	ret    

c0105f5c <default_alloc_pages>:

// LAB2 MODIFIED need to be rewritten
static struct Page *
default_alloc_pages(size_t n) {
c0105f5c:	55                   	push   %ebp
c0105f5d:	89 e5                	mov    %esp,%ebp
c0105f5f:	83 ec 58             	sub    $0x58,%esp
    assert(n > 0);
c0105f62:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0105f66:	75 16                	jne    c0105f7e <default_alloc_pages+0x22>
c0105f68:	68 a8 ce 10 c0       	push   $0xc010cea8
c0105f6d:	68 ae ce 10 c0       	push   $0xc010ceae
c0105f72:	6a 7d                	push   $0x7d
c0105f74:	68 c3 ce 10 c0       	push   $0xc010cec3
c0105f79:	e8 7f a4 ff ff       	call   c01003fd <__panic>
    if (n > nr_free) {
c0105f7e:	a1 ac 31 1b c0       	mov    0xc01b31ac,%eax
c0105f83:	3b 45 08             	cmp    0x8(%ebp),%eax
c0105f86:	73 0a                	jae    c0105f92 <default_alloc_pages+0x36>
        return NULL;
c0105f88:	b8 00 00 00 00       	mov    $0x0,%eax
c0105f8d:	e9 41 01 00 00       	jmp    c01060d3 <default_alloc_pages+0x177>
    }
    struct Page *page = NULL;
c0105f92:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    list_entry_t *le = &free_list;
c0105f99:	c7 45 f0 a4 31 1b c0 	movl   $0xc01b31a4,-0x10(%ebp)
    while ((le = list_next(le)) != &free_list) {
c0105fa0:	eb 1c                	jmp    c0105fbe <default_alloc_pages+0x62>
        struct Page *p = le2page(le, page_link);
c0105fa2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105fa5:	83 e8 0c             	sub    $0xc,%eax
c0105fa8:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (p->property >= n) {
c0105fab:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105fae:	8b 40 08             	mov    0x8(%eax),%eax
c0105fb1:	3b 45 08             	cmp    0x8(%ebp),%eax
c0105fb4:	72 08                	jb     c0105fbe <default_alloc_pages+0x62>
            page = p;
c0105fb6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105fb9:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
c0105fbc:	eb 18                	jmp    c0105fd6 <default_alloc_pages+0x7a>
c0105fbe:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105fc1:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0105fc4:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0105fc7:	8b 40 04             	mov    0x4(%eax),%eax
    if (n > nr_free) {
        return NULL;
    }
    struct Page *page = NULL;
    list_entry_t *le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c0105fca:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105fcd:	81 7d f0 a4 31 1b c0 	cmpl   $0xc01b31a4,-0x10(%ebp)
c0105fd4:	75 cc                	jne    c0105fa2 <default_alloc_pages+0x46>
        if (p->property >= n) {
            page = p;
            break;
        }
    }
    if (page != NULL) {
c0105fd6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105fda:	0f 84 f0 00 00 00    	je     c01060d0 <default_alloc_pages+0x174>
c0105fe0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105fe3:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0105fe6:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0105fe9:	8b 40 04             	mov    0x4(%eax),%eax
        list_entry_t *following_le = list_next(le);
c0105fec:	89 45 e0             	mov    %eax,-0x20(%ebp)
        list_del(&(page->page_link));
c0105fef:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105ff2:	83 c0 0c             	add    $0xc,%eax
c0105ff5:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0105ff8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105ffb:	8b 40 04             	mov    0x4(%eax),%eax
c0105ffe:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0106001:	8b 12                	mov    (%edx),%edx
c0106003:	89 55 c8             	mov    %edx,-0x38(%ebp)
c0106006:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0106009:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010600c:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c010600f:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0106012:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0106015:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0106018:	89 10                	mov    %edx,(%eax)
        if (page->property > n) {
c010601a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010601d:	8b 40 08             	mov    0x8(%eax),%eax
c0106020:	3b 45 08             	cmp    0x8(%ebp),%eax
c0106023:	0f 86 81 00 00 00    	jbe    c01060aa <default_alloc_pages+0x14e>
            struct Page *p = page + n;                      // split the allocated page
c0106029:	8b 45 08             	mov    0x8(%ebp),%eax
c010602c:	c1 e0 05             	shl    $0x5,%eax
c010602f:	89 c2                	mov    %eax,%edx
c0106031:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106034:	01 d0                	add    %edx,%eax
c0106036:	89 45 d8             	mov    %eax,-0x28(%ebp)
            p->property = page->property - n;               // set page num
c0106039:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010603c:	8b 40 08             	mov    0x8(%eax),%eax
c010603f:	2b 45 08             	sub    0x8(%ebp),%eax
c0106042:	89 c2                	mov    %eax,%edx
c0106044:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0106047:	89 50 08             	mov    %edx,0x8(%eax)
            SetPageProperty(p);                             // mark as the head page
c010604a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010604d:	83 c0 04             	add    $0x4,%eax
c0106050:	c7 45 d0 01 00 00 00 	movl   $0x1,-0x30(%ebp)
c0106057:	89 45 b0             	mov    %eax,-0x50(%ebp)
c010605a:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010605d:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0106060:	0f ab 10             	bts    %edx,(%eax)
            list_add_before(following_le, &(p->page_link)); // add the remaining block before the formerly following block
c0106063:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0106066:	8d 50 0c             	lea    0xc(%eax),%edx
c0106069:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010606c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010606f:	89 55 c0             	mov    %edx,-0x40(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c0106072:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106075:	8b 00                	mov    (%eax),%eax
c0106077:	8b 55 c0             	mov    -0x40(%ebp),%edx
c010607a:	89 55 bc             	mov    %edx,-0x44(%ebp)
c010607d:	89 45 b8             	mov    %eax,-0x48(%ebp)
c0106080:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106083:	89 45 b4             	mov    %eax,-0x4c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0106086:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0106089:	8b 55 bc             	mov    -0x44(%ebp),%edx
c010608c:	89 10                	mov    %edx,(%eax)
c010608e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0106091:	8b 10                	mov    (%eax),%edx
c0106093:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0106096:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0106099:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010609c:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c010609f:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c01060a2:	8b 45 bc             	mov    -0x44(%ebp),%eax
c01060a5:	8b 55 b8             	mov    -0x48(%ebp),%edx
c01060a8:	89 10                	mov    %edx,(%eax)
        }
        nr_free -= n;
c01060aa:	a1 ac 31 1b c0       	mov    0xc01b31ac,%eax
c01060af:	2b 45 08             	sub    0x8(%ebp),%eax
c01060b2:	a3 ac 31 1b c0       	mov    %eax,0xc01b31ac
        ClearPageProperty(page);    // mark as "not head page"
c01060b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01060ba:	83 c0 04             	add    $0x4,%eax
c01060bd:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
c01060c4:	89 45 ac             	mov    %eax,-0x54(%ebp)
 * @nr:     the bit to clear
 * @addr:   the address to start counting from
 * */
static inline void
clear_bit(int nr, volatile void *addr) {
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c01060c7:	8b 45 ac             	mov    -0x54(%ebp),%eax
c01060ca:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01060cd:	0f b3 10             	btr    %edx,(%eax)
    }
    return page;
c01060d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01060d3:	c9                   	leave  
c01060d4:	c3                   	ret    

c01060d5 <default_free_pages>:

// LAB2 MODIFIED
static void
default_free_pages(struct Page *base, size_t n) {
c01060d5:	55                   	push   %ebp
c01060d6:	89 e5                	mov    %esp,%ebp
c01060d8:	81 ec 88 00 00 00    	sub    $0x88,%esp
    assert(n > 0);
c01060de:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01060e2:	75 19                	jne    c01060fd <default_free_pages+0x28>
c01060e4:	68 a8 ce 10 c0       	push   $0xc010cea8
c01060e9:	68 ae ce 10 c0       	push   $0xc010ceae
c01060ee:	68 9c 00 00 00       	push   $0x9c
c01060f3:	68 c3 ce 10 c0       	push   $0xc010cec3
c01060f8:	e8 00 a3 ff ff       	call   c01003fd <__panic>
    struct Page *p = base;
c01060fd:	8b 45 08             	mov    0x8(%ebp),%eax
c0106100:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (; p != base + n; p ++) {
c0106103:	e9 8f 00 00 00       	jmp    c0106197 <default_free_pages+0xc2>
        assert(!PageReserved(p) && !PageProperty(p));
c0106108:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010610b:	83 c0 04             	add    $0x4,%eax
c010610e:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
c0106115:	89 45 bc             	mov    %eax,-0x44(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0106118:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010611b:	8b 55 c0             	mov    -0x40(%ebp),%edx
c010611e:	0f a3 10             	bt     %edx,(%eax)
c0106121:	19 c0                	sbb    %eax,%eax
c0106123:	89 45 b8             	mov    %eax,-0x48(%ebp)
    return oldbit != 0;
c0106126:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
c010612a:	0f 95 c0             	setne  %al
c010612d:	0f b6 c0             	movzbl %al,%eax
c0106130:	85 c0                	test   %eax,%eax
c0106132:	75 2c                	jne    c0106160 <default_free_pages+0x8b>
c0106134:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106137:	83 c0 04             	add    $0x4,%eax
c010613a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
c0106141:	89 45 b4             	mov    %eax,-0x4c(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0106144:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0106147:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010614a:	0f a3 10             	bt     %edx,(%eax)
c010614d:	19 c0                	sbb    %eax,%eax
c010614f:	89 45 b0             	mov    %eax,-0x50(%ebp)
    return oldbit != 0;
c0106152:	83 7d b0 00          	cmpl   $0x0,-0x50(%ebp)
c0106156:	0f 95 c0             	setne  %al
c0106159:	0f b6 c0             	movzbl %al,%eax
c010615c:	85 c0                	test   %eax,%eax
c010615e:	74 19                	je     c0106179 <default_free_pages+0xa4>
c0106160:	68 ec ce 10 c0       	push   $0xc010ceec
c0106165:	68 ae ce 10 c0       	push   $0xc010ceae
c010616a:	68 9f 00 00 00       	push   $0x9f
c010616f:	68 c3 ce 10 c0       	push   $0xc010cec3
c0106174:	e8 84 a2 ff ff       	call   c01003fd <__panic>
        p->flags = 0;
c0106179:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010617c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
        set_page_ref(p, 0);     // clear ref flag
c0106183:	83 ec 08             	sub    $0x8,%esp
c0106186:	6a 00                	push   $0x0
c0106188:	ff 75 f4             	pushl  -0xc(%ebp)
c010618b:	e8 5e fc ff ff       	call   c0105dee <set_page_ref>
c0106190:	83 c4 10             	add    $0x10,%esp
// LAB2 MODIFIED
static void
default_free_pages(struct Page *base, size_t n) {
    assert(n > 0);
    struct Page *p = base;
    for (; p != base + n; p ++) {
c0106193:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
c0106197:	8b 45 0c             	mov    0xc(%ebp),%eax
c010619a:	c1 e0 05             	shl    $0x5,%eax
c010619d:	89 c2                	mov    %eax,%edx
c010619f:	8b 45 08             	mov    0x8(%ebp),%eax
c01061a2:	01 d0                	add    %edx,%eax
c01061a4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01061a7:	0f 85 5b ff ff ff    	jne    c0106108 <default_free_pages+0x33>
        assert(!PageReserved(p) && !PageProperty(p));
        p->flags = 0;
        set_page_ref(p, 0);     // clear ref flag
    }
    base->property = n;
c01061ad:	8b 45 08             	mov    0x8(%ebp),%eax
c01061b0:	8b 55 0c             	mov    0xc(%ebp),%edx
c01061b3:	89 50 08             	mov    %edx,0x8(%eax)
    SetPageProperty(base);
c01061b6:	8b 45 08             	mov    0x8(%ebp),%eax
c01061b9:	83 c0 04             	add    $0x4,%eax
c01061bc:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
c01061c3:	89 45 ac             	mov    %eax,-0x54(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c01061c6:	8b 45 ac             	mov    -0x54(%ebp),%eax
c01061c9:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01061cc:	0f ab 10             	bts    %edx,(%eax)
c01061cf:	c7 45 e8 a4 31 1b c0 	movl   $0xc01b31a4,-0x18(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01061d6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01061d9:	8b 40 04             	mov    0x4(%eax),%eax
    // try to extend free block
    list_entry_t *le = list_next(&free_list);
c01061dc:	89 45 f0             	mov    %eax,-0x10(%ebp)
    while (le != &free_list) {
c01061df:	e9 0e 01 00 00       	jmp    c01062f2 <default_free_pages+0x21d>
        p = le2page(le, page_link);
c01061e4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01061e7:	83 e8 0c             	sub    $0xc,%eax
c01061ea:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01061ed:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01061f0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01061f3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01061f6:	8b 40 04             	mov    0x4(%eax),%eax
        le = list_next(le);
c01061f9:	89 45 f0             	mov    %eax,-0x10(%ebp)
        // page is exactly before one page
        if (base + base->property == p) {
c01061fc:	8b 45 08             	mov    0x8(%ebp),%eax
c01061ff:	8b 40 08             	mov    0x8(%eax),%eax
c0106202:	c1 e0 05             	shl    $0x5,%eax
c0106205:	89 c2                	mov    %eax,%edx
c0106207:	8b 45 08             	mov    0x8(%ebp),%eax
c010620a:	01 d0                	add    %edx,%eax
c010620c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010620f:	75 64                	jne    c0106275 <default_free_pages+0x1a0>
            base->property += p->property;
c0106211:	8b 45 08             	mov    0x8(%ebp),%eax
c0106214:	8b 50 08             	mov    0x8(%eax),%edx
c0106217:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010621a:	8b 40 08             	mov    0x8(%eax),%eax
c010621d:	01 c2                	add    %eax,%edx
c010621f:	8b 45 08             	mov    0x8(%ebp),%eax
c0106222:	89 50 08             	mov    %edx,0x8(%eax)
            p->property = 0;     // clear properties of p
c0106225:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106228:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
            ClearPageProperty(p);
c010622f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106232:	83 c0 04             	add    $0x4,%eax
c0106235:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
c010623c:	89 45 a0             	mov    %eax,-0x60(%ebp)
 * @nr:     the bit to clear
 * @addr:   the address to start counting from
 * */
static inline void
clear_bit(int nr, volatile void *addr) {
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c010623f:	8b 45 a0             	mov    -0x60(%ebp),%eax
c0106242:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0106245:	0f b3 10             	btr    %edx,(%eax)
            list_del(&(p->page_link));
c0106248:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010624b:	83 c0 0c             	add    $0xc,%eax
c010624e:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0106251:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106254:	8b 40 04             	mov    0x4(%eax),%eax
c0106257:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010625a:	8b 12                	mov    (%edx),%edx
c010625c:	89 55 a8             	mov    %edx,-0x58(%ebp)
c010625f:	89 45 a4             	mov    %eax,-0x5c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0106262:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0106265:	8b 55 a4             	mov    -0x5c(%ebp),%edx
c0106268:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010626b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c010626e:	8b 55 a8             	mov    -0x58(%ebp),%edx
c0106271:	89 10                	mov    %edx,(%eax)
c0106273:	eb 7d                	jmp    c01062f2 <default_free_pages+0x21d>
        }
        // page is exactly after one page
        else if (p + p->property == base) {
c0106275:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106278:	8b 40 08             	mov    0x8(%eax),%eax
c010627b:	c1 e0 05             	shl    $0x5,%eax
c010627e:	89 c2                	mov    %eax,%edx
c0106280:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106283:	01 d0                	add    %edx,%eax
c0106285:	3b 45 08             	cmp    0x8(%ebp),%eax
c0106288:	75 68                	jne    c01062f2 <default_free_pages+0x21d>
            p->property += base->property;
c010628a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010628d:	8b 50 08             	mov    0x8(%eax),%edx
c0106290:	8b 45 08             	mov    0x8(%ebp),%eax
c0106293:	8b 40 08             	mov    0x8(%eax),%eax
c0106296:	01 c2                	add    %eax,%edx
c0106298:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010629b:	89 50 08             	mov    %edx,0x8(%eax)
            base->property = 0;     // clear properties of base
c010629e:	8b 45 08             	mov    0x8(%ebp),%eax
c01062a1:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
            ClearPageProperty(base);
c01062a8:	8b 45 08             	mov    0x8(%ebp),%eax
c01062ab:	83 c0 04             	add    $0x4,%eax
c01062ae:	c7 45 cc 01 00 00 00 	movl   $0x1,-0x34(%ebp)
c01062b5:	89 45 94             	mov    %eax,-0x6c(%ebp)
c01062b8:	8b 45 94             	mov    -0x6c(%ebp),%eax
c01062bb:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01062be:	0f b3 10             	btr    %edx,(%eax)
            base = p;
c01062c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01062c4:	89 45 08             	mov    %eax,0x8(%ebp)
            list_del(&(p->page_link));
c01062c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01062ca:	83 c0 0c             	add    $0xc,%eax
c01062cd:	89 45 d8             	mov    %eax,-0x28(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c01062d0:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01062d3:	8b 40 04             	mov    0x4(%eax),%eax
c01062d6:	8b 55 d8             	mov    -0x28(%ebp),%edx
c01062d9:	8b 12                	mov    (%edx),%edx
c01062db:	89 55 9c             	mov    %edx,-0x64(%ebp)
c01062de:	89 45 98             	mov    %eax,-0x68(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c01062e1:	8b 45 9c             	mov    -0x64(%ebp),%eax
c01062e4:	8b 55 98             	mov    -0x68(%ebp),%edx
c01062e7:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c01062ea:	8b 45 98             	mov    -0x68(%ebp),%eax
c01062ed:	8b 55 9c             	mov    -0x64(%ebp),%edx
c01062f0:	89 10                	mov    %edx,(%eax)
    }
    base->property = n;
    SetPageProperty(base);
    // try to extend free block
    list_entry_t *le = list_next(&free_list);
    while (le != &free_list) {
c01062f2:	81 7d f0 a4 31 1b c0 	cmpl   $0xc01b31a4,-0x10(%ebp)
c01062f9:	0f 85 e5 fe ff ff    	jne    c01061e4 <default_free_pages+0x10f>
c01062ff:	c7 45 d0 a4 31 1b c0 	movl   $0xc01b31a4,-0x30(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0106306:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0106309:	8b 40 04             	mov    0x4(%eax),%eax
            base = p;
            list_del(&(p->page_link));
        }
    }
    // search for a place to add page into list
    le = list_next(&free_list);
c010630c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    while (le != &free_list) {
c010630f:	eb 20                	jmp    c0106331 <default_free_pages+0x25c>
        p = le2page(le, page_link);
c0106311:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106314:	83 e8 0c             	sub    $0xc,%eax
c0106317:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (p > base) {
c010631a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010631d:	3b 45 08             	cmp    0x8(%ebp),%eax
c0106320:	77 1a                	ja     c010633c <default_free_pages+0x267>
c0106322:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106325:	89 45 c8             	mov    %eax,-0x38(%ebp)
c0106328:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010632b:	8b 40 04             	mov    0x4(%eax),%eax
            break;
        }
        le = list_next(le);
c010632e:	89 45 f0             	mov    %eax,-0x10(%ebp)
            list_del(&(p->page_link));
        }
    }
    // search for a place to add page into list
    le = list_next(&free_list);
    while (le != &free_list) {
c0106331:	81 7d f0 a4 31 1b c0 	cmpl   $0xc01b31a4,-0x10(%ebp)
c0106338:	75 d7                	jne    c0106311 <default_free_pages+0x23c>
c010633a:	eb 01                	jmp    c010633d <default_free_pages+0x268>
        p = le2page(le, page_link);
        if (p > base) {
            break;
c010633c:	90                   	nop
        }
        le = list_next(le);
    }
    nr_free += n;
c010633d:	8b 15 ac 31 1b c0    	mov    0xc01b31ac,%edx
c0106343:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106346:	01 d0                	add    %edx,%eax
c0106348:	a3 ac 31 1b c0       	mov    %eax,0xc01b31ac
    list_add_before(le, &(base->page_link)); 
c010634d:	8b 45 08             	mov    0x8(%ebp),%eax
c0106350:	8d 50 0c             	lea    0xc(%eax),%edx
c0106353:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106356:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c0106359:	89 55 90             	mov    %edx,-0x70(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c010635c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010635f:	8b 00                	mov    (%eax),%eax
c0106361:	8b 55 90             	mov    -0x70(%ebp),%edx
c0106364:	89 55 8c             	mov    %edx,-0x74(%ebp)
c0106367:	89 45 88             	mov    %eax,-0x78(%ebp)
c010636a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010636d:	89 45 84             	mov    %eax,-0x7c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0106370:	8b 45 84             	mov    -0x7c(%ebp),%eax
c0106373:	8b 55 8c             	mov    -0x74(%ebp),%edx
c0106376:	89 10                	mov    %edx,(%eax)
c0106378:	8b 45 84             	mov    -0x7c(%ebp),%eax
c010637b:	8b 10                	mov    (%eax),%edx
c010637d:	8b 45 88             	mov    -0x78(%ebp),%eax
c0106380:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0106383:	8b 45 8c             	mov    -0x74(%ebp),%eax
c0106386:	8b 55 84             	mov    -0x7c(%ebp),%edx
c0106389:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010638c:	8b 45 8c             	mov    -0x74(%ebp),%eax
c010638f:	8b 55 88             	mov    -0x78(%ebp),%edx
c0106392:	89 10                	mov    %edx,(%eax)
}
c0106394:	90                   	nop
c0106395:	c9                   	leave  
c0106396:	c3                   	ret    

c0106397 <default_nr_free_pages>:


static size_t
default_nr_free_pages(void) {
c0106397:	55                   	push   %ebp
c0106398:	89 e5                	mov    %esp,%ebp
    return nr_free;
c010639a:	a1 ac 31 1b c0       	mov    0xc01b31ac,%eax
}
c010639f:	5d                   	pop    %ebp
c01063a0:	c3                   	ret    

c01063a1 <basic_check>:

static void
basic_check(void) {
c01063a1:	55                   	push   %ebp
c01063a2:	89 e5                	mov    %esp,%ebp
c01063a4:	83 ec 38             	sub    $0x38,%esp
    struct Page *p0, *p1, *p2;
    p0 = p1 = p2 = NULL;
c01063a7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01063ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01063b1:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01063b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01063b7:	89 45 ec             	mov    %eax,-0x14(%ebp)
    assert((p0 = alloc_page()) != NULL);
c01063ba:	83 ec 0c             	sub    $0xc,%esp
c01063bd:	6a 01                	push   $0x1
c01063bf:	e8 c7 0c 00 00       	call   c010708b <alloc_pages>
c01063c4:	83 c4 10             	add    $0x10,%esp
c01063c7:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01063ca:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01063ce:	75 19                	jne    c01063e9 <basic_check+0x48>
c01063d0:	68 11 cf 10 c0       	push   $0xc010cf11
c01063d5:	68 ae ce 10 c0       	push   $0xc010ceae
c01063da:	68 d1 00 00 00       	push   $0xd1
c01063df:	68 c3 ce 10 c0       	push   $0xc010cec3
c01063e4:	e8 14 a0 ff ff       	call   c01003fd <__panic>
    assert((p1 = alloc_page()) != NULL);
c01063e9:	83 ec 0c             	sub    $0xc,%esp
c01063ec:	6a 01                	push   $0x1
c01063ee:	e8 98 0c 00 00       	call   c010708b <alloc_pages>
c01063f3:	83 c4 10             	add    $0x10,%esp
c01063f6:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01063f9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01063fd:	75 19                	jne    c0106418 <basic_check+0x77>
c01063ff:	68 2d cf 10 c0       	push   $0xc010cf2d
c0106404:	68 ae ce 10 c0       	push   $0xc010ceae
c0106409:	68 d2 00 00 00       	push   $0xd2
c010640e:	68 c3 ce 10 c0       	push   $0xc010cec3
c0106413:	e8 e5 9f ff ff       	call   c01003fd <__panic>
    assert((p2 = alloc_page()) != NULL);
c0106418:	83 ec 0c             	sub    $0xc,%esp
c010641b:	6a 01                	push   $0x1
c010641d:	e8 69 0c 00 00       	call   c010708b <alloc_pages>
c0106422:	83 c4 10             	add    $0x10,%esp
c0106425:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0106428:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010642c:	75 19                	jne    c0106447 <basic_check+0xa6>
c010642e:	68 49 cf 10 c0       	push   $0xc010cf49
c0106433:	68 ae ce 10 c0       	push   $0xc010ceae
c0106438:	68 d3 00 00 00       	push   $0xd3
c010643d:	68 c3 ce 10 c0       	push   $0xc010cec3
c0106442:	e8 b6 9f ff ff       	call   c01003fd <__panic>

    assert(p0 != p1 && p0 != p2 && p1 != p2);
c0106447:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010644a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010644d:	74 10                	je     c010645f <basic_check+0xbe>
c010644f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106452:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0106455:	74 08                	je     c010645f <basic_check+0xbe>
c0106457:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010645a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010645d:	75 19                	jne    c0106478 <basic_check+0xd7>
c010645f:	68 68 cf 10 c0       	push   $0xc010cf68
c0106464:	68 ae ce 10 c0       	push   $0xc010ceae
c0106469:	68 d5 00 00 00       	push   $0xd5
c010646e:	68 c3 ce 10 c0       	push   $0xc010cec3
c0106473:	e8 85 9f ff ff       	call   c01003fd <__panic>
    assert(page_ref(p0) == 0 && page_ref(p1) == 0 && page_ref(p2) == 0);
c0106478:	83 ec 0c             	sub    $0xc,%esp
c010647b:	ff 75 ec             	pushl  -0x14(%ebp)
c010647e:	e8 61 f9 ff ff       	call   c0105de4 <page_ref>
c0106483:	83 c4 10             	add    $0x10,%esp
c0106486:	85 c0                	test   %eax,%eax
c0106488:	75 24                	jne    c01064ae <basic_check+0x10d>
c010648a:	83 ec 0c             	sub    $0xc,%esp
c010648d:	ff 75 f0             	pushl  -0x10(%ebp)
c0106490:	e8 4f f9 ff ff       	call   c0105de4 <page_ref>
c0106495:	83 c4 10             	add    $0x10,%esp
c0106498:	85 c0                	test   %eax,%eax
c010649a:	75 12                	jne    c01064ae <basic_check+0x10d>
c010649c:	83 ec 0c             	sub    $0xc,%esp
c010649f:	ff 75 f4             	pushl  -0xc(%ebp)
c01064a2:	e8 3d f9 ff ff       	call   c0105de4 <page_ref>
c01064a7:	83 c4 10             	add    $0x10,%esp
c01064aa:	85 c0                	test   %eax,%eax
c01064ac:	74 19                	je     c01064c7 <basic_check+0x126>
c01064ae:	68 8c cf 10 c0       	push   $0xc010cf8c
c01064b3:	68 ae ce 10 c0       	push   $0xc010ceae
c01064b8:	68 d6 00 00 00       	push   $0xd6
c01064bd:	68 c3 ce 10 c0       	push   $0xc010cec3
c01064c2:	e8 36 9f ff ff       	call   c01003fd <__panic>

    assert(page2pa(p0) < npage * PGSIZE);
c01064c7:	83 ec 0c             	sub    $0xc,%esp
c01064ca:	ff 75 ec             	pushl  -0x14(%ebp)
c01064cd:	e8 ff f8 ff ff       	call   c0105dd1 <page2pa>
c01064d2:	83 c4 10             	add    $0x10,%esp
c01064d5:	89 c2                	mov    %eax,%edx
c01064d7:	a1 80 0f 1b c0       	mov    0xc01b0f80,%eax
c01064dc:	c1 e0 0c             	shl    $0xc,%eax
c01064df:	39 c2                	cmp    %eax,%edx
c01064e1:	72 19                	jb     c01064fc <basic_check+0x15b>
c01064e3:	68 c8 cf 10 c0       	push   $0xc010cfc8
c01064e8:	68 ae ce 10 c0       	push   $0xc010ceae
c01064ed:	68 d8 00 00 00       	push   $0xd8
c01064f2:	68 c3 ce 10 c0       	push   $0xc010cec3
c01064f7:	e8 01 9f ff ff       	call   c01003fd <__panic>
    assert(page2pa(p1) < npage * PGSIZE);
c01064fc:	83 ec 0c             	sub    $0xc,%esp
c01064ff:	ff 75 f0             	pushl  -0x10(%ebp)
c0106502:	e8 ca f8 ff ff       	call   c0105dd1 <page2pa>
c0106507:	83 c4 10             	add    $0x10,%esp
c010650a:	89 c2                	mov    %eax,%edx
c010650c:	a1 80 0f 1b c0       	mov    0xc01b0f80,%eax
c0106511:	c1 e0 0c             	shl    $0xc,%eax
c0106514:	39 c2                	cmp    %eax,%edx
c0106516:	72 19                	jb     c0106531 <basic_check+0x190>
c0106518:	68 e5 cf 10 c0       	push   $0xc010cfe5
c010651d:	68 ae ce 10 c0       	push   $0xc010ceae
c0106522:	68 d9 00 00 00       	push   $0xd9
c0106527:	68 c3 ce 10 c0       	push   $0xc010cec3
c010652c:	e8 cc 9e ff ff       	call   c01003fd <__panic>
    assert(page2pa(p2) < npage * PGSIZE);
c0106531:	83 ec 0c             	sub    $0xc,%esp
c0106534:	ff 75 f4             	pushl  -0xc(%ebp)
c0106537:	e8 95 f8 ff ff       	call   c0105dd1 <page2pa>
c010653c:	83 c4 10             	add    $0x10,%esp
c010653f:	89 c2                	mov    %eax,%edx
c0106541:	a1 80 0f 1b c0       	mov    0xc01b0f80,%eax
c0106546:	c1 e0 0c             	shl    $0xc,%eax
c0106549:	39 c2                	cmp    %eax,%edx
c010654b:	72 19                	jb     c0106566 <basic_check+0x1c5>
c010654d:	68 02 d0 10 c0       	push   $0xc010d002
c0106552:	68 ae ce 10 c0       	push   $0xc010ceae
c0106557:	68 da 00 00 00       	push   $0xda
c010655c:	68 c3 ce 10 c0       	push   $0xc010cec3
c0106561:	e8 97 9e ff ff       	call   c01003fd <__panic>

    list_entry_t free_list_store = free_list;
c0106566:	a1 a4 31 1b c0       	mov    0xc01b31a4,%eax
c010656b:	8b 15 a8 31 1b c0    	mov    0xc01b31a8,%edx
c0106571:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0106574:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0106577:	c7 45 e4 a4 31 1b c0 	movl   $0xc01b31a4,-0x1c(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010657e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106581:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106584:	89 50 04             	mov    %edx,0x4(%eax)
c0106587:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010658a:	8b 50 04             	mov    0x4(%eax),%edx
c010658d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106590:	89 10                	mov    %edx,(%eax)
c0106592:	c7 45 d8 a4 31 1b c0 	movl   $0xc01b31a4,-0x28(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0106599:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010659c:	8b 40 04             	mov    0x4(%eax),%eax
c010659f:	39 45 d8             	cmp    %eax,-0x28(%ebp)
c01065a2:	0f 94 c0             	sete   %al
c01065a5:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c01065a8:	85 c0                	test   %eax,%eax
c01065aa:	75 19                	jne    c01065c5 <basic_check+0x224>
c01065ac:	68 1f d0 10 c0       	push   $0xc010d01f
c01065b1:	68 ae ce 10 c0       	push   $0xc010ceae
c01065b6:	68 de 00 00 00       	push   $0xde
c01065bb:	68 c3 ce 10 c0       	push   $0xc010cec3
c01065c0:	e8 38 9e ff ff       	call   c01003fd <__panic>

    unsigned int nr_free_store = nr_free;
c01065c5:	a1 ac 31 1b c0       	mov    0xc01b31ac,%eax
c01065ca:	89 45 e0             	mov    %eax,-0x20(%ebp)
    nr_free = 0;
c01065cd:	c7 05 ac 31 1b c0 00 	movl   $0x0,0xc01b31ac
c01065d4:	00 00 00 

    assert(alloc_page() == NULL);
c01065d7:	83 ec 0c             	sub    $0xc,%esp
c01065da:	6a 01                	push   $0x1
c01065dc:	e8 aa 0a 00 00       	call   c010708b <alloc_pages>
c01065e1:	83 c4 10             	add    $0x10,%esp
c01065e4:	85 c0                	test   %eax,%eax
c01065e6:	74 19                	je     c0106601 <basic_check+0x260>
c01065e8:	68 36 d0 10 c0       	push   $0xc010d036
c01065ed:	68 ae ce 10 c0       	push   $0xc010ceae
c01065f2:	68 e3 00 00 00       	push   $0xe3
c01065f7:	68 c3 ce 10 c0       	push   $0xc010cec3
c01065fc:	e8 fc 9d ff ff       	call   c01003fd <__panic>

    free_page(p0);
c0106601:	83 ec 08             	sub    $0x8,%esp
c0106604:	6a 01                	push   $0x1
c0106606:	ff 75 ec             	pushl  -0x14(%ebp)
c0106609:	e8 e9 0a 00 00       	call   c01070f7 <free_pages>
c010660e:	83 c4 10             	add    $0x10,%esp
    free_page(p1);
c0106611:	83 ec 08             	sub    $0x8,%esp
c0106614:	6a 01                	push   $0x1
c0106616:	ff 75 f0             	pushl  -0x10(%ebp)
c0106619:	e8 d9 0a 00 00       	call   c01070f7 <free_pages>
c010661e:	83 c4 10             	add    $0x10,%esp
    free_page(p2);
c0106621:	83 ec 08             	sub    $0x8,%esp
c0106624:	6a 01                	push   $0x1
c0106626:	ff 75 f4             	pushl  -0xc(%ebp)
c0106629:	e8 c9 0a 00 00       	call   c01070f7 <free_pages>
c010662e:	83 c4 10             	add    $0x10,%esp
    assert(nr_free == 3);
c0106631:	a1 ac 31 1b c0       	mov    0xc01b31ac,%eax
c0106636:	83 f8 03             	cmp    $0x3,%eax
c0106639:	74 19                	je     c0106654 <basic_check+0x2b3>
c010663b:	68 4b d0 10 c0       	push   $0xc010d04b
c0106640:	68 ae ce 10 c0       	push   $0xc010ceae
c0106645:	68 e8 00 00 00       	push   $0xe8
c010664a:	68 c3 ce 10 c0       	push   $0xc010cec3
c010664f:	e8 a9 9d ff ff       	call   c01003fd <__panic>

    assert((p0 = alloc_page()) != NULL);
c0106654:	83 ec 0c             	sub    $0xc,%esp
c0106657:	6a 01                	push   $0x1
c0106659:	e8 2d 0a 00 00       	call   c010708b <alloc_pages>
c010665e:	83 c4 10             	add    $0x10,%esp
c0106661:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0106664:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0106668:	75 19                	jne    c0106683 <basic_check+0x2e2>
c010666a:	68 11 cf 10 c0       	push   $0xc010cf11
c010666f:	68 ae ce 10 c0       	push   $0xc010ceae
c0106674:	68 ea 00 00 00       	push   $0xea
c0106679:	68 c3 ce 10 c0       	push   $0xc010cec3
c010667e:	e8 7a 9d ff ff       	call   c01003fd <__panic>
    assert((p1 = alloc_page()) != NULL);
c0106683:	83 ec 0c             	sub    $0xc,%esp
c0106686:	6a 01                	push   $0x1
c0106688:	e8 fe 09 00 00       	call   c010708b <alloc_pages>
c010668d:	83 c4 10             	add    $0x10,%esp
c0106690:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106693:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106697:	75 19                	jne    c01066b2 <basic_check+0x311>
c0106699:	68 2d cf 10 c0       	push   $0xc010cf2d
c010669e:	68 ae ce 10 c0       	push   $0xc010ceae
c01066a3:	68 eb 00 00 00       	push   $0xeb
c01066a8:	68 c3 ce 10 c0       	push   $0xc010cec3
c01066ad:	e8 4b 9d ff ff       	call   c01003fd <__panic>
    assert((p2 = alloc_page()) != NULL);
c01066b2:	83 ec 0c             	sub    $0xc,%esp
c01066b5:	6a 01                	push   $0x1
c01066b7:	e8 cf 09 00 00       	call   c010708b <alloc_pages>
c01066bc:	83 c4 10             	add    $0x10,%esp
c01066bf:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01066c2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01066c6:	75 19                	jne    c01066e1 <basic_check+0x340>
c01066c8:	68 49 cf 10 c0       	push   $0xc010cf49
c01066cd:	68 ae ce 10 c0       	push   $0xc010ceae
c01066d2:	68 ec 00 00 00       	push   $0xec
c01066d7:	68 c3 ce 10 c0       	push   $0xc010cec3
c01066dc:	e8 1c 9d ff ff       	call   c01003fd <__panic>

    assert(alloc_page() == NULL);
c01066e1:	83 ec 0c             	sub    $0xc,%esp
c01066e4:	6a 01                	push   $0x1
c01066e6:	e8 a0 09 00 00       	call   c010708b <alloc_pages>
c01066eb:	83 c4 10             	add    $0x10,%esp
c01066ee:	85 c0                	test   %eax,%eax
c01066f0:	74 19                	je     c010670b <basic_check+0x36a>
c01066f2:	68 36 d0 10 c0       	push   $0xc010d036
c01066f7:	68 ae ce 10 c0       	push   $0xc010ceae
c01066fc:	68 ee 00 00 00       	push   $0xee
c0106701:	68 c3 ce 10 c0       	push   $0xc010cec3
c0106706:	e8 f2 9c ff ff       	call   c01003fd <__panic>

    free_page(p0);
c010670b:	83 ec 08             	sub    $0x8,%esp
c010670e:	6a 01                	push   $0x1
c0106710:	ff 75 ec             	pushl  -0x14(%ebp)
c0106713:	e8 df 09 00 00       	call   c01070f7 <free_pages>
c0106718:	83 c4 10             	add    $0x10,%esp
c010671b:	c7 45 e8 a4 31 1b c0 	movl   $0xc01b31a4,-0x18(%ebp)
c0106722:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106725:	8b 40 04             	mov    0x4(%eax),%eax
c0106728:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c010672b:	0f 94 c0             	sete   %al
c010672e:	0f b6 c0             	movzbl %al,%eax
    assert(!list_empty(&free_list));
c0106731:	85 c0                	test   %eax,%eax
c0106733:	74 19                	je     c010674e <basic_check+0x3ad>
c0106735:	68 58 d0 10 c0       	push   $0xc010d058
c010673a:	68 ae ce 10 c0       	push   $0xc010ceae
c010673f:	68 f1 00 00 00       	push   $0xf1
c0106744:	68 c3 ce 10 c0       	push   $0xc010cec3
c0106749:	e8 af 9c ff ff       	call   c01003fd <__panic>

    struct Page *p;
    assert((p = alloc_page()) == p0);
c010674e:	83 ec 0c             	sub    $0xc,%esp
c0106751:	6a 01                	push   $0x1
c0106753:	e8 33 09 00 00       	call   c010708b <alloc_pages>
c0106758:	83 c4 10             	add    $0x10,%esp
c010675b:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010675e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106761:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0106764:	74 19                	je     c010677f <basic_check+0x3de>
c0106766:	68 70 d0 10 c0       	push   $0xc010d070
c010676b:	68 ae ce 10 c0       	push   $0xc010ceae
c0106770:	68 f4 00 00 00       	push   $0xf4
c0106775:	68 c3 ce 10 c0       	push   $0xc010cec3
c010677a:	e8 7e 9c ff ff       	call   c01003fd <__panic>
    assert(alloc_page() == NULL);
c010677f:	83 ec 0c             	sub    $0xc,%esp
c0106782:	6a 01                	push   $0x1
c0106784:	e8 02 09 00 00       	call   c010708b <alloc_pages>
c0106789:	83 c4 10             	add    $0x10,%esp
c010678c:	85 c0                	test   %eax,%eax
c010678e:	74 19                	je     c01067a9 <basic_check+0x408>
c0106790:	68 36 d0 10 c0       	push   $0xc010d036
c0106795:	68 ae ce 10 c0       	push   $0xc010ceae
c010679a:	68 f5 00 00 00       	push   $0xf5
c010679f:	68 c3 ce 10 c0       	push   $0xc010cec3
c01067a4:	e8 54 9c ff ff       	call   c01003fd <__panic>

    assert(nr_free == 0);
c01067a9:	a1 ac 31 1b c0       	mov    0xc01b31ac,%eax
c01067ae:	85 c0                	test   %eax,%eax
c01067b0:	74 19                	je     c01067cb <basic_check+0x42a>
c01067b2:	68 89 d0 10 c0       	push   $0xc010d089
c01067b7:	68 ae ce 10 c0       	push   $0xc010ceae
c01067bc:	68 f7 00 00 00       	push   $0xf7
c01067c1:	68 c3 ce 10 c0       	push   $0xc010cec3
c01067c6:	e8 32 9c ff ff       	call   c01003fd <__panic>
    free_list = free_list_store;
c01067cb:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01067ce:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01067d1:	a3 a4 31 1b c0       	mov    %eax,0xc01b31a4
c01067d6:	89 15 a8 31 1b c0    	mov    %edx,0xc01b31a8
    nr_free = nr_free_store;
c01067dc:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01067df:	a3 ac 31 1b c0       	mov    %eax,0xc01b31ac

    free_page(p);
c01067e4:	83 ec 08             	sub    $0x8,%esp
c01067e7:	6a 01                	push   $0x1
c01067e9:	ff 75 dc             	pushl  -0x24(%ebp)
c01067ec:	e8 06 09 00 00       	call   c01070f7 <free_pages>
c01067f1:	83 c4 10             	add    $0x10,%esp
    free_page(p1);
c01067f4:	83 ec 08             	sub    $0x8,%esp
c01067f7:	6a 01                	push   $0x1
c01067f9:	ff 75 f0             	pushl  -0x10(%ebp)
c01067fc:	e8 f6 08 00 00       	call   c01070f7 <free_pages>
c0106801:	83 c4 10             	add    $0x10,%esp
    free_page(p2);
c0106804:	83 ec 08             	sub    $0x8,%esp
c0106807:	6a 01                	push   $0x1
c0106809:	ff 75 f4             	pushl  -0xc(%ebp)
c010680c:	e8 e6 08 00 00       	call   c01070f7 <free_pages>
c0106811:	83 c4 10             	add    $0x10,%esp
}
c0106814:	90                   	nop
c0106815:	c9                   	leave  
c0106816:	c3                   	ret    

c0106817 <default_check>:

// LAB2: below code is used to check the first fit allocation algorithm (your EXERCISE 1) 
// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
static void
default_check(void) {
c0106817:	55                   	push   %ebp
c0106818:	89 e5                	mov    %esp,%ebp
c010681a:	81 ec 88 00 00 00    	sub    $0x88,%esp
    int count = 0, total = 0;
c0106820:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0106827:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    list_entry_t *le = &free_list;
c010682e:	c7 45 ec a4 31 1b c0 	movl   $0xc01b31a4,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c0106835:	eb 60                	jmp    c0106897 <default_check+0x80>
        struct Page *p = le2page(le, page_link);
c0106837:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010683a:	83 e8 0c             	sub    $0xc,%eax
c010683d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        assert(PageProperty(p));
c0106840:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106843:	83 c0 04             	add    $0x4,%eax
c0106846:	c7 45 b0 01 00 00 00 	movl   $0x1,-0x50(%ebp)
c010684d:	89 45 ac             	mov    %eax,-0x54(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0106850:	8b 45 ac             	mov    -0x54(%ebp),%eax
c0106853:	8b 55 b0             	mov    -0x50(%ebp),%edx
c0106856:	0f a3 10             	bt     %edx,(%eax)
c0106859:	19 c0                	sbb    %eax,%eax
c010685b:	89 45 a8             	mov    %eax,-0x58(%ebp)
    return oldbit != 0;
c010685e:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
c0106862:	0f 95 c0             	setne  %al
c0106865:	0f b6 c0             	movzbl %al,%eax
c0106868:	85 c0                	test   %eax,%eax
c010686a:	75 19                	jne    c0106885 <default_check+0x6e>
c010686c:	68 96 d0 10 c0       	push   $0xc010d096
c0106871:	68 ae ce 10 c0       	push   $0xc010ceae
c0106876:	68 08 01 00 00       	push   $0x108
c010687b:	68 c3 ce 10 c0       	push   $0xc010cec3
c0106880:	e8 78 9b ff ff       	call   c01003fd <__panic>
        count ++, total += p->property;
c0106885:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0106889:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010688c:	8b 50 08             	mov    0x8(%eax),%edx
c010688f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106892:	01 d0                	add    %edx,%eax
c0106894:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106897:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010689a:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010689d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01068a0:	8b 40 04             	mov    0x4(%eax),%eax
// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
static void
default_check(void) {
    int count = 0, total = 0;
    list_entry_t *le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c01068a3:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01068a6:	81 7d ec a4 31 1b c0 	cmpl   $0xc01b31a4,-0x14(%ebp)
c01068ad:	75 88                	jne    c0106837 <default_check+0x20>
        struct Page *p = le2page(le, page_link);
        assert(PageProperty(p));
        count ++, total += p->property;
    }
    assert(total == nr_free_pages());
c01068af:	e8 78 08 00 00       	call   c010712c <nr_free_pages>
c01068b4:	89 c2                	mov    %eax,%edx
c01068b6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01068b9:	39 c2                	cmp    %eax,%edx
c01068bb:	74 19                	je     c01068d6 <default_check+0xbf>
c01068bd:	68 a6 d0 10 c0       	push   $0xc010d0a6
c01068c2:	68 ae ce 10 c0       	push   $0xc010ceae
c01068c7:	68 0b 01 00 00       	push   $0x10b
c01068cc:	68 c3 ce 10 c0       	push   $0xc010cec3
c01068d1:	e8 27 9b ff ff       	call   c01003fd <__panic>

    basic_check();
c01068d6:	e8 c6 fa ff ff       	call   c01063a1 <basic_check>

    struct Page *p0 = alloc_pages(5), *p1, *p2;
c01068db:	83 ec 0c             	sub    $0xc,%esp
c01068de:	6a 05                	push   $0x5
c01068e0:	e8 a6 07 00 00       	call   c010708b <alloc_pages>
c01068e5:	83 c4 10             	add    $0x10,%esp
c01068e8:	89 45 dc             	mov    %eax,-0x24(%ebp)
    assert(p0 != NULL);
c01068eb:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c01068ef:	75 19                	jne    c010690a <default_check+0xf3>
c01068f1:	68 bf d0 10 c0       	push   $0xc010d0bf
c01068f6:	68 ae ce 10 c0       	push   $0xc010ceae
c01068fb:	68 10 01 00 00       	push   $0x110
c0106900:	68 c3 ce 10 c0       	push   $0xc010cec3
c0106905:	e8 f3 9a ff ff       	call   c01003fd <__panic>
    assert(!PageProperty(p0));
c010690a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010690d:	83 c0 04             	add    $0x4,%eax
c0106910:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
c0106917:	89 45 a4             	mov    %eax,-0x5c(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010691a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c010691d:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0106920:	0f a3 10             	bt     %edx,(%eax)
c0106923:	19 c0                	sbb    %eax,%eax
c0106925:	89 45 a0             	mov    %eax,-0x60(%ebp)
    return oldbit != 0;
c0106928:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
c010692c:	0f 95 c0             	setne  %al
c010692f:	0f b6 c0             	movzbl %al,%eax
c0106932:	85 c0                	test   %eax,%eax
c0106934:	74 19                	je     c010694f <default_check+0x138>
c0106936:	68 ca d0 10 c0       	push   $0xc010d0ca
c010693b:	68 ae ce 10 c0       	push   $0xc010ceae
c0106940:	68 11 01 00 00       	push   $0x111
c0106945:	68 c3 ce 10 c0       	push   $0xc010cec3
c010694a:	e8 ae 9a ff ff       	call   c01003fd <__panic>

    list_entry_t free_list_store = free_list;
c010694f:	a1 a4 31 1b c0       	mov    0xc01b31a4,%eax
c0106954:	8b 15 a8 31 1b c0    	mov    0xc01b31a8,%edx
c010695a:	89 45 80             	mov    %eax,-0x80(%ebp)
c010695d:	89 55 84             	mov    %edx,-0x7c(%ebp)
c0106960:	c7 45 d0 a4 31 1b c0 	movl   $0xc01b31a4,-0x30(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0106967:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010696a:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010696d:	89 50 04             	mov    %edx,0x4(%eax)
c0106970:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0106973:	8b 50 04             	mov    0x4(%eax),%edx
c0106976:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0106979:	89 10                	mov    %edx,(%eax)
c010697b:	c7 45 d8 a4 31 1b c0 	movl   $0xc01b31a4,-0x28(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0106982:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0106985:	8b 40 04             	mov    0x4(%eax),%eax
c0106988:	39 45 d8             	cmp    %eax,-0x28(%ebp)
c010698b:	0f 94 c0             	sete   %al
c010698e:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c0106991:	85 c0                	test   %eax,%eax
c0106993:	75 19                	jne    c01069ae <default_check+0x197>
c0106995:	68 1f d0 10 c0       	push   $0xc010d01f
c010699a:	68 ae ce 10 c0       	push   $0xc010ceae
c010699f:	68 15 01 00 00       	push   $0x115
c01069a4:	68 c3 ce 10 c0       	push   $0xc010cec3
c01069a9:	e8 4f 9a ff ff       	call   c01003fd <__panic>
    assert(alloc_page() == NULL);
c01069ae:	83 ec 0c             	sub    $0xc,%esp
c01069b1:	6a 01                	push   $0x1
c01069b3:	e8 d3 06 00 00       	call   c010708b <alloc_pages>
c01069b8:	83 c4 10             	add    $0x10,%esp
c01069bb:	85 c0                	test   %eax,%eax
c01069bd:	74 19                	je     c01069d8 <default_check+0x1c1>
c01069bf:	68 36 d0 10 c0       	push   $0xc010d036
c01069c4:	68 ae ce 10 c0       	push   $0xc010ceae
c01069c9:	68 16 01 00 00       	push   $0x116
c01069ce:	68 c3 ce 10 c0       	push   $0xc010cec3
c01069d3:	e8 25 9a ff ff       	call   c01003fd <__panic>

    unsigned int nr_free_store = nr_free;
c01069d8:	a1 ac 31 1b c0       	mov    0xc01b31ac,%eax
c01069dd:	89 45 cc             	mov    %eax,-0x34(%ebp)
    nr_free = 0;
c01069e0:	c7 05 ac 31 1b c0 00 	movl   $0x0,0xc01b31ac
c01069e7:	00 00 00 

    free_pages(p0 + 2, 3);
c01069ea:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01069ed:	83 c0 40             	add    $0x40,%eax
c01069f0:	83 ec 08             	sub    $0x8,%esp
c01069f3:	6a 03                	push   $0x3
c01069f5:	50                   	push   %eax
c01069f6:	e8 fc 06 00 00       	call   c01070f7 <free_pages>
c01069fb:	83 c4 10             	add    $0x10,%esp
    assert(alloc_pages(4) == NULL);
c01069fe:	83 ec 0c             	sub    $0xc,%esp
c0106a01:	6a 04                	push   $0x4
c0106a03:	e8 83 06 00 00       	call   c010708b <alloc_pages>
c0106a08:	83 c4 10             	add    $0x10,%esp
c0106a0b:	85 c0                	test   %eax,%eax
c0106a0d:	74 19                	je     c0106a28 <default_check+0x211>
c0106a0f:	68 dc d0 10 c0       	push   $0xc010d0dc
c0106a14:	68 ae ce 10 c0       	push   $0xc010ceae
c0106a19:	68 1c 01 00 00       	push   $0x11c
c0106a1e:	68 c3 ce 10 c0       	push   $0xc010cec3
c0106a23:	e8 d5 99 ff ff       	call   c01003fd <__panic>
    assert(PageProperty(p0 + 2) && p0[2].property == 3);
c0106a28:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106a2b:	83 c0 40             	add    $0x40,%eax
c0106a2e:	83 c0 04             	add    $0x4,%eax
c0106a31:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
c0106a38:	89 45 9c             	mov    %eax,-0x64(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0106a3b:	8b 45 9c             	mov    -0x64(%ebp),%eax
c0106a3e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0106a41:	0f a3 10             	bt     %edx,(%eax)
c0106a44:	19 c0                	sbb    %eax,%eax
c0106a46:	89 45 98             	mov    %eax,-0x68(%ebp)
    return oldbit != 0;
c0106a49:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
c0106a4d:	0f 95 c0             	setne  %al
c0106a50:	0f b6 c0             	movzbl %al,%eax
c0106a53:	85 c0                	test   %eax,%eax
c0106a55:	74 0e                	je     c0106a65 <default_check+0x24e>
c0106a57:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106a5a:	83 c0 40             	add    $0x40,%eax
c0106a5d:	8b 40 08             	mov    0x8(%eax),%eax
c0106a60:	83 f8 03             	cmp    $0x3,%eax
c0106a63:	74 19                	je     c0106a7e <default_check+0x267>
c0106a65:	68 f4 d0 10 c0       	push   $0xc010d0f4
c0106a6a:	68 ae ce 10 c0       	push   $0xc010ceae
c0106a6f:	68 1d 01 00 00       	push   $0x11d
c0106a74:	68 c3 ce 10 c0       	push   $0xc010cec3
c0106a79:	e8 7f 99 ff ff       	call   c01003fd <__panic>
    assert((p1 = alloc_pages(3)) != NULL);
c0106a7e:	83 ec 0c             	sub    $0xc,%esp
c0106a81:	6a 03                	push   $0x3
c0106a83:	e8 03 06 00 00       	call   c010708b <alloc_pages>
c0106a88:	83 c4 10             	add    $0x10,%esp
c0106a8b:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c0106a8e:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
c0106a92:	75 19                	jne    c0106aad <default_check+0x296>
c0106a94:	68 20 d1 10 c0       	push   $0xc010d120
c0106a99:	68 ae ce 10 c0       	push   $0xc010ceae
c0106a9e:	68 1e 01 00 00       	push   $0x11e
c0106aa3:	68 c3 ce 10 c0       	push   $0xc010cec3
c0106aa8:	e8 50 99 ff ff       	call   c01003fd <__panic>
    assert(alloc_page() == NULL);
c0106aad:	83 ec 0c             	sub    $0xc,%esp
c0106ab0:	6a 01                	push   $0x1
c0106ab2:	e8 d4 05 00 00       	call   c010708b <alloc_pages>
c0106ab7:	83 c4 10             	add    $0x10,%esp
c0106aba:	85 c0                	test   %eax,%eax
c0106abc:	74 19                	je     c0106ad7 <default_check+0x2c0>
c0106abe:	68 36 d0 10 c0       	push   $0xc010d036
c0106ac3:	68 ae ce 10 c0       	push   $0xc010ceae
c0106ac8:	68 1f 01 00 00       	push   $0x11f
c0106acd:	68 c3 ce 10 c0       	push   $0xc010cec3
c0106ad2:	e8 26 99 ff ff       	call   c01003fd <__panic>
    assert(p0 + 2 == p1);
c0106ad7:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106ada:	83 c0 40             	add    $0x40,%eax
c0106add:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
c0106ae0:	74 19                	je     c0106afb <default_check+0x2e4>
c0106ae2:	68 3e d1 10 c0       	push   $0xc010d13e
c0106ae7:	68 ae ce 10 c0       	push   $0xc010ceae
c0106aec:	68 20 01 00 00       	push   $0x120
c0106af1:	68 c3 ce 10 c0       	push   $0xc010cec3
c0106af6:	e8 02 99 ff ff       	call   c01003fd <__panic>

    p2 = p0 + 1;
c0106afb:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106afe:	83 c0 20             	add    $0x20,%eax
c0106b01:	89 45 c0             	mov    %eax,-0x40(%ebp)
    free_page(p0);
c0106b04:	83 ec 08             	sub    $0x8,%esp
c0106b07:	6a 01                	push   $0x1
c0106b09:	ff 75 dc             	pushl  -0x24(%ebp)
c0106b0c:	e8 e6 05 00 00       	call   c01070f7 <free_pages>
c0106b11:	83 c4 10             	add    $0x10,%esp
    free_pages(p1, 3);
c0106b14:	83 ec 08             	sub    $0x8,%esp
c0106b17:	6a 03                	push   $0x3
c0106b19:	ff 75 c4             	pushl  -0x3c(%ebp)
c0106b1c:	e8 d6 05 00 00       	call   c01070f7 <free_pages>
c0106b21:	83 c4 10             	add    $0x10,%esp
    assert(PageProperty(p0) && p0->property == 1);
c0106b24:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106b27:	83 c0 04             	add    $0x4,%eax
c0106b2a:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
c0106b31:	89 45 94             	mov    %eax,-0x6c(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0106b34:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0106b37:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0106b3a:	0f a3 10             	bt     %edx,(%eax)
c0106b3d:	19 c0                	sbb    %eax,%eax
c0106b3f:	89 45 90             	mov    %eax,-0x70(%ebp)
    return oldbit != 0;
c0106b42:	83 7d 90 00          	cmpl   $0x0,-0x70(%ebp)
c0106b46:	0f 95 c0             	setne  %al
c0106b49:	0f b6 c0             	movzbl %al,%eax
c0106b4c:	85 c0                	test   %eax,%eax
c0106b4e:	74 0b                	je     c0106b5b <default_check+0x344>
c0106b50:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106b53:	8b 40 08             	mov    0x8(%eax),%eax
c0106b56:	83 f8 01             	cmp    $0x1,%eax
c0106b59:	74 19                	je     c0106b74 <default_check+0x35d>
c0106b5b:	68 4c d1 10 c0       	push   $0xc010d14c
c0106b60:	68 ae ce 10 c0       	push   $0xc010ceae
c0106b65:	68 25 01 00 00       	push   $0x125
c0106b6a:	68 c3 ce 10 c0       	push   $0xc010cec3
c0106b6f:	e8 89 98 ff ff       	call   c01003fd <__panic>
    assert(PageProperty(p1) && p1->property == 3);
c0106b74:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0106b77:	83 c0 04             	add    $0x4,%eax
c0106b7a:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
c0106b81:	89 45 8c             	mov    %eax,-0x74(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0106b84:	8b 45 8c             	mov    -0x74(%ebp),%eax
c0106b87:	8b 55 bc             	mov    -0x44(%ebp),%edx
c0106b8a:	0f a3 10             	bt     %edx,(%eax)
c0106b8d:	19 c0                	sbb    %eax,%eax
c0106b8f:	89 45 88             	mov    %eax,-0x78(%ebp)
    return oldbit != 0;
c0106b92:	83 7d 88 00          	cmpl   $0x0,-0x78(%ebp)
c0106b96:	0f 95 c0             	setne  %al
c0106b99:	0f b6 c0             	movzbl %al,%eax
c0106b9c:	85 c0                	test   %eax,%eax
c0106b9e:	74 0b                	je     c0106bab <default_check+0x394>
c0106ba0:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0106ba3:	8b 40 08             	mov    0x8(%eax),%eax
c0106ba6:	83 f8 03             	cmp    $0x3,%eax
c0106ba9:	74 19                	je     c0106bc4 <default_check+0x3ad>
c0106bab:	68 74 d1 10 c0       	push   $0xc010d174
c0106bb0:	68 ae ce 10 c0       	push   $0xc010ceae
c0106bb5:	68 26 01 00 00       	push   $0x126
c0106bba:	68 c3 ce 10 c0       	push   $0xc010cec3
c0106bbf:	e8 39 98 ff ff       	call   c01003fd <__panic>

    assert((p0 = alloc_page()) == p2 - 1);
c0106bc4:	83 ec 0c             	sub    $0xc,%esp
c0106bc7:	6a 01                	push   $0x1
c0106bc9:	e8 bd 04 00 00       	call   c010708b <alloc_pages>
c0106bce:	83 c4 10             	add    $0x10,%esp
c0106bd1:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0106bd4:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0106bd7:	83 e8 20             	sub    $0x20,%eax
c0106bda:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c0106bdd:	74 19                	je     c0106bf8 <default_check+0x3e1>
c0106bdf:	68 9a d1 10 c0       	push   $0xc010d19a
c0106be4:	68 ae ce 10 c0       	push   $0xc010ceae
c0106be9:	68 28 01 00 00       	push   $0x128
c0106bee:	68 c3 ce 10 c0       	push   $0xc010cec3
c0106bf3:	e8 05 98 ff ff       	call   c01003fd <__panic>
    free_page(p0);
c0106bf8:	83 ec 08             	sub    $0x8,%esp
c0106bfb:	6a 01                	push   $0x1
c0106bfd:	ff 75 dc             	pushl  -0x24(%ebp)
c0106c00:	e8 f2 04 00 00       	call   c01070f7 <free_pages>
c0106c05:	83 c4 10             	add    $0x10,%esp
    assert((p0 = alloc_pages(2)) == p2 + 1);
c0106c08:	83 ec 0c             	sub    $0xc,%esp
c0106c0b:	6a 02                	push   $0x2
c0106c0d:	e8 79 04 00 00       	call   c010708b <alloc_pages>
c0106c12:	83 c4 10             	add    $0x10,%esp
c0106c15:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0106c18:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0106c1b:	83 c0 20             	add    $0x20,%eax
c0106c1e:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c0106c21:	74 19                	je     c0106c3c <default_check+0x425>
c0106c23:	68 b8 d1 10 c0       	push   $0xc010d1b8
c0106c28:	68 ae ce 10 c0       	push   $0xc010ceae
c0106c2d:	68 2a 01 00 00       	push   $0x12a
c0106c32:	68 c3 ce 10 c0       	push   $0xc010cec3
c0106c37:	e8 c1 97 ff ff       	call   c01003fd <__panic>

    free_pages(p0, 2);
c0106c3c:	83 ec 08             	sub    $0x8,%esp
c0106c3f:	6a 02                	push   $0x2
c0106c41:	ff 75 dc             	pushl  -0x24(%ebp)
c0106c44:	e8 ae 04 00 00       	call   c01070f7 <free_pages>
c0106c49:	83 c4 10             	add    $0x10,%esp
    free_page(p2);
c0106c4c:	83 ec 08             	sub    $0x8,%esp
c0106c4f:	6a 01                	push   $0x1
c0106c51:	ff 75 c0             	pushl  -0x40(%ebp)
c0106c54:	e8 9e 04 00 00       	call   c01070f7 <free_pages>
c0106c59:	83 c4 10             	add    $0x10,%esp

    assert((p0 = alloc_pages(5)) != NULL);
c0106c5c:	83 ec 0c             	sub    $0xc,%esp
c0106c5f:	6a 05                	push   $0x5
c0106c61:	e8 25 04 00 00       	call   c010708b <alloc_pages>
c0106c66:	83 c4 10             	add    $0x10,%esp
c0106c69:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0106c6c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0106c70:	75 19                	jne    c0106c8b <default_check+0x474>
c0106c72:	68 d8 d1 10 c0       	push   $0xc010d1d8
c0106c77:	68 ae ce 10 c0       	push   $0xc010ceae
c0106c7c:	68 2f 01 00 00       	push   $0x12f
c0106c81:	68 c3 ce 10 c0       	push   $0xc010cec3
c0106c86:	e8 72 97 ff ff       	call   c01003fd <__panic>
    assert(alloc_page() == NULL);
c0106c8b:	83 ec 0c             	sub    $0xc,%esp
c0106c8e:	6a 01                	push   $0x1
c0106c90:	e8 f6 03 00 00       	call   c010708b <alloc_pages>
c0106c95:	83 c4 10             	add    $0x10,%esp
c0106c98:	85 c0                	test   %eax,%eax
c0106c9a:	74 19                	je     c0106cb5 <default_check+0x49e>
c0106c9c:	68 36 d0 10 c0       	push   $0xc010d036
c0106ca1:	68 ae ce 10 c0       	push   $0xc010ceae
c0106ca6:	68 30 01 00 00       	push   $0x130
c0106cab:	68 c3 ce 10 c0       	push   $0xc010cec3
c0106cb0:	e8 48 97 ff ff       	call   c01003fd <__panic>

    assert(nr_free == 0);
c0106cb5:	a1 ac 31 1b c0       	mov    0xc01b31ac,%eax
c0106cba:	85 c0                	test   %eax,%eax
c0106cbc:	74 19                	je     c0106cd7 <default_check+0x4c0>
c0106cbe:	68 89 d0 10 c0       	push   $0xc010d089
c0106cc3:	68 ae ce 10 c0       	push   $0xc010ceae
c0106cc8:	68 32 01 00 00       	push   $0x132
c0106ccd:	68 c3 ce 10 c0       	push   $0xc010cec3
c0106cd2:	e8 26 97 ff ff       	call   c01003fd <__panic>
    nr_free = nr_free_store;
c0106cd7:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0106cda:	a3 ac 31 1b c0       	mov    %eax,0xc01b31ac

    free_list = free_list_store;
c0106cdf:	8b 45 80             	mov    -0x80(%ebp),%eax
c0106ce2:	8b 55 84             	mov    -0x7c(%ebp),%edx
c0106ce5:	a3 a4 31 1b c0       	mov    %eax,0xc01b31a4
c0106cea:	89 15 a8 31 1b c0    	mov    %edx,0xc01b31a8
    free_pages(p0, 5);
c0106cf0:	83 ec 08             	sub    $0x8,%esp
c0106cf3:	6a 05                	push   $0x5
c0106cf5:	ff 75 dc             	pushl  -0x24(%ebp)
c0106cf8:	e8 fa 03 00 00       	call   c01070f7 <free_pages>
c0106cfd:	83 c4 10             	add    $0x10,%esp

    le = &free_list;
c0106d00:	c7 45 ec a4 31 1b c0 	movl   $0xc01b31a4,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c0106d07:	eb 1d                	jmp    c0106d26 <default_check+0x50f>
        struct Page *p = le2page(le, page_link);
c0106d09:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106d0c:	83 e8 0c             	sub    $0xc,%eax
c0106d0f:	89 45 b4             	mov    %eax,-0x4c(%ebp)
        count --, total -= p->property;
c0106d12:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0106d16:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0106d19:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0106d1c:	8b 40 08             	mov    0x8(%eax),%eax
c0106d1f:	29 c2                	sub    %eax,%edx
c0106d21:	89 d0                	mov    %edx,%eax
c0106d23:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106d26:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106d29:	89 45 b8             	mov    %eax,-0x48(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0106d2c:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0106d2f:	8b 40 04             	mov    0x4(%eax),%eax

    free_list = free_list_store;
    free_pages(p0, 5);

    le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c0106d32:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0106d35:	81 7d ec a4 31 1b c0 	cmpl   $0xc01b31a4,-0x14(%ebp)
c0106d3c:	75 cb                	jne    c0106d09 <default_check+0x4f2>
        struct Page *p = le2page(le, page_link);
        count --, total -= p->property;
    }
    assert(count == 0);
c0106d3e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106d42:	74 19                	je     c0106d5d <default_check+0x546>
c0106d44:	68 f6 d1 10 c0       	push   $0xc010d1f6
c0106d49:	68 ae ce 10 c0       	push   $0xc010ceae
c0106d4e:	68 3d 01 00 00       	push   $0x13d
c0106d53:	68 c3 ce 10 c0       	push   $0xc010cec3
c0106d58:	e8 a0 96 ff ff       	call   c01003fd <__panic>
    assert(total == 0);
c0106d5d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106d61:	74 19                	je     c0106d7c <default_check+0x565>
c0106d63:	68 01 d2 10 c0       	push   $0xc010d201
c0106d68:	68 ae ce 10 c0       	push   $0xc010ceae
c0106d6d:	68 3e 01 00 00       	push   $0x13e
c0106d72:	68 c3 ce 10 c0       	push   $0xc010cec3
c0106d77:	e8 81 96 ff ff       	call   c01003fd <__panic>
}
c0106d7c:	90                   	nop
c0106d7d:	c9                   	leave  
c0106d7e:	c3                   	ret    

c0106d7f <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0106d7f:	55                   	push   %ebp
c0106d80:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0106d82:	8b 45 08             	mov    0x8(%ebp),%eax
c0106d85:	8b 15 b8 31 1b c0    	mov    0xc01b31b8,%edx
c0106d8b:	29 d0                	sub    %edx,%eax
c0106d8d:	c1 f8 05             	sar    $0x5,%eax
}
c0106d90:	5d                   	pop    %ebp
c0106d91:	c3                   	ret    

c0106d92 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0106d92:	55                   	push   %ebp
c0106d93:	89 e5                	mov    %esp,%ebp
    return page2ppn(page) << PGSHIFT;
c0106d95:	ff 75 08             	pushl  0x8(%ebp)
c0106d98:	e8 e2 ff ff ff       	call   c0106d7f <page2ppn>
c0106d9d:	83 c4 04             	add    $0x4,%esp
c0106da0:	c1 e0 0c             	shl    $0xc,%eax
}
c0106da3:	c9                   	leave  
c0106da4:	c3                   	ret    

c0106da5 <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c0106da5:	55                   	push   %ebp
c0106da6:	89 e5                	mov    %esp,%ebp
c0106da8:	83 ec 08             	sub    $0x8,%esp
    if (PPN(pa) >= npage) {
c0106dab:	8b 45 08             	mov    0x8(%ebp),%eax
c0106dae:	c1 e8 0c             	shr    $0xc,%eax
c0106db1:	89 c2                	mov    %eax,%edx
c0106db3:	a1 80 0f 1b c0       	mov    0xc01b0f80,%eax
c0106db8:	39 c2                	cmp    %eax,%edx
c0106dba:	72 14                	jb     c0106dd0 <pa2page+0x2b>
        panic("pa2page called with invalid pa");
c0106dbc:	83 ec 04             	sub    $0x4,%esp
c0106dbf:	68 3c d2 10 c0       	push   $0xc010d23c
c0106dc4:	6a 5e                	push   $0x5e
c0106dc6:	68 5b d2 10 c0       	push   $0xc010d25b
c0106dcb:	e8 2d 96 ff ff       	call   c01003fd <__panic>
    }
    return &pages[PPN(pa)];
c0106dd0:	a1 b8 31 1b c0       	mov    0xc01b31b8,%eax
c0106dd5:	8b 55 08             	mov    0x8(%ebp),%edx
c0106dd8:	c1 ea 0c             	shr    $0xc,%edx
c0106ddb:	c1 e2 05             	shl    $0x5,%edx
c0106dde:	01 d0                	add    %edx,%eax
}
c0106de0:	c9                   	leave  
c0106de1:	c3                   	ret    

c0106de2 <page2kva>:

static inline void *
page2kva(struct Page *page) {
c0106de2:	55                   	push   %ebp
c0106de3:	89 e5                	mov    %esp,%ebp
c0106de5:	83 ec 18             	sub    $0x18,%esp
    return KADDR(page2pa(page));
c0106de8:	ff 75 08             	pushl  0x8(%ebp)
c0106deb:	e8 a2 ff ff ff       	call   c0106d92 <page2pa>
c0106df0:	83 c4 04             	add    $0x4,%esp
c0106df3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0106df6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106df9:	c1 e8 0c             	shr    $0xc,%eax
c0106dfc:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106dff:	a1 80 0f 1b c0       	mov    0xc01b0f80,%eax
c0106e04:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0106e07:	72 14                	jb     c0106e1d <page2kva+0x3b>
c0106e09:	ff 75 f4             	pushl  -0xc(%ebp)
c0106e0c:	68 6c d2 10 c0       	push   $0xc010d26c
c0106e11:	6a 65                	push   $0x65
c0106e13:	68 5b d2 10 c0       	push   $0xc010d25b
c0106e18:	e8 e0 95 ff ff       	call   c01003fd <__panic>
c0106e1d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106e20:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c0106e25:	c9                   	leave  
c0106e26:	c3                   	ret    

c0106e27 <pte2page>:
kva2page(void *kva) {
    return pa2page(PADDR(kva));
}

static inline struct Page *
pte2page(pte_t pte) {
c0106e27:	55                   	push   %ebp
c0106e28:	89 e5                	mov    %esp,%ebp
c0106e2a:	83 ec 08             	sub    $0x8,%esp
    if (!(pte & PTE_P)) {
c0106e2d:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e30:	83 e0 01             	and    $0x1,%eax
c0106e33:	85 c0                	test   %eax,%eax
c0106e35:	75 14                	jne    c0106e4b <pte2page+0x24>
        panic("pte2page called with invalid pte");
c0106e37:	83 ec 04             	sub    $0x4,%esp
c0106e3a:	68 90 d2 10 c0       	push   $0xc010d290
c0106e3f:	6a 70                	push   $0x70
c0106e41:	68 5b d2 10 c0       	push   $0xc010d25b
c0106e46:	e8 b2 95 ff ff       	call   c01003fd <__panic>
    }
    return pa2page(PTE_ADDR(pte));
c0106e4b:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e4e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106e53:	83 ec 0c             	sub    $0xc,%esp
c0106e56:	50                   	push   %eax
c0106e57:	e8 49 ff ff ff       	call   c0106da5 <pa2page>
c0106e5c:	83 c4 10             	add    $0x10,%esp
}
c0106e5f:	c9                   	leave  
c0106e60:	c3                   	ret    

c0106e61 <pde2page>:

static inline struct Page *
pde2page(pde_t pde) {
c0106e61:	55                   	push   %ebp
c0106e62:	89 e5                	mov    %esp,%ebp
c0106e64:	83 ec 08             	sub    $0x8,%esp
    return pa2page(PDE_ADDR(pde));
c0106e67:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e6a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106e6f:	83 ec 0c             	sub    $0xc,%esp
c0106e72:	50                   	push   %eax
c0106e73:	e8 2d ff ff ff       	call   c0106da5 <pa2page>
c0106e78:	83 c4 10             	add    $0x10,%esp
}
c0106e7b:	c9                   	leave  
c0106e7c:	c3                   	ret    

c0106e7d <page_ref>:

static inline int
page_ref(struct Page *page) {
c0106e7d:	55                   	push   %ebp
c0106e7e:	89 e5                	mov    %esp,%ebp
    return page->ref;
c0106e80:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e83:	8b 00                	mov    (%eax),%eax
}
c0106e85:	5d                   	pop    %ebp
c0106e86:	c3                   	ret    

c0106e87 <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c0106e87:	55                   	push   %ebp
c0106e88:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c0106e8a:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e8d:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106e90:	89 10                	mov    %edx,(%eax)
}
c0106e92:	90                   	nop
c0106e93:	5d                   	pop    %ebp
c0106e94:	c3                   	ret    

c0106e95 <page_ref_inc>:

static inline int
page_ref_inc(struct Page *page) {
c0106e95:	55                   	push   %ebp
c0106e96:	89 e5                	mov    %esp,%ebp
    page->ref += 1;
c0106e98:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e9b:	8b 00                	mov    (%eax),%eax
c0106e9d:	8d 50 01             	lea    0x1(%eax),%edx
c0106ea0:	8b 45 08             	mov    0x8(%ebp),%eax
c0106ea3:	89 10                	mov    %edx,(%eax)
    return page->ref;
c0106ea5:	8b 45 08             	mov    0x8(%ebp),%eax
c0106ea8:	8b 00                	mov    (%eax),%eax
}
c0106eaa:	5d                   	pop    %ebp
c0106eab:	c3                   	ret    

c0106eac <page_ref_dec>:

static inline int
page_ref_dec(struct Page *page) {
c0106eac:	55                   	push   %ebp
c0106ead:	89 e5                	mov    %esp,%ebp
    page->ref -= 1;
c0106eaf:	8b 45 08             	mov    0x8(%ebp),%eax
c0106eb2:	8b 00                	mov    (%eax),%eax
c0106eb4:	8d 50 ff             	lea    -0x1(%eax),%edx
c0106eb7:	8b 45 08             	mov    0x8(%ebp),%eax
c0106eba:	89 10                	mov    %edx,(%eax)
    return page->ref;
c0106ebc:	8b 45 08             	mov    0x8(%ebp),%eax
c0106ebf:	8b 00                	mov    (%eax),%eax
}
c0106ec1:	5d                   	pop    %ebp
c0106ec2:	c3                   	ret    

c0106ec3 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0106ec3:	55                   	push   %ebp
c0106ec4:	89 e5                	mov    %esp,%ebp
c0106ec6:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0106ec9:	9c                   	pushf  
c0106eca:	58                   	pop    %eax
c0106ecb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0106ece:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0106ed1:	25 00 02 00 00       	and    $0x200,%eax
c0106ed6:	85 c0                	test   %eax,%eax
c0106ed8:	74 0c                	je     c0106ee6 <__intr_save+0x23>
        intr_disable();
c0106eda:	e8 dd b2 ff ff       	call   c01021bc <intr_disable>
        return 1;
c0106edf:	b8 01 00 00 00       	mov    $0x1,%eax
c0106ee4:	eb 05                	jmp    c0106eeb <__intr_save+0x28>
    }
    return 0;
c0106ee6:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0106eeb:	c9                   	leave  
c0106eec:	c3                   	ret    

c0106eed <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0106eed:	55                   	push   %ebp
c0106eee:	89 e5                	mov    %esp,%ebp
c0106ef0:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0106ef3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0106ef7:	74 05                	je     c0106efe <__intr_restore+0x11>
        intr_enable();
c0106ef9:	e8 b7 b2 ff ff       	call   c01021b5 <intr_enable>
    }
}
c0106efe:	90                   	nop
c0106eff:	c9                   	leave  
c0106f00:	c3                   	ret    

c0106f01 <lgdt>:
/* *
 * lgdt - load the global descriptor table register and reset the
 * data/code segement registers for kernel.
 * */
static inline void
lgdt(struct pseudodesc *pd) {
c0106f01:	55                   	push   %ebp
c0106f02:	89 e5                	mov    %esp,%ebp
    asm volatile ("lgdt (%0)" :: "r" (pd));
c0106f04:	8b 45 08             	mov    0x8(%ebp),%eax
c0106f07:	0f 01 10             	lgdtl  (%eax)
    asm volatile ("movw %%ax, %%gs" :: "a" (USER_DS));
c0106f0a:	b8 23 00 00 00       	mov    $0x23,%eax
c0106f0f:	8e e8                	mov    %eax,%gs
    asm volatile ("movw %%ax, %%fs" :: "a" (USER_DS));
c0106f11:	b8 23 00 00 00       	mov    $0x23,%eax
c0106f16:	8e e0                	mov    %eax,%fs
    asm volatile ("movw %%ax, %%es" :: "a" (KERNEL_DS));
c0106f18:	b8 10 00 00 00       	mov    $0x10,%eax
c0106f1d:	8e c0                	mov    %eax,%es
    asm volatile ("movw %%ax, %%ds" :: "a" (KERNEL_DS));
c0106f1f:	b8 10 00 00 00       	mov    $0x10,%eax
c0106f24:	8e d8                	mov    %eax,%ds
    asm volatile ("movw %%ax, %%ss" :: "a" (KERNEL_DS));
c0106f26:	b8 10 00 00 00       	mov    $0x10,%eax
c0106f2b:	8e d0                	mov    %eax,%ss
    // reload cs
    asm volatile ("ljmp %0, $1f\n 1:\n" :: "i" (KERNEL_CS));
c0106f2d:	ea 34 6f 10 c0 08 00 	ljmp   $0x8,$0xc0106f34
}
c0106f34:	90                   	nop
c0106f35:	5d                   	pop    %ebp
c0106f36:	c3                   	ret    

c0106f37 <load_esp0>:
 * load_esp0 - change the ESP0 in default task state segment,
 * so that we can use different kernel stack when we trap frame
 * user to kernel.
 * */
void
load_esp0(uintptr_t esp0) {
c0106f37:	55                   	push   %ebp
c0106f38:	89 e5                	mov    %esp,%ebp
    ts.ts_esp0 = esp0;
c0106f3a:	8b 45 08             	mov    0x8(%ebp),%eax
c0106f3d:	a3 a4 0f 1b c0       	mov    %eax,0xc01b0fa4
}
c0106f42:	90                   	nop
c0106f43:	5d                   	pop    %ebp
c0106f44:	c3                   	ret    

c0106f45 <gdt_init>:

/* gdt_init - initialize the default GDT and TSS */
static void
gdt_init(void) {
c0106f45:	55                   	push   %ebp
c0106f46:	89 e5                	mov    %esp,%ebp
c0106f48:	83 ec 10             	sub    $0x10,%esp
    // set boot kernel stack and default SS0
    load_esp0((uintptr_t)bootstacktop);
c0106f4b:	b8 00 c0 12 c0       	mov    $0xc012c000,%eax
c0106f50:	50                   	push   %eax
c0106f51:	e8 e1 ff ff ff       	call   c0106f37 <load_esp0>
c0106f56:	83 c4 04             	add    $0x4,%esp
    ts.ts_ss0 = KERNEL_DS;
c0106f59:	66 c7 05 a8 0f 1b c0 	movw   $0x10,0xc01b0fa8
c0106f60:	10 00 

    // initialize the TSS filed of the gdt
    gdt[SEG_TSS] = SEGTSS(STS_T32A, (uintptr_t)&ts, sizeof(ts), DPL_KERNEL);
c0106f62:	66 c7 05 68 ca 12 c0 	movw   $0x68,0xc012ca68
c0106f69:	68 00 
c0106f6b:	b8 a0 0f 1b c0       	mov    $0xc01b0fa0,%eax
c0106f70:	66 a3 6a ca 12 c0    	mov    %ax,0xc012ca6a
c0106f76:	b8 a0 0f 1b c0       	mov    $0xc01b0fa0,%eax
c0106f7b:	c1 e8 10             	shr    $0x10,%eax
c0106f7e:	a2 6c ca 12 c0       	mov    %al,0xc012ca6c
c0106f83:	0f b6 05 6d ca 12 c0 	movzbl 0xc012ca6d,%eax
c0106f8a:	83 e0 f0             	and    $0xfffffff0,%eax
c0106f8d:	83 c8 09             	or     $0x9,%eax
c0106f90:	a2 6d ca 12 c0       	mov    %al,0xc012ca6d
c0106f95:	0f b6 05 6d ca 12 c0 	movzbl 0xc012ca6d,%eax
c0106f9c:	83 e0 ef             	and    $0xffffffef,%eax
c0106f9f:	a2 6d ca 12 c0       	mov    %al,0xc012ca6d
c0106fa4:	0f b6 05 6d ca 12 c0 	movzbl 0xc012ca6d,%eax
c0106fab:	83 e0 9f             	and    $0xffffff9f,%eax
c0106fae:	a2 6d ca 12 c0       	mov    %al,0xc012ca6d
c0106fb3:	0f b6 05 6d ca 12 c0 	movzbl 0xc012ca6d,%eax
c0106fba:	83 c8 80             	or     $0xffffff80,%eax
c0106fbd:	a2 6d ca 12 c0       	mov    %al,0xc012ca6d
c0106fc2:	0f b6 05 6e ca 12 c0 	movzbl 0xc012ca6e,%eax
c0106fc9:	83 e0 f0             	and    $0xfffffff0,%eax
c0106fcc:	a2 6e ca 12 c0       	mov    %al,0xc012ca6e
c0106fd1:	0f b6 05 6e ca 12 c0 	movzbl 0xc012ca6e,%eax
c0106fd8:	83 e0 ef             	and    $0xffffffef,%eax
c0106fdb:	a2 6e ca 12 c0       	mov    %al,0xc012ca6e
c0106fe0:	0f b6 05 6e ca 12 c0 	movzbl 0xc012ca6e,%eax
c0106fe7:	83 e0 df             	and    $0xffffffdf,%eax
c0106fea:	a2 6e ca 12 c0       	mov    %al,0xc012ca6e
c0106fef:	0f b6 05 6e ca 12 c0 	movzbl 0xc012ca6e,%eax
c0106ff6:	83 c8 40             	or     $0x40,%eax
c0106ff9:	a2 6e ca 12 c0       	mov    %al,0xc012ca6e
c0106ffe:	0f b6 05 6e ca 12 c0 	movzbl 0xc012ca6e,%eax
c0107005:	83 e0 7f             	and    $0x7f,%eax
c0107008:	a2 6e ca 12 c0       	mov    %al,0xc012ca6e
c010700d:	b8 a0 0f 1b c0       	mov    $0xc01b0fa0,%eax
c0107012:	c1 e8 18             	shr    $0x18,%eax
c0107015:	a2 6f ca 12 c0       	mov    %al,0xc012ca6f

    // reload all segment registers
    lgdt(&gdt_pd);
c010701a:	68 70 ca 12 c0       	push   $0xc012ca70
c010701f:	e8 dd fe ff ff       	call   c0106f01 <lgdt>
c0107024:	83 c4 04             	add    $0x4,%esp
c0107027:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
    asm volatile ("cli" ::: "memory");
}

static inline void
ltr(uint16_t sel) {
    asm volatile ("ltr %0" :: "r" (sel) : "memory");
c010702d:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c0107031:	0f 00 d8             	ltr    %ax

    // load the TSS
    ltr(GD_TSS);
}
c0107034:	90                   	nop
c0107035:	c9                   	leave  
c0107036:	c3                   	ret    

c0107037 <init_pmm_manager>:

//init_pmm_manager - initialize a pmm_manager instance
static void
init_pmm_manager(void) {
c0107037:	55                   	push   %ebp
c0107038:	89 e5                	mov    %esp,%ebp
c010703a:	83 ec 08             	sub    $0x8,%esp
    pmm_manager = &default_pmm_manager;
c010703d:	c7 05 b0 31 1b c0 20 	movl   $0xc010d220,0xc01b31b0
c0107044:	d2 10 c0 
    cprintf("memory management: %s\n", pmm_manager->name);
c0107047:	a1 b0 31 1b c0       	mov    0xc01b31b0,%eax
c010704c:	8b 00                	mov    (%eax),%eax
c010704e:	83 ec 08             	sub    $0x8,%esp
c0107051:	50                   	push   %eax
c0107052:	68 bc d2 10 c0       	push   $0xc010d2bc
c0107057:	e8 3b 92 ff ff       	call   c0100297 <cprintf>
c010705c:	83 c4 10             	add    $0x10,%esp
    pmm_manager->init();
c010705f:	a1 b0 31 1b c0       	mov    0xc01b31b0,%eax
c0107064:	8b 40 04             	mov    0x4(%eax),%eax
c0107067:	ff d0                	call   *%eax
}
c0107069:	90                   	nop
c010706a:	c9                   	leave  
c010706b:	c3                   	ret    

c010706c <init_memmap>:

//init_memmap - call pmm->init_memmap to build Page struct for free memory  
static void
init_memmap(struct Page *base, size_t n) {
c010706c:	55                   	push   %ebp
c010706d:	89 e5                	mov    %esp,%ebp
c010706f:	83 ec 08             	sub    $0x8,%esp
    pmm_manager->init_memmap(base, n);
c0107072:	a1 b0 31 1b c0       	mov    0xc01b31b0,%eax
c0107077:	8b 40 08             	mov    0x8(%eax),%eax
c010707a:	83 ec 08             	sub    $0x8,%esp
c010707d:	ff 75 0c             	pushl  0xc(%ebp)
c0107080:	ff 75 08             	pushl  0x8(%ebp)
c0107083:	ff d0                	call   *%eax
c0107085:	83 c4 10             	add    $0x10,%esp
}
c0107088:	90                   	nop
c0107089:	c9                   	leave  
c010708a:	c3                   	ret    

c010708b <alloc_pages>:

//alloc_pages - call pmm->alloc_pages to allocate a continuous n*PAGESIZE memory 
struct Page *
alloc_pages(size_t n) {
c010708b:	55                   	push   %ebp
c010708c:	89 e5                	mov    %esp,%ebp
c010708e:	83 ec 18             	sub    $0x18,%esp
    struct Page *page=NULL;
c0107091:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    
    while (1)
    {
         local_intr_save(intr_flag);
c0107098:	e8 26 fe ff ff       	call   c0106ec3 <__intr_save>
c010709d:	89 45 f0             	mov    %eax,-0x10(%ebp)
         {
              page = pmm_manager->alloc_pages(n);
c01070a0:	a1 b0 31 1b c0       	mov    0xc01b31b0,%eax
c01070a5:	8b 40 0c             	mov    0xc(%eax),%eax
c01070a8:	83 ec 0c             	sub    $0xc,%esp
c01070ab:	ff 75 08             	pushl  0x8(%ebp)
c01070ae:	ff d0                	call   *%eax
c01070b0:	83 c4 10             	add    $0x10,%esp
c01070b3:	89 45 f4             	mov    %eax,-0xc(%ebp)
         }
         local_intr_restore(intr_flag);
c01070b6:	83 ec 0c             	sub    $0xc,%esp
c01070b9:	ff 75 f0             	pushl  -0x10(%ebp)
c01070bc:	e8 2c fe ff ff       	call   c0106eed <__intr_restore>
c01070c1:	83 c4 10             	add    $0x10,%esp

         if (page != NULL || n > 1 || swap_init_ok == 0) break;
c01070c4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01070c8:	75 28                	jne    c01070f2 <alloc_pages+0x67>
c01070ca:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c01070ce:	77 22                	ja     c01070f2 <alloc_pages+0x67>
c01070d0:	a1 6c 0f 1b c0       	mov    0xc01b0f6c,%eax
c01070d5:	85 c0                	test   %eax,%eax
c01070d7:	74 19                	je     c01070f2 <alloc_pages+0x67>
         
         extern struct mm_struct *check_mm_struct;
         //cprintf("page %x, call swap_out in alloc_pages %d\n",page, n);
         swap_out(check_mm_struct, n, 0);
c01070d9:	8b 55 08             	mov    0x8(%ebp),%edx
c01070dc:	a1 d0 30 1b c0       	mov    0xc01b30d0,%eax
c01070e1:	83 ec 04             	sub    $0x4,%esp
c01070e4:	6a 00                	push   $0x0
c01070e6:	52                   	push   %edx
c01070e7:	50                   	push   %eax
c01070e8:	e8 65 e3 ff ff       	call   c0105452 <swap_out>
c01070ed:	83 c4 10             	add    $0x10,%esp
    }
c01070f0:	eb a6                	jmp    c0107098 <alloc_pages+0xd>
    //cprintf("n %d,get page %x, No %d in alloc_pages\n",n,page,(page-pages));
    return page;
c01070f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01070f5:	c9                   	leave  
c01070f6:	c3                   	ret    

c01070f7 <free_pages>:

//free_pages - call pmm->free_pages to free a continuous n*PAGESIZE memory 
void
free_pages(struct Page *base, size_t n) {
c01070f7:	55                   	push   %ebp
c01070f8:	89 e5                	mov    %esp,%ebp
c01070fa:	83 ec 18             	sub    $0x18,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c01070fd:	e8 c1 fd ff ff       	call   c0106ec3 <__intr_save>
c0107102:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        pmm_manager->free_pages(base, n);
c0107105:	a1 b0 31 1b c0       	mov    0xc01b31b0,%eax
c010710a:	8b 40 10             	mov    0x10(%eax),%eax
c010710d:	83 ec 08             	sub    $0x8,%esp
c0107110:	ff 75 0c             	pushl  0xc(%ebp)
c0107113:	ff 75 08             	pushl  0x8(%ebp)
c0107116:	ff d0                	call   *%eax
c0107118:	83 c4 10             	add    $0x10,%esp
    }
    local_intr_restore(intr_flag);
c010711b:	83 ec 0c             	sub    $0xc,%esp
c010711e:	ff 75 f4             	pushl  -0xc(%ebp)
c0107121:	e8 c7 fd ff ff       	call   c0106eed <__intr_restore>
c0107126:	83 c4 10             	add    $0x10,%esp
}
c0107129:	90                   	nop
c010712a:	c9                   	leave  
c010712b:	c3                   	ret    

c010712c <nr_free_pages>:

//nr_free_pages - call pmm->nr_free_pages to get the size (nr*PAGESIZE) 
//of current free memory
size_t
nr_free_pages(void) {
c010712c:	55                   	push   %ebp
c010712d:	89 e5                	mov    %esp,%ebp
c010712f:	83 ec 18             	sub    $0x18,%esp
    size_t ret;
    bool intr_flag;
    local_intr_save(intr_flag);
c0107132:	e8 8c fd ff ff       	call   c0106ec3 <__intr_save>
c0107137:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        ret = pmm_manager->nr_free_pages();
c010713a:	a1 b0 31 1b c0       	mov    0xc01b31b0,%eax
c010713f:	8b 40 14             	mov    0x14(%eax),%eax
c0107142:	ff d0                	call   *%eax
c0107144:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    local_intr_restore(intr_flag);
c0107147:	83 ec 0c             	sub    $0xc,%esp
c010714a:	ff 75 f4             	pushl  -0xc(%ebp)
c010714d:	e8 9b fd ff ff       	call   c0106eed <__intr_restore>
c0107152:	83 c4 10             	add    $0x10,%esp
    return ret;
c0107155:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0107158:	c9                   	leave  
c0107159:	c3                   	ret    

c010715a <page_init>:

/* pmm_init - initialize the physical memory management */
static void
page_init(void) {
c010715a:	55                   	push   %ebp
c010715b:	89 e5                	mov    %esp,%ebp
c010715d:	57                   	push   %edi
c010715e:	56                   	push   %esi
c010715f:	53                   	push   %ebx
c0107160:	83 ec 7c             	sub    $0x7c,%esp
    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
c0107163:	c7 45 c4 00 80 00 c0 	movl   $0xc0008000,-0x3c(%ebp)
    uint64_t maxpa = 0;
c010716a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
c0107171:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

    cprintf("e820map:\n");
c0107178:	83 ec 0c             	sub    $0xc,%esp
c010717b:	68 d3 d2 10 c0       	push   $0xc010d2d3
c0107180:	e8 12 91 ff ff       	call   c0100297 <cprintf>
c0107185:	83 c4 10             	add    $0x10,%esp
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
c0107188:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c010718f:	e9 fc 00 00 00       	jmp    c0107290 <page_init+0x136>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c0107194:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0107197:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010719a:	89 d0                	mov    %edx,%eax
c010719c:	c1 e0 02             	shl    $0x2,%eax
c010719f:	01 d0                	add    %edx,%eax
c01071a1:	c1 e0 02             	shl    $0x2,%eax
c01071a4:	01 c8                	add    %ecx,%eax
c01071a6:	8b 50 08             	mov    0x8(%eax),%edx
c01071a9:	8b 40 04             	mov    0x4(%eax),%eax
c01071ac:	89 45 b8             	mov    %eax,-0x48(%ebp)
c01071af:	89 55 bc             	mov    %edx,-0x44(%ebp)
c01071b2:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01071b5:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01071b8:	89 d0                	mov    %edx,%eax
c01071ba:	c1 e0 02             	shl    $0x2,%eax
c01071bd:	01 d0                	add    %edx,%eax
c01071bf:	c1 e0 02             	shl    $0x2,%eax
c01071c2:	01 c8                	add    %ecx,%eax
c01071c4:	8b 48 0c             	mov    0xc(%eax),%ecx
c01071c7:	8b 58 10             	mov    0x10(%eax),%ebx
c01071ca:	8b 45 b8             	mov    -0x48(%ebp),%eax
c01071cd:	8b 55 bc             	mov    -0x44(%ebp),%edx
c01071d0:	01 c8                	add    %ecx,%eax
c01071d2:	11 da                	adc    %ebx,%edx
c01071d4:	89 45 b0             	mov    %eax,-0x50(%ebp)
c01071d7:	89 55 b4             	mov    %edx,-0x4c(%ebp)
        cprintf("  memory: %08llx, [%08llx, %08llx], type = %d.\n",
c01071da:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01071dd:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01071e0:	89 d0                	mov    %edx,%eax
c01071e2:	c1 e0 02             	shl    $0x2,%eax
c01071e5:	01 d0                	add    %edx,%eax
c01071e7:	c1 e0 02             	shl    $0x2,%eax
c01071ea:	01 c8                	add    %ecx,%eax
c01071ec:	83 c0 14             	add    $0x14,%eax
c01071ef:	8b 00                	mov    (%eax),%eax
c01071f1:	89 45 84             	mov    %eax,-0x7c(%ebp)
c01071f4:	8b 45 b0             	mov    -0x50(%ebp),%eax
c01071f7:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c01071fa:	83 c0 ff             	add    $0xffffffff,%eax
c01071fd:	83 d2 ff             	adc    $0xffffffff,%edx
c0107200:	89 c1                	mov    %eax,%ecx
c0107202:	89 d3                	mov    %edx,%ebx
c0107204:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0107207:	89 55 80             	mov    %edx,-0x80(%ebp)
c010720a:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010720d:	89 d0                	mov    %edx,%eax
c010720f:	c1 e0 02             	shl    $0x2,%eax
c0107212:	01 d0                	add    %edx,%eax
c0107214:	c1 e0 02             	shl    $0x2,%eax
c0107217:	03 45 80             	add    -0x80(%ebp),%eax
c010721a:	8b 50 10             	mov    0x10(%eax),%edx
c010721d:	8b 40 0c             	mov    0xc(%eax),%eax
c0107220:	ff 75 84             	pushl  -0x7c(%ebp)
c0107223:	53                   	push   %ebx
c0107224:	51                   	push   %ecx
c0107225:	ff 75 bc             	pushl  -0x44(%ebp)
c0107228:	ff 75 b8             	pushl  -0x48(%ebp)
c010722b:	52                   	push   %edx
c010722c:	50                   	push   %eax
c010722d:	68 e0 d2 10 c0       	push   $0xc010d2e0
c0107232:	e8 60 90 ff ff       	call   c0100297 <cprintf>
c0107237:	83 c4 20             	add    $0x20,%esp
                memmap->map[i].size, begin, end - 1, memmap->map[i].type);
        if (memmap->map[i].type == E820_ARM) {
c010723a:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c010723d:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0107240:	89 d0                	mov    %edx,%eax
c0107242:	c1 e0 02             	shl    $0x2,%eax
c0107245:	01 d0                	add    %edx,%eax
c0107247:	c1 e0 02             	shl    $0x2,%eax
c010724a:	01 c8                	add    %ecx,%eax
c010724c:	83 c0 14             	add    $0x14,%eax
c010724f:	8b 00                	mov    (%eax),%eax
c0107251:	83 f8 01             	cmp    $0x1,%eax
c0107254:	75 36                	jne    c010728c <page_init+0x132>
            if (maxpa < end && begin < KMEMSIZE) {
c0107256:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107259:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010725c:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c010725f:	77 2b                	ja     c010728c <page_init+0x132>
c0107261:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c0107264:	72 05                	jb     c010726b <page_init+0x111>
c0107266:	3b 45 b0             	cmp    -0x50(%ebp),%eax
c0107269:	73 21                	jae    c010728c <page_init+0x132>
c010726b:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c010726f:	77 1b                	ja     c010728c <page_init+0x132>
c0107271:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0107275:	72 09                	jb     c0107280 <page_init+0x126>
c0107277:	81 7d b8 ff ff ff 37 	cmpl   $0x37ffffff,-0x48(%ebp)
c010727e:	77 0c                	ja     c010728c <page_init+0x132>
                maxpa = end;
c0107280:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0107283:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0107286:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0107289:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
    uint64_t maxpa = 0;

    cprintf("e820map:\n");
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
c010728c:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c0107290:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0107293:	8b 00                	mov    (%eax),%eax
c0107295:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c0107298:	0f 8f f6 fe ff ff    	jg     c0107194 <page_init+0x3a>
            if (maxpa < end && begin < KMEMSIZE) {
                maxpa = end;
            }
        }
    }
    if (maxpa > KMEMSIZE) {
c010729e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c01072a2:	72 1d                	jb     c01072c1 <page_init+0x167>
c01072a4:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c01072a8:	77 09                	ja     c01072b3 <page_init+0x159>
c01072aa:	81 7d e0 00 00 00 38 	cmpl   $0x38000000,-0x20(%ebp)
c01072b1:	76 0e                	jbe    c01072c1 <page_init+0x167>
        maxpa = KMEMSIZE;
c01072b3:	c7 45 e0 00 00 00 38 	movl   $0x38000000,-0x20(%ebp)
c01072ba:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    }

    extern char end[];

    npage = maxpa / PGSIZE;
c01072c1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01072c4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01072c7:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c01072cb:	c1 ea 0c             	shr    $0xc,%edx
c01072ce:	a3 80 0f 1b c0       	mov    %eax,0xc01b0f80
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);
c01072d3:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
c01072da:	b8 c4 31 1b c0       	mov    $0xc01b31c4,%eax
c01072df:	8d 50 ff             	lea    -0x1(%eax),%edx
c01072e2:	8b 45 ac             	mov    -0x54(%ebp),%eax
c01072e5:	01 d0                	add    %edx,%eax
c01072e7:	89 45 a8             	mov    %eax,-0x58(%ebp)
c01072ea:	8b 45 a8             	mov    -0x58(%ebp),%eax
c01072ed:	ba 00 00 00 00       	mov    $0x0,%edx
c01072f2:	f7 75 ac             	divl   -0x54(%ebp)
c01072f5:	8b 45 a8             	mov    -0x58(%ebp),%eax
c01072f8:	29 d0                	sub    %edx,%eax
c01072fa:	a3 b8 31 1b c0       	mov    %eax,0xc01b31b8

    for (i = 0; i < npage; i ++) {
c01072ff:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0107306:	eb 27                	jmp    c010732f <page_init+0x1d5>
        SetPageReserved(pages + i);
c0107308:	a1 b8 31 1b c0       	mov    0xc01b31b8,%eax
c010730d:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0107310:	c1 e2 05             	shl    $0x5,%edx
c0107313:	01 d0                	add    %edx,%eax
c0107315:	83 c0 04             	add    $0x4,%eax
c0107318:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
c010731f:	89 45 8c             	mov    %eax,-0x74(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0107322:	8b 45 8c             	mov    -0x74(%ebp),%eax
c0107325:	8b 55 90             	mov    -0x70(%ebp),%edx
c0107328:	0f ab 10             	bts    %edx,(%eax)
    extern char end[];

    npage = maxpa / PGSIZE;
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);

    for (i = 0; i < npage; i ++) {
c010732b:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c010732f:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0107332:	a1 80 0f 1b c0       	mov    0xc01b0f80,%eax
c0107337:	39 c2                	cmp    %eax,%edx
c0107339:	72 cd                	jb     c0107308 <page_init+0x1ae>
        SetPageReserved(pages + i);
    }

    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);
c010733b:	a1 80 0f 1b c0       	mov    0xc01b0f80,%eax
c0107340:	c1 e0 05             	shl    $0x5,%eax
c0107343:	89 c2                	mov    %eax,%edx
c0107345:	a1 b8 31 1b c0       	mov    0xc01b31b8,%eax
c010734a:	01 d0                	add    %edx,%eax
c010734c:	89 45 a4             	mov    %eax,-0x5c(%ebp)
c010734f:	81 7d a4 ff ff ff bf 	cmpl   $0xbfffffff,-0x5c(%ebp)
c0107356:	77 17                	ja     c010736f <page_init+0x215>
c0107358:	ff 75 a4             	pushl  -0x5c(%ebp)
c010735b:	68 10 d3 10 c0       	push   $0xc010d310
c0107360:	68 ea 00 00 00       	push   $0xea
c0107365:	68 34 d3 10 c0       	push   $0xc010d334
c010736a:	e8 8e 90 ff ff       	call   c01003fd <__panic>
c010736f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0107372:	05 00 00 00 40       	add    $0x40000000,%eax
c0107377:	89 45 a0             	mov    %eax,-0x60(%ebp)

    for (i = 0; i < memmap->nr_map; i ++) {
c010737a:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0107381:	e9 69 01 00 00       	jmp    c01074ef <page_init+0x395>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c0107386:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0107389:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010738c:	89 d0                	mov    %edx,%eax
c010738e:	c1 e0 02             	shl    $0x2,%eax
c0107391:	01 d0                	add    %edx,%eax
c0107393:	c1 e0 02             	shl    $0x2,%eax
c0107396:	01 c8                	add    %ecx,%eax
c0107398:	8b 50 08             	mov    0x8(%eax),%edx
c010739b:	8b 40 04             	mov    0x4(%eax),%eax
c010739e:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01073a1:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c01073a4:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01073a7:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01073aa:	89 d0                	mov    %edx,%eax
c01073ac:	c1 e0 02             	shl    $0x2,%eax
c01073af:	01 d0                	add    %edx,%eax
c01073b1:	c1 e0 02             	shl    $0x2,%eax
c01073b4:	01 c8                	add    %ecx,%eax
c01073b6:	8b 48 0c             	mov    0xc(%eax),%ecx
c01073b9:	8b 58 10             	mov    0x10(%eax),%ebx
c01073bc:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01073bf:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01073c2:	01 c8                	add    %ecx,%eax
c01073c4:	11 da                	adc    %ebx,%edx
c01073c6:	89 45 c8             	mov    %eax,-0x38(%ebp)
c01073c9:	89 55 cc             	mov    %edx,-0x34(%ebp)
        if (memmap->map[i].type == E820_ARM) {
c01073cc:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01073cf:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01073d2:	89 d0                	mov    %edx,%eax
c01073d4:	c1 e0 02             	shl    $0x2,%eax
c01073d7:	01 d0                	add    %edx,%eax
c01073d9:	c1 e0 02             	shl    $0x2,%eax
c01073dc:	01 c8                	add    %ecx,%eax
c01073de:	83 c0 14             	add    $0x14,%eax
c01073e1:	8b 00                	mov    (%eax),%eax
c01073e3:	83 f8 01             	cmp    $0x1,%eax
c01073e6:	0f 85 ff 00 00 00    	jne    c01074eb <page_init+0x391>
            if (begin < freemem) {
c01073ec:	8b 45 a0             	mov    -0x60(%ebp),%eax
c01073ef:	ba 00 00 00 00       	mov    $0x0,%edx
c01073f4:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c01073f7:	72 17                	jb     c0107410 <page_init+0x2b6>
c01073f9:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c01073fc:	77 05                	ja     c0107403 <page_init+0x2a9>
c01073fe:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c0107401:	76 0d                	jbe    c0107410 <page_init+0x2b6>
                begin = freemem;
c0107403:	8b 45 a0             	mov    -0x60(%ebp),%eax
c0107406:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0107409:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
            }
            if (end > KMEMSIZE) {
c0107410:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0107414:	72 1d                	jb     c0107433 <page_init+0x2d9>
c0107416:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c010741a:	77 09                	ja     c0107425 <page_init+0x2cb>
c010741c:	81 7d c8 00 00 00 38 	cmpl   $0x38000000,-0x38(%ebp)
c0107423:	76 0e                	jbe    c0107433 <page_init+0x2d9>
                end = KMEMSIZE;
c0107425:	c7 45 c8 00 00 00 38 	movl   $0x38000000,-0x38(%ebp)
c010742c:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
            }
            if (begin < end) {
c0107433:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0107436:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0107439:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c010743c:	0f 87 a9 00 00 00    	ja     c01074eb <page_init+0x391>
c0107442:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c0107445:	72 09                	jb     c0107450 <page_init+0x2f6>
c0107447:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c010744a:	0f 83 9b 00 00 00    	jae    c01074eb <page_init+0x391>
                begin = ROUNDUP(begin, PGSIZE);
c0107450:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
c0107457:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010745a:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010745d:	01 d0                	add    %edx,%eax
c010745f:	83 e8 01             	sub    $0x1,%eax
c0107462:	89 45 98             	mov    %eax,-0x68(%ebp)
c0107465:	8b 45 98             	mov    -0x68(%ebp),%eax
c0107468:	ba 00 00 00 00       	mov    $0x0,%edx
c010746d:	f7 75 9c             	divl   -0x64(%ebp)
c0107470:	8b 45 98             	mov    -0x68(%ebp),%eax
c0107473:	29 d0                	sub    %edx,%eax
c0107475:	ba 00 00 00 00       	mov    $0x0,%edx
c010747a:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010747d:	89 55 d4             	mov    %edx,-0x2c(%ebp)
                end = ROUNDDOWN(end, PGSIZE);
c0107480:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0107483:	89 45 94             	mov    %eax,-0x6c(%ebp)
c0107486:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0107489:	ba 00 00 00 00       	mov    $0x0,%edx
c010748e:	89 c3                	mov    %eax,%ebx
c0107490:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
c0107496:	89 de                	mov    %ebx,%esi
c0107498:	89 d0                	mov    %edx,%eax
c010749a:	83 e0 00             	and    $0x0,%eax
c010749d:	89 c7                	mov    %eax,%edi
c010749f:	89 75 c8             	mov    %esi,-0x38(%ebp)
c01074a2:	89 7d cc             	mov    %edi,-0x34(%ebp)
                if (begin < end) {
c01074a5:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01074a8:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01074ab:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c01074ae:	77 3b                	ja     c01074eb <page_init+0x391>
c01074b0:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c01074b3:	72 05                	jb     c01074ba <page_init+0x360>
c01074b5:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c01074b8:	73 31                	jae    c01074eb <page_init+0x391>
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
c01074ba:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01074bd:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01074c0:	2b 45 d0             	sub    -0x30(%ebp),%eax
c01074c3:	1b 55 d4             	sbb    -0x2c(%ebp),%edx
c01074c6:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c01074ca:	c1 ea 0c             	shr    $0xc,%edx
c01074cd:	89 c3                	mov    %eax,%ebx
c01074cf:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01074d2:	83 ec 0c             	sub    $0xc,%esp
c01074d5:	50                   	push   %eax
c01074d6:	e8 ca f8 ff ff       	call   c0106da5 <pa2page>
c01074db:	83 c4 10             	add    $0x10,%esp
c01074de:	83 ec 08             	sub    $0x8,%esp
c01074e1:	53                   	push   %ebx
c01074e2:	50                   	push   %eax
c01074e3:	e8 84 fb ff ff       	call   c010706c <init_memmap>
c01074e8:	83 c4 10             	add    $0x10,%esp
        SetPageReserved(pages + i);
    }

    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);

    for (i = 0; i < memmap->nr_map; i ++) {
c01074eb:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c01074ef:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01074f2:	8b 00                	mov    (%eax),%eax
c01074f4:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c01074f7:	0f 8f 89 fe ff ff    	jg     c0107386 <page_init+0x22c>
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
                }
            }
        }
    }
}
c01074fd:	90                   	nop
c01074fe:	8d 65 f4             	lea    -0xc(%ebp),%esp
c0107501:	5b                   	pop    %ebx
c0107502:	5e                   	pop    %esi
c0107503:	5f                   	pop    %edi
c0107504:	5d                   	pop    %ebp
c0107505:	c3                   	ret    

c0107506 <boot_map_segment>:
//  la:   linear address of this memory need to map (after x86 segment map)
//  size: memory size
//  pa:   physical address of this memory
//  perm: permission of this memory  
static void
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
c0107506:	55                   	push   %ebp
c0107507:	89 e5                	mov    %esp,%ebp
c0107509:	83 ec 28             	sub    $0x28,%esp
    assert(PGOFF(la) == PGOFF(pa));
c010750c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010750f:	33 45 14             	xor    0x14(%ebp),%eax
c0107512:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107517:	85 c0                	test   %eax,%eax
c0107519:	74 19                	je     c0107534 <boot_map_segment+0x2e>
c010751b:	68 42 d3 10 c0       	push   $0xc010d342
c0107520:	68 59 d3 10 c0       	push   $0xc010d359
c0107525:	68 08 01 00 00       	push   $0x108
c010752a:	68 34 d3 10 c0       	push   $0xc010d334
c010752f:	e8 c9 8e ff ff       	call   c01003fd <__panic>
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
c0107534:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
c010753b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010753e:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107543:	89 c2                	mov    %eax,%edx
c0107545:	8b 45 10             	mov    0x10(%ebp),%eax
c0107548:	01 c2                	add    %eax,%edx
c010754a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010754d:	01 d0                	add    %edx,%eax
c010754f:	83 e8 01             	sub    $0x1,%eax
c0107552:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0107555:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107558:	ba 00 00 00 00       	mov    $0x0,%edx
c010755d:	f7 75 f0             	divl   -0x10(%ebp)
c0107560:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107563:	29 d0                	sub    %edx,%eax
c0107565:	c1 e8 0c             	shr    $0xc,%eax
c0107568:	89 45 f4             	mov    %eax,-0xc(%ebp)
    la = ROUNDDOWN(la, PGSIZE);
c010756b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010756e:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0107571:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107574:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0107579:	89 45 0c             	mov    %eax,0xc(%ebp)
    pa = ROUNDDOWN(pa, PGSIZE);
c010757c:	8b 45 14             	mov    0x14(%ebp),%eax
c010757f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0107582:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107585:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010758a:	89 45 14             	mov    %eax,0x14(%ebp)
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c010758d:	eb 57                	jmp    c01075e6 <boot_map_segment+0xe0>
        pte_t *ptep = get_pte(pgdir, la, 1);
c010758f:	83 ec 04             	sub    $0x4,%esp
c0107592:	6a 01                	push   $0x1
c0107594:	ff 75 0c             	pushl  0xc(%ebp)
c0107597:	ff 75 08             	pushl  0x8(%ebp)
c010759a:	e8 58 01 00 00       	call   c01076f7 <get_pte>
c010759f:	83 c4 10             	add    $0x10,%esp
c01075a2:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(ptep != NULL);
c01075a5:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01075a9:	75 19                	jne    c01075c4 <boot_map_segment+0xbe>
c01075ab:	68 6e d3 10 c0       	push   $0xc010d36e
c01075b0:	68 59 d3 10 c0       	push   $0xc010d359
c01075b5:	68 0e 01 00 00       	push   $0x10e
c01075ba:	68 34 d3 10 c0       	push   $0xc010d334
c01075bf:	e8 39 8e ff ff       	call   c01003fd <__panic>
        *ptep = pa | PTE_P | perm;
c01075c4:	8b 45 14             	mov    0x14(%ebp),%eax
c01075c7:	0b 45 18             	or     0x18(%ebp),%eax
c01075ca:	83 c8 01             	or     $0x1,%eax
c01075cd:	89 c2                	mov    %eax,%edx
c01075cf:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01075d2:	89 10                	mov    %edx,(%eax)
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
    assert(PGOFF(la) == PGOFF(pa));
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
    la = ROUNDDOWN(la, PGSIZE);
    pa = ROUNDDOWN(pa, PGSIZE);
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c01075d4:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c01075d8:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
c01075df:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
c01075e6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01075ea:	75 a3                	jne    c010758f <boot_map_segment+0x89>
        pte_t *ptep = get_pte(pgdir, la, 1);
        assert(ptep != NULL);
        *ptep = pa | PTE_P | perm;
    }
}
c01075ec:	90                   	nop
c01075ed:	c9                   	leave  
c01075ee:	c3                   	ret    

c01075ef <boot_alloc_page>:

//boot_alloc_page - allocate one page using pmm->alloc_pages(1) 
// return value: the kernel virtual address of this allocated page
//note: this function is used to get the memory for PDT(Page Directory Table)&PT(Page Table)
static void *
boot_alloc_page(void) {
c01075ef:	55                   	push   %ebp
c01075f0:	89 e5                	mov    %esp,%ebp
c01075f2:	83 ec 18             	sub    $0x18,%esp
    struct Page *p = alloc_page();
c01075f5:	83 ec 0c             	sub    $0xc,%esp
c01075f8:	6a 01                	push   $0x1
c01075fa:	e8 8c fa ff ff       	call   c010708b <alloc_pages>
c01075ff:	83 c4 10             	add    $0x10,%esp
c0107602:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (p == NULL) {
c0107605:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107609:	75 17                	jne    c0107622 <boot_alloc_page+0x33>
        panic("boot_alloc_page failed.\n");
c010760b:	83 ec 04             	sub    $0x4,%esp
c010760e:	68 7b d3 10 c0       	push   $0xc010d37b
c0107613:	68 1a 01 00 00       	push   $0x11a
c0107618:	68 34 d3 10 c0       	push   $0xc010d334
c010761d:	e8 db 8d ff ff       	call   c01003fd <__panic>
    }
    return page2kva(p);
c0107622:	83 ec 0c             	sub    $0xc,%esp
c0107625:	ff 75 f4             	pushl  -0xc(%ebp)
c0107628:	e8 b5 f7 ff ff       	call   c0106de2 <page2kva>
c010762d:	83 c4 10             	add    $0x10,%esp
}
c0107630:	c9                   	leave  
c0107631:	c3                   	ret    

c0107632 <pmm_init>:

//pmm_init - setup a pmm to manage physical memory, build PDT&PT to setup paging mechanism 
//         - check the correctness of pmm & paging mechanism, print PDT&PT
void
pmm_init(void) {
c0107632:	55                   	push   %ebp
c0107633:	89 e5                	mov    %esp,%ebp
c0107635:	83 ec 18             	sub    $0x18,%esp
    // We've already enabled paging
    boot_cr3 = PADDR(boot_pgdir);
c0107638:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c010763d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0107640:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c0107647:	77 17                	ja     c0107660 <pmm_init+0x2e>
c0107649:	ff 75 f4             	pushl  -0xc(%ebp)
c010764c:	68 10 d3 10 c0       	push   $0xc010d310
c0107651:	68 24 01 00 00       	push   $0x124
c0107656:	68 34 d3 10 c0       	push   $0xc010d334
c010765b:	e8 9d 8d ff ff       	call   c01003fd <__panic>
c0107660:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107663:	05 00 00 00 40       	add    $0x40000000,%eax
c0107668:	a3 b4 31 1b c0       	mov    %eax,0xc01b31b4
    //We need to alloc/free the physical memory (granularity is 4KB or other size). 
    //So a framework of physical memory manager (struct pmm_manager)is defined in pmm.h
    //First we should init a physical memory manager(pmm) based on the framework.
    //Then pmm can alloc/free the physical memory. 
    //Now the first_fit/best_fit/worst_fit/buddy_system pmm are available.
    init_pmm_manager();
c010766d:	e8 c5 f9 ff ff       	call   c0107037 <init_pmm_manager>

    // detect physical memory space, reserve already used memory,
    // then use pmm->init_memmap to create free page list
    page_init();
c0107672:	e8 e3 fa ff ff       	call   c010715a <page_init>

    //use pmm->check to verify the correctness of the alloc/free function in a pmm
    check_alloc_page();
c0107677:	e8 16 08 00 00       	call   c0107e92 <check_alloc_page>

    check_pgdir();
c010767c:	e8 34 08 00 00       	call   c0107eb5 <check_pgdir>

    static_assert(KERNBASE % PTSIZE == 0 && KERNTOP % PTSIZE == 0);

    // recursively insert boot_pgdir in itself
    // to form a virtual page table at virtual address VPT
    boot_pgdir[PDX(VPT)] = PADDR(boot_pgdir) | PTE_P | PTE_W;
c0107681:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c0107686:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
c010768c:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c0107691:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107694:	81 7d f0 ff ff ff bf 	cmpl   $0xbfffffff,-0x10(%ebp)
c010769b:	77 17                	ja     c01076b4 <pmm_init+0x82>
c010769d:	ff 75 f0             	pushl  -0x10(%ebp)
c01076a0:	68 10 d3 10 c0       	push   $0xc010d310
c01076a5:	68 3a 01 00 00       	push   $0x13a
c01076aa:	68 34 d3 10 c0       	push   $0xc010d334
c01076af:	e8 49 8d ff ff       	call   c01003fd <__panic>
c01076b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01076b7:	05 00 00 00 40       	add    $0x40000000,%eax
c01076bc:	83 c8 03             	or     $0x3,%eax
c01076bf:	89 02                	mov    %eax,(%edx)

    // map all physical memory to linear memory with base linear addr KERNBASE
    // linear_addr KERNBASE ~ KERNBASE + KMEMSIZE = phy_addr 0 ~ KMEMSIZE
    boot_map_segment(boot_pgdir, KERNBASE, KMEMSIZE, 0, PTE_W);
c01076c1:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c01076c6:	83 ec 0c             	sub    $0xc,%esp
c01076c9:	6a 02                	push   $0x2
c01076cb:	6a 00                	push   $0x0
c01076cd:	68 00 00 00 38       	push   $0x38000000
c01076d2:	68 00 00 00 c0       	push   $0xc0000000
c01076d7:	50                   	push   %eax
c01076d8:	e8 29 fe ff ff       	call   c0107506 <boot_map_segment>
c01076dd:	83 c4 20             	add    $0x20,%esp

    // Since we are using bootloader's GDT,
    // we should reload gdt (second time, the last time) to get user segments and the TSS
    // map virtual_addr 0 ~ 4G = linear_addr 0 ~ 4G
    // then set kernel stack (ss:esp) in TSS, setup TSS in gdt, load TSS
    gdt_init();
c01076e0:	e8 60 f8 ff ff       	call   c0106f45 <gdt_init>

    //now the basic virtual memory map(see memalyout.h) is established.
    //check the correctness of the basic virtual memory map.
    check_boot_pgdir();
c01076e5:	e8 31 0d 00 00       	call   c010841b <check_boot_pgdir>

    print_pgdir();
c01076ea:	e8 27 11 00 00       	call   c0108816 <print_pgdir>
    
    kmalloc_init();
c01076ef:	e8 28 d9 ff ff       	call   c010501c <kmalloc_init>

}
c01076f4:	90                   	nop
c01076f5:	c9                   	leave  
c01076f6:	c3                   	ret    

c01076f7 <get_pte>:
//  pgdir:  the kernel virtual base address of PDT
//  la:     the linear address need to map
//  create: a logical value to decide if alloc a page for PT
// return vaule: the kernel virtual address of this pte
pte_t *
get_pte(pde_t *pgdir, uintptr_t la, bool create) {
c01076f7:	55                   	push   %ebp
c01076f8:	89 e5                	mov    %esp,%ebp
c01076fa:	83 ec 38             	sub    $0x38,%esp
                          // (7) set page directory entry's permission
    }
    return NULL;          // (8) return page table entry
#endif
    // (1) find page directory entry
    size_t pdx = PDX(la);       // index of this la in page dir table
c01076fd:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107700:	c1 e8 16             	shr    $0x16,%eax
c0107703:	89 45 f4             	mov    %eax,-0xc(%ebp)
    pde_t * pdep = pgdir + pdx; // NOTE: this is a virtual addr
c0107706:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107709:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0107710:	8b 45 08             	mov    0x8(%ebp),%eax
c0107713:	01 d0                	add    %edx,%eax
c0107715:	89 45 f0             	mov    %eax,-0x10(%ebp)
    // (2) check if entry is not present
    if (!(*pdep & PTE_P)) {
c0107718:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010771b:	8b 00                	mov    (%eax),%eax
c010771d:	83 e0 01             	and    $0x1,%eax
c0107720:	85 c0                	test   %eax,%eax
c0107722:	0f 85 ae 00 00 00    	jne    c01077d6 <get_pte+0xdf>
        // (3) check if creating is needed
        if (!create) {
c0107728:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010772c:	75 0a                	jne    c0107738 <get_pte+0x41>
            return NULL;
c010772e:	b8 00 00 00 00       	mov    $0x0,%eax
c0107733:	e9 01 01 00 00       	jmp    c0107839 <get_pte+0x142>
        }
        // alloc page for page table
        struct Page * pt_page =  alloc_page();
c0107738:	83 ec 0c             	sub    $0xc,%esp
c010773b:	6a 01                	push   $0x1
c010773d:	e8 49 f9 ff ff       	call   c010708b <alloc_pages>
c0107742:	83 c4 10             	add    $0x10,%esp
c0107745:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (pt_page == NULL) {
c0107748:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010774c:	75 0a                	jne    c0107758 <get_pte+0x61>
            return NULL;
c010774e:	b8 00 00 00 00       	mov    $0x0,%eax
c0107753:	e9 e1 00 00 00       	jmp    c0107839 <get_pte+0x142>
        }
        // (4) set page reference
        set_page_ref(pt_page, 1);
c0107758:	83 ec 08             	sub    $0x8,%esp
c010775b:	6a 01                	push   $0x1
c010775d:	ff 75 ec             	pushl  -0x14(%ebp)
c0107760:	e8 22 f7 ff ff       	call   c0106e87 <set_page_ref>
c0107765:	83 c4 10             	add    $0x10,%esp
        // (5) get linear address of page
        uintptr_t pt_addr = page2pa(pt_page);
c0107768:	83 ec 0c             	sub    $0xc,%esp
c010776b:	ff 75 ec             	pushl  -0x14(%ebp)
c010776e:	e8 1f f6 ff ff       	call   c0106d92 <page2pa>
c0107773:	83 c4 10             	add    $0x10,%esp
c0107776:	89 45 e8             	mov    %eax,-0x18(%ebp)
        // (6) clear page content using memset
        memset(KADDR(pt_addr), 0, PGSIZE);
c0107779:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010777c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010777f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107782:	c1 e8 0c             	shr    $0xc,%eax
c0107785:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0107788:	a1 80 0f 1b c0       	mov    0xc01b0f80,%eax
c010778d:	39 45 e0             	cmp    %eax,-0x20(%ebp)
c0107790:	72 17                	jb     c01077a9 <get_pte+0xb2>
c0107792:	ff 75 e4             	pushl  -0x1c(%ebp)
c0107795:	68 6c d2 10 c0       	push   $0xc010d26c
c010779a:	68 8d 01 00 00       	push   $0x18d
c010779f:	68 34 d3 10 c0       	push   $0xc010d334
c01077a4:	e8 54 8c ff ff       	call   c01003fd <__panic>
c01077a9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01077ac:	2d 00 00 00 40       	sub    $0x40000000,%eax
c01077b1:	83 ec 04             	sub    $0x4,%esp
c01077b4:	68 00 10 00 00       	push   $0x1000
c01077b9:	6a 00                	push   $0x0
c01077bb:	50                   	push   %eax
c01077bc:	e8 3c 39 00 00       	call   c010b0fd <memset>
c01077c1:	83 c4 10             	add    $0x10,%esp
        // (7) set page directory entry's permission
        *pdep = (PDE_ADDR(pt_addr)) | PTE_U | PTE_W | PTE_P; // PDE_ADDR: get pa &= ~0xFFF
c01077c4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01077c7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01077cc:	83 c8 07             	or     $0x7,%eax
c01077cf:	89 c2                	mov    %eax,%edx
c01077d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01077d4:	89 10                	mov    %edx,(%eax)
    }
    // (8) return page table entry
    size_t ptx = PTX(la);   // index of this la in page dir table
c01077d6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01077d9:	c1 e8 0c             	shr    $0xc,%eax
c01077dc:	25 ff 03 00 00       	and    $0x3ff,%eax
c01077e1:	89 45 dc             	mov    %eax,-0x24(%ebp)
    uintptr_t pt_pa = PDE_ADDR(*pdep);
c01077e4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01077e7:	8b 00                	mov    (%eax),%eax
c01077e9:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01077ee:	89 45 d8             	mov    %eax,-0x28(%ebp)
    pte_t * ptep = (pte_t *)KADDR(pt_pa) + ptx;
c01077f1:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01077f4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c01077f7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01077fa:	c1 e8 0c             	shr    $0xc,%eax
c01077fd:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0107800:	a1 80 0f 1b c0       	mov    0xc01b0f80,%eax
c0107805:	39 45 d0             	cmp    %eax,-0x30(%ebp)
c0107808:	72 17                	jb     c0107821 <get_pte+0x12a>
c010780a:	ff 75 d4             	pushl  -0x2c(%ebp)
c010780d:	68 6c d2 10 c0       	push   $0xc010d26c
c0107812:	68 94 01 00 00       	push   $0x194
c0107817:	68 34 d3 10 c0       	push   $0xc010d334
c010781c:	e8 dc 8b ff ff       	call   c01003fd <__panic>
c0107821:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0107824:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0107829:	89 c2                	mov    %eax,%edx
c010782b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010782e:	c1 e0 02             	shl    $0x2,%eax
c0107831:	01 d0                	add    %edx,%eax
c0107833:	89 45 cc             	mov    %eax,-0x34(%ebp)
    return ptep;
c0107836:	8b 45 cc             	mov    -0x34(%ebp),%eax
}
c0107839:	c9                   	leave  
c010783a:	c3                   	ret    

c010783b <get_page>:

//get_page - get related Page struct for linear address la using PDT pgdir
struct Page *
get_page(pde_t *pgdir, uintptr_t la, pte_t **ptep_store) {
c010783b:	55                   	push   %ebp
c010783c:	89 e5                	mov    %esp,%ebp
c010783e:	83 ec 18             	sub    $0x18,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c0107841:	83 ec 04             	sub    $0x4,%esp
c0107844:	6a 00                	push   $0x0
c0107846:	ff 75 0c             	pushl  0xc(%ebp)
c0107849:	ff 75 08             	pushl  0x8(%ebp)
c010784c:	e8 a6 fe ff ff       	call   c01076f7 <get_pte>
c0107851:	83 c4 10             	add    $0x10,%esp
c0107854:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep_store != NULL) {
c0107857:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010785b:	74 08                	je     c0107865 <get_page+0x2a>
        *ptep_store = ptep;
c010785d:	8b 45 10             	mov    0x10(%ebp),%eax
c0107860:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0107863:	89 10                	mov    %edx,(%eax)
    }
    if (ptep != NULL && *ptep & PTE_P) {
c0107865:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107869:	74 1f                	je     c010788a <get_page+0x4f>
c010786b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010786e:	8b 00                	mov    (%eax),%eax
c0107870:	83 e0 01             	and    $0x1,%eax
c0107873:	85 c0                	test   %eax,%eax
c0107875:	74 13                	je     c010788a <get_page+0x4f>
        return pte2page(*ptep);
c0107877:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010787a:	8b 00                	mov    (%eax),%eax
c010787c:	83 ec 0c             	sub    $0xc,%esp
c010787f:	50                   	push   %eax
c0107880:	e8 a2 f5 ff ff       	call   c0106e27 <pte2page>
c0107885:	83 c4 10             	add    $0x10,%esp
c0107888:	eb 05                	jmp    c010788f <get_page+0x54>
    }
    return NULL;
c010788a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010788f:	c9                   	leave  
c0107890:	c3                   	ret    

c0107891 <page_remove_pte>:

//page_remove_pte - free an Page sturct which is related linear address la
//                - and clean(invalidate) pte which is related linear address la
//note: PT is changed, so the TLB need to be invalidate 
static inline void
page_remove_pte(pde_t *pgdir, uintptr_t la, pte_t *ptep) {
c0107891:	55                   	push   %ebp
c0107892:	89 e5                	mov    %esp,%ebp
c0107894:	83 ec 18             	sub    $0x18,%esp
                                  //(5) clear second page table entry
                                  //(6) flush tlb
    }
#endif
    //(1) check if this page table entry is present
    if (!(*ptep & PTE_P)) {
c0107897:	8b 45 10             	mov    0x10(%ebp),%eax
c010789a:	8b 00                	mov    (%eax),%eax
c010789c:	83 e0 01             	and    $0x1,%eax
c010789f:	85 c0                	test   %eax,%eax
c01078a1:	74 57                	je     c01078fa <page_remove_pte+0x69>
        return;
    }
    //(2) find corresponding page to pte
    struct Page *page = pte2page(*ptep);
c01078a3:	8b 45 10             	mov    0x10(%ebp),%eax
c01078a6:	8b 00                	mov    (%eax),%eax
c01078a8:	83 ec 0c             	sub    $0xc,%esp
c01078ab:	50                   	push   %eax
c01078ac:	e8 76 f5 ff ff       	call   c0106e27 <pte2page>
c01078b1:	83 c4 10             	add    $0x10,%esp
c01078b4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    //(3) decrease page reference
    page_ref_dec(page);
c01078b7:	83 ec 0c             	sub    $0xc,%esp
c01078ba:	ff 75 f4             	pushl  -0xc(%ebp)
c01078bd:	e8 ea f5 ff ff       	call   c0106eac <page_ref_dec>
c01078c2:	83 c4 10             	add    $0x10,%esp
    //(4) and free this page when page reference reachs 0
    if (page->ref == 0) {
c01078c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01078c8:	8b 00                	mov    (%eax),%eax
c01078ca:	85 c0                	test   %eax,%eax
c01078cc:	75 10                	jne    c01078de <page_remove_pte+0x4d>
        free_page(page);
c01078ce:	83 ec 08             	sub    $0x8,%esp
c01078d1:	6a 01                	push   $0x1
c01078d3:	ff 75 f4             	pushl  -0xc(%ebp)
c01078d6:	e8 1c f8 ff ff       	call   c01070f7 <free_pages>
c01078db:	83 c4 10             	add    $0x10,%esp
    }
    //(5) clear second page table entry
    *ptep = 0;
c01078de:	8b 45 10             	mov    0x10(%ebp),%eax
c01078e1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    //(6) flush tlb
    tlb_invalidate(pgdir, la);
c01078e7:	83 ec 08             	sub    $0x8,%esp
c01078ea:	ff 75 0c             	pushl  0xc(%ebp)
c01078ed:	ff 75 08             	pushl  0x8(%ebp)
c01078f0:	e8 9c 04 00 00       	call   c0107d91 <tlb_invalidate>
c01078f5:	83 c4 10             	add    $0x10,%esp
c01078f8:	eb 01                	jmp    c01078fb <page_remove_pte+0x6a>
                                  //(6) flush tlb
    }
#endif
    //(1) check if this page table entry is present
    if (!(*ptep & PTE_P)) {
        return;
c01078fa:	90                   	nop
    }
    //(5) clear second page table entry
    *ptep = 0;
    //(6) flush tlb
    tlb_invalidate(pgdir, la);
}
c01078fb:	c9                   	leave  
c01078fc:	c3                   	ret    

c01078fd <unmap_range>:

void
unmap_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c01078fd:	55                   	push   %ebp
c01078fe:	89 e5                	mov    %esp,%ebp
c0107900:	83 ec 18             	sub    $0x18,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0107903:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107906:	25 ff 0f 00 00       	and    $0xfff,%eax
c010790b:	85 c0                	test   %eax,%eax
c010790d:	75 0c                	jne    c010791b <unmap_range+0x1e>
c010790f:	8b 45 10             	mov    0x10(%ebp),%eax
c0107912:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107917:	85 c0                	test   %eax,%eax
c0107919:	74 19                	je     c0107934 <unmap_range+0x37>
c010791b:	68 94 d3 10 c0       	push   $0xc010d394
c0107920:	68 59 d3 10 c0       	push   $0xc010d359
c0107925:	68 d7 01 00 00       	push   $0x1d7
c010792a:	68 34 d3 10 c0       	push   $0xc010d334
c010792f:	e8 c9 8a ff ff       	call   c01003fd <__panic>
    assert(USER_ACCESS(start, end));
c0107934:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c010793b:	76 11                	jbe    c010794e <unmap_range+0x51>
c010793d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107940:	3b 45 10             	cmp    0x10(%ebp),%eax
c0107943:	73 09                	jae    c010794e <unmap_range+0x51>
c0107945:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c010794c:	76 19                	jbe    c0107967 <unmap_range+0x6a>
c010794e:	68 bd d3 10 c0       	push   $0xc010d3bd
c0107953:	68 59 d3 10 c0       	push   $0xc010d359
c0107958:	68 d8 01 00 00       	push   $0x1d8
c010795d:	68 34 d3 10 c0       	push   $0xc010d334
c0107962:	e8 96 8a ff ff       	call   c01003fd <__panic>

    do {
        pte_t *ptep = get_pte(pgdir, start, 0);
c0107967:	83 ec 04             	sub    $0x4,%esp
c010796a:	6a 00                	push   $0x0
c010796c:	ff 75 0c             	pushl  0xc(%ebp)
c010796f:	ff 75 08             	pushl  0x8(%ebp)
c0107972:	e8 80 fd ff ff       	call   c01076f7 <get_pte>
c0107977:	83 c4 10             	add    $0x10,%esp
c010797a:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ptep == NULL) {
c010797d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107981:	75 18                	jne    c010799b <unmap_range+0x9e>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
c0107983:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107986:	05 00 00 40 00       	add    $0x400000,%eax
c010798b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010798e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107991:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0107996:	89 45 0c             	mov    %eax,0xc(%ebp)
            continue ;
c0107999:	eb 24                	jmp    c01079bf <unmap_range+0xc2>
        }
        if (*ptep != 0) {
c010799b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010799e:	8b 00                	mov    (%eax),%eax
c01079a0:	85 c0                	test   %eax,%eax
c01079a2:	74 14                	je     c01079b8 <unmap_range+0xbb>
            page_remove_pte(pgdir, start, ptep);
c01079a4:	83 ec 04             	sub    $0x4,%esp
c01079a7:	ff 75 f4             	pushl  -0xc(%ebp)
c01079aa:	ff 75 0c             	pushl  0xc(%ebp)
c01079ad:	ff 75 08             	pushl  0x8(%ebp)
c01079b0:	e8 dc fe ff ff       	call   c0107891 <page_remove_pte>
c01079b5:	83 c4 10             	add    $0x10,%esp
        }
        start += PGSIZE;
c01079b8:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
    } while (start != 0 && start < end);
c01079bf:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01079c3:	74 08                	je     c01079cd <unmap_range+0xd0>
c01079c5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01079c8:	3b 45 10             	cmp    0x10(%ebp),%eax
c01079cb:	72 9a                	jb     c0107967 <unmap_range+0x6a>
}
c01079cd:	90                   	nop
c01079ce:	c9                   	leave  
c01079cf:	c3                   	ret    

c01079d0 <exit_range>:

void
exit_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c01079d0:	55                   	push   %ebp
c01079d1:	89 e5                	mov    %esp,%ebp
c01079d3:	83 ec 18             	sub    $0x18,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c01079d6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01079d9:	25 ff 0f 00 00       	and    $0xfff,%eax
c01079de:	85 c0                	test   %eax,%eax
c01079e0:	75 0c                	jne    c01079ee <exit_range+0x1e>
c01079e2:	8b 45 10             	mov    0x10(%ebp),%eax
c01079e5:	25 ff 0f 00 00       	and    $0xfff,%eax
c01079ea:	85 c0                	test   %eax,%eax
c01079ec:	74 19                	je     c0107a07 <exit_range+0x37>
c01079ee:	68 94 d3 10 c0       	push   $0xc010d394
c01079f3:	68 59 d3 10 c0       	push   $0xc010d359
c01079f8:	68 e9 01 00 00       	push   $0x1e9
c01079fd:	68 34 d3 10 c0       	push   $0xc010d334
c0107a02:	e8 f6 89 ff ff       	call   c01003fd <__panic>
    assert(USER_ACCESS(start, end));
c0107a07:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0107a0e:	76 11                	jbe    c0107a21 <exit_range+0x51>
c0107a10:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107a13:	3b 45 10             	cmp    0x10(%ebp),%eax
c0107a16:	73 09                	jae    c0107a21 <exit_range+0x51>
c0107a18:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c0107a1f:	76 19                	jbe    c0107a3a <exit_range+0x6a>
c0107a21:	68 bd d3 10 c0       	push   $0xc010d3bd
c0107a26:	68 59 d3 10 c0       	push   $0xc010d359
c0107a2b:	68 ea 01 00 00       	push   $0x1ea
c0107a30:	68 34 d3 10 c0       	push   $0xc010d334
c0107a35:	e8 c3 89 ff ff       	call   c01003fd <__panic>

    start = ROUNDDOWN(start, PTSIZE);
c0107a3a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107a3d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0107a40:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107a43:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0107a48:	89 45 0c             	mov    %eax,0xc(%ebp)
    do {
        int pde_idx = PDX(start);
c0107a4b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107a4e:	c1 e8 16             	shr    $0x16,%eax
c0107a51:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pgdir[pde_idx] & PTE_P) {
c0107a54:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107a57:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0107a5e:	8b 45 08             	mov    0x8(%ebp),%eax
c0107a61:	01 d0                	add    %edx,%eax
c0107a63:	8b 00                	mov    (%eax),%eax
c0107a65:	83 e0 01             	and    $0x1,%eax
c0107a68:	85 c0                	test   %eax,%eax
c0107a6a:	74 40                	je     c0107aac <exit_range+0xdc>
            free_page(pde2page(pgdir[pde_idx]));
c0107a6c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107a6f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0107a76:	8b 45 08             	mov    0x8(%ebp),%eax
c0107a79:	01 d0                	add    %edx,%eax
c0107a7b:	8b 00                	mov    (%eax),%eax
c0107a7d:	83 ec 0c             	sub    $0xc,%esp
c0107a80:	50                   	push   %eax
c0107a81:	e8 db f3 ff ff       	call   c0106e61 <pde2page>
c0107a86:	83 c4 10             	add    $0x10,%esp
c0107a89:	83 ec 08             	sub    $0x8,%esp
c0107a8c:	6a 01                	push   $0x1
c0107a8e:	50                   	push   %eax
c0107a8f:	e8 63 f6 ff ff       	call   c01070f7 <free_pages>
c0107a94:	83 c4 10             	add    $0x10,%esp
            pgdir[pde_idx] = 0;
c0107a97:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107a9a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0107aa1:	8b 45 08             	mov    0x8(%ebp),%eax
c0107aa4:	01 d0                	add    %edx,%eax
c0107aa6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        }
        start += PTSIZE;
c0107aac:	81 45 0c 00 00 40 00 	addl   $0x400000,0xc(%ebp)
    } while (start != 0 && start < end);
c0107ab3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0107ab7:	74 08                	je     c0107ac1 <exit_range+0xf1>
c0107ab9:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107abc:	3b 45 10             	cmp    0x10(%ebp),%eax
c0107abf:	72 8a                	jb     c0107a4b <exit_range+0x7b>
}
c0107ac1:	90                   	nop
c0107ac2:	c9                   	leave  
c0107ac3:	c3                   	ret    

c0107ac4 <copy_range>:
 * @share: flags to indicate to dup OR share. We just use dup method, so it didn't be used.
 *
 * CALL GRAPH: copy_mm-->dup_mmap-->copy_range
 */
int
copy_range(pde_t *to, pde_t *from, uintptr_t start, uintptr_t end, bool share) {
c0107ac4:	55                   	push   %ebp
c0107ac5:	89 e5                	mov    %esp,%ebp
c0107ac7:	83 ec 38             	sub    $0x38,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0107aca:	8b 45 10             	mov    0x10(%ebp),%eax
c0107acd:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107ad2:	85 c0                	test   %eax,%eax
c0107ad4:	75 0c                	jne    c0107ae2 <copy_range+0x1e>
c0107ad6:	8b 45 14             	mov    0x14(%ebp),%eax
c0107ad9:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107ade:	85 c0                	test   %eax,%eax
c0107ae0:	74 19                	je     c0107afb <copy_range+0x37>
c0107ae2:	68 94 d3 10 c0       	push   $0xc010d394
c0107ae7:	68 59 d3 10 c0       	push   $0xc010d359
c0107aec:	68 ff 01 00 00       	push   $0x1ff
c0107af1:	68 34 d3 10 c0       	push   $0xc010d334
c0107af6:	e8 02 89 ff ff       	call   c01003fd <__panic>
    assert(USER_ACCESS(start, end));
c0107afb:	81 7d 10 ff ff 1f 00 	cmpl   $0x1fffff,0x10(%ebp)
c0107b02:	76 11                	jbe    c0107b15 <copy_range+0x51>
c0107b04:	8b 45 10             	mov    0x10(%ebp),%eax
c0107b07:	3b 45 14             	cmp    0x14(%ebp),%eax
c0107b0a:	73 09                	jae    c0107b15 <copy_range+0x51>
c0107b0c:	81 7d 14 00 00 00 b0 	cmpl   $0xb0000000,0x14(%ebp)
c0107b13:	76 19                	jbe    c0107b2e <copy_range+0x6a>
c0107b15:	68 bd d3 10 c0       	push   $0xc010d3bd
c0107b1a:	68 59 d3 10 c0       	push   $0xc010d359
c0107b1f:	68 00 02 00 00       	push   $0x200
c0107b24:	68 34 d3 10 c0       	push   $0xc010d334
c0107b29:	e8 cf 88 ff ff       	call   c01003fd <__panic>
    // copy content by page unit.
    do {
        //call get_pte to find process A's pte according to the addr start
        pte_t *ptep = get_pte(from, start, 0), *nptep;
c0107b2e:	83 ec 04             	sub    $0x4,%esp
c0107b31:	6a 00                	push   $0x0
c0107b33:	ff 75 10             	pushl  0x10(%ebp)
c0107b36:	ff 75 0c             	pushl  0xc(%ebp)
c0107b39:	e8 b9 fb ff ff       	call   c01076f7 <get_pte>
c0107b3e:	83 c4 10             	add    $0x10,%esp
c0107b41:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ptep == NULL) {
c0107b44:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107b48:	75 1b                	jne    c0107b65 <copy_range+0xa1>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
c0107b4a:	8b 45 10             	mov    0x10(%ebp),%eax
c0107b4d:	05 00 00 40 00       	add    $0x400000,%eax
c0107b52:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107b55:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107b58:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0107b5d:	89 45 10             	mov    %eax,0x10(%ebp)
            continue ;
c0107b60:	e9 21 01 00 00       	jmp    c0107c86 <copy_range+0x1c2>
        }
        //call get_pte to find process B's pte according to the addr start. If pte is NULL, just alloc a PT
        if (*ptep & PTE_P) {
c0107b65:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107b68:	8b 00                	mov    (%eax),%eax
c0107b6a:	83 e0 01             	and    $0x1,%eax
c0107b6d:	85 c0                	test   %eax,%eax
c0107b6f:	0f 84 0a 01 00 00    	je     c0107c7f <copy_range+0x1bb>
            if ((nptep = get_pte(to, start, 1)) == NULL) {
c0107b75:	83 ec 04             	sub    $0x4,%esp
c0107b78:	6a 01                	push   $0x1
c0107b7a:	ff 75 10             	pushl  0x10(%ebp)
c0107b7d:	ff 75 08             	pushl  0x8(%ebp)
c0107b80:	e8 72 fb ff ff       	call   c01076f7 <get_pte>
c0107b85:	83 c4 10             	add    $0x10,%esp
c0107b88:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0107b8b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0107b8f:	75 0a                	jne    c0107b9b <copy_range+0xd7>
                return -E_NO_MEM;
c0107b91:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0107b96:	e9 02 01 00 00       	jmp    c0107c9d <copy_range+0x1d9>
            }
            uint32_t perm = (*ptep & PTE_USER);
c0107b9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107b9e:	8b 00                	mov    (%eax),%eax
c0107ba0:	83 e0 07             	and    $0x7,%eax
c0107ba3:	89 45 e8             	mov    %eax,-0x18(%ebp)
            //get page from ptep
            struct Page *page = pte2page(*ptep);
c0107ba6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107ba9:	8b 00                	mov    (%eax),%eax
c0107bab:	83 ec 0c             	sub    $0xc,%esp
c0107bae:	50                   	push   %eax
c0107baf:	e8 73 f2 ff ff       	call   c0106e27 <pte2page>
c0107bb4:	83 c4 10             	add    $0x10,%esp
c0107bb7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            // alloc a page for process B
            struct Page *npage=alloc_page();
c0107bba:	83 ec 0c             	sub    $0xc,%esp
c0107bbd:	6a 01                	push   $0x1
c0107bbf:	e8 c7 f4 ff ff       	call   c010708b <alloc_pages>
c0107bc4:	83 c4 10             	add    $0x10,%esp
c0107bc7:	89 45 e0             	mov    %eax,-0x20(%ebp)
            assert(page!=NULL);
c0107bca:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0107bce:	75 19                	jne    c0107be9 <copy_range+0x125>
c0107bd0:	68 d5 d3 10 c0       	push   $0xc010d3d5
c0107bd5:	68 59 d3 10 c0       	push   $0xc010d359
c0107bda:	68 13 02 00 00       	push   $0x213
c0107bdf:	68 34 d3 10 c0       	push   $0xc010d334
c0107be4:	e8 14 88 ff ff       	call   c01003fd <__panic>
            assert(npage!=NULL);
c0107be9:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0107bed:	75 19                	jne    c0107c08 <copy_range+0x144>
c0107bef:	68 e0 d3 10 c0       	push   $0xc010d3e0
c0107bf4:	68 59 d3 10 c0       	push   $0xc010d359
c0107bf9:	68 14 02 00 00       	push   $0x214
c0107bfe:	68 34 d3 10 c0       	push   $0xc010d334
c0107c03:	e8 f5 87 ff ff       	call   c01003fd <__panic>
            int ret=0;
c0107c08:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
            * (2) find dst_kvaddr: the kernel virtual address of npage
            * (3) memory copy from src_kvaddr to dst_kvaddr, size is PGSIZE
            * (4) build the map of phy addr of  nage with the linear addr start
            */
            // (1) find src_kvaddr: the kernel virtual address of page
            uintptr_t src_kvaddr = page2kva(page);
c0107c0f:	83 ec 0c             	sub    $0xc,%esp
c0107c12:	ff 75 e4             	pushl  -0x1c(%ebp)
c0107c15:	e8 c8 f1 ff ff       	call   c0106de2 <page2kva>
c0107c1a:	83 c4 10             	add    $0x10,%esp
c0107c1d:	89 45 d8             	mov    %eax,-0x28(%ebp)
            // (2) find dst_kvaddr: the kernel virtual address of npage
            uintptr_t dst_kvaddr = page2kva(npage);
c0107c20:	83 ec 0c             	sub    $0xc,%esp
c0107c23:	ff 75 e0             	pushl  -0x20(%ebp)
c0107c26:	e8 b7 f1 ff ff       	call   c0106de2 <page2kva>
c0107c2b:	83 c4 10             	add    $0x10,%esp
c0107c2e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
            // (3) memory copy from src_kvaddr to dst_kvaddr, size is PGSIZE
            memcpy(dst_kvaddr, src_kvaddr, PGSIZE);
c0107c31:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0107c34:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0107c37:	83 ec 04             	sub    $0x4,%esp
c0107c3a:	68 00 10 00 00       	push   $0x1000
c0107c3f:	52                   	push   %edx
c0107c40:	50                   	push   %eax
c0107c41:	e8 9a 35 00 00       	call   c010b1e0 <memcpy>
c0107c46:	83 c4 10             	add    $0x10,%esp
            // (4) build the map of phy addr of  nage with the linear addr start
            ret = page_insert(to, npage, start, perm);
c0107c49:	ff 75 e8             	pushl  -0x18(%ebp)
c0107c4c:	ff 75 10             	pushl  0x10(%ebp)
c0107c4f:	ff 75 e0             	pushl  -0x20(%ebp)
c0107c52:	ff 75 08             	pushl  0x8(%ebp)
c0107c55:	e8 7e 00 00 00       	call   c0107cd8 <page_insert>
c0107c5a:	83 c4 10             	add    $0x10,%esp
c0107c5d:	89 45 dc             	mov    %eax,-0x24(%ebp)
            assert(ret == 0);
c0107c60:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0107c64:	74 19                	je     c0107c7f <copy_range+0x1bb>
c0107c66:	68 ec d3 10 c0       	push   $0xc010d3ec
c0107c6b:	68 59 d3 10 c0       	push   $0xc010d359
c0107c70:	68 2c 02 00 00       	push   $0x22c
c0107c75:	68 34 d3 10 c0       	push   $0xc010d334
c0107c7a:	e8 7e 87 ff ff       	call   c01003fd <__panic>
        }
        start += PGSIZE;
c0107c7f:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    } while (start != 0 && start < end);
c0107c86:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0107c8a:	74 0c                	je     c0107c98 <copy_range+0x1d4>
c0107c8c:	8b 45 10             	mov    0x10(%ebp),%eax
c0107c8f:	3b 45 14             	cmp    0x14(%ebp),%eax
c0107c92:	0f 82 96 fe ff ff    	jb     c0107b2e <copy_range+0x6a>
    return 0;
c0107c98:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107c9d:	c9                   	leave  
c0107c9e:	c3                   	ret    

c0107c9f <page_remove>:

//page_remove - free an Page which is related linear address la and has an validated pte
void
page_remove(pde_t *pgdir, uintptr_t la) {
c0107c9f:	55                   	push   %ebp
c0107ca0:	89 e5                	mov    %esp,%ebp
c0107ca2:	83 ec 18             	sub    $0x18,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c0107ca5:	83 ec 04             	sub    $0x4,%esp
c0107ca8:	6a 00                	push   $0x0
c0107caa:	ff 75 0c             	pushl  0xc(%ebp)
c0107cad:	ff 75 08             	pushl  0x8(%ebp)
c0107cb0:	e8 42 fa ff ff       	call   c01076f7 <get_pte>
c0107cb5:	83 c4 10             	add    $0x10,%esp
c0107cb8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep != NULL) {
c0107cbb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107cbf:	74 14                	je     c0107cd5 <page_remove+0x36>
        page_remove_pte(pgdir, la, ptep);
c0107cc1:	83 ec 04             	sub    $0x4,%esp
c0107cc4:	ff 75 f4             	pushl  -0xc(%ebp)
c0107cc7:	ff 75 0c             	pushl  0xc(%ebp)
c0107cca:	ff 75 08             	pushl  0x8(%ebp)
c0107ccd:	e8 bf fb ff ff       	call   c0107891 <page_remove_pte>
c0107cd2:	83 c4 10             	add    $0x10,%esp
    }
}
c0107cd5:	90                   	nop
c0107cd6:	c9                   	leave  
c0107cd7:	c3                   	ret    

c0107cd8 <page_insert>:
//  la:    the linear address need to map
//  perm:  the permission of this Page which is setted in related pte
// return value: always 0
//note: PT is changed, so the TLB need to be invalidate 
int
page_insert(pde_t *pgdir, struct Page *page, uintptr_t la, uint32_t perm) {
c0107cd8:	55                   	push   %ebp
c0107cd9:	89 e5                	mov    %esp,%ebp
c0107cdb:	83 ec 18             	sub    $0x18,%esp
    pte_t *ptep = get_pte(pgdir, la, 1);
c0107cde:	83 ec 04             	sub    $0x4,%esp
c0107ce1:	6a 01                	push   $0x1
c0107ce3:	ff 75 10             	pushl  0x10(%ebp)
c0107ce6:	ff 75 08             	pushl  0x8(%ebp)
c0107ce9:	e8 09 fa ff ff       	call   c01076f7 <get_pte>
c0107cee:	83 c4 10             	add    $0x10,%esp
c0107cf1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep == NULL) {
c0107cf4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107cf8:	75 0a                	jne    c0107d04 <page_insert+0x2c>
        return -E_NO_MEM;
c0107cfa:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0107cff:	e9 8b 00 00 00       	jmp    c0107d8f <page_insert+0xb7>
    }
    page_ref_inc(page);
c0107d04:	83 ec 0c             	sub    $0xc,%esp
c0107d07:	ff 75 0c             	pushl  0xc(%ebp)
c0107d0a:	e8 86 f1 ff ff       	call   c0106e95 <page_ref_inc>
c0107d0f:	83 c4 10             	add    $0x10,%esp
    if (*ptep & PTE_P) {
c0107d12:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107d15:	8b 00                	mov    (%eax),%eax
c0107d17:	83 e0 01             	and    $0x1,%eax
c0107d1a:	85 c0                	test   %eax,%eax
c0107d1c:	74 40                	je     c0107d5e <page_insert+0x86>
        struct Page *p = pte2page(*ptep);
c0107d1e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107d21:	8b 00                	mov    (%eax),%eax
c0107d23:	83 ec 0c             	sub    $0xc,%esp
c0107d26:	50                   	push   %eax
c0107d27:	e8 fb f0 ff ff       	call   c0106e27 <pte2page>
c0107d2c:	83 c4 10             	add    $0x10,%esp
c0107d2f:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (p == page) {
c0107d32:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107d35:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0107d38:	75 10                	jne    c0107d4a <page_insert+0x72>
            page_ref_dec(page);
c0107d3a:	83 ec 0c             	sub    $0xc,%esp
c0107d3d:	ff 75 0c             	pushl  0xc(%ebp)
c0107d40:	e8 67 f1 ff ff       	call   c0106eac <page_ref_dec>
c0107d45:	83 c4 10             	add    $0x10,%esp
c0107d48:	eb 14                	jmp    c0107d5e <page_insert+0x86>
        }
        else {
            page_remove_pte(pgdir, la, ptep);
c0107d4a:	83 ec 04             	sub    $0x4,%esp
c0107d4d:	ff 75 f4             	pushl  -0xc(%ebp)
c0107d50:	ff 75 10             	pushl  0x10(%ebp)
c0107d53:	ff 75 08             	pushl  0x8(%ebp)
c0107d56:	e8 36 fb ff ff       	call   c0107891 <page_remove_pte>
c0107d5b:	83 c4 10             	add    $0x10,%esp
        }
    }
    *ptep = page2pa(page) | PTE_P | perm;
c0107d5e:	83 ec 0c             	sub    $0xc,%esp
c0107d61:	ff 75 0c             	pushl  0xc(%ebp)
c0107d64:	e8 29 f0 ff ff       	call   c0106d92 <page2pa>
c0107d69:	83 c4 10             	add    $0x10,%esp
c0107d6c:	0b 45 14             	or     0x14(%ebp),%eax
c0107d6f:	83 c8 01             	or     $0x1,%eax
c0107d72:	89 c2                	mov    %eax,%edx
c0107d74:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107d77:	89 10                	mov    %edx,(%eax)
    tlb_invalidate(pgdir, la);
c0107d79:	83 ec 08             	sub    $0x8,%esp
c0107d7c:	ff 75 10             	pushl  0x10(%ebp)
c0107d7f:	ff 75 08             	pushl  0x8(%ebp)
c0107d82:	e8 0a 00 00 00       	call   c0107d91 <tlb_invalidate>
c0107d87:	83 c4 10             	add    $0x10,%esp
    return 0;
c0107d8a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107d8f:	c9                   	leave  
c0107d90:	c3                   	ret    

c0107d91 <tlb_invalidate>:

// invalidate a TLB entry, but only if the page tables being
// edited are the ones currently in use by the processor.
void
tlb_invalidate(pde_t *pgdir, uintptr_t la) {
c0107d91:	55                   	push   %ebp
c0107d92:	89 e5                	mov    %esp,%ebp
c0107d94:	83 ec 18             	sub    $0x18,%esp
}

static inline uintptr_t
rcr3(void) {
    uintptr_t cr3;
    asm volatile ("mov %%cr3, %0" : "=r" (cr3) :: "memory");
c0107d97:	0f 20 d8             	mov    %cr3,%eax
c0107d9a:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return cr3;
c0107d9d:	8b 55 ec             	mov    -0x14(%ebp),%edx
    if (rcr3() == PADDR(pgdir)) {
c0107da0:	8b 45 08             	mov    0x8(%ebp),%eax
c0107da3:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107da6:	81 7d f0 ff ff ff bf 	cmpl   $0xbfffffff,-0x10(%ebp)
c0107dad:	77 17                	ja     c0107dc6 <tlb_invalidate+0x35>
c0107daf:	ff 75 f0             	pushl  -0x10(%ebp)
c0107db2:	68 10 d3 10 c0       	push   $0xc010d310
c0107db7:	68 5d 02 00 00       	push   $0x25d
c0107dbc:	68 34 d3 10 c0       	push   $0xc010d334
c0107dc1:	e8 37 86 ff ff       	call   c01003fd <__panic>
c0107dc6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107dc9:	05 00 00 00 40       	add    $0x40000000,%eax
c0107dce:	39 c2                	cmp    %eax,%edx
c0107dd0:	75 0c                	jne    c0107dde <tlb_invalidate+0x4d>
        invlpg((void *)la);
c0107dd2:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107dd5:	89 45 f4             	mov    %eax,-0xc(%ebp)
}

static inline void
invlpg(void *addr) {
    asm volatile ("invlpg (%0)" :: "r" (addr) : "memory");
c0107dd8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107ddb:	0f 01 38             	invlpg (%eax)
    }
}
c0107dde:	90                   	nop
c0107ddf:	c9                   	leave  
c0107de0:	c3                   	ret    

c0107de1 <pgdir_alloc_page>:

// pgdir_alloc_page - call alloc_page & page_insert functions to 
//                  - allocate a page size memory & setup an addr map
//                  - pa<->la with linear address la and the PDT pgdir
struct Page *
pgdir_alloc_page(pde_t *pgdir, uintptr_t la, uint32_t perm) {
c0107de1:	55                   	push   %ebp
c0107de2:	89 e5                	mov    %esp,%ebp
c0107de4:	83 ec 18             	sub    $0x18,%esp
    struct Page *page = alloc_page();
c0107de7:	83 ec 0c             	sub    $0xc,%esp
c0107dea:	6a 01                	push   $0x1
c0107dec:	e8 9a f2 ff ff       	call   c010708b <alloc_pages>
c0107df1:	83 c4 10             	add    $0x10,%esp
c0107df4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c0107df7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107dfb:	0f 84 8c 00 00 00    	je     c0107e8d <pgdir_alloc_page+0xac>
        if (page_insert(pgdir, page, la, perm) != 0) {
c0107e01:	ff 75 10             	pushl  0x10(%ebp)
c0107e04:	ff 75 0c             	pushl  0xc(%ebp)
c0107e07:	ff 75 f4             	pushl  -0xc(%ebp)
c0107e0a:	ff 75 08             	pushl  0x8(%ebp)
c0107e0d:	e8 c6 fe ff ff       	call   c0107cd8 <page_insert>
c0107e12:	83 c4 10             	add    $0x10,%esp
c0107e15:	85 c0                	test   %eax,%eax
c0107e17:	74 17                	je     c0107e30 <pgdir_alloc_page+0x4f>
            free_page(page);
c0107e19:	83 ec 08             	sub    $0x8,%esp
c0107e1c:	6a 01                	push   $0x1
c0107e1e:	ff 75 f4             	pushl  -0xc(%ebp)
c0107e21:	e8 d1 f2 ff ff       	call   c01070f7 <free_pages>
c0107e26:	83 c4 10             	add    $0x10,%esp
            return NULL;
c0107e29:	b8 00 00 00 00       	mov    $0x0,%eax
c0107e2e:	eb 60                	jmp    c0107e90 <pgdir_alloc_page+0xaf>
        }
        if (swap_init_ok){
c0107e30:	a1 6c 0f 1b c0       	mov    0xc01b0f6c,%eax
c0107e35:	85 c0                	test   %eax,%eax
c0107e37:	74 54                	je     c0107e8d <pgdir_alloc_page+0xac>
            if(check_mm_struct!=NULL) {
c0107e39:	a1 d0 30 1b c0       	mov    0xc01b30d0,%eax
c0107e3e:	85 c0                	test   %eax,%eax
c0107e40:	74 4b                	je     c0107e8d <pgdir_alloc_page+0xac>
                swap_map_swappable(check_mm_struct, la, page, 0);
c0107e42:	a1 d0 30 1b c0       	mov    0xc01b30d0,%eax
c0107e47:	6a 00                	push   $0x0
c0107e49:	ff 75 f4             	pushl  -0xc(%ebp)
c0107e4c:	ff 75 0c             	pushl  0xc(%ebp)
c0107e4f:	50                   	push   %eax
c0107e50:	e8 be d5 ff ff       	call   c0105413 <swap_map_swappable>
c0107e55:	83 c4 10             	add    $0x10,%esp
                page->pra_vaddr=la;
c0107e58:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107e5b:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107e5e:	89 50 1c             	mov    %edx,0x1c(%eax)
                assert(page_ref(page) == 1);
c0107e61:	83 ec 0c             	sub    $0xc,%esp
c0107e64:	ff 75 f4             	pushl  -0xc(%ebp)
c0107e67:	e8 11 f0 ff ff       	call   c0106e7d <page_ref>
c0107e6c:	83 c4 10             	add    $0x10,%esp
c0107e6f:	83 f8 01             	cmp    $0x1,%eax
c0107e72:	74 19                	je     c0107e8d <pgdir_alloc_page+0xac>
c0107e74:	68 f5 d3 10 c0       	push   $0xc010d3f5
c0107e79:	68 59 d3 10 c0       	push   $0xc010d359
c0107e7e:	68 71 02 00 00       	push   $0x271
c0107e83:	68 34 d3 10 c0       	push   $0xc010d334
c0107e88:	e8 70 85 ff ff       	call   c01003fd <__panic>
            }
        }

    }

    return page;
c0107e8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0107e90:	c9                   	leave  
c0107e91:	c3                   	ret    

c0107e92 <check_alloc_page>:

static void
check_alloc_page(void) {
c0107e92:	55                   	push   %ebp
c0107e93:	89 e5                	mov    %esp,%ebp
c0107e95:	83 ec 08             	sub    $0x8,%esp
    pmm_manager->check();
c0107e98:	a1 b0 31 1b c0       	mov    0xc01b31b0,%eax
c0107e9d:	8b 40 18             	mov    0x18(%eax),%eax
c0107ea0:	ff d0                	call   *%eax
    cprintf("check_alloc_page() succeeded!\n");
c0107ea2:	83 ec 0c             	sub    $0xc,%esp
c0107ea5:	68 0c d4 10 c0       	push   $0xc010d40c
c0107eaa:	e8 e8 83 ff ff       	call   c0100297 <cprintf>
c0107eaf:	83 c4 10             	add    $0x10,%esp
}
c0107eb2:	90                   	nop
c0107eb3:	c9                   	leave  
c0107eb4:	c3                   	ret    

c0107eb5 <check_pgdir>:

static void
check_pgdir(void) {
c0107eb5:	55                   	push   %ebp
c0107eb6:	89 e5                	mov    %esp,%ebp
c0107eb8:	83 ec 28             	sub    $0x28,%esp
    assert(npage <= KMEMSIZE / PGSIZE);
c0107ebb:	a1 80 0f 1b c0       	mov    0xc01b0f80,%eax
c0107ec0:	3d 00 80 03 00       	cmp    $0x38000,%eax
c0107ec5:	76 19                	jbe    c0107ee0 <check_pgdir+0x2b>
c0107ec7:	68 2b d4 10 c0       	push   $0xc010d42b
c0107ecc:	68 59 d3 10 c0       	push   $0xc010d359
c0107ed1:	68 89 02 00 00       	push   $0x289
c0107ed6:	68 34 d3 10 c0       	push   $0xc010d334
c0107edb:	e8 1d 85 ff ff       	call   c01003fd <__panic>
    assert(boot_pgdir != NULL && (uint32_t)PGOFF(boot_pgdir) == 0);
c0107ee0:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c0107ee5:	85 c0                	test   %eax,%eax
c0107ee7:	74 0e                	je     c0107ef7 <check_pgdir+0x42>
c0107ee9:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c0107eee:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107ef3:	85 c0                	test   %eax,%eax
c0107ef5:	74 19                	je     c0107f10 <check_pgdir+0x5b>
c0107ef7:	68 48 d4 10 c0       	push   $0xc010d448
c0107efc:	68 59 d3 10 c0       	push   $0xc010d359
c0107f01:	68 8a 02 00 00       	push   $0x28a
c0107f06:	68 34 d3 10 c0       	push   $0xc010d334
c0107f0b:	e8 ed 84 ff ff       	call   c01003fd <__panic>
    assert(get_page(boot_pgdir, 0x0, NULL) == NULL);
c0107f10:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c0107f15:	83 ec 04             	sub    $0x4,%esp
c0107f18:	6a 00                	push   $0x0
c0107f1a:	6a 00                	push   $0x0
c0107f1c:	50                   	push   %eax
c0107f1d:	e8 19 f9 ff ff       	call   c010783b <get_page>
c0107f22:	83 c4 10             	add    $0x10,%esp
c0107f25:	85 c0                	test   %eax,%eax
c0107f27:	74 19                	je     c0107f42 <check_pgdir+0x8d>
c0107f29:	68 80 d4 10 c0       	push   $0xc010d480
c0107f2e:	68 59 d3 10 c0       	push   $0xc010d359
c0107f33:	68 8b 02 00 00       	push   $0x28b
c0107f38:	68 34 d3 10 c0       	push   $0xc010d334
c0107f3d:	e8 bb 84 ff ff       	call   c01003fd <__panic>

    struct Page *p1, *p2;
    p1 = alloc_page();
c0107f42:	83 ec 0c             	sub    $0xc,%esp
c0107f45:	6a 01                	push   $0x1
c0107f47:	e8 3f f1 ff ff       	call   c010708b <alloc_pages>
c0107f4c:	83 c4 10             	add    $0x10,%esp
c0107f4f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(page_insert(boot_pgdir, p1, 0x0, 0) == 0);
c0107f52:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c0107f57:	6a 00                	push   $0x0
c0107f59:	6a 00                	push   $0x0
c0107f5b:	ff 75 f4             	pushl  -0xc(%ebp)
c0107f5e:	50                   	push   %eax
c0107f5f:	e8 74 fd ff ff       	call   c0107cd8 <page_insert>
c0107f64:	83 c4 10             	add    $0x10,%esp
c0107f67:	85 c0                	test   %eax,%eax
c0107f69:	74 19                	je     c0107f84 <check_pgdir+0xcf>
c0107f6b:	68 a8 d4 10 c0       	push   $0xc010d4a8
c0107f70:	68 59 d3 10 c0       	push   $0xc010d359
c0107f75:	68 8f 02 00 00       	push   $0x28f
c0107f7a:	68 34 d3 10 c0       	push   $0xc010d334
c0107f7f:	e8 79 84 ff ff       	call   c01003fd <__panic>

    pte_t *ptep;
    assert((ptep = get_pte(boot_pgdir, 0x0, 0)) != NULL);
c0107f84:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c0107f89:	83 ec 04             	sub    $0x4,%esp
c0107f8c:	6a 00                	push   $0x0
c0107f8e:	6a 00                	push   $0x0
c0107f90:	50                   	push   %eax
c0107f91:	e8 61 f7 ff ff       	call   c01076f7 <get_pte>
c0107f96:	83 c4 10             	add    $0x10,%esp
c0107f99:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107f9c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0107fa0:	75 19                	jne    c0107fbb <check_pgdir+0x106>
c0107fa2:	68 d4 d4 10 c0       	push   $0xc010d4d4
c0107fa7:	68 59 d3 10 c0       	push   $0xc010d359
c0107fac:	68 92 02 00 00       	push   $0x292
c0107fb1:	68 34 d3 10 c0       	push   $0xc010d334
c0107fb6:	e8 42 84 ff ff       	call   c01003fd <__panic>
    assert(pte2page(*ptep) == p1);
c0107fbb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107fbe:	8b 00                	mov    (%eax),%eax
c0107fc0:	83 ec 0c             	sub    $0xc,%esp
c0107fc3:	50                   	push   %eax
c0107fc4:	e8 5e ee ff ff       	call   c0106e27 <pte2page>
c0107fc9:	83 c4 10             	add    $0x10,%esp
c0107fcc:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0107fcf:	74 19                	je     c0107fea <check_pgdir+0x135>
c0107fd1:	68 01 d5 10 c0       	push   $0xc010d501
c0107fd6:	68 59 d3 10 c0       	push   $0xc010d359
c0107fdb:	68 93 02 00 00       	push   $0x293
c0107fe0:	68 34 d3 10 c0       	push   $0xc010d334
c0107fe5:	e8 13 84 ff ff       	call   c01003fd <__panic>
    assert(page_ref(p1) == 1);
c0107fea:	83 ec 0c             	sub    $0xc,%esp
c0107fed:	ff 75 f4             	pushl  -0xc(%ebp)
c0107ff0:	e8 88 ee ff ff       	call   c0106e7d <page_ref>
c0107ff5:	83 c4 10             	add    $0x10,%esp
c0107ff8:	83 f8 01             	cmp    $0x1,%eax
c0107ffb:	74 19                	je     c0108016 <check_pgdir+0x161>
c0107ffd:	68 17 d5 10 c0       	push   $0xc010d517
c0108002:	68 59 d3 10 c0       	push   $0xc010d359
c0108007:	68 94 02 00 00       	push   $0x294
c010800c:	68 34 d3 10 c0       	push   $0xc010d334
c0108011:	e8 e7 83 ff ff       	call   c01003fd <__panic>

    ptep = &((pte_t *)KADDR(PDE_ADDR(boot_pgdir[0])))[1];
c0108016:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c010801b:	8b 00                	mov    (%eax),%eax
c010801d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0108022:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0108025:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108028:	c1 e8 0c             	shr    $0xc,%eax
c010802b:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010802e:	a1 80 0f 1b c0       	mov    0xc01b0f80,%eax
c0108033:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c0108036:	72 17                	jb     c010804f <check_pgdir+0x19a>
c0108038:	ff 75 ec             	pushl  -0x14(%ebp)
c010803b:	68 6c d2 10 c0       	push   $0xc010d26c
c0108040:	68 96 02 00 00       	push   $0x296
c0108045:	68 34 d3 10 c0       	push   $0xc010d334
c010804a:	e8 ae 83 ff ff       	call   c01003fd <__panic>
c010804f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108052:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0108057:	83 c0 04             	add    $0x4,%eax
c010805a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    assert(get_pte(boot_pgdir, PGSIZE, 0) == ptep);
c010805d:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c0108062:	83 ec 04             	sub    $0x4,%esp
c0108065:	6a 00                	push   $0x0
c0108067:	68 00 10 00 00       	push   $0x1000
c010806c:	50                   	push   %eax
c010806d:	e8 85 f6 ff ff       	call   c01076f7 <get_pte>
c0108072:	83 c4 10             	add    $0x10,%esp
c0108075:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0108078:	74 19                	je     c0108093 <check_pgdir+0x1de>
c010807a:	68 2c d5 10 c0       	push   $0xc010d52c
c010807f:	68 59 d3 10 c0       	push   $0xc010d359
c0108084:	68 97 02 00 00       	push   $0x297
c0108089:	68 34 d3 10 c0       	push   $0xc010d334
c010808e:	e8 6a 83 ff ff       	call   c01003fd <__panic>

    p2 = alloc_page();
c0108093:	83 ec 0c             	sub    $0xc,%esp
c0108096:	6a 01                	push   $0x1
c0108098:	e8 ee ef ff ff       	call   c010708b <alloc_pages>
c010809d:	83 c4 10             	add    $0x10,%esp
c01080a0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(page_insert(boot_pgdir, p2, PGSIZE, PTE_U | PTE_W) == 0);
c01080a3:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c01080a8:	6a 06                	push   $0x6
c01080aa:	68 00 10 00 00       	push   $0x1000
c01080af:	ff 75 e4             	pushl  -0x1c(%ebp)
c01080b2:	50                   	push   %eax
c01080b3:	e8 20 fc ff ff       	call   c0107cd8 <page_insert>
c01080b8:	83 c4 10             	add    $0x10,%esp
c01080bb:	85 c0                	test   %eax,%eax
c01080bd:	74 19                	je     c01080d8 <check_pgdir+0x223>
c01080bf:	68 54 d5 10 c0       	push   $0xc010d554
c01080c4:	68 59 d3 10 c0       	push   $0xc010d359
c01080c9:	68 9a 02 00 00       	push   $0x29a
c01080ce:	68 34 d3 10 c0       	push   $0xc010d334
c01080d3:	e8 25 83 ff ff       	call   c01003fd <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c01080d8:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c01080dd:	83 ec 04             	sub    $0x4,%esp
c01080e0:	6a 00                	push   $0x0
c01080e2:	68 00 10 00 00       	push   $0x1000
c01080e7:	50                   	push   %eax
c01080e8:	e8 0a f6 ff ff       	call   c01076f7 <get_pte>
c01080ed:	83 c4 10             	add    $0x10,%esp
c01080f0:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01080f3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01080f7:	75 19                	jne    c0108112 <check_pgdir+0x25d>
c01080f9:	68 8c d5 10 c0       	push   $0xc010d58c
c01080fe:	68 59 d3 10 c0       	push   $0xc010d359
c0108103:	68 9b 02 00 00       	push   $0x29b
c0108108:	68 34 d3 10 c0       	push   $0xc010d334
c010810d:	e8 eb 82 ff ff       	call   c01003fd <__panic>
    assert(*ptep & PTE_U);
c0108112:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108115:	8b 00                	mov    (%eax),%eax
c0108117:	83 e0 04             	and    $0x4,%eax
c010811a:	85 c0                	test   %eax,%eax
c010811c:	75 19                	jne    c0108137 <check_pgdir+0x282>
c010811e:	68 bc d5 10 c0       	push   $0xc010d5bc
c0108123:	68 59 d3 10 c0       	push   $0xc010d359
c0108128:	68 9c 02 00 00       	push   $0x29c
c010812d:	68 34 d3 10 c0       	push   $0xc010d334
c0108132:	e8 c6 82 ff ff       	call   c01003fd <__panic>
    assert(*ptep & PTE_W);
c0108137:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010813a:	8b 00                	mov    (%eax),%eax
c010813c:	83 e0 02             	and    $0x2,%eax
c010813f:	85 c0                	test   %eax,%eax
c0108141:	75 19                	jne    c010815c <check_pgdir+0x2a7>
c0108143:	68 ca d5 10 c0       	push   $0xc010d5ca
c0108148:	68 59 d3 10 c0       	push   $0xc010d359
c010814d:	68 9d 02 00 00       	push   $0x29d
c0108152:	68 34 d3 10 c0       	push   $0xc010d334
c0108157:	e8 a1 82 ff ff       	call   c01003fd <__panic>
    assert(boot_pgdir[0] & PTE_U);
c010815c:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c0108161:	8b 00                	mov    (%eax),%eax
c0108163:	83 e0 04             	and    $0x4,%eax
c0108166:	85 c0                	test   %eax,%eax
c0108168:	75 19                	jne    c0108183 <check_pgdir+0x2ce>
c010816a:	68 d8 d5 10 c0       	push   $0xc010d5d8
c010816f:	68 59 d3 10 c0       	push   $0xc010d359
c0108174:	68 9e 02 00 00       	push   $0x29e
c0108179:	68 34 d3 10 c0       	push   $0xc010d334
c010817e:	e8 7a 82 ff ff       	call   c01003fd <__panic>
    assert(page_ref(p2) == 1);
c0108183:	83 ec 0c             	sub    $0xc,%esp
c0108186:	ff 75 e4             	pushl  -0x1c(%ebp)
c0108189:	e8 ef ec ff ff       	call   c0106e7d <page_ref>
c010818e:	83 c4 10             	add    $0x10,%esp
c0108191:	83 f8 01             	cmp    $0x1,%eax
c0108194:	74 19                	je     c01081af <check_pgdir+0x2fa>
c0108196:	68 ee d5 10 c0       	push   $0xc010d5ee
c010819b:	68 59 d3 10 c0       	push   $0xc010d359
c01081a0:	68 9f 02 00 00       	push   $0x29f
c01081a5:	68 34 d3 10 c0       	push   $0xc010d334
c01081aa:	e8 4e 82 ff ff       	call   c01003fd <__panic>

    assert(page_insert(boot_pgdir, p1, PGSIZE, 0) == 0);
c01081af:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c01081b4:	6a 00                	push   $0x0
c01081b6:	68 00 10 00 00       	push   $0x1000
c01081bb:	ff 75 f4             	pushl  -0xc(%ebp)
c01081be:	50                   	push   %eax
c01081bf:	e8 14 fb ff ff       	call   c0107cd8 <page_insert>
c01081c4:	83 c4 10             	add    $0x10,%esp
c01081c7:	85 c0                	test   %eax,%eax
c01081c9:	74 19                	je     c01081e4 <check_pgdir+0x32f>
c01081cb:	68 00 d6 10 c0       	push   $0xc010d600
c01081d0:	68 59 d3 10 c0       	push   $0xc010d359
c01081d5:	68 a1 02 00 00       	push   $0x2a1
c01081da:	68 34 d3 10 c0       	push   $0xc010d334
c01081df:	e8 19 82 ff ff       	call   c01003fd <__panic>
    assert(page_ref(p1) == 2);
c01081e4:	83 ec 0c             	sub    $0xc,%esp
c01081e7:	ff 75 f4             	pushl  -0xc(%ebp)
c01081ea:	e8 8e ec ff ff       	call   c0106e7d <page_ref>
c01081ef:	83 c4 10             	add    $0x10,%esp
c01081f2:	83 f8 02             	cmp    $0x2,%eax
c01081f5:	74 19                	je     c0108210 <check_pgdir+0x35b>
c01081f7:	68 2c d6 10 c0       	push   $0xc010d62c
c01081fc:	68 59 d3 10 c0       	push   $0xc010d359
c0108201:	68 a2 02 00 00       	push   $0x2a2
c0108206:	68 34 d3 10 c0       	push   $0xc010d334
c010820b:	e8 ed 81 ff ff       	call   c01003fd <__panic>
    assert(page_ref(p2) == 0);
c0108210:	83 ec 0c             	sub    $0xc,%esp
c0108213:	ff 75 e4             	pushl  -0x1c(%ebp)
c0108216:	e8 62 ec ff ff       	call   c0106e7d <page_ref>
c010821b:	83 c4 10             	add    $0x10,%esp
c010821e:	85 c0                	test   %eax,%eax
c0108220:	74 19                	je     c010823b <check_pgdir+0x386>
c0108222:	68 3e d6 10 c0       	push   $0xc010d63e
c0108227:	68 59 d3 10 c0       	push   $0xc010d359
c010822c:	68 a3 02 00 00       	push   $0x2a3
c0108231:	68 34 d3 10 c0       	push   $0xc010d334
c0108236:	e8 c2 81 ff ff       	call   c01003fd <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c010823b:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c0108240:	83 ec 04             	sub    $0x4,%esp
c0108243:	6a 00                	push   $0x0
c0108245:	68 00 10 00 00       	push   $0x1000
c010824a:	50                   	push   %eax
c010824b:	e8 a7 f4 ff ff       	call   c01076f7 <get_pte>
c0108250:	83 c4 10             	add    $0x10,%esp
c0108253:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108256:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010825a:	75 19                	jne    c0108275 <check_pgdir+0x3c0>
c010825c:	68 8c d5 10 c0       	push   $0xc010d58c
c0108261:	68 59 d3 10 c0       	push   $0xc010d359
c0108266:	68 a4 02 00 00       	push   $0x2a4
c010826b:	68 34 d3 10 c0       	push   $0xc010d334
c0108270:	e8 88 81 ff ff       	call   c01003fd <__panic>
    assert(pte2page(*ptep) == p1);
c0108275:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108278:	8b 00                	mov    (%eax),%eax
c010827a:	83 ec 0c             	sub    $0xc,%esp
c010827d:	50                   	push   %eax
c010827e:	e8 a4 eb ff ff       	call   c0106e27 <pte2page>
c0108283:	83 c4 10             	add    $0x10,%esp
c0108286:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0108289:	74 19                	je     c01082a4 <check_pgdir+0x3ef>
c010828b:	68 01 d5 10 c0       	push   $0xc010d501
c0108290:	68 59 d3 10 c0       	push   $0xc010d359
c0108295:	68 a5 02 00 00       	push   $0x2a5
c010829a:	68 34 d3 10 c0       	push   $0xc010d334
c010829f:	e8 59 81 ff ff       	call   c01003fd <__panic>
    assert((*ptep & PTE_U) == 0);
c01082a4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01082a7:	8b 00                	mov    (%eax),%eax
c01082a9:	83 e0 04             	and    $0x4,%eax
c01082ac:	85 c0                	test   %eax,%eax
c01082ae:	74 19                	je     c01082c9 <check_pgdir+0x414>
c01082b0:	68 50 d6 10 c0       	push   $0xc010d650
c01082b5:	68 59 d3 10 c0       	push   $0xc010d359
c01082ba:	68 a6 02 00 00       	push   $0x2a6
c01082bf:	68 34 d3 10 c0       	push   $0xc010d334
c01082c4:	e8 34 81 ff ff       	call   c01003fd <__panic>

    page_remove(boot_pgdir, 0x0);
c01082c9:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c01082ce:	83 ec 08             	sub    $0x8,%esp
c01082d1:	6a 00                	push   $0x0
c01082d3:	50                   	push   %eax
c01082d4:	e8 c6 f9 ff ff       	call   c0107c9f <page_remove>
c01082d9:	83 c4 10             	add    $0x10,%esp
    assert(page_ref(p1) == 1);
c01082dc:	83 ec 0c             	sub    $0xc,%esp
c01082df:	ff 75 f4             	pushl  -0xc(%ebp)
c01082e2:	e8 96 eb ff ff       	call   c0106e7d <page_ref>
c01082e7:	83 c4 10             	add    $0x10,%esp
c01082ea:	83 f8 01             	cmp    $0x1,%eax
c01082ed:	74 19                	je     c0108308 <check_pgdir+0x453>
c01082ef:	68 17 d5 10 c0       	push   $0xc010d517
c01082f4:	68 59 d3 10 c0       	push   $0xc010d359
c01082f9:	68 a9 02 00 00       	push   $0x2a9
c01082fe:	68 34 d3 10 c0       	push   $0xc010d334
c0108303:	e8 f5 80 ff ff       	call   c01003fd <__panic>
    assert(page_ref(p2) == 0);
c0108308:	83 ec 0c             	sub    $0xc,%esp
c010830b:	ff 75 e4             	pushl  -0x1c(%ebp)
c010830e:	e8 6a eb ff ff       	call   c0106e7d <page_ref>
c0108313:	83 c4 10             	add    $0x10,%esp
c0108316:	85 c0                	test   %eax,%eax
c0108318:	74 19                	je     c0108333 <check_pgdir+0x47e>
c010831a:	68 3e d6 10 c0       	push   $0xc010d63e
c010831f:	68 59 d3 10 c0       	push   $0xc010d359
c0108324:	68 aa 02 00 00       	push   $0x2aa
c0108329:	68 34 d3 10 c0       	push   $0xc010d334
c010832e:	e8 ca 80 ff ff       	call   c01003fd <__panic>

    page_remove(boot_pgdir, PGSIZE);
c0108333:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c0108338:	83 ec 08             	sub    $0x8,%esp
c010833b:	68 00 10 00 00       	push   $0x1000
c0108340:	50                   	push   %eax
c0108341:	e8 59 f9 ff ff       	call   c0107c9f <page_remove>
c0108346:	83 c4 10             	add    $0x10,%esp
    assert(page_ref(p1) == 0);
c0108349:	83 ec 0c             	sub    $0xc,%esp
c010834c:	ff 75 f4             	pushl  -0xc(%ebp)
c010834f:	e8 29 eb ff ff       	call   c0106e7d <page_ref>
c0108354:	83 c4 10             	add    $0x10,%esp
c0108357:	85 c0                	test   %eax,%eax
c0108359:	74 19                	je     c0108374 <check_pgdir+0x4bf>
c010835b:	68 65 d6 10 c0       	push   $0xc010d665
c0108360:	68 59 d3 10 c0       	push   $0xc010d359
c0108365:	68 ad 02 00 00       	push   $0x2ad
c010836a:	68 34 d3 10 c0       	push   $0xc010d334
c010836f:	e8 89 80 ff ff       	call   c01003fd <__panic>
    assert(page_ref(p2) == 0);
c0108374:	83 ec 0c             	sub    $0xc,%esp
c0108377:	ff 75 e4             	pushl  -0x1c(%ebp)
c010837a:	e8 fe ea ff ff       	call   c0106e7d <page_ref>
c010837f:	83 c4 10             	add    $0x10,%esp
c0108382:	85 c0                	test   %eax,%eax
c0108384:	74 19                	je     c010839f <check_pgdir+0x4ea>
c0108386:	68 3e d6 10 c0       	push   $0xc010d63e
c010838b:	68 59 d3 10 c0       	push   $0xc010d359
c0108390:	68 ae 02 00 00       	push   $0x2ae
c0108395:	68 34 d3 10 c0       	push   $0xc010d334
c010839a:	e8 5e 80 ff ff       	call   c01003fd <__panic>

    assert(page_ref(pde2page(boot_pgdir[0])) == 1);
c010839f:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c01083a4:	8b 00                	mov    (%eax),%eax
c01083a6:	83 ec 0c             	sub    $0xc,%esp
c01083a9:	50                   	push   %eax
c01083aa:	e8 b2 ea ff ff       	call   c0106e61 <pde2page>
c01083af:	83 c4 10             	add    $0x10,%esp
c01083b2:	83 ec 0c             	sub    $0xc,%esp
c01083b5:	50                   	push   %eax
c01083b6:	e8 c2 ea ff ff       	call   c0106e7d <page_ref>
c01083bb:	83 c4 10             	add    $0x10,%esp
c01083be:	83 f8 01             	cmp    $0x1,%eax
c01083c1:	74 19                	je     c01083dc <check_pgdir+0x527>
c01083c3:	68 78 d6 10 c0       	push   $0xc010d678
c01083c8:	68 59 d3 10 c0       	push   $0xc010d359
c01083cd:	68 b0 02 00 00       	push   $0x2b0
c01083d2:	68 34 d3 10 c0       	push   $0xc010d334
c01083d7:	e8 21 80 ff ff       	call   c01003fd <__panic>
    free_page(pde2page(boot_pgdir[0]));
c01083dc:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c01083e1:	8b 00                	mov    (%eax),%eax
c01083e3:	83 ec 0c             	sub    $0xc,%esp
c01083e6:	50                   	push   %eax
c01083e7:	e8 75 ea ff ff       	call   c0106e61 <pde2page>
c01083ec:	83 c4 10             	add    $0x10,%esp
c01083ef:	83 ec 08             	sub    $0x8,%esp
c01083f2:	6a 01                	push   $0x1
c01083f4:	50                   	push   %eax
c01083f5:	e8 fd ec ff ff       	call   c01070f7 <free_pages>
c01083fa:	83 c4 10             	add    $0x10,%esp
    boot_pgdir[0] = 0;
c01083fd:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c0108402:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    cprintf("check_pgdir() succeeded!\n");
c0108408:	83 ec 0c             	sub    $0xc,%esp
c010840b:	68 9f d6 10 c0       	push   $0xc010d69f
c0108410:	e8 82 7e ff ff       	call   c0100297 <cprintf>
c0108415:	83 c4 10             	add    $0x10,%esp
}
c0108418:	90                   	nop
c0108419:	c9                   	leave  
c010841a:	c3                   	ret    

c010841b <check_boot_pgdir>:

static void
check_boot_pgdir(void) {
c010841b:	55                   	push   %ebp
c010841c:	89 e5                	mov    %esp,%ebp
c010841e:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
c0108421:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0108428:	e9 a3 00 00 00       	jmp    c01084d0 <check_boot_pgdir+0xb5>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
c010842d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108430:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108433:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108436:	c1 e8 0c             	shr    $0xc,%eax
c0108439:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010843c:	a1 80 0f 1b c0       	mov    0xc01b0f80,%eax
c0108441:	39 45 ec             	cmp    %eax,-0x14(%ebp)
c0108444:	72 17                	jb     c010845d <check_boot_pgdir+0x42>
c0108446:	ff 75 f0             	pushl  -0x10(%ebp)
c0108449:	68 6c d2 10 c0       	push   $0xc010d26c
c010844e:	68 bc 02 00 00       	push   $0x2bc
c0108453:	68 34 d3 10 c0       	push   $0xc010d334
c0108458:	e8 a0 7f ff ff       	call   c01003fd <__panic>
c010845d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108460:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0108465:	89 c2                	mov    %eax,%edx
c0108467:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c010846c:	83 ec 04             	sub    $0x4,%esp
c010846f:	6a 00                	push   $0x0
c0108471:	52                   	push   %edx
c0108472:	50                   	push   %eax
c0108473:	e8 7f f2 ff ff       	call   c01076f7 <get_pte>
c0108478:	83 c4 10             	add    $0x10,%esp
c010847b:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010847e:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0108482:	75 19                	jne    c010849d <check_boot_pgdir+0x82>
c0108484:	68 bc d6 10 c0       	push   $0xc010d6bc
c0108489:	68 59 d3 10 c0       	push   $0xc010d359
c010848e:	68 bc 02 00 00       	push   $0x2bc
c0108493:	68 34 d3 10 c0       	push   $0xc010d334
c0108498:	e8 60 7f ff ff       	call   c01003fd <__panic>
        assert(PTE_ADDR(*ptep) == i);
c010849d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01084a0:	8b 00                	mov    (%eax),%eax
c01084a2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01084a7:	89 c2                	mov    %eax,%edx
c01084a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01084ac:	39 c2                	cmp    %eax,%edx
c01084ae:	74 19                	je     c01084c9 <check_boot_pgdir+0xae>
c01084b0:	68 f9 d6 10 c0       	push   $0xc010d6f9
c01084b5:	68 59 d3 10 c0       	push   $0xc010d359
c01084ba:	68 bd 02 00 00       	push   $0x2bd
c01084bf:	68 34 d3 10 c0       	push   $0xc010d334
c01084c4:	e8 34 7f ff ff       	call   c01003fd <__panic>

static void
check_boot_pgdir(void) {
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
c01084c9:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
c01084d0:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01084d3:	a1 80 0f 1b c0       	mov    0xc01b0f80,%eax
c01084d8:	39 c2                	cmp    %eax,%edx
c01084da:	0f 82 4d ff ff ff    	jb     c010842d <check_boot_pgdir+0x12>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
        assert(PTE_ADDR(*ptep) == i);
    }

    assert(PDE_ADDR(boot_pgdir[PDX(VPT)]) == PADDR(boot_pgdir));
c01084e0:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c01084e5:	05 ac 0f 00 00       	add    $0xfac,%eax
c01084ea:	8b 00                	mov    (%eax),%eax
c01084ec:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01084f1:	89 c2                	mov    %eax,%edx
c01084f3:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c01084f8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01084fb:	81 7d e4 ff ff ff bf 	cmpl   $0xbfffffff,-0x1c(%ebp)
c0108502:	77 17                	ja     c010851b <check_boot_pgdir+0x100>
c0108504:	ff 75 e4             	pushl  -0x1c(%ebp)
c0108507:	68 10 d3 10 c0       	push   $0xc010d310
c010850c:	68 c0 02 00 00       	push   $0x2c0
c0108511:	68 34 d3 10 c0       	push   $0xc010d334
c0108516:	e8 e2 7e ff ff       	call   c01003fd <__panic>
c010851b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010851e:	05 00 00 00 40       	add    $0x40000000,%eax
c0108523:	39 c2                	cmp    %eax,%edx
c0108525:	74 19                	je     c0108540 <check_boot_pgdir+0x125>
c0108527:	68 10 d7 10 c0       	push   $0xc010d710
c010852c:	68 59 d3 10 c0       	push   $0xc010d359
c0108531:	68 c0 02 00 00       	push   $0x2c0
c0108536:	68 34 d3 10 c0       	push   $0xc010d334
c010853b:	e8 bd 7e ff ff       	call   c01003fd <__panic>

    assert(boot_pgdir[0] == 0);
c0108540:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c0108545:	8b 00                	mov    (%eax),%eax
c0108547:	85 c0                	test   %eax,%eax
c0108549:	74 19                	je     c0108564 <check_boot_pgdir+0x149>
c010854b:	68 44 d7 10 c0       	push   $0xc010d744
c0108550:	68 59 d3 10 c0       	push   $0xc010d359
c0108555:	68 c2 02 00 00       	push   $0x2c2
c010855a:	68 34 d3 10 c0       	push   $0xc010d334
c010855f:	e8 99 7e ff ff       	call   c01003fd <__panic>

    struct Page *p;
    p = alloc_page();
c0108564:	83 ec 0c             	sub    $0xc,%esp
c0108567:	6a 01                	push   $0x1
c0108569:	e8 1d eb ff ff       	call   c010708b <alloc_pages>
c010856e:	83 c4 10             	add    $0x10,%esp
c0108571:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(page_insert(boot_pgdir, p, 0x100, PTE_W) == 0);
c0108574:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c0108579:	6a 02                	push   $0x2
c010857b:	68 00 01 00 00       	push   $0x100
c0108580:	ff 75 e0             	pushl  -0x20(%ebp)
c0108583:	50                   	push   %eax
c0108584:	e8 4f f7 ff ff       	call   c0107cd8 <page_insert>
c0108589:	83 c4 10             	add    $0x10,%esp
c010858c:	85 c0                	test   %eax,%eax
c010858e:	74 19                	je     c01085a9 <check_boot_pgdir+0x18e>
c0108590:	68 58 d7 10 c0       	push   $0xc010d758
c0108595:	68 59 d3 10 c0       	push   $0xc010d359
c010859a:	68 c6 02 00 00       	push   $0x2c6
c010859f:	68 34 d3 10 c0       	push   $0xc010d334
c01085a4:	e8 54 7e ff ff       	call   c01003fd <__panic>
    assert(page_ref(p) == 1);
c01085a9:	83 ec 0c             	sub    $0xc,%esp
c01085ac:	ff 75 e0             	pushl  -0x20(%ebp)
c01085af:	e8 c9 e8 ff ff       	call   c0106e7d <page_ref>
c01085b4:	83 c4 10             	add    $0x10,%esp
c01085b7:	83 f8 01             	cmp    $0x1,%eax
c01085ba:	74 19                	je     c01085d5 <check_boot_pgdir+0x1ba>
c01085bc:	68 86 d7 10 c0       	push   $0xc010d786
c01085c1:	68 59 d3 10 c0       	push   $0xc010d359
c01085c6:	68 c7 02 00 00       	push   $0x2c7
c01085cb:	68 34 d3 10 c0       	push   $0xc010d334
c01085d0:	e8 28 7e ff ff       	call   c01003fd <__panic>
    assert(page_insert(boot_pgdir, p, 0x100 + PGSIZE, PTE_W) == 0);
c01085d5:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c01085da:	6a 02                	push   $0x2
c01085dc:	68 00 11 00 00       	push   $0x1100
c01085e1:	ff 75 e0             	pushl  -0x20(%ebp)
c01085e4:	50                   	push   %eax
c01085e5:	e8 ee f6 ff ff       	call   c0107cd8 <page_insert>
c01085ea:	83 c4 10             	add    $0x10,%esp
c01085ed:	85 c0                	test   %eax,%eax
c01085ef:	74 19                	je     c010860a <check_boot_pgdir+0x1ef>
c01085f1:	68 98 d7 10 c0       	push   $0xc010d798
c01085f6:	68 59 d3 10 c0       	push   $0xc010d359
c01085fb:	68 c8 02 00 00       	push   $0x2c8
c0108600:	68 34 d3 10 c0       	push   $0xc010d334
c0108605:	e8 f3 7d ff ff       	call   c01003fd <__panic>
    assert(page_ref(p) == 2);
c010860a:	83 ec 0c             	sub    $0xc,%esp
c010860d:	ff 75 e0             	pushl  -0x20(%ebp)
c0108610:	e8 68 e8 ff ff       	call   c0106e7d <page_ref>
c0108615:	83 c4 10             	add    $0x10,%esp
c0108618:	83 f8 02             	cmp    $0x2,%eax
c010861b:	74 19                	je     c0108636 <check_boot_pgdir+0x21b>
c010861d:	68 cf d7 10 c0       	push   $0xc010d7cf
c0108622:	68 59 d3 10 c0       	push   $0xc010d359
c0108627:	68 c9 02 00 00       	push   $0x2c9
c010862c:	68 34 d3 10 c0       	push   $0xc010d334
c0108631:	e8 c7 7d ff ff       	call   c01003fd <__panic>

    const char *str = "ucore: Hello world!!";
c0108636:	c7 45 dc e0 d7 10 c0 	movl   $0xc010d7e0,-0x24(%ebp)
    strcpy((void *)0x100, str);
c010863d:	83 ec 08             	sub    $0x8,%esp
c0108640:	ff 75 dc             	pushl  -0x24(%ebp)
c0108643:	68 00 01 00 00       	push   $0x100
c0108648:	e8 d7 27 00 00       	call   c010ae24 <strcpy>
c010864d:	83 c4 10             	add    $0x10,%esp
    assert(strcmp((void *)0x100, (void *)(0x100 + PGSIZE)) == 0);
c0108650:	83 ec 08             	sub    $0x8,%esp
c0108653:	68 00 11 00 00       	push   $0x1100
c0108658:	68 00 01 00 00       	push   $0x100
c010865d:	e8 3c 28 00 00       	call   c010ae9e <strcmp>
c0108662:	83 c4 10             	add    $0x10,%esp
c0108665:	85 c0                	test   %eax,%eax
c0108667:	74 19                	je     c0108682 <check_boot_pgdir+0x267>
c0108669:	68 f8 d7 10 c0       	push   $0xc010d7f8
c010866e:	68 59 d3 10 c0       	push   $0xc010d359
c0108673:	68 cd 02 00 00       	push   $0x2cd
c0108678:	68 34 d3 10 c0       	push   $0xc010d334
c010867d:	e8 7b 7d ff ff       	call   c01003fd <__panic>

    *(char *)(page2kva(p) + 0x100) = '\0';
c0108682:	83 ec 0c             	sub    $0xc,%esp
c0108685:	ff 75 e0             	pushl  -0x20(%ebp)
c0108688:	e8 55 e7 ff ff       	call   c0106de2 <page2kva>
c010868d:	83 c4 10             	add    $0x10,%esp
c0108690:	05 00 01 00 00       	add    $0x100,%eax
c0108695:	c6 00 00             	movb   $0x0,(%eax)
    assert(strlen((const char *)0x100) == 0);
c0108698:	83 ec 0c             	sub    $0xc,%esp
c010869b:	68 00 01 00 00       	push   $0x100
c01086a0:	e8 27 27 00 00       	call   c010adcc <strlen>
c01086a5:	83 c4 10             	add    $0x10,%esp
c01086a8:	85 c0                	test   %eax,%eax
c01086aa:	74 19                	je     c01086c5 <check_boot_pgdir+0x2aa>
c01086ac:	68 30 d8 10 c0       	push   $0xc010d830
c01086b1:	68 59 d3 10 c0       	push   $0xc010d359
c01086b6:	68 d0 02 00 00       	push   $0x2d0
c01086bb:	68 34 d3 10 c0       	push   $0xc010d334
c01086c0:	e8 38 7d ff ff       	call   c01003fd <__panic>

    free_page(p);
c01086c5:	83 ec 08             	sub    $0x8,%esp
c01086c8:	6a 01                	push   $0x1
c01086ca:	ff 75 e0             	pushl  -0x20(%ebp)
c01086cd:	e8 25 ea ff ff       	call   c01070f7 <free_pages>
c01086d2:	83 c4 10             	add    $0x10,%esp
    free_page(pde2page(boot_pgdir[0]));
c01086d5:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c01086da:	8b 00                	mov    (%eax),%eax
c01086dc:	83 ec 0c             	sub    $0xc,%esp
c01086df:	50                   	push   %eax
c01086e0:	e8 7c e7 ff ff       	call   c0106e61 <pde2page>
c01086e5:	83 c4 10             	add    $0x10,%esp
c01086e8:	83 ec 08             	sub    $0x8,%esp
c01086eb:	6a 01                	push   $0x1
c01086ed:	50                   	push   %eax
c01086ee:	e8 04 ea ff ff       	call   c01070f7 <free_pages>
c01086f3:	83 c4 10             	add    $0x10,%esp
    boot_pgdir[0] = 0;
c01086f6:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c01086fb:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    cprintf("check_boot_pgdir() succeeded!\n");
c0108701:	83 ec 0c             	sub    $0xc,%esp
c0108704:	68 54 d8 10 c0       	push   $0xc010d854
c0108709:	e8 89 7b ff ff       	call   c0100297 <cprintf>
c010870e:	83 c4 10             	add    $0x10,%esp
}
c0108711:	90                   	nop
c0108712:	c9                   	leave  
c0108713:	c3                   	ret    

c0108714 <perm2str>:

//perm2str - use string 'u,r,w,-' to present the permission
static const char *
perm2str(int perm) {
c0108714:	55                   	push   %ebp
c0108715:	89 e5                	mov    %esp,%ebp
    static char str[4];
    str[0] = (perm & PTE_U) ? 'u' : '-';
c0108717:	8b 45 08             	mov    0x8(%ebp),%eax
c010871a:	83 e0 04             	and    $0x4,%eax
c010871d:	85 c0                	test   %eax,%eax
c010871f:	74 07                	je     c0108728 <perm2str+0x14>
c0108721:	b8 75 00 00 00       	mov    $0x75,%eax
c0108726:	eb 05                	jmp    c010872d <perm2str+0x19>
c0108728:	b8 2d 00 00 00       	mov    $0x2d,%eax
c010872d:	a2 08 10 1b c0       	mov    %al,0xc01b1008
    str[1] = 'r';
c0108732:	c6 05 09 10 1b c0 72 	movb   $0x72,0xc01b1009
    str[2] = (perm & PTE_W) ? 'w' : '-';
c0108739:	8b 45 08             	mov    0x8(%ebp),%eax
c010873c:	83 e0 02             	and    $0x2,%eax
c010873f:	85 c0                	test   %eax,%eax
c0108741:	74 07                	je     c010874a <perm2str+0x36>
c0108743:	b8 77 00 00 00       	mov    $0x77,%eax
c0108748:	eb 05                	jmp    c010874f <perm2str+0x3b>
c010874a:	b8 2d 00 00 00       	mov    $0x2d,%eax
c010874f:	a2 0a 10 1b c0       	mov    %al,0xc01b100a
    str[3] = '\0';
c0108754:	c6 05 0b 10 1b c0 00 	movb   $0x0,0xc01b100b
    return str;
c010875b:	b8 08 10 1b c0       	mov    $0xc01b1008,%eax
}
c0108760:	5d                   	pop    %ebp
c0108761:	c3                   	ret    

c0108762 <get_pgtable_items>:
//  table:       the beginning addr of table
//  left_store:  the pointer of the high side of table's next range
//  right_store: the pointer of the low side of table's next range
// return value: 0 - not a invalid item range, perm - a valid item range with perm permission 
static int
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
c0108762:	55                   	push   %ebp
c0108763:	89 e5                	mov    %esp,%ebp
c0108765:	83 ec 10             	sub    $0x10,%esp
    if (start >= right) {
c0108768:	8b 45 10             	mov    0x10(%ebp),%eax
c010876b:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010876e:	72 0e                	jb     c010877e <get_pgtable_items+0x1c>
        return 0;
c0108770:	b8 00 00 00 00       	mov    $0x0,%eax
c0108775:	e9 9a 00 00 00       	jmp    c0108814 <get_pgtable_items+0xb2>
    }
    while (start < right && !(table[start] & PTE_P)) {
        start ++;
c010877a:	83 45 10 01          	addl   $0x1,0x10(%ebp)
static int
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
    if (start >= right) {
        return 0;
    }
    while (start < right && !(table[start] & PTE_P)) {
c010877e:	8b 45 10             	mov    0x10(%ebp),%eax
c0108781:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0108784:	73 18                	jae    c010879e <get_pgtable_items+0x3c>
c0108786:	8b 45 10             	mov    0x10(%ebp),%eax
c0108789:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0108790:	8b 45 14             	mov    0x14(%ebp),%eax
c0108793:	01 d0                	add    %edx,%eax
c0108795:	8b 00                	mov    (%eax),%eax
c0108797:	83 e0 01             	and    $0x1,%eax
c010879a:	85 c0                	test   %eax,%eax
c010879c:	74 dc                	je     c010877a <get_pgtable_items+0x18>
        start ++;
    }
    if (start < right) {
c010879e:	8b 45 10             	mov    0x10(%ebp),%eax
c01087a1:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01087a4:	73 69                	jae    c010880f <get_pgtable_items+0xad>
        if (left_store != NULL) {
c01087a6:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c01087aa:	74 08                	je     c01087b4 <get_pgtable_items+0x52>
            *left_store = start;
c01087ac:	8b 45 18             	mov    0x18(%ebp),%eax
c01087af:	8b 55 10             	mov    0x10(%ebp),%edx
c01087b2:	89 10                	mov    %edx,(%eax)
        }
        int perm = (table[start ++] & PTE_USER);
c01087b4:	8b 45 10             	mov    0x10(%ebp),%eax
c01087b7:	8d 50 01             	lea    0x1(%eax),%edx
c01087ba:	89 55 10             	mov    %edx,0x10(%ebp)
c01087bd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01087c4:	8b 45 14             	mov    0x14(%ebp),%eax
c01087c7:	01 d0                	add    %edx,%eax
c01087c9:	8b 00                	mov    (%eax),%eax
c01087cb:	83 e0 07             	and    $0x7,%eax
c01087ce:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while (start < right && (table[start] & PTE_USER) == perm) {
c01087d1:	eb 04                	jmp    c01087d7 <get_pgtable_items+0x75>
            start ++;
c01087d3:	83 45 10 01          	addl   $0x1,0x10(%ebp)
    if (start < right) {
        if (left_store != NULL) {
            *left_store = start;
        }
        int perm = (table[start ++] & PTE_USER);
        while (start < right && (table[start] & PTE_USER) == perm) {
c01087d7:	8b 45 10             	mov    0x10(%ebp),%eax
c01087da:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01087dd:	73 1d                	jae    c01087fc <get_pgtable_items+0x9a>
c01087df:	8b 45 10             	mov    0x10(%ebp),%eax
c01087e2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01087e9:	8b 45 14             	mov    0x14(%ebp),%eax
c01087ec:	01 d0                	add    %edx,%eax
c01087ee:	8b 00                	mov    (%eax),%eax
c01087f0:	83 e0 07             	and    $0x7,%eax
c01087f3:	89 c2                	mov    %eax,%edx
c01087f5:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01087f8:	39 c2                	cmp    %eax,%edx
c01087fa:	74 d7                	je     c01087d3 <get_pgtable_items+0x71>
            start ++;
        }
        if (right_store != NULL) {
c01087fc:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c0108800:	74 08                	je     c010880a <get_pgtable_items+0xa8>
            *right_store = start;
c0108802:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0108805:	8b 55 10             	mov    0x10(%ebp),%edx
c0108808:	89 10                	mov    %edx,(%eax)
        }
        return perm;
c010880a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010880d:	eb 05                	jmp    c0108814 <get_pgtable_items+0xb2>
    }
    return 0;
c010880f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0108814:	c9                   	leave  
c0108815:	c3                   	ret    

c0108816 <print_pgdir>:

//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
c0108816:	55                   	push   %ebp
c0108817:	89 e5                	mov    %esp,%ebp
c0108819:	57                   	push   %edi
c010881a:	56                   	push   %esi
c010881b:	53                   	push   %ebx
c010881c:	83 ec 2c             	sub    $0x2c,%esp
    cprintf("-------------------- BEGIN --------------------\n");
c010881f:	83 ec 0c             	sub    $0xc,%esp
c0108822:	68 74 d8 10 c0       	push   $0xc010d874
c0108827:	e8 6b 7a ff ff       	call   c0100297 <cprintf>
c010882c:	83 c4 10             	add    $0x10,%esp
    size_t left, right = 0, perm;
c010882f:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c0108836:	e9 e5 00 00 00       	jmp    c0108920 <print_pgdir+0x10a>
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c010883b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010883e:	83 ec 0c             	sub    $0xc,%esp
c0108841:	50                   	push   %eax
c0108842:	e8 cd fe ff ff       	call   c0108714 <perm2str>
c0108847:	83 c4 10             	add    $0x10,%esp
c010884a:	89 c7                	mov    %eax,%edi
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
c010884c:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010884f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108852:	29 c2                	sub    %eax,%edx
c0108854:	89 d0                	mov    %edx,%eax
void
print_pgdir(void) {
    cprintf("-------------------- BEGIN --------------------\n");
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c0108856:	c1 e0 16             	shl    $0x16,%eax
c0108859:	89 c3                	mov    %eax,%ebx
c010885b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010885e:	c1 e0 16             	shl    $0x16,%eax
c0108861:	89 c1                	mov    %eax,%ecx
c0108863:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108866:	c1 e0 16             	shl    $0x16,%eax
c0108869:	89 c2                	mov    %eax,%edx
c010886b:	8b 75 dc             	mov    -0x24(%ebp),%esi
c010886e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108871:	29 c6                	sub    %eax,%esi
c0108873:	89 f0                	mov    %esi,%eax
c0108875:	83 ec 08             	sub    $0x8,%esp
c0108878:	57                   	push   %edi
c0108879:	53                   	push   %ebx
c010887a:	51                   	push   %ecx
c010887b:	52                   	push   %edx
c010887c:	50                   	push   %eax
c010887d:	68 a5 d8 10 c0       	push   $0xc010d8a5
c0108882:	e8 10 7a ff ff       	call   c0100297 <cprintf>
c0108887:	83 c4 20             	add    $0x20,%esp
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
c010888a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010888d:	c1 e0 0a             	shl    $0xa,%eax
c0108890:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c0108893:	eb 4f                	jmp    c01088e4 <print_pgdir+0xce>
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c0108895:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108898:	83 ec 0c             	sub    $0xc,%esp
c010889b:	50                   	push   %eax
c010889c:	e8 73 fe ff ff       	call   c0108714 <perm2str>
c01088a1:	83 c4 10             	add    $0x10,%esp
c01088a4:	89 c7                	mov    %eax,%edi
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
c01088a6:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01088a9:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01088ac:	29 c2                	sub    %eax,%edx
c01088ae:	89 d0                	mov    %edx,%eax
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c01088b0:	c1 e0 0c             	shl    $0xc,%eax
c01088b3:	89 c3                	mov    %eax,%ebx
c01088b5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01088b8:	c1 e0 0c             	shl    $0xc,%eax
c01088bb:	89 c1                	mov    %eax,%ecx
c01088bd:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01088c0:	c1 e0 0c             	shl    $0xc,%eax
c01088c3:	89 c2                	mov    %eax,%edx
c01088c5:	8b 75 d4             	mov    -0x2c(%ebp),%esi
c01088c8:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01088cb:	29 c6                	sub    %eax,%esi
c01088cd:	89 f0                	mov    %esi,%eax
c01088cf:	83 ec 08             	sub    $0x8,%esp
c01088d2:	57                   	push   %edi
c01088d3:	53                   	push   %ebx
c01088d4:	51                   	push   %ecx
c01088d5:	52                   	push   %edx
c01088d6:	50                   	push   %eax
c01088d7:	68 c4 d8 10 c0       	push   $0xc010d8c4
c01088dc:	e8 b6 79 ff ff       	call   c0100297 <cprintf>
c01088e1:	83 c4 20             	add    $0x20,%esp
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c01088e4:	be 00 00 c0 fa       	mov    $0xfac00000,%esi
c01088e9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01088ec:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01088ef:	89 d3                	mov    %edx,%ebx
c01088f1:	c1 e3 0a             	shl    $0xa,%ebx
c01088f4:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01088f7:	89 d1                	mov    %edx,%ecx
c01088f9:	c1 e1 0a             	shl    $0xa,%ecx
c01088fc:	83 ec 08             	sub    $0x8,%esp
c01088ff:	8d 55 d4             	lea    -0x2c(%ebp),%edx
c0108902:	52                   	push   %edx
c0108903:	8d 55 d8             	lea    -0x28(%ebp),%edx
c0108906:	52                   	push   %edx
c0108907:	56                   	push   %esi
c0108908:	50                   	push   %eax
c0108909:	53                   	push   %ebx
c010890a:	51                   	push   %ecx
c010890b:	e8 52 fe ff ff       	call   c0108762 <get_pgtable_items>
c0108910:	83 c4 20             	add    $0x20,%esp
c0108913:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0108916:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010891a:	0f 85 75 ff ff ff    	jne    c0108895 <print_pgdir+0x7f>
//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
    cprintf("-------------------- BEGIN --------------------\n");
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c0108920:	b9 00 b0 fe fa       	mov    $0xfafeb000,%ecx
c0108925:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108928:	83 ec 08             	sub    $0x8,%esp
c010892b:	8d 55 dc             	lea    -0x24(%ebp),%edx
c010892e:	52                   	push   %edx
c010892f:	8d 55 e0             	lea    -0x20(%ebp),%edx
c0108932:	52                   	push   %edx
c0108933:	51                   	push   %ecx
c0108934:	50                   	push   %eax
c0108935:	68 00 04 00 00       	push   $0x400
c010893a:	6a 00                	push   $0x0
c010893c:	e8 21 fe ff ff       	call   c0108762 <get_pgtable_items>
c0108941:	83 c4 20             	add    $0x20,%esp
c0108944:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0108947:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010894b:	0f 85 ea fe ff ff    	jne    c010883b <print_pgdir+0x25>
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
        }
    }
    cprintf("--------------------- END ---------------------\n");
c0108951:	83 ec 0c             	sub    $0xc,%esp
c0108954:	68 e8 d8 10 c0       	push   $0xc010d8e8
c0108959:	e8 39 79 ff ff       	call   c0100297 <cprintf>
c010895e:	83 c4 10             	add    $0x10,%esp
}
c0108961:	90                   	nop
c0108962:	8d 65 f4             	lea    -0xc(%ebp),%esp
c0108965:	5b                   	pop    %ebx
c0108966:	5e                   	pop    %esi
c0108967:	5f                   	pop    %edi
c0108968:	5d                   	pop    %ebp
c0108969:	c3                   	ret    

c010896a <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c010896a:	55                   	push   %ebp
c010896b:	89 e5                	mov    %esp,%ebp
    return page - pages;
c010896d:	8b 45 08             	mov    0x8(%ebp),%eax
c0108970:	8b 15 b8 31 1b c0    	mov    0xc01b31b8,%edx
c0108976:	29 d0                	sub    %edx,%eax
c0108978:	c1 f8 05             	sar    $0x5,%eax
}
c010897b:	5d                   	pop    %ebp
c010897c:	c3                   	ret    

c010897d <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c010897d:	55                   	push   %ebp
c010897e:	89 e5                	mov    %esp,%ebp
    return page2ppn(page) << PGSHIFT;
c0108980:	ff 75 08             	pushl  0x8(%ebp)
c0108983:	e8 e2 ff ff ff       	call   c010896a <page2ppn>
c0108988:	83 c4 04             	add    $0x4,%esp
c010898b:	c1 e0 0c             	shl    $0xc,%eax
}
c010898e:	c9                   	leave  
c010898f:	c3                   	ret    

c0108990 <page2kva>:
    }
    return &pages[PPN(pa)];
}

static inline void *
page2kva(struct Page *page) {
c0108990:	55                   	push   %ebp
c0108991:	89 e5                	mov    %esp,%ebp
c0108993:	83 ec 18             	sub    $0x18,%esp
    return KADDR(page2pa(page));
c0108996:	ff 75 08             	pushl  0x8(%ebp)
c0108999:	e8 df ff ff ff       	call   c010897d <page2pa>
c010899e:	83 c4 04             	add    $0x4,%esp
c01089a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01089a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01089a7:	c1 e8 0c             	shr    $0xc,%eax
c01089aa:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01089ad:	a1 80 0f 1b c0       	mov    0xc01b0f80,%eax
c01089b2:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c01089b5:	72 14                	jb     c01089cb <page2kva+0x3b>
c01089b7:	ff 75 f4             	pushl  -0xc(%ebp)
c01089ba:	68 1c d9 10 c0       	push   $0xc010d91c
c01089bf:	6a 65                	push   $0x65
c01089c1:	68 3f d9 10 c0       	push   $0xc010d93f
c01089c6:	e8 32 7a ff ff       	call   c01003fd <__panic>
c01089cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01089ce:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c01089d3:	c9                   	leave  
c01089d4:	c3                   	ret    

c01089d5 <swapfs_init>:
#include <ide.h>
#include <pmm.h>
#include <assert.h>

void
swapfs_init(void) {
c01089d5:	55                   	push   %ebp
c01089d6:	89 e5                	mov    %esp,%ebp
c01089d8:	83 ec 08             	sub    $0x8,%esp
    static_assert((PGSIZE % SECTSIZE) == 0);
    if (!ide_device_valid(SWAP_DEV_NO)) {
c01089db:	83 ec 0c             	sub    $0xc,%esp
c01089de:	6a 01                	push   $0x1
c01089e0:	e8 f4 87 ff ff       	call   c01011d9 <ide_device_valid>
c01089e5:	83 c4 10             	add    $0x10,%esp
c01089e8:	85 c0                	test   %eax,%eax
c01089ea:	75 14                	jne    c0108a00 <swapfs_init+0x2b>
        panic("swap fs isn't available.\n");
c01089ec:	83 ec 04             	sub    $0x4,%esp
c01089ef:	68 4d d9 10 c0       	push   $0xc010d94d
c01089f4:	6a 0d                	push   $0xd
c01089f6:	68 67 d9 10 c0       	push   $0xc010d967
c01089fb:	e8 fd 79 ff ff       	call   c01003fd <__panic>
    }
    max_swap_offset = ide_device_size(SWAP_DEV_NO) / (PGSIZE / SECTSIZE);
c0108a00:	83 ec 0c             	sub    $0xc,%esp
c0108a03:	6a 01                	push   $0x1
c0108a05:	e8 0f 88 ff ff       	call   c0101219 <ide_device_size>
c0108a0a:	83 c4 10             	add    $0x10,%esp
c0108a0d:	c1 e8 03             	shr    $0x3,%eax
c0108a10:	a3 7c 31 1b c0       	mov    %eax,0xc01b317c
}
c0108a15:	90                   	nop
c0108a16:	c9                   	leave  
c0108a17:	c3                   	ret    

c0108a18 <swapfs_read>:

int
swapfs_read(swap_entry_t entry, struct Page *page) {
c0108a18:	55                   	push   %ebp
c0108a19:	89 e5                	mov    %esp,%ebp
c0108a1b:	83 ec 18             	sub    $0x18,%esp
    return ide_read_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c0108a1e:	83 ec 0c             	sub    $0xc,%esp
c0108a21:	ff 75 0c             	pushl  0xc(%ebp)
c0108a24:	e8 67 ff ff ff       	call   c0108990 <page2kva>
c0108a29:	83 c4 10             	add    $0x10,%esp
c0108a2c:	89 c2                	mov    %eax,%edx
c0108a2e:	8b 45 08             	mov    0x8(%ebp),%eax
c0108a31:	c1 e8 08             	shr    $0x8,%eax
c0108a34:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108a37:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108a3b:	74 0a                	je     c0108a47 <swapfs_read+0x2f>
c0108a3d:	a1 7c 31 1b c0       	mov    0xc01b317c,%eax
c0108a42:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0108a45:	72 14                	jb     c0108a5b <swapfs_read+0x43>
c0108a47:	ff 75 08             	pushl  0x8(%ebp)
c0108a4a:	68 78 d9 10 c0       	push   $0xc010d978
c0108a4f:	6a 14                	push   $0x14
c0108a51:	68 67 d9 10 c0       	push   $0xc010d967
c0108a56:	e8 a2 79 ff ff       	call   c01003fd <__panic>
c0108a5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108a5e:	c1 e0 03             	shl    $0x3,%eax
c0108a61:	6a 08                	push   $0x8
c0108a63:	52                   	push   %edx
c0108a64:	50                   	push   %eax
c0108a65:	6a 01                	push   $0x1
c0108a67:	e8 ed 87 ff ff       	call   c0101259 <ide_read_secs>
c0108a6c:	83 c4 10             	add    $0x10,%esp
}
c0108a6f:	c9                   	leave  
c0108a70:	c3                   	ret    

c0108a71 <swapfs_write>:

int
swapfs_write(swap_entry_t entry, struct Page *page) {
c0108a71:	55                   	push   %ebp
c0108a72:	89 e5                	mov    %esp,%ebp
c0108a74:	83 ec 18             	sub    $0x18,%esp
    return ide_write_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c0108a77:	83 ec 0c             	sub    $0xc,%esp
c0108a7a:	ff 75 0c             	pushl  0xc(%ebp)
c0108a7d:	e8 0e ff ff ff       	call   c0108990 <page2kva>
c0108a82:	83 c4 10             	add    $0x10,%esp
c0108a85:	89 c2                	mov    %eax,%edx
c0108a87:	8b 45 08             	mov    0x8(%ebp),%eax
c0108a8a:	c1 e8 08             	shr    $0x8,%eax
c0108a8d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108a90:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108a94:	74 0a                	je     c0108aa0 <swapfs_write+0x2f>
c0108a96:	a1 7c 31 1b c0       	mov    0xc01b317c,%eax
c0108a9b:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0108a9e:	72 14                	jb     c0108ab4 <swapfs_write+0x43>
c0108aa0:	ff 75 08             	pushl  0x8(%ebp)
c0108aa3:	68 78 d9 10 c0       	push   $0xc010d978
c0108aa8:	6a 19                	push   $0x19
c0108aaa:	68 67 d9 10 c0       	push   $0xc010d967
c0108aaf:	e8 49 79 ff ff       	call   c01003fd <__panic>
c0108ab4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108ab7:	c1 e0 03             	shl    $0x3,%eax
c0108aba:	6a 08                	push   $0x8
c0108abc:	52                   	push   %edx
c0108abd:	50                   	push   %eax
c0108abe:	6a 01                	push   $0x1
c0108ac0:	e8 be 89 ff ff       	call   c0101483 <ide_write_secs>
c0108ac5:	83 c4 10             	add    $0x10,%esp
}
c0108ac8:	c9                   	leave  
c0108ac9:	c3                   	ret    

c0108aca <kernel_thread_entry>:
.text
.globl kernel_thread_entry
kernel_thread_entry:        # void kernel_thread(void)

    pushl %edx              # push arg
c0108aca:	52                   	push   %edx
    call *%ebx              # call fn
c0108acb:	ff d3                	call   *%ebx

    pushl %eax              # save the return value of fn(arg)
c0108acd:	50                   	push   %eax
    call do_exit            # call do_exit to terminate current thread
c0108ace:	e8 98 0c 00 00       	call   c010976b <do_exit>

c0108ad3 <switch_to>:
.text
.globl switch_to
switch_to:                      # switch_to(from, to)

    # save from's registers
    movl 4(%esp), %eax          # eax points to from
c0108ad3:	8b 44 24 04          	mov    0x4(%esp),%eax
    popl 0(%eax)                # save eip !popl
c0108ad7:	8f 00                	popl   (%eax)
    movl %esp, 4(%eax)
c0108ad9:	89 60 04             	mov    %esp,0x4(%eax)
    movl %ebx, 8(%eax)
c0108adc:	89 58 08             	mov    %ebx,0x8(%eax)
    movl %ecx, 12(%eax)
c0108adf:	89 48 0c             	mov    %ecx,0xc(%eax)
    movl %edx, 16(%eax)
c0108ae2:	89 50 10             	mov    %edx,0x10(%eax)
    movl %esi, 20(%eax)
c0108ae5:	89 70 14             	mov    %esi,0x14(%eax)
    movl %edi, 24(%eax)
c0108ae8:	89 78 18             	mov    %edi,0x18(%eax)
    movl %ebp, 28(%eax)
c0108aeb:	89 68 1c             	mov    %ebp,0x1c(%eax)

    # restore to's registers
    movl 4(%esp), %eax          # not 8(%esp): popped return address already
c0108aee:	8b 44 24 04          	mov    0x4(%esp),%eax
                                # eax now points to to
    movl 28(%eax), %ebp
c0108af2:	8b 68 1c             	mov    0x1c(%eax),%ebp
    movl 24(%eax), %edi
c0108af5:	8b 78 18             	mov    0x18(%eax),%edi
    movl 20(%eax), %esi
c0108af8:	8b 70 14             	mov    0x14(%eax),%esi
    movl 16(%eax), %edx
c0108afb:	8b 50 10             	mov    0x10(%eax),%edx
    movl 12(%eax), %ecx
c0108afe:	8b 48 0c             	mov    0xc(%eax),%ecx
    movl 8(%eax), %ebx
c0108b01:	8b 58 08             	mov    0x8(%eax),%ebx
    movl 4(%eax), %esp
c0108b04:	8b 60 04             	mov    0x4(%eax),%esp

    pushl 0(%eax)               # push eip
c0108b07:	ff 30                	pushl  (%eax)

    ret
c0108b09:	c3                   	ret    

c0108b0a <test_and_set_bit>:
 * test_and_set_bit - Atomically set a bit and return its old value
 * @nr:     the bit to set
 * @addr:   the address to count from
 * */
static inline bool
test_and_set_bit(int nr, volatile void *addr) {
c0108b0a:	55                   	push   %ebp
c0108b0b:	89 e5                	mov    %esp,%ebp
c0108b0d:	83 ec 10             	sub    $0x10,%esp
    int oldbit;
    asm volatile ("btsl %2, %1; sbbl %0, %0" : "=r" (oldbit), "=m" (*(volatile long *)addr) : "Ir" (nr) : "memory");
c0108b10:	8b 55 0c             	mov    0xc(%ebp),%edx
c0108b13:	8b 45 08             	mov    0x8(%ebp),%eax
c0108b16:	0f ab 02             	bts    %eax,(%edx)
c0108b19:	19 c0                	sbb    %eax,%eax
c0108b1b:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return oldbit != 0;
c0108b1e:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0108b22:	0f 95 c0             	setne  %al
c0108b25:	0f b6 c0             	movzbl %al,%eax
}
c0108b28:	c9                   	leave  
c0108b29:	c3                   	ret    

c0108b2a <test_and_clear_bit>:
 * test_and_clear_bit - Atomically clear a bit and return its old value
 * @nr:     the bit to clear
 * @addr:   the address to count from
 * */
static inline bool
test_and_clear_bit(int nr, volatile void *addr) {
c0108b2a:	55                   	push   %ebp
c0108b2b:	89 e5                	mov    %esp,%ebp
c0108b2d:	83 ec 10             	sub    $0x10,%esp
    int oldbit;
    asm volatile ("btrl %2, %1; sbbl %0, %0" : "=r" (oldbit), "=m" (*(volatile long *)addr) : "Ir" (nr) : "memory");
c0108b30:	8b 55 0c             	mov    0xc(%ebp),%edx
c0108b33:	8b 45 08             	mov    0x8(%ebp),%eax
c0108b36:	0f b3 02             	btr    %eax,(%edx)
c0108b39:	19 c0                	sbb    %eax,%eax
c0108b3b:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return oldbit != 0;
c0108b3e:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0108b42:	0f 95 c0             	setne  %al
c0108b45:	0f b6 c0             	movzbl %al,%eax
}
c0108b48:	c9                   	leave  
c0108b49:	c3                   	ret    

c0108b4a <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0108b4a:	55                   	push   %ebp
c0108b4b:	89 e5                	mov    %esp,%ebp
c0108b4d:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0108b50:	9c                   	pushf  
c0108b51:	58                   	pop    %eax
c0108b52:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0108b55:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0108b58:	25 00 02 00 00       	and    $0x200,%eax
c0108b5d:	85 c0                	test   %eax,%eax
c0108b5f:	74 0c                	je     c0108b6d <__intr_save+0x23>
        intr_disable();
c0108b61:	e8 56 96 ff ff       	call   c01021bc <intr_disable>
        return 1;
c0108b66:	b8 01 00 00 00       	mov    $0x1,%eax
c0108b6b:	eb 05                	jmp    c0108b72 <__intr_save+0x28>
    }
    return 0;
c0108b6d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0108b72:	c9                   	leave  
c0108b73:	c3                   	ret    

c0108b74 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0108b74:	55                   	push   %ebp
c0108b75:	89 e5                	mov    %esp,%ebp
c0108b77:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0108b7a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0108b7e:	74 05                	je     c0108b85 <__intr_restore+0x11>
        intr_enable();
c0108b80:	e8 30 96 ff ff       	call   c01021b5 <intr_enable>
    }
}
c0108b85:	90                   	nop
c0108b86:	c9                   	leave  
c0108b87:	c3                   	ret    

c0108b88 <try_lock>:
lock_init(lock_t *lock) {
    *lock = 0;
}

static inline bool
try_lock(lock_t *lock) {
c0108b88:	55                   	push   %ebp
c0108b89:	89 e5                	mov    %esp,%ebp
    return !test_and_set_bit(0, lock);
c0108b8b:	ff 75 08             	pushl  0x8(%ebp)
c0108b8e:	6a 00                	push   $0x0
c0108b90:	e8 75 ff ff ff       	call   c0108b0a <test_and_set_bit>
c0108b95:	83 c4 08             	add    $0x8,%esp
c0108b98:	85 c0                	test   %eax,%eax
c0108b9a:	0f 94 c0             	sete   %al
c0108b9d:	0f b6 c0             	movzbl %al,%eax
}
c0108ba0:	c9                   	leave  
c0108ba1:	c3                   	ret    

c0108ba2 <lock>:

static inline void
lock(lock_t *lock) {
c0108ba2:	55                   	push   %ebp
c0108ba3:	89 e5                	mov    %esp,%ebp
c0108ba5:	83 ec 08             	sub    $0x8,%esp
    while (!try_lock(lock)) {
c0108ba8:	eb 05                	jmp    c0108baf <lock+0xd>
        schedule();
c0108baa:	e8 36 1c 00 00       	call   c010a7e5 <schedule>
    return !test_and_set_bit(0, lock);
}

static inline void
lock(lock_t *lock) {
    while (!try_lock(lock)) {
c0108baf:	83 ec 0c             	sub    $0xc,%esp
c0108bb2:	ff 75 08             	pushl  0x8(%ebp)
c0108bb5:	e8 ce ff ff ff       	call   c0108b88 <try_lock>
c0108bba:	83 c4 10             	add    $0x10,%esp
c0108bbd:	85 c0                	test   %eax,%eax
c0108bbf:	74 e9                	je     c0108baa <lock+0x8>
        schedule();
    }
}
c0108bc1:	90                   	nop
c0108bc2:	c9                   	leave  
c0108bc3:	c3                   	ret    

c0108bc4 <unlock>:

static inline void
unlock(lock_t *lock) {
c0108bc4:	55                   	push   %ebp
c0108bc5:	89 e5                	mov    %esp,%ebp
c0108bc7:	83 ec 08             	sub    $0x8,%esp
    if (!test_and_clear_bit(0, lock)) {
c0108bca:	ff 75 08             	pushl  0x8(%ebp)
c0108bcd:	6a 00                	push   $0x0
c0108bcf:	e8 56 ff ff ff       	call   c0108b2a <test_and_clear_bit>
c0108bd4:	83 c4 08             	add    $0x8,%esp
c0108bd7:	85 c0                	test   %eax,%eax
c0108bd9:	75 14                	jne    c0108bef <unlock+0x2b>
        panic("Unlock failed.\n");
c0108bdb:	83 ec 04             	sub    $0x4,%esp
c0108bde:	68 98 d9 10 c0       	push   $0xc010d998
c0108be3:	6a 34                	push   $0x34
c0108be5:	68 a8 d9 10 c0       	push   $0xc010d9a8
c0108bea:	e8 0e 78 ff ff       	call   c01003fd <__panic>
    }
}
c0108bef:	90                   	nop
c0108bf0:	c9                   	leave  
c0108bf1:	c3                   	ret    

c0108bf2 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0108bf2:	55                   	push   %ebp
c0108bf3:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0108bf5:	8b 45 08             	mov    0x8(%ebp),%eax
c0108bf8:	8b 15 b8 31 1b c0    	mov    0xc01b31b8,%edx
c0108bfe:	29 d0                	sub    %edx,%eax
c0108c00:	c1 f8 05             	sar    $0x5,%eax
}
c0108c03:	5d                   	pop    %ebp
c0108c04:	c3                   	ret    

c0108c05 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0108c05:	55                   	push   %ebp
c0108c06:	89 e5                	mov    %esp,%ebp
    return page2ppn(page) << PGSHIFT;
c0108c08:	ff 75 08             	pushl  0x8(%ebp)
c0108c0b:	e8 e2 ff ff ff       	call   c0108bf2 <page2ppn>
c0108c10:	83 c4 04             	add    $0x4,%esp
c0108c13:	c1 e0 0c             	shl    $0xc,%eax
}
c0108c16:	c9                   	leave  
c0108c17:	c3                   	ret    

c0108c18 <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c0108c18:	55                   	push   %ebp
c0108c19:	89 e5                	mov    %esp,%ebp
c0108c1b:	83 ec 08             	sub    $0x8,%esp
    if (PPN(pa) >= npage) {
c0108c1e:	8b 45 08             	mov    0x8(%ebp),%eax
c0108c21:	c1 e8 0c             	shr    $0xc,%eax
c0108c24:	89 c2                	mov    %eax,%edx
c0108c26:	a1 80 0f 1b c0       	mov    0xc01b0f80,%eax
c0108c2b:	39 c2                	cmp    %eax,%edx
c0108c2d:	72 14                	jb     c0108c43 <pa2page+0x2b>
        panic("pa2page called with invalid pa");
c0108c2f:	83 ec 04             	sub    $0x4,%esp
c0108c32:	68 bc d9 10 c0       	push   $0xc010d9bc
c0108c37:	6a 5e                	push   $0x5e
c0108c39:	68 db d9 10 c0       	push   $0xc010d9db
c0108c3e:	e8 ba 77 ff ff       	call   c01003fd <__panic>
    }
    return &pages[PPN(pa)];
c0108c43:	a1 b8 31 1b c0       	mov    0xc01b31b8,%eax
c0108c48:	8b 55 08             	mov    0x8(%ebp),%edx
c0108c4b:	c1 ea 0c             	shr    $0xc,%edx
c0108c4e:	c1 e2 05             	shl    $0x5,%edx
c0108c51:	01 d0                	add    %edx,%eax
}
c0108c53:	c9                   	leave  
c0108c54:	c3                   	ret    

c0108c55 <page2kva>:

static inline void *
page2kva(struct Page *page) {
c0108c55:	55                   	push   %ebp
c0108c56:	89 e5                	mov    %esp,%ebp
c0108c58:	83 ec 18             	sub    $0x18,%esp
    return KADDR(page2pa(page));
c0108c5b:	ff 75 08             	pushl  0x8(%ebp)
c0108c5e:	e8 a2 ff ff ff       	call   c0108c05 <page2pa>
c0108c63:	83 c4 04             	add    $0x4,%esp
c0108c66:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108c69:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108c6c:	c1 e8 0c             	shr    $0xc,%eax
c0108c6f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108c72:	a1 80 0f 1b c0       	mov    0xc01b0f80,%eax
c0108c77:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0108c7a:	72 14                	jb     c0108c90 <page2kva+0x3b>
c0108c7c:	ff 75 f4             	pushl  -0xc(%ebp)
c0108c7f:	68 ec d9 10 c0       	push   $0xc010d9ec
c0108c84:	6a 65                	push   $0x65
c0108c86:	68 db d9 10 c0       	push   $0xc010d9db
c0108c8b:	e8 6d 77 ff ff       	call   c01003fd <__panic>
c0108c90:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108c93:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c0108c98:	c9                   	leave  
c0108c99:	c3                   	ret    

c0108c9a <kva2page>:

static inline struct Page *
kva2page(void *kva) {
c0108c9a:	55                   	push   %ebp
c0108c9b:	89 e5                	mov    %esp,%ebp
c0108c9d:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PADDR(kva));
c0108ca0:	8b 45 08             	mov    0x8(%ebp),%eax
c0108ca3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108ca6:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c0108cad:	77 14                	ja     c0108cc3 <kva2page+0x29>
c0108caf:	ff 75 f4             	pushl  -0xc(%ebp)
c0108cb2:	68 10 da 10 c0       	push   $0xc010da10
c0108cb7:	6a 6a                	push   $0x6a
c0108cb9:	68 db d9 10 c0       	push   $0xc010d9db
c0108cbe:	e8 3a 77 ff ff       	call   c01003fd <__panic>
c0108cc3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108cc6:	05 00 00 00 40       	add    $0x40000000,%eax
c0108ccb:	83 ec 0c             	sub    $0xc,%esp
c0108cce:	50                   	push   %eax
c0108ccf:	e8 44 ff ff ff       	call   c0108c18 <pa2page>
c0108cd4:	83 c4 10             	add    $0x10,%esp
}
c0108cd7:	c9                   	leave  
c0108cd8:	c3                   	ret    

c0108cd9 <mm_count_inc>:

static inline int
mm_count_inc(struct mm_struct *mm) {
c0108cd9:	55                   	push   %ebp
c0108cda:	89 e5                	mov    %esp,%ebp
    mm->mm_count += 1;
c0108cdc:	8b 45 08             	mov    0x8(%ebp),%eax
c0108cdf:	8b 40 18             	mov    0x18(%eax),%eax
c0108ce2:	8d 50 01             	lea    0x1(%eax),%edx
c0108ce5:	8b 45 08             	mov    0x8(%ebp),%eax
c0108ce8:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c0108ceb:	8b 45 08             	mov    0x8(%ebp),%eax
c0108cee:	8b 40 18             	mov    0x18(%eax),%eax
}
c0108cf1:	5d                   	pop    %ebp
c0108cf2:	c3                   	ret    

c0108cf3 <mm_count_dec>:

static inline int
mm_count_dec(struct mm_struct *mm) {
c0108cf3:	55                   	push   %ebp
c0108cf4:	89 e5                	mov    %esp,%ebp
    mm->mm_count -= 1;
c0108cf6:	8b 45 08             	mov    0x8(%ebp),%eax
c0108cf9:	8b 40 18             	mov    0x18(%eax),%eax
c0108cfc:	8d 50 ff             	lea    -0x1(%eax),%edx
c0108cff:	8b 45 08             	mov    0x8(%ebp),%eax
c0108d02:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c0108d05:	8b 45 08             	mov    0x8(%ebp),%eax
c0108d08:	8b 40 18             	mov    0x18(%eax),%eax
}
c0108d0b:	5d                   	pop    %ebp
c0108d0c:	c3                   	ret    

c0108d0d <lock_mm>:

static inline void
lock_mm(struct mm_struct *mm) {
c0108d0d:	55                   	push   %ebp
c0108d0e:	89 e5                	mov    %esp,%ebp
c0108d10:	83 ec 08             	sub    $0x8,%esp
    if (mm != NULL) {
c0108d13:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0108d17:	74 12                	je     c0108d2b <lock_mm+0x1e>
        lock(&(mm->mm_lock));
c0108d19:	8b 45 08             	mov    0x8(%ebp),%eax
c0108d1c:	83 c0 1c             	add    $0x1c,%eax
c0108d1f:	83 ec 0c             	sub    $0xc,%esp
c0108d22:	50                   	push   %eax
c0108d23:	e8 7a fe ff ff       	call   c0108ba2 <lock>
c0108d28:	83 c4 10             	add    $0x10,%esp
    }
}
c0108d2b:	90                   	nop
c0108d2c:	c9                   	leave  
c0108d2d:	c3                   	ret    

c0108d2e <unlock_mm>:

static inline void
unlock_mm(struct mm_struct *mm) {
c0108d2e:	55                   	push   %ebp
c0108d2f:	89 e5                	mov    %esp,%ebp
c0108d31:	83 ec 08             	sub    $0x8,%esp
    if (mm != NULL) {
c0108d34:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0108d38:	74 12                	je     c0108d4c <unlock_mm+0x1e>
        unlock(&(mm->mm_lock));
c0108d3a:	8b 45 08             	mov    0x8(%ebp),%eax
c0108d3d:	83 c0 1c             	add    $0x1c,%eax
c0108d40:	83 ec 0c             	sub    $0xc,%esp
c0108d43:	50                   	push   %eax
c0108d44:	e8 7b fe ff ff       	call   c0108bc4 <unlock>
c0108d49:	83 c4 10             	add    $0x10,%esp
    }
}
c0108d4c:	90                   	nop
c0108d4d:	c9                   	leave  
c0108d4e:	c3                   	ret    

c0108d4f <alloc_proc>:
void forkrets(struct trapframe *tf);
void switch_to(struct context *from, struct context *to);

// alloc_proc - alloc a proc_struct and init all fields of proc_struct
static struct proc_struct *
alloc_proc(void) {
c0108d4f:	55                   	push   %ebp
c0108d50:	89 e5                	mov    %esp,%ebp
c0108d52:	83 ec 18             	sub    $0x18,%esp
    struct proc_struct *proc = kmalloc(sizeof(struct proc_struct));
c0108d55:	83 ec 0c             	sub    $0xc,%esp
c0108d58:	68 a0 00 00 00       	push   $0xa0
c0108d5d:	e8 ff c3 ff ff       	call   c0105161 <kmalloc>
c0108d62:	83 c4 10             	add    $0x10,%esp
c0108d65:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (proc != NULL) {
c0108d68:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108d6c:	0f 84 32 01 00 00    	je     c0108ea4 <alloc_proc+0x155>
     *     int time_slice;                             // time slice for occupying the CPU
     *     skew_heap_entry_t lab6_run_pool;            // FOR LAB6 ONLY: the entry in the run pool
     *     uint32_t lab6_stride;                       // FOR LAB6 ONLY: the current stride of the process
     *     uint32_t lab6_priority;                     // FOR LAB6 ONLY: the priority of process, set by lab6_set_priority(uint32_t)
     */
        proc->state = PROC_UNINIT;
c0108d72:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108d75:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        proc->pid = -1;         // an invalid pid
c0108d7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108d7e:	c7 40 04 ff ff ff ff 	movl   $0xffffffff,0x4(%eax)
        proc->runs = 0;
c0108d85:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108d88:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        proc->kstack = 0;
c0108d8f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108d92:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        proc->need_resched = 0;
c0108d99:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108d9c:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
        proc->parent = NULL;
c0108da3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108da6:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
        proc->mm = NULL;
c0108dad:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108db0:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
        proc->tf = NULL;
c0108db7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108dba:	c7 40 3c 00 00 00 00 	movl   $0x0,0x3c(%eax)
        proc->cr3 = boot_cr3;   // kernel threads share boot_cr3
c0108dc1:	8b 15 b4 31 1b c0    	mov    0xc01b31b4,%edx
c0108dc7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108dca:	89 50 40             	mov    %edx,0x40(%eax)
        proc->flags = 0;
c0108dcd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108dd0:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
        // NEW
        proc->wait_state = 0;
c0108dd7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108dda:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
        proc->cptr = NULL;
c0108de1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108de4:	c7 40 70 00 00 00 00 	movl   $0x0,0x70(%eax)
        proc->yptr = NULL;
c0108deb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108dee:	c7 40 74 00 00 00 00 	movl   $0x0,0x74(%eax)
        proc->optr = NULL;
c0108df5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108df8:	c7 40 78 00 00 00 00 	movl   $0x0,0x78(%eax)
        // NEW IN LAB 6
        proc->rq = NULL;
c0108dff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108e02:	c7 40 7c 00 00 00 00 	movl   $0x0,0x7c(%eax)
        list_init(&(proc->run_link));
c0108e09:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108e0c:	83 e8 80             	sub    $0xffffff80,%eax
c0108e0f:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0108e12:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108e15:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0108e18:	89 50 04             	mov    %edx,0x4(%eax)
c0108e1b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108e1e:	8b 50 04             	mov    0x4(%eax),%edx
c0108e21:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108e24:	89 10                	mov    %edx,(%eax)
        proc->time_slice = 0;
c0108e26:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108e29:	c7 80 88 00 00 00 00 	movl   $0x0,0x88(%eax)
c0108e30:	00 00 00 
        // for stride
        skew_heap_init(&(proc->lab6_run_pool));
c0108e33:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108e36:	05 8c 00 00 00       	add    $0x8c,%eax
c0108e3b:	89 45 ec             	mov    %eax,-0x14(%ebp)
     compare_f comp) __attribute__((always_inline));

static inline void
skew_heap_init(skew_heap_entry_t *a)
{
     a->left = a->right = a->parent = NULL;
c0108e3e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108e41:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0108e47:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108e4a:	8b 10                	mov    (%eax),%edx
c0108e4c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108e4f:	89 50 08             	mov    %edx,0x8(%eax)
c0108e52:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108e55:	8b 50 08             	mov    0x8(%eax),%edx
c0108e58:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108e5b:	89 50 04             	mov    %edx,0x4(%eax)
        proc->lab6_stride = 0;
c0108e5e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108e61:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
c0108e68:	00 00 00 
        proc->lab6_priority = 1;
c0108e6b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108e6e:	c7 80 9c 00 00 00 01 	movl   $0x1,0x9c(%eax)
c0108e75:	00 00 00 

        memset(&(proc->context), 0, sizeof(struct context));
c0108e78:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108e7b:	83 c0 1c             	add    $0x1c,%eax
c0108e7e:	83 ec 04             	sub    $0x4,%esp
c0108e81:	6a 20                	push   $0x20
c0108e83:	6a 00                	push   $0x0
c0108e85:	50                   	push   %eax
c0108e86:	e8 72 22 00 00       	call   c010b0fd <memset>
c0108e8b:	83 c4 10             	add    $0x10,%esp
        memset(proc->name, 0, sizeof(char) * (PROC_NAME_LEN + 1));
c0108e8e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108e91:	83 c0 48             	add    $0x48,%eax
c0108e94:	83 ec 04             	sub    $0x4,%esp
c0108e97:	6a 10                	push   $0x10
c0108e99:	6a 00                	push   $0x0
c0108e9b:	50                   	push   %eax
c0108e9c:	e8 5c 22 00 00       	call   c010b0fd <memset>
c0108ea1:	83 c4 10             	add    $0x10,%esp
    }
    return proc;
c0108ea4:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0108ea7:	c9                   	leave  
c0108ea8:	c3                   	ret    

c0108ea9 <set_proc_name>:

// set_proc_name - set the name of proc
char *
set_proc_name(struct proc_struct *proc, const char *name) {
c0108ea9:	55                   	push   %ebp
c0108eaa:	89 e5                	mov    %esp,%ebp
c0108eac:	83 ec 08             	sub    $0x8,%esp
    memset(proc->name, 0, sizeof(proc->name));
c0108eaf:	8b 45 08             	mov    0x8(%ebp),%eax
c0108eb2:	83 c0 48             	add    $0x48,%eax
c0108eb5:	83 ec 04             	sub    $0x4,%esp
c0108eb8:	6a 10                	push   $0x10
c0108eba:	6a 00                	push   $0x0
c0108ebc:	50                   	push   %eax
c0108ebd:	e8 3b 22 00 00       	call   c010b0fd <memset>
c0108ec2:	83 c4 10             	add    $0x10,%esp
    return memcpy(proc->name, name, PROC_NAME_LEN);
c0108ec5:	8b 45 08             	mov    0x8(%ebp),%eax
c0108ec8:	83 c0 48             	add    $0x48,%eax
c0108ecb:	83 ec 04             	sub    $0x4,%esp
c0108ece:	6a 0f                	push   $0xf
c0108ed0:	ff 75 0c             	pushl  0xc(%ebp)
c0108ed3:	50                   	push   %eax
c0108ed4:	e8 07 23 00 00       	call   c010b1e0 <memcpy>
c0108ed9:	83 c4 10             	add    $0x10,%esp
}
c0108edc:	c9                   	leave  
c0108edd:	c3                   	ret    

c0108ede <get_proc_name>:

// get_proc_name - get the name of proc
char *
get_proc_name(struct proc_struct *proc) {
c0108ede:	55                   	push   %ebp
c0108edf:	89 e5                	mov    %esp,%ebp
c0108ee1:	83 ec 08             	sub    $0x8,%esp
    static char name[PROC_NAME_LEN + 1];
    memset(name, 0, sizeof(name));
c0108ee4:	83 ec 04             	sub    $0x4,%esp
c0108ee7:	6a 10                	push   $0x10
c0108ee9:	6a 00                	push   $0x0
c0108eeb:	68 44 30 1b c0       	push   $0xc01b3044
c0108ef0:	e8 08 22 00 00       	call   c010b0fd <memset>
c0108ef5:	83 c4 10             	add    $0x10,%esp
    return memcpy(name, proc->name, PROC_NAME_LEN);
c0108ef8:	8b 45 08             	mov    0x8(%ebp),%eax
c0108efb:	83 c0 48             	add    $0x48,%eax
c0108efe:	83 ec 04             	sub    $0x4,%esp
c0108f01:	6a 0f                	push   $0xf
c0108f03:	50                   	push   %eax
c0108f04:	68 44 30 1b c0       	push   $0xc01b3044
c0108f09:	e8 d2 22 00 00       	call   c010b1e0 <memcpy>
c0108f0e:	83 c4 10             	add    $0x10,%esp
}
c0108f11:	c9                   	leave  
c0108f12:	c3                   	ret    

c0108f13 <set_links>:

// set_links - set the relation links of process
static void
set_links(struct proc_struct *proc) {
c0108f13:	55                   	push   %ebp
c0108f14:	89 e5                	mov    %esp,%ebp
c0108f16:	83 ec 20             	sub    $0x20,%esp
    list_add(&proc_list, &(proc->list_link));
c0108f19:	8b 45 08             	mov    0x8(%ebp),%eax
c0108f1c:	83 c0 58             	add    $0x58,%eax
c0108f1f:	c7 45 fc bc 31 1b c0 	movl   $0xc01b31bc,-0x4(%ebp)
c0108f26:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0108f29:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108f2c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108f2f:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0108f32:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0108f35:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108f38:	8b 40 04             	mov    0x4(%eax),%eax
c0108f3b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0108f3e:	89 55 ec             	mov    %edx,-0x14(%ebp)
c0108f41:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108f44:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0108f47:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0108f4a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108f4d:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0108f50:	89 10                	mov    %edx,(%eax)
c0108f52:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108f55:	8b 10                	mov    (%eax),%edx
c0108f57:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108f5a:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0108f5d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108f60:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0108f63:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0108f66:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108f69:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0108f6c:	89 10                	mov    %edx,(%eax)
    proc->yptr = NULL;
c0108f6e:	8b 45 08             	mov    0x8(%ebp),%eax
c0108f71:	c7 40 74 00 00 00 00 	movl   $0x0,0x74(%eax)
    if ((proc->optr = proc->parent->cptr) != NULL) {
c0108f78:	8b 45 08             	mov    0x8(%ebp),%eax
c0108f7b:	8b 40 14             	mov    0x14(%eax),%eax
c0108f7e:	8b 50 70             	mov    0x70(%eax),%edx
c0108f81:	8b 45 08             	mov    0x8(%ebp),%eax
c0108f84:	89 50 78             	mov    %edx,0x78(%eax)
c0108f87:	8b 45 08             	mov    0x8(%ebp),%eax
c0108f8a:	8b 40 78             	mov    0x78(%eax),%eax
c0108f8d:	85 c0                	test   %eax,%eax
c0108f8f:	74 0c                	je     c0108f9d <set_links+0x8a>
        proc->optr->yptr = proc;
c0108f91:	8b 45 08             	mov    0x8(%ebp),%eax
c0108f94:	8b 40 78             	mov    0x78(%eax),%eax
c0108f97:	8b 55 08             	mov    0x8(%ebp),%edx
c0108f9a:	89 50 74             	mov    %edx,0x74(%eax)
    }
    proc->parent->cptr = proc;
c0108f9d:	8b 45 08             	mov    0x8(%ebp),%eax
c0108fa0:	8b 40 14             	mov    0x14(%eax),%eax
c0108fa3:	8b 55 08             	mov    0x8(%ebp),%edx
c0108fa6:	89 50 70             	mov    %edx,0x70(%eax)
    nr_process ++;
c0108fa9:	a1 40 30 1b c0       	mov    0xc01b3040,%eax
c0108fae:	83 c0 01             	add    $0x1,%eax
c0108fb1:	a3 40 30 1b c0       	mov    %eax,0xc01b3040
}
c0108fb6:	90                   	nop
c0108fb7:	c9                   	leave  
c0108fb8:	c3                   	ret    

c0108fb9 <remove_links>:

// remove_links - clean the relation links of process
static void
remove_links(struct proc_struct *proc) {
c0108fb9:	55                   	push   %ebp
c0108fba:	89 e5                	mov    %esp,%ebp
c0108fbc:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->list_link));
c0108fbf:	8b 45 08             	mov    0x8(%ebp),%eax
c0108fc2:	83 c0 58             	add    $0x58,%eax
c0108fc5:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0108fc8:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108fcb:	8b 40 04             	mov    0x4(%eax),%eax
c0108fce:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0108fd1:	8b 12                	mov    (%edx),%edx
c0108fd3:	89 55 f8             	mov    %edx,-0x8(%ebp)
c0108fd6:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0108fd9:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0108fdc:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108fdf:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0108fe2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108fe5:	8b 55 f8             	mov    -0x8(%ebp),%edx
c0108fe8:	89 10                	mov    %edx,(%eax)
    if (proc->optr != NULL) {
c0108fea:	8b 45 08             	mov    0x8(%ebp),%eax
c0108fed:	8b 40 78             	mov    0x78(%eax),%eax
c0108ff0:	85 c0                	test   %eax,%eax
c0108ff2:	74 0f                	je     c0109003 <remove_links+0x4a>
        proc->optr->yptr = proc->yptr;
c0108ff4:	8b 45 08             	mov    0x8(%ebp),%eax
c0108ff7:	8b 40 78             	mov    0x78(%eax),%eax
c0108ffa:	8b 55 08             	mov    0x8(%ebp),%edx
c0108ffd:	8b 52 74             	mov    0x74(%edx),%edx
c0109000:	89 50 74             	mov    %edx,0x74(%eax)
    }
    if (proc->yptr != NULL) {
c0109003:	8b 45 08             	mov    0x8(%ebp),%eax
c0109006:	8b 40 74             	mov    0x74(%eax),%eax
c0109009:	85 c0                	test   %eax,%eax
c010900b:	74 11                	je     c010901e <remove_links+0x65>
        proc->yptr->optr = proc->optr;
c010900d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109010:	8b 40 74             	mov    0x74(%eax),%eax
c0109013:	8b 55 08             	mov    0x8(%ebp),%edx
c0109016:	8b 52 78             	mov    0x78(%edx),%edx
c0109019:	89 50 78             	mov    %edx,0x78(%eax)
c010901c:	eb 0f                	jmp    c010902d <remove_links+0x74>
    }
    else {
       proc->parent->cptr = proc->optr;
c010901e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109021:	8b 40 14             	mov    0x14(%eax),%eax
c0109024:	8b 55 08             	mov    0x8(%ebp),%edx
c0109027:	8b 52 78             	mov    0x78(%edx),%edx
c010902a:	89 50 70             	mov    %edx,0x70(%eax)
    }
    nr_process --;
c010902d:	a1 40 30 1b c0       	mov    0xc01b3040,%eax
c0109032:	83 e8 01             	sub    $0x1,%eax
c0109035:	a3 40 30 1b c0       	mov    %eax,0xc01b3040
}
c010903a:	90                   	nop
c010903b:	c9                   	leave  
c010903c:	c3                   	ret    

c010903d <get_pid>:

// get_pid - alloc a unique pid for process
static int
get_pid(void) {
c010903d:	55                   	push   %ebp
c010903e:	89 e5                	mov    %esp,%ebp
c0109040:	83 ec 10             	sub    $0x10,%esp
    static_assert(MAX_PID > MAX_PROCESS);
    struct proc_struct *proc;
    list_entry_t *list = &proc_list, *le;
c0109043:	c7 45 f8 bc 31 1b c0 	movl   $0xc01b31bc,-0x8(%ebp)
    static int next_safe = MAX_PID, last_pid = MAX_PID;
    if (++ last_pid >= MAX_PID) {
c010904a:	a1 78 ca 12 c0       	mov    0xc012ca78,%eax
c010904f:	83 c0 01             	add    $0x1,%eax
c0109052:	a3 78 ca 12 c0       	mov    %eax,0xc012ca78
c0109057:	a1 78 ca 12 c0       	mov    0xc012ca78,%eax
c010905c:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c0109061:	7e 0c                	jle    c010906f <get_pid+0x32>
        last_pid = 1;
c0109063:	c7 05 78 ca 12 c0 01 	movl   $0x1,0xc012ca78
c010906a:	00 00 00 
        goto inside;
c010906d:	eb 13                	jmp    c0109082 <get_pid+0x45>
    }
    if (last_pid >= next_safe) {
c010906f:	8b 15 78 ca 12 c0    	mov    0xc012ca78,%edx
c0109075:	a1 7c ca 12 c0       	mov    0xc012ca7c,%eax
c010907a:	39 c2                	cmp    %eax,%edx
c010907c:	0f 8c ac 00 00 00    	jl     c010912e <get_pid+0xf1>
    inside:
        next_safe = MAX_PID;
c0109082:	c7 05 7c ca 12 c0 00 	movl   $0x2000,0xc012ca7c
c0109089:	20 00 00 
    repeat:
        le = list;
c010908c:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010908f:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while ((le = list_next(le)) != list) {
c0109092:	eb 7f                	jmp    c0109113 <get_pid+0xd6>
            proc = le2proc(le, list_link);
c0109094:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109097:	83 e8 58             	sub    $0x58,%eax
c010909a:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (proc->pid == last_pid) {
c010909d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01090a0:	8b 50 04             	mov    0x4(%eax),%edx
c01090a3:	a1 78 ca 12 c0       	mov    0xc012ca78,%eax
c01090a8:	39 c2                	cmp    %eax,%edx
c01090aa:	75 3e                	jne    c01090ea <get_pid+0xad>
                if (++ last_pid >= next_safe) {
c01090ac:	a1 78 ca 12 c0       	mov    0xc012ca78,%eax
c01090b1:	83 c0 01             	add    $0x1,%eax
c01090b4:	a3 78 ca 12 c0       	mov    %eax,0xc012ca78
c01090b9:	8b 15 78 ca 12 c0    	mov    0xc012ca78,%edx
c01090bf:	a1 7c ca 12 c0       	mov    0xc012ca7c,%eax
c01090c4:	39 c2                	cmp    %eax,%edx
c01090c6:	7c 4b                	jl     c0109113 <get_pid+0xd6>
                    if (last_pid >= MAX_PID) {
c01090c8:	a1 78 ca 12 c0       	mov    0xc012ca78,%eax
c01090cd:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c01090d2:	7e 0a                	jle    c01090de <get_pid+0xa1>
                        last_pid = 1;
c01090d4:	c7 05 78 ca 12 c0 01 	movl   $0x1,0xc012ca78
c01090db:	00 00 00 
                    }
                    next_safe = MAX_PID;
c01090de:	c7 05 7c ca 12 c0 00 	movl   $0x2000,0xc012ca7c
c01090e5:	20 00 00 
                    goto repeat;
c01090e8:	eb a2                	jmp    c010908c <get_pid+0x4f>
                }
            }
            else if (proc->pid > last_pid && next_safe > proc->pid) {
c01090ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01090ed:	8b 50 04             	mov    0x4(%eax),%edx
c01090f0:	a1 78 ca 12 c0       	mov    0xc012ca78,%eax
c01090f5:	39 c2                	cmp    %eax,%edx
c01090f7:	7e 1a                	jle    c0109113 <get_pid+0xd6>
c01090f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01090fc:	8b 50 04             	mov    0x4(%eax),%edx
c01090ff:	a1 7c ca 12 c0       	mov    0xc012ca7c,%eax
c0109104:	39 c2                	cmp    %eax,%edx
c0109106:	7d 0b                	jge    c0109113 <get_pid+0xd6>
                next_safe = proc->pid;
c0109108:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010910b:	8b 40 04             	mov    0x4(%eax),%eax
c010910e:	a3 7c ca 12 c0       	mov    %eax,0xc012ca7c
c0109113:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109116:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0109119:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010911c:	8b 40 04             	mov    0x4(%eax),%eax
    if (last_pid >= next_safe) {
    inside:
        next_safe = MAX_PID;
    repeat:
        le = list;
        while ((le = list_next(le)) != list) {
c010911f:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0109122:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109125:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c0109128:	0f 85 66 ff ff ff    	jne    c0109094 <get_pid+0x57>
            else if (proc->pid > last_pid && next_safe > proc->pid) {
                next_safe = proc->pid;
            }
        }
    }
    return last_pid;
c010912e:	a1 78 ca 12 c0       	mov    0xc012ca78,%eax
}
c0109133:	c9                   	leave  
c0109134:	c3                   	ret    

c0109135 <proc_run>:

// proc_run - make process "proc" running on cpu
// NOTE: before call switch_to, should load  base addr of "proc"'s new PDT
void
proc_run(struct proc_struct *proc) {
c0109135:	55                   	push   %ebp
c0109136:	89 e5                	mov    %esp,%ebp
c0109138:	83 ec 18             	sub    $0x18,%esp
    if (proc != current) {
c010913b:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c0109140:	39 45 08             	cmp    %eax,0x8(%ebp)
c0109143:	74 6b                	je     c01091b0 <proc_run+0x7b>
        bool intr_flag;
        struct proc_struct *prev = current, *next = proc;
c0109145:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010914a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010914d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109150:	89 45 f0             	mov    %eax,-0x10(%ebp)
        local_intr_save(intr_flag);
c0109153:	e8 f2 f9 ff ff       	call   c0108b4a <__intr_save>
c0109158:	89 45 ec             	mov    %eax,-0x14(%ebp)
        {
            current = proc;
c010915b:	8b 45 08             	mov    0x8(%ebp),%eax
c010915e:	a3 28 10 1b c0       	mov    %eax,0xc01b1028
            load_esp0(next->kstack + KSTACKSIZE);
c0109163:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109166:	8b 40 0c             	mov    0xc(%eax),%eax
c0109169:	05 00 20 00 00       	add    $0x2000,%eax
c010916e:	83 ec 0c             	sub    $0xc,%esp
c0109171:	50                   	push   %eax
c0109172:	e8 c0 dd ff ff       	call   c0106f37 <load_esp0>
c0109177:	83 c4 10             	add    $0x10,%esp
            lcr3(next->cr3);
c010917a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010917d:	8b 40 40             	mov    0x40(%eax),%eax
c0109180:	89 45 e8             	mov    %eax,-0x18(%ebp)
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
}

static inline void
lcr3(uintptr_t cr3) {
    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
c0109183:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109186:	0f 22 d8             	mov    %eax,%cr3
            switch_to(&(prev->context), &(next->context));
c0109189:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010918c:	8d 50 1c             	lea    0x1c(%eax),%edx
c010918f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109192:	83 c0 1c             	add    $0x1c,%eax
c0109195:	83 ec 08             	sub    $0x8,%esp
c0109198:	52                   	push   %edx
c0109199:	50                   	push   %eax
c010919a:	e8 34 f9 ff ff       	call   c0108ad3 <switch_to>
c010919f:	83 c4 10             	add    $0x10,%esp
        }
        local_intr_restore(intr_flag);
c01091a2:	83 ec 0c             	sub    $0xc,%esp
c01091a5:	ff 75 ec             	pushl  -0x14(%ebp)
c01091a8:	e8 c7 f9 ff ff       	call   c0108b74 <__intr_restore>
c01091ad:	83 c4 10             	add    $0x10,%esp
    }
}
c01091b0:	90                   	nop
c01091b1:	c9                   	leave  
c01091b2:	c3                   	ret    

c01091b3 <forkret>:

// forkret -- the first kernel entry point of a new thread/process
// NOTE: the addr of forkret is setted in copy_thread function
//       after switch_to, the current proc will execute here.
static void
forkret(void) {
c01091b3:	55                   	push   %ebp
c01091b4:	89 e5                	mov    %esp,%ebp
c01091b6:	83 ec 08             	sub    $0x8,%esp
    forkrets(current->tf);
c01091b9:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c01091be:	8b 40 3c             	mov    0x3c(%eax),%eax
c01091c1:	83 ec 0c             	sub    $0xc,%esp
c01091c4:	50                   	push   %eax
c01091c5:	e8 e9 a3 ff ff       	call   c01035b3 <forkrets>
c01091ca:	83 c4 10             	add    $0x10,%esp
}
c01091cd:	90                   	nop
c01091ce:	c9                   	leave  
c01091cf:	c3                   	ret    

c01091d0 <hash_proc>:

// hash_proc - add proc into proc hash_list
static void
hash_proc(struct proc_struct *proc) {
c01091d0:	55                   	push   %ebp
c01091d1:	89 e5                	mov    %esp,%ebp
c01091d3:	53                   	push   %ebx
c01091d4:	83 ec 24             	sub    $0x24,%esp
    list_add(hash_list + pid_hashfn(proc->pid), &(proc->hash_link));
c01091d7:	8b 45 08             	mov    0x8(%ebp),%eax
c01091da:	8d 58 60             	lea    0x60(%eax),%ebx
c01091dd:	8b 45 08             	mov    0x8(%ebp),%eax
c01091e0:	8b 40 04             	mov    0x4(%eax),%eax
c01091e3:	83 ec 08             	sub    $0x8,%esp
c01091e6:	6a 0a                	push   $0xa
c01091e8:	50                   	push   %eax
c01091e9:	e8 a6 26 00 00       	call   c010b894 <hash32>
c01091ee:	83 c4 10             	add    $0x10,%esp
c01091f1:	c1 e0 03             	shl    $0x3,%eax
c01091f4:	05 40 10 1b c0       	add    $0xc01b1040,%eax
c01091f9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01091fc:	89 5d f0             	mov    %ebx,-0x10(%ebp)
c01091ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109202:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0109205:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109208:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010920b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010920e:	8b 40 04             	mov    0x4(%eax),%eax
c0109211:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0109214:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0109217:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010921a:	89 55 e0             	mov    %edx,-0x20(%ebp)
c010921d:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0109220:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0109223:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0109226:	89 10                	mov    %edx,(%eax)
c0109228:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010922b:	8b 10                	mov    (%eax),%edx
c010922d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109230:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0109233:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109236:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0109239:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010923c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010923f:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0109242:	89 10                	mov    %edx,(%eax)
}
c0109244:	90                   	nop
c0109245:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0109248:	c9                   	leave  
c0109249:	c3                   	ret    

c010924a <unhash_proc>:

// unhash_proc - delete proc from proc hash_list
static void
unhash_proc(struct proc_struct *proc) {
c010924a:	55                   	push   %ebp
c010924b:	89 e5                	mov    %esp,%ebp
c010924d:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->hash_link));
c0109250:	8b 45 08             	mov    0x8(%ebp),%eax
c0109253:	83 c0 60             	add    $0x60,%eax
c0109256:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0109259:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010925c:	8b 40 04             	mov    0x4(%eax),%eax
c010925f:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0109262:	8b 12                	mov    (%edx),%edx
c0109264:	89 55 f8             	mov    %edx,-0x8(%ebp)
c0109267:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010926a:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010926d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109270:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0109273:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109276:	8b 55 f8             	mov    -0x8(%ebp),%edx
c0109279:	89 10                	mov    %edx,(%eax)
}
c010927b:	90                   	nop
c010927c:	c9                   	leave  
c010927d:	c3                   	ret    

c010927e <find_proc>:

// find_proc - find proc frome proc hash_list according to pid
struct proc_struct *
find_proc(int pid) {
c010927e:	55                   	push   %ebp
c010927f:	89 e5                	mov    %esp,%ebp
c0109281:	83 ec 18             	sub    $0x18,%esp
    if (0 < pid && pid < MAX_PID) {
c0109284:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0109288:	7e 5d                	jle    c01092e7 <find_proc+0x69>
c010928a:	81 7d 08 ff 1f 00 00 	cmpl   $0x1fff,0x8(%ebp)
c0109291:	7f 54                	jg     c01092e7 <find_proc+0x69>
        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
c0109293:	8b 45 08             	mov    0x8(%ebp),%eax
c0109296:	83 ec 08             	sub    $0x8,%esp
c0109299:	6a 0a                	push   $0xa
c010929b:	50                   	push   %eax
c010929c:	e8 f3 25 00 00       	call   c010b894 <hash32>
c01092a1:	83 c4 10             	add    $0x10,%esp
c01092a4:	c1 e0 03             	shl    $0x3,%eax
c01092a7:	05 40 10 1b c0       	add    $0xc01b1040,%eax
c01092ac:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01092af:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01092b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while ((le = list_next(le)) != list) {
c01092b5:	eb 19                	jmp    c01092d0 <find_proc+0x52>
            struct proc_struct *proc = le2proc(le, hash_link);
c01092b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01092ba:	83 e8 60             	sub    $0x60,%eax
c01092bd:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if (proc->pid == pid) {
c01092c0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01092c3:	8b 40 04             	mov    0x4(%eax),%eax
c01092c6:	3b 45 08             	cmp    0x8(%ebp),%eax
c01092c9:	75 05                	jne    c01092d0 <find_proc+0x52>
                return proc;
c01092cb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01092ce:	eb 1c                	jmp    c01092ec <find_proc+0x6e>
c01092d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01092d3:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01092d6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01092d9:	8b 40 04             	mov    0x4(%eax),%eax
// find_proc - find proc frome proc hash_list according to pid
struct proc_struct *
find_proc(int pid) {
    if (0 < pid && pid < MAX_PID) {
        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
        while ((le = list_next(le)) != list) {
c01092dc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01092df:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01092e2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01092e5:	75 d0                	jne    c01092b7 <find_proc+0x39>
            if (proc->pid == pid) {
                return proc;
            }
        }
    }
    return NULL;
c01092e7:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01092ec:	c9                   	leave  
c01092ed:	c3                   	ret    

c01092ee <kernel_thread>:

// kernel_thread - create a kernel thread using "fn" function
// NOTE: the contents of temp trapframe tf will be copied to 
//       proc->tf in do_fork-->copy_thread function
int
kernel_thread(int (*fn)(void *), void *arg, uint32_t clone_flags) {
c01092ee:	55                   	push   %ebp
c01092ef:	89 e5                	mov    %esp,%ebp
c01092f1:	83 ec 58             	sub    $0x58,%esp
    struct trapframe tf;
    memset(&tf, 0, sizeof(struct trapframe));
c01092f4:	83 ec 04             	sub    $0x4,%esp
c01092f7:	6a 4c                	push   $0x4c
c01092f9:	6a 00                	push   $0x0
c01092fb:	8d 45 ac             	lea    -0x54(%ebp),%eax
c01092fe:	50                   	push   %eax
c01092ff:	e8 f9 1d 00 00       	call   c010b0fd <memset>
c0109304:	83 c4 10             	add    $0x10,%esp
    tf.tf_cs = KERNEL_CS;
c0109307:	66 c7 45 e8 08 00    	movw   $0x8,-0x18(%ebp)
    tf.tf_ds = tf.tf_es = tf.tf_ss = KERNEL_DS;
c010930d:	66 c7 45 f4 10 00    	movw   $0x10,-0xc(%ebp)
c0109313:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c0109317:	66 89 45 d4          	mov    %ax,-0x2c(%ebp)
c010931b:	0f b7 45 d4          	movzwl -0x2c(%ebp),%eax
c010931f:	66 89 45 d8          	mov    %ax,-0x28(%ebp)
    tf.tf_regs.reg_ebx = (uint32_t)fn;
c0109323:	8b 45 08             	mov    0x8(%ebp),%eax
c0109326:	89 45 bc             	mov    %eax,-0x44(%ebp)
    tf.tf_regs.reg_edx = (uint32_t)arg;
c0109329:	8b 45 0c             	mov    0xc(%ebp),%eax
c010932c:	89 45 c0             	mov    %eax,-0x40(%ebp)
    tf.tf_eip = (uint32_t)kernel_thread_entry;
c010932f:	b8 ca 8a 10 c0       	mov    $0xc0108aca,%eax
c0109334:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return do_fork(clone_flags | CLONE_VM, 0, &tf);
c0109337:	8b 45 10             	mov    0x10(%ebp),%eax
c010933a:	80 cc 01             	or     $0x1,%ah
c010933d:	89 c2                	mov    %eax,%edx
c010933f:	83 ec 04             	sub    $0x4,%esp
c0109342:	8d 45 ac             	lea    -0x54(%ebp),%eax
c0109345:	50                   	push   %eax
c0109346:	6a 00                	push   $0x0
c0109348:	52                   	push   %edx
c0109349:	e8 f2 02 00 00       	call   c0109640 <do_fork>
c010934e:	83 c4 10             	add    $0x10,%esp
}
c0109351:	c9                   	leave  
c0109352:	c3                   	ret    

c0109353 <setup_kstack>:

// setup_kstack - alloc pages with size KSTACKPAGE as process kernel stack
static int
setup_kstack(struct proc_struct *proc) {
c0109353:	55                   	push   %ebp
c0109354:	89 e5                	mov    %esp,%ebp
c0109356:	83 ec 18             	sub    $0x18,%esp
    struct Page *page = alloc_pages(KSTACKPAGE);
c0109359:	83 ec 0c             	sub    $0xc,%esp
c010935c:	6a 02                	push   $0x2
c010935e:	e8 28 dd ff ff       	call   c010708b <alloc_pages>
c0109363:	83 c4 10             	add    $0x10,%esp
c0109366:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c0109369:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010936d:	74 1d                	je     c010938c <setup_kstack+0x39>
        proc->kstack = (uintptr_t)page2kva(page);
c010936f:	83 ec 0c             	sub    $0xc,%esp
c0109372:	ff 75 f4             	pushl  -0xc(%ebp)
c0109375:	e8 db f8 ff ff       	call   c0108c55 <page2kva>
c010937a:	83 c4 10             	add    $0x10,%esp
c010937d:	89 c2                	mov    %eax,%edx
c010937f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109382:	89 50 0c             	mov    %edx,0xc(%eax)
        return 0;
c0109385:	b8 00 00 00 00       	mov    $0x0,%eax
c010938a:	eb 05                	jmp    c0109391 <setup_kstack+0x3e>
    }
    return -E_NO_MEM;
c010938c:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c0109391:	c9                   	leave  
c0109392:	c3                   	ret    

c0109393 <put_kstack>:

// put_kstack - free the memory space of process kernel stack
static void
put_kstack(struct proc_struct *proc) {
c0109393:	55                   	push   %ebp
c0109394:	89 e5                	mov    %esp,%ebp
c0109396:	83 ec 08             	sub    $0x8,%esp
    free_pages(kva2page((void *)(proc->kstack)), KSTACKPAGE);
c0109399:	8b 45 08             	mov    0x8(%ebp),%eax
c010939c:	8b 40 0c             	mov    0xc(%eax),%eax
c010939f:	83 ec 0c             	sub    $0xc,%esp
c01093a2:	50                   	push   %eax
c01093a3:	e8 f2 f8 ff ff       	call   c0108c9a <kva2page>
c01093a8:	83 c4 10             	add    $0x10,%esp
c01093ab:	83 ec 08             	sub    $0x8,%esp
c01093ae:	6a 02                	push   $0x2
c01093b0:	50                   	push   %eax
c01093b1:	e8 41 dd ff ff       	call   c01070f7 <free_pages>
c01093b6:	83 c4 10             	add    $0x10,%esp
}
c01093b9:	90                   	nop
c01093ba:	c9                   	leave  
c01093bb:	c3                   	ret    

c01093bc <setup_pgdir>:

// setup_pgdir - alloc one page as PDT
static int
setup_pgdir(struct mm_struct *mm) {
c01093bc:	55                   	push   %ebp
c01093bd:	89 e5                	mov    %esp,%ebp
c01093bf:	83 ec 18             	sub    $0x18,%esp
    struct Page *page;
    if ((page = alloc_page()) == NULL) {
c01093c2:	83 ec 0c             	sub    $0xc,%esp
c01093c5:	6a 01                	push   $0x1
c01093c7:	e8 bf dc ff ff       	call   c010708b <alloc_pages>
c01093cc:	83 c4 10             	add    $0x10,%esp
c01093cf:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01093d2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01093d6:	75 07                	jne    c01093df <setup_pgdir+0x23>
        return -E_NO_MEM;
c01093d8:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c01093dd:	eb 74                	jmp    c0109453 <setup_pgdir+0x97>
    }
    pde_t *pgdir = page2kva(page);
c01093df:	83 ec 0c             	sub    $0xc,%esp
c01093e2:	ff 75 f4             	pushl  -0xc(%ebp)
c01093e5:	e8 6b f8 ff ff       	call   c0108c55 <page2kva>
c01093ea:	83 c4 10             	add    $0x10,%esp
c01093ed:	89 45 f0             	mov    %eax,-0x10(%ebp)
    memcpy(pgdir, boot_pgdir, PGSIZE);
c01093f0:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c01093f5:	83 ec 04             	sub    $0x4,%esp
c01093f8:	68 00 10 00 00       	push   $0x1000
c01093fd:	50                   	push   %eax
c01093fe:	ff 75 f0             	pushl  -0x10(%ebp)
c0109401:	e8 da 1d 00 00       	call   c010b1e0 <memcpy>
c0109406:	83 c4 10             	add    $0x10,%esp
    pgdir[PDX(VPT)] = PADDR(pgdir) | PTE_P | PTE_W;
c0109409:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010940c:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
c0109412:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109415:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0109418:	81 7d ec ff ff ff bf 	cmpl   $0xbfffffff,-0x14(%ebp)
c010941f:	77 17                	ja     c0109438 <setup_pgdir+0x7c>
c0109421:	ff 75 ec             	pushl  -0x14(%ebp)
c0109424:	68 10 da 10 c0       	push   $0xc010da10
c0109429:	68 44 01 00 00       	push   $0x144
c010942e:	68 34 da 10 c0       	push   $0xc010da34
c0109433:	e8 c5 6f ff ff       	call   c01003fd <__panic>
c0109438:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010943b:	05 00 00 00 40       	add    $0x40000000,%eax
c0109440:	83 c8 03             	or     $0x3,%eax
c0109443:	89 02                	mov    %eax,(%edx)
    mm->pgdir = pgdir;
c0109445:	8b 45 08             	mov    0x8(%ebp),%eax
c0109448:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010944b:	89 50 0c             	mov    %edx,0xc(%eax)
    return 0;
c010944e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109453:	c9                   	leave  
c0109454:	c3                   	ret    

c0109455 <put_pgdir>:

// put_pgdir - free the memory space of PDT
static void
put_pgdir(struct mm_struct *mm) {
c0109455:	55                   	push   %ebp
c0109456:	89 e5                	mov    %esp,%ebp
c0109458:	83 ec 08             	sub    $0x8,%esp
    free_page(kva2page(mm->pgdir));
c010945b:	8b 45 08             	mov    0x8(%ebp),%eax
c010945e:	8b 40 0c             	mov    0xc(%eax),%eax
c0109461:	83 ec 0c             	sub    $0xc,%esp
c0109464:	50                   	push   %eax
c0109465:	e8 30 f8 ff ff       	call   c0108c9a <kva2page>
c010946a:	83 c4 10             	add    $0x10,%esp
c010946d:	83 ec 08             	sub    $0x8,%esp
c0109470:	6a 01                	push   $0x1
c0109472:	50                   	push   %eax
c0109473:	e8 7f dc ff ff       	call   c01070f7 <free_pages>
c0109478:	83 c4 10             	add    $0x10,%esp
}
c010947b:	90                   	nop
c010947c:	c9                   	leave  
c010947d:	c3                   	ret    

c010947e <copy_mm>:

// copy_mm - process "proc" duplicate OR share process "current"'s mm according clone_flags
//         - if clone_flags & CLONE_VM, then "share" ; else "duplicate"
static int
copy_mm(uint32_t clone_flags, struct proc_struct *proc) {
c010947e:	55                   	push   %ebp
c010947f:	89 e5                	mov    %esp,%ebp
c0109481:	83 ec 18             	sub    $0x18,%esp
    struct mm_struct *mm, *oldmm = current->mm;
c0109484:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c0109489:	8b 40 18             	mov    0x18(%eax),%eax
c010948c:	89 45 ec             	mov    %eax,-0x14(%ebp)

    /* current is a kernel thread */
    if (oldmm == NULL) {
c010948f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0109493:	75 0a                	jne    c010949f <copy_mm+0x21>
        return 0;
c0109495:	b8 00 00 00 00       	mov    $0x0,%eax
c010949a:	e9 03 01 00 00       	jmp    c01095a2 <copy_mm+0x124>
    }
    if (clone_flags & CLONE_VM) {
c010949f:	8b 45 08             	mov    0x8(%ebp),%eax
c01094a2:	25 00 01 00 00       	and    $0x100,%eax
c01094a7:	85 c0                	test   %eax,%eax
c01094a9:	74 08                	je     c01094b3 <copy_mm+0x35>
        mm = oldmm;
c01094ab:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01094ae:	89 45 f4             	mov    %eax,-0xc(%ebp)
        goto good_mm;
c01094b1:	eb 65                	jmp    c0109518 <copy_mm+0x9a>
    }

    int ret = -E_NO_MEM;
c01094b3:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
    if ((mm = mm_create()) == NULL) {
c01094ba:	e8 7c a1 ff ff       	call   c010363b <mm_create>
c01094bf:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01094c2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01094c6:	0f 84 d2 00 00 00    	je     c010959e <copy_mm+0x120>
        goto bad_mm;
    }
    if (setup_pgdir(mm) != 0) {
c01094cc:	83 ec 0c             	sub    $0xc,%esp
c01094cf:	ff 75 f4             	pushl  -0xc(%ebp)
c01094d2:	e8 e5 fe ff ff       	call   c01093bc <setup_pgdir>
c01094d7:	83 c4 10             	add    $0x10,%esp
c01094da:	85 c0                	test   %eax,%eax
c01094dc:	0f 85 ab 00 00 00    	jne    c010958d <copy_mm+0x10f>
        goto bad_pgdir_cleanup_mm;
    }

    lock_mm(oldmm);
c01094e2:	83 ec 0c             	sub    $0xc,%esp
c01094e5:	ff 75 ec             	pushl  -0x14(%ebp)
c01094e8:	e8 20 f8 ff ff       	call   c0108d0d <lock_mm>
c01094ed:	83 c4 10             	add    $0x10,%esp
    {
        ret = dup_mmap(mm, oldmm);
c01094f0:	83 ec 08             	sub    $0x8,%esp
c01094f3:	ff 75 ec             	pushl  -0x14(%ebp)
c01094f6:	ff 75 f4             	pushl  -0xc(%ebp)
c01094f9:	e8 0e a6 ff ff       	call   c0103b0c <dup_mmap>
c01094fe:	83 c4 10             	add    $0x10,%esp
c0109501:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    unlock_mm(oldmm);
c0109504:	83 ec 0c             	sub    $0xc,%esp
c0109507:	ff 75 ec             	pushl  -0x14(%ebp)
c010950a:	e8 1f f8 ff ff       	call   c0108d2e <unlock_mm>
c010950f:	83 c4 10             	add    $0x10,%esp

    if (ret != 0) {
c0109512:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0109516:	75 56                	jne    c010956e <copy_mm+0xf0>
        goto bad_dup_cleanup_mmap;
    }

good_mm:
    mm_count_inc(mm);
c0109518:	83 ec 0c             	sub    $0xc,%esp
c010951b:	ff 75 f4             	pushl  -0xc(%ebp)
c010951e:	e8 b6 f7 ff ff       	call   c0108cd9 <mm_count_inc>
c0109523:	83 c4 10             	add    $0x10,%esp
    proc->mm = mm;
c0109526:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109529:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010952c:	89 50 18             	mov    %edx,0x18(%eax)
    proc->cr3 = PADDR(mm->pgdir);
c010952f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109532:	8b 40 0c             	mov    0xc(%eax),%eax
c0109535:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0109538:	81 7d e8 ff ff ff bf 	cmpl   $0xbfffffff,-0x18(%ebp)
c010953f:	77 17                	ja     c0109558 <copy_mm+0xda>
c0109541:	ff 75 e8             	pushl  -0x18(%ebp)
c0109544:	68 10 da 10 c0       	push   $0xc010da10
c0109549:	68 73 01 00 00       	push   $0x173
c010954e:	68 34 da 10 c0       	push   $0xc010da34
c0109553:	e8 a5 6e ff ff       	call   c01003fd <__panic>
c0109558:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010955b:	8d 90 00 00 00 40    	lea    0x40000000(%eax),%edx
c0109561:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109564:	89 50 40             	mov    %edx,0x40(%eax)
    return 0;
c0109567:	b8 00 00 00 00       	mov    $0x0,%eax
c010956c:	eb 34                	jmp    c01095a2 <copy_mm+0x124>
        ret = dup_mmap(mm, oldmm);
    }
    unlock_mm(oldmm);

    if (ret != 0) {
        goto bad_dup_cleanup_mmap;
c010956e:	90                   	nop
    mm_count_inc(mm);
    proc->mm = mm;
    proc->cr3 = PADDR(mm->pgdir);
    return 0;
bad_dup_cleanup_mmap:
    exit_mmap(mm);
c010956f:	83 ec 0c             	sub    $0xc,%esp
c0109572:	ff 75 f4             	pushl  -0xc(%ebp)
c0109575:	e8 79 a6 ff ff       	call   c0103bf3 <exit_mmap>
c010957a:	83 c4 10             	add    $0x10,%esp
    put_pgdir(mm);
c010957d:	83 ec 0c             	sub    $0xc,%esp
c0109580:	ff 75 f4             	pushl  -0xc(%ebp)
c0109583:	e8 cd fe ff ff       	call   c0109455 <put_pgdir>
c0109588:	83 c4 10             	add    $0x10,%esp
c010958b:	eb 01                	jmp    c010958e <copy_mm+0x110>
    int ret = -E_NO_MEM;
    if ((mm = mm_create()) == NULL) {
        goto bad_mm;
    }
    if (setup_pgdir(mm) != 0) {
        goto bad_pgdir_cleanup_mm;
c010958d:	90                   	nop
    return 0;
bad_dup_cleanup_mmap:
    exit_mmap(mm);
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
c010958e:	83 ec 0c             	sub    $0xc,%esp
c0109591:	ff 75 f4             	pushl  -0xc(%ebp)
c0109594:	e8 cc a3 ff ff       	call   c0103965 <mm_destroy>
c0109599:	83 c4 10             	add    $0x10,%esp
c010959c:	eb 01                	jmp    c010959f <copy_mm+0x121>
        goto good_mm;
    }

    int ret = -E_NO_MEM;
    if ((mm = mm_create()) == NULL) {
        goto bad_mm;
c010959e:	90                   	nop
    exit_mmap(mm);
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
bad_mm:
    return ret;
c010959f:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c01095a2:	c9                   	leave  
c01095a3:	c3                   	ret    

c01095a4 <copy_thread>:

// copy_thread - setup the trapframe on the  process's kernel stack top and
//             - setup the kernel entry point and stack of process
static void
copy_thread(struct proc_struct *proc, uintptr_t esp, struct trapframe *tf) {
c01095a4:	55                   	push   %ebp
c01095a5:	89 e5                	mov    %esp,%ebp
c01095a7:	57                   	push   %edi
c01095a8:	56                   	push   %esi
c01095a9:	53                   	push   %ebx
    proc->tf = (struct trapframe *)(proc->kstack + KSTACKSIZE) - 1;
c01095aa:	8b 45 08             	mov    0x8(%ebp),%eax
c01095ad:	8b 40 0c             	mov    0xc(%eax),%eax
c01095b0:	05 b4 1f 00 00       	add    $0x1fb4,%eax
c01095b5:	89 c2                	mov    %eax,%edx
c01095b7:	8b 45 08             	mov    0x8(%ebp),%eax
c01095ba:	89 50 3c             	mov    %edx,0x3c(%eax)
    *(proc->tf) = *tf;
c01095bd:	8b 45 08             	mov    0x8(%ebp),%eax
c01095c0:	8b 40 3c             	mov    0x3c(%eax),%eax
c01095c3:	8b 55 10             	mov    0x10(%ebp),%edx
c01095c6:	89 d3                	mov    %edx,%ebx
c01095c8:	ba 4c 00 00 00       	mov    $0x4c,%edx
c01095cd:	8b 0b                	mov    (%ebx),%ecx
c01095cf:	89 08                	mov    %ecx,(%eax)
c01095d1:	8b 4c 13 fc          	mov    -0x4(%ebx,%edx,1),%ecx
c01095d5:	89 4c 10 fc          	mov    %ecx,-0x4(%eax,%edx,1)
c01095d9:	8d 78 04             	lea    0x4(%eax),%edi
c01095dc:	83 e7 fc             	and    $0xfffffffc,%edi
c01095df:	29 f8                	sub    %edi,%eax
c01095e1:	29 c3                	sub    %eax,%ebx
c01095e3:	01 c2                	add    %eax,%edx
c01095e5:	83 e2 fc             	and    $0xfffffffc,%edx
c01095e8:	89 d0                	mov    %edx,%eax
c01095ea:	c1 e8 02             	shr    $0x2,%eax
c01095ed:	89 de                	mov    %ebx,%esi
c01095ef:	89 c1                	mov    %eax,%ecx
c01095f1:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
    proc->tf->tf_regs.reg_eax = 0;
c01095f3:	8b 45 08             	mov    0x8(%ebp),%eax
c01095f6:	8b 40 3c             	mov    0x3c(%eax),%eax
c01095f9:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    proc->tf->tf_esp = esp;
c0109600:	8b 45 08             	mov    0x8(%ebp),%eax
c0109603:	8b 40 3c             	mov    0x3c(%eax),%eax
c0109606:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109609:	89 50 44             	mov    %edx,0x44(%eax)
    proc->tf->tf_eflags |= FL_IF;
c010960c:	8b 45 08             	mov    0x8(%ebp),%eax
c010960f:	8b 40 3c             	mov    0x3c(%eax),%eax
c0109612:	8b 55 08             	mov    0x8(%ebp),%edx
c0109615:	8b 52 3c             	mov    0x3c(%edx),%edx
c0109618:	8b 52 40             	mov    0x40(%edx),%edx
c010961b:	80 ce 02             	or     $0x2,%dh
c010961e:	89 50 40             	mov    %edx,0x40(%eax)

    proc->context.eip = (uintptr_t)forkret;
c0109621:	ba b3 91 10 c0       	mov    $0xc01091b3,%edx
c0109626:	8b 45 08             	mov    0x8(%ebp),%eax
c0109629:	89 50 1c             	mov    %edx,0x1c(%eax)
    proc->context.esp = (uintptr_t)(proc->tf);
c010962c:	8b 45 08             	mov    0x8(%ebp),%eax
c010962f:	8b 40 3c             	mov    0x3c(%eax),%eax
c0109632:	89 c2                	mov    %eax,%edx
c0109634:	8b 45 08             	mov    0x8(%ebp),%eax
c0109637:	89 50 20             	mov    %edx,0x20(%eax)
}
c010963a:	90                   	nop
c010963b:	5b                   	pop    %ebx
c010963c:	5e                   	pop    %esi
c010963d:	5f                   	pop    %edi
c010963e:	5d                   	pop    %ebp
c010963f:	c3                   	ret    

c0109640 <do_fork>:
 * @clone_flags: used to guide how to clone the child process
 * @stack:       the parent's user stack pointer. if stack==0, It means to fork a kernel thread.
 * @tf:          the trapframe info, which will be copied to child process's proc->tf
 */
int
do_fork(uint32_t clone_flags, uintptr_t stack, struct trapframe *tf) {
c0109640:	55                   	push   %ebp
c0109641:	89 e5                	mov    %esp,%ebp
c0109643:	83 ec 18             	sub    $0x18,%esp
    int ret = -E_NO_FREE_PROC;
c0109646:	c7 45 f4 fb ff ff ff 	movl   $0xfffffffb,-0xc(%ebp)
    struct proc_struct *proc;
    if (nr_process >= MAX_PROCESS) {
c010964d:	a1 40 30 1b c0       	mov    0xc01b3040,%eax
c0109652:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c0109657:	0f 8f e1 00 00 00    	jg     c010973e <do_fork+0xfe>
        goto fork_out;
    }
    ret = -E_NO_MEM;
c010965d:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    *    -------------------
	*    update step 1: set child proc's parent to current process, make sure current process's wait_state is 0
	*    update step 5: insert proc_struct into hash_list && proc_list, set the relation links of process
    */
    //    1. call alloc_proc to allocate a proc_struct
    proc = alloc_proc();
c0109664:	e8 e6 f6 ff ff       	call   c0108d4f <alloc_proc>
c0109669:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (proc == NULL) {
c010966c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0109670:	0f 84 cb 00 00 00    	je     c0109741 <do_fork+0x101>
        goto fork_out;
    }
    // update
    assert(current->wait_state == 0);
c0109676:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010967b:	8b 40 6c             	mov    0x6c(%eax),%eax
c010967e:	85 c0                	test   %eax,%eax
c0109680:	74 19                	je     c010969b <do_fork+0x5b>
c0109682:	68 48 da 10 c0       	push   $0xc010da48
c0109687:	68 61 da 10 c0       	push   $0xc010da61
c010968c:	68 c0 01 00 00       	push   $0x1c0
c0109691:	68 34 da 10 c0       	push   $0xc010da34
c0109696:	e8 62 6d ff ff       	call   c01003fd <__panic>
    proc->parent = current;
c010969b:	8b 15 28 10 1b c0    	mov    0xc01b1028,%edx
c01096a1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01096a4:	89 50 14             	mov    %edx,0x14(%eax)
    //    2. call setup_kstack to allocate a kernel stack for child process
    if (setup_kstack(proc) != 0) {
c01096a7:	83 ec 0c             	sub    $0xc,%esp
c01096aa:	ff 75 f0             	pushl  -0x10(%ebp)
c01096ad:	e8 a1 fc ff ff       	call   c0109353 <setup_kstack>
c01096b2:	83 c4 10             	add    $0x10,%esp
c01096b5:	85 c0                	test   %eax,%eax
c01096b7:	0f 85 9b 00 00 00    	jne    c0109758 <do_fork+0x118>
        goto bad_fork_cleanup_proc;
    }
    //    3. call copy_mm to dup OR share mm according clone_flag
    if (copy_mm(clone_flags, proc) != 0) {
c01096bd:	83 ec 08             	sub    $0x8,%esp
c01096c0:	ff 75 f0             	pushl  -0x10(%ebp)
c01096c3:	ff 75 08             	pushl  0x8(%ebp)
c01096c6:	e8 b3 fd ff ff       	call   c010947e <copy_mm>
c01096cb:	83 c4 10             	add    $0x10,%esp
c01096ce:	85 c0                	test   %eax,%eax
c01096d0:	75 75                	jne    c0109747 <do_fork+0x107>
        goto bad_fork_cleanup_kstack;
    }
    //    4. call copy_thread to setup tf & context in proc_struct
    copy_thread(proc, stack, tf);   // note: if stack == 0, this is a kernel thread
c01096d2:	83 ec 04             	sub    $0x4,%esp
c01096d5:	ff 75 10             	pushl  0x10(%ebp)
c01096d8:	ff 75 0c             	pushl  0xc(%ebp)
c01096db:	ff 75 f0             	pushl  -0x10(%ebp)
c01096de:	e8 c1 fe ff ff       	call   c01095a4 <copy_thread>
c01096e3:	83 c4 10             	add    $0x10,%esp
    //    5. insert proc_struct into hash_list && proc_list
    // this need disabling interrupt
    bool intr_flag;
    local_intr_save(intr_flag);
c01096e6:	e8 5f f4 ff ff       	call   c0108b4a <__intr_save>
c01096eb:	89 45 ec             	mov    %eax,-0x14(%ebp)
    {
        proc->pid = get_pid();
c01096ee:	e8 4a f9 ff ff       	call   c010903d <get_pid>
c01096f3:	89 c2                	mov    %eax,%edx
c01096f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01096f8:	89 50 04             	mov    %edx,0x4(%eax)
        hash_proc(proc);
c01096fb:	83 ec 0c             	sub    $0xc,%esp
c01096fe:	ff 75 f0             	pushl  -0x10(%ebp)
c0109701:	e8 ca fa ff ff       	call   c01091d0 <hash_proc>
c0109706:	83 c4 10             	add    $0x10,%esp
        // list_add(&proc_list, &(proc->list_link));
        // nr_process++;
        // update
        set_links(proc);
c0109709:	83 ec 0c             	sub    $0xc,%esp
c010970c:	ff 75 f0             	pushl  -0x10(%ebp)
c010970f:	e8 ff f7 ff ff       	call   c0108f13 <set_links>
c0109714:	83 c4 10             	add    $0x10,%esp
    }
    local_intr_restore(intr_flag);
c0109717:	83 ec 0c             	sub    $0xc,%esp
c010971a:	ff 75 ec             	pushl  -0x14(%ebp)
c010971d:	e8 52 f4 ff ff       	call   c0108b74 <__intr_restore>
c0109722:	83 c4 10             	add    $0x10,%esp
    //    6. call wakeup_proc to make the new child process RUNNABLE
    wakeup_proc(proc);
c0109725:	83 ec 0c             	sub    $0xc,%esp
c0109728:	ff 75 f0             	pushl  -0x10(%ebp)
c010972b:	e8 28 10 00 00       	call   c010a758 <wakeup_proc>
c0109730:	83 c4 10             	add    $0x10,%esp
    //    7. set ret vaule using child proc's pid
    ret = proc->pid;
c0109733:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109736:	8b 40 04             	mov    0x4(%eax),%eax
c0109739:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010973c:	eb 04                	jmp    c0109742 <do_fork+0x102>
int
do_fork(uint32_t clone_flags, uintptr_t stack, struct trapframe *tf) {
    int ret = -E_NO_FREE_PROC;
    struct proc_struct *proc;
    if (nr_process >= MAX_PROCESS) {
        goto fork_out;
c010973e:	90                   	nop
c010973f:	eb 01                	jmp    c0109742 <do_fork+0x102>
	*    update step 5: insert proc_struct into hash_list && proc_list, set the relation links of process
    */
    //    1. call alloc_proc to allocate a proc_struct
    proc = alloc_proc();
    if (proc == NULL) {
        goto fork_out;
c0109741:	90                   	nop
    wakeup_proc(proc);
    //    7. set ret vaule using child proc's pid
    ret = proc->pid;
	
fork_out:
    return ret;
c0109742:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109745:	eb 22                	jmp    c0109769 <do_fork+0x129>
    if (setup_kstack(proc) != 0) {
        goto bad_fork_cleanup_proc;
    }
    //    3. call copy_mm to dup OR share mm according clone_flag
    if (copy_mm(clone_flags, proc) != 0) {
        goto bad_fork_cleanup_kstack;
c0109747:	90                   	nop
	
fork_out:
    return ret;

bad_fork_cleanup_kstack:
    put_kstack(proc);
c0109748:	83 ec 0c             	sub    $0xc,%esp
c010974b:	ff 75 f0             	pushl  -0x10(%ebp)
c010974e:	e8 40 fc ff ff       	call   c0109393 <put_kstack>
c0109753:	83 c4 10             	add    $0x10,%esp
c0109756:	eb 01                	jmp    c0109759 <do_fork+0x119>
    // update
    assert(current->wait_state == 0);
    proc->parent = current;
    //    2. call setup_kstack to allocate a kernel stack for child process
    if (setup_kstack(proc) != 0) {
        goto bad_fork_cleanup_proc;
c0109758:	90                   	nop
    return ret;

bad_fork_cleanup_kstack:
    put_kstack(proc);
bad_fork_cleanup_proc:
    kfree(proc);
c0109759:	83 ec 0c             	sub    $0xc,%esp
c010975c:	ff 75 f0             	pushl  -0x10(%ebp)
c010975f:	e8 15 ba ff ff       	call   c0105179 <kfree>
c0109764:	83 c4 10             	add    $0x10,%esp
    goto fork_out;
c0109767:	eb d9                	jmp    c0109742 <do_fork+0x102>
}
c0109769:	c9                   	leave  
c010976a:	c3                   	ret    

c010976b <do_exit>:
// do_exit - called by sys_exit
//   1. call exit_mmap & put_pgdir & mm_destroy to free the almost all memory space of process
//   2. set process' state as PROC_ZOMBIE, then call wakeup_proc(parent) to ask parent reclaim itself.
//   3. call scheduler to switch to other process
int
do_exit(int error_code) {
c010976b:	55                   	push   %ebp
c010976c:	89 e5                	mov    %esp,%ebp
c010976e:	83 ec 18             	sub    $0x18,%esp
    if (current == idleproc) {
c0109771:	8b 15 28 10 1b c0    	mov    0xc01b1028,%edx
c0109777:	a1 20 10 1b c0       	mov    0xc01b1020,%eax
c010977c:	39 c2                	cmp    %eax,%edx
c010977e:	75 17                	jne    c0109797 <do_exit+0x2c>
        panic("idleproc exit.\n");
c0109780:	83 ec 04             	sub    $0x4,%esp
c0109783:	68 76 da 10 c0       	push   $0xc010da76
c0109788:	68 ef 01 00 00       	push   $0x1ef
c010978d:	68 34 da 10 c0       	push   $0xc010da34
c0109792:	e8 66 6c ff ff       	call   c01003fd <__panic>
    }
    if (current == initproc) {
c0109797:	8b 15 28 10 1b c0    	mov    0xc01b1028,%edx
c010979d:	a1 24 10 1b c0       	mov    0xc01b1024,%eax
c01097a2:	39 c2                	cmp    %eax,%edx
c01097a4:	75 17                	jne    c01097bd <do_exit+0x52>
        panic("initproc exit.\n");
c01097a6:	83 ec 04             	sub    $0x4,%esp
c01097a9:	68 86 da 10 c0       	push   $0xc010da86
c01097ae:	68 f2 01 00 00       	push   $0x1f2
c01097b3:	68 34 da 10 c0       	push   $0xc010da34
c01097b8:	e8 40 6c ff ff       	call   c01003fd <__panic>
    }
    
    struct mm_struct *mm = current->mm;
c01097bd:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c01097c2:	8b 40 18             	mov    0x18(%eax),%eax
c01097c5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (mm != NULL) {
c01097c8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01097cc:	74 56                	je     c0109824 <do_exit+0xb9>
        lcr3(boot_cr3);
c01097ce:	a1 b4 31 1b c0       	mov    0xc01b31b4,%eax
c01097d3:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01097d6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01097d9:	0f 22 d8             	mov    %eax,%cr3
        if (mm_count_dec(mm) == 0) {
c01097dc:	83 ec 0c             	sub    $0xc,%esp
c01097df:	ff 75 f4             	pushl  -0xc(%ebp)
c01097e2:	e8 0c f5 ff ff       	call   c0108cf3 <mm_count_dec>
c01097e7:	83 c4 10             	add    $0x10,%esp
c01097ea:	85 c0                	test   %eax,%eax
c01097ec:	75 2a                	jne    c0109818 <do_exit+0xad>
            exit_mmap(mm);
c01097ee:	83 ec 0c             	sub    $0xc,%esp
c01097f1:	ff 75 f4             	pushl  -0xc(%ebp)
c01097f4:	e8 fa a3 ff ff       	call   c0103bf3 <exit_mmap>
c01097f9:	83 c4 10             	add    $0x10,%esp
            put_pgdir(mm);
c01097fc:	83 ec 0c             	sub    $0xc,%esp
c01097ff:	ff 75 f4             	pushl  -0xc(%ebp)
c0109802:	e8 4e fc ff ff       	call   c0109455 <put_pgdir>
c0109807:	83 c4 10             	add    $0x10,%esp
            mm_destroy(mm);
c010980a:	83 ec 0c             	sub    $0xc,%esp
c010980d:	ff 75 f4             	pushl  -0xc(%ebp)
c0109810:	e8 50 a1 ff ff       	call   c0103965 <mm_destroy>
c0109815:	83 c4 10             	add    $0x10,%esp
        }
        current->mm = NULL;
c0109818:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010981d:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    current->state = PROC_ZOMBIE;
c0109824:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c0109829:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
    current->exit_code = error_code;
c010982f:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c0109834:	8b 55 08             	mov    0x8(%ebp),%edx
c0109837:	89 50 68             	mov    %edx,0x68(%eax)
    
    bool intr_flag;
    struct proc_struct *proc;
    local_intr_save(intr_flag);
c010983a:	e8 0b f3 ff ff       	call   c0108b4a <__intr_save>
c010983f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        proc = current->parent;
c0109842:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c0109847:	8b 40 14             	mov    0x14(%eax),%eax
c010984a:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (proc->wait_state == WT_CHILD) {
c010984d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109850:	8b 40 6c             	mov    0x6c(%eax),%eax
c0109853:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c0109858:	0f 85 9d 00 00 00    	jne    c01098fb <do_exit+0x190>
            wakeup_proc(proc);
c010985e:	83 ec 0c             	sub    $0xc,%esp
c0109861:	ff 75 ec             	pushl  -0x14(%ebp)
c0109864:	e8 ef 0e 00 00       	call   c010a758 <wakeup_proc>
c0109869:	83 c4 10             	add    $0x10,%esp
        }
        while (current->cptr != NULL) {
c010986c:	e9 8a 00 00 00       	jmp    c01098fb <do_exit+0x190>
            proc = current->cptr;
c0109871:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c0109876:	8b 40 70             	mov    0x70(%eax),%eax
c0109879:	89 45 ec             	mov    %eax,-0x14(%ebp)
            current->cptr = proc->optr;
c010987c:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c0109881:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0109884:	8b 52 78             	mov    0x78(%edx),%edx
c0109887:	89 50 70             	mov    %edx,0x70(%eax)
    
            proc->yptr = NULL;
c010988a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010988d:	c7 40 74 00 00 00 00 	movl   $0x0,0x74(%eax)
            if ((proc->optr = initproc->cptr) != NULL) {
c0109894:	a1 24 10 1b c0       	mov    0xc01b1024,%eax
c0109899:	8b 50 70             	mov    0x70(%eax),%edx
c010989c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010989f:	89 50 78             	mov    %edx,0x78(%eax)
c01098a2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01098a5:	8b 40 78             	mov    0x78(%eax),%eax
c01098a8:	85 c0                	test   %eax,%eax
c01098aa:	74 0e                	je     c01098ba <do_exit+0x14f>
                initproc->cptr->yptr = proc;
c01098ac:	a1 24 10 1b c0       	mov    0xc01b1024,%eax
c01098b1:	8b 40 70             	mov    0x70(%eax),%eax
c01098b4:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01098b7:	89 50 74             	mov    %edx,0x74(%eax)
            }
            proc->parent = initproc;
c01098ba:	8b 15 24 10 1b c0    	mov    0xc01b1024,%edx
c01098c0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01098c3:	89 50 14             	mov    %edx,0x14(%eax)
            initproc->cptr = proc;
c01098c6:	a1 24 10 1b c0       	mov    0xc01b1024,%eax
c01098cb:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01098ce:	89 50 70             	mov    %edx,0x70(%eax)
            if (proc->state == PROC_ZOMBIE) {
c01098d1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01098d4:	8b 00                	mov    (%eax),%eax
c01098d6:	83 f8 03             	cmp    $0x3,%eax
c01098d9:	75 20                	jne    c01098fb <do_exit+0x190>
                if (initproc->wait_state == WT_CHILD) {
c01098db:	a1 24 10 1b c0       	mov    0xc01b1024,%eax
c01098e0:	8b 40 6c             	mov    0x6c(%eax),%eax
c01098e3:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c01098e8:	75 11                	jne    c01098fb <do_exit+0x190>
                    wakeup_proc(initproc);
c01098ea:	a1 24 10 1b c0       	mov    0xc01b1024,%eax
c01098ef:	83 ec 0c             	sub    $0xc,%esp
c01098f2:	50                   	push   %eax
c01098f3:	e8 60 0e 00 00       	call   c010a758 <wakeup_proc>
c01098f8:	83 c4 10             	add    $0x10,%esp
    {
        proc = current->parent;
        if (proc->wait_state == WT_CHILD) {
            wakeup_proc(proc);
        }
        while (current->cptr != NULL) {
c01098fb:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c0109900:	8b 40 70             	mov    0x70(%eax),%eax
c0109903:	85 c0                	test   %eax,%eax
c0109905:	0f 85 66 ff ff ff    	jne    c0109871 <do_exit+0x106>
                    wakeup_proc(initproc);
                }
            }
        }
    }
    local_intr_restore(intr_flag);
c010990b:	83 ec 0c             	sub    $0xc,%esp
c010990e:	ff 75 f0             	pushl  -0x10(%ebp)
c0109911:	e8 5e f2 ff ff       	call   c0108b74 <__intr_restore>
c0109916:	83 c4 10             	add    $0x10,%esp
    
    schedule();
c0109919:	e8 c7 0e 00 00       	call   c010a7e5 <schedule>
    panic("do_exit will not return!! %d.\n", current->pid);
c010991e:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c0109923:	8b 40 04             	mov    0x4(%eax),%eax
c0109926:	50                   	push   %eax
c0109927:	68 98 da 10 c0       	push   $0xc010da98
c010992c:	68 1e 02 00 00       	push   $0x21e
c0109931:	68 34 da 10 c0       	push   $0xc010da34
c0109936:	e8 c2 6a ff ff       	call   c01003fd <__panic>

c010993b <load_icode>:
/* load_icode - load the content of binary program(ELF format) as the new content of current process
 * @binary:  the memory addr of the content of binary program
 * @size:  the size of the content of binary program
 */
static int
load_icode(unsigned char *binary, size_t size) {
c010993b:	55                   	push   %ebp
c010993c:	89 e5                	mov    %esp,%ebp
c010993e:	83 ec 58             	sub    $0x58,%esp
    if (current->mm != NULL) {
c0109941:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c0109946:	8b 40 18             	mov    0x18(%eax),%eax
c0109949:	85 c0                	test   %eax,%eax
c010994b:	74 17                	je     c0109964 <load_icode+0x29>
        panic("load_icode: current->mm must be empty.\n");
c010994d:	83 ec 04             	sub    $0x4,%esp
c0109950:	68 b8 da 10 c0       	push   $0xc010dab8
c0109955:	68 28 02 00 00       	push   $0x228
c010995a:	68 34 da 10 c0       	push   $0xc010da34
c010995f:	e8 99 6a ff ff       	call   c01003fd <__panic>
    }

    int ret = -E_NO_MEM;
c0109964:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    struct mm_struct *mm;
    //(1) create a new mm for current process
    if ((mm = mm_create()) == NULL) {
c010996b:	e8 cb 9c ff ff       	call   c010363b <mm_create>
c0109970:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0109973:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c0109977:	0f 84 8d 05 00 00    	je     c0109f0a <load_icode+0x5cf>
        goto bad_mm;
    }
    //(2) create a new PDT, and mm->pgdir= kernel virtual addr of PDT
    if (setup_pgdir(mm) != 0) {
c010997d:	83 ec 0c             	sub    $0xc,%esp
c0109980:	ff 75 d0             	pushl  -0x30(%ebp)
c0109983:	e8 34 fa ff ff       	call   c01093bc <setup_pgdir>
c0109988:	83 c4 10             	add    $0x10,%esp
c010998b:	85 c0                	test   %eax,%eax
c010998d:	0f 85 66 05 00 00    	jne    c0109ef9 <load_icode+0x5be>
        goto bad_pgdir_cleanup_mm;
    }
    //(3) copy TEXT/DATA section, build BSS parts in binary to memory space of process
    struct Page *page;
    //(3.1) get the file header of the bianry program (ELF format)
    struct elfhdr *elf = (struct elfhdr *)binary;
c0109993:	8b 45 08             	mov    0x8(%ebp),%eax
c0109996:	89 45 cc             	mov    %eax,-0x34(%ebp)
    //(3.2) get the entry of the program section headers of the bianry program (ELF format)
    struct proghdr *ph = (struct proghdr *)(binary + elf->e_phoff);
c0109999:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010999c:	8b 50 1c             	mov    0x1c(%eax),%edx
c010999f:	8b 45 08             	mov    0x8(%ebp),%eax
c01099a2:	01 d0                	add    %edx,%eax
c01099a4:	89 45 ec             	mov    %eax,-0x14(%ebp)
    //(3.3) This program is valid?
    if (elf->e_magic != ELF_MAGIC) {
c01099a7:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01099aa:	8b 00                	mov    (%eax),%eax
c01099ac:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
c01099b1:	74 0c                	je     c01099bf <load_icode+0x84>
        ret = -E_INVAL_ELF;
c01099b3:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
        goto bad_elf_cleanup_pgdir;
c01099ba:	e9 2a 05 00 00       	jmp    c0109ee9 <load_icode+0x5ae>
    }

    uint32_t vm_flags, perm;
    struct proghdr *ph_end = ph + elf->e_phnum;
c01099bf:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01099c2:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c01099c6:	0f b7 c0             	movzwl %ax,%eax
c01099c9:	c1 e0 05             	shl    $0x5,%eax
c01099cc:	89 c2                	mov    %eax,%edx
c01099ce:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01099d1:	01 d0                	add    %edx,%eax
c01099d3:	89 45 c8             	mov    %eax,-0x38(%ebp)
    for (; ph < ph_end; ph ++) {
c01099d6:	e9 e0 02 00 00       	jmp    c0109cbb <load_icode+0x380>
    //(3.4) find every program section headers
        if (ph->p_type != ELF_PT_LOAD) {
c01099db:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01099de:	8b 00                	mov    (%eax),%eax
c01099e0:	83 f8 01             	cmp    $0x1,%eax
c01099e3:	0f 85 c7 02 00 00    	jne    c0109cb0 <load_icode+0x375>
            continue ;
        }
        if (ph->p_filesz > ph->p_memsz) {
c01099e9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01099ec:	8b 50 10             	mov    0x10(%eax),%edx
c01099ef:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01099f2:	8b 40 14             	mov    0x14(%eax),%eax
c01099f5:	39 c2                	cmp    %eax,%edx
c01099f7:	76 0c                	jbe    c0109a05 <load_icode+0xca>
            ret = -E_INVAL_ELF;
c01099f9:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
            goto bad_cleanup_mmap;
c0109a00:	e9 d6 04 00 00       	jmp    c0109edb <load_icode+0x5a0>
        }
        if (ph->p_filesz == 0) {
c0109a05:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109a08:	8b 40 10             	mov    0x10(%eax),%eax
c0109a0b:	85 c0                	test   %eax,%eax
c0109a0d:	0f 84 a0 02 00 00    	je     c0109cb3 <load_icode+0x378>
            continue ;
        }
    //(3.5) call mm_map fun to setup the new vma ( ph->p_va, ph->p_memsz)
        vm_flags = 0, perm = PTE_U;
c0109a13:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c0109a1a:	c7 45 e4 04 00 00 00 	movl   $0x4,-0x1c(%ebp)
        if (ph->p_flags & ELF_PF_X) vm_flags |= VM_EXEC;
c0109a21:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109a24:	8b 40 18             	mov    0x18(%eax),%eax
c0109a27:	83 e0 01             	and    $0x1,%eax
c0109a2a:	85 c0                	test   %eax,%eax
c0109a2c:	74 04                	je     c0109a32 <load_icode+0xf7>
c0109a2e:	83 4d e8 04          	orl    $0x4,-0x18(%ebp)
        if (ph->p_flags & ELF_PF_W) vm_flags |= VM_WRITE;
c0109a32:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109a35:	8b 40 18             	mov    0x18(%eax),%eax
c0109a38:	83 e0 02             	and    $0x2,%eax
c0109a3b:	85 c0                	test   %eax,%eax
c0109a3d:	74 04                	je     c0109a43 <load_icode+0x108>
c0109a3f:	83 4d e8 02          	orl    $0x2,-0x18(%ebp)
        if (ph->p_flags & ELF_PF_R) vm_flags |= VM_READ;
c0109a43:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109a46:	8b 40 18             	mov    0x18(%eax),%eax
c0109a49:	83 e0 04             	and    $0x4,%eax
c0109a4c:	85 c0                	test   %eax,%eax
c0109a4e:	74 04                	je     c0109a54 <load_icode+0x119>
c0109a50:	83 4d e8 01          	orl    $0x1,-0x18(%ebp)
        if (vm_flags & VM_WRITE) perm |= PTE_W;
c0109a54:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109a57:	83 e0 02             	and    $0x2,%eax
c0109a5a:	85 c0                	test   %eax,%eax
c0109a5c:	74 04                	je     c0109a62 <load_icode+0x127>
c0109a5e:	83 4d e4 02          	orl    $0x2,-0x1c(%ebp)
        if ((ret = mm_map(mm, ph->p_va, ph->p_memsz, vm_flags, NULL)) != 0) {
c0109a62:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109a65:	8b 50 14             	mov    0x14(%eax),%edx
c0109a68:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109a6b:	8b 40 08             	mov    0x8(%eax),%eax
c0109a6e:	83 ec 0c             	sub    $0xc,%esp
c0109a71:	6a 00                	push   $0x0
c0109a73:	ff 75 e8             	pushl  -0x18(%ebp)
c0109a76:	52                   	push   %edx
c0109a77:	50                   	push   %eax
c0109a78:	ff 75 d0             	pushl  -0x30(%ebp)
c0109a7b:	e8 84 9f ff ff       	call   c0103a04 <mm_map>
c0109a80:	83 c4 20             	add    $0x20,%esp
c0109a83:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109a86:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109a8a:	0f 85 41 04 00 00    	jne    c0109ed1 <load_icode+0x596>
            goto bad_cleanup_mmap;
        }
        unsigned char *from = binary + ph->p_offset;
c0109a90:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109a93:	8b 50 04             	mov    0x4(%eax),%edx
c0109a96:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a99:	01 d0                	add    %edx,%eax
c0109a9b:	89 45 e0             	mov    %eax,-0x20(%ebp)
        size_t off, size;
        uintptr_t start = ph->p_va, end, la = ROUNDDOWN(start, PGSIZE);
c0109a9e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109aa1:	8b 40 08             	mov    0x8(%eax),%eax
c0109aa4:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0109aa7:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0109aaa:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c0109aad:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0109ab0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0109ab5:	89 45 d4             	mov    %eax,-0x2c(%ebp)

        ret = -E_NO_MEM;
c0109ab8:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
        end = ph->p_va + ph->p_filesz;
c0109abf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109ac2:	8b 50 08             	mov    0x8(%eax),%edx
c0109ac5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109ac8:	8b 40 10             	mov    0x10(%eax),%eax
c0109acb:	01 d0                	add    %edx,%eax
c0109acd:	89 45 c0             	mov    %eax,-0x40(%ebp)
     //(3.6.1) copy TEXT/DATA section of bianry program
        while (start < end) {
c0109ad0:	e9 84 00 00 00       	jmp    c0109b59 <load_icode+0x21e>
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
c0109ad5:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0109ad8:	8b 40 0c             	mov    0xc(%eax),%eax
c0109adb:	83 ec 04             	sub    $0x4,%esp
c0109ade:	ff 75 e4             	pushl  -0x1c(%ebp)
c0109ae1:	ff 75 d4             	pushl  -0x2c(%ebp)
c0109ae4:	50                   	push   %eax
c0109ae5:	e8 f7 e2 ff ff       	call   c0107de1 <pgdir_alloc_page>
c0109aea:	83 c4 10             	add    $0x10,%esp
c0109aed:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109af0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0109af4:	0f 84 da 03 00 00    	je     c0109ed4 <load_icode+0x599>
                goto bad_cleanup_mmap;
            }
            off = start - la, size = PGSIZE - off, la += PGSIZE;
c0109afa:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0109afd:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c0109b00:	89 45 bc             	mov    %eax,-0x44(%ebp)
c0109b03:	b8 00 10 00 00       	mov    $0x1000,%eax
c0109b08:	2b 45 bc             	sub    -0x44(%ebp),%eax
c0109b0b:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0109b0e:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
            if (end < la) {
c0109b15:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0109b18:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0109b1b:	73 09                	jae    c0109b26 <load_icode+0x1eb>
                size -= la - end;
c0109b1d:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0109b20:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c0109b23:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memcpy(page2kva(page) + off, from, size);
c0109b26:	83 ec 0c             	sub    $0xc,%esp
c0109b29:	ff 75 f0             	pushl  -0x10(%ebp)
c0109b2c:	e8 24 f1 ff ff       	call   c0108c55 <page2kva>
c0109b31:	83 c4 10             	add    $0x10,%esp
c0109b34:	89 c2                	mov    %eax,%edx
c0109b36:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0109b39:	01 d0                	add    %edx,%eax
c0109b3b:	83 ec 04             	sub    $0x4,%esp
c0109b3e:	ff 75 dc             	pushl  -0x24(%ebp)
c0109b41:	ff 75 e0             	pushl  -0x20(%ebp)
c0109b44:	50                   	push   %eax
c0109b45:	e8 96 16 00 00       	call   c010b1e0 <memcpy>
c0109b4a:	83 c4 10             	add    $0x10,%esp
            start += size, from += size;
c0109b4d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0109b50:	01 45 d8             	add    %eax,-0x28(%ebp)
c0109b53:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0109b56:	01 45 e0             	add    %eax,-0x20(%ebp)
        ret = -E_NO_MEM;

     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
        end = ph->p_va + ph->p_filesz;
     //(3.6.1) copy TEXT/DATA section of bianry program
        while (start < end) {
c0109b59:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0109b5c:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c0109b5f:	0f 82 70 ff ff ff    	jb     c0109ad5 <load_icode+0x19a>
            memcpy(page2kva(page) + off, from, size);
            start += size, from += size;
        }

      //(3.6.2) build BSS section of binary program
        end = ph->p_va + ph->p_memsz;
c0109b65:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109b68:	8b 50 08             	mov    0x8(%eax),%edx
c0109b6b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109b6e:	8b 40 14             	mov    0x14(%eax),%eax
c0109b71:	01 d0                	add    %edx,%eax
c0109b73:	89 45 c0             	mov    %eax,-0x40(%ebp)
        if (start < la) {
c0109b76:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0109b79:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0109b7c:	0f 83 20 01 00 00    	jae    c0109ca2 <load_icode+0x367>
            /* ph->p_memsz == ph->p_filesz */
            if (start == end) {
c0109b82:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0109b85:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c0109b88:	0f 84 28 01 00 00    	je     c0109cb6 <load_icode+0x37b>
                continue ;
            }
            off = start + PGSIZE - la, size = PGSIZE - off;
c0109b8e:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0109b91:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c0109b94:	05 00 10 00 00       	add    $0x1000,%eax
c0109b99:	89 45 bc             	mov    %eax,-0x44(%ebp)
c0109b9c:	b8 00 10 00 00       	mov    $0x1000,%eax
c0109ba1:	2b 45 bc             	sub    -0x44(%ebp),%eax
c0109ba4:	89 45 dc             	mov    %eax,-0x24(%ebp)
            if (end < la) {
c0109ba7:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0109baa:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0109bad:	73 09                	jae    c0109bb8 <load_icode+0x27d>
                size -= la - end;
c0109baf:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0109bb2:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c0109bb5:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
c0109bb8:	83 ec 0c             	sub    $0xc,%esp
c0109bbb:	ff 75 f0             	pushl  -0x10(%ebp)
c0109bbe:	e8 92 f0 ff ff       	call   c0108c55 <page2kva>
c0109bc3:	83 c4 10             	add    $0x10,%esp
c0109bc6:	89 c2                	mov    %eax,%edx
c0109bc8:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0109bcb:	01 d0                	add    %edx,%eax
c0109bcd:	83 ec 04             	sub    $0x4,%esp
c0109bd0:	ff 75 dc             	pushl  -0x24(%ebp)
c0109bd3:	6a 00                	push   $0x0
c0109bd5:	50                   	push   %eax
c0109bd6:	e8 22 15 00 00       	call   c010b0fd <memset>
c0109bdb:	83 c4 10             	add    $0x10,%esp
            start += size;
c0109bde:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0109be1:	01 45 d8             	add    %eax,-0x28(%ebp)
            assert((end < la && start == end) || (end >= la && start == la));
c0109be4:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0109be7:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0109bea:	73 0c                	jae    c0109bf8 <load_icode+0x2bd>
c0109bec:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0109bef:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c0109bf2:	0f 84 aa 00 00 00    	je     c0109ca2 <load_icode+0x367>
c0109bf8:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0109bfb:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0109bfe:	72 0c                	jb     c0109c0c <load_icode+0x2d1>
c0109c00:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0109c03:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0109c06:	0f 84 96 00 00 00    	je     c0109ca2 <load_icode+0x367>
c0109c0c:	68 e0 da 10 c0       	push   $0xc010dae0
c0109c11:	68 61 da 10 c0       	push   $0xc010da61
c0109c16:	68 7a 02 00 00       	push   $0x27a
c0109c1b:	68 34 da 10 c0       	push   $0xc010da34
c0109c20:	e8 d8 67 ff ff       	call   c01003fd <__panic>
        }
        while (start < end) {
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
c0109c25:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0109c28:	8b 40 0c             	mov    0xc(%eax),%eax
c0109c2b:	83 ec 04             	sub    $0x4,%esp
c0109c2e:	ff 75 e4             	pushl  -0x1c(%ebp)
c0109c31:	ff 75 d4             	pushl  -0x2c(%ebp)
c0109c34:	50                   	push   %eax
c0109c35:	e8 a7 e1 ff ff       	call   c0107de1 <pgdir_alloc_page>
c0109c3a:	83 c4 10             	add    $0x10,%esp
c0109c3d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109c40:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0109c44:	0f 84 8d 02 00 00    	je     c0109ed7 <load_icode+0x59c>
                goto bad_cleanup_mmap;
            }
            off = start - la, size = PGSIZE - off, la += PGSIZE;
c0109c4a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0109c4d:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c0109c50:	89 45 bc             	mov    %eax,-0x44(%ebp)
c0109c53:	b8 00 10 00 00       	mov    $0x1000,%eax
c0109c58:	2b 45 bc             	sub    -0x44(%ebp),%eax
c0109c5b:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0109c5e:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
            if (end < la) {
c0109c65:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0109c68:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0109c6b:	73 09                	jae    c0109c76 <load_icode+0x33b>
                size -= la - end;
c0109c6d:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0109c70:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c0109c73:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
c0109c76:	83 ec 0c             	sub    $0xc,%esp
c0109c79:	ff 75 f0             	pushl  -0x10(%ebp)
c0109c7c:	e8 d4 ef ff ff       	call   c0108c55 <page2kva>
c0109c81:	83 c4 10             	add    $0x10,%esp
c0109c84:	89 c2                	mov    %eax,%edx
c0109c86:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0109c89:	01 d0                	add    %edx,%eax
c0109c8b:	83 ec 04             	sub    $0x4,%esp
c0109c8e:	ff 75 dc             	pushl  -0x24(%ebp)
c0109c91:	6a 00                	push   $0x0
c0109c93:	50                   	push   %eax
c0109c94:	e8 64 14 00 00       	call   c010b0fd <memset>
c0109c99:	83 c4 10             	add    $0x10,%esp
            start += size;
c0109c9c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0109c9f:	01 45 d8             	add    %eax,-0x28(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
            start += size;
            assert((end < la && start == end) || (end >= la && start == la));
        }
        while (start < end) {
c0109ca2:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0109ca5:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c0109ca8:	0f 82 77 ff ff ff    	jb     c0109c25 <load_icode+0x2ea>
c0109cae:	eb 07                	jmp    c0109cb7 <load_icode+0x37c>
    uint32_t vm_flags, perm;
    struct proghdr *ph_end = ph + elf->e_phnum;
    for (; ph < ph_end; ph ++) {
    //(3.4) find every program section headers
        if (ph->p_type != ELF_PT_LOAD) {
            continue ;
c0109cb0:	90                   	nop
c0109cb1:	eb 04                	jmp    c0109cb7 <load_icode+0x37c>
        if (ph->p_filesz > ph->p_memsz) {
            ret = -E_INVAL_ELF;
            goto bad_cleanup_mmap;
        }
        if (ph->p_filesz == 0) {
            continue ;
c0109cb3:	90                   	nop
c0109cb4:	eb 01                	jmp    c0109cb7 <load_icode+0x37c>
      //(3.6.2) build BSS section of binary program
        end = ph->p_va + ph->p_memsz;
        if (start < la) {
            /* ph->p_memsz == ph->p_filesz */
            if (start == end) {
                continue ;
c0109cb6:	90                   	nop
        goto bad_elf_cleanup_pgdir;
    }

    uint32_t vm_flags, perm;
    struct proghdr *ph_end = ph + elf->e_phnum;
    for (; ph < ph_end; ph ++) {
c0109cb7:	83 45 ec 20          	addl   $0x20,-0x14(%ebp)
c0109cbb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109cbe:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c0109cc1:	0f 82 14 fd ff ff    	jb     c01099db <load_icode+0xa0>
            memset(page2kva(page) + off, 0, size);
            start += size;
        }
    }
    //(4) build user stack memory
    vm_flags = VM_READ | VM_WRITE | VM_STACK;
c0109cc7:	c7 45 e8 0b 00 00 00 	movl   $0xb,-0x18(%ebp)
    if ((ret = mm_map(mm, USTACKTOP - USTACKSIZE, USTACKSIZE, vm_flags, NULL)) != 0) {
c0109cce:	83 ec 0c             	sub    $0xc,%esp
c0109cd1:	6a 00                	push   $0x0
c0109cd3:	ff 75 e8             	pushl  -0x18(%ebp)
c0109cd6:	68 00 00 10 00       	push   $0x100000
c0109cdb:	68 00 00 f0 af       	push   $0xaff00000
c0109ce0:	ff 75 d0             	pushl  -0x30(%ebp)
c0109ce3:	e8 1c 9d ff ff       	call   c0103a04 <mm_map>
c0109ce8:	83 c4 20             	add    $0x20,%esp
c0109ceb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109cee:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109cf2:	0f 85 e2 01 00 00    	jne    c0109eda <load_icode+0x59f>
        goto bad_cleanup_mmap;
    }
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-PGSIZE , PTE_USER) != NULL);
c0109cf8:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0109cfb:	8b 40 0c             	mov    0xc(%eax),%eax
c0109cfe:	83 ec 04             	sub    $0x4,%esp
c0109d01:	6a 07                	push   $0x7
c0109d03:	68 00 f0 ff af       	push   $0xaffff000
c0109d08:	50                   	push   %eax
c0109d09:	e8 d3 e0 ff ff       	call   c0107de1 <pgdir_alloc_page>
c0109d0e:	83 c4 10             	add    $0x10,%esp
c0109d11:	85 c0                	test   %eax,%eax
c0109d13:	75 19                	jne    c0109d2e <load_icode+0x3f3>
c0109d15:	68 1c db 10 c0       	push   $0xc010db1c
c0109d1a:	68 61 da 10 c0       	push   $0xc010da61
c0109d1f:	68 8d 02 00 00       	push   $0x28d
c0109d24:	68 34 da 10 c0       	push   $0xc010da34
c0109d29:	e8 cf 66 ff ff       	call   c01003fd <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-2*PGSIZE , PTE_USER) != NULL);
c0109d2e:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0109d31:	8b 40 0c             	mov    0xc(%eax),%eax
c0109d34:	83 ec 04             	sub    $0x4,%esp
c0109d37:	6a 07                	push   $0x7
c0109d39:	68 00 e0 ff af       	push   $0xafffe000
c0109d3e:	50                   	push   %eax
c0109d3f:	e8 9d e0 ff ff       	call   c0107de1 <pgdir_alloc_page>
c0109d44:	83 c4 10             	add    $0x10,%esp
c0109d47:	85 c0                	test   %eax,%eax
c0109d49:	75 19                	jne    c0109d64 <load_icode+0x429>
c0109d4b:	68 60 db 10 c0       	push   $0xc010db60
c0109d50:	68 61 da 10 c0       	push   $0xc010da61
c0109d55:	68 8e 02 00 00       	push   $0x28e
c0109d5a:	68 34 da 10 c0       	push   $0xc010da34
c0109d5f:	e8 99 66 ff ff       	call   c01003fd <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-3*PGSIZE , PTE_USER) != NULL);
c0109d64:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0109d67:	8b 40 0c             	mov    0xc(%eax),%eax
c0109d6a:	83 ec 04             	sub    $0x4,%esp
c0109d6d:	6a 07                	push   $0x7
c0109d6f:	68 00 d0 ff af       	push   $0xafffd000
c0109d74:	50                   	push   %eax
c0109d75:	e8 67 e0 ff ff       	call   c0107de1 <pgdir_alloc_page>
c0109d7a:	83 c4 10             	add    $0x10,%esp
c0109d7d:	85 c0                	test   %eax,%eax
c0109d7f:	75 19                	jne    c0109d9a <load_icode+0x45f>
c0109d81:	68 a4 db 10 c0       	push   $0xc010dba4
c0109d86:	68 61 da 10 c0       	push   $0xc010da61
c0109d8b:	68 8f 02 00 00       	push   $0x28f
c0109d90:	68 34 da 10 c0       	push   $0xc010da34
c0109d95:	e8 63 66 ff ff       	call   c01003fd <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-4*PGSIZE , PTE_USER) != NULL);
c0109d9a:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0109d9d:	8b 40 0c             	mov    0xc(%eax),%eax
c0109da0:	83 ec 04             	sub    $0x4,%esp
c0109da3:	6a 07                	push   $0x7
c0109da5:	68 00 c0 ff af       	push   $0xafffc000
c0109daa:	50                   	push   %eax
c0109dab:	e8 31 e0 ff ff       	call   c0107de1 <pgdir_alloc_page>
c0109db0:	83 c4 10             	add    $0x10,%esp
c0109db3:	85 c0                	test   %eax,%eax
c0109db5:	75 19                	jne    c0109dd0 <load_icode+0x495>
c0109db7:	68 e8 db 10 c0       	push   $0xc010dbe8
c0109dbc:	68 61 da 10 c0       	push   $0xc010da61
c0109dc1:	68 90 02 00 00       	push   $0x290
c0109dc6:	68 34 da 10 c0       	push   $0xc010da34
c0109dcb:	e8 2d 66 ff ff       	call   c01003fd <__panic>
    
    //(5) set current process's mm, sr3, and set CR3 reg = physical addr of Page Directory
    mm_count_inc(mm);
c0109dd0:	83 ec 0c             	sub    $0xc,%esp
c0109dd3:	ff 75 d0             	pushl  -0x30(%ebp)
c0109dd6:	e8 fe ee ff ff       	call   c0108cd9 <mm_count_inc>
c0109ddb:	83 c4 10             	add    $0x10,%esp
    current->mm = mm;
c0109dde:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c0109de3:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0109de6:	89 50 18             	mov    %edx,0x18(%eax)
    current->cr3 = PADDR(mm->pgdir);
c0109de9:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c0109dee:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0109df1:	8b 52 0c             	mov    0xc(%edx),%edx
c0109df4:	89 55 b8             	mov    %edx,-0x48(%ebp)
c0109df7:	81 7d b8 ff ff ff bf 	cmpl   $0xbfffffff,-0x48(%ebp)
c0109dfe:	77 17                	ja     c0109e17 <load_icode+0x4dc>
c0109e00:	ff 75 b8             	pushl  -0x48(%ebp)
c0109e03:	68 10 da 10 c0       	push   $0xc010da10
c0109e08:	68 95 02 00 00       	push   $0x295
c0109e0d:	68 34 da 10 c0       	push   $0xc010da34
c0109e12:	e8 e6 65 ff ff       	call   c01003fd <__panic>
c0109e17:	8b 55 b8             	mov    -0x48(%ebp),%edx
c0109e1a:	81 c2 00 00 00 40    	add    $0x40000000,%edx
c0109e20:	89 50 40             	mov    %edx,0x40(%eax)
    lcr3(PADDR(mm->pgdir));
c0109e23:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0109e26:	8b 40 0c             	mov    0xc(%eax),%eax
c0109e29:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c0109e2c:	81 7d b4 ff ff ff bf 	cmpl   $0xbfffffff,-0x4c(%ebp)
c0109e33:	77 17                	ja     c0109e4c <load_icode+0x511>
c0109e35:	ff 75 b4             	pushl  -0x4c(%ebp)
c0109e38:	68 10 da 10 c0       	push   $0xc010da10
c0109e3d:	68 96 02 00 00       	push   $0x296
c0109e42:	68 34 da 10 c0       	push   $0xc010da34
c0109e47:	e8 b1 65 ff ff       	call   c01003fd <__panic>
c0109e4c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0109e4f:	05 00 00 00 40       	add    $0x40000000,%eax
c0109e54:	89 45 ac             	mov    %eax,-0x54(%ebp)
c0109e57:	8b 45 ac             	mov    -0x54(%ebp),%eax
c0109e5a:	0f 22 d8             	mov    %eax,%cr3

    //(6) setup trapframe for user environment
    struct trapframe *tf = current->tf;
c0109e5d:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c0109e62:	8b 40 3c             	mov    0x3c(%eax),%eax
c0109e65:	89 45 b0             	mov    %eax,-0x50(%ebp)
    memset(tf, 0, sizeof(struct trapframe));
c0109e68:	83 ec 04             	sub    $0x4,%esp
c0109e6b:	6a 4c                	push   $0x4c
c0109e6d:	6a 00                	push   $0x0
c0109e6f:	ff 75 b0             	pushl  -0x50(%ebp)
c0109e72:	e8 86 12 00 00       	call   c010b0fd <memset>
c0109e77:	83 c4 10             	add    $0x10,%esp
     *          tf_ds=tf_es=tf_ss should be USER_DS segment
     *          tf_esp should be the top addr of user stack (USTACKTOP)
     *          tf_eip should be the entry point of this binary program (elf->e_entry)
     *          tf_eflags should be set to enable computer to produce Interrupt
     */
    tf->tf_cs = USER_CS;
c0109e7a:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0109e7d:	66 c7 40 3c 1b 00    	movw   $0x1b,0x3c(%eax)
    tf->tf_ds = USER_DS;
c0109e83:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0109e86:	66 c7 40 2c 23 00    	movw   $0x23,0x2c(%eax)
    tf->tf_es = USER_DS;
c0109e8c:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0109e8f:	66 c7 40 28 23 00    	movw   $0x23,0x28(%eax)
    tf->tf_ss = USER_DS;
c0109e95:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0109e98:	66 c7 40 48 23 00    	movw   $0x23,0x48(%eax)
    tf->tf_esp = USTACKTOP;
c0109e9e:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0109ea1:	c7 40 44 00 00 00 b0 	movl   $0xb0000000,0x44(%eax)
    tf->tf_eip = elf->e_entry;
c0109ea8:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0109eab:	8b 50 18             	mov    0x18(%eax),%edx
c0109eae:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0109eb1:	89 50 38             	mov    %edx,0x38(%eax)
    tf->tf_eflags |= FL_IF;     // enable intr
c0109eb4:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0109eb7:	8b 40 40             	mov    0x40(%eax),%eax
c0109eba:	80 cc 02             	or     $0x2,%ah
c0109ebd:	89 c2                	mov    %eax,%edx
c0109ebf:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0109ec2:	89 50 40             	mov    %edx,0x40(%eax)
    
    ret = 0;
c0109ec5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
out:
    return ret;
c0109ecc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109ecf:	eb 3c                	jmp    c0109f0d <load_icode+0x5d2>
        if (ph->p_flags & ELF_PF_X) vm_flags |= VM_EXEC;
        if (ph->p_flags & ELF_PF_W) vm_flags |= VM_WRITE;
        if (ph->p_flags & ELF_PF_R) vm_flags |= VM_READ;
        if (vm_flags & VM_WRITE) perm |= PTE_W;
        if ((ret = mm_map(mm, ph->p_va, ph->p_memsz, vm_flags, NULL)) != 0) {
            goto bad_cleanup_mmap;
c0109ed1:	90                   	nop
c0109ed2:	eb 07                	jmp    c0109edb <load_icode+0x5a0>
     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
        end = ph->p_va + ph->p_filesz;
     //(3.6.1) copy TEXT/DATA section of bianry program
        while (start < end) {
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
                goto bad_cleanup_mmap;
c0109ed4:	90                   	nop
c0109ed5:	eb 04                	jmp    c0109edb <load_icode+0x5a0>
            start += size;
            assert((end < la && start == end) || (end >= la && start == la));
        }
        while (start < end) {
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
                goto bad_cleanup_mmap;
c0109ed7:	90                   	nop
c0109ed8:	eb 01                	jmp    c0109edb <load_icode+0x5a0>
        }
    }
    //(4) build user stack memory
    vm_flags = VM_READ | VM_WRITE | VM_STACK;
    if ((ret = mm_map(mm, USTACKTOP - USTACKSIZE, USTACKSIZE, vm_flags, NULL)) != 0) {
        goto bad_cleanup_mmap;
c0109eda:	90                   	nop
    
    ret = 0;
out:
    return ret;
bad_cleanup_mmap:
    exit_mmap(mm);
c0109edb:	83 ec 0c             	sub    $0xc,%esp
c0109ede:	ff 75 d0             	pushl  -0x30(%ebp)
c0109ee1:	e8 0d 9d ff ff       	call   c0103bf3 <exit_mmap>
c0109ee6:	83 c4 10             	add    $0x10,%esp
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
c0109ee9:	83 ec 0c             	sub    $0xc,%esp
c0109eec:	ff 75 d0             	pushl  -0x30(%ebp)
c0109eef:	e8 61 f5 ff ff       	call   c0109455 <put_pgdir>
c0109ef4:	83 c4 10             	add    $0x10,%esp
c0109ef7:	eb 01                	jmp    c0109efa <load_icode+0x5bf>
    if ((mm = mm_create()) == NULL) {
        goto bad_mm;
    }
    //(2) create a new PDT, and mm->pgdir= kernel virtual addr of PDT
    if (setup_pgdir(mm) != 0) {
        goto bad_pgdir_cleanup_mm;
c0109ef9:	90                   	nop
bad_cleanup_mmap:
    exit_mmap(mm);
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
c0109efa:	83 ec 0c             	sub    $0xc,%esp
c0109efd:	ff 75 d0             	pushl  -0x30(%ebp)
c0109f00:	e8 60 9a ff ff       	call   c0103965 <mm_destroy>
c0109f05:	83 c4 10             	add    $0x10,%esp
bad_mm:
    goto out;
c0109f08:	eb c2                	jmp    c0109ecc <load_icode+0x591>

    int ret = -E_NO_MEM;
    struct mm_struct *mm;
    //(1) create a new mm for current process
    if ((mm = mm_create()) == NULL) {
        goto bad_mm;
c0109f0a:	90                   	nop
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
bad_mm:
    goto out;
c0109f0b:	eb bf                	jmp    c0109ecc <load_icode+0x591>
}
c0109f0d:	c9                   	leave  
c0109f0e:	c3                   	ret    

c0109f0f <do_execve>:

// do_execve - call exit_mmap(mm)&put_pgdir(mm) to reclaim memory space of current process
//           - call load_icode to setup new memory space accroding binary prog.
int
do_execve(const char *name, size_t len, unsigned char *binary, size_t size) {
c0109f0f:	55                   	push   %ebp
c0109f10:	89 e5                	mov    %esp,%ebp
c0109f12:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = current->mm;
c0109f15:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c0109f1a:	8b 40 18             	mov    0x18(%eax),%eax
c0109f1d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!user_mem_check(mm, (uintptr_t)name, len, 0)) {
c0109f20:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f23:	6a 00                	push   $0x0
c0109f25:	ff 75 0c             	pushl  0xc(%ebp)
c0109f28:	50                   	push   %eax
c0109f29:	ff 75 f4             	pushl  -0xc(%ebp)
c0109f2c:	e8 53 a6 ff ff       	call   c0104584 <user_mem_check>
c0109f31:	83 c4 10             	add    $0x10,%esp
c0109f34:	85 c0                	test   %eax,%eax
c0109f36:	75 0a                	jne    c0109f42 <do_execve+0x33>
        return -E_INVAL;
c0109f38:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0109f3d:	e9 ed 00 00 00       	jmp    c010a02f <do_execve+0x120>
    }
    if (len > PROC_NAME_LEN) {
c0109f42:	83 7d 0c 0f          	cmpl   $0xf,0xc(%ebp)
c0109f46:	76 07                	jbe    c0109f4f <do_execve+0x40>
        len = PROC_NAME_LEN;
c0109f48:	c7 45 0c 0f 00 00 00 	movl   $0xf,0xc(%ebp)
    }

    char local_name[PROC_NAME_LEN + 1];
    memset(local_name, 0, sizeof(local_name));
c0109f4f:	83 ec 04             	sub    $0x4,%esp
c0109f52:	6a 10                	push   $0x10
c0109f54:	6a 00                	push   $0x0
c0109f56:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0109f59:	50                   	push   %eax
c0109f5a:	e8 9e 11 00 00       	call   c010b0fd <memset>
c0109f5f:	83 c4 10             	add    $0x10,%esp
    memcpy(local_name, name, len);
c0109f62:	83 ec 04             	sub    $0x4,%esp
c0109f65:	ff 75 0c             	pushl  0xc(%ebp)
c0109f68:	ff 75 08             	pushl  0x8(%ebp)
c0109f6b:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0109f6e:	50                   	push   %eax
c0109f6f:	e8 6c 12 00 00       	call   c010b1e0 <memcpy>
c0109f74:	83 c4 10             	add    $0x10,%esp

    if (mm != NULL) {
c0109f77:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109f7b:	74 56                	je     c0109fd3 <do_execve+0xc4>
        lcr3(boot_cr3);
c0109f7d:	a1 b4 31 1b c0       	mov    0xc01b31b4,%eax
c0109f82:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0109f85:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109f88:	0f 22 d8             	mov    %eax,%cr3
        if (mm_count_dec(mm) == 0) {
c0109f8b:	83 ec 0c             	sub    $0xc,%esp
c0109f8e:	ff 75 f4             	pushl  -0xc(%ebp)
c0109f91:	e8 5d ed ff ff       	call   c0108cf3 <mm_count_dec>
c0109f96:	83 c4 10             	add    $0x10,%esp
c0109f99:	85 c0                	test   %eax,%eax
c0109f9b:	75 2a                	jne    c0109fc7 <do_execve+0xb8>
            exit_mmap(mm);
c0109f9d:	83 ec 0c             	sub    $0xc,%esp
c0109fa0:	ff 75 f4             	pushl  -0xc(%ebp)
c0109fa3:	e8 4b 9c ff ff       	call   c0103bf3 <exit_mmap>
c0109fa8:	83 c4 10             	add    $0x10,%esp
            put_pgdir(mm);
c0109fab:	83 ec 0c             	sub    $0xc,%esp
c0109fae:	ff 75 f4             	pushl  -0xc(%ebp)
c0109fb1:	e8 9f f4 ff ff       	call   c0109455 <put_pgdir>
c0109fb6:	83 c4 10             	add    $0x10,%esp
            mm_destroy(mm);
c0109fb9:	83 ec 0c             	sub    $0xc,%esp
c0109fbc:	ff 75 f4             	pushl  -0xc(%ebp)
c0109fbf:	e8 a1 99 ff ff       	call   c0103965 <mm_destroy>
c0109fc4:	83 c4 10             	add    $0x10,%esp
        }
        current->mm = NULL;
c0109fc7:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c0109fcc:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    int ret;
    if ((ret = load_icode(binary, size)) != 0) {
c0109fd3:	83 ec 08             	sub    $0x8,%esp
c0109fd6:	ff 75 14             	pushl  0x14(%ebp)
c0109fd9:	ff 75 10             	pushl  0x10(%ebp)
c0109fdc:	e8 5a f9 ff ff       	call   c010993b <load_icode>
c0109fe1:	83 c4 10             	add    $0x10,%esp
c0109fe4:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109fe7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0109feb:	75 1c                	jne    c010a009 <do_execve+0xfa>
        goto execve_exit;
    }
    set_proc_name(current, local_name);
c0109fed:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c0109ff2:	83 ec 08             	sub    $0x8,%esp
c0109ff5:	8d 55 dc             	lea    -0x24(%ebp),%edx
c0109ff8:	52                   	push   %edx
c0109ff9:	50                   	push   %eax
c0109ffa:	e8 aa ee ff ff       	call   c0108ea9 <set_proc_name>
c0109fff:	83 c4 10             	add    $0x10,%esp
    return 0;
c010a002:	b8 00 00 00 00       	mov    $0x0,%eax
c010a007:	eb 26                	jmp    c010a02f <do_execve+0x120>
        }
        current->mm = NULL;
    }
    int ret;
    if ((ret = load_icode(binary, size)) != 0) {
        goto execve_exit;
c010a009:	90                   	nop
    }
    set_proc_name(current, local_name);
    return 0;

execve_exit:
    do_exit(ret);
c010a00a:	83 ec 0c             	sub    $0xc,%esp
c010a00d:	ff 75 f0             	pushl  -0x10(%ebp)
c010a010:	e8 56 f7 ff ff       	call   c010976b <do_exit>
c010a015:	83 c4 10             	add    $0x10,%esp
    panic("already exit: %e.\n", ret);
c010a018:	ff 75 f0             	pushl  -0x10(%ebp)
c010a01b:	68 2b dc 10 c0       	push   $0xc010dc2b
c010a020:	68 db 02 00 00       	push   $0x2db
c010a025:	68 34 da 10 c0       	push   $0xc010da34
c010a02a:	e8 ce 63 ff ff       	call   c01003fd <__panic>
}
c010a02f:	c9                   	leave  
c010a030:	c3                   	ret    

c010a031 <do_yield>:

// do_yield - ask the scheduler to reschedule
int
do_yield(void) {
c010a031:	55                   	push   %ebp
c010a032:	89 e5                	mov    %esp,%ebp
    current->need_resched = 1;
c010a034:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010a039:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    return 0;
c010a040:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a045:	5d                   	pop    %ebp
c010a046:	c3                   	ret    

c010a047 <do_wait>:

// do_wait - wait one OR any children with PROC_ZOMBIE state, and free memory space of kernel stack
//         - proc struct of this child.
// NOTE: only after do_wait function, all resources of the child proces are free.
int
do_wait(int pid, int *code_store) {
c010a047:	55                   	push   %ebp
c010a048:	89 e5                	mov    %esp,%ebp
c010a04a:	83 ec 18             	sub    $0x18,%esp
    struct mm_struct *mm = current->mm;
c010a04d:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010a052:	8b 40 18             	mov    0x18(%eax),%eax
c010a055:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (code_store != NULL) {
c010a058:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010a05c:	74 21                	je     c010a07f <do_wait+0x38>
        if (!user_mem_check(mm, (uintptr_t)code_store, sizeof(int), 1)) {
c010a05e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a061:	6a 01                	push   $0x1
c010a063:	6a 04                	push   $0x4
c010a065:	50                   	push   %eax
c010a066:	ff 75 ec             	pushl  -0x14(%ebp)
c010a069:	e8 16 a5 ff ff       	call   c0104584 <user_mem_check>
c010a06e:	83 c4 10             	add    $0x10,%esp
c010a071:	85 c0                	test   %eax,%eax
c010a073:	75 0a                	jne    c010a07f <do_wait+0x38>
            return -E_INVAL;
c010a075:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010a07a:	e9 54 01 00 00       	jmp    c010a1d3 <do_wait+0x18c>
    }

    struct proc_struct *proc;
    bool intr_flag, haskid;
repeat:
    haskid = 0;
c010a07f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    if (pid != 0) {
c010a086:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a08a:	74 39                	je     c010a0c5 <do_wait+0x7e>
        proc = find_proc(pid);
c010a08c:	83 ec 0c             	sub    $0xc,%esp
c010a08f:	ff 75 08             	pushl  0x8(%ebp)
c010a092:	e8 e7 f1 ff ff       	call   c010927e <find_proc>
c010a097:	83 c4 10             	add    $0x10,%esp
c010a09a:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (proc != NULL && proc->parent == current) {
c010a09d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a0a1:	74 4f                	je     c010a0f2 <do_wait+0xab>
c010a0a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a0a6:	8b 50 14             	mov    0x14(%eax),%edx
c010a0a9:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010a0ae:	39 c2                	cmp    %eax,%edx
c010a0b0:	75 40                	jne    c010a0f2 <do_wait+0xab>
            haskid = 1;
c010a0b2:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c010a0b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a0bc:	8b 00                	mov    (%eax),%eax
c010a0be:	83 f8 03             	cmp    $0x3,%eax
c010a0c1:	75 2f                	jne    c010a0f2 <do_wait+0xab>
                goto found;
c010a0c3:	eb 7f                	jmp    c010a144 <do_wait+0xfd>
            }
        }
    }
    else {
        proc = current->cptr;
c010a0c5:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010a0ca:	8b 40 70             	mov    0x70(%eax),%eax
c010a0cd:	89 45 f4             	mov    %eax,-0xc(%ebp)
        for (; proc != NULL; proc = proc->optr) {
c010a0d0:	eb 1a                	jmp    c010a0ec <do_wait+0xa5>
            haskid = 1;
c010a0d2:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c010a0d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a0dc:	8b 00                	mov    (%eax),%eax
c010a0de:	83 f8 03             	cmp    $0x3,%eax
c010a0e1:	74 60                	je     c010a143 <do_wait+0xfc>
            }
        }
    }
    else {
        proc = current->cptr;
        for (; proc != NULL; proc = proc->optr) {
c010a0e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a0e6:	8b 40 78             	mov    0x78(%eax),%eax
c010a0e9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a0ec:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a0f0:	75 e0                	jne    c010a0d2 <do_wait+0x8b>
            if (proc->state == PROC_ZOMBIE) {
                goto found;
            }
        }
    }
    if (haskid) {
c010a0f2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010a0f6:	74 41                	je     c010a139 <do_wait+0xf2>
        current->state = PROC_SLEEPING;
c010a0f8:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010a0fd:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        current->wait_state = WT_CHILD;
c010a103:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010a108:	c7 40 6c 01 00 00 80 	movl   $0x80000001,0x6c(%eax)
        schedule();
c010a10f:	e8 d1 06 00 00       	call   c010a7e5 <schedule>
        if (current->flags & PF_EXITING) {
c010a114:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010a119:	8b 40 44             	mov    0x44(%eax),%eax
c010a11c:	83 e0 01             	and    $0x1,%eax
c010a11f:	85 c0                	test   %eax,%eax
c010a121:	0f 84 58 ff ff ff    	je     c010a07f <do_wait+0x38>
            do_exit(-E_KILLED);
c010a127:	83 ec 0c             	sub    $0xc,%esp
c010a12a:	6a f7                	push   $0xfffffff7
c010a12c:	e8 3a f6 ff ff       	call   c010976b <do_exit>
c010a131:	83 c4 10             	add    $0x10,%esp
        }
        goto repeat;
c010a134:	e9 46 ff ff ff       	jmp    c010a07f <do_wait+0x38>
    }
    return -E_BAD_PROC;
c010a139:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
c010a13e:	e9 90 00 00 00       	jmp    c010a1d3 <do_wait+0x18c>
    else {
        proc = current->cptr;
        for (; proc != NULL; proc = proc->optr) {
            haskid = 1;
            if (proc->state == PROC_ZOMBIE) {
                goto found;
c010a143:	90                   	nop
        goto repeat;
    }
    return -E_BAD_PROC;

found:
    if (proc == idleproc || proc == initproc) {
c010a144:	a1 20 10 1b c0       	mov    0xc01b1020,%eax
c010a149:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010a14c:	74 0a                	je     c010a158 <do_wait+0x111>
c010a14e:	a1 24 10 1b c0       	mov    0xc01b1024,%eax
c010a153:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010a156:	75 17                	jne    c010a16f <do_wait+0x128>
        panic("wait idleproc or initproc.\n");
c010a158:	83 ec 04             	sub    $0x4,%esp
c010a15b:	68 3e dc 10 c0       	push   $0xc010dc3e
c010a160:	68 14 03 00 00       	push   $0x314
c010a165:	68 34 da 10 c0       	push   $0xc010da34
c010a16a:	e8 8e 62 ff ff       	call   c01003fd <__panic>
    }
    if (code_store != NULL) {
c010a16f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010a173:	74 0b                	je     c010a180 <do_wait+0x139>
        *code_store = proc->exit_code;
c010a175:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a178:	8b 50 68             	mov    0x68(%eax),%edx
c010a17b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a17e:	89 10                	mov    %edx,(%eax)
    }
    local_intr_save(intr_flag);
c010a180:	e8 c5 e9 ff ff       	call   c0108b4a <__intr_save>
c010a185:	89 45 e8             	mov    %eax,-0x18(%ebp)
    {
        unhash_proc(proc);
c010a188:	83 ec 0c             	sub    $0xc,%esp
c010a18b:	ff 75 f4             	pushl  -0xc(%ebp)
c010a18e:	e8 b7 f0 ff ff       	call   c010924a <unhash_proc>
c010a193:	83 c4 10             	add    $0x10,%esp
        remove_links(proc);
c010a196:	83 ec 0c             	sub    $0xc,%esp
c010a199:	ff 75 f4             	pushl  -0xc(%ebp)
c010a19c:	e8 18 ee ff ff       	call   c0108fb9 <remove_links>
c010a1a1:	83 c4 10             	add    $0x10,%esp
    }
    local_intr_restore(intr_flag);
c010a1a4:	83 ec 0c             	sub    $0xc,%esp
c010a1a7:	ff 75 e8             	pushl  -0x18(%ebp)
c010a1aa:	e8 c5 e9 ff ff       	call   c0108b74 <__intr_restore>
c010a1af:	83 c4 10             	add    $0x10,%esp
    put_kstack(proc);
c010a1b2:	83 ec 0c             	sub    $0xc,%esp
c010a1b5:	ff 75 f4             	pushl  -0xc(%ebp)
c010a1b8:	e8 d6 f1 ff ff       	call   c0109393 <put_kstack>
c010a1bd:	83 c4 10             	add    $0x10,%esp
    kfree(proc);
c010a1c0:	83 ec 0c             	sub    $0xc,%esp
c010a1c3:	ff 75 f4             	pushl  -0xc(%ebp)
c010a1c6:	e8 ae af ff ff       	call   c0105179 <kfree>
c010a1cb:	83 c4 10             	add    $0x10,%esp
    return 0;
c010a1ce:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a1d3:	c9                   	leave  
c010a1d4:	c3                   	ret    

c010a1d5 <do_kill>:

// do_kill - kill process with pid by set this process's flags with PF_EXITING
int
do_kill(int pid) {
c010a1d5:	55                   	push   %ebp
c010a1d6:	89 e5                	mov    %esp,%ebp
c010a1d8:	83 ec 18             	sub    $0x18,%esp
    struct proc_struct *proc;
    if ((proc = find_proc(pid)) != NULL) {
c010a1db:	83 ec 0c             	sub    $0xc,%esp
c010a1de:	ff 75 08             	pushl  0x8(%ebp)
c010a1e1:	e8 98 f0 ff ff       	call   c010927e <find_proc>
c010a1e6:	83 c4 10             	add    $0x10,%esp
c010a1e9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a1ec:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a1f0:	74 44                	je     c010a236 <do_kill+0x61>
        if (!(proc->flags & PF_EXITING)) {
c010a1f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a1f5:	8b 40 44             	mov    0x44(%eax),%eax
c010a1f8:	83 e0 01             	and    $0x1,%eax
c010a1fb:	85 c0                	test   %eax,%eax
c010a1fd:	75 30                	jne    c010a22f <do_kill+0x5a>
            proc->flags |= PF_EXITING;
c010a1ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a202:	8b 40 44             	mov    0x44(%eax),%eax
c010a205:	83 c8 01             	or     $0x1,%eax
c010a208:	89 c2                	mov    %eax,%edx
c010a20a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a20d:	89 50 44             	mov    %edx,0x44(%eax)
            if (proc->wait_state & WT_INTERRUPTED) {
c010a210:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a213:	8b 40 6c             	mov    0x6c(%eax),%eax
c010a216:	85 c0                	test   %eax,%eax
c010a218:	79 0e                	jns    c010a228 <do_kill+0x53>
                wakeup_proc(proc);
c010a21a:	83 ec 0c             	sub    $0xc,%esp
c010a21d:	ff 75 f4             	pushl  -0xc(%ebp)
c010a220:	e8 33 05 00 00       	call   c010a758 <wakeup_proc>
c010a225:	83 c4 10             	add    $0x10,%esp
            }
            return 0;
c010a228:	b8 00 00 00 00       	mov    $0x0,%eax
c010a22d:	eb 0c                	jmp    c010a23b <do_kill+0x66>
        }
        return -E_KILLED;
c010a22f:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
c010a234:	eb 05                	jmp    c010a23b <do_kill+0x66>
    }
    return -E_INVAL;
c010a236:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c010a23b:	c9                   	leave  
c010a23c:	c3                   	ret    

c010a23d <kernel_execve>:

// kernel_execve - do SYS_exec syscall to exec a user program called by user_main kernel_thread
static int
kernel_execve(const char *name, unsigned char *binary, size_t size) {
c010a23d:	55                   	push   %ebp
c010a23e:	89 e5                	mov    %esp,%ebp
c010a240:	57                   	push   %edi
c010a241:	56                   	push   %esi
c010a242:	53                   	push   %ebx
c010a243:	83 ec 1c             	sub    $0x1c,%esp
    int ret, len = strlen(name);
c010a246:	83 ec 0c             	sub    $0xc,%esp
c010a249:	ff 75 08             	pushl  0x8(%ebp)
c010a24c:	e8 7b 0b 00 00       	call   c010adcc <strlen>
c010a251:	83 c4 10             	add    $0x10,%esp
c010a254:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    asm volatile (
c010a257:	b8 04 00 00 00       	mov    $0x4,%eax
c010a25c:	8b 55 08             	mov    0x8(%ebp),%edx
c010a25f:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c010a262:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c010a265:	8b 75 10             	mov    0x10(%ebp),%esi
c010a268:	89 f7                	mov    %esi,%edi
c010a26a:	cd 80                	int    $0x80
c010a26c:	89 45 e0             	mov    %eax,-0x20(%ebp)
        "int %1;"
        : "=a" (ret)
        : "i" (T_SYSCALL), "0" (SYS_exec), "d" (name), "c" (len), "b" (binary), "D" (size)
        : "memory");
    return ret;
c010a26f:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
c010a272:	8d 65 f4             	lea    -0xc(%ebp),%esp
c010a275:	5b                   	pop    %ebx
c010a276:	5e                   	pop    %esi
c010a277:	5f                   	pop    %edi
c010a278:	5d                   	pop    %ebp
c010a279:	c3                   	ret    

c010a27a <user_main>:

#define KERNEL_EXECVE2(x, xstart, xsize)        __KERNEL_EXECVE2(x, xstart, xsize)

// user_main - kernel thread used to exec a user program
static int
user_main(void *arg) {
c010a27a:	55                   	push   %ebp
c010a27b:	89 e5                	mov    %esp,%ebp
c010a27d:	83 ec 08             	sub    $0x8,%esp
#ifdef TEST
    KERNEL_EXECVE2(TEST, TESTSTART, TESTSIZE);
c010a280:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010a285:	8b 40 04             	mov    0x4(%eax),%eax
c010a288:	83 ec 04             	sub    $0x4,%esp
c010a28b:	68 5a dc 10 c0       	push   $0xc010dc5a
c010a290:	50                   	push   %eax
c010a291:	68 64 dc 10 c0       	push   $0xc010dc64
c010a296:	e8 fc 5f ff ff       	call   c0100297 <cprintf>
c010a29b:	83 c4 10             	add    $0x10,%esp
c010a29e:	b8 60 79 00 00       	mov    $0x7960,%eax
c010a2a3:	83 ec 04             	sub    $0x4,%esp
c010a2a6:	50                   	push   %eax
c010a2a7:	68 ac 1c 16 c0       	push   $0xc0161cac
c010a2ac:	68 5a dc 10 c0       	push   $0xc010dc5a
c010a2b1:	e8 87 ff ff ff       	call   c010a23d <kernel_execve>
c010a2b6:	83 c4 10             	add    $0x10,%esp
#else
    KERNEL_EXECVE(exit);
#endif
    panic("user_main execve failed.\n");
c010a2b9:	83 ec 04             	sub    $0x4,%esp
c010a2bc:	68 8b dc 10 c0       	push   $0xc010dc8b
c010a2c1:	68 5d 03 00 00       	push   $0x35d
c010a2c6:	68 34 da 10 c0       	push   $0xc010da34
c010a2cb:	e8 2d 61 ff ff       	call   c01003fd <__panic>

c010a2d0 <init_main>:
}

// init_main - the second kernel thread used to create user_main kernel threads
static int
init_main(void *arg) {
c010a2d0:	55                   	push   %ebp
c010a2d1:	89 e5                	mov    %esp,%ebp
c010a2d3:	83 ec 28             	sub    $0x28,%esp
    size_t nr_free_pages_store = nr_free_pages();
c010a2d6:	e8 51 ce ff ff       	call   c010712c <nr_free_pages>
c010a2db:	89 45 f4             	mov    %eax,-0xc(%ebp)
    size_t kernel_allocated_store = kallocated();
c010a2de:	e8 61 ad ff ff       	call   c0105044 <kallocated>
c010a2e3:	89 45 f0             	mov    %eax,-0x10(%ebp)

    int pid = kernel_thread(user_main, NULL, 0);
c010a2e6:	83 ec 04             	sub    $0x4,%esp
c010a2e9:	6a 00                	push   $0x0
c010a2eb:	6a 00                	push   $0x0
c010a2ed:	68 7a a2 10 c0       	push   $0xc010a27a
c010a2f2:	e8 f7 ef ff ff       	call   c01092ee <kernel_thread>
c010a2f7:	83 c4 10             	add    $0x10,%esp
c010a2fa:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (pid <= 0) {
c010a2fd:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010a301:	7f 1c                	jg     c010a31f <init_main+0x4f>
        panic("create user_main failed.\n");
c010a303:	83 ec 04             	sub    $0x4,%esp
c010a306:	68 a5 dc 10 c0       	push   $0xc010dca5
c010a30b:	68 68 03 00 00       	push   $0x368
c010a310:	68 34 da 10 c0       	push   $0xc010da34
c010a315:	e8 e3 60 ff ff       	call   c01003fd <__panic>
    }

    while (do_wait(0, NULL) == 0) {
        schedule();
c010a31a:	e8 c6 04 00 00       	call   c010a7e5 <schedule>
    int pid = kernel_thread(user_main, NULL, 0);
    if (pid <= 0) {
        panic("create user_main failed.\n");
    }

    while (do_wait(0, NULL) == 0) {
c010a31f:	83 ec 08             	sub    $0x8,%esp
c010a322:	6a 00                	push   $0x0
c010a324:	6a 00                	push   $0x0
c010a326:	e8 1c fd ff ff       	call   c010a047 <do_wait>
c010a32b:	83 c4 10             	add    $0x10,%esp
c010a32e:	85 c0                	test   %eax,%eax
c010a330:	74 e8                	je     c010a31a <init_main+0x4a>
        schedule();
    }

    cprintf("all user-mode processes have quit.\n");
c010a332:	83 ec 0c             	sub    $0xc,%esp
c010a335:	68 c0 dc 10 c0       	push   $0xc010dcc0
c010a33a:	e8 58 5f ff ff       	call   c0100297 <cprintf>
c010a33f:	83 c4 10             	add    $0x10,%esp
    assert(initproc->cptr == NULL && initproc->yptr == NULL && initproc->optr == NULL);
c010a342:	a1 24 10 1b c0       	mov    0xc01b1024,%eax
c010a347:	8b 40 70             	mov    0x70(%eax),%eax
c010a34a:	85 c0                	test   %eax,%eax
c010a34c:	75 18                	jne    c010a366 <init_main+0x96>
c010a34e:	a1 24 10 1b c0       	mov    0xc01b1024,%eax
c010a353:	8b 40 74             	mov    0x74(%eax),%eax
c010a356:	85 c0                	test   %eax,%eax
c010a358:	75 0c                	jne    c010a366 <init_main+0x96>
c010a35a:	a1 24 10 1b c0       	mov    0xc01b1024,%eax
c010a35f:	8b 40 78             	mov    0x78(%eax),%eax
c010a362:	85 c0                	test   %eax,%eax
c010a364:	74 19                	je     c010a37f <init_main+0xaf>
c010a366:	68 e4 dc 10 c0       	push   $0xc010dce4
c010a36b:	68 61 da 10 c0       	push   $0xc010da61
c010a370:	68 70 03 00 00       	push   $0x370
c010a375:	68 34 da 10 c0       	push   $0xc010da34
c010a37a:	e8 7e 60 ff ff       	call   c01003fd <__panic>
    assert(nr_process == 2);
c010a37f:	a1 40 30 1b c0       	mov    0xc01b3040,%eax
c010a384:	83 f8 02             	cmp    $0x2,%eax
c010a387:	74 19                	je     c010a3a2 <init_main+0xd2>
c010a389:	68 2f dd 10 c0       	push   $0xc010dd2f
c010a38e:	68 61 da 10 c0       	push   $0xc010da61
c010a393:	68 71 03 00 00       	push   $0x371
c010a398:	68 34 da 10 c0       	push   $0xc010da34
c010a39d:	e8 5b 60 ff ff       	call   c01003fd <__panic>
c010a3a2:	c7 45 e4 bc 31 1b c0 	movl   $0xc01b31bc,-0x1c(%ebp)
c010a3a9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a3ac:	8b 40 04             	mov    0x4(%eax),%eax
    assert(list_next(&proc_list) == &(initproc->list_link));
c010a3af:	8b 15 24 10 1b c0    	mov    0xc01b1024,%edx
c010a3b5:	83 c2 58             	add    $0x58,%edx
c010a3b8:	39 d0                	cmp    %edx,%eax
c010a3ba:	74 19                	je     c010a3d5 <init_main+0x105>
c010a3bc:	68 40 dd 10 c0       	push   $0xc010dd40
c010a3c1:	68 61 da 10 c0       	push   $0xc010da61
c010a3c6:	68 72 03 00 00       	push   $0x372
c010a3cb:	68 34 da 10 c0       	push   $0xc010da34
c010a3d0:	e8 28 60 ff ff       	call   c01003fd <__panic>
c010a3d5:	c7 45 e8 bc 31 1b c0 	movl   $0xc01b31bc,-0x18(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c010a3dc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a3df:	8b 00                	mov    (%eax),%eax
    assert(list_prev(&proc_list) == &(initproc->list_link));
c010a3e1:	8b 15 24 10 1b c0    	mov    0xc01b1024,%edx
c010a3e7:	83 c2 58             	add    $0x58,%edx
c010a3ea:	39 d0                	cmp    %edx,%eax
c010a3ec:	74 19                	je     c010a407 <init_main+0x137>
c010a3ee:	68 70 dd 10 c0       	push   $0xc010dd70
c010a3f3:	68 61 da 10 c0       	push   $0xc010da61
c010a3f8:	68 73 03 00 00       	push   $0x373
c010a3fd:	68 34 da 10 c0       	push   $0xc010da34
c010a402:	e8 f6 5f ff ff       	call   c01003fd <__panic>

    cprintf("init check memory pass.\n");
c010a407:	83 ec 0c             	sub    $0xc,%esp
c010a40a:	68 a0 dd 10 c0       	push   $0xc010dda0
c010a40f:	e8 83 5e ff ff       	call   c0100297 <cprintf>
c010a414:	83 c4 10             	add    $0x10,%esp
    return 0;
c010a417:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a41c:	c9                   	leave  
c010a41d:	c3                   	ret    

c010a41e <proc_init>:

// proc_init - set up the first kernel thread idleproc "idle" by itself and 
//           - create the second kernel thread init_main
void
proc_init(void) {
c010a41e:	55                   	push   %ebp
c010a41f:	89 e5                	mov    %esp,%ebp
c010a421:	83 ec 18             	sub    $0x18,%esp
c010a424:	c7 45 e8 bc 31 1b c0 	movl   $0xc01b31bc,-0x18(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010a42b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a42e:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010a431:	89 50 04             	mov    %edx,0x4(%eax)
c010a434:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a437:	8b 50 04             	mov    0x4(%eax),%edx
c010a43a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a43d:	89 10                	mov    %edx,(%eax)
    int i;

    list_init(&proc_list);
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c010a43f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010a446:	eb 26                	jmp    c010a46e <proc_init+0x50>
        list_init(hash_list + i);
c010a448:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a44b:	c1 e0 03             	shl    $0x3,%eax
c010a44e:	05 40 10 1b c0       	add    $0xc01b1040,%eax
c010a453:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010a456:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a459:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010a45c:	89 50 04             	mov    %edx,0x4(%eax)
c010a45f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a462:	8b 50 04             	mov    0x4(%eax),%edx
c010a465:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a468:	89 10                	mov    %edx,(%eax)
void
proc_init(void) {
    int i;

    list_init(&proc_list);
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c010a46a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010a46e:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
c010a475:	7e d1                	jle    c010a448 <proc_init+0x2a>
        list_init(hash_list + i);
    }

    if ((idleproc = alloc_proc()) == NULL) {
c010a477:	e8 d3 e8 ff ff       	call   c0108d4f <alloc_proc>
c010a47c:	a3 20 10 1b c0       	mov    %eax,0xc01b1020
c010a481:	a1 20 10 1b c0       	mov    0xc01b1020,%eax
c010a486:	85 c0                	test   %eax,%eax
c010a488:	75 17                	jne    c010a4a1 <proc_init+0x83>
        panic("cannot alloc idleproc.\n");
c010a48a:	83 ec 04             	sub    $0x4,%esp
c010a48d:	68 b9 dd 10 c0       	push   $0xc010ddb9
c010a492:	68 85 03 00 00       	push   $0x385
c010a497:	68 34 da 10 c0       	push   $0xc010da34
c010a49c:	e8 5c 5f ff ff       	call   c01003fd <__panic>
    }

    idleproc->pid = 0;
c010a4a1:	a1 20 10 1b c0       	mov    0xc01b1020,%eax
c010a4a6:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    idleproc->state = PROC_RUNNABLE;
c010a4ad:	a1 20 10 1b c0       	mov    0xc01b1020,%eax
c010a4b2:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    idleproc->kstack = (uintptr_t)bootstack;
c010a4b8:	a1 20 10 1b c0       	mov    0xc01b1020,%eax
c010a4bd:	ba 00 a0 12 c0       	mov    $0xc012a000,%edx
c010a4c2:	89 50 0c             	mov    %edx,0xc(%eax)
    idleproc->need_resched = 1;
c010a4c5:	a1 20 10 1b c0       	mov    0xc01b1020,%eax
c010a4ca:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    set_proc_name(idleproc, "idle");
c010a4d1:	a1 20 10 1b c0       	mov    0xc01b1020,%eax
c010a4d6:	83 ec 08             	sub    $0x8,%esp
c010a4d9:	68 d1 dd 10 c0       	push   $0xc010ddd1
c010a4de:	50                   	push   %eax
c010a4df:	e8 c5 e9 ff ff       	call   c0108ea9 <set_proc_name>
c010a4e4:	83 c4 10             	add    $0x10,%esp
    nr_process ++;
c010a4e7:	a1 40 30 1b c0       	mov    0xc01b3040,%eax
c010a4ec:	83 c0 01             	add    $0x1,%eax
c010a4ef:	a3 40 30 1b c0       	mov    %eax,0xc01b3040

    current = idleproc;
c010a4f4:	a1 20 10 1b c0       	mov    0xc01b1020,%eax
c010a4f9:	a3 28 10 1b c0       	mov    %eax,0xc01b1028

    int pid = kernel_thread(init_main, NULL, 0);
c010a4fe:	83 ec 04             	sub    $0x4,%esp
c010a501:	6a 00                	push   $0x0
c010a503:	6a 00                	push   $0x0
c010a505:	68 d0 a2 10 c0       	push   $0xc010a2d0
c010a50a:	e8 df ed ff ff       	call   c01092ee <kernel_thread>
c010a50f:	83 c4 10             	add    $0x10,%esp
c010a512:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (pid <= 0) {
c010a515:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010a519:	7f 17                	jg     c010a532 <proc_init+0x114>
        panic("create init_main failed.\n");
c010a51b:	83 ec 04             	sub    $0x4,%esp
c010a51e:	68 d6 dd 10 c0       	push   $0xc010ddd6
c010a523:	68 93 03 00 00       	push   $0x393
c010a528:	68 34 da 10 c0       	push   $0xc010da34
c010a52d:	e8 cb 5e ff ff       	call   c01003fd <__panic>
    }

    initproc = find_proc(pid);
c010a532:	83 ec 0c             	sub    $0xc,%esp
c010a535:	ff 75 ec             	pushl  -0x14(%ebp)
c010a538:	e8 41 ed ff ff       	call   c010927e <find_proc>
c010a53d:	83 c4 10             	add    $0x10,%esp
c010a540:	a3 24 10 1b c0       	mov    %eax,0xc01b1024
    set_proc_name(initproc, "init");
c010a545:	a1 24 10 1b c0       	mov    0xc01b1024,%eax
c010a54a:	83 ec 08             	sub    $0x8,%esp
c010a54d:	68 f0 dd 10 c0       	push   $0xc010ddf0
c010a552:	50                   	push   %eax
c010a553:	e8 51 e9 ff ff       	call   c0108ea9 <set_proc_name>
c010a558:	83 c4 10             	add    $0x10,%esp

    assert(idleproc != NULL && idleproc->pid == 0);
c010a55b:	a1 20 10 1b c0       	mov    0xc01b1020,%eax
c010a560:	85 c0                	test   %eax,%eax
c010a562:	74 0c                	je     c010a570 <proc_init+0x152>
c010a564:	a1 20 10 1b c0       	mov    0xc01b1020,%eax
c010a569:	8b 40 04             	mov    0x4(%eax),%eax
c010a56c:	85 c0                	test   %eax,%eax
c010a56e:	74 19                	je     c010a589 <proc_init+0x16b>
c010a570:	68 f8 dd 10 c0       	push   $0xc010ddf8
c010a575:	68 61 da 10 c0       	push   $0xc010da61
c010a57a:	68 99 03 00 00       	push   $0x399
c010a57f:	68 34 da 10 c0       	push   $0xc010da34
c010a584:	e8 74 5e ff ff       	call   c01003fd <__panic>
    assert(initproc != NULL && initproc->pid == 1);
c010a589:	a1 24 10 1b c0       	mov    0xc01b1024,%eax
c010a58e:	85 c0                	test   %eax,%eax
c010a590:	74 0d                	je     c010a59f <proc_init+0x181>
c010a592:	a1 24 10 1b c0       	mov    0xc01b1024,%eax
c010a597:	8b 40 04             	mov    0x4(%eax),%eax
c010a59a:	83 f8 01             	cmp    $0x1,%eax
c010a59d:	74 19                	je     c010a5b8 <proc_init+0x19a>
c010a59f:	68 20 de 10 c0       	push   $0xc010de20
c010a5a4:	68 61 da 10 c0       	push   $0xc010da61
c010a5a9:	68 9a 03 00 00       	push   $0x39a
c010a5ae:	68 34 da 10 c0       	push   $0xc010da34
c010a5b3:	e8 45 5e ff ff       	call   c01003fd <__panic>
}
c010a5b8:	90                   	nop
c010a5b9:	c9                   	leave  
c010a5ba:	c3                   	ret    

c010a5bb <cpu_idle>:

// cpu_idle - at the end of kern_init, the first kernel thread idleproc will do below works
void
cpu_idle(void) {
c010a5bb:	55                   	push   %ebp
c010a5bc:	89 e5                	mov    %esp,%ebp
c010a5be:	83 ec 08             	sub    $0x8,%esp
    while (1) {
        if (current->need_resched) {
c010a5c1:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010a5c6:	8b 40 10             	mov    0x10(%eax),%eax
c010a5c9:	85 c0                	test   %eax,%eax
c010a5cb:	74 f4                	je     c010a5c1 <cpu_idle+0x6>
            schedule();
c010a5cd:	e8 13 02 00 00       	call   c010a7e5 <schedule>
        }
    }
c010a5d2:	eb ed                	jmp    c010a5c1 <cpu_idle+0x6>

c010a5d4 <lab6_set_priority>:
}

//FOR LAB6, set the process's priority (bigger value will get more CPU time) 
void
lab6_set_priority(uint32_t priority)
{
c010a5d4:	55                   	push   %ebp
c010a5d5:	89 e5                	mov    %esp,%ebp
    if (priority == 0)
c010a5d7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a5db:	75 11                	jne    c010a5ee <lab6_set_priority+0x1a>
        current->lab6_priority = 1;
c010a5dd:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010a5e2:	c7 80 9c 00 00 00 01 	movl   $0x1,0x9c(%eax)
c010a5e9:	00 00 00 
    else current->lab6_priority = priority;
}
c010a5ec:	eb 0e                	jmp    c010a5fc <lab6_set_priority+0x28>
void
lab6_set_priority(uint32_t priority)
{
    if (priority == 0)
        current->lab6_priority = 1;
    else current->lab6_priority = priority;
c010a5ee:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010a5f3:	8b 55 08             	mov    0x8(%ebp),%edx
c010a5f6:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
}
c010a5fc:	90                   	nop
c010a5fd:	5d                   	pop    %ebp
c010a5fe:	c3                   	ret    

c010a5ff <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c010a5ff:	55                   	push   %ebp
c010a600:	89 e5                	mov    %esp,%ebp
c010a602:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010a605:	9c                   	pushf  
c010a606:	58                   	pop    %eax
c010a607:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010a60a:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010a60d:	25 00 02 00 00       	and    $0x200,%eax
c010a612:	85 c0                	test   %eax,%eax
c010a614:	74 0c                	je     c010a622 <__intr_save+0x23>
        intr_disable();
c010a616:	e8 a1 7b ff ff       	call   c01021bc <intr_disable>
        return 1;
c010a61b:	b8 01 00 00 00       	mov    $0x1,%eax
c010a620:	eb 05                	jmp    c010a627 <__intr_save+0x28>
    }
    return 0;
c010a622:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a627:	c9                   	leave  
c010a628:	c3                   	ret    

c010a629 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010a629:	55                   	push   %ebp
c010a62a:	89 e5                	mov    %esp,%ebp
c010a62c:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010a62f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a633:	74 05                	je     c010a63a <__intr_restore+0x11>
        intr_enable();
c010a635:	e8 7b 7b ff ff       	call   c01021b5 <intr_enable>
    }
}
c010a63a:	90                   	nop
c010a63b:	c9                   	leave  
c010a63c:	c3                   	ret    

c010a63d <sched_class_enqueue>:
static struct sched_class *sched_class;

static struct run_queue *rq;

static inline void
sched_class_enqueue(struct proc_struct *proc) {
c010a63d:	55                   	push   %ebp
c010a63e:	89 e5                	mov    %esp,%ebp
c010a640:	83 ec 08             	sub    $0x8,%esp
    if (proc != idleproc) {
c010a643:	a1 20 10 1b c0       	mov    0xc01b1020,%eax
c010a648:	39 45 08             	cmp    %eax,0x8(%ebp)
c010a64b:	74 1a                	je     c010a667 <sched_class_enqueue+0x2a>
        sched_class->enqueue(rq, proc);
c010a64d:	a1 5c 30 1b c0       	mov    0xc01b305c,%eax
c010a652:	8b 40 08             	mov    0x8(%eax),%eax
c010a655:	8b 15 60 30 1b c0    	mov    0xc01b3060,%edx
c010a65b:	83 ec 08             	sub    $0x8,%esp
c010a65e:	ff 75 08             	pushl  0x8(%ebp)
c010a661:	52                   	push   %edx
c010a662:	ff d0                	call   *%eax
c010a664:	83 c4 10             	add    $0x10,%esp
    }
}
c010a667:	90                   	nop
c010a668:	c9                   	leave  
c010a669:	c3                   	ret    

c010a66a <sched_class_dequeue>:

static inline void
sched_class_dequeue(struct proc_struct *proc) {
c010a66a:	55                   	push   %ebp
c010a66b:	89 e5                	mov    %esp,%ebp
c010a66d:	83 ec 08             	sub    $0x8,%esp
    sched_class->dequeue(rq, proc);
c010a670:	a1 5c 30 1b c0       	mov    0xc01b305c,%eax
c010a675:	8b 40 0c             	mov    0xc(%eax),%eax
c010a678:	8b 15 60 30 1b c0    	mov    0xc01b3060,%edx
c010a67e:	83 ec 08             	sub    $0x8,%esp
c010a681:	ff 75 08             	pushl  0x8(%ebp)
c010a684:	52                   	push   %edx
c010a685:	ff d0                	call   *%eax
c010a687:	83 c4 10             	add    $0x10,%esp
}
c010a68a:	90                   	nop
c010a68b:	c9                   	leave  
c010a68c:	c3                   	ret    

c010a68d <sched_class_pick_next>:

static inline struct proc_struct *
sched_class_pick_next(void) {
c010a68d:	55                   	push   %ebp
c010a68e:	89 e5                	mov    %esp,%ebp
c010a690:	83 ec 08             	sub    $0x8,%esp
    return sched_class->pick_next(rq);
c010a693:	a1 5c 30 1b c0       	mov    0xc01b305c,%eax
c010a698:	8b 40 10             	mov    0x10(%eax),%eax
c010a69b:	8b 15 60 30 1b c0    	mov    0xc01b3060,%edx
c010a6a1:	83 ec 0c             	sub    $0xc,%esp
c010a6a4:	52                   	push   %edx
c010a6a5:	ff d0                	call   *%eax
c010a6a7:	83 c4 10             	add    $0x10,%esp
}
c010a6aa:	c9                   	leave  
c010a6ab:	c3                   	ret    

c010a6ac <sched_class_proc_tick>:

void
sched_class_proc_tick(struct proc_struct *proc) {
c010a6ac:	55                   	push   %ebp
c010a6ad:	89 e5                	mov    %esp,%ebp
c010a6af:	83 ec 08             	sub    $0x8,%esp
    if (proc != idleproc) {
c010a6b2:	a1 20 10 1b c0       	mov    0xc01b1020,%eax
c010a6b7:	39 45 08             	cmp    %eax,0x8(%ebp)
c010a6ba:	74 1c                	je     c010a6d8 <sched_class_proc_tick+0x2c>
        // cprintf("calling sched_class->proc_tick()...\n");
        sched_class->proc_tick(rq, proc);
c010a6bc:	a1 5c 30 1b c0       	mov    0xc01b305c,%eax
c010a6c1:	8b 40 14             	mov    0x14(%eax),%eax
c010a6c4:	8b 15 60 30 1b c0    	mov    0xc01b3060,%edx
c010a6ca:	83 ec 08             	sub    $0x8,%esp
c010a6cd:	ff 75 08             	pushl  0x8(%ebp)
c010a6d0:	52                   	push   %edx
c010a6d1:	ff d0                	call   *%eax
c010a6d3:	83 c4 10             	add    $0x10,%esp
    }
    else {
        proc->need_resched = 1;
    }
}
c010a6d6:	eb 0a                	jmp    c010a6e2 <sched_class_proc_tick+0x36>
    if (proc != idleproc) {
        // cprintf("calling sched_class->proc_tick()...\n");
        sched_class->proc_tick(rq, proc);
    }
    else {
        proc->need_resched = 1;
c010a6d8:	8b 45 08             	mov    0x8(%ebp),%eax
c010a6db:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    }
}
c010a6e2:	90                   	nop
c010a6e3:	c9                   	leave  
c010a6e4:	c3                   	ret    

c010a6e5 <sched_init>:

static struct run_queue __rq;

void
sched_init(void) {
c010a6e5:	55                   	push   %ebp
c010a6e6:	89 e5                	mov    %esp,%ebp
c010a6e8:	83 ec 18             	sub    $0x18,%esp
c010a6eb:	c7 45 f4 54 30 1b c0 	movl   $0xc01b3054,-0xc(%ebp)
c010a6f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a6f5:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a6f8:	89 50 04             	mov    %edx,0x4(%eax)
c010a6fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a6fe:	8b 50 04             	mov    0x4(%eax),%edx
c010a701:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a704:	89 10                	mov    %edx,(%eax)
    list_init(&timer_list);

    sched_class = &default_sched_class;
c010a706:	c7 05 5c 30 1b c0 80 	movl   $0xc012ca80,0xc01b305c
c010a70d:	ca 12 c0 

    rq = &__rq;
c010a710:	c7 05 60 30 1b c0 64 	movl   $0xc01b3064,0xc01b3060
c010a717:	30 1b c0 
    rq->max_time_slice = MAX_TIME_SLICE;
c010a71a:	a1 60 30 1b c0       	mov    0xc01b3060,%eax
c010a71f:	c7 40 0c 05 00 00 00 	movl   $0x5,0xc(%eax)
    sched_class->init(rq);
c010a726:	a1 5c 30 1b c0       	mov    0xc01b305c,%eax
c010a72b:	8b 40 04             	mov    0x4(%eax),%eax
c010a72e:	8b 15 60 30 1b c0    	mov    0xc01b3060,%edx
c010a734:	83 ec 0c             	sub    $0xc,%esp
c010a737:	52                   	push   %edx
c010a738:	ff d0                	call   *%eax
c010a73a:	83 c4 10             	add    $0x10,%esp

    cprintf("sched class: %s\n", sched_class->name);
c010a73d:	a1 5c 30 1b c0       	mov    0xc01b305c,%eax
c010a742:	8b 00                	mov    (%eax),%eax
c010a744:	83 ec 08             	sub    $0x8,%esp
c010a747:	50                   	push   %eax
c010a748:	68 47 de 10 c0       	push   $0xc010de47
c010a74d:	e8 45 5b ff ff       	call   c0100297 <cprintf>
c010a752:	83 c4 10             	add    $0x10,%esp
}
c010a755:	90                   	nop
c010a756:	c9                   	leave  
c010a757:	c3                   	ret    

c010a758 <wakeup_proc>:

void
wakeup_proc(struct proc_struct *proc) {
c010a758:	55                   	push   %ebp
c010a759:	89 e5                	mov    %esp,%ebp
c010a75b:	83 ec 18             	sub    $0x18,%esp
    assert(proc->state != PROC_ZOMBIE);
c010a75e:	8b 45 08             	mov    0x8(%ebp),%eax
c010a761:	8b 00                	mov    (%eax),%eax
c010a763:	83 f8 03             	cmp    $0x3,%eax
c010a766:	75 16                	jne    c010a77e <wakeup_proc+0x26>
c010a768:	68 58 de 10 c0       	push   $0xc010de58
c010a76d:	68 73 de 10 c0       	push   $0xc010de73
c010a772:	6a 3d                	push   $0x3d
c010a774:	68 88 de 10 c0       	push   $0xc010de88
c010a779:	e8 7f 5c ff ff       	call   c01003fd <__panic>
    bool intr_flag;
    local_intr_save(intr_flag);
c010a77e:	e8 7c fe ff ff       	call   c010a5ff <__intr_save>
c010a783:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        if (proc->state != PROC_RUNNABLE) {
c010a786:	8b 45 08             	mov    0x8(%ebp),%eax
c010a789:	8b 00                	mov    (%eax),%eax
c010a78b:	83 f8 02             	cmp    $0x2,%eax
c010a78e:	74 2d                	je     c010a7bd <wakeup_proc+0x65>
            proc->state = PROC_RUNNABLE;
c010a790:	8b 45 08             	mov    0x8(%ebp),%eax
c010a793:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
            proc->wait_state = 0;
c010a799:	8b 45 08             	mov    0x8(%ebp),%eax
c010a79c:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
            if (proc != current) {
c010a7a3:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010a7a8:	39 45 08             	cmp    %eax,0x8(%ebp)
c010a7ab:	74 27                	je     c010a7d4 <wakeup_proc+0x7c>
                sched_class_enqueue(proc);
c010a7ad:	83 ec 0c             	sub    $0xc,%esp
c010a7b0:	ff 75 08             	pushl  0x8(%ebp)
c010a7b3:	e8 85 fe ff ff       	call   c010a63d <sched_class_enqueue>
c010a7b8:	83 c4 10             	add    $0x10,%esp
c010a7bb:	eb 17                	jmp    c010a7d4 <wakeup_proc+0x7c>
            }
        }
        else {
            warn("wakeup runnable process.\n");
c010a7bd:	83 ec 04             	sub    $0x4,%esp
c010a7c0:	68 9e de 10 c0       	push   $0xc010de9e
c010a7c5:	6a 49                	push   $0x49
c010a7c7:	68 88 de 10 c0       	push   $0xc010de88
c010a7cc:	e8 af 5c ff ff       	call   c0100480 <__warn>
c010a7d1:	83 c4 10             	add    $0x10,%esp
        }
    }
    local_intr_restore(intr_flag);
c010a7d4:	83 ec 0c             	sub    $0xc,%esp
c010a7d7:	ff 75 f4             	pushl  -0xc(%ebp)
c010a7da:	e8 4a fe ff ff       	call   c010a629 <__intr_restore>
c010a7df:	83 c4 10             	add    $0x10,%esp
}
c010a7e2:	90                   	nop
c010a7e3:	c9                   	leave  
c010a7e4:	c3                   	ret    

c010a7e5 <schedule>:

void
schedule(void) {
c010a7e5:	55                   	push   %ebp
c010a7e6:	89 e5                	mov    %esp,%ebp
c010a7e8:	83 ec 18             	sub    $0x18,%esp
    bool intr_flag;
    struct proc_struct *next;
    local_intr_save(intr_flag);
c010a7eb:	e8 0f fe ff ff       	call   c010a5ff <__intr_save>
c010a7f0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        current->need_resched = 0;
c010a7f3:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010a7f8:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
        if (current->state == PROC_RUNNABLE) {
c010a7ff:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010a804:	8b 00                	mov    (%eax),%eax
c010a806:	83 f8 02             	cmp    $0x2,%eax
c010a809:	75 11                	jne    c010a81c <schedule+0x37>
            sched_class_enqueue(current);
c010a80b:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010a810:	83 ec 0c             	sub    $0xc,%esp
c010a813:	50                   	push   %eax
c010a814:	e8 24 fe ff ff       	call   c010a63d <sched_class_enqueue>
c010a819:	83 c4 10             	add    $0x10,%esp
        }
        if ((next = sched_class_pick_next()) != NULL) {
c010a81c:	e8 6c fe ff ff       	call   c010a68d <sched_class_pick_next>
c010a821:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a824:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a828:	74 0e                	je     c010a838 <schedule+0x53>
            sched_class_dequeue(next);
c010a82a:	83 ec 0c             	sub    $0xc,%esp
c010a82d:	ff 75 f4             	pushl  -0xc(%ebp)
c010a830:	e8 35 fe ff ff       	call   c010a66a <sched_class_dequeue>
c010a835:	83 c4 10             	add    $0x10,%esp
        }
        if (next == NULL) {
c010a838:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a83c:	75 08                	jne    c010a846 <schedule+0x61>
            next = idleproc;
c010a83e:	a1 20 10 1b c0       	mov    0xc01b1020,%eax
c010a843:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        next->runs ++;
c010a846:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a849:	8b 40 08             	mov    0x8(%eax),%eax
c010a84c:	8d 50 01             	lea    0x1(%eax),%edx
c010a84f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a852:	89 50 08             	mov    %edx,0x8(%eax)
        if (next != current) {
c010a855:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010a85a:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010a85d:	74 0e                	je     c010a86d <schedule+0x88>
            proc_run(next);
c010a85f:	83 ec 0c             	sub    $0xc,%esp
c010a862:	ff 75 f4             	pushl  -0xc(%ebp)
c010a865:	e8 cb e8 ff ff       	call   c0109135 <proc_run>
c010a86a:	83 c4 10             	add    $0x10,%esp
        }
    }
    local_intr_restore(intr_flag);
c010a86d:	83 ec 0c             	sub    $0xc,%esp
c010a870:	ff 75 f0             	pushl  -0x10(%ebp)
c010a873:	e8 b1 fd ff ff       	call   c010a629 <__intr_restore>
c010a878:	83 c4 10             	add    $0x10,%esp
}
c010a87b:	90                   	nop
c010a87c:	c9                   	leave  
c010a87d:	c3                   	ret    

c010a87e <skew_heap_merge>:
}

static inline skew_heap_entry_t *
skew_heap_merge(skew_heap_entry_t *a, skew_heap_entry_t *b,
                compare_f comp)
{
c010a87e:	55                   	push   %ebp
c010a87f:	89 e5                	mov    %esp,%ebp
c010a881:	83 ec 18             	sub    $0x18,%esp
     if (a == NULL) return b;
c010a884:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a888:	75 08                	jne    c010a892 <skew_heap_merge+0x14>
c010a88a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a88d:	e9 b4 00 00 00       	jmp    c010a946 <skew_heap_merge+0xc8>
     else if (b == NULL) return a;
c010a892:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010a896:	75 08                	jne    c010a8a0 <skew_heap_merge+0x22>
c010a898:	8b 45 08             	mov    0x8(%ebp),%eax
c010a89b:	e9 a6 00 00 00       	jmp    c010a946 <skew_heap_merge+0xc8>
     
     skew_heap_entry_t *l, *r;
     if (comp(a, b) == -1)
c010a8a0:	83 ec 08             	sub    $0x8,%esp
c010a8a3:	ff 75 0c             	pushl  0xc(%ebp)
c010a8a6:	ff 75 08             	pushl  0x8(%ebp)
c010a8a9:	8b 45 10             	mov    0x10(%ebp),%eax
c010a8ac:	ff d0                	call   *%eax
c010a8ae:	83 c4 10             	add    $0x10,%esp
c010a8b1:	83 f8 ff             	cmp    $0xffffffff,%eax
c010a8b4:	75 49                	jne    c010a8ff <skew_heap_merge+0x81>
     {
          r = a->left;
c010a8b6:	8b 45 08             	mov    0x8(%ebp),%eax
c010a8b9:	8b 40 04             	mov    0x4(%eax),%eax
c010a8bc:	89 45 f4             	mov    %eax,-0xc(%ebp)
          l = skew_heap_merge(a->right, b, comp);
c010a8bf:	8b 45 08             	mov    0x8(%ebp),%eax
c010a8c2:	8b 40 08             	mov    0x8(%eax),%eax
c010a8c5:	83 ec 04             	sub    $0x4,%esp
c010a8c8:	ff 75 10             	pushl  0x10(%ebp)
c010a8cb:	ff 75 0c             	pushl  0xc(%ebp)
c010a8ce:	50                   	push   %eax
c010a8cf:	e8 aa ff ff ff       	call   c010a87e <skew_heap_merge>
c010a8d4:	83 c4 10             	add    $0x10,%esp
c010a8d7:	89 45 f0             	mov    %eax,-0x10(%ebp)
          
          a->left = l;
c010a8da:	8b 45 08             	mov    0x8(%ebp),%eax
c010a8dd:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010a8e0:	89 50 04             	mov    %edx,0x4(%eax)
          a->right = r;
c010a8e3:	8b 45 08             	mov    0x8(%ebp),%eax
c010a8e6:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a8e9:	89 50 08             	mov    %edx,0x8(%eax)
          if (l) l->parent = a;
c010a8ec:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010a8f0:	74 08                	je     c010a8fa <skew_heap_merge+0x7c>
c010a8f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a8f5:	8b 55 08             	mov    0x8(%ebp),%edx
c010a8f8:	89 10                	mov    %edx,(%eax)

          return a;
c010a8fa:	8b 45 08             	mov    0x8(%ebp),%eax
c010a8fd:	eb 47                	jmp    c010a946 <skew_heap_merge+0xc8>
     }
     else
     {
          r = b->left;
c010a8ff:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a902:	8b 40 04             	mov    0x4(%eax),%eax
c010a905:	89 45 f4             	mov    %eax,-0xc(%ebp)
          l = skew_heap_merge(a, b->right, comp);
c010a908:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a90b:	8b 40 08             	mov    0x8(%eax),%eax
c010a90e:	83 ec 04             	sub    $0x4,%esp
c010a911:	ff 75 10             	pushl  0x10(%ebp)
c010a914:	50                   	push   %eax
c010a915:	ff 75 08             	pushl  0x8(%ebp)
c010a918:	e8 61 ff ff ff       	call   c010a87e <skew_heap_merge>
c010a91d:	83 c4 10             	add    $0x10,%esp
c010a920:	89 45 f0             	mov    %eax,-0x10(%ebp)
          
          b->left = l;
c010a923:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a926:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010a929:	89 50 04             	mov    %edx,0x4(%eax)
          b->right = r;
c010a92c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a92f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a932:	89 50 08             	mov    %edx,0x8(%eax)
          if (l) l->parent = b;
c010a935:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010a939:	74 08                	je     c010a943 <skew_heap_merge+0xc5>
c010a93b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a93e:	8b 55 0c             	mov    0xc(%ebp),%edx
c010a941:	89 10                	mov    %edx,(%eax)

          return b;
c010a943:	8b 45 0c             	mov    0xc(%ebp),%eax
     }
}
c010a946:	c9                   	leave  
c010a947:	c3                   	ret    

c010a948 <proc_stride_comp_f>:

/* The compare function for two skew_heap_node_t's and the
 * corresponding procs*/
static int
proc_stride_comp_f(void *a, void *b)
{
c010a948:	55                   	push   %ebp
c010a949:	89 e5                	mov    %esp,%ebp
c010a94b:	83 ec 10             	sub    $0x10,%esp
     struct proc_struct *p = le2proc(a, lab6_run_pool);
c010a94e:	8b 45 08             	mov    0x8(%ebp),%eax
c010a951:	2d 8c 00 00 00       	sub    $0x8c,%eax
c010a956:	89 45 fc             	mov    %eax,-0x4(%ebp)
     struct proc_struct *q = le2proc(b, lab6_run_pool);
c010a959:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a95c:	2d 8c 00 00 00       	sub    $0x8c,%eax
c010a961:	89 45 f8             	mov    %eax,-0x8(%ebp)
     int32_t c = p->lab6_stride - q->lab6_stride;
c010a964:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a967:	8b 90 98 00 00 00    	mov    0x98(%eax),%edx
c010a96d:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010a970:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010a976:	29 c2                	sub    %eax,%edx
c010a978:	89 d0                	mov    %edx,%eax
c010a97a:	89 45 f4             	mov    %eax,-0xc(%ebp)
     if (c > 0) return 1;
c010a97d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a981:	7e 07                	jle    c010a98a <proc_stride_comp_f+0x42>
c010a983:	b8 01 00 00 00       	mov    $0x1,%eax
c010a988:	eb 12                	jmp    c010a99c <proc_stride_comp_f+0x54>
     else if (c == 0) return 0;
c010a98a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a98e:	75 07                	jne    c010a997 <proc_stride_comp_f+0x4f>
c010a990:	b8 00 00 00 00       	mov    $0x0,%eax
c010a995:	eb 05                	jmp    c010a99c <proc_stride_comp_f+0x54>
     else return -1;
c010a997:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
c010a99c:	c9                   	leave  
c010a99d:	c3                   	ret    

c010a99e <stride_init>:
 *   - max_time_slice: no need here, the variable would be assigned by the caller.
 *
 * hint: see libs/list.h for routines of the list structures.
 */
static void
stride_init(struct run_queue *rq) {
c010a99e:	55                   	push   %ebp
c010a99f:	89 e5                	mov    %esp,%ebp
c010a9a1:	83 ec 10             	sub    $0x10,%esp
      * (1) init the ready process list: rq->run_list
      * (2) init the run pool: rq->lab6_run_pool
      * (3) set number of process: rq->proc_num to 0       
      */
    // (1) init the ready process list: rq->run_list
    list_init(&(rq->run_list));
c010a9a4:	8b 45 08             	mov    0x8(%ebp),%eax
c010a9a7:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010a9aa:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a9ad:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010a9b0:	89 50 04             	mov    %edx,0x4(%eax)
c010a9b3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a9b6:	8b 50 04             	mov    0x4(%eax),%edx
c010a9b9:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a9bc:	89 10                	mov    %edx,(%eax)
    // (2) init the run pool: rq->lab6_run_pool
    rq->lab6_run_pool = NULL;
c010a9be:	8b 45 08             	mov    0x8(%ebp),%eax
c010a9c1:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
    //(3) set number of process: rq->proc_num to 0 
    rq->proc_num = 0;
c010a9c8:	8b 45 08             	mov    0x8(%ebp),%eax
c010a9cb:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
c010a9d2:	90                   	nop
c010a9d3:	c9                   	leave  
c010a9d4:	c3                   	ret    

c010a9d5 <stride_enqueue>:
 * 
 * hint: see libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static void
stride_enqueue(struct run_queue *rq, struct proc_struct *proc) {
c010a9d5:	55                   	push   %ebp
c010a9d6:	89 e5                	mov    %esp,%ebp
c010a9d8:	83 ec 18             	sub    $0x18,%esp
      * (2) recalculate proc->time_slice
      * (3) set proc->rq pointer to rq
      * (4) increase rq->proc_num
      */
    // (1) insert the proc into rq correctly
    rq->lab6_run_pool = skew_heap_insert(rq->lab6_run_pool, &(proc->lab6_run_pool), (compare_f)proc_stride_comp_f);
c010a9db:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a9de:	8d 90 8c 00 00 00    	lea    0x8c(%eax),%edx
c010a9e4:	8b 45 08             	mov    0x8(%ebp),%eax
c010a9e7:	8b 40 10             	mov    0x10(%eax),%eax
c010a9ea:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a9ed:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010a9f0:	c7 45 ec 48 a9 10 c0 	movl   $0xc010a948,-0x14(%ebp)
c010a9f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a9fa:	89 45 e8             	mov    %eax,-0x18(%ebp)
     compare_f comp) __attribute__((always_inline));

static inline void
skew_heap_init(skew_heap_entry_t *a)
{
     a->left = a->right = a->parent = NULL;
c010a9fd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010aa00:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c010aa06:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010aa09:	8b 10                	mov    (%eax),%edx
c010aa0b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010aa0e:	89 50 08             	mov    %edx,0x8(%eax)
c010aa11:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010aa14:	8b 50 08             	mov    0x8(%eax),%edx
c010aa17:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010aa1a:	89 50 04             	mov    %edx,0x4(%eax)
static inline skew_heap_entry_t *
skew_heap_insert(skew_heap_entry_t *a, skew_heap_entry_t *b,
                 compare_f comp)
{
     skew_heap_init(b);
     return skew_heap_merge(a, b, comp);
c010aa1d:	83 ec 04             	sub    $0x4,%esp
c010aa20:	ff 75 ec             	pushl  -0x14(%ebp)
c010aa23:	ff 75 f0             	pushl  -0x10(%ebp)
c010aa26:	ff 75 f4             	pushl  -0xc(%ebp)
c010aa29:	e8 50 fe ff ff       	call   c010a87e <skew_heap_merge>
c010aa2e:	83 c4 10             	add    $0x10,%esp
c010aa31:	89 c2                	mov    %eax,%edx
c010aa33:	8b 45 08             	mov    0x8(%ebp),%eax
c010aa36:	89 50 10             	mov    %edx,0x10(%eax)
    // (2) recalculate proc->time_slice
    if (proc->time_slice == 0 || proc->time_slice > rq->max_time_slice) {
c010aa39:	8b 45 0c             	mov    0xc(%ebp),%eax
c010aa3c:	8b 80 88 00 00 00    	mov    0x88(%eax),%eax
c010aa42:	85 c0                	test   %eax,%eax
c010aa44:	74 13                	je     c010aa59 <stride_enqueue+0x84>
c010aa46:	8b 45 0c             	mov    0xc(%ebp),%eax
c010aa49:	8b 90 88 00 00 00    	mov    0x88(%eax),%edx
c010aa4f:	8b 45 08             	mov    0x8(%ebp),%eax
c010aa52:	8b 40 0c             	mov    0xc(%eax),%eax
c010aa55:	39 c2                	cmp    %eax,%edx
c010aa57:	7e 0f                	jle    c010aa68 <stride_enqueue+0x93>
        proc->time_slice = rq->max_time_slice;
c010aa59:	8b 45 08             	mov    0x8(%ebp),%eax
c010aa5c:	8b 50 0c             	mov    0xc(%eax),%edx
c010aa5f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010aa62:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
    }
    // (3) set proc->rq pointer to rq
    proc->rq = rq;
c010aa68:	8b 45 0c             	mov    0xc(%ebp),%eax
c010aa6b:	8b 55 08             	mov    0x8(%ebp),%edx
c010aa6e:	89 50 7c             	mov    %edx,0x7c(%eax)
    // (4) increase rq->proc_num
    rq->proc_num ++;
c010aa71:	8b 45 08             	mov    0x8(%ebp),%eax
c010aa74:	8b 40 08             	mov    0x8(%eax),%eax
c010aa77:	8d 50 01             	lea    0x1(%eax),%edx
c010aa7a:	8b 45 08             	mov    0x8(%ebp),%eax
c010aa7d:	89 50 08             	mov    %edx,0x8(%eax)
}
c010aa80:	90                   	nop
c010aa81:	c9                   	leave  
c010aa82:	c3                   	ret    

c010aa83 <stride_dequeue>:
 *
 * hint: see libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static void
stride_dequeue(struct run_queue *rq, struct proc_struct *proc) {
c010aa83:	55                   	push   %ebp
c010aa84:	89 e5                	mov    %esp,%ebp
c010aa86:	83 ec 28             	sub    $0x28,%esp
      * NOTICE: you can use skew_heap or list. Important functions
      *         skew_heap_remove: remove a entry from skew_heap
      *         list_del_init: remove a entry from the  list
      */
    // (1) remove the proc from rq correctly
    rq->lab6_run_pool = skew_heap_remove(rq->lab6_run_pool, &(proc->lab6_run_pool), (compare_f)proc_stride_comp_f);
c010aa89:	8b 45 0c             	mov    0xc(%ebp),%eax
c010aa8c:	8d 90 8c 00 00 00    	lea    0x8c(%eax),%edx
c010aa92:	8b 45 08             	mov    0x8(%ebp),%eax
c010aa95:	8b 40 10             	mov    0x10(%eax),%eax
c010aa98:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010aa9b:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010aa9e:	c7 45 ec 48 a9 10 c0 	movl   $0xc010a948,-0x14(%ebp)

static inline skew_heap_entry_t *
skew_heap_remove(skew_heap_entry_t *a, skew_heap_entry_t *b,
                 compare_f comp)
{
     skew_heap_entry_t *p   = b->parent;
c010aaa5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aaa8:	8b 00                	mov    (%eax),%eax
c010aaaa:	89 45 e8             	mov    %eax,-0x18(%ebp)
     skew_heap_entry_t *rep = skew_heap_merge(b->left, b->right, comp);
c010aaad:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aab0:	8b 50 08             	mov    0x8(%eax),%edx
c010aab3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aab6:	8b 40 04             	mov    0x4(%eax),%eax
c010aab9:	83 ec 04             	sub    $0x4,%esp
c010aabc:	ff 75 ec             	pushl  -0x14(%ebp)
c010aabf:	52                   	push   %edx
c010aac0:	50                   	push   %eax
c010aac1:	e8 b8 fd ff ff       	call   c010a87e <skew_heap_merge>
c010aac6:	83 c4 10             	add    $0x10,%esp
c010aac9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
     if (rep) rep->parent = p;
c010aacc:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010aad0:	74 08                	je     c010aada <stride_dequeue+0x57>
c010aad2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010aad5:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010aad8:	89 10                	mov    %edx,(%eax)
     
     if (p)
c010aada:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010aade:	74 24                	je     c010ab04 <stride_dequeue+0x81>
     {
          if (p->left == b)
c010aae0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010aae3:	8b 40 04             	mov    0x4(%eax),%eax
c010aae6:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010aae9:	75 0b                	jne    c010aaf6 <stride_dequeue+0x73>
               p->left = rep;
c010aaeb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010aaee:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010aaf1:	89 50 04             	mov    %edx,0x4(%eax)
c010aaf4:	eb 09                	jmp    c010aaff <stride_dequeue+0x7c>
          else p->right = rep;
c010aaf6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010aaf9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010aafc:	89 50 08             	mov    %edx,0x8(%eax)
          return a;
c010aaff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ab02:	eb 03                	jmp    c010ab07 <stride_dequeue+0x84>
     }
     else return rep;
c010ab04:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ab07:	8b 55 08             	mov    0x8(%ebp),%edx
c010ab0a:	89 42 10             	mov    %eax,0x10(%edx)
    rq->proc_num --;
c010ab0d:	8b 45 08             	mov    0x8(%ebp),%eax
c010ab10:	8b 40 08             	mov    0x8(%eax),%eax
c010ab13:	8d 50 ff             	lea    -0x1(%eax),%edx
c010ab16:	8b 45 08             	mov    0x8(%ebp),%eax
c010ab19:	89 50 08             	mov    %edx,0x8(%eax)
}
c010ab1c:	90                   	nop
c010ab1d:	c9                   	leave  
c010ab1e:	c3                   	ret    

c010ab1f <stride_pick_next>:
 *
 * hint: see libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static struct proc_struct *
stride_pick_next(struct run_queue *rq) {
c010ab1f:	55                   	push   %ebp
c010ab20:	89 e5                	mov    %esp,%ebp
c010ab22:	53                   	push   %ebx
c010ab23:	83 ec 10             	sub    $0x10,%esp
      * (3) return p
      */
    // (1) get a  proc_struct pointer p  with the minimum value of stride
    //        (1.1) If using skew_heap, we can use le2proc get the p from rq->lab6_run_poll
    // cprintf("in pick next()...\n");
    if (rq->lab6_run_pool == NULL) {
c010ab26:	8b 45 08             	mov    0x8(%ebp),%eax
c010ab29:	8b 40 10             	mov    0x10(%eax),%eax
c010ab2c:	85 c0                	test   %eax,%eax
c010ab2e:	75 07                	jne    c010ab37 <stride_pick_next+0x18>
        return NULL;
c010ab30:	b8 00 00 00 00       	mov    $0x0,%eax
c010ab35:	eb 3b                	jmp    c010ab72 <stride_pick_next+0x53>
    }
    struct proc_struct * proc = le2proc(rq->lab6_run_pool, lab6_run_pool);
c010ab37:	8b 45 08             	mov    0x8(%ebp),%eax
c010ab3a:	8b 40 10             	mov    0x10(%eax),%eax
c010ab3d:	2d 8c 00 00 00       	sub    $0x8c,%eax
c010ab42:	89 45 f8             	mov    %eax,-0x8(%ebp)
    // (2) update p's stride value: p->lab6_stride
    proc->lab6_stride += BIG_STRIDE / proc->lab6_priority;
c010ab45:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010ab48:	8b 88 98 00 00 00    	mov    0x98(%eax),%ecx
c010ab4e:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010ab51:	8b 98 9c 00 00 00    	mov    0x9c(%eax),%ebx
c010ab57:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
c010ab5c:	ba 00 00 00 00       	mov    $0x0,%edx
c010ab61:	f7 f3                	div    %ebx
c010ab63:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c010ab66:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010ab69:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    // (3) return p
    // cprintf("next is %s\n", proc->name);
    return proc;
c010ab6f:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c010ab72:	83 c4 10             	add    $0x10,%esp
c010ab75:	5b                   	pop    %ebx
c010ab76:	5d                   	pop    %ebp
c010ab77:	c3                   	ret    

c010ab78 <stride_proc_tick>:
 * denotes the time slices left for current
 * process. proc->need_resched is the flag variable for process
 * switching.
 */
static void
stride_proc_tick(struct run_queue *rq, struct proc_struct *proc) {
c010ab78:	55                   	push   %ebp
c010ab79:	89 e5                	mov    %esp,%ebp
     /* LAB6: 2015010062 */
    if (proc->time_slice > 0) {
c010ab7b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ab7e:	8b 80 88 00 00 00    	mov    0x88(%eax),%eax
c010ab84:	85 c0                	test   %eax,%eax
c010ab86:	7e 15                	jle    c010ab9d <stride_proc_tick+0x25>
        proc->time_slice --;
c010ab88:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ab8b:	8b 80 88 00 00 00    	mov    0x88(%eax),%eax
c010ab91:	8d 50 ff             	lea    -0x1(%eax),%edx
c010ab94:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ab97:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
    }
    if (proc->time_slice == 0) {
c010ab9d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010aba0:	8b 80 88 00 00 00    	mov    0x88(%eax),%eax
c010aba6:	85 c0                	test   %eax,%eax
c010aba8:	75 0a                	jne    c010abb4 <stride_proc_tick+0x3c>
        proc->need_resched = 1;
c010abaa:	8b 45 0c             	mov    0xc(%ebp),%eax
c010abad:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    }
}
c010abb4:	90                   	nop
c010abb5:	5d                   	pop    %ebp
c010abb6:	c3                   	ret    

c010abb7 <sys_exit>:
#include <pmm.h>
#include <assert.h>
#include <clock.h>

static int
sys_exit(uint32_t arg[]) {
c010abb7:	55                   	push   %ebp
c010abb8:	89 e5                	mov    %esp,%ebp
c010abba:	83 ec 18             	sub    $0x18,%esp
    int error_code = (int)arg[0];
c010abbd:	8b 45 08             	mov    0x8(%ebp),%eax
c010abc0:	8b 00                	mov    (%eax),%eax
c010abc2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_exit(error_code);
c010abc5:	83 ec 0c             	sub    $0xc,%esp
c010abc8:	ff 75 f4             	pushl  -0xc(%ebp)
c010abcb:	e8 9b eb ff ff       	call   c010976b <do_exit>
c010abd0:	83 c4 10             	add    $0x10,%esp
}
c010abd3:	c9                   	leave  
c010abd4:	c3                   	ret    

c010abd5 <sys_fork>:

static int
sys_fork(uint32_t arg[]) {
c010abd5:	55                   	push   %ebp
c010abd6:	89 e5                	mov    %esp,%ebp
c010abd8:	83 ec 18             	sub    $0x18,%esp
    struct trapframe *tf = current->tf;
c010abdb:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010abe0:	8b 40 3c             	mov    0x3c(%eax),%eax
c010abe3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uintptr_t stack = tf->tf_esp;
c010abe6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010abe9:	8b 40 44             	mov    0x44(%eax),%eax
c010abec:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_fork(0, stack, tf);
c010abef:	83 ec 04             	sub    $0x4,%esp
c010abf2:	ff 75 f4             	pushl  -0xc(%ebp)
c010abf5:	ff 75 f0             	pushl  -0x10(%ebp)
c010abf8:	6a 00                	push   $0x0
c010abfa:	e8 41 ea ff ff       	call   c0109640 <do_fork>
c010abff:	83 c4 10             	add    $0x10,%esp
}
c010ac02:	c9                   	leave  
c010ac03:	c3                   	ret    

c010ac04 <sys_wait>:

static int
sys_wait(uint32_t arg[]) {
c010ac04:	55                   	push   %ebp
c010ac05:	89 e5                	mov    %esp,%ebp
c010ac07:	83 ec 18             	sub    $0x18,%esp
    int pid = (int)arg[0];
c010ac0a:	8b 45 08             	mov    0x8(%ebp),%eax
c010ac0d:	8b 00                	mov    (%eax),%eax
c010ac0f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int *store = (int *)arg[1];
c010ac12:	8b 45 08             	mov    0x8(%ebp),%eax
c010ac15:	83 c0 04             	add    $0x4,%eax
c010ac18:	8b 00                	mov    (%eax),%eax
c010ac1a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_wait(pid, store);
c010ac1d:	83 ec 08             	sub    $0x8,%esp
c010ac20:	ff 75 f0             	pushl  -0x10(%ebp)
c010ac23:	ff 75 f4             	pushl  -0xc(%ebp)
c010ac26:	e8 1c f4 ff ff       	call   c010a047 <do_wait>
c010ac2b:	83 c4 10             	add    $0x10,%esp
}
c010ac2e:	c9                   	leave  
c010ac2f:	c3                   	ret    

c010ac30 <sys_exec>:

static int
sys_exec(uint32_t arg[]) {
c010ac30:	55                   	push   %ebp
c010ac31:	89 e5                	mov    %esp,%ebp
c010ac33:	83 ec 18             	sub    $0x18,%esp
    const char *name = (const char *)arg[0];
c010ac36:	8b 45 08             	mov    0x8(%ebp),%eax
c010ac39:	8b 00                	mov    (%eax),%eax
c010ac3b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    size_t len = (size_t)arg[1];
c010ac3e:	8b 45 08             	mov    0x8(%ebp),%eax
c010ac41:	83 c0 04             	add    $0x4,%eax
c010ac44:	8b 00                	mov    (%eax),%eax
c010ac46:	89 45 f0             	mov    %eax,-0x10(%ebp)
    unsigned char *binary = (unsigned char *)arg[2];
c010ac49:	8b 45 08             	mov    0x8(%ebp),%eax
c010ac4c:	83 c0 08             	add    $0x8,%eax
c010ac4f:	8b 00                	mov    (%eax),%eax
c010ac51:	89 45 ec             	mov    %eax,-0x14(%ebp)
    size_t size = (size_t)arg[3];
c010ac54:	8b 45 08             	mov    0x8(%ebp),%eax
c010ac57:	83 c0 0c             	add    $0xc,%eax
c010ac5a:	8b 00                	mov    (%eax),%eax
c010ac5c:	89 45 e8             	mov    %eax,-0x18(%ebp)
    return do_execve(name, len, binary, size);
c010ac5f:	ff 75 e8             	pushl  -0x18(%ebp)
c010ac62:	ff 75 ec             	pushl  -0x14(%ebp)
c010ac65:	ff 75 f0             	pushl  -0x10(%ebp)
c010ac68:	ff 75 f4             	pushl  -0xc(%ebp)
c010ac6b:	e8 9f f2 ff ff       	call   c0109f0f <do_execve>
c010ac70:	83 c4 10             	add    $0x10,%esp
}
c010ac73:	c9                   	leave  
c010ac74:	c3                   	ret    

c010ac75 <sys_yield>:

static int
sys_yield(uint32_t arg[]) {
c010ac75:	55                   	push   %ebp
c010ac76:	89 e5                	mov    %esp,%ebp
c010ac78:	83 ec 08             	sub    $0x8,%esp
    return do_yield();
c010ac7b:	e8 b1 f3 ff ff       	call   c010a031 <do_yield>
}
c010ac80:	c9                   	leave  
c010ac81:	c3                   	ret    

c010ac82 <sys_kill>:

static int
sys_kill(uint32_t arg[]) {
c010ac82:	55                   	push   %ebp
c010ac83:	89 e5                	mov    %esp,%ebp
c010ac85:	83 ec 18             	sub    $0x18,%esp
    int pid = (int)arg[0];
c010ac88:	8b 45 08             	mov    0x8(%ebp),%eax
c010ac8b:	8b 00                	mov    (%eax),%eax
c010ac8d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_kill(pid);
c010ac90:	83 ec 0c             	sub    $0xc,%esp
c010ac93:	ff 75 f4             	pushl  -0xc(%ebp)
c010ac96:	e8 3a f5 ff ff       	call   c010a1d5 <do_kill>
c010ac9b:	83 c4 10             	add    $0x10,%esp
}
c010ac9e:	c9                   	leave  
c010ac9f:	c3                   	ret    

c010aca0 <sys_getpid>:

static int
sys_getpid(uint32_t arg[]) {
c010aca0:	55                   	push   %ebp
c010aca1:	89 e5                	mov    %esp,%ebp
    return current->pid;
c010aca3:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010aca8:	8b 40 04             	mov    0x4(%eax),%eax
}
c010acab:	5d                   	pop    %ebp
c010acac:	c3                   	ret    

c010acad <sys_putc>:

static int
sys_putc(uint32_t arg[]) {
c010acad:	55                   	push   %ebp
c010acae:	89 e5                	mov    %esp,%ebp
c010acb0:	83 ec 18             	sub    $0x18,%esp
    int c = (int)arg[0];
c010acb3:	8b 45 08             	mov    0x8(%ebp),%eax
c010acb6:	8b 00                	mov    (%eax),%eax
c010acb8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cputchar(c);
c010acbb:	83 ec 0c             	sub    $0xc,%esp
c010acbe:	ff 75 f4             	pushl  -0xc(%ebp)
c010acc1:	e8 f7 55 ff ff       	call   c01002bd <cputchar>
c010acc6:	83 c4 10             	add    $0x10,%esp
    return 0;
c010acc9:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010acce:	c9                   	leave  
c010accf:	c3                   	ret    

c010acd0 <sys_pgdir>:

static int
sys_pgdir(uint32_t arg[]) {
c010acd0:	55                   	push   %ebp
c010acd1:	89 e5                	mov    %esp,%ebp
c010acd3:	83 ec 08             	sub    $0x8,%esp
    print_pgdir();
c010acd6:	e8 3b db ff ff       	call   c0108816 <print_pgdir>
    return 0;
c010acdb:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ace0:	c9                   	leave  
c010ace1:	c3                   	ret    

c010ace2 <sys_gettime>:

static int
sys_gettime(uint32_t arg[]) {
c010ace2:	55                   	push   %ebp
c010ace3:	89 e5                	mov    %esp,%ebp
    return (int)ticks;
c010ace5:	a1 78 30 1b c0       	mov    0xc01b3078,%eax
}
c010acea:	5d                   	pop    %ebp
c010aceb:	c3                   	ret    

c010acec <sys_lab6_set_priority>:
static int
sys_lab6_set_priority(uint32_t arg[])
{
c010acec:	55                   	push   %ebp
c010aced:	89 e5                	mov    %esp,%ebp
c010acef:	83 ec 18             	sub    $0x18,%esp
    uint32_t priority = (uint32_t)arg[0];
c010acf2:	8b 45 08             	mov    0x8(%ebp),%eax
c010acf5:	8b 00                	mov    (%eax),%eax
c010acf7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    lab6_set_priority(priority);
c010acfa:	83 ec 0c             	sub    $0xc,%esp
c010acfd:	ff 75 f4             	pushl  -0xc(%ebp)
c010ad00:	e8 cf f8 ff ff       	call   c010a5d4 <lab6_set_priority>
c010ad05:	83 c4 10             	add    $0x10,%esp
    return 0;
c010ad08:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ad0d:	c9                   	leave  
c010ad0e:	c3                   	ret    

c010ad0f <syscall>:
};

#define NUM_SYSCALLS        ((sizeof(syscalls)) / (sizeof(syscalls[0])))

void
syscall(void) {
c010ad0f:	55                   	push   %ebp
c010ad10:	89 e5                	mov    %esp,%ebp
c010ad12:	83 ec 28             	sub    $0x28,%esp
    struct trapframe *tf = current->tf;
c010ad15:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010ad1a:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ad1d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t arg[5];
    int num = tf->tf_regs.reg_eax;
c010ad20:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ad23:	8b 40 1c             	mov    0x1c(%eax),%eax
c010ad26:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (num >= 0 && num < NUM_SYSCALLS) {
c010ad29:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010ad2d:	78 64                	js     c010ad93 <syscall+0x84>
c010ad2f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ad32:	3d ff 00 00 00       	cmp    $0xff,%eax
c010ad37:	77 5a                	ja     c010ad93 <syscall+0x84>
        if (syscalls[num] != NULL) {
c010ad39:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ad3c:	8b 04 85 a0 ca 12 c0 	mov    -0x3fed3560(,%eax,4),%eax
c010ad43:	85 c0                	test   %eax,%eax
c010ad45:	74 4c                	je     c010ad93 <syscall+0x84>
            arg[0] = tf->tf_regs.reg_edx;
c010ad47:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ad4a:	8b 40 14             	mov    0x14(%eax),%eax
c010ad4d:	89 45 dc             	mov    %eax,-0x24(%ebp)
            arg[1] = tf->tf_regs.reg_ecx;
c010ad50:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ad53:	8b 40 18             	mov    0x18(%eax),%eax
c010ad56:	89 45 e0             	mov    %eax,-0x20(%ebp)
            arg[2] = tf->tf_regs.reg_ebx;
c010ad59:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ad5c:	8b 40 10             	mov    0x10(%eax),%eax
c010ad5f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            arg[3] = tf->tf_regs.reg_edi;
c010ad62:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ad65:	8b 00                	mov    (%eax),%eax
c010ad67:	89 45 e8             	mov    %eax,-0x18(%ebp)
            arg[4] = tf->tf_regs.reg_esi;
c010ad6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ad6d:	8b 40 04             	mov    0x4(%eax),%eax
c010ad70:	89 45 ec             	mov    %eax,-0x14(%ebp)
            tf->tf_regs.reg_eax = syscalls[num](arg);
c010ad73:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ad76:	8b 04 85 a0 ca 12 c0 	mov    -0x3fed3560(,%eax,4),%eax
c010ad7d:	83 ec 0c             	sub    $0xc,%esp
c010ad80:	8d 55 dc             	lea    -0x24(%ebp),%edx
c010ad83:	52                   	push   %edx
c010ad84:	ff d0                	call   *%eax
c010ad86:	83 c4 10             	add    $0x10,%esp
c010ad89:	89 c2                	mov    %eax,%edx
c010ad8b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ad8e:	89 50 1c             	mov    %edx,0x1c(%eax)
            return ;
c010ad91:	eb 37                	jmp    c010adca <syscall+0xbb>
        }
    }
    print_trapframe(tf);
c010ad93:	83 ec 0c             	sub    $0xc,%esp
c010ad96:	ff 75 f4             	pushl  -0xc(%ebp)
c010ad99:	e8 74 76 ff ff       	call   c0102412 <print_trapframe>
c010ad9e:	83 c4 10             	add    $0x10,%esp
    panic("undefined syscall %d, pid = %d, name = %s.\n",
c010ada1:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010ada6:	8d 50 48             	lea    0x48(%eax),%edx
c010ada9:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010adae:	8b 40 04             	mov    0x4(%eax),%eax
c010adb1:	83 ec 08             	sub    $0x8,%esp
c010adb4:	52                   	push   %edx
c010adb5:	50                   	push   %eax
c010adb6:	ff 75 f0             	pushl  -0x10(%ebp)
c010adb9:	68 cc de 10 c0       	push   $0xc010decc
c010adbe:	6a 72                	push   $0x72
c010adc0:	68 f8 de 10 c0       	push   $0xc010def8
c010adc5:	e8 33 56 ff ff       	call   c01003fd <__panic>
            num, current->pid, current->name);
}
c010adca:	c9                   	leave  
c010adcb:	c3                   	ret    

c010adcc <strlen>:
 * @s:      the input string
 *
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
c010adcc:	55                   	push   %ebp
c010adcd:	89 e5                	mov    %esp,%ebp
c010adcf:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c010add2:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (*s ++ != '\0') {
c010add9:	eb 04                	jmp    c010addf <strlen+0x13>
        cnt ++;
c010addb:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
    size_t cnt = 0;
    while (*s ++ != '\0') {
c010addf:	8b 45 08             	mov    0x8(%ebp),%eax
c010ade2:	8d 50 01             	lea    0x1(%eax),%edx
c010ade5:	89 55 08             	mov    %edx,0x8(%ebp)
c010ade8:	0f b6 00             	movzbl (%eax),%eax
c010adeb:	84 c0                	test   %al,%al
c010aded:	75 ec                	jne    c010addb <strlen+0xf>
        cnt ++;
    }
    return cnt;
c010adef:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010adf2:	c9                   	leave  
c010adf3:	c3                   	ret    

c010adf4 <strnlen>:
 * The return value is strlen(s), if that is less than @len, or
 * @len if there is no '\0' character among the first @len characters
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
c010adf4:	55                   	push   %ebp
c010adf5:	89 e5                	mov    %esp,%ebp
c010adf7:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c010adfa:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (cnt < len && *s ++ != '\0') {
c010ae01:	eb 04                	jmp    c010ae07 <strnlen+0x13>
        cnt ++;
c010ae03:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
    size_t cnt = 0;
    while (cnt < len && *s ++ != '\0') {
c010ae07:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010ae0a:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010ae0d:	73 10                	jae    c010ae1f <strnlen+0x2b>
c010ae0f:	8b 45 08             	mov    0x8(%ebp),%eax
c010ae12:	8d 50 01             	lea    0x1(%eax),%edx
c010ae15:	89 55 08             	mov    %edx,0x8(%ebp)
c010ae18:	0f b6 00             	movzbl (%eax),%eax
c010ae1b:	84 c0                	test   %al,%al
c010ae1d:	75 e4                	jne    c010ae03 <strnlen+0xf>
        cnt ++;
    }
    return cnt;
c010ae1f:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010ae22:	c9                   	leave  
c010ae23:	c3                   	ret    

c010ae24 <strcpy>:
 * To avoid overflows, the size of array pointed by @dst should be long enough to
 * contain the same string as @src (including the terminating null character), and
 * should not overlap in memory with @src.
 * */
char *
strcpy(char *dst, const char *src) {
c010ae24:	55                   	push   %ebp
c010ae25:	89 e5                	mov    %esp,%ebp
c010ae27:	57                   	push   %edi
c010ae28:	56                   	push   %esi
c010ae29:	83 ec 20             	sub    $0x20,%esp
c010ae2c:	8b 45 08             	mov    0x8(%ebp),%eax
c010ae2f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ae32:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ae35:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_STRCPY
#define __HAVE_ARCH_STRCPY
static inline char *
__strcpy(char *dst, const char *src) {
    int d0, d1, d2;
    asm volatile (
c010ae38:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010ae3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ae3e:	89 d1                	mov    %edx,%ecx
c010ae40:	89 c2                	mov    %eax,%edx
c010ae42:	89 ce                	mov    %ecx,%esi
c010ae44:	89 d7                	mov    %edx,%edi
c010ae46:	ac                   	lods   %ds:(%esi),%al
c010ae47:	aa                   	stos   %al,%es:(%edi)
c010ae48:	84 c0                	test   %al,%al
c010ae4a:	75 fa                	jne    c010ae46 <strcpy+0x22>
c010ae4c:	89 fa                	mov    %edi,%edx
c010ae4e:	89 f1                	mov    %esi,%ecx
c010ae50:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c010ae53:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010ae56:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        "stosb;"
        "testb %%al, %%al;"
        "jne 1b;"
        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
        : "0" (src), "1" (dst) : "memory");
    return dst;
c010ae59:	8b 45 f4             	mov    -0xc(%ebp),%eax
#ifdef __HAVE_ARCH_STRCPY
    return __strcpy(dst, src);
c010ae5c:	90                   	nop
    char *p = dst;
    while ((*p ++ = *src ++) != '\0')
        /* nothing */;
    return dst;
#endif /* __HAVE_ARCH_STRCPY */
}
c010ae5d:	83 c4 20             	add    $0x20,%esp
c010ae60:	5e                   	pop    %esi
c010ae61:	5f                   	pop    %edi
c010ae62:	5d                   	pop    %ebp
c010ae63:	c3                   	ret    

c010ae64 <strncpy>:
 * @len:    maximum number of characters to be copied from @src
 *
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
c010ae64:	55                   	push   %ebp
c010ae65:	89 e5                	mov    %esp,%ebp
c010ae67:	83 ec 10             	sub    $0x10,%esp
    char *p = dst;
c010ae6a:	8b 45 08             	mov    0x8(%ebp),%eax
c010ae6d:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (len > 0) {
c010ae70:	eb 21                	jmp    c010ae93 <strncpy+0x2f>
        if ((*p = *src) != '\0') {
c010ae72:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ae75:	0f b6 10             	movzbl (%eax),%edx
c010ae78:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010ae7b:	88 10                	mov    %dl,(%eax)
c010ae7d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010ae80:	0f b6 00             	movzbl (%eax),%eax
c010ae83:	84 c0                	test   %al,%al
c010ae85:	74 04                	je     c010ae8b <strncpy+0x27>
            src ++;
c010ae87:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
        }
        p ++, len --;
c010ae8b:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010ae8f:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
    char *p = dst;
    while (len > 0) {
c010ae93:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010ae97:	75 d9                	jne    c010ae72 <strncpy+0xe>
        if ((*p = *src) != '\0') {
            src ++;
        }
        p ++, len --;
    }
    return dst;
c010ae99:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010ae9c:	c9                   	leave  
c010ae9d:	c3                   	ret    

c010ae9e <strcmp>:
 * - A value greater than zero indicates that the first character that does
 *   not match has a greater value in @s1 than in @s2;
 * - And a value less than zero indicates the opposite.
 * */
int
strcmp(const char *s1, const char *s2) {
c010ae9e:	55                   	push   %ebp
c010ae9f:	89 e5                	mov    %esp,%ebp
c010aea1:	57                   	push   %edi
c010aea2:	56                   	push   %esi
c010aea3:	83 ec 20             	sub    $0x20,%esp
c010aea6:	8b 45 08             	mov    0x8(%ebp),%eax
c010aea9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010aeac:	8b 45 0c             	mov    0xc(%ebp),%eax
c010aeaf:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_STRCMP
#define __HAVE_ARCH_STRCMP
static inline int
__strcmp(const char *s1, const char *s2) {
    int d0, d1, ret;
    asm volatile (
c010aeb2:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010aeb5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aeb8:	89 d1                	mov    %edx,%ecx
c010aeba:	89 c2                	mov    %eax,%edx
c010aebc:	89 ce                	mov    %ecx,%esi
c010aebe:	89 d7                	mov    %edx,%edi
c010aec0:	ac                   	lods   %ds:(%esi),%al
c010aec1:	ae                   	scas   %es:(%edi),%al
c010aec2:	75 08                	jne    c010aecc <strcmp+0x2e>
c010aec4:	84 c0                	test   %al,%al
c010aec6:	75 f8                	jne    c010aec0 <strcmp+0x22>
c010aec8:	31 c0                	xor    %eax,%eax
c010aeca:	eb 04                	jmp    c010aed0 <strcmp+0x32>
c010aecc:	19 c0                	sbb    %eax,%eax
c010aece:	0c 01                	or     $0x1,%al
c010aed0:	89 fa                	mov    %edi,%edx
c010aed2:	89 f1                	mov    %esi,%ecx
c010aed4:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010aed7:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c010aeda:	89 55 e4             	mov    %edx,-0x1c(%ebp)
        "orb $1, %%al;"
        "3:"
        : "=a" (ret), "=&S" (d0), "=&D" (d1)
        : "1" (s1), "2" (s2)
        : "memory");
    return ret;
c010aedd:	8b 45 ec             	mov    -0x14(%ebp),%eax
#ifdef __HAVE_ARCH_STRCMP
    return __strcmp(s1, s2);
c010aee0:	90                   	nop
    while (*s1 != '\0' && *s1 == *s2) {
        s1 ++, s2 ++;
    }
    return (int)((unsigned char)*s1 - (unsigned char)*s2);
#endif /* __HAVE_ARCH_STRCMP */
}
c010aee1:	83 c4 20             	add    $0x20,%esp
c010aee4:	5e                   	pop    %esi
c010aee5:	5f                   	pop    %edi
c010aee6:	5d                   	pop    %ebp
c010aee7:	c3                   	ret    

c010aee8 <strncmp>:
 * they are equal to each other, it continues with the following pairs until
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
c010aee8:	55                   	push   %ebp
c010aee9:	89 e5                	mov    %esp,%ebp
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c010aeeb:	eb 0c                	jmp    c010aef9 <strncmp+0x11>
        n --, s1 ++, s2 ++;
c010aeed:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c010aef1:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010aef5:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c010aef9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010aefd:	74 1a                	je     c010af19 <strncmp+0x31>
c010aeff:	8b 45 08             	mov    0x8(%ebp),%eax
c010af02:	0f b6 00             	movzbl (%eax),%eax
c010af05:	84 c0                	test   %al,%al
c010af07:	74 10                	je     c010af19 <strncmp+0x31>
c010af09:	8b 45 08             	mov    0x8(%ebp),%eax
c010af0c:	0f b6 10             	movzbl (%eax),%edx
c010af0f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010af12:	0f b6 00             	movzbl (%eax),%eax
c010af15:	38 c2                	cmp    %al,%dl
c010af17:	74 d4                	je     c010aeed <strncmp+0x5>
        n --, s1 ++, s2 ++;
    }
    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
c010af19:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010af1d:	74 18                	je     c010af37 <strncmp+0x4f>
c010af1f:	8b 45 08             	mov    0x8(%ebp),%eax
c010af22:	0f b6 00             	movzbl (%eax),%eax
c010af25:	0f b6 d0             	movzbl %al,%edx
c010af28:	8b 45 0c             	mov    0xc(%ebp),%eax
c010af2b:	0f b6 00             	movzbl (%eax),%eax
c010af2e:	0f b6 c0             	movzbl %al,%eax
c010af31:	29 c2                	sub    %eax,%edx
c010af33:	89 d0                	mov    %edx,%eax
c010af35:	eb 05                	jmp    c010af3c <strncmp+0x54>
c010af37:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010af3c:	5d                   	pop    %ebp
c010af3d:	c3                   	ret    

c010af3e <strchr>:
 *
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
c010af3e:	55                   	push   %ebp
c010af3f:	89 e5                	mov    %esp,%ebp
c010af41:	83 ec 04             	sub    $0x4,%esp
c010af44:	8b 45 0c             	mov    0xc(%ebp),%eax
c010af47:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c010af4a:	eb 14                	jmp    c010af60 <strchr+0x22>
        if (*s == c) {
c010af4c:	8b 45 08             	mov    0x8(%ebp),%eax
c010af4f:	0f b6 00             	movzbl (%eax),%eax
c010af52:	3a 45 fc             	cmp    -0x4(%ebp),%al
c010af55:	75 05                	jne    c010af5c <strchr+0x1e>
            return (char *)s;
c010af57:	8b 45 08             	mov    0x8(%ebp),%eax
c010af5a:	eb 13                	jmp    c010af6f <strchr+0x31>
        }
        s ++;
c010af5c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
    while (*s != '\0') {
c010af60:	8b 45 08             	mov    0x8(%ebp),%eax
c010af63:	0f b6 00             	movzbl (%eax),%eax
c010af66:	84 c0                	test   %al,%al
c010af68:	75 e2                	jne    c010af4c <strchr+0xe>
        if (*s == c) {
            return (char *)s;
        }
        s ++;
    }
    return NULL;
c010af6a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010af6f:	c9                   	leave  
c010af70:	c3                   	ret    

c010af71 <strfind>:
 * The strfind() function is like strchr() except that if @c is
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
c010af71:	55                   	push   %ebp
c010af72:	89 e5                	mov    %esp,%ebp
c010af74:	83 ec 04             	sub    $0x4,%esp
c010af77:	8b 45 0c             	mov    0xc(%ebp),%eax
c010af7a:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c010af7d:	eb 0f                	jmp    c010af8e <strfind+0x1d>
        if (*s == c) {
c010af7f:	8b 45 08             	mov    0x8(%ebp),%eax
c010af82:	0f b6 00             	movzbl (%eax),%eax
c010af85:	3a 45 fc             	cmp    -0x4(%ebp),%al
c010af88:	74 10                	je     c010af9a <strfind+0x29>
            break;
        }
        s ++;
c010af8a:	83 45 08 01          	addl   $0x1,0x8(%ebp)
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
    while (*s != '\0') {
c010af8e:	8b 45 08             	mov    0x8(%ebp),%eax
c010af91:	0f b6 00             	movzbl (%eax),%eax
c010af94:	84 c0                	test   %al,%al
c010af96:	75 e7                	jne    c010af7f <strfind+0xe>
c010af98:	eb 01                	jmp    c010af9b <strfind+0x2a>
        if (*s == c) {
            break;
c010af9a:	90                   	nop
        }
        s ++;
    }
    return (char *)s;
c010af9b:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010af9e:	c9                   	leave  
c010af9f:	c3                   	ret    

c010afa0 <strtol>:
 * an optional "0x" or "0X" prefix.
 *
 * The strtol() function returns the converted integral number as a long int value.
 * */
long
strtol(const char *s, char **endptr, int base) {
c010afa0:	55                   	push   %ebp
c010afa1:	89 e5                	mov    %esp,%ebp
c010afa3:	83 ec 10             	sub    $0x10,%esp
    int neg = 0;
c010afa6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    long val = 0;
c010afad:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
c010afb4:	eb 04                	jmp    c010afba <strtol+0x1a>
        s ++;
c010afb6:	83 45 08 01          	addl   $0x1,0x8(%ebp)
strtol(const char *s, char **endptr, int base) {
    int neg = 0;
    long val = 0;

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
c010afba:	8b 45 08             	mov    0x8(%ebp),%eax
c010afbd:	0f b6 00             	movzbl (%eax),%eax
c010afc0:	3c 20                	cmp    $0x20,%al
c010afc2:	74 f2                	je     c010afb6 <strtol+0x16>
c010afc4:	8b 45 08             	mov    0x8(%ebp),%eax
c010afc7:	0f b6 00             	movzbl (%eax),%eax
c010afca:	3c 09                	cmp    $0x9,%al
c010afcc:	74 e8                	je     c010afb6 <strtol+0x16>
        s ++;
    }

    // plus/minus sign
    if (*s == '+') {
c010afce:	8b 45 08             	mov    0x8(%ebp),%eax
c010afd1:	0f b6 00             	movzbl (%eax),%eax
c010afd4:	3c 2b                	cmp    $0x2b,%al
c010afd6:	75 06                	jne    c010afde <strtol+0x3e>
        s ++;
c010afd8:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010afdc:	eb 15                	jmp    c010aff3 <strtol+0x53>
    }
    else if (*s == '-') {
c010afde:	8b 45 08             	mov    0x8(%ebp),%eax
c010afe1:	0f b6 00             	movzbl (%eax),%eax
c010afe4:	3c 2d                	cmp    $0x2d,%al
c010afe6:	75 0b                	jne    c010aff3 <strtol+0x53>
        s ++, neg = 1;
c010afe8:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010afec:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
    }

    // hex or octal base prefix
    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
c010aff3:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010aff7:	74 06                	je     c010afff <strtol+0x5f>
c010aff9:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
c010affd:	75 24                	jne    c010b023 <strtol+0x83>
c010afff:	8b 45 08             	mov    0x8(%ebp),%eax
c010b002:	0f b6 00             	movzbl (%eax),%eax
c010b005:	3c 30                	cmp    $0x30,%al
c010b007:	75 1a                	jne    c010b023 <strtol+0x83>
c010b009:	8b 45 08             	mov    0x8(%ebp),%eax
c010b00c:	83 c0 01             	add    $0x1,%eax
c010b00f:	0f b6 00             	movzbl (%eax),%eax
c010b012:	3c 78                	cmp    $0x78,%al
c010b014:	75 0d                	jne    c010b023 <strtol+0x83>
        s += 2, base = 16;
c010b016:	83 45 08 02          	addl   $0x2,0x8(%ebp)
c010b01a:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
c010b021:	eb 2a                	jmp    c010b04d <strtol+0xad>
    }
    else if (base == 0 && s[0] == '0') {
c010b023:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010b027:	75 17                	jne    c010b040 <strtol+0xa0>
c010b029:	8b 45 08             	mov    0x8(%ebp),%eax
c010b02c:	0f b6 00             	movzbl (%eax),%eax
c010b02f:	3c 30                	cmp    $0x30,%al
c010b031:	75 0d                	jne    c010b040 <strtol+0xa0>
        s ++, base = 8;
c010b033:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010b037:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
c010b03e:	eb 0d                	jmp    c010b04d <strtol+0xad>
    }
    else if (base == 0) {
c010b040:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010b044:	75 07                	jne    c010b04d <strtol+0xad>
        base = 10;
c010b046:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

    // digits
    while (1) {
        int dig;

        if (*s >= '0' && *s <= '9') {
c010b04d:	8b 45 08             	mov    0x8(%ebp),%eax
c010b050:	0f b6 00             	movzbl (%eax),%eax
c010b053:	3c 2f                	cmp    $0x2f,%al
c010b055:	7e 1b                	jle    c010b072 <strtol+0xd2>
c010b057:	8b 45 08             	mov    0x8(%ebp),%eax
c010b05a:	0f b6 00             	movzbl (%eax),%eax
c010b05d:	3c 39                	cmp    $0x39,%al
c010b05f:	7f 11                	jg     c010b072 <strtol+0xd2>
            dig = *s - '0';
c010b061:	8b 45 08             	mov    0x8(%ebp),%eax
c010b064:	0f b6 00             	movzbl (%eax),%eax
c010b067:	0f be c0             	movsbl %al,%eax
c010b06a:	83 e8 30             	sub    $0x30,%eax
c010b06d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b070:	eb 48                	jmp    c010b0ba <strtol+0x11a>
        }
        else if (*s >= 'a' && *s <= 'z') {
c010b072:	8b 45 08             	mov    0x8(%ebp),%eax
c010b075:	0f b6 00             	movzbl (%eax),%eax
c010b078:	3c 60                	cmp    $0x60,%al
c010b07a:	7e 1b                	jle    c010b097 <strtol+0xf7>
c010b07c:	8b 45 08             	mov    0x8(%ebp),%eax
c010b07f:	0f b6 00             	movzbl (%eax),%eax
c010b082:	3c 7a                	cmp    $0x7a,%al
c010b084:	7f 11                	jg     c010b097 <strtol+0xf7>
            dig = *s - 'a' + 10;
c010b086:	8b 45 08             	mov    0x8(%ebp),%eax
c010b089:	0f b6 00             	movzbl (%eax),%eax
c010b08c:	0f be c0             	movsbl %al,%eax
c010b08f:	83 e8 57             	sub    $0x57,%eax
c010b092:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b095:	eb 23                	jmp    c010b0ba <strtol+0x11a>
        }
        else if (*s >= 'A' && *s <= 'Z') {
c010b097:	8b 45 08             	mov    0x8(%ebp),%eax
c010b09a:	0f b6 00             	movzbl (%eax),%eax
c010b09d:	3c 40                	cmp    $0x40,%al
c010b09f:	7e 3c                	jle    c010b0dd <strtol+0x13d>
c010b0a1:	8b 45 08             	mov    0x8(%ebp),%eax
c010b0a4:	0f b6 00             	movzbl (%eax),%eax
c010b0a7:	3c 5a                	cmp    $0x5a,%al
c010b0a9:	7f 32                	jg     c010b0dd <strtol+0x13d>
            dig = *s - 'A' + 10;
c010b0ab:	8b 45 08             	mov    0x8(%ebp),%eax
c010b0ae:	0f b6 00             	movzbl (%eax),%eax
c010b0b1:	0f be c0             	movsbl %al,%eax
c010b0b4:	83 e8 37             	sub    $0x37,%eax
c010b0b7:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        else {
            break;
        }
        if (dig >= base) {
c010b0ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b0bd:	3b 45 10             	cmp    0x10(%ebp),%eax
c010b0c0:	7d 1a                	jge    c010b0dc <strtol+0x13c>
            break;
        }
        s ++, val = (val * base) + dig;
c010b0c2:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010b0c6:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010b0c9:	0f af 45 10          	imul   0x10(%ebp),%eax
c010b0cd:	89 c2                	mov    %eax,%edx
c010b0cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b0d2:	01 d0                	add    %edx,%eax
c010b0d4:	89 45 f8             	mov    %eax,-0x8(%ebp)
        // we don't properly detect overflow!
    }
c010b0d7:	e9 71 ff ff ff       	jmp    c010b04d <strtol+0xad>
        }
        else {
            break;
        }
        if (dig >= base) {
            break;
c010b0dc:	90                   	nop
        }
        s ++, val = (val * base) + dig;
        // we don't properly detect overflow!
    }

    if (endptr) {
c010b0dd:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010b0e1:	74 08                	je     c010b0eb <strtol+0x14b>
        *endptr = (char *) s;
c010b0e3:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b0e6:	8b 55 08             	mov    0x8(%ebp),%edx
c010b0e9:	89 10                	mov    %edx,(%eax)
    }
    return (neg ? -val : val);
c010b0eb:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c010b0ef:	74 07                	je     c010b0f8 <strtol+0x158>
c010b0f1:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010b0f4:	f7 d8                	neg    %eax
c010b0f6:	eb 03                	jmp    c010b0fb <strtol+0x15b>
c010b0f8:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c010b0fb:	c9                   	leave  
c010b0fc:	c3                   	ret    

c010b0fd <memset>:
 * @n:      number of bytes to be set to the value
 *
 * The memset() function returns @s.
 * */
void *
memset(void *s, char c, size_t n) {
c010b0fd:	55                   	push   %ebp
c010b0fe:	89 e5                	mov    %esp,%ebp
c010b100:	57                   	push   %edi
c010b101:	83 ec 24             	sub    $0x24,%esp
c010b104:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b107:	88 45 d8             	mov    %al,-0x28(%ebp)
#ifdef __HAVE_ARCH_MEMSET
    return __memset(s, c, n);
c010b10a:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
c010b10e:	8b 55 08             	mov    0x8(%ebp),%edx
c010b111:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010b114:	88 45 f7             	mov    %al,-0x9(%ebp)
c010b117:	8b 45 10             	mov    0x10(%ebp),%eax
c010b11a:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_MEMSET
#define __HAVE_ARCH_MEMSET
static inline void *
__memset(void *s, char c, size_t n) {
    int d0, d1;
    asm volatile (
c010b11d:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010b120:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c010b124:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010b127:	89 d7                	mov    %edx,%edi
c010b129:	f3 aa                	rep stos %al,%es:(%edi)
c010b12b:	89 fa                	mov    %edi,%edx
c010b12d:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c010b130:	89 55 e8             	mov    %edx,-0x18(%ebp)
        "rep; stosb;"
        : "=&c" (d0), "=&D" (d1)
        : "0" (n), "a" (c), "1" (s)
        : "memory");
    return s;
c010b133:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010b136:	90                   	nop
    while (n -- > 0) {
        *p ++ = c;
    }
    return s;
#endif /* __HAVE_ARCH_MEMSET */
}
c010b137:	83 c4 24             	add    $0x24,%esp
c010b13a:	5f                   	pop    %edi
c010b13b:	5d                   	pop    %ebp
c010b13c:	c3                   	ret    

c010b13d <memmove>:
 * @n:      number of bytes to copy
 *
 * The memmove() function returns @dst.
 * */
void *
memmove(void *dst, const void *src, size_t n) {
c010b13d:	55                   	push   %ebp
c010b13e:	89 e5                	mov    %esp,%ebp
c010b140:	57                   	push   %edi
c010b141:	56                   	push   %esi
c010b142:	53                   	push   %ebx
c010b143:	83 ec 30             	sub    $0x30,%esp
c010b146:	8b 45 08             	mov    0x8(%ebp),%eax
c010b149:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b14c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b14f:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010b152:	8b 45 10             	mov    0x10(%ebp),%eax
c010b155:	89 45 e8             	mov    %eax,-0x18(%ebp)

#ifndef __HAVE_ARCH_MEMMOVE
#define __HAVE_ARCH_MEMMOVE
static inline void *
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
c010b158:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b15b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010b15e:	73 42                	jae    c010b1a2 <memmove+0x65>
c010b160:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b163:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010b166:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b169:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010b16c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b16f:	89 45 dc             	mov    %eax,-0x24(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c010b172:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b175:	c1 e8 02             	shr    $0x2,%eax
c010b178:	89 c1                	mov    %eax,%ecx
#ifndef __HAVE_ARCH_MEMCPY
#define __HAVE_ARCH_MEMCPY
static inline void *
__memcpy(void *dst, const void *src, size_t n) {
    int d0, d1, d2;
    asm volatile (
c010b17a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010b17d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b180:	89 d7                	mov    %edx,%edi
c010b182:	89 c6                	mov    %eax,%esi
c010b184:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010b186:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c010b189:	83 e1 03             	and    $0x3,%ecx
c010b18c:	74 02                	je     c010b190 <memmove+0x53>
c010b18e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010b190:	89 f0                	mov    %esi,%eax
c010b192:	89 fa                	mov    %edi,%edx
c010b194:	89 4d d8             	mov    %ecx,-0x28(%ebp)
c010b197:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010b19a:	89 45 d0             	mov    %eax,-0x30(%ebp)
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
        : "memory");
    return dst;
c010b19d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
#ifdef __HAVE_ARCH_MEMMOVE
    return __memmove(dst, src, n);
c010b1a0:	eb 36                	jmp    c010b1d8 <memmove+0x9b>
    asm volatile (
        "std;"
        "rep; movsb;"
        "cld;"
        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
c010b1a2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b1a5:	8d 50 ff             	lea    -0x1(%eax),%edx
c010b1a8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b1ab:	01 c2                	add    %eax,%edx
c010b1ad:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b1b0:	8d 48 ff             	lea    -0x1(%eax),%ecx
c010b1b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b1b6:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
        return __memcpy(dst, src, n);
    }
    int d0, d1, d2;
    asm volatile (
c010b1b9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b1bc:	89 c1                	mov    %eax,%ecx
c010b1be:	89 d8                	mov    %ebx,%eax
c010b1c0:	89 d6                	mov    %edx,%esi
c010b1c2:	89 c7                	mov    %eax,%edi
c010b1c4:	fd                   	std    
c010b1c5:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010b1c7:	fc                   	cld    
c010b1c8:	89 f8                	mov    %edi,%eax
c010b1ca:	89 f2                	mov    %esi,%edx
c010b1cc:	89 4d cc             	mov    %ecx,-0x34(%ebp)
c010b1cf:	89 55 c8             	mov    %edx,-0x38(%ebp)
c010b1d2:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        "rep; movsb;"
        "cld;"
        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
        : "memory");
    return dst;
c010b1d5:	8b 45 f0             	mov    -0x10(%ebp),%eax
            *d ++ = *s ++;
        }
    }
    return dst;
#endif /* __HAVE_ARCH_MEMMOVE */
}
c010b1d8:	83 c4 30             	add    $0x30,%esp
c010b1db:	5b                   	pop    %ebx
c010b1dc:	5e                   	pop    %esi
c010b1dd:	5f                   	pop    %edi
c010b1de:	5d                   	pop    %ebp
c010b1df:	c3                   	ret    

c010b1e0 <memcpy>:
 * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
 * by both @src and @dst, should be at least @n bytes, and should not overlap
 * (for overlapping memory area, memmove is a safer approach).
 * */
void *
memcpy(void *dst, const void *src, size_t n) {
c010b1e0:	55                   	push   %ebp
c010b1e1:	89 e5                	mov    %esp,%ebp
c010b1e3:	57                   	push   %edi
c010b1e4:	56                   	push   %esi
c010b1e5:	83 ec 20             	sub    $0x20,%esp
c010b1e8:	8b 45 08             	mov    0x8(%ebp),%eax
c010b1eb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b1ee:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b1f1:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b1f4:	8b 45 10             	mov    0x10(%ebp),%eax
c010b1f7:	89 45 ec             	mov    %eax,-0x14(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c010b1fa:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b1fd:	c1 e8 02             	shr    $0x2,%eax
c010b200:	89 c1                	mov    %eax,%ecx
#ifndef __HAVE_ARCH_MEMCPY
#define __HAVE_ARCH_MEMCPY
static inline void *
__memcpy(void *dst, const void *src, size_t n) {
    int d0, d1, d2;
    asm volatile (
c010b202:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b205:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b208:	89 d7                	mov    %edx,%edi
c010b20a:	89 c6                	mov    %eax,%esi
c010b20c:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010b20e:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c010b211:	83 e1 03             	and    $0x3,%ecx
c010b214:	74 02                	je     c010b218 <memcpy+0x38>
c010b216:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010b218:	89 f0                	mov    %esi,%eax
c010b21a:	89 fa                	mov    %edi,%edx
c010b21c:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c010b21f:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c010b222:	89 45 e0             	mov    %eax,-0x20(%ebp)
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
        : "memory");
    return dst;
c010b225:	8b 45 f4             	mov    -0xc(%ebp),%eax
#ifdef __HAVE_ARCH_MEMCPY
    return __memcpy(dst, src, n);
c010b228:	90                   	nop
    while (n -- > 0) {
        *d ++ = *s ++;
    }
    return dst;
#endif /* __HAVE_ARCH_MEMCPY */
}
c010b229:	83 c4 20             	add    $0x20,%esp
c010b22c:	5e                   	pop    %esi
c010b22d:	5f                   	pop    %edi
c010b22e:	5d                   	pop    %ebp
c010b22f:	c3                   	ret    

c010b230 <memcmp>:
 *   match in both memory blocks has a greater value in @v1 than in @v2
 *   as if evaluated as unsigned char values;
 * - And a value less than zero indicates the opposite.
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
c010b230:	55                   	push   %ebp
c010b231:	89 e5                	mov    %esp,%ebp
c010b233:	83 ec 10             	sub    $0x10,%esp
    const char *s1 = (const char *)v1;
c010b236:	8b 45 08             	mov    0x8(%ebp),%eax
c010b239:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s2 = (const char *)v2;
c010b23c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b23f:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (n -- > 0) {
c010b242:	eb 30                	jmp    c010b274 <memcmp+0x44>
        if (*s1 != *s2) {
c010b244:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010b247:	0f b6 10             	movzbl (%eax),%edx
c010b24a:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010b24d:	0f b6 00             	movzbl (%eax),%eax
c010b250:	38 c2                	cmp    %al,%dl
c010b252:	74 18                	je     c010b26c <memcmp+0x3c>
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
c010b254:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010b257:	0f b6 00             	movzbl (%eax),%eax
c010b25a:	0f b6 d0             	movzbl %al,%edx
c010b25d:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010b260:	0f b6 00             	movzbl (%eax),%eax
c010b263:	0f b6 c0             	movzbl %al,%eax
c010b266:	29 c2                	sub    %eax,%edx
c010b268:	89 d0                	mov    %edx,%eax
c010b26a:	eb 1a                	jmp    c010b286 <memcmp+0x56>
        }
        s1 ++, s2 ++;
c010b26c:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010b270:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
    const char *s1 = (const char *)v1;
    const char *s2 = (const char *)v2;
    while (n -- > 0) {
c010b274:	8b 45 10             	mov    0x10(%ebp),%eax
c010b277:	8d 50 ff             	lea    -0x1(%eax),%edx
c010b27a:	89 55 10             	mov    %edx,0x10(%ebp)
c010b27d:	85 c0                	test   %eax,%eax
c010b27f:	75 c3                	jne    c010b244 <memcmp+0x14>
        if (*s1 != *s2) {
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
        }
        s1 ++, s2 ++;
    }
    return 0;
c010b281:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010b286:	c9                   	leave  
c010b287:	c3                   	ret    

c010b288 <printnum>:
 * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
 * @padc:       character that padded on the left if the actual width is less than @width
 * */
static void
printnum(void (*putch)(int, void*), void *putdat,
        unsigned long long num, unsigned base, int width, int padc) {
c010b288:	55                   	push   %ebp
c010b289:	89 e5                	mov    %esp,%ebp
c010b28b:	83 ec 38             	sub    $0x38,%esp
c010b28e:	8b 45 10             	mov    0x10(%ebp),%eax
c010b291:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010b294:	8b 45 14             	mov    0x14(%ebp),%eax
c010b297:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    unsigned long long result = num;
c010b29a:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b29d:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010b2a0:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010b2a3:	89 55 ec             	mov    %edx,-0x14(%ebp)
    unsigned mod = do_div(result, base);
c010b2a6:	8b 45 18             	mov    0x18(%ebp),%eax
c010b2a9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010b2ac:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b2af:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010b2b2:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010b2b5:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010b2b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b2bb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b2be:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b2c2:	74 1c                	je     c010b2e0 <printnum+0x58>
c010b2c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b2c7:	ba 00 00 00 00       	mov    $0x0,%edx
c010b2cc:	f7 75 e4             	divl   -0x1c(%ebp)
c010b2cf:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010b2d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b2d5:	ba 00 00 00 00       	mov    $0x0,%edx
c010b2da:	f7 75 e4             	divl   -0x1c(%ebp)
c010b2dd:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b2e0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b2e3:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b2e6:	f7 75 e4             	divl   -0x1c(%ebp)
c010b2e9:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010b2ec:	89 55 dc             	mov    %edx,-0x24(%ebp)
c010b2ef:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b2f2:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010b2f5:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010b2f8:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010b2fb:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b2fe:	89 45 d8             	mov    %eax,-0x28(%ebp)

    // first recursively print all preceding (more significant) digits
    if (num >= base) {
c010b301:	8b 45 18             	mov    0x18(%ebp),%eax
c010b304:	ba 00 00 00 00       	mov    $0x0,%edx
c010b309:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c010b30c:	77 41                	ja     c010b34f <printnum+0xc7>
c010b30e:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c010b311:	72 05                	jb     c010b318 <printnum+0x90>
c010b313:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c010b316:	77 37                	ja     c010b34f <printnum+0xc7>
        printnum(putch, putdat, result, base, width - 1, padc);
c010b318:	8b 45 1c             	mov    0x1c(%ebp),%eax
c010b31b:	83 e8 01             	sub    $0x1,%eax
c010b31e:	83 ec 04             	sub    $0x4,%esp
c010b321:	ff 75 20             	pushl  0x20(%ebp)
c010b324:	50                   	push   %eax
c010b325:	ff 75 18             	pushl  0x18(%ebp)
c010b328:	ff 75 ec             	pushl  -0x14(%ebp)
c010b32b:	ff 75 e8             	pushl  -0x18(%ebp)
c010b32e:	ff 75 0c             	pushl  0xc(%ebp)
c010b331:	ff 75 08             	pushl  0x8(%ebp)
c010b334:	e8 4f ff ff ff       	call   c010b288 <printnum>
c010b339:	83 c4 20             	add    $0x20,%esp
c010b33c:	eb 1b                	jmp    c010b359 <printnum+0xd1>
    } else {
        // print any needed pad characters before first digit
        while (-- width > 0)
            putch(padc, putdat);
c010b33e:	83 ec 08             	sub    $0x8,%esp
c010b341:	ff 75 0c             	pushl  0xc(%ebp)
c010b344:	ff 75 20             	pushl  0x20(%ebp)
c010b347:	8b 45 08             	mov    0x8(%ebp),%eax
c010b34a:	ff d0                	call   *%eax
c010b34c:	83 c4 10             	add    $0x10,%esp
    // first recursively print all preceding (more significant) digits
    if (num >= base) {
        printnum(putch, putdat, result, base, width - 1, padc);
    } else {
        // print any needed pad characters before first digit
        while (-- width > 0)
c010b34f:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
c010b353:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c010b357:	7f e5                	jg     c010b33e <printnum+0xb6>
            putch(padc, putdat);
    }
    // then print this (the least significant) digit
    putch("0123456789abcdef"[mod], putdat);
c010b359:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b35c:	05 24 e0 10 c0       	add    $0xc010e024,%eax
c010b361:	0f b6 00             	movzbl (%eax),%eax
c010b364:	0f be c0             	movsbl %al,%eax
c010b367:	83 ec 08             	sub    $0x8,%esp
c010b36a:	ff 75 0c             	pushl  0xc(%ebp)
c010b36d:	50                   	push   %eax
c010b36e:	8b 45 08             	mov    0x8(%ebp),%eax
c010b371:	ff d0                	call   *%eax
c010b373:	83 c4 10             	add    $0x10,%esp
}
c010b376:	90                   	nop
c010b377:	c9                   	leave  
c010b378:	c3                   	ret    

c010b379 <getuint>:
 * getuint - get an unsigned int of various possible sizes from a varargs list
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static unsigned long long
getuint(va_list *ap, int lflag) {
c010b379:	55                   	push   %ebp
c010b37a:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c010b37c:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c010b380:	7e 14                	jle    c010b396 <getuint+0x1d>
        return va_arg(*ap, unsigned long long);
c010b382:	8b 45 08             	mov    0x8(%ebp),%eax
c010b385:	8b 00                	mov    (%eax),%eax
c010b387:	8d 48 08             	lea    0x8(%eax),%ecx
c010b38a:	8b 55 08             	mov    0x8(%ebp),%edx
c010b38d:	89 0a                	mov    %ecx,(%edx)
c010b38f:	8b 50 04             	mov    0x4(%eax),%edx
c010b392:	8b 00                	mov    (%eax),%eax
c010b394:	eb 30                	jmp    c010b3c6 <getuint+0x4d>
    }
    else if (lflag) {
c010b396:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010b39a:	74 16                	je     c010b3b2 <getuint+0x39>
        return va_arg(*ap, unsigned long);
c010b39c:	8b 45 08             	mov    0x8(%ebp),%eax
c010b39f:	8b 00                	mov    (%eax),%eax
c010b3a1:	8d 48 04             	lea    0x4(%eax),%ecx
c010b3a4:	8b 55 08             	mov    0x8(%ebp),%edx
c010b3a7:	89 0a                	mov    %ecx,(%edx)
c010b3a9:	8b 00                	mov    (%eax),%eax
c010b3ab:	ba 00 00 00 00       	mov    $0x0,%edx
c010b3b0:	eb 14                	jmp    c010b3c6 <getuint+0x4d>
    }
    else {
        return va_arg(*ap, unsigned int);
c010b3b2:	8b 45 08             	mov    0x8(%ebp),%eax
c010b3b5:	8b 00                	mov    (%eax),%eax
c010b3b7:	8d 48 04             	lea    0x4(%eax),%ecx
c010b3ba:	8b 55 08             	mov    0x8(%ebp),%edx
c010b3bd:	89 0a                	mov    %ecx,(%edx)
c010b3bf:	8b 00                	mov    (%eax),%eax
c010b3c1:	ba 00 00 00 00       	mov    $0x0,%edx
    }
}
c010b3c6:	5d                   	pop    %ebp
c010b3c7:	c3                   	ret    

c010b3c8 <getint>:
 * getint - same as getuint but signed, we can't use getuint because of sign extension
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static long long
getint(va_list *ap, int lflag) {
c010b3c8:	55                   	push   %ebp
c010b3c9:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c010b3cb:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c010b3cf:	7e 14                	jle    c010b3e5 <getint+0x1d>
        return va_arg(*ap, long long);
c010b3d1:	8b 45 08             	mov    0x8(%ebp),%eax
c010b3d4:	8b 00                	mov    (%eax),%eax
c010b3d6:	8d 48 08             	lea    0x8(%eax),%ecx
c010b3d9:	8b 55 08             	mov    0x8(%ebp),%edx
c010b3dc:	89 0a                	mov    %ecx,(%edx)
c010b3de:	8b 50 04             	mov    0x4(%eax),%edx
c010b3e1:	8b 00                	mov    (%eax),%eax
c010b3e3:	eb 28                	jmp    c010b40d <getint+0x45>
    }
    else if (lflag) {
c010b3e5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010b3e9:	74 12                	je     c010b3fd <getint+0x35>
        return va_arg(*ap, long);
c010b3eb:	8b 45 08             	mov    0x8(%ebp),%eax
c010b3ee:	8b 00                	mov    (%eax),%eax
c010b3f0:	8d 48 04             	lea    0x4(%eax),%ecx
c010b3f3:	8b 55 08             	mov    0x8(%ebp),%edx
c010b3f6:	89 0a                	mov    %ecx,(%edx)
c010b3f8:	8b 00                	mov    (%eax),%eax
c010b3fa:	99                   	cltd   
c010b3fb:	eb 10                	jmp    c010b40d <getint+0x45>
    }
    else {
        return va_arg(*ap, int);
c010b3fd:	8b 45 08             	mov    0x8(%ebp),%eax
c010b400:	8b 00                	mov    (%eax),%eax
c010b402:	8d 48 04             	lea    0x4(%eax),%ecx
c010b405:	8b 55 08             	mov    0x8(%ebp),%edx
c010b408:	89 0a                	mov    %ecx,(%edx)
c010b40a:	8b 00                	mov    (%eax),%eax
c010b40c:	99                   	cltd   
    }
}
c010b40d:	5d                   	pop    %ebp
c010b40e:	c3                   	ret    

c010b40f <printfmt>:
 * @putch:      specified putch function, print a single character
 * @putdat:     used by @putch function
 * @fmt:        the format string to use
 * */
void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
c010b40f:	55                   	push   %ebp
c010b410:	89 e5                	mov    %esp,%ebp
c010b412:	83 ec 18             	sub    $0x18,%esp
    va_list ap;

    va_start(ap, fmt);
c010b415:	8d 45 14             	lea    0x14(%ebp),%eax
c010b418:	89 45 f4             	mov    %eax,-0xc(%ebp)
    vprintfmt(putch, putdat, fmt, ap);
c010b41b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b41e:	50                   	push   %eax
c010b41f:	ff 75 10             	pushl  0x10(%ebp)
c010b422:	ff 75 0c             	pushl  0xc(%ebp)
c010b425:	ff 75 08             	pushl  0x8(%ebp)
c010b428:	e8 06 00 00 00       	call   c010b433 <vprintfmt>
c010b42d:	83 c4 10             	add    $0x10,%esp
    va_end(ap);
}
c010b430:	90                   	nop
c010b431:	c9                   	leave  
c010b432:	c3                   	ret    

c010b433 <vprintfmt>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want printfmt() instead.
 * */
void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
c010b433:	55                   	push   %ebp
c010b434:	89 e5                	mov    %esp,%ebp
c010b436:	56                   	push   %esi
c010b437:	53                   	push   %ebx
c010b438:	83 ec 20             	sub    $0x20,%esp
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c010b43b:	eb 17                	jmp    c010b454 <vprintfmt+0x21>
            if (ch == '\0') {
c010b43d:	85 db                	test   %ebx,%ebx
c010b43f:	0f 84 8e 03 00 00    	je     c010b7d3 <vprintfmt+0x3a0>
                return;
            }
            putch(ch, putdat);
c010b445:	83 ec 08             	sub    $0x8,%esp
c010b448:	ff 75 0c             	pushl  0xc(%ebp)
c010b44b:	53                   	push   %ebx
c010b44c:	8b 45 08             	mov    0x8(%ebp),%eax
c010b44f:	ff d0                	call   *%eax
c010b451:	83 c4 10             	add    $0x10,%esp
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c010b454:	8b 45 10             	mov    0x10(%ebp),%eax
c010b457:	8d 50 01             	lea    0x1(%eax),%edx
c010b45a:	89 55 10             	mov    %edx,0x10(%ebp)
c010b45d:	0f b6 00             	movzbl (%eax),%eax
c010b460:	0f b6 d8             	movzbl %al,%ebx
c010b463:	83 fb 25             	cmp    $0x25,%ebx
c010b466:	75 d5                	jne    c010b43d <vprintfmt+0xa>
            }
            putch(ch, putdat);
        }

        // Process a %-escape sequence
        char padc = ' ';
c010b468:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
        width = precision = -1;
c010b46c:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
c010b473:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b476:	89 45 e8             	mov    %eax,-0x18(%ebp)
        lflag = altflag = 0;
c010b479:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c010b480:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b483:	89 45 e0             	mov    %eax,-0x20(%ebp)

    reswitch:
        switch (ch = *(unsigned char *)fmt ++) {
c010b486:	8b 45 10             	mov    0x10(%ebp),%eax
c010b489:	8d 50 01             	lea    0x1(%eax),%edx
c010b48c:	89 55 10             	mov    %edx,0x10(%ebp)
c010b48f:	0f b6 00             	movzbl (%eax),%eax
c010b492:	0f b6 d8             	movzbl %al,%ebx
c010b495:	8d 43 dd             	lea    -0x23(%ebx),%eax
c010b498:	83 f8 55             	cmp    $0x55,%eax
c010b49b:	0f 87 05 03 00 00    	ja     c010b7a6 <vprintfmt+0x373>
c010b4a1:	8b 04 85 48 e0 10 c0 	mov    -0x3fef1fb8(,%eax,4),%eax
c010b4a8:	ff e0                	jmp    *%eax

        // flag to pad on the right
        case '-':
            padc = '-';
c010b4aa:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
            goto reswitch;
c010b4ae:	eb d6                	jmp    c010b486 <vprintfmt+0x53>

        // flag to pad with 0's instead of spaces
        case '0':
            padc = '0';
c010b4b0:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
            goto reswitch;
c010b4b4:	eb d0                	jmp    c010b486 <vprintfmt+0x53>

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
c010b4b6:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
                precision = precision * 10 + ch - '0';
c010b4bd:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010b4c0:	89 d0                	mov    %edx,%eax
c010b4c2:	c1 e0 02             	shl    $0x2,%eax
c010b4c5:	01 d0                	add    %edx,%eax
c010b4c7:	01 c0                	add    %eax,%eax
c010b4c9:	01 d8                	add    %ebx,%eax
c010b4cb:	83 e8 30             	sub    $0x30,%eax
c010b4ce:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                ch = *fmt;
c010b4d1:	8b 45 10             	mov    0x10(%ebp),%eax
c010b4d4:	0f b6 00             	movzbl (%eax),%eax
c010b4d7:	0f be d8             	movsbl %al,%ebx
                if (ch < '0' || ch > '9') {
c010b4da:	83 fb 2f             	cmp    $0x2f,%ebx
c010b4dd:	7e 39                	jle    c010b518 <vprintfmt+0xe5>
c010b4df:	83 fb 39             	cmp    $0x39,%ebx
c010b4e2:	7f 34                	jg     c010b518 <vprintfmt+0xe5>
            padc = '0';
            goto reswitch;

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
c010b4e4:	83 45 10 01          	addl   $0x1,0x10(%ebp)
                precision = precision * 10 + ch - '0';
                ch = *fmt;
                if (ch < '0' || ch > '9') {
                    break;
                }
            }
c010b4e8:	eb d3                	jmp    c010b4bd <vprintfmt+0x8a>
            goto process_precision;

        case '*':
            precision = va_arg(ap, int);
c010b4ea:	8b 45 14             	mov    0x14(%ebp),%eax
c010b4ed:	8d 50 04             	lea    0x4(%eax),%edx
c010b4f0:	89 55 14             	mov    %edx,0x14(%ebp)
c010b4f3:	8b 00                	mov    (%eax),%eax
c010b4f5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            goto process_precision;
c010b4f8:	eb 1f                	jmp    c010b519 <vprintfmt+0xe6>

        case '.':
            if (width < 0)
c010b4fa:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010b4fe:	79 86                	jns    c010b486 <vprintfmt+0x53>
                width = 0;
c010b500:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
            goto reswitch;
c010b507:	e9 7a ff ff ff       	jmp    c010b486 <vprintfmt+0x53>

        case '#':
            altflag = 1;
c010b50c:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
            goto reswitch;
c010b513:	e9 6e ff ff ff       	jmp    c010b486 <vprintfmt+0x53>
                ch = *fmt;
                if (ch < '0' || ch > '9') {
                    break;
                }
            }
            goto process_precision;
c010b518:	90                   	nop
        case '#':
            altflag = 1;
            goto reswitch;

        process_precision:
            if (width < 0)
c010b519:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010b51d:	0f 89 63 ff ff ff    	jns    c010b486 <vprintfmt+0x53>
                width = precision, precision = -1;
c010b523:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b526:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010b529:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
            goto reswitch;
c010b530:	e9 51 ff ff ff       	jmp    c010b486 <vprintfmt+0x53>

        // long flag (doubled for long long)
        case 'l':
            lflag ++;
c010b535:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
            goto reswitch;
c010b539:	e9 48 ff ff ff       	jmp    c010b486 <vprintfmt+0x53>

        // character
        case 'c':
            putch(va_arg(ap, int), putdat);
c010b53e:	8b 45 14             	mov    0x14(%ebp),%eax
c010b541:	8d 50 04             	lea    0x4(%eax),%edx
c010b544:	89 55 14             	mov    %edx,0x14(%ebp)
c010b547:	8b 00                	mov    (%eax),%eax
c010b549:	83 ec 08             	sub    $0x8,%esp
c010b54c:	ff 75 0c             	pushl  0xc(%ebp)
c010b54f:	50                   	push   %eax
c010b550:	8b 45 08             	mov    0x8(%ebp),%eax
c010b553:	ff d0                	call   *%eax
c010b555:	83 c4 10             	add    $0x10,%esp
            break;
c010b558:	e9 71 02 00 00       	jmp    c010b7ce <vprintfmt+0x39b>

        // error message
        case 'e':
            err = va_arg(ap, int);
c010b55d:	8b 45 14             	mov    0x14(%ebp),%eax
c010b560:	8d 50 04             	lea    0x4(%eax),%edx
c010b563:	89 55 14             	mov    %edx,0x14(%ebp)
c010b566:	8b 18                	mov    (%eax),%ebx
            if (err < 0) {
c010b568:	85 db                	test   %ebx,%ebx
c010b56a:	79 02                	jns    c010b56e <vprintfmt+0x13b>
                err = -err;
c010b56c:	f7 db                	neg    %ebx
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
c010b56e:	83 fb 18             	cmp    $0x18,%ebx
c010b571:	7f 0b                	jg     c010b57e <vprintfmt+0x14b>
c010b573:	8b 34 9d c0 df 10 c0 	mov    -0x3fef2040(,%ebx,4),%esi
c010b57a:	85 f6                	test   %esi,%esi
c010b57c:	75 19                	jne    c010b597 <vprintfmt+0x164>
                printfmt(putch, putdat, "error %d", err);
c010b57e:	53                   	push   %ebx
c010b57f:	68 35 e0 10 c0       	push   $0xc010e035
c010b584:	ff 75 0c             	pushl  0xc(%ebp)
c010b587:	ff 75 08             	pushl  0x8(%ebp)
c010b58a:	e8 80 fe ff ff       	call   c010b40f <printfmt>
c010b58f:	83 c4 10             	add    $0x10,%esp
            }
            else {
                printfmt(putch, putdat, "%s", p);
            }
            break;
c010b592:	e9 37 02 00 00       	jmp    c010b7ce <vprintfmt+0x39b>
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
                printfmt(putch, putdat, "error %d", err);
            }
            else {
                printfmt(putch, putdat, "%s", p);
c010b597:	56                   	push   %esi
c010b598:	68 3e e0 10 c0       	push   $0xc010e03e
c010b59d:	ff 75 0c             	pushl  0xc(%ebp)
c010b5a0:	ff 75 08             	pushl  0x8(%ebp)
c010b5a3:	e8 67 fe ff ff       	call   c010b40f <printfmt>
c010b5a8:	83 c4 10             	add    $0x10,%esp
            }
            break;
c010b5ab:	e9 1e 02 00 00       	jmp    c010b7ce <vprintfmt+0x39b>

        // string
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
c010b5b0:	8b 45 14             	mov    0x14(%ebp),%eax
c010b5b3:	8d 50 04             	lea    0x4(%eax),%edx
c010b5b6:	89 55 14             	mov    %edx,0x14(%ebp)
c010b5b9:	8b 30                	mov    (%eax),%esi
c010b5bb:	85 f6                	test   %esi,%esi
c010b5bd:	75 05                	jne    c010b5c4 <vprintfmt+0x191>
                p = "(null)";
c010b5bf:	be 41 e0 10 c0       	mov    $0xc010e041,%esi
            }
            if (width > 0 && padc != '-') {
c010b5c4:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010b5c8:	7e 76                	jle    c010b640 <vprintfmt+0x20d>
c010b5ca:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
c010b5ce:	74 70                	je     c010b640 <vprintfmt+0x20d>
                for (width -= strnlen(p, precision); width > 0; width --) {
c010b5d0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b5d3:	83 ec 08             	sub    $0x8,%esp
c010b5d6:	50                   	push   %eax
c010b5d7:	56                   	push   %esi
c010b5d8:	e8 17 f8 ff ff       	call   c010adf4 <strnlen>
c010b5dd:	83 c4 10             	add    $0x10,%esp
c010b5e0:	89 c2                	mov    %eax,%edx
c010b5e2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b5e5:	29 d0                	sub    %edx,%eax
c010b5e7:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010b5ea:	eb 17                	jmp    c010b603 <vprintfmt+0x1d0>
                    putch(padc, putdat);
c010b5ec:	0f be 45 db          	movsbl -0x25(%ebp),%eax
c010b5f0:	83 ec 08             	sub    $0x8,%esp
c010b5f3:	ff 75 0c             	pushl  0xc(%ebp)
c010b5f6:	50                   	push   %eax
c010b5f7:	8b 45 08             	mov    0x8(%ebp),%eax
c010b5fa:	ff d0                	call   *%eax
c010b5fc:	83 c4 10             	add    $0x10,%esp
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
                p = "(null)";
            }
            if (width > 0 && padc != '-') {
                for (width -= strnlen(p, precision); width > 0; width --) {
c010b5ff:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c010b603:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010b607:	7f e3                	jg     c010b5ec <vprintfmt+0x1b9>
                    putch(padc, putdat);
                }
            }
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c010b609:	eb 35                	jmp    c010b640 <vprintfmt+0x20d>
                if (altflag && (ch < ' ' || ch > '~')) {
c010b60b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010b60f:	74 1c                	je     c010b62d <vprintfmt+0x1fa>
c010b611:	83 fb 1f             	cmp    $0x1f,%ebx
c010b614:	7e 05                	jle    c010b61b <vprintfmt+0x1e8>
c010b616:	83 fb 7e             	cmp    $0x7e,%ebx
c010b619:	7e 12                	jle    c010b62d <vprintfmt+0x1fa>
                    putch('?', putdat);
c010b61b:	83 ec 08             	sub    $0x8,%esp
c010b61e:	ff 75 0c             	pushl  0xc(%ebp)
c010b621:	6a 3f                	push   $0x3f
c010b623:	8b 45 08             	mov    0x8(%ebp),%eax
c010b626:	ff d0                	call   *%eax
c010b628:	83 c4 10             	add    $0x10,%esp
c010b62b:	eb 0f                	jmp    c010b63c <vprintfmt+0x209>
                }
                else {
                    putch(ch, putdat);
c010b62d:	83 ec 08             	sub    $0x8,%esp
c010b630:	ff 75 0c             	pushl  0xc(%ebp)
c010b633:	53                   	push   %ebx
c010b634:	8b 45 08             	mov    0x8(%ebp),%eax
c010b637:	ff d0                	call   *%eax
c010b639:	83 c4 10             	add    $0x10,%esp
            if (width > 0 && padc != '-') {
                for (width -= strnlen(p, precision); width > 0; width --) {
                    putch(padc, putdat);
                }
            }
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c010b63c:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c010b640:	89 f0                	mov    %esi,%eax
c010b642:	8d 70 01             	lea    0x1(%eax),%esi
c010b645:	0f b6 00             	movzbl (%eax),%eax
c010b648:	0f be d8             	movsbl %al,%ebx
c010b64b:	85 db                	test   %ebx,%ebx
c010b64d:	74 26                	je     c010b675 <vprintfmt+0x242>
c010b64f:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010b653:	78 b6                	js     c010b60b <vprintfmt+0x1d8>
c010b655:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
c010b659:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010b65d:	79 ac                	jns    c010b60b <vprintfmt+0x1d8>
                }
                else {
                    putch(ch, putdat);
                }
            }
            for (; width > 0; width --) {
c010b65f:	eb 14                	jmp    c010b675 <vprintfmt+0x242>
                putch(' ', putdat);
c010b661:	83 ec 08             	sub    $0x8,%esp
c010b664:	ff 75 0c             	pushl  0xc(%ebp)
c010b667:	6a 20                	push   $0x20
c010b669:	8b 45 08             	mov    0x8(%ebp),%eax
c010b66c:	ff d0                	call   *%eax
c010b66e:	83 c4 10             	add    $0x10,%esp
                }
                else {
                    putch(ch, putdat);
                }
            }
            for (; width > 0; width --) {
c010b671:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c010b675:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010b679:	7f e6                	jg     c010b661 <vprintfmt+0x22e>
                putch(' ', putdat);
            }
            break;
c010b67b:	e9 4e 01 00 00       	jmp    c010b7ce <vprintfmt+0x39b>

        // (signed) decimal
        case 'd':
            num = getint(&ap, lflag);
c010b680:	83 ec 08             	sub    $0x8,%esp
c010b683:	ff 75 e0             	pushl  -0x20(%ebp)
c010b686:	8d 45 14             	lea    0x14(%ebp),%eax
c010b689:	50                   	push   %eax
c010b68a:	e8 39 fd ff ff       	call   c010b3c8 <getint>
c010b68f:	83 c4 10             	add    $0x10,%esp
c010b692:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b695:	89 55 f4             	mov    %edx,-0xc(%ebp)
            if ((long long)num < 0) {
c010b698:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b69b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b69e:	85 d2                	test   %edx,%edx
c010b6a0:	79 23                	jns    c010b6c5 <vprintfmt+0x292>
                putch('-', putdat);
c010b6a2:	83 ec 08             	sub    $0x8,%esp
c010b6a5:	ff 75 0c             	pushl  0xc(%ebp)
c010b6a8:	6a 2d                	push   $0x2d
c010b6aa:	8b 45 08             	mov    0x8(%ebp),%eax
c010b6ad:	ff d0                	call   *%eax
c010b6af:	83 c4 10             	add    $0x10,%esp
                num = -(long long)num;
c010b6b2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b6b5:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b6b8:	f7 d8                	neg    %eax
c010b6ba:	83 d2 00             	adc    $0x0,%edx
c010b6bd:	f7 da                	neg    %edx
c010b6bf:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b6c2:	89 55 f4             	mov    %edx,-0xc(%ebp)
            }
            base = 10;
c010b6c5:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c010b6cc:	e9 9f 00 00 00       	jmp    c010b770 <vprintfmt+0x33d>

        // unsigned decimal
        case 'u':
            num = getuint(&ap, lflag);
c010b6d1:	83 ec 08             	sub    $0x8,%esp
c010b6d4:	ff 75 e0             	pushl  -0x20(%ebp)
c010b6d7:	8d 45 14             	lea    0x14(%ebp),%eax
c010b6da:	50                   	push   %eax
c010b6db:	e8 99 fc ff ff       	call   c010b379 <getuint>
c010b6e0:	83 c4 10             	add    $0x10,%esp
c010b6e3:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b6e6:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 10;
c010b6e9:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c010b6f0:	eb 7e                	jmp    c010b770 <vprintfmt+0x33d>

        // (unsigned) octal
        case 'o':
            num = getuint(&ap, lflag);
c010b6f2:	83 ec 08             	sub    $0x8,%esp
c010b6f5:	ff 75 e0             	pushl  -0x20(%ebp)
c010b6f8:	8d 45 14             	lea    0x14(%ebp),%eax
c010b6fb:	50                   	push   %eax
c010b6fc:	e8 78 fc ff ff       	call   c010b379 <getuint>
c010b701:	83 c4 10             	add    $0x10,%esp
c010b704:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b707:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 8;
c010b70a:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
            goto number;
c010b711:	eb 5d                	jmp    c010b770 <vprintfmt+0x33d>

        // pointer
        case 'p':
            putch('0', putdat);
c010b713:	83 ec 08             	sub    $0x8,%esp
c010b716:	ff 75 0c             	pushl  0xc(%ebp)
c010b719:	6a 30                	push   $0x30
c010b71b:	8b 45 08             	mov    0x8(%ebp),%eax
c010b71e:	ff d0                	call   *%eax
c010b720:	83 c4 10             	add    $0x10,%esp
            putch('x', putdat);
c010b723:	83 ec 08             	sub    $0x8,%esp
c010b726:	ff 75 0c             	pushl  0xc(%ebp)
c010b729:	6a 78                	push   $0x78
c010b72b:	8b 45 08             	mov    0x8(%ebp),%eax
c010b72e:	ff d0                	call   *%eax
c010b730:	83 c4 10             	add    $0x10,%esp
            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
c010b733:	8b 45 14             	mov    0x14(%ebp),%eax
c010b736:	8d 50 04             	lea    0x4(%eax),%edx
c010b739:	89 55 14             	mov    %edx,0x14(%ebp)
c010b73c:	8b 00                	mov    (%eax),%eax
c010b73e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b741:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            base = 16;
c010b748:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
            goto number;
c010b74f:	eb 1f                	jmp    c010b770 <vprintfmt+0x33d>

        // (unsigned) hexadecimal
        case 'x':
            num = getuint(&ap, lflag);
c010b751:	83 ec 08             	sub    $0x8,%esp
c010b754:	ff 75 e0             	pushl  -0x20(%ebp)
c010b757:	8d 45 14             	lea    0x14(%ebp),%eax
c010b75a:	50                   	push   %eax
c010b75b:	e8 19 fc ff ff       	call   c010b379 <getuint>
c010b760:	83 c4 10             	add    $0x10,%esp
c010b763:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b766:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 16;
c010b769:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
        number:
            printnum(putch, putdat, num, base, width, padc);
c010b770:	0f be 55 db          	movsbl -0x25(%ebp),%edx
c010b774:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b777:	83 ec 04             	sub    $0x4,%esp
c010b77a:	52                   	push   %edx
c010b77b:	ff 75 e8             	pushl  -0x18(%ebp)
c010b77e:	50                   	push   %eax
c010b77f:	ff 75 f4             	pushl  -0xc(%ebp)
c010b782:	ff 75 f0             	pushl  -0x10(%ebp)
c010b785:	ff 75 0c             	pushl  0xc(%ebp)
c010b788:	ff 75 08             	pushl  0x8(%ebp)
c010b78b:	e8 f8 fa ff ff       	call   c010b288 <printnum>
c010b790:	83 c4 20             	add    $0x20,%esp
            break;
c010b793:	eb 39                	jmp    c010b7ce <vprintfmt+0x39b>

        // escaped '%' character
        case '%':
            putch(ch, putdat);
c010b795:	83 ec 08             	sub    $0x8,%esp
c010b798:	ff 75 0c             	pushl  0xc(%ebp)
c010b79b:	53                   	push   %ebx
c010b79c:	8b 45 08             	mov    0x8(%ebp),%eax
c010b79f:	ff d0                	call   *%eax
c010b7a1:	83 c4 10             	add    $0x10,%esp
            break;
c010b7a4:	eb 28                	jmp    c010b7ce <vprintfmt+0x39b>

        // unrecognized escape sequence - just print it literally
        default:
            putch('%', putdat);
c010b7a6:	83 ec 08             	sub    $0x8,%esp
c010b7a9:	ff 75 0c             	pushl  0xc(%ebp)
c010b7ac:	6a 25                	push   $0x25
c010b7ae:	8b 45 08             	mov    0x8(%ebp),%eax
c010b7b1:	ff d0                	call   *%eax
c010b7b3:	83 c4 10             	add    $0x10,%esp
            for (fmt --; fmt[-1] != '%'; fmt --)
c010b7b6:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c010b7ba:	eb 04                	jmp    c010b7c0 <vprintfmt+0x38d>
c010b7bc:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c010b7c0:	8b 45 10             	mov    0x10(%ebp),%eax
c010b7c3:	83 e8 01             	sub    $0x1,%eax
c010b7c6:	0f b6 00             	movzbl (%eax),%eax
c010b7c9:	3c 25                	cmp    $0x25,%al
c010b7cb:	75 ef                	jne    c010b7bc <vprintfmt+0x389>
                /* do nothing */;
            break;
c010b7cd:	90                   	nop
        }
    }
c010b7ce:	e9 68 fc ff ff       	jmp    c010b43b <vprintfmt+0x8>
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
            if (ch == '\0') {
                return;
c010b7d3:	90                   	nop
            for (fmt --; fmt[-1] != '%'; fmt --)
                /* do nothing */;
            break;
        }
    }
}
c010b7d4:	8d 65 f8             	lea    -0x8(%ebp),%esp
c010b7d7:	5b                   	pop    %ebx
c010b7d8:	5e                   	pop    %esi
c010b7d9:	5d                   	pop    %ebp
c010b7da:	c3                   	ret    

c010b7db <sprintputch>:
 * sprintputch - 'print' a single character in a buffer
 * @ch:         the character will be printed
 * @b:          the buffer to place the character @ch
 * */
static void
sprintputch(int ch, struct sprintbuf *b) {
c010b7db:	55                   	push   %ebp
c010b7dc:	89 e5                	mov    %esp,%ebp
    b->cnt ++;
c010b7de:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b7e1:	8b 40 08             	mov    0x8(%eax),%eax
c010b7e4:	8d 50 01             	lea    0x1(%eax),%edx
c010b7e7:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b7ea:	89 50 08             	mov    %edx,0x8(%eax)
    if (b->buf < b->ebuf) {
c010b7ed:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b7f0:	8b 10                	mov    (%eax),%edx
c010b7f2:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b7f5:	8b 40 04             	mov    0x4(%eax),%eax
c010b7f8:	39 c2                	cmp    %eax,%edx
c010b7fa:	73 12                	jae    c010b80e <sprintputch+0x33>
        *b->buf ++ = ch;
c010b7fc:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b7ff:	8b 00                	mov    (%eax),%eax
c010b801:	8d 48 01             	lea    0x1(%eax),%ecx
c010b804:	8b 55 0c             	mov    0xc(%ebp),%edx
c010b807:	89 0a                	mov    %ecx,(%edx)
c010b809:	8b 55 08             	mov    0x8(%ebp),%edx
c010b80c:	88 10                	mov    %dl,(%eax)
    }
}
c010b80e:	90                   	nop
c010b80f:	5d                   	pop    %ebp
c010b810:	c3                   	ret    

c010b811 <snprintf>:
 * @str:        the buffer to place the result into
 * @size:       the size of buffer, including the trailing null space
 * @fmt:        the format string to use
 * */
int
snprintf(char *str, size_t size, const char *fmt, ...) {
c010b811:	55                   	push   %ebp
c010b812:	89 e5                	mov    %esp,%ebp
c010b814:	83 ec 18             	sub    $0x18,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c010b817:	8d 45 14             	lea    0x14(%ebp),%eax
c010b81a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cnt = vsnprintf(str, size, fmt, ap);
c010b81d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b820:	50                   	push   %eax
c010b821:	ff 75 10             	pushl  0x10(%ebp)
c010b824:	ff 75 0c             	pushl  0xc(%ebp)
c010b827:	ff 75 08             	pushl  0x8(%ebp)
c010b82a:	e8 0b 00 00 00       	call   c010b83a <vsnprintf>
c010b82f:	83 c4 10             	add    $0x10,%esp
c010b832:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c010b835:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010b838:	c9                   	leave  
c010b839:	c3                   	ret    

c010b83a <vsnprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want snprintf() instead.
 * */
int
vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
c010b83a:	55                   	push   %ebp
c010b83b:	89 e5                	mov    %esp,%ebp
c010b83d:	83 ec 18             	sub    $0x18,%esp
    struct sprintbuf b = {str, str + size - 1, 0};
c010b840:	8b 45 08             	mov    0x8(%ebp),%eax
c010b843:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010b846:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b849:	8d 50 ff             	lea    -0x1(%eax),%edx
c010b84c:	8b 45 08             	mov    0x8(%ebp),%eax
c010b84f:	01 d0                	add    %edx,%eax
c010b851:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b854:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if (str == NULL || b.buf > b.ebuf) {
c010b85b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b85f:	74 0a                	je     c010b86b <vsnprintf+0x31>
c010b861:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010b864:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b867:	39 c2                	cmp    %eax,%edx
c010b869:	76 07                	jbe    c010b872 <vsnprintf+0x38>
        return -E_INVAL;
c010b86b:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010b870:	eb 20                	jmp    c010b892 <vsnprintf+0x58>
    }
    // print the string to the buffer
    vprintfmt((void*)sprintputch, &b, fmt, ap);
c010b872:	ff 75 14             	pushl  0x14(%ebp)
c010b875:	ff 75 10             	pushl  0x10(%ebp)
c010b878:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010b87b:	50                   	push   %eax
c010b87c:	68 db b7 10 c0       	push   $0xc010b7db
c010b881:	e8 ad fb ff ff       	call   c010b433 <vprintfmt>
c010b886:	83 c4 10             	add    $0x10,%esp
    // null terminate the buffer
    *b.buf = '\0';
c010b889:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b88c:	c6 00 00             	movb   $0x0,(%eax)
    return b.cnt;
c010b88f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010b892:	c9                   	leave  
c010b893:	c3                   	ret    

c010b894 <hash32>:
 * @bits:   the number of bits in a return value
 *
 * High bits are more random, so we use them.
 * */
uint32_t
hash32(uint32_t val, unsigned int bits) {
c010b894:	55                   	push   %ebp
c010b895:	89 e5                	mov    %esp,%ebp
c010b897:	83 ec 10             	sub    $0x10,%esp
    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
c010b89a:	8b 45 08             	mov    0x8(%ebp),%eax
c010b89d:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
c010b8a3:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return (hash >> (32 - bits));
c010b8a6:	b8 20 00 00 00       	mov    $0x20,%eax
c010b8ab:	2b 45 0c             	sub    0xc(%ebp),%eax
c010b8ae:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010b8b1:	89 c1                	mov    %eax,%ecx
c010b8b3:	d3 ea                	shr    %cl,%edx
c010b8b5:	89 d0                	mov    %edx,%eax
}
c010b8b7:	c9                   	leave  
c010b8b8:	c3                   	ret    

c010b8b9 <rand>:
 * rand - returns a pseudo-random integer
 *
 * The rand() function return a value in the range [0, RAND_MAX].
 * */
int
rand(void) {
c010b8b9:	55                   	push   %ebp
c010b8ba:	89 e5                	mov    %esp,%ebp
c010b8bc:	57                   	push   %edi
c010b8bd:	56                   	push   %esi
c010b8be:	53                   	push   %ebx
c010b8bf:	83 ec 24             	sub    $0x24,%esp
    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
c010b8c2:	a1 a0 ce 12 c0       	mov    0xc012cea0,%eax
c010b8c7:	8b 15 a4 ce 12 c0    	mov    0xc012cea4,%edx
c010b8cd:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
c010b8d3:	6b f0 05             	imul   $0x5,%eax,%esi
c010b8d6:	01 fe                	add    %edi,%esi
c010b8d8:	bf 6d e6 ec de       	mov    $0xdeece66d,%edi
c010b8dd:	f7 e7                	mul    %edi
c010b8df:	01 d6                	add    %edx,%esi
c010b8e1:	89 f2                	mov    %esi,%edx
c010b8e3:	83 c0 0b             	add    $0xb,%eax
c010b8e6:	83 d2 00             	adc    $0x0,%edx
c010b8e9:	89 c7                	mov    %eax,%edi
c010b8eb:	83 e7 ff             	and    $0xffffffff,%edi
c010b8ee:	89 f9                	mov    %edi,%ecx
c010b8f0:	0f b7 da             	movzwl %dx,%ebx
c010b8f3:	89 0d a0 ce 12 c0    	mov    %ecx,0xc012cea0
c010b8f9:	89 1d a4 ce 12 c0    	mov    %ebx,0xc012cea4
    unsigned long long result = (next >> 12);
c010b8ff:	a1 a0 ce 12 c0       	mov    0xc012cea0,%eax
c010b904:	8b 15 a4 ce 12 c0    	mov    0xc012cea4,%edx
c010b90a:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c010b90e:	c1 ea 0c             	shr    $0xc,%edx
c010b911:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010b914:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    return (int)do_div(result, RAND_MAX + 1);
c010b917:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
c010b91e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b921:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010b924:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010b927:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010b92a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b92d:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010b930:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010b934:	74 1c                	je     c010b952 <rand+0x99>
c010b936:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b939:	ba 00 00 00 00       	mov    $0x0,%edx
c010b93e:	f7 75 dc             	divl   -0x24(%ebp)
c010b941:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010b944:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b947:	ba 00 00 00 00       	mov    $0x0,%edx
c010b94c:	f7 75 dc             	divl   -0x24(%ebp)
c010b94f:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010b952:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b955:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010b958:	f7 75 dc             	divl   -0x24(%ebp)
c010b95b:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010b95e:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010b961:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b964:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010b967:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010b96a:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c010b96d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
}
c010b970:	83 c4 24             	add    $0x24,%esp
c010b973:	5b                   	pop    %ebx
c010b974:	5e                   	pop    %esi
c010b975:	5f                   	pop    %edi
c010b976:	5d                   	pop    %ebp
c010b977:	c3                   	ret    

c010b978 <srand>:
/* *
 * srand - seed the random number generator with the given number
 * @seed:   the required seed number
 * */
void
srand(unsigned int seed) {
c010b978:	55                   	push   %ebp
c010b979:	89 e5                	mov    %esp,%ebp
    next = seed;
c010b97b:	8b 45 08             	mov    0x8(%ebp),%eax
c010b97e:	ba 00 00 00 00       	mov    $0x0,%edx
c010b983:	a3 a0 ce 12 c0       	mov    %eax,0xc012cea0
c010b988:	89 15 a4 ce 12 c0    	mov    %edx,0xc012cea4
}
c010b98e:	90                   	nop
c010b98f:	5d                   	pop    %ebp
c010b990:	c3                   	ret    

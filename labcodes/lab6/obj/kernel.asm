
bin/kernel:     file format elf32-i386


Disassembly of section .text:

c0100000 <kern_entry>:

.text
.globl kern_entry
kern_entry:
    # load pa of boot pgdir
    movl $REALLOC(__boot_pgdir), %eax
c0100000:	b8 00 e0 1a 00       	mov    $0x1ae000,%eax
    movl %eax, %cr3
c0100005:	0f 22 d8             	mov    %eax,%cr3

    # enable paging
    movl %cr0, %eax
c0100008:	0f 20 c0             	mov    %cr0,%eax
    orl $(CR0_PE | CR0_PG | CR0_AM | CR0_WP | CR0_NE | CR0_TS | CR0_EM | CR0_MP), %eax
c010000b:	0d 2f 00 05 80       	or     $0x8005002f,%eax
    andl $~(CR0_TS | CR0_EM), %eax
c0100010:	83 e0 f3             	and    $0xfffffff3,%eax
    movl %eax, %cr0
c0100013:	0f 22 c0             	mov    %eax,%cr0

    # update eip
    # now, eip = 0x1.....
    leal next, %eax
c0100016:	8d 05 1e 00 10 c0    	lea    0xc010001e,%eax
    # set eip = KERNBASE + 0x1.....
    jmp *%eax
c010001c:	ff e0                	jmp    *%eax

c010001e <next>:
next:

    # unmap va 0 ~ 4M, it's temporary mapping
    xorl %eax, %eax
c010001e:	31 c0                	xor    %eax,%eax
    movl %eax, __boot_pgdir
c0100020:	a3 00 e0 1a c0       	mov    %eax,0xc01ae000

    # set ebp, esp
    movl $0x0, %ebp
c0100025:	bd 00 00 00 00       	mov    $0x0,%ebp
    # the kernel stack region is from bootstack -- bootstacktop,
    # the kernel stack size is KSTACKSIZE (8KB)defined in memlayout.h
    movl $bootstacktop, %esp
c010002a:	bc 00 c0 12 c0       	mov    $0xc012c000,%esp
    # now kernel stack is ready , call the first C function
    call kern_init
c010002f:	e8 02 00 00 00       	call   c0100036 <kern_init>

c0100034 <spin>:

# should never get here
spin:
    jmp spin
c0100034:	eb fe                	jmp    c0100034 <spin>

c0100036 <kern_init>:
int kern_init(void) __attribute__((noreturn));
void grade_backtrace(void);
static void lab1_switch_test(void);

int
kern_init(void) {
c0100036:	55                   	push   %ebp
c0100037:	89 e5                	mov    %esp,%ebp
c0100039:	83 ec 18             	sub    $0x18,%esp
    extern char edata[], end[];
    memset(edata, 0, end - edata);
c010003c:	ba c4 31 1b c0       	mov    $0xc01b31c4,%edx
c0100041:	b8 00 00 1b c0       	mov    $0xc01b0000,%eax
c0100046:	29 c2                	sub    %eax,%edx
c0100048:	89 d0                	mov    %edx,%eax
c010004a:	83 ec 04             	sub    $0x4,%esp
c010004d:	50                   	push   %eax
c010004e:	6a 00                	push   $0x0
c0100050:	68 00 00 1b c0       	push   $0xc01b0000
c0100055:	e8 bb af 00 00       	call   c010b015 <memset>
c010005a:	83 c4 10             	add    $0x10,%esp

    cons_init();                // init the console
c010005d:	e8 a4 1e 00 00       	call   c0101f06 <cons_init>

    const char *message = "(THU.CST) os is loading ...";
c0100062:	c7 45 f4 c0 b8 10 c0 	movl   $0xc010b8c0,-0xc(%ebp)
    cprintf("%s\n\n", message);
c0100069:	83 ec 08             	sub    $0x8,%esp
c010006c:	ff 75 f4             	pushl  -0xc(%ebp)
c010006f:	68 dc b8 10 c0       	push   $0xc010b8dc
c0100074:	e8 1e 02 00 00       	call   c0100297 <cprintf>
c0100079:	83 c4 10             	add    $0x10,%esp

    print_kerninfo();
c010007c:	e8 8c 09 00 00       	call   c0100a0d <print_kerninfo>

    grade_backtrace();
c0100081:	e8 90 00 00 00       	call   c0100116 <grade_backtrace>

    pmm_init();                 // init physical memory management
c0100086:	e8 f4 75 00 00       	call   c010767f <pmm_init>

    pic_init();                 // init interrupt controller
c010008b:	e8 e8 1f 00 00       	call   c0102078 <pic_init>
    idt_init();                 // init interrupt descriptor table
c0100090:	e8 6a 21 00 00       	call   c01021ff <idt_init>

    vmm_init();                 // init virtual memory management
c0100095:	e8 ec 3c 00 00       	call   c0103d86 <vmm_init>
    sched_init();               // init scheduler
c010009a:	e8 93 a6 00 00       	call   c010a732 <sched_init>
    proc_init();                // init process table
c010009f:	e8 c7 a3 00 00       	call   c010a46b <proc_init>
    
    ide_init();                 // init ide devices
c01000a4:	e8 2c 0e 00 00       	call   c0100ed5 <ide_init>
    swap_init();                // init swap
c01000a9:	e8 f9 52 00 00       	call   c01053a7 <swap_init>

    clock_init();               // init clock interrupt
c01000ae:	e8 fa 15 00 00       	call   c01016ad <clock_init>
    intr_enable();              // enable irq interrupt
c01000b3:	e8 fd 20 00 00       	call   c01021b5 <intr_enable>

    //LAB1: CAHLLENGE 1 If you try to do it, uncomment lab1_switch_test()
    // user/kernel mode switch test
    //lab1_switch_test();
    
    cpu_idle();                 // run idle process
c01000b8:	e8 4b a5 00 00       	call   c010a608 <cpu_idle>

c01000bd <grade_backtrace2>:
}

void __attribute__((noinline))
grade_backtrace2(int arg0, int arg1, int arg2, int arg3) {
c01000bd:	55                   	push   %ebp
c01000be:	89 e5                	mov    %esp,%ebp
c01000c0:	83 ec 08             	sub    $0x8,%esp
    mon_backtrace(0, NULL, NULL);
c01000c3:	83 ec 04             	sub    $0x4,%esp
c01000c6:	6a 00                	push   $0x0
c01000c8:	6a 00                	push   $0x0
c01000ca:	6a 00                	push   $0x0
c01000cc:	e8 98 0d 00 00       	call   c0100e69 <mon_backtrace>
c01000d1:	83 c4 10             	add    $0x10,%esp
}
c01000d4:	90                   	nop
c01000d5:	c9                   	leave  
c01000d6:	c3                   	ret    

c01000d7 <grade_backtrace1>:

void __attribute__((noinline))
grade_backtrace1(int arg0, int arg1) {
c01000d7:	55                   	push   %ebp
c01000d8:	89 e5                	mov    %esp,%ebp
c01000da:	53                   	push   %ebx
c01000db:	83 ec 04             	sub    $0x4,%esp
    grade_backtrace2(arg0, (int)&arg0, arg1, (int)&arg1);
c01000de:	8d 4d 0c             	lea    0xc(%ebp),%ecx
c01000e1:	8b 55 0c             	mov    0xc(%ebp),%edx
c01000e4:	8d 5d 08             	lea    0x8(%ebp),%ebx
c01000e7:	8b 45 08             	mov    0x8(%ebp),%eax
c01000ea:	51                   	push   %ecx
c01000eb:	52                   	push   %edx
c01000ec:	53                   	push   %ebx
c01000ed:	50                   	push   %eax
c01000ee:	e8 ca ff ff ff       	call   c01000bd <grade_backtrace2>
c01000f3:	83 c4 10             	add    $0x10,%esp
}
c01000f6:	90                   	nop
c01000f7:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c01000fa:	c9                   	leave  
c01000fb:	c3                   	ret    

c01000fc <grade_backtrace0>:

void __attribute__((noinline))
grade_backtrace0(int arg0, int arg1, int arg2) {
c01000fc:	55                   	push   %ebp
c01000fd:	89 e5                	mov    %esp,%ebp
c01000ff:	83 ec 08             	sub    $0x8,%esp
    grade_backtrace1(arg0, arg2);
c0100102:	83 ec 08             	sub    $0x8,%esp
c0100105:	ff 75 10             	pushl  0x10(%ebp)
c0100108:	ff 75 08             	pushl  0x8(%ebp)
c010010b:	e8 c7 ff ff ff       	call   c01000d7 <grade_backtrace1>
c0100110:	83 c4 10             	add    $0x10,%esp
}
c0100113:	90                   	nop
c0100114:	c9                   	leave  
c0100115:	c3                   	ret    

c0100116 <grade_backtrace>:

void
grade_backtrace(void) {
c0100116:	55                   	push   %ebp
c0100117:	89 e5                	mov    %esp,%ebp
c0100119:	83 ec 08             	sub    $0x8,%esp
    grade_backtrace0(0, (int)kern_init, 0xffff0000);
c010011c:	b8 36 00 10 c0       	mov    $0xc0100036,%eax
c0100121:	83 ec 04             	sub    $0x4,%esp
c0100124:	68 00 00 ff ff       	push   $0xffff0000
c0100129:	50                   	push   %eax
c010012a:	6a 00                	push   $0x0
c010012c:	e8 cb ff ff ff       	call   c01000fc <grade_backtrace0>
c0100131:	83 c4 10             	add    $0x10,%esp
}
c0100134:	90                   	nop
c0100135:	c9                   	leave  
c0100136:	c3                   	ret    

c0100137 <lab1_print_cur_status>:

static void
lab1_print_cur_status(void) {
c0100137:	55                   	push   %ebp
c0100138:	89 e5                	mov    %esp,%ebp
c010013a:	83 ec 18             	sub    $0x18,%esp
    static int round = 0;
    uint16_t reg1, reg2, reg3, reg4;
    asm volatile (
c010013d:	8c 4d f6             	mov    %cs,-0xa(%ebp)
c0100140:	8c 5d f4             	mov    %ds,-0xc(%ebp)
c0100143:	8c 45 f2             	mov    %es,-0xe(%ebp)
c0100146:	8c 55 f0             	mov    %ss,-0x10(%ebp)
            "mov %%cs, %0;"
            "mov %%ds, %1;"
            "mov %%es, %2;"
            "mov %%ss, %3;"
            : "=m"(reg1), "=m"(reg2), "=m"(reg3), "=m"(reg4));
    cprintf("%d: @ring %d\n", round, reg1 & 3);
c0100149:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010014d:	0f b7 c0             	movzwl %ax,%eax
c0100150:	83 e0 03             	and    $0x3,%eax
c0100153:	89 c2                	mov    %eax,%edx
c0100155:	a1 00 00 1b c0       	mov    0xc01b0000,%eax
c010015a:	83 ec 04             	sub    $0x4,%esp
c010015d:	52                   	push   %edx
c010015e:	50                   	push   %eax
c010015f:	68 e1 b8 10 c0       	push   $0xc010b8e1
c0100164:	e8 2e 01 00 00       	call   c0100297 <cprintf>
c0100169:	83 c4 10             	add    $0x10,%esp
    cprintf("%d:  cs = %x\n", round, reg1);
c010016c:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100170:	0f b7 d0             	movzwl %ax,%edx
c0100173:	a1 00 00 1b c0       	mov    0xc01b0000,%eax
c0100178:	83 ec 04             	sub    $0x4,%esp
c010017b:	52                   	push   %edx
c010017c:	50                   	push   %eax
c010017d:	68 ef b8 10 c0       	push   $0xc010b8ef
c0100182:	e8 10 01 00 00       	call   c0100297 <cprintf>
c0100187:	83 c4 10             	add    $0x10,%esp
    cprintf("%d:  ds = %x\n", round, reg2);
c010018a:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c010018e:	0f b7 d0             	movzwl %ax,%edx
c0100191:	a1 00 00 1b c0       	mov    0xc01b0000,%eax
c0100196:	83 ec 04             	sub    $0x4,%esp
c0100199:	52                   	push   %edx
c010019a:	50                   	push   %eax
c010019b:	68 fd b8 10 c0       	push   $0xc010b8fd
c01001a0:	e8 f2 00 00 00       	call   c0100297 <cprintf>
c01001a5:	83 c4 10             	add    $0x10,%esp
    cprintf("%d:  es = %x\n", round, reg3);
c01001a8:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01001ac:	0f b7 d0             	movzwl %ax,%edx
c01001af:	a1 00 00 1b c0       	mov    0xc01b0000,%eax
c01001b4:	83 ec 04             	sub    $0x4,%esp
c01001b7:	52                   	push   %edx
c01001b8:	50                   	push   %eax
c01001b9:	68 0b b9 10 c0       	push   $0xc010b90b
c01001be:	e8 d4 00 00 00       	call   c0100297 <cprintf>
c01001c3:	83 c4 10             	add    $0x10,%esp
    cprintf("%d:  ss = %x\n", round, reg4);
c01001c6:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c01001ca:	0f b7 d0             	movzwl %ax,%edx
c01001cd:	a1 00 00 1b c0       	mov    0xc01b0000,%eax
c01001d2:	83 ec 04             	sub    $0x4,%esp
c01001d5:	52                   	push   %edx
c01001d6:	50                   	push   %eax
c01001d7:	68 19 b9 10 c0       	push   $0xc010b919
c01001dc:	e8 b6 00 00 00       	call   c0100297 <cprintf>
c01001e1:	83 c4 10             	add    $0x10,%esp
    round ++;
c01001e4:	a1 00 00 1b c0       	mov    0xc01b0000,%eax
c01001e9:	83 c0 01             	add    $0x1,%eax
c01001ec:	a3 00 00 1b c0       	mov    %eax,0xc01b0000
}
c01001f1:	90                   	nop
c01001f2:	c9                   	leave  
c01001f3:	c3                   	ret    

c01001f4 <lab1_switch_to_user>:

static void
lab1_switch_to_user(void) {
c01001f4:	55                   	push   %ebp
c01001f5:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 : TODO
    asm volatile (
c01001f7:	cd 78                	int    $0x78
c01001f9:	89 ec                	mov    %ebp,%esp
	    "int %0;"
        "movl %%ebp, %%esp"
	    : 
	    : "i"(T_SWITCH_TOU)
	);
}
c01001fb:	90                   	nop
c01001fc:	5d                   	pop    %ebp
c01001fd:	c3                   	ret    

c01001fe <lab1_switch_to_kernel>:

static void
lab1_switch_to_kernel(void) {
c01001fe:	55                   	push   %ebp
c01001ff:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 :  TODO
    // cprintf("in lab1_switch_to_kernel\n");
    asm volatile (
c0100201:	cd 79                	int    $0x79
c0100203:	89 ec                	mov    %ebp,%esp
	    "int %0;"
        "movl %%ebp, %%esp"
        : 
	    : "i"(T_SWITCH_TOK)
	);
}
c0100205:	90                   	nop
c0100206:	5d                   	pop    %ebp
c0100207:	c3                   	ret    

c0100208 <lab1_switch_test>:

static void
lab1_switch_test(void) {
c0100208:	55                   	push   %ebp
c0100209:	89 e5                	mov    %esp,%ebp
c010020b:	83 ec 08             	sub    $0x8,%esp
    lab1_print_cur_status();
c010020e:	e8 24 ff ff ff       	call   c0100137 <lab1_print_cur_status>
    cprintf("+++ switch to  user  mode +++\n");
c0100213:	83 ec 0c             	sub    $0xc,%esp
c0100216:	68 28 b9 10 c0       	push   $0xc010b928
c010021b:	e8 77 00 00 00       	call   c0100297 <cprintf>
c0100220:	83 c4 10             	add    $0x10,%esp
    lab1_switch_to_user();
c0100223:	e8 cc ff ff ff       	call   c01001f4 <lab1_switch_to_user>
    lab1_print_cur_status();
c0100228:	e8 0a ff ff ff       	call   c0100137 <lab1_print_cur_status>
    cprintf("+++ switch to kernel mode +++\n");
c010022d:	83 ec 0c             	sub    $0xc,%esp
c0100230:	68 48 b9 10 c0       	push   $0xc010b948
c0100235:	e8 5d 00 00 00       	call   c0100297 <cprintf>
c010023a:	83 c4 10             	add    $0x10,%esp
    lab1_switch_to_kernel();
c010023d:	e8 bc ff ff ff       	call   c01001fe <lab1_switch_to_kernel>
    lab1_print_cur_status();
c0100242:	e8 f0 fe ff ff       	call   c0100137 <lab1_print_cur_status>
}
c0100247:	90                   	nop
c0100248:	c9                   	leave  
c0100249:	c3                   	ret    

c010024a <cputch>:
/* *
 * cputch - writes a single character @c to stdout, and it will
 * increace the value of counter pointed by @cnt.
 * */
static void
cputch(int c, int *cnt) {
c010024a:	55                   	push   %ebp
c010024b:	89 e5                	mov    %esp,%ebp
c010024d:	83 ec 08             	sub    $0x8,%esp
    cons_putc(c);
c0100250:	83 ec 0c             	sub    $0xc,%esp
c0100253:	ff 75 08             	pushl  0x8(%ebp)
c0100256:	e8 dc 1c 00 00       	call   c0101f37 <cons_putc>
c010025b:	83 c4 10             	add    $0x10,%esp
    (*cnt) ++;
c010025e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100261:	8b 00                	mov    (%eax),%eax
c0100263:	8d 50 01             	lea    0x1(%eax),%edx
c0100266:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100269:	89 10                	mov    %edx,(%eax)
}
c010026b:	90                   	nop
c010026c:	c9                   	leave  
c010026d:	c3                   	ret    

c010026e <vcprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want cprintf() instead.
 * */
int
vcprintf(const char *fmt, va_list ap) {
c010026e:	55                   	push   %ebp
c010026f:	89 e5                	mov    %esp,%ebp
c0100271:	83 ec 18             	sub    $0x18,%esp
    int cnt = 0;
c0100274:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    vprintfmt((void*)cputch, &cnt, fmt, ap);
c010027b:	ff 75 0c             	pushl  0xc(%ebp)
c010027e:	ff 75 08             	pushl  0x8(%ebp)
c0100281:	8d 45 f4             	lea    -0xc(%ebp),%eax
c0100284:	50                   	push   %eax
c0100285:	68 4a 02 10 c0       	push   $0xc010024a
c010028a:	e8 bc b0 00 00       	call   c010b34b <vprintfmt>
c010028f:	83 c4 10             	add    $0x10,%esp
    return cnt;
c0100292:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100295:	c9                   	leave  
c0100296:	c3                   	ret    

c0100297 <cprintf>:
 *
 * The return value is the number of characters which would be
 * written to stdout.
 * */
int
cprintf(const char *fmt, ...) {
c0100297:	55                   	push   %ebp
c0100298:	89 e5                	mov    %esp,%ebp
c010029a:	83 ec 18             	sub    $0x18,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c010029d:	8d 45 0c             	lea    0xc(%ebp),%eax
c01002a0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cnt = vcprintf(fmt, ap);
c01002a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002a6:	83 ec 08             	sub    $0x8,%esp
c01002a9:	50                   	push   %eax
c01002aa:	ff 75 08             	pushl  0x8(%ebp)
c01002ad:	e8 bc ff ff ff       	call   c010026e <vcprintf>
c01002b2:	83 c4 10             	add    $0x10,%esp
c01002b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c01002b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01002bb:	c9                   	leave  
c01002bc:	c3                   	ret    

c01002bd <cputchar>:

/* cputchar - writes a single character to stdout */
void
cputchar(int c) {
c01002bd:	55                   	push   %ebp
c01002be:	89 e5                	mov    %esp,%ebp
c01002c0:	83 ec 08             	sub    $0x8,%esp
    cons_putc(c);
c01002c3:	83 ec 0c             	sub    $0xc,%esp
c01002c6:	ff 75 08             	pushl  0x8(%ebp)
c01002c9:	e8 69 1c 00 00       	call   c0101f37 <cons_putc>
c01002ce:	83 c4 10             	add    $0x10,%esp
}
c01002d1:	90                   	nop
c01002d2:	c9                   	leave  
c01002d3:	c3                   	ret    

c01002d4 <cputs>:
/* *
 * cputs- writes the string pointed by @str to stdout and
 * appends a newline character.
 * */
int
cputs(const char *str) {
c01002d4:	55                   	push   %ebp
c01002d5:	89 e5                	mov    %esp,%ebp
c01002d7:	83 ec 18             	sub    $0x18,%esp
    int cnt = 0;
c01002da:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    char c;
    while ((c = *str ++) != '\0') {
c01002e1:	eb 14                	jmp    c01002f7 <cputs+0x23>
        cputch(c, &cnt);
c01002e3:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
c01002e7:	83 ec 08             	sub    $0x8,%esp
c01002ea:	8d 55 f0             	lea    -0x10(%ebp),%edx
c01002ed:	52                   	push   %edx
c01002ee:	50                   	push   %eax
c01002ef:	e8 56 ff ff ff       	call   c010024a <cputch>
c01002f4:	83 c4 10             	add    $0x10,%esp
 * */
int
cputs(const char *str) {
    int cnt = 0;
    char c;
    while ((c = *str ++) != '\0') {
c01002f7:	8b 45 08             	mov    0x8(%ebp),%eax
c01002fa:	8d 50 01             	lea    0x1(%eax),%edx
c01002fd:	89 55 08             	mov    %edx,0x8(%ebp)
c0100300:	0f b6 00             	movzbl (%eax),%eax
c0100303:	88 45 f7             	mov    %al,-0x9(%ebp)
c0100306:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
c010030a:	75 d7                	jne    c01002e3 <cputs+0xf>
        cputch(c, &cnt);
    }
    cputch('\n', &cnt);
c010030c:	83 ec 08             	sub    $0x8,%esp
c010030f:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0100312:	50                   	push   %eax
c0100313:	6a 0a                	push   $0xa
c0100315:	e8 30 ff ff ff       	call   c010024a <cputch>
c010031a:	83 c4 10             	add    $0x10,%esp
    return cnt;
c010031d:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0100320:	c9                   	leave  
c0100321:	c3                   	ret    

c0100322 <getchar>:

/* getchar - reads a single non-zero character from stdin */
int
getchar(void) {
c0100322:	55                   	push   %ebp
c0100323:	89 e5                	mov    %esp,%ebp
c0100325:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = cons_getc()) == 0)
c0100328:	e8 53 1c 00 00       	call   c0101f80 <cons_getc>
c010032d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100330:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100334:	74 f2                	je     c0100328 <getchar+0x6>
        /* do nothing */;
    return c;
c0100336:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100339:	c9                   	leave  
c010033a:	c3                   	ret    

c010033b <readline>:
 * The readline() function returns the text of the line read. If some errors
 * are happened, NULL is returned. The return value is a global variable,
 * thus it should be copied before it is used.
 * */
char *
readline(const char *prompt) {
c010033b:	55                   	push   %ebp
c010033c:	89 e5                	mov    %esp,%ebp
c010033e:	83 ec 18             	sub    $0x18,%esp
    if (prompt != NULL) {
c0100341:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0100345:	74 13                	je     c010035a <readline+0x1f>
        cprintf("%s", prompt);
c0100347:	83 ec 08             	sub    $0x8,%esp
c010034a:	ff 75 08             	pushl  0x8(%ebp)
c010034d:	68 67 b9 10 c0       	push   $0xc010b967
c0100352:	e8 40 ff ff ff       	call   c0100297 <cprintf>
c0100357:	83 c4 10             	add    $0x10,%esp
    }
    int i = 0, c;
c010035a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        c = getchar();
c0100361:	e8 bc ff ff ff       	call   c0100322 <getchar>
c0100366:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (c < 0) {
c0100369:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010036d:	79 0a                	jns    c0100379 <readline+0x3e>
            return NULL;
c010036f:	b8 00 00 00 00       	mov    $0x0,%eax
c0100374:	e9 82 00 00 00       	jmp    c01003fb <readline+0xc0>
        }
        else if (c >= ' ' && i < BUFSIZE - 1) {
c0100379:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
c010037d:	7e 2b                	jle    c01003aa <readline+0x6f>
c010037f:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
c0100386:	7f 22                	jg     c01003aa <readline+0x6f>
            cputchar(c);
c0100388:	83 ec 0c             	sub    $0xc,%esp
c010038b:	ff 75 f0             	pushl  -0x10(%ebp)
c010038e:	e8 2a ff ff ff       	call   c01002bd <cputchar>
c0100393:	83 c4 10             	add    $0x10,%esp
            buf[i ++] = c;
c0100396:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100399:	8d 50 01             	lea    0x1(%eax),%edx
c010039c:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010039f:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01003a2:	88 90 20 00 1b c0    	mov    %dl,-0x3fe4ffe0(%eax)
c01003a8:	eb 4c                	jmp    c01003f6 <readline+0xbb>
        }
        else if (c == '\b' && i > 0) {
c01003aa:	83 7d f0 08          	cmpl   $0x8,-0x10(%ebp)
c01003ae:	75 1a                	jne    c01003ca <readline+0x8f>
c01003b0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01003b4:	7e 14                	jle    c01003ca <readline+0x8f>
            cputchar(c);
c01003b6:	83 ec 0c             	sub    $0xc,%esp
c01003b9:	ff 75 f0             	pushl  -0x10(%ebp)
c01003bc:	e8 fc fe ff ff       	call   c01002bd <cputchar>
c01003c1:	83 c4 10             	add    $0x10,%esp
            i --;
c01003c4:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c01003c8:	eb 2c                	jmp    c01003f6 <readline+0xbb>
        }
        else if (c == '\n' || c == '\r') {
c01003ca:	83 7d f0 0a          	cmpl   $0xa,-0x10(%ebp)
c01003ce:	74 06                	je     c01003d6 <readline+0x9b>
c01003d0:	83 7d f0 0d          	cmpl   $0xd,-0x10(%ebp)
c01003d4:	75 8b                	jne    c0100361 <readline+0x26>
            cputchar(c);
c01003d6:	83 ec 0c             	sub    $0xc,%esp
c01003d9:	ff 75 f0             	pushl  -0x10(%ebp)
c01003dc:	e8 dc fe ff ff       	call   c01002bd <cputchar>
c01003e1:	83 c4 10             	add    $0x10,%esp
            buf[i] = '\0';
c01003e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01003e7:	05 20 00 1b c0       	add    $0xc01b0020,%eax
c01003ec:	c6 00 00             	movb   $0x0,(%eax)
            return buf;
c01003ef:	b8 20 00 1b c0       	mov    $0xc01b0020,%eax
c01003f4:	eb 05                	jmp    c01003fb <readline+0xc0>
        }
    }
c01003f6:	e9 66 ff ff ff       	jmp    c0100361 <readline+0x26>
}
c01003fb:	c9                   	leave  
c01003fc:	c3                   	ret    

c01003fd <__panic>:
/* *
 * __panic - __panic is called on unresolvable fatal errors. it prints
 * "panic: 'message'", and then enters the kernel monitor.
 * */
void
__panic(const char *file, int line, const char *fmt, ...) {
c01003fd:	55                   	push   %ebp
c01003fe:	89 e5                	mov    %esp,%ebp
c0100400:	83 ec 18             	sub    $0x18,%esp
    if (is_panic) {
c0100403:	a1 20 04 1b c0       	mov    0xc01b0420,%eax
c0100408:	85 c0                	test   %eax,%eax
c010040a:	75 5f                	jne    c010046b <__panic+0x6e>
        goto panic_dead;
    }
    is_panic = 1;
c010040c:	c7 05 20 04 1b c0 01 	movl   $0x1,0xc01b0420
c0100413:	00 00 00 

    // print the 'message'
    va_list ap;
    va_start(ap, fmt);
c0100416:	8d 45 14             	lea    0x14(%ebp),%eax
c0100419:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cprintf("kernel panic at %s:%d:\n    ", file, line);
c010041c:	83 ec 04             	sub    $0x4,%esp
c010041f:	ff 75 0c             	pushl  0xc(%ebp)
c0100422:	ff 75 08             	pushl  0x8(%ebp)
c0100425:	68 6a b9 10 c0       	push   $0xc010b96a
c010042a:	e8 68 fe ff ff       	call   c0100297 <cprintf>
c010042f:	83 c4 10             	add    $0x10,%esp
    vcprintf(fmt, ap);
c0100432:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100435:	83 ec 08             	sub    $0x8,%esp
c0100438:	50                   	push   %eax
c0100439:	ff 75 10             	pushl  0x10(%ebp)
c010043c:	e8 2d fe ff ff       	call   c010026e <vcprintf>
c0100441:	83 c4 10             	add    $0x10,%esp
    cprintf("\n");
c0100444:	83 ec 0c             	sub    $0xc,%esp
c0100447:	68 86 b9 10 c0       	push   $0xc010b986
c010044c:	e8 46 fe ff ff       	call   c0100297 <cprintf>
c0100451:	83 c4 10             	add    $0x10,%esp
    
    cprintf("stack trackback:\n");
c0100454:	83 ec 0c             	sub    $0xc,%esp
c0100457:	68 88 b9 10 c0       	push   $0xc010b988
c010045c:	e8 36 fe ff ff       	call   c0100297 <cprintf>
c0100461:	83 c4 10             	add    $0x10,%esp
    print_stackframe();
c0100464:	e8 ee 06 00 00       	call   c0100b57 <print_stackframe>
c0100469:	eb 01                	jmp    c010046c <__panic+0x6f>
 * "panic: 'message'", and then enters the kernel monitor.
 * */
void
__panic(const char *file, int line, const char *fmt, ...) {
    if (is_panic) {
        goto panic_dead;
c010046b:	90                   	nop
    print_stackframe();
    
    va_end(ap);

panic_dead:
    intr_disable();
c010046c:	e8 4b 1d 00 00       	call   c01021bc <intr_disable>
    while (1) {
        kmonitor(NULL);
c0100471:	83 ec 0c             	sub    $0xc,%esp
c0100474:	6a 00                	push   $0x0
c0100476:	e8 14 09 00 00       	call   c0100d8f <kmonitor>
c010047b:	83 c4 10             	add    $0x10,%esp
    }
c010047e:	eb f1                	jmp    c0100471 <__panic+0x74>

c0100480 <__warn>:
}

/* __warn - like panic, but don't */
void
__warn(const char *file, int line, const char *fmt, ...) {
c0100480:	55                   	push   %ebp
c0100481:	89 e5                	mov    %esp,%ebp
c0100483:	83 ec 18             	sub    $0x18,%esp
    va_list ap;
    va_start(ap, fmt);
c0100486:	8d 45 14             	lea    0x14(%ebp),%eax
c0100489:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cprintf("kernel warning at %s:%d:\n    ", file, line);
c010048c:	83 ec 04             	sub    $0x4,%esp
c010048f:	ff 75 0c             	pushl  0xc(%ebp)
c0100492:	ff 75 08             	pushl  0x8(%ebp)
c0100495:	68 9a b9 10 c0       	push   $0xc010b99a
c010049a:	e8 f8 fd ff ff       	call   c0100297 <cprintf>
c010049f:	83 c4 10             	add    $0x10,%esp
    vcprintf(fmt, ap);
c01004a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01004a5:	83 ec 08             	sub    $0x8,%esp
c01004a8:	50                   	push   %eax
c01004a9:	ff 75 10             	pushl  0x10(%ebp)
c01004ac:	e8 bd fd ff ff       	call   c010026e <vcprintf>
c01004b1:	83 c4 10             	add    $0x10,%esp
    cprintf("\n");
c01004b4:	83 ec 0c             	sub    $0xc,%esp
c01004b7:	68 86 b9 10 c0       	push   $0xc010b986
c01004bc:	e8 d6 fd ff ff       	call   c0100297 <cprintf>
c01004c1:	83 c4 10             	add    $0x10,%esp
    va_end(ap);
}
c01004c4:	90                   	nop
c01004c5:	c9                   	leave  
c01004c6:	c3                   	ret    

c01004c7 <is_kernel_panic>:

bool
is_kernel_panic(void) {
c01004c7:	55                   	push   %ebp
c01004c8:	89 e5                	mov    %esp,%ebp
    return is_panic;
c01004ca:	a1 20 04 1b c0       	mov    0xc01b0420,%eax
}
c01004cf:	5d                   	pop    %ebp
c01004d0:	c3                   	ret    

c01004d1 <stab_binsearch>:
 *      stab_binsearch(stabs, &left, &right, N_SO, 0xf0100184);
 * will exit setting left = 118, right = 554.
 * */
static void
stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
           int type, uintptr_t addr) {
c01004d1:	55                   	push   %ebp
c01004d2:	89 e5                	mov    %esp,%ebp
c01004d4:	83 ec 20             	sub    $0x20,%esp
    int l = *region_left, r = *region_right, any_matches = 0;
c01004d7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01004da:	8b 00                	mov    (%eax),%eax
c01004dc:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01004df:	8b 45 10             	mov    0x10(%ebp),%eax
c01004e2:	8b 00                	mov    (%eax),%eax
c01004e4:	89 45 f8             	mov    %eax,-0x8(%ebp)
c01004e7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    while (l <= r) {
c01004ee:	e9 d2 00 00 00       	jmp    c01005c5 <stab_binsearch+0xf4>
        int true_m = (l + r) / 2, m = true_m;
c01004f3:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01004f6:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01004f9:	01 d0                	add    %edx,%eax
c01004fb:	89 c2                	mov    %eax,%edx
c01004fd:	c1 ea 1f             	shr    $0x1f,%edx
c0100500:	01 d0                	add    %edx,%eax
c0100502:	d1 f8                	sar    %eax
c0100504:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0100507:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010050a:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // search for earliest stab with right type
        while (m >= l && stabs[m].n_type != type) {
c010050d:	eb 04                	jmp    c0100513 <stab_binsearch+0x42>
            m --;
c010050f:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)

    while (l <= r) {
        int true_m = (l + r) / 2, m = true_m;

        // search for earliest stab with right type
        while (m >= l && stabs[m].n_type != type) {
c0100513:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100516:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100519:	7c 1f                	jl     c010053a <stab_binsearch+0x69>
c010051b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010051e:	89 d0                	mov    %edx,%eax
c0100520:	01 c0                	add    %eax,%eax
c0100522:	01 d0                	add    %edx,%eax
c0100524:	c1 e0 02             	shl    $0x2,%eax
c0100527:	89 c2                	mov    %eax,%edx
c0100529:	8b 45 08             	mov    0x8(%ebp),%eax
c010052c:	01 d0                	add    %edx,%eax
c010052e:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100532:	0f b6 c0             	movzbl %al,%eax
c0100535:	3b 45 14             	cmp    0x14(%ebp),%eax
c0100538:	75 d5                	jne    c010050f <stab_binsearch+0x3e>
            m --;
        }
        if (m < l) {    // no match in [l, m]
c010053a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010053d:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100540:	7d 0b                	jge    c010054d <stab_binsearch+0x7c>
            l = true_m + 1;
c0100542:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100545:	83 c0 01             	add    $0x1,%eax
c0100548:	89 45 fc             	mov    %eax,-0x4(%ebp)
            continue;
c010054b:	eb 78                	jmp    c01005c5 <stab_binsearch+0xf4>
        }

        // actual binary search
        any_matches = 1;
c010054d:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
        if (stabs[m].n_value < addr) {
c0100554:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100557:	89 d0                	mov    %edx,%eax
c0100559:	01 c0                	add    %eax,%eax
c010055b:	01 d0                	add    %edx,%eax
c010055d:	c1 e0 02             	shl    $0x2,%eax
c0100560:	89 c2                	mov    %eax,%edx
c0100562:	8b 45 08             	mov    0x8(%ebp),%eax
c0100565:	01 d0                	add    %edx,%eax
c0100567:	8b 40 08             	mov    0x8(%eax),%eax
c010056a:	3b 45 18             	cmp    0x18(%ebp),%eax
c010056d:	73 13                	jae    c0100582 <stab_binsearch+0xb1>
            *region_left = m;
c010056f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100572:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100575:	89 10                	mov    %edx,(%eax)
            l = true_m + 1;
c0100577:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010057a:	83 c0 01             	add    $0x1,%eax
c010057d:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0100580:	eb 43                	jmp    c01005c5 <stab_binsearch+0xf4>
        } else if (stabs[m].n_value > addr) {
c0100582:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100585:	89 d0                	mov    %edx,%eax
c0100587:	01 c0                	add    %eax,%eax
c0100589:	01 d0                	add    %edx,%eax
c010058b:	c1 e0 02             	shl    $0x2,%eax
c010058e:	89 c2                	mov    %eax,%edx
c0100590:	8b 45 08             	mov    0x8(%ebp),%eax
c0100593:	01 d0                	add    %edx,%eax
c0100595:	8b 40 08             	mov    0x8(%eax),%eax
c0100598:	3b 45 18             	cmp    0x18(%ebp),%eax
c010059b:	76 16                	jbe    c01005b3 <stab_binsearch+0xe2>
            *region_right = m - 1;
c010059d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01005a0:	8d 50 ff             	lea    -0x1(%eax),%edx
c01005a3:	8b 45 10             	mov    0x10(%ebp),%eax
c01005a6:	89 10                	mov    %edx,(%eax)
            r = m - 1;
c01005a8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01005ab:	83 e8 01             	sub    $0x1,%eax
c01005ae:	89 45 f8             	mov    %eax,-0x8(%ebp)
c01005b1:	eb 12                	jmp    c01005c5 <stab_binsearch+0xf4>
        } else {
            // exact match for 'addr', but continue loop to find
            // *region_right
            *region_left = m;
c01005b3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01005b6:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01005b9:	89 10                	mov    %edx,(%eax)
            l = m;
c01005bb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01005be:	89 45 fc             	mov    %eax,-0x4(%ebp)
            addr ++;
c01005c1:	83 45 18 01          	addl   $0x1,0x18(%ebp)
static void
stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
           int type, uintptr_t addr) {
    int l = *region_left, r = *region_right, any_matches = 0;

    while (l <= r) {
c01005c5:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01005c8:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c01005cb:	0f 8e 22 ff ff ff    	jle    c01004f3 <stab_binsearch+0x22>
            l = m;
            addr ++;
        }
    }

    if (!any_matches) {
c01005d1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01005d5:	75 0f                	jne    c01005e6 <stab_binsearch+0x115>
        *region_right = *region_left - 1;
c01005d7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01005da:	8b 00                	mov    (%eax),%eax
c01005dc:	8d 50 ff             	lea    -0x1(%eax),%edx
c01005df:	8b 45 10             	mov    0x10(%ebp),%eax
c01005e2:	89 10                	mov    %edx,(%eax)
        l = *region_right;
        for (; l > *region_left && stabs[l].n_type != type; l --)
            /* do nothing */;
        *region_left = l;
    }
}
c01005e4:	eb 3f                	jmp    c0100625 <stab_binsearch+0x154>
    if (!any_matches) {
        *region_right = *region_left - 1;
    }
    else {
        // find rightmost region containing 'addr'
        l = *region_right;
c01005e6:	8b 45 10             	mov    0x10(%ebp),%eax
c01005e9:	8b 00                	mov    (%eax),%eax
c01005eb:	89 45 fc             	mov    %eax,-0x4(%ebp)
        for (; l > *region_left && stabs[l].n_type != type; l --)
c01005ee:	eb 04                	jmp    c01005f4 <stab_binsearch+0x123>
c01005f0:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
c01005f4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01005f7:	8b 00                	mov    (%eax),%eax
c01005f9:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c01005fc:	7d 1f                	jge    c010061d <stab_binsearch+0x14c>
c01005fe:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0100601:	89 d0                	mov    %edx,%eax
c0100603:	01 c0                	add    %eax,%eax
c0100605:	01 d0                	add    %edx,%eax
c0100607:	c1 e0 02             	shl    $0x2,%eax
c010060a:	89 c2                	mov    %eax,%edx
c010060c:	8b 45 08             	mov    0x8(%ebp),%eax
c010060f:	01 d0                	add    %edx,%eax
c0100611:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100615:	0f b6 c0             	movzbl %al,%eax
c0100618:	3b 45 14             	cmp    0x14(%ebp),%eax
c010061b:	75 d3                	jne    c01005f0 <stab_binsearch+0x11f>
            /* do nothing */;
        *region_left = l;
c010061d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100620:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0100623:	89 10                	mov    %edx,(%eax)
    }
}
c0100625:	90                   	nop
c0100626:	c9                   	leave  
c0100627:	c3                   	ret    

c0100628 <debuginfo_eip>:
 * the specified instruction address, @addr.  Returns 0 if information
 * was found, and negative if not.  But even if it returns negative it
 * has stored some information into '*info'.
 * */
int
debuginfo_eip(uintptr_t addr, struct eipdebuginfo *info) {
c0100628:	55                   	push   %ebp
c0100629:	89 e5                	mov    %esp,%ebp
c010062b:	83 ec 38             	sub    $0x38,%esp
    const struct stab *stabs, *stab_end;
    const char *stabstr, *stabstr_end;

    info->eip_file = "<unknown>";
c010062e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100631:	c7 00 b8 b9 10 c0    	movl   $0xc010b9b8,(%eax)
    info->eip_line = 0;
c0100637:	8b 45 0c             	mov    0xc(%ebp),%eax
c010063a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    info->eip_fn_name = "<unknown>";
c0100641:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100644:	c7 40 08 b8 b9 10 c0 	movl   $0xc010b9b8,0x8(%eax)
    info->eip_fn_namelen = 9;
c010064b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010064e:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
    info->eip_fn_addr = addr;
c0100655:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100658:	8b 55 08             	mov    0x8(%ebp),%edx
c010065b:	89 50 10             	mov    %edx,0x10(%eax)
    info->eip_fn_narg = 0;
c010065e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100661:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

    // find the relevant set of stabs
    if (addr >= KERNBASE) {
c0100668:	81 7d 08 ff ff ff bf 	cmpl   $0xbfffffff,0x8(%ebp)
c010066f:	76 21                	jbe    c0100692 <debuginfo_eip+0x6a>
        stabs = __STAB_BEGIN__;
c0100671:	c7 45 f4 60 e1 10 c0 	movl   $0xc010e160,-0xc(%ebp)
        stab_end = __STAB_END__;
c0100678:	c7 45 f0 4c 36 12 c0 	movl   $0xc012364c,-0x10(%ebp)
        stabstr = __STABSTR_BEGIN__;
c010067f:	c7 45 ec 4d 36 12 c0 	movl   $0xc012364d,-0x14(%ebp)
        stabstr_end = __STABSTR_END__;
c0100686:	c7 45 e8 98 97 12 c0 	movl   $0xc0129798,-0x18(%ebp)
c010068d:	e9 c3 00 00 00       	jmp    c0100755 <debuginfo_eip+0x12d>
    }
    else {
        // user-program linker script, tools/user.ld puts the information about the
        // program's stabs (included __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__,
        // and __STABSTR_END__) in a structure located at virtual address USTAB.
        const struct userstabdata *usd = (struct userstabdata *)USTAB;
c0100692:	c7 45 e4 00 00 20 00 	movl   $0x200000,-0x1c(%ebp)

        // make sure that debugger (current process) can access this memory
        struct mm_struct *mm;
        if (current == NULL || (mm = current->mm) == NULL) {
c0100699:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010069e:	85 c0                	test   %eax,%eax
c01006a0:	74 11                	je     c01006b3 <debuginfo_eip+0x8b>
c01006a2:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c01006a7:	8b 40 18             	mov    0x18(%eax),%eax
c01006aa:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01006ad:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01006b1:	75 0a                	jne    c01006bd <debuginfo_eip+0x95>
            return -1;
c01006b3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01006b8:	e9 4e 03 00 00       	jmp    c0100a0b <debuginfo_eip+0x3e3>
        }
        if (!user_mem_check(mm, (uintptr_t)usd, sizeof(struct userstabdata), 0)) {
c01006bd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01006c0:	6a 00                	push   $0x0
c01006c2:	6a 10                	push   $0x10
c01006c4:	50                   	push   %eax
c01006c5:	ff 75 e0             	pushl  -0x20(%ebp)
c01006c8:	e8 01 3f 00 00       	call   c01045ce <user_mem_check>
c01006cd:	83 c4 10             	add    $0x10,%esp
c01006d0:	85 c0                	test   %eax,%eax
c01006d2:	75 0a                	jne    c01006de <debuginfo_eip+0xb6>
            return -1;
c01006d4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01006d9:	e9 2d 03 00 00       	jmp    c0100a0b <debuginfo_eip+0x3e3>
        }

        stabs = usd->stabs;
c01006de:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01006e1:	8b 00                	mov    (%eax),%eax
c01006e3:	89 45 f4             	mov    %eax,-0xc(%ebp)
        stab_end = usd->stab_end;
c01006e6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01006e9:	8b 40 04             	mov    0x4(%eax),%eax
c01006ec:	89 45 f0             	mov    %eax,-0x10(%ebp)
        stabstr = usd->stabstr;
c01006ef:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01006f2:	8b 40 08             	mov    0x8(%eax),%eax
c01006f5:	89 45 ec             	mov    %eax,-0x14(%ebp)
        stabstr_end = usd->stabstr_end;
c01006f8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01006fb:	8b 40 0c             	mov    0xc(%eax),%eax
c01006fe:	89 45 e8             	mov    %eax,-0x18(%ebp)

        // make sure the STABS and string table memory is valid
        if (!user_mem_check(mm, (uintptr_t)stabs, (uintptr_t)stab_end - (uintptr_t)stabs, 0)) {
c0100701:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100704:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100707:	29 c2                	sub    %eax,%edx
c0100709:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010070c:	6a 00                	push   $0x0
c010070e:	52                   	push   %edx
c010070f:	50                   	push   %eax
c0100710:	ff 75 e0             	pushl  -0x20(%ebp)
c0100713:	e8 b6 3e 00 00       	call   c01045ce <user_mem_check>
c0100718:	83 c4 10             	add    $0x10,%esp
c010071b:	85 c0                	test   %eax,%eax
c010071d:	75 0a                	jne    c0100729 <debuginfo_eip+0x101>
            return -1;
c010071f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100724:	e9 e2 02 00 00       	jmp    c0100a0b <debuginfo_eip+0x3e3>
        }
        if (!user_mem_check(mm, (uintptr_t)stabstr, stabstr_end - stabstr, 0)) {
c0100729:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010072c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010072f:	29 c2                	sub    %eax,%edx
c0100731:	89 d0                	mov    %edx,%eax
c0100733:	89 c2                	mov    %eax,%edx
c0100735:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100738:	6a 00                	push   $0x0
c010073a:	52                   	push   %edx
c010073b:	50                   	push   %eax
c010073c:	ff 75 e0             	pushl  -0x20(%ebp)
c010073f:	e8 8a 3e 00 00       	call   c01045ce <user_mem_check>
c0100744:	83 c4 10             	add    $0x10,%esp
c0100747:	85 c0                	test   %eax,%eax
c0100749:	75 0a                	jne    c0100755 <debuginfo_eip+0x12d>
            return -1;
c010074b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100750:	e9 b6 02 00 00       	jmp    c0100a0b <debuginfo_eip+0x3e3>
        }
    }

    // String table validity checks
    if (stabstr_end <= stabstr || stabstr_end[-1] != 0) {
c0100755:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100758:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010075b:	76 0d                	jbe    c010076a <debuginfo_eip+0x142>
c010075d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100760:	83 e8 01             	sub    $0x1,%eax
c0100763:	0f b6 00             	movzbl (%eax),%eax
c0100766:	84 c0                	test   %al,%al
c0100768:	74 0a                	je     c0100774 <debuginfo_eip+0x14c>
        return -1;
c010076a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010076f:	e9 97 02 00 00       	jmp    c0100a0b <debuginfo_eip+0x3e3>
    // 'eip'.  First, we find the basic source file containing 'eip'.
    // Then, we look in that source file for the function.  Then we look
    // for the line number.

    // Search the entire set of stabs for the source file (type N_SO).
    int lfile = 0, rfile = (stab_end - stabs) - 1;
c0100774:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c010077b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010077e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100781:	29 c2                	sub    %eax,%edx
c0100783:	89 d0                	mov    %edx,%eax
c0100785:	c1 f8 02             	sar    $0x2,%eax
c0100788:	69 c0 ab aa aa aa    	imul   $0xaaaaaaab,%eax,%eax
c010078e:	83 e8 01             	sub    $0x1,%eax
c0100791:	89 45 d8             	mov    %eax,-0x28(%ebp)
    stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
c0100794:	83 ec 0c             	sub    $0xc,%esp
c0100797:	ff 75 08             	pushl  0x8(%ebp)
c010079a:	6a 64                	push   $0x64
c010079c:	8d 45 d8             	lea    -0x28(%ebp),%eax
c010079f:	50                   	push   %eax
c01007a0:	8d 45 dc             	lea    -0x24(%ebp),%eax
c01007a3:	50                   	push   %eax
c01007a4:	ff 75 f4             	pushl  -0xc(%ebp)
c01007a7:	e8 25 fd ff ff       	call   c01004d1 <stab_binsearch>
c01007ac:	83 c4 20             	add    $0x20,%esp
    if (lfile == 0)
c01007af:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01007b2:	85 c0                	test   %eax,%eax
c01007b4:	75 0a                	jne    c01007c0 <debuginfo_eip+0x198>
        return -1;
c01007b6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01007bb:	e9 4b 02 00 00       	jmp    c0100a0b <debuginfo_eip+0x3e3>

    // Search within that file's stabs for the function definition
    // (N_FUN).
    int lfun = lfile, rfun = rfile;
c01007c0:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01007c3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c01007c6:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01007c9:	89 45 d0             	mov    %eax,-0x30(%ebp)
    int lline, rline;
    stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
c01007cc:	83 ec 0c             	sub    $0xc,%esp
c01007cf:	ff 75 08             	pushl  0x8(%ebp)
c01007d2:	6a 24                	push   $0x24
c01007d4:	8d 45 d0             	lea    -0x30(%ebp),%eax
c01007d7:	50                   	push   %eax
c01007d8:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c01007db:	50                   	push   %eax
c01007dc:	ff 75 f4             	pushl  -0xc(%ebp)
c01007df:	e8 ed fc ff ff       	call   c01004d1 <stab_binsearch>
c01007e4:	83 c4 20             	add    $0x20,%esp

    if (lfun <= rfun) {
c01007e7:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01007ea:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01007ed:	39 c2                	cmp    %eax,%edx
c01007ef:	7f 7c                	jg     c010086d <debuginfo_eip+0x245>
        // stabs[lfun] points to the function name
        // in the string table, but check bounds just in case.
        if (stabs[lfun].n_strx < stabstr_end - stabstr) {
c01007f1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01007f4:	89 c2                	mov    %eax,%edx
c01007f6:	89 d0                	mov    %edx,%eax
c01007f8:	01 c0                	add    %eax,%eax
c01007fa:	01 d0                	add    %edx,%eax
c01007fc:	c1 e0 02             	shl    $0x2,%eax
c01007ff:	89 c2                	mov    %eax,%edx
c0100801:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100804:	01 d0                	add    %edx,%eax
c0100806:	8b 00                	mov    (%eax),%eax
c0100808:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c010080b:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010080e:	29 d1                	sub    %edx,%ecx
c0100810:	89 ca                	mov    %ecx,%edx
c0100812:	39 d0                	cmp    %edx,%eax
c0100814:	73 22                	jae    c0100838 <debuginfo_eip+0x210>
            info->eip_fn_name = stabstr + stabs[lfun].n_strx;
c0100816:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100819:	89 c2                	mov    %eax,%edx
c010081b:	89 d0                	mov    %edx,%eax
c010081d:	01 c0                	add    %eax,%eax
c010081f:	01 d0                	add    %edx,%eax
c0100821:	c1 e0 02             	shl    $0x2,%eax
c0100824:	89 c2                	mov    %eax,%edx
c0100826:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100829:	01 d0                	add    %edx,%eax
c010082b:	8b 10                	mov    (%eax),%edx
c010082d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100830:	01 c2                	add    %eax,%edx
c0100832:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100835:	89 50 08             	mov    %edx,0x8(%eax)
        }
        info->eip_fn_addr = stabs[lfun].n_value;
c0100838:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010083b:	89 c2                	mov    %eax,%edx
c010083d:	89 d0                	mov    %edx,%eax
c010083f:	01 c0                	add    %eax,%eax
c0100841:	01 d0                	add    %edx,%eax
c0100843:	c1 e0 02             	shl    $0x2,%eax
c0100846:	89 c2                	mov    %eax,%edx
c0100848:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010084b:	01 d0                	add    %edx,%eax
c010084d:	8b 50 08             	mov    0x8(%eax),%edx
c0100850:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100853:	89 50 10             	mov    %edx,0x10(%eax)
        addr -= info->eip_fn_addr;
c0100856:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100859:	8b 40 10             	mov    0x10(%eax),%eax
c010085c:	29 45 08             	sub    %eax,0x8(%ebp)
        // Search within the function definition for the line number.
        lline = lfun;
c010085f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100862:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfun;
c0100865:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0100868:	89 45 c8             	mov    %eax,-0x38(%ebp)
c010086b:	eb 15                	jmp    c0100882 <debuginfo_eip+0x25a>
    } else {
        // Couldn't find function stab!  Maybe we're in an assembly
        // file.  Search the whole file for the line number.
        info->eip_fn_addr = addr;
c010086d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100870:	8b 55 08             	mov    0x8(%ebp),%edx
c0100873:	89 50 10             	mov    %edx,0x10(%eax)
        lline = lfile;
c0100876:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100879:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfile;
c010087c:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010087f:	89 45 c8             	mov    %eax,-0x38(%ebp)
    }
    info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
c0100882:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100885:	8b 40 08             	mov    0x8(%eax),%eax
c0100888:	83 ec 08             	sub    $0x8,%esp
c010088b:	6a 3a                	push   $0x3a
c010088d:	50                   	push   %eax
c010088e:	e8 f6 a5 00 00       	call   c010ae89 <strfind>
c0100893:	83 c4 10             	add    $0x10,%esp
c0100896:	89 c2                	mov    %eax,%edx
c0100898:	8b 45 0c             	mov    0xc(%ebp),%eax
c010089b:	8b 40 08             	mov    0x8(%eax),%eax
c010089e:	29 c2                	sub    %eax,%edx
c01008a0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01008a3:	89 50 0c             	mov    %edx,0xc(%eax)

    // Search within [lline, rline] for the line number stab.
    // If found, set info->eip_line to the right line number.
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
c01008a6:	83 ec 0c             	sub    $0xc,%esp
c01008a9:	ff 75 08             	pushl  0x8(%ebp)
c01008ac:	6a 44                	push   $0x44
c01008ae:	8d 45 c8             	lea    -0x38(%ebp),%eax
c01008b1:	50                   	push   %eax
c01008b2:	8d 45 cc             	lea    -0x34(%ebp),%eax
c01008b5:	50                   	push   %eax
c01008b6:	ff 75 f4             	pushl  -0xc(%ebp)
c01008b9:	e8 13 fc ff ff       	call   c01004d1 <stab_binsearch>
c01008be:	83 c4 20             	add    $0x20,%esp
    if (lline <= rline) {
c01008c1:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01008c4:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01008c7:	39 c2                	cmp    %eax,%edx
c01008c9:	7f 24                	jg     c01008ef <debuginfo_eip+0x2c7>
        info->eip_line = stabs[rline].n_desc;
c01008cb:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01008ce:	89 c2                	mov    %eax,%edx
c01008d0:	89 d0                	mov    %edx,%eax
c01008d2:	01 c0                	add    %eax,%eax
c01008d4:	01 d0                	add    %edx,%eax
c01008d6:	c1 e0 02             	shl    $0x2,%eax
c01008d9:	89 c2                	mov    %eax,%edx
c01008db:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01008de:	01 d0                	add    %edx,%eax
c01008e0:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c01008e4:	0f b7 d0             	movzwl %ax,%edx
c01008e7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01008ea:	89 50 04             	mov    %edx,0x4(%eax)

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c01008ed:	eb 13                	jmp    c0100902 <debuginfo_eip+0x2da>
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
    if (lline <= rline) {
        info->eip_line = stabs[rline].n_desc;
    } else {
        return -1;
c01008ef:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01008f4:	e9 12 01 00 00       	jmp    c0100a0b <debuginfo_eip+0x3e3>
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
           && stabs[lline].n_type != N_SOL
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
        lline --;
c01008f9:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01008fc:	83 e8 01             	sub    $0x1,%eax
c01008ff:	89 45 cc             	mov    %eax,-0x34(%ebp)

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c0100902:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0100905:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100908:	39 c2                	cmp    %eax,%edx
c010090a:	7c 56                	jl     c0100962 <debuginfo_eip+0x33a>
           && stabs[lline].n_type != N_SOL
c010090c:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010090f:	89 c2                	mov    %eax,%edx
c0100911:	89 d0                	mov    %edx,%eax
c0100913:	01 c0                	add    %eax,%eax
c0100915:	01 d0                	add    %edx,%eax
c0100917:	c1 e0 02             	shl    $0x2,%eax
c010091a:	89 c2                	mov    %eax,%edx
c010091c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010091f:	01 d0                	add    %edx,%eax
c0100921:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100925:	3c 84                	cmp    $0x84,%al
c0100927:	74 39                	je     c0100962 <debuginfo_eip+0x33a>
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
c0100929:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010092c:	89 c2                	mov    %eax,%edx
c010092e:	89 d0                	mov    %edx,%eax
c0100930:	01 c0                	add    %eax,%eax
c0100932:	01 d0                	add    %edx,%eax
c0100934:	c1 e0 02             	shl    $0x2,%eax
c0100937:	89 c2                	mov    %eax,%edx
c0100939:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010093c:	01 d0                	add    %edx,%eax
c010093e:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100942:	3c 64                	cmp    $0x64,%al
c0100944:	75 b3                	jne    c01008f9 <debuginfo_eip+0x2d1>
c0100946:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100949:	89 c2                	mov    %eax,%edx
c010094b:	89 d0                	mov    %edx,%eax
c010094d:	01 c0                	add    %eax,%eax
c010094f:	01 d0                	add    %edx,%eax
c0100951:	c1 e0 02             	shl    $0x2,%eax
c0100954:	89 c2                	mov    %eax,%edx
c0100956:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100959:	01 d0                	add    %edx,%eax
c010095b:	8b 40 08             	mov    0x8(%eax),%eax
c010095e:	85 c0                	test   %eax,%eax
c0100960:	74 97                	je     c01008f9 <debuginfo_eip+0x2d1>
        lline --;
    }
    if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr) {
c0100962:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0100965:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100968:	39 c2                	cmp    %eax,%edx
c010096a:	7c 46                	jl     c01009b2 <debuginfo_eip+0x38a>
c010096c:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010096f:	89 c2                	mov    %eax,%edx
c0100971:	89 d0                	mov    %edx,%eax
c0100973:	01 c0                	add    %eax,%eax
c0100975:	01 d0                	add    %edx,%eax
c0100977:	c1 e0 02             	shl    $0x2,%eax
c010097a:	89 c2                	mov    %eax,%edx
c010097c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010097f:	01 d0                	add    %edx,%eax
c0100981:	8b 00                	mov    (%eax),%eax
c0100983:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c0100986:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0100989:	29 d1                	sub    %edx,%ecx
c010098b:	89 ca                	mov    %ecx,%edx
c010098d:	39 d0                	cmp    %edx,%eax
c010098f:	73 21                	jae    c01009b2 <debuginfo_eip+0x38a>
        info->eip_file = stabstr + stabs[lline].n_strx;
c0100991:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100994:	89 c2                	mov    %eax,%edx
c0100996:	89 d0                	mov    %edx,%eax
c0100998:	01 c0                	add    %eax,%eax
c010099a:	01 d0                	add    %edx,%eax
c010099c:	c1 e0 02             	shl    $0x2,%eax
c010099f:	89 c2                	mov    %eax,%edx
c01009a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01009a4:	01 d0                	add    %edx,%eax
c01009a6:	8b 10                	mov    (%eax),%edx
c01009a8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01009ab:	01 c2                	add    %eax,%edx
c01009ad:	8b 45 0c             	mov    0xc(%ebp),%eax
c01009b0:	89 10                	mov    %edx,(%eax)
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
c01009b2:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01009b5:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01009b8:	39 c2                	cmp    %eax,%edx
c01009ba:	7d 4a                	jge    c0100a06 <debuginfo_eip+0x3de>
        for (lline = lfun + 1;
c01009bc:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01009bf:	83 c0 01             	add    $0x1,%eax
c01009c2:	89 45 cc             	mov    %eax,-0x34(%ebp)
c01009c5:	eb 18                	jmp    c01009df <debuginfo_eip+0x3b7>
             lline < rfun && stabs[lline].n_type == N_PSYM;
             lline ++) {
            info->eip_fn_narg ++;
c01009c7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01009ca:	8b 40 14             	mov    0x14(%eax),%eax
c01009cd:	8d 50 01             	lea    0x1(%eax),%edx
c01009d0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01009d3:	89 50 14             	mov    %edx,0x14(%eax)
    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
             lline < rfun && stabs[lline].n_type == N_PSYM;
             lline ++) {
c01009d6:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01009d9:	83 c0 01             	add    $0x1,%eax
c01009dc:	89 45 cc             	mov    %eax,-0x34(%ebp)

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
             lline < rfun && stabs[lline].n_type == N_PSYM;
c01009df:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01009e2:	8b 45 d0             	mov    -0x30(%ebp),%eax
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
c01009e5:	39 c2                	cmp    %eax,%edx
c01009e7:	7d 1d                	jge    c0100a06 <debuginfo_eip+0x3de>
             lline < rfun && stabs[lline].n_type == N_PSYM;
c01009e9:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01009ec:	89 c2                	mov    %eax,%edx
c01009ee:	89 d0                	mov    %edx,%eax
c01009f0:	01 c0                	add    %eax,%eax
c01009f2:	01 d0                	add    %edx,%eax
c01009f4:	c1 e0 02             	shl    $0x2,%eax
c01009f7:	89 c2                	mov    %eax,%edx
c01009f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01009fc:	01 d0                	add    %edx,%eax
c01009fe:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100a02:	3c a0                	cmp    $0xa0,%al
c0100a04:	74 c1                	je     c01009c7 <debuginfo_eip+0x39f>
             lline ++) {
            info->eip_fn_narg ++;
        }
    }
    return 0;
c0100a06:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100a0b:	c9                   	leave  
c0100a0c:	c3                   	ret    

c0100a0d <print_kerninfo>:
 * print_kerninfo - print the information about kernel, including the location
 * of kernel entry, the start addresses of data and text segements, the start
 * address of free memory and how many memory that kernel has used.
 * */
void
print_kerninfo(void) {
c0100a0d:	55                   	push   %ebp
c0100a0e:	89 e5                	mov    %esp,%ebp
c0100a10:	83 ec 08             	sub    $0x8,%esp
    extern char etext[], edata[], end[], kern_init[];
    cprintf("Special kernel symbols:\n");
c0100a13:	83 ec 0c             	sub    $0xc,%esp
c0100a16:	68 c2 b9 10 c0       	push   $0xc010b9c2
c0100a1b:	e8 77 f8 ff ff       	call   c0100297 <cprintf>
c0100a20:	83 c4 10             	add    $0x10,%esp
    cprintf("  entry  0x%08x (phys)\n", kern_init);
c0100a23:	83 ec 08             	sub    $0x8,%esp
c0100a26:	68 36 00 10 c0       	push   $0xc0100036
c0100a2b:	68 db b9 10 c0       	push   $0xc010b9db
c0100a30:	e8 62 f8 ff ff       	call   c0100297 <cprintf>
c0100a35:	83 c4 10             	add    $0x10,%esp
    cprintf("  etext  0x%08x (phys)\n", etext);
c0100a38:	83 ec 08             	sub    $0x8,%esp
c0100a3b:	68 a9 b8 10 c0       	push   $0xc010b8a9
c0100a40:	68 f3 b9 10 c0       	push   $0xc010b9f3
c0100a45:	e8 4d f8 ff ff       	call   c0100297 <cprintf>
c0100a4a:	83 c4 10             	add    $0x10,%esp
    cprintf("  edata  0x%08x (phys)\n", edata);
c0100a4d:	83 ec 08             	sub    $0x8,%esp
c0100a50:	68 00 00 1b c0       	push   $0xc01b0000
c0100a55:	68 0b ba 10 c0       	push   $0xc010ba0b
c0100a5a:	e8 38 f8 ff ff       	call   c0100297 <cprintf>
c0100a5f:	83 c4 10             	add    $0x10,%esp
    cprintf("  end    0x%08x (phys)\n", end);
c0100a62:	83 ec 08             	sub    $0x8,%esp
c0100a65:	68 c4 31 1b c0       	push   $0xc01b31c4
c0100a6a:	68 23 ba 10 c0       	push   $0xc010ba23
c0100a6f:	e8 23 f8 ff ff       	call   c0100297 <cprintf>
c0100a74:	83 c4 10             	add    $0x10,%esp
    cprintf("Kernel executable memory footprint: %dKB\n", (end - kern_init + 1023)/1024);
c0100a77:	b8 c4 31 1b c0       	mov    $0xc01b31c4,%eax
c0100a7c:	05 ff 03 00 00       	add    $0x3ff,%eax
c0100a81:	ba 36 00 10 c0       	mov    $0xc0100036,%edx
c0100a86:	29 d0                	sub    %edx,%eax
c0100a88:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
c0100a8e:	85 c0                	test   %eax,%eax
c0100a90:	0f 48 c2             	cmovs  %edx,%eax
c0100a93:	c1 f8 0a             	sar    $0xa,%eax
c0100a96:	83 ec 08             	sub    $0x8,%esp
c0100a99:	50                   	push   %eax
c0100a9a:	68 3c ba 10 c0       	push   $0xc010ba3c
c0100a9f:	e8 f3 f7 ff ff       	call   c0100297 <cprintf>
c0100aa4:	83 c4 10             	add    $0x10,%esp
}
c0100aa7:	90                   	nop
c0100aa8:	c9                   	leave  
c0100aa9:	c3                   	ret    

c0100aaa <print_debuginfo>:
/* *
 * print_debuginfo - read and print the stat information for the address @eip,
 * and info.eip_fn_addr should be the first address of the related function.
 * */
void
print_debuginfo(uintptr_t eip) {
c0100aaa:	55                   	push   %ebp
c0100aab:	89 e5                	mov    %esp,%ebp
c0100aad:	81 ec 28 01 00 00    	sub    $0x128,%esp
    struct eipdebuginfo info;
    if (debuginfo_eip(eip, &info) != 0) {
c0100ab3:	83 ec 08             	sub    $0x8,%esp
c0100ab6:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0100ab9:	50                   	push   %eax
c0100aba:	ff 75 08             	pushl  0x8(%ebp)
c0100abd:	e8 66 fb ff ff       	call   c0100628 <debuginfo_eip>
c0100ac2:	83 c4 10             	add    $0x10,%esp
c0100ac5:	85 c0                	test   %eax,%eax
c0100ac7:	74 15                	je     c0100ade <print_debuginfo+0x34>
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
c0100ac9:	83 ec 08             	sub    $0x8,%esp
c0100acc:	ff 75 08             	pushl  0x8(%ebp)
c0100acf:	68 66 ba 10 c0       	push   $0xc010ba66
c0100ad4:	e8 be f7 ff ff       	call   c0100297 <cprintf>
c0100ad9:	83 c4 10             	add    $0x10,%esp
        }
        fnname[j] = '\0';
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
                fnname, eip - info.eip_fn_addr);
    }
}
c0100adc:	eb 65                	jmp    c0100b43 <print_debuginfo+0x99>
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
    }
    else {
        char fnname[256];
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0100ade:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100ae5:	eb 1c                	jmp    c0100b03 <print_debuginfo+0x59>
            fnname[j] = info.eip_fn_name[j];
c0100ae7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0100aea:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100aed:	01 d0                	add    %edx,%eax
c0100aef:	0f b6 00             	movzbl (%eax),%eax
c0100af2:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
c0100af8:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100afb:	01 ca                	add    %ecx,%edx
c0100afd:	88 02                	mov    %al,(%edx)
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
    }
    else {
        char fnname[256];
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0100aff:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100b03:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100b06:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0100b09:	7f dc                	jg     c0100ae7 <print_debuginfo+0x3d>
            fnname[j] = info.eip_fn_name[j];
        }
        fnname[j] = '\0';
c0100b0b:	8d 95 dc fe ff ff    	lea    -0x124(%ebp),%edx
c0100b11:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b14:	01 d0                	add    %edx,%eax
c0100b16:	c6 00 00             	movb   $0x0,(%eax)
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
                fnname, eip - info.eip_fn_addr);
c0100b19:	8b 45 ec             	mov    -0x14(%ebp),%eax
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
            fnname[j] = info.eip_fn_name[j];
        }
        fnname[j] = '\0';
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
c0100b1c:	8b 55 08             	mov    0x8(%ebp),%edx
c0100b1f:	89 d1                	mov    %edx,%ecx
c0100b21:	29 c1                	sub    %eax,%ecx
c0100b23:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0100b26:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100b29:	83 ec 0c             	sub    $0xc,%esp
c0100b2c:	51                   	push   %ecx
c0100b2d:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
c0100b33:	51                   	push   %ecx
c0100b34:	52                   	push   %edx
c0100b35:	50                   	push   %eax
c0100b36:	68 82 ba 10 c0       	push   $0xc010ba82
c0100b3b:	e8 57 f7 ff ff       	call   c0100297 <cprintf>
c0100b40:	83 c4 20             	add    $0x20,%esp
                fnname, eip - info.eip_fn_addr);
    }
}
c0100b43:	90                   	nop
c0100b44:	c9                   	leave  
c0100b45:	c3                   	ret    

c0100b46 <read_eip>:

static __noinline uint32_t
read_eip(void) {
c0100b46:	55                   	push   %ebp
c0100b47:	89 e5                	mov    %esp,%ebp
c0100b49:	83 ec 10             	sub    $0x10,%esp
    uint32_t eip;
    asm volatile("movl 4(%%ebp), %0" : "=r" (eip));
c0100b4c:	8b 45 04             	mov    0x4(%ebp),%eax
c0100b4f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eip;
c0100b52:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0100b55:	c9                   	leave  
c0100b56:	c3                   	ret    

c0100b57 <print_stackframe>:
 *
 * Note that, the length of ebp-chain is limited. In boot/bootasm.S, before jumping
 * to the kernel entry, the value of ebp has been set to zero, that's the boundary.
 * */
void
print_stackframe(void) {
c0100b57:	55                   	push   %ebp
c0100b58:	89 e5                	mov    %esp,%ebp
c0100b5a:	53                   	push   %ebx
c0100b5b:	83 ec 34             	sub    $0x34,%esp
}

static inline uint32_t
read_ebp(void) {
    uint32_t ebp;
    asm volatile ("movl %%ebp, %0" : "=r" (ebp));
c0100b5e:	89 e8                	mov    %ebp,%eax
c0100b60:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return ebp;
c0100b63:	8b 45 e4             	mov    -0x1c(%ebp),%eax
      *    (3.5) popup a calling stackframe
      *           NOTICE: the calling funciton's return addr eip  = ss:[ebp+4]
      *                   the calling funciton's ebp = ss:[ebp]
      */
    // 1. read_ebp
    uint32_t stack_val_ebp = read_ebp();
c0100b66:	89 45 f4             	mov    %eax,-0xc(%ebp)
    // 2. read_eip
    uint32_t stack_val_eip = read_eip();
c0100b69:	e8 d8 ff ff ff       	call   c0100b46 <read_eip>
c0100b6e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    // 3. iterate stacks
    uint32_t stack_val_args[4];
    for (int i = 0; i < STACKFRAME_DEPTH; i++) {
c0100b71:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0100b78:	e9 93 00 00 00       	jmp    c0100c10 <print_stackframe+0xb9>
        cprintf("ebp:0x%08x eip:0x%08x ", stack_val_ebp, stack_val_eip);
c0100b7d:	83 ec 04             	sub    $0x4,%esp
c0100b80:	ff 75 f0             	pushl  -0x10(%ebp)
c0100b83:	ff 75 f4             	pushl  -0xc(%ebp)
c0100b86:	68 94 ba 10 c0       	push   $0xc010ba94
c0100b8b:	e8 07 f7 ff ff       	call   c0100297 <cprintf>
c0100b90:	83 c4 10             	add    $0x10,%esp
        // get args
        for (int j = 0; j < 4; j++) {
c0100b93:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c0100b9a:	eb 1f                	jmp    c0100bbb <print_stackframe+0x64>
            stack_val_args[j] = *(((uint32_t*) stack_val_ebp) + 2 + j);
c0100b9c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100b9f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0100ba6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100ba9:	01 d0                	add    %edx,%eax
c0100bab:	83 c0 08             	add    $0x8,%eax
c0100bae:	8b 10                	mov    (%eax),%edx
c0100bb0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100bb3:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
    // 3. iterate stacks
    uint32_t stack_val_args[4];
    for (int i = 0; i < STACKFRAME_DEPTH; i++) {
        cprintf("ebp:0x%08x eip:0x%08x ", stack_val_ebp, stack_val_eip);
        // get args
        for (int j = 0; j < 4; j++) {
c0100bb7:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
c0100bbb:	83 7d e8 03          	cmpl   $0x3,-0x18(%ebp)
c0100bbf:	7e db                	jle    c0100b9c <print_stackframe+0x45>
            stack_val_args[j] = *(((uint32_t*) stack_val_ebp) + 2 + j);
        }
        cprintf("args:0x%08x 0x%08x 0x%08x 0x%08x\n", stack_val_args[0], 
c0100bc1:	8b 5d e0             	mov    -0x20(%ebp),%ebx
c0100bc4:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0100bc7:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0100bca:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100bcd:	83 ec 0c             	sub    $0xc,%esp
c0100bd0:	53                   	push   %ebx
c0100bd1:	51                   	push   %ecx
c0100bd2:	52                   	push   %edx
c0100bd3:	50                   	push   %eax
c0100bd4:	68 ac ba 10 c0       	push   $0xc010baac
c0100bd9:	e8 b9 f6 ff ff       	call   c0100297 <cprintf>
c0100bde:	83 c4 20             	add    $0x20,%esp
                stack_val_args[1], stack_val_args[2], stack_val_args[3]);
        // print function info
        print_debuginfo(stack_val_eip - 1);
c0100be1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100be4:	83 e8 01             	sub    $0x1,%eax
c0100be7:	83 ec 0c             	sub    $0xc,%esp
c0100bea:	50                   	push   %eax
c0100beb:	e8 ba fe ff ff       	call   c0100aaa <print_debuginfo>
c0100bf0:	83 c4 10             	add    $0x10,%esp
        // pop up stackframe, refresh ebp & eip
        stack_val_eip = *(((uint32_t*) stack_val_ebp) + 1);
c0100bf3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100bf6:	83 c0 04             	add    $0x4,%eax
c0100bf9:	8b 00                	mov    (%eax),%eax
c0100bfb:	89 45 f0             	mov    %eax,-0x10(%ebp)
        stack_val_ebp = *(((uint32_t*) stack_val_ebp));
c0100bfe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100c01:	8b 00                	mov    (%eax),%eax
c0100c03:	89 45 f4             	mov    %eax,-0xc(%ebp)
        // ebp should be valid
        if (stack_val_ebp <= 0) {
c0100c06:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100c0a:	74 10                	je     c0100c1c <print_stackframe+0xc5>
    uint32_t stack_val_ebp = read_ebp();
    // 2. read_eip
    uint32_t stack_val_eip = read_eip();
    // 3. iterate stacks
    uint32_t stack_val_args[4];
    for (int i = 0; i < STACKFRAME_DEPTH; i++) {
c0100c0c:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0100c10:	83 7d ec 13          	cmpl   $0x13,-0x14(%ebp)
c0100c14:	0f 8e 63 ff ff ff    	jle    c0100b7d <print_stackframe+0x26>
        // ebp should be valid
        if (stack_val_ebp <= 0) {
            break;
        }
    }
}
c0100c1a:	eb 01                	jmp    c0100c1d <print_stackframe+0xc6>
        // pop up stackframe, refresh ebp & eip
        stack_val_eip = *(((uint32_t*) stack_val_ebp) + 1);
        stack_val_ebp = *(((uint32_t*) stack_val_ebp));
        // ebp should be valid
        if (stack_val_ebp <= 0) {
            break;
c0100c1c:	90                   	nop
        }
    }
}
c0100c1d:	90                   	nop
c0100c1e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0100c21:	c9                   	leave  
c0100c22:	c3                   	ret    

c0100c23 <parse>:
#define MAXARGS         16
#define WHITESPACE      " \t\n\r"

/* parse - parse the command buffer into whitespace-separated arguments */
static int
parse(char *buf, char **argv) {
c0100c23:	55                   	push   %ebp
c0100c24:	89 e5                	mov    %esp,%ebp
c0100c26:	83 ec 18             	sub    $0x18,%esp
    int argc = 0;
c0100c29:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100c30:	eb 0c                	jmp    c0100c3e <parse+0x1b>
            *buf ++ = '\0';
c0100c32:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c35:	8d 50 01             	lea    0x1(%eax),%edx
c0100c38:	89 55 08             	mov    %edx,0x8(%ebp)
c0100c3b:	c6 00 00             	movb   $0x0,(%eax)
static int
parse(char *buf, char **argv) {
    int argc = 0;
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100c3e:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c41:	0f b6 00             	movzbl (%eax),%eax
c0100c44:	84 c0                	test   %al,%al
c0100c46:	74 1e                	je     c0100c66 <parse+0x43>
c0100c48:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c4b:	0f b6 00             	movzbl (%eax),%eax
c0100c4e:	0f be c0             	movsbl %al,%eax
c0100c51:	83 ec 08             	sub    $0x8,%esp
c0100c54:	50                   	push   %eax
c0100c55:	68 50 bb 10 c0       	push   $0xc010bb50
c0100c5a:	e8 f7 a1 00 00       	call   c010ae56 <strchr>
c0100c5f:	83 c4 10             	add    $0x10,%esp
c0100c62:	85 c0                	test   %eax,%eax
c0100c64:	75 cc                	jne    c0100c32 <parse+0xf>
            *buf ++ = '\0';
        }
        if (*buf == '\0') {
c0100c66:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c69:	0f b6 00             	movzbl (%eax),%eax
c0100c6c:	84 c0                	test   %al,%al
c0100c6e:	74 69                	je     c0100cd9 <parse+0xb6>
            break;
        }

        // save and scan past next arg
        if (argc == MAXARGS - 1) {
c0100c70:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
c0100c74:	75 12                	jne    c0100c88 <parse+0x65>
            cprintf("Too many arguments (max %d).\n", MAXARGS);
c0100c76:	83 ec 08             	sub    $0x8,%esp
c0100c79:	6a 10                	push   $0x10
c0100c7b:	68 55 bb 10 c0       	push   $0xc010bb55
c0100c80:	e8 12 f6 ff ff       	call   c0100297 <cprintf>
c0100c85:	83 c4 10             	add    $0x10,%esp
        }
        argv[argc ++] = buf;
c0100c88:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100c8b:	8d 50 01             	lea    0x1(%eax),%edx
c0100c8e:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0100c91:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0100c98:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100c9b:	01 c2                	add    %eax,%edx
c0100c9d:	8b 45 08             	mov    0x8(%ebp),%eax
c0100ca0:	89 02                	mov    %eax,(%edx)
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c0100ca2:	eb 04                	jmp    c0100ca8 <parse+0x85>
            buf ++;
c0100ca4:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        // save and scan past next arg
        if (argc == MAXARGS - 1) {
            cprintf("Too many arguments (max %d).\n", MAXARGS);
        }
        argv[argc ++] = buf;
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c0100ca8:	8b 45 08             	mov    0x8(%ebp),%eax
c0100cab:	0f b6 00             	movzbl (%eax),%eax
c0100cae:	84 c0                	test   %al,%al
c0100cb0:	0f 84 7a ff ff ff    	je     c0100c30 <parse+0xd>
c0100cb6:	8b 45 08             	mov    0x8(%ebp),%eax
c0100cb9:	0f b6 00             	movzbl (%eax),%eax
c0100cbc:	0f be c0             	movsbl %al,%eax
c0100cbf:	83 ec 08             	sub    $0x8,%esp
c0100cc2:	50                   	push   %eax
c0100cc3:	68 50 bb 10 c0       	push   $0xc010bb50
c0100cc8:	e8 89 a1 00 00       	call   c010ae56 <strchr>
c0100ccd:	83 c4 10             	add    $0x10,%esp
c0100cd0:	85 c0                	test   %eax,%eax
c0100cd2:	74 d0                	je     c0100ca4 <parse+0x81>
            buf ++;
        }
    }
c0100cd4:	e9 57 ff ff ff       	jmp    c0100c30 <parse+0xd>
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
            *buf ++ = '\0';
        }
        if (*buf == '\0') {
            break;
c0100cd9:	90                   	nop
        argv[argc ++] = buf;
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
            buf ++;
        }
    }
    return argc;
c0100cda:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100cdd:	c9                   	leave  
c0100cde:	c3                   	ret    

c0100cdf <runcmd>:
/* *
 * runcmd - parse the input string, split it into separated arguments
 * and then lookup and invoke some related commands/
 * */
static int
runcmd(char *buf, struct trapframe *tf) {
c0100cdf:	55                   	push   %ebp
c0100ce0:	89 e5                	mov    %esp,%ebp
c0100ce2:	83 ec 58             	sub    $0x58,%esp
    char *argv[MAXARGS];
    int argc = parse(buf, argv);
c0100ce5:	83 ec 08             	sub    $0x8,%esp
c0100ce8:	8d 45 b0             	lea    -0x50(%ebp),%eax
c0100ceb:	50                   	push   %eax
c0100cec:	ff 75 08             	pushl  0x8(%ebp)
c0100cef:	e8 2f ff ff ff       	call   c0100c23 <parse>
c0100cf4:	83 c4 10             	add    $0x10,%esp
c0100cf7:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (argc == 0) {
c0100cfa:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0100cfe:	75 0a                	jne    c0100d0a <runcmd+0x2b>
        return 0;
c0100d00:	b8 00 00 00 00       	mov    $0x0,%eax
c0100d05:	e9 83 00 00 00       	jmp    c0100d8d <runcmd+0xae>
    }
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100d0a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100d11:	eb 59                	jmp    c0100d6c <runcmd+0x8d>
        if (strcmp(commands[i].name, argv[0]) == 0) {
c0100d13:	8b 4d b0             	mov    -0x50(%ebp),%ecx
c0100d16:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100d19:	89 d0                	mov    %edx,%eax
c0100d1b:	01 c0                	add    %eax,%eax
c0100d1d:	01 d0                	add    %edx,%eax
c0100d1f:	c1 e0 02             	shl    $0x2,%eax
c0100d22:	05 00 c0 12 c0       	add    $0xc012c000,%eax
c0100d27:	8b 00                	mov    (%eax),%eax
c0100d29:	83 ec 08             	sub    $0x8,%esp
c0100d2c:	51                   	push   %ecx
c0100d2d:	50                   	push   %eax
c0100d2e:	e8 83 a0 00 00       	call   c010adb6 <strcmp>
c0100d33:	83 c4 10             	add    $0x10,%esp
c0100d36:	85 c0                	test   %eax,%eax
c0100d38:	75 2e                	jne    c0100d68 <runcmd+0x89>
            return commands[i].func(argc - 1, argv + 1, tf);
c0100d3a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100d3d:	89 d0                	mov    %edx,%eax
c0100d3f:	01 c0                	add    %eax,%eax
c0100d41:	01 d0                	add    %edx,%eax
c0100d43:	c1 e0 02             	shl    $0x2,%eax
c0100d46:	05 08 c0 12 c0       	add    $0xc012c008,%eax
c0100d4b:	8b 10                	mov    (%eax),%edx
c0100d4d:	8d 45 b0             	lea    -0x50(%ebp),%eax
c0100d50:	83 c0 04             	add    $0x4,%eax
c0100d53:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c0100d56:	83 e9 01             	sub    $0x1,%ecx
c0100d59:	83 ec 04             	sub    $0x4,%esp
c0100d5c:	ff 75 0c             	pushl  0xc(%ebp)
c0100d5f:	50                   	push   %eax
c0100d60:	51                   	push   %ecx
c0100d61:	ff d2                	call   *%edx
c0100d63:	83 c4 10             	add    $0x10,%esp
c0100d66:	eb 25                	jmp    c0100d8d <runcmd+0xae>
    int argc = parse(buf, argv);
    if (argc == 0) {
        return 0;
    }
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100d68:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100d6c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100d6f:	83 f8 02             	cmp    $0x2,%eax
c0100d72:	76 9f                	jbe    c0100d13 <runcmd+0x34>
        if (strcmp(commands[i].name, argv[0]) == 0) {
            return commands[i].func(argc - 1, argv + 1, tf);
        }
    }
    cprintf("Unknown command '%s'\n", argv[0]);
c0100d74:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0100d77:	83 ec 08             	sub    $0x8,%esp
c0100d7a:	50                   	push   %eax
c0100d7b:	68 73 bb 10 c0       	push   $0xc010bb73
c0100d80:	e8 12 f5 ff ff       	call   c0100297 <cprintf>
c0100d85:	83 c4 10             	add    $0x10,%esp
    return 0;
c0100d88:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100d8d:	c9                   	leave  
c0100d8e:	c3                   	ret    

c0100d8f <kmonitor>:

/***** Implementations of basic kernel monitor commands *****/

void
kmonitor(struct trapframe *tf) {
c0100d8f:	55                   	push   %ebp
c0100d90:	89 e5                	mov    %esp,%ebp
c0100d92:	83 ec 18             	sub    $0x18,%esp
    cprintf("Welcome to the kernel debug monitor!!\n");
c0100d95:	83 ec 0c             	sub    $0xc,%esp
c0100d98:	68 8c bb 10 c0       	push   $0xc010bb8c
c0100d9d:	e8 f5 f4 ff ff       	call   c0100297 <cprintf>
c0100da2:	83 c4 10             	add    $0x10,%esp
    cprintf("Type 'help' for a list of commands.\n");
c0100da5:	83 ec 0c             	sub    $0xc,%esp
c0100da8:	68 b4 bb 10 c0       	push   $0xc010bbb4
c0100dad:	e8 e5 f4 ff ff       	call   c0100297 <cprintf>
c0100db2:	83 c4 10             	add    $0x10,%esp

    if (tf != NULL) {
c0100db5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0100db9:	74 0e                	je     c0100dc9 <kmonitor+0x3a>
        print_trapframe(tf);
c0100dbb:	83 ec 0c             	sub    $0xc,%esp
c0100dbe:	ff 75 08             	pushl  0x8(%ebp)
c0100dc1:	e8 6d 16 00 00       	call   c0102433 <print_trapframe>
c0100dc6:	83 c4 10             	add    $0x10,%esp
    }

    char *buf;
    while (1) {
        if ((buf = readline("K> ")) != NULL) {
c0100dc9:	83 ec 0c             	sub    $0xc,%esp
c0100dcc:	68 d9 bb 10 c0       	push   $0xc010bbd9
c0100dd1:	e8 65 f5 ff ff       	call   c010033b <readline>
c0100dd6:	83 c4 10             	add    $0x10,%esp
c0100dd9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100ddc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100de0:	74 e7                	je     c0100dc9 <kmonitor+0x3a>
            if (runcmd(buf, tf) < 0) {
c0100de2:	83 ec 08             	sub    $0x8,%esp
c0100de5:	ff 75 08             	pushl  0x8(%ebp)
c0100de8:	ff 75 f4             	pushl  -0xc(%ebp)
c0100deb:	e8 ef fe ff ff       	call   c0100cdf <runcmd>
c0100df0:	83 c4 10             	add    $0x10,%esp
c0100df3:	85 c0                	test   %eax,%eax
c0100df5:	78 02                	js     c0100df9 <kmonitor+0x6a>
                break;
            }
        }
    }
c0100df7:	eb d0                	jmp    c0100dc9 <kmonitor+0x3a>

    char *buf;
    while (1) {
        if ((buf = readline("K> ")) != NULL) {
            if (runcmd(buf, tf) < 0) {
                break;
c0100df9:	90                   	nop
            }
        }
    }
}
c0100dfa:	90                   	nop
c0100dfb:	c9                   	leave  
c0100dfc:	c3                   	ret    

c0100dfd <mon_help>:

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
c0100dfd:	55                   	push   %ebp
c0100dfe:	89 e5                	mov    %esp,%ebp
c0100e00:	83 ec 18             	sub    $0x18,%esp
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100e03:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100e0a:	eb 3c                	jmp    c0100e48 <mon_help+0x4b>
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
c0100e0c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100e0f:	89 d0                	mov    %edx,%eax
c0100e11:	01 c0                	add    %eax,%eax
c0100e13:	01 d0                	add    %edx,%eax
c0100e15:	c1 e0 02             	shl    $0x2,%eax
c0100e18:	05 04 c0 12 c0       	add    $0xc012c004,%eax
c0100e1d:	8b 08                	mov    (%eax),%ecx
c0100e1f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100e22:	89 d0                	mov    %edx,%eax
c0100e24:	01 c0                	add    %eax,%eax
c0100e26:	01 d0                	add    %edx,%eax
c0100e28:	c1 e0 02             	shl    $0x2,%eax
c0100e2b:	05 00 c0 12 c0       	add    $0xc012c000,%eax
c0100e30:	8b 00                	mov    (%eax),%eax
c0100e32:	83 ec 04             	sub    $0x4,%esp
c0100e35:	51                   	push   %ecx
c0100e36:	50                   	push   %eax
c0100e37:	68 dd bb 10 c0       	push   $0xc010bbdd
c0100e3c:	e8 56 f4 ff ff       	call   c0100297 <cprintf>
c0100e41:	83 c4 10             	add    $0x10,%esp

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100e44:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100e48:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100e4b:	83 f8 02             	cmp    $0x2,%eax
c0100e4e:	76 bc                	jbe    c0100e0c <mon_help+0xf>
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
    }
    return 0;
c0100e50:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100e55:	c9                   	leave  
c0100e56:	c3                   	ret    

c0100e57 <mon_kerninfo>:
/* *
 * mon_kerninfo - call print_kerninfo in kern/debug/kdebug.c to
 * print the memory occupancy in kernel.
 * */
int
mon_kerninfo(int argc, char **argv, struct trapframe *tf) {
c0100e57:	55                   	push   %ebp
c0100e58:	89 e5                	mov    %esp,%ebp
c0100e5a:	83 ec 08             	sub    $0x8,%esp
    print_kerninfo();
c0100e5d:	e8 ab fb ff ff       	call   c0100a0d <print_kerninfo>
    return 0;
c0100e62:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100e67:	c9                   	leave  
c0100e68:	c3                   	ret    

c0100e69 <mon_backtrace>:
/* *
 * mon_backtrace - call print_stackframe in kern/debug/kdebug.c to
 * print a backtrace of the stack.
 * */
int
mon_backtrace(int argc, char **argv, struct trapframe *tf) {
c0100e69:	55                   	push   %ebp
c0100e6a:	89 e5                	mov    %esp,%ebp
c0100e6c:	83 ec 08             	sub    $0x8,%esp
    print_stackframe();
c0100e6f:	e8 e3 fc ff ff       	call   c0100b57 <print_stackframe>
    return 0;
c0100e74:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100e79:	c9                   	leave  
c0100e7a:	c3                   	ret    

c0100e7b <ide_wait_ready>:
    unsigned int size;          // Size in Sectors
    unsigned char model[41];    // Model in String
} ide_devices[MAX_IDE];

static int
ide_wait_ready(unsigned short iobase, bool check_error) {
c0100e7b:	55                   	push   %ebp
c0100e7c:	89 e5                	mov    %esp,%ebp
c0100e7e:	83 ec 14             	sub    $0x14,%esp
c0100e81:	8b 45 08             	mov    0x8(%ebp),%eax
c0100e84:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    int r;
    while ((r = inb(iobase + ISA_STATUS)) & IDE_BSY)
c0100e88:	90                   	nop
c0100e89:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0100e8d:	83 c0 07             	add    $0x7,%eax
c0100e90:	0f b7 c0             	movzwl %ax,%eax
c0100e93:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0100e97:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0100e9b:	89 c2                	mov    %eax,%edx
c0100e9d:	ec                   	in     (%dx),%al
c0100e9e:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c0100ea1:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c0100ea5:	0f b6 c0             	movzbl %al,%eax
c0100ea8:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0100eab:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100eae:	25 80 00 00 00       	and    $0x80,%eax
c0100eb3:	85 c0                	test   %eax,%eax
c0100eb5:	75 d2                	jne    c0100e89 <ide_wait_ready+0xe>
        /* nothing */;
    if (check_error && (r & (IDE_DF | IDE_ERR)) != 0) {
c0100eb7:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0100ebb:	74 11                	je     c0100ece <ide_wait_ready+0x53>
c0100ebd:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100ec0:	83 e0 21             	and    $0x21,%eax
c0100ec3:	85 c0                	test   %eax,%eax
c0100ec5:	74 07                	je     c0100ece <ide_wait_ready+0x53>
        return -1;
c0100ec7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100ecc:	eb 05                	jmp    c0100ed3 <ide_wait_ready+0x58>
    }
    return 0;
c0100ece:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100ed3:	c9                   	leave  
c0100ed4:	c3                   	ret    

c0100ed5 <ide_init>:

void
ide_init(void) {
c0100ed5:	55                   	push   %ebp
c0100ed6:	89 e5                	mov    %esp,%ebp
c0100ed8:	57                   	push   %edi
c0100ed9:	53                   	push   %ebx
c0100eda:	81 ec 40 02 00 00    	sub    $0x240,%esp
    static_assert((SECTSIZE % 4) == 0);
    unsigned short ideno, iobase;
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c0100ee0:	66 c7 45 f6 00 00    	movw   $0x0,-0xa(%ebp)
c0100ee6:	e9 c1 02 00 00       	jmp    c01011ac <ide_init+0x2d7>
        /* assume that no device here */
        ide_devices[ideno].valid = 0;
c0100eeb:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100eef:	c1 e0 03             	shl    $0x3,%eax
c0100ef2:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0100ef9:	29 c2                	sub    %eax,%edx
c0100efb:	89 d0                	mov    %edx,%eax
c0100efd:	05 40 04 1b c0       	add    $0xc01b0440,%eax
c0100f02:	c6 00 00             	movb   $0x0,(%eax)

        iobase = IO_BASE(ideno);
c0100f05:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100f09:	66 d1 e8             	shr    %ax
c0100f0c:	0f b7 c0             	movzwl %ax,%eax
c0100f0f:	0f b7 04 85 e8 bb 10 	movzwl -0x3fef4418(,%eax,4),%eax
c0100f16:	c0 
c0100f17:	66 89 45 ea          	mov    %ax,-0x16(%ebp)

        /* wait device ready */
        ide_wait_ready(iobase, 0);
c0100f1b:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0100f1f:	6a 00                	push   $0x0
c0100f21:	50                   	push   %eax
c0100f22:	e8 54 ff ff ff       	call   c0100e7b <ide_wait_ready>
c0100f27:	83 c4 08             	add    $0x8,%esp

        /* step1: select drive */
        outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4));
c0100f2a:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100f2e:	83 e0 01             	and    $0x1,%eax
c0100f31:	c1 e0 04             	shl    $0x4,%eax
c0100f34:	83 c8 e0             	or     $0xffffffe0,%eax
c0100f37:	0f b6 c0             	movzbl %al,%eax
c0100f3a:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0100f3e:	83 c2 06             	add    $0x6,%edx
c0100f41:	0f b7 d2             	movzwl %dx,%edx
c0100f44:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c0100f48:	88 45 c7             	mov    %al,-0x39(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0100f4b:	0f b6 45 c7          	movzbl -0x39(%ebp),%eax
c0100f4f:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0100f53:	ee                   	out    %al,(%dx)
        ide_wait_ready(iobase, 0);
c0100f54:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0100f58:	6a 00                	push   $0x0
c0100f5a:	50                   	push   %eax
c0100f5b:	e8 1b ff ff ff       	call   c0100e7b <ide_wait_ready>
c0100f60:	83 c4 08             	add    $0x8,%esp

        /* step2: send ATA identify command */
        outb(iobase + ISA_COMMAND, IDE_CMD_IDENTIFY);
c0100f63:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0100f67:	83 c0 07             	add    $0x7,%eax
c0100f6a:	0f b7 c0             	movzwl %ax,%eax
c0100f6d:	66 89 45 e0          	mov    %ax,-0x20(%ebp)
c0100f71:	c6 45 c8 ec          	movb   $0xec,-0x38(%ebp)
c0100f75:	0f b6 45 c8          	movzbl -0x38(%ebp),%eax
c0100f79:	0f b7 55 e0          	movzwl -0x20(%ebp),%edx
c0100f7d:	ee                   	out    %al,(%dx)
        ide_wait_ready(iobase, 0);
c0100f7e:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0100f82:	6a 00                	push   $0x0
c0100f84:	50                   	push   %eax
c0100f85:	e8 f1 fe ff ff       	call   c0100e7b <ide_wait_ready>
c0100f8a:	83 c4 08             	add    $0x8,%esp

        /* step3: polling */
        if (inb(iobase + ISA_STATUS) == 0 || ide_wait_ready(iobase, 1) != 0) {
c0100f8d:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0100f91:	83 c0 07             	add    $0x7,%eax
c0100f94:	0f b7 c0             	movzwl %ax,%eax
c0100f97:	66 89 45 ca          	mov    %ax,-0x36(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0100f9b:	0f b7 45 ca          	movzwl -0x36(%ebp),%eax
c0100f9f:	89 c2                	mov    %eax,%edx
c0100fa1:	ec                   	in     (%dx),%al
c0100fa2:	88 45 c9             	mov    %al,-0x37(%ebp)
    return data;
c0100fa5:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
c0100fa9:	84 c0                	test   %al,%al
c0100fab:	0f 84 ef 01 00 00    	je     c01011a0 <ide_init+0x2cb>
c0100fb1:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0100fb5:	6a 01                	push   $0x1
c0100fb7:	50                   	push   %eax
c0100fb8:	e8 be fe ff ff       	call   c0100e7b <ide_wait_ready>
c0100fbd:	83 c4 08             	add    $0x8,%esp
c0100fc0:	85 c0                	test   %eax,%eax
c0100fc2:	0f 85 d8 01 00 00    	jne    c01011a0 <ide_init+0x2cb>
            continue ;
        }

        /* device is ok */
        ide_devices[ideno].valid = 1;
c0100fc8:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100fcc:	c1 e0 03             	shl    $0x3,%eax
c0100fcf:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0100fd6:	29 c2                	sub    %eax,%edx
c0100fd8:	89 d0                	mov    %edx,%eax
c0100fda:	05 40 04 1b c0       	add    $0xc01b0440,%eax
c0100fdf:	c6 00 01             	movb   $0x1,(%eax)

        /* read identification space of the device */
        unsigned int buffer[128];
        insl(iobase + ISA_DATA, buffer, sizeof(buffer) / sizeof(unsigned int));
c0100fe2:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0100fe6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0100fe9:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
c0100fef:	89 45 c0             	mov    %eax,-0x40(%ebp)
c0100ff2:	c7 45 bc 80 00 00 00 	movl   $0x80,-0x44(%ebp)
}

static inline void
insl(uint32_t port, void *addr, int cnt) {
    asm volatile (
c0100ff9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0100ffc:	8b 4d c0             	mov    -0x40(%ebp),%ecx
c0100fff:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0101002:	89 cb                	mov    %ecx,%ebx
c0101004:	89 df                	mov    %ebx,%edi
c0101006:	89 c1                	mov    %eax,%ecx
c0101008:	fc                   	cld    
c0101009:	f2 6d                	repnz insl (%dx),%es:(%edi)
c010100b:	89 c8                	mov    %ecx,%eax
c010100d:	89 fb                	mov    %edi,%ebx
c010100f:	89 5d c0             	mov    %ebx,-0x40(%ebp)
c0101012:	89 45 bc             	mov    %eax,-0x44(%ebp)

        unsigned char *ident = (unsigned char *)buffer;
c0101015:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
c010101b:	89 45 dc             	mov    %eax,-0x24(%ebp)
        unsigned int sectors;
        unsigned int cmdsets = *(unsigned int *)(ident + IDE_IDENT_CMDSETS);
c010101e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101021:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
c0101027:	89 45 d8             	mov    %eax,-0x28(%ebp)
        /* device use 48-bits or 28-bits addressing */
        if (cmdsets & (1 << 26)) {
c010102a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010102d:	25 00 00 00 04       	and    $0x4000000,%eax
c0101032:	85 c0                	test   %eax,%eax
c0101034:	74 0e                	je     c0101044 <ide_init+0x16f>
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA_EXT);
c0101036:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101039:	8b 80 c8 00 00 00    	mov    0xc8(%eax),%eax
c010103f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0101042:	eb 09                	jmp    c010104d <ide_init+0x178>
        }
        else {
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA);
c0101044:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101047:	8b 40 78             	mov    0x78(%eax),%eax
c010104a:	89 45 f0             	mov    %eax,-0x10(%ebp)
        }
        ide_devices[ideno].sets = cmdsets;
c010104d:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101051:	c1 e0 03             	shl    $0x3,%eax
c0101054:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c010105b:	29 c2                	sub    %eax,%edx
c010105d:	89 d0                	mov    %edx,%eax
c010105f:	8d 90 44 04 1b c0    	lea    -0x3fe4fbbc(%eax),%edx
c0101065:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0101068:	89 02                	mov    %eax,(%edx)
        ide_devices[ideno].size = sectors;
c010106a:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010106e:	c1 e0 03             	shl    $0x3,%eax
c0101071:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101078:	29 c2                	sub    %eax,%edx
c010107a:	89 d0                	mov    %edx,%eax
c010107c:	8d 90 48 04 1b c0    	lea    -0x3fe4fbb8(%eax),%edx
c0101082:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0101085:	89 02                	mov    %eax,(%edx)

        /* check if supports LBA */
        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);
c0101087:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010108a:	83 c0 62             	add    $0x62,%eax
c010108d:	0f b7 00             	movzwl (%eax),%eax
c0101090:	0f b7 c0             	movzwl %ax,%eax
c0101093:	25 00 02 00 00       	and    $0x200,%eax
c0101098:	85 c0                	test   %eax,%eax
c010109a:	75 16                	jne    c01010b2 <ide_init+0x1dd>
c010109c:	68 f0 bb 10 c0       	push   $0xc010bbf0
c01010a1:	68 33 bc 10 c0       	push   $0xc010bc33
c01010a6:	6a 7d                	push   $0x7d
c01010a8:	68 48 bc 10 c0       	push   $0xc010bc48
c01010ad:	e8 4b f3 ff ff       	call   c01003fd <__panic>

        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
c01010b2:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c01010b6:	89 c2                	mov    %eax,%edx
c01010b8:	8d 04 d5 00 00 00 00 	lea    0x0(,%edx,8),%eax
c01010bf:	89 c2                	mov    %eax,%edx
c01010c1:	8d 04 d5 00 00 00 00 	lea    0x0(,%edx,8),%eax
c01010c8:	29 d0                	sub    %edx,%eax
c01010ca:	05 40 04 1b c0       	add    $0xc01b0440,%eax
c01010cf:	83 c0 0c             	add    $0xc,%eax
c01010d2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c01010d5:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01010d8:	83 c0 36             	add    $0x36,%eax
c01010db:	89 45 d0             	mov    %eax,-0x30(%ebp)
        unsigned int i, length = 40;
c01010de:	c7 45 cc 28 00 00 00 	movl   $0x28,-0x34(%ebp)
        for (i = 0; i < length; i += 2) {
c01010e5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01010ec:	eb 34                	jmp    c0101122 <ide_init+0x24d>
            model[i] = data[i + 1], model[i + 1] = data[i];
c01010ee:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01010f1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01010f4:	01 c2                	add    %eax,%edx
c01010f6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01010f9:	8d 48 01             	lea    0x1(%eax),%ecx
c01010fc:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01010ff:	01 c8                	add    %ecx,%eax
c0101101:	0f b6 00             	movzbl (%eax),%eax
c0101104:	88 02                	mov    %al,(%edx)
c0101106:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101109:	8d 50 01             	lea    0x1(%eax),%edx
c010110c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010110f:	01 c2                	add    %eax,%edx
c0101111:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c0101114:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101117:	01 c8                	add    %ecx,%eax
c0101119:	0f b6 00             	movzbl (%eax),%eax
c010111c:	88 02                	mov    %al,(%edx)
        /* check if supports LBA */
        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);

        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
        unsigned int i, length = 40;
        for (i = 0; i < length; i += 2) {
c010111e:	83 45 ec 02          	addl   $0x2,-0x14(%ebp)
c0101122:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101125:	3b 45 cc             	cmp    -0x34(%ebp),%eax
c0101128:	72 c4                	jb     c01010ee <ide_init+0x219>
            model[i] = data[i + 1], model[i + 1] = data[i];
        }
        do {
            model[i] = '\0';
c010112a:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010112d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101130:	01 d0                	add    %edx,%eax
c0101132:	c6 00 00             	movb   $0x0,(%eax)
        } while (i -- > 0 && model[i] == ' ');
c0101135:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101138:	8d 50 ff             	lea    -0x1(%eax),%edx
c010113b:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010113e:	85 c0                	test   %eax,%eax
c0101140:	74 0f                	je     c0101151 <ide_init+0x27c>
c0101142:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0101145:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101148:	01 d0                	add    %edx,%eax
c010114a:	0f b6 00             	movzbl (%eax),%eax
c010114d:	3c 20                	cmp    $0x20,%al
c010114f:	74 d9                	je     c010112a <ide_init+0x255>

        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
c0101151:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101155:	89 c2                	mov    %eax,%edx
c0101157:	8d 04 d5 00 00 00 00 	lea    0x0(,%edx,8),%eax
c010115e:	89 c2                	mov    %eax,%edx
c0101160:	8d 04 d5 00 00 00 00 	lea    0x0(,%edx,8),%eax
c0101167:	29 d0                	sub    %edx,%eax
c0101169:	05 40 04 1b c0       	add    $0xc01b0440,%eax
c010116e:	8d 48 0c             	lea    0xc(%eax),%ecx
c0101171:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101175:	c1 e0 03             	shl    $0x3,%eax
c0101178:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c010117f:	29 c2                	sub    %eax,%edx
c0101181:	89 d0                	mov    %edx,%eax
c0101183:	05 48 04 1b c0       	add    $0xc01b0448,%eax
c0101188:	8b 10                	mov    (%eax),%edx
c010118a:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010118e:	51                   	push   %ecx
c010118f:	52                   	push   %edx
c0101190:	50                   	push   %eax
c0101191:	68 5a bc 10 c0       	push   $0xc010bc5a
c0101196:	e8 fc f0 ff ff       	call   c0100297 <cprintf>
c010119b:	83 c4 10             	add    $0x10,%esp
c010119e:	eb 01                	jmp    c01011a1 <ide_init+0x2cc>
        outb(iobase + ISA_COMMAND, IDE_CMD_IDENTIFY);
        ide_wait_ready(iobase, 0);

        /* step3: polling */
        if (inb(iobase + ISA_STATUS) == 0 || ide_wait_ready(iobase, 1) != 0) {
            continue ;
c01011a0:	90                   	nop

void
ide_init(void) {
    static_assert((SECTSIZE % 4) == 0);
    unsigned short ideno, iobase;
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c01011a1:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c01011a5:	83 c0 01             	add    $0x1,%eax
c01011a8:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
c01011ac:	66 83 7d f6 03       	cmpw   $0x3,-0xa(%ebp)
c01011b1:	0f 86 34 fd ff ff    	jbe    c0100eeb <ide_init+0x16>

        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
    }

    // enable ide interrupt
    pic_enable(IRQ_IDE1);
c01011b7:	83 ec 0c             	sub    $0xc,%esp
c01011ba:	6a 0e                	push   $0xe
c01011bc:	e8 8a 0e 00 00       	call   c010204b <pic_enable>
c01011c1:	83 c4 10             	add    $0x10,%esp
    pic_enable(IRQ_IDE2);
c01011c4:	83 ec 0c             	sub    $0xc,%esp
c01011c7:	6a 0f                	push   $0xf
c01011c9:	e8 7d 0e 00 00       	call   c010204b <pic_enable>
c01011ce:	83 c4 10             	add    $0x10,%esp
}
c01011d1:	90                   	nop
c01011d2:	8d 65 f8             	lea    -0x8(%ebp),%esp
c01011d5:	5b                   	pop    %ebx
c01011d6:	5f                   	pop    %edi
c01011d7:	5d                   	pop    %ebp
c01011d8:	c3                   	ret    

c01011d9 <ide_device_valid>:

bool
ide_device_valid(unsigned short ideno) {
c01011d9:	55                   	push   %ebp
c01011da:	89 e5                	mov    %esp,%ebp
c01011dc:	83 ec 04             	sub    $0x4,%esp
c01011df:	8b 45 08             	mov    0x8(%ebp),%eax
c01011e2:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    return VALID_IDE(ideno);
c01011e6:	66 83 7d fc 03       	cmpw   $0x3,-0x4(%ebp)
c01011eb:	77 25                	ja     c0101212 <ide_device_valid+0x39>
c01011ed:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c01011f1:	c1 e0 03             	shl    $0x3,%eax
c01011f4:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c01011fb:	29 c2                	sub    %eax,%edx
c01011fd:	89 d0                	mov    %edx,%eax
c01011ff:	05 40 04 1b c0       	add    $0xc01b0440,%eax
c0101204:	0f b6 00             	movzbl (%eax),%eax
c0101207:	84 c0                	test   %al,%al
c0101209:	74 07                	je     c0101212 <ide_device_valid+0x39>
c010120b:	b8 01 00 00 00       	mov    $0x1,%eax
c0101210:	eb 05                	jmp    c0101217 <ide_device_valid+0x3e>
c0101212:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101217:	c9                   	leave  
c0101218:	c3                   	ret    

c0101219 <ide_device_size>:

size_t
ide_device_size(unsigned short ideno) {
c0101219:	55                   	push   %ebp
c010121a:	89 e5                	mov    %esp,%ebp
c010121c:	83 ec 04             	sub    $0x4,%esp
c010121f:	8b 45 08             	mov    0x8(%ebp),%eax
c0101222:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    if (ide_device_valid(ideno)) {
c0101226:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c010122a:	50                   	push   %eax
c010122b:	e8 a9 ff ff ff       	call   c01011d9 <ide_device_valid>
c0101230:	83 c4 04             	add    $0x4,%esp
c0101233:	85 c0                	test   %eax,%eax
c0101235:	74 1b                	je     c0101252 <ide_device_size+0x39>
        return ide_devices[ideno].size;
c0101237:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c010123b:	c1 e0 03             	shl    $0x3,%eax
c010123e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101245:	29 c2                	sub    %eax,%edx
c0101247:	89 d0                	mov    %edx,%eax
c0101249:	05 48 04 1b c0       	add    $0xc01b0448,%eax
c010124e:	8b 00                	mov    (%eax),%eax
c0101250:	eb 05                	jmp    c0101257 <ide_device_size+0x3e>
    }
    return 0;
c0101252:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101257:	c9                   	leave  
c0101258:	c3                   	ret    

c0101259 <ide_read_secs>:

int
ide_read_secs(unsigned short ideno, uint32_t secno, void *dst, size_t nsecs) {
c0101259:	55                   	push   %ebp
c010125a:	89 e5                	mov    %esp,%ebp
c010125c:	57                   	push   %edi
c010125d:	53                   	push   %ebx
c010125e:	83 ec 40             	sub    $0x40,%esp
c0101261:	8b 45 08             	mov    0x8(%ebp),%eax
c0101264:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c0101268:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c010126f:	77 25                	ja     c0101296 <ide_read_secs+0x3d>
c0101271:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
c0101276:	77 1e                	ja     c0101296 <ide_read_secs+0x3d>
c0101278:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c010127c:	c1 e0 03             	shl    $0x3,%eax
c010127f:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101286:	29 c2                	sub    %eax,%edx
c0101288:	89 d0                	mov    %edx,%eax
c010128a:	05 40 04 1b c0       	add    $0xc01b0440,%eax
c010128f:	0f b6 00             	movzbl (%eax),%eax
c0101292:	84 c0                	test   %al,%al
c0101294:	75 19                	jne    c01012af <ide_read_secs+0x56>
c0101296:	68 78 bc 10 c0       	push   $0xc010bc78
c010129b:	68 33 bc 10 c0       	push   $0xc010bc33
c01012a0:	68 9f 00 00 00       	push   $0x9f
c01012a5:	68 48 bc 10 c0       	push   $0xc010bc48
c01012aa:	e8 4e f1 ff ff       	call   c01003fd <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c01012af:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c01012b6:	77 0f                	ja     c01012c7 <ide_read_secs+0x6e>
c01012b8:	8b 55 0c             	mov    0xc(%ebp),%edx
c01012bb:	8b 45 14             	mov    0x14(%ebp),%eax
c01012be:	01 d0                	add    %edx,%eax
c01012c0:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c01012c5:	76 19                	jbe    c01012e0 <ide_read_secs+0x87>
c01012c7:	68 a0 bc 10 c0       	push   $0xc010bca0
c01012cc:	68 33 bc 10 c0       	push   $0xc010bc33
c01012d1:	68 a0 00 00 00       	push   $0xa0
c01012d6:	68 48 bc 10 c0       	push   $0xc010bc48
c01012db:	e8 1d f1 ff ff       	call   c01003fd <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c01012e0:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c01012e4:	66 d1 e8             	shr    %ax
c01012e7:	0f b7 c0             	movzwl %ax,%eax
c01012ea:	0f b7 04 85 e8 bb 10 	movzwl -0x3fef4418(,%eax,4),%eax
c01012f1:	c0 
c01012f2:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c01012f6:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c01012fa:	66 d1 e8             	shr    %ax
c01012fd:	0f b7 c0             	movzwl %ax,%eax
c0101300:	0f b7 04 85 ea bb 10 	movzwl -0x3fef4416(,%eax,4),%eax
c0101307:	c0 
c0101308:	66 89 45 f0          	mov    %ax,-0x10(%ebp)

    ide_wait_ready(iobase, 0);
c010130c:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101310:	83 ec 08             	sub    $0x8,%esp
c0101313:	6a 00                	push   $0x0
c0101315:	50                   	push   %eax
c0101316:	e8 60 fb ff ff       	call   c0100e7b <ide_wait_ready>
c010131b:	83 c4 10             	add    $0x10,%esp

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c010131e:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c0101322:	83 c0 02             	add    $0x2,%eax
c0101325:	0f b7 c0             	movzwl %ax,%eax
c0101328:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
c010132c:	c6 45 d7 00          	movb   $0x0,-0x29(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101330:	0f b6 45 d7          	movzbl -0x29(%ebp),%eax
c0101334:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101338:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECCNT, nsecs);
c0101339:	8b 45 14             	mov    0x14(%ebp),%eax
c010133c:	0f b6 c0             	movzbl %al,%eax
c010133f:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101343:	83 c2 02             	add    $0x2,%edx
c0101346:	0f b7 d2             	movzwl %dx,%edx
c0101349:	66 89 55 e8          	mov    %dx,-0x18(%ebp)
c010134d:	88 45 d8             	mov    %al,-0x28(%ebp)
c0101350:	0f b6 45 d8          	movzbl -0x28(%ebp),%eax
c0101354:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c0101358:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c0101359:	8b 45 0c             	mov    0xc(%ebp),%eax
c010135c:	0f b6 c0             	movzbl %al,%eax
c010135f:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101363:	83 c2 03             	add    $0x3,%edx
c0101366:	0f b7 d2             	movzwl %dx,%edx
c0101369:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c010136d:	88 45 d9             	mov    %al,-0x27(%ebp)
c0101370:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c0101374:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0101378:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c0101379:	8b 45 0c             	mov    0xc(%ebp),%eax
c010137c:	c1 e8 08             	shr    $0x8,%eax
c010137f:	0f b6 c0             	movzbl %al,%eax
c0101382:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101386:	83 c2 04             	add    $0x4,%edx
c0101389:	0f b7 d2             	movzwl %dx,%edx
c010138c:	66 89 55 e4          	mov    %dx,-0x1c(%ebp)
c0101390:	88 45 da             	mov    %al,-0x26(%ebp)
c0101393:	0f b6 45 da          	movzbl -0x26(%ebp),%eax
c0101397:	0f b7 55 e4          	movzwl -0x1c(%ebp),%edx
c010139b:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c010139c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010139f:	c1 e8 10             	shr    $0x10,%eax
c01013a2:	0f b6 c0             	movzbl %al,%eax
c01013a5:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01013a9:	83 c2 05             	add    $0x5,%edx
c01013ac:	0f b7 d2             	movzwl %dx,%edx
c01013af:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c01013b3:	88 45 db             	mov    %al,-0x25(%ebp)
c01013b6:	0f b6 45 db          	movzbl -0x25(%ebp),%eax
c01013ba:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c01013be:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c01013bf:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c01013c3:	83 e0 01             	and    $0x1,%eax
c01013c6:	c1 e0 04             	shl    $0x4,%eax
c01013c9:	89 c2                	mov    %eax,%edx
c01013cb:	8b 45 0c             	mov    0xc(%ebp),%eax
c01013ce:	c1 e8 18             	shr    $0x18,%eax
c01013d1:	83 e0 0f             	and    $0xf,%eax
c01013d4:	09 d0                	or     %edx,%eax
c01013d6:	83 c8 e0             	or     $0xffffffe0,%eax
c01013d9:	0f b6 c0             	movzbl %al,%eax
c01013dc:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01013e0:	83 c2 06             	add    $0x6,%edx
c01013e3:	0f b7 d2             	movzwl %dx,%edx
c01013e6:	66 89 55 e0          	mov    %dx,-0x20(%ebp)
c01013ea:	88 45 dc             	mov    %al,-0x24(%ebp)
c01013ed:	0f b6 45 dc          	movzbl -0x24(%ebp),%eax
c01013f1:	0f b7 55 e0          	movzwl -0x20(%ebp),%edx
c01013f5:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_COMMAND, IDE_CMD_READ);
c01013f6:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01013fa:	83 c0 07             	add    $0x7,%eax
c01013fd:	0f b7 c0             	movzwl %ax,%eax
c0101400:	66 89 45 de          	mov    %ax,-0x22(%ebp)
c0101404:	c6 45 dd 20          	movb   $0x20,-0x23(%ebp)
c0101408:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c010140c:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c0101410:	ee                   	out    %al,(%dx)

    int ret = 0;
c0101411:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c0101418:	eb 56                	jmp    c0101470 <ide_read_secs+0x217>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c010141a:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c010141e:	83 ec 08             	sub    $0x8,%esp
c0101421:	6a 01                	push   $0x1
c0101423:	50                   	push   %eax
c0101424:	e8 52 fa ff ff       	call   c0100e7b <ide_wait_ready>
c0101429:	83 c4 10             	add    $0x10,%esp
c010142c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010142f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0101433:	75 43                	jne    c0101478 <ide_read_secs+0x21f>
            goto out;
        }
        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
c0101435:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101439:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010143c:	8b 45 10             	mov    0x10(%ebp),%eax
c010143f:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0101442:	c7 45 cc 80 00 00 00 	movl   $0x80,-0x34(%ebp)
    return data;
}

static inline void
insl(uint32_t port, void *addr, int cnt) {
    asm volatile (
c0101449:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010144c:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c010144f:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0101452:	89 cb                	mov    %ecx,%ebx
c0101454:	89 df                	mov    %ebx,%edi
c0101456:	89 c1                	mov    %eax,%ecx
c0101458:	fc                   	cld    
c0101459:	f2 6d                	repnz insl (%dx),%es:(%edi)
c010145b:	89 c8                	mov    %ecx,%eax
c010145d:	89 fb                	mov    %edi,%ebx
c010145f:	89 5d d0             	mov    %ebx,-0x30(%ebp)
c0101462:	89 45 cc             	mov    %eax,-0x34(%ebp)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
    outb(iobase + ISA_COMMAND, IDE_CMD_READ);

    int ret = 0;
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c0101465:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0101469:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c0101470:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0101474:	75 a4                	jne    c010141a <ide_read_secs+0x1c1>
c0101476:	eb 01                	jmp    c0101479 <ide_read_secs+0x220>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
            goto out;
c0101478:	90                   	nop
        }
        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
    }

out:
    return ret;
c0101479:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010147c:	8d 65 f8             	lea    -0x8(%ebp),%esp
c010147f:	5b                   	pop    %ebx
c0101480:	5f                   	pop    %edi
c0101481:	5d                   	pop    %ebp
c0101482:	c3                   	ret    

c0101483 <ide_write_secs>:

int
ide_write_secs(unsigned short ideno, uint32_t secno, const void *src, size_t nsecs) {
c0101483:	55                   	push   %ebp
c0101484:	89 e5                	mov    %esp,%ebp
c0101486:	56                   	push   %esi
c0101487:	53                   	push   %ebx
c0101488:	83 ec 40             	sub    $0x40,%esp
c010148b:	8b 45 08             	mov    0x8(%ebp),%eax
c010148e:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c0101492:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c0101499:	77 25                	ja     c01014c0 <ide_write_secs+0x3d>
c010149b:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
c01014a0:	77 1e                	ja     c01014c0 <ide_write_secs+0x3d>
c01014a2:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c01014a6:	c1 e0 03             	shl    $0x3,%eax
c01014a9:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c01014b0:	29 c2                	sub    %eax,%edx
c01014b2:	89 d0                	mov    %edx,%eax
c01014b4:	05 40 04 1b c0       	add    $0xc01b0440,%eax
c01014b9:	0f b6 00             	movzbl (%eax),%eax
c01014bc:	84 c0                	test   %al,%al
c01014be:	75 19                	jne    c01014d9 <ide_write_secs+0x56>
c01014c0:	68 78 bc 10 c0       	push   $0xc010bc78
c01014c5:	68 33 bc 10 c0       	push   $0xc010bc33
c01014ca:	68 bc 00 00 00       	push   $0xbc
c01014cf:	68 48 bc 10 c0       	push   $0xc010bc48
c01014d4:	e8 24 ef ff ff       	call   c01003fd <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c01014d9:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c01014e0:	77 0f                	ja     c01014f1 <ide_write_secs+0x6e>
c01014e2:	8b 55 0c             	mov    0xc(%ebp),%edx
c01014e5:	8b 45 14             	mov    0x14(%ebp),%eax
c01014e8:	01 d0                	add    %edx,%eax
c01014ea:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c01014ef:	76 19                	jbe    c010150a <ide_write_secs+0x87>
c01014f1:	68 a0 bc 10 c0       	push   $0xc010bca0
c01014f6:	68 33 bc 10 c0       	push   $0xc010bc33
c01014fb:	68 bd 00 00 00       	push   $0xbd
c0101500:	68 48 bc 10 c0       	push   $0xc010bc48
c0101505:	e8 f3 ee ff ff       	call   c01003fd <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c010150a:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c010150e:	66 d1 e8             	shr    %ax
c0101511:	0f b7 c0             	movzwl %ax,%eax
c0101514:	0f b7 04 85 e8 bb 10 	movzwl -0x3fef4418(,%eax,4),%eax
c010151b:	c0 
c010151c:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0101520:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101524:	66 d1 e8             	shr    %ax
c0101527:	0f b7 c0             	movzwl %ax,%eax
c010152a:	0f b7 04 85 ea bb 10 	movzwl -0x3fef4416(,%eax,4),%eax
c0101531:	c0 
c0101532:	66 89 45 f0          	mov    %ax,-0x10(%ebp)

    ide_wait_ready(iobase, 0);
c0101536:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c010153a:	83 ec 08             	sub    $0x8,%esp
c010153d:	6a 00                	push   $0x0
c010153f:	50                   	push   %eax
c0101540:	e8 36 f9 ff ff       	call   c0100e7b <ide_wait_ready>
c0101545:	83 c4 10             	add    $0x10,%esp

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c0101548:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c010154c:	83 c0 02             	add    $0x2,%eax
c010154f:	0f b7 c0             	movzwl %ax,%eax
c0101552:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
c0101556:	c6 45 d7 00          	movb   $0x0,-0x29(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010155a:	0f b6 45 d7          	movzbl -0x29(%ebp),%eax
c010155e:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101562:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECCNT, nsecs);
c0101563:	8b 45 14             	mov    0x14(%ebp),%eax
c0101566:	0f b6 c0             	movzbl %al,%eax
c0101569:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010156d:	83 c2 02             	add    $0x2,%edx
c0101570:	0f b7 d2             	movzwl %dx,%edx
c0101573:	66 89 55 e8          	mov    %dx,-0x18(%ebp)
c0101577:	88 45 d8             	mov    %al,-0x28(%ebp)
c010157a:	0f b6 45 d8          	movzbl -0x28(%ebp),%eax
c010157e:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c0101582:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c0101583:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101586:	0f b6 c0             	movzbl %al,%eax
c0101589:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010158d:	83 c2 03             	add    $0x3,%edx
c0101590:	0f b7 d2             	movzwl %dx,%edx
c0101593:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c0101597:	88 45 d9             	mov    %al,-0x27(%ebp)
c010159a:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c010159e:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c01015a2:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c01015a3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01015a6:	c1 e8 08             	shr    $0x8,%eax
c01015a9:	0f b6 c0             	movzbl %al,%eax
c01015ac:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01015b0:	83 c2 04             	add    $0x4,%edx
c01015b3:	0f b7 d2             	movzwl %dx,%edx
c01015b6:	66 89 55 e4          	mov    %dx,-0x1c(%ebp)
c01015ba:	88 45 da             	mov    %al,-0x26(%ebp)
c01015bd:	0f b6 45 da          	movzbl -0x26(%ebp),%eax
c01015c1:	0f b7 55 e4          	movzwl -0x1c(%ebp),%edx
c01015c5:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c01015c6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01015c9:	c1 e8 10             	shr    $0x10,%eax
c01015cc:	0f b6 c0             	movzbl %al,%eax
c01015cf:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01015d3:	83 c2 05             	add    $0x5,%edx
c01015d6:	0f b7 d2             	movzwl %dx,%edx
c01015d9:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c01015dd:	88 45 db             	mov    %al,-0x25(%ebp)
c01015e0:	0f b6 45 db          	movzbl -0x25(%ebp),%eax
c01015e4:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c01015e8:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c01015e9:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c01015ed:	83 e0 01             	and    $0x1,%eax
c01015f0:	c1 e0 04             	shl    $0x4,%eax
c01015f3:	89 c2                	mov    %eax,%edx
c01015f5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01015f8:	c1 e8 18             	shr    $0x18,%eax
c01015fb:	83 e0 0f             	and    $0xf,%eax
c01015fe:	09 d0                	or     %edx,%eax
c0101600:	83 c8 e0             	or     $0xffffffe0,%eax
c0101603:	0f b6 c0             	movzbl %al,%eax
c0101606:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010160a:	83 c2 06             	add    $0x6,%edx
c010160d:	0f b7 d2             	movzwl %dx,%edx
c0101610:	66 89 55 e0          	mov    %dx,-0x20(%ebp)
c0101614:	88 45 dc             	mov    %al,-0x24(%ebp)
c0101617:	0f b6 45 dc          	movzbl -0x24(%ebp),%eax
c010161b:	0f b7 55 e0          	movzwl -0x20(%ebp),%edx
c010161f:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);
c0101620:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101624:	83 c0 07             	add    $0x7,%eax
c0101627:	0f b7 c0             	movzwl %ax,%eax
c010162a:	66 89 45 de          	mov    %ax,-0x22(%ebp)
c010162e:	c6 45 dd 30          	movb   $0x30,-0x23(%ebp)
c0101632:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0101636:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c010163a:	ee                   	out    %al,(%dx)

    int ret = 0;
c010163b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c0101642:	eb 56                	jmp    c010169a <ide_write_secs+0x217>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c0101644:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101648:	83 ec 08             	sub    $0x8,%esp
c010164b:	6a 01                	push   $0x1
c010164d:	50                   	push   %eax
c010164e:	e8 28 f8 ff ff       	call   c0100e7b <ide_wait_ready>
c0101653:	83 c4 10             	add    $0x10,%esp
c0101656:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0101659:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010165d:	75 43                	jne    c01016a2 <ide_write_secs+0x21f>
            goto out;
        }
        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
c010165f:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101663:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0101666:	8b 45 10             	mov    0x10(%ebp),%eax
c0101669:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010166c:	c7 45 cc 80 00 00 00 	movl   $0x80,-0x34(%ebp)
    asm volatile ("outw %0, %1" :: "a" (data), "d" (port) : "memory");
}

static inline void
outsl(uint32_t port, const void *addr, int cnt) {
    asm volatile (
c0101673:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0101676:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c0101679:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010167c:	89 cb                	mov    %ecx,%ebx
c010167e:	89 de                	mov    %ebx,%esi
c0101680:	89 c1                	mov    %eax,%ecx
c0101682:	fc                   	cld    
c0101683:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
c0101685:	89 c8                	mov    %ecx,%eax
c0101687:	89 f3                	mov    %esi,%ebx
c0101689:	89 5d d0             	mov    %ebx,-0x30(%ebp)
c010168c:	89 45 cc             	mov    %eax,-0x34(%ebp)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);

    int ret = 0;
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c010168f:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0101693:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c010169a:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010169e:	75 a4                	jne    c0101644 <ide_write_secs+0x1c1>
c01016a0:	eb 01                	jmp    c01016a3 <ide_write_secs+0x220>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
            goto out;
c01016a2:	90                   	nop
        }
        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
    }

out:
    return ret;
c01016a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01016a6:	8d 65 f8             	lea    -0x8(%ebp),%esp
c01016a9:	5b                   	pop    %ebx
c01016aa:	5e                   	pop    %esi
c01016ab:	5d                   	pop    %ebp
c01016ac:	c3                   	ret    

c01016ad <clock_init>:
/* *
 * clock_init - initialize 8253 clock to interrupt 100 times per second,
 * and then enable IRQ_TIMER.
 * */
void
clock_init(void) {
c01016ad:	55                   	push   %ebp
c01016ae:	89 e5                	mov    %esp,%ebp
c01016b0:	83 ec 18             	sub    $0x18,%esp
c01016b3:	66 c7 45 f6 43 00    	movw   $0x43,-0xa(%ebp)
c01016b9:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01016bd:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
c01016c1:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c01016c5:	ee                   	out    %al,(%dx)
c01016c6:	66 c7 45 f4 40 00    	movw   $0x40,-0xc(%ebp)
c01016cc:	c6 45 f0 9c          	movb   $0x9c,-0x10(%ebp)
c01016d0:	0f b6 45 f0          	movzbl -0x10(%ebp),%eax
c01016d4:	0f b7 55 f4          	movzwl -0xc(%ebp),%edx
c01016d8:	ee                   	out    %al,(%dx)
c01016d9:	66 c7 45 f2 40 00    	movw   $0x40,-0xe(%ebp)
c01016df:	c6 45 f1 2e          	movb   $0x2e,-0xf(%ebp)
c01016e3:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c01016e7:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01016eb:	ee                   	out    %al,(%dx)
    outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
    outb(IO_TIMER1, TIMER_DIV(100) % 256);
    outb(IO_TIMER1, TIMER_DIV(100) / 256);

    // initialize time counter 'ticks' to zero
    ticks = 0;
c01016ec:	c7 05 78 30 1b c0 00 	movl   $0x0,0xc01b3078
c01016f3:	00 00 00 

    cprintf("++ setup timer interrupts\n");
c01016f6:	83 ec 0c             	sub    $0xc,%esp
c01016f9:	68 da bc 10 c0       	push   $0xc010bcda
c01016fe:	e8 94 eb ff ff       	call   c0100297 <cprintf>
c0101703:	83 c4 10             	add    $0x10,%esp
    pic_enable(IRQ_TIMER);
c0101706:	83 ec 0c             	sub    $0xc,%esp
c0101709:	6a 00                	push   $0x0
c010170b:	e8 3b 09 00 00       	call   c010204b <pic_enable>
c0101710:	83 c4 10             	add    $0x10,%esp
}
c0101713:	90                   	nop
c0101714:	c9                   	leave  
c0101715:	c3                   	ret    

c0101716 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0101716:	55                   	push   %ebp
c0101717:	89 e5                	mov    %esp,%ebp
c0101719:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010171c:	9c                   	pushf  
c010171d:	58                   	pop    %eax
c010171e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0101721:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0101724:	25 00 02 00 00       	and    $0x200,%eax
c0101729:	85 c0                	test   %eax,%eax
c010172b:	74 0c                	je     c0101739 <__intr_save+0x23>
        intr_disable();
c010172d:	e8 8a 0a 00 00       	call   c01021bc <intr_disable>
        return 1;
c0101732:	b8 01 00 00 00       	mov    $0x1,%eax
c0101737:	eb 05                	jmp    c010173e <__intr_save+0x28>
    }
    return 0;
c0101739:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010173e:	c9                   	leave  
c010173f:	c3                   	ret    

c0101740 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0101740:	55                   	push   %ebp
c0101741:	89 e5                	mov    %esp,%ebp
c0101743:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0101746:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010174a:	74 05                	je     c0101751 <__intr_restore+0x11>
        intr_enable();
c010174c:	e8 64 0a 00 00       	call   c01021b5 <intr_enable>
    }
}
c0101751:	90                   	nop
c0101752:	c9                   	leave  
c0101753:	c3                   	ret    

c0101754 <delay>:
#include <memlayout.h>
#include <sync.h>

/* stupid I/O delay routine necessitated by historical PC design flaws */
static void
delay(void) {
c0101754:	55                   	push   %ebp
c0101755:	89 e5                	mov    %esp,%ebp
c0101757:	83 ec 10             	sub    $0x10,%esp
c010175a:	66 c7 45 fe 84 00    	movw   $0x84,-0x2(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101760:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c0101764:	89 c2                	mov    %eax,%edx
c0101766:	ec                   	in     (%dx),%al
c0101767:	88 45 f4             	mov    %al,-0xc(%ebp)
c010176a:	66 c7 45 fc 84 00    	movw   $0x84,-0x4(%ebp)
c0101770:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101774:	89 c2                	mov    %eax,%edx
c0101776:	ec                   	in     (%dx),%al
c0101777:	88 45 f5             	mov    %al,-0xb(%ebp)
c010177a:	66 c7 45 fa 84 00    	movw   $0x84,-0x6(%ebp)
c0101780:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0101784:	89 c2                	mov    %eax,%edx
c0101786:	ec                   	in     (%dx),%al
c0101787:	88 45 f6             	mov    %al,-0xa(%ebp)
c010178a:	66 c7 45 f8 84 00    	movw   $0x84,-0x8(%ebp)
c0101790:	0f b7 45 f8          	movzwl -0x8(%ebp),%eax
c0101794:	89 c2                	mov    %eax,%edx
c0101796:	ec                   	in     (%dx),%al
c0101797:	88 45 f7             	mov    %al,-0x9(%ebp)
    inb(0x84);
    inb(0x84);
    inb(0x84);
    inb(0x84);
}
c010179a:	90                   	nop
c010179b:	c9                   	leave  
c010179c:	c3                   	ret    

c010179d <cga_init>:
static uint16_t addr_6845;

/* TEXT-mode CGA/VGA display output */

static void
cga_init(void) {
c010179d:	55                   	push   %ebp
c010179e:	89 e5                	mov    %esp,%ebp
c01017a0:	83 ec 20             	sub    $0x20,%esp
    volatile uint16_t *cp = (uint16_t *)(CGA_BUF + KERNBASE);
c01017a3:	c7 45 fc 00 80 0b c0 	movl   $0xc00b8000,-0x4(%ebp)
    uint16_t was = *cp;
c01017aa:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01017ad:	0f b7 00             	movzwl (%eax),%eax
c01017b0:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    *cp = (uint16_t) 0xA55A;
c01017b4:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01017b7:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
    if (*cp != 0xA55A) {
c01017bc:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01017bf:	0f b7 00             	movzwl (%eax),%eax
c01017c2:	66 3d 5a a5          	cmp    $0xa55a,%ax
c01017c6:	74 12                	je     c01017da <cga_init+0x3d>
        cp = (uint16_t*)(MONO_BUF + KERNBASE);
c01017c8:	c7 45 fc 00 00 0b c0 	movl   $0xc00b0000,-0x4(%ebp)
        addr_6845 = MONO_BASE;
c01017cf:	66 c7 05 26 05 1b c0 	movw   $0x3b4,0xc01b0526
c01017d6:	b4 03 
c01017d8:	eb 13                	jmp    c01017ed <cga_init+0x50>
    } else {
        *cp = was;
c01017da:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01017dd:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c01017e1:	66 89 10             	mov    %dx,(%eax)
        addr_6845 = CGA_BASE;
c01017e4:	66 c7 05 26 05 1b c0 	movw   $0x3d4,0xc01b0526
c01017eb:	d4 03 
    }

    // Extract cursor location
    uint32_t pos;
    outb(addr_6845, 14);
c01017ed:	0f b7 05 26 05 1b c0 	movzwl 0xc01b0526,%eax
c01017f4:	0f b7 c0             	movzwl %ax,%eax
c01017f7:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
c01017fb:	c6 45 ea 0e          	movb   $0xe,-0x16(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01017ff:	0f b6 45 ea          	movzbl -0x16(%ebp),%eax
c0101803:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
c0101807:	ee                   	out    %al,(%dx)
    pos = inb(addr_6845 + 1) << 8;
c0101808:	0f b7 05 26 05 1b c0 	movzwl 0xc01b0526,%eax
c010180f:	83 c0 01             	add    $0x1,%eax
c0101812:	0f b7 c0             	movzwl %ax,%eax
c0101815:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101819:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c010181d:	89 c2                	mov    %eax,%edx
c010181f:	ec                   	in     (%dx),%al
c0101820:	88 45 eb             	mov    %al,-0x15(%ebp)
    return data;
c0101823:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
c0101827:	0f b6 c0             	movzbl %al,%eax
c010182a:	c1 e0 08             	shl    $0x8,%eax
c010182d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    outb(addr_6845, 15);
c0101830:	0f b7 05 26 05 1b c0 	movzwl 0xc01b0526,%eax
c0101837:	0f b7 c0             	movzwl %ax,%eax
c010183a:	66 89 45 f0          	mov    %ax,-0x10(%ebp)
c010183e:	c6 45 ec 0f          	movb   $0xf,-0x14(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101842:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
c0101846:	0f b7 55 f0          	movzwl -0x10(%ebp),%edx
c010184a:	ee                   	out    %al,(%dx)
    pos |= inb(addr_6845 + 1);
c010184b:	0f b7 05 26 05 1b c0 	movzwl 0xc01b0526,%eax
c0101852:	83 c0 01             	add    $0x1,%eax
c0101855:	0f b7 c0             	movzwl %ax,%eax
c0101858:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c010185c:	0f b7 45 ee          	movzwl -0x12(%ebp),%eax
c0101860:	89 c2                	mov    %eax,%edx
c0101862:	ec                   	in     (%dx),%al
c0101863:	88 45 ed             	mov    %al,-0x13(%ebp)
    return data;
c0101866:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c010186a:	0f b6 c0             	movzbl %al,%eax
c010186d:	09 45 f4             	or     %eax,-0xc(%ebp)

    crt_buf = (uint16_t*) cp;
c0101870:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0101873:	a3 20 05 1b c0       	mov    %eax,0xc01b0520
    crt_pos = pos;
c0101878:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010187b:	66 a3 24 05 1b c0    	mov    %ax,0xc01b0524
}
c0101881:	90                   	nop
c0101882:	c9                   	leave  
c0101883:	c3                   	ret    

c0101884 <serial_init>:

static bool serial_exists = 0;

static void
serial_init(void) {
c0101884:	55                   	push   %ebp
c0101885:	89 e5                	mov    %esp,%ebp
c0101887:	83 ec 28             	sub    $0x28,%esp
c010188a:	66 c7 45 f6 fa 03    	movw   $0x3fa,-0xa(%ebp)
c0101890:	c6 45 da 00          	movb   $0x0,-0x26(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101894:	0f b6 45 da          	movzbl -0x26(%ebp),%eax
c0101898:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c010189c:	ee                   	out    %al,(%dx)
c010189d:	66 c7 45 f4 fb 03    	movw   $0x3fb,-0xc(%ebp)
c01018a3:	c6 45 db 80          	movb   $0x80,-0x25(%ebp)
c01018a7:	0f b6 45 db          	movzbl -0x25(%ebp),%eax
c01018ab:	0f b7 55 f4          	movzwl -0xc(%ebp),%edx
c01018af:	ee                   	out    %al,(%dx)
c01018b0:	66 c7 45 f2 f8 03    	movw   $0x3f8,-0xe(%ebp)
c01018b6:	c6 45 dc 0c          	movb   $0xc,-0x24(%ebp)
c01018ba:	0f b6 45 dc          	movzbl -0x24(%ebp),%eax
c01018be:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01018c2:	ee                   	out    %al,(%dx)
c01018c3:	66 c7 45 f0 f9 03    	movw   $0x3f9,-0x10(%ebp)
c01018c9:	c6 45 dd 00          	movb   $0x0,-0x23(%ebp)
c01018cd:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c01018d1:	0f b7 55 f0          	movzwl -0x10(%ebp),%edx
c01018d5:	ee                   	out    %al,(%dx)
c01018d6:	66 c7 45 ee fb 03    	movw   $0x3fb,-0x12(%ebp)
c01018dc:	c6 45 de 03          	movb   $0x3,-0x22(%ebp)
c01018e0:	0f b6 45 de          	movzbl -0x22(%ebp),%eax
c01018e4:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c01018e8:	ee                   	out    %al,(%dx)
c01018e9:	66 c7 45 ec fc 03    	movw   $0x3fc,-0x14(%ebp)
c01018ef:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
c01018f3:	0f b6 45 df          	movzbl -0x21(%ebp),%eax
c01018f7:	0f b7 55 ec          	movzwl -0x14(%ebp),%edx
c01018fb:	ee                   	out    %al,(%dx)
c01018fc:	66 c7 45 ea f9 03    	movw   $0x3f9,-0x16(%ebp)
c0101902:	c6 45 e0 01          	movb   $0x1,-0x20(%ebp)
c0101906:	0f b6 45 e0          	movzbl -0x20(%ebp),%eax
c010190a:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c010190e:	ee                   	out    %al,(%dx)
c010190f:	66 c7 45 e8 fd 03    	movw   $0x3fd,-0x18(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101915:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
c0101919:	89 c2                	mov    %eax,%edx
c010191b:	ec                   	in     (%dx),%al
c010191c:	88 45 e1             	mov    %al,-0x1f(%ebp)
    return data;
c010191f:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
    // Enable rcv interrupts
    outb(COM1 + COM_IER, COM_IER_RDI);

    // Clear any preexisting overrun indications and interrupts
    // Serial port doesn't exist if COM_LSR returns 0xFF
    serial_exists = (inb(COM1 + COM_LSR) != 0xFF);
c0101923:	3c ff                	cmp    $0xff,%al
c0101925:	0f 95 c0             	setne  %al
c0101928:	0f b6 c0             	movzbl %al,%eax
c010192b:	a3 28 05 1b c0       	mov    %eax,0xc01b0528
c0101930:	66 c7 45 e6 fa 03    	movw   $0x3fa,-0x1a(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101936:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c010193a:	89 c2                	mov    %eax,%edx
c010193c:	ec                   	in     (%dx),%al
c010193d:	88 45 e2             	mov    %al,-0x1e(%ebp)
c0101940:	66 c7 45 e4 f8 03    	movw   $0x3f8,-0x1c(%ebp)
c0101946:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
c010194a:	89 c2                	mov    %eax,%edx
c010194c:	ec                   	in     (%dx),%al
c010194d:	88 45 e3             	mov    %al,-0x1d(%ebp)
    (void) inb(COM1+COM_IIR);
    (void) inb(COM1+COM_RX);

    if (serial_exists) {
c0101950:	a1 28 05 1b c0       	mov    0xc01b0528,%eax
c0101955:	85 c0                	test   %eax,%eax
c0101957:	74 0d                	je     c0101966 <serial_init+0xe2>
        pic_enable(IRQ_COM1);
c0101959:	83 ec 0c             	sub    $0xc,%esp
c010195c:	6a 04                	push   $0x4
c010195e:	e8 e8 06 00 00       	call   c010204b <pic_enable>
c0101963:	83 c4 10             	add    $0x10,%esp
    }
}
c0101966:	90                   	nop
c0101967:	c9                   	leave  
c0101968:	c3                   	ret    

c0101969 <lpt_putc_sub>:

static void
lpt_putc_sub(int c) {
c0101969:	55                   	push   %ebp
c010196a:	89 e5                	mov    %esp,%ebp
c010196c:	83 ec 10             	sub    $0x10,%esp
    int i;
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c010196f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0101976:	eb 09                	jmp    c0101981 <lpt_putc_sub+0x18>
        delay();
c0101978:	e8 d7 fd ff ff       	call   c0101754 <delay>
}

static void
lpt_putc_sub(int c) {
    int i;
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c010197d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0101981:	66 c7 45 f4 79 03    	movw   $0x379,-0xc(%ebp)
c0101987:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c010198b:	89 c2                	mov    %eax,%edx
c010198d:	ec                   	in     (%dx),%al
c010198e:	88 45 f3             	mov    %al,-0xd(%ebp)
    return data;
c0101991:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101995:	84 c0                	test   %al,%al
c0101997:	78 09                	js     c01019a2 <lpt_putc_sub+0x39>
c0101999:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
c01019a0:	7e d6                	jle    c0101978 <lpt_putc_sub+0xf>
        delay();
    }
    outb(LPTPORT + 0, c);
c01019a2:	8b 45 08             	mov    0x8(%ebp),%eax
c01019a5:	0f b6 c0             	movzbl %al,%eax
c01019a8:	66 c7 45 f8 78 03    	movw   $0x378,-0x8(%ebp)
c01019ae:	88 45 f0             	mov    %al,-0x10(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01019b1:	0f b6 45 f0          	movzbl -0x10(%ebp),%eax
c01019b5:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
c01019b9:	ee                   	out    %al,(%dx)
c01019ba:	66 c7 45 f6 7a 03    	movw   $0x37a,-0xa(%ebp)
c01019c0:	c6 45 f1 0d          	movb   $0xd,-0xf(%ebp)
c01019c4:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c01019c8:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c01019cc:	ee                   	out    %al,(%dx)
c01019cd:	66 c7 45 fa 7a 03    	movw   $0x37a,-0x6(%ebp)
c01019d3:	c6 45 f2 08          	movb   $0x8,-0xe(%ebp)
c01019d7:	0f b6 45 f2          	movzbl -0xe(%ebp),%eax
c01019db:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c01019df:	ee                   	out    %al,(%dx)
    outb(LPTPORT + 2, 0x08 | 0x04 | 0x01);
    outb(LPTPORT + 2, 0x08);
}
c01019e0:	90                   	nop
c01019e1:	c9                   	leave  
c01019e2:	c3                   	ret    

c01019e3 <lpt_putc>:

/* lpt_putc - copy console output to parallel port */
static void
lpt_putc(int c) {
c01019e3:	55                   	push   %ebp
c01019e4:	89 e5                	mov    %esp,%ebp
    if (c != '\b') {
c01019e6:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c01019ea:	74 0d                	je     c01019f9 <lpt_putc+0x16>
        lpt_putc_sub(c);
c01019ec:	ff 75 08             	pushl  0x8(%ebp)
c01019ef:	e8 75 ff ff ff       	call   c0101969 <lpt_putc_sub>
c01019f4:	83 c4 04             	add    $0x4,%esp
    else {
        lpt_putc_sub('\b');
        lpt_putc_sub(' ');
        lpt_putc_sub('\b');
    }
}
c01019f7:	eb 1e                	jmp    c0101a17 <lpt_putc+0x34>
lpt_putc(int c) {
    if (c != '\b') {
        lpt_putc_sub(c);
    }
    else {
        lpt_putc_sub('\b');
c01019f9:	6a 08                	push   $0x8
c01019fb:	e8 69 ff ff ff       	call   c0101969 <lpt_putc_sub>
c0101a00:	83 c4 04             	add    $0x4,%esp
        lpt_putc_sub(' ');
c0101a03:	6a 20                	push   $0x20
c0101a05:	e8 5f ff ff ff       	call   c0101969 <lpt_putc_sub>
c0101a0a:	83 c4 04             	add    $0x4,%esp
        lpt_putc_sub('\b');
c0101a0d:	6a 08                	push   $0x8
c0101a0f:	e8 55 ff ff ff       	call   c0101969 <lpt_putc_sub>
c0101a14:	83 c4 04             	add    $0x4,%esp
    }
}
c0101a17:	90                   	nop
c0101a18:	c9                   	leave  
c0101a19:	c3                   	ret    

c0101a1a <cga_putc>:

/* cga_putc - print character to console */
static void
cga_putc(int c) {
c0101a1a:	55                   	push   %ebp
c0101a1b:	89 e5                	mov    %esp,%ebp
c0101a1d:	53                   	push   %ebx
c0101a1e:	83 ec 14             	sub    $0x14,%esp
    // set black on white
    if (!(c & ~0xFF)) {
c0101a21:	8b 45 08             	mov    0x8(%ebp),%eax
c0101a24:	b0 00                	mov    $0x0,%al
c0101a26:	85 c0                	test   %eax,%eax
c0101a28:	75 07                	jne    c0101a31 <cga_putc+0x17>
        c |= 0x0700;
c0101a2a:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)
    }

    switch (c & 0xff) {
c0101a31:	8b 45 08             	mov    0x8(%ebp),%eax
c0101a34:	0f b6 c0             	movzbl %al,%eax
c0101a37:	83 f8 0a             	cmp    $0xa,%eax
c0101a3a:	74 4e                	je     c0101a8a <cga_putc+0x70>
c0101a3c:	83 f8 0d             	cmp    $0xd,%eax
c0101a3f:	74 59                	je     c0101a9a <cga_putc+0x80>
c0101a41:	83 f8 08             	cmp    $0x8,%eax
c0101a44:	0f 85 8a 00 00 00    	jne    c0101ad4 <cga_putc+0xba>
    case '\b':
        if (crt_pos > 0) {
c0101a4a:	0f b7 05 24 05 1b c0 	movzwl 0xc01b0524,%eax
c0101a51:	66 85 c0             	test   %ax,%ax
c0101a54:	0f 84 a0 00 00 00    	je     c0101afa <cga_putc+0xe0>
            crt_pos --;
c0101a5a:	0f b7 05 24 05 1b c0 	movzwl 0xc01b0524,%eax
c0101a61:	83 e8 01             	sub    $0x1,%eax
c0101a64:	66 a3 24 05 1b c0    	mov    %ax,0xc01b0524
            crt_buf[crt_pos] = (c & ~0xff) | ' ';
c0101a6a:	a1 20 05 1b c0       	mov    0xc01b0520,%eax
c0101a6f:	0f b7 15 24 05 1b c0 	movzwl 0xc01b0524,%edx
c0101a76:	0f b7 d2             	movzwl %dx,%edx
c0101a79:	01 d2                	add    %edx,%edx
c0101a7b:	01 d0                	add    %edx,%eax
c0101a7d:	8b 55 08             	mov    0x8(%ebp),%edx
c0101a80:	b2 00                	mov    $0x0,%dl
c0101a82:	83 ca 20             	or     $0x20,%edx
c0101a85:	66 89 10             	mov    %dx,(%eax)
        }
        break;
c0101a88:	eb 70                	jmp    c0101afa <cga_putc+0xe0>
    case '\n':
        crt_pos += CRT_COLS;
c0101a8a:	0f b7 05 24 05 1b c0 	movzwl 0xc01b0524,%eax
c0101a91:	83 c0 50             	add    $0x50,%eax
c0101a94:	66 a3 24 05 1b c0    	mov    %ax,0xc01b0524
    case '\r':
        crt_pos -= (crt_pos % CRT_COLS);
c0101a9a:	0f b7 1d 24 05 1b c0 	movzwl 0xc01b0524,%ebx
c0101aa1:	0f b7 0d 24 05 1b c0 	movzwl 0xc01b0524,%ecx
c0101aa8:	0f b7 c1             	movzwl %cx,%eax
c0101aab:	69 c0 cd cc 00 00    	imul   $0xcccd,%eax,%eax
c0101ab1:	c1 e8 10             	shr    $0x10,%eax
c0101ab4:	89 c2                	mov    %eax,%edx
c0101ab6:	66 c1 ea 06          	shr    $0x6,%dx
c0101aba:	89 d0                	mov    %edx,%eax
c0101abc:	c1 e0 02             	shl    $0x2,%eax
c0101abf:	01 d0                	add    %edx,%eax
c0101ac1:	c1 e0 04             	shl    $0x4,%eax
c0101ac4:	29 c1                	sub    %eax,%ecx
c0101ac6:	89 ca                	mov    %ecx,%edx
c0101ac8:	89 d8                	mov    %ebx,%eax
c0101aca:	29 d0                	sub    %edx,%eax
c0101acc:	66 a3 24 05 1b c0    	mov    %ax,0xc01b0524
        break;
c0101ad2:	eb 27                	jmp    c0101afb <cga_putc+0xe1>
    default:
        crt_buf[crt_pos ++] = c;     // write the character
c0101ad4:	8b 0d 20 05 1b c0    	mov    0xc01b0520,%ecx
c0101ada:	0f b7 05 24 05 1b c0 	movzwl 0xc01b0524,%eax
c0101ae1:	8d 50 01             	lea    0x1(%eax),%edx
c0101ae4:	66 89 15 24 05 1b c0 	mov    %dx,0xc01b0524
c0101aeb:	0f b7 c0             	movzwl %ax,%eax
c0101aee:	01 c0                	add    %eax,%eax
c0101af0:	01 c8                	add    %ecx,%eax
c0101af2:	8b 55 08             	mov    0x8(%ebp),%edx
c0101af5:	66 89 10             	mov    %dx,(%eax)
        break;
c0101af8:	eb 01                	jmp    c0101afb <cga_putc+0xe1>
    case '\b':
        if (crt_pos > 0) {
            crt_pos --;
            crt_buf[crt_pos] = (c & ~0xff) | ' ';
        }
        break;
c0101afa:	90                   	nop
        crt_buf[crt_pos ++] = c;     // write the character
        break;
    }

    // What is the purpose of this?
    if (crt_pos >= CRT_SIZE) {
c0101afb:	0f b7 05 24 05 1b c0 	movzwl 0xc01b0524,%eax
c0101b02:	66 3d cf 07          	cmp    $0x7cf,%ax
c0101b06:	76 59                	jbe    c0101b61 <cga_putc+0x147>
        int i;
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
c0101b08:	a1 20 05 1b c0       	mov    0xc01b0520,%eax
c0101b0d:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
c0101b13:	a1 20 05 1b c0       	mov    0xc01b0520,%eax
c0101b18:	83 ec 04             	sub    $0x4,%esp
c0101b1b:	68 00 0f 00 00       	push   $0xf00
c0101b20:	52                   	push   %edx
c0101b21:	50                   	push   %eax
c0101b22:	e8 2e 95 00 00       	call   c010b055 <memmove>
c0101b27:	83 c4 10             	add    $0x10,%esp
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c0101b2a:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
c0101b31:	eb 15                	jmp    c0101b48 <cga_putc+0x12e>
            crt_buf[i] = 0x0700 | ' ';
c0101b33:	a1 20 05 1b c0       	mov    0xc01b0520,%eax
c0101b38:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0101b3b:	01 d2                	add    %edx,%edx
c0101b3d:	01 d0                	add    %edx,%eax
c0101b3f:	66 c7 00 20 07       	movw   $0x720,(%eax)

    // What is the purpose of this?
    if (crt_pos >= CRT_SIZE) {
        int i;
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c0101b44:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0101b48:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
c0101b4f:	7e e2                	jle    c0101b33 <cga_putc+0x119>
            crt_buf[i] = 0x0700 | ' ';
        }
        crt_pos -= CRT_COLS;
c0101b51:	0f b7 05 24 05 1b c0 	movzwl 0xc01b0524,%eax
c0101b58:	83 e8 50             	sub    $0x50,%eax
c0101b5b:	66 a3 24 05 1b c0    	mov    %ax,0xc01b0524
    }

    // move that little blinky thing
    outb(addr_6845, 14);
c0101b61:	0f b7 05 26 05 1b c0 	movzwl 0xc01b0526,%eax
c0101b68:	0f b7 c0             	movzwl %ax,%eax
c0101b6b:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0101b6f:	c6 45 e8 0e          	movb   $0xe,-0x18(%ebp)
c0101b73:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
c0101b77:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101b7b:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos >> 8);
c0101b7c:	0f b7 05 24 05 1b c0 	movzwl 0xc01b0524,%eax
c0101b83:	66 c1 e8 08          	shr    $0x8,%ax
c0101b87:	0f b6 c0             	movzbl %al,%eax
c0101b8a:	0f b7 15 26 05 1b c0 	movzwl 0xc01b0526,%edx
c0101b91:	83 c2 01             	add    $0x1,%edx
c0101b94:	0f b7 d2             	movzwl %dx,%edx
c0101b97:	66 89 55 f0          	mov    %dx,-0x10(%ebp)
c0101b9b:	88 45 e9             	mov    %al,-0x17(%ebp)
c0101b9e:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101ba2:	0f b7 55 f0          	movzwl -0x10(%ebp),%edx
c0101ba6:	ee                   	out    %al,(%dx)
    outb(addr_6845, 15);
c0101ba7:	0f b7 05 26 05 1b c0 	movzwl 0xc01b0526,%eax
c0101bae:	0f b7 c0             	movzwl %ax,%eax
c0101bb1:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
c0101bb5:	c6 45 ea 0f          	movb   $0xf,-0x16(%ebp)
c0101bb9:	0f b6 45 ea          	movzbl -0x16(%ebp),%eax
c0101bbd:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101bc1:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos);
c0101bc2:	0f b7 05 24 05 1b c0 	movzwl 0xc01b0524,%eax
c0101bc9:	0f b6 c0             	movzbl %al,%eax
c0101bcc:	0f b7 15 26 05 1b c0 	movzwl 0xc01b0526,%edx
c0101bd3:	83 c2 01             	add    $0x1,%edx
c0101bd6:	0f b7 d2             	movzwl %dx,%edx
c0101bd9:	66 89 55 ec          	mov    %dx,-0x14(%ebp)
c0101bdd:	88 45 eb             	mov    %al,-0x15(%ebp)
c0101be0:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
c0101be4:	0f b7 55 ec          	movzwl -0x14(%ebp),%edx
c0101be8:	ee                   	out    %al,(%dx)
}
c0101be9:	90                   	nop
c0101bea:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0101bed:	c9                   	leave  
c0101bee:	c3                   	ret    

c0101bef <serial_putc_sub>:

static void
serial_putc_sub(int c) {
c0101bef:	55                   	push   %ebp
c0101bf0:	89 e5                	mov    %esp,%ebp
c0101bf2:	83 ec 10             	sub    $0x10,%esp
    int i;
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c0101bf5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0101bfc:	eb 09                	jmp    c0101c07 <serial_putc_sub+0x18>
        delay();
c0101bfe:	e8 51 fb ff ff       	call   c0101754 <delay>
}

static void
serial_putc_sub(int c) {
    int i;
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c0101c03:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0101c07:	66 c7 45 f8 fd 03    	movw   $0x3fd,-0x8(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101c0d:	0f b7 45 f8          	movzwl -0x8(%ebp),%eax
c0101c11:	89 c2                	mov    %eax,%edx
c0101c13:	ec                   	in     (%dx),%al
c0101c14:	88 45 f7             	mov    %al,-0x9(%ebp)
    return data;
c0101c17:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0101c1b:	0f b6 c0             	movzbl %al,%eax
c0101c1e:	83 e0 20             	and    $0x20,%eax
c0101c21:	85 c0                	test   %eax,%eax
c0101c23:	75 09                	jne    c0101c2e <serial_putc_sub+0x3f>
c0101c25:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
c0101c2c:	7e d0                	jle    c0101bfe <serial_putc_sub+0xf>
        delay();
    }
    outb(COM1 + COM_TX, c);
c0101c2e:	8b 45 08             	mov    0x8(%ebp),%eax
c0101c31:	0f b6 c0             	movzbl %al,%eax
c0101c34:	66 c7 45 fa f8 03    	movw   $0x3f8,-0x6(%ebp)
c0101c3a:	88 45 f6             	mov    %al,-0xa(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101c3d:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
c0101c41:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c0101c45:	ee                   	out    %al,(%dx)
}
c0101c46:	90                   	nop
c0101c47:	c9                   	leave  
c0101c48:	c3                   	ret    

c0101c49 <serial_putc>:

/* serial_putc - print character to serial port */
static void
serial_putc(int c) {
c0101c49:	55                   	push   %ebp
c0101c4a:	89 e5                	mov    %esp,%ebp
    if (c != '\b') {
c0101c4c:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c0101c50:	74 0d                	je     c0101c5f <serial_putc+0x16>
        serial_putc_sub(c);
c0101c52:	ff 75 08             	pushl  0x8(%ebp)
c0101c55:	e8 95 ff ff ff       	call   c0101bef <serial_putc_sub>
c0101c5a:	83 c4 04             	add    $0x4,%esp
    else {
        serial_putc_sub('\b');
        serial_putc_sub(' ');
        serial_putc_sub('\b');
    }
}
c0101c5d:	eb 1e                	jmp    c0101c7d <serial_putc+0x34>
serial_putc(int c) {
    if (c != '\b') {
        serial_putc_sub(c);
    }
    else {
        serial_putc_sub('\b');
c0101c5f:	6a 08                	push   $0x8
c0101c61:	e8 89 ff ff ff       	call   c0101bef <serial_putc_sub>
c0101c66:	83 c4 04             	add    $0x4,%esp
        serial_putc_sub(' ');
c0101c69:	6a 20                	push   $0x20
c0101c6b:	e8 7f ff ff ff       	call   c0101bef <serial_putc_sub>
c0101c70:	83 c4 04             	add    $0x4,%esp
        serial_putc_sub('\b');
c0101c73:	6a 08                	push   $0x8
c0101c75:	e8 75 ff ff ff       	call   c0101bef <serial_putc_sub>
c0101c7a:	83 c4 04             	add    $0x4,%esp
    }
}
c0101c7d:	90                   	nop
c0101c7e:	c9                   	leave  
c0101c7f:	c3                   	ret    

c0101c80 <cons_intr>:
/* *
 * cons_intr - called by device interrupt routines to feed input
 * characters into the circular console input buffer.
 * */
static void
cons_intr(int (*proc)(void)) {
c0101c80:	55                   	push   %ebp
c0101c81:	89 e5                	mov    %esp,%ebp
c0101c83:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = (*proc)()) != -1) {
c0101c86:	eb 33                	jmp    c0101cbb <cons_intr+0x3b>
        if (c != 0) {
c0101c88:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0101c8c:	74 2d                	je     c0101cbb <cons_intr+0x3b>
            cons.buf[cons.wpos ++] = c;
c0101c8e:	a1 44 07 1b c0       	mov    0xc01b0744,%eax
c0101c93:	8d 50 01             	lea    0x1(%eax),%edx
c0101c96:	89 15 44 07 1b c0    	mov    %edx,0xc01b0744
c0101c9c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0101c9f:	88 90 40 05 1b c0    	mov    %dl,-0x3fe4fac0(%eax)
            if (cons.wpos == CONSBUFSIZE) {
c0101ca5:	a1 44 07 1b c0       	mov    0xc01b0744,%eax
c0101caa:	3d 00 02 00 00       	cmp    $0x200,%eax
c0101caf:	75 0a                	jne    c0101cbb <cons_intr+0x3b>
                cons.wpos = 0;
c0101cb1:	c7 05 44 07 1b c0 00 	movl   $0x0,0xc01b0744
c0101cb8:	00 00 00 
 * characters into the circular console input buffer.
 * */
static void
cons_intr(int (*proc)(void)) {
    int c;
    while ((c = (*proc)()) != -1) {
c0101cbb:	8b 45 08             	mov    0x8(%ebp),%eax
c0101cbe:	ff d0                	call   *%eax
c0101cc0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0101cc3:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
c0101cc7:	75 bf                	jne    c0101c88 <cons_intr+0x8>
            if (cons.wpos == CONSBUFSIZE) {
                cons.wpos = 0;
            }
        }
    }
}
c0101cc9:	90                   	nop
c0101cca:	c9                   	leave  
c0101ccb:	c3                   	ret    

c0101ccc <serial_proc_data>:

/* serial_proc_data - get data from serial port */
static int
serial_proc_data(void) {
c0101ccc:	55                   	push   %ebp
c0101ccd:	89 e5                	mov    %esp,%ebp
c0101ccf:	83 ec 10             	sub    $0x10,%esp
c0101cd2:	66 c7 45 f8 fd 03    	movw   $0x3fd,-0x8(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101cd8:	0f b7 45 f8          	movzwl -0x8(%ebp),%eax
c0101cdc:	89 c2                	mov    %eax,%edx
c0101cde:	ec                   	in     (%dx),%al
c0101cdf:	88 45 f7             	mov    %al,-0x9(%ebp)
    return data;
c0101ce2:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
    if (!(inb(COM1 + COM_LSR) & COM_LSR_DATA)) {
c0101ce6:	0f b6 c0             	movzbl %al,%eax
c0101ce9:	83 e0 01             	and    $0x1,%eax
c0101cec:	85 c0                	test   %eax,%eax
c0101cee:	75 07                	jne    c0101cf7 <serial_proc_data+0x2b>
        return -1;
c0101cf0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101cf5:	eb 2a                	jmp    c0101d21 <serial_proc_data+0x55>
c0101cf7:	66 c7 45 fa f8 03    	movw   $0x3f8,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101cfd:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0101d01:	89 c2                	mov    %eax,%edx
c0101d03:	ec                   	in     (%dx),%al
c0101d04:	88 45 f6             	mov    %al,-0xa(%ebp)
    return data;
c0101d07:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
    }
    int c = inb(COM1 + COM_RX);
c0101d0b:	0f b6 c0             	movzbl %al,%eax
c0101d0e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (c == 127) {
c0101d11:	83 7d fc 7f          	cmpl   $0x7f,-0x4(%ebp)
c0101d15:	75 07                	jne    c0101d1e <serial_proc_data+0x52>
        c = '\b';
c0101d17:	c7 45 fc 08 00 00 00 	movl   $0x8,-0x4(%ebp)
    }
    return c;
c0101d1e:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0101d21:	c9                   	leave  
c0101d22:	c3                   	ret    

c0101d23 <serial_intr>:

/* serial_intr - try to feed input characters from serial port */
void
serial_intr(void) {
c0101d23:	55                   	push   %ebp
c0101d24:	89 e5                	mov    %esp,%ebp
c0101d26:	83 ec 08             	sub    $0x8,%esp
    if (serial_exists) {
c0101d29:	a1 28 05 1b c0       	mov    0xc01b0528,%eax
c0101d2e:	85 c0                	test   %eax,%eax
c0101d30:	74 10                	je     c0101d42 <serial_intr+0x1f>
        cons_intr(serial_proc_data);
c0101d32:	83 ec 0c             	sub    $0xc,%esp
c0101d35:	68 cc 1c 10 c0       	push   $0xc0101ccc
c0101d3a:	e8 41 ff ff ff       	call   c0101c80 <cons_intr>
c0101d3f:	83 c4 10             	add    $0x10,%esp
    }
}
c0101d42:	90                   	nop
c0101d43:	c9                   	leave  
c0101d44:	c3                   	ret    

c0101d45 <kbd_proc_data>:
 *
 * The kbd_proc_data() function gets data from the keyboard.
 * If we finish a character, return it, else 0. And return -1 if no data.
 * */
static int
kbd_proc_data(void) {
c0101d45:	55                   	push   %ebp
c0101d46:	89 e5                	mov    %esp,%ebp
c0101d48:	83 ec 18             	sub    $0x18,%esp
c0101d4b:	66 c7 45 ec 64 00    	movw   $0x64,-0x14(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101d51:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0101d55:	89 c2                	mov    %eax,%edx
c0101d57:	ec                   	in     (%dx),%al
c0101d58:	88 45 eb             	mov    %al,-0x15(%ebp)
    return data;
c0101d5b:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
    int c;
    uint8_t data;
    static uint32_t shift;

    if ((inb(KBSTATP) & KBS_DIB) == 0) {
c0101d5f:	0f b6 c0             	movzbl %al,%eax
c0101d62:	83 e0 01             	and    $0x1,%eax
c0101d65:	85 c0                	test   %eax,%eax
c0101d67:	75 0a                	jne    c0101d73 <kbd_proc_data+0x2e>
        return -1;
c0101d69:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101d6e:	e9 5d 01 00 00       	jmp    c0101ed0 <kbd_proc_data+0x18b>
c0101d73:	66 c7 45 f0 60 00    	movw   $0x60,-0x10(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101d79:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c0101d7d:	89 c2                	mov    %eax,%edx
c0101d7f:	ec                   	in     (%dx),%al
c0101d80:	88 45 ea             	mov    %al,-0x16(%ebp)
    return data;
c0101d83:	0f b6 45 ea          	movzbl -0x16(%ebp),%eax
    }

    data = inb(KBDATAP);
c0101d87:	88 45 f3             	mov    %al,-0xd(%ebp)

    if (data == 0xE0) {
c0101d8a:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
c0101d8e:	75 17                	jne    c0101da7 <kbd_proc_data+0x62>
        // E0 escape character
        shift |= E0ESC;
c0101d90:	a1 48 07 1b c0       	mov    0xc01b0748,%eax
c0101d95:	83 c8 40             	or     $0x40,%eax
c0101d98:	a3 48 07 1b c0       	mov    %eax,0xc01b0748
        return 0;
c0101d9d:	b8 00 00 00 00       	mov    $0x0,%eax
c0101da2:	e9 29 01 00 00       	jmp    c0101ed0 <kbd_proc_data+0x18b>
    } else if (data & 0x80) {
c0101da7:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101dab:	84 c0                	test   %al,%al
c0101dad:	79 47                	jns    c0101df6 <kbd_proc_data+0xb1>
        // Key released
        data = (shift & E0ESC ? data : data & 0x7F);
c0101daf:	a1 48 07 1b c0       	mov    0xc01b0748,%eax
c0101db4:	83 e0 40             	and    $0x40,%eax
c0101db7:	85 c0                	test   %eax,%eax
c0101db9:	75 09                	jne    c0101dc4 <kbd_proc_data+0x7f>
c0101dbb:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101dbf:	83 e0 7f             	and    $0x7f,%eax
c0101dc2:	eb 04                	jmp    c0101dc8 <kbd_proc_data+0x83>
c0101dc4:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101dc8:	88 45 f3             	mov    %al,-0xd(%ebp)
        shift &= ~(shiftcode[data] | E0ESC);
c0101dcb:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101dcf:	0f b6 80 40 c0 12 c0 	movzbl -0x3fed3fc0(%eax),%eax
c0101dd6:	83 c8 40             	or     $0x40,%eax
c0101dd9:	0f b6 c0             	movzbl %al,%eax
c0101ddc:	f7 d0                	not    %eax
c0101dde:	89 c2                	mov    %eax,%edx
c0101de0:	a1 48 07 1b c0       	mov    0xc01b0748,%eax
c0101de5:	21 d0                	and    %edx,%eax
c0101de7:	a3 48 07 1b c0       	mov    %eax,0xc01b0748
        return 0;
c0101dec:	b8 00 00 00 00       	mov    $0x0,%eax
c0101df1:	e9 da 00 00 00       	jmp    c0101ed0 <kbd_proc_data+0x18b>
    } else if (shift & E0ESC) {
c0101df6:	a1 48 07 1b c0       	mov    0xc01b0748,%eax
c0101dfb:	83 e0 40             	and    $0x40,%eax
c0101dfe:	85 c0                	test   %eax,%eax
c0101e00:	74 11                	je     c0101e13 <kbd_proc_data+0xce>
        // Last character was an E0 escape; or with 0x80
        data |= 0x80;
c0101e02:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
        shift &= ~E0ESC;
c0101e06:	a1 48 07 1b c0       	mov    0xc01b0748,%eax
c0101e0b:	83 e0 bf             	and    $0xffffffbf,%eax
c0101e0e:	a3 48 07 1b c0       	mov    %eax,0xc01b0748
    }

    shift |= shiftcode[data];
c0101e13:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101e17:	0f b6 80 40 c0 12 c0 	movzbl -0x3fed3fc0(%eax),%eax
c0101e1e:	0f b6 d0             	movzbl %al,%edx
c0101e21:	a1 48 07 1b c0       	mov    0xc01b0748,%eax
c0101e26:	09 d0                	or     %edx,%eax
c0101e28:	a3 48 07 1b c0       	mov    %eax,0xc01b0748
    shift ^= togglecode[data];
c0101e2d:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101e31:	0f b6 80 40 c1 12 c0 	movzbl -0x3fed3ec0(%eax),%eax
c0101e38:	0f b6 d0             	movzbl %al,%edx
c0101e3b:	a1 48 07 1b c0       	mov    0xc01b0748,%eax
c0101e40:	31 d0                	xor    %edx,%eax
c0101e42:	a3 48 07 1b c0       	mov    %eax,0xc01b0748

    c = charcode[shift & (CTL | SHIFT)][data];
c0101e47:	a1 48 07 1b c0       	mov    0xc01b0748,%eax
c0101e4c:	83 e0 03             	and    $0x3,%eax
c0101e4f:	8b 14 85 40 c5 12 c0 	mov    -0x3fed3ac0(,%eax,4),%edx
c0101e56:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101e5a:	01 d0                	add    %edx,%eax
c0101e5c:	0f b6 00             	movzbl (%eax),%eax
c0101e5f:	0f b6 c0             	movzbl %al,%eax
c0101e62:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (shift & CAPSLOCK) {
c0101e65:	a1 48 07 1b c0       	mov    0xc01b0748,%eax
c0101e6a:	83 e0 08             	and    $0x8,%eax
c0101e6d:	85 c0                	test   %eax,%eax
c0101e6f:	74 22                	je     c0101e93 <kbd_proc_data+0x14e>
        if ('a' <= c && c <= 'z')
c0101e71:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
c0101e75:	7e 0c                	jle    c0101e83 <kbd_proc_data+0x13e>
c0101e77:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
c0101e7b:	7f 06                	jg     c0101e83 <kbd_proc_data+0x13e>
            c += 'A' - 'a';
c0101e7d:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
c0101e81:	eb 10                	jmp    c0101e93 <kbd_proc_data+0x14e>
        else if ('A' <= c && c <= 'Z')
c0101e83:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
c0101e87:	7e 0a                	jle    c0101e93 <kbd_proc_data+0x14e>
c0101e89:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
c0101e8d:	7f 04                	jg     c0101e93 <kbd_proc_data+0x14e>
            c += 'a' - 'A';
c0101e8f:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
    }

    // Process special keys
    // Ctrl-Alt-Del: reboot
    if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
c0101e93:	a1 48 07 1b c0       	mov    0xc01b0748,%eax
c0101e98:	f7 d0                	not    %eax
c0101e9a:	83 e0 06             	and    $0x6,%eax
c0101e9d:	85 c0                	test   %eax,%eax
c0101e9f:	75 2c                	jne    c0101ecd <kbd_proc_data+0x188>
c0101ea1:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
c0101ea8:	75 23                	jne    c0101ecd <kbd_proc_data+0x188>
        cprintf("Rebooting!\n");
c0101eaa:	83 ec 0c             	sub    $0xc,%esp
c0101ead:	68 f5 bc 10 c0       	push   $0xc010bcf5
c0101eb2:	e8 e0 e3 ff ff       	call   c0100297 <cprintf>
c0101eb7:	83 c4 10             	add    $0x10,%esp
c0101eba:	66 c7 45 ee 92 00    	movw   $0x92,-0x12(%ebp)
c0101ec0:	c6 45 e9 03          	movb   $0x3,-0x17(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101ec4:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101ec8:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101ecc:	ee                   	out    %al,(%dx)
        outb(0x92, 0x3); // courtesy of Chris Frost
    }
    return c;
c0101ecd:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0101ed0:	c9                   	leave  
c0101ed1:	c3                   	ret    

c0101ed2 <kbd_intr>:

/* kbd_intr - try to feed input characters from keyboard */
static void
kbd_intr(void) {
c0101ed2:	55                   	push   %ebp
c0101ed3:	89 e5                	mov    %esp,%ebp
c0101ed5:	83 ec 08             	sub    $0x8,%esp
    cons_intr(kbd_proc_data);
c0101ed8:	83 ec 0c             	sub    $0xc,%esp
c0101edb:	68 45 1d 10 c0       	push   $0xc0101d45
c0101ee0:	e8 9b fd ff ff       	call   c0101c80 <cons_intr>
c0101ee5:	83 c4 10             	add    $0x10,%esp
}
c0101ee8:	90                   	nop
c0101ee9:	c9                   	leave  
c0101eea:	c3                   	ret    

c0101eeb <kbd_init>:

static void
kbd_init(void) {
c0101eeb:	55                   	push   %ebp
c0101eec:	89 e5                	mov    %esp,%ebp
c0101eee:	83 ec 08             	sub    $0x8,%esp
    // drain the kbd buffer
    kbd_intr();
c0101ef1:	e8 dc ff ff ff       	call   c0101ed2 <kbd_intr>
    pic_enable(IRQ_KBD);
c0101ef6:	83 ec 0c             	sub    $0xc,%esp
c0101ef9:	6a 01                	push   $0x1
c0101efb:	e8 4b 01 00 00       	call   c010204b <pic_enable>
c0101f00:	83 c4 10             	add    $0x10,%esp
}
c0101f03:	90                   	nop
c0101f04:	c9                   	leave  
c0101f05:	c3                   	ret    

c0101f06 <cons_init>:

/* cons_init - initializes the console devices */
void
cons_init(void) {
c0101f06:	55                   	push   %ebp
c0101f07:	89 e5                	mov    %esp,%ebp
c0101f09:	83 ec 08             	sub    $0x8,%esp
    cga_init();
c0101f0c:	e8 8c f8 ff ff       	call   c010179d <cga_init>
    serial_init();
c0101f11:	e8 6e f9 ff ff       	call   c0101884 <serial_init>
    kbd_init();
c0101f16:	e8 d0 ff ff ff       	call   c0101eeb <kbd_init>
    if (!serial_exists) {
c0101f1b:	a1 28 05 1b c0       	mov    0xc01b0528,%eax
c0101f20:	85 c0                	test   %eax,%eax
c0101f22:	75 10                	jne    c0101f34 <cons_init+0x2e>
        cprintf("serial port does not exist!!\n");
c0101f24:	83 ec 0c             	sub    $0xc,%esp
c0101f27:	68 01 bd 10 c0       	push   $0xc010bd01
c0101f2c:	e8 66 e3 ff ff       	call   c0100297 <cprintf>
c0101f31:	83 c4 10             	add    $0x10,%esp
    }
}
c0101f34:	90                   	nop
c0101f35:	c9                   	leave  
c0101f36:	c3                   	ret    

c0101f37 <cons_putc>:

/* cons_putc - print a single character @c to console devices */
void
cons_putc(int c) {
c0101f37:	55                   	push   %ebp
c0101f38:	89 e5                	mov    %esp,%ebp
c0101f3a:	83 ec 18             	sub    $0x18,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c0101f3d:	e8 d4 f7 ff ff       	call   c0101716 <__intr_save>
c0101f42:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        lpt_putc(c);
c0101f45:	83 ec 0c             	sub    $0xc,%esp
c0101f48:	ff 75 08             	pushl  0x8(%ebp)
c0101f4b:	e8 93 fa ff ff       	call   c01019e3 <lpt_putc>
c0101f50:	83 c4 10             	add    $0x10,%esp
        cga_putc(c);
c0101f53:	83 ec 0c             	sub    $0xc,%esp
c0101f56:	ff 75 08             	pushl  0x8(%ebp)
c0101f59:	e8 bc fa ff ff       	call   c0101a1a <cga_putc>
c0101f5e:	83 c4 10             	add    $0x10,%esp
        serial_putc(c);
c0101f61:	83 ec 0c             	sub    $0xc,%esp
c0101f64:	ff 75 08             	pushl  0x8(%ebp)
c0101f67:	e8 dd fc ff ff       	call   c0101c49 <serial_putc>
c0101f6c:	83 c4 10             	add    $0x10,%esp
    }
    local_intr_restore(intr_flag);
c0101f6f:	83 ec 0c             	sub    $0xc,%esp
c0101f72:	ff 75 f4             	pushl  -0xc(%ebp)
c0101f75:	e8 c6 f7 ff ff       	call   c0101740 <__intr_restore>
c0101f7a:	83 c4 10             	add    $0x10,%esp
}
c0101f7d:	90                   	nop
c0101f7e:	c9                   	leave  
c0101f7f:	c3                   	ret    

c0101f80 <cons_getc>:
/* *
 * cons_getc - return the next input character from console,
 * or 0 if none waiting.
 * */
int
cons_getc(void) {
c0101f80:	55                   	push   %ebp
c0101f81:	89 e5                	mov    %esp,%ebp
c0101f83:	83 ec 18             	sub    $0x18,%esp
    int c = 0;
c0101f86:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    local_intr_save(intr_flag);
c0101f8d:	e8 84 f7 ff ff       	call   c0101716 <__intr_save>
c0101f92:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        // poll for any pending input characters,
        // so that this function works even when interrupts are disabled
        // (e.g., when called from the kernel monitor).
        serial_intr();
c0101f95:	e8 89 fd ff ff       	call   c0101d23 <serial_intr>
        kbd_intr();
c0101f9a:	e8 33 ff ff ff       	call   c0101ed2 <kbd_intr>

        // grab the next character from the input buffer.
        if (cons.rpos != cons.wpos) {
c0101f9f:	8b 15 40 07 1b c0    	mov    0xc01b0740,%edx
c0101fa5:	a1 44 07 1b c0       	mov    0xc01b0744,%eax
c0101faa:	39 c2                	cmp    %eax,%edx
c0101fac:	74 31                	je     c0101fdf <cons_getc+0x5f>
            c = cons.buf[cons.rpos ++];
c0101fae:	a1 40 07 1b c0       	mov    0xc01b0740,%eax
c0101fb3:	8d 50 01             	lea    0x1(%eax),%edx
c0101fb6:	89 15 40 07 1b c0    	mov    %edx,0xc01b0740
c0101fbc:	0f b6 80 40 05 1b c0 	movzbl -0x3fe4fac0(%eax),%eax
c0101fc3:	0f b6 c0             	movzbl %al,%eax
c0101fc6:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (cons.rpos == CONSBUFSIZE) {
c0101fc9:	a1 40 07 1b c0       	mov    0xc01b0740,%eax
c0101fce:	3d 00 02 00 00       	cmp    $0x200,%eax
c0101fd3:	75 0a                	jne    c0101fdf <cons_getc+0x5f>
                cons.rpos = 0;
c0101fd5:	c7 05 40 07 1b c0 00 	movl   $0x0,0xc01b0740
c0101fdc:	00 00 00 
            }
        }
    }
    local_intr_restore(intr_flag);
c0101fdf:	83 ec 0c             	sub    $0xc,%esp
c0101fe2:	ff 75 f0             	pushl  -0x10(%ebp)
c0101fe5:	e8 56 f7 ff ff       	call   c0101740 <__intr_restore>
c0101fea:	83 c4 10             	add    $0x10,%esp
    return c;
c0101fed:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0101ff0:	c9                   	leave  
c0101ff1:	c3                   	ret    

c0101ff2 <pic_setmask>:
// Initial IRQ mask has interrupt 2 enabled (for slave 8259A).
static uint16_t irq_mask = 0xFFFF & ~(1 << IRQ_SLAVE);
static bool did_init = 0;

static void
pic_setmask(uint16_t mask) {
c0101ff2:	55                   	push   %ebp
c0101ff3:	89 e5                	mov    %esp,%ebp
c0101ff5:	83 ec 14             	sub    $0x14,%esp
c0101ff8:	8b 45 08             	mov    0x8(%ebp),%eax
c0101ffb:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    irq_mask = mask;
c0101fff:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0102003:	66 a3 50 c5 12 c0    	mov    %ax,0xc012c550
    if (did_init) {
c0102009:	a1 4c 07 1b c0       	mov    0xc01b074c,%eax
c010200e:	85 c0                	test   %eax,%eax
c0102010:	74 36                	je     c0102048 <pic_setmask+0x56>
        outb(IO_PIC1 + 1, mask);
c0102012:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0102016:	0f b6 c0             	movzbl %al,%eax
c0102019:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
c010201f:	88 45 fa             	mov    %al,-0x6(%ebp)
c0102022:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
c0102026:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c010202a:	ee                   	out    %al,(%dx)
        outb(IO_PIC2 + 1, mask >> 8);
c010202b:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c010202f:	66 c1 e8 08          	shr    $0x8,%ax
c0102033:	0f b6 c0             	movzbl %al,%eax
c0102036:	66 c7 45 fc a1 00    	movw   $0xa1,-0x4(%ebp)
c010203c:	88 45 fb             	mov    %al,-0x5(%ebp)
c010203f:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
c0102043:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c0102047:	ee                   	out    %al,(%dx)
    }
}
c0102048:	90                   	nop
c0102049:	c9                   	leave  
c010204a:	c3                   	ret    

c010204b <pic_enable>:

void
pic_enable(unsigned int irq) {
c010204b:	55                   	push   %ebp
c010204c:	89 e5                	mov    %esp,%ebp
    pic_setmask(irq_mask & ~(1 << irq));
c010204e:	8b 45 08             	mov    0x8(%ebp),%eax
c0102051:	ba 01 00 00 00       	mov    $0x1,%edx
c0102056:	89 c1                	mov    %eax,%ecx
c0102058:	d3 e2                	shl    %cl,%edx
c010205a:	89 d0                	mov    %edx,%eax
c010205c:	f7 d0                	not    %eax
c010205e:	89 c2                	mov    %eax,%edx
c0102060:	0f b7 05 50 c5 12 c0 	movzwl 0xc012c550,%eax
c0102067:	21 d0                	and    %edx,%eax
c0102069:	0f b7 c0             	movzwl %ax,%eax
c010206c:	50                   	push   %eax
c010206d:	e8 80 ff ff ff       	call   c0101ff2 <pic_setmask>
c0102072:	83 c4 04             	add    $0x4,%esp
}
c0102075:	90                   	nop
c0102076:	c9                   	leave  
c0102077:	c3                   	ret    

c0102078 <pic_init>:

/* pic_init - initialize the 8259A interrupt controllers */
void
pic_init(void) {
c0102078:	55                   	push   %ebp
c0102079:	89 e5                	mov    %esp,%ebp
c010207b:	83 ec 30             	sub    $0x30,%esp
    did_init = 1;
c010207e:	c7 05 4c 07 1b c0 01 	movl   $0x1,0xc01b074c
c0102085:	00 00 00 
c0102088:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
c010208e:	c6 45 d6 ff          	movb   $0xff,-0x2a(%ebp)
c0102092:	0f b6 45 d6          	movzbl -0x2a(%ebp),%eax
c0102096:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c010209a:	ee                   	out    %al,(%dx)
c010209b:	66 c7 45 fc a1 00    	movw   $0xa1,-0x4(%ebp)
c01020a1:	c6 45 d7 ff          	movb   $0xff,-0x29(%ebp)
c01020a5:	0f b6 45 d7          	movzbl -0x29(%ebp),%eax
c01020a9:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c01020ad:	ee                   	out    %al,(%dx)
c01020ae:	66 c7 45 fa 20 00    	movw   $0x20,-0x6(%ebp)
c01020b4:	c6 45 d8 11          	movb   $0x11,-0x28(%ebp)
c01020b8:	0f b6 45 d8          	movzbl -0x28(%ebp),%eax
c01020bc:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c01020c0:	ee                   	out    %al,(%dx)
c01020c1:	66 c7 45 f8 21 00    	movw   $0x21,-0x8(%ebp)
c01020c7:	c6 45 d9 20          	movb   $0x20,-0x27(%ebp)
c01020cb:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c01020cf:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
c01020d3:	ee                   	out    %al,(%dx)
c01020d4:	66 c7 45 f6 21 00    	movw   $0x21,-0xa(%ebp)
c01020da:	c6 45 da 04          	movb   $0x4,-0x26(%ebp)
c01020de:	0f b6 45 da          	movzbl -0x26(%ebp),%eax
c01020e2:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c01020e6:	ee                   	out    %al,(%dx)
c01020e7:	66 c7 45 f4 21 00    	movw   $0x21,-0xc(%ebp)
c01020ed:	c6 45 db 03          	movb   $0x3,-0x25(%ebp)
c01020f1:	0f b6 45 db          	movzbl -0x25(%ebp),%eax
c01020f5:	0f b7 55 f4          	movzwl -0xc(%ebp),%edx
c01020f9:	ee                   	out    %al,(%dx)
c01020fa:	66 c7 45 f2 a0 00    	movw   $0xa0,-0xe(%ebp)
c0102100:	c6 45 dc 11          	movb   $0x11,-0x24(%ebp)
c0102104:	0f b6 45 dc          	movzbl -0x24(%ebp),%eax
c0102108:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010210c:	ee                   	out    %al,(%dx)
c010210d:	66 c7 45 f0 a1 00    	movw   $0xa1,-0x10(%ebp)
c0102113:	c6 45 dd 28          	movb   $0x28,-0x23(%ebp)
c0102117:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c010211b:	0f b7 55 f0          	movzwl -0x10(%ebp),%edx
c010211f:	ee                   	out    %al,(%dx)
c0102120:	66 c7 45 ee a1 00    	movw   $0xa1,-0x12(%ebp)
c0102126:	c6 45 de 02          	movb   $0x2,-0x22(%ebp)
c010212a:	0f b6 45 de          	movzbl -0x22(%ebp),%eax
c010212e:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0102132:	ee                   	out    %al,(%dx)
c0102133:	66 c7 45 ec a1 00    	movw   $0xa1,-0x14(%ebp)
c0102139:	c6 45 df 03          	movb   $0x3,-0x21(%ebp)
c010213d:	0f b6 45 df          	movzbl -0x21(%ebp),%eax
c0102141:	0f b7 55 ec          	movzwl -0x14(%ebp),%edx
c0102145:	ee                   	out    %al,(%dx)
c0102146:	66 c7 45 ea 20 00    	movw   $0x20,-0x16(%ebp)
c010214c:	c6 45 e0 68          	movb   $0x68,-0x20(%ebp)
c0102150:	0f b6 45 e0          	movzbl -0x20(%ebp),%eax
c0102154:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0102158:	ee                   	out    %al,(%dx)
c0102159:	66 c7 45 e8 20 00    	movw   $0x20,-0x18(%ebp)
c010215f:	c6 45 e1 0a          	movb   $0xa,-0x1f(%ebp)
c0102163:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0102167:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c010216b:	ee                   	out    %al,(%dx)
c010216c:	66 c7 45 e6 a0 00    	movw   $0xa0,-0x1a(%ebp)
c0102172:	c6 45 e2 68          	movb   $0x68,-0x1e(%ebp)
c0102176:	0f b6 45 e2          	movzbl -0x1e(%ebp),%eax
c010217a:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c010217e:	ee                   	out    %al,(%dx)
c010217f:	66 c7 45 e4 a0 00    	movw   $0xa0,-0x1c(%ebp)
c0102185:	c6 45 e3 0a          	movb   $0xa,-0x1d(%ebp)
c0102189:	0f b6 45 e3          	movzbl -0x1d(%ebp),%eax
c010218d:	0f b7 55 e4          	movzwl -0x1c(%ebp),%edx
c0102191:	ee                   	out    %al,(%dx)
    outb(IO_PIC1, 0x0a);    // read IRR by default

    outb(IO_PIC2, 0x68);    // OCW3
    outb(IO_PIC2, 0x0a);    // OCW3

    if (irq_mask != 0xFFFF) {
c0102192:	0f b7 05 50 c5 12 c0 	movzwl 0xc012c550,%eax
c0102199:	66 83 f8 ff          	cmp    $0xffff,%ax
c010219d:	74 13                	je     c01021b2 <pic_init+0x13a>
        pic_setmask(irq_mask);
c010219f:	0f b7 05 50 c5 12 c0 	movzwl 0xc012c550,%eax
c01021a6:	0f b7 c0             	movzwl %ax,%eax
c01021a9:	50                   	push   %eax
c01021aa:	e8 43 fe ff ff       	call   c0101ff2 <pic_setmask>
c01021af:	83 c4 04             	add    $0x4,%esp
    }
}
c01021b2:	90                   	nop
c01021b3:	c9                   	leave  
c01021b4:	c3                   	ret    

c01021b5 <intr_enable>:
#include <x86.h>
#include <intr.h>

/* intr_enable - enable irq interrupt */
void
intr_enable(void) {
c01021b5:	55                   	push   %ebp
c01021b6:	89 e5                	mov    %esp,%ebp
    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
}

static inline void
sti(void) {
    asm volatile ("sti");
c01021b8:	fb                   	sti    
    sti();
}
c01021b9:	90                   	nop
c01021ba:	5d                   	pop    %ebp
c01021bb:	c3                   	ret    

c01021bc <intr_disable>:

/* intr_disable - disable irq interrupt */
void
intr_disable(void) {
c01021bc:	55                   	push   %ebp
c01021bd:	89 e5                	mov    %esp,%ebp
}

static inline void
cli(void) {
    asm volatile ("cli" ::: "memory");
c01021bf:	fa                   	cli    
    cli();
}
c01021c0:	90                   	nop
c01021c1:	5d                   	pop    %ebp
c01021c2:	c3                   	ret    

c01021c3 <print_ticks>:
#include <sync.h>
#include <proc.h>

#define TICK_NUM 100

static void print_ticks() {
c01021c3:	55                   	push   %ebp
c01021c4:	89 e5                	mov    %esp,%ebp
c01021c6:	83 ec 08             	sub    $0x8,%esp
    cprintf("%d ticks\n",TICK_NUM);
c01021c9:	83 ec 08             	sub    $0x8,%esp
c01021cc:	6a 64                	push   $0x64
c01021ce:	68 20 bd 10 c0       	push   $0xc010bd20
c01021d3:	e8 bf e0 ff ff       	call   c0100297 <cprintf>
c01021d8:	83 c4 10             	add    $0x10,%esp
#ifdef DEBUG_GRADE
    cprintf("End of Test.\n");
c01021db:	83 ec 0c             	sub    $0xc,%esp
c01021de:	68 2a bd 10 c0       	push   $0xc010bd2a
c01021e3:	e8 af e0 ff ff       	call   c0100297 <cprintf>
c01021e8:	83 c4 10             	add    $0x10,%esp
    panic("EOT: kernel seems ok.");
c01021eb:	83 ec 04             	sub    $0x4,%esp
c01021ee:	68 38 bd 10 c0       	push   $0xc010bd38
c01021f3:	6a 1a                	push   $0x1a
c01021f5:	68 4e bd 10 c0       	push   $0xc010bd4e
c01021fa:	e8 fe e1 ff ff       	call   c01003fd <__panic>

c01021ff <idt_init>:
/* temporary trapframe or pointer to trapframe */
struct trapframe switchk2u, *switchu2k;

/* idt_init - initialize IDT to each of the entry points in kern/trap/vectors.S */
void
idt_init(void) {
c01021ff:	55                   	push   %ebp
c0102200:	89 e5                	mov    %esp,%ebp
c0102202:	83 ec 10             	sub    $0x10,%esp
     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
     //so you should setup the syscall interrupt gate in here
    // 1. get vectors
    extern uintptr_t __vectors[];
    // 2. setup entries
    for (int i = 0; i < 256; i++) {
c0102205:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c010220c:	e9 c3 00 00 00       	jmp    c01022d4 <idt_init+0xd5>
        SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);
c0102211:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102214:	8b 04 85 e0 c5 12 c0 	mov    -0x3fed3a20(,%eax,4),%eax
c010221b:	89 c2                	mov    %eax,%edx
c010221d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102220:	66 89 14 c5 60 07 1b 	mov    %dx,-0x3fe4f8a0(,%eax,8)
c0102227:	c0 
c0102228:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010222b:	66 c7 04 c5 62 07 1b 	movw   $0x8,-0x3fe4f89e(,%eax,8)
c0102232:	c0 08 00 
c0102235:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102238:	0f b6 14 c5 64 07 1b 	movzbl -0x3fe4f89c(,%eax,8),%edx
c010223f:	c0 
c0102240:	83 e2 e0             	and    $0xffffffe0,%edx
c0102243:	88 14 c5 64 07 1b c0 	mov    %dl,-0x3fe4f89c(,%eax,8)
c010224a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010224d:	0f b6 14 c5 64 07 1b 	movzbl -0x3fe4f89c(,%eax,8),%edx
c0102254:	c0 
c0102255:	83 e2 1f             	and    $0x1f,%edx
c0102258:	88 14 c5 64 07 1b c0 	mov    %dl,-0x3fe4f89c(,%eax,8)
c010225f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102262:	0f b6 14 c5 65 07 1b 	movzbl -0x3fe4f89b(,%eax,8),%edx
c0102269:	c0 
c010226a:	83 e2 f0             	and    $0xfffffff0,%edx
c010226d:	83 ca 0e             	or     $0xe,%edx
c0102270:	88 14 c5 65 07 1b c0 	mov    %dl,-0x3fe4f89b(,%eax,8)
c0102277:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010227a:	0f b6 14 c5 65 07 1b 	movzbl -0x3fe4f89b(,%eax,8),%edx
c0102281:	c0 
c0102282:	83 e2 ef             	and    $0xffffffef,%edx
c0102285:	88 14 c5 65 07 1b c0 	mov    %dl,-0x3fe4f89b(,%eax,8)
c010228c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010228f:	0f b6 14 c5 65 07 1b 	movzbl -0x3fe4f89b(,%eax,8),%edx
c0102296:	c0 
c0102297:	83 e2 9f             	and    $0xffffff9f,%edx
c010229a:	88 14 c5 65 07 1b c0 	mov    %dl,-0x3fe4f89b(,%eax,8)
c01022a1:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01022a4:	0f b6 14 c5 65 07 1b 	movzbl -0x3fe4f89b(,%eax,8),%edx
c01022ab:	c0 
c01022ac:	83 ca 80             	or     $0xffffff80,%edx
c01022af:	88 14 c5 65 07 1b c0 	mov    %dl,-0x3fe4f89b(,%eax,8)
c01022b6:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01022b9:	8b 04 85 e0 c5 12 c0 	mov    -0x3fed3a20(,%eax,4),%eax
c01022c0:	c1 e8 10             	shr    $0x10,%eax
c01022c3:	89 c2                	mov    %eax,%edx
c01022c5:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01022c8:	66 89 14 c5 66 07 1b 	mov    %dx,-0x3fe4f89a(,%eax,8)
c01022cf:	c0 
     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
     //so you should setup the syscall interrupt gate in here
    // 1. get vectors
    extern uintptr_t __vectors[];
    // 2. setup entries
    for (int i = 0; i < 256; i++) {
c01022d0:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c01022d4:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
c01022db:	0f 8e 30 ff ff ff    	jle    c0102211 <idt_init+0x12>
        SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);
    }
	// set RPL of switch_to_kernel as user 
    SETGATE(idt[T_SWITCH_TOK], 0, GD_KTEXT, __vectors[T_SWITCH_TOK], DPL_USER);
c01022e1:	a1 c4 c7 12 c0       	mov    0xc012c7c4,%eax
c01022e6:	66 a3 28 0b 1b c0    	mov    %ax,0xc01b0b28
c01022ec:	66 c7 05 2a 0b 1b c0 	movw   $0x8,0xc01b0b2a
c01022f3:	08 00 
c01022f5:	0f b6 05 2c 0b 1b c0 	movzbl 0xc01b0b2c,%eax
c01022fc:	83 e0 e0             	and    $0xffffffe0,%eax
c01022ff:	a2 2c 0b 1b c0       	mov    %al,0xc01b0b2c
c0102304:	0f b6 05 2c 0b 1b c0 	movzbl 0xc01b0b2c,%eax
c010230b:	83 e0 1f             	and    $0x1f,%eax
c010230e:	a2 2c 0b 1b c0       	mov    %al,0xc01b0b2c
c0102313:	0f b6 05 2d 0b 1b c0 	movzbl 0xc01b0b2d,%eax
c010231a:	83 e0 f0             	and    $0xfffffff0,%eax
c010231d:	83 c8 0e             	or     $0xe,%eax
c0102320:	a2 2d 0b 1b c0       	mov    %al,0xc01b0b2d
c0102325:	0f b6 05 2d 0b 1b c0 	movzbl 0xc01b0b2d,%eax
c010232c:	83 e0 ef             	and    $0xffffffef,%eax
c010232f:	a2 2d 0b 1b c0       	mov    %al,0xc01b0b2d
c0102334:	0f b6 05 2d 0b 1b c0 	movzbl 0xc01b0b2d,%eax
c010233b:	83 c8 60             	or     $0x60,%eax
c010233e:	a2 2d 0b 1b c0       	mov    %al,0xc01b0b2d
c0102343:	0f b6 05 2d 0b 1b c0 	movzbl 0xc01b0b2d,%eax
c010234a:	83 c8 80             	or     $0xffffff80,%eax
c010234d:	a2 2d 0b 1b c0       	mov    %al,0xc01b0b2d
c0102352:	a1 c4 c7 12 c0       	mov    0xc012c7c4,%eax
c0102357:	c1 e8 10             	shr    $0x10,%eax
c010235a:	66 a3 2e 0b 1b c0    	mov    %ax,0xc01b0b2e
    // set trap gate
    SETGATE(idt[T_SYSCALL], 1, GD_KTEXT, __vectors[T_SYSCALL], DPL_USER);
c0102360:	a1 e0 c7 12 c0       	mov    0xc012c7e0,%eax
c0102365:	66 a3 60 0b 1b c0    	mov    %ax,0xc01b0b60
c010236b:	66 c7 05 62 0b 1b c0 	movw   $0x8,0xc01b0b62
c0102372:	08 00 
c0102374:	0f b6 05 64 0b 1b c0 	movzbl 0xc01b0b64,%eax
c010237b:	83 e0 e0             	and    $0xffffffe0,%eax
c010237e:	a2 64 0b 1b c0       	mov    %al,0xc01b0b64
c0102383:	0f b6 05 64 0b 1b c0 	movzbl 0xc01b0b64,%eax
c010238a:	83 e0 1f             	and    $0x1f,%eax
c010238d:	a2 64 0b 1b c0       	mov    %al,0xc01b0b64
c0102392:	0f b6 05 65 0b 1b c0 	movzbl 0xc01b0b65,%eax
c0102399:	83 c8 0f             	or     $0xf,%eax
c010239c:	a2 65 0b 1b c0       	mov    %al,0xc01b0b65
c01023a1:	0f b6 05 65 0b 1b c0 	movzbl 0xc01b0b65,%eax
c01023a8:	83 e0 ef             	and    $0xffffffef,%eax
c01023ab:	a2 65 0b 1b c0       	mov    %al,0xc01b0b65
c01023b0:	0f b6 05 65 0b 1b c0 	movzbl 0xc01b0b65,%eax
c01023b7:	83 c8 60             	or     $0x60,%eax
c01023ba:	a2 65 0b 1b c0       	mov    %al,0xc01b0b65
c01023bf:	0f b6 05 65 0b 1b c0 	movzbl 0xc01b0b65,%eax
c01023c6:	83 c8 80             	or     $0xffffff80,%eax
c01023c9:	a2 65 0b 1b c0       	mov    %al,0xc01b0b65
c01023ce:	a1 e0 c7 12 c0       	mov    0xc012c7e0,%eax
c01023d3:	c1 e8 10             	shr    $0x10,%eax
c01023d6:	66 a3 66 0b 1b c0    	mov    %ax,0xc01b0b66
c01023dc:	c7 45 f8 60 c5 12 c0 	movl   $0xc012c560,-0x8(%ebp)
    }
}

static inline void
lidt(struct pseudodesc *pd) {
    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
c01023e3:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01023e6:	0f 01 18             	lidtl  (%eax)
    // 3. LIDT
    lidt(&idt_pd);
}
c01023e9:	90                   	nop
c01023ea:	c9                   	leave  
c01023eb:	c3                   	ret    

c01023ec <trapname>:

static const char *
trapname(int trapno) {
c01023ec:	55                   	push   %ebp
c01023ed:	89 e5                	mov    %esp,%ebp
        "Alignment Check",
        "Machine-Check",
        "SIMD Floating-Point Exception"
    };

    if (trapno < sizeof(excnames)/sizeof(const char * const)) {
c01023ef:	8b 45 08             	mov    0x8(%ebp),%eax
c01023f2:	83 f8 13             	cmp    $0x13,%eax
c01023f5:	77 0c                	ja     c0102403 <trapname+0x17>
        return excnames[trapno];
c01023f7:	8b 45 08             	mov    0x8(%ebp),%eax
c01023fa:	8b 04 85 c0 c1 10 c0 	mov    -0x3fef3e40(,%eax,4),%eax
c0102401:	eb 18                	jmp    c010241b <trapname+0x2f>
    }
    if (trapno >= IRQ_OFFSET && trapno < IRQ_OFFSET + 16) {
c0102403:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
c0102407:	7e 0d                	jle    c0102416 <trapname+0x2a>
c0102409:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
c010240d:	7f 07                	jg     c0102416 <trapname+0x2a>
        return "Hardware Interrupt";
c010240f:	b8 5f bd 10 c0       	mov    $0xc010bd5f,%eax
c0102414:	eb 05                	jmp    c010241b <trapname+0x2f>
    }
    return "(unknown trap)";
c0102416:	b8 72 bd 10 c0       	mov    $0xc010bd72,%eax
}
c010241b:	5d                   	pop    %ebp
c010241c:	c3                   	ret    

c010241d <trap_in_kernel>:

/* trap_in_kernel - test if trap happened in kernel */
bool
trap_in_kernel(struct trapframe *tf) {
c010241d:	55                   	push   %ebp
c010241e:	89 e5                	mov    %esp,%ebp
    return (tf->tf_cs == (uint16_t)KERNEL_CS);
c0102420:	8b 45 08             	mov    0x8(%ebp),%eax
c0102423:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c0102427:	66 83 f8 08          	cmp    $0x8,%ax
c010242b:	0f 94 c0             	sete   %al
c010242e:	0f b6 c0             	movzbl %al,%eax
}
c0102431:	5d                   	pop    %ebp
c0102432:	c3                   	ret    

c0102433 <print_trapframe>:
    "TF", "IF", "DF", "OF", NULL, NULL, "NT", NULL,
    "RF", "VM", "AC", "VIF", "VIP", "ID", NULL, NULL,
};

void
print_trapframe(struct trapframe *tf) {
c0102433:	55                   	push   %ebp
c0102434:	89 e5                	mov    %esp,%ebp
c0102436:	83 ec 18             	sub    $0x18,%esp
    cprintf("trapframe at %p\n", tf);
c0102439:	83 ec 08             	sub    $0x8,%esp
c010243c:	ff 75 08             	pushl  0x8(%ebp)
c010243f:	68 b3 bd 10 c0       	push   $0xc010bdb3
c0102444:	e8 4e de ff ff       	call   c0100297 <cprintf>
c0102449:	83 c4 10             	add    $0x10,%esp
    print_regs(&tf->tf_regs);
c010244c:	8b 45 08             	mov    0x8(%ebp),%eax
c010244f:	83 ec 0c             	sub    $0xc,%esp
c0102452:	50                   	push   %eax
c0102453:	e8 b8 01 00 00       	call   c0102610 <print_regs>
c0102458:	83 c4 10             	add    $0x10,%esp
    cprintf("  ds   0x----%04x\n", tf->tf_ds);
c010245b:	8b 45 08             	mov    0x8(%ebp),%eax
c010245e:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c0102462:	0f b7 c0             	movzwl %ax,%eax
c0102465:	83 ec 08             	sub    $0x8,%esp
c0102468:	50                   	push   %eax
c0102469:	68 c4 bd 10 c0       	push   $0xc010bdc4
c010246e:	e8 24 de ff ff       	call   c0100297 <cprintf>
c0102473:	83 c4 10             	add    $0x10,%esp
    cprintf("  es   0x----%04x\n", tf->tf_es);
c0102476:	8b 45 08             	mov    0x8(%ebp),%eax
c0102479:	0f b7 40 28          	movzwl 0x28(%eax),%eax
c010247d:	0f b7 c0             	movzwl %ax,%eax
c0102480:	83 ec 08             	sub    $0x8,%esp
c0102483:	50                   	push   %eax
c0102484:	68 d7 bd 10 c0       	push   $0xc010bdd7
c0102489:	e8 09 de ff ff       	call   c0100297 <cprintf>
c010248e:	83 c4 10             	add    $0x10,%esp
    cprintf("  fs   0x----%04x\n", tf->tf_fs);
c0102491:	8b 45 08             	mov    0x8(%ebp),%eax
c0102494:	0f b7 40 24          	movzwl 0x24(%eax),%eax
c0102498:	0f b7 c0             	movzwl %ax,%eax
c010249b:	83 ec 08             	sub    $0x8,%esp
c010249e:	50                   	push   %eax
c010249f:	68 ea bd 10 c0       	push   $0xc010bdea
c01024a4:	e8 ee dd ff ff       	call   c0100297 <cprintf>
c01024a9:	83 c4 10             	add    $0x10,%esp
    cprintf("  gs   0x----%04x\n", tf->tf_gs);
c01024ac:	8b 45 08             	mov    0x8(%ebp),%eax
c01024af:	0f b7 40 20          	movzwl 0x20(%eax),%eax
c01024b3:	0f b7 c0             	movzwl %ax,%eax
c01024b6:	83 ec 08             	sub    $0x8,%esp
c01024b9:	50                   	push   %eax
c01024ba:	68 fd bd 10 c0       	push   $0xc010bdfd
c01024bf:	e8 d3 dd ff ff       	call   c0100297 <cprintf>
c01024c4:	83 c4 10             	add    $0x10,%esp
    cprintf("  trap 0x%08x %s\n", tf->tf_trapno, trapname(tf->tf_trapno));
c01024c7:	8b 45 08             	mov    0x8(%ebp),%eax
c01024ca:	8b 40 30             	mov    0x30(%eax),%eax
c01024cd:	83 ec 0c             	sub    $0xc,%esp
c01024d0:	50                   	push   %eax
c01024d1:	e8 16 ff ff ff       	call   c01023ec <trapname>
c01024d6:	83 c4 10             	add    $0x10,%esp
c01024d9:	89 c2                	mov    %eax,%edx
c01024db:	8b 45 08             	mov    0x8(%ebp),%eax
c01024de:	8b 40 30             	mov    0x30(%eax),%eax
c01024e1:	83 ec 04             	sub    $0x4,%esp
c01024e4:	52                   	push   %edx
c01024e5:	50                   	push   %eax
c01024e6:	68 10 be 10 c0       	push   $0xc010be10
c01024eb:	e8 a7 dd ff ff       	call   c0100297 <cprintf>
c01024f0:	83 c4 10             	add    $0x10,%esp
    cprintf("  err  0x%08x\n", tf->tf_err);
c01024f3:	8b 45 08             	mov    0x8(%ebp),%eax
c01024f6:	8b 40 34             	mov    0x34(%eax),%eax
c01024f9:	83 ec 08             	sub    $0x8,%esp
c01024fc:	50                   	push   %eax
c01024fd:	68 22 be 10 c0       	push   $0xc010be22
c0102502:	e8 90 dd ff ff       	call   c0100297 <cprintf>
c0102507:	83 c4 10             	add    $0x10,%esp
    cprintf("  eip  0x%08x\n", tf->tf_eip);
c010250a:	8b 45 08             	mov    0x8(%ebp),%eax
c010250d:	8b 40 38             	mov    0x38(%eax),%eax
c0102510:	83 ec 08             	sub    $0x8,%esp
c0102513:	50                   	push   %eax
c0102514:	68 31 be 10 c0       	push   $0xc010be31
c0102519:	e8 79 dd ff ff       	call   c0100297 <cprintf>
c010251e:	83 c4 10             	add    $0x10,%esp
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
c0102521:	8b 45 08             	mov    0x8(%ebp),%eax
c0102524:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c0102528:	0f b7 c0             	movzwl %ax,%eax
c010252b:	83 ec 08             	sub    $0x8,%esp
c010252e:	50                   	push   %eax
c010252f:	68 40 be 10 c0       	push   $0xc010be40
c0102534:	e8 5e dd ff ff       	call   c0100297 <cprintf>
c0102539:	83 c4 10             	add    $0x10,%esp
    cprintf("  flag 0x%08x ", tf->tf_eflags);
c010253c:	8b 45 08             	mov    0x8(%ebp),%eax
c010253f:	8b 40 40             	mov    0x40(%eax),%eax
c0102542:	83 ec 08             	sub    $0x8,%esp
c0102545:	50                   	push   %eax
c0102546:	68 53 be 10 c0       	push   $0xc010be53
c010254b:	e8 47 dd ff ff       	call   c0100297 <cprintf>
c0102550:	83 c4 10             	add    $0x10,%esp

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c0102553:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010255a:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c0102561:	eb 3f                	jmp    c01025a2 <print_trapframe+0x16f>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
c0102563:	8b 45 08             	mov    0x8(%ebp),%eax
c0102566:	8b 50 40             	mov    0x40(%eax),%edx
c0102569:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010256c:	21 d0                	and    %edx,%eax
c010256e:	85 c0                	test   %eax,%eax
c0102570:	74 29                	je     c010259b <print_trapframe+0x168>
c0102572:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102575:	8b 04 85 80 c5 12 c0 	mov    -0x3fed3a80(,%eax,4),%eax
c010257c:	85 c0                	test   %eax,%eax
c010257e:	74 1b                	je     c010259b <print_trapframe+0x168>
            cprintf("%s,", IA32flags[i]);
c0102580:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102583:	8b 04 85 80 c5 12 c0 	mov    -0x3fed3a80(,%eax,4),%eax
c010258a:	83 ec 08             	sub    $0x8,%esp
c010258d:	50                   	push   %eax
c010258e:	68 62 be 10 c0       	push   $0xc010be62
c0102593:	e8 ff dc ff ff       	call   c0100297 <cprintf>
c0102598:	83 c4 10             	add    $0x10,%esp
    cprintf("  eip  0x%08x\n", tf->tf_eip);
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
    cprintf("  flag 0x%08x ", tf->tf_eflags);

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c010259b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010259f:	d1 65 f0             	shll   -0x10(%ebp)
c01025a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01025a5:	83 f8 17             	cmp    $0x17,%eax
c01025a8:	76 b9                	jbe    c0102563 <print_trapframe+0x130>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
            cprintf("%s,", IA32flags[i]);
        }
    }
    cprintf("IOPL=%d\n", (tf->tf_eflags & FL_IOPL_MASK) >> 12);
c01025aa:	8b 45 08             	mov    0x8(%ebp),%eax
c01025ad:	8b 40 40             	mov    0x40(%eax),%eax
c01025b0:	25 00 30 00 00       	and    $0x3000,%eax
c01025b5:	c1 e8 0c             	shr    $0xc,%eax
c01025b8:	83 ec 08             	sub    $0x8,%esp
c01025bb:	50                   	push   %eax
c01025bc:	68 66 be 10 c0       	push   $0xc010be66
c01025c1:	e8 d1 dc ff ff       	call   c0100297 <cprintf>
c01025c6:	83 c4 10             	add    $0x10,%esp

    if (!trap_in_kernel(tf)) {
c01025c9:	83 ec 0c             	sub    $0xc,%esp
c01025cc:	ff 75 08             	pushl  0x8(%ebp)
c01025cf:	e8 49 fe ff ff       	call   c010241d <trap_in_kernel>
c01025d4:	83 c4 10             	add    $0x10,%esp
c01025d7:	85 c0                	test   %eax,%eax
c01025d9:	75 32                	jne    c010260d <print_trapframe+0x1da>
        cprintf("  esp  0x%08x\n", tf->tf_esp);
c01025db:	8b 45 08             	mov    0x8(%ebp),%eax
c01025de:	8b 40 44             	mov    0x44(%eax),%eax
c01025e1:	83 ec 08             	sub    $0x8,%esp
c01025e4:	50                   	push   %eax
c01025e5:	68 6f be 10 c0       	push   $0xc010be6f
c01025ea:	e8 a8 dc ff ff       	call   c0100297 <cprintf>
c01025ef:	83 c4 10             	add    $0x10,%esp
        cprintf("  ss   0x----%04x\n", tf->tf_ss);
c01025f2:	8b 45 08             	mov    0x8(%ebp),%eax
c01025f5:	0f b7 40 48          	movzwl 0x48(%eax),%eax
c01025f9:	0f b7 c0             	movzwl %ax,%eax
c01025fc:	83 ec 08             	sub    $0x8,%esp
c01025ff:	50                   	push   %eax
c0102600:	68 7e be 10 c0       	push   $0xc010be7e
c0102605:	e8 8d dc ff ff       	call   c0100297 <cprintf>
c010260a:	83 c4 10             	add    $0x10,%esp
    }
}
c010260d:	90                   	nop
c010260e:	c9                   	leave  
c010260f:	c3                   	ret    

c0102610 <print_regs>:

void
print_regs(struct pushregs *regs) {
c0102610:	55                   	push   %ebp
c0102611:	89 e5                	mov    %esp,%ebp
c0102613:	83 ec 08             	sub    $0x8,%esp
    cprintf("  edi  0x%08x\n", regs->reg_edi);
c0102616:	8b 45 08             	mov    0x8(%ebp),%eax
c0102619:	8b 00                	mov    (%eax),%eax
c010261b:	83 ec 08             	sub    $0x8,%esp
c010261e:	50                   	push   %eax
c010261f:	68 91 be 10 c0       	push   $0xc010be91
c0102624:	e8 6e dc ff ff       	call   c0100297 <cprintf>
c0102629:	83 c4 10             	add    $0x10,%esp
    cprintf("  esi  0x%08x\n", regs->reg_esi);
c010262c:	8b 45 08             	mov    0x8(%ebp),%eax
c010262f:	8b 40 04             	mov    0x4(%eax),%eax
c0102632:	83 ec 08             	sub    $0x8,%esp
c0102635:	50                   	push   %eax
c0102636:	68 a0 be 10 c0       	push   $0xc010bea0
c010263b:	e8 57 dc ff ff       	call   c0100297 <cprintf>
c0102640:	83 c4 10             	add    $0x10,%esp
    cprintf("  ebp  0x%08x\n", regs->reg_ebp);
c0102643:	8b 45 08             	mov    0x8(%ebp),%eax
c0102646:	8b 40 08             	mov    0x8(%eax),%eax
c0102649:	83 ec 08             	sub    $0x8,%esp
c010264c:	50                   	push   %eax
c010264d:	68 af be 10 c0       	push   $0xc010beaf
c0102652:	e8 40 dc ff ff       	call   c0100297 <cprintf>
c0102657:	83 c4 10             	add    $0x10,%esp
    cprintf("  oesp 0x%08x\n", regs->reg_oesp);
c010265a:	8b 45 08             	mov    0x8(%ebp),%eax
c010265d:	8b 40 0c             	mov    0xc(%eax),%eax
c0102660:	83 ec 08             	sub    $0x8,%esp
c0102663:	50                   	push   %eax
c0102664:	68 be be 10 c0       	push   $0xc010bebe
c0102669:	e8 29 dc ff ff       	call   c0100297 <cprintf>
c010266e:	83 c4 10             	add    $0x10,%esp
    cprintf("  ebx  0x%08x\n", regs->reg_ebx);
c0102671:	8b 45 08             	mov    0x8(%ebp),%eax
c0102674:	8b 40 10             	mov    0x10(%eax),%eax
c0102677:	83 ec 08             	sub    $0x8,%esp
c010267a:	50                   	push   %eax
c010267b:	68 cd be 10 c0       	push   $0xc010becd
c0102680:	e8 12 dc ff ff       	call   c0100297 <cprintf>
c0102685:	83 c4 10             	add    $0x10,%esp
    cprintf("  edx  0x%08x\n", regs->reg_edx);
c0102688:	8b 45 08             	mov    0x8(%ebp),%eax
c010268b:	8b 40 14             	mov    0x14(%eax),%eax
c010268e:	83 ec 08             	sub    $0x8,%esp
c0102691:	50                   	push   %eax
c0102692:	68 dc be 10 c0       	push   $0xc010bedc
c0102697:	e8 fb db ff ff       	call   c0100297 <cprintf>
c010269c:	83 c4 10             	add    $0x10,%esp
    cprintf("  ecx  0x%08x\n", regs->reg_ecx);
c010269f:	8b 45 08             	mov    0x8(%ebp),%eax
c01026a2:	8b 40 18             	mov    0x18(%eax),%eax
c01026a5:	83 ec 08             	sub    $0x8,%esp
c01026a8:	50                   	push   %eax
c01026a9:	68 eb be 10 c0       	push   $0xc010beeb
c01026ae:	e8 e4 db ff ff       	call   c0100297 <cprintf>
c01026b3:	83 c4 10             	add    $0x10,%esp
    cprintf("  eax  0x%08x\n", regs->reg_eax);
c01026b6:	8b 45 08             	mov    0x8(%ebp),%eax
c01026b9:	8b 40 1c             	mov    0x1c(%eax),%eax
c01026bc:	83 ec 08             	sub    $0x8,%esp
c01026bf:	50                   	push   %eax
c01026c0:	68 fa be 10 c0       	push   $0xc010befa
c01026c5:	e8 cd db ff ff       	call   c0100297 <cprintf>
c01026ca:	83 c4 10             	add    $0x10,%esp
}
c01026cd:	90                   	nop
c01026ce:	c9                   	leave  
c01026cf:	c3                   	ret    

c01026d0 <print_pgfault>:

static inline void
print_pgfault(struct trapframe *tf) {
c01026d0:	55                   	push   %ebp
c01026d1:	89 e5                	mov    %esp,%ebp
c01026d3:	53                   	push   %ebx
c01026d4:	83 ec 14             	sub    $0x14,%esp
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
            (tf->tf_err & 1) ? "protection fault" : "no page found");
c01026d7:	8b 45 08             	mov    0x8(%ebp),%eax
c01026da:	8b 40 34             	mov    0x34(%eax),%eax
c01026dd:	83 e0 01             	and    $0x1,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c01026e0:	85 c0                	test   %eax,%eax
c01026e2:	74 07                	je     c01026eb <print_pgfault+0x1b>
c01026e4:	bb 09 bf 10 c0       	mov    $0xc010bf09,%ebx
c01026e9:	eb 05                	jmp    c01026f0 <print_pgfault+0x20>
c01026eb:	bb 1a bf 10 c0       	mov    $0xc010bf1a,%ebx
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
c01026f0:	8b 45 08             	mov    0x8(%ebp),%eax
c01026f3:	8b 40 34             	mov    0x34(%eax),%eax
c01026f6:	83 e0 02             	and    $0x2,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c01026f9:	85 c0                	test   %eax,%eax
c01026fb:	74 07                	je     c0102704 <print_pgfault+0x34>
c01026fd:	b9 57 00 00 00       	mov    $0x57,%ecx
c0102702:	eb 05                	jmp    c0102709 <print_pgfault+0x39>
c0102704:	b9 52 00 00 00       	mov    $0x52,%ecx
            (tf->tf_err & 4) ? 'U' : 'K',
c0102709:	8b 45 08             	mov    0x8(%ebp),%eax
c010270c:	8b 40 34             	mov    0x34(%eax),%eax
c010270f:	83 e0 04             	and    $0x4,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c0102712:	85 c0                	test   %eax,%eax
c0102714:	74 07                	je     c010271d <print_pgfault+0x4d>
c0102716:	ba 55 00 00 00       	mov    $0x55,%edx
c010271b:	eb 05                	jmp    c0102722 <print_pgfault+0x52>
c010271d:	ba 4b 00 00 00       	mov    $0x4b,%edx
}

static inline uintptr_t
rcr2(void) {
    uintptr_t cr2;
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c0102722:	0f 20 d0             	mov    %cr2,%eax
c0102725:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return cr2;
c0102728:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010272b:	83 ec 0c             	sub    $0xc,%esp
c010272e:	53                   	push   %ebx
c010272f:	51                   	push   %ecx
c0102730:	52                   	push   %edx
c0102731:	50                   	push   %eax
c0102732:	68 28 bf 10 c0       	push   $0xc010bf28
c0102737:	e8 5b db ff ff       	call   c0100297 <cprintf>
c010273c:	83 c4 20             	add    $0x20,%esp
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
            (tf->tf_err & 1) ? "protection fault" : "no page found");
}
c010273f:	90                   	nop
c0102740:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0102743:	c9                   	leave  
c0102744:	c3                   	ret    

c0102745 <pgfault_handler>:

static int
pgfault_handler(struct trapframe *tf) {
c0102745:	55                   	push   %ebp
c0102746:	89 e5                	mov    %esp,%ebp
c0102748:	83 ec 18             	sub    $0x18,%esp
    extern struct mm_struct *check_mm_struct;
    if(check_mm_struct !=NULL) { //used for test check_swap
c010274b:	a1 d0 30 1b c0       	mov    0xc01b30d0,%eax
c0102750:	85 c0                	test   %eax,%eax
c0102752:	74 0e                	je     c0102762 <pgfault_handler+0x1d>
            print_pgfault(tf);
c0102754:	83 ec 0c             	sub    $0xc,%esp
c0102757:	ff 75 08             	pushl  0x8(%ebp)
c010275a:	e8 71 ff ff ff       	call   c01026d0 <print_pgfault>
c010275f:	83 c4 10             	add    $0x10,%esp
        }
    struct mm_struct *mm;
    if (check_mm_struct != NULL) {
c0102762:	a1 d0 30 1b c0       	mov    0xc01b30d0,%eax
c0102767:	85 c0                	test   %eax,%eax
c0102769:	74 32                	je     c010279d <pgfault_handler+0x58>
        assert(current == idleproc);
c010276b:	8b 15 28 10 1b c0    	mov    0xc01b1028,%edx
c0102771:	a1 20 10 1b c0       	mov    0xc01b1020,%eax
c0102776:	39 c2                	cmp    %eax,%edx
c0102778:	74 19                	je     c0102793 <pgfault_handler+0x4e>
c010277a:	68 4b bf 10 c0       	push   $0xc010bf4b
c010277f:	68 5f bf 10 c0       	push   $0xc010bf5f
c0102784:	68 b9 00 00 00       	push   $0xb9
c0102789:	68 4e bd 10 c0       	push   $0xc010bd4e
c010278e:	e8 6a dc ff ff       	call   c01003fd <__panic>
        mm = check_mm_struct;
c0102793:	a1 d0 30 1b c0       	mov    0xc01b30d0,%eax
c0102798:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010279b:	eb 47                	jmp    c01027e4 <pgfault_handler+0x9f>
    }
    else {
        if (current == NULL) {
c010279d:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c01027a2:	85 c0                	test   %eax,%eax
c01027a4:	75 33                	jne    c01027d9 <pgfault_handler+0x94>
            print_trapframe(tf);
c01027a6:	83 ec 0c             	sub    $0xc,%esp
c01027a9:	ff 75 08             	pushl  0x8(%ebp)
c01027ac:	e8 82 fc ff ff       	call   c0102433 <print_trapframe>
c01027b1:	83 c4 10             	add    $0x10,%esp
            print_pgfault(tf);
c01027b4:	83 ec 0c             	sub    $0xc,%esp
c01027b7:	ff 75 08             	pushl  0x8(%ebp)
c01027ba:	e8 11 ff ff ff       	call   c01026d0 <print_pgfault>
c01027bf:	83 c4 10             	add    $0x10,%esp
            panic("unhandled page fault.\n");
c01027c2:	83 ec 04             	sub    $0x4,%esp
c01027c5:	68 74 bf 10 c0       	push   $0xc010bf74
c01027ca:	68 c0 00 00 00       	push   $0xc0
c01027cf:	68 4e bd 10 c0       	push   $0xc010bd4e
c01027d4:	e8 24 dc ff ff       	call   c01003fd <__panic>
        }
        mm = current->mm;
c01027d9:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c01027de:	8b 40 18             	mov    0x18(%eax),%eax
c01027e1:	89 45 f4             	mov    %eax,-0xc(%ebp)
}

static inline uintptr_t
rcr2(void) {
    uintptr_t cr2;
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c01027e4:	0f 20 d0             	mov    %cr2,%eax
c01027e7:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return cr2;
c01027ea:	8b 55 f0             	mov    -0x10(%ebp),%edx
    }
    return do_pgfault(mm, tf->tf_err, rcr2());
c01027ed:	8b 45 08             	mov    0x8(%ebp),%eax
c01027f0:	8b 40 34             	mov    0x34(%eax),%eax
c01027f3:	83 ec 04             	sub    $0x4,%esp
c01027f6:	52                   	push   %edx
c01027f7:	50                   	push   %eax
c01027f8:	ff 75 f4             	pushl  -0xc(%ebp)
c01027fb:	e8 c1 1b 00 00       	call   c01043c1 <do_pgfault>
c0102800:	83 c4 10             	add    $0x10,%esp
}
c0102803:	c9                   	leave  
c0102804:	c3                   	ret    

c0102805 <trap_dispatch>:

static volatile int in_swap_tick_event = 0;
extern struct mm_struct *check_mm_struct;

static void
trap_dispatch(struct trapframe *tf) {
c0102805:	55                   	push   %ebp
c0102806:	89 e5                	mov    %esp,%ebp
c0102808:	57                   	push   %edi
c0102809:	56                   	push   %esi
c010280a:	53                   	push   %ebx
c010280b:	83 ec 1c             	sub    $0x1c,%esp
    char c;

    int ret=0;
c010280e:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

    switch (tf->tf_trapno) {
c0102815:	8b 45 08             	mov    0x8(%ebp),%eax
c0102818:	8b 40 30             	mov    0x30(%eax),%eax
c010281b:	83 f8 2f             	cmp    $0x2f,%eax
c010281e:	77 38                	ja     c0102858 <trap_dispatch+0x53>
c0102820:	83 f8 2e             	cmp    $0x2e,%eax
c0102823:	0f 83 9b 02 00 00    	jae    c0102ac4 <trap_dispatch+0x2bf>
c0102829:	83 f8 20             	cmp    $0x20,%eax
c010282c:	0f 84 eb 00 00 00    	je     c010291d <trap_dispatch+0x118>
c0102832:	83 f8 20             	cmp    $0x20,%eax
c0102835:	77 0a                	ja     c0102841 <trap_dispatch+0x3c>
c0102837:	83 f8 0e             	cmp    $0xe,%eax
c010283a:	74 3e                	je     c010287a <trap_dispatch+0x75>
c010283c:	e9 38 02 00 00       	jmp    c0102a79 <trap_dispatch+0x274>
c0102841:	83 f8 21             	cmp    $0x21,%eax
c0102844:	0f 84 62 01 00 00    	je     c01029ac <trap_dispatch+0x1a7>
c010284a:	83 f8 24             	cmp    $0x24,%eax
c010284d:	0f 84 32 01 00 00    	je     c0102985 <trap_dispatch+0x180>
c0102853:	e9 21 02 00 00       	jmp    c0102a79 <trap_dispatch+0x274>
c0102858:	83 f8 79             	cmp    $0x79,%eax
c010285b:	0f 84 ea 01 00 00    	je     c0102a4b <trap_dispatch+0x246>
c0102861:	3d 80 00 00 00       	cmp    $0x80,%eax
c0102866:	0f 84 a7 00 00 00    	je     c0102913 <trap_dispatch+0x10e>
c010286c:	83 f8 78             	cmp    $0x78,%eax
c010286f:	0f 84 5e 01 00 00    	je     c01029d3 <trap_dispatch+0x1ce>
c0102875:	e9 ff 01 00 00       	jmp    c0102a79 <trap_dispatch+0x274>
    case T_PGFLT:  //page fault
        if ((ret = pgfault_handler(tf)) != 0) {
c010287a:	83 ec 0c             	sub    $0xc,%esp
c010287d:	ff 75 08             	pushl  0x8(%ebp)
c0102880:	e8 c0 fe ff ff       	call   c0102745 <pgfault_handler>
c0102885:	83 c4 10             	add    $0x10,%esp
c0102888:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010288b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010288f:	0f 84 32 02 00 00    	je     c0102ac7 <trap_dispatch+0x2c2>
            print_trapframe(tf);
c0102895:	83 ec 0c             	sub    $0xc,%esp
c0102898:	ff 75 08             	pushl  0x8(%ebp)
c010289b:	e8 93 fb ff ff       	call   c0102433 <print_trapframe>
c01028a0:	83 c4 10             	add    $0x10,%esp
            if (current == NULL) {
c01028a3:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c01028a8:	85 c0                	test   %eax,%eax
c01028aa:	75 17                	jne    c01028c3 <trap_dispatch+0xbe>
                panic("handle pgfault failed. ret=%d\n", ret);
c01028ac:	ff 75 e4             	pushl  -0x1c(%ebp)
c01028af:	68 8c bf 10 c0       	push   $0xc010bf8c
c01028b4:	68 d5 00 00 00       	push   $0xd5
c01028b9:	68 4e bd 10 c0       	push   $0xc010bd4e
c01028be:	e8 3a db ff ff       	call   c01003fd <__panic>
            }
            else {
                if (trap_in_kernel(tf)) {
c01028c3:	83 ec 0c             	sub    $0xc,%esp
c01028c6:	ff 75 08             	pushl  0x8(%ebp)
c01028c9:	e8 4f fb ff ff       	call   c010241d <trap_in_kernel>
c01028ce:	83 c4 10             	add    $0x10,%esp
c01028d1:	85 c0                	test   %eax,%eax
c01028d3:	74 17                	je     c01028ec <trap_dispatch+0xe7>
                    panic("handle pgfault failed in kernel mode. ret=%d\n", ret);
c01028d5:	ff 75 e4             	pushl  -0x1c(%ebp)
c01028d8:	68 ac bf 10 c0       	push   $0xc010bfac
c01028dd:	68 d9 00 00 00       	push   $0xd9
c01028e2:	68 4e bd 10 c0       	push   $0xc010bd4e
c01028e7:	e8 11 db ff ff       	call   c01003fd <__panic>
                }
                cprintf("killed by kernel.\n");
c01028ec:	83 ec 0c             	sub    $0xc,%esp
c01028ef:	68 da bf 10 c0       	push   $0xc010bfda
c01028f4:	e8 9e d9 ff ff       	call   c0100297 <cprintf>
c01028f9:	83 c4 10             	add    $0x10,%esp
                panic("handle user mode pgfault failed. ret=%d\n", ret); 
c01028fc:	ff 75 e4             	pushl  -0x1c(%ebp)
c01028ff:	68 f0 bf 10 c0       	push   $0xc010bff0
c0102904:	68 dc 00 00 00       	push   $0xdc
c0102909:	68 4e bd 10 c0       	push   $0xc010bd4e
c010290e:	e8 ea da ff ff       	call   c01003fd <__panic>
                do_exit(-E_KILLED);
            }
        }
        break;
    case T_SYSCALL:
        syscall();
c0102913:	e8 0f 83 00 00       	call   c010ac27 <syscall>
        break;
c0102918:	e9 ae 01 00 00       	jmp    c0102acb <trap_dispatch+0x2c6>
        /* LAB6 2015010062 */
        /* you should upate you lab5 code
         * IMPORTANT FUNCTIONS:
	     * sched_class_proc_tick
         */
        ticks++;
c010291d:	a1 78 30 1b c0       	mov    0xc01b3078,%eax
c0102922:	83 c0 01             	add    $0x1,%eax
c0102925:	a3 78 30 1b c0       	mov    %eax,0xc01b3078
        if (ticks % TICK_NUM == 0) {
c010292a:	8b 0d 78 30 1b c0    	mov    0xc01b3078,%ecx
c0102930:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
c0102935:	89 c8                	mov    %ecx,%eax
c0102937:	f7 e2                	mul    %edx
c0102939:	89 d0                	mov    %edx,%eax
c010293b:	c1 e8 05             	shr    $0x5,%eax
c010293e:	6b c0 64             	imul   $0x64,%eax,%eax
c0102941:	29 c1                	sub    %eax,%ecx
c0102943:	89 c8                	mov    %ecx,%eax
c0102945:	85 c0                	test   %eax,%eax
c0102947:	0f 85 7d 01 00 00    	jne    c0102aca <trap_dispatch+0x2c5>
            // print_ticks();
            assert(current != NULL);
c010294d:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c0102952:	85 c0                	test   %eax,%eax
c0102954:	75 19                	jne    c010296f <trap_dispatch+0x16a>
c0102956:	68 19 c0 10 c0       	push   $0xc010c019
c010295b:	68 5f bf 10 c0       	push   $0xc010bf5f
c0102960:	68 fb 00 00 00       	push   $0xfb
c0102965:	68 4e bd 10 c0       	push   $0xc010bd4e
c010296a:	e8 8e da ff ff       	call   c01003fd <__panic>
            // current->need_resched = 1;
            sched_class_proc_tick(current);
c010296f:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c0102974:	83 ec 0c             	sub    $0xc,%esp
c0102977:	50                   	push   %eax
c0102978:	e8 7c 7d 00 00       	call   c010a6f9 <sched_class_proc_tick>
c010297d:	83 c4 10             	add    $0x10,%esp
        }
        break;
c0102980:	e9 45 01 00 00       	jmp    c0102aca <trap_dispatch+0x2c5>
    case IRQ_OFFSET + IRQ_COM1:
        c = cons_getc();
c0102985:	e8 f6 f5 ff ff       	call   c0101f80 <cons_getc>
c010298a:	88 45 e3             	mov    %al,-0x1d(%ebp)
        cprintf("serial [%03d] %c\n", c, c);
c010298d:	0f be 55 e3          	movsbl -0x1d(%ebp),%edx
c0102991:	0f be 45 e3          	movsbl -0x1d(%ebp),%eax
c0102995:	83 ec 04             	sub    $0x4,%esp
c0102998:	52                   	push   %edx
c0102999:	50                   	push   %eax
c010299a:	68 29 c0 10 c0       	push   $0xc010c029
c010299f:	e8 f3 d8 ff ff       	call   c0100297 <cprintf>
c01029a4:	83 c4 10             	add    $0x10,%esp
        break;
c01029a7:	e9 1f 01 00 00       	jmp    c0102acb <trap_dispatch+0x2c6>
    case IRQ_OFFSET + IRQ_KBD:
        c = cons_getc();
c01029ac:	e8 cf f5 ff ff       	call   c0101f80 <cons_getc>
c01029b1:	88 45 e3             	mov    %al,-0x1d(%ebp)
        cprintf("kbd [%03d] %c\n", c, c);
c01029b4:	0f be 55 e3          	movsbl -0x1d(%ebp),%edx
c01029b8:	0f be 45 e3          	movsbl -0x1d(%ebp),%eax
c01029bc:	83 ec 04             	sub    $0x4,%esp
c01029bf:	52                   	push   %edx
c01029c0:	50                   	push   %eax
c01029c1:	68 3b c0 10 c0       	push   $0xc010c03b
c01029c6:	e8 cc d8 ff ff       	call   c0100297 <cprintf>
c01029cb:	83 c4 10             	add    $0x10,%esp
        break;
c01029ce:	e9 f8 00 00 00       	jmp    c0102acb <trap_dispatch+0x2c6>
    //LAB1 CHALLENGE 1 : YOUR CODE you should modify below codes.
    case T_SWITCH_TOU:
        switchk2u = *tf;
c01029d3:	8b 55 08             	mov    0x8(%ebp),%edx
c01029d6:	b8 80 30 1b c0       	mov    $0xc01b3080,%eax
c01029db:	89 d3                	mov    %edx,%ebx
c01029dd:	ba 4c 00 00 00       	mov    $0x4c,%edx
c01029e2:	8b 0b                	mov    (%ebx),%ecx
c01029e4:	89 08                	mov    %ecx,(%eax)
c01029e6:	8b 4c 13 fc          	mov    -0x4(%ebx,%edx,1),%ecx
c01029ea:	89 4c 10 fc          	mov    %ecx,-0x4(%eax,%edx,1)
c01029ee:	8d 78 04             	lea    0x4(%eax),%edi
c01029f1:	83 e7 fc             	and    $0xfffffffc,%edi
c01029f4:	29 f8                	sub    %edi,%eax
c01029f6:	29 c3                	sub    %eax,%ebx
c01029f8:	01 c2                	add    %eax,%edx
c01029fa:	83 e2 fc             	and    $0xfffffffc,%edx
c01029fd:	89 d0                	mov    %edx,%eax
c01029ff:	c1 e8 02             	shr    $0x2,%eax
c0102a02:	89 de                	mov    %ebx,%esi
c0102a04:	89 c1                	mov    %eax,%ecx
c0102a06:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
        switchk2u.tf_cs = USER_CS;
c0102a08:	66 c7 05 bc 30 1b c0 	movw   $0x1b,0xc01b30bc
c0102a0f:	1b 00 
        switchk2u.tf_ds = USER_DS;
c0102a11:	66 c7 05 ac 30 1b c0 	movw   $0x23,0xc01b30ac
c0102a18:	23 00 
        switchk2u.tf_es = USER_DS;
c0102a1a:	66 c7 05 a8 30 1b c0 	movw   $0x23,0xc01b30a8
c0102a21:	23 00 
        switchk2u.tf_ss = USER_DS;
c0102a23:	66 c7 05 c8 30 1b c0 	movw   $0x23,0xc01b30c8
c0102a2a:	23 00 
        switchk2u.tf_eflags |= FL_IOPL_MASK;
c0102a2c:	a1 c0 30 1b c0       	mov    0xc01b30c0,%eax
c0102a31:	80 cc 30             	or     $0x30,%ah
c0102a34:	a3 c0 30 1b c0       	mov    %eax,0xc01b30c0
        *((uint32_t *)tf - 1) = (uint32_t)&switchk2u;
c0102a39:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a3c:	83 e8 04             	sub    $0x4,%eax
c0102a3f:	ba 80 30 1b c0       	mov    $0xc01b3080,%edx
c0102a44:	89 10                	mov    %edx,(%eax)
        break;
c0102a46:	e9 80 00 00 00       	jmp    c0102acb <trap_dispatch+0x2c6>
    case T_SWITCH_TOK:
        tf->tf_cs = KERNEL_CS;
c0102a4b:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a4e:	66 c7 40 3c 08 00    	movw   $0x8,0x3c(%eax)
        tf->tf_ds = KERNEL_DS;
c0102a54:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a57:	66 c7 40 2c 10 00    	movw   $0x10,0x2c(%eax)
        tf->tf_es = KERNEL_DS;
c0102a5d:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a60:	66 c7 40 28 10 00    	movw   $0x10,0x28(%eax)
        tf->tf_eflags &= ~FL_IOPL_MASK;
c0102a66:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a69:	8b 40 40             	mov    0x40(%eax),%eax
c0102a6c:	80 e4 cf             	and    $0xcf,%ah
c0102a6f:	89 c2                	mov    %eax,%edx
c0102a71:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a74:	89 50 40             	mov    %edx,0x40(%eax)
        break;
c0102a77:	eb 52                	jmp    c0102acb <trap_dispatch+0x2c6>
    case IRQ_OFFSET + IRQ_IDE1:
    case IRQ_OFFSET + IRQ_IDE2:
        /* do nothing */
        break;
    default:
        print_trapframe(tf);
c0102a79:	83 ec 0c             	sub    $0xc,%esp
c0102a7c:	ff 75 08             	pushl  0x8(%ebp)
c0102a7f:	e8 af f9 ff ff       	call   c0102433 <print_trapframe>
c0102a84:	83 c4 10             	add    $0x10,%esp
        if (current != NULL) {
c0102a87:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c0102a8c:	85 c0                	test   %eax,%eax
c0102a8e:	74 1d                	je     c0102aad <trap_dispatch+0x2a8>
            cprintf("unhandled trap.\n");
c0102a90:	83 ec 0c             	sub    $0xc,%esp
c0102a93:	68 4a c0 10 c0       	push   $0xc010c04a
c0102a98:	e8 fa d7 ff ff       	call   c0100297 <cprintf>
c0102a9d:	83 c4 10             	add    $0x10,%esp
            do_exit(-E_KILLED);
c0102aa0:	83 ec 0c             	sub    $0xc,%esp
c0102aa3:	6a f7                	push   $0xfffffff7
c0102aa5:	e8 0e 6d 00 00       	call   c01097b8 <do_exit>
c0102aaa:	83 c4 10             	add    $0x10,%esp
        }
        // in kernel, it must be a mistake
        panic("unexpected trap in kernel.\n");
c0102aad:	83 ec 04             	sub    $0x4,%esp
c0102ab0:	68 5b c0 10 c0       	push   $0xc010c05b
c0102ab5:	68 24 01 00 00       	push   $0x124
c0102aba:	68 4e bd 10 c0       	push   $0xc010bd4e
c0102abf:	e8 39 d9 ff ff       	call   c01003fd <__panic>
        break;
    // end of copy
    case IRQ_OFFSET + IRQ_IDE1:
    case IRQ_OFFSET + IRQ_IDE2:
        /* do nothing */
        break;
c0102ac4:	90                   	nop
c0102ac5:	eb 04                	jmp    c0102acb <trap_dispatch+0x2c6>
                cprintf("killed by kernel.\n");
                panic("handle user mode pgfault failed. ret=%d\n", ret); 
                do_exit(-E_KILLED);
            }
        }
        break;
c0102ac7:	90                   	nop
c0102ac8:	eb 01                	jmp    c0102acb <trap_dispatch+0x2c6>
            // print_ticks();
            assert(current != NULL);
            // current->need_resched = 1;
            sched_class_proc_tick(current);
        }
        break;
c0102aca:	90                   	nop
        }
        // in kernel, it must be a mistake
        panic("unexpected trap in kernel.\n");

    }
}
c0102acb:	90                   	nop
c0102acc:	8d 65 f4             	lea    -0xc(%ebp),%esp
c0102acf:	5b                   	pop    %ebx
c0102ad0:	5e                   	pop    %esi
c0102ad1:	5f                   	pop    %edi
c0102ad2:	5d                   	pop    %ebp
c0102ad3:	c3                   	ret    

c0102ad4 <trap>:
 * trap - handles or dispatches an exception/interrupt. if and when trap() returns,
 * the code in kern/trap/trapentry.S restores the old CPU state saved in the
 * trapframe and then uses the iret instruction to return from the exception.
 * */
void
trap(struct trapframe *tf) {
c0102ad4:	55                   	push   %ebp
c0102ad5:	89 e5                	mov    %esp,%ebp
c0102ad7:	83 ec 18             	sub    $0x18,%esp
    // dispatch based on what type of trap occurred
    // used for previous projects
    if (current == NULL) {
c0102ada:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c0102adf:	85 c0                	test   %eax,%eax
c0102ae1:	75 10                	jne    c0102af3 <trap+0x1f>
        trap_dispatch(tf);
c0102ae3:	83 ec 0c             	sub    $0xc,%esp
c0102ae6:	ff 75 08             	pushl  0x8(%ebp)
c0102ae9:	e8 17 fd ff ff       	call   c0102805 <trap_dispatch>
c0102aee:	83 c4 10             	add    $0x10,%esp
            if (current->need_resched) {
                schedule();
            }
        }
    }
}
c0102af1:	eb 73                	jmp    c0102b66 <trap+0x92>
    if (current == NULL) {
        trap_dispatch(tf);
    }
    else {
        // keep a trapframe chain in stack
        struct trapframe *otf = current->tf;
c0102af3:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c0102af8:	8b 40 3c             	mov    0x3c(%eax),%eax
c0102afb:	89 45 f4             	mov    %eax,-0xc(%ebp)
        current->tf = tf;
c0102afe:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c0102b03:	8b 55 08             	mov    0x8(%ebp),%edx
c0102b06:	89 50 3c             	mov    %edx,0x3c(%eax)
    
        bool in_kernel = trap_in_kernel(tf);
c0102b09:	83 ec 0c             	sub    $0xc,%esp
c0102b0c:	ff 75 08             	pushl  0x8(%ebp)
c0102b0f:	e8 09 f9 ff ff       	call   c010241d <trap_in_kernel>
c0102b14:	83 c4 10             	add    $0x10,%esp
c0102b17:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
        trap_dispatch(tf);
c0102b1a:	83 ec 0c             	sub    $0xc,%esp
c0102b1d:	ff 75 08             	pushl  0x8(%ebp)
c0102b20:	e8 e0 fc ff ff       	call   c0102805 <trap_dispatch>
c0102b25:	83 c4 10             	add    $0x10,%esp
    
        current->tf = otf;
c0102b28:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c0102b2d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0102b30:	89 50 3c             	mov    %edx,0x3c(%eax)
        if (!in_kernel) {
c0102b33:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0102b37:	75 2d                	jne    c0102b66 <trap+0x92>
            if (current->flags & PF_EXITING) {
c0102b39:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c0102b3e:	8b 40 44             	mov    0x44(%eax),%eax
c0102b41:	83 e0 01             	and    $0x1,%eax
c0102b44:	85 c0                	test   %eax,%eax
c0102b46:	74 0d                	je     c0102b55 <trap+0x81>
                do_exit(-E_KILLED);
c0102b48:	83 ec 0c             	sub    $0xc,%esp
c0102b4b:	6a f7                	push   $0xfffffff7
c0102b4d:	e8 66 6c 00 00       	call   c01097b8 <do_exit>
c0102b52:	83 c4 10             	add    $0x10,%esp
            }
            if (current->need_resched) {
c0102b55:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c0102b5a:	8b 40 10             	mov    0x10(%eax),%eax
c0102b5d:	85 c0                	test   %eax,%eax
c0102b5f:	74 05                	je     c0102b66 <trap+0x92>
                schedule();
c0102b61:	e8 cc 7c 00 00       	call   c010a832 <schedule>
            }
        }
    }
}
c0102b66:	90                   	nop
c0102b67:	c9                   	leave  
c0102b68:	c3                   	ret    

c0102b69 <vector0>:
# handler
.text
.globl __alltraps
.globl vector0
vector0:
  pushl $0
c0102b69:	6a 00                	push   $0x0
  pushl $0
c0102b6b:	6a 00                	push   $0x0
  jmp __alltraps
c0102b6d:	e9 69 0a 00 00       	jmp    c01035db <__alltraps>

c0102b72 <vector1>:
.globl vector1
vector1:
  pushl $0
c0102b72:	6a 00                	push   $0x0
  pushl $1
c0102b74:	6a 01                	push   $0x1
  jmp __alltraps
c0102b76:	e9 60 0a 00 00       	jmp    c01035db <__alltraps>

c0102b7b <vector2>:
.globl vector2
vector2:
  pushl $0
c0102b7b:	6a 00                	push   $0x0
  pushl $2
c0102b7d:	6a 02                	push   $0x2
  jmp __alltraps
c0102b7f:	e9 57 0a 00 00       	jmp    c01035db <__alltraps>

c0102b84 <vector3>:
.globl vector3
vector3:
  pushl $0
c0102b84:	6a 00                	push   $0x0
  pushl $3
c0102b86:	6a 03                	push   $0x3
  jmp __alltraps
c0102b88:	e9 4e 0a 00 00       	jmp    c01035db <__alltraps>

c0102b8d <vector4>:
.globl vector4
vector4:
  pushl $0
c0102b8d:	6a 00                	push   $0x0
  pushl $4
c0102b8f:	6a 04                	push   $0x4
  jmp __alltraps
c0102b91:	e9 45 0a 00 00       	jmp    c01035db <__alltraps>

c0102b96 <vector5>:
.globl vector5
vector5:
  pushl $0
c0102b96:	6a 00                	push   $0x0
  pushl $5
c0102b98:	6a 05                	push   $0x5
  jmp __alltraps
c0102b9a:	e9 3c 0a 00 00       	jmp    c01035db <__alltraps>

c0102b9f <vector6>:
.globl vector6
vector6:
  pushl $0
c0102b9f:	6a 00                	push   $0x0
  pushl $6
c0102ba1:	6a 06                	push   $0x6
  jmp __alltraps
c0102ba3:	e9 33 0a 00 00       	jmp    c01035db <__alltraps>

c0102ba8 <vector7>:
.globl vector7
vector7:
  pushl $0
c0102ba8:	6a 00                	push   $0x0
  pushl $7
c0102baa:	6a 07                	push   $0x7
  jmp __alltraps
c0102bac:	e9 2a 0a 00 00       	jmp    c01035db <__alltraps>

c0102bb1 <vector8>:
.globl vector8
vector8:
  pushl $8
c0102bb1:	6a 08                	push   $0x8
  jmp __alltraps
c0102bb3:	e9 23 0a 00 00       	jmp    c01035db <__alltraps>

c0102bb8 <vector9>:
.globl vector9
vector9:
  pushl $0
c0102bb8:	6a 00                	push   $0x0
  pushl $9
c0102bba:	6a 09                	push   $0x9
  jmp __alltraps
c0102bbc:	e9 1a 0a 00 00       	jmp    c01035db <__alltraps>

c0102bc1 <vector10>:
.globl vector10
vector10:
  pushl $10
c0102bc1:	6a 0a                	push   $0xa
  jmp __alltraps
c0102bc3:	e9 13 0a 00 00       	jmp    c01035db <__alltraps>

c0102bc8 <vector11>:
.globl vector11
vector11:
  pushl $11
c0102bc8:	6a 0b                	push   $0xb
  jmp __alltraps
c0102bca:	e9 0c 0a 00 00       	jmp    c01035db <__alltraps>

c0102bcf <vector12>:
.globl vector12
vector12:
  pushl $12
c0102bcf:	6a 0c                	push   $0xc
  jmp __alltraps
c0102bd1:	e9 05 0a 00 00       	jmp    c01035db <__alltraps>

c0102bd6 <vector13>:
.globl vector13
vector13:
  pushl $13
c0102bd6:	6a 0d                	push   $0xd
  jmp __alltraps
c0102bd8:	e9 fe 09 00 00       	jmp    c01035db <__alltraps>

c0102bdd <vector14>:
.globl vector14
vector14:
  pushl $14
c0102bdd:	6a 0e                	push   $0xe
  jmp __alltraps
c0102bdf:	e9 f7 09 00 00       	jmp    c01035db <__alltraps>

c0102be4 <vector15>:
.globl vector15
vector15:
  pushl $0
c0102be4:	6a 00                	push   $0x0
  pushl $15
c0102be6:	6a 0f                	push   $0xf
  jmp __alltraps
c0102be8:	e9 ee 09 00 00       	jmp    c01035db <__alltraps>

c0102bed <vector16>:
.globl vector16
vector16:
  pushl $0
c0102bed:	6a 00                	push   $0x0
  pushl $16
c0102bef:	6a 10                	push   $0x10
  jmp __alltraps
c0102bf1:	e9 e5 09 00 00       	jmp    c01035db <__alltraps>

c0102bf6 <vector17>:
.globl vector17
vector17:
  pushl $17
c0102bf6:	6a 11                	push   $0x11
  jmp __alltraps
c0102bf8:	e9 de 09 00 00       	jmp    c01035db <__alltraps>

c0102bfd <vector18>:
.globl vector18
vector18:
  pushl $0
c0102bfd:	6a 00                	push   $0x0
  pushl $18
c0102bff:	6a 12                	push   $0x12
  jmp __alltraps
c0102c01:	e9 d5 09 00 00       	jmp    c01035db <__alltraps>

c0102c06 <vector19>:
.globl vector19
vector19:
  pushl $0
c0102c06:	6a 00                	push   $0x0
  pushl $19
c0102c08:	6a 13                	push   $0x13
  jmp __alltraps
c0102c0a:	e9 cc 09 00 00       	jmp    c01035db <__alltraps>

c0102c0f <vector20>:
.globl vector20
vector20:
  pushl $0
c0102c0f:	6a 00                	push   $0x0
  pushl $20
c0102c11:	6a 14                	push   $0x14
  jmp __alltraps
c0102c13:	e9 c3 09 00 00       	jmp    c01035db <__alltraps>

c0102c18 <vector21>:
.globl vector21
vector21:
  pushl $0
c0102c18:	6a 00                	push   $0x0
  pushl $21
c0102c1a:	6a 15                	push   $0x15
  jmp __alltraps
c0102c1c:	e9 ba 09 00 00       	jmp    c01035db <__alltraps>

c0102c21 <vector22>:
.globl vector22
vector22:
  pushl $0
c0102c21:	6a 00                	push   $0x0
  pushl $22
c0102c23:	6a 16                	push   $0x16
  jmp __alltraps
c0102c25:	e9 b1 09 00 00       	jmp    c01035db <__alltraps>

c0102c2a <vector23>:
.globl vector23
vector23:
  pushl $0
c0102c2a:	6a 00                	push   $0x0
  pushl $23
c0102c2c:	6a 17                	push   $0x17
  jmp __alltraps
c0102c2e:	e9 a8 09 00 00       	jmp    c01035db <__alltraps>

c0102c33 <vector24>:
.globl vector24
vector24:
  pushl $0
c0102c33:	6a 00                	push   $0x0
  pushl $24
c0102c35:	6a 18                	push   $0x18
  jmp __alltraps
c0102c37:	e9 9f 09 00 00       	jmp    c01035db <__alltraps>

c0102c3c <vector25>:
.globl vector25
vector25:
  pushl $0
c0102c3c:	6a 00                	push   $0x0
  pushl $25
c0102c3e:	6a 19                	push   $0x19
  jmp __alltraps
c0102c40:	e9 96 09 00 00       	jmp    c01035db <__alltraps>

c0102c45 <vector26>:
.globl vector26
vector26:
  pushl $0
c0102c45:	6a 00                	push   $0x0
  pushl $26
c0102c47:	6a 1a                	push   $0x1a
  jmp __alltraps
c0102c49:	e9 8d 09 00 00       	jmp    c01035db <__alltraps>

c0102c4e <vector27>:
.globl vector27
vector27:
  pushl $0
c0102c4e:	6a 00                	push   $0x0
  pushl $27
c0102c50:	6a 1b                	push   $0x1b
  jmp __alltraps
c0102c52:	e9 84 09 00 00       	jmp    c01035db <__alltraps>

c0102c57 <vector28>:
.globl vector28
vector28:
  pushl $0
c0102c57:	6a 00                	push   $0x0
  pushl $28
c0102c59:	6a 1c                	push   $0x1c
  jmp __alltraps
c0102c5b:	e9 7b 09 00 00       	jmp    c01035db <__alltraps>

c0102c60 <vector29>:
.globl vector29
vector29:
  pushl $0
c0102c60:	6a 00                	push   $0x0
  pushl $29
c0102c62:	6a 1d                	push   $0x1d
  jmp __alltraps
c0102c64:	e9 72 09 00 00       	jmp    c01035db <__alltraps>

c0102c69 <vector30>:
.globl vector30
vector30:
  pushl $0
c0102c69:	6a 00                	push   $0x0
  pushl $30
c0102c6b:	6a 1e                	push   $0x1e
  jmp __alltraps
c0102c6d:	e9 69 09 00 00       	jmp    c01035db <__alltraps>

c0102c72 <vector31>:
.globl vector31
vector31:
  pushl $0
c0102c72:	6a 00                	push   $0x0
  pushl $31
c0102c74:	6a 1f                	push   $0x1f
  jmp __alltraps
c0102c76:	e9 60 09 00 00       	jmp    c01035db <__alltraps>

c0102c7b <vector32>:
.globl vector32
vector32:
  pushl $0
c0102c7b:	6a 00                	push   $0x0
  pushl $32
c0102c7d:	6a 20                	push   $0x20
  jmp __alltraps
c0102c7f:	e9 57 09 00 00       	jmp    c01035db <__alltraps>

c0102c84 <vector33>:
.globl vector33
vector33:
  pushl $0
c0102c84:	6a 00                	push   $0x0
  pushl $33
c0102c86:	6a 21                	push   $0x21
  jmp __alltraps
c0102c88:	e9 4e 09 00 00       	jmp    c01035db <__alltraps>

c0102c8d <vector34>:
.globl vector34
vector34:
  pushl $0
c0102c8d:	6a 00                	push   $0x0
  pushl $34
c0102c8f:	6a 22                	push   $0x22
  jmp __alltraps
c0102c91:	e9 45 09 00 00       	jmp    c01035db <__alltraps>

c0102c96 <vector35>:
.globl vector35
vector35:
  pushl $0
c0102c96:	6a 00                	push   $0x0
  pushl $35
c0102c98:	6a 23                	push   $0x23
  jmp __alltraps
c0102c9a:	e9 3c 09 00 00       	jmp    c01035db <__alltraps>

c0102c9f <vector36>:
.globl vector36
vector36:
  pushl $0
c0102c9f:	6a 00                	push   $0x0
  pushl $36
c0102ca1:	6a 24                	push   $0x24
  jmp __alltraps
c0102ca3:	e9 33 09 00 00       	jmp    c01035db <__alltraps>

c0102ca8 <vector37>:
.globl vector37
vector37:
  pushl $0
c0102ca8:	6a 00                	push   $0x0
  pushl $37
c0102caa:	6a 25                	push   $0x25
  jmp __alltraps
c0102cac:	e9 2a 09 00 00       	jmp    c01035db <__alltraps>

c0102cb1 <vector38>:
.globl vector38
vector38:
  pushl $0
c0102cb1:	6a 00                	push   $0x0
  pushl $38
c0102cb3:	6a 26                	push   $0x26
  jmp __alltraps
c0102cb5:	e9 21 09 00 00       	jmp    c01035db <__alltraps>

c0102cba <vector39>:
.globl vector39
vector39:
  pushl $0
c0102cba:	6a 00                	push   $0x0
  pushl $39
c0102cbc:	6a 27                	push   $0x27
  jmp __alltraps
c0102cbe:	e9 18 09 00 00       	jmp    c01035db <__alltraps>

c0102cc3 <vector40>:
.globl vector40
vector40:
  pushl $0
c0102cc3:	6a 00                	push   $0x0
  pushl $40
c0102cc5:	6a 28                	push   $0x28
  jmp __alltraps
c0102cc7:	e9 0f 09 00 00       	jmp    c01035db <__alltraps>

c0102ccc <vector41>:
.globl vector41
vector41:
  pushl $0
c0102ccc:	6a 00                	push   $0x0
  pushl $41
c0102cce:	6a 29                	push   $0x29
  jmp __alltraps
c0102cd0:	e9 06 09 00 00       	jmp    c01035db <__alltraps>

c0102cd5 <vector42>:
.globl vector42
vector42:
  pushl $0
c0102cd5:	6a 00                	push   $0x0
  pushl $42
c0102cd7:	6a 2a                	push   $0x2a
  jmp __alltraps
c0102cd9:	e9 fd 08 00 00       	jmp    c01035db <__alltraps>

c0102cde <vector43>:
.globl vector43
vector43:
  pushl $0
c0102cde:	6a 00                	push   $0x0
  pushl $43
c0102ce0:	6a 2b                	push   $0x2b
  jmp __alltraps
c0102ce2:	e9 f4 08 00 00       	jmp    c01035db <__alltraps>

c0102ce7 <vector44>:
.globl vector44
vector44:
  pushl $0
c0102ce7:	6a 00                	push   $0x0
  pushl $44
c0102ce9:	6a 2c                	push   $0x2c
  jmp __alltraps
c0102ceb:	e9 eb 08 00 00       	jmp    c01035db <__alltraps>

c0102cf0 <vector45>:
.globl vector45
vector45:
  pushl $0
c0102cf0:	6a 00                	push   $0x0
  pushl $45
c0102cf2:	6a 2d                	push   $0x2d
  jmp __alltraps
c0102cf4:	e9 e2 08 00 00       	jmp    c01035db <__alltraps>

c0102cf9 <vector46>:
.globl vector46
vector46:
  pushl $0
c0102cf9:	6a 00                	push   $0x0
  pushl $46
c0102cfb:	6a 2e                	push   $0x2e
  jmp __alltraps
c0102cfd:	e9 d9 08 00 00       	jmp    c01035db <__alltraps>

c0102d02 <vector47>:
.globl vector47
vector47:
  pushl $0
c0102d02:	6a 00                	push   $0x0
  pushl $47
c0102d04:	6a 2f                	push   $0x2f
  jmp __alltraps
c0102d06:	e9 d0 08 00 00       	jmp    c01035db <__alltraps>

c0102d0b <vector48>:
.globl vector48
vector48:
  pushl $0
c0102d0b:	6a 00                	push   $0x0
  pushl $48
c0102d0d:	6a 30                	push   $0x30
  jmp __alltraps
c0102d0f:	e9 c7 08 00 00       	jmp    c01035db <__alltraps>

c0102d14 <vector49>:
.globl vector49
vector49:
  pushl $0
c0102d14:	6a 00                	push   $0x0
  pushl $49
c0102d16:	6a 31                	push   $0x31
  jmp __alltraps
c0102d18:	e9 be 08 00 00       	jmp    c01035db <__alltraps>

c0102d1d <vector50>:
.globl vector50
vector50:
  pushl $0
c0102d1d:	6a 00                	push   $0x0
  pushl $50
c0102d1f:	6a 32                	push   $0x32
  jmp __alltraps
c0102d21:	e9 b5 08 00 00       	jmp    c01035db <__alltraps>

c0102d26 <vector51>:
.globl vector51
vector51:
  pushl $0
c0102d26:	6a 00                	push   $0x0
  pushl $51
c0102d28:	6a 33                	push   $0x33
  jmp __alltraps
c0102d2a:	e9 ac 08 00 00       	jmp    c01035db <__alltraps>

c0102d2f <vector52>:
.globl vector52
vector52:
  pushl $0
c0102d2f:	6a 00                	push   $0x0
  pushl $52
c0102d31:	6a 34                	push   $0x34
  jmp __alltraps
c0102d33:	e9 a3 08 00 00       	jmp    c01035db <__alltraps>

c0102d38 <vector53>:
.globl vector53
vector53:
  pushl $0
c0102d38:	6a 00                	push   $0x0
  pushl $53
c0102d3a:	6a 35                	push   $0x35
  jmp __alltraps
c0102d3c:	e9 9a 08 00 00       	jmp    c01035db <__alltraps>

c0102d41 <vector54>:
.globl vector54
vector54:
  pushl $0
c0102d41:	6a 00                	push   $0x0
  pushl $54
c0102d43:	6a 36                	push   $0x36
  jmp __alltraps
c0102d45:	e9 91 08 00 00       	jmp    c01035db <__alltraps>

c0102d4a <vector55>:
.globl vector55
vector55:
  pushl $0
c0102d4a:	6a 00                	push   $0x0
  pushl $55
c0102d4c:	6a 37                	push   $0x37
  jmp __alltraps
c0102d4e:	e9 88 08 00 00       	jmp    c01035db <__alltraps>

c0102d53 <vector56>:
.globl vector56
vector56:
  pushl $0
c0102d53:	6a 00                	push   $0x0
  pushl $56
c0102d55:	6a 38                	push   $0x38
  jmp __alltraps
c0102d57:	e9 7f 08 00 00       	jmp    c01035db <__alltraps>

c0102d5c <vector57>:
.globl vector57
vector57:
  pushl $0
c0102d5c:	6a 00                	push   $0x0
  pushl $57
c0102d5e:	6a 39                	push   $0x39
  jmp __alltraps
c0102d60:	e9 76 08 00 00       	jmp    c01035db <__alltraps>

c0102d65 <vector58>:
.globl vector58
vector58:
  pushl $0
c0102d65:	6a 00                	push   $0x0
  pushl $58
c0102d67:	6a 3a                	push   $0x3a
  jmp __alltraps
c0102d69:	e9 6d 08 00 00       	jmp    c01035db <__alltraps>

c0102d6e <vector59>:
.globl vector59
vector59:
  pushl $0
c0102d6e:	6a 00                	push   $0x0
  pushl $59
c0102d70:	6a 3b                	push   $0x3b
  jmp __alltraps
c0102d72:	e9 64 08 00 00       	jmp    c01035db <__alltraps>

c0102d77 <vector60>:
.globl vector60
vector60:
  pushl $0
c0102d77:	6a 00                	push   $0x0
  pushl $60
c0102d79:	6a 3c                	push   $0x3c
  jmp __alltraps
c0102d7b:	e9 5b 08 00 00       	jmp    c01035db <__alltraps>

c0102d80 <vector61>:
.globl vector61
vector61:
  pushl $0
c0102d80:	6a 00                	push   $0x0
  pushl $61
c0102d82:	6a 3d                	push   $0x3d
  jmp __alltraps
c0102d84:	e9 52 08 00 00       	jmp    c01035db <__alltraps>

c0102d89 <vector62>:
.globl vector62
vector62:
  pushl $0
c0102d89:	6a 00                	push   $0x0
  pushl $62
c0102d8b:	6a 3e                	push   $0x3e
  jmp __alltraps
c0102d8d:	e9 49 08 00 00       	jmp    c01035db <__alltraps>

c0102d92 <vector63>:
.globl vector63
vector63:
  pushl $0
c0102d92:	6a 00                	push   $0x0
  pushl $63
c0102d94:	6a 3f                	push   $0x3f
  jmp __alltraps
c0102d96:	e9 40 08 00 00       	jmp    c01035db <__alltraps>

c0102d9b <vector64>:
.globl vector64
vector64:
  pushl $0
c0102d9b:	6a 00                	push   $0x0
  pushl $64
c0102d9d:	6a 40                	push   $0x40
  jmp __alltraps
c0102d9f:	e9 37 08 00 00       	jmp    c01035db <__alltraps>

c0102da4 <vector65>:
.globl vector65
vector65:
  pushl $0
c0102da4:	6a 00                	push   $0x0
  pushl $65
c0102da6:	6a 41                	push   $0x41
  jmp __alltraps
c0102da8:	e9 2e 08 00 00       	jmp    c01035db <__alltraps>

c0102dad <vector66>:
.globl vector66
vector66:
  pushl $0
c0102dad:	6a 00                	push   $0x0
  pushl $66
c0102daf:	6a 42                	push   $0x42
  jmp __alltraps
c0102db1:	e9 25 08 00 00       	jmp    c01035db <__alltraps>

c0102db6 <vector67>:
.globl vector67
vector67:
  pushl $0
c0102db6:	6a 00                	push   $0x0
  pushl $67
c0102db8:	6a 43                	push   $0x43
  jmp __alltraps
c0102dba:	e9 1c 08 00 00       	jmp    c01035db <__alltraps>

c0102dbf <vector68>:
.globl vector68
vector68:
  pushl $0
c0102dbf:	6a 00                	push   $0x0
  pushl $68
c0102dc1:	6a 44                	push   $0x44
  jmp __alltraps
c0102dc3:	e9 13 08 00 00       	jmp    c01035db <__alltraps>

c0102dc8 <vector69>:
.globl vector69
vector69:
  pushl $0
c0102dc8:	6a 00                	push   $0x0
  pushl $69
c0102dca:	6a 45                	push   $0x45
  jmp __alltraps
c0102dcc:	e9 0a 08 00 00       	jmp    c01035db <__alltraps>

c0102dd1 <vector70>:
.globl vector70
vector70:
  pushl $0
c0102dd1:	6a 00                	push   $0x0
  pushl $70
c0102dd3:	6a 46                	push   $0x46
  jmp __alltraps
c0102dd5:	e9 01 08 00 00       	jmp    c01035db <__alltraps>

c0102dda <vector71>:
.globl vector71
vector71:
  pushl $0
c0102dda:	6a 00                	push   $0x0
  pushl $71
c0102ddc:	6a 47                	push   $0x47
  jmp __alltraps
c0102dde:	e9 f8 07 00 00       	jmp    c01035db <__alltraps>

c0102de3 <vector72>:
.globl vector72
vector72:
  pushl $0
c0102de3:	6a 00                	push   $0x0
  pushl $72
c0102de5:	6a 48                	push   $0x48
  jmp __alltraps
c0102de7:	e9 ef 07 00 00       	jmp    c01035db <__alltraps>

c0102dec <vector73>:
.globl vector73
vector73:
  pushl $0
c0102dec:	6a 00                	push   $0x0
  pushl $73
c0102dee:	6a 49                	push   $0x49
  jmp __alltraps
c0102df0:	e9 e6 07 00 00       	jmp    c01035db <__alltraps>

c0102df5 <vector74>:
.globl vector74
vector74:
  pushl $0
c0102df5:	6a 00                	push   $0x0
  pushl $74
c0102df7:	6a 4a                	push   $0x4a
  jmp __alltraps
c0102df9:	e9 dd 07 00 00       	jmp    c01035db <__alltraps>

c0102dfe <vector75>:
.globl vector75
vector75:
  pushl $0
c0102dfe:	6a 00                	push   $0x0
  pushl $75
c0102e00:	6a 4b                	push   $0x4b
  jmp __alltraps
c0102e02:	e9 d4 07 00 00       	jmp    c01035db <__alltraps>

c0102e07 <vector76>:
.globl vector76
vector76:
  pushl $0
c0102e07:	6a 00                	push   $0x0
  pushl $76
c0102e09:	6a 4c                	push   $0x4c
  jmp __alltraps
c0102e0b:	e9 cb 07 00 00       	jmp    c01035db <__alltraps>

c0102e10 <vector77>:
.globl vector77
vector77:
  pushl $0
c0102e10:	6a 00                	push   $0x0
  pushl $77
c0102e12:	6a 4d                	push   $0x4d
  jmp __alltraps
c0102e14:	e9 c2 07 00 00       	jmp    c01035db <__alltraps>

c0102e19 <vector78>:
.globl vector78
vector78:
  pushl $0
c0102e19:	6a 00                	push   $0x0
  pushl $78
c0102e1b:	6a 4e                	push   $0x4e
  jmp __alltraps
c0102e1d:	e9 b9 07 00 00       	jmp    c01035db <__alltraps>

c0102e22 <vector79>:
.globl vector79
vector79:
  pushl $0
c0102e22:	6a 00                	push   $0x0
  pushl $79
c0102e24:	6a 4f                	push   $0x4f
  jmp __alltraps
c0102e26:	e9 b0 07 00 00       	jmp    c01035db <__alltraps>

c0102e2b <vector80>:
.globl vector80
vector80:
  pushl $0
c0102e2b:	6a 00                	push   $0x0
  pushl $80
c0102e2d:	6a 50                	push   $0x50
  jmp __alltraps
c0102e2f:	e9 a7 07 00 00       	jmp    c01035db <__alltraps>

c0102e34 <vector81>:
.globl vector81
vector81:
  pushl $0
c0102e34:	6a 00                	push   $0x0
  pushl $81
c0102e36:	6a 51                	push   $0x51
  jmp __alltraps
c0102e38:	e9 9e 07 00 00       	jmp    c01035db <__alltraps>

c0102e3d <vector82>:
.globl vector82
vector82:
  pushl $0
c0102e3d:	6a 00                	push   $0x0
  pushl $82
c0102e3f:	6a 52                	push   $0x52
  jmp __alltraps
c0102e41:	e9 95 07 00 00       	jmp    c01035db <__alltraps>

c0102e46 <vector83>:
.globl vector83
vector83:
  pushl $0
c0102e46:	6a 00                	push   $0x0
  pushl $83
c0102e48:	6a 53                	push   $0x53
  jmp __alltraps
c0102e4a:	e9 8c 07 00 00       	jmp    c01035db <__alltraps>

c0102e4f <vector84>:
.globl vector84
vector84:
  pushl $0
c0102e4f:	6a 00                	push   $0x0
  pushl $84
c0102e51:	6a 54                	push   $0x54
  jmp __alltraps
c0102e53:	e9 83 07 00 00       	jmp    c01035db <__alltraps>

c0102e58 <vector85>:
.globl vector85
vector85:
  pushl $0
c0102e58:	6a 00                	push   $0x0
  pushl $85
c0102e5a:	6a 55                	push   $0x55
  jmp __alltraps
c0102e5c:	e9 7a 07 00 00       	jmp    c01035db <__alltraps>

c0102e61 <vector86>:
.globl vector86
vector86:
  pushl $0
c0102e61:	6a 00                	push   $0x0
  pushl $86
c0102e63:	6a 56                	push   $0x56
  jmp __alltraps
c0102e65:	e9 71 07 00 00       	jmp    c01035db <__alltraps>

c0102e6a <vector87>:
.globl vector87
vector87:
  pushl $0
c0102e6a:	6a 00                	push   $0x0
  pushl $87
c0102e6c:	6a 57                	push   $0x57
  jmp __alltraps
c0102e6e:	e9 68 07 00 00       	jmp    c01035db <__alltraps>

c0102e73 <vector88>:
.globl vector88
vector88:
  pushl $0
c0102e73:	6a 00                	push   $0x0
  pushl $88
c0102e75:	6a 58                	push   $0x58
  jmp __alltraps
c0102e77:	e9 5f 07 00 00       	jmp    c01035db <__alltraps>

c0102e7c <vector89>:
.globl vector89
vector89:
  pushl $0
c0102e7c:	6a 00                	push   $0x0
  pushl $89
c0102e7e:	6a 59                	push   $0x59
  jmp __alltraps
c0102e80:	e9 56 07 00 00       	jmp    c01035db <__alltraps>

c0102e85 <vector90>:
.globl vector90
vector90:
  pushl $0
c0102e85:	6a 00                	push   $0x0
  pushl $90
c0102e87:	6a 5a                	push   $0x5a
  jmp __alltraps
c0102e89:	e9 4d 07 00 00       	jmp    c01035db <__alltraps>

c0102e8e <vector91>:
.globl vector91
vector91:
  pushl $0
c0102e8e:	6a 00                	push   $0x0
  pushl $91
c0102e90:	6a 5b                	push   $0x5b
  jmp __alltraps
c0102e92:	e9 44 07 00 00       	jmp    c01035db <__alltraps>

c0102e97 <vector92>:
.globl vector92
vector92:
  pushl $0
c0102e97:	6a 00                	push   $0x0
  pushl $92
c0102e99:	6a 5c                	push   $0x5c
  jmp __alltraps
c0102e9b:	e9 3b 07 00 00       	jmp    c01035db <__alltraps>

c0102ea0 <vector93>:
.globl vector93
vector93:
  pushl $0
c0102ea0:	6a 00                	push   $0x0
  pushl $93
c0102ea2:	6a 5d                	push   $0x5d
  jmp __alltraps
c0102ea4:	e9 32 07 00 00       	jmp    c01035db <__alltraps>

c0102ea9 <vector94>:
.globl vector94
vector94:
  pushl $0
c0102ea9:	6a 00                	push   $0x0
  pushl $94
c0102eab:	6a 5e                	push   $0x5e
  jmp __alltraps
c0102ead:	e9 29 07 00 00       	jmp    c01035db <__alltraps>

c0102eb2 <vector95>:
.globl vector95
vector95:
  pushl $0
c0102eb2:	6a 00                	push   $0x0
  pushl $95
c0102eb4:	6a 5f                	push   $0x5f
  jmp __alltraps
c0102eb6:	e9 20 07 00 00       	jmp    c01035db <__alltraps>

c0102ebb <vector96>:
.globl vector96
vector96:
  pushl $0
c0102ebb:	6a 00                	push   $0x0
  pushl $96
c0102ebd:	6a 60                	push   $0x60
  jmp __alltraps
c0102ebf:	e9 17 07 00 00       	jmp    c01035db <__alltraps>

c0102ec4 <vector97>:
.globl vector97
vector97:
  pushl $0
c0102ec4:	6a 00                	push   $0x0
  pushl $97
c0102ec6:	6a 61                	push   $0x61
  jmp __alltraps
c0102ec8:	e9 0e 07 00 00       	jmp    c01035db <__alltraps>

c0102ecd <vector98>:
.globl vector98
vector98:
  pushl $0
c0102ecd:	6a 00                	push   $0x0
  pushl $98
c0102ecf:	6a 62                	push   $0x62
  jmp __alltraps
c0102ed1:	e9 05 07 00 00       	jmp    c01035db <__alltraps>

c0102ed6 <vector99>:
.globl vector99
vector99:
  pushl $0
c0102ed6:	6a 00                	push   $0x0
  pushl $99
c0102ed8:	6a 63                	push   $0x63
  jmp __alltraps
c0102eda:	e9 fc 06 00 00       	jmp    c01035db <__alltraps>

c0102edf <vector100>:
.globl vector100
vector100:
  pushl $0
c0102edf:	6a 00                	push   $0x0
  pushl $100
c0102ee1:	6a 64                	push   $0x64
  jmp __alltraps
c0102ee3:	e9 f3 06 00 00       	jmp    c01035db <__alltraps>

c0102ee8 <vector101>:
.globl vector101
vector101:
  pushl $0
c0102ee8:	6a 00                	push   $0x0
  pushl $101
c0102eea:	6a 65                	push   $0x65
  jmp __alltraps
c0102eec:	e9 ea 06 00 00       	jmp    c01035db <__alltraps>

c0102ef1 <vector102>:
.globl vector102
vector102:
  pushl $0
c0102ef1:	6a 00                	push   $0x0
  pushl $102
c0102ef3:	6a 66                	push   $0x66
  jmp __alltraps
c0102ef5:	e9 e1 06 00 00       	jmp    c01035db <__alltraps>

c0102efa <vector103>:
.globl vector103
vector103:
  pushl $0
c0102efa:	6a 00                	push   $0x0
  pushl $103
c0102efc:	6a 67                	push   $0x67
  jmp __alltraps
c0102efe:	e9 d8 06 00 00       	jmp    c01035db <__alltraps>

c0102f03 <vector104>:
.globl vector104
vector104:
  pushl $0
c0102f03:	6a 00                	push   $0x0
  pushl $104
c0102f05:	6a 68                	push   $0x68
  jmp __alltraps
c0102f07:	e9 cf 06 00 00       	jmp    c01035db <__alltraps>

c0102f0c <vector105>:
.globl vector105
vector105:
  pushl $0
c0102f0c:	6a 00                	push   $0x0
  pushl $105
c0102f0e:	6a 69                	push   $0x69
  jmp __alltraps
c0102f10:	e9 c6 06 00 00       	jmp    c01035db <__alltraps>

c0102f15 <vector106>:
.globl vector106
vector106:
  pushl $0
c0102f15:	6a 00                	push   $0x0
  pushl $106
c0102f17:	6a 6a                	push   $0x6a
  jmp __alltraps
c0102f19:	e9 bd 06 00 00       	jmp    c01035db <__alltraps>

c0102f1e <vector107>:
.globl vector107
vector107:
  pushl $0
c0102f1e:	6a 00                	push   $0x0
  pushl $107
c0102f20:	6a 6b                	push   $0x6b
  jmp __alltraps
c0102f22:	e9 b4 06 00 00       	jmp    c01035db <__alltraps>

c0102f27 <vector108>:
.globl vector108
vector108:
  pushl $0
c0102f27:	6a 00                	push   $0x0
  pushl $108
c0102f29:	6a 6c                	push   $0x6c
  jmp __alltraps
c0102f2b:	e9 ab 06 00 00       	jmp    c01035db <__alltraps>

c0102f30 <vector109>:
.globl vector109
vector109:
  pushl $0
c0102f30:	6a 00                	push   $0x0
  pushl $109
c0102f32:	6a 6d                	push   $0x6d
  jmp __alltraps
c0102f34:	e9 a2 06 00 00       	jmp    c01035db <__alltraps>

c0102f39 <vector110>:
.globl vector110
vector110:
  pushl $0
c0102f39:	6a 00                	push   $0x0
  pushl $110
c0102f3b:	6a 6e                	push   $0x6e
  jmp __alltraps
c0102f3d:	e9 99 06 00 00       	jmp    c01035db <__alltraps>

c0102f42 <vector111>:
.globl vector111
vector111:
  pushl $0
c0102f42:	6a 00                	push   $0x0
  pushl $111
c0102f44:	6a 6f                	push   $0x6f
  jmp __alltraps
c0102f46:	e9 90 06 00 00       	jmp    c01035db <__alltraps>

c0102f4b <vector112>:
.globl vector112
vector112:
  pushl $0
c0102f4b:	6a 00                	push   $0x0
  pushl $112
c0102f4d:	6a 70                	push   $0x70
  jmp __alltraps
c0102f4f:	e9 87 06 00 00       	jmp    c01035db <__alltraps>

c0102f54 <vector113>:
.globl vector113
vector113:
  pushl $0
c0102f54:	6a 00                	push   $0x0
  pushl $113
c0102f56:	6a 71                	push   $0x71
  jmp __alltraps
c0102f58:	e9 7e 06 00 00       	jmp    c01035db <__alltraps>

c0102f5d <vector114>:
.globl vector114
vector114:
  pushl $0
c0102f5d:	6a 00                	push   $0x0
  pushl $114
c0102f5f:	6a 72                	push   $0x72
  jmp __alltraps
c0102f61:	e9 75 06 00 00       	jmp    c01035db <__alltraps>

c0102f66 <vector115>:
.globl vector115
vector115:
  pushl $0
c0102f66:	6a 00                	push   $0x0
  pushl $115
c0102f68:	6a 73                	push   $0x73
  jmp __alltraps
c0102f6a:	e9 6c 06 00 00       	jmp    c01035db <__alltraps>

c0102f6f <vector116>:
.globl vector116
vector116:
  pushl $0
c0102f6f:	6a 00                	push   $0x0
  pushl $116
c0102f71:	6a 74                	push   $0x74
  jmp __alltraps
c0102f73:	e9 63 06 00 00       	jmp    c01035db <__alltraps>

c0102f78 <vector117>:
.globl vector117
vector117:
  pushl $0
c0102f78:	6a 00                	push   $0x0
  pushl $117
c0102f7a:	6a 75                	push   $0x75
  jmp __alltraps
c0102f7c:	e9 5a 06 00 00       	jmp    c01035db <__alltraps>

c0102f81 <vector118>:
.globl vector118
vector118:
  pushl $0
c0102f81:	6a 00                	push   $0x0
  pushl $118
c0102f83:	6a 76                	push   $0x76
  jmp __alltraps
c0102f85:	e9 51 06 00 00       	jmp    c01035db <__alltraps>

c0102f8a <vector119>:
.globl vector119
vector119:
  pushl $0
c0102f8a:	6a 00                	push   $0x0
  pushl $119
c0102f8c:	6a 77                	push   $0x77
  jmp __alltraps
c0102f8e:	e9 48 06 00 00       	jmp    c01035db <__alltraps>

c0102f93 <vector120>:
.globl vector120
vector120:
  pushl $0
c0102f93:	6a 00                	push   $0x0
  pushl $120
c0102f95:	6a 78                	push   $0x78
  jmp __alltraps
c0102f97:	e9 3f 06 00 00       	jmp    c01035db <__alltraps>

c0102f9c <vector121>:
.globl vector121
vector121:
  pushl $0
c0102f9c:	6a 00                	push   $0x0
  pushl $121
c0102f9e:	6a 79                	push   $0x79
  jmp __alltraps
c0102fa0:	e9 36 06 00 00       	jmp    c01035db <__alltraps>

c0102fa5 <vector122>:
.globl vector122
vector122:
  pushl $0
c0102fa5:	6a 00                	push   $0x0
  pushl $122
c0102fa7:	6a 7a                	push   $0x7a
  jmp __alltraps
c0102fa9:	e9 2d 06 00 00       	jmp    c01035db <__alltraps>

c0102fae <vector123>:
.globl vector123
vector123:
  pushl $0
c0102fae:	6a 00                	push   $0x0
  pushl $123
c0102fb0:	6a 7b                	push   $0x7b
  jmp __alltraps
c0102fb2:	e9 24 06 00 00       	jmp    c01035db <__alltraps>

c0102fb7 <vector124>:
.globl vector124
vector124:
  pushl $0
c0102fb7:	6a 00                	push   $0x0
  pushl $124
c0102fb9:	6a 7c                	push   $0x7c
  jmp __alltraps
c0102fbb:	e9 1b 06 00 00       	jmp    c01035db <__alltraps>

c0102fc0 <vector125>:
.globl vector125
vector125:
  pushl $0
c0102fc0:	6a 00                	push   $0x0
  pushl $125
c0102fc2:	6a 7d                	push   $0x7d
  jmp __alltraps
c0102fc4:	e9 12 06 00 00       	jmp    c01035db <__alltraps>

c0102fc9 <vector126>:
.globl vector126
vector126:
  pushl $0
c0102fc9:	6a 00                	push   $0x0
  pushl $126
c0102fcb:	6a 7e                	push   $0x7e
  jmp __alltraps
c0102fcd:	e9 09 06 00 00       	jmp    c01035db <__alltraps>

c0102fd2 <vector127>:
.globl vector127
vector127:
  pushl $0
c0102fd2:	6a 00                	push   $0x0
  pushl $127
c0102fd4:	6a 7f                	push   $0x7f
  jmp __alltraps
c0102fd6:	e9 00 06 00 00       	jmp    c01035db <__alltraps>

c0102fdb <vector128>:
.globl vector128
vector128:
  pushl $0
c0102fdb:	6a 00                	push   $0x0
  pushl $128
c0102fdd:	68 80 00 00 00       	push   $0x80
  jmp __alltraps
c0102fe2:	e9 f4 05 00 00       	jmp    c01035db <__alltraps>

c0102fe7 <vector129>:
.globl vector129
vector129:
  pushl $0
c0102fe7:	6a 00                	push   $0x0
  pushl $129
c0102fe9:	68 81 00 00 00       	push   $0x81
  jmp __alltraps
c0102fee:	e9 e8 05 00 00       	jmp    c01035db <__alltraps>

c0102ff3 <vector130>:
.globl vector130
vector130:
  pushl $0
c0102ff3:	6a 00                	push   $0x0
  pushl $130
c0102ff5:	68 82 00 00 00       	push   $0x82
  jmp __alltraps
c0102ffa:	e9 dc 05 00 00       	jmp    c01035db <__alltraps>

c0102fff <vector131>:
.globl vector131
vector131:
  pushl $0
c0102fff:	6a 00                	push   $0x0
  pushl $131
c0103001:	68 83 00 00 00       	push   $0x83
  jmp __alltraps
c0103006:	e9 d0 05 00 00       	jmp    c01035db <__alltraps>

c010300b <vector132>:
.globl vector132
vector132:
  pushl $0
c010300b:	6a 00                	push   $0x0
  pushl $132
c010300d:	68 84 00 00 00       	push   $0x84
  jmp __alltraps
c0103012:	e9 c4 05 00 00       	jmp    c01035db <__alltraps>

c0103017 <vector133>:
.globl vector133
vector133:
  pushl $0
c0103017:	6a 00                	push   $0x0
  pushl $133
c0103019:	68 85 00 00 00       	push   $0x85
  jmp __alltraps
c010301e:	e9 b8 05 00 00       	jmp    c01035db <__alltraps>

c0103023 <vector134>:
.globl vector134
vector134:
  pushl $0
c0103023:	6a 00                	push   $0x0
  pushl $134
c0103025:	68 86 00 00 00       	push   $0x86
  jmp __alltraps
c010302a:	e9 ac 05 00 00       	jmp    c01035db <__alltraps>

c010302f <vector135>:
.globl vector135
vector135:
  pushl $0
c010302f:	6a 00                	push   $0x0
  pushl $135
c0103031:	68 87 00 00 00       	push   $0x87
  jmp __alltraps
c0103036:	e9 a0 05 00 00       	jmp    c01035db <__alltraps>

c010303b <vector136>:
.globl vector136
vector136:
  pushl $0
c010303b:	6a 00                	push   $0x0
  pushl $136
c010303d:	68 88 00 00 00       	push   $0x88
  jmp __alltraps
c0103042:	e9 94 05 00 00       	jmp    c01035db <__alltraps>

c0103047 <vector137>:
.globl vector137
vector137:
  pushl $0
c0103047:	6a 00                	push   $0x0
  pushl $137
c0103049:	68 89 00 00 00       	push   $0x89
  jmp __alltraps
c010304e:	e9 88 05 00 00       	jmp    c01035db <__alltraps>

c0103053 <vector138>:
.globl vector138
vector138:
  pushl $0
c0103053:	6a 00                	push   $0x0
  pushl $138
c0103055:	68 8a 00 00 00       	push   $0x8a
  jmp __alltraps
c010305a:	e9 7c 05 00 00       	jmp    c01035db <__alltraps>

c010305f <vector139>:
.globl vector139
vector139:
  pushl $0
c010305f:	6a 00                	push   $0x0
  pushl $139
c0103061:	68 8b 00 00 00       	push   $0x8b
  jmp __alltraps
c0103066:	e9 70 05 00 00       	jmp    c01035db <__alltraps>

c010306b <vector140>:
.globl vector140
vector140:
  pushl $0
c010306b:	6a 00                	push   $0x0
  pushl $140
c010306d:	68 8c 00 00 00       	push   $0x8c
  jmp __alltraps
c0103072:	e9 64 05 00 00       	jmp    c01035db <__alltraps>

c0103077 <vector141>:
.globl vector141
vector141:
  pushl $0
c0103077:	6a 00                	push   $0x0
  pushl $141
c0103079:	68 8d 00 00 00       	push   $0x8d
  jmp __alltraps
c010307e:	e9 58 05 00 00       	jmp    c01035db <__alltraps>

c0103083 <vector142>:
.globl vector142
vector142:
  pushl $0
c0103083:	6a 00                	push   $0x0
  pushl $142
c0103085:	68 8e 00 00 00       	push   $0x8e
  jmp __alltraps
c010308a:	e9 4c 05 00 00       	jmp    c01035db <__alltraps>

c010308f <vector143>:
.globl vector143
vector143:
  pushl $0
c010308f:	6a 00                	push   $0x0
  pushl $143
c0103091:	68 8f 00 00 00       	push   $0x8f
  jmp __alltraps
c0103096:	e9 40 05 00 00       	jmp    c01035db <__alltraps>

c010309b <vector144>:
.globl vector144
vector144:
  pushl $0
c010309b:	6a 00                	push   $0x0
  pushl $144
c010309d:	68 90 00 00 00       	push   $0x90
  jmp __alltraps
c01030a2:	e9 34 05 00 00       	jmp    c01035db <__alltraps>

c01030a7 <vector145>:
.globl vector145
vector145:
  pushl $0
c01030a7:	6a 00                	push   $0x0
  pushl $145
c01030a9:	68 91 00 00 00       	push   $0x91
  jmp __alltraps
c01030ae:	e9 28 05 00 00       	jmp    c01035db <__alltraps>

c01030b3 <vector146>:
.globl vector146
vector146:
  pushl $0
c01030b3:	6a 00                	push   $0x0
  pushl $146
c01030b5:	68 92 00 00 00       	push   $0x92
  jmp __alltraps
c01030ba:	e9 1c 05 00 00       	jmp    c01035db <__alltraps>

c01030bf <vector147>:
.globl vector147
vector147:
  pushl $0
c01030bf:	6a 00                	push   $0x0
  pushl $147
c01030c1:	68 93 00 00 00       	push   $0x93
  jmp __alltraps
c01030c6:	e9 10 05 00 00       	jmp    c01035db <__alltraps>

c01030cb <vector148>:
.globl vector148
vector148:
  pushl $0
c01030cb:	6a 00                	push   $0x0
  pushl $148
c01030cd:	68 94 00 00 00       	push   $0x94
  jmp __alltraps
c01030d2:	e9 04 05 00 00       	jmp    c01035db <__alltraps>

c01030d7 <vector149>:
.globl vector149
vector149:
  pushl $0
c01030d7:	6a 00                	push   $0x0
  pushl $149
c01030d9:	68 95 00 00 00       	push   $0x95
  jmp __alltraps
c01030de:	e9 f8 04 00 00       	jmp    c01035db <__alltraps>

c01030e3 <vector150>:
.globl vector150
vector150:
  pushl $0
c01030e3:	6a 00                	push   $0x0
  pushl $150
c01030e5:	68 96 00 00 00       	push   $0x96
  jmp __alltraps
c01030ea:	e9 ec 04 00 00       	jmp    c01035db <__alltraps>

c01030ef <vector151>:
.globl vector151
vector151:
  pushl $0
c01030ef:	6a 00                	push   $0x0
  pushl $151
c01030f1:	68 97 00 00 00       	push   $0x97
  jmp __alltraps
c01030f6:	e9 e0 04 00 00       	jmp    c01035db <__alltraps>

c01030fb <vector152>:
.globl vector152
vector152:
  pushl $0
c01030fb:	6a 00                	push   $0x0
  pushl $152
c01030fd:	68 98 00 00 00       	push   $0x98
  jmp __alltraps
c0103102:	e9 d4 04 00 00       	jmp    c01035db <__alltraps>

c0103107 <vector153>:
.globl vector153
vector153:
  pushl $0
c0103107:	6a 00                	push   $0x0
  pushl $153
c0103109:	68 99 00 00 00       	push   $0x99
  jmp __alltraps
c010310e:	e9 c8 04 00 00       	jmp    c01035db <__alltraps>

c0103113 <vector154>:
.globl vector154
vector154:
  pushl $0
c0103113:	6a 00                	push   $0x0
  pushl $154
c0103115:	68 9a 00 00 00       	push   $0x9a
  jmp __alltraps
c010311a:	e9 bc 04 00 00       	jmp    c01035db <__alltraps>

c010311f <vector155>:
.globl vector155
vector155:
  pushl $0
c010311f:	6a 00                	push   $0x0
  pushl $155
c0103121:	68 9b 00 00 00       	push   $0x9b
  jmp __alltraps
c0103126:	e9 b0 04 00 00       	jmp    c01035db <__alltraps>

c010312b <vector156>:
.globl vector156
vector156:
  pushl $0
c010312b:	6a 00                	push   $0x0
  pushl $156
c010312d:	68 9c 00 00 00       	push   $0x9c
  jmp __alltraps
c0103132:	e9 a4 04 00 00       	jmp    c01035db <__alltraps>

c0103137 <vector157>:
.globl vector157
vector157:
  pushl $0
c0103137:	6a 00                	push   $0x0
  pushl $157
c0103139:	68 9d 00 00 00       	push   $0x9d
  jmp __alltraps
c010313e:	e9 98 04 00 00       	jmp    c01035db <__alltraps>

c0103143 <vector158>:
.globl vector158
vector158:
  pushl $0
c0103143:	6a 00                	push   $0x0
  pushl $158
c0103145:	68 9e 00 00 00       	push   $0x9e
  jmp __alltraps
c010314a:	e9 8c 04 00 00       	jmp    c01035db <__alltraps>

c010314f <vector159>:
.globl vector159
vector159:
  pushl $0
c010314f:	6a 00                	push   $0x0
  pushl $159
c0103151:	68 9f 00 00 00       	push   $0x9f
  jmp __alltraps
c0103156:	e9 80 04 00 00       	jmp    c01035db <__alltraps>

c010315b <vector160>:
.globl vector160
vector160:
  pushl $0
c010315b:	6a 00                	push   $0x0
  pushl $160
c010315d:	68 a0 00 00 00       	push   $0xa0
  jmp __alltraps
c0103162:	e9 74 04 00 00       	jmp    c01035db <__alltraps>

c0103167 <vector161>:
.globl vector161
vector161:
  pushl $0
c0103167:	6a 00                	push   $0x0
  pushl $161
c0103169:	68 a1 00 00 00       	push   $0xa1
  jmp __alltraps
c010316e:	e9 68 04 00 00       	jmp    c01035db <__alltraps>

c0103173 <vector162>:
.globl vector162
vector162:
  pushl $0
c0103173:	6a 00                	push   $0x0
  pushl $162
c0103175:	68 a2 00 00 00       	push   $0xa2
  jmp __alltraps
c010317a:	e9 5c 04 00 00       	jmp    c01035db <__alltraps>

c010317f <vector163>:
.globl vector163
vector163:
  pushl $0
c010317f:	6a 00                	push   $0x0
  pushl $163
c0103181:	68 a3 00 00 00       	push   $0xa3
  jmp __alltraps
c0103186:	e9 50 04 00 00       	jmp    c01035db <__alltraps>

c010318b <vector164>:
.globl vector164
vector164:
  pushl $0
c010318b:	6a 00                	push   $0x0
  pushl $164
c010318d:	68 a4 00 00 00       	push   $0xa4
  jmp __alltraps
c0103192:	e9 44 04 00 00       	jmp    c01035db <__alltraps>

c0103197 <vector165>:
.globl vector165
vector165:
  pushl $0
c0103197:	6a 00                	push   $0x0
  pushl $165
c0103199:	68 a5 00 00 00       	push   $0xa5
  jmp __alltraps
c010319e:	e9 38 04 00 00       	jmp    c01035db <__alltraps>

c01031a3 <vector166>:
.globl vector166
vector166:
  pushl $0
c01031a3:	6a 00                	push   $0x0
  pushl $166
c01031a5:	68 a6 00 00 00       	push   $0xa6
  jmp __alltraps
c01031aa:	e9 2c 04 00 00       	jmp    c01035db <__alltraps>

c01031af <vector167>:
.globl vector167
vector167:
  pushl $0
c01031af:	6a 00                	push   $0x0
  pushl $167
c01031b1:	68 a7 00 00 00       	push   $0xa7
  jmp __alltraps
c01031b6:	e9 20 04 00 00       	jmp    c01035db <__alltraps>

c01031bb <vector168>:
.globl vector168
vector168:
  pushl $0
c01031bb:	6a 00                	push   $0x0
  pushl $168
c01031bd:	68 a8 00 00 00       	push   $0xa8
  jmp __alltraps
c01031c2:	e9 14 04 00 00       	jmp    c01035db <__alltraps>

c01031c7 <vector169>:
.globl vector169
vector169:
  pushl $0
c01031c7:	6a 00                	push   $0x0
  pushl $169
c01031c9:	68 a9 00 00 00       	push   $0xa9
  jmp __alltraps
c01031ce:	e9 08 04 00 00       	jmp    c01035db <__alltraps>

c01031d3 <vector170>:
.globl vector170
vector170:
  pushl $0
c01031d3:	6a 00                	push   $0x0
  pushl $170
c01031d5:	68 aa 00 00 00       	push   $0xaa
  jmp __alltraps
c01031da:	e9 fc 03 00 00       	jmp    c01035db <__alltraps>

c01031df <vector171>:
.globl vector171
vector171:
  pushl $0
c01031df:	6a 00                	push   $0x0
  pushl $171
c01031e1:	68 ab 00 00 00       	push   $0xab
  jmp __alltraps
c01031e6:	e9 f0 03 00 00       	jmp    c01035db <__alltraps>

c01031eb <vector172>:
.globl vector172
vector172:
  pushl $0
c01031eb:	6a 00                	push   $0x0
  pushl $172
c01031ed:	68 ac 00 00 00       	push   $0xac
  jmp __alltraps
c01031f2:	e9 e4 03 00 00       	jmp    c01035db <__alltraps>

c01031f7 <vector173>:
.globl vector173
vector173:
  pushl $0
c01031f7:	6a 00                	push   $0x0
  pushl $173
c01031f9:	68 ad 00 00 00       	push   $0xad
  jmp __alltraps
c01031fe:	e9 d8 03 00 00       	jmp    c01035db <__alltraps>

c0103203 <vector174>:
.globl vector174
vector174:
  pushl $0
c0103203:	6a 00                	push   $0x0
  pushl $174
c0103205:	68 ae 00 00 00       	push   $0xae
  jmp __alltraps
c010320a:	e9 cc 03 00 00       	jmp    c01035db <__alltraps>

c010320f <vector175>:
.globl vector175
vector175:
  pushl $0
c010320f:	6a 00                	push   $0x0
  pushl $175
c0103211:	68 af 00 00 00       	push   $0xaf
  jmp __alltraps
c0103216:	e9 c0 03 00 00       	jmp    c01035db <__alltraps>

c010321b <vector176>:
.globl vector176
vector176:
  pushl $0
c010321b:	6a 00                	push   $0x0
  pushl $176
c010321d:	68 b0 00 00 00       	push   $0xb0
  jmp __alltraps
c0103222:	e9 b4 03 00 00       	jmp    c01035db <__alltraps>

c0103227 <vector177>:
.globl vector177
vector177:
  pushl $0
c0103227:	6a 00                	push   $0x0
  pushl $177
c0103229:	68 b1 00 00 00       	push   $0xb1
  jmp __alltraps
c010322e:	e9 a8 03 00 00       	jmp    c01035db <__alltraps>

c0103233 <vector178>:
.globl vector178
vector178:
  pushl $0
c0103233:	6a 00                	push   $0x0
  pushl $178
c0103235:	68 b2 00 00 00       	push   $0xb2
  jmp __alltraps
c010323a:	e9 9c 03 00 00       	jmp    c01035db <__alltraps>

c010323f <vector179>:
.globl vector179
vector179:
  pushl $0
c010323f:	6a 00                	push   $0x0
  pushl $179
c0103241:	68 b3 00 00 00       	push   $0xb3
  jmp __alltraps
c0103246:	e9 90 03 00 00       	jmp    c01035db <__alltraps>

c010324b <vector180>:
.globl vector180
vector180:
  pushl $0
c010324b:	6a 00                	push   $0x0
  pushl $180
c010324d:	68 b4 00 00 00       	push   $0xb4
  jmp __alltraps
c0103252:	e9 84 03 00 00       	jmp    c01035db <__alltraps>

c0103257 <vector181>:
.globl vector181
vector181:
  pushl $0
c0103257:	6a 00                	push   $0x0
  pushl $181
c0103259:	68 b5 00 00 00       	push   $0xb5
  jmp __alltraps
c010325e:	e9 78 03 00 00       	jmp    c01035db <__alltraps>

c0103263 <vector182>:
.globl vector182
vector182:
  pushl $0
c0103263:	6a 00                	push   $0x0
  pushl $182
c0103265:	68 b6 00 00 00       	push   $0xb6
  jmp __alltraps
c010326a:	e9 6c 03 00 00       	jmp    c01035db <__alltraps>

c010326f <vector183>:
.globl vector183
vector183:
  pushl $0
c010326f:	6a 00                	push   $0x0
  pushl $183
c0103271:	68 b7 00 00 00       	push   $0xb7
  jmp __alltraps
c0103276:	e9 60 03 00 00       	jmp    c01035db <__alltraps>

c010327b <vector184>:
.globl vector184
vector184:
  pushl $0
c010327b:	6a 00                	push   $0x0
  pushl $184
c010327d:	68 b8 00 00 00       	push   $0xb8
  jmp __alltraps
c0103282:	e9 54 03 00 00       	jmp    c01035db <__alltraps>

c0103287 <vector185>:
.globl vector185
vector185:
  pushl $0
c0103287:	6a 00                	push   $0x0
  pushl $185
c0103289:	68 b9 00 00 00       	push   $0xb9
  jmp __alltraps
c010328e:	e9 48 03 00 00       	jmp    c01035db <__alltraps>

c0103293 <vector186>:
.globl vector186
vector186:
  pushl $0
c0103293:	6a 00                	push   $0x0
  pushl $186
c0103295:	68 ba 00 00 00       	push   $0xba
  jmp __alltraps
c010329a:	e9 3c 03 00 00       	jmp    c01035db <__alltraps>

c010329f <vector187>:
.globl vector187
vector187:
  pushl $0
c010329f:	6a 00                	push   $0x0
  pushl $187
c01032a1:	68 bb 00 00 00       	push   $0xbb
  jmp __alltraps
c01032a6:	e9 30 03 00 00       	jmp    c01035db <__alltraps>

c01032ab <vector188>:
.globl vector188
vector188:
  pushl $0
c01032ab:	6a 00                	push   $0x0
  pushl $188
c01032ad:	68 bc 00 00 00       	push   $0xbc
  jmp __alltraps
c01032b2:	e9 24 03 00 00       	jmp    c01035db <__alltraps>

c01032b7 <vector189>:
.globl vector189
vector189:
  pushl $0
c01032b7:	6a 00                	push   $0x0
  pushl $189
c01032b9:	68 bd 00 00 00       	push   $0xbd
  jmp __alltraps
c01032be:	e9 18 03 00 00       	jmp    c01035db <__alltraps>

c01032c3 <vector190>:
.globl vector190
vector190:
  pushl $0
c01032c3:	6a 00                	push   $0x0
  pushl $190
c01032c5:	68 be 00 00 00       	push   $0xbe
  jmp __alltraps
c01032ca:	e9 0c 03 00 00       	jmp    c01035db <__alltraps>

c01032cf <vector191>:
.globl vector191
vector191:
  pushl $0
c01032cf:	6a 00                	push   $0x0
  pushl $191
c01032d1:	68 bf 00 00 00       	push   $0xbf
  jmp __alltraps
c01032d6:	e9 00 03 00 00       	jmp    c01035db <__alltraps>

c01032db <vector192>:
.globl vector192
vector192:
  pushl $0
c01032db:	6a 00                	push   $0x0
  pushl $192
c01032dd:	68 c0 00 00 00       	push   $0xc0
  jmp __alltraps
c01032e2:	e9 f4 02 00 00       	jmp    c01035db <__alltraps>

c01032e7 <vector193>:
.globl vector193
vector193:
  pushl $0
c01032e7:	6a 00                	push   $0x0
  pushl $193
c01032e9:	68 c1 00 00 00       	push   $0xc1
  jmp __alltraps
c01032ee:	e9 e8 02 00 00       	jmp    c01035db <__alltraps>

c01032f3 <vector194>:
.globl vector194
vector194:
  pushl $0
c01032f3:	6a 00                	push   $0x0
  pushl $194
c01032f5:	68 c2 00 00 00       	push   $0xc2
  jmp __alltraps
c01032fa:	e9 dc 02 00 00       	jmp    c01035db <__alltraps>

c01032ff <vector195>:
.globl vector195
vector195:
  pushl $0
c01032ff:	6a 00                	push   $0x0
  pushl $195
c0103301:	68 c3 00 00 00       	push   $0xc3
  jmp __alltraps
c0103306:	e9 d0 02 00 00       	jmp    c01035db <__alltraps>

c010330b <vector196>:
.globl vector196
vector196:
  pushl $0
c010330b:	6a 00                	push   $0x0
  pushl $196
c010330d:	68 c4 00 00 00       	push   $0xc4
  jmp __alltraps
c0103312:	e9 c4 02 00 00       	jmp    c01035db <__alltraps>

c0103317 <vector197>:
.globl vector197
vector197:
  pushl $0
c0103317:	6a 00                	push   $0x0
  pushl $197
c0103319:	68 c5 00 00 00       	push   $0xc5
  jmp __alltraps
c010331e:	e9 b8 02 00 00       	jmp    c01035db <__alltraps>

c0103323 <vector198>:
.globl vector198
vector198:
  pushl $0
c0103323:	6a 00                	push   $0x0
  pushl $198
c0103325:	68 c6 00 00 00       	push   $0xc6
  jmp __alltraps
c010332a:	e9 ac 02 00 00       	jmp    c01035db <__alltraps>

c010332f <vector199>:
.globl vector199
vector199:
  pushl $0
c010332f:	6a 00                	push   $0x0
  pushl $199
c0103331:	68 c7 00 00 00       	push   $0xc7
  jmp __alltraps
c0103336:	e9 a0 02 00 00       	jmp    c01035db <__alltraps>

c010333b <vector200>:
.globl vector200
vector200:
  pushl $0
c010333b:	6a 00                	push   $0x0
  pushl $200
c010333d:	68 c8 00 00 00       	push   $0xc8
  jmp __alltraps
c0103342:	e9 94 02 00 00       	jmp    c01035db <__alltraps>

c0103347 <vector201>:
.globl vector201
vector201:
  pushl $0
c0103347:	6a 00                	push   $0x0
  pushl $201
c0103349:	68 c9 00 00 00       	push   $0xc9
  jmp __alltraps
c010334e:	e9 88 02 00 00       	jmp    c01035db <__alltraps>

c0103353 <vector202>:
.globl vector202
vector202:
  pushl $0
c0103353:	6a 00                	push   $0x0
  pushl $202
c0103355:	68 ca 00 00 00       	push   $0xca
  jmp __alltraps
c010335a:	e9 7c 02 00 00       	jmp    c01035db <__alltraps>

c010335f <vector203>:
.globl vector203
vector203:
  pushl $0
c010335f:	6a 00                	push   $0x0
  pushl $203
c0103361:	68 cb 00 00 00       	push   $0xcb
  jmp __alltraps
c0103366:	e9 70 02 00 00       	jmp    c01035db <__alltraps>

c010336b <vector204>:
.globl vector204
vector204:
  pushl $0
c010336b:	6a 00                	push   $0x0
  pushl $204
c010336d:	68 cc 00 00 00       	push   $0xcc
  jmp __alltraps
c0103372:	e9 64 02 00 00       	jmp    c01035db <__alltraps>

c0103377 <vector205>:
.globl vector205
vector205:
  pushl $0
c0103377:	6a 00                	push   $0x0
  pushl $205
c0103379:	68 cd 00 00 00       	push   $0xcd
  jmp __alltraps
c010337e:	e9 58 02 00 00       	jmp    c01035db <__alltraps>

c0103383 <vector206>:
.globl vector206
vector206:
  pushl $0
c0103383:	6a 00                	push   $0x0
  pushl $206
c0103385:	68 ce 00 00 00       	push   $0xce
  jmp __alltraps
c010338a:	e9 4c 02 00 00       	jmp    c01035db <__alltraps>

c010338f <vector207>:
.globl vector207
vector207:
  pushl $0
c010338f:	6a 00                	push   $0x0
  pushl $207
c0103391:	68 cf 00 00 00       	push   $0xcf
  jmp __alltraps
c0103396:	e9 40 02 00 00       	jmp    c01035db <__alltraps>

c010339b <vector208>:
.globl vector208
vector208:
  pushl $0
c010339b:	6a 00                	push   $0x0
  pushl $208
c010339d:	68 d0 00 00 00       	push   $0xd0
  jmp __alltraps
c01033a2:	e9 34 02 00 00       	jmp    c01035db <__alltraps>

c01033a7 <vector209>:
.globl vector209
vector209:
  pushl $0
c01033a7:	6a 00                	push   $0x0
  pushl $209
c01033a9:	68 d1 00 00 00       	push   $0xd1
  jmp __alltraps
c01033ae:	e9 28 02 00 00       	jmp    c01035db <__alltraps>

c01033b3 <vector210>:
.globl vector210
vector210:
  pushl $0
c01033b3:	6a 00                	push   $0x0
  pushl $210
c01033b5:	68 d2 00 00 00       	push   $0xd2
  jmp __alltraps
c01033ba:	e9 1c 02 00 00       	jmp    c01035db <__alltraps>

c01033bf <vector211>:
.globl vector211
vector211:
  pushl $0
c01033bf:	6a 00                	push   $0x0
  pushl $211
c01033c1:	68 d3 00 00 00       	push   $0xd3
  jmp __alltraps
c01033c6:	e9 10 02 00 00       	jmp    c01035db <__alltraps>

c01033cb <vector212>:
.globl vector212
vector212:
  pushl $0
c01033cb:	6a 00                	push   $0x0
  pushl $212
c01033cd:	68 d4 00 00 00       	push   $0xd4
  jmp __alltraps
c01033d2:	e9 04 02 00 00       	jmp    c01035db <__alltraps>

c01033d7 <vector213>:
.globl vector213
vector213:
  pushl $0
c01033d7:	6a 00                	push   $0x0
  pushl $213
c01033d9:	68 d5 00 00 00       	push   $0xd5
  jmp __alltraps
c01033de:	e9 f8 01 00 00       	jmp    c01035db <__alltraps>

c01033e3 <vector214>:
.globl vector214
vector214:
  pushl $0
c01033e3:	6a 00                	push   $0x0
  pushl $214
c01033e5:	68 d6 00 00 00       	push   $0xd6
  jmp __alltraps
c01033ea:	e9 ec 01 00 00       	jmp    c01035db <__alltraps>

c01033ef <vector215>:
.globl vector215
vector215:
  pushl $0
c01033ef:	6a 00                	push   $0x0
  pushl $215
c01033f1:	68 d7 00 00 00       	push   $0xd7
  jmp __alltraps
c01033f6:	e9 e0 01 00 00       	jmp    c01035db <__alltraps>

c01033fb <vector216>:
.globl vector216
vector216:
  pushl $0
c01033fb:	6a 00                	push   $0x0
  pushl $216
c01033fd:	68 d8 00 00 00       	push   $0xd8
  jmp __alltraps
c0103402:	e9 d4 01 00 00       	jmp    c01035db <__alltraps>

c0103407 <vector217>:
.globl vector217
vector217:
  pushl $0
c0103407:	6a 00                	push   $0x0
  pushl $217
c0103409:	68 d9 00 00 00       	push   $0xd9
  jmp __alltraps
c010340e:	e9 c8 01 00 00       	jmp    c01035db <__alltraps>

c0103413 <vector218>:
.globl vector218
vector218:
  pushl $0
c0103413:	6a 00                	push   $0x0
  pushl $218
c0103415:	68 da 00 00 00       	push   $0xda
  jmp __alltraps
c010341a:	e9 bc 01 00 00       	jmp    c01035db <__alltraps>

c010341f <vector219>:
.globl vector219
vector219:
  pushl $0
c010341f:	6a 00                	push   $0x0
  pushl $219
c0103421:	68 db 00 00 00       	push   $0xdb
  jmp __alltraps
c0103426:	e9 b0 01 00 00       	jmp    c01035db <__alltraps>

c010342b <vector220>:
.globl vector220
vector220:
  pushl $0
c010342b:	6a 00                	push   $0x0
  pushl $220
c010342d:	68 dc 00 00 00       	push   $0xdc
  jmp __alltraps
c0103432:	e9 a4 01 00 00       	jmp    c01035db <__alltraps>

c0103437 <vector221>:
.globl vector221
vector221:
  pushl $0
c0103437:	6a 00                	push   $0x0
  pushl $221
c0103439:	68 dd 00 00 00       	push   $0xdd
  jmp __alltraps
c010343e:	e9 98 01 00 00       	jmp    c01035db <__alltraps>

c0103443 <vector222>:
.globl vector222
vector222:
  pushl $0
c0103443:	6a 00                	push   $0x0
  pushl $222
c0103445:	68 de 00 00 00       	push   $0xde
  jmp __alltraps
c010344a:	e9 8c 01 00 00       	jmp    c01035db <__alltraps>

c010344f <vector223>:
.globl vector223
vector223:
  pushl $0
c010344f:	6a 00                	push   $0x0
  pushl $223
c0103451:	68 df 00 00 00       	push   $0xdf
  jmp __alltraps
c0103456:	e9 80 01 00 00       	jmp    c01035db <__alltraps>

c010345b <vector224>:
.globl vector224
vector224:
  pushl $0
c010345b:	6a 00                	push   $0x0
  pushl $224
c010345d:	68 e0 00 00 00       	push   $0xe0
  jmp __alltraps
c0103462:	e9 74 01 00 00       	jmp    c01035db <__alltraps>

c0103467 <vector225>:
.globl vector225
vector225:
  pushl $0
c0103467:	6a 00                	push   $0x0
  pushl $225
c0103469:	68 e1 00 00 00       	push   $0xe1
  jmp __alltraps
c010346e:	e9 68 01 00 00       	jmp    c01035db <__alltraps>

c0103473 <vector226>:
.globl vector226
vector226:
  pushl $0
c0103473:	6a 00                	push   $0x0
  pushl $226
c0103475:	68 e2 00 00 00       	push   $0xe2
  jmp __alltraps
c010347a:	e9 5c 01 00 00       	jmp    c01035db <__alltraps>

c010347f <vector227>:
.globl vector227
vector227:
  pushl $0
c010347f:	6a 00                	push   $0x0
  pushl $227
c0103481:	68 e3 00 00 00       	push   $0xe3
  jmp __alltraps
c0103486:	e9 50 01 00 00       	jmp    c01035db <__alltraps>

c010348b <vector228>:
.globl vector228
vector228:
  pushl $0
c010348b:	6a 00                	push   $0x0
  pushl $228
c010348d:	68 e4 00 00 00       	push   $0xe4
  jmp __alltraps
c0103492:	e9 44 01 00 00       	jmp    c01035db <__alltraps>

c0103497 <vector229>:
.globl vector229
vector229:
  pushl $0
c0103497:	6a 00                	push   $0x0
  pushl $229
c0103499:	68 e5 00 00 00       	push   $0xe5
  jmp __alltraps
c010349e:	e9 38 01 00 00       	jmp    c01035db <__alltraps>

c01034a3 <vector230>:
.globl vector230
vector230:
  pushl $0
c01034a3:	6a 00                	push   $0x0
  pushl $230
c01034a5:	68 e6 00 00 00       	push   $0xe6
  jmp __alltraps
c01034aa:	e9 2c 01 00 00       	jmp    c01035db <__alltraps>

c01034af <vector231>:
.globl vector231
vector231:
  pushl $0
c01034af:	6a 00                	push   $0x0
  pushl $231
c01034b1:	68 e7 00 00 00       	push   $0xe7
  jmp __alltraps
c01034b6:	e9 20 01 00 00       	jmp    c01035db <__alltraps>

c01034bb <vector232>:
.globl vector232
vector232:
  pushl $0
c01034bb:	6a 00                	push   $0x0
  pushl $232
c01034bd:	68 e8 00 00 00       	push   $0xe8
  jmp __alltraps
c01034c2:	e9 14 01 00 00       	jmp    c01035db <__alltraps>

c01034c7 <vector233>:
.globl vector233
vector233:
  pushl $0
c01034c7:	6a 00                	push   $0x0
  pushl $233
c01034c9:	68 e9 00 00 00       	push   $0xe9
  jmp __alltraps
c01034ce:	e9 08 01 00 00       	jmp    c01035db <__alltraps>

c01034d3 <vector234>:
.globl vector234
vector234:
  pushl $0
c01034d3:	6a 00                	push   $0x0
  pushl $234
c01034d5:	68 ea 00 00 00       	push   $0xea
  jmp __alltraps
c01034da:	e9 fc 00 00 00       	jmp    c01035db <__alltraps>

c01034df <vector235>:
.globl vector235
vector235:
  pushl $0
c01034df:	6a 00                	push   $0x0
  pushl $235
c01034e1:	68 eb 00 00 00       	push   $0xeb
  jmp __alltraps
c01034e6:	e9 f0 00 00 00       	jmp    c01035db <__alltraps>

c01034eb <vector236>:
.globl vector236
vector236:
  pushl $0
c01034eb:	6a 00                	push   $0x0
  pushl $236
c01034ed:	68 ec 00 00 00       	push   $0xec
  jmp __alltraps
c01034f2:	e9 e4 00 00 00       	jmp    c01035db <__alltraps>

c01034f7 <vector237>:
.globl vector237
vector237:
  pushl $0
c01034f7:	6a 00                	push   $0x0
  pushl $237
c01034f9:	68 ed 00 00 00       	push   $0xed
  jmp __alltraps
c01034fe:	e9 d8 00 00 00       	jmp    c01035db <__alltraps>

c0103503 <vector238>:
.globl vector238
vector238:
  pushl $0
c0103503:	6a 00                	push   $0x0
  pushl $238
c0103505:	68 ee 00 00 00       	push   $0xee
  jmp __alltraps
c010350a:	e9 cc 00 00 00       	jmp    c01035db <__alltraps>

c010350f <vector239>:
.globl vector239
vector239:
  pushl $0
c010350f:	6a 00                	push   $0x0
  pushl $239
c0103511:	68 ef 00 00 00       	push   $0xef
  jmp __alltraps
c0103516:	e9 c0 00 00 00       	jmp    c01035db <__alltraps>

c010351b <vector240>:
.globl vector240
vector240:
  pushl $0
c010351b:	6a 00                	push   $0x0
  pushl $240
c010351d:	68 f0 00 00 00       	push   $0xf0
  jmp __alltraps
c0103522:	e9 b4 00 00 00       	jmp    c01035db <__alltraps>

c0103527 <vector241>:
.globl vector241
vector241:
  pushl $0
c0103527:	6a 00                	push   $0x0
  pushl $241
c0103529:	68 f1 00 00 00       	push   $0xf1
  jmp __alltraps
c010352e:	e9 a8 00 00 00       	jmp    c01035db <__alltraps>

c0103533 <vector242>:
.globl vector242
vector242:
  pushl $0
c0103533:	6a 00                	push   $0x0
  pushl $242
c0103535:	68 f2 00 00 00       	push   $0xf2
  jmp __alltraps
c010353a:	e9 9c 00 00 00       	jmp    c01035db <__alltraps>

c010353f <vector243>:
.globl vector243
vector243:
  pushl $0
c010353f:	6a 00                	push   $0x0
  pushl $243
c0103541:	68 f3 00 00 00       	push   $0xf3
  jmp __alltraps
c0103546:	e9 90 00 00 00       	jmp    c01035db <__alltraps>

c010354b <vector244>:
.globl vector244
vector244:
  pushl $0
c010354b:	6a 00                	push   $0x0
  pushl $244
c010354d:	68 f4 00 00 00       	push   $0xf4
  jmp __alltraps
c0103552:	e9 84 00 00 00       	jmp    c01035db <__alltraps>

c0103557 <vector245>:
.globl vector245
vector245:
  pushl $0
c0103557:	6a 00                	push   $0x0
  pushl $245
c0103559:	68 f5 00 00 00       	push   $0xf5
  jmp __alltraps
c010355e:	e9 78 00 00 00       	jmp    c01035db <__alltraps>

c0103563 <vector246>:
.globl vector246
vector246:
  pushl $0
c0103563:	6a 00                	push   $0x0
  pushl $246
c0103565:	68 f6 00 00 00       	push   $0xf6
  jmp __alltraps
c010356a:	e9 6c 00 00 00       	jmp    c01035db <__alltraps>

c010356f <vector247>:
.globl vector247
vector247:
  pushl $0
c010356f:	6a 00                	push   $0x0
  pushl $247
c0103571:	68 f7 00 00 00       	push   $0xf7
  jmp __alltraps
c0103576:	e9 60 00 00 00       	jmp    c01035db <__alltraps>

c010357b <vector248>:
.globl vector248
vector248:
  pushl $0
c010357b:	6a 00                	push   $0x0
  pushl $248
c010357d:	68 f8 00 00 00       	push   $0xf8
  jmp __alltraps
c0103582:	e9 54 00 00 00       	jmp    c01035db <__alltraps>

c0103587 <vector249>:
.globl vector249
vector249:
  pushl $0
c0103587:	6a 00                	push   $0x0
  pushl $249
c0103589:	68 f9 00 00 00       	push   $0xf9
  jmp __alltraps
c010358e:	e9 48 00 00 00       	jmp    c01035db <__alltraps>

c0103593 <vector250>:
.globl vector250
vector250:
  pushl $0
c0103593:	6a 00                	push   $0x0
  pushl $250
c0103595:	68 fa 00 00 00       	push   $0xfa
  jmp __alltraps
c010359a:	e9 3c 00 00 00       	jmp    c01035db <__alltraps>

c010359f <vector251>:
.globl vector251
vector251:
  pushl $0
c010359f:	6a 00                	push   $0x0
  pushl $251
c01035a1:	68 fb 00 00 00       	push   $0xfb
  jmp __alltraps
c01035a6:	e9 30 00 00 00       	jmp    c01035db <__alltraps>

c01035ab <vector252>:
.globl vector252
vector252:
  pushl $0
c01035ab:	6a 00                	push   $0x0
  pushl $252
c01035ad:	68 fc 00 00 00       	push   $0xfc
  jmp __alltraps
c01035b2:	e9 24 00 00 00       	jmp    c01035db <__alltraps>

c01035b7 <vector253>:
.globl vector253
vector253:
  pushl $0
c01035b7:	6a 00                	push   $0x0
  pushl $253
c01035b9:	68 fd 00 00 00       	push   $0xfd
  jmp __alltraps
c01035be:	e9 18 00 00 00       	jmp    c01035db <__alltraps>

c01035c3 <vector254>:
.globl vector254
vector254:
  pushl $0
c01035c3:	6a 00                	push   $0x0
  pushl $254
c01035c5:	68 fe 00 00 00       	push   $0xfe
  jmp __alltraps
c01035ca:	e9 0c 00 00 00       	jmp    c01035db <__alltraps>

c01035cf <vector255>:
.globl vector255
vector255:
  pushl $0
c01035cf:	6a 00                	push   $0x0
  pushl $255
c01035d1:	68 ff 00 00 00       	push   $0xff
  jmp __alltraps
c01035d6:	e9 00 00 00 00       	jmp    c01035db <__alltraps>

c01035db <__alltraps>:
.text
.globl __alltraps
__alltraps:
    # push registers to build a trap frame
    # therefore make the stack look like a struct trapframe
    pushl %ds
c01035db:	1e                   	push   %ds
    pushl %es
c01035dc:	06                   	push   %es
    pushl %fs
c01035dd:	0f a0                	push   %fs
    pushl %gs
c01035df:	0f a8                	push   %gs
    pushal
c01035e1:	60                   	pusha  

    # load GD_KDATA into %ds and %es to set up data segments for kernel
    movl $GD_KDATA, %eax
c01035e2:	b8 10 00 00 00       	mov    $0x10,%eax
    movw %ax, %ds
c01035e7:	8e d8                	mov    %eax,%ds
    movw %ax, %es
c01035e9:	8e c0                	mov    %eax,%es

    # push %esp to pass a pointer to the trapframe as an argument to trap()
    pushl %esp
c01035eb:	54                   	push   %esp

    # call trap(tf), where tf=%esp
    call trap
c01035ec:	e8 e3 f4 ff ff       	call   c0102ad4 <trap>

    # pop the pushed stack pointer
    popl %esp
c01035f1:	5c                   	pop    %esp

c01035f2 <__trapret>:

    # return falls through to trapret...
.globl __trapret
__trapret:
    # restore registers from stack
    popal
c01035f2:	61                   	popa   

    # restore %ds, %es, %fs and %gs
    popl %gs
c01035f3:	0f a9                	pop    %gs
    popl %fs
c01035f5:	0f a1                	pop    %fs
    popl %es
c01035f7:	07                   	pop    %es
    popl %ds
c01035f8:	1f                   	pop    %ds

    # get rid of the trap number and error code
    addl $0x8, %esp
c01035f9:	83 c4 08             	add    $0x8,%esp
    iret
c01035fc:	cf                   	iret   

c01035fd <forkrets>:

.globl forkrets
forkrets:
    # set stack to this new process's trapframe
    movl 4(%esp), %esp
c01035fd:	8b 64 24 04          	mov    0x4(%esp),%esp
    jmp __trapret
c0103601:	eb ef                	jmp    c01035f2 <__trapret>

c0103603 <lock_init>:
#define local_intr_restore(x)   __intr_restore(x);

typedef volatile bool lock_t;

static inline void
lock_init(lock_t *lock) {
c0103603:	55                   	push   %ebp
c0103604:	89 e5                	mov    %esp,%ebp
    *lock = 0;
c0103606:	8b 45 08             	mov    0x8(%ebp),%eax
c0103609:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
c010360f:	90                   	nop
c0103610:	5d                   	pop    %ebp
c0103611:	c3                   	ret    

c0103612 <mm_count>:
bool user_mem_check(struct mm_struct *mm, uintptr_t start, size_t len, bool write);
bool copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable);
bool copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len);

static inline int
mm_count(struct mm_struct *mm) {
c0103612:	55                   	push   %ebp
c0103613:	89 e5                	mov    %esp,%ebp
    return mm->mm_count;
c0103615:	8b 45 08             	mov    0x8(%ebp),%eax
c0103618:	8b 40 18             	mov    0x18(%eax),%eax
}
c010361b:	5d                   	pop    %ebp
c010361c:	c3                   	ret    

c010361d <set_mm_count>:

static inline void
set_mm_count(struct mm_struct *mm, int val) {
c010361d:	55                   	push   %ebp
c010361e:	89 e5                	mov    %esp,%ebp
    mm->mm_count = val;
c0103620:	8b 45 08             	mov    0x8(%ebp),%eax
c0103623:	8b 55 0c             	mov    0xc(%ebp),%edx
c0103626:	89 50 18             	mov    %edx,0x18(%eax)
}
c0103629:	90                   	nop
c010362a:	5d                   	pop    %ebp
c010362b:	c3                   	ret    

c010362c <pa2page>:
page2pa(struct Page *page) {
    return page2ppn(page) << PGSHIFT;
}

static inline struct Page *
pa2page(uintptr_t pa) {
c010362c:	55                   	push   %ebp
c010362d:	89 e5                	mov    %esp,%ebp
c010362f:	83 ec 08             	sub    $0x8,%esp
    if (PPN(pa) >= npage) {
c0103632:	8b 45 08             	mov    0x8(%ebp),%eax
c0103635:	c1 e8 0c             	shr    $0xc,%eax
c0103638:	89 c2                	mov    %eax,%edx
c010363a:	a1 80 0f 1b c0       	mov    0xc01b0f80,%eax
c010363f:	39 c2                	cmp    %eax,%edx
c0103641:	72 14                	jb     c0103657 <pa2page+0x2b>
        panic("pa2page called with invalid pa");
c0103643:	83 ec 04             	sub    $0x4,%esp
c0103646:	68 10 c2 10 c0       	push   $0xc010c210
c010364b:	6a 5e                	push   $0x5e
c010364d:	68 2f c2 10 c0       	push   $0xc010c22f
c0103652:	e8 a6 cd ff ff       	call   c01003fd <__panic>
    }
    return &pages[PPN(pa)];
c0103657:	a1 b8 31 1b c0       	mov    0xc01b31b8,%eax
c010365c:	8b 55 08             	mov    0x8(%ebp),%edx
c010365f:	c1 ea 0c             	shr    $0xc,%edx
c0103662:	c1 e2 05             	shl    $0x5,%edx
c0103665:	01 d0                	add    %edx,%eax
}
c0103667:	c9                   	leave  
c0103668:	c3                   	ret    

c0103669 <pde2page>:
    }
    return pa2page(PTE_ADDR(pte));
}

static inline struct Page *
pde2page(pde_t pde) {
c0103669:	55                   	push   %ebp
c010366a:	89 e5                	mov    %esp,%ebp
c010366c:	83 ec 08             	sub    $0x8,%esp
    return pa2page(PDE_ADDR(pde));
c010366f:	8b 45 08             	mov    0x8(%ebp),%eax
c0103672:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0103677:	83 ec 0c             	sub    $0xc,%esp
c010367a:	50                   	push   %eax
c010367b:	e8 ac ff ff ff       	call   c010362c <pa2page>
c0103680:	83 c4 10             	add    $0x10,%esp
}
c0103683:	c9                   	leave  
c0103684:	c3                   	ret    

c0103685 <mm_create>:
static void check_vma_struct(void);
static void check_pgfault(void);

// mm_create -  alloc a mm_struct & initialize it.
struct mm_struct *
mm_create(void) {
c0103685:	55                   	push   %ebp
c0103686:	89 e5                	mov    %esp,%ebp
c0103688:	83 ec 18             	sub    $0x18,%esp
    struct mm_struct *mm = kmalloc(sizeof(struct mm_struct));
c010368b:	83 ec 0c             	sub    $0xc,%esp
c010368e:	6a 20                	push   $0x20
c0103690:	e8 19 1b 00 00       	call   c01051ae <kmalloc>
c0103695:	83 c4 10             	add    $0x10,%esp
c0103698:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (mm != NULL) {
c010369b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010369f:	74 7d                	je     c010371e <mm_create+0x99>
        list_init(&(mm->mmap_list));
c01036a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036a4:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c01036a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01036aa:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01036ad:	89 50 04             	mov    %edx,0x4(%eax)
c01036b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01036b3:	8b 50 04             	mov    0x4(%eax),%edx
c01036b6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01036b9:	89 10                	mov    %edx,(%eax)
        mm->mmap_cache = NULL;
c01036bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036be:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        mm->pgdir = NULL;
c01036c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036c8:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        mm->map_count = 0;
c01036cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036d2:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)

        if (swap_init_ok) swap_init_mm(mm);
c01036d9:	a1 6c 0f 1b c0       	mov    0xc01b0f6c,%eax
c01036de:	85 c0                	test   %eax,%eax
c01036e0:	74 10                	je     c01036f2 <mm_create+0x6d>
c01036e2:	83 ec 0c             	sub    $0xc,%esp
c01036e5:	ff 75 f4             	pushl  -0xc(%ebp)
c01036e8:	e8 3d 1d 00 00       	call   c010542a <swap_init_mm>
c01036ed:	83 c4 10             	add    $0x10,%esp
c01036f0:	eb 0a                	jmp    c01036fc <mm_create+0x77>
        else mm->sm_priv = NULL;
c01036f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036f5:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
        
        set_mm_count(mm, 0);
c01036fc:	83 ec 08             	sub    $0x8,%esp
c01036ff:	6a 00                	push   $0x0
c0103701:	ff 75 f4             	pushl  -0xc(%ebp)
c0103704:	e8 14 ff ff ff       	call   c010361d <set_mm_count>
c0103709:	83 c4 10             	add    $0x10,%esp
        lock_init(&(mm->mm_lock));
c010370c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010370f:	83 c0 1c             	add    $0x1c,%eax
c0103712:	83 ec 0c             	sub    $0xc,%esp
c0103715:	50                   	push   %eax
c0103716:	e8 e8 fe ff ff       	call   c0103603 <lock_init>
c010371b:	83 c4 10             	add    $0x10,%esp
    }    
    return mm;
c010371e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0103721:	c9                   	leave  
c0103722:	c3                   	ret    

c0103723 <vma_create>:

// vma_create - alloc a vma_struct & initialize it. (addr range: vm_start~vm_end)
struct vma_struct *
vma_create(uintptr_t vm_start, uintptr_t vm_end, uint32_t vm_flags) {
c0103723:	55                   	push   %ebp
c0103724:	89 e5                	mov    %esp,%ebp
c0103726:	83 ec 18             	sub    $0x18,%esp
    struct vma_struct *vma = kmalloc(sizeof(struct vma_struct));
c0103729:	83 ec 0c             	sub    $0xc,%esp
c010372c:	6a 18                	push   $0x18
c010372e:	e8 7b 1a 00 00       	call   c01051ae <kmalloc>
c0103733:	83 c4 10             	add    $0x10,%esp
c0103736:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (vma != NULL) {
c0103739:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010373d:	74 1b                	je     c010375a <vma_create+0x37>
        vma->vm_start = vm_start;
c010373f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103742:	8b 55 08             	mov    0x8(%ebp),%edx
c0103745:	89 50 04             	mov    %edx,0x4(%eax)
        vma->vm_end = vm_end;
c0103748:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010374b:	8b 55 0c             	mov    0xc(%ebp),%edx
c010374e:	89 50 08             	mov    %edx,0x8(%eax)
        vma->vm_flags = vm_flags;
c0103751:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103754:	8b 55 10             	mov    0x10(%ebp),%edx
c0103757:	89 50 0c             	mov    %edx,0xc(%eax)
    }
    return vma;
c010375a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010375d:	c9                   	leave  
c010375e:	c3                   	ret    

c010375f <find_vma>:


// find_vma - find a vma  (vma->vm_start <= addr <= vma_vm_end)
struct vma_struct *
find_vma(struct mm_struct *mm, uintptr_t addr) {
c010375f:	55                   	push   %ebp
c0103760:	89 e5                	mov    %esp,%ebp
c0103762:	83 ec 20             	sub    $0x20,%esp
    struct vma_struct *vma = NULL;
c0103765:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    if (mm != NULL) {
c010376c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0103770:	0f 84 95 00 00 00    	je     c010380b <find_vma+0xac>
        vma = mm->mmap_cache;
c0103776:	8b 45 08             	mov    0x8(%ebp),%eax
c0103779:	8b 40 08             	mov    0x8(%eax),%eax
c010377c:	89 45 fc             	mov    %eax,-0x4(%ebp)
        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
c010377f:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0103783:	74 16                	je     c010379b <find_vma+0x3c>
c0103785:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103788:	8b 40 04             	mov    0x4(%eax),%eax
c010378b:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010378e:	77 0b                	ja     c010379b <find_vma+0x3c>
c0103790:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103793:	8b 40 08             	mov    0x8(%eax),%eax
c0103796:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0103799:	77 61                	ja     c01037fc <find_vma+0x9d>
                bool found = 0;
c010379b:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
                list_entry_t *list = &(mm->mmap_list), *le = list;
c01037a2:	8b 45 08             	mov    0x8(%ebp),%eax
c01037a5:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01037a8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01037ab:	89 45 f4             	mov    %eax,-0xc(%ebp)
                while ((le = list_next(le)) != list) {
c01037ae:	eb 28                	jmp    c01037d8 <find_vma+0x79>
                    vma = le2vma(le, list_link);
c01037b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01037b3:	83 e8 10             	sub    $0x10,%eax
c01037b6:	89 45 fc             	mov    %eax,-0x4(%ebp)
                    if (vma->vm_start<=addr && addr < vma->vm_end) {
c01037b9:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01037bc:	8b 40 04             	mov    0x4(%eax),%eax
c01037bf:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01037c2:	77 14                	ja     c01037d8 <find_vma+0x79>
c01037c4:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01037c7:	8b 40 08             	mov    0x8(%eax),%eax
c01037ca:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01037cd:	76 09                	jbe    c01037d8 <find_vma+0x79>
                        found = 1;
c01037cf:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
                        break;
c01037d6:	eb 17                	jmp    c01037ef <find_vma+0x90>
c01037d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01037db:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01037de:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01037e1:	8b 40 04             	mov    0x4(%eax),%eax
    if (mm != NULL) {
        vma = mm->mmap_cache;
        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
                bool found = 0;
                list_entry_t *list = &(mm->mmap_list), *le = list;
                while ((le = list_next(le)) != list) {
c01037e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01037e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01037ea:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01037ed:	75 c1                	jne    c01037b0 <find_vma+0x51>
                    if (vma->vm_start<=addr && addr < vma->vm_end) {
                        found = 1;
                        break;
                    }
                }
                if (!found) {
c01037ef:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
c01037f3:	75 07                	jne    c01037fc <find_vma+0x9d>
                    vma = NULL;
c01037f5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
                }
        }
        if (vma != NULL) {
c01037fc:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0103800:	74 09                	je     c010380b <find_vma+0xac>
            mm->mmap_cache = vma;
c0103802:	8b 45 08             	mov    0x8(%ebp),%eax
c0103805:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0103808:	89 50 08             	mov    %edx,0x8(%eax)
        }
    }
    return vma;
c010380b:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010380e:	c9                   	leave  
c010380f:	c3                   	ret    

c0103810 <check_vma_overlap>:


// check_vma_overlap - check if vma1 overlaps vma2 ?
static inline void
check_vma_overlap(struct vma_struct *prev, struct vma_struct *next) {
c0103810:	55                   	push   %ebp
c0103811:	89 e5                	mov    %esp,%ebp
c0103813:	83 ec 08             	sub    $0x8,%esp
    assert(prev->vm_start < prev->vm_end);
c0103816:	8b 45 08             	mov    0x8(%ebp),%eax
c0103819:	8b 50 04             	mov    0x4(%eax),%edx
c010381c:	8b 45 08             	mov    0x8(%ebp),%eax
c010381f:	8b 40 08             	mov    0x8(%eax),%eax
c0103822:	39 c2                	cmp    %eax,%edx
c0103824:	72 16                	jb     c010383c <check_vma_overlap+0x2c>
c0103826:	68 3d c2 10 c0       	push   $0xc010c23d
c010382b:	68 5b c2 10 c0       	push   $0xc010c25b
c0103830:	6a 6b                	push   $0x6b
c0103832:	68 70 c2 10 c0       	push   $0xc010c270
c0103837:	e8 c1 cb ff ff       	call   c01003fd <__panic>
    assert(prev->vm_end <= next->vm_start);
c010383c:	8b 45 08             	mov    0x8(%ebp),%eax
c010383f:	8b 50 08             	mov    0x8(%eax),%edx
c0103842:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103845:	8b 40 04             	mov    0x4(%eax),%eax
c0103848:	39 c2                	cmp    %eax,%edx
c010384a:	76 16                	jbe    c0103862 <check_vma_overlap+0x52>
c010384c:	68 80 c2 10 c0       	push   $0xc010c280
c0103851:	68 5b c2 10 c0       	push   $0xc010c25b
c0103856:	6a 6c                	push   $0x6c
c0103858:	68 70 c2 10 c0       	push   $0xc010c270
c010385d:	e8 9b cb ff ff       	call   c01003fd <__panic>
    assert(next->vm_start < next->vm_end);
c0103862:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103865:	8b 50 04             	mov    0x4(%eax),%edx
c0103868:	8b 45 0c             	mov    0xc(%ebp),%eax
c010386b:	8b 40 08             	mov    0x8(%eax),%eax
c010386e:	39 c2                	cmp    %eax,%edx
c0103870:	72 16                	jb     c0103888 <check_vma_overlap+0x78>
c0103872:	68 9f c2 10 c0       	push   $0xc010c29f
c0103877:	68 5b c2 10 c0       	push   $0xc010c25b
c010387c:	6a 6d                	push   $0x6d
c010387e:	68 70 c2 10 c0       	push   $0xc010c270
c0103883:	e8 75 cb ff ff       	call   c01003fd <__panic>
}
c0103888:	90                   	nop
c0103889:	c9                   	leave  
c010388a:	c3                   	ret    

c010388b <insert_vma_struct>:


// insert_vma_struct -insert vma in mm's list link
void
insert_vma_struct(struct mm_struct *mm, struct vma_struct *vma) {
c010388b:	55                   	push   %ebp
c010388c:	89 e5                	mov    %esp,%ebp
c010388e:	83 ec 38             	sub    $0x38,%esp
    assert(vma->vm_start < vma->vm_end);
c0103891:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103894:	8b 50 04             	mov    0x4(%eax),%edx
c0103897:	8b 45 0c             	mov    0xc(%ebp),%eax
c010389a:	8b 40 08             	mov    0x8(%eax),%eax
c010389d:	39 c2                	cmp    %eax,%edx
c010389f:	72 16                	jb     c01038b7 <insert_vma_struct+0x2c>
c01038a1:	68 bd c2 10 c0       	push   $0xc010c2bd
c01038a6:	68 5b c2 10 c0       	push   $0xc010c25b
c01038ab:	6a 74                	push   $0x74
c01038ad:	68 70 c2 10 c0       	push   $0xc010c270
c01038b2:	e8 46 cb ff ff       	call   c01003fd <__panic>
    list_entry_t *list = &(mm->mmap_list);
c01038b7:	8b 45 08             	mov    0x8(%ebp),%eax
c01038ba:	89 45 ec             	mov    %eax,-0x14(%ebp)
    list_entry_t *le_prev = list, *le_next;
c01038bd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01038c0:	89 45 f4             	mov    %eax,-0xc(%ebp)

        list_entry_t *le = list;
c01038c3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01038c6:	89 45 f0             	mov    %eax,-0x10(%ebp)
        while ((le = list_next(le)) != list) {
c01038c9:	eb 1f                	jmp    c01038ea <insert_vma_struct+0x5f>
            struct vma_struct *mmap_prev = le2vma(le, list_link);
c01038cb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01038ce:	83 e8 10             	sub    $0x10,%eax
c01038d1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            if (mmap_prev->vm_start > vma->vm_start) {
c01038d4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01038d7:	8b 50 04             	mov    0x4(%eax),%edx
c01038da:	8b 45 0c             	mov    0xc(%ebp),%eax
c01038dd:	8b 40 04             	mov    0x4(%eax),%eax
c01038e0:	39 c2                	cmp    %eax,%edx
c01038e2:	77 1f                	ja     c0103903 <insert_vma_struct+0x78>
                break;
            }
            le_prev = le;
c01038e4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01038e7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01038ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01038ed:	89 45 d8             	mov    %eax,-0x28(%ebp)
c01038f0:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01038f3:	8b 40 04             	mov    0x4(%eax),%eax
    assert(vma->vm_start < vma->vm_end);
    list_entry_t *list = &(mm->mmap_list);
    list_entry_t *le_prev = list, *le_next;

        list_entry_t *le = list;
        while ((le = list_next(le)) != list) {
c01038f6:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01038f9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01038fc:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01038ff:	75 ca                	jne    c01038cb <insert_vma_struct+0x40>
c0103901:	eb 01                	jmp    c0103904 <insert_vma_struct+0x79>
            struct vma_struct *mmap_prev = le2vma(le, list_link);
            if (mmap_prev->vm_start > vma->vm_start) {
                break;
c0103903:	90                   	nop
c0103904:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103907:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010390a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010390d:	8b 40 04             	mov    0x4(%eax),%eax
            }
            le_prev = le;
        }

    le_next = list_next(le_prev);
c0103910:	89 45 dc             	mov    %eax,-0x24(%ebp)

    /* check overlap */
    if (le_prev != list) {
c0103913:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103916:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0103919:	74 15                	je     c0103930 <insert_vma_struct+0xa5>
        check_vma_overlap(le2vma(le_prev, list_link), vma);
c010391b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010391e:	83 e8 10             	sub    $0x10,%eax
c0103921:	83 ec 08             	sub    $0x8,%esp
c0103924:	ff 75 0c             	pushl  0xc(%ebp)
c0103927:	50                   	push   %eax
c0103928:	e8 e3 fe ff ff       	call   c0103810 <check_vma_overlap>
c010392d:	83 c4 10             	add    $0x10,%esp
    }
    if (le_next != list) {
c0103930:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103933:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0103936:	74 15                	je     c010394d <insert_vma_struct+0xc2>
        check_vma_overlap(vma, le2vma(le_next, list_link));
c0103938:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010393b:	83 e8 10             	sub    $0x10,%eax
c010393e:	83 ec 08             	sub    $0x8,%esp
c0103941:	50                   	push   %eax
c0103942:	ff 75 0c             	pushl  0xc(%ebp)
c0103945:	e8 c6 fe ff ff       	call   c0103810 <check_vma_overlap>
c010394a:	83 c4 10             	add    $0x10,%esp
    }

    vma->vm_mm = mm;
c010394d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103950:	8b 55 08             	mov    0x8(%ebp),%edx
c0103953:	89 10                	mov    %edx,(%eax)
    list_add_after(le_prev, &(vma->list_link));
c0103955:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103958:	8d 50 10             	lea    0x10(%eax),%edx
c010395b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010395e:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0103961:	89 55 d4             	mov    %edx,-0x2c(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0103964:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103967:	8b 40 04             	mov    0x4(%eax),%eax
c010396a:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010396d:	89 55 d0             	mov    %edx,-0x30(%ebp)
c0103970:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0103973:	89 55 cc             	mov    %edx,-0x34(%ebp)
c0103976:	89 45 c8             	mov    %eax,-0x38(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0103979:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010397c:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010397f:	89 10                	mov    %edx,(%eax)
c0103981:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0103984:	8b 10                	mov    (%eax),%edx
c0103986:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0103989:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010398c:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010398f:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0103992:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0103995:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0103998:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010399b:	89 10                	mov    %edx,(%eax)

    mm->map_count ++;
c010399d:	8b 45 08             	mov    0x8(%ebp),%eax
c01039a0:	8b 40 10             	mov    0x10(%eax),%eax
c01039a3:	8d 50 01             	lea    0x1(%eax),%edx
c01039a6:	8b 45 08             	mov    0x8(%ebp),%eax
c01039a9:	89 50 10             	mov    %edx,0x10(%eax)
}
c01039ac:	90                   	nop
c01039ad:	c9                   	leave  
c01039ae:	c3                   	ret    

c01039af <mm_destroy>:

// mm_destroy - free mm and mm internal fields
void
mm_destroy(struct mm_struct *mm) {
c01039af:	55                   	push   %ebp
c01039b0:	89 e5                	mov    %esp,%ebp
c01039b2:	83 ec 28             	sub    $0x28,%esp
    assert(mm_count(mm) == 0);
c01039b5:	ff 75 08             	pushl  0x8(%ebp)
c01039b8:	e8 55 fc ff ff       	call   c0103612 <mm_count>
c01039bd:	83 c4 04             	add    $0x4,%esp
c01039c0:	85 c0                	test   %eax,%eax
c01039c2:	74 19                	je     c01039dd <mm_destroy+0x2e>
c01039c4:	68 d9 c2 10 c0       	push   $0xc010c2d9
c01039c9:	68 5b c2 10 c0       	push   $0xc010c25b
c01039ce:	68 94 00 00 00       	push   $0x94
c01039d3:	68 70 c2 10 c0       	push   $0xc010c270
c01039d8:	e8 20 ca ff ff       	call   c01003fd <__panic>

    list_entry_t *list = &(mm->mmap_list), *le;
c01039dd:	8b 45 08             	mov    0x8(%ebp),%eax
c01039e0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(list)) != list) {
c01039e3:	eb 3a                	jmp    c0103a1f <mm_destroy+0x70>
c01039e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01039e8:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c01039eb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01039ee:	8b 40 04             	mov    0x4(%eax),%eax
c01039f1:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01039f4:	8b 12                	mov    (%edx),%edx
c01039f6:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c01039f9:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c01039fc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01039ff:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0103a02:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0103a05:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103a08:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0103a0b:	89 10                	mov    %edx,(%eax)
        list_del(le);
        kfree(le2vma(le, list_link));  //kfree vma        
c0103a0d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103a10:	83 e8 10             	sub    $0x10,%eax
c0103a13:	83 ec 0c             	sub    $0xc,%esp
c0103a16:	50                   	push   %eax
c0103a17:	e8 aa 17 00 00       	call   c01051c6 <kfree>
c0103a1c:	83 c4 10             	add    $0x10,%esp
c0103a1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103a22:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0103a25:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103a28:	8b 40 04             	mov    0x4(%eax),%eax
void
mm_destroy(struct mm_struct *mm) {
    assert(mm_count(mm) == 0);

    list_entry_t *list = &(mm->mmap_list), *le;
    while ((le = list_next(list)) != list) {
c0103a2b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103a2e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103a31:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103a34:	75 af                	jne    c01039e5 <mm_destroy+0x36>
        list_del(le);
        kfree(le2vma(le, list_link));  //kfree vma        
    }
    kfree(mm); //kfree mm
c0103a36:	83 ec 0c             	sub    $0xc,%esp
c0103a39:	ff 75 08             	pushl  0x8(%ebp)
c0103a3c:	e8 85 17 00 00       	call   c01051c6 <kfree>
c0103a41:	83 c4 10             	add    $0x10,%esp
    mm=NULL;
c0103a44:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
}
c0103a4b:	90                   	nop
c0103a4c:	c9                   	leave  
c0103a4d:	c3                   	ret    

c0103a4e <mm_map>:

int
mm_map(struct mm_struct *mm, uintptr_t addr, size_t len, uint32_t vm_flags,
       struct vma_struct **vma_store) {
c0103a4e:	55                   	push   %ebp
c0103a4f:	89 e5                	mov    %esp,%ebp
c0103a51:	83 ec 28             	sub    $0x28,%esp
    uintptr_t start = ROUNDDOWN(addr, PGSIZE), end = ROUNDUP(addr + len, PGSIZE);
c0103a54:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103a57:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103a5a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103a5d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0103a62:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0103a65:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
c0103a6c:	8b 55 0c             	mov    0xc(%ebp),%edx
c0103a6f:	8b 45 10             	mov    0x10(%ebp),%eax
c0103a72:	01 c2                	add    %eax,%edx
c0103a74:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103a77:	01 d0                	add    %edx,%eax
c0103a79:	83 e8 01             	sub    $0x1,%eax
c0103a7c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0103a7f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103a82:	ba 00 00 00 00       	mov    $0x0,%edx
c0103a87:	f7 75 e8             	divl   -0x18(%ebp)
c0103a8a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103a8d:	29 d0                	sub    %edx,%eax
c0103a8f:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if (!USER_ACCESS(start, end)) {
c0103a92:	81 7d ec ff ff 1f 00 	cmpl   $0x1fffff,-0x14(%ebp)
c0103a99:	76 11                	jbe    c0103aac <mm_map+0x5e>
c0103a9b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103a9e:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0103aa1:	73 09                	jae    c0103aac <mm_map+0x5e>
c0103aa3:	81 7d e0 00 00 00 b0 	cmpl   $0xb0000000,-0x20(%ebp)
c0103aaa:	76 0a                	jbe    c0103ab6 <mm_map+0x68>
        return -E_INVAL;
c0103aac:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0103ab1:	e9 9e 00 00 00       	jmp    c0103b54 <mm_map+0x106>
    }

    assert(mm != NULL);
c0103ab6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0103aba:	75 19                	jne    c0103ad5 <mm_map+0x87>
c0103abc:	68 eb c2 10 c0       	push   $0xc010c2eb
c0103ac1:	68 5b c2 10 c0       	push   $0xc010c25b
c0103ac6:	68 a7 00 00 00       	push   $0xa7
c0103acb:	68 70 c2 10 c0       	push   $0xc010c270
c0103ad0:	e8 28 c9 ff ff       	call   c01003fd <__panic>

    int ret = -E_INVAL;
c0103ad5:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)

    struct vma_struct *vma;
    if ((vma = find_vma(mm, start)) != NULL && end > vma->vm_start) {
c0103adc:	83 ec 08             	sub    $0x8,%esp
c0103adf:	ff 75 ec             	pushl  -0x14(%ebp)
c0103ae2:	ff 75 08             	pushl  0x8(%ebp)
c0103ae5:	e8 75 fc ff ff       	call   c010375f <find_vma>
c0103aea:	83 c4 10             	add    $0x10,%esp
c0103aed:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0103af0:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0103af4:	74 0b                	je     c0103b01 <mm_map+0xb3>
c0103af6:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103af9:	8b 40 04             	mov    0x4(%eax),%eax
c0103afc:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0103aff:	72 4c                	jb     c0103b4d <mm_map+0xff>
        goto out;
    }
    ret = -E_NO_MEM;
c0103b01:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    if ((vma = vma_create(start, end, vm_flags)) == NULL) {
c0103b08:	83 ec 04             	sub    $0x4,%esp
c0103b0b:	ff 75 14             	pushl  0x14(%ebp)
c0103b0e:	ff 75 e0             	pushl  -0x20(%ebp)
c0103b11:	ff 75 ec             	pushl  -0x14(%ebp)
c0103b14:	e8 0a fc ff ff       	call   c0103723 <vma_create>
c0103b19:	83 c4 10             	add    $0x10,%esp
c0103b1c:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0103b1f:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0103b23:	74 2b                	je     c0103b50 <mm_map+0x102>
        goto out;
    }
    insert_vma_struct(mm, vma);
c0103b25:	83 ec 08             	sub    $0x8,%esp
c0103b28:	ff 75 dc             	pushl  -0x24(%ebp)
c0103b2b:	ff 75 08             	pushl  0x8(%ebp)
c0103b2e:	e8 58 fd ff ff       	call   c010388b <insert_vma_struct>
c0103b33:	83 c4 10             	add    $0x10,%esp
    if (vma_store != NULL) {
c0103b36:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0103b3a:	74 08                	je     c0103b44 <mm_map+0xf6>
        *vma_store = vma;
c0103b3c:	8b 45 18             	mov    0x18(%ebp),%eax
c0103b3f:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0103b42:	89 10                	mov    %edx,(%eax)
    }
    ret = 0;
c0103b44:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0103b4b:	eb 04                	jmp    c0103b51 <mm_map+0x103>

    int ret = -E_INVAL;

    struct vma_struct *vma;
    if ((vma = find_vma(mm, start)) != NULL && end > vma->vm_start) {
        goto out;
c0103b4d:	90                   	nop
c0103b4e:	eb 01                	jmp    c0103b51 <mm_map+0x103>
    }
    ret = -E_NO_MEM;

    if ((vma = vma_create(start, end, vm_flags)) == NULL) {
        goto out;
c0103b50:	90                   	nop
        *vma_store = vma;
    }
    ret = 0;

out:
    return ret;
c0103b51:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0103b54:	c9                   	leave  
c0103b55:	c3                   	ret    

c0103b56 <dup_mmap>:

int
dup_mmap(struct mm_struct *to, struct mm_struct *from) {
c0103b56:	55                   	push   %ebp
c0103b57:	89 e5                	mov    %esp,%ebp
c0103b59:	53                   	push   %ebx
c0103b5a:	83 ec 24             	sub    $0x24,%esp
    assert(to != NULL && from != NULL);
c0103b5d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0103b61:	74 06                	je     c0103b69 <dup_mmap+0x13>
c0103b63:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0103b67:	75 19                	jne    c0103b82 <dup_mmap+0x2c>
c0103b69:	68 f6 c2 10 c0       	push   $0xc010c2f6
c0103b6e:	68 5b c2 10 c0       	push   $0xc010c25b
c0103b73:	68 c0 00 00 00       	push   $0xc0
c0103b78:	68 70 c2 10 c0       	push   $0xc010c270
c0103b7d:	e8 7b c8 ff ff       	call   c01003fd <__panic>
    list_entry_t *list = &(from->mmap_list), *le = list;
c0103b82:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103b85:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103b88:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103b8b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_prev(le)) != list) {
c0103b8e:	e9 86 00 00 00       	jmp    c0103c19 <dup_mmap+0xc3>
        struct vma_struct *vma, *nvma;
        vma = le2vma(le, list_link);
c0103b93:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103b96:	83 e8 10             	sub    $0x10,%eax
c0103b99:	89 45 ec             	mov    %eax,-0x14(%ebp)
        nvma = vma_create(vma->vm_start, vma->vm_end, vma->vm_flags);
c0103b9c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103b9f:	8b 48 0c             	mov    0xc(%eax),%ecx
c0103ba2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103ba5:	8b 50 08             	mov    0x8(%eax),%edx
c0103ba8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103bab:	8b 40 04             	mov    0x4(%eax),%eax
c0103bae:	83 ec 04             	sub    $0x4,%esp
c0103bb1:	51                   	push   %ecx
c0103bb2:	52                   	push   %edx
c0103bb3:	50                   	push   %eax
c0103bb4:	e8 6a fb ff ff       	call   c0103723 <vma_create>
c0103bb9:	83 c4 10             	add    $0x10,%esp
c0103bbc:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (nvma == NULL) {
c0103bbf:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0103bc3:	75 07                	jne    c0103bcc <dup_mmap+0x76>
            return -E_NO_MEM;
c0103bc5:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0103bca:	eb 6c                	jmp    c0103c38 <dup_mmap+0xe2>
        }

        insert_vma_struct(to, nvma);
c0103bcc:	83 ec 08             	sub    $0x8,%esp
c0103bcf:	ff 75 e8             	pushl  -0x18(%ebp)
c0103bd2:	ff 75 08             	pushl  0x8(%ebp)
c0103bd5:	e8 b1 fc ff ff       	call   c010388b <insert_vma_struct>
c0103bda:	83 c4 10             	add    $0x10,%esp

        bool share = 0;
c0103bdd:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
c0103be4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103be7:	8b 58 08             	mov    0x8(%eax),%ebx
c0103bea:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103bed:	8b 48 04             	mov    0x4(%eax),%ecx
c0103bf0:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103bf3:	8b 50 0c             	mov    0xc(%eax),%edx
c0103bf6:	8b 45 08             	mov    0x8(%ebp),%eax
c0103bf9:	8b 40 0c             	mov    0xc(%eax),%eax
c0103bfc:	83 ec 0c             	sub    $0xc,%esp
c0103bff:	ff 75 e4             	pushl  -0x1c(%ebp)
c0103c02:	53                   	push   %ebx
c0103c03:	51                   	push   %ecx
c0103c04:	52                   	push   %edx
c0103c05:	50                   	push   %eax
c0103c06:	e8 06 3f 00 00       	call   c0107b11 <copy_range>
c0103c0b:	83 c4 20             	add    $0x20,%esp
c0103c0e:	85 c0                	test   %eax,%eax
c0103c10:	74 07                	je     c0103c19 <dup_mmap+0xc3>
            return -E_NO_MEM;
c0103c12:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0103c17:	eb 1f                	jmp    c0103c38 <dup_mmap+0xe2>
c0103c19:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103c1c:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c0103c1f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103c22:	8b 00                	mov    (%eax),%eax

int
dup_mmap(struct mm_struct *to, struct mm_struct *from) {
    assert(to != NULL && from != NULL);
    list_entry_t *list = &(from->mmap_list), *le = list;
    while ((le = list_prev(le)) != list) {
c0103c24:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103c27:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103c2a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0103c2d:	0f 85 60 ff ff ff    	jne    c0103b93 <dup_mmap+0x3d>
        bool share = 0;
        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
            return -E_NO_MEM;
        }
    }
    return 0;
c0103c33:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0103c38:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0103c3b:	c9                   	leave  
c0103c3c:	c3                   	ret    

c0103c3d <exit_mmap>:

void
exit_mmap(struct mm_struct *mm) {
c0103c3d:	55                   	push   %ebp
c0103c3e:	89 e5                	mov    %esp,%ebp
c0103c40:	83 ec 28             	sub    $0x28,%esp
    assert(mm != NULL && mm_count(mm) == 0);
c0103c43:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0103c47:	74 0f                	je     c0103c58 <exit_mmap+0x1b>
c0103c49:	ff 75 08             	pushl  0x8(%ebp)
c0103c4c:	e8 c1 f9 ff ff       	call   c0103612 <mm_count>
c0103c51:	83 c4 04             	add    $0x4,%esp
c0103c54:	85 c0                	test   %eax,%eax
c0103c56:	74 19                	je     c0103c71 <exit_mmap+0x34>
c0103c58:	68 14 c3 10 c0       	push   $0xc010c314
c0103c5d:	68 5b c2 10 c0       	push   $0xc010c25b
c0103c62:	68 d6 00 00 00       	push   $0xd6
c0103c67:	68 70 c2 10 c0       	push   $0xc010c270
c0103c6c:	e8 8c c7 ff ff       	call   c01003fd <__panic>
    pde_t *pgdir = mm->pgdir;
c0103c71:	8b 45 08             	mov    0x8(%ebp),%eax
c0103c74:	8b 40 0c             	mov    0xc(%eax),%eax
c0103c77:	89 45 f0             	mov    %eax,-0x10(%ebp)
    list_entry_t *list = &(mm->mmap_list), *le = list;
c0103c7a:	8b 45 08             	mov    0x8(%ebp),%eax
c0103c7d:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0103c80:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103c83:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c0103c86:	eb 25                	jmp    c0103cad <exit_mmap+0x70>
        struct vma_struct *vma = le2vma(le, list_link);
c0103c88:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103c8b:	83 e8 10             	sub    $0x10,%eax
c0103c8e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
c0103c91:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103c94:	8b 50 08             	mov    0x8(%eax),%edx
c0103c97:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103c9a:	8b 40 04             	mov    0x4(%eax),%eax
c0103c9d:	83 ec 04             	sub    $0x4,%esp
c0103ca0:	52                   	push   %edx
c0103ca1:	50                   	push   %eax
c0103ca2:	ff 75 f0             	pushl  -0x10(%ebp)
c0103ca5:	e8 a0 3c 00 00       	call   c010794a <unmap_range>
c0103caa:	83 c4 10             	add    $0x10,%esp
c0103cad:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103cb0:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0103cb3:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103cb6:	8b 40 04             	mov    0x4(%eax),%eax
void
exit_mmap(struct mm_struct *mm) {
    assert(mm != NULL && mm_count(mm) == 0);
    pde_t *pgdir = mm->pgdir;
    list_entry_t *list = &(mm->mmap_list), *le = list;
    while ((le = list_next(le)) != list) {
c0103cb9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103cbc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103cbf:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0103cc2:	75 c4                	jne    c0103c88 <exit_mmap+0x4b>
        struct vma_struct *vma = le2vma(le, list_link);
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
    }
    while ((le = list_next(le)) != list) {
c0103cc4:	eb 25                	jmp    c0103ceb <exit_mmap+0xae>
        struct vma_struct *vma = le2vma(le, list_link);
c0103cc6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103cc9:	83 e8 10             	sub    $0x10,%eax
c0103ccc:	89 45 e0             	mov    %eax,-0x20(%ebp)
        exit_range(pgdir, vma->vm_start, vma->vm_end);
c0103ccf:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103cd2:	8b 50 08             	mov    0x8(%eax),%edx
c0103cd5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103cd8:	8b 40 04             	mov    0x4(%eax),%eax
c0103cdb:	83 ec 04             	sub    $0x4,%esp
c0103cde:	52                   	push   %edx
c0103cdf:	50                   	push   %eax
c0103ce0:	ff 75 f0             	pushl  -0x10(%ebp)
c0103ce3:	e8 35 3d 00 00       	call   c0107a1d <exit_range>
c0103ce8:	83 c4 10             	add    $0x10,%esp
c0103ceb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103cee:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0103cf1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103cf4:	8b 40 04             	mov    0x4(%eax),%eax
    list_entry_t *list = &(mm->mmap_list), *le = list;
    while ((le = list_next(le)) != list) {
        struct vma_struct *vma = le2vma(le, list_link);
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
    }
    while ((le = list_next(le)) != list) {
c0103cf7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103cfa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103cfd:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0103d00:	75 c4                	jne    c0103cc6 <exit_mmap+0x89>
        struct vma_struct *vma = le2vma(le, list_link);
        exit_range(pgdir, vma->vm_start, vma->vm_end);
    }
}
c0103d02:	90                   	nop
c0103d03:	c9                   	leave  
c0103d04:	c3                   	ret    

c0103d05 <copy_from_user>:

bool
copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable) {
c0103d05:	55                   	push   %ebp
c0103d06:	89 e5                	mov    %esp,%ebp
c0103d08:	83 ec 08             	sub    $0x8,%esp
    if (!user_mem_check(mm, (uintptr_t)src, len, writable)) {
c0103d0b:	8b 45 10             	mov    0x10(%ebp),%eax
c0103d0e:	ff 75 18             	pushl  0x18(%ebp)
c0103d11:	ff 75 14             	pushl  0x14(%ebp)
c0103d14:	50                   	push   %eax
c0103d15:	ff 75 08             	pushl  0x8(%ebp)
c0103d18:	e8 b1 08 00 00       	call   c01045ce <user_mem_check>
c0103d1d:	83 c4 10             	add    $0x10,%esp
c0103d20:	85 c0                	test   %eax,%eax
c0103d22:	75 07                	jne    c0103d2b <copy_from_user+0x26>
        return 0;
c0103d24:	b8 00 00 00 00       	mov    $0x0,%eax
c0103d29:	eb 19                	jmp    c0103d44 <copy_from_user+0x3f>
    }
    memcpy(dst, src, len);
c0103d2b:	83 ec 04             	sub    $0x4,%esp
c0103d2e:	ff 75 14             	pushl  0x14(%ebp)
c0103d31:	ff 75 10             	pushl  0x10(%ebp)
c0103d34:	ff 75 0c             	pushl  0xc(%ebp)
c0103d37:	e8 bc 73 00 00       	call   c010b0f8 <memcpy>
c0103d3c:	83 c4 10             	add    $0x10,%esp
    return 1;
c0103d3f:	b8 01 00 00 00       	mov    $0x1,%eax
}
c0103d44:	c9                   	leave  
c0103d45:	c3                   	ret    

c0103d46 <copy_to_user>:

bool
copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len) {
c0103d46:	55                   	push   %ebp
c0103d47:	89 e5                	mov    %esp,%ebp
c0103d49:	83 ec 08             	sub    $0x8,%esp
    if (!user_mem_check(mm, (uintptr_t)dst, len, 1)) {
c0103d4c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103d4f:	6a 01                	push   $0x1
c0103d51:	ff 75 14             	pushl  0x14(%ebp)
c0103d54:	50                   	push   %eax
c0103d55:	ff 75 08             	pushl  0x8(%ebp)
c0103d58:	e8 71 08 00 00       	call   c01045ce <user_mem_check>
c0103d5d:	83 c4 10             	add    $0x10,%esp
c0103d60:	85 c0                	test   %eax,%eax
c0103d62:	75 07                	jne    c0103d6b <copy_to_user+0x25>
        return 0;
c0103d64:	b8 00 00 00 00       	mov    $0x0,%eax
c0103d69:	eb 19                	jmp    c0103d84 <copy_to_user+0x3e>
    }
    memcpy(dst, src, len);
c0103d6b:	83 ec 04             	sub    $0x4,%esp
c0103d6e:	ff 75 14             	pushl  0x14(%ebp)
c0103d71:	ff 75 10             	pushl  0x10(%ebp)
c0103d74:	ff 75 0c             	pushl  0xc(%ebp)
c0103d77:	e8 7c 73 00 00       	call   c010b0f8 <memcpy>
c0103d7c:	83 c4 10             	add    $0x10,%esp
    return 1;
c0103d7f:	b8 01 00 00 00       	mov    $0x1,%eax
}
c0103d84:	c9                   	leave  
c0103d85:	c3                   	ret    

c0103d86 <vmm_init>:

// vmm_init - initialize virtual memory management
//          - now just call check_vmm to check correctness of vmm
void
vmm_init(void) {
c0103d86:	55                   	push   %ebp
c0103d87:	89 e5                	mov    %esp,%ebp
c0103d89:	83 ec 08             	sub    $0x8,%esp
    check_vmm();
c0103d8c:	e8 03 00 00 00       	call   c0103d94 <check_vmm>
}
c0103d91:	90                   	nop
c0103d92:	c9                   	leave  
c0103d93:	c3                   	ret    

c0103d94 <check_vmm>:

// check_vmm - check correctness of vmm
static void
check_vmm(void) {
c0103d94:	55                   	push   %ebp
c0103d95:	89 e5                	mov    %esp,%ebp
c0103d97:	83 ec 18             	sub    $0x18,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0103d9a:	e8 da 33 00 00       	call   c0107179 <nr_free_pages>
c0103d9f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    check_vma_struct();
c0103da2:	e8 18 00 00 00       	call   c0103dbf <check_vma_struct>
    check_pgfault();
c0103da7:	e8 10 04 00 00       	call   c01041bc <check_pgfault>

    cprintf("check_vmm() succeeded.\n");
c0103dac:	83 ec 0c             	sub    $0xc,%esp
c0103daf:	68 34 c3 10 c0       	push   $0xc010c334
c0103db4:	e8 de c4 ff ff       	call   c0100297 <cprintf>
c0103db9:	83 c4 10             	add    $0x10,%esp
}
c0103dbc:	90                   	nop
c0103dbd:	c9                   	leave  
c0103dbe:	c3                   	ret    

c0103dbf <check_vma_struct>:

static void
check_vma_struct(void) {
c0103dbf:	55                   	push   %ebp
c0103dc0:	89 e5                	mov    %esp,%ebp
c0103dc2:	83 ec 58             	sub    $0x58,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0103dc5:	e8 af 33 00 00       	call   c0107179 <nr_free_pages>
c0103dca:	89 45 ec             	mov    %eax,-0x14(%ebp)

    struct mm_struct *mm = mm_create();
c0103dcd:	e8 b3 f8 ff ff       	call   c0103685 <mm_create>
c0103dd2:	89 45 e8             	mov    %eax,-0x18(%ebp)
    assert(mm != NULL);
c0103dd5:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0103dd9:	75 19                	jne    c0103df4 <check_vma_struct+0x35>
c0103ddb:	68 eb c2 10 c0       	push   $0xc010c2eb
c0103de0:	68 5b c2 10 c0       	push   $0xc010c25b
c0103de5:	68 0c 01 00 00       	push   $0x10c
c0103dea:	68 70 c2 10 c0       	push   $0xc010c270
c0103def:	e8 09 c6 ff ff       	call   c01003fd <__panic>

    int step1 = 10, step2 = step1 * 10;
c0103df4:	c7 45 e4 0a 00 00 00 	movl   $0xa,-0x1c(%ebp)
c0103dfb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0103dfe:	89 d0                	mov    %edx,%eax
c0103e00:	c1 e0 02             	shl    $0x2,%eax
c0103e03:	01 d0                	add    %edx,%eax
c0103e05:	01 c0                	add    %eax,%eax
c0103e07:	89 45 e0             	mov    %eax,-0x20(%ebp)

    int i;
    for (i = step1; i >= 1; i --) {
c0103e0a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103e0d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103e10:	eb 5f                	jmp    c0103e71 <check_vma_struct+0xb2>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c0103e12:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0103e15:	89 d0                	mov    %edx,%eax
c0103e17:	c1 e0 02             	shl    $0x2,%eax
c0103e1a:	01 d0                	add    %edx,%eax
c0103e1c:	83 c0 02             	add    $0x2,%eax
c0103e1f:	89 c1                	mov    %eax,%ecx
c0103e21:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0103e24:	89 d0                	mov    %edx,%eax
c0103e26:	c1 e0 02             	shl    $0x2,%eax
c0103e29:	01 d0                	add    %edx,%eax
c0103e2b:	83 ec 04             	sub    $0x4,%esp
c0103e2e:	6a 00                	push   $0x0
c0103e30:	51                   	push   %ecx
c0103e31:	50                   	push   %eax
c0103e32:	e8 ec f8 ff ff       	call   c0103723 <vma_create>
c0103e37:	83 c4 10             	add    $0x10,%esp
c0103e3a:	89 45 dc             	mov    %eax,-0x24(%ebp)
        assert(vma != NULL);
c0103e3d:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0103e41:	75 19                	jne    c0103e5c <check_vma_struct+0x9d>
c0103e43:	68 4c c3 10 c0       	push   $0xc010c34c
c0103e48:	68 5b c2 10 c0       	push   $0xc010c25b
c0103e4d:	68 13 01 00 00       	push   $0x113
c0103e52:	68 70 c2 10 c0       	push   $0xc010c270
c0103e57:	e8 a1 c5 ff ff       	call   c01003fd <__panic>
        insert_vma_struct(mm, vma);
c0103e5c:	83 ec 08             	sub    $0x8,%esp
c0103e5f:	ff 75 dc             	pushl  -0x24(%ebp)
c0103e62:	ff 75 e8             	pushl  -0x18(%ebp)
c0103e65:	e8 21 fa ff ff       	call   c010388b <insert_vma_struct>
c0103e6a:	83 c4 10             	add    $0x10,%esp
    assert(mm != NULL);

    int step1 = 10, step2 = step1 * 10;

    int i;
    for (i = step1; i >= 1; i --) {
c0103e6d:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0103e71:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0103e75:	7f 9b                	jg     c0103e12 <check_vma_struct+0x53>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    for (i = step1 + 1; i <= step2; i ++) {
c0103e77:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103e7a:	83 c0 01             	add    $0x1,%eax
c0103e7d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103e80:	eb 5f                	jmp    c0103ee1 <check_vma_struct+0x122>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c0103e82:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0103e85:	89 d0                	mov    %edx,%eax
c0103e87:	c1 e0 02             	shl    $0x2,%eax
c0103e8a:	01 d0                	add    %edx,%eax
c0103e8c:	83 c0 02             	add    $0x2,%eax
c0103e8f:	89 c1                	mov    %eax,%ecx
c0103e91:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0103e94:	89 d0                	mov    %edx,%eax
c0103e96:	c1 e0 02             	shl    $0x2,%eax
c0103e99:	01 d0                	add    %edx,%eax
c0103e9b:	83 ec 04             	sub    $0x4,%esp
c0103e9e:	6a 00                	push   $0x0
c0103ea0:	51                   	push   %ecx
c0103ea1:	50                   	push   %eax
c0103ea2:	e8 7c f8 ff ff       	call   c0103723 <vma_create>
c0103ea7:	83 c4 10             	add    $0x10,%esp
c0103eaa:	89 45 d8             	mov    %eax,-0x28(%ebp)
        assert(vma != NULL);
c0103ead:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c0103eb1:	75 19                	jne    c0103ecc <check_vma_struct+0x10d>
c0103eb3:	68 4c c3 10 c0       	push   $0xc010c34c
c0103eb8:	68 5b c2 10 c0       	push   $0xc010c25b
c0103ebd:	68 19 01 00 00       	push   $0x119
c0103ec2:	68 70 c2 10 c0       	push   $0xc010c270
c0103ec7:	e8 31 c5 ff ff       	call   c01003fd <__panic>
        insert_vma_struct(mm, vma);
c0103ecc:	83 ec 08             	sub    $0x8,%esp
c0103ecf:	ff 75 d8             	pushl  -0x28(%ebp)
c0103ed2:	ff 75 e8             	pushl  -0x18(%ebp)
c0103ed5:	e8 b1 f9 ff ff       	call   c010388b <insert_vma_struct>
c0103eda:	83 c4 10             	add    $0x10,%esp
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    for (i = step1 + 1; i <= step2; i ++) {
c0103edd:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0103ee1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103ee4:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0103ee7:	7e 99                	jle    c0103e82 <check_vma_struct+0xc3>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    list_entry_t *le = list_next(&(mm->mmap_list));
c0103ee9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103eec:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c0103eef:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0103ef2:	8b 40 04             	mov    0x4(%eax),%eax
c0103ef5:	89 45 f0             	mov    %eax,-0x10(%ebp)

    for (i = 1; i <= step2; i ++) {
c0103ef8:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
c0103eff:	e9 81 00 00 00       	jmp    c0103f85 <check_vma_struct+0x1c6>
        assert(le != &(mm->mmap_list));
c0103f04:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103f07:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0103f0a:	75 19                	jne    c0103f25 <check_vma_struct+0x166>
c0103f0c:	68 58 c3 10 c0       	push   $0xc010c358
c0103f11:	68 5b c2 10 c0       	push   $0xc010c25b
c0103f16:	68 20 01 00 00       	push   $0x120
c0103f1b:	68 70 c2 10 c0       	push   $0xc010c270
c0103f20:	e8 d8 c4 ff ff       	call   c01003fd <__panic>
        struct vma_struct *mmap = le2vma(le, list_link);
c0103f25:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103f28:	83 e8 10             	sub    $0x10,%eax
c0103f2b:	89 45 d0             	mov    %eax,-0x30(%ebp)
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
c0103f2e:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0103f31:	8b 48 04             	mov    0x4(%eax),%ecx
c0103f34:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0103f37:	89 d0                	mov    %edx,%eax
c0103f39:	c1 e0 02             	shl    $0x2,%eax
c0103f3c:	01 d0                	add    %edx,%eax
c0103f3e:	39 c1                	cmp    %eax,%ecx
c0103f40:	75 17                	jne    c0103f59 <check_vma_struct+0x19a>
c0103f42:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0103f45:	8b 48 08             	mov    0x8(%eax),%ecx
c0103f48:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0103f4b:	89 d0                	mov    %edx,%eax
c0103f4d:	c1 e0 02             	shl    $0x2,%eax
c0103f50:	01 d0                	add    %edx,%eax
c0103f52:	83 c0 02             	add    $0x2,%eax
c0103f55:	39 c1                	cmp    %eax,%ecx
c0103f57:	74 19                	je     c0103f72 <check_vma_struct+0x1b3>
c0103f59:	68 70 c3 10 c0       	push   $0xc010c370
c0103f5e:	68 5b c2 10 c0       	push   $0xc010c25b
c0103f63:	68 22 01 00 00       	push   $0x122
c0103f68:	68 70 c2 10 c0       	push   $0xc010c270
c0103f6d:	e8 8b c4 ff ff       	call   c01003fd <__panic>
c0103f72:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103f75:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c0103f78:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0103f7b:	8b 40 04             	mov    0x4(%eax),%eax
        le = list_next(le);
c0103f7e:	89 45 f0             	mov    %eax,-0x10(%ebp)
        insert_vma_struct(mm, vma);
    }

    list_entry_t *le = list_next(&(mm->mmap_list));

    for (i = 1; i <= step2; i ++) {
c0103f81:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0103f85:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103f88:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0103f8b:	0f 8e 73 ff ff ff    	jle    c0103f04 <check_vma_struct+0x145>
        struct vma_struct *mmap = le2vma(le, list_link);
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
        le = list_next(le);
    }

    for (i = 5; i <= 5 * step2; i +=5) {
c0103f91:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
c0103f98:	e9 80 01 00 00       	jmp    c010411d <check_vma_struct+0x35e>
        struct vma_struct *vma1 = find_vma(mm, i);
c0103f9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103fa0:	83 ec 08             	sub    $0x8,%esp
c0103fa3:	50                   	push   %eax
c0103fa4:	ff 75 e8             	pushl  -0x18(%ebp)
c0103fa7:	e8 b3 f7 ff ff       	call   c010375f <find_vma>
c0103fac:	83 c4 10             	add    $0x10,%esp
c0103faf:	89 45 cc             	mov    %eax,-0x34(%ebp)
        assert(vma1 != NULL);
c0103fb2:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0103fb6:	75 19                	jne    c0103fd1 <check_vma_struct+0x212>
c0103fb8:	68 a5 c3 10 c0       	push   $0xc010c3a5
c0103fbd:	68 5b c2 10 c0       	push   $0xc010c25b
c0103fc2:	68 28 01 00 00       	push   $0x128
c0103fc7:	68 70 c2 10 c0       	push   $0xc010c270
c0103fcc:	e8 2c c4 ff ff       	call   c01003fd <__panic>
        struct vma_struct *vma2 = find_vma(mm, i+1);
c0103fd1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103fd4:	83 c0 01             	add    $0x1,%eax
c0103fd7:	83 ec 08             	sub    $0x8,%esp
c0103fda:	50                   	push   %eax
c0103fdb:	ff 75 e8             	pushl  -0x18(%ebp)
c0103fde:	e8 7c f7 ff ff       	call   c010375f <find_vma>
c0103fe3:	83 c4 10             	add    $0x10,%esp
c0103fe6:	89 45 c8             	mov    %eax,-0x38(%ebp)
        assert(vma2 != NULL);
c0103fe9:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c0103fed:	75 19                	jne    c0104008 <check_vma_struct+0x249>
c0103fef:	68 b2 c3 10 c0       	push   $0xc010c3b2
c0103ff4:	68 5b c2 10 c0       	push   $0xc010c25b
c0103ff9:	68 2a 01 00 00       	push   $0x12a
c0103ffe:	68 70 c2 10 c0       	push   $0xc010c270
c0104003:	e8 f5 c3 ff ff       	call   c01003fd <__panic>
        struct vma_struct *vma3 = find_vma(mm, i+2);
c0104008:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010400b:	83 c0 02             	add    $0x2,%eax
c010400e:	83 ec 08             	sub    $0x8,%esp
c0104011:	50                   	push   %eax
c0104012:	ff 75 e8             	pushl  -0x18(%ebp)
c0104015:	e8 45 f7 ff ff       	call   c010375f <find_vma>
c010401a:	83 c4 10             	add    $0x10,%esp
c010401d:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        assert(vma3 == NULL);
c0104020:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
c0104024:	74 19                	je     c010403f <check_vma_struct+0x280>
c0104026:	68 bf c3 10 c0       	push   $0xc010c3bf
c010402b:	68 5b c2 10 c0       	push   $0xc010c25b
c0104030:	68 2c 01 00 00       	push   $0x12c
c0104035:	68 70 c2 10 c0       	push   $0xc010c270
c010403a:	e8 be c3 ff ff       	call   c01003fd <__panic>
        struct vma_struct *vma4 = find_vma(mm, i+3);
c010403f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104042:	83 c0 03             	add    $0x3,%eax
c0104045:	83 ec 08             	sub    $0x8,%esp
c0104048:	50                   	push   %eax
c0104049:	ff 75 e8             	pushl  -0x18(%ebp)
c010404c:	e8 0e f7 ff ff       	call   c010375f <find_vma>
c0104051:	83 c4 10             	add    $0x10,%esp
c0104054:	89 45 c0             	mov    %eax,-0x40(%ebp)
        assert(vma4 == NULL);
c0104057:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
c010405b:	74 19                	je     c0104076 <check_vma_struct+0x2b7>
c010405d:	68 cc c3 10 c0       	push   $0xc010c3cc
c0104062:	68 5b c2 10 c0       	push   $0xc010c25b
c0104067:	68 2e 01 00 00       	push   $0x12e
c010406c:	68 70 c2 10 c0       	push   $0xc010c270
c0104071:	e8 87 c3 ff ff       	call   c01003fd <__panic>
        struct vma_struct *vma5 = find_vma(mm, i+4);
c0104076:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104079:	83 c0 04             	add    $0x4,%eax
c010407c:	83 ec 08             	sub    $0x8,%esp
c010407f:	50                   	push   %eax
c0104080:	ff 75 e8             	pushl  -0x18(%ebp)
c0104083:	e8 d7 f6 ff ff       	call   c010375f <find_vma>
c0104088:	83 c4 10             	add    $0x10,%esp
c010408b:	89 45 bc             	mov    %eax,-0x44(%ebp)
        assert(vma5 == NULL);
c010408e:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0104092:	74 19                	je     c01040ad <check_vma_struct+0x2ee>
c0104094:	68 d9 c3 10 c0       	push   $0xc010c3d9
c0104099:	68 5b c2 10 c0       	push   $0xc010c25b
c010409e:	68 30 01 00 00       	push   $0x130
c01040a3:	68 70 c2 10 c0       	push   $0xc010c270
c01040a8:	e8 50 c3 ff ff       	call   c01003fd <__panic>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
c01040ad:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01040b0:	8b 50 04             	mov    0x4(%eax),%edx
c01040b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01040b6:	39 c2                	cmp    %eax,%edx
c01040b8:	75 10                	jne    c01040ca <check_vma_struct+0x30b>
c01040ba:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01040bd:	8b 40 08             	mov    0x8(%eax),%eax
c01040c0:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01040c3:	83 c2 02             	add    $0x2,%edx
c01040c6:	39 d0                	cmp    %edx,%eax
c01040c8:	74 19                	je     c01040e3 <check_vma_struct+0x324>
c01040ca:	68 e8 c3 10 c0       	push   $0xc010c3e8
c01040cf:	68 5b c2 10 c0       	push   $0xc010c25b
c01040d4:	68 32 01 00 00       	push   $0x132
c01040d9:	68 70 c2 10 c0       	push   $0xc010c270
c01040de:	e8 1a c3 ff ff       	call   c01003fd <__panic>
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
c01040e3:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01040e6:	8b 50 04             	mov    0x4(%eax),%edx
c01040e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01040ec:	39 c2                	cmp    %eax,%edx
c01040ee:	75 10                	jne    c0104100 <check_vma_struct+0x341>
c01040f0:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01040f3:	8b 40 08             	mov    0x8(%eax),%eax
c01040f6:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01040f9:	83 c2 02             	add    $0x2,%edx
c01040fc:	39 d0                	cmp    %edx,%eax
c01040fe:	74 19                	je     c0104119 <check_vma_struct+0x35a>
c0104100:	68 18 c4 10 c0       	push   $0xc010c418
c0104105:	68 5b c2 10 c0       	push   $0xc010c25b
c010410a:	68 33 01 00 00       	push   $0x133
c010410f:	68 70 c2 10 c0       	push   $0xc010c270
c0104114:	e8 e4 c2 ff ff       	call   c01003fd <__panic>
        struct vma_struct *mmap = le2vma(le, list_link);
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
        le = list_next(le);
    }

    for (i = 5; i <= 5 * step2; i +=5) {
c0104119:	83 45 f4 05          	addl   $0x5,-0xc(%ebp)
c010411d:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0104120:	89 d0                	mov    %edx,%eax
c0104122:	c1 e0 02             	shl    $0x2,%eax
c0104125:	01 d0                	add    %edx,%eax
c0104127:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010412a:	0f 8d 6d fe ff ff    	jge    c0103f9d <check_vma_struct+0x1de>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
    }

    for (i =4; i>=0; i--) {
c0104130:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%ebp)
c0104137:	eb 5c                	jmp    c0104195 <check_vma_struct+0x3d6>
        struct vma_struct *vma_below_5= find_vma(mm,i);
c0104139:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010413c:	83 ec 08             	sub    $0x8,%esp
c010413f:	50                   	push   %eax
c0104140:	ff 75 e8             	pushl  -0x18(%ebp)
c0104143:	e8 17 f6 ff ff       	call   c010375f <find_vma>
c0104148:	83 c4 10             	add    $0x10,%esp
c010414b:	89 45 b8             	mov    %eax,-0x48(%ebp)
        if (vma_below_5 != NULL ) {
c010414e:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
c0104152:	74 1e                	je     c0104172 <check_vma_struct+0x3b3>
           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
c0104154:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0104157:	8b 50 08             	mov    0x8(%eax),%edx
c010415a:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010415d:	8b 40 04             	mov    0x4(%eax),%eax
c0104160:	52                   	push   %edx
c0104161:	50                   	push   %eax
c0104162:	ff 75 f4             	pushl  -0xc(%ebp)
c0104165:	68 48 c4 10 c0       	push   $0xc010c448
c010416a:	e8 28 c1 ff ff       	call   c0100297 <cprintf>
c010416f:	83 c4 10             	add    $0x10,%esp
        }
        assert(vma_below_5 == NULL);
c0104172:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
c0104176:	74 19                	je     c0104191 <check_vma_struct+0x3d2>
c0104178:	68 6d c4 10 c0       	push   $0xc010c46d
c010417d:	68 5b c2 10 c0       	push   $0xc010c25b
c0104182:	68 3b 01 00 00       	push   $0x13b
c0104187:	68 70 c2 10 c0       	push   $0xc010c270
c010418c:	e8 6c c2 ff ff       	call   c01003fd <__panic>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
    }

    for (i =4; i>=0; i--) {
c0104191:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0104195:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104199:	79 9e                	jns    c0104139 <check_vma_struct+0x37a>
           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
        }
        assert(vma_below_5 == NULL);
    }

    mm_destroy(mm);
c010419b:	83 ec 0c             	sub    $0xc,%esp
c010419e:	ff 75 e8             	pushl  -0x18(%ebp)
c01041a1:	e8 09 f8 ff ff       	call   c01039af <mm_destroy>
c01041a6:	83 c4 10             	add    $0x10,%esp

    cprintf("check_vma_struct() succeeded!\n");
c01041a9:	83 ec 0c             	sub    $0xc,%esp
c01041ac:	68 84 c4 10 c0       	push   $0xc010c484
c01041b1:	e8 e1 c0 ff ff       	call   c0100297 <cprintf>
c01041b6:	83 c4 10             	add    $0x10,%esp
}
c01041b9:	90                   	nop
c01041ba:	c9                   	leave  
c01041bb:	c3                   	ret    

c01041bc <check_pgfault>:

struct mm_struct *check_mm_struct;

// check_pgfault - check correctness of pgfault handler
static void
check_pgfault(void) {
c01041bc:	55                   	push   %ebp
c01041bd:	89 e5                	mov    %esp,%ebp
c01041bf:	83 ec 28             	sub    $0x28,%esp
    size_t nr_free_pages_store = nr_free_pages();
c01041c2:	e8 b2 2f 00 00       	call   c0107179 <nr_free_pages>
c01041c7:	89 45 ec             	mov    %eax,-0x14(%ebp)

    check_mm_struct = mm_create();
c01041ca:	e8 b6 f4 ff ff       	call   c0103685 <mm_create>
c01041cf:	a3 d0 30 1b c0       	mov    %eax,0xc01b30d0
    assert(check_mm_struct != NULL);
c01041d4:	a1 d0 30 1b c0       	mov    0xc01b30d0,%eax
c01041d9:	85 c0                	test   %eax,%eax
c01041db:	75 19                	jne    c01041f6 <check_pgfault+0x3a>
c01041dd:	68 a3 c4 10 c0       	push   $0xc010c4a3
c01041e2:	68 5b c2 10 c0       	push   $0xc010c25b
c01041e7:	68 4b 01 00 00       	push   $0x14b
c01041ec:	68 70 c2 10 c0       	push   $0xc010c270
c01041f1:	e8 07 c2 ff ff       	call   c01003fd <__panic>

    struct mm_struct *mm = check_mm_struct;
c01041f6:	a1 d0 30 1b c0       	mov    0xc01b30d0,%eax
c01041fb:	89 45 e8             	mov    %eax,-0x18(%ebp)
    pde_t *pgdir = mm->pgdir = boot_pgdir;
c01041fe:	8b 15 20 ca 12 c0    	mov    0xc012ca20,%edx
c0104204:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104207:	89 50 0c             	mov    %edx,0xc(%eax)
c010420a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010420d:	8b 40 0c             	mov    0xc(%eax),%eax
c0104210:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(pgdir[0] == 0);
c0104213:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104216:	8b 00                	mov    (%eax),%eax
c0104218:	85 c0                	test   %eax,%eax
c010421a:	74 19                	je     c0104235 <check_pgfault+0x79>
c010421c:	68 bb c4 10 c0       	push   $0xc010c4bb
c0104221:	68 5b c2 10 c0       	push   $0xc010c25b
c0104226:	68 4f 01 00 00       	push   $0x14f
c010422b:	68 70 c2 10 c0       	push   $0xc010c270
c0104230:	e8 c8 c1 ff ff       	call   c01003fd <__panic>

    struct vma_struct *vma = vma_create(0, PTSIZE, VM_WRITE);
c0104235:	83 ec 04             	sub    $0x4,%esp
c0104238:	6a 02                	push   $0x2
c010423a:	68 00 00 40 00       	push   $0x400000
c010423f:	6a 00                	push   $0x0
c0104241:	e8 dd f4 ff ff       	call   c0103723 <vma_create>
c0104246:	83 c4 10             	add    $0x10,%esp
c0104249:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(vma != NULL);
c010424c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0104250:	75 19                	jne    c010426b <check_pgfault+0xaf>
c0104252:	68 4c c3 10 c0       	push   $0xc010c34c
c0104257:	68 5b c2 10 c0       	push   $0xc010c25b
c010425c:	68 52 01 00 00       	push   $0x152
c0104261:	68 70 c2 10 c0       	push   $0xc010c270
c0104266:	e8 92 c1 ff ff       	call   c01003fd <__panic>

    insert_vma_struct(mm, vma);
c010426b:	83 ec 08             	sub    $0x8,%esp
c010426e:	ff 75 e0             	pushl  -0x20(%ebp)
c0104271:	ff 75 e8             	pushl  -0x18(%ebp)
c0104274:	e8 12 f6 ff ff       	call   c010388b <insert_vma_struct>
c0104279:	83 c4 10             	add    $0x10,%esp

    uintptr_t addr = 0x100;
c010427c:	c7 45 dc 00 01 00 00 	movl   $0x100,-0x24(%ebp)
    assert(find_vma(mm, addr) == vma);
c0104283:	83 ec 08             	sub    $0x8,%esp
c0104286:	ff 75 dc             	pushl  -0x24(%ebp)
c0104289:	ff 75 e8             	pushl  -0x18(%ebp)
c010428c:	e8 ce f4 ff ff       	call   c010375f <find_vma>
c0104291:	83 c4 10             	add    $0x10,%esp
c0104294:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0104297:	74 19                	je     c01042b2 <check_pgfault+0xf6>
c0104299:	68 c9 c4 10 c0       	push   $0xc010c4c9
c010429e:	68 5b c2 10 c0       	push   $0xc010c25b
c01042a3:	68 57 01 00 00       	push   $0x157
c01042a8:	68 70 c2 10 c0       	push   $0xc010c270
c01042ad:	e8 4b c1 ff ff       	call   c01003fd <__panic>

    int i, sum = 0;
c01042b2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    for (i = 0; i < 100; i ++) {
c01042b9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01042c0:	eb 19                	jmp    c01042db <check_pgfault+0x11f>
        *(char *)(addr + i) = i;
c01042c2:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01042c5:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01042c8:	01 d0                	add    %edx,%eax
c01042ca:	89 c2                	mov    %eax,%edx
c01042cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01042cf:	88 02                	mov    %al,(%edx)
        sum += i;
c01042d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01042d4:	01 45 f0             	add    %eax,-0x10(%ebp)

    uintptr_t addr = 0x100;
    assert(find_vma(mm, addr) == vma);

    int i, sum = 0;
    for (i = 0; i < 100; i ++) {
c01042d7:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01042db:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c01042df:	7e e1                	jle    c01042c2 <check_pgfault+0x106>
        *(char *)(addr + i) = i;
        sum += i;
    }
    for (i = 0; i < 100; i ++) {
c01042e1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01042e8:	eb 15                	jmp    c01042ff <check_pgfault+0x143>
        sum -= *(char *)(addr + i);
c01042ea:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01042ed:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01042f0:	01 d0                	add    %edx,%eax
c01042f2:	0f b6 00             	movzbl (%eax),%eax
c01042f5:	0f be c0             	movsbl %al,%eax
c01042f8:	29 45 f0             	sub    %eax,-0x10(%ebp)
    int i, sum = 0;
    for (i = 0; i < 100; i ++) {
        *(char *)(addr + i) = i;
        sum += i;
    }
    for (i = 0; i < 100; i ++) {
c01042fb:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01042ff:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c0104303:	7e e5                	jle    c01042ea <check_pgfault+0x12e>
        sum -= *(char *)(addr + i);
    }
    assert(sum == 0);
c0104305:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0104309:	74 19                	je     c0104324 <check_pgfault+0x168>
c010430b:	68 e3 c4 10 c0       	push   $0xc010c4e3
c0104310:	68 5b c2 10 c0       	push   $0xc010c25b
c0104315:	68 61 01 00 00       	push   $0x161
c010431a:	68 70 c2 10 c0       	push   $0xc010c270
c010431f:	e8 d9 c0 ff ff       	call   c01003fd <__panic>

    page_remove(pgdir, ROUNDDOWN(addr, PGSIZE));
c0104324:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104327:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010432a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010432d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0104332:	83 ec 08             	sub    $0x8,%esp
c0104335:	50                   	push   %eax
c0104336:	ff 75 e4             	pushl  -0x1c(%ebp)
c0104339:	e8 ae 39 00 00       	call   c0107cec <page_remove>
c010433e:	83 c4 10             	add    $0x10,%esp
    free_page(pde2page(pgdir[0]));
c0104341:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104344:	8b 00                	mov    (%eax),%eax
c0104346:	83 ec 0c             	sub    $0xc,%esp
c0104349:	50                   	push   %eax
c010434a:	e8 1a f3 ff ff       	call   c0103669 <pde2page>
c010434f:	83 c4 10             	add    $0x10,%esp
c0104352:	83 ec 08             	sub    $0x8,%esp
c0104355:	6a 01                	push   $0x1
c0104357:	50                   	push   %eax
c0104358:	e8 e7 2d 00 00       	call   c0107144 <free_pages>
c010435d:	83 c4 10             	add    $0x10,%esp
    pgdir[0] = 0;
c0104360:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104363:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    mm->pgdir = NULL;
c0104369:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010436c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
    mm_destroy(mm);
c0104373:	83 ec 0c             	sub    $0xc,%esp
c0104376:	ff 75 e8             	pushl  -0x18(%ebp)
c0104379:	e8 31 f6 ff ff       	call   c01039af <mm_destroy>
c010437e:	83 c4 10             	add    $0x10,%esp
    check_mm_struct = NULL;
c0104381:	c7 05 d0 30 1b c0 00 	movl   $0x0,0xc01b30d0
c0104388:	00 00 00 

    assert(nr_free_pages_store == nr_free_pages());
c010438b:	e8 e9 2d 00 00       	call   c0107179 <nr_free_pages>
c0104390:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0104393:	74 19                	je     c01043ae <check_pgfault+0x1f2>
c0104395:	68 ec c4 10 c0       	push   $0xc010c4ec
c010439a:	68 5b c2 10 c0       	push   $0xc010c25b
c010439f:	68 6b 01 00 00       	push   $0x16b
c01043a4:	68 70 c2 10 c0       	push   $0xc010c270
c01043a9:	e8 4f c0 ff ff       	call   c01003fd <__panic>

    cprintf("check_pgfault() succeeded!\n");
c01043ae:	83 ec 0c             	sub    $0xc,%esp
c01043b1:	68 13 c5 10 c0       	push   $0xc010c513
c01043b6:	e8 dc be ff ff       	call   c0100297 <cprintf>
c01043bb:	83 c4 10             	add    $0x10,%esp
}
c01043be:	90                   	nop
c01043bf:	c9                   	leave  
c01043c0:	c3                   	ret    

c01043c1 <do_pgfault>:
 *            was a read (0) or write (1).
 *         -- The U/S flag (bit 2) indicates whether the processor was executing at user mode (1)
 *            or supervisor mode (0) at the time of the exception.
 */
int
do_pgfault(struct mm_struct *mm, uint32_t error_code, uintptr_t addr) {
c01043c1:	55                   	push   %ebp
c01043c2:	89 e5                	mov    %esp,%ebp
c01043c4:	83 ec 28             	sub    $0x28,%esp
    int ret = -E_INVAL;
c01043c7:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
    //try to find a vma which include addr
    struct vma_struct *vma = find_vma(mm, addr);
c01043ce:	ff 75 10             	pushl  0x10(%ebp)
c01043d1:	ff 75 08             	pushl  0x8(%ebp)
c01043d4:	e8 86 f3 ff ff       	call   c010375f <find_vma>
c01043d9:	83 c4 08             	add    $0x8,%esp
c01043dc:	89 45 ec             	mov    %eax,-0x14(%ebp)

    pgfault_num++;
c01043df:	a1 64 0f 1b c0       	mov    0xc01b0f64,%eax
c01043e4:	83 c0 01             	add    $0x1,%eax
c01043e7:	a3 64 0f 1b c0       	mov    %eax,0xc01b0f64
    //If the addr is in the range of a mm's vma?
    if (vma == NULL || vma->vm_start > addr) {
c01043ec:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01043f0:	74 0b                	je     c01043fd <do_pgfault+0x3c>
c01043f2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01043f5:	8b 40 04             	mov    0x4(%eax),%eax
c01043f8:	3b 45 10             	cmp    0x10(%ebp),%eax
c01043fb:	76 18                	jbe    c0104415 <do_pgfault+0x54>
        cprintf("not valid addr %x, and  can not find it in vma\n", addr);
c01043fd:	83 ec 08             	sub    $0x8,%esp
c0104400:	ff 75 10             	pushl  0x10(%ebp)
c0104403:	68 30 c5 10 c0       	push   $0xc010c530
c0104408:	e8 8a be ff ff       	call   c0100297 <cprintf>
c010440d:	83 c4 10             	add    $0x10,%esp
        goto failed;
c0104410:	e9 b4 01 00 00       	jmp    c01045c9 <do_pgfault+0x208>
    }
    //check the error_code
    switch (error_code & 3) {
c0104415:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104418:	83 e0 03             	and    $0x3,%eax
c010441b:	85 c0                	test   %eax,%eax
c010441d:	74 3c                	je     c010445b <do_pgfault+0x9a>
c010441f:	83 f8 01             	cmp    $0x1,%eax
c0104422:	74 22                	je     c0104446 <do_pgfault+0x85>
    default:
            /* error code flag : default is 3 ( W/R=1, P=1): write, present */
    case 2: /* error code flag : (W/R=1, P=0): write, not present */
        if (!(vma->vm_flags & VM_WRITE)) {
c0104424:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104427:	8b 40 0c             	mov    0xc(%eax),%eax
c010442a:	83 e0 02             	and    $0x2,%eax
c010442d:	85 c0                	test   %eax,%eax
c010442f:	75 4c                	jne    c010447d <do_pgfault+0xbc>
            cprintf("do_pgfault failed: error code flag = write AND not present, but the addr's vma cannot write\n");
c0104431:	83 ec 0c             	sub    $0xc,%esp
c0104434:	68 60 c5 10 c0       	push   $0xc010c560
c0104439:	e8 59 be ff ff       	call   c0100297 <cprintf>
c010443e:	83 c4 10             	add    $0x10,%esp
            goto failed;
c0104441:	e9 83 01 00 00       	jmp    c01045c9 <do_pgfault+0x208>
        }
        break;
    case 1: /* error code flag : (W/R=0, P=1): read, present */
        cprintf("do_pgfault failed: error code flag = read AND present\n");
c0104446:	83 ec 0c             	sub    $0xc,%esp
c0104449:	68 c0 c5 10 c0       	push   $0xc010c5c0
c010444e:	e8 44 be ff ff       	call   c0100297 <cprintf>
c0104453:	83 c4 10             	add    $0x10,%esp
        goto failed;
c0104456:	e9 6e 01 00 00       	jmp    c01045c9 <do_pgfault+0x208>
    case 0: /* error code flag : (W/R=0, P=0): read, not present */
        if (!(vma->vm_flags & (VM_READ | VM_EXEC))) {
c010445b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010445e:	8b 40 0c             	mov    0xc(%eax),%eax
c0104461:	83 e0 05             	and    $0x5,%eax
c0104464:	85 c0                	test   %eax,%eax
c0104466:	75 16                	jne    c010447e <do_pgfault+0xbd>
            cprintf("do_pgfault failed: error code flag = read AND not present, but the addr's vma cannot read or exec\n");
c0104468:	83 ec 0c             	sub    $0xc,%esp
c010446b:	68 f8 c5 10 c0       	push   $0xc010c5f8
c0104470:	e8 22 be ff ff       	call   c0100297 <cprintf>
c0104475:	83 c4 10             	add    $0x10,%esp
            goto failed;
c0104478:	e9 4c 01 00 00       	jmp    c01045c9 <do_pgfault+0x208>
    case 2: /* error code flag : (W/R=1, P=0): write, not present */
        if (!(vma->vm_flags & VM_WRITE)) {
            cprintf("do_pgfault failed: error code flag = write AND not present, but the addr's vma cannot write\n");
            goto failed;
        }
        break;
c010447d:	90                   	nop
     *    (write an non_existed addr && addr is writable) OR
     *    (read  an non_existed addr && addr is readable)
     * THEN
     *    continue process
     */
    uint32_t perm = PTE_U;
c010447e:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
    if (vma->vm_flags & VM_WRITE) {
c0104485:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104488:	8b 40 0c             	mov    0xc(%eax),%eax
c010448b:	83 e0 02             	and    $0x2,%eax
c010448e:	85 c0                	test   %eax,%eax
c0104490:	74 04                	je     c0104496 <do_pgfault+0xd5>
        perm |= PTE_W;
c0104492:	83 4d f0 02          	orl    $0x2,-0x10(%ebp)
    }
    addr = ROUNDDOWN(addr, PGSIZE);
c0104496:	8b 45 10             	mov    0x10(%ebp),%eax
c0104499:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010449c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010449f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01044a4:	89 45 10             	mov    %eax,0x10(%ebp)

    ret = -E_NO_MEM;
c01044a7:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    pte_t *ptep=NULL;
c01044ae:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    *   mm->pgdir : the PDT of these vma
    *
    */
   /*LAB3 EXERCISE 1: YOUR CODE*/
    //(1) try to find a pte, if pte's PT(Page Table) isn't existed, then create a PT.
    ptep = get_pte(mm->pgdir, addr, 1);
c01044b5:	8b 45 08             	mov    0x8(%ebp),%eax
c01044b8:	8b 40 0c             	mov    0xc(%eax),%eax
c01044bb:	83 ec 04             	sub    $0x4,%esp
c01044be:	6a 01                	push   $0x1
c01044c0:	ff 75 10             	pushl  0x10(%ebp)
c01044c3:	50                   	push   %eax
c01044c4:	e8 7b 32 00 00       	call   c0107744 <get_pte>
c01044c9:	83 c4 10             	add    $0x10,%esp
c01044cc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(ptep != NULL);
c01044cf:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c01044d3:	75 19                	jne    c01044ee <do_pgfault+0x12d>
c01044d5:	68 5b c6 10 c0       	push   $0xc010c65b
c01044da:	68 5b c2 10 c0       	push   $0xc010c25b
c01044df:	68 c9 01 00 00       	push   $0x1c9
c01044e4:	68 70 c2 10 c0       	push   $0xc010c270
c01044e9:	e8 0f bf ff ff       	call   c01003fd <__panic>
    //(2) if the phy addr isn't exist, then alloc a page & map the phy addr with logical addr
    if (*ptep == 0) {
c01044ee:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01044f1:	8b 00                	mov    (%eax),%eax
c01044f3:	85 c0                	test   %eax,%eax
c01044f5:	75 39                	jne    c0104530 <do_pgfault+0x16f>
        assert(pgdir_alloc_page(mm->pgdir, addr, perm) != NULL);
c01044f7:	8b 45 08             	mov    0x8(%ebp),%eax
c01044fa:	8b 40 0c             	mov    0xc(%eax),%eax
c01044fd:	83 ec 04             	sub    $0x4,%esp
c0104500:	ff 75 f0             	pushl  -0x10(%ebp)
c0104503:	ff 75 10             	pushl  0x10(%ebp)
c0104506:	50                   	push   %eax
c0104507:	e8 22 39 00 00       	call   c0107e2e <pgdir_alloc_page>
c010450c:	83 c4 10             	add    $0x10,%esp
c010450f:	85 c0                	test   %eax,%eax
c0104511:	0f 85 ab 00 00 00    	jne    c01045c2 <do_pgfault+0x201>
c0104517:	68 68 c6 10 c0       	push   $0xc010c668
c010451c:	68 5b c2 10 c0       	push   $0xc010c25b
c0104521:	68 cc 01 00 00       	push   $0x1cc
c0104526:	68 70 c2 10 c0       	push   $0xc010c270
c010452b:	e8 cd be ff ff       	call   c01003fd <__panic>
    *    swap_in(mm, addr, &page) : alloc a memory page, then according to the swap entry in PTE for addr,
    *                               find the addr of disk page, read the content of disk page into this memroy page
    *    page_insert ： build the map of phy addr of an Page with the linear addr la
    *    swap_map_swappable ： set the page swappable
    */
        if(swap_init_ok) {
c0104530:	a1 6c 0f 1b c0       	mov    0xc01b0f6c,%eax
c0104535:	85 c0                	test   %eax,%eax
c0104537:	74 71                	je     c01045aa <do_pgfault+0x1e9>
            struct Page *page=NULL;
c0104539:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
            //(1）According to the mm AND addr, try to load the content of right disk page
            //    into the memory which page managed.
            assert(swap_in(mm, addr, &page) == 0);
c0104540:	83 ec 04             	sub    $0x4,%esp
c0104543:	8d 45 e0             	lea    -0x20(%ebp),%eax
c0104546:	50                   	push   %eax
c0104547:	ff 75 10             	pushl  0x10(%ebp)
c010454a:	ff 75 08             	pushl  0x8(%ebp)
c010454d:	e8 9e 10 00 00       	call   c01055f0 <swap_in>
c0104552:	83 c4 10             	add    $0x10,%esp
c0104555:	85 c0                	test   %eax,%eax
c0104557:	74 19                	je     c0104572 <do_pgfault+0x1b1>
c0104559:	68 98 c6 10 c0       	push   $0xc010c698
c010455e:	68 5b c2 10 c0       	push   $0xc010c25b
c0104563:	68 de 01 00 00       	push   $0x1de
c0104568:	68 70 c2 10 c0       	push   $0xc010c270
c010456d:	e8 8b be ff ff       	call   c01003fd <__panic>
            page->pra_vaddr = addr;
c0104572:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104575:	8b 55 10             	mov    0x10(%ebp),%edx
c0104578:	89 50 1c             	mov    %edx,0x1c(%eax)
            //(2) According to the mm, addr AND page, setup the map of phy addr <---> logical addr
            page_insert(mm->pgdir, page, addr, perm);
c010457b:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010457e:	8b 45 08             	mov    0x8(%ebp),%eax
c0104581:	8b 40 0c             	mov    0xc(%eax),%eax
c0104584:	ff 75 f0             	pushl  -0x10(%ebp)
c0104587:	ff 75 10             	pushl  0x10(%ebp)
c010458a:	52                   	push   %edx
c010458b:	50                   	push   %eax
c010458c:	e8 94 37 00 00       	call   c0107d25 <page_insert>
c0104591:	83 c4 10             	add    $0x10,%esp
            //(3) make the page swappable.
            swap_map_swappable(mm, addr, page, 1);
c0104594:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104597:	6a 01                	push   $0x1
c0104599:	50                   	push   %eax
c010459a:	ff 75 10             	pushl  0x10(%ebp)
c010459d:	ff 75 08             	pushl  0x8(%ebp)
c01045a0:	e8 bb 0e 00 00       	call   c0105460 <swap_map_swappable>
c01045a5:	83 c4 10             	add    $0x10,%esp
c01045a8:	eb 18                	jmp    c01045c2 <do_pgfault+0x201>
        }
        else {
            cprintf("no swap_init_ok but ptep is %x, failed\n",*ptep);
c01045aa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01045ad:	8b 00                	mov    (%eax),%eax
c01045af:	83 ec 08             	sub    $0x8,%esp
c01045b2:	50                   	push   %eax
c01045b3:	68 b8 c6 10 c0       	push   $0xc010c6b8
c01045b8:	e8 da bc ff ff       	call   c0100297 <cprintf>
c01045bd:	83 c4 10             	add    $0x10,%esp
            goto failed;
c01045c0:	eb 07                	jmp    c01045c9 <do_pgfault+0x208>
            cprintf("no swap_init_ok but ptep is %x, failed\n",*ptep);
            goto failed;
        }
#endif
   }
   ret = 0;
c01045c2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
failed:
    return ret;
c01045c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01045cc:	c9                   	leave  
c01045cd:	c3                   	ret    

c01045ce <user_mem_check>:

bool
user_mem_check(struct mm_struct *mm, uintptr_t addr, size_t len, bool write) {
c01045ce:	55                   	push   %ebp
c01045cf:	89 e5                	mov    %esp,%ebp
c01045d1:	83 ec 10             	sub    $0x10,%esp
    if (mm != NULL) {
c01045d4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01045d8:	0f 84 dc 00 00 00    	je     c01046ba <user_mem_check+0xec>
        if (!USER_ACCESS(addr, addr + len)) {
c01045de:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c01045e5:	76 1c                	jbe    c0104603 <user_mem_check+0x35>
c01045e7:	8b 55 0c             	mov    0xc(%ebp),%edx
c01045ea:	8b 45 10             	mov    0x10(%ebp),%eax
c01045ed:	01 d0                	add    %edx,%eax
c01045ef:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01045f2:	76 0f                	jbe    c0104603 <user_mem_check+0x35>
c01045f4:	8b 55 0c             	mov    0xc(%ebp),%edx
c01045f7:	8b 45 10             	mov    0x10(%ebp),%eax
c01045fa:	01 d0                	add    %edx,%eax
c01045fc:	3d 00 00 00 b0       	cmp    $0xb0000000,%eax
c0104601:	76 0a                	jbe    c010460d <user_mem_check+0x3f>
            return 0;
c0104603:	b8 00 00 00 00       	mov    $0x0,%eax
c0104608:	e9 df 00 00 00       	jmp    c01046ec <user_mem_check+0x11e>
        }
        struct vma_struct *vma;
        uintptr_t start = addr, end = addr + len;
c010460d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104610:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0104613:	8b 55 0c             	mov    0xc(%ebp),%edx
c0104616:	8b 45 10             	mov    0x10(%ebp),%eax
c0104619:	01 d0                	add    %edx,%eax
c010461b:	89 45 f8             	mov    %eax,-0x8(%ebp)
        while (start < end) {
c010461e:	e9 84 00 00 00       	jmp    c01046a7 <user_mem_check+0xd9>
            if ((vma = find_vma(mm, start)) == NULL || start < vma->vm_start) {
c0104623:	ff 75 fc             	pushl  -0x4(%ebp)
c0104626:	ff 75 08             	pushl  0x8(%ebp)
c0104629:	e8 31 f1 ff ff       	call   c010375f <find_vma>
c010462e:	83 c4 08             	add    $0x8,%esp
c0104631:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104634:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104638:	74 0b                	je     c0104645 <user_mem_check+0x77>
c010463a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010463d:	8b 40 04             	mov    0x4(%eax),%eax
c0104640:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0104643:	76 0a                	jbe    c010464f <user_mem_check+0x81>
                return 0;
c0104645:	b8 00 00 00 00       	mov    $0x0,%eax
c010464a:	e9 9d 00 00 00       	jmp    c01046ec <user_mem_check+0x11e>
            }
            if (!(vma->vm_flags & ((write) ? VM_WRITE : VM_READ))) {
c010464f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104652:	8b 40 0c             	mov    0xc(%eax),%eax
c0104655:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0104659:	74 07                	je     c0104662 <user_mem_check+0x94>
c010465b:	ba 02 00 00 00       	mov    $0x2,%edx
c0104660:	eb 05                	jmp    c0104667 <user_mem_check+0x99>
c0104662:	ba 01 00 00 00       	mov    $0x1,%edx
c0104667:	21 d0                	and    %edx,%eax
c0104669:	85 c0                	test   %eax,%eax
c010466b:	75 07                	jne    c0104674 <user_mem_check+0xa6>
                return 0;
c010466d:	b8 00 00 00 00       	mov    $0x0,%eax
c0104672:	eb 78                	jmp    c01046ec <user_mem_check+0x11e>
            }
            if (write && (vma->vm_flags & VM_STACK)) {
c0104674:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0104678:	74 24                	je     c010469e <user_mem_check+0xd0>
c010467a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010467d:	8b 40 0c             	mov    0xc(%eax),%eax
c0104680:	83 e0 08             	and    $0x8,%eax
c0104683:	85 c0                	test   %eax,%eax
c0104685:	74 17                	je     c010469e <user_mem_check+0xd0>
                if (start < vma->vm_start + PGSIZE) { //check stack start & size
c0104687:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010468a:	8b 40 04             	mov    0x4(%eax),%eax
c010468d:	05 00 10 00 00       	add    $0x1000,%eax
c0104692:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0104695:	76 07                	jbe    c010469e <user_mem_check+0xd0>
                    return 0;
c0104697:	b8 00 00 00 00       	mov    $0x0,%eax
c010469c:	eb 4e                	jmp    c01046ec <user_mem_check+0x11e>
                }
            }
            start = vma->vm_end;
c010469e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01046a1:	8b 40 08             	mov    0x8(%eax),%eax
c01046a4:	89 45 fc             	mov    %eax,-0x4(%ebp)
        if (!USER_ACCESS(addr, addr + len)) {
            return 0;
        }
        struct vma_struct *vma;
        uintptr_t start = addr, end = addr + len;
        while (start < end) {
c01046a7:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01046aa:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c01046ad:	0f 82 70 ff ff ff    	jb     c0104623 <user_mem_check+0x55>
                    return 0;
                }
            }
            start = vma->vm_end;
        }
        return 1;
c01046b3:	b8 01 00 00 00       	mov    $0x1,%eax
c01046b8:	eb 32                	jmp    c01046ec <user_mem_check+0x11e>
    }
    return KERN_ACCESS(addr, addr + len);
c01046ba:	81 7d 0c ff ff ff bf 	cmpl   $0xbfffffff,0xc(%ebp)
c01046c1:	76 23                	jbe    c01046e6 <user_mem_check+0x118>
c01046c3:	8b 55 0c             	mov    0xc(%ebp),%edx
c01046c6:	8b 45 10             	mov    0x10(%ebp),%eax
c01046c9:	01 d0                	add    %edx,%eax
c01046cb:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01046ce:	76 16                	jbe    c01046e6 <user_mem_check+0x118>
c01046d0:	8b 55 0c             	mov    0xc(%ebp),%edx
c01046d3:	8b 45 10             	mov    0x10(%ebp),%eax
c01046d6:	01 d0                	add    %edx,%eax
c01046d8:	3d 00 00 00 f8       	cmp    $0xf8000000,%eax
c01046dd:	77 07                	ja     c01046e6 <user_mem_check+0x118>
c01046df:	b8 01 00 00 00       	mov    $0x1,%eax
c01046e4:	eb 05                	jmp    c01046eb <user_mem_check+0x11d>
c01046e6:	b8 00 00 00 00       	mov    $0x0,%eax
c01046eb:	90                   	nop
}
c01046ec:	c9                   	leave  
c01046ed:	c3                   	ret    

c01046ee <_fifo_init_mm>:
 * (2) _fifo_init_mm: init pra_list_head and let  mm->sm_priv point to the addr of pra_list_head.
 *              Now, From the memory control struct mm_struct, we can access FIFO PRA
 */
static int
_fifo_init_mm(struct mm_struct *mm)
{     
c01046ee:	55                   	push   %ebp
c01046ef:	89 e5                	mov    %esp,%ebp
c01046f1:	83 ec 10             	sub    $0x10,%esp
c01046f4:	c7 45 fc d4 30 1b c0 	movl   $0xc01b30d4,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c01046fb:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01046fe:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0104701:	89 50 04             	mov    %edx,0x4(%eax)
c0104704:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0104707:	8b 50 04             	mov    0x4(%eax),%edx
c010470a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010470d:	89 10                	mov    %edx,(%eax)
     list_init(&pra_list_head);
     mm->sm_priv = &pra_list_head;
c010470f:	8b 45 08             	mov    0x8(%ebp),%eax
c0104712:	c7 40 14 d4 30 1b c0 	movl   $0xc01b30d4,0x14(%eax)
     //cprintf(" mm->sm_priv %x in fifo_init_mm\n",mm->sm_priv);
     return 0;
c0104719:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010471e:	c9                   	leave  
c010471f:	c3                   	ret    

c0104720 <_fifo_map_swappable>:
/*
 * (3)_fifo_map_swappable: According FIFO PRA, we should link the most recent arrival page at the back of pra_list_head qeueue
 */
static int
_fifo_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c0104720:	55                   	push   %ebp
c0104721:	89 e5                	mov    %esp,%ebp
c0104723:	83 ec 48             	sub    $0x48,%esp
    list_entry_t *head=(list_entry_t*) mm->sm_priv;
c0104726:	8b 45 08             	mov    0x8(%ebp),%eax
c0104729:	8b 40 14             	mov    0x14(%eax),%eax
c010472c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    list_entry_t *entry=&(page->pra_page_link);
c010472f:	8b 45 10             	mov    0x10(%ebp),%eax
c0104732:	83 c0 14             	add    $0x14,%eax
c0104735:	89 45 ec             	mov    %eax,-0x14(%ebp)
 
    assert(entry != NULL && head != NULL);
c0104738:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010473c:	74 06                	je     c0104744 <_fifo_map_swappable+0x24>
c010473e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0104742:	75 16                	jne    c010475a <_fifo_map_swappable+0x3a>
c0104744:	68 e0 c6 10 c0       	push   $0xc010c6e0
c0104749:	68 fe c6 10 c0       	push   $0xc010c6fe
c010474e:	6a 32                	push   $0x32
c0104750:	68 13 c7 10 c0       	push   $0xc010c713
c0104755:	e8 a3 bc ff ff       	call   c01003fd <__panic>
    //record the page access situlation
    /*LAB3 EXERCISE 2: YOUR CODE*/ 
    // not swap in but call this func, means failed to swap out 
    if (swap_in == 0) {
c010475a:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010475e:	75 57                	jne    c01047b7 <_fifo_map_swappable+0x97>
        list_entry_t *le_prev = head, *le;
c0104760:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104763:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while ((le = list_next(le_prev)) != head) {
c0104766:	eb 38                	jmp    c01047a0 <_fifo_map_swappable+0x80>
            if (le == entry) {
c0104768:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010476b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010476e:	75 2a                	jne    c010479a <_fifo_map_swappable+0x7a>
c0104770:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104773:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0104776:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104779:	8b 40 04             	mov    0x4(%eax),%eax
c010477c:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010477f:	8b 12                	mov    (%edx),%edx
c0104781:	89 55 d8             	mov    %edx,-0x28(%ebp)
c0104784:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0104787:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010478a:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010478d:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0104790:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0104793:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0104796:	89 10                	mov    %edx,(%eax)
                list_del(le);
                break;
c0104798:	eb 1d                	jmp    c01047b7 <_fifo_map_swappable+0x97>
            }
            le_prev = le;        
c010479a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010479d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01047a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01047a3:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01047a6:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01047a9:	8b 40 04             	mov    0x4(%eax),%eax
    //record the page access situlation
    /*LAB3 EXERCISE 2: YOUR CODE*/ 
    // not swap in but call this func, means failed to swap out 
    if (swap_in == 0) {
        list_entry_t *le_prev = head, *le;
        while ((le = list_next(le_prev)) != head) {
c01047ac:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01047af:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01047b2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01047b5:	75 b1                	jne    c0104768 <_fifo_map_swappable+0x48>
c01047b7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01047ba:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01047bd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01047c0:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c01047c3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01047c6:	8b 00                	mov    (%eax),%eax
c01047c8:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01047cb:	89 55 cc             	mov    %edx,-0x34(%ebp)
c01047ce:	89 45 c8             	mov    %eax,-0x38(%ebp)
c01047d1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01047d4:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c01047d7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01047da:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01047dd:	89 10                	mov    %edx,(%eax)
c01047df:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01047e2:	8b 10                	mov    (%eax),%edx
c01047e4:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01047e7:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c01047ea:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01047ed:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c01047f0:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c01047f3:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01047f6:	8b 55 c8             	mov    -0x38(%ebp),%edx
c01047f9:	89 10                	mov    %edx,(%eax)
            le_prev = le;        
        }
    }
    //(1)link the most recent arrival page at the back of the pra_list_head qeueue.
    list_add_before(head, entry);
    return 0;
c01047fb:	b8 00 00 00 00       	mov    $0x0,%eax
    return 0;
}
c0104800:	c9                   	leave  
c0104801:	c3                   	ret    

c0104802 <_fifo_swap_out_victim>:
 *  (4)_fifo_swap_out_victim: According FIFO PRA, we should unlink the  earliest arrival page in front of pra_list_head qeueue,
 *                            then assign the value of *ptr_page to the addr of this page.
 */
static int
_fifo_swap_out_victim(struct mm_struct *mm, struct Page ** ptr_page, int in_tick)
{
c0104802:	55                   	push   %ebp
c0104803:	89 e5                	mov    %esp,%ebp
c0104805:	83 ec 28             	sub    $0x28,%esp
     list_entry_t *head=(list_entry_t*) mm->sm_priv;
c0104808:	8b 45 08             	mov    0x8(%ebp),%eax
c010480b:	8b 40 14             	mov    0x14(%eax),%eax
c010480e:	89 45 f4             	mov    %eax,-0xc(%ebp)
         assert(head != NULL);
c0104811:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104815:	75 16                	jne    c010482d <_fifo_swap_out_victim+0x2b>
c0104817:	68 27 c7 10 c0       	push   $0xc010c727
c010481c:	68 fe c6 10 c0       	push   $0xc010c6fe
c0104821:	6a 4d                	push   $0x4d
c0104823:	68 13 c7 10 c0       	push   $0xc010c713
c0104828:	e8 d0 bb ff ff       	call   c01003fd <__panic>
     assert(in_tick==0);
c010482d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0104831:	74 16                	je     c0104849 <_fifo_swap_out_victim+0x47>
c0104833:	68 34 c7 10 c0       	push   $0xc010c734
c0104838:	68 fe c6 10 c0       	push   $0xc010c6fe
c010483d:	6a 4e                	push   $0x4e
c010483f:	68 13 c7 10 c0       	push   $0xc010c713
c0104844:	e8 b4 bb ff ff       	call   c01003fd <__panic>
c0104849:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010484c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010484f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104852:	8b 40 04             	mov    0x4(%eax),%eax
     /* Select the victim */
     /*LAB3 EXERCISE 2: YOUR CODE*/ 
    //(1)  unlink the  earliest arrival page in front of pra_list_head qeueue
    list_entry_t *front = list_next(head);
c0104855:	89 45 ec             	mov    %eax,-0x14(%ebp)
    assert(front != head);
c0104858:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010485b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010485e:	75 16                	jne    c0104876 <_fifo_swap_out_victim+0x74>
c0104860:	68 3f c7 10 c0       	push   $0xc010c73f
c0104865:	68 fe c6 10 c0       	push   $0xc010c6fe
c010486a:	6a 53                	push   $0x53
c010486c:	68 13 c7 10 c0       	push   $0xc010c713
c0104871:	e8 87 bb ff ff       	call   c01003fd <__panic>
c0104876:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104879:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010487c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010487f:	8b 40 04             	mov    0x4(%eax),%eax
c0104882:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104885:	8b 12                	mov    (%edx),%edx
c0104887:	89 55 e0             	mov    %edx,-0x20(%ebp)
c010488a:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010488d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104890:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0104893:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0104896:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104899:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010489c:	89 10                	mov    %edx,(%eax)
    list_del(front);
    //(2)  assign the value of *ptr_page to the addr of this page
    struct Page *page = le2page(front, pra_page_link);
c010489e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01048a1:	83 e8 14             	sub    $0x14,%eax
c01048a4:	89 45 e8             	mov    %eax,-0x18(%ebp)
    assert(page != NULL);
c01048a7:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01048ab:	75 16                	jne    c01048c3 <_fifo_swap_out_victim+0xc1>
c01048ad:	68 4d c7 10 c0       	push   $0xc010c74d
c01048b2:	68 fe c6 10 c0       	push   $0xc010c6fe
c01048b7:	6a 57                	push   $0x57
c01048b9:	68 13 c7 10 c0       	push   $0xc010c713
c01048be:	e8 3a bb ff ff       	call   c01003fd <__panic>
    *ptr_page = page;
c01048c3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01048c6:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01048c9:	89 10                	mov    %edx,(%eax)
    return 0;
c01048cb:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01048d0:	c9                   	leave  
c01048d1:	c3                   	ret    

c01048d2 <_fifo_check_swap>:

static int
_fifo_check_swap(void) {
c01048d2:	55                   	push   %ebp
c01048d3:	89 e5                	mov    %esp,%ebp
c01048d5:	83 ec 08             	sub    $0x8,%esp
    cprintf("write Virt Page c in fifo_check_swap\n");
c01048d8:	83 ec 0c             	sub    $0xc,%esp
c01048db:	68 5c c7 10 c0       	push   $0xc010c75c
c01048e0:	e8 b2 b9 ff ff       	call   c0100297 <cprintf>
c01048e5:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x3000 = 0x0c;
c01048e8:	b8 00 30 00 00       	mov    $0x3000,%eax
c01048ed:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==4);
c01048f0:	a1 64 0f 1b c0       	mov    0xc01b0f64,%eax
c01048f5:	83 f8 04             	cmp    $0x4,%eax
c01048f8:	74 16                	je     c0104910 <_fifo_check_swap+0x3e>
c01048fa:	68 82 c7 10 c0       	push   $0xc010c782
c01048ff:	68 fe c6 10 c0       	push   $0xc010c6fe
c0104904:	6a 60                	push   $0x60
c0104906:	68 13 c7 10 c0       	push   $0xc010c713
c010490b:	e8 ed ba ff ff       	call   c01003fd <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c0104910:	83 ec 0c             	sub    $0xc,%esp
c0104913:	68 94 c7 10 c0       	push   $0xc010c794
c0104918:	e8 7a b9 ff ff       	call   c0100297 <cprintf>
c010491d:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x1000 = 0x0a;
c0104920:	b8 00 10 00 00       	mov    $0x1000,%eax
c0104925:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==4);
c0104928:	a1 64 0f 1b c0       	mov    0xc01b0f64,%eax
c010492d:	83 f8 04             	cmp    $0x4,%eax
c0104930:	74 16                	je     c0104948 <_fifo_check_swap+0x76>
c0104932:	68 82 c7 10 c0       	push   $0xc010c782
c0104937:	68 fe c6 10 c0       	push   $0xc010c6fe
c010493c:	6a 63                	push   $0x63
c010493e:	68 13 c7 10 c0       	push   $0xc010c713
c0104943:	e8 b5 ba ff ff       	call   c01003fd <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c0104948:	83 ec 0c             	sub    $0xc,%esp
c010494b:	68 bc c7 10 c0       	push   $0xc010c7bc
c0104950:	e8 42 b9 ff ff       	call   c0100297 <cprintf>
c0104955:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x4000 = 0x0d;
c0104958:	b8 00 40 00 00       	mov    $0x4000,%eax
c010495d:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==4);
c0104960:	a1 64 0f 1b c0       	mov    0xc01b0f64,%eax
c0104965:	83 f8 04             	cmp    $0x4,%eax
c0104968:	74 16                	je     c0104980 <_fifo_check_swap+0xae>
c010496a:	68 82 c7 10 c0       	push   $0xc010c782
c010496f:	68 fe c6 10 c0       	push   $0xc010c6fe
c0104974:	6a 66                	push   $0x66
c0104976:	68 13 c7 10 c0       	push   $0xc010c713
c010497b:	e8 7d ba ff ff       	call   c01003fd <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0104980:	83 ec 0c             	sub    $0xc,%esp
c0104983:	68 e4 c7 10 c0       	push   $0xc010c7e4
c0104988:	e8 0a b9 ff ff       	call   c0100297 <cprintf>
c010498d:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x2000 = 0x0b;
c0104990:	b8 00 20 00 00       	mov    $0x2000,%eax
c0104995:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==4);
c0104998:	a1 64 0f 1b c0       	mov    0xc01b0f64,%eax
c010499d:	83 f8 04             	cmp    $0x4,%eax
c01049a0:	74 16                	je     c01049b8 <_fifo_check_swap+0xe6>
c01049a2:	68 82 c7 10 c0       	push   $0xc010c782
c01049a7:	68 fe c6 10 c0       	push   $0xc010c6fe
c01049ac:	6a 69                	push   $0x69
c01049ae:	68 13 c7 10 c0       	push   $0xc010c713
c01049b3:	e8 45 ba ff ff       	call   c01003fd <__panic>
    cprintf("write Virt Page e in fifo_check_swap\n");
c01049b8:	83 ec 0c             	sub    $0xc,%esp
c01049bb:	68 0c c8 10 c0       	push   $0xc010c80c
c01049c0:	e8 d2 b8 ff ff       	call   c0100297 <cprintf>
c01049c5:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x5000 = 0x0e;
c01049c8:	b8 00 50 00 00       	mov    $0x5000,%eax
c01049cd:	c6 00 0e             	movb   $0xe,(%eax)
    assert(pgfault_num==5);
c01049d0:	a1 64 0f 1b c0       	mov    0xc01b0f64,%eax
c01049d5:	83 f8 05             	cmp    $0x5,%eax
c01049d8:	74 16                	je     c01049f0 <_fifo_check_swap+0x11e>
c01049da:	68 32 c8 10 c0       	push   $0xc010c832
c01049df:	68 fe c6 10 c0       	push   $0xc010c6fe
c01049e4:	6a 6c                	push   $0x6c
c01049e6:	68 13 c7 10 c0       	push   $0xc010c713
c01049eb:	e8 0d ba ff ff       	call   c01003fd <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c01049f0:	83 ec 0c             	sub    $0xc,%esp
c01049f3:	68 e4 c7 10 c0       	push   $0xc010c7e4
c01049f8:	e8 9a b8 ff ff       	call   c0100297 <cprintf>
c01049fd:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x2000 = 0x0b;
c0104a00:	b8 00 20 00 00       	mov    $0x2000,%eax
c0104a05:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==5);
c0104a08:	a1 64 0f 1b c0       	mov    0xc01b0f64,%eax
c0104a0d:	83 f8 05             	cmp    $0x5,%eax
c0104a10:	74 16                	je     c0104a28 <_fifo_check_swap+0x156>
c0104a12:	68 32 c8 10 c0       	push   $0xc010c832
c0104a17:	68 fe c6 10 c0       	push   $0xc010c6fe
c0104a1c:	6a 6f                	push   $0x6f
c0104a1e:	68 13 c7 10 c0       	push   $0xc010c713
c0104a23:	e8 d5 b9 ff ff       	call   c01003fd <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c0104a28:	83 ec 0c             	sub    $0xc,%esp
c0104a2b:	68 94 c7 10 c0       	push   $0xc010c794
c0104a30:	e8 62 b8 ff ff       	call   c0100297 <cprintf>
c0104a35:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x1000 = 0x0a;
c0104a38:	b8 00 10 00 00       	mov    $0x1000,%eax
c0104a3d:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==6);
c0104a40:	a1 64 0f 1b c0       	mov    0xc01b0f64,%eax
c0104a45:	83 f8 06             	cmp    $0x6,%eax
c0104a48:	74 16                	je     c0104a60 <_fifo_check_swap+0x18e>
c0104a4a:	68 41 c8 10 c0       	push   $0xc010c841
c0104a4f:	68 fe c6 10 c0       	push   $0xc010c6fe
c0104a54:	6a 72                	push   $0x72
c0104a56:	68 13 c7 10 c0       	push   $0xc010c713
c0104a5b:	e8 9d b9 ff ff       	call   c01003fd <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0104a60:	83 ec 0c             	sub    $0xc,%esp
c0104a63:	68 e4 c7 10 c0       	push   $0xc010c7e4
c0104a68:	e8 2a b8 ff ff       	call   c0100297 <cprintf>
c0104a6d:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x2000 = 0x0b;
c0104a70:	b8 00 20 00 00       	mov    $0x2000,%eax
c0104a75:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==7);
c0104a78:	a1 64 0f 1b c0       	mov    0xc01b0f64,%eax
c0104a7d:	83 f8 07             	cmp    $0x7,%eax
c0104a80:	74 16                	je     c0104a98 <_fifo_check_swap+0x1c6>
c0104a82:	68 50 c8 10 c0       	push   $0xc010c850
c0104a87:	68 fe c6 10 c0       	push   $0xc010c6fe
c0104a8c:	6a 75                	push   $0x75
c0104a8e:	68 13 c7 10 c0       	push   $0xc010c713
c0104a93:	e8 65 b9 ff ff       	call   c01003fd <__panic>
    cprintf("write Virt Page c in fifo_check_swap\n");
c0104a98:	83 ec 0c             	sub    $0xc,%esp
c0104a9b:	68 5c c7 10 c0       	push   $0xc010c75c
c0104aa0:	e8 f2 b7 ff ff       	call   c0100297 <cprintf>
c0104aa5:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x3000 = 0x0c;
c0104aa8:	b8 00 30 00 00       	mov    $0x3000,%eax
c0104aad:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==8);
c0104ab0:	a1 64 0f 1b c0       	mov    0xc01b0f64,%eax
c0104ab5:	83 f8 08             	cmp    $0x8,%eax
c0104ab8:	74 16                	je     c0104ad0 <_fifo_check_swap+0x1fe>
c0104aba:	68 5f c8 10 c0       	push   $0xc010c85f
c0104abf:	68 fe c6 10 c0       	push   $0xc010c6fe
c0104ac4:	6a 78                	push   $0x78
c0104ac6:	68 13 c7 10 c0       	push   $0xc010c713
c0104acb:	e8 2d b9 ff ff       	call   c01003fd <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c0104ad0:	83 ec 0c             	sub    $0xc,%esp
c0104ad3:	68 bc c7 10 c0       	push   $0xc010c7bc
c0104ad8:	e8 ba b7 ff ff       	call   c0100297 <cprintf>
c0104add:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x4000 = 0x0d;
c0104ae0:	b8 00 40 00 00       	mov    $0x4000,%eax
c0104ae5:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==9);
c0104ae8:	a1 64 0f 1b c0       	mov    0xc01b0f64,%eax
c0104aed:	83 f8 09             	cmp    $0x9,%eax
c0104af0:	74 16                	je     c0104b08 <_fifo_check_swap+0x236>
c0104af2:	68 6e c8 10 c0       	push   $0xc010c86e
c0104af7:	68 fe c6 10 c0       	push   $0xc010c6fe
c0104afc:	6a 7b                	push   $0x7b
c0104afe:	68 13 c7 10 c0       	push   $0xc010c713
c0104b03:	e8 f5 b8 ff ff       	call   c01003fd <__panic>
    cprintf("write Virt Page e in fifo_check_swap\n");
c0104b08:	83 ec 0c             	sub    $0xc,%esp
c0104b0b:	68 0c c8 10 c0       	push   $0xc010c80c
c0104b10:	e8 82 b7 ff ff       	call   c0100297 <cprintf>
c0104b15:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x5000 = 0x0e;
c0104b18:	b8 00 50 00 00       	mov    $0x5000,%eax
c0104b1d:	c6 00 0e             	movb   $0xe,(%eax)
    assert(pgfault_num==10);
c0104b20:	a1 64 0f 1b c0       	mov    0xc01b0f64,%eax
c0104b25:	83 f8 0a             	cmp    $0xa,%eax
c0104b28:	74 16                	je     c0104b40 <_fifo_check_swap+0x26e>
c0104b2a:	68 7d c8 10 c0       	push   $0xc010c87d
c0104b2f:	68 fe c6 10 c0       	push   $0xc010c6fe
c0104b34:	6a 7e                	push   $0x7e
c0104b36:	68 13 c7 10 c0       	push   $0xc010c713
c0104b3b:	e8 bd b8 ff ff       	call   c01003fd <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c0104b40:	83 ec 0c             	sub    $0xc,%esp
c0104b43:	68 94 c7 10 c0       	push   $0xc010c794
c0104b48:	e8 4a b7 ff ff       	call   c0100297 <cprintf>
c0104b4d:	83 c4 10             	add    $0x10,%esp
    assert(*(unsigned char *)0x1000 == 0x0a);
c0104b50:	b8 00 10 00 00       	mov    $0x1000,%eax
c0104b55:	0f b6 00             	movzbl (%eax),%eax
c0104b58:	3c 0a                	cmp    $0xa,%al
c0104b5a:	74 19                	je     c0104b75 <_fifo_check_swap+0x2a3>
c0104b5c:	68 90 c8 10 c0       	push   $0xc010c890
c0104b61:	68 fe c6 10 c0       	push   $0xc010c6fe
c0104b66:	68 80 00 00 00       	push   $0x80
c0104b6b:	68 13 c7 10 c0       	push   $0xc010c713
c0104b70:	e8 88 b8 ff ff       	call   c01003fd <__panic>
    *(unsigned char *)0x1000 = 0x0a;
c0104b75:	b8 00 10 00 00       	mov    $0x1000,%eax
c0104b7a:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==11);
c0104b7d:	a1 64 0f 1b c0       	mov    0xc01b0f64,%eax
c0104b82:	83 f8 0b             	cmp    $0xb,%eax
c0104b85:	74 19                	je     c0104ba0 <_fifo_check_swap+0x2ce>
c0104b87:	68 b1 c8 10 c0       	push   $0xc010c8b1
c0104b8c:	68 fe c6 10 c0       	push   $0xc010c6fe
c0104b91:	68 82 00 00 00       	push   $0x82
c0104b96:	68 13 c7 10 c0       	push   $0xc010c713
c0104b9b:	e8 5d b8 ff ff       	call   c01003fd <__panic>
    return 0;
c0104ba0:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104ba5:	c9                   	leave  
c0104ba6:	c3                   	ret    

c0104ba7 <_fifo_init>:


static int
_fifo_init(void)
{
c0104ba7:	55                   	push   %ebp
c0104ba8:	89 e5                	mov    %esp,%ebp
    return 0;
c0104baa:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104baf:	5d                   	pop    %ebp
c0104bb0:	c3                   	ret    

c0104bb1 <_fifo_set_unswappable>:

static int
_fifo_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c0104bb1:	55                   	push   %ebp
c0104bb2:	89 e5                	mov    %esp,%ebp
    return 0;
c0104bb4:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104bb9:	5d                   	pop    %ebp
c0104bba:	c3                   	ret    

c0104bbb <_fifo_tick_event>:

static int
_fifo_tick_event(struct mm_struct *mm)
{ return 0; }
c0104bbb:	55                   	push   %ebp
c0104bbc:	89 e5                	mov    %esp,%ebp
c0104bbe:	b8 00 00 00 00       	mov    $0x0,%eax
c0104bc3:	5d                   	pop    %ebp
c0104bc4:	c3                   	ret    

c0104bc5 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0104bc5:	55                   	push   %ebp
c0104bc6:	89 e5                	mov    %esp,%ebp
c0104bc8:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0104bcb:	9c                   	pushf  
c0104bcc:	58                   	pop    %eax
c0104bcd:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0104bd0:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0104bd3:	25 00 02 00 00       	and    $0x200,%eax
c0104bd8:	85 c0                	test   %eax,%eax
c0104bda:	74 0c                	je     c0104be8 <__intr_save+0x23>
        intr_disable();
c0104bdc:	e8 db d5 ff ff       	call   c01021bc <intr_disable>
        return 1;
c0104be1:	b8 01 00 00 00       	mov    $0x1,%eax
c0104be6:	eb 05                	jmp    c0104bed <__intr_save+0x28>
    }
    return 0;
c0104be8:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104bed:	c9                   	leave  
c0104bee:	c3                   	ret    

c0104bef <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0104bef:	55                   	push   %ebp
c0104bf0:	89 e5                	mov    %esp,%ebp
c0104bf2:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0104bf5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104bf9:	74 05                	je     c0104c00 <__intr_restore+0x11>
        intr_enable();
c0104bfb:	e8 b5 d5 ff ff       	call   c01021b5 <intr_enable>
    }
}
c0104c00:	90                   	nop
c0104c01:	c9                   	leave  
c0104c02:	c3                   	ret    

c0104c03 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0104c03:	55                   	push   %ebp
c0104c04:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0104c06:	8b 45 08             	mov    0x8(%ebp),%eax
c0104c09:	8b 15 b8 31 1b c0    	mov    0xc01b31b8,%edx
c0104c0f:	29 d0                	sub    %edx,%eax
c0104c11:	c1 f8 05             	sar    $0x5,%eax
}
c0104c14:	5d                   	pop    %ebp
c0104c15:	c3                   	ret    

c0104c16 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0104c16:	55                   	push   %ebp
c0104c17:	89 e5                	mov    %esp,%ebp
    return page2ppn(page) << PGSHIFT;
c0104c19:	ff 75 08             	pushl  0x8(%ebp)
c0104c1c:	e8 e2 ff ff ff       	call   c0104c03 <page2ppn>
c0104c21:	83 c4 04             	add    $0x4,%esp
c0104c24:	c1 e0 0c             	shl    $0xc,%eax
}
c0104c27:	c9                   	leave  
c0104c28:	c3                   	ret    

c0104c29 <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c0104c29:	55                   	push   %ebp
c0104c2a:	89 e5                	mov    %esp,%ebp
c0104c2c:	83 ec 08             	sub    $0x8,%esp
    if (PPN(pa) >= npage) {
c0104c2f:	8b 45 08             	mov    0x8(%ebp),%eax
c0104c32:	c1 e8 0c             	shr    $0xc,%eax
c0104c35:	89 c2                	mov    %eax,%edx
c0104c37:	a1 80 0f 1b c0       	mov    0xc01b0f80,%eax
c0104c3c:	39 c2                	cmp    %eax,%edx
c0104c3e:	72 14                	jb     c0104c54 <pa2page+0x2b>
        panic("pa2page called with invalid pa");
c0104c40:	83 ec 04             	sub    $0x4,%esp
c0104c43:	68 d4 c8 10 c0       	push   $0xc010c8d4
c0104c48:	6a 5e                	push   $0x5e
c0104c4a:	68 f3 c8 10 c0       	push   $0xc010c8f3
c0104c4f:	e8 a9 b7 ff ff       	call   c01003fd <__panic>
    }
    return &pages[PPN(pa)];
c0104c54:	a1 b8 31 1b c0       	mov    0xc01b31b8,%eax
c0104c59:	8b 55 08             	mov    0x8(%ebp),%edx
c0104c5c:	c1 ea 0c             	shr    $0xc,%edx
c0104c5f:	c1 e2 05             	shl    $0x5,%edx
c0104c62:	01 d0                	add    %edx,%eax
}
c0104c64:	c9                   	leave  
c0104c65:	c3                   	ret    

c0104c66 <page2kva>:

static inline void *
page2kva(struct Page *page) {
c0104c66:	55                   	push   %ebp
c0104c67:	89 e5                	mov    %esp,%ebp
c0104c69:	83 ec 18             	sub    $0x18,%esp
    return KADDR(page2pa(page));
c0104c6c:	ff 75 08             	pushl  0x8(%ebp)
c0104c6f:	e8 a2 ff ff ff       	call   c0104c16 <page2pa>
c0104c74:	83 c4 04             	add    $0x4,%esp
c0104c77:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104c7a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c7d:	c1 e8 0c             	shr    $0xc,%eax
c0104c80:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104c83:	a1 80 0f 1b c0       	mov    0xc01b0f80,%eax
c0104c88:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0104c8b:	72 14                	jb     c0104ca1 <page2kva+0x3b>
c0104c8d:	ff 75 f4             	pushl  -0xc(%ebp)
c0104c90:	68 04 c9 10 c0       	push   $0xc010c904
c0104c95:	6a 65                	push   $0x65
c0104c97:	68 f3 c8 10 c0       	push   $0xc010c8f3
c0104c9c:	e8 5c b7 ff ff       	call   c01003fd <__panic>
c0104ca1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ca4:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c0104ca9:	c9                   	leave  
c0104caa:	c3                   	ret    

c0104cab <kva2page>:

static inline struct Page *
kva2page(void *kva) {
c0104cab:	55                   	push   %ebp
c0104cac:	89 e5                	mov    %esp,%ebp
c0104cae:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PADDR(kva));
c0104cb1:	8b 45 08             	mov    0x8(%ebp),%eax
c0104cb4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104cb7:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c0104cbe:	77 14                	ja     c0104cd4 <kva2page+0x29>
c0104cc0:	ff 75 f4             	pushl  -0xc(%ebp)
c0104cc3:	68 28 c9 10 c0       	push   $0xc010c928
c0104cc8:	6a 6a                	push   $0x6a
c0104cca:	68 f3 c8 10 c0       	push   $0xc010c8f3
c0104ccf:	e8 29 b7 ff ff       	call   c01003fd <__panic>
c0104cd4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104cd7:	05 00 00 00 40       	add    $0x40000000,%eax
c0104cdc:	83 ec 0c             	sub    $0xc,%esp
c0104cdf:	50                   	push   %eax
c0104ce0:	e8 44 ff ff ff       	call   c0104c29 <pa2page>
c0104ce5:	83 c4 10             	add    $0x10,%esp
}
c0104ce8:	c9                   	leave  
c0104ce9:	c3                   	ret    

c0104cea <__slob_get_free_pages>:
static slob_t *slobfree = &arena;
static bigblock_t *bigblocks;


static void* __slob_get_free_pages(gfp_t gfp, int order)
{
c0104cea:	55                   	push   %ebp
c0104ceb:	89 e5                	mov    %esp,%ebp
c0104ced:	83 ec 18             	sub    $0x18,%esp
  struct Page * page = alloc_pages(1 << order);
c0104cf0:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104cf3:	ba 01 00 00 00       	mov    $0x1,%edx
c0104cf8:	89 c1                	mov    %eax,%ecx
c0104cfa:	d3 e2                	shl    %cl,%edx
c0104cfc:	89 d0                	mov    %edx,%eax
c0104cfe:	83 ec 0c             	sub    $0xc,%esp
c0104d01:	50                   	push   %eax
c0104d02:	e8 d1 23 00 00       	call   c01070d8 <alloc_pages>
c0104d07:	83 c4 10             	add    $0x10,%esp
c0104d0a:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if(!page)
c0104d0d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104d11:	75 07                	jne    c0104d1a <__slob_get_free_pages+0x30>
    return NULL;
c0104d13:	b8 00 00 00 00       	mov    $0x0,%eax
c0104d18:	eb 0e                	jmp    c0104d28 <__slob_get_free_pages+0x3e>
  return page2kva(page);
c0104d1a:	83 ec 0c             	sub    $0xc,%esp
c0104d1d:	ff 75 f4             	pushl  -0xc(%ebp)
c0104d20:	e8 41 ff ff ff       	call   c0104c66 <page2kva>
c0104d25:	83 c4 10             	add    $0x10,%esp
}
c0104d28:	c9                   	leave  
c0104d29:	c3                   	ret    

c0104d2a <__slob_free_pages>:

#define __slob_get_free_page(gfp) __slob_get_free_pages(gfp, 0)

static inline void __slob_free_pages(unsigned long kva, int order)
{
c0104d2a:	55                   	push   %ebp
c0104d2b:	89 e5                	mov    %esp,%ebp
c0104d2d:	53                   	push   %ebx
c0104d2e:	83 ec 04             	sub    $0x4,%esp
  free_pages(kva2page(kva), 1 << order);
c0104d31:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104d34:	ba 01 00 00 00       	mov    $0x1,%edx
c0104d39:	89 c1                	mov    %eax,%ecx
c0104d3b:	d3 e2                	shl    %cl,%edx
c0104d3d:	89 d0                	mov    %edx,%eax
c0104d3f:	89 c3                	mov    %eax,%ebx
c0104d41:	8b 45 08             	mov    0x8(%ebp),%eax
c0104d44:	83 ec 0c             	sub    $0xc,%esp
c0104d47:	50                   	push   %eax
c0104d48:	e8 5e ff ff ff       	call   c0104cab <kva2page>
c0104d4d:	83 c4 10             	add    $0x10,%esp
c0104d50:	83 ec 08             	sub    $0x8,%esp
c0104d53:	53                   	push   %ebx
c0104d54:	50                   	push   %eax
c0104d55:	e8 ea 23 00 00       	call   c0107144 <free_pages>
c0104d5a:	83 c4 10             	add    $0x10,%esp
}
c0104d5d:	90                   	nop
c0104d5e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0104d61:	c9                   	leave  
c0104d62:	c3                   	ret    

c0104d63 <slob_alloc>:

static void slob_free(void *b, int size);

static void *slob_alloc(size_t size, gfp_t gfp, int align)
{
c0104d63:	55                   	push   %ebp
c0104d64:	89 e5                	mov    %esp,%ebp
c0104d66:	83 ec 28             	sub    $0x28,%esp
  assert( (size + SLOB_UNIT) < PAGE_SIZE );
c0104d69:	8b 45 08             	mov    0x8(%ebp),%eax
c0104d6c:	83 c0 08             	add    $0x8,%eax
c0104d6f:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c0104d74:	76 16                	jbe    c0104d8c <slob_alloc+0x29>
c0104d76:	68 4c c9 10 c0       	push   $0xc010c94c
c0104d7b:	68 6b c9 10 c0       	push   $0xc010c96b
c0104d80:	6a 64                	push   $0x64
c0104d82:	68 80 c9 10 c0       	push   $0xc010c980
c0104d87:	e8 71 b6 ff ff       	call   c01003fd <__panic>

	slob_t *prev, *cur, *aligned = 0;
c0104d8c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	int delta = 0, units = SLOB_UNITS(size);
c0104d93:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c0104d9a:	8b 45 08             	mov    0x8(%ebp),%eax
c0104d9d:	83 c0 07             	add    $0x7,%eax
c0104da0:	c1 e8 03             	shr    $0x3,%eax
c0104da3:	89 45 e0             	mov    %eax,-0x20(%ebp)
	unsigned long flags;

	spin_lock_irqsave(&slob_lock, flags);
c0104da6:	e8 1a fe ff ff       	call   c0104bc5 <__intr_save>
c0104dab:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	prev = slobfree;
c0104dae:	a1 08 ca 12 c0       	mov    0xc012ca08,%eax
c0104db3:	89 45 f4             	mov    %eax,-0xc(%ebp)
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c0104db6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104db9:	8b 40 04             	mov    0x4(%eax),%eax
c0104dbc:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (align) {
c0104dbf:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0104dc3:	74 25                	je     c0104dea <slob_alloc+0x87>
			aligned = (slob_t *)ALIGN((unsigned long)cur, align);
c0104dc5:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104dc8:	8b 45 10             	mov    0x10(%ebp),%eax
c0104dcb:	01 d0                	add    %edx,%eax
c0104dcd:	8d 50 ff             	lea    -0x1(%eax),%edx
c0104dd0:	8b 45 10             	mov    0x10(%ebp),%eax
c0104dd3:	f7 d8                	neg    %eax
c0104dd5:	21 d0                	and    %edx,%eax
c0104dd7:	89 45 ec             	mov    %eax,-0x14(%ebp)
			delta = aligned - cur;
c0104dda:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0104ddd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104de0:	29 c2                	sub    %eax,%edx
c0104de2:	89 d0                	mov    %edx,%eax
c0104de4:	c1 f8 03             	sar    $0x3,%eax
c0104de7:	89 45 e8             	mov    %eax,-0x18(%ebp)
		}
		if (cur->units >= units + delta) { /* room enough? */
c0104dea:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104ded:	8b 00                	mov    (%eax),%eax
c0104def:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c0104df2:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0104df5:	01 ca                	add    %ecx,%edx
c0104df7:	39 d0                	cmp    %edx,%eax
c0104df9:	0f 8c b1 00 00 00    	jl     c0104eb0 <slob_alloc+0x14d>
			if (delta) { /* need to fragment head to align? */
c0104dff:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0104e03:	74 38                	je     c0104e3d <slob_alloc+0xda>
				aligned->units = cur->units - delta;
c0104e05:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104e08:	8b 00                	mov    (%eax),%eax
c0104e0a:	2b 45 e8             	sub    -0x18(%ebp),%eax
c0104e0d:	89 c2                	mov    %eax,%edx
c0104e0f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104e12:	89 10                	mov    %edx,(%eax)
				aligned->next = cur->next;
c0104e14:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104e17:	8b 50 04             	mov    0x4(%eax),%edx
c0104e1a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104e1d:	89 50 04             	mov    %edx,0x4(%eax)
				cur->next = aligned;
c0104e20:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104e23:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0104e26:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = delta;
c0104e29:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104e2c:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0104e2f:	89 10                	mov    %edx,(%eax)
				prev = cur;
c0104e31:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104e34:	89 45 f4             	mov    %eax,-0xc(%ebp)
				cur = aligned;
c0104e37:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104e3a:	89 45 f0             	mov    %eax,-0x10(%ebp)
			}

			if (cur->units == units) /* exact fit? */
c0104e3d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104e40:	8b 00                	mov    (%eax),%eax
c0104e42:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0104e45:	75 0e                	jne    c0104e55 <slob_alloc+0xf2>
				prev->next = cur->next; /* unlink */
c0104e47:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104e4a:	8b 50 04             	mov    0x4(%eax),%edx
c0104e4d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e50:	89 50 04             	mov    %edx,0x4(%eax)
c0104e53:	eb 3c                	jmp    c0104e91 <slob_alloc+0x12e>
			else { /* fragment */
				prev->next = cur + units;
c0104e55:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104e58:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0104e5f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104e62:	01 c2                	add    %eax,%edx
c0104e64:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e67:	89 50 04             	mov    %edx,0x4(%eax)
				prev->next->units = cur->units - units;
c0104e6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e6d:	8b 40 04             	mov    0x4(%eax),%eax
c0104e70:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104e73:	8b 12                	mov    (%edx),%edx
c0104e75:	2b 55 e0             	sub    -0x20(%ebp),%edx
c0104e78:	89 10                	mov    %edx,(%eax)
				prev->next->next = cur->next;
c0104e7a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e7d:	8b 40 04             	mov    0x4(%eax),%eax
c0104e80:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104e83:	8b 52 04             	mov    0x4(%edx),%edx
c0104e86:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = units;
c0104e89:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104e8c:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0104e8f:	89 10                	mov    %edx,(%eax)
			}

			slobfree = prev;
c0104e91:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e94:	a3 08 ca 12 c0       	mov    %eax,0xc012ca08
			spin_unlock_irqrestore(&slob_lock, flags);
c0104e99:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104e9c:	83 ec 0c             	sub    $0xc,%esp
c0104e9f:	50                   	push   %eax
c0104ea0:	e8 4a fd ff ff       	call   c0104bef <__intr_restore>
c0104ea5:	83 c4 10             	add    $0x10,%esp
			return cur;
c0104ea8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104eab:	e9 80 00 00 00       	jmp    c0104f30 <slob_alloc+0x1cd>
		}
		if (cur == slobfree) {
c0104eb0:	a1 08 ca 12 c0       	mov    0xc012ca08,%eax
c0104eb5:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0104eb8:	75 62                	jne    c0104f1c <slob_alloc+0x1b9>
			spin_unlock_irqrestore(&slob_lock, flags);
c0104eba:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104ebd:	83 ec 0c             	sub    $0xc,%esp
c0104ec0:	50                   	push   %eax
c0104ec1:	e8 29 fd ff ff       	call   c0104bef <__intr_restore>
c0104ec6:	83 c4 10             	add    $0x10,%esp

			if (size == PAGE_SIZE) /* trying to shrink arena? */
c0104ec9:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c0104ed0:	75 07                	jne    c0104ed9 <slob_alloc+0x176>
				return 0;
c0104ed2:	b8 00 00 00 00       	mov    $0x0,%eax
c0104ed7:	eb 57                	jmp    c0104f30 <slob_alloc+0x1cd>

			cur = (slob_t *)__slob_get_free_page(gfp);
c0104ed9:	83 ec 08             	sub    $0x8,%esp
c0104edc:	6a 00                	push   $0x0
c0104ede:	ff 75 0c             	pushl  0xc(%ebp)
c0104ee1:	e8 04 fe ff ff       	call   c0104cea <__slob_get_free_pages>
c0104ee6:	83 c4 10             	add    $0x10,%esp
c0104ee9:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (!cur)
c0104eec:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0104ef0:	75 07                	jne    c0104ef9 <slob_alloc+0x196>
				return 0;
c0104ef2:	b8 00 00 00 00       	mov    $0x0,%eax
c0104ef7:	eb 37                	jmp    c0104f30 <slob_alloc+0x1cd>

			slob_free(cur, PAGE_SIZE);
c0104ef9:	83 ec 08             	sub    $0x8,%esp
c0104efc:	68 00 10 00 00       	push   $0x1000
c0104f01:	ff 75 f0             	pushl  -0x10(%ebp)
c0104f04:	e8 29 00 00 00       	call   c0104f32 <slob_free>
c0104f09:	83 c4 10             	add    $0x10,%esp
			spin_lock_irqsave(&slob_lock, flags);
c0104f0c:	e8 b4 fc ff ff       	call   c0104bc5 <__intr_save>
c0104f11:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			cur = slobfree;
c0104f14:	a1 08 ca 12 c0       	mov    0xc012ca08,%eax
c0104f19:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int delta = 0, units = SLOB_UNITS(size);
	unsigned long flags;

	spin_lock_irqsave(&slob_lock, flags);
	prev = slobfree;
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c0104f1c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104f1f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104f22:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104f25:	8b 40 04             	mov    0x4(%eax),%eax
c0104f28:	89 45 f0             	mov    %eax,-0x10(%ebp)

			slob_free(cur, PAGE_SIZE);
			spin_lock_irqsave(&slob_lock, flags);
			cur = slobfree;
		}
	}
c0104f2b:	e9 8f fe ff ff       	jmp    c0104dbf <slob_alloc+0x5c>
}
c0104f30:	c9                   	leave  
c0104f31:	c3                   	ret    

c0104f32 <slob_free>:

static void slob_free(void *block, int size)
{
c0104f32:	55                   	push   %ebp
c0104f33:	89 e5                	mov    %esp,%ebp
c0104f35:	83 ec 18             	sub    $0x18,%esp
	slob_t *cur, *b = (slob_t *)block;
c0104f38:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f3b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c0104f3e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104f42:	0f 84 05 01 00 00    	je     c010504d <slob_free+0x11b>
		return;

	if (size)
c0104f48:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0104f4c:	74 10                	je     c0104f5e <slob_free+0x2c>
		b->units = SLOB_UNITS(size);
c0104f4e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104f51:	83 c0 07             	add    $0x7,%eax
c0104f54:	c1 e8 03             	shr    $0x3,%eax
c0104f57:	89 c2                	mov    %eax,%edx
c0104f59:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104f5c:	89 10                	mov    %edx,(%eax)

	/* Find reinsertion point */
	spin_lock_irqsave(&slob_lock, flags);
c0104f5e:	e8 62 fc ff ff       	call   c0104bc5 <__intr_save>
c0104f63:	89 45 ec             	mov    %eax,-0x14(%ebp)
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c0104f66:	a1 08 ca 12 c0       	mov    0xc012ca08,%eax
c0104f6b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104f6e:	eb 27                	jmp    c0104f97 <slob_free+0x65>
		if (cur >= cur->next && (b > cur || b < cur->next))
c0104f70:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104f73:	8b 40 04             	mov    0x4(%eax),%eax
c0104f76:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104f79:	77 13                	ja     c0104f8e <slob_free+0x5c>
c0104f7b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104f7e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104f81:	77 27                	ja     c0104faa <slob_free+0x78>
c0104f83:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104f86:	8b 40 04             	mov    0x4(%eax),%eax
c0104f89:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104f8c:	77 1c                	ja     c0104faa <slob_free+0x78>
	if (size)
		b->units = SLOB_UNITS(size);

	/* Find reinsertion point */
	spin_lock_irqsave(&slob_lock, flags);
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c0104f8e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104f91:	8b 40 04             	mov    0x4(%eax),%eax
c0104f94:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104f97:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104f9a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104f9d:	76 d1                	jbe    c0104f70 <slob_free+0x3e>
c0104f9f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104fa2:	8b 40 04             	mov    0x4(%eax),%eax
c0104fa5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104fa8:	76 c6                	jbe    c0104f70 <slob_free+0x3e>
		if (cur >= cur->next && (b > cur || b < cur->next))
			break;

	if (b + b->units == cur->next) {
c0104faa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104fad:	8b 00                	mov    (%eax),%eax
c0104faf:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0104fb6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104fb9:	01 c2                	add    %eax,%edx
c0104fbb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104fbe:	8b 40 04             	mov    0x4(%eax),%eax
c0104fc1:	39 c2                	cmp    %eax,%edx
c0104fc3:	75 25                	jne    c0104fea <slob_free+0xb8>
		b->units += cur->next->units;
c0104fc5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104fc8:	8b 10                	mov    (%eax),%edx
c0104fca:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104fcd:	8b 40 04             	mov    0x4(%eax),%eax
c0104fd0:	8b 00                	mov    (%eax),%eax
c0104fd2:	01 c2                	add    %eax,%edx
c0104fd4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104fd7:	89 10                	mov    %edx,(%eax)
		b->next = cur->next->next;
c0104fd9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104fdc:	8b 40 04             	mov    0x4(%eax),%eax
c0104fdf:	8b 50 04             	mov    0x4(%eax),%edx
c0104fe2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104fe5:	89 50 04             	mov    %edx,0x4(%eax)
c0104fe8:	eb 0c                	jmp    c0104ff6 <slob_free+0xc4>
	} else
		b->next = cur->next;
c0104fea:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104fed:	8b 50 04             	mov    0x4(%eax),%edx
c0104ff0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104ff3:	89 50 04             	mov    %edx,0x4(%eax)

	if (cur + cur->units == b) {
c0104ff6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ff9:	8b 00                	mov    (%eax),%eax
c0104ffb:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0105002:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105005:	01 d0                	add    %edx,%eax
c0105007:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010500a:	75 1f                	jne    c010502b <slob_free+0xf9>
		cur->units += b->units;
c010500c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010500f:	8b 10                	mov    (%eax),%edx
c0105011:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105014:	8b 00                	mov    (%eax),%eax
c0105016:	01 c2                	add    %eax,%edx
c0105018:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010501b:	89 10                	mov    %edx,(%eax)
		cur->next = b->next;
c010501d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105020:	8b 50 04             	mov    0x4(%eax),%edx
c0105023:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105026:	89 50 04             	mov    %edx,0x4(%eax)
c0105029:	eb 09                	jmp    c0105034 <slob_free+0x102>
	} else
		cur->next = b;
c010502b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010502e:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0105031:	89 50 04             	mov    %edx,0x4(%eax)

	slobfree = cur;
c0105034:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105037:	a3 08 ca 12 c0       	mov    %eax,0xc012ca08

	spin_unlock_irqrestore(&slob_lock, flags);
c010503c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010503f:	83 ec 0c             	sub    $0xc,%esp
c0105042:	50                   	push   %eax
c0105043:	e8 a7 fb ff ff       	call   c0104bef <__intr_restore>
c0105048:	83 c4 10             	add    $0x10,%esp
c010504b:	eb 01                	jmp    c010504e <slob_free+0x11c>
{
	slob_t *cur, *b = (slob_t *)block;
	unsigned long flags;

	if (!block)
		return;
c010504d:	90                   	nop
		cur->next = b;

	slobfree = cur;

	spin_unlock_irqrestore(&slob_lock, flags);
}
c010504e:	c9                   	leave  
c010504f:	c3                   	ret    

c0105050 <slob_init>:



void
slob_init(void) {
c0105050:	55                   	push   %ebp
c0105051:	89 e5                	mov    %esp,%ebp
c0105053:	83 ec 08             	sub    $0x8,%esp
  cprintf("use SLOB allocator\n");
c0105056:	83 ec 0c             	sub    $0xc,%esp
c0105059:	68 92 c9 10 c0       	push   $0xc010c992
c010505e:	e8 34 b2 ff ff       	call   c0100297 <cprintf>
c0105063:	83 c4 10             	add    $0x10,%esp
}
c0105066:	90                   	nop
c0105067:	c9                   	leave  
c0105068:	c3                   	ret    

c0105069 <kmalloc_init>:

inline void 
kmalloc_init(void) {
c0105069:	55                   	push   %ebp
c010506a:	89 e5                	mov    %esp,%ebp
c010506c:	83 ec 08             	sub    $0x8,%esp
    slob_init();
c010506f:	e8 dc ff ff ff       	call   c0105050 <slob_init>
    cprintf("kmalloc_init() succeeded!\n");
c0105074:	83 ec 0c             	sub    $0xc,%esp
c0105077:	68 a6 c9 10 c0       	push   $0xc010c9a6
c010507c:	e8 16 b2 ff ff       	call   c0100297 <cprintf>
c0105081:	83 c4 10             	add    $0x10,%esp
}
c0105084:	90                   	nop
c0105085:	c9                   	leave  
c0105086:	c3                   	ret    

c0105087 <slob_allocated>:

size_t
slob_allocated(void) {
c0105087:	55                   	push   %ebp
c0105088:	89 e5                	mov    %esp,%ebp
  return 0;
c010508a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010508f:	5d                   	pop    %ebp
c0105090:	c3                   	ret    

c0105091 <kallocated>:

size_t
kallocated(void) {
c0105091:	55                   	push   %ebp
c0105092:	89 e5                	mov    %esp,%ebp
   return slob_allocated();
c0105094:	e8 ee ff ff ff       	call   c0105087 <slob_allocated>
}
c0105099:	5d                   	pop    %ebp
c010509a:	c3                   	ret    

c010509b <find_order>:

static int find_order(int size)
{
c010509b:	55                   	push   %ebp
c010509c:	89 e5                	mov    %esp,%ebp
c010509e:	83 ec 10             	sub    $0x10,%esp
	int order = 0;
c01050a1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for ( ; size > 4096 ; size >>=1)
c01050a8:	eb 07                	jmp    c01050b1 <find_order+0x16>
		order++;
c01050aa:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
}

static int find_order(int size)
{
	int order = 0;
	for ( ; size > 4096 ; size >>=1)
c01050ae:	d1 7d 08             	sarl   0x8(%ebp)
c01050b1:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c01050b8:	7f f0                	jg     c01050aa <find_order+0xf>
		order++;
	return order;
c01050ba:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c01050bd:	c9                   	leave  
c01050be:	c3                   	ret    

c01050bf <__kmalloc>:

static void *__kmalloc(size_t size, gfp_t gfp)
{
c01050bf:	55                   	push   %ebp
c01050c0:	89 e5                	mov    %esp,%ebp
c01050c2:	83 ec 18             	sub    $0x18,%esp
	slob_t *m;
	bigblock_t *bb;
	unsigned long flags;

	if (size < PAGE_SIZE - SLOB_UNIT) {
c01050c5:	81 7d 08 f7 0f 00 00 	cmpl   $0xff7,0x8(%ebp)
c01050cc:	77 35                	ja     c0105103 <__kmalloc+0x44>
		m = slob_alloc(size + SLOB_UNIT, gfp, 0);
c01050ce:	8b 45 08             	mov    0x8(%ebp),%eax
c01050d1:	83 c0 08             	add    $0x8,%eax
c01050d4:	83 ec 04             	sub    $0x4,%esp
c01050d7:	6a 00                	push   $0x0
c01050d9:	ff 75 0c             	pushl  0xc(%ebp)
c01050dc:	50                   	push   %eax
c01050dd:	e8 81 fc ff ff       	call   c0104d63 <slob_alloc>
c01050e2:	83 c4 10             	add    $0x10,%esp
c01050e5:	89 45 f4             	mov    %eax,-0xc(%ebp)
		return m ? (void *)(m + 1) : 0;
c01050e8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01050ec:	74 0b                	je     c01050f9 <__kmalloc+0x3a>
c01050ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01050f1:	83 c0 08             	add    $0x8,%eax
c01050f4:	e9 b3 00 00 00       	jmp    c01051ac <__kmalloc+0xed>
c01050f9:	b8 00 00 00 00       	mov    $0x0,%eax
c01050fe:	e9 a9 00 00 00       	jmp    c01051ac <__kmalloc+0xed>
	}

	bb = slob_alloc(sizeof(bigblock_t), gfp, 0);
c0105103:	83 ec 04             	sub    $0x4,%esp
c0105106:	6a 00                	push   $0x0
c0105108:	ff 75 0c             	pushl  0xc(%ebp)
c010510b:	6a 0c                	push   $0xc
c010510d:	e8 51 fc ff ff       	call   c0104d63 <slob_alloc>
c0105112:	83 c4 10             	add    $0x10,%esp
c0105115:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (!bb)
c0105118:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010511c:	75 0a                	jne    c0105128 <__kmalloc+0x69>
		return 0;
c010511e:	b8 00 00 00 00       	mov    $0x0,%eax
c0105123:	e9 84 00 00 00       	jmp    c01051ac <__kmalloc+0xed>

	bb->order = find_order(size);
c0105128:	8b 45 08             	mov    0x8(%ebp),%eax
c010512b:	83 ec 0c             	sub    $0xc,%esp
c010512e:	50                   	push   %eax
c010512f:	e8 67 ff ff ff       	call   c010509b <find_order>
c0105134:	83 c4 10             	add    $0x10,%esp
c0105137:	89 c2                	mov    %eax,%edx
c0105139:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010513c:	89 10                	mov    %edx,(%eax)
	bb->pages = (void *)__slob_get_free_pages(gfp, bb->order);
c010513e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105141:	8b 00                	mov    (%eax),%eax
c0105143:	83 ec 08             	sub    $0x8,%esp
c0105146:	50                   	push   %eax
c0105147:	ff 75 0c             	pushl  0xc(%ebp)
c010514a:	e8 9b fb ff ff       	call   c0104cea <__slob_get_free_pages>
c010514f:	83 c4 10             	add    $0x10,%esp
c0105152:	89 c2                	mov    %eax,%edx
c0105154:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105157:	89 50 04             	mov    %edx,0x4(%eax)

	if (bb->pages) {
c010515a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010515d:	8b 40 04             	mov    0x4(%eax),%eax
c0105160:	85 c0                	test   %eax,%eax
c0105162:	74 33                	je     c0105197 <__kmalloc+0xd8>
		spin_lock_irqsave(&block_lock, flags);
c0105164:	e8 5c fa ff ff       	call   c0104bc5 <__intr_save>
c0105169:	89 45 ec             	mov    %eax,-0x14(%ebp)
		bb->next = bigblocks;
c010516c:	8b 15 68 0f 1b c0    	mov    0xc01b0f68,%edx
c0105172:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105175:	89 50 08             	mov    %edx,0x8(%eax)
		bigblocks = bb;
c0105178:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010517b:	a3 68 0f 1b c0       	mov    %eax,0xc01b0f68
		spin_unlock_irqrestore(&block_lock, flags);
c0105180:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105183:	83 ec 0c             	sub    $0xc,%esp
c0105186:	50                   	push   %eax
c0105187:	e8 63 fa ff ff       	call   c0104bef <__intr_restore>
c010518c:	83 c4 10             	add    $0x10,%esp
		return bb->pages;
c010518f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105192:	8b 40 04             	mov    0x4(%eax),%eax
c0105195:	eb 15                	jmp    c01051ac <__kmalloc+0xed>
	}

	slob_free(bb, sizeof(bigblock_t));
c0105197:	83 ec 08             	sub    $0x8,%esp
c010519a:	6a 0c                	push   $0xc
c010519c:	ff 75 f0             	pushl  -0x10(%ebp)
c010519f:	e8 8e fd ff ff       	call   c0104f32 <slob_free>
c01051a4:	83 c4 10             	add    $0x10,%esp
	return 0;
c01051a7:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01051ac:	c9                   	leave  
c01051ad:	c3                   	ret    

c01051ae <kmalloc>:

void *
kmalloc(size_t size)
{
c01051ae:	55                   	push   %ebp
c01051af:	89 e5                	mov    %esp,%ebp
c01051b1:	83 ec 08             	sub    $0x8,%esp
  return __kmalloc(size, 0);
c01051b4:	83 ec 08             	sub    $0x8,%esp
c01051b7:	6a 00                	push   $0x0
c01051b9:	ff 75 08             	pushl  0x8(%ebp)
c01051bc:	e8 fe fe ff ff       	call   c01050bf <__kmalloc>
c01051c1:	83 c4 10             	add    $0x10,%esp
}
c01051c4:	c9                   	leave  
c01051c5:	c3                   	ret    

c01051c6 <kfree>:


void kfree(void *block)
{
c01051c6:	55                   	push   %ebp
c01051c7:	89 e5                	mov    %esp,%ebp
c01051c9:	83 ec 18             	sub    $0x18,%esp
	bigblock_t *bb, **last = &bigblocks;
c01051cc:	c7 45 f0 68 0f 1b c0 	movl   $0xc01b0f68,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c01051d3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01051d7:	0f 84 ac 00 00 00    	je     c0105289 <kfree+0xc3>
		return;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c01051dd:	8b 45 08             	mov    0x8(%ebp),%eax
c01051e0:	25 ff 0f 00 00       	and    $0xfff,%eax
c01051e5:	85 c0                	test   %eax,%eax
c01051e7:	0f 85 85 00 00 00    	jne    c0105272 <kfree+0xac>
		/* might be on the big block list */
		spin_lock_irqsave(&block_lock, flags);
c01051ed:	e8 d3 f9 ff ff       	call   c0104bc5 <__intr_save>
c01051f2:	89 45 ec             	mov    %eax,-0x14(%ebp)
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c01051f5:	a1 68 0f 1b c0       	mov    0xc01b0f68,%eax
c01051fa:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01051fd:	eb 5e                	jmp    c010525d <kfree+0x97>
			if (bb->pages == block) {
c01051ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105202:	8b 40 04             	mov    0x4(%eax),%eax
c0105205:	3b 45 08             	cmp    0x8(%ebp),%eax
c0105208:	75 41                	jne    c010524b <kfree+0x85>
				*last = bb->next;
c010520a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010520d:	8b 50 08             	mov    0x8(%eax),%edx
c0105210:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105213:	89 10                	mov    %edx,(%eax)
				spin_unlock_irqrestore(&block_lock, flags);
c0105215:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105218:	83 ec 0c             	sub    $0xc,%esp
c010521b:	50                   	push   %eax
c010521c:	e8 ce f9 ff ff       	call   c0104bef <__intr_restore>
c0105221:	83 c4 10             	add    $0x10,%esp
				__slob_free_pages((unsigned long)block, bb->order);
c0105224:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105227:	8b 10                	mov    (%eax),%edx
c0105229:	8b 45 08             	mov    0x8(%ebp),%eax
c010522c:	83 ec 08             	sub    $0x8,%esp
c010522f:	52                   	push   %edx
c0105230:	50                   	push   %eax
c0105231:	e8 f4 fa ff ff       	call   c0104d2a <__slob_free_pages>
c0105236:	83 c4 10             	add    $0x10,%esp
				slob_free(bb, sizeof(bigblock_t));
c0105239:	83 ec 08             	sub    $0x8,%esp
c010523c:	6a 0c                	push   $0xc
c010523e:	ff 75 f4             	pushl  -0xc(%ebp)
c0105241:	e8 ec fc ff ff       	call   c0104f32 <slob_free>
c0105246:	83 c4 10             	add    $0x10,%esp
				return;
c0105249:	eb 3f                	jmp    c010528a <kfree+0xc4>
		return;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
		/* might be on the big block list */
		spin_lock_irqsave(&block_lock, flags);
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c010524b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010524e:	83 c0 08             	add    $0x8,%eax
c0105251:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105254:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105257:	8b 40 08             	mov    0x8(%eax),%eax
c010525a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010525d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105261:	75 9c                	jne    c01051ff <kfree+0x39>
				__slob_free_pages((unsigned long)block, bb->order);
				slob_free(bb, sizeof(bigblock_t));
				return;
			}
		}
		spin_unlock_irqrestore(&block_lock, flags);
c0105263:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105266:	83 ec 0c             	sub    $0xc,%esp
c0105269:	50                   	push   %eax
c010526a:	e8 80 f9 ff ff       	call   c0104bef <__intr_restore>
c010526f:	83 c4 10             	add    $0x10,%esp
	}

	slob_free((slob_t *)block - 1, 0);
c0105272:	8b 45 08             	mov    0x8(%ebp),%eax
c0105275:	83 e8 08             	sub    $0x8,%eax
c0105278:	83 ec 08             	sub    $0x8,%esp
c010527b:	6a 00                	push   $0x0
c010527d:	50                   	push   %eax
c010527e:	e8 af fc ff ff       	call   c0104f32 <slob_free>
c0105283:	83 c4 10             	add    $0x10,%esp
	return;
c0105286:	90                   	nop
c0105287:	eb 01                	jmp    c010528a <kfree+0xc4>
{
	bigblock_t *bb, **last = &bigblocks;
	unsigned long flags;

	if (!block)
		return;
c0105289:	90                   	nop
		spin_unlock_irqrestore(&block_lock, flags);
	}

	slob_free((slob_t *)block - 1, 0);
	return;
}
c010528a:	c9                   	leave  
c010528b:	c3                   	ret    

c010528c <ksize>:


unsigned int ksize(const void *block)
{
c010528c:	55                   	push   %ebp
c010528d:	89 e5                	mov    %esp,%ebp
c010528f:	83 ec 18             	sub    $0x18,%esp
	bigblock_t *bb;
	unsigned long flags;

	if (!block)
c0105292:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0105296:	75 07                	jne    c010529f <ksize+0x13>
		return 0;
c0105298:	b8 00 00 00 00       	mov    $0x0,%eax
c010529d:	eb 73                	jmp    c0105312 <ksize+0x86>

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c010529f:	8b 45 08             	mov    0x8(%ebp),%eax
c01052a2:	25 ff 0f 00 00       	and    $0xfff,%eax
c01052a7:	85 c0                	test   %eax,%eax
c01052a9:	75 5c                	jne    c0105307 <ksize+0x7b>
		spin_lock_irqsave(&block_lock, flags);
c01052ab:	e8 15 f9 ff ff       	call   c0104bc5 <__intr_save>
c01052b0:	89 45 f0             	mov    %eax,-0x10(%ebp)
		for (bb = bigblocks; bb; bb = bb->next)
c01052b3:	a1 68 0f 1b c0       	mov    0xc01b0f68,%eax
c01052b8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01052bb:	eb 35                	jmp    c01052f2 <ksize+0x66>
			if (bb->pages == block) {
c01052bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01052c0:	8b 40 04             	mov    0x4(%eax),%eax
c01052c3:	3b 45 08             	cmp    0x8(%ebp),%eax
c01052c6:	75 21                	jne    c01052e9 <ksize+0x5d>
				spin_unlock_irqrestore(&slob_lock, flags);
c01052c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01052cb:	83 ec 0c             	sub    $0xc,%esp
c01052ce:	50                   	push   %eax
c01052cf:	e8 1b f9 ff ff       	call   c0104bef <__intr_restore>
c01052d4:	83 c4 10             	add    $0x10,%esp
				return PAGE_SIZE << bb->order;
c01052d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01052da:	8b 00                	mov    (%eax),%eax
c01052dc:	ba 00 10 00 00       	mov    $0x1000,%edx
c01052e1:	89 c1                	mov    %eax,%ecx
c01052e3:	d3 e2                	shl    %cl,%edx
c01052e5:	89 d0                	mov    %edx,%eax
c01052e7:	eb 29                	jmp    c0105312 <ksize+0x86>
	if (!block)
		return 0;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
		spin_lock_irqsave(&block_lock, flags);
		for (bb = bigblocks; bb; bb = bb->next)
c01052e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01052ec:	8b 40 08             	mov    0x8(%eax),%eax
c01052ef:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01052f2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01052f6:	75 c5                	jne    c01052bd <ksize+0x31>
			if (bb->pages == block) {
				spin_unlock_irqrestore(&slob_lock, flags);
				return PAGE_SIZE << bb->order;
			}
		spin_unlock_irqrestore(&block_lock, flags);
c01052f8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01052fb:	83 ec 0c             	sub    $0xc,%esp
c01052fe:	50                   	push   %eax
c01052ff:	e8 eb f8 ff ff       	call   c0104bef <__intr_restore>
c0105304:	83 c4 10             	add    $0x10,%esp
	}

	return ((slob_t *)block - 1)->units * SLOB_UNIT;
c0105307:	8b 45 08             	mov    0x8(%ebp),%eax
c010530a:	83 e8 08             	sub    $0x8,%eax
c010530d:	8b 00                	mov    (%eax),%eax
c010530f:	c1 e0 03             	shl    $0x3,%eax
}
c0105312:	c9                   	leave  
c0105313:	c3                   	ret    

c0105314 <pa2page>:
page2pa(struct Page *page) {
    return page2ppn(page) << PGSHIFT;
}

static inline struct Page *
pa2page(uintptr_t pa) {
c0105314:	55                   	push   %ebp
c0105315:	89 e5                	mov    %esp,%ebp
c0105317:	83 ec 08             	sub    $0x8,%esp
    if (PPN(pa) >= npage) {
c010531a:	8b 45 08             	mov    0x8(%ebp),%eax
c010531d:	c1 e8 0c             	shr    $0xc,%eax
c0105320:	89 c2                	mov    %eax,%edx
c0105322:	a1 80 0f 1b c0       	mov    0xc01b0f80,%eax
c0105327:	39 c2                	cmp    %eax,%edx
c0105329:	72 14                	jb     c010533f <pa2page+0x2b>
        panic("pa2page called with invalid pa");
c010532b:	83 ec 04             	sub    $0x4,%esp
c010532e:	68 c4 c9 10 c0       	push   $0xc010c9c4
c0105333:	6a 5e                	push   $0x5e
c0105335:	68 e3 c9 10 c0       	push   $0xc010c9e3
c010533a:	e8 be b0 ff ff       	call   c01003fd <__panic>
    }
    return &pages[PPN(pa)];
c010533f:	a1 b8 31 1b c0       	mov    0xc01b31b8,%eax
c0105344:	8b 55 08             	mov    0x8(%ebp),%edx
c0105347:	c1 ea 0c             	shr    $0xc,%edx
c010534a:	c1 e2 05             	shl    $0x5,%edx
c010534d:	01 d0                	add    %edx,%eax
}
c010534f:	c9                   	leave  
c0105350:	c3                   	ret    

c0105351 <pte2page>:
kva2page(void *kva) {
    return pa2page(PADDR(kva));
}

static inline struct Page *
pte2page(pte_t pte) {
c0105351:	55                   	push   %ebp
c0105352:	89 e5                	mov    %esp,%ebp
c0105354:	83 ec 08             	sub    $0x8,%esp
    if (!(pte & PTE_P)) {
c0105357:	8b 45 08             	mov    0x8(%ebp),%eax
c010535a:	83 e0 01             	and    $0x1,%eax
c010535d:	85 c0                	test   %eax,%eax
c010535f:	75 14                	jne    c0105375 <pte2page+0x24>
        panic("pte2page called with invalid pte");
c0105361:	83 ec 04             	sub    $0x4,%esp
c0105364:	68 f4 c9 10 c0       	push   $0xc010c9f4
c0105369:	6a 70                	push   $0x70
c010536b:	68 e3 c9 10 c0       	push   $0xc010c9e3
c0105370:	e8 88 b0 ff ff       	call   c01003fd <__panic>
    }
    return pa2page(PTE_ADDR(pte));
c0105375:	8b 45 08             	mov    0x8(%ebp),%eax
c0105378:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010537d:	83 ec 0c             	sub    $0xc,%esp
c0105380:	50                   	push   %eax
c0105381:	e8 8e ff ff ff       	call   c0105314 <pa2page>
c0105386:	83 c4 10             	add    $0x10,%esp
}
c0105389:	c9                   	leave  
c010538a:	c3                   	ret    

c010538b <pde2page>:

static inline struct Page *
pde2page(pde_t pde) {
c010538b:	55                   	push   %ebp
c010538c:	89 e5                	mov    %esp,%ebp
c010538e:	83 ec 08             	sub    $0x8,%esp
    return pa2page(PDE_ADDR(pde));
c0105391:	8b 45 08             	mov    0x8(%ebp),%eax
c0105394:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0105399:	83 ec 0c             	sub    $0xc,%esp
c010539c:	50                   	push   %eax
c010539d:	e8 72 ff ff ff       	call   c0105314 <pa2page>
c01053a2:	83 c4 10             	add    $0x10,%esp
}
c01053a5:	c9                   	leave  
c01053a6:	c3                   	ret    

c01053a7 <swap_init>:

static void check_swap(void);

int
swap_init(void)
{
c01053a7:	55                   	push   %ebp
c01053a8:	89 e5                	mov    %esp,%ebp
c01053aa:	83 ec 18             	sub    $0x18,%esp
     swapfs_init();
c01053ad:	e8 70 36 00 00       	call   c0108a22 <swapfs_init>

     if (!(1024 <= max_swap_offset && max_swap_offset < MAX_SWAP_OFFSET_LIMIT))
c01053b2:	a1 7c 31 1b c0       	mov    0xc01b317c,%eax
c01053b7:	3d ff 03 00 00       	cmp    $0x3ff,%eax
c01053bc:	76 0c                	jbe    c01053ca <swap_init+0x23>
c01053be:	a1 7c 31 1b c0       	mov    0xc01b317c,%eax
c01053c3:	3d ff ff ff 00       	cmp    $0xffffff,%eax
c01053c8:	76 17                	jbe    c01053e1 <swap_init+0x3a>
     {
          panic("bad max_swap_offset %08x.\n", max_swap_offset);
c01053ca:	a1 7c 31 1b c0       	mov    0xc01b317c,%eax
c01053cf:	50                   	push   %eax
c01053d0:	68 15 ca 10 c0       	push   $0xc010ca15
c01053d5:	6a 27                	push   $0x27
c01053d7:	68 30 ca 10 c0       	push   $0xc010ca30
c01053dc:	e8 1c b0 ff ff       	call   c01003fd <__panic>
     }
     

     sm = &swap_manager_fifo;
c01053e1:	c7 05 74 0f 1b c0 e0 	movl   $0xc012c9e0,0xc01b0f74
c01053e8:	c9 12 c0 
     int r = sm->init();
c01053eb:	a1 74 0f 1b c0       	mov    0xc01b0f74,%eax
c01053f0:	8b 40 04             	mov    0x4(%eax),%eax
c01053f3:	ff d0                	call   *%eax
c01053f5:	89 45 f4             	mov    %eax,-0xc(%ebp)
     
     if (r == 0)
c01053f8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01053fc:	75 27                	jne    c0105425 <swap_init+0x7e>
     {
          swap_init_ok = 1;
c01053fe:	c7 05 6c 0f 1b c0 01 	movl   $0x1,0xc01b0f6c
c0105405:	00 00 00 
          cprintf("SWAP: manager = %s\n", sm->name);
c0105408:	a1 74 0f 1b c0       	mov    0xc01b0f74,%eax
c010540d:	8b 00                	mov    (%eax),%eax
c010540f:	83 ec 08             	sub    $0x8,%esp
c0105412:	50                   	push   %eax
c0105413:	68 3f ca 10 c0       	push   $0xc010ca3f
c0105418:	e8 7a ae ff ff       	call   c0100297 <cprintf>
c010541d:	83 c4 10             	add    $0x10,%esp
          check_swap();
c0105420:	e8 f7 03 00 00       	call   c010581c <check_swap>
     }

     return r;
c0105425:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0105428:	c9                   	leave  
c0105429:	c3                   	ret    

c010542a <swap_init_mm>:

int
swap_init_mm(struct mm_struct *mm)
{
c010542a:	55                   	push   %ebp
c010542b:	89 e5                	mov    %esp,%ebp
c010542d:	83 ec 08             	sub    $0x8,%esp
     return sm->init_mm(mm);
c0105430:	a1 74 0f 1b c0       	mov    0xc01b0f74,%eax
c0105435:	8b 40 08             	mov    0x8(%eax),%eax
c0105438:	83 ec 0c             	sub    $0xc,%esp
c010543b:	ff 75 08             	pushl  0x8(%ebp)
c010543e:	ff d0                	call   *%eax
c0105440:	83 c4 10             	add    $0x10,%esp
}
c0105443:	c9                   	leave  
c0105444:	c3                   	ret    

c0105445 <swap_tick_event>:

int
swap_tick_event(struct mm_struct *mm)
{
c0105445:	55                   	push   %ebp
c0105446:	89 e5                	mov    %esp,%ebp
c0105448:	83 ec 08             	sub    $0x8,%esp
     return sm->tick_event(mm);
c010544b:	a1 74 0f 1b c0       	mov    0xc01b0f74,%eax
c0105450:	8b 40 0c             	mov    0xc(%eax),%eax
c0105453:	83 ec 0c             	sub    $0xc,%esp
c0105456:	ff 75 08             	pushl  0x8(%ebp)
c0105459:	ff d0                	call   *%eax
c010545b:	83 c4 10             	add    $0x10,%esp
}
c010545e:	c9                   	leave  
c010545f:	c3                   	ret    

c0105460 <swap_map_swappable>:

int
swap_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c0105460:	55                   	push   %ebp
c0105461:	89 e5                	mov    %esp,%ebp
c0105463:	83 ec 08             	sub    $0x8,%esp
     return sm->map_swappable(mm, addr, page, swap_in);
c0105466:	a1 74 0f 1b c0       	mov    0xc01b0f74,%eax
c010546b:	8b 40 10             	mov    0x10(%eax),%eax
c010546e:	ff 75 14             	pushl  0x14(%ebp)
c0105471:	ff 75 10             	pushl  0x10(%ebp)
c0105474:	ff 75 0c             	pushl  0xc(%ebp)
c0105477:	ff 75 08             	pushl  0x8(%ebp)
c010547a:	ff d0                	call   *%eax
c010547c:	83 c4 10             	add    $0x10,%esp
}
c010547f:	c9                   	leave  
c0105480:	c3                   	ret    

c0105481 <swap_set_unswappable>:

int
swap_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c0105481:	55                   	push   %ebp
c0105482:	89 e5                	mov    %esp,%ebp
c0105484:	83 ec 08             	sub    $0x8,%esp
     return sm->set_unswappable(mm, addr);
c0105487:	a1 74 0f 1b c0       	mov    0xc01b0f74,%eax
c010548c:	8b 40 14             	mov    0x14(%eax),%eax
c010548f:	83 ec 08             	sub    $0x8,%esp
c0105492:	ff 75 0c             	pushl  0xc(%ebp)
c0105495:	ff 75 08             	pushl  0x8(%ebp)
c0105498:	ff d0                	call   *%eax
c010549a:	83 c4 10             	add    $0x10,%esp
}
c010549d:	c9                   	leave  
c010549e:	c3                   	ret    

c010549f <swap_out>:

volatile unsigned int swap_out_num=0;

int
swap_out(struct mm_struct *mm, int n, int in_tick)
{
c010549f:	55                   	push   %ebp
c01054a0:	89 e5                	mov    %esp,%ebp
c01054a2:	83 ec 28             	sub    $0x28,%esp
     int i;
     for (i = 0; i != n; ++ i)
c01054a5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01054ac:	e9 2e 01 00 00       	jmp    c01055df <swap_out+0x140>
     {
          uintptr_t v;
          //struct Page **ptr_page=NULL;
          struct Page *page;
          // cprintf("i %d, SWAP: call swap_out_victim\n",i);
          int r = sm->swap_out_victim(mm, &page, in_tick);
c01054b1:	a1 74 0f 1b c0       	mov    0xc01b0f74,%eax
c01054b6:	8b 40 18             	mov    0x18(%eax),%eax
c01054b9:	83 ec 04             	sub    $0x4,%esp
c01054bc:	ff 75 10             	pushl  0x10(%ebp)
c01054bf:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c01054c2:	52                   	push   %edx
c01054c3:	ff 75 08             	pushl  0x8(%ebp)
c01054c6:	ff d0                	call   *%eax
c01054c8:	83 c4 10             	add    $0x10,%esp
c01054cb:	89 45 f0             	mov    %eax,-0x10(%ebp)
          if (r != 0) {
c01054ce:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01054d2:	74 18                	je     c01054ec <swap_out+0x4d>
                    cprintf("i %d, swap_out: call swap_out_victim failed\n",i);
c01054d4:	83 ec 08             	sub    $0x8,%esp
c01054d7:	ff 75 f4             	pushl  -0xc(%ebp)
c01054da:	68 54 ca 10 c0       	push   $0xc010ca54
c01054df:	e8 b3 ad ff ff       	call   c0100297 <cprintf>
c01054e4:	83 c4 10             	add    $0x10,%esp
c01054e7:	e9 ff 00 00 00       	jmp    c01055eb <swap_out+0x14c>
          }          
          //assert(!PageReserved(page));

          //cprintf("SWAP: choose victim page 0x%08x\n", page);
          
          v=page->pra_vaddr; 
c01054ec:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01054ef:	8b 40 1c             	mov    0x1c(%eax),%eax
c01054f2:	89 45 ec             	mov    %eax,-0x14(%ebp)
          pte_t *ptep = get_pte(mm->pgdir, v, 0);
c01054f5:	8b 45 08             	mov    0x8(%ebp),%eax
c01054f8:	8b 40 0c             	mov    0xc(%eax),%eax
c01054fb:	83 ec 04             	sub    $0x4,%esp
c01054fe:	6a 00                	push   $0x0
c0105500:	ff 75 ec             	pushl  -0x14(%ebp)
c0105503:	50                   	push   %eax
c0105504:	e8 3b 22 00 00       	call   c0107744 <get_pte>
c0105509:	83 c4 10             	add    $0x10,%esp
c010550c:	89 45 e8             	mov    %eax,-0x18(%ebp)
          assert((*ptep & PTE_P) != 0);
c010550f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105512:	8b 00                	mov    (%eax),%eax
c0105514:	83 e0 01             	and    $0x1,%eax
c0105517:	85 c0                	test   %eax,%eax
c0105519:	75 16                	jne    c0105531 <swap_out+0x92>
c010551b:	68 81 ca 10 c0       	push   $0xc010ca81
c0105520:	68 96 ca 10 c0       	push   $0xc010ca96
c0105525:	6a 67                	push   $0x67
c0105527:	68 30 ca 10 c0       	push   $0xc010ca30
c010552c:	e8 cc ae ff ff       	call   c01003fd <__panic>

          if (swapfs_write( (page->pra_vaddr/PGSIZE+1)<<8, page) != 0) {
c0105531:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105534:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0105537:	8b 52 1c             	mov    0x1c(%edx),%edx
c010553a:	c1 ea 0c             	shr    $0xc,%edx
c010553d:	83 c2 01             	add    $0x1,%edx
c0105540:	c1 e2 08             	shl    $0x8,%edx
c0105543:	83 ec 08             	sub    $0x8,%esp
c0105546:	50                   	push   %eax
c0105547:	52                   	push   %edx
c0105548:	e8 71 35 00 00       	call   c0108abe <swapfs_write>
c010554d:	83 c4 10             	add    $0x10,%esp
c0105550:	85 c0                	test   %eax,%eax
c0105552:	74 2b                	je     c010557f <swap_out+0xe0>
                    cprintf("SWAP: failed to save\n");
c0105554:	83 ec 0c             	sub    $0xc,%esp
c0105557:	68 ab ca 10 c0       	push   $0xc010caab
c010555c:	e8 36 ad ff ff       	call   c0100297 <cprintf>
c0105561:	83 c4 10             	add    $0x10,%esp
                    sm->map_swappable(mm, v, page, 0);
c0105564:	a1 74 0f 1b c0       	mov    0xc01b0f74,%eax
c0105569:	8b 40 10             	mov    0x10(%eax),%eax
c010556c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010556f:	6a 00                	push   $0x0
c0105571:	52                   	push   %edx
c0105572:	ff 75 ec             	pushl  -0x14(%ebp)
c0105575:	ff 75 08             	pushl  0x8(%ebp)
c0105578:	ff d0                	call   *%eax
c010557a:	83 c4 10             	add    $0x10,%esp
c010557d:	eb 5c                	jmp    c01055db <swap_out+0x13c>
                    continue;
          }
          else {
                    cprintf("swap_out: i %d, store page in vaddr 0x%x to disk swap entry %d\n", i, v, page->pra_vaddr/PGSIZE+1);
c010557f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105582:	8b 40 1c             	mov    0x1c(%eax),%eax
c0105585:	c1 e8 0c             	shr    $0xc,%eax
c0105588:	83 c0 01             	add    $0x1,%eax
c010558b:	50                   	push   %eax
c010558c:	ff 75 ec             	pushl  -0x14(%ebp)
c010558f:	ff 75 f4             	pushl  -0xc(%ebp)
c0105592:	68 c4 ca 10 c0       	push   $0xc010cac4
c0105597:	e8 fb ac ff ff       	call   c0100297 <cprintf>
c010559c:	83 c4 10             	add    $0x10,%esp
                    *ptep = (page->pra_vaddr/PGSIZE+1)<<8;
c010559f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01055a2:	8b 40 1c             	mov    0x1c(%eax),%eax
c01055a5:	c1 e8 0c             	shr    $0xc,%eax
c01055a8:	83 c0 01             	add    $0x1,%eax
c01055ab:	c1 e0 08             	shl    $0x8,%eax
c01055ae:	89 c2                	mov    %eax,%edx
c01055b0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01055b3:	89 10                	mov    %edx,(%eax)
                    free_page(page);
c01055b5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01055b8:	83 ec 08             	sub    $0x8,%esp
c01055bb:	6a 01                	push   $0x1
c01055bd:	50                   	push   %eax
c01055be:	e8 81 1b 00 00       	call   c0107144 <free_pages>
c01055c3:	83 c4 10             	add    $0x10,%esp
          }
          
          tlb_invalidate(mm->pgdir, v);
c01055c6:	8b 45 08             	mov    0x8(%ebp),%eax
c01055c9:	8b 40 0c             	mov    0xc(%eax),%eax
c01055cc:	83 ec 08             	sub    $0x8,%esp
c01055cf:	ff 75 ec             	pushl  -0x14(%ebp)
c01055d2:	50                   	push   %eax
c01055d3:	e8 06 28 00 00       	call   c0107dde <tlb_invalidate>
c01055d8:	83 c4 10             	add    $0x10,%esp

int
swap_out(struct mm_struct *mm, int n, int in_tick)
{
     int i;
     for (i = 0; i != n; ++ i)
c01055db:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01055df:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01055e2:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01055e5:	0f 85 c6 fe ff ff    	jne    c01054b1 <swap_out+0x12>
                    free_page(page);
          }
          
          tlb_invalidate(mm->pgdir, v);
     }
     return i;
c01055eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01055ee:	c9                   	leave  
c01055ef:	c3                   	ret    

c01055f0 <swap_in>:

int
swap_in(struct mm_struct *mm, uintptr_t addr, struct Page **ptr_result)
{
c01055f0:	55                   	push   %ebp
c01055f1:	89 e5                	mov    %esp,%ebp
c01055f3:	83 ec 18             	sub    $0x18,%esp
     struct Page *result = alloc_page();
c01055f6:	83 ec 0c             	sub    $0xc,%esp
c01055f9:	6a 01                	push   $0x1
c01055fb:	e8 d8 1a 00 00       	call   c01070d8 <alloc_pages>
c0105600:	83 c4 10             	add    $0x10,%esp
c0105603:	89 45 f4             	mov    %eax,-0xc(%ebp)
     assert(result!=NULL);
c0105606:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010560a:	75 16                	jne    c0105622 <swap_in+0x32>
c010560c:	68 04 cb 10 c0       	push   $0xc010cb04
c0105611:	68 96 ca 10 c0       	push   $0xc010ca96
c0105616:	6a 7d                	push   $0x7d
c0105618:	68 30 ca 10 c0       	push   $0xc010ca30
c010561d:	e8 db ad ff ff       	call   c01003fd <__panic>

     pte_t *ptep = get_pte(mm->pgdir, addr, 0);
c0105622:	8b 45 08             	mov    0x8(%ebp),%eax
c0105625:	8b 40 0c             	mov    0xc(%eax),%eax
c0105628:	83 ec 04             	sub    $0x4,%esp
c010562b:	6a 00                	push   $0x0
c010562d:	ff 75 0c             	pushl  0xc(%ebp)
c0105630:	50                   	push   %eax
c0105631:	e8 0e 21 00 00       	call   c0107744 <get_pte>
c0105636:	83 c4 10             	add    $0x10,%esp
c0105639:	89 45 f0             	mov    %eax,-0x10(%ebp)
     // cprintf("SWAP: load ptep %x swap entry %d to vaddr 0x%08x, page %x, No %d\n", ptep, (*ptep)>>8, addr, result, (result-pages));
    
     int r;
     if ((r = swapfs_read((*ptep), result)) != 0)
c010563c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010563f:	8b 00                	mov    (%eax),%eax
c0105641:	83 ec 08             	sub    $0x8,%esp
c0105644:	ff 75 f4             	pushl  -0xc(%ebp)
c0105647:	50                   	push   %eax
c0105648:	e8 18 34 00 00       	call   c0108a65 <swapfs_read>
c010564d:	83 c4 10             	add    $0x10,%esp
c0105650:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0105653:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0105657:	74 1f                	je     c0105678 <swap_in+0x88>
     {
        assert(r!=0);
c0105659:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010565d:	75 19                	jne    c0105678 <swap_in+0x88>
c010565f:	68 11 cb 10 c0       	push   $0xc010cb11
c0105664:	68 96 ca 10 c0       	push   $0xc010ca96
c0105669:	68 85 00 00 00       	push   $0x85
c010566e:	68 30 ca 10 c0       	push   $0xc010ca30
c0105673:	e8 85 ad ff ff       	call   c01003fd <__panic>
     }
     cprintf("swap_in: load disk swap entry %d with swap_page in vadr 0x%x\n", (*ptep)>>8, addr);
c0105678:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010567b:	8b 00                	mov    (%eax),%eax
c010567d:	c1 e8 08             	shr    $0x8,%eax
c0105680:	83 ec 04             	sub    $0x4,%esp
c0105683:	ff 75 0c             	pushl  0xc(%ebp)
c0105686:	50                   	push   %eax
c0105687:	68 18 cb 10 c0       	push   $0xc010cb18
c010568c:	e8 06 ac ff ff       	call   c0100297 <cprintf>
c0105691:	83 c4 10             	add    $0x10,%esp
     *ptr_result=result;
c0105694:	8b 45 10             	mov    0x10(%ebp),%eax
c0105697:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010569a:	89 10                	mov    %edx,(%eax)
     return 0;
c010569c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01056a1:	c9                   	leave  
c01056a2:	c3                   	ret    

c01056a3 <check_content_set>:



static inline void
check_content_set(void)
{
c01056a3:	55                   	push   %ebp
c01056a4:	89 e5                	mov    %esp,%ebp
c01056a6:	83 ec 08             	sub    $0x8,%esp
     *(unsigned char *)0x1000 = 0x0a;
c01056a9:	b8 00 10 00 00       	mov    $0x1000,%eax
c01056ae:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c01056b1:	a1 64 0f 1b c0       	mov    0xc01b0f64,%eax
c01056b6:	83 f8 01             	cmp    $0x1,%eax
c01056b9:	74 19                	je     c01056d4 <check_content_set+0x31>
c01056bb:	68 56 cb 10 c0       	push   $0xc010cb56
c01056c0:	68 96 ca 10 c0       	push   $0xc010ca96
c01056c5:	68 92 00 00 00       	push   $0x92
c01056ca:	68 30 ca 10 c0       	push   $0xc010ca30
c01056cf:	e8 29 ad ff ff       	call   c01003fd <__panic>
     *(unsigned char *)0x1010 = 0x0a;
c01056d4:	b8 10 10 00 00       	mov    $0x1010,%eax
c01056d9:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c01056dc:	a1 64 0f 1b c0       	mov    0xc01b0f64,%eax
c01056e1:	83 f8 01             	cmp    $0x1,%eax
c01056e4:	74 19                	je     c01056ff <check_content_set+0x5c>
c01056e6:	68 56 cb 10 c0       	push   $0xc010cb56
c01056eb:	68 96 ca 10 c0       	push   $0xc010ca96
c01056f0:	68 94 00 00 00       	push   $0x94
c01056f5:	68 30 ca 10 c0       	push   $0xc010ca30
c01056fa:	e8 fe ac ff ff       	call   c01003fd <__panic>
     *(unsigned char *)0x2000 = 0x0b;
c01056ff:	b8 00 20 00 00       	mov    $0x2000,%eax
c0105704:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c0105707:	a1 64 0f 1b c0       	mov    0xc01b0f64,%eax
c010570c:	83 f8 02             	cmp    $0x2,%eax
c010570f:	74 19                	je     c010572a <check_content_set+0x87>
c0105711:	68 65 cb 10 c0       	push   $0xc010cb65
c0105716:	68 96 ca 10 c0       	push   $0xc010ca96
c010571b:	68 96 00 00 00       	push   $0x96
c0105720:	68 30 ca 10 c0       	push   $0xc010ca30
c0105725:	e8 d3 ac ff ff       	call   c01003fd <__panic>
     *(unsigned char *)0x2010 = 0x0b;
c010572a:	b8 10 20 00 00       	mov    $0x2010,%eax
c010572f:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c0105732:	a1 64 0f 1b c0       	mov    0xc01b0f64,%eax
c0105737:	83 f8 02             	cmp    $0x2,%eax
c010573a:	74 19                	je     c0105755 <check_content_set+0xb2>
c010573c:	68 65 cb 10 c0       	push   $0xc010cb65
c0105741:	68 96 ca 10 c0       	push   $0xc010ca96
c0105746:	68 98 00 00 00       	push   $0x98
c010574b:	68 30 ca 10 c0       	push   $0xc010ca30
c0105750:	e8 a8 ac ff ff       	call   c01003fd <__panic>
     *(unsigned char *)0x3000 = 0x0c;
c0105755:	b8 00 30 00 00       	mov    $0x3000,%eax
c010575a:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c010575d:	a1 64 0f 1b c0       	mov    0xc01b0f64,%eax
c0105762:	83 f8 03             	cmp    $0x3,%eax
c0105765:	74 19                	je     c0105780 <check_content_set+0xdd>
c0105767:	68 74 cb 10 c0       	push   $0xc010cb74
c010576c:	68 96 ca 10 c0       	push   $0xc010ca96
c0105771:	68 9a 00 00 00       	push   $0x9a
c0105776:	68 30 ca 10 c0       	push   $0xc010ca30
c010577b:	e8 7d ac ff ff       	call   c01003fd <__panic>
     *(unsigned char *)0x3010 = 0x0c;
c0105780:	b8 10 30 00 00       	mov    $0x3010,%eax
c0105785:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c0105788:	a1 64 0f 1b c0       	mov    0xc01b0f64,%eax
c010578d:	83 f8 03             	cmp    $0x3,%eax
c0105790:	74 19                	je     c01057ab <check_content_set+0x108>
c0105792:	68 74 cb 10 c0       	push   $0xc010cb74
c0105797:	68 96 ca 10 c0       	push   $0xc010ca96
c010579c:	68 9c 00 00 00       	push   $0x9c
c01057a1:	68 30 ca 10 c0       	push   $0xc010ca30
c01057a6:	e8 52 ac ff ff       	call   c01003fd <__panic>
     *(unsigned char *)0x4000 = 0x0d;
c01057ab:	b8 00 40 00 00       	mov    $0x4000,%eax
c01057b0:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c01057b3:	a1 64 0f 1b c0       	mov    0xc01b0f64,%eax
c01057b8:	83 f8 04             	cmp    $0x4,%eax
c01057bb:	74 19                	je     c01057d6 <check_content_set+0x133>
c01057bd:	68 83 cb 10 c0       	push   $0xc010cb83
c01057c2:	68 96 ca 10 c0       	push   $0xc010ca96
c01057c7:	68 9e 00 00 00       	push   $0x9e
c01057cc:	68 30 ca 10 c0       	push   $0xc010ca30
c01057d1:	e8 27 ac ff ff       	call   c01003fd <__panic>
     *(unsigned char *)0x4010 = 0x0d;
c01057d6:	b8 10 40 00 00       	mov    $0x4010,%eax
c01057db:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c01057de:	a1 64 0f 1b c0       	mov    0xc01b0f64,%eax
c01057e3:	83 f8 04             	cmp    $0x4,%eax
c01057e6:	74 19                	je     c0105801 <check_content_set+0x15e>
c01057e8:	68 83 cb 10 c0       	push   $0xc010cb83
c01057ed:	68 96 ca 10 c0       	push   $0xc010ca96
c01057f2:	68 a0 00 00 00       	push   $0xa0
c01057f7:	68 30 ca 10 c0       	push   $0xc010ca30
c01057fc:	e8 fc ab ff ff       	call   c01003fd <__panic>
}
c0105801:	90                   	nop
c0105802:	c9                   	leave  
c0105803:	c3                   	ret    

c0105804 <check_content_access>:

static inline int
check_content_access(void)
{
c0105804:	55                   	push   %ebp
c0105805:	89 e5                	mov    %esp,%ebp
c0105807:	83 ec 18             	sub    $0x18,%esp
    int ret = sm->check_swap();
c010580a:	a1 74 0f 1b c0       	mov    0xc01b0f74,%eax
c010580f:	8b 40 1c             	mov    0x1c(%eax),%eax
c0105812:	ff d0                	call   *%eax
c0105814:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return ret;
c0105817:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010581a:	c9                   	leave  
c010581b:	c3                   	ret    

c010581c <check_swap>:
#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
check_swap(void)
{
c010581c:	55                   	push   %ebp
c010581d:	89 e5                	mov    %esp,%ebp
c010581f:	83 ec 68             	sub    $0x68,%esp
    //backup mem env
     int ret, count = 0, total = 0, i;
c0105822:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0105829:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
     list_entry_t *le = &free_list;
c0105830:	c7 45 e8 a4 31 1b c0 	movl   $0xc01b31a4,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c0105837:	eb 60                	jmp    c0105899 <check_swap+0x7d>
        struct Page *p = le2page(le, page_link);
c0105839:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010583c:	83 e8 0c             	sub    $0xc,%eax
c010583f:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(PageProperty(p));
c0105842:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105845:	83 c0 04             	add    $0x4,%eax
c0105848:	c7 45 b0 01 00 00 00 	movl   $0x1,-0x50(%ebp)
c010584f:	89 45 ac             	mov    %eax,-0x54(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0105852:	8b 45 ac             	mov    -0x54(%ebp),%eax
c0105855:	8b 55 b0             	mov    -0x50(%ebp),%edx
c0105858:	0f a3 10             	bt     %edx,(%eax)
c010585b:	19 c0                	sbb    %eax,%eax
c010585d:	89 45 a8             	mov    %eax,-0x58(%ebp)
    return oldbit != 0;
c0105860:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
c0105864:	0f 95 c0             	setne  %al
c0105867:	0f b6 c0             	movzbl %al,%eax
c010586a:	85 c0                	test   %eax,%eax
c010586c:	75 19                	jne    c0105887 <check_swap+0x6b>
c010586e:	68 92 cb 10 c0       	push   $0xc010cb92
c0105873:	68 96 ca 10 c0       	push   $0xc010ca96
c0105878:	68 bb 00 00 00       	push   $0xbb
c010587d:	68 30 ca 10 c0       	push   $0xc010ca30
c0105882:	e8 76 ab ff ff       	call   c01003fd <__panic>
        count ++, total += p->property;
c0105887:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010588b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010588e:	8b 50 08             	mov    0x8(%eax),%edx
c0105891:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105894:	01 d0                	add    %edx,%eax
c0105896:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105899:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010589c:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010589f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01058a2:	8b 40 04             	mov    0x4(%eax),%eax
check_swap(void)
{
    //backup mem env
     int ret, count = 0, total = 0, i;
     list_entry_t *le = &free_list;
     while ((le = list_next(le)) != &free_list) {
c01058a5:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01058a8:	81 7d e8 a4 31 1b c0 	cmpl   $0xc01b31a4,-0x18(%ebp)
c01058af:	75 88                	jne    c0105839 <check_swap+0x1d>
        struct Page *p = le2page(le, page_link);
        assert(PageProperty(p));
        count ++, total += p->property;
     }
     assert(total == nr_free_pages());
c01058b1:	e8 c3 18 00 00       	call   c0107179 <nr_free_pages>
c01058b6:	89 c2                	mov    %eax,%edx
c01058b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01058bb:	39 c2                	cmp    %eax,%edx
c01058bd:	74 19                	je     c01058d8 <check_swap+0xbc>
c01058bf:	68 a2 cb 10 c0       	push   $0xc010cba2
c01058c4:	68 96 ca 10 c0       	push   $0xc010ca96
c01058c9:	68 be 00 00 00       	push   $0xbe
c01058ce:	68 30 ca 10 c0       	push   $0xc010ca30
c01058d3:	e8 25 ab ff ff       	call   c01003fd <__panic>
     cprintf("BEGIN check_swap: count %d, total %d\n",count,total);
c01058d8:	83 ec 04             	sub    $0x4,%esp
c01058db:	ff 75 f0             	pushl  -0x10(%ebp)
c01058de:	ff 75 f4             	pushl  -0xc(%ebp)
c01058e1:	68 bc cb 10 c0       	push   $0xc010cbbc
c01058e6:	e8 ac a9 ff ff       	call   c0100297 <cprintf>
c01058eb:	83 c4 10             	add    $0x10,%esp
     
     //now we set the phy pages env     
     struct mm_struct *mm = mm_create();
c01058ee:	e8 92 dd ff ff       	call   c0103685 <mm_create>
c01058f3:	89 45 d8             	mov    %eax,-0x28(%ebp)
     assert(mm != NULL);
c01058f6:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c01058fa:	75 19                	jne    c0105915 <check_swap+0xf9>
c01058fc:	68 e2 cb 10 c0       	push   $0xc010cbe2
c0105901:	68 96 ca 10 c0       	push   $0xc010ca96
c0105906:	68 c3 00 00 00       	push   $0xc3
c010590b:	68 30 ca 10 c0       	push   $0xc010ca30
c0105910:	e8 e8 aa ff ff       	call   c01003fd <__panic>

     extern struct mm_struct *check_mm_struct;
     assert(check_mm_struct == NULL);
c0105915:	a1 d0 30 1b c0       	mov    0xc01b30d0,%eax
c010591a:	85 c0                	test   %eax,%eax
c010591c:	74 19                	je     c0105937 <check_swap+0x11b>
c010591e:	68 ed cb 10 c0       	push   $0xc010cbed
c0105923:	68 96 ca 10 c0       	push   $0xc010ca96
c0105928:	68 c6 00 00 00       	push   $0xc6
c010592d:	68 30 ca 10 c0       	push   $0xc010ca30
c0105932:	e8 c6 aa ff ff       	call   c01003fd <__panic>

     check_mm_struct = mm;
c0105937:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010593a:	a3 d0 30 1b c0       	mov    %eax,0xc01b30d0

     pde_t *pgdir = mm->pgdir = boot_pgdir;
c010593f:	8b 15 20 ca 12 c0    	mov    0xc012ca20,%edx
c0105945:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0105948:	89 50 0c             	mov    %edx,0xc(%eax)
c010594b:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010594e:	8b 40 0c             	mov    0xc(%eax),%eax
c0105951:	89 45 d4             	mov    %eax,-0x2c(%ebp)
     assert(pgdir[0] == 0);
c0105954:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0105957:	8b 00                	mov    (%eax),%eax
c0105959:	85 c0                	test   %eax,%eax
c010595b:	74 19                	je     c0105976 <check_swap+0x15a>
c010595d:	68 05 cc 10 c0       	push   $0xc010cc05
c0105962:	68 96 ca 10 c0       	push   $0xc010ca96
c0105967:	68 cb 00 00 00       	push   $0xcb
c010596c:	68 30 ca 10 c0       	push   $0xc010ca30
c0105971:	e8 87 aa ff ff       	call   c01003fd <__panic>

     struct vma_struct *vma = vma_create(BEING_CHECK_VALID_VADDR, CHECK_VALID_VADDR, VM_WRITE | VM_READ);
c0105976:	83 ec 04             	sub    $0x4,%esp
c0105979:	6a 03                	push   $0x3
c010597b:	68 00 60 00 00       	push   $0x6000
c0105980:	68 00 10 00 00       	push   $0x1000
c0105985:	e8 99 dd ff ff       	call   c0103723 <vma_create>
c010598a:	83 c4 10             	add    $0x10,%esp
c010598d:	89 45 d0             	mov    %eax,-0x30(%ebp)
     assert(vma != NULL);
c0105990:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c0105994:	75 19                	jne    c01059af <check_swap+0x193>
c0105996:	68 13 cc 10 c0       	push   $0xc010cc13
c010599b:	68 96 ca 10 c0       	push   $0xc010ca96
c01059a0:	68 ce 00 00 00       	push   $0xce
c01059a5:	68 30 ca 10 c0       	push   $0xc010ca30
c01059aa:	e8 4e aa ff ff       	call   c01003fd <__panic>

     insert_vma_struct(mm, vma);
c01059af:	83 ec 08             	sub    $0x8,%esp
c01059b2:	ff 75 d0             	pushl  -0x30(%ebp)
c01059b5:	ff 75 d8             	pushl  -0x28(%ebp)
c01059b8:	e8 ce de ff ff       	call   c010388b <insert_vma_struct>
c01059bd:	83 c4 10             	add    $0x10,%esp

     //setup the temp Page Table vaddr 0~4MB
     cprintf("setup Page Table for vaddr 0X1000, so alloc a page\n");
c01059c0:	83 ec 0c             	sub    $0xc,%esp
c01059c3:	68 20 cc 10 c0       	push   $0xc010cc20
c01059c8:	e8 ca a8 ff ff       	call   c0100297 <cprintf>
c01059cd:	83 c4 10             	add    $0x10,%esp
     pte_t *temp_ptep=NULL;
c01059d0:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
c01059d7:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01059da:	8b 40 0c             	mov    0xc(%eax),%eax
c01059dd:	83 ec 04             	sub    $0x4,%esp
c01059e0:	6a 01                	push   $0x1
c01059e2:	68 00 10 00 00       	push   $0x1000
c01059e7:	50                   	push   %eax
c01059e8:	e8 57 1d 00 00       	call   c0107744 <get_pte>
c01059ed:	83 c4 10             	add    $0x10,%esp
c01059f0:	89 45 cc             	mov    %eax,-0x34(%ebp)
     assert(temp_ptep!= NULL);
c01059f3:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c01059f7:	75 19                	jne    c0105a12 <check_swap+0x1f6>
c01059f9:	68 54 cc 10 c0       	push   $0xc010cc54
c01059fe:	68 96 ca 10 c0       	push   $0xc010ca96
c0105a03:	68 d6 00 00 00       	push   $0xd6
c0105a08:	68 30 ca 10 c0       	push   $0xc010ca30
c0105a0d:	e8 eb a9 ff ff       	call   c01003fd <__panic>
     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
c0105a12:	83 ec 0c             	sub    $0xc,%esp
c0105a15:	68 68 cc 10 c0       	push   $0xc010cc68
c0105a1a:	e8 78 a8 ff ff       	call   c0100297 <cprintf>
c0105a1f:	83 c4 10             	add    $0x10,%esp
     
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0105a22:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0105a29:	e9 90 00 00 00       	jmp    c0105abe <check_swap+0x2a2>
          check_rp[i] = alloc_page();
c0105a2e:	83 ec 0c             	sub    $0xc,%esp
c0105a31:	6a 01                	push   $0x1
c0105a33:	e8 a0 16 00 00       	call   c01070d8 <alloc_pages>
c0105a38:	83 c4 10             	add    $0x10,%esp
c0105a3b:	89 c2                	mov    %eax,%edx
c0105a3d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105a40:	89 14 85 e0 30 1b c0 	mov    %edx,-0x3fe4cf20(,%eax,4)
          assert(check_rp[i] != NULL );
c0105a47:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105a4a:	8b 04 85 e0 30 1b c0 	mov    -0x3fe4cf20(,%eax,4),%eax
c0105a51:	85 c0                	test   %eax,%eax
c0105a53:	75 19                	jne    c0105a6e <check_swap+0x252>
c0105a55:	68 8c cc 10 c0       	push   $0xc010cc8c
c0105a5a:	68 96 ca 10 c0       	push   $0xc010ca96
c0105a5f:	68 db 00 00 00       	push   $0xdb
c0105a64:	68 30 ca 10 c0       	push   $0xc010ca30
c0105a69:	e8 8f a9 ff ff       	call   c01003fd <__panic>
          assert(!PageProperty(check_rp[i]));
c0105a6e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105a71:	8b 04 85 e0 30 1b c0 	mov    -0x3fe4cf20(,%eax,4),%eax
c0105a78:	83 c0 04             	add    $0x4,%eax
c0105a7b:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
c0105a82:	89 45 a4             	mov    %eax,-0x5c(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0105a85:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0105a88:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0105a8b:	0f a3 10             	bt     %edx,(%eax)
c0105a8e:	19 c0                	sbb    %eax,%eax
c0105a90:	89 45 a0             	mov    %eax,-0x60(%ebp)
    return oldbit != 0;
c0105a93:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
c0105a97:	0f 95 c0             	setne  %al
c0105a9a:	0f b6 c0             	movzbl %al,%eax
c0105a9d:	85 c0                	test   %eax,%eax
c0105a9f:	74 19                	je     c0105aba <check_swap+0x29e>
c0105aa1:	68 a0 cc 10 c0       	push   $0xc010cca0
c0105aa6:	68 96 ca 10 c0       	push   $0xc010ca96
c0105aab:	68 dc 00 00 00       	push   $0xdc
c0105ab0:	68 30 ca 10 c0       	push   $0xc010ca30
c0105ab5:	e8 43 a9 ff ff       	call   c01003fd <__panic>
     pte_t *temp_ptep=NULL;
     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
     assert(temp_ptep!= NULL);
     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
     
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0105aba:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0105abe:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0105ac2:	0f 8e 66 ff ff ff    	jle    c0105a2e <check_swap+0x212>
          check_rp[i] = alloc_page();
          assert(check_rp[i] != NULL );
          assert(!PageProperty(check_rp[i]));
     }
     list_entry_t free_list_store = free_list;
c0105ac8:	a1 a4 31 1b c0       	mov    0xc01b31a4,%eax
c0105acd:	8b 15 a8 31 1b c0    	mov    0xc01b31a8,%edx
c0105ad3:	89 45 98             	mov    %eax,-0x68(%ebp)
c0105ad6:	89 55 9c             	mov    %edx,-0x64(%ebp)
c0105ad9:	c7 45 c0 a4 31 1b c0 	movl   $0xc01b31a4,-0x40(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0105ae0:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0105ae3:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0105ae6:	89 50 04             	mov    %edx,0x4(%eax)
c0105ae9:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0105aec:	8b 50 04             	mov    0x4(%eax),%edx
c0105aef:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0105af2:	89 10                	mov    %edx,(%eax)
c0105af4:	c7 45 c8 a4 31 1b c0 	movl   $0xc01b31a4,-0x38(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0105afb:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0105afe:	8b 40 04             	mov    0x4(%eax),%eax
c0105b01:	39 45 c8             	cmp    %eax,-0x38(%ebp)
c0105b04:	0f 94 c0             	sete   %al
c0105b07:	0f b6 c0             	movzbl %al,%eax
     list_init(&free_list);
     assert(list_empty(&free_list));
c0105b0a:	85 c0                	test   %eax,%eax
c0105b0c:	75 19                	jne    c0105b27 <check_swap+0x30b>
c0105b0e:	68 bb cc 10 c0       	push   $0xc010ccbb
c0105b13:	68 96 ca 10 c0       	push   $0xc010ca96
c0105b18:	68 e0 00 00 00       	push   $0xe0
c0105b1d:	68 30 ca 10 c0       	push   $0xc010ca30
c0105b22:	e8 d6 a8 ff ff       	call   c01003fd <__panic>
     
     //assert(alloc_page() == NULL);
     
     unsigned int nr_free_store = nr_free;
c0105b27:	a1 ac 31 1b c0       	mov    0xc01b31ac,%eax
c0105b2c:	89 45 bc             	mov    %eax,-0x44(%ebp)
     nr_free = 0;
c0105b2f:	c7 05 ac 31 1b c0 00 	movl   $0x0,0xc01b31ac
c0105b36:	00 00 00 
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0105b39:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0105b40:	eb 1c                	jmp    c0105b5e <check_swap+0x342>
        free_pages(check_rp[i],1);
c0105b42:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105b45:	8b 04 85 e0 30 1b c0 	mov    -0x3fe4cf20(,%eax,4),%eax
c0105b4c:	83 ec 08             	sub    $0x8,%esp
c0105b4f:	6a 01                	push   $0x1
c0105b51:	50                   	push   %eax
c0105b52:	e8 ed 15 00 00       	call   c0107144 <free_pages>
c0105b57:	83 c4 10             	add    $0x10,%esp
     
     //assert(alloc_page() == NULL);
     
     unsigned int nr_free_store = nr_free;
     nr_free = 0;
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0105b5a:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0105b5e:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0105b62:	7e de                	jle    c0105b42 <check_swap+0x326>
        free_pages(check_rp[i],1);
     }
     assert(nr_free==CHECK_VALID_PHY_PAGE_NUM);
c0105b64:	a1 ac 31 1b c0       	mov    0xc01b31ac,%eax
c0105b69:	83 f8 04             	cmp    $0x4,%eax
c0105b6c:	74 19                	je     c0105b87 <check_swap+0x36b>
c0105b6e:	68 d4 cc 10 c0       	push   $0xc010ccd4
c0105b73:	68 96 ca 10 c0       	push   $0xc010ca96
c0105b78:	68 e9 00 00 00       	push   $0xe9
c0105b7d:	68 30 ca 10 c0       	push   $0xc010ca30
c0105b82:	e8 76 a8 ff ff       	call   c01003fd <__panic>
     
     cprintf("set up init env for check_swap begin!\n");
c0105b87:	83 ec 0c             	sub    $0xc,%esp
c0105b8a:	68 f8 cc 10 c0       	push   $0xc010ccf8
c0105b8f:	e8 03 a7 ff ff       	call   c0100297 <cprintf>
c0105b94:	83 c4 10             	add    $0x10,%esp
     //setup initial vir_page<->phy_page environment for page relpacement algorithm 

     
     pgfault_num=0;
c0105b97:	c7 05 64 0f 1b c0 00 	movl   $0x0,0xc01b0f64
c0105b9e:	00 00 00 
     
     check_content_set();
c0105ba1:	e8 fd fa ff ff       	call   c01056a3 <check_content_set>
     assert( nr_free == 0);         
c0105ba6:	a1 ac 31 1b c0       	mov    0xc01b31ac,%eax
c0105bab:	85 c0                	test   %eax,%eax
c0105bad:	74 19                	je     c0105bc8 <check_swap+0x3ac>
c0105baf:	68 1f cd 10 c0       	push   $0xc010cd1f
c0105bb4:	68 96 ca 10 c0       	push   $0xc010ca96
c0105bb9:	68 f2 00 00 00       	push   $0xf2
c0105bbe:	68 30 ca 10 c0       	push   $0xc010ca30
c0105bc3:	e8 35 a8 ff ff       	call   c01003fd <__panic>
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c0105bc8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0105bcf:	eb 26                	jmp    c0105bf7 <check_swap+0x3db>
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
c0105bd1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105bd4:	c7 04 85 00 31 1b c0 	movl   $0xffffffff,-0x3fe4cf00(,%eax,4)
c0105bdb:	ff ff ff ff 
c0105bdf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105be2:	8b 14 85 00 31 1b c0 	mov    -0x3fe4cf00(,%eax,4),%edx
c0105be9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105bec:	89 14 85 40 31 1b c0 	mov    %edx,-0x3fe4cec0(,%eax,4)
     
     pgfault_num=0;
     
     check_content_set();
     assert( nr_free == 0);         
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c0105bf3:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0105bf7:	83 7d ec 09          	cmpl   $0x9,-0x14(%ebp)
c0105bfb:	7e d4                	jle    c0105bd1 <check_swap+0x3b5>
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
     
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0105bfd:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0105c04:	e9 cc 00 00 00       	jmp    c0105cd5 <check_swap+0x4b9>
         check_ptep[i]=0;
c0105c09:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105c0c:	c7 04 85 94 31 1b c0 	movl   $0x0,-0x3fe4ce6c(,%eax,4)
c0105c13:	00 00 00 00 
         check_ptep[i] = get_pte(pgdir, (i+1)*0x1000, 0);
c0105c17:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105c1a:	83 c0 01             	add    $0x1,%eax
c0105c1d:	c1 e0 0c             	shl    $0xc,%eax
c0105c20:	83 ec 04             	sub    $0x4,%esp
c0105c23:	6a 00                	push   $0x0
c0105c25:	50                   	push   %eax
c0105c26:	ff 75 d4             	pushl  -0x2c(%ebp)
c0105c29:	e8 16 1b 00 00       	call   c0107744 <get_pte>
c0105c2e:	83 c4 10             	add    $0x10,%esp
c0105c31:	89 c2                	mov    %eax,%edx
c0105c33:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105c36:	89 14 85 94 31 1b c0 	mov    %edx,-0x3fe4ce6c(,%eax,4)
         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
         assert(check_ptep[i] != NULL);
c0105c3d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105c40:	8b 04 85 94 31 1b c0 	mov    -0x3fe4ce6c(,%eax,4),%eax
c0105c47:	85 c0                	test   %eax,%eax
c0105c49:	75 19                	jne    c0105c64 <check_swap+0x448>
c0105c4b:	68 2c cd 10 c0       	push   $0xc010cd2c
c0105c50:	68 96 ca 10 c0       	push   $0xc010ca96
c0105c55:	68 fa 00 00 00       	push   $0xfa
c0105c5a:	68 30 ca 10 c0       	push   $0xc010ca30
c0105c5f:	e8 99 a7 ff ff       	call   c01003fd <__panic>
         assert(pte2page(*check_ptep[i]) == check_rp[i]);
c0105c64:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105c67:	8b 04 85 94 31 1b c0 	mov    -0x3fe4ce6c(,%eax,4),%eax
c0105c6e:	8b 00                	mov    (%eax),%eax
c0105c70:	83 ec 0c             	sub    $0xc,%esp
c0105c73:	50                   	push   %eax
c0105c74:	e8 d8 f6 ff ff       	call   c0105351 <pte2page>
c0105c79:	83 c4 10             	add    $0x10,%esp
c0105c7c:	89 c2                	mov    %eax,%edx
c0105c7e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105c81:	8b 04 85 e0 30 1b c0 	mov    -0x3fe4cf20(,%eax,4),%eax
c0105c88:	39 c2                	cmp    %eax,%edx
c0105c8a:	74 19                	je     c0105ca5 <check_swap+0x489>
c0105c8c:	68 44 cd 10 c0       	push   $0xc010cd44
c0105c91:	68 96 ca 10 c0       	push   $0xc010ca96
c0105c96:	68 fb 00 00 00       	push   $0xfb
c0105c9b:	68 30 ca 10 c0       	push   $0xc010ca30
c0105ca0:	e8 58 a7 ff ff       	call   c01003fd <__panic>
         assert((*check_ptep[i] & PTE_P));          
c0105ca5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105ca8:	8b 04 85 94 31 1b c0 	mov    -0x3fe4ce6c(,%eax,4),%eax
c0105caf:	8b 00                	mov    (%eax),%eax
c0105cb1:	83 e0 01             	and    $0x1,%eax
c0105cb4:	85 c0                	test   %eax,%eax
c0105cb6:	75 19                	jne    c0105cd1 <check_swap+0x4b5>
c0105cb8:	68 6c cd 10 c0       	push   $0xc010cd6c
c0105cbd:	68 96 ca 10 c0       	push   $0xc010ca96
c0105cc2:	68 fc 00 00 00       	push   $0xfc
c0105cc7:	68 30 ca 10 c0       	push   $0xc010ca30
c0105ccc:	e8 2c a7 ff ff       	call   c01003fd <__panic>
     check_content_set();
     assert( nr_free == 0);         
     for(i = 0; i<MAX_SEQ_NO ; i++) 
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
     
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0105cd1:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0105cd5:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0105cd9:	0f 8e 2a ff ff ff    	jle    c0105c09 <check_swap+0x3ed>
         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
         assert(check_ptep[i] != NULL);
         assert(pte2page(*check_ptep[i]) == check_rp[i]);
         assert((*check_ptep[i] & PTE_P));          
     }
     cprintf("set up init env for check_swap over!\n");
c0105cdf:	83 ec 0c             	sub    $0xc,%esp
c0105ce2:	68 88 cd 10 c0       	push   $0xc010cd88
c0105ce7:	e8 ab a5 ff ff       	call   c0100297 <cprintf>
c0105cec:	83 c4 10             	add    $0x10,%esp
     // now access the virt pages to test  page relpacement algorithm 
     ret=check_content_access();
c0105cef:	e8 10 fb ff ff       	call   c0105804 <check_content_access>
c0105cf4:	89 45 b8             	mov    %eax,-0x48(%ebp)
     assert(ret==0);
c0105cf7:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
c0105cfb:	74 19                	je     c0105d16 <check_swap+0x4fa>
c0105cfd:	68 ae cd 10 c0       	push   $0xc010cdae
c0105d02:	68 96 ca 10 c0       	push   $0xc010ca96
c0105d07:	68 01 01 00 00       	push   $0x101
c0105d0c:	68 30 ca 10 c0       	push   $0xc010ca30
c0105d11:	e8 e7 a6 ff ff       	call   c01003fd <__panic>
     
     //restore kernel mem env
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0105d16:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0105d1d:	eb 1c                	jmp    c0105d3b <check_swap+0x51f>
         free_pages(check_rp[i],1);
c0105d1f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105d22:	8b 04 85 e0 30 1b c0 	mov    -0x3fe4cf20(,%eax,4),%eax
c0105d29:	83 ec 08             	sub    $0x8,%esp
c0105d2c:	6a 01                	push   $0x1
c0105d2e:	50                   	push   %eax
c0105d2f:	e8 10 14 00 00       	call   c0107144 <free_pages>
c0105d34:	83 c4 10             	add    $0x10,%esp
     // now access the virt pages to test  page relpacement algorithm 
     ret=check_content_access();
     assert(ret==0);
     
     //restore kernel mem env
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0105d37:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0105d3b:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0105d3f:	7e de                	jle    c0105d1f <check_swap+0x503>
         free_pages(check_rp[i],1);
     } 

     //free_page(pte2page(*temp_ptep));
    free_page(pde2page(pgdir[0]));
c0105d41:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0105d44:	8b 00                	mov    (%eax),%eax
c0105d46:	83 ec 0c             	sub    $0xc,%esp
c0105d49:	50                   	push   %eax
c0105d4a:	e8 3c f6 ff ff       	call   c010538b <pde2page>
c0105d4f:	83 c4 10             	add    $0x10,%esp
c0105d52:	83 ec 08             	sub    $0x8,%esp
c0105d55:	6a 01                	push   $0x1
c0105d57:	50                   	push   %eax
c0105d58:	e8 e7 13 00 00       	call   c0107144 <free_pages>
c0105d5d:	83 c4 10             	add    $0x10,%esp
     pgdir[0] = 0;
c0105d60:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0105d63:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
     mm->pgdir = NULL;
c0105d69:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0105d6c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
     mm_destroy(mm);
c0105d73:	83 ec 0c             	sub    $0xc,%esp
c0105d76:	ff 75 d8             	pushl  -0x28(%ebp)
c0105d79:	e8 31 dc ff ff       	call   c01039af <mm_destroy>
c0105d7e:	83 c4 10             	add    $0x10,%esp
     check_mm_struct = NULL;
c0105d81:	c7 05 d0 30 1b c0 00 	movl   $0x0,0xc01b30d0
c0105d88:	00 00 00 
     
     nr_free = nr_free_store;
c0105d8b:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0105d8e:	a3 ac 31 1b c0       	mov    %eax,0xc01b31ac
     free_list = free_list_store;
c0105d93:	8b 45 98             	mov    -0x68(%ebp),%eax
c0105d96:	8b 55 9c             	mov    -0x64(%ebp),%edx
c0105d99:	a3 a4 31 1b c0       	mov    %eax,0xc01b31a4
c0105d9e:	89 15 a8 31 1b c0    	mov    %edx,0xc01b31a8

     
     le = &free_list;
c0105da4:	c7 45 e8 a4 31 1b c0 	movl   $0xc01b31a4,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c0105dab:	eb 1d                	jmp    c0105dca <check_swap+0x5ae>
         struct Page *p = le2page(le, page_link);
c0105dad:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105db0:	83 e8 0c             	sub    $0xc,%eax
c0105db3:	89 45 b4             	mov    %eax,-0x4c(%ebp)
         count --, total -= p->property;
c0105db6:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0105dba:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0105dbd:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0105dc0:	8b 40 08             	mov    0x8(%eax),%eax
c0105dc3:	29 c2                	sub    %eax,%edx
c0105dc5:	89 d0                	mov    %edx,%eax
c0105dc7:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105dca:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105dcd:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0105dd0:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0105dd3:	8b 40 04             	mov    0x4(%eax),%eax
     nr_free = nr_free_store;
     free_list = free_list_store;

     
     le = &free_list;
     while ((le = list_next(le)) != &free_list) {
c0105dd6:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0105dd9:	81 7d e8 a4 31 1b c0 	cmpl   $0xc01b31a4,-0x18(%ebp)
c0105de0:	75 cb                	jne    c0105dad <check_swap+0x591>
         struct Page *p = le2page(le, page_link);
         count --, total -= p->property;
     }
     cprintf("count is %d, total is %d\n",count,total);
c0105de2:	83 ec 04             	sub    $0x4,%esp
c0105de5:	ff 75 f0             	pushl  -0x10(%ebp)
c0105de8:	ff 75 f4             	pushl  -0xc(%ebp)
c0105deb:	68 b5 cd 10 c0       	push   $0xc010cdb5
c0105df0:	e8 a2 a4 ff ff       	call   c0100297 <cprintf>
c0105df5:	83 c4 10             	add    $0x10,%esp
     //assert(count == 0);
     
     cprintf("check_swap() succeeded!\n");
c0105df8:	83 ec 0c             	sub    $0xc,%esp
c0105dfb:	68 cf cd 10 c0       	push   $0xc010cdcf
c0105e00:	e8 92 a4 ff ff       	call   c0100297 <cprintf>
c0105e05:	83 c4 10             	add    $0x10,%esp
}
c0105e08:	90                   	nop
c0105e09:	c9                   	leave  
c0105e0a:	c3                   	ret    

c0105e0b <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0105e0b:	55                   	push   %ebp
c0105e0c:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0105e0e:	8b 45 08             	mov    0x8(%ebp),%eax
c0105e11:	8b 15 b8 31 1b c0    	mov    0xc01b31b8,%edx
c0105e17:	29 d0                	sub    %edx,%eax
c0105e19:	c1 f8 05             	sar    $0x5,%eax
}
c0105e1c:	5d                   	pop    %ebp
c0105e1d:	c3                   	ret    

c0105e1e <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0105e1e:	55                   	push   %ebp
c0105e1f:	89 e5                	mov    %esp,%ebp
    return page2ppn(page) << PGSHIFT;
c0105e21:	ff 75 08             	pushl  0x8(%ebp)
c0105e24:	e8 e2 ff ff ff       	call   c0105e0b <page2ppn>
c0105e29:	83 c4 04             	add    $0x4,%esp
c0105e2c:	c1 e0 0c             	shl    $0xc,%eax
}
c0105e2f:	c9                   	leave  
c0105e30:	c3                   	ret    

c0105e31 <page_ref>:
pde2page(pde_t pde) {
    return pa2page(PDE_ADDR(pde));
}

static inline int
page_ref(struct Page *page) {
c0105e31:	55                   	push   %ebp
c0105e32:	89 e5                	mov    %esp,%ebp
    return page->ref;
c0105e34:	8b 45 08             	mov    0x8(%ebp),%eax
c0105e37:	8b 00                	mov    (%eax),%eax
}
c0105e39:	5d                   	pop    %ebp
c0105e3a:	c3                   	ret    

c0105e3b <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c0105e3b:	55                   	push   %ebp
c0105e3c:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c0105e3e:	8b 45 08             	mov    0x8(%ebp),%eax
c0105e41:	8b 55 0c             	mov    0xc(%ebp),%edx
c0105e44:	89 10                	mov    %edx,(%eax)
}
c0105e46:	90                   	nop
c0105e47:	5d                   	pop    %ebp
c0105e48:	c3                   	ret    

c0105e49 <default_init>:

#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
default_init(void) {
c0105e49:	55                   	push   %ebp
c0105e4a:	89 e5                	mov    %esp,%ebp
c0105e4c:	83 ec 10             	sub    $0x10,%esp
c0105e4f:	c7 45 fc a4 31 1b c0 	movl   $0xc01b31a4,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0105e56:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0105e59:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0105e5c:	89 50 04             	mov    %edx,0x4(%eax)
c0105e5f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0105e62:	8b 50 04             	mov    0x4(%eax),%edx
c0105e65:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0105e68:	89 10                	mov    %edx,(%eax)
    list_init(&free_list);
    nr_free = 0;
c0105e6a:	c7 05 ac 31 1b c0 00 	movl   $0x0,0xc01b31ac
c0105e71:	00 00 00 
}
c0105e74:	90                   	nop
c0105e75:	c9                   	leave  
c0105e76:	c3                   	ret    

c0105e77 <default_init_memmap>:

static void
default_init_memmap(struct Page *base, size_t n) {
c0105e77:	55                   	push   %ebp
c0105e78:	89 e5                	mov    %esp,%ebp
c0105e7a:	83 ec 48             	sub    $0x48,%esp
    assert(n > 0);
c0105e7d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0105e81:	75 16                	jne    c0105e99 <default_init_memmap+0x22>
c0105e83:	68 e8 cd 10 c0       	push   $0xc010cde8
c0105e88:	68 ee cd 10 c0       	push   $0xc010cdee
c0105e8d:	6a 6d                	push   $0x6d
c0105e8f:	68 03 ce 10 c0       	push   $0xc010ce03
c0105e94:	e8 64 a5 ff ff       	call   c01003fd <__panic>
    struct Page *p = base;
c0105e99:	8b 45 08             	mov    0x8(%ebp),%eax
c0105e9c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (; p != base + n; p ++) {
c0105e9f:	eb 6c                	jmp    c0105f0d <default_init_memmap+0x96>
        assert(PageReserved(p));
c0105ea1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105ea4:	83 c0 04             	add    $0x4,%eax
c0105ea7:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c0105eae:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0105eb1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105eb4:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0105eb7:	0f a3 10             	bt     %edx,(%eax)
c0105eba:	19 c0                	sbb    %eax,%eax
c0105ebc:	89 45 e0             	mov    %eax,-0x20(%ebp)
    return oldbit != 0;
c0105ebf:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0105ec3:	0f 95 c0             	setne  %al
c0105ec6:	0f b6 c0             	movzbl %al,%eax
c0105ec9:	85 c0                	test   %eax,%eax
c0105ecb:	75 16                	jne    c0105ee3 <default_init_memmap+0x6c>
c0105ecd:	68 19 ce 10 c0       	push   $0xc010ce19
c0105ed2:	68 ee cd 10 c0       	push   $0xc010cdee
c0105ed7:	6a 70                	push   $0x70
c0105ed9:	68 03 ce 10 c0       	push   $0xc010ce03
c0105ede:	e8 1a a5 ff ff       	call   c01003fd <__panic>
        p->flags = p->property = 0;
c0105ee3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105ee6:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
c0105eed:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105ef0:	8b 50 08             	mov    0x8(%eax),%edx
c0105ef3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105ef6:	89 50 04             	mov    %edx,0x4(%eax)
        set_page_ref(p, 0);
c0105ef9:	83 ec 08             	sub    $0x8,%esp
c0105efc:	6a 00                	push   $0x0
c0105efe:	ff 75 f4             	pushl  -0xc(%ebp)
c0105f01:	e8 35 ff ff ff       	call   c0105e3b <set_page_ref>
c0105f06:	83 c4 10             	add    $0x10,%esp

static void
default_init_memmap(struct Page *base, size_t n) {
    assert(n > 0);
    struct Page *p = base;
    for (; p != base + n; p ++) {
c0105f09:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
c0105f0d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105f10:	c1 e0 05             	shl    $0x5,%eax
c0105f13:	89 c2                	mov    %eax,%edx
c0105f15:	8b 45 08             	mov    0x8(%ebp),%eax
c0105f18:	01 d0                	add    %edx,%eax
c0105f1a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0105f1d:	75 82                	jne    c0105ea1 <default_init_memmap+0x2a>
        assert(PageReserved(p));
        p->flags = p->property = 0;
        set_page_ref(p, 0);
    }
    base->property = n;
c0105f1f:	8b 45 08             	mov    0x8(%ebp),%eax
c0105f22:	8b 55 0c             	mov    0xc(%ebp),%edx
c0105f25:	89 50 08             	mov    %edx,0x8(%eax)
    SetPageProperty(base);
c0105f28:	8b 45 08             	mov    0x8(%ebp),%eax
c0105f2b:	83 c0 04             	add    $0x4,%eax
c0105f2e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
c0105f35:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0105f38:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0105f3b:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0105f3e:	0f ab 10             	bts    %edx,(%eax)
    nr_free += n;
c0105f41:	8b 15 ac 31 1b c0    	mov    0xc01b31ac,%edx
c0105f47:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105f4a:	01 d0                	add    %edx,%eax
c0105f4c:	a3 ac 31 1b c0       	mov    %eax,0xc01b31ac
    list_add(&free_list, &(base->page_link));
c0105f51:	8b 45 08             	mov    0x8(%ebp),%eax
c0105f54:	83 c0 0c             	add    $0xc,%eax
c0105f57:	c7 45 f0 a4 31 1b c0 	movl   $0xc01b31a4,-0x10(%ebp)
c0105f5e:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0105f61:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105f64:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0105f67:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0105f6a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0105f6d:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0105f70:	8b 40 04             	mov    0x4(%eax),%eax
c0105f73:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0105f76:	89 55 d0             	mov    %edx,-0x30(%ebp)
c0105f79:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0105f7c:	89 55 cc             	mov    %edx,-0x34(%ebp)
c0105f7f:	89 45 c8             	mov    %eax,-0x38(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0105f82:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0105f85:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0105f88:	89 10                	mov    %edx,(%eax)
c0105f8a:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0105f8d:	8b 10                	mov    (%eax),%edx
c0105f8f:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0105f92:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0105f95:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0105f98:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0105f9b:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0105f9e:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0105fa1:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0105fa4:	89 10                	mov    %edx,(%eax)
}
c0105fa6:	90                   	nop
c0105fa7:	c9                   	leave  
c0105fa8:	c3                   	ret    

c0105fa9 <default_alloc_pages>:

// LAB2 MODIFIED need to be rewritten
static struct Page *
default_alloc_pages(size_t n) {
c0105fa9:	55                   	push   %ebp
c0105faa:	89 e5                	mov    %esp,%ebp
c0105fac:	83 ec 58             	sub    $0x58,%esp
    assert(n > 0);
c0105faf:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0105fb3:	75 16                	jne    c0105fcb <default_alloc_pages+0x22>
c0105fb5:	68 e8 cd 10 c0       	push   $0xc010cde8
c0105fba:	68 ee cd 10 c0       	push   $0xc010cdee
c0105fbf:	6a 7d                	push   $0x7d
c0105fc1:	68 03 ce 10 c0       	push   $0xc010ce03
c0105fc6:	e8 32 a4 ff ff       	call   c01003fd <__panic>
    if (n > nr_free) {
c0105fcb:	a1 ac 31 1b c0       	mov    0xc01b31ac,%eax
c0105fd0:	3b 45 08             	cmp    0x8(%ebp),%eax
c0105fd3:	73 0a                	jae    c0105fdf <default_alloc_pages+0x36>
        return NULL;
c0105fd5:	b8 00 00 00 00       	mov    $0x0,%eax
c0105fda:	e9 41 01 00 00       	jmp    c0106120 <default_alloc_pages+0x177>
    }
    struct Page *page = NULL;
c0105fdf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    list_entry_t *le = &free_list;
c0105fe6:	c7 45 f0 a4 31 1b c0 	movl   $0xc01b31a4,-0x10(%ebp)
    while ((le = list_next(le)) != &free_list) {
c0105fed:	eb 1c                	jmp    c010600b <default_alloc_pages+0x62>
        struct Page *p = le2page(le, page_link);
c0105fef:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105ff2:	83 e8 0c             	sub    $0xc,%eax
c0105ff5:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (p->property >= n) {
c0105ff8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105ffb:	8b 40 08             	mov    0x8(%eax),%eax
c0105ffe:	3b 45 08             	cmp    0x8(%ebp),%eax
c0106001:	72 08                	jb     c010600b <default_alloc_pages+0x62>
            page = p;
c0106003:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106006:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
c0106009:	eb 18                	jmp    c0106023 <default_alloc_pages+0x7a>
c010600b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010600e:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0106011:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0106014:	8b 40 04             	mov    0x4(%eax),%eax
    if (n > nr_free) {
        return NULL;
    }
    struct Page *page = NULL;
    list_entry_t *le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c0106017:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010601a:	81 7d f0 a4 31 1b c0 	cmpl   $0xc01b31a4,-0x10(%ebp)
c0106021:	75 cc                	jne    c0105fef <default_alloc_pages+0x46>
        if (p->property >= n) {
            page = p;
            break;
        }
    }
    if (page != NULL) {
c0106023:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106027:	0f 84 f0 00 00 00    	je     c010611d <default_alloc_pages+0x174>
c010602d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106030:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0106033:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106036:	8b 40 04             	mov    0x4(%eax),%eax
        list_entry_t *following_le = list_next(le);
c0106039:	89 45 e0             	mov    %eax,-0x20(%ebp)
        list_del(&(page->page_link));
c010603c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010603f:	83 c0 0c             	add    $0xc,%eax
c0106042:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0106045:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106048:	8b 40 04             	mov    0x4(%eax),%eax
c010604b:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010604e:	8b 12                	mov    (%edx),%edx
c0106050:	89 55 c8             	mov    %edx,-0x38(%ebp)
c0106053:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0106056:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0106059:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c010605c:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010605f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0106062:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0106065:	89 10                	mov    %edx,(%eax)
        if (page->property > n) {
c0106067:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010606a:	8b 40 08             	mov    0x8(%eax),%eax
c010606d:	3b 45 08             	cmp    0x8(%ebp),%eax
c0106070:	0f 86 81 00 00 00    	jbe    c01060f7 <default_alloc_pages+0x14e>
            struct Page *p = page + n;                      // split the allocated page
c0106076:	8b 45 08             	mov    0x8(%ebp),%eax
c0106079:	c1 e0 05             	shl    $0x5,%eax
c010607c:	89 c2                	mov    %eax,%edx
c010607e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106081:	01 d0                	add    %edx,%eax
c0106083:	89 45 d8             	mov    %eax,-0x28(%ebp)
            p->property = page->property - n;               // set page num
c0106086:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106089:	8b 40 08             	mov    0x8(%eax),%eax
c010608c:	2b 45 08             	sub    0x8(%ebp),%eax
c010608f:	89 c2                	mov    %eax,%edx
c0106091:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0106094:	89 50 08             	mov    %edx,0x8(%eax)
            SetPageProperty(p);                             // mark as the head page
c0106097:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010609a:	83 c0 04             	add    $0x4,%eax
c010609d:	c7 45 d0 01 00 00 00 	movl   $0x1,-0x30(%ebp)
c01060a4:	89 45 b0             	mov    %eax,-0x50(%ebp)
c01060a7:	8b 45 b0             	mov    -0x50(%ebp),%eax
c01060aa:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01060ad:	0f ab 10             	bts    %edx,(%eax)
            list_add_before(following_le, &(p->page_link)); // add the remaining block before the formerly following block
c01060b0:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01060b3:	8d 50 0c             	lea    0xc(%eax),%edx
c01060b6:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01060b9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01060bc:	89 55 c0             	mov    %edx,-0x40(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c01060bf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01060c2:	8b 00                	mov    (%eax),%eax
c01060c4:	8b 55 c0             	mov    -0x40(%ebp),%edx
c01060c7:	89 55 bc             	mov    %edx,-0x44(%ebp)
c01060ca:	89 45 b8             	mov    %eax,-0x48(%ebp)
c01060cd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01060d0:	89 45 b4             	mov    %eax,-0x4c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c01060d3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01060d6:	8b 55 bc             	mov    -0x44(%ebp),%edx
c01060d9:	89 10                	mov    %edx,(%eax)
c01060db:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01060de:	8b 10                	mov    (%eax),%edx
c01060e0:	8b 45 b8             	mov    -0x48(%ebp),%eax
c01060e3:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c01060e6:	8b 45 bc             	mov    -0x44(%ebp),%eax
c01060e9:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c01060ec:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c01060ef:	8b 45 bc             	mov    -0x44(%ebp),%eax
c01060f2:	8b 55 b8             	mov    -0x48(%ebp),%edx
c01060f5:	89 10                	mov    %edx,(%eax)
        }
        nr_free -= n;
c01060f7:	a1 ac 31 1b c0       	mov    0xc01b31ac,%eax
c01060fc:	2b 45 08             	sub    0x8(%ebp),%eax
c01060ff:	a3 ac 31 1b c0       	mov    %eax,0xc01b31ac
        ClearPageProperty(page);    // mark as "not head page"
c0106104:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106107:	83 c0 04             	add    $0x4,%eax
c010610a:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
c0106111:	89 45 ac             	mov    %eax,-0x54(%ebp)
 * @nr:     the bit to clear
 * @addr:   the address to start counting from
 * */
static inline void
clear_bit(int nr, volatile void *addr) {
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0106114:	8b 45 ac             	mov    -0x54(%ebp),%eax
c0106117:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010611a:	0f b3 10             	btr    %edx,(%eax)
    }
    return page;
c010611d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0106120:	c9                   	leave  
c0106121:	c3                   	ret    

c0106122 <default_free_pages>:

// LAB2 MODIFIED
static void
default_free_pages(struct Page *base, size_t n) {
c0106122:	55                   	push   %ebp
c0106123:	89 e5                	mov    %esp,%ebp
c0106125:	81 ec 88 00 00 00    	sub    $0x88,%esp
    assert(n > 0);
c010612b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010612f:	75 19                	jne    c010614a <default_free_pages+0x28>
c0106131:	68 e8 cd 10 c0       	push   $0xc010cde8
c0106136:	68 ee cd 10 c0       	push   $0xc010cdee
c010613b:	68 9c 00 00 00       	push   $0x9c
c0106140:	68 03 ce 10 c0       	push   $0xc010ce03
c0106145:	e8 b3 a2 ff ff       	call   c01003fd <__panic>
    struct Page *p = base;
c010614a:	8b 45 08             	mov    0x8(%ebp),%eax
c010614d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (; p != base + n; p ++) {
c0106150:	e9 8f 00 00 00       	jmp    c01061e4 <default_free_pages+0xc2>
        assert(!PageReserved(p) && !PageProperty(p));
c0106155:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106158:	83 c0 04             	add    $0x4,%eax
c010615b:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
c0106162:	89 45 bc             	mov    %eax,-0x44(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0106165:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0106168:	8b 55 c0             	mov    -0x40(%ebp),%edx
c010616b:	0f a3 10             	bt     %edx,(%eax)
c010616e:	19 c0                	sbb    %eax,%eax
c0106170:	89 45 b8             	mov    %eax,-0x48(%ebp)
    return oldbit != 0;
c0106173:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
c0106177:	0f 95 c0             	setne  %al
c010617a:	0f b6 c0             	movzbl %al,%eax
c010617d:	85 c0                	test   %eax,%eax
c010617f:	75 2c                	jne    c01061ad <default_free_pages+0x8b>
c0106181:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106184:	83 c0 04             	add    $0x4,%eax
c0106187:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
c010618e:	89 45 b4             	mov    %eax,-0x4c(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0106191:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0106194:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0106197:	0f a3 10             	bt     %edx,(%eax)
c010619a:	19 c0                	sbb    %eax,%eax
c010619c:	89 45 b0             	mov    %eax,-0x50(%ebp)
    return oldbit != 0;
c010619f:	83 7d b0 00          	cmpl   $0x0,-0x50(%ebp)
c01061a3:	0f 95 c0             	setne  %al
c01061a6:	0f b6 c0             	movzbl %al,%eax
c01061a9:	85 c0                	test   %eax,%eax
c01061ab:	74 19                	je     c01061c6 <default_free_pages+0xa4>
c01061ad:	68 2c ce 10 c0       	push   $0xc010ce2c
c01061b2:	68 ee cd 10 c0       	push   $0xc010cdee
c01061b7:	68 9f 00 00 00       	push   $0x9f
c01061bc:	68 03 ce 10 c0       	push   $0xc010ce03
c01061c1:	e8 37 a2 ff ff       	call   c01003fd <__panic>
        p->flags = 0;
c01061c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01061c9:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
        set_page_ref(p, 0);     // clear ref flag
c01061d0:	83 ec 08             	sub    $0x8,%esp
c01061d3:	6a 00                	push   $0x0
c01061d5:	ff 75 f4             	pushl  -0xc(%ebp)
c01061d8:	e8 5e fc ff ff       	call   c0105e3b <set_page_ref>
c01061dd:	83 c4 10             	add    $0x10,%esp
// LAB2 MODIFIED
static void
default_free_pages(struct Page *base, size_t n) {
    assert(n > 0);
    struct Page *p = base;
    for (; p != base + n; p ++) {
c01061e0:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
c01061e4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01061e7:	c1 e0 05             	shl    $0x5,%eax
c01061ea:	89 c2                	mov    %eax,%edx
c01061ec:	8b 45 08             	mov    0x8(%ebp),%eax
c01061ef:	01 d0                	add    %edx,%eax
c01061f1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01061f4:	0f 85 5b ff ff ff    	jne    c0106155 <default_free_pages+0x33>
        assert(!PageReserved(p) && !PageProperty(p));
        p->flags = 0;
        set_page_ref(p, 0);     // clear ref flag
    }
    base->property = n;
c01061fa:	8b 45 08             	mov    0x8(%ebp),%eax
c01061fd:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106200:	89 50 08             	mov    %edx,0x8(%eax)
    SetPageProperty(base);
c0106203:	8b 45 08             	mov    0x8(%ebp),%eax
c0106206:	83 c0 04             	add    $0x4,%eax
c0106209:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
c0106210:	89 45 ac             	mov    %eax,-0x54(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0106213:	8b 45 ac             	mov    -0x54(%ebp),%eax
c0106216:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106219:	0f ab 10             	bts    %edx,(%eax)
c010621c:	c7 45 e8 a4 31 1b c0 	movl   $0xc01b31a4,-0x18(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0106223:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106226:	8b 40 04             	mov    0x4(%eax),%eax
    // try to extend free block
    list_entry_t *le = list_next(&free_list);
c0106229:	89 45 f0             	mov    %eax,-0x10(%ebp)
    while (le != &free_list) {
c010622c:	e9 0e 01 00 00       	jmp    c010633f <default_free_pages+0x21d>
        p = le2page(le, page_link);
c0106231:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106234:	83 e8 0c             	sub    $0xc,%eax
c0106237:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010623a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010623d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0106240:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106243:	8b 40 04             	mov    0x4(%eax),%eax
        le = list_next(le);
c0106246:	89 45 f0             	mov    %eax,-0x10(%ebp)
        // page is exactly before one page
        if (base + base->property == p) {
c0106249:	8b 45 08             	mov    0x8(%ebp),%eax
c010624c:	8b 40 08             	mov    0x8(%eax),%eax
c010624f:	c1 e0 05             	shl    $0x5,%eax
c0106252:	89 c2                	mov    %eax,%edx
c0106254:	8b 45 08             	mov    0x8(%ebp),%eax
c0106257:	01 d0                	add    %edx,%eax
c0106259:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010625c:	75 64                	jne    c01062c2 <default_free_pages+0x1a0>
            base->property += p->property;
c010625e:	8b 45 08             	mov    0x8(%ebp),%eax
c0106261:	8b 50 08             	mov    0x8(%eax),%edx
c0106264:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106267:	8b 40 08             	mov    0x8(%eax),%eax
c010626a:	01 c2                	add    %eax,%edx
c010626c:	8b 45 08             	mov    0x8(%ebp),%eax
c010626f:	89 50 08             	mov    %edx,0x8(%eax)
            p->property = 0;     // clear properties of p
c0106272:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106275:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
            ClearPageProperty(p);
c010627c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010627f:	83 c0 04             	add    $0x4,%eax
c0106282:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
c0106289:	89 45 a0             	mov    %eax,-0x60(%ebp)
 * @nr:     the bit to clear
 * @addr:   the address to start counting from
 * */
static inline void
clear_bit(int nr, volatile void *addr) {
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c010628c:	8b 45 a0             	mov    -0x60(%ebp),%eax
c010628f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0106292:	0f b3 10             	btr    %edx,(%eax)
            list_del(&(p->page_link));
c0106295:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106298:	83 c0 0c             	add    $0xc,%eax
c010629b:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010629e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01062a1:	8b 40 04             	mov    0x4(%eax),%eax
c01062a4:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01062a7:	8b 12                	mov    (%edx),%edx
c01062a9:	89 55 a8             	mov    %edx,-0x58(%ebp)
c01062ac:	89 45 a4             	mov    %eax,-0x5c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c01062af:	8b 45 a8             	mov    -0x58(%ebp),%eax
c01062b2:	8b 55 a4             	mov    -0x5c(%ebp),%edx
c01062b5:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c01062b8:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c01062bb:	8b 55 a8             	mov    -0x58(%ebp),%edx
c01062be:	89 10                	mov    %edx,(%eax)
c01062c0:	eb 7d                	jmp    c010633f <default_free_pages+0x21d>
        }
        // page is exactly after one page
        else if (p + p->property == base) {
c01062c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01062c5:	8b 40 08             	mov    0x8(%eax),%eax
c01062c8:	c1 e0 05             	shl    $0x5,%eax
c01062cb:	89 c2                	mov    %eax,%edx
c01062cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01062d0:	01 d0                	add    %edx,%eax
c01062d2:	3b 45 08             	cmp    0x8(%ebp),%eax
c01062d5:	75 68                	jne    c010633f <default_free_pages+0x21d>
            p->property += base->property;
c01062d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01062da:	8b 50 08             	mov    0x8(%eax),%edx
c01062dd:	8b 45 08             	mov    0x8(%ebp),%eax
c01062e0:	8b 40 08             	mov    0x8(%eax),%eax
c01062e3:	01 c2                	add    %eax,%edx
c01062e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01062e8:	89 50 08             	mov    %edx,0x8(%eax)
            base->property = 0;     // clear properties of base
c01062eb:	8b 45 08             	mov    0x8(%ebp),%eax
c01062ee:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
            ClearPageProperty(base);
c01062f5:	8b 45 08             	mov    0x8(%ebp),%eax
c01062f8:	83 c0 04             	add    $0x4,%eax
c01062fb:	c7 45 cc 01 00 00 00 	movl   $0x1,-0x34(%ebp)
c0106302:	89 45 94             	mov    %eax,-0x6c(%ebp)
c0106305:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0106308:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010630b:	0f b3 10             	btr    %edx,(%eax)
            base = p;
c010630e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106311:	89 45 08             	mov    %eax,0x8(%ebp)
            list_del(&(p->page_link));
c0106314:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106317:	83 c0 0c             	add    $0xc,%eax
c010631a:	89 45 d8             	mov    %eax,-0x28(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010631d:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0106320:	8b 40 04             	mov    0x4(%eax),%eax
c0106323:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0106326:	8b 12                	mov    (%edx),%edx
c0106328:	89 55 9c             	mov    %edx,-0x64(%ebp)
c010632b:	89 45 98             	mov    %eax,-0x68(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010632e:	8b 45 9c             	mov    -0x64(%ebp),%eax
c0106331:	8b 55 98             	mov    -0x68(%ebp),%edx
c0106334:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0106337:	8b 45 98             	mov    -0x68(%ebp),%eax
c010633a:	8b 55 9c             	mov    -0x64(%ebp),%edx
c010633d:	89 10                	mov    %edx,(%eax)
    }
    base->property = n;
    SetPageProperty(base);
    // try to extend free block
    list_entry_t *le = list_next(&free_list);
    while (le != &free_list) {
c010633f:	81 7d f0 a4 31 1b c0 	cmpl   $0xc01b31a4,-0x10(%ebp)
c0106346:	0f 85 e5 fe ff ff    	jne    c0106231 <default_free_pages+0x10f>
c010634c:	c7 45 d0 a4 31 1b c0 	movl   $0xc01b31a4,-0x30(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0106353:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0106356:	8b 40 04             	mov    0x4(%eax),%eax
            base = p;
            list_del(&(p->page_link));
        }
    }
    // search for a place to add page into list
    le = list_next(&free_list);
c0106359:	89 45 f0             	mov    %eax,-0x10(%ebp)
    while (le != &free_list) {
c010635c:	eb 20                	jmp    c010637e <default_free_pages+0x25c>
        p = le2page(le, page_link);
c010635e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106361:	83 e8 0c             	sub    $0xc,%eax
c0106364:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (p > base) {
c0106367:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010636a:	3b 45 08             	cmp    0x8(%ebp),%eax
c010636d:	77 1a                	ja     c0106389 <default_free_pages+0x267>
c010636f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106372:	89 45 c8             	mov    %eax,-0x38(%ebp)
c0106375:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0106378:	8b 40 04             	mov    0x4(%eax),%eax
            break;
        }
        le = list_next(le);
c010637b:	89 45 f0             	mov    %eax,-0x10(%ebp)
            list_del(&(p->page_link));
        }
    }
    // search for a place to add page into list
    le = list_next(&free_list);
    while (le != &free_list) {
c010637e:	81 7d f0 a4 31 1b c0 	cmpl   $0xc01b31a4,-0x10(%ebp)
c0106385:	75 d7                	jne    c010635e <default_free_pages+0x23c>
c0106387:	eb 01                	jmp    c010638a <default_free_pages+0x268>
        p = le2page(le, page_link);
        if (p > base) {
            break;
c0106389:	90                   	nop
        }
        le = list_next(le);
    }
    nr_free += n;
c010638a:	8b 15 ac 31 1b c0    	mov    0xc01b31ac,%edx
c0106390:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106393:	01 d0                	add    %edx,%eax
c0106395:	a3 ac 31 1b c0       	mov    %eax,0xc01b31ac
    list_add_before(le, &(base->page_link)); 
c010639a:	8b 45 08             	mov    0x8(%ebp),%eax
c010639d:	8d 50 0c             	lea    0xc(%eax),%edx
c01063a0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01063a3:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c01063a6:	89 55 90             	mov    %edx,-0x70(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c01063a9:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01063ac:	8b 00                	mov    (%eax),%eax
c01063ae:	8b 55 90             	mov    -0x70(%ebp),%edx
c01063b1:	89 55 8c             	mov    %edx,-0x74(%ebp)
c01063b4:	89 45 88             	mov    %eax,-0x78(%ebp)
c01063b7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01063ba:	89 45 84             	mov    %eax,-0x7c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c01063bd:	8b 45 84             	mov    -0x7c(%ebp),%eax
c01063c0:	8b 55 8c             	mov    -0x74(%ebp),%edx
c01063c3:	89 10                	mov    %edx,(%eax)
c01063c5:	8b 45 84             	mov    -0x7c(%ebp),%eax
c01063c8:	8b 10                	mov    (%eax),%edx
c01063ca:	8b 45 88             	mov    -0x78(%ebp),%eax
c01063cd:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c01063d0:	8b 45 8c             	mov    -0x74(%ebp),%eax
c01063d3:	8b 55 84             	mov    -0x7c(%ebp),%edx
c01063d6:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c01063d9:	8b 45 8c             	mov    -0x74(%ebp),%eax
c01063dc:	8b 55 88             	mov    -0x78(%ebp),%edx
c01063df:	89 10                	mov    %edx,(%eax)
}
c01063e1:	90                   	nop
c01063e2:	c9                   	leave  
c01063e3:	c3                   	ret    

c01063e4 <default_nr_free_pages>:


static size_t
default_nr_free_pages(void) {
c01063e4:	55                   	push   %ebp
c01063e5:	89 e5                	mov    %esp,%ebp
    return nr_free;
c01063e7:	a1 ac 31 1b c0       	mov    0xc01b31ac,%eax
}
c01063ec:	5d                   	pop    %ebp
c01063ed:	c3                   	ret    

c01063ee <basic_check>:

static void
basic_check(void) {
c01063ee:	55                   	push   %ebp
c01063ef:	89 e5                	mov    %esp,%ebp
c01063f1:	83 ec 38             	sub    $0x38,%esp
    struct Page *p0, *p1, *p2;
    p0 = p1 = p2 = NULL;
c01063f4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01063fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01063fe:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106401:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106404:	89 45 ec             	mov    %eax,-0x14(%ebp)
    assert((p0 = alloc_page()) != NULL);
c0106407:	83 ec 0c             	sub    $0xc,%esp
c010640a:	6a 01                	push   $0x1
c010640c:	e8 c7 0c 00 00       	call   c01070d8 <alloc_pages>
c0106411:	83 c4 10             	add    $0x10,%esp
c0106414:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0106417:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010641b:	75 19                	jne    c0106436 <basic_check+0x48>
c010641d:	68 51 ce 10 c0       	push   $0xc010ce51
c0106422:	68 ee cd 10 c0       	push   $0xc010cdee
c0106427:	68 d1 00 00 00       	push   $0xd1
c010642c:	68 03 ce 10 c0       	push   $0xc010ce03
c0106431:	e8 c7 9f ff ff       	call   c01003fd <__panic>
    assert((p1 = alloc_page()) != NULL);
c0106436:	83 ec 0c             	sub    $0xc,%esp
c0106439:	6a 01                	push   $0x1
c010643b:	e8 98 0c 00 00       	call   c01070d8 <alloc_pages>
c0106440:	83 c4 10             	add    $0x10,%esp
c0106443:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106446:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010644a:	75 19                	jne    c0106465 <basic_check+0x77>
c010644c:	68 6d ce 10 c0       	push   $0xc010ce6d
c0106451:	68 ee cd 10 c0       	push   $0xc010cdee
c0106456:	68 d2 00 00 00       	push   $0xd2
c010645b:	68 03 ce 10 c0       	push   $0xc010ce03
c0106460:	e8 98 9f ff ff       	call   c01003fd <__panic>
    assert((p2 = alloc_page()) != NULL);
c0106465:	83 ec 0c             	sub    $0xc,%esp
c0106468:	6a 01                	push   $0x1
c010646a:	e8 69 0c 00 00       	call   c01070d8 <alloc_pages>
c010646f:	83 c4 10             	add    $0x10,%esp
c0106472:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0106475:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106479:	75 19                	jne    c0106494 <basic_check+0xa6>
c010647b:	68 89 ce 10 c0       	push   $0xc010ce89
c0106480:	68 ee cd 10 c0       	push   $0xc010cdee
c0106485:	68 d3 00 00 00       	push   $0xd3
c010648a:	68 03 ce 10 c0       	push   $0xc010ce03
c010648f:	e8 69 9f ff ff       	call   c01003fd <__panic>

    assert(p0 != p1 && p0 != p2 && p1 != p2);
c0106494:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106497:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010649a:	74 10                	je     c01064ac <basic_check+0xbe>
c010649c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010649f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01064a2:	74 08                	je     c01064ac <basic_check+0xbe>
c01064a4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01064a7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01064aa:	75 19                	jne    c01064c5 <basic_check+0xd7>
c01064ac:	68 a8 ce 10 c0       	push   $0xc010cea8
c01064b1:	68 ee cd 10 c0       	push   $0xc010cdee
c01064b6:	68 d5 00 00 00       	push   $0xd5
c01064bb:	68 03 ce 10 c0       	push   $0xc010ce03
c01064c0:	e8 38 9f ff ff       	call   c01003fd <__panic>
    assert(page_ref(p0) == 0 && page_ref(p1) == 0 && page_ref(p2) == 0);
c01064c5:	83 ec 0c             	sub    $0xc,%esp
c01064c8:	ff 75 ec             	pushl  -0x14(%ebp)
c01064cb:	e8 61 f9 ff ff       	call   c0105e31 <page_ref>
c01064d0:	83 c4 10             	add    $0x10,%esp
c01064d3:	85 c0                	test   %eax,%eax
c01064d5:	75 24                	jne    c01064fb <basic_check+0x10d>
c01064d7:	83 ec 0c             	sub    $0xc,%esp
c01064da:	ff 75 f0             	pushl  -0x10(%ebp)
c01064dd:	e8 4f f9 ff ff       	call   c0105e31 <page_ref>
c01064e2:	83 c4 10             	add    $0x10,%esp
c01064e5:	85 c0                	test   %eax,%eax
c01064e7:	75 12                	jne    c01064fb <basic_check+0x10d>
c01064e9:	83 ec 0c             	sub    $0xc,%esp
c01064ec:	ff 75 f4             	pushl  -0xc(%ebp)
c01064ef:	e8 3d f9 ff ff       	call   c0105e31 <page_ref>
c01064f4:	83 c4 10             	add    $0x10,%esp
c01064f7:	85 c0                	test   %eax,%eax
c01064f9:	74 19                	je     c0106514 <basic_check+0x126>
c01064fb:	68 cc ce 10 c0       	push   $0xc010cecc
c0106500:	68 ee cd 10 c0       	push   $0xc010cdee
c0106505:	68 d6 00 00 00       	push   $0xd6
c010650a:	68 03 ce 10 c0       	push   $0xc010ce03
c010650f:	e8 e9 9e ff ff       	call   c01003fd <__panic>

    assert(page2pa(p0) < npage * PGSIZE);
c0106514:	83 ec 0c             	sub    $0xc,%esp
c0106517:	ff 75 ec             	pushl  -0x14(%ebp)
c010651a:	e8 ff f8 ff ff       	call   c0105e1e <page2pa>
c010651f:	83 c4 10             	add    $0x10,%esp
c0106522:	89 c2                	mov    %eax,%edx
c0106524:	a1 80 0f 1b c0       	mov    0xc01b0f80,%eax
c0106529:	c1 e0 0c             	shl    $0xc,%eax
c010652c:	39 c2                	cmp    %eax,%edx
c010652e:	72 19                	jb     c0106549 <basic_check+0x15b>
c0106530:	68 08 cf 10 c0       	push   $0xc010cf08
c0106535:	68 ee cd 10 c0       	push   $0xc010cdee
c010653a:	68 d8 00 00 00       	push   $0xd8
c010653f:	68 03 ce 10 c0       	push   $0xc010ce03
c0106544:	e8 b4 9e ff ff       	call   c01003fd <__panic>
    assert(page2pa(p1) < npage * PGSIZE);
c0106549:	83 ec 0c             	sub    $0xc,%esp
c010654c:	ff 75 f0             	pushl  -0x10(%ebp)
c010654f:	e8 ca f8 ff ff       	call   c0105e1e <page2pa>
c0106554:	83 c4 10             	add    $0x10,%esp
c0106557:	89 c2                	mov    %eax,%edx
c0106559:	a1 80 0f 1b c0       	mov    0xc01b0f80,%eax
c010655e:	c1 e0 0c             	shl    $0xc,%eax
c0106561:	39 c2                	cmp    %eax,%edx
c0106563:	72 19                	jb     c010657e <basic_check+0x190>
c0106565:	68 25 cf 10 c0       	push   $0xc010cf25
c010656a:	68 ee cd 10 c0       	push   $0xc010cdee
c010656f:	68 d9 00 00 00       	push   $0xd9
c0106574:	68 03 ce 10 c0       	push   $0xc010ce03
c0106579:	e8 7f 9e ff ff       	call   c01003fd <__panic>
    assert(page2pa(p2) < npage * PGSIZE);
c010657e:	83 ec 0c             	sub    $0xc,%esp
c0106581:	ff 75 f4             	pushl  -0xc(%ebp)
c0106584:	e8 95 f8 ff ff       	call   c0105e1e <page2pa>
c0106589:	83 c4 10             	add    $0x10,%esp
c010658c:	89 c2                	mov    %eax,%edx
c010658e:	a1 80 0f 1b c0       	mov    0xc01b0f80,%eax
c0106593:	c1 e0 0c             	shl    $0xc,%eax
c0106596:	39 c2                	cmp    %eax,%edx
c0106598:	72 19                	jb     c01065b3 <basic_check+0x1c5>
c010659a:	68 42 cf 10 c0       	push   $0xc010cf42
c010659f:	68 ee cd 10 c0       	push   $0xc010cdee
c01065a4:	68 da 00 00 00       	push   $0xda
c01065a9:	68 03 ce 10 c0       	push   $0xc010ce03
c01065ae:	e8 4a 9e ff ff       	call   c01003fd <__panic>

    list_entry_t free_list_store = free_list;
c01065b3:	a1 a4 31 1b c0       	mov    0xc01b31a4,%eax
c01065b8:	8b 15 a8 31 1b c0    	mov    0xc01b31a8,%edx
c01065be:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01065c1:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c01065c4:	c7 45 e4 a4 31 1b c0 	movl   $0xc01b31a4,-0x1c(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c01065cb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01065ce:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01065d1:	89 50 04             	mov    %edx,0x4(%eax)
c01065d4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01065d7:	8b 50 04             	mov    0x4(%eax),%edx
c01065da:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01065dd:	89 10                	mov    %edx,(%eax)
c01065df:	c7 45 d8 a4 31 1b c0 	movl   $0xc01b31a4,-0x28(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c01065e6:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01065e9:	8b 40 04             	mov    0x4(%eax),%eax
c01065ec:	39 45 d8             	cmp    %eax,-0x28(%ebp)
c01065ef:	0f 94 c0             	sete   %al
c01065f2:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c01065f5:	85 c0                	test   %eax,%eax
c01065f7:	75 19                	jne    c0106612 <basic_check+0x224>
c01065f9:	68 5f cf 10 c0       	push   $0xc010cf5f
c01065fe:	68 ee cd 10 c0       	push   $0xc010cdee
c0106603:	68 de 00 00 00       	push   $0xde
c0106608:	68 03 ce 10 c0       	push   $0xc010ce03
c010660d:	e8 eb 9d ff ff       	call   c01003fd <__panic>

    unsigned int nr_free_store = nr_free;
c0106612:	a1 ac 31 1b c0       	mov    0xc01b31ac,%eax
c0106617:	89 45 e0             	mov    %eax,-0x20(%ebp)
    nr_free = 0;
c010661a:	c7 05 ac 31 1b c0 00 	movl   $0x0,0xc01b31ac
c0106621:	00 00 00 

    assert(alloc_page() == NULL);
c0106624:	83 ec 0c             	sub    $0xc,%esp
c0106627:	6a 01                	push   $0x1
c0106629:	e8 aa 0a 00 00       	call   c01070d8 <alloc_pages>
c010662e:	83 c4 10             	add    $0x10,%esp
c0106631:	85 c0                	test   %eax,%eax
c0106633:	74 19                	je     c010664e <basic_check+0x260>
c0106635:	68 76 cf 10 c0       	push   $0xc010cf76
c010663a:	68 ee cd 10 c0       	push   $0xc010cdee
c010663f:	68 e3 00 00 00       	push   $0xe3
c0106644:	68 03 ce 10 c0       	push   $0xc010ce03
c0106649:	e8 af 9d ff ff       	call   c01003fd <__panic>

    free_page(p0);
c010664e:	83 ec 08             	sub    $0x8,%esp
c0106651:	6a 01                	push   $0x1
c0106653:	ff 75 ec             	pushl  -0x14(%ebp)
c0106656:	e8 e9 0a 00 00       	call   c0107144 <free_pages>
c010665b:	83 c4 10             	add    $0x10,%esp
    free_page(p1);
c010665e:	83 ec 08             	sub    $0x8,%esp
c0106661:	6a 01                	push   $0x1
c0106663:	ff 75 f0             	pushl  -0x10(%ebp)
c0106666:	e8 d9 0a 00 00       	call   c0107144 <free_pages>
c010666b:	83 c4 10             	add    $0x10,%esp
    free_page(p2);
c010666e:	83 ec 08             	sub    $0x8,%esp
c0106671:	6a 01                	push   $0x1
c0106673:	ff 75 f4             	pushl  -0xc(%ebp)
c0106676:	e8 c9 0a 00 00       	call   c0107144 <free_pages>
c010667b:	83 c4 10             	add    $0x10,%esp
    assert(nr_free == 3);
c010667e:	a1 ac 31 1b c0       	mov    0xc01b31ac,%eax
c0106683:	83 f8 03             	cmp    $0x3,%eax
c0106686:	74 19                	je     c01066a1 <basic_check+0x2b3>
c0106688:	68 8b cf 10 c0       	push   $0xc010cf8b
c010668d:	68 ee cd 10 c0       	push   $0xc010cdee
c0106692:	68 e8 00 00 00       	push   $0xe8
c0106697:	68 03 ce 10 c0       	push   $0xc010ce03
c010669c:	e8 5c 9d ff ff       	call   c01003fd <__panic>

    assert((p0 = alloc_page()) != NULL);
c01066a1:	83 ec 0c             	sub    $0xc,%esp
c01066a4:	6a 01                	push   $0x1
c01066a6:	e8 2d 0a 00 00       	call   c01070d8 <alloc_pages>
c01066ab:	83 c4 10             	add    $0x10,%esp
c01066ae:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01066b1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01066b5:	75 19                	jne    c01066d0 <basic_check+0x2e2>
c01066b7:	68 51 ce 10 c0       	push   $0xc010ce51
c01066bc:	68 ee cd 10 c0       	push   $0xc010cdee
c01066c1:	68 ea 00 00 00       	push   $0xea
c01066c6:	68 03 ce 10 c0       	push   $0xc010ce03
c01066cb:	e8 2d 9d ff ff       	call   c01003fd <__panic>
    assert((p1 = alloc_page()) != NULL);
c01066d0:	83 ec 0c             	sub    $0xc,%esp
c01066d3:	6a 01                	push   $0x1
c01066d5:	e8 fe 09 00 00       	call   c01070d8 <alloc_pages>
c01066da:	83 c4 10             	add    $0x10,%esp
c01066dd:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01066e0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01066e4:	75 19                	jne    c01066ff <basic_check+0x311>
c01066e6:	68 6d ce 10 c0       	push   $0xc010ce6d
c01066eb:	68 ee cd 10 c0       	push   $0xc010cdee
c01066f0:	68 eb 00 00 00       	push   $0xeb
c01066f5:	68 03 ce 10 c0       	push   $0xc010ce03
c01066fa:	e8 fe 9c ff ff       	call   c01003fd <__panic>
    assert((p2 = alloc_page()) != NULL);
c01066ff:	83 ec 0c             	sub    $0xc,%esp
c0106702:	6a 01                	push   $0x1
c0106704:	e8 cf 09 00 00       	call   c01070d8 <alloc_pages>
c0106709:	83 c4 10             	add    $0x10,%esp
c010670c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010670f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106713:	75 19                	jne    c010672e <basic_check+0x340>
c0106715:	68 89 ce 10 c0       	push   $0xc010ce89
c010671a:	68 ee cd 10 c0       	push   $0xc010cdee
c010671f:	68 ec 00 00 00       	push   $0xec
c0106724:	68 03 ce 10 c0       	push   $0xc010ce03
c0106729:	e8 cf 9c ff ff       	call   c01003fd <__panic>

    assert(alloc_page() == NULL);
c010672e:	83 ec 0c             	sub    $0xc,%esp
c0106731:	6a 01                	push   $0x1
c0106733:	e8 a0 09 00 00       	call   c01070d8 <alloc_pages>
c0106738:	83 c4 10             	add    $0x10,%esp
c010673b:	85 c0                	test   %eax,%eax
c010673d:	74 19                	je     c0106758 <basic_check+0x36a>
c010673f:	68 76 cf 10 c0       	push   $0xc010cf76
c0106744:	68 ee cd 10 c0       	push   $0xc010cdee
c0106749:	68 ee 00 00 00       	push   $0xee
c010674e:	68 03 ce 10 c0       	push   $0xc010ce03
c0106753:	e8 a5 9c ff ff       	call   c01003fd <__panic>

    free_page(p0);
c0106758:	83 ec 08             	sub    $0x8,%esp
c010675b:	6a 01                	push   $0x1
c010675d:	ff 75 ec             	pushl  -0x14(%ebp)
c0106760:	e8 df 09 00 00       	call   c0107144 <free_pages>
c0106765:	83 c4 10             	add    $0x10,%esp
c0106768:	c7 45 e8 a4 31 1b c0 	movl   $0xc01b31a4,-0x18(%ebp)
c010676f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106772:	8b 40 04             	mov    0x4(%eax),%eax
c0106775:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c0106778:	0f 94 c0             	sete   %al
c010677b:	0f b6 c0             	movzbl %al,%eax
    assert(!list_empty(&free_list));
c010677e:	85 c0                	test   %eax,%eax
c0106780:	74 19                	je     c010679b <basic_check+0x3ad>
c0106782:	68 98 cf 10 c0       	push   $0xc010cf98
c0106787:	68 ee cd 10 c0       	push   $0xc010cdee
c010678c:	68 f1 00 00 00       	push   $0xf1
c0106791:	68 03 ce 10 c0       	push   $0xc010ce03
c0106796:	e8 62 9c ff ff       	call   c01003fd <__panic>

    struct Page *p;
    assert((p = alloc_page()) == p0);
c010679b:	83 ec 0c             	sub    $0xc,%esp
c010679e:	6a 01                	push   $0x1
c01067a0:	e8 33 09 00 00       	call   c01070d8 <alloc_pages>
c01067a5:	83 c4 10             	add    $0x10,%esp
c01067a8:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01067ab:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01067ae:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01067b1:	74 19                	je     c01067cc <basic_check+0x3de>
c01067b3:	68 b0 cf 10 c0       	push   $0xc010cfb0
c01067b8:	68 ee cd 10 c0       	push   $0xc010cdee
c01067bd:	68 f4 00 00 00       	push   $0xf4
c01067c2:	68 03 ce 10 c0       	push   $0xc010ce03
c01067c7:	e8 31 9c ff ff       	call   c01003fd <__panic>
    assert(alloc_page() == NULL);
c01067cc:	83 ec 0c             	sub    $0xc,%esp
c01067cf:	6a 01                	push   $0x1
c01067d1:	e8 02 09 00 00       	call   c01070d8 <alloc_pages>
c01067d6:	83 c4 10             	add    $0x10,%esp
c01067d9:	85 c0                	test   %eax,%eax
c01067db:	74 19                	je     c01067f6 <basic_check+0x408>
c01067dd:	68 76 cf 10 c0       	push   $0xc010cf76
c01067e2:	68 ee cd 10 c0       	push   $0xc010cdee
c01067e7:	68 f5 00 00 00       	push   $0xf5
c01067ec:	68 03 ce 10 c0       	push   $0xc010ce03
c01067f1:	e8 07 9c ff ff       	call   c01003fd <__panic>

    assert(nr_free == 0);
c01067f6:	a1 ac 31 1b c0       	mov    0xc01b31ac,%eax
c01067fb:	85 c0                	test   %eax,%eax
c01067fd:	74 19                	je     c0106818 <basic_check+0x42a>
c01067ff:	68 c9 cf 10 c0       	push   $0xc010cfc9
c0106804:	68 ee cd 10 c0       	push   $0xc010cdee
c0106809:	68 f7 00 00 00       	push   $0xf7
c010680e:	68 03 ce 10 c0       	push   $0xc010ce03
c0106813:	e8 e5 9b ff ff       	call   c01003fd <__panic>
    free_list = free_list_store;
c0106818:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010681b:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010681e:	a3 a4 31 1b c0       	mov    %eax,0xc01b31a4
c0106823:	89 15 a8 31 1b c0    	mov    %edx,0xc01b31a8
    nr_free = nr_free_store;
c0106829:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010682c:	a3 ac 31 1b c0       	mov    %eax,0xc01b31ac

    free_page(p);
c0106831:	83 ec 08             	sub    $0x8,%esp
c0106834:	6a 01                	push   $0x1
c0106836:	ff 75 dc             	pushl  -0x24(%ebp)
c0106839:	e8 06 09 00 00       	call   c0107144 <free_pages>
c010683e:	83 c4 10             	add    $0x10,%esp
    free_page(p1);
c0106841:	83 ec 08             	sub    $0x8,%esp
c0106844:	6a 01                	push   $0x1
c0106846:	ff 75 f0             	pushl  -0x10(%ebp)
c0106849:	e8 f6 08 00 00       	call   c0107144 <free_pages>
c010684e:	83 c4 10             	add    $0x10,%esp
    free_page(p2);
c0106851:	83 ec 08             	sub    $0x8,%esp
c0106854:	6a 01                	push   $0x1
c0106856:	ff 75 f4             	pushl  -0xc(%ebp)
c0106859:	e8 e6 08 00 00       	call   c0107144 <free_pages>
c010685e:	83 c4 10             	add    $0x10,%esp
}
c0106861:	90                   	nop
c0106862:	c9                   	leave  
c0106863:	c3                   	ret    

c0106864 <default_check>:

// LAB2: below code is used to check the first fit allocation algorithm (your EXERCISE 1) 
// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
static void
default_check(void) {
c0106864:	55                   	push   %ebp
c0106865:	89 e5                	mov    %esp,%ebp
c0106867:	81 ec 88 00 00 00    	sub    $0x88,%esp
    int count = 0, total = 0;
c010686d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0106874:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    list_entry_t *le = &free_list;
c010687b:	c7 45 ec a4 31 1b c0 	movl   $0xc01b31a4,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c0106882:	eb 60                	jmp    c01068e4 <default_check+0x80>
        struct Page *p = le2page(le, page_link);
c0106884:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106887:	83 e8 0c             	sub    $0xc,%eax
c010688a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        assert(PageProperty(p));
c010688d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106890:	83 c0 04             	add    $0x4,%eax
c0106893:	c7 45 b0 01 00 00 00 	movl   $0x1,-0x50(%ebp)
c010689a:	89 45 ac             	mov    %eax,-0x54(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010689d:	8b 45 ac             	mov    -0x54(%ebp),%eax
c01068a0:	8b 55 b0             	mov    -0x50(%ebp),%edx
c01068a3:	0f a3 10             	bt     %edx,(%eax)
c01068a6:	19 c0                	sbb    %eax,%eax
c01068a8:	89 45 a8             	mov    %eax,-0x58(%ebp)
    return oldbit != 0;
c01068ab:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
c01068af:	0f 95 c0             	setne  %al
c01068b2:	0f b6 c0             	movzbl %al,%eax
c01068b5:	85 c0                	test   %eax,%eax
c01068b7:	75 19                	jne    c01068d2 <default_check+0x6e>
c01068b9:	68 d6 cf 10 c0       	push   $0xc010cfd6
c01068be:	68 ee cd 10 c0       	push   $0xc010cdee
c01068c3:	68 08 01 00 00       	push   $0x108
c01068c8:	68 03 ce 10 c0       	push   $0xc010ce03
c01068cd:	e8 2b 9b ff ff       	call   c01003fd <__panic>
        count ++, total += p->property;
c01068d2:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01068d6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01068d9:	8b 50 08             	mov    0x8(%eax),%edx
c01068dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01068df:	01 d0                	add    %edx,%eax
c01068e1:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01068e4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01068e7:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01068ea:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01068ed:	8b 40 04             	mov    0x4(%eax),%eax
// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
static void
default_check(void) {
    int count = 0, total = 0;
    list_entry_t *le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c01068f0:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01068f3:	81 7d ec a4 31 1b c0 	cmpl   $0xc01b31a4,-0x14(%ebp)
c01068fa:	75 88                	jne    c0106884 <default_check+0x20>
        struct Page *p = le2page(le, page_link);
        assert(PageProperty(p));
        count ++, total += p->property;
    }
    assert(total == nr_free_pages());
c01068fc:	e8 78 08 00 00       	call   c0107179 <nr_free_pages>
c0106901:	89 c2                	mov    %eax,%edx
c0106903:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106906:	39 c2                	cmp    %eax,%edx
c0106908:	74 19                	je     c0106923 <default_check+0xbf>
c010690a:	68 e6 cf 10 c0       	push   $0xc010cfe6
c010690f:	68 ee cd 10 c0       	push   $0xc010cdee
c0106914:	68 0b 01 00 00       	push   $0x10b
c0106919:	68 03 ce 10 c0       	push   $0xc010ce03
c010691e:	e8 da 9a ff ff       	call   c01003fd <__panic>

    basic_check();
c0106923:	e8 c6 fa ff ff       	call   c01063ee <basic_check>

    struct Page *p0 = alloc_pages(5), *p1, *p2;
c0106928:	83 ec 0c             	sub    $0xc,%esp
c010692b:	6a 05                	push   $0x5
c010692d:	e8 a6 07 00 00       	call   c01070d8 <alloc_pages>
c0106932:	83 c4 10             	add    $0x10,%esp
c0106935:	89 45 dc             	mov    %eax,-0x24(%ebp)
    assert(p0 != NULL);
c0106938:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010693c:	75 19                	jne    c0106957 <default_check+0xf3>
c010693e:	68 ff cf 10 c0       	push   $0xc010cfff
c0106943:	68 ee cd 10 c0       	push   $0xc010cdee
c0106948:	68 10 01 00 00       	push   $0x110
c010694d:	68 03 ce 10 c0       	push   $0xc010ce03
c0106952:	e8 a6 9a ff ff       	call   c01003fd <__panic>
    assert(!PageProperty(p0));
c0106957:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010695a:	83 c0 04             	add    $0x4,%eax
c010695d:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
c0106964:	89 45 a4             	mov    %eax,-0x5c(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0106967:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c010696a:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010696d:	0f a3 10             	bt     %edx,(%eax)
c0106970:	19 c0                	sbb    %eax,%eax
c0106972:	89 45 a0             	mov    %eax,-0x60(%ebp)
    return oldbit != 0;
c0106975:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
c0106979:	0f 95 c0             	setne  %al
c010697c:	0f b6 c0             	movzbl %al,%eax
c010697f:	85 c0                	test   %eax,%eax
c0106981:	74 19                	je     c010699c <default_check+0x138>
c0106983:	68 0a d0 10 c0       	push   $0xc010d00a
c0106988:	68 ee cd 10 c0       	push   $0xc010cdee
c010698d:	68 11 01 00 00       	push   $0x111
c0106992:	68 03 ce 10 c0       	push   $0xc010ce03
c0106997:	e8 61 9a ff ff       	call   c01003fd <__panic>

    list_entry_t free_list_store = free_list;
c010699c:	a1 a4 31 1b c0       	mov    0xc01b31a4,%eax
c01069a1:	8b 15 a8 31 1b c0    	mov    0xc01b31a8,%edx
c01069a7:	89 45 80             	mov    %eax,-0x80(%ebp)
c01069aa:	89 55 84             	mov    %edx,-0x7c(%ebp)
c01069ad:	c7 45 d0 a4 31 1b c0 	movl   $0xc01b31a4,-0x30(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c01069b4:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01069b7:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01069ba:	89 50 04             	mov    %edx,0x4(%eax)
c01069bd:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01069c0:	8b 50 04             	mov    0x4(%eax),%edx
c01069c3:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01069c6:	89 10                	mov    %edx,(%eax)
c01069c8:	c7 45 d8 a4 31 1b c0 	movl   $0xc01b31a4,-0x28(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c01069cf:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01069d2:	8b 40 04             	mov    0x4(%eax),%eax
c01069d5:	39 45 d8             	cmp    %eax,-0x28(%ebp)
c01069d8:	0f 94 c0             	sete   %al
c01069db:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c01069de:	85 c0                	test   %eax,%eax
c01069e0:	75 19                	jne    c01069fb <default_check+0x197>
c01069e2:	68 5f cf 10 c0       	push   $0xc010cf5f
c01069e7:	68 ee cd 10 c0       	push   $0xc010cdee
c01069ec:	68 15 01 00 00       	push   $0x115
c01069f1:	68 03 ce 10 c0       	push   $0xc010ce03
c01069f6:	e8 02 9a ff ff       	call   c01003fd <__panic>
    assert(alloc_page() == NULL);
c01069fb:	83 ec 0c             	sub    $0xc,%esp
c01069fe:	6a 01                	push   $0x1
c0106a00:	e8 d3 06 00 00       	call   c01070d8 <alloc_pages>
c0106a05:	83 c4 10             	add    $0x10,%esp
c0106a08:	85 c0                	test   %eax,%eax
c0106a0a:	74 19                	je     c0106a25 <default_check+0x1c1>
c0106a0c:	68 76 cf 10 c0       	push   $0xc010cf76
c0106a11:	68 ee cd 10 c0       	push   $0xc010cdee
c0106a16:	68 16 01 00 00       	push   $0x116
c0106a1b:	68 03 ce 10 c0       	push   $0xc010ce03
c0106a20:	e8 d8 99 ff ff       	call   c01003fd <__panic>

    unsigned int nr_free_store = nr_free;
c0106a25:	a1 ac 31 1b c0       	mov    0xc01b31ac,%eax
c0106a2a:	89 45 cc             	mov    %eax,-0x34(%ebp)
    nr_free = 0;
c0106a2d:	c7 05 ac 31 1b c0 00 	movl   $0x0,0xc01b31ac
c0106a34:	00 00 00 

    free_pages(p0 + 2, 3);
c0106a37:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106a3a:	83 c0 40             	add    $0x40,%eax
c0106a3d:	83 ec 08             	sub    $0x8,%esp
c0106a40:	6a 03                	push   $0x3
c0106a42:	50                   	push   %eax
c0106a43:	e8 fc 06 00 00       	call   c0107144 <free_pages>
c0106a48:	83 c4 10             	add    $0x10,%esp
    assert(alloc_pages(4) == NULL);
c0106a4b:	83 ec 0c             	sub    $0xc,%esp
c0106a4e:	6a 04                	push   $0x4
c0106a50:	e8 83 06 00 00       	call   c01070d8 <alloc_pages>
c0106a55:	83 c4 10             	add    $0x10,%esp
c0106a58:	85 c0                	test   %eax,%eax
c0106a5a:	74 19                	je     c0106a75 <default_check+0x211>
c0106a5c:	68 1c d0 10 c0       	push   $0xc010d01c
c0106a61:	68 ee cd 10 c0       	push   $0xc010cdee
c0106a66:	68 1c 01 00 00       	push   $0x11c
c0106a6b:	68 03 ce 10 c0       	push   $0xc010ce03
c0106a70:	e8 88 99 ff ff       	call   c01003fd <__panic>
    assert(PageProperty(p0 + 2) && p0[2].property == 3);
c0106a75:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106a78:	83 c0 40             	add    $0x40,%eax
c0106a7b:	83 c0 04             	add    $0x4,%eax
c0106a7e:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
c0106a85:	89 45 9c             	mov    %eax,-0x64(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0106a88:	8b 45 9c             	mov    -0x64(%ebp),%eax
c0106a8b:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0106a8e:	0f a3 10             	bt     %edx,(%eax)
c0106a91:	19 c0                	sbb    %eax,%eax
c0106a93:	89 45 98             	mov    %eax,-0x68(%ebp)
    return oldbit != 0;
c0106a96:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
c0106a9a:	0f 95 c0             	setne  %al
c0106a9d:	0f b6 c0             	movzbl %al,%eax
c0106aa0:	85 c0                	test   %eax,%eax
c0106aa2:	74 0e                	je     c0106ab2 <default_check+0x24e>
c0106aa4:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106aa7:	83 c0 40             	add    $0x40,%eax
c0106aaa:	8b 40 08             	mov    0x8(%eax),%eax
c0106aad:	83 f8 03             	cmp    $0x3,%eax
c0106ab0:	74 19                	je     c0106acb <default_check+0x267>
c0106ab2:	68 34 d0 10 c0       	push   $0xc010d034
c0106ab7:	68 ee cd 10 c0       	push   $0xc010cdee
c0106abc:	68 1d 01 00 00       	push   $0x11d
c0106ac1:	68 03 ce 10 c0       	push   $0xc010ce03
c0106ac6:	e8 32 99 ff ff       	call   c01003fd <__panic>
    assert((p1 = alloc_pages(3)) != NULL);
c0106acb:	83 ec 0c             	sub    $0xc,%esp
c0106ace:	6a 03                	push   $0x3
c0106ad0:	e8 03 06 00 00       	call   c01070d8 <alloc_pages>
c0106ad5:	83 c4 10             	add    $0x10,%esp
c0106ad8:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c0106adb:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
c0106adf:	75 19                	jne    c0106afa <default_check+0x296>
c0106ae1:	68 60 d0 10 c0       	push   $0xc010d060
c0106ae6:	68 ee cd 10 c0       	push   $0xc010cdee
c0106aeb:	68 1e 01 00 00       	push   $0x11e
c0106af0:	68 03 ce 10 c0       	push   $0xc010ce03
c0106af5:	e8 03 99 ff ff       	call   c01003fd <__panic>
    assert(alloc_page() == NULL);
c0106afa:	83 ec 0c             	sub    $0xc,%esp
c0106afd:	6a 01                	push   $0x1
c0106aff:	e8 d4 05 00 00       	call   c01070d8 <alloc_pages>
c0106b04:	83 c4 10             	add    $0x10,%esp
c0106b07:	85 c0                	test   %eax,%eax
c0106b09:	74 19                	je     c0106b24 <default_check+0x2c0>
c0106b0b:	68 76 cf 10 c0       	push   $0xc010cf76
c0106b10:	68 ee cd 10 c0       	push   $0xc010cdee
c0106b15:	68 1f 01 00 00       	push   $0x11f
c0106b1a:	68 03 ce 10 c0       	push   $0xc010ce03
c0106b1f:	e8 d9 98 ff ff       	call   c01003fd <__panic>
    assert(p0 + 2 == p1);
c0106b24:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106b27:	83 c0 40             	add    $0x40,%eax
c0106b2a:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
c0106b2d:	74 19                	je     c0106b48 <default_check+0x2e4>
c0106b2f:	68 7e d0 10 c0       	push   $0xc010d07e
c0106b34:	68 ee cd 10 c0       	push   $0xc010cdee
c0106b39:	68 20 01 00 00       	push   $0x120
c0106b3e:	68 03 ce 10 c0       	push   $0xc010ce03
c0106b43:	e8 b5 98 ff ff       	call   c01003fd <__panic>

    p2 = p0 + 1;
c0106b48:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106b4b:	83 c0 20             	add    $0x20,%eax
c0106b4e:	89 45 c0             	mov    %eax,-0x40(%ebp)
    free_page(p0);
c0106b51:	83 ec 08             	sub    $0x8,%esp
c0106b54:	6a 01                	push   $0x1
c0106b56:	ff 75 dc             	pushl  -0x24(%ebp)
c0106b59:	e8 e6 05 00 00       	call   c0107144 <free_pages>
c0106b5e:	83 c4 10             	add    $0x10,%esp
    free_pages(p1, 3);
c0106b61:	83 ec 08             	sub    $0x8,%esp
c0106b64:	6a 03                	push   $0x3
c0106b66:	ff 75 c4             	pushl  -0x3c(%ebp)
c0106b69:	e8 d6 05 00 00       	call   c0107144 <free_pages>
c0106b6e:	83 c4 10             	add    $0x10,%esp
    assert(PageProperty(p0) && p0->property == 1);
c0106b71:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106b74:	83 c0 04             	add    $0x4,%eax
c0106b77:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
c0106b7e:	89 45 94             	mov    %eax,-0x6c(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0106b81:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0106b84:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0106b87:	0f a3 10             	bt     %edx,(%eax)
c0106b8a:	19 c0                	sbb    %eax,%eax
c0106b8c:	89 45 90             	mov    %eax,-0x70(%ebp)
    return oldbit != 0;
c0106b8f:	83 7d 90 00          	cmpl   $0x0,-0x70(%ebp)
c0106b93:	0f 95 c0             	setne  %al
c0106b96:	0f b6 c0             	movzbl %al,%eax
c0106b99:	85 c0                	test   %eax,%eax
c0106b9b:	74 0b                	je     c0106ba8 <default_check+0x344>
c0106b9d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106ba0:	8b 40 08             	mov    0x8(%eax),%eax
c0106ba3:	83 f8 01             	cmp    $0x1,%eax
c0106ba6:	74 19                	je     c0106bc1 <default_check+0x35d>
c0106ba8:	68 8c d0 10 c0       	push   $0xc010d08c
c0106bad:	68 ee cd 10 c0       	push   $0xc010cdee
c0106bb2:	68 25 01 00 00       	push   $0x125
c0106bb7:	68 03 ce 10 c0       	push   $0xc010ce03
c0106bbc:	e8 3c 98 ff ff       	call   c01003fd <__panic>
    assert(PageProperty(p1) && p1->property == 3);
c0106bc1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0106bc4:	83 c0 04             	add    $0x4,%eax
c0106bc7:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
c0106bce:	89 45 8c             	mov    %eax,-0x74(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0106bd1:	8b 45 8c             	mov    -0x74(%ebp),%eax
c0106bd4:	8b 55 bc             	mov    -0x44(%ebp),%edx
c0106bd7:	0f a3 10             	bt     %edx,(%eax)
c0106bda:	19 c0                	sbb    %eax,%eax
c0106bdc:	89 45 88             	mov    %eax,-0x78(%ebp)
    return oldbit != 0;
c0106bdf:	83 7d 88 00          	cmpl   $0x0,-0x78(%ebp)
c0106be3:	0f 95 c0             	setne  %al
c0106be6:	0f b6 c0             	movzbl %al,%eax
c0106be9:	85 c0                	test   %eax,%eax
c0106beb:	74 0b                	je     c0106bf8 <default_check+0x394>
c0106bed:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0106bf0:	8b 40 08             	mov    0x8(%eax),%eax
c0106bf3:	83 f8 03             	cmp    $0x3,%eax
c0106bf6:	74 19                	je     c0106c11 <default_check+0x3ad>
c0106bf8:	68 b4 d0 10 c0       	push   $0xc010d0b4
c0106bfd:	68 ee cd 10 c0       	push   $0xc010cdee
c0106c02:	68 26 01 00 00       	push   $0x126
c0106c07:	68 03 ce 10 c0       	push   $0xc010ce03
c0106c0c:	e8 ec 97 ff ff       	call   c01003fd <__panic>

    assert((p0 = alloc_page()) == p2 - 1);
c0106c11:	83 ec 0c             	sub    $0xc,%esp
c0106c14:	6a 01                	push   $0x1
c0106c16:	e8 bd 04 00 00       	call   c01070d8 <alloc_pages>
c0106c1b:	83 c4 10             	add    $0x10,%esp
c0106c1e:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0106c21:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0106c24:	83 e8 20             	sub    $0x20,%eax
c0106c27:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c0106c2a:	74 19                	je     c0106c45 <default_check+0x3e1>
c0106c2c:	68 da d0 10 c0       	push   $0xc010d0da
c0106c31:	68 ee cd 10 c0       	push   $0xc010cdee
c0106c36:	68 28 01 00 00       	push   $0x128
c0106c3b:	68 03 ce 10 c0       	push   $0xc010ce03
c0106c40:	e8 b8 97 ff ff       	call   c01003fd <__panic>
    free_page(p0);
c0106c45:	83 ec 08             	sub    $0x8,%esp
c0106c48:	6a 01                	push   $0x1
c0106c4a:	ff 75 dc             	pushl  -0x24(%ebp)
c0106c4d:	e8 f2 04 00 00       	call   c0107144 <free_pages>
c0106c52:	83 c4 10             	add    $0x10,%esp
    assert((p0 = alloc_pages(2)) == p2 + 1);
c0106c55:	83 ec 0c             	sub    $0xc,%esp
c0106c58:	6a 02                	push   $0x2
c0106c5a:	e8 79 04 00 00       	call   c01070d8 <alloc_pages>
c0106c5f:	83 c4 10             	add    $0x10,%esp
c0106c62:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0106c65:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0106c68:	83 c0 20             	add    $0x20,%eax
c0106c6b:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c0106c6e:	74 19                	je     c0106c89 <default_check+0x425>
c0106c70:	68 f8 d0 10 c0       	push   $0xc010d0f8
c0106c75:	68 ee cd 10 c0       	push   $0xc010cdee
c0106c7a:	68 2a 01 00 00       	push   $0x12a
c0106c7f:	68 03 ce 10 c0       	push   $0xc010ce03
c0106c84:	e8 74 97 ff ff       	call   c01003fd <__panic>

    free_pages(p0, 2);
c0106c89:	83 ec 08             	sub    $0x8,%esp
c0106c8c:	6a 02                	push   $0x2
c0106c8e:	ff 75 dc             	pushl  -0x24(%ebp)
c0106c91:	e8 ae 04 00 00       	call   c0107144 <free_pages>
c0106c96:	83 c4 10             	add    $0x10,%esp
    free_page(p2);
c0106c99:	83 ec 08             	sub    $0x8,%esp
c0106c9c:	6a 01                	push   $0x1
c0106c9e:	ff 75 c0             	pushl  -0x40(%ebp)
c0106ca1:	e8 9e 04 00 00       	call   c0107144 <free_pages>
c0106ca6:	83 c4 10             	add    $0x10,%esp

    assert((p0 = alloc_pages(5)) != NULL);
c0106ca9:	83 ec 0c             	sub    $0xc,%esp
c0106cac:	6a 05                	push   $0x5
c0106cae:	e8 25 04 00 00       	call   c01070d8 <alloc_pages>
c0106cb3:	83 c4 10             	add    $0x10,%esp
c0106cb6:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0106cb9:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0106cbd:	75 19                	jne    c0106cd8 <default_check+0x474>
c0106cbf:	68 18 d1 10 c0       	push   $0xc010d118
c0106cc4:	68 ee cd 10 c0       	push   $0xc010cdee
c0106cc9:	68 2f 01 00 00       	push   $0x12f
c0106cce:	68 03 ce 10 c0       	push   $0xc010ce03
c0106cd3:	e8 25 97 ff ff       	call   c01003fd <__panic>
    assert(alloc_page() == NULL);
c0106cd8:	83 ec 0c             	sub    $0xc,%esp
c0106cdb:	6a 01                	push   $0x1
c0106cdd:	e8 f6 03 00 00       	call   c01070d8 <alloc_pages>
c0106ce2:	83 c4 10             	add    $0x10,%esp
c0106ce5:	85 c0                	test   %eax,%eax
c0106ce7:	74 19                	je     c0106d02 <default_check+0x49e>
c0106ce9:	68 76 cf 10 c0       	push   $0xc010cf76
c0106cee:	68 ee cd 10 c0       	push   $0xc010cdee
c0106cf3:	68 30 01 00 00       	push   $0x130
c0106cf8:	68 03 ce 10 c0       	push   $0xc010ce03
c0106cfd:	e8 fb 96 ff ff       	call   c01003fd <__panic>

    assert(nr_free == 0);
c0106d02:	a1 ac 31 1b c0       	mov    0xc01b31ac,%eax
c0106d07:	85 c0                	test   %eax,%eax
c0106d09:	74 19                	je     c0106d24 <default_check+0x4c0>
c0106d0b:	68 c9 cf 10 c0       	push   $0xc010cfc9
c0106d10:	68 ee cd 10 c0       	push   $0xc010cdee
c0106d15:	68 32 01 00 00       	push   $0x132
c0106d1a:	68 03 ce 10 c0       	push   $0xc010ce03
c0106d1f:	e8 d9 96 ff ff       	call   c01003fd <__panic>
    nr_free = nr_free_store;
c0106d24:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0106d27:	a3 ac 31 1b c0       	mov    %eax,0xc01b31ac

    free_list = free_list_store;
c0106d2c:	8b 45 80             	mov    -0x80(%ebp),%eax
c0106d2f:	8b 55 84             	mov    -0x7c(%ebp),%edx
c0106d32:	a3 a4 31 1b c0       	mov    %eax,0xc01b31a4
c0106d37:	89 15 a8 31 1b c0    	mov    %edx,0xc01b31a8
    free_pages(p0, 5);
c0106d3d:	83 ec 08             	sub    $0x8,%esp
c0106d40:	6a 05                	push   $0x5
c0106d42:	ff 75 dc             	pushl  -0x24(%ebp)
c0106d45:	e8 fa 03 00 00       	call   c0107144 <free_pages>
c0106d4a:	83 c4 10             	add    $0x10,%esp

    le = &free_list;
c0106d4d:	c7 45 ec a4 31 1b c0 	movl   $0xc01b31a4,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c0106d54:	eb 1d                	jmp    c0106d73 <default_check+0x50f>
        struct Page *p = le2page(le, page_link);
c0106d56:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106d59:	83 e8 0c             	sub    $0xc,%eax
c0106d5c:	89 45 b4             	mov    %eax,-0x4c(%ebp)
        count --, total -= p->property;
c0106d5f:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0106d63:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0106d66:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0106d69:	8b 40 08             	mov    0x8(%eax),%eax
c0106d6c:	29 c2                	sub    %eax,%edx
c0106d6e:	89 d0                	mov    %edx,%eax
c0106d70:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106d73:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106d76:	89 45 b8             	mov    %eax,-0x48(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0106d79:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0106d7c:	8b 40 04             	mov    0x4(%eax),%eax

    free_list = free_list_store;
    free_pages(p0, 5);

    le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c0106d7f:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0106d82:	81 7d ec a4 31 1b c0 	cmpl   $0xc01b31a4,-0x14(%ebp)
c0106d89:	75 cb                	jne    c0106d56 <default_check+0x4f2>
        struct Page *p = le2page(le, page_link);
        count --, total -= p->property;
    }
    assert(count == 0);
c0106d8b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106d8f:	74 19                	je     c0106daa <default_check+0x546>
c0106d91:	68 36 d1 10 c0       	push   $0xc010d136
c0106d96:	68 ee cd 10 c0       	push   $0xc010cdee
c0106d9b:	68 3d 01 00 00       	push   $0x13d
c0106da0:	68 03 ce 10 c0       	push   $0xc010ce03
c0106da5:	e8 53 96 ff ff       	call   c01003fd <__panic>
    assert(total == 0);
c0106daa:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106dae:	74 19                	je     c0106dc9 <default_check+0x565>
c0106db0:	68 41 d1 10 c0       	push   $0xc010d141
c0106db5:	68 ee cd 10 c0       	push   $0xc010cdee
c0106dba:	68 3e 01 00 00       	push   $0x13e
c0106dbf:	68 03 ce 10 c0       	push   $0xc010ce03
c0106dc4:	e8 34 96 ff ff       	call   c01003fd <__panic>
}
c0106dc9:	90                   	nop
c0106dca:	c9                   	leave  
c0106dcb:	c3                   	ret    

c0106dcc <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0106dcc:	55                   	push   %ebp
c0106dcd:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0106dcf:	8b 45 08             	mov    0x8(%ebp),%eax
c0106dd2:	8b 15 b8 31 1b c0    	mov    0xc01b31b8,%edx
c0106dd8:	29 d0                	sub    %edx,%eax
c0106dda:	c1 f8 05             	sar    $0x5,%eax
}
c0106ddd:	5d                   	pop    %ebp
c0106dde:	c3                   	ret    

c0106ddf <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0106ddf:	55                   	push   %ebp
c0106de0:	89 e5                	mov    %esp,%ebp
    return page2ppn(page) << PGSHIFT;
c0106de2:	ff 75 08             	pushl  0x8(%ebp)
c0106de5:	e8 e2 ff ff ff       	call   c0106dcc <page2ppn>
c0106dea:	83 c4 04             	add    $0x4,%esp
c0106ded:	c1 e0 0c             	shl    $0xc,%eax
}
c0106df0:	c9                   	leave  
c0106df1:	c3                   	ret    

c0106df2 <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c0106df2:	55                   	push   %ebp
c0106df3:	89 e5                	mov    %esp,%ebp
c0106df5:	83 ec 08             	sub    $0x8,%esp
    if (PPN(pa) >= npage) {
c0106df8:	8b 45 08             	mov    0x8(%ebp),%eax
c0106dfb:	c1 e8 0c             	shr    $0xc,%eax
c0106dfe:	89 c2                	mov    %eax,%edx
c0106e00:	a1 80 0f 1b c0       	mov    0xc01b0f80,%eax
c0106e05:	39 c2                	cmp    %eax,%edx
c0106e07:	72 14                	jb     c0106e1d <pa2page+0x2b>
        panic("pa2page called with invalid pa");
c0106e09:	83 ec 04             	sub    $0x4,%esp
c0106e0c:	68 7c d1 10 c0       	push   $0xc010d17c
c0106e11:	6a 5e                	push   $0x5e
c0106e13:	68 9b d1 10 c0       	push   $0xc010d19b
c0106e18:	e8 e0 95 ff ff       	call   c01003fd <__panic>
    }
    return &pages[PPN(pa)];
c0106e1d:	a1 b8 31 1b c0       	mov    0xc01b31b8,%eax
c0106e22:	8b 55 08             	mov    0x8(%ebp),%edx
c0106e25:	c1 ea 0c             	shr    $0xc,%edx
c0106e28:	c1 e2 05             	shl    $0x5,%edx
c0106e2b:	01 d0                	add    %edx,%eax
}
c0106e2d:	c9                   	leave  
c0106e2e:	c3                   	ret    

c0106e2f <page2kva>:

static inline void *
page2kva(struct Page *page) {
c0106e2f:	55                   	push   %ebp
c0106e30:	89 e5                	mov    %esp,%ebp
c0106e32:	83 ec 18             	sub    $0x18,%esp
    return KADDR(page2pa(page));
c0106e35:	ff 75 08             	pushl  0x8(%ebp)
c0106e38:	e8 a2 ff ff ff       	call   c0106ddf <page2pa>
c0106e3d:	83 c4 04             	add    $0x4,%esp
c0106e40:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0106e43:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106e46:	c1 e8 0c             	shr    $0xc,%eax
c0106e49:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106e4c:	a1 80 0f 1b c0       	mov    0xc01b0f80,%eax
c0106e51:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0106e54:	72 14                	jb     c0106e6a <page2kva+0x3b>
c0106e56:	ff 75 f4             	pushl  -0xc(%ebp)
c0106e59:	68 ac d1 10 c0       	push   $0xc010d1ac
c0106e5e:	6a 65                	push   $0x65
c0106e60:	68 9b d1 10 c0       	push   $0xc010d19b
c0106e65:	e8 93 95 ff ff       	call   c01003fd <__panic>
c0106e6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106e6d:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c0106e72:	c9                   	leave  
c0106e73:	c3                   	ret    

c0106e74 <pte2page>:
kva2page(void *kva) {
    return pa2page(PADDR(kva));
}

static inline struct Page *
pte2page(pte_t pte) {
c0106e74:	55                   	push   %ebp
c0106e75:	89 e5                	mov    %esp,%ebp
c0106e77:	83 ec 08             	sub    $0x8,%esp
    if (!(pte & PTE_P)) {
c0106e7a:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e7d:	83 e0 01             	and    $0x1,%eax
c0106e80:	85 c0                	test   %eax,%eax
c0106e82:	75 14                	jne    c0106e98 <pte2page+0x24>
        panic("pte2page called with invalid pte");
c0106e84:	83 ec 04             	sub    $0x4,%esp
c0106e87:	68 d0 d1 10 c0       	push   $0xc010d1d0
c0106e8c:	6a 70                	push   $0x70
c0106e8e:	68 9b d1 10 c0       	push   $0xc010d19b
c0106e93:	e8 65 95 ff ff       	call   c01003fd <__panic>
    }
    return pa2page(PTE_ADDR(pte));
c0106e98:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e9b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106ea0:	83 ec 0c             	sub    $0xc,%esp
c0106ea3:	50                   	push   %eax
c0106ea4:	e8 49 ff ff ff       	call   c0106df2 <pa2page>
c0106ea9:	83 c4 10             	add    $0x10,%esp
}
c0106eac:	c9                   	leave  
c0106ead:	c3                   	ret    

c0106eae <pde2page>:

static inline struct Page *
pde2page(pde_t pde) {
c0106eae:	55                   	push   %ebp
c0106eaf:	89 e5                	mov    %esp,%ebp
c0106eb1:	83 ec 08             	sub    $0x8,%esp
    return pa2page(PDE_ADDR(pde));
c0106eb4:	8b 45 08             	mov    0x8(%ebp),%eax
c0106eb7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106ebc:	83 ec 0c             	sub    $0xc,%esp
c0106ebf:	50                   	push   %eax
c0106ec0:	e8 2d ff ff ff       	call   c0106df2 <pa2page>
c0106ec5:	83 c4 10             	add    $0x10,%esp
}
c0106ec8:	c9                   	leave  
c0106ec9:	c3                   	ret    

c0106eca <page_ref>:

static inline int
page_ref(struct Page *page) {
c0106eca:	55                   	push   %ebp
c0106ecb:	89 e5                	mov    %esp,%ebp
    return page->ref;
c0106ecd:	8b 45 08             	mov    0x8(%ebp),%eax
c0106ed0:	8b 00                	mov    (%eax),%eax
}
c0106ed2:	5d                   	pop    %ebp
c0106ed3:	c3                   	ret    

c0106ed4 <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c0106ed4:	55                   	push   %ebp
c0106ed5:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c0106ed7:	8b 45 08             	mov    0x8(%ebp),%eax
c0106eda:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106edd:	89 10                	mov    %edx,(%eax)
}
c0106edf:	90                   	nop
c0106ee0:	5d                   	pop    %ebp
c0106ee1:	c3                   	ret    

c0106ee2 <page_ref_inc>:

static inline int
page_ref_inc(struct Page *page) {
c0106ee2:	55                   	push   %ebp
c0106ee3:	89 e5                	mov    %esp,%ebp
    page->ref += 1;
c0106ee5:	8b 45 08             	mov    0x8(%ebp),%eax
c0106ee8:	8b 00                	mov    (%eax),%eax
c0106eea:	8d 50 01             	lea    0x1(%eax),%edx
c0106eed:	8b 45 08             	mov    0x8(%ebp),%eax
c0106ef0:	89 10                	mov    %edx,(%eax)
    return page->ref;
c0106ef2:	8b 45 08             	mov    0x8(%ebp),%eax
c0106ef5:	8b 00                	mov    (%eax),%eax
}
c0106ef7:	5d                   	pop    %ebp
c0106ef8:	c3                   	ret    

c0106ef9 <page_ref_dec>:

static inline int
page_ref_dec(struct Page *page) {
c0106ef9:	55                   	push   %ebp
c0106efa:	89 e5                	mov    %esp,%ebp
    page->ref -= 1;
c0106efc:	8b 45 08             	mov    0x8(%ebp),%eax
c0106eff:	8b 00                	mov    (%eax),%eax
c0106f01:	8d 50 ff             	lea    -0x1(%eax),%edx
c0106f04:	8b 45 08             	mov    0x8(%ebp),%eax
c0106f07:	89 10                	mov    %edx,(%eax)
    return page->ref;
c0106f09:	8b 45 08             	mov    0x8(%ebp),%eax
c0106f0c:	8b 00                	mov    (%eax),%eax
}
c0106f0e:	5d                   	pop    %ebp
c0106f0f:	c3                   	ret    

c0106f10 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0106f10:	55                   	push   %ebp
c0106f11:	89 e5                	mov    %esp,%ebp
c0106f13:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0106f16:	9c                   	pushf  
c0106f17:	58                   	pop    %eax
c0106f18:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0106f1b:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0106f1e:	25 00 02 00 00       	and    $0x200,%eax
c0106f23:	85 c0                	test   %eax,%eax
c0106f25:	74 0c                	je     c0106f33 <__intr_save+0x23>
        intr_disable();
c0106f27:	e8 90 b2 ff ff       	call   c01021bc <intr_disable>
        return 1;
c0106f2c:	b8 01 00 00 00       	mov    $0x1,%eax
c0106f31:	eb 05                	jmp    c0106f38 <__intr_save+0x28>
    }
    return 0;
c0106f33:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0106f38:	c9                   	leave  
c0106f39:	c3                   	ret    

c0106f3a <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0106f3a:	55                   	push   %ebp
c0106f3b:	89 e5                	mov    %esp,%ebp
c0106f3d:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0106f40:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0106f44:	74 05                	je     c0106f4b <__intr_restore+0x11>
        intr_enable();
c0106f46:	e8 6a b2 ff ff       	call   c01021b5 <intr_enable>
    }
}
c0106f4b:	90                   	nop
c0106f4c:	c9                   	leave  
c0106f4d:	c3                   	ret    

c0106f4e <lgdt>:
/* *
 * lgdt - load the global descriptor table register and reset the
 * data/code segement registers for kernel.
 * */
static inline void
lgdt(struct pseudodesc *pd) {
c0106f4e:	55                   	push   %ebp
c0106f4f:	89 e5                	mov    %esp,%ebp
    asm volatile ("lgdt (%0)" :: "r" (pd));
c0106f51:	8b 45 08             	mov    0x8(%ebp),%eax
c0106f54:	0f 01 10             	lgdtl  (%eax)
    asm volatile ("movw %%ax, %%gs" :: "a" (USER_DS));
c0106f57:	b8 23 00 00 00       	mov    $0x23,%eax
c0106f5c:	8e e8                	mov    %eax,%gs
    asm volatile ("movw %%ax, %%fs" :: "a" (USER_DS));
c0106f5e:	b8 23 00 00 00       	mov    $0x23,%eax
c0106f63:	8e e0                	mov    %eax,%fs
    asm volatile ("movw %%ax, %%es" :: "a" (KERNEL_DS));
c0106f65:	b8 10 00 00 00       	mov    $0x10,%eax
c0106f6a:	8e c0                	mov    %eax,%es
    asm volatile ("movw %%ax, %%ds" :: "a" (KERNEL_DS));
c0106f6c:	b8 10 00 00 00       	mov    $0x10,%eax
c0106f71:	8e d8                	mov    %eax,%ds
    asm volatile ("movw %%ax, %%ss" :: "a" (KERNEL_DS));
c0106f73:	b8 10 00 00 00       	mov    $0x10,%eax
c0106f78:	8e d0                	mov    %eax,%ss
    // reload cs
    asm volatile ("ljmp %0, $1f\n 1:\n" :: "i" (KERNEL_CS));
c0106f7a:	ea 81 6f 10 c0 08 00 	ljmp   $0x8,$0xc0106f81
}
c0106f81:	90                   	nop
c0106f82:	5d                   	pop    %ebp
c0106f83:	c3                   	ret    

c0106f84 <load_esp0>:
 * load_esp0 - change the ESP0 in default task state segment,
 * so that we can use different kernel stack when we trap frame
 * user to kernel.
 * */
void
load_esp0(uintptr_t esp0) {
c0106f84:	55                   	push   %ebp
c0106f85:	89 e5                	mov    %esp,%ebp
    ts.ts_esp0 = esp0;
c0106f87:	8b 45 08             	mov    0x8(%ebp),%eax
c0106f8a:	a3 a4 0f 1b c0       	mov    %eax,0xc01b0fa4
}
c0106f8f:	90                   	nop
c0106f90:	5d                   	pop    %ebp
c0106f91:	c3                   	ret    

c0106f92 <gdt_init>:

/* gdt_init - initialize the default GDT and TSS */
static void
gdt_init(void) {
c0106f92:	55                   	push   %ebp
c0106f93:	89 e5                	mov    %esp,%ebp
c0106f95:	83 ec 10             	sub    $0x10,%esp
    // set boot kernel stack and default SS0
    load_esp0((uintptr_t)bootstacktop);
c0106f98:	b8 00 c0 12 c0       	mov    $0xc012c000,%eax
c0106f9d:	50                   	push   %eax
c0106f9e:	e8 e1 ff ff ff       	call   c0106f84 <load_esp0>
c0106fa3:	83 c4 04             	add    $0x4,%esp
    ts.ts_ss0 = KERNEL_DS;
c0106fa6:	66 c7 05 a8 0f 1b c0 	movw   $0x10,0xc01b0fa8
c0106fad:	10 00 

    // initialize the TSS filed of the gdt
    gdt[SEG_TSS] = SEGTSS(STS_T32A, (uintptr_t)&ts, sizeof(ts), DPL_KERNEL);
c0106faf:	66 c7 05 68 ca 12 c0 	movw   $0x68,0xc012ca68
c0106fb6:	68 00 
c0106fb8:	b8 a0 0f 1b c0       	mov    $0xc01b0fa0,%eax
c0106fbd:	66 a3 6a ca 12 c0    	mov    %ax,0xc012ca6a
c0106fc3:	b8 a0 0f 1b c0       	mov    $0xc01b0fa0,%eax
c0106fc8:	c1 e8 10             	shr    $0x10,%eax
c0106fcb:	a2 6c ca 12 c0       	mov    %al,0xc012ca6c
c0106fd0:	0f b6 05 6d ca 12 c0 	movzbl 0xc012ca6d,%eax
c0106fd7:	83 e0 f0             	and    $0xfffffff0,%eax
c0106fda:	83 c8 09             	or     $0x9,%eax
c0106fdd:	a2 6d ca 12 c0       	mov    %al,0xc012ca6d
c0106fe2:	0f b6 05 6d ca 12 c0 	movzbl 0xc012ca6d,%eax
c0106fe9:	83 e0 ef             	and    $0xffffffef,%eax
c0106fec:	a2 6d ca 12 c0       	mov    %al,0xc012ca6d
c0106ff1:	0f b6 05 6d ca 12 c0 	movzbl 0xc012ca6d,%eax
c0106ff8:	83 e0 9f             	and    $0xffffff9f,%eax
c0106ffb:	a2 6d ca 12 c0       	mov    %al,0xc012ca6d
c0107000:	0f b6 05 6d ca 12 c0 	movzbl 0xc012ca6d,%eax
c0107007:	83 c8 80             	or     $0xffffff80,%eax
c010700a:	a2 6d ca 12 c0       	mov    %al,0xc012ca6d
c010700f:	0f b6 05 6e ca 12 c0 	movzbl 0xc012ca6e,%eax
c0107016:	83 e0 f0             	and    $0xfffffff0,%eax
c0107019:	a2 6e ca 12 c0       	mov    %al,0xc012ca6e
c010701e:	0f b6 05 6e ca 12 c0 	movzbl 0xc012ca6e,%eax
c0107025:	83 e0 ef             	and    $0xffffffef,%eax
c0107028:	a2 6e ca 12 c0       	mov    %al,0xc012ca6e
c010702d:	0f b6 05 6e ca 12 c0 	movzbl 0xc012ca6e,%eax
c0107034:	83 e0 df             	and    $0xffffffdf,%eax
c0107037:	a2 6e ca 12 c0       	mov    %al,0xc012ca6e
c010703c:	0f b6 05 6e ca 12 c0 	movzbl 0xc012ca6e,%eax
c0107043:	83 c8 40             	or     $0x40,%eax
c0107046:	a2 6e ca 12 c0       	mov    %al,0xc012ca6e
c010704b:	0f b6 05 6e ca 12 c0 	movzbl 0xc012ca6e,%eax
c0107052:	83 e0 7f             	and    $0x7f,%eax
c0107055:	a2 6e ca 12 c0       	mov    %al,0xc012ca6e
c010705a:	b8 a0 0f 1b c0       	mov    $0xc01b0fa0,%eax
c010705f:	c1 e8 18             	shr    $0x18,%eax
c0107062:	a2 6f ca 12 c0       	mov    %al,0xc012ca6f

    // reload all segment registers
    lgdt(&gdt_pd);
c0107067:	68 70 ca 12 c0       	push   $0xc012ca70
c010706c:	e8 dd fe ff ff       	call   c0106f4e <lgdt>
c0107071:	83 c4 04             	add    $0x4,%esp
c0107074:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
    asm volatile ("cli" ::: "memory");
}

static inline void
ltr(uint16_t sel) {
    asm volatile ("ltr %0" :: "r" (sel) : "memory");
c010707a:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c010707e:	0f 00 d8             	ltr    %ax

    // load the TSS
    ltr(GD_TSS);
}
c0107081:	90                   	nop
c0107082:	c9                   	leave  
c0107083:	c3                   	ret    

c0107084 <init_pmm_manager>:

//init_pmm_manager - initialize a pmm_manager instance
static void
init_pmm_manager(void) {
c0107084:	55                   	push   %ebp
c0107085:	89 e5                	mov    %esp,%ebp
c0107087:	83 ec 08             	sub    $0x8,%esp
    pmm_manager = &default_pmm_manager;
c010708a:	c7 05 b0 31 1b c0 60 	movl   $0xc010d160,0xc01b31b0
c0107091:	d1 10 c0 
    cprintf("memory management: %s\n", pmm_manager->name);
c0107094:	a1 b0 31 1b c0       	mov    0xc01b31b0,%eax
c0107099:	8b 00                	mov    (%eax),%eax
c010709b:	83 ec 08             	sub    $0x8,%esp
c010709e:	50                   	push   %eax
c010709f:	68 fc d1 10 c0       	push   $0xc010d1fc
c01070a4:	e8 ee 91 ff ff       	call   c0100297 <cprintf>
c01070a9:	83 c4 10             	add    $0x10,%esp
    pmm_manager->init();
c01070ac:	a1 b0 31 1b c0       	mov    0xc01b31b0,%eax
c01070b1:	8b 40 04             	mov    0x4(%eax),%eax
c01070b4:	ff d0                	call   *%eax
}
c01070b6:	90                   	nop
c01070b7:	c9                   	leave  
c01070b8:	c3                   	ret    

c01070b9 <init_memmap>:

//init_memmap - call pmm->init_memmap to build Page struct for free memory  
static void
init_memmap(struct Page *base, size_t n) {
c01070b9:	55                   	push   %ebp
c01070ba:	89 e5                	mov    %esp,%ebp
c01070bc:	83 ec 08             	sub    $0x8,%esp
    pmm_manager->init_memmap(base, n);
c01070bf:	a1 b0 31 1b c0       	mov    0xc01b31b0,%eax
c01070c4:	8b 40 08             	mov    0x8(%eax),%eax
c01070c7:	83 ec 08             	sub    $0x8,%esp
c01070ca:	ff 75 0c             	pushl  0xc(%ebp)
c01070cd:	ff 75 08             	pushl  0x8(%ebp)
c01070d0:	ff d0                	call   *%eax
c01070d2:	83 c4 10             	add    $0x10,%esp
}
c01070d5:	90                   	nop
c01070d6:	c9                   	leave  
c01070d7:	c3                   	ret    

c01070d8 <alloc_pages>:

//alloc_pages - call pmm->alloc_pages to allocate a continuous n*PAGESIZE memory 
struct Page *
alloc_pages(size_t n) {
c01070d8:	55                   	push   %ebp
c01070d9:	89 e5                	mov    %esp,%ebp
c01070db:	83 ec 18             	sub    $0x18,%esp
    struct Page *page=NULL;
c01070de:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    
    while (1)
    {
         local_intr_save(intr_flag);
c01070e5:	e8 26 fe ff ff       	call   c0106f10 <__intr_save>
c01070ea:	89 45 f0             	mov    %eax,-0x10(%ebp)
         {
              page = pmm_manager->alloc_pages(n);
c01070ed:	a1 b0 31 1b c0       	mov    0xc01b31b0,%eax
c01070f2:	8b 40 0c             	mov    0xc(%eax),%eax
c01070f5:	83 ec 0c             	sub    $0xc,%esp
c01070f8:	ff 75 08             	pushl  0x8(%ebp)
c01070fb:	ff d0                	call   *%eax
c01070fd:	83 c4 10             	add    $0x10,%esp
c0107100:	89 45 f4             	mov    %eax,-0xc(%ebp)
         }
         local_intr_restore(intr_flag);
c0107103:	83 ec 0c             	sub    $0xc,%esp
c0107106:	ff 75 f0             	pushl  -0x10(%ebp)
c0107109:	e8 2c fe ff ff       	call   c0106f3a <__intr_restore>
c010710e:	83 c4 10             	add    $0x10,%esp

         if (page != NULL || n > 1 || swap_init_ok == 0) break;
c0107111:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107115:	75 28                	jne    c010713f <alloc_pages+0x67>
c0107117:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c010711b:	77 22                	ja     c010713f <alloc_pages+0x67>
c010711d:	a1 6c 0f 1b c0       	mov    0xc01b0f6c,%eax
c0107122:	85 c0                	test   %eax,%eax
c0107124:	74 19                	je     c010713f <alloc_pages+0x67>
         
         extern struct mm_struct *check_mm_struct;
         //cprintf("page %x, call swap_out in alloc_pages %d\n",page, n);
         swap_out(check_mm_struct, n, 0);
c0107126:	8b 55 08             	mov    0x8(%ebp),%edx
c0107129:	a1 d0 30 1b c0       	mov    0xc01b30d0,%eax
c010712e:	83 ec 04             	sub    $0x4,%esp
c0107131:	6a 00                	push   $0x0
c0107133:	52                   	push   %edx
c0107134:	50                   	push   %eax
c0107135:	e8 65 e3 ff ff       	call   c010549f <swap_out>
c010713a:	83 c4 10             	add    $0x10,%esp
    }
c010713d:	eb a6                	jmp    c01070e5 <alloc_pages+0xd>
    //cprintf("n %d,get page %x, No %d in alloc_pages\n",n,page,(page-pages));
    return page;
c010713f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0107142:	c9                   	leave  
c0107143:	c3                   	ret    

c0107144 <free_pages>:

//free_pages - call pmm->free_pages to free a continuous n*PAGESIZE memory 
void
free_pages(struct Page *base, size_t n) {
c0107144:	55                   	push   %ebp
c0107145:	89 e5                	mov    %esp,%ebp
c0107147:	83 ec 18             	sub    $0x18,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010714a:	e8 c1 fd ff ff       	call   c0106f10 <__intr_save>
c010714f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        pmm_manager->free_pages(base, n);
c0107152:	a1 b0 31 1b c0       	mov    0xc01b31b0,%eax
c0107157:	8b 40 10             	mov    0x10(%eax),%eax
c010715a:	83 ec 08             	sub    $0x8,%esp
c010715d:	ff 75 0c             	pushl  0xc(%ebp)
c0107160:	ff 75 08             	pushl  0x8(%ebp)
c0107163:	ff d0                	call   *%eax
c0107165:	83 c4 10             	add    $0x10,%esp
    }
    local_intr_restore(intr_flag);
c0107168:	83 ec 0c             	sub    $0xc,%esp
c010716b:	ff 75 f4             	pushl  -0xc(%ebp)
c010716e:	e8 c7 fd ff ff       	call   c0106f3a <__intr_restore>
c0107173:	83 c4 10             	add    $0x10,%esp
}
c0107176:	90                   	nop
c0107177:	c9                   	leave  
c0107178:	c3                   	ret    

c0107179 <nr_free_pages>:

//nr_free_pages - call pmm->nr_free_pages to get the size (nr*PAGESIZE) 
//of current free memory
size_t
nr_free_pages(void) {
c0107179:	55                   	push   %ebp
c010717a:	89 e5                	mov    %esp,%ebp
c010717c:	83 ec 18             	sub    $0x18,%esp
    size_t ret;
    bool intr_flag;
    local_intr_save(intr_flag);
c010717f:	e8 8c fd ff ff       	call   c0106f10 <__intr_save>
c0107184:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        ret = pmm_manager->nr_free_pages();
c0107187:	a1 b0 31 1b c0       	mov    0xc01b31b0,%eax
c010718c:	8b 40 14             	mov    0x14(%eax),%eax
c010718f:	ff d0                	call   *%eax
c0107191:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    local_intr_restore(intr_flag);
c0107194:	83 ec 0c             	sub    $0xc,%esp
c0107197:	ff 75 f4             	pushl  -0xc(%ebp)
c010719a:	e8 9b fd ff ff       	call   c0106f3a <__intr_restore>
c010719f:	83 c4 10             	add    $0x10,%esp
    return ret;
c01071a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c01071a5:	c9                   	leave  
c01071a6:	c3                   	ret    

c01071a7 <page_init>:

/* pmm_init - initialize the physical memory management */
static void
page_init(void) {
c01071a7:	55                   	push   %ebp
c01071a8:	89 e5                	mov    %esp,%ebp
c01071aa:	57                   	push   %edi
c01071ab:	56                   	push   %esi
c01071ac:	53                   	push   %ebx
c01071ad:	83 ec 7c             	sub    $0x7c,%esp
    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
c01071b0:	c7 45 c4 00 80 00 c0 	movl   $0xc0008000,-0x3c(%ebp)
    uint64_t maxpa = 0;
c01071b7:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
c01071be:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

    cprintf("e820map:\n");
c01071c5:	83 ec 0c             	sub    $0xc,%esp
c01071c8:	68 13 d2 10 c0       	push   $0xc010d213
c01071cd:	e8 c5 90 ff ff       	call   c0100297 <cprintf>
c01071d2:	83 c4 10             	add    $0x10,%esp
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
c01071d5:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c01071dc:	e9 fc 00 00 00       	jmp    c01072dd <page_init+0x136>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c01071e1:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01071e4:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01071e7:	89 d0                	mov    %edx,%eax
c01071e9:	c1 e0 02             	shl    $0x2,%eax
c01071ec:	01 d0                	add    %edx,%eax
c01071ee:	c1 e0 02             	shl    $0x2,%eax
c01071f1:	01 c8                	add    %ecx,%eax
c01071f3:	8b 50 08             	mov    0x8(%eax),%edx
c01071f6:	8b 40 04             	mov    0x4(%eax),%eax
c01071f9:	89 45 b8             	mov    %eax,-0x48(%ebp)
c01071fc:	89 55 bc             	mov    %edx,-0x44(%ebp)
c01071ff:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0107202:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0107205:	89 d0                	mov    %edx,%eax
c0107207:	c1 e0 02             	shl    $0x2,%eax
c010720a:	01 d0                	add    %edx,%eax
c010720c:	c1 e0 02             	shl    $0x2,%eax
c010720f:	01 c8                	add    %ecx,%eax
c0107211:	8b 48 0c             	mov    0xc(%eax),%ecx
c0107214:	8b 58 10             	mov    0x10(%eax),%ebx
c0107217:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010721a:	8b 55 bc             	mov    -0x44(%ebp),%edx
c010721d:	01 c8                	add    %ecx,%eax
c010721f:	11 da                	adc    %ebx,%edx
c0107221:	89 45 b0             	mov    %eax,-0x50(%ebp)
c0107224:	89 55 b4             	mov    %edx,-0x4c(%ebp)
        cprintf("  memory: %08llx, [%08llx, %08llx], type = %d.\n",
c0107227:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c010722a:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010722d:	89 d0                	mov    %edx,%eax
c010722f:	c1 e0 02             	shl    $0x2,%eax
c0107232:	01 d0                	add    %edx,%eax
c0107234:	c1 e0 02             	shl    $0x2,%eax
c0107237:	01 c8                	add    %ecx,%eax
c0107239:	83 c0 14             	add    $0x14,%eax
c010723c:	8b 00                	mov    (%eax),%eax
c010723e:	89 45 84             	mov    %eax,-0x7c(%ebp)
c0107241:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0107244:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0107247:	83 c0 ff             	add    $0xffffffff,%eax
c010724a:	83 d2 ff             	adc    $0xffffffff,%edx
c010724d:	89 c1                	mov    %eax,%ecx
c010724f:	89 d3                	mov    %edx,%ebx
c0107251:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0107254:	89 55 80             	mov    %edx,-0x80(%ebp)
c0107257:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010725a:	89 d0                	mov    %edx,%eax
c010725c:	c1 e0 02             	shl    $0x2,%eax
c010725f:	01 d0                	add    %edx,%eax
c0107261:	c1 e0 02             	shl    $0x2,%eax
c0107264:	03 45 80             	add    -0x80(%ebp),%eax
c0107267:	8b 50 10             	mov    0x10(%eax),%edx
c010726a:	8b 40 0c             	mov    0xc(%eax),%eax
c010726d:	ff 75 84             	pushl  -0x7c(%ebp)
c0107270:	53                   	push   %ebx
c0107271:	51                   	push   %ecx
c0107272:	ff 75 bc             	pushl  -0x44(%ebp)
c0107275:	ff 75 b8             	pushl  -0x48(%ebp)
c0107278:	52                   	push   %edx
c0107279:	50                   	push   %eax
c010727a:	68 20 d2 10 c0       	push   $0xc010d220
c010727f:	e8 13 90 ff ff       	call   c0100297 <cprintf>
c0107284:	83 c4 20             	add    $0x20,%esp
                memmap->map[i].size, begin, end - 1, memmap->map[i].type);
        if (memmap->map[i].type == E820_ARM) {
c0107287:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c010728a:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010728d:	89 d0                	mov    %edx,%eax
c010728f:	c1 e0 02             	shl    $0x2,%eax
c0107292:	01 d0                	add    %edx,%eax
c0107294:	c1 e0 02             	shl    $0x2,%eax
c0107297:	01 c8                	add    %ecx,%eax
c0107299:	83 c0 14             	add    $0x14,%eax
c010729c:	8b 00                	mov    (%eax),%eax
c010729e:	83 f8 01             	cmp    $0x1,%eax
c01072a1:	75 36                	jne    c01072d9 <page_init+0x132>
            if (maxpa < end && begin < KMEMSIZE) {
c01072a3:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01072a6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01072a9:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c01072ac:	77 2b                	ja     c01072d9 <page_init+0x132>
c01072ae:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c01072b1:	72 05                	jb     c01072b8 <page_init+0x111>
c01072b3:	3b 45 b0             	cmp    -0x50(%ebp),%eax
c01072b6:	73 21                	jae    c01072d9 <page_init+0x132>
c01072b8:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c01072bc:	77 1b                	ja     c01072d9 <page_init+0x132>
c01072be:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c01072c2:	72 09                	jb     c01072cd <page_init+0x126>
c01072c4:	81 7d b8 ff ff ff 37 	cmpl   $0x37ffffff,-0x48(%ebp)
c01072cb:	77 0c                	ja     c01072d9 <page_init+0x132>
                maxpa = end;
c01072cd:	8b 45 b0             	mov    -0x50(%ebp),%eax
c01072d0:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c01072d3:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01072d6:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
    uint64_t maxpa = 0;

    cprintf("e820map:\n");
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
c01072d9:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c01072dd:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01072e0:	8b 00                	mov    (%eax),%eax
c01072e2:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c01072e5:	0f 8f f6 fe ff ff    	jg     c01071e1 <page_init+0x3a>
            if (maxpa < end && begin < KMEMSIZE) {
                maxpa = end;
            }
        }
    }
    if (maxpa > KMEMSIZE) {
c01072eb:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c01072ef:	72 1d                	jb     c010730e <page_init+0x167>
c01072f1:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c01072f5:	77 09                	ja     c0107300 <page_init+0x159>
c01072f7:	81 7d e0 00 00 00 38 	cmpl   $0x38000000,-0x20(%ebp)
c01072fe:	76 0e                	jbe    c010730e <page_init+0x167>
        maxpa = KMEMSIZE;
c0107300:	c7 45 e0 00 00 00 38 	movl   $0x38000000,-0x20(%ebp)
c0107307:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    }

    extern char end[];

    npage = maxpa / PGSIZE;
c010730e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107311:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0107314:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c0107318:	c1 ea 0c             	shr    $0xc,%edx
c010731b:	a3 80 0f 1b c0       	mov    %eax,0xc01b0f80
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);
c0107320:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
c0107327:	b8 c4 31 1b c0       	mov    $0xc01b31c4,%eax
c010732c:	8d 50 ff             	lea    -0x1(%eax),%edx
c010732f:	8b 45 ac             	mov    -0x54(%ebp),%eax
c0107332:	01 d0                	add    %edx,%eax
c0107334:	89 45 a8             	mov    %eax,-0x58(%ebp)
c0107337:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010733a:	ba 00 00 00 00       	mov    $0x0,%edx
c010733f:	f7 75 ac             	divl   -0x54(%ebp)
c0107342:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0107345:	29 d0                	sub    %edx,%eax
c0107347:	a3 b8 31 1b c0       	mov    %eax,0xc01b31b8

    for (i = 0; i < npage; i ++) {
c010734c:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0107353:	eb 27                	jmp    c010737c <page_init+0x1d5>
        SetPageReserved(pages + i);
c0107355:	a1 b8 31 1b c0       	mov    0xc01b31b8,%eax
c010735a:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010735d:	c1 e2 05             	shl    $0x5,%edx
c0107360:	01 d0                	add    %edx,%eax
c0107362:	83 c0 04             	add    $0x4,%eax
c0107365:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
c010736c:	89 45 8c             	mov    %eax,-0x74(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c010736f:	8b 45 8c             	mov    -0x74(%ebp),%eax
c0107372:	8b 55 90             	mov    -0x70(%ebp),%edx
c0107375:	0f ab 10             	bts    %edx,(%eax)
    extern char end[];

    npage = maxpa / PGSIZE;
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);

    for (i = 0; i < npage; i ++) {
c0107378:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c010737c:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010737f:	a1 80 0f 1b c0       	mov    0xc01b0f80,%eax
c0107384:	39 c2                	cmp    %eax,%edx
c0107386:	72 cd                	jb     c0107355 <page_init+0x1ae>
        SetPageReserved(pages + i);
    }

    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);
c0107388:	a1 80 0f 1b c0       	mov    0xc01b0f80,%eax
c010738d:	c1 e0 05             	shl    $0x5,%eax
c0107390:	89 c2                	mov    %eax,%edx
c0107392:	a1 b8 31 1b c0       	mov    0xc01b31b8,%eax
c0107397:	01 d0                	add    %edx,%eax
c0107399:	89 45 a4             	mov    %eax,-0x5c(%ebp)
c010739c:	81 7d a4 ff ff ff bf 	cmpl   $0xbfffffff,-0x5c(%ebp)
c01073a3:	77 17                	ja     c01073bc <page_init+0x215>
c01073a5:	ff 75 a4             	pushl  -0x5c(%ebp)
c01073a8:	68 50 d2 10 c0       	push   $0xc010d250
c01073ad:	68 ea 00 00 00       	push   $0xea
c01073b2:	68 74 d2 10 c0       	push   $0xc010d274
c01073b7:	e8 41 90 ff ff       	call   c01003fd <__panic>
c01073bc:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c01073bf:	05 00 00 00 40       	add    $0x40000000,%eax
c01073c4:	89 45 a0             	mov    %eax,-0x60(%ebp)

    for (i = 0; i < memmap->nr_map; i ++) {
c01073c7:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c01073ce:	e9 69 01 00 00       	jmp    c010753c <page_init+0x395>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c01073d3:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01073d6:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01073d9:	89 d0                	mov    %edx,%eax
c01073db:	c1 e0 02             	shl    $0x2,%eax
c01073de:	01 d0                	add    %edx,%eax
c01073e0:	c1 e0 02             	shl    $0x2,%eax
c01073e3:	01 c8                	add    %ecx,%eax
c01073e5:	8b 50 08             	mov    0x8(%eax),%edx
c01073e8:	8b 40 04             	mov    0x4(%eax),%eax
c01073eb:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01073ee:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c01073f1:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01073f4:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01073f7:	89 d0                	mov    %edx,%eax
c01073f9:	c1 e0 02             	shl    $0x2,%eax
c01073fc:	01 d0                	add    %edx,%eax
c01073fe:	c1 e0 02             	shl    $0x2,%eax
c0107401:	01 c8                	add    %ecx,%eax
c0107403:	8b 48 0c             	mov    0xc(%eax),%ecx
c0107406:	8b 58 10             	mov    0x10(%eax),%ebx
c0107409:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010740c:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010740f:	01 c8                	add    %ecx,%eax
c0107411:	11 da                	adc    %ebx,%edx
c0107413:	89 45 c8             	mov    %eax,-0x38(%ebp)
c0107416:	89 55 cc             	mov    %edx,-0x34(%ebp)
        if (memmap->map[i].type == E820_ARM) {
c0107419:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c010741c:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010741f:	89 d0                	mov    %edx,%eax
c0107421:	c1 e0 02             	shl    $0x2,%eax
c0107424:	01 d0                	add    %edx,%eax
c0107426:	c1 e0 02             	shl    $0x2,%eax
c0107429:	01 c8                	add    %ecx,%eax
c010742b:	83 c0 14             	add    $0x14,%eax
c010742e:	8b 00                	mov    (%eax),%eax
c0107430:	83 f8 01             	cmp    $0x1,%eax
c0107433:	0f 85 ff 00 00 00    	jne    c0107538 <page_init+0x391>
            if (begin < freemem) {
c0107439:	8b 45 a0             	mov    -0x60(%ebp),%eax
c010743c:	ba 00 00 00 00       	mov    $0x0,%edx
c0107441:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c0107444:	72 17                	jb     c010745d <page_init+0x2b6>
c0107446:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c0107449:	77 05                	ja     c0107450 <page_init+0x2a9>
c010744b:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c010744e:	76 0d                	jbe    c010745d <page_init+0x2b6>
                begin = freemem;
c0107450:	8b 45 a0             	mov    -0x60(%ebp),%eax
c0107453:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0107456:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
            }
            if (end > KMEMSIZE) {
c010745d:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0107461:	72 1d                	jb     c0107480 <page_init+0x2d9>
c0107463:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0107467:	77 09                	ja     c0107472 <page_init+0x2cb>
c0107469:	81 7d c8 00 00 00 38 	cmpl   $0x38000000,-0x38(%ebp)
c0107470:	76 0e                	jbe    c0107480 <page_init+0x2d9>
                end = KMEMSIZE;
c0107472:	c7 45 c8 00 00 00 38 	movl   $0x38000000,-0x38(%ebp)
c0107479:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
            }
            if (begin < end) {
c0107480:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0107483:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0107486:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c0107489:	0f 87 a9 00 00 00    	ja     c0107538 <page_init+0x391>
c010748f:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c0107492:	72 09                	jb     c010749d <page_init+0x2f6>
c0107494:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c0107497:	0f 83 9b 00 00 00    	jae    c0107538 <page_init+0x391>
                begin = ROUNDUP(begin, PGSIZE);
c010749d:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
c01074a4:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01074a7:	8b 45 9c             	mov    -0x64(%ebp),%eax
c01074aa:	01 d0                	add    %edx,%eax
c01074ac:	83 e8 01             	sub    $0x1,%eax
c01074af:	89 45 98             	mov    %eax,-0x68(%ebp)
c01074b2:	8b 45 98             	mov    -0x68(%ebp),%eax
c01074b5:	ba 00 00 00 00       	mov    $0x0,%edx
c01074ba:	f7 75 9c             	divl   -0x64(%ebp)
c01074bd:	8b 45 98             	mov    -0x68(%ebp),%eax
c01074c0:	29 d0                	sub    %edx,%eax
c01074c2:	ba 00 00 00 00       	mov    $0x0,%edx
c01074c7:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01074ca:	89 55 d4             	mov    %edx,-0x2c(%ebp)
                end = ROUNDDOWN(end, PGSIZE);
c01074cd:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01074d0:	89 45 94             	mov    %eax,-0x6c(%ebp)
c01074d3:	8b 45 94             	mov    -0x6c(%ebp),%eax
c01074d6:	ba 00 00 00 00       	mov    $0x0,%edx
c01074db:	89 c3                	mov    %eax,%ebx
c01074dd:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
c01074e3:	89 de                	mov    %ebx,%esi
c01074e5:	89 d0                	mov    %edx,%eax
c01074e7:	83 e0 00             	and    $0x0,%eax
c01074ea:	89 c7                	mov    %eax,%edi
c01074ec:	89 75 c8             	mov    %esi,-0x38(%ebp)
c01074ef:	89 7d cc             	mov    %edi,-0x34(%ebp)
                if (begin < end) {
c01074f2:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01074f5:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01074f8:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c01074fb:	77 3b                	ja     c0107538 <page_init+0x391>
c01074fd:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c0107500:	72 05                	jb     c0107507 <page_init+0x360>
c0107502:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c0107505:	73 31                	jae    c0107538 <page_init+0x391>
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
c0107507:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010750a:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010750d:	2b 45 d0             	sub    -0x30(%ebp),%eax
c0107510:	1b 55 d4             	sbb    -0x2c(%ebp),%edx
c0107513:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c0107517:	c1 ea 0c             	shr    $0xc,%edx
c010751a:	89 c3                	mov    %eax,%ebx
c010751c:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010751f:	83 ec 0c             	sub    $0xc,%esp
c0107522:	50                   	push   %eax
c0107523:	e8 ca f8 ff ff       	call   c0106df2 <pa2page>
c0107528:	83 c4 10             	add    $0x10,%esp
c010752b:	83 ec 08             	sub    $0x8,%esp
c010752e:	53                   	push   %ebx
c010752f:	50                   	push   %eax
c0107530:	e8 84 fb ff ff       	call   c01070b9 <init_memmap>
c0107535:	83 c4 10             	add    $0x10,%esp
        SetPageReserved(pages + i);
    }

    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);

    for (i = 0; i < memmap->nr_map; i ++) {
c0107538:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c010753c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010753f:	8b 00                	mov    (%eax),%eax
c0107541:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c0107544:	0f 8f 89 fe ff ff    	jg     c01073d3 <page_init+0x22c>
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
                }
            }
        }
    }
}
c010754a:	90                   	nop
c010754b:	8d 65 f4             	lea    -0xc(%ebp),%esp
c010754e:	5b                   	pop    %ebx
c010754f:	5e                   	pop    %esi
c0107550:	5f                   	pop    %edi
c0107551:	5d                   	pop    %ebp
c0107552:	c3                   	ret    

c0107553 <boot_map_segment>:
//  la:   linear address of this memory need to map (after x86 segment map)
//  size: memory size
//  pa:   physical address of this memory
//  perm: permission of this memory  
static void
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
c0107553:	55                   	push   %ebp
c0107554:	89 e5                	mov    %esp,%ebp
c0107556:	83 ec 28             	sub    $0x28,%esp
    assert(PGOFF(la) == PGOFF(pa));
c0107559:	8b 45 0c             	mov    0xc(%ebp),%eax
c010755c:	33 45 14             	xor    0x14(%ebp),%eax
c010755f:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107564:	85 c0                	test   %eax,%eax
c0107566:	74 19                	je     c0107581 <boot_map_segment+0x2e>
c0107568:	68 82 d2 10 c0       	push   $0xc010d282
c010756d:	68 99 d2 10 c0       	push   $0xc010d299
c0107572:	68 08 01 00 00       	push   $0x108
c0107577:	68 74 d2 10 c0       	push   $0xc010d274
c010757c:	e8 7c 8e ff ff       	call   c01003fd <__panic>
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
c0107581:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
c0107588:	8b 45 0c             	mov    0xc(%ebp),%eax
c010758b:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107590:	89 c2                	mov    %eax,%edx
c0107592:	8b 45 10             	mov    0x10(%ebp),%eax
c0107595:	01 c2                	add    %eax,%edx
c0107597:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010759a:	01 d0                	add    %edx,%eax
c010759c:	83 e8 01             	sub    $0x1,%eax
c010759f:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01075a2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01075a5:	ba 00 00 00 00       	mov    $0x0,%edx
c01075aa:	f7 75 f0             	divl   -0x10(%ebp)
c01075ad:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01075b0:	29 d0                	sub    %edx,%eax
c01075b2:	c1 e8 0c             	shr    $0xc,%eax
c01075b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    la = ROUNDDOWN(la, PGSIZE);
c01075b8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01075bb:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01075be:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01075c1:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01075c6:	89 45 0c             	mov    %eax,0xc(%ebp)
    pa = ROUNDDOWN(pa, PGSIZE);
c01075c9:	8b 45 14             	mov    0x14(%ebp),%eax
c01075cc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01075cf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01075d2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01075d7:	89 45 14             	mov    %eax,0x14(%ebp)
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c01075da:	eb 57                	jmp    c0107633 <boot_map_segment+0xe0>
        pte_t *ptep = get_pte(pgdir, la, 1);
c01075dc:	83 ec 04             	sub    $0x4,%esp
c01075df:	6a 01                	push   $0x1
c01075e1:	ff 75 0c             	pushl  0xc(%ebp)
c01075e4:	ff 75 08             	pushl  0x8(%ebp)
c01075e7:	e8 58 01 00 00       	call   c0107744 <get_pte>
c01075ec:	83 c4 10             	add    $0x10,%esp
c01075ef:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(ptep != NULL);
c01075f2:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01075f6:	75 19                	jne    c0107611 <boot_map_segment+0xbe>
c01075f8:	68 ae d2 10 c0       	push   $0xc010d2ae
c01075fd:	68 99 d2 10 c0       	push   $0xc010d299
c0107602:	68 0e 01 00 00       	push   $0x10e
c0107607:	68 74 d2 10 c0       	push   $0xc010d274
c010760c:	e8 ec 8d ff ff       	call   c01003fd <__panic>
        *ptep = pa | PTE_P | perm;
c0107611:	8b 45 14             	mov    0x14(%ebp),%eax
c0107614:	0b 45 18             	or     0x18(%ebp),%eax
c0107617:	83 c8 01             	or     $0x1,%eax
c010761a:	89 c2                	mov    %eax,%edx
c010761c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010761f:	89 10                	mov    %edx,(%eax)
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
    assert(PGOFF(la) == PGOFF(pa));
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
    la = ROUNDDOWN(la, PGSIZE);
    pa = ROUNDDOWN(pa, PGSIZE);
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c0107621:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0107625:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
c010762c:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
c0107633:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107637:	75 a3                	jne    c01075dc <boot_map_segment+0x89>
        pte_t *ptep = get_pte(pgdir, la, 1);
        assert(ptep != NULL);
        *ptep = pa | PTE_P | perm;
    }
}
c0107639:	90                   	nop
c010763a:	c9                   	leave  
c010763b:	c3                   	ret    

c010763c <boot_alloc_page>:

//boot_alloc_page - allocate one page using pmm->alloc_pages(1) 
// return value: the kernel virtual address of this allocated page
//note: this function is used to get the memory for PDT(Page Directory Table)&PT(Page Table)
static void *
boot_alloc_page(void) {
c010763c:	55                   	push   %ebp
c010763d:	89 e5                	mov    %esp,%ebp
c010763f:	83 ec 18             	sub    $0x18,%esp
    struct Page *p = alloc_page();
c0107642:	83 ec 0c             	sub    $0xc,%esp
c0107645:	6a 01                	push   $0x1
c0107647:	e8 8c fa ff ff       	call   c01070d8 <alloc_pages>
c010764c:	83 c4 10             	add    $0x10,%esp
c010764f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (p == NULL) {
c0107652:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107656:	75 17                	jne    c010766f <boot_alloc_page+0x33>
        panic("boot_alloc_page failed.\n");
c0107658:	83 ec 04             	sub    $0x4,%esp
c010765b:	68 bb d2 10 c0       	push   $0xc010d2bb
c0107660:	68 1a 01 00 00       	push   $0x11a
c0107665:	68 74 d2 10 c0       	push   $0xc010d274
c010766a:	e8 8e 8d ff ff       	call   c01003fd <__panic>
    }
    return page2kva(p);
c010766f:	83 ec 0c             	sub    $0xc,%esp
c0107672:	ff 75 f4             	pushl  -0xc(%ebp)
c0107675:	e8 b5 f7 ff ff       	call   c0106e2f <page2kva>
c010767a:	83 c4 10             	add    $0x10,%esp
}
c010767d:	c9                   	leave  
c010767e:	c3                   	ret    

c010767f <pmm_init>:

//pmm_init - setup a pmm to manage physical memory, build PDT&PT to setup paging mechanism 
//         - check the correctness of pmm & paging mechanism, print PDT&PT
void
pmm_init(void) {
c010767f:	55                   	push   %ebp
c0107680:	89 e5                	mov    %esp,%ebp
c0107682:	83 ec 18             	sub    $0x18,%esp
    // We've already enabled paging
    boot_cr3 = PADDR(boot_pgdir);
c0107685:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c010768a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010768d:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c0107694:	77 17                	ja     c01076ad <pmm_init+0x2e>
c0107696:	ff 75 f4             	pushl  -0xc(%ebp)
c0107699:	68 50 d2 10 c0       	push   $0xc010d250
c010769e:	68 24 01 00 00       	push   $0x124
c01076a3:	68 74 d2 10 c0       	push   $0xc010d274
c01076a8:	e8 50 8d ff ff       	call   c01003fd <__panic>
c01076ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01076b0:	05 00 00 00 40       	add    $0x40000000,%eax
c01076b5:	a3 b4 31 1b c0       	mov    %eax,0xc01b31b4
    //We need to alloc/free the physical memory (granularity is 4KB or other size). 
    //So a framework of physical memory manager (struct pmm_manager)is defined in pmm.h
    //First we should init a physical memory manager(pmm) based on the framework.
    //Then pmm can alloc/free the physical memory. 
    //Now the first_fit/best_fit/worst_fit/buddy_system pmm are available.
    init_pmm_manager();
c01076ba:	e8 c5 f9 ff ff       	call   c0107084 <init_pmm_manager>

    // detect physical memory space, reserve already used memory,
    // then use pmm->init_memmap to create free page list
    page_init();
c01076bf:	e8 e3 fa ff ff       	call   c01071a7 <page_init>

    //use pmm->check to verify the correctness of the alloc/free function in a pmm
    check_alloc_page();
c01076c4:	e8 16 08 00 00       	call   c0107edf <check_alloc_page>

    check_pgdir();
c01076c9:	e8 34 08 00 00       	call   c0107f02 <check_pgdir>

    static_assert(KERNBASE % PTSIZE == 0 && KERNTOP % PTSIZE == 0);

    // recursively insert boot_pgdir in itself
    // to form a virtual page table at virtual address VPT
    boot_pgdir[PDX(VPT)] = PADDR(boot_pgdir) | PTE_P | PTE_W;
c01076ce:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c01076d3:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
c01076d9:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c01076de:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01076e1:	81 7d f0 ff ff ff bf 	cmpl   $0xbfffffff,-0x10(%ebp)
c01076e8:	77 17                	ja     c0107701 <pmm_init+0x82>
c01076ea:	ff 75 f0             	pushl  -0x10(%ebp)
c01076ed:	68 50 d2 10 c0       	push   $0xc010d250
c01076f2:	68 3a 01 00 00       	push   $0x13a
c01076f7:	68 74 d2 10 c0       	push   $0xc010d274
c01076fc:	e8 fc 8c ff ff       	call   c01003fd <__panic>
c0107701:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107704:	05 00 00 00 40       	add    $0x40000000,%eax
c0107709:	83 c8 03             	or     $0x3,%eax
c010770c:	89 02                	mov    %eax,(%edx)

    // map all physical memory to linear memory with base linear addr KERNBASE
    // linear_addr KERNBASE ~ KERNBASE + KMEMSIZE = phy_addr 0 ~ KMEMSIZE
    boot_map_segment(boot_pgdir, KERNBASE, KMEMSIZE, 0, PTE_W);
c010770e:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c0107713:	83 ec 0c             	sub    $0xc,%esp
c0107716:	6a 02                	push   $0x2
c0107718:	6a 00                	push   $0x0
c010771a:	68 00 00 00 38       	push   $0x38000000
c010771f:	68 00 00 00 c0       	push   $0xc0000000
c0107724:	50                   	push   %eax
c0107725:	e8 29 fe ff ff       	call   c0107553 <boot_map_segment>
c010772a:	83 c4 20             	add    $0x20,%esp

    // Since we are using bootloader's GDT,
    // we should reload gdt (second time, the last time) to get user segments and the TSS
    // map virtual_addr 0 ~ 4G = linear_addr 0 ~ 4G
    // then set kernel stack (ss:esp) in TSS, setup TSS in gdt, load TSS
    gdt_init();
c010772d:	e8 60 f8 ff ff       	call   c0106f92 <gdt_init>

    //now the basic virtual memory map(see memalyout.h) is established.
    //check the correctness of the basic virtual memory map.
    check_boot_pgdir();
c0107732:	e8 31 0d 00 00       	call   c0108468 <check_boot_pgdir>

    print_pgdir();
c0107737:	e8 27 11 00 00       	call   c0108863 <print_pgdir>
    
    kmalloc_init();
c010773c:	e8 28 d9 ff ff       	call   c0105069 <kmalloc_init>

}
c0107741:	90                   	nop
c0107742:	c9                   	leave  
c0107743:	c3                   	ret    

c0107744 <get_pte>:
//  pgdir:  the kernel virtual base address of PDT
//  la:     the linear address need to map
//  create: a logical value to decide if alloc a page for PT
// return vaule: the kernel virtual address of this pte
pte_t *
get_pte(pde_t *pgdir, uintptr_t la, bool create) {
c0107744:	55                   	push   %ebp
c0107745:	89 e5                	mov    %esp,%ebp
c0107747:	83 ec 38             	sub    $0x38,%esp
                          // (7) set page directory entry's permission
    }
    return NULL;          // (8) return page table entry
#endif
    // (1) find page directory entry
    size_t pdx = PDX(la);       // index of this la in page dir table
c010774a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010774d:	c1 e8 16             	shr    $0x16,%eax
c0107750:	89 45 f4             	mov    %eax,-0xc(%ebp)
    pde_t * pdep = pgdir + pdx; // NOTE: this is a virtual addr
c0107753:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107756:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010775d:	8b 45 08             	mov    0x8(%ebp),%eax
c0107760:	01 d0                	add    %edx,%eax
c0107762:	89 45 f0             	mov    %eax,-0x10(%ebp)
    // (2) check if entry is not present
    if (!(*pdep & PTE_P)) {
c0107765:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107768:	8b 00                	mov    (%eax),%eax
c010776a:	83 e0 01             	and    $0x1,%eax
c010776d:	85 c0                	test   %eax,%eax
c010776f:	0f 85 ae 00 00 00    	jne    c0107823 <get_pte+0xdf>
        // (3) check if creating is needed
        if (!create) {
c0107775:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0107779:	75 0a                	jne    c0107785 <get_pte+0x41>
            return NULL;
c010777b:	b8 00 00 00 00       	mov    $0x0,%eax
c0107780:	e9 01 01 00 00       	jmp    c0107886 <get_pte+0x142>
        }
        // alloc page for page table
        struct Page * pt_page =  alloc_page();
c0107785:	83 ec 0c             	sub    $0xc,%esp
c0107788:	6a 01                	push   $0x1
c010778a:	e8 49 f9 ff ff       	call   c01070d8 <alloc_pages>
c010778f:	83 c4 10             	add    $0x10,%esp
c0107792:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (pt_page == NULL) {
c0107795:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0107799:	75 0a                	jne    c01077a5 <get_pte+0x61>
            return NULL;
c010779b:	b8 00 00 00 00       	mov    $0x0,%eax
c01077a0:	e9 e1 00 00 00       	jmp    c0107886 <get_pte+0x142>
        }
        // (4) set page reference
        set_page_ref(pt_page, 1);
c01077a5:	83 ec 08             	sub    $0x8,%esp
c01077a8:	6a 01                	push   $0x1
c01077aa:	ff 75 ec             	pushl  -0x14(%ebp)
c01077ad:	e8 22 f7 ff ff       	call   c0106ed4 <set_page_ref>
c01077b2:	83 c4 10             	add    $0x10,%esp
        // (5) get linear address of page
        uintptr_t pt_addr = page2pa(pt_page);
c01077b5:	83 ec 0c             	sub    $0xc,%esp
c01077b8:	ff 75 ec             	pushl  -0x14(%ebp)
c01077bb:	e8 1f f6 ff ff       	call   c0106ddf <page2pa>
c01077c0:	83 c4 10             	add    $0x10,%esp
c01077c3:	89 45 e8             	mov    %eax,-0x18(%ebp)
        // (6) clear page content using memset
        memset(KADDR(pt_addr), 0, PGSIZE);
c01077c6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01077c9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01077cc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01077cf:	c1 e8 0c             	shr    $0xc,%eax
c01077d2:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01077d5:	a1 80 0f 1b c0       	mov    0xc01b0f80,%eax
c01077da:	39 45 e0             	cmp    %eax,-0x20(%ebp)
c01077dd:	72 17                	jb     c01077f6 <get_pte+0xb2>
c01077df:	ff 75 e4             	pushl  -0x1c(%ebp)
c01077e2:	68 ac d1 10 c0       	push   $0xc010d1ac
c01077e7:	68 8d 01 00 00       	push   $0x18d
c01077ec:	68 74 d2 10 c0       	push   $0xc010d274
c01077f1:	e8 07 8c ff ff       	call   c01003fd <__panic>
c01077f6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01077f9:	2d 00 00 00 40       	sub    $0x40000000,%eax
c01077fe:	83 ec 04             	sub    $0x4,%esp
c0107801:	68 00 10 00 00       	push   $0x1000
c0107806:	6a 00                	push   $0x0
c0107808:	50                   	push   %eax
c0107809:	e8 07 38 00 00       	call   c010b015 <memset>
c010780e:	83 c4 10             	add    $0x10,%esp
        // (7) set page directory entry's permission
        *pdep = (PDE_ADDR(pt_addr)) | PTE_U | PTE_W | PTE_P; // PDE_ADDR: get pa &= ~0xFFF
c0107811:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107814:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0107819:	83 c8 07             	or     $0x7,%eax
c010781c:	89 c2                	mov    %eax,%edx
c010781e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107821:	89 10                	mov    %edx,(%eax)
    }
    // (8) return page table entry
    size_t ptx = PTX(la);   // index of this la in page dir table
c0107823:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107826:	c1 e8 0c             	shr    $0xc,%eax
c0107829:	25 ff 03 00 00       	and    $0x3ff,%eax
c010782e:	89 45 dc             	mov    %eax,-0x24(%ebp)
    uintptr_t pt_pa = PDE_ADDR(*pdep);
c0107831:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107834:	8b 00                	mov    (%eax),%eax
c0107836:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010783b:	89 45 d8             	mov    %eax,-0x28(%ebp)
    pte_t * ptep = (pte_t *)KADDR(pt_pa) + ptx;
c010783e:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0107841:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c0107844:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0107847:	c1 e8 0c             	shr    $0xc,%eax
c010784a:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010784d:	a1 80 0f 1b c0       	mov    0xc01b0f80,%eax
c0107852:	39 45 d0             	cmp    %eax,-0x30(%ebp)
c0107855:	72 17                	jb     c010786e <get_pte+0x12a>
c0107857:	ff 75 d4             	pushl  -0x2c(%ebp)
c010785a:	68 ac d1 10 c0       	push   $0xc010d1ac
c010785f:	68 94 01 00 00       	push   $0x194
c0107864:	68 74 d2 10 c0       	push   $0xc010d274
c0107869:	e8 8f 8b ff ff       	call   c01003fd <__panic>
c010786e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0107871:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0107876:	89 c2                	mov    %eax,%edx
c0107878:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010787b:	c1 e0 02             	shl    $0x2,%eax
c010787e:	01 d0                	add    %edx,%eax
c0107880:	89 45 cc             	mov    %eax,-0x34(%ebp)
    return ptep;
c0107883:	8b 45 cc             	mov    -0x34(%ebp),%eax
}
c0107886:	c9                   	leave  
c0107887:	c3                   	ret    

c0107888 <get_page>:

//get_page - get related Page struct for linear address la using PDT pgdir
struct Page *
get_page(pde_t *pgdir, uintptr_t la, pte_t **ptep_store) {
c0107888:	55                   	push   %ebp
c0107889:	89 e5                	mov    %esp,%ebp
c010788b:	83 ec 18             	sub    $0x18,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c010788e:	83 ec 04             	sub    $0x4,%esp
c0107891:	6a 00                	push   $0x0
c0107893:	ff 75 0c             	pushl  0xc(%ebp)
c0107896:	ff 75 08             	pushl  0x8(%ebp)
c0107899:	e8 a6 fe ff ff       	call   c0107744 <get_pte>
c010789e:	83 c4 10             	add    $0x10,%esp
c01078a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep_store != NULL) {
c01078a4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01078a8:	74 08                	je     c01078b2 <get_page+0x2a>
        *ptep_store = ptep;
c01078aa:	8b 45 10             	mov    0x10(%ebp),%eax
c01078ad:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01078b0:	89 10                	mov    %edx,(%eax)
    }
    if (ptep != NULL && *ptep & PTE_P) {
c01078b2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01078b6:	74 1f                	je     c01078d7 <get_page+0x4f>
c01078b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01078bb:	8b 00                	mov    (%eax),%eax
c01078bd:	83 e0 01             	and    $0x1,%eax
c01078c0:	85 c0                	test   %eax,%eax
c01078c2:	74 13                	je     c01078d7 <get_page+0x4f>
        return pte2page(*ptep);
c01078c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01078c7:	8b 00                	mov    (%eax),%eax
c01078c9:	83 ec 0c             	sub    $0xc,%esp
c01078cc:	50                   	push   %eax
c01078cd:	e8 a2 f5 ff ff       	call   c0106e74 <pte2page>
c01078d2:	83 c4 10             	add    $0x10,%esp
c01078d5:	eb 05                	jmp    c01078dc <get_page+0x54>
    }
    return NULL;
c01078d7:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01078dc:	c9                   	leave  
c01078dd:	c3                   	ret    

c01078de <page_remove_pte>:

//page_remove_pte - free an Page sturct which is related linear address la
//                - and clean(invalidate) pte which is related linear address la
//note: PT is changed, so the TLB need to be invalidate 
static inline void
page_remove_pte(pde_t *pgdir, uintptr_t la, pte_t *ptep) {
c01078de:	55                   	push   %ebp
c01078df:	89 e5                	mov    %esp,%ebp
c01078e1:	83 ec 18             	sub    $0x18,%esp
                                  //(5) clear second page table entry
                                  //(6) flush tlb
    }
#endif
    //(1) check if this page table entry is present
    if (!(*ptep & PTE_P)) {
c01078e4:	8b 45 10             	mov    0x10(%ebp),%eax
c01078e7:	8b 00                	mov    (%eax),%eax
c01078e9:	83 e0 01             	and    $0x1,%eax
c01078ec:	85 c0                	test   %eax,%eax
c01078ee:	74 57                	je     c0107947 <page_remove_pte+0x69>
        return;
    }
    //(2) find corresponding page to pte
    struct Page *page = pte2page(*ptep);
c01078f0:	8b 45 10             	mov    0x10(%ebp),%eax
c01078f3:	8b 00                	mov    (%eax),%eax
c01078f5:	83 ec 0c             	sub    $0xc,%esp
c01078f8:	50                   	push   %eax
c01078f9:	e8 76 f5 ff ff       	call   c0106e74 <pte2page>
c01078fe:	83 c4 10             	add    $0x10,%esp
c0107901:	89 45 f4             	mov    %eax,-0xc(%ebp)
    //(3) decrease page reference
    page_ref_dec(page);
c0107904:	83 ec 0c             	sub    $0xc,%esp
c0107907:	ff 75 f4             	pushl  -0xc(%ebp)
c010790a:	e8 ea f5 ff ff       	call   c0106ef9 <page_ref_dec>
c010790f:	83 c4 10             	add    $0x10,%esp
    //(4) and free this page when page reference reachs 0
    if (page->ref == 0) {
c0107912:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107915:	8b 00                	mov    (%eax),%eax
c0107917:	85 c0                	test   %eax,%eax
c0107919:	75 10                	jne    c010792b <page_remove_pte+0x4d>
        free_page(page);
c010791b:	83 ec 08             	sub    $0x8,%esp
c010791e:	6a 01                	push   $0x1
c0107920:	ff 75 f4             	pushl  -0xc(%ebp)
c0107923:	e8 1c f8 ff ff       	call   c0107144 <free_pages>
c0107928:	83 c4 10             	add    $0x10,%esp
    }
    //(5) clear second page table entry
    *ptep = 0;
c010792b:	8b 45 10             	mov    0x10(%ebp),%eax
c010792e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    //(6) flush tlb
    tlb_invalidate(pgdir, la);
c0107934:	83 ec 08             	sub    $0x8,%esp
c0107937:	ff 75 0c             	pushl  0xc(%ebp)
c010793a:	ff 75 08             	pushl  0x8(%ebp)
c010793d:	e8 9c 04 00 00       	call   c0107dde <tlb_invalidate>
c0107942:	83 c4 10             	add    $0x10,%esp
c0107945:	eb 01                	jmp    c0107948 <page_remove_pte+0x6a>
                                  //(6) flush tlb
    }
#endif
    //(1) check if this page table entry is present
    if (!(*ptep & PTE_P)) {
        return;
c0107947:	90                   	nop
    }
    //(5) clear second page table entry
    *ptep = 0;
    //(6) flush tlb
    tlb_invalidate(pgdir, la);
}
c0107948:	c9                   	leave  
c0107949:	c3                   	ret    

c010794a <unmap_range>:

void
unmap_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c010794a:	55                   	push   %ebp
c010794b:	89 e5                	mov    %esp,%ebp
c010794d:	83 ec 18             	sub    $0x18,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0107950:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107953:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107958:	85 c0                	test   %eax,%eax
c010795a:	75 0c                	jne    c0107968 <unmap_range+0x1e>
c010795c:	8b 45 10             	mov    0x10(%ebp),%eax
c010795f:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107964:	85 c0                	test   %eax,%eax
c0107966:	74 19                	je     c0107981 <unmap_range+0x37>
c0107968:	68 d4 d2 10 c0       	push   $0xc010d2d4
c010796d:	68 99 d2 10 c0       	push   $0xc010d299
c0107972:	68 d7 01 00 00       	push   $0x1d7
c0107977:	68 74 d2 10 c0       	push   $0xc010d274
c010797c:	e8 7c 8a ff ff       	call   c01003fd <__panic>
    assert(USER_ACCESS(start, end));
c0107981:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0107988:	76 11                	jbe    c010799b <unmap_range+0x51>
c010798a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010798d:	3b 45 10             	cmp    0x10(%ebp),%eax
c0107990:	73 09                	jae    c010799b <unmap_range+0x51>
c0107992:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c0107999:	76 19                	jbe    c01079b4 <unmap_range+0x6a>
c010799b:	68 fd d2 10 c0       	push   $0xc010d2fd
c01079a0:	68 99 d2 10 c0       	push   $0xc010d299
c01079a5:	68 d8 01 00 00       	push   $0x1d8
c01079aa:	68 74 d2 10 c0       	push   $0xc010d274
c01079af:	e8 49 8a ff ff       	call   c01003fd <__panic>

    do {
        pte_t *ptep = get_pte(pgdir, start, 0);
c01079b4:	83 ec 04             	sub    $0x4,%esp
c01079b7:	6a 00                	push   $0x0
c01079b9:	ff 75 0c             	pushl  0xc(%ebp)
c01079bc:	ff 75 08             	pushl  0x8(%ebp)
c01079bf:	e8 80 fd ff ff       	call   c0107744 <get_pte>
c01079c4:	83 c4 10             	add    $0x10,%esp
c01079c7:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ptep == NULL) {
c01079ca:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01079ce:	75 18                	jne    c01079e8 <unmap_range+0x9e>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
c01079d0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01079d3:	05 00 00 40 00       	add    $0x400000,%eax
c01079d8:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01079db:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01079de:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c01079e3:	89 45 0c             	mov    %eax,0xc(%ebp)
            continue ;
c01079e6:	eb 24                	jmp    c0107a0c <unmap_range+0xc2>
        }
        if (*ptep != 0) {
c01079e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01079eb:	8b 00                	mov    (%eax),%eax
c01079ed:	85 c0                	test   %eax,%eax
c01079ef:	74 14                	je     c0107a05 <unmap_range+0xbb>
            page_remove_pte(pgdir, start, ptep);
c01079f1:	83 ec 04             	sub    $0x4,%esp
c01079f4:	ff 75 f4             	pushl  -0xc(%ebp)
c01079f7:	ff 75 0c             	pushl  0xc(%ebp)
c01079fa:	ff 75 08             	pushl  0x8(%ebp)
c01079fd:	e8 dc fe ff ff       	call   c01078de <page_remove_pte>
c0107a02:	83 c4 10             	add    $0x10,%esp
        }
        start += PGSIZE;
c0107a05:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
    } while (start != 0 && start < end);
c0107a0c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0107a10:	74 08                	je     c0107a1a <unmap_range+0xd0>
c0107a12:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107a15:	3b 45 10             	cmp    0x10(%ebp),%eax
c0107a18:	72 9a                	jb     c01079b4 <unmap_range+0x6a>
}
c0107a1a:	90                   	nop
c0107a1b:	c9                   	leave  
c0107a1c:	c3                   	ret    

c0107a1d <exit_range>:

void
exit_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c0107a1d:	55                   	push   %ebp
c0107a1e:	89 e5                	mov    %esp,%ebp
c0107a20:	83 ec 18             	sub    $0x18,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0107a23:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107a26:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107a2b:	85 c0                	test   %eax,%eax
c0107a2d:	75 0c                	jne    c0107a3b <exit_range+0x1e>
c0107a2f:	8b 45 10             	mov    0x10(%ebp),%eax
c0107a32:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107a37:	85 c0                	test   %eax,%eax
c0107a39:	74 19                	je     c0107a54 <exit_range+0x37>
c0107a3b:	68 d4 d2 10 c0       	push   $0xc010d2d4
c0107a40:	68 99 d2 10 c0       	push   $0xc010d299
c0107a45:	68 e9 01 00 00       	push   $0x1e9
c0107a4a:	68 74 d2 10 c0       	push   $0xc010d274
c0107a4f:	e8 a9 89 ff ff       	call   c01003fd <__panic>
    assert(USER_ACCESS(start, end));
c0107a54:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0107a5b:	76 11                	jbe    c0107a6e <exit_range+0x51>
c0107a5d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107a60:	3b 45 10             	cmp    0x10(%ebp),%eax
c0107a63:	73 09                	jae    c0107a6e <exit_range+0x51>
c0107a65:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c0107a6c:	76 19                	jbe    c0107a87 <exit_range+0x6a>
c0107a6e:	68 fd d2 10 c0       	push   $0xc010d2fd
c0107a73:	68 99 d2 10 c0       	push   $0xc010d299
c0107a78:	68 ea 01 00 00       	push   $0x1ea
c0107a7d:	68 74 d2 10 c0       	push   $0xc010d274
c0107a82:	e8 76 89 ff ff       	call   c01003fd <__panic>

    start = ROUNDDOWN(start, PTSIZE);
c0107a87:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107a8a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0107a8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107a90:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0107a95:	89 45 0c             	mov    %eax,0xc(%ebp)
    do {
        int pde_idx = PDX(start);
c0107a98:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107a9b:	c1 e8 16             	shr    $0x16,%eax
c0107a9e:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pgdir[pde_idx] & PTE_P) {
c0107aa1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107aa4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0107aab:	8b 45 08             	mov    0x8(%ebp),%eax
c0107aae:	01 d0                	add    %edx,%eax
c0107ab0:	8b 00                	mov    (%eax),%eax
c0107ab2:	83 e0 01             	and    $0x1,%eax
c0107ab5:	85 c0                	test   %eax,%eax
c0107ab7:	74 40                	je     c0107af9 <exit_range+0xdc>
            free_page(pde2page(pgdir[pde_idx]));
c0107ab9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107abc:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0107ac3:	8b 45 08             	mov    0x8(%ebp),%eax
c0107ac6:	01 d0                	add    %edx,%eax
c0107ac8:	8b 00                	mov    (%eax),%eax
c0107aca:	83 ec 0c             	sub    $0xc,%esp
c0107acd:	50                   	push   %eax
c0107ace:	e8 db f3 ff ff       	call   c0106eae <pde2page>
c0107ad3:	83 c4 10             	add    $0x10,%esp
c0107ad6:	83 ec 08             	sub    $0x8,%esp
c0107ad9:	6a 01                	push   $0x1
c0107adb:	50                   	push   %eax
c0107adc:	e8 63 f6 ff ff       	call   c0107144 <free_pages>
c0107ae1:	83 c4 10             	add    $0x10,%esp
            pgdir[pde_idx] = 0;
c0107ae4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107ae7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0107aee:	8b 45 08             	mov    0x8(%ebp),%eax
c0107af1:	01 d0                	add    %edx,%eax
c0107af3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        }
        start += PTSIZE;
c0107af9:	81 45 0c 00 00 40 00 	addl   $0x400000,0xc(%ebp)
    } while (start != 0 && start < end);
c0107b00:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0107b04:	74 08                	je     c0107b0e <exit_range+0xf1>
c0107b06:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107b09:	3b 45 10             	cmp    0x10(%ebp),%eax
c0107b0c:	72 8a                	jb     c0107a98 <exit_range+0x7b>
}
c0107b0e:	90                   	nop
c0107b0f:	c9                   	leave  
c0107b10:	c3                   	ret    

c0107b11 <copy_range>:
 * @share: flags to indicate to dup OR share. We just use dup method, so it didn't be used.
 *
 * CALL GRAPH: copy_mm-->dup_mmap-->copy_range
 */
int
copy_range(pde_t *to, pde_t *from, uintptr_t start, uintptr_t end, bool share) {
c0107b11:	55                   	push   %ebp
c0107b12:	89 e5                	mov    %esp,%ebp
c0107b14:	83 ec 38             	sub    $0x38,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0107b17:	8b 45 10             	mov    0x10(%ebp),%eax
c0107b1a:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107b1f:	85 c0                	test   %eax,%eax
c0107b21:	75 0c                	jne    c0107b2f <copy_range+0x1e>
c0107b23:	8b 45 14             	mov    0x14(%ebp),%eax
c0107b26:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107b2b:	85 c0                	test   %eax,%eax
c0107b2d:	74 19                	je     c0107b48 <copy_range+0x37>
c0107b2f:	68 d4 d2 10 c0       	push   $0xc010d2d4
c0107b34:	68 99 d2 10 c0       	push   $0xc010d299
c0107b39:	68 ff 01 00 00       	push   $0x1ff
c0107b3e:	68 74 d2 10 c0       	push   $0xc010d274
c0107b43:	e8 b5 88 ff ff       	call   c01003fd <__panic>
    assert(USER_ACCESS(start, end));
c0107b48:	81 7d 10 ff ff 1f 00 	cmpl   $0x1fffff,0x10(%ebp)
c0107b4f:	76 11                	jbe    c0107b62 <copy_range+0x51>
c0107b51:	8b 45 10             	mov    0x10(%ebp),%eax
c0107b54:	3b 45 14             	cmp    0x14(%ebp),%eax
c0107b57:	73 09                	jae    c0107b62 <copy_range+0x51>
c0107b59:	81 7d 14 00 00 00 b0 	cmpl   $0xb0000000,0x14(%ebp)
c0107b60:	76 19                	jbe    c0107b7b <copy_range+0x6a>
c0107b62:	68 fd d2 10 c0       	push   $0xc010d2fd
c0107b67:	68 99 d2 10 c0       	push   $0xc010d299
c0107b6c:	68 00 02 00 00       	push   $0x200
c0107b71:	68 74 d2 10 c0       	push   $0xc010d274
c0107b76:	e8 82 88 ff ff       	call   c01003fd <__panic>
    // copy content by page unit.
    do {
        //call get_pte to find process A's pte according to the addr start
        pte_t *ptep = get_pte(from, start, 0), *nptep;
c0107b7b:	83 ec 04             	sub    $0x4,%esp
c0107b7e:	6a 00                	push   $0x0
c0107b80:	ff 75 10             	pushl  0x10(%ebp)
c0107b83:	ff 75 0c             	pushl  0xc(%ebp)
c0107b86:	e8 b9 fb ff ff       	call   c0107744 <get_pte>
c0107b8b:	83 c4 10             	add    $0x10,%esp
c0107b8e:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ptep == NULL) {
c0107b91:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107b95:	75 1b                	jne    c0107bb2 <copy_range+0xa1>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
c0107b97:	8b 45 10             	mov    0x10(%ebp),%eax
c0107b9a:	05 00 00 40 00       	add    $0x400000,%eax
c0107b9f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107ba2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107ba5:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0107baa:	89 45 10             	mov    %eax,0x10(%ebp)
            continue ;
c0107bad:	e9 21 01 00 00       	jmp    c0107cd3 <copy_range+0x1c2>
        }
        //call get_pte to find process B's pte according to the addr start. If pte is NULL, just alloc a PT
        if (*ptep & PTE_P) {
c0107bb2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107bb5:	8b 00                	mov    (%eax),%eax
c0107bb7:	83 e0 01             	and    $0x1,%eax
c0107bba:	85 c0                	test   %eax,%eax
c0107bbc:	0f 84 0a 01 00 00    	je     c0107ccc <copy_range+0x1bb>
            if ((nptep = get_pte(to, start, 1)) == NULL) {
c0107bc2:	83 ec 04             	sub    $0x4,%esp
c0107bc5:	6a 01                	push   $0x1
c0107bc7:	ff 75 10             	pushl  0x10(%ebp)
c0107bca:	ff 75 08             	pushl  0x8(%ebp)
c0107bcd:	e8 72 fb ff ff       	call   c0107744 <get_pte>
c0107bd2:	83 c4 10             	add    $0x10,%esp
c0107bd5:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0107bd8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0107bdc:	75 0a                	jne    c0107be8 <copy_range+0xd7>
                return -E_NO_MEM;
c0107bde:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0107be3:	e9 02 01 00 00       	jmp    c0107cea <copy_range+0x1d9>
            }
            uint32_t perm = (*ptep & PTE_USER);
c0107be8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107beb:	8b 00                	mov    (%eax),%eax
c0107bed:	83 e0 07             	and    $0x7,%eax
c0107bf0:	89 45 e8             	mov    %eax,-0x18(%ebp)
            //get page from ptep
            struct Page *page = pte2page(*ptep);
c0107bf3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107bf6:	8b 00                	mov    (%eax),%eax
c0107bf8:	83 ec 0c             	sub    $0xc,%esp
c0107bfb:	50                   	push   %eax
c0107bfc:	e8 73 f2 ff ff       	call   c0106e74 <pte2page>
c0107c01:	83 c4 10             	add    $0x10,%esp
c0107c04:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            // alloc a page for process B
            struct Page *npage=alloc_page();
c0107c07:	83 ec 0c             	sub    $0xc,%esp
c0107c0a:	6a 01                	push   $0x1
c0107c0c:	e8 c7 f4 ff ff       	call   c01070d8 <alloc_pages>
c0107c11:	83 c4 10             	add    $0x10,%esp
c0107c14:	89 45 e0             	mov    %eax,-0x20(%ebp)
            assert(page!=NULL);
c0107c17:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0107c1b:	75 19                	jne    c0107c36 <copy_range+0x125>
c0107c1d:	68 15 d3 10 c0       	push   $0xc010d315
c0107c22:	68 99 d2 10 c0       	push   $0xc010d299
c0107c27:	68 13 02 00 00       	push   $0x213
c0107c2c:	68 74 d2 10 c0       	push   $0xc010d274
c0107c31:	e8 c7 87 ff ff       	call   c01003fd <__panic>
            assert(npage!=NULL);
c0107c36:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0107c3a:	75 19                	jne    c0107c55 <copy_range+0x144>
c0107c3c:	68 20 d3 10 c0       	push   $0xc010d320
c0107c41:	68 99 d2 10 c0       	push   $0xc010d299
c0107c46:	68 14 02 00 00       	push   $0x214
c0107c4b:	68 74 d2 10 c0       	push   $0xc010d274
c0107c50:	e8 a8 87 ff ff       	call   c01003fd <__panic>
            int ret=0;
c0107c55:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
            * (2) find dst_kvaddr: the kernel virtual address of npage
            * (3) memory copy from src_kvaddr to dst_kvaddr, size is PGSIZE
            * (4) build the map of phy addr of  nage with the linear addr start
            */
            // (1) find src_kvaddr: the kernel virtual address of page
            uintptr_t src_kvaddr = page2kva(page);
c0107c5c:	83 ec 0c             	sub    $0xc,%esp
c0107c5f:	ff 75 e4             	pushl  -0x1c(%ebp)
c0107c62:	e8 c8 f1 ff ff       	call   c0106e2f <page2kva>
c0107c67:	83 c4 10             	add    $0x10,%esp
c0107c6a:	89 45 d8             	mov    %eax,-0x28(%ebp)
            // (2) find dst_kvaddr: the kernel virtual address of npage
            uintptr_t dst_kvaddr = page2kva(npage);
c0107c6d:	83 ec 0c             	sub    $0xc,%esp
c0107c70:	ff 75 e0             	pushl  -0x20(%ebp)
c0107c73:	e8 b7 f1 ff ff       	call   c0106e2f <page2kva>
c0107c78:	83 c4 10             	add    $0x10,%esp
c0107c7b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
            // (3) memory copy from src_kvaddr to dst_kvaddr, size is PGSIZE
            memcpy(dst_kvaddr, src_kvaddr, PGSIZE);
c0107c7e:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0107c81:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0107c84:	83 ec 04             	sub    $0x4,%esp
c0107c87:	68 00 10 00 00       	push   $0x1000
c0107c8c:	52                   	push   %edx
c0107c8d:	50                   	push   %eax
c0107c8e:	e8 65 34 00 00       	call   c010b0f8 <memcpy>
c0107c93:	83 c4 10             	add    $0x10,%esp
            // (4) build the map of phy addr of  nage with the linear addr start
            ret = page_insert(to, npage, start, perm);
c0107c96:	ff 75 e8             	pushl  -0x18(%ebp)
c0107c99:	ff 75 10             	pushl  0x10(%ebp)
c0107c9c:	ff 75 e0             	pushl  -0x20(%ebp)
c0107c9f:	ff 75 08             	pushl  0x8(%ebp)
c0107ca2:	e8 7e 00 00 00       	call   c0107d25 <page_insert>
c0107ca7:	83 c4 10             	add    $0x10,%esp
c0107caa:	89 45 dc             	mov    %eax,-0x24(%ebp)
            assert(ret == 0);
c0107cad:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0107cb1:	74 19                	je     c0107ccc <copy_range+0x1bb>
c0107cb3:	68 2c d3 10 c0       	push   $0xc010d32c
c0107cb8:	68 99 d2 10 c0       	push   $0xc010d299
c0107cbd:	68 2c 02 00 00       	push   $0x22c
c0107cc2:	68 74 d2 10 c0       	push   $0xc010d274
c0107cc7:	e8 31 87 ff ff       	call   c01003fd <__panic>
        }
        start += PGSIZE;
c0107ccc:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    } while (start != 0 && start < end);
c0107cd3:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0107cd7:	74 0c                	je     c0107ce5 <copy_range+0x1d4>
c0107cd9:	8b 45 10             	mov    0x10(%ebp),%eax
c0107cdc:	3b 45 14             	cmp    0x14(%ebp),%eax
c0107cdf:	0f 82 96 fe ff ff    	jb     c0107b7b <copy_range+0x6a>
    return 0;
c0107ce5:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107cea:	c9                   	leave  
c0107ceb:	c3                   	ret    

c0107cec <page_remove>:

//page_remove - free an Page which is related linear address la and has an validated pte
void
page_remove(pde_t *pgdir, uintptr_t la) {
c0107cec:	55                   	push   %ebp
c0107ced:	89 e5                	mov    %esp,%ebp
c0107cef:	83 ec 18             	sub    $0x18,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c0107cf2:	83 ec 04             	sub    $0x4,%esp
c0107cf5:	6a 00                	push   $0x0
c0107cf7:	ff 75 0c             	pushl  0xc(%ebp)
c0107cfa:	ff 75 08             	pushl  0x8(%ebp)
c0107cfd:	e8 42 fa ff ff       	call   c0107744 <get_pte>
c0107d02:	83 c4 10             	add    $0x10,%esp
c0107d05:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep != NULL) {
c0107d08:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107d0c:	74 14                	je     c0107d22 <page_remove+0x36>
        page_remove_pte(pgdir, la, ptep);
c0107d0e:	83 ec 04             	sub    $0x4,%esp
c0107d11:	ff 75 f4             	pushl  -0xc(%ebp)
c0107d14:	ff 75 0c             	pushl  0xc(%ebp)
c0107d17:	ff 75 08             	pushl  0x8(%ebp)
c0107d1a:	e8 bf fb ff ff       	call   c01078de <page_remove_pte>
c0107d1f:	83 c4 10             	add    $0x10,%esp
    }
}
c0107d22:	90                   	nop
c0107d23:	c9                   	leave  
c0107d24:	c3                   	ret    

c0107d25 <page_insert>:
//  la:    the linear address need to map
//  perm:  the permission of this Page which is setted in related pte
// return value: always 0
//note: PT is changed, so the TLB need to be invalidate 
int
page_insert(pde_t *pgdir, struct Page *page, uintptr_t la, uint32_t perm) {
c0107d25:	55                   	push   %ebp
c0107d26:	89 e5                	mov    %esp,%ebp
c0107d28:	83 ec 18             	sub    $0x18,%esp
    pte_t *ptep = get_pte(pgdir, la, 1);
c0107d2b:	83 ec 04             	sub    $0x4,%esp
c0107d2e:	6a 01                	push   $0x1
c0107d30:	ff 75 10             	pushl  0x10(%ebp)
c0107d33:	ff 75 08             	pushl  0x8(%ebp)
c0107d36:	e8 09 fa ff ff       	call   c0107744 <get_pte>
c0107d3b:	83 c4 10             	add    $0x10,%esp
c0107d3e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep == NULL) {
c0107d41:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107d45:	75 0a                	jne    c0107d51 <page_insert+0x2c>
        return -E_NO_MEM;
c0107d47:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0107d4c:	e9 8b 00 00 00       	jmp    c0107ddc <page_insert+0xb7>
    }
    page_ref_inc(page);
c0107d51:	83 ec 0c             	sub    $0xc,%esp
c0107d54:	ff 75 0c             	pushl  0xc(%ebp)
c0107d57:	e8 86 f1 ff ff       	call   c0106ee2 <page_ref_inc>
c0107d5c:	83 c4 10             	add    $0x10,%esp
    if (*ptep & PTE_P) {
c0107d5f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107d62:	8b 00                	mov    (%eax),%eax
c0107d64:	83 e0 01             	and    $0x1,%eax
c0107d67:	85 c0                	test   %eax,%eax
c0107d69:	74 40                	je     c0107dab <page_insert+0x86>
        struct Page *p = pte2page(*ptep);
c0107d6b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107d6e:	8b 00                	mov    (%eax),%eax
c0107d70:	83 ec 0c             	sub    $0xc,%esp
c0107d73:	50                   	push   %eax
c0107d74:	e8 fb f0 ff ff       	call   c0106e74 <pte2page>
c0107d79:	83 c4 10             	add    $0x10,%esp
c0107d7c:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (p == page) {
c0107d7f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107d82:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0107d85:	75 10                	jne    c0107d97 <page_insert+0x72>
            page_ref_dec(page);
c0107d87:	83 ec 0c             	sub    $0xc,%esp
c0107d8a:	ff 75 0c             	pushl  0xc(%ebp)
c0107d8d:	e8 67 f1 ff ff       	call   c0106ef9 <page_ref_dec>
c0107d92:	83 c4 10             	add    $0x10,%esp
c0107d95:	eb 14                	jmp    c0107dab <page_insert+0x86>
        }
        else {
            page_remove_pte(pgdir, la, ptep);
c0107d97:	83 ec 04             	sub    $0x4,%esp
c0107d9a:	ff 75 f4             	pushl  -0xc(%ebp)
c0107d9d:	ff 75 10             	pushl  0x10(%ebp)
c0107da0:	ff 75 08             	pushl  0x8(%ebp)
c0107da3:	e8 36 fb ff ff       	call   c01078de <page_remove_pte>
c0107da8:	83 c4 10             	add    $0x10,%esp
        }
    }
    *ptep = page2pa(page) | PTE_P | perm;
c0107dab:	83 ec 0c             	sub    $0xc,%esp
c0107dae:	ff 75 0c             	pushl  0xc(%ebp)
c0107db1:	e8 29 f0 ff ff       	call   c0106ddf <page2pa>
c0107db6:	83 c4 10             	add    $0x10,%esp
c0107db9:	0b 45 14             	or     0x14(%ebp),%eax
c0107dbc:	83 c8 01             	or     $0x1,%eax
c0107dbf:	89 c2                	mov    %eax,%edx
c0107dc1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107dc4:	89 10                	mov    %edx,(%eax)
    tlb_invalidate(pgdir, la);
c0107dc6:	83 ec 08             	sub    $0x8,%esp
c0107dc9:	ff 75 10             	pushl  0x10(%ebp)
c0107dcc:	ff 75 08             	pushl  0x8(%ebp)
c0107dcf:	e8 0a 00 00 00       	call   c0107dde <tlb_invalidate>
c0107dd4:	83 c4 10             	add    $0x10,%esp
    return 0;
c0107dd7:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107ddc:	c9                   	leave  
c0107ddd:	c3                   	ret    

c0107dde <tlb_invalidate>:

// invalidate a TLB entry, but only if the page tables being
// edited are the ones currently in use by the processor.
void
tlb_invalidate(pde_t *pgdir, uintptr_t la) {
c0107dde:	55                   	push   %ebp
c0107ddf:	89 e5                	mov    %esp,%ebp
c0107de1:	83 ec 18             	sub    $0x18,%esp
}

static inline uintptr_t
rcr3(void) {
    uintptr_t cr3;
    asm volatile ("mov %%cr3, %0" : "=r" (cr3) :: "memory");
c0107de4:	0f 20 d8             	mov    %cr3,%eax
c0107de7:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return cr3;
c0107dea:	8b 55 ec             	mov    -0x14(%ebp),%edx
    if (rcr3() == PADDR(pgdir)) {
c0107ded:	8b 45 08             	mov    0x8(%ebp),%eax
c0107df0:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107df3:	81 7d f0 ff ff ff bf 	cmpl   $0xbfffffff,-0x10(%ebp)
c0107dfa:	77 17                	ja     c0107e13 <tlb_invalidate+0x35>
c0107dfc:	ff 75 f0             	pushl  -0x10(%ebp)
c0107dff:	68 50 d2 10 c0       	push   $0xc010d250
c0107e04:	68 5d 02 00 00       	push   $0x25d
c0107e09:	68 74 d2 10 c0       	push   $0xc010d274
c0107e0e:	e8 ea 85 ff ff       	call   c01003fd <__panic>
c0107e13:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107e16:	05 00 00 00 40       	add    $0x40000000,%eax
c0107e1b:	39 c2                	cmp    %eax,%edx
c0107e1d:	75 0c                	jne    c0107e2b <tlb_invalidate+0x4d>
        invlpg((void *)la);
c0107e1f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107e22:	89 45 f4             	mov    %eax,-0xc(%ebp)
}

static inline void
invlpg(void *addr) {
    asm volatile ("invlpg (%0)" :: "r" (addr) : "memory");
c0107e25:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107e28:	0f 01 38             	invlpg (%eax)
    }
}
c0107e2b:	90                   	nop
c0107e2c:	c9                   	leave  
c0107e2d:	c3                   	ret    

c0107e2e <pgdir_alloc_page>:

// pgdir_alloc_page - call alloc_page & page_insert functions to 
//                  - allocate a page size memory & setup an addr map
//                  - pa<->la with linear address la and the PDT pgdir
struct Page *
pgdir_alloc_page(pde_t *pgdir, uintptr_t la, uint32_t perm) {
c0107e2e:	55                   	push   %ebp
c0107e2f:	89 e5                	mov    %esp,%ebp
c0107e31:	83 ec 18             	sub    $0x18,%esp
    struct Page *page = alloc_page();
c0107e34:	83 ec 0c             	sub    $0xc,%esp
c0107e37:	6a 01                	push   $0x1
c0107e39:	e8 9a f2 ff ff       	call   c01070d8 <alloc_pages>
c0107e3e:	83 c4 10             	add    $0x10,%esp
c0107e41:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c0107e44:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107e48:	0f 84 8c 00 00 00    	je     c0107eda <pgdir_alloc_page+0xac>
        if (page_insert(pgdir, page, la, perm) != 0) {
c0107e4e:	ff 75 10             	pushl  0x10(%ebp)
c0107e51:	ff 75 0c             	pushl  0xc(%ebp)
c0107e54:	ff 75 f4             	pushl  -0xc(%ebp)
c0107e57:	ff 75 08             	pushl  0x8(%ebp)
c0107e5a:	e8 c6 fe ff ff       	call   c0107d25 <page_insert>
c0107e5f:	83 c4 10             	add    $0x10,%esp
c0107e62:	85 c0                	test   %eax,%eax
c0107e64:	74 17                	je     c0107e7d <pgdir_alloc_page+0x4f>
            free_page(page);
c0107e66:	83 ec 08             	sub    $0x8,%esp
c0107e69:	6a 01                	push   $0x1
c0107e6b:	ff 75 f4             	pushl  -0xc(%ebp)
c0107e6e:	e8 d1 f2 ff ff       	call   c0107144 <free_pages>
c0107e73:	83 c4 10             	add    $0x10,%esp
            return NULL;
c0107e76:	b8 00 00 00 00       	mov    $0x0,%eax
c0107e7b:	eb 60                	jmp    c0107edd <pgdir_alloc_page+0xaf>
        }
        if (swap_init_ok){
c0107e7d:	a1 6c 0f 1b c0       	mov    0xc01b0f6c,%eax
c0107e82:	85 c0                	test   %eax,%eax
c0107e84:	74 54                	je     c0107eda <pgdir_alloc_page+0xac>
            if(check_mm_struct!=NULL) {
c0107e86:	a1 d0 30 1b c0       	mov    0xc01b30d0,%eax
c0107e8b:	85 c0                	test   %eax,%eax
c0107e8d:	74 4b                	je     c0107eda <pgdir_alloc_page+0xac>
                swap_map_swappable(check_mm_struct, la, page, 0);
c0107e8f:	a1 d0 30 1b c0       	mov    0xc01b30d0,%eax
c0107e94:	6a 00                	push   $0x0
c0107e96:	ff 75 f4             	pushl  -0xc(%ebp)
c0107e99:	ff 75 0c             	pushl  0xc(%ebp)
c0107e9c:	50                   	push   %eax
c0107e9d:	e8 be d5 ff ff       	call   c0105460 <swap_map_swappable>
c0107ea2:	83 c4 10             	add    $0x10,%esp
                page->pra_vaddr=la;
c0107ea5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107ea8:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107eab:	89 50 1c             	mov    %edx,0x1c(%eax)
                assert(page_ref(page) == 1);
c0107eae:	83 ec 0c             	sub    $0xc,%esp
c0107eb1:	ff 75 f4             	pushl  -0xc(%ebp)
c0107eb4:	e8 11 f0 ff ff       	call   c0106eca <page_ref>
c0107eb9:	83 c4 10             	add    $0x10,%esp
c0107ebc:	83 f8 01             	cmp    $0x1,%eax
c0107ebf:	74 19                	je     c0107eda <pgdir_alloc_page+0xac>
c0107ec1:	68 35 d3 10 c0       	push   $0xc010d335
c0107ec6:	68 99 d2 10 c0       	push   $0xc010d299
c0107ecb:	68 71 02 00 00       	push   $0x271
c0107ed0:	68 74 d2 10 c0       	push   $0xc010d274
c0107ed5:	e8 23 85 ff ff       	call   c01003fd <__panic>
            }
        }

    }

    return page;
c0107eda:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0107edd:	c9                   	leave  
c0107ede:	c3                   	ret    

c0107edf <check_alloc_page>:

static void
check_alloc_page(void) {
c0107edf:	55                   	push   %ebp
c0107ee0:	89 e5                	mov    %esp,%ebp
c0107ee2:	83 ec 08             	sub    $0x8,%esp
    pmm_manager->check();
c0107ee5:	a1 b0 31 1b c0       	mov    0xc01b31b0,%eax
c0107eea:	8b 40 18             	mov    0x18(%eax),%eax
c0107eed:	ff d0                	call   *%eax
    cprintf("check_alloc_page() succeeded!\n");
c0107eef:	83 ec 0c             	sub    $0xc,%esp
c0107ef2:	68 4c d3 10 c0       	push   $0xc010d34c
c0107ef7:	e8 9b 83 ff ff       	call   c0100297 <cprintf>
c0107efc:	83 c4 10             	add    $0x10,%esp
}
c0107eff:	90                   	nop
c0107f00:	c9                   	leave  
c0107f01:	c3                   	ret    

c0107f02 <check_pgdir>:

static void
check_pgdir(void) {
c0107f02:	55                   	push   %ebp
c0107f03:	89 e5                	mov    %esp,%ebp
c0107f05:	83 ec 28             	sub    $0x28,%esp
    assert(npage <= KMEMSIZE / PGSIZE);
c0107f08:	a1 80 0f 1b c0       	mov    0xc01b0f80,%eax
c0107f0d:	3d 00 80 03 00       	cmp    $0x38000,%eax
c0107f12:	76 19                	jbe    c0107f2d <check_pgdir+0x2b>
c0107f14:	68 6b d3 10 c0       	push   $0xc010d36b
c0107f19:	68 99 d2 10 c0       	push   $0xc010d299
c0107f1e:	68 89 02 00 00       	push   $0x289
c0107f23:	68 74 d2 10 c0       	push   $0xc010d274
c0107f28:	e8 d0 84 ff ff       	call   c01003fd <__panic>
    assert(boot_pgdir != NULL && (uint32_t)PGOFF(boot_pgdir) == 0);
c0107f2d:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c0107f32:	85 c0                	test   %eax,%eax
c0107f34:	74 0e                	je     c0107f44 <check_pgdir+0x42>
c0107f36:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c0107f3b:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107f40:	85 c0                	test   %eax,%eax
c0107f42:	74 19                	je     c0107f5d <check_pgdir+0x5b>
c0107f44:	68 88 d3 10 c0       	push   $0xc010d388
c0107f49:	68 99 d2 10 c0       	push   $0xc010d299
c0107f4e:	68 8a 02 00 00       	push   $0x28a
c0107f53:	68 74 d2 10 c0       	push   $0xc010d274
c0107f58:	e8 a0 84 ff ff       	call   c01003fd <__panic>
    assert(get_page(boot_pgdir, 0x0, NULL) == NULL);
c0107f5d:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c0107f62:	83 ec 04             	sub    $0x4,%esp
c0107f65:	6a 00                	push   $0x0
c0107f67:	6a 00                	push   $0x0
c0107f69:	50                   	push   %eax
c0107f6a:	e8 19 f9 ff ff       	call   c0107888 <get_page>
c0107f6f:	83 c4 10             	add    $0x10,%esp
c0107f72:	85 c0                	test   %eax,%eax
c0107f74:	74 19                	je     c0107f8f <check_pgdir+0x8d>
c0107f76:	68 c0 d3 10 c0       	push   $0xc010d3c0
c0107f7b:	68 99 d2 10 c0       	push   $0xc010d299
c0107f80:	68 8b 02 00 00       	push   $0x28b
c0107f85:	68 74 d2 10 c0       	push   $0xc010d274
c0107f8a:	e8 6e 84 ff ff       	call   c01003fd <__panic>

    struct Page *p1, *p2;
    p1 = alloc_page();
c0107f8f:	83 ec 0c             	sub    $0xc,%esp
c0107f92:	6a 01                	push   $0x1
c0107f94:	e8 3f f1 ff ff       	call   c01070d8 <alloc_pages>
c0107f99:	83 c4 10             	add    $0x10,%esp
c0107f9c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(page_insert(boot_pgdir, p1, 0x0, 0) == 0);
c0107f9f:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c0107fa4:	6a 00                	push   $0x0
c0107fa6:	6a 00                	push   $0x0
c0107fa8:	ff 75 f4             	pushl  -0xc(%ebp)
c0107fab:	50                   	push   %eax
c0107fac:	e8 74 fd ff ff       	call   c0107d25 <page_insert>
c0107fb1:	83 c4 10             	add    $0x10,%esp
c0107fb4:	85 c0                	test   %eax,%eax
c0107fb6:	74 19                	je     c0107fd1 <check_pgdir+0xcf>
c0107fb8:	68 e8 d3 10 c0       	push   $0xc010d3e8
c0107fbd:	68 99 d2 10 c0       	push   $0xc010d299
c0107fc2:	68 8f 02 00 00       	push   $0x28f
c0107fc7:	68 74 d2 10 c0       	push   $0xc010d274
c0107fcc:	e8 2c 84 ff ff       	call   c01003fd <__panic>

    pte_t *ptep;
    assert((ptep = get_pte(boot_pgdir, 0x0, 0)) != NULL);
c0107fd1:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c0107fd6:	83 ec 04             	sub    $0x4,%esp
c0107fd9:	6a 00                	push   $0x0
c0107fdb:	6a 00                	push   $0x0
c0107fdd:	50                   	push   %eax
c0107fde:	e8 61 f7 ff ff       	call   c0107744 <get_pte>
c0107fe3:	83 c4 10             	add    $0x10,%esp
c0107fe6:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107fe9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0107fed:	75 19                	jne    c0108008 <check_pgdir+0x106>
c0107fef:	68 14 d4 10 c0       	push   $0xc010d414
c0107ff4:	68 99 d2 10 c0       	push   $0xc010d299
c0107ff9:	68 92 02 00 00       	push   $0x292
c0107ffe:	68 74 d2 10 c0       	push   $0xc010d274
c0108003:	e8 f5 83 ff ff       	call   c01003fd <__panic>
    assert(pte2page(*ptep) == p1);
c0108008:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010800b:	8b 00                	mov    (%eax),%eax
c010800d:	83 ec 0c             	sub    $0xc,%esp
c0108010:	50                   	push   %eax
c0108011:	e8 5e ee ff ff       	call   c0106e74 <pte2page>
c0108016:	83 c4 10             	add    $0x10,%esp
c0108019:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010801c:	74 19                	je     c0108037 <check_pgdir+0x135>
c010801e:	68 41 d4 10 c0       	push   $0xc010d441
c0108023:	68 99 d2 10 c0       	push   $0xc010d299
c0108028:	68 93 02 00 00       	push   $0x293
c010802d:	68 74 d2 10 c0       	push   $0xc010d274
c0108032:	e8 c6 83 ff ff       	call   c01003fd <__panic>
    assert(page_ref(p1) == 1);
c0108037:	83 ec 0c             	sub    $0xc,%esp
c010803a:	ff 75 f4             	pushl  -0xc(%ebp)
c010803d:	e8 88 ee ff ff       	call   c0106eca <page_ref>
c0108042:	83 c4 10             	add    $0x10,%esp
c0108045:	83 f8 01             	cmp    $0x1,%eax
c0108048:	74 19                	je     c0108063 <check_pgdir+0x161>
c010804a:	68 57 d4 10 c0       	push   $0xc010d457
c010804f:	68 99 d2 10 c0       	push   $0xc010d299
c0108054:	68 94 02 00 00       	push   $0x294
c0108059:	68 74 d2 10 c0       	push   $0xc010d274
c010805e:	e8 9a 83 ff ff       	call   c01003fd <__panic>

    ptep = &((pte_t *)KADDR(PDE_ADDR(boot_pgdir[0])))[1];
c0108063:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c0108068:	8b 00                	mov    (%eax),%eax
c010806a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010806f:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0108072:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108075:	c1 e8 0c             	shr    $0xc,%eax
c0108078:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010807b:	a1 80 0f 1b c0       	mov    0xc01b0f80,%eax
c0108080:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c0108083:	72 17                	jb     c010809c <check_pgdir+0x19a>
c0108085:	ff 75 ec             	pushl  -0x14(%ebp)
c0108088:	68 ac d1 10 c0       	push   $0xc010d1ac
c010808d:	68 96 02 00 00       	push   $0x296
c0108092:	68 74 d2 10 c0       	push   $0xc010d274
c0108097:	e8 61 83 ff ff       	call   c01003fd <__panic>
c010809c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010809f:	2d 00 00 00 40       	sub    $0x40000000,%eax
c01080a4:	83 c0 04             	add    $0x4,%eax
c01080a7:	89 45 f0             	mov    %eax,-0x10(%ebp)
    assert(get_pte(boot_pgdir, PGSIZE, 0) == ptep);
c01080aa:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c01080af:	83 ec 04             	sub    $0x4,%esp
c01080b2:	6a 00                	push   $0x0
c01080b4:	68 00 10 00 00       	push   $0x1000
c01080b9:	50                   	push   %eax
c01080ba:	e8 85 f6 ff ff       	call   c0107744 <get_pte>
c01080bf:	83 c4 10             	add    $0x10,%esp
c01080c2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01080c5:	74 19                	je     c01080e0 <check_pgdir+0x1de>
c01080c7:	68 6c d4 10 c0       	push   $0xc010d46c
c01080cc:	68 99 d2 10 c0       	push   $0xc010d299
c01080d1:	68 97 02 00 00       	push   $0x297
c01080d6:	68 74 d2 10 c0       	push   $0xc010d274
c01080db:	e8 1d 83 ff ff       	call   c01003fd <__panic>

    p2 = alloc_page();
c01080e0:	83 ec 0c             	sub    $0xc,%esp
c01080e3:	6a 01                	push   $0x1
c01080e5:	e8 ee ef ff ff       	call   c01070d8 <alloc_pages>
c01080ea:	83 c4 10             	add    $0x10,%esp
c01080ed:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(page_insert(boot_pgdir, p2, PGSIZE, PTE_U | PTE_W) == 0);
c01080f0:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c01080f5:	6a 06                	push   $0x6
c01080f7:	68 00 10 00 00       	push   $0x1000
c01080fc:	ff 75 e4             	pushl  -0x1c(%ebp)
c01080ff:	50                   	push   %eax
c0108100:	e8 20 fc ff ff       	call   c0107d25 <page_insert>
c0108105:	83 c4 10             	add    $0x10,%esp
c0108108:	85 c0                	test   %eax,%eax
c010810a:	74 19                	je     c0108125 <check_pgdir+0x223>
c010810c:	68 94 d4 10 c0       	push   $0xc010d494
c0108111:	68 99 d2 10 c0       	push   $0xc010d299
c0108116:	68 9a 02 00 00       	push   $0x29a
c010811b:	68 74 d2 10 c0       	push   $0xc010d274
c0108120:	e8 d8 82 ff ff       	call   c01003fd <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c0108125:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c010812a:	83 ec 04             	sub    $0x4,%esp
c010812d:	6a 00                	push   $0x0
c010812f:	68 00 10 00 00       	push   $0x1000
c0108134:	50                   	push   %eax
c0108135:	e8 0a f6 ff ff       	call   c0107744 <get_pte>
c010813a:	83 c4 10             	add    $0x10,%esp
c010813d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108140:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0108144:	75 19                	jne    c010815f <check_pgdir+0x25d>
c0108146:	68 cc d4 10 c0       	push   $0xc010d4cc
c010814b:	68 99 d2 10 c0       	push   $0xc010d299
c0108150:	68 9b 02 00 00       	push   $0x29b
c0108155:	68 74 d2 10 c0       	push   $0xc010d274
c010815a:	e8 9e 82 ff ff       	call   c01003fd <__panic>
    assert(*ptep & PTE_U);
c010815f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108162:	8b 00                	mov    (%eax),%eax
c0108164:	83 e0 04             	and    $0x4,%eax
c0108167:	85 c0                	test   %eax,%eax
c0108169:	75 19                	jne    c0108184 <check_pgdir+0x282>
c010816b:	68 fc d4 10 c0       	push   $0xc010d4fc
c0108170:	68 99 d2 10 c0       	push   $0xc010d299
c0108175:	68 9c 02 00 00       	push   $0x29c
c010817a:	68 74 d2 10 c0       	push   $0xc010d274
c010817f:	e8 79 82 ff ff       	call   c01003fd <__panic>
    assert(*ptep & PTE_W);
c0108184:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108187:	8b 00                	mov    (%eax),%eax
c0108189:	83 e0 02             	and    $0x2,%eax
c010818c:	85 c0                	test   %eax,%eax
c010818e:	75 19                	jne    c01081a9 <check_pgdir+0x2a7>
c0108190:	68 0a d5 10 c0       	push   $0xc010d50a
c0108195:	68 99 d2 10 c0       	push   $0xc010d299
c010819a:	68 9d 02 00 00       	push   $0x29d
c010819f:	68 74 d2 10 c0       	push   $0xc010d274
c01081a4:	e8 54 82 ff ff       	call   c01003fd <__panic>
    assert(boot_pgdir[0] & PTE_U);
c01081a9:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c01081ae:	8b 00                	mov    (%eax),%eax
c01081b0:	83 e0 04             	and    $0x4,%eax
c01081b3:	85 c0                	test   %eax,%eax
c01081b5:	75 19                	jne    c01081d0 <check_pgdir+0x2ce>
c01081b7:	68 18 d5 10 c0       	push   $0xc010d518
c01081bc:	68 99 d2 10 c0       	push   $0xc010d299
c01081c1:	68 9e 02 00 00       	push   $0x29e
c01081c6:	68 74 d2 10 c0       	push   $0xc010d274
c01081cb:	e8 2d 82 ff ff       	call   c01003fd <__panic>
    assert(page_ref(p2) == 1);
c01081d0:	83 ec 0c             	sub    $0xc,%esp
c01081d3:	ff 75 e4             	pushl  -0x1c(%ebp)
c01081d6:	e8 ef ec ff ff       	call   c0106eca <page_ref>
c01081db:	83 c4 10             	add    $0x10,%esp
c01081de:	83 f8 01             	cmp    $0x1,%eax
c01081e1:	74 19                	je     c01081fc <check_pgdir+0x2fa>
c01081e3:	68 2e d5 10 c0       	push   $0xc010d52e
c01081e8:	68 99 d2 10 c0       	push   $0xc010d299
c01081ed:	68 9f 02 00 00       	push   $0x29f
c01081f2:	68 74 d2 10 c0       	push   $0xc010d274
c01081f7:	e8 01 82 ff ff       	call   c01003fd <__panic>

    assert(page_insert(boot_pgdir, p1, PGSIZE, 0) == 0);
c01081fc:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c0108201:	6a 00                	push   $0x0
c0108203:	68 00 10 00 00       	push   $0x1000
c0108208:	ff 75 f4             	pushl  -0xc(%ebp)
c010820b:	50                   	push   %eax
c010820c:	e8 14 fb ff ff       	call   c0107d25 <page_insert>
c0108211:	83 c4 10             	add    $0x10,%esp
c0108214:	85 c0                	test   %eax,%eax
c0108216:	74 19                	je     c0108231 <check_pgdir+0x32f>
c0108218:	68 40 d5 10 c0       	push   $0xc010d540
c010821d:	68 99 d2 10 c0       	push   $0xc010d299
c0108222:	68 a1 02 00 00       	push   $0x2a1
c0108227:	68 74 d2 10 c0       	push   $0xc010d274
c010822c:	e8 cc 81 ff ff       	call   c01003fd <__panic>
    assert(page_ref(p1) == 2);
c0108231:	83 ec 0c             	sub    $0xc,%esp
c0108234:	ff 75 f4             	pushl  -0xc(%ebp)
c0108237:	e8 8e ec ff ff       	call   c0106eca <page_ref>
c010823c:	83 c4 10             	add    $0x10,%esp
c010823f:	83 f8 02             	cmp    $0x2,%eax
c0108242:	74 19                	je     c010825d <check_pgdir+0x35b>
c0108244:	68 6c d5 10 c0       	push   $0xc010d56c
c0108249:	68 99 d2 10 c0       	push   $0xc010d299
c010824e:	68 a2 02 00 00       	push   $0x2a2
c0108253:	68 74 d2 10 c0       	push   $0xc010d274
c0108258:	e8 a0 81 ff ff       	call   c01003fd <__panic>
    assert(page_ref(p2) == 0);
c010825d:	83 ec 0c             	sub    $0xc,%esp
c0108260:	ff 75 e4             	pushl  -0x1c(%ebp)
c0108263:	e8 62 ec ff ff       	call   c0106eca <page_ref>
c0108268:	83 c4 10             	add    $0x10,%esp
c010826b:	85 c0                	test   %eax,%eax
c010826d:	74 19                	je     c0108288 <check_pgdir+0x386>
c010826f:	68 7e d5 10 c0       	push   $0xc010d57e
c0108274:	68 99 d2 10 c0       	push   $0xc010d299
c0108279:	68 a3 02 00 00       	push   $0x2a3
c010827e:	68 74 d2 10 c0       	push   $0xc010d274
c0108283:	e8 75 81 ff ff       	call   c01003fd <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c0108288:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c010828d:	83 ec 04             	sub    $0x4,%esp
c0108290:	6a 00                	push   $0x0
c0108292:	68 00 10 00 00       	push   $0x1000
c0108297:	50                   	push   %eax
c0108298:	e8 a7 f4 ff ff       	call   c0107744 <get_pte>
c010829d:	83 c4 10             	add    $0x10,%esp
c01082a0:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01082a3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01082a7:	75 19                	jne    c01082c2 <check_pgdir+0x3c0>
c01082a9:	68 cc d4 10 c0       	push   $0xc010d4cc
c01082ae:	68 99 d2 10 c0       	push   $0xc010d299
c01082b3:	68 a4 02 00 00       	push   $0x2a4
c01082b8:	68 74 d2 10 c0       	push   $0xc010d274
c01082bd:	e8 3b 81 ff ff       	call   c01003fd <__panic>
    assert(pte2page(*ptep) == p1);
c01082c2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01082c5:	8b 00                	mov    (%eax),%eax
c01082c7:	83 ec 0c             	sub    $0xc,%esp
c01082ca:	50                   	push   %eax
c01082cb:	e8 a4 eb ff ff       	call   c0106e74 <pte2page>
c01082d0:	83 c4 10             	add    $0x10,%esp
c01082d3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01082d6:	74 19                	je     c01082f1 <check_pgdir+0x3ef>
c01082d8:	68 41 d4 10 c0       	push   $0xc010d441
c01082dd:	68 99 d2 10 c0       	push   $0xc010d299
c01082e2:	68 a5 02 00 00       	push   $0x2a5
c01082e7:	68 74 d2 10 c0       	push   $0xc010d274
c01082ec:	e8 0c 81 ff ff       	call   c01003fd <__panic>
    assert((*ptep & PTE_U) == 0);
c01082f1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01082f4:	8b 00                	mov    (%eax),%eax
c01082f6:	83 e0 04             	and    $0x4,%eax
c01082f9:	85 c0                	test   %eax,%eax
c01082fb:	74 19                	je     c0108316 <check_pgdir+0x414>
c01082fd:	68 90 d5 10 c0       	push   $0xc010d590
c0108302:	68 99 d2 10 c0       	push   $0xc010d299
c0108307:	68 a6 02 00 00       	push   $0x2a6
c010830c:	68 74 d2 10 c0       	push   $0xc010d274
c0108311:	e8 e7 80 ff ff       	call   c01003fd <__panic>

    page_remove(boot_pgdir, 0x0);
c0108316:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c010831b:	83 ec 08             	sub    $0x8,%esp
c010831e:	6a 00                	push   $0x0
c0108320:	50                   	push   %eax
c0108321:	e8 c6 f9 ff ff       	call   c0107cec <page_remove>
c0108326:	83 c4 10             	add    $0x10,%esp
    assert(page_ref(p1) == 1);
c0108329:	83 ec 0c             	sub    $0xc,%esp
c010832c:	ff 75 f4             	pushl  -0xc(%ebp)
c010832f:	e8 96 eb ff ff       	call   c0106eca <page_ref>
c0108334:	83 c4 10             	add    $0x10,%esp
c0108337:	83 f8 01             	cmp    $0x1,%eax
c010833a:	74 19                	je     c0108355 <check_pgdir+0x453>
c010833c:	68 57 d4 10 c0       	push   $0xc010d457
c0108341:	68 99 d2 10 c0       	push   $0xc010d299
c0108346:	68 a9 02 00 00       	push   $0x2a9
c010834b:	68 74 d2 10 c0       	push   $0xc010d274
c0108350:	e8 a8 80 ff ff       	call   c01003fd <__panic>
    assert(page_ref(p2) == 0);
c0108355:	83 ec 0c             	sub    $0xc,%esp
c0108358:	ff 75 e4             	pushl  -0x1c(%ebp)
c010835b:	e8 6a eb ff ff       	call   c0106eca <page_ref>
c0108360:	83 c4 10             	add    $0x10,%esp
c0108363:	85 c0                	test   %eax,%eax
c0108365:	74 19                	je     c0108380 <check_pgdir+0x47e>
c0108367:	68 7e d5 10 c0       	push   $0xc010d57e
c010836c:	68 99 d2 10 c0       	push   $0xc010d299
c0108371:	68 aa 02 00 00       	push   $0x2aa
c0108376:	68 74 d2 10 c0       	push   $0xc010d274
c010837b:	e8 7d 80 ff ff       	call   c01003fd <__panic>

    page_remove(boot_pgdir, PGSIZE);
c0108380:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c0108385:	83 ec 08             	sub    $0x8,%esp
c0108388:	68 00 10 00 00       	push   $0x1000
c010838d:	50                   	push   %eax
c010838e:	e8 59 f9 ff ff       	call   c0107cec <page_remove>
c0108393:	83 c4 10             	add    $0x10,%esp
    assert(page_ref(p1) == 0);
c0108396:	83 ec 0c             	sub    $0xc,%esp
c0108399:	ff 75 f4             	pushl  -0xc(%ebp)
c010839c:	e8 29 eb ff ff       	call   c0106eca <page_ref>
c01083a1:	83 c4 10             	add    $0x10,%esp
c01083a4:	85 c0                	test   %eax,%eax
c01083a6:	74 19                	je     c01083c1 <check_pgdir+0x4bf>
c01083a8:	68 a5 d5 10 c0       	push   $0xc010d5a5
c01083ad:	68 99 d2 10 c0       	push   $0xc010d299
c01083b2:	68 ad 02 00 00       	push   $0x2ad
c01083b7:	68 74 d2 10 c0       	push   $0xc010d274
c01083bc:	e8 3c 80 ff ff       	call   c01003fd <__panic>
    assert(page_ref(p2) == 0);
c01083c1:	83 ec 0c             	sub    $0xc,%esp
c01083c4:	ff 75 e4             	pushl  -0x1c(%ebp)
c01083c7:	e8 fe ea ff ff       	call   c0106eca <page_ref>
c01083cc:	83 c4 10             	add    $0x10,%esp
c01083cf:	85 c0                	test   %eax,%eax
c01083d1:	74 19                	je     c01083ec <check_pgdir+0x4ea>
c01083d3:	68 7e d5 10 c0       	push   $0xc010d57e
c01083d8:	68 99 d2 10 c0       	push   $0xc010d299
c01083dd:	68 ae 02 00 00       	push   $0x2ae
c01083e2:	68 74 d2 10 c0       	push   $0xc010d274
c01083e7:	e8 11 80 ff ff       	call   c01003fd <__panic>

    assert(page_ref(pde2page(boot_pgdir[0])) == 1);
c01083ec:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c01083f1:	8b 00                	mov    (%eax),%eax
c01083f3:	83 ec 0c             	sub    $0xc,%esp
c01083f6:	50                   	push   %eax
c01083f7:	e8 b2 ea ff ff       	call   c0106eae <pde2page>
c01083fc:	83 c4 10             	add    $0x10,%esp
c01083ff:	83 ec 0c             	sub    $0xc,%esp
c0108402:	50                   	push   %eax
c0108403:	e8 c2 ea ff ff       	call   c0106eca <page_ref>
c0108408:	83 c4 10             	add    $0x10,%esp
c010840b:	83 f8 01             	cmp    $0x1,%eax
c010840e:	74 19                	je     c0108429 <check_pgdir+0x527>
c0108410:	68 b8 d5 10 c0       	push   $0xc010d5b8
c0108415:	68 99 d2 10 c0       	push   $0xc010d299
c010841a:	68 b0 02 00 00       	push   $0x2b0
c010841f:	68 74 d2 10 c0       	push   $0xc010d274
c0108424:	e8 d4 7f ff ff       	call   c01003fd <__panic>
    free_page(pde2page(boot_pgdir[0]));
c0108429:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c010842e:	8b 00                	mov    (%eax),%eax
c0108430:	83 ec 0c             	sub    $0xc,%esp
c0108433:	50                   	push   %eax
c0108434:	e8 75 ea ff ff       	call   c0106eae <pde2page>
c0108439:	83 c4 10             	add    $0x10,%esp
c010843c:	83 ec 08             	sub    $0x8,%esp
c010843f:	6a 01                	push   $0x1
c0108441:	50                   	push   %eax
c0108442:	e8 fd ec ff ff       	call   c0107144 <free_pages>
c0108447:	83 c4 10             	add    $0x10,%esp
    boot_pgdir[0] = 0;
c010844a:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c010844f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    cprintf("check_pgdir() succeeded!\n");
c0108455:	83 ec 0c             	sub    $0xc,%esp
c0108458:	68 df d5 10 c0       	push   $0xc010d5df
c010845d:	e8 35 7e ff ff       	call   c0100297 <cprintf>
c0108462:	83 c4 10             	add    $0x10,%esp
}
c0108465:	90                   	nop
c0108466:	c9                   	leave  
c0108467:	c3                   	ret    

c0108468 <check_boot_pgdir>:

static void
check_boot_pgdir(void) {
c0108468:	55                   	push   %ebp
c0108469:	89 e5                	mov    %esp,%ebp
c010846b:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
c010846e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0108475:	e9 a3 00 00 00       	jmp    c010851d <check_boot_pgdir+0xb5>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
c010847a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010847d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108480:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108483:	c1 e8 0c             	shr    $0xc,%eax
c0108486:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0108489:	a1 80 0f 1b c0       	mov    0xc01b0f80,%eax
c010848e:	39 45 ec             	cmp    %eax,-0x14(%ebp)
c0108491:	72 17                	jb     c01084aa <check_boot_pgdir+0x42>
c0108493:	ff 75 f0             	pushl  -0x10(%ebp)
c0108496:	68 ac d1 10 c0       	push   $0xc010d1ac
c010849b:	68 bc 02 00 00       	push   $0x2bc
c01084a0:	68 74 d2 10 c0       	push   $0xc010d274
c01084a5:	e8 53 7f ff ff       	call   c01003fd <__panic>
c01084aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01084ad:	2d 00 00 00 40       	sub    $0x40000000,%eax
c01084b2:	89 c2                	mov    %eax,%edx
c01084b4:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c01084b9:	83 ec 04             	sub    $0x4,%esp
c01084bc:	6a 00                	push   $0x0
c01084be:	52                   	push   %edx
c01084bf:	50                   	push   %eax
c01084c0:	e8 7f f2 ff ff       	call   c0107744 <get_pte>
c01084c5:	83 c4 10             	add    $0x10,%esp
c01084c8:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01084cb:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01084cf:	75 19                	jne    c01084ea <check_boot_pgdir+0x82>
c01084d1:	68 fc d5 10 c0       	push   $0xc010d5fc
c01084d6:	68 99 d2 10 c0       	push   $0xc010d299
c01084db:	68 bc 02 00 00       	push   $0x2bc
c01084e0:	68 74 d2 10 c0       	push   $0xc010d274
c01084e5:	e8 13 7f ff ff       	call   c01003fd <__panic>
        assert(PTE_ADDR(*ptep) == i);
c01084ea:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01084ed:	8b 00                	mov    (%eax),%eax
c01084ef:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01084f4:	89 c2                	mov    %eax,%edx
c01084f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01084f9:	39 c2                	cmp    %eax,%edx
c01084fb:	74 19                	je     c0108516 <check_boot_pgdir+0xae>
c01084fd:	68 39 d6 10 c0       	push   $0xc010d639
c0108502:	68 99 d2 10 c0       	push   $0xc010d299
c0108507:	68 bd 02 00 00       	push   $0x2bd
c010850c:	68 74 d2 10 c0       	push   $0xc010d274
c0108511:	e8 e7 7e ff ff       	call   c01003fd <__panic>

static void
check_boot_pgdir(void) {
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
c0108516:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
c010851d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108520:	a1 80 0f 1b c0       	mov    0xc01b0f80,%eax
c0108525:	39 c2                	cmp    %eax,%edx
c0108527:	0f 82 4d ff ff ff    	jb     c010847a <check_boot_pgdir+0x12>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
        assert(PTE_ADDR(*ptep) == i);
    }

    assert(PDE_ADDR(boot_pgdir[PDX(VPT)]) == PADDR(boot_pgdir));
c010852d:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c0108532:	05 ac 0f 00 00       	add    $0xfac,%eax
c0108537:	8b 00                	mov    (%eax),%eax
c0108539:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010853e:	89 c2                	mov    %eax,%edx
c0108540:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c0108545:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0108548:	81 7d e4 ff ff ff bf 	cmpl   $0xbfffffff,-0x1c(%ebp)
c010854f:	77 17                	ja     c0108568 <check_boot_pgdir+0x100>
c0108551:	ff 75 e4             	pushl  -0x1c(%ebp)
c0108554:	68 50 d2 10 c0       	push   $0xc010d250
c0108559:	68 c0 02 00 00       	push   $0x2c0
c010855e:	68 74 d2 10 c0       	push   $0xc010d274
c0108563:	e8 95 7e ff ff       	call   c01003fd <__panic>
c0108568:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010856b:	05 00 00 00 40       	add    $0x40000000,%eax
c0108570:	39 c2                	cmp    %eax,%edx
c0108572:	74 19                	je     c010858d <check_boot_pgdir+0x125>
c0108574:	68 50 d6 10 c0       	push   $0xc010d650
c0108579:	68 99 d2 10 c0       	push   $0xc010d299
c010857e:	68 c0 02 00 00       	push   $0x2c0
c0108583:	68 74 d2 10 c0       	push   $0xc010d274
c0108588:	e8 70 7e ff ff       	call   c01003fd <__panic>

    assert(boot_pgdir[0] == 0);
c010858d:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c0108592:	8b 00                	mov    (%eax),%eax
c0108594:	85 c0                	test   %eax,%eax
c0108596:	74 19                	je     c01085b1 <check_boot_pgdir+0x149>
c0108598:	68 84 d6 10 c0       	push   $0xc010d684
c010859d:	68 99 d2 10 c0       	push   $0xc010d299
c01085a2:	68 c2 02 00 00       	push   $0x2c2
c01085a7:	68 74 d2 10 c0       	push   $0xc010d274
c01085ac:	e8 4c 7e ff ff       	call   c01003fd <__panic>

    struct Page *p;
    p = alloc_page();
c01085b1:	83 ec 0c             	sub    $0xc,%esp
c01085b4:	6a 01                	push   $0x1
c01085b6:	e8 1d eb ff ff       	call   c01070d8 <alloc_pages>
c01085bb:	83 c4 10             	add    $0x10,%esp
c01085be:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(page_insert(boot_pgdir, p, 0x100, PTE_W) == 0);
c01085c1:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c01085c6:	6a 02                	push   $0x2
c01085c8:	68 00 01 00 00       	push   $0x100
c01085cd:	ff 75 e0             	pushl  -0x20(%ebp)
c01085d0:	50                   	push   %eax
c01085d1:	e8 4f f7 ff ff       	call   c0107d25 <page_insert>
c01085d6:	83 c4 10             	add    $0x10,%esp
c01085d9:	85 c0                	test   %eax,%eax
c01085db:	74 19                	je     c01085f6 <check_boot_pgdir+0x18e>
c01085dd:	68 98 d6 10 c0       	push   $0xc010d698
c01085e2:	68 99 d2 10 c0       	push   $0xc010d299
c01085e7:	68 c6 02 00 00       	push   $0x2c6
c01085ec:	68 74 d2 10 c0       	push   $0xc010d274
c01085f1:	e8 07 7e ff ff       	call   c01003fd <__panic>
    assert(page_ref(p) == 1);
c01085f6:	83 ec 0c             	sub    $0xc,%esp
c01085f9:	ff 75 e0             	pushl  -0x20(%ebp)
c01085fc:	e8 c9 e8 ff ff       	call   c0106eca <page_ref>
c0108601:	83 c4 10             	add    $0x10,%esp
c0108604:	83 f8 01             	cmp    $0x1,%eax
c0108607:	74 19                	je     c0108622 <check_boot_pgdir+0x1ba>
c0108609:	68 c6 d6 10 c0       	push   $0xc010d6c6
c010860e:	68 99 d2 10 c0       	push   $0xc010d299
c0108613:	68 c7 02 00 00       	push   $0x2c7
c0108618:	68 74 d2 10 c0       	push   $0xc010d274
c010861d:	e8 db 7d ff ff       	call   c01003fd <__panic>
    assert(page_insert(boot_pgdir, p, 0x100 + PGSIZE, PTE_W) == 0);
c0108622:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c0108627:	6a 02                	push   $0x2
c0108629:	68 00 11 00 00       	push   $0x1100
c010862e:	ff 75 e0             	pushl  -0x20(%ebp)
c0108631:	50                   	push   %eax
c0108632:	e8 ee f6 ff ff       	call   c0107d25 <page_insert>
c0108637:	83 c4 10             	add    $0x10,%esp
c010863a:	85 c0                	test   %eax,%eax
c010863c:	74 19                	je     c0108657 <check_boot_pgdir+0x1ef>
c010863e:	68 d8 d6 10 c0       	push   $0xc010d6d8
c0108643:	68 99 d2 10 c0       	push   $0xc010d299
c0108648:	68 c8 02 00 00       	push   $0x2c8
c010864d:	68 74 d2 10 c0       	push   $0xc010d274
c0108652:	e8 a6 7d ff ff       	call   c01003fd <__panic>
    assert(page_ref(p) == 2);
c0108657:	83 ec 0c             	sub    $0xc,%esp
c010865a:	ff 75 e0             	pushl  -0x20(%ebp)
c010865d:	e8 68 e8 ff ff       	call   c0106eca <page_ref>
c0108662:	83 c4 10             	add    $0x10,%esp
c0108665:	83 f8 02             	cmp    $0x2,%eax
c0108668:	74 19                	je     c0108683 <check_boot_pgdir+0x21b>
c010866a:	68 0f d7 10 c0       	push   $0xc010d70f
c010866f:	68 99 d2 10 c0       	push   $0xc010d299
c0108674:	68 c9 02 00 00       	push   $0x2c9
c0108679:	68 74 d2 10 c0       	push   $0xc010d274
c010867e:	e8 7a 7d ff ff       	call   c01003fd <__panic>

    const char *str = "ucore: Hello world!!";
c0108683:	c7 45 dc 20 d7 10 c0 	movl   $0xc010d720,-0x24(%ebp)
    strcpy((void *)0x100, str);
c010868a:	83 ec 08             	sub    $0x8,%esp
c010868d:	ff 75 dc             	pushl  -0x24(%ebp)
c0108690:	68 00 01 00 00       	push   $0x100
c0108695:	e8 a2 26 00 00       	call   c010ad3c <strcpy>
c010869a:	83 c4 10             	add    $0x10,%esp
    assert(strcmp((void *)0x100, (void *)(0x100 + PGSIZE)) == 0);
c010869d:	83 ec 08             	sub    $0x8,%esp
c01086a0:	68 00 11 00 00       	push   $0x1100
c01086a5:	68 00 01 00 00       	push   $0x100
c01086aa:	e8 07 27 00 00       	call   c010adb6 <strcmp>
c01086af:	83 c4 10             	add    $0x10,%esp
c01086b2:	85 c0                	test   %eax,%eax
c01086b4:	74 19                	je     c01086cf <check_boot_pgdir+0x267>
c01086b6:	68 38 d7 10 c0       	push   $0xc010d738
c01086bb:	68 99 d2 10 c0       	push   $0xc010d299
c01086c0:	68 cd 02 00 00       	push   $0x2cd
c01086c5:	68 74 d2 10 c0       	push   $0xc010d274
c01086ca:	e8 2e 7d ff ff       	call   c01003fd <__panic>

    *(char *)(page2kva(p) + 0x100) = '\0';
c01086cf:	83 ec 0c             	sub    $0xc,%esp
c01086d2:	ff 75 e0             	pushl  -0x20(%ebp)
c01086d5:	e8 55 e7 ff ff       	call   c0106e2f <page2kva>
c01086da:	83 c4 10             	add    $0x10,%esp
c01086dd:	05 00 01 00 00       	add    $0x100,%eax
c01086e2:	c6 00 00             	movb   $0x0,(%eax)
    assert(strlen((const char *)0x100) == 0);
c01086e5:	83 ec 0c             	sub    $0xc,%esp
c01086e8:	68 00 01 00 00       	push   $0x100
c01086ed:	e8 f2 25 00 00       	call   c010ace4 <strlen>
c01086f2:	83 c4 10             	add    $0x10,%esp
c01086f5:	85 c0                	test   %eax,%eax
c01086f7:	74 19                	je     c0108712 <check_boot_pgdir+0x2aa>
c01086f9:	68 70 d7 10 c0       	push   $0xc010d770
c01086fe:	68 99 d2 10 c0       	push   $0xc010d299
c0108703:	68 d0 02 00 00       	push   $0x2d0
c0108708:	68 74 d2 10 c0       	push   $0xc010d274
c010870d:	e8 eb 7c ff ff       	call   c01003fd <__panic>

    free_page(p);
c0108712:	83 ec 08             	sub    $0x8,%esp
c0108715:	6a 01                	push   $0x1
c0108717:	ff 75 e0             	pushl  -0x20(%ebp)
c010871a:	e8 25 ea ff ff       	call   c0107144 <free_pages>
c010871f:	83 c4 10             	add    $0x10,%esp
    free_page(pde2page(boot_pgdir[0]));
c0108722:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c0108727:	8b 00                	mov    (%eax),%eax
c0108729:	83 ec 0c             	sub    $0xc,%esp
c010872c:	50                   	push   %eax
c010872d:	e8 7c e7 ff ff       	call   c0106eae <pde2page>
c0108732:	83 c4 10             	add    $0x10,%esp
c0108735:	83 ec 08             	sub    $0x8,%esp
c0108738:	6a 01                	push   $0x1
c010873a:	50                   	push   %eax
c010873b:	e8 04 ea ff ff       	call   c0107144 <free_pages>
c0108740:	83 c4 10             	add    $0x10,%esp
    boot_pgdir[0] = 0;
c0108743:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c0108748:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    cprintf("check_boot_pgdir() succeeded!\n");
c010874e:	83 ec 0c             	sub    $0xc,%esp
c0108751:	68 94 d7 10 c0       	push   $0xc010d794
c0108756:	e8 3c 7b ff ff       	call   c0100297 <cprintf>
c010875b:	83 c4 10             	add    $0x10,%esp
}
c010875e:	90                   	nop
c010875f:	c9                   	leave  
c0108760:	c3                   	ret    

c0108761 <perm2str>:

//perm2str - use string 'u,r,w,-' to present the permission
static const char *
perm2str(int perm) {
c0108761:	55                   	push   %ebp
c0108762:	89 e5                	mov    %esp,%ebp
    static char str[4];
    str[0] = (perm & PTE_U) ? 'u' : '-';
c0108764:	8b 45 08             	mov    0x8(%ebp),%eax
c0108767:	83 e0 04             	and    $0x4,%eax
c010876a:	85 c0                	test   %eax,%eax
c010876c:	74 07                	je     c0108775 <perm2str+0x14>
c010876e:	b8 75 00 00 00       	mov    $0x75,%eax
c0108773:	eb 05                	jmp    c010877a <perm2str+0x19>
c0108775:	b8 2d 00 00 00       	mov    $0x2d,%eax
c010877a:	a2 08 10 1b c0       	mov    %al,0xc01b1008
    str[1] = 'r';
c010877f:	c6 05 09 10 1b c0 72 	movb   $0x72,0xc01b1009
    str[2] = (perm & PTE_W) ? 'w' : '-';
c0108786:	8b 45 08             	mov    0x8(%ebp),%eax
c0108789:	83 e0 02             	and    $0x2,%eax
c010878c:	85 c0                	test   %eax,%eax
c010878e:	74 07                	je     c0108797 <perm2str+0x36>
c0108790:	b8 77 00 00 00       	mov    $0x77,%eax
c0108795:	eb 05                	jmp    c010879c <perm2str+0x3b>
c0108797:	b8 2d 00 00 00       	mov    $0x2d,%eax
c010879c:	a2 0a 10 1b c0       	mov    %al,0xc01b100a
    str[3] = '\0';
c01087a1:	c6 05 0b 10 1b c0 00 	movb   $0x0,0xc01b100b
    return str;
c01087a8:	b8 08 10 1b c0       	mov    $0xc01b1008,%eax
}
c01087ad:	5d                   	pop    %ebp
c01087ae:	c3                   	ret    

c01087af <get_pgtable_items>:
//  table:       the beginning addr of table
//  left_store:  the pointer of the high side of table's next range
//  right_store: the pointer of the low side of table's next range
// return value: 0 - not a invalid item range, perm - a valid item range with perm permission 
static int
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
c01087af:	55                   	push   %ebp
c01087b0:	89 e5                	mov    %esp,%ebp
c01087b2:	83 ec 10             	sub    $0x10,%esp
    if (start >= right) {
c01087b5:	8b 45 10             	mov    0x10(%ebp),%eax
c01087b8:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01087bb:	72 0e                	jb     c01087cb <get_pgtable_items+0x1c>
        return 0;
c01087bd:	b8 00 00 00 00       	mov    $0x0,%eax
c01087c2:	e9 9a 00 00 00       	jmp    c0108861 <get_pgtable_items+0xb2>
    }
    while (start < right && !(table[start] & PTE_P)) {
        start ++;
c01087c7:	83 45 10 01          	addl   $0x1,0x10(%ebp)
static int
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
    if (start >= right) {
        return 0;
    }
    while (start < right && !(table[start] & PTE_P)) {
c01087cb:	8b 45 10             	mov    0x10(%ebp),%eax
c01087ce:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01087d1:	73 18                	jae    c01087eb <get_pgtable_items+0x3c>
c01087d3:	8b 45 10             	mov    0x10(%ebp),%eax
c01087d6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01087dd:	8b 45 14             	mov    0x14(%ebp),%eax
c01087e0:	01 d0                	add    %edx,%eax
c01087e2:	8b 00                	mov    (%eax),%eax
c01087e4:	83 e0 01             	and    $0x1,%eax
c01087e7:	85 c0                	test   %eax,%eax
c01087e9:	74 dc                	je     c01087c7 <get_pgtable_items+0x18>
        start ++;
    }
    if (start < right) {
c01087eb:	8b 45 10             	mov    0x10(%ebp),%eax
c01087ee:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01087f1:	73 69                	jae    c010885c <get_pgtable_items+0xad>
        if (left_store != NULL) {
c01087f3:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c01087f7:	74 08                	je     c0108801 <get_pgtable_items+0x52>
            *left_store = start;
c01087f9:	8b 45 18             	mov    0x18(%ebp),%eax
c01087fc:	8b 55 10             	mov    0x10(%ebp),%edx
c01087ff:	89 10                	mov    %edx,(%eax)
        }
        int perm = (table[start ++] & PTE_USER);
c0108801:	8b 45 10             	mov    0x10(%ebp),%eax
c0108804:	8d 50 01             	lea    0x1(%eax),%edx
c0108807:	89 55 10             	mov    %edx,0x10(%ebp)
c010880a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0108811:	8b 45 14             	mov    0x14(%ebp),%eax
c0108814:	01 d0                	add    %edx,%eax
c0108816:	8b 00                	mov    (%eax),%eax
c0108818:	83 e0 07             	and    $0x7,%eax
c010881b:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while (start < right && (table[start] & PTE_USER) == perm) {
c010881e:	eb 04                	jmp    c0108824 <get_pgtable_items+0x75>
            start ++;
c0108820:	83 45 10 01          	addl   $0x1,0x10(%ebp)
    if (start < right) {
        if (left_store != NULL) {
            *left_store = start;
        }
        int perm = (table[start ++] & PTE_USER);
        while (start < right && (table[start] & PTE_USER) == perm) {
c0108824:	8b 45 10             	mov    0x10(%ebp),%eax
c0108827:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010882a:	73 1d                	jae    c0108849 <get_pgtable_items+0x9a>
c010882c:	8b 45 10             	mov    0x10(%ebp),%eax
c010882f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0108836:	8b 45 14             	mov    0x14(%ebp),%eax
c0108839:	01 d0                	add    %edx,%eax
c010883b:	8b 00                	mov    (%eax),%eax
c010883d:	83 e0 07             	and    $0x7,%eax
c0108840:	89 c2                	mov    %eax,%edx
c0108842:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108845:	39 c2                	cmp    %eax,%edx
c0108847:	74 d7                	je     c0108820 <get_pgtable_items+0x71>
            start ++;
        }
        if (right_store != NULL) {
c0108849:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c010884d:	74 08                	je     c0108857 <get_pgtable_items+0xa8>
            *right_store = start;
c010884f:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0108852:	8b 55 10             	mov    0x10(%ebp),%edx
c0108855:	89 10                	mov    %edx,(%eax)
        }
        return perm;
c0108857:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010885a:	eb 05                	jmp    c0108861 <get_pgtable_items+0xb2>
    }
    return 0;
c010885c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0108861:	c9                   	leave  
c0108862:	c3                   	ret    

c0108863 <print_pgdir>:

//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
c0108863:	55                   	push   %ebp
c0108864:	89 e5                	mov    %esp,%ebp
c0108866:	57                   	push   %edi
c0108867:	56                   	push   %esi
c0108868:	53                   	push   %ebx
c0108869:	83 ec 2c             	sub    $0x2c,%esp
    cprintf("-------------------- BEGIN --------------------\n");
c010886c:	83 ec 0c             	sub    $0xc,%esp
c010886f:	68 b4 d7 10 c0       	push   $0xc010d7b4
c0108874:	e8 1e 7a ff ff       	call   c0100297 <cprintf>
c0108879:	83 c4 10             	add    $0x10,%esp
    size_t left, right = 0, perm;
c010887c:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c0108883:	e9 e5 00 00 00       	jmp    c010896d <print_pgdir+0x10a>
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c0108888:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010888b:	83 ec 0c             	sub    $0xc,%esp
c010888e:	50                   	push   %eax
c010888f:	e8 cd fe ff ff       	call   c0108761 <perm2str>
c0108894:	83 c4 10             	add    $0x10,%esp
c0108897:	89 c7                	mov    %eax,%edi
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
c0108899:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010889c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010889f:	29 c2                	sub    %eax,%edx
c01088a1:	89 d0                	mov    %edx,%eax
void
print_pgdir(void) {
    cprintf("-------------------- BEGIN --------------------\n");
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c01088a3:	c1 e0 16             	shl    $0x16,%eax
c01088a6:	89 c3                	mov    %eax,%ebx
c01088a8:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01088ab:	c1 e0 16             	shl    $0x16,%eax
c01088ae:	89 c1                	mov    %eax,%ecx
c01088b0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01088b3:	c1 e0 16             	shl    $0x16,%eax
c01088b6:	89 c2                	mov    %eax,%edx
c01088b8:	8b 75 dc             	mov    -0x24(%ebp),%esi
c01088bb:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01088be:	29 c6                	sub    %eax,%esi
c01088c0:	89 f0                	mov    %esi,%eax
c01088c2:	83 ec 08             	sub    $0x8,%esp
c01088c5:	57                   	push   %edi
c01088c6:	53                   	push   %ebx
c01088c7:	51                   	push   %ecx
c01088c8:	52                   	push   %edx
c01088c9:	50                   	push   %eax
c01088ca:	68 e5 d7 10 c0       	push   $0xc010d7e5
c01088cf:	e8 c3 79 ff ff       	call   c0100297 <cprintf>
c01088d4:	83 c4 20             	add    $0x20,%esp
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
c01088d7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01088da:	c1 e0 0a             	shl    $0xa,%eax
c01088dd:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c01088e0:	eb 4f                	jmp    c0108931 <print_pgdir+0xce>
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c01088e2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01088e5:	83 ec 0c             	sub    $0xc,%esp
c01088e8:	50                   	push   %eax
c01088e9:	e8 73 fe ff ff       	call   c0108761 <perm2str>
c01088ee:	83 c4 10             	add    $0x10,%esp
c01088f1:	89 c7                	mov    %eax,%edi
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
c01088f3:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01088f6:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01088f9:	29 c2                	sub    %eax,%edx
c01088fb:	89 d0                	mov    %edx,%eax
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c01088fd:	c1 e0 0c             	shl    $0xc,%eax
c0108900:	89 c3                	mov    %eax,%ebx
c0108902:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0108905:	c1 e0 0c             	shl    $0xc,%eax
c0108908:	89 c1                	mov    %eax,%ecx
c010890a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010890d:	c1 e0 0c             	shl    $0xc,%eax
c0108910:	89 c2                	mov    %eax,%edx
c0108912:	8b 75 d4             	mov    -0x2c(%ebp),%esi
c0108915:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0108918:	29 c6                	sub    %eax,%esi
c010891a:	89 f0                	mov    %esi,%eax
c010891c:	83 ec 08             	sub    $0x8,%esp
c010891f:	57                   	push   %edi
c0108920:	53                   	push   %ebx
c0108921:	51                   	push   %ecx
c0108922:	52                   	push   %edx
c0108923:	50                   	push   %eax
c0108924:	68 04 d8 10 c0       	push   $0xc010d804
c0108929:	e8 69 79 ff ff       	call   c0100297 <cprintf>
c010892e:	83 c4 20             	add    $0x20,%esp
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c0108931:	be 00 00 c0 fa       	mov    $0xfac00000,%esi
c0108936:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0108939:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010893c:	89 d3                	mov    %edx,%ebx
c010893e:	c1 e3 0a             	shl    $0xa,%ebx
c0108941:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0108944:	89 d1                	mov    %edx,%ecx
c0108946:	c1 e1 0a             	shl    $0xa,%ecx
c0108949:	83 ec 08             	sub    $0x8,%esp
c010894c:	8d 55 d4             	lea    -0x2c(%ebp),%edx
c010894f:	52                   	push   %edx
c0108950:	8d 55 d8             	lea    -0x28(%ebp),%edx
c0108953:	52                   	push   %edx
c0108954:	56                   	push   %esi
c0108955:	50                   	push   %eax
c0108956:	53                   	push   %ebx
c0108957:	51                   	push   %ecx
c0108958:	e8 52 fe ff ff       	call   c01087af <get_pgtable_items>
c010895d:	83 c4 20             	add    $0x20,%esp
c0108960:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0108963:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0108967:	0f 85 75 ff ff ff    	jne    c01088e2 <print_pgdir+0x7f>
//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
    cprintf("-------------------- BEGIN --------------------\n");
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c010896d:	b9 00 b0 fe fa       	mov    $0xfafeb000,%ecx
c0108972:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108975:	83 ec 08             	sub    $0x8,%esp
c0108978:	8d 55 dc             	lea    -0x24(%ebp),%edx
c010897b:	52                   	push   %edx
c010897c:	8d 55 e0             	lea    -0x20(%ebp),%edx
c010897f:	52                   	push   %edx
c0108980:	51                   	push   %ecx
c0108981:	50                   	push   %eax
c0108982:	68 00 04 00 00       	push   $0x400
c0108987:	6a 00                	push   $0x0
c0108989:	e8 21 fe ff ff       	call   c01087af <get_pgtable_items>
c010898e:	83 c4 20             	add    $0x20,%esp
c0108991:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0108994:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0108998:	0f 85 ea fe ff ff    	jne    c0108888 <print_pgdir+0x25>
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
        }
    }
    cprintf("--------------------- END ---------------------\n");
c010899e:	83 ec 0c             	sub    $0xc,%esp
c01089a1:	68 28 d8 10 c0       	push   $0xc010d828
c01089a6:	e8 ec 78 ff ff       	call   c0100297 <cprintf>
c01089ab:	83 c4 10             	add    $0x10,%esp
}
c01089ae:	90                   	nop
c01089af:	8d 65 f4             	lea    -0xc(%ebp),%esp
c01089b2:	5b                   	pop    %ebx
c01089b3:	5e                   	pop    %esi
c01089b4:	5f                   	pop    %edi
c01089b5:	5d                   	pop    %ebp
c01089b6:	c3                   	ret    

c01089b7 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c01089b7:	55                   	push   %ebp
c01089b8:	89 e5                	mov    %esp,%ebp
    return page - pages;
c01089ba:	8b 45 08             	mov    0x8(%ebp),%eax
c01089bd:	8b 15 b8 31 1b c0    	mov    0xc01b31b8,%edx
c01089c3:	29 d0                	sub    %edx,%eax
c01089c5:	c1 f8 05             	sar    $0x5,%eax
}
c01089c8:	5d                   	pop    %ebp
c01089c9:	c3                   	ret    

c01089ca <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c01089ca:	55                   	push   %ebp
c01089cb:	89 e5                	mov    %esp,%ebp
    return page2ppn(page) << PGSHIFT;
c01089cd:	ff 75 08             	pushl  0x8(%ebp)
c01089d0:	e8 e2 ff ff ff       	call   c01089b7 <page2ppn>
c01089d5:	83 c4 04             	add    $0x4,%esp
c01089d8:	c1 e0 0c             	shl    $0xc,%eax
}
c01089db:	c9                   	leave  
c01089dc:	c3                   	ret    

c01089dd <page2kva>:
    }
    return &pages[PPN(pa)];
}

static inline void *
page2kva(struct Page *page) {
c01089dd:	55                   	push   %ebp
c01089de:	89 e5                	mov    %esp,%ebp
c01089e0:	83 ec 18             	sub    $0x18,%esp
    return KADDR(page2pa(page));
c01089e3:	ff 75 08             	pushl  0x8(%ebp)
c01089e6:	e8 df ff ff ff       	call   c01089ca <page2pa>
c01089eb:	83 c4 04             	add    $0x4,%esp
c01089ee:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01089f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01089f4:	c1 e8 0c             	shr    $0xc,%eax
c01089f7:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01089fa:	a1 80 0f 1b c0       	mov    0xc01b0f80,%eax
c01089ff:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0108a02:	72 14                	jb     c0108a18 <page2kva+0x3b>
c0108a04:	ff 75 f4             	pushl  -0xc(%ebp)
c0108a07:	68 5c d8 10 c0       	push   $0xc010d85c
c0108a0c:	6a 65                	push   $0x65
c0108a0e:	68 7f d8 10 c0       	push   $0xc010d87f
c0108a13:	e8 e5 79 ff ff       	call   c01003fd <__panic>
c0108a18:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108a1b:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c0108a20:	c9                   	leave  
c0108a21:	c3                   	ret    

c0108a22 <swapfs_init>:
#include <ide.h>
#include <pmm.h>
#include <assert.h>

void
swapfs_init(void) {
c0108a22:	55                   	push   %ebp
c0108a23:	89 e5                	mov    %esp,%ebp
c0108a25:	83 ec 08             	sub    $0x8,%esp
    static_assert((PGSIZE % SECTSIZE) == 0);
    if (!ide_device_valid(SWAP_DEV_NO)) {
c0108a28:	83 ec 0c             	sub    $0xc,%esp
c0108a2b:	6a 01                	push   $0x1
c0108a2d:	e8 a7 87 ff ff       	call   c01011d9 <ide_device_valid>
c0108a32:	83 c4 10             	add    $0x10,%esp
c0108a35:	85 c0                	test   %eax,%eax
c0108a37:	75 14                	jne    c0108a4d <swapfs_init+0x2b>
        panic("swap fs isn't available.\n");
c0108a39:	83 ec 04             	sub    $0x4,%esp
c0108a3c:	68 8d d8 10 c0       	push   $0xc010d88d
c0108a41:	6a 0d                	push   $0xd
c0108a43:	68 a7 d8 10 c0       	push   $0xc010d8a7
c0108a48:	e8 b0 79 ff ff       	call   c01003fd <__panic>
    }
    max_swap_offset = ide_device_size(SWAP_DEV_NO) / (PGSIZE / SECTSIZE);
c0108a4d:	83 ec 0c             	sub    $0xc,%esp
c0108a50:	6a 01                	push   $0x1
c0108a52:	e8 c2 87 ff ff       	call   c0101219 <ide_device_size>
c0108a57:	83 c4 10             	add    $0x10,%esp
c0108a5a:	c1 e8 03             	shr    $0x3,%eax
c0108a5d:	a3 7c 31 1b c0       	mov    %eax,0xc01b317c
}
c0108a62:	90                   	nop
c0108a63:	c9                   	leave  
c0108a64:	c3                   	ret    

c0108a65 <swapfs_read>:

int
swapfs_read(swap_entry_t entry, struct Page *page) {
c0108a65:	55                   	push   %ebp
c0108a66:	89 e5                	mov    %esp,%ebp
c0108a68:	83 ec 18             	sub    $0x18,%esp
    return ide_read_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c0108a6b:	83 ec 0c             	sub    $0xc,%esp
c0108a6e:	ff 75 0c             	pushl  0xc(%ebp)
c0108a71:	e8 67 ff ff ff       	call   c01089dd <page2kva>
c0108a76:	83 c4 10             	add    $0x10,%esp
c0108a79:	89 c2                	mov    %eax,%edx
c0108a7b:	8b 45 08             	mov    0x8(%ebp),%eax
c0108a7e:	c1 e8 08             	shr    $0x8,%eax
c0108a81:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108a84:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108a88:	74 0a                	je     c0108a94 <swapfs_read+0x2f>
c0108a8a:	a1 7c 31 1b c0       	mov    0xc01b317c,%eax
c0108a8f:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0108a92:	72 14                	jb     c0108aa8 <swapfs_read+0x43>
c0108a94:	ff 75 08             	pushl  0x8(%ebp)
c0108a97:	68 b8 d8 10 c0       	push   $0xc010d8b8
c0108a9c:	6a 14                	push   $0x14
c0108a9e:	68 a7 d8 10 c0       	push   $0xc010d8a7
c0108aa3:	e8 55 79 ff ff       	call   c01003fd <__panic>
c0108aa8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108aab:	c1 e0 03             	shl    $0x3,%eax
c0108aae:	6a 08                	push   $0x8
c0108ab0:	52                   	push   %edx
c0108ab1:	50                   	push   %eax
c0108ab2:	6a 01                	push   $0x1
c0108ab4:	e8 a0 87 ff ff       	call   c0101259 <ide_read_secs>
c0108ab9:	83 c4 10             	add    $0x10,%esp
}
c0108abc:	c9                   	leave  
c0108abd:	c3                   	ret    

c0108abe <swapfs_write>:

int
swapfs_write(swap_entry_t entry, struct Page *page) {
c0108abe:	55                   	push   %ebp
c0108abf:	89 e5                	mov    %esp,%ebp
c0108ac1:	83 ec 18             	sub    $0x18,%esp
    return ide_write_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c0108ac4:	83 ec 0c             	sub    $0xc,%esp
c0108ac7:	ff 75 0c             	pushl  0xc(%ebp)
c0108aca:	e8 0e ff ff ff       	call   c01089dd <page2kva>
c0108acf:	83 c4 10             	add    $0x10,%esp
c0108ad2:	89 c2                	mov    %eax,%edx
c0108ad4:	8b 45 08             	mov    0x8(%ebp),%eax
c0108ad7:	c1 e8 08             	shr    $0x8,%eax
c0108ada:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108add:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108ae1:	74 0a                	je     c0108aed <swapfs_write+0x2f>
c0108ae3:	a1 7c 31 1b c0       	mov    0xc01b317c,%eax
c0108ae8:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0108aeb:	72 14                	jb     c0108b01 <swapfs_write+0x43>
c0108aed:	ff 75 08             	pushl  0x8(%ebp)
c0108af0:	68 b8 d8 10 c0       	push   $0xc010d8b8
c0108af5:	6a 19                	push   $0x19
c0108af7:	68 a7 d8 10 c0       	push   $0xc010d8a7
c0108afc:	e8 fc 78 ff ff       	call   c01003fd <__panic>
c0108b01:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108b04:	c1 e0 03             	shl    $0x3,%eax
c0108b07:	6a 08                	push   $0x8
c0108b09:	52                   	push   %edx
c0108b0a:	50                   	push   %eax
c0108b0b:	6a 01                	push   $0x1
c0108b0d:	e8 71 89 ff ff       	call   c0101483 <ide_write_secs>
c0108b12:	83 c4 10             	add    $0x10,%esp
}
c0108b15:	c9                   	leave  
c0108b16:	c3                   	ret    

c0108b17 <kernel_thread_entry>:
.text
.globl kernel_thread_entry
kernel_thread_entry:        # void kernel_thread(void)

    pushl %edx              # push arg
c0108b17:	52                   	push   %edx
    call *%ebx              # call fn
c0108b18:	ff d3                	call   *%ebx

    pushl %eax              # save the return value of fn(arg)
c0108b1a:	50                   	push   %eax
    call do_exit            # call do_exit to terminate current thread
c0108b1b:	e8 98 0c 00 00       	call   c01097b8 <do_exit>

c0108b20 <switch_to>:
.text
.globl switch_to
switch_to:                      # switch_to(from, to)

    # save from's registers
    movl 4(%esp), %eax          # eax points to from
c0108b20:	8b 44 24 04          	mov    0x4(%esp),%eax
    popl 0(%eax)                # save eip !popl
c0108b24:	8f 00                	popl   (%eax)
    movl %esp, 4(%eax)
c0108b26:	89 60 04             	mov    %esp,0x4(%eax)
    movl %ebx, 8(%eax)
c0108b29:	89 58 08             	mov    %ebx,0x8(%eax)
    movl %ecx, 12(%eax)
c0108b2c:	89 48 0c             	mov    %ecx,0xc(%eax)
    movl %edx, 16(%eax)
c0108b2f:	89 50 10             	mov    %edx,0x10(%eax)
    movl %esi, 20(%eax)
c0108b32:	89 70 14             	mov    %esi,0x14(%eax)
    movl %edi, 24(%eax)
c0108b35:	89 78 18             	mov    %edi,0x18(%eax)
    movl %ebp, 28(%eax)
c0108b38:	89 68 1c             	mov    %ebp,0x1c(%eax)

    # restore to's registers
    movl 4(%esp), %eax          # not 8(%esp): popped return address already
c0108b3b:	8b 44 24 04          	mov    0x4(%esp),%eax
                                # eax now points to to
    movl 28(%eax), %ebp
c0108b3f:	8b 68 1c             	mov    0x1c(%eax),%ebp
    movl 24(%eax), %edi
c0108b42:	8b 78 18             	mov    0x18(%eax),%edi
    movl 20(%eax), %esi
c0108b45:	8b 70 14             	mov    0x14(%eax),%esi
    movl 16(%eax), %edx
c0108b48:	8b 50 10             	mov    0x10(%eax),%edx
    movl 12(%eax), %ecx
c0108b4b:	8b 48 0c             	mov    0xc(%eax),%ecx
    movl 8(%eax), %ebx
c0108b4e:	8b 58 08             	mov    0x8(%eax),%ebx
    movl 4(%eax), %esp
c0108b51:	8b 60 04             	mov    0x4(%eax),%esp

    pushl 0(%eax)               # push eip
c0108b54:	ff 30                	pushl  (%eax)

    ret
c0108b56:	c3                   	ret    

c0108b57 <test_and_set_bit>:
 * test_and_set_bit - Atomically set a bit and return its old value
 * @nr:     the bit to set
 * @addr:   the address to count from
 * */
static inline bool
test_and_set_bit(int nr, volatile void *addr) {
c0108b57:	55                   	push   %ebp
c0108b58:	89 e5                	mov    %esp,%ebp
c0108b5a:	83 ec 10             	sub    $0x10,%esp
    int oldbit;
    asm volatile ("btsl %2, %1; sbbl %0, %0" : "=r" (oldbit), "=m" (*(volatile long *)addr) : "Ir" (nr) : "memory");
c0108b5d:	8b 55 0c             	mov    0xc(%ebp),%edx
c0108b60:	8b 45 08             	mov    0x8(%ebp),%eax
c0108b63:	0f ab 02             	bts    %eax,(%edx)
c0108b66:	19 c0                	sbb    %eax,%eax
c0108b68:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return oldbit != 0;
c0108b6b:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0108b6f:	0f 95 c0             	setne  %al
c0108b72:	0f b6 c0             	movzbl %al,%eax
}
c0108b75:	c9                   	leave  
c0108b76:	c3                   	ret    

c0108b77 <test_and_clear_bit>:
 * test_and_clear_bit - Atomically clear a bit and return its old value
 * @nr:     the bit to clear
 * @addr:   the address to count from
 * */
static inline bool
test_and_clear_bit(int nr, volatile void *addr) {
c0108b77:	55                   	push   %ebp
c0108b78:	89 e5                	mov    %esp,%ebp
c0108b7a:	83 ec 10             	sub    $0x10,%esp
    int oldbit;
    asm volatile ("btrl %2, %1; sbbl %0, %0" : "=r" (oldbit), "=m" (*(volatile long *)addr) : "Ir" (nr) : "memory");
c0108b7d:	8b 55 0c             	mov    0xc(%ebp),%edx
c0108b80:	8b 45 08             	mov    0x8(%ebp),%eax
c0108b83:	0f b3 02             	btr    %eax,(%edx)
c0108b86:	19 c0                	sbb    %eax,%eax
c0108b88:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return oldbit != 0;
c0108b8b:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0108b8f:	0f 95 c0             	setne  %al
c0108b92:	0f b6 c0             	movzbl %al,%eax
}
c0108b95:	c9                   	leave  
c0108b96:	c3                   	ret    

c0108b97 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0108b97:	55                   	push   %ebp
c0108b98:	89 e5                	mov    %esp,%ebp
c0108b9a:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0108b9d:	9c                   	pushf  
c0108b9e:	58                   	pop    %eax
c0108b9f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0108ba2:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0108ba5:	25 00 02 00 00       	and    $0x200,%eax
c0108baa:	85 c0                	test   %eax,%eax
c0108bac:	74 0c                	je     c0108bba <__intr_save+0x23>
        intr_disable();
c0108bae:	e8 09 96 ff ff       	call   c01021bc <intr_disable>
        return 1;
c0108bb3:	b8 01 00 00 00       	mov    $0x1,%eax
c0108bb8:	eb 05                	jmp    c0108bbf <__intr_save+0x28>
    }
    return 0;
c0108bba:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0108bbf:	c9                   	leave  
c0108bc0:	c3                   	ret    

c0108bc1 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0108bc1:	55                   	push   %ebp
c0108bc2:	89 e5                	mov    %esp,%ebp
c0108bc4:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0108bc7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0108bcb:	74 05                	je     c0108bd2 <__intr_restore+0x11>
        intr_enable();
c0108bcd:	e8 e3 95 ff ff       	call   c01021b5 <intr_enable>
    }
}
c0108bd2:	90                   	nop
c0108bd3:	c9                   	leave  
c0108bd4:	c3                   	ret    

c0108bd5 <try_lock>:
lock_init(lock_t *lock) {
    *lock = 0;
}

static inline bool
try_lock(lock_t *lock) {
c0108bd5:	55                   	push   %ebp
c0108bd6:	89 e5                	mov    %esp,%ebp
    return !test_and_set_bit(0, lock);
c0108bd8:	ff 75 08             	pushl  0x8(%ebp)
c0108bdb:	6a 00                	push   $0x0
c0108bdd:	e8 75 ff ff ff       	call   c0108b57 <test_and_set_bit>
c0108be2:	83 c4 08             	add    $0x8,%esp
c0108be5:	85 c0                	test   %eax,%eax
c0108be7:	0f 94 c0             	sete   %al
c0108bea:	0f b6 c0             	movzbl %al,%eax
}
c0108bed:	c9                   	leave  
c0108bee:	c3                   	ret    

c0108bef <lock>:

static inline void
lock(lock_t *lock) {
c0108bef:	55                   	push   %ebp
c0108bf0:	89 e5                	mov    %esp,%ebp
c0108bf2:	83 ec 08             	sub    $0x8,%esp
    while (!try_lock(lock)) {
c0108bf5:	eb 05                	jmp    c0108bfc <lock+0xd>
        schedule();
c0108bf7:	e8 36 1c 00 00       	call   c010a832 <schedule>
    return !test_and_set_bit(0, lock);
}

static inline void
lock(lock_t *lock) {
    while (!try_lock(lock)) {
c0108bfc:	83 ec 0c             	sub    $0xc,%esp
c0108bff:	ff 75 08             	pushl  0x8(%ebp)
c0108c02:	e8 ce ff ff ff       	call   c0108bd5 <try_lock>
c0108c07:	83 c4 10             	add    $0x10,%esp
c0108c0a:	85 c0                	test   %eax,%eax
c0108c0c:	74 e9                	je     c0108bf7 <lock+0x8>
        schedule();
    }
}
c0108c0e:	90                   	nop
c0108c0f:	c9                   	leave  
c0108c10:	c3                   	ret    

c0108c11 <unlock>:

static inline void
unlock(lock_t *lock) {
c0108c11:	55                   	push   %ebp
c0108c12:	89 e5                	mov    %esp,%ebp
c0108c14:	83 ec 08             	sub    $0x8,%esp
    if (!test_and_clear_bit(0, lock)) {
c0108c17:	ff 75 08             	pushl  0x8(%ebp)
c0108c1a:	6a 00                	push   $0x0
c0108c1c:	e8 56 ff ff ff       	call   c0108b77 <test_and_clear_bit>
c0108c21:	83 c4 08             	add    $0x8,%esp
c0108c24:	85 c0                	test   %eax,%eax
c0108c26:	75 14                	jne    c0108c3c <unlock+0x2b>
        panic("Unlock failed.\n");
c0108c28:	83 ec 04             	sub    $0x4,%esp
c0108c2b:	68 d8 d8 10 c0       	push   $0xc010d8d8
c0108c30:	6a 34                	push   $0x34
c0108c32:	68 e8 d8 10 c0       	push   $0xc010d8e8
c0108c37:	e8 c1 77 ff ff       	call   c01003fd <__panic>
    }
}
c0108c3c:	90                   	nop
c0108c3d:	c9                   	leave  
c0108c3e:	c3                   	ret    

c0108c3f <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0108c3f:	55                   	push   %ebp
c0108c40:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0108c42:	8b 45 08             	mov    0x8(%ebp),%eax
c0108c45:	8b 15 b8 31 1b c0    	mov    0xc01b31b8,%edx
c0108c4b:	29 d0                	sub    %edx,%eax
c0108c4d:	c1 f8 05             	sar    $0x5,%eax
}
c0108c50:	5d                   	pop    %ebp
c0108c51:	c3                   	ret    

c0108c52 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0108c52:	55                   	push   %ebp
c0108c53:	89 e5                	mov    %esp,%ebp
    return page2ppn(page) << PGSHIFT;
c0108c55:	ff 75 08             	pushl  0x8(%ebp)
c0108c58:	e8 e2 ff ff ff       	call   c0108c3f <page2ppn>
c0108c5d:	83 c4 04             	add    $0x4,%esp
c0108c60:	c1 e0 0c             	shl    $0xc,%eax
}
c0108c63:	c9                   	leave  
c0108c64:	c3                   	ret    

c0108c65 <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c0108c65:	55                   	push   %ebp
c0108c66:	89 e5                	mov    %esp,%ebp
c0108c68:	83 ec 08             	sub    $0x8,%esp
    if (PPN(pa) >= npage) {
c0108c6b:	8b 45 08             	mov    0x8(%ebp),%eax
c0108c6e:	c1 e8 0c             	shr    $0xc,%eax
c0108c71:	89 c2                	mov    %eax,%edx
c0108c73:	a1 80 0f 1b c0       	mov    0xc01b0f80,%eax
c0108c78:	39 c2                	cmp    %eax,%edx
c0108c7a:	72 14                	jb     c0108c90 <pa2page+0x2b>
        panic("pa2page called with invalid pa");
c0108c7c:	83 ec 04             	sub    $0x4,%esp
c0108c7f:	68 fc d8 10 c0       	push   $0xc010d8fc
c0108c84:	6a 5e                	push   $0x5e
c0108c86:	68 1b d9 10 c0       	push   $0xc010d91b
c0108c8b:	e8 6d 77 ff ff       	call   c01003fd <__panic>
    }
    return &pages[PPN(pa)];
c0108c90:	a1 b8 31 1b c0       	mov    0xc01b31b8,%eax
c0108c95:	8b 55 08             	mov    0x8(%ebp),%edx
c0108c98:	c1 ea 0c             	shr    $0xc,%edx
c0108c9b:	c1 e2 05             	shl    $0x5,%edx
c0108c9e:	01 d0                	add    %edx,%eax
}
c0108ca0:	c9                   	leave  
c0108ca1:	c3                   	ret    

c0108ca2 <page2kva>:

static inline void *
page2kva(struct Page *page) {
c0108ca2:	55                   	push   %ebp
c0108ca3:	89 e5                	mov    %esp,%ebp
c0108ca5:	83 ec 18             	sub    $0x18,%esp
    return KADDR(page2pa(page));
c0108ca8:	ff 75 08             	pushl  0x8(%ebp)
c0108cab:	e8 a2 ff ff ff       	call   c0108c52 <page2pa>
c0108cb0:	83 c4 04             	add    $0x4,%esp
c0108cb3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108cb6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108cb9:	c1 e8 0c             	shr    $0xc,%eax
c0108cbc:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108cbf:	a1 80 0f 1b c0       	mov    0xc01b0f80,%eax
c0108cc4:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0108cc7:	72 14                	jb     c0108cdd <page2kva+0x3b>
c0108cc9:	ff 75 f4             	pushl  -0xc(%ebp)
c0108ccc:	68 2c d9 10 c0       	push   $0xc010d92c
c0108cd1:	6a 65                	push   $0x65
c0108cd3:	68 1b d9 10 c0       	push   $0xc010d91b
c0108cd8:	e8 20 77 ff ff       	call   c01003fd <__panic>
c0108cdd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108ce0:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c0108ce5:	c9                   	leave  
c0108ce6:	c3                   	ret    

c0108ce7 <kva2page>:

static inline struct Page *
kva2page(void *kva) {
c0108ce7:	55                   	push   %ebp
c0108ce8:	89 e5                	mov    %esp,%ebp
c0108cea:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PADDR(kva));
c0108ced:	8b 45 08             	mov    0x8(%ebp),%eax
c0108cf0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108cf3:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c0108cfa:	77 14                	ja     c0108d10 <kva2page+0x29>
c0108cfc:	ff 75 f4             	pushl  -0xc(%ebp)
c0108cff:	68 50 d9 10 c0       	push   $0xc010d950
c0108d04:	6a 6a                	push   $0x6a
c0108d06:	68 1b d9 10 c0       	push   $0xc010d91b
c0108d0b:	e8 ed 76 ff ff       	call   c01003fd <__panic>
c0108d10:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108d13:	05 00 00 00 40       	add    $0x40000000,%eax
c0108d18:	83 ec 0c             	sub    $0xc,%esp
c0108d1b:	50                   	push   %eax
c0108d1c:	e8 44 ff ff ff       	call   c0108c65 <pa2page>
c0108d21:	83 c4 10             	add    $0x10,%esp
}
c0108d24:	c9                   	leave  
c0108d25:	c3                   	ret    

c0108d26 <mm_count_inc>:

static inline int
mm_count_inc(struct mm_struct *mm) {
c0108d26:	55                   	push   %ebp
c0108d27:	89 e5                	mov    %esp,%ebp
    mm->mm_count += 1;
c0108d29:	8b 45 08             	mov    0x8(%ebp),%eax
c0108d2c:	8b 40 18             	mov    0x18(%eax),%eax
c0108d2f:	8d 50 01             	lea    0x1(%eax),%edx
c0108d32:	8b 45 08             	mov    0x8(%ebp),%eax
c0108d35:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c0108d38:	8b 45 08             	mov    0x8(%ebp),%eax
c0108d3b:	8b 40 18             	mov    0x18(%eax),%eax
}
c0108d3e:	5d                   	pop    %ebp
c0108d3f:	c3                   	ret    

c0108d40 <mm_count_dec>:

static inline int
mm_count_dec(struct mm_struct *mm) {
c0108d40:	55                   	push   %ebp
c0108d41:	89 e5                	mov    %esp,%ebp
    mm->mm_count -= 1;
c0108d43:	8b 45 08             	mov    0x8(%ebp),%eax
c0108d46:	8b 40 18             	mov    0x18(%eax),%eax
c0108d49:	8d 50 ff             	lea    -0x1(%eax),%edx
c0108d4c:	8b 45 08             	mov    0x8(%ebp),%eax
c0108d4f:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c0108d52:	8b 45 08             	mov    0x8(%ebp),%eax
c0108d55:	8b 40 18             	mov    0x18(%eax),%eax
}
c0108d58:	5d                   	pop    %ebp
c0108d59:	c3                   	ret    

c0108d5a <lock_mm>:

static inline void
lock_mm(struct mm_struct *mm) {
c0108d5a:	55                   	push   %ebp
c0108d5b:	89 e5                	mov    %esp,%ebp
c0108d5d:	83 ec 08             	sub    $0x8,%esp
    if (mm != NULL) {
c0108d60:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0108d64:	74 12                	je     c0108d78 <lock_mm+0x1e>
        lock(&(mm->mm_lock));
c0108d66:	8b 45 08             	mov    0x8(%ebp),%eax
c0108d69:	83 c0 1c             	add    $0x1c,%eax
c0108d6c:	83 ec 0c             	sub    $0xc,%esp
c0108d6f:	50                   	push   %eax
c0108d70:	e8 7a fe ff ff       	call   c0108bef <lock>
c0108d75:	83 c4 10             	add    $0x10,%esp
    }
}
c0108d78:	90                   	nop
c0108d79:	c9                   	leave  
c0108d7a:	c3                   	ret    

c0108d7b <unlock_mm>:

static inline void
unlock_mm(struct mm_struct *mm) {
c0108d7b:	55                   	push   %ebp
c0108d7c:	89 e5                	mov    %esp,%ebp
c0108d7e:	83 ec 08             	sub    $0x8,%esp
    if (mm != NULL) {
c0108d81:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0108d85:	74 12                	je     c0108d99 <unlock_mm+0x1e>
        unlock(&(mm->mm_lock));
c0108d87:	8b 45 08             	mov    0x8(%ebp),%eax
c0108d8a:	83 c0 1c             	add    $0x1c,%eax
c0108d8d:	83 ec 0c             	sub    $0xc,%esp
c0108d90:	50                   	push   %eax
c0108d91:	e8 7b fe ff ff       	call   c0108c11 <unlock>
c0108d96:	83 c4 10             	add    $0x10,%esp
    }
}
c0108d99:	90                   	nop
c0108d9a:	c9                   	leave  
c0108d9b:	c3                   	ret    

c0108d9c <alloc_proc>:
void forkrets(struct trapframe *tf);
void switch_to(struct context *from, struct context *to);

// alloc_proc - alloc a proc_struct and init all fields of proc_struct
static struct proc_struct *
alloc_proc(void) {
c0108d9c:	55                   	push   %ebp
c0108d9d:	89 e5                	mov    %esp,%ebp
c0108d9f:	83 ec 18             	sub    $0x18,%esp
    struct proc_struct *proc = kmalloc(sizeof(struct proc_struct));
c0108da2:	83 ec 0c             	sub    $0xc,%esp
c0108da5:	68 a0 00 00 00       	push   $0xa0
c0108daa:	e8 ff c3 ff ff       	call   c01051ae <kmalloc>
c0108daf:	83 c4 10             	add    $0x10,%esp
c0108db2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (proc != NULL) {
c0108db5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108db9:	0f 84 32 01 00 00    	je     c0108ef1 <alloc_proc+0x155>
     *     int time_slice;                             // time slice for occupying the CPU
     *     skew_heap_entry_t lab6_run_pool;            // FOR LAB6 ONLY: the entry in the run pool
     *     uint32_t lab6_stride;                       // FOR LAB6 ONLY: the current stride of the process
     *     uint32_t lab6_priority;                     // FOR LAB6 ONLY: the priority of process, set by lab6_set_priority(uint32_t)
     */
        proc->state = PROC_UNINIT;
c0108dbf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108dc2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        proc->pid = -1;         // an invalid pid
c0108dc8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108dcb:	c7 40 04 ff ff ff ff 	movl   $0xffffffff,0x4(%eax)
        proc->runs = 0;
c0108dd2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108dd5:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        proc->kstack = 0;
c0108ddc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108ddf:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        proc->need_resched = 0;
c0108de6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108de9:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
        proc->parent = NULL;
c0108df0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108df3:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
        proc->mm = NULL;
c0108dfa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108dfd:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
        proc->tf = NULL;
c0108e04:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108e07:	c7 40 3c 00 00 00 00 	movl   $0x0,0x3c(%eax)
        proc->cr3 = boot_cr3;   // kernel threads share boot_cr3
c0108e0e:	8b 15 b4 31 1b c0    	mov    0xc01b31b4,%edx
c0108e14:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108e17:	89 50 40             	mov    %edx,0x40(%eax)
        proc->flags = 0;
c0108e1a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108e1d:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
        // NEW
        proc->wait_state = 0;
c0108e24:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108e27:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
        proc->cptr = NULL;
c0108e2e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108e31:	c7 40 70 00 00 00 00 	movl   $0x0,0x70(%eax)
        proc->yptr = NULL;
c0108e38:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108e3b:	c7 40 74 00 00 00 00 	movl   $0x0,0x74(%eax)
        proc->optr = NULL;
c0108e42:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108e45:	c7 40 78 00 00 00 00 	movl   $0x0,0x78(%eax)
        // NEW IN LAB 6
        proc->rq = NULL;
c0108e4c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108e4f:	c7 40 7c 00 00 00 00 	movl   $0x0,0x7c(%eax)
        list_init(&(proc->run_link));
c0108e56:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108e59:	83 e8 80             	sub    $0xffffff80,%eax
c0108e5c:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0108e5f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108e62:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0108e65:	89 50 04             	mov    %edx,0x4(%eax)
c0108e68:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108e6b:	8b 50 04             	mov    0x4(%eax),%edx
c0108e6e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108e71:	89 10                	mov    %edx,(%eax)
        proc->time_slice = 0;
c0108e73:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108e76:	c7 80 88 00 00 00 00 	movl   $0x0,0x88(%eax)
c0108e7d:	00 00 00 
        // for stride
        skew_heap_init(&(proc->lab6_run_pool));
c0108e80:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108e83:	05 8c 00 00 00       	add    $0x8c,%eax
c0108e88:	89 45 ec             	mov    %eax,-0x14(%ebp)
     compare_f comp) __attribute__((always_inline));

static inline void
skew_heap_init(skew_heap_entry_t *a)
{
     a->left = a->right = a->parent = NULL;
c0108e8b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108e8e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0108e94:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108e97:	8b 10                	mov    (%eax),%edx
c0108e99:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108e9c:	89 50 08             	mov    %edx,0x8(%eax)
c0108e9f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108ea2:	8b 50 08             	mov    0x8(%eax),%edx
c0108ea5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108ea8:	89 50 04             	mov    %edx,0x4(%eax)
        proc->lab6_stride = 0;
c0108eab:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108eae:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
c0108eb5:	00 00 00 
        proc->lab6_priority = 0;
c0108eb8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108ebb:	c7 80 9c 00 00 00 00 	movl   $0x0,0x9c(%eax)
c0108ec2:	00 00 00 

        memset(&(proc->context), 0, sizeof(struct context));
c0108ec5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108ec8:	83 c0 1c             	add    $0x1c,%eax
c0108ecb:	83 ec 04             	sub    $0x4,%esp
c0108ece:	6a 20                	push   $0x20
c0108ed0:	6a 00                	push   $0x0
c0108ed2:	50                   	push   %eax
c0108ed3:	e8 3d 21 00 00       	call   c010b015 <memset>
c0108ed8:	83 c4 10             	add    $0x10,%esp
        memset(proc->name, 0, sizeof(char) * (PROC_NAME_LEN + 1));
c0108edb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108ede:	83 c0 48             	add    $0x48,%eax
c0108ee1:	83 ec 04             	sub    $0x4,%esp
c0108ee4:	6a 10                	push   $0x10
c0108ee6:	6a 00                	push   $0x0
c0108ee8:	50                   	push   %eax
c0108ee9:	e8 27 21 00 00       	call   c010b015 <memset>
c0108eee:	83 c4 10             	add    $0x10,%esp
    }
    return proc;
c0108ef1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0108ef4:	c9                   	leave  
c0108ef5:	c3                   	ret    

c0108ef6 <set_proc_name>:

// set_proc_name - set the name of proc
char *
set_proc_name(struct proc_struct *proc, const char *name) {
c0108ef6:	55                   	push   %ebp
c0108ef7:	89 e5                	mov    %esp,%ebp
c0108ef9:	83 ec 08             	sub    $0x8,%esp
    memset(proc->name, 0, sizeof(proc->name));
c0108efc:	8b 45 08             	mov    0x8(%ebp),%eax
c0108eff:	83 c0 48             	add    $0x48,%eax
c0108f02:	83 ec 04             	sub    $0x4,%esp
c0108f05:	6a 10                	push   $0x10
c0108f07:	6a 00                	push   $0x0
c0108f09:	50                   	push   %eax
c0108f0a:	e8 06 21 00 00       	call   c010b015 <memset>
c0108f0f:	83 c4 10             	add    $0x10,%esp
    return memcpy(proc->name, name, PROC_NAME_LEN);
c0108f12:	8b 45 08             	mov    0x8(%ebp),%eax
c0108f15:	83 c0 48             	add    $0x48,%eax
c0108f18:	83 ec 04             	sub    $0x4,%esp
c0108f1b:	6a 0f                	push   $0xf
c0108f1d:	ff 75 0c             	pushl  0xc(%ebp)
c0108f20:	50                   	push   %eax
c0108f21:	e8 d2 21 00 00       	call   c010b0f8 <memcpy>
c0108f26:	83 c4 10             	add    $0x10,%esp
}
c0108f29:	c9                   	leave  
c0108f2a:	c3                   	ret    

c0108f2b <get_proc_name>:

// get_proc_name - get the name of proc
char *
get_proc_name(struct proc_struct *proc) {
c0108f2b:	55                   	push   %ebp
c0108f2c:	89 e5                	mov    %esp,%ebp
c0108f2e:	83 ec 08             	sub    $0x8,%esp
    static char name[PROC_NAME_LEN + 1];
    memset(name, 0, sizeof(name));
c0108f31:	83 ec 04             	sub    $0x4,%esp
c0108f34:	6a 10                	push   $0x10
c0108f36:	6a 00                	push   $0x0
c0108f38:	68 44 30 1b c0       	push   $0xc01b3044
c0108f3d:	e8 d3 20 00 00       	call   c010b015 <memset>
c0108f42:	83 c4 10             	add    $0x10,%esp
    return memcpy(name, proc->name, PROC_NAME_LEN);
c0108f45:	8b 45 08             	mov    0x8(%ebp),%eax
c0108f48:	83 c0 48             	add    $0x48,%eax
c0108f4b:	83 ec 04             	sub    $0x4,%esp
c0108f4e:	6a 0f                	push   $0xf
c0108f50:	50                   	push   %eax
c0108f51:	68 44 30 1b c0       	push   $0xc01b3044
c0108f56:	e8 9d 21 00 00       	call   c010b0f8 <memcpy>
c0108f5b:	83 c4 10             	add    $0x10,%esp
}
c0108f5e:	c9                   	leave  
c0108f5f:	c3                   	ret    

c0108f60 <set_links>:

// set_links - set the relation links of process
static void
set_links(struct proc_struct *proc) {
c0108f60:	55                   	push   %ebp
c0108f61:	89 e5                	mov    %esp,%ebp
c0108f63:	83 ec 20             	sub    $0x20,%esp
    list_add(&proc_list, &(proc->list_link));
c0108f66:	8b 45 08             	mov    0x8(%ebp),%eax
c0108f69:	83 c0 58             	add    $0x58,%eax
c0108f6c:	c7 45 fc bc 31 1b c0 	movl   $0xc01b31bc,-0x4(%ebp)
c0108f73:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0108f76:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108f79:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108f7c:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0108f7f:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0108f82:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108f85:	8b 40 04             	mov    0x4(%eax),%eax
c0108f88:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0108f8b:	89 55 ec             	mov    %edx,-0x14(%ebp)
c0108f8e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108f91:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0108f94:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0108f97:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108f9a:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0108f9d:	89 10                	mov    %edx,(%eax)
c0108f9f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108fa2:	8b 10                	mov    (%eax),%edx
c0108fa4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108fa7:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0108faa:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108fad:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0108fb0:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0108fb3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108fb6:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0108fb9:	89 10                	mov    %edx,(%eax)
    proc->yptr = NULL;
c0108fbb:	8b 45 08             	mov    0x8(%ebp),%eax
c0108fbe:	c7 40 74 00 00 00 00 	movl   $0x0,0x74(%eax)
    if ((proc->optr = proc->parent->cptr) != NULL) {
c0108fc5:	8b 45 08             	mov    0x8(%ebp),%eax
c0108fc8:	8b 40 14             	mov    0x14(%eax),%eax
c0108fcb:	8b 50 70             	mov    0x70(%eax),%edx
c0108fce:	8b 45 08             	mov    0x8(%ebp),%eax
c0108fd1:	89 50 78             	mov    %edx,0x78(%eax)
c0108fd4:	8b 45 08             	mov    0x8(%ebp),%eax
c0108fd7:	8b 40 78             	mov    0x78(%eax),%eax
c0108fda:	85 c0                	test   %eax,%eax
c0108fdc:	74 0c                	je     c0108fea <set_links+0x8a>
        proc->optr->yptr = proc;
c0108fde:	8b 45 08             	mov    0x8(%ebp),%eax
c0108fe1:	8b 40 78             	mov    0x78(%eax),%eax
c0108fe4:	8b 55 08             	mov    0x8(%ebp),%edx
c0108fe7:	89 50 74             	mov    %edx,0x74(%eax)
    }
    proc->parent->cptr = proc;
c0108fea:	8b 45 08             	mov    0x8(%ebp),%eax
c0108fed:	8b 40 14             	mov    0x14(%eax),%eax
c0108ff0:	8b 55 08             	mov    0x8(%ebp),%edx
c0108ff3:	89 50 70             	mov    %edx,0x70(%eax)
    nr_process ++;
c0108ff6:	a1 40 30 1b c0       	mov    0xc01b3040,%eax
c0108ffb:	83 c0 01             	add    $0x1,%eax
c0108ffe:	a3 40 30 1b c0       	mov    %eax,0xc01b3040
}
c0109003:	90                   	nop
c0109004:	c9                   	leave  
c0109005:	c3                   	ret    

c0109006 <remove_links>:

// remove_links - clean the relation links of process
static void
remove_links(struct proc_struct *proc) {
c0109006:	55                   	push   %ebp
c0109007:	89 e5                	mov    %esp,%ebp
c0109009:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->list_link));
c010900c:	8b 45 08             	mov    0x8(%ebp),%eax
c010900f:	83 c0 58             	add    $0x58,%eax
c0109012:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0109015:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109018:	8b 40 04             	mov    0x4(%eax),%eax
c010901b:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010901e:	8b 12                	mov    (%edx),%edx
c0109020:	89 55 f8             	mov    %edx,-0x8(%ebp)
c0109023:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0109026:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0109029:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010902c:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010902f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109032:	8b 55 f8             	mov    -0x8(%ebp),%edx
c0109035:	89 10                	mov    %edx,(%eax)
    if (proc->optr != NULL) {
c0109037:	8b 45 08             	mov    0x8(%ebp),%eax
c010903a:	8b 40 78             	mov    0x78(%eax),%eax
c010903d:	85 c0                	test   %eax,%eax
c010903f:	74 0f                	je     c0109050 <remove_links+0x4a>
        proc->optr->yptr = proc->yptr;
c0109041:	8b 45 08             	mov    0x8(%ebp),%eax
c0109044:	8b 40 78             	mov    0x78(%eax),%eax
c0109047:	8b 55 08             	mov    0x8(%ebp),%edx
c010904a:	8b 52 74             	mov    0x74(%edx),%edx
c010904d:	89 50 74             	mov    %edx,0x74(%eax)
    }
    if (proc->yptr != NULL) {
c0109050:	8b 45 08             	mov    0x8(%ebp),%eax
c0109053:	8b 40 74             	mov    0x74(%eax),%eax
c0109056:	85 c0                	test   %eax,%eax
c0109058:	74 11                	je     c010906b <remove_links+0x65>
        proc->yptr->optr = proc->optr;
c010905a:	8b 45 08             	mov    0x8(%ebp),%eax
c010905d:	8b 40 74             	mov    0x74(%eax),%eax
c0109060:	8b 55 08             	mov    0x8(%ebp),%edx
c0109063:	8b 52 78             	mov    0x78(%edx),%edx
c0109066:	89 50 78             	mov    %edx,0x78(%eax)
c0109069:	eb 0f                	jmp    c010907a <remove_links+0x74>
    }
    else {
       proc->parent->cptr = proc->optr;
c010906b:	8b 45 08             	mov    0x8(%ebp),%eax
c010906e:	8b 40 14             	mov    0x14(%eax),%eax
c0109071:	8b 55 08             	mov    0x8(%ebp),%edx
c0109074:	8b 52 78             	mov    0x78(%edx),%edx
c0109077:	89 50 70             	mov    %edx,0x70(%eax)
    }
    nr_process --;
c010907a:	a1 40 30 1b c0       	mov    0xc01b3040,%eax
c010907f:	83 e8 01             	sub    $0x1,%eax
c0109082:	a3 40 30 1b c0       	mov    %eax,0xc01b3040
}
c0109087:	90                   	nop
c0109088:	c9                   	leave  
c0109089:	c3                   	ret    

c010908a <get_pid>:

// get_pid - alloc a unique pid for process
static int
get_pid(void) {
c010908a:	55                   	push   %ebp
c010908b:	89 e5                	mov    %esp,%ebp
c010908d:	83 ec 10             	sub    $0x10,%esp
    static_assert(MAX_PID > MAX_PROCESS);
    struct proc_struct *proc;
    list_entry_t *list = &proc_list, *le;
c0109090:	c7 45 f8 bc 31 1b c0 	movl   $0xc01b31bc,-0x8(%ebp)
    static int next_safe = MAX_PID, last_pid = MAX_PID;
    if (++ last_pid >= MAX_PID) {
c0109097:	a1 78 ca 12 c0       	mov    0xc012ca78,%eax
c010909c:	83 c0 01             	add    $0x1,%eax
c010909f:	a3 78 ca 12 c0       	mov    %eax,0xc012ca78
c01090a4:	a1 78 ca 12 c0       	mov    0xc012ca78,%eax
c01090a9:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c01090ae:	7e 0c                	jle    c01090bc <get_pid+0x32>
        last_pid = 1;
c01090b0:	c7 05 78 ca 12 c0 01 	movl   $0x1,0xc012ca78
c01090b7:	00 00 00 
        goto inside;
c01090ba:	eb 13                	jmp    c01090cf <get_pid+0x45>
    }
    if (last_pid >= next_safe) {
c01090bc:	8b 15 78 ca 12 c0    	mov    0xc012ca78,%edx
c01090c2:	a1 7c ca 12 c0       	mov    0xc012ca7c,%eax
c01090c7:	39 c2                	cmp    %eax,%edx
c01090c9:	0f 8c ac 00 00 00    	jl     c010917b <get_pid+0xf1>
    inside:
        next_safe = MAX_PID;
c01090cf:	c7 05 7c ca 12 c0 00 	movl   $0x2000,0xc012ca7c
c01090d6:	20 00 00 
    repeat:
        le = list;
c01090d9:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01090dc:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while ((le = list_next(le)) != list) {
c01090df:	eb 7f                	jmp    c0109160 <get_pid+0xd6>
            proc = le2proc(le, list_link);
c01090e1:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01090e4:	83 e8 58             	sub    $0x58,%eax
c01090e7:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (proc->pid == last_pid) {
c01090ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01090ed:	8b 50 04             	mov    0x4(%eax),%edx
c01090f0:	a1 78 ca 12 c0       	mov    0xc012ca78,%eax
c01090f5:	39 c2                	cmp    %eax,%edx
c01090f7:	75 3e                	jne    c0109137 <get_pid+0xad>
                if (++ last_pid >= next_safe) {
c01090f9:	a1 78 ca 12 c0       	mov    0xc012ca78,%eax
c01090fe:	83 c0 01             	add    $0x1,%eax
c0109101:	a3 78 ca 12 c0       	mov    %eax,0xc012ca78
c0109106:	8b 15 78 ca 12 c0    	mov    0xc012ca78,%edx
c010910c:	a1 7c ca 12 c0       	mov    0xc012ca7c,%eax
c0109111:	39 c2                	cmp    %eax,%edx
c0109113:	7c 4b                	jl     c0109160 <get_pid+0xd6>
                    if (last_pid >= MAX_PID) {
c0109115:	a1 78 ca 12 c0       	mov    0xc012ca78,%eax
c010911a:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c010911f:	7e 0a                	jle    c010912b <get_pid+0xa1>
                        last_pid = 1;
c0109121:	c7 05 78 ca 12 c0 01 	movl   $0x1,0xc012ca78
c0109128:	00 00 00 
                    }
                    next_safe = MAX_PID;
c010912b:	c7 05 7c ca 12 c0 00 	movl   $0x2000,0xc012ca7c
c0109132:	20 00 00 
                    goto repeat;
c0109135:	eb a2                	jmp    c01090d9 <get_pid+0x4f>
                }
            }
            else if (proc->pid > last_pid && next_safe > proc->pid) {
c0109137:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010913a:	8b 50 04             	mov    0x4(%eax),%edx
c010913d:	a1 78 ca 12 c0       	mov    0xc012ca78,%eax
c0109142:	39 c2                	cmp    %eax,%edx
c0109144:	7e 1a                	jle    c0109160 <get_pid+0xd6>
c0109146:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109149:	8b 50 04             	mov    0x4(%eax),%edx
c010914c:	a1 7c ca 12 c0       	mov    0xc012ca7c,%eax
c0109151:	39 c2                	cmp    %eax,%edx
c0109153:	7d 0b                	jge    c0109160 <get_pid+0xd6>
                next_safe = proc->pid;
c0109155:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109158:	8b 40 04             	mov    0x4(%eax),%eax
c010915b:	a3 7c ca 12 c0       	mov    %eax,0xc012ca7c
c0109160:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109163:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0109166:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109169:	8b 40 04             	mov    0x4(%eax),%eax
    if (last_pid >= next_safe) {
    inside:
        next_safe = MAX_PID;
    repeat:
        le = list;
        while ((le = list_next(le)) != list) {
c010916c:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010916f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109172:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c0109175:	0f 85 66 ff ff ff    	jne    c01090e1 <get_pid+0x57>
            else if (proc->pid > last_pid && next_safe > proc->pid) {
                next_safe = proc->pid;
            }
        }
    }
    return last_pid;
c010917b:	a1 78 ca 12 c0       	mov    0xc012ca78,%eax
}
c0109180:	c9                   	leave  
c0109181:	c3                   	ret    

c0109182 <proc_run>:

// proc_run - make process "proc" running on cpu
// NOTE: before call switch_to, should load  base addr of "proc"'s new PDT
void
proc_run(struct proc_struct *proc) {
c0109182:	55                   	push   %ebp
c0109183:	89 e5                	mov    %esp,%ebp
c0109185:	83 ec 18             	sub    $0x18,%esp
    if (proc != current) {
c0109188:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010918d:	39 45 08             	cmp    %eax,0x8(%ebp)
c0109190:	74 6b                	je     c01091fd <proc_run+0x7b>
        bool intr_flag;
        struct proc_struct *prev = current, *next = proc;
c0109192:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c0109197:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010919a:	8b 45 08             	mov    0x8(%ebp),%eax
c010919d:	89 45 f0             	mov    %eax,-0x10(%ebp)
        local_intr_save(intr_flag);
c01091a0:	e8 f2 f9 ff ff       	call   c0108b97 <__intr_save>
c01091a5:	89 45 ec             	mov    %eax,-0x14(%ebp)
        {
            current = proc;
c01091a8:	8b 45 08             	mov    0x8(%ebp),%eax
c01091ab:	a3 28 10 1b c0       	mov    %eax,0xc01b1028
            load_esp0(next->kstack + KSTACKSIZE);
c01091b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01091b3:	8b 40 0c             	mov    0xc(%eax),%eax
c01091b6:	05 00 20 00 00       	add    $0x2000,%eax
c01091bb:	83 ec 0c             	sub    $0xc,%esp
c01091be:	50                   	push   %eax
c01091bf:	e8 c0 dd ff ff       	call   c0106f84 <load_esp0>
c01091c4:	83 c4 10             	add    $0x10,%esp
            lcr3(next->cr3);
c01091c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01091ca:	8b 40 40             	mov    0x40(%eax),%eax
c01091cd:	89 45 e8             	mov    %eax,-0x18(%ebp)
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
}

static inline void
lcr3(uintptr_t cr3) {
    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
c01091d0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01091d3:	0f 22 d8             	mov    %eax,%cr3
            switch_to(&(prev->context), &(next->context));
c01091d6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01091d9:	8d 50 1c             	lea    0x1c(%eax),%edx
c01091dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01091df:	83 c0 1c             	add    $0x1c,%eax
c01091e2:	83 ec 08             	sub    $0x8,%esp
c01091e5:	52                   	push   %edx
c01091e6:	50                   	push   %eax
c01091e7:	e8 34 f9 ff ff       	call   c0108b20 <switch_to>
c01091ec:	83 c4 10             	add    $0x10,%esp
        }
        local_intr_restore(intr_flag);
c01091ef:	83 ec 0c             	sub    $0xc,%esp
c01091f2:	ff 75 ec             	pushl  -0x14(%ebp)
c01091f5:	e8 c7 f9 ff ff       	call   c0108bc1 <__intr_restore>
c01091fa:	83 c4 10             	add    $0x10,%esp
    }
}
c01091fd:	90                   	nop
c01091fe:	c9                   	leave  
c01091ff:	c3                   	ret    

c0109200 <forkret>:

// forkret -- the first kernel entry point of a new thread/process
// NOTE: the addr of forkret is setted in copy_thread function
//       after switch_to, the current proc will execute here.
static void
forkret(void) {
c0109200:	55                   	push   %ebp
c0109201:	89 e5                	mov    %esp,%ebp
c0109203:	83 ec 08             	sub    $0x8,%esp
    forkrets(current->tf);
c0109206:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010920b:	8b 40 3c             	mov    0x3c(%eax),%eax
c010920e:	83 ec 0c             	sub    $0xc,%esp
c0109211:	50                   	push   %eax
c0109212:	e8 e6 a3 ff ff       	call   c01035fd <forkrets>
c0109217:	83 c4 10             	add    $0x10,%esp
}
c010921a:	90                   	nop
c010921b:	c9                   	leave  
c010921c:	c3                   	ret    

c010921d <hash_proc>:

// hash_proc - add proc into proc hash_list
static void
hash_proc(struct proc_struct *proc) {
c010921d:	55                   	push   %ebp
c010921e:	89 e5                	mov    %esp,%ebp
c0109220:	53                   	push   %ebx
c0109221:	83 ec 24             	sub    $0x24,%esp
    list_add(hash_list + pid_hashfn(proc->pid), &(proc->hash_link));
c0109224:	8b 45 08             	mov    0x8(%ebp),%eax
c0109227:	8d 58 60             	lea    0x60(%eax),%ebx
c010922a:	8b 45 08             	mov    0x8(%ebp),%eax
c010922d:	8b 40 04             	mov    0x4(%eax),%eax
c0109230:	83 ec 08             	sub    $0x8,%esp
c0109233:	6a 0a                	push   $0xa
c0109235:	50                   	push   %eax
c0109236:	e8 71 25 00 00       	call   c010b7ac <hash32>
c010923b:	83 c4 10             	add    $0x10,%esp
c010923e:	c1 e0 03             	shl    $0x3,%eax
c0109241:	05 40 10 1b c0       	add    $0xc01b1040,%eax
c0109246:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109249:	89 5d f0             	mov    %ebx,-0x10(%ebp)
c010924c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010924f:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0109252:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109255:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0109258:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010925b:	8b 40 04             	mov    0x4(%eax),%eax
c010925e:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0109261:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0109264:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0109267:	89 55 e0             	mov    %edx,-0x20(%ebp)
c010926a:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010926d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0109270:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0109273:	89 10                	mov    %edx,(%eax)
c0109275:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0109278:	8b 10                	mov    (%eax),%edx
c010927a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010927d:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0109280:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109283:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0109286:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0109289:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010928c:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010928f:	89 10                	mov    %edx,(%eax)
}
c0109291:	90                   	nop
c0109292:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0109295:	c9                   	leave  
c0109296:	c3                   	ret    

c0109297 <unhash_proc>:

// unhash_proc - delete proc from proc hash_list
static void
unhash_proc(struct proc_struct *proc) {
c0109297:	55                   	push   %ebp
c0109298:	89 e5                	mov    %esp,%ebp
c010929a:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->hash_link));
c010929d:	8b 45 08             	mov    0x8(%ebp),%eax
c01092a0:	83 c0 60             	add    $0x60,%eax
c01092a3:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c01092a6:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01092a9:	8b 40 04             	mov    0x4(%eax),%eax
c01092ac:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01092af:	8b 12                	mov    (%edx),%edx
c01092b1:	89 55 f8             	mov    %edx,-0x8(%ebp)
c01092b4:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c01092b7:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01092ba:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01092bd:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c01092c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01092c3:	8b 55 f8             	mov    -0x8(%ebp),%edx
c01092c6:	89 10                	mov    %edx,(%eax)
}
c01092c8:	90                   	nop
c01092c9:	c9                   	leave  
c01092ca:	c3                   	ret    

c01092cb <find_proc>:

// find_proc - find proc frome proc hash_list according to pid
struct proc_struct *
find_proc(int pid) {
c01092cb:	55                   	push   %ebp
c01092cc:	89 e5                	mov    %esp,%ebp
c01092ce:	83 ec 18             	sub    $0x18,%esp
    if (0 < pid && pid < MAX_PID) {
c01092d1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01092d5:	7e 5d                	jle    c0109334 <find_proc+0x69>
c01092d7:	81 7d 08 ff 1f 00 00 	cmpl   $0x1fff,0x8(%ebp)
c01092de:	7f 54                	jg     c0109334 <find_proc+0x69>
        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
c01092e0:	8b 45 08             	mov    0x8(%ebp),%eax
c01092e3:	83 ec 08             	sub    $0x8,%esp
c01092e6:	6a 0a                	push   $0xa
c01092e8:	50                   	push   %eax
c01092e9:	e8 be 24 00 00       	call   c010b7ac <hash32>
c01092ee:	83 c4 10             	add    $0x10,%esp
c01092f1:	c1 e0 03             	shl    $0x3,%eax
c01092f4:	05 40 10 1b c0       	add    $0xc01b1040,%eax
c01092f9:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01092fc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01092ff:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while ((le = list_next(le)) != list) {
c0109302:	eb 19                	jmp    c010931d <find_proc+0x52>
            struct proc_struct *proc = le2proc(le, hash_link);
c0109304:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109307:	83 e8 60             	sub    $0x60,%eax
c010930a:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if (proc->pid == pid) {
c010930d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109310:	8b 40 04             	mov    0x4(%eax),%eax
c0109313:	3b 45 08             	cmp    0x8(%ebp),%eax
c0109316:	75 05                	jne    c010931d <find_proc+0x52>
                return proc;
c0109318:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010931b:	eb 1c                	jmp    c0109339 <find_proc+0x6e>
c010931d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109320:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0109323:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109326:	8b 40 04             	mov    0x4(%eax),%eax
// find_proc - find proc frome proc hash_list according to pid
struct proc_struct *
find_proc(int pid) {
    if (0 < pid && pid < MAX_PID) {
        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
        while ((le = list_next(le)) != list) {
c0109329:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010932c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010932f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0109332:	75 d0                	jne    c0109304 <find_proc+0x39>
            if (proc->pid == pid) {
                return proc;
            }
        }
    }
    return NULL;
c0109334:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109339:	c9                   	leave  
c010933a:	c3                   	ret    

c010933b <kernel_thread>:

// kernel_thread - create a kernel thread using "fn" function
// NOTE: the contents of temp trapframe tf will be copied to 
//       proc->tf in do_fork-->copy_thread function
int
kernel_thread(int (*fn)(void *), void *arg, uint32_t clone_flags) {
c010933b:	55                   	push   %ebp
c010933c:	89 e5                	mov    %esp,%ebp
c010933e:	83 ec 58             	sub    $0x58,%esp
    struct trapframe tf;
    memset(&tf, 0, sizeof(struct trapframe));
c0109341:	83 ec 04             	sub    $0x4,%esp
c0109344:	6a 4c                	push   $0x4c
c0109346:	6a 00                	push   $0x0
c0109348:	8d 45 ac             	lea    -0x54(%ebp),%eax
c010934b:	50                   	push   %eax
c010934c:	e8 c4 1c 00 00       	call   c010b015 <memset>
c0109351:	83 c4 10             	add    $0x10,%esp
    tf.tf_cs = KERNEL_CS;
c0109354:	66 c7 45 e8 08 00    	movw   $0x8,-0x18(%ebp)
    tf.tf_ds = tf.tf_es = tf.tf_ss = KERNEL_DS;
c010935a:	66 c7 45 f4 10 00    	movw   $0x10,-0xc(%ebp)
c0109360:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c0109364:	66 89 45 d4          	mov    %ax,-0x2c(%ebp)
c0109368:	0f b7 45 d4          	movzwl -0x2c(%ebp),%eax
c010936c:	66 89 45 d8          	mov    %ax,-0x28(%ebp)
    tf.tf_regs.reg_ebx = (uint32_t)fn;
c0109370:	8b 45 08             	mov    0x8(%ebp),%eax
c0109373:	89 45 bc             	mov    %eax,-0x44(%ebp)
    tf.tf_regs.reg_edx = (uint32_t)arg;
c0109376:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109379:	89 45 c0             	mov    %eax,-0x40(%ebp)
    tf.tf_eip = (uint32_t)kernel_thread_entry;
c010937c:	b8 17 8b 10 c0       	mov    $0xc0108b17,%eax
c0109381:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return do_fork(clone_flags | CLONE_VM, 0, &tf);
c0109384:	8b 45 10             	mov    0x10(%ebp),%eax
c0109387:	80 cc 01             	or     $0x1,%ah
c010938a:	89 c2                	mov    %eax,%edx
c010938c:	83 ec 04             	sub    $0x4,%esp
c010938f:	8d 45 ac             	lea    -0x54(%ebp),%eax
c0109392:	50                   	push   %eax
c0109393:	6a 00                	push   $0x0
c0109395:	52                   	push   %edx
c0109396:	e8 f2 02 00 00       	call   c010968d <do_fork>
c010939b:	83 c4 10             	add    $0x10,%esp
}
c010939e:	c9                   	leave  
c010939f:	c3                   	ret    

c01093a0 <setup_kstack>:

// setup_kstack - alloc pages with size KSTACKPAGE as process kernel stack
static int
setup_kstack(struct proc_struct *proc) {
c01093a0:	55                   	push   %ebp
c01093a1:	89 e5                	mov    %esp,%ebp
c01093a3:	83 ec 18             	sub    $0x18,%esp
    struct Page *page = alloc_pages(KSTACKPAGE);
c01093a6:	83 ec 0c             	sub    $0xc,%esp
c01093a9:	6a 02                	push   $0x2
c01093ab:	e8 28 dd ff ff       	call   c01070d8 <alloc_pages>
c01093b0:	83 c4 10             	add    $0x10,%esp
c01093b3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c01093b6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01093ba:	74 1d                	je     c01093d9 <setup_kstack+0x39>
        proc->kstack = (uintptr_t)page2kva(page);
c01093bc:	83 ec 0c             	sub    $0xc,%esp
c01093bf:	ff 75 f4             	pushl  -0xc(%ebp)
c01093c2:	e8 db f8 ff ff       	call   c0108ca2 <page2kva>
c01093c7:	83 c4 10             	add    $0x10,%esp
c01093ca:	89 c2                	mov    %eax,%edx
c01093cc:	8b 45 08             	mov    0x8(%ebp),%eax
c01093cf:	89 50 0c             	mov    %edx,0xc(%eax)
        return 0;
c01093d2:	b8 00 00 00 00       	mov    $0x0,%eax
c01093d7:	eb 05                	jmp    c01093de <setup_kstack+0x3e>
    }
    return -E_NO_MEM;
c01093d9:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c01093de:	c9                   	leave  
c01093df:	c3                   	ret    

c01093e0 <put_kstack>:

// put_kstack - free the memory space of process kernel stack
static void
put_kstack(struct proc_struct *proc) {
c01093e0:	55                   	push   %ebp
c01093e1:	89 e5                	mov    %esp,%ebp
c01093e3:	83 ec 08             	sub    $0x8,%esp
    free_pages(kva2page((void *)(proc->kstack)), KSTACKPAGE);
c01093e6:	8b 45 08             	mov    0x8(%ebp),%eax
c01093e9:	8b 40 0c             	mov    0xc(%eax),%eax
c01093ec:	83 ec 0c             	sub    $0xc,%esp
c01093ef:	50                   	push   %eax
c01093f0:	e8 f2 f8 ff ff       	call   c0108ce7 <kva2page>
c01093f5:	83 c4 10             	add    $0x10,%esp
c01093f8:	83 ec 08             	sub    $0x8,%esp
c01093fb:	6a 02                	push   $0x2
c01093fd:	50                   	push   %eax
c01093fe:	e8 41 dd ff ff       	call   c0107144 <free_pages>
c0109403:	83 c4 10             	add    $0x10,%esp
}
c0109406:	90                   	nop
c0109407:	c9                   	leave  
c0109408:	c3                   	ret    

c0109409 <setup_pgdir>:

// setup_pgdir - alloc one page as PDT
static int
setup_pgdir(struct mm_struct *mm) {
c0109409:	55                   	push   %ebp
c010940a:	89 e5                	mov    %esp,%ebp
c010940c:	83 ec 18             	sub    $0x18,%esp
    struct Page *page;
    if ((page = alloc_page()) == NULL) {
c010940f:	83 ec 0c             	sub    $0xc,%esp
c0109412:	6a 01                	push   $0x1
c0109414:	e8 bf dc ff ff       	call   c01070d8 <alloc_pages>
c0109419:	83 c4 10             	add    $0x10,%esp
c010941c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010941f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109423:	75 07                	jne    c010942c <setup_pgdir+0x23>
        return -E_NO_MEM;
c0109425:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010942a:	eb 74                	jmp    c01094a0 <setup_pgdir+0x97>
    }
    pde_t *pgdir = page2kva(page);
c010942c:	83 ec 0c             	sub    $0xc,%esp
c010942f:	ff 75 f4             	pushl  -0xc(%ebp)
c0109432:	e8 6b f8 ff ff       	call   c0108ca2 <page2kva>
c0109437:	83 c4 10             	add    $0x10,%esp
c010943a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    memcpy(pgdir, boot_pgdir, PGSIZE);
c010943d:	a1 20 ca 12 c0       	mov    0xc012ca20,%eax
c0109442:	83 ec 04             	sub    $0x4,%esp
c0109445:	68 00 10 00 00       	push   $0x1000
c010944a:	50                   	push   %eax
c010944b:	ff 75 f0             	pushl  -0x10(%ebp)
c010944e:	e8 a5 1c 00 00       	call   c010b0f8 <memcpy>
c0109453:	83 c4 10             	add    $0x10,%esp
    pgdir[PDX(VPT)] = PADDR(pgdir) | PTE_P | PTE_W;
c0109456:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109459:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
c010945f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109462:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0109465:	81 7d ec ff ff ff bf 	cmpl   $0xbfffffff,-0x14(%ebp)
c010946c:	77 17                	ja     c0109485 <setup_pgdir+0x7c>
c010946e:	ff 75 ec             	pushl  -0x14(%ebp)
c0109471:	68 50 d9 10 c0       	push   $0xc010d950
c0109476:	68 44 01 00 00       	push   $0x144
c010947b:	68 74 d9 10 c0       	push   $0xc010d974
c0109480:	e8 78 6f ff ff       	call   c01003fd <__panic>
c0109485:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109488:	05 00 00 00 40       	add    $0x40000000,%eax
c010948d:	83 c8 03             	or     $0x3,%eax
c0109490:	89 02                	mov    %eax,(%edx)
    mm->pgdir = pgdir;
c0109492:	8b 45 08             	mov    0x8(%ebp),%eax
c0109495:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0109498:	89 50 0c             	mov    %edx,0xc(%eax)
    return 0;
c010949b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01094a0:	c9                   	leave  
c01094a1:	c3                   	ret    

c01094a2 <put_pgdir>:

// put_pgdir - free the memory space of PDT
static void
put_pgdir(struct mm_struct *mm) {
c01094a2:	55                   	push   %ebp
c01094a3:	89 e5                	mov    %esp,%ebp
c01094a5:	83 ec 08             	sub    $0x8,%esp
    free_page(kva2page(mm->pgdir));
c01094a8:	8b 45 08             	mov    0x8(%ebp),%eax
c01094ab:	8b 40 0c             	mov    0xc(%eax),%eax
c01094ae:	83 ec 0c             	sub    $0xc,%esp
c01094b1:	50                   	push   %eax
c01094b2:	e8 30 f8 ff ff       	call   c0108ce7 <kva2page>
c01094b7:	83 c4 10             	add    $0x10,%esp
c01094ba:	83 ec 08             	sub    $0x8,%esp
c01094bd:	6a 01                	push   $0x1
c01094bf:	50                   	push   %eax
c01094c0:	e8 7f dc ff ff       	call   c0107144 <free_pages>
c01094c5:	83 c4 10             	add    $0x10,%esp
}
c01094c8:	90                   	nop
c01094c9:	c9                   	leave  
c01094ca:	c3                   	ret    

c01094cb <copy_mm>:

// copy_mm - process "proc" duplicate OR share process "current"'s mm according clone_flags
//         - if clone_flags & CLONE_VM, then "share" ; else "duplicate"
static int
copy_mm(uint32_t clone_flags, struct proc_struct *proc) {
c01094cb:	55                   	push   %ebp
c01094cc:	89 e5                	mov    %esp,%ebp
c01094ce:	83 ec 18             	sub    $0x18,%esp
    struct mm_struct *mm, *oldmm = current->mm;
c01094d1:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c01094d6:	8b 40 18             	mov    0x18(%eax),%eax
c01094d9:	89 45 ec             	mov    %eax,-0x14(%ebp)

    /* current is a kernel thread */
    if (oldmm == NULL) {
c01094dc:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01094e0:	75 0a                	jne    c01094ec <copy_mm+0x21>
        return 0;
c01094e2:	b8 00 00 00 00       	mov    $0x0,%eax
c01094e7:	e9 03 01 00 00       	jmp    c01095ef <copy_mm+0x124>
    }
    if (clone_flags & CLONE_VM) {
c01094ec:	8b 45 08             	mov    0x8(%ebp),%eax
c01094ef:	25 00 01 00 00       	and    $0x100,%eax
c01094f4:	85 c0                	test   %eax,%eax
c01094f6:	74 08                	je     c0109500 <copy_mm+0x35>
        mm = oldmm;
c01094f8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01094fb:	89 45 f4             	mov    %eax,-0xc(%ebp)
        goto good_mm;
c01094fe:	eb 65                	jmp    c0109565 <copy_mm+0x9a>
    }

    int ret = -E_NO_MEM;
c0109500:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
    if ((mm = mm_create()) == NULL) {
c0109507:	e8 79 a1 ff ff       	call   c0103685 <mm_create>
c010950c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010950f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109513:	0f 84 d2 00 00 00    	je     c01095eb <copy_mm+0x120>
        goto bad_mm;
    }
    if (setup_pgdir(mm) != 0) {
c0109519:	83 ec 0c             	sub    $0xc,%esp
c010951c:	ff 75 f4             	pushl  -0xc(%ebp)
c010951f:	e8 e5 fe ff ff       	call   c0109409 <setup_pgdir>
c0109524:	83 c4 10             	add    $0x10,%esp
c0109527:	85 c0                	test   %eax,%eax
c0109529:	0f 85 ab 00 00 00    	jne    c01095da <copy_mm+0x10f>
        goto bad_pgdir_cleanup_mm;
    }

    lock_mm(oldmm);
c010952f:	83 ec 0c             	sub    $0xc,%esp
c0109532:	ff 75 ec             	pushl  -0x14(%ebp)
c0109535:	e8 20 f8 ff ff       	call   c0108d5a <lock_mm>
c010953a:	83 c4 10             	add    $0x10,%esp
    {
        ret = dup_mmap(mm, oldmm);
c010953d:	83 ec 08             	sub    $0x8,%esp
c0109540:	ff 75 ec             	pushl  -0x14(%ebp)
c0109543:	ff 75 f4             	pushl  -0xc(%ebp)
c0109546:	e8 0b a6 ff ff       	call   c0103b56 <dup_mmap>
c010954b:	83 c4 10             	add    $0x10,%esp
c010954e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    unlock_mm(oldmm);
c0109551:	83 ec 0c             	sub    $0xc,%esp
c0109554:	ff 75 ec             	pushl  -0x14(%ebp)
c0109557:	e8 1f f8 ff ff       	call   c0108d7b <unlock_mm>
c010955c:	83 c4 10             	add    $0x10,%esp

    if (ret != 0) {
c010955f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0109563:	75 56                	jne    c01095bb <copy_mm+0xf0>
        goto bad_dup_cleanup_mmap;
    }

good_mm:
    mm_count_inc(mm);
c0109565:	83 ec 0c             	sub    $0xc,%esp
c0109568:	ff 75 f4             	pushl  -0xc(%ebp)
c010956b:	e8 b6 f7 ff ff       	call   c0108d26 <mm_count_inc>
c0109570:	83 c4 10             	add    $0x10,%esp
    proc->mm = mm;
c0109573:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109576:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109579:	89 50 18             	mov    %edx,0x18(%eax)
    proc->cr3 = PADDR(mm->pgdir);
c010957c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010957f:	8b 40 0c             	mov    0xc(%eax),%eax
c0109582:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0109585:	81 7d e8 ff ff ff bf 	cmpl   $0xbfffffff,-0x18(%ebp)
c010958c:	77 17                	ja     c01095a5 <copy_mm+0xda>
c010958e:	ff 75 e8             	pushl  -0x18(%ebp)
c0109591:	68 50 d9 10 c0       	push   $0xc010d950
c0109596:	68 73 01 00 00       	push   $0x173
c010959b:	68 74 d9 10 c0       	push   $0xc010d974
c01095a0:	e8 58 6e ff ff       	call   c01003fd <__panic>
c01095a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01095a8:	8d 90 00 00 00 40    	lea    0x40000000(%eax),%edx
c01095ae:	8b 45 0c             	mov    0xc(%ebp),%eax
c01095b1:	89 50 40             	mov    %edx,0x40(%eax)
    return 0;
c01095b4:	b8 00 00 00 00       	mov    $0x0,%eax
c01095b9:	eb 34                	jmp    c01095ef <copy_mm+0x124>
        ret = dup_mmap(mm, oldmm);
    }
    unlock_mm(oldmm);

    if (ret != 0) {
        goto bad_dup_cleanup_mmap;
c01095bb:	90                   	nop
    mm_count_inc(mm);
    proc->mm = mm;
    proc->cr3 = PADDR(mm->pgdir);
    return 0;
bad_dup_cleanup_mmap:
    exit_mmap(mm);
c01095bc:	83 ec 0c             	sub    $0xc,%esp
c01095bf:	ff 75 f4             	pushl  -0xc(%ebp)
c01095c2:	e8 76 a6 ff ff       	call   c0103c3d <exit_mmap>
c01095c7:	83 c4 10             	add    $0x10,%esp
    put_pgdir(mm);
c01095ca:	83 ec 0c             	sub    $0xc,%esp
c01095cd:	ff 75 f4             	pushl  -0xc(%ebp)
c01095d0:	e8 cd fe ff ff       	call   c01094a2 <put_pgdir>
c01095d5:	83 c4 10             	add    $0x10,%esp
c01095d8:	eb 01                	jmp    c01095db <copy_mm+0x110>
    int ret = -E_NO_MEM;
    if ((mm = mm_create()) == NULL) {
        goto bad_mm;
    }
    if (setup_pgdir(mm) != 0) {
        goto bad_pgdir_cleanup_mm;
c01095da:	90                   	nop
    return 0;
bad_dup_cleanup_mmap:
    exit_mmap(mm);
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
c01095db:	83 ec 0c             	sub    $0xc,%esp
c01095de:	ff 75 f4             	pushl  -0xc(%ebp)
c01095e1:	e8 c9 a3 ff ff       	call   c01039af <mm_destroy>
c01095e6:	83 c4 10             	add    $0x10,%esp
c01095e9:	eb 01                	jmp    c01095ec <copy_mm+0x121>
        goto good_mm;
    }

    int ret = -E_NO_MEM;
    if ((mm = mm_create()) == NULL) {
        goto bad_mm;
c01095eb:	90                   	nop
    exit_mmap(mm);
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
bad_mm:
    return ret;
c01095ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c01095ef:	c9                   	leave  
c01095f0:	c3                   	ret    

c01095f1 <copy_thread>:

// copy_thread - setup the trapframe on the  process's kernel stack top and
//             - setup the kernel entry point and stack of process
static void
copy_thread(struct proc_struct *proc, uintptr_t esp, struct trapframe *tf) {
c01095f1:	55                   	push   %ebp
c01095f2:	89 e5                	mov    %esp,%ebp
c01095f4:	57                   	push   %edi
c01095f5:	56                   	push   %esi
c01095f6:	53                   	push   %ebx
    proc->tf = (struct trapframe *)(proc->kstack + KSTACKSIZE) - 1;
c01095f7:	8b 45 08             	mov    0x8(%ebp),%eax
c01095fa:	8b 40 0c             	mov    0xc(%eax),%eax
c01095fd:	05 b4 1f 00 00       	add    $0x1fb4,%eax
c0109602:	89 c2                	mov    %eax,%edx
c0109604:	8b 45 08             	mov    0x8(%ebp),%eax
c0109607:	89 50 3c             	mov    %edx,0x3c(%eax)
    *(proc->tf) = *tf;
c010960a:	8b 45 08             	mov    0x8(%ebp),%eax
c010960d:	8b 40 3c             	mov    0x3c(%eax),%eax
c0109610:	8b 55 10             	mov    0x10(%ebp),%edx
c0109613:	89 d3                	mov    %edx,%ebx
c0109615:	ba 4c 00 00 00       	mov    $0x4c,%edx
c010961a:	8b 0b                	mov    (%ebx),%ecx
c010961c:	89 08                	mov    %ecx,(%eax)
c010961e:	8b 4c 13 fc          	mov    -0x4(%ebx,%edx,1),%ecx
c0109622:	89 4c 10 fc          	mov    %ecx,-0x4(%eax,%edx,1)
c0109626:	8d 78 04             	lea    0x4(%eax),%edi
c0109629:	83 e7 fc             	and    $0xfffffffc,%edi
c010962c:	29 f8                	sub    %edi,%eax
c010962e:	29 c3                	sub    %eax,%ebx
c0109630:	01 c2                	add    %eax,%edx
c0109632:	83 e2 fc             	and    $0xfffffffc,%edx
c0109635:	89 d0                	mov    %edx,%eax
c0109637:	c1 e8 02             	shr    $0x2,%eax
c010963a:	89 de                	mov    %ebx,%esi
c010963c:	89 c1                	mov    %eax,%ecx
c010963e:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
    proc->tf->tf_regs.reg_eax = 0;
c0109640:	8b 45 08             	mov    0x8(%ebp),%eax
c0109643:	8b 40 3c             	mov    0x3c(%eax),%eax
c0109646:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    proc->tf->tf_esp = esp;
c010964d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109650:	8b 40 3c             	mov    0x3c(%eax),%eax
c0109653:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109656:	89 50 44             	mov    %edx,0x44(%eax)
    proc->tf->tf_eflags |= FL_IF;
c0109659:	8b 45 08             	mov    0x8(%ebp),%eax
c010965c:	8b 40 3c             	mov    0x3c(%eax),%eax
c010965f:	8b 55 08             	mov    0x8(%ebp),%edx
c0109662:	8b 52 3c             	mov    0x3c(%edx),%edx
c0109665:	8b 52 40             	mov    0x40(%edx),%edx
c0109668:	80 ce 02             	or     $0x2,%dh
c010966b:	89 50 40             	mov    %edx,0x40(%eax)

    proc->context.eip = (uintptr_t)forkret;
c010966e:	ba 00 92 10 c0       	mov    $0xc0109200,%edx
c0109673:	8b 45 08             	mov    0x8(%ebp),%eax
c0109676:	89 50 1c             	mov    %edx,0x1c(%eax)
    proc->context.esp = (uintptr_t)(proc->tf);
c0109679:	8b 45 08             	mov    0x8(%ebp),%eax
c010967c:	8b 40 3c             	mov    0x3c(%eax),%eax
c010967f:	89 c2                	mov    %eax,%edx
c0109681:	8b 45 08             	mov    0x8(%ebp),%eax
c0109684:	89 50 20             	mov    %edx,0x20(%eax)
}
c0109687:	90                   	nop
c0109688:	5b                   	pop    %ebx
c0109689:	5e                   	pop    %esi
c010968a:	5f                   	pop    %edi
c010968b:	5d                   	pop    %ebp
c010968c:	c3                   	ret    

c010968d <do_fork>:
 * @clone_flags: used to guide how to clone the child process
 * @stack:       the parent's user stack pointer. if stack==0, It means to fork a kernel thread.
 * @tf:          the trapframe info, which will be copied to child process's proc->tf
 */
int
do_fork(uint32_t clone_flags, uintptr_t stack, struct trapframe *tf) {
c010968d:	55                   	push   %ebp
c010968e:	89 e5                	mov    %esp,%ebp
c0109690:	83 ec 18             	sub    $0x18,%esp
    int ret = -E_NO_FREE_PROC;
c0109693:	c7 45 f4 fb ff ff ff 	movl   $0xfffffffb,-0xc(%ebp)
    struct proc_struct *proc;
    if (nr_process >= MAX_PROCESS) {
c010969a:	a1 40 30 1b c0       	mov    0xc01b3040,%eax
c010969f:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c01096a4:	0f 8f e1 00 00 00    	jg     c010978b <do_fork+0xfe>
        goto fork_out;
    }
    ret = -E_NO_MEM;
c01096aa:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    *    -------------------
	*    update step 1: set child proc's parent to current process, make sure current process's wait_state is 0
	*    update step 5: insert proc_struct into hash_list && proc_list, set the relation links of process
    */
    //    1. call alloc_proc to allocate a proc_struct
    proc = alloc_proc();
c01096b1:	e8 e6 f6 ff ff       	call   c0108d9c <alloc_proc>
c01096b6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (proc == NULL) {
c01096b9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01096bd:	0f 84 cb 00 00 00    	je     c010978e <do_fork+0x101>
        goto fork_out;
    }
    // update
    assert(current->wait_state == 0);
c01096c3:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c01096c8:	8b 40 6c             	mov    0x6c(%eax),%eax
c01096cb:	85 c0                	test   %eax,%eax
c01096cd:	74 19                	je     c01096e8 <do_fork+0x5b>
c01096cf:	68 88 d9 10 c0       	push   $0xc010d988
c01096d4:	68 a1 d9 10 c0       	push   $0xc010d9a1
c01096d9:	68 c0 01 00 00       	push   $0x1c0
c01096de:	68 74 d9 10 c0       	push   $0xc010d974
c01096e3:	e8 15 6d ff ff       	call   c01003fd <__panic>
    proc->parent = current;
c01096e8:	8b 15 28 10 1b c0    	mov    0xc01b1028,%edx
c01096ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01096f1:	89 50 14             	mov    %edx,0x14(%eax)
    //    2. call setup_kstack to allocate a kernel stack for child process
    if (setup_kstack(proc) != 0) {
c01096f4:	83 ec 0c             	sub    $0xc,%esp
c01096f7:	ff 75 f0             	pushl  -0x10(%ebp)
c01096fa:	e8 a1 fc ff ff       	call   c01093a0 <setup_kstack>
c01096ff:	83 c4 10             	add    $0x10,%esp
c0109702:	85 c0                	test   %eax,%eax
c0109704:	0f 85 9b 00 00 00    	jne    c01097a5 <do_fork+0x118>
        goto bad_fork_cleanup_proc;
    }
    //    3. call copy_mm to dup OR share mm according clone_flag
    if (copy_mm(clone_flags, proc) != 0) {
c010970a:	83 ec 08             	sub    $0x8,%esp
c010970d:	ff 75 f0             	pushl  -0x10(%ebp)
c0109710:	ff 75 08             	pushl  0x8(%ebp)
c0109713:	e8 b3 fd ff ff       	call   c01094cb <copy_mm>
c0109718:	83 c4 10             	add    $0x10,%esp
c010971b:	85 c0                	test   %eax,%eax
c010971d:	75 75                	jne    c0109794 <do_fork+0x107>
        goto bad_fork_cleanup_kstack;
    }
    //    4. call copy_thread to setup tf & context in proc_struct
    copy_thread(proc, stack, tf);   // note: if stack == 0, this is a kernel thread
c010971f:	83 ec 04             	sub    $0x4,%esp
c0109722:	ff 75 10             	pushl  0x10(%ebp)
c0109725:	ff 75 0c             	pushl  0xc(%ebp)
c0109728:	ff 75 f0             	pushl  -0x10(%ebp)
c010972b:	e8 c1 fe ff ff       	call   c01095f1 <copy_thread>
c0109730:	83 c4 10             	add    $0x10,%esp
    //    5. insert proc_struct into hash_list && proc_list
    // this need disabling interrupt
    bool intr_flag;
    local_intr_save(intr_flag);
c0109733:	e8 5f f4 ff ff       	call   c0108b97 <__intr_save>
c0109738:	89 45 ec             	mov    %eax,-0x14(%ebp)
    {
        proc->pid = get_pid();
c010973b:	e8 4a f9 ff ff       	call   c010908a <get_pid>
c0109740:	89 c2                	mov    %eax,%edx
c0109742:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109745:	89 50 04             	mov    %edx,0x4(%eax)
        hash_proc(proc);
c0109748:	83 ec 0c             	sub    $0xc,%esp
c010974b:	ff 75 f0             	pushl  -0x10(%ebp)
c010974e:	e8 ca fa ff ff       	call   c010921d <hash_proc>
c0109753:	83 c4 10             	add    $0x10,%esp
        // list_add(&proc_list, &(proc->list_link));
        // nr_process++;
        // update
        set_links(proc);
c0109756:	83 ec 0c             	sub    $0xc,%esp
c0109759:	ff 75 f0             	pushl  -0x10(%ebp)
c010975c:	e8 ff f7 ff ff       	call   c0108f60 <set_links>
c0109761:	83 c4 10             	add    $0x10,%esp
    }
    local_intr_restore(intr_flag);
c0109764:	83 ec 0c             	sub    $0xc,%esp
c0109767:	ff 75 ec             	pushl  -0x14(%ebp)
c010976a:	e8 52 f4 ff ff       	call   c0108bc1 <__intr_restore>
c010976f:	83 c4 10             	add    $0x10,%esp
    //    6. call wakeup_proc to make the new child process RUNNABLE
    wakeup_proc(proc);
c0109772:	83 ec 0c             	sub    $0xc,%esp
c0109775:	ff 75 f0             	pushl  -0x10(%ebp)
c0109778:	e8 28 10 00 00       	call   c010a7a5 <wakeup_proc>
c010977d:	83 c4 10             	add    $0x10,%esp
    //    7. set ret vaule using child proc's pid
    ret = proc->pid;
c0109780:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109783:	8b 40 04             	mov    0x4(%eax),%eax
c0109786:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109789:	eb 04                	jmp    c010978f <do_fork+0x102>
int
do_fork(uint32_t clone_flags, uintptr_t stack, struct trapframe *tf) {
    int ret = -E_NO_FREE_PROC;
    struct proc_struct *proc;
    if (nr_process >= MAX_PROCESS) {
        goto fork_out;
c010978b:	90                   	nop
c010978c:	eb 01                	jmp    c010978f <do_fork+0x102>
	*    update step 5: insert proc_struct into hash_list && proc_list, set the relation links of process
    */
    //    1. call alloc_proc to allocate a proc_struct
    proc = alloc_proc();
    if (proc == NULL) {
        goto fork_out;
c010978e:	90                   	nop
    wakeup_proc(proc);
    //    7. set ret vaule using child proc's pid
    ret = proc->pid;
	
fork_out:
    return ret;
c010978f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109792:	eb 22                	jmp    c01097b6 <do_fork+0x129>
    if (setup_kstack(proc) != 0) {
        goto bad_fork_cleanup_proc;
    }
    //    3. call copy_mm to dup OR share mm according clone_flag
    if (copy_mm(clone_flags, proc) != 0) {
        goto bad_fork_cleanup_kstack;
c0109794:	90                   	nop
	
fork_out:
    return ret;

bad_fork_cleanup_kstack:
    put_kstack(proc);
c0109795:	83 ec 0c             	sub    $0xc,%esp
c0109798:	ff 75 f0             	pushl  -0x10(%ebp)
c010979b:	e8 40 fc ff ff       	call   c01093e0 <put_kstack>
c01097a0:	83 c4 10             	add    $0x10,%esp
c01097a3:	eb 01                	jmp    c01097a6 <do_fork+0x119>
    // update
    assert(current->wait_state == 0);
    proc->parent = current;
    //    2. call setup_kstack to allocate a kernel stack for child process
    if (setup_kstack(proc) != 0) {
        goto bad_fork_cleanup_proc;
c01097a5:	90                   	nop
    return ret;

bad_fork_cleanup_kstack:
    put_kstack(proc);
bad_fork_cleanup_proc:
    kfree(proc);
c01097a6:	83 ec 0c             	sub    $0xc,%esp
c01097a9:	ff 75 f0             	pushl  -0x10(%ebp)
c01097ac:	e8 15 ba ff ff       	call   c01051c6 <kfree>
c01097b1:	83 c4 10             	add    $0x10,%esp
    goto fork_out;
c01097b4:	eb d9                	jmp    c010978f <do_fork+0x102>
}
c01097b6:	c9                   	leave  
c01097b7:	c3                   	ret    

c01097b8 <do_exit>:
// do_exit - called by sys_exit
//   1. call exit_mmap & put_pgdir & mm_destroy to free the almost all memory space of process
//   2. set process' state as PROC_ZOMBIE, then call wakeup_proc(parent) to ask parent reclaim itself.
//   3. call scheduler to switch to other process
int
do_exit(int error_code) {
c01097b8:	55                   	push   %ebp
c01097b9:	89 e5                	mov    %esp,%ebp
c01097bb:	83 ec 18             	sub    $0x18,%esp
    if (current == idleproc) {
c01097be:	8b 15 28 10 1b c0    	mov    0xc01b1028,%edx
c01097c4:	a1 20 10 1b c0       	mov    0xc01b1020,%eax
c01097c9:	39 c2                	cmp    %eax,%edx
c01097cb:	75 17                	jne    c01097e4 <do_exit+0x2c>
        panic("idleproc exit.\n");
c01097cd:	83 ec 04             	sub    $0x4,%esp
c01097d0:	68 b6 d9 10 c0       	push   $0xc010d9b6
c01097d5:	68 ef 01 00 00       	push   $0x1ef
c01097da:	68 74 d9 10 c0       	push   $0xc010d974
c01097df:	e8 19 6c ff ff       	call   c01003fd <__panic>
    }
    if (current == initproc) {
c01097e4:	8b 15 28 10 1b c0    	mov    0xc01b1028,%edx
c01097ea:	a1 24 10 1b c0       	mov    0xc01b1024,%eax
c01097ef:	39 c2                	cmp    %eax,%edx
c01097f1:	75 17                	jne    c010980a <do_exit+0x52>
        panic("initproc exit.\n");
c01097f3:	83 ec 04             	sub    $0x4,%esp
c01097f6:	68 c6 d9 10 c0       	push   $0xc010d9c6
c01097fb:	68 f2 01 00 00       	push   $0x1f2
c0109800:	68 74 d9 10 c0       	push   $0xc010d974
c0109805:	e8 f3 6b ff ff       	call   c01003fd <__panic>
    }
    
    struct mm_struct *mm = current->mm;
c010980a:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010980f:	8b 40 18             	mov    0x18(%eax),%eax
c0109812:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (mm != NULL) {
c0109815:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109819:	74 56                	je     c0109871 <do_exit+0xb9>
        lcr3(boot_cr3);
c010981b:	a1 b4 31 1b c0       	mov    0xc01b31b4,%eax
c0109820:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0109823:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109826:	0f 22 d8             	mov    %eax,%cr3
        if (mm_count_dec(mm) == 0) {
c0109829:	83 ec 0c             	sub    $0xc,%esp
c010982c:	ff 75 f4             	pushl  -0xc(%ebp)
c010982f:	e8 0c f5 ff ff       	call   c0108d40 <mm_count_dec>
c0109834:	83 c4 10             	add    $0x10,%esp
c0109837:	85 c0                	test   %eax,%eax
c0109839:	75 2a                	jne    c0109865 <do_exit+0xad>
            exit_mmap(mm);
c010983b:	83 ec 0c             	sub    $0xc,%esp
c010983e:	ff 75 f4             	pushl  -0xc(%ebp)
c0109841:	e8 f7 a3 ff ff       	call   c0103c3d <exit_mmap>
c0109846:	83 c4 10             	add    $0x10,%esp
            put_pgdir(mm);
c0109849:	83 ec 0c             	sub    $0xc,%esp
c010984c:	ff 75 f4             	pushl  -0xc(%ebp)
c010984f:	e8 4e fc ff ff       	call   c01094a2 <put_pgdir>
c0109854:	83 c4 10             	add    $0x10,%esp
            mm_destroy(mm);
c0109857:	83 ec 0c             	sub    $0xc,%esp
c010985a:	ff 75 f4             	pushl  -0xc(%ebp)
c010985d:	e8 4d a1 ff ff       	call   c01039af <mm_destroy>
c0109862:	83 c4 10             	add    $0x10,%esp
        }
        current->mm = NULL;
c0109865:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010986a:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    current->state = PROC_ZOMBIE;
c0109871:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c0109876:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
    current->exit_code = error_code;
c010987c:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c0109881:	8b 55 08             	mov    0x8(%ebp),%edx
c0109884:	89 50 68             	mov    %edx,0x68(%eax)
    
    bool intr_flag;
    struct proc_struct *proc;
    local_intr_save(intr_flag);
c0109887:	e8 0b f3 ff ff       	call   c0108b97 <__intr_save>
c010988c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        proc = current->parent;
c010988f:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c0109894:	8b 40 14             	mov    0x14(%eax),%eax
c0109897:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (proc->wait_state == WT_CHILD) {
c010989a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010989d:	8b 40 6c             	mov    0x6c(%eax),%eax
c01098a0:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c01098a5:	0f 85 9d 00 00 00    	jne    c0109948 <do_exit+0x190>
            wakeup_proc(proc);
c01098ab:	83 ec 0c             	sub    $0xc,%esp
c01098ae:	ff 75 ec             	pushl  -0x14(%ebp)
c01098b1:	e8 ef 0e 00 00       	call   c010a7a5 <wakeup_proc>
c01098b6:	83 c4 10             	add    $0x10,%esp
        }
        while (current->cptr != NULL) {
c01098b9:	e9 8a 00 00 00       	jmp    c0109948 <do_exit+0x190>
            proc = current->cptr;
c01098be:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c01098c3:	8b 40 70             	mov    0x70(%eax),%eax
c01098c6:	89 45 ec             	mov    %eax,-0x14(%ebp)
            current->cptr = proc->optr;
c01098c9:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c01098ce:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01098d1:	8b 52 78             	mov    0x78(%edx),%edx
c01098d4:	89 50 70             	mov    %edx,0x70(%eax)
    
            proc->yptr = NULL;
c01098d7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01098da:	c7 40 74 00 00 00 00 	movl   $0x0,0x74(%eax)
            if ((proc->optr = initproc->cptr) != NULL) {
c01098e1:	a1 24 10 1b c0       	mov    0xc01b1024,%eax
c01098e6:	8b 50 70             	mov    0x70(%eax),%edx
c01098e9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01098ec:	89 50 78             	mov    %edx,0x78(%eax)
c01098ef:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01098f2:	8b 40 78             	mov    0x78(%eax),%eax
c01098f5:	85 c0                	test   %eax,%eax
c01098f7:	74 0e                	je     c0109907 <do_exit+0x14f>
                initproc->cptr->yptr = proc;
c01098f9:	a1 24 10 1b c0       	mov    0xc01b1024,%eax
c01098fe:	8b 40 70             	mov    0x70(%eax),%eax
c0109901:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0109904:	89 50 74             	mov    %edx,0x74(%eax)
            }
            proc->parent = initproc;
c0109907:	8b 15 24 10 1b c0    	mov    0xc01b1024,%edx
c010990d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109910:	89 50 14             	mov    %edx,0x14(%eax)
            initproc->cptr = proc;
c0109913:	a1 24 10 1b c0       	mov    0xc01b1024,%eax
c0109918:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010991b:	89 50 70             	mov    %edx,0x70(%eax)
            if (proc->state == PROC_ZOMBIE) {
c010991e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109921:	8b 00                	mov    (%eax),%eax
c0109923:	83 f8 03             	cmp    $0x3,%eax
c0109926:	75 20                	jne    c0109948 <do_exit+0x190>
                if (initproc->wait_state == WT_CHILD) {
c0109928:	a1 24 10 1b c0       	mov    0xc01b1024,%eax
c010992d:	8b 40 6c             	mov    0x6c(%eax),%eax
c0109930:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c0109935:	75 11                	jne    c0109948 <do_exit+0x190>
                    wakeup_proc(initproc);
c0109937:	a1 24 10 1b c0       	mov    0xc01b1024,%eax
c010993c:	83 ec 0c             	sub    $0xc,%esp
c010993f:	50                   	push   %eax
c0109940:	e8 60 0e 00 00       	call   c010a7a5 <wakeup_proc>
c0109945:	83 c4 10             	add    $0x10,%esp
    {
        proc = current->parent;
        if (proc->wait_state == WT_CHILD) {
            wakeup_proc(proc);
        }
        while (current->cptr != NULL) {
c0109948:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010994d:	8b 40 70             	mov    0x70(%eax),%eax
c0109950:	85 c0                	test   %eax,%eax
c0109952:	0f 85 66 ff ff ff    	jne    c01098be <do_exit+0x106>
                    wakeup_proc(initproc);
                }
            }
        }
    }
    local_intr_restore(intr_flag);
c0109958:	83 ec 0c             	sub    $0xc,%esp
c010995b:	ff 75 f0             	pushl  -0x10(%ebp)
c010995e:	e8 5e f2 ff ff       	call   c0108bc1 <__intr_restore>
c0109963:	83 c4 10             	add    $0x10,%esp
    
    schedule();
c0109966:	e8 c7 0e 00 00       	call   c010a832 <schedule>
    panic("do_exit will not return!! %d.\n", current->pid);
c010996b:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c0109970:	8b 40 04             	mov    0x4(%eax),%eax
c0109973:	50                   	push   %eax
c0109974:	68 d8 d9 10 c0       	push   $0xc010d9d8
c0109979:	68 1e 02 00 00       	push   $0x21e
c010997e:	68 74 d9 10 c0       	push   $0xc010d974
c0109983:	e8 75 6a ff ff       	call   c01003fd <__panic>

c0109988 <load_icode>:
/* load_icode - load the content of binary program(ELF format) as the new content of current process
 * @binary:  the memory addr of the content of binary program
 * @size:  the size of the content of binary program
 */
static int
load_icode(unsigned char *binary, size_t size) {
c0109988:	55                   	push   %ebp
c0109989:	89 e5                	mov    %esp,%ebp
c010998b:	83 ec 58             	sub    $0x58,%esp
    if (current->mm != NULL) {
c010998e:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c0109993:	8b 40 18             	mov    0x18(%eax),%eax
c0109996:	85 c0                	test   %eax,%eax
c0109998:	74 17                	je     c01099b1 <load_icode+0x29>
        panic("load_icode: current->mm must be empty.\n");
c010999a:	83 ec 04             	sub    $0x4,%esp
c010999d:	68 f8 d9 10 c0       	push   $0xc010d9f8
c01099a2:	68 28 02 00 00       	push   $0x228
c01099a7:	68 74 d9 10 c0       	push   $0xc010d974
c01099ac:	e8 4c 6a ff ff       	call   c01003fd <__panic>
    }

    int ret = -E_NO_MEM;
c01099b1:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    struct mm_struct *mm;
    //(1) create a new mm for current process
    if ((mm = mm_create()) == NULL) {
c01099b8:	e8 c8 9c ff ff       	call   c0103685 <mm_create>
c01099bd:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01099c0:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c01099c4:	0f 84 8d 05 00 00    	je     c0109f57 <load_icode+0x5cf>
        goto bad_mm;
    }
    //(2) create a new PDT, and mm->pgdir= kernel virtual addr of PDT
    if (setup_pgdir(mm) != 0) {
c01099ca:	83 ec 0c             	sub    $0xc,%esp
c01099cd:	ff 75 d0             	pushl  -0x30(%ebp)
c01099d0:	e8 34 fa ff ff       	call   c0109409 <setup_pgdir>
c01099d5:	83 c4 10             	add    $0x10,%esp
c01099d8:	85 c0                	test   %eax,%eax
c01099da:	0f 85 66 05 00 00    	jne    c0109f46 <load_icode+0x5be>
        goto bad_pgdir_cleanup_mm;
    }
    //(3) copy TEXT/DATA section, build BSS parts in binary to memory space of process
    struct Page *page;
    //(3.1) get the file header of the bianry program (ELF format)
    struct elfhdr *elf = (struct elfhdr *)binary;
c01099e0:	8b 45 08             	mov    0x8(%ebp),%eax
c01099e3:	89 45 cc             	mov    %eax,-0x34(%ebp)
    //(3.2) get the entry of the program section headers of the bianry program (ELF format)
    struct proghdr *ph = (struct proghdr *)(binary + elf->e_phoff);
c01099e6:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01099e9:	8b 50 1c             	mov    0x1c(%eax),%edx
c01099ec:	8b 45 08             	mov    0x8(%ebp),%eax
c01099ef:	01 d0                	add    %edx,%eax
c01099f1:	89 45 ec             	mov    %eax,-0x14(%ebp)
    //(3.3) This program is valid?
    if (elf->e_magic != ELF_MAGIC) {
c01099f4:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01099f7:	8b 00                	mov    (%eax),%eax
c01099f9:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
c01099fe:	74 0c                	je     c0109a0c <load_icode+0x84>
        ret = -E_INVAL_ELF;
c0109a00:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
        goto bad_elf_cleanup_pgdir;
c0109a07:	e9 2a 05 00 00       	jmp    c0109f36 <load_icode+0x5ae>
    }

    uint32_t vm_flags, perm;
    struct proghdr *ph_end = ph + elf->e_phnum;
c0109a0c:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0109a0f:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c0109a13:	0f b7 c0             	movzwl %ax,%eax
c0109a16:	c1 e0 05             	shl    $0x5,%eax
c0109a19:	89 c2                	mov    %eax,%edx
c0109a1b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109a1e:	01 d0                	add    %edx,%eax
c0109a20:	89 45 c8             	mov    %eax,-0x38(%ebp)
    for (; ph < ph_end; ph ++) {
c0109a23:	e9 e0 02 00 00       	jmp    c0109d08 <load_icode+0x380>
    //(3.4) find every program section headers
        if (ph->p_type != ELF_PT_LOAD) {
c0109a28:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109a2b:	8b 00                	mov    (%eax),%eax
c0109a2d:	83 f8 01             	cmp    $0x1,%eax
c0109a30:	0f 85 c7 02 00 00    	jne    c0109cfd <load_icode+0x375>
            continue ;
        }
        if (ph->p_filesz > ph->p_memsz) {
c0109a36:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109a39:	8b 50 10             	mov    0x10(%eax),%edx
c0109a3c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109a3f:	8b 40 14             	mov    0x14(%eax),%eax
c0109a42:	39 c2                	cmp    %eax,%edx
c0109a44:	76 0c                	jbe    c0109a52 <load_icode+0xca>
            ret = -E_INVAL_ELF;
c0109a46:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
            goto bad_cleanup_mmap;
c0109a4d:	e9 d6 04 00 00       	jmp    c0109f28 <load_icode+0x5a0>
        }
        if (ph->p_filesz == 0) {
c0109a52:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109a55:	8b 40 10             	mov    0x10(%eax),%eax
c0109a58:	85 c0                	test   %eax,%eax
c0109a5a:	0f 84 a0 02 00 00    	je     c0109d00 <load_icode+0x378>
            continue ;
        }
    //(3.5) call mm_map fun to setup the new vma ( ph->p_va, ph->p_memsz)
        vm_flags = 0, perm = PTE_U;
c0109a60:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c0109a67:	c7 45 e4 04 00 00 00 	movl   $0x4,-0x1c(%ebp)
        if (ph->p_flags & ELF_PF_X) vm_flags |= VM_EXEC;
c0109a6e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109a71:	8b 40 18             	mov    0x18(%eax),%eax
c0109a74:	83 e0 01             	and    $0x1,%eax
c0109a77:	85 c0                	test   %eax,%eax
c0109a79:	74 04                	je     c0109a7f <load_icode+0xf7>
c0109a7b:	83 4d e8 04          	orl    $0x4,-0x18(%ebp)
        if (ph->p_flags & ELF_PF_W) vm_flags |= VM_WRITE;
c0109a7f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109a82:	8b 40 18             	mov    0x18(%eax),%eax
c0109a85:	83 e0 02             	and    $0x2,%eax
c0109a88:	85 c0                	test   %eax,%eax
c0109a8a:	74 04                	je     c0109a90 <load_icode+0x108>
c0109a8c:	83 4d e8 02          	orl    $0x2,-0x18(%ebp)
        if (ph->p_flags & ELF_PF_R) vm_flags |= VM_READ;
c0109a90:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109a93:	8b 40 18             	mov    0x18(%eax),%eax
c0109a96:	83 e0 04             	and    $0x4,%eax
c0109a99:	85 c0                	test   %eax,%eax
c0109a9b:	74 04                	je     c0109aa1 <load_icode+0x119>
c0109a9d:	83 4d e8 01          	orl    $0x1,-0x18(%ebp)
        if (vm_flags & VM_WRITE) perm |= PTE_W;
c0109aa1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109aa4:	83 e0 02             	and    $0x2,%eax
c0109aa7:	85 c0                	test   %eax,%eax
c0109aa9:	74 04                	je     c0109aaf <load_icode+0x127>
c0109aab:	83 4d e4 02          	orl    $0x2,-0x1c(%ebp)
        if ((ret = mm_map(mm, ph->p_va, ph->p_memsz, vm_flags, NULL)) != 0) {
c0109aaf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109ab2:	8b 50 14             	mov    0x14(%eax),%edx
c0109ab5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109ab8:	8b 40 08             	mov    0x8(%eax),%eax
c0109abb:	83 ec 0c             	sub    $0xc,%esp
c0109abe:	6a 00                	push   $0x0
c0109ac0:	ff 75 e8             	pushl  -0x18(%ebp)
c0109ac3:	52                   	push   %edx
c0109ac4:	50                   	push   %eax
c0109ac5:	ff 75 d0             	pushl  -0x30(%ebp)
c0109ac8:	e8 81 9f ff ff       	call   c0103a4e <mm_map>
c0109acd:	83 c4 20             	add    $0x20,%esp
c0109ad0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109ad3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109ad7:	0f 85 41 04 00 00    	jne    c0109f1e <load_icode+0x596>
            goto bad_cleanup_mmap;
        }
        unsigned char *from = binary + ph->p_offset;
c0109add:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109ae0:	8b 50 04             	mov    0x4(%eax),%edx
c0109ae3:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ae6:	01 d0                	add    %edx,%eax
c0109ae8:	89 45 e0             	mov    %eax,-0x20(%ebp)
        size_t off, size;
        uintptr_t start = ph->p_va, end, la = ROUNDDOWN(start, PGSIZE);
c0109aeb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109aee:	8b 40 08             	mov    0x8(%eax),%eax
c0109af1:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0109af4:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0109af7:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c0109afa:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0109afd:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0109b02:	89 45 d4             	mov    %eax,-0x2c(%ebp)

        ret = -E_NO_MEM;
c0109b05:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
        end = ph->p_va + ph->p_filesz;
c0109b0c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109b0f:	8b 50 08             	mov    0x8(%eax),%edx
c0109b12:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109b15:	8b 40 10             	mov    0x10(%eax),%eax
c0109b18:	01 d0                	add    %edx,%eax
c0109b1a:	89 45 c0             	mov    %eax,-0x40(%ebp)
     //(3.6.1) copy TEXT/DATA section of bianry program
        while (start < end) {
c0109b1d:	e9 84 00 00 00       	jmp    c0109ba6 <load_icode+0x21e>
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
c0109b22:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0109b25:	8b 40 0c             	mov    0xc(%eax),%eax
c0109b28:	83 ec 04             	sub    $0x4,%esp
c0109b2b:	ff 75 e4             	pushl  -0x1c(%ebp)
c0109b2e:	ff 75 d4             	pushl  -0x2c(%ebp)
c0109b31:	50                   	push   %eax
c0109b32:	e8 f7 e2 ff ff       	call   c0107e2e <pgdir_alloc_page>
c0109b37:	83 c4 10             	add    $0x10,%esp
c0109b3a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109b3d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0109b41:	0f 84 da 03 00 00    	je     c0109f21 <load_icode+0x599>
                goto bad_cleanup_mmap;
            }
            off = start - la, size = PGSIZE - off, la += PGSIZE;
c0109b47:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0109b4a:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c0109b4d:	89 45 bc             	mov    %eax,-0x44(%ebp)
c0109b50:	b8 00 10 00 00       	mov    $0x1000,%eax
c0109b55:	2b 45 bc             	sub    -0x44(%ebp),%eax
c0109b58:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0109b5b:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
            if (end < la) {
c0109b62:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0109b65:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0109b68:	73 09                	jae    c0109b73 <load_icode+0x1eb>
                size -= la - end;
c0109b6a:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0109b6d:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c0109b70:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memcpy(page2kva(page) + off, from, size);
c0109b73:	83 ec 0c             	sub    $0xc,%esp
c0109b76:	ff 75 f0             	pushl  -0x10(%ebp)
c0109b79:	e8 24 f1 ff ff       	call   c0108ca2 <page2kva>
c0109b7e:	83 c4 10             	add    $0x10,%esp
c0109b81:	89 c2                	mov    %eax,%edx
c0109b83:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0109b86:	01 d0                	add    %edx,%eax
c0109b88:	83 ec 04             	sub    $0x4,%esp
c0109b8b:	ff 75 dc             	pushl  -0x24(%ebp)
c0109b8e:	ff 75 e0             	pushl  -0x20(%ebp)
c0109b91:	50                   	push   %eax
c0109b92:	e8 61 15 00 00       	call   c010b0f8 <memcpy>
c0109b97:	83 c4 10             	add    $0x10,%esp
            start += size, from += size;
c0109b9a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0109b9d:	01 45 d8             	add    %eax,-0x28(%ebp)
c0109ba0:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0109ba3:	01 45 e0             	add    %eax,-0x20(%ebp)
        ret = -E_NO_MEM;

     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
        end = ph->p_va + ph->p_filesz;
     //(3.6.1) copy TEXT/DATA section of bianry program
        while (start < end) {
c0109ba6:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0109ba9:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c0109bac:	0f 82 70 ff ff ff    	jb     c0109b22 <load_icode+0x19a>
            memcpy(page2kva(page) + off, from, size);
            start += size, from += size;
        }

      //(3.6.2) build BSS section of binary program
        end = ph->p_va + ph->p_memsz;
c0109bb2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109bb5:	8b 50 08             	mov    0x8(%eax),%edx
c0109bb8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109bbb:	8b 40 14             	mov    0x14(%eax),%eax
c0109bbe:	01 d0                	add    %edx,%eax
c0109bc0:	89 45 c0             	mov    %eax,-0x40(%ebp)
        if (start < la) {
c0109bc3:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0109bc6:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0109bc9:	0f 83 20 01 00 00    	jae    c0109cef <load_icode+0x367>
            /* ph->p_memsz == ph->p_filesz */
            if (start == end) {
c0109bcf:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0109bd2:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c0109bd5:	0f 84 28 01 00 00    	je     c0109d03 <load_icode+0x37b>
                continue ;
            }
            off = start + PGSIZE - la, size = PGSIZE - off;
c0109bdb:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0109bde:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c0109be1:	05 00 10 00 00       	add    $0x1000,%eax
c0109be6:	89 45 bc             	mov    %eax,-0x44(%ebp)
c0109be9:	b8 00 10 00 00       	mov    $0x1000,%eax
c0109bee:	2b 45 bc             	sub    -0x44(%ebp),%eax
c0109bf1:	89 45 dc             	mov    %eax,-0x24(%ebp)
            if (end < la) {
c0109bf4:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0109bf7:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0109bfa:	73 09                	jae    c0109c05 <load_icode+0x27d>
                size -= la - end;
c0109bfc:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0109bff:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c0109c02:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
c0109c05:	83 ec 0c             	sub    $0xc,%esp
c0109c08:	ff 75 f0             	pushl  -0x10(%ebp)
c0109c0b:	e8 92 f0 ff ff       	call   c0108ca2 <page2kva>
c0109c10:	83 c4 10             	add    $0x10,%esp
c0109c13:	89 c2                	mov    %eax,%edx
c0109c15:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0109c18:	01 d0                	add    %edx,%eax
c0109c1a:	83 ec 04             	sub    $0x4,%esp
c0109c1d:	ff 75 dc             	pushl  -0x24(%ebp)
c0109c20:	6a 00                	push   $0x0
c0109c22:	50                   	push   %eax
c0109c23:	e8 ed 13 00 00       	call   c010b015 <memset>
c0109c28:	83 c4 10             	add    $0x10,%esp
            start += size;
c0109c2b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0109c2e:	01 45 d8             	add    %eax,-0x28(%ebp)
            assert((end < la && start == end) || (end >= la && start == la));
c0109c31:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0109c34:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0109c37:	73 0c                	jae    c0109c45 <load_icode+0x2bd>
c0109c39:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0109c3c:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c0109c3f:	0f 84 aa 00 00 00    	je     c0109cef <load_icode+0x367>
c0109c45:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0109c48:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0109c4b:	72 0c                	jb     c0109c59 <load_icode+0x2d1>
c0109c4d:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0109c50:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0109c53:	0f 84 96 00 00 00    	je     c0109cef <load_icode+0x367>
c0109c59:	68 20 da 10 c0       	push   $0xc010da20
c0109c5e:	68 a1 d9 10 c0       	push   $0xc010d9a1
c0109c63:	68 7a 02 00 00       	push   $0x27a
c0109c68:	68 74 d9 10 c0       	push   $0xc010d974
c0109c6d:	e8 8b 67 ff ff       	call   c01003fd <__panic>
        }
        while (start < end) {
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
c0109c72:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0109c75:	8b 40 0c             	mov    0xc(%eax),%eax
c0109c78:	83 ec 04             	sub    $0x4,%esp
c0109c7b:	ff 75 e4             	pushl  -0x1c(%ebp)
c0109c7e:	ff 75 d4             	pushl  -0x2c(%ebp)
c0109c81:	50                   	push   %eax
c0109c82:	e8 a7 e1 ff ff       	call   c0107e2e <pgdir_alloc_page>
c0109c87:	83 c4 10             	add    $0x10,%esp
c0109c8a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109c8d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0109c91:	0f 84 8d 02 00 00    	je     c0109f24 <load_icode+0x59c>
                goto bad_cleanup_mmap;
            }
            off = start - la, size = PGSIZE - off, la += PGSIZE;
c0109c97:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0109c9a:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c0109c9d:	89 45 bc             	mov    %eax,-0x44(%ebp)
c0109ca0:	b8 00 10 00 00       	mov    $0x1000,%eax
c0109ca5:	2b 45 bc             	sub    -0x44(%ebp),%eax
c0109ca8:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0109cab:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
            if (end < la) {
c0109cb2:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0109cb5:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0109cb8:	73 09                	jae    c0109cc3 <load_icode+0x33b>
                size -= la - end;
c0109cba:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0109cbd:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c0109cc0:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
c0109cc3:	83 ec 0c             	sub    $0xc,%esp
c0109cc6:	ff 75 f0             	pushl  -0x10(%ebp)
c0109cc9:	e8 d4 ef ff ff       	call   c0108ca2 <page2kva>
c0109cce:	83 c4 10             	add    $0x10,%esp
c0109cd1:	89 c2                	mov    %eax,%edx
c0109cd3:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0109cd6:	01 d0                	add    %edx,%eax
c0109cd8:	83 ec 04             	sub    $0x4,%esp
c0109cdb:	ff 75 dc             	pushl  -0x24(%ebp)
c0109cde:	6a 00                	push   $0x0
c0109ce0:	50                   	push   %eax
c0109ce1:	e8 2f 13 00 00       	call   c010b015 <memset>
c0109ce6:	83 c4 10             	add    $0x10,%esp
            start += size;
c0109ce9:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0109cec:	01 45 d8             	add    %eax,-0x28(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
            start += size;
            assert((end < la && start == end) || (end >= la && start == la));
        }
        while (start < end) {
c0109cef:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0109cf2:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c0109cf5:	0f 82 77 ff ff ff    	jb     c0109c72 <load_icode+0x2ea>
c0109cfb:	eb 07                	jmp    c0109d04 <load_icode+0x37c>
    uint32_t vm_flags, perm;
    struct proghdr *ph_end = ph + elf->e_phnum;
    for (; ph < ph_end; ph ++) {
    //(3.4) find every program section headers
        if (ph->p_type != ELF_PT_LOAD) {
            continue ;
c0109cfd:	90                   	nop
c0109cfe:	eb 04                	jmp    c0109d04 <load_icode+0x37c>
        if (ph->p_filesz > ph->p_memsz) {
            ret = -E_INVAL_ELF;
            goto bad_cleanup_mmap;
        }
        if (ph->p_filesz == 0) {
            continue ;
c0109d00:	90                   	nop
c0109d01:	eb 01                	jmp    c0109d04 <load_icode+0x37c>
      //(3.6.2) build BSS section of binary program
        end = ph->p_va + ph->p_memsz;
        if (start < la) {
            /* ph->p_memsz == ph->p_filesz */
            if (start == end) {
                continue ;
c0109d03:	90                   	nop
        goto bad_elf_cleanup_pgdir;
    }

    uint32_t vm_flags, perm;
    struct proghdr *ph_end = ph + elf->e_phnum;
    for (; ph < ph_end; ph ++) {
c0109d04:	83 45 ec 20          	addl   $0x20,-0x14(%ebp)
c0109d08:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109d0b:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c0109d0e:	0f 82 14 fd ff ff    	jb     c0109a28 <load_icode+0xa0>
            memset(page2kva(page) + off, 0, size);
            start += size;
        }
    }
    //(4) build user stack memory
    vm_flags = VM_READ | VM_WRITE | VM_STACK;
c0109d14:	c7 45 e8 0b 00 00 00 	movl   $0xb,-0x18(%ebp)
    if ((ret = mm_map(mm, USTACKTOP - USTACKSIZE, USTACKSIZE, vm_flags, NULL)) != 0) {
c0109d1b:	83 ec 0c             	sub    $0xc,%esp
c0109d1e:	6a 00                	push   $0x0
c0109d20:	ff 75 e8             	pushl  -0x18(%ebp)
c0109d23:	68 00 00 10 00       	push   $0x100000
c0109d28:	68 00 00 f0 af       	push   $0xaff00000
c0109d2d:	ff 75 d0             	pushl  -0x30(%ebp)
c0109d30:	e8 19 9d ff ff       	call   c0103a4e <mm_map>
c0109d35:	83 c4 20             	add    $0x20,%esp
c0109d38:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109d3b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109d3f:	0f 85 e2 01 00 00    	jne    c0109f27 <load_icode+0x59f>
        goto bad_cleanup_mmap;
    }
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-PGSIZE , PTE_USER) != NULL);
c0109d45:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0109d48:	8b 40 0c             	mov    0xc(%eax),%eax
c0109d4b:	83 ec 04             	sub    $0x4,%esp
c0109d4e:	6a 07                	push   $0x7
c0109d50:	68 00 f0 ff af       	push   $0xaffff000
c0109d55:	50                   	push   %eax
c0109d56:	e8 d3 e0 ff ff       	call   c0107e2e <pgdir_alloc_page>
c0109d5b:	83 c4 10             	add    $0x10,%esp
c0109d5e:	85 c0                	test   %eax,%eax
c0109d60:	75 19                	jne    c0109d7b <load_icode+0x3f3>
c0109d62:	68 5c da 10 c0       	push   $0xc010da5c
c0109d67:	68 a1 d9 10 c0       	push   $0xc010d9a1
c0109d6c:	68 8d 02 00 00       	push   $0x28d
c0109d71:	68 74 d9 10 c0       	push   $0xc010d974
c0109d76:	e8 82 66 ff ff       	call   c01003fd <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-2*PGSIZE , PTE_USER) != NULL);
c0109d7b:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0109d7e:	8b 40 0c             	mov    0xc(%eax),%eax
c0109d81:	83 ec 04             	sub    $0x4,%esp
c0109d84:	6a 07                	push   $0x7
c0109d86:	68 00 e0 ff af       	push   $0xafffe000
c0109d8b:	50                   	push   %eax
c0109d8c:	e8 9d e0 ff ff       	call   c0107e2e <pgdir_alloc_page>
c0109d91:	83 c4 10             	add    $0x10,%esp
c0109d94:	85 c0                	test   %eax,%eax
c0109d96:	75 19                	jne    c0109db1 <load_icode+0x429>
c0109d98:	68 a0 da 10 c0       	push   $0xc010daa0
c0109d9d:	68 a1 d9 10 c0       	push   $0xc010d9a1
c0109da2:	68 8e 02 00 00       	push   $0x28e
c0109da7:	68 74 d9 10 c0       	push   $0xc010d974
c0109dac:	e8 4c 66 ff ff       	call   c01003fd <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-3*PGSIZE , PTE_USER) != NULL);
c0109db1:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0109db4:	8b 40 0c             	mov    0xc(%eax),%eax
c0109db7:	83 ec 04             	sub    $0x4,%esp
c0109dba:	6a 07                	push   $0x7
c0109dbc:	68 00 d0 ff af       	push   $0xafffd000
c0109dc1:	50                   	push   %eax
c0109dc2:	e8 67 e0 ff ff       	call   c0107e2e <pgdir_alloc_page>
c0109dc7:	83 c4 10             	add    $0x10,%esp
c0109dca:	85 c0                	test   %eax,%eax
c0109dcc:	75 19                	jne    c0109de7 <load_icode+0x45f>
c0109dce:	68 e4 da 10 c0       	push   $0xc010dae4
c0109dd3:	68 a1 d9 10 c0       	push   $0xc010d9a1
c0109dd8:	68 8f 02 00 00       	push   $0x28f
c0109ddd:	68 74 d9 10 c0       	push   $0xc010d974
c0109de2:	e8 16 66 ff ff       	call   c01003fd <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-4*PGSIZE , PTE_USER) != NULL);
c0109de7:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0109dea:	8b 40 0c             	mov    0xc(%eax),%eax
c0109ded:	83 ec 04             	sub    $0x4,%esp
c0109df0:	6a 07                	push   $0x7
c0109df2:	68 00 c0 ff af       	push   $0xafffc000
c0109df7:	50                   	push   %eax
c0109df8:	e8 31 e0 ff ff       	call   c0107e2e <pgdir_alloc_page>
c0109dfd:	83 c4 10             	add    $0x10,%esp
c0109e00:	85 c0                	test   %eax,%eax
c0109e02:	75 19                	jne    c0109e1d <load_icode+0x495>
c0109e04:	68 28 db 10 c0       	push   $0xc010db28
c0109e09:	68 a1 d9 10 c0       	push   $0xc010d9a1
c0109e0e:	68 90 02 00 00       	push   $0x290
c0109e13:	68 74 d9 10 c0       	push   $0xc010d974
c0109e18:	e8 e0 65 ff ff       	call   c01003fd <__panic>
    
    //(5) set current process's mm, sr3, and set CR3 reg = physical addr of Page Directory
    mm_count_inc(mm);
c0109e1d:	83 ec 0c             	sub    $0xc,%esp
c0109e20:	ff 75 d0             	pushl  -0x30(%ebp)
c0109e23:	e8 fe ee ff ff       	call   c0108d26 <mm_count_inc>
c0109e28:	83 c4 10             	add    $0x10,%esp
    current->mm = mm;
c0109e2b:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c0109e30:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0109e33:	89 50 18             	mov    %edx,0x18(%eax)
    current->cr3 = PADDR(mm->pgdir);
c0109e36:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c0109e3b:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0109e3e:	8b 52 0c             	mov    0xc(%edx),%edx
c0109e41:	89 55 b8             	mov    %edx,-0x48(%ebp)
c0109e44:	81 7d b8 ff ff ff bf 	cmpl   $0xbfffffff,-0x48(%ebp)
c0109e4b:	77 17                	ja     c0109e64 <load_icode+0x4dc>
c0109e4d:	ff 75 b8             	pushl  -0x48(%ebp)
c0109e50:	68 50 d9 10 c0       	push   $0xc010d950
c0109e55:	68 95 02 00 00       	push   $0x295
c0109e5a:	68 74 d9 10 c0       	push   $0xc010d974
c0109e5f:	e8 99 65 ff ff       	call   c01003fd <__panic>
c0109e64:	8b 55 b8             	mov    -0x48(%ebp),%edx
c0109e67:	81 c2 00 00 00 40    	add    $0x40000000,%edx
c0109e6d:	89 50 40             	mov    %edx,0x40(%eax)
    lcr3(PADDR(mm->pgdir));
c0109e70:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0109e73:	8b 40 0c             	mov    0xc(%eax),%eax
c0109e76:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c0109e79:	81 7d b4 ff ff ff bf 	cmpl   $0xbfffffff,-0x4c(%ebp)
c0109e80:	77 17                	ja     c0109e99 <load_icode+0x511>
c0109e82:	ff 75 b4             	pushl  -0x4c(%ebp)
c0109e85:	68 50 d9 10 c0       	push   $0xc010d950
c0109e8a:	68 96 02 00 00       	push   $0x296
c0109e8f:	68 74 d9 10 c0       	push   $0xc010d974
c0109e94:	e8 64 65 ff ff       	call   c01003fd <__panic>
c0109e99:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0109e9c:	05 00 00 00 40       	add    $0x40000000,%eax
c0109ea1:	89 45 ac             	mov    %eax,-0x54(%ebp)
c0109ea4:	8b 45 ac             	mov    -0x54(%ebp),%eax
c0109ea7:	0f 22 d8             	mov    %eax,%cr3

    //(6) setup trapframe for user environment
    struct trapframe *tf = current->tf;
c0109eaa:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c0109eaf:	8b 40 3c             	mov    0x3c(%eax),%eax
c0109eb2:	89 45 b0             	mov    %eax,-0x50(%ebp)
    memset(tf, 0, sizeof(struct trapframe));
c0109eb5:	83 ec 04             	sub    $0x4,%esp
c0109eb8:	6a 4c                	push   $0x4c
c0109eba:	6a 00                	push   $0x0
c0109ebc:	ff 75 b0             	pushl  -0x50(%ebp)
c0109ebf:	e8 51 11 00 00       	call   c010b015 <memset>
c0109ec4:	83 c4 10             	add    $0x10,%esp
     *          tf_ds=tf_es=tf_ss should be USER_DS segment
     *          tf_esp should be the top addr of user stack (USTACKTOP)
     *          tf_eip should be the entry point of this binary program (elf->e_entry)
     *          tf_eflags should be set to enable computer to produce Interrupt
     */
    tf->tf_cs = USER_CS;
c0109ec7:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0109eca:	66 c7 40 3c 1b 00    	movw   $0x1b,0x3c(%eax)
    tf->tf_ds = USER_DS;
c0109ed0:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0109ed3:	66 c7 40 2c 23 00    	movw   $0x23,0x2c(%eax)
    tf->tf_es = USER_DS;
c0109ed9:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0109edc:	66 c7 40 28 23 00    	movw   $0x23,0x28(%eax)
    tf->tf_ss = USER_DS;
c0109ee2:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0109ee5:	66 c7 40 48 23 00    	movw   $0x23,0x48(%eax)
    tf->tf_esp = USTACKTOP;
c0109eeb:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0109eee:	c7 40 44 00 00 00 b0 	movl   $0xb0000000,0x44(%eax)
    tf->tf_eip = elf->e_entry;
c0109ef5:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0109ef8:	8b 50 18             	mov    0x18(%eax),%edx
c0109efb:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0109efe:	89 50 38             	mov    %edx,0x38(%eax)
    tf->tf_eflags |= FL_IF;     // enable intr
c0109f01:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0109f04:	8b 40 40             	mov    0x40(%eax),%eax
c0109f07:	80 cc 02             	or     $0x2,%ah
c0109f0a:	89 c2                	mov    %eax,%edx
c0109f0c:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0109f0f:	89 50 40             	mov    %edx,0x40(%eax)
    
    ret = 0;
c0109f12:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
out:
    return ret;
c0109f19:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109f1c:	eb 3c                	jmp    c0109f5a <load_icode+0x5d2>
        if (ph->p_flags & ELF_PF_X) vm_flags |= VM_EXEC;
        if (ph->p_flags & ELF_PF_W) vm_flags |= VM_WRITE;
        if (ph->p_flags & ELF_PF_R) vm_flags |= VM_READ;
        if (vm_flags & VM_WRITE) perm |= PTE_W;
        if ((ret = mm_map(mm, ph->p_va, ph->p_memsz, vm_flags, NULL)) != 0) {
            goto bad_cleanup_mmap;
c0109f1e:	90                   	nop
c0109f1f:	eb 07                	jmp    c0109f28 <load_icode+0x5a0>
     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
        end = ph->p_va + ph->p_filesz;
     //(3.6.1) copy TEXT/DATA section of bianry program
        while (start < end) {
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
                goto bad_cleanup_mmap;
c0109f21:	90                   	nop
c0109f22:	eb 04                	jmp    c0109f28 <load_icode+0x5a0>
            start += size;
            assert((end < la && start == end) || (end >= la && start == la));
        }
        while (start < end) {
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
                goto bad_cleanup_mmap;
c0109f24:	90                   	nop
c0109f25:	eb 01                	jmp    c0109f28 <load_icode+0x5a0>
        }
    }
    //(4) build user stack memory
    vm_flags = VM_READ | VM_WRITE | VM_STACK;
    if ((ret = mm_map(mm, USTACKTOP - USTACKSIZE, USTACKSIZE, vm_flags, NULL)) != 0) {
        goto bad_cleanup_mmap;
c0109f27:	90                   	nop
    
    ret = 0;
out:
    return ret;
bad_cleanup_mmap:
    exit_mmap(mm);
c0109f28:	83 ec 0c             	sub    $0xc,%esp
c0109f2b:	ff 75 d0             	pushl  -0x30(%ebp)
c0109f2e:	e8 0a 9d ff ff       	call   c0103c3d <exit_mmap>
c0109f33:	83 c4 10             	add    $0x10,%esp
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
c0109f36:	83 ec 0c             	sub    $0xc,%esp
c0109f39:	ff 75 d0             	pushl  -0x30(%ebp)
c0109f3c:	e8 61 f5 ff ff       	call   c01094a2 <put_pgdir>
c0109f41:	83 c4 10             	add    $0x10,%esp
c0109f44:	eb 01                	jmp    c0109f47 <load_icode+0x5bf>
    if ((mm = mm_create()) == NULL) {
        goto bad_mm;
    }
    //(2) create a new PDT, and mm->pgdir= kernel virtual addr of PDT
    if (setup_pgdir(mm) != 0) {
        goto bad_pgdir_cleanup_mm;
c0109f46:	90                   	nop
bad_cleanup_mmap:
    exit_mmap(mm);
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
c0109f47:	83 ec 0c             	sub    $0xc,%esp
c0109f4a:	ff 75 d0             	pushl  -0x30(%ebp)
c0109f4d:	e8 5d 9a ff ff       	call   c01039af <mm_destroy>
c0109f52:	83 c4 10             	add    $0x10,%esp
bad_mm:
    goto out;
c0109f55:	eb c2                	jmp    c0109f19 <load_icode+0x591>

    int ret = -E_NO_MEM;
    struct mm_struct *mm;
    //(1) create a new mm for current process
    if ((mm = mm_create()) == NULL) {
        goto bad_mm;
c0109f57:	90                   	nop
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
bad_mm:
    goto out;
c0109f58:	eb bf                	jmp    c0109f19 <load_icode+0x591>
}
c0109f5a:	c9                   	leave  
c0109f5b:	c3                   	ret    

c0109f5c <do_execve>:

// do_execve - call exit_mmap(mm)&put_pgdir(mm) to reclaim memory space of current process
//           - call load_icode to setup new memory space accroding binary prog.
int
do_execve(const char *name, size_t len, unsigned char *binary, size_t size) {
c0109f5c:	55                   	push   %ebp
c0109f5d:	89 e5                	mov    %esp,%ebp
c0109f5f:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = current->mm;
c0109f62:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c0109f67:	8b 40 18             	mov    0x18(%eax),%eax
c0109f6a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!user_mem_check(mm, (uintptr_t)name, len, 0)) {
c0109f6d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f70:	6a 00                	push   $0x0
c0109f72:	ff 75 0c             	pushl  0xc(%ebp)
c0109f75:	50                   	push   %eax
c0109f76:	ff 75 f4             	pushl  -0xc(%ebp)
c0109f79:	e8 50 a6 ff ff       	call   c01045ce <user_mem_check>
c0109f7e:	83 c4 10             	add    $0x10,%esp
c0109f81:	85 c0                	test   %eax,%eax
c0109f83:	75 0a                	jne    c0109f8f <do_execve+0x33>
        return -E_INVAL;
c0109f85:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0109f8a:	e9 ed 00 00 00       	jmp    c010a07c <do_execve+0x120>
    }
    if (len > PROC_NAME_LEN) {
c0109f8f:	83 7d 0c 0f          	cmpl   $0xf,0xc(%ebp)
c0109f93:	76 07                	jbe    c0109f9c <do_execve+0x40>
        len = PROC_NAME_LEN;
c0109f95:	c7 45 0c 0f 00 00 00 	movl   $0xf,0xc(%ebp)
    }

    char local_name[PROC_NAME_LEN + 1];
    memset(local_name, 0, sizeof(local_name));
c0109f9c:	83 ec 04             	sub    $0x4,%esp
c0109f9f:	6a 10                	push   $0x10
c0109fa1:	6a 00                	push   $0x0
c0109fa3:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0109fa6:	50                   	push   %eax
c0109fa7:	e8 69 10 00 00       	call   c010b015 <memset>
c0109fac:	83 c4 10             	add    $0x10,%esp
    memcpy(local_name, name, len);
c0109faf:	83 ec 04             	sub    $0x4,%esp
c0109fb2:	ff 75 0c             	pushl  0xc(%ebp)
c0109fb5:	ff 75 08             	pushl  0x8(%ebp)
c0109fb8:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0109fbb:	50                   	push   %eax
c0109fbc:	e8 37 11 00 00       	call   c010b0f8 <memcpy>
c0109fc1:	83 c4 10             	add    $0x10,%esp

    if (mm != NULL) {
c0109fc4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109fc8:	74 56                	je     c010a020 <do_execve+0xc4>
        lcr3(boot_cr3);
c0109fca:	a1 b4 31 1b c0       	mov    0xc01b31b4,%eax
c0109fcf:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0109fd2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109fd5:	0f 22 d8             	mov    %eax,%cr3
        if (mm_count_dec(mm) == 0) {
c0109fd8:	83 ec 0c             	sub    $0xc,%esp
c0109fdb:	ff 75 f4             	pushl  -0xc(%ebp)
c0109fde:	e8 5d ed ff ff       	call   c0108d40 <mm_count_dec>
c0109fe3:	83 c4 10             	add    $0x10,%esp
c0109fe6:	85 c0                	test   %eax,%eax
c0109fe8:	75 2a                	jne    c010a014 <do_execve+0xb8>
            exit_mmap(mm);
c0109fea:	83 ec 0c             	sub    $0xc,%esp
c0109fed:	ff 75 f4             	pushl  -0xc(%ebp)
c0109ff0:	e8 48 9c ff ff       	call   c0103c3d <exit_mmap>
c0109ff5:	83 c4 10             	add    $0x10,%esp
            put_pgdir(mm);
c0109ff8:	83 ec 0c             	sub    $0xc,%esp
c0109ffb:	ff 75 f4             	pushl  -0xc(%ebp)
c0109ffe:	e8 9f f4 ff ff       	call   c01094a2 <put_pgdir>
c010a003:	83 c4 10             	add    $0x10,%esp
            mm_destroy(mm);
c010a006:	83 ec 0c             	sub    $0xc,%esp
c010a009:	ff 75 f4             	pushl  -0xc(%ebp)
c010a00c:	e8 9e 99 ff ff       	call   c01039af <mm_destroy>
c010a011:	83 c4 10             	add    $0x10,%esp
        }
        current->mm = NULL;
c010a014:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010a019:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    int ret;
    if ((ret = load_icode(binary, size)) != 0) {
c010a020:	83 ec 08             	sub    $0x8,%esp
c010a023:	ff 75 14             	pushl  0x14(%ebp)
c010a026:	ff 75 10             	pushl  0x10(%ebp)
c010a029:	e8 5a f9 ff ff       	call   c0109988 <load_icode>
c010a02e:	83 c4 10             	add    $0x10,%esp
c010a031:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010a034:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010a038:	75 1c                	jne    c010a056 <do_execve+0xfa>
        goto execve_exit;
    }
    set_proc_name(current, local_name);
c010a03a:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010a03f:	83 ec 08             	sub    $0x8,%esp
c010a042:	8d 55 dc             	lea    -0x24(%ebp),%edx
c010a045:	52                   	push   %edx
c010a046:	50                   	push   %eax
c010a047:	e8 aa ee ff ff       	call   c0108ef6 <set_proc_name>
c010a04c:	83 c4 10             	add    $0x10,%esp
    return 0;
c010a04f:	b8 00 00 00 00       	mov    $0x0,%eax
c010a054:	eb 26                	jmp    c010a07c <do_execve+0x120>
        }
        current->mm = NULL;
    }
    int ret;
    if ((ret = load_icode(binary, size)) != 0) {
        goto execve_exit;
c010a056:	90                   	nop
    }
    set_proc_name(current, local_name);
    return 0;

execve_exit:
    do_exit(ret);
c010a057:	83 ec 0c             	sub    $0xc,%esp
c010a05a:	ff 75 f0             	pushl  -0x10(%ebp)
c010a05d:	e8 56 f7 ff ff       	call   c01097b8 <do_exit>
c010a062:	83 c4 10             	add    $0x10,%esp
    panic("already exit: %e.\n", ret);
c010a065:	ff 75 f0             	pushl  -0x10(%ebp)
c010a068:	68 6b db 10 c0       	push   $0xc010db6b
c010a06d:	68 db 02 00 00       	push   $0x2db
c010a072:	68 74 d9 10 c0       	push   $0xc010d974
c010a077:	e8 81 63 ff ff       	call   c01003fd <__panic>
}
c010a07c:	c9                   	leave  
c010a07d:	c3                   	ret    

c010a07e <do_yield>:

// do_yield - ask the scheduler to reschedule
int
do_yield(void) {
c010a07e:	55                   	push   %ebp
c010a07f:	89 e5                	mov    %esp,%ebp
    current->need_resched = 1;
c010a081:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010a086:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    return 0;
c010a08d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a092:	5d                   	pop    %ebp
c010a093:	c3                   	ret    

c010a094 <do_wait>:

// do_wait - wait one OR any children with PROC_ZOMBIE state, and free memory space of kernel stack
//         - proc struct of this child.
// NOTE: only after do_wait function, all resources of the child proces are free.
int
do_wait(int pid, int *code_store) {
c010a094:	55                   	push   %ebp
c010a095:	89 e5                	mov    %esp,%ebp
c010a097:	83 ec 18             	sub    $0x18,%esp
    struct mm_struct *mm = current->mm;
c010a09a:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010a09f:	8b 40 18             	mov    0x18(%eax),%eax
c010a0a2:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (code_store != NULL) {
c010a0a5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010a0a9:	74 21                	je     c010a0cc <do_wait+0x38>
        if (!user_mem_check(mm, (uintptr_t)code_store, sizeof(int), 1)) {
c010a0ab:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a0ae:	6a 01                	push   $0x1
c010a0b0:	6a 04                	push   $0x4
c010a0b2:	50                   	push   %eax
c010a0b3:	ff 75 ec             	pushl  -0x14(%ebp)
c010a0b6:	e8 13 a5 ff ff       	call   c01045ce <user_mem_check>
c010a0bb:	83 c4 10             	add    $0x10,%esp
c010a0be:	85 c0                	test   %eax,%eax
c010a0c0:	75 0a                	jne    c010a0cc <do_wait+0x38>
            return -E_INVAL;
c010a0c2:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010a0c7:	e9 54 01 00 00       	jmp    c010a220 <do_wait+0x18c>
    }

    struct proc_struct *proc;
    bool intr_flag, haskid;
repeat:
    haskid = 0;
c010a0cc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    if (pid != 0) {
c010a0d3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a0d7:	74 39                	je     c010a112 <do_wait+0x7e>
        proc = find_proc(pid);
c010a0d9:	83 ec 0c             	sub    $0xc,%esp
c010a0dc:	ff 75 08             	pushl  0x8(%ebp)
c010a0df:	e8 e7 f1 ff ff       	call   c01092cb <find_proc>
c010a0e4:	83 c4 10             	add    $0x10,%esp
c010a0e7:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (proc != NULL && proc->parent == current) {
c010a0ea:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a0ee:	74 4f                	je     c010a13f <do_wait+0xab>
c010a0f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a0f3:	8b 50 14             	mov    0x14(%eax),%edx
c010a0f6:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010a0fb:	39 c2                	cmp    %eax,%edx
c010a0fd:	75 40                	jne    c010a13f <do_wait+0xab>
            haskid = 1;
c010a0ff:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c010a106:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a109:	8b 00                	mov    (%eax),%eax
c010a10b:	83 f8 03             	cmp    $0x3,%eax
c010a10e:	75 2f                	jne    c010a13f <do_wait+0xab>
                goto found;
c010a110:	eb 7f                	jmp    c010a191 <do_wait+0xfd>
            }
        }
    }
    else {
        proc = current->cptr;
c010a112:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010a117:	8b 40 70             	mov    0x70(%eax),%eax
c010a11a:	89 45 f4             	mov    %eax,-0xc(%ebp)
        for (; proc != NULL; proc = proc->optr) {
c010a11d:	eb 1a                	jmp    c010a139 <do_wait+0xa5>
            haskid = 1;
c010a11f:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c010a126:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a129:	8b 00                	mov    (%eax),%eax
c010a12b:	83 f8 03             	cmp    $0x3,%eax
c010a12e:	74 60                	je     c010a190 <do_wait+0xfc>
            }
        }
    }
    else {
        proc = current->cptr;
        for (; proc != NULL; proc = proc->optr) {
c010a130:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a133:	8b 40 78             	mov    0x78(%eax),%eax
c010a136:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a139:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a13d:	75 e0                	jne    c010a11f <do_wait+0x8b>
            if (proc->state == PROC_ZOMBIE) {
                goto found;
            }
        }
    }
    if (haskid) {
c010a13f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010a143:	74 41                	je     c010a186 <do_wait+0xf2>
        current->state = PROC_SLEEPING;
c010a145:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010a14a:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        current->wait_state = WT_CHILD;
c010a150:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010a155:	c7 40 6c 01 00 00 80 	movl   $0x80000001,0x6c(%eax)
        schedule();
c010a15c:	e8 d1 06 00 00       	call   c010a832 <schedule>
        if (current->flags & PF_EXITING) {
c010a161:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010a166:	8b 40 44             	mov    0x44(%eax),%eax
c010a169:	83 e0 01             	and    $0x1,%eax
c010a16c:	85 c0                	test   %eax,%eax
c010a16e:	0f 84 58 ff ff ff    	je     c010a0cc <do_wait+0x38>
            do_exit(-E_KILLED);
c010a174:	83 ec 0c             	sub    $0xc,%esp
c010a177:	6a f7                	push   $0xfffffff7
c010a179:	e8 3a f6 ff ff       	call   c01097b8 <do_exit>
c010a17e:	83 c4 10             	add    $0x10,%esp
        }
        goto repeat;
c010a181:	e9 46 ff ff ff       	jmp    c010a0cc <do_wait+0x38>
    }
    return -E_BAD_PROC;
c010a186:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
c010a18b:	e9 90 00 00 00       	jmp    c010a220 <do_wait+0x18c>
    else {
        proc = current->cptr;
        for (; proc != NULL; proc = proc->optr) {
            haskid = 1;
            if (proc->state == PROC_ZOMBIE) {
                goto found;
c010a190:	90                   	nop
        goto repeat;
    }
    return -E_BAD_PROC;

found:
    if (proc == idleproc || proc == initproc) {
c010a191:	a1 20 10 1b c0       	mov    0xc01b1020,%eax
c010a196:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010a199:	74 0a                	je     c010a1a5 <do_wait+0x111>
c010a19b:	a1 24 10 1b c0       	mov    0xc01b1024,%eax
c010a1a0:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010a1a3:	75 17                	jne    c010a1bc <do_wait+0x128>
        panic("wait idleproc or initproc.\n");
c010a1a5:	83 ec 04             	sub    $0x4,%esp
c010a1a8:	68 7e db 10 c0       	push   $0xc010db7e
c010a1ad:	68 14 03 00 00       	push   $0x314
c010a1b2:	68 74 d9 10 c0       	push   $0xc010d974
c010a1b7:	e8 41 62 ff ff       	call   c01003fd <__panic>
    }
    if (code_store != NULL) {
c010a1bc:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010a1c0:	74 0b                	je     c010a1cd <do_wait+0x139>
        *code_store = proc->exit_code;
c010a1c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a1c5:	8b 50 68             	mov    0x68(%eax),%edx
c010a1c8:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a1cb:	89 10                	mov    %edx,(%eax)
    }
    local_intr_save(intr_flag);
c010a1cd:	e8 c5 e9 ff ff       	call   c0108b97 <__intr_save>
c010a1d2:	89 45 e8             	mov    %eax,-0x18(%ebp)
    {
        unhash_proc(proc);
c010a1d5:	83 ec 0c             	sub    $0xc,%esp
c010a1d8:	ff 75 f4             	pushl  -0xc(%ebp)
c010a1db:	e8 b7 f0 ff ff       	call   c0109297 <unhash_proc>
c010a1e0:	83 c4 10             	add    $0x10,%esp
        remove_links(proc);
c010a1e3:	83 ec 0c             	sub    $0xc,%esp
c010a1e6:	ff 75 f4             	pushl  -0xc(%ebp)
c010a1e9:	e8 18 ee ff ff       	call   c0109006 <remove_links>
c010a1ee:	83 c4 10             	add    $0x10,%esp
    }
    local_intr_restore(intr_flag);
c010a1f1:	83 ec 0c             	sub    $0xc,%esp
c010a1f4:	ff 75 e8             	pushl  -0x18(%ebp)
c010a1f7:	e8 c5 e9 ff ff       	call   c0108bc1 <__intr_restore>
c010a1fc:	83 c4 10             	add    $0x10,%esp
    put_kstack(proc);
c010a1ff:	83 ec 0c             	sub    $0xc,%esp
c010a202:	ff 75 f4             	pushl  -0xc(%ebp)
c010a205:	e8 d6 f1 ff ff       	call   c01093e0 <put_kstack>
c010a20a:	83 c4 10             	add    $0x10,%esp
    kfree(proc);
c010a20d:	83 ec 0c             	sub    $0xc,%esp
c010a210:	ff 75 f4             	pushl  -0xc(%ebp)
c010a213:	e8 ae af ff ff       	call   c01051c6 <kfree>
c010a218:	83 c4 10             	add    $0x10,%esp
    return 0;
c010a21b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a220:	c9                   	leave  
c010a221:	c3                   	ret    

c010a222 <do_kill>:

// do_kill - kill process with pid by set this process's flags with PF_EXITING
int
do_kill(int pid) {
c010a222:	55                   	push   %ebp
c010a223:	89 e5                	mov    %esp,%ebp
c010a225:	83 ec 18             	sub    $0x18,%esp
    struct proc_struct *proc;
    if ((proc = find_proc(pid)) != NULL) {
c010a228:	83 ec 0c             	sub    $0xc,%esp
c010a22b:	ff 75 08             	pushl  0x8(%ebp)
c010a22e:	e8 98 f0 ff ff       	call   c01092cb <find_proc>
c010a233:	83 c4 10             	add    $0x10,%esp
c010a236:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a239:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a23d:	74 44                	je     c010a283 <do_kill+0x61>
        if (!(proc->flags & PF_EXITING)) {
c010a23f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a242:	8b 40 44             	mov    0x44(%eax),%eax
c010a245:	83 e0 01             	and    $0x1,%eax
c010a248:	85 c0                	test   %eax,%eax
c010a24a:	75 30                	jne    c010a27c <do_kill+0x5a>
            proc->flags |= PF_EXITING;
c010a24c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a24f:	8b 40 44             	mov    0x44(%eax),%eax
c010a252:	83 c8 01             	or     $0x1,%eax
c010a255:	89 c2                	mov    %eax,%edx
c010a257:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a25a:	89 50 44             	mov    %edx,0x44(%eax)
            if (proc->wait_state & WT_INTERRUPTED) {
c010a25d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a260:	8b 40 6c             	mov    0x6c(%eax),%eax
c010a263:	85 c0                	test   %eax,%eax
c010a265:	79 0e                	jns    c010a275 <do_kill+0x53>
                wakeup_proc(proc);
c010a267:	83 ec 0c             	sub    $0xc,%esp
c010a26a:	ff 75 f4             	pushl  -0xc(%ebp)
c010a26d:	e8 33 05 00 00       	call   c010a7a5 <wakeup_proc>
c010a272:	83 c4 10             	add    $0x10,%esp
            }
            return 0;
c010a275:	b8 00 00 00 00       	mov    $0x0,%eax
c010a27a:	eb 0c                	jmp    c010a288 <do_kill+0x66>
        }
        return -E_KILLED;
c010a27c:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
c010a281:	eb 05                	jmp    c010a288 <do_kill+0x66>
    }
    return -E_INVAL;
c010a283:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c010a288:	c9                   	leave  
c010a289:	c3                   	ret    

c010a28a <kernel_execve>:

// kernel_execve - do SYS_exec syscall to exec a user program called by user_main kernel_thread
static int
kernel_execve(const char *name, unsigned char *binary, size_t size) {
c010a28a:	55                   	push   %ebp
c010a28b:	89 e5                	mov    %esp,%ebp
c010a28d:	57                   	push   %edi
c010a28e:	56                   	push   %esi
c010a28f:	53                   	push   %ebx
c010a290:	83 ec 1c             	sub    $0x1c,%esp
    int ret, len = strlen(name);
c010a293:	83 ec 0c             	sub    $0xc,%esp
c010a296:	ff 75 08             	pushl  0x8(%ebp)
c010a299:	e8 46 0a 00 00       	call   c010ace4 <strlen>
c010a29e:	83 c4 10             	add    $0x10,%esp
c010a2a1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    asm volatile (
c010a2a4:	b8 04 00 00 00       	mov    $0x4,%eax
c010a2a9:	8b 55 08             	mov    0x8(%ebp),%edx
c010a2ac:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c010a2af:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c010a2b2:	8b 75 10             	mov    0x10(%ebp),%esi
c010a2b5:	89 f7                	mov    %esi,%edi
c010a2b7:	cd 80                	int    $0x80
c010a2b9:	89 45 e0             	mov    %eax,-0x20(%ebp)
        "int %1;"
        : "=a" (ret)
        : "i" (T_SYSCALL), "0" (SYS_exec), "d" (name), "c" (len), "b" (binary), "D" (size)
        : "memory");
    return ret;
c010a2bc:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
c010a2bf:	8d 65 f4             	lea    -0xc(%ebp),%esp
c010a2c2:	5b                   	pop    %ebx
c010a2c3:	5e                   	pop    %esi
c010a2c4:	5f                   	pop    %edi
c010a2c5:	5d                   	pop    %ebp
c010a2c6:	c3                   	ret    

c010a2c7 <user_main>:

#define KERNEL_EXECVE2(x, xstart, xsize)        __KERNEL_EXECVE2(x, xstart, xsize)

// user_main - kernel thread used to exec a user program
static int
user_main(void *arg) {
c010a2c7:	55                   	push   %ebp
c010a2c8:	89 e5                	mov    %esp,%ebp
c010a2ca:	83 ec 08             	sub    $0x8,%esp
#ifdef TEST
    KERNEL_EXECVE2(TEST, TESTSTART, TESTSIZE);
c010a2cd:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010a2d2:	8b 40 04             	mov    0x4(%eax),%eax
c010a2d5:	83 ec 04             	sub    $0x4,%esp
c010a2d8:	68 9a db 10 c0       	push   $0xc010db9a
c010a2dd:	50                   	push   %eax
c010a2de:	68 a4 db 10 c0       	push   $0xc010dba4
c010a2e3:	e8 af 5f ff ff       	call   c0100297 <cprintf>
c010a2e8:	83 c4 10             	add    $0x10,%esp
c010a2eb:	b8 60 79 00 00       	mov    $0x7960,%eax
c010a2f0:	83 ec 04             	sub    $0x4,%esp
c010a2f3:	50                   	push   %eax
c010a2f4:	68 ac 1c 16 c0       	push   $0xc0161cac
c010a2f9:	68 9a db 10 c0       	push   $0xc010db9a
c010a2fe:	e8 87 ff ff ff       	call   c010a28a <kernel_execve>
c010a303:	83 c4 10             	add    $0x10,%esp
#else
    KERNEL_EXECVE(waitkill);
#endif
    panic("user_main execve failed.\n");
c010a306:	83 ec 04             	sub    $0x4,%esp
c010a309:	68 cb db 10 c0       	push   $0xc010dbcb
c010a30e:	68 5d 03 00 00       	push   $0x35d
c010a313:	68 74 d9 10 c0       	push   $0xc010d974
c010a318:	e8 e0 60 ff ff       	call   c01003fd <__panic>

c010a31d <init_main>:
}

// init_main - the second kernel thread used to create user_main kernel threads
static int
init_main(void *arg) {
c010a31d:	55                   	push   %ebp
c010a31e:	89 e5                	mov    %esp,%ebp
c010a320:	83 ec 28             	sub    $0x28,%esp
    size_t nr_free_pages_store = nr_free_pages();
c010a323:	e8 51 ce ff ff       	call   c0107179 <nr_free_pages>
c010a328:	89 45 f4             	mov    %eax,-0xc(%ebp)
    size_t kernel_allocated_store = kallocated();
c010a32b:	e8 61 ad ff ff       	call   c0105091 <kallocated>
c010a330:	89 45 f0             	mov    %eax,-0x10(%ebp)

    int pid = kernel_thread(user_main, NULL, 0);
c010a333:	83 ec 04             	sub    $0x4,%esp
c010a336:	6a 00                	push   $0x0
c010a338:	6a 00                	push   $0x0
c010a33a:	68 c7 a2 10 c0       	push   $0xc010a2c7
c010a33f:	e8 f7 ef ff ff       	call   c010933b <kernel_thread>
c010a344:	83 c4 10             	add    $0x10,%esp
c010a347:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (pid <= 0) {
c010a34a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010a34e:	7f 1c                	jg     c010a36c <init_main+0x4f>
        panic("create user_main failed.\n");
c010a350:	83 ec 04             	sub    $0x4,%esp
c010a353:	68 e5 db 10 c0       	push   $0xc010dbe5
c010a358:	68 68 03 00 00       	push   $0x368
c010a35d:	68 74 d9 10 c0       	push   $0xc010d974
c010a362:	e8 96 60 ff ff       	call   c01003fd <__panic>
    }

    while (do_wait(0, NULL) == 0) {
        schedule();
c010a367:	e8 c6 04 00 00       	call   c010a832 <schedule>
    int pid = kernel_thread(user_main, NULL, 0);
    if (pid <= 0) {
        panic("create user_main failed.\n");
    }

    while (do_wait(0, NULL) == 0) {
c010a36c:	83 ec 08             	sub    $0x8,%esp
c010a36f:	6a 00                	push   $0x0
c010a371:	6a 00                	push   $0x0
c010a373:	e8 1c fd ff ff       	call   c010a094 <do_wait>
c010a378:	83 c4 10             	add    $0x10,%esp
c010a37b:	85 c0                	test   %eax,%eax
c010a37d:	74 e8                	je     c010a367 <init_main+0x4a>
        schedule();
    }

    cprintf("all user-mode processes have quit.\n");
c010a37f:	83 ec 0c             	sub    $0xc,%esp
c010a382:	68 00 dc 10 c0       	push   $0xc010dc00
c010a387:	e8 0b 5f ff ff       	call   c0100297 <cprintf>
c010a38c:	83 c4 10             	add    $0x10,%esp
    assert(initproc->cptr == NULL && initproc->yptr == NULL && initproc->optr == NULL);
c010a38f:	a1 24 10 1b c0       	mov    0xc01b1024,%eax
c010a394:	8b 40 70             	mov    0x70(%eax),%eax
c010a397:	85 c0                	test   %eax,%eax
c010a399:	75 18                	jne    c010a3b3 <init_main+0x96>
c010a39b:	a1 24 10 1b c0       	mov    0xc01b1024,%eax
c010a3a0:	8b 40 74             	mov    0x74(%eax),%eax
c010a3a3:	85 c0                	test   %eax,%eax
c010a3a5:	75 0c                	jne    c010a3b3 <init_main+0x96>
c010a3a7:	a1 24 10 1b c0       	mov    0xc01b1024,%eax
c010a3ac:	8b 40 78             	mov    0x78(%eax),%eax
c010a3af:	85 c0                	test   %eax,%eax
c010a3b1:	74 19                	je     c010a3cc <init_main+0xaf>
c010a3b3:	68 24 dc 10 c0       	push   $0xc010dc24
c010a3b8:	68 a1 d9 10 c0       	push   $0xc010d9a1
c010a3bd:	68 70 03 00 00       	push   $0x370
c010a3c2:	68 74 d9 10 c0       	push   $0xc010d974
c010a3c7:	e8 31 60 ff ff       	call   c01003fd <__panic>
    assert(nr_process == 2);
c010a3cc:	a1 40 30 1b c0       	mov    0xc01b3040,%eax
c010a3d1:	83 f8 02             	cmp    $0x2,%eax
c010a3d4:	74 19                	je     c010a3ef <init_main+0xd2>
c010a3d6:	68 6f dc 10 c0       	push   $0xc010dc6f
c010a3db:	68 a1 d9 10 c0       	push   $0xc010d9a1
c010a3e0:	68 71 03 00 00       	push   $0x371
c010a3e5:	68 74 d9 10 c0       	push   $0xc010d974
c010a3ea:	e8 0e 60 ff ff       	call   c01003fd <__panic>
c010a3ef:	c7 45 e4 bc 31 1b c0 	movl   $0xc01b31bc,-0x1c(%ebp)
c010a3f6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a3f9:	8b 40 04             	mov    0x4(%eax),%eax
    assert(list_next(&proc_list) == &(initproc->list_link));
c010a3fc:	8b 15 24 10 1b c0    	mov    0xc01b1024,%edx
c010a402:	83 c2 58             	add    $0x58,%edx
c010a405:	39 d0                	cmp    %edx,%eax
c010a407:	74 19                	je     c010a422 <init_main+0x105>
c010a409:	68 80 dc 10 c0       	push   $0xc010dc80
c010a40e:	68 a1 d9 10 c0       	push   $0xc010d9a1
c010a413:	68 72 03 00 00       	push   $0x372
c010a418:	68 74 d9 10 c0       	push   $0xc010d974
c010a41d:	e8 db 5f ff ff       	call   c01003fd <__panic>
c010a422:	c7 45 e8 bc 31 1b c0 	movl   $0xc01b31bc,-0x18(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c010a429:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a42c:	8b 00                	mov    (%eax),%eax
    assert(list_prev(&proc_list) == &(initproc->list_link));
c010a42e:	8b 15 24 10 1b c0    	mov    0xc01b1024,%edx
c010a434:	83 c2 58             	add    $0x58,%edx
c010a437:	39 d0                	cmp    %edx,%eax
c010a439:	74 19                	je     c010a454 <init_main+0x137>
c010a43b:	68 b0 dc 10 c0       	push   $0xc010dcb0
c010a440:	68 a1 d9 10 c0       	push   $0xc010d9a1
c010a445:	68 73 03 00 00       	push   $0x373
c010a44a:	68 74 d9 10 c0       	push   $0xc010d974
c010a44f:	e8 a9 5f ff ff       	call   c01003fd <__panic>

    cprintf("init check memory pass.\n");
c010a454:	83 ec 0c             	sub    $0xc,%esp
c010a457:	68 e0 dc 10 c0       	push   $0xc010dce0
c010a45c:	e8 36 5e ff ff       	call   c0100297 <cprintf>
c010a461:	83 c4 10             	add    $0x10,%esp
    return 0;
c010a464:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a469:	c9                   	leave  
c010a46a:	c3                   	ret    

c010a46b <proc_init>:

// proc_init - set up the first kernel thread idleproc "idle" by itself and 
//           - create the second kernel thread init_main
void
proc_init(void) {
c010a46b:	55                   	push   %ebp
c010a46c:	89 e5                	mov    %esp,%ebp
c010a46e:	83 ec 18             	sub    $0x18,%esp
c010a471:	c7 45 e8 bc 31 1b c0 	movl   $0xc01b31bc,-0x18(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010a478:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a47b:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010a47e:	89 50 04             	mov    %edx,0x4(%eax)
c010a481:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a484:	8b 50 04             	mov    0x4(%eax),%edx
c010a487:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a48a:	89 10                	mov    %edx,(%eax)
    int i;

    list_init(&proc_list);
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c010a48c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010a493:	eb 26                	jmp    c010a4bb <proc_init+0x50>
        list_init(hash_list + i);
c010a495:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a498:	c1 e0 03             	shl    $0x3,%eax
c010a49b:	05 40 10 1b c0       	add    $0xc01b1040,%eax
c010a4a0:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010a4a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a4a6:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010a4a9:	89 50 04             	mov    %edx,0x4(%eax)
c010a4ac:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a4af:	8b 50 04             	mov    0x4(%eax),%edx
c010a4b2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a4b5:	89 10                	mov    %edx,(%eax)
void
proc_init(void) {
    int i;

    list_init(&proc_list);
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c010a4b7:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010a4bb:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
c010a4c2:	7e d1                	jle    c010a495 <proc_init+0x2a>
        list_init(hash_list + i);
    }

    if ((idleproc = alloc_proc()) == NULL) {
c010a4c4:	e8 d3 e8 ff ff       	call   c0108d9c <alloc_proc>
c010a4c9:	a3 20 10 1b c0       	mov    %eax,0xc01b1020
c010a4ce:	a1 20 10 1b c0       	mov    0xc01b1020,%eax
c010a4d3:	85 c0                	test   %eax,%eax
c010a4d5:	75 17                	jne    c010a4ee <proc_init+0x83>
        panic("cannot alloc idleproc.\n");
c010a4d7:	83 ec 04             	sub    $0x4,%esp
c010a4da:	68 f9 dc 10 c0       	push   $0xc010dcf9
c010a4df:	68 85 03 00 00       	push   $0x385
c010a4e4:	68 74 d9 10 c0       	push   $0xc010d974
c010a4e9:	e8 0f 5f ff ff       	call   c01003fd <__panic>
    }

    idleproc->pid = 0;
c010a4ee:	a1 20 10 1b c0       	mov    0xc01b1020,%eax
c010a4f3:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    idleproc->state = PROC_RUNNABLE;
c010a4fa:	a1 20 10 1b c0       	mov    0xc01b1020,%eax
c010a4ff:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    idleproc->kstack = (uintptr_t)bootstack;
c010a505:	a1 20 10 1b c0       	mov    0xc01b1020,%eax
c010a50a:	ba 00 a0 12 c0       	mov    $0xc012a000,%edx
c010a50f:	89 50 0c             	mov    %edx,0xc(%eax)
    idleproc->need_resched = 1;
c010a512:	a1 20 10 1b c0       	mov    0xc01b1020,%eax
c010a517:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    set_proc_name(idleproc, "idle");
c010a51e:	a1 20 10 1b c0       	mov    0xc01b1020,%eax
c010a523:	83 ec 08             	sub    $0x8,%esp
c010a526:	68 11 dd 10 c0       	push   $0xc010dd11
c010a52b:	50                   	push   %eax
c010a52c:	e8 c5 e9 ff ff       	call   c0108ef6 <set_proc_name>
c010a531:	83 c4 10             	add    $0x10,%esp
    nr_process ++;
c010a534:	a1 40 30 1b c0       	mov    0xc01b3040,%eax
c010a539:	83 c0 01             	add    $0x1,%eax
c010a53c:	a3 40 30 1b c0       	mov    %eax,0xc01b3040

    current = idleproc;
c010a541:	a1 20 10 1b c0       	mov    0xc01b1020,%eax
c010a546:	a3 28 10 1b c0       	mov    %eax,0xc01b1028

    int pid = kernel_thread(init_main, NULL, 0);
c010a54b:	83 ec 04             	sub    $0x4,%esp
c010a54e:	6a 00                	push   $0x0
c010a550:	6a 00                	push   $0x0
c010a552:	68 1d a3 10 c0       	push   $0xc010a31d
c010a557:	e8 df ed ff ff       	call   c010933b <kernel_thread>
c010a55c:	83 c4 10             	add    $0x10,%esp
c010a55f:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (pid <= 0) {
c010a562:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010a566:	7f 17                	jg     c010a57f <proc_init+0x114>
        panic("create init_main failed.\n");
c010a568:	83 ec 04             	sub    $0x4,%esp
c010a56b:	68 16 dd 10 c0       	push   $0xc010dd16
c010a570:	68 93 03 00 00       	push   $0x393
c010a575:	68 74 d9 10 c0       	push   $0xc010d974
c010a57a:	e8 7e 5e ff ff       	call   c01003fd <__panic>
    }

    initproc = find_proc(pid);
c010a57f:	83 ec 0c             	sub    $0xc,%esp
c010a582:	ff 75 ec             	pushl  -0x14(%ebp)
c010a585:	e8 41 ed ff ff       	call   c01092cb <find_proc>
c010a58a:	83 c4 10             	add    $0x10,%esp
c010a58d:	a3 24 10 1b c0       	mov    %eax,0xc01b1024
    set_proc_name(initproc, "init");
c010a592:	a1 24 10 1b c0       	mov    0xc01b1024,%eax
c010a597:	83 ec 08             	sub    $0x8,%esp
c010a59a:	68 30 dd 10 c0       	push   $0xc010dd30
c010a59f:	50                   	push   %eax
c010a5a0:	e8 51 e9 ff ff       	call   c0108ef6 <set_proc_name>
c010a5a5:	83 c4 10             	add    $0x10,%esp

    assert(idleproc != NULL && idleproc->pid == 0);
c010a5a8:	a1 20 10 1b c0       	mov    0xc01b1020,%eax
c010a5ad:	85 c0                	test   %eax,%eax
c010a5af:	74 0c                	je     c010a5bd <proc_init+0x152>
c010a5b1:	a1 20 10 1b c0       	mov    0xc01b1020,%eax
c010a5b6:	8b 40 04             	mov    0x4(%eax),%eax
c010a5b9:	85 c0                	test   %eax,%eax
c010a5bb:	74 19                	je     c010a5d6 <proc_init+0x16b>
c010a5bd:	68 38 dd 10 c0       	push   $0xc010dd38
c010a5c2:	68 a1 d9 10 c0       	push   $0xc010d9a1
c010a5c7:	68 99 03 00 00       	push   $0x399
c010a5cc:	68 74 d9 10 c0       	push   $0xc010d974
c010a5d1:	e8 27 5e ff ff       	call   c01003fd <__panic>
    assert(initproc != NULL && initproc->pid == 1);
c010a5d6:	a1 24 10 1b c0       	mov    0xc01b1024,%eax
c010a5db:	85 c0                	test   %eax,%eax
c010a5dd:	74 0d                	je     c010a5ec <proc_init+0x181>
c010a5df:	a1 24 10 1b c0       	mov    0xc01b1024,%eax
c010a5e4:	8b 40 04             	mov    0x4(%eax),%eax
c010a5e7:	83 f8 01             	cmp    $0x1,%eax
c010a5ea:	74 19                	je     c010a605 <proc_init+0x19a>
c010a5ec:	68 60 dd 10 c0       	push   $0xc010dd60
c010a5f1:	68 a1 d9 10 c0       	push   $0xc010d9a1
c010a5f6:	68 9a 03 00 00       	push   $0x39a
c010a5fb:	68 74 d9 10 c0       	push   $0xc010d974
c010a600:	e8 f8 5d ff ff       	call   c01003fd <__panic>
}
c010a605:	90                   	nop
c010a606:	c9                   	leave  
c010a607:	c3                   	ret    

c010a608 <cpu_idle>:

// cpu_idle - at the end of kern_init, the first kernel thread idleproc will do below works
void
cpu_idle(void) {
c010a608:	55                   	push   %ebp
c010a609:	89 e5                	mov    %esp,%ebp
c010a60b:	83 ec 08             	sub    $0x8,%esp
    while (1) {
        if (current->need_resched) {
c010a60e:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010a613:	8b 40 10             	mov    0x10(%eax),%eax
c010a616:	85 c0                	test   %eax,%eax
c010a618:	74 f4                	je     c010a60e <cpu_idle+0x6>
            schedule();
c010a61a:	e8 13 02 00 00       	call   c010a832 <schedule>
        }
    }
c010a61f:	eb ed                	jmp    c010a60e <cpu_idle+0x6>

c010a621 <lab6_set_priority>:
}

//FOR LAB6, set the process's priority (bigger value will get more CPU time) 
void
lab6_set_priority(uint32_t priority)
{
c010a621:	55                   	push   %ebp
c010a622:	89 e5                	mov    %esp,%ebp
    if (priority == 0)
c010a624:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a628:	75 11                	jne    c010a63b <lab6_set_priority+0x1a>
        current->lab6_priority = 1;
c010a62a:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010a62f:	c7 80 9c 00 00 00 01 	movl   $0x1,0x9c(%eax)
c010a636:	00 00 00 
    else current->lab6_priority = priority;
}
c010a639:	eb 0e                	jmp    c010a649 <lab6_set_priority+0x28>
void
lab6_set_priority(uint32_t priority)
{
    if (priority == 0)
        current->lab6_priority = 1;
    else current->lab6_priority = priority;
c010a63b:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010a640:	8b 55 08             	mov    0x8(%ebp),%edx
c010a643:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
}
c010a649:	90                   	nop
c010a64a:	5d                   	pop    %ebp
c010a64b:	c3                   	ret    

c010a64c <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c010a64c:	55                   	push   %ebp
c010a64d:	89 e5                	mov    %esp,%ebp
c010a64f:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010a652:	9c                   	pushf  
c010a653:	58                   	pop    %eax
c010a654:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010a657:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010a65a:	25 00 02 00 00       	and    $0x200,%eax
c010a65f:	85 c0                	test   %eax,%eax
c010a661:	74 0c                	je     c010a66f <__intr_save+0x23>
        intr_disable();
c010a663:	e8 54 7b ff ff       	call   c01021bc <intr_disable>
        return 1;
c010a668:	b8 01 00 00 00       	mov    $0x1,%eax
c010a66d:	eb 05                	jmp    c010a674 <__intr_save+0x28>
    }
    return 0;
c010a66f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a674:	c9                   	leave  
c010a675:	c3                   	ret    

c010a676 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010a676:	55                   	push   %ebp
c010a677:	89 e5                	mov    %esp,%ebp
c010a679:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010a67c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a680:	74 05                	je     c010a687 <__intr_restore+0x11>
        intr_enable();
c010a682:	e8 2e 7b ff ff       	call   c01021b5 <intr_enable>
    }
}
c010a687:	90                   	nop
c010a688:	c9                   	leave  
c010a689:	c3                   	ret    

c010a68a <sched_class_enqueue>:
static struct sched_class *sched_class;

static struct run_queue *rq;

static inline void
sched_class_enqueue(struct proc_struct *proc) {
c010a68a:	55                   	push   %ebp
c010a68b:	89 e5                	mov    %esp,%ebp
c010a68d:	83 ec 08             	sub    $0x8,%esp
    if (proc != idleproc) {
c010a690:	a1 20 10 1b c0       	mov    0xc01b1020,%eax
c010a695:	39 45 08             	cmp    %eax,0x8(%ebp)
c010a698:	74 1a                	je     c010a6b4 <sched_class_enqueue+0x2a>
        sched_class->enqueue(rq, proc);
c010a69a:	a1 5c 30 1b c0       	mov    0xc01b305c,%eax
c010a69f:	8b 40 08             	mov    0x8(%eax),%eax
c010a6a2:	8b 15 60 30 1b c0    	mov    0xc01b3060,%edx
c010a6a8:	83 ec 08             	sub    $0x8,%esp
c010a6ab:	ff 75 08             	pushl  0x8(%ebp)
c010a6ae:	52                   	push   %edx
c010a6af:	ff d0                	call   *%eax
c010a6b1:	83 c4 10             	add    $0x10,%esp
    }
}
c010a6b4:	90                   	nop
c010a6b5:	c9                   	leave  
c010a6b6:	c3                   	ret    

c010a6b7 <sched_class_dequeue>:

static inline void
sched_class_dequeue(struct proc_struct *proc) {
c010a6b7:	55                   	push   %ebp
c010a6b8:	89 e5                	mov    %esp,%ebp
c010a6ba:	83 ec 08             	sub    $0x8,%esp
    sched_class->dequeue(rq, proc);
c010a6bd:	a1 5c 30 1b c0       	mov    0xc01b305c,%eax
c010a6c2:	8b 40 0c             	mov    0xc(%eax),%eax
c010a6c5:	8b 15 60 30 1b c0    	mov    0xc01b3060,%edx
c010a6cb:	83 ec 08             	sub    $0x8,%esp
c010a6ce:	ff 75 08             	pushl  0x8(%ebp)
c010a6d1:	52                   	push   %edx
c010a6d2:	ff d0                	call   *%eax
c010a6d4:	83 c4 10             	add    $0x10,%esp
}
c010a6d7:	90                   	nop
c010a6d8:	c9                   	leave  
c010a6d9:	c3                   	ret    

c010a6da <sched_class_pick_next>:

static inline struct proc_struct *
sched_class_pick_next(void) {
c010a6da:	55                   	push   %ebp
c010a6db:	89 e5                	mov    %esp,%ebp
c010a6dd:	83 ec 08             	sub    $0x8,%esp
    return sched_class->pick_next(rq);
c010a6e0:	a1 5c 30 1b c0       	mov    0xc01b305c,%eax
c010a6e5:	8b 40 10             	mov    0x10(%eax),%eax
c010a6e8:	8b 15 60 30 1b c0    	mov    0xc01b3060,%edx
c010a6ee:	83 ec 0c             	sub    $0xc,%esp
c010a6f1:	52                   	push   %edx
c010a6f2:	ff d0                	call   *%eax
c010a6f4:	83 c4 10             	add    $0x10,%esp
}
c010a6f7:	c9                   	leave  
c010a6f8:	c3                   	ret    

c010a6f9 <sched_class_proc_tick>:

void
sched_class_proc_tick(struct proc_struct *proc) {
c010a6f9:	55                   	push   %ebp
c010a6fa:	89 e5                	mov    %esp,%ebp
c010a6fc:	83 ec 08             	sub    $0x8,%esp
    if (proc != idleproc) {
c010a6ff:	a1 20 10 1b c0       	mov    0xc01b1020,%eax
c010a704:	39 45 08             	cmp    %eax,0x8(%ebp)
c010a707:	74 1c                	je     c010a725 <sched_class_proc_tick+0x2c>
        sched_class->proc_tick(rq, proc);
c010a709:	a1 5c 30 1b c0       	mov    0xc01b305c,%eax
c010a70e:	8b 40 14             	mov    0x14(%eax),%eax
c010a711:	8b 15 60 30 1b c0    	mov    0xc01b3060,%edx
c010a717:	83 ec 08             	sub    $0x8,%esp
c010a71a:	ff 75 08             	pushl  0x8(%ebp)
c010a71d:	52                   	push   %edx
c010a71e:	ff d0                	call   *%eax
c010a720:	83 c4 10             	add    $0x10,%esp
    }
    else {
        proc->need_resched = 1;
    }
}
c010a723:	eb 0a                	jmp    c010a72f <sched_class_proc_tick+0x36>
sched_class_proc_tick(struct proc_struct *proc) {
    if (proc != idleproc) {
        sched_class->proc_tick(rq, proc);
    }
    else {
        proc->need_resched = 1;
c010a725:	8b 45 08             	mov    0x8(%ebp),%eax
c010a728:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    }
}
c010a72f:	90                   	nop
c010a730:	c9                   	leave  
c010a731:	c3                   	ret    

c010a732 <sched_init>:

static struct run_queue __rq;

void
sched_init(void) {
c010a732:	55                   	push   %ebp
c010a733:	89 e5                	mov    %esp,%ebp
c010a735:	83 ec 18             	sub    $0x18,%esp
c010a738:	c7 45 f4 54 30 1b c0 	movl   $0xc01b3054,-0xc(%ebp)
c010a73f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a742:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a745:	89 50 04             	mov    %edx,0x4(%eax)
c010a748:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a74b:	8b 50 04             	mov    0x4(%eax),%edx
c010a74e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a751:	89 10                	mov    %edx,(%eax)
    list_init(&timer_list);

    sched_class = &default_sched_class;
c010a753:	c7 05 5c 30 1b c0 80 	movl   $0xc012ca80,0xc01b305c
c010a75a:	ca 12 c0 

    rq = &__rq;
c010a75d:	c7 05 60 30 1b c0 64 	movl   $0xc01b3064,0xc01b3060
c010a764:	30 1b c0 
    rq->max_time_slice = MAX_TIME_SLICE;
c010a767:	a1 60 30 1b c0       	mov    0xc01b3060,%eax
c010a76c:	c7 40 0c 05 00 00 00 	movl   $0x5,0xc(%eax)
    sched_class->init(rq);
c010a773:	a1 5c 30 1b c0       	mov    0xc01b305c,%eax
c010a778:	8b 40 04             	mov    0x4(%eax),%eax
c010a77b:	8b 15 60 30 1b c0    	mov    0xc01b3060,%edx
c010a781:	83 ec 0c             	sub    $0xc,%esp
c010a784:	52                   	push   %edx
c010a785:	ff d0                	call   *%eax
c010a787:	83 c4 10             	add    $0x10,%esp

    cprintf("sched class: %s\n", sched_class->name);
c010a78a:	a1 5c 30 1b c0       	mov    0xc01b305c,%eax
c010a78f:	8b 00                	mov    (%eax),%eax
c010a791:	83 ec 08             	sub    $0x8,%esp
c010a794:	50                   	push   %eax
c010a795:	68 87 dd 10 c0       	push   $0xc010dd87
c010a79a:	e8 f8 5a ff ff       	call   c0100297 <cprintf>
c010a79f:	83 c4 10             	add    $0x10,%esp
}
c010a7a2:	90                   	nop
c010a7a3:	c9                   	leave  
c010a7a4:	c3                   	ret    

c010a7a5 <wakeup_proc>:

void
wakeup_proc(struct proc_struct *proc) {
c010a7a5:	55                   	push   %ebp
c010a7a6:	89 e5                	mov    %esp,%ebp
c010a7a8:	83 ec 18             	sub    $0x18,%esp
    assert(proc->state != PROC_ZOMBIE);
c010a7ab:	8b 45 08             	mov    0x8(%ebp),%eax
c010a7ae:	8b 00                	mov    (%eax),%eax
c010a7b0:	83 f8 03             	cmp    $0x3,%eax
c010a7b3:	75 16                	jne    c010a7cb <wakeup_proc+0x26>
c010a7b5:	68 98 dd 10 c0       	push   $0xc010dd98
c010a7ba:	68 b3 dd 10 c0       	push   $0xc010ddb3
c010a7bf:	6a 3c                	push   $0x3c
c010a7c1:	68 c8 dd 10 c0       	push   $0xc010ddc8
c010a7c6:	e8 32 5c ff ff       	call   c01003fd <__panic>
    bool intr_flag;
    local_intr_save(intr_flag);
c010a7cb:	e8 7c fe ff ff       	call   c010a64c <__intr_save>
c010a7d0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        if (proc->state != PROC_RUNNABLE) {
c010a7d3:	8b 45 08             	mov    0x8(%ebp),%eax
c010a7d6:	8b 00                	mov    (%eax),%eax
c010a7d8:	83 f8 02             	cmp    $0x2,%eax
c010a7db:	74 2d                	je     c010a80a <wakeup_proc+0x65>
            proc->state = PROC_RUNNABLE;
c010a7dd:	8b 45 08             	mov    0x8(%ebp),%eax
c010a7e0:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
            proc->wait_state = 0;
c010a7e6:	8b 45 08             	mov    0x8(%ebp),%eax
c010a7e9:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
            if (proc != current) {
c010a7f0:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010a7f5:	39 45 08             	cmp    %eax,0x8(%ebp)
c010a7f8:	74 27                	je     c010a821 <wakeup_proc+0x7c>
                sched_class_enqueue(proc);
c010a7fa:	83 ec 0c             	sub    $0xc,%esp
c010a7fd:	ff 75 08             	pushl  0x8(%ebp)
c010a800:	e8 85 fe ff ff       	call   c010a68a <sched_class_enqueue>
c010a805:	83 c4 10             	add    $0x10,%esp
c010a808:	eb 17                	jmp    c010a821 <wakeup_proc+0x7c>
            }
        }
        else {
            warn("wakeup runnable process.\n");
c010a80a:	83 ec 04             	sub    $0x4,%esp
c010a80d:	68 de dd 10 c0       	push   $0xc010ddde
c010a812:	6a 48                	push   $0x48
c010a814:	68 c8 dd 10 c0       	push   $0xc010ddc8
c010a819:	e8 62 5c ff ff       	call   c0100480 <__warn>
c010a81e:	83 c4 10             	add    $0x10,%esp
        }
    }
    local_intr_restore(intr_flag);
c010a821:	83 ec 0c             	sub    $0xc,%esp
c010a824:	ff 75 f4             	pushl  -0xc(%ebp)
c010a827:	e8 4a fe ff ff       	call   c010a676 <__intr_restore>
c010a82c:	83 c4 10             	add    $0x10,%esp
}
c010a82f:	90                   	nop
c010a830:	c9                   	leave  
c010a831:	c3                   	ret    

c010a832 <schedule>:

void
schedule(void) {
c010a832:	55                   	push   %ebp
c010a833:	89 e5                	mov    %esp,%ebp
c010a835:	83 ec 18             	sub    $0x18,%esp
    bool intr_flag;
    struct proc_struct *next;
    local_intr_save(intr_flag);
c010a838:	e8 0f fe ff ff       	call   c010a64c <__intr_save>
c010a83d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        current->need_resched = 0;
c010a840:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010a845:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
        if (current->state == PROC_RUNNABLE) {
c010a84c:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010a851:	8b 00                	mov    (%eax),%eax
c010a853:	83 f8 02             	cmp    $0x2,%eax
c010a856:	75 11                	jne    c010a869 <schedule+0x37>
            sched_class_enqueue(current);
c010a858:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010a85d:	83 ec 0c             	sub    $0xc,%esp
c010a860:	50                   	push   %eax
c010a861:	e8 24 fe ff ff       	call   c010a68a <sched_class_enqueue>
c010a866:	83 c4 10             	add    $0x10,%esp
        }
        if ((next = sched_class_pick_next()) != NULL) {
c010a869:	e8 6c fe ff ff       	call   c010a6da <sched_class_pick_next>
c010a86e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a871:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a875:	74 0e                	je     c010a885 <schedule+0x53>
            sched_class_dequeue(next);
c010a877:	83 ec 0c             	sub    $0xc,%esp
c010a87a:	ff 75 f4             	pushl  -0xc(%ebp)
c010a87d:	e8 35 fe ff ff       	call   c010a6b7 <sched_class_dequeue>
c010a882:	83 c4 10             	add    $0x10,%esp
        }
        if (next == NULL) {
c010a885:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a889:	75 08                	jne    c010a893 <schedule+0x61>
            next = idleproc;
c010a88b:	a1 20 10 1b c0       	mov    0xc01b1020,%eax
c010a890:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        next->runs ++;
c010a893:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a896:	8b 40 08             	mov    0x8(%eax),%eax
c010a899:	8d 50 01             	lea    0x1(%eax),%edx
c010a89c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a89f:	89 50 08             	mov    %edx,0x8(%eax)
        if (next != current) {
c010a8a2:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010a8a7:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010a8aa:	74 0e                	je     c010a8ba <schedule+0x88>
            proc_run(next);
c010a8ac:	83 ec 0c             	sub    $0xc,%esp
c010a8af:	ff 75 f4             	pushl  -0xc(%ebp)
c010a8b2:	e8 cb e8 ff ff       	call   c0109182 <proc_run>
c010a8b7:	83 c4 10             	add    $0x10,%esp
        }
    }
    local_intr_restore(intr_flag);
c010a8ba:	83 ec 0c             	sub    $0xc,%esp
c010a8bd:	ff 75 f0             	pushl  -0x10(%ebp)
c010a8c0:	e8 b1 fd ff ff       	call   c010a676 <__intr_restore>
c010a8c5:	83 c4 10             	add    $0x10,%esp
}
c010a8c8:	90                   	nop
c010a8c9:	c9                   	leave  
c010a8ca:	c3                   	ret    

c010a8cb <RR_init>:
#include <proc.h>
#include <assert.h>
#include <default_sched.h>

static void
RR_init(struct run_queue *rq) {
c010a8cb:	55                   	push   %ebp
c010a8cc:	89 e5                	mov    %esp,%ebp
c010a8ce:	83 ec 10             	sub    $0x10,%esp
    list_init(&(rq->run_list));
c010a8d1:	8b 45 08             	mov    0x8(%ebp),%eax
c010a8d4:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010a8d7:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a8da:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010a8dd:	89 50 04             	mov    %edx,0x4(%eax)
c010a8e0:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a8e3:	8b 50 04             	mov    0x4(%eax),%edx
c010a8e6:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a8e9:	89 10                	mov    %edx,(%eax)
    rq->proc_num = 0;
c010a8eb:	8b 45 08             	mov    0x8(%ebp),%eax
c010a8ee:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
c010a8f5:	90                   	nop
c010a8f6:	c9                   	leave  
c010a8f7:	c3                   	ret    

c010a8f8 <RR_enqueue>:

static void
RR_enqueue(struct run_queue *rq, struct proc_struct *proc) {
c010a8f8:	55                   	push   %ebp
c010a8f9:	89 e5                	mov    %esp,%ebp
c010a8fb:	83 ec 28             	sub    $0x28,%esp
    assert(list_empty(&(proc->run_link)));
c010a8fe:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a901:	83 e8 80             	sub    $0xffffff80,%eax
c010a904:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010a907:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a90a:	8b 40 04             	mov    0x4(%eax),%eax
c010a90d:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010a910:	0f 94 c0             	sete   %al
c010a913:	0f b6 c0             	movzbl %al,%eax
c010a916:	85 c0                	test   %eax,%eax
c010a918:	75 16                	jne    c010a930 <RR_enqueue+0x38>
c010a91a:	68 f8 dd 10 c0       	push   $0xc010ddf8
c010a91f:	68 16 de 10 c0       	push   $0xc010de16
c010a924:	6a 0f                	push   $0xf
c010a926:	68 2b de 10 c0       	push   $0xc010de2b
c010a92b:	e8 cd 5a ff ff       	call   c01003fd <__panic>
    list_add_before(&(rq->run_list), &(proc->run_link));
c010a930:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a933:	8d 90 80 00 00 00    	lea    0x80(%eax),%edx
c010a939:	8b 45 08             	mov    0x8(%ebp),%eax
c010a93c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a93f:	89 55 ec             	mov    %edx,-0x14(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c010a942:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a945:	8b 00                	mov    (%eax),%eax
c010a947:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010a94a:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010a94d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010a950:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a953:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010a956:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a959:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010a95c:	89 10                	mov    %edx,(%eax)
c010a95e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a961:	8b 10                	mov    (%eax),%edx
c010a963:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a966:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010a969:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a96c:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010a96f:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010a972:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a975:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010a978:	89 10                	mov    %edx,(%eax)
    if (proc->time_slice == 0 || proc->time_slice > rq->max_time_slice) {
c010a97a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a97d:	8b 80 88 00 00 00    	mov    0x88(%eax),%eax
c010a983:	85 c0                	test   %eax,%eax
c010a985:	74 13                	je     c010a99a <RR_enqueue+0xa2>
c010a987:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a98a:	8b 90 88 00 00 00    	mov    0x88(%eax),%edx
c010a990:	8b 45 08             	mov    0x8(%ebp),%eax
c010a993:	8b 40 0c             	mov    0xc(%eax),%eax
c010a996:	39 c2                	cmp    %eax,%edx
c010a998:	7e 0f                	jle    c010a9a9 <RR_enqueue+0xb1>
        proc->time_slice = rq->max_time_slice;
c010a99a:	8b 45 08             	mov    0x8(%ebp),%eax
c010a99d:	8b 50 0c             	mov    0xc(%eax),%edx
c010a9a0:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a9a3:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
    }
    proc->rq = rq;
c010a9a9:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a9ac:	8b 55 08             	mov    0x8(%ebp),%edx
c010a9af:	89 50 7c             	mov    %edx,0x7c(%eax)
    rq->proc_num ++;
c010a9b2:	8b 45 08             	mov    0x8(%ebp),%eax
c010a9b5:	8b 40 08             	mov    0x8(%eax),%eax
c010a9b8:	8d 50 01             	lea    0x1(%eax),%edx
c010a9bb:	8b 45 08             	mov    0x8(%ebp),%eax
c010a9be:	89 50 08             	mov    %edx,0x8(%eax)
}
c010a9c1:	90                   	nop
c010a9c2:	c9                   	leave  
c010a9c3:	c3                   	ret    

c010a9c4 <RR_dequeue>:

static void
RR_dequeue(struct run_queue *rq, struct proc_struct *proc) {
c010a9c4:	55                   	push   %ebp
c010a9c5:	89 e5                	mov    %esp,%ebp
c010a9c7:	83 ec 28             	sub    $0x28,%esp
    assert(!list_empty(&(proc->run_link)) && proc->rq == rq);
c010a9ca:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a9cd:	83 e8 80             	sub    $0xffffff80,%eax
c010a9d0:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010a9d3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a9d6:	8b 40 04             	mov    0x4(%eax),%eax
c010a9d9:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010a9dc:	0f 94 c0             	sete   %al
c010a9df:	0f b6 c0             	movzbl %al,%eax
c010a9e2:	85 c0                	test   %eax,%eax
c010a9e4:	75 0b                	jne    c010a9f1 <RR_dequeue+0x2d>
c010a9e6:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a9e9:	8b 40 7c             	mov    0x7c(%eax),%eax
c010a9ec:	3b 45 08             	cmp    0x8(%ebp),%eax
c010a9ef:	74 16                	je     c010aa07 <RR_dequeue+0x43>
c010a9f1:	68 4c de 10 c0       	push   $0xc010de4c
c010a9f6:	68 16 de 10 c0       	push   $0xc010de16
c010a9fb:	6a 1a                	push   $0x1a
c010a9fd:	68 2b de 10 c0       	push   $0xc010de2b
c010aa02:	e8 f6 59 ff ff       	call   c01003fd <__panic>
    list_del_init(&(proc->run_link));
c010aa07:	8b 45 0c             	mov    0xc(%ebp),%eax
c010aa0a:	83 e8 80             	sub    $0xffffff80,%eax
c010aa0d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010aa10:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aa13:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010aa16:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aa19:	8b 40 04             	mov    0x4(%eax),%eax
c010aa1c:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010aa1f:	8b 12                	mov    (%edx),%edx
c010aa21:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010aa24:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010aa27:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010aa2a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010aa2d:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010aa30:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010aa33:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010aa36:	89 10                	mov    %edx,(%eax)
c010aa38:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aa3b:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010aa3e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010aa41:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010aa44:	89 50 04             	mov    %edx,0x4(%eax)
c010aa47:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010aa4a:	8b 50 04             	mov    0x4(%eax),%edx
c010aa4d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010aa50:	89 10                	mov    %edx,(%eax)
    rq->proc_num --;
c010aa52:	8b 45 08             	mov    0x8(%ebp),%eax
c010aa55:	8b 40 08             	mov    0x8(%eax),%eax
c010aa58:	8d 50 ff             	lea    -0x1(%eax),%edx
c010aa5b:	8b 45 08             	mov    0x8(%ebp),%eax
c010aa5e:	89 50 08             	mov    %edx,0x8(%eax)
}
c010aa61:	90                   	nop
c010aa62:	c9                   	leave  
c010aa63:	c3                   	ret    

c010aa64 <RR_pick_next>:

static struct proc_struct *
RR_pick_next(struct run_queue *rq) {
c010aa64:	55                   	push   %ebp
c010aa65:	89 e5                	mov    %esp,%ebp
c010aa67:	83 ec 10             	sub    $0x10,%esp
    list_entry_t *le = list_next(&(rq->run_list));
c010aa6a:	8b 45 08             	mov    0x8(%ebp),%eax
c010aa6d:	89 45 f8             	mov    %eax,-0x8(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010aa70:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010aa73:	8b 40 04             	mov    0x4(%eax),%eax
c010aa76:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (le != &(rq->run_list)) {
c010aa79:	8b 45 08             	mov    0x8(%ebp),%eax
c010aa7c:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c010aa7f:	74 08                	je     c010aa89 <RR_pick_next+0x25>
        return le2proc(le, run_link);
c010aa81:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010aa84:	83 c0 80             	add    $0xffffff80,%eax
c010aa87:	eb 05                	jmp    c010aa8e <RR_pick_next+0x2a>
    }
    return NULL;
c010aa89:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010aa8e:	c9                   	leave  
c010aa8f:	c3                   	ret    

c010aa90 <RR_proc_tick>:

static void
RR_proc_tick(struct run_queue *rq, struct proc_struct *proc) {
c010aa90:	55                   	push   %ebp
c010aa91:	89 e5                	mov    %esp,%ebp
    if (proc->time_slice > 0) {
c010aa93:	8b 45 0c             	mov    0xc(%ebp),%eax
c010aa96:	8b 80 88 00 00 00    	mov    0x88(%eax),%eax
c010aa9c:	85 c0                	test   %eax,%eax
c010aa9e:	7e 15                	jle    c010aab5 <RR_proc_tick+0x25>
        proc->time_slice --;
c010aaa0:	8b 45 0c             	mov    0xc(%ebp),%eax
c010aaa3:	8b 80 88 00 00 00    	mov    0x88(%eax),%eax
c010aaa9:	8d 50 ff             	lea    -0x1(%eax),%edx
c010aaac:	8b 45 0c             	mov    0xc(%ebp),%eax
c010aaaf:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
    }
    if (proc->time_slice == 0) {
c010aab5:	8b 45 0c             	mov    0xc(%ebp),%eax
c010aab8:	8b 80 88 00 00 00    	mov    0x88(%eax),%eax
c010aabe:	85 c0                	test   %eax,%eax
c010aac0:	75 0a                	jne    c010aacc <RR_proc_tick+0x3c>
        proc->need_resched = 1;
c010aac2:	8b 45 0c             	mov    0xc(%ebp),%eax
c010aac5:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    }
}
c010aacc:	90                   	nop
c010aacd:	5d                   	pop    %ebp
c010aace:	c3                   	ret    

c010aacf <sys_exit>:
#include <pmm.h>
#include <assert.h>
#include <clock.h>

static int
sys_exit(uint32_t arg[]) {
c010aacf:	55                   	push   %ebp
c010aad0:	89 e5                	mov    %esp,%ebp
c010aad2:	83 ec 18             	sub    $0x18,%esp
    int error_code = (int)arg[0];
c010aad5:	8b 45 08             	mov    0x8(%ebp),%eax
c010aad8:	8b 00                	mov    (%eax),%eax
c010aada:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_exit(error_code);
c010aadd:	83 ec 0c             	sub    $0xc,%esp
c010aae0:	ff 75 f4             	pushl  -0xc(%ebp)
c010aae3:	e8 d0 ec ff ff       	call   c01097b8 <do_exit>
c010aae8:	83 c4 10             	add    $0x10,%esp
}
c010aaeb:	c9                   	leave  
c010aaec:	c3                   	ret    

c010aaed <sys_fork>:

static int
sys_fork(uint32_t arg[]) {
c010aaed:	55                   	push   %ebp
c010aaee:	89 e5                	mov    %esp,%ebp
c010aaf0:	83 ec 18             	sub    $0x18,%esp
    struct trapframe *tf = current->tf;
c010aaf3:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010aaf8:	8b 40 3c             	mov    0x3c(%eax),%eax
c010aafb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uintptr_t stack = tf->tf_esp;
c010aafe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ab01:	8b 40 44             	mov    0x44(%eax),%eax
c010ab04:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_fork(0, stack, tf);
c010ab07:	83 ec 04             	sub    $0x4,%esp
c010ab0a:	ff 75 f4             	pushl  -0xc(%ebp)
c010ab0d:	ff 75 f0             	pushl  -0x10(%ebp)
c010ab10:	6a 00                	push   $0x0
c010ab12:	e8 76 eb ff ff       	call   c010968d <do_fork>
c010ab17:	83 c4 10             	add    $0x10,%esp
}
c010ab1a:	c9                   	leave  
c010ab1b:	c3                   	ret    

c010ab1c <sys_wait>:

static int
sys_wait(uint32_t arg[]) {
c010ab1c:	55                   	push   %ebp
c010ab1d:	89 e5                	mov    %esp,%ebp
c010ab1f:	83 ec 18             	sub    $0x18,%esp
    int pid = (int)arg[0];
c010ab22:	8b 45 08             	mov    0x8(%ebp),%eax
c010ab25:	8b 00                	mov    (%eax),%eax
c010ab27:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int *store = (int *)arg[1];
c010ab2a:	8b 45 08             	mov    0x8(%ebp),%eax
c010ab2d:	83 c0 04             	add    $0x4,%eax
c010ab30:	8b 00                	mov    (%eax),%eax
c010ab32:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_wait(pid, store);
c010ab35:	83 ec 08             	sub    $0x8,%esp
c010ab38:	ff 75 f0             	pushl  -0x10(%ebp)
c010ab3b:	ff 75 f4             	pushl  -0xc(%ebp)
c010ab3e:	e8 51 f5 ff ff       	call   c010a094 <do_wait>
c010ab43:	83 c4 10             	add    $0x10,%esp
}
c010ab46:	c9                   	leave  
c010ab47:	c3                   	ret    

c010ab48 <sys_exec>:

static int
sys_exec(uint32_t arg[]) {
c010ab48:	55                   	push   %ebp
c010ab49:	89 e5                	mov    %esp,%ebp
c010ab4b:	83 ec 18             	sub    $0x18,%esp
    const char *name = (const char *)arg[0];
c010ab4e:	8b 45 08             	mov    0x8(%ebp),%eax
c010ab51:	8b 00                	mov    (%eax),%eax
c010ab53:	89 45 f4             	mov    %eax,-0xc(%ebp)
    size_t len = (size_t)arg[1];
c010ab56:	8b 45 08             	mov    0x8(%ebp),%eax
c010ab59:	83 c0 04             	add    $0x4,%eax
c010ab5c:	8b 00                	mov    (%eax),%eax
c010ab5e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    unsigned char *binary = (unsigned char *)arg[2];
c010ab61:	8b 45 08             	mov    0x8(%ebp),%eax
c010ab64:	83 c0 08             	add    $0x8,%eax
c010ab67:	8b 00                	mov    (%eax),%eax
c010ab69:	89 45 ec             	mov    %eax,-0x14(%ebp)
    size_t size = (size_t)arg[3];
c010ab6c:	8b 45 08             	mov    0x8(%ebp),%eax
c010ab6f:	83 c0 0c             	add    $0xc,%eax
c010ab72:	8b 00                	mov    (%eax),%eax
c010ab74:	89 45 e8             	mov    %eax,-0x18(%ebp)
    return do_execve(name, len, binary, size);
c010ab77:	ff 75 e8             	pushl  -0x18(%ebp)
c010ab7a:	ff 75 ec             	pushl  -0x14(%ebp)
c010ab7d:	ff 75 f0             	pushl  -0x10(%ebp)
c010ab80:	ff 75 f4             	pushl  -0xc(%ebp)
c010ab83:	e8 d4 f3 ff ff       	call   c0109f5c <do_execve>
c010ab88:	83 c4 10             	add    $0x10,%esp
}
c010ab8b:	c9                   	leave  
c010ab8c:	c3                   	ret    

c010ab8d <sys_yield>:

static int
sys_yield(uint32_t arg[]) {
c010ab8d:	55                   	push   %ebp
c010ab8e:	89 e5                	mov    %esp,%ebp
c010ab90:	83 ec 08             	sub    $0x8,%esp
    return do_yield();
c010ab93:	e8 e6 f4 ff ff       	call   c010a07e <do_yield>
}
c010ab98:	c9                   	leave  
c010ab99:	c3                   	ret    

c010ab9a <sys_kill>:

static int
sys_kill(uint32_t arg[]) {
c010ab9a:	55                   	push   %ebp
c010ab9b:	89 e5                	mov    %esp,%ebp
c010ab9d:	83 ec 18             	sub    $0x18,%esp
    int pid = (int)arg[0];
c010aba0:	8b 45 08             	mov    0x8(%ebp),%eax
c010aba3:	8b 00                	mov    (%eax),%eax
c010aba5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_kill(pid);
c010aba8:	83 ec 0c             	sub    $0xc,%esp
c010abab:	ff 75 f4             	pushl  -0xc(%ebp)
c010abae:	e8 6f f6 ff ff       	call   c010a222 <do_kill>
c010abb3:	83 c4 10             	add    $0x10,%esp
}
c010abb6:	c9                   	leave  
c010abb7:	c3                   	ret    

c010abb8 <sys_getpid>:

static int
sys_getpid(uint32_t arg[]) {
c010abb8:	55                   	push   %ebp
c010abb9:	89 e5                	mov    %esp,%ebp
    return current->pid;
c010abbb:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010abc0:	8b 40 04             	mov    0x4(%eax),%eax
}
c010abc3:	5d                   	pop    %ebp
c010abc4:	c3                   	ret    

c010abc5 <sys_putc>:

static int
sys_putc(uint32_t arg[]) {
c010abc5:	55                   	push   %ebp
c010abc6:	89 e5                	mov    %esp,%ebp
c010abc8:	83 ec 18             	sub    $0x18,%esp
    int c = (int)arg[0];
c010abcb:	8b 45 08             	mov    0x8(%ebp),%eax
c010abce:	8b 00                	mov    (%eax),%eax
c010abd0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cputchar(c);
c010abd3:	83 ec 0c             	sub    $0xc,%esp
c010abd6:	ff 75 f4             	pushl  -0xc(%ebp)
c010abd9:	e8 df 56 ff ff       	call   c01002bd <cputchar>
c010abde:	83 c4 10             	add    $0x10,%esp
    return 0;
c010abe1:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010abe6:	c9                   	leave  
c010abe7:	c3                   	ret    

c010abe8 <sys_pgdir>:

static int
sys_pgdir(uint32_t arg[]) {
c010abe8:	55                   	push   %ebp
c010abe9:	89 e5                	mov    %esp,%ebp
c010abeb:	83 ec 08             	sub    $0x8,%esp
    print_pgdir();
c010abee:	e8 70 dc ff ff       	call   c0108863 <print_pgdir>
    return 0;
c010abf3:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010abf8:	c9                   	leave  
c010abf9:	c3                   	ret    

c010abfa <sys_gettime>:

static int
sys_gettime(uint32_t arg[]) {
c010abfa:	55                   	push   %ebp
c010abfb:	89 e5                	mov    %esp,%ebp
    return (int)ticks;
c010abfd:	a1 78 30 1b c0       	mov    0xc01b3078,%eax
}
c010ac02:	5d                   	pop    %ebp
c010ac03:	c3                   	ret    

c010ac04 <sys_lab6_set_priority>:
static int
sys_lab6_set_priority(uint32_t arg[])
{
c010ac04:	55                   	push   %ebp
c010ac05:	89 e5                	mov    %esp,%ebp
c010ac07:	83 ec 18             	sub    $0x18,%esp
    uint32_t priority = (uint32_t)arg[0];
c010ac0a:	8b 45 08             	mov    0x8(%ebp),%eax
c010ac0d:	8b 00                	mov    (%eax),%eax
c010ac0f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    lab6_set_priority(priority);
c010ac12:	83 ec 0c             	sub    $0xc,%esp
c010ac15:	ff 75 f4             	pushl  -0xc(%ebp)
c010ac18:	e8 04 fa ff ff       	call   c010a621 <lab6_set_priority>
c010ac1d:	83 c4 10             	add    $0x10,%esp
    return 0;
c010ac20:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ac25:	c9                   	leave  
c010ac26:	c3                   	ret    

c010ac27 <syscall>:
};

#define NUM_SYSCALLS        ((sizeof(syscalls)) / (sizeof(syscalls[0])))

void
syscall(void) {
c010ac27:	55                   	push   %ebp
c010ac28:	89 e5                	mov    %esp,%ebp
c010ac2a:	83 ec 28             	sub    $0x28,%esp
    struct trapframe *tf = current->tf;
c010ac2d:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010ac32:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ac35:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t arg[5];
    int num = tf->tf_regs.reg_eax;
c010ac38:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ac3b:	8b 40 1c             	mov    0x1c(%eax),%eax
c010ac3e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (num >= 0 && num < NUM_SYSCALLS) {
c010ac41:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010ac45:	78 64                	js     c010acab <syscall+0x84>
c010ac47:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ac4a:	3d ff 00 00 00       	cmp    $0xff,%eax
c010ac4f:	77 5a                	ja     c010acab <syscall+0x84>
        if (syscalls[num] != NULL) {
c010ac51:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ac54:	8b 04 85 a0 ca 12 c0 	mov    -0x3fed3560(,%eax,4),%eax
c010ac5b:	85 c0                	test   %eax,%eax
c010ac5d:	74 4c                	je     c010acab <syscall+0x84>
            arg[0] = tf->tf_regs.reg_edx;
c010ac5f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ac62:	8b 40 14             	mov    0x14(%eax),%eax
c010ac65:	89 45 dc             	mov    %eax,-0x24(%ebp)
            arg[1] = tf->tf_regs.reg_ecx;
c010ac68:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ac6b:	8b 40 18             	mov    0x18(%eax),%eax
c010ac6e:	89 45 e0             	mov    %eax,-0x20(%ebp)
            arg[2] = tf->tf_regs.reg_ebx;
c010ac71:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ac74:	8b 40 10             	mov    0x10(%eax),%eax
c010ac77:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            arg[3] = tf->tf_regs.reg_edi;
c010ac7a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ac7d:	8b 00                	mov    (%eax),%eax
c010ac7f:	89 45 e8             	mov    %eax,-0x18(%ebp)
            arg[4] = tf->tf_regs.reg_esi;
c010ac82:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ac85:	8b 40 04             	mov    0x4(%eax),%eax
c010ac88:	89 45 ec             	mov    %eax,-0x14(%ebp)
            tf->tf_regs.reg_eax = syscalls[num](arg);
c010ac8b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ac8e:	8b 04 85 a0 ca 12 c0 	mov    -0x3fed3560(,%eax,4),%eax
c010ac95:	83 ec 0c             	sub    $0xc,%esp
c010ac98:	8d 55 dc             	lea    -0x24(%ebp),%edx
c010ac9b:	52                   	push   %edx
c010ac9c:	ff d0                	call   *%eax
c010ac9e:	83 c4 10             	add    $0x10,%esp
c010aca1:	89 c2                	mov    %eax,%edx
c010aca3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aca6:	89 50 1c             	mov    %edx,0x1c(%eax)
            return ;
c010aca9:	eb 37                	jmp    c010ace2 <syscall+0xbb>
        }
    }
    print_trapframe(tf);
c010acab:	83 ec 0c             	sub    $0xc,%esp
c010acae:	ff 75 f4             	pushl  -0xc(%ebp)
c010acb1:	e8 7d 77 ff ff       	call   c0102433 <print_trapframe>
c010acb6:	83 c4 10             	add    $0x10,%esp
    panic("undefined syscall %d, pid = %d, name = %s.\n",
c010acb9:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010acbe:	8d 50 48             	lea    0x48(%eax),%edx
c010acc1:	a1 28 10 1b c0       	mov    0xc01b1028,%eax
c010acc6:	8b 40 04             	mov    0x4(%eax),%eax
c010acc9:	83 ec 08             	sub    $0x8,%esp
c010accc:	52                   	push   %edx
c010accd:	50                   	push   %eax
c010acce:	ff 75 f0             	pushl  -0x10(%ebp)
c010acd1:	68 8c de 10 c0       	push   $0xc010de8c
c010acd6:	6a 72                	push   $0x72
c010acd8:	68 b8 de 10 c0       	push   $0xc010deb8
c010acdd:	e8 1b 57 ff ff       	call   c01003fd <__panic>
            num, current->pid, current->name);
}
c010ace2:	c9                   	leave  
c010ace3:	c3                   	ret    

c010ace4 <strlen>:
 * @s:      the input string
 *
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
c010ace4:	55                   	push   %ebp
c010ace5:	89 e5                	mov    %esp,%ebp
c010ace7:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c010acea:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (*s ++ != '\0') {
c010acf1:	eb 04                	jmp    c010acf7 <strlen+0x13>
        cnt ++;
c010acf3:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
    size_t cnt = 0;
    while (*s ++ != '\0') {
c010acf7:	8b 45 08             	mov    0x8(%ebp),%eax
c010acfa:	8d 50 01             	lea    0x1(%eax),%edx
c010acfd:	89 55 08             	mov    %edx,0x8(%ebp)
c010ad00:	0f b6 00             	movzbl (%eax),%eax
c010ad03:	84 c0                	test   %al,%al
c010ad05:	75 ec                	jne    c010acf3 <strlen+0xf>
        cnt ++;
    }
    return cnt;
c010ad07:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010ad0a:	c9                   	leave  
c010ad0b:	c3                   	ret    

c010ad0c <strnlen>:
 * The return value is strlen(s), if that is less than @len, or
 * @len if there is no '\0' character among the first @len characters
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
c010ad0c:	55                   	push   %ebp
c010ad0d:	89 e5                	mov    %esp,%ebp
c010ad0f:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c010ad12:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (cnt < len && *s ++ != '\0') {
c010ad19:	eb 04                	jmp    c010ad1f <strnlen+0x13>
        cnt ++;
c010ad1b:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
    size_t cnt = 0;
    while (cnt < len && *s ++ != '\0') {
c010ad1f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010ad22:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010ad25:	73 10                	jae    c010ad37 <strnlen+0x2b>
c010ad27:	8b 45 08             	mov    0x8(%ebp),%eax
c010ad2a:	8d 50 01             	lea    0x1(%eax),%edx
c010ad2d:	89 55 08             	mov    %edx,0x8(%ebp)
c010ad30:	0f b6 00             	movzbl (%eax),%eax
c010ad33:	84 c0                	test   %al,%al
c010ad35:	75 e4                	jne    c010ad1b <strnlen+0xf>
        cnt ++;
    }
    return cnt;
c010ad37:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010ad3a:	c9                   	leave  
c010ad3b:	c3                   	ret    

c010ad3c <strcpy>:
 * To avoid overflows, the size of array pointed by @dst should be long enough to
 * contain the same string as @src (including the terminating null character), and
 * should not overlap in memory with @src.
 * */
char *
strcpy(char *dst, const char *src) {
c010ad3c:	55                   	push   %ebp
c010ad3d:	89 e5                	mov    %esp,%ebp
c010ad3f:	57                   	push   %edi
c010ad40:	56                   	push   %esi
c010ad41:	83 ec 20             	sub    $0x20,%esp
c010ad44:	8b 45 08             	mov    0x8(%ebp),%eax
c010ad47:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ad4a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ad4d:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_STRCPY
#define __HAVE_ARCH_STRCPY
static inline char *
__strcpy(char *dst, const char *src) {
    int d0, d1, d2;
    asm volatile (
c010ad50:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010ad53:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ad56:	89 d1                	mov    %edx,%ecx
c010ad58:	89 c2                	mov    %eax,%edx
c010ad5a:	89 ce                	mov    %ecx,%esi
c010ad5c:	89 d7                	mov    %edx,%edi
c010ad5e:	ac                   	lods   %ds:(%esi),%al
c010ad5f:	aa                   	stos   %al,%es:(%edi)
c010ad60:	84 c0                	test   %al,%al
c010ad62:	75 fa                	jne    c010ad5e <strcpy+0x22>
c010ad64:	89 fa                	mov    %edi,%edx
c010ad66:	89 f1                	mov    %esi,%ecx
c010ad68:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c010ad6b:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010ad6e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        "stosb;"
        "testb %%al, %%al;"
        "jne 1b;"
        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
        : "0" (src), "1" (dst) : "memory");
    return dst;
c010ad71:	8b 45 f4             	mov    -0xc(%ebp),%eax
#ifdef __HAVE_ARCH_STRCPY
    return __strcpy(dst, src);
c010ad74:	90                   	nop
    char *p = dst;
    while ((*p ++ = *src ++) != '\0')
        /* nothing */;
    return dst;
#endif /* __HAVE_ARCH_STRCPY */
}
c010ad75:	83 c4 20             	add    $0x20,%esp
c010ad78:	5e                   	pop    %esi
c010ad79:	5f                   	pop    %edi
c010ad7a:	5d                   	pop    %ebp
c010ad7b:	c3                   	ret    

c010ad7c <strncpy>:
 * @len:    maximum number of characters to be copied from @src
 *
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
c010ad7c:	55                   	push   %ebp
c010ad7d:	89 e5                	mov    %esp,%ebp
c010ad7f:	83 ec 10             	sub    $0x10,%esp
    char *p = dst;
c010ad82:	8b 45 08             	mov    0x8(%ebp),%eax
c010ad85:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (len > 0) {
c010ad88:	eb 21                	jmp    c010adab <strncpy+0x2f>
        if ((*p = *src) != '\0') {
c010ad8a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ad8d:	0f b6 10             	movzbl (%eax),%edx
c010ad90:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010ad93:	88 10                	mov    %dl,(%eax)
c010ad95:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010ad98:	0f b6 00             	movzbl (%eax),%eax
c010ad9b:	84 c0                	test   %al,%al
c010ad9d:	74 04                	je     c010ada3 <strncpy+0x27>
            src ++;
c010ad9f:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
        }
        p ++, len --;
c010ada3:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010ada7:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
    char *p = dst;
    while (len > 0) {
c010adab:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010adaf:	75 d9                	jne    c010ad8a <strncpy+0xe>
        if ((*p = *src) != '\0') {
            src ++;
        }
        p ++, len --;
    }
    return dst;
c010adb1:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010adb4:	c9                   	leave  
c010adb5:	c3                   	ret    

c010adb6 <strcmp>:
 * - A value greater than zero indicates that the first character that does
 *   not match has a greater value in @s1 than in @s2;
 * - And a value less than zero indicates the opposite.
 * */
int
strcmp(const char *s1, const char *s2) {
c010adb6:	55                   	push   %ebp
c010adb7:	89 e5                	mov    %esp,%ebp
c010adb9:	57                   	push   %edi
c010adba:	56                   	push   %esi
c010adbb:	83 ec 20             	sub    $0x20,%esp
c010adbe:	8b 45 08             	mov    0x8(%ebp),%eax
c010adc1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010adc4:	8b 45 0c             	mov    0xc(%ebp),%eax
c010adc7:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_STRCMP
#define __HAVE_ARCH_STRCMP
static inline int
__strcmp(const char *s1, const char *s2) {
    int d0, d1, ret;
    asm volatile (
c010adca:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010adcd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010add0:	89 d1                	mov    %edx,%ecx
c010add2:	89 c2                	mov    %eax,%edx
c010add4:	89 ce                	mov    %ecx,%esi
c010add6:	89 d7                	mov    %edx,%edi
c010add8:	ac                   	lods   %ds:(%esi),%al
c010add9:	ae                   	scas   %es:(%edi),%al
c010adda:	75 08                	jne    c010ade4 <strcmp+0x2e>
c010addc:	84 c0                	test   %al,%al
c010adde:	75 f8                	jne    c010add8 <strcmp+0x22>
c010ade0:	31 c0                	xor    %eax,%eax
c010ade2:	eb 04                	jmp    c010ade8 <strcmp+0x32>
c010ade4:	19 c0                	sbb    %eax,%eax
c010ade6:	0c 01                	or     $0x1,%al
c010ade8:	89 fa                	mov    %edi,%edx
c010adea:	89 f1                	mov    %esi,%ecx
c010adec:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010adef:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c010adf2:	89 55 e4             	mov    %edx,-0x1c(%ebp)
        "orb $1, %%al;"
        "3:"
        : "=a" (ret), "=&S" (d0), "=&D" (d1)
        : "1" (s1), "2" (s2)
        : "memory");
    return ret;
c010adf5:	8b 45 ec             	mov    -0x14(%ebp),%eax
#ifdef __HAVE_ARCH_STRCMP
    return __strcmp(s1, s2);
c010adf8:	90                   	nop
    while (*s1 != '\0' && *s1 == *s2) {
        s1 ++, s2 ++;
    }
    return (int)((unsigned char)*s1 - (unsigned char)*s2);
#endif /* __HAVE_ARCH_STRCMP */
}
c010adf9:	83 c4 20             	add    $0x20,%esp
c010adfc:	5e                   	pop    %esi
c010adfd:	5f                   	pop    %edi
c010adfe:	5d                   	pop    %ebp
c010adff:	c3                   	ret    

c010ae00 <strncmp>:
 * they are equal to each other, it continues with the following pairs until
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
c010ae00:	55                   	push   %ebp
c010ae01:	89 e5                	mov    %esp,%ebp
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c010ae03:	eb 0c                	jmp    c010ae11 <strncmp+0x11>
        n --, s1 ++, s2 ++;
c010ae05:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c010ae09:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010ae0d:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c010ae11:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010ae15:	74 1a                	je     c010ae31 <strncmp+0x31>
c010ae17:	8b 45 08             	mov    0x8(%ebp),%eax
c010ae1a:	0f b6 00             	movzbl (%eax),%eax
c010ae1d:	84 c0                	test   %al,%al
c010ae1f:	74 10                	je     c010ae31 <strncmp+0x31>
c010ae21:	8b 45 08             	mov    0x8(%ebp),%eax
c010ae24:	0f b6 10             	movzbl (%eax),%edx
c010ae27:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ae2a:	0f b6 00             	movzbl (%eax),%eax
c010ae2d:	38 c2                	cmp    %al,%dl
c010ae2f:	74 d4                	je     c010ae05 <strncmp+0x5>
        n --, s1 ++, s2 ++;
    }
    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
c010ae31:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010ae35:	74 18                	je     c010ae4f <strncmp+0x4f>
c010ae37:	8b 45 08             	mov    0x8(%ebp),%eax
c010ae3a:	0f b6 00             	movzbl (%eax),%eax
c010ae3d:	0f b6 d0             	movzbl %al,%edx
c010ae40:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ae43:	0f b6 00             	movzbl (%eax),%eax
c010ae46:	0f b6 c0             	movzbl %al,%eax
c010ae49:	29 c2                	sub    %eax,%edx
c010ae4b:	89 d0                	mov    %edx,%eax
c010ae4d:	eb 05                	jmp    c010ae54 <strncmp+0x54>
c010ae4f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ae54:	5d                   	pop    %ebp
c010ae55:	c3                   	ret    

c010ae56 <strchr>:
 *
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
c010ae56:	55                   	push   %ebp
c010ae57:	89 e5                	mov    %esp,%ebp
c010ae59:	83 ec 04             	sub    $0x4,%esp
c010ae5c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ae5f:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c010ae62:	eb 14                	jmp    c010ae78 <strchr+0x22>
        if (*s == c) {
c010ae64:	8b 45 08             	mov    0x8(%ebp),%eax
c010ae67:	0f b6 00             	movzbl (%eax),%eax
c010ae6a:	3a 45 fc             	cmp    -0x4(%ebp),%al
c010ae6d:	75 05                	jne    c010ae74 <strchr+0x1e>
            return (char *)s;
c010ae6f:	8b 45 08             	mov    0x8(%ebp),%eax
c010ae72:	eb 13                	jmp    c010ae87 <strchr+0x31>
        }
        s ++;
c010ae74:	83 45 08 01          	addl   $0x1,0x8(%ebp)
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
    while (*s != '\0') {
c010ae78:	8b 45 08             	mov    0x8(%ebp),%eax
c010ae7b:	0f b6 00             	movzbl (%eax),%eax
c010ae7e:	84 c0                	test   %al,%al
c010ae80:	75 e2                	jne    c010ae64 <strchr+0xe>
        if (*s == c) {
            return (char *)s;
        }
        s ++;
    }
    return NULL;
c010ae82:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ae87:	c9                   	leave  
c010ae88:	c3                   	ret    

c010ae89 <strfind>:
 * The strfind() function is like strchr() except that if @c is
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
c010ae89:	55                   	push   %ebp
c010ae8a:	89 e5                	mov    %esp,%ebp
c010ae8c:	83 ec 04             	sub    $0x4,%esp
c010ae8f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ae92:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c010ae95:	eb 0f                	jmp    c010aea6 <strfind+0x1d>
        if (*s == c) {
c010ae97:	8b 45 08             	mov    0x8(%ebp),%eax
c010ae9a:	0f b6 00             	movzbl (%eax),%eax
c010ae9d:	3a 45 fc             	cmp    -0x4(%ebp),%al
c010aea0:	74 10                	je     c010aeb2 <strfind+0x29>
            break;
        }
        s ++;
c010aea2:	83 45 08 01          	addl   $0x1,0x8(%ebp)
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
    while (*s != '\0') {
c010aea6:	8b 45 08             	mov    0x8(%ebp),%eax
c010aea9:	0f b6 00             	movzbl (%eax),%eax
c010aeac:	84 c0                	test   %al,%al
c010aeae:	75 e7                	jne    c010ae97 <strfind+0xe>
c010aeb0:	eb 01                	jmp    c010aeb3 <strfind+0x2a>
        if (*s == c) {
            break;
c010aeb2:	90                   	nop
        }
        s ++;
    }
    return (char *)s;
c010aeb3:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010aeb6:	c9                   	leave  
c010aeb7:	c3                   	ret    

c010aeb8 <strtol>:
 * an optional "0x" or "0X" prefix.
 *
 * The strtol() function returns the converted integral number as a long int value.
 * */
long
strtol(const char *s, char **endptr, int base) {
c010aeb8:	55                   	push   %ebp
c010aeb9:	89 e5                	mov    %esp,%ebp
c010aebb:	83 ec 10             	sub    $0x10,%esp
    int neg = 0;
c010aebe:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    long val = 0;
c010aec5:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
c010aecc:	eb 04                	jmp    c010aed2 <strtol+0x1a>
        s ++;
c010aece:	83 45 08 01          	addl   $0x1,0x8(%ebp)
strtol(const char *s, char **endptr, int base) {
    int neg = 0;
    long val = 0;

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
c010aed2:	8b 45 08             	mov    0x8(%ebp),%eax
c010aed5:	0f b6 00             	movzbl (%eax),%eax
c010aed8:	3c 20                	cmp    $0x20,%al
c010aeda:	74 f2                	je     c010aece <strtol+0x16>
c010aedc:	8b 45 08             	mov    0x8(%ebp),%eax
c010aedf:	0f b6 00             	movzbl (%eax),%eax
c010aee2:	3c 09                	cmp    $0x9,%al
c010aee4:	74 e8                	je     c010aece <strtol+0x16>
        s ++;
    }

    // plus/minus sign
    if (*s == '+') {
c010aee6:	8b 45 08             	mov    0x8(%ebp),%eax
c010aee9:	0f b6 00             	movzbl (%eax),%eax
c010aeec:	3c 2b                	cmp    $0x2b,%al
c010aeee:	75 06                	jne    c010aef6 <strtol+0x3e>
        s ++;
c010aef0:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010aef4:	eb 15                	jmp    c010af0b <strtol+0x53>
    }
    else if (*s == '-') {
c010aef6:	8b 45 08             	mov    0x8(%ebp),%eax
c010aef9:	0f b6 00             	movzbl (%eax),%eax
c010aefc:	3c 2d                	cmp    $0x2d,%al
c010aefe:	75 0b                	jne    c010af0b <strtol+0x53>
        s ++, neg = 1;
c010af00:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010af04:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
    }

    // hex or octal base prefix
    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
c010af0b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010af0f:	74 06                	je     c010af17 <strtol+0x5f>
c010af11:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
c010af15:	75 24                	jne    c010af3b <strtol+0x83>
c010af17:	8b 45 08             	mov    0x8(%ebp),%eax
c010af1a:	0f b6 00             	movzbl (%eax),%eax
c010af1d:	3c 30                	cmp    $0x30,%al
c010af1f:	75 1a                	jne    c010af3b <strtol+0x83>
c010af21:	8b 45 08             	mov    0x8(%ebp),%eax
c010af24:	83 c0 01             	add    $0x1,%eax
c010af27:	0f b6 00             	movzbl (%eax),%eax
c010af2a:	3c 78                	cmp    $0x78,%al
c010af2c:	75 0d                	jne    c010af3b <strtol+0x83>
        s += 2, base = 16;
c010af2e:	83 45 08 02          	addl   $0x2,0x8(%ebp)
c010af32:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
c010af39:	eb 2a                	jmp    c010af65 <strtol+0xad>
    }
    else if (base == 0 && s[0] == '0') {
c010af3b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010af3f:	75 17                	jne    c010af58 <strtol+0xa0>
c010af41:	8b 45 08             	mov    0x8(%ebp),%eax
c010af44:	0f b6 00             	movzbl (%eax),%eax
c010af47:	3c 30                	cmp    $0x30,%al
c010af49:	75 0d                	jne    c010af58 <strtol+0xa0>
        s ++, base = 8;
c010af4b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010af4f:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
c010af56:	eb 0d                	jmp    c010af65 <strtol+0xad>
    }
    else if (base == 0) {
c010af58:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010af5c:	75 07                	jne    c010af65 <strtol+0xad>
        base = 10;
c010af5e:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

    // digits
    while (1) {
        int dig;

        if (*s >= '0' && *s <= '9') {
c010af65:	8b 45 08             	mov    0x8(%ebp),%eax
c010af68:	0f b6 00             	movzbl (%eax),%eax
c010af6b:	3c 2f                	cmp    $0x2f,%al
c010af6d:	7e 1b                	jle    c010af8a <strtol+0xd2>
c010af6f:	8b 45 08             	mov    0x8(%ebp),%eax
c010af72:	0f b6 00             	movzbl (%eax),%eax
c010af75:	3c 39                	cmp    $0x39,%al
c010af77:	7f 11                	jg     c010af8a <strtol+0xd2>
            dig = *s - '0';
c010af79:	8b 45 08             	mov    0x8(%ebp),%eax
c010af7c:	0f b6 00             	movzbl (%eax),%eax
c010af7f:	0f be c0             	movsbl %al,%eax
c010af82:	83 e8 30             	sub    $0x30,%eax
c010af85:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010af88:	eb 48                	jmp    c010afd2 <strtol+0x11a>
        }
        else if (*s >= 'a' && *s <= 'z') {
c010af8a:	8b 45 08             	mov    0x8(%ebp),%eax
c010af8d:	0f b6 00             	movzbl (%eax),%eax
c010af90:	3c 60                	cmp    $0x60,%al
c010af92:	7e 1b                	jle    c010afaf <strtol+0xf7>
c010af94:	8b 45 08             	mov    0x8(%ebp),%eax
c010af97:	0f b6 00             	movzbl (%eax),%eax
c010af9a:	3c 7a                	cmp    $0x7a,%al
c010af9c:	7f 11                	jg     c010afaf <strtol+0xf7>
            dig = *s - 'a' + 10;
c010af9e:	8b 45 08             	mov    0x8(%ebp),%eax
c010afa1:	0f b6 00             	movzbl (%eax),%eax
c010afa4:	0f be c0             	movsbl %al,%eax
c010afa7:	83 e8 57             	sub    $0x57,%eax
c010afaa:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010afad:	eb 23                	jmp    c010afd2 <strtol+0x11a>
        }
        else if (*s >= 'A' && *s <= 'Z') {
c010afaf:	8b 45 08             	mov    0x8(%ebp),%eax
c010afb2:	0f b6 00             	movzbl (%eax),%eax
c010afb5:	3c 40                	cmp    $0x40,%al
c010afb7:	7e 3c                	jle    c010aff5 <strtol+0x13d>
c010afb9:	8b 45 08             	mov    0x8(%ebp),%eax
c010afbc:	0f b6 00             	movzbl (%eax),%eax
c010afbf:	3c 5a                	cmp    $0x5a,%al
c010afc1:	7f 32                	jg     c010aff5 <strtol+0x13d>
            dig = *s - 'A' + 10;
c010afc3:	8b 45 08             	mov    0x8(%ebp),%eax
c010afc6:	0f b6 00             	movzbl (%eax),%eax
c010afc9:	0f be c0             	movsbl %al,%eax
c010afcc:	83 e8 37             	sub    $0x37,%eax
c010afcf:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        else {
            break;
        }
        if (dig >= base) {
c010afd2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010afd5:	3b 45 10             	cmp    0x10(%ebp),%eax
c010afd8:	7d 1a                	jge    c010aff4 <strtol+0x13c>
            break;
        }
        s ++, val = (val * base) + dig;
c010afda:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010afde:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010afe1:	0f af 45 10          	imul   0x10(%ebp),%eax
c010afe5:	89 c2                	mov    %eax,%edx
c010afe7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010afea:	01 d0                	add    %edx,%eax
c010afec:	89 45 f8             	mov    %eax,-0x8(%ebp)
        // we don't properly detect overflow!
    }
c010afef:	e9 71 ff ff ff       	jmp    c010af65 <strtol+0xad>
        }
        else {
            break;
        }
        if (dig >= base) {
            break;
c010aff4:	90                   	nop
        }
        s ++, val = (val * base) + dig;
        // we don't properly detect overflow!
    }

    if (endptr) {
c010aff5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010aff9:	74 08                	je     c010b003 <strtol+0x14b>
        *endptr = (char *) s;
c010affb:	8b 45 0c             	mov    0xc(%ebp),%eax
c010affe:	8b 55 08             	mov    0x8(%ebp),%edx
c010b001:	89 10                	mov    %edx,(%eax)
    }
    return (neg ? -val : val);
c010b003:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c010b007:	74 07                	je     c010b010 <strtol+0x158>
c010b009:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010b00c:	f7 d8                	neg    %eax
c010b00e:	eb 03                	jmp    c010b013 <strtol+0x15b>
c010b010:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c010b013:	c9                   	leave  
c010b014:	c3                   	ret    

c010b015 <memset>:
 * @n:      number of bytes to be set to the value
 *
 * The memset() function returns @s.
 * */
void *
memset(void *s, char c, size_t n) {
c010b015:	55                   	push   %ebp
c010b016:	89 e5                	mov    %esp,%ebp
c010b018:	57                   	push   %edi
c010b019:	83 ec 24             	sub    $0x24,%esp
c010b01c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b01f:	88 45 d8             	mov    %al,-0x28(%ebp)
#ifdef __HAVE_ARCH_MEMSET
    return __memset(s, c, n);
c010b022:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
c010b026:	8b 55 08             	mov    0x8(%ebp),%edx
c010b029:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010b02c:	88 45 f7             	mov    %al,-0x9(%ebp)
c010b02f:	8b 45 10             	mov    0x10(%ebp),%eax
c010b032:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_MEMSET
#define __HAVE_ARCH_MEMSET
static inline void *
__memset(void *s, char c, size_t n) {
    int d0, d1;
    asm volatile (
c010b035:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010b038:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c010b03c:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010b03f:	89 d7                	mov    %edx,%edi
c010b041:	f3 aa                	rep stos %al,%es:(%edi)
c010b043:	89 fa                	mov    %edi,%edx
c010b045:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c010b048:	89 55 e8             	mov    %edx,-0x18(%ebp)
        "rep; stosb;"
        : "=&c" (d0), "=&D" (d1)
        : "0" (n), "a" (c), "1" (s)
        : "memory");
    return s;
c010b04b:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010b04e:	90                   	nop
    while (n -- > 0) {
        *p ++ = c;
    }
    return s;
#endif /* __HAVE_ARCH_MEMSET */
}
c010b04f:	83 c4 24             	add    $0x24,%esp
c010b052:	5f                   	pop    %edi
c010b053:	5d                   	pop    %ebp
c010b054:	c3                   	ret    

c010b055 <memmove>:
 * @n:      number of bytes to copy
 *
 * The memmove() function returns @dst.
 * */
void *
memmove(void *dst, const void *src, size_t n) {
c010b055:	55                   	push   %ebp
c010b056:	89 e5                	mov    %esp,%ebp
c010b058:	57                   	push   %edi
c010b059:	56                   	push   %esi
c010b05a:	53                   	push   %ebx
c010b05b:	83 ec 30             	sub    $0x30,%esp
c010b05e:	8b 45 08             	mov    0x8(%ebp),%eax
c010b061:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b064:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b067:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010b06a:	8b 45 10             	mov    0x10(%ebp),%eax
c010b06d:	89 45 e8             	mov    %eax,-0x18(%ebp)

#ifndef __HAVE_ARCH_MEMMOVE
#define __HAVE_ARCH_MEMMOVE
static inline void *
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
c010b070:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b073:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010b076:	73 42                	jae    c010b0ba <memmove+0x65>
c010b078:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b07b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010b07e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b081:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010b084:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b087:	89 45 dc             	mov    %eax,-0x24(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c010b08a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b08d:	c1 e8 02             	shr    $0x2,%eax
c010b090:	89 c1                	mov    %eax,%ecx
#ifndef __HAVE_ARCH_MEMCPY
#define __HAVE_ARCH_MEMCPY
static inline void *
__memcpy(void *dst, const void *src, size_t n) {
    int d0, d1, d2;
    asm volatile (
c010b092:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010b095:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b098:	89 d7                	mov    %edx,%edi
c010b09a:	89 c6                	mov    %eax,%esi
c010b09c:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010b09e:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c010b0a1:	83 e1 03             	and    $0x3,%ecx
c010b0a4:	74 02                	je     c010b0a8 <memmove+0x53>
c010b0a6:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010b0a8:	89 f0                	mov    %esi,%eax
c010b0aa:	89 fa                	mov    %edi,%edx
c010b0ac:	89 4d d8             	mov    %ecx,-0x28(%ebp)
c010b0af:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010b0b2:	89 45 d0             	mov    %eax,-0x30(%ebp)
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
        : "memory");
    return dst;
c010b0b5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
#ifdef __HAVE_ARCH_MEMMOVE
    return __memmove(dst, src, n);
c010b0b8:	eb 36                	jmp    c010b0f0 <memmove+0x9b>
    asm volatile (
        "std;"
        "rep; movsb;"
        "cld;"
        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
c010b0ba:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b0bd:	8d 50 ff             	lea    -0x1(%eax),%edx
c010b0c0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b0c3:	01 c2                	add    %eax,%edx
c010b0c5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b0c8:	8d 48 ff             	lea    -0x1(%eax),%ecx
c010b0cb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b0ce:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
        return __memcpy(dst, src, n);
    }
    int d0, d1, d2;
    asm volatile (
c010b0d1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b0d4:	89 c1                	mov    %eax,%ecx
c010b0d6:	89 d8                	mov    %ebx,%eax
c010b0d8:	89 d6                	mov    %edx,%esi
c010b0da:	89 c7                	mov    %eax,%edi
c010b0dc:	fd                   	std    
c010b0dd:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010b0df:	fc                   	cld    
c010b0e0:	89 f8                	mov    %edi,%eax
c010b0e2:	89 f2                	mov    %esi,%edx
c010b0e4:	89 4d cc             	mov    %ecx,-0x34(%ebp)
c010b0e7:	89 55 c8             	mov    %edx,-0x38(%ebp)
c010b0ea:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        "rep; movsb;"
        "cld;"
        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
        : "memory");
    return dst;
c010b0ed:	8b 45 f0             	mov    -0x10(%ebp),%eax
            *d ++ = *s ++;
        }
    }
    return dst;
#endif /* __HAVE_ARCH_MEMMOVE */
}
c010b0f0:	83 c4 30             	add    $0x30,%esp
c010b0f3:	5b                   	pop    %ebx
c010b0f4:	5e                   	pop    %esi
c010b0f5:	5f                   	pop    %edi
c010b0f6:	5d                   	pop    %ebp
c010b0f7:	c3                   	ret    

c010b0f8 <memcpy>:
 * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
 * by both @src and @dst, should be at least @n bytes, and should not overlap
 * (for overlapping memory area, memmove is a safer approach).
 * */
void *
memcpy(void *dst, const void *src, size_t n) {
c010b0f8:	55                   	push   %ebp
c010b0f9:	89 e5                	mov    %esp,%ebp
c010b0fb:	57                   	push   %edi
c010b0fc:	56                   	push   %esi
c010b0fd:	83 ec 20             	sub    $0x20,%esp
c010b100:	8b 45 08             	mov    0x8(%ebp),%eax
c010b103:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b106:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b109:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b10c:	8b 45 10             	mov    0x10(%ebp),%eax
c010b10f:	89 45 ec             	mov    %eax,-0x14(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c010b112:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b115:	c1 e8 02             	shr    $0x2,%eax
c010b118:	89 c1                	mov    %eax,%ecx
#ifndef __HAVE_ARCH_MEMCPY
#define __HAVE_ARCH_MEMCPY
static inline void *
__memcpy(void *dst, const void *src, size_t n) {
    int d0, d1, d2;
    asm volatile (
c010b11a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b11d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b120:	89 d7                	mov    %edx,%edi
c010b122:	89 c6                	mov    %eax,%esi
c010b124:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010b126:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c010b129:	83 e1 03             	and    $0x3,%ecx
c010b12c:	74 02                	je     c010b130 <memcpy+0x38>
c010b12e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010b130:	89 f0                	mov    %esi,%eax
c010b132:	89 fa                	mov    %edi,%edx
c010b134:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c010b137:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c010b13a:	89 45 e0             	mov    %eax,-0x20(%ebp)
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
        : "memory");
    return dst;
c010b13d:	8b 45 f4             	mov    -0xc(%ebp),%eax
#ifdef __HAVE_ARCH_MEMCPY
    return __memcpy(dst, src, n);
c010b140:	90                   	nop
    while (n -- > 0) {
        *d ++ = *s ++;
    }
    return dst;
#endif /* __HAVE_ARCH_MEMCPY */
}
c010b141:	83 c4 20             	add    $0x20,%esp
c010b144:	5e                   	pop    %esi
c010b145:	5f                   	pop    %edi
c010b146:	5d                   	pop    %ebp
c010b147:	c3                   	ret    

c010b148 <memcmp>:
 *   match in both memory blocks has a greater value in @v1 than in @v2
 *   as if evaluated as unsigned char values;
 * - And a value less than zero indicates the opposite.
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
c010b148:	55                   	push   %ebp
c010b149:	89 e5                	mov    %esp,%ebp
c010b14b:	83 ec 10             	sub    $0x10,%esp
    const char *s1 = (const char *)v1;
c010b14e:	8b 45 08             	mov    0x8(%ebp),%eax
c010b151:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s2 = (const char *)v2;
c010b154:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b157:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (n -- > 0) {
c010b15a:	eb 30                	jmp    c010b18c <memcmp+0x44>
        if (*s1 != *s2) {
c010b15c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010b15f:	0f b6 10             	movzbl (%eax),%edx
c010b162:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010b165:	0f b6 00             	movzbl (%eax),%eax
c010b168:	38 c2                	cmp    %al,%dl
c010b16a:	74 18                	je     c010b184 <memcmp+0x3c>
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
c010b16c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010b16f:	0f b6 00             	movzbl (%eax),%eax
c010b172:	0f b6 d0             	movzbl %al,%edx
c010b175:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010b178:	0f b6 00             	movzbl (%eax),%eax
c010b17b:	0f b6 c0             	movzbl %al,%eax
c010b17e:	29 c2                	sub    %eax,%edx
c010b180:	89 d0                	mov    %edx,%eax
c010b182:	eb 1a                	jmp    c010b19e <memcmp+0x56>
        }
        s1 ++, s2 ++;
c010b184:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010b188:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
    const char *s1 = (const char *)v1;
    const char *s2 = (const char *)v2;
    while (n -- > 0) {
c010b18c:	8b 45 10             	mov    0x10(%ebp),%eax
c010b18f:	8d 50 ff             	lea    -0x1(%eax),%edx
c010b192:	89 55 10             	mov    %edx,0x10(%ebp)
c010b195:	85 c0                	test   %eax,%eax
c010b197:	75 c3                	jne    c010b15c <memcmp+0x14>
        if (*s1 != *s2) {
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
        }
        s1 ++, s2 ++;
    }
    return 0;
c010b199:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010b19e:	c9                   	leave  
c010b19f:	c3                   	ret    

c010b1a0 <printnum>:
 * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
 * @padc:       character that padded on the left if the actual width is less than @width
 * */
static void
printnum(void (*putch)(int, void*), void *putdat,
        unsigned long long num, unsigned base, int width, int padc) {
c010b1a0:	55                   	push   %ebp
c010b1a1:	89 e5                	mov    %esp,%ebp
c010b1a3:	83 ec 38             	sub    $0x38,%esp
c010b1a6:	8b 45 10             	mov    0x10(%ebp),%eax
c010b1a9:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010b1ac:	8b 45 14             	mov    0x14(%ebp),%eax
c010b1af:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    unsigned long long result = num;
c010b1b2:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b1b5:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010b1b8:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010b1bb:	89 55 ec             	mov    %edx,-0x14(%ebp)
    unsigned mod = do_div(result, base);
c010b1be:	8b 45 18             	mov    0x18(%ebp),%eax
c010b1c1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010b1c4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b1c7:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010b1ca:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010b1cd:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010b1d0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b1d3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b1d6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b1da:	74 1c                	je     c010b1f8 <printnum+0x58>
c010b1dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b1df:	ba 00 00 00 00       	mov    $0x0,%edx
c010b1e4:	f7 75 e4             	divl   -0x1c(%ebp)
c010b1e7:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010b1ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b1ed:	ba 00 00 00 00       	mov    $0x0,%edx
c010b1f2:	f7 75 e4             	divl   -0x1c(%ebp)
c010b1f5:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b1f8:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b1fb:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b1fe:	f7 75 e4             	divl   -0x1c(%ebp)
c010b201:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010b204:	89 55 dc             	mov    %edx,-0x24(%ebp)
c010b207:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b20a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010b20d:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010b210:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010b213:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b216:	89 45 d8             	mov    %eax,-0x28(%ebp)

    // first recursively print all preceding (more significant) digits
    if (num >= base) {
c010b219:	8b 45 18             	mov    0x18(%ebp),%eax
c010b21c:	ba 00 00 00 00       	mov    $0x0,%edx
c010b221:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c010b224:	77 41                	ja     c010b267 <printnum+0xc7>
c010b226:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c010b229:	72 05                	jb     c010b230 <printnum+0x90>
c010b22b:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c010b22e:	77 37                	ja     c010b267 <printnum+0xc7>
        printnum(putch, putdat, result, base, width - 1, padc);
c010b230:	8b 45 1c             	mov    0x1c(%ebp),%eax
c010b233:	83 e8 01             	sub    $0x1,%eax
c010b236:	83 ec 04             	sub    $0x4,%esp
c010b239:	ff 75 20             	pushl  0x20(%ebp)
c010b23c:	50                   	push   %eax
c010b23d:	ff 75 18             	pushl  0x18(%ebp)
c010b240:	ff 75 ec             	pushl  -0x14(%ebp)
c010b243:	ff 75 e8             	pushl  -0x18(%ebp)
c010b246:	ff 75 0c             	pushl  0xc(%ebp)
c010b249:	ff 75 08             	pushl  0x8(%ebp)
c010b24c:	e8 4f ff ff ff       	call   c010b1a0 <printnum>
c010b251:	83 c4 20             	add    $0x20,%esp
c010b254:	eb 1b                	jmp    c010b271 <printnum+0xd1>
    } else {
        // print any needed pad characters before first digit
        while (-- width > 0)
            putch(padc, putdat);
c010b256:	83 ec 08             	sub    $0x8,%esp
c010b259:	ff 75 0c             	pushl  0xc(%ebp)
c010b25c:	ff 75 20             	pushl  0x20(%ebp)
c010b25f:	8b 45 08             	mov    0x8(%ebp),%eax
c010b262:	ff d0                	call   *%eax
c010b264:	83 c4 10             	add    $0x10,%esp
    // first recursively print all preceding (more significant) digits
    if (num >= base) {
        printnum(putch, putdat, result, base, width - 1, padc);
    } else {
        // print any needed pad characters before first digit
        while (-- width > 0)
c010b267:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
c010b26b:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c010b26f:	7f e5                	jg     c010b256 <printnum+0xb6>
            putch(padc, putdat);
    }
    // then print this (the least significant) digit
    putch("0123456789abcdef"[mod], putdat);
c010b271:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b274:	05 e4 df 10 c0       	add    $0xc010dfe4,%eax
c010b279:	0f b6 00             	movzbl (%eax),%eax
c010b27c:	0f be c0             	movsbl %al,%eax
c010b27f:	83 ec 08             	sub    $0x8,%esp
c010b282:	ff 75 0c             	pushl  0xc(%ebp)
c010b285:	50                   	push   %eax
c010b286:	8b 45 08             	mov    0x8(%ebp),%eax
c010b289:	ff d0                	call   *%eax
c010b28b:	83 c4 10             	add    $0x10,%esp
}
c010b28e:	90                   	nop
c010b28f:	c9                   	leave  
c010b290:	c3                   	ret    

c010b291 <getuint>:
 * getuint - get an unsigned int of various possible sizes from a varargs list
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static unsigned long long
getuint(va_list *ap, int lflag) {
c010b291:	55                   	push   %ebp
c010b292:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c010b294:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c010b298:	7e 14                	jle    c010b2ae <getuint+0x1d>
        return va_arg(*ap, unsigned long long);
c010b29a:	8b 45 08             	mov    0x8(%ebp),%eax
c010b29d:	8b 00                	mov    (%eax),%eax
c010b29f:	8d 48 08             	lea    0x8(%eax),%ecx
c010b2a2:	8b 55 08             	mov    0x8(%ebp),%edx
c010b2a5:	89 0a                	mov    %ecx,(%edx)
c010b2a7:	8b 50 04             	mov    0x4(%eax),%edx
c010b2aa:	8b 00                	mov    (%eax),%eax
c010b2ac:	eb 30                	jmp    c010b2de <getuint+0x4d>
    }
    else if (lflag) {
c010b2ae:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010b2b2:	74 16                	je     c010b2ca <getuint+0x39>
        return va_arg(*ap, unsigned long);
c010b2b4:	8b 45 08             	mov    0x8(%ebp),%eax
c010b2b7:	8b 00                	mov    (%eax),%eax
c010b2b9:	8d 48 04             	lea    0x4(%eax),%ecx
c010b2bc:	8b 55 08             	mov    0x8(%ebp),%edx
c010b2bf:	89 0a                	mov    %ecx,(%edx)
c010b2c1:	8b 00                	mov    (%eax),%eax
c010b2c3:	ba 00 00 00 00       	mov    $0x0,%edx
c010b2c8:	eb 14                	jmp    c010b2de <getuint+0x4d>
    }
    else {
        return va_arg(*ap, unsigned int);
c010b2ca:	8b 45 08             	mov    0x8(%ebp),%eax
c010b2cd:	8b 00                	mov    (%eax),%eax
c010b2cf:	8d 48 04             	lea    0x4(%eax),%ecx
c010b2d2:	8b 55 08             	mov    0x8(%ebp),%edx
c010b2d5:	89 0a                	mov    %ecx,(%edx)
c010b2d7:	8b 00                	mov    (%eax),%eax
c010b2d9:	ba 00 00 00 00       	mov    $0x0,%edx
    }
}
c010b2de:	5d                   	pop    %ebp
c010b2df:	c3                   	ret    

c010b2e0 <getint>:
 * getint - same as getuint but signed, we can't use getuint because of sign extension
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static long long
getint(va_list *ap, int lflag) {
c010b2e0:	55                   	push   %ebp
c010b2e1:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c010b2e3:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c010b2e7:	7e 14                	jle    c010b2fd <getint+0x1d>
        return va_arg(*ap, long long);
c010b2e9:	8b 45 08             	mov    0x8(%ebp),%eax
c010b2ec:	8b 00                	mov    (%eax),%eax
c010b2ee:	8d 48 08             	lea    0x8(%eax),%ecx
c010b2f1:	8b 55 08             	mov    0x8(%ebp),%edx
c010b2f4:	89 0a                	mov    %ecx,(%edx)
c010b2f6:	8b 50 04             	mov    0x4(%eax),%edx
c010b2f9:	8b 00                	mov    (%eax),%eax
c010b2fb:	eb 28                	jmp    c010b325 <getint+0x45>
    }
    else if (lflag) {
c010b2fd:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010b301:	74 12                	je     c010b315 <getint+0x35>
        return va_arg(*ap, long);
c010b303:	8b 45 08             	mov    0x8(%ebp),%eax
c010b306:	8b 00                	mov    (%eax),%eax
c010b308:	8d 48 04             	lea    0x4(%eax),%ecx
c010b30b:	8b 55 08             	mov    0x8(%ebp),%edx
c010b30e:	89 0a                	mov    %ecx,(%edx)
c010b310:	8b 00                	mov    (%eax),%eax
c010b312:	99                   	cltd   
c010b313:	eb 10                	jmp    c010b325 <getint+0x45>
    }
    else {
        return va_arg(*ap, int);
c010b315:	8b 45 08             	mov    0x8(%ebp),%eax
c010b318:	8b 00                	mov    (%eax),%eax
c010b31a:	8d 48 04             	lea    0x4(%eax),%ecx
c010b31d:	8b 55 08             	mov    0x8(%ebp),%edx
c010b320:	89 0a                	mov    %ecx,(%edx)
c010b322:	8b 00                	mov    (%eax),%eax
c010b324:	99                   	cltd   
    }
}
c010b325:	5d                   	pop    %ebp
c010b326:	c3                   	ret    

c010b327 <printfmt>:
 * @putch:      specified putch function, print a single character
 * @putdat:     used by @putch function
 * @fmt:        the format string to use
 * */
void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
c010b327:	55                   	push   %ebp
c010b328:	89 e5                	mov    %esp,%ebp
c010b32a:	83 ec 18             	sub    $0x18,%esp
    va_list ap;

    va_start(ap, fmt);
c010b32d:	8d 45 14             	lea    0x14(%ebp),%eax
c010b330:	89 45 f4             	mov    %eax,-0xc(%ebp)
    vprintfmt(putch, putdat, fmt, ap);
c010b333:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b336:	50                   	push   %eax
c010b337:	ff 75 10             	pushl  0x10(%ebp)
c010b33a:	ff 75 0c             	pushl  0xc(%ebp)
c010b33d:	ff 75 08             	pushl  0x8(%ebp)
c010b340:	e8 06 00 00 00       	call   c010b34b <vprintfmt>
c010b345:	83 c4 10             	add    $0x10,%esp
    va_end(ap);
}
c010b348:	90                   	nop
c010b349:	c9                   	leave  
c010b34a:	c3                   	ret    

c010b34b <vprintfmt>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want printfmt() instead.
 * */
void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
c010b34b:	55                   	push   %ebp
c010b34c:	89 e5                	mov    %esp,%ebp
c010b34e:	56                   	push   %esi
c010b34f:	53                   	push   %ebx
c010b350:	83 ec 20             	sub    $0x20,%esp
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c010b353:	eb 17                	jmp    c010b36c <vprintfmt+0x21>
            if (ch == '\0') {
c010b355:	85 db                	test   %ebx,%ebx
c010b357:	0f 84 8e 03 00 00    	je     c010b6eb <vprintfmt+0x3a0>
                return;
            }
            putch(ch, putdat);
c010b35d:	83 ec 08             	sub    $0x8,%esp
c010b360:	ff 75 0c             	pushl  0xc(%ebp)
c010b363:	53                   	push   %ebx
c010b364:	8b 45 08             	mov    0x8(%ebp),%eax
c010b367:	ff d0                	call   *%eax
c010b369:	83 c4 10             	add    $0x10,%esp
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c010b36c:	8b 45 10             	mov    0x10(%ebp),%eax
c010b36f:	8d 50 01             	lea    0x1(%eax),%edx
c010b372:	89 55 10             	mov    %edx,0x10(%ebp)
c010b375:	0f b6 00             	movzbl (%eax),%eax
c010b378:	0f b6 d8             	movzbl %al,%ebx
c010b37b:	83 fb 25             	cmp    $0x25,%ebx
c010b37e:	75 d5                	jne    c010b355 <vprintfmt+0xa>
            }
            putch(ch, putdat);
        }

        // Process a %-escape sequence
        char padc = ' ';
c010b380:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
        width = precision = -1;
c010b384:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
c010b38b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b38e:	89 45 e8             	mov    %eax,-0x18(%ebp)
        lflag = altflag = 0;
c010b391:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c010b398:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b39b:	89 45 e0             	mov    %eax,-0x20(%ebp)

    reswitch:
        switch (ch = *(unsigned char *)fmt ++) {
c010b39e:	8b 45 10             	mov    0x10(%ebp),%eax
c010b3a1:	8d 50 01             	lea    0x1(%eax),%edx
c010b3a4:	89 55 10             	mov    %edx,0x10(%ebp)
c010b3a7:	0f b6 00             	movzbl (%eax),%eax
c010b3aa:	0f b6 d8             	movzbl %al,%ebx
c010b3ad:	8d 43 dd             	lea    -0x23(%ebx),%eax
c010b3b0:	83 f8 55             	cmp    $0x55,%eax
c010b3b3:	0f 87 05 03 00 00    	ja     c010b6be <vprintfmt+0x373>
c010b3b9:	8b 04 85 08 e0 10 c0 	mov    -0x3fef1ff8(,%eax,4),%eax
c010b3c0:	ff e0                	jmp    *%eax

        // flag to pad on the right
        case '-':
            padc = '-';
c010b3c2:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
            goto reswitch;
c010b3c6:	eb d6                	jmp    c010b39e <vprintfmt+0x53>

        // flag to pad with 0's instead of spaces
        case '0':
            padc = '0';
c010b3c8:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
            goto reswitch;
c010b3cc:	eb d0                	jmp    c010b39e <vprintfmt+0x53>

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
c010b3ce:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
                precision = precision * 10 + ch - '0';
c010b3d5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010b3d8:	89 d0                	mov    %edx,%eax
c010b3da:	c1 e0 02             	shl    $0x2,%eax
c010b3dd:	01 d0                	add    %edx,%eax
c010b3df:	01 c0                	add    %eax,%eax
c010b3e1:	01 d8                	add    %ebx,%eax
c010b3e3:	83 e8 30             	sub    $0x30,%eax
c010b3e6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                ch = *fmt;
c010b3e9:	8b 45 10             	mov    0x10(%ebp),%eax
c010b3ec:	0f b6 00             	movzbl (%eax),%eax
c010b3ef:	0f be d8             	movsbl %al,%ebx
                if (ch < '0' || ch > '9') {
c010b3f2:	83 fb 2f             	cmp    $0x2f,%ebx
c010b3f5:	7e 39                	jle    c010b430 <vprintfmt+0xe5>
c010b3f7:	83 fb 39             	cmp    $0x39,%ebx
c010b3fa:	7f 34                	jg     c010b430 <vprintfmt+0xe5>
            padc = '0';
            goto reswitch;

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
c010b3fc:	83 45 10 01          	addl   $0x1,0x10(%ebp)
                precision = precision * 10 + ch - '0';
                ch = *fmt;
                if (ch < '0' || ch > '9') {
                    break;
                }
            }
c010b400:	eb d3                	jmp    c010b3d5 <vprintfmt+0x8a>
            goto process_precision;

        case '*':
            precision = va_arg(ap, int);
c010b402:	8b 45 14             	mov    0x14(%ebp),%eax
c010b405:	8d 50 04             	lea    0x4(%eax),%edx
c010b408:	89 55 14             	mov    %edx,0x14(%ebp)
c010b40b:	8b 00                	mov    (%eax),%eax
c010b40d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            goto process_precision;
c010b410:	eb 1f                	jmp    c010b431 <vprintfmt+0xe6>

        case '.':
            if (width < 0)
c010b412:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010b416:	79 86                	jns    c010b39e <vprintfmt+0x53>
                width = 0;
c010b418:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
            goto reswitch;
c010b41f:	e9 7a ff ff ff       	jmp    c010b39e <vprintfmt+0x53>

        case '#':
            altflag = 1;
c010b424:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
            goto reswitch;
c010b42b:	e9 6e ff ff ff       	jmp    c010b39e <vprintfmt+0x53>
                ch = *fmt;
                if (ch < '0' || ch > '9') {
                    break;
                }
            }
            goto process_precision;
c010b430:	90                   	nop
        case '#':
            altflag = 1;
            goto reswitch;

        process_precision:
            if (width < 0)
c010b431:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010b435:	0f 89 63 ff ff ff    	jns    c010b39e <vprintfmt+0x53>
                width = precision, precision = -1;
c010b43b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b43e:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010b441:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
            goto reswitch;
c010b448:	e9 51 ff ff ff       	jmp    c010b39e <vprintfmt+0x53>

        // long flag (doubled for long long)
        case 'l':
            lflag ++;
c010b44d:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
            goto reswitch;
c010b451:	e9 48 ff ff ff       	jmp    c010b39e <vprintfmt+0x53>

        // character
        case 'c':
            putch(va_arg(ap, int), putdat);
c010b456:	8b 45 14             	mov    0x14(%ebp),%eax
c010b459:	8d 50 04             	lea    0x4(%eax),%edx
c010b45c:	89 55 14             	mov    %edx,0x14(%ebp)
c010b45f:	8b 00                	mov    (%eax),%eax
c010b461:	83 ec 08             	sub    $0x8,%esp
c010b464:	ff 75 0c             	pushl  0xc(%ebp)
c010b467:	50                   	push   %eax
c010b468:	8b 45 08             	mov    0x8(%ebp),%eax
c010b46b:	ff d0                	call   *%eax
c010b46d:	83 c4 10             	add    $0x10,%esp
            break;
c010b470:	e9 71 02 00 00       	jmp    c010b6e6 <vprintfmt+0x39b>

        // error message
        case 'e':
            err = va_arg(ap, int);
c010b475:	8b 45 14             	mov    0x14(%ebp),%eax
c010b478:	8d 50 04             	lea    0x4(%eax),%edx
c010b47b:	89 55 14             	mov    %edx,0x14(%ebp)
c010b47e:	8b 18                	mov    (%eax),%ebx
            if (err < 0) {
c010b480:	85 db                	test   %ebx,%ebx
c010b482:	79 02                	jns    c010b486 <vprintfmt+0x13b>
                err = -err;
c010b484:	f7 db                	neg    %ebx
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
c010b486:	83 fb 18             	cmp    $0x18,%ebx
c010b489:	7f 0b                	jg     c010b496 <vprintfmt+0x14b>
c010b48b:	8b 34 9d 80 df 10 c0 	mov    -0x3fef2080(,%ebx,4),%esi
c010b492:	85 f6                	test   %esi,%esi
c010b494:	75 19                	jne    c010b4af <vprintfmt+0x164>
                printfmt(putch, putdat, "error %d", err);
c010b496:	53                   	push   %ebx
c010b497:	68 f5 df 10 c0       	push   $0xc010dff5
c010b49c:	ff 75 0c             	pushl  0xc(%ebp)
c010b49f:	ff 75 08             	pushl  0x8(%ebp)
c010b4a2:	e8 80 fe ff ff       	call   c010b327 <printfmt>
c010b4a7:	83 c4 10             	add    $0x10,%esp
            }
            else {
                printfmt(putch, putdat, "%s", p);
            }
            break;
c010b4aa:	e9 37 02 00 00       	jmp    c010b6e6 <vprintfmt+0x39b>
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
                printfmt(putch, putdat, "error %d", err);
            }
            else {
                printfmt(putch, putdat, "%s", p);
c010b4af:	56                   	push   %esi
c010b4b0:	68 fe df 10 c0       	push   $0xc010dffe
c010b4b5:	ff 75 0c             	pushl  0xc(%ebp)
c010b4b8:	ff 75 08             	pushl  0x8(%ebp)
c010b4bb:	e8 67 fe ff ff       	call   c010b327 <printfmt>
c010b4c0:	83 c4 10             	add    $0x10,%esp
            }
            break;
c010b4c3:	e9 1e 02 00 00       	jmp    c010b6e6 <vprintfmt+0x39b>

        // string
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
c010b4c8:	8b 45 14             	mov    0x14(%ebp),%eax
c010b4cb:	8d 50 04             	lea    0x4(%eax),%edx
c010b4ce:	89 55 14             	mov    %edx,0x14(%ebp)
c010b4d1:	8b 30                	mov    (%eax),%esi
c010b4d3:	85 f6                	test   %esi,%esi
c010b4d5:	75 05                	jne    c010b4dc <vprintfmt+0x191>
                p = "(null)";
c010b4d7:	be 01 e0 10 c0       	mov    $0xc010e001,%esi
            }
            if (width > 0 && padc != '-') {
c010b4dc:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010b4e0:	7e 76                	jle    c010b558 <vprintfmt+0x20d>
c010b4e2:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
c010b4e6:	74 70                	je     c010b558 <vprintfmt+0x20d>
                for (width -= strnlen(p, precision); width > 0; width --) {
c010b4e8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b4eb:	83 ec 08             	sub    $0x8,%esp
c010b4ee:	50                   	push   %eax
c010b4ef:	56                   	push   %esi
c010b4f0:	e8 17 f8 ff ff       	call   c010ad0c <strnlen>
c010b4f5:	83 c4 10             	add    $0x10,%esp
c010b4f8:	89 c2                	mov    %eax,%edx
c010b4fa:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b4fd:	29 d0                	sub    %edx,%eax
c010b4ff:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010b502:	eb 17                	jmp    c010b51b <vprintfmt+0x1d0>
                    putch(padc, putdat);
c010b504:	0f be 45 db          	movsbl -0x25(%ebp),%eax
c010b508:	83 ec 08             	sub    $0x8,%esp
c010b50b:	ff 75 0c             	pushl  0xc(%ebp)
c010b50e:	50                   	push   %eax
c010b50f:	8b 45 08             	mov    0x8(%ebp),%eax
c010b512:	ff d0                	call   *%eax
c010b514:	83 c4 10             	add    $0x10,%esp
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
                p = "(null)";
            }
            if (width > 0 && padc != '-') {
                for (width -= strnlen(p, precision); width > 0; width --) {
c010b517:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c010b51b:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010b51f:	7f e3                	jg     c010b504 <vprintfmt+0x1b9>
                    putch(padc, putdat);
                }
            }
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c010b521:	eb 35                	jmp    c010b558 <vprintfmt+0x20d>
                if (altflag && (ch < ' ' || ch > '~')) {
c010b523:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010b527:	74 1c                	je     c010b545 <vprintfmt+0x1fa>
c010b529:	83 fb 1f             	cmp    $0x1f,%ebx
c010b52c:	7e 05                	jle    c010b533 <vprintfmt+0x1e8>
c010b52e:	83 fb 7e             	cmp    $0x7e,%ebx
c010b531:	7e 12                	jle    c010b545 <vprintfmt+0x1fa>
                    putch('?', putdat);
c010b533:	83 ec 08             	sub    $0x8,%esp
c010b536:	ff 75 0c             	pushl  0xc(%ebp)
c010b539:	6a 3f                	push   $0x3f
c010b53b:	8b 45 08             	mov    0x8(%ebp),%eax
c010b53e:	ff d0                	call   *%eax
c010b540:	83 c4 10             	add    $0x10,%esp
c010b543:	eb 0f                	jmp    c010b554 <vprintfmt+0x209>
                }
                else {
                    putch(ch, putdat);
c010b545:	83 ec 08             	sub    $0x8,%esp
c010b548:	ff 75 0c             	pushl  0xc(%ebp)
c010b54b:	53                   	push   %ebx
c010b54c:	8b 45 08             	mov    0x8(%ebp),%eax
c010b54f:	ff d0                	call   *%eax
c010b551:	83 c4 10             	add    $0x10,%esp
            if (width > 0 && padc != '-') {
                for (width -= strnlen(p, precision); width > 0; width --) {
                    putch(padc, putdat);
                }
            }
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c010b554:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c010b558:	89 f0                	mov    %esi,%eax
c010b55a:	8d 70 01             	lea    0x1(%eax),%esi
c010b55d:	0f b6 00             	movzbl (%eax),%eax
c010b560:	0f be d8             	movsbl %al,%ebx
c010b563:	85 db                	test   %ebx,%ebx
c010b565:	74 26                	je     c010b58d <vprintfmt+0x242>
c010b567:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010b56b:	78 b6                	js     c010b523 <vprintfmt+0x1d8>
c010b56d:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
c010b571:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010b575:	79 ac                	jns    c010b523 <vprintfmt+0x1d8>
                }
                else {
                    putch(ch, putdat);
                }
            }
            for (; width > 0; width --) {
c010b577:	eb 14                	jmp    c010b58d <vprintfmt+0x242>
                putch(' ', putdat);
c010b579:	83 ec 08             	sub    $0x8,%esp
c010b57c:	ff 75 0c             	pushl  0xc(%ebp)
c010b57f:	6a 20                	push   $0x20
c010b581:	8b 45 08             	mov    0x8(%ebp),%eax
c010b584:	ff d0                	call   *%eax
c010b586:	83 c4 10             	add    $0x10,%esp
                }
                else {
                    putch(ch, putdat);
                }
            }
            for (; width > 0; width --) {
c010b589:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c010b58d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010b591:	7f e6                	jg     c010b579 <vprintfmt+0x22e>
                putch(' ', putdat);
            }
            break;
c010b593:	e9 4e 01 00 00       	jmp    c010b6e6 <vprintfmt+0x39b>

        // (signed) decimal
        case 'd':
            num = getint(&ap, lflag);
c010b598:	83 ec 08             	sub    $0x8,%esp
c010b59b:	ff 75 e0             	pushl  -0x20(%ebp)
c010b59e:	8d 45 14             	lea    0x14(%ebp),%eax
c010b5a1:	50                   	push   %eax
c010b5a2:	e8 39 fd ff ff       	call   c010b2e0 <getint>
c010b5a7:	83 c4 10             	add    $0x10,%esp
c010b5aa:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b5ad:	89 55 f4             	mov    %edx,-0xc(%ebp)
            if ((long long)num < 0) {
c010b5b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b5b3:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b5b6:	85 d2                	test   %edx,%edx
c010b5b8:	79 23                	jns    c010b5dd <vprintfmt+0x292>
                putch('-', putdat);
c010b5ba:	83 ec 08             	sub    $0x8,%esp
c010b5bd:	ff 75 0c             	pushl  0xc(%ebp)
c010b5c0:	6a 2d                	push   $0x2d
c010b5c2:	8b 45 08             	mov    0x8(%ebp),%eax
c010b5c5:	ff d0                	call   *%eax
c010b5c7:	83 c4 10             	add    $0x10,%esp
                num = -(long long)num;
c010b5ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b5cd:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b5d0:	f7 d8                	neg    %eax
c010b5d2:	83 d2 00             	adc    $0x0,%edx
c010b5d5:	f7 da                	neg    %edx
c010b5d7:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b5da:	89 55 f4             	mov    %edx,-0xc(%ebp)
            }
            base = 10;
c010b5dd:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c010b5e4:	e9 9f 00 00 00       	jmp    c010b688 <vprintfmt+0x33d>

        // unsigned decimal
        case 'u':
            num = getuint(&ap, lflag);
c010b5e9:	83 ec 08             	sub    $0x8,%esp
c010b5ec:	ff 75 e0             	pushl  -0x20(%ebp)
c010b5ef:	8d 45 14             	lea    0x14(%ebp),%eax
c010b5f2:	50                   	push   %eax
c010b5f3:	e8 99 fc ff ff       	call   c010b291 <getuint>
c010b5f8:	83 c4 10             	add    $0x10,%esp
c010b5fb:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b5fe:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 10;
c010b601:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c010b608:	eb 7e                	jmp    c010b688 <vprintfmt+0x33d>

        // (unsigned) octal
        case 'o':
            num = getuint(&ap, lflag);
c010b60a:	83 ec 08             	sub    $0x8,%esp
c010b60d:	ff 75 e0             	pushl  -0x20(%ebp)
c010b610:	8d 45 14             	lea    0x14(%ebp),%eax
c010b613:	50                   	push   %eax
c010b614:	e8 78 fc ff ff       	call   c010b291 <getuint>
c010b619:	83 c4 10             	add    $0x10,%esp
c010b61c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b61f:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 8;
c010b622:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
            goto number;
c010b629:	eb 5d                	jmp    c010b688 <vprintfmt+0x33d>

        // pointer
        case 'p':
            putch('0', putdat);
c010b62b:	83 ec 08             	sub    $0x8,%esp
c010b62e:	ff 75 0c             	pushl  0xc(%ebp)
c010b631:	6a 30                	push   $0x30
c010b633:	8b 45 08             	mov    0x8(%ebp),%eax
c010b636:	ff d0                	call   *%eax
c010b638:	83 c4 10             	add    $0x10,%esp
            putch('x', putdat);
c010b63b:	83 ec 08             	sub    $0x8,%esp
c010b63e:	ff 75 0c             	pushl  0xc(%ebp)
c010b641:	6a 78                	push   $0x78
c010b643:	8b 45 08             	mov    0x8(%ebp),%eax
c010b646:	ff d0                	call   *%eax
c010b648:	83 c4 10             	add    $0x10,%esp
            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
c010b64b:	8b 45 14             	mov    0x14(%ebp),%eax
c010b64e:	8d 50 04             	lea    0x4(%eax),%edx
c010b651:	89 55 14             	mov    %edx,0x14(%ebp)
c010b654:	8b 00                	mov    (%eax),%eax
c010b656:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b659:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            base = 16;
c010b660:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
            goto number;
c010b667:	eb 1f                	jmp    c010b688 <vprintfmt+0x33d>

        // (unsigned) hexadecimal
        case 'x':
            num = getuint(&ap, lflag);
c010b669:	83 ec 08             	sub    $0x8,%esp
c010b66c:	ff 75 e0             	pushl  -0x20(%ebp)
c010b66f:	8d 45 14             	lea    0x14(%ebp),%eax
c010b672:	50                   	push   %eax
c010b673:	e8 19 fc ff ff       	call   c010b291 <getuint>
c010b678:	83 c4 10             	add    $0x10,%esp
c010b67b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b67e:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 16;
c010b681:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
        number:
            printnum(putch, putdat, num, base, width, padc);
c010b688:	0f be 55 db          	movsbl -0x25(%ebp),%edx
c010b68c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b68f:	83 ec 04             	sub    $0x4,%esp
c010b692:	52                   	push   %edx
c010b693:	ff 75 e8             	pushl  -0x18(%ebp)
c010b696:	50                   	push   %eax
c010b697:	ff 75 f4             	pushl  -0xc(%ebp)
c010b69a:	ff 75 f0             	pushl  -0x10(%ebp)
c010b69d:	ff 75 0c             	pushl  0xc(%ebp)
c010b6a0:	ff 75 08             	pushl  0x8(%ebp)
c010b6a3:	e8 f8 fa ff ff       	call   c010b1a0 <printnum>
c010b6a8:	83 c4 20             	add    $0x20,%esp
            break;
c010b6ab:	eb 39                	jmp    c010b6e6 <vprintfmt+0x39b>

        // escaped '%' character
        case '%':
            putch(ch, putdat);
c010b6ad:	83 ec 08             	sub    $0x8,%esp
c010b6b0:	ff 75 0c             	pushl  0xc(%ebp)
c010b6b3:	53                   	push   %ebx
c010b6b4:	8b 45 08             	mov    0x8(%ebp),%eax
c010b6b7:	ff d0                	call   *%eax
c010b6b9:	83 c4 10             	add    $0x10,%esp
            break;
c010b6bc:	eb 28                	jmp    c010b6e6 <vprintfmt+0x39b>

        // unrecognized escape sequence - just print it literally
        default:
            putch('%', putdat);
c010b6be:	83 ec 08             	sub    $0x8,%esp
c010b6c1:	ff 75 0c             	pushl  0xc(%ebp)
c010b6c4:	6a 25                	push   $0x25
c010b6c6:	8b 45 08             	mov    0x8(%ebp),%eax
c010b6c9:	ff d0                	call   *%eax
c010b6cb:	83 c4 10             	add    $0x10,%esp
            for (fmt --; fmt[-1] != '%'; fmt --)
c010b6ce:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c010b6d2:	eb 04                	jmp    c010b6d8 <vprintfmt+0x38d>
c010b6d4:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c010b6d8:	8b 45 10             	mov    0x10(%ebp),%eax
c010b6db:	83 e8 01             	sub    $0x1,%eax
c010b6de:	0f b6 00             	movzbl (%eax),%eax
c010b6e1:	3c 25                	cmp    $0x25,%al
c010b6e3:	75 ef                	jne    c010b6d4 <vprintfmt+0x389>
                /* do nothing */;
            break;
c010b6e5:	90                   	nop
        }
    }
c010b6e6:	e9 68 fc ff ff       	jmp    c010b353 <vprintfmt+0x8>
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
            if (ch == '\0') {
                return;
c010b6eb:	90                   	nop
            for (fmt --; fmt[-1] != '%'; fmt --)
                /* do nothing */;
            break;
        }
    }
}
c010b6ec:	8d 65 f8             	lea    -0x8(%ebp),%esp
c010b6ef:	5b                   	pop    %ebx
c010b6f0:	5e                   	pop    %esi
c010b6f1:	5d                   	pop    %ebp
c010b6f2:	c3                   	ret    

c010b6f3 <sprintputch>:
 * sprintputch - 'print' a single character in a buffer
 * @ch:         the character will be printed
 * @b:          the buffer to place the character @ch
 * */
static void
sprintputch(int ch, struct sprintbuf *b) {
c010b6f3:	55                   	push   %ebp
c010b6f4:	89 e5                	mov    %esp,%ebp
    b->cnt ++;
c010b6f6:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b6f9:	8b 40 08             	mov    0x8(%eax),%eax
c010b6fc:	8d 50 01             	lea    0x1(%eax),%edx
c010b6ff:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b702:	89 50 08             	mov    %edx,0x8(%eax)
    if (b->buf < b->ebuf) {
c010b705:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b708:	8b 10                	mov    (%eax),%edx
c010b70a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b70d:	8b 40 04             	mov    0x4(%eax),%eax
c010b710:	39 c2                	cmp    %eax,%edx
c010b712:	73 12                	jae    c010b726 <sprintputch+0x33>
        *b->buf ++ = ch;
c010b714:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b717:	8b 00                	mov    (%eax),%eax
c010b719:	8d 48 01             	lea    0x1(%eax),%ecx
c010b71c:	8b 55 0c             	mov    0xc(%ebp),%edx
c010b71f:	89 0a                	mov    %ecx,(%edx)
c010b721:	8b 55 08             	mov    0x8(%ebp),%edx
c010b724:	88 10                	mov    %dl,(%eax)
    }
}
c010b726:	90                   	nop
c010b727:	5d                   	pop    %ebp
c010b728:	c3                   	ret    

c010b729 <snprintf>:
 * @str:        the buffer to place the result into
 * @size:       the size of buffer, including the trailing null space
 * @fmt:        the format string to use
 * */
int
snprintf(char *str, size_t size, const char *fmt, ...) {
c010b729:	55                   	push   %ebp
c010b72a:	89 e5                	mov    %esp,%ebp
c010b72c:	83 ec 18             	sub    $0x18,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c010b72f:	8d 45 14             	lea    0x14(%ebp),%eax
c010b732:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cnt = vsnprintf(str, size, fmt, ap);
c010b735:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b738:	50                   	push   %eax
c010b739:	ff 75 10             	pushl  0x10(%ebp)
c010b73c:	ff 75 0c             	pushl  0xc(%ebp)
c010b73f:	ff 75 08             	pushl  0x8(%ebp)
c010b742:	e8 0b 00 00 00       	call   c010b752 <vsnprintf>
c010b747:	83 c4 10             	add    $0x10,%esp
c010b74a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c010b74d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010b750:	c9                   	leave  
c010b751:	c3                   	ret    

c010b752 <vsnprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want snprintf() instead.
 * */
int
vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
c010b752:	55                   	push   %ebp
c010b753:	89 e5                	mov    %esp,%ebp
c010b755:	83 ec 18             	sub    $0x18,%esp
    struct sprintbuf b = {str, str + size - 1, 0};
c010b758:	8b 45 08             	mov    0x8(%ebp),%eax
c010b75b:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010b75e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b761:	8d 50 ff             	lea    -0x1(%eax),%edx
c010b764:	8b 45 08             	mov    0x8(%ebp),%eax
c010b767:	01 d0                	add    %edx,%eax
c010b769:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b76c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if (str == NULL || b.buf > b.ebuf) {
c010b773:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b777:	74 0a                	je     c010b783 <vsnprintf+0x31>
c010b779:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010b77c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b77f:	39 c2                	cmp    %eax,%edx
c010b781:	76 07                	jbe    c010b78a <vsnprintf+0x38>
        return -E_INVAL;
c010b783:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010b788:	eb 20                	jmp    c010b7aa <vsnprintf+0x58>
    }
    // print the string to the buffer
    vprintfmt((void*)sprintputch, &b, fmt, ap);
c010b78a:	ff 75 14             	pushl  0x14(%ebp)
c010b78d:	ff 75 10             	pushl  0x10(%ebp)
c010b790:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010b793:	50                   	push   %eax
c010b794:	68 f3 b6 10 c0       	push   $0xc010b6f3
c010b799:	e8 ad fb ff ff       	call   c010b34b <vprintfmt>
c010b79e:	83 c4 10             	add    $0x10,%esp
    // null terminate the buffer
    *b.buf = '\0';
c010b7a1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b7a4:	c6 00 00             	movb   $0x0,(%eax)
    return b.cnt;
c010b7a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010b7aa:	c9                   	leave  
c010b7ab:	c3                   	ret    

c010b7ac <hash32>:
 * @bits:   the number of bits in a return value
 *
 * High bits are more random, so we use them.
 * */
uint32_t
hash32(uint32_t val, unsigned int bits) {
c010b7ac:	55                   	push   %ebp
c010b7ad:	89 e5                	mov    %esp,%ebp
c010b7af:	83 ec 10             	sub    $0x10,%esp
    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
c010b7b2:	8b 45 08             	mov    0x8(%ebp),%eax
c010b7b5:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
c010b7bb:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return (hash >> (32 - bits));
c010b7be:	b8 20 00 00 00       	mov    $0x20,%eax
c010b7c3:	2b 45 0c             	sub    0xc(%ebp),%eax
c010b7c6:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010b7c9:	89 c1                	mov    %eax,%ecx
c010b7cb:	d3 ea                	shr    %cl,%edx
c010b7cd:	89 d0                	mov    %edx,%eax
}
c010b7cf:	c9                   	leave  
c010b7d0:	c3                   	ret    

c010b7d1 <rand>:
 * rand - returns a pseudo-random integer
 *
 * The rand() function return a value in the range [0, RAND_MAX].
 * */
int
rand(void) {
c010b7d1:	55                   	push   %ebp
c010b7d2:	89 e5                	mov    %esp,%ebp
c010b7d4:	57                   	push   %edi
c010b7d5:	56                   	push   %esi
c010b7d6:	53                   	push   %ebx
c010b7d7:	83 ec 24             	sub    $0x24,%esp
    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
c010b7da:	a1 a0 ce 12 c0       	mov    0xc012cea0,%eax
c010b7df:	8b 15 a4 ce 12 c0    	mov    0xc012cea4,%edx
c010b7e5:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
c010b7eb:	6b f0 05             	imul   $0x5,%eax,%esi
c010b7ee:	01 fe                	add    %edi,%esi
c010b7f0:	bf 6d e6 ec de       	mov    $0xdeece66d,%edi
c010b7f5:	f7 e7                	mul    %edi
c010b7f7:	01 d6                	add    %edx,%esi
c010b7f9:	89 f2                	mov    %esi,%edx
c010b7fb:	83 c0 0b             	add    $0xb,%eax
c010b7fe:	83 d2 00             	adc    $0x0,%edx
c010b801:	89 c7                	mov    %eax,%edi
c010b803:	83 e7 ff             	and    $0xffffffff,%edi
c010b806:	89 f9                	mov    %edi,%ecx
c010b808:	0f b7 da             	movzwl %dx,%ebx
c010b80b:	89 0d a0 ce 12 c0    	mov    %ecx,0xc012cea0
c010b811:	89 1d a4 ce 12 c0    	mov    %ebx,0xc012cea4
    unsigned long long result = (next >> 12);
c010b817:	a1 a0 ce 12 c0       	mov    0xc012cea0,%eax
c010b81c:	8b 15 a4 ce 12 c0    	mov    0xc012cea4,%edx
c010b822:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c010b826:	c1 ea 0c             	shr    $0xc,%edx
c010b829:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010b82c:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    return (int)do_div(result, RAND_MAX + 1);
c010b82f:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
c010b836:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b839:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010b83c:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010b83f:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010b842:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b845:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010b848:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010b84c:	74 1c                	je     c010b86a <rand+0x99>
c010b84e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b851:	ba 00 00 00 00       	mov    $0x0,%edx
c010b856:	f7 75 dc             	divl   -0x24(%ebp)
c010b859:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010b85c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b85f:	ba 00 00 00 00       	mov    $0x0,%edx
c010b864:	f7 75 dc             	divl   -0x24(%ebp)
c010b867:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010b86a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b86d:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010b870:	f7 75 dc             	divl   -0x24(%ebp)
c010b873:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010b876:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010b879:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b87c:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010b87f:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010b882:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c010b885:	8b 45 d4             	mov    -0x2c(%ebp),%eax
}
c010b888:	83 c4 24             	add    $0x24,%esp
c010b88b:	5b                   	pop    %ebx
c010b88c:	5e                   	pop    %esi
c010b88d:	5f                   	pop    %edi
c010b88e:	5d                   	pop    %ebp
c010b88f:	c3                   	ret    

c010b890 <srand>:
/* *
 * srand - seed the random number generator with the given number
 * @seed:   the required seed number
 * */
void
srand(unsigned int seed) {
c010b890:	55                   	push   %ebp
c010b891:	89 e5                	mov    %esp,%ebp
    next = seed;
c010b893:	8b 45 08             	mov    0x8(%ebp),%eax
c010b896:	ba 00 00 00 00       	mov    $0x0,%edx
c010b89b:	a3 a0 ce 12 c0       	mov    %eax,0xc012cea0
c010b8a0:	89 15 a4 ce 12 c0    	mov    %edx,0xc012cea4
}
c010b8a6:	90                   	nop
c010b8a7:	5d                   	pop    %ebp
c010b8a8:	c3                   	ret    

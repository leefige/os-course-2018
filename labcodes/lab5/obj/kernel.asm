
bin/kernel:     file format elf32-i386


Disassembly of section .text:

c0100000 <kern_entry>:

.text
.globl kern_entry
kern_entry:
    # load pa of boot pgdir
    movl $REALLOC(__boot_pgdir), %eax
c0100000:	b8 00 d0 19 00       	mov    $0x19d000,%eax
    movl %eax, %cr3
c0100005:	0f 22 d8             	mov    %eax,%cr3

    # enable paging
    movl %cr0, %eax
c0100008:	0f 20 c0             	mov    %cr0,%eax
    orl $(CR0_PE | CR0_PG | CR0_AM | CR0_WP | CR0_NE | CR0_TS | CR0_EM | CR0_MP), %eax
c010000b:	0d 2f 00 05 80       	or     $0x8005002f,%eax
    andl $~(CR0_TS | CR0_EM), %eax
c0100010:	83 e0 f3             	and    $0xfffffff3,%eax
    movl %eax, %cr0
c0100013:	0f 22 c0             	mov    %eax,%cr0

    # update eip
    # now, eip = 0x1.....
    leal next, %eax
c0100016:	8d 05 1e 00 10 c0    	lea    0xc010001e,%eax
    # set eip = KERNBASE + 0x1.....
    jmp *%eax
c010001c:	ff e0                	jmp    *%eax

c010001e <next>:
next:

    # unmap va 0 ~ 4M, it's temporary mapping
    xorl %eax, %eax
c010001e:	31 c0                	xor    %eax,%eax
    movl %eax, __boot_pgdir
c0100020:	a3 00 d0 19 c0       	mov    %eax,0xc019d000

    # set ebp, esp
    movl $0x0, %ebp
c0100025:	bd 00 00 00 00       	mov    $0x0,%ebp
    # the kernel stack region is from bootstack -- bootstacktop,
    # the kernel stack size is KSTACKSIZE (8KB)defined in memlayout.h
    movl $bootstacktop, %esp
c010002a:	bc 00 b0 12 c0       	mov    $0xc012b000,%esp
    # now kernel stack is ready , call the first C function
    call kern_init
c010002f:	e8 02 00 00 00       	call   c0100036 <kern_init>

c0100034 <spin>:

# should never get here
spin:
    jmp spin
c0100034:	eb fe                	jmp    c0100034 <spin>

c0100036 <kern_init>:
int kern_init(void) __attribute__((noreturn));
void grade_backtrace(void);
static void lab1_switch_test(void);

int
kern_init(void) {
c0100036:	55                   	push   %ebp
c0100037:	89 e5                	mov    %esp,%ebp
c0100039:	83 ec 18             	sub    $0x18,%esp
    extern char edata[], end[];
    memset(edata, 0, end - edata);
c010003c:	ba a4 21 1a c0       	mov    $0xc01a21a4,%edx
c0100041:	b8 00 f0 19 c0       	mov    $0xc019f000,%eax
c0100046:	29 c2                	sub    %eax,%edx
c0100048:	89 d0                	mov    %edx,%eax
c010004a:	83 ec 04             	sub    $0x4,%esp
c010004d:	50                   	push   %eax
c010004e:	6a 00                	push   $0x0
c0100050:	68 00 f0 19 c0       	push   $0xc019f000
c0100055:	e8 e6 b2 00 00       	call   c010b340 <memset>
c010005a:	83 c4 10             	add    $0x10,%esp

    cons_init();                // init the console
c010005d:	e8 9f 1e 00 00       	call   c0101f01 <cons_init>

    const char *message = "(THU.CST) os is loading ...";
c0100062:	c7 45 f4 e0 bb 10 c0 	movl   $0xc010bbe0,-0xc(%ebp)
    cprintf("%s\n\n", message);
c0100069:	83 ec 08             	sub    $0x8,%esp
c010006c:	ff 75 f4             	pushl  -0xc(%ebp)
c010006f:	68 fc bb 10 c0       	push   $0xc010bbfc
c0100074:	e8 19 02 00 00       	call   c0100292 <cprintf>
c0100079:	83 c4 10             	add    $0x10,%esp

    print_kerninfo();
c010007c:	e8 87 09 00 00       	call   c0100a08 <print_kerninfo>

    grade_backtrace();
c0100081:	e8 8b 00 00 00       	call   c0100111 <grade_backtrace>

    pmm_init();                 // init physical memory management
c0100086:	e8 f7 7c 00 00       	call   c0107d82 <pmm_init>

    pic_init();                 // init interrupt controller
c010008b:	e8 e3 1f 00 00       	call   c0102073 <pic_init>
    idt_init();                 // init interrupt descriptor table
c0100090:	e8 65 21 00 00       	call   c01021fa <idt_init>

    vmm_init();                 // init virtual memory management
c0100095:	e8 ef 43 00 00       	call   c0104489 <vmm_init>
    proc_init();                // init process table
c010009a:	e8 53 aa 00 00       	call   c010aaf2 <proc_init>
    
    ide_init();                 // init ide devices
c010009f:	e8 2c 0e 00 00       	call   c0100ed0 <ide_init>
    swap_init();                // init swap
c01000a4:	e8 fe 59 00 00       	call   c0105aa7 <swap_init>

    clock_init();               // init clock interrupt
c01000a9:	e8 fa 15 00 00       	call   c01016a8 <clock_init>
    intr_enable();              // enable irq interrupt
c01000ae:	e8 fd 20 00 00       	call   c01021b0 <intr_enable>

    //LAB1: CAHLLENGE 1 If you try to do it, uncomment lab1_switch_test()
    // user/kernel mode switch test
    //lab1_switch_test();
    
    cpu_idle();                 // run idle process
c01000b3:	e8 d7 ab 00 00       	call   c010ac8f <cpu_idle>

c01000b8 <grade_backtrace2>:
}

void __attribute__((noinline))
grade_backtrace2(int arg0, int arg1, int arg2, int arg3) {
c01000b8:	55                   	push   %ebp
c01000b9:	89 e5                	mov    %esp,%ebp
c01000bb:	83 ec 08             	sub    $0x8,%esp
    mon_backtrace(0, NULL, NULL);
c01000be:	83 ec 04             	sub    $0x4,%esp
c01000c1:	6a 00                	push   $0x0
c01000c3:	6a 00                	push   $0x0
c01000c5:	6a 00                	push   $0x0
c01000c7:	e8 98 0d 00 00       	call   c0100e64 <mon_backtrace>
c01000cc:	83 c4 10             	add    $0x10,%esp
}
c01000cf:	90                   	nop
c01000d0:	c9                   	leave  
c01000d1:	c3                   	ret    

c01000d2 <grade_backtrace1>:

void __attribute__((noinline))
grade_backtrace1(int arg0, int arg1) {
c01000d2:	55                   	push   %ebp
c01000d3:	89 e5                	mov    %esp,%ebp
c01000d5:	53                   	push   %ebx
c01000d6:	83 ec 04             	sub    $0x4,%esp
    grade_backtrace2(arg0, (int)&arg0, arg1, (int)&arg1);
c01000d9:	8d 4d 0c             	lea    0xc(%ebp),%ecx
c01000dc:	8b 55 0c             	mov    0xc(%ebp),%edx
c01000df:	8d 5d 08             	lea    0x8(%ebp),%ebx
c01000e2:	8b 45 08             	mov    0x8(%ebp),%eax
c01000e5:	51                   	push   %ecx
c01000e6:	52                   	push   %edx
c01000e7:	53                   	push   %ebx
c01000e8:	50                   	push   %eax
c01000e9:	e8 ca ff ff ff       	call   c01000b8 <grade_backtrace2>
c01000ee:	83 c4 10             	add    $0x10,%esp
}
c01000f1:	90                   	nop
c01000f2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c01000f5:	c9                   	leave  
c01000f6:	c3                   	ret    

c01000f7 <grade_backtrace0>:

void __attribute__((noinline))
grade_backtrace0(int arg0, int arg1, int arg2) {
c01000f7:	55                   	push   %ebp
c01000f8:	89 e5                	mov    %esp,%ebp
c01000fa:	83 ec 08             	sub    $0x8,%esp
    grade_backtrace1(arg0, arg2);
c01000fd:	83 ec 08             	sub    $0x8,%esp
c0100100:	ff 75 10             	pushl  0x10(%ebp)
c0100103:	ff 75 08             	pushl  0x8(%ebp)
c0100106:	e8 c7 ff ff ff       	call   c01000d2 <grade_backtrace1>
c010010b:	83 c4 10             	add    $0x10,%esp
}
c010010e:	90                   	nop
c010010f:	c9                   	leave  
c0100110:	c3                   	ret    

c0100111 <grade_backtrace>:

void
grade_backtrace(void) {
c0100111:	55                   	push   %ebp
c0100112:	89 e5                	mov    %esp,%ebp
c0100114:	83 ec 08             	sub    $0x8,%esp
    grade_backtrace0(0, (int)kern_init, 0xffff0000);
c0100117:	b8 36 00 10 c0       	mov    $0xc0100036,%eax
c010011c:	83 ec 04             	sub    $0x4,%esp
c010011f:	68 00 00 ff ff       	push   $0xffff0000
c0100124:	50                   	push   %eax
c0100125:	6a 00                	push   $0x0
c0100127:	e8 cb ff ff ff       	call   c01000f7 <grade_backtrace0>
c010012c:	83 c4 10             	add    $0x10,%esp
}
c010012f:	90                   	nop
c0100130:	c9                   	leave  
c0100131:	c3                   	ret    

c0100132 <lab1_print_cur_status>:

static void
lab1_print_cur_status(void) {
c0100132:	55                   	push   %ebp
c0100133:	89 e5                	mov    %esp,%ebp
c0100135:	83 ec 18             	sub    $0x18,%esp
    static int round = 0;
    uint16_t reg1, reg2, reg3, reg4;
    asm volatile (
c0100138:	8c 4d f6             	mov    %cs,-0xa(%ebp)
c010013b:	8c 5d f4             	mov    %ds,-0xc(%ebp)
c010013e:	8c 45 f2             	mov    %es,-0xe(%ebp)
c0100141:	8c 55 f0             	mov    %ss,-0x10(%ebp)
            "mov %%cs, %0;"
            "mov %%ds, %1;"
            "mov %%es, %2;"
            "mov %%ss, %3;"
            : "=m"(reg1), "=m"(reg2), "=m"(reg3), "=m"(reg4));
    cprintf("%d: @ring %d\n", round, reg1 & 3);
c0100144:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100148:	0f b7 c0             	movzwl %ax,%eax
c010014b:	83 e0 03             	and    $0x3,%eax
c010014e:	89 c2                	mov    %eax,%edx
c0100150:	a1 00 f0 19 c0       	mov    0xc019f000,%eax
c0100155:	83 ec 04             	sub    $0x4,%esp
c0100158:	52                   	push   %edx
c0100159:	50                   	push   %eax
c010015a:	68 01 bc 10 c0       	push   $0xc010bc01
c010015f:	e8 2e 01 00 00       	call   c0100292 <cprintf>
c0100164:	83 c4 10             	add    $0x10,%esp
    cprintf("%d:  cs = %x\n", round, reg1);
c0100167:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010016b:	0f b7 d0             	movzwl %ax,%edx
c010016e:	a1 00 f0 19 c0       	mov    0xc019f000,%eax
c0100173:	83 ec 04             	sub    $0x4,%esp
c0100176:	52                   	push   %edx
c0100177:	50                   	push   %eax
c0100178:	68 0f bc 10 c0       	push   $0xc010bc0f
c010017d:	e8 10 01 00 00       	call   c0100292 <cprintf>
c0100182:	83 c4 10             	add    $0x10,%esp
    cprintf("%d:  ds = %x\n", round, reg2);
c0100185:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c0100189:	0f b7 d0             	movzwl %ax,%edx
c010018c:	a1 00 f0 19 c0       	mov    0xc019f000,%eax
c0100191:	83 ec 04             	sub    $0x4,%esp
c0100194:	52                   	push   %edx
c0100195:	50                   	push   %eax
c0100196:	68 1d bc 10 c0       	push   $0xc010bc1d
c010019b:	e8 f2 00 00 00       	call   c0100292 <cprintf>
c01001a0:	83 c4 10             	add    $0x10,%esp
    cprintf("%d:  es = %x\n", round, reg3);
c01001a3:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01001a7:	0f b7 d0             	movzwl %ax,%edx
c01001aa:	a1 00 f0 19 c0       	mov    0xc019f000,%eax
c01001af:	83 ec 04             	sub    $0x4,%esp
c01001b2:	52                   	push   %edx
c01001b3:	50                   	push   %eax
c01001b4:	68 2b bc 10 c0       	push   $0xc010bc2b
c01001b9:	e8 d4 00 00 00       	call   c0100292 <cprintf>
c01001be:	83 c4 10             	add    $0x10,%esp
    cprintf("%d:  ss = %x\n", round, reg4);
c01001c1:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c01001c5:	0f b7 d0             	movzwl %ax,%edx
c01001c8:	a1 00 f0 19 c0       	mov    0xc019f000,%eax
c01001cd:	83 ec 04             	sub    $0x4,%esp
c01001d0:	52                   	push   %edx
c01001d1:	50                   	push   %eax
c01001d2:	68 39 bc 10 c0       	push   $0xc010bc39
c01001d7:	e8 b6 00 00 00       	call   c0100292 <cprintf>
c01001dc:	83 c4 10             	add    $0x10,%esp
    round ++;
c01001df:	a1 00 f0 19 c0       	mov    0xc019f000,%eax
c01001e4:	83 c0 01             	add    $0x1,%eax
c01001e7:	a3 00 f0 19 c0       	mov    %eax,0xc019f000
}
c01001ec:	90                   	nop
c01001ed:	c9                   	leave  
c01001ee:	c3                   	ret    

c01001ef <lab1_switch_to_user>:

static void
lab1_switch_to_user(void) {
c01001ef:	55                   	push   %ebp
c01001f0:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 : TODO
    asm volatile (
c01001f2:	cd 78                	int    $0x78
c01001f4:	89 ec                	mov    %ebp,%esp
	    "int %0;"
        "movl %%ebp, %%esp"
	    : 
	    : "i"(T_SWITCH_TOU)
	);
}
c01001f6:	90                   	nop
c01001f7:	5d                   	pop    %ebp
c01001f8:	c3                   	ret    

c01001f9 <lab1_switch_to_kernel>:

static void
lab1_switch_to_kernel(void) {
c01001f9:	55                   	push   %ebp
c01001fa:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 :  TODO
    // cprintf("in lab1_switch_to_kernel\n");
    asm volatile (
c01001fc:	cd 79                	int    $0x79
c01001fe:	89 ec                	mov    %ebp,%esp
	    "int %0;"
        "movl %%ebp, %%esp"
        : 
	    : "i"(T_SWITCH_TOK)
	);
}
c0100200:	90                   	nop
c0100201:	5d                   	pop    %ebp
c0100202:	c3                   	ret    

c0100203 <lab1_switch_test>:

static void
lab1_switch_test(void) {
c0100203:	55                   	push   %ebp
c0100204:	89 e5                	mov    %esp,%ebp
c0100206:	83 ec 08             	sub    $0x8,%esp
    lab1_print_cur_status();
c0100209:	e8 24 ff ff ff       	call   c0100132 <lab1_print_cur_status>
    cprintf("+++ switch to  user  mode +++\n");
c010020e:	83 ec 0c             	sub    $0xc,%esp
c0100211:	68 48 bc 10 c0       	push   $0xc010bc48
c0100216:	e8 77 00 00 00       	call   c0100292 <cprintf>
c010021b:	83 c4 10             	add    $0x10,%esp
    lab1_switch_to_user();
c010021e:	e8 cc ff ff ff       	call   c01001ef <lab1_switch_to_user>
    lab1_print_cur_status();
c0100223:	e8 0a ff ff ff       	call   c0100132 <lab1_print_cur_status>
    cprintf("+++ switch to kernel mode +++\n");
c0100228:	83 ec 0c             	sub    $0xc,%esp
c010022b:	68 68 bc 10 c0       	push   $0xc010bc68
c0100230:	e8 5d 00 00 00       	call   c0100292 <cprintf>
c0100235:	83 c4 10             	add    $0x10,%esp
    lab1_switch_to_kernel();
c0100238:	e8 bc ff ff ff       	call   c01001f9 <lab1_switch_to_kernel>
    lab1_print_cur_status();
c010023d:	e8 f0 fe ff ff       	call   c0100132 <lab1_print_cur_status>
}
c0100242:	90                   	nop
c0100243:	c9                   	leave  
c0100244:	c3                   	ret    

c0100245 <cputch>:
/* *
 * cputch - writes a single character @c to stdout, and it will
 * increace the value of counter pointed by @cnt.
 * */
static void
cputch(int c, int *cnt) {
c0100245:	55                   	push   %ebp
c0100246:	89 e5                	mov    %esp,%ebp
c0100248:	83 ec 08             	sub    $0x8,%esp
    cons_putc(c);
c010024b:	83 ec 0c             	sub    $0xc,%esp
c010024e:	ff 75 08             	pushl  0x8(%ebp)
c0100251:	e8 dc 1c 00 00       	call   c0101f32 <cons_putc>
c0100256:	83 c4 10             	add    $0x10,%esp
    (*cnt) ++;
c0100259:	8b 45 0c             	mov    0xc(%ebp),%eax
c010025c:	8b 00                	mov    (%eax),%eax
c010025e:	8d 50 01             	lea    0x1(%eax),%edx
c0100261:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100264:	89 10                	mov    %edx,(%eax)
}
c0100266:	90                   	nop
c0100267:	c9                   	leave  
c0100268:	c3                   	ret    

c0100269 <vcprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want cprintf() instead.
 * */
int
vcprintf(const char *fmt, va_list ap) {
c0100269:	55                   	push   %ebp
c010026a:	89 e5                	mov    %esp,%ebp
c010026c:	83 ec 18             	sub    $0x18,%esp
    int cnt = 0;
c010026f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    vprintfmt((void*)cputch, &cnt, fmt, ap);
c0100276:	ff 75 0c             	pushl  0xc(%ebp)
c0100279:	ff 75 08             	pushl  0x8(%ebp)
c010027c:	8d 45 f4             	lea    -0xc(%ebp),%eax
c010027f:	50                   	push   %eax
c0100280:	68 45 02 10 c0       	push   $0xc0100245
c0100285:	e8 ec b3 00 00       	call   c010b676 <vprintfmt>
c010028a:	83 c4 10             	add    $0x10,%esp
    return cnt;
c010028d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100290:	c9                   	leave  
c0100291:	c3                   	ret    

c0100292 <cprintf>:
 *
 * The return value is the number of characters which would be
 * written to stdout.
 * */
int
cprintf(const char *fmt, ...) {
c0100292:	55                   	push   %ebp
c0100293:	89 e5                	mov    %esp,%ebp
c0100295:	83 ec 18             	sub    $0x18,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c0100298:	8d 45 0c             	lea    0xc(%ebp),%eax
c010029b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cnt = vcprintf(fmt, ap);
c010029e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002a1:	83 ec 08             	sub    $0x8,%esp
c01002a4:	50                   	push   %eax
c01002a5:	ff 75 08             	pushl  0x8(%ebp)
c01002a8:	e8 bc ff ff ff       	call   c0100269 <vcprintf>
c01002ad:	83 c4 10             	add    $0x10,%esp
c01002b0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c01002b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01002b6:	c9                   	leave  
c01002b7:	c3                   	ret    

c01002b8 <cputchar>:

/* cputchar - writes a single character to stdout */
void
cputchar(int c) {
c01002b8:	55                   	push   %ebp
c01002b9:	89 e5                	mov    %esp,%ebp
c01002bb:	83 ec 08             	sub    $0x8,%esp
    cons_putc(c);
c01002be:	83 ec 0c             	sub    $0xc,%esp
c01002c1:	ff 75 08             	pushl  0x8(%ebp)
c01002c4:	e8 69 1c 00 00       	call   c0101f32 <cons_putc>
c01002c9:	83 c4 10             	add    $0x10,%esp
}
c01002cc:	90                   	nop
c01002cd:	c9                   	leave  
c01002ce:	c3                   	ret    

c01002cf <cputs>:
/* *
 * cputs- writes the string pointed by @str to stdout and
 * appends a newline character.
 * */
int
cputs(const char *str) {
c01002cf:	55                   	push   %ebp
c01002d0:	89 e5                	mov    %esp,%ebp
c01002d2:	83 ec 18             	sub    $0x18,%esp
    int cnt = 0;
c01002d5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    char c;
    while ((c = *str ++) != '\0') {
c01002dc:	eb 14                	jmp    c01002f2 <cputs+0x23>
        cputch(c, &cnt);
c01002de:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
c01002e2:	83 ec 08             	sub    $0x8,%esp
c01002e5:	8d 55 f0             	lea    -0x10(%ebp),%edx
c01002e8:	52                   	push   %edx
c01002e9:	50                   	push   %eax
c01002ea:	e8 56 ff ff ff       	call   c0100245 <cputch>
c01002ef:	83 c4 10             	add    $0x10,%esp
 * */
int
cputs(const char *str) {
    int cnt = 0;
    char c;
    while ((c = *str ++) != '\0') {
c01002f2:	8b 45 08             	mov    0x8(%ebp),%eax
c01002f5:	8d 50 01             	lea    0x1(%eax),%edx
c01002f8:	89 55 08             	mov    %edx,0x8(%ebp)
c01002fb:	0f b6 00             	movzbl (%eax),%eax
c01002fe:	88 45 f7             	mov    %al,-0x9(%ebp)
c0100301:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
c0100305:	75 d7                	jne    c01002de <cputs+0xf>
        cputch(c, &cnt);
    }
    cputch('\n', &cnt);
c0100307:	83 ec 08             	sub    $0x8,%esp
c010030a:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010030d:	50                   	push   %eax
c010030e:	6a 0a                	push   $0xa
c0100310:	e8 30 ff ff ff       	call   c0100245 <cputch>
c0100315:	83 c4 10             	add    $0x10,%esp
    return cnt;
c0100318:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010031b:	c9                   	leave  
c010031c:	c3                   	ret    

c010031d <getchar>:

/* getchar - reads a single non-zero character from stdin */
int
getchar(void) {
c010031d:	55                   	push   %ebp
c010031e:	89 e5                	mov    %esp,%ebp
c0100320:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = cons_getc()) == 0)
c0100323:	e8 53 1c 00 00       	call   c0101f7b <cons_getc>
c0100328:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010032b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010032f:	74 f2                	je     c0100323 <getchar+0x6>
        /* do nothing */;
    return c;
c0100331:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100334:	c9                   	leave  
c0100335:	c3                   	ret    

c0100336 <readline>:
 * The readline() function returns the text of the line read. If some errors
 * are happened, NULL is returned. The return value is a global variable,
 * thus it should be copied before it is used.
 * */
char *
readline(const char *prompt) {
c0100336:	55                   	push   %ebp
c0100337:	89 e5                	mov    %esp,%ebp
c0100339:	83 ec 18             	sub    $0x18,%esp
    if (prompt != NULL) {
c010033c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0100340:	74 13                	je     c0100355 <readline+0x1f>
        cprintf("%s", prompt);
c0100342:	83 ec 08             	sub    $0x8,%esp
c0100345:	ff 75 08             	pushl  0x8(%ebp)
c0100348:	68 87 bc 10 c0       	push   $0xc010bc87
c010034d:	e8 40 ff ff ff       	call   c0100292 <cprintf>
c0100352:	83 c4 10             	add    $0x10,%esp
    }
    int i = 0, c;
c0100355:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        c = getchar();
c010035c:	e8 bc ff ff ff       	call   c010031d <getchar>
c0100361:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (c < 0) {
c0100364:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0100368:	79 0a                	jns    c0100374 <readline+0x3e>
            return NULL;
c010036a:	b8 00 00 00 00       	mov    $0x0,%eax
c010036f:	e9 82 00 00 00       	jmp    c01003f6 <readline+0xc0>
        }
        else if (c >= ' ' && i < BUFSIZE - 1) {
c0100374:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
c0100378:	7e 2b                	jle    c01003a5 <readline+0x6f>
c010037a:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
c0100381:	7f 22                	jg     c01003a5 <readline+0x6f>
            cputchar(c);
c0100383:	83 ec 0c             	sub    $0xc,%esp
c0100386:	ff 75 f0             	pushl  -0x10(%ebp)
c0100389:	e8 2a ff ff ff       	call   c01002b8 <cputchar>
c010038e:	83 c4 10             	add    $0x10,%esp
            buf[i ++] = c;
c0100391:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100394:	8d 50 01             	lea    0x1(%eax),%edx
c0100397:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010039a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010039d:	88 90 20 f0 19 c0    	mov    %dl,-0x3fe60fe0(%eax)
c01003a3:	eb 4c                	jmp    c01003f1 <readline+0xbb>
        }
        else if (c == '\b' && i > 0) {
c01003a5:	83 7d f0 08          	cmpl   $0x8,-0x10(%ebp)
c01003a9:	75 1a                	jne    c01003c5 <readline+0x8f>
c01003ab:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01003af:	7e 14                	jle    c01003c5 <readline+0x8f>
            cputchar(c);
c01003b1:	83 ec 0c             	sub    $0xc,%esp
c01003b4:	ff 75 f0             	pushl  -0x10(%ebp)
c01003b7:	e8 fc fe ff ff       	call   c01002b8 <cputchar>
c01003bc:	83 c4 10             	add    $0x10,%esp
            i --;
c01003bf:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c01003c3:	eb 2c                	jmp    c01003f1 <readline+0xbb>
        }
        else if (c == '\n' || c == '\r') {
c01003c5:	83 7d f0 0a          	cmpl   $0xa,-0x10(%ebp)
c01003c9:	74 06                	je     c01003d1 <readline+0x9b>
c01003cb:	83 7d f0 0d          	cmpl   $0xd,-0x10(%ebp)
c01003cf:	75 8b                	jne    c010035c <readline+0x26>
            cputchar(c);
c01003d1:	83 ec 0c             	sub    $0xc,%esp
c01003d4:	ff 75 f0             	pushl  -0x10(%ebp)
c01003d7:	e8 dc fe ff ff       	call   c01002b8 <cputchar>
c01003dc:	83 c4 10             	add    $0x10,%esp
            buf[i] = '\0';
c01003df:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01003e2:	05 20 f0 19 c0       	add    $0xc019f020,%eax
c01003e7:	c6 00 00             	movb   $0x0,(%eax)
            return buf;
c01003ea:	b8 20 f0 19 c0       	mov    $0xc019f020,%eax
c01003ef:	eb 05                	jmp    c01003f6 <readline+0xc0>
        }
    }
c01003f1:	e9 66 ff ff ff       	jmp    c010035c <readline+0x26>
}
c01003f6:	c9                   	leave  
c01003f7:	c3                   	ret    

c01003f8 <__panic>:
/* *
 * __panic - __panic is called on unresolvable fatal errors. it prints
 * "panic: 'message'", and then enters the kernel monitor.
 * */
void
__panic(const char *file, int line, const char *fmt, ...) {
c01003f8:	55                   	push   %ebp
c01003f9:	89 e5                	mov    %esp,%ebp
c01003fb:	83 ec 18             	sub    $0x18,%esp
    if (is_panic) {
c01003fe:	a1 20 f4 19 c0       	mov    0xc019f420,%eax
c0100403:	85 c0                	test   %eax,%eax
c0100405:	75 5f                	jne    c0100466 <__panic+0x6e>
        goto panic_dead;
    }
    is_panic = 1;
c0100407:	c7 05 20 f4 19 c0 01 	movl   $0x1,0xc019f420
c010040e:	00 00 00 

    // print the 'message'
    va_list ap;
    va_start(ap, fmt);
c0100411:	8d 45 14             	lea    0x14(%ebp),%eax
c0100414:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cprintf("kernel panic at %s:%d:\n    ", file, line);
c0100417:	83 ec 04             	sub    $0x4,%esp
c010041a:	ff 75 0c             	pushl  0xc(%ebp)
c010041d:	ff 75 08             	pushl  0x8(%ebp)
c0100420:	68 8a bc 10 c0       	push   $0xc010bc8a
c0100425:	e8 68 fe ff ff       	call   c0100292 <cprintf>
c010042a:	83 c4 10             	add    $0x10,%esp
    vcprintf(fmt, ap);
c010042d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100430:	83 ec 08             	sub    $0x8,%esp
c0100433:	50                   	push   %eax
c0100434:	ff 75 10             	pushl  0x10(%ebp)
c0100437:	e8 2d fe ff ff       	call   c0100269 <vcprintf>
c010043c:	83 c4 10             	add    $0x10,%esp
    cprintf("\n");
c010043f:	83 ec 0c             	sub    $0xc,%esp
c0100442:	68 a6 bc 10 c0       	push   $0xc010bca6
c0100447:	e8 46 fe ff ff       	call   c0100292 <cprintf>
c010044c:	83 c4 10             	add    $0x10,%esp
    
    cprintf("stack trackback:\n");
c010044f:	83 ec 0c             	sub    $0xc,%esp
c0100452:	68 a8 bc 10 c0       	push   $0xc010bca8
c0100457:	e8 36 fe ff ff       	call   c0100292 <cprintf>
c010045c:	83 c4 10             	add    $0x10,%esp
    print_stackframe();
c010045f:	e8 ee 06 00 00       	call   c0100b52 <print_stackframe>
c0100464:	eb 01                	jmp    c0100467 <__panic+0x6f>
 * "panic: 'message'", and then enters the kernel monitor.
 * */
void
__panic(const char *file, int line, const char *fmt, ...) {
    if (is_panic) {
        goto panic_dead;
c0100466:	90                   	nop
    print_stackframe();
    
    va_end(ap);

panic_dead:
    intr_disable();
c0100467:	e8 4b 1d 00 00       	call   c01021b7 <intr_disable>
    while (1) {
        kmonitor(NULL);
c010046c:	83 ec 0c             	sub    $0xc,%esp
c010046f:	6a 00                	push   $0x0
c0100471:	e8 14 09 00 00       	call   c0100d8a <kmonitor>
c0100476:	83 c4 10             	add    $0x10,%esp
    }
c0100479:	eb f1                	jmp    c010046c <__panic+0x74>

c010047b <__warn>:
}

/* __warn - like panic, but don't */
void
__warn(const char *file, int line, const char *fmt, ...) {
c010047b:	55                   	push   %ebp
c010047c:	89 e5                	mov    %esp,%ebp
c010047e:	83 ec 18             	sub    $0x18,%esp
    va_list ap;
    va_start(ap, fmt);
c0100481:	8d 45 14             	lea    0x14(%ebp),%eax
c0100484:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cprintf("kernel warning at %s:%d:\n    ", file, line);
c0100487:	83 ec 04             	sub    $0x4,%esp
c010048a:	ff 75 0c             	pushl  0xc(%ebp)
c010048d:	ff 75 08             	pushl  0x8(%ebp)
c0100490:	68 ba bc 10 c0       	push   $0xc010bcba
c0100495:	e8 f8 fd ff ff       	call   c0100292 <cprintf>
c010049a:	83 c4 10             	add    $0x10,%esp
    vcprintf(fmt, ap);
c010049d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01004a0:	83 ec 08             	sub    $0x8,%esp
c01004a3:	50                   	push   %eax
c01004a4:	ff 75 10             	pushl  0x10(%ebp)
c01004a7:	e8 bd fd ff ff       	call   c0100269 <vcprintf>
c01004ac:	83 c4 10             	add    $0x10,%esp
    cprintf("\n");
c01004af:	83 ec 0c             	sub    $0xc,%esp
c01004b2:	68 a6 bc 10 c0       	push   $0xc010bca6
c01004b7:	e8 d6 fd ff ff       	call   c0100292 <cprintf>
c01004bc:	83 c4 10             	add    $0x10,%esp
    va_end(ap);
}
c01004bf:	90                   	nop
c01004c0:	c9                   	leave  
c01004c1:	c3                   	ret    

c01004c2 <is_kernel_panic>:

bool
is_kernel_panic(void) {
c01004c2:	55                   	push   %ebp
c01004c3:	89 e5                	mov    %esp,%ebp
    return is_panic;
c01004c5:	a1 20 f4 19 c0       	mov    0xc019f420,%eax
}
c01004ca:	5d                   	pop    %ebp
c01004cb:	c3                   	ret    

c01004cc <stab_binsearch>:
 *      stab_binsearch(stabs, &left, &right, N_SO, 0xf0100184);
 * will exit setting left = 118, right = 554.
 * */
static void
stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
           int type, uintptr_t addr) {
c01004cc:	55                   	push   %ebp
c01004cd:	89 e5                	mov    %esp,%ebp
c01004cf:	83 ec 20             	sub    $0x20,%esp
    int l = *region_left, r = *region_right, any_matches = 0;
c01004d2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01004d5:	8b 00                	mov    (%eax),%eax
c01004d7:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01004da:	8b 45 10             	mov    0x10(%ebp),%eax
c01004dd:	8b 00                	mov    (%eax),%eax
c01004df:	89 45 f8             	mov    %eax,-0x8(%ebp)
c01004e2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    while (l <= r) {
c01004e9:	e9 d2 00 00 00       	jmp    c01005c0 <stab_binsearch+0xf4>
        int true_m = (l + r) / 2, m = true_m;
c01004ee:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01004f1:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01004f4:	01 d0                	add    %edx,%eax
c01004f6:	89 c2                	mov    %eax,%edx
c01004f8:	c1 ea 1f             	shr    $0x1f,%edx
c01004fb:	01 d0                	add    %edx,%eax
c01004fd:	d1 f8                	sar    %eax
c01004ff:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0100502:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100505:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // search for earliest stab with right type
        while (m >= l && stabs[m].n_type != type) {
c0100508:	eb 04                	jmp    c010050e <stab_binsearch+0x42>
            m --;
c010050a:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)

    while (l <= r) {
        int true_m = (l + r) / 2, m = true_m;

        // search for earliest stab with right type
        while (m >= l && stabs[m].n_type != type) {
c010050e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100511:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100514:	7c 1f                	jl     c0100535 <stab_binsearch+0x69>
c0100516:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100519:	89 d0                	mov    %edx,%eax
c010051b:	01 c0                	add    %eax,%eax
c010051d:	01 d0                	add    %edx,%eax
c010051f:	c1 e0 02             	shl    $0x2,%eax
c0100522:	89 c2                	mov    %eax,%edx
c0100524:	8b 45 08             	mov    0x8(%ebp),%eax
c0100527:	01 d0                	add    %edx,%eax
c0100529:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c010052d:	0f b6 c0             	movzbl %al,%eax
c0100530:	3b 45 14             	cmp    0x14(%ebp),%eax
c0100533:	75 d5                	jne    c010050a <stab_binsearch+0x3e>
            m --;
        }
        if (m < l) {    // no match in [l, m]
c0100535:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100538:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c010053b:	7d 0b                	jge    c0100548 <stab_binsearch+0x7c>
            l = true_m + 1;
c010053d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100540:	83 c0 01             	add    $0x1,%eax
c0100543:	89 45 fc             	mov    %eax,-0x4(%ebp)
            continue;
c0100546:	eb 78                	jmp    c01005c0 <stab_binsearch+0xf4>
        }

        // actual binary search
        any_matches = 1;
c0100548:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
        if (stabs[m].n_value < addr) {
c010054f:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100552:	89 d0                	mov    %edx,%eax
c0100554:	01 c0                	add    %eax,%eax
c0100556:	01 d0                	add    %edx,%eax
c0100558:	c1 e0 02             	shl    $0x2,%eax
c010055b:	89 c2                	mov    %eax,%edx
c010055d:	8b 45 08             	mov    0x8(%ebp),%eax
c0100560:	01 d0                	add    %edx,%eax
c0100562:	8b 40 08             	mov    0x8(%eax),%eax
c0100565:	3b 45 18             	cmp    0x18(%ebp),%eax
c0100568:	73 13                	jae    c010057d <stab_binsearch+0xb1>
            *region_left = m;
c010056a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010056d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100570:	89 10                	mov    %edx,(%eax)
            l = true_m + 1;
c0100572:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100575:	83 c0 01             	add    $0x1,%eax
c0100578:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010057b:	eb 43                	jmp    c01005c0 <stab_binsearch+0xf4>
        } else if (stabs[m].n_value > addr) {
c010057d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100580:	89 d0                	mov    %edx,%eax
c0100582:	01 c0                	add    %eax,%eax
c0100584:	01 d0                	add    %edx,%eax
c0100586:	c1 e0 02             	shl    $0x2,%eax
c0100589:	89 c2                	mov    %eax,%edx
c010058b:	8b 45 08             	mov    0x8(%ebp),%eax
c010058e:	01 d0                	add    %edx,%eax
c0100590:	8b 40 08             	mov    0x8(%eax),%eax
c0100593:	3b 45 18             	cmp    0x18(%ebp),%eax
c0100596:	76 16                	jbe    c01005ae <stab_binsearch+0xe2>
            *region_right = m - 1;
c0100598:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010059b:	8d 50 ff             	lea    -0x1(%eax),%edx
c010059e:	8b 45 10             	mov    0x10(%ebp),%eax
c01005a1:	89 10                	mov    %edx,(%eax)
            r = m - 1;
c01005a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01005a6:	83 e8 01             	sub    $0x1,%eax
c01005a9:	89 45 f8             	mov    %eax,-0x8(%ebp)
c01005ac:	eb 12                	jmp    c01005c0 <stab_binsearch+0xf4>
        } else {
            // exact match for 'addr', but continue loop to find
            // *region_right
            *region_left = m;
c01005ae:	8b 45 0c             	mov    0xc(%ebp),%eax
c01005b1:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01005b4:	89 10                	mov    %edx,(%eax)
            l = m;
c01005b6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01005b9:	89 45 fc             	mov    %eax,-0x4(%ebp)
            addr ++;
c01005bc:	83 45 18 01          	addl   $0x1,0x18(%ebp)
static void
stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
           int type, uintptr_t addr) {
    int l = *region_left, r = *region_right, any_matches = 0;

    while (l <= r) {
c01005c0:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01005c3:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c01005c6:	0f 8e 22 ff ff ff    	jle    c01004ee <stab_binsearch+0x22>
            l = m;
            addr ++;
        }
    }

    if (!any_matches) {
c01005cc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01005d0:	75 0f                	jne    c01005e1 <stab_binsearch+0x115>
        *region_right = *region_left - 1;
c01005d2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01005d5:	8b 00                	mov    (%eax),%eax
c01005d7:	8d 50 ff             	lea    -0x1(%eax),%edx
c01005da:	8b 45 10             	mov    0x10(%ebp),%eax
c01005dd:	89 10                	mov    %edx,(%eax)
        l = *region_right;
        for (; l > *region_left && stabs[l].n_type != type; l --)
            /* do nothing */;
        *region_left = l;
    }
}
c01005df:	eb 3f                	jmp    c0100620 <stab_binsearch+0x154>
    if (!any_matches) {
        *region_right = *region_left - 1;
    }
    else {
        // find rightmost region containing 'addr'
        l = *region_right;
c01005e1:	8b 45 10             	mov    0x10(%ebp),%eax
c01005e4:	8b 00                	mov    (%eax),%eax
c01005e6:	89 45 fc             	mov    %eax,-0x4(%ebp)
        for (; l > *region_left && stabs[l].n_type != type; l --)
c01005e9:	eb 04                	jmp    c01005ef <stab_binsearch+0x123>
c01005eb:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
c01005ef:	8b 45 0c             	mov    0xc(%ebp),%eax
c01005f2:	8b 00                	mov    (%eax),%eax
c01005f4:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c01005f7:	7d 1f                	jge    c0100618 <stab_binsearch+0x14c>
c01005f9:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01005fc:	89 d0                	mov    %edx,%eax
c01005fe:	01 c0                	add    %eax,%eax
c0100600:	01 d0                	add    %edx,%eax
c0100602:	c1 e0 02             	shl    $0x2,%eax
c0100605:	89 c2                	mov    %eax,%edx
c0100607:	8b 45 08             	mov    0x8(%ebp),%eax
c010060a:	01 d0                	add    %edx,%eax
c010060c:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100610:	0f b6 c0             	movzbl %al,%eax
c0100613:	3b 45 14             	cmp    0x14(%ebp),%eax
c0100616:	75 d3                	jne    c01005eb <stab_binsearch+0x11f>
            /* do nothing */;
        *region_left = l;
c0100618:	8b 45 0c             	mov    0xc(%ebp),%eax
c010061b:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010061e:	89 10                	mov    %edx,(%eax)
    }
}
c0100620:	90                   	nop
c0100621:	c9                   	leave  
c0100622:	c3                   	ret    

c0100623 <debuginfo_eip>:
 * the specified instruction address, @addr.  Returns 0 if information
 * was found, and negative if not.  But even if it returns negative it
 * has stored some information into '*info'.
 * */
int
debuginfo_eip(uintptr_t addr, struct eipdebuginfo *info) {
c0100623:	55                   	push   %ebp
c0100624:	89 e5                	mov    %esp,%ebp
c0100626:	83 ec 38             	sub    $0x38,%esp
    const struct stab *stabs, *stab_end;
    const char *stabstr, *stabstr_end;

    info->eip_file = "<unknown>";
c0100629:	8b 45 0c             	mov    0xc(%ebp),%eax
c010062c:	c7 00 d8 bc 10 c0    	movl   $0xc010bcd8,(%eax)
    info->eip_line = 0;
c0100632:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100635:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    info->eip_fn_name = "<unknown>";
c010063c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010063f:	c7 40 08 d8 bc 10 c0 	movl   $0xc010bcd8,0x8(%eax)
    info->eip_fn_namelen = 9;
c0100646:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100649:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
    info->eip_fn_addr = addr;
c0100650:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100653:	8b 55 08             	mov    0x8(%ebp),%edx
c0100656:	89 50 10             	mov    %edx,0x10(%eax)
    info->eip_fn_narg = 0;
c0100659:	8b 45 0c             	mov    0xc(%ebp),%eax
c010065c:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

    // find the relevant set of stabs
    if (addr >= KERNBASE) {
c0100663:	81 7d 08 ff ff ff bf 	cmpl   $0xbfffffff,0x8(%ebp)
c010066a:	76 21                	jbe    c010068d <debuginfo_eip+0x6a>
        stabs = __STAB_BEGIN__;
c010066c:	c7 45 f4 60 e6 10 c0 	movl   $0xc010e660,-0xc(%ebp)
        stab_end = __STAB_END__;
c0100673:	c7 45 f0 10 3e 12 c0 	movl   $0xc0123e10,-0x10(%ebp)
        stabstr = __STABSTR_BEGIN__;
c010067a:	c7 45 ec 11 3e 12 c0 	movl   $0xc0123e11,-0x14(%ebp)
        stabstr_end = __STABSTR_END__;
c0100681:	c7 45 e8 59 8e 12 c0 	movl   $0xc0128e59,-0x18(%ebp)
c0100688:	e9 c3 00 00 00       	jmp    c0100750 <debuginfo_eip+0x12d>
    }
    else {
        // user-program linker script, tools/user.ld puts the information about the
        // program's stabs (included __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__,
        // and __STABSTR_END__) in a structure located at virtual address USTAB.
        const struct userstabdata *usd = (struct userstabdata *)USTAB;
c010068d:	c7 45 e4 00 00 20 00 	movl   $0x200000,-0x1c(%ebp)

        // make sure that debugger (current process) can access this memory
        struct mm_struct *mm;
        if (current == NULL || (mm = current->mm) == NULL) {
c0100694:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c0100699:	85 c0                	test   %eax,%eax
c010069b:	74 11                	je     c01006ae <debuginfo_eip+0x8b>
c010069d:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c01006a2:	8b 40 18             	mov    0x18(%eax),%eax
c01006a5:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01006a8:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01006ac:	75 0a                	jne    c01006b8 <debuginfo_eip+0x95>
            return -1;
c01006ae:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01006b3:	e9 4e 03 00 00       	jmp    c0100a06 <debuginfo_eip+0x3e3>
        }
        if (!user_mem_check(mm, (uintptr_t)usd, sizeof(struct userstabdata), 0)) {
c01006b8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01006bb:	6a 00                	push   $0x0
c01006bd:	6a 10                	push   $0x10
c01006bf:	50                   	push   %eax
c01006c0:	ff 75 e0             	pushl  -0x20(%ebp)
c01006c3:	e8 09 46 00 00       	call   c0104cd1 <user_mem_check>
c01006c8:	83 c4 10             	add    $0x10,%esp
c01006cb:	85 c0                	test   %eax,%eax
c01006cd:	75 0a                	jne    c01006d9 <debuginfo_eip+0xb6>
            return -1;
c01006cf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01006d4:	e9 2d 03 00 00       	jmp    c0100a06 <debuginfo_eip+0x3e3>
        }

        stabs = usd->stabs;
c01006d9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01006dc:	8b 00                	mov    (%eax),%eax
c01006de:	89 45 f4             	mov    %eax,-0xc(%ebp)
        stab_end = usd->stab_end;
c01006e1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01006e4:	8b 40 04             	mov    0x4(%eax),%eax
c01006e7:	89 45 f0             	mov    %eax,-0x10(%ebp)
        stabstr = usd->stabstr;
c01006ea:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01006ed:	8b 40 08             	mov    0x8(%eax),%eax
c01006f0:	89 45 ec             	mov    %eax,-0x14(%ebp)
        stabstr_end = usd->stabstr_end;
c01006f3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01006f6:	8b 40 0c             	mov    0xc(%eax),%eax
c01006f9:	89 45 e8             	mov    %eax,-0x18(%ebp)

        // make sure the STABS and string table memory is valid
        if (!user_mem_check(mm, (uintptr_t)stabs, (uintptr_t)stab_end - (uintptr_t)stabs, 0)) {
c01006fc:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01006ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100702:	29 c2                	sub    %eax,%edx
c0100704:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100707:	6a 00                	push   $0x0
c0100709:	52                   	push   %edx
c010070a:	50                   	push   %eax
c010070b:	ff 75 e0             	pushl  -0x20(%ebp)
c010070e:	e8 be 45 00 00       	call   c0104cd1 <user_mem_check>
c0100713:	83 c4 10             	add    $0x10,%esp
c0100716:	85 c0                	test   %eax,%eax
c0100718:	75 0a                	jne    c0100724 <debuginfo_eip+0x101>
            return -1;
c010071a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010071f:	e9 e2 02 00 00       	jmp    c0100a06 <debuginfo_eip+0x3e3>
        }
        if (!user_mem_check(mm, (uintptr_t)stabstr, stabstr_end - stabstr, 0)) {
c0100724:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0100727:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010072a:	29 c2                	sub    %eax,%edx
c010072c:	89 d0                	mov    %edx,%eax
c010072e:	89 c2                	mov    %eax,%edx
c0100730:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100733:	6a 00                	push   $0x0
c0100735:	52                   	push   %edx
c0100736:	50                   	push   %eax
c0100737:	ff 75 e0             	pushl  -0x20(%ebp)
c010073a:	e8 92 45 00 00       	call   c0104cd1 <user_mem_check>
c010073f:	83 c4 10             	add    $0x10,%esp
c0100742:	85 c0                	test   %eax,%eax
c0100744:	75 0a                	jne    c0100750 <debuginfo_eip+0x12d>
            return -1;
c0100746:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010074b:	e9 b6 02 00 00       	jmp    c0100a06 <debuginfo_eip+0x3e3>
        }
    }

    // String table validity checks
    if (stabstr_end <= stabstr || stabstr_end[-1] != 0) {
c0100750:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100753:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0100756:	76 0d                	jbe    c0100765 <debuginfo_eip+0x142>
c0100758:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010075b:	83 e8 01             	sub    $0x1,%eax
c010075e:	0f b6 00             	movzbl (%eax),%eax
c0100761:	84 c0                	test   %al,%al
c0100763:	74 0a                	je     c010076f <debuginfo_eip+0x14c>
        return -1;
c0100765:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010076a:	e9 97 02 00 00       	jmp    c0100a06 <debuginfo_eip+0x3e3>
    // 'eip'.  First, we find the basic source file containing 'eip'.
    // Then, we look in that source file for the function.  Then we look
    // for the line number.

    // Search the entire set of stabs for the source file (type N_SO).
    int lfile = 0, rfile = (stab_end - stabs) - 1;
c010076f:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0100776:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100779:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010077c:	29 c2                	sub    %eax,%edx
c010077e:	89 d0                	mov    %edx,%eax
c0100780:	c1 f8 02             	sar    $0x2,%eax
c0100783:	69 c0 ab aa aa aa    	imul   $0xaaaaaaab,%eax,%eax
c0100789:	83 e8 01             	sub    $0x1,%eax
c010078c:	89 45 d8             	mov    %eax,-0x28(%ebp)
    stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
c010078f:	83 ec 0c             	sub    $0xc,%esp
c0100792:	ff 75 08             	pushl  0x8(%ebp)
c0100795:	6a 64                	push   $0x64
c0100797:	8d 45 d8             	lea    -0x28(%ebp),%eax
c010079a:	50                   	push   %eax
c010079b:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010079e:	50                   	push   %eax
c010079f:	ff 75 f4             	pushl  -0xc(%ebp)
c01007a2:	e8 25 fd ff ff       	call   c01004cc <stab_binsearch>
c01007a7:	83 c4 20             	add    $0x20,%esp
    if (lfile == 0)
c01007aa:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01007ad:	85 c0                	test   %eax,%eax
c01007af:	75 0a                	jne    c01007bb <debuginfo_eip+0x198>
        return -1;
c01007b1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01007b6:	e9 4b 02 00 00       	jmp    c0100a06 <debuginfo_eip+0x3e3>

    // Search within that file's stabs for the function definition
    // (N_FUN).
    int lfun = lfile, rfun = rfile;
c01007bb:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01007be:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c01007c1:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01007c4:	89 45 d0             	mov    %eax,-0x30(%ebp)
    int lline, rline;
    stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
c01007c7:	83 ec 0c             	sub    $0xc,%esp
c01007ca:	ff 75 08             	pushl  0x8(%ebp)
c01007cd:	6a 24                	push   $0x24
c01007cf:	8d 45 d0             	lea    -0x30(%ebp),%eax
c01007d2:	50                   	push   %eax
c01007d3:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c01007d6:	50                   	push   %eax
c01007d7:	ff 75 f4             	pushl  -0xc(%ebp)
c01007da:	e8 ed fc ff ff       	call   c01004cc <stab_binsearch>
c01007df:	83 c4 20             	add    $0x20,%esp

    if (lfun <= rfun) {
c01007e2:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01007e5:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01007e8:	39 c2                	cmp    %eax,%edx
c01007ea:	7f 7c                	jg     c0100868 <debuginfo_eip+0x245>
        // stabs[lfun] points to the function name
        // in the string table, but check bounds just in case.
        if (stabs[lfun].n_strx < stabstr_end - stabstr) {
c01007ec:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01007ef:	89 c2                	mov    %eax,%edx
c01007f1:	89 d0                	mov    %edx,%eax
c01007f3:	01 c0                	add    %eax,%eax
c01007f5:	01 d0                	add    %edx,%eax
c01007f7:	c1 e0 02             	shl    $0x2,%eax
c01007fa:	89 c2                	mov    %eax,%edx
c01007fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01007ff:	01 d0                	add    %edx,%eax
c0100801:	8b 00                	mov    (%eax),%eax
c0100803:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c0100806:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0100809:	29 d1                	sub    %edx,%ecx
c010080b:	89 ca                	mov    %ecx,%edx
c010080d:	39 d0                	cmp    %edx,%eax
c010080f:	73 22                	jae    c0100833 <debuginfo_eip+0x210>
            info->eip_fn_name = stabstr + stabs[lfun].n_strx;
c0100811:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100814:	89 c2                	mov    %eax,%edx
c0100816:	89 d0                	mov    %edx,%eax
c0100818:	01 c0                	add    %eax,%eax
c010081a:	01 d0                	add    %edx,%eax
c010081c:	c1 e0 02             	shl    $0x2,%eax
c010081f:	89 c2                	mov    %eax,%edx
c0100821:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100824:	01 d0                	add    %edx,%eax
c0100826:	8b 10                	mov    (%eax),%edx
c0100828:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010082b:	01 c2                	add    %eax,%edx
c010082d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100830:	89 50 08             	mov    %edx,0x8(%eax)
        }
        info->eip_fn_addr = stabs[lfun].n_value;
c0100833:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100836:	89 c2                	mov    %eax,%edx
c0100838:	89 d0                	mov    %edx,%eax
c010083a:	01 c0                	add    %eax,%eax
c010083c:	01 d0                	add    %edx,%eax
c010083e:	c1 e0 02             	shl    $0x2,%eax
c0100841:	89 c2                	mov    %eax,%edx
c0100843:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100846:	01 d0                	add    %edx,%eax
c0100848:	8b 50 08             	mov    0x8(%eax),%edx
c010084b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010084e:	89 50 10             	mov    %edx,0x10(%eax)
        addr -= info->eip_fn_addr;
c0100851:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100854:	8b 40 10             	mov    0x10(%eax),%eax
c0100857:	29 45 08             	sub    %eax,0x8(%ebp)
        // Search within the function definition for the line number.
        lline = lfun;
c010085a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010085d:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfun;
c0100860:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0100863:	89 45 c8             	mov    %eax,-0x38(%ebp)
c0100866:	eb 15                	jmp    c010087d <debuginfo_eip+0x25a>
    } else {
        // Couldn't find function stab!  Maybe we're in an assembly
        // file.  Search the whole file for the line number.
        info->eip_fn_addr = addr;
c0100868:	8b 45 0c             	mov    0xc(%ebp),%eax
c010086b:	8b 55 08             	mov    0x8(%ebp),%edx
c010086e:	89 50 10             	mov    %edx,0x10(%eax)
        lline = lfile;
c0100871:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100874:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfile;
c0100877:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010087a:	89 45 c8             	mov    %eax,-0x38(%ebp)
    }
    info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
c010087d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100880:	8b 40 08             	mov    0x8(%eax),%eax
c0100883:	83 ec 08             	sub    $0x8,%esp
c0100886:	6a 3a                	push   $0x3a
c0100888:	50                   	push   %eax
c0100889:	e8 26 a9 00 00       	call   c010b1b4 <strfind>
c010088e:	83 c4 10             	add    $0x10,%esp
c0100891:	89 c2                	mov    %eax,%edx
c0100893:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100896:	8b 40 08             	mov    0x8(%eax),%eax
c0100899:	29 c2                	sub    %eax,%edx
c010089b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010089e:	89 50 0c             	mov    %edx,0xc(%eax)

    // Search within [lline, rline] for the line number stab.
    // If found, set info->eip_line to the right line number.
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
c01008a1:	83 ec 0c             	sub    $0xc,%esp
c01008a4:	ff 75 08             	pushl  0x8(%ebp)
c01008a7:	6a 44                	push   $0x44
c01008a9:	8d 45 c8             	lea    -0x38(%ebp),%eax
c01008ac:	50                   	push   %eax
c01008ad:	8d 45 cc             	lea    -0x34(%ebp),%eax
c01008b0:	50                   	push   %eax
c01008b1:	ff 75 f4             	pushl  -0xc(%ebp)
c01008b4:	e8 13 fc ff ff       	call   c01004cc <stab_binsearch>
c01008b9:	83 c4 20             	add    $0x20,%esp
    if (lline <= rline) {
c01008bc:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01008bf:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01008c2:	39 c2                	cmp    %eax,%edx
c01008c4:	7f 24                	jg     c01008ea <debuginfo_eip+0x2c7>
        info->eip_line = stabs[rline].n_desc;
c01008c6:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01008c9:	89 c2                	mov    %eax,%edx
c01008cb:	89 d0                	mov    %edx,%eax
c01008cd:	01 c0                	add    %eax,%eax
c01008cf:	01 d0                	add    %edx,%eax
c01008d1:	c1 e0 02             	shl    $0x2,%eax
c01008d4:	89 c2                	mov    %eax,%edx
c01008d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01008d9:	01 d0                	add    %edx,%eax
c01008db:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c01008df:	0f b7 d0             	movzwl %ax,%edx
c01008e2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01008e5:	89 50 04             	mov    %edx,0x4(%eax)

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c01008e8:	eb 13                	jmp    c01008fd <debuginfo_eip+0x2da>
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
    if (lline <= rline) {
        info->eip_line = stabs[rline].n_desc;
    } else {
        return -1;
c01008ea:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01008ef:	e9 12 01 00 00       	jmp    c0100a06 <debuginfo_eip+0x3e3>
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
           && stabs[lline].n_type != N_SOL
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
        lline --;
c01008f4:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01008f7:	83 e8 01             	sub    $0x1,%eax
c01008fa:	89 45 cc             	mov    %eax,-0x34(%ebp)

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c01008fd:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0100900:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100903:	39 c2                	cmp    %eax,%edx
c0100905:	7c 56                	jl     c010095d <debuginfo_eip+0x33a>
           && stabs[lline].n_type != N_SOL
c0100907:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010090a:	89 c2                	mov    %eax,%edx
c010090c:	89 d0                	mov    %edx,%eax
c010090e:	01 c0                	add    %eax,%eax
c0100910:	01 d0                	add    %edx,%eax
c0100912:	c1 e0 02             	shl    $0x2,%eax
c0100915:	89 c2                	mov    %eax,%edx
c0100917:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010091a:	01 d0                	add    %edx,%eax
c010091c:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100920:	3c 84                	cmp    $0x84,%al
c0100922:	74 39                	je     c010095d <debuginfo_eip+0x33a>
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
c0100924:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100927:	89 c2                	mov    %eax,%edx
c0100929:	89 d0                	mov    %edx,%eax
c010092b:	01 c0                	add    %eax,%eax
c010092d:	01 d0                	add    %edx,%eax
c010092f:	c1 e0 02             	shl    $0x2,%eax
c0100932:	89 c2                	mov    %eax,%edx
c0100934:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100937:	01 d0                	add    %edx,%eax
c0100939:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c010093d:	3c 64                	cmp    $0x64,%al
c010093f:	75 b3                	jne    c01008f4 <debuginfo_eip+0x2d1>
c0100941:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100944:	89 c2                	mov    %eax,%edx
c0100946:	89 d0                	mov    %edx,%eax
c0100948:	01 c0                	add    %eax,%eax
c010094a:	01 d0                	add    %edx,%eax
c010094c:	c1 e0 02             	shl    $0x2,%eax
c010094f:	89 c2                	mov    %eax,%edx
c0100951:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100954:	01 d0                	add    %edx,%eax
c0100956:	8b 40 08             	mov    0x8(%eax),%eax
c0100959:	85 c0                	test   %eax,%eax
c010095b:	74 97                	je     c01008f4 <debuginfo_eip+0x2d1>
        lline --;
    }
    if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr) {
c010095d:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0100960:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100963:	39 c2                	cmp    %eax,%edx
c0100965:	7c 46                	jl     c01009ad <debuginfo_eip+0x38a>
c0100967:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010096a:	89 c2                	mov    %eax,%edx
c010096c:	89 d0                	mov    %edx,%eax
c010096e:	01 c0                	add    %eax,%eax
c0100970:	01 d0                	add    %edx,%eax
c0100972:	c1 e0 02             	shl    $0x2,%eax
c0100975:	89 c2                	mov    %eax,%edx
c0100977:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010097a:	01 d0                	add    %edx,%eax
c010097c:	8b 00                	mov    (%eax),%eax
c010097e:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c0100981:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0100984:	29 d1                	sub    %edx,%ecx
c0100986:	89 ca                	mov    %ecx,%edx
c0100988:	39 d0                	cmp    %edx,%eax
c010098a:	73 21                	jae    c01009ad <debuginfo_eip+0x38a>
        info->eip_file = stabstr + stabs[lline].n_strx;
c010098c:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010098f:	89 c2                	mov    %eax,%edx
c0100991:	89 d0                	mov    %edx,%eax
c0100993:	01 c0                	add    %eax,%eax
c0100995:	01 d0                	add    %edx,%eax
c0100997:	c1 e0 02             	shl    $0x2,%eax
c010099a:	89 c2                	mov    %eax,%edx
c010099c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010099f:	01 d0                	add    %edx,%eax
c01009a1:	8b 10                	mov    (%eax),%edx
c01009a3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01009a6:	01 c2                	add    %eax,%edx
c01009a8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01009ab:	89 10                	mov    %edx,(%eax)
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
c01009ad:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01009b0:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01009b3:	39 c2                	cmp    %eax,%edx
c01009b5:	7d 4a                	jge    c0100a01 <debuginfo_eip+0x3de>
        for (lline = lfun + 1;
c01009b7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01009ba:	83 c0 01             	add    $0x1,%eax
c01009bd:	89 45 cc             	mov    %eax,-0x34(%ebp)
c01009c0:	eb 18                	jmp    c01009da <debuginfo_eip+0x3b7>
             lline < rfun && stabs[lline].n_type == N_PSYM;
             lline ++) {
            info->eip_fn_narg ++;
c01009c2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01009c5:	8b 40 14             	mov    0x14(%eax),%eax
c01009c8:	8d 50 01             	lea    0x1(%eax),%edx
c01009cb:	8b 45 0c             	mov    0xc(%ebp),%eax
c01009ce:	89 50 14             	mov    %edx,0x14(%eax)
    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
             lline < rfun && stabs[lline].n_type == N_PSYM;
             lline ++) {
c01009d1:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01009d4:	83 c0 01             	add    $0x1,%eax
c01009d7:	89 45 cc             	mov    %eax,-0x34(%ebp)

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
             lline < rfun && stabs[lline].n_type == N_PSYM;
c01009da:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01009dd:	8b 45 d0             	mov    -0x30(%ebp),%eax
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
c01009e0:	39 c2                	cmp    %eax,%edx
c01009e2:	7d 1d                	jge    c0100a01 <debuginfo_eip+0x3de>
             lline < rfun && stabs[lline].n_type == N_PSYM;
c01009e4:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01009e7:	89 c2                	mov    %eax,%edx
c01009e9:	89 d0                	mov    %edx,%eax
c01009eb:	01 c0                	add    %eax,%eax
c01009ed:	01 d0                	add    %edx,%eax
c01009ef:	c1 e0 02             	shl    $0x2,%eax
c01009f2:	89 c2                	mov    %eax,%edx
c01009f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01009f7:	01 d0                	add    %edx,%eax
c01009f9:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c01009fd:	3c a0                	cmp    $0xa0,%al
c01009ff:	74 c1                	je     c01009c2 <debuginfo_eip+0x39f>
             lline ++) {
            info->eip_fn_narg ++;
        }
    }
    return 0;
c0100a01:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100a06:	c9                   	leave  
c0100a07:	c3                   	ret    

c0100a08 <print_kerninfo>:
 * print_kerninfo - print the information about kernel, including the location
 * of kernel entry, the start addresses of data and text segements, the start
 * address of free memory and how many memory that kernel has used.
 * */
void
print_kerninfo(void) {
c0100a08:	55                   	push   %ebp
c0100a09:	89 e5                	mov    %esp,%ebp
c0100a0b:	83 ec 08             	sub    $0x8,%esp
    extern char etext[], edata[], end[], kern_init[];
    cprintf("Special kernel symbols:\n");
c0100a0e:	83 ec 0c             	sub    $0xc,%esp
c0100a11:	68 e2 bc 10 c0       	push   $0xc010bce2
c0100a16:	e8 77 f8 ff ff       	call   c0100292 <cprintf>
c0100a1b:	83 c4 10             	add    $0x10,%esp
    cprintf("  entry  0x%08x (phys)\n", kern_init);
c0100a1e:	83 ec 08             	sub    $0x8,%esp
c0100a21:	68 36 00 10 c0       	push   $0xc0100036
c0100a26:	68 fb bc 10 c0       	push   $0xc010bcfb
c0100a2b:	e8 62 f8 ff ff       	call   c0100292 <cprintf>
c0100a30:	83 c4 10             	add    $0x10,%esp
    cprintf("  etext  0x%08x (phys)\n", etext);
c0100a33:	83 ec 08             	sub    $0x8,%esp
c0100a36:	68 d4 bb 10 c0       	push   $0xc010bbd4
c0100a3b:	68 13 bd 10 c0       	push   $0xc010bd13
c0100a40:	e8 4d f8 ff ff       	call   c0100292 <cprintf>
c0100a45:	83 c4 10             	add    $0x10,%esp
    cprintf("  edata  0x%08x (phys)\n", edata);
c0100a48:	83 ec 08             	sub    $0x8,%esp
c0100a4b:	68 00 f0 19 c0       	push   $0xc019f000
c0100a50:	68 2b bd 10 c0       	push   $0xc010bd2b
c0100a55:	e8 38 f8 ff ff       	call   c0100292 <cprintf>
c0100a5a:	83 c4 10             	add    $0x10,%esp
    cprintf("  end    0x%08x (phys)\n", end);
c0100a5d:	83 ec 08             	sub    $0x8,%esp
c0100a60:	68 a4 21 1a c0       	push   $0xc01a21a4
c0100a65:	68 43 bd 10 c0       	push   $0xc010bd43
c0100a6a:	e8 23 f8 ff ff       	call   c0100292 <cprintf>
c0100a6f:	83 c4 10             	add    $0x10,%esp
    cprintf("Kernel executable memory footprint: %dKB\n", (end - kern_init + 1023)/1024);
c0100a72:	b8 a4 21 1a c0       	mov    $0xc01a21a4,%eax
c0100a77:	05 ff 03 00 00       	add    $0x3ff,%eax
c0100a7c:	ba 36 00 10 c0       	mov    $0xc0100036,%edx
c0100a81:	29 d0                	sub    %edx,%eax
c0100a83:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
c0100a89:	85 c0                	test   %eax,%eax
c0100a8b:	0f 48 c2             	cmovs  %edx,%eax
c0100a8e:	c1 f8 0a             	sar    $0xa,%eax
c0100a91:	83 ec 08             	sub    $0x8,%esp
c0100a94:	50                   	push   %eax
c0100a95:	68 5c bd 10 c0       	push   $0xc010bd5c
c0100a9a:	e8 f3 f7 ff ff       	call   c0100292 <cprintf>
c0100a9f:	83 c4 10             	add    $0x10,%esp
}
c0100aa2:	90                   	nop
c0100aa3:	c9                   	leave  
c0100aa4:	c3                   	ret    

c0100aa5 <print_debuginfo>:
/* *
 * print_debuginfo - read and print the stat information for the address @eip,
 * and info.eip_fn_addr should be the first address of the related function.
 * */
void
print_debuginfo(uintptr_t eip) {
c0100aa5:	55                   	push   %ebp
c0100aa6:	89 e5                	mov    %esp,%ebp
c0100aa8:	81 ec 28 01 00 00    	sub    $0x128,%esp
    struct eipdebuginfo info;
    if (debuginfo_eip(eip, &info) != 0) {
c0100aae:	83 ec 08             	sub    $0x8,%esp
c0100ab1:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0100ab4:	50                   	push   %eax
c0100ab5:	ff 75 08             	pushl  0x8(%ebp)
c0100ab8:	e8 66 fb ff ff       	call   c0100623 <debuginfo_eip>
c0100abd:	83 c4 10             	add    $0x10,%esp
c0100ac0:	85 c0                	test   %eax,%eax
c0100ac2:	74 15                	je     c0100ad9 <print_debuginfo+0x34>
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
c0100ac4:	83 ec 08             	sub    $0x8,%esp
c0100ac7:	ff 75 08             	pushl  0x8(%ebp)
c0100aca:	68 86 bd 10 c0       	push   $0xc010bd86
c0100acf:	e8 be f7 ff ff       	call   c0100292 <cprintf>
c0100ad4:	83 c4 10             	add    $0x10,%esp
        }
        fnname[j] = '\0';
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
                fnname, eip - info.eip_fn_addr);
    }
}
c0100ad7:	eb 65                	jmp    c0100b3e <print_debuginfo+0x99>
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
    }
    else {
        char fnname[256];
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0100ad9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100ae0:	eb 1c                	jmp    c0100afe <print_debuginfo+0x59>
            fnname[j] = info.eip_fn_name[j];
c0100ae2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0100ae5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100ae8:	01 d0                	add    %edx,%eax
c0100aea:	0f b6 00             	movzbl (%eax),%eax
c0100aed:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
c0100af3:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100af6:	01 ca                	add    %ecx,%edx
c0100af8:	88 02                	mov    %al,(%edx)
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
    }
    else {
        char fnname[256];
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0100afa:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100afe:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100b01:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0100b04:	7f dc                	jg     c0100ae2 <print_debuginfo+0x3d>
            fnname[j] = info.eip_fn_name[j];
        }
        fnname[j] = '\0';
c0100b06:	8d 95 dc fe ff ff    	lea    -0x124(%ebp),%edx
c0100b0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b0f:	01 d0                	add    %edx,%eax
c0100b11:	c6 00 00             	movb   $0x0,(%eax)
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
                fnname, eip - info.eip_fn_addr);
c0100b14:	8b 45 ec             	mov    -0x14(%ebp),%eax
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
            fnname[j] = info.eip_fn_name[j];
        }
        fnname[j] = '\0';
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
c0100b17:	8b 55 08             	mov    0x8(%ebp),%edx
c0100b1a:	89 d1                	mov    %edx,%ecx
c0100b1c:	29 c1                	sub    %eax,%ecx
c0100b1e:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0100b21:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100b24:	83 ec 0c             	sub    $0xc,%esp
c0100b27:	51                   	push   %ecx
c0100b28:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
c0100b2e:	51                   	push   %ecx
c0100b2f:	52                   	push   %edx
c0100b30:	50                   	push   %eax
c0100b31:	68 a2 bd 10 c0       	push   $0xc010bda2
c0100b36:	e8 57 f7 ff ff       	call   c0100292 <cprintf>
c0100b3b:	83 c4 20             	add    $0x20,%esp
                fnname, eip - info.eip_fn_addr);
    }
}
c0100b3e:	90                   	nop
c0100b3f:	c9                   	leave  
c0100b40:	c3                   	ret    

c0100b41 <read_eip>:

static __noinline uint32_t
read_eip(void) {
c0100b41:	55                   	push   %ebp
c0100b42:	89 e5                	mov    %esp,%ebp
c0100b44:	83 ec 10             	sub    $0x10,%esp
    uint32_t eip;
    asm volatile("movl 4(%%ebp), %0" : "=r" (eip));
c0100b47:	8b 45 04             	mov    0x4(%ebp),%eax
c0100b4a:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eip;
c0100b4d:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0100b50:	c9                   	leave  
c0100b51:	c3                   	ret    

c0100b52 <print_stackframe>:
 *
 * Note that, the length of ebp-chain is limited. In boot/bootasm.S, before jumping
 * to the kernel entry, the value of ebp has been set to zero, that's the boundary.
 * */
void
print_stackframe(void) {
c0100b52:	55                   	push   %ebp
c0100b53:	89 e5                	mov    %esp,%ebp
c0100b55:	53                   	push   %ebx
c0100b56:	83 ec 34             	sub    $0x34,%esp
}

static inline uint32_t
read_ebp(void) {
    uint32_t ebp;
    asm volatile ("movl %%ebp, %0" : "=r" (ebp));
c0100b59:	89 e8                	mov    %ebp,%eax
c0100b5b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return ebp;
c0100b5e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
      *    (3.5) popup a calling stackframe
      *           NOTICE: the calling funciton's return addr eip  = ss:[ebp+4]
      *                   the calling funciton's ebp = ss:[ebp]
      */
    // 1. read_ebp
    uint32_t stack_val_ebp = read_ebp();
c0100b61:	89 45 f4             	mov    %eax,-0xc(%ebp)
    // 2. read_eip
    uint32_t stack_val_eip = read_eip();
c0100b64:	e8 d8 ff ff ff       	call   c0100b41 <read_eip>
c0100b69:	89 45 f0             	mov    %eax,-0x10(%ebp)
    // 3. iterate stacks
    uint32_t stack_val_args[4];
    for (int i = 0; i < STACKFRAME_DEPTH; i++) {
c0100b6c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0100b73:	e9 93 00 00 00       	jmp    c0100c0b <print_stackframe+0xb9>
        cprintf("ebp:0x%08x eip:0x%08x ", stack_val_ebp, stack_val_eip);
c0100b78:	83 ec 04             	sub    $0x4,%esp
c0100b7b:	ff 75 f0             	pushl  -0x10(%ebp)
c0100b7e:	ff 75 f4             	pushl  -0xc(%ebp)
c0100b81:	68 b4 bd 10 c0       	push   $0xc010bdb4
c0100b86:	e8 07 f7 ff ff       	call   c0100292 <cprintf>
c0100b8b:	83 c4 10             	add    $0x10,%esp
        // get args
        for (int j = 0; j < 4; j++) {
c0100b8e:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c0100b95:	eb 1f                	jmp    c0100bb6 <print_stackframe+0x64>
            stack_val_args[j] = *(((uint32_t*) stack_val_ebp) + 2 + j);
c0100b97:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100b9a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0100ba1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100ba4:	01 d0                	add    %edx,%eax
c0100ba6:	83 c0 08             	add    $0x8,%eax
c0100ba9:	8b 10                	mov    (%eax),%edx
c0100bab:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100bae:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
    // 3. iterate stacks
    uint32_t stack_val_args[4];
    for (int i = 0; i < STACKFRAME_DEPTH; i++) {
        cprintf("ebp:0x%08x eip:0x%08x ", stack_val_ebp, stack_val_eip);
        // get args
        for (int j = 0; j < 4; j++) {
c0100bb2:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
c0100bb6:	83 7d e8 03          	cmpl   $0x3,-0x18(%ebp)
c0100bba:	7e db                	jle    c0100b97 <print_stackframe+0x45>
            stack_val_args[j] = *(((uint32_t*) stack_val_ebp) + 2 + j);
        }
        cprintf("args:0x%08x 0x%08x 0x%08x 0x%08x\n", stack_val_args[0], 
c0100bbc:	8b 5d e0             	mov    -0x20(%ebp),%ebx
c0100bbf:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0100bc2:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0100bc5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100bc8:	83 ec 0c             	sub    $0xc,%esp
c0100bcb:	53                   	push   %ebx
c0100bcc:	51                   	push   %ecx
c0100bcd:	52                   	push   %edx
c0100bce:	50                   	push   %eax
c0100bcf:	68 cc bd 10 c0       	push   $0xc010bdcc
c0100bd4:	e8 b9 f6 ff ff       	call   c0100292 <cprintf>
c0100bd9:	83 c4 20             	add    $0x20,%esp
                stack_val_args[1], stack_val_args[2], stack_val_args[3]);
        // print function info
        print_debuginfo(stack_val_eip - 1);
c0100bdc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100bdf:	83 e8 01             	sub    $0x1,%eax
c0100be2:	83 ec 0c             	sub    $0xc,%esp
c0100be5:	50                   	push   %eax
c0100be6:	e8 ba fe ff ff       	call   c0100aa5 <print_debuginfo>
c0100beb:	83 c4 10             	add    $0x10,%esp
        // pop up stackframe, refresh ebp & eip
        stack_val_eip = *(((uint32_t*) stack_val_ebp) + 1);
c0100bee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100bf1:	83 c0 04             	add    $0x4,%eax
c0100bf4:	8b 00                	mov    (%eax),%eax
c0100bf6:	89 45 f0             	mov    %eax,-0x10(%ebp)
        stack_val_ebp = *(((uint32_t*) stack_val_ebp));
c0100bf9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100bfc:	8b 00                	mov    (%eax),%eax
c0100bfe:	89 45 f4             	mov    %eax,-0xc(%ebp)
        // ebp should be valid
        if (stack_val_ebp <= 0) {
c0100c01:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100c05:	74 10                	je     c0100c17 <print_stackframe+0xc5>
    uint32_t stack_val_ebp = read_ebp();
    // 2. read_eip
    uint32_t stack_val_eip = read_eip();
    // 3. iterate stacks
    uint32_t stack_val_args[4];
    for (int i = 0; i < STACKFRAME_DEPTH; i++) {
c0100c07:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0100c0b:	83 7d ec 13          	cmpl   $0x13,-0x14(%ebp)
c0100c0f:	0f 8e 63 ff ff ff    	jle    c0100b78 <print_stackframe+0x26>
        // ebp should be valid
        if (stack_val_ebp <= 0) {
            break;
        }
    }
}
c0100c15:	eb 01                	jmp    c0100c18 <print_stackframe+0xc6>
        // pop up stackframe, refresh ebp & eip
        stack_val_eip = *(((uint32_t*) stack_val_ebp) + 1);
        stack_val_ebp = *(((uint32_t*) stack_val_ebp));
        // ebp should be valid
        if (stack_val_ebp <= 0) {
            break;
c0100c17:	90                   	nop
        }
    }
}
c0100c18:	90                   	nop
c0100c19:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0100c1c:	c9                   	leave  
c0100c1d:	c3                   	ret    

c0100c1e <parse>:
#define MAXARGS         16
#define WHITESPACE      " \t\n\r"

/* parse - parse the command buffer into whitespace-separated arguments */
static int
parse(char *buf, char **argv) {
c0100c1e:	55                   	push   %ebp
c0100c1f:	89 e5                	mov    %esp,%ebp
c0100c21:	83 ec 18             	sub    $0x18,%esp
    int argc = 0;
c0100c24:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100c2b:	eb 0c                	jmp    c0100c39 <parse+0x1b>
            *buf ++ = '\0';
c0100c2d:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c30:	8d 50 01             	lea    0x1(%eax),%edx
c0100c33:	89 55 08             	mov    %edx,0x8(%ebp)
c0100c36:	c6 00 00             	movb   $0x0,(%eax)
static int
parse(char *buf, char **argv) {
    int argc = 0;
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100c39:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c3c:	0f b6 00             	movzbl (%eax),%eax
c0100c3f:	84 c0                	test   %al,%al
c0100c41:	74 1e                	je     c0100c61 <parse+0x43>
c0100c43:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c46:	0f b6 00             	movzbl (%eax),%eax
c0100c49:	0f be c0             	movsbl %al,%eax
c0100c4c:	83 ec 08             	sub    $0x8,%esp
c0100c4f:	50                   	push   %eax
c0100c50:	68 70 be 10 c0       	push   $0xc010be70
c0100c55:	e8 27 a5 00 00       	call   c010b181 <strchr>
c0100c5a:	83 c4 10             	add    $0x10,%esp
c0100c5d:	85 c0                	test   %eax,%eax
c0100c5f:	75 cc                	jne    c0100c2d <parse+0xf>
            *buf ++ = '\0';
        }
        if (*buf == '\0') {
c0100c61:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c64:	0f b6 00             	movzbl (%eax),%eax
c0100c67:	84 c0                	test   %al,%al
c0100c69:	74 69                	je     c0100cd4 <parse+0xb6>
            break;
        }

        // save and scan past next arg
        if (argc == MAXARGS - 1) {
c0100c6b:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
c0100c6f:	75 12                	jne    c0100c83 <parse+0x65>
            cprintf("Too many arguments (max %d).\n", MAXARGS);
c0100c71:	83 ec 08             	sub    $0x8,%esp
c0100c74:	6a 10                	push   $0x10
c0100c76:	68 75 be 10 c0       	push   $0xc010be75
c0100c7b:	e8 12 f6 ff ff       	call   c0100292 <cprintf>
c0100c80:	83 c4 10             	add    $0x10,%esp
        }
        argv[argc ++] = buf;
c0100c83:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100c86:	8d 50 01             	lea    0x1(%eax),%edx
c0100c89:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0100c8c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0100c93:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100c96:	01 c2                	add    %eax,%edx
c0100c98:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c9b:	89 02                	mov    %eax,(%edx)
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c0100c9d:	eb 04                	jmp    c0100ca3 <parse+0x85>
            buf ++;
c0100c9f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        // save and scan past next arg
        if (argc == MAXARGS - 1) {
            cprintf("Too many arguments (max %d).\n", MAXARGS);
        }
        argv[argc ++] = buf;
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c0100ca3:	8b 45 08             	mov    0x8(%ebp),%eax
c0100ca6:	0f b6 00             	movzbl (%eax),%eax
c0100ca9:	84 c0                	test   %al,%al
c0100cab:	0f 84 7a ff ff ff    	je     c0100c2b <parse+0xd>
c0100cb1:	8b 45 08             	mov    0x8(%ebp),%eax
c0100cb4:	0f b6 00             	movzbl (%eax),%eax
c0100cb7:	0f be c0             	movsbl %al,%eax
c0100cba:	83 ec 08             	sub    $0x8,%esp
c0100cbd:	50                   	push   %eax
c0100cbe:	68 70 be 10 c0       	push   $0xc010be70
c0100cc3:	e8 b9 a4 00 00       	call   c010b181 <strchr>
c0100cc8:	83 c4 10             	add    $0x10,%esp
c0100ccb:	85 c0                	test   %eax,%eax
c0100ccd:	74 d0                	je     c0100c9f <parse+0x81>
            buf ++;
        }
    }
c0100ccf:	e9 57 ff ff ff       	jmp    c0100c2b <parse+0xd>
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
            *buf ++ = '\0';
        }
        if (*buf == '\0') {
            break;
c0100cd4:	90                   	nop
        argv[argc ++] = buf;
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
            buf ++;
        }
    }
    return argc;
c0100cd5:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100cd8:	c9                   	leave  
c0100cd9:	c3                   	ret    

c0100cda <runcmd>:
/* *
 * runcmd - parse the input string, split it into separated arguments
 * and then lookup and invoke some related commands/
 * */
static int
runcmd(char *buf, struct trapframe *tf) {
c0100cda:	55                   	push   %ebp
c0100cdb:	89 e5                	mov    %esp,%ebp
c0100cdd:	83 ec 58             	sub    $0x58,%esp
    char *argv[MAXARGS];
    int argc = parse(buf, argv);
c0100ce0:	83 ec 08             	sub    $0x8,%esp
c0100ce3:	8d 45 b0             	lea    -0x50(%ebp),%eax
c0100ce6:	50                   	push   %eax
c0100ce7:	ff 75 08             	pushl  0x8(%ebp)
c0100cea:	e8 2f ff ff ff       	call   c0100c1e <parse>
c0100cef:	83 c4 10             	add    $0x10,%esp
c0100cf2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (argc == 0) {
c0100cf5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0100cf9:	75 0a                	jne    c0100d05 <runcmd+0x2b>
        return 0;
c0100cfb:	b8 00 00 00 00       	mov    $0x0,%eax
c0100d00:	e9 83 00 00 00       	jmp    c0100d88 <runcmd+0xae>
    }
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100d05:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100d0c:	eb 59                	jmp    c0100d67 <runcmd+0x8d>
        if (strcmp(commands[i].name, argv[0]) == 0) {
c0100d0e:	8b 4d b0             	mov    -0x50(%ebp),%ecx
c0100d11:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100d14:	89 d0                	mov    %edx,%eax
c0100d16:	01 c0                	add    %eax,%eax
c0100d18:	01 d0                	add    %edx,%eax
c0100d1a:	c1 e0 02             	shl    $0x2,%eax
c0100d1d:	05 00 b0 12 c0       	add    $0xc012b000,%eax
c0100d22:	8b 00                	mov    (%eax),%eax
c0100d24:	83 ec 08             	sub    $0x8,%esp
c0100d27:	51                   	push   %ecx
c0100d28:	50                   	push   %eax
c0100d29:	e8 b3 a3 00 00       	call   c010b0e1 <strcmp>
c0100d2e:	83 c4 10             	add    $0x10,%esp
c0100d31:	85 c0                	test   %eax,%eax
c0100d33:	75 2e                	jne    c0100d63 <runcmd+0x89>
            return commands[i].func(argc - 1, argv + 1, tf);
c0100d35:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100d38:	89 d0                	mov    %edx,%eax
c0100d3a:	01 c0                	add    %eax,%eax
c0100d3c:	01 d0                	add    %edx,%eax
c0100d3e:	c1 e0 02             	shl    $0x2,%eax
c0100d41:	05 08 b0 12 c0       	add    $0xc012b008,%eax
c0100d46:	8b 10                	mov    (%eax),%edx
c0100d48:	8d 45 b0             	lea    -0x50(%ebp),%eax
c0100d4b:	83 c0 04             	add    $0x4,%eax
c0100d4e:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c0100d51:	83 e9 01             	sub    $0x1,%ecx
c0100d54:	83 ec 04             	sub    $0x4,%esp
c0100d57:	ff 75 0c             	pushl  0xc(%ebp)
c0100d5a:	50                   	push   %eax
c0100d5b:	51                   	push   %ecx
c0100d5c:	ff d2                	call   *%edx
c0100d5e:	83 c4 10             	add    $0x10,%esp
c0100d61:	eb 25                	jmp    c0100d88 <runcmd+0xae>
    int argc = parse(buf, argv);
    if (argc == 0) {
        return 0;
    }
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100d63:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100d67:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100d6a:	83 f8 02             	cmp    $0x2,%eax
c0100d6d:	76 9f                	jbe    c0100d0e <runcmd+0x34>
        if (strcmp(commands[i].name, argv[0]) == 0) {
            return commands[i].func(argc - 1, argv + 1, tf);
        }
    }
    cprintf("Unknown command '%s'\n", argv[0]);
c0100d6f:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0100d72:	83 ec 08             	sub    $0x8,%esp
c0100d75:	50                   	push   %eax
c0100d76:	68 93 be 10 c0       	push   $0xc010be93
c0100d7b:	e8 12 f5 ff ff       	call   c0100292 <cprintf>
c0100d80:	83 c4 10             	add    $0x10,%esp
    return 0;
c0100d83:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100d88:	c9                   	leave  
c0100d89:	c3                   	ret    

c0100d8a <kmonitor>:

/***** Implementations of basic kernel monitor commands *****/

void
kmonitor(struct trapframe *tf) {
c0100d8a:	55                   	push   %ebp
c0100d8b:	89 e5                	mov    %esp,%ebp
c0100d8d:	83 ec 18             	sub    $0x18,%esp
    cprintf("Welcome to the kernel debug monitor!!\n");
c0100d90:	83 ec 0c             	sub    $0xc,%esp
c0100d93:	68 ac be 10 c0       	push   $0xc010beac
c0100d98:	e8 f5 f4 ff ff       	call   c0100292 <cprintf>
c0100d9d:	83 c4 10             	add    $0x10,%esp
    cprintf("Type 'help' for a list of commands.\n");
c0100da0:	83 ec 0c             	sub    $0xc,%esp
c0100da3:	68 d4 be 10 c0       	push   $0xc010bed4
c0100da8:	e8 e5 f4 ff ff       	call   c0100292 <cprintf>
c0100dad:	83 c4 10             	add    $0x10,%esp

    if (tf != NULL) {
c0100db0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0100db4:	74 0e                	je     c0100dc4 <kmonitor+0x3a>
        print_trapframe(tf);
c0100db6:	83 ec 0c             	sub    $0xc,%esp
c0100db9:	ff 75 08             	pushl  0x8(%ebp)
c0100dbc:	e8 6d 16 00 00       	call   c010242e <print_trapframe>
c0100dc1:	83 c4 10             	add    $0x10,%esp
    }

    char *buf;
    while (1) {
        if ((buf = readline("K> ")) != NULL) {
c0100dc4:	83 ec 0c             	sub    $0xc,%esp
c0100dc7:	68 f9 be 10 c0       	push   $0xc010bef9
c0100dcc:	e8 65 f5 ff ff       	call   c0100336 <readline>
c0100dd1:	83 c4 10             	add    $0x10,%esp
c0100dd4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100dd7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100ddb:	74 e7                	je     c0100dc4 <kmonitor+0x3a>
            if (runcmd(buf, tf) < 0) {
c0100ddd:	83 ec 08             	sub    $0x8,%esp
c0100de0:	ff 75 08             	pushl  0x8(%ebp)
c0100de3:	ff 75 f4             	pushl  -0xc(%ebp)
c0100de6:	e8 ef fe ff ff       	call   c0100cda <runcmd>
c0100deb:	83 c4 10             	add    $0x10,%esp
c0100dee:	85 c0                	test   %eax,%eax
c0100df0:	78 02                	js     c0100df4 <kmonitor+0x6a>
                break;
            }
        }
    }
c0100df2:	eb d0                	jmp    c0100dc4 <kmonitor+0x3a>

    char *buf;
    while (1) {
        if ((buf = readline("K> ")) != NULL) {
            if (runcmd(buf, tf) < 0) {
                break;
c0100df4:	90                   	nop
            }
        }
    }
}
c0100df5:	90                   	nop
c0100df6:	c9                   	leave  
c0100df7:	c3                   	ret    

c0100df8 <mon_help>:

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
c0100df8:	55                   	push   %ebp
c0100df9:	89 e5                	mov    %esp,%ebp
c0100dfb:	83 ec 18             	sub    $0x18,%esp
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100dfe:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100e05:	eb 3c                	jmp    c0100e43 <mon_help+0x4b>
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
c0100e07:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100e0a:	89 d0                	mov    %edx,%eax
c0100e0c:	01 c0                	add    %eax,%eax
c0100e0e:	01 d0                	add    %edx,%eax
c0100e10:	c1 e0 02             	shl    $0x2,%eax
c0100e13:	05 04 b0 12 c0       	add    $0xc012b004,%eax
c0100e18:	8b 08                	mov    (%eax),%ecx
c0100e1a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100e1d:	89 d0                	mov    %edx,%eax
c0100e1f:	01 c0                	add    %eax,%eax
c0100e21:	01 d0                	add    %edx,%eax
c0100e23:	c1 e0 02             	shl    $0x2,%eax
c0100e26:	05 00 b0 12 c0       	add    $0xc012b000,%eax
c0100e2b:	8b 00                	mov    (%eax),%eax
c0100e2d:	83 ec 04             	sub    $0x4,%esp
c0100e30:	51                   	push   %ecx
c0100e31:	50                   	push   %eax
c0100e32:	68 fd be 10 c0       	push   $0xc010befd
c0100e37:	e8 56 f4 ff ff       	call   c0100292 <cprintf>
c0100e3c:	83 c4 10             	add    $0x10,%esp

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100e3f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100e43:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100e46:	83 f8 02             	cmp    $0x2,%eax
c0100e49:	76 bc                	jbe    c0100e07 <mon_help+0xf>
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
    }
    return 0;
c0100e4b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100e50:	c9                   	leave  
c0100e51:	c3                   	ret    

c0100e52 <mon_kerninfo>:
/* *
 * mon_kerninfo - call print_kerninfo in kern/debug/kdebug.c to
 * print the memory occupancy in kernel.
 * */
int
mon_kerninfo(int argc, char **argv, struct trapframe *tf) {
c0100e52:	55                   	push   %ebp
c0100e53:	89 e5                	mov    %esp,%ebp
c0100e55:	83 ec 08             	sub    $0x8,%esp
    print_kerninfo();
c0100e58:	e8 ab fb ff ff       	call   c0100a08 <print_kerninfo>
    return 0;
c0100e5d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100e62:	c9                   	leave  
c0100e63:	c3                   	ret    

c0100e64 <mon_backtrace>:
/* *
 * mon_backtrace - call print_stackframe in kern/debug/kdebug.c to
 * print a backtrace of the stack.
 * */
int
mon_backtrace(int argc, char **argv, struct trapframe *tf) {
c0100e64:	55                   	push   %ebp
c0100e65:	89 e5                	mov    %esp,%ebp
c0100e67:	83 ec 08             	sub    $0x8,%esp
    print_stackframe();
c0100e6a:	e8 e3 fc ff ff       	call   c0100b52 <print_stackframe>
    return 0;
c0100e6f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100e74:	c9                   	leave  
c0100e75:	c3                   	ret    

c0100e76 <ide_wait_ready>:
    unsigned int size;          // Size in Sectors
    unsigned char model[41];    // Model in String
} ide_devices[MAX_IDE];

static int
ide_wait_ready(unsigned short iobase, bool check_error) {
c0100e76:	55                   	push   %ebp
c0100e77:	89 e5                	mov    %esp,%ebp
c0100e79:	83 ec 14             	sub    $0x14,%esp
c0100e7c:	8b 45 08             	mov    0x8(%ebp),%eax
c0100e7f:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    int r;
    while ((r = inb(iobase + ISA_STATUS)) & IDE_BSY)
c0100e83:	90                   	nop
c0100e84:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0100e88:	83 c0 07             	add    $0x7,%eax
c0100e8b:	0f b7 c0             	movzwl %ax,%eax
c0100e8e:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0100e92:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0100e96:	89 c2                	mov    %eax,%edx
c0100e98:	ec                   	in     (%dx),%al
c0100e99:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c0100e9c:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c0100ea0:	0f b6 c0             	movzbl %al,%eax
c0100ea3:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0100ea6:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100ea9:	25 80 00 00 00       	and    $0x80,%eax
c0100eae:	85 c0                	test   %eax,%eax
c0100eb0:	75 d2                	jne    c0100e84 <ide_wait_ready+0xe>
        /* nothing */;
    if (check_error && (r & (IDE_DF | IDE_ERR)) != 0) {
c0100eb2:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0100eb6:	74 11                	je     c0100ec9 <ide_wait_ready+0x53>
c0100eb8:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100ebb:	83 e0 21             	and    $0x21,%eax
c0100ebe:	85 c0                	test   %eax,%eax
c0100ec0:	74 07                	je     c0100ec9 <ide_wait_ready+0x53>
        return -1;
c0100ec2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100ec7:	eb 05                	jmp    c0100ece <ide_wait_ready+0x58>
    }
    return 0;
c0100ec9:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100ece:	c9                   	leave  
c0100ecf:	c3                   	ret    

c0100ed0 <ide_init>:

void
ide_init(void) {
c0100ed0:	55                   	push   %ebp
c0100ed1:	89 e5                	mov    %esp,%ebp
c0100ed3:	57                   	push   %edi
c0100ed4:	53                   	push   %ebx
c0100ed5:	81 ec 40 02 00 00    	sub    $0x240,%esp
    static_assert((SECTSIZE % 4) == 0);
    unsigned short ideno, iobase;
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c0100edb:	66 c7 45 f6 00 00    	movw   $0x0,-0xa(%ebp)
c0100ee1:	e9 c1 02 00 00       	jmp    c01011a7 <ide_init+0x2d7>
        /* assume that no device here */
        ide_devices[ideno].valid = 0;
c0100ee6:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100eea:	c1 e0 03             	shl    $0x3,%eax
c0100eed:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0100ef4:	29 c2                	sub    %eax,%edx
c0100ef6:	89 d0                	mov    %edx,%eax
c0100ef8:	05 40 f4 19 c0       	add    $0xc019f440,%eax
c0100efd:	c6 00 00             	movb   $0x0,(%eax)

        iobase = IO_BASE(ideno);
c0100f00:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100f04:	66 d1 e8             	shr    %ax
c0100f07:	0f b7 c0             	movzwl %ax,%eax
c0100f0a:	0f b7 04 85 08 bf 10 	movzwl -0x3fef40f8(,%eax,4),%eax
c0100f11:	c0 
c0100f12:	66 89 45 ea          	mov    %ax,-0x16(%ebp)

        /* wait device ready */
        ide_wait_ready(iobase, 0);
c0100f16:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0100f1a:	6a 00                	push   $0x0
c0100f1c:	50                   	push   %eax
c0100f1d:	e8 54 ff ff ff       	call   c0100e76 <ide_wait_ready>
c0100f22:	83 c4 08             	add    $0x8,%esp

        /* step1: select drive */
        outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4));
c0100f25:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100f29:	83 e0 01             	and    $0x1,%eax
c0100f2c:	c1 e0 04             	shl    $0x4,%eax
c0100f2f:	83 c8 e0             	or     $0xffffffe0,%eax
c0100f32:	0f b6 c0             	movzbl %al,%eax
c0100f35:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0100f39:	83 c2 06             	add    $0x6,%edx
c0100f3c:	0f b7 d2             	movzwl %dx,%edx
c0100f3f:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c0100f43:	88 45 c7             	mov    %al,-0x39(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0100f46:	0f b6 45 c7          	movzbl -0x39(%ebp),%eax
c0100f4a:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0100f4e:	ee                   	out    %al,(%dx)
        ide_wait_ready(iobase, 0);
c0100f4f:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0100f53:	6a 00                	push   $0x0
c0100f55:	50                   	push   %eax
c0100f56:	e8 1b ff ff ff       	call   c0100e76 <ide_wait_ready>
c0100f5b:	83 c4 08             	add    $0x8,%esp

        /* step2: send ATA identify command */
        outb(iobase + ISA_COMMAND, IDE_CMD_IDENTIFY);
c0100f5e:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0100f62:	83 c0 07             	add    $0x7,%eax
c0100f65:	0f b7 c0             	movzwl %ax,%eax
c0100f68:	66 89 45 e0          	mov    %ax,-0x20(%ebp)
c0100f6c:	c6 45 c8 ec          	movb   $0xec,-0x38(%ebp)
c0100f70:	0f b6 45 c8          	movzbl -0x38(%ebp),%eax
c0100f74:	0f b7 55 e0          	movzwl -0x20(%ebp),%edx
c0100f78:	ee                   	out    %al,(%dx)
        ide_wait_ready(iobase, 0);
c0100f79:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0100f7d:	6a 00                	push   $0x0
c0100f7f:	50                   	push   %eax
c0100f80:	e8 f1 fe ff ff       	call   c0100e76 <ide_wait_ready>
c0100f85:	83 c4 08             	add    $0x8,%esp

        /* step3: polling */
        if (inb(iobase + ISA_STATUS) == 0 || ide_wait_ready(iobase, 1) != 0) {
c0100f88:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0100f8c:	83 c0 07             	add    $0x7,%eax
c0100f8f:	0f b7 c0             	movzwl %ax,%eax
c0100f92:	66 89 45 ca          	mov    %ax,-0x36(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0100f96:	0f b7 45 ca          	movzwl -0x36(%ebp),%eax
c0100f9a:	89 c2                	mov    %eax,%edx
c0100f9c:	ec                   	in     (%dx),%al
c0100f9d:	88 45 c9             	mov    %al,-0x37(%ebp)
    return data;
c0100fa0:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
c0100fa4:	84 c0                	test   %al,%al
c0100fa6:	0f 84 ef 01 00 00    	je     c010119b <ide_init+0x2cb>
c0100fac:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0100fb0:	6a 01                	push   $0x1
c0100fb2:	50                   	push   %eax
c0100fb3:	e8 be fe ff ff       	call   c0100e76 <ide_wait_ready>
c0100fb8:	83 c4 08             	add    $0x8,%esp
c0100fbb:	85 c0                	test   %eax,%eax
c0100fbd:	0f 85 d8 01 00 00    	jne    c010119b <ide_init+0x2cb>
            continue ;
        }

        /* device is ok */
        ide_devices[ideno].valid = 1;
c0100fc3:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100fc7:	c1 e0 03             	shl    $0x3,%eax
c0100fca:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0100fd1:	29 c2                	sub    %eax,%edx
c0100fd3:	89 d0                	mov    %edx,%eax
c0100fd5:	05 40 f4 19 c0       	add    $0xc019f440,%eax
c0100fda:	c6 00 01             	movb   $0x1,(%eax)

        /* read identification space of the device */
        unsigned int buffer[128];
        insl(iobase + ISA_DATA, buffer, sizeof(buffer) / sizeof(unsigned int));
c0100fdd:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0100fe1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0100fe4:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
c0100fea:	89 45 c0             	mov    %eax,-0x40(%ebp)
c0100fed:	c7 45 bc 80 00 00 00 	movl   $0x80,-0x44(%ebp)
}

static inline void
insl(uint32_t port, void *addr, int cnt) {
    asm volatile (
c0100ff4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0100ff7:	8b 4d c0             	mov    -0x40(%ebp),%ecx
c0100ffa:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0100ffd:	89 cb                	mov    %ecx,%ebx
c0100fff:	89 df                	mov    %ebx,%edi
c0101001:	89 c1                	mov    %eax,%ecx
c0101003:	fc                   	cld    
c0101004:	f2 6d                	repnz insl (%dx),%es:(%edi)
c0101006:	89 c8                	mov    %ecx,%eax
c0101008:	89 fb                	mov    %edi,%ebx
c010100a:	89 5d c0             	mov    %ebx,-0x40(%ebp)
c010100d:	89 45 bc             	mov    %eax,-0x44(%ebp)

        unsigned char *ident = (unsigned char *)buffer;
c0101010:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
c0101016:	89 45 dc             	mov    %eax,-0x24(%ebp)
        unsigned int sectors;
        unsigned int cmdsets = *(unsigned int *)(ident + IDE_IDENT_CMDSETS);
c0101019:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010101c:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
c0101022:	89 45 d8             	mov    %eax,-0x28(%ebp)
        /* device use 48-bits or 28-bits addressing */
        if (cmdsets & (1 << 26)) {
c0101025:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0101028:	25 00 00 00 04       	and    $0x4000000,%eax
c010102d:	85 c0                	test   %eax,%eax
c010102f:	74 0e                	je     c010103f <ide_init+0x16f>
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA_EXT);
c0101031:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101034:	8b 80 c8 00 00 00    	mov    0xc8(%eax),%eax
c010103a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010103d:	eb 09                	jmp    c0101048 <ide_init+0x178>
        }
        else {
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA);
c010103f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101042:	8b 40 78             	mov    0x78(%eax),%eax
c0101045:	89 45 f0             	mov    %eax,-0x10(%ebp)
        }
        ide_devices[ideno].sets = cmdsets;
c0101048:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010104c:	c1 e0 03             	shl    $0x3,%eax
c010104f:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101056:	29 c2                	sub    %eax,%edx
c0101058:	89 d0                	mov    %edx,%eax
c010105a:	8d 90 44 f4 19 c0    	lea    -0x3fe60bbc(%eax),%edx
c0101060:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0101063:	89 02                	mov    %eax,(%edx)
        ide_devices[ideno].size = sectors;
c0101065:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101069:	c1 e0 03             	shl    $0x3,%eax
c010106c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101073:	29 c2                	sub    %eax,%edx
c0101075:	89 d0                	mov    %edx,%eax
c0101077:	8d 90 48 f4 19 c0    	lea    -0x3fe60bb8(%eax),%edx
c010107d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0101080:	89 02                	mov    %eax,(%edx)

        /* check if supports LBA */
        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);
c0101082:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101085:	83 c0 62             	add    $0x62,%eax
c0101088:	0f b7 00             	movzwl (%eax),%eax
c010108b:	0f b7 c0             	movzwl %ax,%eax
c010108e:	25 00 02 00 00       	and    $0x200,%eax
c0101093:	85 c0                	test   %eax,%eax
c0101095:	75 16                	jne    c01010ad <ide_init+0x1dd>
c0101097:	68 10 bf 10 c0       	push   $0xc010bf10
c010109c:	68 53 bf 10 c0       	push   $0xc010bf53
c01010a1:	6a 7d                	push   $0x7d
c01010a3:	68 68 bf 10 c0       	push   $0xc010bf68
c01010a8:	e8 4b f3 ff ff       	call   c01003f8 <__panic>

        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
c01010ad:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c01010b1:	89 c2                	mov    %eax,%edx
c01010b3:	8d 04 d5 00 00 00 00 	lea    0x0(,%edx,8),%eax
c01010ba:	89 c2                	mov    %eax,%edx
c01010bc:	8d 04 d5 00 00 00 00 	lea    0x0(,%edx,8),%eax
c01010c3:	29 d0                	sub    %edx,%eax
c01010c5:	05 40 f4 19 c0       	add    $0xc019f440,%eax
c01010ca:	83 c0 0c             	add    $0xc,%eax
c01010cd:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c01010d0:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01010d3:	83 c0 36             	add    $0x36,%eax
c01010d6:	89 45 d0             	mov    %eax,-0x30(%ebp)
        unsigned int i, length = 40;
c01010d9:	c7 45 cc 28 00 00 00 	movl   $0x28,-0x34(%ebp)
        for (i = 0; i < length; i += 2) {
c01010e0:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01010e7:	eb 34                	jmp    c010111d <ide_init+0x24d>
            model[i] = data[i + 1], model[i + 1] = data[i];
c01010e9:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01010ec:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01010ef:	01 c2                	add    %eax,%edx
c01010f1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01010f4:	8d 48 01             	lea    0x1(%eax),%ecx
c01010f7:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01010fa:	01 c8                	add    %ecx,%eax
c01010fc:	0f b6 00             	movzbl (%eax),%eax
c01010ff:	88 02                	mov    %al,(%edx)
c0101101:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101104:	8d 50 01             	lea    0x1(%eax),%edx
c0101107:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010110a:	01 c2                	add    %eax,%edx
c010110c:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c010110f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101112:	01 c8                	add    %ecx,%eax
c0101114:	0f b6 00             	movzbl (%eax),%eax
c0101117:	88 02                	mov    %al,(%edx)
        /* check if supports LBA */
        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);

        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
        unsigned int i, length = 40;
        for (i = 0; i < length; i += 2) {
c0101119:	83 45 ec 02          	addl   $0x2,-0x14(%ebp)
c010111d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101120:	3b 45 cc             	cmp    -0x34(%ebp),%eax
c0101123:	72 c4                	jb     c01010e9 <ide_init+0x219>
            model[i] = data[i + 1], model[i + 1] = data[i];
        }
        do {
            model[i] = '\0';
c0101125:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0101128:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010112b:	01 d0                	add    %edx,%eax
c010112d:	c6 00 00             	movb   $0x0,(%eax)
        } while (i -- > 0 && model[i] == ' ');
c0101130:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101133:	8d 50 ff             	lea    -0x1(%eax),%edx
c0101136:	89 55 ec             	mov    %edx,-0x14(%ebp)
c0101139:	85 c0                	test   %eax,%eax
c010113b:	74 0f                	je     c010114c <ide_init+0x27c>
c010113d:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0101140:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101143:	01 d0                	add    %edx,%eax
c0101145:	0f b6 00             	movzbl (%eax),%eax
c0101148:	3c 20                	cmp    $0x20,%al
c010114a:	74 d9                	je     c0101125 <ide_init+0x255>

        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
c010114c:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101150:	89 c2                	mov    %eax,%edx
c0101152:	8d 04 d5 00 00 00 00 	lea    0x0(,%edx,8),%eax
c0101159:	89 c2                	mov    %eax,%edx
c010115b:	8d 04 d5 00 00 00 00 	lea    0x0(,%edx,8),%eax
c0101162:	29 d0                	sub    %edx,%eax
c0101164:	05 40 f4 19 c0       	add    $0xc019f440,%eax
c0101169:	8d 48 0c             	lea    0xc(%eax),%ecx
c010116c:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101170:	c1 e0 03             	shl    $0x3,%eax
c0101173:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c010117a:	29 c2                	sub    %eax,%edx
c010117c:	89 d0                	mov    %edx,%eax
c010117e:	05 48 f4 19 c0       	add    $0xc019f448,%eax
c0101183:	8b 10                	mov    (%eax),%edx
c0101185:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101189:	51                   	push   %ecx
c010118a:	52                   	push   %edx
c010118b:	50                   	push   %eax
c010118c:	68 7a bf 10 c0       	push   $0xc010bf7a
c0101191:	e8 fc f0 ff ff       	call   c0100292 <cprintf>
c0101196:	83 c4 10             	add    $0x10,%esp
c0101199:	eb 01                	jmp    c010119c <ide_init+0x2cc>
        outb(iobase + ISA_COMMAND, IDE_CMD_IDENTIFY);
        ide_wait_ready(iobase, 0);

        /* step3: polling */
        if (inb(iobase + ISA_STATUS) == 0 || ide_wait_ready(iobase, 1) != 0) {
            continue ;
c010119b:	90                   	nop

void
ide_init(void) {
    static_assert((SECTSIZE % 4) == 0);
    unsigned short ideno, iobase;
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c010119c:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c01011a0:	83 c0 01             	add    $0x1,%eax
c01011a3:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
c01011a7:	66 83 7d f6 03       	cmpw   $0x3,-0xa(%ebp)
c01011ac:	0f 86 34 fd ff ff    	jbe    c0100ee6 <ide_init+0x16>

        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
    }

    // enable ide interrupt
    pic_enable(IRQ_IDE1);
c01011b2:	83 ec 0c             	sub    $0xc,%esp
c01011b5:	6a 0e                	push   $0xe
c01011b7:	e8 8a 0e 00 00       	call   c0102046 <pic_enable>
c01011bc:	83 c4 10             	add    $0x10,%esp
    pic_enable(IRQ_IDE2);
c01011bf:	83 ec 0c             	sub    $0xc,%esp
c01011c2:	6a 0f                	push   $0xf
c01011c4:	e8 7d 0e 00 00       	call   c0102046 <pic_enable>
c01011c9:	83 c4 10             	add    $0x10,%esp
}
c01011cc:	90                   	nop
c01011cd:	8d 65 f8             	lea    -0x8(%ebp),%esp
c01011d0:	5b                   	pop    %ebx
c01011d1:	5f                   	pop    %edi
c01011d2:	5d                   	pop    %ebp
c01011d3:	c3                   	ret    

c01011d4 <ide_device_valid>:

bool
ide_device_valid(unsigned short ideno) {
c01011d4:	55                   	push   %ebp
c01011d5:	89 e5                	mov    %esp,%ebp
c01011d7:	83 ec 04             	sub    $0x4,%esp
c01011da:	8b 45 08             	mov    0x8(%ebp),%eax
c01011dd:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    return VALID_IDE(ideno);
c01011e1:	66 83 7d fc 03       	cmpw   $0x3,-0x4(%ebp)
c01011e6:	77 25                	ja     c010120d <ide_device_valid+0x39>
c01011e8:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c01011ec:	c1 e0 03             	shl    $0x3,%eax
c01011ef:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c01011f6:	29 c2                	sub    %eax,%edx
c01011f8:	89 d0                	mov    %edx,%eax
c01011fa:	05 40 f4 19 c0       	add    $0xc019f440,%eax
c01011ff:	0f b6 00             	movzbl (%eax),%eax
c0101202:	84 c0                	test   %al,%al
c0101204:	74 07                	je     c010120d <ide_device_valid+0x39>
c0101206:	b8 01 00 00 00       	mov    $0x1,%eax
c010120b:	eb 05                	jmp    c0101212 <ide_device_valid+0x3e>
c010120d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101212:	c9                   	leave  
c0101213:	c3                   	ret    

c0101214 <ide_device_size>:

size_t
ide_device_size(unsigned short ideno) {
c0101214:	55                   	push   %ebp
c0101215:	89 e5                	mov    %esp,%ebp
c0101217:	83 ec 04             	sub    $0x4,%esp
c010121a:	8b 45 08             	mov    0x8(%ebp),%eax
c010121d:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    if (ide_device_valid(ideno)) {
c0101221:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101225:	50                   	push   %eax
c0101226:	e8 a9 ff ff ff       	call   c01011d4 <ide_device_valid>
c010122b:	83 c4 04             	add    $0x4,%esp
c010122e:	85 c0                	test   %eax,%eax
c0101230:	74 1b                	je     c010124d <ide_device_size+0x39>
        return ide_devices[ideno].size;
c0101232:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101236:	c1 e0 03             	shl    $0x3,%eax
c0101239:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101240:	29 c2                	sub    %eax,%edx
c0101242:	89 d0                	mov    %edx,%eax
c0101244:	05 48 f4 19 c0       	add    $0xc019f448,%eax
c0101249:	8b 00                	mov    (%eax),%eax
c010124b:	eb 05                	jmp    c0101252 <ide_device_size+0x3e>
    }
    return 0;
c010124d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101252:	c9                   	leave  
c0101253:	c3                   	ret    

c0101254 <ide_read_secs>:

int
ide_read_secs(unsigned short ideno, uint32_t secno, void *dst, size_t nsecs) {
c0101254:	55                   	push   %ebp
c0101255:	89 e5                	mov    %esp,%ebp
c0101257:	57                   	push   %edi
c0101258:	53                   	push   %ebx
c0101259:	83 ec 40             	sub    $0x40,%esp
c010125c:	8b 45 08             	mov    0x8(%ebp),%eax
c010125f:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c0101263:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c010126a:	77 25                	ja     c0101291 <ide_read_secs+0x3d>
c010126c:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
c0101271:	77 1e                	ja     c0101291 <ide_read_secs+0x3d>
c0101273:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101277:	c1 e0 03             	shl    $0x3,%eax
c010127a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101281:	29 c2                	sub    %eax,%edx
c0101283:	89 d0                	mov    %edx,%eax
c0101285:	05 40 f4 19 c0       	add    $0xc019f440,%eax
c010128a:	0f b6 00             	movzbl (%eax),%eax
c010128d:	84 c0                	test   %al,%al
c010128f:	75 19                	jne    c01012aa <ide_read_secs+0x56>
c0101291:	68 98 bf 10 c0       	push   $0xc010bf98
c0101296:	68 53 bf 10 c0       	push   $0xc010bf53
c010129b:	68 9f 00 00 00       	push   $0x9f
c01012a0:	68 68 bf 10 c0       	push   $0xc010bf68
c01012a5:	e8 4e f1 ff ff       	call   c01003f8 <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c01012aa:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c01012b1:	77 0f                	ja     c01012c2 <ide_read_secs+0x6e>
c01012b3:	8b 55 0c             	mov    0xc(%ebp),%edx
c01012b6:	8b 45 14             	mov    0x14(%ebp),%eax
c01012b9:	01 d0                	add    %edx,%eax
c01012bb:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c01012c0:	76 19                	jbe    c01012db <ide_read_secs+0x87>
c01012c2:	68 c0 bf 10 c0       	push   $0xc010bfc0
c01012c7:	68 53 bf 10 c0       	push   $0xc010bf53
c01012cc:	68 a0 00 00 00       	push   $0xa0
c01012d1:	68 68 bf 10 c0       	push   $0xc010bf68
c01012d6:	e8 1d f1 ff ff       	call   c01003f8 <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c01012db:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c01012df:	66 d1 e8             	shr    %ax
c01012e2:	0f b7 c0             	movzwl %ax,%eax
c01012e5:	0f b7 04 85 08 bf 10 	movzwl -0x3fef40f8(,%eax,4),%eax
c01012ec:	c0 
c01012ed:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c01012f1:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c01012f5:	66 d1 e8             	shr    %ax
c01012f8:	0f b7 c0             	movzwl %ax,%eax
c01012fb:	0f b7 04 85 0a bf 10 	movzwl -0x3fef40f6(,%eax,4),%eax
c0101302:	c0 
c0101303:	66 89 45 f0          	mov    %ax,-0x10(%ebp)

    ide_wait_ready(iobase, 0);
c0101307:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c010130b:	83 ec 08             	sub    $0x8,%esp
c010130e:	6a 00                	push   $0x0
c0101310:	50                   	push   %eax
c0101311:	e8 60 fb ff ff       	call   c0100e76 <ide_wait_ready>
c0101316:	83 c4 10             	add    $0x10,%esp

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c0101319:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c010131d:	83 c0 02             	add    $0x2,%eax
c0101320:	0f b7 c0             	movzwl %ax,%eax
c0101323:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
c0101327:	c6 45 d7 00          	movb   $0x0,-0x29(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010132b:	0f b6 45 d7          	movzbl -0x29(%ebp),%eax
c010132f:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101333:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECCNT, nsecs);
c0101334:	8b 45 14             	mov    0x14(%ebp),%eax
c0101337:	0f b6 c0             	movzbl %al,%eax
c010133a:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010133e:	83 c2 02             	add    $0x2,%edx
c0101341:	0f b7 d2             	movzwl %dx,%edx
c0101344:	66 89 55 e8          	mov    %dx,-0x18(%ebp)
c0101348:	88 45 d8             	mov    %al,-0x28(%ebp)
c010134b:	0f b6 45 d8          	movzbl -0x28(%ebp),%eax
c010134f:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c0101353:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c0101354:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101357:	0f b6 c0             	movzbl %al,%eax
c010135a:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010135e:	83 c2 03             	add    $0x3,%edx
c0101361:	0f b7 d2             	movzwl %dx,%edx
c0101364:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c0101368:	88 45 d9             	mov    %al,-0x27(%ebp)
c010136b:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c010136f:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0101373:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c0101374:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101377:	c1 e8 08             	shr    $0x8,%eax
c010137a:	0f b6 c0             	movzbl %al,%eax
c010137d:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101381:	83 c2 04             	add    $0x4,%edx
c0101384:	0f b7 d2             	movzwl %dx,%edx
c0101387:	66 89 55 e4          	mov    %dx,-0x1c(%ebp)
c010138b:	88 45 da             	mov    %al,-0x26(%ebp)
c010138e:	0f b6 45 da          	movzbl -0x26(%ebp),%eax
c0101392:	0f b7 55 e4          	movzwl -0x1c(%ebp),%edx
c0101396:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c0101397:	8b 45 0c             	mov    0xc(%ebp),%eax
c010139a:	c1 e8 10             	shr    $0x10,%eax
c010139d:	0f b6 c0             	movzbl %al,%eax
c01013a0:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01013a4:	83 c2 05             	add    $0x5,%edx
c01013a7:	0f b7 d2             	movzwl %dx,%edx
c01013aa:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c01013ae:	88 45 db             	mov    %al,-0x25(%ebp)
c01013b1:	0f b6 45 db          	movzbl -0x25(%ebp),%eax
c01013b5:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c01013b9:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c01013ba:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c01013be:	83 e0 01             	and    $0x1,%eax
c01013c1:	c1 e0 04             	shl    $0x4,%eax
c01013c4:	89 c2                	mov    %eax,%edx
c01013c6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01013c9:	c1 e8 18             	shr    $0x18,%eax
c01013cc:	83 e0 0f             	and    $0xf,%eax
c01013cf:	09 d0                	or     %edx,%eax
c01013d1:	83 c8 e0             	or     $0xffffffe0,%eax
c01013d4:	0f b6 c0             	movzbl %al,%eax
c01013d7:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01013db:	83 c2 06             	add    $0x6,%edx
c01013de:	0f b7 d2             	movzwl %dx,%edx
c01013e1:	66 89 55 e0          	mov    %dx,-0x20(%ebp)
c01013e5:	88 45 dc             	mov    %al,-0x24(%ebp)
c01013e8:	0f b6 45 dc          	movzbl -0x24(%ebp),%eax
c01013ec:	0f b7 55 e0          	movzwl -0x20(%ebp),%edx
c01013f0:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_COMMAND, IDE_CMD_READ);
c01013f1:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01013f5:	83 c0 07             	add    $0x7,%eax
c01013f8:	0f b7 c0             	movzwl %ax,%eax
c01013fb:	66 89 45 de          	mov    %ax,-0x22(%ebp)
c01013ff:	c6 45 dd 20          	movb   $0x20,-0x23(%ebp)
c0101403:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0101407:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c010140b:	ee                   	out    %al,(%dx)

    int ret = 0;
c010140c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c0101413:	eb 56                	jmp    c010146b <ide_read_secs+0x217>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c0101415:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101419:	83 ec 08             	sub    $0x8,%esp
c010141c:	6a 01                	push   $0x1
c010141e:	50                   	push   %eax
c010141f:	e8 52 fa ff ff       	call   c0100e76 <ide_wait_ready>
c0101424:	83 c4 10             	add    $0x10,%esp
c0101427:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010142a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010142e:	75 43                	jne    c0101473 <ide_read_secs+0x21f>
            goto out;
        }
        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
c0101430:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101434:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0101437:	8b 45 10             	mov    0x10(%ebp),%eax
c010143a:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010143d:	c7 45 cc 80 00 00 00 	movl   $0x80,-0x34(%ebp)
    return data;
}

static inline void
insl(uint32_t port, void *addr, int cnt) {
    asm volatile (
c0101444:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0101447:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c010144a:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010144d:	89 cb                	mov    %ecx,%ebx
c010144f:	89 df                	mov    %ebx,%edi
c0101451:	89 c1                	mov    %eax,%ecx
c0101453:	fc                   	cld    
c0101454:	f2 6d                	repnz insl (%dx),%es:(%edi)
c0101456:	89 c8                	mov    %ecx,%eax
c0101458:	89 fb                	mov    %edi,%ebx
c010145a:	89 5d d0             	mov    %ebx,-0x30(%ebp)
c010145d:	89 45 cc             	mov    %eax,-0x34(%ebp)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
    outb(iobase + ISA_COMMAND, IDE_CMD_READ);

    int ret = 0;
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c0101460:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0101464:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c010146b:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010146f:	75 a4                	jne    c0101415 <ide_read_secs+0x1c1>
c0101471:	eb 01                	jmp    c0101474 <ide_read_secs+0x220>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
            goto out;
c0101473:	90                   	nop
        }
        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
    }

out:
    return ret;
c0101474:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0101477:	8d 65 f8             	lea    -0x8(%ebp),%esp
c010147a:	5b                   	pop    %ebx
c010147b:	5f                   	pop    %edi
c010147c:	5d                   	pop    %ebp
c010147d:	c3                   	ret    

c010147e <ide_write_secs>:

int
ide_write_secs(unsigned short ideno, uint32_t secno, const void *src, size_t nsecs) {
c010147e:	55                   	push   %ebp
c010147f:	89 e5                	mov    %esp,%ebp
c0101481:	56                   	push   %esi
c0101482:	53                   	push   %ebx
c0101483:	83 ec 40             	sub    $0x40,%esp
c0101486:	8b 45 08             	mov    0x8(%ebp),%eax
c0101489:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c010148d:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c0101494:	77 25                	ja     c01014bb <ide_write_secs+0x3d>
c0101496:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
c010149b:	77 1e                	ja     c01014bb <ide_write_secs+0x3d>
c010149d:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c01014a1:	c1 e0 03             	shl    $0x3,%eax
c01014a4:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c01014ab:	29 c2                	sub    %eax,%edx
c01014ad:	89 d0                	mov    %edx,%eax
c01014af:	05 40 f4 19 c0       	add    $0xc019f440,%eax
c01014b4:	0f b6 00             	movzbl (%eax),%eax
c01014b7:	84 c0                	test   %al,%al
c01014b9:	75 19                	jne    c01014d4 <ide_write_secs+0x56>
c01014bb:	68 98 bf 10 c0       	push   $0xc010bf98
c01014c0:	68 53 bf 10 c0       	push   $0xc010bf53
c01014c5:	68 bc 00 00 00       	push   $0xbc
c01014ca:	68 68 bf 10 c0       	push   $0xc010bf68
c01014cf:	e8 24 ef ff ff       	call   c01003f8 <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c01014d4:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c01014db:	77 0f                	ja     c01014ec <ide_write_secs+0x6e>
c01014dd:	8b 55 0c             	mov    0xc(%ebp),%edx
c01014e0:	8b 45 14             	mov    0x14(%ebp),%eax
c01014e3:	01 d0                	add    %edx,%eax
c01014e5:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c01014ea:	76 19                	jbe    c0101505 <ide_write_secs+0x87>
c01014ec:	68 c0 bf 10 c0       	push   $0xc010bfc0
c01014f1:	68 53 bf 10 c0       	push   $0xc010bf53
c01014f6:	68 bd 00 00 00       	push   $0xbd
c01014fb:	68 68 bf 10 c0       	push   $0xc010bf68
c0101500:	e8 f3 ee ff ff       	call   c01003f8 <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c0101505:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101509:	66 d1 e8             	shr    %ax
c010150c:	0f b7 c0             	movzwl %ax,%eax
c010150f:	0f b7 04 85 08 bf 10 	movzwl -0x3fef40f8(,%eax,4),%eax
c0101516:	c0 
c0101517:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c010151b:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c010151f:	66 d1 e8             	shr    %ax
c0101522:	0f b7 c0             	movzwl %ax,%eax
c0101525:	0f b7 04 85 0a bf 10 	movzwl -0x3fef40f6(,%eax,4),%eax
c010152c:	c0 
c010152d:	66 89 45 f0          	mov    %ax,-0x10(%ebp)

    ide_wait_ready(iobase, 0);
c0101531:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101535:	83 ec 08             	sub    $0x8,%esp
c0101538:	6a 00                	push   $0x0
c010153a:	50                   	push   %eax
c010153b:	e8 36 f9 ff ff       	call   c0100e76 <ide_wait_ready>
c0101540:	83 c4 10             	add    $0x10,%esp

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c0101543:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c0101547:	83 c0 02             	add    $0x2,%eax
c010154a:	0f b7 c0             	movzwl %ax,%eax
c010154d:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
c0101551:	c6 45 d7 00          	movb   $0x0,-0x29(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101555:	0f b6 45 d7          	movzbl -0x29(%ebp),%eax
c0101559:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c010155d:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECCNT, nsecs);
c010155e:	8b 45 14             	mov    0x14(%ebp),%eax
c0101561:	0f b6 c0             	movzbl %al,%eax
c0101564:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101568:	83 c2 02             	add    $0x2,%edx
c010156b:	0f b7 d2             	movzwl %dx,%edx
c010156e:	66 89 55 e8          	mov    %dx,-0x18(%ebp)
c0101572:	88 45 d8             	mov    %al,-0x28(%ebp)
c0101575:	0f b6 45 d8          	movzbl -0x28(%ebp),%eax
c0101579:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c010157d:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c010157e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101581:	0f b6 c0             	movzbl %al,%eax
c0101584:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101588:	83 c2 03             	add    $0x3,%edx
c010158b:	0f b7 d2             	movzwl %dx,%edx
c010158e:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c0101592:	88 45 d9             	mov    %al,-0x27(%ebp)
c0101595:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c0101599:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c010159d:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c010159e:	8b 45 0c             	mov    0xc(%ebp),%eax
c01015a1:	c1 e8 08             	shr    $0x8,%eax
c01015a4:	0f b6 c0             	movzbl %al,%eax
c01015a7:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01015ab:	83 c2 04             	add    $0x4,%edx
c01015ae:	0f b7 d2             	movzwl %dx,%edx
c01015b1:	66 89 55 e4          	mov    %dx,-0x1c(%ebp)
c01015b5:	88 45 da             	mov    %al,-0x26(%ebp)
c01015b8:	0f b6 45 da          	movzbl -0x26(%ebp),%eax
c01015bc:	0f b7 55 e4          	movzwl -0x1c(%ebp),%edx
c01015c0:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c01015c1:	8b 45 0c             	mov    0xc(%ebp),%eax
c01015c4:	c1 e8 10             	shr    $0x10,%eax
c01015c7:	0f b6 c0             	movzbl %al,%eax
c01015ca:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01015ce:	83 c2 05             	add    $0x5,%edx
c01015d1:	0f b7 d2             	movzwl %dx,%edx
c01015d4:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c01015d8:	88 45 db             	mov    %al,-0x25(%ebp)
c01015db:	0f b6 45 db          	movzbl -0x25(%ebp),%eax
c01015df:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c01015e3:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c01015e4:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c01015e8:	83 e0 01             	and    $0x1,%eax
c01015eb:	c1 e0 04             	shl    $0x4,%eax
c01015ee:	89 c2                	mov    %eax,%edx
c01015f0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01015f3:	c1 e8 18             	shr    $0x18,%eax
c01015f6:	83 e0 0f             	and    $0xf,%eax
c01015f9:	09 d0                	or     %edx,%eax
c01015fb:	83 c8 e0             	or     $0xffffffe0,%eax
c01015fe:	0f b6 c0             	movzbl %al,%eax
c0101601:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101605:	83 c2 06             	add    $0x6,%edx
c0101608:	0f b7 d2             	movzwl %dx,%edx
c010160b:	66 89 55 e0          	mov    %dx,-0x20(%ebp)
c010160f:	88 45 dc             	mov    %al,-0x24(%ebp)
c0101612:	0f b6 45 dc          	movzbl -0x24(%ebp),%eax
c0101616:	0f b7 55 e0          	movzwl -0x20(%ebp),%edx
c010161a:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);
c010161b:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c010161f:	83 c0 07             	add    $0x7,%eax
c0101622:	0f b7 c0             	movzwl %ax,%eax
c0101625:	66 89 45 de          	mov    %ax,-0x22(%ebp)
c0101629:	c6 45 dd 30          	movb   $0x30,-0x23(%ebp)
c010162d:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0101631:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c0101635:	ee                   	out    %al,(%dx)

    int ret = 0;
c0101636:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c010163d:	eb 56                	jmp    c0101695 <ide_write_secs+0x217>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c010163f:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101643:	83 ec 08             	sub    $0x8,%esp
c0101646:	6a 01                	push   $0x1
c0101648:	50                   	push   %eax
c0101649:	e8 28 f8 ff ff       	call   c0100e76 <ide_wait_ready>
c010164e:	83 c4 10             	add    $0x10,%esp
c0101651:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0101654:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0101658:	75 43                	jne    c010169d <ide_write_secs+0x21f>
            goto out;
        }
        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
c010165a:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c010165e:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0101661:	8b 45 10             	mov    0x10(%ebp),%eax
c0101664:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0101667:	c7 45 cc 80 00 00 00 	movl   $0x80,-0x34(%ebp)
    asm volatile ("outw %0, %1" :: "a" (data), "d" (port) : "memory");
}

static inline void
outsl(uint32_t port, const void *addr, int cnt) {
    asm volatile (
c010166e:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0101671:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c0101674:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0101677:	89 cb                	mov    %ecx,%ebx
c0101679:	89 de                	mov    %ebx,%esi
c010167b:	89 c1                	mov    %eax,%ecx
c010167d:	fc                   	cld    
c010167e:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
c0101680:	89 c8                	mov    %ecx,%eax
c0101682:	89 f3                	mov    %esi,%ebx
c0101684:	89 5d d0             	mov    %ebx,-0x30(%ebp)
c0101687:	89 45 cc             	mov    %eax,-0x34(%ebp)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);

    int ret = 0;
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c010168a:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c010168e:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c0101695:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0101699:	75 a4                	jne    c010163f <ide_write_secs+0x1c1>
c010169b:	eb 01                	jmp    c010169e <ide_write_secs+0x220>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
            goto out;
c010169d:	90                   	nop
        }
        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
    }

out:
    return ret;
c010169e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01016a1:	8d 65 f8             	lea    -0x8(%ebp),%esp
c01016a4:	5b                   	pop    %ebx
c01016a5:	5e                   	pop    %esi
c01016a6:	5d                   	pop    %ebp
c01016a7:	c3                   	ret    

c01016a8 <clock_init>:
/* *
 * clock_init - initialize 8253 clock to interrupt 100 times per second,
 * and then enable IRQ_TIMER.
 * */
void
clock_init(void) {
c01016a8:	55                   	push   %ebp
c01016a9:	89 e5                	mov    %esp,%ebp
c01016ab:	83 ec 18             	sub    $0x18,%esp
c01016ae:	66 c7 45 f6 43 00    	movw   $0x43,-0xa(%ebp)
c01016b4:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01016b8:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
c01016bc:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c01016c0:	ee                   	out    %al,(%dx)
c01016c1:	66 c7 45 f4 40 00    	movw   $0x40,-0xc(%ebp)
c01016c7:	c6 45 f0 9c          	movb   $0x9c,-0x10(%ebp)
c01016cb:	0f b6 45 f0          	movzbl -0x10(%ebp),%eax
c01016cf:	0f b7 55 f4          	movzwl -0xc(%ebp),%edx
c01016d3:	ee                   	out    %al,(%dx)
c01016d4:	66 c7 45 f2 40 00    	movw   $0x40,-0xe(%ebp)
c01016da:	c6 45 f1 2e          	movb   $0x2e,-0xf(%ebp)
c01016de:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c01016e2:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01016e6:	ee                   	out    %al,(%dx)
    outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
    outb(IO_TIMER1, TIMER_DIV(100) % 256);
    outb(IO_TIMER1, TIMER_DIV(100) / 256);

    // initialize time counter 'ticks' to zero
    ticks = 0;
c01016e7:	c7 05 54 20 1a c0 00 	movl   $0x0,0xc01a2054
c01016ee:	00 00 00 

    cprintf("++ setup timer interrupts\n");
c01016f1:	83 ec 0c             	sub    $0xc,%esp
c01016f4:	68 fa bf 10 c0       	push   $0xc010bffa
c01016f9:	e8 94 eb ff ff       	call   c0100292 <cprintf>
c01016fe:	83 c4 10             	add    $0x10,%esp
    pic_enable(IRQ_TIMER);
c0101701:	83 ec 0c             	sub    $0xc,%esp
c0101704:	6a 00                	push   $0x0
c0101706:	e8 3b 09 00 00       	call   c0102046 <pic_enable>
c010170b:	83 c4 10             	add    $0x10,%esp
}
c010170e:	90                   	nop
c010170f:	c9                   	leave  
c0101710:	c3                   	ret    

c0101711 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0101711:	55                   	push   %ebp
c0101712:	89 e5                	mov    %esp,%ebp
c0101714:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0101717:	9c                   	pushf  
c0101718:	58                   	pop    %eax
c0101719:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010171c:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010171f:	25 00 02 00 00       	and    $0x200,%eax
c0101724:	85 c0                	test   %eax,%eax
c0101726:	74 0c                	je     c0101734 <__intr_save+0x23>
        intr_disable();
c0101728:	e8 8a 0a 00 00       	call   c01021b7 <intr_disable>
        return 1;
c010172d:	b8 01 00 00 00       	mov    $0x1,%eax
c0101732:	eb 05                	jmp    c0101739 <__intr_save+0x28>
    }
    return 0;
c0101734:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101739:	c9                   	leave  
c010173a:	c3                   	ret    

c010173b <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010173b:	55                   	push   %ebp
c010173c:	89 e5                	mov    %esp,%ebp
c010173e:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0101741:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0101745:	74 05                	je     c010174c <__intr_restore+0x11>
        intr_enable();
c0101747:	e8 64 0a 00 00       	call   c01021b0 <intr_enable>
    }
}
c010174c:	90                   	nop
c010174d:	c9                   	leave  
c010174e:	c3                   	ret    

c010174f <delay>:
#include <memlayout.h>
#include <sync.h>

/* stupid I/O delay routine necessitated by historical PC design flaws */
static void
delay(void) {
c010174f:	55                   	push   %ebp
c0101750:	89 e5                	mov    %esp,%ebp
c0101752:	83 ec 10             	sub    $0x10,%esp
c0101755:	66 c7 45 fe 84 00    	movw   $0x84,-0x2(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c010175b:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c010175f:	89 c2                	mov    %eax,%edx
c0101761:	ec                   	in     (%dx),%al
c0101762:	88 45 f4             	mov    %al,-0xc(%ebp)
c0101765:	66 c7 45 fc 84 00    	movw   $0x84,-0x4(%ebp)
c010176b:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c010176f:	89 c2                	mov    %eax,%edx
c0101771:	ec                   	in     (%dx),%al
c0101772:	88 45 f5             	mov    %al,-0xb(%ebp)
c0101775:	66 c7 45 fa 84 00    	movw   $0x84,-0x6(%ebp)
c010177b:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c010177f:	89 c2                	mov    %eax,%edx
c0101781:	ec                   	in     (%dx),%al
c0101782:	88 45 f6             	mov    %al,-0xa(%ebp)
c0101785:	66 c7 45 f8 84 00    	movw   $0x84,-0x8(%ebp)
c010178b:	0f b7 45 f8          	movzwl -0x8(%ebp),%eax
c010178f:	89 c2                	mov    %eax,%edx
c0101791:	ec                   	in     (%dx),%al
c0101792:	88 45 f7             	mov    %al,-0x9(%ebp)
    inb(0x84);
    inb(0x84);
    inb(0x84);
    inb(0x84);
}
c0101795:	90                   	nop
c0101796:	c9                   	leave  
c0101797:	c3                   	ret    

c0101798 <cga_init>:
static uint16_t addr_6845;

/* TEXT-mode CGA/VGA display output */

static void
cga_init(void) {
c0101798:	55                   	push   %ebp
c0101799:	89 e5                	mov    %esp,%ebp
c010179b:	83 ec 20             	sub    $0x20,%esp
    volatile uint16_t *cp = (uint16_t *)(CGA_BUF + KERNBASE);
c010179e:	c7 45 fc 00 80 0b c0 	movl   $0xc00b8000,-0x4(%ebp)
    uint16_t was = *cp;
c01017a5:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01017a8:	0f b7 00             	movzwl (%eax),%eax
c01017ab:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    *cp = (uint16_t) 0xA55A;
c01017af:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01017b2:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
    if (*cp != 0xA55A) {
c01017b7:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01017ba:	0f b7 00             	movzwl (%eax),%eax
c01017bd:	66 3d 5a a5          	cmp    $0xa55a,%ax
c01017c1:	74 12                	je     c01017d5 <cga_init+0x3d>
        cp = (uint16_t*)(MONO_BUF + KERNBASE);
c01017c3:	c7 45 fc 00 00 0b c0 	movl   $0xc00b0000,-0x4(%ebp)
        addr_6845 = MONO_BASE;
c01017ca:	66 c7 05 26 f5 19 c0 	movw   $0x3b4,0xc019f526
c01017d1:	b4 03 
c01017d3:	eb 13                	jmp    c01017e8 <cga_init+0x50>
    } else {
        *cp = was;
c01017d5:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01017d8:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c01017dc:	66 89 10             	mov    %dx,(%eax)
        addr_6845 = CGA_BASE;
c01017df:	66 c7 05 26 f5 19 c0 	movw   $0x3d4,0xc019f526
c01017e6:	d4 03 
    }

    // Extract cursor location
    uint32_t pos;
    outb(addr_6845, 14);
c01017e8:	0f b7 05 26 f5 19 c0 	movzwl 0xc019f526,%eax
c01017ef:	0f b7 c0             	movzwl %ax,%eax
c01017f2:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
c01017f6:	c6 45 ea 0e          	movb   $0xe,-0x16(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01017fa:	0f b6 45 ea          	movzbl -0x16(%ebp),%eax
c01017fe:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
c0101802:	ee                   	out    %al,(%dx)
    pos = inb(addr_6845 + 1) << 8;
c0101803:	0f b7 05 26 f5 19 c0 	movzwl 0xc019f526,%eax
c010180a:	83 c0 01             	add    $0x1,%eax
c010180d:	0f b7 c0             	movzwl %ax,%eax
c0101810:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101814:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101818:	89 c2                	mov    %eax,%edx
c010181a:	ec                   	in     (%dx),%al
c010181b:	88 45 eb             	mov    %al,-0x15(%ebp)
    return data;
c010181e:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
c0101822:	0f b6 c0             	movzbl %al,%eax
c0101825:	c1 e0 08             	shl    $0x8,%eax
c0101828:	89 45 f4             	mov    %eax,-0xc(%ebp)
    outb(addr_6845, 15);
c010182b:	0f b7 05 26 f5 19 c0 	movzwl 0xc019f526,%eax
c0101832:	0f b7 c0             	movzwl %ax,%eax
c0101835:	66 89 45 f0          	mov    %ax,-0x10(%ebp)
c0101839:	c6 45 ec 0f          	movb   $0xf,-0x14(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010183d:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
c0101841:	0f b7 55 f0          	movzwl -0x10(%ebp),%edx
c0101845:	ee                   	out    %al,(%dx)
    pos |= inb(addr_6845 + 1);
c0101846:	0f b7 05 26 f5 19 c0 	movzwl 0xc019f526,%eax
c010184d:	83 c0 01             	add    $0x1,%eax
c0101850:	0f b7 c0             	movzwl %ax,%eax
c0101853:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101857:	0f b7 45 ee          	movzwl -0x12(%ebp),%eax
c010185b:	89 c2                	mov    %eax,%edx
c010185d:	ec                   	in     (%dx),%al
c010185e:	88 45 ed             	mov    %al,-0x13(%ebp)
    return data;
c0101861:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101865:	0f b6 c0             	movzbl %al,%eax
c0101868:	09 45 f4             	or     %eax,-0xc(%ebp)

    crt_buf = (uint16_t*) cp;
c010186b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010186e:	a3 20 f5 19 c0       	mov    %eax,0xc019f520
    crt_pos = pos;
c0101873:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101876:	66 a3 24 f5 19 c0    	mov    %ax,0xc019f524
}
c010187c:	90                   	nop
c010187d:	c9                   	leave  
c010187e:	c3                   	ret    

c010187f <serial_init>:

static bool serial_exists = 0;

static void
serial_init(void) {
c010187f:	55                   	push   %ebp
c0101880:	89 e5                	mov    %esp,%ebp
c0101882:	83 ec 28             	sub    $0x28,%esp
c0101885:	66 c7 45 f6 fa 03    	movw   $0x3fa,-0xa(%ebp)
c010188b:	c6 45 da 00          	movb   $0x0,-0x26(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010188f:	0f b6 45 da          	movzbl -0x26(%ebp),%eax
c0101893:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0101897:	ee                   	out    %al,(%dx)
c0101898:	66 c7 45 f4 fb 03    	movw   $0x3fb,-0xc(%ebp)
c010189e:	c6 45 db 80          	movb   $0x80,-0x25(%ebp)
c01018a2:	0f b6 45 db          	movzbl -0x25(%ebp),%eax
c01018a6:	0f b7 55 f4          	movzwl -0xc(%ebp),%edx
c01018aa:	ee                   	out    %al,(%dx)
c01018ab:	66 c7 45 f2 f8 03    	movw   $0x3f8,-0xe(%ebp)
c01018b1:	c6 45 dc 0c          	movb   $0xc,-0x24(%ebp)
c01018b5:	0f b6 45 dc          	movzbl -0x24(%ebp),%eax
c01018b9:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01018bd:	ee                   	out    %al,(%dx)
c01018be:	66 c7 45 f0 f9 03    	movw   $0x3f9,-0x10(%ebp)
c01018c4:	c6 45 dd 00          	movb   $0x0,-0x23(%ebp)
c01018c8:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c01018cc:	0f b7 55 f0          	movzwl -0x10(%ebp),%edx
c01018d0:	ee                   	out    %al,(%dx)
c01018d1:	66 c7 45 ee fb 03    	movw   $0x3fb,-0x12(%ebp)
c01018d7:	c6 45 de 03          	movb   $0x3,-0x22(%ebp)
c01018db:	0f b6 45 de          	movzbl -0x22(%ebp),%eax
c01018df:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c01018e3:	ee                   	out    %al,(%dx)
c01018e4:	66 c7 45 ec fc 03    	movw   $0x3fc,-0x14(%ebp)
c01018ea:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
c01018ee:	0f b6 45 df          	movzbl -0x21(%ebp),%eax
c01018f2:	0f b7 55 ec          	movzwl -0x14(%ebp),%edx
c01018f6:	ee                   	out    %al,(%dx)
c01018f7:	66 c7 45 ea f9 03    	movw   $0x3f9,-0x16(%ebp)
c01018fd:	c6 45 e0 01          	movb   $0x1,-0x20(%ebp)
c0101901:	0f b6 45 e0          	movzbl -0x20(%ebp),%eax
c0101905:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101909:	ee                   	out    %al,(%dx)
c010190a:	66 c7 45 e8 fd 03    	movw   $0x3fd,-0x18(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101910:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
c0101914:	89 c2                	mov    %eax,%edx
c0101916:	ec                   	in     (%dx),%al
c0101917:	88 45 e1             	mov    %al,-0x1f(%ebp)
    return data;
c010191a:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
    // Enable rcv interrupts
    outb(COM1 + COM_IER, COM_IER_RDI);

    // Clear any preexisting overrun indications and interrupts
    // Serial port doesn't exist if COM_LSR returns 0xFF
    serial_exists = (inb(COM1 + COM_LSR) != 0xFF);
c010191e:	3c ff                	cmp    $0xff,%al
c0101920:	0f 95 c0             	setne  %al
c0101923:	0f b6 c0             	movzbl %al,%eax
c0101926:	a3 28 f5 19 c0       	mov    %eax,0xc019f528
c010192b:	66 c7 45 e6 fa 03    	movw   $0x3fa,-0x1a(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101931:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c0101935:	89 c2                	mov    %eax,%edx
c0101937:	ec                   	in     (%dx),%al
c0101938:	88 45 e2             	mov    %al,-0x1e(%ebp)
c010193b:	66 c7 45 e4 f8 03    	movw   $0x3f8,-0x1c(%ebp)
c0101941:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
c0101945:	89 c2                	mov    %eax,%edx
c0101947:	ec                   	in     (%dx),%al
c0101948:	88 45 e3             	mov    %al,-0x1d(%ebp)
    (void) inb(COM1+COM_IIR);
    (void) inb(COM1+COM_RX);

    if (serial_exists) {
c010194b:	a1 28 f5 19 c0       	mov    0xc019f528,%eax
c0101950:	85 c0                	test   %eax,%eax
c0101952:	74 0d                	je     c0101961 <serial_init+0xe2>
        pic_enable(IRQ_COM1);
c0101954:	83 ec 0c             	sub    $0xc,%esp
c0101957:	6a 04                	push   $0x4
c0101959:	e8 e8 06 00 00       	call   c0102046 <pic_enable>
c010195e:	83 c4 10             	add    $0x10,%esp
    }
}
c0101961:	90                   	nop
c0101962:	c9                   	leave  
c0101963:	c3                   	ret    

c0101964 <lpt_putc_sub>:

static void
lpt_putc_sub(int c) {
c0101964:	55                   	push   %ebp
c0101965:	89 e5                	mov    %esp,%ebp
c0101967:	83 ec 10             	sub    $0x10,%esp
    int i;
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c010196a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0101971:	eb 09                	jmp    c010197c <lpt_putc_sub+0x18>
        delay();
c0101973:	e8 d7 fd ff ff       	call   c010174f <delay>
}

static void
lpt_putc_sub(int c) {
    int i;
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c0101978:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010197c:	66 c7 45 f4 79 03    	movw   $0x379,-0xc(%ebp)
c0101982:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c0101986:	89 c2                	mov    %eax,%edx
c0101988:	ec                   	in     (%dx),%al
c0101989:	88 45 f3             	mov    %al,-0xd(%ebp)
    return data;
c010198c:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101990:	84 c0                	test   %al,%al
c0101992:	78 09                	js     c010199d <lpt_putc_sub+0x39>
c0101994:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
c010199b:	7e d6                	jle    c0101973 <lpt_putc_sub+0xf>
        delay();
    }
    outb(LPTPORT + 0, c);
c010199d:	8b 45 08             	mov    0x8(%ebp),%eax
c01019a0:	0f b6 c0             	movzbl %al,%eax
c01019a3:	66 c7 45 f8 78 03    	movw   $0x378,-0x8(%ebp)
c01019a9:	88 45 f0             	mov    %al,-0x10(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01019ac:	0f b6 45 f0          	movzbl -0x10(%ebp),%eax
c01019b0:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
c01019b4:	ee                   	out    %al,(%dx)
c01019b5:	66 c7 45 f6 7a 03    	movw   $0x37a,-0xa(%ebp)
c01019bb:	c6 45 f1 0d          	movb   $0xd,-0xf(%ebp)
c01019bf:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c01019c3:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c01019c7:	ee                   	out    %al,(%dx)
c01019c8:	66 c7 45 fa 7a 03    	movw   $0x37a,-0x6(%ebp)
c01019ce:	c6 45 f2 08          	movb   $0x8,-0xe(%ebp)
c01019d2:	0f b6 45 f2          	movzbl -0xe(%ebp),%eax
c01019d6:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c01019da:	ee                   	out    %al,(%dx)
    outb(LPTPORT + 2, 0x08 | 0x04 | 0x01);
    outb(LPTPORT + 2, 0x08);
}
c01019db:	90                   	nop
c01019dc:	c9                   	leave  
c01019dd:	c3                   	ret    

c01019de <lpt_putc>:

/* lpt_putc - copy console output to parallel port */
static void
lpt_putc(int c) {
c01019de:	55                   	push   %ebp
c01019df:	89 e5                	mov    %esp,%ebp
    if (c != '\b') {
c01019e1:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c01019e5:	74 0d                	je     c01019f4 <lpt_putc+0x16>
        lpt_putc_sub(c);
c01019e7:	ff 75 08             	pushl  0x8(%ebp)
c01019ea:	e8 75 ff ff ff       	call   c0101964 <lpt_putc_sub>
c01019ef:	83 c4 04             	add    $0x4,%esp
    else {
        lpt_putc_sub('\b');
        lpt_putc_sub(' ');
        lpt_putc_sub('\b');
    }
}
c01019f2:	eb 1e                	jmp    c0101a12 <lpt_putc+0x34>
lpt_putc(int c) {
    if (c != '\b') {
        lpt_putc_sub(c);
    }
    else {
        lpt_putc_sub('\b');
c01019f4:	6a 08                	push   $0x8
c01019f6:	e8 69 ff ff ff       	call   c0101964 <lpt_putc_sub>
c01019fb:	83 c4 04             	add    $0x4,%esp
        lpt_putc_sub(' ');
c01019fe:	6a 20                	push   $0x20
c0101a00:	e8 5f ff ff ff       	call   c0101964 <lpt_putc_sub>
c0101a05:	83 c4 04             	add    $0x4,%esp
        lpt_putc_sub('\b');
c0101a08:	6a 08                	push   $0x8
c0101a0a:	e8 55 ff ff ff       	call   c0101964 <lpt_putc_sub>
c0101a0f:	83 c4 04             	add    $0x4,%esp
    }
}
c0101a12:	90                   	nop
c0101a13:	c9                   	leave  
c0101a14:	c3                   	ret    

c0101a15 <cga_putc>:

/* cga_putc - print character to console */
static void
cga_putc(int c) {
c0101a15:	55                   	push   %ebp
c0101a16:	89 e5                	mov    %esp,%ebp
c0101a18:	53                   	push   %ebx
c0101a19:	83 ec 14             	sub    $0x14,%esp
    // set black on white
    if (!(c & ~0xFF)) {
c0101a1c:	8b 45 08             	mov    0x8(%ebp),%eax
c0101a1f:	b0 00                	mov    $0x0,%al
c0101a21:	85 c0                	test   %eax,%eax
c0101a23:	75 07                	jne    c0101a2c <cga_putc+0x17>
        c |= 0x0700;
c0101a25:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)
    }

    switch (c & 0xff) {
c0101a2c:	8b 45 08             	mov    0x8(%ebp),%eax
c0101a2f:	0f b6 c0             	movzbl %al,%eax
c0101a32:	83 f8 0a             	cmp    $0xa,%eax
c0101a35:	74 4e                	je     c0101a85 <cga_putc+0x70>
c0101a37:	83 f8 0d             	cmp    $0xd,%eax
c0101a3a:	74 59                	je     c0101a95 <cga_putc+0x80>
c0101a3c:	83 f8 08             	cmp    $0x8,%eax
c0101a3f:	0f 85 8a 00 00 00    	jne    c0101acf <cga_putc+0xba>
    case '\b':
        if (crt_pos > 0) {
c0101a45:	0f b7 05 24 f5 19 c0 	movzwl 0xc019f524,%eax
c0101a4c:	66 85 c0             	test   %ax,%ax
c0101a4f:	0f 84 a0 00 00 00    	je     c0101af5 <cga_putc+0xe0>
            crt_pos --;
c0101a55:	0f b7 05 24 f5 19 c0 	movzwl 0xc019f524,%eax
c0101a5c:	83 e8 01             	sub    $0x1,%eax
c0101a5f:	66 a3 24 f5 19 c0    	mov    %ax,0xc019f524
            crt_buf[crt_pos] = (c & ~0xff) | ' ';
c0101a65:	a1 20 f5 19 c0       	mov    0xc019f520,%eax
c0101a6a:	0f b7 15 24 f5 19 c0 	movzwl 0xc019f524,%edx
c0101a71:	0f b7 d2             	movzwl %dx,%edx
c0101a74:	01 d2                	add    %edx,%edx
c0101a76:	01 d0                	add    %edx,%eax
c0101a78:	8b 55 08             	mov    0x8(%ebp),%edx
c0101a7b:	b2 00                	mov    $0x0,%dl
c0101a7d:	83 ca 20             	or     $0x20,%edx
c0101a80:	66 89 10             	mov    %dx,(%eax)
        }
        break;
c0101a83:	eb 70                	jmp    c0101af5 <cga_putc+0xe0>
    case '\n':
        crt_pos += CRT_COLS;
c0101a85:	0f b7 05 24 f5 19 c0 	movzwl 0xc019f524,%eax
c0101a8c:	83 c0 50             	add    $0x50,%eax
c0101a8f:	66 a3 24 f5 19 c0    	mov    %ax,0xc019f524
    case '\r':
        crt_pos -= (crt_pos % CRT_COLS);
c0101a95:	0f b7 1d 24 f5 19 c0 	movzwl 0xc019f524,%ebx
c0101a9c:	0f b7 0d 24 f5 19 c0 	movzwl 0xc019f524,%ecx
c0101aa3:	0f b7 c1             	movzwl %cx,%eax
c0101aa6:	69 c0 cd cc 00 00    	imul   $0xcccd,%eax,%eax
c0101aac:	c1 e8 10             	shr    $0x10,%eax
c0101aaf:	89 c2                	mov    %eax,%edx
c0101ab1:	66 c1 ea 06          	shr    $0x6,%dx
c0101ab5:	89 d0                	mov    %edx,%eax
c0101ab7:	c1 e0 02             	shl    $0x2,%eax
c0101aba:	01 d0                	add    %edx,%eax
c0101abc:	c1 e0 04             	shl    $0x4,%eax
c0101abf:	29 c1                	sub    %eax,%ecx
c0101ac1:	89 ca                	mov    %ecx,%edx
c0101ac3:	89 d8                	mov    %ebx,%eax
c0101ac5:	29 d0                	sub    %edx,%eax
c0101ac7:	66 a3 24 f5 19 c0    	mov    %ax,0xc019f524
        break;
c0101acd:	eb 27                	jmp    c0101af6 <cga_putc+0xe1>
    default:
        crt_buf[crt_pos ++] = c;     // write the character
c0101acf:	8b 0d 20 f5 19 c0    	mov    0xc019f520,%ecx
c0101ad5:	0f b7 05 24 f5 19 c0 	movzwl 0xc019f524,%eax
c0101adc:	8d 50 01             	lea    0x1(%eax),%edx
c0101adf:	66 89 15 24 f5 19 c0 	mov    %dx,0xc019f524
c0101ae6:	0f b7 c0             	movzwl %ax,%eax
c0101ae9:	01 c0                	add    %eax,%eax
c0101aeb:	01 c8                	add    %ecx,%eax
c0101aed:	8b 55 08             	mov    0x8(%ebp),%edx
c0101af0:	66 89 10             	mov    %dx,(%eax)
        break;
c0101af3:	eb 01                	jmp    c0101af6 <cga_putc+0xe1>
    case '\b':
        if (crt_pos > 0) {
            crt_pos --;
            crt_buf[crt_pos] = (c & ~0xff) | ' ';
        }
        break;
c0101af5:	90                   	nop
        crt_buf[crt_pos ++] = c;     // write the character
        break;
    }

    // What is the purpose of this?
    if (crt_pos >= CRT_SIZE) {
c0101af6:	0f b7 05 24 f5 19 c0 	movzwl 0xc019f524,%eax
c0101afd:	66 3d cf 07          	cmp    $0x7cf,%ax
c0101b01:	76 59                	jbe    c0101b5c <cga_putc+0x147>
        int i;
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
c0101b03:	a1 20 f5 19 c0       	mov    0xc019f520,%eax
c0101b08:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
c0101b0e:	a1 20 f5 19 c0       	mov    0xc019f520,%eax
c0101b13:	83 ec 04             	sub    $0x4,%esp
c0101b16:	68 00 0f 00 00       	push   $0xf00
c0101b1b:	52                   	push   %edx
c0101b1c:	50                   	push   %eax
c0101b1d:	e8 5e 98 00 00       	call   c010b380 <memmove>
c0101b22:	83 c4 10             	add    $0x10,%esp
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c0101b25:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
c0101b2c:	eb 15                	jmp    c0101b43 <cga_putc+0x12e>
            crt_buf[i] = 0x0700 | ' ';
c0101b2e:	a1 20 f5 19 c0       	mov    0xc019f520,%eax
c0101b33:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0101b36:	01 d2                	add    %edx,%edx
c0101b38:	01 d0                	add    %edx,%eax
c0101b3a:	66 c7 00 20 07       	movw   $0x720,(%eax)

    // What is the purpose of this?
    if (crt_pos >= CRT_SIZE) {
        int i;
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c0101b3f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0101b43:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
c0101b4a:	7e e2                	jle    c0101b2e <cga_putc+0x119>
            crt_buf[i] = 0x0700 | ' ';
        }
        crt_pos -= CRT_COLS;
c0101b4c:	0f b7 05 24 f5 19 c0 	movzwl 0xc019f524,%eax
c0101b53:	83 e8 50             	sub    $0x50,%eax
c0101b56:	66 a3 24 f5 19 c0    	mov    %ax,0xc019f524
    }

    // move that little blinky thing
    outb(addr_6845, 14);
c0101b5c:	0f b7 05 26 f5 19 c0 	movzwl 0xc019f526,%eax
c0101b63:	0f b7 c0             	movzwl %ax,%eax
c0101b66:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0101b6a:	c6 45 e8 0e          	movb   $0xe,-0x18(%ebp)
c0101b6e:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
c0101b72:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101b76:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos >> 8);
c0101b77:	0f b7 05 24 f5 19 c0 	movzwl 0xc019f524,%eax
c0101b7e:	66 c1 e8 08          	shr    $0x8,%ax
c0101b82:	0f b6 c0             	movzbl %al,%eax
c0101b85:	0f b7 15 26 f5 19 c0 	movzwl 0xc019f526,%edx
c0101b8c:	83 c2 01             	add    $0x1,%edx
c0101b8f:	0f b7 d2             	movzwl %dx,%edx
c0101b92:	66 89 55 f0          	mov    %dx,-0x10(%ebp)
c0101b96:	88 45 e9             	mov    %al,-0x17(%ebp)
c0101b99:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101b9d:	0f b7 55 f0          	movzwl -0x10(%ebp),%edx
c0101ba1:	ee                   	out    %al,(%dx)
    outb(addr_6845, 15);
c0101ba2:	0f b7 05 26 f5 19 c0 	movzwl 0xc019f526,%eax
c0101ba9:	0f b7 c0             	movzwl %ax,%eax
c0101bac:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
c0101bb0:	c6 45 ea 0f          	movb   $0xf,-0x16(%ebp)
c0101bb4:	0f b6 45 ea          	movzbl -0x16(%ebp),%eax
c0101bb8:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101bbc:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos);
c0101bbd:	0f b7 05 24 f5 19 c0 	movzwl 0xc019f524,%eax
c0101bc4:	0f b6 c0             	movzbl %al,%eax
c0101bc7:	0f b7 15 26 f5 19 c0 	movzwl 0xc019f526,%edx
c0101bce:	83 c2 01             	add    $0x1,%edx
c0101bd1:	0f b7 d2             	movzwl %dx,%edx
c0101bd4:	66 89 55 ec          	mov    %dx,-0x14(%ebp)
c0101bd8:	88 45 eb             	mov    %al,-0x15(%ebp)
c0101bdb:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
c0101bdf:	0f b7 55 ec          	movzwl -0x14(%ebp),%edx
c0101be3:	ee                   	out    %al,(%dx)
}
c0101be4:	90                   	nop
c0101be5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0101be8:	c9                   	leave  
c0101be9:	c3                   	ret    

c0101bea <serial_putc_sub>:

static void
serial_putc_sub(int c) {
c0101bea:	55                   	push   %ebp
c0101beb:	89 e5                	mov    %esp,%ebp
c0101bed:	83 ec 10             	sub    $0x10,%esp
    int i;
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c0101bf0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0101bf7:	eb 09                	jmp    c0101c02 <serial_putc_sub+0x18>
        delay();
c0101bf9:	e8 51 fb ff ff       	call   c010174f <delay>
}

static void
serial_putc_sub(int c) {
    int i;
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c0101bfe:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0101c02:	66 c7 45 f8 fd 03    	movw   $0x3fd,-0x8(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101c08:	0f b7 45 f8          	movzwl -0x8(%ebp),%eax
c0101c0c:	89 c2                	mov    %eax,%edx
c0101c0e:	ec                   	in     (%dx),%al
c0101c0f:	88 45 f7             	mov    %al,-0x9(%ebp)
    return data;
c0101c12:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0101c16:	0f b6 c0             	movzbl %al,%eax
c0101c19:	83 e0 20             	and    $0x20,%eax
c0101c1c:	85 c0                	test   %eax,%eax
c0101c1e:	75 09                	jne    c0101c29 <serial_putc_sub+0x3f>
c0101c20:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
c0101c27:	7e d0                	jle    c0101bf9 <serial_putc_sub+0xf>
        delay();
    }
    outb(COM1 + COM_TX, c);
c0101c29:	8b 45 08             	mov    0x8(%ebp),%eax
c0101c2c:	0f b6 c0             	movzbl %al,%eax
c0101c2f:	66 c7 45 fa f8 03    	movw   $0x3f8,-0x6(%ebp)
c0101c35:	88 45 f6             	mov    %al,-0xa(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101c38:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
c0101c3c:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c0101c40:	ee                   	out    %al,(%dx)
}
c0101c41:	90                   	nop
c0101c42:	c9                   	leave  
c0101c43:	c3                   	ret    

c0101c44 <serial_putc>:

/* serial_putc - print character to serial port */
static void
serial_putc(int c) {
c0101c44:	55                   	push   %ebp
c0101c45:	89 e5                	mov    %esp,%ebp
    if (c != '\b') {
c0101c47:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c0101c4b:	74 0d                	je     c0101c5a <serial_putc+0x16>
        serial_putc_sub(c);
c0101c4d:	ff 75 08             	pushl  0x8(%ebp)
c0101c50:	e8 95 ff ff ff       	call   c0101bea <serial_putc_sub>
c0101c55:	83 c4 04             	add    $0x4,%esp
    else {
        serial_putc_sub('\b');
        serial_putc_sub(' ');
        serial_putc_sub('\b');
    }
}
c0101c58:	eb 1e                	jmp    c0101c78 <serial_putc+0x34>
serial_putc(int c) {
    if (c != '\b') {
        serial_putc_sub(c);
    }
    else {
        serial_putc_sub('\b');
c0101c5a:	6a 08                	push   $0x8
c0101c5c:	e8 89 ff ff ff       	call   c0101bea <serial_putc_sub>
c0101c61:	83 c4 04             	add    $0x4,%esp
        serial_putc_sub(' ');
c0101c64:	6a 20                	push   $0x20
c0101c66:	e8 7f ff ff ff       	call   c0101bea <serial_putc_sub>
c0101c6b:	83 c4 04             	add    $0x4,%esp
        serial_putc_sub('\b');
c0101c6e:	6a 08                	push   $0x8
c0101c70:	e8 75 ff ff ff       	call   c0101bea <serial_putc_sub>
c0101c75:	83 c4 04             	add    $0x4,%esp
    }
}
c0101c78:	90                   	nop
c0101c79:	c9                   	leave  
c0101c7a:	c3                   	ret    

c0101c7b <cons_intr>:
/* *
 * cons_intr - called by device interrupt routines to feed input
 * characters into the circular console input buffer.
 * */
static void
cons_intr(int (*proc)(void)) {
c0101c7b:	55                   	push   %ebp
c0101c7c:	89 e5                	mov    %esp,%ebp
c0101c7e:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = (*proc)()) != -1) {
c0101c81:	eb 33                	jmp    c0101cb6 <cons_intr+0x3b>
        if (c != 0) {
c0101c83:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0101c87:	74 2d                	je     c0101cb6 <cons_intr+0x3b>
            cons.buf[cons.wpos ++] = c;
c0101c89:	a1 44 f7 19 c0       	mov    0xc019f744,%eax
c0101c8e:	8d 50 01             	lea    0x1(%eax),%edx
c0101c91:	89 15 44 f7 19 c0    	mov    %edx,0xc019f744
c0101c97:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0101c9a:	88 90 40 f5 19 c0    	mov    %dl,-0x3fe60ac0(%eax)
            if (cons.wpos == CONSBUFSIZE) {
c0101ca0:	a1 44 f7 19 c0       	mov    0xc019f744,%eax
c0101ca5:	3d 00 02 00 00       	cmp    $0x200,%eax
c0101caa:	75 0a                	jne    c0101cb6 <cons_intr+0x3b>
                cons.wpos = 0;
c0101cac:	c7 05 44 f7 19 c0 00 	movl   $0x0,0xc019f744
c0101cb3:	00 00 00 
 * characters into the circular console input buffer.
 * */
static void
cons_intr(int (*proc)(void)) {
    int c;
    while ((c = (*proc)()) != -1) {
c0101cb6:	8b 45 08             	mov    0x8(%ebp),%eax
c0101cb9:	ff d0                	call   *%eax
c0101cbb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0101cbe:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
c0101cc2:	75 bf                	jne    c0101c83 <cons_intr+0x8>
            if (cons.wpos == CONSBUFSIZE) {
                cons.wpos = 0;
            }
        }
    }
}
c0101cc4:	90                   	nop
c0101cc5:	c9                   	leave  
c0101cc6:	c3                   	ret    

c0101cc7 <serial_proc_data>:

/* serial_proc_data - get data from serial port */
static int
serial_proc_data(void) {
c0101cc7:	55                   	push   %ebp
c0101cc8:	89 e5                	mov    %esp,%ebp
c0101cca:	83 ec 10             	sub    $0x10,%esp
c0101ccd:	66 c7 45 f8 fd 03    	movw   $0x3fd,-0x8(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101cd3:	0f b7 45 f8          	movzwl -0x8(%ebp),%eax
c0101cd7:	89 c2                	mov    %eax,%edx
c0101cd9:	ec                   	in     (%dx),%al
c0101cda:	88 45 f7             	mov    %al,-0x9(%ebp)
    return data;
c0101cdd:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
    if (!(inb(COM1 + COM_LSR) & COM_LSR_DATA)) {
c0101ce1:	0f b6 c0             	movzbl %al,%eax
c0101ce4:	83 e0 01             	and    $0x1,%eax
c0101ce7:	85 c0                	test   %eax,%eax
c0101ce9:	75 07                	jne    c0101cf2 <serial_proc_data+0x2b>
        return -1;
c0101ceb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101cf0:	eb 2a                	jmp    c0101d1c <serial_proc_data+0x55>
c0101cf2:	66 c7 45 fa f8 03    	movw   $0x3f8,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101cf8:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0101cfc:	89 c2                	mov    %eax,%edx
c0101cfe:	ec                   	in     (%dx),%al
c0101cff:	88 45 f6             	mov    %al,-0xa(%ebp)
    return data;
c0101d02:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
    }
    int c = inb(COM1 + COM_RX);
c0101d06:	0f b6 c0             	movzbl %al,%eax
c0101d09:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (c == 127) {
c0101d0c:	83 7d fc 7f          	cmpl   $0x7f,-0x4(%ebp)
c0101d10:	75 07                	jne    c0101d19 <serial_proc_data+0x52>
        c = '\b';
c0101d12:	c7 45 fc 08 00 00 00 	movl   $0x8,-0x4(%ebp)
    }
    return c;
c0101d19:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0101d1c:	c9                   	leave  
c0101d1d:	c3                   	ret    

c0101d1e <serial_intr>:

/* serial_intr - try to feed input characters from serial port */
void
serial_intr(void) {
c0101d1e:	55                   	push   %ebp
c0101d1f:	89 e5                	mov    %esp,%ebp
c0101d21:	83 ec 08             	sub    $0x8,%esp
    if (serial_exists) {
c0101d24:	a1 28 f5 19 c0       	mov    0xc019f528,%eax
c0101d29:	85 c0                	test   %eax,%eax
c0101d2b:	74 10                	je     c0101d3d <serial_intr+0x1f>
        cons_intr(serial_proc_data);
c0101d2d:	83 ec 0c             	sub    $0xc,%esp
c0101d30:	68 c7 1c 10 c0       	push   $0xc0101cc7
c0101d35:	e8 41 ff ff ff       	call   c0101c7b <cons_intr>
c0101d3a:	83 c4 10             	add    $0x10,%esp
    }
}
c0101d3d:	90                   	nop
c0101d3e:	c9                   	leave  
c0101d3f:	c3                   	ret    

c0101d40 <kbd_proc_data>:
 *
 * The kbd_proc_data() function gets data from the keyboard.
 * If we finish a character, return it, else 0. And return -1 if no data.
 * */
static int
kbd_proc_data(void) {
c0101d40:	55                   	push   %ebp
c0101d41:	89 e5                	mov    %esp,%ebp
c0101d43:	83 ec 18             	sub    $0x18,%esp
c0101d46:	66 c7 45 ec 64 00    	movw   $0x64,-0x14(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101d4c:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0101d50:	89 c2                	mov    %eax,%edx
c0101d52:	ec                   	in     (%dx),%al
c0101d53:	88 45 eb             	mov    %al,-0x15(%ebp)
    return data;
c0101d56:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
    int c;
    uint8_t data;
    static uint32_t shift;

    if ((inb(KBSTATP) & KBS_DIB) == 0) {
c0101d5a:	0f b6 c0             	movzbl %al,%eax
c0101d5d:	83 e0 01             	and    $0x1,%eax
c0101d60:	85 c0                	test   %eax,%eax
c0101d62:	75 0a                	jne    c0101d6e <kbd_proc_data+0x2e>
        return -1;
c0101d64:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101d69:	e9 5d 01 00 00       	jmp    c0101ecb <kbd_proc_data+0x18b>
c0101d6e:	66 c7 45 f0 60 00    	movw   $0x60,-0x10(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101d74:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c0101d78:	89 c2                	mov    %eax,%edx
c0101d7a:	ec                   	in     (%dx),%al
c0101d7b:	88 45 ea             	mov    %al,-0x16(%ebp)
    return data;
c0101d7e:	0f b6 45 ea          	movzbl -0x16(%ebp),%eax
    }

    data = inb(KBDATAP);
c0101d82:	88 45 f3             	mov    %al,-0xd(%ebp)

    if (data == 0xE0) {
c0101d85:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
c0101d89:	75 17                	jne    c0101da2 <kbd_proc_data+0x62>
        // E0 escape character
        shift |= E0ESC;
c0101d8b:	a1 48 f7 19 c0       	mov    0xc019f748,%eax
c0101d90:	83 c8 40             	or     $0x40,%eax
c0101d93:	a3 48 f7 19 c0       	mov    %eax,0xc019f748
        return 0;
c0101d98:	b8 00 00 00 00       	mov    $0x0,%eax
c0101d9d:	e9 29 01 00 00       	jmp    c0101ecb <kbd_proc_data+0x18b>
    } else if (data & 0x80) {
c0101da2:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101da6:	84 c0                	test   %al,%al
c0101da8:	79 47                	jns    c0101df1 <kbd_proc_data+0xb1>
        // Key released
        data = (shift & E0ESC ? data : data & 0x7F);
c0101daa:	a1 48 f7 19 c0       	mov    0xc019f748,%eax
c0101daf:	83 e0 40             	and    $0x40,%eax
c0101db2:	85 c0                	test   %eax,%eax
c0101db4:	75 09                	jne    c0101dbf <kbd_proc_data+0x7f>
c0101db6:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101dba:	83 e0 7f             	and    $0x7f,%eax
c0101dbd:	eb 04                	jmp    c0101dc3 <kbd_proc_data+0x83>
c0101dbf:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101dc3:	88 45 f3             	mov    %al,-0xd(%ebp)
        shift &= ~(shiftcode[data] | E0ESC);
c0101dc6:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101dca:	0f b6 80 40 b0 12 c0 	movzbl -0x3fed4fc0(%eax),%eax
c0101dd1:	83 c8 40             	or     $0x40,%eax
c0101dd4:	0f b6 c0             	movzbl %al,%eax
c0101dd7:	f7 d0                	not    %eax
c0101dd9:	89 c2                	mov    %eax,%edx
c0101ddb:	a1 48 f7 19 c0       	mov    0xc019f748,%eax
c0101de0:	21 d0                	and    %edx,%eax
c0101de2:	a3 48 f7 19 c0       	mov    %eax,0xc019f748
        return 0;
c0101de7:	b8 00 00 00 00       	mov    $0x0,%eax
c0101dec:	e9 da 00 00 00       	jmp    c0101ecb <kbd_proc_data+0x18b>
    } else if (shift & E0ESC) {
c0101df1:	a1 48 f7 19 c0       	mov    0xc019f748,%eax
c0101df6:	83 e0 40             	and    $0x40,%eax
c0101df9:	85 c0                	test   %eax,%eax
c0101dfb:	74 11                	je     c0101e0e <kbd_proc_data+0xce>
        // Last character was an E0 escape; or with 0x80
        data |= 0x80;
c0101dfd:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
        shift &= ~E0ESC;
c0101e01:	a1 48 f7 19 c0       	mov    0xc019f748,%eax
c0101e06:	83 e0 bf             	and    $0xffffffbf,%eax
c0101e09:	a3 48 f7 19 c0       	mov    %eax,0xc019f748
    }

    shift |= shiftcode[data];
c0101e0e:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101e12:	0f b6 80 40 b0 12 c0 	movzbl -0x3fed4fc0(%eax),%eax
c0101e19:	0f b6 d0             	movzbl %al,%edx
c0101e1c:	a1 48 f7 19 c0       	mov    0xc019f748,%eax
c0101e21:	09 d0                	or     %edx,%eax
c0101e23:	a3 48 f7 19 c0       	mov    %eax,0xc019f748
    shift ^= togglecode[data];
c0101e28:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101e2c:	0f b6 80 40 b1 12 c0 	movzbl -0x3fed4ec0(%eax),%eax
c0101e33:	0f b6 d0             	movzbl %al,%edx
c0101e36:	a1 48 f7 19 c0       	mov    0xc019f748,%eax
c0101e3b:	31 d0                	xor    %edx,%eax
c0101e3d:	a3 48 f7 19 c0       	mov    %eax,0xc019f748

    c = charcode[shift & (CTL | SHIFT)][data];
c0101e42:	a1 48 f7 19 c0       	mov    0xc019f748,%eax
c0101e47:	83 e0 03             	and    $0x3,%eax
c0101e4a:	8b 14 85 40 b5 12 c0 	mov    -0x3fed4ac0(,%eax,4),%edx
c0101e51:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101e55:	01 d0                	add    %edx,%eax
c0101e57:	0f b6 00             	movzbl (%eax),%eax
c0101e5a:	0f b6 c0             	movzbl %al,%eax
c0101e5d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (shift & CAPSLOCK) {
c0101e60:	a1 48 f7 19 c0       	mov    0xc019f748,%eax
c0101e65:	83 e0 08             	and    $0x8,%eax
c0101e68:	85 c0                	test   %eax,%eax
c0101e6a:	74 22                	je     c0101e8e <kbd_proc_data+0x14e>
        if ('a' <= c && c <= 'z')
c0101e6c:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
c0101e70:	7e 0c                	jle    c0101e7e <kbd_proc_data+0x13e>
c0101e72:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
c0101e76:	7f 06                	jg     c0101e7e <kbd_proc_data+0x13e>
            c += 'A' - 'a';
c0101e78:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
c0101e7c:	eb 10                	jmp    c0101e8e <kbd_proc_data+0x14e>
        else if ('A' <= c && c <= 'Z')
c0101e7e:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
c0101e82:	7e 0a                	jle    c0101e8e <kbd_proc_data+0x14e>
c0101e84:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
c0101e88:	7f 04                	jg     c0101e8e <kbd_proc_data+0x14e>
            c += 'a' - 'A';
c0101e8a:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
    }

    // Process special keys
    // Ctrl-Alt-Del: reboot
    if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
c0101e8e:	a1 48 f7 19 c0       	mov    0xc019f748,%eax
c0101e93:	f7 d0                	not    %eax
c0101e95:	83 e0 06             	and    $0x6,%eax
c0101e98:	85 c0                	test   %eax,%eax
c0101e9a:	75 2c                	jne    c0101ec8 <kbd_proc_data+0x188>
c0101e9c:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
c0101ea3:	75 23                	jne    c0101ec8 <kbd_proc_data+0x188>
        cprintf("Rebooting!\n");
c0101ea5:	83 ec 0c             	sub    $0xc,%esp
c0101ea8:	68 15 c0 10 c0       	push   $0xc010c015
c0101ead:	e8 e0 e3 ff ff       	call   c0100292 <cprintf>
c0101eb2:	83 c4 10             	add    $0x10,%esp
c0101eb5:	66 c7 45 ee 92 00    	movw   $0x92,-0x12(%ebp)
c0101ebb:	c6 45 e9 03          	movb   $0x3,-0x17(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101ebf:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101ec3:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101ec7:	ee                   	out    %al,(%dx)
        outb(0x92, 0x3); // courtesy of Chris Frost
    }
    return c;
c0101ec8:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0101ecb:	c9                   	leave  
c0101ecc:	c3                   	ret    

c0101ecd <kbd_intr>:

/* kbd_intr - try to feed input characters from keyboard */
static void
kbd_intr(void) {
c0101ecd:	55                   	push   %ebp
c0101ece:	89 e5                	mov    %esp,%ebp
c0101ed0:	83 ec 08             	sub    $0x8,%esp
    cons_intr(kbd_proc_data);
c0101ed3:	83 ec 0c             	sub    $0xc,%esp
c0101ed6:	68 40 1d 10 c0       	push   $0xc0101d40
c0101edb:	e8 9b fd ff ff       	call   c0101c7b <cons_intr>
c0101ee0:	83 c4 10             	add    $0x10,%esp
}
c0101ee3:	90                   	nop
c0101ee4:	c9                   	leave  
c0101ee5:	c3                   	ret    

c0101ee6 <kbd_init>:

static void
kbd_init(void) {
c0101ee6:	55                   	push   %ebp
c0101ee7:	89 e5                	mov    %esp,%ebp
c0101ee9:	83 ec 08             	sub    $0x8,%esp
    // drain the kbd buffer
    kbd_intr();
c0101eec:	e8 dc ff ff ff       	call   c0101ecd <kbd_intr>
    pic_enable(IRQ_KBD);
c0101ef1:	83 ec 0c             	sub    $0xc,%esp
c0101ef4:	6a 01                	push   $0x1
c0101ef6:	e8 4b 01 00 00       	call   c0102046 <pic_enable>
c0101efb:	83 c4 10             	add    $0x10,%esp
}
c0101efe:	90                   	nop
c0101eff:	c9                   	leave  
c0101f00:	c3                   	ret    

c0101f01 <cons_init>:

/* cons_init - initializes the console devices */
void
cons_init(void) {
c0101f01:	55                   	push   %ebp
c0101f02:	89 e5                	mov    %esp,%ebp
c0101f04:	83 ec 08             	sub    $0x8,%esp
    cga_init();
c0101f07:	e8 8c f8 ff ff       	call   c0101798 <cga_init>
    serial_init();
c0101f0c:	e8 6e f9 ff ff       	call   c010187f <serial_init>
    kbd_init();
c0101f11:	e8 d0 ff ff ff       	call   c0101ee6 <kbd_init>
    if (!serial_exists) {
c0101f16:	a1 28 f5 19 c0       	mov    0xc019f528,%eax
c0101f1b:	85 c0                	test   %eax,%eax
c0101f1d:	75 10                	jne    c0101f2f <cons_init+0x2e>
        cprintf("serial port does not exist!!\n");
c0101f1f:	83 ec 0c             	sub    $0xc,%esp
c0101f22:	68 21 c0 10 c0       	push   $0xc010c021
c0101f27:	e8 66 e3 ff ff       	call   c0100292 <cprintf>
c0101f2c:	83 c4 10             	add    $0x10,%esp
    }
}
c0101f2f:	90                   	nop
c0101f30:	c9                   	leave  
c0101f31:	c3                   	ret    

c0101f32 <cons_putc>:

/* cons_putc - print a single character @c to console devices */
void
cons_putc(int c) {
c0101f32:	55                   	push   %ebp
c0101f33:	89 e5                	mov    %esp,%ebp
c0101f35:	83 ec 18             	sub    $0x18,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c0101f38:	e8 d4 f7 ff ff       	call   c0101711 <__intr_save>
c0101f3d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        lpt_putc(c);
c0101f40:	83 ec 0c             	sub    $0xc,%esp
c0101f43:	ff 75 08             	pushl  0x8(%ebp)
c0101f46:	e8 93 fa ff ff       	call   c01019de <lpt_putc>
c0101f4b:	83 c4 10             	add    $0x10,%esp
        cga_putc(c);
c0101f4e:	83 ec 0c             	sub    $0xc,%esp
c0101f51:	ff 75 08             	pushl  0x8(%ebp)
c0101f54:	e8 bc fa ff ff       	call   c0101a15 <cga_putc>
c0101f59:	83 c4 10             	add    $0x10,%esp
        serial_putc(c);
c0101f5c:	83 ec 0c             	sub    $0xc,%esp
c0101f5f:	ff 75 08             	pushl  0x8(%ebp)
c0101f62:	e8 dd fc ff ff       	call   c0101c44 <serial_putc>
c0101f67:	83 c4 10             	add    $0x10,%esp
    }
    local_intr_restore(intr_flag);
c0101f6a:	83 ec 0c             	sub    $0xc,%esp
c0101f6d:	ff 75 f4             	pushl  -0xc(%ebp)
c0101f70:	e8 c6 f7 ff ff       	call   c010173b <__intr_restore>
c0101f75:	83 c4 10             	add    $0x10,%esp
}
c0101f78:	90                   	nop
c0101f79:	c9                   	leave  
c0101f7a:	c3                   	ret    

c0101f7b <cons_getc>:
/* *
 * cons_getc - return the next input character from console,
 * or 0 if none waiting.
 * */
int
cons_getc(void) {
c0101f7b:	55                   	push   %ebp
c0101f7c:	89 e5                	mov    %esp,%ebp
c0101f7e:	83 ec 18             	sub    $0x18,%esp
    int c = 0;
c0101f81:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    local_intr_save(intr_flag);
c0101f88:	e8 84 f7 ff ff       	call   c0101711 <__intr_save>
c0101f8d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        // poll for any pending input characters,
        // so that this function works even when interrupts are disabled
        // (e.g., when called from the kernel monitor).
        serial_intr();
c0101f90:	e8 89 fd ff ff       	call   c0101d1e <serial_intr>
        kbd_intr();
c0101f95:	e8 33 ff ff ff       	call   c0101ecd <kbd_intr>

        // grab the next character from the input buffer.
        if (cons.rpos != cons.wpos) {
c0101f9a:	8b 15 40 f7 19 c0    	mov    0xc019f740,%edx
c0101fa0:	a1 44 f7 19 c0       	mov    0xc019f744,%eax
c0101fa5:	39 c2                	cmp    %eax,%edx
c0101fa7:	74 31                	je     c0101fda <cons_getc+0x5f>
            c = cons.buf[cons.rpos ++];
c0101fa9:	a1 40 f7 19 c0       	mov    0xc019f740,%eax
c0101fae:	8d 50 01             	lea    0x1(%eax),%edx
c0101fb1:	89 15 40 f7 19 c0    	mov    %edx,0xc019f740
c0101fb7:	0f b6 80 40 f5 19 c0 	movzbl -0x3fe60ac0(%eax),%eax
c0101fbe:	0f b6 c0             	movzbl %al,%eax
c0101fc1:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (cons.rpos == CONSBUFSIZE) {
c0101fc4:	a1 40 f7 19 c0       	mov    0xc019f740,%eax
c0101fc9:	3d 00 02 00 00       	cmp    $0x200,%eax
c0101fce:	75 0a                	jne    c0101fda <cons_getc+0x5f>
                cons.rpos = 0;
c0101fd0:	c7 05 40 f7 19 c0 00 	movl   $0x0,0xc019f740
c0101fd7:	00 00 00 
            }
        }
    }
    local_intr_restore(intr_flag);
c0101fda:	83 ec 0c             	sub    $0xc,%esp
c0101fdd:	ff 75 f0             	pushl  -0x10(%ebp)
c0101fe0:	e8 56 f7 ff ff       	call   c010173b <__intr_restore>
c0101fe5:	83 c4 10             	add    $0x10,%esp
    return c;
c0101fe8:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0101feb:	c9                   	leave  
c0101fec:	c3                   	ret    

c0101fed <pic_setmask>:
// Initial IRQ mask has interrupt 2 enabled (for slave 8259A).
static uint16_t irq_mask = 0xFFFF & ~(1 << IRQ_SLAVE);
static bool did_init = 0;

static void
pic_setmask(uint16_t mask) {
c0101fed:	55                   	push   %ebp
c0101fee:	89 e5                	mov    %esp,%ebp
c0101ff0:	83 ec 14             	sub    $0x14,%esp
c0101ff3:	8b 45 08             	mov    0x8(%ebp),%eax
c0101ff6:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    irq_mask = mask;
c0101ffa:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0101ffe:	66 a3 50 b5 12 c0    	mov    %ax,0xc012b550
    if (did_init) {
c0102004:	a1 4c f7 19 c0       	mov    0xc019f74c,%eax
c0102009:	85 c0                	test   %eax,%eax
c010200b:	74 36                	je     c0102043 <pic_setmask+0x56>
        outb(IO_PIC1 + 1, mask);
c010200d:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0102011:	0f b6 c0             	movzbl %al,%eax
c0102014:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
c010201a:	88 45 fa             	mov    %al,-0x6(%ebp)
c010201d:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
c0102021:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c0102025:	ee                   	out    %al,(%dx)
        outb(IO_PIC2 + 1, mask >> 8);
c0102026:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c010202a:	66 c1 e8 08          	shr    $0x8,%ax
c010202e:	0f b6 c0             	movzbl %al,%eax
c0102031:	66 c7 45 fc a1 00    	movw   $0xa1,-0x4(%ebp)
c0102037:	88 45 fb             	mov    %al,-0x5(%ebp)
c010203a:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
c010203e:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c0102042:	ee                   	out    %al,(%dx)
    }
}
c0102043:	90                   	nop
c0102044:	c9                   	leave  
c0102045:	c3                   	ret    

c0102046 <pic_enable>:

void
pic_enable(unsigned int irq) {
c0102046:	55                   	push   %ebp
c0102047:	89 e5                	mov    %esp,%ebp
    pic_setmask(irq_mask & ~(1 << irq));
c0102049:	8b 45 08             	mov    0x8(%ebp),%eax
c010204c:	ba 01 00 00 00       	mov    $0x1,%edx
c0102051:	89 c1                	mov    %eax,%ecx
c0102053:	d3 e2                	shl    %cl,%edx
c0102055:	89 d0                	mov    %edx,%eax
c0102057:	f7 d0                	not    %eax
c0102059:	89 c2                	mov    %eax,%edx
c010205b:	0f b7 05 50 b5 12 c0 	movzwl 0xc012b550,%eax
c0102062:	21 d0                	and    %edx,%eax
c0102064:	0f b7 c0             	movzwl %ax,%eax
c0102067:	50                   	push   %eax
c0102068:	e8 80 ff ff ff       	call   c0101fed <pic_setmask>
c010206d:	83 c4 04             	add    $0x4,%esp
}
c0102070:	90                   	nop
c0102071:	c9                   	leave  
c0102072:	c3                   	ret    

c0102073 <pic_init>:

/* pic_init - initialize the 8259A interrupt controllers */
void
pic_init(void) {
c0102073:	55                   	push   %ebp
c0102074:	89 e5                	mov    %esp,%ebp
c0102076:	83 ec 30             	sub    $0x30,%esp
    did_init = 1;
c0102079:	c7 05 4c f7 19 c0 01 	movl   $0x1,0xc019f74c
c0102080:	00 00 00 
c0102083:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
c0102089:	c6 45 d6 ff          	movb   $0xff,-0x2a(%ebp)
c010208d:	0f b6 45 d6          	movzbl -0x2a(%ebp),%eax
c0102091:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c0102095:	ee                   	out    %al,(%dx)
c0102096:	66 c7 45 fc a1 00    	movw   $0xa1,-0x4(%ebp)
c010209c:	c6 45 d7 ff          	movb   $0xff,-0x29(%ebp)
c01020a0:	0f b6 45 d7          	movzbl -0x29(%ebp),%eax
c01020a4:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c01020a8:	ee                   	out    %al,(%dx)
c01020a9:	66 c7 45 fa 20 00    	movw   $0x20,-0x6(%ebp)
c01020af:	c6 45 d8 11          	movb   $0x11,-0x28(%ebp)
c01020b3:	0f b6 45 d8          	movzbl -0x28(%ebp),%eax
c01020b7:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c01020bb:	ee                   	out    %al,(%dx)
c01020bc:	66 c7 45 f8 21 00    	movw   $0x21,-0x8(%ebp)
c01020c2:	c6 45 d9 20          	movb   $0x20,-0x27(%ebp)
c01020c6:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c01020ca:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
c01020ce:	ee                   	out    %al,(%dx)
c01020cf:	66 c7 45 f6 21 00    	movw   $0x21,-0xa(%ebp)
c01020d5:	c6 45 da 04          	movb   $0x4,-0x26(%ebp)
c01020d9:	0f b6 45 da          	movzbl -0x26(%ebp),%eax
c01020dd:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c01020e1:	ee                   	out    %al,(%dx)
c01020e2:	66 c7 45 f4 21 00    	movw   $0x21,-0xc(%ebp)
c01020e8:	c6 45 db 03          	movb   $0x3,-0x25(%ebp)
c01020ec:	0f b6 45 db          	movzbl -0x25(%ebp),%eax
c01020f0:	0f b7 55 f4          	movzwl -0xc(%ebp),%edx
c01020f4:	ee                   	out    %al,(%dx)
c01020f5:	66 c7 45 f2 a0 00    	movw   $0xa0,-0xe(%ebp)
c01020fb:	c6 45 dc 11          	movb   $0x11,-0x24(%ebp)
c01020ff:	0f b6 45 dc          	movzbl -0x24(%ebp),%eax
c0102103:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0102107:	ee                   	out    %al,(%dx)
c0102108:	66 c7 45 f0 a1 00    	movw   $0xa1,-0x10(%ebp)
c010210e:	c6 45 dd 28          	movb   $0x28,-0x23(%ebp)
c0102112:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0102116:	0f b7 55 f0          	movzwl -0x10(%ebp),%edx
c010211a:	ee                   	out    %al,(%dx)
c010211b:	66 c7 45 ee a1 00    	movw   $0xa1,-0x12(%ebp)
c0102121:	c6 45 de 02          	movb   $0x2,-0x22(%ebp)
c0102125:	0f b6 45 de          	movzbl -0x22(%ebp),%eax
c0102129:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c010212d:	ee                   	out    %al,(%dx)
c010212e:	66 c7 45 ec a1 00    	movw   $0xa1,-0x14(%ebp)
c0102134:	c6 45 df 03          	movb   $0x3,-0x21(%ebp)
c0102138:	0f b6 45 df          	movzbl -0x21(%ebp),%eax
c010213c:	0f b7 55 ec          	movzwl -0x14(%ebp),%edx
c0102140:	ee                   	out    %al,(%dx)
c0102141:	66 c7 45 ea 20 00    	movw   $0x20,-0x16(%ebp)
c0102147:	c6 45 e0 68          	movb   $0x68,-0x20(%ebp)
c010214b:	0f b6 45 e0          	movzbl -0x20(%ebp),%eax
c010214f:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0102153:	ee                   	out    %al,(%dx)
c0102154:	66 c7 45 e8 20 00    	movw   $0x20,-0x18(%ebp)
c010215a:	c6 45 e1 0a          	movb   $0xa,-0x1f(%ebp)
c010215e:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0102162:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c0102166:	ee                   	out    %al,(%dx)
c0102167:	66 c7 45 e6 a0 00    	movw   $0xa0,-0x1a(%ebp)
c010216d:	c6 45 e2 68          	movb   $0x68,-0x1e(%ebp)
c0102171:	0f b6 45 e2          	movzbl -0x1e(%ebp),%eax
c0102175:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0102179:	ee                   	out    %al,(%dx)
c010217a:	66 c7 45 e4 a0 00    	movw   $0xa0,-0x1c(%ebp)
c0102180:	c6 45 e3 0a          	movb   $0xa,-0x1d(%ebp)
c0102184:	0f b6 45 e3          	movzbl -0x1d(%ebp),%eax
c0102188:	0f b7 55 e4          	movzwl -0x1c(%ebp),%edx
c010218c:	ee                   	out    %al,(%dx)
    outb(IO_PIC1, 0x0a);    // read IRR by default

    outb(IO_PIC2, 0x68);    // OCW3
    outb(IO_PIC2, 0x0a);    // OCW3

    if (irq_mask != 0xFFFF) {
c010218d:	0f b7 05 50 b5 12 c0 	movzwl 0xc012b550,%eax
c0102194:	66 83 f8 ff          	cmp    $0xffff,%ax
c0102198:	74 13                	je     c01021ad <pic_init+0x13a>
        pic_setmask(irq_mask);
c010219a:	0f b7 05 50 b5 12 c0 	movzwl 0xc012b550,%eax
c01021a1:	0f b7 c0             	movzwl %ax,%eax
c01021a4:	50                   	push   %eax
c01021a5:	e8 43 fe ff ff       	call   c0101fed <pic_setmask>
c01021aa:	83 c4 04             	add    $0x4,%esp
    }
}
c01021ad:	90                   	nop
c01021ae:	c9                   	leave  
c01021af:	c3                   	ret    

c01021b0 <intr_enable>:
#include <x86.h>
#include <intr.h>

/* intr_enable - enable irq interrupt */
void
intr_enable(void) {
c01021b0:	55                   	push   %ebp
c01021b1:	89 e5                	mov    %esp,%ebp
    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
}

static inline void
sti(void) {
    asm volatile ("sti");
c01021b3:	fb                   	sti    
    sti();
}
c01021b4:	90                   	nop
c01021b5:	5d                   	pop    %ebp
c01021b6:	c3                   	ret    

c01021b7 <intr_disable>:

/* intr_disable - disable irq interrupt */
void
intr_disable(void) {
c01021b7:	55                   	push   %ebp
c01021b8:	89 e5                	mov    %esp,%ebp
}

static inline void
cli(void) {
    asm volatile ("cli" ::: "memory");
c01021ba:	fa                   	cli    
    cli();
}
c01021bb:	90                   	nop
c01021bc:	5d                   	pop    %ebp
c01021bd:	c3                   	ret    

c01021be <print_ticks>:
#include <sched.h>
#include <sync.h>

#define TICK_NUM 100

static void print_ticks() {
c01021be:	55                   	push   %ebp
c01021bf:	89 e5                	mov    %esp,%ebp
c01021c1:	83 ec 08             	sub    $0x8,%esp
    cprintf("%d ticks\n",TICK_NUM);
c01021c4:	83 ec 08             	sub    $0x8,%esp
c01021c7:	6a 64                	push   $0x64
c01021c9:	68 40 c0 10 c0       	push   $0xc010c040
c01021ce:	e8 bf e0 ff ff       	call   c0100292 <cprintf>
c01021d3:	83 c4 10             	add    $0x10,%esp
#ifdef DEBUG_GRADE
    cprintf("End of Test.\n");
c01021d6:	83 ec 0c             	sub    $0xc,%esp
c01021d9:	68 4a c0 10 c0       	push   $0xc010c04a
c01021de:	e8 af e0 ff ff       	call   c0100292 <cprintf>
c01021e3:	83 c4 10             	add    $0x10,%esp
    panic("EOT: kernel seems ok.");
c01021e6:	83 ec 04             	sub    $0x4,%esp
c01021e9:	68 58 c0 10 c0       	push   $0xc010c058
c01021ee:	6a 19                	push   $0x19
c01021f0:	68 6e c0 10 c0       	push   $0xc010c06e
c01021f5:	e8 fe e1 ff ff       	call   c01003f8 <__panic>

c01021fa <idt_init>:
/* temporary trapframe or pointer to trapframe */
struct trapframe switchk2u, *switchu2k;

/* idt_init - initialize IDT to each of the entry points in kern/trap/vectors.S */
void
idt_init(void) {
c01021fa:	55                   	push   %ebp
c01021fb:	89 e5                	mov    %esp,%ebp
c01021fd:	83 ec 10             	sub    $0x10,%esp
      *     Notice: the argument of lidt is idt_pd. try to find it!
      */
    // 1. get vectors
    extern uintptr_t __vectors[];
    // 2. setup entries
    for (int i = 0; i < 256; i++) {
c0102200:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0102207:	e9 c3 00 00 00       	jmp    c01022cf <idt_init+0xd5>
        SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);
c010220c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010220f:	8b 04 85 e0 b5 12 c0 	mov    -0x3fed4a20(,%eax,4),%eax
c0102216:	89 c2                	mov    %eax,%edx
c0102218:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010221b:	66 89 14 c5 60 f7 19 	mov    %dx,-0x3fe608a0(,%eax,8)
c0102222:	c0 
c0102223:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102226:	66 c7 04 c5 62 f7 19 	movw   $0x8,-0x3fe6089e(,%eax,8)
c010222d:	c0 08 00 
c0102230:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102233:	0f b6 14 c5 64 f7 19 	movzbl -0x3fe6089c(,%eax,8),%edx
c010223a:	c0 
c010223b:	83 e2 e0             	and    $0xffffffe0,%edx
c010223e:	88 14 c5 64 f7 19 c0 	mov    %dl,-0x3fe6089c(,%eax,8)
c0102245:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102248:	0f b6 14 c5 64 f7 19 	movzbl -0x3fe6089c(,%eax,8),%edx
c010224f:	c0 
c0102250:	83 e2 1f             	and    $0x1f,%edx
c0102253:	88 14 c5 64 f7 19 c0 	mov    %dl,-0x3fe6089c(,%eax,8)
c010225a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010225d:	0f b6 14 c5 65 f7 19 	movzbl -0x3fe6089b(,%eax,8),%edx
c0102264:	c0 
c0102265:	83 e2 f0             	and    $0xfffffff0,%edx
c0102268:	83 ca 0e             	or     $0xe,%edx
c010226b:	88 14 c5 65 f7 19 c0 	mov    %dl,-0x3fe6089b(,%eax,8)
c0102272:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102275:	0f b6 14 c5 65 f7 19 	movzbl -0x3fe6089b(,%eax,8),%edx
c010227c:	c0 
c010227d:	83 e2 ef             	and    $0xffffffef,%edx
c0102280:	88 14 c5 65 f7 19 c0 	mov    %dl,-0x3fe6089b(,%eax,8)
c0102287:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010228a:	0f b6 14 c5 65 f7 19 	movzbl -0x3fe6089b(,%eax,8),%edx
c0102291:	c0 
c0102292:	83 e2 9f             	and    $0xffffff9f,%edx
c0102295:	88 14 c5 65 f7 19 c0 	mov    %dl,-0x3fe6089b(,%eax,8)
c010229c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010229f:	0f b6 14 c5 65 f7 19 	movzbl -0x3fe6089b(,%eax,8),%edx
c01022a6:	c0 
c01022a7:	83 ca 80             	or     $0xffffff80,%edx
c01022aa:	88 14 c5 65 f7 19 c0 	mov    %dl,-0x3fe6089b(,%eax,8)
c01022b1:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01022b4:	8b 04 85 e0 b5 12 c0 	mov    -0x3fed4a20(,%eax,4),%eax
c01022bb:	c1 e8 10             	shr    $0x10,%eax
c01022be:	89 c2                	mov    %eax,%edx
c01022c0:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01022c3:	66 89 14 c5 66 f7 19 	mov    %dx,-0x3fe6089a(,%eax,8)
c01022ca:	c0 
      *     Notice: the argument of lidt is idt_pd. try to find it!
      */
    // 1. get vectors
    extern uintptr_t __vectors[];
    // 2. setup entries
    for (int i = 0; i < 256; i++) {
c01022cb:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c01022cf:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
c01022d6:	0f 8e 30 ff ff ff    	jle    c010220c <idt_init+0x12>
        SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);
    }
	// set RPL of switch_to_kernel as user 
    SETGATE(idt[T_SWITCH_TOK], 0, GD_KTEXT, __vectors[T_SWITCH_TOK], DPL_USER);
c01022dc:	a1 c4 b7 12 c0       	mov    0xc012b7c4,%eax
c01022e1:	66 a3 28 fb 19 c0    	mov    %ax,0xc019fb28
c01022e7:	66 c7 05 2a fb 19 c0 	movw   $0x8,0xc019fb2a
c01022ee:	08 00 
c01022f0:	0f b6 05 2c fb 19 c0 	movzbl 0xc019fb2c,%eax
c01022f7:	83 e0 e0             	and    $0xffffffe0,%eax
c01022fa:	a2 2c fb 19 c0       	mov    %al,0xc019fb2c
c01022ff:	0f b6 05 2c fb 19 c0 	movzbl 0xc019fb2c,%eax
c0102306:	83 e0 1f             	and    $0x1f,%eax
c0102309:	a2 2c fb 19 c0       	mov    %al,0xc019fb2c
c010230e:	0f b6 05 2d fb 19 c0 	movzbl 0xc019fb2d,%eax
c0102315:	83 e0 f0             	and    $0xfffffff0,%eax
c0102318:	83 c8 0e             	or     $0xe,%eax
c010231b:	a2 2d fb 19 c0       	mov    %al,0xc019fb2d
c0102320:	0f b6 05 2d fb 19 c0 	movzbl 0xc019fb2d,%eax
c0102327:	83 e0 ef             	and    $0xffffffef,%eax
c010232a:	a2 2d fb 19 c0       	mov    %al,0xc019fb2d
c010232f:	0f b6 05 2d fb 19 c0 	movzbl 0xc019fb2d,%eax
c0102336:	83 c8 60             	or     $0x60,%eax
c0102339:	a2 2d fb 19 c0       	mov    %al,0xc019fb2d
c010233e:	0f b6 05 2d fb 19 c0 	movzbl 0xc019fb2d,%eax
c0102345:	83 c8 80             	or     $0xffffff80,%eax
c0102348:	a2 2d fb 19 c0       	mov    %al,0xc019fb2d
c010234d:	a1 c4 b7 12 c0       	mov    0xc012b7c4,%eax
c0102352:	c1 e8 10             	shr    $0x10,%eax
c0102355:	66 a3 2e fb 19 c0    	mov    %ax,0xc019fb2e
     /* LAB5 2015010062 */ 
     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
     //so you should setup the syscall interrupt gate in here
    SETGATE(idt[T_SYSCALL], 1, GD_KTEXT, __vectors[T_SYSCALL], DPL_USER);
c010235b:	a1 e0 b7 12 c0       	mov    0xc012b7e0,%eax
c0102360:	66 a3 60 fb 19 c0    	mov    %ax,0xc019fb60
c0102366:	66 c7 05 62 fb 19 c0 	movw   $0x8,0xc019fb62
c010236d:	08 00 
c010236f:	0f b6 05 64 fb 19 c0 	movzbl 0xc019fb64,%eax
c0102376:	83 e0 e0             	and    $0xffffffe0,%eax
c0102379:	a2 64 fb 19 c0       	mov    %al,0xc019fb64
c010237e:	0f b6 05 64 fb 19 c0 	movzbl 0xc019fb64,%eax
c0102385:	83 e0 1f             	and    $0x1f,%eax
c0102388:	a2 64 fb 19 c0       	mov    %al,0xc019fb64
c010238d:	0f b6 05 65 fb 19 c0 	movzbl 0xc019fb65,%eax
c0102394:	83 c8 0f             	or     $0xf,%eax
c0102397:	a2 65 fb 19 c0       	mov    %al,0xc019fb65
c010239c:	0f b6 05 65 fb 19 c0 	movzbl 0xc019fb65,%eax
c01023a3:	83 e0 ef             	and    $0xffffffef,%eax
c01023a6:	a2 65 fb 19 c0       	mov    %al,0xc019fb65
c01023ab:	0f b6 05 65 fb 19 c0 	movzbl 0xc019fb65,%eax
c01023b2:	83 c8 60             	or     $0x60,%eax
c01023b5:	a2 65 fb 19 c0       	mov    %al,0xc019fb65
c01023ba:	0f b6 05 65 fb 19 c0 	movzbl 0xc019fb65,%eax
c01023c1:	83 c8 80             	or     $0xffffff80,%eax
c01023c4:	a2 65 fb 19 c0       	mov    %al,0xc019fb65
c01023c9:	a1 e0 b7 12 c0       	mov    0xc012b7e0,%eax
c01023ce:	c1 e8 10             	shr    $0x10,%eax
c01023d1:	66 a3 66 fb 19 c0    	mov    %ax,0xc019fb66
c01023d7:	c7 45 f8 60 b5 12 c0 	movl   $0xc012b560,-0x8(%ebp)
    }
}

static inline void
lidt(struct pseudodesc *pd) {
    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
c01023de:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01023e1:	0f 01 18             	lidtl  (%eax)
    // 3. LIDT
    lidt(&idt_pd);
}
c01023e4:	90                   	nop
c01023e5:	c9                   	leave  
c01023e6:	c3                   	ret    

c01023e7 <trapname>:

static const char *
trapname(int trapno) {
c01023e7:	55                   	push   %ebp
c01023e8:	89 e5                	mov    %esp,%ebp
        "Alignment Check",
        "Machine-Check",
        "SIMD Floating-Point Exception"
    };

    if (trapno < sizeof(excnames)/sizeof(const char * const)) {
c01023ea:	8b 45 08             	mov    0x8(%ebp),%eax
c01023ed:	83 f8 13             	cmp    $0x13,%eax
c01023f0:	77 0c                	ja     c01023fe <trapname+0x17>
        return excnames[trapno];
c01023f2:	8b 45 08             	mov    0x8(%ebp),%eax
c01023f5:	8b 04 85 e0 c4 10 c0 	mov    -0x3fef3b20(,%eax,4),%eax
c01023fc:	eb 18                	jmp    c0102416 <trapname+0x2f>
    }
    if (trapno >= IRQ_OFFSET && trapno < IRQ_OFFSET + 16) {
c01023fe:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
c0102402:	7e 0d                	jle    c0102411 <trapname+0x2a>
c0102404:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
c0102408:	7f 07                	jg     c0102411 <trapname+0x2a>
        return "Hardware Interrupt";
c010240a:	b8 7f c0 10 c0       	mov    $0xc010c07f,%eax
c010240f:	eb 05                	jmp    c0102416 <trapname+0x2f>
    }
    return "(unknown trap)";
c0102411:	b8 92 c0 10 c0       	mov    $0xc010c092,%eax
}
c0102416:	5d                   	pop    %ebp
c0102417:	c3                   	ret    

c0102418 <trap_in_kernel>:

/* trap_in_kernel - test if trap happened in kernel */
bool
trap_in_kernel(struct trapframe *tf) {
c0102418:	55                   	push   %ebp
c0102419:	89 e5                	mov    %esp,%ebp
    return (tf->tf_cs == (uint16_t)KERNEL_CS);
c010241b:	8b 45 08             	mov    0x8(%ebp),%eax
c010241e:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c0102422:	66 83 f8 08          	cmp    $0x8,%ax
c0102426:	0f 94 c0             	sete   %al
c0102429:	0f b6 c0             	movzbl %al,%eax
}
c010242c:	5d                   	pop    %ebp
c010242d:	c3                   	ret    

c010242e <print_trapframe>:
    "TF", "IF", "DF", "OF", NULL, NULL, "NT", NULL,
    "RF", "VM", "AC", "VIF", "VIP", "ID", NULL, NULL,
};

void
print_trapframe(struct trapframe *tf) {
c010242e:	55                   	push   %ebp
c010242f:	89 e5                	mov    %esp,%ebp
c0102431:	83 ec 18             	sub    $0x18,%esp
    cprintf("trapframe at %p\n", tf);
c0102434:	83 ec 08             	sub    $0x8,%esp
c0102437:	ff 75 08             	pushl  0x8(%ebp)
c010243a:	68 d3 c0 10 c0       	push   $0xc010c0d3
c010243f:	e8 4e de ff ff       	call   c0100292 <cprintf>
c0102444:	83 c4 10             	add    $0x10,%esp
    print_regs(&tf->tf_regs);
c0102447:	8b 45 08             	mov    0x8(%ebp),%eax
c010244a:	83 ec 0c             	sub    $0xc,%esp
c010244d:	50                   	push   %eax
c010244e:	e8 b8 01 00 00       	call   c010260b <print_regs>
c0102453:	83 c4 10             	add    $0x10,%esp
    cprintf("  ds   0x----%04x\n", tf->tf_ds);
c0102456:	8b 45 08             	mov    0x8(%ebp),%eax
c0102459:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c010245d:	0f b7 c0             	movzwl %ax,%eax
c0102460:	83 ec 08             	sub    $0x8,%esp
c0102463:	50                   	push   %eax
c0102464:	68 e4 c0 10 c0       	push   $0xc010c0e4
c0102469:	e8 24 de ff ff       	call   c0100292 <cprintf>
c010246e:	83 c4 10             	add    $0x10,%esp
    cprintf("  es   0x----%04x\n", tf->tf_es);
c0102471:	8b 45 08             	mov    0x8(%ebp),%eax
c0102474:	0f b7 40 28          	movzwl 0x28(%eax),%eax
c0102478:	0f b7 c0             	movzwl %ax,%eax
c010247b:	83 ec 08             	sub    $0x8,%esp
c010247e:	50                   	push   %eax
c010247f:	68 f7 c0 10 c0       	push   $0xc010c0f7
c0102484:	e8 09 de ff ff       	call   c0100292 <cprintf>
c0102489:	83 c4 10             	add    $0x10,%esp
    cprintf("  fs   0x----%04x\n", tf->tf_fs);
c010248c:	8b 45 08             	mov    0x8(%ebp),%eax
c010248f:	0f b7 40 24          	movzwl 0x24(%eax),%eax
c0102493:	0f b7 c0             	movzwl %ax,%eax
c0102496:	83 ec 08             	sub    $0x8,%esp
c0102499:	50                   	push   %eax
c010249a:	68 0a c1 10 c0       	push   $0xc010c10a
c010249f:	e8 ee dd ff ff       	call   c0100292 <cprintf>
c01024a4:	83 c4 10             	add    $0x10,%esp
    cprintf("  gs   0x----%04x\n", tf->tf_gs);
c01024a7:	8b 45 08             	mov    0x8(%ebp),%eax
c01024aa:	0f b7 40 20          	movzwl 0x20(%eax),%eax
c01024ae:	0f b7 c0             	movzwl %ax,%eax
c01024b1:	83 ec 08             	sub    $0x8,%esp
c01024b4:	50                   	push   %eax
c01024b5:	68 1d c1 10 c0       	push   $0xc010c11d
c01024ba:	e8 d3 dd ff ff       	call   c0100292 <cprintf>
c01024bf:	83 c4 10             	add    $0x10,%esp
    cprintf("  trap 0x%08x %s\n", tf->tf_trapno, trapname(tf->tf_trapno));
c01024c2:	8b 45 08             	mov    0x8(%ebp),%eax
c01024c5:	8b 40 30             	mov    0x30(%eax),%eax
c01024c8:	83 ec 0c             	sub    $0xc,%esp
c01024cb:	50                   	push   %eax
c01024cc:	e8 16 ff ff ff       	call   c01023e7 <trapname>
c01024d1:	83 c4 10             	add    $0x10,%esp
c01024d4:	89 c2                	mov    %eax,%edx
c01024d6:	8b 45 08             	mov    0x8(%ebp),%eax
c01024d9:	8b 40 30             	mov    0x30(%eax),%eax
c01024dc:	83 ec 04             	sub    $0x4,%esp
c01024df:	52                   	push   %edx
c01024e0:	50                   	push   %eax
c01024e1:	68 30 c1 10 c0       	push   $0xc010c130
c01024e6:	e8 a7 dd ff ff       	call   c0100292 <cprintf>
c01024eb:	83 c4 10             	add    $0x10,%esp
    cprintf("  err  0x%08x\n", tf->tf_err);
c01024ee:	8b 45 08             	mov    0x8(%ebp),%eax
c01024f1:	8b 40 34             	mov    0x34(%eax),%eax
c01024f4:	83 ec 08             	sub    $0x8,%esp
c01024f7:	50                   	push   %eax
c01024f8:	68 42 c1 10 c0       	push   $0xc010c142
c01024fd:	e8 90 dd ff ff       	call   c0100292 <cprintf>
c0102502:	83 c4 10             	add    $0x10,%esp
    cprintf("  eip  0x%08x\n", tf->tf_eip);
c0102505:	8b 45 08             	mov    0x8(%ebp),%eax
c0102508:	8b 40 38             	mov    0x38(%eax),%eax
c010250b:	83 ec 08             	sub    $0x8,%esp
c010250e:	50                   	push   %eax
c010250f:	68 51 c1 10 c0       	push   $0xc010c151
c0102514:	e8 79 dd ff ff       	call   c0100292 <cprintf>
c0102519:	83 c4 10             	add    $0x10,%esp
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
c010251c:	8b 45 08             	mov    0x8(%ebp),%eax
c010251f:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c0102523:	0f b7 c0             	movzwl %ax,%eax
c0102526:	83 ec 08             	sub    $0x8,%esp
c0102529:	50                   	push   %eax
c010252a:	68 60 c1 10 c0       	push   $0xc010c160
c010252f:	e8 5e dd ff ff       	call   c0100292 <cprintf>
c0102534:	83 c4 10             	add    $0x10,%esp
    cprintf("  flag 0x%08x ", tf->tf_eflags);
c0102537:	8b 45 08             	mov    0x8(%ebp),%eax
c010253a:	8b 40 40             	mov    0x40(%eax),%eax
c010253d:	83 ec 08             	sub    $0x8,%esp
c0102540:	50                   	push   %eax
c0102541:	68 73 c1 10 c0       	push   $0xc010c173
c0102546:	e8 47 dd ff ff       	call   c0100292 <cprintf>
c010254b:	83 c4 10             	add    $0x10,%esp

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c010254e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0102555:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c010255c:	eb 3f                	jmp    c010259d <print_trapframe+0x16f>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
c010255e:	8b 45 08             	mov    0x8(%ebp),%eax
c0102561:	8b 50 40             	mov    0x40(%eax),%edx
c0102564:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0102567:	21 d0                	and    %edx,%eax
c0102569:	85 c0                	test   %eax,%eax
c010256b:	74 29                	je     c0102596 <print_trapframe+0x168>
c010256d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102570:	8b 04 85 80 b5 12 c0 	mov    -0x3fed4a80(,%eax,4),%eax
c0102577:	85 c0                	test   %eax,%eax
c0102579:	74 1b                	je     c0102596 <print_trapframe+0x168>
            cprintf("%s,", IA32flags[i]);
c010257b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010257e:	8b 04 85 80 b5 12 c0 	mov    -0x3fed4a80(,%eax,4),%eax
c0102585:	83 ec 08             	sub    $0x8,%esp
c0102588:	50                   	push   %eax
c0102589:	68 82 c1 10 c0       	push   $0xc010c182
c010258e:	e8 ff dc ff ff       	call   c0100292 <cprintf>
c0102593:	83 c4 10             	add    $0x10,%esp
    cprintf("  eip  0x%08x\n", tf->tf_eip);
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
    cprintf("  flag 0x%08x ", tf->tf_eflags);

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c0102596:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010259a:	d1 65 f0             	shll   -0x10(%ebp)
c010259d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01025a0:	83 f8 17             	cmp    $0x17,%eax
c01025a3:	76 b9                	jbe    c010255e <print_trapframe+0x130>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
            cprintf("%s,", IA32flags[i]);
        }
    }
    cprintf("IOPL=%d\n", (tf->tf_eflags & FL_IOPL_MASK) >> 12);
c01025a5:	8b 45 08             	mov    0x8(%ebp),%eax
c01025a8:	8b 40 40             	mov    0x40(%eax),%eax
c01025ab:	25 00 30 00 00       	and    $0x3000,%eax
c01025b0:	c1 e8 0c             	shr    $0xc,%eax
c01025b3:	83 ec 08             	sub    $0x8,%esp
c01025b6:	50                   	push   %eax
c01025b7:	68 86 c1 10 c0       	push   $0xc010c186
c01025bc:	e8 d1 dc ff ff       	call   c0100292 <cprintf>
c01025c1:	83 c4 10             	add    $0x10,%esp

    if (!trap_in_kernel(tf)) {
c01025c4:	83 ec 0c             	sub    $0xc,%esp
c01025c7:	ff 75 08             	pushl  0x8(%ebp)
c01025ca:	e8 49 fe ff ff       	call   c0102418 <trap_in_kernel>
c01025cf:	83 c4 10             	add    $0x10,%esp
c01025d2:	85 c0                	test   %eax,%eax
c01025d4:	75 32                	jne    c0102608 <print_trapframe+0x1da>
        cprintf("  esp  0x%08x\n", tf->tf_esp);
c01025d6:	8b 45 08             	mov    0x8(%ebp),%eax
c01025d9:	8b 40 44             	mov    0x44(%eax),%eax
c01025dc:	83 ec 08             	sub    $0x8,%esp
c01025df:	50                   	push   %eax
c01025e0:	68 8f c1 10 c0       	push   $0xc010c18f
c01025e5:	e8 a8 dc ff ff       	call   c0100292 <cprintf>
c01025ea:	83 c4 10             	add    $0x10,%esp
        cprintf("  ss   0x----%04x\n", tf->tf_ss);
c01025ed:	8b 45 08             	mov    0x8(%ebp),%eax
c01025f0:	0f b7 40 48          	movzwl 0x48(%eax),%eax
c01025f4:	0f b7 c0             	movzwl %ax,%eax
c01025f7:	83 ec 08             	sub    $0x8,%esp
c01025fa:	50                   	push   %eax
c01025fb:	68 9e c1 10 c0       	push   $0xc010c19e
c0102600:	e8 8d dc ff ff       	call   c0100292 <cprintf>
c0102605:	83 c4 10             	add    $0x10,%esp
    }
}
c0102608:	90                   	nop
c0102609:	c9                   	leave  
c010260a:	c3                   	ret    

c010260b <print_regs>:

void
print_regs(struct pushregs *regs) {
c010260b:	55                   	push   %ebp
c010260c:	89 e5                	mov    %esp,%ebp
c010260e:	83 ec 08             	sub    $0x8,%esp
    cprintf("  edi  0x%08x\n", regs->reg_edi);
c0102611:	8b 45 08             	mov    0x8(%ebp),%eax
c0102614:	8b 00                	mov    (%eax),%eax
c0102616:	83 ec 08             	sub    $0x8,%esp
c0102619:	50                   	push   %eax
c010261a:	68 b1 c1 10 c0       	push   $0xc010c1b1
c010261f:	e8 6e dc ff ff       	call   c0100292 <cprintf>
c0102624:	83 c4 10             	add    $0x10,%esp
    cprintf("  esi  0x%08x\n", regs->reg_esi);
c0102627:	8b 45 08             	mov    0x8(%ebp),%eax
c010262a:	8b 40 04             	mov    0x4(%eax),%eax
c010262d:	83 ec 08             	sub    $0x8,%esp
c0102630:	50                   	push   %eax
c0102631:	68 c0 c1 10 c0       	push   $0xc010c1c0
c0102636:	e8 57 dc ff ff       	call   c0100292 <cprintf>
c010263b:	83 c4 10             	add    $0x10,%esp
    cprintf("  ebp  0x%08x\n", regs->reg_ebp);
c010263e:	8b 45 08             	mov    0x8(%ebp),%eax
c0102641:	8b 40 08             	mov    0x8(%eax),%eax
c0102644:	83 ec 08             	sub    $0x8,%esp
c0102647:	50                   	push   %eax
c0102648:	68 cf c1 10 c0       	push   $0xc010c1cf
c010264d:	e8 40 dc ff ff       	call   c0100292 <cprintf>
c0102652:	83 c4 10             	add    $0x10,%esp
    cprintf("  oesp 0x%08x\n", regs->reg_oesp);
c0102655:	8b 45 08             	mov    0x8(%ebp),%eax
c0102658:	8b 40 0c             	mov    0xc(%eax),%eax
c010265b:	83 ec 08             	sub    $0x8,%esp
c010265e:	50                   	push   %eax
c010265f:	68 de c1 10 c0       	push   $0xc010c1de
c0102664:	e8 29 dc ff ff       	call   c0100292 <cprintf>
c0102669:	83 c4 10             	add    $0x10,%esp
    cprintf("  ebx  0x%08x\n", regs->reg_ebx);
c010266c:	8b 45 08             	mov    0x8(%ebp),%eax
c010266f:	8b 40 10             	mov    0x10(%eax),%eax
c0102672:	83 ec 08             	sub    $0x8,%esp
c0102675:	50                   	push   %eax
c0102676:	68 ed c1 10 c0       	push   $0xc010c1ed
c010267b:	e8 12 dc ff ff       	call   c0100292 <cprintf>
c0102680:	83 c4 10             	add    $0x10,%esp
    cprintf("  edx  0x%08x\n", regs->reg_edx);
c0102683:	8b 45 08             	mov    0x8(%ebp),%eax
c0102686:	8b 40 14             	mov    0x14(%eax),%eax
c0102689:	83 ec 08             	sub    $0x8,%esp
c010268c:	50                   	push   %eax
c010268d:	68 fc c1 10 c0       	push   $0xc010c1fc
c0102692:	e8 fb db ff ff       	call   c0100292 <cprintf>
c0102697:	83 c4 10             	add    $0x10,%esp
    cprintf("  ecx  0x%08x\n", regs->reg_ecx);
c010269a:	8b 45 08             	mov    0x8(%ebp),%eax
c010269d:	8b 40 18             	mov    0x18(%eax),%eax
c01026a0:	83 ec 08             	sub    $0x8,%esp
c01026a3:	50                   	push   %eax
c01026a4:	68 0b c2 10 c0       	push   $0xc010c20b
c01026a9:	e8 e4 db ff ff       	call   c0100292 <cprintf>
c01026ae:	83 c4 10             	add    $0x10,%esp
    cprintf("  eax  0x%08x\n", regs->reg_eax);
c01026b1:	8b 45 08             	mov    0x8(%ebp),%eax
c01026b4:	8b 40 1c             	mov    0x1c(%eax),%eax
c01026b7:	83 ec 08             	sub    $0x8,%esp
c01026ba:	50                   	push   %eax
c01026bb:	68 1a c2 10 c0       	push   $0xc010c21a
c01026c0:	e8 cd db ff ff       	call   c0100292 <cprintf>
c01026c5:	83 c4 10             	add    $0x10,%esp
}
c01026c8:	90                   	nop
c01026c9:	c9                   	leave  
c01026ca:	c3                   	ret    

c01026cb <print_pgfault>:

static inline void
print_pgfault(struct trapframe *tf) {
c01026cb:	55                   	push   %ebp
c01026cc:	89 e5                	mov    %esp,%ebp
c01026ce:	53                   	push   %ebx
c01026cf:	83 ec 14             	sub    $0x14,%esp
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
            (tf->tf_err & 1) ? "protection fault" : "no page found");
c01026d2:	8b 45 08             	mov    0x8(%ebp),%eax
c01026d5:	8b 40 34             	mov    0x34(%eax),%eax
c01026d8:	83 e0 01             	and    $0x1,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c01026db:	85 c0                	test   %eax,%eax
c01026dd:	74 07                	je     c01026e6 <print_pgfault+0x1b>
c01026df:	bb 29 c2 10 c0       	mov    $0xc010c229,%ebx
c01026e4:	eb 05                	jmp    c01026eb <print_pgfault+0x20>
c01026e6:	bb 3a c2 10 c0       	mov    $0xc010c23a,%ebx
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
c01026eb:	8b 45 08             	mov    0x8(%ebp),%eax
c01026ee:	8b 40 34             	mov    0x34(%eax),%eax
c01026f1:	83 e0 02             	and    $0x2,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c01026f4:	85 c0                	test   %eax,%eax
c01026f6:	74 07                	je     c01026ff <print_pgfault+0x34>
c01026f8:	b9 57 00 00 00       	mov    $0x57,%ecx
c01026fd:	eb 05                	jmp    c0102704 <print_pgfault+0x39>
c01026ff:	b9 52 00 00 00       	mov    $0x52,%ecx
            (tf->tf_err & 4) ? 'U' : 'K',
c0102704:	8b 45 08             	mov    0x8(%ebp),%eax
c0102707:	8b 40 34             	mov    0x34(%eax),%eax
c010270a:	83 e0 04             	and    $0x4,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c010270d:	85 c0                	test   %eax,%eax
c010270f:	74 07                	je     c0102718 <print_pgfault+0x4d>
c0102711:	ba 55 00 00 00       	mov    $0x55,%edx
c0102716:	eb 05                	jmp    c010271d <print_pgfault+0x52>
c0102718:	ba 4b 00 00 00       	mov    $0x4b,%edx
}

static inline uintptr_t
rcr2(void) {
    uintptr_t cr2;
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c010271d:	0f 20 d0             	mov    %cr2,%eax
c0102720:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return cr2;
c0102723:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102726:	83 ec 0c             	sub    $0xc,%esp
c0102729:	53                   	push   %ebx
c010272a:	51                   	push   %ecx
c010272b:	52                   	push   %edx
c010272c:	50                   	push   %eax
c010272d:	68 48 c2 10 c0       	push   $0xc010c248
c0102732:	e8 5b db ff ff       	call   c0100292 <cprintf>
c0102737:	83 c4 20             	add    $0x20,%esp
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
            (tf->tf_err & 1) ? "protection fault" : "no page found");
}
c010273a:	90                   	nop
c010273b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c010273e:	c9                   	leave  
c010273f:	c3                   	ret    

c0102740 <pgfault_handler>:

static int
pgfault_handler(struct trapframe *tf) {
c0102740:	55                   	push   %ebp
c0102741:	89 e5                	mov    %esp,%ebp
c0102743:	83 ec 18             	sub    $0x18,%esp
    extern struct mm_struct *check_mm_struct;
    if(check_mm_struct !=NULL) { //used for test check_swap
c0102746:	a1 bc 20 1a c0       	mov    0xc01a20bc,%eax
c010274b:	85 c0                	test   %eax,%eax
c010274d:	74 0e                	je     c010275d <pgfault_handler+0x1d>
            print_pgfault(tf);
c010274f:	83 ec 0c             	sub    $0xc,%esp
c0102752:	ff 75 08             	pushl  0x8(%ebp)
c0102755:	e8 71 ff ff ff       	call   c01026cb <print_pgfault>
c010275a:	83 c4 10             	add    $0x10,%esp
        }
    struct mm_struct *mm;
    if (check_mm_struct != NULL) {
c010275d:	a1 bc 20 1a c0       	mov    0xc01a20bc,%eax
c0102762:	85 c0                	test   %eax,%eax
c0102764:	74 32                	je     c0102798 <pgfault_handler+0x58>
        assert(current == idleproc);
c0102766:	8b 15 28 00 1a c0    	mov    0xc01a0028,%edx
c010276c:	a1 20 00 1a c0       	mov    0xc01a0020,%eax
c0102771:	39 c2                	cmp    %eax,%edx
c0102773:	74 19                	je     c010278e <pgfault_handler+0x4e>
c0102775:	68 6b c2 10 c0       	push   $0xc010c26b
c010277a:	68 7f c2 10 c0       	push   $0xc010c27f
c010277f:	68 b7 00 00 00       	push   $0xb7
c0102784:	68 6e c0 10 c0       	push   $0xc010c06e
c0102789:	e8 6a dc ff ff       	call   c01003f8 <__panic>
        mm = check_mm_struct;
c010278e:	a1 bc 20 1a c0       	mov    0xc01a20bc,%eax
c0102793:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0102796:	eb 47                	jmp    c01027df <pgfault_handler+0x9f>
    }
    else {
        if (current == NULL) {
c0102798:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c010279d:	85 c0                	test   %eax,%eax
c010279f:	75 33                	jne    c01027d4 <pgfault_handler+0x94>
            print_trapframe(tf);
c01027a1:	83 ec 0c             	sub    $0xc,%esp
c01027a4:	ff 75 08             	pushl  0x8(%ebp)
c01027a7:	e8 82 fc ff ff       	call   c010242e <print_trapframe>
c01027ac:	83 c4 10             	add    $0x10,%esp
            print_pgfault(tf);
c01027af:	83 ec 0c             	sub    $0xc,%esp
c01027b2:	ff 75 08             	pushl  0x8(%ebp)
c01027b5:	e8 11 ff ff ff       	call   c01026cb <print_pgfault>
c01027ba:	83 c4 10             	add    $0x10,%esp
            panic("unhandled page fault.\n");
c01027bd:	83 ec 04             	sub    $0x4,%esp
c01027c0:	68 94 c2 10 c0       	push   $0xc010c294
c01027c5:	68 be 00 00 00       	push   $0xbe
c01027ca:	68 6e c0 10 c0       	push   $0xc010c06e
c01027cf:	e8 24 dc ff ff       	call   c01003f8 <__panic>
        }
        mm = current->mm;
c01027d4:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c01027d9:	8b 40 18             	mov    0x18(%eax),%eax
c01027dc:	89 45 f4             	mov    %eax,-0xc(%ebp)
}

static inline uintptr_t
rcr2(void) {
    uintptr_t cr2;
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c01027df:	0f 20 d0             	mov    %cr2,%eax
c01027e2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return cr2;
c01027e5:	8b 55 f0             	mov    -0x10(%ebp),%edx
    }
    return do_pgfault(mm, tf->tf_err, rcr2());
c01027e8:	8b 45 08             	mov    0x8(%ebp),%eax
c01027eb:	8b 40 34             	mov    0x34(%eax),%eax
c01027ee:	83 ec 04             	sub    $0x4,%esp
c01027f1:	52                   	push   %edx
c01027f2:	50                   	push   %eax
c01027f3:	ff 75 f4             	pushl  -0xc(%ebp)
c01027f6:	e8 c9 22 00 00       	call   c0104ac4 <do_pgfault>
c01027fb:	83 c4 10             	add    $0x10,%esp
}
c01027fe:	c9                   	leave  
c01027ff:	c3                   	ret    

c0102800 <trap_dispatch>:

static volatile int in_swap_tick_event = 0;
extern struct mm_struct *check_mm_struct;

static void
trap_dispatch(struct trapframe *tf) {
c0102800:	55                   	push   %ebp
c0102801:	89 e5                	mov    %esp,%ebp
c0102803:	57                   	push   %edi
c0102804:	56                   	push   %esi
c0102805:	53                   	push   %ebx
c0102806:	83 ec 1c             	sub    $0x1c,%esp
    char c;

    int ret=0;
c0102809:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

    switch (tf->tf_trapno) {
c0102810:	8b 45 08             	mov    0x8(%ebp),%eax
c0102813:	8b 40 30             	mov    0x30(%eax),%eax
c0102816:	83 f8 2f             	cmp    $0x2f,%eax
c0102819:	77 38                	ja     c0102853 <trap_dispatch+0x53>
c010281b:	83 f8 2e             	cmp    $0x2e,%eax
c010281e:	0f 83 79 02 00 00    	jae    c0102a9d <trap_dispatch+0x29d>
c0102824:	83 f8 20             	cmp    $0x20,%eax
c0102827:	0f 84 eb 00 00 00    	je     c0102918 <trap_dispatch+0x118>
c010282d:	83 f8 20             	cmp    $0x20,%eax
c0102830:	77 0a                	ja     c010283c <trap_dispatch+0x3c>
c0102832:	83 f8 0e             	cmp    $0xe,%eax
c0102835:	74 3e                	je     c0102875 <trap_dispatch+0x75>
c0102837:	e9 16 02 00 00       	jmp    c0102a52 <trap_dispatch+0x252>
c010283c:	83 f8 21             	cmp    $0x21,%eax
c010283f:	0f 84 40 01 00 00    	je     c0102985 <trap_dispatch+0x185>
c0102845:	83 f8 24             	cmp    $0x24,%eax
c0102848:	0f 84 10 01 00 00    	je     c010295e <trap_dispatch+0x15e>
c010284e:	e9 ff 01 00 00       	jmp    c0102a52 <trap_dispatch+0x252>
c0102853:	83 f8 79             	cmp    $0x79,%eax
c0102856:	0f 84 c8 01 00 00    	je     c0102a24 <trap_dispatch+0x224>
c010285c:	3d 80 00 00 00       	cmp    $0x80,%eax
c0102861:	0f 84 a7 00 00 00    	je     c010290e <trap_dispatch+0x10e>
c0102867:	83 f8 78             	cmp    $0x78,%eax
c010286a:	0f 84 3c 01 00 00    	je     c01029ac <trap_dispatch+0x1ac>
c0102870:	e9 dd 01 00 00       	jmp    c0102a52 <trap_dispatch+0x252>
    case T_PGFLT:  //page fault
        if ((ret = pgfault_handler(tf)) != 0) {
c0102875:	83 ec 0c             	sub    $0xc,%esp
c0102878:	ff 75 08             	pushl  0x8(%ebp)
c010287b:	e8 c0 fe ff ff       	call   c0102740 <pgfault_handler>
c0102880:	83 c4 10             	add    $0x10,%esp
c0102883:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0102886:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010288a:	0f 84 10 02 00 00    	je     c0102aa0 <trap_dispatch+0x2a0>
            print_trapframe(tf);
c0102890:	83 ec 0c             	sub    $0xc,%esp
c0102893:	ff 75 08             	pushl  0x8(%ebp)
c0102896:	e8 93 fb ff ff       	call   c010242e <print_trapframe>
c010289b:	83 c4 10             	add    $0x10,%esp
            if (current == NULL) {
c010289e:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c01028a3:	85 c0                	test   %eax,%eax
c01028a5:	75 17                	jne    c01028be <trap_dispatch+0xbe>
                panic("handle pgfault failed. ret=%d\n", ret);
c01028a7:	ff 75 e4             	pushl  -0x1c(%ebp)
c01028aa:	68 ac c2 10 c0       	push   $0xc010c2ac
c01028af:	68 d3 00 00 00       	push   $0xd3
c01028b4:	68 6e c0 10 c0       	push   $0xc010c06e
c01028b9:	e8 3a db ff ff       	call   c01003f8 <__panic>
            }
            else {
                if (trap_in_kernel(tf)) {
c01028be:	83 ec 0c             	sub    $0xc,%esp
c01028c1:	ff 75 08             	pushl  0x8(%ebp)
c01028c4:	e8 4f fb ff ff       	call   c0102418 <trap_in_kernel>
c01028c9:	83 c4 10             	add    $0x10,%esp
c01028cc:	85 c0                	test   %eax,%eax
c01028ce:	74 17                	je     c01028e7 <trap_dispatch+0xe7>
                    panic("handle pgfault failed in kernel mode. ret=%d\n", ret);
c01028d0:	ff 75 e4             	pushl  -0x1c(%ebp)
c01028d3:	68 cc c2 10 c0       	push   $0xc010c2cc
c01028d8:	68 d7 00 00 00       	push   $0xd7
c01028dd:	68 6e c0 10 c0       	push   $0xc010c06e
c01028e2:	e8 11 db ff ff       	call   c01003f8 <__panic>
                }
                cprintf("killed by kernel.\n");
c01028e7:	83 ec 0c             	sub    $0xc,%esp
c01028ea:	68 fa c2 10 c0       	push   $0xc010c2fa
c01028ef:	e8 9e d9 ff ff       	call   c0100292 <cprintf>
c01028f4:	83 c4 10             	add    $0x10,%esp
                panic("handle user mode pgfault failed. ret=%d\n", ret); 
c01028f7:	ff 75 e4             	pushl  -0x1c(%ebp)
c01028fa:	68 10 c3 10 c0       	push   $0xc010c310
c01028ff:	68 da 00 00 00       	push   $0xda
c0102904:	68 6e c0 10 c0       	push   $0xc010c06e
c0102909:	e8 ea da ff ff       	call   c01003f8 <__panic>
                do_exit(-E_KILLED);
            }
        }
        break;
    case T_SYSCALL:
        syscall();
c010290e:	e8 41 86 00 00       	call   c010af54 <syscall>
        break;
c0102913:	e9 8c 01 00 00       	jmp    c0102aa4 <trap_dispatch+0x2a4>
         */
        /* LAB5 2015010062 */
        /* you should upate you lab1 code (just add ONE or TWO lines of code):
         *    Every TICK_NUM cycle, you should set current process's current->need_resched = 1
         */
        ticks++;
c0102918:	a1 54 20 1a c0       	mov    0xc01a2054,%eax
c010291d:	83 c0 01             	add    $0x1,%eax
c0102920:	a3 54 20 1a c0       	mov    %eax,0xc01a2054
        if (ticks % TICK_NUM == 0) {
c0102925:	8b 0d 54 20 1a c0    	mov    0xc01a2054,%ecx
c010292b:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
c0102930:	89 c8                	mov    %ecx,%eax
c0102932:	f7 e2                	mul    %edx
c0102934:	89 d0                	mov    %edx,%eax
c0102936:	c1 e8 05             	shr    $0x5,%eax
c0102939:	6b c0 64             	imul   $0x64,%eax,%eax
c010293c:	29 c1                	sub    %eax,%ecx
c010293e:	89 c8                	mov    %ecx,%eax
c0102940:	85 c0                	test   %eax,%eax
c0102942:	0f 85 5b 01 00 00    	jne    c0102aa3 <trap_dispatch+0x2a3>
            print_ticks();
c0102948:	e8 71 f8 ff ff       	call   c01021be <print_ticks>
            current->need_resched = 1;
c010294d:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c0102952:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
        }
        break;
c0102959:	e9 45 01 00 00       	jmp    c0102aa3 <trap_dispatch+0x2a3>
    case IRQ_OFFSET + IRQ_COM1:
        c = cons_getc();
c010295e:	e8 18 f6 ff ff       	call   c0101f7b <cons_getc>
c0102963:	88 45 e3             	mov    %al,-0x1d(%ebp)
        cprintf("serial [%03d] %c\n", c, c);
c0102966:	0f be 55 e3          	movsbl -0x1d(%ebp),%edx
c010296a:	0f be 45 e3          	movsbl -0x1d(%ebp),%eax
c010296e:	83 ec 04             	sub    $0x4,%esp
c0102971:	52                   	push   %edx
c0102972:	50                   	push   %eax
c0102973:	68 39 c3 10 c0       	push   $0xc010c339
c0102978:	e8 15 d9 ff ff       	call   c0100292 <cprintf>
c010297d:	83 c4 10             	add    $0x10,%esp
        break;
c0102980:	e9 1f 01 00 00       	jmp    c0102aa4 <trap_dispatch+0x2a4>
    case IRQ_OFFSET + IRQ_KBD:
        c = cons_getc();
c0102985:	e8 f1 f5 ff ff       	call   c0101f7b <cons_getc>
c010298a:	88 45 e3             	mov    %al,-0x1d(%ebp)
        cprintf("kbd [%03d] %c\n", c, c);
c010298d:	0f be 55 e3          	movsbl -0x1d(%ebp),%edx
c0102991:	0f be 45 e3          	movsbl -0x1d(%ebp),%eax
c0102995:	83 ec 04             	sub    $0x4,%esp
c0102998:	52                   	push   %edx
c0102999:	50                   	push   %eax
c010299a:	68 4b c3 10 c0       	push   $0xc010c34b
c010299f:	e8 ee d8 ff ff       	call   c0100292 <cprintf>
c01029a4:	83 c4 10             	add    $0x10,%esp
        break;
c01029a7:	e9 f8 00 00 00       	jmp    c0102aa4 <trap_dispatch+0x2a4>
    //LAB1 CHALLENGE 1 : YOUR CODE you should modify below codes.
    case T_SWITCH_TOU:
        switchk2u = *tf;
c01029ac:	8b 55 08             	mov    0x8(%ebp),%edx
c01029af:	b8 60 20 1a c0       	mov    $0xc01a2060,%eax
c01029b4:	89 d3                	mov    %edx,%ebx
c01029b6:	ba 4c 00 00 00       	mov    $0x4c,%edx
c01029bb:	8b 0b                	mov    (%ebx),%ecx
c01029bd:	89 08                	mov    %ecx,(%eax)
c01029bf:	8b 4c 13 fc          	mov    -0x4(%ebx,%edx,1),%ecx
c01029c3:	89 4c 10 fc          	mov    %ecx,-0x4(%eax,%edx,1)
c01029c7:	8d 78 04             	lea    0x4(%eax),%edi
c01029ca:	83 e7 fc             	and    $0xfffffffc,%edi
c01029cd:	29 f8                	sub    %edi,%eax
c01029cf:	29 c3                	sub    %eax,%ebx
c01029d1:	01 c2                	add    %eax,%edx
c01029d3:	83 e2 fc             	and    $0xfffffffc,%edx
c01029d6:	89 d0                	mov    %edx,%eax
c01029d8:	c1 e8 02             	shr    $0x2,%eax
c01029db:	89 de                	mov    %ebx,%esi
c01029dd:	89 c1                	mov    %eax,%ecx
c01029df:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
        switchk2u.tf_cs = USER_CS;
c01029e1:	66 c7 05 9c 20 1a c0 	movw   $0x1b,0xc01a209c
c01029e8:	1b 00 
        switchk2u.tf_ds = USER_DS;
c01029ea:	66 c7 05 8c 20 1a c0 	movw   $0x23,0xc01a208c
c01029f1:	23 00 
        switchk2u.tf_es = USER_DS;
c01029f3:	66 c7 05 88 20 1a c0 	movw   $0x23,0xc01a2088
c01029fa:	23 00 
        switchk2u.tf_ss = USER_DS;
c01029fc:	66 c7 05 a8 20 1a c0 	movw   $0x23,0xc01a20a8
c0102a03:	23 00 
        switchk2u.tf_eflags |= FL_IOPL_MASK;
c0102a05:	a1 a0 20 1a c0       	mov    0xc01a20a0,%eax
c0102a0a:	80 cc 30             	or     $0x30,%ah
c0102a0d:	a3 a0 20 1a c0       	mov    %eax,0xc01a20a0
        *((uint32_t *)tf - 1) = (uint32_t)&switchk2u;
c0102a12:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a15:	83 e8 04             	sub    $0x4,%eax
c0102a18:	ba 60 20 1a c0       	mov    $0xc01a2060,%edx
c0102a1d:	89 10                	mov    %edx,(%eax)
        break;
c0102a1f:	e9 80 00 00 00       	jmp    c0102aa4 <trap_dispatch+0x2a4>
    case T_SWITCH_TOK:
        tf->tf_cs = KERNEL_CS;
c0102a24:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a27:	66 c7 40 3c 08 00    	movw   $0x8,0x3c(%eax)
        tf->tf_ds = KERNEL_DS;
c0102a2d:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a30:	66 c7 40 2c 10 00    	movw   $0x10,0x2c(%eax)
        tf->tf_es = KERNEL_DS;
c0102a36:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a39:	66 c7 40 28 10 00    	movw   $0x10,0x28(%eax)
        tf->tf_eflags &= ~FL_IOPL_MASK;
c0102a3f:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a42:	8b 40 40             	mov    0x40(%eax),%eax
c0102a45:	80 e4 cf             	and    $0xcf,%ah
c0102a48:	89 c2                	mov    %eax,%edx
c0102a4a:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a4d:	89 50 40             	mov    %edx,0x40(%eax)
        break;
c0102a50:	eb 52                	jmp    c0102aa4 <trap_dispatch+0x2a4>
    case IRQ_OFFSET + IRQ_IDE1:
    case IRQ_OFFSET + IRQ_IDE2:
        /* do nothing */
        break;
    default:
        print_trapframe(tf);
c0102a52:	83 ec 0c             	sub    $0xc,%esp
c0102a55:	ff 75 08             	pushl  0x8(%ebp)
c0102a58:	e8 d1 f9 ff ff       	call   c010242e <print_trapframe>
c0102a5d:	83 c4 10             	add    $0x10,%esp
        if (current != NULL) {
c0102a60:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c0102a65:	85 c0                	test   %eax,%eax
c0102a67:	74 1d                	je     c0102a86 <trap_dispatch+0x286>
            cprintf("unhandled trap.\n");
c0102a69:	83 ec 0c             	sub    $0xc,%esp
c0102a6c:	68 5a c3 10 c0       	push   $0xc010c35a
c0102a71:	e8 1c d8 ff ff       	call   c0100292 <cprintf>
c0102a76:	83 c4 10             	add    $0x10,%esp
            do_exit(-E_KILLED);
c0102a79:	83 ec 0c             	sub    $0xc,%esp
c0102a7c:	6a f7                	push   $0xfffffff7
c0102a7e:	e8 bc 73 00 00       	call   c0109e3f <do_exit>
c0102a83:	83 c4 10             	add    $0x10,%esp
        }
        // in kernel, it must be a mistake
        panic("unexpected trap in kernel.\n");
c0102a86:	83 ec 04             	sub    $0x4,%esp
c0102a89:	68 6b c3 10 c0       	push   $0xc010c36b
c0102a8e:	68 1c 01 00 00       	push   $0x11c
c0102a93:	68 6e c0 10 c0       	push   $0xc010c06e
c0102a98:	e8 5b d9 ff ff       	call   c01003f8 <__panic>
    // end of copy
    
    case IRQ_OFFSET + IRQ_IDE1:
    case IRQ_OFFSET + IRQ_IDE2:
        /* do nothing */
        break;
c0102a9d:	90                   	nop
c0102a9e:	eb 04                	jmp    c0102aa4 <trap_dispatch+0x2a4>
                cprintf("killed by kernel.\n");
                panic("handle user mode pgfault failed. ret=%d\n", ret); 
                do_exit(-E_KILLED);
            }
        }
        break;
c0102aa0:	90                   	nop
c0102aa1:	eb 01                	jmp    c0102aa4 <trap_dispatch+0x2a4>
        ticks++;
        if (ticks % TICK_NUM == 0) {
            print_ticks();
            current->need_resched = 1;
        }
        break;
c0102aa3:	90                   	nop
        }
        // in kernel, it must be a mistake
        panic("unexpected trap in kernel.\n");

    }
}
c0102aa4:	90                   	nop
c0102aa5:	8d 65 f4             	lea    -0xc(%ebp),%esp
c0102aa8:	5b                   	pop    %ebx
c0102aa9:	5e                   	pop    %esi
c0102aaa:	5f                   	pop    %edi
c0102aab:	5d                   	pop    %ebp
c0102aac:	c3                   	ret    

c0102aad <trap>:
 * trap - handles or dispatches an exception/interrupt. if and when trap() returns,
 * the code in kern/trap/trapentry.S restores the old CPU state saved in the
 * trapframe and then uses the iret instruction to return from the exception.
 * */
void
trap(struct trapframe *tf) {
c0102aad:	55                   	push   %ebp
c0102aae:	89 e5                	mov    %esp,%ebp
c0102ab0:	83 ec 18             	sub    $0x18,%esp
    // dispatch based on what type of trap occurred
    // used for previous projects
    if (current == NULL) {
c0102ab3:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c0102ab8:	85 c0                	test   %eax,%eax
c0102aba:	75 10                	jne    c0102acc <trap+0x1f>
        trap_dispatch(tf);
c0102abc:	83 ec 0c             	sub    $0xc,%esp
c0102abf:	ff 75 08             	pushl  0x8(%ebp)
c0102ac2:	e8 39 fd ff ff       	call   c0102800 <trap_dispatch>
c0102ac7:	83 c4 10             	add    $0x10,%esp
            if (current->need_resched) {
                schedule();
            }
        }
    }
}
c0102aca:	eb 73                	jmp    c0102b3f <trap+0x92>
    if (current == NULL) {
        trap_dispatch(tf);
    }
    else {
        // keep a trapframe chain in stack
        struct trapframe *otf = current->tf;
c0102acc:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c0102ad1:	8b 40 3c             	mov    0x3c(%eax),%eax
c0102ad4:	89 45 f4             	mov    %eax,-0xc(%ebp)
        current->tf = tf;
c0102ad7:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c0102adc:	8b 55 08             	mov    0x8(%ebp),%edx
c0102adf:	89 50 3c             	mov    %edx,0x3c(%eax)
    
        bool in_kernel = trap_in_kernel(tf);
c0102ae2:	83 ec 0c             	sub    $0xc,%esp
c0102ae5:	ff 75 08             	pushl  0x8(%ebp)
c0102ae8:	e8 2b f9 ff ff       	call   c0102418 <trap_in_kernel>
c0102aed:	83 c4 10             	add    $0x10,%esp
c0102af0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
        trap_dispatch(tf);
c0102af3:	83 ec 0c             	sub    $0xc,%esp
c0102af6:	ff 75 08             	pushl  0x8(%ebp)
c0102af9:	e8 02 fd ff ff       	call   c0102800 <trap_dispatch>
c0102afe:	83 c4 10             	add    $0x10,%esp
    
        current->tf = otf;
c0102b01:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c0102b06:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0102b09:	89 50 3c             	mov    %edx,0x3c(%eax)
        if (!in_kernel) {
c0102b0c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0102b10:	75 2d                	jne    c0102b3f <trap+0x92>
            if (current->flags & PF_EXITING) {
c0102b12:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c0102b17:	8b 40 44             	mov    0x44(%eax),%eax
c0102b1a:	83 e0 01             	and    $0x1,%eax
c0102b1d:	85 c0                	test   %eax,%eax
c0102b1f:	74 0d                	je     c0102b2e <trap+0x81>
                do_exit(-E_KILLED);
c0102b21:	83 ec 0c             	sub    $0xc,%esp
c0102b24:	6a f7                	push   $0xfffffff7
c0102b26:	e8 14 73 00 00       	call   c0109e3f <do_exit>
c0102b2b:	83 c4 10             	add    $0x10,%esp
            }
            if (current->need_resched) {
c0102b2e:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c0102b33:	8b 40 10             	mov    0x10(%eax),%eax
c0102b36:	85 c0                	test   %eax,%eax
c0102b38:	74 05                	je     c0102b3f <trap+0x92>
                schedule();
c0102b3a:	e8 1c 82 00 00       	call   c010ad5b <schedule>
            }
        }
    }
}
c0102b3f:	90                   	nop
c0102b40:	c9                   	leave  
c0102b41:	c3                   	ret    

c0102b42 <vector0>:
# handler
.text
.globl __alltraps
.globl vector0
vector0:
  pushl $0
c0102b42:	6a 00                	push   $0x0
  pushl $0
c0102b44:	6a 00                	push   $0x0
  jmp __alltraps
c0102b46:	e9 69 0a 00 00       	jmp    c01035b4 <__alltraps>

c0102b4b <vector1>:
.globl vector1
vector1:
  pushl $0
c0102b4b:	6a 00                	push   $0x0
  pushl $1
c0102b4d:	6a 01                	push   $0x1
  jmp __alltraps
c0102b4f:	e9 60 0a 00 00       	jmp    c01035b4 <__alltraps>

c0102b54 <vector2>:
.globl vector2
vector2:
  pushl $0
c0102b54:	6a 00                	push   $0x0
  pushl $2
c0102b56:	6a 02                	push   $0x2
  jmp __alltraps
c0102b58:	e9 57 0a 00 00       	jmp    c01035b4 <__alltraps>

c0102b5d <vector3>:
.globl vector3
vector3:
  pushl $0
c0102b5d:	6a 00                	push   $0x0
  pushl $3
c0102b5f:	6a 03                	push   $0x3
  jmp __alltraps
c0102b61:	e9 4e 0a 00 00       	jmp    c01035b4 <__alltraps>

c0102b66 <vector4>:
.globl vector4
vector4:
  pushl $0
c0102b66:	6a 00                	push   $0x0
  pushl $4
c0102b68:	6a 04                	push   $0x4
  jmp __alltraps
c0102b6a:	e9 45 0a 00 00       	jmp    c01035b4 <__alltraps>

c0102b6f <vector5>:
.globl vector5
vector5:
  pushl $0
c0102b6f:	6a 00                	push   $0x0
  pushl $5
c0102b71:	6a 05                	push   $0x5
  jmp __alltraps
c0102b73:	e9 3c 0a 00 00       	jmp    c01035b4 <__alltraps>

c0102b78 <vector6>:
.globl vector6
vector6:
  pushl $0
c0102b78:	6a 00                	push   $0x0
  pushl $6
c0102b7a:	6a 06                	push   $0x6
  jmp __alltraps
c0102b7c:	e9 33 0a 00 00       	jmp    c01035b4 <__alltraps>

c0102b81 <vector7>:
.globl vector7
vector7:
  pushl $0
c0102b81:	6a 00                	push   $0x0
  pushl $7
c0102b83:	6a 07                	push   $0x7
  jmp __alltraps
c0102b85:	e9 2a 0a 00 00       	jmp    c01035b4 <__alltraps>

c0102b8a <vector8>:
.globl vector8
vector8:
  pushl $8
c0102b8a:	6a 08                	push   $0x8
  jmp __alltraps
c0102b8c:	e9 23 0a 00 00       	jmp    c01035b4 <__alltraps>

c0102b91 <vector9>:
.globl vector9
vector9:
  pushl $0
c0102b91:	6a 00                	push   $0x0
  pushl $9
c0102b93:	6a 09                	push   $0x9
  jmp __alltraps
c0102b95:	e9 1a 0a 00 00       	jmp    c01035b4 <__alltraps>

c0102b9a <vector10>:
.globl vector10
vector10:
  pushl $10
c0102b9a:	6a 0a                	push   $0xa
  jmp __alltraps
c0102b9c:	e9 13 0a 00 00       	jmp    c01035b4 <__alltraps>

c0102ba1 <vector11>:
.globl vector11
vector11:
  pushl $11
c0102ba1:	6a 0b                	push   $0xb
  jmp __alltraps
c0102ba3:	e9 0c 0a 00 00       	jmp    c01035b4 <__alltraps>

c0102ba8 <vector12>:
.globl vector12
vector12:
  pushl $12
c0102ba8:	6a 0c                	push   $0xc
  jmp __alltraps
c0102baa:	e9 05 0a 00 00       	jmp    c01035b4 <__alltraps>

c0102baf <vector13>:
.globl vector13
vector13:
  pushl $13
c0102baf:	6a 0d                	push   $0xd
  jmp __alltraps
c0102bb1:	e9 fe 09 00 00       	jmp    c01035b4 <__alltraps>

c0102bb6 <vector14>:
.globl vector14
vector14:
  pushl $14
c0102bb6:	6a 0e                	push   $0xe
  jmp __alltraps
c0102bb8:	e9 f7 09 00 00       	jmp    c01035b4 <__alltraps>

c0102bbd <vector15>:
.globl vector15
vector15:
  pushl $0
c0102bbd:	6a 00                	push   $0x0
  pushl $15
c0102bbf:	6a 0f                	push   $0xf
  jmp __alltraps
c0102bc1:	e9 ee 09 00 00       	jmp    c01035b4 <__alltraps>

c0102bc6 <vector16>:
.globl vector16
vector16:
  pushl $0
c0102bc6:	6a 00                	push   $0x0
  pushl $16
c0102bc8:	6a 10                	push   $0x10
  jmp __alltraps
c0102bca:	e9 e5 09 00 00       	jmp    c01035b4 <__alltraps>

c0102bcf <vector17>:
.globl vector17
vector17:
  pushl $17
c0102bcf:	6a 11                	push   $0x11
  jmp __alltraps
c0102bd1:	e9 de 09 00 00       	jmp    c01035b4 <__alltraps>

c0102bd6 <vector18>:
.globl vector18
vector18:
  pushl $0
c0102bd6:	6a 00                	push   $0x0
  pushl $18
c0102bd8:	6a 12                	push   $0x12
  jmp __alltraps
c0102bda:	e9 d5 09 00 00       	jmp    c01035b4 <__alltraps>

c0102bdf <vector19>:
.globl vector19
vector19:
  pushl $0
c0102bdf:	6a 00                	push   $0x0
  pushl $19
c0102be1:	6a 13                	push   $0x13
  jmp __alltraps
c0102be3:	e9 cc 09 00 00       	jmp    c01035b4 <__alltraps>

c0102be8 <vector20>:
.globl vector20
vector20:
  pushl $0
c0102be8:	6a 00                	push   $0x0
  pushl $20
c0102bea:	6a 14                	push   $0x14
  jmp __alltraps
c0102bec:	e9 c3 09 00 00       	jmp    c01035b4 <__alltraps>

c0102bf1 <vector21>:
.globl vector21
vector21:
  pushl $0
c0102bf1:	6a 00                	push   $0x0
  pushl $21
c0102bf3:	6a 15                	push   $0x15
  jmp __alltraps
c0102bf5:	e9 ba 09 00 00       	jmp    c01035b4 <__alltraps>

c0102bfa <vector22>:
.globl vector22
vector22:
  pushl $0
c0102bfa:	6a 00                	push   $0x0
  pushl $22
c0102bfc:	6a 16                	push   $0x16
  jmp __alltraps
c0102bfe:	e9 b1 09 00 00       	jmp    c01035b4 <__alltraps>

c0102c03 <vector23>:
.globl vector23
vector23:
  pushl $0
c0102c03:	6a 00                	push   $0x0
  pushl $23
c0102c05:	6a 17                	push   $0x17
  jmp __alltraps
c0102c07:	e9 a8 09 00 00       	jmp    c01035b4 <__alltraps>

c0102c0c <vector24>:
.globl vector24
vector24:
  pushl $0
c0102c0c:	6a 00                	push   $0x0
  pushl $24
c0102c0e:	6a 18                	push   $0x18
  jmp __alltraps
c0102c10:	e9 9f 09 00 00       	jmp    c01035b4 <__alltraps>

c0102c15 <vector25>:
.globl vector25
vector25:
  pushl $0
c0102c15:	6a 00                	push   $0x0
  pushl $25
c0102c17:	6a 19                	push   $0x19
  jmp __alltraps
c0102c19:	e9 96 09 00 00       	jmp    c01035b4 <__alltraps>

c0102c1e <vector26>:
.globl vector26
vector26:
  pushl $0
c0102c1e:	6a 00                	push   $0x0
  pushl $26
c0102c20:	6a 1a                	push   $0x1a
  jmp __alltraps
c0102c22:	e9 8d 09 00 00       	jmp    c01035b4 <__alltraps>

c0102c27 <vector27>:
.globl vector27
vector27:
  pushl $0
c0102c27:	6a 00                	push   $0x0
  pushl $27
c0102c29:	6a 1b                	push   $0x1b
  jmp __alltraps
c0102c2b:	e9 84 09 00 00       	jmp    c01035b4 <__alltraps>

c0102c30 <vector28>:
.globl vector28
vector28:
  pushl $0
c0102c30:	6a 00                	push   $0x0
  pushl $28
c0102c32:	6a 1c                	push   $0x1c
  jmp __alltraps
c0102c34:	e9 7b 09 00 00       	jmp    c01035b4 <__alltraps>

c0102c39 <vector29>:
.globl vector29
vector29:
  pushl $0
c0102c39:	6a 00                	push   $0x0
  pushl $29
c0102c3b:	6a 1d                	push   $0x1d
  jmp __alltraps
c0102c3d:	e9 72 09 00 00       	jmp    c01035b4 <__alltraps>

c0102c42 <vector30>:
.globl vector30
vector30:
  pushl $0
c0102c42:	6a 00                	push   $0x0
  pushl $30
c0102c44:	6a 1e                	push   $0x1e
  jmp __alltraps
c0102c46:	e9 69 09 00 00       	jmp    c01035b4 <__alltraps>

c0102c4b <vector31>:
.globl vector31
vector31:
  pushl $0
c0102c4b:	6a 00                	push   $0x0
  pushl $31
c0102c4d:	6a 1f                	push   $0x1f
  jmp __alltraps
c0102c4f:	e9 60 09 00 00       	jmp    c01035b4 <__alltraps>

c0102c54 <vector32>:
.globl vector32
vector32:
  pushl $0
c0102c54:	6a 00                	push   $0x0
  pushl $32
c0102c56:	6a 20                	push   $0x20
  jmp __alltraps
c0102c58:	e9 57 09 00 00       	jmp    c01035b4 <__alltraps>

c0102c5d <vector33>:
.globl vector33
vector33:
  pushl $0
c0102c5d:	6a 00                	push   $0x0
  pushl $33
c0102c5f:	6a 21                	push   $0x21
  jmp __alltraps
c0102c61:	e9 4e 09 00 00       	jmp    c01035b4 <__alltraps>

c0102c66 <vector34>:
.globl vector34
vector34:
  pushl $0
c0102c66:	6a 00                	push   $0x0
  pushl $34
c0102c68:	6a 22                	push   $0x22
  jmp __alltraps
c0102c6a:	e9 45 09 00 00       	jmp    c01035b4 <__alltraps>

c0102c6f <vector35>:
.globl vector35
vector35:
  pushl $0
c0102c6f:	6a 00                	push   $0x0
  pushl $35
c0102c71:	6a 23                	push   $0x23
  jmp __alltraps
c0102c73:	e9 3c 09 00 00       	jmp    c01035b4 <__alltraps>

c0102c78 <vector36>:
.globl vector36
vector36:
  pushl $0
c0102c78:	6a 00                	push   $0x0
  pushl $36
c0102c7a:	6a 24                	push   $0x24
  jmp __alltraps
c0102c7c:	e9 33 09 00 00       	jmp    c01035b4 <__alltraps>

c0102c81 <vector37>:
.globl vector37
vector37:
  pushl $0
c0102c81:	6a 00                	push   $0x0
  pushl $37
c0102c83:	6a 25                	push   $0x25
  jmp __alltraps
c0102c85:	e9 2a 09 00 00       	jmp    c01035b4 <__alltraps>

c0102c8a <vector38>:
.globl vector38
vector38:
  pushl $0
c0102c8a:	6a 00                	push   $0x0
  pushl $38
c0102c8c:	6a 26                	push   $0x26
  jmp __alltraps
c0102c8e:	e9 21 09 00 00       	jmp    c01035b4 <__alltraps>

c0102c93 <vector39>:
.globl vector39
vector39:
  pushl $0
c0102c93:	6a 00                	push   $0x0
  pushl $39
c0102c95:	6a 27                	push   $0x27
  jmp __alltraps
c0102c97:	e9 18 09 00 00       	jmp    c01035b4 <__alltraps>

c0102c9c <vector40>:
.globl vector40
vector40:
  pushl $0
c0102c9c:	6a 00                	push   $0x0
  pushl $40
c0102c9e:	6a 28                	push   $0x28
  jmp __alltraps
c0102ca0:	e9 0f 09 00 00       	jmp    c01035b4 <__alltraps>

c0102ca5 <vector41>:
.globl vector41
vector41:
  pushl $0
c0102ca5:	6a 00                	push   $0x0
  pushl $41
c0102ca7:	6a 29                	push   $0x29
  jmp __alltraps
c0102ca9:	e9 06 09 00 00       	jmp    c01035b4 <__alltraps>

c0102cae <vector42>:
.globl vector42
vector42:
  pushl $0
c0102cae:	6a 00                	push   $0x0
  pushl $42
c0102cb0:	6a 2a                	push   $0x2a
  jmp __alltraps
c0102cb2:	e9 fd 08 00 00       	jmp    c01035b4 <__alltraps>

c0102cb7 <vector43>:
.globl vector43
vector43:
  pushl $0
c0102cb7:	6a 00                	push   $0x0
  pushl $43
c0102cb9:	6a 2b                	push   $0x2b
  jmp __alltraps
c0102cbb:	e9 f4 08 00 00       	jmp    c01035b4 <__alltraps>

c0102cc0 <vector44>:
.globl vector44
vector44:
  pushl $0
c0102cc0:	6a 00                	push   $0x0
  pushl $44
c0102cc2:	6a 2c                	push   $0x2c
  jmp __alltraps
c0102cc4:	e9 eb 08 00 00       	jmp    c01035b4 <__alltraps>

c0102cc9 <vector45>:
.globl vector45
vector45:
  pushl $0
c0102cc9:	6a 00                	push   $0x0
  pushl $45
c0102ccb:	6a 2d                	push   $0x2d
  jmp __alltraps
c0102ccd:	e9 e2 08 00 00       	jmp    c01035b4 <__alltraps>

c0102cd2 <vector46>:
.globl vector46
vector46:
  pushl $0
c0102cd2:	6a 00                	push   $0x0
  pushl $46
c0102cd4:	6a 2e                	push   $0x2e
  jmp __alltraps
c0102cd6:	e9 d9 08 00 00       	jmp    c01035b4 <__alltraps>

c0102cdb <vector47>:
.globl vector47
vector47:
  pushl $0
c0102cdb:	6a 00                	push   $0x0
  pushl $47
c0102cdd:	6a 2f                	push   $0x2f
  jmp __alltraps
c0102cdf:	e9 d0 08 00 00       	jmp    c01035b4 <__alltraps>

c0102ce4 <vector48>:
.globl vector48
vector48:
  pushl $0
c0102ce4:	6a 00                	push   $0x0
  pushl $48
c0102ce6:	6a 30                	push   $0x30
  jmp __alltraps
c0102ce8:	e9 c7 08 00 00       	jmp    c01035b4 <__alltraps>

c0102ced <vector49>:
.globl vector49
vector49:
  pushl $0
c0102ced:	6a 00                	push   $0x0
  pushl $49
c0102cef:	6a 31                	push   $0x31
  jmp __alltraps
c0102cf1:	e9 be 08 00 00       	jmp    c01035b4 <__alltraps>

c0102cf6 <vector50>:
.globl vector50
vector50:
  pushl $0
c0102cf6:	6a 00                	push   $0x0
  pushl $50
c0102cf8:	6a 32                	push   $0x32
  jmp __alltraps
c0102cfa:	e9 b5 08 00 00       	jmp    c01035b4 <__alltraps>

c0102cff <vector51>:
.globl vector51
vector51:
  pushl $0
c0102cff:	6a 00                	push   $0x0
  pushl $51
c0102d01:	6a 33                	push   $0x33
  jmp __alltraps
c0102d03:	e9 ac 08 00 00       	jmp    c01035b4 <__alltraps>

c0102d08 <vector52>:
.globl vector52
vector52:
  pushl $0
c0102d08:	6a 00                	push   $0x0
  pushl $52
c0102d0a:	6a 34                	push   $0x34
  jmp __alltraps
c0102d0c:	e9 a3 08 00 00       	jmp    c01035b4 <__alltraps>

c0102d11 <vector53>:
.globl vector53
vector53:
  pushl $0
c0102d11:	6a 00                	push   $0x0
  pushl $53
c0102d13:	6a 35                	push   $0x35
  jmp __alltraps
c0102d15:	e9 9a 08 00 00       	jmp    c01035b4 <__alltraps>

c0102d1a <vector54>:
.globl vector54
vector54:
  pushl $0
c0102d1a:	6a 00                	push   $0x0
  pushl $54
c0102d1c:	6a 36                	push   $0x36
  jmp __alltraps
c0102d1e:	e9 91 08 00 00       	jmp    c01035b4 <__alltraps>

c0102d23 <vector55>:
.globl vector55
vector55:
  pushl $0
c0102d23:	6a 00                	push   $0x0
  pushl $55
c0102d25:	6a 37                	push   $0x37
  jmp __alltraps
c0102d27:	e9 88 08 00 00       	jmp    c01035b4 <__alltraps>

c0102d2c <vector56>:
.globl vector56
vector56:
  pushl $0
c0102d2c:	6a 00                	push   $0x0
  pushl $56
c0102d2e:	6a 38                	push   $0x38
  jmp __alltraps
c0102d30:	e9 7f 08 00 00       	jmp    c01035b4 <__alltraps>

c0102d35 <vector57>:
.globl vector57
vector57:
  pushl $0
c0102d35:	6a 00                	push   $0x0
  pushl $57
c0102d37:	6a 39                	push   $0x39
  jmp __alltraps
c0102d39:	e9 76 08 00 00       	jmp    c01035b4 <__alltraps>

c0102d3e <vector58>:
.globl vector58
vector58:
  pushl $0
c0102d3e:	6a 00                	push   $0x0
  pushl $58
c0102d40:	6a 3a                	push   $0x3a
  jmp __alltraps
c0102d42:	e9 6d 08 00 00       	jmp    c01035b4 <__alltraps>

c0102d47 <vector59>:
.globl vector59
vector59:
  pushl $0
c0102d47:	6a 00                	push   $0x0
  pushl $59
c0102d49:	6a 3b                	push   $0x3b
  jmp __alltraps
c0102d4b:	e9 64 08 00 00       	jmp    c01035b4 <__alltraps>

c0102d50 <vector60>:
.globl vector60
vector60:
  pushl $0
c0102d50:	6a 00                	push   $0x0
  pushl $60
c0102d52:	6a 3c                	push   $0x3c
  jmp __alltraps
c0102d54:	e9 5b 08 00 00       	jmp    c01035b4 <__alltraps>

c0102d59 <vector61>:
.globl vector61
vector61:
  pushl $0
c0102d59:	6a 00                	push   $0x0
  pushl $61
c0102d5b:	6a 3d                	push   $0x3d
  jmp __alltraps
c0102d5d:	e9 52 08 00 00       	jmp    c01035b4 <__alltraps>

c0102d62 <vector62>:
.globl vector62
vector62:
  pushl $0
c0102d62:	6a 00                	push   $0x0
  pushl $62
c0102d64:	6a 3e                	push   $0x3e
  jmp __alltraps
c0102d66:	e9 49 08 00 00       	jmp    c01035b4 <__alltraps>

c0102d6b <vector63>:
.globl vector63
vector63:
  pushl $0
c0102d6b:	6a 00                	push   $0x0
  pushl $63
c0102d6d:	6a 3f                	push   $0x3f
  jmp __alltraps
c0102d6f:	e9 40 08 00 00       	jmp    c01035b4 <__alltraps>

c0102d74 <vector64>:
.globl vector64
vector64:
  pushl $0
c0102d74:	6a 00                	push   $0x0
  pushl $64
c0102d76:	6a 40                	push   $0x40
  jmp __alltraps
c0102d78:	e9 37 08 00 00       	jmp    c01035b4 <__alltraps>

c0102d7d <vector65>:
.globl vector65
vector65:
  pushl $0
c0102d7d:	6a 00                	push   $0x0
  pushl $65
c0102d7f:	6a 41                	push   $0x41
  jmp __alltraps
c0102d81:	e9 2e 08 00 00       	jmp    c01035b4 <__alltraps>

c0102d86 <vector66>:
.globl vector66
vector66:
  pushl $0
c0102d86:	6a 00                	push   $0x0
  pushl $66
c0102d88:	6a 42                	push   $0x42
  jmp __alltraps
c0102d8a:	e9 25 08 00 00       	jmp    c01035b4 <__alltraps>

c0102d8f <vector67>:
.globl vector67
vector67:
  pushl $0
c0102d8f:	6a 00                	push   $0x0
  pushl $67
c0102d91:	6a 43                	push   $0x43
  jmp __alltraps
c0102d93:	e9 1c 08 00 00       	jmp    c01035b4 <__alltraps>

c0102d98 <vector68>:
.globl vector68
vector68:
  pushl $0
c0102d98:	6a 00                	push   $0x0
  pushl $68
c0102d9a:	6a 44                	push   $0x44
  jmp __alltraps
c0102d9c:	e9 13 08 00 00       	jmp    c01035b4 <__alltraps>

c0102da1 <vector69>:
.globl vector69
vector69:
  pushl $0
c0102da1:	6a 00                	push   $0x0
  pushl $69
c0102da3:	6a 45                	push   $0x45
  jmp __alltraps
c0102da5:	e9 0a 08 00 00       	jmp    c01035b4 <__alltraps>

c0102daa <vector70>:
.globl vector70
vector70:
  pushl $0
c0102daa:	6a 00                	push   $0x0
  pushl $70
c0102dac:	6a 46                	push   $0x46
  jmp __alltraps
c0102dae:	e9 01 08 00 00       	jmp    c01035b4 <__alltraps>

c0102db3 <vector71>:
.globl vector71
vector71:
  pushl $0
c0102db3:	6a 00                	push   $0x0
  pushl $71
c0102db5:	6a 47                	push   $0x47
  jmp __alltraps
c0102db7:	e9 f8 07 00 00       	jmp    c01035b4 <__alltraps>

c0102dbc <vector72>:
.globl vector72
vector72:
  pushl $0
c0102dbc:	6a 00                	push   $0x0
  pushl $72
c0102dbe:	6a 48                	push   $0x48
  jmp __alltraps
c0102dc0:	e9 ef 07 00 00       	jmp    c01035b4 <__alltraps>

c0102dc5 <vector73>:
.globl vector73
vector73:
  pushl $0
c0102dc5:	6a 00                	push   $0x0
  pushl $73
c0102dc7:	6a 49                	push   $0x49
  jmp __alltraps
c0102dc9:	e9 e6 07 00 00       	jmp    c01035b4 <__alltraps>

c0102dce <vector74>:
.globl vector74
vector74:
  pushl $0
c0102dce:	6a 00                	push   $0x0
  pushl $74
c0102dd0:	6a 4a                	push   $0x4a
  jmp __alltraps
c0102dd2:	e9 dd 07 00 00       	jmp    c01035b4 <__alltraps>

c0102dd7 <vector75>:
.globl vector75
vector75:
  pushl $0
c0102dd7:	6a 00                	push   $0x0
  pushl $75
c0102dd9:	6a 4b                	push   $0x4b
  jmp __alltraps
c0102ddb:	e9 d4 07 00 00       	jmp    c01035b4 <__alltraps>

c0102de0 <vector76>:
.globl vector76
vector76:
  pushl $0
c0102de0:	6a 00                	push   $0x0
  pushl $76
c0102de2:	6a 4c                	push   $0x4c
  jmp __alltraps
c0102de4:	e9 cb 07 00 00       	jmp    c01035b4 <__alltraps>

c0102de9 <vector77>:
.globl vector77
vector77:
  pushl $0
c0102de9:	6a 00                	push   $0x0
  pushl $77
c0102deb:	6a 4d                	push   $0x4d
  jmp __alltraps
c0102ded:	e9 c2 07 00 00       	jmp    c01035b4 <__alltraps>

c0102df2 <vector78>:
.globl vector78
vector78:
  pushl $0
c0102df2:	6a 00                	push   $0x0
  pushl $78
c0102df4:	6a 4e                	push   $0x4e
  jmp __alltraps
c0102df6:	e9 b9 07 00 00       	jmp    c01035b4 <__alltraps>

c0102dfb <vector79>:
.globl vector79
vector79:
  pushl $0
c0102dfb:	6a 00                	push   $0x0
  pushl $79
c0102dfd:	6a 4f                	push   $0x4f
  jmp __alltraps
c0102dff:	e9 b0 07 00 00       	jmp    c01035b4 <__alltraps>

c0102e04 <vector80>:
.globl vector80
vector80:
  pushl $0
c0102e04:	6a 00                	push   $0x0
  pushl $80
c0102e06:	6a 50                	push   $0x50
  jmp __alltraps
c0102e08:	e9 a7 07 00 00       	jmp    c01035b4 <__alltraps>

c0102e0d <vector81>:
.globl vector81
vector81:
  pushl $0
c0102e0d:	6a 00                	push   $0x0
  pushl $81
c0102e0f:	6a 51                	push   $0x51
  jmp __alltraps
c0102e11:	e9 9e 07 00 00       	jmp    c01035b4 <__alltraps>

c0102e16 <vector82>:
.globl vector82
vector82:
  pushl $0
c0102e16:	6a 00                	push   $0x0
  pushl $82
c0102e18:	6a 52                	push   $0x52
  jmp __alltraps
c0102e1a:	e9 95 07 00 00       	jmp    c01035b4 <__alltraps>

c0102e1f <vector83>:
.globl vector83
vector83:
  pushl $0
c0102e1f:	6a 00                	push   $0x0
  pushl $83
c0102e21:	6a 53                	push   $0x53
  jmp __alltraps
c0102e23:	e9 8c 07 00 00       	jmp    c01035b4 <__alltraps>

c0102e28 <vector84>:
.globl vector84
vector84:
  pushl $0
c0102e28:	6a 00                	push   $0x0
  pushl $84
c0102e2a:	6a 54                	push   $0x54
  jmp __alltraps
c0102e2c:	e9 83 07 00 00       	jmp    c01035b4 <__alltraps>

c0102e31 <vector85>:
.globl vector85
vector85:
  pushl $0
c0102e31:	6a 00                	push   $0x0
  pushl $85
c0102e33:	6a 55                	push   $0x55
  jmp __alltraps
c0102e35:	e9 7a 07 00 00       	jmp    c01035b4 <__alltraps>

c0102e3a <vector86>:
.globl vector86
vector86:
  pushl $0
c0102e3a:	6a 00                	push   $0x0
  pushl $86
c0102e3c:	6a 56                	push   $0x56
  jmp __alltraps
c0102e3e:	e9 71 07 00 00       	jmp    c01035b4 <__alltraps>

c0102e43 <vector87>:
.globl vector87
vector87:
  pushl $0
c0102e43:	6a 00                	push   $0x0
  pushl $87
c0102e45:	6a 57                	push   $0x57
  jmp __alltraps
c0102e47:	e9 68 07 00 00       	jmp    c01035b4 <__alltraps>

c0102e4c <vector88>:
.globl vector88
vector88:
  pushl $0
c0102e4c:	6a 00                	push   $0x0
  pushl $88
c0102e4e:	6a 58                	push   $0x58
  jmp __alltraps
c0102e50:	e9 5f 07 00 00       	jmp    c01035b4 <__alltraps>

c0102e55 <vector89>:
.globl vector89
vector89:
  pushl $0
c0102e55:	6a 00                	push   $0x0
  pushl $89
c0102e57:	6a 59                	push   $0x59
  jmp __alltraps
c0102e59:	e9 56 07 00 00       	jmp    c01035b4 <__alltraps>

c0102e5e <vector90>:
.globl vector90
vector90:
  pushl $0
c0102e5e:	6a 00                	push   $0x0
  pushl $90
c0102e60:	6a 5a                	push   $0x5a
  jmp __alltraps
c0102e62:	e9 4d 07 00 00       	jmp    c01035b4 <__alltraps>

c0102e67 <vector91>:
.globl vector91
vector91:
  pushl $0
c0102e67:	6a 00                	push   $0x0
  pushl $91
c0102e69:	6a 5b                	push   $0x5b
  jmp __alltraps
c0102e6b:	e9 44 07 00 00       	jmp    c01035b4 <__alltraps>

c0102e70 <vector92>:
.globl vector92
vector92:
  pushl $0
c0102e70:	6a 00                	push   $0x0
  pushl $92
c0102e72:	6a 5c                	push   $0x5c
  jmp __alltraps
c0102e74:	e9 3b 07 00 00       	jmp    c01035b4 <__alltraps>

c0102e79 <vector93>:
.globl vector93
vector93:
  pushl $0
c0102e79:	6a 00                	push   $0x0
  pushl $93
c0102e7b:	6a 5d                	push   $0x5d
  jmp __alltraps
c0102e7d:	e9 32 07 00 00       	jmp    c01035b4 <__alltraps>

c0102e82 <vector94>:
.globl vector94
vector94:
  pushl $0
c0102e82:	6a 00                	push   $0x0
  pushl $94
c0102e84:	6a 5e                	push   $0x5e
  jmp __alltraps
c0102e86:	e9 29 07 00 00       	jmp    c01035b4 <__alltraps>

c0102e8b <vector95>:
.globl vector95
vector95:
  pushl $0
c0102e8b:	6a 00                	push   $0x0
  pushl $95
c0102e8d:	6a 5f                	push   $0x5f
  jmp __alltraps
c0102e8f:	e9 20 07 00 00       	jmp    c01035b4 <__alltraps>

c0102e94 <vector96>:
.globl vector96
vector96:
  pushl $0
c0102e94:	6a 00                	push   $0x0
  pushl $96
c0102e96:	6a 60                	push   $0x60
  jmp __alltraps
c0102e98:	e9 17 07 00 00       	jmp    c01035b4 <__alltraps>

c0102e9d <vector97>:
.globl vector97
vector97:
  pushl $0
c0102e9d:	6a 00                	push   $0x0
  pushl $97
c0102e9f:	6a 61                	push   $0x61
  jmp __alltraps
c0102ea1:	e9 0e 07 00 00       	jmp    c01035b4 <__alltraps>

c0102ea6 <vector98>:
.globl vector98
vector98:
  pushl $0
c0102ea6:	6a 00                	push   $0x0
  pushl $98
c0102ea8:	6a 62                	push   $0x62
  jmp __alltraps
c0102eaa:	e9 05 07 00 00       	jmp    c01035b4 <__alltraps>

c0102eaf <vector99>:
.globl vector99
vector99:
  pushl $0
c0102eaf:	6a 00                	push   $0x0
  pushl $99
c0102eb1:	6a 63                	push   $0x63
  jmp __alltraps
c0102eb3:	e9 fc 06 00 00       	jmp    c01035b4 <__alltraps>

c0102eb8 <vector100>:
.globl vector100
vector100:
  pushl $0
c0102eb8:	6a 00                	push   $0x0
  pushl $100
c0102eba:	6a 64                	push   $0x64
  jmp __alltraps
c0102ebc:	e9 f3 06 00 00       	jmp    c01035b4 <__alltraps>

c0102ec1 <vector101>:
.globl vector101
vector101:
  pushl $0
c0102ec1:	6a 00                	push   $0x0
  pushl $101
c0102ec3:	6a 65                	push   $0x65
  jmp __alltraps
c0102ec5:	e9 ea 06 00 00       	jmp    c01035b4 <__alltraps>

c0102eca <vector102>:
.globl vector102
vector102:
  pushl $0
c0102eca:	6a 00                	push   $0x0
  pushl $102
c0102ecc:	6a 66                	push   $0x66
  jmp __alltraps
c0102ece:	e9 e1 06 00 00       	jmp    c01035b4 <__alltraps>

c0102ed3 <vector103>:
.globl vector103
vector103:
  pushl $0
c0102ed3:	6a 00                	push   $0x0
  pushl $103
c0102ed5:	6a 67                	push   $0x67
  jmp __alltraps
c0102ed7:	e9 d8 06 00 00       	jmp    c01035b4 <__alltraps>

c0102edc <vector104>:
.globl vector104
vector104:
  pushl $0
c0102edc:	6a 00                	push   $0x0
  pushl $104
c0102ede:	6a 68                	push   $0x68
  jmp __alltraps
c0102ee0:	e9 cf 06 00 00       	jmp    c01035b4 <__alltraps>

c0102ee5 <vector105>:
.globl vector105
vector105:
  pushl $0
c0102ee5:	6a 00                	push   $0x0
  pushl $105
c0102ee7:	6a 69                	push   $0x69
  jmp __alltraps
c0102ee9:	e9 c6 06 00 00       	jmp    c01035b4 <__alltraps>

c0102eee <vector106>:
.globl vector106
vector106:
  pushl $0
c0102eee:	6a 00                	push   $0x0
  pushl $106
c0102ef0:	6a 6a                	push   $0x6a
  jmp __alltraps
c0102ef2:	e9 bd 06 00 00       	jmp    c01035b4 <__alltraps>

c0102ef7 <vector107>:
.globl vector107
vector107:
  pushl $0
c0102ef7:	6a 00                	push   $0x0
  pushl $107
c0102ef9:	6a 6b                	push   $0x6b
  jmp __alltraps
c0102efb:	e9 b4 06 00 00       	jmp    c01035b4 <__alltraps>

c0102f00 <vector108>:
.globl vector108
vector108:
  pushl $0
c0102f00:	6a 00                	push   $0x0
  pushl $108
c0102f02:	6a 6c                	push   $0x6c
  jmp __alltraps
c0102f04:	e9 ab 06 00 00       	jmp    c01035b4 <__alltraps>

c0102f09 <vector109>:
.globl vector109
vector109:
  pushl $0
c0102f09:	6a 00                	push   $0x0
  pushl $109
c0102f0b:	6a 6d                	push   $0x6d
  jmp __alltraps
c0102f0d:	e9 a2 06 00 00       	jmp    c01035b4 <__alltraps>

c0102f12 <vector110>:
.globl vector110
vector110:
  pushl $0
c0102f12:	6a 00                	push   $0x0
  pushl $110
c0102f14:	6a 6e                	push   $0x6e
  jmp __alltraps
c0102f16:	e9 99 06 00 00       	jmp    c01035b4 <__alltraps>

c0102f1b <vector111>:
.globl vector111
vector111:
  pushl $0
c0102f1b:	6a 00                	push   $0x0
  pushl $111
c0102f1d:	6a 6f                	push   $0x6f
  jmp __alltraps
c0102f1f:	e9 90 06 00 00       	jmp    c01035b4 <__alltraps>

c0102f24 <vector112>:
.globl vector112
vector112:
  pushl $0
c0102f24:	6a 00                	push   $0x0
  pushl $112
c0102f26:	6a 70                	push   $0x70
  jmp __alltraps
c0102f28:	e9 87 06 00 00       	jmp    c01035b4 <__alltraps>

c0102f2d <vector113>:
.globl vector113
vector113:
  pushl $0
c0102f2d:	6a 00                	push   $0x0
  pushl $113
c0102f2f:	6a 71                	push   $0x71
  jmp __alltraps
c0102f31:	e9 7e 06 00 00       	jmp    c01035b4 <__alltraps>

c0102f36 <vector114>:
.globl vector114
vector114:
  pushl $0
c0102f36:	6a 00                	push   $0x0
  pushl $114
c0102f38:	6a 72                	push   $0x72
  jmp __alltraps
c0102f3a:	e9 75 06 00 00       	jmp    c01035b4 <__alltraps>

c0102f3f <vector115>:
.globl vector115
vector115:
  pushl $0
c0102f3f:	6a 00                	push   $0x0
  pushl $115
c0102f41:	6a 73                	push   $0x73
  jmp __alltraps
c0102f43:	e9 6c 06 00 00       	jmp    c01035b4 <__alltraps>

c0102f48 <vector116>:
.globl vector116
vector116:
  pushl $0
c0102f48:	6a 00                	push   $0x0
  pushl $116
c0102f4a:	6a 74                	push   $0x74
  jmp __alltraps
c0102f4c:	e9 63 06 00 00       	jmp    c01035b4 <__alltraps>

c0102f51 <vector117>:
.globl vector117
vector117:
  pushl $0
c0102f51:	6a 00                	push   $0x0
  pushl $117
c0102f53:	6a 75                	push   $0x75
  jmp __alltraps
c0102f55:	e9 5a 06 00 00       	jmp    c01035b4 <__alltraps>

c0102f5a <vector118>:
.globl vector118
vector118:
  pushl $0
c0102f5a:	6a 00                	push   $0x0
  pushl $118
c0102f5c:	6a 76                	push   $0x76
  jmp __alltraps
c0102f5e:	e9 51 06 00 00       	jmp    c01035b4 <__alltraps>

c0102f63 <vector119>:
.globl vector119
vector119:
  pushl $0
c0102f63:	6a 00                	push   $0x0
  pushl $119
c0102f65:	6a 77                	push   $0x77
  jmp __alltraps
c0102f67:	e9 48 06 00 00       	jmp    c01035b4 <__alltraps>

c0102f6c <vector120>:
.globl vector120
vector120:
  pushl $0
c0102f6c:	6a 00                	push   $0x0
  pushl $120
c0102f6e:	6a 78                	push   $0x78
  jmp __alltraps
c0102f70:	e9 3f 06 00 00       	jmp    c01035b4 <__alltraps>

c0102f75 <vector121>:
.globl vector121
vector121:
  pushl $0
c0102f75:	6a 00                	push   $0x0
  pushl $121
c0102f77:	6a 79                	push   $0x79
  jmp __alltraps
c0102f79:	e9 36 06 00 00       	jmp    c01035b4 <__alltraps>

c0102f7e <vector122>:
.globl vector122
vector122:
  pushl $0
c0102f7e:	6a 00                	push   $0x0
  pushl $122
c0102f80:	6a 7a                	push   $0x7a
  jmp __alltraps
c0102f82:	e9 2d 06 00 00       	jmp    c01035b4 <__alltraps>

c0102f87 <vector123>:
.globl vector123
vector123:
  pushl $0
c0102f87:	6a 00                	push   $0x0
  pushl $123
c0102f89:	6a 7b                	push   $0x7b
  jmp __alltraps
c0102f8b:	e9 24 06 00 00       	jmp    c01035b4 <__alltraps>

c0102f90 <vector124>:
.globl vector124
vector124:
  pushl $0
c0102f90:	6a 00                	push   $0x0
  pushl $124
c0102f92:	6a 7c                	push   $0x7c
  jmp __alltraps
c0102f94:	e9 1b 06 00 00       	jmp    c01035b4 <__alltraps>

c0102f99 <vector125>:
.globl vector125
vector125:
  pushl $0
c0102f99:	6a 00                	push   $0x0
  pushl $125
c0102f9b:	6a 7d                	push   $0x7d
  jmp __alltraps
c0102f9d:	e9 12 06 00 00       	jmp    c01035b4 <__alltraps>

c0102fa2 <vector126>:
.globl vector126
vector126:
  pushl $0
c0102fa2:	6a 00                	push   $0x0
  pushl $126
c0102fa4:	6a 7e                	push   $0x7e
  jmp __alltraps
c0102fa6:	e9 09 06 00 00       	jmp    c01035b4 <__alltraps>

c0102fab <vector127>:
.globl vector127
vector127:
  pushl $0
c0102fab:	6a 00                	push   $0x0
  pushl $127
c0102fad:	6a 7f                	push   $0x7f
  jmp __alltraps
c0102faf:	e9 00 06 00 00       	jmp    c01035b4 <__alltraps>

c0102fb4 <vector128>:
.globl vector128
vector128:
  pushl $0
c0102fb4:	6a 00                	push   $0x0
  pushl $128
c0102fb6:	68 80 00 00 00       	push   $0x80
  jmp __alltraps
c0102fbb:	e9 f4 05 00 00       	jmp    c01035b4 <__alltraps>

c0102fc0 <vector129>:
.globl vector129
vector129:
  pushl $0
c0102fc0:	6a 00                	push   $0x0
  pushl $129
c0102fc2:	68 81 00 00 00       	push   $0x81
  jmp __alltraps
c0102fc7:	e9 e8 05 00 00       	jmp    c01035b4 <__alltraps>

c0102fcc <vector130>:
.globl vector130
vector130:
  pushl $0
c0102fcc:	6a 00                	push   $0x0
  pushl $130
c0102fce:	68 82 00 00 00       	push   $0x82
  jmp __alltraps
c0102fd3:	e9 dc 05 00 00       	jmp    c01035b4 <__alltraps>

c0102fd8 <vector131>:
.globl vector131
vector131:
  pushl $0
c0102fd8:	6a 00                	push   $0x0
  pushl $131
c0102fda:	68 83 00 00 00       	push   $0x83
  jmp __alltraps
c0102fdf:	e9 d0 05 00 00       	jmp    c01035b4 <__alltraps>

c0102fe4 <vector132>:
.globl vector132
vector132:
  pushl $0
c0102fe4:	6a 00                	push   $0x0
  pushl $132
c0102fe6:	68 84 00 00 00       	push   $0x84
  jmp __alltraps
c0102feb:	e9 c4 05 00 00       	jmp    c01035b4 <__alltraps>

c0102ff0 <vector133>:
.globl vector133
vector133:
  pushl $0
c0102ff0:	6a 00                	push   $0x0
  pushl $133
c0102ff2:	68 85 00 00 00       	push   $0x85
  jmp __alltraps
c0102ff7:	e9 b8 05 00 00       	jmp    c01035b4 <__alltraps>

c0102ffc <vector134>:
.globl vector134
vector134:
  pushl $0
c0102ffc:	6a 00                	push   $0x0
  pushl $134
c0102ffe:	68 86 00 00 00       	push   $0x86
  jmp __alltraps
c0103003:	e9 ac 05 00 00       	jmp    c01035b4 <__alltraps>

c0103008 <vector135>:
.globl vector135
vector135:
  pushl $0
c0103008:	6a 00                	push   $0x0
  pushl $135
c010300a:	68 87 00 00 00       	push   $0x87
  jmp __alltraps
c010300f:	e9 a0 05 00 00       	jmp    c01035b4 <__alltraps>

c0103014 <vector136>:
.globl vector136
vector136:
  pushl $0
c0103014:	6a 00                	push   $0x0
  pushl $136
c0103016:	68 88 00 00 00       	push   $0x88
  jmp __alltraps
c010301b:	e9 94 05 00 00       	jmp    c01035b4 <__alltraps>

c0103020 <vector137>:
.globl vector137
vector137:
  pushl $0
c0103020:	6a 00                	push   $0x0
  pushl $137
c0103022:	68 89 00 00 00       	push   $0x89
  jmp __alltraps
c0103027:	e9 88 05 00 00       	jmp    c01035b4 <__alltraps>

c010302c <vector138>:
.globl vector138
vector138:
  pushl $0
c010302c:	6a 00                	push   $0x0
  pushl $138
c010302e:	68 8a 00 00 00       	push   $0x8a
  jmp __alltraps
c0103033:	e9 7c 05 00 00       	jmp    c01035b4 <__alltraps>

c0103038 <vector139>:
.globl vector139
vector139:
  pushl $0
c0103038:	6a 00                	push   $0x0
  pushl $139
c010303a:	68 8b 00 00 00       	push   $0x8b
  jmp __alltraps
c010303f:	e9 70 05 00 00       	jmp    c01035b4 <__alltraps>

c0103044 <vector140>:
.globl vector140
vector140:
  pushl $0
c0103044:	6a 00                	push   $0x0
  pushl $140
c0103046:	68 8c 00 00 00       	push   $0x8c
  jmp __alltraps
c010304b:	e9 64 05 00 00       	jmp    c01035b4 <__alltraps>

c0103050 <vector141>:
.globl vector141
vector141:
  pushl $0
c0103050:	6a 00                	push   $0x0
  pushl $141
c0103052:	68 8d 00 00 00       	push   $0x8d
  jmp __alltraps
c0103057:	e9 58 05 00 00       	jmp    c01035b4 <__alltraps>

c010305c <vector142>:
.globl vector142
vector142:
  pushl $0
c010305c:	6a 00                	push   $0x0
  pushl $142
c010305e:	68 8e 00 00 00       	push   $0x8e
  jmp __alltraps
c0103063:	e9 4c 05 00 00       	jmp    c01035b4 <__alltraps>

c0103068 <vector143>:
.globl vector143
vector143:
  pushl $0
c0103068:	6a 00                	push   $0x0
  pushl $143
c010306a:	68 8f 00 00 00       	push   $0x8f
  jmp __alltraps
c010306f:	e9 40 05 00 00       	jmp    c01035b4 <__alltraps>

c0103074 <vector144>:
.globl vector144
vector144:
  pushl $0
c0103074:	6a 00                	push   $0x0
  pushl $144
c0103076:	68 90 00 00 00       	push   $0x90
  jmp __alltraps
c010307b:	e9 34 05 00 00       	jmp    c01035b4 <__alltraps>

c0103080 <vector145>:
.globl vector145
vector145:
  pushl $0
c0103080:	6a 00                	push   $0x0
  pushl $145
c0103082:	68 91 00 00 00       	push   $0x91
  jmp __alltraps
c0103087:	e9 28 05 00 00       	jmp    c01035b4 <__alltraps>

c010308c <vector146>:
.globl vector146
vector146:
  pushl $0
c010308c:	6a 00                	push   $0x0
  pushl $146
c010308e:	68 92 00 00 00       	push   $0x92
  jmp __alltraps
c0103093:	e9 1c 05 00 00       	jmp    c01035b4 <__alltraps>

c0103098 <vector147>:
.globl vector147
vector147:
  pushl $0
c0103098:	6a 00                	push   $0x0
  pushl $147
c010309a:	68 93 00 00 00       	push   $0x93
  jmp __alltraps
c010309f:	e9 10 05 00 00       	jmp    c01035b4 <__alltraps>

c01030a4 <vector148>:
.globl vector148
vector148:
  pushl $0
c01030a4:	6a 00                	push   $0x0
  pushl $148
c01030a6:	68 94 00 00 00       	push   $0x94
  jmp __alltraps
c01030ab:	e9 04 05 00 00       	jmp    c01035b4 <__alltraps>

c01030b0 <vector149>:
.globl vector149
vector149:
  pushl $0
c01030b0:	6a 00                	push   $0x0
  pushl $149
c01030b2:	68 95 00 00 00       	push   $0x95
  jmp __alltraps
c01030b7:	e9 f8 04 00 00       	jmp    c01035b4 <__alltraps>

c01030bc <vector150>:
.globl vector150
vector150:
  pushl $0
c01030bc:	6a 00                	push   $0x0
  pushl $150
c01030be:	68 96 00 00 00       	push   $0x96
  jmp __alltraps
c01030c3:	e9 ec 04 00 00       	jmp    c01035b4 <__alltraps>

c01030c8 <vector151>:
.globl vector151
vector151:
  pushl $0
c01030c8:	6a 00                	push   $0x0
  pushl $151
c01030ca:	68 97 00 00 00       	push   $0x97
  jmp __alltraps
c01030cf:	e9 e0 04 00 00       	jmp    c01035b4 <__alltraps>

c01030d4 <vector152>:
.globl vector152
vector152:
  pushl $0
c01030d4:	6a 00                	push   $0x0
  pushl $152
c01030d6:	68 98 00 00 00       	push   $0x98
  jmp __alltraps
c01030db:	e9 d4 04 00 00       	jmp    c01035b4 <__alltraps>

c01030e0 <vector153>:
.globl vector153
vector153:
  pushl $0
c01030e0:	6a 00                	push   $0x0
  pushl $153
c01030e2:	68 99 00 00 00       	push   $0x99
  jmp __alltraps
c01030e7:	e9 c8 04 00 00       	jmp    c01035b4 <__alltraps>

c01030ec <vector154>:
.globl vector154
vector154:
  pushl $0
c01030ec:	6a 00                	push   $0x0
  pushl $154
c01030ee:	68 9a 00 00 00       	push   $0x9a
  jmp __alltraps
c01030f3:	e9 bc 04 00 00       	jmp    c01035b4 <__alltraps>

c01030f8 <vector155>:
.globl vector155
vector155:
  pushl $0
c01030f8:	6a 00                	push   $0x0
  pushl $155
c01030fa:	68 9b 00 00 00       	push   $0x9b
  jmp __alltraps
c01030ff:	e9 b0 04 00 00       	jmp    c01035b4 <__alltraps>

c0103104 <vector156>:
.globl vector156
vector156:
  pushl $0
c0103104:	6a 00                	push   $0x0
  pushl $156
c0103106:	68 9c 00 00 00       	push   $0x9c
  jmp __alltraps
c010310b:	e9 a4 04 00 00       	jmp    c01035b4 <__alltraps>

c0103110 <vector157>:
.globl vector157
vector157:
  pushl $0
c0103110:	6a 00                	push   $0x0
  pushl $157
c0103112:	68 9d 00 00 00       	push   $0x9d
  jmp __alltraps
c0103117:	e9 98 04 00 00       	jmp    c01035b4 <__alltraps>

c010311c <vector158>:
.globl vector158
vector158:
  pushl $0
c010311c:	6a 00                	push   $0x0
  pushl $158
c010311e:	68 9e 00 00 00       	push   $0x9e
  jmp __alltraps
c0103123:	e9 8c 04 00 00       	jmp    c01035b4 <__alltraps>

c0103128 <vector159>:
.globl vector159
vector159:
  pushl $0
c0103128:	6a 00                	push   $0x0
  pushl $159
c010312a:	68 9f 00 00 00       	push   $0x9f
  jmp __alltraps
c010312f:	e9 80 04 00 00       	jmp    c01035b4 <__alltraps>

c0103134 <vector160>:
.globl vector160
vector160:
  pushl $0
c0103134:	6a 00                	push   $0x0
  pushl $160
c0103136:	68 a0 00 00 00       	push   $0xa0
  jmp __alltraps
c010313b:	e9 74 04 00 00       	jmp    c01035b4 <__alltraps>

c0103140 <vector161>:
.globl vector161
vector161:
  pushl $0
c0103140:	6a 00                	push   $0x0
  pushl $161
c0103142:	68 a1 00 00 00       	push   $0xa1
  jmp __alltraps
c0103147:	e9 68 04 00 00       	jmp    c01035b4 <__alltraps>

c010314c <vector162>:
.globl vector162
vector162:
  pushl $0
c010314c:	6a 00                	push   $0x0
  pushl $162
c010314e:	68 a2 00 00 00       	push   $0xa2
  jmp __alltraps
c0103153:	e9 5c 04 00 00       	jmp    c01035b4 <__alltraps>

c0103158 <vector163>:
.globl vector163
vector163:
  pushl $0
c0103158:	6a 00                	push   $0x0
  pushl $163
c010315a:	68 a3 00 00 00       	push   $0xa3
  jmp __alltraps
c010315f:	e9 50 04 00 00       	jmp    c01035b4 <__alltraps>

c0103164 <vector164>:
.globl vector164
vector164:
  pushl $0
c0103164:	6a 00                	push   $0x0
  pushl $164
c0103166:	68 a4 00 00 00       	push   $0xa4
  jmp __alltraps
c010316b:	e9 44 04 00 00       	jmp    c01035b4 <__alltraps>

c0103170 <vector165>:
.globl vector165
vector165:
  pushl $0
c0103170:	6a 00                	push   $0x0
  pushl $165
c0103172:	68 a5 00 00 00       	push   $0xa5
  jmp __alltraps
c0103177:	e9 38 04 00 00       	jmp    c01035b4 <__alltraps>

c010317c <vector166>:
.globl vector166
vector166:
  pushl $0
c010317c:	6a 00                	push   $0x0
  pushl $166
c010317e:	68 a6 00 00 00       	push   $0xa6
  jmp __alltraps
c0103183:	e9 2c 04 00 00       	jmp    c01035b4 <__alltraps>

c0103188 <vector167>:
.globl vector167
vector167:
  pushl $0
c0103188:	6a 00                	push   $0x0
  pushl $167
c010318a:	68 a7 00 00 00       	push   $0xa7
  jmp __alltraps
c010318f:	e9 20 04 00 00       	jmp    c01035b4 <__alltraps>

c0103194 <vector168>:
.globl vector168
vector168:
  pushl $0
c0103194:	6a 00                	push   $0x0
  pushl $168
c0103196:	68 a8 00 00 00       	push   $0xa8
  jmp __alltraps
c010319b:	e9 14 04 00 00       	jmp    c01035b4 <__alltraps>

c01031a0 <vector169>:
.globl vector169
vector169:
  pushl $0
c01031a0:	6a 00                	push   $0x0
  pushl $169
c01031a2:	68 a9 00 00 00       	push   $0xa9
  jmp __alltraps
c01031a7:	e9 08 04 00 00       	jmp    c01035b4 <__alltraps>

c01031ac <vector170>:
.globl vector170
vector170:
  pushl $0
c01031ac:	6a 00                	push   $0x0
  pushl $170
c01031ae:	68 aa 00 00 00       	push   $0xaa
  jmp __alltraps
c01031b3:	e9 fc 03 00 00       	jmp    c01035b4 <__alltraps>

c01031b8 <vector171>:
.globl vector171
vector171:
  pushl $0
c01031b8:	6a 00                	push   $0x0
  pushl $171
c01031ba:	68 ab 00 00 00       	push   $0xab
  jmp __alltraps
c01031bf:	e9 f0 03 00 00       	jmp    c01035b4 <__alltraps>

c01031c4 <vector172>:
.globl vector172
vector172:
  pushl $0
c01031c4:	6a 00                	push   $0x0
  pushl $172
c01031c6:	68 ac 00 00 00       	push   $0xac
  jmp __alltraps
c01031cb:	e9 e4 03 00 00       	jmp    c01035b4 <__alltraps>

c01031d0 <vector173>:
.globl vector173
vector173:
  pushl $0
c01031d0:	6a 00                	push   $0x0
  pushl $173
c01031d2:	68 ad 00 00 00       	push   $0xad
  jmp __alltraps
c01031d7:	e9 d8 03 00 00       	jmp    c01035b4 <__alltraps>

c01031dc <vector174>:
.globl vector174
vector174:
  pushl $0
c01031dc:	6a 00                	push   $0x0
  pushl $174
c01031de:	68 ae 00 00 00       	push   $0xae
  jmp __alltraps
c01031e3:	e9 cc 03 00 00       	jmp    c01035b4 <__alltraps>

c01031e8 <vector175>:
.globl vector175
vector175:
  pushl $0
c01031e8:	6a 00                	push   $0x0
  pushl $175
c01031ea:	68 af 00 00 00       	push   $0xaf
  jmp __alltraps
c01031ef:	e9 c0 03 00 00       	jmp    c01035b4 <__alltraps>

c01031f4 <vector176>:
.globl vector176
vector176:
  pushl $0
c01031f4:	6a 00                	push   $0x0
  pushl $176
c01031f6:	68 b0 00 00 00       	push   $0xb0
  jmp __alltraps
c01031fb:	e9 b4 03 00 00       	jmp    c01035b4 <__alltraps>

c0103200 <vector177>:
.globl vector177
vector177:
  pushl $0
c0103200:	6a 00                	push   $0x0
  pushl $177
c0103202:	68 b1 00 00 00       	push   $0xb1
  jmp __alltraps
c0103207:	e9 a8 03 00 00       	jmp    c01035b4 <__alltraps>

c010320c <vector178>:
.globl vector178
vector178:
  pushl $0
c010320c:	6a 00                	push   $0x0
  pushl $178
c010320e:	68 b2 00 00 00       	push   $0xb2
  jmp __alltraps
c0103213:	e9 9c 03 00 00       	jmp    c01035b4 <__alltraps>

c0103218 <vector179>:
.globl vector179
vector179:
  pushl $0
c0103218:	6a 00                	push   $0x0
  pushl $179
c010321a:	68 b3 00 00 00       	push   $0xb3
  jmp __alltraps
c010321f:	e9 90 03 00 00       	jmp    c01035b4 <__alltraps>

c0103224 <vector180>:
.globl vector180
vector180:
  pushl $0
c0103224:	6a 00                	push   $0x0
  pushl $180
c0103226:	68 b4 00 00 00       	push   $0xb4
  jmp __alltraps
c010322b:	e9 84 03 00 00       	jmp    c01035b4 <__alltraps>

c0103230 <vector181>:
.globl vector181
vector181:
  pushl $0
c0103230:	6a 00                	push   $0x0
  pushl $181
c0103232:	68 b5 00 00 00       	push   $0xb5
  jmp __alltraps
c0103237:	e9 78 03 00 00       	jmp    c01035b4 <__alltraps>

c010323c <vector182>:
.globl vector182
vector182:
  pushl $0
c010323c:	6a 00                	push   $0x0
  pushl $182
c010323e:	68 b6 00 00 00       	push   $0xb6
  jmp __alltraps
c0103243:	e9 6c 03 00 00       	jmp    c01035b4 <__alltraps>

c0103248 <vector183>:
.globl vector183
vector183:
  pushl $0
c0103248:	6a 00                	push   $0x0
  pushl $183
c010324a:	68 b7 00 00 00       	push   $0xb7
  jmp __alltraps
c010324f:	e9 60 03 00 00       	jmp    c01035b4 <__alltraps>

c0103254 <vector184>:
.globl vector184
vector184:
  pushl $0
c0103254:	6a 00                	push   $0x0
  pushl $184
c0103256:	68 b8 00 00 00       	push   $0xb8
  jmp __alltraps
c010325b:	e9 54 03 00 00       	jmp    c01035b4 <__alltraps>

c0103260 <vector185>:
.globl vector185
vector185:
  pushl $0
c0103260:	6a 00                	push   $0x0
  pushl $185
c0103262:	68 b9 00 00 00       	push   $0xb9
  jmp __alltraps
c0103267:	e9 48 03 00 00       	jmp    c01035b4 <__alltraps>

c010326c <vector186>:
.globl vector186
vector186:
  pushl $0
c010326c:	6a 00                	push   $0x0
  pushl $186
c010326e:	68 ba 00 00 00       	push   $0xba
  jmp __alltraps
c0103273:	e9 3c 03 00 00       	jmp    c01035b4 <__alltraps>

c0103278 <vector187>:
.globl vector187
vector187:
  pushl $0
c0103278:	6a 00                	push   $0x0
  pushl $187
c010327a:	68 bb 00 00 00       	push   $0xbb
  jmp __alltraps
c010327f:	e9 30 03 00 00       	jmp    c01035b4 <__alltraps>

c0103284 <vector188>:
.globl vector188
vector188:
  pushl $0
c0103284:	6a 00                	push   $0x0
  pushl $188
c0103286:	68 bc 00 00 00       	push   $0xbc
  jmp __alltraps
c010328b:	e9 24 03 00 00       	jmp    c01035b4 <__alltraps>

c0103290 <vector189>:
.globl vector189
vector189:
  pushl $0
c0103290:	6a 00                	push   $0x0
  pushl $189
c0103292:	68 bd 00 00 00       	push   $0xbd
  jmp __alltraps
c0103297:	e9 18 03 00 00       	jmp    c01035b4 <__alltraps>

c010329c <vector190>:
.globl vector190
vector190:
  pushl $0
c010329c:	6a 00                	push   $0x0
  pushl $190
c010329e:	68 be 00 00 00       	push   $0xbe
  jmp __alltraps
c01032a3:	e9 0c 03 00 00       	jmp    c01035b4 <__alltraps>

c01032a8 <vector191>:
.globl vector191
vector191:
  pushl $0
c01032a8:	6a 00                	push   $0x0
  pushl $191
c01032aa:	68 bf 00 00 00       	push   $0xbf
  jmp __alltraps
c01032af:	e9 00 03 00 00       	jmp    c01035b4 <__alltraps>

c01032b4 <vector192>:
.globl vector192
vector192:
  pushl $0
c01032b4:	6a 00                	push   $0x0
  pushl $192
c01032b6:	68 c0 00 00 00       	push   $0xc0
  jmp __alltraps
c01032bb:	e9 f4 02 00 00       	jmp    c01035b4 <__alltraps>

c01032c0 <vector193>:
.globl vector193
vector193:
  pushl $0
c01032c0:	6a 00                	push   $0x0
  pushl $193
c01032c2:	68 c1 00 00 00       	push   $0xc1
  jmp __alltraps
c01032c7:	e9 e8 02 00 00       	jmp    c01035b4 <__alltraps>

c01032cc <vector194>:
.globl vector194
vector194:
  pushl $0
c01032cc:	6a 00                	push   $0x0
  pushl $194
c01032ce:	68 c2 00 00 00       	push   $0xc2
  jmp __alltraps
c01032d3:	e9 dc 02 00 00       	jmp    c01035b4 <__alltraps>

c01032d8 <vector195>:
.globl vector195
vector195:
  pushl $0
c01032d8:	6a 00                	push   $0x0
  pushl $195
c01032da:	68 c3 00 00 00       	push   $0xc3
  jmp __alltraps
c01032df:	e9 d0 02 00 00       	jmp    c01035b4 <__alltraps>

c01032e4 <vector196>:
.globl vector196
vector196:
  pushl $0
c01032e4:	6a 00                	push   $0x0
  pushl $196
c01032e6:	68 c4 00 00 00       	push   $0xc4
  jmp __alltraps
c01032eb:	e9 c4 02 00 00       	jmp    c01035b4 <__alltraps>

c01032f0 <vector197>:
.globl vector197
vector197:
  pushl $0
c01032f0:	6a 00                	push   $0x0
  pushl $197
c01032f2:	68 c5 00 00 00       	push   $0xc5
  jmp __alltraps
c01032f7:	e9 b8 02 00 00       	jmp    c01035b4 <__alltraps>

c01032fc <vector198>:
.globl vector198
vector198:
  pushl $0
c01032fc:	6a 00                	push   $0x0
  pushl $198
c01032fe:	68 c6 00 00 00       	push   $0xc6
  jmp __alltraps
c0103303:	e9 ac 02 00 00       	jmp    c01035b4 <__alltraps>

c0103308 <vector199>:
.globl vector199
vector199:
  pushl $0
c0103308:	6a 00                	push   $0x0
  pushl $199
c010330a:	68 c7 00 00 00       	push   $0xc7
  jmp __alltraps
c010330f:	e9 a0 02 00 00       	jmp    c01035b4 <__alltraps>

c0103314 <vector200>:
.globl vector200
vector200:
  pushl $0
c0103314:	6a 00                	push   $0x0
  pushl $200
c0103316:	68 c8 00 00 00       	push   $0xc8
  jmp __alltraps
c010331b:	e9 94 02 00 00       	jmp    c01035b4 <__alltraps>

c0103320 <vector201>:
.globl vector201
vector201:
  pushl $0
c0103320:	6a 00                	push   $0x0
  pushl $201
c0103322:	68 c9 00 00 00       	push   $0xc9
  jmp __alltraps
c0103327:	e9 88 02 00 00       	jmp    c01035b4 <__alltraps>

c010332c <vector202>:
.globl vector202
vector202:
  pushl $0
c010332c:	6a 00                	push   $0x0
  pushl $202
c010332e:	68 ca 00 00 00       	push   $0xca
  jmp __alltraps
c0103333:	e9 7c 02 00 00       	jmp    c01035b4 <__alltraps>

c0103338 <vector203>:
.globl vector203
vector203:
  pushl $0
c0103338:	6a 00                	push   $0x0
  pushl $203
c010333a:	68 cb 00 00 00       	push   $0xcb
  jmp __alltraps
c010333f:	e9 70 02 00 00       	jmp    c01035b4 <__alltraps>

c0103344 <vector204>:
.globl vector204
vector204:
  pushl $0
c0103344:	6a 00                	push   $0x0
  pushl $204
c0103346:	68 cc 00 00 00       	push   $0xcc
  jmp __alltraps
c010334b:	e9 64 02 00 00       	jmp    c01035b4 <__alltraps>

c0103350 <vector205>:
.globl vector205
vector205:
  pushl $0
c0103350:	6a 00                	push   $0x0
  pushl $205
c0103352:	68 cd 00 00 00       	push   $0xcd
  jmp __alltraps
c0103357:	e9 58 02 00 00       	jmp    c01035b4 <__alltraps>

c010335c <vector206>:
.globl vector206
vector206:
  pushl $0
c010335c:	6a 00                	push   $0x0
  pushl $206
c010335e:	68 ce 00 00 00       	push   $0xce
  jmp __alltraps
c0103363:	e9 4c 02 00 00       	jmp    c01035b4 <__alltraps>

c0103368 <vector207>:
.globl vector207
vector207:
  pushl $0
c0103368:	6a 00                	push   $0x0
  pushl $207
c010336a:	68 cf 00 00 00       	push   $0xcf
  jmp __alltraps
c010336f:	e9 40 02 00 00       	jmp    c01035b4 <__alltraps>

c0103374 <vector208>:
.globl vector208
vector208:
  pushl $0
c0103374:	6a 00                	push   $0x0
  pushl $208
c0103376:	68 d0 00 00 00       	push   $0xd0
  jmp __alltraps
c010337b:	e9 34 02 00 00       	jmp    c01035b4 <__alltraps>

c0103380 <vector209>:
.globl vector209
vector209:
  pushl $0
c0103380:	6a 00                	push   $0x0
  pushl $209
c0103382:	68 d1 00 00 00       	push   $0xd1
  jmp __alltraps
c0103387:	e9 28 02 00 00       	jmp    c01035b4 <__alltraps>

c010338c <vector210>:
.globl vector210
vector210:
  pushl $0
c010338c:	6a 00                	push   $0x0
  pushl $210
c010338e:	68 d2 00 00 00       	push   $0xd2
  jmp __alltraps
c0103393:	e9 1c 02 00 00       	jmp    c01035b4 <__alltraps>

c0103398 <vector211>:
.globl vector211
vector211:
  pushl $0
c0103398:	6a 00                	push   $0x0
  pushl $211
c010339a:	68 d3 00 00 00       	push   $0xd3
  jmp __alltraps
c010339f:	e9 10 02 00 00       	jmp    c01035b4 <__alltraps>

c01033a4 <vector212>:
.globl vector212
vector212:
  pushl $0
c01033a4:	6a 00                	push   $0x0
  pushl $212
c01033a6:	68 d4 00 00 00       	push   $0xd4
  jmp __alltraps
c01033ab:	e9 04 02 00 00       	jmp    c01035b4 <__alltraps>

c01033b0 <vector213>:
.globl vector213
vector213:
  pushl $0
c01033b0:	6a 00                	push   $0x0
  pushl $213
c01033b2:	68 d5 00 00 00       	push   $0xd5
  jmp __alltraps
c01033b7:	e9 f8 01 00 00       	jmp    c01035b4 <__alltraps>

c01033bc <vector214>:
.globl vector214
vector214:
  pushl $0
c01033bc:	6a 00                	push   $0x0
  pushl $214
c01033be:	68 d6 00 00 00       	push   $0xd6
  jmp __alltraps
c01033c3:	e9 ec 01 00 00       	jmp    c01035b4 <__alltraps>

c01033c8 <vector215>:
.globl vector215
vector215:
  pushl $0
c01033c8:	6a 00                	push   $0x0
  pushl $215
c01033ca:	68 d7 00 00 00       	push   $0xd7
  jmp __alltraps
c01033cf:	e9 e0 01 00 00       	jmp    c01035b4 <__alltraps>

c01033d4 <vector216>:
.globl vector216
vector216:
  pushl $0
c01033d4:	6a 00                	push   $0x0
  pushl $216
c01033d6:	68 d8 00 00 00       	push   $0xd8
  jmp __alltraps
c01033db:	e9 d4 01 00 00       	jmp    c01035b4 <__alltraps>

c01033e0 <vector217>:
.globl vector217
vector217:
  pushl $0
c01033e0:	6a 00                	push   $0x0
  pushl $217
c01033e2:	68 d9 00 00 00       	push   $0xd9
  jmp __alltraps
c01033e7:	e9 c8 01 00 00       	jmp    c01035b4 <__alltraps>

c01033ec <vector218>:
.globl vector218
vector218:
  pushl $0
c01033ec:	6a 00                	push   $0x0
  pushl $218
c01033ee:	68 da 00 00 00       	push   $0xda
  jmp __alltraps
c01033f3:	e9 bc 01 00 00       	jmp    c01035b4 <__alltraps>

c01033f8 <vector219>:
.globl vector219
vector219:
  pushl $0
c01033f8:	6a 00                	push   $0x0
  pushl $219
c01033fa:	68 db 00 00 00       	push   $0xdb
  jmp __alltraps
c01033ff:	e9 b0 01 00 00       	jmp    c01035b4 <__alltraps>

c0103404 <vector220>:
.globl vector220
vector220:
  pushl $0
c0103404:	6a 00                	push   $0x0
  pushl $220
c0103406:	68 dc 00 00 00       	push   $0xdc
  jmp __alltraps
c010340b:	e9 a4 01 00 00       	jmp    c01035b4 <__alltraps>

c0103410 <vector221>:
.globl vector221
vector221:
  pushl $0
c0103410:	6a 00                	push   $0x0
  pushl $221
c0103412:	68 dd 00 00 00       	push   $0xdd
  jmp __alltraps
c0103417:	e9 98 01 00 00       	jmp    c01035b4 <__alltraps>

c010341c <vector222>:
.globl vector222
vector222:
  pushl $0
c010341c:	6a 00                	push   $0x0
  pushl $222
c010341e:	68 de 00 00 00       	push   $0xde
  jmp __alltraps
c0103423:	e9 8c 01 00 00       	jmp    c01035b4 <__alltraps>

c0103428 <vector223>:
.globl vector223
vector223:
  pushl $0
c0103428:	6a 00                	push   $0x0
  pushl $223
c010342a:	68 df 00 00 00       	push   $0xdf
  jmp __alltraps
c010342f:	e9 80 01 00 00       	jmp    c01035b4 <__alltraps>

c0103434 <vector224>:
.globl vector224
vector224:
  pushl $0
c0103434:	6a 00                	push   $0x0
  pushl $224
c0103436:	68 e0 00 00 00       	push   $0xe0
  jmp __alltraps
c010343b:	e9 74 01 00 00       	jmp    c01035b4 <__alltraps>

c0103440 <vector225>:
.globl vector225
vector225:
  pushl $0
c0103440:	6a 00                	push   $0x0
  pushl $225
c0103442:	68 e1 00 00 00       	push   $0xe1
  jmp __alltraps
c0103447:	e9 68 01 00 00       	jmp    c01035b4 <__alltraps>

c010344c <vector226>:
.globl vector226
vector226:
  pushl $0
c010344c:	6a 00                	push   $0x0
  pushl $226
c010344e:	68 e2 00 00 00       	push   $0xe2
  jmp __alltraps
c0103453:	e9 5c 01 00 00       	jmp    c01035b4 <__alltraps>

c0103458 <vector227>:
.globl vector227
vector227:
  pushl $0
c0103458:	6a 00                	push   $0x0
  pushl $227
c010345a:	68 e3 00 00 00       	push   $0xe3
  jmp __alltraps
c010345f:	e9 50 01 00 00       	jmp    c01035b4 <__alltraps>

c0103464 <vector228>:
.globl vector228
vector228:
  pushl $0
c0103464:	6a 00                	push   $0x0
  pushl $228
c0103466:	68 e4 00 00 00       	push   $0xe4
  jmp __alltraps
c010346b:	e9 44 01 00 00       	jmp    c01035b4 <__alltraps>

c0103470 <vector229>:
.globl vector229
vector229:
  pushl $0
c0103470:	6a 00                	push   $0x0
  pushl $229
c0103472:	68 e5 00 00 00       	push   $0xe5
  jmp __alltraps
c0103477:	e9 38 01 00 00       	jmp    c01035b4 <__alltraps>

c010347c <vector230>:
.globl vector230
vector230:
  pushl $0
c010347c:	6a 00                	push   $0x0
  pushl $230
c010347e:	68 e6 00 00 00       	push   $0xe6
  jmp __alltraps
c0103483:	e9 2c 01 00 00       	jmp    c01035b4 <__alltraps>

c0103488 <vector231>:
.globl vector231
vector231:
  pushl $0
c0103488:	6a 00                	push   $0x0
  pushl $231
c010348a:	68 e7 00 00 00       	push   $0xe7
  jmp __alltraps
c010348f:	e9 20 01 00 00       	jmp    c01035b4 <__alltraps>

c0103494 <vector232>:
.globl vector232
vector232:
  pushl $0
c0103494:	6a 00                	push   $0x0
  pushl $232
c0103496:	68 e8 00 00 00       	push   $0xe8
  jmp __alltraps
c010349b:	e9 14 01 00 00       	jmp    c01035b4 <__alltraps>

c01034a0 <vector233>:
.globl vector233
vector233:
  pushl $0
c01034a0:	6a 00                	push   $0x0
  pushl $233
c01034a2:	68 e9 00 00 00       	push   $0xe9
  jmp __alltraps
c01034a7:	e9 08 01 00 00       	jmp    c01035b4 <__alltraps>

c01034ac <vector234>:
.globl vector234
vector234:
  pushl $0
c01034ac:	6a 00                	push   $0x0
  pushl $234
c01034ae:	68 ea 00 00 00       	push   $0xea
  jmp __alltraps
c01034b3:	e9 fc 00 00 00       	jmp    c01035b4 <__alltraps>

c01034b8 <vector235>:
.globl vector235
vector235:
  pushl $0
c01034b8:	6a 00                	push   $0x0
  pushl $235
c01034ba:	68 eb 00 00 00       	push   $0xeb
  jmp __alltraps
c01034bf:	e9 f0 00 00 00       	jmp    c01035b4 <__alltraps>

c01034c4 <vector236>:
.globl vector236
vector236:
  pushl $0
c01034c4:	6a 00                	push   $0x0
  pushl $236
c01034c6:	68 ec 00 00 00       	push   $0xec
  jmp __alltraps
c01034cb:	e9 e4 00 00 00       	jmp    c01035b4 <__alltraps>

c01034d0 <vector237>:
.globl vector237
vector237:
  pushl $0
c01034d0:	6a 00                	push   $0x0
  pushl $237
c01034d2:	68 ed 00 00 00       	push   $0xed
  jmp __alltraps
c01034d7:	e9 d8 00 00 00       	jmp    c01035b4 <__alltraps>

c01034dc <vector238>:
.globl vector238
vector238:
  pushl $0
c01034dc:	6a 00                	push   $0x0
  pushl $238
c01034de:	68 ee 00 00 00       	push   $0xee
  jmp __alltraps
c01034e3:	e9 cc 00 00 00       	jmp    c01035b4 <__alltraps>

c01034e8 <vector239>:
.globl vector239
vector239:
  pushl $0
c01034e8:	6a 00                	push   $0x0
  pushl $239
c01034ea:	68 ef 00 00 00       	push   $0xef
  jmp __alltraps
c01034ef:	e9 c0 00 00 00       	jmp    c01035b4 <__alltraps>

c01034f4 <vector240>:
.globl vector240
vector240:
  pushl $0
c01034f4:	6a 00                	push   $0x0
  pushl $240
c01034f6:	68 f0 00 00 00       	push   $0xf0
  jmp __alltraps
c01034fb:	e9 b4 00 00 00       	jmp    c01035b4 <__alltraps>

c0103500 <vector241>:
.globl vector241
vector241:
  pushl $0
c0103500:	6a 00                	push   $0x0
  pushl $241
c0103502:	68 f1 00 00 00       	push   $0xf1
  jmp __alltraps
c0103507:	e9 a8 00 00 00       	jmp    c01035b4 <__alltraps>

c010350c <vector242>:
.globl vector242
vector242:
  pushl $0
c010350c:	6a 00                	push   $0x0
  pushl $242
c010350e:	68 f2 00 00 00       	push   $0xf2
  jmp __alltraps
c0103513:	e9 9c 00 00 00       	jmp    c01035b4 <__alltraps>

c0103518 <vector243>:
.globl vector243
vector243:
  pushl $0
c0103518:	6a 00                	push   $0x0
  pushl $243
c010351a:	68 f3 00 00 00       	push   $0xf3
  jmp __alltraps
c010351f:	e9 90 00 00 00       	jmp    c01035b4 <__alltraps>

c0103524 <vector244>:
.globl vector244
vector244:
  pushl $0
c0103524:	6a 00                	push   $0x0
  pushl $244
c0103526:	68 f4 00 00 00       	push   $0xf4
  jmp __alltraps
c010352b:	e9 84 00 00 00       	jmp    c01035b4 <__alltraps>

c0103530 <vector245>:
.globl vector245
vector245:
  pushl $0
c0103530:	6a 00                	push   $0x0
  pushl $245
c0103532:	68 f5 00 00 00       	push   $0xf5
  jmp __alltraps
c0103537:	e9 78 00 00 00       	jmp    c01035b4 <__alltraps>

c010353c <vector246>:
.globl vector246
vector246:
  pushl $0
c010353c:	6a 00                	push   $0x0
  pushl $246
c010353e:	68 f6 00 00 00       	push   $0xf6
  jmp __alltraps
c0103543:	e9 6c 00 00 00       	jmp    c01035b4 <__alltraps>

c0103548 <vector247>:
.globl vector247
vector247:
  pushl $0
c0103548:	6a 00                	push   $0x0
  pushl $247
c010354a:	68 f7 00 00 00       	push   $0xf7
  jmp __alltraps
c010354f:	e9 60 00 00 00       	jmp    c01035b4 <__alltraps>

c0103554 <vector248>:
.globl vector248
vector248:
  pushl $0
c0103554:	6a 00                	push   $0x0
  pushl $248
c0103556:	68 f8 00 00 00       	push   $0xf8
  jmp __alltraps
c010355b:	e9 54 00 00 00       	jmp    c01035b4 <__alltraps>

c0103560 <vector249>:
.globl vector249
vector249:
  pushl $0
c0103560:	6a 00                	push   $0x0
  pushl $249
c0103562:	68 f9 00 00 00       	push   $0xf9
  jmp __alltraps
c0103567:	e9 48 00 00 00       	jmp    c01035b4 <__alltraps>

c010356c <vector250>:
.globl vector250
vector250:
  pushl $0
c010356c:	6a 00                	push   $0x0
  pushl $250
c010356e:	68 fa 00 00 00       	push   $0xfa
  jmp __alltraps
c0103573:	e9 3c 00 00 00       	jmp    c01035b4 <__alltraps>

c0103578 <vector251>:
.globl vector251
vector251:
  pushl $0
c0103578:	6a 00                	push   $0x0
  pushl $251
c010357a:	68 fb 00 00 00       	push   $0xfb
  jmp __alltraps
c010357f:	e9 30 00 00 00       	jmp    c01035b4 <__alltraps>

c0103584 <vector252>:
.globl vector252
vector252:
  pushl $0
c0103584:	6a 00                	push   $0x0
  pushl $252
c0103586:	68 fc 00 00 00       	push   $0xfc
  jmp __alltraps
c010358b:	e9 24 00 00 00       	jmp    c01035b4 <__alltraps>

c0103590 <vector253>:
.globl vector253
vector253:
  pushl $0
c0103590:	6a 00                	push   $0x0
  pushl $253
c0103592:	68 fd 00 00 00       	push   $0xfd
  jmp __alltraps
c0103597:	e9 18 00 00 00       	jmp    c01035b4 <__alltraps>

c010359c <vector254>:
.globl vector254
vector254:
  pushl $0
c010359c:	6a 00                	push   $0x0
  pushl $254
c010359e:	68 fe 00 00 00       	push   $0xfe
  jmp __alltraps
c01035a3:	e9 0c 00 00 00       	jmp    c01035b4 <__alltraps>

c01035a8 <vector255>:
.globl vector255
vector255:
  pushl $0
c01035a8:	6a 00                	push   $0x0
  pushl $255
c01035aa:	68 ff 00 00 00       	push   $0xff
  jmp __alltraps
c01035af:	e9 00 00 00 00       	jmp    c01035b4 <__alltraps>

c01035b4 <__alltraps>:
.text
.globl __alltraps
__alltraps:
    # push registers to build a trap frame
    # therefore make the stack look like a struct trapframe
    pushl %ds
c01035b4:	1e                   	push   %ds
    pushl %es
c01035b5:	06                   	push   %es
    pushl %fs
c01035b6:	0f a0                	push   %fs
    pushl %gs
c01035b8:	0f a8                	push   %gs
    pushal
c01035ba:	60                   	pusha  

    # load GD_KDATA into %ds and %es to set up data segments for kernel
    movl $GD_KDATA, %eax
c01035bb:	b8 10 00 00 00       	mov    $0x10,%eax
    movw %ax, %ds
c01035c0:	8e d8                	mov    %eax,%ds
    movw %ax, %es
c01035c2:	8e c0                	mov    %eax,%es

    # push %esp to pass a pointer to the trapframe as an argument to trap()
    pushl %esp
c01035c4:	54                   	push   %esp

    # call trap(tf), where tf=%esp
    call trap
c01035c5:	e8 e3 f4 ff ff       	call   c0102aad <trap>

    # pop the pushed stack pointer
    popl %esp
c01035ca:	5c                   	pop    %esp

c01035cb <__trapret>:

    # return falls through to trapret...
.globl __trapret
__trapret:
    # restore registers from stack
    popal
c01035cb:	61                   	popa   

    # restore %ds, %es, %fs and %gs
    popl %gs
c01035cc:	0f a9                	pop    %gs
    popl %fs
c01035ce:	0f a1                	pop    %fs
    popl %es
c01035d0:	07                   	pop    %es
    popl %ds
c01035d1:	1f                   	pop    %ds

    # get rid of the trap number and error code
    addl $0x8, %esp
c01035d2:	83 c4 08             	add    $0x8,%esp
    iret
c01035d5:	cf                   	iret   

c01035d6 <forkrets>:

.globl forkrets
forkrets:
    # set stack to this new process's trapframe
    movl 4(%esp), %esp
c01035d6:	8b 64 24 04          	mov    0x4(%esp),%esp
    jmp __trapret
c01035da:	eb ef                	jmp    c01035cb <__trapret>

c01035dc <_enclock_init_mm>:
 * (2) _enclock_init_mm: init pra_list_head and let  mm->sm_priv point to the addr of pra_list_head.
 *              Now, From the memory control struct mm_struct, we can access FIFO PRA
 */
static int
_enclock_init_mm(struct mm_struct *mm)
{     
c01035dc:	55                   	push   %ebp
c01035dd:	89 e5                	mov    %esp,%ebp
c01035df:	83 ec 18             	sub    $0x18,%esp
c01035e2:	c7 45 f4 b0 20 1a c0 	movl   $0xc01a20b0,-0xc(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c01035e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01035ec:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01035ef:	89 50 04             	mov    %edx,0x4(%eax)
c01035f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01035f5:	8b 50 04             	mov    0x4(%eax),%edx
c01035f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01035fb:	89 10                	mov    %edx,(%eax)
     list_init(&pra_list_head);
     clock_ptr = &pra_list_head;
c01035fd:	c7 05 b8 20 1a c0 b0 	movl   $0xc01a20b0,0xc01a20b8
c0103604:	20 1a c0 
     assert(clock_ptr != NULL);
c0103607:	a1 b8 20 1a c0       	mov    0xc01a20b8,%eax
c010360c:	85 c0                	test   %eax,%eax
c010360e:	75 16                	jne    c0103626 <_enclock_init_mm+0x4a>
c0103610:	68 30 c5 10 c0       	push   $0xc010c530
c0103615:	68 42 c5 10 c0       	push   $0xc010c542
c010361a:	6a 20                	push   $0x20
c010361c:	68 57 c5 10 c0       	push   $0xc010c557
c0103621:	e8 d2 cd ff ff       	call   c01003f8 <__panic>
     mm->sm_priv = &sm_priv_enclock;
c0103626:	8b 45 08             	mov    0x8(%ebp),%eax
c0103629:	c7 40 14 e0 b9 12 c0 	movl   $0xc012b9e0,0x14(%eax)
     //cprintf(" mm->sm_priv %x in enclock_init_mm\n",mm->sm_priv);
     return 0;
c0103630:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0103635:	c9                   	leave  
c0103636:	c3                   	ret    

c0103637 <_enclock_map_swappable>:
/*
 * (3)_enclock_map_swappable: According enclock PRA, we should link the most recent arrival page at the back of pra_list_head qeueue
 */
static int
_enclock_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c0103637:	55                   	push   %ebp
c0103638:	89 e5                	mov    %esp,%ebp
c010363a:	83 ec 48             	sub    $0x48,%esp
    list_entry_t *head = ((struct enclock_struct*) mm->sm_priv)->head;
c010363d:	8b 45 08             	mov    0x8(%ebp),%eax
c0103640:	8b 40 14             	mov    0x14(%eax),%eax
c0103643:	8b 00                	mov    (%eax),%eax
c0103645:	89 45 f0             	mov    %eax,-0x10(%ebp)
    list_entry_t *clock_ptr = *(((struct enclock_struct*) mm->sm_priv)->clock);
c0103648:	8b 45 08             	mov    0x8(%ebp),%eax
c010364b:	8b 40 14             	mov    0x14(%eax),%eax
c010364e:	8b 40 04             	mov    0x4(%eax),%eax
c0103651:	8b 00                	mov    (%eax),%eax
c0103653:	89 45 ec             	mov    %eax,-0x14(%ebp)
    // if (head == clock_ptr) {
    //     cprintf("Got head == clock ptr in swappable\n");
    // }
    list_entry_t *entry=&(page->pra_page_link);
c0103656:	8b 45 10             	mov    0x10(%ebp),%eax
c0103659:	83 c0 14             	add    $0x14,%eax
c010365c:	89 45 e8             	mov    %eax,-0x18(%ebp)
    
    assert(entry != NULL && head != NULL);
c010365f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0103663:	74 06                	je     c010366b <_enclock_map_swappable+0x34>
c0103665:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0103669:	75 16                	jne    c0103681 <_enclock_map_swappable+0x4a>
c010366b:	68 6e c5 10 c0       	push   $0xc010c56e
c0103670:	68 42 c5 10 c0       	push   $0xc010c542
c0103675:	6a 32                	push   $0x32
c0103677:	68 57 c5 10 c0       	push   $0xc010c557
c010367c:	e8 77 cd ff ff       	call   c01003f8 <__panic>
    //record the page access situlation
    /*LAB3 CHALLENGE: YOUR CODE*/ 
    // not swap in but call this func, means failed to swap out 
    if (swap_in == 0) {
c0103681:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0103685:	75 57                	jne    c01036de <_enclock_map_swappable+0xa7>
        list_entry_t *le_prev = head, *le;
c0103687:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010368a:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while ((le = list_next(le_prev)) != head) {
c010368d:	eb 38                	jmp    c01036c7 <_enclock_map_swappable+0x90>
            if (le == entry) {
c010368f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103692:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c0103695:	75 2a                	jne    c01036c1 <_enclock_map_swappable+0x8a>
c0103697:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010369a:	89 45 d8             	mov    %eax,-0x28(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010369d:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01036a0:	8b 40 04             	mov    0x4(%eax),%eax
c01036a3:	8b 55 d8             	mov    -0x28(%ebp),%edx
c01036a6:	8b 12                	mov    (%edx),%edx
c01036a8:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c01036ab:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c01036ae:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01036b1:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01036b4:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c01036b7:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01036ba:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01036bd:	89 10                	mov    %edx,(%eax)
                list_del(le);
                break;
c01036bf:	eb 1d                	jmp    c01036de <_enclock_map_swappable+0xa7>
            }
            le_prev = le;        
c01036c1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01036c4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01036c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036ca:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01036cd:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01036d0:	8b 40 04             	mov    0x4(%eax),%eax
    //record the page access situlation
    /*LAB3 CHALLENGE: YOUR CODE*/ 
    // not swap in but call this func, means failed to swap out 
    if (swap_in == 0) {
        list_entry_t *le_prev = head, *le;
        while ((le = list_next(le_prev)) != head) {
c01036d3:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01036d6:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01036d9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01036dc:	75 b1                	jne    c010368f <_enclock_map_swappable+0x58>
c01036de:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01036e1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01036e4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01036e7:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c01036ea:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01036ed:	8b 00                	mov    (%eax),%eax
c01036ef:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01036f2:	89 55 c8             	mov    %edx,-0x38(%ebp)
c01036f5:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c01036f8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01036fb:	89 45 c0             	mov    %eax,-0x40(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c01036fe:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0103701:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0103704:	89 10                	mov    %edx,(%eax)
c0103706:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0103709:	8b 10                	mov    (%eax),%edx
c010370b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010370e:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0103711:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0103714:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0103717:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010371a:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010371d:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0103720:	89 10                	mov    %edx,(%eax)
            le_prev = le;        
        }
    }
    //(1)link the most recent arrival page at the back of the pra_list_head qeueue.
    list_add_before(head, entry);
    return 0;
c0103722:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0103727:	c9                   	leave  
c0103728:	c3                   	ret    

c0103729 <_enclock_swap_out_victim>:
 *  (4)_enclock_swap_out_victim: According FIFO PRA, we should unlink the  earliest arrival page in front of pra_list_head qeueue,
 *                            then assign the value of *ptr_page to the addr of this page.
 */
static int
_enclock_swap_out_victim(struct mm_struct *mm, struct Page ** ptr_page, int in_tick)
{
c0103729:	55                   	push   %ebp
c010372a:	89 e5                	mov    %esp,%ebp
c010372c:	83 ec 48             	sub    $0x48,%esp
    list_entry_t *head = ((struct enclock_struct*) mm->sm_priv)->head;
c010372f:	8b 45 08             	mov    0x8(%ebp),%eax
c0103732:	8b 40 14             	mov    0x14(%eax),%eax
c0103735:	8b 00                	mov    (%eax),%eax
c0103737:	89 45 ec             	mov    %eax,-0x14(%ebp)
    list_entry_t *clock_ptr = *(((struct enclock_struct*) mm->sm_priv)->clock);
c010373a:	8b 45 08             	mov    0x8(%ebp),%eax
c010373d:	8b 40 14             	mov    0x14(%eax),%eax
c0103740:	8b 40 04             	mov    0x4(%eax),%eax
c0103743:	8b 00                	mov    (%eax),%eax
c0103745:	89 45 e8             	mov    %eax,-0x18(%ebp)
    // if (head == clock_ptr) {
    //     cprintf("Got head == clock ptr in victim\n");
    // }
    assert(head != NULL);
c0103748:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010374c:	75 16                	jne    c0103764 <_enclock_swap_out_victim+0x3b>
c010374e:	68 8c c5 10 c0       	push   $0xc010c58c
c0103753:	68 42 c5 10 c0       	push   $0xc010c542
c0103758:	6a 50                	push   $0x50
c010375a:	68 57 c5 10 c0       	push   $0xc010c557
c010375f:	e8 94 cc ff ff       	call   c01003f8 <__panic>
    assert(in_tick==0);
c0103764:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0103768:	74 16                	je     c0103780 <_enclock_swap_out_victim+0x57>
c010376a:	68 99 c5 10 c0       	push   $0xc010c599
c010376f:	68 42 c5 10 c0       	push   $0xc010c542
c0103774:	6a 51                	push   $0x51
c0103776:	68 57 c5 10 c0       	push   $0xc010c557
c010377b:	e8 78 cc ff ff       	call   c01003f8 <__panic>
    /* Select the victim */
    /*LAB3 CHALLENGE 2: YOUR CODE*/ 
    //(1)  iterate list searching for victim
    list_entry_t *le_prev = clock_ptr, *le;
c0103780:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103783:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int cnt = 0;
c0103786:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    while (le = list_next(le_prev)) {
c010378d:	e9 36 01 00 00       	jmp    c01038c8 <_enclock_swap_out_victim+0x19f>
        assert(cnt < 3);
c0103792:	83 7d f0 02          	cmpl   $0x2,-0x10(%ebp)
c0103796:	7e 16                	jle    c01037ae <_enclock_swap_out_victim+0x85>
c0103798:	68 a4 c5 10 c0       	push   $0xc010c5a4
c010379d:	68 42 c5 10 c0       	push   $0xc010c542
c01037a2:	6a 58                	push   $0x58
c01037a4:	68 57 c5 10 c0       	push   $0xc010c557
c01037a9:	e8 4a cc ff ff       	call   c01003f8 <__panic>
        if (le == head) {
c01037ae:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01037b1:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01037b4:	75 0f                	jne    c01037c5 <_enclock_swap_out_victim+0x9c>
            cnt ++;
c01037b6:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
            le_prev = le;
c01037ba:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01037bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
            continue;
c01037c0:	e9 03 01 00 00       	jmp    c01038c8 <_enclock_swap_out_victim+0x19f>
        }
        struct Page *page = le2page(le, pra_page_link);
c01037c5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01037c8:	83 e8 14             	sub    $0x14,%eax
c01037cb:	89 45 dc             	mov    %eax,-0x24(%ebp)
        pte_t* ptep = get_pte(mm->pgdir, page->pra_vaddr, 0);
c01037ce:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01037d1:	8b 50 1c             	mov    0x1c(%eax),%edx
c01037d4:	8b 45 08             	mov    0x8(%ebp),%eax
c01037d7:	8b 40 0c             	mov    0xc(%eax),%eax
c01037da:	83 ec 04             	sub    $0x4,%esp
c01037dd:	6a 00                	push   $0x0
c01037df:	52                   	push   %edx
c01037e0:	50                   	push   %eax
c01037e1:	e8 61 46 00 00       	call   c0107e47 <get_pte>
c01037e6:	83 c4 10             	add    $0x10,%esp
c01037e9:	89 45 d8             	mov    %eax,-0x28(%ebp)
        _enclock_print_pte(ptep, page->pra_vaddr);
c01037ec:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01037ef:	8b 40 1c             	mov    0x1c(%eax),%eax
c01037f2:	83 ec 08             	sub    $0x8,%esp
c01037f5:	50                   	push   %eax
c01037f6:	ff 75 d8             	pushl  -0x28(%ebp)
c01037f9:	e8 fb 01 00 00       	call   c01039f9 <_enclock_print_pte>
c01037fe:	83 c4 10             	add    $0x10,%esp
        // cprintf("BEFORE: va: 0x%x, pte: 0x%x A: 0x%x, D: 0x%x\n", page->pra_vaddr, *ptep, *ptep & PTE_A, *ptep & PTE_D);
        if (*ptep & PTE_A) {
c0103801:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0103804:	8b 00                	mov    (%eax),%eax
c0103806:	83 e0 20             	and    $0x20,%eax
c0103809:	85 c0                	test   %eax,%eax
c010380b:	74 2d                	je     c010383a <_enclock_swap_out_victim+0x111>
            // set access to 0
            *ptep &= ~PTE_A;
c010380d:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0103810:	8b 00                	mov    (%eax),%eax
c0103812:	83 e0 df             	and    $0xffffffdf,%eax
c0103815:	89 c2                	mov    %eax,%edx
c0103817:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010381a:	89 10                	mov    %edx,(%eax)
            tlb_invalidate(mm->pgdir, page->pra_vaddr);
c010381c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010381f:	8b 50 1c             	mov    0x1c(%eax),%edx
c0103822:	8b 45 08             	mov    0x8(%ebp),%eax
c0103825:	8b 40 0c             	mov    0xc(%eax),%eax
c0103828:	83 ec 08             	sub    $0x8,%esp
c010382b:	52                   	push   %edx
c010382c:	50                   	push   %eax
c010382d:	e8 af 4c 00 00       	call   c01084e1 <tlb_invalidate>
c0103832:	83 c4 10             	add    $0x10,%esp
c0103835:	e9 88 00 00 00       	jmp    c01038c2 <_enclock_swap_out_victim+0x199>
        } else {
            // cprintf("now a == 0\n");
            if (*ptep & PTE_D) {
c010383a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010383d:	8b 00                	mov    (%eax),%eax
c010383f:	83 e0 40             	and    $0x40,%eax
c0103842:	85 c0                	test   %eax,%eax
c0103844:	74 63                	je     c01038a9 <_enclock_swap_out_victim+0x180>
                if (swapfs_write((page->pra_vaddr / PGSIZE + 1) << 8, page) == 0) {
c0103846:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103849:	8b 40 1c             	mov    0x1c(%eax),%eax
c010384c:	c1 e8 0c             	shr    $0xc,%eax
c010384f:	83 c0 01             	add    $0x1,%eax
c0103852:	c1 e0 08             	shl    $0x8,%eax
c0103855:	83 ec 08             	sub    $0x8,%esp
c0103858:	ff 75 dc             	pushl  -0x24(%ebp)
c010385b:	50                   	push   %eax
c010385c:	e8 60 59 00 00       	call   c01091c1 <swapfs_write>
c0103861:	83 c4 10             	add    $0x10,%esp
c0103864:	85 c0                	test   %eax,%eax
c0103866:	75 17                	jne    c010387f <_enclock_swap_out_victim+0x156>
                    cprintf("write 0x%x to disk\n", page->pra_vaddr);
c0103868:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010386b:	8b 40 1c             	mov    0x1c(%eax),%eax
c010386e:	83 ec 08             	sub    $0x8,%esp
c0103871:	50                   	push   %eax
c0103872:	68 ac c5 10 c0       	push   $0xc010c5ac
c0103877:	e8 16 ca ff ff       	call   c0100292 <cprintf>
c010387c:	83 c4 10             	add    $0x10,%esp
                }
                // set dirty to 0
                *ptep = *ptep & ~PTE_D;
c010387f:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0103882:	8b 00                	mov    (%eax),%eax
c0103884:	83 e0 bf             	and    $0xffffffbf,%eax
c0103887:	89 c2                	mov    %eax,%edx
c0103889:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010388c:	89 10                	mov    %edx,(%eax)
                tlb_invalidate(mm->pgdir, page->pra_vaddr);
c010388e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103891:	8b 50 1c             	mov    0x1c(%eax),%edx
c0103894:	8b 45 08             	mov    0x8(%ebp),%eax
c0103897:	8b 40 0c             	mov    0xc(%eax),%eax
c010389a:	83 ec 08             	sub    $0x8,%esp
c010389d:	52                   	push   %edx
c010389e:	50                   	push   %eax
c010389f:	e8 3d 4c 00 00       	call   c01084e1 <tlb_invalidate>
c01038a4:	83 c4 10             	add    $0x10,%esp
c01038a7:	eb 19                	jmp    c01038c2 <_enclock_swap_out_victim+0x199>
            } else {
                // cprintf("AFTER: le: %p, pte: 0x%x A: 0x%x, D: 0x%x\n", le, *ptep, *ptep & PTE_A, *ptep & PTE_D);
                cprintf("victim is 0x%x\n", page->pra_vaddr);
c01038a9:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01038ac:	8b 40 1c             	mov    0x1c(%eax),%eax
c01038af:	83 ec 08             	sub    $0x8,%esp
c01038b2:	50                   	push   %eax
c01038b3:	68 c0 c5 10 c0       	push   $0xc010c5c0
c01038b8:	e8 d5 c9 ff ff       	call   c0100292 <cprintf>
c01038bd:	83 c4 10             	add    $0x10,%esp
                break;
c01038c0:	eb 1f                	jmp    c01038e1 <_enclock_swap_out_victim+0x1b8>
            }
        }
        // cprintf("AFTER: le: %p, pte: 0x%x A: 0x%x, D: 0x%x\n", le, *ptep, *ptep & PTE_A, *ptep & PTE_D);
        le_prev = le;        
c01038c2:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01038c5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01038c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01038cb:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01038ce:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01038d1:	8b 40 04             	mov    0x4(%eax),%eax
    /* Select the victim */
    /*LAB3 CHALLENGE 2: YOUR CODE*/ 
    //(1)  iterate list searching for victim
    list_entry_t *le_prev = clock_ptr, *le;
    int cnt = 0;
    while (le = list_next(le_prev)) {
c01038d4:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01038d7:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01038db:	0f 85 b1 fe ff ff    	jne    c0103792 <_enclock_swap_out_victim+0x69>
            }
        }
        // cprintf("AFTER: le: %p, pte: 0x%x A: 0x%x, D: 0x%x\n", le, *ptep, *ptep & PTE_A, *ptep & PTE_D);
        le_prev = le;        
    }
    assert(le != head);
c01038e1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01038e4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01038e7:	75 16                	jne    c01038ff <_enclock_swap_out_victim+0x1d6>
c01038e9:	68 d0 c5 10 c0       	push   $0xc010c5d0
c01038ee:	68 42 c5 10 c0       	push   $0xc010c542
c01038f3:	6a 78                	push   $0x78
c01038f5:	68 57 c5 10 c0       	push   $0xc010c557
c01038fa:	e8 f9 ca ff ff       	call   c01003f8 <__panic>
c01038ff:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103902:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0103905:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103908:	8b 40 04             	mov    0x4(%eax),%eax
c010390b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010390e:	8b 12                	mov    (%edx),%edx
c0103910:	89 55 c8             	mov    %edx,-0x38(%ebp)
c0103913:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0103916:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0103919:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c010391c:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010391f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0103922:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0103925:	89 10                	mov    %edx,(%eax)
    list_del(le);
    //(2)  assign the value of *ptr_page to the addr of this page
    struct Page *page = le2page(le, pra_page_link);
c0103927:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010392a:	83 e8 14             	sub    $0x14,%eax
c010392d:	89 45 d0             	mov    %eax,-0x30(%ebp)
    assert(page != NULL);
c0103930:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c0103934:	75 16                	jne    c010394c <_enclock_swap_out_victim+0x223>
c0103936:	68 db c5 10 c0       	push   $0xc010c5db
c010393b:	68 42 c5 10 c0       	push   $0xc010c542
c0103940:	6a 7c                	push   $0x7c
c0103942:	68 57 c5 10 c0       	push   $0xc010c557
c0103947:	e8 ac ca ff ff       	call   c01003f8 <__panic>
    *ptr_page = page;
c010394c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010394f:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0103952:	89 10                	mov    %edx,(%eax)
    //(2)update clock
    *(((struct enclock_struct*) mm->sm_priv)->clock) = list_next(le_prev);
c0103954:	8b 45 08             	mov    0x8(%ebp),%eax
c0103957:	8b 40 14             	mov    0x14(%eax),%eax
c010395a:	8b 40 04             	mov    0x4(%eax),%eax
c010395d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0103960:	89 55 d4             	mov    %edx,-0x2c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0103963:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0103966:	8b 52 04             	mov    0x4(%edx),%edx
c0103969:	89 10                	mov    %edx,(%eax)
    return 0;
c010396b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0103970:	c9                   	leave  
c0103971:	c3                   	ret    

c0103972 <_enclock_reset_pte>:

void
_enclock_reset_pte(pde_t* pgdir) {
c0103972:	55                   	push   %ebp
c0103973:	89 e5                	mov    %esp,%ebp
c0103975:	83 ec 18             	sub    $0x18,%esp
    cprintf("PTEs resetting...\n");
c0103978:	83 ec 0c             	sub    $0xc,%esp
c010397b:	68 e8 c5 10 c0       	push   $0xc010c5e8
c0103980:	e8 0d c9 ff ff       	call   c0100292 <cprintf>
c0103985:	83 c4 10             	add    $0x10,%esp
    for(unsigned int va = 0x1000; va <= 0x4000; va += 0x1000) {
c0103988:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
c010398f:	eb 4c                	jmp    c01039dd <_enclock_reset_pte+0x6b>
        pte_t* ptep = get_pte(pgdir, va, 0);
c0103991:	83 ec 04             	sub    $0x4,%esp
c0103994:	6a 00                	push   $0x0
c0103996:	ff 75 f4             	pushl  -0xc(%ebp)
c0103999:	ff 75 08             	pushl  0x8(%ebp)
c010399c:	e8 a6 44 00 00       	call   c0107e47 <get_pte>
c01039a1:	83 c4 10             	add    $0x10,%esp
c01039a4:	89 45 f0             	mov    %eax,-0x10(%ebp)
        *ptep = *ptep & ~PTE_A;
c01039a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01039aa:	8b 00                	mov    (%eax),%eax
c01039ac:	83 e0 df             	and    $0xffffffdf,%eax
c01039af:	89 c2                	mov    %eax,%edx
c01039b1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01039b4:	89 10                	mov    %edx,(%eax)
        *ptep = *ptep & ~PTE_D;
c01039b6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01039b9:	8b 00                	mov    (%eax),%eax
c01039bb:	83 e0 bf             	and    $0xffffffbf,%eax
c01039be:	89 c2                	mov    %eax,%edx
c01039c0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01039c3:	89 10                	mov    %edx,(%eax)
        tlb_invalidate(pgdir, va);
c01039c5:	83 ec 08             	sub    $0x8,%esp
c01039c8:	ff 75 f4             	pushl  -0xc(%ebp)
c01039cb:	ff 75 08             	pushl  0x8(%ebp)
c01039ce:	e8 0e 4b 00 00       	call   c01084e1 <tlb_invalidate>
c01039d3:	83 c4 10             	add    $0x10,%esp
}

void
_enclock_reset_pte(pde_t* pgdir) {
    cprintf("PTEs resetting...\n");
    for(unsigned int va = 0x1000; va <= 0x4000; va += 0x1000) {
c01039d6:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
c01039dd:	81 7d f4 00 40 00 00 	cmpl   $0x4000,-0xc(%ebp)
c01039e4:	76 ab                	jbe    c0103991 <_enclock_reset_pte+0x1f>
        pte_t* ptep = get_pte(pgdir, va, 0);
        *ptep = *ptep & ~PTE_A;
        *ptep = *ptep & ~PTE_D;
        tlb_invalidate(pgdir, va);
    }
    cprintf("PTEs reseted!\n");
c01039e6:	83 ec 0c             	sub    $0xc,%esp
c01039e9:	68 fb c5 10 c0       	push   $0xc010c5fb
c01039ee:	e8 9f c8 ff ff       	call   c0100292 <cprintf>
c01039f3:	83 c4 10             	add    $0x10,%esp
}
c01039f6:	90                   	nop
c01039f7:	c9                   	leave  
c01039f8:	c3                   	ret    

c01039f9 <_enclock_print_pte>:

void
_enclock_print_pte(pte_t* ptep, unsigned int va) {
c01039f9:	55                   	push   %ebp
c01039fa:	89 e5                	mov    %esp,%ebp
c01039fc:	83 ec 08             	sub    $0x8,%esp
    cprintf("va: 0x%x, pte: 0x%x A: 0x%x, D: 0x%x\n", va, *ptep, *ptep & PTE_A, *ptep & PTE_D);
c01039ff:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a02:	8b 00                	mov    (%eax),%eax
c0103a04:	83 e0 40             	and    $0x40,%eax
c0103a07:	89 c1                	mov    %eax,%ecx
c0103a09:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a0c:	8b 00                	mov    (%eax),%eax
c0103a0e:	83 e0 20             	and    $0x20,%eax
c0103a11:	89 c2                	mov    %eax,%edx
c0103a13:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a16:	8b 00                	mov    (%eax),%eax
c0103a18:	83 ec 0c             	sub    $0xc,%esp
c0103a1b:	51                   	push   %ecx
c0103a1c:	52                   	push   %edx
c0103a1d:	50                   	push   %eax
c0103a1e:	ff 75 0c             	pushl  0xc(%ebp)
c0103a21:	68 0c c6 10 c0       	push   $0xc010c60c
c0103a26:	e8 67 c8 ff ff       	call   c0100292 <cprintf>
c0103a2b:	83 c4 20             	add    $0x20,%esp
}
c0103a2e:	90                   	nop
c0103a2f:	c9                   	leave  
c0103a30:	c3                   	ret    

c0103a31 <_enclock_check_swap>:

static int
_enclock_check_swap(void) {
c0103a31:	55                   	push   %ebp
c0103a32:	89 e5                	mov    %esp,%ebp
c0103a34:	83 ec 18             	sub    $0x18,%esp
}

static inline uintptr_t
rcr3(void) {
    uintptr_t cr3;
    asm volatile ("mov %%cr3, %0" : "=r" (cr3) :: "memory");
c0103a37:	0f 20 d8             	mov    %cr3,%eax
c0103a3a:	89 45 e8             	mov    %eax,-0x18(%ebp)
    return cr3;
c0103a3d:	8b 45 e8             	mov    -0x18(%ebp),%eax
    _enclock_reset_pte(KADDR(((pde_t *)rcr3())));
c0103a40:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103a43:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103a46:	c1 e8 0c             	shr    $0xc,%eax
c0103a49:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103a4c:	a1 80 ff 19 c0       	mov    0xc019ff80,%eax
c0103a51:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0103a54:	72 17                	jb     c0103a6d <_enclock_check_swap+0x3c>
c0103a56:	ff 75 f4             	pushl  -0xc(%ebp)
c0103a59:	68 34 c6 10 c0       	push   $0xc010c634
c0103a5e:	68 96 00 00 00       	push   $0x96
c0103a63:	68 57 c5 10 c0       	push   $0xc010c557
c0103a68:	e8 8b c9 ff ff       	call   c01003f8 <__panic>
c0103a6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103a70:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0103a75:	83 ec 0c             	sub    $0xc,%esp
c0103a78:	50                   	push   %eax
c0103a79:	e8 f4 fe ff ff       	call   c0103972 <_enclock_reset_pte>
c0103a7e:	83 c4 10             	add    $0x10,%esp
    cprintf("read Virt Page c in enclock_check_swap\n");
c0103a81:	83 ec 0c             	sub    $0xc,%esp
c0103a84:	68 58 c6 10 c0       	push   $0xc010c658
c0103a89:	e8 04 c8 ff ff       	call   c0100292 <cprintf>
c0103a8e:	83 c4 10             	add    $0x10,%esp
    unsigned char tmp = *(unsigned char *)0x3000;
c0103a91:	b8 00 30 00 00       	mov    $0x3000,%eax
c0103a96:	0f b6 00             	movzbl (%eax),%eax
c0103a99:	88 45 ef             	mov    %al,-0x11(%ebp)
    assert(pgfault_num==4);
c0103a9c:	a1 64 ff 19 c0       	mov    0xc019ff64,%eax
c0103aa1:	83 f8 04             	cmp    $0x4,%eax
c0103aa4:	74 19                	je     c0103abf <_enclock_check_swap+0x8e>
c0103aa6:	68 80 c6 10 c0       	push   $0xc010c680
c0103aab:	68 42 c5 10 c0       	push   $0xc010c542
c0103ab0:	68 99 00 00 00       	push   $0x99
c0103ab5:	68 57 c5 10 c0       	push   $0xc010c557
c0103aba:	e8 39 c9 ff ff       	call   c01003f8 <__panic>
    cprintf("write Virt Page a in enclock_check_swap\n");
c0103abf:	83 ec 0c             	sub    $0xc,%esp
c0103ac2:	68 90 c6 10 c0       	push   $0xc010c690
c0103ac7:	e8 c6 c7 ff ff       	call   c0100292 <cprintf>
c0103acc:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x1000 = 0x0a;
c0103acf:	b8 00 10 00 00       	mov    $0x1000,%eax
c0103ad4:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==4);
c0103ad7:	a1 64 ff 19 c0       	mov    0xc019ff64,%eax
c0103adc:	83 f8 04             	cmp    $0x4,%eax
c0103adf:	74 19                	je     c0103afa <_enclock_check_swap+0xc9>
c0103ae1:	68 80 c6 10 c0       	push   $0xc010c680
c0103ae6:	68 42 c5 10 c0       	push   $0xc010c542
c0103aeb:	68 9c 00 00 00       	push   $0x9c
c0103af0:	68 57 c5 10 c0       	push   $0xc010c557
c0103af5:	e8 fe c8 ff ff       	call   c01003f8 <__panic>
    cprintf("read Virt Page d in enclock_check_swap\n");
c0103afa:	83 ec 0c             	sub    $0xc,%esp
c0103afd:	68 bc c6 10 c0       	push   $0xc010c6bc
c0103b02:	e8 8b c7 ff ff       	call   c0100292 <cprintf>
c0103b07:	83 c4 10             	add    $0x10,%esp
    tmp = *(unsigned char *)0x4000;
c0103b0a:	b8 00 40 00 00       	mov    $0x4000,%eax
c0103b0f:	0f b6 00             	movzbl (%eax),%eax
c0103b12:	88 45 ef             	mov    %al,-0x11(%ebp)
    assert(pgfault_num==4);
c0103b15:	a1 64 ff 19 c0       	mov    0xc019ff64,%eax
c0103b1a:	83 f8 04             	cmp    $0x4,%eax
c0103b1d:	74 19                	je     c0103b38 <_enclock_check_swap+0x107>
c0103b1f:	68 80 c6 10 c0       	push   $0xc010c680
c0103b24:	68 42 c5 10 c0       	push   $0xc010c542
c0103b29:	68 9f 00 00 00       	push   $0x9f
c0103b2e:	68 57 c5 10 c0       	push   $0xc010c557
c0103b33:	e8 c0 c8 ff ff       	call   c01003f8 <__panic>
    cprintf("write Virt Page b in enclock_check_swap\n");
c0103b38:	83 ec 0c             	sub    $0xc,%esp
c0103b3b:	68 e4 c6 10 c0       	push   $0xc010c6e4
c0103b40:	e8 4d c7 ff ff       	call   c0100292 <cprintf>
c0103b45:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x2000 = 0x0b;
c0103b48:	b8 00 20 00 00       	mov    $0x2000,%eax
c0103b4d:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==4);
c0103b50:	a1 64 ff 19 c0       	mov    0xc019ff64,%eax
c0103b55:	83 f8 04             	cmp    $0x4,%eax
c0103b58:	74 19                	je     c0103b73 <_enclock_check_swap+0x142>
c0103b5a:	68 80 c6 10 c0       	push   $0xc010c680
c0103b5f:	68 42 c5 10 c0       	push   $0xc010c542
c0103b64:	68 a2 00 00 00       	push   $0xa2
c0103b69:	68 57 c5 10 c0       	push   $0xc010c557
c0103b6e:	e8 85 c8 ff ff       	call   c01003f8 <__panic>

    cprintf("write Virt Page e in enclock_check_swap\n");
c0103b73:	83 ec 0c             	sub    $0xc,%esp
c0103b76:	68 10 c7 10 c0       	push   $0xc010c710
c0103b7b:	e8 12 c7 ff ff       	call   c0100292 <cprintf>
c0103b80:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x5000 = 0x0e;
c0103b83:	b8 00 50 00 00       	mov    $0x5000,%eax
c0103b88:	c6 00 0e             	movb   $0xe,(%eax)
    assert(pgfault_num==5);
c0103b8b:	a1 64 ff 19 c0       	mov    0xc019ff64,%eax
c0103b90:	83 f8 05             	cmp    $0x5,%eax
c0103b93:	74 19                	je     c0103bae <_enclock_check_swap+0x17d>
c0103b95:	68 39 c7 10 c0       	push   $0xc010c739
c0103b9a:	68 42 c5 10 c0       	push   $0xc010c542
c0103b9f:	68 a6 00 00 00       	push   $0xa6
c0103ba4:	68 57 c5 10 c0       	push   $0xc010c557
c0103ba9:	e8 4a c8 ff ff       	call   c01003f8 <__panic>
    cprintf("read Virt Page b in enclock_check_swap\n");
c0103bae:	83 ec 0c             	sub    $0xc,%esp
c0103bb1:	68 48 c7 10 c0       	push   $0xc010c748
c0103bb6:	e8 d7 c6 ff ff       	call   c0100292 <cprintf>
c0103bbb:	83 c4 10             	add    $0x10,%esp
    tmp = *(unsigned char *)0x2000;
c0103bbe:	b8 00 20 00 00       	mov    $0x2000,%eax
c0103bc3:	0f b6 00             	movzbl (%eax),%eax
c0103bc6:	88 45 ef             	mov    %al,-0x11(%ebp)
    assert(pgfault_num==5);
c0103bc9:	a1 64 ff 19 c0       	mov    0xc019ff64,%eax
c0103bce:	83 f8 05             	cmp    $0x5,%eax
c0103bd1:	74 19                	je     c0103bec <_enclock_check_swap+0x1bb>
c0103bd3:	68 39 c7 10 c0       	push   $0xc010c739
c0103bd8:	68 42 c5 10 c0       	push   $0xc010c542
c0103bdd:	68 a9 00 00 00       	push   $0xa9
c0103be2:	68 57 c5 10 c0       	push   $0xc010c557
c0103be7:	e8 0c c8 ff ff       	call   c01003f8 <__panic>
    cprintf("write Virt Page a in enclock_check_swap\n");
c0103bec:	83 ec 0c             	sub    $0xc,%esp
c0103bef:	68 90 c6 10 c0       	push   $0xc010c690
c0103bf4:	e8 99 c6 ff ff       	call   c0100292 <cprintf>
c0103bf9:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x1000 = 0x0a;
c0103bfc:	b8 00 10 00 00       	mov    $0x1000,%eax
c0103c01:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==5);
c0103c04:	a1 64 ff 19 c0       	mov    0xc019ff64,%eax
c0103c09:	83 f8 05             	cmp    $0x5,%eax
c0103c0c:	74 19                	je     c0103c27 <_enclock_check_swap+0x1f6>
c0103c0e:	68 39 c7 10 c0       	push   $0xc010c739
c0103c13:	68 42 c5 10 c0       	push   $0xc010c542
c0103c18:	68 ac 00 00 00       	push   $0xac
c0103c1d:	68 57 c5 10 c0       	push   $0xc010c557
c0103c22:	e8 d1 c7 ff ff       	call   c01003f8 <__panic>
    cprintf("read Virt Page b in enclock_check_swap\n");
c0103c27:	83 ec 0c             	sub    $0xc,%esp
c0103c2a:	68 48 c7 10 c0       	push   $0xc010c748
c0103c2f:	e8 5e c6 ff ff       	call   c0100292 <cprintf>
c0103c34:	83 c4 10             	add    $0x10,%esp
    tmp = *(unsigned char *)0x2000;
c0103c37:	b8 00 20 00 00       	mov    $0x2000,%eax
c0103c3c:	0f b6 00             	movzbl (%eax),%eax
c0103c3f:	88 45 ef             	mov    %al,-0x11(%ebp)
    assert(pgfault_num==5);
c0103c42:	a1 64 ff 19 c0       	mov    0xc019ff64,%eax
c0103c47:	83 f8 05             	cmp    $0x5,%eax
c0103c4a:	74 19                	je     c0103c65 <_enclock_check_swap+0x234>
c0103c4c:	68 39 c7 10 c0       	push   $0xc010c739
c0103c51:	68 42 c5 10 c0       	push   $0xc010c542
c0103c56:	68 af 00 00 00       	push   $0xaf
c0103c5b:	68 57 c5 10 c0       	push   $0xc010c557
c0103c60:	e8 93 c7 ff ff       	call   c01003f8 <__panic>

    cprintf("read Virt Page c in enclock_check_swap\n");
c0103c65:	83 ec 0c             	sub    $0xc,%esp
c0103c68:	68 58 c6 10 c0       	push   $0xc010c658
c0103c6d:	e8 20 c6 ff ff       	call   c0100292 <cprintf>
c0103c72:	83 c4 10             	add    $0x10,%esp
    tmp = *(unsigned char *)0x3000;
c0103c75:	b8 00 30 00 00       	mov    $0x3000,%eax
c0103c7a:	0f b6 00             	movzbl (%eax),%eax
c0103c7d:	88 45 ef             	mov    %al,-0x11(%ebp)
    assert(pgfault_num==6);
c0103c80:	a1 64 ff 19 c0       	mov    0xc019ff64,%eax
c0103c85:	83 f8 06             	cmp    $0x6,%eax
c0103c88:	74 19                	je     c0103ca3 <_enclock_check_swap+0x272>
c0103c8a:	68 70 c7 10 c0       	push   $0xc010c770
c0103c8f:	68 42 c5 10 c0       	push   $0xc010c542
c0103c94:	68 b3 00 00 00       	push   $0xb3
c0103c99:	68 57 c5 10 c0       	push   $0xc010c557
c0103c9e:	e8 55 c7 ff ff       	call   c01003f8 <__panic>
    cprintf("read Virt Page d in enclock_check_swap\n");
c0103ca3:	83 ec 0c             	sub    $0xc,%esp
c0103ca6:	68 bc c6 10 c0       	push   $0xc010c6bc
c0103cab:	e8 e2 c5 ff ff       	call   c0100292 <cprintf>
c0103cb0:	83 c4 10             	add    $0x10,%esp
    tmp = *(unsigned char *)0x4000;
c0103cb3:	b8 00 40 00 00       	mov    $0x4000,%eax
c0103cb8:	0f b6 00             	movzbl (%eax),%eax
c0103cbb:	88 45 ef             	mov    %al,-0x11(%ebp)
    assert(pgfault_num==7);
c0103cbe:	a1 64 ff 19 c0       	mov    0xc019ff64,%eax
c0103cc3:	83 f8 07             	cmp    $0x7,%eax
c0103cc6:	74 19                	je     c0103ce1 <_enclock_check_swap+0x2b0>
c0103cc8:	68 7f c7 10 c0       	push   $0xc010c77f
c0103ccd:	68 42 c5 10 c0       	push   $0xc010c542
c0103cd2:	68 b6 00 00 00       	push   $0xb6
c0103cd7:	68 57 c5 10 c0       	push   $0xc010c557
c0103cdc:	e8 17 c7 ff ff       	call   c01003f8 <__panic>
    return 0;
c0103ce1:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0103ce6:	c9                   	leave  
c0103ce7:	c3                   	ret    

c0103ce8 <_enclock_init>:


static int
_enclock_init(void)
{
c0103ce8:	55                   	push   %ebp
c0103ce9:	89 e5                	mov    %esp,%ebp
    return 0;
c0103ceb:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0103cf0:	5d                   	pop    %ebp
c0103cf1:	c3                   	ret    

c0103cf2 <_enclock_set_unswappable>:

static int
_enclock_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c0103cf2:	55                   	push   %ebp
c0103cf3:	89 e5                	mov    %esp,%ebp
    return 0;
c0103cf5:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0103cfa:	5d                   	pop    %ebp
c0103cfb:	c3                   	ret    

c0103cfc <_enclock_tick_event>:

static int
_enclock_tick_event(struct mm_struct *mm)
{ return 0; }
c0103cfc:	55                   	push   %ebp
c0103cfd:	89 e5                	mov    %esp,%ebp
c0103cff:	b8 00 00 00 00       	mov    $0x0,%eax
c0103d04:	5d                   	pop    %ebp
c0103d05:	c3                   	ret    

c0103d06 <lock_init>:
#define local_intr_restore(x)   __intr_restore(x);

typedef volatile bool lock_t;

static inline void
lock_init(lock_t *lock) {
c0103d06:	55                   	push   %ebp
c0103d07:	89 e5                	mov    %esp,%ebp
    *lock = 0;
c0103d09:	8b 45 08             	mov    0x8(%ebp),%eax
c0103d0c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
c0103d12:	90                   	nop
c0103d13:	5d                   	pop    %ebp
c0103d14:	c3                   	ret    

c0103d15 <mm_count>:
bool user_mem_check(struct mm_struct *mm, uintptr_t start, size_t len, bool write);
bool copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable);
bool copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len);

static inline int
mm_count(struct mm_struct *mm) {
c0103d15:	55                   	push   %ebp
c0103d16:	89 e5                	mov    %esp,%ebp
    return mm->mm_count;
c0103d18:	8b 45 08             	mov    0x8(%ebp),%eax
c0103d1b:	8b 40 18             	mov    0x18(%eax),%eax
}
c0103d1e:	5d                   	pop    %ebp
c0103d1f:	c3                   	ret    

c0103d20 <set_mm_count>:

static inline void
set_mm_count(struct mm_struct *mm, int val) {
c0103d20:	55                   	push   %ebp
c0103d21:	89 e5                	mov    %esp,%ebp
    mm->mm_count = val;
c0103d23:	8b 45 08             	mov    0x8(%ebp),%eax
c0103d26:	8b 55 0c             	mov    0xc(%ebp),%edx
c0103d29:	89 50 18             	mov    %edx,0x18(%eax)
}
c0103d2c:	90                   	nop
c0103d2d:	5d                   	pop    %ebp
c0103d2e:	c3                   	ret    

c0103d2f <pa2page>:
page2pa(struct Page *page) {
    return page2ppn(page) << PGSHIFT;
}

static inline struct Page *
pa2page(uintptr_t pa) {
c0103d2f:	55                   	push   %ebp
c0103d30:	89 e5                	mov    %esp,%ebp
c0103d32:	83 ec 08             	sub    $0x8,%esp
    if (PPN(pa) >= npage) {
c0103d35:	8b 45 08             	mov    0x8(%ebp),%eax
c0103d38:	c1 e8 0c             	shr    $0xc,%eax
c0103d3b:	89 c2                	mov    %eax,%edx
c0103d3d:	a1 80 ff 19 c0       	mov    0xc019ff80,%eax
c0103d42:	39 c2                	cmp    %eax,%edx
c0103d44:	72 14                	jb     c0103d5a <pa2page+0x2b>
        panic("pa2page called with invalid pa");
c0103d46:	83 ec 04             	sub    $0x4,%esp
c0103d49:	68 ac c7 10 c0       	push   $0xc010c7ac
c0103d4e:	6a 5e                	push   $0x5e
c0103d50:	68 cb c7 10 c0       	push   $0xc010c7cb
c0103d55:	e8 9e c6 ff ff       	call   c01003f8 <__panic>
    }
    return &pages[PPN(pa)];
c0103d5a:	a1 98 21 1a c0       	mov    0xc01a2198,%eax
c0103d5f:	8b 55 08             	mov    0x8(%ebp),%edx
c0103d62:	c1 ea 0c             	shr    $0xc,%edx
c0103d65:	c1 e2 05             	shl    $0x5,%edx
c0103d68:	01 d0                	add    %edx,%eax
}
c0103d6a:	c9                   	leave  
c0103d6b:	c3                   	ret    

c0103d6c <pde2page>:
    }
    return pa2page(PTE_ADDR(pte));
}

static inline struct Page *
pde2page(pde_t pde) {
c0103d6c:	55                   	push   %ebp
c0103d6d:	89 e5                	mov    %esp,%ebp
c0103d6f:	83 ec 08             	sub    $0x8,%esp
    return pa2page(PDE_ADDR(pde));
c0103d72:	8b 45 08             	mov    0x8(%ebp),%eax
c0103d75:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0103d7a:	83 ec 0c             	sub    $0xc,%esp
c0103d7d:	50                   	push   %eax
c0103d7e:	e8 ac ff ff ff       	call   c0103d2f <pa2page>
c0103d83:	83 c4 10             	add    $0x10,%esp
}
c0103d86:	c9                   	leave  
c0103d87:	c3                   	ret    

c0103d88 <mm_create>:
static void check_vma_struct(void);
static void check_pgfault(void);

// mm_create -  alloc a mm_struct & initialize it.
struct mm_struct *
mm_create(void) {
c0103d88:	55                   	push   %ebp
c0103d89:	89 e5                	mov    %esp,%ebp
c0103d8b:	83 ec 18             	sub    $0x18,%esp
    struct mm_struct *mm = kmalloc(sizeof(struct mm_struct));
c0103d8e:	83 ec 0c             	sub    $0xc,%esp
c0103d91:	6a 20                	push   $0x20
c0103d93:	e8 16 1b 00 00       	call   c01058ae <kmalloc>
c0103d98:	83 c4 10             	add    $0x10,%esp
c0103d9b:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (mm != NULL) {
c0103d9e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0103da2:	74 7d                	je     c0103e21 <mm_create+0x99>
        list_init(&(mm->mmap_list));
c0103da4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103da7:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0103daa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103dad:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0103db0:	89 50 04             	mov    %edx,0x4(%eax)
c0103db3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103db6:	8b 50 04             	mov    0x4(%eax),%edx
c0103db9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103dbc:	89 10                	mov    %edx,(%eax)
        mm->mmap_cache = NULL;
c0103dbe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103dc1:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        mm->pgdir = NULL;
c0103dc8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103dcb:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        mm->map_count = 0;
c0103dd2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103dd5:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)

        if (swap_init_ok) swap_init_mm(mm);
c0103ddc:	a1 6c ff 19 c0       	mov    0xc019ff6c,%eax
c0103de1:	85 c0                	test   %eax,%eax
c0103de3:	74 10                	je     c0103df5 <mm_create+0x6d>
c0103de5:	83 ec 0c             	sub    $0xc,%esp
c0103de8:	ff 75 f4             	pushl  -0xc(%ebp)
c0103deb:	e8 3a 1d 00 00       	call   c0105b2a <swap_init_mm>
c0103df0:	83 c4 10             	add    $0x10,%esp
c0103df3:	eb 0a                	jmp    c0103dff <mm_create+0x77>
        else mm->sm_priv = NULL;
c0103df5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103df8:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
        
        set_mm_count(mm, 0);
c0103dff:	83 ec 08             	sub    $0x8,%esp
c0103e02:	6a 00                	push   $0x0
c0103e04:	ff 75 f4             	pushl  -0xc(%ebp)
c0103e07:	e8 14 ff ff ff       	call   c0103d20 <set_mm_count>
c0103e0c:	83 c4 10             	add    $0x10,%esp
        lock_init(&(mm->mm_lock));
c0103e0f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103e12:	83 c0 1c             	add    $0x1c,%eax
c0103e15:	83 ec 0c             	sub    $0xc,%esp
c0103e18:	50                   	push   %eax
c0103e19:	e8 e8 fe ff ff       	call   c0103d06 <lock_init>
c0103e1e:	83 c4 10             	add    $0x10,%esp
    }    
    return mm;
c0103e21:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0103e24:	c9                   	leave  
c0103e25:	c3                   	ret    

c0103e26 <vma_create>:

// vma_create - alloc a vma_struct & initialize it. (addr range: vm_start~vm_end)
struct vma_struct *
vma_create(uintptr_t vm_start, uintptr_t vm_end, uint32_t vm_flags) {
c0103e26:	55                   	push   %ebp
c0103e27:	89 e5                	mov    %esp,%ebp
c0103e29:	83 ec 18             	sub    $0x18,%esp
    struct vma_struct *vma = kmalloc(sizeof(struct vma_struct));
c0103e2c:	83 ec 0c             	sub    $0xc,%esp
c0103e2f:	6a 18                	push   $0x18
c0103e31:	e8 78 1a 00 00       	call   c01058ae <kmalloc>
c0103e36:	83 c4 10             	add    $0x10,%esp
c0103e39:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (vma != NULL) {
c0103e3c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0103e40:	74 1b                	je     c0103e5d <vma_create+0x37>
        vma->vm_start = vm_start;
c0103e42:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103e45:	8b 55 08             	mov    0x8(%ebp),%edx
c0103e48:	89 50 04             	mov    %edx,0x4(%eax)
        vma->vm_end = vm_end;
c0103e4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103e4e:	8b 55 0c             	mov    0xc(%ebp),%edx
c0103e51:	89 50 08             	mov    %edx,0x8(%eax)
        vma->vm_flags = vm_flags;
c0103e54:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103e57:	8b 55 10             	mov    0x10(%ebp),%edx
c0103e5a:	89 50 0c             	mov    %edx,0xc(%eax)
    }
    return vma;
c0103e5d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0103e60:	c9                   	leave  
c0103e61:	c3                   	ret    

c0103e62 <find_vma>:


// find_vma - find a vma  (vma->vm_start <= addr <= vma_vm_end)
struct vma_struct *
find_vma(struct mm_struct *mm, uintptr_t addr) {
c0103e62:	55                   	push   %ebp
c0103e63:	89 e5                	mov    %esp,%ebp
c0103e65:	83 ec 20             	sub    $0x20,%esp
    struct vma_struct *vma = NULL;
c0103e68:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    if (mm != NULL) {
c0103e6f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0103e73:	0f 84 95 00 00 00    	je     c0103f0e <find_vma+0xac>
        vma = mm->mmap_cache;
c0103e79:	8b 45 08             	mov    0x8(%ebp),%eax
c0103e7c:	8b 40 08             	mov    0x8(%eax),%eax
c0103e7f:	89 45 fc             	mov    %eax,-0x4(%ebp)
        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
c0103e82:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0103e86:	74 16                	je     c0103e9e <find_vma+0x3c>
c0103e88:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103e8b:	8b 40 04             	mov    0x4(%eax),%eax
c0103e8e:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0103e91:	77 0b                	ja     c0103e9e <find_vma+0x3c>
c0103e93:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103e96:	8b 40 08             	mov    0x8(%eax),%eax
c0103e99:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0103e9c:	77 61                	ja     c0103eff <find_vma+0x9d>
                bool found = 0;
c0103e9e:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
                list_entry_t *list = &(mm->mmap_list), *le = list;
c0103ea5:	8b 45 08             	mov    0x8(%ebp),%eax
c0103ea8:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103eab:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103eae:	89 45 f4             	mov    %eax,-0xc(%ebp)
                while ((le = list_next(le)) != list) {
c0103eb1:	eb 28                	jmp    c0103edb <find_vma+0x79>
                    vma = le2vma(le, list_link);
c0103eb3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103eb6:	83 e8 10             	sub    $0x10,%eax
c0103eb9:	89 45 fc             	mov    %eax,-0x4(%ebp)
                    if (vma->vm_start<=addr && addr < vma->vm_end) {
c0103ebc:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103ebf:	8b 40 04             	mov    0x4(%eax),%eax
c0103ec2:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0103ec5:	77 14                	ja     c0103edb <find_vma+0x79>
c0103ec7:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103eca:	8b 40 08             	mov    0x8(%eax),%eax
c0103ecd:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0103ed0:	76 09                	jbe    c0103edb <find_vma+0x79>
                        found = 1;
c0103ed2:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
                        break;
c0103ed9:	eb 17                	jmp    c0103ef2 <find_vma+0x90>
c0103edb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103ede:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0103ee1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103ee4:	8b 40 04             	mov    0x4(%eax),%eax
    if (mm != NULL) {
        vma = mm->mmap_cache;
        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
                bool found = 0;
                list_entry_t *list = &(mm->mmap_list), *le = list;
                while ((le = list_next(le)) != list) {
c0103ee7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103eea:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103eed:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0103ef0:	75 c1                	jne    c0103eb3 <find_vma+0x51>
                    if (vma->vm_start<=addr && addr < vma->vm_end) {
                        found = 1;
                        break;
                    }
                }
                if (!found) {
c0103ef2:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
c0103ef6:	75 07                	jne    c0103eff <find_vma+0x9d>
                    vma = NULL;
c0103ef8:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
                }
        }
        if (vma != NULL) {
c0103eff:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0103f03:	74 09                	je     c0103f0e <find_vma+0xac>
            mm->mmap_cache = vma;
c0103f05:	8b 45 08             	mov    0x8(%ebp),%eax
c0103f08:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0103f0b:	89 50 08             	mov    %edx,0x8(%eax)
        }
    }
    return vma;
c0103f0e:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0103f11:	c9                   	leave  
c0103f12:	c3                   	ret    

c0103f13 <check_vma_overlap>:


// check_vma_overlap - check if vma1 overlaps vma2 ?
static inline void
check_vma_overlap(struct vma_struct *prev, struct vma_struct *next) {
c0103f13:	55                   	push   %ebp
c0103f14:	89 e5                	mov    %esp,%ebp
c0103f16:	83 ec 08             	sub    $0x8,%esp
    assert(prev->vm_start < prev->vm_end);
c0103f19:	8b 45 08             	mov    0x8(%ebp),%eax
c0103f1c:	8b 50 04             	mov    0x4(%eax),%edx
c0103f1f:	8b 45 08             	mov    0x8(%ebp),%eax
c0103f22:	8b 40 08             	mov    0x8(%eax),%eax
c0103f25:	39 c2                	cmp    %eax,%edx
c0103f27:	72 16                	jb     c0103f3f <check_vma_overlap+0x2c>
c0103f29:	68 d9 c7 10 c0       	push   $0xc010c7d9
c0103f2e:	68 f7 c7 10 c0       	push   $0xc010c7f7
c0103f33:	6a 6b                	push   $0x6b
c0103f35:	68 0c c8 10 c0       	push   $0xc010c80c
c0103f3a:	e8 b9 c4 ff ff       	call   c01003f8 <__panic>
    assert(prev->vm_end <= next->vm_start);
c0103f3f:	8b 45 08             	mov    0x8(%ebp),%eax
c0103f42:	8b 50 08             	mov    0x8(%eax),%edx
c0103f45:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103f48:	8b 40 04             	mov    0x4(%eax),%eax
c0103f4b:	39 c2                	cmp    %eax,%edx
c0103f4d:	76 16                	jbe    c0103f65 <check_vma_overlap+0x52>
c0103f4f:	68 1c c8 10 c0       	push   $0xc010c81c
c0103f54:	68 f7 c7 10 c0       	push   $0xc010c7f7
c0103f59:	6a 6c                	push   $0x6c
c0103f5b:	68 0c c8 10 c0       	push   $0xc010c80c
c0103f60:	e8 93 c4 ff ff       	call   c01003f8 <__panic>
    assert(next->vm_start < next->vm_end);
c0103f65:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103f68:	8b 50 04             	mov    0x4(%eax),%edx
c0103f6b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103f6e:	8b 40 08             	mov    0x8(%eax),%eax
c0103f71:	39 c2                	cmp    %eax,%edx
c0103f73:	72 16                	jb     c0103f8b <check_vma_overlap+0x78>
c0103f75:	68 3b c8 10 c0       	push   $0xc010c83b
c0103f7a:	68 f7 c7 10 c0       	push   $0xc010c7f7
c0103f7f:	6a 6d                	push   $0x6d
c0103f81:	68 0c c8 10 c0       	push   $0xc010c80c
c0103f86:	e8 6d c4 ff ff       	call   c01003f8 <__panic>
}
c0103f8b:	90                   	nop
c0103f8c:	c9                   	leave  
c0103f8d:	c3                   	ret    

c0103f8e <insert_vma_struct>:


// insert_vma_struct -insert vma in mm's list link
void
insert_vma_struct(struct mm_struct *mm, struct vma_struct *vma) {
c0103f8e:	55                   	push   %ebp
c0103f8f:	89 e5                	mov    %esp,%ebp
c0103f91:	83 ec 38             	sub    $0x38,%esp
    assert(vma->vm_start < vma->vm_end);
c0103f94:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103f97:	8b 50 04             	mov    0x4(%eax),%edx
c0103f9a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103f9d:	8b 40 08             	mov    0x8(%eax),%eax
c0103fa0:	39 c2                	cmp    %eax,%edx
c0103fa2:	72 16                	jb     c0103fba <insert_vma_struct+0x2c>
c0103fa4:	68 59 c8 10 c0       	push   $0xc010c859
c0103fa9:	68 f7 c7 10 c0       	push   $0xc010c7f7
c0103fae:	6a 74                	push   $0x74
c0103fb0:	68 0c c8 10 c0       	push   $0xc010c80c
c0103fb5:	e8 3e c4 ff ff       	call   c01003f8 <__panic>
    list_entry_t *list = &(mm->mmap_list);
c0103fba:	8b 45 08             	mov    0x8(%ebp),%eax
c0103fbd:	89 45 ec             	mov    %eax,-0x14(%ebp)
    list_entry_t *le_prev = list, *le_next;
c0103fc0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103fc3:	89 45 f4             	mov    %eax,-0xc(%ebp)

        list_entry_t *le = list;
c0103fc6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103fc9:	89 45 f0             	mov    %eax,-0x10(%ebp)
        while ((le = list_next(le)) != list) {
c0103fcc:	eb 1f                	jmp    c0103fed <insert_vma_struct+0x5f>
            struct vma_struct *mmap_prev = le2vma(le, list_link);
c0103fce:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103fd1:	83 e8 10             	sub    $0x10,%eax
c0103fd4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            if (mmap_prev->vm_start > vma->vm_start) {
c0103fd7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103fda:	8b 50 04             	mov    0x4(%eax),%edx
c0103fdd:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103fe0:	8b 40 04             	mov    0x4(%eax),%eax
c0103fe3:	39 c2                	cmp    %eax,%edx
c0103fe5:	77 1f                	ja     c0104006 <insert_vma_struct+0x78>
                break;
            }
            le_prev = le;
c0103fe7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103fea:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103fed:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103ff0:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0103ff3:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0103ff6:	8b 40 04             	mov    0x4(%eax),%eax
    assert(vma->vm_start < vma->vm_end);
    list_entry_t *list = &(mm->mmap_list);
    list_entry_t *le_prev = list, *le_next;

        list_entry_t *le = list;
        while ((le = list_next(le)) != list) {
c0103ff9:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103ffc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103fff:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0104002:	75 ca                	jne    c0103fce <insert_vma_struct+0x40>
c0104004:	eb 01                	jmp    c0104007 <insert_vma_struct+0x79>
            struct vma_struct *mmap_prev = le2vma(le, list_link);
            if (mmap_prev->vm_start > vma->vm_start) {
                break;
c0104006:	90                   	nop
c0104007:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010400a:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010400d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104010:	8b 40 04             	mov    0x4(%eax),%eax
            }
            le_prev = le;
        }

    le_next = list_next(le_prev);
c0104013:	89 45 dc             	mov    %eax,-0x24(%ebp)

    /* check overlap */
    if (le_prev != list) {
c0104016:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104019:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010401c:	74 15                	je     c0104033 <insert_vma_struct+0xa5>
        check_vma_overlap(le2vma(le_prev, list_link), vma);
c010401e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104021:	83 e8 10             	sub    $0x10,%eax
c0104024:	83 ec 08             	sub    $0x8,%esp
c0104027:	ff 75 0c             	pushl  0xc(%ebp)
c010402a:	50                   	push   %eax
c010402b:	e8 e3 fe ff ff       	call   c0103f13 <check_vma_overlap>
c0104030:	83 c4 10             	add    $0x10,%esp
    }
    if (le_next != list) {
c0104033:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104036:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0104039:	74 15                	je     c0104050 <insert_vma_struct+0xc2>
        check_vma_overlap(vma, le2vma(le_next, list_link));
c010403b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010403e:	83 e8 10             	sub    $0x10,%eax
c0104041:	83 ec 08             	sub    $0x8,%esp
c0104044:	50                   	push   %eax
c0104045:	ff 75 0c             	pushl  0xc(%ebp)
c0104048:	e8 c6 fe ff ff       	call   c0103f13 <check_vma_overlap>
c010404d:	83 c4 10             	add    $0x10,%esp
    }

    vma->vm_mm = mm;
c0104050:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104053:	8b 55 08             	mov    0x8(%ebp),%edx
c0104056:	89 10                	mov    %edx,(%eax)
    list_add_after(le_prev, &(vma->list_link));
c0104058:	8b 45 0c             	mov    0xc(%ebp),%eax
c010405b:	8d 50 10             	lea    0x10(%eax),%edx
c010405e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104061:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0104064:	89 55 d4             	mov    %edx,-0x2c(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0104067:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010406a:	8b 40 04             	mov    0x4(%eax),%eax
c010406d:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0104070:	89 55 d0             	mov    %edx,-0x30(%ebp)
c0104073:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0104076:	89 55 cc             	mov    %edx,-0x34(%ebp)
c0104079:	89 45 c8             	mov    %eax,-0x38(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010407c:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010407f:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0104082:	89 10                	mov    %edx,(%eax)
c0104084:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0104087:	8b 10                	mov    (%eax),%edx
c0104089:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010408c:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010408f:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0104092:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0104095:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0104098:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010409b:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010409e:	89 10                	mov    %edx,(%eax)

    mm->map_count ++;
c01040a0:	8b 45 08             	mov    0x8(%ebp),%eax
c01040a3:	8b 40 10             	mov    0x10(%eax),%eax
c01040a6:	8d 50 01             	lea    0x1(%eax),%edx
c01040a9:	8b 45 08             	mov    0x8(%ebp),%eax
c01040ac:	89 50 10             	mov    %edx,0x10(%eax)
}
c01040af:	90                   	nop
c01040b0:	c9                   	leave  
c01040b1:	c3                   	ret    

c01040b2 <mm_destroy>:

// mm_destroy - free mm and mm internal fields
void
mm_destroy(struct mm_struct *mm) {
c01040b2:	55                   	push   %ebp
c01040b3:	89 e5                	mov    %esp,%ebp
c01040b5:	83 ec 28             	sub    $0x28,%esp
    assert(mm_count(mm) == 0);
c01040b8:	ff 75 08             	pushl  0x8(%ebp)
c01040bb:	e8 55 fc ff ff       	call   c0103d15 <mm_count>
c01040c0:	83 c4 04             	add    $0x4,%esp
c01040c3:	85 c0                	test   %eax,%eax
c01040c5:	74 19                	je     c01040e0 <mm_destroy+0x2e>
c01040c7:	68 75 c8 10 c0       	push   $0xc010c875
c01040cc:	68 f7 c7 10 c0       	push   $0xc010c7f7
c01040d1:	68 94 00 00 00       	push   $0x94
c01040d6:	68 0c c8 10 c0       	push   $0xc010c80c
c01040db:	e8 18 c3 ff ff       	call   c01003f8 <__panic>

    list_entry_t *list = &(mm->mmap_list), *le;
c01040e0:	8b 45 08             	mov    0x8(%ebp),%eax
c01040e3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(list)) != list) {
c01040e6:	eb 3a                	jmp    c0104122 <mm_destroy+0x70>
c01040e8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01040eb:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c01040ee:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01040f1:	8b 40 04             	mov    0x4(%eax),%eax
c01040f4:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01040f7:	8b 12                	mov    (%edx),%edx
c01040f9:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c01040fc:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c01040ff:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104102:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0104105:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0104108:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010410b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010410e:	89 10                	mov    %edx,(%eax)
        list_del(le);
        kfree(le2vma(le, list_link));  //kfree vma        
c0104110:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104113:	83 e8 10             	sub    $0x10,%eax
c0104116:	83 ec 0c             	sub    $0xc,%esp
c0104119:	50                   	push   %eax
c010411a:	e8 a7 17 00 00       	call   c01058c6 <kfree>
c010411f:	83 c4 10             	add    $0x10,%esp
c0104122:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104125:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0104128:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010412b:	8b 40 04             	mov    0x4(%eax),%eax
void
mm_destroy(struct mm_struct *mm) {
    assert(mm_count(mm) == 0);

    list_entry_t *list = &(mm->mmap_list), *le;
    while ((le = list_next(list)) != list) {
c010412e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104131:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104134:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104137:	75 af                	jne    c01040e8 <mm_destroy+0x36>
        list_del(le);
        kfree(le2vma(le, list_link));  //kfree vma        
    }
    kfree(mm); //kfree mm
c0104139:	83 ec 0c             	sub    $0xc,%esp
c010413c:	ff 75 08             	pushl  0x8(%ebp)
c010413f:	e8 82 17 00 00       	call   c01058c6 <kfree>
c0104144:	83 c4 10             	add    $0x10,%esp
    mm=NULL;
c0104147:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
}
c010414e:	90                   	nop
c010414f:	c9                   	leave  
c0104150:	c3                   	ret    

c0104151 <mm_map>:

int
mm_map(struct mm_struct *mm, uintptr_t addr, size_t len, uint32_t vm_flags,
       struct vma_struct **vma_store) {
c0104151:	55                   	push   %ebp
c0104152:	89 e5                	mov    %esp,%ebp
c0104154:	83 ec 28             	sub    $0x28,%esp
    uintptr_t start = ROUNDDOWN(addr, PGSIZE), end = ROUNDUP(addr + len, PGSIZE);
c0104157:	8b 45 0c             	mov    0xc(%ebp),%eax
c010415a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010415d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104160:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0104165:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0104168:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
c010416f:	8b 55 0c             	mov    0xc(%ebp),%edx
c0104172:	8b 45 10             	mov    0x10(%ebp),%eax
c0104175:	01 c2                	add    %eax,%edx
c0104177:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010417a:	01 d0                	add    %edx,%eax
c010417c:	83 e8 01             	sub    $0x1,%eax
c010417f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0104182:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104185:	ba 00 00 00 00       	mov    $0x0,%edx
c010418a:	f7 75 e8             	divl   -0x18(%ebp)
c010418d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104190:	29 d0                	sub    %edx,%eax
c0104192:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if (!USER_ACCESS(start, end)) {
c0104195:	81 7d ec ff ff 1f 00 	cmpl   $0x1fffff,-0x14(%ebp)
c010419c:	76 11                	jbe    c01041af <mm_map+0x5e>
c010419e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01041a1:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01041a4:	73 09                	jae    c01041af <mm_map+0x5e>
c01041a6:	81 7d e0 00 00 00 b0 	cmpl   $0xb0000000,-0x20(%ebp)
c01041ad:	76 0a                	jbe    c01041b9 <mm_map+0x68>
        return -E_INVAL;
c01041af:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c01041b4:	e9 9e 00 00 00       	jmp    c0104257 <mm_map+0x106>
    }

    assert(mm != NULL);
c01041b9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01041bd:	75 19                	jne    c01041d8 <mm_map+0x87>
c01041bf:	68 87 c8 10 c0       	push   $0xc010c887
c01041c4:	68 f7 c7 10 c0       	push   $0xc010c7f7
c01041c9:	68 a7 00 00 00       	push   $0xa7
c01041ce:	68 0c c8 10 c0       	push   $0xc010c80c
c01041d3:	e8 20 c2 ff ff       	call   c01003f8 <__panic>

    int ret = -E_INVAL;
c01041d8:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)

    struct vma_struct *vma;
    if ((vma = find_vma(mm, start)) != NULL && end > vma->vm_start) {
c01041df:	83 ec 08             	sub    $0x8,%esp
c01041e2:	ff 75 ec             	pushl  -0x14(%ebp)
c01041e5:	ff 75 08             	pushl  0x8(%ebp)
c01041e8:	e8 75 fc ff ff       	call   c0103e62 <find_vma>
c01041ed:	83 c4 10             	add    $0x10,%esp
c01041f0:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01041f3:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c01041f7:	74 0b                	je     c0104204 <mm_map+0xb3>
c01041f9:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01041fc:	8b 40 04             	mov    0x4(%eax),%eax
c01041ff:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0104202:	72 4c                	jb     c0104250 <mm_map+0xff>
        goto out;
    }
    ret = -E_NO_MEM;
c0104204:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    if ((vma = vma_create(start, end, vm_flags)) == NULL) {
c010420b:	83 ec 04             	sub    $0x4,%esp
c010420e:	ff 75 14             	pushl  0x14(%ebp)
c0104211:	ff 75 e0             	pushl  -0x20(%ebp)
c0104214:	ff 75 ec             	pushl  -0x14(%ebp)
c0104217:	e8 0a fc ff ff       	call   c0103e26 <vma_create>
c010421c:	83 c4 10             	add    $0x10,%esp
c010421f:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0104222:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0104226:	74 2b                	je     c0104253 <mm_map+0x102>
        goto out;
    }
    insert_vma_struct(mm, vma);
c0104228:	83 ec 08             	sub    $0x8,%esp
c010422b:	ff 75 dc             	pushl  -0x24(%ebp)
c010422e:	ff 75 08             	pushl  0x8(%ebp)
c0104231:	e8 58 fd ff ff       	call   c0103f8e <insert_vma_struct>
c0104236:	83 c4 10             	add    $0x10,%esp
    if (vma_store != NULL) {
c0104239:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c010423d:	74 08                	je     c0104247 <mm_map+0xf6>
        *vma_store = vma;
c010423f:	8b 45 18             	mov    0x18(%ebp),%eax
c0104242:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0104245:	89 10                	mov    %edx,(%eax)
    }
    ret = 0;
c0104247:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010424e:	eb 04                	jmp    c0104254 <mm_map+0x103>

    int ret = -E_INVAL;

    struct vma_struct *vma;
    if ((vma = find_vma(mm, start)) != NULL && end > vma->vm_start) {
        goto out;
c0104250:	90                   	nop
c0104251:	eb 01                	jmp    c0104254 <mm_map+0x103>
    }
    ret = -E_NO_MEM;

    if ((vma = vma_create(start, end, vm_flags)) == NULL) {
        goto out;
c0104253:	90                   	nop
        *vma_store = vma;
    }
    ret = 0;

out:
    return ret;
c0104254:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0104257:	c9                   	leave  
c0104258:	c3                   	ret    

c0104259 <dup_mmap>:

int
dup_mmap(struct mm_struct *to, struct mm_struct *from) {
c0104259:	55                   	push   %ebp
c010425a:	89 e5                	mov    %esp,%ebp
c010425c:	53                   	push   %ebx
c010425d:	83 ec 24             	sub    $0x24,%esp
    assert(to != NULL && from != NULL);
c0104260:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104264:	74 06                	je     c010426c <dup_mmap+0x13>
c0104266:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010426a:	75 19                	jne    c0104285 <dup_mmap+0x2c>
c010426c:	68 92 c8 10 c0       	push   $0xc010c892
c0104271:	68 f7 c7 10 c0       	push   $0xc010c7f7
c0104276:	68 c0 00 00 00       	push   $0xc0
c010427b:	68 0c c8 10 c0       	push   $0xc010c80c
c0104280:	e8 73 c1 ff ff       	call   c01003f8 <__panic>
    list_entry_t *list = &(from->mmap_list), *le = list;
c0104285:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104288:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010428b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010428e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_prev(le)) != list) {
c0104291:	e9 86 00 00 00       	jmp    c010431c <dup_mmap+0xc3>
        struct vma_struct *vma, *nvma;
        vma = le2vma(le, list_link);
c0104296:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104299:	83 e8 10             	sub    $0x10,%eax
c010429c:	89 45 ec             	mov    %eax,-0x14(%ebp)
        nvma = vma_create(vma->vm_start, vma->vm_end, vma->vm_flags);
c010429f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01042a2:	8b 48 0c             	mov    0xc(%eax),%ecx
c01042a5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01042a8:	8b 50 08             	mov    0x8(%eax),%edx
c01042ab:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01042ae:	8b 40 04             	mov    0x4(%eax),%eax
c01042b1:	83 ec 04             	sub    $0x4,%esp
c01042b4:	51                   	push   %ecx
c01042b5:	52                   	push   %edx
c01042b6:	50                   	push   %eax
c01042b7:	e8 6a fb ff ff       	call   c0103e26 <vma_create>
c01042bc:	83 c4 10             	add    $0x10,%esp
c01042bf:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (nvma == NULL) {
c01042c2:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01042c6:	75 07                	jne    c01042cf <dup_mmap+0x76>
            return -E_NO_MEM;
c01042c8:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c01042cd:	eb 6c                	jmp    c010433b <dup_mmap+0xe2>
        }

        insert_vma_struct(to, nvma);
c01042cf:	83 ec 08             	sub    $0x8,%esp
c01042d2:	ff 75 e8             	pushl  -0x18(%ebp)
c01042d5:	ff 75 08             	pushl  0x8(%ebp)
c01042d8:	e8 b1 fc ff ff       	call   c0103f8e <insert_vma_struct>
c01042dd:	83 c4 10             	add    $0x10,%esp

        bool share = 0;
c01042e0:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
c01042e7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01042ea:	8b 58 08             	mov    0x8(%eax),%ebx
c01042ed:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01042f0:	8b 48 04             	mov    0x4(%eax),%ecx
c01042f3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01042f6:	8b 50 0c             	mov    0xc(%eax),%edx
c01042f9:	8b 45 08             	mov    0x8(%ebp),%eax
c01042fc:	8b 40 0c             	mov    0xc(%eax),%eax
c01042ff:	83 ec 0c             	sub    $0xc,%esp
c0104302:	ff 75 e4             	pushl  -0x1c(%ebp)
c0104305:	53                   	push   %ebx
c0104306:	51                   	push   %ecx
c0104307:	52                   	push   %edx
c0104308:	50                   	push   %eax
c0104309:	e8 06 3f 00 00       	call   c0108214 <copy_range>
c010430e:	83 c4 20             	add    $0x20,%esp
c0104311:	85 c0                	test   %eax,%eax
c0104313:	74 07                	je     c010431c <dup_mmap+0xc3>
            return -E_NO_MEM;
c0104315:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010431a:	eb 1f                	jmp    c010433b <dup_mmap+0xe2>
c010431c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010431f:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c0104322:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104325:	8b 00                	mov    (%eax),%eax

int
dup_mmap(struct mm_struct *to, struct mm_struct *from) {
    assert(to != NULL && from != NULL);
    list_entry_t *list = &(from->mmap_list), *le = list;
    while ((le = list_prev(le)) != list) {
c0104327:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010432a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010432d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104330:	0f 85 60 ff ff ff    	jne    c0104296 <dup_mmap+0x3d>
        bool share = 0;
        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
            return -E_NO_MEM;
        }
    }
    return 0;
c0104336:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010433b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c010433e:	c9                   	leave  
c010433f:	c3                   	ret    

c0104340 <exit_mmap>:

void
exit_mmap(struct mm_struct *mm) {
c0104340:	55                   	push   %ebp
c0104341:	89 e5                	mov    %esp,%ebp
c0104343:	83 ec 28             	sub    $0x28,%esp
    assert(mm != NULL && mm_count(mm) == 0);
c0104346:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010434a:	74 0f                	je     c010435b <exit_mmap+0x1b>
c010434c:	ff 75 08             	pushl  0x8(%ebp)
c010434f:	e8 c1 f9 ff ff       	call   c0103d15 <mm_count>
c0104354:	83 c4 04             	add    $0x4,%esp
c0104357:	85 c0                	test   %eax,%eax
c0104359:	74 19                	je     c0104374 <exit_mmap+0x34>
c010435b:	68 b0 c8 10 c0       	push   $0xc010c8b0
c0104360:	68 f7 c7 10 c0       	push   $0xc010c7f7
c0104365:	68 d6 00 00 00       	push   $0xd6
c010436a:	68 0c c8 10 c0       	push   $0xc010c80c
c010436f:	e8 84 c0 ff ff       	call   c01003f8 <__panic>
    pde_t *pgdir = mm->pgdir;
c0104374:	8b 45 08             	mov    0x8(%ebp),%eax
c0104377:	8b 40 0c             	mov    0xc(%eax),%eax
c010437a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    list_entry_t *list = &(mm->mmap_list), *le = list;
c010437d:	8b 45 08             	mov    0x8(%ebp),%eax
c0104380:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0104383:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104386:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c0104389:	eb 25                	jmp    c01043b0 <exit_mmap+0x70>
        struct vma_struct *vma = le2vma(le, list_link);
c010438b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010438e:	83 e8 10             	sub    $0x10,%eax
c0104391:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
c0104394:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104397:	8b 50 08             	mov    0x8(%eax),%edx
c010439a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010439d:	8b 40 04             	mov    0x4(%eax),%eax
c01043a0:	83 ec 04             	sub    $0x4,%esp
c01043a3:	52                   	push   %edx
c01043a4:	50                   	push   %eax
c01043a5:	ff 75 f0             	pushl  -0x10(%ebp)
c01043a8:	e8 a0 3c 00 00       	call   c010804d <unmap_range>
c01043ad:	83 c4 10             	add    $0x10,%esp
c01043b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01043b3:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01043b6:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01043b9:	8b 40 04             	mov    0x4(%eax),%eax
void
exit_mmap(struct mm_struct *mm) {
    assert(mm != NULL && mm_count(mm) == 0);
    pde_t *pgdir = mm->pgdir;
    list_entry_t *list = &(mm->mmap_list), *le = list;
    while ((le = list_next(le)) != list) {
c01043bc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01043bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01043c2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01043c5:	75 c4                	jne    c010438b <exit_mmap+0x4b>
        struct vma_struct *vma = le2vma(le, list_link);
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
    }
    while ((le = list_next(le)) != list) {
c01043c7:	eb 25                	jmp    c01043ee <exit_mmap+0xae>
        struct vma_struct *vma = le2vma(le, list_link);
c01043c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01043cc:	83 e8 10             	sub    $0x10,%eax
c01043cf:	89 45 e0             	mov    %eax,-0x20(%ebp)
        exit_range(pgdir, vma->vm_start, vma->vm_end);
c01043d2:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01043d5:	8b 50 08             	mov    0x8(%eax),%edx
c01043d8:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01043db:	8b 40 04             	mov    0x4(%eax),%eax
c01043de:	83 ec 04             	sub    $0x4,%esp
c01043e1:	52                   	push   %edx
c01043e2:	50                   	push   %eax
c01043e3:	ff 75 f0             	pushl  -0x10(%ebp)
c01043e6:	e8 35 3d 00 00       	call   c0108120 <exit_range>
c01043eb:	83 c4 10             	add    $0x10,%esp
c01043ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01043f1:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01043f4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01043f7:	8b 40 04             	mov    0x4(%eax),%eax
    list_entry_t *list = &(mm->mmap_list), *le = list;
    while ((le = list_next(le)) != list) {
        struct vma_struct *vma = le2vma(le, list_link);
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
    }
    while ((le = list_next(le)) != list) {
c01043fa:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01043fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104400:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0104403:	75 c4                	jne    c01043c9 <exit_mmap+0x89>
        struct vma_struct *vma = le2vma(le, list_link);
        exit_range(pgdir, vma->vm_start, vma->vm_end);
    }
}
c0104405:	90                   	nop
c0104406:	c9                   	leave  
c0104407:	c3                   	ret    

c0104408 <copy_from_user>:

bool
copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable) {
c0104408:	55                   	push   %ebp
c0104409:	89 e5                	mov    %esp,%ebp
c010440b:	83 ec 08             	sub    $0x8,%esp
    if (!user_mem_check(mm, (uintptr_t)src, len, writable)) {
c010440e:	8b 45 10             	mov    0x10(%ebp),%eax
c0104411:	ff 75 18             	pushl  0x18(%ebp)
c0104414:	ff 75 14             	pushl  0x14(%ebp)
c0104417:	50                   	push   %eax
c0104418:	ff 75 08             	pushl  0x8(%ebp)
c010441b:	e8 b1 08 00 00       	call   c0104cd1 <user_mem_check>
c0104420:	83 c4 10             	add    $0x10,%esp
c0104423:	85 c0                	test   %eax,%eax
c0104425:	75 07                	jne    c010442e <copy_from_user+0x26>
        return 0;
c0104427:	b8 00 00 00 00       	mov    $0x0,%eax
c010442c:	eb 19                	jmp    c0104447 <copy_from_user+0x3f>
    }
    memcpy(dst, src, len);
c010442e:	83 ec 04             	sub    $0x4,%esp
c0104431:	ff 75 14             	pushl  0x14(%ebp)
c0104434:	ff 75 10             	pushl  0x10(%ebp)
c0104437:	ff 75 0c             	pushl  0xc(%ebp)
c010443a:	e8 e4 6f 00 00       	call   c010b423 <memcpy>
c010443f:	83 c4 10             	add    $0x10,%esp
    return 1;
c0104442:	b8 01 00 00 00       	mov    $0x1,%eax
}
c0104447:	c9                   	leave  
c0104448:	c3                   	ret    

c0104449 <copy_to_user>:

bool
copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len) {
c0104449:	55                   	push   %ebp
c010444a:	89 e5                	mov    %esp,%ebp
c010444c:	83 ec 08             	sub    $0x8,%esp
    if (!user_mem_check(mm, (uintptr_t)dst, len, 1)) {
c010444f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104452:	6a 01                	push   $0x1
c0104454:	ff 75 14             	pushl  0x14(%ebp)
c0104457:	50                   	push   %eax
c0104458:	ff 75 08             	pushl  0x8(%ebp)
c010445b:	e8 71 08 00 00       	call   c0104cd1 <user_mem_check>
c0104460:	83 c4 10             	add    $0x10,%esp
c0104463:	85 c0                	test   %eax,%eax
c0104465:	75 07                	jne    c010446e <copy_to_user+0x25>
        return 0;
c0104467:	b8 00 00 00 00       	mov    $0x0,%eax
c010446c:	eb 19                	jmp    c0104487 <copy_to_user+0x3e>
    }
    memcpy(dst, src, len);
c010446e:	83 ec 04             	sub    $0x4,%esp
c0104471:	ff 75 14             	pushl  0x14(%ebp)
c0104474:	ff 75 10             	pushl  0x10(%ebp)
c0104477:	ff 75 0c             	pushl  0xc(%ebp)
c010447a:	e8 a4 6f 00 00       	call   c010b423 <memcpy>
c010447f:	83 c4 10             	add    $0x10,%esp
    return 1;
c0104482:	b8 01 00 00 00       	mov    $0x1,%eax
}
c0104487:	c9                   	leave  
c0104488:	c3                   	ret    

c0104489 <vmm_init>:

// vmm_init - initialize virtual memory management
//          - now just call check_vmm to check correctness of vmm
void
vmm_init(void) {
c0104489:	55                   	push   %ebp
c010448a:	89 e5                	mov    %esp,%ebp
c010448c:	83 ec 08             	sub    $0x8,%esp
    check_vmm();
c010448f:	e8 03 00 00 00       	call   c0104497 <check_vmm>
}
c0104494:	90                   	nop
c0104495:	c9                   	leave  
c0104496:	c3                   	ret    

c0104497 <check_vmm>:

// check_vmm - check correctness of vmm
static void
check_vmm(void) {
c0104497:	55                   	push   %ebp
c0104498:	89 e5                	mov    %esp,%ebp
c010449a:	83 ec 18             	sub    $0x18,%esp
    size_t nr_free_pages_store = nr_free_pages();
c010449d:	e8 da 33 00 00       	call   c010787c <nr_free_pages>
c01044a2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    check_vma_struct();
c01044a5:	e8 18 00 00 00       	call   c01044c2 <check_vma_struct>
    check_pgfault();
c01044aa:	e8 10 04 00 00       	call   c01048bf <check_pgfault>

    cprintf("check_vmm() succeeded.\n");
c01044af:	83 ec 0c             	sub    $0xc,%esp
c01044b2:	68 d0 c8 10 c0       	push   $0xc010c8d0
c01044b7:	e8 d6 bd ff ff       	call   c0100292 <cprintf>
c01044bc:	83 c4 10             	add    $0x10,%esp
}
c01044bf:	90                   	nop
c01044c0:	c9                   	leave  
c01044c1:	c3                   	ret    

c01044c2 <check_vma_struct>:

static void
check_vma_struct(void) {
c01044c2:	55                   	push   %ebp
c01044c3:	89 e5                	mov    %esp,%ebp
c01044c5:	83 ec 58             	sub    $0x58,%esp
    size_t nr_free_pages_store = nr_free_pages();
c01044c8:	e8 af 33 00 00       	call   c010787c <nr_free_pages>
c01044cd:	89 45 ec             	mov    %eax,-0x14(%ebp)

    struct mm_struct *mm = mm_create();
c01044d0:	e8 b3 f8 ff ff       	call   c0103d88 <mm_create>
c01044d5:	89 45 e8             	mov    %eax,-0x18(%ebp)
    assert(mm != NULL);
c01044d8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01044dc:	75 19                	jne    c01044f7 <check_vma_struct+0x35>
c01044de:	68 87 c8 10 c0       	push   $0xc010c887
c01044e3:	68 f7 c7 10 c0       	push   $0xc010c7f7
c01044e8:	68 0c 01 00 00       	push   $0x10c
c01044ed:	68 0c c8 10 c0       	push   $0xc010c80c
c01044f2:	e8 01 bf ff ff       	call   c01003f8 <__panic>

    int step1 = 10, step2 = step1 * 10;
c01044f7:	c7 45 e4 0a 00 00 00 	movl   $0xa,-0x1c(%ebp)
c01044fe:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0104501:	89 d0                	mov    %edx,%eax
c0104503:	c1 e0 02             	shl    $0x2,%eax
c0104506:	01 d0                	add    %edx,%eax
c0104508:	01 c0                	add    %eax,%eax
c010450a:	89 45 e0             	mov    %eax,-0x20(%ebp)

    int i;
    for (i = step1; i >= 1; i --) {
c010450d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104510:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104513:	eb 5f                	jmp    c0104574 <check_vma_struct+0xb2>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c0104515:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0104518:	89 d0                	mov    %edx,%eax
c010451a:	c1 e0 02             	shl    $0x2,%eax
c010451d:	01 d0                	add    %edx,%eax
c010451f:	83 c0 02             	add    $0x2,%eax
c0104522:	89 c1                	mov    %eax,%ecx
c0104524:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0104527:	89 d0                	mov    %edx,%eax
c0104529:	c1 e0 02             	shl    $0x2,%eax
c010452c:	01 d0                	add    %edx,%eax
c010452e:	83 ec 04             	sub    $0x4,%esp
c0104531:	6a 00                	push   $0x0
c0104533:	51                   	push   %ecx
c0104534:	50                   	push   %eax
c0104535:	e8 ec f8 ff ff       	call   c0103e26 <vma_create>
c010453a:	83 c4 10             	add    $0x10,%esp
c010453d:	89 45 dc             	mov    %eax,-0x24(%ebp)
        assert(vma != NULL);
c0104540:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0104544:	75 19                	jne    c010455f <check_vma_struct+0x9d>
c0104546:	68 e8 c8 10 c0       	push   $0xc010c8e8
c010454b:	68 f7 c7 10 c0       	push   $0xc010c7f7
c0104550:	68 13 01 00 00       	push   $0x113
c0104555:	68 0c c8 10 c0       	push   $0xc010c80c
c010455a:	e8 99 be ff ff       	call   c01003f8 <__panic>
        insert_vma_struct(mm, vma);
c010455f:	83 ec 08             	sub    $0x8,%esp
c0104562:	ff 75 dc             	pushl  -0x24(%ebp)
c0104565:	ff 75 e8             	pushl  -0x18(%ebp)
c0104568:	e8 21 fa ff ff       	call   c0103f8e <insert_vma_struct>
c010456d:	83 c4 10             	add    $0x10,%esp
    assert(mm != NULL);

    int step1 = 10, step2 = step1 * 10;

    int i;
    for (i = step1; i >= 1; i --) {
c0104570:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0104574:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104578:	7f 9b                	jg     c0104515 <check_vma_struct+0x53>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    for (i = step1 + 1; i <= step2; i ++) {
c010457a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010457d:	83 c0 01             	add    $0x1,%eax
c0104580:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104583:	eb 5f                	jmp    c01045e4 <check_vma_struct+0x122>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c0104585:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0104588:	89 d0                	mov    %edx,%eax
c010458a:	c1 e0 02             	shl    $0x2,%eax
c010458d:	01 d0                	add    %edx,%eax
c010458f:	83 c0 02             	add    $0x2,%eax
c0104592:	89 c1                	mov    %eax,%ecx
c0104594:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0104597:	89 d0                	mov    %edx,%eax
c0104599:	c1 e0 02             	shl    $0x2,%eax
c010459c:	01 d0                	add    %edx,%eax
c010459e:	83 ec 04             	sub    $0x4,%esp
c01045a1:	6a 00                	push   $0x0
c01045a3:	51                   	push   %ecx
c01045a4:	50                   	push   %eax
c01045a5:	e8 7c f8 ff ff       	call   c0103e26 <vma_create>
c01045aa:	83 c4 10             	add    $0x10,%esp
c01045ad:	89 45 d8             	mov    %eax,-0x28(%ebp)
        assert(vma != NULL);
c01045b0:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c01045b4:	75 19                	jne    c01045cf <check_vma_struct+0x10d>
c01045b6:	68 e8 c8 10 c0       	push   $0xc010c8e8
c01045bb:	68 f7 c7 10 c0       	push   $0xc010c7f7
c01045c0:	68 19 01 00 00       	push   $0x119
c01045c5:	68 0c c8 10 c0       	push   $0xc010c80c
c01045ca:	e8 29 be ff ff       	call   c01003f8 <__panic>
        insert_vma_struct(mm, vma);
c01045cf:	83 ec 08             	sub    $0x8,%esp
c01045d2:	ff 75 d8             	pushl  -0x28(%ebp)
c01045d5:	ff 75 e8             	pushl  -0x18(%ebp)
c01045d8:	e8 b1 f9 ff ff       	call   c0103f8e <insert_vma_struct>
c01045dd:	83 c4 10             	add    $0x10,%esp
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    for (i = step1 + 1; i <= step2; i ++) {
c01045e0:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01045e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01045e7:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01045ea:	7e 99                	jle    c0104585 <check_vma_struct+0xc3>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    list_entry_t *le = list_next(&(mm->mmap_list));
c01045ec:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01045ef:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c01045f2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01045f5:	8b 40 04             	mov    0x4(%eax),%eax
c01045f8:	89 45 f0             	mov    %eax,-0x10(%ebp)

    for (i = 1; i <= step2; i ++) {
c01045fb:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
c0104602:	e9 81 00 00 00       	jmp    c0104688 <check_vma_struct+0x1c6>
        assert(le != &(mm->mmap_list));
c0104607:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010460a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010460d:	75 19                	jne    c0104628 <check_vma_struct+0x166>
c010460f:	68 f4 c8 10 c0       	push   $0xc010c8f4
c0104614:	68 f7 c7 10 c0       	push   $0xc010c7f7
c0104619:	68 20 01 00 00       	push   $0x120
c010461e:	68 0c c8 10 c0       	push   $0xc010c80c
c0104623:	e8 d0 bd ff ff       	call   c01003f8 <__panic>
        struct vma_struct *mmap = le2vma(le, list_link);
c0104628:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010462b:	83 e8 10             	sub    $0x10,%eax
c010462e:	89 45 d0             	mov    %eax,-0x30(%ebp)
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
c0104631:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0104634:	8b 48 04             	mov    0x4(%eax),%ecx
c0104637:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010463a:	89 d0                	mov    %edx,%eax
c010463c:	c1 e0 02             	shl    $0x2,%eax
c010463f:	01 d0                	add    %edx,%eax
c0104641:	39 c1                	cmp    %eax,%ecx
c0104643:	75 17                	jne    c010465c <check_vma_struct+0x19a>
c0104645:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0104648:	8b 48 08             	mov    0x8(%eax),%ecx
c010464b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010464e:	89 d0                	mov    %edx,%eax
c0104650:	c1 e0 02             	shl    $0x2,%eax
c0104653:	01 d0                	add    %edx,%eax
c0104655:	83 c0 02             	add    $0x2,%eax
c0104658:	39 c1                	cmp    %eax,%ecx
c010465a:	74 19                	je     c0104675 <check_vma_struct+0x1b3>
c010465c:	68 0c c9 10 c0       	push   $0xc010c90c
c0104661:	68 f7 c7 10 c0       	push   $0xc010c7f7
c0104666:	68 22 01 00 00       	push   $0x122
c010466b:	68 0c c8 10 c0       	push   $0xc010c80c
c0104670:	e8 83 bd ff ff       	call   c01003f8 <__panic>
c0104675:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104678:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c010467b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010467e:	8b 40 04             	mov    0x4(%eax),%eax
        le = list_next(le);
c0104681:	89 45 f0             	mov    %eax,-0x10(%ebp)
        insert_vma_struct(mm, vma);
    }

    list_entry_t *le = list_next(&(mm->mmap_list));

    for (i = 1; i <= step2; i ++) {
c0104684:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0104688:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010468b:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c010468e:	0f 8e 73 ff ff ff    	jle    c0104607 <check_vma_struct+0x145>
        struct vma_struct *mmap = le2vma(le, list_link);
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
        le = list_next(le);
    }

    for (i = 5; i <= 5 * step2; i +=5) {
c0104694:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
c010469b:	e9 80 01 00 00       	jmp    c0104820 <check_vma_struct+0x35e>
        struct vma_struct *vma1 = find_vma(mm, i);
c01046a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01046a3:	83 ec 08             	sub    $0x8,%esp
c01046a6:	50                   	push   %eax
c01046a7:	ff 75 e8             	pushl  -0x18(%ebp)
c01046aa:	e8 b3 f7 ff ff       	call   c0103e62 <find_vma>
c01046af:	83 c4 10             	add    $0x10,%esp
c01046b2:	89 45 cc             	mov    %eax,-0x34(%ebp)
        assert(vma1 != NULL);
c01046b5:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c01046b9:	75 19                	jne    c01046d4 <check_vma_struct+0x212>
c01046bb:	68 41 c9 10 c0       	push   $0xc010c941
c01046c0:	68 f7 c7 10 c0       	push   $0xc010c7f7
c01046c5:	68 28 01 00 00       	push   $0x128
c01046ca:	68 0c c8 10 c0       	push   $0xc010c80c
c01046cf:	e8 24 bd ff ff       	call   c01003f8 <__panic>
        struct vma_struct *vma2 = find_vma(mm, i+1);
c01046d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01046d7:	83 c0 01             	add    $0x1,%eax
c01046da:	83 ec 08             	sub    $0x8,%esp
c01046dd:	50                   	push   %eax
c01046de:	ff 75 e8             	pushl  -0x18(%ebp)
c01046e1:	e8 7c f7 ff ff       	call   c0103e62 <find_vma>
c01046e6:	83 c4 10             	add    $0x10,%esp
c01046e9:	89 45 c8             	mov    %eax,-0x38(%ebp)
        assert(vma2 != NULL);
c01046ec:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c01046f0:	75 19                	jne    c010470b <check_vma_struct+0x249>
c01046f2:	68 4e c9 10 c0       	push   $0xc010c94e
c01046f7:	68 f7 c7 10 c0       	push   $0xc010c7f7
c01046fc:	68 2a 01 00 00       	push   $0x12a
c0104701:	68 0c c8 10 c0       	push   $0xc010c80c
c0104706:	e8 ed bc ff ff       	call   c01003f8 <__panic>
        struct vma_struct *vma3 = find_vma(mm, i+2);
c010470b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010470e:	83 c0 02             	add    $0x2,%eax
c0104711:	83 ec 08             	sub    $0x8,%esp
c0104714:	50                   	push   %eax
c0104715:	ff 75 e8             	pushl  -0x18(%ebp)
c0104718:	e8 45 f7 ff ff       	call   c0103e62 <find_vma>
c010471d:	83 c4 10             	add    $0x10,%esp
c0104720:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        assert(vma3 == NULL);
c0104723:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
c0104727:	74 19                	je     c0104742 <check_vma_struct+0x280>
c0104729:	68 5b c9 10 c0       	push   $0xc010c95b
c010472e:	68 f7 c7 10 c0       	push   $0xc010c7f7
c0104733:	68 2c 01 00 00       	push   $0x12c
c0104738:	68 0c c8 10 c0       	push   $0xc010c80c
c010473d:	e8 b6 bc ff ff       	call   c01003f8 <__panic>
        struct vma_struct *vma4 = find_vma(mm, i+3);
c0104742:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104745:	83 c0 03             	add    $0x3,%eax
c0104748:	83 ec 08             	sub    $0x8,%esp
c010474b:	50                   	push   %eax
c010474c:	ff 75 e8             	pushl  -0x18(%ebp)
c010474f:	e8 0e f7 ff ff       	call   c0103e62 <find_vma>
c0104754:	83 c4 10             	add    $0x10,%esp
c0104757:	89 45 c0             	mov    %eax,-0x40(%ebp)
        assert(vma4 == NULL);
c010475a:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
c010475e:	74 19                	je     c0104779 <check_vma_struct+0x2b7>
c0104760:	68 68 c9 10 c0       	push   $0xc010c968
c0104765:	68 f7 c7 10 c0       	push   $0xc010c7f7
c010476a:	68 2e 01 00 00       	push   $0x12e
c010476f:	68 0c c8 10 c0       	push   $0xc010c80c
c0104774:	e8 7f bc ff ff       	call   c01003f8 <__panic>
        struct vma_struct *vma5 = find_vma(mm, i+4);
c0104779:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010477c:	83 c0 04             	add    $0x4,%eax
c010477f:	83 ec 08             	sub    $0x8,%esp
c0104782:	50                   	push   %eax
c0104783:	ff 75 e8             	pushl  -0x18(%ebp)
c0104786:	e8 d7 f6 ff ff       	call   c0103e62 <find_vma>
c010478b:	83 c4 10             	add    $0x10,%esp
c010478e:	89 45 bc             	mov    %eax,-0x44(%ebp)
        assert(vma5 == NULL);
c0104791:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0104795:	74 19                	je     c01047b0 <check_vma_struct+0x2ee>
c0104797:	68 75 c9 10 c0       	push   $0xc010c975
c010479c:	68 f7 c7 10 c0       	push   $0xc010c7f7
c01047a1:	68 30 01 00 00       	push   $0x130
c01047a6:	68 0c c8 10 c0       	push   $0xc010c80c
c01047ab:	e8 48 bc ff ff       	call   c01003f8 <__panic>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
c01047b0:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01047b3:	8b 50 04             	mov    0x4(%eax),%edx
c01047b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01047b9:	39 c2                	cmp    %eax,%edx
c01047bb:	75 10                	jne    c01047cd <check_vma_struct+0x30b>
c01047bd:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01047c0:	8b 40 08             	mov    0x8(%eax),%eax
c01047c3:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01047c6:	83 c2 02             	add    $0x2,%edx
c01047c9:	39 d0                	cmp    %edx,%eax
c01047cb:	74 19                	je     c01047e6 <check_vma_struct+0x324>
c01047cd:	68 84 c9 10 c0       	push   $0xc010c984
c01047d2:	68 f7 c7 10 c0       	push   $0xc010c7f7
c01047d7:	68 32 01 00 00       	push   $0x132
c01047dc:	68 0c c8 10 c0       	push   $0xc010c80c
c01047e1:	e8 12 bc ff ff       	call   c01003f8 <__panic>
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
c01047e6:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01047e9:	8b 50 04             	mov    0x4(%eax),%edx
c01047ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01047ef:	39 c2                	cmp    %eax,%edx
c01047f1:	75 10                	jne    c0104803 <check_vma_struct+0x341>
c01047f3:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01047f6:	8b 40 08             	mov    0x8(%eax),%eax
c01047f9:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01047fc:	83 c2 02             	add    $0x2,%edx
c01047ff:	39 d0                	cmp    %edx,%eax
c0104801:	74 19                	je     c010481c <check_vma_struct+0x35a>
c0104803:	68 b4 c9 10 c0       	push   $0xc010c9b4
c0104808:	68 f7 c7 10 c0       	push   $0xc010c7f7
c010480d:	68 33 01 00 00       	push   $0x133
c0104812:	68 0c c8 10 c0       	push   $0xc010c80c
c0104817:	e8 dc bb ff ff       	call   c01003f8 <__panic>
        struct vma_struct *mmap = le2vma(le, list_link);
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
        le = list_next(le);
    }

    for (i = 5; i <= 5 * step2; i +=5) {
c010481c:	83 45 f4 05          	addl   $0x5,-0xc(%ebp)
c0104820:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0104823:	89 d0                	mov    %edx,%eax
c0104825:	c1 e0 02             	shl    $0x2,%eax
c0104828:	01 d0                	add    %edx,%eax
c010482a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010482d:	0f 8d 6d fe ff ff    	jge    c01046a0 <check_vma_struct+0x1de>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
    }

    for (i =4; i>=0; i--) {
c0104833:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%ebp)
c010483a:	eb 5c                	jmp    c0104898 <check_vma_struct+0x3d6>
        struct vma_struct *vma_below_5= find_vma(mm,i);
c010483c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010483f:	83 ec 08             	sub    $0x8,%esp
c0104842:	50                   	push   %eax
c0104843:	ff 75 e8             	pushl  -0x18(%ebp)
c0104846:	e8 17 f6 ff ff       	call   c0103e62 <find_vma>
c010484b:	83 c4 10             	add    $0x10,%esp
c010484e:	89 45 b8             	mov    %eax,-0x48(%ebp)
        if (vma_below_5 != NULL ) {
c0104851:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
c0104855:	74 1e                	je     c0104875 <check_vma_struct+0x3b3>
           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
c0104857:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010485a:	8b 50 08             	mov    0x8(%eax),%edx
c010485d:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0104860:	8b 40 04             	mov    0x4(%eax),%eax
c0104863:	52                   	push   %edx
c0104864:	50                   	push   %eax
c0104865:	ff 75 f4             	pushl  -0xc(%ebp)
c0104868:	68 e4 c9 10 c0       	push   $0xc010c9e4
c010486d:	e8 20 ba ff ff       	call   c0100292 <cprintf>
c0104872:	83 c4 10             	add    $0x10,%esp
        }
        assert(vma_below_5 == NULL);
c0104875:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
c0104879:	74 19                	je     c0104894 <check_vma_struct+0x3d2>
c010487b:	68 09 ca 10 c0       	push   $0xc010ca09
c0104880:	68 f7 c7 10 c0       	push   $0xc010c7f7
c0104885:	68 3b 01 00 00       	push   $0x13b
c010488a:	68 0c c8 10 c0       	push   $0xc010c80c
c010488f:	e8 64 bb ff ff       	call   c01003f8 <__panic>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
    }

    for (i =4; i>=0; i--) {
c0104894:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0104898:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010489c:	79 9e                	jns    c010483c <check_vma_struct+0x37a>
           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
        }
        assert(vma_below_5 == NULL);
    }

    mm_destroy(mm);
c010489e:	83 ec 0c             	sub    $0xc,%esp
c01048a1:	ff 75 e8             	pushl  -0x18(%ebp)
c01048a4:	e8 09 f8 ff ff       	call   c01040b2 <mm_destroy>
c01048a9:	83 c4 10             	add    $0x10,%esp

    cprintf("check_vma_struct() succeeded!\n");
c01048ac:	83 ec 0c             	sub    $0xc,%esp
c01048af:	68 20 ca 10 c0       	push   $0xc010ca20
c01048b4:	e8 d9 b9 ff ff       	call   c0100292 <cprintf>
c01048b9:	83 c4 10             	add    $0x10,%esp
}
c01048bc:	90                   	nop
c01048bd:	c9                   	leave  
c01048be:	c3                   	ret    

c01048bf <check_pgfault>:

struct mm_struct *check_mm_struct;

// check_pgfault - check correctness of pgfault handler
static void
check_pgfault(void) {
c01048bf:	55                   	push   %ebp
c01048c0:	89 e5                	mov    %esp,%ebp
c01048c2:	83 ec 28             	sub    $0x28,%esp
    size_t nr_free_pages_store = nr_free_pages();
c01048c5:	e8 b2 2f 00 00       	call   c010787c <nr_free_pages>
c01048ca:	89 45 ec             	mov    %eax,-0x14(%ebp)

    check_mm_struct = mm_create();
c01048cd:	e8 b6 f4 ff ff       	call   c0103d88 <mm_create>
c01048d2:	a3 bc 20 1a c0       	mov    %eax,0xc01a20bc
    assert(check_mm_struct != NULL);
c01048d7:	a1 bc 20 1a c0       	mov    0xc01a20bc,%eax
c01048dc:	85 c0                	test   %eax,%eax
c01048de:	75 19                	jne    c01048f9 <check_pgfault+0x3a>
c01048e0:	68 3f ca 10 c0       	push   $0xc010ca3f
c01048e5:	68 f7 c7 10 c0       	push   $0xc010c7f7
c01048ea:	68 4b 01 00 00       	push   $0x14b
c01048ef:	68 0c c8 10 c0       	push   $0xc010c80c
c01048f4:	e8 ff ba ff ff       	call   c01003f8 <__panic>

    struct mm_struct *mm = check_mm_struct;
c01048f9:	a1 bc 20 1a c0       	mov    0xc01a20bc,%eax
c01048fe:	89 45 e8             	mov    %eax,-0x18(%ebp)
    pde_t *pgdir = mm->pgdir = boot_pgdir;
c0104901:	8b 15 60 ba 12 c0    	mov    0xc012ba60,%edx
c0104907:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010490a:	89 50 0c             	mov    %edx,0xc(%eax)
c010490d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104910:	8b 40 0c             	mov    0xc(%eax),%eax
c0104913:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(pgdir[0] == 0);
c0104916:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104919:	8b 00                	mov    (%eax),%eax
c010491b:	85 c0                	test   %eax,%eax
c010491d:	74 19                	je     c0104938 <check_pgfault+0x79>
c010491f:	68 57 ca 10 c0       	push   $0xc010ca57
c0104924:	68 f7 c7 10 c0       	push   $0xc010c7f7
c0104929:	68 4f 01 00 00       	push   $0x14f
c010492e:	68 0c c8 10 c0       	push   $0xc010c80c
c0104933:	e8 c0 ba ff ff       	call   c01003f8 <__panic>

    struct vma_struct *vma = vma_create(0, PTSIZE, VM_WRITE);
c0104938:	83 ec 04             	sub    $0x4,%esp
c010493b:	6a 02                	push   $0x2
c010493d:	68 00 00 40 00       	push   $0x400000
c0104942:	6a 00                	push   $0x0
c0104944:	e8 dd f4 ff ff       	call   c0103e26 <vma_create>
c0104949:	83 c4 10             	add    $0x10,%esp
c010494c:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(vma != NULL);
c010494f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0104953:	75 19                	jne    c010496e <check_pgfault+0xaf>
c0104955:	68 e8 c8 10 c0       	push   $0xc010c8e8
c010495a:	68 f7 c7 10 c0       	push   $0xc010c7f7
c010495f:	68 52 01 00 00       	push   $0x152
c0104964:	68 0c c8 10 c0       	push   $0xc010c80c
c0104969:	e8 8a ba ff ff       	call   c01003f8 <__panic>

    insert_vma_struct(mm, vma);
c010496e:	83 ec 08             	sub    $0x8,%esp
c0104971:	ff 75 e0             	pushl  -0x20(%ebp)
c0104974:	ff 75 e8             	pushl  -0x18(%ebp)
c0104977:	e8 12 f6 ff ff       	call   c0103f8e <insert_vma_struct>
c010497c:	83 c4 10             	add    $0x10,%esp

    uintptr_t addr = 0x100;
c010497f:	c7 45 dc 00 01 00 00 	movl   $0x100,-0x24(%ebp)
    assert(find_vma(mm, addr) == vma);
c0104986:	83 ec 08             	sub    $0x8,%esp
c0104989:	ff 75 dc             	pushl  -0x24(%ebp)
c010498c:	ff 75 e8             	pushl  -0x18(%ebp)
c010498f:	e8 ce f4 ff ff       	call   c0103e62 <find_vma>
c0104994:	83 c4 10             	add    $0x10,%esp
c0104997:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c010499a:	74 19                	je     c01049b5 <check_pgfault+0xf6>
c010499c:	68 65 ca 10 c0       	push   $0xc010ca65
c01049a1:	68 f7 c7 10 c0       	push   $0xc010c7f7
c01049a6:	68 57 01 00 00       	push   $0x157
c01049ab:	68 0c c8 10 c0       	push   $0xc010c80c
c01049b0:	e8 43 ba ff ff       	call   c01003f8 <__panic>

    int i, sum = 0;
c01049b5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    for (i = 0; i < 100; i ++) {
c01049bc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01049c3:	eb 19                	jmp    c01049de <check_pgfault+0x11f>
        *(char *)(addr + i) = i;
c01049c5:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01049c8:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01049cb:	01 d0                	add    %edx,%eax
c01049cd:	89 c2                	mov    %eax,%edx
c01049cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01049d2:	88 02                	mov    %al,(%edx)
        sum += i;
c01049d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01049d7:	01 45 f0             	add    %eax,-0x10(%ebp)

    uintptr_t addr = 0x100;
    assert(find_vma(mm, addr) == vma);

    int i, sum = 0;
    for (i = 0; i < 100; i ++) {
c01049da:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01049de:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c01049e2:	7e e1                	jle    c01049c5 <check_pgfault+0x106>
        *(char *)(addr + i) = i;
        sum += i;
    }
    for (i = 0; i < 100; i ++) {
c01049e4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01049eb:	eb 15                	jmp    c0104a02 <check_pgfault+0x143>
        sum -= *(char *)(addr + i);
c01049ed:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01049f0:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01049f3:	01 d0                	add    %edx,%eax
c01049f5:	0f b6 00             	movzbl (%eax),%eax
c01049f8:	0f be c0             	movsbl %al,%eax
c01049fb:	29 45 f0             	sub    %eax,-0x10(%ebp)
    int i, sum = 0;
    for (i = 0; i < 100; i ++) {
        *(char *)(addr + i) = i;
        sum += i;
    }
    for (i = 0; i < 100; i ++) {
c01049fe:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0104a02:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c0104a06:	7e e5                	jle    c01049ed <check_pgfault+0x12e>
        sum -= *(char *)(addr + i);
    }
    assert(sum == 0);
c0104a08:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0104a0c:	74 19                	je     c0104a27 <check_pgfault+0x168>
c0104a0e:	68 7f ca 10 c0       	push   $0xc010ca7f
c0104a13:	68 f7 c7 10 c0       	push   $0xc010c7f7
c0104a18:	68 61 01 00 00       	push   $0x161
c0104a1d:	68 0c c8 10 c0       	push   $0xc010c80c
c0104a22:	e8 d1 b9 ff ff       	call   c01003f8 <__panic>

    page_remove(pgdir, ROUNDDOWN(addr, PGSIZE));
c0104a27:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104a2a:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0104a2d:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0104a30:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0104a35:	83 ec 08             	sub    $0x8,%esp
c0104a38:	50                   	push   %eax
c0104a39:	ff 75 e4             	pushl  -0x1c(%ebp)
c0104a3c:	e8 ae 39 00 00       	call   c01083ef <page_remove>
c0104a41:	83 c4 10             	add    $0x10,%esp
    free_page(pde2page(pgdir[0]));
c0104a44:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104a47:	8b 00                	mov    (%eax),%eax
c0104a49:	83 ec 0c             	sub    $0xc,%esp
c0104a4c:	50                   	push   %eax
c0104a4d:	e8 1a f3 ff ff       	call   c0103d6c <pde2page>
c0104a52:	83 c4 10             	add    $0x10,%esp
c0104a55:	83 ec 08             	sub    $0x8,%esp
c0104a58:	6a 01                	push   $0x1
c0104a5a:	50                   	push   %eax
c0104a5b:	e8 e7 2d 00 00       	call   c0107847 <free_pages>
c0104a60:	83 c4 10             	add    $0x10,%esp
    pgdir[0] = 0;
c0104a63:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104a66:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    mm->pgdir = NULL;
c0104a6c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104a6f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
    mm_destroy(mm);
c0104a76:	83 ec 0c             	sub    $0xc,%esp
c0104a79:	ff 75 e8             	pushl  -0x18(%ebp)
c0104a7c:	e8 31 f6 ff ff       	call   c01040b2 <mm_destroy>
c0104a81:	83 c4 10             	add    $0x10,%esp
    check_mm_struct = NULL;
c0104a84:	c7 05 bc 20 1a c0 00 	movl   $0x0,0xc01a20bc
c0104a8b:	00 00 00 

    assert(nr_free_pages_store == nr_free_pages());
c0104a8e:	e8 e9 2d 00 00       	call   c010787c <nr_free_pages>
c0104a93:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0104a96:	74 19                	je     c0104ab1 <check_pgfault+0x1f2>
c0104a98:	68 88 ca 10 c0       	push   $0xc010ca88
c0104a9d:	68 f7 c7 10 c0       	push   $0xc010c7f7
c0104aa2:	68 6b 01 00 00       	push   $0x16b
c0104aa7:	68 0c c8 10 c0       	push   $0xc010c80c
c0104aac:	e8 47 b9 ff ff       	call   c01003f8 <__panic>

    cprintf("check_pgfault() succeeded!\n");
c0104ab1:	83 ec 0c             	sub    $0xc,%esp
c0104ab4:	68 af ca 10 c0       	push   $0xc010caaf
c0104ab9:	e8 d4 b7 ff ff       	call   c0100292 <cprintf>
c0104abe:	83 c4 10             	add    $0x10,%esp
}
c0104ac1:	90                   	nop
c0104ac2:	c9                   	leave  
c0104ac3:	c3                   	ret    

c0104ac4 <do_pgfault>:
 *            was a read (0) or write (1).
 *         -- The U/S flag (bit 2) indicates whether the processor was executing at user mode (1)
 *            or supervisor mode (0) at the time of the exception.
 */
int
do_pgfault(struct mm_struct *mm, uint32_t error_code, uintptr_t addr) {
c0104ac4:	55                   	push   %ebp
c0104ac5:	89 e5                	mov    %esp,%ebp
c0104ac7:	83 ec 28             	sub    $0x28,%esp
    int ret = -E_INVAL;
c0104aca:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
    //try to find a vma which include addr
    struct vma_struct *vma = find_vma(mm, addr);
c0104ad1:	ff 75 10             	pushl  0x10(%ebp)
c0104ad4:	ff 75 08             	pushl  0x8(%ebp)
c0104ad7:	e8 86 f3 ff ff       	call   c0103e62 <find_vma>
c0104adc:	83 c4 08             	add    $0x8,%esp
c0104adf:	89 45 ec             	mov    %eax,-0x14(%ebp)

    pgfault_num++;
c0104ae2:	a1 64 ff 19 c0       	mov    0xc019ff64,%eax
c0104ae7:	83 c0 01             	add    $0x1,%eax
c0104aea:	a3 64 ff 19 c0       	mov    %eax,0xc019ff64
    //If the addr is in the range of a mm's vma?
    if (vma == NULL || vma->vm_start > addr) {
c0104aef:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0104af3:	74 0b                	je     c0104b00 <do_pgfault+0x3c>
c0104af5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104af8:	8b 40 04             	mov    0x4(%eax),%eax
c0104afb:	3b 45 10             	cmp    0x10(%ebp),%eax
c0104afe:	76 18                	jbe    c0104b18 <do_pgfault+0x54>
        cprintf("not valid addr %x, and  can not find it in vma\n", addr);
c0104b00:	83 ec 08             	sub    $0x8,%esp
c0104b03:	ff 75 10             	pushl  0x10(%ebp)
c0104b06:	68 cc ca 10 c0       	push   $0xc010cacc
c0104b0b:	e8 82 b7 ff ff       	call   c0100292 <cprintf>
c0104b10:	83 c4 10             	add    $0x10,%esp
        goto failed;
c0104b13:	e9 b4 01 00 00       	jmp    c0104ccc <do_pgfault+0x208>
    }
    //check the error_code
    switch (error_code & 3) {
c0104b18:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104b1b:	83 e0 03             	and    $0x3,%eax
c0104b1e:	85 c0                	test   %eax,%eax
c0104b20:	74 3c                	je     c0104b5e <do_pgfault+0x9a>
c0104b22:	83 f8 01             	cmp    $0x1,%eax
c0104b25:	74 22                	je     c0104b49 <do_pgfault+0x85>
    default:
            /* error code flag : default is 3 ( W/R=1, P=1): write, present */
    case 2: /* error code flag : (W/R=1, P=0): write, not present */
        if (!(vma->vm_flags & VM_WRITE)) {
c0104b27:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104b2a:	8b 40 0c             	mov    0xc(%eax),%eax
c0104b2d:	83 e0 02             	and    $0x2,%eax
c0104b30:	85 c0                	test   %eax,%eax
c0104b32:	75 4c                	jne    c0104b80 <do_pgfault+0xbc>
            cprintf("do_pgfault failed: error code flag = write AND not present, but the addr's vma cannot write\n");
c0104b34:	83 ec 0c             	sub    $0xc,%esp
c0104b37:	68 fc ca 10 c0       	push   $0xc010cafc
c0104b3c:	e8 51 b7 ff ff       	call   c0100292 <cprintf>
c0104b41:	83 c4 10             	add    $0x10,%esp
            goto failed;
c0104b44:	e9 83 01 00 00       	jmp    c0104ccc <do_pgfault+0x208>
        }
        break;
    case 1: /* error code flag : (W/R=0, P=1): read, present */
        cprintf("do_pgfault failed: error code flag = read AND present\n");
c0104b49:	83 ec 0c             	sub    $0xc,%esp
c0104b4c:	68 5c cb 10 c0       	push   $0xc010cb5c
c0104b51:	e8 3c b7 ff ff       	call   c0100292 <cprintf>
c0104b56:	83 c4 10             	add    $0x10,%esp
        goto failed;
c0104b59:	e9 6e 01 00 00       	jmp    c0104ccc <do_pgfault+0x208>
    case 0: /* error code flag : (W/R=0, P=0): read, not present */
        if (!(vma->vm_flags & (VM_READ | VM_EXEC))) {
c0104b5e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104b61:	8b 40 0c             	mov    0xc(%eax),%eax
c0104b64:	83 e0 05             	and    $0x5,%eax
c0104b67:	85 c0                	test   %eax,%eax
c0104b69:	75 16                	jne    c0104b81 <do_pgfault+0xbd>
            cprintf("do_pgfault failed: error code flag = read AND not present, but the addr's vma cannot read or exec\n");
c0104b6b:	83 ec 0c             	sub    $0xc,%esp
c0104b6e:	68 94 cb 10 c0       	push   $0xc010cb94
c0104b73:	e8 1a b7 ff ff       	call   c0100292 <cprintf>
c0104b78:	83 c4 10             	add    $0x10,%esp
            goto failed;
c0104b7b:	e9 4c 01 00 00       	jmp    c0104ccc <do_pgfault+0x208>
    case 2: /* error code flag : (W/R=1, P=0): write, not present */
        if (!(vma->vm_flags & VM_WRITE)) {
            cprintf("do_pgfault failed: error code flag = write AND not present, but the addr's vma cannot write\n");
            goto failed;
        }
        break;
c0104b80:	90                   	nop
     *    (write an non_existed addr && addr is writable) OR
     *    (read  an non_existed addr && addr is readable)
     * THEN
     *    continue process
     */
    uint32_t perm = PTE_U;
c0104b81:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
    if (vma->vm_flags & VM_WRITE) {
c0104b88:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104b8b:	8b 40 0c             	mov    0xc(%eax),%eax
c0104b8e:	83 e0 02             	and    $0x2,%eax
c0104b91:	85 c0                	test   %eax,%eax
c0104b93:	74 04                	je     c0104b99 <do_pgfault+0xd5>
        perm |= PTE_W;
c0104b95:	83 4d f0 02          	orl    $0x2,-0x10(%ebp)
    }
    addr = ROUNDDOWN(addr, PGSIZE);
c0104b99:	8b 45 10             	mov    0x10(%ebp),%eax
c0104b9c:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0104b9f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104ba2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0104ba7:	89 45 10             	mov    %eax,0x10(%ebp)

    ret = -E_NO_MEM;
c0104baa:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    pte_t *ptep=NULL;
c0104bb1:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    *   mm->pgdir : the PDT of these vma
    *
    */
    /*LAB3 EXERCISE 1: YOUR CODE*/
    //(1) try to find a pte, if pte's PT(Page Table) isn't existed, then create a PT.
    ptep = get_pte(mm->pgdir, addr, 1);
c0104bb8:	8b 45 08             	mov    0x8(%ebp),%eax
c0104bbb:	8b 40 0c             	mov    0xc(%eax),%eax
c0104bbe:	83 ec 04             	sub    $0x4,%esp
c0104bc1:	6a 01                	push   $0x1
c0104bc3:	ff 75 10             	pushl  0x10(%ebp)
c0104bc6:	50                   	push   %eax
c0104bc7:	e8 7b 32 00 00       	call   c0107e47 <get_pte>
c0104bcc:	83 c4 10             	add    $0x10,%esp
c0104bcf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(ptep != NULL);
c0104bd2:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0104bd6:	75 19                	jne    c0104bf1 <do_pgfault+0x12d>
c0104bd8:	68 f7 cb 10 c0       	push   $0xc010cbf7
c0104bdd:	68 f7 c7 10 c0       	push   $0xc010c7f7
c0104be2:	68 c9 01 00 00       	push   $0x1c9
c0104be7:	68 0c c8 10 c0       	push   $0xc010c80c
c0104bec:	e8 07 b8 ff ff       	call   c01003f8 <__panic>
    //(2) if the phy addr isn't exist, then alloc a page & map the phy addr with logical addr
    if (*ptep == 0) {
c0104bf1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104bf4:	8b 00                	mov    (%eax),%eax
c0104bf6:	85 c0                	test   %eax,%eax
c0104bf8:	75 39                	jne    c0104c33 <do_pgfault+0x16f>
        assert(pgdir_alloc_page(mm->pgdir, addr, perm) != NULL);
c0104bfa:	8b 45 08             	mov    0x8(%ebp),%eax
c0104bfd:	8b 40 0c             	mov    0xc(%eax),%eax
c0104c00:	83 ec 04             	sub    $0x4,%esp
c0104c03:	ff 75 f0             	pushl  -0x10(%ebp)
c0104c06:	ff 75 10             	pushl  0x10(%ebp)
c0104c09:	50                   	push   %eax
c0104c0a:	e8 22 39 00 00       	call   c0108531 <pgdir_alloc_page>
c0104c0f:	83 c4 10             	add    $0x10,%esp
c0104c12:	85 c0                	test   %eax,%eax
c0104c14:	0f 85 ab 00 00 00    	jne    c0104cc5 <do_pgfault+0x201>
c0104c1a:	68 04 cc 10 c0       	push   $0xc010cc04
c0104c1f:	68 f7 c7 10 c0       	push   $0xc010c7f7
c0104c24:	68 cc 01 00 00       	push   $0x1cc
c0104c29:	68 0c c8 10 c0       	push   $0xc010c80c
c0104c2e:	e8 c5 b7 ff ff       	call   c01003f8 <__panic>
    *    swap_in(mm, addr, &page) : alloc a memory page, then according to the swap entry in PTE for addr,
    *                               find the addr of disk page, read the content of disk page into this memroy page
    *    page_insert ： build the map of phy addr of an Page with the linear addr la
    *    swap_map_swappable ： set the page swappable
    */
        if(swap_init_ok) {
c0104c33:	a1 6c ff 19 c0       	mov    0xc019ff6c,%eax
c0104c38:	85 c0                	test   %eax,%eax
c0104c3a:	74 71                	je     c0104cad <do_pgfault+0x1e9>
            struct Page *page=NULL;
c0104c3c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
            //(1）According to the mm AND addr, try to load the content of right disk page
            //    into the memory which page managed.
            assert(swap_in(mm, addr, &page) == 0);
c0104c43:	83 ec 04             	sub    $0x4,%esp
c0104c46:	8d 45 e0             	lea    -0x20(%ebp),%eax
c0104c49:	50                   	push   %eax
c0104c4a:	ff 75 10             	pushl  0x10(%ebp)
c0104c4d:	ff 75 08             	pushl  0x8(%ebp)
c0104c50:	e8 9b 10 00 00       	call   c0105cf0 <swap_in>
c0104c55:	83 c4 10             	add    $0x10,%esp
c0104c58:	85 c0                	test   %eax,%eax
c0104c5a:	74 19                	je     c0104c75 <do_pgfault+0x1b1>
c0104c5c:	68 34 cc 10 c0       	push   $0xc010cc34
c0104c61:	68 f7 c7 10 c0       	push   $0xc010c7f7
c0104c66:	68 de 01 00 00       	push   $0x1de
c0104c6b:	68 0c c8 10 c0       	push   $0xc010c80c
c0104c70:	e8 83 b7 ff ff       	call   c01003f8 <__panic>
            page->pra_vaddr = addr;
c0104c75:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104c78:	8b 55 10             	mov    0x10(%ebp),%edx
c0104c7b:	89 50 1c             	mov    %edx,0x1c(%eax)
            //(2) According to the mm, addr AND page, setup the map of phy addr <---> logical addr
            page_insert(mm->pgdir, page, addr, perm);
c0104c7e:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0104c81:	8b 45 08             	mov    0x8(%ebp),%eax
c0104c84:	8b 40 0c             	mov    0xc(%eax),%eax
c0104c87:	ff 75 f0             	pushl  -0x10(%ebp)
c0104c8a:	ff 75 10             	pushl  0x10(%ebp)
c0104c8d:	52                   	push   %edx
c0104c8e:	50                   	push   %eax
c0104c8f:	e8 94 37 00 00       	call   c0108428 <page_insert>
c0104c94:	83 c4 10             	add    $0x10,%esp
            //(3) make the page swappable.
            swap_map_swappable(mm, addr, page, 1);
c0104c97:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104c9a:	6a 01                	push   $0x1
c0104c9c:	50                   	push   %eax
c0104c9d:	ff 75 10             	pushl  0x10(%ebp)
c0104ca0:	ff 75 08             	pushl  0x8(%ebp)
c0104ca3:	e8 b8 0e 00 00       	call   c0105b60 <swap_map_swappable>
c0104ca8:	83 c4 10             	add    $0x10,%esp
c0104cab:	eb 18                	jmp    c0104cc5 <do_pgfault+0x201>
        }
        else {
            cprintf("no swap_init_ok but ptep is %x, failed\n",*ptep);
c0104cad:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104cb0:	8b 00                	mov    (%eax),%eax
c0104cb2:	83 ec 08             	sub    $0x8,%esp
c0104cb5:	50                   	push   %eax
c0104cb6:	68 54 cc 10 c0       	push   $0xc010cc54
c0104cbb:	e8 d2 b5 ff ff       	call   c0100292 <cprintf>
c0104cc0:	83 c4 10             	add    $0x10,%esp
            goto failed;
c0104cc3:	eb 07                	jmp    c0104ccc <do_pgfault+0x208>
            goto failed;
        }
#endif

   }
   ret = 0;
c0104cc5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
failed:
    return ret;
c0104ccc:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0104ccf:	c9                   	leave  
c0104cd0:	c3                   	ret    

c0104cd1 <user_mem_check>:

bool
user_mem_check(struct mm_struct *mm, uintptr_t addr, size_t len, bool write) {
c0104cd1:	55                   	push   %ebp
c0104cd2:	89 e5                	mov    %esp,%ebp
c0104cd4:	83 ec 10             	sub    $0x10,%esp
    if (mm != NULL) {
c0104cd7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104cdb:	0f 84 dc 00 00 00    	je     c0104dbd <user_mem_check+0xec>
        if (!USER_ACCESS(addr, addr + len)) {
c0104ce1:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0104ce8:	76 1c                	jbe    c0104d06 <user_mem_check+0x35>
c0104cea:	8b 55 0c             	mov    0xc(%ebp),%edx
c0104ced:	8b 45 10             	mov    0x10(%ebp),%eax
c0104cf0:	01 d0                	add    %edx,%eax
c0104cf2:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0104cf5:	76 0f                	jbe    c0104d06 <user_mem_check+0x35>
c0104cf7:	8b 55 0c             	mov    0xc(%ebp),%edx
c0104cfa:	8b 45 10             	mov    0x10(%ebp),%eax
c0104cfd:	01 d0                	add    %edx,%eax
c0104cff:	3d 00 00 00 b0       	cmp    $0xb0000000,%eax
c0104d04:	76 0a                	jbe    c0104d10 <user_mem_check+0x3f>
            return 0;
c0104d06:	b8 00 00 00 00       	mov    $0x0,%eax
c0104d0b:	e9 df 00 00 00       	jmp    c0104def <user_mem_check+0x11e>
        }
        struct vma_struct *vma;
        uintptr_t start = addr, end = addr + len;
c0104d10:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104d13:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0104d16:	8b 55 0c             	mov    0xc(%ebp),%edx
c0104d19:	8b 45 10             	mov    0x10(%ebp),%eax
c0104d1c:	01 d0                	add    %edx,%eax
c0104d1e:	89 45 f8             	mov    %eax,-0x8(%ebp)
        while (start < end) {
c0104d21:	e9 84 00 00 00       	jmp    c0104daa <user_mem_check+0xd9>
            if ((vma = find_vma(mm, start)) == NULL || start < vma->vm_start) {
c0104d26:	ff 75 fc             	pushl  -0x4(%ebp)
c0104d29:	ff 75 08             	pushl  0x8(%ebp)
c0104d2c:	e8 31 f1 ff ff       	call   c0103e62 <find_vma>
c0104d31:	83 c4 08             	add    $0x8,%esp
c0104d34:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104d37:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104d3b:	74 0b                	je     c0104d48 <user_mem_check+0x77>
c0104d3d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d40:	8b 40 04             	mov    0x4(%eax),%eax
c0104d43:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0104d46:	76 0a                	jbe    c0104d52 <user_mem_check+0x81>
                return 0;
c0104d48:	b8 00 00 00 00       	mov    $0x0,%eax
c0104d4d:	e9 9d 00 00 00       	jmp    c0104def <user_mem_check+0x11e>
            }
            if (!(vma->vm_flags & ((write) ? VM_WRITE : VM_READ))) {
c0104d52:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d55:	8b 40 0c             	mov    0xc(%eax),%eax
c0104d58:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0104d5c:	74 07                	je     c0104d65 <user_mem_check+0x94>
c0104d5e:	ba 02 00 00 00       	mov    $0x2,%edx
c0104d63:	eb 05                	jmp    c0104d6a <user_mem_check+0x99>
c0104d65:	ba 01 00 00 00       	mov    $0x1,%edx
c0104d6a:	21 d0                	and    %edx,%eax
c0104d6c:	85 c0                	test   %eax,%eax
c0104d6e:	75 07                	jne    c0104d77 <user_mem_check+0xa6>
                return 0;
c0104d70:	b8 00 00 00 00       	mov    $0x0,%eax
c0104d75:	eb 78                	jmp    c0104def <user_mem_check+0x11e>
            }
            if (write && (vma->vm_flags & VM_STACK)) {
c0104d77:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0104d7b:	74 24                	je     c0104da1 <user_mem_check+0xd0>
c0104d7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d80:	8b 40 0c             	mov    0xc(%eax),%eax
c0104d83:	83 e0 08             	and    $0x8,%eax
c0104d86:	85 c0                	test   %eax,%eax
c0104d88:	74 17                	je     c0104da1 <user_mem_check+0xd0>
                if (start < vma->vm_start + PGSIZE) { //check stack start & size
c0104d8a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d8d:	8b 40 04             	mov    0x4(%eax),%eax
c0104d90:	05 00 10 00 00       	add    $0x1000,%eax
c0104d95:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0104d98:	76 07                	jbe    c0104da1 <user_mem_check+0xd0>
                    return 0;
c0104d9a:	b8 00 00 00 00       	mov    $0x0,%eax
c0104d9f:	eb 4e                	jmp    c0104def <user_mem_check+0x11e>
                }
            }
            start = vma->vm_end;
c0104da1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104da4:	8b 40 08             	mov    0x8(%eax),%eax
c0104da7:	89 45 fc             	mov    %eax,-0x4(%ebp)
        if (!USER_ACCESS(addr, addr + len)) {
            return 0;
        }
        struct vma_struct *vma;
        uintptr_t start = addr, end = addr + len;
        while (start < end) {
c0104daa:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0104dad:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c0104db0:	0f 82 70 ff ff ff    	jb     c0104d26 <user_mem_check+0x55>
                    return 0;
                }
            }
            start = vma->vm_end;
        }
        return 1;
c0104db6:	b8 01 00 00 00       	mov    $0x1,%eax
c0104dbb:	eb 32                	jmp    c0104def <user_mem_check+0x11e>
    }
    return KERN_ACCESS(addr, addr + len);
c0104dbd:	81 7d 0c ff ff ff bf 	cmpl   $0xbfffffff,0xc(%ebp)
c0104dc4:	76 23                	jbe    c0104de9 <user_mem_check+0x118>
c0104dc6:	8b 55 0c             	mov    0xc(%ebp),%edx
c0104dc9:	8b 45 10             	mov    0x10(%ebp),%eax
c0104dcc:	01 d0                	add    %edx,%eax
c0104dce:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0104dd1:	76 16                	jbe    c0104de9 <user_mem_check+0x118>
c0104dd3:	8b 55 0c             	mov    0xc(%ebp),%edx
c0104dd6:	8b 45 10             	mov    0x10(%ebp),%eax
c0104dd9:	01 d0                	add    %edx,%eax
c0104ddb:	3d 00 00 00 f8       	cmp    $0xf8000000,%eax
c0104de0:	77 07                	ja     c0104de9 <user_mem_check+0x118>
c0104de2:	b8 01 00 00 00       	mov    $0x1,%eax
c0104de7:	eb 05                	jmp    c0104dee <user_mem_check+0x11d>
c0104de9:	b8 00 00 00 00       	mov    $0x0,%eax
c0104dee:	90                   	nop
}
c0104def:	c9                   	leave  
c0104df0:	c3                   	ret    

c0104df1 <_fifo_init_mm>:
 * (2) _fifo_init_mm: init pra_list_head and let  mm->sm_priv point to the addr of pra_list_head.
 *              Now, From the memory control struct mm_struct, we can access FIFO PRA
 */
static int
_fifo_init_mm(struct mm_struct *mm)
{     
c0104df1:	55                   	push   %ebp
c0104df2:	89 e5                	mov    %esp,%ebp
c0104df4:	83 ec 10             	sub    $0x10,%esp
c0104df7:	c7 45 fc b0 20 1a c0 	movl   $0xc01a20b0,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0104dfe:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0104e01:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0104e04:	89 50 04             	mov    %edx,0x4(%eax)
c0104e07:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0104e0a:	8b 50 04             	mov    0x4(%eax),%edx
c0104e0d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0104e10:	89 10                	mov    %edx,(%eax)
     list_init(&pra_list_head);
     mm->sm_priv = &pra_list_head;
c0104e12:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e15:	c7 40 14 b0 20 1a c0 	movl   $0xc01a20b0,0x14(%eax)
     //cprintf(" mm->sm_priv %x in fifo_init_mm\n",mm->sm_priv);
     return 0;
c0104e1c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104e21:	c9                   	leave  
c0104e22:	c3                   	ret    

c0104e23 <_fifo_map_swappable>:
/*
 * (3)_fifo_map_swappable: According FIFO PRA, we should link the most recent arrival page at the back of pra_list_head qeueue
 */
static int
_fifo_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c0104e23:	55                   	push   %ebp
c0104e24:	89 e5                	mov    %esp,%ebp
c0104e26:	83 ec 48             	sub    $0x48,%esp
    list_entry_t *head=(list_entry_t*) mm->sm_priv;
c0104e29:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e2c:	8b 40 14             	mov    0x14(%eax),%eax
c0104e2f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    list_entry_t *entry=&(page->pra_page_link);
c0104e32:	8b 45 10             	mov    0x10(%ebp),%eax
c0104e35:	83 c0 14             	add    $0x14,%eax
c0104e38:	89 45 ec             	mov    %eax,-0x14(%ebp)
 
    assert(entry != NULL && head != NULL);
c0104e3b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0104e3f:	74 06                	je     c0104e47 <_fifo_map_swappable+0x24>
c0104e41:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0104e45:	75 16                	jne    c0104e5d <_fifo_map_swappable+0x3a>
c0104e47:	68 7c cc 10 c0       	push   $0xc010cc7c
c0104e4c:	68 9a cc 10 c0       	push   $0xc010cc9a
c0104e51:	6a 32                	push   $0x32
c0104e53:	68 af cc 10 c0       	push   $0xc010ccaf
c0104e58:	e8 9b b5 ff ff       	call   c01003f8 <__panic>
    //record the page access situlation
    /*LAB3 EXERCISE 2: YOUR CODE*/ 
    // not swap in but call this func, means failed to swap out 
    if (swap_in == 0) {
c0104e5d:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0104e61:	75 57                	jne    c0104eba <_fifo_map_swappable+0x97>
        list_entry_t *le_prev = head, *le;
c0104e63:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104e66:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while ((le = list_next(le_prev)) != head) {
c0104e69:	eb 38                	jmp    c0104ea3 <_fifo_map_swappable+0x80>
            if (le == entry) {
c0104e6b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104e6e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0104e71:	75 2a                	jne    c0104e9d <_fifo_map_swappable+0x7a>
c0104e73:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104e76:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0104e79:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104e7c:	8b 40 04             	mov    0x4(%eax),%eax
c0104e7f:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0104e82:	8b 12                	mov    (%edx),%edx
c0104e84:	89 55 d8             	mov    %edx,-0x28(%ebp)
c0104e87:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0104e8a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0104e8d:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0104e90:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0104e93:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0104e96:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0104e99:	89 10                	mov    %edx,(%eax)
                list_del(le);
                break;
c0104e9b:	eb 1d                	jmp    c0104eba <_fifo_map_swappable+0x97>
            }
            le_prev = le;        
c0104e9d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104ea0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104ea3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ea6:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0104ea9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104eac:	8b 40 04             	mov    0x4(%eax),%eax
    //record the page access situlation
    /*LAB3 EXERCISE 2: YOUR CODE*/ 
    // not swap in but call this func, means failed to swap out 
    if (swap_in == 0) {
        list_entry_t *le_prev = head, *le;
        while ((le = list_next(le_prev)) != head) {
c0104eaf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0104eb2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104eb5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104eb8:	75 b1                	jne    c0104e6b <_fifo_map_swappable+0x48>
c0104eba:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104ebd:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0104ec0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104ec3:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c0104ec6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104ec9:	8b 00                	mov    (%eax),%eax
c0104ecb:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0104ece:	89 55 cc             	mov    %edx,-0x34(%ebp)
c0104ed1:	89 45 c8             	mov    %eax,-0x38(%ebp)
c0104ed4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104ed7:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0104eda:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0104edd:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0104ee0:	89 10                	mov    %edx,(%eax)
c0104ee2:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0104ee5:	8b 10                	mov    (%eax),%edx
c0104ee7:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0104eea:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0104eed:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0104ef0:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0104ef3:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0104ef6:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0104ef9:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0104efc:	89 10                	mov    %edx,(%eax)
            le_prev = le;        
        }
    }
    //(1)link the most recent arrival page at the back of the pra_list_head qeueue.
    list_add_before(head, entry);
    return 0;
c0104efe:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104f03:	c9                   	leave  
c0104f04:	c3                   	ret    

c0104f05 <_fifo_swap_out_victim>:
 *  (4)_fifo_swap_out_victim: According FIFO PRA, we should unlink the  earliest arrival page in front of pra_list_head qeueue,
 *                            then assign the value of *ptr_page to the addr of this page.
 */
static int
_fifo_swap_out_victim(struct mm_struct *mm, struct Page ** ptr_page, int in_tick)
{
c0104f05:	55                   	push   %ebp
c0104f06:	89 e5                	mov    %esp,%ebp
c0104f08:	83 ec 28             	sub    $0x28,%esp
     list_entry_t *head=(list_entry_t*) mm->sm_priv;
c0104f0b:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f0e:	8b 40 14             	mov    0x14(%eax),%eax
c0104f11:	89 45 f4             	mov    %eax,-0xc(%ebp)
         assert(head != NULL);
c0104f14:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104f18:	75 16                	jne    c0104f30 <_fifo_swap_out_victim+0x2b>
c0104f1a:	68 c3 cc 10 c0       	push   $0xc010ccc3
c0104f1f:	68 9a cc 10 c0       	push   $0xc010cc9a
c0104f24:	6a 4c                	push   $0x4c
c0104f26:	68 af cc 10 c0       	push   $0xc010ccaf
c0104f2b:	e8 c8 b4 ff ff       	call   c01003f8 <__panic>
     assert(in_tick==0);
c0104f30:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0104f34:	74 16                	je     c0104f4c <_fifo_swap_out_victim+0x47>
c0104f36:	68 d0 cc 10 c0       	push   $0xc010ccd0
c0104f3b:	68 9a cc 10 c0       	push   $0xc010cc9a
c0104f40:	6a 4d                	push   $0x4d
c0104f42:	68 af cc 10 c0       	push   $0xc010ccaf
c0104f47:	e8 ac b4 ff ff       	call   c01003f8 <__panic>
c0104f4c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104f4f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0104f52:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104f55:	8b 40 04             	mov    0x4(%eax),%eax
     /* Select the victim */
     /*LAB3 EXERCISE 2: YOUR CODE*/ 
    //(1)  unlink the  earliest arrival page in front of pra_list_head qeueue
    list_entry_t *front = list_next(head);
c0104f58:	89 45 ec             	mov    %eax,-0x14(%ebp)
    assert(front != head);
c0104f5b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104f5e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104f61:	75 16                	jne    c0104f79 <_fifo_swap_out_victim+0x74>
c0104f63:	68 db cc 10 c0       	push   $0xc010ccdb
c0104f68:	68 9a cc 10 c0       	push   $0xc010cc9a
c0104f6d:	6a 52                	push   $0x52
c0104f6f:	68 af cc 10 c0       	push   $0xc010ccaf
c0104f74:	e8 7f b4 ff ff       	call   c01003f8 <__panic>
c0104f79:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104f7c:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0104f7f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104f82:	8b 40 04             	mov    0x4(%eax),%eax
c0104f85:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104f88:	8b 12                	mov    (%edx),%edx
c0104f8a:	89 55 e0             	mov    %edx,-0x20(%ebp)
c0104f8d:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0104f90:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104f93:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0104f96:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0104f99:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104f9c:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0104f9f:	89 10                	mov    %edx,(%eax)
    list_del(front);
    //(2)  assign the value of *ptr_page to the addr of this page
    struct Page *page = le2page(front, pra_page_link);
c0104fa1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104fa4:	83 e8 14             	sub    $0x14,%eax
c0104fa7:	89 45 e8             	mov    %eax,-0x18(%ebp)
    assert(page != NULL);
c0104faa:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0104fae:	75 16                	jne    c0104fc6 <_fifo_swap_out_victim+0xc1>
c0104fb0:	68 e9 cc 10 c0       	push   $0xc010cce9
c0104fb5:	68 9a cc 10 c0       	push   $0xc010cc9a
c0104fba:	6a 56                	push   $0x56
c0104fbc:	68 af cc 10 c0       	push   $0xc010ccaf
c0104fc1:	e8 32 b4 ff ff       	call   c01003f8 <__panic>
    *ptr_page = page;
c0104fc6:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104fc9:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0104fcc:	89 10                	mov    %edx,(%eax)
    return 0;
c0104fce:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104fd3:	c9                   	leave  
c0104fd4:	c3                   	ret    

c0104fd5 <_fifo_check_swap>:

static int
_fifo_check_swap(void) {
c0104fd5:	55                   	push   %ebp
c0104fd6:	89 e5                	mov    %esp,%ebp
c0104fd8:	83 ec 08             	sub    $0x8,%esp
    cprintf("write Virt Page c in fifo_check_swap\n");
c0104fdb:	83 ec 0c             	sub    $0xc,%esp
c0104fde:	68 f8 cc 10 c0       	push   $0xc010ccf8
c0104fe3:	e8 aa b2 ff ff       	call   c0100292 <cprintf>
c0104fe8:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x3000 = 0x0c;
c0104feb:	b8 00 30 00 00       	mov    $0x3000,%eax
c0104ff0:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==4);
c0104ff3:	a1 64 ff 19 c0       	mov    0xc019ff64,%eax
c0104ff8:	83 f8 04             	cmp    $0x4,%eax
c0104ffb:	74 16                	je     c0105013 <_fifo_check_swap+0x3e>
c0104ffd:	68 1e cd 10 c0       	push   $0xc010cd1e
c0105002:	68 9a cc 10 c0       	push   $0xc010cc9a
c0105007:	6a 5f                	push   $0x5f
c0105009:	68 af cc 10 c0       	push   $0xc010ccaf
c010500e:	e8 e5 b3 ff ff       	call   c01003f8 <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c0105013:	83 ec 0c             	sub    $0xc,%esp
c0105016:	68 30 cd 10 c0       	push   $0xc010cd30
c010501b:	e8 72 b2 ff ff       	call   c0100292 <cprintf>
c0105020:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x1000 = 0x0a;
c0105023:	b8 00 10 00 00       	mov    $0x1000,%eax
c0105028:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==4);
c010502b:	a1 64 ff 19 c0       	mov    0xc019ff64,%eax
c0105030:	83 f8 04             	cmp    $0x4,%eax
c0105033:	74 16                	je     c010504b <_fifo_check_swap+0x76>
c0105035:	68 1e cd 10 c0       	push   $0xc010cd1e
c010503a:	68 9a cc 10 c0       	push   $0xc010cc9a
c010503f:	6a 62                	push   $0x62
c0105041:	68 af cc 10 c0       	push   $0xc010ccaf
c0105046:	e8 ad b3 ff ff       	call   c01003f8 <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c010504b:	83 ec 0c             	sub    $0xc,%esp
c010504e:	68 58 cd 10 c0       	push   $0xc010cd58
c0105053:	e8 3a b2 ff ff       	call   c0100292 <cprintf>
c0105058:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x4000 = 0x0d;
c010505b:	b8 00 40 00 00       	mov    $0x4000,%eax
c0105060:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==4);
c0105063:	a1 64 ff 19 c0       	mov    0xc019ff64,%eax
c0105068:	83 f8 04             	cmp    $0x4,%eax
c010506b:	74 16                	je     c0105083 <_fifo_check_swap+0xae>
c010506d:	68 1e cd 10 c0       	push   $0xc010cd1e
c0105072:	68 9a cc 10 c0       	push   $0xc010cc9a
c0105077:	6a 65                	push   $0x65
c0105079:	68 af cc 10 c0       	push   $0xc010ccaf
c010507e:	e8 75 b3 ff ff       	call   c01003f8 <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0105083:	83 ec 0c             	sub    $0xc,%esp
c0105086:	68 80 cd 10 c0       	push   $0xc010cd80
c010508b:	e8 02 b2 ff ff       	call   c0100292 <cprintf>
c0105090:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x2000 = 0x0b;
c0105093:	b8 00 20 00 00       	mov    $0x2000,%eax
c0105098:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==4);
c010509b:	a1 64 ff 19 c0       	mov    0xc019ff64,%eax
c01050a0:	83 f8 04             	cmp    $0x4,%eax
c01050a3:	74 16                	je     c01050bb <_fifo_check_swap+0xe6>
c01050a5:	68 1e cd 10 c0       	push   $0xc010cd1e
c01050aa:	68 9a cc 10 c0       	push   $0xc010cc9a
c01050af:	6a 68                	push   $0x68
c01050b1:	68 af cc 10 c0       	push   $0xc010ccaf
c01050b6:	e8 3d b3 ff ff       	call   c01003f8 <__panic>
    cprintf("write Virt Page e in fifo_check_swap\n");
c01050bb:	83 ec 0c             	sub    $0xc,%esp
c01050be:	68 a8 cd 10 c0       	push   $0xc010cda8
c01050c3:	e8 ca b1 ff ff       	call   c0100292 <cprintf>
c01050c8:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x5000 = 0x0e;
c01050cb:	b8 00 50 00 00       	mov    $0x5000,%eax
c01050d0:	c6 00 0e             	movb   $0xe,(%eax)
    assert(pgfault_num==5);
c01050d3:	a1 64 ff 19 c0       	mov    0xc019ff64,%eax
c01050d8:	83 f8 05             	cmp    $0x5,%eax
c01050db:	74 16                	je     c01050f3 <_fifo_check_swap+0x11e>
c01050dd:	68 ce cd 10 c0       	push   $0xc010cdce
c01050e2:	68 9a cc 10 c0       	push   $0xc010cc9a
c01050e7:	6a 6b                	push   $0x6b
c01050e9:	68 af cc 10 c0       	push   $0xc010ccaf
c01050ee:	e8 05 b3 ff ff       	call   c01003f8 <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c01050f3:	83 ec 0c             	sub    $0xc,%esp
c01050f6:	68 80 cd 10 c0       	push   $0xc010cd80
c01050fb:	e8 92 b1 ff ff       	call   c0100292 <cprintf>
c0105100:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x2000 = 0x0b;
c0105103:	b8 00 20 00 00       	mov    $0x2000,%eax
c0105108:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==5);
c010510b:	a1 64 ff 19 c0       	mov    0xc019ff64,%eax
c0105110:	83 f8 05             	cmp    $0x5,%eax
c0105113:	74 16                	je     c010512b <_fifo_check_swap+0x156>
c0105115:	68 ce cd 10 c0       	push   $0xc010cdce
c010511a:	68 9a cc 10 c0       	push   $0xc010cc9a
c010511f:	6a 6e                	push   $0x6e
c0105121:	68 af cc 10 c0       	push   $0xc010ccaf
c0105126:	e8 cd b2 ff ff       	call   c01003f8 <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c010512b:	83 ec 0c             	sub    $0xc,%esp
c010512e:	68 30 cd 10 c0       	push   $0xc010cd30
c0105133:	e8 5a b1 ff ff       	call   c0100292 <cprintf>
c0105138:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x1000 = 0x0a;
c010513b:	b8 00 10 00 00       	mov    $0x1000,%eax
c0105140:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==6);
c0105143:	a1 64 ff 19 c0       	mov    0xc019ff64,%eax
c0105148:	83 f8 06             	cmp    $0x6,%eax
c010514b:	74 16                	je     c0105163 <_fifo_check_swap+0x18e>
c010514d:	68 dd cd 10 c0       	push   $0xc010cddd
c0105152:	68 9a cc 10 c0       	push   $0xc010cc9a
c0105157:	6a 71                	push   $0x71
c0105159:	68 af cc 10 c0       	push   $0xc010ccaf
c010515e:	e8 95 b2 ff ff       	call   c01003f8 <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0105163:	83 ec 0c             	sub    $0xc,%esp
c0105166:	68 80 cd 10 c0       	push   $0xc010cd80
c010516b:	e8 22 b1 ff ff       	call   c0100292 <cprintf>
c0105170:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x2000 = 0x0b;
c0105173:	b8 00 20 00 00       	mov    $0x2000,%eax
c0105178:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==7);
c010517b:	a1 64 ff 19 c0       	mov    0xc019ff64,%eax
c0105180:	83 f8 07             	cmp    $0x7,%eax
c0105183:	74 16                	je     c010519b <_fifo_check_swap+0x1c6>
c0105185:	68 ec cd 10 c0       	push   $0xc010cdec
c010518a:	68 9a cc 10 c0       	push   $0xc010cc9a
c010518f:	6a 74                	push   $0x74
c0105191:	68 af cc 10 c0       	push   $0xc010ccaf
c0105196:	e8 5d b2 ff ff       	call   c01003f8 <__panic>
    cprintf("write Virt Page c in fifo_check_swap\n");
c010519b:	83 ec 0c             	sub    $0xc,%esp
c010519e:	68 f8 cc 10 c0       	push   $0xc010ccf8
c01051a3:	e8 ea b0 ff ff       	call   c0100292 <cprintf>
c01051a8:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x3000 = 0x0c;
c01051ab:	b8 00 30 00 00       	mov    $0x3000,%eax
c01051b0:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==8);
c01051b3:	a1 64 ff 19 c0       	mov    0xc019ff64,%eax
c01051b8:	83 f8 08             	cmp    $0x8,%eax
c01051bb:	74 16                	je     c01051d3 <_fifo_check_swap+0x1fe>
c01051bd:	68 fb cd 10 c0       	push   $0xc010cdfb
c01051c2:	68 9a cc 10 c0       	push   $0xc010cc9a
c01051c7:	6a 77                	push   $0x77
c01051c9:	68 af cc 10 c0       	push   $0xc010ccaf
c01051ce:	e8 25 b2 ff ff       	call   c01003f8 <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c01051d3:	83 ec 0c             	sub    $0xc,%esp
c01051d6:	68 58 cd 10 c0       	push   $0xc010cd58
c01051db:	e8 b2 b0 ff ff       	call   c0100292 <cprintf>
c01051e0:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x4000 = 0x0d;
c01051e3:	b8 00 40 00 00       	mov    $0x4000,%eax
c01051e8:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==9);
c01051eb:	a1 64 ff 19 c0       	mov    0xc019ff64,%eax
c01051f0:	83 f8 09             	cmp    $0x9,%eax
c01051f3:	74 16                	je     c010520b <_fifo_check_swap+0x236>
c01051f5:	68 0a ce 10 c0       	push   $0xc010ce0a
c01051fa:	68 9a cc 10 c0       	push   $0xc010cc9a
c01051ff:	6a 7a                	push   $0x7a
c0105201:	68 af cc 10 c0       	push   $0xc010ccaf
c0105206:	e8 ed b1 ff ff       	call   c01003f8 <__panic>
    cprintf("write Virt Page e in fifo_check_swap\n");
c010520b:	83 ec 0c             	sub    $0xc,%esp
c010520e:	68 a8 cd 10 c0       	push   $0xc010cda8
c0105213:	e8 7a b0 ff ff       	call   c0100292 <cprintf>
c0105218:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x5000 = 0x0e;
c010521b:	b8 00 50 00 00       	mov    $0x5000,%eax
c0105220:	c6 00 0e             	movb   $0xe,(%eax)
    assert(pgfault_num==10);
c0105223:	a1 64 ff 19 c0       	mov    0xc019ff64,%eax
c0105228:	83 f8 0a             	cmp    $0xa,%eax
c010522b:	74 16                	je     c0105243 <_fifo_check_swap+0x26e>
c010522d:	68 19 ce 10 c0       	push   $0xc010ce19
c0105232:	68 9a cc 10 c0       	push   $0xc010cc9a
c0105237:	6a 7d                	push   $0x7d
c0105239:	68 af cc 10 c0       	push   $0xc010ccaf
c010523e:	e8 b5 b1 ff ff       	call   c01003f8 <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c0105243:	83 ec 0c             	sub    $0xc,%esp
c0105246:	68 30 cd 10 c0       	push   $0xc010cd30
c010524b:	e8 42 b0 ff ff       	call   c0100292 <cprintf>
c0105250:	83 c4 10             	add    $0x10,%esp
    assert(*(unsigned char *)0x1000 == 0x0a);
c0105253:	b8 00 10 00 00       	mov    $0x1000,%eax
c0105258:	0f b6 00             	movzbl (%eax),%eax
c010525b:	3c 0a                	cmp    $0xa,%al
c010525d:	74 16                	je     c0105275 <_fifo_check_swap+0x2a0>
c010525f:	68 2c ce 10 c0       	push   $0xc010ce2c
c0105264:	68 9a cc 10 c0       	push   $0xc010cc9a
c0105269:	6a 7f                	push   $0x7f
c010526b:	68 af cc 10 c0       	push   $0xc010ccaf
c0105270:	e8 83 b1 ff ff       	call   c01003f8 <__panic>
    *(unsigned char *)0x1000 = 0x0a;
c0105275:	b8 00 10 00 00       	mov    $0x1000,%eax
c010527a:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==11);
c010527d:	a1 64 ff 19 c0       	mov    0xc019ff64,%eax
c0105282:	83 f8 0b             	cmp    $0xb,%eax
c0105285:	74 19                	je     c01052a0 <_fifo_check_swap+0x2cb>
c0105287:	68 4d ce 10 c0       	push   $0xc010ce4d
c010528c:	68 9a cc 10 c0       	push   $0xc010cc9a
c0105291:	68 81 00 00 00       	push   $0x81
c0105296:	68 af cc 10 c0       	push   $0xc010ccaf
c010529b:	e8 58 b1 ff ff       	call   c01003f8 <__panic>
    return 0;
c01052a0:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01052a5:	c9                   	leave  
c01052a6:	c3                   	ret    

c01052a7 <_fifo_init>:


static int
_fifo_init(void)
{
c01052a7:	55                   	push   %ebp
c01052a8:	89 e5                	mov    %esp,%ebp
    return 0;
c01052aa:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01052af:	5d                   	pop    %ebp
c01052b0:	c3                   	ret    

c01052b1 <_fifo_set_unswappable>:

static int
_fifo_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c01052b1:	55                   	push   %ebp
c01052b2:	89 e5                	mov    %esp,%ebp
    return 0;
c01052b4:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01052b9:	5d                   	pop    %ebp
c01052ba:	c3                   	ret    

c01052bb <_fifo_tick_event>:

static int
_fifo_tick_event(struct mm_struct *mm)
{ return 0; }
c01052bb:	55                   	push   %ebp
c01052bc:	89 e5                	mov    %esp,%ebp
c01052be:	b8 00 00 00 00       	mov    $0x0,%eax
c01052c3:	5d                   	pop    %ebp
c01052c4:	c3                   	ret    

c01052c5 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c01052c5:	55                   	push   %ebp
c01052c6:	89 e5                	mov    %esp,%ebp
c01052c8:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c01052cb:	9c                   	pushf  
c01052cc:	58                   	pop    %eax
c01052cd:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c01052d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c01052d3:	25 00 02 00 00       	and    $0x200,%eax
c01052d8:	85 c0                	test   %eax,%eax
c01052da:	74 0c                	je     c01052e8 <__intr_save+0x23>
        intr_disable();
c01052dc:	e8 d6 ce ff ff       	call   c01021b7 <intr_disable>
        return 1;
c01052e1:	b8 01 00 00 00       	mov    $0x1,%eax
c01052e6:	eb 05                	jmp    c01052ed <__intr_save+0x28>
    }
    return 0;
c01052e8:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01052ed:	c9                   	leave  
c01052ee:	c3                   	ret    

c01052ef <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c01052ef:	55                   	push   %ebp
c01052f0:	89 e5                	mov    %esp,%ebp
c01052f2:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c01052f5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01052f9:	74 05                	je     c0105300 <__intr_restore+0x11>
        intr_enable();
c01052fb:	e8 b0 ce ff ff       	call   c01021b0 <intr_enable>
    }
}
c0105300:	90                   	nop
c0105301:	c9                   	leave  
c0105302:	c3                   	ret    

c0105303 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0105303:	55                   	push   %ebp
c0105304:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0105306:	8b 45 08             	mov    0x8(%ebp),%eax
c0105309:	8b 15 98 21 1a c0    	mov    0xc01a2198,%edx
c010530f:	29 d0                	sub    %edx,%eax
c0105311:	c1 f8 05             	sar    $0x5,%eax
}
c0105314:	5d                   	pop    %ebp
c0105315:	c3                   	ret    

c0105316 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0105316:	55                   	push   %ebp
c0105317:	89 e5                	mov    %esp,%ebp
    return page2ppn(page) << PGSHIFT;
c0105319:	ff 75 08             	pushl  0x8(%ebp)
c010531c:	e8 e2 ff ff ff       	call   c0105303 <page2ppn>
c0105321:	83 c4 04             	add    $0x4,%esp
c0105324:	c1 e0 0c             	shl    $0xc,%eax
}
c0105327:	c9                   	leave  
c0105328:	c3                   	ret    

c0105329 <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c0105329:	55                   	push   %ebp
c010532a:	89 e5                	mov    %esp,%ebp
c010532c:	83 ec 08             	sub    $0x8,%esp
    if (PPN(pa) >= npage) {
c010532f:	8b 45 08             	mov    0x8(%ebp),%eax
c0105332:	c1 e8 0c             	shr    $0xc,%eax
c0105335:	89 c2                	mov    %eax,%edx
c0105337:	a1 80 ff 19 c0       	mov    0xc019ff80,%eax
c010533c:	39 c2                	cmp    %eax,%edx
c010533e:	72 14                	jb     c0105354 <pa2page+0x2b>
        panic("pa2page called with invalid pa");
c0105340:	83 ec 04             	sub    $0x4,%esp
c0105343:	68 70 ce 10 c0       	push   $0xc010ce70
c0105348:	6a 5e                	push   $0x5e
c010534a:	68 8f ce 10 c0       	push   $0xc010ce8f
c010534f:	e8 a4 b0 ff ff       	call   c01003f8 <__panic>
    }
    return &pages[PPN(pa)];
c0105354:	a1 98 21 1a c0       	mov    0xc01a2198,%eax
c0105359:	8b 55 08             	mov    0x8(%ebp),%edx
c010535c:	c1 ea 0c             	shr    $0xc,%edx
c010535f:	c1 e2 05             	shl    $0x5,%edx
c0105362:	01 d0                	add    %edx,%eax
}
c0105364:	c9                   	leave  
c0105365:	c3                   	ret    

c0105366 <page2kva>:

static inline void *
page2kva(struct Page *page) {
c0105366:	55                   	push   %ebp
c0105367:	89 e5                	mov    %esp,%ebp
c0105369:	83 ec 18             	sub    $0x18,%esp
    return KADDR(page2pa(page));
c010536c:	ff 75 08             	pushl  0x8(%ebp)
c010536f:	e8 a2 ff ff ff       	call   c0105316 <page2pa>
c0105374:	83 c4 04             	add    $0x4,%esp
c0105377:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010537a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010537d:	c1 e8 0c             	shr    $0xc,%eax
c0105380:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105383:	a1 80 ff 19 c0       	mov    0xc019ff80,%eax
c0105388:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010538b:	72 14                	jb     c01053a1 <page2kva+0x3b>
c010538d:	ff 75 f4             	pushl  -0xc(%ebp)
c0105390:	68 a0 ce 10 c0       	push   $0xc010cea0
c0105395:	6a 65                	push   $0x65
c0105397:	68 8f ce 10 c0       	push   $0xc010ce8f
c010539c:	e8 57 b0 ff ff       	call   c01003f8 <__panic>
c01053a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01053a4:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c01053a9:	c9                   	leave  
c01053aa:	c3                   	ret    

c01053ab <kva2page>:

static inline struct Page *
kva2page(void *kva) {
c01053ab:	55                   	push   %ebp
c01053ac:	89 e5                	mov    %esp,%ebp
c01053ae:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PADDR(kva));
c01053b1:	8b 45 08             	mov    0x8(%ebp),%eax
c01053b4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01053b7:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c01053be:	77 14                	ja     c01053d4 <kva2page+0x29>
c01053c0:	ff 75 f4             	pushl  -0xc(%ebp)
c01053c3:	68 c4 ce 10 c0       	push   $0xc010cec4
c01053c8:	6a 6a                	push   $0x6a
c01053ca:	68 8f ce 10 c0       	push   $0xc010ce8f
c01053cf:	e8 24 b0 ff ff       	call   c01003f8 <__panic>
c01053d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01053d7:	05 00 00 00 40       	add    $0x40000000,%eax
c01053dc:	83 ec 0c             	sub    $0xc,%esp
c01053df:	50                   	push   %eax
c01053e0:	e8 44 ff ff ff       	call   c0105329 <pa2page>
c01053e5:	83 c4 10             	add    $0x10,%esp
}
c01053e8:	c9                   	leave  
c01053e9:	c3                   	ret    

c01053ea <__slob_get_free_pages>:
static slob_t *slobfree = &arena;
static bigblock_t *bigblocks;


static void* __slob_get_free_pages(gfp_t gfp, int order)
{
c01053ea:	55                   	push   %ebp
c01053eb:	89 e5                	mov    %esp,%ebp
c01053ed:	83 ec 18             	sub    $0x18,%esp
  struct Page * page = alloc_pages(1 << order);
c01053f0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01053f3:	ba 01 00 00 00       	mov    $0x1,%edx
c01053f8:	89 c1                	mov    %eax,%ecx
c01053fa:	d3 e2                	shl    %cl,%edx
c01053fc:	89 d0                	mov    %edx,%eax
c01053fe:	83 ec 0c             	sub    $0xc,%esp
c0105401:	50                   	push   %eax
c0105402:	e8 d4 23 00 00       	call   c01077db <alloc_pages>
c0105407:	83 c4 10             	add    $0x10,%esp
c010540a:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if(!page)
c010540d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105411:	75 07                	jne    c010541a <__slob_get_free_pages+0x30>
    return NULL;
c0105413:	b8 00 00 00 00       	mov    $0x0,%eax
c0105418:	eb 0e                	jmp    c0105428 <__slob_get_free_pages+0x3e>
  return page2kva(page);
c010541a:	83 ec 0c             	sub    $0xc,%esp
c010541d:	ff 75 f4             	pushl  -0xc(%ebp)
c0105420:	e8 41 ff ff ff       	call   c0105366 <page2kva>
c0105425:	83 c4 10             	add    $0x10,%esp
}
c0105428:	c9                   	leave  
c0105429:	c3                   	ret    

c010542a <__slob_free_pages>:

#define __slob_get_free_page(gfp) __slob_get_free_pages(gfp, 0)

static inline void __slob_free_pages(unsigned long kva, int order)
{
c010542a:	55                   	push   %ebp
c010542b:	89 e5                	mov    %esp,%ebp
c010542d:	53                   	push   %ebx
c010542e:	83 ec 04             	sub    $0x4,%esp
  free_pages(kva2page(kva), 1 << order);
c0105431:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105434:	ba 01 00 00 00       	mov    $0x1,%edx
c0105439:	89 c1                	mov    %eax,%ecx
c010543b:	d3 e2                	shl    %cl,%edx
c010543d:	89 d0                	mov    %edx,%eax
c010543f:	89 c3                	mov    %eax,%ebx
c0105441:	8b 45 08             	mov    0x8(%ebp),%eax
c0105444:	83 ec 0c             	sub    $0xc,%esp
c0105447:	50                   	push   %eax
c0105448:	e8 5e ff ff ff       	call   c01053ab <kva2page>
c010544d:	83 c4 10             	add    $0x10,%esp
c0105450:	83 ec 08             	sub    $0x8,%esp
c0105453:	53                   	push   %ebx
c0105454:	50                   	push   %eax
c0105455:	e8 ed 23 00 00       	call   c0107847 <free_pages>
c010545a:	83 c4 10             	add    $0x10,%esp
}
c010545d:	90                   	nop
c010545e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0105461:	c9                   	leave  
c0105462:	c3                   	ret    

c0105463 <slob_alloc>:

static void slob_free(void *b, int size);

static void *slob_alloc(size_t size, gfp_t gfp, int align)
{
c0105463:	55                   	push   %ebp
c0105464:	89 e5                	mov    %esp,%ebp
c0105466:	83 ec 28             	sub    $0x28,%esp
  assert( (size + SLOB_UNIT) < PAGE_SIZE );
c0105469:	8b 45 08             	mov    0x8(%ebp),%eax
c010546c:	83 c0 08             	add    $0x8,%eax
c010546f:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c0105474:	76 16                	jbe    c010548c <slob_alloc+0x29>
c0105476:	68 e8 ce 10 c0       	push   $0xc010cee8
c010547b:	68 07 cf 10 c0       	push   $0xc010cf07
c0105480:	6a 64                	push   $0x64
c0105482:	68 1c cf 10 c0       	push   $0xc010cf1c
c0105487:	e8 6c af ff ff       	call   c01003f8 <__panic>

	slob_t *prev, *cur, *aligned = 0;
c010548c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	int delta = 0, units = SLOB_UNITS(size);
c0105493:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c010549a:	8b 45 08             	mov    0x8(%ebp),%eax
c010549d:	83 c0 07             	add    $0x7,%eax
c01054a0:	c1 e8 03             	shr    $0x3,%eax
c01054a3:	89 45 e0             	mov    %eax,-0x20(%ebp)
	unsigned long flags;

	spin_lock_irqsave(&slob_lock, flags);
c01054a6:	e8 1a fe ff ff       	call   c01052c5 <__intr_save>
c01054ab:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	prev = slobfree;
c01054ae:	a1 48 ba 12 c0       	mov    0xc012ba48,%eax
c01054b3:	89 45 f4             	mov    %eax,-0xc(%ebp)
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c01054b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01054b9:	8b 40 04             	mov    0x4(%eax),%eax
c01054bc:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (align) {
c01054bf:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01054c3:	74 25                	je     c01054ea <slob_alloc+0x87>
			aligned = (slob_t *)ALIGN((unsigned long)cur, align);
c01054c5:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01054c8:	8b 45 10             	mov    0x10(%ebp),%eax
c01054cb:	01 d0                	add    %edx,%eax
c01054cd:	8d 50 ff             	lea    -0x1(%eax),%edx
c01054d0:	8b 45 10             	mov    0x10(%ebp),%eax
c01054d3:	f7 d8                	neg    %eax
c01054d5:	21 d0                	and    %edx,%eax
c01054d7:	89 45 ec             	mov    %eax,-0x14(%ebp)
			delta = aligned - cur;
c01054da:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01054dd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01054e0:	29 c2                	sub    %eax,%edx
c01054e2:	89 d0                	mov    %edx,%eax
c01054e4:	c1 f8 03             	sar    $0x3,%eax
c01054e7:	89 45 e8             	mov    %eax,-0x18(%ebp)
		}
		if (cur->units >= units + delta) { /* room enough? */
c01054ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01054ed:	8b 00                	mov    (%eax),%eax
c01054ef:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c01054f2:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01054f5:	01 ca                	add    %ecx,%edx
c01054f7:	39 d0                	cmp    %edx,%eax
c01054f9:	0f 8c b1 00 00 00    	jl     c01055b0 <slob_alloc+0x14d>
			if (delta) { /* need to fragment head to align? */
c01054ff:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0105503:	74 38                	je     c010553d <slob_alloc+0xda>
				aligned->units = cur->units - delta;
c0105505:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105508:	8b 00                	mov    (%eax),%eax
c010550a:	2b 45 e8             	sub    -0x18(%ebp),%eax
c010550d:	89 c2                	mov    %eax,%edx
c010550f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105512:	89 10                	mov    %edx,(%eax)
				aligned->next = cur->next;
c0105514:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105517:	8b 50 04             	mov    0x4(%eax),%edx
c010551a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010551d:	89 50 04             	mov    %edx,0x4(%eax)
				cur->next = aligned;
c0105520:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105523:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0105526:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = delta;
c0105529:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010552c:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010552f:	89 10                	mov    %edx,(%eax)
				prev = cur;
c0105531:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105534:	89 45 f4             	mov    %eax,-0xc(%ebp)
				cur = aligned;
c0105537:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010553a:	89 45 f0             	mov    %eax,-0x10(%ebp)
			}

			if (cur->units == units) /* exact fit? */
c010553d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105540:	8b 00                	mov    (%eax),%eax
c0105542:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0105545:	75 0e                	jne    c0105555 <slob_alloc+0xf2>
				prev->next = cur->next; /* unlink */
c0105547:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010554a:	8b 50 04             	mov    0x4(%eax),%edx
c010554d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105550:	89 50 04             	mov    %edx,0x4(%eax)
c0105553:	eb 3c                	jmp    c0105591 <slob_alloc+0x12e>
			else { /* fragment */
				prev->next = cur + units;
c0105555:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105558:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c010555f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105562:	01 c2                	add    %eax,%edx
c0105564:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105567:	89 50 04             	mov    %edx,0x4(%eax)
				prev->next->units = cur->units - units;
c010556a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010556d:	8b 40 04             	mov    0x4(%eax),%eax
c0105570:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0105573:	8b 12                	mov    (%edx),%edx
c0105575:	2b 55 e0             	sub    -0x20(%ebp),%edx
c0105578:	89 10                	mov    %edx,(%eax)
				prev->next->next = cur->next;
c010557a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010557d:	8b 40 04             	mov    0x4(%eax),%eax
c0105580:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0105583:	8b 52 04             	mov    0x4(%edx),%edx
c0105586:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = units;
c0105589:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010558c:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010558f:	89 10                	mov    %edx,(%eax)
			}

			slobfree = prev;
c0105591:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105594:	a3 48 ba 12 c0       	mov    %eax,0xc012ba48
			spin_unlock_irqrestore(&slob_lock, flags);
c0105599:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010559c:	83 ec 0c             	sub    $0xc,%esp
c010559f:	50                   	push   %eax
c01055a0:	e8 4a fd ff ff       	call   c01052ef <__intr_restore>
c01055a5:	83 c4 10             	add    $0x10,%esp
			return cur;
c01055a8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01055ab:	e9 80 00 00 00       	jmp    c0105630 <slob_alloc+0x1cd>
		}
		if (cur == slobfree) {
c01055b0:	a1 48 ba 12 c0       	mov    0xc012ba48,%eax
c01055b5:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c01055b8:	75 62                	jne    c010561c <slob_alloc+0x1b9>
			spin_unlock_irqrestore(&slob_lock, flags);
c01055ba:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01055bd:	83 ec 0c             	sub    $0xc,%esp
c01055c0:	50                   	push   %eax
c01055c1:	e8 29 fd ff ff       	call   c01052ef <__intr_restore>
c01055c6:	83 c4 10             	add    $0x10,%esp

			if (size == PAGE_SIZE) /* trying to shrink arena? */
c01055c9:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c01055d0:	75 07                	jne    c01055d9 <slob_alloc+0x176>
				return 0;
c01055d2:	b8 00 00 00 00       	mov    $0x0,%eax
c01055d7:	eb 57                	jmp    c0105630 <slob_alloc+0x1cd>

			cur = (slob_t *)__slob_get_free_page(gfp);
c01055d9:	83 ec 08             	sub    $0x8,%esp
c01055dc:	6a 00                	push   $0x0
c01055de:	ff 75 0c             	pushl  0xc(%ebp)
c01055e1:	e8 04 fe ff ff       	call   c01053ea <__slob_get_free_pages>
c01055e6:	83 c4 10             	add    $0x10,%esp
c01055e9:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (!cur)
c01055ec:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01055f0:	75 07                	jne    c01055f9 <slob_alloc+0x196>
				return 0;
c01055f2:	b8 00 00 00 00       	mov    $0x0,%eax
c01055f7:	eb 37                	jmp    c0105630 <slob_alloc+0x1cd>

			slob_free(cur, PAGE_SIZE);
c01055f9:	83 ec 08             	sub    $0x8,%esp
c01055fc:	68 00 10 00 00       	push   $0x1000
c0105601:	ff 75 f0             	pushl  -0x10(%ebp)
c0105604:	e8 29 00 00 00       	call   c0105632 <slob_free>
c0105609:	83 c4 10             	add    $0x10,%esp
			spin_lock_irqsave(&slob_lock, flags);
c010560c:	e8 b4 fc ff ff       	call   c01052c5 <__intr_save>
c0105611:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			cur = slobfree;
c0105614:	a1 48 ba 12 c0       	mov    0xc012ba48,%eax
c0105619:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int delta = 0, units = SLOB_UNITS(size);
	unsigned long flags;

	spin_lock_irqsave(&slob_lock, flags);
	prev = slobfree;
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c010561c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010561f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105622:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105625:	8b 40 04             	mov    0x4(%eax),%eax
c0105628:	89 45 f0             	mov    %eax,-0x10(%ebp)

			slob_free(cur, PAGE_SIZE);
			spin_lock_irqsave(&slob_lock, flags);
			cur = slobfree;
		}
	}
c010562b:	e9 8f fe ff ff       	jmp    c01054bf <slob_alloc+0x5c>
}
c0105630:	c9                   	leave  
c0105631:	c3                   	ret    

c0105632 <slob_free>:

static void slob_free(void *block, int size)
{
c0105632:	55                   	push   %ebp
c0105633:	89 e5                	mov    %esp,%ebp
c0105635:	83 ec 18             	sub    $0x18,%esp
	slob_t *cur, *b = (slob_t *)block;
c0105638:	8b 45 08             	mov    0x8(%ebp),%eax
c010563b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c010563e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0105642:	0f 84 05 01 00 00    	je     c010574d <slob_free+0x11b>
		return;

	if (size)
c0105648:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010564c:	74 10                	je     c010565e <slob_free+0x2c>
		b->units = SLOB_UNITS(size);
c010564e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105651:	83 c0 07             	add    $0x7,%eax
c0105654:	c1 e8 03             	shr    $0x3,%eax
c0105657:	89 c2                	mov    %eax,%edx
c0105659:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010565c:	89 10                	mov    %edx,(%eax)

	/* Find reinsertion point */
	spin_lock_irqsave(&slob_lock, flags);
c010565e:	e8 62 fc ff ff       	call   c01052c5 <__intr_save>
c0105663:	89 45 ec             	mov    %eax,-0x14(%ebp)
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c0105666:	a1 48 ba 12 c0       	mov    0xc012ba48,%eax
c010566b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010566e:	eb 27                	jmp    c0105697 <slob_free+0x65>
		if (cur >= cur->next && (b > cur || b < cur->next))
c0105670:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105673:	8b 40 04             	mov    0x4(%eax),%eax
c0105676:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0105679:	77 13                	ja     c010568e <slob_free+0x5c>
c010567b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010567e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0105681:	77 27                	ja     c01056aa <slob_free+0x78>
c0105683:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105686:	8b 40 04             	mov    0x4(%eax),%eax
c0105689:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010568c:	77 1c                	ja     c01056aa <slob_free+0x78>
	if (size)
		b->units = SLOB_UNITS(size);

	/* Find reinsertion point */
	spin_lock_irqsave(&slob_lock, flags);
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c010568e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105691:	8b 40 04             	mov    0x4(%eax),%eax
c0105694:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105697:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010569a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010569d:	76 d1                	jbe    c0105670 <slob_free+0x3e>
c010569f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01056a2:	8b 40 04             	mov    0x4(%eax),%eax
c01056a5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01056a8:	76 c6                	jbe    c0105670 <slob_free+0x3e>
		if (cur >= cur->next && (b > cur || b < cur->next))
			break;

	if (b + b->units == cur->next) {
c01056aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01056ad:	8b 00                	mov    (%eax),%eax
c01056af:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c01056b6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01056b9:	01 c2                	add    %eax,%edx
c01056bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01056be:	8b 40 04             	mov    0x4(%eax),%eax
c01056c1:	39 c2                	cmp    %eax,%edx
c01056c3:	75 25                	jne    c01056ea <slob_free+0xb8>
		b->units += cur->next->units;
c01056c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01056c8:	8b 10                	mov    (%eax),%edx
c01056ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01056cd:	8b 40 04             	mov    0x4(%eax),%eax
c01056d0:	8b 00                	mov    (%eax),%eax
c01056d2:	01 c2                	add    %eax,%edx
c01056d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01056d7:	89 10                	mov    %edx,(%eax)
		b->next = cur->next->next;
c01056d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01056dc:	8b 40 04             	mov    0x4(%eax),%eax
c01056df:	8b 50 04             	mov    0x4(%eax),%edx
c01056e2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01056e5:	89 50 04             	mov    %edx,0x4(%eax)
c01056e8:	eb 0c                	jmp    c01056f6 <slob_free+0xc4>
	} else
		b->next = cur->next;
c01056ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01056ed:	8b 50 04             	mov    0x4(%eax),%edx
c01056f0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01056f3:	89 50 04             	mov    %edx,0x4(%eax)

	if (cur + cur->units == b) {
c01056f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01056f9:	8b 00                	mov    (%eax),%eax
c01056fb:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0105702:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105705:	01 d0                	add    %edx,%eax
c0105707:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010570a:	75 1f                	jne    c010572b <slob_free+0xf9>
		cur->units += b->units;
c010570c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010570f:	8b 10                	mov    (%eax),%edx
c0105711:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105714:	8b 00                	mov    (%eax),%eax
c0105716:	01 c2                	add    %eax,%edx
c0105718:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010571b:	89 10                	mov    %edx,(%eax)
		cur->next = b->next;
c010571d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105720:	8b 50 04             	mov    0x4(%eax),%edx
c0105723:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105726:	89 50 04             	mov    %edx,0x4(%eax)
c0105729:	eb 09                	jmp    c0105734 <slob_free+0x102>
	} else
		cur->next = b;
c010572b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010572e:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0105731:	89 50 04             	mov    %edx,0x4(%eax)

	slobfree = cur;
c0105734:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105737:	a3 48 ba 12 c0       	mov    %eax,0xc012ba48

	spin_unlock_irqrestore(&slob_lock, flags);
c010573c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010573f:	83 ec 0c             	sub    $0xc,%esp
c0105742:	50                   	push   %eax
c0105743:	e8 a7 fb ff ff       	call   c01052ef <__intr_restore>
c0105748:	83 c4 10             	add    $0x10,%esp
c010574b:	eb 01                	jmp    c010574e <slob_free+0x11c>
{
	slob_t *cur, *b = (slob_t *)block;
	unsigned long flags;

	if (!block)
		return;
c010574d:	90                   	nop
		cur->next = b;

	slobfree = cur;

	spin_unlock_irqrestore(&slob_lock, flags);
}
c010574e:	c9                   	leave  
c010574f:	c3                   	ret    

c0105750 <slob_init>:



void
slob_init(void) {
c0105750:	55                   	push   %ebp
c0105751:	89 e5                	mov    %esp,%ebp
c0105753:	83 ec 08             	sub    $0x8,%esp
  cprintf("use SLOB allocator\n");
c0105756:	83 ec 0c             	sub    $0xc,%esp
c0105759:	68 2e cf 10 c0       	push   $0xc010cf2e
c010575e:	e8 2f ab ff ff       	call   c0100292 <cprintf>
c0105763:	83 c4 10             	add    $0x10,%esp
}
c0105766:	90                   	nop
c0105767:	c9                   	leave  
c0105768:	c3                   	ret    

c0105769 <kmalloc_init>:

inline void 
kmalloc_init(void) {
c0105769:	55                   	push   %ebp
c010576a:	89 e5                	mov    %esp,%ebp
c010576c:	83 ec 08             	sub    $0x8,%esp
    slob_init();
c010576f:	e8 dc ff ff ff       	call   c0105750 <slob_init>
    cprintf("kmalloc_init() succeeded!\n");
c0105774:	83 ec 0c             	sub    $0xc,%esp
c0105777:	68 42 cf 10 c0       	push   $0xc010cf42
c010577c:	e8 11 ab ff ff       	call   c0100292 <cprintf>
c0105781:	83 c4 10             	add    $0x10,%esp
}
c0105784:	90                   	nop
c0105785:	c9                   	leave  
c0105786:	c3                   	ret    

c0105787 <slob_allocated>:

size_t
slob_allocated(void) {
c0105787:	55                   	push   %ebp
c0105788:	89 e5                	mov    %esp,%ebp
  return 0;
c010578a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010578f:	5d                   	pop    %ebp
c0105790:	c3                   	ret    

c0105791 <kallocated>:

size_t
kallocated(void) {
c0105791:	55                   	push   %ebp
c0105792:	89 e5                	mov    %esp,%ebp
   return slob_allocated();
c0105794:	e8 ee ff ff ff       	call   c0105787 <slob_allocated>
}
c0105799:	5d                   	pop    %ebp
c010579a:	c3                   	ret    

c010579b <find_order>:

static int find_order(int size)
{
c010579b:	55                   	push   %ebp
c010579c:	89 e5                	mov    %esp,%ebp
c010579e:	83 ec 10             	sub    $0x10,%esp
	int order = 0;
c01057a1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for ( ; size > 4096 ; size >>=1)
c01057a8:	eb 07                	jmp    c01057b1 <find_order+0x16>
		order++;
c01057aa:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
}

static int find_order(int size)
{
	int order = 0;
	for ( ; size > 4096 ; size >>=1)
c01057ae:	d1 7d 08             	sarl   0x8(%ebp)
c01057b1:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c01057b8:	7f f0                	jg     c01057aa <find_order+0xf>
		order++;
	return order;
c01057ba:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c01057bd:	c9                   	leave  
c01057be:	c3                   	ret    

c01057bf <__kmalloc>:

static void *__kmalloc(size_t size, gfp_t gfp)
{
c01057bf:	55                   	push   %ebp
c01057c0:	89 e5                	mov    %esp,%ebp
c01057c2:	83 ec 18             	sub    $0x18,%esp
	slob_t *m;
	bigblock_t *bb;
	unsigned long flags;

	if (size < PAGE_SIZE - SLOB_UNIT) {
c01057c5:	81 7d 08 f7 0f 00 00 	cmpl   $0xff7,0x8(%ebp)
c01057cc:	77 35                	ja     c0105803 <__kmalloc+0x44>
		m = slob_alloc(size + SLOB_UNIT, gfp, 0);
c01057ce:	8b 45 08             	mov    0x8(%ebp),%eax
c01057d1:	83 c0 08             	add    $0x8,%eax
c01057d4:	83 ec 04             	sub    $0x4,%esp
c01057d7:	6a 00                	push   $0x0
c01057d9:	ff 75 0c             	pushl  0xc(%ebp)
c01057dc:	50                   	push   %eax
c01057dd:	e8 81 fc ff ff       	call   c0105463 <slob_alloc>
c01057e2:	83 c4 10             	add    $0x10,%esp
c01057e5:	89 45 f4             	mov    %eax,-0xc(%ebp)
		return m ? (void *)(m + 1) : 0;
c01057e8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01057ec:	74 0b                	je     c01057f9 <__kmalloc+0x3a>
c01057ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01057f1:	83 c0 08             	add    $0x8,%eax
c01057f4:	e9 b3 00 00 00       	jmp    c01058ac <__kmalloc+0xed>
c01057f9:	b8 00 00 00 00       	mov    $0x0,%eax
c01057fe:	e9 a9 00 00 00       	jmp    c01058ac <__kmalloc+0xed>
	}

	bb = slob_alloc(sizeof(bigblock_t), gfp, 0);
c0105803:	83 ec 04             	sub    $0x4,%esp
c0105806:	6a 00                	push   $0x0
c0105808:	ff 75 0c             	pushl  0xc(%ebp)
c010580b:	6a 0c                	push   $0xc
c010580d:	e8 51 fc ff ff       	call   c0105463 <slob_alloc>
c0105812:	83 c4 10             	add    $0x10,%esp
c0105815:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (!bb)
c0105818:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010581c:	75 0a                	jne    c0105828 <__kmalloc+0x69>
		return 0;
c010581e:	b8 00 00 00 00       	mov    $0x0,%eax
c0105823:	e9 84 00 00 00       	jmp    c01058ac <__kmalloc+0xed>

	bb->order = find_order(size);
c0105828:	8b 45 08             	mov    0x8(%ebp),%eax
c010582b:	83 ec 0c             	sub    $0xc,%esp
c010582e:	50                   	push   %eax
c010582f:	e8 67 ff ff ff       	call   c010579b <find_order>
c0105834:	83 c4 10             	add    $0x10,%esp
c0105837:	89 c2                	mov    %eax,%edx
c0105839:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010583c:	89 10                	mov    %edx,(%eax)
	bb->pages = (void *)__slob_get_free_pages(gfp, bb->order);
c010583e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105841:	8b 00                	mov    (%eax),%eax
c0105843:	83 ec 08             	sub    $0x8,%esp
c0105846:	50                   	push   %eax
c0105847:	ff 75 0c             	pushl  0xc(%ebp)
c010584a:	e8 9b fb ff ff       	call   c01053ea <__slob_get_free_pages>
c010584f:	83 c4 10             	add    $0x10,%esp
c0105852:	89 c2                	mov    %eax,%edx
c0105854:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105857:	89 50 04             	mov    %edx,0x4(%eax)

	if (bb->pages) {
c010585a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010585d:	8b 40 04             	mov    0x4(%eax),%eax
c0105860:	85 c0                	test   %eax,%eax
c0105862:	74 33                	je     c0105897 <__kmalloc+0xd8>
		spin_lock_irqsave(&block_lock, flags);
c0105864:	e8 5c fa ff ff       	call   c01052c5 <__intr_save>
c0105869:	89 45 ec             	mov    %eax,-0x14(%ebp)
		bb->next = bigblocks;
c010586c:	8b 15 68 ff 19 c0    	mov    0xc019ff68,%edx
c0105872:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105875:	89 50 08             	mov    %edx,0x8(%eax)
		bigblocks = bb;
c0105878:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010587b:	a3 68 ff 19 c0       	mov    %eax,0xc019ff68
		spin_unlock_irqrestore(&block_lock, flags);
c0105880:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105883:	83 ec 0c             	sub    $0xc,%esp
c0105886:	50                   	push   %eax
c0105887:	e8 63 fa ff ff       	call   c01052ef <__intr_restore>
c010588c:	83 c4 10             	add    $0x10,%esp
		return bb->pages;
c010588f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105892:	8b 40 04             	mov    0x4(%eax),%eax
c0105895:	eb 15                	jmp    c01058ac <__kmalloc+0xed>
	}

	slob_free(bb, sizeof(bigblock_t));
c0105897:	83 ec 08             	sub    $0x8,%esp
c010589a:	6a 0c                	push   $0xc
c010589c:	ff 75 f0             	pushl  -0x10(%ebp)
c010589f:	e8 8e fd ff ff       	call   c0105632 <slob_free>
c01058a4:	83 c4 10             	add    $0x10,%esp
	return 0;
c01058a7:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01058ac:	c9                   	leave  
c01058ad:	c3                   	ret    

c01058ae <kmalloc>:

void *
kmalloc(size_t size)
{
c01058ae:	55                   	push   %ebp
c01058af:	89 e5                	mov    %esp,%ebp
c01058b1:	83 ec 08             	sub    $0x8,%esp
  return __kmalloc(size, 0);
c01058b4:	83 ec 08             	sub    $0x8,%esp
c01058b7:	6a 00                	push   $0x0
c01058b9:	ff 75 08             	pushl  0x8(%ebp)
c01058bc:	e8 fe fe ff ff       	call   c01057bf <__kmalloc>
c01058c1:	83 c4 10             	add    $0x10,%esp
}
c01058c4:	c9                   	leave  
c01058c5:	c3                   	ret    

c01058c6 <kfree>:


void kfree(void *block)
{
c01058c6:	55                   	push   %ebp
c01058c7:	89 e5                	mov    %esp,%ebp
c01058c9:	83 ec 18             	sub    $0x18,%esp
	bigblock_t *bb, **last = &bigblocks;
c01058cc:	c7 45 f0 68 ff 19 c0 	movl   $0xc019ff68,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c01058d3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01058d7:	0f 84 ac 00 00 00    	je     c0105989 <kfree+0xc3>
		return;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c01058dd:	8b 45 08             	mov    0x8(%ebp),%eax
c01058e0:	25 ff 0f 00 00       	and    $0xfff,%eax
c01058e5:	85 c0                	test   %eax,%eax
c01058e7:	0f 85 85 00 00 00    	jne    c0105972 <kfree+0xac>
		/* might be on the big block list */
		spin_lock_irqsave(&block_lock, flags);
c01058ed:	e8 d3 f9 ff ff       	call   c01052c5 <__intr_save>
c01058f2:	89 45 ec             	mov    %eax,-0x14(%ebp)
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c01058f5:	a1 68 ff 19 c0       	mov    0xc019ff68,%eax
c01058fa:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01058fd:	eb 5e                	jmp    c010595d <kfree+0x97>
			if (bb->pages == block) {
c01058ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105902:	8b 40 04             	mov    0x4(%eax),%eax
c0105905:	3b 45 08             	cmp    0x8(%ebp),%eax
c0105908:	75 41                	jne    c010594b <kfree+0x85>
				*last = bb->next;
c010590a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010590d:	8b 50 08             	mov    0x8(%eax),%edx
c0105910:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105913:	89 10                	mov    %edx,(%eax)
				spin_unlock_irqrestore(&block_lock, flags);
c0105915:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105918:	83 ec 0c             	sub    $0xc,%esp
c010591b:	50                   	push   %eax
c010591c:	e8 ce f9 ff ff       	call   c01052ef <__intr_restore>
c0105921:	83 c4 10             	add    $0x10,%esp
				__slob_free_pages((unsigned long)block, bb->order);
c0105924:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105927:	8b 10                	mov    (%eax),%edx
c0105929:	8b 45 08             	mov    0x8(%ebp),%eax
c010592c:	83 ec 08             	sub    $0x8,%esp
c010592f:	52                   	push   %edx
c0105930:	50                   	push   %eax
c0105931:	e8 f4 fa ff ff       	call   c010542a <__slob_free_pages>
c0105936:	83 c4 10             	add    $0x10,%esp
				slob_free(bb, sizeof(bigblock_t));
c0105939:	83 ec 08             	sub    $0x8,%esp
c010593c:	6a 0c                	push   $0xc
c010593e:	ff 75 f4             	pushl  -0xc(%ebp)
c0105941:	e8 ec fc ff ff       	call   c0105632 <slob_free>
c0105946:	83 c4 10             	add    $0x10,%esp
				return;
c0105949:	eb 3f                	jmp    c010598a <kfree+0xc4>
		return;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
		/* might be on the big block list */
		spin_lock_irqsave(&block_lock, flags);
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c010594b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010594e:	83 c0 08             	add    $0x8,%eax
c0105951:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105954:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105957:	8b 40 08             	mov    0x8(%eax),%eax
c010595a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010595d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105961:	75 9c                	jne    c01058ff <kfree+0x39>
				__slob_free_pages((unsigned long)block, bb->order);
				slob_free(bb, sizeof(bigblock_t));
				return;
			}
		}
		spin_unlock_irqrestore(&block_lock, flags);
c0105963:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105966:	83 ec 0c             	sub    $0xc,%esp
c0105969:	50                   	push   %eax
c010596a:	e8 80 f9 ff ff       	call   c01052ef <__intr_restore>
c010596f:	83 c4 10             	add    $0x10,%esp
	}

	slob_free((slob_t *)block - 1, 0);
c0105972:	8b 45 08             	mov    0x8(%ebp),%eax
c0105975:	83 e8 08             	sub    $0x8,%eax
c0105978:	83 ec 08             	sub    $0x8,%esp
c010597b:	6a 00                	push   $0x0
c010597d:	50                   	push   %eax
c010597e:	e8 af fc ff ff       	call   c0105632 <slob_free>
c0105983:	83 c4 10             	add    $0x10,%esp
	return;
c0105986:	90                   	nop
c0105987:	eb 01                	jmp    c010598a <kfree+0xc4>
{
	bigblock_t *bb, **last = &bigblocks;
	unsigned long flags;

	if (!block)
		return;
c0105989:	90                   	nop
		spin_unlock_irqrestore(&block_lock, flags);
	}

	slob_free((slob_t *)block - 1, 0);
	return;
}
c010598a:	c9                   	leave  
c010598b:	c3                   	ret    

c010598c <ksize>:


unsigned int ksize(const void *block)
{
c010598c:	55                   	push   %ebp
c010598d:	89 e5                	mov    %esp,%ebp
c010598f:	83 ec 18             	sub    $0x18,%esp
	bigblock_t *bb;
	unsigned long flags;

	if (!block)
c0105992:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0105996:	75 07                	jne    c010599f <ksize+0x13>
		return 0;
c0105998:	b8 00 00 00 00       	mov    $0x0,%eax
c010599d:	eb 73                	jmp    c0105a12 <ksize+0x86>

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c010599f:	8b 45 08             	mov    0x8(%ebp),%eax
c01059a2:	25 ff 0f 00 00       	and    $0xfff,%eax
c01059a7:	85 c0                	test   %eax,%eax
c01059a9:	75 5c                	jne    c0105a07 <ksize+0x7b>
		spin_lock_irqsave(&block_lock, flags);
c01059ab:	e8 15 f9 ff ff       	call   c01052c5 <__intr_save>
c01059b0:	89 45 f0             	mov    %eax,-0x10(%ebp)
		for (bb = bigblocks; bb; bb = bb->next)
c01059b3:	a1 68 ff 19 c0       	mov    0xc019ff68,%eax
c01059b8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01059bb:	eb 35                	jmp    c01059f2 <ksize+0x66>
			if (bb->pages == block) {
c01059bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01059c0:	8b 40 04             	mov    0x4(%eax),%eax
c01059c3:	3b 45 08             	cmp    0x8(%ebp),%eax
c01059c6:	75 21                	jne    c01059e9 <ksize+0x5d>
				spin_unlock_irqrestore(&slob_lock, flags);
c01059c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01059cb:	83 ec 0c             	sub    $0xc,%esp
c01059ce:	50                   	push   %eax
c01059cf:	e8 1b f9 ff ff       	call   c01052ef <__intr_restore>
c01059d4:	83 c4 10             	add    $0x10,%esp
				return PAGE_SIZE << bb->order;
c01059d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01059da:	8b 00                	mov    (%eax),%eax
c01059dc:	ba 00 10 00 00       	mov    $0x1000,%edx
c01059e1:	89 c1                	mov    %eax,%ecx
c01059e3:	d3 e2                	shl    %cl,%edx
c01059e5:	89 d0                	mov    %edx,%eax
c01059e7:	eb 29                	jmp    c0105a12 <ksize+0x86>
	if (!block)
		return 0;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
		spin_lock_irqsave(&block_lock, flags);
		for (bb = bigblocks; bb; bb = bb->next)
c01059e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01059ec:	8b 40 08             	mov    0x8(%eax),%eax
c01059ef:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01059f2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01059f6:	75 c5                	jne    c01059bd <ksize+0x31>
			if (bb->pages == block) {
				spin_unlock_irqrestore(&slob_lock, flags);
				return PAGE_SIZE << bb->order;
			}
		spin_unlock_irqrestore(&block_lock, flags);
c01059f8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01059fb:	83 ec 0c             	sub    $0xc,%esp
c01059fe:	50                   	push   %eax
c01059ff:	e8 eb f8 ff ff       	call   c01052ef <__intr_restore>
c0105a04:	83 c4 10             	add    $0x10,%esp
	}

	return ((slob_t *)block - 1)->units * SLOB_UNIT;
c0105a07:	8b 45 08             	mov    0x8(%ebp),%eax
c0105a0a:	83 e8 08             	sub    $0x8,%eax
c0105a0d:	8b 00                	mov    (%eax),%eax
c0105a0f:	c1 e0 03             	shl    $0x3,%eax
}
c0105a12:	c9                   	leave  
c0105a13:	c3                   	ret    

c0105a14 <pa2page>:
page2pa(struct Page *page) {
    return page2ppn(page) << PGSHIFT;
}

static inline struct Page *
pa2page(uintptr_t pa) {
c0105a14:	55                   	push   %ebp
c0105a15:	89 e5                	mov    %esp,%ebp
c0105a17:	83 ec 08             	sub    $0x8,%esp
    if (PPN(pa) >= npage) {
c0105a1a:	8b 45 08             	mov    0x8(%ebp),%eax
c0105a1d:	c1 e8 0c             	shr    $0xc,%eax
c0105a20:	89 c2                	mov    %eax,%edx
c0105a22:	a1 80 ff 19 c0       	mov    0xc019ff80,%eax
c0105a27:	39 c2                	cmp    %eax,%edx
c0105a29:	72 14                	jb     c0105a3f <pa2page+0x2b>
        panic("pa2page called with invalid pa");
c0105a2b:	83 ec 04             	sub    $0x4,%esp
c0105a2e:	68 60 cf 10 c0       	push   $0xc010cf60
c0105a33:	6a 5e                	push   $0x5e
c0105a35:	68 7f cf 10 c0       	push   $0xc010cf7f
c0105a3a:	e8 b9 a9 ff ff       	call   c01003f8 <__panic>
    }
    return &pages[PPN(pa)];
c0105a3f:	a1 98 21 1a c0       	mov    0xc01a2198,%eax
c0105a44:	8b 55 08             	mov    0x8(%ebp),%edx
c0105a47:	c1 ea 0c             	shr    $0xc,%edx
c0105a4a:	c1 e2 05             	shl    $0x5,%edx
c0105a4d:	01 d0                	add    %edx,%eax
}
c0105a4f:	c9                   	leave  
c0105a50:	c3                   	ret    

c0105a51 <pte2page>:
kva2page(void *kva) {
    return pa2page(PADDR(kva));
}

static inline struct Page *
pte2page(pte_t pte) {
c0105a51:	55                   	push   %ebp
c0105a52:	89 e5                	mov    %esp,%ebp
c0105a54:	83 ec 08             	sub    $0x8,%esp
    if (!(pte & PTE_P)) {
c0105a57:	8b 45 08             	mov    0x8(%ebp),%eax
c0105a5a:	83 e0 01             	and    $0x1,%eax
c0105a5d:	85 c0                	test   %eax,%eax
c0105a5f:	75 14                	jne    c0105a75 <pte2page+0x24>
        panic("pte2page called with invalid pte");
c0105a61:	83 ec 04             	sub    $0x4,%esp
c0105a64:	68 90 cf 10 c0       	push   $0xc010cf90
c0105a69:	6a 70                	push   $0x70
c0105a6b:	68 7f cf 10 c0       	push   $0xc010cf7f
c0105a70:	e8 83 a9 ff ff       	call   c01003f8 <__panic>
    }
    return pa2page(PTE_ADDR(pte));
c0105a75:	8b 45 08             	mov    0x8(%ebp),%eax
c0105a78:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0105a7d:	83 ec 0c             	sub    $0xc,%esp
c0105a80:	50                   	push   %eax
c0105a81:	e8 8e ff ff ff       	call   c0105a14 <pa2page>
c0105a86:	83 c4 10             	add    $0x10,%esp
}
c0105a89:	c9                   	leave  
c0105a8a:	c3                   	ret    

c0105a8b <pde2page>:

static inline struct Page *
pde2page(pde_t pde) {
c0105a8b:	55                   	push   %ebp
c0105a8c:	89 e5                	mov    %esp,%ebp
c0105a8e:	83 ec 08             	sub    $0x8,%esp
    return pa2page(PDE_ADDR(pde));
c0105a91:	8b 45 08             	mov    0x8(%ebp),%eax
c0105a94:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0105a99:	83 ec 0c             	sub    $0xc,%esp
c0105a9c:	50                   	push   %eax
c0105a9d:	e8 72 ff ff ff       	call   c0105a14 <pa2page>
c0105aa2:	83 c4 10             	add    $0x10,%esp
}
c0105aa5:	c9                   	leave  
c0105aa6:	c3                   	ret    

c0105aa7 <swap_init>:

static void check_swap(void);

int
swap_init(void)
{
c0105aa7:	55                   	push   %ebp
c0105aa8:	89 e5                	mov    %esp,%ebp
c0105aaa:	83 ec 18             	sub    $0x18,%esp
     swapfs_init();
c0105aad:	e8 73 36 00 00       	call   c0109125 <swapfs_init>

     if (!(1024 <= max_swap_offset && max_swap_offset < MAX_SWAP_OFFSET_LIMIT))
c0105ab2:	a1 5c 21 1a c0       	mov    0xc01a215c,%eax
c0105ab7:	3d ff 03 00 00       	cmp    $0x3ff,%eax
c0105abc:	76 0c                	jbe    c0105aca <swap_init+0x23>
c0105abe:	a1 5c 21 1a c0       	mov    0xc01a215c,%eax
c0105ac3:	3d ff ff ff 00       	cmp    $0xffffff,%eax
c0105ac8:	76 17                	jbe    c0105ae1 <swap_init+0x3a>
     {
          panic("bad max_swap_offset %08x.\n", max_swap_offset);
c0105aca:	a1 5c 21 1a c0       	mov    0xc01a215c,%eax
c0105acf:	50                   	push   %eax
c0105ad0:	68 b1 cf 10 c0       	push   $0xc010cfb1
c0105ad5:	6a 29                	push   $0x29
c0105ad7:	68 cc cf 10 c0       	push   $0xc010cfcc
c0105adc:	e8 17 a9 ff ff       	call   c01003f8 <__panic>
     }
     
    // LAB3 : set sm as FIFO/ENHANCED CLOCK
    sm = &swap_manager_fifo;
c0105ae1:	c7 05 74 ff 19 c0 20 	movl   $0xc012ba20,0xc019ff74
c0105ae8:	ba 12 c0 
    // sm = &swap_manager_enclock;
    
     int r = sm->init();
c0105aeb:	a1 74 ff 19 c0       	mov    0xc019ff74,%eax
c0105af0:	8b 40 04             	mov    0x4(%eax),%eax
c0105af3:	ff d0                	call   *%eax
c0105af5:	89 45 f4             	mov    %eax,-0xc(%ebp)
     
     if (r == 0)
c0105af8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105afc:	75 27                	jne    c0105b25 <swap_init+0x7e>
     {
          swap_init_ok = 1;
c0105afe:	c7 05 6c ff 19 c0 01 	movl   $0x1,0xc019ff6c
c0105b05:	00 00 00 
          cprintf("SWAP: manager = %s\n", sm->name);
c0105b08:	a1 74 ff 19 c0       	mov    0xc019ff74,%eax
c0105b0d:	8b 00                	mov    (%eax),%eax
c0105b0f:	83 ec 08             	sub    $0x8,%esp
c0105b12:	50                   	push   %eax
c0105b13:	68 db cf 10 c0       	push   $0xc010cfdb
c0105b18:	e8 75 a7 ff ff       	call   c0100292 <cprintf>
c0105b1d:	83 c4 10             	add    $0x10,%esp
          check_swap();
c0105b20:	e8 fa 03 00 00       	call   c0105f1f <check_swap>
     }

     return r;
c0105b25:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0105b28:	c9                   	leave  
c0105b29:	c3                   	ret    

c0105b2a <swap_init_mm>:

int
swap_init_mm(struct mm_struct *mm)
{
c0105b2a:	55                   	push   %ebp
c0105b2b:	89 e5                	mov    %esp,%ebp
c0105b2d:	83 ec 08             	sub    $0x8,%esp
     return sm->init_mm(mm);
c0105b30:	a1 74 ff 19 c0       	mov    0xc019ff74,%eax
c0105b35:	8b 40 08             	mov    0x8(%eax),%eax
c0105b38:	83 ec 0c             	sub    $0xc,%esp
c0105b3b:	ff 75 08             	pushl  0x8(%ebp)
c0105b3e:	ff d0                	call   *%eax
c0105b40:	83 c4 10             	add    $0x10,%esp
}
c0105b43:	c9                   	leave  
c0105b44:	c3                   	ret    

c0105b45 <swap_tick_event>:

int
swap_tick_event(struct mm_struct *mm)
{
c0105b45:	55                   	push   %ebp
c0105b46:	89 e5                	mov    %esp,%ebp
c0105b48:	83 ec 08             	sub    $0x8,%esp
     return sm->tick_event(mm);
c0105b4b:	a1 74 ff 19 c0       	mov    0xc019ff74,%eax
c0105b50:	8b 40 0c             	mov    0xc(%eax),%eax
c0105b53:	83 ec 0c             	sub    $0xc,%esp
c0105b56:	ff 75 08             	pushl  0x8(%ebp)
c0105b59:	ff d0                	call   *%eax
c0105b5b:	83 c4 10             	add    $0x10,%esp
}
c0105b5e:	c9                   	leave  
c0105b5f:	c3                   	ret    

c0105b60 <swap_map_swappable>:

int
swap_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c0105b60:	55                   	push   %ebp
c0105b61:	89 e5                	mov    %esp,%ebp
c0105b63:	83 ec 08             	sub    $0x8,%esp
     return sm->map_swappable(mm, addr, page, swap_in);
c0105b66:	a1 74 ff 19 c0       	mov    0xc019ff74,%eax
c0105b6b:	8b 40 10             	mov    0x10(%eax),%eax
c0105b6e:	ff 75 14             	pushl  0x14(%ebp)
c0105b71:	ff 75 10             	pushl  0x10(%ebp)
c0105b74:	ff 75 0c             	pushl  0xc(%ebp)
c0105b77:	ff 75 08             	pushl  0x8(%ebp)
c0105b7a:	ff d0                	call   *%eax
c0105b7c:	83 c4 10             	add    $0x10,%esp
}
c0105b7f:	c9                   	leave  
c0105b80:	c3                   	ret    

c0105b81 <swap_set_unswappable>:

int
swap_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c0105b81:	55                   	push   %ebp
c0105b82:	89 e5                	mov    %esp,%ebp
c0105b84:	83 ec 08             	sub    $0x8,%esp
     return sm->set_unswappable(mm, addr);
c0105b87:	a1 74 ff 19 c0       	mov    0xc019ff74,%eax
c0105b8c:	8b 40 14             	mov    0x14(%eax),%eax
c0105b8f:	83 ec 08             	sub    $0x8,%esp
c0105b92:	ff 75 0c             	pushl  0xc(%ebp)
c0105b95:	ff 75 08             	pushl  0x8(%ebp)
c0105b98:	ff d0                	call   *%eax
c0105b9a:	83 c4 10             	add    $0x10,%esp
}
c0105b9d:	c9                   	leave  
c0105b9e:	c3                   	ret    

c0105b9f <swap_out>:

volatile unsigned int swap_out_num=0;

int
swap_out(struct mm_struct *mm, int n, int in_tick)
{
c0105b9f:	55                   	push   %ebp
c0105ba0:	89 e5                	mov    %esp,%ebp
c0105ba2:	83 ec 28             	sub    $0x28,%esp
     int i;
     for (i = 0; i != n; ++ i)
c0105ba5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0105bac:	e9 2e 01 00 00       	jmp    c0105cdf <swap_out+0x140>
     {
          uintptr_t v;
          //struct Page **ptr_page=NULL;
          struct Page *page;
          // cprintf("i %d, SWAP: call swap_out_victim\n",i);
          int r = sm->swap_out_victim(mm, &page, in_tick);
c0105bb1:	a1 74 ff 19 c0       	mov    0xc019ff74,%eax
c0105bb6:	8b 40 18             	mov    0x18(%eax),%eax
c0105bb9:	83 ec 04             	sub    $0x4,%esp
c0105bbc:	ff 75 10             	pushl  0x10(%ebp)
c0105bbf:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c0105bc2:	52                   	push   %edx
c0105bc3:	ff 75 08             	pushl  0x8(%ebp)
c0105bc6:	ff d0                	call   *%eax
c0105bc8:	83 c4 10             	add    $0x10,%esp
c0105bcb:	89 45 f0             	mov    %eax,-0x10(%ebp)
          if (r != 0) {
c0105bce:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0105bd2:	74 18                	je     c0105bec <swap_out+0x4d>
                    cprintf("i %d, swap_out: call swap_out_victim failed\n",i);
c0105bd4:	83 ec 08             	sub    $0x8,%esp
c0105bd7:	ff 75 f4             	pushl  -0xc(%ebp)
c0105bda:	68 f0 cf 10 c0       	push   $0xc010cff0
c0105bdf:	e8 ae a6 ff ff       	call   c0100292 <cprintf>
c0105be4:	83 c4 10             	add    $0x10,%esp
c0105be7:	e9 ff 00 00 00       	jmp    c0105ceb <swap_out+0x14c>
          }          
          //assert(!PageReserved(page));

          //cprintf("SWAP: choose victim page 0x%08x\n", page);
          
          v=page->pra_vaddr; 
c0105bec:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105bef:	8b 40 1c             	mov    0x1c(%eax),%eax
c0105bf2:	89 45 ec             	mov    %eax,-0x14(%ebp)
          pte_t *ptep = get_pte(mm->pgdir, v, 0);
c0105bf5:	8b 45 08             	mov    0x8(%ebp),%eax
c0105bf8:	8b 40 0c             	mov    0xc(%eax),%eax
c0105bfb:	83 ec 04             	sub    $0x4,%esp
c0105bfe:	6a 00                	push   $0x0
c0105c00:	ff 75 ec             	pushl  -0x14(%ebp)
c0105c03:	50                   	push   %eax
c0105c04:	e8 3e 22 00 00       	call   c0107e47 <get_pte>
c0105c09:	83 c4 10             	add    $0x10,%esp
c0105c0c:	89 45 e8             	mov    %eax,-0x18(%ebp)
          assert((*ptep & PTE_P) != 0);
c0105c0f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105c12:	8b 00                	mov    (%eax),%eax
c0105c14:	83 e0 01             	and    $0x1,%eax
c0105c17:	85 c0                	test   %eax,%eax
c0105c19:	75 16                	jne    c0105c31 <swap_out+0x92>
c0105c1b:	68 1d d0 10 c0       	push   $0xc010d01d
c0105c20:	68 32 d0 10 c0       	push   $0xc010d032
c0105c25:	6a 6b                	push   $0x6b
c0105c27:	68 cc cf 10 c0       	push   $0xc010cfcc
c0105c2c:	e8 c7 a7 ff ff       	call   c01003f8 <__panic>

          if (swapfs_write( (page->pra_vaddr/PGSIZE+1)<<8, page) != 0) {
c0105c31:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105c34:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0105c37:	8b 52 1c             	mov    0x1c(%edx),%edx
c0105c3a:	c1 ea 0c             	shr    $0xc,%edx
c0105c3d:	83 c2 01             	add    $0x1,%edx
c0105c40:	c1 e2 08             	shl    $0x8,%edx
c0105c43:	83 ec 08             	sub    $0x8,%esp
c0105c46:	50                   	push   %eax
c0105c47:	52                   	push   %edx
c0105c48:	e8 74 35 00 00       	call   c01091c1 <swapfs_write>
c0105c4d:	83 c4 10             	add    $0x10,%esp
c0105c50:	85 c0                	test   %eax,%eax
c0105c52:	74 2b                	je     c0105c7f <swap_out+0xe0>
                    cprintf("SWAP: failed to save\n");
c0105c54:	83 ec 0c             	sub    $0xc,%esp
c0105c57:	68 47 d0 10 c0       	push   $0xc010d047
c0105c5c:	e8 31 a6 ff ff       	call   c0100292 <cprintf>
c0105c61:	83 c4 10             	add    $0x10,%esp
                    sm->map_swappable(mm, v, page, 0);
c0105c64:	a1 74 ff 19 c0       	mov    0xc019ff74,%eax
c0105c69:	8b 40 10             	mov    0x10(%eax),%eax
c0105c6c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0105c6f:	6a 00                	push   $0x0
c0105c71:	52                   	push   %edx
c0105c72:	ff 75 ec             	pushl  -0x14(%ebp)
c0105c75:	ff 75 08             	pushl  0x8(%ebp)
c0105c78:	ff d0                	call   *%eax
c0105c7a:	83 c4 10             	add    $0x10,%esp
c0105c7d:	eb 5c                	jmp    c0105cdb <swap_out+0x13c>
                    continue;
          }
          else {
                    cprintf("swap_out: i %d, store page in vaddr 0x%x to disk swap entry %d\n", i, v, page->pra_vaddr/PGSIZE+1);
c0105c7f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105c82:	8b 40 1c             	mov    0x1c(%eax),%eax
c0105c85:	c1 e8 0c             	shr    $0xc,%eax
c0105c88:	83 c0 01             	add    $0x1,%eax
c0105c8b:	50                   	push   %eax
c0105c8c:	ff 75 ec             	pushl  -0x14(%ebp)
c0105c8f:	ff 75 f4             	pushl  -0xc(%ebp)
c0105c92:	68 60 d0 10 c0       	push   $0xc010d060
c0105c97:	e8 f6 a5 ff ff       	call   c0100292 <cprintf>
c0105c9c:	83 c4 10             	add    $0x10,%esp
                    *ptep = (page->pra_vaddr/PGSIZE+1)<<8;
c0105c9f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105ca2:	8b 40 1c             	mov    0x1c(%eax),%eax
c0105ca5:	c1 e8 0c             	shr    $0xc,%eax
c0105ca8:	83 c0 01             	add    $0x1,%eax
c0105cab:	c1 e0 08             	shl    $0x8,%eax
c0105cae:	89 c2                	mov    %eax,%edx
c0105cb0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105cb3:	89 10                	mov    %edx,(%eax)
                    free_page(page);
c0105cb5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105cb8:	83 ec 08             	sub    $0x8,%esp
c0105cbb:	6a 01                	push   $0x1
c0105cbd:	50                   	push   %eax
c0105cbe:	e8 84 1b 00 00       	call   c0107847 <free_pages>
c0105cc3:	83 c4 10             	add    $0x10,%esp
          }
          
          tlb_invalidate(mm->pgdir, v);
c0105cc6:	8b 45 08             	mov    0x8(%ebp),%eax
c0105cc9:	8b 40 0c             	mov    0xc(%eax),%eax
c0105ccc:	83 ec 08             	sub    $0x8,%esp
c0105ccf:	ff 75 ec             	pushl  -0x14(%ebp)
c0105cd2:	50                   	push   %eax
c0105cd3:	e8 09 28 00 00       	call   c01084e1 <tlb_invalidate>
c0105cd8:	83 c4 10             	add    $0x10,%esp

int
swap_out(struct mm_struct *mm, int n, int in_tick)
{
     int i;
     for (i = 0; i != n; ++ i)
c0105cdb:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0105cdf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105ce2:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0105ce5:	0f 85 c6 fe ff ff    	jne    c0105bb1 <swap_out+0x12>
                    free_page(page);
          }
          
          tlb_invalidate(mm->pgdir, v);
     }
     return i;
c0105ceb:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0105cee:	c9                   	leave  
c0105cef:	c3                   	ret    

c0105cf0 <swap_in>:

int
swap_in(struct mm_struct *mm, uintptr_t addr, struct Page **ptr_result)
{
c0105cf0:	55                   	push   %ebp
c0105cf1:	89 e5                	mov    %esp,%ebp
c0105cf3:	83 ec 18             	sub    $0x18,%esp
     struct Page *result = alloc_page();
c0105cf6:	83 ec 0c             	sub    $0xc,%esp
c0105cf9:	6a 01                	push   $0x1
c0105cfb:	e8 db 1a 00 00       	call   c01077db <alloc_pages>
c0105d00:	83 c4 10             	add    $0x10,%esp
c0105d03:	89 45 f4             	mov    %eax,-0xc(%ebp)
     assert(result!=NULL);
c0105d06:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105d0a:	75 19                	jne    c0105d25 <swap_in+0x35>
c0105d0c:	68 a0 d0 10 c0       	push   $0xc010d0a0
c0105d11:	68 32 d0 10 c0       	push   $0xc010d032
c0105d16:	68 81 00 00 00       	push   $0x81
c0105d1b:	68 cc cf 10 c0       	push   $0xc010cfcc
c0105d20:	e8 d3 a6 ff ff       	call   c01003f8 <__panic>

     pte_t *ptep = get_pte(mm->pgdir, addr, 0);
c0105d25:	8b 45 08             	mov    0x8(%ebp),%eax
c0105d28:	8b 40 0c             	mov    0xc(%eax),%eax
c0105d2b:	83 ec 04             	sub    $0x4,%esp
c0105d2e:	6a 00                	push   $0x0
c0105d30:	ff 75 0c             	pushl  0xc(%ebp)
c0105d33:	50                   	push   %eax
c0105d34:	e8 0e 21 00 00       	call   c0107e47 <get_pte>
c0105d39:	83 c4 10             	add    $0x10,%esp
c0105d3c:	89 45 f0             	mov    %eax,-0x10(%ebp)
     // cprintf("SWAP: load ptep %x swap entry %d to vaddr 0x%08x, page %x, No %d\n", ptep, (*ptep)>>8, addr, result, (result-pages));
    
     int r;
     if ((r = swapfs_read((*ptep), result)) != 0)
c0105d3f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105d42:	8b 00                	mov    (%eax),%eax
c0105d44:	83 ec 08             	sub    $0x8,%esp
c0105d47:	ff 75 f4             	pushl  -0xc(%ebp)
c0105d4a:	50                   	push   %eax
c0105d4b:	e8 18 34 00 00       	call   c0109168 <swapfs_read>
c0105d50:	83 c4 10             	add    $0x10,%esp
c0105d53:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0105d56:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0105d5a:	74 1f                	je     c0105d7b <swap_in+0x8b>
     {
        assert(r!=0);
c0105d5c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0105d60:	75 19                	jne    c0105d7b <swap_in+0x8b>
c0105d62:	68 ad d0 10 c0       	push   $0xc010d0ad
c0105d67:	68 32 d0 10 c0       	push   $0xc010d032
c0105d6c:	68 89 00 00 00       	push   $0x89
c0105d71:	68 cc cf 10 c0       	push   $0xc010cfcc
c0105d76:	e8 7d a6 ff ff       	call   c01003f8 <__panic>
     }
     cprintf("swap_in: load disk swap entry %d with swap_page in vadr 0x%x\n", (*ptep)>>8, addr);
c0105d7b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105d7e:	8b 00                	mov    (%eax),%eax
c0105d80:	c1 e8 08             	shr    $0x8,%eax
c0105d83:	83 ec 04             	sub    $0x4,%esp
c0105d86:	ff 75 0c             	pushl  0xc(%ebp)
c0105d89:	50                   	push   %eax
c0105d8a:	68 b4 d0 10 c0       	push   $0xc010d0b4
c0105d8f:	e8 fe a4 ff ff       	call   c0100292 <cprintf>
c0105d94:	83 c4 10             	add    $0x10,%esp
     *ptr_result=result;
c0105d97:	8b 45 10             	mov    0x10(%ebp),%eax
c0105d9a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0105d9d:	89 10                	mov    %edx,(%eax)
     return 0;
c0105d9f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105da4:	c9                   	leave  
c0105da5:	c3                   	ret    

c0105da6 <check_content_set>:



static inline void
check_content_set(void)
{
c0105da6:	55                   	push   %ebp
c0105da7:	89 e5                	mov    %esp,%ebp
c0105da9:	83 ec 08             	sub    $0x8,%esp
     *(unsigned char *)0x1000 = 0x0a;
c0105dac:	b8 00 10 00 00       	mov    $0x1000,%eax
c0105db1:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c0105db4:	a1 64 ff 19 c0       	mov    0xc019ff64,%eax
c0105db9:	83 f8 01             	cmp    $0x1,%eax
c0105dbc:	74 19                	je     c0105dd7 <check_content_set+0x31>
c0105dbe:	68 f2 d0 10 c0       	push   $0xc010d0f2
c0105dc3:	68 32 d0 10 c0       	push   $0xc010d032
c0105dc8:	68 96 00 00 00       	push   $0x96
c0105dcd:	68 cc cf 10 c0       	push   $0xc010cfcc
c0105dd2:	e8 21 a6 ff ff       	call   c01003f8 <__panic>
     *(unsigned char *)0x1010 = 0x0a;
c0105dd7:	b8 10 10 00 00       	mov    $0x1010,%eax
c0105ddc:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c0105ddf:	a1 64 ff 19 c0       	mov    0xc019ff64,%eax
c0105de4:	83 f8 01             	cmp    $0x1,%eax
c0105de7:	74 19                	je     c0105e02 <check_content_set+0x5c>
c0105de9:	68 f2 d0 10 c0       	push   $0xc010d0f2
c0105dee:	68 32 d0 10 c0       	push   $0xc010d032
c0105df3:	68 98 00 00 00       	push   $0x98
c0105df8:	68 cc cf 10 c0       	push   $0xc010cfcc
c0105dfd:	e8 f6 a5 ff ff       	call   c01003f8 <__panic>
     *(unsigned char *)0x2000 = 0x0b;
c0105e02:	b8 00 20 00 00       	mov    $0x2000,%eax
c0105e07:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c0105e0a:	a1 64 ff 19 c0       	mov    0xc019ff64,%eax
c0105e0f:	83 f8 02             	cmp    $0x2,%eax
c0105e12:	74 19                	je     c0105e2d <check_content_set+0x87>
c0105e14:	68 01 d1 10 c0       	push   $0xc010d101
c0105e19:	68 32 d0 10 c0       	push   $0xc010d032
c0105e1e:	68 9a 00 00 00       	push   $0x9a
c0105e23:	68 cc cf 10 c0       	push   $0xc010cfcc
c0105e28:	e8 cb a5 ff ff       	call   c01003f8 <__panic>
     *(unsigned char *)0x2010 = 0x0b;
c0105e2d:	b8 10 20 00 00       	mov    $0x2010,%eax
c0105e32:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c0105e35:	a1 64 ff 19 c0       	mov    0xc019ff64,%eax
c0105e3a:	83 f8 02             	cmp    $0x2,%eax
c0105e3d:	74 19                	je     c0105e58 <check_content_set+0xb2>
c0105e3f:	68 01 d1 10 c0       	push   $0xc010d101
c0105e44:	68 32 d0 10 c0       	push   $0xc010d032
c0105e49:	68 9c 00 00 00       	push   $0x9c
c0105e4e:	68 cc cf 10 c0       	push   $0xc010cfcc
c0105e53:	e8 a0 a5 ff ff       	call   c01003f8 <__panic>
     *(unsigned char *)0x3000 = 0x0c;
c0105e58:	b8 00 30 00 00       	mov    $0x3000,%eax
c0105e5d:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c0105e60:	a1 64 ff 19 c0       	mov    0xc019ff64,%eax
c0105e65:	83 f8 03             	cmp    $0x3,%eax
c0105e68:	74 19                	je     c0105e83 <check_content_set+0xdd>
c0105e6a:	68 10 d1 10 c0       	push   $0xc010d110
c0105e6f:	68 32 d0 10 c0       	push   $0xc010d032
c0105e74:	68 9e 00 00 00       	push   $0x9e
c0105e79:	68 cc cf 10 c0       	push   $0xc010cfcc
c0105e7e:	e8 75 a5 ff ff       	call   c01003f8 <__panic>
     *(unsigned char *)0x3010 = 0x0c;
c0105e83:	b8 10 30 00 00       	mov    $0x3010,%eax
c0105e88:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c0105e8b:	a1 64 ff 19 c0       	mov    0xc019ff64,%eax
c0105e90:	83 f8 03             	cmp    $0x3,%eax
c0105e93:	74 19                	je     c0105eae <check_content_set+0x108>
c0105e95:	68 10 d1 10 c0       	push   $0xc010d110
c0105e9a:	68 32 d0 10 c0       	push   $0xc010d032
c0105e9f:	68 a0 00 00 00       	push   $0xa0
c0105ea4:	68 cc cf 10 c0       	push   $0xc010cfcc
c0105ea9:	e8 4a a5 ff ff       	call   c01003f8 <__panic>
     *(unsigned char *)0x4000 = 0x0d;
c0105eae:	b8 00 40 00 00       	mov    $0x4000,%eax
c0105eb3:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c0105eb6:	a1 64 ff 19 c0       	mov    0xc019ff64,%eax
c0105ebb:	83 f8 04             	cmp    $0x4,%eax
c0105ebe:	74 19                	je     c0105ed9 <check_content_set+0x133>
c0105ec0:	68 1f d1 10 c0       	push   $0xc010d11f
c0105ec5:	68 32 d0 10 c0       	push   $0xc010d032
c0105eca:	68 a2 00 00 00       	push   $0xa2
c0105ecf:	68 cc cf 10 c0       	push   $0xc010cfcc
c0105ed4:	e8 1f a5 ff ff       	call   c01003f8 <__panic>
     *(unsigned char *)0x4010 = 0x0d;
c0105ed9:	b8 10 40 00 00       	mov    $0x4010,%eax
c0105ede:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c0105ee1:	a1 64 ff 19 c0       	mov    0xc019ff64,%eax
c0105ee6:	83 f8 04             	cmp    $0x4,%eax
c0105ee9:	74 19                	je     c0105f04 <check_content_set+0x15e>
c0105eeb:	68 1f d1 10 c0       	push   $0xc010d11f
c0105ef0:	68 32 d0 10 c0       	push   $0xc010d032
c0105ef5:	68 a4 00 00 00       	push   $0xa4
c0105efa:	68 cc cf 10 c0       	push   $0xc010cfcc
c0105eff:	e8 f4 a4 ff ff       	call   c01003f8 <__panic>
}
c0105f04:	90                   	nop
c0105f05:	c9                   	leave  
c0105f06:	c3                   	ret    

c0105f07 <check_content_access>:

static inline int
check_content_access(void)
{
c0105f07:	55                   	push   %ebp
c0105f08:	89 e5                	mov    %esp,%ebp
c0105f0a:	83 ec 18             	sub    $0x18,%esp
    int ret = sm->check_swap();
c0105f0d:	a1 74 ff 19 c0       	mov    0xc019ff74,%eax
c0105f12:	8b 40 1c             	mov    0x1c(%eax),%eax
c0105f15:	ff d0                	call   *%eax
c0105f17:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return ret;
c0105f1a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0105f1d:	c9                   	leave  
c0105f1e:	c3                   	ret    

c0105f1f <check_swap>:
#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
check_swap(void)
{
c0105f1f:	55                   	push   %ebp
c0105f20:	89 e5                	mov    %esp,%ebp
c0105f22:	83 ec 68             	sub    $0x68,%esp
    //backup mem env
     int ret, count = 0, total = 0, i;
c0105f25:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0105f2c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
     list_entry_t *le = &free_list;
c0105f33:	c7 45 e8 84 21 1a c0 	movl   $0xc01a2184,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c0105f3a:	eb 60                	jmp    c0105f9c <check_swap+0x7d>
        struct Page *p = le2page(le, page_link);
c0105f3c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105f3f:	83 e8 0c             	sub    $0xc,%eax
c0105f42:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(PageProperty(p));
c0105f45:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105f48:	83 c0 04             	add    $0x4,%eax
c0105f4b:	c7 45 b0 01 00 00 00 	movl   $0x1,-0x50(%ebp)
c0105f52:	89 45 ac             	mov    %eax,-0x54(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0105f55:	8b 45 ac             	mov    -0x54(%ebp),%eax
c0105f58:	8b 55 b0             	mov    -0x50(%ebp),%edx
c0105f5b:	0f a3 10             	bt     %edx,(%eax)
c0105f5e:	19 c0                	sbb    %eax,%eax
c0105f60:	89 45 a8             	mov    %eax,-0x58(%ebp)
    return oldbit != 0;
c0105f63:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
c0105f67:	0f 95 c0             	setne  %al
c0105f6a:	0f b6 c0             	movzbl %al,%eax
c0105f6d:	85 c0                	test   %eax,%eax
c0105f6f:	75 19                	jne    c0105f8a <check_swap+0x6b>
c0105f71:	68 2e d1 10 c0       	push   $0xc010d12e
c0105f76:	68 32 d0 10 c0       	push   $0xc010d032
c0105f7b:	68 bf 00 00 00       	push   $0xbf
c0105f80:	68 cc cf 10 c0       	push   $0xc010cfcc
c0105f85:	e8 6e a4 ff ff       	call   c01003f8 <__panic>
        count ++, total += p->property;
c0105f8a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0105f8e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105f91:	8b 50 08             	mov    0x8(%eax),%edx
c0105f94:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105f97:	01 d0                	add    %edx,%eax
c0105f99:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105f9c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105f9f:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0105fa2:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0105fa5:	8b 40 04             	mov    0x4(%eax),%eax
check_swap(void)
{
    //backup mem env
     int ret, count = 0, total = 0, i;
     list_entry_t *le = &free_list;
     while ((le = list_next(le)) != &free_list) {
c0105fa8:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0105fab:	81 7d e8 84 21 1a c0 	cmpl   $0xc01a2184,-0x18(%ebp)
c0105fb2:	75 88                	jne    c0105f3c <check_swap+0x1d>
        struct Page *p = le2page(le, page_link);
        assert(PageProperty(p));
        count ++, total += p->property;
     }
     assert(total == nr_free_pages());
c0105fb4:	e8 c3 18 00 00       	call   c010787c <nr_free_pages>
c0105fb9:	89 c2                	mov    %eax,%edx
c0105fbb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105fbe:	39 c2                	cmp    %eax,%edx
c0105fc0:	74 19                	je     c0105fdb <check_swap+0xbc>
c0105fc2:	68 3e d1 10 c0       	push   $0xc010d13e
c0105fc7:	68 32 d0 10 c0       	push   $0xc010d032
c0105fcc:	68 c2 00 00 00       	push   $0xc2
c0105fd1:	68 cc cf 10 c0       	push   $0xc010cfcc
c0105fd6:	e8 1d a4 ff ff       	call   c01003f8 <__panic>
     cprintf("BEGIN check_swap: count %d, total %d\n",count,total);
c0105fdb:	83 ec 04             	sub    $0x4,%esp
c0105fde:	ff 75 f0             	pushl  -0x10(%ebp)
c0105fe1:	ff 75 f4             	pushl  -0xc(%ebp)
c0105fe4:	68 58 d1 10 c0       	push   $0xc010d158
c0105fe9:	e8 a4 a2 ff ff       	call   c0100292 <cprintf>
c0105fee:	83 c4 10             	add    $0x10,%esp
     
     //now we set the phy pages env     
     struct mm_struct *mm = mm_create();
c0105ff1:	e8 92 dd ff ff       	call   c0103d88 <mm_create>
c0105ff6:	89 45 d8             	mov    %eax,-0x28(%ebp)
     assert(mm != NULL);
c0105ff9:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c0105ffd:	75 19                	jne    c0106018 <check_swap+0xf9>
c0105fff:	68 7e d1 10 c0       	push   $0xc010d17e
c0106004:	68 32 d0 10 c0       	push   $0xc010d032
c0106009:	68 c7 00 00 00       	push   $0xc7
c010600e:	68 cc cf 10 c0       	push   $0xc010cfcc
c0106013:	e8 e0 a3 ff ff       	call   c01003f8 <__panic>

     extern struct mm_struct *check_mm_struct;
     assert(check_mm_struct == NULL);
c0106018:	a1 bc 20 1a c0       	mov    0xc01a20bc,%eax
c010601d:	85 c0                	test   %eax,%eax
c010601f:	74 19                	je     c010603a <check_swap+0x11b>
c0106021:	68 89 d1 10 c0       	push   $0xc010d189
c0106026:	68 32 d0 10 c0       	push   $0xc010d032
c010602b:	68 ca 00 00 00       	push   $0xca
c0106030:	68 cc cf 10 c0       	push   $0xc010cfcc
c0106035:	e8 be a3 ff ff       	call   c01003f8 <__panic>

     check_mm_struct = mm;
c010603a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010603d:	a3 bc 20 1a c0       	mov    %eax,0xc01a20bc

     pde_t *pgdir = mm->pgdir = boot_pgdir;
c0106042:	8b 15 60 ba 12 c0    	mov    0xc012ba60,%edx
c0106048:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010604b:	89 50 0c             	mov    %edx,0xc(%eax)
c010604e:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0106051:	8b 40 0c             	mov    0xc(%eax),%eax
c0106054:	89 45 d4             	mov    %eax,-0x2c(%ebp)
     assert(pgdir[0] == 0);
c0106057:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010605a:	8b 00                	mov    (%eax),%eax
c010605c:	85 c0                	test   %eax,%eax
c010605e:	74 19                	je     c0106079 <check_swap+0x15a>
c0106060:	68 a1 d1 10 c0       	push   $0xc010d1a1
c0106065:	68 32 d0 10 c0       	push   $0xc010d032
c010606a:	68 cf 00 00 00       	push   $0xcf
c010606f:	68 cc cf 10 c0       	push   $0xc010cfcc
c0106074:	e8 7f a3 ff ff       	call   c01003f8 <__panic>

     struct vma_struct *vma = vma_create(BEING_CHECK_VALID_VADDR, CHECK_VALID_VADDR, VM_WRITE | VM_READ);
c0106079:	83 ec 04             	sub    $0x4,%esp
c010607c:	6a 03                	push   $0x3
c010607e:	68 00 60 00 00       	push   $0x6000
c0106083:	68 00 10 00 00       	push   $0x1000
c0106088:	e8 99 dd ff ff       	call   c0103e26 <vma_create>
c010608d:	83 c4 10             	add    $0x10,%esp
c0106090:	89 45 d0             	mov    %eax,-0x30(%ebp)
     assert(vma != NULL);
c0106093:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c0106097:	75 19                	jne    c01060b2 <check_swap+0x193>
c0106099:	68 af d1 10 c0       	push   $0xc010d1af
c010609e:	68 32 d0 10 c0       	push   $0xc010d032
c01060a3:	68 d2 00 00 00       	push   $0xd2
c01060a8:	68 cc cf 10 c0       	push   $0xc010cfcc
c01060ad:	e8 46 a3 ff ff       	call   c01003f8 <__panic>

     insert_vma_struct(mm, vma);
c01060b2:	83 ec 08             	sub    $0x8,%esp
c01060b5:	ff 75 d0             	pushl  -0x30(%ebp)
c01060b8:	ff 75 d8             	pushl  -0x28(%ebp)
c01060bb:	e8 ce de ff ff       	call   c0103f8e <insert_vma_struct>
c01060c0:	83 c4 10             	add    $0x10,%esp

     //setup the temp Page Table vaddr 0~4MB
     cprintf("setup Page Table for vaddr 0X1000, so alloc a page\n");
c01060c3:	83 ec 0c             	sub    $0xc,%esp
c01060c6:	68 bc d1 10 c0       	push   $0xc010d1bc
c01060cb:	e8 c2 a1 ff ff       	call   c0100292 <cprintf>
c01060d0:	83 c4 10             	add    $0x10,%esp
     pte_t *temp_ptep=NULL;
c01060d3:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
c01060da:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01060dd:	8b 40 0c             	mov    0xc(%eax),%eax
c01060e0:	83 ec 04             	sub    $0x4,%esp
c01060e3:	6a 01                	push   $0x1
c01060e5:	68 00 10 00 00       	push   $0x1000
c01060ea:	50                   	push   %eax
c01060eb:	e8 57 1d 00 00       	call   c0107e47 <get_pte>
c01060f0:	83 c4 10             	add    $0x10,%esp
c01060f3:	89 45 cc             	mov    %eax,-0x34(%ebp)
     assert(temp_ptep!= NULL);
c01060f6:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c01060fa:	75 19                	jne    c0106115 <check_swap+0x1f6>
c01060fc:	68 f0 d1 10 c0       	push   $0xc010d1f0
c0106101:	68 32 d0 10 c0       	push   $0xc010d032
c0106106:	68 da 00 00 00       	push   $0xda
c010610b:	68 cc cf 10 c0       	push   $0xc010cfcc
c0106110:	e8 e3 a2 ff ff       	call   c01003f8 <__panic>
     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
c0106115:	83 ec 0c             	sub    $0xc,%esp
c0106118:	68 04 d2 10 c0       	push   $0xc010d204
c010611d:	e8 70 a1 ff ff       	call   c0100292 <cprintf>
c0106122:	83 c4 10             	add    $0x10,%esp
     
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0106125:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c010612c:	e9 90 00 00 00       	jmp    c01061c1 <check_swap+0x2a2>
          check_rp[i] = alloc_page();
c0106131:	83 ec 0c             	sub    $0xc,%esp
c0106134:	6a 01                	push   $0x1
c0106136:	e8 a0 16 00 00       	call   c01077db <alloc_pages>
c010613b:	83 c4 10             	add    $0x10,%esp
c010613e:	89 c2                	mov    %eax,%edx
c0106140:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106143:	89 14 85 c0 20 1a c0 	mov    %edx,-0x3fe5df40(,%eax,4)
          assert(check_rp[i] != NULL );
c010614a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010614d:	8b 04 85 c0 20 1a c0 	mov    -0x3fe5df40(,%eax,4),%eax
c0106154:	85 c0                	test   %eax,%eax
c0106156:	75 19                	jne    c0106171 <check_swap+0x252>
c0106158:	68 28 d2 10 c0       	push   $0xc010d228
c010615d:	68 32 d0 10 c0       	push   $0xc010d032
c0106162:	68 df 00 00 00       	push   $0xdf
c0106167:	68 cc cf 10 c0       	push   $0xc010cfcc
c010616c:	e8 87 a2 ff ff       	call   c01003f8 <__panic>
          assert(!PageProperty(check_rp[i]));
c0106171:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106174:	8b 04 85 c0 20 1a c0 	mov    -0x3fe5df40(,%eax,4),%eax
c010617b:	83 c0 04             	add    $0x4,%eax
c010617e:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
c0106185:	89 45 a4             	mov    %eax,-0x5c(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0106188:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c010618b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010618e:	0f a3 10             	bt     %edx,(%eax)
c0106191:	19 c0                	sbb    %eax,%eax
c0106193:	89 45 a0             	mov    %eax,-0x60(%ebp)
    return oldbit != 0;
c0106196:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
c010619a:	0f 95 c0             	setne  %al
c010619d:	0f b6 c0             	movzbl %al,%eax
c01061a0:	85 c0                	test   %eax,%eax
c01061a2:	74 19                	je     c01061bd <check_swap+0x29e>
c01061a4:	68 3c d2 10 c0       	push   $0xc010d23c
c01061a9:	68 32 d0 10 c0       	push   $0xc010d032
c01061ae:	68 e0 00 00 00       	push   $0xe0
c01061b3:	68 cc cf 10 c0       	push   $0xc010cfcc
c01061b8:	e8 3b a2 ff ff       	call   c01003f8 <__panic>
     pte_t *temp_ptep=NULL;
     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
     assert(temp_ptep!= NULL);
     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
     
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01061bd:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c01061c1:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c01061c5:	0f 8e 66 ff ff ff    	jle    c0106131 <check_swap+0x212>
          check_rp[i] = alloc_page();
          assert(check_rp[i] != NULL );
          assert(!PageProperty(check_rp[i]));
     }
     list_entry_t free_list_store = free_list;
c01061cb:	a1 84 21 1a c0       	mov    0xc01a2184,%eax
c01061d0:	8b 15 88 21 1a c0    	mov    0xc01a2188,%edx
c01061d6:	89 45 98             	mov    %eax,-0x68(%ebp)
c01061d9:	89 55 9c             	mov    %edx,-0x64(%ebp)
c01061dc:	c7 45 c0 84 21 1a c0 	movl   $0xc01a2184,-0x40(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c01061e3:	8b 45 c0             	mov    -0x40(%ebp),%eax
c01061e6:	8b 55 c0             	mov    -0x40(%ebp),%edx
c01061e9:	89 50 04             	mov    %edx,0x4(%eax)
c01061ec:	8b 45 c0             	mov    -0x40(%ebp),%eax
c01061ef:	8b 50 04             	mov    0x4(%eax),%edx
c01061f2:	8b 45 c0             	mov    -0x40(%ebp),%eax
c01061f5:	89 10                	mov    %edx,(%eax)
c01061f7:	c7 45 c8 84 21 1a c0 	movl   $0xc01a2184,-0x38(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c01061fe:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0106201:	8b 40 04             	mov    0x4(%eax),%eax
c0106204:	39 45 c8             	cmp    %eax,-0x38(%ebp)
c0106207:	0f 94 c0             	sete   %al
c010620a:	0f b6 c0             	movzbl %al,%eax
     list_init(&free_list);
     assert(list_empty(&free_list));
c010620d:	85 c0                	test   %eax,%eax
c010620f:	75 19                	jne    c010622a <check_swap+0x30b>
c0106211:	68 57 d2 10 c0       	push   $0xc010d257
c0106216:	68 32 d0 10 c0       	push   $0xc010d032
c010621b:	68 e4 00 00 00       	push   $0xe4
c0106220:	68 cc cf 10 c0       	push   $0xc010cfcc
c0106225:	e8 ce a1 ff ff       	call   c01003f8 <__panic>
     
     //assert(alloc_page() == NULL);
     
     unsigned int nr_free_store = nr_free;
c010622a:	a1 8c 21 1a c0       	mov    0xc01a218c,%eax
c010622f:	89 45 bc             	mov    %eax,-0x44(%ebp)
     nr_free = 0;
c0106232:	c7 05 8c 21 1a c0 00 	movl   $0x0,0xc01a218c
c0106239:	00 00 00 
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c010623c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0106243:	eb 1c                	jmp    c0106261 <check_swap+0x342>
        free_pages(check_rp[i],1);
c0106245:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106248:	8b 04 85 c0 20 1a c0 	mov    -0x3fe5df40(,%eax,4),%eax
c010624f:	83 ec 08             	sub    $0x8,%esp
c0106252:	6a 01                	push   $0x1
c0106254:	50                   	push   %eax
c0106255:	e8 ed 15 00 00       	call   c0107847 <free_pages>
c010625a:	83 c4 10             	add    $0x10,%esp
     
     //assert(alloc_page() == NULL);
     
     unsigned int nr_free_store = nr_free;
     nr_free = 0;
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c010625d:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0106261:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0106265:	7e de                	jle    c0106245 <check_swap+0x326>
        free_pages(check_rp[i],1);
     }
     assert(nr_free==CHECK_VALID_PHY_PAGE_NUM);
c0106267:	a1 8c 21 1a c0       	mov    0xc01a218c,%eax
c010626c:	83 f8 04             	cmp    $0x4,%eax
c010626f:	74 19                	je     c010628a <check_swap+0x36b>
c0106271:	68 70 d2 10 c0       	push   $0xc010d270
c0106276:	68 32 d0 10 c0       	push   $0xc010d032
c010627b:	68 ed 00 00 00       	push   $0xed
c0106280:	68 cc cf 10 c0       	push   $0xc010cfcc
c0106285:	e8 6e a1 ff ff       	call   c01003f8 <__panic>
     
     cprintf("set up init env for check_swap begin!\n");
c010628a:	83 ec 0c             	sub    $0xc,%esp
c010628d:	68 94 d2 10 c0       	push   $0xc010d294
c0106292:	e8 fb 9f ff ff       	call   c0100292 <cprintf>
c0106297:	83 c4 10             	add    $0x10,%esp
     //setup initial vir_page<->phy_page environment for page relpacement algorithm 

     
     pgfault_num=0;
c010629a:	c7 05 64 ff 19 c0 00 	movl   $0x0,0xc019ff64
c01062a1:	00 00 00 
     
     check_content_set();
c01062a4:	e8 fd fa ff ff       	call   c0105da6 <check_content_set>
     assert( nr_free == 0);         
c01062a9:	a1 8c 21 1a c0       	mov    0xc01a218c,%eax
c01062ae:	85 c0                	test   %eax,%eax
c01062b0:	74 19                	je     c01062cb <check_swap+0x3ac>
c01062b2:	68 bb d2 10 c0       	push   $0xc010d2bb
c01062b7:	68 32 d0 10 c0       	push   $0xc010d032
c01062bc:	68 f6 00 00 00       	push   $0xf6
c01062c1:	68 cc cf 10 c0       	push   $0xc010cfcc
c01062c6:	e8 2d a1 ff ff       	call   c01003f8 <__panic>
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c01062cb:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01062d2:	eb 26                	jmp    c01062fa <check_swap+0x3db>
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
c01062d4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01062d7:	c7 04 85 e0 20 1a c0 	movl   $0xffffffff,-0x3fe5df20(,%eax,4)
c01062de:	ff ff ff ff 
c01062e2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01062e5:	8b 14 85 e0 20 1a c0 	mov    -0x3fe5df20(,%eax,4),%edx
c01062ec:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01062ef:	89 14 85 20 21 1a c0 	mov    %edx,-0x3fe5dee0(,%eax,4)
     
     pgfault_num=0;
     
     check_content_set();
     assert( nr_free == 0);         
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c01062f6:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c01062fa:	83 7d ec 09          	cmpl   $0x9,-0x14(%ebp)
c01062fe:	7e d4                	jle    c01062d4 <check_swap+0x3b5>
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
     
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0106300:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0106307:	e9 cc 00 00 00       	jmp    c01063d8 <check_swap+0x4b9>
         check_ptep[i]=0;
c010630c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010630f:	c7 04 85 74 21 1a c0 	movl   $0x0,-0x3fe5de8c(,%eax,4)
c0106316:	00 00 00 00 
         check_ptep[i] = get_pte(pgdir, (i+1)*0x1000, 0);
c010631a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010631d:	83 c0 01             	add    $0x1,%eax
c0106320:	c1 e0 0c             	shl    $0xc,%eax
c0106323:	83 ec 04             	sub    $0x4,%esp
c0106326:	6a 00                	push   $0x0
c0106328:	50                   	push   %eax
c0106329:	ff 75 d4             	pushl  -0x2c(%ebp)
c010632c:	e8 16 1b 00 00       	call   c0107e47 <get_pte>
c0106331:	83 c4 10             	add    $0x10,%esp
c0106334:	89 c2                	mov    %eax,%edx
c0106336:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106339:	89 14 85 74 21 1a c0 	mov    %edx,-0x3fe5de8c(,%eax,4)
         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
         assert(check_ptep[i] != NULL);
c0106340:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106343:	8b 04 85 74 21 1a c0 	mov    -0x3fe5de8c(,%eax,4),%eax
c010634a:	85 c0                	test   %eax,%eax
c010634c:	75 19                	jne    c0106367 <check_swap+0x448>
c010634e:	68 c8 d2 10 c0       	push   $0xc010d2c8
c0106353:	68 32 d0 10 c0       	push   $0xc010d032
c0106358:	68 fe 00 00 00       	push   $0xfe
c010635d:	68 cc cf 10 c0       	push   $0xc010cfcc
c0106362:	e8 91 a0 ff ff       	call   c01003f8 <__panic>
         assert(pte2page(*check_ptep[i]) == check_rp[i]);
c0106367:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010636a:	8b 04 85 74 21 1a c0 	mov    -0x3fe5de8c(,%eax,4),%eax
c0106371:	8b 00                	mov    (%eax),%eax
c0106373:	83 ec 0c             	sub    $0xc,%esp
c0106376:	50                   	push   %eax
c0106377:	e8 d5 f6 ff ff       	call   c0105a51 <pte2page>
c010637c:	83 c4 10             	add    $0x10,%esp
c010637f:	89 c2                	mov    %eax,%edx
c0106381:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106384:	8b 04 85 c0 20 1a c0 	mov    -0x3fe5df40(,%eax,4),%eax
c010638b:	39 c2                	cmp    %eax,%edx
c010638d:	74 19                	je     c01063a8 <check_swap+0x489>
c010638f:	68 e0 d2 10 c0       	push   $0xc010d2e0
c0106394:	68 32 d0 10 c0       	push   $0xc010d032
c0106399:	68 ff 00 00 00       	push   $0xff
c010639e:	68 cc cf 10 c0       	push   $0xc010cfcc
c01063a3:	e8 50 a0 ff ff       	call   c01003f8 <__panic>
         assert((*check_ptep[i] & PTE_P));          
c01063a8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01063ab:	8b 04 85 74 21 1a c0 	mov    -0x3fe5de8c(,%eax,4),%eax
c01063b2:	8b 00                	mov    (%eax),%eax
c01063b4:	83 e0 01             	and    $0x1,%eax
c01063b7:	85 c0                	test   %eax,%eax
c01063b9:	75 19                	jne    c01063d4 <check_swap+0x4b5>
c01063bb:	68 08 d3 10 c0       	push   $0xc010d308
c01063c0:	68 32 d0 10 c0       	push   $0xc010d032
c01063c5:	68 00 01 00 00       	push   $0x100
c01063ca:	68 cc cf 10 c0       	push   $0xc010cfcc
c01063cf:	e8 24 a0 ff ff       	call   c01003f8 <__panic>
     check_content_set();
     assert( nr_free == 0);         
     for(i = 0; i<MAX_SEQ_NO ; i++) 
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
     
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01063d4:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c01063d8:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c01063dc:	0f 8e 2a ff ff ff    	jle    c010630c <check_swap+0x3ed>
         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
         assert(check_ptep[i] != NULL);
         assert(pte2page(*check_ptep[i]) == check_rp[i]);
         assert((*check_ptep[i] & PTE_P));          
     }
     cprintf("set up init env for check_swap over!\n");
c01063e2:	83 ec 0c             	sub    $0xc,%esp
c01063e5:	68 24 d3 10 c0       	push   $0xc010d324
c01063ea:	e8 a3 9e ff ff       	call   c0100292 <cprintf>
c01063ef:	83 c4 10             	add    $0x10,%esp
     // now access the virt pages to test  page relpacement algorithm 
     ret=check_content_access();
c01063f2:	e8 10 fb ff ff       	call   c0105f07 <check_content_access>
c01063f7:	89 45 b8             	mov    %eax,-0x48(%ebp)
     assert(ret==0);
c01063fa:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
c01063fe:	74 19                	je     c0106419 <check_swap+0x4fa>
c0106400:	68 4a d3 10 c0       	push   $0xc010d34a
c0106405:	68 32 d0 10 c0       	push   $0xc010d032
c010640a:	68 05 01 00 00       	push   $0x105
c010640f:	68 cc cf 10 c0       	push   $0xc010cfcc
c0106414:	e8 df 9f ff ff       	call   c01003f8 <__panic>
     
     //restore kernel mem env
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0106419:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0106420:	eb 1c                	jmp    c010643e <check_swap+0x51f>
         free_pages(check_rp[i],1);
c0106422:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106425:	8b 04 85 c0 20 1a c0 	mov    -0x3fe5df40(,%eax,4),%eax
c010642c:	83 ec 08             	sub    $0x8,%esp
c010642f:	6a 01                	push   $0x1
c0106431:	50                   	push   %eax
c0106432:	e8 10 14 00 00       	call   c0107847 <free_pages>
c0106437:	83 c4 10             	add    $0x10,%esp
     // now access the virt pages to test  page relpacement algorithm 
     ret=check_content_access();
     assert(ret==0);
     
     //restore kernel mem env
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c010643a:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c010643e:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0106442:	7e de                	jle    c0106422 <check_swap+0x503>
         free_pages(check_rp[i],1);
     } 

     //free_page(pte2page(*temp_ptep));
    free_page(pde2page(pgdir[0]));
c0106444:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0106447:	8b 00                	mov    (%eax),%eax
c0106449:	83 ec 0c             	sub    $0xc,%esp
c010644c:	50                   	push   %eax
c010644d:	e8 39 f6 ff ff       	call   c0105a8b <pde2page>
c0106452:	83 c4 10             	add    $0x10,%esp
c0106455:	83 ec 08             	sub    $0x8,%esp
c0106458:	6a 01                	push   $0x1
c010645a:	50                   	push   %eax
c010645b:	e8 e7 13 00 00       	call   c0107847 <free_pages>
c0106460:	83 c4 10             	add    $0x10,%esp
     pgdir[0] = 0;
c0106463:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0106466:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
     mm->pgdir = NULL;
c010646c:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010646f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
     mm_destroy(mm);
c0106476:	83 ec 0c             	sub    $0xc,%esp
c0106479:	ff 75 d8             	pushl  -0x28(%ebp)
c010647c:	e8 31 dc ff ff       	call   c01040b2 <mm_destroy>
c0106481:	83 c4 10             	add    $0x10,%esp
     check_mm_struct = NULL;
c0106484:	c7 05 bc 20 1a c0 00 	movl   $0x0,0xc01a20bc
c010648b:	00 00 00 
     
     nr_free = nr_free_store;
c010648e:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0106491:	a3 8c 21 1a c0       	mov    %eax,0xc01a218c
     free_list = free_list_store;
c0106496:	8b 45 98             	mov    -0x68(%ebp),%eax
c0106499:	8b 55 9c             	mov    -0x64(%ebp),%edx
c010649c:	a3 84 21 1a c0       	mov    %eax,0xc01a2184
c01064a1:	89 15 88 21 1a c0    	mov    %edx,0xc01a2188

     
     le = &free_list;
c01064a7:	c7 45 e8 84 21 1a c0 	movl   $0xc01a2184,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c01064ae:	eb 1d                	jmp    c01064cd <check_swap+0x5ae>
         struct Page *p = le2page(le, page_link);
c01064b0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01064b3:	83 e8 0c             	sub    $0xc,%eax
c01064b6:	89 45 b4             	mov    %eax,-0x4c(%ebp)
         count --, total -= p->property;
c01064b9:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c01064bd:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01064c0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01064c3:	8b 40 08             	mov    0x8(%eax),%eax
c01064c6:	29 c2                	sub    %eax,%edx
c01064c8:	89 d0                	mov    %edx,%eax
c01064ca:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01064cd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01064d0:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01064d3:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01064d6:	8b 40 04             	mov    0x4(%eax),%eax
     nr_free = nr_free_store;
     free_list = free_list_store;

     
     le = &free_list;
     while ((le = list_next(le)) != &free_list) {
c01064d9:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01064dc:	81 7d e8 84 21 1a c0 	cmpl   $0xc01a2184,-0x18(%ebp)
c01064e3:	75 cb                	jne    c01064b0 <check_swap+0x591>
         struct Page *p = le2page(le, page_link);
         count --, total -= p->property;
     }
     cprintf("count is %d, total is %d\n",count,total);
c01064e5:	83 ec 04             	sub    $0x4,%esp
c01064e8:	ff 75 f0             	pushl  -0x10(%ebp)
c01064eb:	ff 75 f4             	pushl  -0xc(%ebp)
c01064ee:	68 51 d3 10 c0       	push   $0xc010d351
c01064f3:	e8 9a 9d ff ff       	call   c0100292 <cprintf>
c01064f8:	83 c4 10             	add    $0x10,%esp
     //assert(count == 0);
     
     cprintf("check_swap() succeeded!\n");
c01064fb:	83 ec 0c             	sub    $0xc,%esp
c01064fe:	68 6b d3 10 c0       	push   $0xc010d36b
c0106503:	e8 8a 9d ff ff       	call   c0100292 <cprintf>
c0106508:	83 c4 10             	add    $0x10,%esp
}
c010650b:	90                   	nop
c010650c:	c9                   	leave  
c010650d:	c3                   	ret    

c010650e <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c010650e:	55                   	push   %ebp
c010650f:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0106511:	8b 45 08             	mov    0x8(%ebp),%eax
c0106514:	8b 15 98 21 1a c0    	mov    0xc01a2198,%edx
c010651a:	29 d0                	sub    %edx,%eax
c010651c:	c1 f8 05             	sar    $0x5,%eax
}
c010651f:	5d                   	pop    %ebp
c0106520:	c3                   	ret    

c0106521 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0106521:	55                   	push   %ebp
c0106522:	89 e5                	mov    %esp,%ebp
    return page2ppn(page) << PGSHIFT;
c0106524:	ff 75 08             	pushl  0x8(%ebp)
c0106527:	e8 e2 ff ff ff       	call   c010650e <page2ppn>
c010652c:	83 c4 04             	add    $0x4,%esp
c010652f:	c1 e0 0c             	shl    $0xc,%eax
}
c0106532:	c9                   	leave  
c0106533:	c3                   	ret    

c0106534 <page_ref>:
pde2page(pde_t pde) {
    return pa2page(PDE_ADDR(pde));
}

static inline int
page_ref(struct Page *page) {
c0106534:	55                   	push   %ebp
c0106535:	89 e5                	mov    %esp,%ebp
    return page->ref;
c0106537:	8b 45 08             	mov    0x8(%ebp),%eax
c010653a:	8b 00                	mov    (%eax),%eax
}
c010653c:	5d                   	pop    %ebp
c010653d:	c3                   	ret    

c010653e <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c010653e:	55                   	push   %ebp
c010653f:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c0106541:	8b 45 08             	mov    0x8(%ebp),%eax
c0106544:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106547:	89 10                	mov    %edx,(%eax)
}
c0106549:	90                   	nop
c010654a:	5d                   	pop    %ebp
c010654b:	c3                   	ret    

c010654c <default_init>:

#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
default_init(void) {
c010654c:	55                   	push   %ebp
c010654d:	89 e5                	mov    %esp,%ebp
c010654f:	83 ec 10             	sub    $0x10,%esp
c0106552:	c7 45 fc 84 21 1a c0 	movl   $0xc01a2184,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0106559:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010655c:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010655f:	89 50 04             	mov    %edx,0x4(%eax)
c0106562:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106565:	8b 50 04             	mov    0x4(%eax),%edx
c0106568:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010656b:	89 10                	mov    %edx,(%eax)
    list_init(&free_list);
    nr_free = 0;
c010656d:	c7 05 8c 21 1a c0 00 	movl   $0x0,0xc01a218c
c0106574:	00 00 00 
}
c0106577:	90                   	nop
c0106578:	c9                   	leave  
c0106579:	c3                   	ret    

c010657a <default_init_memmap>:

static void
default_init_memmap(struct Page *base, size_t n) {
c010657a:	55                   	push   %ebp
c010657b:	89 e5                	mov    %esp,%ebp
c010657d:	83 ec 48             	sub    $0x48,%esp
    assert(n > 0);
c0106580:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0106584:	75 16                	jne    c010659c <default_init_memmap+0x22>
c0106586:	68 84 d3 10 c0       	push   $0xc010d384
c010658b:	68 8a d3 10 c0       	push   $0xc010d38a
c0106590:	6a 6d                	push   $0x6d
c0106592:	68 9f d3 10 c0       	push   $0xc010d39f
c0106597:	e8 5c 9e ff ff       	call   c01003f8 <__panic>
    struct Page *p = base;
c010659c:	8b 45 08             	mov    0x8(%ebp),%eax
c010659f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (; p != base + n; p ++) {
c01065a2:	eb 6c                	jmp    c0106610 <default_init_memmap+0x96>
        assert(PageReserved(p));
c01065a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01065a7:	83 c0 04             	add    $0x4,%eax
c01065aa:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c01065b1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01065b4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01065b7:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01065ba:	0f a3 10             	bt     %edx,(%eax)
c01065bd:	19 c0                	sbb    %eax,%eax
c01065bf:	89 45 e0             	mov    %eax,-0x20(%ebp)
    return oldbit != 0;
c01065c2:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01065c6:	0f 95 c0             	setne  %al
c01065c9:	0f b6 c0             	movzbl %al,%eax
c01065cc:	85 c0                	test   %eax,%eax
c01065ce:	75 16                	jne    c01065e6 <default_init_memmap+0x6c>
c01065d0:	68 b5 d3 10 c0       	push   $0xc010d3b5
c01065d5:	68 8a d3 10 c0       	push   $0xc010d38a
c01065da:	6a 70                	push   $0x70
c01065dc:	68 9f d3 10 c0       	push   $0xc010d39f
c01065e1:	e8 12 9e ff ff       	call   c01003f8 <__panic>
        p->flags = p->property = 0;
c01065e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01065e9:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
c01065f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01065f3:	8b 50 08             	mov    0x8(%eax),%edx
c01065f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01065f9:	89 50 04             	mov    %edx,0x4(%eax)
        set_page_ref(p, 0);
c01065fc:	83 ec 08             	sub    $0x8,%esp
c01065ff:	6a 00                	push   $0x0
c0106601:	ff 75 f4             	pushl  -0xc(%ebp)
c0106604:	e8 35 ff ff ff       	call   c010653e <set_page_ref>
c0106609:	83 c4 10             	add    $0x10,%esp

static void
default_init_memmap(struct Page *base, size_t n) {
    assert(n > 0);
    struct Page *p = base;
    for (; p != base + n; p ++) {
c010660c:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
c0106610:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106613:	c1 e0 05             	shl    $0x5,%eax
c0106616:	89 c2                	mov    %eax,%edx
c0106618:	8b 45 08             	mov    0x8(%ebp),%eax
c010661b:	01 d0                	add    %edx,%eax
c010661d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0106620:	75 82                	jne    c01065a4 <default_init_memmap+0x2a>
        assert(PageReserved(p));
        p->flags = p->property = 0;
        set_page_ref(p, 0);
    }
    base->property = n;
c0106622:	8b 45 08             	mov    0x8(%ebp),%eax
c0106625:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106628:	89 50 08             	mov    %edx,0x8(%eax)
    SetPageProperty(base);
c010662b:	8b 45 08             	mov    0x8(%ebp),%eax
c010662e:	83 c0 04             	add    $0x4,%eax
c0106631:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
c0106638:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c010663b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010663e:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0106641:	0f ab 10             	bts    %edx,(%eax)
    nr_free += n;
c0106644:	8b 15 8c 21 1a c0    	mov    0xc01a218c,%edx
c010664a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010664d:	01 d0                	add    %edx,%eax
c010664f:	a3 8c 21 1a c0       	mov    %eax,0xc01a218c
    list_add(&free_list, &(base->page_link));
c0106654:	8b 45 08             	mov    0x8(%ebp),%eax
c0106657:	83 c0 0c             	add    $0xc,%eax
c010665a:	c7 45 f0 84 21 1a c0 	movl   $0xc01a2184,-0x10(%ebp)
c0106661:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0106664:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106667:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010666a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010666d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0106670:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0106673:	8b 40 04             	mov    0x4(%eax),%eax
c0106676:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0106679:	89 55 d0             	mov    %edx,-0x30(%ebp)
c010667c:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010667f:	89 55 cc             	mov    %edx,-0x34(%ebp)
c0106682:	89 45 c8             	mov    %eax,-0x38(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0106685:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0106688:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010668b:	89 10                	mov    %edx,(%eax)
c010668d:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0106690:	8b 10                	mov    (%eax),%edx
c0106692:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0106695:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0106698:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010669b:	8b 55 c8             	mov    -0x38(%ebp),%edx
c010669e:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c01066a1:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01066a4:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01066a7:	89 10                	mov    %edx,(%eax)
}
c01066a9:	90                   	nop
c01066aa:	c9                   	leave  
c01066ab:	c3                   	ret    

c01066ac <default_alloc_pages>:

// LAB2 MODIFIED need to be rewritten
static struct Page *
default_alloc_pages(size_t n) {
c01066ac:	55                   	push   %ebp
c01066ad:	89 e5                	mov    %esp,%ebp
c01066af:	83 ec 58             	sub    $0x58,%esp
    assert(n > 0);
c01066b2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01066b6:	75 16                	jne    c01066ce <default_alloc_pages+0x22>
c01066b8:	68 84 d3 10 c0       	push   $0xc010d384
c01066bd:	68 8a d3 10 c0       	push   $0xc010d38a
c01066c2:	6a 7d                	push   $0x7d
c01066c4:	68 9f d3 10 c0       	push   $0xc010d39f
c01066c9:	e8 2a 9d ff ff       	call   c01003f8 <__panic>
    if (n > nr_free) {
c01066ce:	a1 8c 21 1a c0       	mov    0xc01a218c,%eax
c01066d3:	3b 45 08             	cmp    0x8(%ebp),%eax
c01066d6:	73 0a                	jae    c01066e2 <default_alloc_pages+0x36>
        return NULL;
c01066d8:	b8 00 00 00 00       	mov    $0x0,%eax
c01066dd:	e9 41 01 00 00       	jmp    c0106823 <default_alloc_pages+0x177>
    }
    struct Page *page = NULL;
c01066e2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    list_entry_t *le = &free_list;
c01066e9:	c7 45 f0 84 21 1a c0 	movl   $0xc01a2184,-0x10(%ebp)
    while ((le = list_next(le)) != &free_list) {
c01066f0:	eb 1c                	jmp    c010670e <default_alloc_pages+0x62>
        struct Page *p = le2page(le, page_link);
c01066f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01066f5:	83 e8 0c             	sub    $0xc,%eax
c01066f8:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (p->property >= n) {
c01066fb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01066fe:	8b 40 08             	mov    0x8(%eax),%eax
c0106701:	3b 45 08             	cmp    0x8(%ebp),%eax
c0106704:	72 08                	jb     c010670e <default_alloc_pages+0x62>
            page = p;
c0106706:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106709:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
c010670c:	eb 18                	jmp    c0106726 <default_alloc_pages+0x7a>
c010670e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106711:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0106714:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0106717:	8b 40 04             	mov    0x4(%eax),%eax
    if (n > nr_free) {
        return NULL;
    }
    struct Page *page = NULL;
    list_entry_t *le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c010671a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010671d:	81 7d f0 84 21 1a c0 	cmpl   $0xc01a2184,-0x10(%ebp)
c0106724:	75 cc                	jne    c01066f2 <default_alloc_pages+0x46>
        if (p->property >= n) {
            page = p;
            break;
        }
    }
    if (page != NULL) {
c0106726:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010672a:	0f 84 f0 00 00 00    	je     c0106820 <default_alloc_pages+0x174>
c0106730:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106733:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0106736:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106739:	8b 40 04             	mov    0x4(%eax),%eax
        list_entry_t *following_le = list_next(le);
c010673c:	89 45 e0             	mov    %eax,-0x20(%ebp)
        list_del(&(page->page_link));
c010673f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106742:	83 c0 0c             	add    $0xc,%eax
c0106745:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0106748:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010674b:	8b 40 04             	mov    0x4(%eax),%eax
c010674e:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0106751:	8b 12                	mov    (%edx),%edx
c0106753:	89 55 c8             	mov    %edx,-0x38(%ebp)
c0106756:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0106759:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010675c:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c010675f:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0106762:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0106765:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0106768:	89 10                	mov    %edx,(%eax)
        if (page->property > n) {
c010676a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010676d:	8b 40 08             	mov    0x8(%eax),%eax
c0106770:	3b 45 08             	cmp    0x8(%ebp),%eax
c0106773:	0f 86 81 00 00 00    	jbe    c01067fa <default_alloc_pages+0x14e>
            struct Page *p = page + n;                      // split the allocated page
c0106779:	8b 45 08             	mov    0x8(%ebp),%eax
c010677c:	c1 e0 05             	shl    $0x5,%eax
c010677f:	89 c2                	mov    %eax,%edx
c0106781:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106784:	01 d0                	add    %edx,%eax
c0106786:	89 45 d8             	mov    %eax,-0x28(%ebp)
            p->property = page->property - n;               // set page num
c0106789:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010678c:	8b 40 08             	mov    0x8(%eax),%eax
c010678f:	2b 45 08             	sub    0x8(%ebp),%eax
c0106792:	89 c2                	mov    %eax,%edx
c0106794:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0106797:	89 50 08             	mov    %edx,0x8(%eax)
            SetPageProperty(p);                             // mark as the head page
c010679a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010679d:	83 c0 04             	add    $0x4,%eax
c01067a0:	c7 45 d0 01 00 00 00 	movl   $0x1,-0x30(%ebp)
c01067a7:	89 45 b0             	mov    %eax,-0x50(%ebp)
c01067aa:	8b 45 b0             	mov    -0x50(%ebp),%eax
c01067ad:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01067b0:	0f ab 10             	bts    %edx,(%eax)
            list_add_before(following_le, &(p->page_link)); // add the remaining block before the formerly following block
c01067b3:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01067b6:	8d 50 0c             	lea    0xc(%eax),%edx
c01067b9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01067bc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01067bf:	89 55 c0             	mov    %edx,-0x40(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c01067c2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01067c5:	8b 00                	mov    (%eax),%eax
c01067c7:	8b 55 c0             	mov    -0x40(%ebp),%edx
c01067ca:	89 55 bc             	mov    %edx,-0x44(%ebp)
c01067cd:	89 45 b8             	mov    %eax,-0x48(%ebp)
c01067d0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01067d3:	89 45 b4             	mov    %eax,-0x4c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c01067d6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01067d9:	8b 55 bc             	mov    -0x44(%ebp),%edx
c01067dc:	89 10                	mov    %edx,(%eax)
c01067de:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01067e1:	8b 10                	mov    (%eax),%edx
c01067e3:	8b 45 b8             	mov    -0x48(%ebp),%eax
c01067e6:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c01067e9:	8b 45 bc             	mov    -0x44(%ebp),%eax
c01067ec:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c01067ef:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c01067f2:	8b 45 bc             	mov    -0x44(%ebp),%eax
c01067f5:	8b 55 b8             	mov    -0x48(%ebp),%edx
c01067f8:	89 10                	mov    %edx,(%eax)
        }
        nr_free -= n;
c01067fa:	a1 8c 21 1a c0       	mov    0xc01a218c,%eax
c01067ff:	2b 45 08             	sub    0x8(%ebp),%eax
c0106802:	a3 8c 21 1a c0       	mov    %eax,0xc01a218c
        ClearPageProperty(page);    // mark as "not head page"
c0106807:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010680a:	83 c0 04             	add    $0x4,%eax
c010680d:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
c0106814:	89 45 ac             	mov    %eax,-0x54(%ebp)
 * @nr:     the bit to clear
 * @addr:   the address to start counting from
 * */
static inline void
clear_bit(int nr, volatile void *addr) {
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0106817:	8b 45 ac             	mov    -0x54(%ebp),%eax
c010681a:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010681d:	0f b3 10             	btr    %edx,(%eax)
    }
    return page;
c0106820:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0106823:	c9                   	leave  
c0106824:	c3                   	ret    

c0106825 <default_free_pages>:

// LAB2 MODIFIED
static void
default_free_pages(struct Page *base, size_t n) {
c0106825:	55                   	push   %ebp
c0106826:	89 e5                	mov    %esp,%ebp
c0106828:	81 ec 88 00 00 00    	sub    $0x88,%esp
    assert(n > 0);
c010682e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0106832:	75 19                	jne    c010684d <default_free_pages+0x28>
c0106834:	68 84 d3 10 c0       	push   $0xc010d384
c0106839:	68 8a d3 10 c0       	push   $0xc010d38a
c010683e:	68 9c 00 00 00       	push   $0x9c
c0106843:	68 9f d3 10 c0       	push   $0xc010d39f
c0106848:	e8 ab 9b ff ff       	call   c01003f8 <__panic>
    struct Page *p = base;
c010684d:	8b 45 08             	mov    0x8(%ebp),%eax
c0106850:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (; p != base + n; p ++) {
c0106853:	e9 8f 00 00 00       	jmp    c01068e7 <default_free_pages+0xc2>
        assert(!PageReserved(p) && !PageProperty(p));
c0106858:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010685b:	83 c0 04             	add    $0x4,%eax
c010685e:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
c0106865:	89 45 bc             	mov    %eax,-0x44(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0106868:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010686b:	8b 55 c0             	mov    -0x40(%ebp),%edx
c010686e:	0f a3 10             	bt     %edx,(%eax)
c0106871:	19 c0                	sbb    %eax,%eax
c0106873:	89 45 b8             	mov    %eax,-0x48(%ebp)
    return oldbit != 0;
c0106876:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
c010687a:	0f 95 c0             	setne  %al
c010687d:	0f b6 c0             	movzbl %al,%eax
c0106880:	85 c0                	test   %eax,%eax
c0106882:	75 2c                	jne    c01068b0 <default_free_pages+0x8b>
c0106884:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106887:	83 c0 04             	add    $0x4,%eax
c010688a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
c0106891:	89 45 b4             	mov    %eax,-0x4c(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0106894:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0106897:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010689a:	0f a3 10             	bt     %edx,(%eax)
c010689d:	19 c0                	sbb    %eax,%eax
c010689f:	89 45 b0             	mov    %eax,-0x50(%ebp)
    return oldbit != 0;
c01068a2:	83 7d b0 00          	cmpl   $0x0,-0x50(%ebp)
c01068a6:	0f 95 c0             	setne  %al
c01068a9:	0f b6 c0             	movzbl %al,%eax
c01068ac:	85 c0                	test   %eax,%eax
c01068ae:	74 19                	je     c01068c9 <default_free_pages+0xa4>
c01068b0:	68 c8 d3 10 c0       	push   $0xc010d3c8
c01068b5:	68 8a d3 10 c0       	push   $0xc010d38a
c01068ba:	68 9f 00 00 00       	push   $0x9f
c01068bf:	68 9f d3 10 c0       	push   $0xc010d39f
c01068c4:	e8 2f 9b ff ff       	call   c01003f8 <__panic>
        p->flags = 0;
c01068c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01068cc:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
        set_page_ref(p, 0);     // clear ref flag
c01068d3:	83 ec 08             	sub    $0x8,%esp
c01068d6:	6a 00                	push   $0x0
c01068d8:	ff 75 f4             	pushl  -0xc(%ebp)
c01068db:	e8 5e fc ff ff       	call   c010653e <set_page_ref>
c01068e0:	83 c4 10             	add    $0x10,%esp
// LAB2 MODIFIED
static void
default_free_pages(struct Page *base, size_t n) {
    assert(n > 0);
    struct Page *p = base;
    for (; p != base + n; p ++) {
c01068e3:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
c01068e7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01068ea:	c1 e0 05             	shl    $0x5,%eax
c01068ed:	89 c2                	mov    %eax,%edx
c01068ef:	8b 45 08             	mov    0x8(%ebp),%eax
c01068f2:	01 d0                	add    %edx,%eax
c01068f4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01068f7:	0f 85 5b ff ff ff    	jne    c0106858 <default_free_pages+0x33>
        assert(!PageReserved(p) && !PageProperty(p));
        p->flags = 0;
        set_page_ref(p, 0);     // clear ref flag
    }
    base->property = n;
c01068fd:	8b 45 08             	mov    0x8(%ebp),%eax
c0106900:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106903:	89 50 08             	mov    %edx,0x8(%eax)
    SetPageProperty(base);
c0106906:	8b 45 08             	mov    0x8(%ebp),%eax
c0106909:	83 c0 04             	add    $0x4,%eax
c010690c:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
c0106913:	89 45 ac             	mov    %eax,-0x54(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0106916:	8b 45 ac             	mov    -0x54(%ebp),%eax
c0106919:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010691c:	0f ab 10             	bts    %edx,(%eax)
c010691f:	c7 45 e8 84 21 1a c0 	movl   $0xc01a2184,-0x18(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0106926:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106929:	8b 40 04             	mov    0x4(%eax),%eax
    // try to extend free block
    list_entry_t *le = list_next(&free_list);
c010692c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    while (le != &free_list) {
c010692f:	e9 0e 01 00 00       	jmp    c0106a42 <default_free_pages+0x21d>
        p = le2page(le, page_link);
c0106934:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106937:	83 e8 0c             	sub    $0xc,%eax
c010693a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010693d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106940:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0106943:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106946:	8b 40 04             	mov    0x4(%eax),%eax
        le = list_next(le);
c0106949:	89 45 f0             	mov    %eax,-0x10(%ebp)
        // page is exactly before one page
        if (base + base->property == p) {
c010694c:	8b 45 08             	mov    0x8(%ebp),%eax
c010694f:	8b 40 08             	mov    0x8(%eax),%eax
c0106952:	c1 e0 05             	shl    $0x5,%eax
c0106955:	89 c2                	mov    %eax,%edx
c0106957:	8b 45 08             	mov    0x8(%ebp),%eax
c010695a:	01 d0                	add    %edx,%eax
c010695c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010695f:	75 64                	jne    c01069c5 <default_free_pages+0x1a0>
            base->property += p->property;
c0106961:	8b 45 08             	mov    0x8(%ebp),%eax
c0106964:	8b 50 08             	mov    0x8(%eax),%edx
c0106967:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010696a:	8b 40 08             	mov    0x8(%eax),%eax
c010696d:	01 c2                	add    %eax,%edx
c010696f:	8b 45 08             	mov    0x8(%ebp),%eax
c0106972:	89 50 08             	mov    %edx,0x8(%eax)
            p->property = 0;     // clear properties of p
c0106975:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106978:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
            ClearPageProperty(p);
c010697f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106982:	83 c0 04             	add    $0x4,%eax
c0106985:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
c010698c:	89 45 a0             	mov    %eax,-0x60(%ebp)
 * @nr:     the bit to clear
 * @addr:   the address to start counting from
 * */
static inline void
clear_bit(int nr, volatile void *addr) {
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c010698f:	8b 45 a0             	mov    -0x60(%ebp),%eax
c0106992:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0106995:	0f b3 10             	btr    %edx,(%eax)
            list_del(&(p->page_link));
c0106998:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010699b:	83 c0 0c             	add    $0xc,%eax
c010699e:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c01069a1:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01069a4:	8b 40 04             	mov    0x4(%eax),%eax
c01069a7:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01069aa:	8b 12                	mov    (%edx),%edx
c01069ac:	89 55 a8             	mov    %edx,-0x58(%ebp)
c01069af:	89 45 a4             	mov    %eax,-0x5c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c01069b2:	8b 45 a8             	mov    -0x58(%ebp),%eax
c01069b5:	8b 55 a4             	mov    -0x5c(%ebp),%edx
c01069b8:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c01069bb:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c01069be:	8b 55 a8             	mov    -0x58(%ebp),%edx
c01069c1:	89 10                	mov    %edx,(%eax)
c01069c3:	eb 7d                	jmp    c0106a42 <default_free_pages+0x21d>
        }
        // page is exactly after one page
        else if (p + p->property == base) {
c01069c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01069c8:	8b 40 08             	mov    0x8(%eax),%eax
c01069cb:	c1 e0 05             	shl    $0x5,%eax
c01069ce:	89 c2                	mov    %eax,%edx
c01069d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01069d3:	01 d0                	add    %edx,%eax
c01069d5:	3b 45 08             	cmp    0x8(%ebp),%eax
c01069d8:	75 68                	jne    c0106a42 <default_free_pages+0x21d>
            p->property += base->property;
c01069da:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01069dd:	8b 50 08             	mov    0x8(%eax),%edx
c01069e0:	8b 45 08             	mov    0x8(%ebp),%eax
c01069e3:	8b 40 08             	mov    0x8(%eax),%eax
c01069e6:	01 c2                	add    %eax,%edx
c01069e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01069eb:	89 50 08             	mov    %edx,0x8(%eax)
            base->property = 0;     // clear properties of base
c01069ee:	8b 45 08             	mov    0x8(%ebp),%eax
c01069f1:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
            ClearPageProperty(base);
c01069f8:	8b 45 08             	mov    0x8(%ebp),%eax
c01069fb:	83 c0 04             	add    $0x4,%eax
c01069fe:	c7 45 cc 01 00 00 00 	movl   $0x1,-0x34(%ebp)
c0106a05:	89 45 94             	mov    %eax,-0x6c(%ebp)
c0106a08:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0106a0b:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0106a0e:	0f b3 10             	btr    %edx,(%eax)
            base = p;
c0106a11:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106a14:	89 45 08             	mov    %eax,0x8(%ebp)
            list_del(&(p->page_link));
c0106a17:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106a1a:	83 c0 0c             	add    $0xc,%eax
c0106a1d:	89 45 d8             	mov    %eax,-0x28(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0106a20:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0106a23:	8b 40 04             	mov    0x4(%eax),%eax
c0106a26:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0106a29:	8b 12                	mov    (%edx),%edx
c0106a2b:	89 55 9c             	mov    %edx,-0x64(%ebp)
c0106a2e:	89 45 98             	mov    %eax,-0x68(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0106a31:	8b 45 9c             	mov    -0x64(%ebp),%eax
c0106a34:	8b 55 98             	mov    -0x68(%ebp),%edx
c0106a37:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0106a3a:	8b 45 98             	mov    -0x68(%ebp),%eax
c0106a3d:	8b 55 9c             	mov    -0x64(%ebp),%edx
c0106a40:	89 10                	mov    %edx,(%eax)
    }
    base->property = n;
    SetPageProperty(base);
    // try to extend free block
    list_entry_t *le = list_next(&free_list);
    while (le != &free_list) {
c0106a42:	81 7d f0 84 21 1a c0 	cmpl   $0xc01a2184,-0x10(%ebp)
c0106a49:	0f 85 e5 fe ff ff    	jne    c0106934 <default_free_pages+0x10f>
c0106a4f:	c7 45 d0 84 21 1a c0 	movl   $0xc01a2184,-0x30(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0106a56:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0106a59:	8b 40 04             	mov    0x4(%eax),%eax
            base = p;
            list_del(&(p->page_link));
        }
    }
    // search for a place to add page into list
    le = list_next(&free_list);
c0106a5c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    while (le != &free_list) {
c0106a5f:	eb 20                	jmp    c0106a81 <default_free_pages+0x25c>
        p = le2page(le, page_link);
c0106a61:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106a64:	83 e8 0c             	sub    $0xc,%eax
c0106a67:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (p > base) {
c0106a6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106a6d:	3b 45 08             	cmp    0x8(%ebp),%eax
c0106a70:	77 1a                	ja     c0106a8c <default_free_pages+0x267>
c0106a72:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106a75:	89 45 c8             	mov    %eax,-0x38(%ebp)
c0106a78:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0106a7b:	8b 40 04             	mov    0x4(%eax),%eax
            break;
        }
        le = list_next(le);
c0106a7e:	89 45 f0             	mov    %eax,-0x10(%ebp)
            list_del(&(p->page_link));
        }
    }
    // search for a place to add page into list
    le = list_next(&free_list);
    while (le != &free_list) {
c0106a81:	81 7d f0 84 21 1a c0 	cmpl   $0xc01a2184,-0x10(%ebp)
c0106a88:	75 d7                	jne    c0106a61 <default_free_pages+0x23c>
c0106a8a:	eb 01                	jmp    c0106a8d <default_free_pages+0x268>
        p = le2page(le, page_link);
        if (p > base) {
            break;
c0106a8c:	90                   	nop
        }
        le = list_next(le);
    }
    nr_free += n;
c0106a8d:	8b 15 8c 21 1a c0    	mov    0xc01a218c,%edx
c0106a93:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106a96:	01 d0                	add    %edx,%eax
c0106a98:	a3 8c 21 1a c0       	mov    %eax,0xc01a218c
    list_add_before(le, &(base->page_link)); 
c0106a9d:	8b 45 08             	mov    0x8(%ebp),%eax
c0106aa0:	8d 50 0c             	lea    0xc(%eax),%edx
c0106aa3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106aa6:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c0106aa9:	89 55 90             	mov    %edx,-0x70(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c0106aac:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0106aaf:	8b 00                	mov    (%eax),%eax
c0106ab1:	8b 55 90             	mov    -0x70(%ebp),%edx
c0106ab4:	89 55 8c             	mov    %edx,-0x74(%ebp)
c0106ab7:	89 45 88             	mov    %eax,-0x78(%ebp)
c0106aba:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0106abd:	89 45 84             	mov    %eax,-0x7c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0106ac0:	8b 45 84             	mov    -0x7c(%ebp),%eax
c0106ac3:	8b 55 8c             	mov    -0x74(%ebp),%edx
c0106ac6:	89 10                	mov    %edx,(%eax)
c0106ac8:	8b 45 84             	mov    -0x7c(%ebp),%eax
c0106acb:	8b 10                	mov    (%eax),%edx
c0106acd:	8b 45 88             	mov    -0x78(%ebp),%eax
c0106ad0:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0106ad3:	8b 45 8c             	mov    -0x74(%ebp),%eax
c0106ad6:	8b 55 84             	mov    -0x7c(%ebp),%edx
c0106ad9:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0106adc:	8b 45 8c             	mov    -0x74(%ebp),%eax
c0106adf:	8b 55 88             	mov    -0x78(%ebp),%edx
c0106ae2:	89 10                	mov    %edx,(%eax)
}
c0106ae4:	90                   	nop
c0106ae5:	c9                   	leave  
c0106ae6:	c3                   	ret    

c0106ae7 <default_nr_free_pages>:

static size_t
default_nr_free_pages(void) {
c0106ae7:	55                   	push   %ebp
c0106ae8:	89 e5                	mov    %esp,%ebp
    return nr_free;
c0106aea:	a1 8c 21 1a c0       	mov    0xc01a218c,%eax
}
c0106aef:	5d                   	pop    %ebp
c0106af0:	c3                   	ret    

c0106af1 <basic_check>:

static void
basic_check(void) {
c0106af1:	55                   	push   %ebp
c0106af2:	89 e5                	mov    %esp,%ebp
c0106af4:	83 ec 38             	sub    $0x38,%esp
    struct Page *p0, *p1, *p2;
    p0 = p1 = p2 = NULL;
c0106af7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0106afe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106b01:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106b04:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106b07:	89 45 ec             	mov    %eax,-0x14(%ebp)
    assert((p0 = alloc_page()) != NULL);
c0106b0a:	83 ec 0c             	sub    $0xc,%esp
c0106b0d:	6a 01                	push   $0x1
c0106b0f:	e8 c7 0c 00 00       	call   c01077db <alloc_pages>
c0106b14:	83 c4 10             	add    $0x10,%esp
c0106b17:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0106b1a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0106b1e:	75 19                	jne    c0106b39 <basic_check+0x48>
c0106b20:	68 ed d3 10 c0       	push   $0xc010d3ed
c0106b25:	68 8a d3 10 c0       	push   $0xc010d38a
c0106b2a:	68 d0 00 00 00       	push   $0xd0
c0106b2f:	68 9f d3 10 c0       	push   $0xc010d39f
c0106b34:	e8 bf 98 ff ff       	call   c01003f8 <__panic>
    assert((p1 = alloc_page()) != NULL);
c0106b39:	83 ec 0c             	sub    $0xc,%esp
c0106b3c:	6a 01                	push   $0x1
c0106b3e:	e8 98 0c 00 00       	call   c01077db <alloc_pages>
c0106b43:	83 c4 10             	add    $0x10,%esp
c0106b46:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106b49:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106b4d:	75 19                	jne    c0106b68 <basic_check+0x77>
c0106b4f:	68 09 d4 10 c0       	push   $0xc010d409
c0106b54:	68 8a d3 10 c0       	push   $0xc010d38a
c0106b59:	68 d1 00 00 00       	push   $0xd1
c0106b5e:	68 9f d3 10 c0       	push   $0xc010d39f
c0106b63:	e8 90 98 ff ff       	call   c01003f8 <__panic>
    assert((p2 = alloc_page()) != NULL);
c0106b68:	83 ec 0c             	sub    $0xc,%esp
c0106b6b:	6a 01                	push   $0x1
c0106b6d:	e8 69 0c 00 00       	call   c01077db <alloc_pages>
c0106b72:	83 c4 10             	add    $0x10,%esp
c0106b75:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0106b78:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106b7c:	75 19                	jne    c0106b97 <basic_check+0xa6>
c0106b7e:	68 25 d4 10 c0       	push   $0xc010d425
c0106b83:	68 8a d3 10 c0       	push   $0xc010d38a
c0106b88:	68 d2 00 00 00       	push   $0xd2
c0106b8d:	68 9f d3 10 c0       	push   $0xc010d39f
c0106b92:	e8 61 98 ff ff       	call   c01003f8 <__panic>

    assert(p0 != p1 && p0 != p2 && p1 != p2);
c0106b97:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106b9a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0106b9d:	74 10                	je     c0106baf <basic_check+0xbe>
c0106b9f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106ba2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0106ba5:	74 08                	je     c0106baf <basic_check+0xbe>
c0106ba7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106baa:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0106bad:	75 19                	jne    c0106bc8 <basic_check+0xd7>
c0106baf:	68 44 d4 10 c0       	push   $0xc010d444
c0106bb4:	68 8a d3 10 c0       	push   $0xc010d38a
c0106bb9:	68 d4 00 00 00       	push   $0xd4
c0106bbe:	68 9f d3 10 c0       	push   $0xc010d39f
c0106bc3:	e8 30 98 ff ff       	call   c01003f8 <__panic>
    assert(page_ref(p0) == 0 && page_ref(p1) == 0 && page_ref(p2) == 0);
c0106bc8:	83 ec 0c             	sub    $0xc,%esp
c0106bcb:	ff 75 ec             	pushl  -0x14(%ebp)
c0106bce:	e8 61 f9 ff ff       	call   c0106534 <page_ref>
c0106bd3:	83 c4 10             	add    $0x10,%esp
c0106bd6:	85 c0                	test   %eax,%eax
c0106bd8:	75 24                	jne    c0106bfe <basic_check+0x10d>
c0106bda:	83 ec 0c             	sub    $0xc,%esp
c0106bdd:	ff 75 f0             	pushl  -0x10(%ebp)
c0106be0:	e8 4f f9 ff ff       	call   c0106534 <page_ref>
c0106be5:	83 c4 10             	add    $0x10,%esp
c0106be8:	85 c0                	test   %eax,%eax
c0106bea:	75 12                	jne    c0106bfe <basic_check+0x10d>
c0106bec:	83 ec 0c             	sub    $0xc,%esp
c0106bef:	ff 75 f4             	pushl  -0xc(%ebp)
c0106bf2:	e8 3d f9 ff ff       	call   c0106534 <page_ref>
c0106bf7:	83 c4 10             	add    $0x10,%esp
c0106bfa:	85 c0                	test   %eax,%eax
c0106bfc:	74 19                	je     c0106c17 <basic_check+0x126>
c0106bfe:	68 68 d4 10 c0       	push   $0xc010d468
c0106c03:	68 8a d3 10 c0       	push   $0xc010d38a
c0106c08:	68 d5 00 00 00       	push   $0xd5
c0106c0d:	68 9f d3 10 c0       	push   $0xc010d39f
c0106c12:	e8 e1 97 ff ff       	call   c01003f8 <__panic>

    assert(page2pa(p0) < npage * PGSIZE);
c0106c17:	83 ec 0c             	sub    $0xc,%esp
c0106c1a:	ff 75 ec             	pushl  -0x14(%ebp)
c0106c1d:	e8 ff f8 ff ff       	call   c0106521 <page2pa>
c0106c22:	83 c4 10             	add    $0x10,%esp
c0106c25:	89 c2                	mov    %eax,%edx
c0106c27:	a1 80 ff 19 c0       	mov    0xc019ff80,%eax
c0106c2c:	c1 e0 0c             	shl    $0xc,%eax
c0106c2f:	39 c2                	cmp    %eax,%edx
c0106c31:	72 19                	jb     c0106c4c <basic_check+0x15b>
c0106c33:	68 a4 d4 10 c0       	push   $0xc010d4a4
c0106c38:	68 8a d3 10 c0       	push   $0xc010d38a
c0106c3d:	68 d7 00 00 00       	push   $0xd7
c0106c42:	68 9f d3 10 c0       	push   $0xc010d39f
c0106c47:	e8 ac 97 ff ff       	call   c01003f8 <__panic>
    assert(page2pa(p1) < npage * PGSIZE);
c0106c4c:	83 ec 0c             	sub    $0xc,%esp
c0106c4f:	ff 75 f0             	pushl  -0x10(%ebp)
c0106c52:	e8 ca f8 ff ff       	call   c0106521 <page2pa>
c0106c57:	83 c4 10             	add    $0x10,%esp
c0106c5a:	89 c2                	mov    %eax,%edx
c0106c5c:	a1 80 ff 19 c0       	mov    0xc019ff80,%eax
c0106c61:	c1 e0 0c             	shl    $0xc,%eax
c0106c64:	39 c2                	cmp    %eax,%edx
c0106c66:	72 19                	jb     c0106c81 <basic_check+0x190>
c0106c68:	68 c1 d4 10 c0       	push   $0xc010d4c1
c0106c6d:	68 8a d3 10 c0       	push   $0xc010d38a
c0106c72:	68 d8 00 00 00       	push   $0xd8
c0106c77:	68 9f d3 10 c0       	push   $0xc010d39f
c0106c7c:	e8 77 97 ff ff       	call   c01003f8 <__panic>
    assert(page2pa(p2) < npage * PGSIZE);
c0106c81:	83 ec 0c             	sub    $0xc,%esp
c0106c84:	ff 75 f4             	pushl  -0xc(%ebp)
c0106c87:	e8 95 f8 ff ff       	call   c0106521 <page2pa>
c0106c8c:	83 c4 10             	add    $0x10,%esp
c0106c8f:	89 c2                	mov    %eax,%edx
c0106c91:	a1 80 ff 19 c0       	mov    0xc019ff80,%eax
c0106c96:	c1 e0 0c             	shl    $0xc,%eax
c0106c99:	39 c2                	cmp    %eax,%edx
c0106c9b:	72 19                	jb     c0106cb6 <basic_check+0x1c5>
c0106c9d:	68 de d4 10 c0       	push   $0xc010d4de
c0106ca2:	68 8a d3 10 c0       	push   $0xc010d38a
c0106ca7:	68 d9 00 00 00       	push   $0xd9
c0106cac:	68 9f d3 10 c0       	push   $0xc010d39f
c0106cb1:	e8 42 97 ff ff       	call   c01003f8 <__panic>

    list_entry_t free_list_store = free_list;
c0106cb6:	a1 84 21 1a c0       	mov    0xc01a2184,%eax
c0106cbb:	8b 15 88 21 1a c0    	mov    0xc01a2188,%edx
c0106cc1:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0106cc4:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0106cc7:	c7 45 e4 84 21 1a c0 	movl   $0xc01a2184,-0x1c(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0106cce:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106cd1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106cd4:	89 50 04             	mov    %edx,0x4(%eax)
c0106cd7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106cda:	8b 50 04             	mov    0x4(%eax),%edx
c0106cdd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106ce0:	89 10                	mov    %edx,(%eax)
c0106ce2:	c7 45 d8 84 21 1a c0 	movl   $0xc01a2184,-0x28(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0106ce9:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0106cec:	8b 40 04             	mov    0x4(%eax),%eax
c0106cef:	39 45 d8             	cmp    %eax,-0x28(%ebp)
c0106cf2:	0f 94 c0             	sete   %al
c0106cf5:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c0106cf8:	85 c0                	test   %eax,%eax
c0106cfa:	75 19                	jne    c0106d15 <basic_check+0x224>
c0106cfc:	68 fb d4 10 c0       	push   $0xc010d4fb
c0106d01:	68 8a d3 10 c0       	push   $0xc010d38a
c0106d06:	68 dd 00 00 00       	push   $0xdd
c0106d0b:	68 9f d3 10 c0       	push   $0xc010d39f
c0106d10:	e8 e3 96 ff ff       	call   c01003f8 <__panic>

    unsigned int nr_free_store = nr_free;
c0106d15:	a1 8c 21 1a c0       	mov    0xc01a218c,%eax
c0106d1a:	89 45 e0             	mov    %eax,-0x20(%ebp)
    nr_free = 0;
c0106d1d:	c7 05 8c 21 1a c0 00 	movl   $0x0,0xc01a218c
c0106d24:	00 00 00 

    assert(alloc_page() == NULL);
c0106d27:	83 ec 0c             	sub    $0xc,%esp
c0106d2a:	6a 01                	push   $0x1
c0106d2c:	e8 aa 0a 00 00       	call   c01077db <alloc_pages>
c0106d31:	83 c4 10             	add    $0x10,%esp
c0106d34:	85 c0                	test   %eax,%eax
c0106d36:	74 19                	je     c0106d51 <basic_check+0x260>
c0106d38:	68 12 d5 10 c0       	push   $0xc010d512
c0106d3d:	68 8a d3 10 c0       	push   $0xc010d38a
c0106d42:	68 e2 00 00 00       	push   $0xe2
c0106d47:	68 9f d3 10 c0       	push   $0xc010d39f
c0106d4c:	e8 a7 96 ff ff       	call   c01003f8 <__panic>

    free_page(p0);
c0106d51:	83 ec 08             	sub    $0x8,%esp
c0106d54:	6a 01                	push   $0x1
c0106d56:	ff 75 ec             	pushl  -0x14(%ebp)
c0106d59:	e8 e9 0a 00 00       	call   c0107847 <free_pages>
c0106d5e:	83 c4 10             	add    $0x10,%esp
    free_page(p1);
c0106d61:	83 ec 08             	sub    $0x8,%esp
c0106d64:	6a 01                	push   $0x1
c0106d66:	ff 75 f0             	pushl  -0x10(%ebp)
c0106d69:	e8 d9 0a 00 00       	call   c0107847 <free_pages>
c0106d6e:	83 c4 10             	add    $0x10,%esp
    free_page(p2);
c0106d71:	83 ec 08             	sub    $0x8,%esp
c0106d74:	6a 01                	push   $0x1
c0106d76:	ff 75 f4             	pushl  -0xc(%ebp)
c0106d79:	e8 c9 0a 00 00       	call   c0107847 <free_pages>
c0106d7e:	83 c4 10             	add    $0x10,%esp
    assert(nr_free == 3);
c0106d81:	a1 8c 21 1a c0       	mov    0xc01a218c,%eax
c0106d86:	83 f8 03             	cmp    $0x3,%eax
c0106d89:	74 19                	je     c0106da4 <basic_check+0x2b3>
c0106d8b:	68 27 d5 10 c0       	push   $0xc010d527
c0106d90:	68 8a d3 10 c0       	push   $0xc010d38a
c0106d95:	68 e7 00 00 00       	push   $0xe7
c0106d9a:	68 9f d3 10 c0       	push   $0xc010d39f
c0106d9f:	e8 54 96 ff ff       	call   c01003f8 <__panic>

    assert((p0 = alloc_page()) != NULL);
c0106da4:	83 ec 0c             	sub    $0xc,%esp
c0106da7:	6a 01                	push   $0x1
c0106da9:	e8 2d 0a 00 00       	call   c01077db <alloc_pages>
c0106dae:	83 c4 10             	add    $0x10,%esp
c0106db1:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0106db4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0106db8:	75 19                	jne    c0106dd3 <basic_check+0x2e2>
c0106dba:	68 ed d3 10 c0       	push   $0xc010d3ed
c0106dbf:	68 8a d3 10 c0       	push   $0xc010d38a
c0106dc4:	68 e9 00 00 00       	push   $0xe9
c0106dc9:	68 9f d3 10 c0       	push   $0xc010d39f
c0106dce:	e8 25 96 ff ff       	call   c01003f8 <__panic>
    assert((p1 = alloc_page()) != NULL);
c0106dd3:	83 ec 0c             	sub    $0xc,%esp
c0106dd6:	6a 01                	push   $0x1
c0106dd8:	e8 fe 09 00 00       	call   c01077db <alloc_pages>
c0106ddd:	83 c4 10             	add    $0x10,%esp
c0106de0:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106de3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106de7:	75 19                	jne    c0106e02 <basic_check+0x311>
c0106de9:	68 09 d4 10 c0       	push   $0xc010d409
c0106dee:	68 8a d3 10 c0       	push   $0xc010d38a
c0106df3:	68 ea 00 00 00       	push   $0xea
c0106df8:	68 9f d3 10 c0       	push   $0xc010d39f
c0106dfd:	e8 f6 95 ff ff       	call   c01003f8 <__panic>
    assert((p2 = alloc_page()) != NULL);
c0106e02:	83 ec 0c             	sub    $0xc,%esp
c0106e05:	6a 01                	push   $0x1
c0106e07:	e8 cf 09 00 00       	call   c01077db <alloc_pages>
c0106e0c:	83 c4 10             	add    $0x10,%esp
c0106e0f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0106e12:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106e16:	75 19                	jne    c0106e31 <basic_check+0x340>
c0106e18:	68 25 d4 10 c0       	push   $0xc010d425
c0106e1d:	68 8a d3 10 c0       	push   $0xc010d38a
c0106e22:	68 eb 00 00 00       	push   $0xeb
c0106e27:	68 9f d3 10 c0       	push   $0xc010d39f
c0106e2c:	e8 c7 95 ff ff       	call   c01003f8 <__panic>

    assert(alloc_page() == NULL);
c0106e31:	83 ec 0c             	sub    $0xc,%esp
c0106e34:	6a 01                	push   $0x1
c0106e36:	e8 a0 09 00 00       	call   c01077db <alloc_pages>
c0106e3b:	83 c4 10             	add    $0x10,%esp
c0106e3e:	85 c0                	test   %eax,%eax
c0106e40:	74 19                	je     c0106e5b <basic_check+0x36a>
c0106e42:	68 12 d5 10 c0       	push   $0xc010d512
c0106e47:	68 8a d3 10 c0       	push   $0xc010d38a
c0106e4c:	68 ed 00 00 00       	push   $0xed
c0106e51:	68 9f d3 10 c0       	push   $0xc010d39f
c0106e56:	e8 9d 95 ff ff       	call   c01003f8 <__panic>

    free_page(p0);
c0106e5b:	83 ec 08             	sub    $0x8,%esp
c0106e5e:	6a 01                	push   $0x1
c0106e60:	ff 75 ec             	pushl  -0x14(%ebp)
c0106e63:	e8 df 09 00 00       	call   c0107847 <free_pages>
c0106e68:	83 c4 10             	add    $0x10,%esp
c0106e6b:	c7 45 e8 84 21 1a c0 	movl   $0xc01a2184,-0x18(%ebp)
c0106e72:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106e75:	8b 40 04             	mov    0x4(%eax),%eax
c0106e78:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c0106e7b:	0f 94 c0             	sete   %al
c0106e7e:	0f b6 c0             	movzbl %al,%eax
    assert(!list_empty(&free_list));
c0106e81:	85 c0                	test   %eax,%eax
c0106e83:	74 19                	je     c0106e9e <basic_check+0x3ad>
c0106e85:	68 34 d5 10 c0       	push   $0xc010d534
c0106e8a:	68 8a d3 10 c0       	push   $0xc010d38a
c0106e8f:	68 f0 00 00 00       	push   $0xf0
c0106e94:	68 9f d3 10 c0       	push   $0xc010d39f
c0106e99:	e8 5a 95 ff ff       	call   c01003f8 <__panic>

    struct Page *p;
    assert((p = alloc_page()) == p0);
c0106e9e:	83 ec 0c             	sub    $0xc,%esp
c0106ea1:	6a 01                	push   $0x1
c0106ea3:	e8 33 09 00 00       	call   c01077db <alloc_pages>
c0106ea8:	83 c4 10             	add    $0x10,%esp
c0106eab:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0106eae:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106eb1:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0106eb4:	74 19                	je     c0106ecf <basic_check+0x3de>
c0106eb6:	68 4c d5 10 c0       	push   $0xc010d54c
c0106ebb:	68 8a d3 10 c0       	push   $0xc010d38a
c0106ec0:	68 f3 00 00 00       	push   $0xf3
c0106ec5:	68 9f d3 10 c0       	push   $0xc010d39f
c0106eca:	e8 29 95 ff ff       	call   c01003f8 <__panic>
    assert(alloc_page() == NULL);
c0106ecf:	83 ec 0c             	sub    $0xc,%esp
c0106ed2:	6a 01                	push   $0x1
c0106ed4:	e8 02 09 00 00       	call   c01077db <alloc_pages>
c0106ed9:	83 c4 10             	add    $0x10,%esp
c0106edc:	85 c0                	test   %eax,%eax
c0106ede:	74 19                	je     c0106ef9 <basic_check+0x408>
c0106ee0:	68 12 d5 10 c0       	push   $0xc010d512
c0106ee5:	68 8a d3 10 c0       	push   $0xc010d38a
c0106eea:	68 f4 00 00 00       	push   $0xf4
c0106eef:	68 9f d3 10 c0       	push   $0xc010d39f
c0106ef4:	e8 ff 94 ff ff       	call   c01003f8 <__panic>

    assert(nr_free == 0);
c0106ef9:	a1 8c 21 1a c0       	mov    0xc01a218c,%eax
c0106efe:	85 c0                	test   %eax,%eax
c0106f00:	74 19                	je     c0106f1b <basic_check+0x42a>
c0106f02:	68 65 d5 10 c0       	push   $0xc010d565
c0106f07:	68 8a d3 10 c0       	push   $0xc010d38a
c0106f0c:	68 f6 00 00 00       	push   $0xf6
c0106f11:	68 9f d3 10 c0       	push   $0xc010d39f
c0106f16:	e8 dd 94 ff ff       	call   c01003f8 <__panic>
    free_list = free_list_store;
c0106f1b:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0106f1e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0106f21:	a3 84 21 1a c0       	mov    %eax,0xc01a2184
c0106f26:	89 15 88 21 1a c0    	mov    %edx,0xc01a2188
    nr_free = nr_free_store;
c0106f2c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106f2f:	a3 8c 21 1a c0       	mov    %eax,0xc01a218c

    free_page(p);
c0106f34:	83 ec 08             	sub    $0x8,%esp
c0106f37:	6a 01                	push   $0x1
c0106f39:	ff 75 dc             	pushl  -0x24(%ebp)
c0106f3c:	e8 06 09 00 00       	call   c0107847 <free_pages>
c0106f41:	83 c4 10             	add    $0x10,%esp
    free_page(p1);
c0106f44:	83 ec 08             	sub    $0x8,%esp
c0106f47:	6a 01                	push   $0x1
c0106f49:	ff 75 f0             	pushl  -0x10(%ebp)
c0106f4c:	e8 f6 08 00 00       	call   c0107847 <free_pages>
c0106f51:	83 c4 10             	add    $0x10,%esp
    free_page(p2);
c0106f54:	83 ec 08             	sub    $0x8,%esp
c0106f57:	6a 01                	push   $0x1
c0106f59:	ff 75 f4             	pushl  -0xc(%ebp)
c0106f5c:	e8 e6 08 00 00       	call   c0107847 <free_pages>
c0106f61:	83 c4 10             	add    $0x10,%esp
}
c0106f64:	90                   	nop
c0106f65:	c9                   	leave  
c0106f66:	c3                   	ret    

c0106f67 <default_check>:

// LAB2: below code is used to check the first fit allocation algorithm (your EXERCISE 1) 
// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
static void
default_check(void) {
c0106f67:	55                   	push   %ebp
c0106f68:	89 e5                	mov    %esp,%ebp
c0106f6a:	81 ec 88 00 00 00    	sub    $0x88,%esp
    int count = 0, total = 0;
c0106f70:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0106f77:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    list_entry_t *le = &free_list;
c0106f7e:	c7 45 ec 84 21 1a c0 	movl   $0xc01a2184,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c0106f85:	eb 60                	jmp    c0106fe7 <default_check+0x80>
        struct Page *p = le2page(le, page_link);
c0106f87:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106f8a:	83 e8 0c             	sub    $0xc,%eax
c0106f8d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        assert(PageProperty(p));
c0106f90:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106f93:	83 c0 04             	add    $0x4,%eax
c0106f96:	c7 45 b0 01 00 00 00 	movl   $0x1,-0x50(%ebp)
c0106f9d:	89 45 ac             	mov    %eax,-0x54(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0106fa0:	8b 45 ac             	mov    -0x54(%ebp),%eax
c0106fa3:	8b 55 b0             	mov    -0x50(%ebp),%edx
c0106fa6:	0f a3 10             	bt     %edx,(%eax)
c0106fa9:	19 c0                	sbb    %eax,%eax
c0106fab:	89 45 a8             	mov    %eax,-0x58(%ebp)
    return oldbit != 0;
c0106fae:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
c0106fb2:	0f 95 c0             	setne  %al
c0106fb5:	0f b6 c0             	movzbl %al,%eax
c0106fb8:	85 c0                	test   %eax,%eax
c0106fba:	75 19                	jne    c0106fd5 <default_check+0x6e>
c0106fbc:	68 72 d5 10 c0       	push   $0xc010d572
c0106fc1:	68 8a d3 10 c0       	push   $0xc010d38a
c0106fc6:	68 07 01 00 00       	push   $0x107
c0106fcb:	68 9f d3 10 c0       	push   $0xc010d39f
c0106fd0:	e8 23 94 ff ff       	call   c01003f8 <__panic>
        count ++, total += p->property;
c0106fd5:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0106fd9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106fdc:	8b 50 08             	mov    0x8(%eax),%edx
c0106fdf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106fe2:	01 d0                	add    %edx,%eax
c0106fe4:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106fe7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106fea:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0106fed:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106ff0:	8b 40 04             	mov    0x4(%eax),%eax
// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
static void
default_check(void) {
    int count = 0, total = 0;
    list_entry_t *le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c0106ff3:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0106ff6:	81 7d ec 84 21 1a c0 	cmpl   $0xc01a2184,-0x14(%ebp)
c0106ffd:	75 88                	jne    c0106f87 <default_check+0x20>
        struct Page *p = le2page(le, page_link);
        assert(PageProperty(p));
        count ++, total += p->property;
    }
    assert(total == nr_free_pages());
c0106fff:	e8 78 08 00 00       	call   c010787c <nr_free_pages>
c0107004:	89 c2                	mov    %eax,%edx
c0107006:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107009:	39 c2                	cmp    %eax,%edx
c010700b:	74 19                	je     c0107026 <default_check+0xbf>
c010700d:	68 82 d5 10 c0       	push   $0xc010d582
c0107012:	68 8a d3 10 c0       	push   $0xc010d38a
c0107017:	68 0a 01 00 00       	push   $0x10a
c010701c:	68 9f d3 10 c0       	push   $0xc010d39f
c0107021:	e8 d2 93 ff ff       	call   c01003f8 <__panic>

    basic_check();
c0107026:	e8 c6 fa ff ff       	call   c0106af1 <basic_check>

    struct Page *p0 = alloc_pages(5), *p1, *p2;
c010702b:	83 ec 0c             	sub    $0xc,%esp
c010702e:	6a 05                	push   $0x5
c0107030:	e8 a6 07 00 00       	call   c01077db <alloc_pages>
c0107035:	83 c4 10             	add    $0x10,%esp
c0107038:	89 45 dc             	mov    %eax,-0x24(%ebp)
    assert(p0 != NULL);
c010703b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010703f:	75 19                	jne    c010705a <default_check+0xf3>
c0107041:	68 9b d5 10 c0       	push   $0xc010d59b
c0107046:	68 8a d3 10 c0       	push   $0xc010d38a
c010704b:	68 0f 01 00 00       	push   $0x10f
c0107050:	68 9f d3 10 c0       	push   $0xc010d39f
c0107055:	e8 9e 93 ff ff       	call   c01003f8 <__panic>
    assert(!PageProperty(p0));
c010705a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010705d:	83 c0 04             	add    $0x4,%eax
c0107060:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
c0107067:	89 45 a4             	mov    %eax,-0x5c(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010706a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c010706d:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0107070:	0f a3 10             	bt     %edx,(%eax)
c0107073:	19 c0                	sbb    %eax,%eax
c0107075:	89 45 a0             	mov    %eax,-0x60(%ebp)
    return oldbit != 0;
c0107078:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
c010707c:	0f 95 c0             	setne  %al
c010707f:	0f b6 c0             	movzbl %al,%eax
c0107082:	85 c0                	test   %eax,%eax
c0107084:	74 19                	je     c010709f <default_check+0x138>
c0107086:	68 a6 d5 10 c0       	push   $0xc010d5a6
c010708b:	68 8a d3 10 c0       	push   $0xc010d38a
c0107090:	68 10 01 00 00       	push   $0x110
c0107095:	68 9f d3 10 c0       	push   $0xc010d39f
c010709a:	e8 59 93 ff ff       	call   c01003f8 <__panic>

    list_entry_t free_list_store = free_list;
c010709f:	a1 84 21 1a c0       	mov    0xc01a2184,%eax
c01070a4:	8b 15 88 21 1a c0    	mov    0xc01a2188,%edx
c01070aa:	89 45 80             	mov    %eax,-0x80(%ebp)
c01070ad:	89 55 84             	mov    %edx,-0x7c(%ebp)
c01070b0:	c7 45 d0 84 21 1a c0 	movl   $0xc01a2184,-0x30(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c01070b7:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01070ba:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01070bd:	89 50 04             	mov    %edx,0x4(%eax)
c01070c0:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01070c3:	8b 50 04             	mov    0x4(%eax),%edx
c01070c6:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01070c9:	89 10                	mov    %edx,(%eax)
c01070cb:	c7 45 d8 84 21 1a c0 	movl   $0xc01a2184,-0x28(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c01070d2:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01070d5:	8b 40 04             	mov    0x4(%eax),%eax
c01070d8:	39 45 d8             	cmp    %eax,-0x28(%ebp)
c01070db:	0f 94 c0             	sete   %al
c01070de:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c01070e1:	85 c0                	test   %eax,%eax
c01070e3:	75 19                	jne    c01070fe <default_check+0x197>
c01070e5:	68 fb d4 10 c0       	push   $0xc010d4fb
c01070ea:	68 8a d3 10 c0       	push   $0xc010d38a
c01070ef:	68 14 01 00 00       	push   $0x114
c01070f4:	68 9f d3 10 c0       	push   $0xc010d39f
c01070f9:	e8 fa 92 ff ff       	call   c01003f8 <__panic>
    assert(alloc_page() == NULL);
c01070fe:	83 ec 0c             	sub    $0xc,%esp
c0107101:	6a 01                	push   $0x1
c0107103:	e8 d3 06 00 00       	call   c01077db <alloc_pages>
c0107108:	83 c4 10             	add    $0x10,%esp
c010710b:	85 c0                	test   %eax,%eax
c010710d:	74 19                	je     c0107128 <default_check+0x1c1>
c010710f:	68 12 d5 10 c0       	push   $0xc010d512
c0107114:	68 8a d3 10 c0       	push   $0xc010d38a
c0107119:	68 15 01 00 00       	push   $0x115
c010711e:	68 9f d3 10 c0       	push   $0xc010d39f
c0107123:	e8 d0 92 ff ff       	call   c01003f8 <__panic>

    unsigned int nr_free_store = nr_free;
c0107128:	a1 8c 21 1a c0       	mov    0xc01a218c,%eax
c010712d:	89 45 cc             	mov    %eax,-0x34(%ebp)
    nr_free = 0;
c0107130:	c7 05 8c 21 1a c0 00 	movl   $0x0,0xc01a218c
c0107137:	00 00 00 

    free_pages(p0 + 2, 3);
c010713a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010713d:	83 c0 40             	add    $0x40,%eax
c0107140:	83 ec 08             	sub    $0x8,%esp
c0107143:	6a 03                	push   $0x3
c0107145:	50                   	push   %eax
c0107146:	e8 fc 06 00 00       	call   c0107847 <free_pages>
c010714b:	83 c4 10             	add    $0x10,%esp
    assert(alloc_pages(4) == NULL);
c010714e:	83 ec 0c             	sub    $0xc,%esp
c0107151:	6a 04                	push   $0x4
c0107153:	e8 83 06 00 00       	call   c01077db <alloc_pages>
c0107158:	83 c4 10             	add    $0x10,%esp
c010715b:	85 c0                	test   %eax,%eax
c010715d:	74 19                	je     c0107178 <default_check+0x211>
c010715f:	68 b8 d5 10 c0       	push   $0xc010d5b8
c0107164:	68 8a d3 10 c0       	push   $0xc010d38a
c0107169:	68 1b 01 00 00       	push   $0x11b
c010716e:	68 9f d3 10 c0       	push   $0xc010d39f
c0107173:	e8 80 92 ff ff       	call   c01003f8 <__panic>
    assert(PageProperty(p0 + 2) && p0[2].property == 3);
c0107178:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010717b:	83 c0 40             	add    $0x40,%eax
c010717e:	83 c0 04             	add    $0x4,%eax
c0107181:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
c0107188:	89 45 9c             	mov    %eax,-0x64(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010718b:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010718e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0107191:	0f a3 10             	bt     %edx,(%eax)
c0107194:	19 c0                	sbb    %eax,%eax
c0107196:	89 45 98             	mov    %eax,-0x68(%ebp)
    return oldbit != 0;
c0107199:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
c010719d:	0f 95 c0             	setne  %al
c01071a0:	0f b6 c0             	movzbl %al,%eax
c01071a3:	85 c0                	test   %eax,%eax
c01071a5:	74 0e                	je     c01071b5 <default_check+0x24e>
c01071a7:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01071aa:	83 c0 40             	add    $0x40,%eax
c01071ad:	8b 40 08             	mov    0x8(%eax),%eax
c01071b0:	83 f8 03             	cmp    $0x3,%eax
c01071b3:	74 19                	je     c01071ce <default_check+0x267>
c01071b5:	68 d0 d5 10 c0       	push   $0xc010d5d0
c01071ba:	68 8a d3 10 c0       	push   $0xc010d38a
c01071bf:	68 1c 01 00 00       	push   $0x11c
c01071c4:	68 9f d3 10 c0       	push   $0xc010d39f
c01071c9:	e8 2a 92 ff ff       	call   c01003f8 <__panic>
    assert((p1 = alloc_pages(3)) != NULL);
c01071ce:	83 ec 0c             	sub    $0xc,%esp
c01071d1:	6a 03                	push   $0x3
c01071d3:	e8 03 06 00 00       	call   c01077db <alloc_pages>
c01071d8:	83 c4 10             	add    $0x10,%esp
c01071db:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c01071de:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
c01071e2:	75 19                	jne    c01071fd <default_check+0x296>
c01071e4:	68 fc d5 10 c0       	push   $0xc010d5fc
c01071e9:	68 8a d3 10 c0       	push   $0xc010d38a
c01071ee:	68 1d 01 00 00       	push   $0x11d
c01071f3:	68 9f d3 10 c0       	push   $0xc010d39f
c01071f8:	e8 fb 91 ff ff       	call   c01003f8 <__panic>
    assert(alloc_page() == NULL);
c01071fd:	83 ec 0c             	sub    $0xc,%esp
c0107200:	6a 01                	push   $0x1
c0107202:	e8 d4 05 00 00       	call   c01077db <alloc_pages>
c0107207:	83 c4 10             	add    $0x10,%esp
c010720a:	85 c0                	test   %eax,%eax
c010720c:	74 19                	je     c0107227 <default_check+0x2c0>
c010720e:	68 12 d5 10 c0       	push   $0xc010d512
c0107213:	68 8a d3 10 c0       	push   $0xc010d38a
c0107218:	68 1e 01 00 00       	push   $0x11e
c010721d:	68 9f d3 10 c0       	push   $0xc010d39f
c0107222:	e8 d1 91 ff ff       	call   c01003f8 <__panic>
    assert(p0 + 2 == p1);
c0107227:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010722a:	83 c0 40             	add    $0x40,%eax
c010722d:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
c0107230:	74 19                	je     c010724b <default_check+0x2e4>
c0107232:	68 1a d6 10 c0       	push   $0xc010d61a
c0107237:	68 8a d3 10 c0       	push   $0xc010d38a
c010723c:	68 1f 01 00 00       	push   $0x11f
c0107241:	68 9f d3 10 c0       	push   $0xc010d39f
c0107246:	e8 ad 91 ff ff       	call   c01003f8 <__panic>

    p2 = p0 + 1;
c010724b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010724e:	83 c0 20             	add    $0x20,%eax
c0107251:	89 45 c0             	mov    %eax,-0x40(%ebp)
    free_page(p0);
c0107254:	83 ec 08             	sub    $0x8,%esp
c0107257:	6a 01                	push   $0x1
c0107259:	ff 75 dc             	pushl  -0x24(%ebp)
c010725c:	e8 e6 05 00 00       	call   c0107847 <free_pages>
c0107261:	83 c4 10             	add    $0x10,%esp
    free_pages(p1, 3);
c0107264:	83 ec 08             	sub    $0x8,%esp
c0107267:	6a 03                	push   $0x3
c0107269:	ff 75 c4             	pushl  -0x3c(%ebp)
c010726c:	e8 d6 05 00 00       	call   c0107847 <free_pages>
c0107271:	83 c4 10             	add    $0x10,%esp
    assert(PageProperty(p0) && p0->property == 1);
c0107274:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107277:	83 c0 04             	add    $0x4,%eax
c010727a:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
c0107281:	89 45 94             	mov    %eax,-0x6c(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0107284:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0107287:	8b 55 c8             	mov    -0x38(%ebp),%edx
c010728a:	0f a3 10             	bt     %edx,(%eax)
c010728d:	19 c0                	sbb    %eax,%eax
c010728f:	89 45 90             	mov    %eax,-0x70(%ebp)
    return oldbit != 0;
c0107292:	83 7d 90 00          	cmpl   $0x0,-0x70(%ebp)
c0107296:	0f 95 c0             	setne  %al
c0107299:	0f b6 c0             	movzbl %al,%eax
c010729c:	85 c0                	test   %eax,%eax
c010729e:	74 0b                	je     c01072ab <default_check+0x344>
c01072a0:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01072a3:	8b 40 08             	mov    0x8(%eax),%eax
c01072a6:	83 f8 01             	cmp    $0x1,%eax
c01072a9:	74 19                	je     c01072c4 <default_check+0x35d>
c01072ab:	68 28 d6 10 c0       	push   $0xc010d628
c01072b0:	68 8a d3 10 c0       	push   $0xc010d38a
c01072b5:	68 24 01 00 00       	push   $0x124
c01072ba:	68 9f d3 10 c0       	push   $0xc010d39f
c01072bf:	e8 34 91 ff ff       	call   c01003f8 <__panic>
    assert(PageProperty(p1) && p1->property == 3);
c01072c4:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01072c7:	83 c0 04             	add    $0x4,%eax
c01072ca:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
c01072d1:	89 45 8c             	mov    %eax,-0x74(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01072d4:	8b 45 8c             	mov    -0x74(%ebp),%eax
c01072d7:	8b 55 bc             	mov    -0x44(%ebp),%edx
c01072da:	0f a3 10             	bt     %edx,(%eax)
c01072dd:	19 c0                	sbb    %eax,%eax
c01072df:	89 45 88             	mov    %eax,-0x78(%ebp)
    return oldbit != 0;
c01072e2:	83 7d 88 00          	cmpl   $0x0,-0x78(%ebp)
c01072e6:	0f 95 c0             	setne  %al
c01072e9:	0f b6 c0             	movzbl %al,%eax
c01072ec:	85 c0                	test   %eax,%eax
c01072ee:	74 0b                	je     c01072fb <default_check+0x394>
c01072f0:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01072f3:	8b 40 08             	mov    0x8(%eax),%eax
c01072f6:	83 f8 03             	cmp    $0x3,%eax
c01072f9:	74 19                	je     c0107314 <default_check+0x3ad>
c01072fb:	68 50 d6 10 c0       	push   $0xc010d650
c0107300:	68 8a d3 10 c0       	push   $0xc010d38a
c0107305:	68 25 01 00 00       	push   $0x125
c010730a:	68 9f d3 10 c0       	push   $0xc010d39f
c010730f:	e8 e4 90 ff ff       	call   c01003f8 <__panic>

    assert((p0 = alloc_page()) == p2 - 1);
c0107314:	83 ec 0c             	sub    $0xc,%esp
c0107317:	6a 01                	push   $0x1
c0107319:	e8 bd 04 00 00       	call   c01077db <alloc_pages>
c010731e:	83 c4 10             	add    $0x10,%esp
c0107321:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0107324:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0107327:	83 e8 20             	sub    $0x20,%eax
c010732a:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c010732d:	74 19                	je     c0107348 <default_check+0x3e1>
c010732f:	68 76 d6 10 c0       	push   $0xc010d676
c0107334:	68 8a d3 10 c0       	push   $0xc010d38a
c0107339:	68 27 01 00 00       	push   $0x127
c010733e:	68 9f d3 10 c0       	push   $0xc010d39f
c0107343:	e8 b0 90 ff ff       	call   c01003f8 <__panic>
    free_page(p0);
c0107348:	83 ec 08             	sub    $0x8,%esp
c010734b:	6a 01                	push   $0x1
c010734d:	ff 75 dc             	pushl  -0x24(%ebp)
c0107350:	e8 f2 04 00 00       	call   c0107847 <free_pages>
c0107355:	83 c4 10             	add    $0x10,%esp
    assert((p0 = alloc_pages(2)) == p2 + 1);
c0107358:	83 ec 0c             	sub    $0xc,%esp
c010735b:	6a 02                	push   $0x2
c010735d:	e8 79 04 00 00       	call   c01077db <alloc_pages>
c0107362:	83 c4 10             	add    $0x10,%esp
c0107365:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0107368:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010736b:	83 c0 20             	add    $0x20,%eax
c010736e:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c0107371:	74 19                	je     c010738c <default_check+0x425>
c0107373:	68 94 d6 10 c0       	push   $0xc010d694
c0107378:	68 8a d3 10 c0       	push   $0xc010d38a
c010737d:	68 29 01 00 00       	push   $0x129
c0107382:	68 9f d3 10 c0       	push   $0xc010d39f
c0107387:	e8 6c 90 ff ff       	call   c01003f8 <__panic>

    free_pages(p0, 2);
c010738c:	83 ec 08             	sub    $0x8,%esp
c010738f:	6a 02                	push   $0x2
c0107391:	ff 75 dc             	pushl  -0x24(%ebp)
c0107394:	e8 ae 04 00 00       	call   c0107847 <free_pages>
c0107399:	83 c4 10             	add    $0x10,%esp
    free_page(p2);
c010739c:	83 ec 08             	sub    $0x8,%esp
c010739f:	6a 01                	push   $0x1
c01073a1:	ff 75 c0             	pushl  -0x40(%ebp)
c01073a4:	e8 9e 04 00 00       	call   c0107847 <free_pages>
c01073a9:	83 c4 10             	add    $0x10,%esp

    assert((p0 = alloc_pages(5)) != NULL);
c01073ac:	83 ec 0c             	sub    $0xc,%esp
c01073af:	6a 05                	push   $0x5
c01073b1:	e8 25 04 00 00       	call   c01077db <alloc_pages>
c01073b6:	83 c4 10             	add    $0x10,%esp
c01073b9:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01073bc:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c01073c0:	75 19                	jne    c01073db <default_check+0x474>
c01073c2:	68 b4 d6 10 c0       	push   $0xc010d6b4
c01073c7:	68 8a d3 10 c0       	push   $0xc010d38a
c01073cc:	68 2e 01 00 00       	push   $0x12e
c01073d1:	68 9f d3 10 c0       	push   $0xc010d39f
c01073d6:	e8 1d 90 ff ff       	call   c01003f8 <__panic>
    assert(alloc_page() == NULL);
c01073db:	83 ec 0c             	sub    $0xc,%esp
c01073de:	6a 01                	push   $0x1
c01073e0:	e8 f6 03 00 00       	call   c01077db <alloc_pages>
c01073e5:	83 c4 10             	add    $0x10,%esp
c01073e8:	85 c0                	test   %eax,%eax
c01073ea:	74 19                	je     c0107405 <default_check+0x49e>
c01073ec:	68 12 d5 10 c0       	push   $0xc010d512
c01073f1:	68 8a d3 10 c0       	push   $0xc010d38a
c01073f6:	68 2f 01 00 00       	push   $0x12f
c01073fb:	68 9f d3 10 c0       	push   $0xc010d39f
c0107400:	e8 f3 8f ff ff       	call   c01003f8 <__panic>

    assert(nr_free == 0);
c0107405:	a1 8c 21 1a c0       	mov    0xc01a218c,%eax
c010740a:	85 c0                	test   %eax,%eax
c010740c:	74 19                	je     c0107427 <default_check+0x4c0>
c010740e:	68 65 d5 10 c0       	push   $0xc010d565
c0107413:	68 8a d3 10 c0       	push   $0xc010d38a
c0107418:	68 31 01 00 00       	push   $0x131
c010741d:	68 9f d3 10 c0       	push   $0xc010d39f
c0107422:	e8 d1 8f ff ff       	call   c01003f8 <__panic>
    nr_free = nr_free_store;
c0107427:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010742a:	a3 8c 21 1a c0       	mov    %eax,0xc01a218c

    free_list = free_list_store;
c010742f:	8b 45 80             	mov    -0x80(%ebp),%eax
c0107432:	8b 55 84             	mov    -0x7c(%ebp),%edx
c0107435:	a3 84 21 1a c0       	mov    %eax,0xc01a2184
c010743a:	89 15 88 21 1a c0    	mov    %edx,0xc01a2188
    free_pages(p0, 5);
c0107440:	83 ec 08             	sub    $0x8,%esp
c0107443:	6a 05                	push   $0x5
c0107445:	ff 75 dc             	pushl  -0x24(%ebp)
c0107448:	e8 fa 03 00 00       	call   c0107847 <free_pages>
c010744d:	83 c4 10             	add    $0x10,%esp

    le = &free_list;
c0107450:	c7 45 ec 84 21 1a c0 	movl   $0xc01a2184,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c0107457:	eb 1d                	jmp    c0107476 <default_check+0x50f>
        struct Page *p = le2page(le, page_link);
c0107459:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010745c:	83 e8 0c             	sub    $0xc,%eax
c010745f:	89 45 b4             	mov    %eax,-0x4c(%ebp)
        count --, total -= p->property;
c0107462:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0107466:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0107469:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010746c:	8b 40 08             	mov    0x8(%eax),%eax
c010746f:	29 c2                	sub    %eax,%edx
c0107471:	89 d0                	mov    %edx,%eax
c0107473:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107476:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107479:	89 45 b8             	mov    %eax,-0x48(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010747c:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010747f:	8b 40 04             	mov    0x4(%eax),%eax

    free_list = free_list_store;
    free_pages(p0, 5);

    le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c0107482:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0107485:	81 7d ec 84 21 1a c0 	cmpl   $0xc01a2184,-0x14(%ebp)
c010748c:	75 cb                	jne    c0107459 <default_check+0x4f2>
        struct Page *p = le2page(le, page_link);
        count --, total -= p->property;
    }
    assert(count == 0);
c010748e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107492:	74 19                	je     c01074ad <default_check+0x546>
c0107494:	68 d2 d6 10 c0       	push   $0xc010d6d2
c0107499:	68 8a d3 10 c0       	push   $0xc010d38a
c010749e:	68 3c 01 00 00       	push   $0x13c
c01074a3:	68 9f d3 10 c0       	push   $0xc010d39f
c01074a8:	e8 4b 8f ff ff       	call   c01003f8 <__panic>
    assert(total == 0);
c01074ad:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01074b1:	74 19                	je     c01074cc <default_check+0x565>
c01074b3:	68 dd d6 10 c0       	push   $0xc010d6dd
c01074b8:	68 8a d3 10 c0       	push   $0xc010d38a
c01074bd:	68 3d 01 00 00       	push   $0x13d
c01074c2:	68 9f d3 10 c0       	push   $0xc010d39f
c01074c7:	e8 2c 8f ff ff       	call   c01003f8 <__panic>
}
c01074cc:	90                   	nop
c01074cd:	c9                   	leave  
c01074ce:	c3                   	ret    

c01074cf <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c01074cf:	55                   	push   %ebp
c01074d0:	89 e5                	mov    %esp,%ebp
    return page - pages;
c01074d2:	8b 45 08             	mov    0x8(%ebp),%eax
c01074d5:	8b 15 98 21 1a c0    	mov    0xc01a2198,%edx
c01074db:	29 d0                	sub    %edx,%eax
c01074dd:	c1 f8 05             	sar    $0x5,%eax
}
c01074e0:	5d                   	pop    %ebp
c01074e1:	c3                   	ret    

c01074e2 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c01074e2:	55                   	push   %ebp
c01074e3:	89 e5                	mov    %esp,%ebp
    return page2ppn(page) << PGSHIFT;
c01074e5:	ff 75 08             	pushl  0x8(%ebp)
c01074e8:	e8 e2 ff ff ff       	call   c01074cf <page2ppn>
c01074ed:	83 c4 04             	add    $0x4,%esp
c01074f0:	c1 e0 0c             	shl    $0xc,%eax
}
c01074f3:	c9                   	leave  
c01074f4:	c3                   	ret    

c01074f5 <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c01074f5:	55                   	push   %ebp
c01074f6:	89 e5                	mov    %esp,%ebp
c01074f8:	83 ec 08             	sub    $0x8,%esp
    if (PPN(pa) >= npage) {
c01074fb:	8b 45 08             	mov    0x8(%ebp),%eax
c01074fe:	c1 e8 0c             	shr    $0xc,%eax
c0107501:	89 c2                	mov    %eax,%edx
c0107503:	a1 80 ff 19 c0       	mov    0xc019ff80,%eax
c0107508:	39 c2                	cmp    %eax,%edx
c010750a:	72 14                	jb     c0107520 <pa2page+0x2b>
        panic("pa2page called with invalid pa");
c010750c:	83 ec 04             	sub    $0x4,%esp
c010750f:	68 18 d7 10 c0       	push   $0xc010d718
c0107514:	6a 5e                	push   $0x5e
c0107516:	68 37 d7 10 c0       	push   $0xc010d737
c010751b:	e8 d8 8e ff ff       	call   c01003f8 <__panic>
    }
    return &pages[PPN(pa)];
c0107520:	a1 98 21 1a c0       	mov    0xc01a2198,%eax
c0107525:	8b 55 08             	mov    0x8(%ebp),%edx
c0107528:	c1 ea 0c             	shr    $0xc,%edx
c010752b:	c1 e2 05             	shl    $0x5,%edx
c010752e:	01 d0                	add    %edx,%eax
}
c0107530:	c9                   	leave  
c0107531:	c3                   	ret    

c0107532 <page2kva>:

static inline void *
page2kva(struct Page *page) {
c0107532:	55                   	push   %ebp
c0107533:	89 e5                	mov    %esp,%ebp
c0107535:	83 ec 18             	sub    $0x18,%esp
    return KADDR(page2pa(page));
c0107538:	ff 75 08             	pushl  0x8(%ebp)
c010753b:	e8 a2 ff ff ff       	call   c01074e2 <page2pa>
c0107540:	83 c4 04             	add    $0x4,%esp
c0107543:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0107546:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107549:	c1 e8 0c             	shr    $0xc,%eax
c010754c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010754f:	a1 80 ff 19 c0       	mov    0xc019ff80,%eax
c0107554:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0107557:	72 14                	jb     c010756d <page2kva+0x3b>
c0107559:	ff 75 f4             	pushl  -0xc(%ebp)
c010755c:	68 48 d7 10 c0       	push   $0xc010d748
c0107561:	6a 65                	push   $0x65
c0107563:	68 37 d7 10 c0       	push   $0xc010d737
c0107568:	e8 8b 8e ff ff       	call   c01003f8 <__panic>
c010756d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107570:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c0107575:	c9                   	leave  
c0107576:	c3                   	ret    

c0107577 <pte2page>:
kva2page(void *kva) {
    return pa2page(PADDR(kva));
}

static inline struct Page *
pte2page(pte_t pte) {
c0107577:	55                   	push   %ebp
c0107578:	89 e5                	mov    %esp,%ebp
c010757a:	83 ec 08             	sub    $0x8,%esp
    if (!(pte & PTE_P)) {
c010757d:	8b 45 08             	mov    0x8(%ebp),%eax
c0107580:	83 e0 01             	and    $0x1,%eax
c0107583:	85 c0                	test   %eax,%eax
c0107585:	75 14                	jne    c010759b <pte2page+0x24>
        panic("pte2page called with invalid pte");
c0107587:	83 ec 04             	sub    $0x4,%esp
c010758a:	68 6c d7 10 c0       	push   $0xc010d76c
c010758f:	6a 70                	push   $0x70
c0107591:	68 37 d7 10 c0       	push   $0xc010d737
c0107596:	e8 5d 8e ff ff       	call   c01003f8 <__panic>
    }
    return pa2page(PTE_ADDR(pte));
c010759b:	8b 45 08             	mov    0x8(%ebp),%eax
c010759e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01075a3:	83 ec 0c             	sub    $0xc,%esp
c01075a6:	50                   	push   %eax
c01075a7:	e8 49 ff ff ff       	call   c01074f5 <pa2page>
c01075ac:	83 c4 10             	add    $0x10,%esp
}
c01075af:	c9                   	leave  
c01075b0:	c3                   	ret    

c01075b1 <pde2page>:

static inline struct Page *
pde2page(pde_t pde) {
c01075b1:	55                   	push   %ebp
c01075b2:	89 e5                	mov    %esp,%ebp
c01075b4:	83 ec 08             	sub    $0x8,%esp
    return pa2page(PDE_ADDR(pde));
c01075b7:	8b 45 08             	mov    0x8(%ebp),%eax
c01075ba:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01075bf:	83 ec 0c             	sub    $0xc,%esp
c01075c2:	50                   	push   %eax
c01075c3:	e8 2d ff ff ff       	call   c01074f5 <pa2page>
c01075c8:	83 c4 10             	add    $0x10,%esp
}
c01075cb:	c9                   	leave  
c01075cc:	c3                   	ret    

c01075cd <page_ref>:

static inline int
page_ref(struct Page *page) {
c01075cd:	55                   	push   %ebp
c01075ce:	89 e5                	mov    %esp,%ebp
    return page->ref;
c01075d0:	8b 45 08             	mov    0x8(%ebp),%eax
c01075d3:	8b 00                	mov    (%eax),%eax
}
c01075d5:	5d                   	pop    %ebp
c01075d6:	c3                   	ret    

c01075d7 <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c01075d7:	55                   	push   %ebp
c01075d8:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c01075da:	8b 45 08             	mov    0x8(%ebp),%eax
c01075dd:	8b 55 0c             	mov    0xc(%ebp),%edx
c01075e0:	89 10                	mov    %edx,(%eax)
}
c01075e2:	90                   	nop
c01075e3:	5d                   	pop    %ebp
c01075e4:	c3                   	ret    

c01075e5 <page_ref_inc>:

static inline int
page_ref_inc(struct Page *page) {
c01075e5:	55                   	push   %ebp
c01075e6:	89 e5                	mov    %esp,%ebp
    page->ref += 1;
c01075e8:	8b 45 08             	mov    0x8(%ebp),%eax
c01075eb:	8b 00                	mov    (%eax),%eax
c01075ed:	8d 50 01             	lea    0x1(%eax),%edx
c01075f0:	8b 45 08             	mov    0x8(%ebp),%eax
c01075f3:	89 10                	mov    %edx,(%eax)
    return page->ref;
c01075f5:	8b 45 08             	mov    0x8(%ebp),%eax
c01075f8:	8b 00                	mov    (%eax),%eax
}
c01075fa:	5d                   	pop    %ebp
c01075fb:	c3                   	ret    

c01075fc <page_ref_dec>:

static inline int
page_ref_dec(struct Page *page) {
c01075fc:	55                   	push   %ebp
c01075fd:	89 e5                	mov    %esp,%ebp
    page->ref -= 1;
c01075ff:	8b 45 08             	mov    0x8(%ebp),%eax
c0107602:	8b 00                	mov    (%eax),%eax
c0107604:	8d 50 ff             	lea    -0x1(%eax),%edx
c0107607:	8b 45 08             	mov    0x8(%ebp),%eax
c010760a:	89 10                	mov    %edx,(%eax)
    return page->ref;
c010760c:	8b 45 08             	mov    0x8(%ebp),%eax
c010760f:	8b 00                	mov    (%eax),%eax
}
c0107611:	5d                   	pop    %ebp
c0107612:	c3                   	ret    

c0107613 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0107613:	55                   	push   %ebp
c0107614:	89 e5                	mov    %esp,%ebp
c0107616:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0107619:	9c                   	pushf  
c010761a:	58                   	pop    %eax
c010761b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010761e:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0107621:	25 00 02 00 00       	and    $0x200,%eax
c0107626:	85 c0                	test   %eax,%eax
c0107628:	74 0c                	je     c0107636 <__intr_save+0x23>
        intr_disable();
c010762a:	e8 88 ab ff ff       	call   c01021b7 <intr_disable>
        return 1;
c010762f:	b8 01 00 00 00       	mov    $0x1,%eax
c0107634:	eb 05                	jmp    c010763b <__intr_save+0x28>
    }
    return 0;
c0107636:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010763b:	c9                   	leave  
c010763c:	c3                   	ret    

c010763d <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010763d:	55                   	push   %ebp
c010763e:	89 e5                	mov    %esp,%ebp
c0107640:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0107643:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0107647:	74 05                	je     c010764e <__intr_restore+0x11>
        intr_enable();
c0107649:	e8 62 ab ff ff       	call   c01021b0 <intr_enable>
    }
}
c010764e:	90                   	nop
c010764f:	c9                   	leave  
c0107650:	c3                   	ret    

c0107651 <lgdt>:
/* *
 * lgdt - load the global descriptor table register and reset the
 * data/code segement registers for kernel.
 * */
static inline void
lgdt(struct pseudodesc *pd) {
c0107651:	55                   	push   %ebp
c0107652:	89 e5                	mov    %esp,%ebp
    asm volatile ("lgdt (%0)" :: "r" (pd));
c0107654:	8b 45 08             	mov    0x8(%ebp),%eax
c0107657:	0f 01 10             	lgdtl  (%eax)
    asm volatile ("movw %%ax, %%gs" :: "a" (USER_DS));
c010765a:	b8 23 00 00 00       	mov    $0x23,%eax
c010765f:	8e e8                	mov    %eax,%gs
    asm volatile ("movw %%ax, %%fs" :: "a" (USER_DS));
c0107661:	b8 23 00 00 00       	mov    $0x23,%eax
c0107666:	8e e0                	mov    %eax,%fs
    asm volatile ("movw %%ax, %%es" :: "a" (KERNEL_DS));
c0107668:	b8 10 00 00 00       	mov    $0x10,%eax
c010766d:	8e c0                	mov    %eax,%es
    asm volatile ("movw %%ax, %%ds" :: "a" (KERNEL_DS));
c010766f:	b8 10 00 00 00       	mov    $0x10,%eax
c0107674:	8e d8                	mov    %eax,%ds
    asm volatile ("movw %%ax, %%ss" :: "a" (KERNEL_DS));
c0107676:	b8 10 00 00 00       	mov    $0x10,%eax
c010767b:	8e d0                	mov    %eax,%ss
    // reload cs
    asm volatile ("ljmp %0, $1f\n 1:\n" :: "i" (KERNEL_CS));
c010767d:	ea 84 76 10 c0 08 00 	ljmp   $0x8,$0xc0107684
}
c0107684:	90                   	nop
c0107685:	5d                   	pop    %ebp
c0107686:	c3                   	ret    

c0107687 <load_esp0>:
 * load_esp0 - change the ESP0 in default task state segment,
 * so that we can use different kernel stack when we trap frame
 * user to kernel.
 * */
void
load_esp0(uintptr_t esp0) {
c0107687:	55                   	push   %ebp
c0107688:	89 e5                	mov    %esp,%ebp
    ts.ts_esp0 = esp0;
c010768a:	8b 45 08             	mov    0x8(%ebp),%eax
c010768d:	a3 a4 ff 19 c0       	mov    %eax,0xc019ffa4
}
c0107692:	90                   	nop
c0107693:	5d                   	pop    %ebp
c0107694:	c3                   	ret    

c0107695 <gdt_init>:

/* gdt_init - initialize the default GDT and TSS */
static void
gdt_init(void) {
c0107695:	55                   	push   %ebp
c0107696:	89 e5                	mov    %esp,%ebp
c0107698:	83 ec 10             	sub    $0x10,%esp
    // set boot kernel stack and default SS0
    load_esp0((uintptr_t)bootstacktop);
c010769b:	b8 00 b0 12 c0       	mov    $0xc012b000,%eax
c01076a0:	50                   	push   %eax
c01076a1:	e8 e1 ff ff ff       	call   c0107687 <load_esp0>
c01076a6:	83 c4 04             	add    $0x4,%esp
    ts.ts_ss0 = KERNEL_DS;
c01076a9:	66 c7 05 a8 ff 19 c0 	movw   $0x10,0xc019ffa8
c01076b0:	10 00 

    // initialize the TSS filed of the gdt
    gdt[SEG_TSS] = SEGTSS(STS_T32A, (uintptr_t)&ts, sizeof(ts), DPL_KERNEL);
c01076b2:	66 c7 05 a8 ba 12 c0 	movw   $0x68,0xc012baa8
c01076b9:	68 00 
c01076bb:	b8 a0 ff 19 c0       	mov    $0xc019ffa0,%eax
c01076c0:	66 a3 aa ba 12 c0    	mov    %ax,0xc012baaa
c01076c6:	b8 a0 ff 19 c0       	mov    $0xc019ffa0,%eax
c01076cb:	c1 e8 10             	shr    $0x10,%eax
c01076ce:	a2 ac ba 12 c0       	mov    %al,0xc012baac
c01076d3:	0f b6 05 ad ba 12 c0 	movzbl 0xc012baad,%eax
c01076da:	83 e0 f0             	and    $0xfffffff0,%eax
c01076dd:	83 c8 09             	or     $0x9,%eax
c01076e0:	a2 ad ba 12 c0       	mov    %al,0xc012baad
c01076e5:	0f b6 05 ad ba 12 c0 	movzbl 0xc012baad,%eax
c01076ec:	83 e0 ef             	and    $0xffffffef,%eax
c01076ef:	a2 ad ba 12 c0       	mov    %al,0xc012baad
c01076f4:	0f b6 05 ad ba 12 c0 	movzbl 0xc012baad,%eax
c01076fb:	83 e0 9f             	and    $0xffffff9f,%eax
c01076fe:	a2 ad ba 12 c0       	mov    %al,0xc012baad
c0107703:	0f b6 05 ad ba 12 c0 	movzbl 0xc012baad,%eax
c010770a:	83 c8 80             	or     $0xffffff80,%eax
c010770d:	a2 ad ba 12 c0       	mov    %al,0xc012baad
c0107712:	0f b6 05 ae ba 12 c0 	movzbl 0xc012baae,%eax
c0107719:	83 e0 f0             	and    $0xfffffff0,%eax
c010771c:	a2 ae ba 12 c0       	mov    %al,0xc012baae
c0107721:	0f b6 05 ae ba 12 c0 	movzbl 0xc012baae,%eax
c0107728:	83 e0 ef             	and    $0xffffffef,%eax
c010772b:	a2 ae ba 12 c0       	mov    %al,0xc012baae
c0107730:	0f b6 05 ae ba 12 c0 	movzbl 0xc012baae,%eax
c0107737:	83 e0 df             	and    $0xffffffdf,%eax
c010773a:	a2 ae ba 12 c0       	mov    %al,0xc012baae
c010773f:	0f b6 05 ae ba 12 c0 	movzbl 0xc012baae,%eax
c0107746:	83 c8 40             	or     $0x40,%eax
c0107749:	a2 ae ba 12 c0       	mov    %al,0xc012baae
c010774e:	0f b6 05 ae ba 12 c0 	movzbl 0xc012baae,%eax
c0107755:	83 e0 7f             	and    $0x7f,%eax
c0107758:	a2 ae ba 12 c0       	mov    %al,0xc012baae
c010775d:	b8 a0 ff 19 c0       	mov    $0xc019ffa0,%eax
c0107762:	c1 e8 18             	shr    $0x18,%eax
c0107765:	a2 af ba 12 c0       	mov    %al,0xc012baaf

    // reload all segment registers
    lgdt(&gdt_pd);
c010776a:	68 b0 ba 12 c0       	push   $0xc012bab0
c010776f:	e8 dd fe ff ff       	call   c0107651 <lgdt>
c0107774:	83 c4 04             	add    $0x4,%esp
c0107777:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
    asm volatile ("cli" ::: "memory");
}

static inline void
ltr(uint16_t sel) {
    asm volatile ("ltr %0" :: "r" (sel) : "memory");
c010777d:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c0107781:	0f 00 d8             	ltr    %ax

    // load the TSS
    ltr(GD_TSS);
}
c0107784:	90                   	nop
c0107785:	c9                   	leave  
c0107786:	c3                   	ret    

c0107787 <init_pmm_manager>:

//init_pmm_manager - initialize a pmm_manager instance
static void
init_pmm_manager(void) {
c0107787:	55                   	push   %ebp
c0107788:	89 e5                	mov    %esp,%ebp
c010778a:	83 ec 08             	sub    $0x8,%esp
    pmm_manager = &default_pmm_manager;
c010778d:	c7 05 90 21 1a c0 fc 	movl   $0xc010d6fc,0xc01a2190
c0107794:	d6 10 c0 
    cprintf("memory management: %s\n", pmm_manager->name);
c0107797:	a1 90 21 1a c0       	mov    0xc01a2190,%eax
c010779c:	8b 00                	mov    (%eax),%eax
c010779e:	83 ec 08             	sub    $0x8,%esp
c01077a1:	50                   	push   %eax
c01077a2:	68 98 d7 10 c0       	push   $0xc010d798
c01077a7:	e8 e6 8a ff ff       	call   c0100292 <cprintf>
c01077ac:	83 c4 10             	add    $0x10,%esp
    pmm_manager->init();
c01077af:	a1 90 21 1a c0       	mov    0xc01a2190,%eax
c01077b4:	8b 40 04             	mov    0x4(%eax),%eax
c01077b7:	ff d0                	call   *%eax
}
c01077b9:	90                   	nop
c01077ba:	c9                   	leave  
c01077bb:	c3                   	ret    

c01077bc <init_memmap>:

//init_memmap - call pmm->init_memmap to build Page struct for free memory  
static void
init_memmap(struct Page *base, size_t n) {
c01077bc:	55                   	push   %ebp
c01077bd:	89 e5                	mov    %esp,%ebp
c01077bf:	83 ec 08             	sub    $0x8,%esp
    pmm_manager->init_memmap(base, n);
c01077c2:	a1 90 21 1a c0       	mov    0xc01a2190,%eax
c01077c7:	8b 40 08             	mov    0x8(%eax),%eax
c01077ca:	83 ec 08             	sub    $0x8,%esp
c01077cd:	ff 75 0c             	pushl  0xc(%ebp)
c01077d0:	ff 75 08             	pushl  0x8(%ebp)
c01077d3:	ff d0                	call   *%eax
c01077d5:	83 c4 10             	add    $0x10,%esp
}
c01077d8:	90                   	nop
c01077d9:	c9                   	leave  
c01077da:	c3                   	ret    

c01077db <alloc_pages>:

//alloc_pages - call pmm->alloc_pages to allocate a continuous n*PAGESIZE memory 
struct Page *
alloc_pages(size_t n) {
c01077db:	55                   	push   %ebp
c01077dc:	89 e5                	mov    %esp,%ebp
c01077de:	83 ec 18             	sub    $0x18,%esp
    struct Page *page=NULL;
c01077e1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    
    while (1)
    {
         local_intr_save(intr_flag);
c01077e8:	e8 26 fe ff ff       	call   c0107613 <__intr_save>
c01077ed:	89 45 f0             	mov    %eax,-0x10(%ebp)
         {
              page = pmm_manager->alloc_pages(n);
c01077f0:	a1 90 21 1a c0       	mov    0xc01a2190,%eax
c01077f5:	8b 40 0c             	mov    0xc(%eax),%eax
c01077f8:	83 ec 0c             	sub    $0xc,%esp
c01077fb:	ff 75 08             	pushl  0x8(%ebp)
c01077fe:	ff d0                	call   *%eax
c0107800:	83 c4 10             	add    $0x10,%esp
c0107803:	89 45 f4             	mov    %eax,-0xc(%ebp)
         }
         local_intr_restore(intr_flag);
c0107806:	83 ec 0c             	sub    $0xc,%esp
c0107809:	ff 75 f0             	pushl  -0x10(%ebp)
c010780c:	e8 2c fe ff ff       	call   c010763d <__intr_restore>
c0107811:	83 c4 10             	add    $0x10,%esp

         if (page != NULL || n > 1 || swap_init_ok == 0) break;
c0107814:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107818:	75 28                	jne    c0107842 <alloc_pages+0x67>
c010781a:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c010781e:	77 22                	ja     c0107842 <alloc_pages+0x67>
c0107820:	a1 6c ff 19 c0       	mov    0xc019ff6c,%eax
c0107825:	85 c0                	test   %eax,%eax
c0107827:	74 19                	je     c0107842 <alloc_pages+0x67>
         
         extern struct mm_struct *check_mm_struct;
         //cprintf("page %x, call swap_out in alloc_pages %d\n",page, n);
         swap_out(check_mm_struct, n, 0);
c0107829:	8b 55 08             	mov    0x8(%ebp),%edx
c010782c:	a1 bc 20 1a c0       	mov    0xc01a20bc,%eax
c0107831:	83 ec 04             	sub    $0x4,%esp
c0107834:	6a 00                	push   $0x0
c0107836:	52                   	push   %edx
c0107837:	50                   	push   %eax
c0107838:	e8 62 e3 ff ff       	call   c0105b9f <swap_out>
c010783d:	83 c4 10             	add    $0x10,%esp
    }
c0107840:	eb a6                	jmp    c01077e8 <alloc_pages+0xd>
    //cprintf("n %d,get page %x, No %d in alloc_pages\n",n,page,(page-pages));
    return page;
c0107842:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0107845:	c9                   	leave  
c0107846:	c3                   	ret    

c0107847 <free_pages>:

//free_pages - call pmm->free_pages to free a continuous n*PAGESIZE memory 
void
free_pages(struct Page *base, size_t n) {
c0107847:	55                   	push   %ebp
c0107848:	89 e5                	mov    %esp,%ebp
c010784a:	83 ec 18             	sub    $0x18,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010784d:	e8 c1 fd ff ff       	call   c0107613 <__intr_save>
c0107852:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        pmm_manager->free_pages(base, n);
c0107855:	a1 90 21 1a c0       	mov    0xc01a2190,%eax
c010785a:	8b 40 10             	mov    0x10(%eax),%eax
c010785d:	83 ec 08             	sub    $0x8,%esp
c0107860:	ff 75 0c             	pushl  0xc(%ebp)
c0107863:	ff 75 08             	pushl  0x8(%ebp)
c0107866:	ff d0                	call   *%eax
c0107868:	83 c4 10             	add    $0x10,%esp
    }
    local_intr_restore(intr_flag);
c010786b:	83 ec 0c             	sub    $0xc,%esp
c010786e:	ff 75 f4             	pushl  -0xc(%ebp)
c0107871:	e8 c7 fd ff ff       	call   c010763d <__intr_restore>
c0107876:	83 c4 10             	add    $0x10,%esp
}
c0107879:	90                   	nop
c010787a:	c9                   	leave  
c010787b:	c3                   	ret    

c010787c <nr_free_pages>:

//nr_free_pages - call pmm->nr_free_pages to get the size (nr*PAGESIZE) 
//of current free memory
size_t
nr_free_pages(void) {
c010787c:	55                   	push   %ebp
c010787d:	89 e5                	mov    %esp,%ebp
c010787f:	83 ec 18             	sub    $0x18,%esp
    size_t ret;
    bool intr_flag;
    local_intr_save(intr_flag);
c0107882:	e8 8c fd ff ff       	call   c0107613 <__intr_save>
c0107887:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        ret = pmm_manager->nr_free_pages();
c010788a:	a1 90 21 1a c0       	mov    0xc01a2190,%eax
c010788f:	8b 40 14             	mov    0x14(%eax),%eax
c0107892:	ff d0                	call   *%eax
c0107894:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    local_intr_restore(intr_flag);
c0107897:	83 ec 0c             	sub    $0xc,%esp
c010789a:	ff 75 f4             	pushl  -0xc(%ebp)
c010789d:	e8 9b fd ff ff       	call   c010763d <__intr_restore>
c01078a2:	83 c4 10             	add    $0x10,%esp
    return ret;
c01078a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c01078a8:	c9                   	leave  
c01078a9:	c3                   	ret    

c01078aa <page_init>:

/* pmm_init - initialize the physical memory management */
static void
page_init(void) {
c01078aa:	55                   	push   %ebp
c01078ab:	89 e5                	mov    %esp,%ebp
c01078ad:	57                   	push   %edi
c01078ae:	56                   	push   %esi
c01078af:	53                   	push   %ebx
c01078b0:	83 ec 7c             	sub    $0x7c,%esp
    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
c01078b3:	c7 45 c4 00 80 00 c0 	movl   $0xc0008000,-0x3c(%ebp)
    uint64_t maxpa = 0;
c01078ba:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
c01078c1:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

    cprintf("e820map:\n");
c01078c8:	83 ec 0c             	sub    $0xc,%esp
c01078cb:	68 af d7 10 c0       	push   $0xc010d7af
c01078d0:	e8 bd 89 ff ff       	call   c0100292 <cprintf>
c01078d5:	83 c4 10             	add    $0x10,%esp
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
c01078d8:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c01078df:	e9 fc 00 00 00       	jmp    c01079e0 <page_init+0x136>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c01078e4:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01078e7:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01078ea:	89 d0                	mov    %edx,%eax
c01078ec:	c1 e0 02             	shl    $0x2,%eax
c01078ef:	01 d0                	add    %edx,%eax
c01078f1:	c1 e0 02             	shl    $0x2,%eax
c01078f4:	01 c8                	add    %ecx,%eax
c01078f6:	8b 50 08             	mov    0x8(%eax),%edx
c01078f9:	8b 40 04             	mov    0x4(%eax),%eax
c01078fc:	89 45 b8             	mov    %eax,-0x48(%ebp)
c01078ff:	89 55 bc             	mov    %edx,-0x44(%ebp)
c0107902:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0107905:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0107908:	89 d0                	mov    %edx,%eax
c010790a:	c1 e0 02             	shl    $0x2,%eax
c010790d:	01 d0                	add    %edx,%eax
c010790f:	c1 e0 02             	shl    $0x2,%eax
c0107912:	01 c8                	add    %ecx,%eax
c0107914:	8b 48 0c             	mov    0xc(%eax),%ecx
c0107917:	8b 58 10             	mov    0x10(%eax),%ebx
c010791a:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010791d:	8b 55 bc             	mov    -0x44(%ebp),%edx
c0107920:	01 c8                	add    %ecx,%eax
c0107922:	11 da                	adc    %ebx,%edx
c0107924:	89 45 b0             	mov    %eax,-0x50(%ebp)
c0107927:	89 55 b4             	mov    %edx,-0x4c(%ebp)
        cprintf("  memory: %08llx, [%08llx, %08llx], type = %d.\n",
c010792a:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c010792d:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0107930:	89 d0                	mov    %edx,%eax
c0107932:	c1 e0 02             	shl    $0x2,%eax
c0107935:	01 d0                	add    %edx,%eax
c0107937:	c1 e0 02             	shl    $0x2,%eax
c010793a:	01 c8                	add    %ecx,%eax
c010793c:	83 c0 14             	add    $0x14,%eax
c010793f:	8b 00                	mov    (%eax),%eax
c0107941:	89 45 84             	mov    %eax,-0x7c(%ebp)
c0107944:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0107947:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c010794a:	83 c0 ff             	add    $0xffffffff,%eax
c010794d:	83 d2 ff             	adc    $0xffffffff,%edx
c0107950:	89 c1                	mov    %eax,%ecx
c0107952:	89 d3                	mov    %edx,%ebx
c0107954:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0107957:	89 55 80             	mov    %edx,-0x80(%ebp)
c010795a:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010795d:	89 d0                	mov    %edx,%eax
c010795f:	c1 e0 02             	shl    $0x2,%eax
c0107962:	01 d0                	add    %edx,%eax
c0107964:	c1 e0 02             	shl    $0x2,%eax
c0107967:	03 45 80             	add    -0x80(%ebp),%eax
c010796a:	8b 50 10             	mov    0x10(%eax),%edx
c010796d:	8b 40 0c             	mov    0xc(%eax),%eax
c0107970:	ff 75 84             	pushl  -0x7c(%ebp)
c0107973:	53                   	push   %ebx
c0107974:	51                   	push   %ecx
c0107975:	ff 75 bc             	pushl  -0x44(%ebp)
c0107978:	ff 75 b8             	pushl  -0x48(%ebp)
c010797b:	52                   	push   %edx
c010797c:	50                   	push   %eax
c010797d:	68 bc d7 10 c0       	push   $0xc010d7bc
c0107982:	e8 0b 89 ff ff       	call   c0100292 <cprintf>
c0107987:	83 c4 20             	add    $0x20,%esp
                memmap->map[i].size, begin, end - 1, memmap->map[i].type);
        if (memmap->map[i].type == E820_ARM) {
c010798a:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c010798d:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0107990:	89 d0                	mov    %edx,%eax
c0107992:	c1 e0 02             	shl    $0x2,%eax
c0107995:	01 d0                	add    %edx,%eax
c0107997:	c1 e0 02             	shl    $0x2,%eax
c010799a:	01 c8                	add    %ecx,%eax
c010799c:	83 c0 14             	add    $0x14,%eax
c010799f:	8b 00                	mov    (%eax),%eax
c01079a1:	83 f8 01             	cmp    $0x1,%eax
c01079a4:	75 36                	jne    c01079dc <page_init+0x132>
            if (maxpa < end && begin < KMEMSIZE) {
c01079a6:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01079a9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01079ac:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c01079af:	77 2b                	ja     c01079dc <page_init+0x132>
c01079b1:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c01079b4:	72 05                	jb     c01079bb <page_init+0x111>
c01079b6:	3b 45 b0             	cmp    -0x50(%ebp),%eax
c01079b9:	73 21                	jae    c01079dc <page_init+0x132>
c01079bb:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c01079bf:	77 1b                	ja     c01079dc <page_init+0x132>
c01079c1:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c01079c5:	72 09                	jb     c01079d0 <page_init+0x126>
c01079c7:	81 7d b8 ff ff ff 37 	cmpl   $0x37ffffff,-0x48(%ebp)
c01079ce:	77 0c                	ja     c01079dc <page_init+0x132>
                maxpa = end;
c01079d0:	8b 45 b0             	mov    -0x50(%ebp),%eax
c01079d3:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c01079d6:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01079d9:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
    uint64_t maxpa = 0;

    cprintf("e820map:\n");
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
c01079dc:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c01079e0:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01079e3:	8b 00                	mov    (%eax),%eax
c01079e5:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c01079e8:	0f 8f f6 fe ff ff    	jg     c01078e4 <page_init+0x3a>
            if (maxpa < end && begin < KMEMSIZE) {
                maxpa = end;
            }
        }
    }
    if (maxpa > KMEMSIZE) {
c01079ee:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c01079f2:	72 1d                	jb     c0107a11 <page_init+0x167>
c01079f4:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c01079f8:	77 09                	ja     c0107a03 <page_init+0x159>
c01079fa:	81 7d e0 00 00 00 38 	cmpl   $0x38000000,-0x20(%ebp)
c0107a01:	76 0e                	jbe    c0107a11 <page_init+0x167>
        maxpa = KMEMSIZE;
c0107a03:	c7 45 e0 00 00 00 38 	movl   $0x38000000,-0x20(%ebp)
c0107a0a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    }

    extern char end[];

    npage = maxpa / PGSIZE;
c0107a11:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107a14:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0107a17:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c0107a1b:	c1 ea 0c             	shr    $0xc,%edx
c0107a1e:	a3 80 ff 19 c0       	mov    %eax,0xc019ff80
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);
c0107a23:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
c0107a2a:	b8 a4 21 1a c0       	mov    $0xc01a21a4,%eax
c0107a2f:	8d 50 ff             	lea    -0x1(%eax),%edx
c0107a32:	8b 45 ac             	mov    -0x54(%ebp),%eax
c0107a35:	01 d0                	add    %edx,%eax
c0107a37:	89 45 a8             	mov    %eax,-0x58(%ebp)
c0107a3a:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0107a3d:	ba 00 00 00 00       	mov    $0x0,%edx
c0107a42:	f7 75 ac             	divl   -0x54(%ebp)
c0107a45:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0107a48:	29 d0                	sub    %edx,%eax
c0107a4a:	a3 98 21 1a c0       	mov    %eax,0xc01a2198

    for (i = 0; i < npage; i ++) {
c0107a4f:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0107a56:	eb 27                	jmp    c0107a7f <page_init+0x1d5>
        SetPageReserved(pages + i);
c0107a58:	a1 98 21 1a c0       	mov    0xc01a2198,%eax
c0107a5d:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0107a60:	c1 e2 05             	shl    $0x5,%edx
c0107a63:	01 d0                	add    %edx,%eax
c0107a65:	83 c0 04             	add    $0x4,%eax
c0107a68:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
c0107a6f:	89 45 8c             	mov    %eax,-0x74(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0107a72:	8b 45 8c             	mov    -0x74(%ebp),%eax
c0107a75:	8b 55 90             	mov    -0x70(%ebp),%edx
c0107a78:	0f ab 10             	bts    %edx,(%eax)
    extern char end[];

    npage = maxpa / PGSIZE;
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);

    for (i = 0; i < npage; i ++) {
c0107a7b:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c0107a7f:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0107a82:	a1 80 ff 19 c0       	mov    0xc019ff80,%eax
c0107a87:	39 c2                	cmp    %eax,%edx
c0107a89:	72 cd                	jb     c0107a58 <page_init+0x1ae>
        SetPageReserved(pages + i);
    }

    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);
c0107a8b:	a1 80 ff 19 c0       	mov    0xc019ff80,%eax
c0107a90:	c1 e0 05             	shl    $0x5,%eax
c0107a93:	89 c2                	mov    %eax,%edx
c0107a95:	a1 98 21 1a c0       	mov    0xc01a2198,%eax
c0107a9a:	01 d0                	add    %edx,%eax
c0107a9c:	89 45 a4             	mov    %eax,-0x5c(%ebp)
c0107a9f:	81 7d a4 ff ff ff bf 	cmpl   $0xbfffffff,-0x5c(%ebp)
c0107aa6:	77 17                	ja     c0107abf <page_init+0x215>
c0107aa8:	ff 75 a4             	pushl  -0x5c(%ebp)
c0107aab:	68 ec d7 10 c0       	push   $0xc010d7ec
c0107ab0:	68 ea 00 00 00       	push   $0xea
c0107ab5:	68 10 d8 10 c0       	push   $0xc010d810
c0107aba:	e8 39 89 ff ff       	call   c01003f8 <__panic>
c0107abf:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0107ac2:	05 00 00 00 40       	add    $0x40000000,%eax
c0107ac7:	89 45 a0             	mov    %eax,-0x60(%ebp)

    for (i = 0; i < memmap->nr_map; i ++) {
c0107aca:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0107ad1:	e9 69 01 00 00       	jmp    c0107c3f <page_init+0x395>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c0107ad6:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0107ad9:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0107adc:	89 d0                	mov    %edx,%eax
c0107ade:	c1 e0 02             	shl    $0x2,%eax
c0107ae1:	01 d0                	add    %edx,%eax
c0107ae3:	c1 e0 02             	shl    $0x2,%eax
c0107ae6:	01 c8                	add    %ecx,%eax
c0107ae8:	8b 50 08             	mov    0x8(%eax),%edx
c0107aeb:	8b 40 04             	mov    0x4(%eax),%eax
c0107aee:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0107af1:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0107af4:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0107af7:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0107afa:	89 d0                	mov    %edx,%eax
c0107afc:	c1 e0 02             	shl    $0x2,%eax
c0107aff:	01 d0                	add    %edx,%eax
c0107b01:	c1 e0 02             	shl    $0x2,%eax
c0107b04:	01 c8                	add    %ecx,%eax
c0107b06:	8b 48 0c             	mov    0xc(%eax),%ecx
c0107b09:	8b 58 10             	mov    0x10(%eax),%ebx
c0107b0c:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0107b0f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0107b12:	01 c8                	add    %ecx,%eax
c0107b14:	11 da                	adc    %ebx,%edx
c0107b16:	89 45 c8             	mov    %eax,-0x38(%ebp)
c0107b19:	89 55 cc             	mov    %edx,-0x34(%ebp)
        if (memmap->map[i].type == E820_ARM) {
c0107b1c:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0107b1f:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0107b22:	89 d0                	mov    %edx,%eax
c0107b24:	c1 e0 02             	shl    $0x2,%eax
c0107b27:	01 d0                	add    %edx,%eax
c0107b29:	c1 e0 02             	shl    $0x2,%eax
c0107b2c:	01 c8                	add    %ecx,%eax
c0107b2e:	83 c0 14             	add    $0x14,%eax
c0107b31:	8b 00                	mov    (%eax),%eax
c0107b33:	83 f8 01             	cmp    $0x1,%eax
c0107b36:	0f 85 ff 00 00 00    	jne    c0107c3b <page_init+0x391>
            if (begin < freemem) {
c0107b3c:	8b 45 a0             	mov    -0x60(%ebp),%eax
c0107b3f:	ba 00 00 00 00       	mov    $0x0,%edx
c0107b44:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c0107b47:	72 17                	jb     c0107b60 <page_init+0x2b6>
c0107b49:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c0107b4c:	77 05                	ja     c0107b53 <page_init+0x2a9>
c0107b4e:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c0107b51:	76 0d                	jbe    c0107b60 <page_init+0x2b6>
                begin = freemem;
c0107b53:	8b 45 a0             	mov    -0x60(%ebp),%eax
c0107b56:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0107b59:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
            }
            if (end > KMEMSIZE) {
c0107b60:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0107b64:	72 1d                	jb     c0107b83 <page_init+0x2d9>
c0107b66:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0107b6a:	77 09                	ja     c0107b75 <page_init+0x2cb>
c0107b6c:	81 7d c8 00 00 00 38 	cmpl   $0x38000000,-0x38(%ebp)
c0107b73:	76 0e                	jbe    c0107b83 <page_init+0x2d9>
                end = KMEMSIZE;
c0107b75:	c7 45 c8 00 00 00 38 	movl   $0x38000000,-0x38(%ebp)
c0107b7c:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
            }
            if (begin < end) {
c0107b83:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0107b86:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0107b89:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c0107b8c:	0f 87 a9 00 00 00    	ja     c0107c3b <page_init+0x391>
c0107b92:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c0107b95:	72 09                	jb     c0107ba0 <page_init+0x2f6>
c0107b97:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c0107b9a:	0f 83 9b 00 00 00    	jae    c0107c3b <page_init+0x391>
                begin = ROUNDUP(begin, PGSIZE);
c0107ba0:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
c0107ba7:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0107baa:	8b 45 9c             	mov    -0x64(%ebp),%eax
c0107bad:	01 d0                	add    %edx,%eax
c0107baf:	83 e8 01             	sub    $0x1,%eax
c0107bb2:	89 45 98             	mov    %eax,-0x68(%ebp)
c0107bb5:	8b 45 98             	mov    -0x68(%ebp),%eax
c0107bb8:	ba 00 00 00 00       	mov    $0x0,%edx
c0107bbd:	f7 75 9c             	divl   -0x64(%ebp)
c0107bc0:	8b 45 98             	mov    -0x68(%ebp),%eax
c0107bc3:	29 d0                	sub    %edx,%eax
c0107bc5:	ba 00 00 00 00       	mov    $0x0,%edx
c0107bca:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0107bcd:	89 55 d4             	mov    %edx,-0x2c(%ebp)
                end = ROUNDDOWN(end, PGSIZE);
c0107bd0:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0107bd3:	89 45 94             	mov    %eax,-0x6c(%ebp)
c0107bd6:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0107bd9:	ba 00 00 00 00       	mov    $0x0,%edx
c0107bde:	89 c3                	mov    %eax,%ebx
c0107be0:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
c0107be6:	89 de                	mov    %ebx,%esi
c0107be8:	89 d0                	mov    %edx,%eax
c0107bea:	83 e0 00             	and    $0x0,%eax
c0107bed:	89 c7                	mov    %eax,%edi
c0107bef:	89 75 c8             	mov    %esi,-0x38(%ebp)
c0107bf2:	89 7d cc             	mov    %edi,-0x34(%ebp)
                if (begin < end) {
c0107bf5:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0107bf8:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0107bfb:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c0107bfe:	77 3b                	ja     c0107c3b <page_init+0x391>
c0107c00:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c0107c03:	72 05                	jb     c0107c0a <page_init+0x360>
c0107c05:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c0107c08:	73 31                	jae    c0107c3b <page_init+0x391>
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
c0107c0a:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0107c0d:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0107c10:	2b 45 d0             	sub    -0x30(%ebp),%eax
c0107c13:	1b 55 d4             	sbb    -0x2c(%ebp),%edx
c0107c16:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c0107c1a:	c1 ea 0c             	shr    $0xc,%edx
c0107c1d:	89 c3                	mov    %eax,%ebx
c0107c1f:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0107c22:	83 ec 0c             	sub    $0xc,%esp
c0107c25:	50                   	push   %eax
c0107c26:	e8 ca f8 ff ff       	call   c01074f5 <pa2page>
c0107c2b:	83 c4 10             	add    $0x10,%esp
c0107c2e:	83 ec 08             	sub    $0x8,%esp
c0107c31:	53                   	push   %ebx
c0107c32:	50                   	push   %eax
c0107c33:	e8 84 fb ff ff       	call   c01077bc <init_memmap>
c0107c38:	83 c4 10             	add    $0x10,%esp
        SetPageReserved(pages + i);
    }

    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);

    for (i = 0; i < memmap->nr_map; i ++) {
c0107c3b:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c0107c3f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0107c42:	8b 00                	mov    (%eax),%eax
c0107c44:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c0107c47:	0f 8f 89 fe ff ff    	jg     c0107ad6 <page_init+0x22c>
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
                }
            }
        }
    }
}
c0107c4d:	90                   	nop
c0107c4e:	8d 65 f4             	lea    -0xc(%ebp),%esp
c0107c51:	5b                   	pop    %ebx
c0107c52:	5e                   	pop    %esi
c0107c53:	5f                   	pop    %edi
c0107c54:	5d                   	pop    %ebp
c0107c55:	c3                   	ret    

c0107c56 <boot_map_segment>:
//  la:   linear address of this memory need to map (after x86 segment map)
//  size: memory size
//  pa:   physical address of this memory
//  perm: permission of this memory  
static void
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
c0107c56:	55                   	push   %ebp
c0107c57:	89 e5                	mov    %esp,%ebp
c0107c59:	83 ec 28             	sub    $0x28,%esp
    assert(PGOFF(la) == PGOFF(pa));
c0107c5c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107c5f:	33 45 14             	xor    0x14(%ebp),%eax
c0107c62:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107c67:	85 c0                	test   %eax,%eax
c0107c69:	74 19                	je     c0107c84 <boot_map_segment+0x2e>
c0107c6b:	68 1e d8 10 c0       	push   $0xc010d81e
c0107c70:	68 35 d8 10 c0       	push   $0xc010d835
c0107c75:	68 08 01 00 00       	push   $0x108
c0107c7a:	68 10 d8 10 c0       	push   $0xc010d810
c0107c7f:	e8 74 87 ff ff       	call   c01003f8 <__panic>
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
c0107c84:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
c0107c8b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107c8e:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107c93:	89 c2                	mov    %eax,%edx
c0107c95:	8b 45 10             	mov    0x10(%ebp),%eax
c0107c98:	01 c2                	add    %eax,%edx
c0107c9a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107c9d:	01 d0                	add    %edx,%eax
c0107c9f:	83 e8 01             	sub    $0x1,%eax
c0107ca2:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0107ca5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107ca8:	ba 00 00 00 00       	mov    $0x0,%edx
c0107cad:	f7 75 f0             	divl   -0x10(%ebp)
c0107cb0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107cb3:	29 d0                	sub    %edx,%eax
c0107cb5:	c1 e8 0c             	shr    $0xc,%eax
c0107cb8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    la = ROUNDDOWN(la, PGSIZE);
c0107cbb:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107cbe:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0107cc1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107cc4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0107cc9:	89 45 0c             	mov    %eax,0xc(%ebp)
    pa = ROUNDDOWN(pa, PGSIZE);
c0107ccc:	8b 45 14             	mov    0x14(%ebp),%eax
c0107ccf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0107cd2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107cd5:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0107cda:	89 45 14             	mov    %eax,0x14(%ebp)
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c0107cdd:	eb 57                	jmp    c0107d36 <boot_map_segment+0xe0>
        pte_t *ptep = get_pte(pgdir, la, 1);
c0107cdf:	83 ec 04             	sub    $0x4,%esp
c0107ce2:	6a 01                	push   $0x1
c0107ce4:	ff 75 0c             	pushl  0xc(%ebp)
c0107ce7:	ff 75 08             	pushl  0x8(%ebp)
c0107cea:	e8 58 01 00 00       	call   c0107e47 <get_pte>
c0107cef:	83 c4 10             	add    $0x10,%esp
c0107cf2:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(ptep != NULL);
c0107cf5:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0107cf9:	75 19                	jne    c0107d14 <boot_map_segment+0xbe>
c0107cfb:	68 4a d8 10 c0       	push   $0xc010d84a
c0107d00:	68 35 d8 10 c0       	push   $0xc010d835
c0107d05:	68 0e 01 00 00       	push   $0x10e
c0107d0a:	68 10 d8 10 c0       	push   $0xc010d810
c0107d0f:	e8 e4 86 ff ff       	call   c01003f8 <__panic>
        *ptep = pa | PTE_P | perm;
c0107d14:	8b 45 14             	mov    0x14(%ebp),%eax
c0107d17:	0b 45 18             	or     0x18(%ebp),%eax
c0107d1a:	83 c8 01             	or     $0x1,%eax
c0107d1d:	89 c2                	mov    %eax,%edx
c0107d1f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107d22:	89 10                	mov    %edx,(%eax)
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
    assert(PGOFF(la) == PGOFF(pa));
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
    la = ROUNDDOWN(la, PGSIZE);
    pa = ROUNDDOWN(pa, PGSIZE);
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c0107d24:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0107d28:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
c0107d2f:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
c0107d36:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107d3a:	75 a3                	jne    c0107cdf <boot_map_segment+0x89>
        pte_t *ptep = get_pte(pgdir, la, 1);
        assert(ptep != NULL);
        *ptep = pa | PTE_P | perm;
    }
}
c0107d3c:	90                   	nop
c0107d3d:	c9                   	leave  
c0107d3e:	c3                   	ret    

c0107d3f <boot_alloc_page>:

//boot_alloc_page - allocate one page using pmm->alloc_pages(1) 
// return value: the kernel virtual address of this allocated page
//note: this function is used to get the memory for PDT(Page Directory Table)&PT(Page Table)
static void *
boot_alloc_page(void) {
c0107d3f:	55                   	push   %ebp
c0107d40:	89 e5                	mov    %esp,%ebp
c0107d42:	83 ec 18             	sub    $0x18,%esp
    struct Page *p = alloc_page();
c0107d45:	83 ec 0c             	sub    $0xc,%esp
c0107d48:	6a 01                	push   $0x1
c0107d4a:	e8 8c fa ff ff       	call   c01077db <alloc_pages>
c0107d4f:	83 c4 10             	add    $0x10,%esp
c0107d52:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (p == NULL) {
c0107d55:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107d59:	75 17                	jne    c0107d72 <boot_alloc_page+0x33>
        panic("boot_alloc_page failed.\n");
c0107d5b:	83 ec 04             	sub    $0x4,%esp
c0107d5e:	68 57 d8 10 c0       	push   $0xc010d857
c0107d63:	68 1a 01 00 00       	push   $0x11a
c0107d68:	68 10 d8 10 c0       	push   $0xc010d810
c0107d6d:	e8 86 86 ff ff       	call   c01003f8 <__panic>
    }
    return page2kva(p);
c0107d72:	83 ec 0c             	sub    $0xc,%esp
c0107d75:	ff 75 f4             	pushl  -0xc(%ebp)
c0107d78:	e8 b5 f7 ff ff       	call   c0107532 <page2kva>
c0107d7d:	83 c4 10             	add    $0x10,%esp
}
c0107d80:	c9                   	leave  
c0107d81:	c3                   	ret    

c0107d82 <pmm_init>:

//pmm_init - setup a pmm to manage physical memory, build PDT&PT to setup paging mechanism 
//         - check the correctness of pmm & paging mechanism, print PDT&PT
void
pmm_init(void) {
c0107d82:	55                   	push   %ebp
c0107d83:	89 e5                	mov    %esp,%ebp
c0107d85:	83 ec 18             	sub    $0x18,%esp
    // We've already enabled paging
    boot_cr3 = PADDR(boot_pgdir);
c0107d88:	a1 60 ba 12 c0       	mov    0xc012ba60,%eax
c0107d8d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0107d90:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c0107d97:	77 17                	ja     c0107db0 <pmm_init+0x2e>
c0107d99:	ff 75 f4             	pushl  -0xc(%ebp)
c0107d9c:	68 ec d7 10 c0       	push   $0xc010d7ec
c0107da1:	68 24 01 00 00       	push   $0x124
c0107da6:	68 10 d8 10 c0       	push   $0xc010d810
c0107dab:	e8 48 86 ff ff       	call   c01003f8 <__panic>
c0107db0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107db3:	05 00 00 00 40       	add    $0x40000000,%eax
c0107db8:	a3 94 21 1a c0       	mov    %eax,0xc01a2194
    //We need to alloc/free the physical memory (granularity is 4KB or other size). 
    //So a framework of physical memory manager (struct pmm_manager)is defined in pmm.h
    //First we should init a physical memory manager(pmm) based on the framework.
    //Then pmm can alloc/free the physical memory. 
    //Now the first_fit/best_fit/worst_fit/buddy_system pmm are available.
    init_pmm_manager();
c0107dbd:	e8 c5 f9 ff ff       	call   c0107787 <init_pmm_manager>

    // detect physical memory space, reserve already used memory,
    // then use pmm->init_memmap to create free page list
    page_init();
c0107dc2:	e8 e3 fa ff ff       	call   c01078aa <page_init>

    //use pmm->check to verify the correctness of the alloc/free function in a pmm
    check_alloc_page();
c0107dc7:	e8 16 08 00 00       	call   c01085e2 <check_alloc_page>

    check_pgdir();
c0107dcc:	e8 34 08 00 00       	call   c0108605 <check_pgdir>

    static_assert(KERNBASE % PTSIZE == 0 && KERNTOP % PTSIZE == 0);

    // recursively insert boot_pgdir in itself
    // to form a virtual page table at virtual address VPT
    boot_pgdir[PDX(VPT)] = PADDR(boot_pgdir) | PTE_P | PTE_W;
c0107dd1:	a1 60 ba 12 c0       	mov    0xc012ba60,%eax
c0107dd6:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
c0107ddc:	a1 60 ba 12 c0       	mov    0xc012ba60,%eax
c0107de1:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107de4:	81 7d f0 ff ff ff bf 	cmpl   $0xbfffffff,-0x10(%ebp)
c0107deb:	77 17                	ja     c0107e04 <pmm_init+0x82>
c0107ded:	ff 75 f0             	pushl  -0x10(%ebp)
c0107df0:	68 ec d7 10 c0       	push   $0xc010d7ec
c0107df5:	68 3a 01 00 00       	push   $0x13a
c0107dfa:	68 10 d8 10 c0       	push   $0xc010d810
c0107dff:	e8 f4 85 ff ff       	call   c01003f8 <__panic>
c0107e04:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107e07:	05 00 00 00 40       	add    $0x40000000,%eax
c0107e0c:	83 c8 03             	or     $0x3,%eax
c0107e0f:	89 02                	mov    %eax,(%edx)

    // map all physical memory to linear memory with base linear addr KERNBASE
    // linear_addr KERNBASE ~ KERNBASE + KMEMSIZE = phy_addr 0 ~ KMEMSIZE
    boot_map_segment(boot_pgdir, KERNBASE, KMEMSIZE, 0, PTE_W);
c0107e11:	a1 60 ba 12 c0       	mov    0xc012ba60,%eax
c0107e16:	83 ec 0c             	sub    $0xc,%esp
c0107e19:	6a 02                	push   $0x2
c0107e1b:	6a 00                	push   $0x0
c0107e1d:	68 00 00 00 38       	push   $0x38000000
c0107e22:	68 00 00 00 c0       	push   $0xc0000000
c0107e27:	50                   	push   %eax
c0107e28:	e8 29 fe ff ff       	call   c0107c56 <boot_map_segment>
c0107e2d:	83 c4 20             	add    $0x20,%esp

    // Since we are using bootloader's GDT,
    // we should reload gdt (second time, the last time) to get user segments and the TSS
    // map virtual_addr 0 ~ 4G = linear_addr 0 ~ 4G
    // then set kernel stack (ss:esp) in TSS, setup TSS in gdt, load TSS
    gdt_init();
c0107e30:	e8 60 f8 ff ff       	call   c0107695 <gdt_init>

    //now the basic virtual memory map(see memalyout.h) is established.
    //check the correctness of the basic virtual memory map.
    check_boot_pgdir();
c0107e35:	e8 31 0d 00 00       	call   c0108b6b <check_boot_pgdir>

    print_pgdir();
c0107e3a:	e8 27 11 00 00       	call   c0108f66 <print_pgdir>
    
    kmalloc_init();
c0107e3f:	e8 25 d9 ff ff       	call   c0105769 <kmalloc_init>

}
c0107e44:	90                   	nop
c0107e45:	c9                   	leave  
c0107e46:	c3                   	ret    

c0107e47 <get_pte>:
//  pgdir:  the kernel virtual base address of PDT
//  la:     the linear address need to map
//  create: a logical value to decide if alloc a page for PT
// return vaule: the kernel virtual address of this pte
pte_t *
get_pte(pde_t *pgdir, uintptr_t la, bool create) {
c0107e47:	55                   	push   %ebp
c0107e48:	89 e5                	mov    %esp,%ebp
c0107e4a:	83 ec 38             	sub    $0x38,%esp
                          // (7) set page directory entry's permission
    }
    return NULL;          // (8) return page table entry
#endif
    // (1) find page directory entry
    size_t pdx = PDX(la);       // index of this la in page dir table
c0107e4d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107e50:	c1 e8 16             	shr    $0x16,%eax
c0107e53:	89 45 f4             	mov    %eax,-0xc(%ebp)
    pde_t * pdep = pgdir + pdx; // NOTE: this is a virtual addr
c0107e56:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107e59:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0107e60:	8b 45 08             	mov    0x8(%ebp),%eax
c0107e63:	01 d0                	add    %edx,%eax
c0107e65:	89 45 f0             	mov    %eax,-0x10(%ebp)
    // (2) check if entry is not present
    if (!(*pdep & PTE_P)) {
c0107e68:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107e6b:	8b 00                	mov    (%eax),%eax
c0107e6d:	83 e0 01             	and    $0x1,%eax
c0107e70:	85 c0                	test   %eax,%eax
c0107e72:	0f 85 ae 00 00 00    	jne    c0107f26 <get_pte+0xdf>
        // (3) check if creating is needed
        if (!create) {
c0107e78:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0107e7c:	75 0a                	jne    c0107e88 <get_pte+0x41>
            return NULL;
c0107e7e:	b8 00 00 00 00       	mov    $0x0,%eax
c0107e83:	e9 01 01 00 00       	jmp    c0107f89 <get_pte+0x142>
        }
        // alloc page for page table
        struct Page * pt_page =  alloc_page();
c0107e88:	83 ec 0c             	sub    $0xc,%esp
c0107e8b:	6a 01                	push   $0x1
c0107e8d:	e8 49 f9 ff ff       	call   c01077db <alloc_pages>
c0107e92:	83 c4 10             	add    $0x10,%esp
c0107e95:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (pt_page == NULL) {
c0107e98:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0107e9c:	75 0a                	jne    c0107ea8 <get_pte+0x61>
            return NULL;
c0107e9e:	b8 00 00 00 00       	mov    $0x0,%eax
c0107ea3:	e9 e1 00 00 00       	jmp    c0107f89 <get_pte+0x142>
        }
        // (4) set page reference
        set_page_ref(pt_page, 1);
c0107ea8:	83 ec 08             	sub    $0x8,%esp
c0107eab:	6a 01                	push   $0x1
c0107ead:	ff 75 ec             	pushl  -0x14(%ebp)
c0107eb0:	e8 22 f7 ff ff       	call   c01075d7 <set_page_ref>
c0107eb5:	83 c4 10             	add    $0x10,%esp
        // (5) get linear address of page
        uintptr_t pt_addr = page2pa(pt_page);
c0107eb8:	83 ec 0c             	sub    $0xc,%esp
c0107ebb:	ff 75 ec             	pushl  -0x14(%ebp)
c0107ebe:	e8 1f f6 ff ff       	call   c01074e2 <page2pa>
c0107ec3:	83 c4 10             	add    $0x10,%esp
c0107ec6:	89 45 e8             	mov    %eax,-0x18(%ebp)
        // (6) clear page content using memset
        memset(KADDR(pt_addr), 0, PGSIZE);
c0107ec9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107ecc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0107ecf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107ed2:	c1 e8 0c             	shr    $0xc,%eax
c0107ed5:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0107ed8:	a1 80 ff 19 c0       	mov    0xc019ff80,%eax
c0107edd:	39 45 e0             	cmp    %eax,-0x20(%ebp)
c0107ee0:	72 17                	jb     c0107ef9 <get_pte+0xb2>
c0107ee2:	ff 75 e4             	pushl  -0x1c(%ebp)
c0107ee5:	68 48 d7 10 c0       	push   $0xc010d748
c0107eea:	68 8d 01 00 00       	push   $0x18d
c0107eef:	68 10 d8 10 c0       	push   $0xc010d810
c0107ef4:	e8 ff 84 ff ff       	call   c01003f8 <__panic>
c0107ef9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107efc:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0107f01:	83 ec 04             	sub    $0x4,%esp
c0107f04:	68 00 10 00 00       	push   $0x1000
c0107f09:	6a 00                	push   $0x0
c0107f0b:	50                   	push   %eax
c0107f0c:	e8 2f 34 00 00       	call   c010b340 <memset>
c0107f11:	83 c4 10             	add    $0x10,%esp
        // (7) set page directory entry's permission
        *pdep = (PDE_ADDR(pt_addr)) | PTE_U | PTE_W | PTE_P; // PDE_ADDR: get pa &= ~0xFFF
c0107f14:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107f17:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0107f1c:	83 c8 07             	or     $0x7,%eax
c0107f1f:	89 c2                	mov    %eax,%edx
c0107f21:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107f24:	89 10                	mov    %edx,(%eax)
    }
    // (8) return page table entry
    size_t ptx = PTX(la);   // index of this la in page dir table
c0107f26:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107f29:	c1 e8 0c             	shr    $0xc,%eax
c0107f2c:	25 ff 03 00 00       	and    $0x3ff,%eax
c0107f31:	89 45 dc             	mov    %eax,-0x24(%ebp)
    uintptr_t pt_pa = PDE_ADDR(*pdep);
c0107f34:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107f37:	8b 00                	mov    (%eax),%eax
c0107f39:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0107f3e:	89 45 d8             	mov    %eax,-0x28(%ebp)
    pte_t * ptep = (pte_t *)KADDR(pt_pa) + ptx;
c0107f41:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0107f44:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c0107f47:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0107f4a:	c1 e8 0c             	shr    $0xc,%eax
c0107f4d:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0107f50:	a1 80 ff 19 c0       	mov    0xc019ff80,%eax
c0107f55:	39 45 d0             	cmp    %eax,-0x30(%ebp)
c0107f58:	72 17                	jb     c0107f71 <get_pte+0x12a>
c0107f5a:	ff 75 d4             	pushl  -0x2c(%ebp)
c0107f5d:	68 48 d7 10 c0       	push   $0xc010d748
c0107f62:	68 94 01 00 00       	push   $0x194
c0107f67:	68 10 d8 10 c0       	push   $0xc010d810
c0107f6c:	e8 87 84 ff ff       	call   c01003f8 <__panic>
c0107f71:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0107f74:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0107f79:	89 c2                	mov    %eax,%edx
c0107f7b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107f7e:	c1 e0 02             	shl    $0x2,%eax
c0107f81:	01 d0                	add    %edx,%eax
c0107f83:	89 45 cc             	mov    %eax,-0x34(%ebp)
    return ptep;
c0107f86:	8b 45 cc             	mov    -0x34(%ebp),%eax
}
c0107f89:	c9                   	leave  
c0107f8a:	c3                   	ret    

c0107f8b <get_page>:

//get_page - get related Page struct for linear address la using PDT pgdir
struct Page *
get_page(pde_t *pgdir, uintptr_t la, pte_t **ptep_store) {
c0107f8b:	55                   	push   %ebp
c0107f8c:	89 e5                	mov    %esp,%ebp
c0107f8e:	83 ec 18             	sub    $0x18,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c0107f91:	83 ec 04             	sub    $0x4,%esp
c0107f94:	6a 00                	push   $0x0
c0107f96:	ff 75 0c             	pushl  0xc(%ebp)
c0107f99:	ff 75 08             	pushl  0x8(%ebp)
c0107f9c:	e8 a6 fe ff ff       	call   c0107e47 <get_pte>
c0107fa1:	83 c4 10             	add    $0x10,%esp
c0107fa4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep_store != NULL) {
c0107fa7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0107fab:	74 08                	je     c0107fb5 <get_page+0x2a>
        *ptep_store = ptep;
c0107fad:	8b 45 10             	mov    0x10(%ebp),%eax
c0107fb0:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0107fb3:	89 10                	mov    %edx,(%eax)
    }
    if (ptep != NULL && *ptep & PTE_P) {
c0107fb5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107fb9:	74 1f                	je     c0107fda <get_page+0x4f>
c0107fbb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107fbe:	8b 00                	mov    (%eax),%eax
c0107fc0:	83 e0 01             	and    $0x1,%eax
c0107fc3:	85 c0                	test   %eax,%eax
c0107fc5:	74 13                	je     c0107fda <get_page+0x4f>
        return pte2page(*ptep);
c0107fc7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107fca:	8b 00                	mov    (%eax),%eax
c0107fcc:	83 ec 0c             	sub    $0xc,%esp
c0107fcf:	50                   	push   %eax
c0107fd0:	e8 a2 f5 ff ff       	call   c0107577 <pte2page>
c0107fd5:	83 c4 10             	add    $0x10,%esp
c0107fd8:	eb 05                	jmp    c0107fdf <get_page+0x54>
    }
    return NULL;
c0107fda:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107fdf:	c9                   	leave  
c0107fe0:	c3                   	ret    

c0107fe1 <page_remove_pte>:

//page_remove_pte - free an Page sturct which is related linear address la
//                - and clean(invalidate) pte which is related linear address la
//note: PT is changed, so the TLB need to be invalidate 
static inline void
page_remove_pte(pde_t *pgdir, uintptr_t la, pte_t *ptep) {
c0107fe1:	55                   	push   %ebp
c0107fe2:	89 e5                	mov    %esp,%ebp
c0107fe4:	83 ec 18             	sub    $0x18,%esp
                                  //(5) clear second page table entry
                                  //(6) flush tlb
    }
#endif
    //(1) check if this page table entry is present
    if (!(*ptep & PTE_P)) {
c0107fe7:	8b 45 10             	mov    0x10(%ebp),%eax
c0107fea:	8b 00                	mov    (%eax),%eax
c0107fec:	83 e0 01             	and    $0x1,%eax
c0107fef:	85 c0                	test   %eax,%eax
c0107ff1:	74 57                	je     c010804a <page_remove_pte+0x69>
        return;
    }
    //(2) find corresponding page to pte
    struct Page *page = pte2page(*ptep);
c0107ff3:	8b 45 10             	mov    0x10(%ebp),%eax
c0107ff6:	8b 00                	mov    (%eax),%eax
c0107ff8:	83 ec 0c             	sub    $0xc,%esp
c0107ffb:	50                   	push   %eax
c0107ffc:	e8 76 f5 ff ff       	call   c0107577 <pte2page>
c0108001:	83 c4 10             	add    $0x10,%esp
c0108004:	89 45 f4             	mov    %eax,-0xc(%ebp)
    //(3) decrease page reference
    page_ref_dec(page);
c0108007:	83 ec 0c             	sub    $0xc,%esp
c010800a:	ff 75 f4             	pushl  -0xc(%ebp)
c010800d:	e8 ea f5 ff ff       	call   c01075fc <page_ref_dec>
c0108012:	83 c4 10             	add    $0x10,%esp
    //(4) and free this page when page reference reachs 0
    if (page->ref == 0) {
c0108015:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108018:	8b 00                	mov    (%eax),%eax
c010801a:	85 c0                	test   %eax,%eax
c010801c:	75 10                	jne    c010802e <page_remove_pte+0x4d>
        free_page(page);
c010801e:	83 ec 08             	sub    $0x8,%esp
c0108021:	6a 01                	push   $0x1
c0108023:	ff 75 f4             	pushl  -0xc(%ebp)
c0108026:	e8 1c f8 ff ff       	call   c0107847 <free_pages>
c010802b:	83 c4 10             	add    $0x10,%esp
    }
    //(5) clear second page table entry
    *ptep = 0;
c010802e:	8b 45 10             	mov    0x10(%ebp),%eax
c0108031:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    //(6) flush tlb
    tlb_invalidate(pgdir, la);
c0108037:	83 ec 08             	sub    $0x8,%esp
c010803a:	ff 75 0c             	pushl  0xc(%ebp)
c010803d:	ff 75 08             	pushl  0x8(%ebp)
c0108040:	e8 9c 04 00 00       	call   c01084e1 <tlb_invalidate>
c0108045:	83 c4 10             	add    $0x10,%esp
c0108048:	eb 01                	jmp    c010804b <page_remove_pte+0x6a>
                                  //(6) flush tlb
    }
#endif
    //(1) check if this page table entry is present
    if (!(*ptep & PTE_P)) {
        return;
c010804a:	90                   	nop
    }
    //(5) clear second page table entry
    *ptep = 0;
    //(6) flush tlb
    tlb_invalidate(pgdir, la);
}
c010804b:	c9                   	leave  
c010804c:	c3                   	ret    

c010804d <unmap_range>:

void
unmap_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c010804d:	55                   	push   %ebp
c010804e:	89 e5                	mov    %esp,%ebp
c0108050:	83 ec 18             	sub    $0x18,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0108053:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108056:	25 ff 0f 00 00       	and    $0xfff,%eax
c010805b:	85 c0                	test   %eax,%eax
c010805d:	75 0c                	jne    c010806b <unmap_range+0x1e>
c010805f:	8b 45 10             	mov    0x10(%ebp),%eax
c0108062:	25 ff 0f 00 00       	and    $0xfff,%eax
c0108067:	85 c0                	test   %eax,%eax
c0108069:	74 19                	je     c0108084 <unmap_range+0x37>
c010806b:	68 70 d8 10 c0       	push   $0xc010d870
c0108070:	68 35 d8 10 c0       	push   $0xc010d835
c0108075:	68 d7 01 00 00       	push   $0x1d7
c010807a:	68 10 d8 10 c0       	push   $0xc010d810
c010807f:	e8 74 83 ff ff       	call   c01003f8 <__panic>
    assert(USER_ACCESS(start, end));
c0108084:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c010808b:	76 11                	jbe    c010809e <unmap_range+0x51>
c010808d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108090:	3b 45 10             	cmp    0x10(%ebp),%eax
c0108093:	73 09                	jae    c010809e <unmap_range+0x51>
c0108095:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c010809c:	76 19                	jbe    c01080b7 <unmap_range+0x6a>
c010809e:	68 99 d8 10 c0       	push   $0xc010d899
c01080a3:	68 35 d8 10 c0       	push   $0xc010d835
c01080a8:	68 d8 01 00 00       	push   $0x1d8
c01080ad:	68 10 d8 10 c0       	push   $0xc010d810
c01080b2:	e8 41 83 ff ff       	call   c01003f8 <__panic>

    do {
        pte_t *ptep = get_pte(pgdir, start, 0);
c01080b7:	83 ec 04             	sub    $0x4,%esp
c01080ba:	6a 00                	push   $0x0
c01080bc:	ff 75 0c             	pushl  0xc(%ebp)
c01080bf:	ff 75 08             	pushl  0x8(%ebp)
c01080c2:	e8 80 fd ff ff       	call   c0107e47 <get_pte>
c01080c7:	83 c4 10             	add    $0x10,%esp
c01080ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ptep == NULL) {
c01080cd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01080d1:	75 18                	jne    c01080eb <unmap_range+0x9e>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
c01080d3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01080d6:	05 00 00 40 00       	add    $0x400000,%eax
c01080db:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01080de:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01080e1:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c01080e6:	89 45 0c             	mov    %eax,0xc(%ebp)
            continue ;
c01080e9:	eb 24                	jmp    c010810f <unmap_range+0xc2>
        }
        if (*ptep != 0) {
c01080eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01080ee:	8b 00                	mov    (%eax),%eax
c01080f0:	85 c0                	test   %eax,%eax
c01080f2:	74 14                	je     c0108108 <unmap_range+0xbb>
            page_remove_pte(pgdir, start, ptep);
c01080f4:	83 ec 04             	sub    $0x4,%esp
c01080f7:	ff 75 f4             	pushl  -0xc(%ebp)
c01080fa:	ff 75 0c             	pushl  0xc(%ebp)
c01080fd:	ff 75 08             	pushl  0x8(%ebp)
c0108100:	e8 dc fe ff ff       	call   c0107fe1 <page_remove_pte>
c0108105:	83 c4 10             	add    $0x10,%esp
        }
        start += PGSIZE;
c0108108:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
    } while (start != 0 && start < end);
c010810f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0108113:	74 08                	je     c010811d <unmap_range+0xd0>
c0108115:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108118:	3b 45 10             	cmp    0x10(%ebp),%eax
c010811b:	72 9a                	jb     c01080b7 <unmap_range+0x6a>
}
c010811d:	90                   	nop
c010811e:	c9                   	leave  
c010811f:	c3                   	ret    

c0108120 <exit_range>:

void
exit_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c0108120:	55                   	push   %ebp
c0108121:	89 e5                	mov    %esp,%ebp
c0108123:	83 ec 18             	sub    $0x18,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0108126:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108129:	25 ff 0f 00 00       	and    $0xfff,%eax
c010812e:	85 c0                	test   %eax,%eax
c0108130:	75 0c                	jne    c010813e <exit_range+0x1e>
c0108132:	8b 45 10             	mov    0x10(%ebp),%eax
c0108135:	25 ff 0f 00 00       	and    $0xfff,%eax
c010813a:	85 c0                	test   %eax,%eax
c010813c:	74 19                	je     c0108157 <exit_range+0x37>
c010813e:	68 70 d8 10 c0       	push   $0xc010d870
c0108143:	68 35 d8 10 c0       	push   $0xc010d835
c0108148:	68 e9 01 00 00       	push   $0x1e9
c010814d:	68 10 d8 10 c0       	push   $0xc010d810
c0108152:	e8 a1 82 ff ff       	call   c01003f8 <__panic>
    assert(USER_ACCESS(start, end));
c0108157:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c010815e:	76 11                	jbe    c0108171 <exit_range+0x51>
c0108160:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108163:	3b 45 10             	cmp    0x10(%ebp),%eax
c0108166:	73 09                	jae    c0108171 <exit_range+0x51>
c0108168:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c010816f:	76 19                	jbe    c010818a <exit_range+0x6a>
c0108171:	68 99 d8 10 c0       	push   $0xc010d899
c0108176:	68 35 d8 10 c0       	push   $0xc010d835
c010817b:	68 ea 01 00 00       	push   $0x1ea
c0108180:	68 10 d8 10 c0       	push   $0xc010d810
c0108185:	e8 6e 82 ff ff       	call   c01003f8 <__panic>

    start = ROUNDDOWN(start, PTSIZE);
c010818a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010818d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108190:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108193:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0108198:	89 45 0c             	mov    %eax,0xc(%ebp)
    do {
        int pde_idx = PDX(start);
c010819b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010819e:	c1 e8 16             	shr    $0x16,%eax
c01081a1:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pgdir[pde_idx] & PTE_P) {
c01081a4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01081a7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01081ae:	8b 45 08             	mov    0x8(%ebp),%eax
c01081b1:	01 d0                	add    %edx,%eax
c01081b3:	8b 00                	mov    (%eax),%eax
c01081b5:	83 e0 01             	and    $0x1,%eax
c01081b8:	85 c0                	test   %eax,%eax
c01081ba:	74 40                	je     c01081fc <exit_range+0xdc>
            free_page(pde2page(pgdir[pde_idx]));
c01081bc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01081bf:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01081c6:	8b 45 08             	mov    0x8(%ebp),%eax
c01081c9:	01 d0                	add    %edx,%eax
c01081cb:	8b 00                	mov    (%eax),%eax
c01081cd:	83 ec 0c             	sub    $0xc,%esp
c01081d0:	50                   	push   %eax
c01081d1:	e8 db f3 ff ff       	call   c01075b1 <pde2page>
c01081d6:	83 c4 10             	add    $0x10,%esp
c01081d9:	83 ec 08             	sub    $0x8,%esp
c01081dc:	6a 01                	push   $0x1
c01081de:	50                   	push   %eax
c01081df:	e8 63 f6 ff ff       	call   c0107847 <free_pages>
c01081e4:	83 c4 10             	add    $0x10,%esp
            pgdir[pde_idx] = 0;
c01081e7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01081ea:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01081f1:	8b 45 08             	mov    0x8(%ebp),%eax
c01081f4:	01 d0                	add    %edx,%eax
c01081f6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        }
        start += PTSIZE;
c01081fc:	81 45 0c 00 00 40 00 	addl   $0x400000,0xc(%ebp)
    } while (start != 0 && start < end);
c0108203:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0108207:	74 08                	je     c0108211 <exit_range+0xf1>
c0108209:	8b 45 0c             	mov    0xc(%ebp),%eax
c010820c:	3b 45 10             	cmp    0x10(%ebp),%eax
c010820f:	72 8a                	jb     c010819b <exit_range+0x7b>
}
c0108211:	90                   	nop
c0108212:	c9                   	leave  
c0108213:	c3                   	ret    

c0108214 <copy_range>:
 * @share: flags to indicate to dup OR share. We just use dup method, so it didn't be used.
 *
 * CALL GRAPH: copy_mm-->dup_mmap-->copy_range
 */
int
copy_range(pde_t *to, pde_t *from, uintptr_t start, uintptr_t end, bool share) {
c0108214:	55                   	push   %ebp
c0108215:	89 e5                	mov    %esp,%ebp
c0108217:	83 ec 38             	sub    $0x38,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c010821a:	8b 45 10             	mov    0x10(%ebp),%eax
c010821d:	25 ff 0f 00 00       	and    $0xfff,%eax
c0108222:	85 c0                	test   %eax,%eax
c0108224:	75 0c                	jne    c0108232 <copy_range+0x1e>
c0108226:	8b 45 14             	mov    0x14(%ebp),%eax
c0108229:	25 ff 0f 00 00       	and    $0xfff,%eax
c010822e:	85 c0                	test   %eax,%eax
c0108230:	74 19                	je     c010824b <copy_range+0x37>
c0108232:	68 70 d8 10 c0       	push   $0xc010d870
c0108237:	68 35 d8 10 c0       	push   $0xc010d835
c010823c:	68 ff 01 00 00       	push   $0x1ff
c0108241:	68 10 d8 10 c0       	push   $0xc010d810
c0108246:	e8 ad 81 ff ff       	call   c01003f8 <__panic>
    assert(USER_ACCESS(start, end));
c010824b:	81 7d 10 ff ff 1f 00 	cmpl   $0x1fffff,0x10(%ebp)
c0108252:	76 11                	jbe    c0108265 <copy_range+0x51>
c0108254:	8b 45 10             	mov    0x10(%ebp),%eax
c0108257:	3b 45 14             	cmp    0x14(%ebp),%eax
c010825a:	73 09                	jae    c0108265 <copy_range+0x51>
c010825c:	81 7d 14 00 00 00 b0 	cmpl   $0xb0000000,0x14(%ebp)
c0108263:	76 19                	jbe    c010827e <copy_range+0x6a>
c0108265:	68 99 d8 10 c0       	push   $0xc010d899
c010826a:	68 35 d8 10 c0       	push   $0xc010d835
c010826f:	68 00 02 00 00       	push   $0x200
c0108274:	68 10 d8 10 c0       	push   $0xc010d810
c0108279:	e8 7a 81 ff ff       	call   c01003f8 <__panic>
    // copy content by page unit.
    do {
        //call get_pte to find process A's pte according to the addr start
        pte_t *ptep = get_pte(from, start, 0), *nptep;
c010827e:	83 ec 04             	sub    $0x4,%esp
c0108281:	6a 00                	push   $0x0
c0108283:	ff 75 10             	pushl  0x10(%ebp)
c0108286:	ff 75 0c             	pushl  0xc(%ebp)
c0108289:	e8 b9 fb ff ff       	call   c0107e47 <get_pte>
c010828e:	83 c4 10             	add    $0x10,%esp
c0108291:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ptep == NULL) {
c0108294:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108298:	75 1b                	jne    c01082b5 <copy_range+0xa1>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);      // empty pde, just go on
c010829a:	8b 45 10             	mov    0x10(%ebp),%eax
c010829d:	05 00 00 40 00       	add    $0x400000,%eax
c01082a2:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01082a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01082a8:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c01082ad:	89 45 10             	mov    %eax,0x10(%ebp)
            continue ;
c01082b0:	e9 21 01 00 00       	jmp    c01083d6 <copy_range+0x1c2>
        }
        //call get_pte to find process B's pte according to the addr start. If pte is NULL, just alloc a PT
        if (*ptep & PTE_P) {
c01082b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01082b8:	8b 00                	mov    (%eax),%eax
c01082ba:	83 e0 01             	and    $0x1,%eax
c01082bd:	85 c0                	test   %eax,%eax
c01082bf:	0f 84 0a 01 00 00    	je     c01083cf <copy_range+0x1bb>
            if ((nptep = get_pte(to, start, 1)) == NULL) {
c01082c5:	83 ec 04             	sub    $0x4,%esp
c01082c8:	6a 01                	push   $0x1
c01082ca:	ff 75 10             	pushl  0x10(%ebp)
c01082cd:	ff 75 08             	pushl  0x8(%ebp)
c01082d0:	e8 72 fb ff ff       	call   c0107e47 <get_pte>
c01082d5:	83 c4 10             	add    $0x10,%esp
c01082d8:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01082db:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01082df:	75 0a                	jne    c01082eb <copy_range+0xd7>
                return -E_NO_MEM;       // NOTE: since get_pte() above use arg '1', so there should be a ptep rather than NULL
c01082e1:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c01082e6:	e9 02 01 00 00       	jmp    c01083ed <copy_range+0x1d9>
            }
            uint32_t perm = (*ptep & PTE_USER);
c01082eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01082ee:	8b 00                	mov    (%eax),%eax
c01082f0:	83 e0 07             	and    $0x7,%eax
c01082f3:	89 45 e8             	mov    %eax,-0x18(%ebp)
            //get page from ptep
            struct Page *page = pte2page(*ptep);
c01082f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01082f9:	8b 00                	mov    (%eax),%eax
c01082fb:	83 ec 0c             	sub    $0xc,%esp
c01082fe:	50                   	push   %eax
c01082ff:	e8 73 f2 ff ff       	call   c0107577 <pte2page>
c0108304:	83 c4 10             	add    $0x10,%esp
c0108307:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            // alloc a page for process B
            struct Page *npage=alloc_page();
c010830a:	83 ec 0c             	sub    $0xc,%esp
c010830d:	6a 01                	push   $0x1
c010830f:	e8 c7 f4 ff ff       	call   c01077db <alloc_pages>
c0108314:	83 c4 10             	add    $0x10,%esp
c0108317:	89 45 e0             	mov    %eax,-0x20(%ebp)
            assert(page!=NULL);
c010831a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010831e:	75 19                	jne    c0108339 <copy_range+0x125>
c0108320:	68 b1 d8 10 c0       	push   $0xc010d8b1
c0108325:	68 35 d8 10 c0       	push   $0xc010d835
c010832a:	68 13 02 00 00       	push   $0x213
c010832f:	68 10 d8 10 c0       	push   $0xc010d810
c0108334:	e8 bf 80 ff ff       	call   c01003f8 <__panic>
            assert(npage!=NULL);
c0108339:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c010833d:	75 19                	jne    c0108358 <copy_range+0x144>
c010833f:	68 bc d8 10 c0       	push   $0xc010d8bc
c0108344:	68 35 d8 10 c0       	push   $0xc010d835
c0108349:	68 14 02 00 00       	push   $0x214
c010834e:	68 10 d8 10 c0       	push   $0xc010d810
c0108353:	e8 a0 80 ff ff       	call   c01003f8 <__panic>
            int ret=0;
c0108358:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
            * (2) find dst_kvaddr: the kernel virtual address of npage
            * (3) memory copy from src_kvaddr to dst_kvaddr, size is PGSIZE
            * (4) build the map of phy addr of  nage with the linear addr start
            */
            // (1) find src_kvaddr: the kernel virtual address of page
            uintptr_t src_kvaddr = page2kva(page);
c010835f:	83 ec 0c             	sub    $0xc,%esp
c0108362:	ff 75 e4             	pushl  -0x1c(%ebp)
c0108365:	e8 c8 f1 ff ff       	call   c0107532 <page2kva>
c010836a:	83 c4 10             	add    $0x10,%esp
c010836d:	89 45 d8             	mov    %eax,-0x28(%ebp)
            // (2) find dst_kvaddr: the kernel virtual address of npage
            uintptr_t dst_kvaddr = page2kva(npage);
c0108370:	83 ec 0c             	sub    $0xc,%esp
c0108373:	ff 75 e0             	pushl  -0x20(%ebp)
c0108376:	e8 b7 f1 ff ff       	call   c0107532 <page2kva>
c010837b:	83 c4 10             	add    $0x10,%esp
c010837e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
            // (3) memory copy from src_kvaddr to dst_kvaddr, size is PGSIZE
            memcpy(dst_kvaddr, src_kvaddr, PGSIZE);
c0108381:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0108384:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0108387:	83 ec 04             	sub    $0x4,%esp
c010838a:	68 00 10 00 00       	push   $0x1000
c010838f:	52                   	push   %edx
c0108390:	50                   	push   %eax
c0108391:	e8 8d 30 00 00       	call   c010b423 <memcpy>
c0108396:	83 c4 10             	add    $0x10,%esp
            // (4) build the map of phy addr of  nage with the linear addr start
            ret = page_insert(to, npage, start, perm);
c0108399:	ff 75 e8             	pushl  -0x18(%ebp)
c010839c:	ff 75 10             	pushl  0x10(%ebp)
c010839f:	ff 75 e0             	pushl  -0x20(%ebp)
c01083a2:	ff 75 08             	pushl  0x8(%ebp)
c01083a5:	e8 7e 00 00 00       	call   c0108428 <page_insert>
c01083aa:	83 c4 10             	add    $0x10,%esp
c01083ad:	89 45 dc             	mov    %eax,-0x24(%ebp)
            assert(ret == 0);
c01083b0:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c01083b4:	74 19                	je     c01083cf <copy_range+0x1bb>
c01083b6:	68 c8 d8 10 c0       	push   $0xc010d8c8
c01083bb:	68 35 d8 10 c0       	push   $0xc010d835
c01083c0:	68 2c 02 00 00       	push   $0x22c
c01083c5:	68 10 d8 10 c0       	push   $0xc010d810
c01083ca:	e8 29 80 ff ff       	call   c01003f8 <__panic>
        }
        start += PGSIZE;
c01083cf:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    } while (start != 0 && start < end);
c01083d6:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01083da:	74 0c                	je     c01083e8 <copy_range+0x1d4>
c01083dc:	8b 45 10             	mov    0x10(%ebp),%eax
c01083df:	3b 45 14             	cmp    0x14(%ebp),%eax
c01083e2:	0f 82 96 fe ff ff    	jb     c010827e <copy_range+0x6a>
    return 0;
c01083e8:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01083ed:	c9                   	leave  
c01083ee:	c3                   	ret    

c01083ef <page_remove>:

//page_remove - free an Page which is related linear address la and has an validated pte
void
page_remove(pde_t *pgdir, uintptr_t la) {
c01083ef:	55                   	push   %ebp
c01083f0:	89 e5                	mov    %esp,%ebp
c01083f2:	83 ec 18             	sub    $0x18,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c01083f5:	83 ec 04             	sub    $0x4,%esp
c01083f8:	6a 00                	push   $0x0
c01083fa:	ff 75 0c             	pushl  0xc(%ebp)
c01083fd:	ff 75 08             	pushl  0x8(%ebp)
c0108400:	e8 42 fa ff ff       	call   c0107e47 <get_pte>
c0108405:	83 c4 10             	add    $0x10,%esp
c0108408:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep != NULL) {
c010840b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010840f:	74 14                	je     c0108425 <page_remove+0x36>
        page_remove_pte(pgdir, la, ptep);
c0108411:	83 ec 04             	sub    $0x4,%esp
c0108414:	ff 75 f4             	pushl  -0xc(%ebp)
c0108417:	ff 75 0c             	pushl  0xc(%ebp)
c010841a:	ff 75 08             	pushl  0x8(%ebp)
c010841d:	e8 bf fb ff ff       	call   c0107fe1 <page_remove_pte>
c0108422:	83 c4 10             	add    $0x10,%esp
    }
}
c0108425:	90                   	nop
c0108426:	c9                   	leave  
c0108427:	c3                   	ret    

c0108428 <page_insert>:
//  la:    the linear address need to map
//  perm:  the permission of this Page which is setted in related pte
// return value: always 0
//note: PT is changed, so the TLB need to be invalidate 
int
page_insert(pde_t *pgdir, struct Page *page, uintptr_t la, uint32_t perm) {
c0108428:	55                   	push   %ebp
c0108429:	89 e5                	mov    %esp,%ebp
c010842b:	83 ec 18             	sub    $0x18,%esp
    pte_t *ptep = get_pte(pgdir, la, 1);
c010842e:	83 ec 04             	sub    $0x4,%esp
c0108431:	6a 01                	push   $0x1
c0108433:	ff 75 10             	pushl  0x10(%ebp)
c0108436:	ff 75 08             	pushl  0x8(%ebp)
c0108439:	e8 09 fa ff ff       	call   c0107e47 <get_pte>
c010843e:	83 c4 10             	add    $0x10,%esp
c0108441:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep == NULL) {
c0108444:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108448:	75 0a                	jne    c0108454 <page_insert+0x2c>
        return -E_NO_MEM;
c010844a:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010844f:	e9 8b 00 00 00       	jmp    c01084df <page_insert+0xb7>
    }
    page_ref_inc(page);
c0108454:	83 ec 0c             	sub    $0xc,%esp
c0108457:	ff 75 0c             	pushl  0xc(%ebp)
c010845a:	e8 86 f1 ff ff       	call   c01075e5 <page_ref_inc>
c010845f:	83 c4 10             	add    $0x10,%esp
    if (*ptep & PTE_P) {
c0108462:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108465:	8b 00                	mov    (%eax),%eax
c0108467:	83 e0 01             	and    $0x1,%eax
c010846a:	85 c0                	test   %eax,%eax
c010846c:	74 40                	je     c01084ae <page_insert+0x86>
        struct Page *p = pte2page(*ptep);
c010846e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108471:	8b 00                	mov    (%eax),%eax
c0108473:	83 ec 0c             	sub    $0xc,%esp
c0108476:	50                   	push   %eax
c0108477:	e8 fb f0 ff ff       	call   c0107577 <pte2page>
c010847c:	83 c4 10             	add    $0x10,%esp
c010847f:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (p == page) {
c0108482:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108485:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0108488:	75 10                	jne    c010849a <page_insert+0x72>
            page_ref_dec(page);
c010848a:	83 ec 0c             	sub    $0xc,%esp
c010848d:	ff 75 0c             	pushl  0xc(%ebp)
c0108490:	e8 67 f1 ff ff       	call   c01075fc <page_ref_dec>
c0108495:	83 c4 10             	add    $0x10,%esp
c0108498:	eb 14                	jmp    c01084ae <page_insert+0x86>
        }
        else {
            page_remove_pte(pgdir, la, ptep);
c010849a:	83 ec 04             	sub    $0x4,%esp
c010849d:	ff 75 f4             	pushl  -0xc(%ebp)
c01084a0:	ff 75 10             	pushl  0x10(%ebp)
c01084a3:	ff 75 08             	pushl  0x8(%ebp)
c01084a6:	e8 36 fb ff ff       	call   c0107fe1 <page_remove_pte>
c01084ab:	83 c4 10             	add    $0x10,%esp
        }
    }
    *ptep = page2pa(page) | PTE_P | perm;
c01084ae:	83 ec 0c             	sub    $0xc,%esp
c01084b1:	ff 75 0c             	pushl  0xc(%ebp)
c01084b4:	e8 29 f0 ff ff       	call   c01074e2 <page2pa>
c01084b9:	83 c4 10             	add    $0x10,%esp
c01084bc:	0b 45 14             	or     0x14(%ebp),%eax
c01084bf:	83 c8 01             	or     $0x1,%eax
c01084c2:	89 c2                	mov    %eax,%edx
c01084c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01084c7:	89 10                	mov    %edx,(%eax)
    tlb_invalidate(pgdir, la);
c01084c9:	83 ec 08             	sub    $0x8,%esp
c01084cc:	ff 75 10             	pushl  0x10(%ebp)
c01084cf:	ff 75 08             	pushl  0x8(%ebp)
c01084d2:	e8 0a 00 00 00       	call   c01084e1 <tlb_invalidate>
c01084d7:	83 c4 10             	add    $0x10,%esp
    return 0;
c01084da:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01084df:	c9                   	leave  
c01084e0:	c3                   	ret    

c01084e1 <tlb_invalidate>:

// invalidate a TLB entry, but only if the page tables being
// edited are the ones currently in use by the processor.
void
tlb_invalidate(pde_t *pgdir, uintptr_t la) {
c01084e1:	55                   	push   %ebp
c01084e2:	89 e5                	mov    %esp,%ebp
c01084e4:	83 ec 18             	sub    $0x18,%esp
}

static inline uintptr_t
rcr3(void) {
    uintptr_t cr3;
    asm volatile ("mov %%cr3, %0" : "=r" (cr3) :: "memory");
c01084e7:	0f 20 d8             	mov    %cr3,%eax
c01084ea:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return cr3;
c01084ed:	8b 55 ec             	mov    -0x14(%ebp),%edx
    if (rcr3() == PADDR(pgdir)) {
c01084f0:	8b 45 08             	mov    0x8(%ebp),%eax
c01084f3:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01084f6:	81 7d f0 ff ff ff bf 	cmpl   $0xbfffffff,-0x10(%ebp)
c01084fd:	77 17                	ja     c0108516 <tlb_invalidate+0x35>
c01084ff:	ff 75 f0             	pushl  -0x10(%ebp)
c0108502:	68 ec d7 10 c0       	push   $0xc010d7ec
c0108507:	68 5d 02 00 00       	push   $0x25d
c010850c:	68 10 d8 10 c0       	push   $0xc010d810
c0108511:	e8 e2 7e ff ff       	call   c01003f8 <__panic>
c0108516:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108519:	05 00 00 00 40       	add    $0x40000000,%eax
c010851e:	39 c2                	cmp    %eax,%edx
c0108520:	75 0c                	jne    c010852e <tlb_invalidate+0x4d>
        invlpg((void *)la);
c0108522:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108525:	89 45 f4             	mov    %eax,-0xc(%ebp)
}

static inline void
invlpg(void *addr) {
    asm volatile ("invlpg (%0)" :: "r" (addr) : "memory");
c0108528:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010852b:	0f 01 38             	invlpg (%eax)
    }
}
c010852e:	90                   	nop
c010852f:	c9                   	leave  
c0108530:	c3                   	ret    

c0108531 <pgdir_alloc_page>:

// pgdir_alloc_page - call alloc_page & page_insert functions to 
//                  - allocate a page size memory & setup an addr map
//                  - pa<->la with linear address la and the PDT pgdir
struct Page *
pgdir_alloc_page(pde_t *pgdir, uintptr_t la, uint32_t perm) {
c0108531:	55                   	push   %ebp
c0108532:	89 e5                	mov    %esp,%ebp
c0108534:	83 ec 18             	sub    $0x18,%esp
    struct Page *page = alloc_page();
c0108537:	83 ec 0c             	sub    $0xc,%esp
c010853a:	6a 01                	push   $0x1
c010853c:	e8 9a f2 ff ff       	call   c01077db <alloc_pages>
c0108541:	83 c4 10             	add    $0x10,%esp
c0108544:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c0108547:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010854b:	0f 84 8c 00 00 00    	je     c01085dd <pgdir_alloc_page+0xac>
        if (page_insert(pgdir, page, la, perm) != 0) {
c0108551:	ff 75 10             	pushl  0x10(%ebp)
c0108554:	ff 75 0c             	pushl  0xc(%ebp)
c0108557:	ff 75 f4             	pushl  -0xc(%ebp)
c010855a:	ff 75 08             	pushl  0x8(%ebp)
c010855d:	e8 c6 fe ff ff       	call   c0108428 <page_insert>
c0108562:	83 c4 10             	add    $0x10,%esp
c0108565:	85 c0                	test   %eax,%eax
c0108567:	74 17                	je     c0108580 <pgdir_alloc_page+0x4f>
            free_page(page);
c0108569:	83 ec 08             	sub    $0x8,%esp
c010856c:	6a 01                	push   $0x1
c010856e:	ff 75 f4             	pushl  -0xc(%ebp)
c0108571:	e8 d1 f2 ff ff       	call   c0107847 <free_pages>
c0108576:	83 c4 10             	add    $0x10,%esp
            return NULL;
c0108579:	b8 00 00 00 00       	mov    $0x0,%eax
c010857e:	eb 60                	jmp    c01085e0 <pgdir_alloc_page+0xaf>
        }
        if (swap_init_ok){
c0108580:	a1 6c ff 19 c0       	mov    0xc019ff6c,%eax
c0108585:	85 c0                	test   %eax,%eax
c0108587:	74 54                	je     c01085dd <pgdir_alloc_page+0xac>
            if(check_mm_struct!=NULL) {
c0108589:	a1 bc 20 1a c0       	mov    0xc01a20bc,%eax
c010858e:	85 c0                	test   %eax,%eax
c0108590:	74 4b                	je     c01085dd <pgdir_alloc_page+0xac>
                swap_map_swappable(check_mm_struct, la, page, 0);
c0108592:	a1 bc 20 1a c0       	mov    0xc01a20bc,%eax
c0108597:	6a 00                	push   $0x0
c0108599:	ff 75 f4             	pushl  -0xc(%ebp)
c010859c:	ff 75 0c             	pushl  0xc(%ebp)
c010859f:	50                   	push   %eax
c01085a0:	e8 bb d5 ff ff       	call   c0105b60 <swap_map_swappable>
c01085a5:	83 c4 10             	add    $0x10,%esp
                page->pra_vaddr=la;
c01085a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01085ab:	8b 55 0c             	mov    0xc(%ebp),%edx
c01085ae:	89 50 1c             	mov    %edx,0x1c(%eax)
                assert(page_ref(page) == 1);
c01085b1:	83 ec 0c             	sub    $0xc,%esp
c01085b4:	ff 75 f4             	pushl  -0xc(%ebp)
c01085b7:	e8 11 f0 ff ff       	call   c01075cd <page_ref>
c01085bc:	83 c4 10             	add    $0x10,%esp
c01085bf:	83 f8 01             	cmp    $0x1,%eax
c01085c2:	74 19                	je     c01085dd <pgdir_alloc_page+0xac>
c01085c4:	68 d1 d8 10 c0       	push   $0xc010d8d1
c01085c9:	68 35 d8 10 c0       	push   $0xc010d835
c01085ce:	68 71 02 00 00       	push   $0x271
c01085d3:	68 10 d8 10 c0       	push   $0xc010d810
c01085d8:	e8 1b 7e ff ff       	call   c01003f8 <__panic>
            }
        }

    }

    return page;
c01085dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01085e0:	c9                   	leave  
c01085e1:	c3                   	ret    

c01085e2 <check_alloc_page>:

static void
check_alloc_page(void) {
c01085e2:	55                   	push   %ebp
c01085e3:	89 e5                	mov    %esp,%ebp
c01085e5:	83 ec 08             	sub    $0x8,%esp
    pmm_manager->check();
c01085e8:	a1 90 21 1a c0       	mov    0xc01a2190,%eax
c01085ed:	8b 40 18             	mov    0x18(%eax),%eax
c01085f0:	ff d0                	call   *%eax
    cprintf("check_alloc_page() succeeded!\n");
c01085f2:	83 ec 0c             	sub    $0xc,%esp
c01085f5:	68 e8 d8 10 c0       	push   $0xc010d8e8
c01085fa:	e8 93 7c ff ff       	call   c0100292 <cprintf>
c01085ff:	83 c4 10             	add    $0x10,%esp
}
c0108602:	90                   	nop
c0108603:	c9                   	leave  
c0108604:	c3                   	ret    

c0108605 <check_pgdir>:

static void
check_pgdir(void) {
c0108605:	55                   	push   %ebp
c0108606:	89 e5                	mov    %esp,%ebp
c0108608:	83 ec 28             	sub    $0x28,%esp
    assert(npage <= KMEMSIZE / PGSIZE);
c010860b:	a1 80 ff 19 c0       	mov    0xc019ff80,%eax
c0108610:	3d 00 80 03 00       	cmp    $0x38000,%eax
c0108615:	76 19                	jbe    c0108630 <check_pgdir+0x2b>
c0108617:	68 07 d9 10 c0       	push   $0xc010d907
c010861c:	68 35 d8 10 c0       	push   $0xc010d835
c0108621:	68 89 02 00 00       	push   $0x289
c0108626:	68 10 d8 10 c0       	push   $0xc010d810
c010862b:	e8 c8 7d ff ff       	call   c01003f8 <__panic>
    assert(boot_pgdir != NULL && (uint32_t)PGOFF(boot_pgdir) == 0);
c0108630:	a1 60 ba 12 c0       	mov    0xc012ba60,%eax
c0108635:	85 c0                	test   %eax,%eax
c0108637:	74 0e                	je     c0108647 <check_pgdir+0x42>
c0108639:	a1 60 ba 12 c0       	mov    0xc012ba60,%eax
c010863e:	25 ff 0f 00 00       	and    $0xfff,%eax
c0108643:	85 c0                	test   %eax,%eax
c0108645:	74 19                	je     c0108660 <check_pgdir+0x5b>
c0108647:	68 24 d9 10 c0       	push   $0xc010d924
c010864c:	68 35 d8 10 c0       	push   $0xc010d835
c0108651:	68 8a 02 00 00       	push   $0x28a
c0108656:	68 10 d8 10 c0       	push   $0xc010d810
c010865b:	e8 98 7d ff ff       	call   c01003f8 <__panic>
    assert(get_page(boot_pgdir, 0x0, NULL) == NULL);
c0108660:	a1 60 ba 12 c0       	mov    0xc012ba60,%eax
c0108665:	83 ec 04             	sub    $0x4,%esp
c0108668:	6a 00                	push   $0x0
c010866a:	6a 00                	push   $0x0
c010866c:	50                   	push   %eax
c010866d:	e8 19 f9 ff ff       	call   c0107f8b <get_page>
c0108672:	83 c4 10             	add    $0x10,%esp
c0108675:	85 c0                	test   %eax,%eax
c0108677:	74 19                	je     c0108692 <check_pgdir+0x8d>
c0108679:	68 5c d9 10 c0       	push   $0xc010d95c
c010867e:	68 35 d8 10 c0       	push   $0xc010d835
c0108683:	68 8b 02 00 00       	push   $0x28b
c0108688:	68 10 d8 10 c0       	push   $0xc010d810
c010868d:	e8 66 7d ff ff       	call   c01003f8 <__panic>

    struct Page *p1, *p2;
    p1 = alloc_page();
c0108692:	83 ec 0c             	sub    $0xc,%esp
c0108695:	6a 01                	push   $0x1
c0108697:	e8 3f f1 ff ff       	call   c01077db <alloc_pages>
c010869c:	83 c4 10             	add    $0x10,%esp
c010869f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(page_insert(boot_pgdir, p1, 0x0, 0) == 0);
c01086a2:	a1 60 ba 12 c0       	mov    0xc012ba60,%eax
c01086a7:	6a 00                	push   $0x0
c01086a9:	6a 00                	push   $0x0
c01086ab:	ff 75 f4             	pushl  -0xc(%ebp)
c01086ae:	50                   	push   %eax
c01086af:	e8 74 fd ff ff       	call   c0108428 <page_insert>
c01086b4:	83 c4 10             	add    $0x10,%esp
c01086b7:	85 c0                	test   %eax,%eax
c01086b9:	74 19                	je     c01086d4 <check_pgdir+0xcf>
c01086bb:	68 84 d9 10 c0       	push   $0xc010d984
c01086c0:	68 35 d8 10 c0       	push   $0xc010d835
c01086c5:	68 8f 02 00 00       	push   $0x28f
c01086ca:	68 10 d8 10 c0       	push   $0xc010d810
c01086cf:	e8 24 7d ff ff       	call   c01003f8 <__panic>

    pte_t *ptep;
    assert((ptep = get_pte(boot_pgdir, 0x0, 0)) != NULL);
c01086d4:	a1 60 ba 12 c0       	mov    0xc012ba60,%eax
c01086d9:	83 ec 04             	sub    $0x4,%esp
c01086dc:	6a 00                	push   $0x0
c01086de:	6a 00                	push   $0x0
c01086e0:	50                   	push   %eax
c01086e1:	e8 61 f7 ff ff       	call   c0107e47 <get_pte>
c01086e6:	83 c4 10             	add    $0x10,%esp
c01086e9:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01086ec:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01086f0:	75 19                	jne    c010870b <check_pgdir+0x106>
c01086f2:	68 b0 d9 10 c0       	push   $0xc010d9b0
c01086f7:	68 35 d8 10 c0       	push   $0xc010d835
c01086fc:	68 92 02 00 00       	push   $0x292
c0108701:	68 10 d8 10 c0       	push   $0xc010d810
c0108706:	e8 ed 7c ff ff       	call   c01003f8 <__panic>
    assert(pte2page(*ptep) == p1);
c010870b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010870e:	8b 00                	mov    (%eax),%eax
c0108710:	83 ec 0c             	sub    $0xc,%esp
c0108713:	50                   	push   %eax
c0108714:	e8 5e ee ff ff       	call   c0107577 <pte2page>
c0108719:	83 c4 10             	add    $0x10,%esp
c010871c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010871f:	74 19                	je     c010873a <check_pgdir+0x135>
c0108721:	68 dd d9 10 c0       	push   $0xc010d9dd
c0108726:	68 35 d8 10 c0       	push   $0xc010d835
c010872b:	68 93 02 00 00       	push   $0x293
c0108730:	68 10 d8 10 c0       	push   $0xc010d810
c0108735:	e8 be 7c ff ff       	call   c01003f8 <__panic>
    assert(page_ref(p1) == 1);
c010873a:	83 ec 0c             	sub    $0xc,%esp
c010873d:	ff 75 f4             	pushl  -0xc(%ebp)
c0108740:	e8 88 ee ff ff       	call   c01075cd <page_ref>
c0108745:	83 c4 10             	add    $0x10,%esp
c0108748:	83 f8 01             	cmp    $0x1,%eax
c010874b:	74 19                	je     c0108766 <check_pgdir+0x161>
c010874d:	68 f3 d9 10 c0       	push   $0xc010d9f3
c0108752:	68 35 d8 10 c0       	push   $0xc010d835
c0108757:	68 94 02 00 00       	push   $0x294
c010875c:	68 10 d8 10 c0       	push   $0xc010d810
c0108761:	e8 92 7c ff ff       	call   c01003f8 <__panic>

    ptep = &((pte_t *)KADDR(PDE_ADDR(boot_pgdir[0])))[1];
c0108766:	a1 60 ba 12 c0       	mov    0xc012ba60,%eax
c010876b:	8b 00                	mov    (%eax),%eax
c010876d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0108772:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0108775:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108778:	c1 e8 0c             	shr    $0xc,%eax
c010877b:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010877e:	a1 80 ff 19 c0       	mov    0xc019ff80,%eax
c0108783:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c0108786:	72 17                	jb     c010879f <check_pgdir+0x19a>
c0108788:	ff 75 ec             	pushl  -0x14(%ebp)
c010878b:	68 48 d7 10 c0       	push   $0xc010d748
c0108790:	68 96 02 00 00       	push   $0x296
c0108795:	68 10 d8 10 c0       	push   $0xc010d810
c010879a:	e8 59 7c ff ff       	call   c01003f8 <__panic>
c010879f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01087a2:	2d 00 00 00 40       	sub    $0x40000000,%eax
c01087a7:	83 c0 04             	add    $0x4,%eax
c01087aa:	89 45 f0             	mov    %eax,-0x10(%ebp)
    assert(get_pte(boot_pgdir, PGSIZE, 0) == ptep);
c01087ad:	a1 60 ba 12 c0       	mov    0xc012ba60,%eax
c01087b2:	83 ec 04             	sub    $0x4,%esp
c01087b5:	6a 00                	push   $0x0
c01087b7:	68 00 10 00 00       	push   $0x1000
c01087bc:	50                   	push   %eax
c01087bd:	e8 85 f6 ff ff       	call   c0107e47 <get_pte>
c01087c2:	83 c4 10             	add    $0x10,%esp
c01087c5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01087c8:	74 19                	je     c01087e3 <check_pgdir+0x1de>
c01087ca:	68 08 da 10 c0       	push   $0xc010da08
c01087cf:	68 35 d8 10 c0       	push   $0xc010d835
c01087d4:	68 97 02 00 00       	push   $0x297
c01087d9:	68 10 d8 10 c0       	push   $0xc010d810
c01087de:	e8 15 7c ff ff       	call   c01003f8 <__panic>

    p2 = alloc_page();
c01087e3:	83 ec 0c             	sub    $0xc,%esp
c01087e6:	6a 01                	push   $0x1
c01087e8:	e8 ee ef ff ff       	call   c01077db <alloc_pages>
c01087ed:	83 c4 10             	add    $0x10,%esp
c01087f0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(page_insert(boot_pgdir, p2, PGSIZE, PTE_U | PTE_W) == 0);
c01087f3:	a1 60 ba 12 c0       	mov    0xc012ba60,%eax
c01087f8:	6a 06                	push   $0x6
c01087fa:	68 00 10 00 00       	push   $0x1000
c01087ff:	ff 75 e4             	pushl  -0x1c(%ebp)
c0108802:	50                   	push   %eax
c0108803:	e8 20 fc ff ff       	call   c0108428 <page_insert>
c0108808:	83 c4 10             	add    $0x10,%esp
c010880b:	85 c0                	test   %eax,%eax
c010880d:	74 19                	je     c0108828 <check_pgdir+0x223>
c010880f:	68 30 da 10 c0       	push   $0xc010da30
c0108814:	68 35 d8 10 c0       	push   $0xc010d835
c0108819:	68 9a 02 00 00       	push   $0x29a
c010881e:	68 10 d8 10 c0       	push   $0xc010d810
c0108823:	e8 d0 7b ff ff       	call   c01003f8 <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c0108828:	a1 60 ba 12 c0       	mov    0xc012ba60,%eax
c010882d:	83 ec 04             	sub    $0x4,%esp
c0108830:	6a 00                	push   $0x0
c0108832:	68 00 10 00 00       	push   $0x1000
c0108837:	50                   	push   %eax
c0108838:	e8 0a f6 ff ff       	call   c0107e47 <get_pte>
c010883d:	83 c4 10             	add    $0x10,%esp
c0108840:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108843:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0108847:	75 19                	jne    c0108862 <check_pgdir+0x25d>
c0108849:	68 68 da 10 c0       	push   $0xc010da68
c010884e:	68 35 d8 10 c0       	push   $0xc010d835
c0108853:	68 9b 02 00 00       	push   $0x29b
c0108858:	68 10 d8 10 c0       	push   $0xc010d810
c010885d:	e8 96 7b ff ff       	call   c01003f8 <__panic>
    assert(*ptep & PTE_U);
c0108862:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108865:	8b 00                	mov    (%eax),%eax
c0108867:	83 e0 04             	and    $0x4,%eax
c010886a:	85 c0                	test   %eax,%eax
c010886c:	75 19                	jne    c0108887 <check_pgdir+0x282>
c010886e:	68 98 da 10 c0       	push   $0xc010da98
c0108873:	68 35 d8 10 c0       	push   $0xc010d835
c0108878:	68 9c 02 00 00       	push   $0x29c
c010887d:	68 10 d8 10 c0       	push   $0xc010d810
c0108882:	e8 71 7b ff ff       	call   c01003f8 <__panic>
    assert(*ptep & PTE_W);
c0108887:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010888a:	8b 00                	mov    (%eax),%eax
c010888c:	83 e0 02             	and    $0x2,%eax
c010888f:	85 c0                	test   %eax,%eax
c0108891:	75 19                	jne    c01088ac <check_pgdir+0x2a7>
c0108893:	68 a6 da 10 c0       	push   $0xc010daa6
c0108898:	68 35 d8 10 c0       	push   $0xc010d835
c010889d:	68 9d 02 00 00       	push   $0x29d
c01088a2:	68 10 d8 10 c0       	push   $0xc010d810
c01088a7:	e8 4c 7b ff ff       	call   c01003f8 <__panic>
    assert(boot_pgdir[0] & PTE_U);
c01088ac:	a1 60 ba 12 c0       	mov    0xc012ba60,%eax
c01088b1:	8b 00                	mov    (%eax),%eax
c01088b3:	83 e0 04             	and    $0x4,%eax
c01088b6:	85 c0                	test   %eax,%eax
c01088b8:	75 19                	jne    c01088d3 <check_pgdir+0x2ce>
c01088ba:	68 b4 da 10 c0       	push   $0xc010dab4
c01088bf:	68 35 d8 10 c0       	push   $0xc010d835
c01088c4:	68 9e 02 00 00       	push   $0x29e
c01088c9:	68 10 d8 10 c0       	push   $0xc010d810
c01088ce:	e8 25 7b ff ff       	call   c01003f8 <__panic>
    assert(page_ref(p2) == 1);
c01088d3:	83 ec 0c             	sub    $0xc,%esp
c01088d6:	ff 75 e4             	pushl  -0x1c(%ebp)
c01088d9:	e8 ef ec ff ff       	call   c01075cd <page_ref>
c01088de:	83 c4 10             	add    $0x10,%esp
c01088e1:	83 f8 01             	cmp    $0x1,%eax
c01088e4:	74 19                	je     c01088ff <check_pgdir+0x2fa>
c01088e6:	68 ca da 10 c0       	push   $0xc010daca
c01088eb:	68 35 d8 10 c0       	push   $0xc010d835
c01088f0:	68 9f 02 00 00       	push   $0x29f
c01088f5:	68 10 d8 10 c0       	push   $0xc010d810
c01088fa:	e8 f9 7a ff ff       	call   c01003f8 <__panic>

    assert(page_insert(boot_pgdir, p1, PGSIZE, 0) == 0);
c01088ff:	a1 60 ba 12 c0       	mov    0xc012ba60,%eax
c0108904:	6a 00                	push   $0x0
c0108906:	68 00 10 00 00       	push   $0x1000
c010890b:	ff 75 f4             	pushl  -0xc(%ebp)
c010890e:	50                   	push   %eax
c010890f:	e8 14 fb ff ff       	call   c0108428 <page_insert>
c0108914:	83 c4 10             	add    $0x10,%esp
c0108917:	85 c0                	test   %eax,%eax
c0108919:	74 19                	je     c0108934 <check_pgdir+0x32f>
c010891b:	68 dc da 10 c0       	push   $0xc010dadc
c0108920:	68 35 d8 10 c0       	push   $0xc010d835
c0108925:	68 a1 02 00 00       	push   $0x2a1
c010892a:	68 10 d8 10 c0       	push   $0xc010d810
c010892f:	e8 c4 7a ff ff       	call   c01003f8 <__panic>
    assert(page_ref(p1) == 2);
c0108934:	83 ec 0c             	sub    $0xc,%esp
c0108937:	ff 75 f4             	pushl  -0xc(%ebp)
c010893a:	e8 8e ec ff ff       	call   c01075cd <page_ref>
c010893f:	83 c4 10             	add    $0x10,%esp
c0108942:	83 f8 02             	cmp    $0x2,%eax
c0108945:	74 19                	je     c0108960 <check_pgdir+0x35b>
c0108947:	68 08 db 10 c0       	push   $0xc010db08
c010894c:	68 35 d8 10 c0       	push   $0xc010d835
c0108951:	68 a2 02 00 00       	push   $0x2a2
c0108956:	68 10 d8 10 c0       	push   $0xc010d810
c010895b:	e8 98 7a ff ff       	call   c01003f8 <__panic>
    assert(page_ref(p2) == 0);
c0108960:	83 ec 0c             	sub    $0xc,%esp
c0108963:	ff 75 e4             	pushl  -0x1c(%ebp)
c0108966:	e8 62 ec ff ff       	call   c01075cd <page_ref>
c010896b:	83 c4 10             	add    $0x10,%esp
c010896e:	85 c0                	test   %eax,%eax
c0108970:	74 19                	je     c010898b <check_pgdir+0x386>
c0108972:	68 1a db 10 c0       	push   $0xc010db1a
c0108977:	68 35 d8 10 c0       	push   $0xc010d835
c010897c:	68 a3 02 00 00       	push   $0x2a3
c0108981:	68 10 d8 10 c0       	push   $0xc010d810
c0108986:	e8 6d 7a ff ff       	call   c01003f8 <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c010898b:	a1 60 ba 12 c0       	mov    0xc012ba60,%eax
c0108990:	83 ec 04             	sub    $0x4,%esp
c0108993:	6a 00                	push   $0x0
c0108995:	68 00 10 00 00       	push   $0x1000
c010899a:	50                   	push   %eax
c010899b:	e8 a7 f4 ff ff       	call   c0107e47 <get_pte>
c01089a0:	83 c4 10             	add    $0x10,%esp
c01089a3:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01089a6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01089aa:	75 19                	jne    c01089c5 <check_pgdir+0x3c0>
c01089ac:	68 68 da 10 c0       	push   $0xc010da68
c01089b1:	68 35 d8 10 c0       	push   $0xc010d835
c01089b6:	68 a4 02 00 00       	push   $0x2a4
c01089bb:	68 10 d8 10 c0       	push   $0xc010d810
c01089c0:	e8 33 7a ff ff       	call   c01003f8 <__panic>
    assert(pte2page(*ptep) == p1);
c01089c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01089c8:	8b 00                	mov    (%eax),%eax
c01089ca:	83 ec 0c             	sub    $0xc,%esp
c01089cd:	50                   	push   %eax
c01089ce:	e8 a4 eb ff ff       	call   c0107577 <pte2page>
c01089d3:	83 c4 10             	add    $0x10,%esp
c01089d6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01089d9:	74 19                	je     c01089f4 <check_pgdir+0x3ef>
c01089db:	68 dd d9 10 c0       	push   $0xc010d9dd
c01089e0:	68 35 d8 10 c0       	push   $0xc010d835
c01089e5:	68 a5 02 00 00       	push   $0x2a5
c01089ea:	68 10 d8 10 c0       	push   $0xc010d810
c01089ef:	e8 04 7a ff ff       	call   c01003f8 <__panic>
    assert((*ptep & PTE_U) == 0);
c01089f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01089f7:	8b 00                	mov    (%eax),%eax
c01089f9:	83 e0 04             	and    $0x4,%eax
c01089fc:	85 c0                	test   %eax,%eax
c01089fe:	74 19                	je     c0108a19 <check_pgdir+0x414>
c0108a00:	68 2c db 10 c0       	push   $0xc010db2c
c0108a05:	68 35 d8 10 c0       	push   $0xc010d835
c0108a0a:	68 a6 02 00 00       	push   $0x2a6
c0108a0f:	68 10 d8 10 c0       	push   $0xc010d810
c0108a14:	e8 df 79 ff ff       	call   c01003f8 <__panic>

    page_remove(boot_pgdir, 0x0);
c0108a19:	a1 60 ba 12 c0       	mov    0xc012ba60,%eax
c0108a1e:	83 ec 08             	sub    $0x8,%esp
c0108a21:	6a 00                	push   $0x0
c0108a23:	50                   	push   %eax
c0108a24:	e8 c6 f9 ff ff       	call   c01083ef <page_remove>
c0108a29:	83 c4 10             	add    $0x10,%esp
    assert(page_ref(p1) == 1);
c0108a2c:	83 ec 0c             	sub    $0xc,%esp
c0108a2f:	ff 75 f4             	pushl  -0xc(%ebp)
c0108a32:	e8 96 eb ff ff       	call   c01075cd <page_ref>
c0108a37:	83 c4 10             	add    $0x10,%esp
c0108a3a:	83 f8 01             	cmp    $0x1,%eax
c0108a3d:	74 19                	je     c0108a58 <check_pgdir+0x453>
c0108a3f:	68 f3 d9 10 c0       	push   $0xc010d9f3
c0108a44:	68 35 d8 10 c0       	push   $0xc010d835
c0108a49:	68 a9 02 00 00       	push   $0x2a9
c0108a4e:	68 10 d8 10 c0       	push   $0xc010d810
c0108a53:	e8 a0 79 ff ff       	call   c01003f8 <__panic>
    assert(page_ref(p2) == 0);
c0108a58:	83 ec 0c             	sub    $0xc,%esp
c0108a5b:	ff 75 e4             	pushl  -0x1c(%ebp)
c0108a5e:	e8 6a eb ff ff       	call   c01075cd <page_ref>
c0108a63:	83 c4 10             	add    $0x10,%esp
c0108a66:	85 c0                	test   %eax,%eax
c0108a68:	74 19                	je     c0108a83 <check_pgdir+0x47e>
c0108a6a:	68 1a db 10 c0       	push   $0xc010db1a
c0108a6f:	68 35 d8 10 c0       	push   $0xc010d835
c0108a74:	68 aa 02 00 00       	push   $0x2aa
c0108a79:	68 10 d8 10 c0       	push   $0xc010d810
c0108a7e:	e8 75 79 ff ff       	call   c01003f8 <__panic>

    page_remove(boot_pgdir, PGSIZE);
c0108a83:	a1 60 ba 12 c0       	mov    0xc012ba60,%eax
c0108a88:	83 ec 08             	sub    $0x8,%esp
c0108a8b:	68 00 10 00 00       	push   $0x1000
c0108a90:	50                   	push   %eax
c0108a91:	e8 59 f9 ff ff       	call   c01083ef <page_remove>
c0108a96:	83 c4 10             	add    $0x10,%esp
    assert(page_ref(p1) == 0);
c0108a99:	83 ec 0c             	sub    $0xc,%esp
c0108a9c:	ff 75 f4             	pushl  -0xc(%ebp)
c0108a9f:	e8 29 eb ff ff       	call   c01075cd <page_ref>
c0108aa4:	83 c4 10             	add    $0x10,%esp
c0108aa7:	85 c0                	test   %eax,%eax
c0108aa9:	74 19                	je     c0108ac4 <check_pgdir+0x4bf>
c0108aab:	68 41 db 10 c0       	push   $0xc010db41
c0108ab0:	68 35 d8 10 c0       	push   $0xc010d835
c0108ab5:	68 ad 02 00 00       	push   $0x2ad
c0108aba:	68 10 d8 10 c0       	push   $0xc010d810
c0108abf:	e8 34 79 ff ff       	call   c01003f8 <__panic>
    assert(page_ref(p2) == 0);
c0108ac4:	83 ec 0c             	sub    $0xc,%esp
c0108ac7:	ff 75 e4             	pushl  -0x1c(%ebp)
c0108aca:	e8 fe ea ff ff       	call   c01075cd <page_ref>
c0108acf:	83 c4 10             	add    $0x10,%esp
c0108ad2:	85 c0                	test   %eax,%eax
c0108ad4:	74 19                	je     c0108aef <check_pgdir+0x4ea>
c0108ad6:	68 1a db 10 c0       	push   $0xc010db1a
c0108adb:	68 35 d8 10 c0       	push   $0xc010d835
c0108ae0:	68 ae 02 00 00       	push   $0x2ae
c0108ae5:	68 10 d8 10 c0       	push   $0xc010d810
c0108aea:	e8 09 79 ff ff       	call   c01003f8 <__panic>

    assert(page_ref(pde2page(boot_pgdir[0])) == 1);
c0108aef:	a1 60 ba 12 c0       	mov    0xc012ba60,%eax
c0108af4:	8b 00                	mov    (%eax),%eax
c0108af6:	83 ec 0c             	sub    $0xc,%esp
c0108af9:	50                   	push   %eax
c0108afa:	e8 b2 ea ff ff       	call   c01075b1 <pde2page>
c0108aff:	83 c4 10             	add    $0x10,%esp
c0108b02:	83 ec 0c             	sub    $0xc,%esp
c0108b05:	50                   	push   %eax
c0108b06:	e8 c2 ea ff ff       	call   c01075cd <page_ref>
c0108b0b:	83 c4 10             	add    $0x10,%esp
c0108b0e:	83 f8 01             	cmp    $0x1,%eax
c0108b11:	74 19                	je     c0108b2c <check_pgdir+0x527>
c0108b13:	68 54 db 10 c0       	push   $0xc010db54
c0108b18:	68 35 d8 10 c0       	push   $0xc010d835
c0108b1d:	68 b0 02 00 00       	push   $0x2b0
c0108b22:	68 10 d8 10 c0       	push   $0xc010d810
c0108b27:	e8 cc 78 ff ff       	call   c01003f8 <__panic>
    free_page(pde2page(boot_pgdir[0]));
c0108b2c:	a1 60 ba 12 c0       	mov    0xc012ba60,%eax
c0108b31:	8b 00                	mov    (%eax),%eax
c0108b33:	83 ec 0c             	sub    $0xc,%esp
c0108b36:	50                   	push   %eax
c0108b37:	e8 75 ea ff ff       	call   c01075b1 <pde2page>
c0108b3c:	83 c4 10             	add    $0x10,%esp
c0108b3f:	83 ec 08             	sub    $0x8,%esp
c0108b42:	6a 01                	push   $0x1
c0108b44:	50                   	push   %eax
c0108b45:	e8 fd ec ff ff       	call   c0107847 <free_pages>
c0108b4a:	83 c4 10             	add    $0x10,%esp
    boot_pgdir[0] = 0;
c0108b4d:	a1 60 ba 12 c0       	mov    0xc012ba60,%eax
c0108b52:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    cprintf("check_pgdir() succeeded!\n");
c0108b58:	83 ec 0c             	sub    $0xc,%esp
c0108b5b:	68 7b db 10 c0       	push   $0xc010db7b
c0108b60:	e8 2d 77 ff ff       	call   c0100292 <cprintf>
c0108b65:	83 c4 10             	add    $0x10,%esp
}
c0108b68:	90                   	nop
c0108b69:	c9                   	leave  
c0108b6a:	c3                   	ret    

c0108b6b <check_boot_pgdir>:

static void
check_boot_pgdir(void) {
c0108b6b:	55                   	push   %ebp
c0108b6c:	89 e5                	mov    %esp,%ebp
c0108b6e:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
c0108b71:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0108b78:	e9 a3 00 00 00       	jmp    c0108c20 <check_boot_pgdir+0xb5>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
c0108b7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108b80:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108b83:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108b86:	c1 e8 0c             	shr    $0xc,%eax
c0108b89:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0108b8c:	a1 80 ff 19 c0       	mov    0xc019ff80,%eax
c0108b91:	39 45 ec             	cmp    %eax,-0x14(%ebp)
c0108b94:	72 17                	jb     c0108bad <check_boot_pgdir+0x42>
c0108b96:	ff 75 f0             	pushl  -0x10(%ebp)
c0108b99:	68 48 d7 10 c0       	push   $0xc010d748
c0108b9e:	68 bc 02 00 00       	push   $0x2bc
c0108ba3:	68 10 d8 10 c0       	push   $0xc010d810
c0108ba8:	e8 4b 78 ff ff       	call   c01003f8 <__panic>
c0108bad:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108bb0:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0108bb5:	89 c2                	mov    %eax,%edx
c0108bb7:	a1 60 ba 12 c0       	mov    0xc012ba60,%eax
c0108bbc:	83 ec 04             	sub    $0x4,%esp
c0108bbf:	6a 00                	push   $0x0
c0108bc1:	52                   	push   %edx
c0108bc2:	50                   	push   %eax
c0108bc3:	e8 7f f2 ff ff       	call   c0107e47 <get_pte>
c0108bc8:	83 c4 10             	add    $0x10,%esp
c0108bcb:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0108bce:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0108bd2:	75 19                	jne    c0108bed <check_boot_pgdir+0x82>
c0108bd4:	68 98 db 10 c0       	push   $0xc010db98
c0108bd9:	68 35 d8 10 c0       	push   $0xc010d835
c0108bde:	68 bc 02 00 00       	push   $0x2bc
c0108be3:	68 10 d8 10 c0       	push   $0xc010d810
c0108be8:	e8 0b 78 ff ff       	call   c01003f8 <__panic>
        assert(PTE_ADDR(*ptep) == i);
c0108bed:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108bf0:	8b 00                	mov    (%eax),%eax
c0108bf2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0108bf7:	89 c2                	mov    %eax,%edx
c0108bf9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108bfc:	39 c2                	cmp    %eax,%edx
c0108bfe:	74 19                	je     c0108c19 <check_boot_pgdir+0xae>
c0108c00:	68 d5 db 10 c0       	push   $0xc010dbd5
c0108c05:	68 35 d8 10 c0       	push   $0xc010d835
c0108c0a:	68 bd 02 00 00       	push   $0x2bd
c0108c0f:	68 10 d8 10 c0       	push   $0xc010d810
c0108c14:	e8 df 77 ff ff       	call   c01003f8 <__panic>

static void
check_boot_pgdir(void) {
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
c0108c19:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
c0108c20:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108c23:	a1 80 ff 19 c0       	mov    0xc019ff80,%eax
c0108c28:	39 c2                	cmp    %eax,%edx
c0108c2a:	0f 82 4d ff ff ff    	jb     c0108b7d <check_boot_pgdir+0x12>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
        assert(PTE_ADDR(*ptep) == i);
    }

    assert(PDE_ADDR(boot_pgdir[PDX(VPT)]) == PADDR(boot_pgdir));
c0108c30:	a1 60 ba 12 c0       	mov    0xc012ba60,%eax
c0108c35:	05 ac 0f 00 00       	add    $0xfac,%eax
c0108c3a:	8b 00                	mov    (%eax),%eax
c0108c3c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0108c41:	89 c2                	mov    %eax,%edx
c0108c43:	a1 60 ba 12 c0       	mov    0xc012ba60,%eax
c0108c48:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0108c4b:	81 7d e4 ff ff ff bf 	cmpl   $0xbfffffff,-0x1c(%ebp)
c0108c52:	77 17                	ja     c0108c6b <check_boot_pgdir+0x100>
c0108c54:	ff 75 e4             	pushl  -0x1c(%ebp)
c0108c57:	68 ec d7 10 c0       	push   $0xc010d7ec
c0108c5c:	68 c0 02 00 00       	push   $0x2c0
c0108c61:	68 10 d8 10 c0       	push   $0xc010d810
c0108c66:	e8 8d 77 ff ff       	call   c01003f8 <__panic>
c0108c6b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108c6e:	05 00 00 00 40       	add    $0x40000000,%eax
c0108c73:	39 c2                	cmp    %eax,%edx
c0108c75:	74 19                	je     c0108c90 <check_boot_pgdir+0x125>
c0108c77:	68 ec db 10 c0       	push   $0xc010dbec
c0108c7c:	68 35 d8 10 c0       	push   $0xc010d835
c0108c81:	68 c0 02 00 00       	push   $0x2c0
c0108c86:	68 10 d8 10 c0       	push   $0xc010d810
c0108c8b:	e8 68 77 ff ff       	call   c01003f8 <__panic>

    assert(boot_pgdir[0] == 0);
c0108c90:	a1 60 ba 12 c0       	mov    0xc012ba60,%eax
c0108c95:	8b 00                	mov    (%eax),%eax
c0108c97:	85 c0                	test   %eax,%eax
c0108c99:	74 19                	je     c0108cb4 <check_boot_pgdir+0x149>
c0108c9b:	68 20 dc 10 c0       	push   $0xc010dc20
c0108ca0:	68 35 d8 10 c0       	push   $0xc010d835
c0108ca5:	68 c2 02 00 00       	push   $0x2c2
c0108caa:	68 10 d8 10 c0       	push   $0xc010d810
c0108caf:	e8 44 77 ff ff       	call   c01003f8 <__panic>

    struct Page *p;
    p = alloc_page();
c0108cb4:	83 ec 0c             	sub    $0xc,%esp
c0108cb7:	6a 01                	push   $0x1
c0108cb9:	e8 1d eb ff ff       	call   c01077db <alloc_pages>
c0108cbe:	83 c4 10             	add    $0x10,%esp
c0108cc1:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(page_insert(boot_pgdir, p, 0x100, PTE_W) == 0);
c0108cc4:	a1 60 ba 12 c0       	mov    0xc012ba60,%eax
c0108cc9:	6a 02                	push   $0x2
c0108ccb:	68 00 01 00 00       	push   $0x100
c0108cd0:	ff 75 e0             	pushl  -0x20(%ebp)
c0108cd3:	50                   	push   %eax
c0108cd4:	e8 4f f7 ff ff       	call   c0108428 <page_insert>
c0108cd9:	83 c4 10             	add    $0x10,%esp
c0108cdc:	85 c0                	test   %eax,%eax
c0108cde:	74 19                	je     c0108cf9 <check_boot_pgdir+0x18e>
c0108ce0:	68 34 dc 10 c0       	push   $0xc010dc34
c0108ce5:	68 35 d8 10 c0       	push   $0xc010d835
c0108cea:	68 c6 02 00 00       	push   $0x2c6
c0108cef:	68 10 d8 10 c0       	push   $0xc010d810
c0108cf4:	e8 ff 76 ff ff       	call   c01003f8 <__panic>
    assert(page_ref(p) == 1);
c0108cf9:	83 ec 0c             	sub    $0xc,%esp
c0108cfc:	ff 75 e0             	pushl  -0x20(%ebp)
c0108cff:	e8 c9 e8 ff ff       	call   c01075cd <page_ref>
c0108d04:	83 c4 10             	add    $0x10,%esp
c0108d07:	83 f8 01             	cmp    $0x1,%eax
c0108d0a:	74 19                	je     c0108d25 <check_boot_pgdir+0x1ba>
c0108d0c:	68 62 dc 10 c0       	push   $0xc010dc62
c0108d11:	68 35 d8 10 c0       	push   $0xc010d835
c0108d16:	68 c7 02 00 00       	push   $0x2c7
c0108d1b:	68 10 d8 10 c0       	push   $0xc010d810
c0108d20:	e8 d3 76 ff ff       	call   c01003f8 <__panic>
    assert(page_insert(boot_pgdir, p, 0x100 + PGSIZE, PTE_W) == 0);
c0108d25:	a1 60 ba 12 c0       	mov    0xc012ba60,%eax
c0108d2a:	6a 02                	push   $0x2
c0108d2c:	68 00 11 00 00       	push   $0x1100
c0108d31:	ff 75 e0             	pushl  -0x20(%ebp)
c0108d34:	50                   	push   %eax
c0108d35:	e8 ee f6 ff ff       	call   c0108428 <page_insert>
c0108d3a:	83 c4 10             	add    $0x10,%esp
c0108d3d:	85 c0                	test   %eax,%eax
c0108d3f:	74 19                	je     c0108d5a <check_boot_pgdir+0x1ef>
c0108d41:	68 74 dc 10 c0       	push   $0xc010dc74
c0108d46:	68 35 d8 10 c0       	push   $0xc010d835
c0108d4b:	68 c8 02 00 00       	push   $0x2c8
c0108d50:	68 10 d8 10 c0       	push   $0xc010d810
c0108d55:	e8 9e 76 ff ff       	call   c01003f8 <__panic>
    assert(page_ref(p) == 2);
c0108d5a:	83 ec 0c             	sub    $0xc,%esp
c0108d5d:	ff 75 e0             	pushl  -0x20(%ebp)
c0108d60:	e8 68 e8 ff ff       	call   c01075cd <page_ref>
c0108d65:	83 c4 10             	add    $0x10,%esp
c0108d68:	83 f8 02             	cmp    $0x2,%eax
c0108d6b:	74 19                	je     c0108d86 <check_boot_pgdir+0x21b>
c0108d6d:	68 ab dc 10 c0       	push   $0xc010dcab
c0108d72:	68 35 d8 10 c0       	push   $0xc010d835
c0108d77:	68 c9 02 00 00       	push   $0x2c9
c0108d7c:	68 10 d8 10 c0       	push   $0xc010d810
c0108d81:	e8 72 76 ff ff       	call   c01003f8 <__panic>

    const char *str = "ucore: Hello world!!";
c0108d86:	c7 45 dc bc dc 10 c0 	movl   $0xc010dcbc,-0x24(%ebp)
    strcpy((void *)0x100, str);
c0108d8d:	83 ec 08             	sub    $0x8,%esp
c0108d90:	ff 75 dc             	pushl  -0x24(%ebp)
c0108d93:	68 00 01 00 00       	push   $0x100
c0108d98:	e8 ca 22 00 00       	call   c010b067 <strcpy>
c0108d9d:	83 c4 10             	add    $0x10,%esp
    assert(strcmp((void *)0x100, (void *)(0x100 + PGSIZE)) == 0);
c0108da0:	83 ec 08             	sub    $0x8,%esp
c0108da3:	68 00 11 00 00       	push   $0x1100
c0108da8:	68 00 01 00 00       	push   $0x100
c0108dad:	e8 2f 23 00 00       	call   c010b0e1 <strcmp>
c0108db2:	83 c4 10             	add    $0x10,%esp
c0108db5:	85 c0                	test   %eax,%eax
c0108db7:	74 19                	je     c0108dd2 <check_boot_pgdir+0x267>
c0108db9:	68 d4 dc 10 c0       	push   $0xc010dcd4
c0108dbe:	68 35 d8 10 c0       	push   $0xc010d835
c0108dc3:	68 cd 02 00 00       	push   $0x2cd
c0108dc8:	68 10 d8 10 c0       	push   $0xc010d810
c0108dcd:	e8 26 76 ff ff       	call   c01003f8 <__panic>

    *(char *)(page2kva(p) + 0x100) = '\0';
c0108dd2:	83 ec 0c             	sub    $0xc,%esp
c0108dd5:	ff 75 e0             	pushl  -0x20(%ebp)
c0108dd8:	e8 55 e7 ff ff       	call   c0107532 <page2kva>
c0108ddd:	83 c4 10             	add    $0x10,%esp
c0108de0:	05 00 01 00 00       	add    $0x100,%eax
c0108de5:	c6 00 00             	movb   $0x0,(%eax)
    assert(strlen((const char *)0x100) == 0);
c0108de8:	83 ec 0c             	sub    $0xc,%esp
c0108deb:	68 00 01 00 00       	push   $0x100
c0108df0:	e8 1a 22 00 00       	call   c010b00f <strlen>
c0108df5:	83 c4 10             	add    $0x10,%esp
c0108df8:	85 c0                	test   %eax,%eax
c0108dfa:	74 19                	je     c0108e15 <check_boot_pgdir+0x2aa>
c0108dfc:	68 0c dd 10 c0       	push   $0xc010dd0c
c0108e01:	68 35 d8 10 c0       	push   $0xc010d835
c0108e06:	68 d0 02 00 00       	push   $0x2d0
c0108e0b:	68 10 d8 10 c0       	push   $0xc010d810
c0108e10:	e8 e3 75 ff ff       	call   c01003f8 <__panic>

    free_page(p);
c0108e15:	83 ec 08             	sub    $0x8,%esp
c0108e18:	6a 01                	push   $0x1
c0108e1a:	ff 75 e0             	pushl  -0x20(%ebp)
c0108e1d:	e8 25 ea ff ff       	call   c0107847 <free_pages>
c0108e22:	83 c4 10             	add    $0x10,%esp
    free_page(pde2page(boot_pgdir[0]));
c0108e25:	a1 60 ba 12 c0       	mov    0xc012ba60,%eax
c0108e2a:	8b 00                	mov    (%eax),%eax
c0108e2c:	83 ec 0c             	sub    $0xc,%esp
c0108e2f:	50                   	push   %eax
c0108e30:	e8 7c e7 ff ff       	call   c01075b1 <pde2page>
c0108e35:	83 c4 10             	add    $0x10,%esp
c0108e38:	83 ec 08             	sub    $0x8,%esp
c0108e3b:	6a 01                	push   $0x1
c0108e3d:	50                   	push   %eax
c0108e3e:	e8 04 ea ff ff       	call   c0107847 <free_pages>
c0108e43:	83 c4 10             	add    $0x10,%esp
    boot_pgdir[0] = 0;
c0108e46:	a1 60 ba 12 c0       	mov    0xc012ba60,%eax
c0108e4b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    cprintf("check_boot_pgdir() succeeded!\n");
c0108e51:	83 ec 0c             	sub    $0xc,%esp
c0108e54:	68 30 dd 10 c0       	push   $0xc010dd30
c0108e59:	e8 34 74 ff ff       	call   c0100292 <cprintf>
c0108e5e:	83 c4 10             	add    $0x10,%esp
}
c0108e61:	90                   	nop
c0108e62:	c9                   	leave  
c0108e63:	c3                   	ret    

c0108e64 <perm2str>:

//perm2str - use string 'u,r,w,-' to present the permission
static const char *
perm2str(int perm) {
c0108e64:	55                   	push   %ebp
c0108e65:	89 e5                	mov    %esp,%ebp
    static char str[4];
    str[0] = (perm & PTE_U) ? 'u' : '-';
c0108e67:	8b 45 08             	mov    0x8(%ebp),%eax
c0108e6a:	83 e0 04             	and    $0x4,%eax
c0108e6d:	85 c0                	test   %eax,%eax
c0108e6f:	74 07                	je     c0108e78 <perm2str+0x14>
c0108e71:	b8 75 00 00 00       	mov    $0x75,%eax
c0108e76:	eb 05                	jmp    c0108e7d <perm2str+0x19>
c0108e78:	b8 2d 00 00 00       	mov    $0x2d,%eax
c0108e7d:	a2 08 00 1a c0       	mov    %al,0xc01a0008
    str[1] = 'r';
c0108e82:	c6 05 09 00 1a c0 72 	movb   $0x72,0xc01a0009
    str[2] = (perm & PTE_W) ? 'w' : '-';
c0108e89:	8b 45 08             	mov    0x8(%ebp),%eax
c0108e8c:	83 e0 02             	and    $0x2,%eax
c0108e8f:	85 c0                	test   %eax,%eax
c0108e91:	74 07                	je     c0108e9a <perm2str+0x36>
c0108e93:	b8 77 00 00 00       	mov    $0x77,%eax
c0108e98:	eb 05                	jmp    c0108e9f <perm2str+0x3b>
c0108e9a:	b8 2d 00 00 00       	mov    $0x2d,%eax
c0108e9f:	a2 0a 00 1a c0       	mov    %al,0xc01a000a
    str[3] = '\0';
c0108ea4:	c6 05 0b 00 1a c0 00 	movb   $0x0,0xc01a000b
    return str;
c0108eab:	b8 08 00 1a c0       	mov    $0xc01a0008,%eax
}
c0108eb0:	5d                   	pop    %ebp
c0108eb1:	c3                   	ret    

c0108eb2 <get_pgtable_items>:
//  table:       the beginning addr of table
//  left_store:  the pointer of the high side of table's next range
//  right_store: the pointer of the low side of table's next range
// return value: 0 - not a invalid item range, perm - a valid item range with perm permission 
static int
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
c0108eb2:	55                   	push   %ebp
c0108eb3:	89 e5                	mov    %esp,%ebp
c0108eb5:	83 ec 10             	sub    $0x10,%esp
    if (start >= right) {
c0108eb8:	8b 45 10             	mov    0x10(%ebp),%eax
c0108ebb:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0108ebe:	72 0e                	jb     c0108ece <get_pgtable_items+0x1c>
        return 0;
c0108ec0:	b8 00 00 00 00       	mov    $0x0,%eax
c0108ec5:	e9 9a 00 00 00       	jmp    c0108f64 <get_pgtable_items+0xb2>
    }
    while (start < right && !(table[start] & PTE_P)) {
        start ++;
c0108eca:	83 45 10 01          	addl   $0x1,0x10(%ebp)
static int
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
    if (start >= right) {
        return 0;
    }
    while (start < right && !(table[start] & PTE_P)) {
c0108ece:	8b 45 10             	mov    0x10(%ebp),%eax
c0108ed1:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0108ed4:	73 18                	jae    c0108eee <get_pgtable_items+0x3c>
c0108ed6:	8b 45 10             	mov    0x10(%ebp),%eax
c0108ed9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0108ee0:	8b 45 14             	mov    0x14(%ebp),%eax
c0108ee3:	01 d0                	add    %edx,%eax
c0108ee5:	8b 00                	mov    (%eax),%eax
c0108ee7:	83 e0 01             	and    $0x1,%eax
c0108eea:	85 c0                	test   %eax,%eax
c0108eec:	74 dc                	je     c0108eca <get_pgtable_items+0x18>
        start ++;
    }
    if (start < right) {
c0108eee:	8b 45 10             	mov    0x10(%ebp),%eax
c0108ef1:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0108ef4:	73 69                	jae    c0108f5f <get_pgtable_items+0xad>
        if (left_store != NULL) {
c0108ef6:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0108efa:	74 08                	je     c0108f04 <get_pgtable_items+0x52>
            *left_store = start;
c0108efc:	8b 45 18             	mov    0x18(%ebp),%eax
c0108eff:	8b 55 10             	mov    0x10(%ebp),%edx
c0108f02:	89 10                	mov    %edx,(%eax)
        }
        int perm = (table[start ++] & PTE_USER);
c0108f04:	8b 45 10             	mov    0x10(%ebp),%eax
c0108f07:	8d 50 01             	lea    0x1(%eax),%edx
c0108f0a:	89 55 10             	mov    %edx,0x10(%ebp)
c0108f0d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0108f14:	8b 45 14             	mov    0x14(%ebp),%eax
c0108f17:	01 d0                	add    %edx,%eax
c0108f19:	8b 00                	mov    (%eax),%eax
c0108f1b:	83 e0 07             	and    $0x7,%eax
c0108f1e:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while (start < right && (table[start] & PTE_USER) == perm) {
c0108f21:	eb 04                	jmp    c0108f27 <get_pgtable_items+0x75>
            start ++;
c0108f23:	83 45 10 01          	addl   $0x1,0x10(%ebp)
    if (start < right) {
        if (left_store != NULL) {
            *left_store = start;
        }
        int perm = (table[start ++] & PTE_USER);
        while (start < right && (table[start] & PTE_USER) == perm) {
c0108f27:	8b 45 10             	mov    0x10(%ebp),%eax
c0108f2a:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0108f2d:	73 1d                	jae    c0108f4c <get_pgtable_items+0x9a>
c0108f2f:	8b 45 10             	mov    0x10(%ebp),%eax
c0108f32:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0108f39:	8b 45 14             	mov    0x14(%ebp),%eax
c0108f3c:	01 d0                	add    %edx,%eax
c0108f3e:	8b 00                	mov    (%eax),%eax
c0108f40:	83 e0 07             	and    $0x7,%eax
c0108f43:	89 c2                	mov    %eax,%edx
c0108f45:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108f48:	39 c2                	cmp    %eax,%edx
c0108f4a:	74 d7                	je     c0108f23 <get_pgtable_items+0x71>
            start ++;
        }
        if (right_store != NULL) {
c0108f4c:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c0108f50:	74 08                	je     c0108f5a <get_pgtable_items+0xa8>
            *right_store = start;
c0108f52:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0108f55:	8b 55 10             	mov    0x10(%ebp),%edx
c0108f58:	89 10                	mov    %edx,(%eax)
        }
        return perm;
c0108f5a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108f5d:	eb 05                	jmp    c0108f64 <get_pgtable_items+0xb2>
    }
    return 0;
c0108f5f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0108f64:	c9                   	leave  
c0108f65:	c3                   	ret    

c0108f66 <print_pgdir>:

//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
c0108f66:	55                   	push   %ebp
c0108f67:	89 e5                	mov    %esp,%ebp
c0108f69:	57                   	push   %edi
c0108f6a:	56                   	push   %esi
c0108f6b:	53                   	push   %ebx
c0108f6c:	83 ec 2c             	sub    $0x2c,%esp
    cprintf("-------------------- BEGIN --------------------\n");
c0108f6f:	83 ec 0c             	sub    $0xc,%esp
c0108f72:	68 50 dd 10 c0       	push   $0xc010dd50
c0108f77:	e8 16 73 ff ff       	call   c0100292 <cprintf>
c0108f7c:	83 c4 10             	add    $0x10,%esp
    size_t left, right = 0, perm;
c0108f7f:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c0108f86:	e9 e5 00 00 00       	jmp    c0109070 <print_pgdir+0x10a>
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c0108f8b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108f8e:	83 ec 0c             	sub    $0xc,%esp
c0108f91:	50                   	push   %eax
c0108f92:	e8 cd fe ff ff       	call   c0108e64 <perm2str>
c0108f97:	83 c4 10             	add    $0x10,%esp
c0108f9a:	89 c7                	mov    %eax,%edi
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
c0108f9c:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0108f9f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108fa2:	29 c2                	sub    %eax,%edx
c0108fa4:	89 d0                	mov    %edx,%eax
void
print_pgdir(void) {
    cprintf("-------------------- BEGIN --------------------\n");
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c0108fa6:	c1 e0 16             	shl    $0x16,%eax
c0108fa9:	89 c3                	mov    %eax,%ebx
c0108fab:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108fae:	c1 e0 16             	shl    $0x16,%eax
c0108fb1:	89 c1                	mov    %eax,%ecx
c0108fb3:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108fb6:	c1 e0 16             	shl    $0x16,%eax
c0108fb9:	89 c2                	mov    %eax,%edx
c0108fbb:	8b 75 dc             	mov    -0x24(%ebp),%esi
c0108fbe:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108fc1:	29 c6                	sub    %eax,%esi
c0108fc3:	89 f0                	mov    %esi,%eax
c0108fc5:	83 ec 08             	sub    $0x8,%esp
c0108fc8:	57                   	push   %edi
c0108fc9:	53                   	push   %ebx
c0108fca:	51                   	push   %ecx
c0108fcb:	52                   	push   %edx
c0108fcc:	50                   	push   %eax
c0108fcd:	68 81 dd 10 c0       	push   $0xc010dd81
c0108fd2:	e8 bb 72 ff ff       	call   c0100292 <cprintf>
c0108fd7:	83 c4 20             	add    $0x20,%esp
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
c0108fda:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108fdd:	c1 e0 0a             	shl    $0xa,%eax
c0108fe0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c0108fe3:	eb 4f                	jmp    c0109034 <print_pgdir+0xce>
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c0108fe5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108fe8:	83 ec 0c             	sub    $0xc,%esp
c0108feb:	50                   	push   %eax
c0108fec:	e8 73 fe ff ff       	call   c0108e64 <perm2str>
c0108ff1:	83 c4 10             	add    $0x10,%esp
c0108ff4:	89 c7                	mov    %eax,%edi
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
c0108ff6:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0108ff9:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0108ffc:	29 c2                	sub    %eax,%edx
c0108ffe:	89 d0                	mov    %edx,%eax
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c0109000:	c1 e0 0c             	shl    $0xc,%eax
c0109003:	89 c3                	mov    %eax,%ebx
c0109005:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0109008:	c1 e0 0c             	shl    $0xc,%eax
c010900b:	89 c1                	mov    %eax,%ecx
c010900d:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0109010:	c1 e0 0c             	shl    $0xc,%eax
c0109013:	89 c2                	mov    %eax,%edx
c0109015:	8b 75 d4             	mov    -0x2c(%ebp),%esi
c0109018:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010901b:	29 c6                	sub    %eax,%esi
c010901d:	89 f0                	mov    %esi,%eax
c010901f:	83 ec 08             	sub    $0x8,%esp
c0109022:	57                   	push   %edi
c0109023:	53                   	push   %ebx
c0109024:	51                   	push   %ecx
c0109025:	52                   	push   %edx
c0109026:	50                   	push   %eax
c0109027:	68 a0 dd 10 c0       	push   $0xc010dda0
c010902c:	e8 61 72 ff ff       	call   c0100292 <cprintf>
c0109031:	83 c4 20             	add    $0x20,%esp
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c0109034:	be 00 00 c0 fa       	mov    $0xfac00000,%esi
c0109039:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010903c:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010903f:	89 d3                	mov    %edx,%ebx
c0109041:	c1 e3 0a             	shl    $0xa,%ebx
c0109044:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0109047:	89 d1                	mov    %edx,%ecx
c0109049:	c1 e1 0a             	shl    $0xa,%ecx
c010904c:	83 ec 08             	sub    $0x8,%esp
c010904f:	8d 55 d4             	lea    -0x2c(%ebp),%edx
c0109052:	52                   	push   %edx
c0109053:	8d 55 d8             	lea    -0x28(%ebp),%edx
c0109056:	52                   	push   %edx
c0109057:	56                   	push   %esi
c0109058:	50                   	push   %eax
c0109059:	53                   	push   %ebx
c010905a:	51                   	push   %ecx
c010905b:	e8 52 fe ff ff       	call   c0108eb2 <get_pgtable_items>
c0109060:	83 c4 20             	add    $0x20,%esp
c0109063:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0109066:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010906a:	0f 85 75 ff ff ff    	jne    c0108fe5 <print_pgdir+0x7f>
//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
    cprintf("-------------------- BEGIN --------------------\n");
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c0109070:	b9 00 b0 fe fa       	mov    $0xfafeb000,%ecx
c0109075:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0109078:	83 ec 08             	sub    $0x8,%esp
c010907b:	8d 55 dc             	lea    -0x24(%ebp),%edx
c010907e:	52                   	push   %edx
c010907f:	8d 55 e0             	lea    -0x20(%ebp),%edx
c0109082:	52                   	push   %edx
c0109083:	51                   	push   %ecx
c0109084:	50                   	push   %eax
c0109085:	68 00 04 00 00       	push   $0x400
c010908a:	6a 00                	push   $0x0
c010908c:	e8 21 fe ff ff       	call   c0108eb2 <get_pgtable_items>
c0109091:	83 c4 20             	add    $0x20,%esp
c0109094:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0109097:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010909b:	0f 85 ea fe ff ff    	jne    c0108f8b <print_pgdir+0x25>
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
        }
    }
    cprintf("--------------------- END ---------------------\n");
c01090a1:	83 ec 0c             	sub    $0xc,%esp
c01090a4:	68 c4 dd 10 c0       	push   $0xc010ddc4
c01090a9:	e8 e4 71 ff ff       	call   c0100292 <cprintf>
c01090ae:	83 c4 10             	add    $0x10,%esp
}
c01090b1:	90                   	nop
c01090b2:	8d 65 f4             	lea    -0xc(%ebp),%esp
c01090b5:	5b                   	pop    %ebx
c01090b6:	5e                   	pop    %esi
c01090b7:	5f                   	pop    %edi
c01090b8:	5d                   	pop    %ebp
c01090b9:	c3                   	ret    

c01090ba <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c01090ba:	55                   	push   %ebp
c01090bb:	89 e5                	mov    %esp,%ebp
    return page - pages;
c01090bd:	8b 45 08             	mov    0x8(%ebp),%eax
c01090c0:	8b 15 98 21 1a c0    	mov    0xc01a2198,%edx
c01090c6:	29 d0                	sub    %edx,%eax
c01090c8:	c1 f8 05             	sar    $0x5,%eax
}
c01090cb:	5d                   	pop    %ebp
c01090cc:	c3                   	ret    

c01090cd <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c01090cd:	55                   	push   %ebp
c01090ce:	89 e5                	mov    %esp,%ebp
    return page2ppn(page) << PGSHIFT;
c01090d0:	ff 75 08             	pushl  0x8(%ebp)
c01090d3:	e8 e2 ff ff ff       	call   c01090ba <page2ppn>
c01090d8:	83 c4 04             	add    $0x4,%esp
c01090db:	c1 e0 0c             	shl    $0xc,%eax
}
c01090de:	c9                   	leave  
c01090df:	c3                   	ret    

c01090e0 <page2kva>:
    }
    return &pages[PPN(pa)];
}

static inline void *
page2kva(struct Page *page) {
c01090e0:	55                   	push   %ebp
c01090e1:	89 e5                	mov    %esp,%ebp
c01090e3:	83 ec 18             	sub    $0x18,%esp
    return KADDR(page2pa(page));
c01090e6:	ff 75 08             	pushl  0x8(%ebp)
c01090e9:	e8 df ff ff ff       	call   c01090cd <page2pa>
c01090ee:	83 c4 04             	add    $0x4,%esp
c01090f1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01090f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01090f7:	c1 e8 0c             	shr    $0xc,%eax
c01090fa:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01090fd:	a1 80 ff 19 c0       	mov    0xc019ff80,%eax
c0109102:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0109105:	72 14                	jb     c010911b <page2kva+0x3b>
c0109107:	ff 75 f4             	pushl  -0xc(%ebp)
c010910a:	68 f8 dd 10 c0       	push   $0xc010ddf8
c010910f:	6a 65                	push   $0x65
c0109111:	68 1b de 10 c0       	push   $0xc010de1b
c0109116:	e8 dd 72 ff ff       	call   c01003f8 <__panic>
c010911b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010911e:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c0109123:	c9                   	leave  
c0109124:	c3                   	ret    

c0109125 <swapfs_init>:
#include <ide.h>
#include <pmm.h>
#include <assert.h>

void
swapfs_init(void) {
c0109125:	55                   	push   %ebp
c0109126:	89 e5                	mov    %esp,%ebp
c0109128:	83 ec 08             	sub    $0x8,%esp
    static_assert((PGSIZE % SECTSIZE) == 0);
    if (!ide_device_valid(SWAP_DEV_NO)) {
c010912b:	83 ec 0c             	sub    $0xc,%esp
c010912e:	6a 01                	push   $0x1
c0109130:	e8 9f 80 ff ff       	call   c01011d4 <ide_device_valid>
c0109135:	83 c4 10             	add    $0x10,%esp
c0109138:	85 c0                	test   %eax,%eax
c010913a:	75 14                	jne    c0109150 <swapfs_init+0x2b>
        panic("swap fs isn't available.\n");
c010913c:	83 ec 04             	sub    $0x4,%esp
c010913f:	68 29 de 10 c0       	push   $0xc010de29
c0109144:	6a 0d                	push   $0xd
c0109146:	68 43 de 10 c0       	push   $0xc010de43
c010914b:	e8 a8 72 ff ff       	call   c01003f8 <__panic>
    }
    max_swap_offset = ide_device_size(SWAP_DEV_NO) / (PGSIZE / SECTSIZE);
c0109150:	83 ec 0c             	sub    $0xc,%esp
c0109153:	6a 01                	push   $0x1
c0109155:	e8 ba 80 ff ff       	call   c0101214 <ide_device_size>
c010915a:	83 c4 10             	add    $0x10,%esp
c010915d:	c1 e8 03             	shr    $0x3,%eax
c0109160:	a3 5c 21 1a c0       	mov    %eax,0xc01a215c
}
c0109165:	90                   	nop
c0109166:	c9                   	leave  
c0109167:	c3                   	ret    

c0109168 <swapfs_read>:

int
swapfs_read(swap_entry_t entry, struct Page *page) {
c0109168:	55                   	push   %ebp
c0109169:	89 e5                	mov    %esp,%ebp
c010916b:	83 ec 18             	sub    $0x18,%esp
    return ide_read_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c010916e:	83 ec 0c             	sub    $0xc,%esp
c0109171:	ff 75 0c             	pushl  0xc(%ebp)
c0109174:	e8 67 ff ff ff       	call   c01090e0 <page2kva>
c0109179:	83 c4 10             	add    $0x10,%esp
c010917c:	89 c2                	mov    %eax,%edx
c010917e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109181:	c1 e8 08             	shr    $0x8,%eax
c0109184:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109187:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010918b:	74 0a                	je     c0109197 <swapfs_read+0x2f>
c010918d:	a1 5c 21 1a c0       	mov    0xc01a215c,%eax
c0109192:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0109195:	72 14                	jb     c01091ab <swapfs_read+0x43>
c0109197:	ff 75 08             	pushl  0x8(%ebp)
c010919a:	68 54 de 10 c0       	push   $0xc010de54
c010919f:	6a 14                	push   $0x14
c01091a1:	68 43 de 10 c0       	push   $0xc010de43
c01091a6:	e8 4d 72 ff ff       	call   c01003f8 <__panic>
c01091ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01091ae:	c1 e0 03             	shl    $0x3,%eax
c01091b1:	6a 08                	push   $0x8
c01091b3:	52                   	push   %edx
c01091b4:	50                   	push   %eax
c01091b5:	6a 01                	push   $0x1
c01091b7:	e8 98 80 ff ff       	call   c0101254 <ide_read_secs>
c01091bc:	83 c4 10             	add    $0x10,%esp
}
c01091bf:	c9                   	leave  
c01091c0:	c3                   	ret    

c01091c1 <swapfs_write>:

int
swapfs_write(swap_entry_t entry, struct Page *page) {
c01091c1:	55                   	push   %ebp
c01091c2:	89 e5                	mov    %esp,%ebp
c01091c4:	83 ec 18             	sub    $0x18,%esp
    return ide_write_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c01091c7:	83 ec 0c             	sub    $0xc,%esp
c01091ca:	ff 75 0c             	pushl  0xc(%ebp)
c01091cd:	e8 0e ff ff ff       	call   c01090e0 <page2kva>
c01091d2:	83 c4 10             	add    $0x10,%esp
c01091d5:	89 c2                	mov    %eax,%edx
c01091d7:	8b 45 08             	mov    0x8(%ebp),%eax
c01091da:	c1 e8 08             	shr    $0x8,%eax
c01091dd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01091e0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01091e4:	74 0a                	je     c01091f0 <swapfs_write+0x2f>
c01091e6:	a1 5c 21 1a c0       	mov    0xc01a215c,%eax
c01091eb:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c01091ee:	72 14                	jb     c0109204 <swapfs_write+0x43>
c01091f0:	ff 75 08             	pushl  0x8(%ebp)
c01091f3:	68 54 de 10 c0       	push   $0xc010de54
c01091f8:	6a 19                	push   $0x19
c01091fa:	68 43 de 10 c0       	push   $0xc010de43
c01091ff:	e8 f4 71 ff ff       	call   c01003f8 <__panic>
c0109204:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109207:	c1 e0 03             	shl    $0x3,%eax
c010920a:	6a 08                	push   $0x8
c010920c:	52                   	push   %edx
c010920d:	50                   	push   %eax
c010920e:	6a 01                	push   $0x1
c0109210:	e8 69 82 ff ff       	call   c010147e <ide_write_secs>
c0109215:	83 c4 10             	add    $0x10,%esp
}
c0109218:	c9                   	leave  
c0109219:	c3                   	ret    

c010921a <kernel_thread_entry>:
.text
.globl kernel_thread_entry
kernel_thread_entry:        # void kernel_thread(void)

    pushl %edx              # push arg
c010921a:	52                   	push   %edx
    call *%ebx              # call fn
c010921b:	ff d3                	call   *%ebx

    pushl %eax              # save the return value of fn(arg)
c010921d:	50                   	push   %eax
    call do_exit            # call do_exit to terminate current thread
c010921e:	e8 1c 0c 00 00       	call   c0109e3f <do_exit>

c0109223 <switch_to>:
.text
.globl switch_to
switch_to:                      # switch_to(from, to)

    # save from's registers
    movl 4(%esp), %eax          # eax points to from
c0109223:	8b 44 24 04          	mov    0x4(%esp),%eax
    popl 0(%eax)                # save eip !popl
c0109227:	8f 00                	popl   (%eax)
    movl %esp, 4(%eax)
c0109229:	89 60 04             	mov    %esp,0x4(%eax)
    movl %ebx, 8(%eax)
c010922c:	89 58 08             	mov    %ebx,0x8(%eax)
    movl %ecx, 12(%eax)
c010922f:	89 48 0c             	mov    %ecx,0xc(%eax)
    movl %edx, 16(%eax)
c0109232:	89 50 10             	mov    %edx,0x10(%eax)
    movl %esi, 20(%eax)
c0109235:	89 70 14             	mov    %esi,0x14(%eax)
    movl %edi, 24(%eax)
c0109238:	89 78 18             	mov    %edi,0x18(%eax)
    movl %ebp, 28(%eax)
c010923b:	89 68 1c             	mov    %ebp,0x1c(%eax)

    # restore to's registers
    movl 4(%esp), %eax          # not 8(%esp): popped return address already
c010923e:	8b 44 24 04          	mov    0x4(%esp),%eax
                                # eax now points to to
    movl 28(%eax), %ebp
c0109242:	8b 68 1c             	mov    0x1c(%eax),%ebp
    movl 24(%eax), %edi
c0109245:	8b 78 18             	mov    0x18(%eax),%edi
    movl 20(%eax), %esi
c0109248:	8b 70 14             	mov    0x14(%eax),%esi
    movl 16(%eax), %edx
c010924b:	8b 50 10             	mov    0x10(%eax),%edx
    movl 12(%eax), %ecx
c010924e:	8b 48 0c             	mov    0xc(%eax),%ecx
    movl 8(%eax), %ebx
c0109251:	8b 58 08             	mov    0x8(%eax),%ebx
    movl 4(%eax), %esp
c0109254:	8b 60 04             	mov    0x4(%eax),%esp

    pushl 0(%eax)               # push eip
c0109257:	ff 30                	pushl  (%eax)

    ret
c0109259:	c3                   	ret    

c010925a <test_and_set_bit>:
 * test_and_set_bit - Atomically set a bit and return its old value
 * @nr:     the bit to set
 * @addr:   the address to count from
 * */
static inline bool
test_and_set_bit(int nr, volatile void *addr) {
c010925a:	55                   	push   %ebp
c010925b:	89 e5                	mov    %esp,%ebp
c010925d:	83 ec 10             	sub    $0x10,%esp
    int oldbit;
    asm volatile ("btsl %2, %1; sbbl %0, %0" : "=r" (oldbit), "=m" (*(volatile long *)addr) : "Ir" (nr) : "memory");
c0109260:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109263:	8b 45 08             	mov    0x8(%ebp),%eax
c0109266:	0f ab 02             	bts    %eax,(%edx)
c0109269:	19 c0                	sbb    %eax,%eax
c010926b:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return oldbit != 0;
c010926e:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0109272:	0f 95 c0             	setne  %al
c0109275:	0f b6 c0             	movzbl %al,%eax
}
c0109278:	c9                   	leave  
c0109279:	c3                   	ret    

c010927a <test_and_clear_bit>:
 * test_and_clear_bit - Atomically clear a bit and return its old value
 * @nr:     the bit to clear
 * @addr:   the address to count from
 * */
static inline bool
test_and_clear_bit(int nr, volatile void *addr) {
c010927a:	55                   	push   %ebp
c010927b:	89 e5                	mov    %esp,%ebp
c010927d:	83 ec 10             	sub    $0x10,%esp
    int oldbit;
    asm volatile ("btrl %2, %1; sbbl %0, %0" : "=r" (oldbit), "=m" (*(volatile long *)addr) : "Ir" (nr) : "memory");
c0109280:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109283:	8b 45 08             	mov    0x8(%ebp),%eax
c0109286:	0f b3 02             	btr    %eax,(%edx)
c0109289:	19 c0                	sbb    %eax,%eax
c010928b:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return oldbit != 0;
c010928e:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0109292:	0f 95 c0             	setne  %al
c0109295:	0f b6 c0             	movzbl %al,%eax
}
c0109298:	c9                   	leave  
c0109299:	c3                   	ret    

c010929a <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c010929a:	55                   	push   %ebp
c010929b:	89 e5                	mov    %esp,%ebp
c010929d:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c01092a0:	9c                   	pushf  
c01092a1:	58                   	pop    %eax
c01092a2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c01092a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c01092a8:	25 00 02 00 00       	and    $0x200,%eax
c01092ad:	85 c0                	test   %eax,%eax
c01092af:	74 0c                	je     c01092bd <__intr_save+0x23>
        intr_disable();
c01092b1:	e8 01 8f ff ff       	call   c01021b7 <intr_disable>
        return 1;
c01092b6:	b8 01 00 00 00       	mov    $0x1,%eax
c01092bb:	eb 05                	jmp    c01092c2 <__intr_save+0x28>
    }
    return 0;
c01092bd:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01092c2:	c9                   	leave  
c01092c3:	c3                   	ret    

c01092c4 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c01092c4:	55                   	push   %ebp
c01092c5:	89 e5                	mov    %esp,%ebp
c01092c7:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c01092ca:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01092ce:	74 05                	je     c01092d5 <__intr_restore+0x11>
        intr_enable();
c01092d0:	e8 db 8e ff ff       	call   c01021b0 <intr_enable>
    }
}
c01092d5:	90                   	nop
c01092d6:	c9                   	leave  
c01092d7:	c3                   	ret    

c01092d8 <try_lock>:
lock_init(lock_t *lock) {
    *lock = 0;
}

static inline bool
try_lock(lock_t *lock) {
c01092d8:	55                   	push   %ebp
c01092d9:	89 e5                	mov    %esp,%ebp
    return !test_and_set_bit(0, lock);
c01092db:	ff 75 08             	pushl  0x8(%ebp)
c01092de:	6a 00                	push   $0x0
c01092e0:	e8 75 ff ff ff       	call   c010925a <test_and_set_bit>
c01092e5:	83 c4 08             	add    $0x8,%esp
c01092e8:	85 c0                	test   %eax,%eax
c01092ea:	0f 94 c0             	sete   %al
c01092ed:	0f b6 c0             	movzbl %al,%eax
}
c01092f0:	c9                   	leave  
c01092f1:	c3                   	ret    

c01092f2 <lock>:

static inline void
lock(lock_t *lock) {
c01092f2:	55                   	push   %ebp
c01092f3:	89 e5                	mov    %esp,%ebp
c01092f5:	83 ec 08             	sub    $0x8,%esp
    while (!try_lock(lock)) {
c01092f8:	eb 05                	jmp    c01092ff <lock+0xd>
        schedule();
c01092fa:	e8 5c 1a 00 00       	call   c010ad5b <schedule>
    return !test_and_set_bit(0, lock);
}

static inline void
lock(lock_t *lock) {
    while (!try_lock(lock)) {
c01092ff:	83 ec 0c             	sub    $0xc,%esp
c0109302:	ff 75 08             	pushl  0x8(%ebp)
c0109305:	e8 ce ff ff ff       	call   c01092d8 <try_lock>
c010930a:	83 c4 10             	add    $0x10,%esp
c010930d:	85 c0                	test   %eax,%eax
c010930f:	74 e9                	je     c01092fa <lock+0x8>
        schedule();
    }
}
c0109311:	90                   	nop
c0109312:	c9                   	leave  
c0109313:	c3                   	ret    

c0109314 <unlock>:

static inline void
unlock(lock_t *lock) {
c0109314:	55                   	push   %ebp
c0109315:	89 e5                	mov    %esp,%ebp
c0109317:	83 ec 08             	sub    $0x8,%esp
    if (!test_and_clear_bit(0, lock)) {
c010931a:	ff 75 08             	pushl  0x8(%ebp)
c010931d:	6a 00                	push   $0x0
c010931f:	e8 56 ff ff ff       	call   c010927a <test_and_clear_bit>
c0109324:	83 c4 08             	add    $0x8,%esp
c0109327:	85 c0                	test   %eax,%eax
c0109329:	75 14                	jne    c010933f <unlock+0x2b>
        panic("Unlock failed.\n");
c010932b:	83 ec 04             	sub    $0x4,%esp
c010932e:	68 74 de 10 c0       	push   $0xc010de74
c0109333:	6a 34                	push   $0x34
c0109335:	68 84 de 10 c0       	push   $0xc010de84
c010933a:	e8 b9 70 ff ff       	call   c01003f8 <__panic>
    }
}
c010933f:	90                   	nop
c0109340:	c9                   	leave  
c0109341:	c3                   	ret    

c0109342 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0109342:	55                   	push   %ebp
c0109343:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0109345:	8b 45 08             	mov    0x8(%ebp),%eax
c0109348:	8b 15 98 21 1a c0    	mov    0xc01a2198,%edx
c010934e:	29 d0                	sub    %edx,%eax
c0109350:	c1 f8 05             	sar    $0x5,%eax
}
c0109353:	5d                   	pop    %ebp
c0109354:	c3                   	ret    

c0109355 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0109355:	55                   	push   %ebp
c0109356:	89 e5                	mov    %esp,%ebp
    return page2ppn(page) << PGSHIFT;
c0109358:	ff 75 08             	pushl  0x8(%ebp)
c010935b:	e8 e2 ff ff ff       	call   c0109342 <page2ppn>
c0109360:	83 c4 04             	add    $0x4,%esp
c0109363:	c1 e0 0c             	shl    $0xc,%eax
}
c0109366:	c9                   	leave  
c0109367:	c3                   	ret    

c0109368 <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c0109368:	55                   	push   %ebp
c0109369:	89 e5                	mov    %esp,%ebp
c010936b:	83 ec 08             	sub    $0x8,%esp
    if (PPN(pa) >= npage) {
c010936e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109371:	c1 e8 0c             	shr    $0xc,%eax
c0109374:	89 c2                	mov    %eax,%edx
c0109376:	a1 80 ff 19 c0       	mov    0xc019ff80,%eax
c010937b:	39 c2                	cmp    %eax,%edx
c010937d:	72 14                	jb     c0109393 <pa2page+0x2b>
        panic("pa2page called with invalid pa");
c010937f:	83 ec 04             	sub    $0x4,%esp
c0109382:	68 98 de 10 c0       	push   $0xc010de98
c0109387:	6a 5e                	push   $0x5e
c0109389:	68 b7 de 10 c0       	push   $0xc010deb7
c010938e:	e8 65 70 ff ff       	call   c01003f8 <__panic>
    }
    return &pages[PPN(pa)];
c0109393:	a1 98 21 1a c0       	mov    0xc01a2198,%eax
c0109398:	8b 55 08             	mov    0x8(%ebp),%edx
c010939b:	c1 ea 0c             	shr    $0xc,%edx
c010939e:	c1 e2 05             	shl    $0x5,%edx
c01093a1:	01 d0                	add    %edx,%eax
}
c01093a3:	c9                   	leave  
c01093a4:	c3                   	ret    

c01093a5 <page2kva>:

static inline void *
page2kva(struct Page *page) {
c01093a5:	55                   	push   %ebp
c01093a6:	89 e5                	mov    %esp,%ebp
c01093a8:	83 ec 18             	sub    $0x18,%esp
    return KADDR(page2pa(page));
c01093ab:	ff 75 08             	pushl  0x8(%ebp)
c01093ae:	e8 a2 ff ff ff       	call   c0109355 <page2pa>
c01093b3:	83 c4 04             	add    $0x4,%esp
c01093b6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01093b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01093bc:	c1 e8 0c             	shr    $0xc,%eax
c01093bf:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01093c2:	a1 80 ff 19 c0       	mov    0xc019ff80,%eax
c01093c7:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c01093ca:	72 14                	jb     c01093e0 <page2kva+0x3b>
c01093cc:	ff 75 f4             	pushl  -0xc(%ebp)
c01093cf:	68 c8 de 10 c0       	push   $0xc010dec8
c01093d4:	6a 65                	push   $0x65
c01093d6:	68 b7 de 10 c0       	push   $0xc010deb7
c01093db:	e8 18 70 ff ff       	call   c01003f8 <__panic>
c01093e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01093e3:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c01093e8:	c9                   	leave  
c01093e9:	c3                   	ret    

c01093ea <kva2page>:

static inline struct Page *
kva2page(void *kva) {
c01093ea:	55                   	push   %ebp
c01093eb:	89 e5                	mov    %esp,%ebp
c01093ed:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PADDR(kva));
c01093f0:	8b 45 08             	mov    0x8(%ebp),%eax
c01093f3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01093f6:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c01093fd:	77 14                	ja     c0109413 <kva2page+0x29>
c01093ff:	ff 75 f4             	pushl  -0xc(%ebp)
c0109402:	68 ec de 10 c0       	push   $0xc010deec
c0109407:	6a 6a                	push   $0x6a
c0109409:	68 b7 de 10 c0       	push   $0xc010deb7
c010940e:	e8 e5 6f ff ff       	call   c01003f8 <__panic>
c0109413:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109416:	05 00 00 00 40       	add    $0x40000000,%eax
c010941b:	83 ec 0c             	sub    $0xc,%esp
c010941e:	50                   	push   %eax
c010941f:	e8 44 ff ff ff       	call   c0109368 <pa2page>
c0109424:	83 c4 10             	add    $0x10,%esp
}
c0109427:	c9                   	leave  
c0109428:	c3                   	ret    

c0109429 <mm_count_inc>:

static inline int
mm_count_inc(struct mm_struct *mm) {
c0109429:	55                   	push   %ebp
c010942a:	89 e5                	mov    %esp,%ebp
    mm->mm_count += 1;
c010942c:	8b 45 08             	mov    0x8(%ebp),%eax
c010942f:	8b 40 18             	mov    0x18(%eax),%eax
c0109432:	8d 50 01             	lea    0x1(%eax),%edx
c0109435:	8b 45 08             	mov    0x8(%ebp),%eax
c0109438:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c010943b:	8b 45 08             	mov    0x8(%ebp),%eax
c010943e:	8b 40 18             	mov    0x18(%eax),%eax
}
c0109441:	5d                   	pop    %ebp
c0109442:	c3                   	ret    

c0109443 <mm_count_dec>:

static inline int
mm_count_dec(struct mm_struct *mm) {
c0109443:	55                   	push   %ebp
c0109444:	89 e5                	mov    %esp,%ebp
    mm->mm_count -= 1;
c0109446:	8b 45 08             	mov    0x8(%ebp),%eax
c0109449:	8b 40 18             	mov    0x18(%eax),%eax
c010944c:	8d 50 ff             	lea    -0x1(%eax),%edx
c010944f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109452:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c0109455:	8b 45 08             	mov    0x8(%ebp),%eax
c0109458:	8b 40 18             	mov    0x18(%eax),%eax
}
c010945b:	5d                   	pop    %ebp
c010945c:	c3                   	ret    

c010945d <lock_mm>:

static inline void
lock_mm(struct mm_struct *mm) {
c010945d:	55                   	push   %ebp
c010945e:	89 e5                	mov    %esp,%ebp
c0109460:	83 ec 08             	sub    $0x8,%esp
    if (mm != NULL) {
c0109463:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0109467:	74 12                	je     c010947b <lock_mm+0x1e>
        lock(&(mm->mm_lock));
c0109469:	8b 45 08             	mov    0x8(%ebp),%eax
c010946c:	83 c0 1c             	add    $0x1c,%eax
c010946f:	83 ec 0c             	sub    $0xc,%esp
c0109472:	50                   	push   %eax
c0109473:	e8 7a fe ff ff       	call   c01092f2 <lock>
c0109478:	83 c4 10             	add    $0x10,%esp
    }
}
c010947b:	90                   	nop
c010947c:	c9                   	leave  
c010947d:	c3                   	ret    

c010947e <unlock_mm>:

static inline void
unlock_mm(struct mm_struct *mm) {
c010947e:	55                   	push   %ebp
c010947f:	89 e5                	mov    %esp,%ebp
c0109481:	83 ec 08             	sub    $0x8,%esp
    if (mm != NULL) {
c0109484:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0109488:	74 12                	je     c010949c <unlock_mm+0x1e>
        unlock(&(mm->mm_lock));
c010948a:	8b 45 08             	mov    0x8(%ebp),%eax
c010948d:	83 c0 1c             	add    $0x1c,%eax
c0109490:	83 ec 0c             	sub    $0xc,%esp
c0109493:	50                   	push   %eax
c0109494:	e8 7b fe ff ff       	call   c0109314 <unlock>
c0109499:	83 c4 10             	add    $0x10,%esp
    }
}
c010949c:	90                   	nop
c010949d:	c9                   	leave  
c010949e:	c3                   	ret    

c010949f <alloc_proc>:
void forkrets(struct trapframe *tf);
void switch_to(struct context *from, struct context *to);

// alloc_proc - alloc a proc_struct and init all fields of proc_struct
static struct proc_struct *
alloc_proc(void) {
c010949f:	55                   	push   %ebp
c01094a0:	89 e5                	mov    %esp,%ebp
c01094a2:	83 ec 18             	sub    $0x18,%esp
    struct proc_struct *proc = kmalloc(sizeof(struct proc_struct));
c01094a5:	83 ec 0c             	sub    $0xc,%esp
c01094a8:	6a 7c                	push   $0x7c
c01094aa:	e8 ff c3 ff ff       	call   c01058ae <kmalloc>
c01094af:	83 c4 10             	add    $0x10,%esp
c01094b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (proc != NULL) {
c01094b5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01094b9:	0f 84 b9 00 00 00    	je     c0109578 <alloc_proc+0xd9>
    /*
     * below fields(add in LAB5) in proc_struct need to be initialized	
     *       uint32_t wait_state;                        // waiting state
     *       struct proc_struct *cptr, *yptr, *optr;     // relations between processes
	 */
        proc->state = PROC_UNINIT;
c01094bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01094c2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        proc->pid = -1;         // an invalid pid
c01094c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01094cb:	c7 40 04 ff ff ff ff 	movl   $0xffffffff,0x4(%eax)
        proc->runs = 0;
c01094d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01094d5:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        proc->kstack = 0;
c01094dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01094df:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        proc->need_resched = 0;
c01094e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01094e9:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
        proc->parent = NULL;
c01094f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01094f3:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
        proc->mm = NULL;
c01094fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01094fd:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
        proc->tf = NULL;
c0109504:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109507:	c7 40 3c 00 00 00 00 	movl   $0x0,0x3c(%eax)
        proc->cr3 = boot_cr3;   // kernel threads share boot_cr3
c010950e:	8b 15 94 21 1a c0    	mov    0xc01a2194,%edx
c0109514:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109517:	89 50 40             	mov    %edx,0x40(%eax)
        proc->flags = 0;
c010951a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010951d:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
        // NEW
        proc->wait_state = 0;
c0109524:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109527:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
        proc->cptr = NULL;
c010952e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109531:	c7 40 70 00 00 00 00 	movl   $0x0,0x70(%eax)
        proc->yptr = NULL;
c0109538:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010953b:	c7 40 74 00 00 00 00 	movl   $0x0,0x74(%eax)
        proc->optr = NULL;
c0109542:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109545:	c7 40 78 00 00 00 00 	movl   $0x0,0x78(%eax)

        memset(&(proc->context), 0, sizeof(struct context));
c010954c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010954f:	83 c0 1c             	add    $0x1c,%eax
c0109552:	83 ec 04             	sub    $0x4,%esp
c0109555:	6a 20                	push   $0x20
c0109557:	6a 00                	push   $0x0
c0109559:	50                   	push   %eax
c010955a:	e8 e1 1d 00 00       	call   c010b340 <memset>
c010955f:	83 c4 10             	add    $0x10,%esp
        memset(proc->name, 0, sizeof(char) * (PROC_NAME_LEN + 1));   
c0109562:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109565:	83 c0 48             	add    $0x48,%eax
c0109568:	83 ec 04             	sub    $0x4,%esp
c010956b:	6a 10                	push   $0x10
c010956d:	6a 00                	push   $0x0
c010956f:	50                   	push   %eax
c0109570:	e8 cb 1d 00 00       	call   c010b340 <memset>
c0109575:	83 c4 10             	add    $0x10,%esp
    }
    return proc;
c0109578:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010957b:	c9                   	leave  
c010957c:	c3                   	ret    

c010957d <set_proc_name>:

// set_proc_name - set the name of proc
char *
set_proc_name(struct proc_struct *proc, const char *name) {
c010957d:	55                   	push   %ebp
c010957e:	89 e5                	mov    %esp,%ebp
c0109580:	83 ec 08             	sub    $0x8,%esp
    memset(proc->name, 0, sizeof(proc->name));
c0109583:	8b 45 08             	mov    0x8(%ebp),%eax
c0109586:	83 c0 48             	add    $0x48,%eax
c0109589:	83 ec 04             	sub    $0x4,%esp
c010958c:	6a 10                	push   $0x10
c010958e:	6a 00                	push   $0x0
c0109590:	50                   	push   %eax
c0109591:	e8 aa 1d 00 00       	call   c010b340 <memset>
c0109596:	83 c4 10             	add    $0x10,%esp
    return memcpy(proc->name, name, PROC_NAME_LEN);
c0109599:	8b 45 08             	mov    0x8(%ebp),%eax
c010959c:	83 c0 48             	add    $0x48,%eax
c010959f:	83 ec 04             	sub    $0x4,%esp
c01095a2:	6a 0f                	push   $0xf
c01095a4:	ff 75 0c             	pushl  0xc(%ebp)
c01095a7:	50                   	push   %eax
c01095a8:	e8 76 1e 00 00       	call   c010b423 <memcpy>
c01095ad:	83 c4 10             	add    $0x10,%esp
}
c01095b0:	c9                   	leave  
c01095b1:	c3                   	ret    

c01095b2 <get_proc_name>:

// get_proc_name - get the name of proc
char *
get_proc_name(struct proc_struct *proc) {
c01095b2:	55                   	push   %ebp
c01095b3:	89 e5                	mov    %esp,%ebp
c01095b5:	83 ec 08             	sub    $0x8,%esp
    static char name[PROC_NAME_LEN + 1];
    memset(name, 0, sizeof(name));
c01095b8:	83 ec 04             	sub    $0x4,%esp
c01095bb:	6a 10                	push   $0x10
c01095bd:	6a 00                	push   $0x0
c01095bf:	68 44 20 1a c0       	push   $0xc01a2044
c01095c4:	e8 77 1d 00 00       	call   c010b340 <memset>
c01095c9:	83 c4 10             	add    $0x10,%esp
    return memcpy(name, proc->name, PROC_NAME_LEN);
c01095cc:	8b 45 08             	mov    0x8(%ebp),%eax
c01095cf:	83 c0 48             	add    $0x48,%eax
c01095d2:	83 ec 04             	sub    $0x4,%esp
c01095d5:	6a 0f                	push   $0xf
c01095d7:	50                   	push   %eax
c01095d8:	68 44 20 1a c0       	push   $0xc01a2044
c01095dd:	e8 41 1e 00 00       	call   c010b423 <memcpy>
c01095e2:	83 c4 10             	add    $0x10,%esp
}
c01095e5:	c9                   	leave  
c01095e6:	c3                   	ret    

c01095e7 <set_links>:

// set_links - set the relation links of process
static void
set_links(struct proc_struct *proc) {
c01095e7:	55                   	push   %ebp
c01095e8:	89 e5                	mov    %esp,%ebp
c01095ea:	83 ec 20             	sub    $0x20,%esp
    list_add(&proc_list, &(proc->list_link));
c01095ed:	8b 45 08             	mov    0x8(%ebp),%eax
c01095f0:	83 c0 58             	add    $0x58,%eax
c01095f3:	c7 45 fc 9c 21 1a c0 	movl   $0xc01a219c,-0x4(%ebp)
c01095fa:	89 45 f8             	mov    %eax,-0x8(%ebp)
c01095fd:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109600:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109603:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0109606:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0109609:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010960c:	8b 40 04             	mov    0x4(%eax),%eax
c010960f:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0109612:	89 55 ec             	mov    %edx,-0x14(%ebp)
c0109615:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109618:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010961b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010961e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109621:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0109624:	89 10                	mov    %edx,(%eax)
c0109626:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109629:	8b 10                	mov    (%eax),%edx
c010962b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010962e:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0109631:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109634:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0109637:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010963a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010963d:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0109640:	89 10                	mov    %edx,(%eax)
    proc->yptr = NULL;
c0109642:	8b 45 08             	mov    0x8(%ebp),%eax
c0109645:	c7 40 74 00 00 00 00 	movl   $0x0,0x74(%eax)
    if ((proc->optr = proc->parent->cptr) != NULL) {
c010964c:	8b 45 08             	mov    0x8(%ebp),%eax
c010964f:	8b 40 14             	mov    0x14(%eax),%eax
c0109652:	8b 50 70             	mov    0x70(%eax),%edx
c0109655:	8b 45 08             	mov    0x8(%ebp),%eax
c0109658:	89 50 78             	mov    %edx,0x78(%eax)
c010965b:	8b 45 08             	mov    0x8(%ebp),%eax
c010965e:	8b 40 78             	mov    0x78(%eax),%eax
c0109661:	85 c0                	test   %eax,%eax
c0109663:	74 0c                	je     c0109671 <set_links+0x8a>
        proc->optr->yptr = proc;
c0109665:	8b 45 08             	mov    0x8(%ebp),%eax
c0109668:	8b 40 78             	mov    0x78(%eax),%eax
c010966b:	8b 55 08             	mov    0x8(%ebp),%edx
c010966e:	89 50 74             	mov    %edx,0x74(%eax)
    }
    proc->parent->cptr = proc;
c0109671:	8b 45 08             	mov    0x8(%ebp),%eax
c0109674:	8b 40 14             	mov    0x14(%eax),%eax
c0109677:	8b 55 08             	mov    0x8(%ebp),%edx
c010967a:	89 50 70             	mov    %edx,0x70(%eax)
    nr_process ++;
c010967d:	a1 40 20 1a c0       	mov    0xc01a2040,%eax
c0109682:	83 c0 01             	add    $0x1,%eax
c0109685:	a3 40 20 1a c0       	mov    %eax,0xc01a2040
}
c010968a:	90                   	nop
c010968b:	c9                   	leave  
c010968c:	c3                   	ret    

c010968d <remove_links>:

// remove_links - clean the relation links of process
static void
remove_links(struct proc_struct *proc) {
c010968d:	55                   	push   %ebp
c010968e:	89 e5                	mov    %esp,%ebp
c0109690:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->list_link));
c0109693:	8b 45 08             	mov    0x8(%ebp),%eax
c0109696:	83 c0 58             	add    $0x58,%eax
c0109699:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010969c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010969f:	8b 40 04             	mov    0x4(%eax),%eax
c01096a2:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01096a5:	8b 12                	mov    (%edx),%edx
c01096a7:	89 55 f8             	mov    %edx,-0x8(%ebp)
c01096aa:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c01096ad:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01096b0:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01096b3:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c01096b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01096b9:	8b 55 f8             	mov    -0x8(%ebp),%edx
c01096bc:	89 10                	mov    %edx,(%eax)
    if (proc->optr != NULL) {
c01096be:	8b 45 08             	mov    0x8(%ebp),%eax
c01096c1:	8b 40 78             	mov    0x78(%eax),%eax
c01096c4:	85 c0                	test   %eax,%eax
c01096c6:	74 0f                	je     c01096d7 <remove_links+0x4a>
        proc->optr->yptr = proc->yptr;
c01096c8:	8b 45 08             	mov    0x8(%ebp),%eax
c01096cb:	8b 40 78             	mov    0x78(%eax),%eax
c01096ce:	8b 55 08             	mov    0x8(%ebp),%edx
c01096d1:	8b 52 74             	mov    0x74(%edx),%edx
c01096d4:	89 50 74             	mov    %edx,0x74(%eax)
    }
    if (proc->yptr != NULL) {
c01096d7:	8b 45 08             	mov    0x8(%ebp),%eax
c01096da:	8b 40 74             	mov    0x74(%eax),%eax
c01096dd:	85 c0                	test   %eax,%eax
c01096df:	74 11                	je     c01096f2 <remove_links+0x65>
        proc->yptr->optr = proc->optr;
c01096e1:	8b 45 08             	mov    0x8(%ebp),%eax
c01096e4:	8b 40 74             	mov    0x74(%eax),%eax
c01096e7:	8b 55 08             	mov    0x8(%ebp),%edx
c01096ea:	8b 52 78             	mov    0x78(%edx),%edx
c01096ed:	89 50 78             	mov    %edx,0x78(%eax)
c01096f0:	eb 0f                	jmp    c0109701 <remove_links+0x74>
    }
    else {
       proc->parent->cptr = proc->optr;
c01096f2:	8b 45 08             	mov    0x8(%ebp),%eax
c01096f5:	8b 40 14             	mov    0x14(%eax),%eax
c01096f8:	8b 55 08             	mov    0x8(%ebp),%edx
c01096fb:	8b 52 78             	mov    0x78(%edx),%edx
c01096fe:	89 50 70             	mov    %edx,0x70(%eax)
    }
    nr_process --;
c0109701:	a1 40 20 1a c0       	mov    0xc01a2040,%eax
c0109706:	83 e8 01             	sub    $0x1,%eax
c0109709:	a3 40 20 1a c0       	mov    %eax,0xc01a2040
}
c010970e:	90                   	nop
c010970f:	c9                   	leave  
c0109710:	c3                   	ret    

c0109711 <get_pid>:

// get_pid - alloc a unique pid for process
static int
get_pid(void) {
c0109711:	55                   	push   %ebp
c0109712:	89 e5                	mov    %esp,%ebp
c0109714:	83 ec 10             	sub    $0x10,%esp
    static_assert(MAX_PID > MAX_PROCESS);
    struct proc_struct *proc;
    list_entry_t *list = &proc_list, *le;
c0109717:	c7 45 f8 9c 21 1a c0 	movl   $0xc01a219c,-0x8(%ebp)
    static int next_safe = MAX_PID, last_pid = MAX_PID;
    if (++ last_pid >= MAX_PID) {
c010971e:	a1 b8 ba 12 c0       	mov    0xc012bab8,%eax
c0109723:	83 c0 01             	add    $0x1,%eax
c0109726:	a3 b8 ba 12 c0       	mov    %eax,0xc012bab8
c010972b:	a1 b8 ba 12 c0       	mov    0xc012bab8,%eax
c0109730:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c0109735:	7e 0c                	jle    c0109743 <get_pid+0x32>
        last_pid = 1;
c0109737:	c7 05 b8 ba 12 c0 01 	movl   $0x1,0xc012bab8
c010973e:	00 00 00 
        goto inside;
c0109741:	eb 13                	jmp    c0109756 <get_pid+0x45>
    }
    if (last_pid >= next_safe) {
c0109743:	8b 15 b8 ba 12 c0    	mov    0xc012bab8,%edx
c0109749:	a1 bc ba 12 c0       	mov    0xc012babc,%eax
c010974e:	39 c2                	cmp    %eax,%edx
c0109750:	0f 8c ac 00 00 00    	jl     c0109802 <get_pid+0xf1>
    inside:
        next_safe = MAX_PID;
c0109756:	c7 05 bc ba 12 c0 00 	movl   $0x2000,0xc012babc
c010975d:	20 00 00 
    repeat:
        le = list;
c0109760:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0109763:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while ((le = list_next(le)) != list) {
c0109766:	eb 7f                	jmp    c01097e7 <get_pid+0xd6>
            proc = le2proc(le, list_link);
c0109768:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010976b:	83 e8 58             	sub    $0x58,%eax
c010976e:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (proc->pid == last_pid) {
c0109771:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109774:	8b 50 04             	mov    0x4(%eax),%edx
c0109777:	a1 b8 ba 12 c0       	mov    0xc012bab8,%eax
c010977c:	39 c2                	cmp    %eax,%edx
c010977e:	75 3e                	jne    c01097be <get_pid+0xad>
                if (++ last_pid >= next_safe) {
c0109780:	a1 b8 ba 12 c0       	mov    0xc012bab8,%eax
c0109785:	83 c0 01             	add    $0x1,%eax
c0109788:	a3 b8 ba 12 c0       	mov    %eax,0xc012bab8
c010978d:	8b 15 b8 ba 12 c0    	mov    0xc012bab8,%edx
c0109793:	a1 bc ba 12 c0       	mov    0xc012babc,%eax
c0109798:	39 c2                	cmp    %eax,%edx
c010979a:	7c 4b                	jl     c01097e7 <get_pid+0xd6>
                    if (last_pid >= MAX_PID) {
c010979c:	a1 b8 ba 12 c0       	mov    0xc012bab8,%eax
c01097a1:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c01097a6:	7e 0a                	jle    c01097b2 <get_pid+0xa1>
                        last_pid = 1;
c01097a8:	c7 05 b8 ba 12 c0 01 	movl   $0x1,0xc012bab8
c01097af:	00 00 00 
                    }
                    next_safe = MAX_PID;
c01097b2:	c7 05 bc ba 12 c0 00 	movl   $0x2000,0xc012babc
c01097b9:	20 00 00 
                    goto repeat;
c01097bc:	eb a2                	jmp    c0109760 <get_pid+0x4f>
                }
            }
            else if (proc->pid > last_pid && next_safe > proc->pid) {
c01097be:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01097c1:	8b 50 04             	mov    0x4(%eax),%edx
c01097c4:	a1 b8 ba 12 c0       	mov    0xc012bab8,%eax
c01097c9:	39 c2                	cmp    %eax,%edx
c01097cb:	7e 1a                	jle    c01097e7 <get_pid+0xd6>
c01097cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01097d0:	8b 50 04             	mov    0x4(%eax),%edx
c01097d3:	a1 bc ba 12 c0       	mov    0xc012babc,%eax
c01097d8:	39 c2                	cmp    %eax,%edx
c01097da:	7d 0b                	jge    c01097e7 <get_pid+0xd6>
                next_safe = proc->pid;
c01097dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01097df:	8b 40 04             	mov    0x4(%eax),%eax
c01097e2:	a3 bc ba 12 c0       	mov    %eax,0xc012babc
c01097e7:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01097ea:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01097ed:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01097f0:	8b 40 04             	mov    0x4(%eax),%eax
    if (last_pid >= next_safe) {
    inside:
        next_safe = MAX_PID;
    repeat:
        le = list;
        while ((le = list_next(le)) != list) {
c01097f3:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01097f6:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01097f9:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c01097fc:	0f 85 66 ff ff ff    	jne    c0109768 <get_pid+0x57>
            else if (proc->pid > last_pid && next_safe > proc->pid) {
                next_safe = proc->pid;
            }
        }
    }
    return last_pid;
c0109802:	a1 b8 ba 12 c0       	mov    0xc012bab8,%eax
}
c0109807:	c9                   	leave  
c0109808:	c3                   	ret    

c0109809 <proc_run>:

// proc_run - make process "proc" running on cpu
// NOTE: before call switch_to, should load  base addr of "proc"'s new PDT
void
proc_run(struct proc_struct *proc) {
c0109809:	55                   	push   %ebp
c010980a:	89 e5                	mov    %esp,%ebp
c010980c:	83 ec 18             	sub    $0x18,%esp
    if (proc != current) {
c010980f:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c0109814:	39 45 08             	cmp    %eax,0x8(%ebp)
c0109817:	74 6b                	je     c0109884 <proc_run+0x7b>
        bool intr_flag;
        struct proc_struct *prev = current, *next = proc;
c0109819:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c010981e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109821:	8b 45 08             	mov    0x8(%ebp),%eax
c0109824:	89 45 f0             	mov    %eax,-0x10(%ebp)
        local_intr_save(intr_flag);
c0109827:	e8 6e fa ff ff       	call   c010929a <__intr_save>
c010982c:	89 45 ec             	mov    %eax,-0x14(%ebp)
        {
            current = proc;
c010982f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109832:	a3 28 00 1a c0       	mov    %eax,0xc01a0028
            load_esp0(next->kstack + KSTACKSIZE);
c0109837:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010983a:	8b 40 0c             	mov    0xc(%eax),%eax
c010983d:	05 00 20 00 00       	add    $0x2000,%eax
c0109842:	83 ec 0c             	sub    $0xc,%esp
c0109845:	50                   	push   %eax
c0109846:	e8 3c de ff ff       	call   c0107687 <load_esp0>
c010984b:	83 c4 10             	add    $0x10,%esp
            lcr3(next->cr3);
c010984e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109851:	8b 40 40             	mov    0x40(%eax),%eax
c0109854:	89 45 e8             	mov    %eax,-0x18(%ebp)
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
}

static inline void
lcr3(uintptr_t cr3) {
    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
c0109857:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010985a:	0f 22 d8             	mov    %eax,%cr3
            switch_to(&(prev->context), &(next->context));
c010985d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109860:	8d 50 1c             	lea    0x1c(%eax),%edx
c0109863:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109866:	83 c0 1c             	add    $0x1c,%eax
c0109869:	83 ec 08             	sub    $0x8,%esp
c010986c:	52                   	push   %edx
c010986d:	50                   	push   %eax
c010986e:	e8 b0 f9 ff ff       	call   c0109223 <switch_to>
c0109873:	83 c4 10             	add    $0x10,%esp
        }
        local_intr_restore(intr_flag);
c0109876:	83 ec 0c             	sub    $0xc,%esp
c0109879:	ff 75 ec             	pushl  -0x14(%ebp)
c010987c:	e8 43 fa ff ff       	call   c01092c4 <__intr_restore>
c0109881:	83 c4 10             	add    $0x10,%esp
    }
}
c0109884:	90                   	nop
c0109885:	c9                   	leave  
c0109886:	c3                   	ret    

c0109887 <forkret>:

// forkret -- the first kernel entry point of a new thread/process
// NOTE: the addr of forkret is setted in copy_thread function
//       after switch_to, the current proc will execute here.
static void
forkret(void) {
c0109887:	55                   	push   %ebp
c0109888:	89 e5                	mov    %esp,%ebp
c010988a:	83 ec 08             	sub    $0x8,%esp
    forkrets(current->tf);
c010988d:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c0109892:	8b 40 3c             	mov    0x3c(%eax),%eax
c0109895:	83 ec 0c             	sub    $0xc,%esp
c0109898:	50                   	push   %eax
c0109899:	e8 38 9d ff ff       	call   c01035d6 <forkrets>
c010989e:	83 c4 10             	add    $0x10,%esp
}
c01098a1:	90                   	nop
c01098a2:	c9                   	leave  
c01098a3:	c3                   	ret    

c01098a4 <hash_proc>:

// hash_proc - add proc into proc hash_list
static void
hash_proc(struct proc_struct *proc) {
c01098a4:	55                   	push   %ebp
c01098a5:	89 e5                	mov    %esp,%ebp
c01098a7:	53                   	push   %ebx
c01098a8:	83 ec 24             	sub    $0x24,%esp
    list_add(hash_list + pid_hashfn(proc->pid), &(proc->hash_link));
c01098ab:	8b 45 08             	mov    0x8(%ebp),%eax
c01098ae:	8d 58 60             	lea    0x60(%eax),%ebx
c01098b1:	8b 45 08             	mov    0x8(%ebp),%eax
c01098b4:	8b 40 04             	mov    0x4(%eax),%eax
c01098b7:	83 ec 08             	sub    $0x8,%esp
c01098ba:	6a 0a                	push   $0xa
c01098bc:	50                   	push   %eax
c01098bd:	e8 15 22 00 00       	call   c010bad7 <hash32>
c01098c2:	83 c4 10             	add    $0x10,%esp
c01098c5:	c1 e0 03             	shl    $0x3,%eax
c01098c8:	05 40 00 1a c0       	add    $0xc01a0040,%eax
c01098cd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01098d0:	89 5d f0             	mov    %ebx,-0x10(%ebp)
c01098d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01098d6:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01098d9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01098dc:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c01098df:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01098e2:	8b 40 04             	mov    0x4(%eax),%eax
c01098e5:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01098e8:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c01098eb:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01098ee:	89 55 e0             	mov    %edx,-0x20(%ebp)
c01098f1:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c01098f4:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01098f7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01098fa:	89 10                	mov    %edx,(%eax)
c01098fc:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01098ff:	8b 10                	mov    (%eax),%edx
c0109901:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109904:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0109907:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010990a:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010990d:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0109910:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109913:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0109916:	89 10                	mov    %edx,(%eax)
}
c0109918:	90                   	nop
c0109919:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c010991c:	c9                   	leave  
c010991d:	c3                   	ret    

c010991e <unhash_proc>:

// unhash_proc - delete proc from proc hash_list
static void
unhash_proc(struct proc_struct *proc) {
c010991e:	55                   	push   %ebp
c010991f:	89 e5                	mov    %esp,%ebp
c0109921:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->hash_link));
c0109924:	8b 45 08             	mov    0x8(%ebp),%eax
c0109927:	83 c0 60             	add    $0x60,%eax
c010992a:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010992d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109930:	8b 40 04             	mov    0x4(%eax),%eax
c0109933:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0109936:	8b 12                	mov    (%edx),%edx
c0109938:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010993b:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010993e:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0109941:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109944:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0109947:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010994a:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010994d:	89 10                	mov    %edx,(%eax)
}
c010994f:	90                   	nop
c0109950:	c9                   	leave  
c0109951:	c3                   	ret    

c0109952 <find_proc>:

// find_proc - find proc frome proc hash_list according to pid
struct proc_struct *
find_proc(int pid) {
c0109952:	55                   	push   %ebp
c0109953:	89 e5                	mov    %esp,%ebp
c0109955:	83 ec 18             	sub    $0x18,%esp
    if (0 < pid && pid < MAX_PID) {
c0109958:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010995c:	7e 5d                	jle    c01099bb <find_proc+0x69>
c010995e:	81 7d 08 ff 1f 00 00 	cmpl   $0x1fff,0x8(%ebp)
c0109965:	7f 54                	jg     c01099bb <find_proc+0x69>
        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
c0109967:	8b 45 08             	mov    0x8(%ebp),%eax
c010996a:	83 ec 08             	sub    $0x8,%esp
c010996d:	6a 0a                	push   $0xa
c010996f:	50                   	push   %eax
c0109970:	e8 62 21 00 00       	call   c010bad7 <hash32>
c0109975:	83 c4 10             	add    $0x10,%esp
c0109978:	c1 e0 03             	shl    $0x3,%eax
c010997b:	05 40 00 1a c0       	add    $0xc01a0040,%eax
c0109980:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109983:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109986:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while ((le = list_next(le)) != list) {
c0109989:	eb 19                	jmp    c01099a4 <find_proc+0x52>
            struct proc_struct *proc = le2proc(le, hash_link);
c010998b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010998e:	83 e8 60             	sub    $0x60,%eax
c0109991:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if (proc->pid == pid) {
c0109994:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109997:	8b 40 04             	mov    0x4(%eax),%eax
c010999a:	3b 45 08             	cmp    0x8(%ebp),%eax
c010999d:	75 05                	jne    c01099a4 <find_proc+0x52>
                return proc;
c010999f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01099a2:	eb 1c                	jmp    c01099c0 <find_proc+0x6e>
c01099a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01099a7:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01099aa:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01099ad:	8b 40 04             	mov    0x4(%eax),%eax
// find_proc - find proc frome proc hash_list according to pid
struct proc_struct *
find_proc(int pid) {
    if (0 < pid && pid < MAX_PID) {
        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
        while ((le = list_next(le)) != list) {
c01099b0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01099b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01099b6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01099b9:	75 d0                	jne    c010998b <find_proc+0x39>
            if (proc->pid == pid) {
                return proc;
            }
        }
    }
    return NULL;
c01099bb:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01099c0:	c9                   	leave  
c01099c1:	c3                   	ret    

c01099c2 <kernel_thread>:

// kernel_thread - create a kernel thread using "fn" function
// NOTE: the contents of temp trapframe tf will be copied to 
//       proc->tf in do_fork-->copy_thread function
int
kernel_thread(int (*fn)(void *), void *arg, uint32_t clone_flags) {
c01099c2:	55                   	push   %ebp
c01099c3:	89 e5                	mov    %esp,%ebp
c01099c5:	83 ec 58             	sub    $0x58,%esp
    struct trapframe tf;
    memset(&tf, 0, sizeof(struct trapframe));
c01099c8:	83 ec 04             	sub    $0x4,%esp
c01099cb:	6a 4c                	push   $0x4c
c01099cd:	6a 00                	push   $0x0
c01099cf:	8d 45 ac             	lea    -0x54(%ebp),%eax
c01099d2:	50                   	push   %eax
c01099d3:	e8 68 19 00 00       	call   c010b340 <memset>
c01099d8:	83 c4 10             	add    $0x10,%esp
    tf.tf_cs = KERNEL_CS;
c01099db:	66 c7 45 e8 08 00    	movw   $0x8,-0x18(%ebp)
    tf.tf_ds = tf.tf_es = tf.tf_ss = KERNEL_DS;
c01099e1:	66 c7 45 f4 10 00    	movw   $0x10,-0xc(%ebp)
c01099e7:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c01099eb:	66 89 45 d4          	mov    %ax,-0x2c(%ebp)
c01099ef:	0f b7 45 d4          	movzwl -0x2c(%ebp),%eax
c01099f3:	66 89 45 d8          	mov    %ax,-0x28(%ebp)
    tf.tf_regs.reg_ebx = (uint32_t)fn;
c01099f7:	8b 45 08             	mov    0x8(%ebp),%eax
c01099fa:	89 45 bc             	mov    %eax,-0x44(%ebp)
    tf.tf_regs.reg_edx = (uint32_t)arg;
c01099fd:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109a00:	89 45 c0             	mov    %eax,-0x40(%ebp)
    tf.tf_eip = (uint32_t)kernel_thread_entry;
c0109a03:	b8 1a 92 10 c0       	mov    $0xc010921a,%eax
c0109a08:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return do_fork(clone_flags | CLONE_VM, 0, &tf);
c0109a0b:	8b 45 10             	mov    0x10(%ebp),%eax
c0109a0e:	80 cc 01             	or     $0x1,%ah
c0109a11:	89 c2                	mov    %eax,%edx
c0109a13:	83 ec 04             	sub    $0x4,%esp
c0109a16:	8d 45 ac             	lea    -0x54(%ebp),%eax
c0109a19:	50                   	push   %eax
c0109a1a:	6a 00                	push   $0x0
c0109a1c:	52                   	push   %edx
c0109a1d:	e8 f2 02 00 00       	call   c0109d14 <do_fork>
c0109a22:	83 c4 10             	add    $0x10,%esp
}
c0109a25:	c9                   	leave  
c0109a26:	c3                   	ret    

c0109a27 <setup_kstack>:

// setup_kstack - alloc pages with size KSTACKPAGE as process kernel stack
static int
setup_kstack(struct proc_struct *proc) {
c0109a27:	55                   	push   %ebp
c0109a28:	89 e5                	mov    %esp,%ebp
c0109a2a:	83 ec 18             	sub    $0x18,%esp
    struct Page *page = alloc_pages(KSTACKPAGE);
c0109a2d:	83 ec 0c             	sub    $0xc,%esp
c0109a30:	6a 02                	push   $0x2
c0109a32:	e8 a4 dd ff ff       	call   c01077db <alloc_pages>
c0109a37:	83 c4 10             	add    $0x10,%esp
c0109a3a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c0109a3d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109a41:	74 1d                	je     c0109a60 <setup_kstack+0x39>
        proc->kstack = (uintptr_t)page2kva(page);
c0109a43:	83 ec 0c             	sub    $0xc,%esp
c0109a46:	ff 75 f4             	pushl  -0xc(%ebp)
c0109a49:	e8 57 f9 ff ff       	call   c01093a5 <page2kva>
c0109a4e:	83 c4 10             	add    $0x10,%esp
c0109a51:	89 c2                	mov    %eax,%edx
c0109a53:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a56:	89 50 0c             	mov    %edx,0xc(%eax)
        return 0;
c0109a59:	b8 00 00 00 00       	mov    $0x0,%eax
c0109a5e:	eb 05                	jmp    c0109a65 <setup_kstack+0x3e>
    }
    return -E_NO_MEM;
c0109a60:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c0109a65:	c9                   	leave  
c0109a66:	c3                   	ret    

c0109a67 <put_kstack>:

// put_kstack - free the memory space of process kernel stack
static void
put_kstack(struct proc_struct *proc) {
c0109a67:	55                   	push   %ebp
c0109a68:	89 e5                	mov    %esp,%ebp
c0109a6a:	83 ec 08             	sub    $0x8,%esp
    free_pages(kva2page((void *)(proc->kstack)), KSTACKPAGE);
c0109a6d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a70:	8b 40 0c             	mov    0xc(%eax),%eax
c0109a73:	83 ec 0c             	sub    $0xc,%esp
c0109a76:	50                   	push   %eax
c0109a77:	e8 6e f9 ff ff       	call   c01093ea <kva2page>
c0109a7c:	83 c4 10             	add    $0x10,%esp
c0109a7f:	83 ec 08             	sub    $0x8,%esp
c0109a82:	6a 02                	push   $0x2
c0109a84:	50                   	push   %eax
c0109a85:	e8 bd dd ff ff       	call   c0107847 <free_pages>
c0109a8a:	83 c4 10             	add    $0x10,%esp
}
c0109a8d:	90                   	nop
c0109a8e:	c9                   	leave  
c0109a8f:	c3                   	ret    

c0109a90 <setup_pgdir>:

// setup_pgdir - alloc one page as PDT
static int
setup_pgdir(struct mm_struct *mm) {
c0109a90:	55                   	push   %ebp
c0109a91:	89 e5                	mov    %esp,%ebp
c0109a93:	83 ec 18             	sub    $0x18,%esp
    struct Page *page;
    if ((page = alloc_page()) == NULL) {
c0109a96:	83 ec 0c             	sub    $0xc,%esp
c0109a99:	6a 01                	push   $0x1
c0109a9b:	e8 3b dd ff ff       	call   c01077db <alloc_pages>
c0109aa0:	83 c4 10             	add    $0x10,%esp
c0109aa3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109aa6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109aaa:	75 07                	jne    c0109ab3 <setup_pgdir+0x23>
        return -E_NO_MEM;
c0109aac:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0109ab1:	eb 74                	jmp    c0109b27 <setup_pgdir+0x97>
    }
    pde_t *pgdir = page2kva(page);
c0109ab3:	83 ec 0c             	sub    $0xc,%esp
c0109ab6:	ff 75 f4             	pushl  -0xc(%ebp)
c0109ab9:	e8 e7 f8 ff ff       	call   c01093a5 <page2kva>
c0109abe:	83 c4 10             	add    $0x10,%esp
c0109ac1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    memcpy(pgdir, boot_pgdir, PGSIZE);      // NOTE: all pgdir include boot_pgdir
c0109ac4:	a1 60 ba 12 c0       	mov    0xc012ba60,%eax
c0109ac9:	83 ec 04             	sub    $0x4,%esp
c0109acc:	68 00 10 00 00       	push   $0x1000
c0109ad1:	50                   	push   %eax
c0109ad2:	ff 75 f0             	pushl  -0x10(%ebp)
c0109ad5:	e8 49 19 00 00       	call   c010b423 <memcpy>
c0109ada:	83 c4 10             	add    $0x10,%esp
    pgdir[PDX(VPT)] = PADDR(pgdir) | PTE_P | PTE_W;
c0109add:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109ae0:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
c0109ae6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109ae9:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0109aec:	81 7d ec ff ff ff bf 	cmpl   $0xbfffffff,-0x14(%ebp)
c0109af3:	77 17                	ja     c0109b0c <setup_pgdir+0x7c>
c0109af5:	ff 75 ec             	pushl  -0x14(%ebp)
c0109af8:	68 ec de 10 c0       	push   $0xc010deec
c0109afd:	68 32 01 00 00       	push   $0x132
c0109b02:	68 10 df 10 c0       	push   $0xc010df10
c0109b07:	e8 ec 68 ff ff       	call   c01003f8 <__panic>
c0109b0c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109b0f:	05 00 00 00 40       	add    $0x40000000,%eax
c0109b14:	83 c8 03             	or     $0x3,%eax
c0109b17:	89 02                	mov    %eax,(%edx)
    mm->pgdir = pgdir;
c0109b19:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b1c:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0109b1f:	89 50 0c             	mov    %edx,0xc(%eax)
    return 0;
c0109b22:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109b27:	c9                   	leave  
c0109b28:	c3                   	ret    

c0109b29 <put_pgdir>:

// put_pgdir - free the memory space of PDT
static void
put_pgdir(struct mm_struct *mm) {
c0109b29:	55                   	push   %ebp
c0109b2a:	89 e5                	mov    %esp,%ebp
c0109b2c:	83 ec 08             	sub    $0x8,%esp
    free_page(kva2page(mm->pgdir));
c0109b2f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b32:	8b 40 0c             	mov    0xc(%eax),%eax
c0109b35:	83 ec 0c             	sub    $0xc,%esp
c0109b38:	50                   	push   %eax
c0109b39:	e8 ac f8 ff ff       	call   c01093ea <kva2page>
c0109b3e:	83 c4 10             	add    $0x10,%esp
c0109b41:	83 ec 08             	sub    $0x8,%esp
c0109b44:	6a 01                	push   $0x1
c0109b46:	50                   	push   %eax
c0109b47:	e8 fb dc ff ff       	call   c0107847 <free_pages>
c0109b4c:	83 c4 10             	add    $0x10,%esp
}
c0109b4f:	90                   	nop
c0109b50:	c9                   	leave  
c0109b51:	c3                   	ret    

c0109b52 <copy_mm>:

// copy_mm - process "proc" duplicate OR share process "current"'s mm according clone_flags
//         - if clone_flags & CLONE_VM, then "share" ; else "duplicate"
static int
copy_mm(uint32_t clone_flags, struct proc_struct *proc) {
c0109b52:	55                   	push   %ebp
c0109b53:	89 e5                	mov    %esp,%ebp
c0109b55:	83 ec 18             	sub    $0x18,%esp
    struct mm_struct *mm, *oldmm = current->mm;
c0109b58:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c0109b5d:	8b 40 18             	mov    0x18(%eax),%eax
c0109b60:	89 45 ec             	mov    %eax,-0x14(%ebp)

    /* current is a kernel thread */
    if (oldmm == NULL) {
c0109b63:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0109b67:	75 0a                	jne    c0109b73 <copy_mm+0x21>
        return 0;
c0109b69:	b8 00 00 00 00       	mov    $0x0,%eax
c0109b6e:	e9 03 01 00 00       	jmp    c0109c76 <copy_mm+0x124>
    }
    if (clone_flags & CLONE_VM) {
c0109b73:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b76:	25 00 01 00 00       	and    $0x100,%eax
c0109b7b:	85 c0                	test   %eax,%eax
c0109b7d:	74 08                	je     c0109b87 <copy_mm+0x35>
        mm = oldmm;
c0109b7f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109b82:	89 45 f4             	mov    %eax,-0xc(%ebp)
        goto good_mm;
c0109b85:	eb 65                	jmp    c0109bec <copy_mm+0x9a>
    }

    int ret = -E_NO_MEM;
c0109b87:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
    if ((mm = mm_create()) == NULL) {
c0109b8e:	e8 f5 a1 ff ff       	call   c0103d88 <mm_create>
c0109b93:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109b96:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109b9a:	0f 84 d2 00 00 00    	je     c0109c72 <copy_mm+0x120>
        goto bad_mm;
    }
    if (setup_pgdir(mm) != 0) {
c0109ba0:	83 ec 0c             	sub    $0xc,%esp
c0109ba3:	ff 75 f4             	pushl  -0xc(%ebp)
c0109ba6:	e8 e5 fe ff ff       	call   c0109a90 <setup_pgdir>
c0109bab:	83 c4 10             	add    $0x10,%esp
c0109bae:	85 c0                	test   %eax,%eax
c0109bb0:	0f 85 ab 00 00 00    	jne    c0109c61 <copy_mm+0x10f>
        goto bad_pgdir_cleanup_mm;
    }

    lock_mm(oldmm);
c0109bb6:	83 ec 0c             	sub    $0xc,%esp
c0109bb9:	ff 75 ec             	pushl  -0x14(%ebp)
c0109bbc:	e8 9c f8 ff ff       	call   c010945d <lock_mm>
c0109bc1:	83 c4 10             	add    $0x10,%esp
    {
        ret = dup_mmap(mm, oldmm);
c0109bc4:	83 ec 08             	sub    $0x8,%esp
c0109bc7:	ff 75 ec             	pushl  -0x14(%ebp)
c0109bca:	ff 75 f4             	pushl  -0xc(%ebp)
c0109bcd:	e8 87 a6 ff ff       	call   c0104259 <dup_mmap>
c0109bd2:	83 c4 10             	add    $0x10,%esp
c0109bd5:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    unlock_mm(oldmm);
c0109bd8:	83 ec 0c             	sub    $0xc,%esp
c0109bdb:	ff 75 ec             	pushl  -0x14(%ebp)
c0109bde:	e8 9b f8 ff ff       	call   c010947e <unlock_mm>
c0109be3:	83 c4 10             	add    $0x10,%esp

    if (ret != 0) {
c0109be6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0109bea:	75 56                	jne    c0109c42 <copy_mm+0xf0>
        goto bad_dup_cleanup_mmap;
    }

good_mm:
    mm_count_inc(mm);
c0109bec:	83 ec 0c             	sub    $0xc,%esp
c0109bef:	ff 75 f4             	pushl  -0xc(%ebp)
c0109bf2:	e8 32 f8 ff ff       	call   c0109429 <mm_count_inc>
c0109bf7:	83 c4 10             	add    $0x10,%esp
    proc->mm = mm;
c0109bfa:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109bfd:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109c00:	89 50 18             	mov    %edx,0x18(%eax)
    proc->cr3 = PADDR(mm->pgdir);
c0109c03:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109c06:	8b 40 0c             	mov    0xc(%eax),%eax
c0109c09:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0109c0c:	81 7d e8 ff ff ff bf 	cmpl   $0xbfffffff,-0x18(%ebp)
c0109c13:	77 17                	ja     c0109c2c <copy_mm+0xda>
c0109c15:	ff 75 e8             	pushl  -0x18(%ebp)
c0109c18:	68 ec de 10 c0       	push   $0xc010deec
c0109c1d:	68 61 01 00 00       	push   $0x161
c0109c22:	68 10 df 10 c0       	push   $0xc010df10
c0109c27:	e8 cc 67 ff ff       	call   c01003f8 <__panic>
c0109c2c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109c2f:	8d 90 00 00 00 40    	lea    0x40000000(%eax),%edx
c0109c35:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109c38:	89 50 40             	mov    %edx,0x40(%eax)
    return 0;
c0109c3b:	b8 00 00 00 00       	mov    $0x0,%eax
c0109c40:	eb 34                	jmp    c0109c76 <copy_mm+0x124>
        ret = dup_mmap(mm, oldmm);
    }
    unlock_mm(oldmm);

    if (ret != 0) {
        goto bad_dup_cleanup_mmap;
c0109c42:	90                   	nop
    mm_count_inc(mm);
    proc->mm = mm;
    proc->cr3 = PADDR(mm->pgdir);
    return 0;
bad_dup_cleanup_mmap:
    exit_mmap(mm);
c0109c43:	83 ec 0c             	sub    $0xc,%esp
c0109c46:	ff 75 f4             	pushl  -0xc(%ebp)
c0109c49:	e8 f2 a6 ff ff       	call   c0104340 <exit_mmap>
c0109c4e:	83 c4 10             	add    $0x10,%esp
    put_pgdir(mm);
c0109c51:	83 ec 0c             	sub    $0xc,%esp
c0109c54:	ff 75 f4             	pushl  -0xc(%ebp)
c0109c57:	e8 cd fe ff ff       	call   c0109b29 <put_pgdir>
c0109c5c:	83 c4 10             	add    $0x10,%esp
c0109c5f:	eb 01                	jmp    c0109c62 <copy_mm+0x110>
    int ret = -E_NO_MEM;
    if ((mm = mm_create()) == NULL) {
        goto bad_mm;
    }
    if (setup_pgdir(mm) != 0) {
        goto bad_pgdir_cleanup_mm;
c0109c61:	90                   	nop
    return 0;
bad_dup_cleanup_mmap:
    exit_mmap(mm);
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
c0109c62:	83 ec 0c             	sub    $0xc,%esp
c0109c65:	ff 75 f4             	pushl  -0xc(%ebp)
c0109c68:	e8 45 a4 ff ff       	call   c01040b2 <mm_destroy>
c0109c6d:	83 c4 10             	add    $0x10,%esp
c0109c70:	eb 01                	jmp    c0109c73 <copy_mm+0x121>
        goto good_mm;
    }

    int ret = -E_NO_MEM;
    if ((mm = mm_create()) == NULL) {
        goto bad_mm;
c0109c72:	90                   	nop
    exit_mmap(mm);
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
bad_mm:
    return ret;
c0109c73:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0109c76:	c9                   	leave  
c0109c77:	c3                   	ret    

c0109c78 <copy_thread>:

// copy_thread - setup the trapframe on the  process's kernel stack top and
//             - setup the kernel entry point and stack of process
static void
copy_thread(struct proc_struct *proc, uintptr_t esp, struct trapframe *tf) {
c0109c78:	55                   	push   %ebp
c0109c79:	89 e5                	mov    %esp,%ebp
c0109c7b:	57                   	push   %edi
c0109c7c:	56                   	push   %esi
c0109c7d:	53                   	push   %ebx
    proc->tf = (struct trapframe *)(proc->kstack + KSTACKSIZE) - 1;
c0109c7e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c81:	8b 40 0c             	mov    0xc(%eax),%eax
c0109c84:	05 b4 1f 00 00       	add    $0x1fb4,%eax
c0109c89:	89 c2                	mov    %eax,%edx
c0109c8b:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c8e:	89 50 3c             	mov    %edx,0x3c(%eax)
    *(proc->tf) = *tf;
c0109c91:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c94:	8b 40 3c             	mov    0x3c(%eax),%eax
c0109c97:	8b 55 10             	mov    0x10(%ebp),%edx
c0109c9a:	89 d3                	mov    %edx,%ebx
c0109c9c:	ba 4c 00 00 00       	mov    $0x4c,%edx
c0109ca1:	8b 0b                	mov    (%ebx),%ecx
c0109ca3:	89 08                	mov    %ecx,(%eax)
c0109ca5:	8b 4c 13 fc          	mov    -0x4(%ebx,%edx,1),%ecx
c0109ca9:	89 4c 10 fc          	mov    %ecx,-0x4(%eax,%edx,1)
c0109cad:	8d 78 04             	lea    0x4(%eax),%edi
c0109cb0:	83 e7 fc             	and    $0xfffffffc,%edi
c0109cb3:	29 f8                	sub    %edi,%eax
c0109cb5:	29 c3                	sub    %eax,%ebx
c0109cb7:	01 c2                	add    %eax,%edx
c0109cb9:	83 e2 fc             	and    $0xfffffffc,%edx
c0109cbc:	89 d0                	mov    %edx,%eax
c0109cbe:	c1 e8 02             	shr    $0x2,%eax
c0109cc1:	89 de                	mov    %ebx,%esi
c0109cc3:	89 c1                	mov    %eax,%ecx
c0109cc5:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
    proc->tf->tf_regs.reg_eax = 0;
c0109cc7:	8b 45 08             	mov    0x8(%ebp),%eax
c0109cca:	8b 40 3c             	mov    0x3c(%eax),%eax
c0109ccd:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    proc->tf->tf_esp = esp;
c0109cd4:	8b 45 08             	mov    0x8(%ebp),%eax
c0109cd7:	8b 40 3c             	mov    0x3c(%eax),%eax
c0109cda:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109cdd:	89 50 44             	mov    %edx,0x44(%eax)
    proc->tf->tf_eflags |= FL_IF;
c0109ce0:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ce3:	8b 40 3c             	mov    0x3c(%eax),%eax
c0109ce6:	8b 55 08             	mov    0x8(%ebp),%edx
c0109ce9:	8b 52 3c             	mov    0x3c(%edx),%edx
c0109cec:	8b 52 40             	mov    0x40(%edx),%edx
c0109cef:	80 ce 02             	or     $0x2,%dh
c0109cf2:	89 50 40             	mov    %edx,0x40(%eax)

    proc->context.eip = (uintptr_t)forkret;
c0109cf5:	ba 87 98 10 c0       	mov    $0xc0109887,%edx
c0109cfa:	8b 45 08             	mov    0x8(%ebp),%eax
c0109cfd:	89 50 1c             	mov    %edx,0x1c(%eax)
    proc->context.esp = (uintptr_t)(proc->tf);
c0109d00:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d03:	8b 40 3c             	mov    0x3c(%eax),%eax
c0109d06:	89 c2                	mov    %eax,%edx
c0109d08:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d0b:	89 50 20             	mov    %edx,0x20(%eax)
}
c0109d0e:	90                   	nop
c0109d0f:	5b                   	pop    %ebx
c0109d10:	5e                   	pop    %esi
c0109d11:	5f                   	pop    %edi
c0109d12:	5d                   	pop    %ebp
c0109d13:	c3                   	ret    

c0109d14 <do_fork>:
 * @clone_flags: used to guide how to clone the child process
 * @stack:       the parent's user stack pointer. if stack==0, It means to fork a kernel thread.
 * @tf:          the trapframe info, which will be copied to child process's proc->tf
 */
int
do_fork(uint32_t clone_flags, uintptr_t stack, struct trapframe *tf) {
c0109d14:	55                   	push   %ebp
c0109d15:	89 e5                	mov    %esp,%ebp
c0109d17:	83 ec 18             	sub    $0x18,%esp
    int ret = -E_NO_FREE_PROC;
c0109d1a:	c7 45 f4 fb ff ff ff 	movl   $0xfffffffb,-0xc(%ebp)
    struct proc_struct *proc;
    if (nr_process >= MAX_PROCESS) {
c0109d21:	a1 40 20 1a c0       	mov    0xc01a2040,%eax
c0109d26:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c0109d2b:	0f 8f e1 00 00 00    	jg     c0109e12 <do_fork+0xfe>
        goto fork_out;
    }
    ret = -E_NO_MEM;
c0109d31:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    *    -------------------
	*    update step 1: set child proc's parent to current process, make sure current process's wait_state is 0
	*    update step 5: insert proc_struct into hash_list && proc_list, set the relation links of process
    */
    //    1. call alloc_proc to allocate a proc_struct
    proc = alloc_proc();
c0109d38:	e8 62 f7 ff ff       	call   c010949f <alloc_proc>
c0109d3d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (proc == NULL) {
c0109d40:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0109d44:	0f 84 cb 00 00 00    	je     c0109e15 <do_fork+0x101>
        goto fork_out;
    }
    // update
    assert(current->wait_state == 0);
c0109d4a:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c0109d4f:	8b 40 6c             	mov    0x6c(%eax),%eax
c0109d52:	85 c0                	test   %eax,%eax
c0109d54:	74 19                	je     c0109d6f <do_fork+0x5b>
c0109d56:	68 24 df 10 c0       	push   $0xc010df24
c0109d5b:	68 3d df 10 c0       	push   $0xc010df3d
c0109d60:	68 ae 01 00 00       	push   $0x1ae
c0109d65:	68 10 df 10 c0       	push   $0xc010df10
c0109d6a:	e8 89 66 ff ff       	call   c01003f8 <__panic>
    proc->parent = current;
c0109d6f:	8b 15 28 00 1a c0    	mov    0xc01a0028,%edx
c0109d75:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109d78:	89 50 14             	mov    %edx,0x14(%eax)
    //    2. call setup_kstack to allocate a kernel stack for child process
    if (setup_kstack(proc) != 0) {
c0109d7b:	83 ec 0c             	sub    $0xc,%esp
c0109d7e:	ff 75 f0             	pushl  -0x10(%ebp)
c0109d81:	e8 a1 fc ff ff       	call   c0109a27 <setup_kstack>
c0109d86:	83 c4 10             	add    $0x10,%esp
c0109d89:	85 c0                	test   %eax,%eax
c0109d8b:	0f 85 9b 00 00 00    	jne    c0109e2c <do_fork+0x118>
        goto bad_fork_cleanup_proc;
    }
    //    3. call copy_mm to dup OR share mm according clone_flag
    if (copy_mm(clone_flags, proc) != 0) {
c0109d91:	83 ec 08             	sub    $0x8,%esp
c0109d94:	ff 75 f0             	pushl  -0x10(%ebp)
c0109d97:	ff 75 08             	pushl  0x8(%ebp)
c0109d9a:	e8 b3 fd ff ff       	call   c0109b52 <copy_mm>
c0109d9f:	83 c4 10             	add    $0x10,%esp
c0109da2:	85 c0                	test   %eax,%eax
c0109da4:	75 75                	jne    c0109e1b <do_fork+0x107>
        goto bad_fork_cleanup_kstack;
    }
    //    4. call copy_thread to setup tf & context in proc_struct
    copy_thread(proc, stack, tf);   // note: if stack == 0, this is a kernel thread
c0109da6:	83 ec 04             	sub    $0x4,%esp
c0109da9:	ff 75 10             	pushl  0x10(%ebp)
c0109dac:	ff 75 0c             	pushl  0xc(%ebp)
c0109daf:	ff 75 f0             	pushl  -0x10(%ebp)
c0109db2:	e8 c1 fe ff ff       	call   c0109c78 <copy_thread>
c0109db7:	83 c4 10             	add    $0x10,%esp
    //    5. insert proc_struct into hash_list && proc_list
    // this need disabling interrupt
    bool intr_flag;
    local_intr_save(intr_flag);
c0109dba:	e8 db f4 ff ff       	call   c010929a <__intr_save>
c0109dbf:	89 45 ec             	mov    %eax,-0x14(%ebp)
    {
        proc->pid = get_pid();
c0109dc2:	e8 4a f9 ff ff       	call   c0109711 <get_pid>
c0109dc7:	89 c2                	mov    %eax,%edx
c0109dc9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109dcc:	89 50 04             	mov    %edx,0x4(%eax)
        hash_proc(proc);
c0109dcf:	83 ec 0c             	sub    $0xc,%esp
c0109dd2:	ff 75 f0             	pushl  -0x10(%ebp)
c0109dd5:	e8 ca fa ff ff       	call   c01098a4 <hash_proc>
c0109dda:	83 c4 10             	add    $0x10,%esp
        // list_add(&proc_list, &(proc->list_link));
        // nr_process++;
        // update
        set_links(proc);
c0109ddd:	83 ec 0c             	sub    $0xc,%esp
c0109de0:	ff 75 f0             	pushl  -0x10(%ebp)
c0109de3:	e8 ff f7 ff ff       	call   c01095e7 <set_links>
c0109de8:	83 c4 10             	add    $0x10,%esp
    }
    local_intr_restore(intr_flag);
c0109deb:	83 ec 0c             	sub    $0xc,%esp
c0109dee:	ff 75 ec             	pushl  -0x14(%ebp)
c0109df1:	e8 ce f4 ff ff       	call   c01092c4 <__intr_restore>
c0109df6:	83 c4 10             	add    $0x10,%esp
    //    6. call wakeup_proc to make the new child process RUNNABLE
    wakeup_proc(proc);
c0109df9:	83 ec 0c             	sub    $0xc,%esp
c0109dfc:	ff 75 f0             	pushl  -0x10(%ebp)
c0109dff:	e8 e2 0e 00 00       	call   c010ace6 <wakeup_proc>
c0109e04:	83 c4 10             	add    $0x10,%esp
    //    7. set ret vaule using child proc's pid
    ret = proc->pid;
c0109e07:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109e0a:	8b 40 04             	mov    0x4(%eax),%eax
c0109e0d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109e10:	eb 04                	jmp    c0109e16 <do_fork+0x102>
int
do_fork(uint32_t clone_flags, uintptr_t stack, struct trapframe *tf) {
    int ret = -E_NO_FREE_PROC;
    struct proc_struct *proc;
    if (nr_process >= MAX_PROCESS) {
        goto fork_out;
c0109e12:	90                   	nop
c0109e13:	eb 01                	jmp    c0109e16 <do_fork+0x102>
	*    update step 5: insert proc_struct into hash_list && proc_list, set the relation links of process
    */
    //    1. call alloc_proc to allocate a proc_struct
    proc = alloc_proc();
    if (proc == NULL) {
        goto fork_out;
c0109e15:	90                   	nop
    wakeup_proc(proc);
    //    7. set ret vaule using child proc's pid
    ret = proc->pid;
	
fork_out:
    return ret;
c0109e16:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109e19:	eb 22                	jmp    c0109e3d <do_fork+0x129>
    if (setup_kstack(proc) != 0) {
        goto bad_fork_cleanup_proc;
    }
    //    3. call copy_mm to dup OR share mm according clone_flag
    if (copy_mm(clone_flags, proc) != 0) {
        goto bad_fork_cleanup_kstack;
c0109e1b:	90                   	nop
	
fork_out:
    return ret;

bad_fork_cleanup_kstack:
    put_kstack(proc);
c0109e1c:	83 ec 0c             	sub    $0xc,%esp
c0109e1f:	ff 75 f0             	pushl  -0x10(%ebp)
c0109e22:	e8 40 fc ff ff       	call   c0109a67 <put_kstack>
c0109e27:	83 c4 10             	add    $0x10,%esp
c0109e2a:	eb 01                	jmp    c0109e2d <do_fork+0x119>
    // update
    assert(current->wait_state == 0);
    proc->parent = current;
    //    2. call setup_kstack to allocate a kernel stack for child process
    if (setup_kstack(proc) != 0) {
        goto bad_fork_cleanup_proc;
c0109e2c:	90                   	nop
    return ret;

bad_fork_cleanup_kstack:
    put_kstack(proc);
bad_fork_cleanup_proc:
    kfree(proc);
c0109e2d:	83 ec 0c             	sub    $0xc,%esp
c0109e30:	ff 75 f0             	pushl  -0x10(%ebp)
c0109e33:	e8 8e ba ff ff       	call   c01058c6 <kfree>
c0109e38:	83 c4 10             	add    $0x10,%esp
    goto fork_out;
c0109e3b:	eb d9                	jmp    c0109e16 <do_fork+0x102>
}
c0109e3d:	c9                   	leave  
c0109e3e:	c3                   	ret    

c0109e3f <do_exit>:
// do_exit - called by sys_exit
//   1. call exit_mmap & put_pgdir & mm_destroy to free the almost all memory space of process
//   2. set process' state as PROC_ZOMBIE, then call wakeup_proc(parent) to ask parent reclaim itself.
//   3. call scheduler to switch to other process
int
do_exit(int error_code) {
c0109e3f:	55                   	push   %ebp
c0109e40:	89 e5                	mov    %esp,%ebp
c0109e42:	83 ec 18             	sub    $0x18,%esp
    if (current == idleproc) {
c0109e45:	8b 15 28 00 1a c0    	mov    0xc01a0028,%edx
c0109e4b:	a1 20 00 1a c0       	mov    0xc01a0020,%eax
c0109e50:	39 c2                	cmp    %eax,%edx
c0109e52:	75 17                	jne    c0109e6b <do_exit+0x2c>
        panic("idleproc exit.\n");
c0109e54:	83 ec 04             	sub    $0x4,%esp
c0109e57:	68 52 df 10 c0       	push   $0xc010df52
c0109e5c:	68 dd 01 00 00       	push   $0x1dd
c0109e61:	68 10 df 10 c0       	push   $0xc010df10
c0109e66:	e8 8d 65 ff ff       	call   c01003f8 <__panic>
    }
    if (current == initproc) {
c0109e6b:	8b 15 28 00 1a c0    	mov    0xc01a0028,%edx
c0109e71:	a1 24 00 1a c0       	mov    0xc01a0024,%eax
c0109e76:	39 c2                	cmp    %eax,%edx
c0109e78:	75 17                	jne    c0109e91 <do_exit+0x52>
        panic("initproc exit.\n");
c0109e7a:	83 ec 04             	sub    $0x4,%esp
c0109e7d:	68 62 df 10 c0       	push   $0xc010df62
c0109e82:	68 e0 01 00 00       	push   $0x1e0
c0109e87:	68 10 df 10 c0       	push   $0xc010df10
c0109e8c:	e8 67 65 ff ff       	call   c01003f8 <__panic>
    }
    
    struct mm_struct *mm = current->mm;
c0109e91:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c0109e96:	8b 40 18             	mov    0x18(%eax),%eax
c0109e99:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (mm != NULL) {
c0109e9c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109ea0:	74 56                	je     c0109ef8 <do_exit+0xb9>
        lcr3(boot_cr3);
c0109ea2:	a1 94 21 1a c0       	mov    0xc01a2194,%eax
c0109ea7:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0109eaa:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109ead:	0f 22 d8             	mov    %eax,%cr3
        if (mm_count_dec(mm) == 0) {
c0109eb0:	83 ec 0c             	sub    $0xc,%esp
c0109eb3:	ff 75 f4             	pushl  -0xc(%ebp)
c0109eb6:	e8 88 f5 ff ff       	call   c0109443 <mm_count_dec>
c0109ebb:	83 c4 10             	add    $0x10,%esp
c0109ebe:	85 c0                	test   %eax,%eax
c0109ec0:	75 2a                	jne    c0109eec <do_exit+0xad>
            exit_mmap(mm);
c0109ec2:	83 ec 0c             	sub    $0xc,%esp
c0109ec5:	ff 75 f4             	pushl  -0xc(%ebp)
c0109ec8:	e8 73 a4 ff ff       	call   c0104340 <exit_mmap>
c0109ecd:	83 c4 10             	add    $0x10,%esp
            put_pgdir(mm);
c0109ed0:	83 ec 0c             	sub    $0xc,%esp
c0109ed3:	ff 75 f4             	pushl  -0xc(%ebp)
c0109ed6:	e8 4e fc ff ff       	call   c0109b29 <put_pgdir>
c0109edb:	83 c4 10             	add    $0x10,%esp
            mm_destroy(mm);
c0109ede:	83 ec 0c             	sub    $0xc,%esp
c0109ee1:	ff 75 f4             	pushl  -0xc(%ebp)
c0109ee4:	e8 c9 a1 ff ff       	call   c01040b2 <mm_destroy>
c0109ee9:	83 c4 10             	add    $0x10,%esp
        }
        current->mm = NULL;
c0109eec:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c0109ef1:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    current->state = PROC_ZOMBIE;
c0109ef8:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c0109efd:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
    current->exit_code = error_code;
c0109f03:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c0109f08:	8b 55 08             	mov    0x8(%ebp),%edx
c0109f0b:	89 50 68             	mov    %edx,0x68(%eax)
    
    bool intr_flag;
    struct proc_struct *proc;
    local_intr_save(intr_flag);
c0109f0e:	e8 87 f3 ff ff       	call   c010929a <__intr_save>
c0109f13:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        proc = current->parent;
c0109f16:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c0109f1b:	8b 40 14             	mov    0x14(%eax),%eax
c0109f1e:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (proc->wait_state == WT_CHILD) {
c0109f21:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109f24:	8b 40 6c             	mov    0x6c(%eax),%eax
c0109f27:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c0109f2c:	0f 85 9d 00 00 00    	jne    c0109fcf <do_exit+0x190>
            wakeup_proc(proc);
c0109f32:	83 ec 0c             	sub    $0xc,%esp
c0109f35:	ff 75 ec             	pushl  -0x14(%ebp)
c0109f38:	e8 a9 0d 00 00       	call   c010ace6 <wakeup_proc>
c0109f3d:	83 c4 10             	add    $0x10,%esp
        }
        while (current->cptr != NULL) {
c0109f40:	e9 8a 00 00 00       	jmp    c0109fcf <do_exit+0x190>
            proc = current->cptr;
c0109f45:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c0109f4a:	8b 40 70             	mov    0x70(%eax),%eax
c0109f4d:	89 45 ec             	mov    %eax,-0x14(%ebp)
            current->cptr = proc->optr;
c0109f50:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c0109f55:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0109f58:	8b 52 78             	mov    0x78(%edx),%edx
c0109f5b:	89 50 70             	mov    %edx,0x70(%eax)
    
            proc->yptr = NULL;
c0109f5e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109f61:	c7 40 74 00 00 00 00 	movl   $0x0,0x74(%eax)
            if ((proc->optr = initproc->cptr) != NULL) {
c0109f68:	a1 24 00 1a c0       	mov    0xc01a0024,%eax
c0109f6d:	8b 50 70             	mov    0x70(%eax),%edx
c0109f70:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109f73:	89 50 78             	mov    %edx,0x78(%eax)
c0109f76:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109f79:	8b 40 78             	mov    0x78(%eax),%eax
c0109f7c:	85 c0                	test   %eax,%eax
c0109f7e:	74 0e                	je     c0109f8e <do_exit+0x14f>
                initproc->cptr->yptr = proc;
c0109f80:	a1 24 00 1a c0       	mov    0xc01a0024,%eax
c0109f85:	8b 40 70             	mov    0x70(%eax),%eax
c0109f88:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0109f8b:	89 50 74             	mov    %edx,0x74(%eax)
            }
            proc->parent = initproc;
c0109f8e:	8b 15 24 00 1a c0    	mov    0xc01a0024,%edx
c0109f94:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109f97:	89 50 14             	mov    %edx,0x14(%eax)
            initproc->cptr = proc;
c0109f9a:	a1 24 00 1a c0       	mov    0xc01a0024,%eax
c0109f9f:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0109fa2:	89 50 70             	mov    %edx,0x70(%eax)
            if (proc->state == PROC_ZOMBIE) {
c0109fa5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109fa8:	8b 00                	mov    (%eax),%eax
c0109faa:	83 f8 03             	cmp    $0x3,%eax
c0109fad:	75 20                	jne    c0109fcf <do_exit+0x190>
                if (initproc->wait_state == WT_CHILD) {
c0109faf:	a1 24 00 1a c0       	mov    0xc01a0024,%eax
c0109fb4:	8b 40 6c             	mov    0x6c(%eax),%eax
c0109fb7:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c0109fbc:	75 11                	jne    c0109fcf <do_exit+0x190>
                    wakeup_proc(initproc);
c0109fbe:	a1 24 00 1a c0       	mov    0xc01a0024,%eax
c0109fc3:	83 ec 0c             	sub    $0xc,%esp
c0109fc6:	50                   	push   %eax
c0109fc7:	e8 1a 0d 00 00       	call   c010ace6 <wakeup_proc>
c0109fcc:	83 c4 10             	add    $0x10,%esp
    {
        proc = current->parent;
        if (proc->wait_state == WT_CHILD) {
            wakeup_proc(proc);
        }
        while (current->cptr != NULL) {
c0109fcf:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c0109fd4:	8b 40 70             	mov    0x70(%eax),%eax
c0109fd7:	85 c0                	test   %eax,%eax
c0109fd9:	0f 85 66 ff ff ff    	jne    c0109f45 <do_exit+0x106>
                    wakeup_proc(initproc);
                }
            }
        }
    }
    local_intr_restore(intr_flag);
c0109fdf:	83 ec 0c             	sub    $0xc,%esp
c0109fe2:	ff 75 f0             	pushl  -0x10(%ebp)
c0109fe5:	e8 da f2 ff ff       	call   c01092c4 <__intr_restore>
c0109fea:	83 c4 10             	add    $0x10,%esp
    
    schedule();
c0109fed:	e8 69 0d 00 00       	call   c010ad5b <schedule>
    panic("do_exit will not return!! %d.\n", current->pid);
c0109ff2:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c0109ff7:	8b 40 04             	mov    0x4(%eax),%eax
c0109ffa:	50                   	push   %eax
c0109ffb:	68 74 df 10 c0       	push   $0xc010df74
c010a000:	68 0c 02 00 00       	push   $0x20c
c010a005:	68 10 df 10 c0       	push   $0xc010df10
c010a00a:	e8 e9 63 ff ff       	call   c01003f8 <__panic>

c010a00f <load_icode>:
/* load_icode - load the content of binary program(ELF format) as the new content of current process
 * @binary:  the memory addr of the content of binary program
 * @size:  the size of the content of binary program
 */
static int
load_icode(unsigned char *binary, size_t size) {
c010a00f:	55                   	push   %ebp
c010a010:	89 e5                	mov    %esp,%ebp
c010a012:	83 ec 58             	sub    $0x58,%esp
    if (current->mm != NULL) {
c010a015:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c010a01a:	8b 40 18             	mov    0x18(%eax),%eax
c010a01d:	85 c0                	test   %eax,%eax
c010a01f:	74 17                	je     c010a038 <load_icode+0x29>
        panic("load_icode: current->mm must be empty.\n");
c010a021:	83 ec 04             	sub    $0x4,%esp
c010a024:	68 94 df 10 c0       	push   $0xc010df94
c010a029:	68 16 02 00 00       	push   $0x216
c010a02e:	68 10 df 10 c0       	push   $0xc010df10
c010a033:	e8 c0 63 ff ff       	call   c01003f8 <__panic>
    }

    int ret = -E_NO_MEM;
c010a038:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    struct mm_struct *mm;
    //(1) create a new mm for current process
    if ((mm = mm_create()) == NULL) {
c010a03f:	e8 44 9d ff ff       	call   c0103d88 <mm_create>
c010a044:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010a047:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c010a04b:	0f 84 8d 05 00 00    	je     c010a5de <load_icode+0x5cf>
        goto bad_mm;
    }
    //(2) create a new PDT, and mm->pgdir= kernel virtual addr of PDT
    if (setup_pgdir(mm) != 0) {
c010a051:	83 ec 0c             	sub    $0xc,%esp
c010a054:	ff 75 d0             	pushl  -0x30(%ebp)
c010a057:	e8 34 fa ff ff       	call   c0109a90 <setup_pgdir>
c010a05c:	83 c4 10             	add    $0x10,%esp
c010a05f:	85 c0                	test   %eax,%eax
c010a061:	0f 85 66 05 00 00    	jne    c010a5cd <load_icode+0x5be>
        goto bad_pgdir_cleanup_mm;
    }
    //(3) copy TEXT/DATA section, build BSS parts in binary to memory space of process
    struct Page *page;
    //(3.1) get the file header of the bianry program (ELF format)
    struct elfhdr *elf = (struct elfhdr *)binary;
c010a067:	8b 45 08             	mov    0x8(%ebp),%eax
c010a06a:	89 45 cc             	mov    %eax,-0x34(%ebp)
    //(3.2) get the entry of the program section headers of the bianry program (ELF format)
    struct proghdr *ph = (struct proghdr *)(binary + elf->e_phoff);
c010a06d:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010a070:	8b 50 1c             	mov    0x1c(%eax),%edx
c010a073:	8b 45 08             	mov    0x8(%ebp),%eax
c010a076:	01 d0                	add    %edx,%eax
c010a078:	89 45 ec             	mov    %eax,-0x14(%ebp)
    //(3.3) This program is valid?
    if (elf->e_magic != ELF_MAGIC) {
c010a07b:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010a07e:	8b 00                	mov    (%eax),%eax
c010a080:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
c010a085:	74 0c                	je     c010a093 <load_icode+0x84>
        ret = -E_INVAL_ELF;
c010a087:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
        goto bad_elf_cleanup_pgdir;
c010a08e:	e9 2a 05 00 00       	jmp    c010a5bd <load_icode+0x5ae>
    }

    uint32_t vm_flags, perm;
    struct proghdr *ph_end = ph + elf->e_phnum;
c010a093:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010a096:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c010a09a:	0f b7 c0             	movzwl %ax,%eax
c010a09d:	c1 e0 05             	shl    $0x5,%eax
c010a0a0:	89 c2                	mov    %eax,%edx
c010a0a2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a0a5:	01 d0                	add    %edx,%eax
c010a0a7:	89 45 c8             	mov    %eax,-0x38(%ebp)
    for (; ph < ph_end; ph ++) {
c010a0aa:	e9 e0 02 00 00       	jmp    c010a38f <load_icode+0x380>
    //(3.4) find every program section headers
        if (ph->p_type != ELF_PT_LOAD) {
c010a0af:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a0b2:	8b 00                	mov    (%eax),%eax
c010a0b4:	83 f8 01             	cmp    $0x1,%eax
c010a0b7:	0f 85 c7 02 00 00    	jne    c010a384 <load_icode+0x375>
            continue ;
        }
        if (ph->p_filesz > ph->p_memsz) {
c010a0bd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a0c0:	8b 50 10             	mov    0x10(%eax),%edx
c010a0c3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a0c6:	8b 40 14             	mov    0x14(%eax),%eax
c010a0c9:	39 c2                	cmp    %eax,%edx
c010a0cb:	76 0c                	jbe    c010a0d9 <load_icode+0xca>
            ret = -E_INVAL_ELF;
c010a0cd:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
            goto bad_cleanup_mmap;
c010a0d4:	e9 d6 04 00 00       	jmp    c010a5af <load_icode+0x5a0>
        }
        if (ph->p_filesz == 0) {
c010a0d9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a0dc:	8b 40 10             	mov    0x10(%eax),%eax
c010a0df:	85 c0                	test   %eax,%eax
c010a0e1:	0f 84 a0 02 00 00    	je     c010a387 <load_icode+0x378>
            continue ;
        }
    //(3.5) call mm_map fun to setup the new vma ( ph->p_va, ph->p_memsz)
        vm_flags = 0, perm = PTE_U;
c010a0e7:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c010a0ee:	c7 45 e4 04 00 00 00 	movl   $0x4,-0x1c(%ebp)
        if (ph->p_flags & ELF_PF_X) vm_flags |= VM_EXEC;
c010a0f5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a0f8:	8b 40 18             	mov    0x18(%eax),%eax
c010a0fb:	83 e0 01             	and    $0x1,%eax
c010a0fe:	85 c0                	test   %eax,%eax
c010a100:	74 04                	je     c010a106 <load_icode+0xf7>
c010a102:	83 4d e8 04          	orl    $0x4,-0x18(%ebp)
        if (ph->p_flags & ELF_PF_W) vm_flags |= VM_WRITE;
c010a106:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a109:	8b 40 18             	mov    0x18(%eax),%eax
c010a10c:	83 e0 02             	and    $0x2,%eax
c010a10f:	85 c0                	test   %eax,%eax
c010a111:	74 04                	je     c010a117 <load_icode+0x108>
c010a113:	83 4d e8 02          	orl    $0x2,-0x18(%ebp)
        if (ph->p_flags & ELF_PF_R) vm_flags |= VM_READ;
c010a117:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a11a:	8b 40 18             	mov    0x18(%eax),%eax
c010a11d:	83 e0 04             	and    $0x4,%eax
c010a120:	85 c0                	test   %eax,%eax
c010a122:	74 04                	je     c010a128 <load_icode+0x119>
c010a124:	83 4d e8 01          	orl    $0x1,-0x18(%ebp)
        if (vm_flags & VM_WRITE) perm |= PTE_W;
c010a128:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a12b:	83 e0 02             	and    $0x2,%eax
c010a12e:	85 c0                	test   %eax,%eax
c010a130:	74 04                	je     c010a136 <load_icode+0x127>
c010a132:	83 4d e4 02          	orl    $0x2,-0x1c(%ebp)
        if ((ret = mm_map(mm, ph->p_va, ph->p_memsz, vm_flags, NULL)) != 0) {
c010a136:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a139:	8b 50 14             	mov    0x14(%eax),%edx
c010a13c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a13f:	8b 40 08             	mov    0x8(%eax),%eax
c010a142:	83 ec 0c             	sub    $0xc,%esp
c010a145:	6a 00                	push   $0x0
c010a147:	ff 75 e8             	pushl  -0x18(%ebp)
c010a14a:	52                   	push   %edx
c010a14b:	50                   	push   %eax
c010a14c:	ff 75 d0             	pushl  -0x30(%ebp)
c010a14f:	e8 fd 9f ff ff       	call   c0104151 <mm_map>
c010a154:	83 c4 20             	add    $0x20,%esp
c010a157:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a15a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a15e:	0f 85 41 04 00 00    	jne    c010a5a5 <load_icode+0x596>
            goto bad_cleanup_mmap;
        }
        unsigned char *from = binary + ph->p_offset;
c010a164:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a167:	8b 50 04             	mov    0x4(%eax),%edx
c010a16a:	8b 45 08             	mov    0x8(%ebp),%eax
c010a16d:	01 d0                	add    %edx,%eax
c010a16f:	89 45 e0             	mov    %eax,-0x20(%ebp)
        size_t off, size;
        uintptr_t start = ph->p_va, end, la = ROUNDDOWN(start, PGSIZE);
c010a172:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a175:	8b 40 08             	mov    0x8(%eax),%eax
c010a178:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010a17b:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010a17e:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c010a181:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010a184:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010a189:	89 45 d4             	mov    %eax,-0x2c(%ebp)

        ret = -E_NO_MEM;
c010a18c:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
        end = ph->p_va + ph->p_filesz;
c010a193:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a196:	8b 50 08             	mov    0x8(%eax),%edx
c010a199:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a19c:	8b 40 10             	mov    0x10(%eax),%eax
c010a19f:	01 d0                	add    %edx,%eax
c010a1a1:	89 45 c0             	mov    %eax,-0x40(%ebp)
     //(3.6.1) copy TEXT/DATA section of bianry program
        while (start < end) {
c010a1a4:	e9 84 00 00 00       	jmp    c010a22d <load_icode+0x21e>
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
c010a1a9:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010a1ac:	8b 40 0c             	mov    0xc(%eax),%eax
c010a1af:	83 ec 04             	sub    $0x4,%esp
c010a1b2:	ff 75 e4             	pushl  -0x1c(%ebp)
c010a1b5:	ff 75 d4             	pushl  -0x2c(%ebp)
c010a1b8:	50                   	push   %eax
c010a1b9:	e8 73 e3 ff ff       	call   c0108531 <pgdir_alloc_page>
c010a1be:	83 c4 10             	add    $0x10,%esp
c010a1c1:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010a1c4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010a1c8:	0f 84 da 03 00 00    	je     c010a5a8 <load_icode+0x599>
                goto bad_cleanup_mmap;
            }
            off = start - la, size = PGSIZE - off, la += PGSIZE;
c010a1ce:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010a1d1:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c010a1d4:	89 45 bc             	mov    %eax,-0x44(%ebp)
c010a1d7:	b8 00 10 00 00       	mov    $0x1000,%eax
c010a1dc:	2b 45 bc             	sub    -0x44(%ebp),%eax
c010a1df:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010a1e2:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
            if (end < la) {
c010a1e9:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010a1ec:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010a1ef:	73 09                	jae    c010a1fa <load_icode+0x1eb>
                size -= la - end;
c010a1f1:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010a1f4:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c010a1f7:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memcpy(page2kva(page) + off, from, size);   // corresponding pte has been inserted in pgdir_alloc_page()
c010a1fa:	83 ec 0c             	sub    $0xc,%esp
c010a1fd:	ff 75 f0             	pushl  -0x10(%ebp)
c010a200:	e8 a0 f1 ff ff       	call   c01093a5 <page2kva>
c010a205:	83 c4 10             	add    $0x10,%esp
c010a208:	89 c2                	mov    %eax,%edx
c010a20a:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010a20d:	01 d0                	add    %edx,%eax
c010a20f:	83 ec 04             	sub    $0x4,%esp
c010a212:	ff 75 dc             	pushl  -0x24(%ebp)
c010a215:	ff 75 e0             	pushl  -0x20(%ebp)
c010a218:	50                   	push   %eax
c010a219:	e8 05 12 00 00       	call   c010b423 <memcpy>
c010a21e:	83 c4 10             	add    $0x10,%esp
            start += size, from += size;
c010a221:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a224:	01 45 d8             	add    %eax,-0x28(%ebp)
c010a227:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a22a:	01 45 e0             	add    %eax,-0x20(%ebp)
        ret = -E_NO_MEM;

     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
        end = ph->p_va + ph->p_filesz;
     //(3.6.1) copy TEXT/DATA section of bianry program
        while (start < end) {
c010a22d:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010a230:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010a233:	0f 82 70 ff ff ff    	jb     c010a1a9 <load_icode+0x19a>
            memcpy(page2kva(page) + off, from, size);   // corresponding pte has been inserted in pgdir_alloc_page()
            start += size, from += size;
        }

      //(3.6.2) build BSS section of binary program
        end = ph->p_va + ph->p_memsz;
c010a239:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a23c:	8b 50 08             	mov    0x8(%eax),%edx
c010a23f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a242:	8b 40 14             	mov    0x14(%eax),%eax
c010a245:	01 d0                	add    %edx,%eax
c010a247:	89 45 c0             	mov    %eax,-0x40(%ebp)
        if (start < la) {
c010a24a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010a24d:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010a250:	0f 83 20 01 00 00    	jae    c010a376 <load_icode+0x367>
            /* ph->p_memsz == ph->p_filesz */
            if (start == end) {
c010a256:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010a259:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010a25c:	0f 84 28 01 00 00    	je     c010a38a <load_icode+0x37b>
                continue ;
            }
            off = start + PGSIZE - la, size = PGSIZE - off;
c010a262:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010a265:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c010a268:	05 00 10 00 00       	add    $0x1000,%eax
c010a26d:	89 45 bc             	mov    %eax,-0x44(%ebp)
c010a270:	b8 00 10 00 00       	mov    $0x1000,%eax
c010a275:	2b 45 bc             	sub    -0x44(%ebp),%eax
c010a278:	89 45 dc             	mov    %eax,-0x24(%ebp)
            if (end < la) {
c010a27b:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010a27e:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010a281:	73 09                	jae    c010a28c <load_icode+0x27d>
                size -= la - end;
c010a283:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010a286:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c010a289:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
c010a28c:	83 ec 0c             	sub    $0xc,%esp
c010a28f:	ff 75 f0             	pushl  -0x10(%ebp)
c010a292:	e8 0e f1 ff ff       	call   c01093a5 <page2kva>
c010a297:	83 c4 10             	add    $0x10,%esp
c010a29a:	89 c2                	mov    %eax,%edx
c010a29c:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010a29f:	01 d0                	add    %edx,%eax
c010a2a1:	83 ec 04             	sub    $0x4,%esp
c010a2a4:	ff 75 dc             	pushl  -0x24(%ebp)
c010a2a7:	6a 00                	push   $0x0
c010a2a9:	50                   	push   %eax
c010a2aa:	e8 91 10 00 00       	call   c010b340 <memset>
c010a2af:	83 c4 10             	add    $0x10,%esp
            start += size;
c010a2b2:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a2b5:	01 45 d8             	add    %eax,-0x28(%ebp)
            assert((end < la && start == end) || (end >= la && start == la));
c010a2b8:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010a2bb:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010a2be:	73 0c                	jae    c010a2cc <load_icode+0x2bd>
c010a2c0:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010a2c3:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010a2c6:	0f 84 aa 00 00 00    	je     c010a376 <load_icode+0x367>
c010a2cc:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010a2cf:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010a2d2:	72 0c                	jb     c010a2e0 <load_icode+0x2d1>
c010a2d4:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010a2d7:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010a2da:	0f 84 96 00 00 00    	je     c010a376 <load_icode+0x367>
c010a2e0:	68 bc df 10 c0       	push   $0xc010dfbc
c010a2e5:	68 3d df 10 c0       	push   $0xc010df3d
c010a2ea:	68 68 02 00 00       	push   $0x268
c010a2ef:	68 10 df 10 c0       	push   $0xc010df10
c010a2f4:	e8 ff 60 ff ff       	call   c01003f8 <__panic>
        }
        while (start < end) {
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
c010a2f9:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010a2fc:	8b 40 0c             	mov    0xc(%eax),%eax
c010a2ff:	83 ec 04             	sub    $0x4,%esp
c010a302:	ff 75 e4             	pushl  -0x1c(%ebp)
c010a305:	ff 75 d4             	pushl  -0x2c(%ebp)
c010a308:	50                   	push   %eax
c010a309:	e8 23 e2 ff ff       	call   c0108531 <pgdir_alloc_page>
c010a30e:	83 c4 10             	add    $0x10,%esp
c010a311:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010a314:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010a318:	0f 84 8d 02 00 00    	je     c010a5ab <load_icode+0x59c>
                goto bad_cleanup_mmap;
            }
            off = start - la, size = PGSIZE - off, la += PGSIZE;
c010a31e:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010a321:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c010a324:	89 45 bc             	mov    %eax,-0x44(%ebp)
c010a327:	b8 00 10 00 00       	mov    $0x1000,%eax
c010a32c:	2b 45 bc             	sub    -0x44(%ebp),%eax
c010a32f:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010a332:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
            if (end < la) {
c010a339:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010a33c:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010a33f:	73 09                	jae    c010a34a <load_icode+0x33b>
                size -= la - end;
c010a341:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010a344:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c010a347:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
c010a34a:	83 ec 0c             	sub    $0xc,%esp
c010a34d:	ff 75 f0             	pushl  -0x10(%ebp)
c010a350:	e8 50 f0 ff ff       	call   c01093a5 <page2kva>
c010a355:	83 c4 10             	add    $0x10,%esp
c010a358:	89 c2                	mov    %eax,%edx
c010a35a:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010a35d:	01 d0                	add    %edx,%eax
c010a35f:	83 ec 04             	sub    $0x4,%esp
c010a362:	ff 75 dc             	pushl  -0x24(%ebp)
c010a365:	6a 00                	push   $0x0
c010a367:	50                   	push   %eax
c010a368:	e8 d3 0f 00 00       	call   c010b340 <memset>
c010a36d:	83 c4 10             	add    $0x10,%esp
            start += size;
c010a370:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a373:	01 45 d8             	add    %eax,-0x28(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
            start += size;
            assert((end < la && start == end) || (end >= la && start == la));
        }
        while (start < end) {
c010a376:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010a379:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010a37c:	0f 82 77 ff ff ff    	jb     c010a2f9 <load_icode+0x2ea>
c010a382:	eb 07                	jmp    c010a38b <load_icode+0x37c>
    uint32_t vm_flags, perm;
    struct proghdr *ph_end = ph + elf->e_phnum;
    for (; ph < ph_end; ph ++) {
    //(3.4) find every program section headers
        if (ph->p_type != ELF_PT_LOAD) {
            continue ;
c010a384:	90                   	nop
c010a385:	eb 04                	jmp    c010a38b <load_icode+0x37c>
        if (ph->p_filesz > ph->p_memsz) {
            ret = -E_INVAL_ELF;
            goto bad_cleanup_mmap;
        }
        if (ph->p_filesz == 0) {
            continue ;
c010a387:	90                   	nop
c010a388:	eb 01                	jmp    c010a38b <load_icode+0x37c>
      //(3.6.2) build BSS section of binary program
        end = ph->p_va + ph->p_memsz;
        if (start < la) {
            /* ph->p_memsz == ph->p_filesz */
            if (start == end) {
                continue ;
c010a38a:	90                   	nop
        goto bad_elf_cleanup_pgdir;
    }

    uint32_t vm_flags, perm;
    struct proghdr *ph_end = ph + elf->e_phnum;
    for (; ph < ph_end; ph ++) {
c010a38b:	83 45 ec 20          	addl   $0x20,-0x14(%ebp)
c010a38f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a392:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c010a395:	0f 82 14 fd ff ff    	jb     c010a0af <load_icode+0xa0>
            memset(page2kva(page) + off, 0, size);
            start += size;
        }
    }
    //(4) build user stack memory
    vm_flags = VM_READ | VM_WRITE | VM_STACK;
c010a39b:	c7 45 e8 0b 00 00 00 	movl   $0xb,-0x18(%ebp)
    if ((ret = mm_map(mm, USTACKTOP - USTACKSIZE, USTACKSIZE, vm_flags, NULL)) != 0) {
c010a3a2:	83 ec 0c             	sub    $0xc,%esp
c010a3a5:	6a 00                	push   $0x0
c010a3a7:	ff 75 e8             	pushl  -0x18(%ebp)
c010a3aa:	68 00 00 10 00       	push   $0x100000
c010a3af:	68 00 00 f0 af       	push   $0xaff00000
c010a3b4:	ff 75 d0             	pushl  -0x30(%ebp)
c010a3b7:	e8 95 9d ff ff       	call   c0104151 <mm_map>
c010a3bc:	83 c4 20             	add    $0x20,%esp
c010a3bf:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a3c2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a3c6:	0f 85 e2 01 00 00    	jne    c010a5ae <load_icode+0x59f>
        goto bad_cleanup_mmap;
    }
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-PGSIZE , PTE_USER) != NULL);
c010a3cc:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010a3cf:	8b 40 0c             	mov    0xc(%eax),%eax
c010a3d2:	83 ec 04             	sub    $0x4,%esp
c010a3d5:	6a 07                	push   $0x7
c010a3d7:	68 00 f0 ff af       	push   $0xaffff000
c010a3dc:	50                   	push   %eax
c010a3dd:	e8 4f e1 ff ff       	call   c0108531 <pgdir_alloc_page>
c010a3e2:	83 c4 10             	add    $0x10,%esp
c010a3e5:	85 c0                	test   %eax,%eax
c010a3e7:	75 19                	jne    c010a402 <load_icode+0x3f3>
c010a3e9:	68 f8 df 10 c0       	push   $0xc010dff8
c010a3ee:	68 3d df 10 c0       	push   $0xc010df3d
c010a3f3:	68 7b 02 00 00       	push   $0x27b
c010a3f8:	68 10 df 10 c0       	push   $0xc010df10
c010a3fd:	e8 f6 5f ff ff       	call   c01003f8 <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-2*PGSIZE , PTE_USER) != NULL);
c010a402:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010a405:	8b 40 0c             	mov    0xc(%eax),%eax
c010a408:	83 ec 04             	sub    $0x4,%esp
c010a40b:	6a 07                	push   $0x7
c010a40d:	68 00 e0 ff af       	push   $0xafffe000
c010a412:	50                   	push   %eax
c010a413:	e8 19 e1 ff ff       	call   c0108531 <pgdir_alloc_page>
c010a418:	83 c4 10             	add    $0x10,%esp
c010a41b:	85 c0                	test   %eax,%eax
c010a41d:	75 19                	jne    c010a438 <load_icode+0x429>
c010a41f:	68 3c e0 10 c0       	push   $0xc010e03c
c010a424:	68 3d df 10 c0       	push   $0xc010df3d
c010a429:	68 7c 02 00 00       	push   $0x27c
c010a42e:	68 10 df 10 c0       	push   $0xc010df10
c010a433:	e8 c0 5f ff ff       	call   c01003f8 <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-3*PGSIZE , PTE_USER) != NULL);
c010a438:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010a43b:	8b 40 0c             	mov    0xc(%eax),%eax
c010a43e:	83 ec 04             	sub    $0x4,%esp
c010a441:	6a 07                	push   $0x7
c010a443:	68 00 d0 ff af       	push   $0xafffd000
c010a448:	50                   	push   %eax
c010a449:	e8 e3 e0 ff ff       	call   c0108531 <pgdir_alloc_page>
c010a44e:	83 c4 10             	add    $0x10,%esp
c010a451:	85 c0                	test   %eax,%eax
c010a453:	75 19                	jne    c010a46e <load_icode+0x45f>
c010a455:	68 80 e0 10 c0       	push   $0xc010e080
c010a45a:	68 3d df 10 c0       	push   $0xc010df3d
c010a45f:	68 7d 02 00 00       	push   $0x27d
c010a464:	68 10 df 10 c0       	push   $0xc010df10
c010a469:	e8 8a 5f ff ff       	call   c01003f8 <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-4*PGSIZE , PTE_USER) != NULL);
c010a46e:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010a471:	8b 40 0c             	mov    0xc(%eax),%eax
c010a474:	83 ec 04             	sub    $0x4,%esp
c010a477:	6a 07                	push   $0x7
c010a479:	68 00 c0 ff af       	push   $0xafffc000
c010a47e:	50                   	push   %eax
c010a47f:	e8 ad e0 ff ff       	call   c0108531 <pgdir_alloc_page>
c010a484:	83 c4 10             	add    $0x10,%esp
c010a487:	85 c0                	test   %eax,%eax
c010a489:	75 19                	jne    c010a4a4 <load_icode+0x495>
c010a48b:	68 c4 e0 10 c0       	push   $0xc010e0c4
c010a490:	68 3d df 10 c0       	push   $0xc010df3d
c010a495:	68 7e 02 00 00       	push   $0x27e
c010a49a:	68 10 df 10 c0       	push   $0xc010df10
c010a49f:	e8 54 5f ff ff       	call   c01003f8 <__panic>
    
    //(5) set current process's mm, sr3, and set CR3 reg = physical addr of Page Directory
    mm_count_inc(mm);
c010a4a4:	83 ec 0c             	sub    $0xc,%esp
c010a4a7:	ff 75 d0             	pushl  -0x30(%ebp)
c010a4aa:	e8 7a ef ff ff       	call   c0109429 <mm_count_inc>
c010a4af:	83 c4 10             	add    $0x10,%esp
    current->mm = mm;
c010a4b2:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c010a4b7:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010a4ba:	89 50 18             	mov    %edx,0x18(%eax)
    current->cr3 = PADDR(mm->pgdir);
c010a4bd:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c010a4c2:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010a4c5:	8b 52 0c             	mov    0xc(%edx),%edx
c010a4c8:	89 55 b8             	mov    %edx,-0x48(%ebp)
c010a4cb:	81 7d b8 ff ff ff bf 	cmpl   $0xbfffffff,-0x48(%ebp)
c010a4d2:	77 17                	ja     c010a4eb <load_icode+0x4dc>
c010a4d4:	ff 75 b8             	pushl  -0x48(%ebp)
c010a4d7:	68 ec de 10 c0       	push   $0xc010deec
c010a4dc:	68 83 02 00 00       	push   $0x283
c010a4e1:	68 10 df 10 c0       	push   $0xc010df10
c010a4e6:	e8 0d 5f ff ff       	call   c01003f8 <__panic>
c010a4eb:	8b 55 b8             	mov    -0x48(%ebp),%edx
c010a4ee:	81 c2 00 00 00 40    	add    $0x40000000,%edx
c010a4f4:	89 50 40             	mov    %edx,0x40(%eax)
    lcr3(PADDR(mm->pgdir));     // NOTE: update cr3
c010a4f7:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010a4fa:	8b 40 0c             	mov    0xc(%eax),%eax
c010a4fd:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c010a500:	81 7d b4 ff ff ff bf 	cmpl   $0xbfffffff,-0x4c(%ebp)
c010a507:	77 17                	ja     c010a520 <load_icode+0x511>
c010a509:	ff 75 b4             	pushl  -0x4c(%ebp)
c010a50c:	68 ec de 10 c0       	push   $0xc010deec
c010a511:	68 84 02 00 00       	push   $0x284
c010a516:	68 10 df 10 c0       	push   $0xc010df10
c010a51b:	e8 d8 5e ff ff       	call   c01003f8 <__panic>
c010a520:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010a523:	05 00 00 00 40       	add    $0x40000000,%eax
c010a528:	89 45 ac             	mov    %eax,-0x54(%ebp)
c010a52b:	8b 45 ac             	mov    -0x54(%ebp),%eax
c010a52e:	0f 22 d8             	mov    %eax,%cr3

    //(6) setup trapframe for user environment
    struct trapframe *tf = current->tf;
c010a531:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c010a536:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a539:	89 45 b0             	mov    %eax,-0x50(%ebp)
    memset(tf, 0, sizeof(struct trapframe));
c010a53c:	83 ec 04             	sub    $0x4,%esp
c010a53f:	6a 4c                	push   $0x4c
c010a541:	6a 00                	push   $0x0
c010a543:	ff 75 b0             	pushl  -0x50(%ebp)
c010a546:	e8 f5 0d 00 00       	call   c010b340 <memset>
c010a54b:	83 c4 10             	add    $0x10,%esp
     *          tf_ds=tf_es=tf_ss should be USER_DS segment
     *          tf_esp should be the top addr of user stack (USTACKTOP)
     *          tf_eip should be the entry point of this binary program (elf->e_entry)
     *          tf_eflags should be set to enable computer to produce Interrupt
     */
    tf->tf_cs = USER_CS;
c010a54e:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010a551:	66 c7 40 3c 1b 00    	movw   $0x1b,0x3c(%eax)
    tf->tf_ds = USER_DS;
c010a557:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010a55a:	66 c7 40 2c 23 00    	movw   $0x23,0x2c(%eax)
    tf->tf_es = USER_DS;
c010a560:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010a563:	66 c7 40 28 23 00    	movw   $0x23,0x28(%eax)
    tf->tf_ss = USER_DS;
c010a569:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010a56c:	66 c7 40 48 23 00    	movw   $0x23,0x48(%eax)
    tf->tf_esp = USTACKTOP;
c010a572:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010a575:	c7 40 44 00 00 00 b0 	movl   $0xb0000000,0x44(%eax)
    tf->tf_eip = elf->e_entry;
c010a57c:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010a57f:	8b 50 18             	mov    0x18(%eax),%edx
c010a582:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010a585:	89 50 38             	mov    %edx,0x38(%eax)
    tf->tf_eflags |= FL_IF;     // enable intr
c010a588:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010a58b:	8b 40 40             	mov    0x40(%eax),%eax
c010a58e:	80 cc 02             	or     $0x2,%ah
c010a591:	89 c2                	mov    %eax,%edx
c010a593:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010a596:	89 50 40             	mov    %edx,0x40(%eax)
    
    ret = 0;
c010a599:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
out:
    return ret;
c010a5a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a5a3:	eb 3c                	jmp    c010a5e1 <load_icode+0x5d2>
        if (ph->p_flags & ELF_PF_X) vm_flags |= VM_EXEC;
        if (ph->p_flags & ELF_PF_W) vm_flags |= VM_WRITE;
        if (ph->p_flags & ELF_PF_R) vm_flags |= VM_READ;
        if (vm_flags & VM_WRITE) perm |= PTE_W;
        if ((ret = mm_map(mm, ph->p_va, ph->p_memsz, vm_flags, NULL)) != 0) {
            goto bad_cleanup_mmap;
c010a5a5:	90                   	nop
c010a5a6:	eb 07                	jmp    c010a5af <load_icode+0x5a0>
     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
        end = ph->p_va + ph->p_filesz;
     //(3.6.1) copy TEXT/DATA section of bianry program
        while (start < end) {
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
                goto bad_cleanup_mmap;
c010a5a8:	90                   	nop
c010a5a9:	eb 04                	jmp    c010a5af <load_icode+0x5a0>
            start += size;
            assert((end < la && start == end) || (end >= la && start == la));
        }
        while (start < end) {
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
                goto bad_cleanup_mmap;
c010a5ab:	90                   	nop
c010a5ac:	eb 01                	jmp    c010a5af <load_icode+0x5a0>
        }
    }
    //(4) build user stack memory
    vm_flags = VM_READ | VM_WRITE | VM_STACK;
    if ((ret = mm_map(mm, USTACKTOP - USTACKSIZE, USTACKSIZE, vm_flags, NULL)) != 0) {
        goto bad_cleanup_mmap;
c010a5ae:	90                   	nop
    
    ret = 0;
out:
    return ret;
bad_cleanup_mmap:
    exit_mmap(mm);
c010a5af:	83 ec 0c             	sub    $0xc,%esp
c010a5b2:	ff 75 d0             	pushl  -0x30(%ebp)
c010a5b5:	e8 86 9d ff ff       	call   c0104340 <exit_mmap>
c010a5ba:	83 c4 10             	add    $0x10,%esp
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
c010a5bd:	83 ec 0c             	sub    $0xc,%esp
c010a5c0:	ff 75 d0             	pushl  -0x30(%ebp)
c010a5c3:	e8 61 f5 ff ff       	call   c0109b29 <put_pgdir>
c010a5c8:	83 c4 10             	add    $0x10,%esp
c010a5cb:	eb 01                	jmp    c010a5ce <load_icode+0x5bf>
    if ((mm = mm_create()) == NULL) {
        goto bad_mm;
    }
    //(2) create a new PDT, and mm->pgdir= kernel virtual addr of PDT
    if (setup_pgdir(mm) != 0) {
        goto bad_pgdir_cleanup_mm;
c010a5cd:	90                   	nop
bad_cleanup_mmap:
    exit_mmap(mm);
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
c010a5ce:	83 ec 0c             	sub    $0xc,%esp
c010a5d1:	ff 75 d0             	pushl  -0x30(%ebp)
c010a5d4:	e8 d9 9a ff ff       	call   c01040b2 <mm_destroy>
c010a5d9:	83 c4 10             	add    $0x10,%esp
bad_mm:
    goto out;
c010a5dc:	eb c2                	jmp    c010a5a0 <load_icode+0x591>

    int ret = -E_NO_MEM;
    struct mm_struct *mm;
    //(1) create a new mm for current process
    if ((mm = mm_create()) == NULL) {
        goto bad_mm;
c010a5de:	90                   	nop
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
bad_mm:
    goto out;
c010a5df:	eb bf                	jmp    c010a5a0 <load_icode+0x591>
}
c010a5e1:	c9                   	leave  
c010a5e2:	c3                   	ret    

c010a5e3 <do_execve>:

// do_execve - call exit_mmap(mm)&put_pgdir(mm) to reclaim memory space of current process
//           - call load_icode to setup new memory space accroding binary prog.
int
do_execve(const char *name, size_t len, unsigned char *binary, size_t size) {
c010a5e3:	55                   	push   %ebp
c010a5e4:	89 e5                	mov    %esp,%ebp
c010a5e6:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = current->mm;
c010a5e9:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c010a5ee:	8b 40 18             	mov    0x18(%eax),%eax
c010a5f1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!user_mem_check(mm, (uintptr_t)name, len, 0)) {
c010a5f4:	8b 45 08             	mov    0x8(%ebp),%eax
c010a5f7:	6a 00                	push   $0x0
c010a5f9:	ff 75 0c             	pushl  0xc(%ebp)
c010a5fc:	50                   	push   %eax
c010a5fd:	ff 75 f4             	pushl  -0xc(%ebp)
c010a600:	e8 cc a6 ff ff       	call   c0104cd1 <user_mem_check>
c010a605:	83 c4 10             	add    $0x10,%esp
c010a608:	85 c0                	test   %eax,%eax
c010a60a:	75 0a                	jne    c010a616 <do_execve+0x33>
        return -E_INVAL;
c010a60c:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010a611:	e9 ed 00 00 00       	jmp    c010a703 <do_execve+0x120>
    }
    if (len > PROC_NAME_LEN) {
c010a616:	83 7d 0c 0f          	cmpl   $0xf,0xc(%ebp)
c010a61a:	76 07                	jbe    c010a623 <do_execve+0x40>
        len = PROC_NAME_LEN;
c010a61c:	c7 45 0c 0f 00 00 00 	movl   $0xf,0xc(%ebp)
    }

    char local_name[PROC_NAME_LEN + 1];
    memset(local_name, 0, sizeof(local_name));
c010a623:	83 ec 04             	sub    $0x4,%esp
c010a626:	6a 10                	push   $0x10
c010a628:	6a 00                	push   $0x0
c010a62a:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010a62d:	50                   	push   %eax
c010a62e:	e8 0d 0d 00 00       	call   c010b340 <memset>
c010a633:	83 c4 10             	add    $0x10,%esp
    memcpy(local_name, name, len);
c010a636:	83 ec 04             	sub    $0x4,%esp
c010a639:	ff 75 0c             	pushl  0xc(%ebp)
c010a63c:	ff 75 08             	pushl  0x8(%ebp)
c010a63f:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010a642:	50                   	push   %eax
c010a643:	e8 db 0d 00 00       	call   c010b423 <memcpy>
c010a648:	83 c4 10             	add    $0x10,%esp

    if (mm != NULL) {
c010a64b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a64f:	74 56                	je     c010a6a7 <do_execve+0xc4>
        lcr3(boot_cr3);
c010a651:	a1 94 21 1a c0       	mov    0xc01a2194,%eax
c010a656:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010a659:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a65c:	0f 22 d8             	mov    %eax,%cr3
        if (mm_count_dec(mm) == 0) {
c010a65f:	83 ec 0c             	sub    $0xc,%esp
c010a662:	ff 75 f4             	pushl  -0xc(%ebp)
c010a665:	e8 d9 ed ff ff       	call   c0109443 <mm_count_dec>
c010a66a:	83 c4 10             	add    $0x10,%esp
c010a66d:	85 c0                	test   %eax,%eax
c010a66f:	75 2a                	jne    c010a69b <do_execve+0xb8>
            exit_mmap(mm);
c010a671:	83 ec 0c             	sub    $0xc,%esp
c010a674:	ff 75 f4             	pushl  -0xc(%ebp)
c010a677:	e8 c4 9c ff ff       	call   c0104340 <exit_mmap>
c010a67c:	83 c4 10             	add    $0x10,%esp
            put_pgdir(mm);
c010a67f:	83 ec 0c             	sub    $0xc,%esp
c010a682:	ff 75 f4             	pushl  -0xc(%ebp)
c010a685:	e8 9f f4 ff ff       	call   c0109b29 <put_pgdir>
c010a68a:	83 c4 10             	add    $0x10,%esp
            mm_destroy(mm);
c010a68d:	83 ec 0c             	sub    $0xc,%esp
c010a690:	ff 75 f4             	pushl  -0xc(%ebp)
c010a693:	e8 1a 9a ff ff       	call   c01040b2 <mm_destroy>
c010a698:	83 c4 10             	add    $0x10,%esp
        }
        current->mm = NULL;
c010a69b:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c010a6a0:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    int ret;
    if ((ret = load_icode(binary, size)) != 0) {
c010a6a7:	83 ec 08             	sub    $0x8,%esp
c010a6aa:	ff 75 14             	pushl  0x14(%ebp)
c010a6ad:	ff 75 10             	pushl  0x10(%ebp)
c010a6b0:	e8 5a f9 ff ff       	call   c010a00f <load_icode>
c010a6b5:	83 c4 10             	add    $0x10,%esp
c010a6b8:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010a6bb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010a6bf:	75 1c                	jne    c010a6dd <do_execve+0xfa>
        goto execve_exit;
    }
    set_proc_name(current, local_name);
c010a6c1:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c010a6c6:	83 ec 08             	sub    $0x8,%esp
c010a6c9:	8d 55 dc             	lea    -0x24(%ebp),%edx
c010a6cc:	52                   	push   %edx
c010a6cd:	50                   	push   %eax
c010a6ce:	e8 aa ee ff ff       	call   c010957d <set_proc_name>
c010a6d3:	83 c4 10             	add    $0x10,%esp
    return 0;
c010a6d6:	b8 00 00 00 00       	mov    $0x0,%eax
c010a6db:	eb 26                	jmp    c010a703 <do_execve+0x120>
        }
        current->mm = NULL;
    }
    int ret;
    if ((ret = load_icode(binary, size)) != 0) {
        goto execve_exit;
c010a6dd:	90                   	nop
    }
    set_proc_name(current, local_name);
    return 0;

execve_exit:
    do_exit(ret);
c010a6de:	83 ec 0c             	sub    $0xc,%esp
c010a6e1:	ff 75 f0             	pushl  -0x10(%ebp)
c010a6e4:	e8 56 f7 ff ff       	call   c0109e3f <do_exit>
c010a6e9:	83 c4 10             	add    $0x10,%esp
    panic("already exit: %e.\n", ret);
c010a6ec:	ff 75 f0             	pushl  -0x10(%ebp)
c010a6ef:	68 07 e1 10 c0       	push   $0xc010e107
c010a6f4:	68 c9 02 00 00       	push   $0x2c9
c010a6f9:	68 10 df 10 c0       	push   $0xc010df10
c010a6fe:	e8 f5 5c ff ff       	call   c01003f8 <__panic>
}
c010a703:	c9                   	leave  
c010a704:	c3                   	ret    

c010a705 <do_yield>:

// do_yield - ask the scheduler to reschedule
int
do_yield(void) {
c010a705:	55                   	push   %ebp
c010a706:	89 e5                	mov    %esp,%ebp
    current->need_resched = 1;
c010a708:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c010a70d:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    return 0;
c010a714:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a719:	5d                   	pop    %ebp
c010a71a:	c3                   	ret    

c010a71b <do_wait>:

// do_wait - wait one OR any children with PROC_ZOMBIE state, and free memory space of kernel stack
//         - proc struct of this child.
// NOTE: only after do_wait function, all resources of the child proces are free.
int
do_wait(int pid, int *code_store) {
c010a71b:	55                   	push   %ebp
c010a71c:	89 e5                	mov    %esp,%ebp
c010a71e:	83 ec 18             	sub    $0x18,%esp
    struct mm_struct *mm = current->mm;
c010a721:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c010a726:	8b 40 18             	mov    0x18(%eax),%eax
c010a729:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (code_store != NULL) {
c010a72c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010a730:	74 21                	je     c010a753 <do_wait+0x38>
        if (!user_mem_check(mm, (uintptr_t)code_store, sizeof(int), 1)) {
c010a732:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a735:	6a 01                	push   $0x1
c010a737:	6a 04                	push   $0x4
c010a739:	50                   	push   %eax
c010a73a:	ff 75 ec             	pushl  -0x14(%ebp)
c010a73d:	e8 8f a5 ff ff       	call   c0104cd1 <user_mem_check>
c010a742:	83 c4 10             	add    $0x10,%esp
c010a745:	85 c0                	test   %eax,%eax
c010a747:	75 0a                	jne    c010a753 <do_wait+0x38>
            return -E_INVAL;
c010a749:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010a74e:	e9 54 01 00 00       	jmp    c010a8a7 <do_wait+0x18c>
    }

    struct proc_struct *proc;
    bool intr_flag, haskid;
repeat:
    haskid = 0;
c010a753:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    if (pid != 0) {
c010a75a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a75e:	74 39                	je     c010a799 <do_wait+0x7e>
        proc = find_proc(pid);
c010a760:	83 ec 0c             	sub    $0xc,%esp
c010a763:	ff 75 08             	pushl  0x8(%ebp)
c010a766:	e8 e7 f1 ff ff       	call   c0109952 <find_proc>
c010a76b:	83 c4 10             	add    $0x10,%esp
c010a76e:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (proc != NULL && proc->parent == current) {
c010a771:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a775:	74 4f                	je     c010a7c6 <do_wait+0xab>
c010a777:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a77a:	8b 50 14             	mov    0x14(%eax),%edx
c010a77d:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c010a782:	39 c2                	cmp    %eax,%edx
c010a784:	75 40                	jne    c010a7c6 <do_wait+0xab>
            haskid = 1;
c010a786:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c010a78d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a790:	8b 00                	mov    (%eax),%eax
c010a792:	83 f8 03             	cmp    $0x3,%eax
c010a795:	75 2f                	jne    c010a7c6 <do_wait+0xab>
                goto found;
c010a797:	eb 7f                	jmp    c010a818 <do_wait+0xfd>
            }
        }
    }
    else {
        proc = current->cptr;
c010a799:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c010a79e:	8b 40 70             	mov    0x70(%eax),%eax
c010a7a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
        for (; proc != NULL; proc = proc->optr) {
c010a7a4:	eb 1a                	jmp    c010a7c0 <do_wait+0xa5>
            haskid = 1;
c010a7a6:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c010a7ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a7b0:	8b 00                	mov    (%eax),%eax
c010a7b2:	83 f8 03             	cmp    $0x3,%eax
c010a7b5:	74 60                	je     c010a817 <do_wait+0xfc>
            }
        }
    }
    else {
        proc = current->cptr;
        for (; proc != NULL; proc = proc->optr) {
c010a7b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a7ba:	8b 40 78             	mov    0x78(%eax),%eax
c010a7bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a7c0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a7c4:	75 e0                	jne    c010a7a6 <do_wait+0x8b>
            if (proc->state == PROC_ZOMBIE) {
                goto found;
            }
        }
    }
    if (haskid) {
c010a7c6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010a7ca:	74 41                	je     c010a80d <do_wait+0xf2>
        current->state = PROC_SLEEPING;
c010a7cc:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c010a7d1:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        current->wait_state = WT_CHILD;
c010a7d7:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c010a7dc:	c7 40 6c 01 00 00 80 	movl   $0x80000001,0x6c(%eax)
        schedule();
c010a7e3:	e8 73 05 00 00       	call   c010ad5b <schedule>
        if (current->flags & PF_EXITING) {
c010a7e8:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c010a7ed:	8b 40 44             	mov    0x44(%eax),%eax
c010a7f0:	83 e0 01             	and    $0x1,%eax
c010a7f3:	85 c0                	test   %eax,%eax
c010a7f5:	0f 84 58 ff ff ff    	je     c010a753 <do_wait+0x38>
            do_exit(-E_KILLED);
c010a7fb:	83 ec 0c             	sub    $0xc,%esp
c010a7fe:	6a f7                	push   $0xfffffff7
c010a800:	e8 3a f6 ff ff       	call   c0109e3f <do_exit>
c010a805:	83 c4 10             	add    $0x10,%esp
        }
        goto repeat;
c010a808:	e9 46 ff ff ff       	jmp    c010a753 <do_wait+0x38>
    }
    return -E_BAD_PROC;
c010a80d:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
c010a812:	e9 90 00 00 00       	jmp    c010a8a7 <do_wait+0x18c>
    else {
        proc = current->cptr;
        for (; proc != NULL; proc = proc->optr) {
            haskid = 1;
            if (proc->state == PROC_ZOMBIE) {
                goto found;
c010a817:	90                   	nop
        goto repeat;
    }
    return -E_BAD_PROC;

found:
    if (proc == idleproc || proc == initproc) {
c010a818:	a1 20 00 1a c0       	mov    0xc01a0020,%eax
c010a81d:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010a820:	74 0a                	je     c010a82c <do_wait+0x111>
c010a822:	a1 24 00 1a c0       	mov    0xc01a0024,%eax
c010a827:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010a82a:	75 17                	jne    c010a843 <do_wait+0x128>
        panic("wait idleproc or initproc.\n");
c010a82c:	83 ec 04             	sub    $0x4,%esp
c010a82f:	68 1a e1 10 c0       	push   $0xc010e11a
c010a834:	68 02 03 00 00       	push   $0x302
c010a839:	68 10 df 10 c0       	push   $0xc010df10
c010a83e:	e8 b5 5b ff ff       	call   c01003f8 <__panic>
    }
    if (code_store != NULL) {
c010a843:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010a847:	74 0b                	je     c010a854 <do_wait+0x139>
        *code_store = proc->exit_code;
c010a849:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a84c:	8b 50 68             	mov    0x68(%eax),%edx
c010a84f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a852:	89 10                	mov    %edx,(%eax)
    }
    local_intr_save(intr_flag);
c010a854:	e8 41 ea ff ff       	call   c010929a <__intr_save>
c010a859:	89 45 e8             	mov    %eax,-0x18(%ebp)
    {
        unhash_proc(proc);
c010a85c:	83 ec 0c             	sub    $0xc,%esp
c010a85f:	ff 75 f4             	pushl  -0xc(%ebp)
c010a862:	e8 b7 f0 ff ff       	call   c010991e <unhash_proc>
c010a867:	83 c4 10             	add    $0x10,%esp
        remove_links(proc);
c010a86a:	83 ec 0c             	sub    $0xc,%esp
c010a86d:	ff 75 f4             	pushl  -0xc(%ebp)
c010a870:	e8 18 ee ff ff       	call   c010968d <remove_links>
c010a875:	83 c4 10             	add    $0x10,%esp
    }
    local_intr_restore(intr_flag);
c010a878:	83 ec 0c             	sub    $0xc,%esp
c010a87b:	ff 75 e8             	pushl  -0x18(%ebp)
c010a87e:	e8 41 ea ff ff       	call   c01092c4 <__intr_restore>
c010a883:	83 c4 10             	add    $0x10,%esp
    put_kstack(proc);
c010a886:	83 ec 0c             	sub    $0xc,%esp
c010a889:	ff 75 f4             	pushl  -0xc(%ebp)
c010a88c:	e8 d6 f1 ff ff       	call   c0109a67 <put_kstack>
c010a891:	83 c4 10             	add    $0x10,%esp
    kfree(proc);
c010a894:	83 ec 0c             	sub    $0xc,%esp
c010a897:	ff 75 f4             	pushl  -0xc(%ebp)
c010a89a:	e8 27 b0 ff ff       	call   c01058c6 <kfree>
c010a89f:	83 c4 10             	add    $0x10,%esp
    return 0;
c010a8a2:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a8a7:	c9                   	leave  
c010a8a8:	c3                   	ret    

c010a8a9 <do_kill>:

// do_kill - kill process with pid by set this process's flags with PF_EXITING
int
do_kill(int pid) {
c010a8a9:	55                   	push   %ebp
c010a8aa:	89 e5                	mov    %esp,%ebp
c010a8ac:	83 ec 18             	sub    $0x18,%esp
    struct proc_struct *proc;
    if ((proc = find_proc(pid)) != NULL) {
c010a8af:	83 ec 0c             	sub    $0xc,%esp
c010a8b2:	ff 75 08             	pushl  0x8(%ebp)
c010a8b5:	e8 98 f0 ff ff       	call   c0109952 <find_proc>
c010a8ba:	83 c4 10             	add    $0x10,%esp
c010a8bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a8c0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a8c4:	74 44                	je     c010a90a <do_kill+0x61>
        if (!(proc->flags & PF_EXITING)) {
c010a8c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a8c9:	8b 40 44             	mov    0x44(%eax),%eax
c010a8cc:	83 e0 01             	and    $0x1,%eax
c010a8cf:	85 c0                	test   %eax,%eax
c010a8d1:	75 30                	jne    c010a903 <do_kill+0x5a>
            proc->flags |= PF_EXITING;
c010a8d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a8d6:	8b 40 44             	mov    0x44(%eax),%eax
c010a8d9:	83 c8 01             	or     $0x1,%eax
c010a8dc:	89 c2                	mov    %eax,%edx
c010a8de:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a8e1:	89 50 44             	mov    %edx,0x44(%eax)
            if (proc->wait_state & WT_INTERRUPTED) {
c010a8e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a8e7:	8b 40 6c             	mov    0x6c(%eax),%eax
c010a8ea:	85 c0                	test   %eax,%eax
c010a8ec:	79 0e                	jns    c010a8fc <do_kill+0x53>
                wakeup_proc(proc);
c010a8ee:	83 ec 0c             	sub    $0xc,%esp
c010a8f1:	ff 75 f4             	pushl  -0xc(%ebp)
c010a8f4:	e8 ed 03 00 00       	call   c010ace6 <wakeup_proc>
c010a8f9:	83 c4 10             	add    $0x10,%esp
            }
            return 0;
c010a8fc:	b8 00 00 00 00       	mov    $0x0,%eax
c010a901:	eb 0c                	jmp    c010a90f <do_kill+0x66>
        }
        return -E_KILLED;
c010a903:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
c010a908:	eb 05                	jmp    c010a90f <do_kill+0x66>
    }
    return -E_INVAL;
c010a90a:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c010a90f:	c9                   	leave  
c010a910:	c3                   	ret    

c010a911 <kernel_execve>:

// kernel_execve - do SYS_exec syscall to exec a user program called by user_main kernel_thread
static int
kernel_execve(const char *name, unsigned char *binary, size_t size) {
c010a911:	55                   	push   %ebp
c010a912:	89 e5                	mov    %esp,%ebp
c010a914:	57                   	push   %edi
c010a915:	56                   	push   %esi
c010a916:	53                   	push   %ebx
c010a917:	83 ec 1c             	sub    $0x1c,%esp
    int ret, len = strlen(name);
c010a91a:	83 ec 0c             	sub    $0xc,%esp
c010a91d:	ff 75 08             	pushl  0x8(%ebp)
c010a920:	e8 ea 06 00 00       	call   c010b00f <strlen>
c010a925:	83 c4 10             	add    $0x10,%esp
c010a928:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    asm volatile (
c010a92b:	b8 04 00 00 00       	mov    $0x4,%eax
c010a930:	8b 55 08             	mov    0x8(%ebp),%edx
c010a933:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c010a936:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c010a939:	8b 75 10             	mov    0x10(%ebp),%esi
c010a93c:	89 f7                	mov    %esi,%edi
c010a93e:	cd 80                	int    $0x80
c010a940:	89 45 e0             	mov    %eax,-0x20(%ebp)
        "int %1;"
        : "=a" (ret)
        : "i" (T_SYSCALL), "0" (SYS_exec), "d" (name), "c" (len), "b" (binary), "D" (size)
        : "memory");
    return ret;
c010a943:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
c010a946:	8d 65 f4             	lea    -0xc(%ebp),%esp
c010a949:	5b                   	pop    %ebx
c010a94a:	5e                   	pop    %esi
c010a94b:	5f                   	pop    %edi
c010a94c:	5d                   	pop    %ebp
c010a94d:	c3                   	ret    

c010a94e <user_main>:

#define KERNEL_EXECVE2(x, xstart, xsize)        __KERNEL_EXECVE2(x, xstart, xsize)

// user_main - kernel thread used to exec a user program
static int
user_main(void *arg) {
c010a94e:	55                   	push   %ebp
c010a94f:	89 e5                	mov    %esp,%ebp
c010a951:	83 ec 08             	sub    $0x8,%esp
#ifdef TEST
    KERNEL_EXECVE2(TEST, TESTSTART, TESTSIZE);
c010a954:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c010a959:	8b 40 04             	mov    0x4(%eax),%eax
c010a95c:	83 ec 04             	sub    $0x4,%esp
c010a95f:	68 36 e1 10 c0       	push   $0xc010e136
c010a964:	50                   	push   %eax
c010a965:	68 40 e1 10 c0       	push   $0xc010e140
c010a96a:	e8 23 59 ff ff       	call   c0100292 <cprintf>
c010a96f:	83 c4 10             	add    $0x10,%esp
c010a972:	b8 8c 78 00 00       	mov    $0x788c,%eax
c010a977:	83 ec 04             	sub    $0x4,%esp
c010a97a:	50                   	push   %eax
c010a97b:	68 9c 24 14 c0       	push   $0xc014249c
c010a980:	68 36 e1 10 c0       	push   $0xc010e136
c010a985:	e8 87 ff ff ff       	call   c010a911 <kernel_execve>
c010a98a:	83 c4 10             	add    $0x10,%esp
#else
    KERNEL_EXECVE(exit);
#endif
    panic("user_main execve failed.\n");
c010a98d:	83 ec 04             	sub    $0x4,%esp
c010a990:	68 67 e1 10 c0       	push   $0xc010e167
c010a995:	68 4b 03 00 00       	push   $0x34b
c010a99a:	68 10 df 10 c0       	push   $0xc010df10
c010a99f:	e8 54 5a ff ff       	call   c01003f8 <__panic>

c010a9a4 <init_main>:
}

// init_main - the second kernel thread used to create user_main kernel threads
static int
init_main(void *arg) {
c010a9a4:	55                   	push   %ebp
c010a9a5:	89 e5                	mov    %esp,%ebp
c010a9a7:	83 ec 28             	sub    $0x28,%esp
    size_t nr_free_pages_store = nr_free_pages();
c010a9aa:	e8 cd ce ff ff       	call   c010787c <nr_free_pages>
c010a9af:	89 45 f4             	mov    %eax,-0xc(%ebp)
    size_t kernel_allocated_store = kallocated();
c010a9b2:	e8 da ad ff ff       	call   c0105791 <kallocated>
c010a9b7:	89 45 f0             	mov    %eax,-0x10(%ebp)

    int pid = kernel_thread(user_main, NULL, 0);
c010a9ba:	83 ec 04             	sub    $0x4,%esp
c010a9bd:	6a 00                	push   $0x0
c010a9bf:	6a 00                	push   $0x0
c010a9c1:	68 4e a9 10 c0       	push   $0xc010a94e
c010a9c6:	e8 f7 ef ff ff       	call   c01099c2 <kernel_thread>
c010a9cb:	83 c4 10             	add    $0x10,%esp
c010a9ce:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (pid <= 0) {
c010a9d1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010a9d5:	7f 1c                	jg     c010a9f3 <init_main+0x4f>
        panic("create user_main failed.\n");
c010a9d7:	83 ec 04             	sub    $0x4,%esp
c010a9da:	68 81 e1 10 c0       	push   $0xc010e181
c010a9df:	68 56 03 00 00       	push   $0x356
c010a9e4:	68 10 df 10 c0       	push   $0xc010df10
c010a9e9:	e8 0a 5a ff ff       	call   c01003f8 <__panic>
    }

    while (do_wait(0, NULL) == 0) {
        schedule();
c010a9ee:	e8 68 03 00 00       	call   c010ad5b <schedule>
    int pid = kernel_thread(user_main, NULL, 0);
    if (pid <= 0) {
        panic("create user_main failed.\n");
    }

    while (do_wait(0, NULL) == 0) {
c010a9f3:	83 ec 08             	sub    $0x8,%esp
c010a9f6:	6a 00                	push   $0x0
c010a9f8:	6a 00                	push   $0x0
c010a9fa:	e8 1c fd ff ff       	call   c010a71b <do_wait>
c010a9ff:	83 c4 10             	add    $0x10,%esp
c010aa02:	85 c0                	test   %eax,%eax
c010aa04:	74 e8                	je     c010a9ee <init_main+0x4a>
        schedule();
    }

    cprintf("all user-mode processes have quit.\n");
c010aa06:	83 ec 0c             	sub    $0xc,%esp
c010aa09:	68 9c e1 10 c0       	push   $0xc010e19c
c010aa0e:	e8 7f 58 ff ff       	call   c0100292 <cprintf>
c010aa13:	83 c4 10             	add    $0x10,%esp
    assert(initproc->cptr == NULL && initproc->yptr == NULL && initproc->optr == NULL);
c010aa16:	a1 24 00 1a c0       	mov    0xc01a0024,%eax
c010aa1b:	8b 40 70             	mov    0x70(%eax),%eax
c010aa1e:	85 c0                	test   %eax,%eax
c010aa20:	75 18                	jne    c010aa3a <init_main+0x96>
c010aa22:	a1 24 00 1a c0       	mov    0xc01a0024,%eax
c010aa27:	8b 40 74             	mov    0x74(%eax),%eax
c010aa2a:	85 c0                	test   %eax,%eax
c010aa2c:	75 0c                	jne    c010aa3a <init_main+0x96>
c010aa2e:	a1 24 00 1a c0       	mov    0xc01a0024,%eax
c010aa33:	8b 40 78             	mov    0x78(%eax),%eax
c010aa36:	85 c0                	test   %eax,%eax
c010aa38:	74 19                	je     c010aa53 <init_main+0xaf>
c010aa3a:	68 c0 e1 10 c0       	push   $0xc010e1c0
c010aa3f:	68 3d df 10 c0       	push   $0xc010df3d
c010aa44:	68 5e 03 00 00       	push   $0x35e
c010aa49:	68 10 df 10 c0       	push   $0xc010df10
c010aa4e:	e8 a5 59 ff ff       	call   c01003f8 <__panic>
    assert(nr_process == 2);
c010aa53:	a1 40 20 1a c0       	mov    0xc01a2040,%eax
c010aa58:	83 f8 02             	cmp    $0x2,%eax
c010aa5b:	74 19                	je     c010aa76 <init_main+0xd2>
c010aa5d:	68 0b e2 10 c0       	push   $0xc010e20b
c010aa62:	68 3d df 10 c0       	push   $0xc010df3d
c010aa67:	68 5f 03 00 00       	push   $0x35f
c010aa6c:	68 10 df 10 c0       	push   $0xc010df10
c010aa71:	e8 82 59 ff ff       	call   c01003f8 <__panic>
c010aa76:	c7 45 e4 9c 21 1a c0 	movl   $0xc01a219c,-0x1c(%ebp)
c010aa7d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010aa80:	8b 40 04             	mov    0x4(%eax),%eax
    assert(list_next(&proc_list) == &(initproc->list_link));
c010aa83:	8b 15 24 00 1a c0    	mov    0xc01a0024,%edx
c010aa89:	83 c2 58             	add    $0x58,%edx
c010aa8c:	39 d0                	cmp    %edx,%eax
c010aa8e:	74 19                	je     c010aaa9 <init_main+0x105>
c010aa90:	68 1c e2 10 c0       	push   $0xc010e21c
c010aa95:	68 3d df 10 c0       	push   $0xc010df3d
c010aa9a:	68 60 03 00 00       	push   $0x360
c010aa9f:	68 10 df 10 c0       	push   $0xc010df10
c010aaa4:	e8 4f 59 ff ff       	call   c01003f8 <__panic>
c010aaa9:	c7 45 e8 9c 21 1a c0 	movl   $0xc01a219c,-0x18(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c010aab0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010aab3:	8b 00                	mov    (%eax),%eax
    assert(list_prev(&proc_list) == &(initproc->list_link));
c010aab5:	8b 15 24 00 1a c0    	mov    0xc01a0024,%edx
c010aabb:	83 c2 58             	add    $0x58,%edx
c010aabe:	39 d0                	cmp    %edx,%eax
c010aac0:	74 19                	je     c010aadb <init_main+0x137>
c010aac2:	68 4c e2 10 c0       	push   $0xc010e24c
c010aac7:	68 3d df 10 c0       	push   $0xc010df3d
c010aacc:	68 61 03 00 00       	push   $0x361
c010aad1:	68 10 df 10 c0       	push   $0xc010df10
c010aad6:	e8 1d 59 ff ff       	call   c01003f8 <__panic>

    cprintf("init check memory pass.\n");
c010aadb:	83 ec 0c             	sub    $0xc,%esp
c010aade:	68 7c e2 10 c0       	push   $0xc010e27c
c010aae3:	e8 aa 57 ff ff       	call   c0100292 <cprintf>
c010aae8:	83 c4 10             	add    $0x10,%esp
    return 0;
c010aaeb:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010aaf0:	c9                   	leave  
c010aaf1:	c3                   	ret    

c010aaf2 <proc_init>:

// proc_init - set up the first kernel thread idleproc "idle" by itself and 
//           - create the second kernel thread init_main
void
proc_init(void) {
c010aaf2:	55                   	push   %ebp
c010aaf3:	89 e5                	mov    %esp,%ebp
c010aaf5:	83 ec 18             	sub    $0x18,%esp
c010aaf8:	c7 45 e8 9c 21 1a c0 	movl   $0xc01a219c,-0x18(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010aaff:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ab02:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010ab05:	89 50 04             	mov    %edx,0x4(%eax)
c010ab08:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ab0b:	8b 50 04             	mov    0x4(%eax),%edx
c010ab0e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ab11:	89 10                	mov    %edx,(%eax)
    int i;

    list_init(&proc_list);
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c010ab13:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010ab1a:	eb 26                	jmp    c010ab42 <proc_init+0x50>
        list_init(hash_list + i);
c010ab1c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ab1f:	c1 e0 03             	shl    $0x3,%eax
c010ab22:	05 40 00 1a c0       	add    $0xc01a0040,%eax
c010ab27:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010ab2a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ab2d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010ab30:	89 50 04             	mov    %edx,0x4(%eax)
c010ab33:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ab36:	8b 50 04             	mov    0x4(%eax),%edx
c010ab39:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ab3c:	89 10                	mov    %edx,(%eax)
void
proc_init(void) {
    int i;

    list_init(&proc_list);
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c010ab3e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010ab42:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
c010ab49:	7e d1                	jle    c010ab1c <proc_init+0x2a>
        list_init(hash_list + i);
    }

    if ((idleproc = alloc_proc()) == NULL) {
c010ab4b:	e8 4f e9 ff ff       	call   c010949f <alloc_proc>
c010ab50:	a3 20 00 1a c0       	mov    %eax,0xc01a0020
c010ab55:	a1 20 00 1a c0       	mov    0xc01a0020,%eax
c010ab5a:	85 c0                	test   %eax,%eax
c010ab5c:	75 17                	jne    c010ab75 <proc_init+0x83>
        panic("cannot alloc idleproc.\n");
c010ab5e:	83 ec 04             	sub    $0x4,%esp
c010ab61:	68 95 e2 10 c0       	push   $0xc010e295
c010ab66:	68 73 03 00 00       	push   $0x373
c010ab6b:	68 10 df 10 c0       	push   $0xc010df10
c010ab70:	e8 83 58 ff ff       	call   c01003f8 <__panic>
    }

    idleproc->pid = 0;
c010ab75:	a1 20 00 1a c0       	mov    0xc01a0020,%eax
c010ab7a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    idleproc->state = PROC_RUNNABLE;
c010ab81:	a1 20 00 1a c0       	mov    0xc01a0020,%eax
c010ab86:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    idleproc->kstack = (uintptr_t)bootstack;
c010ab8c:	a1 20 00 1a c0       	mov    0xc01a0020,%eax
c010ab91:	ba 00 90 12 c0       	mov    $0xc0129000,%edx
c010ab96:	89 50 0c             	mov    %edx,0xc(%eax)
    idleproc->need_resched = 1;
c010ab99:	a1 20 00 1a c0       	mov    0xc01a0020,%eax
c010ab9e:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    set_proc_name(idleproc, "idle");
c010aba5:	a1 20 00 1a c0       	mov    0xc01a0020,%eax
c010abaa:	83 ec 08             	sub    $0x8,%esp
c010abad:	68 ad e2 10 c0       	push   $0xc010e2ad
c010abb2:	50                   	push   %eax
c010abb3:	e8 c5 e9 ff ff       	call   c010957d <set_proc_name>
c010abb8:	83 c4 10             	add    $0x10,%esp
    nr_process ++;
c010abbb:	a1 40 20 1a c0       	mov    0xc01a2040,%eax
c010abc0:	83 c0 01             	add    $0x1,%eax
c010abc3:	a3 40 20 1a c0       	mov    %eax,0xc01a2040

    current = idleproc;
c010abc8:	a1 20 00 1a c0       	mov    0xc01a0020,%eax
c010abcd:	a3 28 00 1a c0       	mov    %eax,0xc01a0028

    int pid = kernel_thread(init_main, NULL, 0);
c010abd2:	83 ec 04             	sub    $0x4,%esp
c010abd5:	6a 00                	push   $0x0
c010abd7:	6a 00                	push   $0x0
c010abd9:	68 a4 a9 10 c0       	push   $0xc010a9a4
c010abde:	e8 df ed ff ff       	call   c01099c2 <kernel_thread>
c010abe3:	83 c4 10             	add    $0x10,%esp
c010abe6:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (pid <= 0) {
c010abe9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010abed:	7f 17                	jg     c010ac06 <proc_init+0x114>
        panic("create init_main failed.\n");
c010abef:	83 ec 04             	sub    $0x4,%esp
c010abf2:	68 b2 e2 10 c0       	push   $0xc010e2b2
c010abf7:	68 81 03 00 00       	push   $0x381
c010abfc:	68 10 df 10 c0       	push   $0xc010df10
c010ac01:	e8 f2 57 ff ff       	call   c01003f8 <__panic>
    }

    initproc = find_proc(pid);
c010ac06:	83 ec 0c             	sub    $0xc,%esp
c010ac09:	ff 75 ec             	pushl  -0x14(%ebp)
c010ac0c:	e8 41 ed ff ff       	call   c0109952 <find_proc>
c010ac11:	83 c4 10             	add    $0x10,%esp
c010ac14:	a3 24 00 1a c0       	mov    %eax,0xc01a0024
    set_proc_name(initproc, "init");
c010ac19:	a1 24 00 1a c0       	mov    0xc01a0024,%eax
c010ac1e:	83 ec 08             	sub    $0x8,%esp
c010ac21:	68 cc e2 10 c0       	push   $0xc010e2cc
c010ac26:	50                   	push   %eax
c010ac27:	e8 51 e9 ff ff       	call   c010957d <set_proc_name>
c010ac2c:	83 c4 10             	add    $0x10,%esp

    assert(idleproc != NULL && idleproc->pid == 0);
c010ac2f:	a1 20 00 1a c0       	mov    0xc01a0020,%eax
c010ac34:	85 c0                	test   %eax,%eax
c010ac36:	74 0c                	je     c010ac44 <proc_init+0x152>
c010ac38:	a1 20 00 1a c0       	mov    0xc01a0020,%eax
c010ac3d:	8b 40 04             	mov    0x4(%eax),%eax
c010ac40:	85 c0                	test   %eax,%eax
c010ac42:	74 19                	je     c010ac5d <proc_init+0x16b>
c010ac44:	68 d4 e2 10 c0       	push   $0xc010e2d4
c010ac49:	68 3d df 10 c0       	push   $0xc010df3d
c010ac4e:	68 87 03 00 00       	push   $0x387
c010ac53:	68 10 df 10 c0       	push   $0xc010df10
c010ac58:	e8 9b 57 ff ff       	call   c01003f8 <__panic>
    assert(initproc != NULL && initproc->pid == 1);
c010ac5d:	a1 24 00 1a c0       	mov    0xc01a0024,%eax
c010ac62:	85 c0                	test   %eax,%eax
c010ac64:	74 0d                	je     c010ac73 <proc_init+0x181>
c010ac66:	a1 24 00 1a c0       	mov    0xc01a0024,%eax
c010ac6b:	8b 40 04             	mov    0x4(%eax),%eax
c010ac6e:	83 f8 01             	cmp    $0x1,%eax
c010ac71:	74 19                	je     c010ac8c <proc_init+0x19a>
c010ac73:	68 fc e2 10 c0       	push   $0xc010e2fc
c010ac78:	68 3d df 10 c0       	push   $0xc010df3d
c010ac7d:	68 88 03 00 00       	push   $0x388
c010ac82:	68 10 df 10 c0       	push   $0xc010df10
c010ac87:	e8 6c 57 ff ff       	call   c01003f8 <__panic>
}
c010ac8c:	90                   	nop
c010ac8d:	c9                   	leave  
c010ac8e:	c3                   	ret    

c010ac8f <cpu_idle>:

// cpu_idle - at the end of kern_init, the first kernel thread idleproc will do below works
void
cpu_idle(void) {
c010ac8f:	55                   	push   %ebp
c010ac90:	89 e5                	mov    %esp,%ebp
c010ac92:	83 ec 08             	sub    $0x8,%esp
    while (1) {
        if (current->need_resched) {
c010ac95:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c010ac9a:	8b 40 10             	mov    0x10(%eax),%eax
c010ac9d:	85 c0                	test   %eax,%eax
c010ac9f:	74 f4                	je     c010ac95 <cpu_idle+0x6>
            schedule();
c010aca1:	e8 b5 00 00 00       	call   c010ad5b <schedule>
        }
    }
c010aca6:	eb ed                	jmp    c010ac95 <cpu_idle+0x6>

c010aca8 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c010aca8:	55                   	push   %ebp
c010aca9:	89 e5                	mov    %esp,%ebp
c010acab:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010acae:	9c                   	pushf  
c010acaf:	58                   	pop    %eax
c010acb0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010acb3:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010acb6:	25 00 02 00 00       	and    $0x200,%eax
c010acbb:	85 c0                	test   %eax,%eax
c010acbd:	74 0c                	je     c010accb <__intr_save+0x23>
        intr_disable();
c010acbf:	e8 f3 74 ff ff       	call   c01021b7 <intr_disable>
        return 1;
c010acc4:	b8 01 00 00 00       	mov    $0x1,%eax
c010acc9:	eb 05                	jmp    c010acd0 <__intr_save+0x28>
    }
    return 0;
c010accb:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010acd0:	c9                   	leave  
c010acd1:	c3                   	ret    

c010acd2 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010acd2:	55                   	push   %ebp
c010acd3:	89 e5                	mov    %esp,%ebp
c010acd5:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010acd8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010acdc:	74 05                	je     c010ace3 <__intr_restore+0x11>
        intr_enable();
c010acde:	e8 cd 74 ff ff       	call   c01021b0 <intr_enable>
    }
}
c010ace3:	90                   	nop
c010ace4:	c9                   	leave  
c010ace5:	c3                   	ret    

c010ace6 <wakeup_proc>:
#include <proc.h>
#include <sched.h>
#include <assert.h>

void
wakeup_proc(struct proc_struct *proc) {
c010ace6:	55                   	push   %ebp
c010ace7:	89 e5                	mov    %esp,%ebp
c010ace9:	83 ec 18             	sub    $0x18,%esp
    assert(proc->state != PROC_ZOMBIE);
c010acec:	8b 45 08             	mov    0x8(%ebp),%eax
c010acef:	8b 00                	mov    (%eax),%eax
c010acf1:	83 f8 03             	cmp    $0x3,%eax
c010acf4:	75 16                	jne    c010ad0c <wakeup_proc+0x26>
c010acf6:	68 23 e3 10 c0       	push   $0xc010e323
c010acfb:	68 3e e3 10 c0       	push   $0xc010e33e
c010ad00:	6a 09                	push   $0x9
c010ad02:	68 53 e3 10 c0       	push   $0xc010e353
c010ad07:	e8 ec 56 ff ff       	call   c01003f8 <__panic>
    bool intr_flag;
    local_intr_save(intr_flag);
c010ad0c:	e8 97 ff ff ff       	call   c010aca8 <__intr_save>
c010ad11:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        if (proc->state != PROC_RUNNABLE) {
c010ad14:	8b 45 08             	mov    0x8(%ebp),%eax
c010ad17:	8b 00                	mov    (%eax),%eax
c010ad19:	83 f8 02             	cmp    $0x2,%eax
c010ad1c:	74 15                	je     c010ad33 <wakeup_proc+0x4d>
            proc->state = PROC_RUNNABLE;
c010ad1e:	8b 45 08             	mov    0x8(%ebp),%eax
c010ad21:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
            proc->wait_state = 0;
c010ad27:	8b 45 08             	mov    0x8(%ebp),%eax
c010ad2a:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
c010ad31:	eb 17                	jmp    c010ad4a <wakeup_proc+0x64>
        }
        else {
            warn("wakeup runnable process.\n");
c010ad33:	83 ec 04             	sub    $0x4,%esp
c010ad36:	68 69 e3 10 c0       	push   $0xc010e369
c010ad3b:	6a 12                	push   $0x12
c010ad3d:	68 53 e3 10 c0       	push   $0xc010e353
c010ad42:	e8 34 57 ff ff       	call   c010047b <__warn>
c010ad47:	83 c4 10             	add    $0x10,%esp
        }
    }
    local_intr_restore(intr_flag);
c010ad4a:	83 ec 0c             	sub    $0xc,%esp
c010ad4d:	ff 75 f4             	pushl  -0xc(%ebp)
c010ad50:	e8 7d ff ff ff       	call   c010acd2 <__intr_restore>
c010ad55:	83 c4 10             	add    $0x10,%esp
}
c010ad58:	90                   	nop
c010ad59:	c9                   	leave  
c010ad5a:	c3                   	ret    

c010ad5b <schedule>:

void
schedule(void) {
c010ad5b:	55                   	push   %ebp
c010ad5c:	89 e5                	mov    %esp,%ebp
c010ad5e:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    list_entry_t *le, *last;
    struct proc_struct *next = NULL;
c010ad61:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    local_intr_save(intr_flag);
c010ad68:	e8 3b ff ff ff       	call   c010aca8 <__intr_save>
c010ad6d:	89 45 ec             	mov    %eax,-0x14(%ebp)
    {
        current->need_resched = 0;
c010ad70:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c010ad75:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
        last = (current == idleproc) ? &proc_list : &(current->list_link);
c010ad7c:	8b 15 28 00 1a c0    	mov    0xc01a0028,%edx
c010ad82:	a1 20 00 1a c0       	mov    0xc01a0020,%eax
c010ad87:	39 c2                	cmp    %eax,%edx
c010ad89:	74 0a                	je     c010ad95 <schedule+0x3a>
c010ad8b:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c010ad90:	83 c0 58             	add    $0x58,%eax
c010ad93:	eb 05                	jmp    c010ad9a <schedule+0x3f>
c010ad95:	b8 9c 21 1a c0       	mov    $0xc01a219c,%eax
c010ad9a:	89 45 e8             	mov    %eax,-0x18(%ebp)
        le = last;
c010ad9d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ada0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ada3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ada6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010ada9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010adac:	8b 40 04             	mov    0x4(%eax),%eax
        do {
            if ((le = list_next(le)) != &proc_list) {
c010adaf:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010adb2:	81 7d f4 9c 21 1a c0 	cmpl   $0xc01a219c,-0xc(%ebp)
c010adb9:	74 13                	je     c010adce <schedule+0x73>
                next = le2proc(le, list_link);
c010adbb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010adbe:	83 e8 58             	sub    $0x58,%eax
c010adc1:	89 45 f0             	mov    %eax,-0x10(%ebp)
                if (next->state == PROC_RUNNABLE) {
c010adc4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010adc7:	8b 00                	mov    (%eax),%eax
c010adc9:	83 f8 02             	cmp    $0x2,%eax
c010adcc:	74 0a                	je     c010add8 <schedule+0x7d>
                    break;
                }
            }
        } while (le != last);
c010adce:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010add1:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c010add4:	75 cd                	jne    c010ada3 <schedule+0x48>
c010add6:	eb 01                	jmp    c010add9 <schedule+0x7e>
        le = last;
        do {
            if ((le = list_next(le)) != &proc_list) {
                next = le2proc(le, list_link);
                if (next->state == PROC_RUNNABLE) {
                    break;
c010add8:	90                   	nop
                }
            }
        } while (le != last);
        if (next == NULL || next->state != PROC_RUNNABLE) {
c010add9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010addd:	74 0a                	je     c010ade9 <schedule+0x8e>
c010addf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ade2:	8b 00                	mov    (%eax),%eax
c010ade4:	83 f8 02             	cmp    $0x2,%eax
c010ade7:	74 08                	je     c010adf1 <schedule+0x96>
            next = idleproc;
c010ade9:	a1 20 00 1a c0       	mov    0xc01a0020,%eax
c010adee:	89 45 f0             	mov    %eax,-0x10(%ebp)
        }
        next->runs ++;
c010adf1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010adf4:	8b 40 08             	mov    0x8(%eax),%eax
c010adf7:	8d 50 01             	lea    0x1(%eax),%edx
c010adfa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010adfd:	89 50 08             	mov    %edx,0x8(%eax)
        if (next != current) {
c010ae00:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c010ae05:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010ae08:	74 0e                	je     c010ae18 <schedule+0xbd>
            proc_run(next);
c010ae0a:	83 ec 0c             	sub    $0xc,%esp
c010ae0d:	ff 75 f0             	pushl  -0x10(%ebp)
c010ae10:	e8 f4 e9 ff ff       	call   c0109809 <proc_run>
c010ae15:	83 c4 10             	add    $0x10,%esp
        }
    }
    local_intr_restore(intr_flag);
c010ae18:	83 ec 0c             	sub    $0xc,%esp
c010ae1b:	ff 75 ec             	pushl  -0x14(%ebp)
c010ae1e:	e8 af fe ff ff       	call   c010acd2 <__intr_restore>
c010ae23:	83 c4 10             	add    $0x10,%esp
}
c010ae26:	90                   	nop
c010ae27:	c9                   	leave  
c010ae28:	c3                   	ret    

c010ae29 <sys_exit>:
#include <stdio.h>
#include <pmm.h>
#include <assert.h>

static int
sys_exit(uint32_t arg[]) {
c010ae29:	55                   	push   %ebp
c010ae2a:	89 e5                	mov    %esp,%ebp
c010ae2c:	83 ec 18             	sub    $0x18,%esp
    int error_code = (int)arg[0];
c010ae2f:	8b 45 08             	mov    0x8(%ebp),%eax
c010ae32:	8b 00                	mov    (%eax),%eax
c010ae34:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_exit(error_code);
c010ae37:	83 ec 0c             	sub    $0xc,%esp
c010ae3a:	ff 75 f4             	pushl  -0xc(%ebp)
c010ae3d:	e8 fd ef ff ff       	call   c0109e3f <do_exit>
c010ae42:	83 c4 10             	add    $0x10,%esp
}
c010ae45:	c9                   	leave  
c010ae46:	c3                   	ret    

c010ae47 <sys_fork>:

static int
sys_fork(uint32_t arg[]) {
c010ae47:	55                   	push   %ebp
c010ae48:	89 e5                	mov    %esp,%ebp
c010ae4a:	83 ec 18             	sub    $0x18,%esp
    struct trapframe *tf = current->tf;
c010ae4d:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c010ae52:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ae55:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uintptr_t stack = tf->tf_esp;
c010ae58:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ae5b:	8b 40 44             	mov    0x44(%eax),%eax
c010ae5e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_fork(0, stack, tf);
c010ae61:	83 ec 04             	sub    $0x4,%esp
c010ae64:	ff 75 f4             	pushl  -0xc(%ebp)
c010ae67:	ff 75 f0             	pushl  -0x10(%ebp)
c010ae6a:	6a 00                	push   $0x0
c010ae6c:	e8 a3 ee ff ff       	call   c0109d14 <do_fork>
c010ae71:	83 c4 10             	add    $0x10,%esp
}
c010ae74:	c9                   	leave  
c010ae75:	c3                   	ret    

c010ae76 <sys_wait>:

static int
sys_wait(uint32_t arg[]) {
c010ae76:	55                   	push   %ebp
c010ae77:	89 e5                	mov    %esp,%ebp
c010ae79:	83 ec 18             	sub    $0x18,%esp
    int pid = (int)arg[0];
c010ae7c:	8b 45 08             	mov    0x8(%ebp),%eax
c010ae7f:	8b 00                	mov    (%eax),%eax
c010ae81:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int *store = (int *)arg[1];
c010ae84:	8b 45 08             	mov    0x8(%ebp),%eax
c010ae87:	83 c0 04             	add    $0x4,%eax
c010ae8a:	8b 00                	mov    (%eax),%eax
c010ae8c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_wait(pid, store);
c010ae8f:	83 ec 08             	sub    $0x8,%esp
c010ae92:	ff 75 f0             	pushl  -0x10(%ebp)
c010ae95:	ff 75 f4             	pushl  -0xc(%ebp)
c010ae98:	e8 7e f8 ff ff       	call   c010a71b <do_wait>
c010ae9d:	83 c4 10             	add    $0x10,%esp
}
c010aea0:	c9                   	leave  
c010aea1:	c3                   	ret    

c010aea2 <sys_exec>:

static int
sys_exec(uint32_t arg[]) {
c010aea2:	55                   	push   %ebp
c010aea3:	89 e5                	mov    %esp,%ebp
c010aea5:	83 ec 18             	sub    $0x18,%esp
    const char *name = (const char *)arg[0];
c010aea8:	8b 45 08             	mov    0x8(%ebp),%eax
c010aeab:	8b 00                	mov    (%eax),%eax
c010aead:	89 45 f4             	mov    %eax,-0xc(%ebp)
    size_t len = (size_t)arg[1];
c010aeb0:	8b 45 08             	mov    0x8(%ebp),%eax
c010aeb3:	83 c0 04             	add    $0x4,%eax
c010aeb6:	8b 00                	mov    (%eax),%eax
c010aeb8:	89 45 f0             	mov    %eax,-0x10(%ebp)
    unsigned char *binary = (unsigned char *)arg[2];
c010aebb:	8b 45 08             	mov    0x8(%ebp),%eax
c010aebe:	83 c0 08             	add    $0x8,%eax
c010aec1:	8b 00                	mov    (%eax),%eax
c010aec3:	89 45 ec             	mov    %eax,-0x14(%ebp)
    size_t size = (size_t)arg[3];
c010aec6:	8b 45 08             	mov    0x8(%ebp),%eax
c010aec9:	83 c0 0c             	add    $0xc,%eax
c010aecc:	8b 00                	mov    (%eax),%eax
c010aece:	89 45 e8             	mov    %eax,-0x18(%ebp)
    return do_execve(name, len, binary, size);
c010aed1:	ff 75 e8             	pushl  -0x18(%ebp)
c010aed4:	ff 75 ec             	pushl  -0x14(%ebp)
c010aed7:	ff 75 f0             	pushl  -0x10(%ebp)
c010aeda:	ff 75 f4             	pushl  -0xc(%ebp)
c010aedd:	e8 01 f7 ff ff       	call   c010a5e3 <do_execve>
c010aee2:	83 c4 10             	add    $0x10,%esp
}
c010aee5:	c9                   	leave  
c010aee6:	c3                   	ret    

c010aee7 <sys_yield>:

static int
sys_yield(uint32_t arg[]) {
c010aee7:	55                   	push   %ebp
c010aee8:	89 e5                	mov    %esp,%ebp
c010aeea:	83 ec 08             	sub    $0x8,%esp
    return do_yield();
c010aeed:	e8 13 f8 ff ff       	call   c010a705 <do_yield>
}
c010aef2:	c9                   	leave  
c010aef3:	c3                   	ret    

c010aef4 <sys_kill>:

static int
sys_kill(uint32_t arg[]) {
c010aef4:	55                   	push   %ebp
c010aef5:	89 e5                	mov    %esp,%ebp
c010aef7:	83 ec 18             	sub    $0x18,%esp
    int pid = (int)arg[0];
c010aefa:	8b 45 08             	mov    0x8(%ebp),%eax
c010aefd:	8b 00                	mov    (%eax),%eax
c010aeff:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_kill(pid);
c010af02:	83 ec 0c             	sub    $0xc,%esp
c010af05:	ff 75 f4             	pushl  -0xc(%ebp)
c010af08:	e8 9c f9 ff ff       	call   c010a8a9 <do_kill>
c010af0d:	83 c4 10             	add    $0x10,%esp
}
c010af10:	c9                   	leave  
c010af11:	c3                   	ret    

c010af12 <sys_getpid>:

static int
sys_getpid(uint32_t arg[]) {
c010af12:	55                   	push   %ebp
c010af13:	89 e5                	mov    %esp,%ebp
    return current->pid;
c010af15:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c010af1a:	8b 40 04             	mov    0x4(%eax),%eax
}
c010af1d:	5d                   	pop    %ebp
c010af1e:	c3                   	ret    

c010af1f <sys_putc>:

static int
sys_putc(uint32_t arg[]) {
c010af1f:	55                   	push   %ebp
c010af20:	89 e5                	mov    %esp,%ebp
c010af22:	83 ec 18             	sub    $0x18,%esp
    int c = (int)arg[0];
c010af25:	8b 45 08             	mov    0x8(%ebp),%eax
c010af28:	8b 00                	mov    (%eax),%eax
c010af2a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cputchar(c);
c010af2d:	83 ec 0c             	sub    $0xc,%esp
c010af30:	ff 75 f4             	pushl  -0xc(%ebp)
c010af33:	e8 80 53 ff ff       	call   c01002b8 <cputchar>
c010af38:	83 c4 10             	add    $0x10,%esp
    return 0;
c010af3b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010af40:	c9                   	leave  
c010af41:	c3                   	ret    

c010af42 <sys_pgdir>:

static int
sys_pgdir(uint32_t arg[]) {
c010af42:	55                   	push   %ebp
c010af43:	89 e5                	mov    %esp,%ebp
c010af45:	83 ec 08             	sub    $0x8,%esp
    print_pgdir();
c010af48:	e8 19 e0 ff ff       	call   c0108f66 <print_pgdir>
    return 0;
c010af4d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010af52:	c9                   	leave  
c010af53:	c3                   	ret    

c010af54 <syscall>:
};

#define NUM_SYSCALLS        ((sizeof(syscalls)) / (sizeof(syscalls[0])))

void
syscall(void) {
c010af54:	55                   	push   %ebp
c010af55:	89 e5                	mov    %esp,%ebp
c010af57:	83 ec 28             	sub    $0x28,%esp
    struct trapframe *tf = current->tf;
c010af5a:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c010af5f:	8b 40 3c             	mov    0x3c(%eax),%eax
c010af62:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t arg[5];
    int num = tf->tf_regs.reg_eax;
c010af65:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010af68:	8b 40 1c             	mov    0x1c(%eax),%eax
c010af6b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (num >= 0 && num < NUM_SYSCALLS) {
c010af6e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010af72:	78 62                	js     c010afd6 <syscall+0x82>
c010af74:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010af77:	83 f8 1f             	cmp    $0x1f,%eax
c010af7a:	77 5a                	ja     c010afd6 <syscall+0x82>
        if (syscalls[num] != NULL) {
c010af7c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010af7f:	8b 04 85 c0 ba 12 c0 	mov    -0x3fed4540(,%eax,4),%eax
c010af86:	85 c0                	test   %eax,%eax
c010af88:	74 4c                	je     c010afd6 <syscall+0x82>
            arg[0] = tf->tf_regs.reg_edx;
c010af8a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010af8d:	8b 40 14             	mov    0x14(%eax),%eax
c010af90:	89 45 dc             	mov    %eax,-0x24(%ebp)
            arg[1] = tf->tf_regs.reg_ecx;
c010af93:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010af96:	8b 40 18             	mov    0x18(%eax),%eax
c010af99:	89 45 e0             	mov    %eax,-0x20(%ebp)
            arg[2] = tf->tf_regs.reg_ebx;
c010af9c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010af9f:	8b 40 10             	mov    0x10(%eax),%eax
c010afa2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            arg[3] = tf->tf_regs.reg_edi;
c010afa5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010afa8:	8b 00                	mov    (%eax),%eax
c010afaa:	89 45 e8             	mov    %eax,-0x18(%ebp)
            arg[4] = tf->tf_regs.reg_esi;
c010afad:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010afb0:	8b 40 04             	mov    0x4(%eax),%eax
c010afb3:	89 45 ec             	mov    %eax,-0x14(%ebp)
            tf->tf_regs.reg_eax = syscalls[num](arg);
c010afb6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010afb9:	8b 04 85 c0 ba 12 c0 	mov    -0x3fed4540(,%eax,4),%eax
c010afc0:	83 ec 0c             	sub    $0xc,%esp
c010afc3:	8d 55 dc             	lea    -0x24(%ebp),%edx
c010afc6:	52                   	push   %edx
c010afc7:	ff d0                	call   *%eax
c010afc9:	83 c4 10             	add    $0x10,%esp
c010afcc:	89 c2                	mov    %eax,%edx
c010afce:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010afd1:	89 50 1c             	mov    %edx,0x1c(%eax)
            return ;
c010afd4:	eb 37                	jmp    c010b00d <syscall+0xb9>
        }
    }
    print_trapframe(tf);
c010afd6:	83 ec 0c             	sub    $0xc,%esp
c010afd9:	ff 75 f4             	pushl  -0xc(%ebp)
c010afdc:	e8 4d 74 ff ff       	call   c010242e <print_trapframe>
c010afe1:	83 c4 10             	add    $0x10,%esp
    panic("undefined syscall %d, pid = %d, name = %s.\n",
c010afe4:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c010afe9:	8d 50 48             	lea    0x48(%eax),%edx
c010afec:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c010aff1:	8b 40 04             	mov    0x4(%eax),%eax
c010aff4:	83 ec 08             	sub    $0x8,%esp
c010aff7:	52                   	push   %edx
c010aff8:	50                   	push   %eax
c010aff9:	ff 75 f0             	pushl  -0x10(%ebp)
c010affc:	68 84 e3 10 c0       	push   $0xc010e384
c010b001:	6a 63                	push   $0x63
c010b003:	68 b0 e3 10 c0       	push   $0xc010e3b0
c010b008:	e8 eb 53 ff ff       	call   c01003f8 <__panic>
            num, current->pid, current->name);
}
c010b00d:	c9                   	leave  
c010b00e:	c3                   	ret    

c010b00f <strlen>:
 * @s:      the input string
 *
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
c010b00f:	55                   	push   %ebp
c010b010:	89 e5                	mov    %esp,%ebp
c010b012:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c010b015:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (*s ++ != '\0') {
c010b01c:	eb 04                	jmp    c010b022 <strlen+0x13>
        cnt ++;
c010b01e:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
    size_t cnt = 0;
    while (*s ++ != '\0') {
c010b022:	8b 45 08             	mov    0x8(%ebp),%eax
c010b025:	8d 50 01             	lea    0x1(%eax),%edx
c010b028:	89 55 08             	mov    %edx,0x8(%ebp)
c010b02b:	0f b6 00             	movzbl (%eax),%eax
c010b02e:	84 c0                	test   %al,%al
c010b030:	75 ec                	jne    c010b01e <strlen+0xf>
        cnt ++;
    }
    return cnt;
c010b032:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010b035:	c9                   	leave  
c010b036:	c3                   	ret    

c010b037 <strnlen>:
 * The return value is strlen(s), if that is less than @len, or
 * @len if there is no '\0' character among the first @len characters
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
c010b037:	55                   	push   %ebp
c010b038:	89 e5                	mov    %esp,%ebp
c010b03a:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c010b03d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (cnt < len && *s ++ != '\0') {
c010b044:	eb 04                	jmp    c010b04a <strnlen+0x13>
        cnt ++;
c010b046:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
    size_t cnt = 0;
    while (cnt < len && *s ++ != '\0') {
c010b04a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010b04d:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010b050:	73 10                	jae    c010b062 <strnlen+0x2b>
c010b052:	8b 45 08             	mov    0x8(%ebp),%eax
c010b055:	8d 50 01             	lea    0x1(%eax),%edx
c010b058:	89 55 08             	mov    %edx,0x8(%ebp)
c010b05b:	0f b6 00             	movzbl (%eax),%eax
c010b05e:	84 c0                	test   %al,%al
c010b060:	75 e4                	jne    c010b046 <strnlen+0xf>
        cnt ++;
    }
    return cnt;
c010b062:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010b065:	c9                   	leave  
c010b066:	c3                   	ret    

c010b067 <strcpy>:
 * To avoid overflows, the size of array pointed by @dst should be long enough to
 * contain the same string as @src (including the terminating null character), and
 * should not overlap in memory with @src.
 * */
char *
strcpy(char *dst, const char *src) {
c010b067:	55                   	push   %ebp
c010b068:	89 e5                	mov    %esp,%ebp
c010b06a:	57                   	push   %edi
c010b06b:	56                   	push   %esi
c010b06c:	83 ec 20             	sub    $0x20,%esp
c010b06f:	8b 45 08             	mov    0x8(%ebp),%eax
c010b072:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b075:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b078:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_STRCPY
#define __HAVE_ARCH_STRCPY
static inline char *
__strcpy(char *dst, const char *src) {
    int d0, d1, d2;
    asm volatile (
c010b07b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010b07e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b081:	89 d1                	mov    %edx,%ecx
c010b083:	89 c2                	mov    %eax,%edx
c010b085:	89 ce                	mov    %ecx,%esi
c010b087:	89 d7                	mov    %edx,%edi
c010b089:	ac                   	lods   %ds:(%esi),%al
c010b08a:	aa                   	stos   %al,%es:(%edi)
c010b08b:	84 c0                	test   %al,%al
c010b08d:	75 fa                	jne    c010b089 <strcpy+0x22>
c010b08f:	89 fa                	mov    %edi,%edx
c010b091:	89 f1                	mov    %esi,%ecx
c010b093:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c010b096:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010b099:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        "stosb;"
        "testb %%al, %%al;"
        "jne 1b;"
        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
        : "0" (src), "1" (dst) : "memory");
    return dst;
c010b09c:	8b 45 f4             	mov    -0xc(%ebp),%eax
#ifdef __HAVE_ARCH_STRCPY
    return __strcpy(dst, src);
c010b09f:	90                   	nop
    char *p = dst;
    while ((*p ++ = *src ++) != '\0')
        /* nothing */;
    return dst;
#endif /* __HAVE_ARCH_STRCPY */
}
c010b0a0:	83 c4 20             	add    $0x20,%esp
c010b0a3:	5e                   	pop    %esi
c010b0a4:	5f                   	pop    %edi
c010b0a5:	5d                   	pop    %ebp
c010b0a6:	c3                   	ret    

c010b0a7 <strncpy>:
 * @len:    maximum number of characters to be copied from @src
 *
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
c010b0a7:	55                   	push   %ebp
c010b0a8:	89 e5                	mov    %esp,%ebp
c010b0aa:	83 ec 10             	sub    $0x10,%esp
    char *p = dst;
c010b0ad:	8b 45 08             	mov    0x8(%ebp),%eax
c010b0b0:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (len > 0) {
c010b0b3:	eb 21                	jmp    c010b0d6 <strncpy+0x2f>
        if ((*p = *src) != '\0') {
c010b0b5:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b0b8:	0f b6 10             	movzbl (%eax),%edx
c010b0bb:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010b0be:	88 10                	mov    %dl,(%eax)
c010b0c0:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010b0c3:	0f b6 00             	movzbl (%eax),%eax
c010b0c6:	84 c0                	test   %al,%al
c010b0c8:	74 04                	je     c010b0ce <strncpy+0x27>
            src ++;
c010b0ca:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
        }
        p ++, len --;
c010b0ce:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010b0d2:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
    char *p = dst;
    while (len > 0) {
c010b0d6:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010b0da:	75 d9                	jne    c010b0b5 <strncpy+0xe>
        if ((*p = *src) != '\0') {
            src ++;
        }
        p ++, len --;
    }
    return dst;
c010b0dc:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010b0df:	c9                   	leave  
c010b0e0:	c3                   	ret    

c010b0e1 <strcmp>:
 * - A value greater than zero indicates that the first character that does
 *   not match has a greater value in @s1 than in @s2;
 * - And a value less than zero indicates the opposite.
 * */
int
strcmp(const char *s1, const char *s2) {
c010b0e1:	55                   	push   %ebp
c010b0e2:	89 e5                	mov    %esp,%ebp
c010b0e4:	57                   	push   %edi
c010b0e5:	56                   	push   %esi
c010b0e6:	83 ec 20             	sub    $0x20,%esp
c010b0e9:	8b 45 08             	mov    0x8(%ebp),%eax
c010b0ec:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b0ef:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b0f2:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_STRCMP
#define __HAVE_ARCH_STRCMP
static inline int
__strcmp(const char *s1, const char *s2) {
    int d0, d1, ret;
    asm volatile (
c010b0f5:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b0f8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b0fb:	89 d1                	mov    %edx,%ecx
c010b0fd:	89 c2                	mov    %eax,%edx
c010b0ff:	89 ce                	mov    %ecx,%esi
c010b101:	89 d7                	mov    %edx,%edi
c010b103:	ac                   	lods   %ds:(%esi),%al
c010b104:	ae                   	scas   %es:(%edi),%al
c010b105:	75 08                	jne    c010b10f <strcmp+0x2e>
c010b107:	84 c0                	test   %al,%al
c010b109:	75 f8                	jne    c010b103 <strcmp+0x22>
c010b10b:	31 c0                	xor    %eax,%eax
c010b10d:	eb 04                	jmp    c010b113 <strcmp+0x32>
c010b10f:	19 c0                	sbb    %eax,%eax
c010b111:	0c 01                	or     $0x1,%al
c010b113:	89 fa                	mov    %edi,%edx
c010b115:	89 f1                	mov    %esi,%ecx
c010b117:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010b11a:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c010b11d:	89 55 e4             	mov    %edx,-0x1c(%ebp)
        "orb $1, %%al;"
        "3:"
        : "=a" (ret), "=&S" (d0), "=&D" (d1)
        : "1" (s1), "2" (s2)
        : "memory");
    return ret;
c010b120:	8b 45 ec             	mov    -0x14(%ebp),%eax
#ifdef __HAVE_ARCH_STRCMP
    return __strcmp(s1, s2);
c010b123:	90                   	nop
    while (*s1 != '\0' && *s1 == *s2) {
        s1 ++, s2 ++;
    }
    return (int)((unsigned char)*s1 - (unsigned char)*s2);
#endif /* __HAVE_ARCH_STRCMP */
}
c010b124:	83 c4 20             	add    $0x20,%esp
c010b127:	5e                   	pop    %esi
c010b128:	5f                   	pop    %edi
c010b129:	5d                   	pop    %ebp
c010b12a:	c3                   	ret    

c010b12b <strncmp>:
 * they are equal to each other, it continues with the following pairs until
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
c010b12b:	55                   	push   %ebp
c010b12c:	89 e5                	mov    %esp,%ebp
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c010b12e:	eb 0c                	jmp    c010b13c <strncmp+0x11>
        n --, s1 ++, s2 ++;
c010b130:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c010b134:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010b138:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c010b13c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010b140:	74 1a                	je     c010b15c <strncmp+0x31>
c010b142:	8b 45 08             	mov    0x8(%ebp),%eax
c010b145:	0f b6 00             	movzbl (%eax),%eax
c010b148:	84 c0                	test   %al,%al
c010b14a:	74 10                	je     c010b15c <strncmp+0x31>
c010b14c:	8b 45 08             	mov    0x8(%ebp),%eax
c010b14f:	0f b6 10             	movzbl (%eax),%edx
c010b152:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b155:	0f b6 00             	movzbl (%eax),%eax
c010b158:	38 c2                	cmp    %al,%dl
c010b15a:	74 d4                	je     c010b130 <strncmp+0x5>
        n --, s1 ++, s2 ++;
    }
    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
c010b15c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010b160:	74 18                	je     c010b17a <strncmp+0x4f>
c010b162:	8b 45 08             	mov    0x8(%ebp),%eax
c010b165:	0f b6 00             	movzbl (%eax),%eax
c010b168:	0f b6 d0             	movzbl %al,%edx
c010b16b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b16e:	0f b6 00             	movzbl (%eax),%eax
c010b171:	0f b6 c0             	movzbl %al,%eax
c010b174:	29 c2                	sub    %eax,%edx
c010b176:	89 d0                	mov    %edx,%eax
c010b178:	eb 05                	jmp    c010b17f <strncmp+0x54>
c010b17a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010b17f:	5d                   	pop    %ebp
c010b180:	c3                   	ret    

c010b181 <strchr>:
 *
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
c010b181:	55                   	push   %ebp
c010b182:	89 e5                	mov    %esp,%ebp
c010b184:	83 ec 04             	sub    $0x4,%esp
c010b187:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b18a:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c010b18d:	eb 14                	jmp    c010b1a3 <strchr+0x22>
        if (*s == c) {
c010b18f:	8b 45 08             	mov    0x8(%ebp),%eax
c010b192:	0f b6 00             	movzbl (%eax),%eax
c010b195:	3a 45 fc             	cmp    -0x4(%ebp),%al
c010b198:	75 05                	jne    c010b19f <strchr+0x1e>
            return (char *)s;
c010b19a:	8b 45 08             	mov    0x8(%ebp),%eax
c010b19d:	eb 13                	jmp    c010b1b2 <strchr+0x31>
        }
        s ++;
c010b19f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
    while (*s != '\0') {
c010b1a3:	8b 45 08             	mov    0x8(%ebp),%eax
c010b1a6:	0f b6 00             	movzbl (%eax),%eax
c010b1a9:	84 c0                	test   %al,%al
c010b1ab:	75 e2                	jne    c010b18f <strchr+0xe>
        if (*s == c) {
            return (char *)s;
        }
        s ++;
    }
    return NULL;
c010b1ad:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010b1b2:	c9                   	leave  
c010b1b3:	c3                   	ret    

c010b1b4 <strfind>:
 * The strfind() function is like strchr() except that if @c is
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
c010b1b4:	55                   	push   %ebp
c010b1b5:	89 e5                	mov    %esp,%ebp
c010b1b7:	83 ec 04             	sub    $0x4,%esp
c010b1ba:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b1bd:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c010b1c0:	eb 0f                	jmp    c010b1d1 <strfind+0x1d>
        if (*s == c) {
c010b1c2:	8b 45 08             	mov    0x8(%ebp),%eax
c010b1c5:	0f b6 00             	movzbl (%eax),%eax
c010b1c8:	3a 45 fc             	cmp    -0x4(%ebp),%al
c010b1cb:	74 10                	je     c010b1dd <strfind+0x29>
            break;
        }
        s ++;
c010b1cd:	83 45 08 01          	addl   $0x1,0x8(%ebp)
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
    while (*s != '\0') {
c010b1d1:	8b 45 08             	mov    0x8(%ebp),%eax
c010b1d4:	0f b6 00             	movzbl (%eax),%eax
c010b1d7:	84 c0                	test   %al,%al
c010b1d9:	75 e7                	jne    c010b1c2 <strfind+0xe>
c010b1db:	eb 01                	jmp    c010b1de <strfind+0x2a>
        if (*s == c) {
            break;
c010b1dd:	90                   	nop
        }
        s ++;
    }
    return (char *)s;
c010b1de:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010b1e1:	c9                   	leave  
c010b1e2:	c3                   	ret    

c010b1e3 <strtol>:
 * an optional "0x" or "0X" prefix.
 *
 * The strtol() function returns the converted integral number as a long int value.
 * */
long
strtol(const char *s, char **endptr, int base) {
c010b1e3:	55                   	push   %ebp
c010b1e4:	89 e5                	mov    %esp,%ebp
c010b1e6:	83 ec 10             	sub    $0x10,%esp
    int neg = 0;
c010b1e9:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    long val = 0;
c010b1f0:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
c010b1f7:	eb 04                	jmp    c010b1fd <strtol+0x1a>
        s ++;
c010b1f9:	83 45 08 01          	addl   $0x1,0x8(%ebp)
strtol(const char *s, char **endptr, int base) {
    int neg = 0;
    long val = 0;

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
c010b1fd:	8b 45 08             	mov    0x8(%ebp),%eax
c010b200:	0f b6 00             	movzbl (%eax),%eax
c010b203:	3c 20                	cmp    $0x20,%al
c010b205:	74 f2                	je     c010b1f9 <strtol+0x16>
c010b207:	8b 45 08             	mov    0x8(%ebp),%eax
c010b20a:	0f b6 00             	movzbl (%eax),%eax
c010b20d:	3c 09                	cmp    $0x9,%al
c010b20f:	74 e8                	je     c010b1f9 <strtol+0x16>
        s ++;
    }

    // plus/minus sign
    if (*s == '+') {
c010b211:	8b 45 08             	mov    0x8(%ebp),%eax
c010b214:	0f b6 00             	movzbl (%eax),%eax
c010b217:	3c 2b                	cmp    $0x2b,%al
c010b219:	75 06                	jne    c010b221 <strtol+0x3e>
        s ++;
c010b21b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010b21f:	eb 15                	jmp    c010b236 <strtol+0x53>
    }
    else if (*s == '-') {
c010b221:	8b 45 08             	mov    0x8(%ebp),%eax
c010b224:	0f b6 00             	movzbl (%eax),%eax
c010b227:	3c 2d                	cmp    $0x2d,%al
c010b229:	75 0b                	jne    c010b236 <strtol+0x53>
        s ++, neg = 1;
c010b22b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010b22f:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
    }

    // hex or octal base prefix
    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
c010b236:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010b23a:	74 06                	je     c010b242 <strtol+0x5f>
c010b23c:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
c010b240:	75 24                	jne    c010b266 <strtol+0x83>
c010b242:	8b 45 08             	mov    0x8(%ebp),%eax
c010b245:	0f b6 00             	movzbl (%eax),%eax
c010b248:	3c 30                	cmp    $0x30,%al
c010b24a:	75 1a                	jne    c010b266 <strtol+0x83>
c010b24c:	8b 45 08             	mov    0x8(%ebp),%eax
c010b24f:	83 c0 01             	add    $0x1,%eax
c010b252:	0f b6 00             	movzbl (%eax),%eax
c010b255:	3c 78                	cmp    $0x78,%al
c010b257:	75 0d                	jne    c010b266 <strtol+0x83>
        s += 2, base = 16;
c010b259:	83 45 08 02          	addl   $0x2,0x8(%ebp)
c010b25d:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
c010b264:	eb 2a                	jmp    c010b290 <strtol+0xad>
    }
    else if (base == 0 && s[0] == '0') {
c010b266:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010b26a:	75 17                	jne    c010b283 <strtol+0xa0>
c010b26c:	8b 45 08             	mov    0x8(%ebp),%eax
c010b26f:	0f b6 00             	movzbl (%eax),%eax
c010b272:	3c 30                	cmp    $0x30,%al
c010b274:	75 0d                	jne    c010b283 <strtol+0xa0>
        s ++, base = 8;
c010b276:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010b27a:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
c010b281:	eb 0d                	jmp    c010b290 <strtol+0xad>
    }
    else if (base == 0) {
c010b283:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010b287:	75 07                	jne    c010b290 <strtol+0xad>
        base = 10;
c010b289:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

    // digits
    while (1) {
        int dig;

        if (*s >= '0' && *s <= '9') {
c010b290:	8b 45 08             	mov    0x8(%ebp),%eax
c010b293:	0f b6 00             	movzbl (%eax),%eax
c010b296:	3c 2f                	cmp    $0x2f,%al
c010b298:	7e 1b                	jle    c010b2b5 <strtol+0xd2>
c010b29a:	8b 45 08             	mov    0x8(%ebp),%eax
c010b29d:	0f b6 00             	movzbl (%eax),%eax
c010b2a0:	3c 39                	cmp    $0x39,%al
c010b2a2:	7f 11                	jg     c010b2b5 <strtol+0xd2>
            dig = *s - '0';
c010b2a4:	8b 45 08             	mov    0x8(%ebp),%eax
c010b2a7:	0f b6 00             	movzbl (%eax),%eax
c010b2aa:	0f be c0             	movsbl %al,%eax
c010b2ad:	83 e8 30             	sub    $0x30,%eax
c010b2b0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b2b3:	eb 48                	jmp    c010b2fd <strtol+0x11a>
        }
        else if (*s >= 'a' && *s <= 'z') {
c010b2b5:	8b 45 08             	mov    0x8(%ebp),%eax
c010b2b8:	0f b6 00             	movzbl (%eax),%eax
c010b2bb:	3c 60                	cmp    $0x60,%al
c010b2bd:	7e 1b                	jle    c010b2da <strtol+0xf7>
c010b2bf:	8b 45 08             	mov    0x8(%ebp),%eax
c010b2c2:	0f b6 00             	movzbl (%eax),%eax
c010b2c5:	3c 7a                	cmp    $0x7a,%al
c010b2c7:	7f 11                	jg     c010b2da <strtol+0xf7>
            dig = *s - 'a' + 10;
c010b2c9:	8b 45 08             	mov    0x8(%ebp),%eax
c010b2cc:	0f b6 00             	movzbl (%eax),%eax
c010b2cf:	0f be c0             	movsbl %al,%eax
c010b2d2:	83 e8 57             	sub    $0x57,%eax
c010b2d5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b2d8:	eb 23                	jmp    c010b2fd <strtol+0x11a>
        }
        else if (*s >= 'A' && *s <= 'Z') {
c010b2da:	8b 45 08             	mov    0x8(%ebp),%eax
c010b2dd:	0f b6 00             	movzbl (%eax),%eax
c010b2e0:	3c 40                	cmp    $0x40,%al
c010b2e2:	7e 3c                	jle    c010b320 <strtol+0x13d>
c010b2e4:	8b 45 08             	mov    0x8(%ebp),%eax
c010b2e7:	0f b6 00             	movzbl (%eax),%eax
c010b2ea:	3c 5a                	cmp    $0x5a,%al
c010b2ec:	7f 32                	jg     c010b320 <strtol+0x13d>
            dig = *s - 'A' + 10;
c010b2ee:	8b 45 08             	mov    0x8(%ebp),%eax
c010b2f1:	0f b6 00             	movzbl (%eax),%eax
c010b2f4:	0f be c0             	movsbl %al,%eax
c010b2f7:	83 e8 37             	sub    $0x37,%eax
c010b2fa:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        else {
            break;
        }
        if (dig >= base) {
c010b2fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b300:	3b 45 10             	cmp    0x10(%ebp),%eax
c010b303:	7d 1a                	jge    c010b31f <strtol+0x13c>
            break;
        }
        s ++, val = (val * base) + dig;
c010b305:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010b309:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010b30c:	0f af 45 10          	imul   0x10(%ebp),%eax
c010b310:	89 c2                	mov    %eax,%edx
c010b312:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b315:	01 d0                	add    %edx,%eax
c010b317:	89 45 f8             	mov    %eax,-0x8(%ebp)
        // we don't properly detect overflow!
    }
c010b31a:	e9 71 ff ff ff       	jmp    c010b290 <strtol+0xad>
        }
        else {
            break;
        }
        if (dig >= base) {
            break;
c010b31f:	90                   	nop
        }
        s ++, val = (val * base) + dig;
        // we don't properly detect overflow!
    }

    if (endptr) {
c010b320:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010b324:	74 08                	je     c010b32e <strtol+0x14b>
        *endptr = (char *) s;
c010b326:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b329:	8b 55 08             	mov    0x8(%ebp),%edx
c010b32c:	89 10                	mov    %edx,(%eax)
    }
    return (neg ? -val : val);
c010b32e:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c010b332:	74 07                	je     c010b33b <strtol+0x158>
c010b334:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010b337:	f7 d8                	neg    %eax
c010b339:	eb 03                	jmp    c010b33e <strtol+0x15b>
c010b33b:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c010b33e:	c9                   	leave  
c010b33f:	c3                   	ret    

c010b340 <memset>:
 * @n:      number of bytes to be set to the value
 *
 * The memset() function returns @s.
 * */
void *
memset(void *s, char c, size_t n) {
c010b340:	55                   	push   %ebp
c010b341:	89 e5                	mov    %esp,%ebp
c010b343:	57                   	push   %edi
c010b344:	83 ec 24             	sub    $0x24,%esp
c010b347:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b34a:	88 45 d8             	mov    %al,-0x28(%ebp)
#ifdef __HAVE_ARCH_MEMSET
    return __memset(s, c, n);
c010b34d:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
c010b351:	8b 55 08             	mov    0x8(%ebp),%edx
c010b354:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010b357:	88 45 f7             	mov    %al,-0x9(%ebp)
c010b35a:	8b 45 10             	mov    0x10(%ebp),%eax
c010b35d:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_MEMSET
#define __HAVE_ARCH_MEMSET
static inline void *
__memset(void *s, char c, size_t n) {
    int d0, d1;
    asm volatile (
c010b360:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010b363:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c010b367:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010b36a:	89 d7                	mov    %edx,%edi
c010b36c:	f3 aa                	rep stos %al,%es:(%edi)
c010b36e:	89 fa                	mov    %edi,%edx
c010b370:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c010b373:	89 55 e8             	mov    %edx,-0x18(%ebp)
        "rep; stosb;"
        : "=&c" (d0), "=&D" (d1)
        : "0" (n), "a" (c), "1" (s)
        : "memory");
    return s;
c010b376:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010b379:	90                   	nop
    while (n -- > 0) {
        *p ++ = c;
    }
    return s;
#endif /* __HAVE_ARCH_MEMSET */
}
c010b37a:	83 c4 24             	add    $0x24,%esp
c010b37d:	5f                   	pop    %edi
c010b37e:	5d                   	pop    %ebp
c010b37f:	c3                   	ret    

c010b380 <memmove>:
 * @n:      number of bytes to copy
 *
 * The memmove() function returns @dst.
 * */
void *
memmove(void *dst, const void *src, size_t n) {
c010b380:	55                   	push   %ebp
c010b381:	89 e5                	mov    %esp,%ebp
c010b383:	57                   	push   %edi
c010b384:	56                   	push   %esi
c010b385:	53                   	push   %ebx
c010b386:	83 ec 30             	sub    $0x30,%esp
c010b389:	8b 45 08             	mov    0x8(%ebp),%eax
c010b38c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b38f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b392:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010b395:	8b 45 10             	mov    0x10(%ebp),%eax
c010b398:	89 45 e8             	mov    %eax,-0x18(%ebp)

#ifndef __HAVE_ARCH_MEMMOVE
#define __HAVE_ARCH_MEMMOVE
static inline void *
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
c010b39b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b39e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010b3a1:	73 42                	jae    c010b3e5 <memmove+0x65>
c010b3a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b3a6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010b3a9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b3ac:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010b3af:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b3b2:	89 45 dc             	mov    %eax,-0x24(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c010b3b5:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b3b8:	c1 e8 02             	shr    $0x2,%eax
c010b3bb:	89 c1                	mov    %eax,%ecx
#ifndef __HAVE_ARCH_MEMCPY
#define __HAVE_ARCH_MEMCPY
static inline void *
__memcpy(void *dst, const void *src, size_t n) {
    int d0, d1, d2;
    asm volatile (
c010b3bd:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010b3c0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b3c3:	89 d7                	mov    %edx,%edi
c010b3c5:	89 c6                	mov    %eax,%esi
c010b3c7:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010b3c9:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c010b3cc:	83 e1 03             	and    $0x3,%ecx
c010b3cf:	74 02                	je     c010b3d3 <memmove+0x53>
c010b3d1:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010b3d3:	89 f0                	mov    %esi,%eax
c010b3d5:	89 fa                	mov    %edi,%edx
c010b3d7:	89 4d d8             	mov    %ecx,-0x28(%ebp)
c010b3da:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010b3dd:	89 45 d0             	mov    %eax,-0x30(%ebp)
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
        : "memory");
    return dst;
c010b3e0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
#ifdef __HAVE_ARCH_MEMMOVE
    return __memmove(dst, src, n);
c010b3e3:	eb 36                	jmp    c010b41b <memmove+0x9b>
    asm volatile (
        "std;"
        "rep; movsb;"
        "cld;"
        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
c010b3e5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b3e8:	8d 50 ff             	lea    -0x1(%eax),%edx
c010b3eb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b3ee:	01 c2                	add    %eax,%edx
c010b3f0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b3f3:	8d 48 ff             	lea    -0x1(%eax),%ecx
c010b3f6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b3f9:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
        return __memcpy(dst, src, n);
    }
    int d0, d1, d2;
    asm volatile (
c010b3fc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b3ff:	89 c1                	mov    %eax,%ecx
c010b401:	89 d8                	mov    %ebx,%eax
c010b403:	89 d6                	mov    %edx,%esi
c010b405:	89 c7                	mov    %eax,%edi
c010b407:	fd                   	std    
c010b408:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010b40a:	fc                   	cld    
c010b40b:	89 f8                	mov    %edi,%eax
c010b40d:	89 f2                	mov    %esi,%edx
c010b40f:	89 4d cc             	mov    %ecx,-0x34(%ebp)
c010b412:	89 55 c8             	mov    %edx,-0x38(%ebp)
c010b415:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        "rep; movsb;"
        "cld;"
        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
        : "memory");
    return dst;
c010b418:	8b 45 f0             	mov    -0x10(%ebp),%eax
            *d ++ = *s ++;
        }
    }
    return dst;
#endif /* __HAVE_ARCH_MEMMOVE */
}
c010b41b:	83 c4 30             	add    $0x30,%esp
c010b41e:	5b                   	pop    %ebx
c010b41f:	5e                   	pop    %esi
c010b420:	5f                   	pop    %edi
c010b421:	5d                   	pop    %ebp
c010b422:	c3                   	ret    

c010b423 <memcpy>:
 * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
 * by both @src and @dst, should be at least @n bytes, and should not overlap
 * (for overlapping memory area, memmove is a safer approach).
 * */
void *
memcpy(void *dst, const void *src, size_t n) {
c010b423:	55                   	push   %ebp
c010b424:	89 e5                	mov    %esp,%ebp
c010b426:	57                   	push   %edi
c010b427:	56                   	push   %esi
c010b428:	83 ec 20             	sub    $0x20,%esp
c010b42b:	8b 45 08             	mov    0x8(%ebp),%eax
c010b42e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b431:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b434:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b437:	8b 45 10             	mov    0x10(%ebp),%eax
c010b43a:	89 45 ec             	mov    %eax,-0x14(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c010b43d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b440:	c1 e8 02             	shr    $0x2,%eax
c010b443:	89 c1                	mov    %eax,%ecx
#ifndef __HAVE_ARCH_MEMCPY
#define __HAVE_ARCH_MEMCPY
static inline void *
__memcpy(void *dst, const void *src, size_t n) {
    int d0, d1, d2;
    asm volatile (
c010b445:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b448:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b44b:	89 d7                	mov    %edx,%edi
c010b44d:	89 c6                	mov    %eax,%esi
c010b44f:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010b451:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c010b454:	83 e1 03             	and    $0x3,%ecx
c010b457:	74 02                	je     c010b45b <memcpy+0x38>
c010b459:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010b45b:	89 f0                	mov    %esi,%eax
c010b45d:	89 fa                	mov    %edi,%edx
c010b45f:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c010b462:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c010b465:	89 45 e0             	mov    %eax,-0x20(%ebp)
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
        : "memory");
    return dst;
c010b468:	8b 45 f4             	mov    -0xc(%ebp),%eax
#ifdef __HAVE_ARCH_MEMCPY
    return __memcpy(dst, src, n);
c010b46b:	90                   	nop
    while (n -- > 0) {
        *d ++ = *s ++;
    }
    return dst;
#endif /* __HAVE_ARCH_MEMCPY */
}
c010b46c:	83 c4 20             	add    $0x20,%esp
c010b46f:	5e                   	pop    %esi
c010b470:	5f                   	pop    %edi
c010b471:	5d                   	pop    %ebp
c010b472:	c3                   	ret    

c010b473 <memcmp>:
 *   match in both memory blocks has a greater value in @v1 than in @v2
 *   as if evaluated as unsigned char values;
 * - And a value less than zero indicates the opposite.
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
c010b473:	55                   	push   %ebp
c010b474:	89 e5                	mov    %esp,%ebp
c010b476:	83 ec 10             	sub    $0x10,%esp
    const char *s1 = (const char *)v1;
c010b479:	8b 45 08             	mov    0x8(%ebp),%eax
c010b47c:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s2 = (const char *)v2;
c010b47f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b482:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (n -- > 0) {
c010b485:	eb 30                	jmp    c010b4b7 <memcmp+0x44>
        if (*s1 != *s2) {
c010b487:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010b48a:	0f b6 10             	movzbl (%eax),%edx
c010b48d:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010b490:	0f b6 00             	movzbl (%eax),%eax
c010b493:	38 c2                	cmp    %al,%dl
c010b495:	74 18                	je     c010b4af <memcmp+0x3c>
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
c010b497:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010b49a:	0f b6 00             	movzbl (%eax),%eax
c010b49d:	0f b6 d0             	movzbl %al,%edx
c010b4a0:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010b4a3:	0f b6 00             	movzbl (%eax),%eax
c010b4a6:	0f b6 c0             	movzbl %al,%eax
c010b4a9:	29 c2                	sub    %eax,%edx
c010b4ab:	89 d0                	mov    %edx,%eax
c010b4ad:	eb 1a                	jmp    c010b4c9 <memcmp+0x56>
        }
        s1 ++, s2 ++;
c010b4af:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010b4b3:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
    const char *s1 = (const char *)v1;
    const char *s2 = (const char *)v2;
    while (n -- > 0) {
c010b4b7:	8b 45 10             	mov    0x10(%ebp),%eax
c010b4ba:	8d 50 ff             	lea    -0x1(%eax),%edx
c010b4bd:	89 55 10             	mov    %edx,0x10(%ebp)
c010b4c0:	85 c0                	test   %eax,%eax
c010b4c2:	75 c3                	jne    c010b487 <memcmp+0x14>
        if (*s1 != *s2) {
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
        }
        s1 ++, s2 ++;
    }
    return 0;
c010b4c4:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010b4c9:	c9                   	leave  
c010b4ca:	c3                   	ret    

c010b4cb <printnum>:
 * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
 * @padc:       character that padded on the left if the actual width is less than @width
 * */
static void
printnum(void (*putch)(int, void*), void *putdat,
        unsigned long long num, unsigned base, int width, int padc) {
c010b4cb:	55                   	push   %ebp
c010b4cc:	89 e5                	mov    %esp,%ebp
c010b4ce:	83 ec 38             	sub    $0x38,%esp
c010b4d1:	8b 45 10             	mov    0x10(%ebp),%eax
c010b4d4:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010b4d7:	8b 45 14             	mov    0x14(%ebp),%eax
c010b4da:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    unsigned long long result = num;
c010b4dd:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b4e0:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010b4e3:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010b4e6:	89 55 ec             	mov    %edx,-0x14(%ebp)
    unsigned mod = do_div(result, base);
c010b4e9:	8b 45 18             	mov    0x18(%ebp),%eax
c010b4ec:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010b4ef:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b4f2:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010b4f5:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010b4f8:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010b4fb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b4fe:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b501:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b505:	74 1c                	je     c010b523 <printnum+0x58>
c010b507:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b50a:	ba 00 00 00 00       	mov    $0x0,%edx
c010b50f:	f7 75 e4             	divl   -0x1c(%ebp)
c010b512:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010b515:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b518:	ba 00 00 00 00       	mov    $0x0,%edx
c010b51d:	f7 75 e4             	divl   -0x1c(%ebp)
c010b520:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b523:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b526:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b529:	f7 75 e4             	divl   -0x1c(%ebp)
c010b52c:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010b52f:	89 55 dc             	mov    %edx,-0x24(%ebp)
c010b532:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b535:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010b538:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010b53b:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010b53e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b541:	89 45 d8             	mov    %eax,-0x28(%ebp)

    // first recursively print all preceding (more significant) digits
    if (num >= base) {
c010b544:	8b 45 18             	mov    0x18(%ebp),%eax
c010b547:	ba 00 00 00 00       	mov    $0x0,%edx
c010b54c:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c010b54f:	77 41                	ja     c010b592 <printnum+0xc7>
c010b551:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c010b554:	72 05                	jb     c010b55b <printnum+0x90>
c010b556:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c010b559:	77 37                	ja     c010b592 <printnum+0xc7>
        printnum(putch, putdat, result, base, width - 1, padc);
c010b55b:	8b 45 1c             	mov    0x1c(%ebp),%eax
c010b55e:	83 e8 01             	sub    $0x1,%eax
c010b561:	83 ec 04             	sub    $0x4,%esp
c010b564:	ff 75 20             	pushl  0x20(%ebp)
c010b567:	50                   	push   %eax
c010b568:	ff 75 18             	pushl  0x18(%ebp)
c010b56b:	ff 75 ec             	pushl  -0x14(%ebp)
c010b56e:	ff 75 e8             	pushl  -0x18(%ebp)
c010b571:	ff 75 0c             	pushl  0xc(%ebp)
c010b574:	ff 75 08             	pushl  0x8(%ebp)
c010b577:	e8 4f ff ff ff       	call   c010b4cb <printnum>
c010b57c:	83 c4 20             	add    $0x20,%esp
c010b57f:	eb 1b                	jmp    c010b59c <printnum+0xd1>
    } else {
        // print any needed pad characters before first digit
        while (-- width > 0)
            putch(padc, putdat);
c010b581:	83 ec 08             	sub    $0x8,%esp
c010b584:	ff 75 0c             	pushl  0xc(%ebp)
c010b587:	ff 75 20             	pushl  0x20(%ebp)
c010b58a:	8b 45 08             	mov    0x8(%ebp),%eax
c010b58d:	ff d0                	call   *%eax
c010b58f:	83 c4 10             	add    $0x10,%esp
    // first recursively print all preceding (more significant) digits
    if (num >= base) {
        printnum(putch, putdat, result, base, width - 1, padc);
    } else {
        // print any needed pad characters before first digit
        while (-- width > 0)
c010b592:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
c010b596:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c010b59a:	7f e5                	jg     c010b581 <printnum+0xb6>
            putch(padc, putdat);
    }
    // then print this (the least significant) digit
    putch("0123456789abcdef"[mod], putdat);
c010b59c:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b59f:	05 e4 e4 10 c0       	add    $0xc010e4e4,%eax
c010b5a4:	0f b6 00             	movzbl (%eax),%eax
c010b5a7:	0f be c0             	movsbl %al,%eax
c010b5aa:	83 ec 08             	sub    $0x8,%esp
c010b5ad:	ff 75 0c             	pushl  0xc(%ebp)
c010b5b0:	50                   	push   %eax
c010b5b1:	8b 45 08             	mov    0x8(%ebp),%eax
c010b5b4:	ff d0                	call   *%eax
c010b5b6:	83 c4 10             	add    $0x10,%esp
}
c010b5b9:	90                   	nop
c010b5ba:	c9                   	leave  
c010b5bb:	c3                   	ret    

c010b5bc <getuint>:
 * getuint - get an unsigned int of various possible sizes from a varargs list
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static unsigned long long
getuint(va_list *ap, int lflag) {
c010b5bc:	55                   	push   %ebp
c010b5bd:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c010b5bf:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c010b5c3:	7e 14                	jle    c010b5d9 <getuint+0x1d>
        return va_arg(*ap, unsigned long long);
c010b5c5:	8b 45 08             	mov    0x8(%ebp),%eax
c010b5c8:	8b 00                	mov    (%eax),%eax
c010b5ca:	8d 48 08             	lea    0x8(%eax),%ecx
c010b5cd:	8b 55 08             	mov    0x8(%ebp),%edx
c010b5d0:	89 0a                	mov    %ecx,(%edx)
c010b5d2:	8b 50 04             	mov    0x4(%eax),%edx
c010b5d5:	8b 00                	mov    (%eax),%eax
c010b5d7:	eb 30                	jmp    c010b609 <getuint+0x4d>
    }
    else if (lflag) {
c010b5d9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010b5dd:	74 16                	je     c010b5f5 <getuint+0x39>
        return va_arg(*ap, unsigned long);
c010b5df:	8b 45 08             	mov    0x8(%ebp),%eax
c010b5e2:	8b 00                	mov    (%eax),%eax
c010b5e4:	8d 48 04             	lea    0x4(%eax),%ecx
c010b5e7:	8b 55 08             	mov    0x8(%ebp),%edx
c010b5ea:	89 0a                	mov    %ecx,(%edx)
c010b5ec:	8b 00                	mov    (%eax),%eax
c010b5ee:	ba 00 00 00 00       	mov    $0x0,%edx
c010b5f3:	eb 14                	jmp    c010b609 <getuint+0x4d>
    }
    else {
        return va_arg(*ap, unsigned int);
c010b5f5:	8b 45 08             	mov    0x8(%ebp),%eax
c010b5f8:	8b 00                	mov    (%eax),%eax
c010b5fa:	8d 48 04             	lea    0x4(%eax),%ecx
c010b5fd:	8b 55 08             	mov    0x8(%ebp),%edx
c010b600:	89 0a                	mov    %ecx,(%edx)
c010b602:	8b 00                	mov    (%eax),%eax
c010b604:	ba 00 00 00 00       	mov    $0x0,%edx
    }
}
c010b609:	5d                   	pop    %ebp
c010b60a:	c3                   	ret    

c010b60b <getint>:
 * getint - same as getuint but signed, we can't use getuint because of sign extension
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static long long
getint(va_list *ap, int lflag) {
c010b60b:	55                   	push   %ebp
c010b60c:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c010b60e:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c010b612:	7e 14                	jle    c010b628 <getint+0x1d>
        return va_arg(*ap, long long);
c010b614:	8b 45 08             	mov    0x8(%ebp),%eax
c010b617:	8b 00                	mov    (%eax),%eax
c010b619:	8d 48 08             	lea    0x8(%eax),%ecx
c010b61c:	8b 55 08             	mov    0x8(%ebp),%edx
c010b61f:	89 0a                	mov    %ecx,(%edx)
c010b621:	8b 50 04             	mov    0x4(%eax),%edx
c010b624:	8b 00                	mov    (%eax),%eax
c010b626:	eb 28                	jmp    c010b650 <getint+0x45>
    }
    else if (lflag) {
c010b628:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010b62c:	74 12                	je     c010b640 <getint+0x35>
        return va_arg(*ap, long);
c010b62e:	8b 45 08             	mov    0x8(%ebp),%eax
c010b631:	8b 00                	mov    (%eax),%eax
c010b633:	8d 48 04             	lea    0x4(%eax),%ecx
c010b636:	8b 55 08             	mov    0x8(%ebp),%edx
c010b639:	89 0a                	mov    %ecx,(%edx)
c010b63b:	8b 00                	mov    (%eax),%eax
c010b63d:	99                   	cltd   
c010b63e:	eb 10                	jmp    c010b650 <getint+0x45>
    }
    else {
        return va_arg(*ap, int);
c010b640:	8b 45 08             	mov    0x8(%ebp),%eax
c010b643:	8b 00                	mov    (%eax),%eax
c010b645:	8d 48 04             	lea    0x4(%eax),%ecx
c010b648:	8b 55 08             	mov    0x8(%ebp),%edx
c010b64b:	89 0a                	mov    %ecx,(%edx)
c010b64d:	8b 00                	mov    (%eax),%eax
c010b64f:	99                   	cltd   
    }
}
c010b650:	5d                   	pop    %ebp
c010b651:	c3                   	ret    

c010b652 <printfmt>:
 * @putch:      specified putch function, print a single character
 * @putdat:     used by @putch function
 * @fmt:        the format string to use
 * */
void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
c010b652:	55                   	push   %ebp
c010b653:	89 e5                	mov    %esp,%ebp
c010b655:	83 ec 18             	sub    $0x18,%esp
    va_list ap;

    va_start(ap, fmt);
c010b658:	8d 45 14             	lea    0x14(%ebp),%eax
c010b65b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    vprintfmt(putch, putdat, fmt, ap);
c010b65e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b661:	50                   	push   %eax
c010b662:	ff 75 10             	pushl  0x10(%ebp)
c010b665:	ff 75 0c             	pushl  0xc(%ebp)
c010b668:	ff 75 08             	pushl  0x8(%ebp)
c010b66b:	e8 06 00 00 00       	call   c010b676 <vprintfmt>
c010b670:	83 c4 10             	add    $0x10,%esp
    va_end(ap);
}
c010b673:	90                   	nop
c010b674:	c9                   	leave  
c010b675:	c3                   	ret    

c010b676 <vprintfmt>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want printfmt() instead.
 * */
void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
c010b676:	55                   	push   %ebp
c010b677:	89 e5                	mov    %esp,%ebp
c010b679:	56                   	push   %esi
c010b67a:	53                   	push   %ebx
c010b67b:	83 ec 20             	sub    $0x20,%esp
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c010b67e:	eb 17                	jmp    c010b697 <vprintfmt+0x21>
            if (ch == '\0') {
c010b680:	85 db                	test   %ebx,%ebx
c010b682:	0f 84 8e 03 00 00    	je     c010ba16 <vprintfmt+0x3a0>
                return;
            }
            putch(ch, putdat);
c010b688:	83 ec 08             	sub    $0x8,%esp
c010b68b:	ff 75 0c             	pushl  0xc(%ebp)
c010b68e:	53                   	push   %ebx
c010b68f:	8b 45 08             	mov    0x8(%ebp),%eax
c010b692:	ff d0                	call   *%eax
c010b694:	83 c4 10             	add    $0x10,%esp
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c010b697:	8b 45 10             	mov    0x10(%ebp),%eax
c010b69a:	8d 50 01             	lea    0x1(%eax),%edx
c010b69d:	89 55 10             	mov    %edx,0x10(%ebp)
c010b6a0:	0f b6 00             	movzbl (%eax),%eax
c010b6a3:	0f b6 d8             	movzbl %al,%ebx
c010b6a6:	83 fb 25             	cmp    $0x25,%ebx
c010b6a9:	75 d5                	jne    c010b680 <vprintfmt+0xa>
            }
            putch(ch, putdat);
        }

        // Process a %-escape sequence
        char padc = ' ';
c010b6ab:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
        width = precision = -1;
c010b6af:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
c010b6b6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b6b9:	89 45 e8             	mov    %eax,-0x18(%ebp)
        lflag = altflag = 0;
c010b6bc:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c010b6c3:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b6c6:	89 45 e0             	mov    %eax,-0x20(%ebp)

    reswitch:
        switch (ch = *(unsigned char *)fmt ++) {
c010b6c9:	8b 45 10             	mov    0x10(%ebp),%eax
c010b6cc:	8d 50 01             	lea    0x1(%eax),%edx
c010b6cf:	89 55 10             	mov    %edx,0x10(%ebp)
c010b6d2:	0f b6 00             	movzbl (%eax),%eax
c010b6d5:	0f b6 d8             	movzbl %al,%ebx
c010b6d8:	8d 43 dd             	lea    -0x23(%ebx),%eax
c010b6db:	83 f8 55             	cmp    $0x55,%eax
c010b6de:	0f 87 05 03 00 00    	ja     c010b9e9 <vprintfmt+0x373>
c010b6e4:	8b 04 85 08 e5 10 c0 	mov    -0x3fef1af8(,%eax,4),%eax
c010b6eb:	ff e0                	jmp    *%eax

        // flag to pad on the right
        case '-':
            padc = '-';
c010b6ed:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
            goto reswitch;
c010b6f1:	eb d6                	jmp    c010b6c9 <vprintfmt+0x53>

        // flag to pad with 0's instead of spaces
        case '0':
            padc = '0';
c010b6f3:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
            goto reswitch;
c010b6f7:	eb d0                	jmp    c010b6c9 <vprintfmt+0x53>

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
c010b6f9:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
                precision = precision * 10 + ch - '0';
c010b700:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010b703:	89 d0                	mov    %edx,%eax
c010b705:	c1 e0 02             	shl    $0x2,%eax
c010b708:	01 d0                	add    %edx,%eax
c010b70a:	01 c0                	add    %eax,%eax
c010b70c:	01 d8                	add    %ebx,%eax
c010b70e:	83 e8 30             	sub    $0x30,%eax
c010b711:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                ch = *fmt;
c010b714:	8b 45 10             	mov    0x10(%ebp),%eax
c010b717:	0f b6 00             	movzbl (%eax),%eax
c010b71a:	0f be d8             	movsbl %al,%ebx
                if (ch < '0' || ch > '9') {
c010b71d:	83 fb 2f             	cmp    $0x2f,%ebx
c010b720:	7e 39                	jle    c010b75b <vprintfmt+0xe5>
c010b722:	83 fb 39             	cmp    $0x39,%ebx
c010b725:	7f 34                	jg     c010b75b <vprintfmt+0xe5>
            padc = '0';
            goto reswitch;

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
c010b727:	83 45 10 01          	addl   $0x1,0x10(%ebp)
                precision = precision * 10 + ch - '0';
                ch = *fmt;
                if (ch < '0' || ch > '9') {
                    break;
                }
            }
c010b72b:	eb d3                	jmp    c010b700 <vprintfmt+0x8a>
            goto process_precision;

        case '*':
            precision = va_arg(ap, int);
c010b72d:	8b 45 14             	mov    0x14(%ebp),%eax
c010b730:	8d 50 04             	lea    0x4(%eax),%edx
c010b733:	89 55 14             	mov    %edx,0x14(%ebp)
c010b736:	8b 00                	mov    (%eax),%eax
c010b738:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            goto process_precision;
c010b73b:	eb 1f                	jmp    c010b75c <vprintfmt+0xe6>

        case '.':
            if (width < 0)
c010b73d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010b741:	79 86                	jns    c010b6c9 <vprintfmt+0x53>
                width = 0;
c010b743:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
            goto reswitch;
c010b74a:	e9 7a ff ff ff       	jmp    c010b6c9 <vprintfmt+0x53>

        case '#':
            altflag = 1;
c010b74f:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
            goto reswitch;
c010b756:	e9 6e ff ff ff       	jmp    c010b6c9 <vprintfmt+0x53>
                ch = *fmt;
                if (ch < '0' || ch > '9') {
                    break;
                }
            }
            goto process_precision;
c010b75b:	90                   	nop
        case '#':
            altflag = 1;
            goto reswitch;

        process_precision:
            if (width < 0)
c010b75c:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010b760:	0f 89 63 ff ff ff    	jns    c010b6c9 <vprintfmt+0x53>
                width = precision, precision = -1;
c010b766:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b769:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010b76c:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
            goto reswitch;
c010b773:	e9 51 ff ff ff       	jmp    c010b6c9 <vprintfmt+0x53>

        // long flag (doubled for long long)
        case 'l':
            lflag ++;
c010b778:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
            goto reswitch;
c010b77c:	e9 48 ff ff ff       	jmp    c010b6c9 <vprintfmt+0x53>

        // character
        case 'c':
            putch(va_arg(ap, int), putdat);
c010b781:	8b 45 14             	mov    0x14(%ebp),%eax
c010b784:	8d 50 04             	lea    0x4(%eax),%edx
c010b787:	89 55 14             	mov    %edx,0x14(%ebp)
c010b78a:	8b 00                	mov    (%eax),%eax
c010b78c:	83 ec 08             	sub    $0x8,%esp
c010b78f:	ff 75 0c             	pushl  0xc(%ebp)
c010b792:	50                   	push   %eax
c010b793:	8b 45 08             	mov    0x8(%ebp),%eax
c010b796:	ff d0                	call   *%eax
c010b798:	83 c4 10             	add    $0x10,%esp
            break;
c010b79b:	e9 71 02 00 00       	jmp    c010ba11 <vprintfmt+0x39b>

        // error message
        case 'e':
            err = va_arg(ap, int);
c010b7a0:	8b 45 14             	mov    0x14(%ebp),%eax
c010b7a3:	8d 50 04             	lea    0x4(%eax),%edx
c010b7a6:	89 55 14             	mov    %edx,0x14(%ebp)
c010b7a9:	8b 18                	mov    (%eax),%ebx
            if (err < 0) {
c010b7ab:	85 db                	test   %ebx,%ebx
c010b7ad:	79 02                	jns    c010b7b1 <vprintfmt+0x13b>
                err = -err;
c010b7af:	f7 db                	neg    %ebx
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
c010b7b1:	83 fb 18             	cmp    $0x18,%ebx
c010b7b4:	7f 0b                	jg     c010b7c1 <vprintfmt+0x14b>
c010b7b6:	8b 34 9d 80 e4 10 c0 	mov    -0x3fef1b80(,%ebx,4),%esi
c010b7bd:	85 f6                	test   %esi,%esi
c010b7bf:	75 19                	jne    c010b7da <vprintfmt+0x164>
                printfmt(putch, putdat, "error %d", err);
c010b7c1:	53                   	push   %ebx
c010b7c2:	68 f5 e4 10 c0       	push   $0xc010e4f5
c010b7c7:	ff 75 0c             	pushl  0xc(%ebp)
c010b7ca:	ff 75 08             	pushl  0x8(%ebp)
c010b7cd:	e8 80 fe ff ff       	call   c010b652 <printfmt>
c010b7d2:	83 c4 10             	add    $0x10,%esp
            }
            else {
                printfmt(putch, putdat, "%s", p);
            }
            break;
c010b7d5:	e9 37 02 00 00       	jmp    c010ba11 <vprintfmt+0x39b>
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
                printfmt(putch, putdat, "error %d", err);
            }
            else {
                printfmt(putch, putdat, "%s", p);
c010b7da:	56                   	push   %esi
c010b7db:	68 fe e4 10 c0       	push   $0xc010e4fe
c010b7e0:	ff 75 0c             	pushl  0xc(%ebp)
c010b7e3:	ff 75 08             	pushl  0x8(%ebp)
c010b7e6:	e8 67 fe ff ff       	call   c010b652 <printfmt>
c010b7eb:	83 c4 10             	add    $0x10,%esp
            }
            break;
c010b7ee:	e9 1e 02 00 00       	jmp    c010ba11 <vprintfmt+0x39b>

        // string
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
c010b7f3:	8b 45 14             	mov    0x14(%ebp),%eax
c010b7f6:	8d 50 04             	lea    0x4(%eax),%edx
c010b7f9:	89 55 14             	mov    %edx,0x14(%ebp)
c010b7fc:	8b 30                	mov    (%eax),%esi
c010b7fe:	85 f6                	test   %esi,%esi
c010b800:	75 05                	jne    c010b807 <vprintfmt+0x191>
                p = "(null)";
c010b802:	be 01 e5 10 c0       	mov    $0xc010e501,%esi
            }
            if (width > 0 && padc != '-') {
c010b807:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010b80b:	7e 76                	jle    c010b883 <vprintfmt+0x20d>
c010b80d:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
c010b811:	74 70                	je     c010b883 <vprintfmt+0x20d>
                for (width -= strnlen(p, precision); width > 0; width --) {
c010b813:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b816:	83 ec 08             	sub    $0x8,%esp
c010b819:	50                   	push   %eax
c010b81a:	56                   	push   %esi
c010b81b:	e8 17 f8 ff ff       	call   c010b037 <strnlen>
c010b820:	83 c4 10             	add    $0x10,%esp
c010b823:	89 c2                	mov    %eax,%edx
c010b825:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b828:	29 d0                	sub    %edx,%eax
c010b82a:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010b82d:	eb 17                	jmp    c010b846 <vprintfmt+0x1d0>
                    putch(padc, putdat);
c010b82f:	0f be 45 db          	movsbl -0x25(%ebp),%eax
c010b833:	83 ec 08             	sub    $0x8,%esp
c010b836:	ff 75 0c             	pushl  0xc(%ebp)
c010b839:	50                   	push   %eax
c010b83a:	8b 45 08             	mov    0x8(%ebp),%eax
c010b83d:	ff d0                	call   *%eax
c010b83f:	83 c4 10             	add    $0x10,%esp
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
                p = "(null)";
            }
            if (width > 0 && padc != '-') {
                for (width -= strnlen(p, precision); width > 0; width --) {
c010b842:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c010b846:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010b84a:	7f e3                	jg     c010b82f <vprintfmt+0x1b9>
                    putch(padc, putdat);
                }
            }
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c010b84c:	eb 35                	jmp    c010b883 <vprintfmt+0x20d>
                if (altflag && (ch < ' ' || ch > '~')) {
c010b84e:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010b852:	74 1c                	je     c010b870 <vprintfmt+0x1fa>
c010b854:	83 fb 1f             	cmp    $0x1f,%ebx
c010b857:	7e 05                	jle    c010b85e <vprintfmt+0x1e8>
c010b859:	83 fb 7e             	cmp    $0x7e,%ebx
c010b85c:	7e 12                	jle    c010b870 <vprintfmt+0x1fa>
                    putch('?', putdat);
c010b85e:	83 ec 08             	sub    $0x8,%esp
c010b861:	ff 75 0c             	pushl  0xc(%ebp)
c010b864:	6a 3f                	push   $0x3f
c010b866:	8b 45 08             	mov    0x8(%ebp),%eax
c010b869:	ff d0                	call   *%eax
c010b86b:	83 c4 10             	add    $0x10,%esp
c010b86e:	eb 0f                	jmp    c010b87f <vprintfmt+0x209>
                }
                else {
                    putch(ch, putdat);
c010b870:	83 ec 08             	sub    $0x8,%esp
c010b873:	ff 75 0c             	pushl  0xc(%ebp)
c010b876:	53                   	push   %ebx
c010b877:	8b 45 08             	mov    0x8(%ebp),%eax
c010b87a:	ff d0                	call   *%eax
c010b87c:	83 c4 10             	add    $0x10,%esp
            if (width > 0 && padc != '-') {
                for (width -= strnlen(p, precision); width > 0; width --) {
                    putch(padc, putdat);
                }
            }
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c010b87f:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c010b883:	89 f0                	mov    %esi,%eax
c010b885:	8d 70 01             	lea    0x1(%eax),%esi
c010b888:	0f b6 00             	movzbl (%eax),%eax
c010b88b:	0f be d8             	movsbl %al,%ebx
c010b88e:	85 db                	test   %ebx,%ebx
c010b890:	74 26                	je     c010b8b8 <vprintfmt+0x242>
c010b892:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010b896:	78 b6                	js     c010b84e <vprintfmt+0x1d8>
c010b898:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
c010b89c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010b8a0:	79 ac                	jns    c010b84e <vprintfmt+0x1d8>
                }
                else {
                    putch(ch, putdat);
                }
            }
            for (; width > 0; width --) {
c010b8a2:	eb 14                	jmp    c010b8b8 <vprintfmt+0x242>
                putch(' ', putdat);
c010b8a4:	83 ec 08             	sub    $0x8,%esp
c010b8a7:	ff 75 0c             	pushl  0xc(%ebp)
c010b8aa:	6a 20                	push   $0x20
c010b8ac:	8b 45 08             	mov    0x8(%ebp),%eax
c010b8af:	ff d0                	call   *%eax
c010b8b1:	83 c4 10             	add    $0x10,%esp
                }
                else {
                    putch(ch, putdat);
                }
            }
            for (; width > 0; width --) {
c010b8b4:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c010b8b8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010b8bc:	7f e6                	jg     c010b8a4 <vprintfmt+0x22e>
                putch(' ', putdat);
            }
            break;
c010b8be:	e9 4e 01 00 00       	jmp    c010ba11 <vprintfmt+0x39b>

        // (signed) decimal
        case 'd':
            num = getint(&ap, lflag);
c010b8c3:	83 ec 08             	sub    $0x8,%esp
c010b8c6:	ff 75 e0             	pushl  -0x20(%ebp)
c010b8c9:	8d 45 14             	lea    0x14(%ebp),%eax
c010b8cc:	50                   	push   %eax
c010b8cd:	e8 39 fd ff ff       	call   c010b60b <getint>
c010b8d2:	83 c4 10             	add    $0x10,%esp
c010b8d5:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b8d8:	89 55 f4             	mov    %edx,-0xc(%ebp)
            if ((long long)num < 0) {
c010b8db:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b8de:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b8e1:	85 d2                	test   %edx,%edx
c010b8e3:	79 23                	jns    c010b908 <vprintfmt+0x292>
                putch('-', putdat);
c010b8e5:	83 ec 08             	sub    $0x8,%esp
c010b8e8:	ff 75 0c             	pushl  0xc(%ebp)
c010b8eb:	6a 2d                	push   $0x2d
c010b8ed:	8b 45 08             	mov    0x8(%ebp),%eax
c010b8f0:	ff d0                	call   *%eax
c010b8f2:	83 c4 10             	add    $0x10,%esp
                num = -(long long)num;
c010b8f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b8f8:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b8fb:	f7 d8                	neg    %eax
c010b8fd:	83 d2 00             	adc    $0x0,%edx
c010b900:	f7 da                	neg    %edx
c010b902:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b905:	89 55 f4             	mov    %edx,-0xc(%ebp)
            }
            base = 10;
c010b908:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c010b90f:	e9 9f 00 00 00       	jmp    c010b9b3 <vprintfmt+0x33d>

        // unsigned decimal
        case 'u':
            num = getuint(&ap, lflag);
c010b914:	83 ec 08             	sub    $0x8,%esp
c010b917:	ff 75 e0             	pushl  -0x20(%ebp)
c010b91a:	8d 45 14             	lea    0x14(%ebp),%eax
c010b91d:	50                   	push   %eax
c010b91e:	e8 99 fc ff ff       	call   c010b5bc <getuint>
c010b923:	83 c4 10             	add    $0x10,%esp
c010b926:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b929:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 10;
c010b92c:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c010b933:	eb 7e                	jmp    c010b9b3 <vprintfmt+0x33d>

        // (unsigned) octal
        case 'o':
            num = getuint(&ap, lflag);
c010b935:	83 ec 08             	sub    $0x8,%esp
c010b938:	ff 75 e0             	pushl  -0x20(%ebp)
c010b93b:	8d 45 14             	lea    0x14(%ebp),%eax
c010b93e:	50                   	push   %eax
c010b93f:	e8 78 fc ff ff       	call   c010b5bc <getuint>
c010b944:	83 c4 10             	add    $0x10,%esp
c010b947:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b94a:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 8;
c010b94d:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
            goto number;
c010b954:	eb 5d                	jmp    c010b9b3 <vprintfmt+0x33d>

        // pointer
        case 'p':
            putch('0', putdat);
c010b956:	83 ec 08             	sub    $0x8,%esp
c010b959:	ff 75 0c             	pushl  0xc(%ebp)
c010b95c:	6a 30                	push   $0x30
c010b95e:	8b 45 08             	mov    0x8(%ebp),%eax
c010b961:	ff d0                	call   *%eax
c010b963:	83 c4 10             	add    $0x10,%esp
            putch('x', putdat);
c010b966:	83 ec 08             	sub    $0x8,%esp
c010b969:	ff 75 0c             	pushl  0xc(%ebp)
c010b96c:	6a 78                	push   $0x78
c010b96e:	8b 45 08             	mov    0x8(%ebp),%eax
c010b971:	ff d0                	call   *%eax
c010b973:	83 c4 10             	add    $0x10,%esp
            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
c010b976:	8b 45 14             	mov    0x14(%ebp),%eax
c010b979:	8d 50 04             	lea    0x4(%eax),%edx
c010b97c:	89 55 14             	mov    %edx,0x14(%ebp)
c010b97f:	8b 00                	mov    (%eax),%eax
c010b981:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b984:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            base = 16;
c010b98b:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
            goto number;
c010b992:	eb 1f                	jmp    c010b9b3 <vprintfmt+0x33d>

        // (unsigned) hexadecimal
        case 'x':
            num = getuint(&ap, lflag);
c010b994:	83 ec 08             	sub    $0x8,%esp
c010b997:	ff 75 e0             	pushl  -0x20(%ebp)
c010b99a:	8d 45 14             	lea    0x14(%ebp),%eax
c010b99d:	50                   	push   %eax
c010b99e:	e8 19 fc ff ff       	call   c010b5bc <getuint>
c010b9a3:	83 c4 10             	add    $0x10,%esp
c010b9a6:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b9a9:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 16;
c010b9ac:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
        number:
            printnum(putch, putdat, num, base, width, padc);
c010b9b3:	0f be 55 db          	movsbl -0x25(%ebp),%edx
c010b9b7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b9ba:	83 ec 04             	sub    $0x4,%esp
c010b9bd:	52                   	push   %edx
c010b9be:	ff 75 e8             	pushl  -0x18(%ebp)
c010b9c1:	50                   	push   %eax
c010b9c2:	ff 75 f4             	pushl  -0xc(%ebp)
c010b9c5:	ff 75 f0             	pushl  -0x10(%ebp)
c010b9c8:	ff 75 0c             	pushl  0xc(%ebp)
c010b9cb:	ff 75 08             	pushl  0x8(%ebp)
c010b9ce:	e8 f8 fa ff ff       	call   c010b4cb <printnum>
c010b9d3:	83 c4 20             	add    $0x20,%esp
            break;
c010b9d6:	eb 39                	jmp    c010ba11 <vprintfmt+0x39b>

        // escaped '%' character
        case '%':
            putch(ch, putdat);
c010b9d8:	83 ec 08             	sub    $0x8,%esp
c010b9db:	ff 75 0c             	pushl  0xc(%ebp)
c010b9de:	53                   	push   %ebx
c010b9df:	8b 45 08             	mov    0x8(%ebp),%eax
c010b9e2:	ff d0                	call   *%eax
c010b9e4:	83 c4 10             	add    $0x10,%esp
            break;
c010b9e7:	eb 28                	jmp    c010ba11 <vprintfmt+0x39b>

        // unrecognized escape sequence - just print it literally
        default:
            putch('%', putdat);
c010b9e9:	83 ec 08             	sub    $0x8,%esp
c010b9ec:	ff 75 0c             	pushl  0xc(%ebp)
c010b9ef:	6a 25                	push   $0x25
c010b9f1:	8b 45 08             	mov    0x8(%ebp),%eax
c010b9f4:	ff d0                	call   *%eax
c010b9f6:	83 c4 10             	add    $0x10,%esp
            for (fmt --; fmt[-1] != '%'; fmt --)
c010b9f9:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c010b9fd:	eb 04                	jmp    c010ba03 <vprintfmt+0x38d>
c010b9ff:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c010ba03:	8b 45 10             	mov    0x10(%ebp),%eax
c010ba06:	83 e8 01             	sub    $0x1,%eax
c010ba09:	0f b6 00             	movzbl (%eax),%eax
c010ba0c:	3c 25                	cmp    $0x25,%al
c010ba0e:	75 ef                	jne    c010b9ff <vprintfmt+0x389>
                /* do nothing */;
            break;
c010ba10:	90                   	nop
        }
    }
c010ba11:	e9 68 fc ff ff       	jmp    c010b67e <vprintfmt+0x8>
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
            if (ch == '\0') {
                return;
c010ba16:	90                   	nop
            for (fmt --; fmt[-1] != '%'; fmt --)
                /* do nothing */;
            break;
        }
    }
}
c010ba17:	8d 65 f8             	lea    -0x8(%ebp),%esp
c010ba1a:	5b                   	pop    %ebx
c010ba1b:	5e                   	pop    %esi
c010ba1c:	5d                   	pop    %ebp
c010ba1d:	c3                   	ret    

c010ba1e <sprintputch>:
 * sprintputch - 'print' a single character in a buffer
 * @ch:         the character will be printed
 * @b:          the buffer to place the character @ch
 * */
static void
sprintputch(int ch, struct sprintbuf *b) {
c010ba1e:	55                   	push   %ebp
c010ba1f:	89 e5                	mov    %esp,%ebp
    b->cnt ++;
c010ba21:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ba24:	8b 40 08             	mov    0x8(%eax),%eax
c010ba27:	8d 50 01             	lea    0x1(%eax),%edx
c010ba2a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ba2d:	89 50 08             	mov    %edx,0x8(%eax)
    if (b->buf < b->ebuf) {
c010ba30:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ba33:	8b 10                	mov    (%eax),%edx
c010ba35:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ba38:	8b 40 04             	mov    0x4(%eax),%eax
c010ba3b:	39 c2                	cmp    %eax,%edx
c010ba3d:	73 12                	jae    c010ba51 <sprintputch+0x33>
        *b->buf ++ = ch;
c010ba3f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ba42:	8b 00                	mov    (%eax),%eax
c010ba44:	8d 48 01             	lea    0x1(%eax),%ecx
c010ba47:	8b 55 0c             	mov    0xc(%ebp),%edx
c010ba4a:	89 0a                	mov    %ecx,(%edx)
c010ba4c:	8b 55 08             	mov    0x8(%ebp),%edx
c010ba4f:	88 10                	mov    %dl,(%eax)
    }
}
c010ba51:	90                   	nop
c010ba52:	5d                   	pop    %ebp
c010ba53:	c3                   	ret    

c010ba54 <snprintf>:
 * @str:        the buffer to place the result into
 * @size:       the size of buffer, including the trailing null space
 * @fmt:        the format string to use
 * */
int
snprintf(char *str, size_t size, const char *fmt, ...) {
c010ba54:	55                   	push   %ebp
c010ba55:	89 e5                	mov    %esp,%ebp
c010ba57:	83 ec 18             	sub    $0x18,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c010ba5a:	8d 45 14             	lea    0x14(%ebp),%eax
c010ba5d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cnt = vsnprintf(str, size, fmt, ap);
c010ba60:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ba63:	50                   	push   %eax
c010ba64:	ff 75 10             	pushl  0x10(%ebp)
c010ba67:	ff 75 0c             	pushl  0xc(%ebp)
c010ba6a:	ff 75 08             	pushl  0x8(%ebp)
c010ba6d:	e8 0b 00 00 00       	call   c010ba7d <vsnprintf>
c010ba72:	83 c4 10             	add    $0x10,%esp
c010ba75:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c010ba78:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010ba7b:	c9                   	leave  
c010ba7c:	c3                   	ret    

c010ba7d <vsnprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want snprintf() instead.
 * */
int
vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
c010ba7d:	55                   	push   %ebp
c010ba7e:	89 e5                	mov    %esp,%ebp
c010ba80:	83 ec 18             	sub    $0x18,%esp
    struct sprintbuf b = {str, str + size - 1, 0};
c010ba83:	8b 45 08             	mov    0x8(%ebp),%eax
c010ba86:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010ba89:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ba8c:	8d 50 ff             	lea    -0x1(%eax),%edx
c010ba8f:	8b 45 08             	mov    0x8(%ebp),%eax
c010ba92:	01 d0                	add    %edx,%eax
c010ba94:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010ba97:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if (str == NULL || b.buf > b.ebuf) {
c010ba9e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010baa2:	74 0a                	je     c010baae <vsnprintf+0x31>
c010baa4:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010baa7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010baaa:	39 c2                	cmp    %eax,%edx
c010baac:	76 07                	jbe    c010bab5 <vsnprintf+0x38>
        return -E_INVAL;
c010baae:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010bab3:	eb 20                	jmp    c010bad5 <vsnprintf+0x58>
    }
    // print the string to the buffer
    vprintfmt((void*)sprintputch, &b, fmt, ap);
c010bab5:	ff 75 14             	pushl  0x14(%ebp)
c010bab8:	ff 75 10             	pushl  0x10(%ebp)
c010babb:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010babe:	50                   	push   %eax
c010babf:	68 1e ba 10 c0       	push   $0xc010ba1e
c010bac4:	e8 ad fb ff ff       	call   c010b676 <vprintfmt>
c010bac9:	83 c4 10             	add    $0x10,%esp
    // null terminate the buffer
    *b.buf = '\0';
c010bacc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bacf:	c6 00 00             	movb   $0x0,(%eax)
    return b.cnt;
c010bad2:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010bad5:	c9                   	leave  
c010bad6:	c3                   	ret    

c010bad7 <hash32>:
 * @bits:   the number of bits in a return value
 *
 * High bits are more random, so we use them.
 * */
uint32_t
hash32(uint32_t val, unsigned int bits) {
c010bad7:	55                   	push   %ebp
c010bad8:	89 e5                	mov    %esp,%ebp
c010bada:	83 ec 10             	sub    $0x10,%esp
    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
c010badd:	8b 45 08             	mov    0x8(%ebp),%eax
c010bae0:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
c010bae6:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return (hash >> (32 - bits));
c010bae9:	b8 20 00 00 00       	mov    $0x20,%eax
c010baee:	2b 45 0c             	sub    0xc(%ebp),%eax
c010baf1:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010baf4:	89 c1                	mov    %eax,%ecx
c010baf6:	d3 ea                	shr    %cl,%edx
c010baf8:	89 d0                	mov    %edx,%eax
}
c010bafa:	c9                   	leave  
c010bafb:	c3                   	ret    

c010bafc <rand>:
 * rand - returns a pseudo-random integer
 *
 * The rand() function return a value in the range [0, RAND_MAX].
 * */
int
rand(void) {
c010bafc:	55                   	push   %ebp
c010bafd:	89 e5                	mov    %esp,%ebp
c010baff:	57                   	push   %edi
c010bb00:	56                   	push   %esi
c010bb01:	53                   	push   %ebx
c010bb02:	83 ec 24             	sub    $0x24,%esp
    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
c010bb05:	a1 40 bb 12 c0       	mov    0xc012bb40,%eax
c010bb0a:	8b 15 44 bb 12 c0    	mov    0xc012bb44,%edx
c010bb10:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
c010bb16:	6b f0 05             	imul   $0x5,%eax,%esi
c010bb19:	01 fe                	add    %edi,%esi
c010bb1b:	bf 6d e6 ec de       	mov    $0xdeece66d,%edi
c010bb20:	f7 e7                	mul    %edi
c010bb22:	01 d6                	add    %edx,%esi
c010bb24:	89 f2                	mov    %esi,%edx
c010bb26:	83 c0 0b             	add    $0xb,%eax
c010bb29:	83 d2 00             	adc    $0x0,%edx
c010bb2c:	89 c7                	mov    %eax,%edi
c010bb2e:	83 e7 ff             	and    $0xffffffff,%edi
c010bb31:	89 f9                	mov    %edi,%ecx
c010bb33:	0f b7 da             	movzwl %dx,%ebx
c010bb36:	89 0d 40 bb 12 c0    	mov    %ecx,0xc012bb40
c010bb3c:	89 1d 44 bb 12 c0    	mov    %ebx,0xc012bb44
    unsigned long long result = (next >> 12);
c010bb42:	a1 40 bb 12 c0       	mov    0xc012bb40,%eax
c010bb47:	8b 15 44 bb 12 c0    	mov    0xc012bb44,%edx
c010bb4d:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c010bb51:	c1 ea 0c             	shr    $0xc,%edx
c010bb54:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010bb57:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    return (int)do_div(result, RAND_MAX + 1);
c010bb5a:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
c010bb61:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010bb64:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010bb67:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010bb6a:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010bb6d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010bb70:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010bb73:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010bb77:	74 1c                	je     c010bb95 <rand+0x99>
c010bb79:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010bb7c:	ba 00 00 00 00       	mov    $0x0,%edx
c010bb81:	f7 75 dc             	divl   -0x24(%ebp)
c010bb84:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010bb87:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010bb8a:	ba 00 00 00 00       	mov    $0x0,%edx
c010bb8f:	f7 75 dc             	divl   -0x24(%ebp)
c010bb92:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010bb95:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010bb98:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010bb9b:	f7 75 dc             	divl   -0x24(%ebp)
c010bb9e:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010bba1:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010bba4:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010bba7:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010bbaa:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010bbad:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c010bbb0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
}
c010bbb3:	83 c4 24             	add    $0x24,%esp
c010bbb6:	5b                   	pop    %ebx
c010bbb7:	5e                   	pop    %esi
c010bbb8:	5f                   	pop    %edi
c010bbb9:	5d                   	pop    %ebp
c010bbba:	c3                   	ret    

c010bbbb <srand>:
/* *
 * srand - seed the random number generator with the given number
 * @seed:   the required seed number
 * */
void
srand(unsigned int seed) {
c010bbbb:	55                   	push   %ebp
c010bbbc:	89 e5                	mov    %esp,%ebp
    next = seed;
c010bbbe:	8b 45 08             	mov    0x8(%ebp),%eax
c010bbc1:	ba 00 00 00 00       	mov    $0x0,%edx
c010bbc6:	a3 40 bb 12 c0       	mov    %eax,0xc012bb40
c010bbcb:	89 15 44 bb 12 c0    	mov    %edx,0xc012bb44
}
c010bbd1:	90                   	nop
c010bbd2:	5d                   	pop    %ebp
c010bbd3:	c3                   	ret    

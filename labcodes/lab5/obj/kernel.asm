
bin/kernel:     file format elf32-i386


Disassembly of section .text:

c0100000 <kern_entry>:

.text
.globl kern_entry
kern_entry:
    # load pa of boot pgdir
    movl $REALLOC(__boot_pgdir), %eax
c0100000:	b8 00 d0 19 00       	mov    $0x19d000,%eax
    movl %eax, %cr3
c0100005:	0f 22 d8             	mov    %eax,%cr3

    # enable paging
    movl %cr0, %eax
c0100008:	0f 20 c0             	mov    %cr0,%eax
    orl $(CR0_PE | CR0_PG | CR0_AM | CR0_WP | CR0_NE | CR0_TS | CR0_EM | CR0_MP), %eax
c010000b:	0d 2f 00 05 80       	or     $0x8005002f,%eax
    andl $~(CR0_TS | CR0_EM), %eax
c0100010:	83 e0 f3             	and    $0xfffffff3,%eax
    movl %eax, %cr0
c0100013:	0f 22 c0             	mov    %eax,%cr0

    # update eip
    # now, eip = 0x1.....
    leal next, %eax
c0100016:	8d 05 1e 00 10 c0    	lea    0xc010001e,%eax
    # set eip = KERNBASE + 0x1.....
    jmp *%eax
c010001c:	ff e0                	jmp    *%eax

c010001e <next>:
next:

    # unmap va 0 ~ 4M, it's temporary mapping
    xorl %eax, %eax
c010001e:	31 c0                	xor    %eax,%eax
    movl %eax, __boot_pgdir
c0100020:	a3 00 d0 19 c0       	mov    %eax,0xc019d000

    # set ebp, esp
    movl $0x0, %ebp
c0100025:	bd 00 00 00 00       	mov    $0x0,%ebp
    # the kernel stack region is from bootstack -- bootstacktop,
    # the kernel stack size is KSTACKSIZE (8KB)defined in memlayout.h
    movl $bootstacktop, %esp
c010002a:	bc 00 b0 12 c0       	mov    $0xc012b000,%esp
    # now kernel stack is ready , call the first C function
    call kern_init
c010002f:	e8 02 00 00 00       	call   c0100036 <kern_init>

c0100034 <spin>:

# should never get here
spin:
    jmp spin
c0100034:	eb fe                	jmp    c0100034 <spin>

c0100036 <kern_init>:
int kern_init(void) __attribute__((noreturn));
void grade_backtrace(void);
static void lab1_switch_test(void);

int
kern_init(void) {
c0100036:	55                   	push   %ebp
c0100037:	89 e5                	mov    %esp,%ebp
c0100039:	83 ec 18             	sub    $0x18,%esp
    extern char edata[], end[];
    memset(edata, 0, end - edata);
c010003c:	ba a4 21 1a c0       	mov    $0xc01a21a4,%edx
c0100041:	b8 00 f0 19 c0       	mov    $0xc019f000,%eax
c0100046:	29 c2                	sub    %eax,%edx
c0100048:	89 d0                	mov    %edx,%eax
c010004a:	83 ec 04             	sub    $0x4,%esp
c010004d:	50                   	push   %eax
c010004e:	6a 00                	push   $0x0
c0100050:	68 00 f0 19 c0       	push   $0xc019f000
c0100055:	e8 cd b1 00 00       	call   c010b227 <memset>
c010005a:	83 c4 10             	add    $0x10,%esp

    cons_init();                // init the console
c010005d:	e8 9f 1e 00 00       	call   c0101f01 <cons_init>

    const char *message = "(THU.CST) os is loading ...";
c0100062:	c7 45 f4 c0 ba 10 c0 	movl   $0xc010bac0,-0xc(%ebp)
    cprintf("%s\n\n", message);
c0100069:	83 ec 08             	sub    $0x8,%esp
c010006c:	ff 75 f4             	pushl  -0xc(%ebp)
c010006f:	68 dc ba 10 c0       	push   $0xc010badc
c0100074:	e8 19 02 00 00       	call   c0100292 <cprintf>
c0100079:	83 c4 10             	add    $0x10,%esp

    print_kerninfo();
c010007c:	e8 87 09 00 00       	call   c0100a08 <print_kerninfo>

    grade_backtrace();
c0100081:	e8 8b 00 00 00       	call   c0100111 <grade_backtrace>

    pmm_init();                 // init physical memory management
c0100086:	e8 6f 7c 00 00       	call   c0107cfa <pmm_init>

    pic_init();                 // init interrupt controller
c010008b:	e8 e3 1f 00 00       	call   c0102073 <pic_init>
    idt_init();                 // init interrupt descriptor table
c0100090:	e8 65 21 00 00       	call   c01021fa <idt_init>

    vmm_init();                 // init virtual memory management
c0100095:	e8 67 43 00 00       	call   c0104401 <vmm_init>
    proc_init();                // init process table
c010009a:	e8 3a a9 00 00       	call   c010a9d9 <proc_init>
    
    ide_init();                 // init ide devices
c010009f:	e8 2c 0e 00 00       	call   c0100ed0 <ide_init>
    swap_init();                // init swap
c01000a4:	e8 76 59 00 00       	call   c0105a1f <swap_init>

    clock_init();               // init clock interrupt
c01000a9:	e8 fa 15 00 00       	call   c01016a8 <clock_init>
    intr_enable();              // enable irq interrupt
c01000ae:	e8 fd 20 00 00       	call   c01021b0 <intr_enable>

    //LAB1: CAHLLENGE 1 If you try to do it, uncomment lab1_switch_test()
    // user/kernel mode switch test
    //lab1_switch_test();
    
    cpu_idle();                 // run idle process
c01000b3:	e8 be aa 00 00       	call   c010ab76 <cpu_idle>

c01000b8 <grade_backtrace2>:
}

void __attribute__((noinline))
grade_backtrace2(int arg0, int arg1, int arg2, int arg3) {
c01000b8:	55                   	push   %ebp
c01000b9:	89 e5                	mov    %esp,%ebp
c01000bb:	83 ec 08             	sub    $0x8,%esp
    mon_backtrace(0, NULL, NULL);
c01000be:	83 ec 04             	sub    $0x4,%esp
c01000c1:	6a 00                	push   $0x0
c01000c3:	6a 00                	push   $0x0
c01000c5:	6a 00                	push   $0x0
c01000c7:	e8 98 0d 00 00       	call   c0100e64 <mon_backtrace>
c01000cc:	83 c4 10             	add    $0x10,%esp
}
c01000cf:	90                   	nop
c01000d0:	c9                   	leave  
c01000d1:	c3                   	ret    

c01000d2 <grade_backtrace1>:

void __attribute__((noinline))
grade_backtrace1(int arg0, int arg1) {
c01000d2:	55                   	push   %ebp
c01000d3:	89 e5                	mov    %esp,%ebp
c01000d5:	53                   	push   %ebx
c01000d6:	83 ec 04             	sub    $0x4,%esp
    grade_backtrace2(arg0, (int)&arg0, arg1, (int)&arg1);
c01000d9:	8d 4d 0c             	lea    0xc(%ebp),%ecx
c01000dc:	8b 55 0c             	mov    0xc(%ebp),%edx
c01000df:	8d 5d 08             	lea    0x8(%ebp),%ebx
c01000e2:	8b 45 08             	mov    0x8(%ebp),%eax
c01000e5:	51                   	push   %ecx
c01000e6:	52                   	push   %edx
c01000e7:	53                   	push   %ebx
c01000e8:	50                   	push   %eax
c01000e9:	e8 ca ff ff ff       	call   c01000b8 <grade_backtrace2>
c01000ee:	83 c4 10             	add    $0x10,%esp
}
c01000f1:	90                   	nop
c01000f2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c01000f5:	c9                   	leave  
c01000f6:	c3                   	ret    

c01000f7 <grade_backtrace0>:

void __attribute__((noinline))
grade_backtrace0(int arg0, int arg1, int arg2) {
c01000f7:	55                   	push   %ebp
c01000f8:	89 e5                	mov    %esp,%ebp
c01000fa:	83 ec 08             	sub    $0x8,%esp
    grade_backtrace1(arg0, arg2);
c01000fd:	83 ec 08             	sub    $0x8,%esp
c0100100:	ff 75 10             	pushl  0x10(%ebp)
c0100103:	ff 75 08             	pushl  0x8(%ebp)
c0100106:	e8 c7 ff ff ff       	call   c01000d2 <grade_backtrace1>
c010010b:	83 c4 10             	add    $0x10,%esp
}
c010010e:	90                   	nop
c010010f:	c9                   	leave  
c0100110:	c3                   	ret    

c0100111 <grade_backtrace>:

void
grade_backtrace(void) {
c0100111:	55                   	push   %ebp
c0100112:	89 e5                	mov    %esp,%ebp
c0100114:	83 ec 08             	sub    $0x8,%esp
    grade_backtrace0(0, (int)kern_init, 0xffff0000);
c0100117:	b8 36 00 10 c0       	mov    $0xc0100036,%eax
c010011c:	83 ec 04             	sub    $0x4,%esp
c010011f:	68 00 00 ff ff       	push   $0xffff0000
c0100124:	50                   	push   %eax
c0100125:	6a 00                	push   $0x0
c0100127:	e8 cb ff ff ff       	call   c01000f7 <grade_backtrace0>
c010012c:	83 c4 10             	add    $0x10,%esp
}
c010012f:	90                   	nop
c0100130:	c9                   	leave  
c0100131:	c3                   	ret    

c0100132 <lab1_print_cur_status>:

static void
lab1_print_cur_status(void) {
c0100132:	55                   	push   %ebp
c0100133:	89 e5                	mov    %esp,%ebp
c0100135:	83 ec 18             	sub    $0x18,%esp
    static int round = 0;
    uint16_t reg1, reg2, reg3, reg4;
    asm volatile (
c0100138:	8c 4d f6             	mov    %cs,-0xa(%ebp)
c010013b:	8c 5d f4             	mov    %ds,-0xc(%ebp)
c010013e:	8c 45 f2             	mov    %es,-0xe(%ebp)
c0100141:	8c 55 f0             	mov    %ss,-0x10(%ebp)
            "mov %%cs, %0;"
            "mov %%ds, %1;"
            "mov %%es, %2;"
            "mov %%ss, %3;"
            : "=m"(reg1), "=m"(reg2), "=m"(reg3), "=m"(reg4));
    cprintf("%d: @ring %d\n", round, reg1 & 3);
c0100144:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100148:	0f b7 c0             	movzwl %ax,%eax
c010014b:	83 e0 03             	and    $0x3,%eax
c010014e:	89 c2                	mov    %eax,%edx
c0100150:	a1 00 f0 19 c0       	mov    0xc019f000,%eax
c0100155:	83 ec 04             	sub    $0x4,%esp
c0100158:	52                   	push   %edx
c0100159:	50                   	push   %eax
c010015a:	68 e1 ba 10 c0       	push   $0xc010bae1
c010015f:	e8 2e 01 00 00       	call   c0100292 <cprintf>
c0100164:	83 c4 10             	add    $0x10,%esp
    cprintf("%d:  cs = %x\n", round, reg1);
c0100167:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010016b:	0f b7 d0             	movzwl %ax,%edx
c010016e:	a1 00 f0 19 c0       	mov    0xc019f000,%eax
c0100173:	83 ec 04             	sub    $0x4,%esp
c0100176:	52                   	push   %edx
c0100177:	50                   	push   %eax
c0100178:	68 ef ba 10 c0       	push   $0xc010baef
c010017d:	e8 10 01 00 00       	call   c0100292 <cprintf>
c0100182:	83 c4 10             	add    $0x10,%esp
    cprintf("%d:  ds = %x\n", round, reg2);
c0100185:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c0100189:	0f b7 d0             	movzwl %ax,%edx
c010018c:	a1 00 f0 19 c0       	mov    0xc019f000,%eax
c0100191:	83 ec 04             	sub    $0x4,%esp
c0100194:	52                   	push   %edx
c0100195:	50                   	push   %eax
c0100196:	68 fd ba 10 c0       	push   $0xc010bafd
c010019b:	e8 f2 00 00 00       	call   c0100292 <cprintf>
c01001a0:	83 c4 10             	add    $0x10,%esp
    cprintf("%d:  es = %x\n", round, reg3);
c01001a3:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01001a7:	0f b7 d0             	movzwl %ax,%edx
c01001aa:	a1 00 f0 19 c0       	mov    0xc019f000,%eax
c01001af:	83 ec 04             	sub    $0x4,%esp
c01001b2:	52                   	push   %edx
c01001b3:	50                   	push   %eax
c01001b4:	68 0b bb 10 c0       	push   $0xc010bb0b
c01001b9:	e8 d4 00 00 00       	call   c0100292 <cprintf>
c01001be:	83 c4 10             	add    $0x10,%esp
    cprintf("%d:  ss = %x\n", round, reg4);
c01001c1:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c01001c5:	0f b7 d0             	movzwl %ax,%edx
c01001c8:	a1 00 f0 19 c0       	mov    0xc019f000,%eax
c01001cd:	83 ec 04             	sub    $0x4,%esp
c01001d0:	52                   	push   %edx
c01001d1:	50                   	push   %eax
c01001d2:	68 19 bb 10 c0       	push   $0xc010bb19
c01001d7:	e8 b6 00 00 00       	call   c0100292 <cprintf>
c01001dc:	83 c4 10             	add    $0x10,%esp
    round ++;
c01001df:	a1 00 f0 19 c0       	mov    0xc019f000,%eax
c01001e4:	83 c0 01             	add    $0x1,%eax
c01001e7:	a3 00 f0 19 c0       	mov    %eax,0xc019f000
}
c01001ec:	90                   	nop
c01001ed:	c9                   	leave  
c01001ee:	c3                   	ret    

c01001ef <lab1_switch_to_user>:

static void
lab1_switch_to_user(void) {
c01001ef:	55                   	push   %ebp
c01001f0:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 : TODO
    asm volatile (
c01001f2:	cd 78                	int    $0x78
c01001f4:	89 ec                	mov    %ebp,%esp
	    "int %0;"
        "movl %%ebp, %%esp"
	    : 
	    : "i"(T_SWITCH_TOU)
	);
}
c01001f6:	90                   	nop
c01001f7:	5d                   	pop    %ebp
c01001f8:	c3                   	ret    

c01001f9 <lab1_switch_to_kernel>:

static void
lab1_switch_to_kernel(void) {
c01001f9:	55                   	push   %ebp
c01001fa:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 :  TODO
    // cprintf("in lab1_switch_to_kernel\n");
    asm volatile (
c01001fc:	cd 79                	int    $0x79
c01001fe:	89 ec                	mov    %ebp,%esp
	    "int %0;"
        "movl %%ebp, %%esp"
        : 
	    : "i"(T_SWITCH_TOK)
	);
}
c0100200:	90                   	nop
c0100201:	5d                   	pop    %ebp
c0100202:	c3                   	ret    

c0100203 <lab1_switch_test>:

static void
lab1_switch_test(void) {
c0100203:	55                   	push   %ebp
c0100204:	89 e5                	mov    %esp,%ebp
c0100206:	83 ec 08             	sub    $0x8,%esp
    lab1_print_cur_status();
c0100209:	e8 24 ff ff ff       	call   c0100132 <lab1_print_cur_status>
    cprintf("+++ switch to  user  mode +++\n");
c010020e:	83 ec 0c             	sub    $0xc,%esp
c0100211:	68 28 bb 10 c0       	push   $0xc010bb28
c0100216:	e8 77 00 00 00       	call   c0100292 <cprintf>
c010021b:	83 c4 10             	add    $0x10,%esp
    lab1_switch_to_user();
c010021e:	e8 cc ff ff ff       	call   c01001ef <lab1_switch_to_user>
    lab1_print_cur_status();
c0100223:	e8 0a ff ff ff       	call   c0100132 <lab1_print_cur_status>
    cprintf("+++ switch to kernel mode +++\n");
c0100228:	83 ec 0c             	sub    $0xc,%esp
c010022b:	68 48 bb 10 c0       	push   $0xc010bb48
c0100230:	e8 5d 00 00 00       	call   c0100292 <cprintf>
c0100235:	83 c4 10             	add    $0x10,%esp
    lab1_switch_to_kernel();
c0100238:	e8 bc ff ff ff       	call   c01001f9 <lab1_switch_to_kernel>
    lab1_print_cur_status();
c010023d:	e8 f0 fe ff ff       	call   c0100132 <lab1_print_cur_status>
}
c0100242:	90                   	nop
c0100243:	c9                   	leave  
c0100244:	c3                   	ret    

c0100245 <cputch>:
/* *
 * cputch - writes a single character @c to stdout, and it will
 * increace the value of counter pointed by @cnt.
 * */
static void
cputch(int c, int *cnt) {
c0100245:	55                   	push   %ebp
c0100246:	89 e5                	mov    %esp,%ebp
c0100248:	83 ec 08             	sub    $0x8,%esp
    cons_putc(c);
c010024b:	83 ec 0c             	sub    $0xc,%esp
c010024e:	ff 75 08             	pushl  0x8(%ebp)
c0100251:	e8 dc 1c 00 00       	call   c0101f32 <cons_putc>
c0100256:	83 c4 10             	add    $0x10,%esp
    (*cnt) ++;
c0100259:	8b 45 0c             	mov    0xc(%ebp),%eax
c010025c:	8b 00                	mov    (%eax),%eax
c010025e:	8d 50 01             	lea    0x1(%eax),%edx
c0100261:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100264:	89 10                	mov    %edx,(%eax)
}
c0100266:	90                   	nop
c0100267:	c9                   	leave  
c0100268:	c3                   	ret    

c0100269 <vcprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want cprintf() instead.
 * */
int
vcprintf(const char *fmt, va_list ap) {
c0100269:	55                   	push   %ebp
c010026a:	89 e5                	mov    %esp,%ebp
c010026c:	83 ec 18             	sub    $0x18,%esp
    int cnt = 0;
c010026f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    vprintfmt((void*)cputch, &cnt, fmt, ap);
c0100276:	ff 75 0c             	pushl  0xc(%ebp)
c0100279:	ff 75 08             	pushl  0x8(%ebp)
c010027c:	8d 45 f4             	lea    -0xc(%ebp),%eax
c010027f:	50                   	push   %eax
c0100280:	68 45 02 10 c0       	push   $0xc0100245
c0100285:	e8 d3 b2 00 00       	call   c010b55d <vprintfmt>
c010028a:	83 c4 10             	add    $0x10,%esp
    return cnt;
c010028d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100290:	c9                   	leave  
c0100291:	c3                   	ret    

c0100292 <cprintf>:
 *
 * The return value is the number of characters which would be
 * written to stdout.
 * */
int
cprintf(const char *fmt, ...) {
c0100292:	55                   	push   %ebp
c0100293:	89 e5                	mov    %esp,%ebp
c0100295:	83 ec 18             	sub    $0x18,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c0100298:	8d 45 0c             	lea    0xc(%ebp),%eax
c010029b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cnt = vcprintf(fmt, ap);
c010029e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002a1:	83 ec 08             	sub    $0x8,%esp
c01002a4:	50                   	push   %eax
c01002a5:	ff 75 08             	pushl  0x8(%ebp)
c01002a8:	e8 bc ff ff ff       	call   c0100269 <vcprintf>
c01002ad:	83 c4 10             	add    $0x10,%esp
c01002b0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c01002b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01002b6:	c9                   	leave  
c01002b7:	c3                   	ret    

c01002b8 <cputchar>:

/* cputchar - writes a single character to stdout */
void
cputchar(int c) {
c01002b8:	55                   	push   %ebp
c01002b9:	89 e5                	mov    %esp,%ebp
c01002bb:	83 ec 08             	sub    $0x8,%esp
    cons_putc(c);
c01002be:	83 ec 0c             	sub    $0xc,%esp
c01002c1:	ff 75 08             	pushl  0x8(%ebp)
c01002c4:	e8 69 1c 00 00       	call   c0101f32 <cons_putc>
c01002c9:	83 c4 10             	add    $0x10,%esp
}
c01002cc:	90                   	nop
c01002cd:	c9                   	leave  
c01002ce:	c3                   	ret    

c01002cf <cputs>:
/* *
 * cputs- writes the string pointed by @str to stdout and
 * appends a newline character.
 * */
int
cputs(const char *str) {
c01002cf:	55                   	push   %ebp
c01002d0:	89 e5                	mov    %esp,%ebp
c01002d2:	83 ec 18             	sub    $0x18,%esp
    int cnt = 0;
c01002d5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    char c;
    while ((c = *str ++) != '\0') {
c01002dc:	eb 14                	jmp    c01002f2 <cputs+0x23>
        cputch(c, &cnt);
c01002de:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
c01002e2:	83 ec 08             	sub    $0x8,%esp
c01002e5:	8d 55 f0             	lea    -0x10(%ebp),%edx
c01002e8:	52                   	push   %edx
c01002e9:	50                   	push   %eax
c01002ea:	e8 56 ff ff ff       	call   c0100245 <cputch>
c01002ef:	83 c4 10             	add    $0x10,%esp
 * */
int
cputs(const char *str) {
    int cnt = 0;
    char c;
    while ((c = *str ++) != '\0') {
c01002f2:	8b 45 08             	mov    0x8(%ebp),%eax
c01002f5:	8d 50 01             	lea    0x1(%eax),%edx
c01002f8:	89 55 08             	mov    %edx,0x8(%ebp)
c01002fb:	0f b6 00             	movzbl (%eax),%eax
c01002fe:	88 45 f7             	mov    %al,-0x9(%ebp)
c0100301:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
c0100305:	75 d7                	jne    c01002de <cputs+0xf>
        cputch(c, &cnt);
    }
    cputch('\n', &cnt);
c0100307:	83 ec 08             	sub    $0x8,%esp
c010030a:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010030d:	50                   	push   %eax
c010030e:	6a 0a                	push   $0xa
c0100310:	e8 30 ff ff ff       	call   c0100245 <cputch>
c0100315:	83 c4 10             	add    $0x10,%esp
    return cnt;
c0100318:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010031b:	c9                   	leave  
c010031c:	c3                   	ret    

c010031d <getchar>:

/* getchar - reads a single non-zero character from stdin */
int
getchar(void) {
c010031d:	55                   	push   %ebp
c010031e:	89 e5                	mov    %esp,%ebp
c0100320:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = cons_getc()) == 0)
c0100323:	e8 53 1c 00 00       	call   c0101f7b <cons_getc>
c0100328:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010032b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010032f:	74 f2                	je     c0100323 <getchar+0x6>
        /* do nothing */;
    return c;
c0100331:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100334:	c9                   	leave  
c0100335:	c3                   	ret    

c0100336 <readline>:
 * The readline() function returns the text of the line read. If some errors
 * are happened, NULL is returned. The return value is a global variable,
 * thus it should be copied before it is used.
 * */
char *
readline(const char *prompt) {
c0100336:	55                   	push   %ebp
c0100337:	89 e5                	mov    %esp,%ebp
c0100339:	83 ec 18             	sub    $0x18,%esp
    if (prompt != NULL) {
c010033c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0100340:	74 13                	je     c0100355 <readline+0x1f>
        cprintf("%s", prompt);
c0100342:	83 ec 08             	sub    $0x8,%esp
c0100345:	ff 75 08             	pushl  0x8(%ebp)
c0100348:	68 67 bb 10 c0       	push   $0xc010bb67
c010034d:	e8 40 ff ff ff       	call   c0100292 <cprintf>
c0100352:	83 c4 10             	add    $0x10,%esp
    }
    int i = 0, c;
c0100355:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        c = getchar();
c010035c:	e8 bc ff ff ff       	call   c010031d <getchar>
c0100361:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (c < 0) {
c0100364:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0100368:	79 0a                	jns    c0100374 <readline+0x3e>
            return NULL;
c010036a:	b8 00 00 00 00       	mov    $0x0,%eax
c010036f:	e9 82 00 00 00       	jmp    c01003f6 <readline+0xc0>
        }
        else if (c >= ' ' && i < BUFSIZE - 1) {
c0100374:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
c0100378:	7e 2b                	jle    c01003a5 <readline+0x6f>
c010037a:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
c0100381:	7f 22                	jg     c01003a5 <readline+0x6f>
            cputchar(c);
c0100383:	83 ec 0c             	sub    $0xc,%esp
c0100386:	ff 75 f0             	pushl  -0x10(%ebp)
c0100389:	e8 2a ff ff ff       	call   c01002b8 <cputchar>
c010038e:	83 c4 10             	add    $0x10,%esp
            buf[i ++] = c;
c0100391:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100394:	8d 50 01             	lea    0x1(%eax),%edx
c0100397:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010039a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010039d:	88 90 20 f0 19 c0    	mov    %dl,-0x3fe60fe0(%eax)
c01003a3:	eb 4c                	jmp    c01003f1 <readline+0xbb>
        }
        else if (c == '\b' && i > 0) {
c01003a5:	83 7d f0 08          	cmpl   $0x8,-0x10(%ebp)
c01003a9:	75 1a                	jne    c01003c5 <readline+0x8f>
c01003ab:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01003af:	7e 14                	jle    c01003c5 <readline+0x8f>
            cputchar(c);
c01003b1:	83 ec 0c             	sub    $0xc,%esp
c01003b4:	ff 75 f0             	pushl  -0x10(%ebp)
c01003b7:	e8 fc fe ff ff       	call   c01002b8 <cputchar>
c01003bc:	83 c4 10             	add    $0x10,%esp
            i --;
c01003bf:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c01003c3:	eb 2c                	jmp    c01003f1 <readline+0xbb>
        }
        else if (c == '\n' || c == '\r') {
c01003c5:	83 7d f0 0a          	cmpl   $0xa,-0x10(%ebp)
c01003c9:	74 06                	je     c01003d1 <readline+0x9b>
c01003cb:	83 7d f0 0d          	cmpl   $0xd,-0x10(%ebp)
c01003cf:	75 8b                	jne    c010035c <readline+0x26>
            cputchar(c);
c01003d1:	83 ec 0c             	sub    $0xc,%esp
c01003d4:	ff 75 f0             	pushl  -0x10(%ebp)
c01003d7:	e8 dc fe ff ff       	call   c01002b8 <cputchar>
c01003dc:	83 c4 10             	add    $0x10,%esp
            buf[i] = '\0';
c01003df:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01003e2:	05 20 f0 19 c0       	add    $0xc019f020,%eax
c01003e7:	c6 00 00             	movb   $0x0,(%eax)
            return buf;
c01003ea:	b8 20 f0 19 c0       	mov    $0xc019f020,%eax
c01003ef:	eb 05                	jmp    c01003f6 <readline+0xc0>
        }
    }
c01003f1:	e9 66 ff ff ff       	jmp    c010035c <readline+0x26>
}
c01003f6:	c9                   	leave  
c01003f7:	c3                   	ret    

c01003f8 <__panic>:
/* *
 * __panic - __panic is called on unresolvable fatal errors. it prints
 * "panic: 'message'", and then enters the kernel monitor.
 * */
void
__panic(const char *file, int line, const char *fmt, ...) {
c01003f8:	55                   	push   %ebp
c01003f9:	89 e5                	mov    %esp,%ebp
c01003fb:	83 ec 18             	sub    $0x18,%esp
    if (is_panic) {
c01003fe:	a1 20 f4 19 c0       	mov    0xc019f420,%eax
c0100403:	85 c0                	test   %eax,%eax
c0100405:	75 5f                	jne    c0100466 <__panic+0x6e>
        goto panic_dead;
    }
    is_panic = 1;
c0100407:	c7 05 20 f4 19 c0 01 	movl   $0x1,0xc019f420
c010040e:	00 00 00 

    // print the 'message'
    va_list ap;
    va_start(ap, fmt);
c0100411:	8d 45 14             	lea    0x14(%ebp),%eax
c0100414:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cprintf("kernel panic at %s:%d:\n    ", file, line);
c0100417:	83 ec 04             	sub    $0x4,%esp
c010041a:	ff 75 0c             	pushl  0xc(%ebp)
c010041d:	ff 75 08             	pushl  0x8(%ebp)
c0100420:	68 6a bb 10 c0       	push   $0xc010bb6a
c0100425:	e8 68 fe ff ff       	call   c0100292 <cprintf>
c010042a:	83 c4 10             	add    $0x10,%esp
    vcprintf(fmt, ap);
c010042d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100430:	83 ec 08             	sub    $0x8,%esp
c0100433:	50                   	push   %eax
c0100434:	ff 75 10             	pushl  0x10(%ebp)
c0100437:	e8 2d fe ff ff       	call   c0100269 <vcprintf>
c010043c:	83 c4 10             	add    $0x10,%esp
    cprintf("\n");
c010043f:	83 ec 0c             	sub    $0xc,%esp
c0100442:	68 86 bb 10 c0       	push   $0xc010bb86
c0100447:	e8 46 fe ff ff       	call   c0100292 <cprintf>
c010044c:	83 c4 10             	add    $0x10,%esp
    
    cprintf("stack trackback:\n");
c010044f:	83 ec 0c             	sub    $0xc,%esp
c0100452:	68 88 bb 10 c0       	push   $0xc010bb88
c0100457:	e8 36 fe ff ff       	call   c0100292 <cprintf>
c010045c:	83 c4 10             	add    $0x10,%esp
    print_stackframe();
c010045f:	e8 ee 06 00 00       	call   c0100b52 <print_stackframe>
c0100464:	eb 01                	jmp    c0100467 <__panic+0x6f>
 * "panic: 'message'", and then enters the kernel monitor.
 * */
void
__panic(const char *file, int line, const char *fmt, ...) {
    if (is_panic) {
        goto panic_dead;
c0100466:	90                   	nop
    print_stackframe();
    
    va_end(ap);

panic_dead:
    intr_disable();
c0100467:	e8 4b 1d 00 00       	call   c01021b7 <intr_disable>
    while (1) {
        kmonitor(NULL);
c010046c:	83 ec 0c             	sub    $0xc,%esp
c010046f:	6a 00                	push   $0x0
c0100471:	e8 14 09 00 00       	call   c0100d8a <kmonitor>
c0100476:	83 c4 10             	add    $0x10,%esp
    }
c0100479:	eb f1                	jmp    c010046c <__panic+0x74>

c010047b <__warn>:
}

/* __warn - like panic, but don't */
void
__warn(const char *file, int line, const char *fmt, ...) {
c010047b:	55                   	push   %ebp
c010047c:	89 e5                	mov    %esp,%ebp
c010047e:	83 ec 18             	sub    $0x18,%esp
    va_list ap;
    va_start(ap, fmt);
c0100481:	8d 45 14             	lea    0x14(%ebp),%eax
c0100484:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cprintf("kernel warning at %s:%d:\n    ", file, line);
c0100487:	83 ec 04             	sub    $0x4,%esp
c010048a:	ff 75 0c             	pushl  0xc(%ebp)
c010048d:	ff 75 08             	pushl  0x8(%ebp)
c0100490:	68 9a bb 10 c0       	push   $0xc010bb9a
c0100495:	e8 f8 fd ff ff       	call   c0100292 <cprintf>
c010049a:	83 c4 10             	add    $0x10,%esp
    vcprintf(fmt, ap);
c010049d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01004a0:	83 ec 08             	sub    $0x8,%esp
c01004a3:	50                   	push   %eax
c01004a4:	ff 75 10             	pushl  0x10(%ebp)
c01004a7:	e8 bd fd ff ff       	call   c0100269 <vcprintf>
c01004ac:	83 c4 10             	add    $0x10,%esp
    cprintf("\n");
c01004af:	83 ec 0c             	sub    $0xc,%esp
c01004b2:	68 86 bb 10 c0       	push   $0xc010bb86
c01004b7:	e8 d6 fd ff ff       	call   c0100292 <cprintf>
c01004bc:	83 c4 10             	add    $0x10,%esp
    va_end(ap);
}
c01004bf:	90                   	nop
c01004c0:	c9                   	leave  
c01004c1:	c3                   	ret    

c01004c2 <is_kernel_panic>:

bool
is_kernel_panic(void) {
c01004c2:	55                   	push   %ebp
c01004c3:	89 e5                	mov    %esp,%ebp
    return is_panic;
c01004c5:	a1 20 f4 19 c0       	mov    0xc019f420,%eax
}
c01004ca:	5d                   	pop    %ebp
c01004cb:	c3                   	ret    

c01004cc <stab_binsearch>:
 *      stab_binsearch(stabs, &left, &right, N_SO, 0xf0100184);
 * will exit setting left = 118, right = 554.
 * */
static void
stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
           int type, uintptr_t addr) {
c01004cc:	55                   	push   %ebp
c01004cd:	89 e5                	mov    %esp,%ebp
c01004cf:	83 ec 20             	sub    $0x20,%esp
    int l = *region_left, r = *region_right, any_matches = 0;
c01004d2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01004d5:	8b 00                	mov    (%eax),%eax
c01004d7:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01004da:	8b 45 10             	mov    0x10(%ebp),%eax
c01004dd:	8b 00                	mov    (%eax),%eax
c01004df:	89 45 f8             	mov    %eax,-0x8(%ebp)
c01004e2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    while (l <= r) {
c01004e9:	e9 d2 00 00 00       	jmp    c01005c0 <stab_binsearch+0xf4>
        int true_m = (l + r) / 2, m = true_m;
c01004ee:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01004f1:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01004f4:	01 d0                	add    %edx,%eax
c01004f6:	89 c2                	mov    %eax,%edx
c01004f8:	c1 ea 1f             	shr    $0x1f,%edx
c01004fb:	01 d0                	add    %edx,%eax
c01004fd:	d1 f8                	sar    %eax
c01004ff:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0100502:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100505:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // search for earliest stab with right type
        while (m >= l && stabs[m].n_type != type) {
c0100508:	eb 04                	jmp    c010050e <stab_binsearch+0x42>
            m --;
c010050a:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)

    while (l <= r) {
        int true_m = (l + r) / 2, m = true_m;

        // search for earliest stab with right type
        while (m >= l && stabs[m].n_type != type) {
c010050e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100511:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100514:	7c 1f                	jl     c0100535 <stab_binsearch+0x69>
c0100516:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100519:	89 d0                	mov    %edx,%eax
c010051b:	01 c0                	add    %eax,%eax
c010051d:	01 d0                	add    %edx,%eax
c010051f:	c1 e0 02             	shl    $0x2,%eax
c0100522:	89 c2                	mov    %eax,%edx
c0100524:	8b 45 08             	mov    0x8(%ebp),%eax
c0100527:	01 d0                	add    %edx,%eax
c0100529:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c010052d:	0f b6 c0             	movzbl %al,%eax
c0100530:	3b 45 14             	cmp    0x14(%ebp),%eax
c0100533:	75 d5                	jne    c010050a <stab_binsearch+0x3e>
            m --;
        }
        if (m < l) {    // no match in [l, m]
c0100535:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100538:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c010053b:	7d 0b                	jge    c0100548 <stab_binsearch+0x7c>
            l = true_m + 1;
c010053d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100540:	83 c0 01             	add    $0x1,%eax
c0100543:	89 45 fc             	mov    %eax,-0x4(%ebp)
            continue;
c0100546:	eb 78                	jmp    c01005c0 <stab_binsearch+0xf4>
        }

        // actual binary search
        any_matches = 1;
c0100548:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
        if (stabs[m].n_value < addr) {
c010054f:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100552:	89 d0                	mov    %edx,%eax
c0100554:	01 c0                	add    %eax,%eax
c0100556:	01 d0                	add    %edx,%eax
c0100558:	c1 e0 02             	shl    $0x2,%eax
c010055b:	89 c2                	mov    %eax,%edx
c010055d:	8b 45 08             	mov    0x8(%ebp),%eax
c0100560:	01 d0                	add    %edx,%eax
c0100562:	8b 40 08             	mov    0x8(%eax),%eax
c0100565:	3b 45 18             	cmp    0x18(%ebp),%eax
c0100568:	73 13                	jae    c010057d <stab_binsearch+0xb1>
            *region_left = m;
c010056a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010056d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100570:	89 10                	mov    %edx,(%eax)
            l = true_m + 1;
c0100572:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100575:	83 c0 01             	add    $0x1,%eax
c0100578:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010057b:	eb 43                	jmp    c01005c0 <stab_binsearch+0xf4>
        } else if (stabs[m].n_value > addr) {
c010057d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100580:	89 d0                	mov    %edx,%eax
c0100582:	01 c0                	add    %eax,%eax
c0100584:	01 d0                	add    %edx,%eax
c0100586:	c1 e0 02             	shl    $0x2,%eax
c0100589:	89 c2                	mov    %eax,%edx
c010058b:	8b 45 08             	mov    0x8(%ebp),%eax
c010058e:	01 d0                	add    %edx,%eax
c0100590:	8b 40 08             	mov    0x8(%eax),%eax
c0100593:	3b 45 18             	cmp    0x18(%ebp),%eax
c0100596:	76 16                	jbe    c01005ae <stab_binsearch+0xe2>
            *region_right = m - 1;
c0100598:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010059b:	8d 50 ff             	lea    -0x1(%eax),%edx
c010059e:	8b 45 10             	mov    0x10(%ebp),%eax
c01005a1:	89 10                	mov    %edx,(%eax)
            r = m - 1;
c01005a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01005a6:	83 e8 01             	sub    $0x1,%eax
c01005a9:	89 45 f8             	mov    %eax,-0x8(%ebp)
c01005ac:	eb 12                	jmp    c01005c0 <stab_binsearch+0xf4>
        } else {
            // exact match for 'addr', but continue loop to find
            // *region_right
            *region_left = m;
c01005ae:	8b 45 0c             	mov    0xc(%ebp),%eax
c01005b1:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01005b4:	89 10                	mov    %edx,(%eax)
            l = m;
c01005b6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01005b9:	89 45 fc             	mov    %eax,-0x4(%ebp)
            addr ++;
c01005bc:	83 45 18 01          	addl   $0x1,0x18(%ebp)
static void
stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
           int type, uintptr_t addr) {
    int l = *region_left, r = *region_right, any_matches = 0;

    while (l <= r) {
c01005c0:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01005c3:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c01005c6:	0f 8e 22 ff ff ff    	jle    c01004ee <stab_binsearch+0x22>
            l = m;
            addr ++;
        }
    }

    if (!any_matches) {
c01005cc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01005d0:	75 0f                	jne    c01005e1 <stab_binsearch+0x115>
        *region_right = *region_left - 1;
c01005d2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01005d5:	8b 00                	mov    (%eax),%eax
c01005d7:	8d 50 ff             	lea    -0x1(%eax),%edx
c01005da:	8b 45 10             	mov    0x10(%ebp),%eax
c01005dd:	89 10                	mov    %edx,(%eax)
        l = *region_right;
        for (; l > *region_left && stabs[l].n_type != type; l --)
            /* do nothing */;
        *region_left = l;
    }
}
c01005df:	eb 3f                	jmp    c0100620 <stab_binsearch+0x154>
    if (!any_matches) {
        *region_right = *region_left - 1;
    }
    else {
        // find rightmost region containing 'addr'
        l = *region_right;
c01005e1:	8b 45 10             	mov    0x10(%ebp),%eax
c01005e4:	8b 00                	mov    (%eax),%eax
c01005e6:	89 45 fc             	mov    %eax,-0x4(%ebp)
        for (; l > *region_left && stabs[l].n_type != type; l --)
c01005e9:	eb 04                	jmp    c01005ef <stab_binsearch+0x123>
c01005eb:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
c01005ef:	8b 45 0c             	mov    0xc(%ebp),%eax
c01005f2:	8b 00                	mov    (%eax),%eax
c01005f4:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c01005f7:	7d 1f                	jge    c0100618 <stab_binsearch+0x14c>
c01005f9:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01005fc:	89 d0                	mov    %edx,%eax
c01005fe:	01 c0                	add    %eax,%eax
c0100600:	01 d0                	add    %edx,%eax
c0100602:	c1 e0 02             	shl    $0x2,%eax
c0100605:	89 c2                	mov    %eax,%edx
c0100607:	8b 45 08             	mov    0x8(%ebp),%eax
c010060a:	01 d0                	add    %edx,%eax
c010060c:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100610:	0f b6 c0             	movzbl %al,%eax
c0100613:	3b 45 14             	cmp    0x14(%ebp),%eax
c0100616:	75 d3                	jne    c01005eb <stab_binsearch+0x11f>
            /* do nothing */;
        *region_left = l;
c0100618:	8b 45 0c             	mov    0xc(%ebp),%eax
c010061b:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010061e:	89 10                	mov    %edx,(%eax)
    }
}
c0100620:	90                   	nop
c0100621:	c9                   	leave  
c0100622:	c3                   	ret    

c0100623 <debuginfo_eip>:
 * the specified instruction address, @addr.  Returns 0 if information
 * was found, and negative if not.  But even if it returns negative it
 * has stored some information into '*info'.
 * */
int
debuginfo_eip(uintptr_t addr, struct eipdebuginfo *info) {
c0100623:	55                   	push   %ebp
c0100624:	89 e5                	mov    %esp,%ebp
c0100626:	83 ec 38             	sub    $0x38,%esp
    const struct stab *stabs, *stab_end;
    const char *stabstr, *stabstr_end;

    info->eip_file = "<unknown>";
c0100629:	8b 45 0c             	mov    0xc(%ebp),%eax
c010062c:	c7 00 b8 bb 10 c0    	movl   $0xc010bbb8,(%eax)
    info->eip_line = 0;
c0100632:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100635:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    info->eip_fn_name = "<unknown>";
c010063c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010063f:	c7 40 08 b8 bb 10 c0 	movl   $0xc010bbb8,0x8(%eax)
    info->eip_fn_namelen = 9;
c0100646:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100649:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
    info->eip_fn_addr = addr;
c0100650:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100653:	8b 55 08             	mov    0x8(%ebp),%edx
c0100656:	89 50 10             	mov    %edx,0x10(%eax)
    info->eip_fn_narg = 0;
c0100659:	8b 45 0c             	mov    0xc(%ebp),%eax
c010065c:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

    // find the relevant set of stabs
    if (addr >= KERNBASE) {
c0100663:	81 7d 08 ff ff ff bf 	cmpl   $0xbfffffff,0x8(%ebp)
c010066a:	76 21                	jbe    c010068d <debuginfo_eip+0x6a>
        stabs = __STAB_BEGIN__;
c010066c:	c7 45 f4 20 e5 10 c0 	movl   $0xc010e520,-0xc(%ebp)
        stab_end = __STAB_END__;
c0100673:	c7 45 f0 28 3c 12 c0 	movl   $0xc0123c28,-0x10(%ebp)
        stabstr = __STABSTR_BEGIN__;
c010067a:	c7 45 ec 29 3c 12 c0 	movl   $0xc0123c29,-0x14(%ebp)
        stabstr_end = __STABSTR_END__;
c0100681:	c7 45 e8 4d 8c 12 c0 	movl   $0xc0128c4d,-0x18(%ebp)
c0100688:	e9 c3 00 00 00       	jmp    c0100750 <debuginfo_eip+0x12d>
    }
    else {
        // user-program linker script, tools/user.ld puts the information about the
        // program's stabs (included __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__,
        // and __STABSTR_END__) in a structure located at virtual address USTAB.
        const struct userstabdata *usd = (struct userstabdata *)USTAB;
c010068d:	c7 45 e4 00 00 20 00 	movl   $0x200000,-0x1c(%ebp)

        // make sure that debugger (current process) can access this memory
        struct mm_struct *mm;
        if (current == NULL || (mm = current->mm) == NULL) {
c0100694:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c0100699:	85 c0                	test   %eax,%eax
c010069b:	74 11                	je     c01006ae <debuginfo_eip+0x8b>
c010069d:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c01006a2:	8b 40 18             	mov    0x18(%eax),%eax
c01006a5:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01006a8:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01006ac:	75 0a                	jne    c01006b8 <debuginfo_eip+0x95>
            return -1;
c01006ae:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01006b3:	e9 4e 03 00 00       	jmp    c0100a06 <debuginfo_eip+0x3e3>
        }
        if (!user_mem_check(mm, (uintptr_t)usd, sizeof(struct userstabdata), 0)) {
c01006b8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01006bb:	6a 00                	push   $0x0
c01006bd:	6a 10                	push   $0x10
c01006bf:	50                   	push   %eax
c01006c0:	ff 75 e0             	pushl  -0x20(%ebp)
c01006c3:	e8 81 45 00 00       	call   c0104c49 <user_mem_check>
c01006c8:	83 c4 10             	add    $0x10,%esp
c01006cb:	85 c0                	test   %eax,%eax
c01006cd:	75 0a                	jne    c01006d9 <debuginfo_eip+0xb6>
            return -1;
c01006cf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01006d4:	e9 2d 03 00 00       	jmp    c0100a06 <debuginfo_eip+0x3e3>
        }

        stabs = usd->stabs;
c01006d9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01006dc:	8b 00                	mov    (%eax),%eax
c01006de:	89 45 f4             	mov    %eax,-0xc(%ebp)
        stab_end = usd->stab_end;
c01006e1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01006e4:	8b 40 04             	mov    0x4(%eax),%eax
c01006e7:	89 45 f0             	mov    %eax,-0x10(%ebp)
        stabstr = usd->stabstr;
c01006ea:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01006ed:	8b 40 08             	mov    0x8(%eax),%eax
c01006f0:	89 45 ec             	mov    %eax,-0x14(%ebp)
        stabstr_end = usd->stabstr_end;
c01006f3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01006f6:	8b 40 0c             	mov    0xc(%eax),%eax
c01006f9:	89 45 e8             	mov    %eax,-0x18(%ebp)

        // make sure the STABS and string table memory is valid
        if (!user_mem_check(mm, (uintptr_t)stabs, (uintptr_t)stab_end - (uintptr_t)stabs, 0)) {
c01006fc:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01006ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100702:	29 c2                	sub    %eax,%edx
c0100704:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100707:	6a 00                	push   $0x0
c0100709:	52                   	push   %edx
c010070a:	50                   	push   %eax
c010070b:	ff 75 e0             	pushl  -0x20(%ebp)
c010070e:	e8 36 45 00 00       	call   c0104c49 <user_mem_check>
c0100713:	83 c4 10             	add    $0x10,%esp
c0100716:	85 c0                	test   %eax,%eax
c0100718:	75 0a                	jne    c0100724 <debuginfo_eip+0x101>
            return -1;
c010071a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010071f:	e9 e2 02 00 00       	jmp    c0100a06 <debuginfo_eip+0x3e3>
        }
        if (!user_mem_check(mm, (uintptr_t)stabstr, stabstr_end - stabstr, 0)) {
c0100724:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0100727:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010072a:	29 c2                	sub    %eax,%edx
c010072c:	89 d0                	mov    %edx,%eax
c010072e:	89 c2                	mov    %eax,%edx
c0100730:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100733:	6a 00                	push   $0x0
c0100735:	52                   	push   %edx
c0100736:	50                   	push   %eax
c0100737:	ff 75 e0             	pushl  -0x20(%ebp)
c010073a:	e8 0a 45 00 00       	call   c0104c49 <user_mem_check>
c010073f:	83 c4 10             	add    $0x10,%esp
c0100742:	85 c0                	test   %eax,%eax
c0100744:	75 0a                	jne    c0100750 <debuginfo_eip+0x12d>
            return -1;
c0100746:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010074b:	e9 b6 02 00 00       	jmp    c0100a06 <debuginfo_eip+0x3e3>
        }
    }

    // String table validity checks
    if (stabstr_end <= stabstr || stabstr_end[-1] != 0) {
c0100750:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100753:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0100756:	76 0d                	jbe    c0100765 <debuginfo_eip+0x142>
c0100758:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010075b:	83 e8 01             	sub    $0x1,%eax
c010075e:	0f b6 00             	movzbl (%eax),%eax
c0100761:	84 c0                	test   %al,%al
c0100763:	74 0a                	je     c010076f <debuginfo_eip+0x14c>
        return -1;
c0100765:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010076a:	e9 97 02 00 00       	jmp    c0100a06 <debuginfo_eip+0x3e3>
    // 'eip'.  First, we find the basic source file containing 'eip'.
    // Then, we look in that source file for the function.  Then we look
    // for the line number.

    // Search the entire set of stabs for the source file (type N_SO).
    int lfile = 0, rfile = (stab_end - stabs) - 1;
c010076f:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0100776:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100779:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010077c:	29 c2                	sub    %eax,%edx
c010077e:	89 d0                	mov    %edx,%eax
c0100780:	c1 f8 02             	sar    $0x2,%eax
c0100783:	69 c0 ab aa aa aa    	imul   $0xaaaaaaab,%eax,%eax
c0100789:	83 e8 01             	sub    $0x1,%eax
c010078c:	89 45 d8             	mov    %eax,-0x28(%ebp)
    stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
c010078f:	83 ec 0c             	sub    $0xc,%esp
c0100792:	ff 75 08             	pushl  0x8(%ebp)
c0100795:	6a 64                	push   $0x64
c0100797:	8d 45 d8             	lea    -0x28(%ebp),%eax
c010079a:	50                   	push   %eax
c010079b:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010079e:	50                   	push   %eax
c010079f:	ff 75 f4             	pushl  -0xc(%ebp)
c01007a2:	e8 25 fd ff ff       	call   c01004cc <stab_binsearch>
c01007a7:	83 c4 20             	add    $0x20,%esp
    if (lfile == 0)
c01007aa:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01007ad:	85 c0                	test   %eax,%eax
c01007af:	75 0a                	jne    c01007bb <debuginfo_eip+0x198>
        return -1;
c01007b1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01007b6:	e9 4b 02 00 00       	jmp    c0100a06 <debuginfo_eip+0x3e3>

    // Search within that file's stabs for the function definition
    // (N_FUN).
    int lfun = lfile, rfun = rfile;
c01007bb:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01007be:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c01007c1:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01007c4:	89 45 d0             	mov    %eax,-0x30(%ebp)
    int lline, rline;
    stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
c01007c7:	83 ec 0c             	sub    $0xc,%esp
c01007ca:	ff 75 08             	pushl  0x8(%ebp)
c01007cd:	6a 24                	push   $0x24
c01007cf:	8d 45 d0             	lea    -0x30(%ebp),%eax
c01007d2:	50                   	push   %eax
c01007d3:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c01007d6:	50                   	push   %eax
c01007d7:	ff 75 f4             	pushl  -0xc(%ebp)
c01007da:	e8 ed fc ff ff       	call   c01004cc <stab_binsearch>
c01007df:	83 c4 20             	add    $0x20,%esp

    if (lfun <= rfun) {
c01007e2:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01007e5:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01007e8:	39 c2                	cmp    %eax,%edx
c01007ea:	7f 7c                	jg     c0100868 <debuginfo_eip+0x245>
        // stabs[lfun] points to the function name
        // in the string table, but check bounds just in case.
        if (stabs[lfun].n_strx < stabstr_end - stabstr) {
c01007ec:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01007ef:	89 c2                	mov    %eax,%edx
c01007f1:	89 d0                	mov    %edx,%eax
c01007f3:	01 c0                	add    %eax,%eax
c01007f5:	01 d0                	add    %edx,%eax
c01007f7:	c1 e0 02             	shl    $0x2,%eax
c01007fa:	89 c2                	mov    %eax,%edx
c01007fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01007ff:	01 d0                	add    %edx,%eax
c0100801:	8b 00                	mov    (%eax),%eax
c0100803:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c0100806:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0100809:	29 d1                	sub    %edx,%ecx
c010080b:	89 ca                	mov    %ecx,%edx
c010080d:	39 d0                	cmp    %edx,%eax
c010080f:	73 22                	jae    c0100833 <debuginfo_eip+0x210>
            info->eip_fn_name = stabstr + stabs[lfun].n_strx;
c0100811:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100814:	89 c2                	mov    %eax,%edx
c0100816:	89 d0                	mov    %edx,%eax
c0100818:	01 c0                	add    %eax,%eax
c010081a:	01 d0                	add    %edx,%eax
c010081c:	c1 e0 02             	shl    $0x2,%eax
c010081f:	89 c2                	mov    %eax,%edx
c0100821:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100824:	01 d0                	add    %edx,%eax
c0100826:	8b 10                	mov    (%eax),%edx
c0100828:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010082b:	01 c2                	add    %eax,%edx
c010082d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100830:	89 50 08             	mov    %edx,0x8(%eax)
        }
        info->eip_fn_addr = stabs[lfun].n_value;
c0100833:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100836:	89 c2                	mov    %eax,%edx
c0100838:	89 d0                	mov    %edx,%eax
c010083a:	01 c0                	add    %eax,%eax
c010083c:	01 d0                	add    %edx,%eax
c010083e:	c1 e0 02             	shl    $0x2,%eax
c0100841:	89 c2                	mov    %eax,%edx
c0100843:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100846:	01 d0                	add    %edx,%eax
c0100848:	8b 50 08             	mov    0x8(%eax),%edx
c010084b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010084e:	89 50 10             	mov    %edx,0x10(%eax)
        addr -= info->eip_fn_addr;
c0100851:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100854:	8b 40 10             	mov    0x10(%eax),%eax
c0100857:	29 45 08             	sub    %eax,0x8(%ebp)
        // Search within the function definition for the line number.
        lline = lfun;
c010085a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010085d:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfun;
c0100860:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0100863:	89 45 c8             	mov    %eax,-0x38(%ebp)
c0100866:	eb 15                	jmp    c010087d <debuginfo_eip+0x25a>
    } else {
        // Couldn't find function stab!  Maybe we're in an assembly
        // file.  Search the whole file for the line number.
        info->eip_fn_addr = addr;
c0100868:	8b 45 0c             	mov    0xc(%ebp),%eax
c010086b:	8b 55 08             	mov    0x8(%ebp),%edx
c010086e:	89 50 10             	mov    %edx,0x10(%eax)
        lline = lfile;
c0100871:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100874:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfile;
c0100877:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010087a:	89 45 c8             	mov    %eax,-0x38(%ebp)
    }
    info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
c010087d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100880:	8b 40 08             	mov    0x8(%eax),%eax
c0100883:	83 ec 08             	sub    $0x8,%esp
c0100886:	6a 3a                	push   $0x3a
c0100888:	50                   	push   %eax
c0100889:	e8 0d a8 00 00       	call   c010b09b <strfind>
c010088e:	83 c4 10             	add    $0x10,%esp
c0100891:	89 c2                	mov    %eax,%edx
c0100893:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100896:	8b 40 08             	mov    0x8(%eax),%eax
c0100899:	29 c2                	sub    %eax,%edx
c010089b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010089e:	89 50 0c             	mov    %edx,0xc(%eax)

    // Search within [lline, rline] for the line number stab.
    // If found, set info->eip_line to the right line number.
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
c01008a1:	83 ec 0c             	sub    $0xc,%esp
c01008a4:	ff 75 08             	pushl  0x8(%ebp)
c01008a7:	6a 44                	push   $0x44
c01008a9:	8d 45 c8             	lea    -0x38(%ebp),%eax
c01008ac:	50                   	push   %eax
c01008ad:	8d 45 cc             	lea    -0x34(%ebp),%eax
c01008b0:	50                   	push   %eax
c01008b1:	ff 75 f4             	pushl  -0xc(%ebp)
c01008b4:	e8 13 fc ff ff       	call   c01004cc <stab_binsearch>
c01008b9:	83 c4 20             	add    $0x20,%esp
    if (lline <= rline) {
c01008bc:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01008bf:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01008c2:	39 c2                	cmp    %eax,%edx
c01008c4:	7f 24                	jg     c01008ea <debuginfo_eip+0x2c7>
        info->eip_line = stabs[rline].n_desc;
c01008c6:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01008c9:	89 c2                	mov    %eax,%edx
c01008cb:	89 d0                	mov    %edx,%eax
c01008cd:	01 c0                	add    %eax,%eax
c01008cf:	01 d0                	add    %edx,%eax
c01008d1:	c1 e0 02             	shl    $0x2,%eax
c01008d4:	89 c2                	mov    %eax,%edx
c01008d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01008d9:	01 d0                	add    %edx,%eax
c01008db:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c01008df:	0f b7 d0             	movzwl %ax,%edx
c01008e2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01008e5:	89 50 04             	mov    %edx,0x4(%eax)

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c01008e8:	eb 13                	jmp    c01008fd <debuginfo_eip+0x2da>
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
    if (lline <= rline) {
        info->eip_line = stabs[rline].n_desc;
    } else {
        return -1;
c01008ea:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01008ef:	e9 12 01 00 00       	jmp    c0100a06 <debuginfo_eip+0x3e3>
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
           && stabs[lline].n_type != N_SOL
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
        lline --;
c01008f4:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01008f7:	83 e8 01             	sub    $0x1,%eax
c01008fa:	89 45 cc             	mov    %eax,-0x34(%ebp)

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c01008fd:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0100900:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100903:	39 c2                	cmp    %eax,%edx
c0100905:	7c 56                	jl     c010095d <debuginfo_eip+0x33a>
           && stabs[lline].n_type != N_SOL
c0100907:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010090a:	89 c2                	mov    %eax,%edx
c010090c:	89 d0                	mov    %edx,%eax
c010090e:	01 c0                	add    %eax,%eax
c0100910:	01 d0                	add    %edx,%eax
c0100912:	c1 e0 02             	shl    $0x2,%eax
c0100915:	89 c2                	mov    %eax,%edx
c0100917:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010091a:	01 d0                	add    %edx,%eax
c010091c:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100920:	3c 84                	cmp    $0x84,%al
c0100922:	74 39                	je     c010095d <debuginfo_eip+0x33a>
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
c0100924:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100927:	89 c2                	mov    %eax,%edx
c0100929:	89 d0                	mov    %edx,%eax
c010092b:	01 c0                	add    %eax,%eax
c010092d:	01 d0                	add    %edx,%eax
c010092f:	c1 e0 02             	shl    $0x2,%eax
c0100932:	89 c2                	mov    %eax,%edx
c0100934:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100937:	01 d0                	add    %edx,%eax
c0100939:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c010093d:	3c 64                	cmp    $0x64,%al
c010093f:	75 b3                	jne    c01008f4 <debuginfo_eip+0x2d1>
c0100941:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100944:	89 c2                	mov    %eax,%edx
c0100946:	89 d0                	mov    %edx,%eax
c0100948:	01 c0                	add    %eax,%eax
c010094a:	01 d0                	add    %edx,%eax
c010094c:	c1 e0 02             	shl    $0x2,%eax
c010094f:	89 c2                	mov    %eax,%edx
c0100951:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100954:	01 d0                	add    %edx,%eax
c0100956:	8b 40 08             	mov    0x8(%eax),%eax
c0100959:	85 c0                	test   %eax,%eax
c010095b:	74 97                	je     c01008f4 <debuginfo_eip+0x2d1>
        lline --;
    }
    if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr) {
c010095d:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0100960:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100963:	39 c2                	cmp    %eax,%edx
c0100965:	7c 46                	jl     c01009ad <debuginfo_eip+0x38a>
c0100967:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010096a:	89 c2                	mov    %eax,%edx
c010096c:	89 d0                	mov    %edx,%eax
c010096e:	01 c0                	add    %eax,%eax
c0100970:	01 d0                	add    %edx,%eax
c0100972:	c1 e0 02             	shl    $0x2,%eax
c0100975:	89 c2                	mov    %eax,%edx
c0100977:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010097a:	01 d0                	add    %edx,%eax
c010097c:	8b 00                	mov    (%eax),%eax
c010097e:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c0100981:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0100984:	29 d1                	sub    %edx,%ecx
c0100986:	89 ca                	mov    %ecx,%edx
c0100988:	39 d0                	cmp    %edx,%eax
c010098a:	73 21                	jae    c01009ad <debuginfo_eip+0x38a>
        info->eip_file = stabstr + stabs[lline].n_strx;
c010098c:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010098f:	89 c2                	mov    %eax,%edx
c0100991:	89 d0                	mov    %edx,%eax
c0100993:	01 c0                	add    %eax,%eax
c0100995:	01 d0                	add    %edx,%eax
c0100997:	c1 e0 02             	shl    $0x2,%eax
c010099a:	89 c2                	mov    %eax,%edx
c010099c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010099f:	01 d0                	add    %edx,%eax
c01009a1:	8b 10                	mov    (%eax),%edx
c01009a3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01009a6:	01 c2                	add    %eax,%edx
c01009a8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01009ab:	89 10                	mov    %edx,(%eax)
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
c01009ad:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01009b0:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01009b3:	39 c2                	cmp    %eax,%edx
c01009b5:	7d 4a                	jge    c0100a01 <debuginfo_eip+0x3de>
        for (lline = lfun + 1;
c01009b7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01009ba:	83 c0 01             	add    $0x1,%eax
c01009bd:	89 45 cc             	mov    %eax,-0x34(%ebp)
c01009c0:	eb 18                	jmp    c01009da <debuginfo_eip+0x3b7>
             lline < rfun && stabs[lline].n_type == N_PSYM;
             lline ++) {
            info->eip_fn_narg ++;
c01009c2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01009c5:	8b 40 14             	mov    0x14(%eax),%eax
c01009c8:	8d 50 01             	lea    0x1(%eax),%edx
c01009cb:	8b 45 0c             	mov    0xc(%ebp),%eax
c01009ce:	89 50 14             	mov    %edx,0x14(%eax)
    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
             lline < rfun && stabs[lline].n_type == N_PSYM;
             lline ++) {
c01009d1:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01009d4:	83 c0 01             	add    $0x1,%eax
c01009d7:	89 45 cc             	mov    %eax,-0x34(%ebp)

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
             lline < rfun && stabs[lline].n_type == N_PSYM;
c01009da:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01009dd:	8b 45 d0             	mov    -0x30(%ebp),%eax
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
c01009e0:	39 c2                	cmp    %eax,%edx
c01009e2:	7d 1d                	jge    c0100a01 <debuginfo_eip+0x3de>
             lline < rfun && stabs[lline].n_type == N_PSYM;
c01009e4:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01009e7:	89 c2                	mov    %eax,%edx
c01009e9:	89 d0                	mov    %edx,%eax
c01009eb:	01 c0                	add    %eax,%eax
c01009ed:	01 d0                	add    %edx,%eax
c01009ef:	c1 e0 02             	shl    $0x2,%eax
c01009f2:	89 c2                	mov    %eax,%edx
c01009f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01009f7:	01 d0                	add    %edx,%eax
c01009f9:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c01009fd:	3c a0                	cmp    $0xa0,%al
c01009ff:	74 c1                	je     c01009c2 <debuginfo_eip+0x39f>
             lline ++) {
            info->eip_fn_narg ++;
        }
    }
    return 0;
c0100a01:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100a06:	c9                   	leave  
c0100a07:	c3                   	ret    

c0100a08 <print_kerninfo>:
 * print_kerninfo - print the information about kernel, including the location
 * of kernel entry, the start addresses of data and text segements, the start
 * address of free memory and how many memory that kernel has used.
 * */
void
print_kerninfo(void) {
c0100a08:	55                   	push   %ebp
c0100a09:	89 e5                	mov    %esp,%ebp
c0100a0b:	83 ec 08             	sub    $0x8,%esp
    extern char etext[], edata[], end[], kern_init[];
    cprintf("Special kernel symbols:\n");
c0100a0e:	83 ec 0c             	sub    $0xc,%esp
c0100a11:	68 c2 bb 10 c0       	push   $0xc010bbc2
c0100a16:	e8 77 f8 ff ff       	call   c0100292 <cprintf>
c0100a1b:	83 c4 10             	add    $0x10,%esp
    cprintf("  entry  0x%08x (phys)\n", kern_init);
c0100a1e:	83 ec 08             	sub    $0x8,%esp
c0100a21:	68 36 00 10 c0       	push   $0xc0100036
c0100a26:	68 db bb 10 c0       	push   $0xc010bbdb
c0100a2b:	e8 62 f8 ff ff       	call   c0100292 <cprintf>
c0100a30:	83 c4 10             	add    $0x10,%esp
    cprintf("  etext  0x%08x (phys)\n", etext);
c0100a33:	83 ec 08             	sub    $0x8,%esp
c0100a36:	68 bb ba 10 c0       	push   $0xc010babb
c0100a3b:	68 f3 bb 10 c0       	push   $0xc010bbf3
c0100a40:	e8 4d f8 ff ff       	call   c0100292 <cprintf>
c0100a45:	83 c4 10             	add    $0x10,%esp
    cprintf("  edata  0x%08x (phys)\n", edata);
c0100a48:	83 ec 08             	sub    $0x8,%esp
c0100a4b:	68 00 f0 19 c0       	push   $0xc019f000
c0100a50:	68 0b bc 10 c0       	push   $0xc010bc0b
c0100a55:	e8 38 f8 ff ff       	call   c0100292 <cprintf>
c0100a5a:	83 c4 10             	add    $0x10,%esp
    cprintf("  end    0x%08x (phys)\n", end);
c0100a5d:	83 ec 08             	sub    $0x8,%esp
c0100a60:	68 a4 21 1a c0       	push   $0xc01a21a4
c0100a65:	68 23 bc 10 c0       	push   $0xc010bc23
c0100a6a:	e8 23 f8 ff ff       	call   c0100292 <cprintf>
c0100a6f:	83 c4 10             	add    $0x10,%esp
    cprintf("Kernel executable memory footprint: %dKB\n", (end - kern_init + 1023)/1024);
c0100a72:	b8 a4 21 1a c0       	mov    $0xc01a21a4,%eax
c0100a77:	05 ff 03 00 00       	add    $0x3ff,%eax
c0100a7c:	ba 36 00 10 c0       	mov    $0xc0100036,%edx
c0100a81:	29 d0                	sub    %edx,%eax
c0100a83:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
c0100a89:	85 c0                	test   %eax,%eax
c0100a8b:	0f 48 c2             	cmovs  %edx,%eax
c0100a8e:	c1 f8 0a             	sar    $0xa,%eax
c0100a91:	83 ec 08             	sub    $0x8,%esp
c0100a94:	50                   	push   %eax
c0100a95:	68 3c bc 10 c0       	push   $0xc010bc3c
c0100a9a:	e8 f3 f7 ff ff       	call   c0100292 <cprintf>
c0100a9f:	83 c4 10             	add    $0x10,%esp
}
c0100aa2:	90                   	nop
c0100aa3:	c9                   	leave  
c0100aa4:	c3                   	ret    

c0100aa5 <print_debuginfo>:
/* *
 * print_debuginfo - read and print the stat information for the address @eip,
 * and info.eip_fn_addr should be the first address of the related function.
 * */
void
print_debuginfo(uintptr_t eip) {
c0100aa5:	55                   	push   %ebp
c0100aa6:	89 e5                	mov    %esp,%ebp
c0100aa8:	81 ec 28 01 00 00    	sub    $0x128,%esp
    struct eipdebuginfo info;
    if (debuginfo_eip(eip, &info) != 0) {
c0100aae:	83 ec 08             	sub    $0x8,%esp
c0100ab1:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0100ab4:	50                   	push   %eax
c0100ab5:	ff 75 08             	pushl  0x8(%ebp)
c0100ab8:	e8 66 fb ff ff       	call   c0100623 <debuginfo_eip>
c0100abd:	83 c4 10             	add    $0x10,%esp
c0100ac0:	85 c0                	test   %eax,%eax
c0100ac2:	74 15                	je     c0100ad9 <print_debuginfo+0x34>
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
c0100ac4:	83 ec 08             	sub    $0x8,%esp
c0100ac7:	ff 75 08             	pushl  0x8(%ebp)
c0100aca:	68 66 bc 10 c0       	push   $0xc010bc66
c0100acf:	e8 be f7 ff ff       	call   c0100292 <cprintf>
c0100ad4:	83 c4 10             	add    $0x10,%esp
        }
        fnname[j] = '\0';
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
                fnname, eip - info.eip_fn_addr);
    }
}
c0100ad7:	eb 65                	jmp    c0100b3e <print_debuginfo+0x99>
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
    }
    else {
        char fnname[256];
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0100ad9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100ae0:	eb 1c                	jmp    c0100afe <print_debuginfo+0x59>
            fnname[j] = info.eip_fn_name[j];
c0100ae2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0100ae5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100ae8:	01 d0                	add    %edx,%eax
c0100aea:	0f b6 00             	movzbl (%eax),%eax
c0100aed:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
c0100af3:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100af6:	01 ca                	add    %ecx,%edx
c0100af8:	88 02                	mov    %al,(%edx)
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
    }
    else {
        char fnname[256];
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0100afa:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100afe:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100b01:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0100b04:	7f dc                	jg     c0100ae2 <print_debuginfo+0x3d>
            fnname[j] = info.eip_fn_name[j];
        }
        fnname[j] = '\0';
c0100b06:	8d 95 dc fe ff ff    	lea    -0x124(%ebp),%edx
c0100b0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b0f:	01 d0                	add    %edx,%eax
c0100b11:	c6 00 00             	movb   $0x0,(%eax)
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
                fnname, eip - info.eip_fn_addr);
c0100b14:	8b 45 ec             	mov    -0x14(%ebp),%eax
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
            fnname[j] = info.eip_fn_name[j];
        }
        fnname[j] = '\0';
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
c0100b17:	8b 55 08             	mov    0x8(%ebp),%edx
c0100b1a:	89 d1                	mov    %edx,%ecx
c0100b1c:	29 c1                	sub    %eax,%ecx
c0100b1e:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0100b21:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100b24:	83 ec 0c             	sub    $0xc,%esp
c0100b27:	51                   	push   %ecx
c0100b28:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
c0100b2e:	51                   	push   %ecx
c0100b2f:	52                   	push   %edx
c0100b30:	50                   	push   %eax
c0100b31:	68 82 bc 10 c0       	push   $0xc010bc82
c0100b36:	e8 57 f7 ff ff       	call   c0100292 <cprintf>
c0100b3b:	83 c4 20             	add    $0x20,%esp
                fnname, eip - info.eip_fn_addr);
    }
}
c0100b3e:	90                   	nop
c0100b3f:	c9                   	leave  
c0100b40:	c3                   	ret    

c0100b41 <read_eip>:

static __noinline uint32_t
read_eip(void) {
c0100b41:	55                   	push   %ebp
c0100b42:	89 e5                	mov    %esp,%ebp
c0100b44:	83 ec 10             	sub    $0x10,%esp
    uint32_t eip;
    asm volatile("movl 4(%%ebp), %0" : "=r" (eip));
c0100b47:	8b 45 04             	mov    0x4(%ebp),%eax
c0100b4a:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eip;
c0100b4d:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0100b50:	c9                   	leave  
c0100b51:	c3                   	ret    

c0100b52 <print_stackframe>:
 *
 * Note that, the length of ebp-chain is limited. In boot/bootasm.S, before jumping
 * to the kernel entry, the value of ebp has been set to zero, that's the boundary.
 * */
void
print_stackframe(void) {
c0100b52:	55                   	push   %ebp
c0100b53:	89 e5                	mov    %esp,%ebp
c0100b55:	53                   	push   %ebx
c0100b56:	83 ec 34             	sub    $0x34,%esp
}

static inline uint32_t
read_ebp(void) {
    uint32_t ebp;
    asm volatile ("movl %%ebp, %0" : "=r" (ebp));
c0100b59:	89 e8                	mov    %ebp,%eax
c0100b5b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return ebp;
c0100b5e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
      *    (3.5) popup a calling stackframe
      *           NOTICE: the calling funciton's return addr eip  = ss:[ebp+4]
      *                   the calling funciton's ebp = ss:[ebp]
      */
    // 1. read_ebp
    uint32_t stack_val_ebp = read_ebp();
c0100b61:	89 45 f4             	mov    %eax,-0xc(%ebp)
    // 2. read_eip
    uint32_t stack_val_eip = read_eip();
c0100b64:	e8 d8 ff ff ff       	call   c0100b41 <read_eip>
c0100b69:	89 45 f0             	mov    %eax,-0x10(%ebp)
    // 3. iterate stacks
    uint32_t stack_val_args[4];
    for (int i = 0; i < STACKFRAME_DEPTH; i++) {
c0100b6c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0100b73:	e9 93 00 00 00       	jmp    c0100c0b <print_stackframe+0xb9>
        cprintf("ebp:0x%08x eip:0x%08x ", stack_val_ebp, stack_val_eip);
c0100b78:	83 ec 04             	sub    $0x4,%esp
c0100b7b:	ff 75 f0             	pushl  -0x10(%ebp)
c0100b7e:	ff 75 f4             	pushl  -0xc(%ebp)
c0100b81:	68 94 bc 10 c0       	push   $0xc010bc94
c0100b86:	e8 07 f7 ff ff       	call   c0100292 <cprintf>
c0100b8b:	83 c4 10             	add    $0x10,%esp
        // get args
        for (int j = 0; j < 4; j++) {
c0100b8e:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c0100b95:	eb 1f                	jmp    c0100bb6 <print_stackframe+0x64>
            stack_val_args[j] = *(((uint32_t*) stack_val_ebp) + 2 + j);
c0100b97:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100b9a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0100ba1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100ba4:	01 d0                	add    %edx,%eax
c0100ba6:	83 c0 08             	add    $0x8,%eax
c0100ba9:	8b 10                	mov    (%eax),%edx
c0100bab:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100bae:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
    // 3. iterate stacks
    uint32_t stack_val_args[4];
    for (int i = 0; i < STACKFRAME_DEPTH; i++) {
        cprintf("ebp:0x%08x eip:0x%08x ", stack_val_ebp, stack_val_eip);
        // get args
        for (int j = 0; j < 4; j++) {
c0100bb2:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
c0100bb6:	83 7d e8 03          	cmpl   $0x3,-0x18(%ebp)
c0100bba:	7e db                	jle    c0100b97 <print_stackframe+0x45>
            stack_val_args[j] = *(((uint32_t*) stack_val_ebp) + 2 + j);
        }
        cprintf("args:0x%08x 0x%08x 0x%08x 0x%08x\n", stack_val_args[0], 
c0100bbc:	8b 5d e0             	mov    -0x20(%ebp),%ebx
c0100bbf:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0100bc2:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0100bc5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100bc8:	83 ec 0c             	sub    $0xc,%esp
c0100bcb:	53                   	push   %ebx
c0100bcc:	51                   	push   %ecx
c0100bcd:	52                   	push   %edx
c0100bce:	50                   	push   %eax
c0100bcf:	68 ac bc 10 c0       	push   $0xc010bcac
c0100bd4:	e8 b9 f6 ff ff       	call   c0100292 <cprintf>
c0100bd9:	83 c4 20             	add    $0x20,%esp
                stack_val_args[1], stack_val_args[2], stack_val_args[3]);
        // print function info
        print_debuginfo(stack_val_eip - 1);
c0100bdc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100bdf:	83 e8 01             	sub    $0x1,%eax
c0100be2:	83 ec 0c             	sub    $0xc,%esp
c0100be5:	50                   	push   %eax
c0100be6:	e8 ba fe ff ff       	call   c0100aa5 <print_debuginfo>
c0100beb:	83 c4 10             	add    $0x10,%esp
        // pop up stackframe, refresh ebp & eip
        stack_val_eip = *(((uint32_t*) stack_val_ebp) + 1);
c0100bee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100bf1:	83 c0 04             	add    $0x4,%eax
c0100bf4:	8b 00                	mov    (%eax),%eax
c0100bf6:	89 45 f0             	mov    %eax,-0x10(%ebp)
        stack_val_ebp = *(((uint32_t*) stack_val_ebp));
c0100bf9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100bfc:	8b 00                	mov    (%eax),%eax
c0100bfe:	89 45 f4             	mov    %eax,-0xc(%ebp)
        // ebp should be valid
        if (stack_val_ebp <= 0) {
c0100c01:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100c05:	74 10                	je     c0100c17 <print_stackframe+0xc5>
    uint32_t stack_val_ebp = read_ebp();
    // 2. read_eip
    uint32_t stack_val_eip = read_eip();
    // 3. iterate stacks
    uint32_t stack_val_args[4];
    for (int i = 0; i < STACKFRAME_DEPTH; i++) {
c0100c07:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0100c0b:	83 7d ec 13          	cmpl   $0x13,-0x14(%ebp)
c0100c0f:	0f 8e 63 ff ff ff    	jle    c0100b78 <print_stackframe+0x26>
        // ebp should be valid
        if (stack_val_ebp <= 0) {
            break;
        }
    }
}
c0100c15:	eb 01                	jmp    c0100c18 <print_stackframe+0xc6>
        // pop up stackframe, refresh ebp & eip
        stack_val_eip = *(((uint32_t*) stack_val_ebp) + 1);
        stack_val_ebp = *(((uint32_t*) stack_val_ebp));
        // ebp should be valid
        if (stack_val_ebp <= 0) {
            break;
c0100c17:	90                   	nop
        }
    }
}
c0100c18:	90                   	nop
c0100c19:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0100c1c:	c9                   	leave  
c0100c1d:	c3                   	ret    

c0100c1e <parse>:
#define MAXARGS         16
#define WHITESPACE      " \t\n\r"

/* parse - parse the command buffer into whitespace-separated arguments */
static int
parse(char *buf, char **argv) {
c0100c1e:	55                   	push   %ebp
c0100c1f:	89 e5                	mov    %esp,%ebp
c0100c21:	83 ec 18             	sub    $0x18,%esp
    int argc = 0;
c0100c24:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100c2b:	eb 0c                	jmp    c0100c39 <parse+0x1b>
            *buf ++ = '\0';
c0100c2d:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c30:	8d 50 01             	lea    0x1(%eax),%edx
c0100c33:	89 55 08             	mov    %edx,0x8(%ebp)
c0100c36:	c6 00 00             	movb   $0x0,(%eax)
static int
parse(char *buf, char **argv) {
    int argc = 0;
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100c39:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c3c:	0f b6 00             	movzbl (%eax),%eax
c0100c3f:	84 c0                	test   %al,%al
c0100c41:	74 1e                	je     c0100c61 <parse+0x43>
c0100c43:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c46:	0f b6 00             	movzbl (%eax),%eax
c0100c49:	0f be c0             	movsbl %al,%eax
c0100c4c:	83 ec 08             	sub    $0x8,%esp
c0100c4f:	50                   	push   %eax
c0100c50:	68 50 bd 10 c0       	push   $0xc010bd50
c0100c55:	e8 0e a4 00 00       	call   c010b068 <strchr>
c0100c5a:	83 c4 10             	add    $0x10,%esp
c0100c5d:	85 c0                	test   %eax,%eax
c0100c5f:	75 cc                	jne    c0100c2d <parse+0xf>
            *buf ++ = '\0';
        }
        if (*buf == '\0') {
c0100c61:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c64:	0f b6 00             	movzbl (%eax),%eax
c0100c67:	84 c0                	test   %al,%al
c0100c69:	74 69                	je     c0100cd4 <parse+0xb6>
            break;
        }

        // save and scan past next arg
        if (argc == MAXARGS - 1) {
c0100c6b:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
c0100c6f:	75 12                	jne    c0100c83 <parse+0x65>
            cprintf("Too many arguments (max %d).\n", MAXARGS);
c0100c71:	83 ec 08             	sub    $0x8,%esp
c0100c74:	6a 10                	push   $0x10
c0100c76:	68 55 bd 10 c0       	push   $0xc010bd55
c0100c7b:	e8 12 f6 ff ff       	call   c0100292 <cprintf>
c0100c80:	83 c4 10             	add    $0x10,%esp
        }
        argv[argc ++] = buf;
c0100c83:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100c86:	8d 50 01             	lea    0x1(%eax),%edx
c0100c89:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0100c8c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0100c93:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100c96:	01 c2                	add    %eax,%edx
c0100c98:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c9b:	89 02                	mov    %eax,(%edx)
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c0100c9d:	eb 04                	jmp    c0100ca3 <parse+0x85>
            buf ++;
c0100c9f:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        // save and scan past next arg
        if (argc == MAXARGS - 1) {
            cprintf("Too many arguments (max %d).\n", MAXARGS);
        }
        argv[argc ++] = buf;
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c0100ca3:	8b 45 08             	mov    0x8(%ebp),%eax
c0100ca6:	0f b6 00             	movzbl (%eax),%eax
c0100ca9:	84 c0                	test   %al,%al
c0100cab:	0f 84 7a ff ff ff    	je     c0100c2b <parse+0xd>
c0100cb1:	8b 45 08             	mov    0x8(%ebp),%eax
c0100cb4:	0f b6 00             	movzbl (%eax),%eax
c0100cb7:	0f be c0             	movsbl %al,%eax
c0100cba:	83 ec 08             	sub    $0x8,%esp
c0100cbd:	50                   	push   %eax
c0100cbe:	68 50 bd 10 c0       	push   $0xc010bd50
c0100cc3:	e8 a0 a3 00 00       	call   c010b068 <strchr>
c0100cc8:	83 c4 10             	add    $0x10,%esp
c0100ccb:	85 c0                	test   %eax,%eax
c0100ccd:	74 d0                	je     c0100c9f <parse+0x81>
            buf ++;
        }
    }
c0100ccf:	e9 57 ff ff ff       	jmp    c0100c2b <parse+0xd>
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
            *buf ++ = '\0';
        }
        if (*buf == '\0') {
            break;
c0100cd4:	90                   	nop
        argv[argc ++] = buf;
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
            buf ++;
        }
    }
    return argc;
c0100cd5:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100cd8:	c9                   	leave  
c0100cd9:	c3                   	ret    

c0100cda <runcmd>:
/* *
 * runcmd - parse the input string, split it into separated arguments
 * and then lookup and invoke some related commands/
 * */
static int
runcmd(char *buf, struct trapframe *tf) {
c0100cda:	55                   	push   %ebp
c0100cdb:	89 e5                	mov    %esp,%ebp
c0100cdd:	83 ec 58             	sub    $0x58,%esp
    char *argv[MAXARGS];
    int argc = parse(buf, argv);
c0100ce0:	83 ec 08             	sub    $0x8,%esp
c0100ce3:	8d 45 b0             	lea    -0x50(%ebp),%eax
c0100ce6:	50                   	push   %eax
c0100ce7:	ff 75 08             	pushl  0x8(%ebp)
c0100cea:	e8 2f ff ff ff       	call   c0100c1e <parse>
c0100cef:	83 c4 10             	add    $0x10,%esp
c0100cf2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (argc == 0) {
c0100cf5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0100cf9:	75 0a                	jne    c0100d05 <runcmd+0x2b>
        return 0;
c0100cfb:	b8 00 00 00 00       	mov    $0x0,%eax
c0100d00:	e9 83 00 00 00       	jmp    c0100d88 <runcmd+0xae>
    }
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100d05:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100d0c:	eb 59                	jmp    c0100d67 <runcmd+0x8d>
        if (strcmp(commands[i].name, argv[0]) == 0) {
c0100d0e:	8b 4d b0             	mov    -0x50(%ebp),%ecx
c0100d11:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100d14:	89 d0                	mov    %edx,%eax
c0100d16:	01 c0                	add    %eax,%eax
c0100d18:	01 d0                	add    %edx,%eax
c0100d1a:	c1 e0 02             	shl    $0x2,%eax
c0100d1d:	05 00 b0 12 c0       	add    $0xc012b000,%eax
c0100d22:	8b 00                	mov    (%eax),%eax
c0100d24:	83 ec 08             	sub    $0x8,%esp
c0100d27:	51                   	push   %ecx
c0100d28:	50                   	push   %eax
c0100d29:	e8 9a a2 00 00       	call   c010afc8 <strcmp>
c0100d2e:	83 c4 10             	add    $0x10,%esp
c0100d31:	85 c0                	test   %eax,%eax
c0100d33:	75 2e                	jne    c0100d63 <runcmd+0x89>
            return commands[i].func(argc - 1, argv + 1, tf);
c0100d35:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100d38:	89 d0                	mov    %edx,%eax
c0100d3a:	01 c0                	add    %eax,%eax
c0100d3c:	01 d0                	add    %edx,%eax
c0100d3e:	c1 e0 02             	shl    $0x2,%eax
c0100d41:	05 08 b0 12 c0       	add    $0xc012b008,%eax
c0100d46:	8b 10                	mov    (%eax),%edx
c0100d48:	8d 45 b0             	lea    -0x50(%ebp),%eax
c0100d4b:	83 c0 04             	add    $0x4,%eax
c0100d4e:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c0100d51:	83 e9 01             	sub    $0x1,%ecx
c0100d54:	83 ec 04             	sub    $0x4,%esp
c0100d57:	ff 75 0c             	pushl  0xc(%ebp)
c0100d5a:	50                   	push   %eax
c0100d5b:	51                   	push   %ecx
c0100d5c:	ff d2                	call   *%edx
c0100d5e:	83 c4 10             	add    $0x10,%esp
c0100d61:	eb 25                	jmp    c0100d88 <runcmd+0xae>
    int argc = parse(buf, argv);
    if (argc == 0) {
        return 0;
    }
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100d63:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100d67:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100d6a:	83 f8 02             	cmp    $0x2,%eax
c0100d6d:	76 9f                	jbe    c0100d0e <runcmd+0x34>
        if (strcmp(commands[i].name, argv[0]) == 0) {
            return commands[i].func(argc - 1, argv + 1, tf);
        }
    }
    cprintf("Unknown command '%s'\n", argv[0]);
c0100d6f:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0100d72:	83 ec 08             	sub    $0x8,%esp
c0100d75:	50                   	push   %eax
c0100d76:	68 73 bd 10 c0       	push   $0xc010bd73
c0100d7b:	e8 12 f5 ff ff       	call   c0100292 <cprintf>
c0100d80:	83 c4 10             	add    $0x10,%esp
    return 0;
c0100d83:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100d88:	c9                   	leave  
c0100d89:	c3                   	ret    

c0100d8a <kmonitor>:

/***** Implementations of basic kernel monitor commands *****/

void
kmonitor(struct trapframe *tf) {
c0100d8a:	55                   	push   %ebp
c0100d8b:	89 e5                	mov    %esp,%ebp
c0100d8d:	83 ec 18             	sub    $0x18,%esp
    cprintf("Welcome to the kernel debug monitor!!\n");
c0100d90:	83 ec 0c             	sub    $0xc,%esp
c0100d93:	68 8c bd 10 c0       	push   $0xc010bd8c
c0100d98:	e8 f5 f4 ff ff       	call   c0100292 <cprintf>
c0100d9d:	83 c4 10             	add    $0x10,%esp
    cprintf("Type 'help' for a list of commands.\n");
c0100da0:	83 ec 0c             	sub    $0xc,%esp
c0100da3:	68 b4 bd 10 c0       	push   $0xc010bdb4
c0100da8:	e8 e5 f4 ff ff       	call   c0100292 <cprintf>
c0100dad:	83 c4 10             	add    $0x10,%esp

    if (tf != NULL) {
c0100db0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0100db4:	74 0e                	je     c0100dc4 <kmonitor+0x3a>
        print_trapframe(tf);
c0100db6:	83 ec 0c             	sub    $0xc,%esp
c0100db9:	ff 75 08             	pushl  0x8(%ebp)
c0100dbc:	e8 f1 15 00 00       	call   c01023b2 <print_trapframe>
c0100dc1:	83 c4 10             	add    $0x10,%esp
    }

    char *buf;
    while (1) {
        if ((buf = readline("K> ")) != NULL) {
c0100dc4:	83 ec 0c             	sub    $0xc,%esp
c0100dc7:	68 d9 bd 10 c0       	push   $0xc010bdd9
c0100dcc:	e8 65 f5 ff ff       	call   c0100336 <readline>
c0100dd1:	83 c4 10             	add    $0x10,%esp
c0100dd4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100dd7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100ddb:	74 e7                	je     c0100dc4 <kmonitor+0x3a>
            if (runcmd(buf, tf) < 0) {
c0100ddd:	83 ec 08             	sub    $0x8,%esp
c0100de0:	ff 75 08             	pushl  0x8(%ebp)
c0100de3:	ff 75 f4             	pushl  -0xc(%ebp)
c0100de6:	e8 ef fe ff ff       	call   c0100cda <runcmd>
c0100deb:	83 c4 10             	add    $0x10,%esp
c0100dee:	85 c0                	test   %eax,%eax
c0100df0:	78 02                	js     c0100df4 <kmonitor+0x6a>
                break;
            }
        }
    }
c0100df2:	eb d0                	jmp    c0100dc4 <kmonitor+0x3a>

    char *buf;
    while (1) {
        if ((buf = readline("K> ")) != NULL) {
            if (runcmd(buf, tf) < 0) {
                break;
c0100df4:	90                   	nop
            }
        }
    }
}
c0100df5:	90                   	nop
c0100df6:	c9                   	leave  
c0100df7:	c3                   	ret    

c0100df8 <mon_help>:

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
c0100df8:	55                   	push   %ebp
c0100df9:	89 e5                	mov    %esp,%ebp
c0100dfb:	83 ec 18             	sub    $0x18,%esp
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100dfe:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100e05:	eb 3c                	jmp    c0100e43 <mon_help+0x4b>
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
c0100e07:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100e0a:	89 d0                	mov    %edx,%eax
c0100e0c:	01 c0                	add    %eax,%eax
c0100e0e:	01 d0                	add    %edx,%eax
c0100e10:	c1 e0 02             	shl    $0x2,%eax
c0100e13:	05 04 b0 12 c0       	add    $0xc012b004,%eax
c0100e18:	8b 08                	mov    (%eax),%ecx
c0100e1a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100e1d:	89 d0                	mov    %edx,%eax
c0100e1f:	01 c0                	add    %eax,%eax
c0100e21:	01 d0                	add    %edx,%eax
c0100e23:	c1 e0 02             	shl    $0x2,%eax
c0100e26:	05 00 b0 12 c0       	add    $0xc012b000,%eax
c0100e2b:	8b 00                	mov    (%eax),%eax
c0100e2d:	83 ec 04             	sub    $0x4,%esp
c0100e30:	51                   	push   %ecx
c0100e31:	50                   	push   %eax
c0100e32:	68 dd bd 10 c0       	push   $0xc010bddd
c0100e37:	e8 56 f4 ff ff       	call   c0100292 <cprintf>
c0100e3c:	83 c4 10             	add    $0x10,%esp

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100e3f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100e43:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100e46:	83 f8 02             	cmp    $0x2,%eax
c0100e49:	76 bc                	jbe    c0100e07 <mon_help+0xf>
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
    }
    return 0;
c0100e4b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100e50:	c9                   	leave  
c0100e51:	c3                   	ret    

c0100e52 <mon_kerninfo>:
/* *
 * mon_kerninfo - call print_kerninfo in kern/debug/kdebug.c to
 * print the memory occupancy in kernel.
 * */
int
mon_kerninfo(int argc, char **argv, struct trapframe *tf) {
c0100e52:	55                   	push   %ebp
c0100e53:	89 e5                	mov    %esp,%ebp
c0100e55:	83 ec 08             	sub    $0x8,%esp
    print_kerninfo();
c0100e58:	e8 ab fb ff ff       	call   c0100a08 <print_kerninfo>
    return 0;
c0100e5d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100e62:	c9                   	leave  
c0100e63:	c3                   	ret    

c0100e64 <mon_backtrace>:
/* *
 * mon_backtrace - call print_stackframe in kern/debug/kdebug.c to
 * print a backtrace of the stack.
 * */
int
mon_backtrace(int argc, char **argv, struct trapframe *tf) {
c0100e64:	55                   	push   %ebp
c0100e65:	89 e5                	mov    %esp,%ebp
c0100e67:	83 ec 08             	sub    $0x8,%esp
    print_stackframe();
c0100e6a:	e8 e3 fc ff ff       	call   c0100b52 <print_stackframe>
    return 0;
c0100e6f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100e74:	c9                   	leave  
c0100e75:	c3                   	ret    

c0100e76 <ide_wait_ready>:
    unsigned int size;          // Size in Sectors
    unsigned char model[41];    // Model in String
} ide_devices[MAX_IDE];

static int
ide_wait_ready(unsigned short iobase, bool check_error) {
c0100e76:	55                   	push   %ebp
c0100e77:	89 e5                	mov    %esp,%ebp
c0100e79:	83 ec 14             	sub    $0x14,%esp
c0100e7c:	8b 45 08             	mov    0x8(%ebp),%eax
c0100e7f:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    int r;
    while ((r = inb(iobase + ISA_STATUS)) & IDE_BSY)
c0100e83:	90                   	nop
c0100e84:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0100e88:	83 c0 07             	add    $0x7,%eax
c0100e8b:	0f b7 c0             	movzwl %ax,%eax
c0100e8e:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0100e92:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0100e96:	89 c2                	mov    %eax,%edx
c0100e98:	ec                   	in     (%dx),%al
c0100e99:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c0100e9c:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c0100ea0:	0f b6 c0             	movzbl %al,%eax
c0100ea3:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0100ea6:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100ea9:	25 80 00 00 00       	and    $0x80,%eax
c0100eae:	85 c0                	test   %eax,%eax
c0100eb0:	75 d2                	jne    c0100e84 <ide_wait_ready+0xe>
        /* nothing */;
    if (check_error && (r & (IDE_DF | IDE_ERR)) != 0) {
c0100eb2:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0100eb6:	74 11                	je     c0100ec9 <ide_wait_ready+0x53>
c0100eb8:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100ebb:	83 e0 21             	and    $0x21,%eax
c0100ebe:	85 c0                	test   %eax,%eax
c0100ec0:	74 07                	je     c0100ec9 <ide_wait_ready+0x53>
        return -1;
c0100ec2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100ec7:	eb 05                	jmp    c0100ece <ide_wait_ready+0x58>
    }
    return 0;
c0100ec9:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100ece:	c9                   	leave  
c0100ecf:	c3                   	ret    

c0100ed0 <ide_init>:

void
ide_init(void) {
c0100ed0:	55                   	push   %ebp
c0100ed1:	89 e5                	mov    %esp,%ebp
c0100ed3:	57                   	push   %edi
c0100ed4:	53                   	push   %ebx
c0100ed5:	81 ec 40 02 00 00    	sub    $0x240,%esp
    static_assert((SECTSIZE % 4) == 0);
    unsigned short ideno, iobase;
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c0100edb:	66 c7 45 f6 00 00    	movw   $0x0,-0xa(%ebp)
c0100ee1:	e9 c1 02 00 00       	jmp    c01011a7 <ide_init+0x2d7>
        /* assume that no device here */
        ide_devices[ideno].valid = 0;
c0100ee6:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100eea:	c1 e0 03             	shl    $0x3,%eax
c0100eed:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0100ef4:	29 c2                	sub    %eax,%edx
c0100ef6:	89 d0                	mov    %edx,%eax
c0100ef8:	05 40 f4 19 c0       	add    $0xc019f440,%eax
c0100efd:	c6 00 00             	movb   $0x0,(%eax)

        iobase = IO_BASE(ideno);
c0100f00:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100f04:	66 d1 e8             	shr    %ax
c0100f07:	0f b7 c0             	movzwl %ax,%eax
c0100f0a:	0f b7 04 85 e8 bd 10 	movzwl -0x3fef4218(,%eax,4),%eax
c0100f11:	c0 
c0100f12:	66 89 45 ea          	mov    %ax,-0x16(%ebp)

        /* wait device ready */
        ide_wait_ready(iobase, 0);
c0100f16:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0100f1a:	6a 00                	push   $0x0
c0100f1c:	50                   	push   %eax
c0100f1d:	e8 54 ff ff ff       	call   c0100e76 <ide_wait_ready>
c0100f22:	83 c4 08             	add    $0x8,%esp

        /* step1: select drive */
        outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4));
c0100f25:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100f29:	83 e0 01             	and    $0x1,%eax
c0100f2c:	c1 e0 04             	shl    $0x4,%eax
c0100f2f:	83 c8 e0             	or     $0xffffffe0,%eax
c0100f32:	0f b6 c0             	movzbl %al,%eax
c0100f35:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0100f39:	83 c2 06             	add    $0x6,%edx
c0100f3c:	0f b7 d2             	movzwl %dx,%edx
c0100f3f:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c0100f43:	88 45 c7             	mov    %al,-0x39(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0100f46:	0f b6 45 c7          	movzbl -0x39(%ebp),%eax
c0100f4a:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0100f4e:	ee                   	out    %al,(%dx)
        ide_wait_ready(iobase, 0);
c0100f4f:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0100f53:	6a 00                	push   $0x0
c0100f55:	50                   	push   %eax
c0100f56:	e8 1b ff ff ff       	call   c0100e76 <ide_wait_ready>
c0100f5b:	83 c4 08             	add    $0x8,%esp

        /* step2: send ATA identify command */
        outb(iobase + ISA_COMMAND, IDE_CMD_IDENTIFY);
c0100f5e:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0100f62:	83 c0 07             	add    $0x7,%eax
c0100f65:	0f b7 c0             	movzwl %ax,%eax
c0100f68:	66 89 45 e0          	mov    %ax,-0x20(%ebp)
c0100f6c:	c6 45 c8 ec          	movb   $0xec,-0x38(%ebp)
c0100f70:	0f b6 45 c8          	movzbl -0x38(%ebp),%eax
c0100f74:	0f b7 55 e0          	movzwl -0x20(%ebp),%edx
c0100f78:	ee                   	out    %al,(%dx)
        ide_wait_ready(iobase, 0);
c0100f79:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0100f7d:	6a 00                	push   $0x0
c0100f7f:	50                   	push   %eax
c0100f80:	e8 f1 fe ff ff       	call   c0100e76 <ide_wait_ready>
c0100f85:	83 c4 08             	add    $0x8,%esp

        /* step3: polling */
        if (inb(iobase + ISA_STATUS) == 0 || ide_wait_ready(iobase, 1) != 0) {
c0100f88:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0100f8c:	83 c0 07             	add    $0x7,%eax
c0100f8f:	0f b7 c0             	movzwl %ax,%eax
c0100f92:	66 89 45 ca          	mov    %ax,-0x36(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0100f96:	0f b7 45 ca          	movzwl -0x36(%ebp),%eax
c0100f9a:	89 c2                	mov    %eax,%edx
c0100f9c:	ec                   	in     (%dx),%al
c0100f9d:	88 45 c9             	mov    %al,-0x37(%ebp)
    return data;
c0100fa0:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
c0100fa4:	84 c0                	test   %al,%al
c0100fa6:	0f 84 ef 01 00 00    	je     c010119b <ide_init+0x2cb>
c0100fac:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0100fb0:	6a 01                	push   $0x1
c0100fb2:	50                   	push   %eax
c0100fb3:	e8 be fe ff ff       	call   c0100e76 <ide_wait_ready>
c0100fb8:	83 c4 08             	add    $0x8,%esp
c0100fbb:	85 c0                	test   %eax,%eax
c0100fbd:	0f 85 d8 01 00 00    	jne    c010119b <ide_init+0x2cb>
            continue ;
        }

        /* device is ok */
        ide_devices[ideno].valid = 1;
c0100fc3:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100fc7:	c1 e0 03             	shl    $0x3,%eax
c0100fca:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0100fd1:	29 c2                	sub    %eax,%edx
c0100fd3:	89 d0                	mov    %edx,%eax
c0100fd5:	05 40 f4 19 c0       	add    $0xc019f440,%eax
c0100fda:	c6 00 01             	movb   $0x1,(%eax)

        /* read identification space of the device */
        unsigned int buffer[128];
        insl(iobase + ISA_DATA, buffer, sizeof(buffer) / sizeof(unsigned int));
c0100fdd:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0100fe1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0100fe4:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
c0100fea:	89 45 c0             	mov    %eax,-0x40(%ebp)
c0100fed:	c7 45 bc 80 00 00 00 	movl   $0x80,-0x44(%ebp)
}

static inline void
insl(uint32_t port, void *addr, int cnt) {
    asm volatile (
c0100ff4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0100ff7:	8b 4d c0             	mov    -0x40(%ebp),%ecx
c0100ffa:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0100ffd:	89 cb                	mov    %ecx,%ebx
c0100fff:	89 df                	mov    %ebx,%edi
c0101001:	89 c1                	mov    %eax,%ecx
c0101003:	fc                   	cld    
c0101004:	f2 6d                	repnz insl (%dx),%es:(%edi)
c0101006:	89 c8                	mov    %ecx,%eax
c0101008:	89 fb                	mov    %edi,%ebx
c010100a:	89 5d c0             	mov    %ebx,-0x40(%ebp)
c010100d:	89 45 bc             	mov    %eax,-0x44(%ebp)

        unsigned char *ident = (unsigned char *)buffer;
c0101010:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
c0101016:	89 45 dc             	mov    %eax,-0x24(%ebp)
        unsigned int sectors;
        unsigned int cmdsets = *(unsigned int *)(ident + IDE_IDENT_CMDSETS);
c0101019:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010101c:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
c0101022:	89 45 d8             	mov    %eax,-0x28(%ebp)
        /* device use 48-bits or 28-bits addressing */
        if (cmdsets & (1 << 26)) {
c0101025:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0101028:	25 00 00 00 04       	and    $0x4000000,%eax
c010102d:	85 c0                	test   %eax,%eax
c010102f:	74 0e                	je     c010103f <ide_init+0x16f>
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA_EXT);
c0101031:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101034:	8b 80 c8 00 00 00    	mov    0xc8(%eax),%eax
c010103a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010103d:	eb 09                	jmp    c0101048 <ide_init+0x178>
        }
        else {
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA);
c010103f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101042:	8b 40 78             	mov    0x78(%eax),%eax
c0101045:	89 45 f0             	mov    %eax,-0x10(%ebp)
        }
        ide_devices[ideno].sets = cmdsets;
c0101048:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010104c:	c1 e0 03             	shl    $0x3,%eax
c010104f:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101056:	29 c2                	sub    %eax,%edx
c0101058:	89 d0                	mov    %edx,%eax
c010105a:	8d 90 44 f4 19 c0    	lea    -0x3fe60bbc(%eax),%edx
c0101060:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0101063:	89 02                	mov    %eax,(%edx)
        ide_devices[ideno].size = sectors;
c0101065:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101069:	c1 e0 03             	shl    $0x3,%eax
c010106c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101073:	29 c2                	sub    %eax,%edx
c0101075:	89 d0                	mov    %edx,%eax
c0101077:	8d 90 48 f4 19 c0    	lea    -0x3fe60bb8(%eax),%edx
c010107d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0101080:	89 02                	mov    %eax,(%edx)

        /* check if supports LBA */
        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);
c0101082:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101085:	83 c0 62             	add    $0x62,%eax
c0101088:	0f b7 00             	movzwl (%eax),%eax
c010108b:	0f b7 c0             	movzwl %ax,%eax
c010108e:	25 00 02 00 00       	and    $0x200,%eax
c0101093:	85 c0                	test   %eax,%eax
c0101095:	75 16                	jne    c01010ad <ide_init+0x1dd>
c0101097:	68 f0 bd 10 c0       	push   $0xc010bdf0
c010109c:	68 33 be 10 c0       	push   $0xc010be33
c01010a1:	6a 7d                	push   $0x7d
c01010a3:	68 48 be 10 c0       	push   $0xc010be48
c01010a8:	e8 4b f3 ff ff       	call   c01003f8 <__panic>

        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
c01010ad:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c01010b1:	89 c2                	mov    %eax,%edx
c01010b3:	8d 04 d5 00 00 00 00 	lea    0x0(,%edx,8),%eax
c01010ba:	89 c2                	mov    %eax,%edx
c01010bc:	8d 04 d5 00 00 00 00 	lea    0x0(,%edx,8),%eax
c01010c3:	29 d0                	sub    %edx,%eax
c01010c5:	05 40 f4 19 c0       	add    $0xc019f440,%eax
c01010ca:	83 c0 0c             	add    $0xc,%eax
c01010cd:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c01010d0:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01010d3:	83 c0 36             	add    $0x36,%eax
c01010d6:	89 45 d0             	mov    %eax,-0x30(%ebp)
        unsigned int i, length = 40;
c01010d9:	c7 45 cc 28 00 00 00 	movl   $0x28,-0x34(%ebp)
        for (i = 0; i < length; i += 2) {
c01010e0:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01010e7:	eb 34                	jmp    c010111d <ide_init+0x24d>
            model[i] = data[i + 1], model[i + 1] = data[i];
c01010e9:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01010ec:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01010ef:	01 c2                	add    %eax,%edx
c01010f1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01010f4:	8d 48 01             	lea    0x1(%eax),%ecx
c01010f7:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01010fa:	01 c8                	add    %ecx,%eax
c01010fc:	0f b6 00             	movzbl (%eax),%eax
c01010ff:	88 02                	mov    %al,(%edx)
c0101101:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101104:	8d 50 01             	lea    0x1(%eax),%edx
c0101107:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010110a:	01 c2                	add    %eax,%edx
c010110c:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c010110f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101112:	01 c8                	add    %ecx,%eax
c0101114:	0f b6 00             	movzbl (%eax),%eax
c0101117:	88 02                	mov    %al,(%edx)
        /* check if supports LBA */
        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);

        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
        unsigned int i, length = 40;
        for (i = 0; i < length; i += 2) {
c0101119:	83 45 ec 02          	addl   $0x2,-0x14(%ebp)
c010111d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101120:	3b 45 cc             	cmp    -0x34(%ebp),%eax
c0101123:	72 c4                	jb     c01010e9 <ide_init+0x219>
            model[i] = data[i + 1], model[i + 1] = data[i];
        }
        do {
            model[i] = '\0';
c0101125:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0101128:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010112b:	01 d0                	add    %edx,%eax
c010112d:	c6 00 00             	movb   $0x0,(%eax)
        } while (i -- > 0 && model[i] == ' ');
c0101130:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101133:	8d 50 ff             	lea    -0x1(%eax),%edx
c0101136:	89 55 ec             	mov    %edx,-0x14(%ebp)
c0101139:	85 c0                	test   %eax,%eax
c010113b:	74 0f                	je     c010114c <ide_init+0x27c>
c010113d:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0101140:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101143:	01 d0                	add    %edx,%eax
c0101145:	0f b6 00             	movzbl (%eax),%eax
c0101148:	3c 20                	cmp    $0x20,%al
c010114a:	74 d9                	je     c0101125 <ide_init+0x255>

        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
c010114c:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101150:	89 c2                	mov    %eax,%edx
c0101152:	8d 04 d5 00 00 00 00 	lea    0x0(,%edx,8),%eax
c0101159:	89 c2                	mov    %eax,%edx
c010115b:	8d 04 d5 00 00 00 00 	lea    0x0(,%edx,8),%eax
c0101162:	29 d0                	sub    %edx,%eax
c0101164:	05 40 f4 19 c0       	add    $0xc019f440,%eax
c0101169:	8d 48 0c             	lea    0xc(%eax),%ecx
c010116c:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101170:	c1 e0 03             	shl    $0x3,%eax
c0101173:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c010117a:	29 c2                	sub    %eax,%edx
c010117c:	89 d0                	mov    %edx,%eax
c010117e:	05 48 f4 19 c0       	add    $0xc019f448,%eax
c0101183:	8b 10                	mov    (%eax),%edx
c0101185:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101189:	51                   	push   %ecx
c010118a:	52                   	push   %edx
c010118b:	50                   	push   %eax
c010118c:	68 5a be 10 c0       	push   $0xc010be5a
c0101191:	e8 fc f0 ff ff       	call   c0100292 <cprintf>
c0101196:	83 c4 10             	add    $0x10,%esp
c0101199:	eb 01                	jmp    c010119c <ide_init+0x2cc>
        outb(iobase + ISA_COMMAND, IDE_CMD_IDENTIFY);
        ide_wait_ready(iobase, 0);

        /* step3: polling */
        if (inb(iobase + ISA_STATUS) == 0 || ide_wait_ready(iobase, 1) != 0) {
            continue ;
c010119b:	90                   	nop

void
ide_init(void) {
    static_assert((SECTSIZE % 4) == 0);
    unsigned short ideno, iobase;
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c010119c:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c01011a0:	83 c0 01             	add    $0x1,%eax
c01011a3:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
c01011a7:	66 83 7d f6 03       	cmpw   $0x3,-0xa(%ebp)
c01011ac:	0f 86 34 fd ff ff    	jbe    c0100ee6 <ide_init+0x16>

        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
    }

    // enable ide interrupt
    pic_enable(IRQ_IDE1);
c01011b2:	83 ec 0c             	sub    $0xc,%esp
c01011b5:	6a 0e                	push   $0xe
c01011b7:	e8 8a 0e 00 00       	call   c0102046 <pic_enable>
c01011bc:	83 c4 10             	add    $0x10,%esp
    pic_enable(IRQ_IDE2);
c01011bf:	83 ec 0c             	sub    $0xc,%esp
c01011c2:	6a 0f                	push   $0xf
c01011c4:	e8 7d 0e 00 00       	call   c0102046 <pic_enable>
c01011c9:	83 c4 10             	add    $0x10,%esp
}
c01011cc:	90                   	nop
c01011cd:	8d 65 f8             	lea    -0x8(%ebp),%esp
c01011d0:	5b                   	pop    %ebx
c01011d1:	5f                   	pop    %edi
c01011d2:	5d                   	pop    %ebp
c01011d3:	c3                   	ret    

c01011d4 <ide_device_valid>:

bool
ide_device_valid(unsigned short ideno) {
c01011d4:	55                   	push   %ebp
c01011d5:	89 e5                	mov    %esp,%ebp
c01011d7:	83 ec 04             	sub    $0x4,%esp
c01011da:	8b 45 08             	mov    0x8(%ebp),%eax
c01011dd:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    return VALID_IDE(ideno);
c01011e1:	66 83 7d fc 03       	cmpw   $0x3,-0x4(%ebp)
c01011e6:	77 25                	ja     c010120d <ide_device_valid+0x39>
c01011e8:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c01011ec:	c1 e0 03             	shl    $0x3,%eax
c01011ef:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c01011f6:	29 c2                	sub    %eax,%edx
c01011f8:	89 d0                	mov    %edx,%eax
c01011fa:	05 40 f4 19 c0       	add    $0xc019f440,%eax
c01011ff:	0f b6 00             	movzbl (%eax),%eax
c0101202:	84 c0                	test   %al,%al
c0101204:	74 07                	je     c010120d <ide_device_valid+0x39>
c0101206:	b8 01 00 00 00       	mov    $0x1,%eax
c010120b:	eb 05                	jmp    c0101212 <ide_device_valid+0x3e>
c010120d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101212:	c9                   	leave  
c0101213:	c3                   	ret    

c0101214 <ide_device_size>:

size_t
ide_device_size(unsigned short ideno) {
c0101214:	55                   	push   %ebp
c0101215:	89 e5                	mov    %esp,%ebp
c0101217:	83 ec 04             	sub    $0x4,%esp
c010121a:	8b 45 08             	mov    0x8(%ebp),%eax
c010121d:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    if (ide_device_valid(ideno)) {
c0101221:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101225:	50                   	push   %eax
c0101226:	e8 a9 ff ff ff       	call   c01011d4 <ide_device_valid>
c010122b:	83 c4 04             	add    $0x4,%esp
c010122e:	85 c0                	test   %eax,%eax
c0101230:	74 1b                	je     c010124d <ide_device_size+0x39>
        return ide_devices[ideno].size;
c0101232:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101236:	c1 e0 03             	shl    $0x3,%eax
c0101239:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101240:	29 c2                	sub    %eax,%edx
c0101242:	89 d0                	mov    %edx,%eax
c0101244:	05 48 f4 19 c0       	add    $0xc019f448,%eax
c0101249:	8b 00                	mov    (%eax),%eax
c010124b:	eb 05                	jmp    c0101252 <ide_device_size+0x3e>
    }
    return 0;
c010124d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101252:	c9                   	leave  
c0101253:	c3                   	ret    

c0101254 <ide_read_secs>:

int
ide_read_secs(unsigned short ideno, uint32_t secno, void *dst, size_t nsecs) {
c0101254:	55                   	push   %ebp
c0101255:	89 e5                	mov    %esp,%ebp
c0101257:	57                   	push   %edi
c0101258:	53                   	push   %ebx
c0101259:	83 ec 40             	sub    $0x40,%esp
c010125c:	8b 45 08             	mov    0x8(%ebp),%eax
c010125f:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c0101263:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c010126a:	77 25                	ja     c0101291 <ide_read_secs+0x3d>
c010126c:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
c0101271:	77 1e                	ja     c0101291 <ide_read_secs+0x3d>
c0101273:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101277:	c1 e0 03             	shl    $0x3,%eax
c010127a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101281:	29 c2                	sub    %eax,%edx
c0101283:	89 d0                	mov    %edx,%eax
c0101285:	05 40 f4 19 c0       	add    $0xc019f440,%eax
c010128a:	0f b6 00             	movzbl (%eax),%eax
c010128d:	84 c0                	test   %al,%al
c010128f:	75 19                	jne    c01012aa <ide_read_secs+0x56>
c0101291:	68 78 be 10 c0       	push   $0xc010be78
c0101296:	68 33 be 10 c0       	push   $0xc010be33
c010129b:	68 9f 00 00 00       	push   $0x9f
c01012a0:	68 48 be 10 c0       	push   $0xc010be48
c01012a5:	e8 4e f1 ff ff       	call   c01003f8 <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c01012aa:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c01012b1:	77 0f                	ja     c01012c2 <ide_read_secs+0x6e>
c01012b3:	8b 55 0c             	mov    0xc(%ebp),%edx
c01012b6:	8b 45 14             	mov    0x14(%ebp),%eax
c01012b9:	01 d0                	add    %edx,%eax
c01012bb:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c01012c0:	76 19                	jbe    c01012db <ide_read_secs+0x87>
c01012c2:	68 a0 be 10 c0       	push   $0xc010bea0
c01012c7:	68 33 be 10 c0       	push   $0xc010be33
c01012cc:	68 a0 00 00 00       	push   $0xa0
c01012d1:	68 48 be 10 c0       	push   $0xc010be48
c01012d6:	e8 1d f1 ff ff       	call   c01003f8 <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c01012db:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c01012df:	66 d1 e8             	shr    %ax
c01012e2:	0f b7 c0             	movzwl %ax,%eax
c01012e5:	0f b7 04 85 e8 bd 10 	movzwl -0x3fef4218(,%eax,4),%eax
c01012ec:	c0 
c01012ed:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c01012f1:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c01012f5:	66 d1 e8             	shr    %ax
c01012f8:	0f b7 c0             	movzwl %ax,%eax
c01012fb:	0f b7 04 85 ea bd 10 	movzwl -0x3fef4216(,%eax,4),%eax
c0101302:	c0 
c0101303:	66 89 45 f0          	mov    %ax,-0x10(%ebp)

    ide_wait_ready(iobase, 0);
c0101307:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c010130b:	83 ec 08             	sub    $0x8,%esp
c010130e:	6a 00                	push   $0x0
c0101310:	50                   	push   %eax
c0101311:	e8 60 fb ff ff       	call   c0100e76 <ide_wait_ready>
c0101316:	83 c4 10             	add    $0x10,%esp

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c0101319:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c010131d:	83 c0 02             	add    $0x2,%eax
c0101320:	0f b7 c0             	movzwl %ax,%eax
c0101323:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
c0101327:	c6 45 d7 00          	movb   $0x0,-0x29(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010132b:	0f b6 45 d7          	movzbl -0x29(%ebp),%eax
c010132f:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101333:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECCNT, nsecs);
c0101334:	8b 45 14             	mov    0x14(%ebp),%eax
c0101337:	0f b6 c0             	movzbl %al,%eax
c010133a:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010133e:	83 c2 02             	add    $0x2,%edx
c0101341:	0f b7 d2             	movzwl %dx,%edx
c0101344:	66 89 55 e8          	mov    %dx,-0x18(%ebp)
c0101348:	88 45 d8             	mov    %al,-0x28(%ebp)
c010134b:	0f b6 45 d8          	movzbl -0x28(%ebp),%eax
c010134f:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c0101353:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c0101354:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101357:	0f b6 c0             	movzbl %al,%eax
c010135a:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010135e:	83 c2 03             	add    $0x3,%edx
c0101361:	0f b7 d2             	movzwl %dx,%edx
c0101364:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c0101368:	88 45 d9             	mov    %al,-0x27(%ebp)
c010136b:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c010136f:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0101373:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c0101374:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101377:	c1 e8 08             	shr    $0x8,%eax
c010137a:	0f b6 c0             	movzbl %al,%eax
c010137d:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101381:	83 c2 04             	add    $0x4,%edx
c0101384:	0f b7 d2             	movzwl %dx,%edx
c0101387:	66 89 55 e4          	mov    %dx,-0x1c(%ebp)
c010138b:	88 45 da             	mov    %al,-0x26(%ebp)
c010138e:	0f b6 45 da          	movzbl -0x26(%ebp),%eax
c0101392:	0f b7 55 e4          	movzwl -0x1c(%ebp),%edx
c0101396:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c0101397:	8b 45 0c             	mov    0xc(%ebp),%eax
c010139a:	c1 e8 10             	shr    $0x10,%eax
c010139d:	0f b6 c0             	movzbl %al,%eax
c01013a0:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01013a4:	83 c2 05             	add    $0x5,%edx
c01013a7:	0f b7 d2             	movzwl %dx,%edx
c01013aa:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c01013ae:	88 45 db             	mov    %al,-0x25(%ebp)
c01013b1:	0f b6 45 db          	movzbl -0x25(%ebp),%eax
c01013b5:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c01013b9:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c01013ba:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c01013be:	83 e0 01             	and    $0x1,%eax
c01013c1:	c1 e0 04             	shl    $0x4,%eax
c01013c4:	89 c2                	mov    %eax,%edx
c01013c6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01013c9:	c1 e8 18             	shr    $0x18,%eax
c01013cc:	83 e0 0f             	and    $0xf,%eax
c01013cf:	09 d0                	or     %edx,%eax
c01013d1:	83 c8 e0             	or     $0xffffffe0,%eax
c01013d4:	0f b6 c0             	movzbl %al,%eax
c01013d7:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01013db:	83 c2 06             	add    $0x6,%edx
c01013de:	0f b7 d2             	movzwl %dx,%edx
c01013e1:	66 89 55 e0          	mov    %dx,-0x20(%ebp)
c01013e5:	88 45 dc             	mov    %al,-0x24(%ebp)
c01013e8:	0f b6 45 dc          	movzbl -0x24(%ebp),%eax
c01013ec:	0f b7 55 e0          	movzwl -0x20(%ebp),%edx
c01013f0:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_COMMAND, IDE_CMD_READ);
c01013f1:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01013f5:	83 c0 07             	add    $0x7,%eax
c01013f8:	0f b7 c0             	movzwl %ax,%eax
c01013fb:	66 89 45 de          	mov    %ax,-0x22(%ebp)
c01013ff:	c6 45 dd 20          	movb   $0x20,-0x23(%ebp)
c0101403:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0101407:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c010140b:	ee                   	out    %al,(%dx)

    int ret = 0;
c010140c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c0101413:	eb 56                	jmp    c010146b <ide_read_secs+0x217>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c0101415:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101419:	83 ec 08             	sub    $0x8,%esp
c010141c:	6a 01                	push   $0x1
c010141e:	50                   	push   %eax
c010141f:	e8 52 fa ff ff       	call   c0100e76 <ide_wait_ready>
c0101424:	83 c4 10             	add    $0x10,%esp
c0101427:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010142a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010142e:	75 43                	jne    c0101473 <ide_read_secs+0x21f>
            goto out;
        }
        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
c0101430:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101434:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0101437:	8b 45 10             	mov    0x10(%ebp),%eax
c010143a:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010143d:	c7 45 cc 80 00 00 00 	movl   $0x80,-0x34(%ebp)
    return data;
}

static inline void
insl(uint32_t port, void *addr, int cnt) {
    asm volatile (
c0101444:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0101447:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c010144a:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010144d:	89 cb                	mov    %ecx,%ebx
c010144f:	89 df                	mov    %ebx,%edi
c0101451:	89 c1                	mov    %eax,%ecx
c0101453:	fc                   	cld    
c0101454:	f2 6d                	repnz insl (%dx),%es:(%edi)
c0101456:	89 c8                	mov    %ecx,%eax
c0101458:	89 fb                	mov    %edi,%ebx
c010145a:	89 5d d0             	mov    %ebx,-0x30(%ebp)
c010145d:	89 45 cc             	mov    %eax,-0x34(%ebp)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
    outb(iobase + ISA_COMMAND, IDE_CMD_READ);

    int ret = 0;
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c0101460:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0101464:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c010146b:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010146f:	75 a4                	jne    c0101415 <ide_read_secs+0x1c1>
c0101471:	eb 01                	jmp    c0101474 <ide_read_secs+0x220>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
            goto out;
c0101473:	90                   	nop
        }
        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
    }

out:
    return ret;
c0101474:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0101477:	8d 65 f8             	lea    -0x8(%ebp),%esp
c010147a:	5b                   	pop    %ebx
c010147b:	5f                   	pop    %edi
c010147c:	5d                   	pop    %ebp
c010147d:	c3                   	ret    

c010147e <ide_write_secs>:

int
ide_write_secs(unsigned short ideno, uint32_t secno, const void *src, size_t nsecs) {
c010147e:	55                   	push   %ebp
c010147f:	89 e5                	mov    %esp,%ebp
c0101481:	56                   	push   %esi
c0101482:	53                   	push   %ebx
c0101483:	83 ec 40             	sub    $0x40,%esp
c0101486:	8b 45 08             	mov    0x8(%ebp),%eax
c0101489:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c010148d:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c0101494:	77 25                	ja     c01014bb <ide_write_secs+0x3d>
c0101496:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
c010149b:	77 1e                	ja     c01014bb <ide_write_secs+0x3d>
c010149d:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c01014a1:	c1 e0 03             	shl    $0x3,%eax
c01014a4:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c01014ab:	29 c2                	sub    %eax,%edx
c01014ad:	89 d0                	mov    %edx,%eax
c01014af:	05 40 f4 19 c0       	add    $0xc019f440,%eax
c01014b4:	0f b6 00             	movzbl (%eax),%eax
c01014b7:	84 c0                	test   %al,%al
c01014b9:	75 19                	jne    c01014d4 <ide_write_secs+0x56>
c01014bb:	68 78 be 10 c0       	push   $0xc010be78
c01014c0:	68 33 be 10 c0       	push   $0xc010be33
c01014c5:	68 bc 00 00 00       	push   $0xbc
c01014ca:	68 48 be 10 c0       	push   $0xc010be48
c01014cf:	e8 24 ef ff ff       	call   c01003f8 <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c01014d4:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c01014db:	77 0f                	ja     c01014ec <ide_write_secs+0x6e>
c01014dd:	8b 55 0c             	mov    0xc(%ebp),%edx
c01014e0:	8b 45 14             	mov    0x14(%ebp),%eax
c01014e3:	01 d0                	add    %edx,%eax
c01014e5:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c01014ea:	76 19                	jbe    c0101505 <ide_write_secs+0x87>
c01014ec:	68 a0 be 10 c0       	push   $0xc010bea0
c01014f1:	68 33 be 10 c0       	push   $0xc010be33
c01014f6:	68 bd 00 00 00       	push   $0xbd
c01014fb:	68 48 be 10 c0       	push   $0xc010be48
c0101500:	e8 f3 ee ff ff       	call   c01003f8 <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c0101505:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101509:	66 d1 e8             	shr    %ax
c010150c:	0f b7 c0             	movzwl %ax,%eax
c010150f:	0f b7 04 85 e8 bd 10 	movzwl -0x3fef4218(,%eax,4),%eax
c0101516:	c0 
c0101517:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c010151b:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c010151f:	66 d1 e8             	shr    %ax
c0101522:	0f b7 c0             	movzwl %ax,%eax
c0101525:	0f b7 04 85 ea bd 10 	movzwl -0x3fef4216(,%eax,4),%eax
c010152c:	c0 
c010152d:	66 89 45 f0          	mov    %ax,-0x10(%ebp)

    ide_wait_ready(iobase, 0);
c0101531:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101535:	83 ec 08             	sub    $0x8,%esp
c0101538:	6a 00                	push   $0x0
c010153a:	50                   	push   %eax
c010153b:	e8 36 f9 ff ff       	call   c0100e76 <ide_wait_ready>
c0101540:	83 c4 10             	add    $0x10,%esp

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c0101543:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c0101547:	83 c0 02             	add    $0x2,%eax
c010154a:	0f b7 c0             	movzwl %ax,%eax
c010154d:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
c0101551:	c6 45 d7 00          	movb   $0x0,-0x29(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101555:	0f b6 45 d7          	movzbl -0x29(%ebp),%eax
c0101559:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c010155d:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECCNT, nsecs);
c010155e:	8b 45 14             	mov    0x14(%ebp),%eax
c0101561:	0f b6 c0             	movzbl %al,%eax
c0101564:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101568:	83 c2 02             	add    $0x2,%edx
c010156b:	0f b7 d2             	movzwl %dx,%edx
c010156e:	66 89 55 e8          	mov    %dx,-0x18(%ebp)
c0101572:	88 45 d8             	mov    %al,-0x28(%ebp)
c0101575:	0f b6 45 d8          	movzbl -0x28(%ebp),%eax
c0101579:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c010157d:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c010157e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101581:	0f b6 c0             	movzbl %al,%eax
c0101584:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101588:	83 c2 03             	add    $0x3,%edx
c010158b:	0f b7 d2             	movzwl %dx,%edx
c010158e:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c0101592:	88 45 d9             	mov    %al,-0x27(%ebp)
c0101595:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c0101599:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c010159d:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c010159e:	8b 45 0c             	mov    0xc(%ebp),%eax
c01015a1:	c1 e8 08             	shr    $0x8,%eax
c01015a4:	0f b6 c0             	movzbl %al,%eax
c01015a7:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01015ab:	83 c2 04             	add    $0x4,%edx
c01015ae:	0f b7 d2             	movzwl %dx,%edx
c01015b1:	66 89 55 e4          	mov    %dx,-0x1c(%ebp)
c01015b5:	88 45 da             	mov    %al,-0x26(%ebp)
c01015b8:	0f b6 45 da          	movzbl -0x26(%ebp),%eax
c01015bc:	0f b7 55 e4          	movzwl -0x1c(%ebp),%edx
c01015c0:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c01015c1:	8b 45 0c             	mov    0xc(%ebp),%eax
c01015c4:	c1 e8 10             	shr    $0x10,%eax
c01015c7:	0f b6 c0             	movzbl %al,%eax
c01015ca:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01015ce:	83 c2 05             	add    $0x5,%edx
c01015d1:	0f b7 d2             	movzwl %dx,%edx
c01015d4:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c01015d8:	88 45 db             	mov    %al,-0x25(%ebp)
c01015db:	0f b6 45 db          	movzbl -0x25(%ebp),%eax
c01015df:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c01015e3:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c01015e4:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c01015e8:	83 e0 01             	and    $0x1,%eax
c01015eb:	c1 e0 04             	shl    $0x4,%eax
c01015ee:	89 c2                	mov    %eax,%edx
c01015f0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01015f3:	c1 e8 18             	shr    $0x18,%eax
c01015f6:	83 e0 0f             	and    $0xf,%eax
c01015f9:	09 d0                	or     %edx,%eax
c01015fb:	83 c8 e0             	or     $0xffffffe0,%eax
c01015fe:	0f b6 c0             	movzbl %al,%eax
c0101601:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101605:	83 c2 06             	add    $0x6,%edx
c0101608:	0f b7 d2             	movzwl %dx,%edx
c010160b:	66 89 55 e0          	mov    %dx,-0x20(%ebp)
c010160f:	88 45 dc             	mov    %al,-0x24(%ebp)
c0101612:	0f b6 45 dc          	movzbl -0x24(%ebp),%eax
c0101616:	0f b7 55 e0          	movzwl -0x20(%ebp),%edx
c010161a:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);
c010161b:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c010161f:	83 c0 07             	add    $0x7,%eax
c0101622:	0f b7 c0             	movzwl %ax,%eax
c0101625:	66 89 45 de          	mov    %ax,-0x22(%ebp)
c0101629:	c6 45 dd 30          	movb   $0x30,-0x23(%ebp)
c010162d:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0101631:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c0101635:	ee                   	out    %al,(%dx)

    int ret = 0;
c0101636:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c010163d:	eb 56                	jmp    c0101695 <ide_write_secs+0x217>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c010163f:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101643:	83 ec 08             	sub    $0x8,%esp
c0101646:	6a 01                	push   $0x1
c0101648:	50                   	push   %eax
c0101649:	e8 28 f8 ff ff       	call   c0100e76 <ide_wait_ready>
c010164e:	83 c4 10             	add    $0x10,%esp
c0101651:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0101654:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0101658:	75 43                	jne    c010169d <ide_write_secs+0x21f>
            goto out;
        }
        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
c010165a:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c010165e:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0101661:	8b 45 10             	mov    0x10(%ebp),%eax
c0101664:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0101667:	c7 45 cc 80 00 00 00 	movl   $0x80,-0x34(%ebp)
    asm volatile ("outw %0, %1" :: "a" (data), "d" (port) : "memory");
}

static inline void
outsl(uint32_t port, const void *addr, int cnt) {
    asm volatile (
c010166e:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0101671:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c0101674:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0101677:	89 cb                	mov    %ecx,%ebx
c0101679:	89 de                	mov    %ebx,%esi
c010167b:	89 c1                	mov    %eax,%ecx
c010167d:	fc                   	cld    
c010167e:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
c0101680:	89 c8                	mov    %ecx,%eax
c0101682:	89 f3                	mov    %esi,%ebx
c0101684:	89 5d d0             	mov    %ebx,-0x30(%ebp)
c0101687:	89 45 cc             	mov    %eax,-0x34(%ebp)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);

    int ret = 0;
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c010168a:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c010168e:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c0101695:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0101699:	75 a4                	jne    c010163f <ide_write_secs+0x1c1>
c010169b:	eb 01                	jmp    c010169e <ide_write_secs+0x220>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
            goto out;
c010169d:	90                   	nop
        }
        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
    }

out:
    return ret;
c010169e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01016a1:	8d 65 f8             	lea    -0x8(%ebp),%esp
c01016a4:	5b                   	pop    %ebx
c01016a5:	5e                   	pop    %esi
c01016a6:	5d                   	pop    %ebp
c01016a7:	c3                   	ret    

c01016a8 <clock_init>:
/* *
 * clock_init - initialize 8253 clock to interrupt 100 times per second,
 * and then enable IRQ_TIMER.
 * */
void
clock_init(void) {
c01016a8:	55                   	push   %ebp
c01016a9:	89 e5                	mov    %esp,%ebp
c01016ab:	83 ec 18             	sub    $0x18,%esp
c01016ae:	66 c7 45 f6 43 00    	movw   $0x43,-0xa(%ebp)
c01016b4:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01016b8:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
c01016bc:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c01016c0:	ee                   	out    %al,(%dx)
c01016c1:	66 c7 45 f4 40 00    	movw   $0x40,-0xc(%ebp)
c01016c7:	c6 45 f0 9c          	movb   $0x9c,-0x10(%ebp)
c01016cb:	0f b6 45 f0          	movzbl -0x10(%ebp),%eax
c01016cf:	0f b7 55 f4          	movzwl -0xc(%ebp),%edx
c01016d3:	ee                   	out    %al,(%dx)
c01016d4:	66 c7 45 f2 40 00    	movw   $0x40,-0xe(%ebp)
c01016da:	c6 45 f1 2e          	movb   $0x2e,-0xf(%ebp)
c01016de:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c01016e2:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01016e6:	ee                   	out    %al,(%dx)
    outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
    outb(IO_TIMER1, TIMER_DIV(100) % 256);
    outb(IO_TIMER1, TIMER_DIV(100) / 256);

    // initialize time counter 'ticks' to zero
    ticks = 0;
c01016e7:	c7 05 54 20 1a c0 00 	movl   $0x0,0xc01a2054
c01016ee:	00 00 00 

    cprintf("++ setup timer interrupts\n");
c01016f1:	83 ec 0c             	sub    $0xc,%esp
c01016f4:	68 da be 10 c0       	push   $0xc010beda
c01016f9:	e8 94 eb ff ff       	call   c0100292 <cprintf>
c01016fe:	83 c4 10             	add    $0x10,%esp
    pic_enable(IRQ_TIMER);
c0101701:	83 ec 0c             	sub    $0xc,%esp
c0101704:	6a 00                	push   $0x0
c0101706:	e8 3b 09 00 00       	call   c0102046 <pic_enable>
c010170b:	83 c4 10             	add    $0x10,%esp
}
c010170e:	90                   	nop
c010170f:	c9                   	leave  
c0101710:	c3                   	ret    

c0101711 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0101711:	55                   	push   %ebp
c0101712:	89 e5                	mov    %esp,%ebp
c0101714:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0101717:	9c                   	pushf  
c0101718:	58                   	pop    %eax
c0101719:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010171c:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010171f:	25 00 02 00 00       	and    $0x200,%eax
c0101724:	85 c0                	test   %eax,%eax
c0101726:	74 0c                	je     c0101734 <__intr_save+0x23>
        intr_disable();
c0101728:	e8 8a 0a 00 00       	call   c01021b7 <intr_disable>
        return 1;
c010172d:	b8 01 00 00 00       	mov    $0x1,%eax
c0101732:	eb 05                	jmp    c0101739 <__intr_save+0x28>
    }
    return 0;
c0101734:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101739:	c9                   	leave  
c010173a:	c3                   	ret    

c010173b <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010173b:	55                   	push   %ebp
c010173c:	89 e5                	mov    %esp,%ebp
c010173e:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0101741:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0101745:	74 05                	je     c010174c <__intr_restore+0x11>
        intr_enable();
c0101747:	e8 64 0a 00 00       	call   c01021b0 <intr_enable>
    }
}
c010174c:	90                   	nop
c010174d:	c9                   	leave  
c010174e:	c3                   	ret    

c010174f <delay>:
#include <memlayout.h>
#include <sync.h>

/* stupid I/O delay routine necessitated by historical PC design flaws */
static void
delay(void) {
c010174f:	55                   	push   %ebp
c0101750:	89 e5                	mov    %esp,%ebp
c0101752:	83 ec 10             	sub    $0x10,%esp
c0101755:	66 c7 45 fe 84 00    	movw   $0x84,-0x2(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c010175b:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c010175f:	89 c2                	mov    %eax,%edx
c0101761:	ec                   	in     (%dx),%al
c0101762:	88 45 f4             	mov    %al,-0xc(%ebp)
c0101765:	66 c7 45 fc 84 00    	movw   $0x84,-0x4(%ebp)
c010176b:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c010176f:	89 c2                	mov    %eax,%edx
c0101771:	ec                   	in     (%dx),%al
c0101772:	88 45 f5             	mov    %al,-0xb(%ebp)
c0101775:	66 c7 45 fa 84 00    	movw   $0x84,-0x6(%ebp)
c010177b:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c010177f:	89 c2                	mov    %eax,%edx
c0101781:	ec                   	in     (%dx),%al
c0101782:	88 45 f6             	mov    %al,-0xa(%ebp)
c0101785:	66 c7 45 f8 84 00    	movw   $0x84,-0x8(%ebp)
c010178b:	0f b7 45 f8          	movzwl -0x8(%ebp),%eax
c010178f:	89 c2                	mov    %eax,%edx
c0101791:	ec                   	in     (%dx),%al
c0101792:	88 45 f7             	mov    %al,-0x9(%ebp)
    inb(0x84);
    inb(0x84);
    inb(0x84);
    inb(0x84);
}
c0101795:	90                   	nop
c0101796:	c9                   	leave  
c0101797:	c3                   	ret    

c0101798 <cga_init>:
static uint16_t addr_6845;

/* TEXT-mode CGA/VGA display output */

static void
cga_init(void) {
c0101798:	55                   	push   %ebp
c0101799:	89 e5                	mov    %esp,%ebp
c010179b:	83 ec 20             	sub    $0x20,%esp
    volatile uint16_t *cp = (uint16_t *)(CGA_BUF + KERNBASE);
c010179e:	c7 45 fc 00 80 0b c0 	movl   $0xc00b8000,-0x4(%ebp)
    uint16_t was = *cp;
c01017a5:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01017a8:	0f b7 00             	movzwl (%eax),%eax
c01017ab:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    *cp = (uint16_t) 0xA55A;
c01017af:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01017b2:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
    if (*cp != 0xA55A) {
c01017b7:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01017ba:	0f b7 00             	movzwl (%eax),%eax
c01017bd:	66 3d 5a a5          	cmp    $0xa55a,%ax
c01017c1:	74 12                	je     c01017d5 <cga_init+0x3d>
        cp = (uint16_t*)(MONO_BUF + KERNBASE);
c01017c3:	c7 45 fc 00 00 0b c0 	movl   $0xc00b0000,-0x4(%ebp)
        addr_6845 = MONO_BASE;
c01017ca:	66 c7 05 26 f5 19 c0 	movw   $0x3b4,0xc019f526
c01017d1:	b4 03 
c01017d3:	eb 13                	jmp    c01017e8 <cga_init+0x50>
    } else {
        *cp = was;
c01017d5:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01017d8:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c01017dc:	66 89 10             	mov    %dx,(%eax)
        addr_6845 = CGA_BASE;
c01017df:	66 c7 05 26 f5 19 c0 	movw   $0x3d4,0xc019f526
c01017e6:	d4 03 
    }

    // Extract cursor location
    uint32_t pos;
    outb(addr_6845, 14);
c01017e8:	0f b7 05 26 f5 19 c0 	movzwl 0xc019f526,%eax
c01017ef:	0f b7 c0             	movzwl %ax,%eax
c01017f2:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
c01017f6:	c6 45 ea 0e          	movb   $0xe,-0x16(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01017fa:	0f b6 45 ea          	movzbl -0x16(%ebp),%eax
c01017fe:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
c0101802:	ee                   	out    %al,(%dx)
    pos = inb(addr_6845 + 1) << 8;
c0101803:	0f b7 05 26 f5 19 c0 	movzwl 0xc019f526,%eax
c010180a:	83 c0 01             	add    $0x1,%eax
c010180d:	0f b7 c0             	movzwl %ax,%eax
c0101810:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101814:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101818:	89 c2                	mov    %eax,%edx
c010181a:	ec                   	in     (%dx),%al
c010181b:	88 45 eb             	mov    %al,-0x15(%ebp)
    return data;
c010181e:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
c0101822:	0f b6 c0             	movzbl %al,%eax
c0101825:	c1 e0 08             	shl    $0x8,%eax
c0101828:	89 45 f4             	mov    %eax,-0xc(%ebp)
    outb(addr_6845, 15);
c010182b:	0f b7 05 26 f5 19 c0 	movzwl 0xc019f526,%eax
c0101832:	0f b7 c0             	movzwl %ax,%eax
c0101835:	66 89 45 f0          	mov    %ax,-0x10(%ebp)
c0101839:	c6 45 ec 0f          	movb   $0xf,-0x14(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010183d:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
c0101841:	0f b7 55 f0          	movzwl -0x10(%ebp),%edx
c0101845:	ee                   	out    %al,(%dx)
    pos |= inb(addr_6845 + 1);
c0101846:	0f b7 05 26 f5 19 c0 	movzwl 0xc019f526,%eax
c010184d:	83 c0 01             	add    $0x1,%eax
c0101850:	0f b7 c0             	movzwl %ax,%eax
c0101853:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101857:	0f b7 45 ee          	movzwl -0x12(%ebp),%eax
c010185b:	89 c2                	mov    %eax,%edx
c010185d:	ec                   	in     (%dx),%al
c010185e:	88 45 ed             	mov    %al,-0x13(%ebp)
    return data;
c0101861:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101865:	0f b6 c0             	movzbl %al,%eax
c0101868:	09 45 f4             	or     %eax,-0xc(%ebp)

    crt_buf = (uint16_t*) cp;
c010186b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010186e:	a3 20 f5 19 c0       	mov    %eax,0xc019f520
    crt_pos = pos;
c0101873:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101876:	66 a3 24 f5 19 c0    	mov    %ax,0xc019f524
}
c010187c:	90                   	nop
c010187d:	c9                   	leave  
c010187e:	c3                   	ret    

c010187f <serial_init>:

static bool serial_exists = 0;

static void
serial_init(void) {
c010187f:	55                   	push   %ebp
c0101880:	89 e5                	mov    %esp,%ebp
c0101882:	83 ec 28             	sub    $0x28,%esp
c0101885:	66 c7 45 f6 fa 03    	movw   $0x3fa,-0xa(%ebp)
c010188b:	c6 45 da 00          	movb   $0x0,-0x26(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010188f:	0f b6 45 da          	movzbl -0x26(%ebp),%eax
c0101893:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0101897:	ee                   	out    %al,(%dx)
c0101898:	66 c7 45 f4 fb 03    	movw   $0x3fb,-0xc(%ebp)
c010189e:	c6 45 db 80          	movb   $0x80,-0x25(%ebp)
c01018a2:	0f b6 45 db          	movzbl -0x25(%ebp),%eax
c01018a6:	0f b7 55 f4          	movzwl -0xc(%ebp),%edx
c01018aa:	ee                   	out    %al,(%dx)
c01018ab:	66 c7 45 f2 f8 03    	movw   $0x3f8,-0xe(%ebp)
c01018b1:	c6 45 dc 0c          	movb   $0xc,-0x24(%ebp)
c01018b5:	0f b6 45 dc          	movzbl -0x24(%ebp),%eax
c01018b9:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01018bd:	ee                   	out    %al,(%dx)
c01018be:	66 c7 45 f0 f9 03    	movw   $0x3f9,-0x10(%ebp)
c01018c4:	c6 45 dd 00          	movb   $0x0,-0x23(%ebp)
c01018c8:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c01018cc:	0f b7 55 f0          	movzwl -0x10(%ebp),%edx
c01018d0:	ee                   	out    %al,(%dx)
c01018d1:	66 c7 45 ee fb 03    	movw   $0x3fb,-0x12(%ebp)
c01018d7:	c6 45 de 03          	movb   $0x3,-0x22(%ebp)
c01018db:	0f b6 45 de          	movzbl -0x22(%ebp),%eax
c01018df:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c01018e3:	ee                   	out    %al,(%dx)
c01018e4:	66 c7 45 ec fc 03    	movw   $0x3fc,-0x14(%ebp)
c01018ea:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
c01018ee:	0f b6 45 df          	movzbl -0x21(%ebp),%eax
c01018f2:	0f b7 55 ec          	movzwl -0x14(%ebp),%edx
c01018f6:	ee                   	out    %al,(%dx)
c01018f7:	66 c7 45 ea f9 03    	movw   $0x3f9,-0x16(%ebp)
c01018fd:	c6 45 e0 01          	movb   $0x1,-0x20(%ebp)
c0101901:	0f b6 45 e0          	movzbl -0x20(%ebp),%eax
c0101905:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101909:	ee                   	out    %al,(%dx)
c010190a:	66 c7 45 e8 fd 03    	movw   $0x3fd,-0x18(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101910:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
c0101914:	89 c2                	mov    %eax,%edx
c0101916:	ec                   	in     (%dx),%al
c0101917:	88 45 e1             	mov    %al,-0x1f(%ebp)
    return data;
c010191a:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
    // Enable rcv interrupts
    outb(COM1 + COM_IER, COM_IER_RDI);

    // Clear any preexisting overrun indications and interrupts
    // Serial port doesn't exist if COM_LSR returns 0xFF
    serial_exists = (inb(COM1 + COM_LSR) != 0xFF);
c010191e:	3c ff                	cmp    $0xff,%al
c0101920:	0f 95 c0             	setne  %al
c0101923:	0f b6 c0             	movzbl %al,%eax
c0101926:	a3 28 f5 19 c0       	mov    %eax,0xc019f528
c010192b:	66 c7 45 e6 fa 03    	movw   $0x3fa,-0x1a(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101931:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c0101935:	89 c2                	mov    %eax,%edx
c0101937:	ec                   	in     (%dx),%al
c0101938:	88 45 e2             	mov    %al,-0x1e(%ebp)
c010193b:	66 c7 45 e4 f8 03    	movw   $0x3f8,-0x1c(%ebp)
c0101941:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
c0101945:	89 c2                	mov    %eax,%edx
c0101947:	ec                   	in     (%dx),%al
c0101948:	88 45 e3             	mov    %al,-0x1d(%ebp)
    (void) inb(COM1+COM_IIR);
    (void) inb(COM1+COM_RX);

    if (serial_exists) {
c010194b:	a1 28 f5 19 c0       	mov    0xc019f528,%eax
c0101950:	85 c0                	test   %eax,%eax
c0101952:	74 0d                	je     c0101961 <serial_init+0xe2>
        pic_enable(IRQ_COM1);
c0101954:	83 ec 0c             	sub    $0xc,%esp
c0101957:	6a 04                	push   $0x4
c0101959:	e8 e8 06 00 00       	call   c0102046 <pic_enable>
c010195e:	83 c4 10             	add    $0x10,%esp
    }
}
c0101961:	90                   	nop
c0101962:	c9                   	leave  
c0101963:	c3                   	ret    

c0101964 <lpt_putc_sub>:

static void
lpt_putc_sub(int c) {
c0101964:	55                   	push   %ebp
c0101965:	89 e5                	mov    %esp,%ebp
c0101967:	83 ec 10             	sub    $0x10,%esp
    int i;
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c010196a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0101971:	eb 09                	jmp    c010197c <lpt_putc_sub+0x18>
        delay();
c0101973:	e8 d7 fd ff ff       	call   c010174f <delay>
}

static void
lpt_putc_sub(int c) {
    int i;
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c0101978:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010197c:	66 c7 45 f4 79 03    	movw   $0x379,-0xc(%ebp)
c0101982:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c0101986:	89 c2                	mov    %eax,%edx
c0101988:	ec                   	in     (%dx),%al
c0101989:	88 45 f3             	mov    %al,-0xd(%ebp)
    return data;
c010198c:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101990:	84 c0                	test   %al,%al
c0101992:	78 09                	js     c010199d <lpt_putc_sub+0x39>
c0101994:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
c010199b:	7e d6                	jle    c0101973 <lpt_putc_sub+0xf>
        delay();
    }
    outb(LPTPORT + 0, c);
c010199d:	8b 45 08             	mov    0x8(%ebp),%eax
c01019a0:	0f b6 c0             	movzbl %al,%eax
c01019a3:	66 c7 45 f8 78 03    	movw   $0x378,-0x8(%ebp)
c01019a9:	88 45 f0             	mov    %al,-0x10(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01019ac:	0f b6 45 f0          	movzbl -0x10(%ebp),%eax
c01019b0:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
c01019b4:	ee                   	out    %al,(%dx)
c01019b5:	66 c7 45 f6 7a 03    	movw   $0x37a,-0xa(%ebp)
c01019bb:	c6 45 f1 0d          	movb   $0xd,-0xf(%ebp)
c01019bf:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c01019c3:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c01019c7:	ee                   	out    %al,(%dx)
c01019c8:	66 c7 45 fa 7a 03    	movw   $0x37a,-0x6(%ebp)
c01019ce:	c6 45 f2 08          	movb   $0x8,-0xe(%ebp)
c01019d2:	0f b6 45 f2          	movzbl -0xe(%ebp),%eax
c01019d6:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c01019da:	ee                   	out    %al,(%dx)
    outb(LPTPORT + 2, 0x08 | 0x04 | 0x01);
    outb(LPTPORT + 2, 0x08);
}
c01019db:	90                   	nop
c01019dc:	c9                   	leave  
c01019dd:	c3                   	ret    

c01019de <lpt_putc>:

/* lpt_putc - copy console output to parallel port */
static void
lpt_putc(int c) {
c01019de:	55                   	push   %ebp
c01019df:	89 e5                	mov    %esp,%ebp
    if (c != '\b') {
c01019e1:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c01019e5:	74 0d                	je     c01019f4 <lpt_putc+0x16>
        lpt_putc_sub(c);
c01019e7:	ff 75 08             	pushl  0x8(%ebp)
c01019ea:	e8 75 ff ff ff       	call   c0101964 <lpt_putc_sub>
c01019ef:	83 c4 04             	add    $0x4,%esp
    else {
        lpt_putc_sub('\b');
        lpt_putc_sub(' ');
        lpt_putc_sub('\b');
    }
}
c01019f2:	eb 1e                	jmp    c0101a12 <lpt_putc+0x34>
lpt_putc(int c) {
    if (c != '\b') {
        lpt_putc_sub(c);
    }
    else {
        lpt_putc_sub('\b');
c01019f4:	6a 08                	push   $0x8
c01019f6:	e8 69 ff ff ff       	call   c0101964 <lpt_putc_sub>
c01019fb:	83 c4 04             	add    $0x4,%esp
        lpt_putc_sub(' ');
c01019fe:	6a 20                	push   $0x20
c0101a00:	e8 5f ff ff ff       	call   c0101964 <lpt_putc_sub>
c0101a05:	83 c4 04             	add    $0x4,%esp
        lpt_putc_sub('\b');
c0101a08:	6a 08                	push   $0x8
c0101a0a:	e8 55 ff ff ff       	call   c0101964 <lpt_putc_sub>
c0101a0f:	83 c4 04             	add    $0x4,%esp
    }
}
c0101a12:	90                   	nop
c0101a13:	c9                   	leave  
c0101a14:	c3                   	ret    

c0101a15 <cga_putc>:

/* cga_putc - print character to console */
static void
cga_putc(int c) {
c0101a15:	55                   	push   %ebp
c0101a16:	89 e5                	mov    %esp,%ebp
c0101a18:	53                   	push   %ebx
c0101a19:	83 ec 14             	sub    $0x14,%esp
    // set black on white
    if (!(c & ~0xFF)) {
c0101a1c:	8b 45 08             	mov    0x8(%ebp),%eax
c0101a1f:	b0 00                	mov    $0x0,%al
c0101a21:	85 c0                	test   %eax,%eax
c0101a23:	75 07                	jne    c0101a2c <cga_putc+0x17>
        c |= 0x0700;
c0101a25:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)
    }

    switch (c & 0xff) {
c0101a2c:	8b 45 08             	mov    0x8(%ebp),%eax
c0101a2f:	0f b6 c0             	movzbl %al,%eax
c0101a32:	83 f8 0a             	cmp    $0xa,%eax
c0101a35:	74 4e                	je     c0101a85 <cga_putc+0x70>
c0101a37:	83 f8 0d             	cmp    $0xd,%eax
c0101a3a:	74 59                	je     c0101a95 <cga_putc+0x80>
c0101a3c:	83 f8 08             	cmp    $0x8,%eax
c0101a3f:	0f 85 8a 00 00 00    	jne    c0101acf <cga_putc+0xba>
    case '\b':
        if (crt_pos > 0) {
c0101a45:	0f b7 05 24 f5 19 c0 	movzwl 0xc019f524,%eax
c0101a4c:	66 85 c0             	test   %ax,%ax
c0101a4f:	0f 84 a0 00 00 00    	je     c0101af5 <cga_putc+0xe0>
            crt_pos --;
c0101a55:	0f b7 05 24 f5 19 c0 	movzwl 0xc019f524,%eax
c0101a5c:	83 e8 01             	sub    $0x1,%eax
c0101a5f:	66 a3 24 f5 19 c0    	mov    %ax,0xc019f524
            crt_buf[crt_pos] = (c & ~0xff) | ' ';
c0101a65:	a1 20 f5 19 c0       	mov    0xc019f520,%eax
c0101a6a:	0f b7 15 24 f5 19 c0 	movzwl 0xc019f524,%edx
c0101a71:	0f b7 d2             	movzwl %dx,%edx
c0101a74:	01 d2                	add    %edx,%edx
c0101a76:	01 d0                	add    %edx,%eax
c0101a78:	8b 55 08             	mov    0x8(%ebp),%edx
c0101a7b:	b2 00                	mov    $0x0,%dl
c0101a7d:	83 ca 20             	or     $0x20,%edx
c0101a80:	66 89 10             	mov    %dx,(%eax)
        }
        break;
c0101a83:	eb 70                	jmp    c0101af5 <cga_putc+0xe0>
    case '\n':
        crt_pos += CRT_COLS;
c0101a85:	0f b7 05 24 f5 19 c0 	movzwl 0xc019f524,%eax
c0101a8c:	83 c0 50             	add    $0x50,%eax
c0101a8f:	66 a3 24 f5 19 c0    	mov    %ax,0xc019f524
    case '\r':
        crt_pos -= (crt_pos % CRT_COLS);
c0101a95:	0f b7 1d 24 f5 19 c0 	movzwl 0xc019f524,%ebx
c0101a9c:	0f b7 0d 24 f5 19 c0 	movzwl 0xc019f524,%ecx
c0101aa3:	0f b7 c1             	movzwl %cx,%eax
c0101aa6:	69 c0 cd cc 00 00    	imul   $0xcccd,%eax,%eax
c0101aac:	c1 e8 10             	shr    $0x10,%eax
c0101aaf:	89 c2                	mov    %eax,%edx
c0101ab1:	66 c1 ea 06          	shr    $0x6,%dx
c0101ab5:	89 d0                	mov    %edx,%eax
c0101ab7:	c1 e0 02             	shl    $0x2,%eax
c0101aba:	01 d0                	add    %edx,%eax
c0101abc:	c1 e0 04             	shl    $0x4,%eax
c0101abf:	29 c1                	sub    %eax,%ecx
c0101ac1:	89 ca                	mov    %ecx,%edx
c0101ac3:	89 d8                	mov    %ebx,%eax
c0101ac5:	29 d0                	sub    %edx,%eax
c0101ac7:	66 a3 24 f5 19 c0    	mov    %ax,0xc019f524
        break;
c0101acd:	eb 27                	jmp    c0101af6 <cga_putc+0xe1>
    default:
        crt_buf[crt_pos ++] = c;     // write the character
c0101acf:	8b 0d 20 f5 19 c0    	mov    0xc019f520,%ecx
c0101ad5:	0f b7 05 24 f5 19 c0 	movzwl 0xc019f524,%eax
c0101adc:	8d 50 01             	lea    0x1(%eax),%edx
c0101adf:	66 89 15 24 f5 19 c0 	mov    %dx,0xc019f524
c0101ae6:	0f b7 c0             	movzwl %ax,%eax
c0101ae9:	01 c0                	add    %eax,%eax
c0101aeb:	01 c8                	add    %ecx,%eax
c0101aed:	8b 55 08             	mov    0x8(%ebp),%edx
c0101af0:	66 89 10             	mov    %dx,(%eax)
        break;
c0101af3:	eb 01                	jmp    c0101af6 <cga_putc+0xe1>
    case '\b':
        if (crt_pos > 0) {
            crt_pos --;
            crt_buf[crt_pos] = (c & ~0xff) | ' ';
        }
        break;
c0101af5:	90                   	nop
        crt_buf[crt_pos ++] = c;     // write the character
        break;
    }

    // What is the purpose of this?
    if (crt_pos >= CRT_SIZE) {
c0101af6:	0f b7 05 24 f5 19 c0 	movzwl 0xc019f524,%eax
c0101afd:	66 3d cf 07          	cmp    $0x7cf,%ax
c0101b01:	76 59                	jbe    c0101b5c <cga_putc+0x147>
        int i;
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
c0101b03:	a1 20 f5 19 c0       	mov    0xc019f520,%eax
c0101b08:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
c0101b0e:	a1 20 f5 19 c0       	mov    0xc019f520,%eax
c0101b13:	83 ec 04             	sub    $0x4,%esp
c0101b16:	68 00 0f 00 00       	push   $0xf00
c0101b1b:	52                   	push   %edx
c0101b1c:	50                   	push   %eax
c0101b1d:	e8 45 97 00 00       	call   c010b267 <memmove>
c0101b22:	83 c4 10             	add    $0x10,%esp
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c0101b25:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
c0101b2c:	eb 15                	jmp    c0101b43 <cga_putc+0x12e>
            crt_buf[i] = 0x0700 | ' ';
c0101b2e:	a1 20 f5 19 c0       	mov    0xc019f520,%eax
c0101b33:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0101b36:	01 d2                	add    %edx,%edx
c0101b38:	01 d0                	add    %edx,%eax
c0101b3a:	66 c7 00 20 07       	movw   $0x720,(%eax)

    // What is the purpose of this?
    if (crt_pos >= CRT_SIZE) {
        int i;
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c0101b3f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0101b43:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
c0101b4a:	7e e2                	jle    c0101b2e <cga_putc+0x119>
            crt_buf[i] = 0x0700 | ' ';
        }
        crt_pos -= CRT_COLS;
c0101b4c:	0f b7 05 24 f5 19 c0 	movzwl 0xc019f524,%eax
c0101b53:	83 e8 50             	sub    $0x50,%eax
c0101b56:	66 a3 24 f5 19 c0    	mov    %ax,0xc019f524
    }

    // move that little blinky thing
    outb(addr_6845, 14);
c0101b5c:	0f b7 05 26 f5 19 c0 	movzwl 0xc019f526,%eax
c0101b63:	0f b7 c0             	movzwl %ax,%eax
c0101b66:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0101b6a:	c6 45 e8 0e          	movb   $0xe,-0x18(%ebp)
c0101b6e:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
c0101b72:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101b76:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos >> 8);
c0101b77:	0f b7 05 24 f5 19 c0 	movzwl 0xc019f524,%eax
c0101b7e:	66 c1 e8 08          	shr    $0x8,%ax
c0101b82:	0f b6 c0             	movzbl %al,%eax
c0101b85:	0f b7 15 26 f5 19 c0 	movzwl 0xc019f526,%edx
c0101b8c:	83 c2 01             	add    $0x1,%edx
c0101b8f:	0f b7 d2             	movzwl %dx,%edx
c0101b92:	66 89 55 f0          	mov    %dx,-0x10(%ebp)
c0101b96:	88 45 e9             	mov    %al,-0x17(%ebp)
c0101b99:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101b9d:	0f b7 55 f0          	movzwl -0x10(%ebp),%edx
c0101ba1:	ee                   	out    %al,(%dx)
    outb(addr_6845, 15);
c0101ba2:	0f b7 05 26 f5 19 c0 	movzwl 0xc019f526,%eax
c0101ba9:	0f b7 c0             	movzwl %ax,%eax
c0101bac:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
c0101bb0:	c6 45 ea 0f          	movb   $0xf,-0x16(%ebp)
c0101bb4:	0f b6 45 ea          	movzbl -0x16(%ebp),%eax
c0101bb8:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101bbc:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos);
c0101bbd:	0f b7 05 24 f5 19 c0 	movzwl 0xc019f524,%eax
c0101bc4:	0f b6 c0             	movzbl %al,%eax
c0101bc7:	0f b7 15 26 f5 19 c0 	movzwl 0xc019f526,%edx
c0101bce:	83 c2 01             	add    $0x1,%edx
c0101bd1:	0f b7 d2             	movzwl %dx,%edx
c0101bd4:	66 89 55 ec          	mov    %dx,-0x14(%ebp)
c0101bd8:	88 45 eb             	mov    %al,-0x15(%ebp)
c0101bdb:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
c0101bdf:	0f b7 55 ec          	movzwl -0x14(%ebp),%edx
c0101be3:	ee                   	out    %al,(%dx)
}
c0101be4:	90                   	nop
c0101be5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0101be8:	c9                   	leave  
c0101be9:	c3                   	ret    

c0101bea <serial_putc_sub>:

static void
serial_putc_sub(int c) {
c0101bea:	55                   	push   %ebp
c0101beb:	89 e5                	mov    %esp,%ebp
c0101bed:	83 ec 10             	sub    $0x10,%esp
    int i;
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c0101bf0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0101bf7:	eb 09                	jmp    c0101c02 <serial_putc_sub+0x18>
        delay();
c0101bf9:	e8 51 fb ff ff       	call   c010174f <delay>
}

static void
serial_putc_sub(int c) {
    int i;
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c0101bfe:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0101c02:	66 c7 45 f8 fd 03    	movw   $0x3fd,-0x8(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101c08:	0f b7 45 f8          	movzwl -0x8(%ebp),%eax
c0101c0c:	89 c2                	mov    %eax,%edx
c0101c0e:	ec                   	in     (%dx),%al
c0101c0f:	88 45 f7             	mov    %al,-0x9(%ebp)
    return data;
c0101c12:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0101c16:	0f b6 c0             	movzbl %al,%eax
c0101c19:	83 e0 20             	and    $0x20,%eax
c0101c1c:	85 c0                	test   %eax,%eax
c0101c1e:	75 09                	jne    c0101c29 <serial_putc_sub+0x3f>
c0101c20:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
c0101c27:	7e d0                	jle    c0101bf9 <serial_putc_sub+0xf>
        delay();
    }
    outb(COM1 + COM_TX, c);
c0101c29:	8b 45 08             	mov    0x8(%ebp),%eax
c0101c2c:	0f b6 c0             	movzbl %al,%eax
c0101c2f:	66 c7 45 fa f8 03    	movw   $0x3f8,-0x6(%ebp)
c0101c35:	88 45 f6             	mov    %al,-0xa(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101c38:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
c0101c3c:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c0101c40:	ee                   	out    %al,(%dx)
}
c0101c41:	90                   	nop
c0101c42:	c9                   	leave  
c0101c43:	c3                   	ret    

c0101c44 <serial_putc>:

/* serial_putc - print character to serial port */
static void
serial_putc(int c) {
c0101c44:	55                   	push   %ebp
c0101c45:	89 e5                	mov    %esp,%ebp
    if (c != '\b') {
c0101c47:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c0101c4b:	74 0d                	je     c0101c5a <serial_putc+0x16>
        serial_putc_sub(c);
c0101c4d:	ff 75 08             	pushl  0x8(%ebp)
c0101c50:	e8 95 ff ff ff       	call   c0101bea <serial_putc_sub>
c0101c55:	83 c4 04             	add    $0x4,%esp
    else {
        serial_putc_sub('\b');
        serial_putc_sub(' ');
        serial_putc_sub('\b');
    }
}
c0101c58:	eb 1e                	jmp    c0101c78 <serial_putc+0x34>
serial_putc(int c) {
    if (c != '\b') {
        serial_putc_sub(c);
    }
    else {
        serial_putc_sub('\b');
c0101c5a:	6a 08                	push   $0x8
c0101c5c:	e8 89 ff ff ff       	call   c0101bea <serial_putc_sub>
c0101c61:	83 c4 04             	add    $0x4,%esp
        serial_putc_sub(' ');
c0101c64:	6a 20                	push   $0x20
c0101c66:	e8 7f ff ff ff       	call   c0101bea <serial_putc_sub>
c0101c6b:	83 c4 04             	add    $0x4,%esp
        serial_putc_sub('\b');
c0101c6e:	6a 08                	push   $0x8
c0101c70:	e8 75 ff ff ff       	call   c0101bea <serial_putc_sub>
c0101c75:	83 c4 04             	add    $0x4,%esp
    }
}
c0101c78:	90                   	nop
c0101c79:	c9                   	leave  
c0101c7a:	c3                   	ret    

c0101c7b <cons_intr>:
/* *
 * cons_intr - called by device interrupt routines to feed input
 * characters into the circular console input buffer.
 * */
static void
cons_intr(int (*proc)(void)) {
c0101c7b:	55                   	push   %ebp
c0101c7c:	89 e5                	mov    %esp,%ebp
c0101c7e:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = (*proc)()) != -1) {
c0101c81:	eb 33                	jmp    c0101cb6 <cons_intr+0x3b>
        if (c != 0) {
c0101c83:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0101c87:	74 2d                	je     c0101cb6 <cons_intr+0x3b>
            cons.buf[cons.wpos ++] = c;
c0101c89:	a1 44 f7 19 c0       	mov    0xc019f744,%eax
c0101c8e:	8d 50 01             	lea    0x1(%eax),%edx
c0101c91:	89 15 44 f7 19 c0    	mov    %edx,0xc019f744
c0101c97:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0101c9a:	88 90 40 f5 19 c0    	mov    %dl,-0x3fe60ac0(%eax)
            if (cons.wpos == CONSBUFSIZE) {
c0101ca0:	a1 44 f7 19 c0       	mov    0xc019f744,%eax
c0101ca5:	3d 00 02 00 00       	cmp    $0x200,%eax
c0101caa:	75 0a                	jne    c0101cb6 <cons_intr+0x3b>
                cons.wpos = 0;
c0101cac:	c7 05 44 f7 19 c0 00 	movl   $0x0,0xc019f744
c0101cb3:	00 00 00 
 * characters into the circular console input buffer.
 * */
static void
cons_intr(int (*proc)(void)) {
    int c;
    while ((c = (*proc)()) != -1) {
c0101cb6:	8b 45 08             	mov    0x8(%ebp),%eax
c0101cb9:	ff d0                	call   *%eax
c0101cbb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0101cbe:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
c0101cc2:	75 bf                	jne    c0101c83 <cons_intr+0x8>
            if (cons.wpos == CONSBUFSIZE) {
                cons.wpos = 0;
            }
        }
    }
}
c0101cc4:	90                   	nop
c0101cc5:	c9                   	leave  
c0101cc6:	c3                   	ret    

c0101cc7 <serial_proc_data>:

/* serial_proc_data - get data from serial port */
static int
serial_proc_data(void) {
c0101cc7:	55                   	push   %ebp
c0101cc8:	89 e5                	mov    %esp,%ebp
c0101cca:	83 ec 10             	sub    $0x10,%esp
c0101ccd:	66 c7 45 f8 fd 03    	movw   $0x3fd,-0x8(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101cd3:	0f b7 45 f8          	movzwl -0x8(%ebp),%eax
c0101cd7:	89 c2                	mov    %eax,%edx
c0101cd9:	ec                   	in     (%dx),%al
c0101cda:	88 45 f7             	mov    %al,-0x9(%ebp)
    return data;
c0101cdd:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
    if (!(inb(COM1 + COM_LSR) & COM_LSR_DATA)) {
c0101ce1:	0f b6 c0             	movzbl %al,%eax
c0101ce4:	83 e0 01             	and    $0x1,%eax
c0101ce7:	85 c0                	test   %eax,%eax
c0101ce9:	75 07                	jne    c0101cf2 <serial_proc_data+0x2b>
        return -1;
c0101ceb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101cf0:	eb 2a                	jmp    c0101d1c <serial_proc_data+0x55>
c0101cf2:	66 c7 45 fa f8 03    	movw   $0x3f8,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101cf8:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0101cfc:	89 c2                	mov    %eax,%edx
c0101cfe:	ec                   	in     (%dx),%al
c0101cff:	88 45 f6             	mov    %al,-0xa(%ebp)
    return data;
c0101d02:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
    }
    int c = inb(COM1 + COM_RX);
c0101d06:	0f b6 c0             	movzbl %al,%eax
c0101d09:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (c == 127) {
c0101d0c:	83 7d fc 7f          	cmpl   $0x7f,-0x4(%ebp)
c0101d10:	75 07                	jne    c0101d19 <serial_proc_data+0x52>
        c = '\b';
c0101d12:	c7 45 fc 08 00 00 00 	movl   $0x8,-0x4(%ebp)
    }
    return c;
c0101d19:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0101d1c:	c9                   	leave  
c0101d1d:	c3                   	ret    

c0101d1e <serial_intr>:

/* serial_intr - try to feed input characters from serial port */
void
serial_intr(void) {
c0101d1e:	55                   	push   %ebp
c0101d1f:	89 e5                	mov    %esp,%ebp
c0101d21:	83 ec 08             	sub    $0x8,%esp
    if (serial_exists) {
c0101d24:	a1 28 f5 19 c0       	mov    0xc019f528,%eax
c0101d29:	85 c0                	test   %eax,%eax
c0101d2b:	74 10                	je     c0101d3d <serial_intr+0x1f>
        cons_intr(serial_proc_data);
c0101d2d:	83 ec 0c             	sub    $0xc,%esp
c0101d30:	68 c7 1c 10 c0       	push   $0xc0101cc7
c0101d35:	e8 41 ff ff ff       	call   c0101c7b <cons_intr>
c0101d3a:	83 c4 10             	add    $0x10,%esp
    }
}
c0101d3d:	90                   	nop
c0101d3e:	c9                   	leave  
c0101d3f:	c3                   	ret    

c0101d40 <kbd_proc_data>:
 *
 * The kbd_proc_data() function gets data from the keyboard.
 * If we finish a character, return it, else 0. And return -1 if no data.
 * */
static int
kbd_proc_data(void) {
c0101d40:	55                   	push   %ebp
c0101d41:	89 e5                	mov    %esp,%ebp
c0101d43:	83 ec 18             	sub    $0x18,%esp
c0101d46:	66 c7 45 ec 64 00    	movw   $0x64,-0x14(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101d4c:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0101d50:	89 c2                	mov    %eax,%edx
c0101d52:	ec                   	in     (%dx),%al
c0101d53:	88 45 eb             	mov    %al,-0x15(%ebp)
    return data;
c0101d56:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
    int c;
    uint8_t data;
    static uint32_t shift;

    if ((inb(KBSTATP) & KBS_DIB) == 0) {
c0101d5a:	0f b6 c0             	movzbl %al,%eax
c0101d5d:	83 e0 01             	and    $0x1,%eax
c0101d60:	85 c0                	test   %eax,%eax
c0101d62:	75 0a                	jne    c0101d6e <kbd_proc_data+0x2e>
        return -1;
c0101d64:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101d69:	e9 5d 01 00 00       	jmp    c0101ecb <kbd_proc_data+0x18b>
c0101d6e:	66 c7 45 f0 60 00    	movw   $0x60,-0x10(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101d74:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c0101d78:	89 c2                	mov    %eax,%edx
c0101d7a:	ec                   	in     (%dx),%al
c0101d7b:	88 45 ea             	mov    %al,-0x16(%ebp)
    return data;
c0101d7e:	0f b6 45 ea          	movzbl -0x16(%ebp),%eax
    }

    data = inb(KBDATAP);
c0101d82:	88 45 f3             	mov    %al,-0xd(%ebp)

    if (data == 0xE0) {
c0101d85:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
c0101d89:	75 17                	jne    c0101da2 <kbd_proc_data+0x62>
        // E0 escape character
        shift |= E0ESC;
c0101d8b:	a1 48 f7 19 c0       	mov    0xc019f748,%eax
c0101d90:	83 c8 40             	or     $0x40,%eax
c0101d93:	a3 48 f7 19 c0       	mov    %eax,0xc019f748
        return 0;
c0101d98:	b8 00 00 00 00       	mov    $0x0,%eax
c0101d9d:	e9 29 01 00 00       	jmp    c0101ecb <kbd_proc_data+0x18b>
    } else if (data & 0x80) {
c0101da2:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101da6:	84 c0                	test   %al,%al
c0101da8:	79 47                	jns    c0101df1 <kbd_proc_data+0xb1>
        // Key released
        data = (shift & E0ESC ? data : data & 0x7F);
c0101daa:	a1 48 f7 19 c0       	mov    0xc019f748,%eax
c0101daf:	83 e0 40             	and    $0x40,%eax
c0101db2:	85 c0                	test   %eax,%eax
c0101db4:	75 09                	jne    c0101dbf <kbd_proc_data+0x7f>
c0101db6:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101dba:	83 e0 7f             	and    $0x7f,%eax
c0101dbd:	eb 04                	jmp    c0101dc3 <kbd_proc_data+0x83>
c0101dbf:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101dc3:	88 45 f3             	mov    %al,-0xd(%ebp)
        shift &= ~(shiftcode[data] | E0ESC);
c0101dc6:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101dca:	0f b6 80 40 b0 12 c0 	movzbl -0x3fed4fc0(%eax),%eax
c0101dd1:	83 c8 40             	or     $0x40,%eax
c0101dd4:	0f b6 c0             	movzbl %al,%eax
c0101dd7:	f7 d0                	not    %eax
c0101dd9:	89 c2                	mov    %eax,%edx
c0101ddb:	a1 48 f7 19 c0       	mov    0xc019f748,%eax
c0101de0:	21 d0                	and    %edx,%eax
c0101de2:	a3 48 f7 19 c0       	mov    %eax,0xc019f748
        return 0;
c0101de7:	b8 00 00 00 00       	mov    $0x0,%eax
c0101dec:	e9 da 00 00 00       	jmp    c0101ecb <kbd_proc_data+0x18b>
    } else if (shift & E0ESC) {
c0101df1:	a1 48 f7 19 c0       	mov    0xc019f748,%eax
c0101df6:	83 e0 40             	and    $0x40,%eax
c0101df9:	85 c0                	test   %eax,%eax
c0101dfb:	74 11                	je     c0101e0e <kbd_proc_data+0xce>
        // Last character was an E0 escape; or with 0x80
        data |= 0x80;
c0101dfd:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
        shift &= ~E0ESC;
c0101e01:	a1 48 f7 19 c0       	mov    0xc019f748,%eax
c0101e06:	83 e0 bf             	and    $0xffffffbf,%eax
c0101e09:	a3 48 f7 19 c0       	mov    %eax,0xc019f748
    }

    shift |= shiftcode[data];
c0101e0e:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101e12:	0f b6 80 40 b0 12 c0 	movzbl -0x3fed4fc0(%eax),%eax
c0101e19:	0f b6 d0             	movzbl %al,%edx
c0101e1c:	a1 48 f7 19 c0       	mov    0xc019f748,%eax
c0101e21:	09 d0                	or     %edx,%eax
c0101e23:	a3 48 f7 19 c0       	mov    %eax,0xc019f748
    shift ^= togglecode[data];
c0101e28:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101e2c:	0f b6 80 40 b1 12 c0 	movzbl -0x3fed4ec0(%eax),%eax
c0101e33:	0f b6 d0             	movzbl %al,%edx
c0101e36:	a1 48 f7 19 c0       	mov    0xc019f748,%eax
c0101e3b:	31 d0                	xor    %edx,%eax
c0101e3d:	a3 48 f7 19 c0       	mov    %eax,0xc019f748

    c = charcode[shift & (CTL | SHIFT)][data];
c0101e42:	a1 48 f7 19 c0       	mov    0xc019f748,%eax
c0101e47:	83 e0 03             	and    $0x3,%eax
c0101e4a:	8b 14 85 40 b5 12 c0 	mov    -0x3fed4ac0(,%eax,4),%edx
c0101e51:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101e55:	01 d0                	add    %edx,%eax
c0101e57:	0f b6 00             	movzbl (%eax),%eax
c0101e5a:	0f b6 c0             	movzbl %al,%eax
c0101e5d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (shift & CAPSLOCK) {
c0101e60:	a1 48 f7 19 c0       	mov    0xc019f748,%eax
c0101e65:	83 e0 08             	and    $0x8,%eax
c0101e68:	85 c0                	test   %eax,%eax
c0101e6a:	74 22                	je     c0101e8e <kbd_proc_data+0x14e>
        if ('a' <= c && c <= 'z')
c0101e6c:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
c0101e70:	7e 0c                	jle    c0101e7e <kbd_proc_data+0x13e>
c0101e72:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
c0101e76:	7f 06                	jg     c0101e7e <kbd_proc_data+0x13e>
            c += 'A' - 'a';
c0101e78:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
c0101e7c:	eb 10                	jmp    c0101e8e <kbd_proc_data+0x14e>
        else if ('A' <= c && c <= 'Z')
c0101e7e:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
c0101e82:	7e 0a                	jle    c0101e8e <kbd_proc_data+0x14e>
c0101e84:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
c0101e88:	7f 04                	jg     c0101e8e <kbd_proc_data+0x14e>
            c += 'a' - 'A';
c0101e8a:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
    }

    // Process special keys
    // Ctrl-Alt-Del: reboot
    if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
c0101e8e:	a1 48 f7 19 c0       	mov    0xc019f748,%eax
c0101e93:	f7 d0                	not    %eax
c0101e95:	83 e0 06             	and    $0x6,%eax
c0101e98:	85 c0                	test   %eax,%eax
c0101e9a:	75 2c                	jne    c0101ec8 <kbd_proc_data+0x188>
c0101e9c:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
c0101ea3:	75 23                	jne    c0101ec8 <kbd_proc_data+0x188>
        cprintf("Rebooting!\n");
c0101ea5:	83 ec 0c             	sub    $0xc,%esp
c0101ea8:	68 f5 be 10 c0       	push   $0xc010bef5
c0101ead:	e8 e0 e3 ff ff       	call   c0100292 <cprintf>
c0101eb2:	83 c4 10             	add    $0x10,%esp
c0101eb5:	66 c7 45 ee 92 00    	movw   $0x92,-0x12(%ebp)
c0101ebb:	c6 45 e9 03          	movb   $0x3,-0x17(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101ebf:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101ec3:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101ec7:	ee                   	out    %al,(%dx)
        outb(0x92, 0x3); // courtesy of Chris Frost
    }
    return c;
c0101ec8:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0101ecb:	c9                   	leave  
c0101ecc:	c3                   	ret    

c0101ecd <kbd_intr>:

/* kbd_intr - try to feed input characters from keyboard */
static void
kbd_intr(void) {
c0101ecd:	55                   	push   %ebp
c0101ece:	89 e5                	mov    %esp,%ebp
c0101ed0:	83 ec 08             	sub    $0x8,%esp
    cons_intr(kbd_proc_data);
c0101ed3:	83 ec 0c             	sub    $0xc,%esp
c0101ed6:	68 40 1d 10 c0       	push   $0xc0101d40
c0101edb:	e8 9b fd ff ff       	call   c0101c7b <cons_intr>
c0101ee0:	83 c4 10             	add    $0x10,%esp
}
c0101ee3:	90                   	nop
c0101ee4:	c9                   	leave  
c0101ee5:	c3                   	ret    

c0101ee6 <kbd_init>:

static void
kbd_init(void) {
c0101ee6:	55                   	push   %ebp
c0101ee7:	89 e5                	mov    %esp,%ebp
c0101ee9:	83 ec 08             	sub    $0x8,%esp
    // drain the kbd buffer
    kbd_intr();
c0101eec:	e8 dc ff ff ff       	call   c0101ecd <kbd_intr>
    pic_enable(IRQ_KBD);
c0101ef1:	83 ec 0c             	sub    $0xc,%esp
c0101ef4:	6a 01                	push   $0x1
c0101ef6:	e8 4b 01 00 00       	call   c0102046 <pic_enable>
c0101efb:	83 c4 10             	add    $0x10,%esp
}
c0101efe:	90                   	nop
c0101eff:	c9                   	leave  
c0101f00:	c3                   	ret    

c0101f01 <cons_init>:

/* cons_init - initializes the console devices */
void
cons_init(void) {
c0101f01:	55                   	push   %ebp
c0101f02:	89 e5                	mov    %esp,%ebp
c0101f04:	83 ec 08             	sub    $0x8,%esp
    cga_init();
c0101f07:	e8 8c f8 ff ff       	call   c0101798 <cga_init>
    serial_init();
c0101f0c:	e8 6e f9 ff ff       	call   c010187f <serial_init>
    kbd_init();
c0101f11:	e8 d0 ff ff ff       	call   c0101ee6 <kbd_init>
    if (!serial_exists) {
c0101f16:	a1 28 f5 19 c0       	mov    0xc019f528,%eax
c0101f1b:	85 c0                	test   %eax,%eax
c0101f1d:	75 10                	jne    c0101f2f <cons_init+0x2e>
        cprintf("serial port does not exist!!\n");
c0101f1f:	83 ec 0c             	sub    $0xc,%esp
c0101f22:	68 01 bf 10 c0       	push   $0xc010bf01
c0101f27:	e8 66 e3 ff ff       	call   c0100292 <cprintf>
c0101f2c:	83 c4 10             	add    $0x10,%esp
    }
}
c0101f2f:	90                   	nop
c0101f30:	c9                   	leave  
c0101f31:	c3                   	ret    

c0101f32 <cons_putc>:

/* cons_putc - print a single character @c to console devices */
void
cons_putc(int c) {
c0101f32:	55                   	push   %ebp
c0101f33:	89 e5                	mov    %esp,%ebp
c0101f35:	83 ec 18             	sub    $0x18,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c0101f38:	e8 d4 f7 ff ff       	call   c0101711 <__intr_save>
c0101f3d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        lpt_putc(c);
c0101f40:	83 ec 0c             	sub    $0xc,%esp
c0101f43:	ff 75 08             	pushl  0x8(%ebp)
c0101f46:	e8 93 fa ff ff       	call   c01019de <lpt_putc>
c0101f4b:	83 c4 10             	add    $0x10,%esp
        cga_putc(c);
c0101f4e:	83 ec 0c             	sub    $0xc,%esp
c0101f51:	ff 75 08             	pushl  0x8(%ebp)
c0101f54:	e8 bc fa ff ff       	call   c0101a15 <cga_putc>
c0101f59:	83 c4 10             	add    $0x10,%esp
        serial_putc(c);
c0101f5c:	83 ec 0c             	sub    $0xc,%esp
c0101f5f:	ff 75 08             	pushl  0x8(%ebp)
c0101f62:	e8 dd fc ff ff       	call   c0101c44 <serial_putc>
c0101f67:	83 c4 10             	add    $0x10,%esp
    }
    local_intr_restore(intr_flag);
c0101f6a:	83 ec 0c             	sub    $0xc,%esp
c0101f6d:	ff 75 f4             	pushl  -0xc(%ebp)
c0101f70:	e8 c6 f7 ff ff       	call   c010173b <__intr_restore>
c0101f75:	83 c4 10             	add    $0x10,%esp
}
c0101f78:	90                   	nop
c0101f79:	c9                   	leave  
c0101f7a:	c3                   	ret    

c0101f7b <cons_getc>:
/* *
 * cons_getc - return the next input character from console,
 * or 0 if none waiting.
 * */
int
cons_getc(void) {
c0101f7b:	55                   	push   %ebp
c0101f7c:	89 e5                	mov    %esp,%ebp
c0101f7e:	83 ec 18             	sub    $0x18,%esp
    int c = 0;
c0101f81:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    local_intr_save(intr_flag);
c0101f88:	e8 84 f7 ff ff       	call   c0101711 <__intr_save>
c0101f8d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        // poll for any pending input characters,
        // so that this function works even when interrupts are disabled
        // (e.g., when called from the kernel monitor).
        serial_intr();
c0101f90:	e8 89 fd ff ff       	call   c0101d1e <serial_intr>
        kbd_intr();
c0101f95:	e8 33 ff ff ff       	call   c0101ecd <kbd_intr>

        // grab the next character from the input buffer.
        if (cons.rpos != cons.wpos) {
c0101f9a:	8b 15 40 f7 19 c0    	mov    0xc019f740,%edx
c0101fa0:	a1 44 f7 19 c0       	mov    0xc019f744,%eax
c0101fa5:	39 c2                	cmp    %eax,%edx
c0101fa7:	74 31                	je     c0101fda <cons_getc+0x5f>
            c = cons.buf[cons.rpos ++];
c0101fa9:	a1 40 f7 19 c0       	mov    0xc019f740,%eax
c0101fae:	8d 50 01             	lea    0x1(%eax),%edx
c0101fb1:	89 15 40 f7 19 c0    	mov    %edx,0xc019f740
c0101fb7:	0f b6 80 40 f5 19 c0 	movzbl -0x3fe60ac0(%eax),%eax
c0101fbe:	0f b6 c0             	movzbl %al,%eax
c0101fc1:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (cons.rpos == CONSBUFSIZE) {
c0101fc4:	a1 40 f7 19 c0       	mov    0xc019f740,%eax
c0101fc9:	3d 00 02 00 00       	cmp    $0x200,%eax
c0101fce:	75 0a                	jne    c0101fda <cons_getc+0x5f>
                cons.rpos = 0;
c0101fd0:	c7 05 40 f7 19 c0 00 	movl   $0x0,0xc019f740
c0101fd7:	00 00 00 
            }
        }
    }
    local_intr_restore(intr_flag);
c0101fda:	83 ec 0c             	sub    $0xc,%esp
c0101fdd:	ff 75 f0             	pushl  -0x10(%ebp)
c0101fe0:	e8 56 f7 ff ff       	call   c010173b <__intr_restore>
c0101fe5:	83 c4 10             	add    $0x10,%esp
    return c;
c0101fe8:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0101feb:	c9                   	leave  
c0101fec:	c3                   	ret    

c0101fed <pic_setmask>:
// Initial IRQ mask has interrupt 2 enabled (for slave 8259A).
static uint16_t irq_mask = 0xFFFF & ~(1 << IRQ_SLAVE);
static bool did_init = 0;

static void
pic_setmask(uint16_t mask) {
c0101fed:	55                   	push   %ebp
c0101fee:	89 e5                	mov    %esp,%ebp
c0101ff0:	83 ec 14             	sub    $0x14,%esp
c0101ff3:	8b 45 08             	mov    0x8(%ebp),%eax
c0101ff6:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    irq_mask = mask;
c0101ffa:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0101ffe:	66 a3 50 b5 12 c0    	mov    %ax,0xc012b550
    if (did_init) {
c0102004:	a1 4c f7 19 c0       	mov    0xc019f74c,%eax
c0102009:	85 c0                	test   %eax,%eax
c010200b:	74 36                	je     c0102043 <pic_setmask+0x56>
        outb(IO_PIC1 + 1, mask);
c010200d:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0102011:	0f b6 c0             	movzbl %al,%eax
c0102014:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
c010201a:	88 45 fa             	mov    %al,-0x6(%ebp)
c010201d:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
c0102021:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c0102025:	ee                   	out    %al,(%dx)
        outb(IO_PIC2 + 1, mask >> 8);
c0102026:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c010202a:	66 c1 e8 08          	shr    $0x8,%ax
c010202e:	0f b6 c0             	movzbl %al,%eax
c0102031:	66 c7 45 fc a1 00    	movw   $0xa1,-0x4(%ebp)
c0102037:	88 45 fb             	mov    %al,-0x5(%ebp)
c010203a:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
c010203e:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c0102042:	ee                   	out    %al,(%dx)
    }
}
c0102043:	90                   	nop
c0102044:	c9                   	leave  
c0102045:	c3                   	ret    

c0102046 <pic_enable>:

void
pic_enable(unsigned int irq) {
c0102046:	55                   	push   %ebp
c0102047:	89 e5                	mov    %esp,%ebp
    pic_setmask(irq_mask & ~(1 << irq));
c0102049:	8b 45 08             	mov    0x8(%ebp),%eax
c010204c:	ba 01 00 00 00       	mov    $0x1,%edx
c0102051:	89 c1                	mov    %eax,%ecx
c0102053:	d3 e2                	shl    %cl,%edx
c0102055:	89 d0                	mov    %edx,%eax
c0102057:	f7 d0                	not    %eax
c0102059:	89 c2                	mov    %eax,%edx
c010205b:	0f b7 05 50 b5 12 c0 	movzwl 0xc012b550,%eax
c0102062:	21 d0                	and    %edx,%eax
c0102064:	0f b7 c0             	movzwl %ax,%eax
c0102067:	50                   	push   %eax
c0102068:	e8 80 ff ff ff       	call   c0101fed <pic_setmask>
c010206d:	83 c4 04             	add    $0x4,%esp
}
c0102070:	90                   	nop
c0102071:	c9                   	leave  
c0102072:	c3                   	ret    

c0102073 <pic_init>:

/* pic_init - initialize the 8259A interrupt controllers */
void
pic_init(void) {
c0102073:	55                   	push   %ebp
c0102074:	89 e5                	mov    %esp,%ebp
c0102076:	83 ec 30             	sub    $0x30,%esp
    did_init = 1;
c0102079:	c7 05 4c f7 19 c0 01 	movl   $0x1,0xc019f74c
c0102080:	00 00 00 
c0102083:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
c0102089:	c6 45 d6 ff          	movb   $0xff,-0x2a(%ebp)
c010208d:	0f b6 45 d6          	movzbl -0x2a(%ebp),%eax
c0102091:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c0102095:	ee                   	out    %al,(%dx)
c0102096:	66 c7 45 fc a1 00    	movw   $0xa1,-0x4(%ebp)
c010209c:	c6 45 d7 ff          	movb   $0xff,-0x29(%ebp)
c01020a0:	0f b6 45 d7          	movzbl -0x29(%ebp),%eax
c01020a4:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c01020a8:	ee                   	out    %al,(%dx)
c01020a9:	66 c7 45 fa 20 00    	movw   $0x20,-0x6(%ebp)
c01020af:	c6 45 d8 11          	movb   $0x11,-0x28(%ebp)
c01020b3:	0f b6 45 d8          	movzbl -0x28(%ebp),%eax
c01020b7:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c01020bb:	ee                   	out    %al,(%dx)
c01020bc:	66 c7 45 f8 21 00    	movw   $0x21,-0x8(%ebp)
c01020c2:	c6 45 d9 20          	movb   $0x20,-0x27(%ebp)
c01020c6:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c01020ca:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
c01020ce:	ee                   	out    %al,(%dx)
c01020cf:	66 c7 45 f6 21 00    	movw   $0x21,-0xa(%ebp)
c01020d5:	c6 45 da 04          	movb   $0x4,-0x26(%ebp)
c01020d9:	0f b6 45 da          	movzbl -0x26(%ebp),%eax
c01020dd:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c01020e1:	ee                   	out    %al,(%dx)
c01020e2:	66 c7 45 f4 21 00    	movw   $0x21,-0xc(%ebp)
c01020e8:	c6 45 db 03          	movb   $0x3,-0x25(%ebp)
c01020ec:	0f b6 45 db          	movzbl -0x25(%ebp),%eax
c01020f0:	0f b7 55 f4          	movzwl -0xc(%ebp),%edx
c01020f4:	ee                   	out    %al,(%dx)
c01020f5:	66 c7 45 f2 a0 00    	movw   $0xa0,-0xe(%ebp)
c01020fb:	c6 45 dc 11          	movb   $0x11,-0x24(%ebp)
c01020ff:	0f b6 45 dc          	movzbl -0x24(%ebp),%eax
c0102103:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0102107:	ee                   	out    %al,(%dx)
c0102108:	66 c7 45 f0 a1 00    	movw   $0xa1,-0x10(%ebp)
c010210e:	c6 45 dd 28          	movb   $0x28,-0x23(%ebp)
c0102112:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0102116:	0f b7 55 f0          	movzwl -0x10(%ebp),%edx
c010211a:	ee                   	out    %al,(%dx)
c010211b:	66 c7 45 ee a1 00    	movw   $0xa1,-0x12(%ebp)
c0102121:	c6 45 de 02          	movb   $0x2,-0x22(%ebp)
c0102125:	0f b6 45 de          	movzbl -0x22(%ebp),%eax
c0102129:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c010212d:	ee                   	out    %al,(%dx)
c010212e:	66 c7 45 ec a1 00    	movw   $0xa1,-0x14(%ebp)
c0102134:	c6 45 df 03          	movb   $0x3,-0x21(%ebp)
c0102138:	0f b6 45 df          	movzbl -0x21(%ebp),%eax
c010213c:	0f b7 55 ec          	movzwl -0x14(%ebp),%edx
c0102140:	ee                   	out    %al,(%dx)
c0102141:	66 c7 45 ea 20 00    	movw   $0x20,-0x16(%ebp)
c0102147:	c6 45 e0 68          	movb   $0x68,-0x20(%ebp)
c010214b:	0f b6 45 e0          	movzbl -0x20(%ebp),%eax
c010214f:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0102153:	ee                   	out    %al,(%dx)
c0102154:	66 c7 45 e8 20 00    	movw   $0x20,-0x18(%ebp)
c010215a:	c6 45 e1 0a          	movb   $0xa,-0x1f(%ebp)
c010215e:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0102162:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c0102166:	ee                   	out    %al,(%dx)
c0102167:	66 c7 45 e6 a0 00    	movw   $0xa0,-0x1a(%ebp)
c010216d:	c6 45 e2 68          	movb   $0x68,-0x1e(%ebp)
c0102171:	0f b6 45 e2          	movzbl -0x1e(%ebp),%eax
c0102175:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0102179:	ee                   	out    %al,(%dx)
c010217a:	66 c7 45 e4 a0 00    	movw   $0xa0,-0x1c(%ebp)
c0102180:	c6 45 e3 0a          	movb   $0xa,-0x1d(%ebp)
c0102184:	0f b6 45 e3          	movzbl -0x1d(%ebp),%eax
c0102188:	0f b7 55 e4          	movzwl -0x1c(%ebp),%edx
c010218c:	ee                   	out    %al,(%dx)
    outb(IO_PIC1, 0x0a);    // read IRR by default

    outb(IO_PIC2, 0x68);    // OCW3
    outb(IO_PIC2, 0x0a);    // OCW3

    if (irq_mask != 0xFFFF) {
c010218d:	0f b7 05 50 b5 12 c0 	movzwl 0xc012b550,%eax
c0102194:	66 83 f8 ff          	cmp    $0xffff,%ax
c0102198:	74 13                	je     c01021ad <pic_init+0x13a>
        pic_setmask(irq_mask);
c010219a:	0f b7 05 50 b5 12 c0 	movzwl 0xc012b550,%eax
c01021a1:	0f b7 c0             	movzwl %ax,%eax
c01021a4:	50                   	push   %eax
c01021a5:	e8 43 fe ff ff       	call   c0101fed <pic_setmask>
c01021aa:	83 c4 04             	add    $0x4,%esp
    }
}
c01021ad:	90                   	nop
c01021ae:	c9                   	leave  
c01021af:	c3                   	ret    

c01021b0 <intr_enable>:
#include <x86.h>
#include <intr.h>

/* intr_enable - enable irq interrupt */
void
intr_enable(void) {
c01021b0:	55                   	push   %ebp
c01021b1:	89 e5                	mov    %esp,%ebp
    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
}

static inline void
sti(void) {
    asm volatile ("sti");
c01021b3:	fb                   	sti    
    sti();
}
c01021b4:	90                   	nop
c01021b5:	5d                   	pop    %ebp
c01021b6:	c3                   	ret    

c01021b7 <intr_disable>:

/* intr_disable - disable irq interrupt */
void
intr_disable(void) {
c01021b7:	55                   	push   %ebp
c01021b8:	89 e5                	mov    %esp,%ebp
}

static inline void
cli(void) {
    asm volatile ("cli" ::: "memory");
c01021ba:	fa                   	cli    
    cli();
}
c01021bb:	90                   	nop
c01021bc:	5d                   	pop    %ebp
c01021bd:	c3                   	ret    

c01021be <print_ticks>:
#include <sched.h>
#include <sync.h>

#define TICK_NUM 100

static void print_ticks() {
c01021be:	55                   	push   %ebp
c01021bf:	89 e5                	mov    %esp,%ebp
c01021c1:	83 ec 08             	sub    $0x8,%esp
    cprintf("%d ticks\n",TICK_NUM);
c01021c4:	83 ec 08             	sub    $0x8,%esp
c01021c7:	6a 64                	push   $0x64
c01021c9:	68 20 bf 10 c0       	push   $0xc010bf20
c01021ce:	e8 bf e0 ff ff       	call   c0100292 <cprintf>
c01021d3:	83 c4 10             	add    $0x10,%esp
#ifdef DEBUG_GRADE
    cprintf("End of Test.\n");
c01021d6:	83 ec 0c             	sub    $0xc,%esp
c01021d9:	68 2a bf 10 c0       	push   $0xc010bf2a
c01021de:	e8 af e0 ff ff       	call   c0100292 <cprintf>
c01021e3:	83 c4 10             	add    $0x10,%esp
    panic("EOT: kernel seems ok.");
c01021e6:	83 ec 04             	sub    $0x4,%esp
c01021e9:	68 38 bf 10 c0       	push   $0xc010bf38
c01021ee:	6a 19                	push   $0x19
c01021f0:	68 4e bf 10 c0       	push   $0xc010bf4e
c01021f5:	e8 fe e1 ff ff       	call   c01003f8 <__panic>

c01021fa <idt_init>:
/* temporary trapframe or pointer to trapframe */
struct trapframe switchk2u, *switchu2k;

/* idt_init - initialize IDT to each of the entry points in kern/trap/vectors.S */
void
idt_init(void) {
c01021fa:	55                   	push   %ebp
c01021fb:	89 e5                	mov    %esp,%ebp
c01021fd:	83 ec 10             	sub    $0x10,%esp
      *     Notice: the argument of lidt is idt_pd. try to find it!
      */
    // 1. get vectors
    extern uintptr_t __vectors[];
    // 2. setup entries
    for (int i = 0; i < 256; i++) {
c0102200:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0102207:	e9 c3 00 00 00       	jmp    c01022cf <idt_init+0xd5>
        SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);
c010220c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010220f:	8b 04 85 e0 b5 12 c0 	mov    -0x3fed4a20(,%eax,4),%eax
c0102216:	89 c2                	mov    %eax,%edx
c0102218:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010221b:	66 89 14 c5 60 f7 19 	mov    %dx,-0x3fe608a0(,%eax,8)
c0102222:	c0 
c0102223:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102226:	66 c7 04 c5 62 f7 19 	movw   $0x8,-0x3fe6089e(,%eax,8)
c010222d:	c0 08 00 
c0102230:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102233:	0f b6 14 c5 64 f7 19 	movzbl -0x3fe6089c(,%eax,8),%edx
c010223a:	c0 
c010223b:	83 e2 e0             	and    $0xffffffe0,%edx
c010223e:	88 14 c5 64 f7 19 c0 	mov    %dl,-0x3fe6089c(,%eax,8)
c0102245:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102248:	0f b6 14 c5 64 f7 19 	movzbl -0x3fe6089c(,%eax,8),%edx
c010224f:	c0 
c0102250:	83 e2 1f             	and    $0x1f,%edx
c0102253:	88 14 c5 64 f7 19 c0 	mov    %dl,-0x3fe6089c(,%eax,8)
c010225a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010225d:	0f b6 14 c5 65 f7 19 	movzbl -0x3fe6089b(,%eax,8),%edx
c0102264:	c0 
c0102265:	83 e2 f0             	and    $0xfffffff0,%edx
c0102268:	83 ca 0e             	or     $0xe,%edx
c010226b:	88 14 c5 65 f7 19 c0 	mov    %dl,-0x3fe6089b(,%eax,8)
c0102272:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102275:	0f b6 14 c5 65 f7 19 	movzbl -0x3fe6089b(,%eax,8),%edx
c010227c:	c0 
c010227d:	83 e2 ef             	and    $0xffffffef,%edx
c0102280:	88 14 c5 65 f7 19 c0 	mov    %dl,-0x3fe6089b(,%eax,8)
c0102287:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010228a:	0f b6 14 c5 65 f7 19 	movzbl -0x3fe6089b(,%eax,8),%edx
c0102291:	c0 
c0102292:	83 e2 9f             	and    $0xffffff9f,%edx
c0102295:	88 14 c5 65 f7 19 c0 	mov    %dl,-0x3fe6089b(,%eax,8)
c010229c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010229f:	0f b6 14 c5 65 f7 19 	movzbl -0x3fe6089b(,%eax,8),%edx
c01022a6:	c0 
c01022a7:	83 ca 80             	or     $0xffffff80,%edx
c01022aa:	88 14 c5 65 f7 19 c0 	mov    %dl,-0x3fe6089b(,%eax,8)
c01022b1:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01022b4:	8b 04 85 e0 b5 12 c0 	mov    -0x3fed4a20(,%eax,4),%eax
c01022bb:	c1 e8 10             	shr    $0x10,%eax
c01022be:	89 c2                	mov    %eax,%edx
c01022c0:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01022c3:	66 89 14 c5 66 f7 19 	mov    %dx,-0x3fe6089a(,%eax,8)
c01022ca:	c0 
      *     Notice: the argument of lidt is idt_pd. try to find it!
      */
    // 1. get vectors
    extern uintptr_t __vectors[];
    // 2. setup entries
    for (int i = 0; i < 256; i++) {
c01022cb:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c01022cf:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
c01022d6:	0f 8e 30 ff ff ff    	jle    c010220c <idt_init+0x12>
        SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);
    }
	// set RPL of switch_to_kernel as user 
    SETGATE(idt[T_SWITCH_TOK], 0, GD_KTEXT, __vectors[T_SWITCH_TOK], DPL_USER);
c01022dc:	a1 c4 b7 12 c0       	mov    0xc012b7c4,%eax
c01022e1:	66 a3 28 fb 19 c0    	mov    %ax,0xc019fb28
c01022e7:	66 c7 05 2a fb 19 c0 	movw   $0x8,0xc019fb2a
c01022ee:	08 00 
c01022f0:	0f b6 05 2c fb 19 c0 	movzbl 0xc019fb2c,%eax
c01022f7:	83 e0 e0             	and    $0xffffffe0,%eax
c01022fa:	a2 2c fb 19 c0       	mov    %al,0xc019fb2c
c01022ff:	0f b6 05 2c fb 19 c0 	movzbl 0xc019fb2c,%eax
c0102306:	83 e0 1f             	and    $0x1f,%eax
c0102309:	a2 2c fb 19 c0       	mov    %al,0xc019fb2c
c010230e:	0f b6 05 2d fb 19 c0 	movzbl 0xc019fb2d,%eax
c0102315:	83 e0 f0             	and    $0xfffffff0,%eax
c0102318:	83 c8 0e             	or     $0xe,%eax
c010231b:	a2 2d fb 19 c0       	mov    %al,0xc019fb2d
c0102320:	0f b6 05 2d fb 19 c0 	movzbl 0xc019fb2d,%eax
c0102327:	83 e0 ef             	and    $0xffffffef,%eax
c010232a:	a2 2d fb 19 c0       	mov    %al,0xc019fb2d
c010232f:	0f b6 05 2d fb 19 c0 	movzbl 0xc019fb2d,%eax
c0102336:	83 c8 60             	or     $0x60,%eax
c0102339:	a2 2d fb 19 c0       	mov    %al,0xc019fb2d
c010233e:	0f b6 05 2d fb 19 c0 	movzbl 0xc019fb2d,%eax
c0102345:	83 c8 80             	or     $0xffffff80,%eax
c0102348:	a2 2d fb 19 c0       	mov    %al,0xc019fb2d
c010234d:	a1 c4 b7 12 c0       	mov    0xc012b7c4,%eax
c0102352:	c1 e8 10             	shr    $0x10,%eax
c0102355:	66 a3 2e fb 19 c0    	mov    %ax,0xc019fb2e
c010235b:	c7 45 f8 60 b5 12 c0 	movl   $0xc012b560,-0x8(%ebp)
    }
}

static inline void
lidt(struct pseudodesc *pd) {
    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
c0102362:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0102365:	0f 01 18             	lidtl  (%eax)
    lidt(&idt_pd);

     /* LAB5 YOUR CODE */ 
     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
     //so you should setup the syscall interrupt gate in here
}
c0102368:	90                   	nop
c0102369:	c9                   	leave  
c010236a:	c3                   	ret    

c010236b <trapname>:

static const char *
trapname(int trapno) {
c010236b:	55                   	push   %ebp
c010236c:	89 e5                	mov    %esp,%ebp
        "Alignment Check",
        "Machine-Check",
        "SIMD Floating-Point Exception"
    };

    if (trapno < sizeof(excnames)/sizeof(const char * const)) {
c010236e:	8b 45 08             	mov    0x8(%ebp),%eax
c0102371:	83 f8 13             	cmp    $0x13,%eax
c0102374:	77 0c                	ja     c0102382 <trapname+0x17>
        return excnames[trapno];
c0102376:	8b 45 08             	mov    0x8(%ebp),%eax
c0102379:	8b 04 85 c0 c3 10 c0 	mov    -0x3fef3c40(,%eax,4),%eax
c0102380:	eb 18                	jmp    c010239a <trapname+0x2f>
    }
    if (trapno >= IRQ_OFFSET && trapno < IRQ_OFFSET + 16) {
c0102382:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
c0102386:	7e 0d                	jle    c0102395 <trapname+0x2a>
c0102388:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
c010238c:	7f 07                	jg     c0102395 <trapname+0x2a>
        return "Hardware Interrupt";
c010238e:	b8 5f bf 10 c0       	mov    $0xc010bf5f,%eax
c0102393:	eb 05                	jmp    c010239a <trapname+0x2f>
    }
    return "(unknown trap)";
c0102395:	b8 72 bf 10 c0       	mov    $0xc010bf72,%eax
}
c010239a:	5d                   	pop    %ebp
c010239b:	c3                   	ret    

c010239c <trap_in_kernel>:

/* trap_in_kernel - test if trap happened in kernel */
bool
trap_in_kernel(struct trapframe *tf) {
c010239c:	55                   	push   %ebp
c010239d:	89 e5                	mov    %esp,%ebp
    return (tf->tf_cs == (uint16_t)KERNEL_CS);
c010239f:	8b 45 08             	mov    0x8(%ebp),%eax
c01023a2:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c01023a6:	66 83 f8 08          	cmp    $0x8,%ax
c01023aa:	0f 94 c0             	sete   %al
c01023ad:	0f b6 c0             	movzbl %al,%eax
}
c01023b0:	5d                   	pop    %ebp
c01023b1:	c3                   	ret    

c01023b2 <print_trapframe>:
    "TF", "IF", "DF", "OF", NULL, NULL, "NT", NULL,
    "RF", "VM", "AC", "VIF", "VIP", "ID", NULL, NULL,
};

void
print_trapframe(struct trapframe *tf) {
c01023b2:	55                   	push   %ebp
c01023b3:	89 e5                	mov    %esp,%ebp
c01023b5:	83 ec 18             	sub    $0x18,%esp
    cprintf("trapframe at %p\n", tf);
c01023b8:	83 ec 08             	sub    $0x8,%esp
c01023bb:	ff 75 08             	pushl  0x8(%ebp)
c01023be:	68 b3 bf 10 c0       	push   $0xc010bfb3
c01023c3:	e8 ca de ff ff       	call   c0100292 <cprintf>
c01023c8:	83 c4 10             	add    $0x10,%esp
    print_regs(&tf->tf_regs);
c01023cb:	8b 45 08             	mov    0x8(%ebp),%eax
c01023ce:	83 ec 0c             	sub    $0xc,%esp
c01023d1:	50                   	push   %eax
c01023d2:	e8 b8 01 00 00       	call   c010258f <print_regs>
c01023d7:	83 c4 10             	add    $0x10,%esp
    cprintf("  ds   0x----%04x\n", tf->tf_ds);
c01023da:	8b 45 08             	mov    0x8(%ebp),%eax
c01023dd:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c01023e1:	0f b7 c0             	movzwl %ax,%eax
c01023e4:	83 ec 08             	sub    $0x8,%esp
c01023e7:	50                   	push   %eax
c01023e8:	68 c4 bf 10 c0       	push   $0xc010bfc4
c01023ed:	e8 a0 de ff ff       	call   c0100292 <cprintf>
c01023f2:	83 c4 10             	add    $0x10,%esp
    cprintf("  es   0x----%04x\n", tf->tf_es);
c01023f5:	8b 45 08             	mov    0x8(%ebp),%eax
c01023f8:	0f b7 40 28          	movzwl 0x28(%eax),%eax
c01023fc:	0f b7 c0             	movzwl %ax,%eax
c01023ff:	83 ec 08             	sub    $0x8,%esp
c0102402:	50                   	push   %eax
c0102403:	68 d7 bf 10 c0       	push   $0xc010bfd7
c0102408:	e8 85 de ff ff       	call   c0100292 <cprintf>
c010240d:	83 c4 10             	add    $0x10,%esp
    cprintf("  fs   0x----%04x\n", tf->tf_fs);
c0102410:	8b 45 08             	mov    0x8(%ebp),%eax
c0102413:	0f b7 40 24          	movzwl 0x24(%eax),%eax
c0102417:	0f b7 c0             	movzwl %ax,%eax
c010241a:	83 ec 08             	sub    $0x8,%esp
c010241d:	50                   	push   %eax
c010241e:	68 ea bf 10 c0       	push   $0xc010bfea
c0102423:	e8 6a de ff ff       	call   c0100292 <cprintf>
c0102428:	83 c4 10             	add    $0x10,%esp
    cprintf("  gs   0x----%04x\n", tf->tf_gs);
c010242b:	8b 45 08             	mov    0x8(%ebp),%eax
c010242e:	0f b7 40 20          	movzwl 0x20(%eax),%eax
c0102432:	0f b7 c0             	movzwl %ax,%eax
c0102435:	83 ec 08             	sub    $0x8,%esp
c0102438:	50                   	push   %eax
c0102439:	68 fd bf 10 c0       	push   $0xc010bffd
c010243e:	e8 4f de ff ff       	call   c0100292 <cprintf>
c0102443:	83 c4 10             	add    $0x10,%esp
    cprintf("  trap 0x%08x %s\n", tf->tf_trapno, trapname(tf->tf_trapno));
c0102446:	8b 45 08             	mov    0x8(%ebp),%eax
c0102449:	8b 40 30             	mov    0x30(%eax),%eax
c010244c:	83 ec 0c             	sub    $0xc,%esp
c010244f:	50                   	push   %eax
c0102450:	e8 16 ff ff ff       	call   c010236b <trapname>
c0102455:	83 c4 10             	add    $0x10,%esp
c0102458:	89 c2                	mov    %eax,%edx
c010245a:	8b 45 08             	mov    0x8(%ebp),%eax
c010245d:	8b 40 30             	mov    0x30(%eax),%eax
c0102460:	83 ec 04             	sub    $0x4,%esp
c0102463:	52                   	push   %edx
c0102464:	50                   	push   %eax
c0102465:	68 10 c0 10 c0       	push   $0xc010c010
c010246a:	e8 23 de ff ff       	call   c0100292 <cprintf>
c010246f:	83 c4 10             	add    $0x10,%esp
    cprintf("  err  0x%08x\n", tf->tf_err);
c0102472:	8b 45 08             	mov    0x8(%ebp),%eax
c0102475:	8b 40 34             	mov    0x34(%eax),%eax
c0102478:	83 ec 08             	sub    $0x8,%esp
c010247b:	50                   	push   %eax
c010247c:	68 22 c0 10 c0       	push   $0xc010c022
c0102481:	e8 0c de ff ff       	call   c0100292 <cprintf>
c0102486:	83 c4 10             	add    $0x10,%esp
    cprintf("  eip  0x%08x\n", tf->tf_eip);
c0102489:	8b 45 08             	mov    0x8(%ebp),%eax
c010248c:	8b 40 38             	mov    0x38(%eax),%eax
c010248f:	83 ec 08             	sub    $0x8,%esp
c0102492:	50                   	push   %eax
c0102493:	68 31 c0 10 c0       	push   $0xc010c031
c0102498:	e8 f5 dd ff ff       	call   c0100292 <cprintf>
c010249d:	83 c4 10             	add    $0x10,%esp
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
c01024a0:	8b 45 08             	mov    0x8(%ebp),%eax
c01024a3:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c01024a7:	0f b7 c0             	movzwl %ax,%eax
c01024aa:	83 ec 08             	sub    $0x8,%esp
c01024ad:	50                   	push   %eax
c01024ae:	68 40 c0 10 c0       	push   $0xc010c040
c01024b3:	e8 da dd ff ff       	call   c0100292 <cprintf>
c01024b8:	83 c4 10             	add    $0x10,%esp
    cprintf("  flag 0x%08x ", tf->tf_eflags);
c01024bb:	8b 45 08             	mov    0x8(%ebp),%eax
c01024be:	8b 40 40             	mov    0x40(%eax),%eax
c01024c1:	83 ec 08             	sub    $0x8,%esp
c01024c4:	50                   	push   %eax
c01024c5:	68 53 c0 10 c0       	push   $0xc010c053
c01024ca:	e8 c3 dd ff ff       	call   c0100292 <cprintf>
c01024cf:	83 c4 10             	add    $0x10,%esp

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c01024d2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01024d9:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c01024e0:	eb 3f                	jmp    c0102521 <print_trapframe+0x16f>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
c01024e2:	8b 45 08             	mov    0x8(%ebp),%eax
c01024e5:	8b 50 40             	mov    0x40(%eax),%edx
c01024e8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01024eb:	21 d0                	and    %edx,%eax
c01024ed:	85 c0                	test   %eax,%eax
c01024ef:	74 29                	je     c010251a <print_trapframe+0x168>
c01024f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01024f4:	8b 04 85 80 b5 12 c0 	mov    -0x3fed4a80(,%eax,4),%eax
c01024fb:	85 c0                	test   %eax,%eax
c01024fd:	74 1b                	je     c010251a <print_trapframe+0x168>
            cprintf("%s,", IA32flags[i]);
c01024ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102502:	8b 04 85 80 b5 12 c0 	mov    -0x3fed4a80(,%eax,4),%eax
c0102509:	83 ec 08             	sub    $0x8,%esp
c010250c:	50                   	push   %eax
c010250d:	68 62 c0 10 c0       	push   $0xc010c062
c0102512:	e8 7b dd ff ff       	call   c0100292 <cprintf>
c0102517:	83 c4 10             	add    $0x10,%esp
    cprintf("  eip  0x%08x\n", tf->tf_eip);
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
    cprintf("  flag 0x%08x ", tf->tf_eflags);

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c010251a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010251e:	d1 65 f0             	shll   -0x10(%ebp)
c0102521:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102524:	83 f8 17             	cmp    $0x17,%eax
c0102527:	76 b9                	jbe    c01024e2 <print_trapframe+0x130>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
            cprintf("%s,", IA32flags[i]);
        }
    }
    cprintf("IOPL=%d\n", (tf->tf_eflags & FL_IOPL_MASK) >> 12);
c0102529:	8b 45 08             	mov    0x8(%ebp),%eax
c010252c:	8b 40 40             	mov    0x40(%eax),%eax
c010252f:	25 00 30 00 00       	and    $0x3000,%eax
c0102534:	c1 e8 0c             	shr    $0xc,%eax
c0102537:	83 ec 08             	sub    $0x8,%esp
c010253a:	50                   	push   %eax
c010253b:	68 66 c0 10 c0       	push   $0xc010c066
c0102540:	e8 4d dd ff ff       	call   c0100292 <cprintf>
c0102545:	83 c4 10             	add    $0x10,%esp

    if (!trap_in_kernel(tf)) {
c0102548:	83 ec 0c             	sub    $0xc,%esp
c010254b:	ff 75 08             	pushl  0x8(%ebp)
c010254e:	e8 49 fe ff ff       	call   c010239c <trap_in_kernel>
c0102553:	83 c4 10             	add    $0x10,%esp
c0102556:	85 c0                	test   %eax,%eax
c0102558:	75 32                	jne    c010258c <print_trapframe+0x1da>
        cprintf("  esp  0x%08x\n", tf->tf_esp);
c010255a:	8b 45 08             	mov    0x8(%ebp),%eax
c010255d:	8b 40 44             	mov    0x44(%eax),%eax
c0102560:	83 ec 08             	sub    $0x8,%esp
c0102563:	50                   	push   %eax
c0102564:	68 6f c0 10 c0       	push   $0xc010c06f
c0102569:	e8 24 dd ff ff       	call   c0100292 <cprintf>
c010256e:	83 c4 10             	add    $0x10,%esp
        cprintf("  ss   0x----%04x\n", tf->tf_ss);
c0102571:	8b 45 08             	mov    0x8(%ebp),%eax
c0102574:	0f b7 40 48          	movzwl 0x48(%eax),%eax
c0102578:	0f b7 c0             	movzwl %ax,%eax
c010257b:	83 ec 08             	sub    $0x8,%esp
c010257e:	50                   	push   %eax
c010257f:	68 7e c0 10 c0       	push   $0xc010c07e
c0102584:	e8 09 dd ff ff       	call   c0100292 <cprintf>
c0102589:	83 c4 10             	add    $0x10,%esp
    }
}
c010258c:	90                   	nop
c010258d:	c9                   	leave  
c010258e:	c3                   	ret    

c010258f <print_regs>:

void
print_regs(struct pushregs *regs) {
c010258f:	55                   	push   %ebp
c0102590:	89 e5                	mov    %esp,%ebp
c0102592:	83 ec 08             	sub    $0x8,%esp
    cprintf("  edi  0x%08x\n", regs->reg_edi);
c0102595:	8b 45 08             	mov    0x8(%ebp),%eax
c0102598:	8b 00                	mov    (%eax),%eax
c010259a:	83 ec 08             	sub    $0x8,%esp
c010259d:	50                   	push   %eax
c010259e:	68 91 c0 10 c0       	push   $0xc010c091
c01025a3:	e8 ea dc ff ff       	call   c0100292 <cprintf>
c01025a8:	83 c4 10             	add    $0x10,%esp
    cprintf("  esi  0x%08x\n", regs->reg_esi);
c01025ab:	8b 45 08             	mov    0x8(%ebp),%eax
c01025ae:	8b 40 04             	mov    0x4(%eax),%eax
c01025b1:	83 ec 08             	sub    $0x8,%esp
c01025b4:	50                   	push   %eax
c01025b5:	68 a0 c0 10 c0       	push   $0xc010c0a0
c01025ba:	e8 d3 dc ff ff       	call   c0100292 <cprintf>
c01025bf:	83 c4 10             	add    $0x10,%esp
    cprintf("  ebp  0x%08x\n", regs->reg_ebp);
c01025c2:	8b 45 08             	mov    0x8(%ebp),%eax
c01025c5:	8b 40 08             	mov    0x8(%eax),%eax
c01025c8:	83 ec 08             	sub    $0x8,%esp
c01025cb:	50                   	push   %eax
c01025cc:	68 af c0 10 c0       	push   $0xc010c0af
c01025d1:	e8 bc dc ff ff       	call   c0100292 <cprintf>
c01025d6:	83 c4 10             	add    $0x10,%esp
    cprintf("  oesp 0x%08x\n", regs->reg_oesp);
c01025d9:	8b 45 08             	mov    0x8(%ebp),%eax
c01025dc:	8b 40 0c             	mov    0xc(%eax),%eax
c01025df:	83 ec 08             	sub    $0x8,%esp
c01025e2:	50                   	push   %eax
c01025e3:	68 be c0 10 c0       	push   $0xc010c0be
c01025e8:	e8 a5 dc ff ff       	call   c0100292 <cprintf>
c01025ed:	83 c4 10             	add    $0x10,%esp
    cprintf("  ebx  0x%08x\n", regs->reg_ebx);
c01025f0:	8b 45 08             	mov    0x8(%ebp),%eax
c01025f3:	8b 40 10             	mov    0x10(%eax),%eax
c01025f6:	83 ec 08             	sub    $0x8,%esp
c01025f9:	50                   	push   %eax
c01025fa:	68 cd c0 10 c0       	push   $0xc010c0cd
c01025ff:	e8 8e dc ff ff       	call   c0100292 <cprintf>
c0102604:	83 c4 10             	add    $0x10,%esp
    cprintf("  edx  0x%08x\n", regs->reg_edx);
c0102607:	8b 45 08             	mov    0x8(%ebp),%eax
c010260a:	8b 40 14             	mov    0x14(%eax),%eax
c010260d:	83 ec 08             	sub    $0x8,%esp
c0102610:	50                   	push   %eax
c0102611:	68 dc c0 10 c0       	push   $0xc010c0dc
c0102616:	e8 77 dc ff ff       	call   c0100292 <cprintf>
c010261b:	83 c4 10             	add    $0x10,%esp
    cprintf("  ecx  0x%08x\n", regs->reg_ecx);
c010261e:	8b 45 08             	mov    0x8(%ebp),%eax
c0102621:	8b 40 18             	mov    0x18(%eax),%eax
c0102624:	83 ec 08             	sub    $0x8,%esp
c0102627:	50                   	push   %eax
c0102628:	68 eb c0 10 c0       	push   $0xc010c0eb
c010262d:	e8 60 dc ff ff       	call   c0100292 <cprintf>
c0102632:	83 c4 10             	add    $0x10,%esp
    cprintf("  eax  0x%08x\n", regs->reg_eax);
c0102635:	8b 45 08             	mov    0x8(%ebp),%eax
c0102638:	8b 40 1c             	mov    0x1c(%eax),%eax
c010263b:	83 ec 08             	sub    $0x8,%esp
c010263e:	50                   	push   %eax
c010263f:	68 fa c0 10 c0       	push   $0xc010c0fa
c0102644:	e8 49 dc ff ff       	call   c0100292 <cprintf>
c0102649:	83 c4 10             	add    $0x10,%esp
}
c010264c:	90                   	nop
c010264d:	c9                   	leave  
c010264e:	c3                   	ret    

c010264f <print_pgfault>:

static inline void
print_pgfault(struct trapframe *tf) {
c010264f:	55                   	push   %ebp
c0102650:	89 e5                	mov    %esp,%ebp
c0102652:	53                   	push   %ebx
c0102653:	83 ec 14             	sub    $0x14,%esp
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
            (tf->tf_err & 1) ? "protection fault" : "no page found");
c0102656:	8b 45 08             	mov    0x8(%ebp),%eax
c0102659:	8b 40 34             	mov    0x34(%eax),%eax
c010265c:	83 e0 01             	and    $0x1,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c010265f:	85 c0                	test   %eax,%eax
c0102661:	74 07                	je     c010266a <print_pgfault+0x1b>
c0102663:	bb 09 c1 10 c0       	mov    $0xc010c109,%ebx
c0102668:	eb 05                	jmp    c010266f <print_pgfault+0x20>
c010266a:	bb 1a c1 10 c0       	mov    $0xc010c11a,%ebx
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
c010266f:	8b 45 08             	mov    0x8(%ebp),%eax
c0102672:	8b 40 34             	mov    0x34(%eax),%eax
c0102675:	83 e0 02             	and    $0x2,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c0102678:	85 c0                	test   %eax,%eax
c010267a:	74 07                	je     c0102683 <print_pgfault+0x34>
c010267c:	b9 57 00 00 00       	mov    $0x57,%ecx
c0102681:	eb 05                	jmp    c0102688 <print_pgfault+0x39>
c0102683:	b9 52 00 00 00       	mov    $0x52,%ecx
            (tf->tf_err & 4) ? 'U' : 'K',
c0102688:	8b 45 08             	mov    0x8(%ebp),%eax
c010268b:	8b 40 34             	mov    0x34(%eax),%eax
c010268e:	83 e0 04             	and    $0x4,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c0102691:	85 c0                	test   %eax,%eax
c0102693:	74 07                	je     c010269c <print_pgfault+0x4d>
c0102695:	ba 55 00 00 00       	mov    $0x55,%edx
c010269a:	eb 05                	jmp    c01026a1 <print_pgfault+0x52>
c010269c:	ba 4b 00 00 00       	mov    $0x4b,%edx
}

static inline uintptr_t
rcr2(void) {
    uintptr_t cr2;
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c01026a1:	0f 20 d0             	mov    %cr2,%eax
c01026a4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return cr2;
c01026a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01026aa:	83 ec 0c             	sub    $0xc,%esp
c01026ad:	53                   	push   %ebx
c01026ae:	51                   	push   %ecx
c01026af:	52                   	push   %edx
c01026b0:	50                   	push   %eax
c01026b1:	68 28 c1 10 c0       	push   $0xc010c128
c01026b6:	e8 d7 db ff ff       	call   c0100292 <cprintf>
c01026bb:	83 c4 20             	add    $0x20,%esp
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
            (tf->tf_err & 1) ? "protection fault" : "no page found");
}
c01026be:	90                   	nop
c01026bf:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c01026c2:	c9                   	leave  
c01026c3:	c3                   	ret    

c01026c4 <pgfault_handler>:

static int
pgfault_handler(struct trapframe *tf) {
c01026c4:	55                   	push   %ebp
c01026c5:	89 e5                	mov    %esp,%ebp
c01026c7:	83 ec 18             	sub    $0x18,%esp
    extern struct mm_struct *check_mm_struct;
    if(check_mm_struct !=NULL) { //used for test check_swap
c01026ca:	a1 bc 20 1a c0       	mov    0xc01a20bc,%eax
c01026cf:	85 c0                	test   %eax,%eax
c01026d1:	74 0e                	je     c01026e1 <pgfault_handler+0x1d>
            print_pgfault(tf);
c01026d3:	83 ec 0c             	sub    $0xc,%esp
c01026d6:	ff 75 08             	pushl  0x8(%ebp)
c01026d9:	e8 71 ff ff ff       	call   c010264f <print_pgfault>
c01026de:	83 c4 10             	add    $0x10,%esp
        }
    struct mm_struct *mm;
    if (check_mm_struct != NULL) {
c01026e1:	a1 bc 20 1a c0       	mov    0xc01a20bc,%eax
c01026e6:	85 c0                	test   %eax,%eax
c01026e8:	74 32                	je     c010271c <pgfault_handler+0x58>
        assert(current == idleproc);
c01026ea:	8b 15 28 00 1a c0    	mov    0xc01a0028,%edx
c01026f0:	a1 20 00 1a c0       	mov    0xc01a0020,%eax
c01026f5:	39 c2                	cmp    %eax,%edx
c01026f7:	74 19                	je     c0102712 <pgfault_handler+0x4e>
c01026f9:	68 4b c1 10 c0       	push   $0xc010c14b
c01026fe:	68 5f c1 10 c0       	push   $0xc010c15f
c0102703:	68 b7 00 00 00       	push   $0xb7
c0102708:	68 4e bf 10 c0       	push   $0xc010bf4e
c010270d:	e8 e6 dc ff ff       	call   c01003f8 <__panic>
        mm = check_mm_struct;
c0102712:	a1 bc 20 1a c0       	mov    0xc01a20bc,%eax
c0102717:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010271a:	eb 47                	jmp    c0102763 <pgfault_handler+0x9f>
    }
    else {
        if (current == NULL) {
c010271c:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c0102721:	85 c0                	test   %eax,%eax
c0102723:	75 33                	jne    c0102758 <pgfault_handler+0x94>
            print_trapframe(tf);
c0102725:	83 ec 0c             	sub    $0xc,%esp
c0102728:	ff 75 08             	pushl  0x8(%ebp)
c010272b:	e8 82 fc ff ff       	call   c01023b2 <print_trapframe>
c0102730:	83 c4 10             	add    $0x10,%esp
            print_pgfault(tf);
c0102733:	83 ec 0c             	sub    $0xc,%esp
c0102736:	ff 75 08             	pushl  0x8(%ebp)
c0102739:	e8 11 ff ff ff       	call   c010264f <print_pgfault>
c010273e:	83 c4 10             	add    $0x10,%esp
            panic("unhandled page fault.\n");
c0102741:	83 ec 04             	sub    $0x4,%esp
c0102744:	68 74 c1 10 c0       	push   $0xc010c174
c0102749:	68 be 00 00 00       	push   $0xbe
c010274e:	68 4e bf 10 c0       	push   $0xc010bf4e
c0102753:	e8 a0 dc ff ff       	call   c01003f8 <__panic>
        }
        mm = current->mm;
c0102758:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c010275d:	8b 40 18             	mov    0x18(%eax),%eax
c0102760:	89 45 f4             	mov    %eax,-0xc(%ebp)
}

static inline uintptr_t
rcr2(void) {
    uintptr_t cr2;
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c0102763:	0f 20 d0             	mov    %cr2,%eax
c0102766:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return cr2;
c0102769:	8b 55 f0             	mov    -0x10(%ebp),%edx
    }
    return do_pgfault(mm, tf->tf_err, rcr2());
c010276c:	8b 45 08             	mov    0x8(%ebp),%eax
c010276f:	8b 40 34             	mov    0x34(%eax),%eax
c0102772:	83 ec 04             	sub    $0x4,%esp
c0102775:	52                   	push   %edx
c0102776:	50                   	push   %eax
c0102777:	ff 75 f4             	pushl  -0xc(%ebp)
c010277a:	e8 bd 22 00 00       	call   c0104a3c <do_pgfault>
c010277f:	83 c4 10             	add    $0x10,%esp
}
c0102782:	c9                   	leave  
c0102783:	c3                   	ret    

c0102784 <trap_dispatch>:

static volatile int in_swap_tick_event = 0;
extern struct mm_struct *check_mm_struct;

static void
trap_dispatch(struct trapframe *tf) {
c0102784:	55                   	push   %ebp
c0102785:	89 e5                	mov    %esp,%ebp
c0102787:	57                   	push   %edi
c0102788:	56                   	push   %esi
c0102789:	53                   	push   %ebx
c010278a:	83 ec 1c             	sub    $0x1c,%esp
    char c;

    int ret=0;
c010278d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

    switch (tf->tf_trapno) {
c0102794:	8b 45 08             	mov    0x8(%ebp),%eax
c0102797:	8b 40 30             	mov    0x30(%eax),%eax
c010279a:	83 f8 2f             	cmp    $0x2f,%eax
c010279d:	77 38                	ja     c01027d7 <trap_dispatch+0x53>
c010279f:	83 f8 2e             	cmp    $0x2e,%eax
c01027a2:	0f 83 6d 02 00 00    	jae    c0102a15 <trap_dispatch+0x291>
c01027a8:	83 f8 20             	cmp    $0x20,%eax
c01027ab:	0f 84 eb 00 00 00    	je     c010289c <trap_dispatch+0x118>
c01027b1:	83 f8 20             	cmp    $0x20,%eax
c01027b4:	77 0a                	ja     c01027c0 <trap_dispatch+0x3c>
c01027b6:	83 f8 0e             	cmp    $0xe,%eax
c01027b9:	74 3e                	je     c01027f9 <trap_dispatch+0x75>
c01027bb:	e9 0a 02 00 00       	jmp    c01029ca <trap_dispatch+0x246>
c01027c0:	83 f8 21             	cmp    $0x21,%eax
c01027c3:	0f 84 34 01 00 00    	je     c01028fd <trap_dispatch+0x179>
c01027c9:	83 f8 24             	cmp    $0x24,%eax
c01027cc:	0f 84 04 01 00 00    	je     c01028d6 <trap_dispatch+0x152>
c01027d2:	e9 f3 01 00 00       	jmp    c01029ca <trap_dispatch+0x246>
c01027d7:	83 f8 79             	cmp    $0x79,%eax
c01027da:	0f 84 bc 01 00 00    	je     c010299c <trap_dispatch+0x218>
c01027e0:	3d 80 00 00 00       	cmp    $0x80,%eax
c01027e5:	0f 84 a7 00 00 00    	je     c0102892 <trap_dispatch+0x10e>
c01027eb:	83 f8 78             	cmp    $0x78,%eax
c01027ee:	0f 84 30 01 00 00    	je     c0102924 <trap_dispatch+0x1a0>
c01027f4:	e9 d1 01 00 00       	jmp    c01029ca <trap_dispatch+0x246>
    case T_PGFLT:  //page fault
        if ((ret = pgfault_handler(tf)) != 0) {
c01027f9:	83 ec 0c             	sub    $0xc,%esp
c01027fc:	ff 75 08             	pushl  0x8(%ebp)
c01027ff:	e8 c0 fe ff ff       	call   c01026c4 <pgfault_handler>
c0102804:	83 c4 10             	add    $0x10,%esp
c0102807:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010280a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010280e:	0f 84 04 02 00 00    	je     c0102a18 <trap_dispatch+0x294>
            print_trapframe(tf);
c0102814:	83 ec 0c             	sub    $0xc,%esp
c0102817:	ff 75 08             	pushl  0x8(%ebp)
c010281a:	e8 93 fb ff ff       	call   c01023b2 <print_trapframe>
c010281f:	83 c4 10             	add    $0x10,%esp
            if (current == NULL) {
c0102822:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c0102827:	85 c0                	test   %eax,%eax
c0102829:	75 17                	jne    c0102842 <trap_dispatch+0xbe>
                panic("handle pgfault failed. ret=%d\n", ret);
c010282b:	ff 75 e4             	pushl  -0x1c(%ebp)
c010282e:	68 8c c1 10 c0       	push   $0xc010c18c
c0102833:	68 d3 00 00 00       	push   $0xd3
c0102838:	68 4e bf 10 c0       	push   $0xc010bf4e
c010283d:	e8 b6 db ff ff       	call   c01003f8 <__panic>
            }
            else {
                if (trap_in_kernel(tf)) {
c0102842:	83 ec 0c             	sub    $0xc,%esp
c0102845:	ff 75 08             	pushl  0x8(%ebp)
c0102848:	e8 4f fb ff ff       	call   c010239c <trap_in_kernel>
c010284d:	83 c4 10             	add    $0x10,%esp
c0102850:	85 c0                	test   %eax,%eax
c0102852:	74 17                	je     c010286b <trap_dispatch+0xe7>
                    panic("handle pgfault failed in kernel mode. ret=%d\n", ret);
c0102854:	ff 75 e4             	pushl  -0x1c(%ebp)
c0102857:	68 ac c1 10 c0       	push   $0xc010c1ac
c010285c:	68 d7 00 00 00       	push   $0xd7
c0102861:	68 4e bf 10 c0       	push   $0xc010bf4e
c0102866:	e8 8d db ff ff       	call   c01003f8 <__panic>
                }
                cprintf("killed by kernel.\n");
c010286b:	83 ec 0c             	sub    $0xc,%esp
c010286e:	68 da c1 10 c0       	push   $0xc010c1da
c0102873:	e8 1a da ff ff       	call   c0100292 <cprintf>
c0102878:	83 c4 10             	add    $0x10,%esp
                panic("handle user mode pgfault failed. ret=%d\n", ret); 
c010287b:	ff 75 e4             	pushl  -0x1c(%ebp)
c010287e:	68 f0 c1 10 c0       	push   $0xc010c1f0
c0102883:	68 da 00 00 00       	push   $0xda
c0102888:	68 4e bf 10 c0       	push   $0xc010bf4e
c010288d:	e8 66 db ff ff       	call   c01003f8 <__panic>
                do_exit(-E_KILLED);
            }
        }
        break;
    case T_SYSCALL:
        syscall();
c0102892:	e8 a4 85 00 00       	call   c010ae3b <syscall>
        break;
c0102897:	e9 80 01 00 00       	jmp    c0102a1c <trap_dispatch+0x298>
        /* handle the timer interrupt */
        /* (1) After a timer interrupt, you should record this event using a global variable (increase it), such as ticks in kern/driver/clock.c
         * (2) Every TICK_NUM cycle, you can print some info using a funciton, such as print_ticks().
         * (3) Too Simple? Yes, I think so!
         */
        ticks++;
c010289c:	a1 54 20 1a c0       	mov    0xc01a2054,%eax
c01028a1:	83 c0 01             	add    $0x1,%eax
c01028a4:	a3 54 20 1a c0       	mov    %eax,0xc01a2054
        if (ticks % TICK_NUM == 0) {
c01028a9:	8b 0d 54 20 1a c0    	mov    0xc01a2054,%ecx
c01028af:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
c01028b4:	89 c8                	mov    %ecx,%eax
c01028b6:	f7 e2                	mul    %edx
c01028b8:	89 d0                	mov    %edx,%eax
c01028ba:	c1 e8 05             	shr    $0x5,%eax
c01028bd:	6b c0 64             	imul   $0x64,%eax,%eax
c01028c0:	29 c1                	sub    %eax,%ecx
c01028c2:	89 c8                	mov    %ecx,%eax
c01028c4:	85 c0                	test   %eax,%eax
c01028c6:	0f 85 4f 01 00 00    	jne    c0102a1b <trap_dispatch+0x297>
            print_ticks();
c01028cc:	e8 ed f8 ff ff       	call   c01021be <print_ticks>
        }
        break;
c01028d1:	e9 45 01 00 00       	jmp    c0102a1b <trap_dispatch+0x297>
         *    Every TICK_NUM cycle, you should set current process's current->need_resched = 1
         */
  
        break;
    case IRQ_OFFSET + IRQ_COM1:
        c = cons_getc();
c01028d6:	e8 a0 f6 ff ff       	call   c0101f7b <cons_getc>
c01028db:	88 45 e3             	mov    %al,-0x1d(%ebp)
        cprintf("serial [%03d] %c\n", c, c);
c01028de:	0f be 55 e3          	movsbl -0x1d(%ebp),%edx
c01028e2:	0f be 45 e3          	movsbl -0x1d(%ebp),%eax
c01028e6:	83 ec 04             	sub    $0x4,%esp
c01028e9:	52                   	push   %edx
c01028ea:	50                   	push   %eax
c01028eb:	68 19 c2 10 c0       	push   $0xc010c219
c01028f0:	e8 9d d9 ff ff       	call   c0100292 <cprintf>
c01028f5:	83 c4 10             	add    $0x10,%esp
        break;
c01028f8:	e9 1f 01 00 00       	jmp    c0102a1c <trap_dispatch+0x298>
    case IRQ_OFFSET + IRQ_KBD:
        c = cons_getc();
c01028fd:	e8 79 f6 ff ff       	call   c0101f7b <cons_getc>
c0102902:	88 45 e3             	mov    %al,-0x1d(%ebp)
        cprintf("kbd [%03d] %c\n", c, c);
c0102905:	0f be 55 e3          	movsbl -0x1d(%ebp),%edx
c0102909:	0f be 45 e3          	movsbl -0x1d(%ebp),%eax
c010290d:	83 ec 04             	sub    $0x4,%esp
c0102910:	52                   	push   %edx
c0102911:	50                   	push   %eax
c0102912:	68 2b c2 10 c0       	push   $0xc010c22b
c0102917:	e8 76 d9 ff ff       	call   c0100292 <cprintf>
c010291c:	83 c4 10             	add    $0x10,%esp
        break;
c010291f:	e9 f8 00 00 00       	jmp    c0102a1c <trap_dispatch+0x298>
    //LAB1 CHALLENGE 1 : YOUR CODE you should modify below codes.
    case T_SWITCH_TOU:
        switchk2u = *tf;
c0102924:	8b 55 08             	mov    0x8(%ebp),%edx
c0102927:	b8 60 20 1a c0       	mov    $0xc01a2060,%eax
c010292c:	89 d3                	mov    %edx,%ebx
c010292e:	ba 4c 00 00 00       	mov    $0x4c,%edx
c0102933:	8b 0b                	mov    (%ebx),%ecx
c0102935:	89 08                	mov    %ecx,(%eax)
c0102937:	8b 4c 13 fc          	mov    -0x4(%ebx,%edx,1),%ecx
c010293b:	89 4c 10 fc          	mov    %ecx,-0x4(%eax,%edx,1)
c010293f:	8d 78 04             	lea    0x4(%eax),%edi
c0102942:	83 e7 fc             	and    $0xfffffffc,%edi
c0102945:	29 f8                	sub    %edi,%eax
c0102947:	29 c3                	sub    %eax,%ebx
c0102949:	01 c2                	add    %eax,%edx
c010294b:	83 e2 fc             	and    $0xfffffffc,%edx
c010294e:	89 d0                	mov    %edx,%eax
c0102950:	c1 e8 02             	shr    $0x2,%eax
c0102953:	89 de                	mov    %ebx,%esi
c0102955:	89 c1                	mov    %eax,%ecx
c0102957:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
        switchk2u.tf_cs = USER_CS;
c0102959:	66 c7 05 9c 20 1a c0 	movw   $0x1b,0xc01a209c
c0102960:	1b 00 
        switchk2u.tf_ds = USER_DS;
c0102962:	66 c7 05 8c 20 1a c0 	movw   $0x23,0xc01a208c
c0102969:	23 00 
        switchk2u.tf_es = USER_DS;
c010296b:	66 c7 05 88 20 1a c0 	movw   $0x23,0xc01a2088
c0102972:	23 00 
        switchk2u.tf_ss = USER_DS;
c0102974:	66 c7 05 a8 20 1a c0 	movw   $0x23,0xc01a20a8
c010297b:	23 00 
        switchk2u.tf_eflags |= FL_IOPL_MASK;
c010297d:	a1 a0 20 1a c0       	mov    0xc01a20a0,%eax
c0102982:	80 cc 30             	or     $0x30,%ah
c0102985:	a3 a0 20 1a c0       	mov    %eax,0xc01a20a0
        *((uint32_t *)tf - 1) = (uint32_t)&switchk2u;
c010298a:	8b 45 08             	mov    0x8(%ebp),%eax
c010298d:	83 e8 04             	sub    $0x4,%eax
c0102990:	ba 60 20 1a c0       	mov    $0xc01a2060,%edx
c0102995:	89 10                	mov    %edx,(%eax)
        break;
c0102997:	e9 80 00 00 00       	jmp    c0102a1c <trap_dispatch+0x298>
    case T_SWITCH_TOK:
        tf->tf_cs = KERNEL_CS;
c010299c:	8b 45 08             	mov    0x8(%ebp),%eax
c010299f:	66 c7 40 3c 08 00    	movw   $0x8,0x3c(%eax)
        tf->tf_ds = KERNEL_DS;
c01029a5:	8b 45 08             	mov    0x8(%ebp),%eax
c01029a8:	66 c7 40 2c 10 00    	movw   $0x10,0x2c(%eax)
        tf->tf_es = KERNEL_DS;
c01029ae:	8b 45 08             	mov    0x8(%ebp),%eax
c01029b1:	66 c7 40 28 10 00    	movw   $0x10,0x28(%eax)
        tf->tf_eflags &= ~FL_IOPL_MASK;
c01029b7:	8b 45 08             	mov    0x8(%ebp),%eax
c01029ba:	8b 40 40             	mov    0x40(%eax),%eax
c01029bd:	80 e4 cf             	and    $0xcf,%ah
c01029c0:	89 c2                	mov    %eax,%edx
c01029c2:	8b 45 08             	mov    0x8(%ebp),%eax
c01029c5:	89 50 40             	mov    %edx,0x40(%eax)
        break;
c01029c8:	eb 52                	jmp    c0102a1c <trap_dispatch+0x298>
    case IRQ_OFFSET + IRQ_IDE1:
    case IRQ_OFFSET + IRQ_IDE2:
        /* do nothing */
        break;
    default:
        print_trapframe(tf);
c01029ca:	83 ec 0c             	sub    $0xc,%esp
c01029cd:	ff 75 08             	pushl  0x8(%ebp)
c01029d0:	e8 dd f9 ff ff       	call   c01023b2 <print_trapframe>
c01029d5:	83 c4 10             	add    $0x10,%esp
        if (current != NULL) {
c01029d8:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c01029dd:	85 c0                	test   %eax,%eax
c01029df:	74 1d                	je     c01029fe <trap_dispatch+0x27a>
            cprintf("unhandled trap.\n");
c01029e1:	83 ec 0c             	sub    $0xc,%esp
c01029e4:	68 3a c2 10 c0       	push   $0xc010c23a
c01029e9:	e8 a4 d8 ff ff       	call   c0100292 <cprintf>
c01029ee:	83 c4 10             	add    $0x10,%esp
            do_exit(-E_KILLED);
c01029f1:	83 ec 0c             	sub    $0xc,%esp
c01029f4:	6a f7                	push   $0xfffffff7
c01029f6:	e8 76 73 00 00       	call   c0109d71 <do_exit>
c01029fb:	83 c4 10             	add    $0x10,%esp
        }
        // in kernel, it must be a mistake
        panic("unexpected trap in kernel.\n");
c01029fe:	83 ec 04             	sub    $0x4,%esp
c0102a01:	68 4b c2 10 c0       	push   $0xc010c24b
c0102a06:	68 1e 01 00 00       	push   $0x11e
c0102a0b:	68 4e bf 10 c0       	push   $0xc010bf4e
c0102a10:	e8 e3 d9 ff ff       	call   c01003f8 <__panic>
    // end of copy
    
    case IRQ_OFFSET + IRQ_IDE1:
    case IRQ_OFFSET + IRQ_IDE2:
        /* do nothing */
        break;
c0102a15:	90                   	nop
c0102a16:	eb 04                	jmp    c0102a1c <trap_dispatch+0x298>
                cprintf("killed by kernel.\n");
                panic("handle user mode pgfault failed. ret=%d\n", ret); 
                do_exit(-E_KILLED);
            }
        }
        break;
c0102a18:	90                   	nop
c0102a19:	eb 01                	jmp    c0102a1c <trap_dispatch+0x298>
         */
        ticks++;
        if (ticks % TICK_NUM == 0) {
            print_ticks();
        }
        break;
c0102a1b:	90                   	nop
        }
        // in kernel, it must be a mistake
        panic("unexpected trap in kernel.\n");

    }
}
c0102a1c:	90                   	nop
c0102a1d:	8d 65 f4             	lea    -0xc(%ebp),%esp
c0102a20:	5b                   	pop    %ebx
c0102a21:	5e                   	pop    %esi
c0102a22:	5f                   	pop    %edi
c0102a23:	5d                   	pop    %ebp
c0102a24:	c3                   	ret    

c0102a25 <trap>:
 * trap - handles or dispatches an exception/interrupt. if and when trap() returns,
 * the code in kern/trap/trapentry.S restores the old CPU state saved in the
 * trapframe and then uses the iret instruction to return from the exception.
 * */
void
trap(struct trapframe *tf) {
c0102a25:	55                   	push   %ebp
c0102a26:	89 e5                	mov    %esp,%ebp
c0102a28:	83 ec 18             	sub    $0x18,%esp
    // dispatch based on what type of trap occurred
    // used for previous projects
    if (current == NULL) {
c0102a2b:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c0102a30:	85 c0                	test   %eax,%eax
c0102a32:	75 10                	jne    c0102a44 <trap+0x1f>
        trap_dispatch(tf);
c0102a34:	83 ec 0c             	sub    $0xc,%esp
c0102a37:	ff 75 08             	pushl  0x8(%ebp)
c0102a3a:	e8 45 fd ff ff       	call   c0102784 <trap_dispatch>
c0102a3f:	83 c4 10             	add    $0x10,%esp
            if (current->need_resched) {
                schedule();
            }
        }
    }
}
c0102a42:	eb 73                	jmp    c0102ab7 <trap+0x92>
    if (current == NULL) {
        trap_dispatch(tf);
    }
    else {
        // keep a trapframe chain in stack
        struct trapframe *otf = current->tf;
c0102a44:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c0102a49:	8b 40 3c             	mov    0x3c(%eax),%eax
c0102a4c:	89 45 f4             	mov    %eax,-0xc(%ebp)
        current->tf = tf;
c0102a4f:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c0102a54:	8b 55 08             	mov    0x8(%ebp),%edx
c0102a57:	89 50 3c             	mov    %edx,0x3c(%eax)
    
        bool in_kernel = trap_in_kernel(tf);
c0102a5a:	83 ec 0c             	sub    $0xc,%esp
c0102a5d:	ff 75 08             	pushl  0x8(%ebp)
c0102a60:	e8 37 f9 ff ff       	call   c010239c <trap_in_kernel>
c0102a65:	83 c4 10             	add    $0x10,%esp
c0102a68:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
        trap_dispatch(tf);
c0102a6b:	83 ec 0c             	sub    $0xc,%esp
c0102a6e:	ff 75 08             	pushl  0x8(%ebp)
c0102a71:	e8 0e fd ff ff       	call   c0102784 <trap_dispatch>
c0102a76:	83 c4 10             	add    $0x10,%esp
    
        current->tf = otf;
c0102a79:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c0102a7e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0102a81:	89 50 3c             	mov    %edx,0x3c(%eax)
        if (!in_kernel) {
c0102a84:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0102a88:	75 2d                	jne    c0102ab7 <trap+0x92>
            if (current->flags & PF_EXITING) {
c0102a8a:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c0102a8f:	8b 40 44             	mov    0x44(%eax),%eax
c0102a92:	83 e0 01             	and    $0x1,%eax
c0102a95:	85 c0                	test   %eax,%eax
c0102a97:	74 0d                	je     c0102aa6 <trap+0x81>
                do_exit(-E_KILLED);
c0102a99:	83 ec 0c             	sub    $0xc,%esp
c0102a9c:	6a f7                	push   $0xfffffff7
c0102a9e:	e8 ce 72 00 00       	call   c0109d71 <do_exit>
c0102aa3:	83 c4 10             	add    $0x10,%esp
            }
            if (current->need_resched) {
c0102aa6:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c0102aab:	8b 40 10             	mov    0x10(%eax),%eax
c0102aae:	85 c0                	test   %eax,%eax
c0102ab0:	74 05                	je     c0102ab7 <trap+0x92>
                schedule();
c0102ab2:	e8 8b 81 00 00       	call   c010ac42 <schedule>
            }
        }
    }
}
c0102ab7:	90                   	nop
c0102ab8:	c9                   	leave  
c0102ab9:	c3                   	ret    

c0102aba <vector0>:
# handler
.text
.globl __alltraps
.globl vector0
vector0:
  pushl $0
c0102aba:	6a 00                	push   $0x0
  pushl $0
c0102abc:	6a 00                	push   $0x0
  jmp __alltraps
c0102abe:	e9 69 0a 00 00       	jmp    c010352c <__alltraps>

c0102ac3 <vector1>:
.globl vector1
vector1:
  pushl $0
c0102ac3:	6a 00                	push   $0x0
  pushl $1
c0102ac5:	6a 01                	push   $0x1
  jmp __alltraps
c0102ac7:	e9 60 0a 00 00       	jmp    c010352c <__alltraps>

c0102acc <vector2>:
.globl vector2
vector2:
  pushl $0
c0102acc:	6a 00                	push   $0x0
  pushl $2
c0102ace:	6a 02                	push   $0x2
  jmp __alltraps
c0102ad0:	e9 57 0a 00 00       	jmp    c010352c <__alltraps>

c0102ad5 <vector3>:
.globl vector3
vector3:
  pushl $0
c0102ad5:	6a 00                	push   $0x0
  pushl $3
c0102ad7:	6a 03                	push   $0x3
  jmp __alltraps
c0102ad9:	e9 4e 0a 00 00       	jmp    c010352c <__alltraps>

c0102ade <vector4>:
.globl vector4
vector4:
  pushl $0
c0102ade:	6a 00                	push   $0x0
  pushl $4
c0102ae0:	6a 04                	push   $0x4
  jmp __alltraps
c0102ae2:	e9 45 0a 00 00       	jmp    c010352c <__alltraps>

c0102ae7 <vector5>:
.globl vector5
vector5:
  pushl $0
c0102ae7:	6a 00                	push   $0x0
  pushl $5
c0102ae9:	6a 05                	push   $0x5
  jmp __alltraps
c0102aeb:	e9 3c 0a 00 00       	jmp    c010352c <__alltraps>

c0102af0 <vector6>:
.globl vector6
vector6:
  pushl $0
c0102af0:	6a 00                	push   $0x0
  pushl $6
c0102af2:	6a 06                	push   $0x6
  jmp __alltraps
c0102af4:	e9 33 0a 00 00       	jmp    c010352c <__alltraps>

c0102af9 <vector7>:
.globl vector7
vector7:
  pushl $0
c0102af9:	6a 00                	push   $0x0
  pushl $7
c0102afb:	6a 07                	push   $0x7
  jmp __alltraps
c0102afd:	e9 2a 0a 00 00       	jmp    c010352c <__alltraps>

c0102b02 <vector8>:
.globl vector8
vector8:
  pushl $8
c0102b02:	6a 08                	push   $0x8
  jmp __alltraps
c0102b04:	e9 23 0a 00 00       	jmp    c010352c <__alltraps>

c0102b09 <vector9>:
.globl vector9
vector9:
  pushl $0
c0102b09:	6a 00                	push   $0x0
  pushl $9
c0102b0b:	6a 09                	push   $0x9
  jmp __alltraps
c0102b0d:	e9 1a 0a 00 00       	jmp    c010352c <__alltraps>

c0102b12 <vector10>:
.globl vector10
vector10:
  pushl $10
c0102b12:	6a 0a                	push   $0xa
  jmp __alltraps
c0102b14:	e9 13 0a 00 00       	jmp    c010352c <__alltraps>

c0102b19 <vector11>:
.globl vector11
vector11:
  pushl $11
c0102b19:	6a 0b                	push   $0xb
  jmp __alltraps
c0102b1b:	e9 0c 0a 00 00       	jmp    c010352c <__alltraps>

c0102b20 <vector12>:
.globl vector12
vector12:
  pushl $12
c0102b20:	6a 0c                	push   $0xc
  jmp __alltraps
c0102b22:	e9 05 0a 00 00       	jmp    c010352c <__alltraps>

c0102b27 <vector13>:
.globl vector13
vector13:
  pushl $13
c0102b27:	6a 0d                	push   $0xd
  jmp __alltraps
c0102b29:	e9 fe 09 00 00       	jmp    c010352c <__alltraps>

c0102b2e <vector14>:
.globl vector14
vector14:
  pushl $14
c0102b2e:	6a 0e                	push   $0xe
  jmp __alltraps
c0102b30:	e9 f7 09 00 00       	jmp    c010352c <__alltraps>

c0102b35 <vector15>:
.globl vector15
vector15:
  pushl $0
c0102b35:	6a 00                	push   $0x0
  pushl $15
c0102b37:	6a 0f                	push   $0xf
  jmp __alltraps
c0102b39:	e9 ee 09 00 00       	jmp    c010352c <__alltraps>

c0102b3e <vector16>:
.globl vector16
vector16:
  pushl $0
c0102b3e:	6a 00                	push   $0x0
  pushl $16
c0102b40:	6a 10                	push   $0x10
  jmp __alltraps
c0102b42:	e9 e5 09 00 00       	jmp    c010352c <__alltraps>

c0102b47 <vector17>:
.globl vector17
vector17:
  pushl $17
c0102b47:	6a 11                	push   $0x11
  jmp __alltraps
c0102b49:	e9 de 09 00 00       	jmp    c010352c <__alltraps>

c0102b4e <vector18>:
.globl vector18
vector18:
  pushl $0
c0102b4e:	6a 00                	push   $0x0
  pushl $18
c0102b50:	6a 12                	push   $0x12
  jmp __alltraps
c0102b52:	e9 d5 09 00 00       	jmp    c010352c <__alltraps>

c0102b57 <vector19>:
.globl vector19
vector19:
  pushl $0
c0102b57:	6a 00                	push   $0x0
  pushl $19
c0102b59:	6a 13                	push   $0x13
  jmp __alltraps
c0102b5b:	e9 cc 09 00 00       	jmp    c010352c <__alltraps>

c0102b60 <vector20>:
.globl vector20
vector20:
  pushl $0
c0102b60:	6a 00                	push   $0x0
  pushl $20
c0102b62:	6a 14                	push   $0x14
  jmp __alltraps
c0102b64:	e9 c3 09 00 00       	jmp    c010352c <__alltraps>

c0102b69 <vector21>:
.globl vector21
vector21:
  pushl $0
c0102b69:	6a 00                	push   $0x0
  pushl $21
c0102b6b:	6a 15                	push   $0x15
  jmp __alltraps
c0102b6d:	e9 ba 09 00 00       	jmp    c010352c <__alltraps>

c0102b72 <vector22>:
.globl vector22
vector22:
  pushl $0
c0102b72:	6a 00                	push   $0x0
  pushl $22
c0102b74:	6a 16                	push   $0x16
  jmp __alltraps
c0102b76:	e9 b1 09 00 00       	jmp    c010352c <__alltraps>

c0102b7b <vector23>:
.globl vector23
vector23:
  pushl $0
c0102b7b:	6a 00                	push   $0x0
  pushl $23
c0102b7d:	6a 17                	push   $0x17
  jmp __alltraps
c0102b7f:	e9 a8 09 00 00       	jmp    c010352c <__alltraps>

c0102b84 <vector24>:
.globl vector24
vector24:
  pushl $0
c0102b84:	6a 00                	push   $0x0
  pushl $24
c0102b86:	6a 18                	push   $0x18
  jmp __alltraps
c0102b88:	e9 9f 09 00 00       	jmp    c010352c <__alltraps>

c0102b8d <vector25>:
.globl vector25
vector25:
  pushl $0
c0102b8d:	6a 00                	push   $0x0
  pushl $25
c0102b8f:	6a 19                	push   $0x19
  jmp __alltraps
c0102b91:	e9 96 09 00 00       	jmp    c010352c <__alltraps>

c0102b96 <vector26>:
.globl vector26
vector26:
  pushl $0
c0102b96:	6a 00                	push   $0x0
  pushl $26
c0102b98:	6a 1a                	push   $0x1a
  jmp __alltraps
c0102b9a:	e9 8d 09 00 00       	jmp    c010352c <__alltraps>

c0102b9f <vector27>:
.globl vector27
vector27:
  pushl $0
c0102b9f:	6a 00                	push   $0x0
  pushl $27
c0102ba1:	6a 1b                	push   $0x1b
  jmp __alltraps
c0102ba3:	e9 84 09 00 00       	jmp    c010352c <__alltraps>

c0102ba8 <vector28>:
.globl vector28
vector28:
  pushl $0
c0102ba8:	6a 00                	push   $0x0
  pushl $28
c0102baa:	6a 1c                	push   $0x1c
  jmp __alltraps
c0102bac:	e9 7b 09 00 00       	jmp    c010352c <__alltraps>

c0102bb1 <vector29>:
.globl vector29
vector29:
  pushl $0
c0102bb1:	6a 00                	push   $0x0
  pushl $29
c0102bb3:	6a 1d                	push   $0x1d
  jmp __alltraps
c0102bb5:	e9 72 09 00 00       	jmp    c010352c <__alltraps>

c0102bba <vector30>:
.globl vector30
vector30:
  pushl $0
c0102bba:	6a 00                	push   $0x0
  pushl $30
c0102bbc:	6a 1e                	push   $0x1e
  jmp __alltraps
c0102bbe:	e9 69 09 00 00       	jmp    c010352c <__alltraps>

c0102bc3 <vector31>:
.globl vector31
vector31:
  pushl $0
c0102bc3:	6a 00                	push   $0x0
  pushl $31
c0102bc5:	6a 1f                	push   $0x1f
  jmp __alltraps
c0102bc7:	e9 60 09 00 00       	jmp    c010352c <__alltraps>

c0102bcc <vector32>:
.globl vector32
vector32:
  pushl $0
c0102bcc:	6a 00                	push   $0x0
  pushl $32
c0102bce:	6a 20                	push   $0x20
  jmp __alltraps
c0102bd0:	e9 57 09 00 00       	jmp    c010352c <__alltraps>

c0102bd5 <vector33>:
.globl vector33
vector33:
  pushl $0
c0102bd5:	6a 00                	push   $0x0
  pushl $33
c0102bd7:	6a 21                	push   $0x21
  jmp __alltraps
c0102bd9:	e9 4e 09 00 00       	jmp    c010352c <__alltraps>

c0102bde <vector34>:
.globl vector34
vector34:
  pushl $0
c0102bde:	6a 00                	push   $0x0
  pushl $34
c0102be0:	6a 22                	push   $0x22
  jmp __alltraps
c0102be2:	e9 45 09 00 00       	jmp    c010352c <__alltraps>

c0102be7 <vector35>:
.globl vector35
vector35:
  pushl $0
c0102be7:	6a 00                	push   $0x0
  pushl $35
c0102be9:	6a 23                	push   $0x23
  jmp __alltraps
c0102beb:	e9 3c 09 00 00       	jmp    c010352c <__alltraps>

c0102bf0 <vector36>:
.globl vector36
vector36:
  pushl $0
c0102bf0:	6a 00                	push   $0x0
  pushl $36
c0102bf2:	6a 24                	push   $0x24
  jmp __alltraps
c0102bf4:	e9 33 09 00 00       	jmp    c010352c <__alltraps>

c0102bf9 <vector37>:
.globl vector37
vector37:
  pushl $0
c0102bf9:	6a 00                	push   $0x0
  pushl $37
c0102bfb:	6a 25                	push   $0x25
  jmp __alltraps
c0102bfd:	e9 2a 09 00 00       	jmp    c010352c <__alltraps>

c0102c02 <vector38>:
.globl vector38
vector38:
  pushl $0
c0102c02:	6a 00                	push   $0x0
  pushl $38
c0102c04:	6a 26                	push   $0x26
  jmp __alltraps
c0102c06:	e9 21 09 00 00       	jmp    c010352c <__alltraps>

c0102c0b <vector39>:
.globl vector39
vector39:
  pushl $0
c0102c0b:	6a 00                	push   $0x0
  pushl $39
c0102c0d:	6a 27                	push   $0x27
  jmp __alltraps
c0102c0f:	e9 18 09 00 00       	jmp    c010352c <__alltraps>

c0102c14 <vector40>:
.globl vector40
vector40:
  pushl $0
c0102c14:	6a 00                	push   $0x0
  pushl $40
c0102c16:	6a 28                	push   $0x28
  jmp __alltraps
c0102c18:	e9 0f 09 00 00       	jmp    c010352c <__alltraps>

c0102c1d <vector41>:
.globl vector41
vector41:
  pushl $0
c0102c1d:	6a 00                	push   $0x0
  pushl $41
c0102c1f:	6a 29                	push   $0x29
  jmp __alltraps
c0102c21:	e9 06 09 00 00       	jmp    c010352c <__alltraps>

c0102c26 <vector42>:
.globl vector42
vector42:
  pushl $0
c0102c26:	6a 00                	push   $0x0
  pushl $42
c0102c28:	6a 2a                	push   $0x2a
  jmp __alltraps
c0102c2a:	e9 fd 08 00 00       	jmp    c010352c <__alltraps>

c0102c2f <vector43>:
.globl vector43
vector43:
  pushl $0
c0102c2f:	6a 00                	push   $0x0
  pushl $43
c0102c31:	6a 2b                	push   $0x2b
  jmp __alltraps
c0102c33:	e9 f4 08 00 00       	jmp    c010352c <__alltraps>

c0102c38 <vector44>:
.globl vector44
vector44:
  pushl $0
c0102c38:	6a 00                	push   $0x0
  pushl $44
c0102c3a:	6a 2c                	push   $0x2c
  jmp __alltraps
c0102c3c:	e9 eb 08 00 00       	jmp    c010352c <__alltraps>

c0102c41 <vector45>:
.globl vector45
vector45:
  pushl $0
c0102c41:	6a 00                	push   $0x0
  pushl $45
c0102c43:	6a 2d                	push   $0x2d
  jmp __alltraps
c0102c45:	e9 e2 08 00 00       	jmp    c010352c <__alltraps>

c0102c4a <vector46>:
.globl vector46
vector46:
  pushl $0
c0102c4a:	6a 00                	push   $0x0
  pushl $46
c0102c4c:	6a 2e                	push   $0x2e
  jmp __alltraps
c0102c4e:	e9 d9 08 00 00       	jmp    c010352c <__alltraps>

c0102c53 <vector47>:
.globl vector47
vector47:
  pushl $0
c0102c53:	6a 00                	push   $0x0
  pushl $47
c0102c55:	6a 2f                	push   $0x2f
  jmp __alltraps
c0102c57:	e9 d0 08 00 00       	jmp    c010352c <__alltraps>

c0102c5c <vector48>:
.globl vector48
vector48:
  pushl $0
c0102c5c:	6a 00                	push   $0x0
  pushl $48
c0102c5e:	6a 30                	push   $0x30
  jmp __alltraps
c0102c60:	e9 c7 08 00 00       	jmp    c010352c <__alltraps>

c0102c65 <vector49>:
.globl vector49
vector49:
  pushl $0
c0102c65:	6a 00                	push   $0x0
  pushl $49
c0102c67:	6a 31                	push   $0x31
  jmp __alltraps
c0102c69:	e9 be 08 00 00       	jmp    c010352c <__alltraps>

c0102c6e <vector50>:
.globl vector50
vector50:
  pushl $0
c0102c6e:	6a 00                	push   $0x0
  pushl $50
c0102c70:	6a 32                	push   $0x32
  jmp __alltraps
c0102c72:	e9 b5 08 00 00       	jmp    c010352c <__alltraps>

c0102c77 <vector51>:
.globl vector51
vector51:
  pushl $0
c0102c77:	6a 00                	push   $0x0
  pushl $51
c0102c79:	6a 33                	push   $0x33
  jmp __alltraps
c0102c7b:	e9 ac 08 00 00       	jmp    c010352c <__alltraps>

c0102c80 <vector52>:
.globl vector52
vector52:
  pushl $0
c0102c80:	6a 00                	push   $0x0
  pushl $52
c0102c82:	6a 34                	push   $0x34
  jmp __alltraps
c0102c84:	e9 a3 08 00 00       	jmp    c010352c <__alltraps>

c0102c89 <vector53>:
.globl vector53
vector53:
  pushl $0
c0102c89:	6a 00                	push   $0x0
  pushl $53
c0102c8b:	6a 35                	push   $0x35
  jmp __alltraps
c0102c8d:	e9 9a 08 00 00       	jmp    c010352c <__alltraps>

c0102c92 <vector54>:
.globl vector54
vector54:
  pushl $0
c0102c92:	6a 00                	push   $0x0
  pushl $54
c0102c94:	6a 36                	push   $0x36
  jmp __alltraps
c0102c96:	e9 91 08 00 00       	jmp    c010352c <__alltraps>

c0102c9b <vector55>:
.globl vector55
vector55:
  pushl $0
c0102c9b:	6a 00                	push   $0x0
  pushl $55
c0102c9d:	6a 37                	push   $0x37
  jmp __alltraps
c0102c9f:	e9 88 08 00 00       	jmp    c010352c <__alltraps>

c0102ca4 <vector56>:
.globl vector56
vector56:
  pushl $0
c0102ca4:	6a 00                	push   $0x0
  pushl $56
c0102ca6:	6a 38                	push   $0x38
  jmp __alltraps
c0102ca8:	e9 7f 08 00 00       	jmp    c010352c <__alltraps>

c0102cad <vector57>:
.globl vector57
vector57:
  pushl $0
c0102cad:	6a 00                	push   $0x0
  pushl $57
c0102caf:	6a 39                	push   $0x39
  jmp __alltraps
c0102cb1:	e9 76 08 00 00       	jmp    c010352c <__alltraps>

c0102cb6 <vector58>:
.globl vector58
vector58:
  pushl $0
c0102cb6:	6a 00                	push   $0x0
  pushl $58
c0102cb8:	6a 3a                	push   $0x3a
  jmp __alltraps
c0102cba:	e9 6d 08 00 00       	jmp    c010352c <__alltraps>

c0102cbf <vector59>:
.globl vector59
vector59:
  pushl $0
c0102cbf:	6a 00                	push   $0x0
  pushl $59
c0102cc1:	6a 3b                	push   $0x3b
  jmp __alltraps
c0102cc3:	e9 64 08 00 00       	jmp    c010352c <__alltraps>

c0102cc8 <vector60>:
.globl vector60
vector60:
  pushl $0
c0102cc8:	6a 00                	push   $0x0
  pushl $60
c0102cca:	6a 3c                	push   $0x3c
  jmp __alltraps
c0102ccc:	e9 5b 08 00 00       	jmp    c010352c <__alltraps>

c0102cd1 <vector61>:
.globl vector61
vector61:
  pushl $0
c0102cd1:	6a 00                	push   $0x0
  pushl $61
c0102cd3:	6a 3d                	push   $0x3d
  jmp __alltraps
c0102cd5:	e9 52 08 00 00       	jmp    c010352c <__alltraps>

c0102cda <vector62>:
.globl vector62
vector62:
  pushl $0
c0102cda:	6a 00                	push   $0x0
  pushl $62
c0102cdc:	6a 3e                	push   $0x3e
  jmp __alltraps
c0102cde:	e9 49 08 00 00       	jmp    c010352c <__alltraps>

c0102ce3 <vector63>:
.globl vector63
vector63:
  pushl $0
c0102ce3:	6a 00                	push   $0x0
  pushl $63
c0102ce5:	6a 3f                	push   $0x3f
  jmp __alltraps
c0102ce7:	e9 40 08 00 00       	jmp    c010352c <__alltraps>

c0102cec <vector64>:
.globl vector64
vector64:
  pushl $0
c0102cec:	6a 00                	push   $0x0
  pushl $64
c0102cee:	6a 40                	push   $0x40
  jmp __alltraps
c0102cf0:	e9 37 08 00 00       	jmp    c010352c <__alltraps>

c0102cf5 <vector65>:
.globl vector65
vector65:
  pushl $0
c0102cf5:	6a 00                	push   $0x0
  pushl $65
c0102cf7:	6a 41                	push   $0x41
  jmp __alltraps
c0102cf9:	e9 2e 08 00 00       	jmp    c010352c <__alltraps>

c0102cfe <vector66>:
.globl vector66
vector66:
  pushl $0
c0102cfe:	6a 00                	push   $0x0
  pushl $66
c0102d00:	6a 42                	push   $0x42
  jmp __alltraps
c0102d02:	e9 25 08 00 00       	jmp    c010352c <__alltraps>

c0102d07 <vector67>:
.globl vector67
vector67:
  pushl $0
c0102d07:	6a 00                	push   $0x0
  pushl $67
c0102d09:	6a 43                	push   $0x43
  jmp __alltraps
c0102d0b:	e9 1c 08 00 00       	jmp    c010352c <__alltraps>

c0102d10 <vector68>:
.globl vector68
vector68:
  pushl $0
c0102d10:	6a 00                	push   $0x0
  pushl $68
c0102d12:	6a 44                	push   $0x44
  jmp __alltraps
c0102d14:	e9 13 08 00 00       	jmp    c010352c <__alltraps>

c0102d19 <vector69>:
.globl vector69
vector69:
  pushl $0
c0102d19:	6a 00                	push   $0x0
  pushl $69
c0102d1b:	6a 45                	push   $0x45
  jmp __alltraps
c0102d1d:	e9 0a 08 00 00       	jmp    c010352c <__alltraps>

c0102d22 <vector70>:
.globl vector70
vector70:
  pushl $0
c0102d22:	6a 00                	push   $0x0
  pushl $70
c0102d24:	6a 46                	push   $0x46
  jmp __alltraps
c0102d26:	e9 01 08 00 00       	jmp    c010352c <__alltraps>

c0102d2b <vector71>:
.globl vector71
vector71:
  pushl $0
c0102d2b:	6a 00                	push   $0x0
  pushl $71
c0102d2d:	6a 47                	push   $0x47
  jmp __alltraps
c0102d2f:	e9 f8 07 00 00       	jmp    c010352c <__alltraps>

c0102d34 <vector72>:
.globl vector72
vector72:
  pushl $0
c0102d34:	6a 00                	push   $0x0
  pushl $72
c0102d36:	6a 48                	push   $0x48
  jmp __alltraps
c0102d38:	e9 ef 07 00 00       	jmp    c010352c <__alltraps>

c0102d3d <vector73>:
.globl vector73
vector73:
  pushl $0
c0102d3d:	6a 00                	push   $0x0
  pushl $73
c0102d3f:	6a 49                	push   $0x49
  jmp __alltraps
c0102d41:	e9 e6 07 00 00       	jmp    c010352c <__alltraps>

c0102d46 <vector74>:
.globl vector74
vector74:
  pushl $0
c0102d46:	6a 00                	push   $0x0
  pushl $74
c0102d48:	6a 4a                	push   $0x4a
  jmp __alltraps
c0102d4a:	e9 dd 07 00 00       	jmp    c010352c <__alltraps>

c0102d4f <vector75>:
.globl vector75
vector75:
  pushl $0
c0102d4f:	6a 00                	push   $0x0
  pushl $75
c0102d51:	6a 4b                	push   $0x4b
  jmp __alltraps
c0102d53:	e9 d4 07 00 00       	jmp    c010352c <__alltraps>

c0102d58 <vector76>:
.globl vector76
vector76:
  pushl $0
c0102d58:	6a 00                	push   $0x0
  pushl $76
c0102d5a:	6a 4c                	push   $0x4c
  jmp __alltraps
c0102d5c:	e9 cb 07 00 00       	jmp    c010352c <__alltraps>

c0102d61 <vector77>:
.globl vector77
vector77:
  pushl $0
c0102d61:	6a 00                	push   $0x0
  pushl $77
c0102d63:	6a 4d                	push   $0x4d
  jmp __alltraps
c0102d65:	e9 c2 07 00 00       	jmp    c010352c <__alltraps>

c0102d6a <vector78>:
.globl vector78
vector78:
  pushl $0
c0102d6a:	6a 00                	push   $0x0
  pushl $78
c0102d6c:	6a 4e                	push   $0x4e
  jmp __alltraps
c0102d6e:	e9 b9 07 00 00       	jmp    c010352c <__alltraps>

c0102d73 <vector79>:
.globl vector79
vector79:
  pushl $0
c0102d73:	6a 00                	push   $0x0
  pushl $79
c0102d75:	6a 4f                	push   $0x4f
  jmp __alltraps
c0102d77:	e9 b0 07 00 00       	jmp    c010352c <__alltraps>

c0102d7c <vector80>:
.globl vector80
vector80:
  pushl $0
c0102d7c:	6a 00                	push   $0x0
  pushl $80
c0102d7e:	6a 50                	push   $0x50
  jmp __alltraps
c0102d80:	e9 a7 07 00 00       	jmp    c010352c <__alltraps>

c0102d85 <vector81>:
.globl vector81
vector81:
  pushl $0
c0102d85:	6a 00                	push   $0x0
  pushl $81
c0102d87:	6a 51                	push   $0x51
  jmp __alltraps
c0102d89:	e9 9e 07 00 00       	jmp    c010352c <__alltraps>

c0102d8e <vector82>:
.globl vector82
vector82:
  pushl $0
c0102d8e:	6a 00                	push   $0x0
  pushl $82
c0102d90:	6a 52                	push   $0x52
  jmp __alltraps
c0102d92:	e9 95 07 00 00       	jmp    c010352c <__alltraps>

c0102d97 <vector83>:
.globl vector83
vector83:
  pushl $0
c0102d97:	6a 00                	push   $0x0
  pushl $83
c0102d99:	6a 53                	push   $0x53
  jmp __alltraps
c0102d9b:	e9 8c 07 00 00       	jmp    c010352c <__alltraps>

c0102da0 <vector84>:
.globl vector84
vector84:
  pushl $0
c0102da0:	6a 00                	push   $0x0
  pushl $84
c0102da2:	6a 54                	push   $0x54
  jmp __alltraps
c0102da4:	e9 83 07 00 00       	jmp    c010352c <__alltraps>

c0102da9 <vector85>:
.globl vector85
vector85:
  pushl $0
c0102da9:	6a 00                	push   $0x0
  pushl $85
c0102dab:	6a 55                	push   $0x55
  jmp __alltraps
c0102dad:	e9 7a 07 00 00       	jmp    c010352c <__alltraps>

c0102db2 <vector86>:
.globl vector86
vector86:
  pushl $0
c0102db2:	6a 00                	push   $0x0
  pushl $86
c0102db4:	6a 56                	push   $0x56
  jmp __alltraps
c0102db6:	e9 71 07 00 00       	jmp    c010352c <__alltraps>

c0102dbb <vector87>:
.globl vector87
vector87:
  pushl $0
c0102dbb:	6a 00                	push   $0x0
  pushl $87
c0102dbd:	6a 57                	push   $0x57
  jmp __alltraps
c0102dbf:	e9 68 07 00 00       	jmp    c010352c <__alltraps>

c0102dc4 <vector88>:
.globl vector88
vector88:
  pushl $0
c0102dc4:	6a 00                	push   $0x0
  pushl $88
c0102dc6:	6a 58                	push   $0x58
  jmp __alltraps
c0102dc8:	e9 5f 07 00 00       	jmp    c010352c <__alltraps>

c0102dcd <vector89>:
.globl vector89
vector89:
  pushl $0
c0102dcd:	6a 00                	push   $0x0
  pushl $89
c0102dcf:	6a 59                	push   $0x59
  jmp __alltraps
c0102dd1:	e9 56 07 00 00       	jmp    c010352c <__alltraps>

c0102dd6 <vector90>:
.globl vector90
vector90:
  pushl $0
c0102dd6:	6a 00                	push   $0x0
  pushl $90
c0102dd8:	6a 5a                	push   $0x5a
  jmp __alltraps
c0102dda:	e9 4d 07 00 00       	jmp    c010352c <__alltraps>

c0102ddf <vector91>:
.globl vector91
vector91:
  pushl $0
c0102ddf:	6a 00                	push   $0x0
  pushl $91
c0102de1:	6a 5b                	push   $0x5b
  jmp __alltraps
c0102de3:	e9 44 07 00 00       	jmp    c010352c <__alltraps>

c0102de8 <vector92>:
.globl vector92
vector92:
  pushl $0
c0102de8:	6a 00                	push   $0x0
  pushl $92
c0102dea:	6a 5c                	push   $0x5c
  jmp __alltraps
c0102dec:	e9 3b 07 00 00       	jmp    c010352c <__alltraps>

c0102df1 <vector93>:
.globl vector93
vector93:
  pushl $0
c0102df1:	6a 00                	push   $0x0
  pushl $93
c0102df3:	6a 5d                	push   $0x5d
  jmp __alltraps
c0102df5:	e9 32 07 00 00       	jmp    c010352c <__alltraps>

c0102dfa <vector94>:
.globl vector94
vector94:
  pushl $0
c0102dfa:	6a 00                	push   $0x0
  pushl $94
c0102dfc:	6a 5e                	push   $0x5e
  jmp __alltraps
c0102dfe:	e9 29 07 00 00       	jmp    c010352c <__alltraps>

c0102e03 <vector95>:
.globl vector95
vector95:
  pushl $0
c0102e03:	6a 00                	push   $0x0
  pushl $95
c0102e05:	6a 5f                	push   $0x5f
  jmp __alltraps
c0102e07:	e9 20 07 00 00       	jmp    c010352c <__alltraps>

c0102e0c <vector96>:
.globl vector96
vector96:
  pushl $0
c0102e0c:	6a 00                	push   $0x0
  pushl $96
c0102e0e:	6a 60                	push   $0x60
  jmp __alltraps
c0102e10:	e9 17 07 00 00       	jmp    c010352c <__alltraps>

c0102e15 <vector97>:
.globl vector97
vector97:
  pushl $0
c0102e15:	6a 00                	push   $0x0
  pushl $97
c0102e17:	6a 61                	push   $0x61
  jmp __alltraps
c0102e19:	e9 0e 07 00 00       	jmp    c010352c <__alltraps>

c0102e1e <vector98>:
.globl vector98
vector98:
  pushl $0
c0102e1e:	6a 00                	push   $0x0
  pushl $98
c0102e20:	6a 62                	push   $0x62
  jmp __alltraps
c0102e22:	e9 05 07 00 00       	jmp    c010352c <__alltraps>

c0102e27 <vector99>:
.globl vector99
vector99:
  pushl $0
c0102e27:	6a 00                	push   $0x0
  pushl $99
c0102e29:	6a 63                	push   $0x63
  jmp __alltraps
c0102e2b:	e9 fc 06 00 00       	jmp    c010352c <__alltraps>

c0102e30 <vector100>:
.globl vector100
vector100:
  pushl $0
c0102e30:	6a 00                	push   $0x0
  pushl $100
c0102e32:	6a 64                	push   $0x64
  jmp __alltraps
c0102e34:	e9 f3 06 00 00       	jmp    c010352c <__alltraps>

c0102e39 <vector101>:
.globl vector101
vector101:
  pushl $0
c0102e39:	6a 00                	push   $0x0
  pushl $101
c0102e3b:	6a 65                	push   $0x65
  jmp __alltraps
c0102e3d:	e9 ea 06 00 00       	jmp    c010352c <__alltraps>

c0102e42 <vector102>:
.globl vector102
vector102:
  pushl $0
c0102e42:	6a 00                	push   $0x0
  pushl $102
c0102e44:	6a 66                	push   $0x66
  jmp __alltraps
c0102e46:	e9 e1 06 00 00       	jmp    c010352c <__alltraps>

c0102e4b <vector103>:
.globl vector103
vector103:
  pushl $0
c0102e4b:	6a 00                	push   $0x0
  pushl $103
c0102e4d:	6a 67                	push   $0x67
  jmp __alltraps
c0102e4f:	e9 d8 06 00 00       	jmp    c010352c <__alltraps>

c0102e54 <vector104>:
.globl vector104
vector104:
  pushl $0
c0102e54:	6a 00                	push   $0x0
  pushl $104
c0102e56:	6a 68                	push   $0x68
  jmp __alltraps
c0102e58:	e9 cf 06 00 00       	jmp    c010352c <__alltraps>

c0102e5d <vector105>:
.globl vector105
vector105:
  pushl $0
c0102e5d:	6a 00                	push   $0x0
  pushl $105
c0102e5f:	6a 69                	push   $0x69
  jmp __alltraps
c0102e61:	e9 c6 06 00 00       	jmp    c010352c <__alltraps>

c0102e66 <vector106>:
.globl vector106
vector106:
  pushl $0
c0102e66:	6a 00                	push   $0x0
  pushl $106
c0102e68:	6a 6a                	push   $0x6a
  jmp __alltraps
c0102e6a:	e9 bd 06 00 00       	jmp    c010352c <__alltraps>

c0102e6f <vector107>:
.globl vector107
vector107:
  pushl $0
c0102e6f:	6a 00                	push   $0x0
  pushl $107
c0102e71:	6a 6b                	push   $0x6b
  jmp __alltraps
c0102e73:	e9 b4 06 00 00       	jmp    c010352c <__alltraps>

c0102e78 <vector108>:
.globl vector108
vector108:
  pushl $0
c0102e78:	6a 00                	push   $0x0
  pushl $108
c0102e7a:	6a 6c                	push   $0x6c
  jmp __alltraps
c0102e7c:	e9 ab 06 00 00       	jmp    c010352c <__alltraps>

c0102e81 <vector109>:
.globl vector109
vector109:
  pushl $0
c0102e81:	6a 00                	push   $0x0
  pushl $109
c0102e83:	6a 6d                	push   $0x6d
  jmp __alltraps
c0102e85:	e9 a2 06 00 00       	jmp    c010352c <__alltraps>

c0102e8a <vector110>:
.globl vector110
vector110:
  pushl $0
c0102e8a:	6a 00                	push   $0x0
  pushl $110
c0102e8c:	6a 6e                	push   $0x6e
  jmp __alltraps
c0102e8e:	e9 99 06 00 00       	jmp    c010352c <__alltraps>

c0102e93 <vector111>:
.globl vector111
vector111:
  pushl $0
c0102e93:	6a 00                	push   $0x0
  pushl $111
c0102e95:	6a 6f                	push   $0x6f
  jmp __alltraps
c0102e97:	e9 90 06 00 00       	jmp    c010352c <__alltraps>

c0102e9c <vector112>:
.globl vector112
vector112:
  pushl $0
c0102e9c:	6a 00                	push   $0x0
  pushl $112
c0102e9e:	6a 70                	push   $0x70
  jmp __alltraps
c0102ea0:	e9 87 06 00 00       	jmp    c010352c <__alltraps>

c0102ea5 <vector113>:
.globl vector113
vector113:
  pushl $0
c0102ea5:	6a 00                	push   $0x0
  pushl $113
c0102ea7:	6a 71                	push   $0x71
  jmp __alltraps
c0102ea9:	e9 7e 06 00 00       	jmp    c010352c <__alltraps>

c0102eae <vector114>:
.globl vector114
vector114:
  pushl $0
c0102eae:	6a 00                	push   $0x0
  pushl $114
c0102eb0:	6a 72                	push   $0x72
  jmp __alltraps
c0102eb2:	e9 75 06 00 00       	jmp    c010352c <__alltraps>

c0102eb7 <vector115>:
.globl vector115
vector115:
  pushl $0
c0102eb7:	6a 00                	push   $0x0
  pushl $115
c0102eb9:	6a 73                	push   $0x73
  jmp __alltraps
c0102ebb:	e9 6c 06 00 00       	jmp    c010352c <__alltraps>

c0102ec0 <vector116>:
.globl vector116
vector116:
  pushl $0
c0102ec0:	6a 00                	push   $0x0
  pushl $116
c0102ec2:	6a 74                	push   $0x74
  jmp __alltraps
c0102ec4:	e9 63 06 00 00       	jmp    c010352c <__alltraps>

c0102ec9 <vector117>:
.globl vector117
vector117:
  pushl $0
c0102ec9:	6a 00                	push   $0x0
  pushl $117
c0102ecb:	6a 75                	push   $0x75
  jmp __alltraps
c0102ecd:	e9 5a 06 00 00       	jmp    c010352c <__alltraps>

c0102ed2 <vector118>:
.globl vector118
vector118:
  pushl $0
c0102ed2:	6a 00                	push   $0x0
  pushl $118
c0102ed4:	6a 76                	push   $0x76
  jmp __alltraps
c0102ed6:	e9 51 06 00 00       	jmp    c010352c <__alltraps>

c0102edb <vector119>:
.globl vector119
vector119:
  pushl $0
c0102edb:	6a 00                	push   $0x0
  pushl $119
c0102edd:	6a 77                	push   $0x77
  jmp __alltraps
c0102edf:	e9 48 06 00 00       	jmp    c010352c <__alltraps>

c0102ee4 <vector120>:
.globl vector120
vector120:
  pushl $0
c0102ee4:	6a 00                	push   $0x0
  pushl $120
c0102ee6:	6a 78                	push   $0x78
  jmp __alltraps
c0102ee8:	e9 3f 06 00 00       	jmp    c010352c <__alltraps>

c0102eed <vector121>:
.globl vector121
vector121:
  pushl $0
c0102eed:	6a 00                	push   $0x0
  pushl $121
c0102eef:	6a 79                	push   $0x79
  jmp __alltraps
c0102ef1:	e9 36 06 00 00       	jmp    c010352c <__alltraps>

c0102ef6 <vector122>:
.globl vector122
vector122:
  pushl $0
c0102ef6:	6a 00                	push   $0x0
  pushl $122
c0102ef8:	6a 7a                	push   $0x7a
  jmp __alltraps
c0102efa:	e9 2d 06 00 00       	jmp    c010352c <__alltraps>

c0102eff <vector123>:
.globl vector123
vector123:
  pushl $0
c0102eff:	6a 00                	push   $0x0
  pushl $123
c0102f01:	6a 7b                	push   $0x7b
  jmp __alltraps
c0102f03:	e9 24 06 00 00       	jmp    c010352c <__alltraps>

c0102f08 <vector124>:
.globl vector124
vector124:
  pushl $0
c0102f08:	6a 00                	push   $0x0
  pushl $124
c0102f0a:	6a 7c                	push   $0x7c
  jmp __alltraps
c0102f0c:	e9 1b 06 00 00       	jmp    c010352c <__alltraps>

c0102f11 <vector125>:
.globl vector125
vector125:
  pushl $0
c0102f11:	6a 00                	push   $0x0
  pushl $125
c0102f13:	6a 7d                	push   $0x7d
  jmp __alltraps
c0102f15:	e9 12 06 00 00       	jmp    c010352c <__alltraps>

c0102f1a <vector126>:
.globl vector126
vector126:
  pushl $0
c0102f1a:	6a 00                	push   $0x0
  pushl $126
c0102f1c:	6a 7e                	push   $0x7e
  jmp __alltraps
c0102f1e:	e9 09 06 00 00       	jmp    c010352c <__alltraps>

c0102f23 <vector127>:
.globl vector127
vector127:
  pushl $0
c0102f23:	6a 00                	push   $0x0
  pushl $127
c0102f25:	6a 7f                	push   $0x7f
  jmp __alltraps
c0102f27:	e9 00 06 00 00       	jmp    c010352c <__alltraps>

c0102f2c <vector128>:
.globl vector128
vector128:
  pushl $0
c0102f2c:	6a 00                	push   $0x0
  pushl $128
c0102f2e:	68 80 00 00 00       	push   $0x80
  jmp __alltraps
c0102f33:	e9 f4 05 00 00       	jmp    c010352c <__alltraps>

c0102f38 <vector129>:
.globl vector129
vector129:
  pushl $0
c0102f38:	6a 00                	push   $0x0
  pushl $129
c0102f3a:	68 81 00 00 00       	push   $0x81
  jmp __alltraps
c0102f3f:	e9 e8 05 00 00       	jmp    c010352c <__alltraps>

c0102f44 <vector130>:
.globl vector130
vector130:
  pushl $0
c0102f44:	6a 00                	push   $0x0
  pushl $130
c0102f46:	68 82 00 00 00       	push   $0x82
  jmp __alltraps
c0102f4b:	e9 dc 05 00 00       	jmp    c010352c <__alltraps>

c0102f50 <vector131>:
.globl vector131
vector131:
  pushl $0
c0102f50:	6a 00                	push   $0x0
  pushl $131
c0102f52:	68 83 00 00 00       	push   $0x83
  jmp __alltraps
c0102f57:	e9 d0 05 00 00       	jmp    c010352c <__alltraps>

c0102f5c <vector132>:
.globl vector132
vector132:
  pushl $0
c0102f5c:	6a 00                	push   $0x0
  pushl $132
c0102f5e:	68 84 00 00 00       	push   $0x84
  jmp __alltraps
c0102f63:	e9 c4 05 00 00       	jmp    c010352c <__alltraps>

c0102f68 <vector133>:
.globl vector133
vector133:
  pushl $0
c0102f68:	6a 00                	push   $0x0
  pushl $133
c0102f6a:	68 85 00 00 00       	push   $0x85
  jmp __alltraps
c0102f6f:	e9 b8 05 00 00       	jmp    c010352c <__alltraps>

c0102f74 <vector134>:
.globl vector134
vector134:
  pushl $0
c0102f74:	6a 00                	push   $0x0
  pushl $134
c0102f76:	68 86 00 00 00       	push   $0x86
  jmp __alltraps
c0102f7b:	e9 ac 05 00 00       	jmp    c010352c <__alltraps>

c0102f80 <vector135>:
.globl vector135
vector135:
  pushl $0
c0102f80:	6a 00                	push   $0x0
  pushl $135
c0102f82:	68 87 00 00 00       	push   $0x87
  jmp __alltraps
c0102f87:	e9 a0 05 00 00       	jmp    c010352c <__alltraps>

c0102f8c <vector136>:
.globl vector136
vector136:
  pushl $0
c0102f8c:	6a 00                	push   $0x0
  pushl $136
c0102f8e:	68 88 00 00 00       	push   $0x88
  jmp __alltraps
c0102f93:	e9 94 05 00 00       	jmp    c010352c <__alltraps>

c0102f98 <vector137>:
.globl vector137
vector137:
  pushl $0
c0102f98:	6a 00                	push   $0x0
  pushl $137
c0102f9a:	68 89 00 00 00       	push   $0x89
  jmp __alltraps
c0102f9f:	e9 88 05 00 00       	jmp    c010352c <__alltraps>

c0102fa4 <vector138>:
.globl vector138
vector138:
  pushl $0
c0102fa4:	6a 00                	push   $0x0
  pushl $138
c0102fa6:	68 8a 00 00 00       	push   $0x8a
  jmp __alltraps
c0102fab:	e9 7c 05 00 00       	jmp    c010352c <__alltraps>

c0102fb0 <vector139>:
.globl vector139
vector139:
  pushl $0
c0102fb0:	6a 00                	push   $0x0
  pushl $139
c0102fb2:	68 8b 00 00 00       	push   $0x8b
  jmp __alltraps
c0102fb7:	e9 70 05 00 00       	jmp    c010352c <__alltraps>

c0102fbc <vector140>:
.globl vector140
vector140:
  pushl $0
c0102fbc:	6a 00                	push   $0x0
  pushl $140
c0102fbe:	68 8c 00 00 00       	push   $0x8c
  jmp __alltraps
c0102fc3:	e9 64 05 00 00       	jmp    c010352c <__alltraps>

c0102fc8 <vector141>:
.globl vector141
vector141:
  pushl $0
c0102fc8:	6a 00                	push   $0x0
  pushl $141
c0102fca:	68 8d 00 00 00       	push   $0x8d
  jmp __alltraps
c0102fcf:	e9 58 05 00 00       	jmp    c010352c <__alltraps>

c0102fd4 <vector142>:
.globl vector142
vector142:
  pushl $0
c0102fd4:	6a 00                	push   $0x0
  pushl $142
c0102fd6:	68 8e 00 00 00       	push   $0x8e
  jmp __alltraps
c0102fdb:	e9 4c 05 00 00       	jmp    c010352c <__alltraps>

c0102fe0 <vector143>:
.globl vector143
vector143:
  pushl $0
c0102fe0:	6a 00                	push   $0x0
  pushl $143
c0102fe2:	68 8f 00 00 00       	push   $0x8f
  jmp __alltraps
c0102fe7:	e9 40 05 00 00       	jmp    c010352c <__alltraps>

c0102fec <vector144>:
.globl vector144
vector144:
  pushl $0
c0102fec:	6a 00                	push   $0x0
  pushl $144
c0102fee:	68 90 00 00 00       	push   $0x90
  jmp __alltraps
c0102ff3:	e9 34 05 00 00       	jmp    c010352c <__alltraps>

c0102ff8 <vector145>:
.globl vector145
vector145:
  pushl $0
c0102ff8:	6a 00                	push   $0x0
  pushl $145
c0102ffa:	68 91 00 00 00       	push   $0x91
  jmp __alltraps
c0102fff:	e9 28 05 00 00       	jmp    c010352c <__alltraps>

c0103004 <vector146>:
.globl vector146
vector146:
  pushl $0
c0103004:	6a 00                	push   $0x0
  pushl $146
c0103006:	68 92 00 00 00       	push   $0x92
  jmp __alltraps
c010300b:	e9 1c 05 00 00       	jmp    c010352c <__alltraps>

c0103010 <vector147>:
.globl vector147
vector147:
  pushl $0
c0103010:	6a 00                	push   $0x0
  pushl $147
c0103012:	68 93 00 00 00       	push   $0x93
  jmp __alltraps
c0103017:	e9 10 05 00 00       	jmp    c010352c <__alltraps>

c010301c <vector148>:
.globl vector148
vector148:
  pushl $0
c010301c:	6a 00                	push   $0x0
  pushl $148
c010301e:	68 94 00 00 00       	push   $0x94
  jmp __alltraps
c0103023:	e9 04 05 00 00       	jmp    c010352c <__alltraps>

c0103028 <vector149>:
.globl vector149
vector149:
  pushl $0
c0103028:	6a 00                	push   $0x0
  pushl $149
c010302a:	68 95 00 00 00       	push   $0x95
  jmp __alltraps
c010302f:	e9 f8 04 00 00       	jmp    c010352c <__alltraps>

c0103034 <vector150>:
.globl vector150
vector150:
  pushl $0
c0103034:	6a 00                	push   $0x0
  pushl $150
c0103036:	68 96 00 00 00       	push   $0x96
  jmp __alltraps
c010303b:	e9 ec 04 00 00       	jmp    c010352c <__alltraps>

c0103040 <vector151>:
.globl vector151
vector151:
  pushl $0
c0103040:	6a 00                	push   $0x0
  pushl $151
c0103042:	68 97 00 00 00       	push   $0x97
  jmp __alltraps
c0103047:	e9 e0 04 00 00       	jmp    c010352c <__alltraps>

c010304c <vector152>:
.globl vector152
vector152:
  pushl $0
c010304c:	6a 00                	push   $0x0
  pushl $152
c010304e:	68 98 00 00 00       	push   $0x98
  jmp __alltraps
c0103053:	e9 d4 04 00 00       	jmp    c010352c <__alltraps>

c0103058 <vector153>:
.globl vector153
vector153:
  pushl $0
c0103058:	6a 00                	push   $0x0
  pushl $153
c010305a:	68 99 00 00 00       	push   $0x99
  jmp __alltraps
c010305f:	e9 c8 04 00 00       	jmp    c010352c <__alltraps>

c0103064 <vector154>:
.globl vector154
vector154:
  pushl $0
c0103064:	6a 00                	push   $0x0
  pushl $154
c0103066:	68 9a 00 00 00       	push   $0x9a
  jmp __alltraps
c010306b:	e9 bc 04 00 00       	jmp    c010352c <__alltraps>

c0103070 <vector155>:
.globl vector155
vector155:
  pushl $0
c0103070:	6a 00                	push   $0x0
  pushl $155
c0103072:	68 9b 00 00 00       	push   $0x9b
  jmp __alltraps
c0103077:	e9 b0 04 00 00       	jmp    c010352c <__alltraps>

c010307c <vector156>:
.globl vector156
vector156:
  pushl $0
c010307c:	6a 00                	push   $0x0
  pushl $156
c010307e:	68 9c 00 00 00       	push   $0x9c
  jmp __alltraps
c0103083:	e9 a4 04 00 00       	jmp    c010352c <__alltraps>

c0103088 <vector157>:
.globl vector157
vector157:
  pushl $0
c0103088:	6a 00                	push   $0x0
  pushl $157
c010308a:	68 9d 00 00 00       	push   $0x9d
  jmp __alltraps
c010308f:	e9 98 04 00 00       	jmp    c010352c <__alltraps>

c0103094 <vector158>:
.globl vector158
vector158:
  pushl $0
c0103094:	6a 00                	push   $0x0
  pushl $158
c0103096:	68 9e 00 00 00       	push   $0x9e
  jmp __alltraps
c010309b:	e9 8c 04 00 00       	jmp    c010352c <__alltraps>

c01030a0 <vector159>:
.globl vector159
vector159:
  pushl $0
c01030a0:	6a 00                	push   $0x0
  pushl $159
c01030a2:	68 9f 00 00 00       	push   $0x9f
  jmp __alltraps
c01030a7:	e9 80 04 00 00       	jmp    c010352c <__alltraps>

c01030ac <vector160>:
.globl vector160
vector160:
  pushl $0
c01030ac:	6a 00                	push   $0x0
  pushl $160
c01030ae:	68 a0 00 00 00       	push   $0xa0
  jmp __alltraps
c01030b3:	e9 74 04 00 00       	jmp    c010352c <__alltraps>

c01030b8 <vector161>:
.globl vector161
vector161:
  pushl $0
c01030b8:	6a 00                	push   $0x0
  pushl $161
c01030ba:	68 a1 00 00 00       	push   $0xa1
  jmp __alltraps
c01030bf:	e9 68 04 00 00       	jmp    c010352c <__alltraps>

c01030c4 <vector162>:
.globl vector162
vector162:
  pushl $0
c01030c4:	6a 00                	push   $0x0
  pushl $162
c01030c6:	68 a2 00 00 00       	push   $0xa2
  jmp __alltraps
c01030cb:	e9 5c 04 00 00       	jmp    c010352c <__alltraps>

c01030d0 <vector163>:
.globl vector163
vector163:
  pushl $0
c01030d0:	6a 00                	push   $0x0
  pushl $163
c01030d2:	68 a3 00 00 00       	push   $0xa3
  jmp __alltraps
c01030d7:	e9 50 04 00 00       	jmp    c010352c <__alltraps>

c01030dc <vector164>:
.globl vector164
vector164:
  pushl $0
c01030dc:	6a 00                	push   $0x0
  pushl $164
c01030de:	68 a4 00 00 00       	push   $0xa4
  jmp __alltraps
c01030e3:	e9 44 04 00 00       	jmp    c010352c <__alltraps>

c01030e8 <vector165>:
.globl vector165
vector165:
  pushl $0
c01030e8:	6a 00                	push   $0x0
  pushl $165
c01030ea:	68 a5 00 00 00       	push   $0xa5
  jmp __alltraps
c01030ef:	e9 38 04 00 00       	jmp    c010352c <__alltraps>

c01030f4 <vector166>:
.globl vector166
vector166:
  pushl $0
c01030f4:	6a 00                	push   $0x0
  pushl $166
c01030f6:	68 a6 00 00 00       	push   $0xa6
  jmp __alltraps
c01030fb:	e9 2c 04 00 00       	jmp    c010352c <__alltraps>

c0103100 <vector167>:
.globl vector167
vector167:
  pushl $0
c0103100:	6a 00                	push   $0x0
  pushl $167
c0103102:	68 a7 00 00 00       	push   $0xa7
  jmp __alltraps
c0103107:	e9 20 04 00 00       	jmp    c010352c <__alltraps>

c010310c <vector168>:
.globl vector168
vector168:
  pushl $0
c010310c:	6a 00                	push   $0x0
  pushl $168
c010310e:	68 a8 00 00 00       	push   $0xa8
  jmp __alltraps
c0103113:	e9 14 04 00 00       	jmp    c010352c <__alltraps>

c0103118 <vector169>:
.globl vector169
vector169:
  pushl $0
c0103118:	6a 00                	push   $0x0
  pushl $169
c010311a:	68 a9 00 00 00       	push   $0xa9
  jmp __alltraps
c010311f:	e9 08 04 00 00       	jmp    c010352c <__alltraps>

c0103124 <vector170>:
.globl vector170
vector170:
  pushl $0
c0103124:	6a 00                	push   $0x0
  pushl $170
c0103126:	68 aa 00 00 00       	push   $0xaa
  jmp __alltraps
c010312b:	e9 fc 03 00 00       	jmp    c010352c <__alltraps>

c0103130 <vector171>:
.globl vector171
vector171:
  pushl $0
c0103130:	6a 00                	push   $0x0
  pushl $171
c0103132:	68 ab 00 00 00       	push   $0xab
  jmp __alltraps
c0103137:	e9 f0 03 00 00       	jmp    c010352c <__alltraps>

c010313c <vector172>:
.globl vector172
vector172:
  pushl $0
c010313c:	6a 00                	push   $0x0
  pushl $172
c010313e:	68 ac 00 00 00       	push   $0xac
  jmp __alltraps
c0103143:	e9 e4 03 00 00       	jmp    c010352c <__alltraps>

c0103148 <vector173>:
.globl vector173
vector173:
  pushl $0
c0103148:	6a 00                	push   $0x0
  pushl $173
c010314a:	68 ad 00 00 00       	push   $0xad
  jmp __alltraps
c010314f:	e9 d8 03 00 00       	jmp    c010352c <__alltraps>

c0103154 <vector174>:
.globl vector174
vector174:
  pushl $0
c0103154:	6a 00                	push   $0x0
  pushl $174
c0103156:	68 ae 00 00 00       	push   $0xae
  jmp __alltraps
c010315b:	e9 cc 03 00 00       	jmp    c010352c <__alltraps>

c0103160 <vector175>:
.globl vector175
vector175:
  pushl $0
c0103160:	6a 00                	push   $0x0
  pushl $175
c0103162:	68 af 00 00 00       	push   $0xaf
  jmp __alltraps
c0103167:	e9 c0 03 00 00       	jmp    c010352c <__alltraps>

c010316c <vector176>:
.globl vector176
vector176:
  pushl $0
c010316c:	6a 00                	push   $0x0
  pushl $176
c010316e:	68 b0 00 00 00       	push   $0xb0
  jmp __alltraps
c0103173:	e9 b4 03 00 00       	jmp    c010352c <__alltraps>

c0103178 <vector177>:
.globl vector177
vector177:
  pushl $0
c0103178:	6a 00                	push   $0x0
  pushl $177
c010317a:	68 b1 00 00 00       	push   $0xb1
  jmp __alltraps
c010317f:	e9 a8 03 00 00       	jmp    c010352c <__alltraps>

c0103184 <vector178>:
.globl vector178
vector178:
  pushl $0
c0103184:	6a 00                	push   $0x0
  pushl $178
c0103186:	68 b2 00 00 00       	push   $0xb2
  jmp __alltraps
c010318b:	e9 9c 03 00 00       	jmp    c010352c <__alltraps>

c0103190 <vector179>:
.globl vector179
vector179:
  pushl $0
c0103190:	6a 00                	push   $0x0
  pushl $179
c0103192:	68 b3 00 00 00       	push   $0xb3
  jmp __alltraps
c0103197:	e9 90 03 00 00       	jmp    c010352c <__alltraps>

c010319c <vector180>:
.globl vector180
vector180:
  pushl $0
c010319c:	6a 00                	push   $0x0
  pushl $180
c010319e:	68 b4 00 00 00       	push   $0xb4
  jmp __alltraps
c01031a3:	e9 84 03 00 00       	jmp    c010352c <__alltraps>

c01031a8 <vector181>:
.globl vector181
vector181:
  pushl $0
c01031a8:	6a 00                	push   $0x0
  pushl $181
c01031aa:	68 b5 00 00 00       	push   $0xb5
  jmp __alltraps
c01031af:	e9 78 03 00 00       	jmp    c010352c <__alltraps>

c01031b4 <vector182>:
.globl vector182
vector182:
  pushl $0
c01031b4:	6a 00                	push   $0x0
  pushl $182
c01031b6:	68 b6 00 00 00       	push   $0xb6
  jmp __alltraps
c01031bb:	e9 6c 03 00 00       	jmp    c010352c <__alltraps>

c01031c0 <vector183>:
.globl vector183
vector183:
  pushl $0
c01031c0:	6a 00                	push   $0x0
  pushl $183
c01031c2:	68 b7 00 00 00       	push   $0xb7
  jmp __alltraps
c01031c7:	e9 60 03 00 00       	jmp    c010352c <__alltraps>

c01031cc <vector184>:
.globl vector184
vector184:
  pushl $0
c01031cc:	6a 00                	push   $0x0
  pushl $184
c01031ce:	68 b8 00 00 00       	push   $0xb8
  jmp __alltraps
c01031d3:	e9 54 03 00 00       	jmp    c010352c <__alltraps>

c01031d8 <vector185>:
.globl vector185
vector185:
  pushl $0
c01031d8:	6a 00                	push   $0x0
  pushl $185
c01031da:	68 b9 00 00 00       	push   $0xb9
  jmp __alltraps
c01031df:	e9 48 03 00 00       	jmp    c010352c <__alltraps>

c01031e4 <vector186>:
.globl vector186
vector186:
  pushl $0
c01031e4:	6a 00                	push   $0x0
  pushl $186
c01031e6:	68 ba 00 00 00       	push   $0xba
  jmp __alltraps
c01031eb:	e9 3c 03 00 00       	jmp    c010352c <__alltraps>

c01031f0 <vector187>:
.globl vector187
vector187:
  pushl $0
c01031f0:	6a 00                	push   $0x0
  pushl $187
c01031f2:	68 bb 00 00 00       	push   $0xbb
  jmp __alltraps
c01031f7:	e9 30 03 00 00       	jmp    c010352c <__alltraps>

c01031fc <vector188>:
.globl vector188
vector188:
  pushl $0
c01031fc:	6a 00                	push   $0x0
  pushl $188
c01031fe:	68 bc 00 00 00       	push   $0xbc
  jmp __alltraps
c0103203:	e9 24 03 00 00       	jmp    c010352c <__alltraps>

c0103208 <vector189>:
.globl vector189
vector189:
  pushl $0
c0103208:	6a 00                	push   $0x0
  pushl $189
c010320a:	68 bd 00 00 00       	push   $0xbd
  jmp __alltraps
c010320f:	e9 18 03 00 00       	jmp    c010352c <__alltraps>

c0103214 <vector190>:
.globl vector190
vector190:
  pushl $0
c0103214:	6a 00                	push   $0x0
  pushl $190
c0103216:	68 be 00 00 00       	push   $0xbe
  jmp __alltraps
c010321b:	e9 0c 03 00 00       	jmp    c010352c <__alltraps>

c0103220 <vector191>:
.globl vector191
vector191:
  pushl $0
c0103220:	6a 00                	push   $0x0
  pushl $191
c0103222:	68 bf 00 00 00       	push   $0xbf
  jmp __alltraps
c0103227:	e9 00 03 00 00       	jmp    c010352c <__alltraps>

c010322c <vector192>:
.globl vector192
vector192:
  pushl $0
c010322c:	6a 00                	push   $0x0
  pushl $192
c010322e:	68 c0 00 00 00       	push   $0xc0
  jmp __alltraps
c0103233:	e9 f4 02 00 00       	jmp    c010352c <__alltraps>

c0103238 <vector193>:
.globl vector193
vector193:
  pushl $0
c0103238:	6a 00                	push   $0x0
  pushl $193
c010323a:	68 c1 00 00 00       	push   $0xc1
  jmp __alltraps
c010323f:	e9 e8 02 00 00       	jmp    c010352c <__alltraps>

c0103244 <vector194>:
.globl vector194
vector194:
  pushl $0
c0103244:	6a 00                	push   $0x0
  pushl $194
c0103246:	68 c2 00 00 00       	push   $0xc2
  jmp __alltraps
c010324b:	e9 dc 02 00 00       	jmp    c010352c <__alltraps>

c0103250 <vector195>:
.globl vector195
vector195:
  pushl $0
c0103250:	6a 00                	push   $0x0
  pushl $195
c0103252:	68 c3 00 00 00       	push   $0xc3
  jmp __alltraps
c0103257:	e9 d0 02 00 00       	jmp    c010352c <__alltraps>

c010325c <vector196>:
.globl vector196
vector196:
  pushl $0
c010325c:	6a 00                	push   $0x0
  pushl $196
c010325e:	68 c4 00 00 00       	push   $0xc4
  jmp __alltraps
c0103263:	e9 c4 02 00 00       	jmp    c010352c <__alltraps>

c0103268 <vector197>:
.globl vector197
vector197:
  pushl $0
c0103268:	6a 00                	push   $0x0
  pushl $197
c010326a:	68 c5 00 00 00       	push   $0xc5
  jmp __alltraps
c010326f:	e9 b8 02 00 00       	jmp    c010352c <__alltraps>

c0103274 <vector198>:
.globl vector198
vector198:
  pushl $0
c0103274:	6a 00                	push   $0x0
  pushl $198
c0103276:	68 c6 00 00 00       	push   $0xc6
  jmp __alltraps
c010327b:	e9 ac 02 00 00       	jmp    c010352c <__alltraps>

c0103280 <vector199>:
.globl vector199
vector199:
  pushl $0
c0103280:	6a 00                	push   $0x0
  pushl $199
c0103282:	68 c7 00 00 00       	push   $0xc7
  jmp __alltraps
c0103287:	e9 a0 02 00 00       	jmp    c010352c <__alltraps>

c010328c <vector200>:
.globl vector200
vector200:
  pushl $0
c010328c:	6a 00                	push   $0x0
  pushl $200
c010328e:	68 c8 00 00 00       	push   $0xc8
  jmp __alltraps
c0103293:	e9 94 02 00 00       	jmp    c010352c <__alltraps>

c0103298 <vector201>:
.globl vector201
vector201:
  pushl $0
c0103298:	6a 00                	push   $0x0
  pushl $201
c010329a:	68 c9 00 00 00       	push   $0xc9
  jmp __alltraps
c010329f:	e9 88 02 00 00       	jmp    c010352c <__alltraps>

c01032a4 <vector202>:
.globl vector202
vector202:
  pushl $0
c01032a4:	6a 00                	push   $0x0
  pushl $202
c01032a6:	68 ca 00 00 00       	push   $0xca
  jmp __alltraps
c01032ab:	e9 7c 02 00 00       	jmp    c010352c <__alltraps>

c01032b0 <vector203>:
.globl vector203
vector203:
  pushl $0
c01032b0:	6a 00                	push   $0x0
  pushl $203
c01032b2:	68 cb 00 00 00       	push   $0xcb
  jmp __alltraps
c01032b7:	e9 70 02 00 00       	jmp    c010352c <__alltraps>

c01032bc <vector204>:
.globl vector204
vector204:
  pushl $0
c01032bc:	6a 00                	push   $0x0
  pushl $204
c01032be:	68 cc 00 00 00       	push   $0xcc
  jmp __alltraps
c01032c3:	e9 64 02 00 00       	jmp    c010352c <__alltraps>

c01032c8 <vector205>:
.globl vector205
vector205:
  pushl $0
c01032c8:	6a 00                	push   $0x0
  pushl $205
c01032ca:	68 cd 00 00 00       	push   $0xcd
  jmp __alltraps
c01032cf:	e9 58 02 00 00       	jmp    c010352c <__alltraps>

c01032d4 <vector206>:
.globl vector206
vector206:
  pushl $0
c01032d4:	6a 00                	push   $0x0
  pushl $206
c01032d6:	68 ce 00 00 00       	push   $0xce
  jmp __alltraps
c01032db:	e9 4c 02 00 00       	jmp    c010352c <__alltraps>

c01032e0 <vector207>:
.globl vector207
vector207:
  pushl $0
c01032e0:	6a 00                	push   $0x0
  pushl $207
c01032e2:	68 cf 00 00 00       	push   $0xcf
  jmp __alltraps
c01032e7:	e9 40 02 00 00       	jmp    c010352c <__alltraps>

c01032ec <vector208>:
.globl vector208
vector208:
  pushl $0
c01032ec:	6a 00                	push   $0x0
  pushl $208
c01032ee:	68 d0 00 00 00       	push   $0xd0
  jmp __alltraps
c01032f3:	e9 34 02 00 00       	jmp    c010352c <__alltraps>

c01032f8 <vector209>:
.globl vector209
vector209:
  pushl $0
c01032f8:	6a 00                	push   $0x0
  pushl $209
c01032fa:	68 d1 00 00 00       	push   $0xd1
  jmp __alltraps
c01032ff:	e9 28 02 00 00       	jmp    c010352c <__alltraps>

c0103304 <vector210>:
.globl vector210
vector210:
  pushl $0
c0103304:	6a 00                	push   $0x0
  pushl $210
c0103306:	68 d2 00 00 00       	push   $0xd2
  jmp __alltraps
c010330b:	e9 1c 02 00 00       	jmp    c010352c <__alltraps>

c0103310 <vector211>:
.globl vector211
vector211:
  pushl $0
c0103310:	6a 00                	push   $0x0
  pushl $211
c0103312:	68 d3 00 00 00       	push   $0xd3
  jmp __alltraps
c0103317:	e9 10 02 00 00       	jmp    c010352c <__alltraps>

c010331c <vector212>:
.globl vector212
vector212:
  pushl $0
c010331c:	6a 00                	push   $0x0
  pushl $212
c010331e:	68 d4 00 00 00       	push   $0xd4
  jmp __alltraps
c0103323:	e9 04 02 00 00       	jmp    c010352c <__alltraps>

c0103328 <vector213>:
.globl vector213
vector213:
  pushl $0
c0103328:	6a 00                	push   $0x0
  pushl $213
c010332a:	68 d5 00 00 00       	push   $0xd5
  jmp __alltraps
c010332f:	e9 f8 01 00 00       	jmp    c010352c <__alltraps>

c0103334 <vector214>:
.globl vector214
vector214:
  pushl $0
c0103334:	6a 00                	push   $0x0
  pushl $214
c0103336:	68 d6 00 00 00       	push   $0xd6
  jmp __alltraps
c010333b:	e9 ec 01 00 00       	jmp    c010352c <__alltraps>

c0103340 <vector215>:
.globl vector215
vector215:
  pushl $0
c0103340:	6a 00                	push   $0x0
  pushl $215
c0103342:	68 d7 00 00 00       	push   $0xd7
  jmp __alltraps
c0103347:	e9 e0 01 00 00       	jmp    c010352c <__alltraps>

c010334c <vector216>:
.globl vector216
vector216:
  pushl $0
c010334c:	6a 00                	push   $0x0
  pushl $216
c010334e:	68 d8 00 00 00       	push   $0xd8
  jmp __alltraps
c0103353:	e9 d4 01 00 00       	jmp    c010352c <__alltraps>

c0103358 <vector217>:
.globl vector217
vector217:
  pushl $0
c0103358:	6a 00                	push   $0x0
  pushl $217
c010335a:	68 d9 00 00 00       	push   $0xd9
  jmp __alltraps
c010335f:	e9 c8 01 00 00       	jmp    c010352c <__alltraps>

c0103364 <vector218>:
.globl vector218
vector218:
  pushl $0
c0103364:	6a 00                	push   $0x0
  pushl $218
c0103366:	68 da 00 00 00       	push   $0xda
  jmp __alltraps
c010336b:	e9 bc 01 00 00       	jmp    c010352c <__alltraps>

c0103370 <vector219>:
.globl vector219
vector219:
  pushl $0
c0103370:	6a 00                	push   $0x0
  pushl $219
c0103372:	68 db 00 00 00       	push   $0xdb
  jmp __alltraps
c0103377:	e9 b0 01 00 00       	jmp    c010352c <__alltraps>

c010337c <vector220>:
.globl vector220
vector220:
  pushl $0
c010337c:	6a 00                	push   $0x0
  pushl $220
c010337e:	68 dc 00 00 00       	push   $0xdc
  jmp __alltraps
c0103383:	e9 a4 01 00 00       	jmp    c010352c <__alltraps>

c0103388 <vector221>:
.globl vector221
vector221:
  pushl $0
c0103388:	6a 00                	push   $0x0
  pushl $221
c010338a:	68 dd 00 00 00       	push   $0xdd
  jmp __alltraps
c010338f:	e9 98 01 00 00       	jmp    c010352c <__alltraps>

c0103394 <vector222>:
.globl vector222
vector222:
  pushl $0
c0103394:	6a 00                	push   $0x0
  pushl $222
c0103396:	68 de 00 00 00       	push   $0xde
  jmp __alltraps
c010339b:	e9 8c 01 00 00       	jmp    c010352c <__alltraps>

c01033a0 <vector223>:
.globl vector223
vector223:
  pushl $0
c01033a0:	6a 00                	push   $0x0
  pushl $223
c01033a2:	68 df 00 00 00       	push   $0xdf
  jmp __alltraps
c01033a7:	e9 80 01 00 00       	jmp    c010352c <__alltraps>

c01033ac <vector224>:
.globl vector224
vector224:
  pushl $0
c01033ac:	6a 00                	push   $0x0
  pushl $224
c01033ae:	68 e0 00 00 00       	push   $0xe0
  jmp __alltraps
c01033b3:	e9 74 01 00 00       	jmp    c010352c <__alltraps>

c01033b8 <vector225>:
.globl vector225
vector225:
  pushl $0
c01033b8:	6a 00                	push   $0x0
  pushl $225
c01033ba:	68 e1 00 00 00       	push   $0xe1
  jmp __alltraps
c01033bf:	e9 68 01 00 00       	jmp    c010352c <__alltraps>

c01033c4 <vector226>:
.globl vector226
vector226:
  pushl $0
c01033c4:	6a 00                	push   $0x0
  pushl $226
c01033c6:	68 e2 00 00 00       	push   $0xe2
  jmp __alltraps
c01033cb:	e9 5c 01 00 00       	jmp    c010352c <__alltraps>

c01033d0 <vector227>:
.globl vector227
vector227:
  pushl $0
c01033d0:	6a 00                	push   $0x0
  pushl $227
c01033d2:	68 e3 00 00 00       	push   $0xe3
  jmp __alltraps
c01033d7:	e9 50 01 00 00       	jmp    c010352c <__alltraps>

c01033dc <vector228>:
.globl vector228
vector228:
  pushl $0
c01033dc:	6a 00                	push   $0x0
  pushl $228
c01033de:	68 e4 00 00 00       	push   $0xe4
  jmp __alltraps
c01033e3:	e9 44 01 00 00       	jmp    c010352c <__alltraps>

c01033e8 <vector229>:
.globl vector229
vector229:
  pushl $0
c01033e8:	6a 00                	push   $0x0
  pushl $229
c01033ea:	68 e5 00 00 00       	push   $0xe5
  jmp __alltraps
c01033ef:	e9 38 01 00 00       	jmp    c010352c <__alltraps>

c01033f4 <vector230>:
.globl vector230
vector230:
  pushl $0
c01033f4:	6a 00                	push   $0x0
  pushl $230
c01033f6:	68 e6 00 00 00       	push   $0xe6
  jmp __alltraps
c01033fb:	e9 2c 01 00 00       	jmp    c010352c <__alltraps>

c0103400 <vector231>:
.globl vector231
vector231:
  pushl $0
c0103400:	6a 00                	push   $0x0
  pushl $231
c0103402:	68 e7 00 00 00       	push   $0xe7
  jmp __alltraps
c0103407:	e9 20 01 00 00       	jmp    c010352c <__alltraps>

c010340c <vector232>:
.globl vector232
vector232:
  pushl $0
c010340c:	6a 00                	push   $0x0
  pushl $232
c010340e:	68 e8 00 00 00       	push   $0xe8
  jmp __alltraps
c0103413:	e9 14 01 00 00       	jmp    c010352c <__alltraps>

c0103418 <vector233>:
.globl vector233
vector233:
  pushl $0
c0103418:	6a 00                	push   $0x0
  pushl $233
c010341a:	68 e9 00 00 00       	push   $0xe9
  jmp __alltraps
c010341f:	e9 08 01 00 00       	jmp    c010352c <__alltraps>

c0103424 <vector234>:
.globl vector234
vector234:
  pushl $0
c0103424:	6a 00                	push   $0x0
  pushl $234
c0103426:	68 ea 00 00 00       	push   $0xea
  jmp __alltraps
c010342b:	e9 fc 00 00 00       	jmp    c010352c <__alltraps>

c0103430 <vector235>:
.globl vector235
vector235:
  pushl $0
c0103430:	6a 00                	push   $0x0
  pushl $235
c0103432:	68 eb 00 00 00       	push   $0xeb
  jmp __alltraps
c0103437:	e9 f0 00 00 00       	jmp    c010352c <__alltraps>

c010343c <vector236>:
.globl vector236
vector236:
  pushl $0
c010343c:	6a 00                	push   $0x0
  pushl $236
c010343e:	68 ec 00 00 00       	push   $0xec
  jmp __alltraps
c0103443:	e9 e4 00 00 00       	jmp    c010352c <__alltraps>

c0103448 <vector237>:
.globl vector237
vector237:
  pushl $0
c0103448:	6a 00                	push   $0x0
  pushl $237
c010344a:	68 ed 00 00 00       	push   $0xed
  jmp __alltraps
c010344f:	e9 d8 00 00 00       	jmp    c010352c <__alltraps>

c0103454 <vector238>:
.globl vector238
vector238:
  pushl $0
c0103454:	6a 00                	push   $0x0
  pushl $238
c0103456:	68 ee 00 00 00       	push   $0xee
  jmp __alltraps
c010345b:	e9 cc 00 00 00       	jmp    c010352c <__alltraps>

c0103460 <vector239>:
.globl vector239
vector239:
  pushl $0
c0103460:	6a 00                	push   $0x0
  pushl $239
c0103462:	68 ef 00 00 00       	push   $0xef
  jmp __alltraps
c0103467:	e9 c0 00 00 00       	jmp    c010352c <__alltraps>

c010346c <vector240>:
.globl vector240
vector240:
  pushl $0
c010346c:	6a 00                	push   $0x0
  pushl $240
c010346e:	68 f0 00 00 00       	push   $0xf0
  jmp __alltraps
c0103473:	e9 b4 00 00 00       	jmp    c010352c <__alltraps>

c0103478 <vector241>:
.globl vector241
vector241:
  pushl $0
c0103478:	6a 00                	push   $0x0
  pushl $241
c010347a:	68 f1 00 00 00       	push   $0xf1
  jmp __alltraps
c010347f:	e9 a8 00 00 00       	jmp    c010352c <__alltraps>

c0103484 <vector242>:
.globl vector242
vector242:
  pushl $0
c0103484:	6a 00                	push   $0x0
  pushl $242
c0103486:	68 f2 00 00 00       	push   $0xf2
  jmp __alltraps
c010348b:	e9 9c 00 00 00       	jmp    c010352c <__alltraps>

c0103490 <vector243>:
.globl vector243
vector243:
  pushl $0
c0103490:	6a 00                	push   $0x0
  pushl $243
c0103492:	68 f3 00 00 00       	push   $0xf3
  jmp __alltraps
c0103497:	e9 90 00 00 00       	jmp    c010352c <__alltraps>

c010349c <vector244>:
.globl vector244
vector244:
  pushl $0
c010349c:	6a 00                	push   $0x0
  pushl $244
c010349e:	68 f4 00 00 00       	push   $0xf4
  jmp __alltraps
c01034a3:	e9 84 00 00 00       	jmp    c010352c <__alltraps>

c01034a8 <vector245>:
.globl vector245
vector245:
  pushl $0
c01034a8:	6a 00                	push   $0x0
  pushl $245
c01034aa:	68 f5 00 00 00       	push   $0xf5
  jmp __alltraps
c01034af:	e9 78 00 00 00       	jmp    c010352c <__alltraps>

c01034b4 <vector246>:
.globl vector246
vector246:
  pushl $0
c01034b4:	6a 00                	push   $0x0
  pushl $246
c01034b6:	68 f6 00 00 00       	push   $0xf6
  jmp __alltraps
c01034bb:	e9 6c 00 00 00       	jmp    c010352c <__alltraps>

c01034c0 <vector247>:
.globl vector247
vector247:
  pushl $0
c01034c0:	6a 00                	push   $0x0
  pushl $247
c01034c2:	68 f7 00 00 00       	push   $0xf7
  jmp __alltraps
c01034c7:	e9 60 00 00 00       	jmp    c010352c <__alltraps>

c01034cc <vector248>:
.globl vector248
vector248:
  pushl $0
c01034cc:	6a 00                	push   $0x0
  pushl $248
c01034ce:	68 f8 00 00 00       	push   $0xf8
  jmp __alltraps
c01034d3:	e9 54 00 00 00       	jmp    c010352c <__alltraps>

c01034d8 <vector249>:
.globl vector249
vector249:
  pushl $0
c01034d8:	6a 00                	push   $0x0
  pushl $249
c01034da:	68 f9 00 00 00       	push   $0xf9
  jmp __alltraps
c01034df:	e9 48 00 00 00       	jmp    c010352c <__alltraps>

c01034e4 <vector250>:
.globl vector250
vector250:
  pushl $0
c01034e4:	6a 00                	push   $0x0
  pushl $250
c01034e6:	68 fa 00 00 00       	push   $0xfa
  jmp __alltraps
c01034eb:	e9 3c 00 00 00       	jmp    c010352c <__alltraps>

c01034f0 <vector251>:
.globl vector251
vector251:
  pushl $0
c01034f0:	6a 00                	push   $0x0
  pushl $251
c01034f2:	68 fb 00 00 00       	push   $0xfb
  jmp __alltraps
c01034f7:	e9 30 00 00 00       	jmp    c010352c <__alltraps>

c01034fc <vector252>:
.globl vector252
vector252:
  pushl $0
c01034fc:	6a 00                	push   $0x0
  pushl $252
c01034fe:	68 fc 00 00 00       	push   $0xfc
  jmp __alltraps
c0103503:	e9 24 00 00 00       	jmp    c010352c <__alltraps>

c0103508 <vector253>:
.globl vector253
vector253:
  pushl $0
c0103508:	6a 00                	push   $0x0
  pushl $253
c010350a:	68 fd 00 00 00       	push   $0xfd
  jmp __alltraps
c010350f:	e9 18 00 00 00       	jmp    c010352c <__alltraps>

c0103514 <vector254>:
.globl vector254
vector254:
  pushl $0
c0103514:	6a 00                	push   $0x0
  pushl $254
c0103516:	68 fe 00 00 00       	push   $0xfe
  jmp __alltraps
c010351b:	e9 0c 00 00 00       	jmp    c010352c <__alltraps>

c0103520 <vector255>:
.globl vector255
vector255:
  pushl $0
c0103520:	6a 00                	push   $0x0
  pushl $255
c0103522:	68 ff 00 00 00       	push   $0xff
  jmp __alltraps
c0103527:	e9 00 00 00 00       	jmp    c010352c <__alltraps>

c010352c <__alltraps>:
.text
.globl __alltraps
__alltraps:
    # push registers to build a trap frame
    # therefore make the stack look like a struct trapframe
    pushl %ds
c010352c:	1e                   	push   %ds
    pushl %es
c010352d:	06                   	push   %es
    pushl %fs
c010352e:	0f a0                	push   %fs
    pushl %gs
c0103530:	0f a8                	push   %gs
    pushal
c0103532:	60                   	pusha  

    # load GD_KDATA into %ds and %es to set up data segments for kernel
    movl $GD_KDATA, %eax
c0103533:	b8 10 00 00 00       	mov    $0x10,%eax
    movw %ax, %ds
c0103538:	8e d8                	mov    %eax,%ds
    movw %ax, %es
c010353a:	8e c0                	mov    %eax,%es

    # push %esp to pass a pointer to the trapframe as an argument to trap()
    pushl %esp
c010353c:	54                   	push   %esp

    # call trap(tf), where tf=%esp
    call trap
c010353d:	e8 e3 f4 ff ff       	call   c0102a25 <trap>

    # pop the pushed stack pointer
    popl %esp
c0103542:	5c                   	pop    %esp

c0103543 <__trapret>:

    # return falls through to trapret...
.globl __trapret
__trapret:
    # restore registers from stack
    popal
c0103543:	61                   	popa   

    # restore %ds, %es, %fs and %gs
    popl %gs
c0103544:	0f a9                	pop    %gs
    popl %fs
c0103546:	0f a1                	pop    %fs
    popl %es
c0103548:	07                   	pop    %es
    popl %ds
c0103549:	1f                   	pop    %ds

    # get rid of the trap number and error code
    addl $0x8, %esp
c010354a:	83 c4 08             	add    $0x8,%esp
    iret
c010354d:	cf                   	iret   

c010354e <forkrets>:

.globl forkrets
forkrets:
    # set stack to this new process's trapframe
    movl 4(%esp), %esp
c010354e:	8b 64 24 04          	mov    0x4(%esp),%esp
    jmp __trapret
c0103552:	eb ef                	jmp    c0103543 <__trapret>

c0103554 <_enclock_init_mm>:
 * (2) _enclock_init_mm: init pra_list_head and let  mm->sm_priv point to the addr of pra_list_head.
 *              Now, From the memory control struct mm_struct, we can access FIFO PRA
 */
static int
_enclock_init_mm(struct mm_struct *mm)
{     
c0103554:	55                   	push   %ebp
c0103555:	89 e5                	mov    %esp,%ebp
c0103557:	83 ec 18             	sub    $0x18,%esp
c010355a:	c7 45 f4 b0 20 1a c0 	movl   $0xc01a20b0,-0xc(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0103561:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103564:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0103567:	89 50 04             	mov    %edx,0x4(%eax)
c010356a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010356d:	8b 50 04             	mov    0x4(%eax),%edx
c0103570:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103573:	89 10                	mov    %edx,(%eax)
     list_init(&pra_list_head);
     clock_ptr = &pra_list_head;
c0103575:	c7 05 b8 20 1a c0 b0 	movl   $0xc01a20b0,0xc01a20b8
c010357c:	20 1a c0 
     assert(clock_ptr != NULL);
c010357f:	a1 b8 20 1a c0       	mov    0xc01a20b8,%eax
c0103584:	85 c0                	test   %eax,%eax
c0103586:	75 16                	jne    c010359e <_enclock_init_mm+0x4a>
c0103588:	68 10 c4 10 c0       	push   $0xc010c410
c010358d:	68 22 c4 10 c0       	push   $0xc010c422
c0103592:	6a 20                	push   $0x20
c0103594:	68 37 c4 10 c0       	push   $0xc010c437
c0103599:	e8 5a ce ff ff       	call   c01003f8 <__panic>
     mm->sm_priv = &sm_priv_enclock;
c010359e:	8b 45 08             	mov    0x8(%ebp),%eax
c01035a1:	c7 40 14 e0 b9 12 c0 	movl   $0xc012b9e0,0x14(%eax)
     //cprintf(" mm->sm_priv %x in enclock_init_mm\n",mm->sm_priv);
     return 0;
c01035a8:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01035ad:	c9                   	leave  
c01035ae:	c3                   	ret    

c01035af <_enclock_map_swappable>:
/*
 * (3)_enclock_map_swappable: According enclock PRA, we should link the most recent arrival page at the back of pra_list_head qeueue
 */
static int
_enclock_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c01035af:	55                   	push   %ebp
c01035b0:	89 e5                	mov    %esp,%ebp
c01035b2:	83 ec 48             	sub    $0x48,%esp
    list_entry_t *head = ((struct enclock_struct*) mm->sm_priv)->head;
c01035b5:	8b 45 08             	mov    0x8(%ebp),%eax
c01035b8:	8b 40 14             	mov    0x14(%eax),%eax
c01035bb:	8b 00                	mov    (%eax),%eax
c01035bd:	89 45 f0             	mov    %eax,-0x10(%ebp)
    list_entry_t *clock_ptr = *(((struct enclock_struct*) mm->sm_priv)->clock);
c01035c0:	8b 45 08             	mov    0x8(%ebp),%eax
c01035c3:	8b 40 14             	mov    0x14(%eax),%eax
c01035c6:	8b 40 04             	mov    0x4(%eax),%eax
c01035c9:	8b 00                	mov    (%eax),%eax
c01035cb:	89 45 ec             	mov    %eax,-0x14(%ebp)
    // if (head == clock_ptr) {
    //     cprintf("Got head == clock ptr in swappable\n");
    // }
    list_entry_t *entry=&(page->pra_page_link);
c01035ce:	8b 45 10             	mov    0x10(%ebp),%eax
c01035d1:	83 c0 14             	add    $0x14,%eax
c01035d4:	89 45 e8             	mov    %eax,-0x18(%ebp)
    
    assert(entry != NULL && head != NULL);
c01035d7:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01035db:	74 06                	je     c01035e3 <_enclock_map_swappable+0x34>
c01035dd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01035e1:	75 16                	jne    c01035f9 <_enclock_map_swappable+0x4a>
c01035e3:	68 4e c4 10 c0       	push   $0xc010c44e
c01035e8:	68 22 c4 10 c0       	push   $0xc010c422
c01035ed:	6a 32                	push   $0x32
c01035ef:	68 37 c4 10 c0       	push   $0xc010c437
c01035f4:	e8 ff cd ff ff       	call   c01003f8 <__panic>
    //record the page access situlation
    /*LAB3 CHALLENGE: YOUR CODE*/ 
    // not swap in but call this func, means failed to swap out 
    if (swap_in == 0) {
c01035f9:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c01035fd:	75 57                	jne    c0103656 <_enclock_map_swappable+0xa7>
        list_entry_t *le_prev = head, *le;
c01035ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103602:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while ((le = list_next(le_prev)) != head) {
c0103605:	eb 38                	jmp    c010363f <_enclock_map_swappable+0x90>
            if (le == entry) {
c0103607:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010360a:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c010360d:	75 2a                	jne    c0103639 <_enclock_map_swappable+0x8a>
c010360f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103612:	89 45 d8             	mov    %eax,-0x28(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0103615:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0103618:	8b 40 04             	mov    0x4(%eax),%eax
c010361b:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010361e:	8b 12                	mov    (%edx),%edx
c0103620:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0103623:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0103626:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0103629:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010362c:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010362f:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0103632:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0103635:	89 10                	mov    %edx,(%eax)
                list_del(le);
                break;
c0103637:	eb 1d                	jmp    c0103656 <_enclock_map_swappable+0xa7>
            }
            le_prev = le;        
c0103639:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010363c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010363f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103642:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0103645:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103648:	8b 40 04             	mov    0x4(%eax),%eax
    //record the page access situlation
    /*LAB3 CHALLENGE: YOUR CODE*/ 
    // not swap in but call this func, means failed to swap out 
    if (swap_in == 0) {
        list_entry_t *le_prev = head, *le;
        while ((le = list_next(le_prev)) != head) {
c010364b:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010364e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103651:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0103654:	75 b1                	jne    c0103607 <_enclock_map_swappable+0x58>
c0103656:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103659:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010365c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010365f:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c0103662:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103665:	8b 00                	mov    (%eax),%eax
c0103667:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010366a:	89 55 c8             	mov    %edx,-0x38(%ebp)
c010366d:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c0103670:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103673:	89 45 c0             	mov    %eax,-0x40(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0103676:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0103679:	8b 55 c8             	mov    -0x38(%ebp),%edx
c010367c:	89 10                	mov    %edx,(%eax)
c010367e:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0103681:	8b 10                	mov    (%eax),%edx
c0103683:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0103686:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0103689:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010368c:	8b 55 c0             	mov    -0x40(%ebp),%edx
c010368f:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0103692:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0103695:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0103698:	89 10                	mov    %edx,(%eax)
            le_prev = le;        
        }
    }
    //(1)link the most recent arrival page at the back of the pra_list_head qeueue.
    list_add_before(head, entry);
    return 0;
c010369a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010369f:	c9                   	leave  
c01036a0:	c3                   	ret    

c01036a1 <_enclock_swap_out_victim>:
 *  (4)_enclock_swap_out_victim: According FIFO PRA, we should unlink the  earliest arrival page in front of pra_list_head qeueue,
 *                            then assign the value of *ptr_page to the addr of this page.
 */
static int
_enclock_swap_out_victim(struct mm_struct *mm, struct Page ** ptr_page, int in_tick)
{
c01036a1:	55                   	push   %ebp
c01036a2:	89 e5                	mov    %esp,%ebp
c01036a4:	83 ec 48             	sub    $0x48,%esp
    list_entry_t *head = ((struct enclock_struct*) mm->sm_priv)->head;
c01036a7:	8b 45 08             	mov    0x8(%ebp),%eax
c01036aa:	8b 40 14             	mov    0x14(%eax),%eax
c01036ad:	8b 00                	mov    (%eax),%eax
c01036af:	89 45 ec             	mov    %eax,-0x14(%ebp)
    list_entry_t *clock_ptr = *(((struct enclock_struct*) mm->sm_priv)->clock);
c01036b2:	8b 45 08             	mov    0x8(%ebp),%eax
c01036b5:	8b 40 14             	mov    0x14(%eax),%eax
c01036b8:	8b 40 04             	mov    0x4(%eax),%eax
c01036bb:	8b 00                	mov    (%eax),%eax
c01036bd:	89 45 e8             	mov    %eax,-0x18(%ebp)
    // if (head == clock_ptr) {
    //     cprintf("Got head == clock ptr in victim\n");
    // }
    assert(head != NULL);
c01036c0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01036c4:	75 16                	jne    c01036dc <_enclock_swap_out_victim+0x3b>
c01036c6:	68 6c c4 10 c0       	push   $0xc010c46c
c01036cb:	68 22 c4 10 c0       	push   $0xc010c422
c01036d0:	6a 50                	push   $0x50
c01036d2:	68 37 c4 10 c0       	push   $0xc010c437
c01036d7:	e8 1c cd ff ff       	call   c01003f8 <__panic>
    assert(in_tick==0);
c01036dc:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01036e0:	74 16                	je     c01036f8 <_enclock_swap_out_victim+0x57>
c01036e2:	68 79 c4 10 c0       	push   $0xc010c479
c01036e7:	68 22 c4 10 c0       	push   $0xc010c422
c01036ec:	6a 51                	push   $0x51
c01036ee:	68 37 c4 10 c0       	push   $0xc010c437
c01036f3:	e8 00 cd ff ff       	call   c01003f8 <__panic>
    /* Select the victim */
    /*LAB3 CHALLENGE 2: YOUR CODE*/ 
    //(1)  iterate list searching for victim
    list_entry_t *le_prev = clock_ptr, *le;
c01036f8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01036fb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int cnt = 0;
c01036fe:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    while (le = list_next(le_prev)) {
c0103705:	e9 36 01 00 00       	jmp    c0103840 <_enclock_swap_out_victim+0x19f>
        assert(cnt < 3);
c010370a:	83 7d f0 02          	cmpl   $0x2,-0x10(%ebp)
c010370e:	7e 16                	jle    c0103726 <_enclock_swap_out_victim+0x85>
c0103710:	68 84 c4 10 c0       	push   $0xc010c484
c0103715:	68 22 c4 10 c0       	push   $0xc010c422
c010371a:	6a 58                	push   $0x58
c010371c:	68 37 c4 10 c0       	push   $0xc010c437
c0103721:	e8 d2 cc ff ff       	call   c01003f8 <__panic>
        if (le == head) {
c0103726:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103729:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010372c:	75 0f                	jne    c010373d <_enclock_swap_out_victim+0x9c>
            cnt ++;
c010372e:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
            le_prev = le;
c0103732:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103735:	89 45 f4             	mov    %eax,-0xc(%ebp)
            continue;
c0103738:	e9 03 01 00 00       	jmp    c0103840 <_enclock_swap_out_victim+0x19f>
        }
        struct Page *page = le2page(le, pra_page_link);
c010373d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103740:	83 e8 14             	sub    $0x14,%eax
c0103743:	89 45 dc             	mov    %eax,-0x24(%ebp)
        pte_t* ptep = get_pte(mm->pgdir, page->pra_vaddr, 0);
c0103746:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103749:	8b 50 1c             	mov    0x1c(%eax),%edx
c010374c:	8b 45 08             	mov    0x8(%ebp),%eax
c010374f:	8b 40 0c             	mov    0xc(%eax),%eax
c0103752:	83 ec 04             	sub    $0x4,%esp
c0103755:	6a 00                	push   $0x0
c0103757:	52                   	push   %edx
c0103758:	50                   	push   %eax
c0103759:	e8 61 46 00 00       	call   c0107dbf <get_pte>
c010375e:	83 c4 10             	add    $0x10,%esp
c0103761:	89 45 d8             	mov    %eax,-0x28(%ebp)
        _enclock_print_pte(ptep, page->pra_vaddr);
c0103764:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103767:	8b 40 1c             	mov    0x1c(%eax),%eax
c010376a:	83 ec 08             	sub    $0x8,%esp
c010376d:	50                   	push   %eax
c010376e:	ff 75 d8             	pushl  -0x28(%ebp)
c0103771:	e8 fb 01 00 00       	call   c0103971 <_enclock_print_pte>
c0103776:	83 c4 10             	add    $0x10,%esp
        // cprintf("BEFORE: va: 0x%x, pte: 0x%x A: 0x%x, D: 0x%x\n", page->pra_vaddr, *ptep, *ptep & PTE_A, *ptep & PTE_D);
        if (*ptep & PTE_A) {
c0103779:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010377c:	8b 00                	mov    (%eax),%eax
c010377e:	83 e0 20             	and    $0x20,%eax
c0103781:	85 c0                	test   %eax,%eax
c0103783:	74 2d                	je     c01037b2 <_enclock_swap_out_victim+0x111>
            // set access to 0
            *ptep &= ~PTE_A;
c0103785:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0103788:	8b 00                	mov    (%eax),%eax
c010378a:	83 e0 df             	and    $0xffffffdf,%eax
c010378d:	89 c2                	mov    %eax,%edx
c010378f:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0103792:	89 10                	mov    %edx,(%eax)
            tlb_invalidate(mm->pgdir, page->pra_vaddr);
c0103794:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103797:	8b 50 1c             	mov    0x1c(%eax),%edx
c010379a:	8b 45 08             	mov    0x8(%ebp),%eax
c010379d:	8b 40 0c             	mov    0xc(%eax),%eax
c01037a0:	83 ec 08             	sub    $0x8,%esp
c01037a3:	52                   	push   %edx
c01037a4:	50                   	push   %eax
c01037a5:	e8 5e 4c 00 00       	call   c0108408 <tlb_invalidate>
c01037aa:	83 c4 10             	add    $0x10,%esp
c01037ad:	e9 88 00 00 00       	jmp    c010383a <_enclock_swap_out_victim+0x199>
        } else {
            // cprintf("now a == 0\n");
            if (*ptep & PTE_D) {
c01037b2:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01037b5:	8b 00                	mov    (%eax),%eax
c01037b7:	83 e0 40             	and    $0x40,%eax
c01037ba:	85 c0                	test   %eax,%eax
c01037bc:	74 63                	je     c0103821 <_enclock_swap_out_victim+0x180>
                if (swapfs_write((page->pra_vaddr / PGSIZE + 1) << 8, page) == 0) {
c01037be:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01037c1:	8b 40 1c             	mov    0x1c(%eax),%eax
c01037c4:	c1 e8 0c             	shr    $0xc,%eax
c01037c7:	83 c0 01             	add    $0x1,%eax
c01037ca:	c1 e0 08             	shl    $0x8,%eax
c01037cd:	83 ec 08             	sub    $0x8,%esp
c01037d0:	ff 75 dc             	pushl  -0x24(%ebp)
c01037d3:	50                   	push   %eax
c01037d4:	e8 0f 59 00 00       	call   c01090e8 <swapfs_write>
c01037d9:	83 c4 10             	add    $0x10,%esp
c01037dc:	85 c0                	test   %eax,%eax
c01037de:	75 17                	jne    c01037f7 <_enclock_swap_out_victim+0x156>
                    cprintf("write 0x%x to disk\n", page->pra_vaddr);
c01037e0:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01037e3:	8b 40 1c             	mov    0x1c(%eax),%eax
c01037e6:	83 ec 08             	sub    $0x8,%esp
c01037e9:	50                   	push   %eax
c01037ea:	68 8c c4 10 c0       	push   $0xc010c48c
c01037ef:	e8 9e ca ff ff       	call   c0100292 <cprintf>
c01037f4:	83 c4 10             	add    $0x10,%esp
                }
                // set dirty to 0
                *ptep = *ptep & ~PTE_D;
c01037f7:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01037fa:	8b 00                	mov    (%eax),%eax
c01037fc:	83 e0 bf             	and    $0xffffffbf,%eax
c01037ff:	89 c2                	mov    %eax,%edx
c0103801:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0103804:	89 10                	mov    %edx,(%eax)
                tlb_invalidate(mm->pgdir, page->pra_vaddr);
c0103806:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103809:	8b 50 1c             	mov    0x1c(%eax),%edx
c010380c:	8b 45 08             	mov    0x8(%ebp),%eax
c010380f:	8b 40 0c             	mov    0xc(%eax),%eax
c0103812:	83 ec 08             	sub    $0x8,%esp
c0103815:	52                   	push   %edx
c0103816:	50                   	push   %eax
c0103817:	e8 ec 4b 00 00       	call   c0108408 <tlb_invalidate>
c010381c:	83 c4 10             	add    $0x10,%esp
c010381f:	eb 19                	jmp    c010383a <_enclock_swap_out_victim+0x199>
            } else {
                // cprintf("AFTER: le: %p, pte: 0x%x A: 0x%x, D: 0x%x\n", le, *ptep, *ptep & PTE_A, *ptep & PTE_D);
                cprintf("victim is 0x%x\n", page->pra_vaddr);
c0103821:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103824:	8b 40 1c             	mov    0x1c(%eax),%eax
c0103827:	83 ec 08             	sub    $0x8,%esp
c010382a:	50                   	push   %eax
c010382b:	68 a0 c4 10 c0       	push   $0xc010c4a0
c0103830:	e8 5d ca ff ff       	call   c0100292 <cprintf>
c0103835:	83 c4 10             	add    $0x10,%esp
                break;
c0103838:	eb 1f                	jmp    c0103859 <_enclock_swap_out_victim+0x1b8>
            }
        }
        // cprintf("AFTER: le: %p, pte: 0x%x A: 0x%x, D: 0x%x\n", le, *ptep, *ptep & PTE_A, *ptep & PTE_D);
        le_prev = le;        
c010383a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010383d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103840:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103843:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0103846:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0103849:	8b 40 04             	mov    0x4(%eax),%eax
    /* Select the victim */
    /*LAB3 CHALLENGE 2: YOUR CODE*/ 
    //(1)  iterate list searching for victim
    list_entry_t *le_prev = clock_ptr, *le;
    int cnt = 0;
    while (le = list_next(le_prev)) {
c010384c:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010384f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0103853:	0f 85 b1 fe ff ff    	jne    c010370a <_enclock_swap_out_victim+0x69>
            }
        }
        // cprintf("AFTER: le: %p, pte: 0x%x A: 0x%x, D: 0x%x\n", le, *ptep, *ptep & PTE_A, *ptep & PTE_D);
        le_prev = le;        
    }
    assert(le != head);
c0103859:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010385c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010385f:	75 16                	jne    c0103877 <_enclock_swap_out_victim+0x1d6>
c0103861:	68 b0 c4 10 c0       	push   $0xc010c4b0
c0103866:	68 22 c4 10 c0       	push   $0xc010c422
c010386b:	6a 78                	push   $0x78
c010386d:	68 37 c4 10 c0       	push   $0xc010c437
c0103872:	e8 81 cb ff ff       	call   c01003f8 <__panic>
c0103877:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010387a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010387d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103880:	8b 40 04             	mov    0x4(%eax),%eax
c0103883:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0103886:	8b 12                	mov    (%edx),%edx
c0103888:	89 55 c8             	mov    %edx,-0x38(%ebp)
c010388b:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010388e:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0103891:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0103894:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0103897:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010389a:	8b 55 c8             	mov    -0x38(%ebp),%edx
c010389d:	89 10                	mov    %edx,(%eax)
    list_del(le);
    //(2)  assign the value of *ptr_page to the addr of this page
    struct Page *page = le2page(le, pra_page_link);
c010389f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01038a2:	83 e8 14             	sub    $0x14,%eax
c01038a5:	89 45 d0             	mov    %eax,-0x30(%ebp)
    assert(page != NULL);
c01038a8:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c01038ac:	75 16                	jne    c01038c4 <_enclock_swap_out_victim+0x223>
c01038ae:	68 bb c4 10 c0       	push   $0xc010c4bb
c01038b3:	68 22 c4 10 c0       	push   $0xc010c422
c01038b8:	6a 7c                	push   $0x7c
c01038ba:	68 37 c4 10 c0       	push   $0xc010c437
c01038bf:	e8 34 cb ff ff       	call   c01003f8 <__panic>
    *ptr_page = page;
c01038c4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01038c7:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01038ca:	89 10                	mov    %edx,(%eax)
    //(2)update clock
    *(((struct enclock_struct*) mm->sm_priv)->clock) = list_next(le_prev);
c01038cc:	8b 45 08             	mov    0x8(%ebp),%eax
c01038cf:	8b 40 14             	mov    0x14(%eax),%eax
c01038d2:	8b 40 04             	mov    0x4(%eax),%eax
c01038d5:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01038d8:	89 55 d4             	mov    %edx,-0x2c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01038db:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01038de:	8b 52 04             	mov    0x4(%edx),%edx
c01038e1:	89 10                	mov    %edx,(%eax)
    return 0;
c01038e3:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01038e8:	c9                   	leave  
c01038e9:	c3                   	ret    

c01038ea <_enclock_reset_pte>:

void
_enclock_reset_pte(pde_t* pgdir) {
c01038ea:	55                   	push   %ebp
c01038eb:	89 e5                	mov    %esp,%ebp
c01038ed:	83 ec 18             	sub    $0x18,%esp
    cprintf("PTEs resetting...\n");
c01038f0:	83 ec 0c             	sub    $0xc,%esp
c01038f3:	68 c8 c4 10 c0       	push   $0xc010c4c8
c01038f8:	e8 95 c9 ff ff       	call   c0100292 <cprintf>
c01038fd:	83 c4 10             	add    $0x10,%esp
    for(unsigned int va = 0x1000; va <= 0x4000; va += 0x1000) {
c0103900:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
c0103907:	eb 4c                	jmp    c0103955 <_enclock_reset_pte+0x6b>
        pte_t* ptep = get_pte(pgdir, va, 0);
c0103909:	83 ec 04             	sub    $0x4,%esp
c010390c:	6a 00                	push   $0x0
c010390e:	ff 75 f4             	pushl  -0xc(%ebp)
c0103911:	ff 75 08             	pushl  0x8(%ebp)
c0103914:	e8 a6 44 00 00       	call   c0107dbf <get_pte>
c0103919:	83 c4 10             	add    $0x10,%esp
c010391c:	89 45 f0             	mov    %eax,-0x10(%ebp)
        *ptep = *ptep & ~PTE_A;
c010391f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103922:	8b 00                	mov    (%eax),%eax
c0103924:	83 e0 df             	and    $0xffffffdf,%eax
c0103927:	89 c2                	mov    %eax,%edx
c0103929:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010392c:	89 10                	mov    %edx,(%eax)
        *ptep = *ptep & ~PTE_D;
c010392e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103931:	8b 00                	mov    (%eax),%eax
c0103933:	83 e0 bf             	and    $0xffffffbf,%eax
c0103936:	89 c2                	mov    %eax,%edx
c0103938:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010393b:	89 10                	mov    %edx,(%eax)
        tlb_invalidate(pgdir, va);
c010393d:	83 ec 08             	sub    $0x8,%esp
c0103940:	ff 75 f4             	pushl  -0xc(%ebp)
c0103943:	ff 75 08             	pushl  0x8(%ebp)
c0103946:	e8 bd 4a 00 00       	call   c0108408 <tlb_invalidate>
c010394b:	83 c4 10             	add    $0x10,%esp
}

void
_enclock_reset_pte(pde_t* pgdir) {
    cprintf("PTEs resetting...\n");
    for(unsigned int va = 0x1000; va <= 0x4000; va += 0x1000) {
c010394e:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
c0103955:	81 7d f4 00 40 00 00 	cmpl   $0x4000,-0xc(%ebp)
c010395c:	76 ab                	jbe    c0103909 <_enclock_reset_pte+0x1f>
        pte_t* ptep = get_pte(pgdir, va, 0);
        *ptep = *ptep & ~PTE_A;
        *ptep = *ptep & ~PTE_D;
        tlb_invalidate(pgdir, va);
    }
    cprintf("PTEs reseted!\n");
c010395e:	83 ec 0c             	sub    $0xc,%esp
c0103961:	68 db c4 10 c0       	push   $0xc010c4db
c0103966:	e8 27 c9 ff ff       	call   c0100292 <cprintf>
c010396b:	83 c4 10             	add    $0x10,%esp
}
c010396e:	90                   	nop
c010396f:	c9                   	leave  
c0103970:	c3                   	ret    

c0103971 <_enclock_print_pte>:

void
_enclock_print_pte(pte_t* ptep, unsigned int va) {
c0103971:	55                   	push   %ebp
c0103972:	89 e5                	mov    %esp,%ebp
c0103974:	83 ec 08             	sub    $0x8,%esp
    cprintf("va: 0x%x, pte: 0x%x A: 0x%x, D: 0x%x\n", va, *ptep, *ptep & PTE_A, *ptep & PTE_D);
c0103977:	8b 45 08             	mov    0x8(%ebp),%eax
c010397a:	8b 00                	mov    (%eax),%eax
c010397c:	83 e0 40             	and    $0x40,%eax
c010397f:	89 c1                	mov    %eax,%ecx
c0103981:	8b 45 08             	mov    0x8(%ebp),%eax
c0103984:	8b 00                	mov    (%eax),%eax
c0103986:	83 e0 20             	and    $0x20,%eax
c0103989:	89 c2                	mov    %eax,%edx
c010398b:	8b 45 08             	mov    0x8(%ebp),%eax
c010398e:	8b 00                	mov    (%eax),%eax
c0103990:	83 ec 0c             	sub    $0xc,%esp
c0103993:	51                   	push   %ecx
c0103994:	52                   	push   %edx
c0103995:	50                   	push   %eax
c0103996:	ff 75 0c             	pushl  0xc(%ebp)
c0103999:	68 ec c4 10 c0       	push   $0xc010c4ec
c010399e:	e8 ef c8 ff ff       	call   c0100292 <cprintf>
c01039a3:	83 c4 20             	add    $0x20,%esp
}
c01039a6:	90                   	nop
c01039a7:	c9                   	leave  
c01039a8:	c3                   	ret    

c01039a9 <_enclock_check_swap>:

static int
_enclock_check_swap(void) {
c01039a9:	55                   	push   %ebp
c01039aa:	89 e5                	mov    %esp,%ebp
c01039ac:	83 ec 18             	sub    $0x18,%esp
}

static inline uintptr_t
rcr3(void) {
    uintptr_t cr3;
    asm volatile ("mov %%cr3, %0" : "=r" (cr3) :: "memory");
c01039af:	0f 20 d8             	mov    %cr3,%eax
c01039b2:	89 45 e8             	mov    %eax,-0x18(%ebp)
    return cr3;
c01039b5:	8b 45 e8             	mov    -0x18(%ebp),%eax
    _enclock_reset_pte(KADDR(((pde_t *)rcr3())));
c01039b8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01039bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01039be:	c1 e8 0c             	shr    $0xc,%eax
c01039c1:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01039c4:	a1 80 ff 19 c0       	mov    0xc019ff80,%eax
c01039c9:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c01039cc:	72 17                	jb     c01039e5 <_enclock_check_swap+0x3c>
c01039ce:	ff 75 f4             	pushl  -0xc(%ebp)
c01039d1:	68 14 c5 10 c0       	push   $0xc010c514
c01039d6:	68 96 00 00 00       	push   $0x96
c01039db:	68 37 c4 10 c0       	push   $0xc010c437
c01039e0:	e8 13 ca ff ff       	call   c01003f8 <__panic>
c01039e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01039e8:	2d 00 00 00 40       	sub    $0x40000000,%eax
c01039ed:	83 ec 0c             	sub    $0xc,%esp
c01039f0:	50                   	push   %eax
c01039f1:	e8 f4 fe ff ff       	call   c01038ea <_enclock_reset_pte>
c01039f6:	83 c4 10             	add    $0x10,%esp
    cprintf("read Virt Page c in enclock_check_swap\n");
c01039f9:	83 ec 0c             	sub    $0xc,%esp
c01039fc:	68 38 c5 10 c0       	push   $0xc010c538
c0103a01:	e8 8c c8 ff ff       	call   c0100292 <cprintf>
c0103a06:	83 c4 10             	add    $0x10,%esp
    unsigned char tmp = *(unsigned char *)0x3000;
c0103a09:	b8 00 30 00 00       	mov    $0x3000,%eax
c0103a0e:	0f b6 00             	movzbl (%eax),%eax
c0103a11:	88 45 ef             	mov    %al,-0x11(%ebp)
    assert(pgfault_num==4);
c0103a14:	a1 64 ff 19 c0       	mov    0xc019ff64,%eax
c0103a19:	83 f8 04             	cmp    $0x4,%eax
c0103a1c:	74 19                	je     c0103a37 <_enclock_check_swap+0x8e>
c0103a1e:	68 60 c5 10 c0       	push   $0xc010c560
c0103a23:	68 22 c4 10 c0       	push   $0xc010c422
c0103a28:	68 99 00 00 00       	push   $0x99
c0103a2d:	68 37 c4 10 c0       	push   $0xc010c437
c0103a32:	e8 c1 c9 ff ff       	call   c01003f8 <__panic>
    cprintf("write Virt Page a in enclock_check_swap\n");
c0103a37:	83 ec 0c             	sub    $0xc,%esp
c0103a3a:	68 70 c5 10 c0       	push   $0xc010c570
c0103a3f:	e8 4e c8 ff ff       	call   c0100292 <cprintf>
c0103a44:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x1000 = 0x0a;
c0103a47:	b8 00 10 00 00       	mov    $0x1000,%eax
c0103a4c:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==4);
c0103a4f:	a1 64 ff 19 c0       	mov    0xc019ff64,%eax
c0103a54:	83 f8 04             	cmp    $0x4,%eax
c0103a57:	74 19                	je     c0103a72 <_enclock_check_swap+0xc9>
c0103a59:	68 60 c5 10 c0       	push   $0xc010c560
c0103a5e:	68 22 c4 10 c0       	push   $0xc010c422
c0103a63:	68 9c 00 00 00       	push   $0x9c
c0103a68:	68 37 c4 10 c0       	push   $0xc010c437
c0103a6d:	e8 86 c9 ff ff       	call   c01003f8 <__panic>
    cprintf("read Virt Page d in enclock_check_swap\n");
c0103a72:	83 ec 0c             	sub    $0xc,%esp
c0103a75:	68 9c c5 10 c0       	push   $0xc010c59c
c0103a7a:	e8 13 c8 ff ff       	call   c0100292 <cprintf>
c0103a7f:	83 c4 10             	add    $0x10,%esp
    tmp = *(unsigned char *)0x4000;
c0103a82:	b8 00 40 00 00       	mov    $0x4000,%eax
c0103a87:	0f b6 00             	movzbl (%eax),%eax
c0103a8a:	88 45 ef             	mov    %al,-0x11(%ebp)
    assert(pgfault_num==4);
c0103a8d:	a1 64 ff 19 c0       	mov    0xc019ff64,%eax
c0103a92:	83 f8 04             	cmp    $0x4,%eax
c0103a95:	74 19                	je     c0103ab0 <_enclock_check_swap+0x107>
c0103a97:	68 60 c5 10 c0       	push   $0xc010c560
c0103a9c:	68 22 c4 10 c0       	push   $0xc010c422
c0103aa1:	68 9f 00 00 00       	push   $0x9f
c0103aa6:	68 37 c4 10 c0       	push   $0xc010c437
c0103aab:	e8 48 c9 ff ff       	call   c01003f8 <__panic>
    cprintf("write Virt Page b in enclock_check_swap\n");
c0103ab0:	83 ec 0c             	sub    $0xc,%esp
c0103ab3:	68 c4 c5 10 c0       	push   $0xc010c5c4
c0103ab8:	e8 d5 c7 ff ff       	call   c0100292 <cprintf>
c0103abd:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x2000 = 0x0b;
c0103ac0:	b8 00 20 00 00       	mov    $0x2000,%eax
c0103ac5:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==4);
c0103ac8:	a1 64 ff 19 c0       	mov    0xc019ff64,%eax
c0103acd:	83 f8 04             	cmp    $0x4,%eax
c0103ad0:	74 19                	je     c0103aeb <_enclock_check_swap+0x142>
c0103ad2:	68 60 c5 10 c0       	push   $0xc010c560
c0103ad7:	68 22 c4 10 c0       	push   $0xc010c422
c0103adc:	68 a2 00 00 00       	push   $0xa2
c0103ae1:	68 37 c4 10 c0       	push   $0xc010c437
c0103ae6:	e8 0d c9 ff ff       	call   c01003f8 <__panic>

    cprintf("write Virt Page e in enclock_check_swap\n");
c0103aeb:	83 ec 0c             	sub    $0xc,%esp
c0103aee:	68 f0 c5 10 c0       	push   $0xc010c5f0
c0103af3:	e8 9a c7 ff ff       	call   c0100292 <cprintf>
c0103af8:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x5000 = 0x0e;
c0103afb:	b8 00 50 00 00       	mov    $0x5000,%eax
c0103b00:	c6 00 0e             	movb   $0xe,(%eax)
    assert(pgfault_num==5);
c0103b03:	a1 64 ff 19 c0       	mov    0xc019ff64,%eax
c0103b08:	83 f8 05             	cmp    $0x5,%eax
c0103b0b:	74 19                	je     c0103b26 <_enclock_check_swap+0x17d>
c0103b0d:	68 19 c6 10 c0       	push   $0xc010c619
c0103b12:	68 22 c4 10 c0       	push   $0xc010c422
c0103b17:	68 a6 00 00 00       	push   $0xa6
c0103b1c:	68 37 c4 10 c0       	push   $0xc010c437
c0103b21:	e8 d2 c8 ff ff       	call   c01003f8 <__panic>
    cprintf("read Virt Page b in enclock_check_swap\n");
c0103b26:	83 ec 0c             	sub    $0xc,%esp
c0103b29:	68 28 c6 10 c0       	push   $0xc010c628
c0103b2e:	e8 5f c7 ff ff       	call   c0100292 <cprintf>
c0103b33:	83 c4 10             	add    $0x10,%esp
    tmp = *(unsigned char *)0x2000;
c0103b36:	b8 00 20 00 00       	mov    $0x2000,%eax
c0103b3b:	0f b6 00             	movzbl (%eax),%eax
c0103b3e:	88 45 ef             	mov    %al,-0x11(%ebp)
    assert(pgfault_num==5);
c0103b41:	a1 64 ff 19 c0       	mov    0xc019ff64,%eax
c0103b46:	83 f8 05             	cmp    $0x5,%eax
c0103b49:	74 19                	je     c0103b64 <_enclock_check_swap+0x1bb>
c0103b4b:	68 19 c6 10 c0       	push   $0xc010c619
c0103b50:	68 22 c4 10 c0       	push   $0xc010c422
c0103b55:	68 a9 00 00 00       	push   $0xa9
c0103b5a:	68 37 c4 10 c0       	push   $0xc010c437
c0103b5f:	e8 94 c8 ff ff       	call   c01003f8 <__panic>
    cprintf("write Virt Page a in enclock_check_swap\n");
c0103b64:	83 ec 0c             	sub    $0xc,%esp
c0103b67:	68 70 c5 10 c0       	push   $0xc010c570
c0103b6c:	e8 21 c7 ff ff       	call   c0100292 <cprintf>
c0103b71:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x1000 = 0x0a;
c0103b74:	b8 00 10 00 00       	mov    $0x1000,%eax
c0103b79:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==5);
c0103b7c:	a1 64 ff 19 c0       	mov    0xc019ff64,%eax
c0103b81:	83 f8 05             	cmp    $0x5,%eax
c0103b84:	74 19                	je     c0103b9f <_enclock_check_swap+0x1f6>
c0103b86:	68 19 c6 10 c0       	push   $0xc010c619
c0103b8b:	68 22 c4 10 c0       	push   $0xc010c422
c0103b90:	68 ac 00 00 00       	push   $0xac
c0103b95:	68 37 c4 10 c0       	push   $0xc010c437
c0103b9a:	e8 59 c8 ff ff       	call   c01003f8 <__panic>
    cprintf("read Virt Page b in enclock_check_swap\n");
c0103b9f:	83 ec 0c             	sub    $0xc,%esp
c0103ba2:	68 28 c6 10 c0       	push   $0xc010c628
c0103ba7:	e8 e6 c6 ff ff       	call   c0100292 <cprintf>
c0103bac:	83 c4 10             	add    $0x10,%esp
    tmp = *(unsigned char *)0x2000;
c0103baf:	b8 00 20 00 00       	mov    $0x2000,%eax
c0103bb4:	0f b6 00             	movzbl (%eax),%eax
c0103bb7:	88 45 ef             	mov    %al,-0x11(%ebp)
    assert(pgfault_num==5);
c0103bba:	a1 64 ff 19 c0       	mov    0xc019ff64,%eax
c0103bbf:	83 f8 05             	cmp    $0x5,%eax
c0103bc2:	74 19                	je     c0103bdd <_enclock_check_swap+0x234>
c0103bc4:	68 19 c6 10 c0       	push   $0xc010c619
c0103bc9:	68 22 c4 10 c0       	push   $0xc010c422
c0103bce:	68 af 00 00 00       	push   $0xaf
c0103bd3:	68 37 c4 10 c0       	push   $0xc010c437
c0103bd8:	e8 1b c8 ff ff       	call   c01003f8 <__panic>

    cprintf("read Virt Page c in enclock_check_swap\n");
c0103bdd:	83 ec 0c             	sub    $0xc,%esp
c0103be0:	68 38 c5 10 c0       	push   $0xc010c538
c0103be5:	e8 a8 c6 ff ff       	call   c0100292 <cprintf>
c0103bea:	83 c4 10             	add    $0x10,%esp
    tmp = *(unsigned char *)0x3000;
c0103bed:	b8 00 30 00 00       	mov    $0x3000,%eax
c0103bf2:	0f b6 00             	movzbl (%eax),%eax
c0103bf5:	88 45 ef             	mov    %al,-0x11(%ebp)
    assert(pgfault_num==6);
c0103bf8:	a1 64 ff 19 c0       	mov    0xc019ff64,%eax
c0103bfd:	83 f8 06             	cmp    $0x6,%eax
c0103c00:	74 19                	je     c0103c1b <_enclock_check_swap+0x272>
c0103c02:	68 50 c6 10 c0       	push   $0xc010c650
c0103c07:	68 22 c4 10 c0       	push   $0xc010c422
c0103c0c:	68 b3 00 00 00       	push   $0xb3
c0103c11:	68 37 c4 10 c0       	push   $0xc010c437
c0103c16:	e8 dd c7 ff ff       	call   c01003f8 <__panic>
    cprintf("read Virt Page d in enclock_check_swap\n");
c0103c1b:	83 ec 0c             	sub    $0xc,%esp
c0103c1e:	68 9c c5 10 c0       	push   $0xc010c59c
c0103c23:	e8 6a c6 ff ff       	call   c0100292 <cprintf>
c0103c28:	83 c4 10             	add    $0x10,%esp
    tmp = *(unsigned char *)0x4000;
c0103c2b:	b8 00 40 00 00       	mov    $0x4000,%eax
c0103c30:	0f b6 00             	movzbl (%eax),%eax
c0103c33:	88 45 ef             	mov    %al,-0x11(%ebp)
    assert(pgfault_num==7);
c0103c36:	a1 64 ff 19 c0       	mov    0xc019ff64,%eax
c0103c3b:	83 f8 07             	cmp    $0x7,%eax
c0103c3e:	74 19                	je     c0103c59 <_enclock_check_swap+0x2b0>
c0103c40:	68 5f c6 10 c0       	push   $0xc010c65f
c0103c45:	68 22 c4 10 c0       	push   $0xc010c422
c0103c4a:	68 b6 00 00 00       	push   $0xb6
c0103c4f:	68 37 c4 10 c0       	push   $0xc010c437
c0103c54:	e8 9f c7 ff ff       	call   c01003f8 <__panic>
    return 0;
c0103c59:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0103c5e:	c9                   	leave  
c0103c5f:	c3                   	ret    

c0103c60 <_enclock_init>:


static int
_enclock_init(void)
{
c0103c60:	55                   	push   %ebp
c0103c61:	89 e5                	mov    %esp,%ebp
    return 0;
c0103c63:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0103c68:	5d                   	pop    %ebp
c0103c69:	c3                   	ret    

c0103c6a <_enclock_set_unswappable>:

static int
_enclock_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c0103c6a:	55                   	push   %ebp
c0103c6b:	89 e5                	mov    %esp,%ebp
    return 0;
c0103c6d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0103c72:	5d                   	pop    %ebp
c0103c73:	c3                   	ret    

c0103c74 <_enclock_tick_event>:

static int
_enclock_tick_event(struct mm_struct *mm)
{ return 0; }
c0103c74:	55                   	push   %ebp
c0103c75:	89 e5                	mov    %esp,%ebp
c0103c77:	b8 00 00 00 00       	mov    $0x0,%eax
c0103c7c:	5d                   	pop    %ebp
c0103c7d:	c3                   	ret    

c0103c7e <lock_init>:
#define local_intr_restore(x)   __intr_restore(x);

typedef volatile bool lock_t;

static inline void
lock_init(lock_t *lock) {
c0103c7e:	55                   	push   %ebp
c0103c7f:	89 e5                	mov    %esp,%ebp
    *lock = 0;
c0103c81:	8b 45 08             	mov    0x8(%ebp),%eax
c0103c84:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
c0103c8a:	90                   	nop
c0103c8b:	5d                   	pop    %ebp
c0103c8c:	c3                   	ret    

c0103c8d <mm_count>:
bool user_mem_check(struct mm_struct *mm, uintptr_t start, size_t len, bool write);
bool copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable);
bool copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len);

static inline int
mm_count(struct mm_struct *mm) {
c0103c8d:	55                   	push   %ebp
c0103c8e:	89 e5                	mov    %esp,%ebp
    return mm->mm_count;
c0103c90:	8b 45 08             	mov    0x8(%ebp),%eax
c0103c93:	8b 40 18             	mov    0x18(%eax),%eax
}
c0103c96:	5d                   	pop    %ebp
c0103c97:	c3                   	ret    

c0103c98 <set_mm_count>:

static inline void
set_mm_count(struct mm_struct *mm, int val) {
c0103c98:	55                   	push   %ebp
c0103c99:	89 e5                	mov    %esp,%ebp
    mm->mm_count = val;
c0103c9b:	8b 45 08             	mov    0x8(%ebp),%eax
c0103c9e:	8b 55 0c             	mov    0xc(%ebp),%edx
c0103ca1:	89 50 18             	mov    %edx,0x18(%eax)
}
c0103ca4:	90                   	nop
c0103ca5:	5d                   	pop    %ebp
c0103ca6:	c3                   	ret    

c0103ca7 <pa2page>:
page2pa(struct Page *page) {
    return page2ppn(page) << PGSHIFT;
}

static inline struct Page *
pa2page(uintptr_t pa) {
c0103ca7:	55                   	push   %ebp
c0103ca8:	89 e5                	mov    %esp,%ebp
c0103caa:	83 ec 08             	sub    $0x8,%esp
    if (PPN(pa) >= npage) {
c0103cad:	8b 45 08             	mov    0x8(%ebp),%eax
c0103cb0:	c1 e8 0c             	shr    $0xc,%eax
c0103cb3:	89 c2                	mov    %eax,%edx
c0103cb5:	a1 80 ff 19 c0       	mov    0xc019ff80,%eax
c0103cba:	39 c2                	cmp    %eax,%edx
c0103cbc:	72 14                	jb     c0103cd2 <pa2page+0x2b>
        panic("pa2page called with invalid pa");
c0103cbe:	83 ec 04             	sub    $0x4,%esp
c0103cc1:	68 8c c6 10 c0       	push   $0xc010c68c
c0103cc6:	6a 5e                	push   $0x5e
c0103cc8:	68 ab c6 10 c0       	push   $0xc010c6ab
c0103ccd:	e8 26 c7 ff ff       	call   c01003f8 <__panic>
    }
    return &pages[PPN(pa)];
c0103cd2:	a1 98 21 1a c0       	mov    0xc01a2198,%eax
c0103cd7:	8b 55 08             	mov    0x8(%ebp),%edx
c0103cda:	c1 ea 0c             	shr    $0xc,%edx
c0103cdd:	c1 e2 05             	shl    $0x5,%edx
c0103ce0:	01 d0                	add    %edx,%eax
}
c0103ce2:	c9                   	leave  
c0103ce3:	c3                   	ret    

c0103ce4 <pde2page>:
    }
    return pa2page(PTE_ADDR(pte));
}

static inline struct Page *
pde2page(pde_t pde) {
c0103ce4:	55                   	push   %ebp
c0103ce5:	89 e5                	mov    %esp,%ebp
c0103ce7:	83 ec 08             	sub    $0x8,%esp
    return pa2page(PDE_ADDR(pde));
c0103cea:	8b 45 08             	mov    0x8(%ebp),%eax
c0103ced:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0103cf2:	83 ec 0c             	sub    $0xc,%esp
c0103cf5:	50                   	push   %eax
c0103cf6:	e8 ac ff ff ff       	call   c0103ca7 <pa2page>
c0103cfb:	83 c4 10             	add    $0x10,%esp
}
c0103cfe:	c9                   	leave  
c0103cff:	c3                   	ret    

c0103d00 <mm_create>:
static void check_vma_struct(void);
static void check_pgfault(void);

// mm_create -  alloc a mm_struct & initialize it.
struct mm_struct *
mm_create(void) {
c0103d00:	55                   	push   %ebp
c0103d01:	89 e5                	mov    %esp,%ebp
c0103d03:	83 ec 18             	sub    $0x18,%esp
    struct mm_struct *mm = kmalloc(sizeof(struct mm_struct));
c0103d06:	83 ec 0c             	sub    $0xc,%esp
c0103d09:	6a 20                	push   $0x20
c0103d0b:	e8 16 1b 00 00       	call   c0105826 <kmalloc>
c0103d10:	83 c4 10             	add    $0x10,%esp
c0103d13:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (mm != NULL) {
c0103d16:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0103d1a:	74 7d                	je     c0103d99 <mm_create+0x99>
        list_init(&(mm->mmap_list));
c0103d1c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103d1f:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0103d22:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103d25:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0103d28:	89 50 04             	mov    %edx,0x4(%eax)
c0103d2b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103d2e:	8b 50 04             	mov    0x4(%eax),%edx
c0103d31:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103d34:	89 10                	mov    %edx,(%eax)
        mm->mmap_cache = NULL;
c0103d36:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103d39:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        mm->pgdir = NULL;
c0103d40:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103d43:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        mm->map_count = 0;
c0103d4a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103d4d:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)

        if (swap_init_ok) swap_init_mm(mm);
c0103d54:	a1 6c ff 19 c0       	mov    0xc019ff6c,%eax
c0103d59:	85 c0                	test   %eax,%eax
c0103d5b:	74 10                	je     c0103d6d <mm_create+0x6d>
c0103d5d:	83 ec 0c             	sub    $0xc,%esp
c0103d60:	ff 75 f4             	pushl  -0xc(%ebp)
c0103d63:	e8 3a 1d 00 00       	call   c0105aa2 <swap_init_mm>
c0103d68:	83 c4 10             	add    $0x10,%esp
c0103d6b:	eb 0a                	jmp    c0103d77 <mm_create+0x77>
        else mm->sm_priv = NULL;
c0103d6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103d70:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
        
        set_mm_count(mm, 0);
c0103d77:	83 ec 08             	sub    $0x8,%esp
c0103d7a:	6a 00                	push   $0x0
c0103d7c:	ff 75 f4             	pushl  -0xc(%ebp)
c0103d7f:	e8 14 ff ff ff       	call   c0103c98 <set_mm_count>
c0103d84:	83 c4 10             	add    $0x10,%esp
        lock_init(&(mm->mm_lock));
c0103d87:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103d8a:	83 c0 1c             	add    $0x1c,%eax
c0103d8d:	83 ec 0c             	sub    $0xc,%esp
c0103d90:	50                   	push   %eax
c0103d91:	e8 e8 fe ff ff       	call   c0103c7e <lock_init>
c0103d96:	83 c4 10             	add    $0x10,%esp
    }    
    return mm;
c0103d99:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0103d9c:	c9                   	leave  
c0103d9d:	c3                   	ret    

c0103d9e <vma_create>:

// vma_create - alloc a vma_struct & initialize it. (addr range: vm_start~vm_end)
struct vma_struct *
vma_create(uintptr_t vm_start, uintptr_t vm_end, uint32_t vm_flags) {
c0103d9e:	55                   	push   %ebp
c0103d9f:	89 e5                	mov    %esp,%ebp
c0103da1:	83 ec 18             	sub    $0x18,%esp
    struct vma_struct *vma = kmalloc(sizeof(struct vma_struct));
c0103da4:	83 ec 0c             	sub    $0xc,%esp
c0103da7:	6a 18                	push   $0x18
c0103da9:	e8 78 1a 00 00       	call   c0105826 <kmalloc>
c0103dae:	83 c4 10             	add    $0x10,%esp
c0103db1:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (vma != NULL) {
c0103db4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0103db8:	74 1b                	je     c0103dd5 <vma_create+0x37>
        vma->vm_start = vm_start;
c0103dba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103dbd:	8b 55 08             	mov    0x8(%ebp),%edx
c0103dc0:	89 50 04             	mov    %edx,0x4(%eax)
        vma->vm_end = vm_end;
c0103dc3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103dc6:	8b 55 0c             	mov    0xc(%ebp),%edx
c0103dc9:	89 50 08             	mov    %edx,0x8(%eax)
        vma->vm_flags = vm_flags;
c0103dcc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103dcf:	8b 55 10             	mov    0x10(%ebp),%edx
c0103dd2:	89 50 0c             	mov    %edx,0xc(%eax)
    }
    return vma;
c0103dd5:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0103dd8:	c9                   	leave  
c0103dd9:	c3                   	ret    

c0103dda <find_vma>:


// find_vma - find a vma  (vma->vm_start <= addr <= vma_vm_end)
struct vma_struct *
find_vma(struct mm_struct *mm, uintptr_t addr) {
c0103dda:	55                   	push   %ebp
c0103ddb:	89 e5                	mov    %esp,%ebp
c0103ddd:	83 ec 20             	sub    $0x20,%esp
    struct vma_struct *vma = NULL;
c0103de0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    if (mm != NULL) {
c0103de7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0103deb:	0f 84 95 00 00 00    	je     c0103e86 <find_vma+0xac>
        vma = mm->mmap_cache;
c0103df1:	8b 45 08             	mov    0x8(%ebp),%eax
c0103df4:	8b 40 08             	mov    0x8(%eax),%eax
c0103df7:	89 45 fc             	mov    %eax,-0x4(%ebp)
        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
c0103dfa:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0103dfe:	74 16                	je     c0103e16 <find_vma+0x3c>
c0103e00:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103e03:	8b 40 04             	mov    0x4(%eax),%eax
c0103e06:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0103e09:	77 0b                	ja     c0103e16 <find_vma+0x3c>
c0103e0b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103e0e:	8b 40 08             	mov    0x8(%eax),%eax
c0103e11:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0103e14:	77 61                	ja     c0103e77 <find_vma+0x9d>
                bool found = 0;
c0103e16:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
                list_entry_t *list = &(mm->mmap_list), *le = list;
c0103e1d:	8b 45 08             	mov    0x8(%ebp),%eax
c0103e20:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103e23:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103e26:	89 45 f4             	mov    %eax,-0xc(%ebp)
                while ((le = list_next(le)) != list) {
c0103e29:	eb 28                	jmp    c0103e53 <find_vma+0x79>
                    vma = le2vma(le, list_link);
c0103e2b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103e2e:	83 e8 10             	sub    $0x10,%eax
c0103e31:	89 45 fc             	mov    %eax,-0x4(%ebp)
                    if (vma->vm_start<=addr && addr < vma->vm_end) {
c0103e34:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103e37:	8b 40 04             	mov    0x4(%eax),%eax
c0103e3a:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0103e3d:	77 14                	ja     c0103e53 <find_vma+0x79>
c0103e3f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103e42:	8b 40 08             	mov    0x8(%eax),%eax
c0103e45:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0103e48:	76 09                	jbe    c0103e53 <find_vma+0x79>
                        found = 1;
c0103e4a:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
                        break;
c0103e51:	eb 17                	jmp    c0103e6a <find_vma+0x90>
c0103e53:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103e56:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0103e59:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103e5c:	8b 40 04             	mov    0x4(%eax),%eax
    if (mm != NULL) {
        vma = mm->mmap_cache;
        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
                bool found = 0;
                list_entry_t *list = &(mm->mmap_list), *le = list;
                while ((le = list_next(le)) != list) {
c0103e5f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103e62:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103e65:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0103e68:	75 c1                	jne    c0103e2b <find_vma+0x51>
                    if (vma->vm_start<=addr && addr < vma->vm_end) {
                        found = 1;
                        break;
                    }
                }
                if (!found) {
c0103e6a:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
c0103e6e:	75 07                	jne    c0103e77 <find_vma+0x9d>
                    vma = NULL;
c0103e70:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
                }
        }
        if (vma != NULL) {
c0103e77:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0103e7b:	74 09                	je     c0103e86 <find_vma+0xac>
            mm->mmap_cache = vma;
c0103e7d:	8b 45 08             	mov    0x8(%ebp),%eax
c0103e80:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0103e83:	89 50 08             	mov    %edx,0x8(%eax)
        }
    }
    return vma;
c0103e86:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0103e89:	c9                   	leave  
c0103e8a:	c3                   	ret    

c0103e8b <check_vma_overlap>:


// check_vma_overlap - check if vma1 overlaps vma2 ?
static inline void
check_vma_overlap(struct vma_struct *prev, struct vma_struct *next) {
c0103e8b:	55                   	push   %ebp
c0103e8c:	89 e5                	mov    %esp,%ebp
c0103e8e:	83 ec 08             	sub    $0x8,%esp
    assert(prev->vm_start < prev->vm_end);
c0103e91:	8b 45 08             	mov    0x8(%ebp),%eax
c0103e94:	8b 50 04             	mov    0x4(%eax),%edx
c0103e97:	8b 45 08             	mov    0x8(%ebp),%eax
c0103e9a:	8b 40 08             	mov    0x8(%eax),%eax
c0103e9d:	39 c2                	cmp    %eax,%edx
c0103e9f:	72 16                	jb     c0103eb7 <check_vma_overlap+0x2c>
c0103ea1:	68 b9 c6 10 c0       	push   $0xc010c6b9
c0103ea6:	68 d7 c6 10 c0       	push   $0xc010c6d7
c0103eab:	6a 6b                	push   $0x6b
c0103ead:	68 ec c6 10 c0       	push   $0xc010c6ec
c0103eb2:	e8 41 c5 ff ff       	call   c01003f8 <__panic>
    assert(prev->vm_end <= next->vm_start);
c0103eb7:	8b 45 08             	mov    0x8(%ebp),%eax
c0103eba:	8b 50 08             	mov    0x8(%eax),%edx
c0103ebd:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103ec0:	8b 40 04             	mov    0x4(%eax),%eax
c0103ec3:	39 c2                	cmp    %eax,%edx
c0103ec5:	76 16                	jbe    c0103edd <check_vma_overlap+0x52>
c0103ec7:	68 fc c6 10 c0       	push   $0xc010c6fc
c0103ecc:	68 d7 c6 10 c0       	push   $0xc010c6d7
c0103ed1:	6a 6c                	push   $0x6c
c0103ed3:	68 ec c6 10 c0       	push   $0xc010c6ec
c0103ed8:	e8 1b c5 ff ff       	call   c01003f8 <__panic>
    assert(next->vm_start < next->vm_end);
c0103edd:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103ee0:	8b 50 04             	mov    0x4(%eax),%edx
c0103ee3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103ee6:	8b 40 08             	mov    0x8(%eax),%eax
c0103ee9:	39 c2                	cmp    %eax,%edx
c0103eeb:	72 16                	jb     c0103f03 <check_vma_overlap+0x78>
c0103eed:	68 1b c7 10 c0       	push   $0xc010c71b
c0103ef2:	68 d7 c6 10 c0       	push   $0xc010c6d7
c0103ef7:	6a 6d                	push   $0x6d
c0103ef9:	68 ec c6 10 c0       	push   $0xc010c6ec
c0103efe:	e8 f5 c4 ff ff       	call   c01003f8 <__panic>
}
c0103f03:	90                   	nop
c0103f04:	c9                   	leave  
c0103f05:	c3                   	ret    

c0103f06 <insert_vma_struct>:


// insert_vma_struct -insert vma in mm's list link
void
insert_vma_struct(struct mm_struct *mm, struct vma_struct *vma) {
c0103f06:	55                   	push   %ebp
c0103f07:	89 e5                	mov    %esp,%ebp
c0103f09:	83 ec 38             	sub    $0x38,%esp
    assert(vma->vm_start < vma->vm_end);
c0103f0c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103f0f:	8b 50 04             	mov    0x4(%eax),%edx
c0103f12:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103f15:	8b 40 08             	mov    0x8(%eax),%eax
c0103f18:	39 c2                	cmp    %eax,%edx
c0103f1a:	72 16                	jb     c0103f32 <insert_vma_struct+0x2c>
c0103f1c:	68 39 c7 10 c0       	push   $0xc010c739
c0103f21:	68 d7 c6 10 c0       	push   $0xc010c6d7
c0103f26:	6a 74                	push   $0x74
c0103f28:	68 ec c6 10 c0       	push   $0xc010c6ec
c0103f2d:	e8 c6 c4 ff ff       	call   c01003f8 <__panic>
    list_entry_t *list = &(mm->mmap_list);
c0103f32:	8b 45 08             	mov    0x8(%ebp),%eax
c0103f35:	89 45 ec             	mov    %eax,-0x14(%ebp)
    list_entry_t *le_prev = list, *le_next;
c0103f38:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103f3b:	89 45 f4             	mov    %eax,-0xc(%ebp)

        list_entry_t *le = list;
c0103f3e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103f41:	89 45 f0             	mov    %eax,-0x10(%ebp)
        while ((le = list_next(le)) != list) {
c0103f44:	eb 1f                	jmp    c0103f65 <insert_vma_struct+0x5f>
            struct vma_struct *mmap_prev = le2vma(le, list_link);
c0103f46:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103f49:	83 e8 10             	sub    $0x10,%eax
c0103f4c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            if (mmap_prev->vm_start > vma->vm_start) {
c0103f4f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103f52:	8b 50 04             	mov    0x4(%eax),%edx
c0103f55:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103f58:	8b 40 04             	mov    0x4(%eax),%eax
c0103f5b:	39 c2                	cmp    %eax,%edx
c0103f5d:	77 1f                	ja     c0103f7e <insert_vma_struct+0x78>
                break;
            }
            le_prev = le;
c0103f5f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103f62:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103f65:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103f68:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0103f6b:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0103f6e:	8b 40 04             	mov    0x4(%eax),%eax
    assert(vma->vm_start < vma->vm_end);
    list_entry_t *list = &(mm->mmap_list);
    list_entry_t *le_prev = list, *le_next;

        list_entry_t *le = list;
        while ((le = list_next(le)) != list) {
c0103f71:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103f74:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103f77:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0103f7a:	75 ca                	jne    c0103f46 <insert_vma_struct+0x40>
c0103f7c:	eb 01                	jmp    c0103f7f <insert_vma_struct+0x79>
            struct vma_struct *mmap_prev = le2vma(le, list_link);
            if (mmap_prev->vm_start > vma->vm_start) {
                break;
c0103f7e:	90                   	nop
c0103f7f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103f82:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0103f85:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103f88:	8b 40 04             	mov    0x4(%eax),%eax
            }
            le_prev = le;
        }

    le_next = list_next(le_prev);
c0103f8b:	89 45 dc             	mov    %eax,-0x24(%ebp)

    /* check overlap */
    if (le_prev != list) {
c0103f8e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103f91:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0103f94:	74 15                	je     c0103fab <insert_vma_struct+0xa5>
        check_vma_overlap(le2vma(le_prev, list_link), vma);
c0103f96:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103f99:	83 e8 10             	sub    $0x10,%eax
c0103f9c:	83 ec 08             	sub    $0x8,%esp
c0103f9f:	ff 75 0c             	pushl  0xc(%ebp)
c0103fa2:	50                   	push   %eax
c0103fa3:	e8 e3 fe ff ff       	call   c0103e8b <check_vma_overlap>
c0103fa8:	83 c4 10             	add    $0x10,%esp
    }
    if (le_next != list) {
c0103fab:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103fae:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0103fb1:	74 15                	je     c0103fc8 <insert_vma_struct+0xc2>
        check_vma_overlap(vma, le2vma(le_next, list_link));
c0103fb3:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103fb6:	83 e8 10             	sub    $0x10,%eax
c0103fb9:	83 ec 08             	sub    $0x8,%esp
c0103fbc:	50                   	push   %eax
c0103fbd:	ff 75 0c             	pushl  0xc(%ebp)
c0103fc0:	e8 c6 fe ff ff       	call   c0103e8b <check_vma_overlap>
c0103fc5:	83 c4 10             	add    $0x10,%esp
    }

    vma->vm_mm = mm;
c0103fc8:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103fcb:	8b 55 08             	mov    0x8(%ebp),%edx
c0103fce:	89 10                	mov    %edx,(%eax)
    list_add_after(le_prev, &(vma->list_link));
c0103fd0:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103fd3:	8d 50 10             	lea    0x10(%eax),%edx
c0103fd6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103fd9:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0103fdc:	89 55 d4             	mov    %edx,-0x2c(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0103fdf:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103fe2:	8b 40 04             	mov    0x4(%eax),%eax
c0103fe5:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0103fe8:	89 55 d0             	mov    %edx,-0x30(%ebp)
c0103feb:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0103fee:	89 55 cc             	mov    %edx,-0x34(%ebp)
c0103ff1:	89 45 c8             	mov    %eax,-0x38(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0103ff4:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0103ff7:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0103ffa:	89 10                	mov    %edx,(%eax)
c0103ffc:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0103fff:	8b 10                	mov    (%eax),%edx
c0104001:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0104004:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0104007:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010400a:	8b 55 c8             	mov    -0x38(%ebp),%edx
c010400d:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0104010:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0104013:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0104016:	89 10                	mov    %edx,(%eax)

    mm->map_count ++;
c0104018:	8b 45 08             	mov    0x8(%ebp),%eax
c010401b:	8b 40 10             	mov    0x10(%eax),%eax
c010401e:	8d 50 01             	lea    0x1(%eax),%edx
c0104021:	8b 45 08             	mov    0x8(%ebp),%eax
c0104024:	89 50 10             	mov    %edx,0x10(%eax)
}
c0104027:	90                   	nop
c0104028:	c9                   	leave  
c0104029:	c3                   	ret    

c010402a <mm_destroy>:

// mm_destroy - free mm and mm internal fields
void
mm_destroy(struct mm_struct *mm) {
c010402a:	55                   	push   %ebp
c010402b:	89 e5                	mov    %esp,%ebp
c010402d:	83 ec 28             	sub    $0x28,%esp
    assert(mm_count(mm) == 0);
c0104030:	ff 75 08             	pushl  0x8(%ebp)
c0104033:	e8 55 fc ff ff       	call   c0103c8d <mm_count>
c0104038:	83 c4 04             	add    $0x4,%esp
c010403b:	85 c0                	test   %eax,%eax
c010403d:	74 19                	je     c0104058 <mm_destroy+0x2e>
c010403f:	68 55 c7 10 c0       	push   $0xc010c755
c0104044:	68 d7 c6 10 c0       	push   $0xc010c6d7
c0104049:	68 94 00 00 00       	push   $0x94
c010404e:	68 ec c6 10 c0       	push   $0xc010c6ec
c0104053:	e8 a0 c3 ff ff       	call   c01003f8 <__panic>

    list_entry_t *list = &(mm->mmap_list), *le;
c0104058:	8b 45 08             	mov    0x8(%ebp),%eax
c010405b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(list)) != list) {
c010405e:	eb 3a                	jmp    c010409a <mm_destroy+0x70>
c0104060:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104063:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0104066:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104069:	8b 40 04             	mov    0x4(%eax),%eax
c010406c:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010406f:	8b 12                	mov    (%edx),%edx
c0104071:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0104074:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0104077:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010407a:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010407d:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0104080:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104083:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0104086:	89 10                	mov    %edx,(%eax)
        list_del(le);
        kfree(le2vma(le, list_link));  //kfree vma        
c0104088:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010408b:	83 e8 10             	sub    $0x10,%eax
c010408e:	83 ec 0c             	sub    $0xc,%esp
c0104091:	50                   	push   %eax
c0104092:	e8 a7 17 00 00       	call   c010583e <kfree>
c0104097:	83 c4 10             	add    $0x10,%esp
c010409a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010409d:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01040a0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01040a3:	8b 40 04             	mov    0x4(%eax),%eax
void
mm_destroy(struct mm_struct *mm) {
    assert(mm_count(mm) == 0);

    list_entry_t *list = &(mm->mmap_list), *le;
    while ((le = list_next(list)) != list) {
c01040a6:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01040a9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01040ac:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01040af:	75 af                	jne    c0104060 <mm_destroy+0x36>
        list_del(le);
        kfree(le2vma(le, list_link));  //kfree vma        
    }
    kfree(mm); //kfree mm
c01040b1:	83 ec 0c             	sub    $0xc,%esp
c01040b4:	ff 75 08             	pushl  0x8(%ebp)
c01040b7:	e8 82 17 00 00       	call   c010583e <kfree>
c01040bc:	83 c4 10             	add    $0x10,%esp
    mm=NULL;
c01040bf:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
}
c01040c6:	90                   	nop
c01040c7:	c9                   	leave  
c01040c8:	c3                   	ret    

c01040c9 <mm_map>:

int
mm_map(struct mm_struct *mm, uintptr_t addr, size_t len, uint32_t vm_flags,
       struct vma_struct **vma_store) {
c01040c9:	55                   	push   %ebp
c01040ca:	89 e5                	mov    %esp,%ebp
c01040cc:	83 ec 28             	sub    $0x28,%esp
    uintptr_t start = ROUNDDOWN(addr, PGSIZE), end = ROUNDUP(addr + len, PGSIZE);
c01040cf:	8b 45 0c             	mov    0xc(%ebp),%eax
c01040d2:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01040d5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01040d8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01040dd:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01040e0:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
c01040e7:	8b 55 0c             	mov    0xc(%ebp),%edx
c01040ea:	8b 45 10             	mov    0x10(%ebp),%eax
c01040ed:	01 c2                	add    %eax,%edx
c01040ef:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01040f2:	01 d0                	add    %edx,%eax
c01040f4:	83 e8 01             	sub    $0x1,%eax
c01040f7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01040fa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01040fd:	ba 00 00 00 00       	mov    $0x0,%edx
c0104102:	f7 75 e8             	divl   -0x18(%ebp)
c0104105:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104108:	29 d0                	sub    %edx,%eax
c010410a:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if (!USER_ACCESS(start, end)) {
c010410d:	81 7d ec ff ff 1f 00 	cmpl   $0x1fffff,-0x14(%ebp)
c0104114:	76 11                	jbe    c0104127 <mm_map+0x5e>
c0104116:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104119:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c010411c:	73 09                	jae    c0104127 <mm_map+0x5e>
c010411e:	81 7d e0 00 00 00 b0 	cmpl   $0xb0000000,-0x20(%ebp)
c0104125:	76 0a                	jbe    c0104131 <mm_map+0x68>
        return -E_INVAL;
c0104127:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010412c:	e9 9e 00 00 00       	jmp    c01041cf <mm_map+0x106>
    }

    assert(mm != NULL);
c0104131:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104135:	75 19                	jne    c0104150 <mm_map+0x87>
c0104137:	68 67 c7 10 c0       	push   $0xc010c767
c010413c:	68 d7 c6 10 c0       	push   $0xc010c6d7
c0104141:	68 a7 00 00 00       	push   $0xa7
c0104146:	68 ec c6 10 c0       	push   $0xc010c6ec
c010414b:	e8 a8 c2 ff ff       	call   c01003f8 <__panic>

    int ret = -E_INVAL;
c0104150:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)

    struct vma_struct *vma;
    if ((vma = find_vma(mm, start)) != NULL && end > vma->vm_start) {
c0104157:	83 ec 08             	sub    $0x8,%esp
c010415a:	ff 75 ec             	pushl  -0x14(%ebp)
c010415d:	ff 75 08             	pushl  0x8(%ebp)
c0104160:	e8 75 fc ff ff       	call   c0103dda <find_vma>
c0104165:	83 c4 10             	add    $0x10,%esp
c0104168:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010416b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010416f:	74 0b                	je     c010417c <mm_map+0xb3>
c0104171:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104174:	8b 40 04             	mov    0x4(%eax),%eax
c0104177:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c010417a:	72 4c                	jb     c01041c8 <mm_map+0xff>
        goto out;
    }
    ret = -E_NO_MEM;
c010417c:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    if ((vma = vma_create(start, end, vm_flags)) == NULL) {
c0104183:	83 ec 04             	sub    $0x4,%esp
c0104186:	ff 75 14             	pushl  0x14(%ebp)
c0104189:	ff 75 e0             	pushl  -0x20(%ebp)
c010418c:	ff 75 ec             	pushl  -0x14(%ebp)
c010418f:	e8 0a fc ff ff       	call   c0103d9e <vma_create>
c0104194:	83 c4 10             	add    $0x10,%esp
c0104197:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010419a:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010419e:	74 2b                	je     c01041cb <mm_map+0x102>
        goto out;
    }
    insert_vma_struct(mm, vma);
c01041a0:	83 ec 08             	sub    $0x8,%esp
c01041a3:	ff 75 dc             	pushl  -0x24(%ebp)
c01041a6:	ff 75 08             	pushl  0x8(%ebp)
c01041a9:	e8 58 fd ff ff       	call   c0103f06 <insert_vma_struct>
c01041ae:	83 c4 10             	add    $0x10,%esp
    if (vma_store != NULL) {
c01041b1:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c01041b5:	74 08                	je     c01041bf <mm_map+0xf6>
        *vma_store = vma;
c01041b7:	8b 45 18             	mov    0x18(%ebp),%eax
c01041ba:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01041bd:	89 10                	mov    %edx,(%eax)
    }
    ret = 0;
c01041bf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01041c6:	eb 04                	jmp    c01041cc <mm_map+0x103>

    int ret = -E_INVAL;

    struct vma_struct *vma;
    if ((vma = find_vma(mm, start)) != NULL && end > vma->vm_start) {
        goto out;
c01041c8:	90                   	nop
c01041c9:	eb 01                	jmp    c01041cc <mm_map+0x103>
    }
    ret = -E_NO_MEM;

    if ((vma = vma_create(start, end, vm_flags)) == NULL) {
        goto out;
c01041cb:	90                   	nop
        *vma_store = vma;
    }
    ret = 0;

out:
    return ret;
c01041cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01041cf:	c9                   	leave  
c01041d0:	c3                   	ret    

c01041d1 <dup_mmap>:

int
dup_mmap(struct mm_struct *to, struct mm_struct *from) {
c01041d1:	55                   	push   %ebp
c01041d2:	89 e5                	mov    %esp,%ebp
c01041d4:	53                   	push   %ebx
c01041d5:	83 ec 24             	sub    $0x24,%esp
    assert(to != NULL && from != NULL);
c01041d8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01041dc:	74 06                	je     c01041e4 <dup_mmap+0x13>
c01041de:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01041e2:	75 19                	jne    c01041fd <dup_mmap+0x2c>
c01041e4:	68 72 c7 10 c0       	push   $0xc010c772
c01041e9:	68 d7 c6 10 c0       	push   $0xc010c6d7
c01041ee:	68 c0 00 00 00       	push   $0xc0
c01041f3:	68 ec c6 10 c0       	push   $0xc010c6ec
c01041f8:	e8 fb c1 ff ff       	call   c01003f8 <__panic>
    list_entry_t *list = &(from->mmap_list), *le = list;
c01041fd:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104200:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104203:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104206:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_prev(le)) != list) {
c0104209:	e9 86 00 00 00       	jmp    c0104294 <dup_mmap+0xc3>
        struct vma_struct *vma, *nvma;
        vma = le2vma(le, list_link);
c010420e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104211:	83 e8 10             	sub    $0x10,%eax
c0104214:	89 45 ec             	mov    %eax,-0x14(%ebp)
        nvma = vma_create(vma->vm_start, vma->vm_end, vma->vm_flags);
c0104217:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010421a:	8b 48 0c             	mov    0xc(%eax),%ecx
c010421d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104220:	8b 50 08             	mov    0x8(%eax),%edx
c0104223:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104226:	8b 40 04             	mov    0x4(%eax),%eax
c0104229:	83 ec 04             	sub    $0x4,%esp
c010422c:	51                   	push   %ecx
c010422d:	52                   	push   %edx
c010422e:	50                   	push   %eax
c010422f:	e8 6a fb ff ff       	call   c0103d9e <vma_create>
c0104234:	83 c4 10             	add    $0x10,%esp
c0104237:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (nvma == NULL) {
c010423a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010423e:	75 07                	jne    c0104247 <dup_mmap+0x76>
            return -E_NO_MEM;
c0104240:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0104245:	eb 6c                	jmp    c01042b3 <dup_mmap+0xe2>
        }

        insert_vma_struct(to, nvma);
c0104247:	83 ec 08             	sub    $0x8,%esp
c010424a:	ff 75 e8             	pushl  -0x18(%ebp)
c010424d:	ff 75 08             	pushl  0x8(%ebp)
c0104250:	e8 b1 fc ff ff       	call   c0103f06 <insert_vma_struct>
c0104255:	83 c4 10             	add    $0x10,%esp

        bool share = 0;
c0104258:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
c010425f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104262:	8b 58 08             	mov    0x8(%eax),%ebx
c0104265:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104268:	8b 48 04             	mov    0x4(%eax),%ecx
c010426b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010426e:	8b 50 0c             	mov    0xc(%eax),%edx
c0104271:	8b 45 08             	mov    0x8(%ebp),%eax
c0104274:	8b 40 0c             	mov    0xc(%eax),%eax
c0104277:	83 ec 0c             	sub    $0xc,%esp
c010427a:	ff 75 e4             	pushl  -0x1c(%ebp)
c010427d:	53                   	push   %ebx
c010427e:	51                   	push   %ecx
c010427f:	52                   	push   %edx
c0104280:	50                   	push   %eax
c0104281:	e8 06 3f 00 00       	call   c010818c <copy_range>
c0104286:	83 c4 20             	add    $0x20,%esp
c0104289:	85 c0                	test   %eax,%eax
c010428b:	74 07                	je     c0104294 <dup_mmap+0xc3>
            return -E_NO_MEM;
c010428d:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0104292:	eb 1f                	jmp    c01042b3 <dup_mmap+0xe2>
c0104294:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104297:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c010429a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010429d:	8b 00                	mov    (%eax),%eax

int
dup_mmap(struct mm_struct *to, struct mm_struct *from) {
    assert(to != NULL && from != NULL);
    list_entry_t *list = &(from->mmap_list), *le = list;
    while ((le = list_prev(le)) != list) {
c010429f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01042a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01042a5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01042a8:	0f 85 60 ff ff ff    	jne    c010420e <dup_mmap+0x3d>
        bool share = 0;
        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
            return -E_NO_MEM;
        }
    }
    return 0;
c01042ae:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01042b3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c01042b6:	c9                   	leave  
c01042b7:	c3                   	ret    

c01042b8 <exit_mmap>:

void
exit_mmap(struct mm_struct *mm) {
c01042b8:	55                   	push   %ebp
c01042b9:	89 e5                	mov    %esp,%ebp
c01042bb:	83 ec 28             	sub    $0x28,%esp
    assert(mm != NULL && mm_count(mm) == 0);
c01042be:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01042c2:	74 0f                	je     c01042d3 <exit_mmap+0x1b>
c01042c4:	ff 75 08             	pushl  0x8(%ebp)
c01042c7:	e8 c1 f9 ff ff       	call   c0103c8d <mm_count>
c01042cc:	83 c4 04             	add    $0x4,%esp
c01042cf:	85 c0                	test   %eax,%eax
c01042d1:	74 19                	je     c01042ec <exit_mmap+0x34>
c01042d3:	68 90 c7 10 c0       	push   $0xc010c790
c01042d8:	68 d7 c6 10 c0       	push   $0xc010c6d7
c01042dd:	68 d6 00 00 00       	push   $0xd6
c01042e2:	68 ec c6 10 c0       	push   $0xc010c6ec
c01042e7:	e8 0c c1 ff ff       	call   c01003f8 <__panic>
    pde_t *pgdir = mm->pgdir;
c01042ec:	8b 45 08             	mov    0x8(%ebp),%eax
c01042ef:	8b 40 0c             	mov    0xc(%eax),%eax
c01042f2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    list_entry_t *list = &(mm->mmap_list), *le = list;
c01042f5:	8b 45 08             	mov    0x8(%ebp),%eax
c01042f8:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01042fb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01042fe:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c0104301:	eb 25                	jmp    c0104328 <exit_mmap+0x70>
        struct vma_struct *vma = le2vma(le, list_link);
c0104303:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104306:	83 e8 10             	sub    $0x10,%eax
c0104309:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
c010430c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010430f:	8b 50 08             	mov    0x8(%eax),%edx
c0104312:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104315:	8b 40 04             	mov    0x4(%eax),%eax
c0104318:	83 ec 04             	sub    $0x4,%esp
c010431b:	52                   	push   %edx
c010431c:	50                   	push   %eax
c010431d:	ff 75 f0             	pushl  -0x10(%ebp)
c0104320:	e8 a0 3c 00 00       	call   c0107fc5 <unmap_range>
c0104325:	83 c4 10             	add    $0x10,%esp
c0104328:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010432b:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010432e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104331:	8b 40 04             	mov    0x4(%eax),%eax
void
exit_mmap(struct mm_struct *mm) {
    assert(mm != NULL && mm_count(mm) == 0);
    pde_t *pgdir = mm->pgdir;
    list_entry_t *list = &(mm->mmap_list), *le = list;
    while ((le = list_next(le)) != list) {
c0104334:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104337:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010433a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010433d:	75 c4                	jne    c0104303 <exit_mmap+0x4b>
        struct vma_struct *vma = le2vma(le, list_link);
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
    }
    while ((le = list_next(le)) != list) {
c010433f:	eb 25                	jmp    c0104366 <exit_mmap+0xae>
        struct vma_struct *vma = le2vma(le, list_link);
c0104341:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104344:	83 e8 10             	sub    $0x10,%eax
c0104347:	89 45 e0             	mov    %eax,-0x20(%ebp)
        exit_range(pgdir, vma->vm_start, vma->vm_end);
c010434a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010434d:	8b 50 08             	mov    0x8(%eax),%edx
c0104350:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104353:	8b 40 04             	mov    0x4(%eax),%eax
c0104356:	83 ec 04             	sub    $0x4,%esp
c0104359:	52                   	push   %edx
c010435a:	50                   	push   %eax
c010435b:	ff 75 f0             	pushl  -0x10(%ebp)
c010435e:	e8 35 3d 00 00       	call   c0108098 <exit_range>
c0104363:	83 c4 10             	add    $0x10,%esp
c0104366:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104369:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010436c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010436f:	8b 40 04             	mov    0x4(%eax),%eax
    list_entry_t *list = &(mm->mmap_list), *le = list;
    while ((le = list_next(le)) != list) {
        struct vma_struct *vma = le2vma(le, list_link);
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
    }
    while ((le = list_next(le)) != list) {
c0104372:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104375:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104378:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010437b:	75 c4                	jne    c0104341 <exit_mmap+0x89>
        struct vma_struct *vma = le2vma(le, list_link);
        exit_range(pgdir, vma->vm_start, vma->vm_end);
    }
}
c010437d:	90                   	nop
c010437e:	c9                   	leave  
c010437f:	c3                   	ret    

c0104380 <copy_from_user>:

bool
copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable) {
c0104380:	55                   	push   %ebp
c0104381:	89 e5                	mov    %esp,%ebp
c0104383:	83 ec 08             	sub    $0x8,%esp
    if (!user_mem_check(mm, (uintptr_t)src, len, writable)) {
c0104386:	8b 45 10             	mov    0x10(%ebp),%eax
c0104389:	ff 75 18             	pushl  0x18(%ebp)
c010438c:	ff 75 14             	pushl  0x14(%ebp)
c010438f:	50                   	push   %eax
c0104390:	ff 75 08             	pushl  0x8(%ebp)
c0104393:	e8 b1 08 00 00       	call   c0104c49 <user_mem_check>
c0104398:	83 c4 10             	add    $0x10,%esp
c010439b:	85 c0                	test   %eax,%eax
c010439d:	75 07                	jne    c01043a6 <copy_from_user+0x26>
        return 0;
c010439f:	b8 00 00 00 00       	mov    $0x0,%eax
c01043a4:	eb 19                	jmp    c01043bf <copy_from_user+0x3f>
    }
    memcpy(dst, src, len);
c01043a6:	83 ec 04             	sub    $0x4,%esp
c01043a9:	ff 75 14             	pushl  0x14(%ebp)
c01043ac:	ff 75 10             	pushl  0x10(%ebp)
c01043af:	ff 75 0c             	pushl  0xc(%ebp)
c01043b2:	e8 53 6f 00 00       	call   c010b30a <memcpy>
c01043b7:	83 c4 10             	add    $0x10,%esp
    return 1;
c01043ba:	b8 01 00 00 00       	mov    $0x1,%eax
}
c01043bf:	c9                   	leave  
c01043c0:	c3                   	ret    

c01043c1 <copy_to_user>:

bool
copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len) {
c01043c1:	55                   	push   %ebp
c01043c2:	89 e5                	mov    %esp,%ebp
c01043c4:	83 ec 08             	sub    $0x8,%esp
    if (!user_mem_check(mm, (uintptr_t)dst, len, 1)) {
c01043c7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01043ca:	6a 01                	push   $0x1
c01043cc:	ff 75 14             	pushl  0x14(%ebp)
c01043cf:	50                   	push   %eax
c01043d0:	ff 75 08             	pushl  0x8(%ebp)
c01043d3:	e8 71 08 00 00       	call   c0104c49 <user_mem_check>
c01043d8:	83 c4 10             	add    $0x10,%esp
c01043db:	85 c0                	test   %eax,%eax
c01043dd:	75 07                	jne    c01043e6 <copy_to_user+0x25>
        return 0;
c01043df:	b8 00 00 00 00       	mov    $0x0,%eax
c01043e4:	eb 19                	jmp    c01043ff <copy_to_user+0x3e>
    }
    memcpy(dst, src, len);
c01043e6:	83 ec 04             	sub    $0x4,%esp
c01043e9:	ff 75 14             	pushl  0x14(%ebp)
c01043ec:	ff 75 10             	pushl  0x10(%ebp)
c01043ef:	ff 75 0c             	pushl  0xc(%ebp)
c01043f2:	e8 13 6f 00 00       	call   c010b30a <memcpy>
c01043f7:	83 c4 10             	add    $0x10,%esp
    return 1;
c01043fa:	b8 01 00 00 00       	mov    $0x1,%eax
}
c01043ff:	c9                   	leave  
c0104400:	c3                   	ret    

c0104401 <vmm_init>:

// vmm_init - initialize virtual memory management
//          - now just call check_vmm to check correctness of vmm
void
vmm_init(void) {
c0104401:	55                   	push   %ebp
c0104402:	89 e5                	mov    %esp,%ebp
c0104404:	83 ec 08             	sub    $0x8,%esp
    check_vmm();
c0104407:	e8 03 00 00 00       	call   c010440f <check_vmm>
}
c010440c:	90                   	nop
c010440d:	c9                   	leave  
c010440e:	c3                   	ret    

c010440f <check_vmm>:

// check_vmm - check correctness of vmm
static void
check_vmm(void) {
c010440f:	55                   	push   %ebp
c0104410:	89 e5                	mov    %esp,%ebp
c0104412:	83 ec 18             	sub    $0x18,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0104415:	e8 da 33 00 00       	call   c01077f4 <nr_free_pages>
c010441a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    check_vma_struct();
c010441d:	e8 18 00 00 00       	call   c010443a <check_vma_struct>
    check_pgfault();
c0104422:	e8 10 04 00 00       	call   c0104837 <check_pgfault>

    cprintf("check_vmm() succeeded.\n");
c0104427:	83 ec 0c             	sub    $0xc,%esp
c010442a:	68 b0 c7 10 c0       	push   $0xc010c7b0
c010442f:	e8 5e be ff ff       	call   c0100292 <cprintf>
c0104434:	83 c4 10             	add    $0x10,%esp
}
c0104437:	90                   	nop
c0104438:	c9                   	leave  
c0104439:	c3                   	ret    

c010443a <check_vma_struct>:

static void
check_vma_struct(void) {
c010443a:	55                   	push   %ebp
c010443b:	89 e5                	mov    %esp,%ebp
c010443d:	83 ec 58             	sub    $0x58,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0104440:	e8 af 33 00 00       	call   c01077f4 <nr_free_pages>
c0104445:	89 45 ec             	mov    %eax,-0x14(%ebp)

    struct mm_struct *mm = mm_create();
c0104448:	e8 b3 f8 ff ff       	call   c0103d00 <mm_create>
c010444d:	89 45 e8             	mov    %eax,-0x18(%ebp)
    assert(mm != NULL);
c0104450:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0104454:	75 19                	jne    c010446f <check_vma_struct+0x35>
c0104456:	68 67 c7 10 c0       	push   $0xc010c767
c010445b:	68 d7 c6 10 c0       	push   $0xc010c6d7
c0104460:	68 0c 01 00 00       	push   $0x10c
c0104465:	68 ec c6 10 c0       	push   $0xc010c6ec
c010446a:	e8 89 bf ff ff       	call   c01003f8 <__panic>

    int step1 = 10, step2 = step1 * 10;
c010446f:	c7 45 e4 0a 00 00 00 	movl   $0xa,-0x1c(%ebp)
c0104476:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0104479:	89 d0                	mov    %edx,%eax
c010447b:	c1 e0 02             	shl    $0x2,%eax
c010447e:	01 d0                	add    %edx,%eax
c0104480:	01 c0                	add    %eax,%eax
c0104482:	89 45 e0             	mov    %eax,-0x20(%ebp)

    int i;
    for (i = step1; i >= 1; i --) {
c0104485:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104488:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010448b:	eb 5f                	jmp    c01044ec <check_vma_struct+0xb2>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c010448d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0104490:	89 d0                	mov    %edx,%eax
c0104492:	c1 e0 02             	shl    $0x2,%eax
c0104495:	01 d0                	add    %edx,%eax
c0104497:	83 c0 02             	add    $0x2,%eax
c010449a:	89 c1                	mov    %eax,%ecx
c010449c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010449f:	89 d0                	mov    %edx,%eax
c01044a1:	c1 e0 02             	shl    $0x2,%eax
c01044a4:	01 d0                	add    %edx,%eax
c01044a6:	83 ec 04             	sub    $0x4,%esp
c01044a9:	6a 00                	push   $0x0
c01044ab:	51                   	push   %ecx
c01044ac:	50                   	push   %eax
c01044ad:	e8 ec f8 ff ff       	call   c0103d9e <vma_create>
c01044b2:	83 c4 10             	add    $0x10,%esp
c01044b5:	89 45 dc             	mov    %eax,-0x24(%ebp)
        assert(vma != NULL);
c01044b8:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c01044bc:	75 19                	jne    c01044d7 <check_vma_struct+0x9d>
c01044be:	68 c8 c7 10 c0       	push   $0xc010c7c8
c01044c3:	68 d7 c6 10 c0       	push   $0xc010c6d7
c01044c8:	68 13 01 00 00       	push   $0x113
c01044cd:	68 ec c6 10 c0       	push   $0xc010c6ec
c01044d2:	e8 21 bf ff ff       	call   c01003f8 <__panic>
        insert_vma_struct(mm, vma);
c01044d7:	83 ec 08             	sub    $0x8,%esp
c01044da:	ff 75 dc             	pushl  -0x24(%ebp)
c01044dd:	ff 75 e8             	pushl  -0x18(%ebp)
c01044e0:	e8 21 fa ff ff       	call   c0103f06 <insert_vma_struct>
c01044e5:	83 c4 10             	add    $0x10,%esp
    assert(mm != NULL);

    int step1 = 10, step2 = step1 * 10;

    int i;
    for (i = step1; i >= 1; i --) {
c01044e8:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c01044ec:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01044f0:	7f 9b                	jg     c010448d <check_vma_struct+0x53>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    for (i = step1 + 1; i <= step2; i ++) {
c01044f2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01044f5:	83 c0 01             	add    $0x1,%eax
c01044f8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01044fb:	eb 5f                	jmp    c010455c <check_vma_struct+0x122>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c01044fd:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0104500:	89 d0                	mov    %edx,%eax
c0104502:	c1 e0 02             	shl    $0x2,%eax
c0104505:	01 d0                	add    %edx,%eax
c0104507:	83 c0 02             	add    $0x2,%eax
c010450a:	89 c1                	mov    %eax,%ecx
c010450c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010450f:	89 d0                	mov    %edx,%eax
c0104511:	c1 e0 02             	shl    $0x2,%eax
c0104514:	01 d0                	add    %edx,%eax
c0104516:	83 ec 04             	sub    $0x4,%esp
c0104519:	6a 00                	push   $0x0
c010451b:	51                   	push   %ecx
c010451c:	50                   	push   %eax
c010451d:	e8 7c f8 ff ff       	call   c0103d9e <vma_create>
c0104522:	83 c4 10             	add    $0x10,%esp
c0104525:	89 45 d8             	mov    %eax,-0x28(%ebp)
        assert(vma != NULL);
c0104528:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c010452c:	75 19                	jne    c0104547 <check_vma_struct+0x10d>
c010452e:	68 c8 c7 10 c0       	push   $0xc010c7c8
c0104533:	68 d7 c6 10 c0       	push   $0xc010c6d7
c0104538:	68 19 01 00 00       	push   $0x119
c010453d:	68 ec c6 10 c0       	push   $0xc010c6ec
c0104542:	e8 b1 be ff ff       	call   c01003f8 <__panic>
        insert_vma_struct(mm, vma);
c0104547:	83 ec 08             	sub    $0x8,%esp
c010454a:	ff 75 d8             	pushl  -0x28(%ebp)
c010454d:	ff 75 e8             	pushl  -0x18(%ebp)
c0104550:	e8 b1 f9 ff ff       	call   c0103f06 <insert_vma_struct>
c0104555:	83 c4 10             	add    $0x10,%esp
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    for (i = step1 + 1; i <= step2; i ++) {
c0104558:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010455c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010455f:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0104562:	7e 99                	jle    c01044fd <check_vma_struct+0xc3>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    list_entry_t *le = list_next(&(mm->mmap_list));
c0104564:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104567:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c010456a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010456d:	8b 40 04             	mov    0x4(%eax),%eax
c0104570:	89 45 f0             	mov    %eax,-0x10(%ebp)

    for (i = 1; i <= step2; i ++) {
c0104573:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
c010457a:	e9 81 00 00 00       	jmp    c0104600 <check_vma_struct+0x1c6>
        assert(le != &(mm->mmap_list));
c010457f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104582:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104585:	75 19                	jne    c01045a0 <check_vma_struct+0x166>
c0104587:	68 d4 c7 10 c0       	push   $0xc010c7d4
c010458c:	68 d7 c6 10 c0       	push   $0xc010c6d7
c0104591:	68 20 01 00 00       	push   $0x120
c0104596:	68 ec c6 10 c0       	push   $0xc010c6ec
c010459b:	e8 58 be ff ff       	call   c01003f8 <__panic>
        struct vma_struct *mmap = le2vma(le, list_link);
c01045a0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01045a3:	83 e8 10             	sub    $0x10,%eax
c01045a6:	89 45 d0             	mov    %eax,-0x30(%ebp)
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
c01045a9:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01045ac:	8b 48 04             	mov    0x4(%eax),%ecx
c01045af:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01045b2:	89 d0                	mov    %edx,%eax
c01045b4:	c1 e0 02             	shl    $0x2,%eax
c01045b7:	01 d0                	add    %edx,%eax
c01045b9:	39 c1                	cmp    %eax,%ecx
c01045bb:	75 17                	jne    c01045d4 <check_vma_struct+0x19a>
c01045bd:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01045c0:	8b 48 08             	mov    0x8(%eax),%ecx
c01045c3:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01045c6:	89 d0                	mov    %edx,%eax
c01045c8:	c1 e0 02             	shl    $0x2,%eax
c01045cb:	01 d0                	add    %edx,%eax
c01045cd:	83 c0 02             	add    $0x2,%eax
c01045d0:	39 c1                	cmp    %eax,%ecx
c01045d2:	74 19                	je     c01045ed <check_vma_struct+0x1b3>
c01045d4:	68 ec c7 10 c0       	push   $0xc010c7ec
c01045d9:	68 d7 c6 10 c0       	push   $0xc010c6d7
c01045de:	68 22 01 00 00       	push   $0x122
c01045e3:	68 ec c6 10 c0       	push   $0xc010c6ec
c01045e8:	e8 0b be ff ff       	call   c01003f8 <__panic>
c01045ed:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01045f0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c01045f3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01045f6:	8b 40 04             	mov    0x4(%eax),%eax
        le = list_next(le);
c01045f9:	89 45 f0             	mov    %eax,-0x10(%ebp)
        insert_vma_struct(mm, vma);
    }

    list_entry_t *le = list_next(&(mm->mmap_list));

    for (i = 1; i <= step2; i ++) {
c01045fc:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0104600:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104603:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0104606:	0f 8e 73 ff ff ff    	jle    c010457f <check_vma_struct+0x145>
        struct vma_struct *mmap = le2vma(le, list_link);
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
        le = list_next(le);
    }

    for (i = 5; i <= 5 * step2; i +=5) {
c010460c:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
c0104613:	e9 80 01 00 00       	jmp    c0104798 <check_vma_struct+0x35e>
        struct vma_struct *vma1 = find_vma(mm, i);
c0104618:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010461b:	83 ec 08             	sub    $0x8,%esp
c010461e:	50                   	push   %eax
c010461f:	ff 75 e8             	pushl  -0x18(%ebp)
c0104622:	e8 b3 f7 ff ff       	call   c0103dda <find_vma>
c0104627:	83 c4 10             	add    $0x10,%esp
c010462a:	89 45 cc             	mov    %eax,-0x34(%ebp)
        assert(vma1 != NULL);
c010462d:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0104631:	75 19                	jne    c010464c <check_vma_struct+0x212>
c0104633:	68 21 c8 10 c0       	push   $0xc010c821
c0104638:	68 d7 c6 10 c0       	push   $0xc010c6d7
c010463d:	68 28 01 00 00       	push   $0x128
c0104642:	68 ec c6 10 c0       	push   $0xc010c6ec
c0104647:	e8 ac bd ff ff       	call   c01003f8 <__panic>
        struct vma_struct *vma2 = find_vma(mm, i+1);
c010464c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010464f:	83 c0 01             	add    $0x1,%eax
c0104652:	83 ec 08             	sub    $0x8,%esp
c0104655:	50                   	push   %eax
c0104656:	ff 75 e8             	pushl  -0x18(%ebp)
c0104659:	e8 7c f7 ff ff       	call   c0103dda <find_vma>
c010465e:	83 c4 10             	add    $0x10,%esp
c0104661:	89 45 c8             	mov    %eax,-0x38(%ebp)
        assert(vma2 != NULL);
c0104664:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c0104668:	75 19                	jne    c0104683 <check_vma_struct+0x249>
c010466a:	68 2e c8 10 c0       	push   $0xc010c82e
c010466f:	68 d7 c6 10 c0       	push   $0xc010c6d7
c0104674:	68 2a 01 00 00       	push   $0x12a
c0104679:	68 ec c6 10 c0       	push   $0xc010c6ec
c010467e:	e8 75 bd ff ff       	call   c01003f8 <__panic>
        struct vma_struct *vma3 = find_vma(mm, i+2);
c0104683:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104686:	83 c0 02             	add    $0x2,%eax
c0104689:	83 ec 08             	sub    $0x8,%esp
c010468c:	50                   	push   %eax
c010468d:	ff 75 e8             	pushl  -0x18(%ebp)
c0104690:	e8 45 f7 ff ff       	call   c0103dda <find_vma>
c0104695:	83 c4 10             	add    $0x10,%esp
c0104698:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        assert(vma3 == NULL);
c010469b:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
c010469f:	74 19                	je     c01046ba <check_vma_struct+0x280>
c01046a1:	68 3b c8 10 c0       	push   $0xc010c83b
c01046a6:	68 d7 c6 10 c0       	push   $0xc010c6d7
c01046ab:	68 2c 01 00 00       	push   $0x12c
c01046b0:	68 ec c6 10 c0       	push   $0xc010c6ec
c01046b5:	e8 3e bd ff ff       	call   c01003f8 <__panic>
        struct vma_struct *vma4 = find_vma(mm, i+3);
c01046ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01046bd:	83 c0 03             	add    $0x3,%eax
c01046c0:	83 ec 08             	sub    $0x8,%esp
c01046c3:	50                   	push   %eax
c01046c4:	ff 75 e8             	pushl  -0x18(%ebp)
c01046c7:	e8 0e f7 ff ff       	call   c0103dda <find_vma>
c01046cc:	83 c4 10             	add    $0x10,%esp
c01046cf:	89 45 c0             	mov    %eax,-0x40(%ebp)
        assert(vma4 == NULL);
c01046d2:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
c01046d6:	74 19                	je     c01046f1 <check_vma_struct+0x2b7>
c01046d8:	68 48 c8 10 c0       	push   $0xc010c848
c01046dd:	68 d7 c6 10 c0       	push   $0xc010c6d7
c01046e2:	68 2e 01 00 00       	push   $0x12e
c01046e7:	68 ec c6 10 c0       	push   $0xc010c6ec
c01046ec:	e8 07 bd ff ff       	call   c01003f8 <__panic>
        struct vma_struct *vma5 = find_vma(mm, i+4);
c01046f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01046f4:	83 c0 04             	add    $0x4,%eax
c01046f7:	83 ec 08             	sub    $0x8,%esp
c01046fa:	50                   	push   %eax
c01046fb:	ff 75 e8             	pushl  -0x18(%ebp)
c01046fe:	e8 d7 f6 ff ff       	call   c0103dda <find_vma>
c0104703:	83 c4 10             	add    $0x10,%esp
c0104706:	89 45 bc             	mov    %eax,-0x44(%ebp)
        assert(vma5 == NULL);
c0104709:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c010470d:	74 19                	je     c0104728 <check_vma_struct+0x2ee>
c010470f:	68 55 c8 10 c0       	push   $0xc010c855
c0104714:	68 d7 c6 10 c0       	push   $0xc010c6d7
c0104719:	68 30 01 00 00       	push   $0x130
c010471e:	68 ec c6 10 c0       	push   $0xc010c6ec
c0104723:	e8 d0 bc ff ff       	call   c01003f8 <__panic>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
c0104728:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010472b:	8b 50 04             	mov    0x4(%eax),%edx
c010472e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104731:	39 c2                	cmp    %eax,%edx
c0104733:	75 10                	jne    c0104745 <check_vma_struct+0x30b>
c0104735:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0104738:	8b 40 08             	mov    0x8(%eax),%eax
c010473b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010473e:	83 c2 02             	add    $0x2,%edx
c0104741:	39 d0                	cmp    %edx,%eax
c0104743:	74 19                	je     c010475e <check_vma_struct+0x324>
c0104745:	68 64 c8 10 c0       	push   $0xc010c864
c010474a:	68 d7 c6 10 c0       	push   $0xc010c6d7
c010474f:	68 32 01 00 00       	push   $0x132
c0104754:	68 ec c6 10 c0       	push   $0xc010c6ec
c0104759:	e8 9a bc ff ff       	call   c01003f8 <__panic>
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
c010475e:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0104761:	8b 50 04             	mov    0x4(%eax),%edx
c0104764:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104767:	39 c2                	cmp    %eax,%edx
c0104769:	75 10                	jne    c010477b <check_vma_struct+0x341>
c010476b:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010476e:	8b 40 08             	mov    0x8(%eax),%eax
c0104771:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0104774:	83 c2 02             	add    $0x2,%edx
c0104777:	39 d0                	cmp    %edx,%eax
c0104779:	74 19                	je     c0104794 <check_vma_struct+0x35a>
c010477b:	68 94 c8 10 c0       	push   $0xc010c894
c0104780:	68 d7 c6 10 c0       	push   $0xc010c6d7
c0104785:	68 33 01 00 00       	push   $0x133
c010478a:	68 ec c6 10 c0       	push   $0xc010c6ec
c010478f:	e8 64 bc ff ff       	call   c01003f8 <__panic>
        struct vma_struct *mmap = le2vma(le, list_link);
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
        le = list_next(le);
    }

    for (i = 5; i <= 5 * step2; i +=5) {
c0104794:	83 45 f4 05          	addl   $0x5,-0xc(%ebp)
c0104798:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010479b:	89 d0                	mov    %edx,%eax
c010479d:	c1 e0 02             	shl    $0x2,%eax
c01047a0:	01 d0                	add    %edx,%eax
c01047a2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01047a5:	0f 8d 6d fe ff ff    	jge    c0104618 <check_vma_struct+0x1de>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
    }

    for (i =4; i>=0; i--) {
c01047ab:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%ebp)
c01047b2:	eb 5c                	jmp    c0104810 <check_vma_struct+0x3d6>
        struct vma_struct *vma_below_5= find_vma(mm,i);
c01047b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01047b7:	83 ec 08             	sub    $0x8,%esp
c01047ba:	50                   	push   %eax
c01047bb:	ff 75 e8             	pushl  -0x18(%ebp)
c01047be:	e8 17 f6 ff ff       	call   c0103dda <find_vma>
c01047c3:	83 c4 10             	add    $0x10,%esp
c01047c6:	89 45 b8             	mov    %eax,-0x48(%ebp)
        if (vma_below_5 != NULL ) {
c01047c9:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
c01047cd:	74 1e                	je     c01047ed <check_vma_struct+0x3b3>
           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
c01047cf:	8b 45 b8             	mov    -0x48(%ebp),%eax
c01047d2:	8b 50 08             	mov    0x8(%eax),%edx
c01047d5:	8b 45 b8             	mov    -0x48(%ebp),%eax
c01047d8:	8b 40 04             	mov    0x4(%eax),%eax
c01047db:	52                   	push   %edx
c01047dc:	50                   	push   %eax
c01047dd:	ff 75 f4             	pushl  -0xc(%ebp)
c01047e0:	68 c4 c8 10 c0       	push   $0xc010c8c4
c01047e5:	e8 a8 ba ff ff       	call   c0100292 <cprintf>
c01047ea:	83 c4 10             	add    $0x10,%esp
        }
        assert(vma_below_5 == NULL);
c01047ed:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
c01047f1:	74 19                	je     c010480c <check_vma_struct+0x3d2>
c01047f3:	68 e9 c8 10 c0       	push   $0xc010c8e9
c01047f8:	68 d7 c6 10 c0       	push   $0xc010c6d7
c01047fd:	68 3b 01 00 00       	push   $0x13b
c0104802:	68 ec c6 10 c0       	push   $0xc010c6ec
c0104807:	e8 ec bb ff ff       	call   c01003f8 <__panic>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
    }

    for (i =4; i>=0; i--) {
c010480c:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0104810:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104814:	79 9e                	jns    c01047b4 <check_vma_struct+0x37a>
           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
        }
        assert(vma_below_5 == NULL);
    }

    mm_destroy(mm);
c0104816:	83 ec 0c             	sub    $0xc,%esp
c0104819:	ff 75 e8             	pushl  -0x18(%ebp)
c010481c:	e8 09 f8 ff ff       	call   c010402a <mm_destroy>
c0104821:	83 c4 10             	add    $0x10,%esp

    cprintf("check_vma_struct() succeeded!\n");
c0104824:	83 ec 0c             	sub    $0xc,%esp
c0104827:	68 00 c9 10 c0       	push   $0xc010c900
c010482c:	e8 61 ba ff ff       	call   c0100292 <cprintf>
c0104831:	83 c4 10             	add    $0x10,%esp
}
c0104834:	90                   	nop
c0104835:	c9                   	leave  
c0104836:	c3                   	ret    

c0104837 <check_pgfault>:

struct mm_struct *check_mm_struct;

// check_pgfault - check correctness of pgfault handler
static void
check_pgfault(void) {
c0104837:	55                   	push   %ebp
c0104838:	89 e5                	mov    %esp,%ebp
c010483a:	83 ec 28             	sub    $0x28,%esp
    size_t nr_free_pages_store = nr_free_pages();
c010483d:	e8 b2 2f 00 00       	call   c01077f4 <nr_free_pages>
c0104842:	89 45 ec             	mov    %eax,-0x14(%ebp)

    check_mm_struct = mm_create();
c0104845:	e8 b6 f4 ff ff       	call   c0103d00 <mm_create>
c010484a:	a3 bc 20 1a c0       	mov    %eax,0xc01a20bc
    assert(check_mm_struct != NULL);
c010484f:	a1 bc 20 1a c0       	mov    0xc01a20bc,%eax
c0104854:	85 c0                	test   %eax,%eax
c0104856:	75 19                	jne    c0104871 <check_pgfault+0x3a>
c0104858:	68 1f c9 10 c0       	push   $0xc010c91f
c010485d:	68 d7 c6 10 c0       	push   $0xc010c6d7
c0104862:	68 4b 01 00 00       	push   $0x14b
c0104867:	68 ec c6 10 c0       	push   $0xc010c6ec
c010486c:	e8 87 bb ff ff       	call   c01003f8 <__panic>

    struct mm_struct *mm = check_mm_struct;
c0104871:	a1 bc 20 1a c0       	mov    0xc01a20bc,%eax
c0104876:	89 45 e8             	mov    %eax,-0x18(%ebp)
    pde_t *pgdir = mm->pgdir = boot_pgdir;
c0104879:	8b 15 60 ba 12 c0    	mov    0xc012ba60,%edx
c010487f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104882:	89 50 0c             	mov    %edx,0xc(%eax)
c0104885:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104888:	8b 40 0c             	mov    0xc(%eax),%eax
c010488b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(pgdir[0] == 0);
c010488e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104891:	8b 00                	mov    (%eax),%eax
c0104893:	85 c0                	test   %eax,%eax
c0104895:	74 19                	je     c01048b0 <check_pgfault+0x79>
c0104897:	68 37 c9 10 c0       	push   $0xc010c937
c010489c:	68 d7 c6 10 c0       	push   $0xc010c6d7
c01048a1:	68 4f 01 00 00       	push   $0x14f
c01048a6:	68 ec c6 10 c0       	push   $0xc010c6ec
c01048ab:	e8 48 bb ff ff       	call   c01003f8 <__panic>

    struct vma_struct *vma = vma_create(0, PTSIZE, VM_WRITE);
c01048b0:	83 ec 04             	sub    $0x4,%esp
c01048b3:	6a 02                	push   $0x2
c01048b5:	68 00 00 40 00       	push   $0x400000
c01048ba:	6a 00                	push   $0x0
c01048bc:	e8 dd f4 ff ff       	call   c0103d9e <vma_create>
c01048c1:	83 c4 10             	add    $0x10,%esp
c01048c4:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(vma != NULL);
c01048c7:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01048cb:	75 19                	jne    c01048e6 <check_pgfault+0xaf>
c01048cd:	68 c8 c7 10 c0       	push   $0xc010c7c8
c01048d2:	68 d7 c6 10 c0       	push   $0xc010c6d7
c01048d7:	68 52 01 00 00       	push   $0x152
c01048dc:	68 ec c6 10 c0       	push   $0xc010c6ec
c01048e1:	e8 12 bb ff ff       	call   c01003f8 <__panic>

    insert_vma_struct(mm, vma);
c01048e6:	83 ec 08             	sub    $0x8,%esp
c01048e9:	ff 75 e0             	pushl  -0x20(%ebp)
c01048ec:	ff 75 e8             	pushl  -0x18(%ebp)
c01048ef:	e8 12 f6 ff ff       	call   c0103f06 <insert_vma_struct>
c01048f4:	83 c4 10             	add    $0x10,%esp

    uintptr_t addr = 0x100;
c01048f7:	c7 45 dc 00 01 00 00 	movl   $0x100,-0x24(%ebp)
    assert(find_vma(mm, addr) == vma);
c01048fe:	83 ec 08             	sub    $0x8,%esp
c0104901:	ff 75 dc             	pushl  -0x24(%ebp)
c0104904:	ff 75 e8             	pushl  -0x18(%ebp)
c0104907:	e8 ce f4 ff ff       	call   c0103dda <find_vma>
c010490c:	83 c4 10             	add    $0x10,%esp
c010490f:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0104912:	74 19                	je     c010492d <check_pgfault+0xf6>
c0104914:	68 45 c9 10 c0       	push   $0xc010c945
c0104919:	68 d7 c6 10 c0       	push   $0xc010c6d7
c010491e:	68 57 01 00 00       	push   $0x157
c0104923:	68 ec c6 10 c0       	push   $0xc010c6ec
c0104928:	e8 cb ba ff ff       	call   c01003f8 <__panic>

    int i, sum = 0;
c010492d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    for (i = 0; i < 100; i ++) {
c0104934:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010493b:	eb 19                	jmp    c0104956 <check_pgfault+0x11f>
        *(char *)(addr + i) = i;
c010493d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0104940:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104943:	01 d0                	add    %edx,%eax
c0104945:	89 c2                	mov    %eax,%edx
c0104947:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010494a:	88 02                	mov    %al,(%edx)
        sum += i;
c010494c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010494f:	01 45 f0             	add    %eax,-0x10(%ebp)

    uintptr_t addr = 0x100;
    assert(find_vma(mm, addr) == vma);

    int i, sum = 0;
    for (i = 0; i < 100; i ++) {
c0104952:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0104956:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c010495a:	7e e1                	jle    c010493d <check_pgfault+0x106>
        *(char *)(addr + i) = i;
        sum += i;
    }
    for (i = 0; i < 100; i ++) {
c010495c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0104963:	eb 15                	jmp    c010497a <check_pgfault+0x143>
        sum -= *(char *)(addr + i);
c0104965:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0104968:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010496b:	01 d0                	add    %edx,%eax
c010496d:	0f b6 00             	movzbl (%eax),%eax
c0104970:	0f be c0             	movsbl %al,%eax
c0104973:	29 45 f0             	sub    %eax,-0x10(%ebp)
    int i, sum = 0;
    for (i = 0; i < 100; i ++) {
        *(char *)(addr + i) = i;
        sum += i;
    }
    for (i = 0; i < 100; i ++) {
c0104976:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010497a:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c010497e:	7e e5                	jle    c0104965 <check_pgfault+0x12e>
        sum -= *(char *)(addr + i);
    }
    assert(sum == 0);
c0104980:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0104984:	74 19                	je     c010499f <check_pgfault+0x168>
c0104986:	68 5f c9 10 c0       	push   $0xc010c95f
c010498b:	68 d7 c6 10 c0       	push   $0xc010c6d7
c0104990:	68 61 01 00 00       	push   $0x161
c0104995:	68 ec c6 10 c0       	push   $0xc010c6ec
c010499a:	e8 59 ba ff ff       	call   c01003f8 <__panic>

    page_remove(pgdir, ROUNDDOWN(addr, PGSIZE));
c010499f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01049a2:	89 45 d8             	mov    %eax,-0x28(%ebp)
c01049a5:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01049a8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01049ad:	83 ec 08             	sub    $0x8,%esp
c01049b0:	50                   	push   %eax
c01049b1:	ff 75 e4             	pushl  -0x1c(%ebp)
c01049b4:	e8 5d 39 00 00       	call   c0108316 <page_remove>
c01049b9:	83 c4 10             	add    $0x10,%esp
    free_page(pde2page(pgdir[0]));
c01049bc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01049bf:	8b 00                	mov    (%eax),%eax
c01049c1:	83 ec 0c             	sub    $0xc,%esp
c01049c4:	50                   	push   %eax
c01049c5:	e8 1a f3 ff ff       	call   c0103ce4 <pde2page>
c01049ca:	83 c4 10             	add    $0x10,%esp
c01049cd:	83 ec 08             	sub    $0x8,%esp
c01049d0:	6a 01                	push   $0x1
c01049d2:	50                   	push   %eax
c01049d3:	e8 e7 2d 00 00       	call   c01077bf <free_pages>
c01049d8:	83 c4 10             	add    $0x10,%esp
    pgdir[0] = 0;
c01049db:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01049de:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    mm->pgdir = NULL;
c01049e4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01049e7:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
    mm_destroy(mm);
c01049ee:	83 ec 0c             	sub    $0xc,%esp
c01049f1:	ff 75 e8             	pushl  -0x18(%ebp)
c01049f4:	e8 31 f6 ff ff       	call   c010402a <mm_destroy>
c01049f9:	83 c4 10             	add    $0x10,%esp
    check_mm_struct = NULL;
c01049fc:	c7 05 bc 20 1a c0 00 	movl   $0x0,0xc01a20bc
c0104a03:	00 00 00 

    assert(nr_free_pages_store == nr_free_pages());
c0104a06:	e8 e9 2d 00 00       	call   c01077f4 <nr_free_pages>
c0104a0b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0104a0e:	74 19                	je     c0104a29 <check_pgfault+0x1f2>
c0104a10:	68 68 c9 10 c0       	push   $0xc010c968
c0104a15:	68 d7 c6 10 c0       	push   $0xc010c6d7
c0104a1a:	68 6b 01 00 00       	push   $0x16b
c0104a1f:	68 ec c6 10 c0       	push   $0xc010c6ec
c0104a24:	e8 cf b9 ff ff       	call   c01003f8 <__panic>

    cprintf("check_pgfault() succeeded!\n");
c0104a29:	83 ec 0c             	sub    $0xc,%esp
c0104a2c:	68 8f c9 10 c0       	push   $0xc010c98f
c0104a31:	e8 5c b8 ff ff       	call   c0100292 <cprintf>
c0104a36:	83 c4 10             	add    $0x10,%esp
}
c0104a39:	90                   	nop
c0104a3a:	c9                   	leave  
c0104a3b:	c3                   	ret    

c0104a3c <do_pgfault>:
 *            was a read (0) or write (1).
 *         -- The U/S flag (bit 2) indicates whether the processor was executing at user mode (1)
 *            or supervisor mode (0) at the time of the exception.
 */
int
do_pgfault(struct mm_struct *mm, uint32_t error_code, uintptr_t addr) {
c0104a3c:	55                   	push   %ebp
c0104a3d:	89 e5                	mov    %esp,%ebp
c0104a3f:	83 ec 28             	sub    $0x28,%esp
    int ret = -E_INVAL;
c0104a42:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
    //try to find a vma which include addr
    struct vma_struct *vma = find_vma(mm, addr);
c0104a49:	ff 75 10             	pushl  0x10(%ebp)
c0104a4c:	ff 75 08             	pushl  0x8(%ebp)
c0104a4f:	e8 86 f3 ff ff       	call   c0103dda <find_vma>
c0104a54:	83 c4 08             	add    $0x8,%esp
c0104a57:	89 45 ec             	mov    %eax,-0x14(%ebp)

    pgfault_num++;
c0104a5a:	a1 64 ff 19 c0       	mov    0xc019ff64,%eax
c0104a5f:	83 c0 01             	add    $0x1,%eax
c0104a62:	a3 64 ff 19 c0       	mov    %eax,0xc019ff64
    //If the addr is in the range of a mm's vma?
    if (vma == NULL || vma->vm_start > addr) {
c0104a67:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0104a6b:	74 0b                	je     c0104a78 <do_pgfault+0x3c>
c0104a6d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104a70:	8b 40 04             	mov    0x4(%eax),%eax
c0104a73:	3b 45 10             	cmp    0x10(%ebp),%eax
c0104a76:	76 18                	jbe    c0104a90 <do_pgfault+0x54>
        cprintf("not valid addr %x, and  can not find it in vma\n", addr);
c0104a78:	83 ec 08             	sub    $0x8,%esp
c0104a7b:	ff 75 10             	pushl  0x10(%ebp)
c0104a7e:	68 ac c9 10 c0       	push   $0xc010c9ac
c0104a83:	e8 0a b8 ff ff       	call   c0100292 <cprintf>
c0104a88:	83 c4 10             	add    $0x10,%esp
        goto failed;
c0104a8b:	e9 b4 01 00 00       	jmp    c0104c44 <do_pgfault+0x208>
    }
    //check the error_code
    switch (error_code & 3) {
c0104a90:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104a93:	83 e0 03             	and    $0x3,%eax
c0104a96:	85 c0                	test   %eax,%eax
c0104a98:	74 3c                	je     c0104ad6 <do_pgfault+0x9a>
c0104a9a:	83 f8 01             	cmp    $0x1,%eax
c0104a9d:	74 22                	je     c0104ac1 <do_pgfault+0x85>
    default:
            /* error code flag : default is 3 ( W/R=1, P=1): write, present */
    case 2: /* error code flag : (W/R=1, P=0): write, not present */
        if (!(vma->vm_flags & VM_WRITE)) {
c0104a9f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104aa2:	8b 40 0c             	mov    0xc(%eax),%eax
c0104aa5:	83 e0 02             	and    $0x2,%eax
c0104aa8:	85 c0                	test   %eax,%eax
c0104aaa:	75 4c                	jne    c0104af8 <do_pgfault+0xbc>
            cprintf("do_pgfault failed: error code flag = write AND not present, but the addr's vma cannot write\n");
c0104aac:	83 ec 0c             	sub    $0xc,%esp
c0104aaf:	68 dc c9 10 c0       	push   $0xc010c9dc
c0104ab4:	e8 d9 b7 ff ff       	call   c0100292 <cprintf>
c0104ab9:	83 c4 10             	add    $0x10,%esp
            goto failed;
c0104abc:	e9 83 01 00 00       	jmp    c0104c44 <do_pgfault+0x208>
        }
        break;
    case 1: /* error code flag : (W/R=0, P=1): read, present */
        cprintf("do_pgfault failed: error code flag = read AND present\n");
c0104ac1:	83 ec 0c             	sub    $0xc,%esp
c0104ac4:	68 3c ca 10 c0       	push   $0xc010ca3c
c0104ac9:	e8 c4 b7 ff ff       	call   c0100292 <cprintf>
c0104ace:	83 c4 10             	add    $0x10,%esp
        goto failed;
c0104ad1:	e9 6e 01 00 00       	jmp    c0104c44 <do_pgfault+0x208>
    case 0: /* error code flag : (W/R=0, P=0): read, not present */
        if (!(vma->vm_flags & (VM_READ | VM_EXEC))) {
c0104ad6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104ad9:	8b 40 0c             	mov    0xc(%eax),%eax
c0104adc:	83 e0 05             	and    $0x5,%eax
c0104adf:	85 c0                	test   %eax,%eax
c0104ae1:	75 16                	jne    c0104af9 <do_pgfault+0xbd>
            cprintf("do_pgfault failed: error code flag = read AND not present, but the addr's vma cannot read or exec\n");
c0104ae3:	83 ec 0c             	sub    $0xc,%esp
c0104ae6:	68 74 ca 10 c0       	push   $0xc010ca74
c0104aeb:	e8 a2 b7 ff ff       	call   c0100292 <cprintf>
c0104af0:	83 c4 10             	add    $0x10,%esp
            goto failed;
c0104af3:	e9 4c 01 00 00       	jmp    c0104c44 <do_pgfault+0x208>
    case 2: /* error code flag : (W/R=1, P=0): write, not present */
        if (!(vma->vm_flags & VM_WRITE)) {
            cprintf("do_pgfault failed: error code flag = write AND not present, but the addr's vma cannot write\n");
            goto failed;
        }
        break;
c0104af8:	90                   	nop
     *    (write an non_existed addr && addr is writable) OR
     *    (read  an non_existed addr && addr is readable)
     * THEN
     *    continue process
     */
    uint32_t perm = PTE_U;
c0104af9:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
    if (vma->vm_flags & VM_WRITE) {
c0104b00:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104b03:	8b 40 0c             	mov    0xc(%eax),%eax
c0104b06:	83 e0 02             	and    $0x2,%eax
c0104b09:	85 c0                	test   %eax,%eax
c0104b0b:	74 04                	je     c0104b11 <do_pgfault+0xd5>
        perm |= PTE_W;
c0104b0d:	83 4d f0 02          	orl    $0x2,-0x10(%ebp)
    }
    addr = ROUNDDOWN(addr, PGSIZE);
c0104b11:	8b 45 10             	mov    0x10(%ebp),%eax
c0104b14:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0104b17:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104b1a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0104b1f:	89 45 10             	mov    %eax,0x10(%ebp)

    ret = -E_NO_MEM;
c0104b22:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    pte_t *ptep=NULL;
c0104b29:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    *   mm->pgdir : the PDT of these vma
    *
    */
    /*LAB3 EXERCISE 1: YOUR CODE*/
    //(1) try to find a pte, if pte's PT(Page Table) isn't existed, then create a PT.
    ptep = get_pte(mm->pgdir, addr, 1);
c0104b30:	8b 45 08             	mov    0x8(%ebp),%eax
c0104b33:	8b 40 0c             	mov    0xc(%eax),%eax
c0104b36:	83 ec 04             	sub    $0x4,%esp
c0104b39:	6a 01                	push   $0x1
c0104b3b:	ff 75 10             	pushl  0x10(%ebp)
c0104b3e:	50                   	push   %eax
c0104b3f:	e8 7b 32 00 00       	call   c0107dbf <get_pte>
c0104b44:	83 c4 10             	add    $0x10,%esp
c0104b47:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(ptep != NULL);
c0104b4a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0104b4e:	75 19                	jne    c0104b69 <do_pgfault+0x12d>
c0104b50:	68 d7 ca 10 c0       	push   $0xc010cad7
c0104b55:	68 d7 c6 10 c0       	push   $0xc010c6d7
c0104b5a:	68 c9 01 00 00       	push   $0x1c9
c0104b5f:	68 ec c6 10 c0       	push   $0xc010c6ec
c0104b64:	e8 8f b8 ff ff       	call   c01003f8 <__panic>
    //(2) if the phy addr isn't exist, then alloc a page & map the phy addr with logical addr
    if (*ptep == 0) {
c0104b69:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104b6c:	8b 00                	mov    (%eax),%eax
c0104b6e:	85 c0                	test   %eax,%eax
c0104b70:	75 39                	jne    c0104bab <do_pgfault+0x16f>
        assert(pgdir_alloc_page(mm->pgdir, addr, perm) != NULL);
c0104b72:	8b 45 08             	mov    0x8(%ebp),%eax
c0104b75:	8b 40 0c             	mov    0xc(%eax),%eax
c0104b78:	83 ec 04             	sub    $0x4,%esp
c0104b7b:	ff 75 f0             	pushl  -0x10(%ebp)
c0104b7e:	ff 75 10             	pushl  0x10(%ebp)
c0104b81:	50                   	push   %eax
c0104b82:	e8 d1 38 00 00       	call   c0108458 <pgdir_alloc_page>
c0104b87:	83 c4 10             	add    $0x10,%esp
c0104b8a:	85 c0                	test   %eax,%eax
c0104b8c:	0f 85 ab 00 00 00    	jne    c0104c3d <do_pgfault+0x201>
c0104b92:	68 e4 ca 10 c0       	push   $0xc010cae4
c0104b97:	68 d7 c6 10 c0       	push   $0xc010c6d7
c0104b9c:	68 cc 01 00 00       	push   $0x1cc
c0104ba1:	68 ec c6 10 c0       	push   $0xc010c6ec
c0104ba6:	e8 4d b8 ff ff       	call   c01003f8 <__panic>
    *    swap_in(mm, addr, &page) : alloc a memory page, then according to the swap entry in PTE for addr,
    *                               find the addr of disk page, read the content of disk page into this memroy page
    *    page_insert ： build the map of phy addr of an Page with the linear addr la
    *    swap_map_swappable ： set the page swappable
    */
        if(swap_init_ok) {
c0104bab:	a1 6c ff 19 c0       	mov    0xc019ff6c,%eax
c0104bb0:	85 c0                	test   %eax,%eax
c0104bb2:	74 71                	je     c0104c25 <do_pgfault+0x1e9>
            struct Page *page=NULL;
c0104bb4:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
            //(1）According to the mm AND addr, try to load the content of right disk page
            //    into the memory which page managed.
            assert(swap_in(mm, addr, &page) == 0);
c0104bbb:	83 ec 04             	sub    $0x4,%esp
c0104bbe:	8d 45 e0             	lea    -0x20(%ebp),%eax
c0104bc1:	50                   	push   %eax
c0104bc2:	ff 75 10             	pushl  0x10(%ebp)
c0104bc5:	ff 75 08             	pushl  0x8(%ebp)
c0104bc8:	e8 9b 10 00 00       	call   c0105c68 <swap_in>
c0104bcd:	83 c4 10             	add    $0x10,%esp
c0104bd0:	85 c0                	test   %eax,%eax
c0104bd2:	74 19                	je     c0104bed <do_pgfault+0x1b1>
c0104bd4:	68 14 cb 10 c0       	push   $0xc010cb14
c0104bd9:	68 d7 c6 10 c0       	push   $0xc010c6d7
c0104bde:	68 de 01 00 00       	push   $0x1de
c0104be3:	68 ec c6 10 c0       	push   $0xc010c6ec
c0104be8:	e8 0b b8 ff ff       	call   c01003f8 <__panic>
            page->pra_vaddr = addr;
c0104bed:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104bf0:	8b 55 10             	mov    0x10(%ebp),%edx
c0104bf3:	89 50 1c             	mov    %edx,0x1c(%eax)
            //(2) According to the mm, addr AND page, setup the map of phy addr <---> logical addr
            page_insert(mm->pgdir, page, addr, perm);
c0104bf6:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0104bf9:	8b 45 08             	mov    0x8(%ebp),%eax
c0104bfc:	8b 40 0c             	mov    0xc(%eax),%eax
c0104bff:	ff 75 f0             	pushl  -0x10(%ebp)
c0104c02:	ff 75 10             	pushl  0x10(%ebp)
c0104c05:	52                   	push   %edx
c0104c06:	50                   	push   %eax
c0104c07:	e8 43 37 00 00       	call   c010834f <page_insert>
c0104c0c:	83 c4 10             	add    $0x10,%esp
            //(3) make the page swappable.
            swap_map_swappable(mm, addr, page, 1);
c0104c0f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104c12:	6a 01                	push   $0x1
c0104c14:	50                   	push   %eax
c0104c15:	ff 75 10             	pushl  0x10(%ebp)
c0104c18:	ff 75 08             	pushl  0x8(%ebp)
c0104c1b:	e8 b8 0e 00 00       	call   c0105ad8 <swap_map_swappable>
c0104c20:	83 c4 10             	add    $0x10,%esp
c0104c23:	eb 18                	jmp    c0104c3d <do_pgfault+0x201>
        }
        else {
            cprintf("no swap_init_ok but ptep is %x, failed\n",*ptep);
c0104c25:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104c28:	8b 00                	mov    (%eax),%eax
c0104c2a:	83 ec 08             	sub    $0x8,%esp
c0104c2d:	50                   	push   %eax
c0104c2e:	68 34 cb 10 c0       	push   $0xc010cb34
c0104c33:	e8 5a b6 ff ff       	call   c0100292 <cprintf>
c0104c38:	83 c4 10             	add    $0x10,%esp
            goto failed;
c0104c3b:	eb 07                	jmp    c0104c44 <do_pgfault+0x208>
            goto failed;
        }
#endif

   }
   ret = 0;
c0104c3d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
failed:
    return ret;
c0104c44:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0104c47:	c9                   	leave  
c0104c48:	c3                   	ret    

c0104c49 <user_mem_check>:

bool
user_mem_check(struct mm_struct *mm, uintptr_t addr, size_t len, bool write) {
c0104c49:	55                   	push   %ebp
c0104c4a:	89 e5                	mov    %esp,%ebp
c0104c4c:	83 ec 10             	sub    $0x10,%esp
    if (mm != NULL) {
c0104c4f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104c53:	0f 84 dc 00 00 00    	je     c0104d35 <user_mem_check+0xec>
        if (!USER_ACCESS(addr, addr + len)) {
c0104c59:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0104c60:	76 1c                	jbe    c0104c7e <user_mem_check+0x35>
c0104c62:	8b 55 0c             	mov    0xc(%ebp),%edx
c0104c65:	8b 45 10             	mov    0x10(%ebp),%eax
c0104c68:	01 d0                	add    %edx,%eax
c0104c6a:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0104c6d:	76 0f                	jbe    c0104c7e <user_mem_check+0x35>
c0104c6f:	8b 55 0c             	mov    0xc(%ebp),%edx
c0104c72:	8b 45 10             	mov    0x10(%ebp),%eax
c0104c75:	01 d0                	add    %edx,%eax
c0104c77:	3d 00 00 00 b0       	cmp    $0xb0000000,%eax
c0104c7c:	76 0a                	jbe    c0104c88 <user_mem_check+0x3f>
            return 0;
c0104c7e:	b8 00 00 00 00       	mov    $0x0,%eax
c0104c83:	e9 df 00 00 00       	jmp    c0104d67 <user_mem_check+0x11e>
        }
        struct vma_struct *vma;
        uintptr_t start = addr, end = addr + len;
c0104c88:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104c8b:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0104c8e:	8b 55 0c             	mov    0xc(%ebp),%edx
c0104c91:	8b 45 10             	mov    0x10(%ebp),%eax
c0104c94:	01 d0                	add    %edx,%eax
c0104c96:	89 45 f8             	mov    %eax,-0x8(%ebp)
        while (start < end) {
c0104c99:	e9 84 00 00 00       	jmp    c0104d22 <user_mem_check+0xd9>
            if ((vma = find_vma(mm, start)) == NULL || start < vma->vm_start) {
c0104c9e:	ff 75 fc             	pushl  -0x4(%ebp)
c0104ca1:	ff 75 08             	pushl  0x8(%ebp)
c0104ca4:	e8 31 f1 ff ff       	call   c0103dda <find_vma>
c0104ca9:	83 c4 08             	add    $0x8,%esp
c0104cac:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104caf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104cb3:	74 0b                	je     c0104cc0 <user_mem_check+0x77>
c0104cb5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104cb8:	8b 40 04             	mov    0x4(%eax),%eax
c0104cbb:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0104cbe:	76 0a                	jbe    c0104cca <user_mem_check+0x81>
                return 0;
c0104cc0:	b8 00 00 00 00       	mov    $0x0,%eax
c0104cc5:	e9 9d 00 00 00       	jmp    c0104d67 <user_mem_check+0x11e>
            }
            if (!(vma->vm_flags & ((write) ? VM_WRITE : VM_READ))) {
c0104cca:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ccd:	8b 40 0c             	mov    0xc(%eax),%eax
c0104cd0:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0104cd4:	74 07                	je     c0104cdd <user_mem_check+0x94>
c0104cd6:	ba 02 00 00 00       	mov    $0x2,%edx
c0104cdb:	eb 05                	jmp    c0104ce2 <user_mem_check+0x99>
c0104cdd:	ba 01 00 00 00       	mov    $0x1,%edx
c0104ce2:	21 d0                	and    %edx,%eax
c0104ce4:	85 c0                	test   %eax,%eax
c0104ce6:	75 07                	jne    c0104cef <user_mem_check+0xa6>
                return 0;
c0104ce8:	b8 00 00 00 00       	mov    $0x0,%eax
c0104ced:	eb 78                	jmp    c0104d67 <user_mem_check+0x11e>
            }
            if (write && (vma->vm_flags & VM_STACK)) {
c0104cef:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0104cf3:	74 24                	je     c0104d19 <user_mem_check+0xd0>
c0104cf5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104cf8:	8b 40 0c             	mov    0xc(%eax),%eax
c0104cfb:	83 e0 08             	and    $0x8,%eax
c0104cfe:	85 c0                	test   %eax,%eax
c0104d00:	74 17                	je     c0104d19 <user_mem_check+0xd0>
                if (start < vma->vm_start + PGSIZE) { //check stack start & size
c0104d02:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d05:	8b 40 04             	mov    0x4(%eax),%eax
c0104d08:	05 00 10 00 00       	add    $0x1000,%eax
c0104d0d:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0104d10:	76 07                	jbe    c0104d19 <user_mem_check+0xd0>
                    return 0;
c0104d12:	b8 00 00 00 00       	mov    $0x0,%eax
c0104d17:	eb 4e                	jmp    c0104d67 <user_mem_check+0x11e>
                }
            }
            start = vma->vm_end;
c0104d19:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d1c:	8b 40 08             	mov    0x8(%eax),%eax
c0104d1f:	89 45 fc             	mov    %eax,-0x4(%ebp)
        if (!USER_ACCESS(addr, addr + len)) {
            return 0;
        }
        struct vma_struct *vma;
        uintptr_t start = addr, end = addr + len;
        while (start < end) {
c0104d22:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0104d25:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c0104d28:	0f 82 70 ff ff ff    	jb     c0104c9e <user_mem_check+0x55>
                    return 0;
                }
            }
            start = vma->vm_end;
        }
        return 1;
c0104d2e:	b8 01 00 00 00       	mov    $0x1,%eax
c0104d33:	eb 32                	jmp    c0104d67 <user_mem_check+0x11e>
    }
    return KERN_ACCESS(addr, addr + len);
c0104d35:	81 7d 0c ff ff ff bf 	cmpl   $0xbfffffff,0xc(%ebp)
c0104d3c:	76 23                	jbe    c0104d61 <user_mem_check+0x118>
c0104d3e:	8b 55 0c             	mov    0xc(%ebp),%edx
c0104d41:	8b 45 10             	mov    0x10(%ebp),%eax
c0104d44:	01 d0                	add    %edx,%eax
c0104d46:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0104d49:	76 16                	jbe    c0104d61 <user_mem_check+0x118>
c0104d4b:	8b 55 0c             	mov    0xc(%ebp),%edx
c0104d4e:	8b 45 10             	mov    0x10(%ebp),%eax
c0104d51:	01 d0                	add    %edx,%eax
c0104d53:	3d 00 00 00 f8       	cmp    $0xf8000000,%eax
c0104d58:	77 07                	ja     c0104d61 <user_mem_check+0x118>
c0104d5a:	b8 01 00 00 00       	mov    $0x1,%eax
c0104d5f:	eb 05                	jmp    c0104d66 <user_mem_check+0x11d>
c0104d61:	b8 00 00 00 00       	mov    $0x0,%eax
c0104d66:	90                   	nop
}
c0104d67:	c9                   	leave  
c0104d68:	c3                   	ret    

c0104d69 <_fifo_init_mm>:
 * (2) _fifo_init_mm: init pra_list_head and let  mm->sm_priv point to the addr of pra_list_head.
 *              Now, From the memory control struct mm_struct, we can access FIFO PRA
 */
static int
_fifo_init_mm(struct mm_struct *mm)
{     
c0104d69:	55                   	push   %ebp
c0104d6a:	89 e5                	mov    %esp,%ebp
c0104d6c:	83 ec 10             	sub    $0x10,%esp
c0104d6f:	c7 45 fc b0 20 1a c0 	movl   $0xc01a20b0,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0104d76:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0104d79:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0104d7c:	89 50 04             	mov    %edx,0x4(%eax)
c0104d7f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0104d82:	8b 50 04             	mov    0x4(%eax),%edx
c0104d85:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0104d88:	89 10                	mov    %edx,(%eax)
     list_init(&pra_list_head);
     mm->sm_priv = &pra_list_head;
c0104d8a:	8b 45 08             	mov    0x8(%ebp),%eax
c0104d8d:	c7 40 14 b0 20 1a c0 	movl   $0xc01a20b0,0x14(%eax)
     //cprintf(" mm->sm_priv %x in fifo_init_mm\n",mm->sm_priv);
     return 0;
c0104d94:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104d99:	c9                   	leave  
c0104d9a:	c3                   	ret    

c0104d9b <_fifo_map_swappable>:
/*
 * (3)_fifo_map_swappable: According FIFO PRA, we should link the most recent arrival page at the back of pra_list_head qeueue
 */
static int
_fifo_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c0104d9b:	55                   	push   %ebp
c0104d9c:	89 e5                	mov    %esp,%ebp
c0104d9e:	83 ec 48             	sub    $0x48,%esp
    list_entry_t *head=(list_entry_t*) mm->sm_priv;
c0104da1:	8b 45 08             	mov    0x8(%ebp),%eax
c0104da4:	8b 40 14             	mov    0x14(%eax),%eax
c0104da7:	89 45 f0             	mov    %eax,-0x10(%ebp)
    list_entry_t *entry=&(page->pra_page_link);
c0104daa:	8b 45 10             	mov    0x10(%ebp),%eax
c0104dad:	83 c0 14             	add    $0x14,%eax
c0104db0:	89 45 ec             	mov    %eax,-0x14(%ebp)
 
    assert(entry != NULL && head != NULL);
c0104db3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0104db7:	74 06                	je     c0104dbf <_fifo_map_swappable+0x24>
c0104db9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0104dbd:	75 16                	jne    c0104dd5 <_fifo_map_swappable+0x3a>
c0104dbf:	68 5c cb 10 c0       	push   $0xc010cb5c
c0104dc4:	68 7a cb 10 c0       	push   $0xc010cb7a
c0104dc9:	6a 32                	push   $0x32
c0104dcb:	68 8f cb 10 c0       	push   $0xc010cb8f
c0104dd0:	e8 23 b6 ff ff       	call   c01003f8 <__panic>
    //record the page access situlation
    /*LAB3 EXERCISE 2: YOUR CODE*/ 
    // not swap in but call this func, means failed to swap out 
    if (swap_in == 0) {
c0104dd5:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0104dd9:	75 57                	jne    c0104e32 <_fifo_map_swappable+0x97>
        list_entry_t *le_prev = head, *le;
c0104ddb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104dde:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while ((le = list_next(le_prev)) != head) {
c0104de1:	eb 38                	jmp    c0104e1b <_fifo_map_swappable+0x80>
            if (le == entry) {
c0104de3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104de6:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0104de9:	75 2a                	jne    c0104e15 <_fifo_map_swappable+0x7a>
c0104deb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104dee:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0104df1:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104df4:	8b 40 04             	mov    0x4(%eax),%eax
c0104df7:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0104dfa:	8b 12                	mov    (%edx),%edx
c0104dfc:	89 55 d8             	mov    %edx,-0x28(%ebp)
c0104dff:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0104e02:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0104e05:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0104e08:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0104e0b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0104e0e:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0104e11:	89 10                	mov    %edx,(%eax)
                list_del(le);
                break;
c0104e13:	eb 1d                	jmp    c0104e32 <_fifo_map_swappable+0x97>
            }
            le_prev = le;        
c0104e15:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104e18:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104e1b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e1e:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0104e21:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104e24:	8b 40 04             	mov    0x4(%eax),%eax
    //record the page access situlation
    /*LAB3 EXERCISE 2: YOUR CODE*/ 
    // not swap in but call this func, means failed to swap out 
    if (swap_in == 0) {
        list_entry_t *le_prev = head, *le;
        while ((le = list_next(le_prev)) != head) {
c0104e27:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0104e2a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104e2d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104e30:	75 b1                	jne    c0104de3 <_fifo_map_swappable+0x48>
c0104e32:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104e35:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0104e38:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104e3b:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c0104e3e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104e41:	8b 00                	mov    (%eax),%eax
c0104e43:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0104e46:	89 55 cc             	mov    %edx,-0x34(%ebp)
c0104e49:	89 45 c8             	mov    %eax,-0x38(%ebp)
c0104e4c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104e4f:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0104e52:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0104e55:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0104e58:	89 10                	mov    %edx,(%eax)
c0104e5a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0104e5d:	8b 10                	mov    (%eax),%edx
c0104e5f:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0104e62:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0104e65:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0104e68:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0104e6b:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0104e6e:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0104e71:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0104e74:	89 10                	mov    %edx,(%eax)
            le_prev = le;        
        }
    }
    //(1)link the most recent arrival page at the back of the pra_list_head qeueue.
    list_add_before(head, entry);
    return 0;
c0104e76:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104e7b:	c9                   	leave  
c0104e7c:	c3                   	ret    

c0104e7d <_fifo_swap_out_victim>:
 *  (4)_fifo_swap_out_victim: According FIFO PRA, we should unlink the  earliest arrival page in front of pra_list_head qeueue,
 *                            then assign the value of *ptr_page to the addr of this page.
 */
static int
_fifo_swap_out_victim(struct mm_struct *mm, struct Page ** ptr_page, int in_tick)
{
c0104e7d:	55                   	push   %ebp
c0104e7e:	89 e5                	mov    %esp,%ebp
c0104e80:	83 ec 28             	sub    $0x28,%esp
     list_entry_t *head=(list_entry_t*) mm->sm_priv;
c0104e83:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e86:	8b 40 14             	mov    0x14(%eax),%eax
c0104e89:	89 45 f4             	mov    %eax,-0xc(%ebp)
         assert(head != NULL);
c0104e8c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104e90:	75 16                	jne    c0104ea8 <_fifo_swap_out_victim+0x2b>
c0104e92:	68 a3 cb 10 c0       	push   $0xc010cba3
c0104e97:	68 7a cb 10 c0       	push   $0xc010cb7a
c0104e9c:	6a 4c                	push   $0x4c
c0104e9e:	68 8f cb 10 c0       	push   $0xc010cb8f
c0104ea3:	e8 50 b5 ff ff       	call   c01003f8 <__panic>
     assert(in_tick==0);
c0104ea8:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0104eac:	74 16                	je     c0104ec4 <_fifo_swap_out_victim+0x47>
c0104eae:	68 b0 cb 10 c0       	push   $0xc010cbb0
c0104eb3:	68 7a cb 10 c0       	push   $0xc010cb7a
c0104eb8:	6a 4d                	push   $0x4d
c0104eba:	68 8f cb 10 c0       	push   $0xc010cb8f
c0104ebf:	e8 34 b5 ff ff       	call   c01003f8 <__panic>
c0104ec4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ec7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0104eca:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104ecd:	8b 40 04             	mov    0x4(%eax),%eax
     /* Select the victim */
     /*LAB3 EXERCISE 2: YOUR CODE*/ 
    //(1)  unlink the  earliest arrival page in front of pra_list_head qeueue
    list_entry_t *front = list_next(head);
c0104ed0:	89 45 ec             	mov    %eax,-0x14(%ebp)
    assert(front != head);
c0104ed3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104ed6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104ed9:	75 16                	jne    c0104ef1 <_fifo_swap_out_victim+0x74>
c0104edb:	68 bb cb 10 c0       	push   $0xc010cbbb
c0104ee0:	68 7a cb 10 c0       	push   $0xc010cb7a
c0104ee5:	6a 52                	push   $0x52
c0104ee7:	68 8f cb 10 c0       	push   $0xc010cb8f
c0104eec:	e8 07 b5 ff ff       	call   c01003f8 <__panic>
c0104ef1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104ef4:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0104ef7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104efa:	8b 40 04             	mov    0x4(%eax),%eax
c0104efd:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104f00:	8b 12                	mov    (%edx),%edx
c0104f02:	89 55 e0             	mov    %edx,-0x20(%ebp)
c0104f05:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0104f08:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104f0b:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0104f0e:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0104f11:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104f14:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0104f17:	89 10                	mov    %edx,(%eax)
    list_del(front);
    //(2)  assign the value of *ptr_page to the addr of this page
    struct Page *page = le2page(front, pra_page_link);
c0104f19:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104f1c:	83 e8 14             	sub    $0x14,%eax
c0104f1f:	89 45 e8             	mov    %eax,-0x18(%ebp)
    assert(page != NULL);
c0104f22:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0104f26:	75 16                	jne    c0104f3e <_fifo_swap_out_victim+0xc1>
c0104f28:	68 c9 cb 10 c0       	push   $0xc010cbc9
c0104f2d:	68 7a cb 10 c0       	push   $0xc010cb7a
c0104f32:	6a 56                	push   $0x56
c0104f34:	68 8f cb 10 c0       	push   $0xc010cb8f
c0104f39:	e8 ba b4 ff ff       	call   c01003f8 <__panic>
    *ptr_page = page;
c0104f3e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104f41:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0104f44:	89 10                	mov    %edx,(%eax)
    return 0;
c0104f46:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104f4b:	c9                   	leave  
c0104f4c:	c3                   	ret    

c0104f4d <_fifo_check_swap>:

static int
_fifo_check_swap(void) {
c0104f4d:	55                   	push   %ebp
c0104f4e:	89 e5                	mov    %esp,%ebp
c0104f50:	83 ec 08             	sub    $0x8,%esp
    cprintf("write Virt Page c in fifo_check_swap\n");
c0104f53:	83 ec 0c             	sub    $0xc,%esp
c0104f56:	68 d8 cb 10 c0       	push   $0xc010cbd8
c0104f5b:	e8 32 b3 ff ff       	call   c0100292 <cprintf>
c0104f60:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x3000 = 0x0c;
c0104f63:	b8 00 30 00 00       	mov    $0x3000,%eax
c0104f68:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==4);
c0104f6b:	a1 64 ff 19 c0       	mov    0xc019ff64,%eax
c0104f70:	83 f8 04             	cmp    $0x4,%eax
c0104f73:	74 16                	je     c0104f8b <_fifo_check_swap+0x3e>
c0104f75:	68 fe cb 10 c0       	push   $0xc010cbfe
c0104f7a:	68 7a cb 10 c0       	push   $0xc010cb7a
c0104f7f:	6a 5f                	push   $0x5f
c0104f81:	68 8f cb 10 c0       	push   $0xc010cb8f
c0104f86:	e8 6d b4 ff ff       	call   c01003f8 <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c0104f8b:	83 ec 0c             	sub    $0xc,%esp
c0104f8e:	68 10 cc 10 c0       	push   $0xc010cc10
c0104f93:	e8 fa b2 ff ff       	call   c0100292 <cprintf>
c0104f98:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x1000 = 0x0a;
c0104f9b:	b8 00 10 00 00       	mov    $0x1000,%eax
c0104fa0:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==4);
c0104fa3:	a1 64 ff 19 c0       	mov    0xc019ff64,%eax
c0104fa8:	83 f8 04             	cmp    $0x4,%eax
c0104fab:	74 16                	je     c0104fc3 <_fifo_check_swap+0x76>
c0104fad:	68 fe cb 10 c0       	push   $0xc010cbfe
c0104fb2:	68 7a cb 10 c0       	push   $0xc010cb7a
c0104fb7:	6a 62                	push   $0x62
c0104fb9:	68 8f cb 10 c0       	push   $0xc010cb8f
c0104fbe:	e8 35 b4 ff ff       	call   c01003f8 <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c0104fc3:	83 ec 0c             	sub    $0xc,%esp
c0104fc6:	68 38 cc 10 c0       	push   $0xc010cc38
c0104fcb:	e8 c2 b2 ff ff       	call   c0100292 <cprintf>
c0104fd0:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x4000 = 0x0d;
c0104fd3:	b8 00 40 00 00       	mov    $0x4000,%eax
c0104fd8:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==4);
c0104fdb:	a1 64 ff 19 c0       	mov    0xc019ff64,%eax
c0104fe0:	83 f8 04             	cmp    $0x4,%eax
c0104fe3:	74 16                	je     c0104ffb <_fifo_check_swap+0xae>
c0104fe5:	68 fe cb 10 c0       	push   $0xc010cbfe
c0104fea:	68 7a cb 10 c0       	push   $0xc010cb7a
c0104fef:	6a 65                	push   $0x65
c0104ff1:	68 8f cb 10 c0       	push   $0xc010cb8f
c0104ff6:	e8 fd b3 ff ff       	call   c01003f8 <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0104ffb:	83 ec 0c             	sub    $0xc,%esp
c0104ffe:	68 60 cc 10 c0       	push   $0xc010cc60
c0105003:	e8 8a b2 ff ff       	call   c0100292 <cprintf>
c0105008:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x2000 = 0x0b;
c010500b:	b8 00 20 00 00       	mov    $0x2000,%eax
c0105010:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==4);
c0105013:	a1 64 ff 19 c0       	mov    0xc019ff64,%eax
c0105018:	83 f8 04             	cmp    $0x4,%eax
c010501b:	74 16                	je     c0105033 <_fifo_check_swap+0xe6>
c010501d:	68 fe cb 10 c0       	push   $0xc010cbfe
c0105022:	68 7a cb 10 c0       	push   $0xc010cb7a
c0105027:	6a 68                	push   $0x68
c0105029:	68 8f cb 10 c0       	push   $0xc010cb8f
c010502e:	e8 c5 b3 ff ff       	call   c01003f8 <__panic>
    cprintf("write Virt Page e in fifo_check_swap\n");
c0105033:	83 ec 0c             	sub    $0xc,%esp
c0105036:	68 88 cc 10 c0       	push   $0xc010cc88
c010503b:	e8 52 b2 ff ff       	call   c0100292 <cprintf>
c0105040:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x5000 = 0x0e;
c0105043:	b8 00 50 00 00       	mov    $0x5000,%eax
c0105048:	c6 00 0e             	movb   $0xe,(%eax)
    assert(pgfault_num==5);
c010504b:	a1 64 ff 19 c0       	mov    0xc019ff64,%eax
c0105050:	83 f8 05             	cmp    $0x5,%eax
c0105053:	74 16                	je     c010506b <_fifo_check_swap+0x11e>
c0105055:	68 ae cc 10 c0       	push   $0xc010ccae
c010505a:	68 7a cb 10 c0       	push   $0xc010cb7a
c010505f:	6a 6b                	push   $0x6b
c0105061:	68 8f cb 10 c0       	push   $0xc010cb8f
c0105066:	e8 8d b3 ff ff       	call   c01003f8 <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c010506b:	83 ec 0c             	sub    $0xc,%esp
c010506e:	68 60 cc 10 c0       	push   $0xc010cc60
c0105073:	e8 1a b2 ff ff       	call   c0100292 <cprintf>
c0105078:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x2000 = 0x0b;
c010507b:	b8 00 20 00 00       	mov    $0x2000,%eax
c0105080:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==5);
c0105083:	a1 64 ff 19 c0       	mov    0xc019ff64,%eax
c0105088:	83 f8 05             	cmp    $0x5,%eax
c010508b:	74 16                	je     c01050a3 <_fifo_check_swap+0x156>
c010508d:	68 ae cc 10 c0       	push   $0xc010ccae
c0105092:	68 7a cb 10 c0       	push   $0xc010cb7a
c0105097:	6a 6e                	push   $0x6e
c0105099:	68 8f cb 10 c0       	push   $0xc010cb8f
c010509e:	e8 55 b3 ff ff       	call   c01003f8 <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c01050a3:	83 ec 0c             	sub    $0xc,%esp
c01050a6:	68 10 cc 10 c0       	push   $0xc010cc10
c01050ab:	e8 e2 b1 ff ff       	call   c0100292 <cprintf>
c01050b0:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x1000 = 0x0a;
c01050b3:	b8 00 10 00 00       	mov    $0x1000,%eax
c01050b8:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==6);
c01050bb:	a1 64 ff 19 c0       	mov    0xc019ff64,%eax
c01050c0:	83 f8 06             	cmp    $0x6,%eax
c01050c3:	74 16                	je     c01050db <_fifo_check_swap+0x18e>
c01050c5:	68 bd cc 10 c0       	push   $0xc010ccbd
c01050ca:	68 7a cb 10 c0       	push   $0xc010cb7a
c01050cf:	6a 71                	push   $0x71
c01050d1:	68 8f cb 10 c0       	push   $0xc010cb8f
c01050d6:	e8 1d b3 ff ff       	call   c01003f8 <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c01050db:	83 ec 0c             	sub    $0xc,%esp
c01050de:	68 60 cc 10 c0       	push   $0xc010cc60
c01050e3:	e8 aa b1 ff ff       	call   c0100292 <cprintf>
c01050e8:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x2000 = 0x0b;
c01050eb:	b8 00 20 00 00       	mov    $0x2000,%eax
c01050f0:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==7);
c01050f3:	a1 64 ff 19 c0       	mov    0xc019ff64,%eax
c01050f8:	83 f8 07             	cmp    $0x7,%eax
c01050fb:	74 16                	je     c0105113 <_fifo_check_swap+0x1c6>
c01050fd:	68 cc cc 10 c0       	push   $0xc010cccc
c0105102:	68 7a cb 10 c0       	push   $0xc010cb7a
c0105107:	6a 74                	push   $0x74
c0105109:	68 8f cb 10 c0       	push   $0xc010cb8f
c010510e:	e8 e5 b2 ff ff       	call   c01003f8 <__panic>
    cprintf("write Virt Page c in fifo_check_swap\n");
c0105113:	83 ec 0c             	sub    $0xc,%esp
c0105116:	68 d8 cb 10 c0       	push   $0xc010cbd8
c010511b:	e8 72 b1 ff ff       	call   c0100292 <cprintf>
c0105120:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x3000 = 0x0c;
c0105123:	b8 00 30 00 00       	mov    $0x3000,%eax
c0105128:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==8);
c010512b:	a1 64 ff 19 c0       	mov    0xc019ff64,%eax
c0105130:	83 f8 08             	cmp    $0x8,%eax
c0105133:	74 16                	je     c010514b <_fifo_check_swap+0x1fe>
c0105135:	68 db cc 10 c0       	push   $0xc010ccdb
c010513a:	68 7a cb 10 c0       	push   $0xc010cb7a
c010513f:	6a 77                	push   $0x77
c0105141:	68 8f cb 10 c0       	push   $0xc010cb8f
c0105146:	e8 ad b2 ff ff       	call   c01003f8 <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c010514b:	83 ec 0c             	sub    $0xc,%esp
c010514e:	68 38 cc 10 c0       	push   $0xc010cc38
c0105153:	e8 3a b1 ff ff       	call   c0100292 <cprintf>
c0105158:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x4000 = 0x0d;
c010515b:	b8 00 40 00 00       	mov    $0x4000,%eax
c0105160:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==9);
c0105163:	a1 64 ff 19 c0       	mov    0xc019ff64,%eax
c0105168:	83 f8 09             	cmp    $0x9,%eax
c010516b:	74 16                	je     c0105183 <_fifo_check_swap+0x236>
c010516d:	68 ea cc 10 c0       	push   $0xc010ccea
c0105172:	68 7a cb 10 c0       	push   $0xc010cb7a
c0105177:	6a 7a                	push   $0x7a
c0105179:	68 8f cb 10 c0       	push   $0xc010cb8f
c010517e:	e8 75 b2 ff ff       	call   c01003f8 <__panic>
    cprintf("write Virt Page e in fifo_check_swap\n");
c0105183:	83 ec 0c             	sub    $0xc,%esp
c0105186:	68 88 cc 10 c0       	push   $0xc010cc88
c010518b:	e8 02 b1 ff ff       	call   c0100292 <cprintf>
c0105190:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x5000 = 0x0e;
c0105193:	b8 00 50 00 00       	mov    $0x5000,%eax
c0105198:	c6 00 0e             	movb   $0xe,(%eax)
    assert(pgfault_num==10);
c010519b:	a1 64 ff 19 c0       	mov    0xc019ff64,%eax
c01051a0:	83 f8 0a             	cmp    $0xa,%eax
c01051a3:	74 16                	je     c01051bb <_fifo_check_swap+0x26e>
c01051a5:	68 f9 cc 10 c0       	push   $0xc010ccf9
c01051aa:	68 7a cb 10 c0       	push   $0xc010cb7a
c01051af:	6a 7d                	push   $0x7d
c01051b1:	68 8f cb 10 c0       	push   $0xc010cb8f
c01051b6:	e8 3d b2 ff ff       	call   c01003f8 <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c01051bb:	83 ec 0c             	sub    $0xc,%esp
c01051be:	68 10 cc 10 c0       	push   $0xc010cc10
c01051c3:	e8 ca b0 ff ff       	call   c0100292 <cprintf>
c01051c8:	83 c4 10             	add    $0x10,%esp
    assert(*(unsigned char *)0x1000 == 0x0a);
c01051cb:	b8 00 10 00 00       	mov    $0x1000,%eax
c01051d0:	0f b6 00             	movzbl (%eax),%eax
c01051d3:	3c 0a                	cmp    $0xa,%al
c01051d5:	74 16                	je     c01051ed <_fifo_check_swap+0x2a0>
c01051d7:	68 0c cd 10 c0       	push   $0xc010cd0c
c01051dc:	68 7a cb 10 c0       	push   $0xc010cb7a
c01051e1:	6a 7f                	push   $0x7f
c01051e3:	68 8f cb 10 c0       	push   $0xc010cb8f
c01051e8:	e8 0b b2 ff ff       	call   c01003f8 <__panic>
    *(unsigned char *)0x1000 = 0x0a;
c01051ed:	b8 00 10 00 00       	mov    $0x1000,%eax
c01051f2:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==11);
c01051f5:	a1 64 ff 19 c0       	mov    0xc019ff64,%eax
c01051fa:	83 f8 0b             	cmp    $0xb,%eax
c01051fd:	74 19                	je     c0105218 <_fifo_check_swap+0x2cb>
c01051ff:	68 2d cd 10 c0       	push   $0xc010cd2d
c0105204:	68 7a cb 10 c0       	push   $0xc010cb7a
c0105209:	68 81 00 00 00       	push   $0x81
c010520e:	68 8f cb 10 c0       	push   $0xc010cb8f
c0105213:	e8 e0 b1 ff ff       	call   c01003f8 <__panic>
    return 0;
c0105218:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010521d:	c9                   	leave  
c010521e:	c3                   	ret    

c010521f <_fifo_init>:


static int
_fifo_init(void)
{
c010521f:	55                   	push   %ebp
c0105220:	89 e5                	mov    %esp,%ebp
    return 0;
c0105222:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105227:	5d                   	pop    %ebp
c0105228:	c3                   	ret    

c0105229 <_fifo_set_unswappable>:

static int
_fifo_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c0105229:	55                   	push   %ebp
c010522a:	89 e5                	mov    %esp,%ebp
    return 0;
c010522c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105231:	5d                   	pop    %ebp
c0105232:	c3                   	ret    

c0105233 <_fifo_tick_event>:

static int
_fifo_tick_event(struct mm_struct *mm)
{ return 0; }
c0105233:	55                   	push   %ebp
c0105234:	89 e5                	mov    %esp,%ebp
c0105236:	b8 00 00 00 00       	mov    $0x0,%eax
c010523b:	5d                   	pop    %ebp
c010523c:	c3                   	ret    

c010523d <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c010523d:	55                   	push   %ebp
c010523e:	89 e5                	mov    %esp,%ebp
c0105240:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0105243:	9c                   	pushf  
c0105244:	58                   	pop    %eax
c0105245:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0105248:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010524b:	25 00 02 00 00       	and    $0x200,%eax
c0105250:	85 c0                	test   %eax,%eax
c0105252:	74 0c                	je     c0105260 <__intr_save+0x23>
        intr_disable();
c0105254:	e8 5e cf ff ff       	call   c01021b7 <intr_disable>
        return 1;
c0105259:	b8 01 00 00 00       	mov    $0x1,%eax
c010525e:	eb 05                	jmp    c0105265 <__intr_save+0x28>
    }
    return 0;
c0105260:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105265:	c9                   	leave  
c0105266:	c3                   	ret    

c0105267 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0105267:	55                   	push   %ebp
c0105268:	89 e5                	mov    %esp,%ebp
c010526a:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010526d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0105271:	74 05                	je     c0105278 <__intr_restore+0x11>
        intr_enable();
c0105273:	e8 38 cf ff ff       	call   c01021b0 <intr_enable>
    }
}
c0105278:	90                   	nop
c0105279:	c9                   	leave  
c010527a:	c3                   	ret    

c010527b <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c010527b:	55                   	push   %ebp
c010527c:	89 e5                	mov    %esp,%ebp
    return page - pages;
c010527e:	8b 45 08             	mov    0x8(%ebp),%eax
c0105281:	8b 15 98 21 1a c0    	mov    0xc01a2198,%edx
c0105287:	29 d0                	sub    %edx,%eax
c0105289:	c1 f8 05             	sar    $0x5,%eax
}
c010528c:	5d                   	pop    %ebp
c010528d:	c3                   	ret    

c010528e <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c010528e:	55                   	push   %ebp
c010528f:	89 e5                	mov    %esp,%ebp
    return page2ppn(page) << PGSHIFT;
c0105291:	ff 75 08             	pushl  0x8(%ebp)
c0105294:	e8 e2 ff ff ff       	call   c010527b <page2ppn>
c0105299:	83 c4 04             	add    $0x4,%esp
c010529c:	c1 e0 0c             	shl    $0xc,%eax
}
c010529f:	c9                   	leave  
c01052a0:	c3                   	ret    

c01052a1 <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c01052a1:	55                   	push   %ebp
c01052a2:	89 e5                	mov    %esp,%ebp
c01052a4:	83 ec 08             	sub    $0x8,%esp
    if (PPN(pa) >= npage) {
c01052a7:	8b 45 08             	mov    0x8(%ebp),%eax
c01052aa:	c1 e8 0c             	shr    $0xc,%eax
c01052ad:	89 c2                	mov    %eax,%edx
c01052af:	a1 80 ff 19 c0       	mov    0xc019ff80,%eax
c01052b4:	39 c2                	cmp    %eax,%edx
c01052b6:	72 14                	jb     c01052cc <pa2page+0x2b>
        panic("pa2page called with invalid pa");
c01052b8:	83 ec 04             	sub    $0x4,%esp
c01052bb:	68 50 cd 10 c0       	push   $0xc010cd50
c01052c0:	6a 5e                	push   $0x5e
c01052c2:	68 6f cd 10 c0       	push   $0xc010cd6f
c01052c7:	e8 2c b1 ff ff       	call   c01003f8 <__panic>
    }
    return &pages[PPN(pa)];
c01052cc:	a1 98 21 1a c0       	mov    0xc01a2198,%eax
c01052d1:	8b 55 08             	mov    0x8(%ebp),%edx
c01052d4:	c1 ea 0c             	shr    $0xc,%edx
c01052d7:	c1 e2 05             	shl    $0x5,%edx
c01052da:	01 d0                	add    %edx,%eax
}
c01052dc:	c9                   	leave  
c01052dd:	c3                   	ret    

c01052de <page2kva>:

static inline void *
page2kva(struct Page *page) {
c01052de:	55                   	push   %ebp
c01052df:	89 e5                	mov    %esp,%ebp
c01052e1:	83 ec 18             	sub    $0x18,%esp
    return KADDR(page2pa(page));
c01052e4:	ff 75 08             	pushl  0x8(%ebp)
c01052e7:	e8 a2 ff ff ff       	call   c010528e <page2pa>
c01052ec:	83 c4 04             	add    $0x4,%esp
c01052ef:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01052f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01052f5:	c1 e8 0c             	shr    $0xc,%eax
c01052f8:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01052fb:	a1 80 ff 19 c0       	mov    0xc019ff80,%eax
c0105300:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0105303:	72 14                	jb     c0105319 <page2kva+0x3b>
c0105305:	ff 75 f4             	pushl  -0xc(%ebp)
c0105308:	68 80 cd 10 c0       	push   $0xc010cd80
c010530d:	6a 65                	push   $0x65
c010530f:	68 6f cd 10 c0       	push   $0xc010cd6f
c0105314:	e8 df b0 ff ff       	call   c01003f8 <__panic>
c0105319:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010531c:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c0105321:	c9                   	leave  
c0105322:	c3                   	ret    

c0105323 <kva2page>:

static inline struct Page *
kva2page(void *kva) {
c0105323:	55                   	push   %ebp
c0105324:	89 e5                	mov    %esp,%ebp
c0105326:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PADDR(kva));
c0105329:	8b 45 08             	mov    0x8(%ebp),%eax
c010532c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010532f:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c0105336:	77 14                	ja     c010534c <kva2page+0x29>
c0105338:	ff 75 f4             	pushl  -0xc(%ebp)
c010533b:	68 a4 cd 10 c0       	push   $0xc010cda4
c0105340:	6a 6a                	push   $0x6a
c0105342:	68 6f cd 10 c0       	push   $0xc010cd6f
c0105347:	e8 ac b0 ff ff       	call   c01003f8 <__panic>
c010534c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010534f:	05 00 00 00 40       	add    $0x40000000,%eax
c0105354:	83 ec 0c             	sub    $0xc,%esp
c0105357:	50                   	push   %eax
c0105358:	e8 44 ff ff ff       	call   c01052a1 <pa2page>
c010535d:	83 c4 10             	add    $0x10,%esp
}
c0105360:	c9                   	leave  
c0105361:	c3                   	ret    

c0105362 <__slob_get_free_pages>:
static slob_t *slobfree = &arena;
static bigblock_t *bigblocks;


static void* __slob_get_free_pages(gfp_t gfp, int order)
{
c0105362:	55                   	push   %ebp
c0105363:	89 e5                	mov    %esp,%ebp
c0105365:	83 ec 18             	sub    $0x18,%esp
  struct Page * page = alloc_pages(1 << order);
c0105368:	8b 45 0c             	mov    0xc(%ebp),%eax
c010536b:	ba 01 00 00 00       	mov    $0x1,%edx
c0105370:	89 c1                	mov    %eax,%ecx
c0105372:	d3 e2                	shl    %cl,%edx
c0105374:	89 d0                	mov    %edx,%eax
c0105376:	83 ec 0c             	sub    $0xc,%esp
c0105379:	50                   	push   %eax
c010537a:	e8 d4 23 00 00       	call   c0107753 <alloc_pages>
c010537f:	83 c4 10             	add    $0x10,%esp
c0105382:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if(!page)
c0105385:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105389:	75 07                	jne    c0105392 <__slob_get_free_pages+0x30>
    return NULL;
c010538b:	b8 00 00 00 00       	mov    $0x0,%eax
c0105390:	eb 0e                	jmp    c01053a0 <__slob_get_free_pages+0x3e>
  return page2kva(page);
c0105392:	83 ec 0c             	sub    $0xc,%esp
c0105395:	ff 75 f4             	pushl  -0xc(%ebp)
c0105398:	e8 41 ff ff ff       	call   c01052de <page2kva>
c010539d:	83 c4 10             	add    $0x10,%esp
}
c01053a0:	c9                   	leave  
c01053a1:	c3                   	ret    

c01053a2 <__slob_free_pages>:

#define __slob_get_free_page(gfp) __slob_get_free_pages(gfp, 0)

static inline void __slob_free_pages(unsigned long kva, int order)
{
c01053a2:	55                   	push   %ebp
c01053a3:	89 e5                	mov    %esp,%ebp
c01053a5:	53                   	push   %ebx
c01053a6:	83 ec 04             	sub    $0x4,%esp
  free_pages(kva2page(kva), 1 << order);
c01053a9:	8b 45 0c             	mov    0xc(%ebp),%eax
c01053ac:	ba 01 00 00 00       	mov    $0x1,%edx
c01053b1:	89 c1                	mov    %eax,%ecx
c01053b3:	d3 e2                	shl    %cl,%edx
c01053b5:	89 d0                	mov    %edx,%eax
c01053b7:	89 c3                	mov    %eax,%ebx
c01053b9:	8b 45 08             	mov    0x8(%ebp),%eax
c01053bc:	83 ec 0c             	sub    $0xc,%esp
c01053bf:	50                   	push   %eax
c01053c0:	e8 5e ff ff ff       	call   c0105323 <kva2page>
c01053c5:	83 c4 10             	add    $0x10,%esp
c01053c8:	83 ec 08             	sub    $0x8,%esp
c01053cb:	53                   	push   %ebx
c01053cc:	50                   	push   %eax
c01053cd:	e8 ed 23 00 00       	call   c01077bf <free_pages>
c01053d2:	83 c4 10             	add    $0x10,%esp
}
c01053d5:	90                   	nop
c01053d6:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c01053d9:	c9                   	leave  
c01053da:	c3                   	ret    

c01053db <slob_alloc>:

static void slob_free(void *b, int size);

static void *slob_alloc(size_t size, gfp_t gfp, int align)
{
c01053db:	55                   	push   %ebp
c01053dc:	89 e5                	mov    %esp,%ebp
c01053de:	83 ec 28             	sub    $0x28,%esp
  assert( (size + SLOB_UNIT) < PAGE_SIZE );
c01053e1:	8b 45 08             	mov    0x8(%ebp),%eax
c01053e4:	83 c0 08             	add    $0x8,%eax
c01053e7:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c01053ec:	76 16                	jbe    c0105404 <slob_alloc+0x29>
c01053ee:	68 c8 cd 10 c0       	push   $0xc010cdc8
c01053f3:	68 e7 cd 10 c0       	push   $0xc010cde7
c01053f8:	6a 64                	push   $0x64
c01053fa:	68 fc cd 10 c0       	push   $0xc010cdfc
c01053ff:	e8 f4 af ff ff       	call   c01003f8 <__panic>

	slob_t *prev, *cur, *aligned = 0;
c0105404:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	int delta = 0, units = SLOB_UNITS(size);
c010540b:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c0105412:	8b 45 08             	mov    0x8(%ebp),%eax
c0105415:	83 c0 07             	add    $0x7,%eax
c0105418:	c1 e8 03             	shr    $0x3,%eax
c010541b:	89 45 e0             	mov    %eax,-0x20(%ebp)
	unsigned long flags;

	spin_lock_irqsave(&slob_lock, flags);
c010541e:	e8 1a fe ff ff       	call   c010523d <__intr_save>
c0105423:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	prev = slobfree;
c0105426:	a1 48 ba 12 c0       	mov    0xc012ba48,%eax
c010542b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c010542e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105431:	8b 40 04             	mov    0x4(%eax),%eax
c0105434:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (align) {
c0105437:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010543b:	74 25                	je     c0105462 <slob_alloc+0x87>
			aligned = (slob_t *)ALIGN((unsigned long)cur, align);
c010543d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0105440:	8b 45 10             	mov    0x10(%ebp),%eax
c0105443:	01 d0                	add    %edx,%eax
c0105445:	8d 50 ff             	lea    -0x1(%eax),%edx
c0105448:	8b 45 10             	mov    0x10(%ebp),%eax
c010544b:	f7 d8                	neg    %eax
c010544d:	21 d0                	and    %edx,%eax
c010544f:	89 45 ec             	mov    %eax,-0x14(%ebp)
			delta = aligned - cur;
c0105452:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0105455:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105458:	29 c2                	sub    %eax,%edx
c010545a:	89 d0                	mov    %edx,%eax
c010545c:	c1 f8 03             	sar    $0x3,%eax
c010545f:	89 45 e8             	mov    %eax,-0x18(%ebp)
		}
		if (cur->units >= units + delta) { /* room enough? */
c0105462:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105465:	8b 00                	mov    (%eax),%eax
c0105467:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c010546a:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010546d:	01 ca                	add    %ecx,%edx
c010546f:	39 d0                	cmp    %edx,%eax
c0105471:	0f 8c b1 00 00 00    	jl     c0105528 <slob_alloc+0x14d>
			if (delta) { /* need to fragment head to align? */
c0105477:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010547b:	74 38                	je     c01054b5 <slob_alloc+0xda>
				aligned->units = cur->units - delta;
c010547d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105480:	8b 00                	mov    (%eax),%eax
c0105482:	2b 45 e8             	sub    -0x18(%ebp),%eax
c0105485:	89 c2                	mov    %eax,%edx
c0105487:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010548a:	89 10                	mov    %edx,(%eax)
				aligned->next = cur->next;
c010548c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010548f:	8b 50 04             	mov    0x4(%eax),%edx
c0105492:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105495:	89 50 04             	mov    %edx,0x4(%eax)
				cur->next = aligned;
c0105498:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010549b:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010549e:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = delta;
c01054a1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01054a4:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01054a7:	89 10                	mov    %edx,(%eax)
				prev = cur;
c01054a9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01054ac:	89 45 f4             	mov    %eax,-0xc(%ebp)
				cur = aligned;
c01054af:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01054b2:	89 45 f0             	mov    %eax,-0x10(%ebp)
			}

			if (cur->units == units) /* exact fit? */
c01054b5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01054b8:	8b 00                	mov    (%eax),%eax
c01054ba:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01054bd:	75 0e                	jne    c01054cd <slob_alloc+0xf2>
				prev->next = cur->next; /* unlink */
c01054bf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01054c2:	8b 50 04             	mov    0x4(%eax),%edx
c01054c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01054c8:	89 50 04             	mov    %edx,0x4(%eax)
c01054cb:	eb 3c                	jmp    c0105509 <slob_alloc+0x12e>
			else { /* fragment */
				prev->next = cur + units;
c01054cd:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01054d0:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c01054d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01054da:	01 c2                	add    %eax,%edx
c01054dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01054df:	89 50 04             	mov    %edx,0x4(%eax)
				prev->next->units = cur->units - units;
c01054e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01054e5:	8b 40 04             	mov    0x4(%eax),%eax
c01054e8:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01054eb:	8b 12                	mov    (%edx),%edx
c01054ed:	2b 55 e0             	sub    -0x20(%ebp),%edx
c01054f0:	89 10                	mov    %edx,(%eax)
				prev->next->next = cur->next;
c01054f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01054f5:	8b 40 04             	mov    0x4(%eax),%eax
c01054f8:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01054fb:	8b 52 04             	mov    0x4(%edx),%edx
c01054fe:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = units;
c0105501:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105504:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0105507:	89 10                	mov    %edx,(%eax)
			}

			slobfree = prev;
c0105509:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010550c:	a3 48 ba 12 c0       	mov    %eax,0xc012ba48
			spin_unlock_irqrestore(&slob_lock, flags);
c0105511:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105514:	83 ec 0c             	sub    $0xc,%esp
c0105517:	50                   	push   %eax
c0105518:	e8 4a fd ff ff       	call   c0105267 <__intr_restore>
c010551d:	83 c4 10             	add    $0x10,%esp
			return cur;
c0105520:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105523:	e9 80 00 00 00       	jmp    c01055a8 <slob_alloc+0x1cd>
		}
		if (cur == slobfree) {
c0105528:	a1 48 ba 12 c0       	mov    0xc012ba48,%eax
c010552d:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0105530:	75 62                	jne    c0105594 <slob_alloc+0x1b9>
			spin_unlock_irqrestore(&slob_lock, flags);
c0105532:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105535:	83 ec 0c             	sub    $0xc,%esp
c0105538:	50                   	push   %eax
c0105539:	e8 29 fd ff ff       	call   c0105267 <__intr_restore>
c010553e:	83 c4 10             	add    $0x10,%esp

			if (size == PAGE_SIZE) /* trying to shrink arena? */
c0105541:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c0105548:	75 07                	jne    c0105551 <slob_alloc+0x176>
				return 0;
c010554a:	b8 00 00 00 00       	mov    $0x0,%eax
c010554f:	eb 57                	jmp    c01055a8 <slob_alloc+0x1cd>

			cur = (slob_t *)__slob_get_free_page(gfp);
c0105551:	83 ec 08             	sub    $0x8,%esp
c0105554:	6a 00                	push   $0x0
c0105556:	ff 75 0c             	pushl  0xc(%ebp)
c0105559:	e8 04 fe ff ff       	call   c0105362 <__slob_get_free_pages>
c010555e:	83 c4 10             	add    $0x10,%esp
c0105561:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (!cur)
c0105564:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0105568:	75 07                	jne    c0105571 <slob_alloc+0x196>
				return 0;
c010556a:	b8 00 00 00 00       	mov    $0x0,%eax
c010556f:	eb 37                	jmp    c01055a8 <slob_alloc+0x1cd>

			slob_free(cur, PAGE_SIZE);
c0105571:	83 ec 08             	sub    $0x8,%esp
c0105574:	68 00 10 00 00       	push   $0x1000
c0105579:	ff 75 f0             	pushl  -0x10(%ebp)
c010557c:	e8 29 00 00 00       	call   c01055aa <slob_free>
c0105581:	83 c4 10             	add    $0x10,%esp
			spin_lock_irqsave(&slob_lock, flags);
c0105584:	e8 b4 fc ff ff       	call   c010523d <__intr_save>
c0105589:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			cur = slobfree;
c010558c:	a1 48 ba 12 c0       	mov    0xc012ba48,%eax
c0105591:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int delta = 0, units = SLOB_UNITS(size);
	unsigned long flags;

	spin_lock_irqsave(&slob_lock, flags);
	prev = slobfree;
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c0105594:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105597:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010559a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010559d:	8b 40 04             	mov    0x4(%eax),%eax
c01055a0:	89 45 f0             	mov    %eax,-0x10(%ebp)

			slob_free(cur, PAGE_SIZE);
			spin_lock_irqsave(&slob_lock, flags);
			cur = slobfree;
		}
	}
c01055a3:	e9 8f fe ff ff       	jmp    c0105437 <slob_alloc+0x5c>
}
c01055a8:	c9                   	leave  
c01055a9:	c3                   	ret    

c01055aa <slob_free>:

static void slob_free(void *block, int size)
{
c01055aa:	55                   	push   %ebp
c01055ab:	89 e5                	mov    %esp,%ebp
c01055ad:	83 ec 18             	sub    $0x18,%esp
	slob_t *cur, *b = (slob_t *)block;
c01055b0:	8b 45 08             	mov    0x8(%ebp),%eax
c01055b3:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c01055b6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01055ba:	0f 84 05 01 00 00    	je     c01056c5 <slob_free+0x11b>
		return;

	if (size)
c01055c0:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01055c4:	74 10                	je     c01055d6 <slob_free+0x2c>
		b->units = SLOB_UNITS(size);
c01055c6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01055c9:	83 c0 07             	add    $0x7,%eax
c01055cc:	c1 e8 03             	shr    $0x3,%eax
c01055cf:	89 c2                	mov    %eax,%edx
c01055d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01055d4:	89 10                	mov    %edx,(%eax)

	/* Find reinsertion point */
	spin_lock_irqsave(&slob_lock, flags);
c01055d6:	e8 62 fc ff ff       	call   c010523d <__intr_save>
c01055db:	89 45 ec             	mov    %eax,-0x14(%ebp)
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c01055de:	a1 48 ba 12 c0       	mov    0xc012ba48,%eax
c01055e3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01055e6:	eb 27                	jmp    c010560f <slob_free+0x65>
		if (cur >= cur->next && (b > cur || b < cur->next))
c01055e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01055eb:	8b 40 04             	mov    0x4(%eax),%eax
c01055ee:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01055f1:	77 13                	ja     c0105606 <slob_free+0x5c>
c01055f3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01055f6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01055f9:	77 27                	ja     c0105622 <slob_free+0x78>
c01055fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01055fe:	8b 40 04             	mov    0x4(%eax),%eax
c0105601:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0105604:	77 1c                	ja     c0105622 <slob_free+0x78>
	if (size)
		b->units = SLOB_UNITS(size);

	/* Find reinsertion point */
	spin_lock_irqsave(&slob_lock, flags);
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c0105606:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105609:	8b 40 04             	mov    0x4(%eax),%eax
c010560c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010560f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105612:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0105615:	76 d1                	jbe    c01055e8 <slob_free+0x3e>
c0105617:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010561a:	8b 40 04             	mov    0x4(%eax),%eax
c010561d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0105620:	76 c6                	jbe    c01055e8 <slob_free+0x3e>
		if (cur >= cur->next && (b > cur || b < cur->next))
			break;

	if (b + b->units == cur->next) {
c0105622:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105625:	8b 00                	mov    (%eax),%eax
c0105627:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c010562e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105631:	01 c2                	add    %eax,%edx
c0105633:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105636:	8b 40 04             	mov    0x4(%eax),%eax
c0105639:	39 c2                	cmp    %eax,%edx
c010563b:	75 25                	jne    c0105662 <slob_free+0xb8>
		b->units += cur->next->units;
c010563d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105640:	8b 10                	mov    (%eax),%edx
c0105642:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105645:	8b 40 04             	mov    0x4(%eax),%eax
c0105648:	8b 00                	mov    (%eax),%eax
c010564a:	01 c2                	add    %eax,%edx
c010564c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010564f:	89 10                	mov    %edx,(%eax)
		b->next = cur->next->next;
c0105651:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105654:	8b 40 04             	mov    0x4(%eax),%eax
c0105657:	8b 50 04             	mov    0x4(%eax),%edx
c010565a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010565d:	89 50 04             	mov    %edx,0x4(%eax)
c0105660:	eb 0c                	jmp    c010566e <slob_free+0xc4>
	} else
		b->next = cur->next;
c0105662:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105665:	8b 50 04             	mov    0x4(%eax),%edx
c0105668:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010566b:	89 50 04             	mov    %edx,0x4(%eax)

	if (cur + cur->units == b) {
c010566e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105671:	8b 00                	mov    (%eax),%eax
c0105673:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c010567a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010567d:	01 d0                	add    %edx,%eax
c010567f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0105682:	75 1f                	jne    c01056a3 <slob_free+0xf9>
		cur->units += b->units;
c0105684:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105687:	8b 10                	mov    (%eax),%edx
c0105689:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010568c:	8b 00                	mov    (%eax),%eax
c010568e:	01 c2                	add    %eax,%edx
c0105690:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105693:	89 10                	mov    %edx,(%eax)
		cur->next = b->next;
c0105695:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105698:	8b 50 04             	mov    0x4(%eax),%edx
c010569b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010569e:	89 50 04             	mov    %edx,0x4(%eax)
c01056a1:	eb 09                	jmp    c01056ac <slob_free+0x102>
	} else
		cur->next = b;
c01056a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01056a6:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01056a9:	89 50 04             	mov    %edx,0x4(%eax)

	slobfree = cur;
c01056ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01056af:	a3 48 ba 12 c0       	mov    %eax,0xc012ba48

	spin_unlock_irqrestore(&slob_lock, flags);
c01056b4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01056b7:	83 ec 0c             	sub    $0xc,%esp
c01056ba:	50                   	push   %eax
c01056bb:	e8 a7 fb ff ff       	call   c0105267 <__intr_restore>
c01056c0:	83 c4 10             	add    $0x10,%esp
c01056c3:	eb 01                	jmp    c01056c6 <slob_free+0x11c>
{
	slob_t *cur, *b = (slob_t *)block;
	unsigned long flags;

	if (!block)
		return;
c01056c5:	90                   	nop
		cur->next = b;

	slobfree = cur;

	spin_unlock_irqrestore(&slob_lock, flags);
}
c01056c6:	c9                   	leave  
c01056c7:	c3                   	ret    

c01056c8 <slob_init>:



void
slob_init(void) {
c01056c8:	55                   	push   %ebp
c01056c9:	89 e5                	mov    %esp,%ebp
c01056cb:	83 ec 08             	sub    $0x8,%esp
  cprintf("use SLOB allocator\n");
c01056ce:	83 ec 0c             	sub    $0xc,%esp
c01056d1:	68 0e ce 10 c0       	push   $0xc010ce0e
c01056d6:	e8 b7 ab ff ff       	call   c0100292 <cprintf>
c01056db:	83 c4 10             	add    $0x10,%esp
}
c01056de:	90                   	nop
c01056df:	c9                   	leave  
c01056e0:	c3                   	ret    

c01056e1 <kmalloc_init>:

inline void 
kmalloc_init(void) {
c01056e1:	55                   	push   %ebp
c01056e2:	89 e5                	mov    %esp,%ebp
c01056e4:	83 ec 08             	sub    $0x8,%esp
    slob_init();
c01056e7:	e8 dc ff ff ff       	call   c01056c8 <slob_init>
    cprintf("kmalloc_init() succeeded!\n");
c01056ec:	83 ec 0c             	sub    $0xc,%esp
c01056ef:	68 22 ce 10 c0       	push   $0xc010ce22
c01056f4:	e8 99 ab ff ff       	call   c0100292 <cprintf>
c01056f9:	83 c4 10             	add    $0x10,%esp
}
c01056fc:	90                   	nop
c01056fd:	c9                   	leave  
c01056fe:	c3                   	ret    

c01056ff <slob_allocated>:

size_t
slob_allocated(void) {
c01056ff:	55                   	push   %ebp
c0105700:	89 e5                	mov    %esp,%ebp
  return 0;
c0105702:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105707:	5d                   	pop    %ebp
c0105708:	c3                   	ret    

c0105709 <kallocated>:

size_t
kallocated(void) {
c0105709:	55                   	push   %ebp
c010570a:	89 e5                	mov    %esp,%ebp
   return slob_allocated();
c010570c:	e8 ee ff ff ff       	call   c01056ff <slob_allocated>
}
c0105711:	5d                   	pop    %ebp
c0105712:	c3                   	ret    

c0105713 <find_order>:

static int find_order(int size)
{
c0105713:	55                   	push   %ebp
c0105714:	89 e5                	mov    %esp,%ebp
c0105716:	83 ec 10             	sub    $0x10,%esp
	int order = 0;
c0105719:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for ( ; size > 4096 ; size >>=1)
c0105720:	eb 07                	jmp    c0105729 <find_order+0x16>
		order++;
c0105722:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
}

static int find_order(int size)
{
	int order = 0;
	for ( ; size > 4096 ; size >>=1)
c0105726:	d1 7d 08             	sarl   0x8(%ebp)
c0105729:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c0105730:	7f f0                	jg     c0105722 <find_order+0xf>
		order++;
	return order;
c0105732:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0105735:	c9                   	leave  
c0105736:	c3                   	ret    

c0105737 <__kmalloc>:

static void *__kmalloc(size_t size, gfp_t gfp)
{
c0105737:	55                   	push   %ebp
c0105738:	89 e5                	mov    %esp,%ebp
c010573a:	83 ec 18             	sub    $0x18,%esp
	slob_t *m;
	bigblock_t *bb;
	unsigned long flags;

	if (size < PAGE_SIZE - SLOB_UNIT) {
c010573d:	81 7d 08 f7 0f 00 00 	cmpl   $0xff7,0x8(%ebp)
c0105744:	77 35                	ja     c010577b <__kmalloc+0x44>
		m = slob_alloc(size + SLOB_UNIT, gfp, 0);
c0105746:	8b 45 08             	mov    0x8(%ebp),%eax
c0105749:	83 c0 08             	add    $0x8,%eax
c010574c:	83 ec 04             	sub    $0x4,%esp
c010574f:	6a 00                	push   $0x0
c0105751:	ff 75 0c             	pushl  0xc(%ebp)
c0105754:	50                   	push   %eax
c0105755:	e8 81 fc ff ff       	call   c01053db <slob_alloc>
c010575a:	83 c4 10             	add    $0x10,%esp
c010575d:	89 45 f4             	mov    %eax,-0xc(%ebp)
		return m ? (void *)(m + 1) : 0;
c0105760:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105764:	74 0b                	je     c0105771 <__kmalloc+0x3a>
c0105766:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105769:	83 c0 08             	add    $0x8,%eax
c010576c:	e9 b3 00 00 00       	jmp    c0105824 <__kmalloc+0xed>
c0105771:	b8 00 00 00 00       	mov    $0x0,%eax
c0105776:	e9 a9 00 00 00       	jmp    c0105824 <__kmalloc+0xed>
	}

	bb = slob_alloc(sizeof(bigblock_t), gfp, 0);
c010577b:	83 ec 04             	sub    $0x4,%esp
c010577e:	6a 00                	push   $0x0
c0105780:	ff 75 0c             	pushl  0xc(%ebp)
c0105783:	6a 0c                	push   $0xc
c0105785:	e8 51 fc ff ff       	call   c01053db <slob_alloc>
c010578a:	83 c4 10             	add    $0x10,%esp
c010578d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (!bb)
c0105790:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0105794:	75 0a                	jne    c01057a0 <__kmalloc+0x69>
		return 0;
c0105796:	b8 00 00 00 00       	mov    $0x0,%eax
c010579b:	e9 84 00 00 00       	jmp    c0105824 <__kmalloc+0xed>

	bb->order = find_order(size);
c01057a0:	8b 45 08             	mov    0x8(%ebp),%eax
c01057a3:	83 ec 0c             	sub    $0xc,%esp
c01057a6:	50                   	push   %eax
c01057a7:	e8 67 ff ff ff       	call   c0105713 <find_order>
c01057ac:	83 c4 10             	add    $0x10,%esp
c01057af:	89 c2                	mov    %eax,%edx
c01057b1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01057b4:	89 10                	mov    %edx,(%eax)
	bb->pages = (void *)__slob_get_free_pages(gfp, bb->order);
c01057b6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01057b9:	8b 00                	mov    (%eax),%eax
c01057bb:	83 ec 08             	sub    $0x8,%esp
c01057be:	50                   	push   %eax
c01057bf:	ff 75 0c             	pushl  0xc(%ebp)
c01057c2:	e8 9b fb ff ff       	call   c0105362 <__slob_get_free_pages>
c01057c7:	83 c4 10             	add    $0x10,%esp
c01057ca:	89 c2                	mov    %eax,%edx
c01057cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01057cf:	89 50 04             	mov    %edx,0x4(%eax)

	if (bb->pages) {
c01057d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01057d5:	8b 40 04             	mov    0x4(%eax),%eax
c01057d8:	85 c0                	test   %eax,%eax
c01057da:	74 33                	je     c010580f <__kmalloc+0xd8>
		spin_lock_irqsave(&block_lock, flags);
c01057dc:	e8 5c fa ff ff       	call   c010523d <__intr_save>
c01057e1:	89 45 ec             	mov    %eax,-0x14(%ebp)
		bb->next = bigblocks;
c01057e4:	8b 15 68 ff 19 c0    	mov    0xc019ff68,%edx
c01057ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01057ed:	89 50 08             	mov    %edx,0x8(%eax)
		bigblocks = bb;
c01057f0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01057f3:	a3 68 ff 19 c0       	mov    %eax,0xc019ff68
		spin_unlock_irqrestore(&block_lock, flags);
c01057f8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01057fb:	83 ec 0c             	sub    $0xc,%esp
c01057fe:	50                   	push   %eax
c01057ff:	e8 63 fa ff ff       	call   c0105267 <__intr_restore>
c0105804:	83 c4 10             	add    $0x10,%esp
		return bb->pages;
c0105807:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010580a:	8b 40 04             	mov    0x4(%eax),%eax
c010580d:	eb 15                	jmp    c0105824 <__kmalloc+0xed>
	}

	slob_free(bb, sizeof(bigblock_t));
c010580f:	83 ec 08             	sub    $0x8,%esp
c0105812:	6a 0c                	push   $0xc
c0105814:	ff 75 f0             	pushl  -0x10(%ebp)
c0105817:	e8 8e fd ff ff       	call   c01055aa <slob_free>
c010581c:	83 c4 10             	add    $0x10,%esp
	return 0;
c010581f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105824:	c9                   	leave  
c0105825:	c3                   	ret    

c0105826 <kmalloc>:

void *
kmalloc(size_t size)
{
c0105826:	55                   	push   %ebp
c0105827:	89 e5                	mov    %esp,%ebp
c0105829:	83 ec 08             	sub    $0x8,%esp
  return __kmalloc(size, 0);
c010582c:	83 ec 08             	sub    $0x8,%esp
c010582f:	6a 00                	push   $0x0
c0105831:	ff 75 08             	pushl  0x8(%ebp)
c0105834:	e8 fe fe ff ff       	call   c0105737 <__kmalloc>
c0105839:	83 c4 10             	add    $0x10,%esp
}
c010583c:	c9                   	leave  
c010583d:	c3                   	ret    

c010583e <kfree>:


void kfree(void *block)
{
c010583e:	55                   	push   %ebp
c010583f:	89 e5                	mov    %esp,%ebp
c0105841:	83 ec 18             	sub    $0x18,%esp
	bigblock_t *bb, **last = &bigblocks;
c0105844:	c7 45 f0 68 ff 19 c0 	movl   $0xc019ff68,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c010584b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010584f:	0f 84 ac 00 00 00    	je     c0105901 <kfree+0xc3>
		return;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c0105855:	8b 45 08             	mov    0x8(%ebp),%eax
c0105858:	25 ff 0f 00 00       	and    $0xfff,%eax
c010585d:	85 c0                	test   %eax,%eax
c010585f:	0f 85 85 00 00 00    	jne    c01058ea <kfree+0xac>
		/* might be on the big block list */
		spin_lock_irqsave(&block_lock, flags);
c0105865:	e8 d3 f9 ff ff       	call   c010523d <__intr_save>
c010586a:	89 45 ec             	mov    %eax,-0x14(%ebp)
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c010586d:	a1 68 ff 19 c0       	mov    0xc019ff68,%eax
c0105872:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105875:	eb 5e                	jmp    c01058d5 <kfree+0x97>
			if (bb->pages == block) {
c0105877:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010587a:	8b 40 04             	mov    0x4(%eax),%eax
c010587d:	3b 45 08             	cmp    0x8(%ebp),%eax
c0105880:	75 41                	jne    c01058c3 <kfree+0x85>
				*last = bb->next;
c0105882:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105885:	8b 50 08             	mov    0x8(%eax),%edx
c0105888:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010588b:	89 10                	mov    %edx,(%eax)
				spin_unlock_irqrestore(&block_lock, flags);
c010588d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105890:	83 ec 0c             	sub    $0xc,%esp
c0105893:	50                   	push   %eax
c0105894:	e8 ce f9 ff ff       	call   c0105267 <__intr_restore>
c0105899:	83 c4 10             	add    $0x10,%esp
				__slob_free_pages((unsigned long)block, bb->order);
c010589c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010589f:	8b 10                	mov    (%eax),%edx
c01058a1:	8b 45 08             	mov    0x8(%ebp),%eax
c01058a4:	83 ec 08             	sub    $0x8,%esp
c01058a7:	52                   	push   %edx
c01058a8:	50                   	push   %eax
c01058a9:	e8 f4 fa ff ff       	call   c01053a2 <__slob_free_pages>
c01058ae:	83 c4 10             	add    $0x10,%esp
				slob_free(bb, sizeof(bigblock_t));
c01058b1:	83 ec 08             	sub    $0x8,%esp
c01058b4:	6a 0c                	push   $0xc
c01058b6:	ff 75 f4             	pushl  -0xc(%ebp)
c01058b9:	e8 ec fc ff ff       	call   c01055aa <slob_free>
c01058be:	83 c4 10             	add    $0x10,%esp
				return;
c01058c1:	eb 3f                	jmp    c0105902 <kfree+0xc4>
		return;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
		/* might be on the big block list */
		spin_lock_irqsave(&block_lock, flags);
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c01058c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01058c6:	83 c0 08             	add    $0x8,%eax
c01058c9:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01058cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01058cf:	8b 40 08             	mov    0x8(%eax),%eax
c01058d2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01058d5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01058d9:	75 9c                	jne    c0105877 <kfree+0x39>
				__slob_free_pages((unsigned long)block, bb->order);
				slob_free(bb, sizeof(bigblock_t));
				return;
			}
		}
		spin_unlock_irqrestore(&block_lock, flags);
c01058db:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01058de:	83 ec 0c             	sub    $0xc,%esp
c01058e1:	50                   	push   %eax
c01058e2:	e8 80 f9 ff ff       	call   c0105267 <__intr_restore>
c01058e7:	83 c4 10             	add    $0x10,%esp
	}

	slob_free((slob_t *)block - 1, 0);
c01058ea:	8b 45 08             	mov    0x8(%ebp),%eax
c01058ed:	83 e8 08             	sub    $0x8,%eax
c01058f0:	83 ec 08             	sub    $0x8,%esp
c01058f3:	6a 00                	push   $0x0
c01058f5:	50                   	push   %eax
c01058f6:	e8 af fc ff ff       	call   c01055aa <slob_free>
c01058fb:	83 c4 10             	add    $0x10,%esp
	return;
c01058fe:	90                   	nop
c01058ff:	eb 01                	jmp    c0105902 <kfree+0xc4>
{
	bigblock_t *bb, **last = &bigblocks;
	unsigned long flags;

	if (!block)
		return;
c0105901:	90                   	nop
		spin_unlock_irqrestore(&block_lock, flags);
	}

	slob_free((slob_t *)block - 1, 0);
	return;
}
c0105902:	c9                   	leave  
c0105903:	c3                   	ret    

c0105904 <ksize>:


unsigned int ksize(const void *block)
{
c0105904:	55                   	push   %ebp
c0105905:	89 e5                	mov    %esp,%ebp
c0105907:	83 ec 18             	sub    $0x18,%esp
	bigblock_t *bb;
	unsigned long flags;

	if (!block)
c010590a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010590e:	75 07                	jne    c0105917 <ksize+0x13>
		return 0;
c0105910:	b8 00 00 00 00       	mov    $0x0,%eax
c0105915:	eb 73                	jmp    c010598a <ksize+0x86>

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c0105917:	8b 45 08             	mov    0x8(%ebp),%eax
c010591a:	25 ff 0f 00 00       	and    $0xfff,%eax
c010591f:	85 c0                	test   %eax,%eax
c0105921:	75 5c                	jne    c010597f <ksize+0x7b>
		spin_lock_irqsave(&block_lock, flags);
c0105923:	e8 15 f9 ff ff       	call   c010523d <__intr_save>
c0105928:	89 45 f0             	mov    %eax,-0x10(%ebp)
		for (bb = bigblocks; bb; bb = bb->next)
c010592b:	a1 68 ff 19 c0       	mov    0xc019ff68,%eax
c0105930:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105933:	eb 35                	jmp    c010596a <ksize+0x66>
			if (bb->pages == block) {
c0105935:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105938:	8b 40 04             	mov    0x4(%eax),%eax
c010593b:	3b 45 08             	cmp    0x8(%ebp),%eax
c010593e:	75 21                	jne    c0105961 <ksize+0x5d>
				spin_unlock_irqrestore(&slob_lock, flags);
c0105940:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105943:	83 ec 0c             	sub    $0xc,%esp
c0105946:	50                   	push   %eax
c0105947:	e8 1b f9 ff ff       	call   c0105267 <__intr_restore>
c010594c:	83 c4 10             	add    $0x10,%esp
				return PAGE_SIZE << bb->order;
c010594f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105952:	8b 00                	mov    (%eax),%eax
c0105954:	ba 00 10 00 00       	mov    $0x1000,%edx
c0105959:	89 c1                	mov    %eax,%ecx
c010595b:	d3 e2                	shl    %cl,%edx
c010595d:	89 d0                	mov    %edx,%eax
c010595f:	eb 29                	jmp    c010598a <ksize+0x86>
	if (!block)
		return 0;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
		spin_lock_irqsave(&block_lock, flags);
		for (bb = bigblocks; bb; bb = bb->next)
c0105961:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105964:	8b 40 08             	mov    0x8(%eax),%eax
c0105967:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010596a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010596e:	75 c5                	jne    c0105935 <ksize+0x31>
			if (bb->pages == block) {
				spin_unlock_irqrestore(&slob_lock, flags);
				return PAGE_SIZE << bb->order;
			}
		spin_unlock_irqrestore(&block_lock, flags);
c0105970:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105973:	83 ec 0c             	sub    $0xc,%esp
c0105976:	50                   	push   %eax
c0105977:	e8 eb f8 ff ff       	call   c0105267 <__intr_restore>
c010597c:	83 c4 10             	add    $0x10,%esp
	}

	return ((slob_t *)block - 1)->units * SLOB_UNIT;
c010597f:	8b 45 08             	mov    0x8(%ebp),%eax
c0105982:	83 e8 08             	sub    $0x8,%eax
c0105985:	8b 00                	mov    (%eax),%eax
c0105987:	c1 e0 03             	shl    $0x3,%eax
}
c010598a:	c9                   	leave  
c010598b:	c3                   	ret    

c010598c <pa2page>:
page2pa(struct Page *page) {
    return page2ppn(page) << PGSHIFT;
}

static inline struct Page *
pa2page(uintptr_t pa) {
c010598c:	55                   	push   %ebp
c010598d:	89 e5                	mov    %esp,%ebp
c010598f:	83 ec 08             	sub    $0x8,%esp
    if (PPN(pa) >= npage) {
c0105992:	8b 45 08             	mov    0x8(%ebp),%eax
c0105995:	c1 e8 0c             	shr    $0xc,%eax
c0105998:	89 c2                	mov    %eax,%edx
c010599a:	a1 80 ff 19 c0       	mov    0xc019ff80,%eax
c010599f:	39 c2                	cmp    %eax,%edx
c01059a1:	72 14                	jb     c01059b7 <pa2page+0x2b>
        panic("pa2page called with invalid pa");
c01059a3:	83 ec 04             	sub    $0x4,%esp
c01059a6:	68 40 ce 10 c0       	push   $0xc010ce40
c01059ab:	6a 5e                	push   $0x5e
c01059ad:	68 5f ce 10 c0       	push   $0xc010ce5f
c01059b2:	e8 41 aa ff ff       	call   c01003f8 <__panic>
    }
    return &pages[PPN(pa)];
c01059b7:	a1 98 21 1a c0       	mov    0xc01a2198,%eax
c01059bc:	8b 55 08             	mov    0x8(%ebp),%edx
c01059bf:	c1 ea 0c             	shr    $0xc,%edx
c01059c2:	c1 e2 05             	shl    $0x5,%edx
c01059c5:	01 d0                	add    %edx,%eax
}
c01059c7:	c9                   	leave  
c01059c8:	c3                   	ret    

c01059c9 <pte2page>:
kva2page(void *kva) {
    return pa2page(PADDR(kva));
}

static inline struct Page *
pte2page(pte_t pte) {
c01059c9:	55                   	push   %ebp
c01059ca:	89 e5                	mov    %esp,%ebp
c01059cc:	83 ec 08             	sub    $0x8,%esp
    if (!(pte & PTE_P)) {
c01059cf:	8b 45 08             	mov    0x8(%ebp),%eax
c01059d2:	83 e0 01             	and    $0x1,%eax
c01059d5:	85 c0                	test   %eax,%eax
c01059d7:	75 14                	jne    c01059ed <pte2page+0x24>
        panic("pte2page called with invalid pte");
c01059d9:	83 ec 04             	sub    $0x4,%esp
c01059dc:	68 70 ce 10 c0       	push   $0xc010ce70
c01059e1:	6a 70                	push   $0x70
c01059e3:	68 5f ce 10 c0       	push   $0xc010ce5f
c01059e8:	e8 0b aa ff ff       	call   c01003f8 <__panic>
    }
    return pa2page(PTE_ADDR(pte));
c01059ed:	8b 45 08             	mov    0x8(%ebp),%eax
c01059f0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01059f5:	83 ec 0c             	sub    $0xc,%esp
c01059f8:	50                   	push   %eax
c01059f9:	e8 8e ff ff ff       	call   c010598c <pa2page>
c01059fe:	83 c4 10             	add    $0x10,%esp
}
c0105a01:	c9                   	leave  
c0105a02:	c3                   	ret    

c0105a03 <pde2page>:

static inline struct Page *
pde2page(pde_t pde) {
c0105a03:	55                   	push   %ebp
c0105a04:	89 e5                	mov    %esp,%ebp
c0105a06:	83 ec 08             	sub    $0x8,%esp
    return pa2page(PDE_ADDR(pde));
c0105a09:	8b 45 08             	mov    0x8(%ebp),%eax
c0105a0c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0105a11:	83 ec 0c             	sub    $0xc,%esp
c0105a14:	50                   	push   %eax
c0105a15:	e8 72 ff ff ff       	call   c010598c <pa2page>
c0105a1a:	83 c4 10             	add    $0x10,%esp
}
c0105a1d:	c9                   	leave  
c0105a1e:	c3                   	ret    

c0105a1f <swap_init>:

static void check_swap(void);

int
swap_init(void)
{
c0105a1f:	55                   	push   %ebp
c0105a20:	89 e5                	mov    %esp,%ebp
c0105a22:	83 ec 18             	sub    $0x18,%esp
     swapfs_init();
c0105a25:	e8 22 36 00 00       	call   c010904c <swapfs_init>

     if (!(1024 <= max_swap_offset && max_swap_offset < MAX_SWAP_OFFSET_LIMIT))
c0105a2a:	a1 5c 21 1a c0       	mov    0xc01a215c,%eax
c0105a2f:	3d ff 03 00 00       	cmp    $0x3ff,%eax
c0105a34:	76 0c                	jbe    c0105a42 <swap_init+0x23>
c0105a36:	a1 5c 21 1a c0       	mov    0xc01a215c,%eax
c0105a3b:	3d ff ff ff 00       	cmp    $0xffffff,%eax
c0105a40:	76 17                	jbe    c0105a59 <swap_init+0x3a>
     {
          panic("bad max_swap_offset %08x.\n", max_swap_offset);
c0105a42:	a1 5c 21 1a c0       	mov    0xc01a215c,%eax
c0105a47:	50                   	push   %eax
c0105a48:	68 91 ce 10 c0       	push   $0xc010ce91
c0105a4d:	6a 29                	push   $0x29
c0105a4f:	68 ac ce 10 c0       	push   $0xc010ceac
c0105a54:	e8 9f a9 ff ff       	call   c01003f8 <__panic>
     }
     
    // LAB3 : set sm as FIFO/ENHANCED CLOCK
    sm = &swap_manager_fifo;
c0105a59:	c7 05 74 ff 19 c0 20 	movl   $0xc012ba20,0xc019ff74
c0105a60:	ba 12 c0 
    // sm = &swap_manager_enclock;
    
     int r = sm->init();
c0105a63:	a1 74 ff 19 c0       	mov    0xc019ff74,%eax
c0105a68:	8b 40 04             	mov    0x4(%eax),%eax
c0105a6b:	ff d0                	call   *%eax
c0105a6d:	89 45 f4             	mov    %eax,-0xc(%ebp)
     
     if (r == 0)
c0105a70:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105a74:	75 27                	jne    c0105a9d <swap_init+0x7e>
     {
          swap_init_ok = 1;
c0105a76:	c7 05 6c ff 19 c0 01 	movl   $0x1,0xc019ff6c
c0105a7d:	00 00 00 
          cprintf("SWAP: manager = %s\n", sm->name);
c0105a80:	a1 74 ff 19 c0       	mov    0xc019ff74,%eax
c0105a85:	8b 00                	mov    (%eax),%eax
c0105a87:	83 ec 08             	sub    $0x8,%esp
c0105a8a:	50                   	push   %eax
c0105a8b:	68 bb ce 10 c0       	push   $0xc010cebb
c0105a90:	e8 fd a7 ff ff       	call   c0100292 <cprintf>
c0105a95:	83 c4 10             	add    $0x10,%esp
          check_swap();
c0105a98:	e8 fa 03 00 00       	call   c0105e97 <check_swap>
     }

     return r;
c0105a9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0105aa0:	c9                   	leave  
c0105aa1:	c3                   	ret    

c0105aa2 <swap_init_mm>:

int
swap_init_mm(struct mm_struct *mm)
{
c0105aa2:	55                   	push   %ebp
c0105aa3:	89 e5                	mov    %esp,%ebp
c0105aa5:	83 ec 08             	sub    $0x8,%esp
     return sm->init_mm(mm);
c0105aa8:	a1 74 ff 19 c0       	mov    0xc019ff74,%eax
c0105aad:	8b 40 08             	mov    0x8(%eax),%eax
c0105ab0:	83 ec 0c             	sub    $0xc,%esp
c0105ab3:	ff 75 08             	pushl  0x8(%ebp)
c0105ab6:	ff d0                	call   *%eax
c0105ab8:	83 c4 10             	add    $0x10,%esp
}
c0105abb:	c9                   	leave  
c0105abc:	c3                   	ret    

c0105abd <swap_tick_event>:

int
swap_tick_event(struct mm_struct *mm)
{
c0105abd:	55                   	push   %ebp
c0105abe:	89 e5                	mov    %esp,%ebp
c0105ac0:	83 ec 08             	sub    $0x8,%esp
     return sm->tick_event(mm);
c0105ac3:	a1 74 ff 19 c0       	mov    0xc019ff74,%eax
c0105ac8:	8b 40 0c             	mov    0xc(%eax),%eax
c0105acb:	83 ec 0c             	sub    $0xc,%esp
c0105ace:	ff 75 08             	pushl  0x8(%ebp)
c0105ad1:	ff d0                	call   *%eax
c0105ad3:	83 c4 10             	add    $0x10,%esp
}
c0105ad6:	c9                   	leave  
c0105ad7:	c3                   	ret    

c0105ad8 <swap_map_swappable>:

int
swap_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c0105ad8:	55                   	push   %ebp
c0105ad9:	89 e5                	mov    %esp,%ebp
c0105adb:	83 ec 08             	sub    $0x8,%esp
     return sm->map_swappable(mm, addr, page, swap_in);
c0105ade:	a1 74 ff 19 c0       	mov    0xc019ff74,%eax
c0105ae3:	8b 40 10             	mov    0x10(%eax),%eax
c0105ae6:	ff 75 14             	pushl  0x14(%ebp)
c0105ae9:	ff 75 10             	pushl  0x10(%ebp)
c0105aec:	ff 75 0c             	pushl  0xc(%ebp)
c0105aef:	ff 75 08             	pushl  0x8(%ebp)
c0105af2:	ff d0                	call   *%eax
c0105af4:	83 c4 10             	add    $0x10,%esp
}
c0105af7:	c9                   	leave  
c0105af8:	c3                   	ret    

c0105af9 <swap_set_unswappable>:

int
swap_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c0105af9:	55                   	push   %ebp
c0105afa:	89 e5                	mov    %esp,%ebp
c0105afc:	83 ec 08             	sub    $0x8,%esp
     return sm->set_unswappable(mm, addr);
c0105aff:	a1 74 ff 19 c0       	mov    0xc019ff74,%eax
c0105b04:	8b 40 14             	mov    0x14(%eax),%eax
c0105b07:	83 ec 08             	sub    $0x8,%esp
c0105b0a:	ff 75 0c             	pushl  0xc(%ebp)
c0105b0d:	ff 75 08             	pushl  0x8(%ebp)
c0105b10:	ff d0                	call   *%eax
c0105b12:	83 c4 10             	add    $0x10,%esp
}
c0105b15:	c9                   	leave  
c0105b16:	c3                   	ret    

c0105b17 <swap_out>:

volatile unsigned int swap_out_num=0;

int
swap_out(struct mm_struct *mm, int n, int in_tick)
{
c0105b17:	55                   	push   %ebp
c0105b18:	89 e5                	mov    %esp,%ebp
c0105b1a:	83 ec 28             	sub    $0x28,%esp
     int i;
     for (i = 0; i != n; ++ i)
c0105b1d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0105b24:	e9 2e 01 00 00       	jmp    c0105c57 <swap_out+0x140>
     {
          uintptr_t v;
          //struct Page **ptr_page=NULL;
          struct Page *page;
          // cprintf("i %d, SWAP: call swap_out_victim\n",i);
          int r = sm->swap_out_victim(mm, &page, in_tick);
c0105b29:	a1 74 ff 19 c0       	mov    0xc019ff74,%eax
c0105b2e:	8b 40 18             	mov    0x18(%eax),%eax
c0105b31:	83 ec 04             	sub    $0x4,%esp
c0105b34:	ff 75 10             	pushl  0x10(%ebp)
c0105b37:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c0105b3a:	52                   	push   %edx
c0105b3b:	ff 75 08             	pushl  0x8(%ebp)
c0105b3e:	ff d0                	call   *%eax
c0105b40:	83 c4 10             	add    $0x10,%esp
c0105b43:	89 45 f0             	mov    %eax,-0x10(%ebp)
          if (r != 0) {
c0105b46:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0105b4a:	74 18                	je     c0105b64 <swap_out+0x4d>
                    cprintf("i %d, swap_out: call swap_out_victim failed\n",i);
c0105b4c:	83 ec 08             	sub    $0x8,%esp
c0105b4f:	ff 75 f4             	pushl  -0xc(%ebp)
c0105b52:	68 d0 ce 10 c0       	push   $0xc010ced0
c0105b57:	e8 36 a7 ff ff       	call   c0100292 <cprintf>
c0105b5c:	83 c4 10             	add    $0x10,%esp
c0105b5f:	e9 ff 00 00 00       	jmp    c0105c63 <swap_out+0x14c>
          }          
          //assert(!PageReserved(page));

          //cprintf("SWAP: choose victim page 0x%08x\n", page);
          
          v=page->pra_vaddr; 
c0105b64:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105b67:	8b 40 1c             	mov    0x1c(%eax),%eax
c0105b6a:	89 45 ec             	mov    %eax,-0x14(%ebp)
          pte_t *ptep = get_pte(mm->pgdir, v, 0);
c0105b6d:	8b 45 08             	mov    0x8(%ebp),%eax
c0105b70:	8b 40 0c             	mov    0xc(%eax),%eax
c0105b73:	83 ec 04             	sub    $0x4,%esp
c0105b76:	6a 00                	push   $0x0
c0105b78:	ff 75 ec             	pushl  -0x14(%ebp)
c0105b7b:	50                   	push   %eax
c0105b7c:	e8 3e 22 00 00       	call   c0107dbf <get_pte>
c0105b81:	83 c4 10             	add    $0x10,%esp
c0105b84:	89 45 e8             	mov    %eax,-0x18(%ebp)
          assert((*ptep & PTE_P) != 0);
c0105b87:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105b8a:	8b 00                	mov    (%eax),%eax
c0105b8c:	83 e0 01             	and    $0x1,%eax
c0105b8f:	85 c0                	test   %eax,%eax
c0105b91:	75 16                	jne    c0105ba9 <swap_out+0x92>
c0105b93:	68 fd ce 10 c0       	push   $0xc010cefd
c0105b98:	68 12 cf 10 c0       	push   $0xc010cf12
c0105b9d:	6a 6b                	push   $0x6b
c0105b9f:	68 ac ce 10 c0       	push   $0xc010ceac
c0105ba4:	e8 4f a8 ff ff       	call   c01003f8 <__panic>

          if (swapfs_write( (page->pra_vaddr/PGSIZE+1)<<8, page) != 0) {
c0105ba9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105bac:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0105baf:	8b 52 1c             	mov    0x1c(%edx),%edx
c0105bb2:	c1 ea 0c             	shr    $0xc,%edx
c0105bb5:	83 c2 01             	add    $0x1,%edx
c0105bb8:	c1 e2 08             	shl    $0x8,%edx
c0105bbb:	83 ec 08             	sub    $0x8,%esp
c0105bbe:	50                   	push   %eax
c0105bbf:	52                   	push   %edx
c0105bc0:	e8 23 35 00 00       	call   c01090e8 <swapfs_write>
c0105bc5:	83 c4 10             	add    $0x10,%esp
c0105bc8:	85 c0                	test   %eax,%eax
c0105bca:	74 2b                	je     c0105bf7 <swap_out+0xe0>
                    cprintf("SWAP: failed to save\n");
c0105bcc:	83 ec 0c             	sub    $0xc,%esp
c0105bcf:	68 27 cf 10 c0       	push   $0xc010cf27
c0105bd4:	e8 b9 a6 ff ff       	call   c0100292 <cprintf>
c0105bd9:	83 c4 10             	add    $0x10,%esp
                    sm->map_swappable(mm, v, page, 0);
c0105bdc:	a1 74 ff 19 c0       	mov    0xc019ff74,%eax
c0105be1:	8b 40 10             	mov    0x10(%eax),%eax
c0105be4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0105be7:	6a 00                	push   $0x0
c0105be9:	52                   	push   %edx
c0105bea:	ff 75 ec             	pushl  -0x14(%ebp)
c0105bed:	ff 75 08             	pushl  0x8(%ebp)
c0105bf0:	ff d0                	call   *%eax
c0105bf2:	83 c4 10             	add    $0x10,%esp
c0105bf5:	eb 5c                	jmp    c0105c53 <swap_out+0x13c>
                    continue;
          }
          else {
                    cprintf("swap_out: i %d, store page in vaddr 0x%x to disk swap entry %d\n", i, v, page->pra_vaddr/PGSIZE+1);
c0105bf7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105bfa:	8b 40 1c             	mov    0x1c(%eax),%eax
c0105bfd:	c1 e8 0c             	shr    $0xc,%eax
c0105c00:	83 c0 01             	add    $0x1,%eax
c0105c03:	50                   	push   %eax
c0105c04:	ff 75 ec             	pushl  -0x14(%ebp)
c0105c07:	ff 75 f4             	pushl  -0xc(%ebp)
c0105c0a:	68 40 cf 10 c0       	push   $0xc010cf40
c0105c0f:	e8 7e a6 ff ff       	call   c0100292 <cprintf>
c0105c14:	83 c4 10             	add    $0x10,%esp
                    *ptep = (page->pra_vaddr/PGSIZE+1)<<8;
c0105c17:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105c1a:	8b 40 1c             	mov    0x1c(%eax),%eax
c0105c1d:	c1 e8 0c             	shr    $0xc,%eax
c0105c20:	83 c0 01             	add    $0x1,%eax
c0105c23:	c1 e0 08             	shl    $0x8,%eax
c0105c26:	89 c2                	mov    %eax,%edx
c0105c28:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105c2b:	89 10                	mov    %edx,(%eax)
                    free_page(page);
c0105c2d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105c30:	83 ec 08             	sub    $0x8,%esp
c0105c33:	6a 01                	push   $0x1
c0105c35:	50                   	push   %eax
c0105c36:	e8 84 1b 00 00       	call   c01077bf <free_pages>
c0105c3b:	83 c4 10             	add    $0x10,%esp
          }
          
          tlb_invalidate(mm->pgdir, v);
c0105c3e:	8b 45 08             	mov    0x8(%ebp),%eax
c0105c41:	8b 40 0c             	mov    0xc(%eax),%eax
c0105c44:	83 ec 08             	sub    $0x8,%esp
c0105c47:	ff 75 ec             	pushl  -0x14(%ebp)
c0105c4a:	50                   	push   %eax
c0105c4b:	e8 b8 27 00 00       	call   c0108408 <tlb_invalidate>
c0105c50:	83 c4 10             	add    $0x10,%esp

int
swap_out(struct mm_struct *mm, int n, int in_tick)
{
     int i;
     for (i = 0; i != n; ++ i)
c0105c53:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0105c57:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105c5a:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0105c5d:	0f 85 c6 fe ff ff    	jne    c0105b29 <swap_out+0x12>
                    free_page(page);
          }
          
          tlb_invalidate(mm->pgdir, v);
     }
     return i;
c0105c63:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0105c66:	c9                   	leave  
c0105c67:	c3                   	ret    

c0105c68 <swap_in>:

int
swap_in(struct mm_struct *mm, uintptr_t addr, struct Page **ptr_result)
{
c0105c68:	55                   	push   %ebp
c0105c69:	89 e5                	mov    %esp,%ebp
c0105c6b:	83 ec 18             	sub    $0x18,%esp
     struct Page *result = alloc_page();
c0105c6e:	83 ec 0c             	sub    $0xc,%esp
c0105c71:	6a 01                	push   $0x1
c0105c73:	e8 db 1a 00 00       	call   c0107753 <alloc_pages>
c0105c78:	83 c4 10             	add    $0x10,%esp
c0105c7b:	89 45 f4             	mov    %eax,-0xc(%ebp)
     assert(result!=NULL);
c0105c7e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105c82:	75 19                	jne    c0105c9d <swap_in+0x35>
c0105c84:	68 80 cf 10 c0       	push   $0xc010cf80
c0105c89:	68 12 cf 10 c0       	push   $0xc010cf12
c0105c8e:	68 81 00 00 00       	push   $0x81
c0105c93:	68 ac ce 10 c0       	push   $0xc010ceac
c0105c98:	e8 5b a7 ff ff       	call   c01003f8 <__panic>

     pte_t *ptep = get_pte(mm->pgdir, addr, 0);
c0105c9d:	8b 45 08             	mov    0x8(%ebp),%eax
c0105ca0:	8b 40 0c             	mov    0xc(%eax),%eax
c0105ca3:	83 ec 04             	sub    $0x4,%esp
c0105ca6:	6a 00                	push   $0x0
c0105ca8:	ff 75 0c             	pushl  0xc(%ebp)
c0105cab:	50                   	push   %eax
c0105cac:	e8 0e 21 00 00       	call   c0107dbf <get_pte>
c0105cb1:	83 c4 10             	add    $0x10,%esp
c0105cb4:	89 45 f0             	mov    %eax,-0x10(%ebp)
     // cprintf("SWAP: load ptep %x swap entry %d to vaddr 0x%08x, page %x, No %d\n", ptep, (*ptep)>>8, addr, result, (result-pages));
    
     int r;
     if ((r = swapfs_read((*ptep), result)) != 0)
c0105cb7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105cba:	8b 00                	mov    (%eax),%eax
c0105cbc:	83 ec 08             	sub    $0x8,%esp
c0105cbf:	ff 75 f4             	pushl  -0xc(%ebp)
c0105cc2:	50                   	push   %eax
c0105cc3:	e8 c7 33 00 00       	call   c010908f <swapfs_read>
c0105cc8:	83 c4 10             	add    $0x10,%esp
c0105ccb:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0105cce:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0105cd2:	74 1f                	je     c0105cf3 <swap_in+0x8b>
     {
        assert(r!=0);
c0105cd4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0105cd8:	75 19                	jne    c0105cf3 <swap_in+0x8b>
c0105cda:	68 8d cf 10 c0       	push   $0xc010cf8d
c0105cdf:	68 12 cf 10 c0       	push   $0xc010cf12
c0105ce4:	68 89 00 00 00       	push   $0x89
c0105ce9:	68 ac ce 10 c0       	push   $0xc010ceac
c0105cee:	e8 05 a7 ff ff       	call   c01003f8 <__panic>
     }
     cprintf("swap_in: load disk swap entry %d with swap_page in vadr 0x%x\n", (*ptep)>>8, addr);
c0105cf3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105cf6:	8b 00                	mov    (%eax),%eax
c0105cf8:	c1 e8 08             	shr    $0x8,%eax
c0105cfb:	83 ec 04             	sub    $0x4,%esp
c0105cfe:	ff 75 0c             	pushl  0xc(%ebp)
c0105d01:	50                   	push   %eax
c0105d02:	68 94 cf 10 c0       	push   $0xc010cf94
c0105d07:	e8 86 a5 ff ff       	call   c0100292 <cprintf>
c0105d0c:	83 c4 10             	add    $0x10,%esp
     *ptr_result=result;
c0105d0f:	8b 45 10             	mov    0x10(%ebp),%eax
c0105d12:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0105d15:	89 10                	mov    %edx,(%eax)
     return 0;
c0105d17:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105d1c:	c9                   	leave  
c0105d1d:	c3                   	ret    

c0105d1e <check_content_set>:



static inline void
check_content_set(void)
{
c0105d1e:	55                   	push   %ebp
c0105d1f:	89 e5                	mov    %esp,%ebp
c0105d21:	83 ec 08             	sub    $0x8,%esp
     *(unsigned char *)0x1000 = 0x0a;
c0105d24:	b8 00 10 00 00       	mov    $0x1000,%eax
c0105d29:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c0105d2c:	a1 64 ff 19 c0       	mov    0xc019ff64,%eax
c0105d31:	83 f8 01             	cmp    $0x1,%eax
c0105d34:	74 19                	je     c0105d4f <check_content_set+0x31>
c0105d36:	68 d2 cf 10 c0       	push   $0xc010cfd2
c0105d3b:	68 12 cf 10 c0       	push   $0xc010cf12
c0105d40:	68 96 00 00 00       	push   $0x96
c0105d45:	68 ac ce 10 c0       	push   $0xc010ceac
c0105d4a:	e8 a9 a6 ff ff       	call   c01003f8 <__panic>
     *(unsigned char *)0x1010 = 0x0a;
c0105d4f:	b8 10 10 00 00       	mov    $0x1010,%eax
c0105d54:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c0105d57:	a1 64 ff 19 c0       	mov    0xc019ff64,%eax
c0105d5c:	83 f8 01             	cmp    $0x1,%eax
c0105d5f:	74 19                	je     c0105d7a <check_content_set+0x5c>
c0105d61:	68 d2 cf 10 c0       	push   $0xc010cfd2
c0105d66:	68 12 cf 10 c0       	push   $0xc010cf12
c0105d6b:	68 98 00 00 00       	push   $0x98
c0105d70:	68 ac ce 10 c0       	push   $0xc010ceac
c0105d75:	e8 7e a6 ff ff       	call   c01003f8 <__panic>
     *(unsigned char *)0x2000 = 0x0b;
c0105d7a:	b8 00 20 00 00       	mov    $0x2000,%eax
c0105d7f:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c0105d82:	a1 64 ff 19 c0       	mov    0xc019ff64,%eax
c0105d87:	83 f8 02             	cmp    $0x2,%eax
c0105d8a:	74 19                	je     c0105da5 <check_content_set+0x87>
c0105d8c:	68 e1 cf 10 c0       	push   $0xc010cfe1
c0105d91:	68 12 cf 10 c0       	push   $0xc010cf12
c0105d96:	68 9a 00 00 00       	push   $0x9a
c0105d9b:	68 ac ce 10 c0       	push   $0xc010ceac
c0105da0:	e8 53 a6 ff ff       	call   c01003f8 <__panic>
     *(unsigned char *)0x2010 = 0x0b;
c0105da5:	b8 10 20 00 00       	mov    $0x2010,%eax
c0105daa:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c0105dad:	a1 64 ff 19 c0       	mov    0xc019ff64,%eax
c0105db2:	83 f8 02             	cmp    $0x2,%eax
c0105db5:	74 19                	je     c0105dd0 <check_content_set+0xb2>
c0105db7:	68 e1 cf 10 c0       	push   $0xc010cfe1
c0105dbc:	68 12 cf 10 c0       	push   $0xc010cf12
c0105dc1:	68 9c 00 00 00       	push   $0x9c
c0105dc6:	68 ac ce 10 c0       	push   $0xc010ceac
c0105dcb:	e8 28 a6 ff ff       	call   c01003f8 <__panic>
     *(unsigned char *)0x3000 = 0x0c;
c0105dd0:	b8 00 30 00 00       	mov    $0x3000,%eax
c0105dd5:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c0105dd8:	a1 64 ff 19 c0       	mov    0xc019ff64,%eax
c0105ddd:	83 f8 03             	cmp    $0x3,%eax
c0105de0:	74 19                	je     c0105dfb <check_content_set+0xdd>
c0105de2:	68 f0 cf 10 c0       	push   $0xc010cff0
c0105de7:	68 12 cf 10 c0       	push   $0xc010cf12
c0105dec:	68 9e 00 00 00       	push   $0x9e
c0105df1:	68 ac ce 10 c0       	push   $0xc010ceac
c0105df6:	e8 fd a5 ff ff       	call   c01003f8 <__panic>
     *(unsigned char *)0x3010 = 0x0c;
c0105dfb:	b8 10 30 00 00       	mov    $0x3010,%eax
c0105e00:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c0105e03:	a1 64 ff 19 c0       	mov    0xc019ff64,%eax
c0105e08:	83 f8 03             	cmp    $0x3,%eax
c0105e0b:	74 19                	je     c0105e26 <check_content_set+0x108>
c0105e0d:	68 f0 cf 10 c0       	push   $0xc010cff0
c0105e12:	68 12 cf 10 c0       	push   $0xc010cf12
c0105e17:	68 a0 00 00 00       	push   $0xa0
c0105e1c:	68 ac ce 10 c0       	push   $0xc010ceac
c0105e21:	e8 d2 a5 ff ff       	call   c01003f8 <__panic>
     *(unsigned char *)0x4000 = 0x0d;
c0105e26:	b8 00 40 00 00       	mov    $0x4000,%eax
c0105e2b:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c0105e2e:	a1 64 ff 19 c0       	mov    0xc019ff64,%eax
c0105e33:	83 f8 04             	cmp    $0x4,%eax
c0105e36:	74 19                	je     c0105e51 <check_content_set+0x133>
c0105e38:	68 ff cf 10 c0       	push   $0xc010cfff
c0105e3d:	68 12 cf 10 c0       	push   $0xc010cf12
c0105e42:	68 a2 00 00 00       	push   $0xa2
c0105e47:	68 ac ce 10 c0       	push   $0xc010ceac
c0105e4c:	e8 a7 a5 ff ff       	call   c01003f8 <__panic>
     *(unsigned char *)0x4010 = 0x0d;
c0105e51:	b8 10 40 00 00       	mov    $0x4010,%eax
c0105e56:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c0105e59:	a1 64 ff 19 c0       	mov    0xc019ff64,%eax
c0105e5e:	83 f8 04             	cmp    $0x4,%eax
c0105e61:	74 19                	je     c0105e7c <check_content_set+0x15e>
c0105e63:	68 ff cf 10 c0       	push   $0xc010cfff
c0105e68:	68 12 cf 10 c0       	push   $0xc010cf12
c0105e6d:	68 a4 00 00 00       	push   $0xa4
c0105e72:	68 ac ce 10 c0       	push   $0xc010ceac
c0105e77:	e8 7c a5 ff ff       	call   c01003f8 <__panic>
}
c0105e7c:	90                   	nop
c0105e7d:	c9                   	leave  
c0105e7e:	c3                   	ret    

c0105e7f <check_content_access>:

static inline int
check_content_access(void)
{
c0105e7f:	55                   	push   %ebp
c0105e80:	89 e5                	mov    %esp,%ebp
c0105e82:	83 ec 18             	sub    $0x18,%esp
    int ret = sm->check_swap();
c0105e85:	a1 74 ff 19 c0       	mov    0xc019ff74,%eax
c0105e8a:	8b 40 1c             	mov    0x1c(%eax),%eax
c0105e8d:	ff d0                	call   *%eax
c0105e8f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return ret;
c0105e92:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0105e95:	c9                   	leave  
c0105e96:	c3                   	ret    

c0105e97 <check_swap>:
#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
check_swap(void)
{
c0105e97:	55                   	push   %ebp
c0105e98:	89 e5                	mov    %esp,%ebp
c0105e9a:	83 ec 68             	sub    $0x68,%esp
    //backup mem env
     int ret, count = 0, total = 0, i;
c0105e9d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0105ea4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
     list_entry_t *le = &free_list;
c0105eab:	c7 45 e8 84 21 1a c0 	movl   $0xc01a2184,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c0105eb2:	eb 60                	jmp    c0105f14 <check_swap+0x7d>
        struct Page *p = le2page(le, page_link);
c0105eb4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105eb7:	83 e8 0c             	sub    $0xc,%eax
c0105eba:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(PageProperty(p));
c0105ebd:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105ec0:	83 c0 04             	add    $0x4,%eax
c0105ec3:	c7 45 b0 01 00 00 00 	movl   $0x1,-0x50(%ebp)
c0105eca:	89 45 ac             	mov    %eax,-0x54(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0105ecd:	8b 45 ac             	mov    -0x54(%ebp),%eax
c0105ed0:	8b 55 b0             	mov    -0x50(%ebp),%edx
c0105ed3:	0f a3 10             	bt     %edx,(%eax)
c0105ed6:	19 c0                	sbb    %eax,%eax
c0105ed8:	89 45 a8             	mov    %eax,-0x58(%ebp)
    return oldbit != 0;
c0105edb:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
c0105edf:	0f 95 c0             	setne  %al
c0105ee2:	0f b6 c0             	movzbl %al,%eax
c0105ee5:	85 c0                	test   %eax,%eax
c0105ee7:	75 19                	jne    c0105f02 <check_swap+0x6b>
c0105ee9:	68 0e d0 10 c0       	push   $0xc010d00e
c0105eee:	68 12 cf 10 c0       	push   $0xc010cf12
c0105ef3:	68 bf 00 00 00       	push   $0xbf
c0105ef8:	68 ac ce 10 c0       	push   $0xc010ceac
c0105efd:	e8 f6 a4 ff ff       	call   c01003f8 <__panic>
        count ++, total += p->property;
c0105f02:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0105f06:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105f09:	8b 50 08             	mov    0x8(%eax),%edx
c0105f0c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105f0f:	01 d0                	add    %edx,%eax
c0105f11:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105f14:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105f17:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0105f1a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0105f1d:	8b 40 04             	mov    0x4(%eax),%eax
check_swap(void)
{
    //backup mem env
     int ret, count = 0, total = 0, i;
     list_entry_t *le = &free_list;
     while ((le = list_next(le)) != &free_list) {
c0105f20:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0105f23:	81 7d e8 84 21 1a c0 	cmpl   $0xc01a2184,-0x18(%ebp)
c0105f2a:	75 88                	jne    c0105eb4 <check_swap+0x1d>
        struct Page *p = le2page(le, page_link);
        assert(PageProperty(p));
        count ++, total += p->property;
     }
     assert(total == nr_free_pages());
c0105f2c:	e8 c3 18 00 00       	call   c01077f4 <nr_free_pages>
c0105f31:	89 c2                	mov    %eax,%edx
c0105f33:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105f36:	39 c2                	cmp    %eax,%edx
c0105f38:	74 19                	je     c0105f53 <check_swap+0xbc>
c0105f3a:	68 1e d0 10 c0       	push   $0xc010d01e
c0105f3f:	68 12 cf 10 c0       	push   $0xc010cf12
c0105f44:	68 c2 00 00 00       	push   $0xc2
c0105f49:	68 ac ce 10 c0       	push   $0xc010ceac
c0105f4e:	e8 a5 a4 ff ff       	call   c01003f8 <__panic>
     cprintf("BEGIN check_swap: count %d, total %d\n",count,total);
c0105f53:	83 ec 04             	sub    $0x4,%esp
c0105f56:	ff 75 f0             	pushl  -0x10(%ebp)
c0105f59:	ff 75 f4             	pushl  -0xc(%ebp)
c0105f5c:	68 38 d0 10 c0       	push   $0xc010d038
c0105f61:	e8 2c a3 ff ff       	call   c0100292 <cprintf>
c0105f66:	83 c4 10             	add    $0x10,%esp
     
     //now we set the phy pages env     
     struct mm_struct *mm = mm_create();
c0105f69:	e8 92 dd ff ff       	call   c0103d00 <mm_create>
c0105f6e:	89 45 d8             	mov    %eax,-0x28(%ebp)
     assert(mm != NULL);
c0105f71:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c0105f75:	75 19                	jne    c0105f90 <check_swap+0xf9>
c0105f77:	68 5e d0 10 c0       	push   $0xc010d05e
c0105f7c:	68 12 cf 10 c0       	push   $0xc010cf12
c0105f81:	68 c7 00 00 00       	push   $0xc7
c0105f86:	68 ac ce 10 c0       	push   $0xc010ceac
c0105f8b:	e8 68 a4 ff ff       	call   c01003f8 <__panic>

     extern struct mm_struct *check_mm_struct;
     assert(check_mm_struct == NULL);
c0105f90:	a1 bc 20 1a c0       	mov    0xc01a20bc,%eax
c0105f95:	85 c0                	test   %eax,%eax
c0105f97:	74 19                	je     c0105fb2 <check_swap+0x11b>
c0105f99:	68 69 d0 10 c0       	push   $0xc010d069
c0105f9e:	68 12 cf 10 c0       	push   $0xc010cf12
c0105fa3:	68 ca 00 00 00       	push   $0xca
c0105fa8:	68 ac ce 10 c0       	push   $0xc010ceac
c0105fad:	e8 46 a4 ff ff       	call   c01003f8 <__panic>

     check_mm_struct = mm;
c0105fb2:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0105fb5:	a3 bc 20 1a c0       	mov    %eax,0xc01a20bc

     pde_t *pgdir = mm->pgdir = boot_pgdir;
c0105fba:	8b 15 60 ba 12 c0    	mov    0xc012ba60,%edx
c0105fc0:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0105fc3:	89 50 0c             	mov    %edx,0xc(%eax)
c0105fc6:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0105fc9:	8b 40 0c             	mov    0xc(%eax),%eax
c0105fcc:	89 45 d4             	mov    %eax,-0x2c(%ebp)
     assert(pgdir[0] == 0);
c0105fcf:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0105fd2:	8b 00                	mov    (%eax),%eax
c0105fd4:	85 c0                	test   %eax,%eax
c0105fd6:	74 19                	je     c0105ff1 <check_swap+0x15a>
c0105fd8:	68 81 d0 10 c0       	push   $0xc010d081
c0105fdd:	68 12 cf 10 c0       	push   $0xc010cf12
c0105fe2:	68 cf 00 00 00       	push   $0xcf
c0105fe7:	68 ac ce 10 c0       	push   $0xc010ceac
c0105fec:	e8 07 a4 ff ff       	call   c01003f8 <__panic>

     struct vma_struct *vma = vma_create(BEING_CHECK_VALID_VADDR, CHECK_VALID_VADDR, VM_WRITE | VM_READ);
c0105ff1:	83 ec 04             	sub    $0x4,%esp
c0105ff4:	6a 03                	push   $0x3
c0105ff6:	68 00 60 00 00       	push   $0x6000
c0105ffb:	68 00 10 00 00       	push   $0x1000
c0106000:	e8 99 dd ff ff       	call   c0103d9e <vma_create>
c0106005:	83 c4 10             	add    $0x10,%esp
c0106008:	89 45 d0             	mov    %eax,-0x30(%ebp)
     assert(vma != NULL);
c010600b:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c010600f:	75 19                	jne    c010602a <check_swap+0x193>
c0106011:	68 8f d0 10 c0       	push   $0xc010d08f
c0106016:	68 12 cf 10 c0       	push   $0xc010cf12
c010601b:	68 d2 00 00 00       	push   $0xd2
c0106020:	68 ac ce 10 c0       	push   $0xc010ceac
c0106025:	e8 ce a3 ff ff       	call   c01003f8 <__panic>

     insert_vma_struct(mm, vma);
c010602a:	83 ec 08             	sub    $0x8,%esp
c010602d:	ff 75 d0             	pushl  -0x30(%ebp)
c0106030:	ff 75 d8             	pushl  -0x28(%ebp)
c0106033:	e8 ce de ff ff       	call   c0103f06 <insert_vma_struct>
c0106038:	83 c4 10             	add    $0x10,%esp

     //setup the temp Page Table vaddr 0~4MB
     cprintf("setup Page Table for vaddr 0X1000, so alloc a page\n");
c010603b:	83 ec 0c             	sub    $0xc,%esp
c010603e:	68 9c d0 10 c0       	push   $0xc010d09c
c0106043:	e8 4a a2 ff ff       	call   c0100292 <cprintf>
c0106048:	83 c4 10             	add    $0x10,%esp
     pte_t *temp_ptep=NULL;
c010604b:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
c0106052:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0106055:	8b 40 0c             	mov    0xc(%eax),%eax
c0106058:	83 ec 04             	sub    $0x4,%esp
c010605b:	6a 01                	push   $0x1
c010605d:	68 00 10 00 00       	push   $0x1000
c0106062:	50                   	push   %eax
c0106063:	e8 57 1d 00 00       	call   c0107dbf <get_pte>
c0106068:	83 c4 10             	add    $0x10,%esp
c010606b:	89 45 cc             	mov    %eax,-0x34(%ebp)
     assert(temp_ptep!= NULL);
c010606e:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0106072:	75 19                	jne    c010608d <check_swap+0x1f6>
c0106074:	68 d0 d0 10 c0       	push   $0xc010d0d0
c0106079:	68 12 cf 10 c0       	push   $0xc010cf12
c010607e:	68 da 00 00 00       	push   $0xda
c0106083:	68 ac ce 10 c0       	push   $0xc010ceac
c0106088:	e8 6b a3 ff ff       	call   c01003f8 <__panic>
     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
c010608d:	83 ec 0c             	sub    $0xc,%esp
c0106090:	68 e4 d0 10 c0       	push   $0xc010d0e4
c0106095:	e8 f8 a1 ff ff       	call   c0100292 <cprintf>
c010609a:	83 c4 10             	add    $0x10,%esp
     
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c010609d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01060a4:	e9 90 00 00 00       	jmp    c0106139 <check_swap+0x2a2>
          check_rp[i] = alloc_page();
c01060a9:	83 ec 0c             	sub    $0xc,%esp
c01060ac:	6a 01                	push   $0x1
c01060ae:	e8 a0 16 00 00       	call   c0107753 <alloc_pages>
c01060b3:	83 c4 10             	add    $0x10,%esp
c01060b6:	89 c2                	mov    %eax,%edx
c01060b8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01060bb:	89 14 85 c0 20 1a c0 	mov    %edx,-0x3fe5df40(,%eax,4)
          assert(check_rp[i] != NULL );
c01060c2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01060c5:	8b 04 85 c0 20 1a c0 	mov    -0x3fe5df40(,%eax,4),%eax
c01060cc:	85 c0                	test   %eax,%eax
c01060ce:	75 19                	jne    c01060e9 <check_swap+0x252>
c01060d0:	68 08 d1 10 c0       	push   $0xc010d108
c01060d5:	68 12 cf 10 c0       	push   $0xc010cf12
c01060da:	68 df 00 00 00       	push   $0xdf
c01060df:	68 ac ce 10 c0       	push   $0xc010ceac
c01060e4:	e8 0f a3 ff ff       	call   c01003f8 <__panic>
          assert(!PageProperty(check_rp[i]));
c01060e9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01060ec:	8b 04 85 c0 20 1a c0 	mov    -0x3fe5df40(,%eax,4),%eax
c01060f3:	83 c0 04             	add    $0x4,%eax
c01060f6:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
c01060fd:	89 45 a4             	mov    %eax,-0x5c(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0106100:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0106103:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106106:	0f a3 10             	bt     %edx,(%eax)
c0106109:	19 c0                	sbb    %eax,%eax
c010610b:	89 45 a0             	mov    %eax,-0x60(%ebp)
    return oldbit != 0;
c010610e:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
c0106112:	0f 95 c0             	setne  %al
c0106115:	0f b6 c0             	movzbl %al,%eax
c0106118:	85 c0                	test   %eax,%eax
c010611a:	74 19                	je     c0106135 <check_swap+0x29e>
c010611c:	68 1c d1 10 c0       	push   $0xc010d11c
c0106121:	68 12 cf 10 c0       	push   $0xc010cf12
c0106126:	68 e0 00 00 00       	push   $0xe0
c010612b:	68 ac ce 10 c0       	push   $0xc010ceac
c0106130:	e8 c3 a2 ff ff       	call   c01003f8 <__panic>
     pte_t *temp_ptep=NULL;
     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
     assert(temp_ptep!= NULL);
     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
     
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0106135:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0106139:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c010613d:	0f 8e 66 ff ff ff    	jle    c01060a9 <check_swap+0x212>
          check_rp[i] = alloc_page();
          assert(check_rp[i] != NULL );
          assert(!PageProperty(check_rp[i]));
     }
     list_entry_t free_list_store = free_list;
c0106143:	a1 84 21 1a c0       	mov    0xc01a2184,%eax
c0106148:	8b 15 88 21 1a c0    	mov    0xc01a2188,%edx
c010614e:	89 45 98             	mov    %eax,-0x68(%ebp)
c0106151:	89 55 9c             	mov    %edx,-0x64(%ebp)
c0106154:	c7 45 c0 84 21 1a c0 	movl   $0xc01a2184,-0x40(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010615b:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010615e:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0106161:	89 50 04             	mov    %edx,0x4(%eax)
c0106164:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0106167:	8b 50 04             	mov    0x4(%eax),%edx
c010616a:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010616d:	89 10                	mov    %edx,(%eax)
c010616f:	c7 45 c8 84 21 1a c0 	movl   $0xc01a2184,-0x38(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0106176:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0106179:	8b 40 04             	mov    0x4(%eax),%eax
c010617c:	39 45 c8             	cmp    %eax,-0x38(%ebp)
c010617f:	0f 94 c0             	sete   %al
c0106182:	0f b6 c0             	movzbl %al,%eax
     list_init(&free_list);
     assert(list_empty(&free_list));
c0106185:	85 c0                	test   %eax,%eax
c0106187:	75 19                	jne    c01061a2 <check_swap+0x30b>
c0106189:	68 37 d1 10 c0       	push   $0xc010d137
c010618e:	68 12 cf 10 c0       	push   $0xc010cf12
c0106193:	68 e4 00 00 00       	push   $0xe4
c0106198:	68 ac ce 10 c0       	push   $0xc010ceac
c010619d:	e8 56 a2 ff ff       	call   c01003f8 <__panic>
     
     //assert(alloc_page() == NULL);
     
     unsigned int nr_free_store = nr_free;
c01061a2:	a1 8c 21 1a c0       	mov    0xc01a218c,%eax
c01061a7:	89 45 bc             	mov    %eax,-0x44(%ebp)
     nr_free = 0;
c01061aa:	c7 05 8c 21 1a c0 00 	movl   $0x0,0xc01a218c
c01061b1:	00 00 00 
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01061b4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01061bb:	eb 1c                	jmp    c01061d9 <check_swap+0x342>
        free_pages(check_rp[i],1);
c01061bd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01061c0:	8b 04 85 c0 20 1a c0 	mov    -0x3fe5df40(,%eax,4),%eax
c01061c7:	83 ec 08             	sub    $0x8,%esp
c01061ca:	6a 01                	push   $0x1
c01061cc:	50                   	push   %eax
c01061cd:	e8 ed 15 00 00       	call   c01077bf <free_pages>
c01061d2:	83 c4 10             	add    $0x10,%esp
     
     //assert(alloc_page() == NULL);
     
     unsigned int nr_free_store = nr_free;
     nr_free = 0;
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01061d5:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c01061d9:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c01061dd:	7e de                	jle    c01061bd <check_swap+0x326>
        free_pages(check_rp[i],1);
     }
     assert(nr_free==CHECK_VALID_PHY_PAGE_NUM);
c01061df:	a1 8c 21 1a c0       	mov    0xc01a218c,%eax
c01061e4:	83 f8 04             	cmp    $0x4,%eax
c01061e7:	74 19                	je     c0106202 <check_swap+0x36b>
c01061e9:	68 50 d1 10 c0       	push   $0xc010d150
c01061ee:	68 12 cf 10 c0       	push   $0xc010cf12
c01061f3:	68 ed 00 00 00       	push   $0xed
c01061f8:	68 ac ce 10 c0       	push   $0xc010ceac
c01061fd:	e8 f6 a1 ff ff       	call   c01003f8 <__panic>
     
     cprintf("set up init env for check_swap begin!\n");
c0106202:	83 ec 0c             	sub    $0xc,%esp
c0106205:	68 74 d1 10 c0       	push   $0xc010d174
c010620a:	e8 83 a0 ff ff       	call   c0100292 <cprintf>
c010620f:	83 c4 10             	add    $0x10,%esp
     //setup initial vir_page<->phy_page environment for page relpacement algorithm 

     
     pgfault_num=0;
c0106212:	c7 05 64 ff 19 c0 00 	movl   $0x0,0xc019ff64
c0106219:	00 00 00 
     
     check_content_set();
c010621c:	e8 fd fa ff ff       	call   c0105d1e <check_content_set>
     assert( nr_free == 0);         
c0106221:	a1 8c 21 1a c0       	mov    0xc01a218c,%eax
c0106226:	85 c0                	test   %eax,%eax
c0106228:	74 19                	je     c0106243 <check_swap+0x3ac>
c010622a:	68 9b d1 10 c0       	push   $0xc010d19b
c010622f:	68 12 cf 10 c0       	push   $0xc010cf12
c0106234:	68 f6 00 00 00       	push   $0xf6
c0106239:	68 ac ce 10 c0       	push   $0xc010ceac
c010623e:	e8 b5 a1 ff ff       	call   c01003f8 <__panic>
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c0106243:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c010624a:	eb 26                	jmp    c0106272 <check_swap+0x3db>
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
c010624c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010624f:	c7 04 85 e0 20 1a c0 	movl   $0xffffffff,-0x3fe5df20(,%eax,4)
c0106256:	ff ff ff ff 
c010625a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010625d:	8b 14 85 e0 20 1a c0 	mov    -0x3fe5df20(,%eax,4),%edx
c0106264:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106267:	89 14 85 20 21 1a c0 	mov    %edx,-0x3fe5dee0(,%eax,4)
     
     pgfault_num=0;
     
     check_content_set();
     assert( nr_free == 0);         
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c010626e:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0106272:	83 7d ec 09          	cmpl   $0x9,-0x14(%ebp)
c0106276:	7e d4                	jle    c010624c <check_swap+0x3b5>
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
     
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0106278:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c010627f:	e9 cc 00 00 00       	jmp    c0106350 <check_swap+0x4b9>
         check_ptep[i]=0;
c0106284:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106287:	c7 04 85 74 21 1a c0 	movl   $0x0,-0x3fe5de8c(,%eax,4)
c010628e:	00 00 00 00 
         check_ptep[i] = get_pte(pgdir, (i+1)*0x1000, 0);
c0106292:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106295:	83 c0 01             	add    $0x1,%eax
c0106298:	c1 e0 0c             	shl    $0xc,%eax
c010629b:	83 ec 04             	sub    $0x4,%esp
c010629e:	6a 00                	push   $0x0
c01062a0:	50                   	push   %eax
c01062a1:	ff 75 d4             	pushl  -0x2c(%ebp)
c01062a4:	e8 16 1b 00 00       	call   c0107dbf <get_pte>
c01062a9:	83 c4 10             	add    $0x10,%esp
c01062ac:	89 c2                	mov    %eax,%edx
c01062ae:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01062b1:	89 14 85 74 21 1a c0 	mov    %edx,-0x3fe5de8c(,%eax,4)
         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
         assert(check_ptep[i] != NULL);
c01062b8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01062bb:	8b 04 85 74 21 1a c0 	mov    -0x3fe5de8c(,%eax,4),%eax
c01062c2:	85 c0                	test   %eax,%eax
c01062c4:	75 19                	jne    c01062df <check_swap+0x448>
c01062c6:	68 a8 d1 10 c0       	push   $0xc010d1a8
c01062cb:	68 12 cf 10 c0       	push   $0xc010cf12
c01062d0:	68 fe 00 00 00       	push   $0xfe
c01062d5:	68 ac ce 10 c0       	push   $0xc010ceac
c01062da:	e8 19 a1 ff ff       	call   c01003f8 <__panic>
         assert(pte2page(*check_ptep[i]) == check_rp[i]);
c01062df:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01062e2:	8b 04 85 74 21 1a c0 	mov    -0x3fe5de8c(,%eax,4),%eax
c01062e9:	8b 00                	mov    (%eax),%eax
c01062eb:	83 ec 0c             	sub    $0xc,%esp
c01062ee:	50                   	push   %eax
c01062ef:	e8 d5 f6 ff ff       	call   c01059c9 <pte2page>
c01062f4:	83 c4 10             	add    $0x10,%esp
c01062f7:	89 c2                	mov    %eax,%edx
c01062f9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01062fc:	8b 04 85 c0 20 1a c0 	mov    -0x3fe5df40(,%eax,4),%eax
c0106303:	39 c2                	cmp    %eax,%edx
c0106305:	74 19                	je     c0106320 <check_swap+0x489>
c0106307:	68 c0 d1 10 c0       	push   $0xc010d1c0
c010630c:	68 12 cf 10 c0       	push   $0xc010cf12
c0106311:	68 ff 00 00 00       	push   $0xff
c0106316:	68 ac ce 10 c0       	push   $0xc010ceac
c010631b:	e8 d8 a0 ff ff       	call   c01003f8 <__panic>
         assert((*check_ptep[i] & PTE_P));          
c0106320:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106323:	8b 04 85 74 21 1a c0 	mov    -0x3fe5de8c(,%eax,4),%eax
c010632a:	8b 00                	mov    (%eax),%eax
c010632c:	83 e0 01             	and    $0x1,%eax
c010632f:	85 c0                	test   %eax,%eax
c0106331:	75 19                	jne    c010634c <check_swap+0x4b5>
c0106333:	68 e8 d1 10 c0       	push   $0xc010d1e8
c0106338:	68 12 cf 10 c0       	push   $0xc010cf12
c010633d:	68 00 01 00 00       	push   $0x100
c0106342:	68 ac ce 10 c0       	push   $0xc010ceac
c0106347:	e8 ac a0 ff ff       	call   c01003f8 <__panic>
     check_content_set();
     assert( nr_free == 0);         
     for(i = 0; i<MAX_SEQ_NO ; i++) 
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
     
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c010634c:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0106350:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0106354:	0f 8e 2a ff ff ff    	jle    c0106284 <check_swap+0x3ed>
         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
         assert(check_ptep[i] != NULL);
         assert(pte2page(*check_ptep[i]) == check_rp[i]);
         assert((*check_ptep[i] & PTE_P));          
     }
     cprintf("set up init env for check_swap over!\n");
c010635a:	83 ec 0c             	sub    $0xc,%esp
c010635d:	68 04 d2 10 c0       	push   $0xc010d204
c0106362:	e8 2b 9f ff ff       	call   c0100292 <cprintf>
c0106367:	83 c4 10             	add    $0x10,%esp
     // now access the virt pages to test  page relpacement algorithm 
     ret=check_content_access();
c010636a:	e8 10 fb ff ff       	call   c0105e7f <check_content_access>
c010636f:	89 45 b8             	mov    %eax,-0x48(%ebp)
     assert(ret==0);
c0106372:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
c0106376:	74 19                	je     c0106391 <check_swap+0x4fa>
c0106378:	68 2a d2 10 c0       	push   $0xc010d22a
c010637d:	68 12 cf 10 c0       	push   $0xc010cf12
c0106382:	68 05 01 00 00       	push   $0x105
c0106387:	68 ac ce 10 c0       	push   $0xc010ceac
c010638c:	e8 67 a0 ff ff       	call   c01003f8 <__panic>
     
     //restore kernel mem env
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0106391:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0106398:	eb 1c                	jmp    c01063b6 <check_swap+0x51f>
         free_pages(check_rp[i],1);
c010639a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010639d:	8b 04 85 c0 20 1a c0 	mov    -0x3fe5df40(,%eax,4),%eax
c01063a4:	83 ec 08             	sub    $0x8,%esp
c01063a7:	6a 01                	push   $0x1
c01063a9:	50                   	push   %eax
c01063aa:	e8 10 14 00 00       	call   c01077bf <free_pages>
c01063af:	83 c4 10             	add    $0x10,%esp
     // now access the virt pages to test  page relpacement algorithm 
     ret=check_content_access();
     assert(ret==0);
     
     //restore kernel mem env
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01063b2:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c01063b6:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c01063ba:	7e de                	jle    c010639a <check_swap+0x503>
         free_pages(check_rp[i],1);
     } 

     //free_page(pte2page(*temp_ptep));
    free_page(pde2page(pgdir[0]));
c01063bc:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01063bf:	8b 00                	mov    (%eax),%eax
c01063c1:	83 ec 0c             	sub    $0xc,%esp
c01063c4:	50                   	push   %eax
c01063c5:	e8 39 f6 ff ff       	call   c0105a03 <pde2page>
c01063ca:	83 c4 10             	add    $0x10,%esp
c01063cd:	83 ec 08             	sub    $0x8,%esp
c01063d0:	6a 01                	push   $0x1
c01063d2:	50                   	push   %eax
c01063d3:	e8 e7 13 00 00       	call   c01077bf <free_pages>
c01063d8:	83 c4 10             	add    $0x10,%esp
     pgdir[0] = 0;
c01063db:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01063de:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
     mm->pgdir = NULL;
c01063e4:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01063e7:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
     mm_destroy(mm);
c01063ee:	83 ec 0c             	sub    $0xc,%esp
c01063f1:	ff 75 d8             	pushl  -0x28(%ebp)
c01063f4:	e8 31 dc ff ff       	call   c010402a <mm_destroy>
c01063f9:	83 c4 10             	add    $0x10,%esp
     check_mm_struct = NULL;
c01063fc:	c7 05 bc 20 1a c0 00 	movl   $0x0,0xc01a20bc
c0106403:	00 00 00 
     
     nr_free = nr_free_store;
c0106406:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0106409:	a3 8c 21 1a c0       	mov    %eax,0xc01a218c
     free_list = free_list_store;
c010640e:	8b 45 98             	mov    -0x68(%ebp),%eax
c0106411:	8b 55 9c             	mov    -0x64(%ebp),%edx
c0106414:	a3 84 21 1a c0       	mov    %eax,0xc01a2184
c0106419:	89 15 88 21 1a c0    	mov    %edx,0xc01a2188

     
     le = &free_list;
c010641f:	c7 45 e8 84 21 1a c0 	movl   $0xc01a2184,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c0106426:	eb 1d                	jmp    c0106445 <check_swap+0x5ae>
         struct Page *p = le2page(le, page_link);
c0106428:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010642b:	83 e8 0c             	sub    $0xc,%eax
c010642e:	89 45 b4             	mov    %eax,-0x4c(%ebp)
         count --, total -= p->property;
c0106431:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0106435:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0106438:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010643b:	8b 40 08             	mov    0x8(%eax),%eax
c010643e:	29 c2                	sub    %eax,%edx
c0106440:	89 d0                	mov    %edx,%eax
c0106442:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106445:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106448:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010644b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010644e:	8b 40 04             	mov    0x4(%eax),%eax
     nr_free = nr_free_store;
     free_list = free_list_store;

     
     le = &free_list;
     while ((le = list_next(le)) != &free_list) {
c0106451:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0106454:	81 7d e8 84 21 1a c0 	cmpl   $0xc01a2184,-0x18(%ebp)
c010645b:	75 cb                	jne    c0106428 <check_swap+0x591>
         struct Page *p = le2page(le, page_link);
         count --, total -= p->property;
     }
     cprintf("count is %d, total is %d\n",count,total);
c010645d:	83 ec 04             	sub    $0x4,%esp
c0106460:	ff 75 f0             	pushl  -0x10(%ebp)
c0106463:	ff 75 f4             	pushl  -0xc(%ebp)
c0106466:	68 31 d2 10 c0       	push   $0xc010d231
c010646b:	e8 22 9e ff ff       	call   c0100292 <cprintf>
c0106470:	83 c4 10             	add    $0x10,%esp
     //assert(count == 0);
     
     cprintf("check_swap() succeeded!\n");
c0106473:	83 ec 0c             	sub    $0xc,%esp
c0106476:	68 4b d2 10 c0       	push   $0xc010d24b
c010647b:	e8 12 9e ff ff       	call   c0100292 <cprintf>
c0106480:	83 c4 10             	add    $0x10,%esp
}
c0106483:	90                   	nop
c0106484:	c9                   	leave  
c0106485:	c3                   	ret    

c0106486 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0106486:	55                   	push   %ebp
c0106487:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0106489:	8b 45 08             	mov    0x8(%ebp),%eax
c010648c:	8b 15 98 21 1a c0    	mov    0xc01a2198,%edx
c0106492:	29 d0                	sub    %edx,%eax
c0106494:	c1 f8 05             	sar    $0x5,%eax
}
c0106497:	5d                   	pop    %ebp
c0106498:	c3                   	ret    

c0106499 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0106499:	55                   	push   %ebp
c010649a:	89 e5                	mov    %esp,%ebp
    return page2ppn(page) << PGSHIFT;
c010649c:	ff 75 08             	pushl  0x8(%ebp)
c010649f:	e8 e2 ff ff ff       	call   c0106486 <page2ppn>
c01064a4:	83 c4 04             	add    $0x4,%esp
c01064a7:	c1 e0 0c             	shl    $0xc,%eax
}
c01064aa:	c9                   	leave  
c01064ab:	c3                   	ret    

c01064ac <page_ref>:
pde2page(pde_t pde) {
    return pa2page(PDE_ADDR(pde));
}

static inline int
page_ref(struct Page *page) {
c01064ac:	55                   	push   %ebp
c01064ad:	89 e5                	mov    %esp,%ebp
    return page->ref;
c01064af:	8b 45 08             	mov    0x8(%ebp),%eax
c01064b2:	8b 00                	mov    (%eax),%eax
}
c01064b4:	5d                   	pop    %ebp
c01064b5:	c3                   	ret    

c01064b6 <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c01064b6:	55                   	push   %ebp
c01064b7:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c01064b9:	8b 45 08             	mov    0x8(%ebp),%eax
c01064bc:	8b 55 0c             	mov    0xc(%ebp),%edx
c01064bf:	89 10                	mov    %edx,(%eax)
}
c01064c1:	90                   	nop
c01064c2:	5d                   	pop    %ebp
c01064c3:	c3                   	ret    

c01064c4 <default_init>:

#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
default_init(void) {
c01064c4:	55                   	push   %ebp
c01064c5:	89 e5                	mov    %esp,%ebp
c01064c7:	83 ec 10             	sub    $0x10,%esp
c01064ca:	c7 45 fc 84 21 1a c0 	movl   $0xc01a2184,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c01064d1:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01064d4:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01064d7:	89 50 04             	mov    %edx,0x4(%eax)
c01064da:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01064dd:	8b 50 04             	mov    0x4(%eax),%edx
c01064e0:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01064e3:	89 10                	mov    %edx,(%eax)
    list_init(&free_list);
    nr_free = 0;
c01064e5:	c7 05 8c 21 1a c0 00 	movl   $0x0,0xc01a218c
c01064ec:	00 00 00 
}
c01064ef:	90                   	nop
c01064f0:	c9                   	leave  
c01064f1:	c3                   	ret    

c01064f2 <default_init_memmap>:

static void
default_init_memmap(struct Page *base, size_t n) {
c01064f2:	55                   	push   %ebp
c01064f3:	89 e5                	mov    %esp,%ebp
c01064f5:	83 ec 48             	sub    $0x48,%esp
    assert(n > 0);
c01064f8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01064fc:	75 16                	jne    c0106514 <default_init_memmap+0x22>
c01064fe:	68 64 d2 10 c0       	push   $0xc010d264
c0106503:	68 6a d2 10 c0       	push   $0xc010d26a
c0106508:	6a 6d                	push   $0x6d
c010650a:	68 7f d2 10 c0       	push   $0xc010d27f
c010650f:	e8 e4 9e ff ff       	call   c01003f8 <__panic>
    struct Page *p = base;
c0106514:	8b 45 08             	mov    0x8(%ebp),%eax
c0106517:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (; p != base + n; p ++) {
c010651a:	eb 6c                	jmp    c0106588 <default_init_memmap+0x96>
        assert(PageReserved(p));
c010651c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010651f:	83 c0 04             	add    $0x4,%eax
c0106522:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c0106529:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010652c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010652f:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0106532:	0f a3 10             	bt     %edx,(%eax)
c0106535:	19 c0                	sbb    %eax,%eax
c0106537:	89 45 e0             	mov    %eax,-0x20(%ebp)
    return oldbit != 0;
c010653a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c010653e:	0f 95 c0             	setne  %al
c0106541:	0f b6 c0             	movzbl %al,%eax
c0106544:	85 c0                	test   %eax,%eax
c0106546:	75 16                	jne    c010655e <default_init_memmap+0x6c>
c0106548:	68 95 d2 10 c0       	push   $0xc010d295
c010654d:	68 6a d2 10 c0       	push   $0xc010d26a
c0106552:	6a 70                	push   $0x70
c0106554:	68 7f d2 10 c0       	push   $0xc010d27f
c0106559:	e8 9a 9e ff ff       	call   c01003f8 <__panic>
        p->flags = p->property = 0;
c010655e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106561:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
c0106568:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010656b:	8b 50 08             	mov    0x8(%eax),%edx
c010656e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106571:	89 50 04             	mov    %edx,0x4(%eax)
        set_page_ref(p, 0);
c0106574:	83 ec 08             	sub    $0x8,%esp
c0106577:	6a 00                	push   $0x0
c0106579:	ff 75 f4             	pushl  -0xc(%ebp)
c010657c:	e8 35 ff ff ff       	call   c01064b6 <set_page_ref>
c0106581:	83 c4 10             	add    $0x10,%esp

static void
default_init_memmap(struct Page *base, size_t n) {
    assert(n > 0);
    struct Page *p = base;
    for (; p != base + n; p ++) {
c0106584:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
c0106588:	8b 45 0c             	mov    0xc(%ebp),%eax
c010658b:	c1 e0 05             	shl    $0x5,%eax
c010658e:	89 c2                	mov    %eax,%edx
c0106590:	8b 45 08             	mov    0x8(%ebp),%eax
c0106593:	01 d0                	add    %edx,%eax
c0106595:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0106598:	75 82                	jne    c010651c <default_init_memmap+0x2a>
        assert(PageReserved(p));
        p->flags = p->property = 0;
        set_page_ref(p, 0);
    }
    base->property = n;
c010659a:	8b 45 08             	mov    0x8(%ebp),%eax
c010659d:	8b 55 0c             	mov    0xc(%ebp),%edx
c01065a0:	89 50 08             	mov    %edx,0x8(%eax)
    SetPageProperty(base);
c01065a3:	8b 45 08             	mov    0x8(%ebp),%eax
c01065a6:	83 c0 04             	add    $0x4,%eax
c01065a9:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
c01065b0:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c01065b3:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01065b6:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01065b9:	0f ab 10             	bts    %edx,(%eax)
    nr_free += n;
c01065bc:	8b 15 8c 21 1a c0    	mov    0xc01a218c,%edx
c01065c2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01065c5:	01 d0                	add    %edx,%eax
c01065c7:	a3 8c 21 1a c0       	mov    %eax,0xc01a218c
    list_add(&free_list, &(base->page_link));
c01065cc:	8b 45 08             	mov    0x8(%ebp),%eax
c01065cf:	83 c0 0c             	add    $0xc,%eax
c01065d2:	c7 45 f0 84 21 1a c0 	movl   $0xc01a2184,-0x10(%ebp)
c01065d9:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01065dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01065df:	89 45 d8             	mov    %eax,-0x28(%ebp)
c01065e2:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01065e5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c01065e8:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01065eb:	8b 40 04             	mov    0x4(%eax),%eax
c01065ee:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01065f1:	89 55 d0             	mov    %edx,-0x30(%ebp)
c01065f4:	8b 55 d8             	mov    -0x28(%ebp),%edx
c01065f7:	89 55 cc             	mov    %edx,-0x34(%ebp)
c01065fa:	89 45 c8             	mov    %eax,-0x38(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c01065fd:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0106600:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0106603:	89 10                	mov    %edx,(%eax)
c0106605:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0106608:	8b 10                	mov    (%eax),%edx
c010660a:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010660d:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0106610:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0106613:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0106616:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0106619:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010661c:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010661f:	89 10                	mov    %edx,(%eax)
}
c0106621:	90                   	nop
c0106622:	c9                   	leave  
c0106623:	c3                   	ret    

c0106624 <default_alloc_pages>:

// LAB2 MODIFIED need to be rewritten
static struct Page *
default_alloc_pages(size_t n) {
c0106624:	55                   	push   %ebp
c0106625:	89 e5                	mov    %esp,%ebp
c0106627:	83 ec 58             	sub    $0x58,%esp
    assert(n > 0);
c010662a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010662e:	75 16                	jne    c0106646 <default_alloc_pages+0x22>
c0106630:	68 64 d2 10 c0       	push   $0xc010d264
c0106635:	68 6a d2 10 c0       	push   $0xc010d26a
c010663a:	6a 7d                	push   $0x7d
c010663c:	68 7f d2 10 c0       	push   $0xc010d27f
c0106641:	e8 b2 9d ff ff       	call   c01003f8 <__panic>
    if (n > nr_free) {
c0106646:	a1 8c 21 1a c0       	mov    0xc01a218c,%eax
c010664b:	3b 45 08             	cmp    0x8(%ebp),%eax
c010664e:	73 0a                	jae    c010665a <default_alloc_pages+0x36>
        return NULL;
c0106650:	b8 00 00 00 00       	mov    $0x0,%eax
c0106655:	e9 41 01 00 00       	jmp    c010679b <default_alloc_pages+0x177>
    }
    struct Page *page = NULL;
c010665a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    list_entry_t *le = &free_list;
c0106661:	c7 45 f0 84 21 1a c0 	movl   $0xc01a2184,-0x10(%ebp)
    while ((le = list_next(le)) != &free_list) {
c0106668:	eb 1c                	jmp    c0106686 <default_alloc_pages+0x62>
        struct Page *p = le2page(le, page_link);
c010666a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010666d:	83 e8 0c             	sub    $0xc,%eax
c0106670:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (p->property >= n) {
c0106673:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106676:	8b 40 08             	mov    0x8(%eax),%eax
c0106679:	3b 45 08             	cmp    0x8(%ebp),%eax
c010667c:	72 08                	jb     c0106686 <default_alloc_pages+0x62>
            page = p;
c010667e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106681:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
c0106684:	eb 18                	jmp    c010669e <default_alloc_pages+0x7a>
c0106686:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106689:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010668c:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010668f:	8b 40 04             	mov    0x4(%eax),%eax
    if (n > nr_free) {
        return NULL;
    }
    struct Page *page = NULL;
    list_entry_t *le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c0106692:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106695:	81 7d f0 84 21 1a c0 	cmpl   $0xc01a2184,-0x10(%ebp)
c010669c:	75 cc                	jne    c010666a <default_alloc_pages+0x46>
        if (p->property >= n) {
            page = p;
            break;
        }
    }
    if (page != NULL) {
c010669e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01066a2:	0f 84 f0 00 00 00    	je     c0106798 <default_alloc_pages+0x174>
c01066a8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01066ab:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01066ae:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01066b1:	8b 40 04             	mov    0x4(%eax),%eax
        list_entry_t *following_le = list_next(le);
c01066b4:	89 45 e0             	mov    %eax,-0x20(%ebp)
        list_del(&(page->page_link));
c01066b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01066ba:	83 c0 0c             	add    $0xc,%eax
c01066bd:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c01066c0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01066c3:	8b 40 04             	mov    0x4(%eax),%eax
c01066c6:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01066c9:	8b 12                	mov    (%edx),%edx
c01066cb:	89 55 c8             	mov    %edx,-0x38(%ebp)
c01066ce:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c01066d1:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01066d4:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c01066d7:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c01066da:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01066dd:	8b 55 c8             	mov    -0x38(%ebp),%edx
c01066e0:	89 10                	mov    %edx,(%eax)
        if (page->property > n) {
c01066e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01066e5:	8b 40 08             	mov    0x8(%eax),%eax
c01066e8:	3b 45 08             	cmp    0x8(%ebp),%eax
c01066eb:	0f 86 81 00 00 00    	jbe    c0106772 <default_alloc_pages+0x14e>
            struct Page *p = page + n;                      // split the allocated page
c01066f1:	8b 45 08             	mov    0x8(%ebp),%eax
c01066f4:	c1 e0 05             	shl    $0x5,%eax
c01066f7:	89 c2                	mov    %eax,%edx
c01066f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01066fc:	01 d0                	add    %edx,%eax
c01066fe:	89 45 d8             	mov    %eax,-0x28(%ebp)
            p->property = page->property - n;               // set page num
c0106701:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106704:	8b 40 08             	mov    0x8(%eax),%eax
c0106707:	2b 45 08             	sub    0x8(%ebp),%eax
c010670a:	89 c2                	mov    %eax,%edx
c010670c:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010670f:	89 50 08             	mov    %edx,0x8(%eax)
            SetPageProperty(p);                             // mark as the head page
c0106712:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0106715:	83 c0 04             	add    $0x4,%eax
c0106718:	c7 45 d0 01 00 00 00 	movl   $0x1,-0x30(%ebp)
c010671f:	89 45 b0             	mov    %eax,-0x50(%ebp)
c0106722:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0106725:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0106728:	0f ab 10             	bts    %edx,(%eax)
            list_add_before(following_le, &(p->page_link)); // add the remaining block before the formerly following block
c010672b:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010672e:	8d 50 0c             	lea    0xc(%eax),%edx
c0106731:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106734:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0106737:	89 55 c0             	mov    %edx,-0x40(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c010673a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010673d:	8b 00                	mov    (%eax),%eax
c010673f:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0106742:	89 55 bc             	mov    %edx,-0x44(%ebp)
c0106745:	89 45 b8             	mov    %eax,-0x48(%ebp)
c0106748:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010674b:	89 45 b4             	mov    %eax,-0x4c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010674e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0106751:	8b 55 bc             	mov    -0x44(%ebp),%edx
c0106754:	89 10                	mov    %edx,(%eax)
c0106756:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0106759:	8b 10                	mov    (%eax),%edx
c010675b:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010675e:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0106761:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0106764:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0106767:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010676a:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010676d:	8b 55 b8             	mov    -0x48(%ebp),%edx
c0106770:	89 10                	mov    %edx,(%eax)
        }
        nr_free -= n;
c0106772:	a1 8c 21 1a c0       	mov    0xc01a218c,%eax
c0106777:	2b 45 08             	sub    0x8(%ebp),%eax
c010677a:	a3 8c 21 1a c0       	mov    %eax,0xc01a218c
        ClearPageProperty(page);    // mark as "not head page"
c010677f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106782:	83 c0 04             	add    $0x4,%eax
c0106785:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
c010678c:	89 45 ac             	mov    %eax,-0x54(%ebp)
 * @nr:     the bit to clear
 * @addr:   the address to start counting from
 * */
static inline void
clear_bit(int nr, volatile void *addr) {
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c010678f:	8b 45 ac             	mov    -0x54(%ebp),%eax
c0106792:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0106795:	0f b3 10             	btr    %edx,(%eax)
    }
    return page;
c0106798:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010679b:	c9                   	leave  
c010679c:	c3                   	ret    

c010679d <default_free_pages>:

// LAB2 MODIFIED
static void
default_free_pages(struct Page *base, size_t n) {
c010679d:	55                   	push   %ebp
c010679e:	89 e5                	mov    %esp,%ebp
c01067a0:	81 ec 88 00 00 00    	sub    $0x88,%esp
    assert(n > 0);
c01067a6:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01067aa:	75 19                	jne    c01067c5 <default_free_pages+0x28>
c01067ac:	68 64 d2 10 c0       	push   $0xc010d264
c01067b1:	68 6a d2 10 c0       	push   $0xc010d26a
c01067b6:	68 9c 00 00 00       	push   $0x9c
c01067bb:	68 7f d2 10 c0       	push   $0xc010d27f
c01067c0:	e8 33 9c ff ff       	call   c01003f8 <__panic>
    struct Page *p = base;
c01067c5:	8b 45 08             	mov    0x8(%ebp),%eax
c01067c8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (; p != base + n; p ++) {
c01067cb:	e9 8f 00 00 00       	jmp    c010685f <default_free_pages+0xc2>
        assert(!PageReserved(p) && !PageProperty(p));
c01067d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01067d3:	83 c0 04             	add    $0x4,%eax
c01067d6:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
c01067dd:	89 45 bc             	mov    %eax,-0x44(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01067e0:	8b 45 bc             	mov    -0x44(%ebp),%eax
c01067e3:	8b 55 c0             	mov    -0x40(%ebp),%edx
c01067e6:	0f a3 10             	bt     %edx,(%eax)
c01067e9:	19 c0                	sbb    %eax,%eax
c01067eb:	89 45 b8             	mov    %eax,-0x48(%ebp)
    return oldbit != 0;
c01067ee:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
c01067f2:	0f 95 c0             	setne  %al
c01067f5:	0f b6 c0             	movzbl %al,%eax
c01067f8:	85 c0                	test   %eax,%eax
c01067fa:	75 2c                	jne    c0106828 <default_free_pages+0x8b>
c01067fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01067ff:	83 c0 04             	add    $0x4,%eax
c0106802:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
c0106809:	89 45 b4             	mov    %eax,-0x4c(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010680c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010680f:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0106812:	0f a3 10             	bt     %edx,(%eax)
c0106815:	19 c0                	sbb    %eax,%eax
c0106817:	89 45 b0             	mov    %eax,-0x50(%ebp)
    return oldbit != 0;
c010681a:	83 7d b0 00          	cmpl   $0x0,-0x50(%ebp)
c010681e:	0f 95 c0             	setne  %al
c0106821:	0f b6 c0             	movzbl %al,%eax
c0106824:	85 c0                	test   %eax,%eax
c0106826:	74 19                	je     c0106841 <default_free_pages+0xa4>
c0106828:	68 a8 d2 10 c0       	push   $0xc010d2a8
c010682d:	68 6a d2 10 c0       	push   $0xc010d26a
c0106832:	68 9f 00 00 00       	push   $0x9f
c0106837:	68 7f d2 10 c0       	push   $0xc010d27f
c010683c:	e8 b7 9b ff ff       	call   c01003f8 <__panic>
        p->flags = 0;
c0106841:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106844:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
        set_page_ref(p, 0);     // clear ref flag
c010684b:	83 ec 08             	sub    $0x8,%esp
c010684e:	6a 00                	push   $0x0
c0106850:	ff 75 f4             	pushl  -0xc(%ebp)
c0106853:	e8 5e fc ff ff       	call   c01064b6 <set_page_ref>
c0106858:	83 c4 10             	add    $0x10,%esp
// LAB2 MODIFIED
static void
default_free_pages(struct Page *base, size_t n) {
    assert(n > 0);
    struct Page *p = base;
    for (; p != base + n; p ++) {
c010685b:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
c010685f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106862:	c1 e0 05             	shl    $0x5,%eax
c0106865:	89 c2                	mov    %eax,%edx
c0106867:	8b 45 08             	mov    0x8(%ebp),%eax
c010686a:	01 d0                	add    %edx,%eax
c010686c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010686f:	0f 85 5b ff ff ff    	jne    c01067d0 <default_free_pages+0x33>
        assert(!PageReserved(p) && !PageProperty(p));
        p->flags = 0;
        set_page_ref(p, 0);     // clear ref flag
    }
    base->property = n;
c0106875:	8b 45 08             	mov    0x8(%ebp),%eax
c0106878:	8b 55 0c             	mov    0xc(%ebp),%edx
c010687b:	89 50 08             	mov    %edx,0x8(%eax)
    SetPageProperty(base);
c010687e:	8b 45 08             	mov    0x8(%ebp),%eax
c0106881:	83 c0 04             	add    $0x4,%eax
c0106884:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
c010688b:	89 45 ac             	mov    %eax,-0x54(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c010688e:	8b 45 ac             	mov    -0x54(%ebp),%eax
c0106891:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106894:	0f ab 10             	bts    %edx,(%eax)
c0106897:	c7 45 e8 84 21 1a c0 	movl   $0xc01a2184,-0x18(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010689e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01068a1:	8b 40 04             	mov    0x4(%eax),%eax
    // try to extend free block
    list_entry_t *le = list_next(&free_list);
c01068a4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    while (le != &free_list) {
c01068a7:	e9 0e 01 00 00       	jmp    c01069ba <default_free_pages+0x21d>
        p = le2page(le, page_link);
c01068ac:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01068af:	83 e8 0c             	sub    $0xc,%eax
c01068b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01068b5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01068b8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01068bb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01068be:	8b 40 04             	mov    0x4(%eax),%eax
        le = list_next(le);
c01068c1:	89 45 f0             	mov    %eax,-0x10(%ebp)
        // page is exactly before one page
        if (base + base->property == p) {
c01068c4:	8b 45 08             	mov    0x8(%ebp),%eax
c01068c7:	8b 40 08             	mov    0x8(%eax),%eax
c01068ca:	c1 e0 05             	shl    $0x5,%eax
c01068cd:	89 c2                	mov    %eax,%edx
c01068cf:	8b 45 08             	mov    0x8(%ebp),%eax
c01068d2:	01 d0                	add    %edx,%eax
c01068d4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01068d7:	75 64                	jne    c010693d <default_free_pages+0x1a0>
            base->property += p->property;
c01068d9:	8b 45 08             	mov    0x8(%ebp),%eax
c01068dc:	8b 50 08             	mov    0x8(%eax),%edx
c01068df:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01068e2:	8b 40 08             	mov    0x8(%eax),%eax
c01068e5:	01 c2                	add    %eax,%edx
c01068e7:	8b 45 08             	mov    0x8(%ebp),%eax
c01068ea:	89 50 08             	mov    %edx,0x8(%eax)
            p->property = 0;     // clear properties of p
c01068ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01068f0:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
            ClearPageProperty(p);
c01068f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01068fa:	83 c0 04             	add    $0x4,%eax
c01068fd:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
c0106904:	89 45 a0             	mov    %eax,-0x60(%ebp)
 * @nr:     the bit to clear
 * @addr:   the address to start counting from
 * */
static inline void
clear_bit(int nr, volatile void *addr) {
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0106907:	8b 45 a0             	mov    -0x60(%ebp),%eax
c010690a:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010690d:	0f b3 10             	btr    %edx,(%eax)
            list_del(&(p->page_link));
c0106910:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106913:	83 c0 0c             	add    $0xc,%eax
c0106916:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0106919:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010691c:	8b 40 04             	mov    0x4(%eax),%eax
c010691f:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0106922:	8b 12                	mov    (%edx),%edx
c0106924:	89 55 a8             	mov    %edx,-0x58(%ebp)
c0106927:	89 45 a4             	mov    %eax,-0x5c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010692a:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010692d:	8b 55 a4             	mov    -0x5c(%ebp),%edx
c0106930:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0106933:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0106936:	8b 55 a8             	mov    -0x58(%ebp),%edx
c0106939:	89 10                	mov    %edx,(%eax)
c010693b:	eb 7d                	jmp    c01069ba <default_free_pages+0x21d>
        }
        // page is exactly after one page
        else if (p + p->property == base) {
c010693d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106940:	8b 40 08             	mov    0x8(%eax),%eax
c0106943:	c1 e0 05             	shl    $0x5,%eax
c0106946:	89 c2                	mov    %eax,%edx
c0106948:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010694b:	01 d0                	add    %edx,%eax
c010694d:	3b 45 08             	cmp    0x8(%ebp),%eax
c0106950:	75 68                	jne    c01069ba <default_free_pages+0x21d>
            p->property += base->property;
c0106952:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106955:	8b 50 08             	mov    0x8(%eax),%edx
c0106958:	8b 45 08             	mov    0x8(%ebp),%eax
c010695b:	8b 40 08             	mov    0x8(%eax),%eax
c010695e:	01 c2                	add    %eax,%edx
c0106960:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106963:	89 50 08             	mov    %edx,0x8(%eax)
            base->property = 0;     // clear properties of base
c0106966:	8b 45 08             	mov    0x8(%ebp),%eax
c0106969:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
            ClearPageProperty(base);
c0106970:	8b 45 08             	mov    0x8(%ebp),%eax
c0106973:	83 c0 04             	add    $0x4,%eax
c0106976:	c7 45 cc 01 00 00 00 	movl   $0x1,-0x34(%ebp)
c010697d:	89 45 94             	mov    %eax,-0x6c(%ebp)
c0106980:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0106983:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0106986:	0f b3 10             	btr    %edx,(%eax)
            base = p;
c0106989:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010698c:	89 45 08             	mov    %eax,0x8(%ebp)
            list_del(&(p->page_link));
c010698f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106992:	83 c0 0c             	add    $0xc,%eax
c0106995:	89 45 d8             	mov    %eax,-0x28(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0106998:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010699b:	8b 40 04             	mov    0x4(%eax),%eax
c010699e:	8b 55 d8             	mov    -0x28(%ebp),%edx
c01069a1:	8b 12                	mov    (%edx),%edx
c01069a3:	89 55 9c             	mov    %edx,-0x64(%ebp)
c01069a6:	89 45 98             	mov    %eax,-0x68(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c01069a9:	8b 45 9c             	mov    -0x64(%ebp),%eax
c01069ac:	8b 55 98             	mov    -0x68(%ebp),%edx
c01069af:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c01069b2:	8b 45 98             	mov    -0x68(%ebp),%eax
c01069b5:	8b 55 9c             	mov    -0x64(%ebp),%edx
c01069b8:	89 10                	mov    %edx,(%eax)
    }
    base->property = n;
    SetPageProperty(base);
    // try to extend free block
    list_entry_t *le = list_next(&free_list);
    while (le != &free_list) {
c01069ba:	81 7d f0 84 21 1a c0 	cmpl   $0xc01a2184,-0x10(%ebp)
c01069c1:	0f 85 e5 fe ff ff    	jne    c01068ac <default_free_pages+0x10f>
c01069c7:	c7 45 d0 84 21 1a c0 	movl   $0xc01a2184,-0x30(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01069ce:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01069d1:	8b 40 04             	mov    0x4(%eax),%eax
            base = p;
            list_del(&(p->page_link));
        }
    }
    // search for a place to add page into list
    le = list_next(&free_list);
c01069d4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    while (le != &free_list) {
c01069d7:	eb 20                	jmp    c01069f9 <default_free_pages+0x25c>
        p = le2page(le, page_link);
c01069d9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01069dc:	83 e8 0c             	sub    $0xc,%eax
c01069df:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (p > base) {
c01069e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01069e5:	3b 45 08             	cmp    0x8(%ebp),%eax
c01069e8:	77 1a                	ja     c0106a04 <default_free_pages+0x267>
c01069ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01069ed:	89 45 c8             	mov    %eax,-0x38(%ebp)
c01069f0:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01069f3:	8b 40 04             	mov    0x4(%eax),%eax
            break;
        }
        le = list_next(le);
c01069f6:	89 45 f0             	mov    %eax,-0x10(%ebp)
            list_del(&(p->page_link));
        }
    }
    // search for a place to add page into list
    le = list_next(&free_list);
    while (le != &free_list) {
c01069f9:	81 7d f0 84 21 1a c0 	cmpl   $0xc01a2184,-0x10(%ebp)
c0106a00:	75 d7                	jne    c01069d9 <default_free_pages+0x23c>
c0106a02:	eb 01                	jmp    c0106a05 <default_free_pages+0x268>
        p = le2page(le, page_link);
        if (p > base) {
            break;
c0106a04:	90                   	nop
        }
        le = list_next(le);
    }
    nr_free += n;
c0106a05:	8b 15 8c 21 1a c0    	mov    0xc01a218c,%edx
c0106a0b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106a0e:	01 d0                	add    %edx,%eax
c0106a10:	a3 8c 21 1a c0       	mov    %eax,0xc01a218c
    list_add_before(le, &(base->page_link)); 
c0106a15:	8b 45 08             	mov    0x8(%ebp),%eax
c0106a18:	8d 50 0c             	lea    0xc(%eax),%edx
c0106a1b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106a1e:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c0106a21:	89 55 90             	mov    %edx,-0x70(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c0106a24:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0106a27:	8b 00                	mov    (%eax),%eax
c0106a29:	8b 55 90             	mov    -0x70(%ebp),%edx
c0106a2c:	89 55 8c             	mov    %edx,-0x74(%ebp)
c0106a2f:	89 45 88             	mov    %eax,-0x78(%ebp)
c0106a32:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0106a35:	89 45 84             	mov    %eax,-0x7c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0106a38:	8b 45 84             	mov    -0x7c(%ebp),%eax
c0106a3b:	8b 55 8c             	mov    -0x74(%ebp),%edx
c0106a3e:	89 10                	mov    %edx,(%eax)
c0106a40:	8b 45 84             	mov    -0x7c(%ebp),%eax
c0106a43:	8b 10                	mov    (%eax),%edx
c0106a45:	8b 45 88             	mov    -0x78(%ebp),%eax
c0106a48:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0106a4b:	8b 45 8c             	mov    -0x74(%ebp),%eax
c0106a4e:	8b 55 84             	mov    -0x7c(%ebp),%edx
c0106a51:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0106a54:	8b 45 8c             	mov    -0x74(%ebp),%eax
c0106a57:	8b 55 88             	mov    -0x78(%ebp),%edx
c0106a5a:	89 10                	mov    %edx,(%eax)
}
c0106a5c:	90                   	nop
c0106a5d:	c9                   	leave  
c0106a5e:	c3                   	ret    

c0106a5f <default_nr_free_pages>:

static size_t
default_nr_free_pages(void) {
c0106a5f:	55                   	push   %ebp
c0106a60:	89 e5                	mov    %esp,%ebp
    return nr_free;
c0106a62:	a1 8c 21 1a c0       	mov    0xc01a218c,%eax
}
c0106a67:	5d                   	pop    %ebp
c0106a68:	c3                   	ret    

c0106a69 <basic_check>:

static void
basic_check(void) {
c0106a69:	55                   	push   %ebp
c0106a6a:	89 e5                	mov    %esp,%ebp
c0106a6c:	83 ec 38             	sub    $0x38,%esp
    struct Page *p0, *p1, *p2;
    p0 = p1 = p2 = NULL;
c0106a6f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0106a76:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106a79:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106a7c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106a7f:	89 45 ec             	mov    %eax,-0x14(%ebp)
    assert((p0 = alloc_page()) != NULL);
c0106a82:	83 ec 0c             	sub    $0xc,%esp
c0106a85:	6a 01                	push   $0x1
c0106a87:	e8 c7 0c 00 00       	call   c0107753 <alloc_pages>
c0106a8c:	83 c4 10             	add    $0x10,%esp
c0106a8f:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0106a92:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0106a96:	75 19                	jne    c0106ab1 <basic_check+0x48>
c0106a98:	68 cd d2 10 c0       	push   $0xc010d2cd
c0106a9d:	68 6a d2 10 c0       	push   $0xc010d26a
c0106aa2:	68 d0 00 00 00       	push   $0xd0
c0106aa7:	68 7f d2 10 c0       	push   $0xc010d27f
c0106aac:	e8 47 99 ff ff       	call   c01003f8 <__panic>
    assert((p1 = alloc_page()) != NULL);
c0106ab1:	83 ec 0c             	sub    $0xc,%esp
c0106ab4:	6a 01                	push   $0x1
c0106ab6:	e8 98 0c 00 00       	call   c0107753 <alloc_pages>
c0106abb:	83 c4 10             	add    $0x10,%esp
c0106abe:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106ac1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106ac5:	75 19                	jne    c0106ae0 <basic_check+0x77>
c0106ac7:	68 e9 d2 10 c0       	push   $0xc010d2e9
c0106acc:	68 6a d2 10 c0       	push   $0xc010d26a
c0106ad1:	68 d1 00 00 00       	push   $0xd1
c0106ad6:	68 7f d2 10 c0       	push   $0xc010d27f
c0106adb:	e8 18 99 ff ff       	call   c01003f8 <__panic>
    assert((p2 = alloc_page()) != NULL);
c0106ae0:	83 ec 0c             	sub    $0xc,%esp
c0106ae3:	6a 01                	push   $0x1
c0106ae5:	e8 69 0c 00 00       	call   c0107753 <alloc_pages>
c0106aea:	83 c4 10             	add    $0x10,%esp
c0106aed:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0106af0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106af4:	75 19                	jne    c0106b0f <basic_check+0xa6>
c0106af6:	68 05 d3 10 c0       	push   $0xc010d305
c0106afb:	68 6a d2 10 c0       	push   $0xc010d26a
c0106b00:	68 d2 00 00 00       	push   $0xd2
c0106b05:	68 7f d2 10 c0       	push   $0xc010d27f
c0106b0a:	e8 e9 98 ff ff       	call   c01003f8 <__panic>

    assert(p0 != p1 && p0 != p2 && p1 != p2);
c0106b0f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106b12:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0106b15:	74 10                	je     c0106b27 <basic_check+0xbe>
c0106b17:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106b1a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0106b1d:	74 08                	je     c0106b27 <basic_check+0xbe>
c0106b1f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106b22:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0106b25:	75 19                	jne    c0106b40 <basic_check+0xd7>
c0106b27:	68 24 d3 10 c0       	push   $0xc010d324
c0106b2c:	68 6a d2 10 c0       	push   $0xc010d26a
c0106b31:	68 d4 00 00 00       	push   $0xd4
c0106b36:	68 7f d2 10 c0       	push   $0xc010d27f
c0106b3b:	e8 b8 98 ff ff       	call   c01003f8 <__panic>
    assert(page_ref(p0) == 0 && page_ref(p1) == 0 && page_ref(p2) == 0);
c0106b40:	83 ec 0c             	sub    $0xc,%esp
c0106b43:	ff 75 ec             	pushl  -0x14(%ebp)
c0106b46:	e8 61 f9 ff ff       	call   c01064ac <page_ref>
c0106b4b:	83 c4 10             	add    $0x10,%esp
c0106b4e:	85 c0                	test   %eax,%eax
c0106b50:	75 24                	jne    c0106b76 <basic_check+0x10d>
c0106b52:	83 ec 0c             	sub    $0xc,%esp
c0106b55:	ff 75 f0             	pushl  -0x10(%ebp)
c0106b58:	e8 4f f9 ff ff       	call   c01064ac <page_ref>
c0106b5d:	83 c4 10             	add    $0x10,%esp
c0106b60:	85 c0                	test   %eax,%eax
c0106b62:	75 12                	jne    c0106b76 <basic_check+0x10d>
c0106b64:	83 ec 0c             	sub    $0xc,%esp
c0106b67:	ff 75 f4             	pushl  -0xc(%ebp)
c0106b6a:	e8 3d f9 ff ff       	call   c01064ac <page_ref>
c0106b6f:	83 c4 10             	add    $0x10,%esp
c0106b72:	85 c0                	test   %eax,%eax
c0106b74:	74 19                	je     c0106b8f <basic_check+0x126>
c0106b76:	68 48 d3 10 c0       	push   $0xc010d348
c0106b7b:	68 6a d2 10 c0       	push   $0xc010d26a
c0106b80:	68 d5 00 00 00       	push   $0xd5
c0106b85:	68 7f d2 10 c0       	push   $0xc010d27f
c0106b8a:	e8 69 98 ff ff       	call   c01003f8 <__panic>

    assert(page2pa(p0) < npage * PGSIZE);
c0106b8f:	83 ec 0c             	sub    $0xc,%esp
c0106b92:	ff 75 ec             	pushl  -0x14(%ebp)
c0106b95:	e8 ff f8 ff ff       	call   c0106499 <page2pa>
c0106b9a:	83 c4 10             	add    $0x10,%esp
c0106b9d:	89 c2                	mov    %eax,%edx
c0106b9f:	a1 80 ff 19 c0       	mov    0xc019ff80,%eax
c0106ba4:	c1 e0 0c             	shl    $0xc,%eax
c0106ba7:	39 c2                	cmp    %eax,%edx
c0106ba9:	72 19                	jb     c0106bc4 <basic_check+0x15b>
c0106bab:	68 84 d3 10 c0       	push   $0xc010d384
c0106bb0:	68 6a d2 10 c0       	push   $0xc010d26a
c0106bb5:	68 d7 00 00 00       	push   $0xd7
c0106bba:	68 7f d2 10 c0       	push   $0xc010d27f
c0106bbf:	e8 34 98 ff ff       	call   c01003f8 <__panic>
    assert(page2pa(p1) < npage * PGSIZE);
c0106bc4:	83 ec 0c             	sub    $0xc,%esp
c0106bc7:	ff 75 f0             	pushl  -0x10(%ebp)
c0106bca:	e8 ca f8 ff ff       	call   c0106499 <page2pa>
c0106bcf:	83 c4 10             	add    $0x10,%esp
c0106bd2:	89 c2                	mov    %eax,%edx
c0106bd4:	a1 80 ff 19 c0       	mov    0xc019ff80,%eax
c0106bd9:	c1 e0 0c             	shl    $0xc,%eax
c0106bdc:	39 c2                	cmp    %eax,%edx
c0106bde:	72 19                	jb     c0106bf9 <basic_check+0x190>
c0106be0:	68 a1 d3 10 c0       	push   $0xc010d3a1
c0106be5:	68 6a d2 10 c0       	push   $0xc010d26a
c0106bea:	68 d8 00 00 00       	push   $0xd8
c0106bef:	68 7f d2 10 c0       	push   $0xc010d27f
c0106bf4:	e8 ff 97 ff ff       	call   c01003f8 <__panic>
    assert(page2pa(p2) < npage * PGSIZE);
c0106bf9:	83 ec 0c             	sub    $0xc,%esp
c0106bfc:	ff 75 f4             	pushl  -0xc(%ebp)
c0106bff:	e8 95 f8 ff ff       	call   c0106499 <page2pa>
c0106c04:	83 c4 10             	add    $0x10,%esp
c0106c07:	89 c2                	mov    %eax,%edx
c0106c09:	a1 80 ff 19 c0       	mov    0xc019ff80,%eax
c0106c0e:	c1 e0 0c             	shl    $0xc,%eax
c0106c11:	39 c2                	cmp    %eax,%edx
c0106c13:	72 19                	jb     c0106c2e <basic_check+0x1c5>
c0106c15:	68 be d3 10 c0       	push   $0xc010d3be
c0106c1a:	68 6a d2 10 c0       	push   $0xc010d26a
c0106c1f:	68 d9 00 00 00       	push   $0xd9
c0106c24:	68 7f d2 10 c0       	push   $0xc010d27f
c0106c29:	e8 ca 97 ff ff       	call   c01003f8 <__panic>

    list_entry_t free_list_store = free_list;
c0106c2e:	a1 84 21 1a c0       	mov    0xc01a2184,%eax
c0106c33:	8b 15 88 21 1a c0    	mov    0xc01a2188,%edx
c0106c39:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0106c3c:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0106c3f:	c7 45 e4 84 21 1a c0 	movl   $0xc01a2184,-0x1c(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0106c46:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106c49:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106c4c:	89 50 04             	mov    %edx,0x4(%eax)
c0106c4f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106c52:	8b 50 04             	mov    0x4(%eax),%edx
c0106c55:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106c58:	89 10                	mov    %edx,(%eax)
c0106c5a:	c7 45 d8 84 21 1a c0 	movl   $0xc01a2184,-0x28(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0106c61:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0106c64:	8b 40 04             	mov    0x4(%eax),%eax
c0106c67:	39 45 d8             	cmp    %eax,-0x28(%ebp)
c0106c6a:	0f 94 c0             	sete   %al
c0106c6d:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c0106c70:	85 c0                	test   %eax,%eax
c0106c72:	75 19                	jne    c0106c8d <basic_check+0x224>
c0106c74:	68 db d3 10 c0       	push   $0xc010d3db
c0106c79:	68 6a d2 10 c0       	push   $0xc010d26a
c0106c7e:	68 dd 00 00 00       	push   $0xdd
c0106c83:	68 7f d2 10 c0       	push   $0xc010d27f
c0106c88:	e8 6b 97 ff ff       	call   c01003f8 <__panic>

    unsigned int nr_free_store = nr_free;
c0106c8d:	a1 8c 21 1a c0       	mov    0xc01a218c,%eax
c0106c92:	89 45 e0             	mov    %eax,-0x20(%ebp)
    nr_free = 0;
c0106c95:	c7 05 8c 21 1a c0 00 	movl   $0x0,0xc01a218c
c0106c9c:	00 00 00 

    assert(alloc_page() == NULL);
c0106c9f:	83 ec 0c             	sub    $0xc,%esp
c0106ca2:	6a 01                	push   $0x1
c0106ca4:	e8 aa 0a 00 00       	call   c0107753 <alloc_pages>
c0106ca9:	83 c4 10             	add    $0x10,%esp
c0106cac:	85 c0                	test   %eax,%eax
c0106cae:	74 19                	je     c0106cc9 <basic_check+0x260>
c0106cb0:	68 f2 d3 10 c0       	push   $0xc010d3f2
c0106cb5:	68 6a d2 10 c0       	push   $0xc010d26a
c0106cba:	68 e2 00 00 00       	push   $0xe2
c0106cbf:	68 7f d2 10 c0       	push   $0xc010d27f
c0106cc4:	e8 2f 97 ff ff       	call   c01003f8 <__panic>

    free_page(p0);
c0106cc9:	83 ec 08             	sub    $0x8,%esp
c0106ccc:	6a 01                	push   $0x1
c0106cce:	ff 75 ec             	pushl  -0x14(%ebp)
c0106cd1:	e8 e9 0a 00 00       	call   c01077bf <free_pages>
c0106cd6:	83 c4 10             	add    $0x10,%esp
    free_page(p1);
c0106cd9:	83 ec 08             	sub    $0x8,%esp
c0106cdc:	6a 01                	push   $0x1
c0106cde:	ff 75 f0             	pushl  -0x10(%ebp)
c0106ce1:	e8 d9 0a 00 00       	call   c01077bf <free_pages>
c0106ce6:	83 c4 10             	add    $0x10,%esp
    free_page(p2);
c0106ce9:	83 ec 08             	sub    $0x8,%esp
c0106cec:	6a 01                	push   $0x1
c0106cee:	ff 75 f4             	pushl  -0xc(%ebp)
c0106cf1:	e8 c9 0a 00 00       	call   c01077bf <free_pages>
c0106cf6:	83 c4 10             	add    $0x10,%esp
    assert(nr_free == 3);
c0106cf9:	a1 8c 21 1a c0       	mov    0xc01a218c,%eax
c0106cfe:	83 f8 03             	cmp    $0x3,%eax
c0106d01:	74 19                	je     c0106d1c <basic_check+0x2b3>
c0106d03:	68 07 d4 10 c0       	push   $0xc010d407
c0106d08:	68 6a d2 10 c0       	push   $0xc010d26a
c0106d0d:	68 e7 00 00 00       	push   $0xe7
c0106d12:	68 7f d2 10 c0       	push   $0xc010d27f
c0106d17:	e8 dc 96 ff ff       	call   c01003f8 <__panic>

    assert((p0 = alloc_page()) != NULL);
c0106d1c:	83 ec 0c             	sub    $0xc,%esp
c0106d1f:	6a 01                	push   $0x1
c0106d21:	e8 2d 0a 00 00       	call   c0107753 <alloc_pages>
c0106d26:	83 c4 10             	add    $0x10,%esp
c0106d29:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0106d2c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0106d30:	75 19                	jne    c0106d4b <basic_check+0x2e2>
c0106d32:	68 cd d2 10 c0       	push   $0xc010d2cd
c0106d37:	68 6a d2 10 c0       	push   $0xc010d26a
c0106d3c:	68 e9 00 00 00       	push   $0xe9
c0106d41:	68 7f d2 10 c0       	push   $0xc010d27f
c0106d46:	e8 ad 96 ff ff       	call   c01003f8 <__panic>
    assert((p1 = alloc_page()) != NULL);
c0106d4b:	83 ec 0c             	sub    $0xc,%esp
c0106d4e:	6a 01                	push   $0x1
c0106d50:	e8 fe 09 00 00       	call   c0107753 <alloc_pages>
c0106d55:	83 c4 10             	add    $0x10,%esp
c0106d58:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106d5b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106d5f:	75 19                	jne    c0106d7a <basic_check+0x311>
c0106d61:	68 e9 d2 10 c0       	push   $0xc010d2e9
c0106d66:	68 6a d2 10 c0       	push   $0xc010d26a
c0106d6b:	68 ea 00 00 00       	push   $0xea
c0106d70:	68 7f d2 10 c0       	push   $0xc010d27f
c0106d75:	e8 7e 96 ff ff       	call   c01003f8 <__panic>
    assert((p2 = alloc_page()) != NULL);
c0106d7a:	83 ec 0c             	sub    $0xc,%esp
c0106d7d:	6a 01                	push   $0x1
c0106d7f:	e8 cf 09 00 00       	call   c0107753 <alloc_pages>
c0106d84:	83 c4 10             	add    $0x10,%esp
c0106d87:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0106d8a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106d8e:	75 19                	jne    c0106da9 <basic_check+0x340>
c0106d90:	68 05 d3 10 c0       	push   $0xc010d305
c0106d95:	68 6a d2 10 c0       	push   $0xc010d26a
c0106d9a:	68 eb 00 00 00       	push   $0xeb
c0106d9f:	68 7f d2 10 c0       	push   $0xc010d27f
c0106da4:	e8 4f 96 ff ff       	call   c01003f8 <__panic>

    assert(alloc_page() == NULL);
c0106da9:	83 ec 0c             	sub    $0xc,%esp
c0106dac:	6a 01                	push   $0x1
c0106dae:	e8 a0 09 00 00       	call   c0107753 <alloc_pages>
c0106db3:	83 c4 10             	add    $0x10,%esp
c0106db6:	85 c0                	test   %eax,%eax
c0106db8:	74 19                	je     c0106dd3 <basic_check+0x36a>
c0106dba:	68 f2 d3 10 c0       	push   $0xc010d3f2
c0106dbf:	68 6a d2 10 c0       	push   $0xc010d26a
c0106dc4:	68 ed 00 00 00       	push   $0xed
c0106dc9:	68 7f d2 10 c0       	push   $0xc010d27f
c0106dce:	e8 25 96 ff ff       	call   c01003f8 <__panic>

    free_page(p0);
c0106dd3:	83 ec 08             	sub    $0x8,%esp
c0106dd6:	6a 01                	push   $0x1
c0106dd8:	ff 75 ec             	pushl  -0x14(%ebp)
c0106ddb:	e8 df 09 00 00       	call   c01077bf <free_pages>
c0106de0:	83 c4 10             	add    $0x10,%esp
c0106de3:	c7 45 e8 84 21 1a c0 	movl   $0xc01a2184,-0x18(%ebp)
c0106dea:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106ded:	8b 40 04             	mov    0x4(%eax),%eax
c0106df0:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c0106df3:	0f 94 c0             	sete   %al
c0106df6:	0f b6 c0             	movzbl %al,%eax
    assert(!list_empty(&free_list));
c0106df9:	85 c0                	test   %eax,%eax
c0106dfb:	74 19                	je     c0106e16 <basic_check+0x3ad>
c0106dfd:	68 14 d4 10 c0       	push   $0xc010d414
c0106e02:	68 6a d2 10 c0       	push   $0xc010d26a
c0106e07:	68 f0 00 00 00       	push   $0xf0
c0106e0c:	68 7f d2 10 c0       	push   $0xc010d27f
c0106e11:	e8 e2 95 ff ff       	call   c01003f8 <__panic>

    struct Page *p;
    assert((p = alloc_page()) == p0);
c0106e16:	83 ec 0c             	sub    $0xc,%esp
c0106e19:	6a 01                	push   $0x1
c0106e1b:	e8 33 09 00 00       	call   c0107753 <alloc_pages>
c0106e20:	83 c4 10             	add    $0x10,%esp
c0106e23:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0106e26:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106e29:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0106e2c:	74 19                	je     c0106e47 <basic_check+0x3de>
c0106e2e:	68 2c d4 10 c0       	push   $0xc010d42c
c0106e33:	68 6a d2 10 c0       	push   $0xc010d26a
c0106e38:	68 f3 00 00 00       	push   $0xf3
c0106e3d:	68 7f d2 10 c0       	push   $0xc010d27f
c0106e42:	e8 b1 95 ff ff       	call   c01003f8 <__panic>
    assert(alloc_page() == NULL);
c0106e47:	83 ec 0c             	sub    $0xc,%esp
c0106e4a:	6a 01                	push   $0x1
c0106e4c:	e8 02 09 00 00       	call   c0107753 <alloc_pages>
c0106e51:	83 c4 10             	add    $0x10,%esp
c0106e54:	85 c0                	test   %eax,%eax
c0106e56:	74 19                	je     c0106e71 <basic_check+0x408>
c0106e58:	68 f2 d3 10 c0       	push   $0xc010d3f2
c0106e5d:	68 6a d2 10 c0       	push   $0xc010d26a
c0106e62:	68 f4 00 00 00       	push   $0xf4
c0106e67:	68 7f d2 10 c0       	push   $0xc010d27f
c0106e6c:	e8 87 95 ff ff       	call   c01003f8 <__panic>

    assert(nr_free == 0);
c0106e71:	a1 8c 21 1a c0       	mov    0xc01a218c,%eax
c0106e76:	85 c0                	test   %eax,%eax
c0106e78:	74 19                	je     c0106e93 <basic_check+0x42a>
c0106e7a:	68 45 d4 10 c0       	push   $0xc010d445
c0106e7f:	68 6a d2 10 c0       	push   $0xc010d26a
c0106e84:	68 f6 00 00 00       	push   $0xf6
c0106e89:	68 7f d2 10 c0       	push   $0xc010d27f
c0106e8e:	e8 65 95 ff ff       	call   c01003f8 <__panic>
    free_list = free_list_store;
c0106e93:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0106e96:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0106e99:	a3 84 21 1a c0       	mov    %eax,0xc01a2184
c0106e9e:	89 15 88 21 1a c0    	mov    %edx,0xc01a2188
    nr_free = nr_free_store;
c0106ea4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106ea7:	a3 8c 21 1a c0       	mov    %eax,0xc01a218c

    free_page(p);
c0106eac:	83 ec 08             	sub    $0x8,%esp
c0106eaf:	6a 01                	push   $0x1
c0106eb1:	ff 75 dc             	pushl  -0x24(%ebp)
c0106eb4:	e8 06 09 00 00       	call   c01077bf <free_pages>
c0106eb9:	83 c4 10             	add    $0x10,%esp
    free_page(p1);
c0106ebc:	83 ec 08             	sub    $0x8,%esp
c0106ebf:	6a 01                	push   $0x1
c0106ec1:	ff 75 f0             	pushl  -0x10(%ebp)
c0106ec4:	e8 f6 08 00 00       	call   c01077bf <free_pages>
c0106ec9:	83 c4 10             	add    $0x10,%esp
    free_page(p2);
c0106ecc:	83 ec 08             	sub    $0x8,%esp
c0106ecf:	6a 01                	push   $0x1
c0106ed1:	ff 75 f4             	pushl  -0xc(%ebp)
c0106ed4:	e8 e6 08 00 00       	call   c01077bf <free_pages>
c0106ed9:	83 c4 10             	add    $0x10,%esp
}
c0106edc:	90                   	nop
c0106edd:	c9                   	leave  
c0106ede:	c3                   	ret    

c0106edf <default_check>:

// LAB2: below code is used to check the first fit allocation algorithm (your EXERCISE 1) 
// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
static void
default_check(void) {
c0106edf:	55                   	push   %ebp
c0106ee0:	89 e5                	mov    %esp,%ebp
c0106ee2:	81 ec 88 00 00 00    	sub    $0x88,%esp
    int count = 0, total = 0;
c0106ee8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0106eef:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    list_entry_t *le = &free_list;
c0106ef6:	c7 45 ec 84 21 1a c0 	movl   $0xc01a2184,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c0106efd:	eb 60                	jmp    c0106f5f <default_check+0x80>
        struct Page *p = le2page(le, page_link);
c0106eff:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106f02:	83 e8 0c             	sub    $0xc,%eax
c0106f05:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        assert(PageProperty(p));
c0106f08:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106f0b:	83 c0 04             	add    $0x4,%eax
c0106f0e:	c7 45 b0 01 00 00 00 	movl   $0x1,-0x50(%ebp)
c0106f15:	89 45 ac             	mov    %eax,-0x54(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0106f18:	8b 45 ac             	mov    -0x54(%ebp),%eax
c0106f1b:	8b 55 b0             	mov    -0x50(%ebp),%edx
c0106f1e:	0f a3 10             	bt     %edx,(%eax)
c0106f21:	19 c0                	sbb    %eax,%eax
c0106f23:	89 45 a8             	mov    %eax,-0x58(%ebp)
    return oldbit != 0;
c0106f26:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
c0106f2a:	0f 95 c0             	setne  %al
c0106f2d:	0f b6 c0             	movzbl %al,%eax
c0106f30:	85 c0                	test   %eax,%eax
c0106f32:	75 19                	jne    c0106f4d <default_check+0x6e>
c0106f34:	68 52 d4 10 c0       	push   $0xc010d452
c0106f39:	68 6a d2 10 c0       	push   $0xc010d26a
c0106f3e:	68 07 01 00 00       	push   $0x107
c0106f43:	68 7f d2 10 c0       	push   $0xc010d27f
c0106f48:	e8 ab 94 ff ff       	call   c01003f8 <__panic>
        count ++, total += p->property;
c0106f4d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0106f51:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106f54:	8b 50 08             	mov    0x8(%eax),%edx
c0106f57:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106f5a:	01 d0                	add    %edx,%eax
c0106f5c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106f5f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106f62:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0106f65:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106f68:	8b 40 04             	mov    0x4(%eax),%eax
// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
static void
default_check(void) {
    int count = 0, total = 0;
    list_entry_t *le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c0106f6b:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0106f6e:	81 7d ec 84 21 1a c0 	cmpl   $0xc01a2184,-0x14(%ebp)
c0106f75:	75 88                	jne    c0106eff <default_check+0x20>
        struct Page *p = le2page(le, page_link);
        assert(PageProperty(p));
        count ++, total += p->property;
    }
    assert(total == nr_free_pages());
c0106f77:	e8 78 08 00 00       	call   c01077f4 <nr_free_pages>
c0106f7c:	89 c2                	mov    %eax,%edx
c0106f7e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106f81:	39 c2                	cmp    %eax,%edx
c0106f83:	74 19                	je     c0106f9e <default_check+0xbf>
c0106f85:	68 62 d4 10 c0       	push   $0xc010d462
c0106f8a:	68 6a d2 10 c0       	push   $0xc010d26a
c0106f8f:	68 0a 01 00 00       	push   $0x10a
c0106f94:	68 7f d2 10 c0       	push   $0xc010d27f
c0106f99:	e8 5a 94 ff ff       	call   c01003f8 <__panic>

    basic_check();
c0106f9e:	e8 c6 fa ff ff       	call   c0106a69 <basic_check>

    struct Page *p0 = alloc_pages(5), *p1, *p2;
c0106fa3:	83 ec 0c             	sub    $0xc,%esp
c0106fa6:	6a 05                	push   $0x5
c0106fa8:	e8 a6 07 00 00       	call   c0107753 <alloc_pages>
c0106fad:	83 c4 10             	add    $0x10,%esp
c0106fb0:	89 45 dc             	mov    %eax,-0x24(%ebp)
    assert(p0 != NULL);
c0106fb3:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0106fb7:	75 19                	jne    c0106fd2 <default_check+0xf3>
c0106fb9:	68 7b d4 10 c0       	push   $0xc010d47b
c0106fbe:	68 6a d2 10 c0       	push   $0xc010d26a
c0106fc3:	68 0f 01 00 00       	push   $0x10f
c0106fc8:	68 7f d2 10 c0       	push   $0xc010d27f
c0106fcd:	e8 26 94 ff ff       	call   c01003f8 <__panic>
    assert(!PageProperty(p0));
c0106fd2:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106fd5:	83 c0 04             	add    $0x4,%eax
c0106fd8:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
c0106fdf:	89 45 a4             	mov    %eax,-0x5c(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0106fe2:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0106fe5:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0106fe8:	0f a3 10             	bt     %edx,(%eax)
c0106feb:	19 c0                	sbb    %eax,%eax
c0106fed:	89 45 a0             	mov    %eax,-0x60(%ebp)
    return oldbit != 0;
c0106ff0:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
c0106ff4:	0f 95 c0             	setne  %al
c0106ff7:	0f b6 c0             	movzbl %al,%eax
c0106ffa:	85 c0                	test   %eax,%eax
c0106ffc:	74 19                	je     c0107017 <default_check+0x138>
c0106ffe:	68 86 d4 10 c0       	push   $0xc010d486
c0107003:	68 6a d2 10 c0       	push   $0xc010d26a
c0107008:	68 10 01 00 00       	push   $0x110
c010700d:	68 7f d2 10 c0       	push   $0xc010d27f
c0107012:	e8 e1 93 ff ff       	call   c01003f8 <__panic>

    list_entry_t free_list_store = free_list;
c0107017:	a1 84 21 1a c0       	mov    0xc01a2184,%eax
c010701c:	8b 15 88 21 1a c0    	mov    0xc01a2188,%edx
c0107022:	89 45 80             	mov    %eax,-0x80(%ebp)
c0107025:	89 55 84             	mov    %edx,-0x7c(%ebp)
c0107028:	c7 45 d0 84 21 1a c0 	movl   $0xc01a2184,-0x30(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010702f:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0107032:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0107035:	89 50 04             	mov    %edx,0x4(%eax)
c0107038:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010703b:	8b 50 04             	mov    0x4(%eax),%edx
c010703e:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0107041:	89 10                	mov    %edx,(%eax)
c0107043:	c7 45 d8 84 21 1a c0 	movl   $0xc01a2184,-0x28(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010704a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010704d:	8b 40 04             	mov    0x4(%eax),%eax
c0107050:	39 45 d8             	cmp    %eax,-0x28(%ebp)
c0107053:	0f 94 c0             	sete   %al
c0107056:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c0107059:	85 c0                	test   %eax,%eax
c010705b:	75 19                	jne    c0107076 <default_check+0x197>
c010705d:	68 db d3 10 c0       	push   $0xc010d3db
c0107062:	68 6a d2 10 c0       	push   $0xc010d26a
c0107067:	68 14 01 00 00       	push   $0x114
c010706c:	68 7f d2 10 c0       	push   $0xc010d27f
c0107071:	e8 82 93 ff ff       	call   c01003f8 <__panic>
    assert(alloc_page() == NULL);
c0107076:	83 ec 0c             	sub    $0xc,%esp
c0107079:	6a 01                	push   $0x1
c010707b:	e8 d3 06 00 00       	call   c0107753 <alloc_pages>
c0107080:	83 c4 10             	add    $0x10,%esp
c0107083:	85 c0                	test   %eax,%eax
c0107085:	74 19                	je     c01070a0 <default_check+0x1c1>
c0107087:	68 f2 d3 10 c0       	push   $0xc010d3f2
c010708c:	68 6a d2 10 c0       	push   $0xc010d26a
c0107091:	68 15 01 00 00       	push   $0x115
c0107096:	68 7f d2 10 c0       	push   $0xc010d27f
c010709b:	e8 58 93 ff ff       	call   c01003f8 <__panic>

    unsigned int nr_free_store = nr_free;
c01070a0:	a1 8c 21 1a c0       	mov    0xc01a218c,%eax
c01070a5:	89 45 cc             	mov    %eax,-0x34(%ebp)
    nr_free = 0;
c01070a8:	c7 05 8c 21 1a c0 00 	movl   $0x0,0xc01a218c
c01070af:	00 00 00 

    free_pages(p0 + 2, 3);
c01070b2:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01070b5:	83 c0 40             	add    $0x40,%eax
c01070b8:	83 ec 08             	sub    $0x8,%esp
c01070bb:	6a 03                	push   $0x3
c01070bd:	50                   	push   %eax
c01070be:	e8 fc 06 00 00       	call   c01077bf <free_pages>
c01070c3:	83 c4 10             	add    $0x10,%esp
    assert(alloc_pages(4) == NULL);
c01070c6:	83 ec 0c             	sub    $0xc,%esp
c01070c9:	6a 04                	push   $0x4
c01070cb:	e8 83 06 00 00       	call   c0107753 <alloc_pages>
c01070d0:	83 c4 10             	add    $0x10,%esp
c01070d3:	85 c0                	test   %eax,%eax
c01070d5:	74 19                	je     c01070f0 <default_check+0x211>
c01070d7:	68 98 d4 10 c0       	push   $0xc010d498
c01070dc:	68 6a d2 10 c0       	push   $0xc010d26a
c01070e1:	68 1b 01 00 00       	push   $0x11b
c01070e6:	68 7f d2 10 c0       	push   $0xc010d27f
c01070eb:	e8 08 93 ff ff       	call   c01003f8 <__panic>
    assert(PageProperty(p0 + 2) && p0[2].property == 3);
c01070f0:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01070f3:	83 c0 40             	add    $0x40,%eax
c01070f6:	83 c0 04             	add    $0x4,%eax
c01070f9:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
c0107100:	89 45 9c             	mov    %eax,-0x64(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0107103:	8b 45 9c             	mov    -0x64(%ebp),%eax
c0107106:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0107109:	0f a3 10             	bt     %edx,(%eax)
c010710c:	19 c0                	sbb    %eax,%eax
c010710e:	89 45 98             	mov    %eax,-0x68(%ebp)
    return oldbit != 0;
c0107111:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
c0107115:	0f 95 c0             	setne  %al
c0107118:	0f b6 c0             	movzbl %al,%eax
c010711b:	85 c0                	test   %eax,%eax
c010711d:	74 0e                	je     c010712d <default_check+0x24e>
c010711f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107122:	83 c0 40             	add    $0x40,%eax
c0107125:	8b 40 08             	mov    0x8(%eax),%eax
c0107128:	83 f8 03             	cmp    $0x3,%eax
c010712b:	74 19                	je     c0107146 <default_check+0x267>
c010712d:	68 b0 d4 10 c0       	push   $0xc010d4b0
c0107132:	68 6a d2 10 c0       	push   $0xc010d26a
c0107137:	68 1c 01 00 00       	push   $0x11c
c010713c:	68 7f d2 10 c0       	push   $0xc010d27f
c0107141:	e8 b2 92 ff ff       	call   c01003f8 <__panic>
    assert((p1 = alloc_pages(3)) != NULL);
c0107146:	83 ec 0c             	sub    $0xc,%esp
c0107149:	6a 03                	push   $0x3
c010714b:	e8 03 06 00 00       	call   c0107753 <alloc_pages>
c0107150:	83 c4 10             	add    $0x10,%esp
c0107153:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c0107156:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
c010715a:	75 19                	jne    c0107175 <default_check+0x296>
c010715c:	68 dc d4 10 c0       	push   $0xc010d4dc
c0107161:	68 6a d2 10 c0       	push   $0xc010d26a
c0107166:	68 1d 01 00 00       	push   $0x11d
c010716b:	68 7f d2 10 c0       	push   $0xc010d27f
c0107170:	e8 83 92 ff ff       	call   c01003f8 <__panic>
    assert(alloc_page() == NULL);
c0107175:	83 ec 0c             	sub    $0xc,%esp
c0107178:	6a 01                	push   $0x1
c010717a:	e8 d4 05 00 00       	call   c0107753 <alloc_pages>
c010717f:	83 c4 10             	add    $0x10,%esp
c0107182:	85 c0                	test   %eax,%eax
c0107184:	74 19                	je     c010719f <default_check+0x2c0>
c0107186:	68 f2 d3 10 c0       	push   $0xc010d3f2
c010718b:	68 6a d2 10 c0       	push   $0xc010d26a
c0107190:	68 1e 01 00 00       	push   $0x11e
c0107195:	68 7f d2 10 c0       	push   $0xc010d27f
c010719a:	e8 59 92 ff ff       	call   c01003f8 <__panic>
    assert(p0 + 2 == p1);
c010719f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01071a2:	83 c0 40             	add    $0x40,%eax
c01071a5:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
c01071a8:	74 19                	je     c01071c3 <default_check+0x2e4>
c01071aa:	68 fa d4 10 c0       	push   $0xc010d4fa
c01071af:	68 6a d2 10 c0       	push   $0xc010d26a
c01071b4:	68 1f 01 00 00       	push   $0x11f
c01071b9:	68 7f d2 10 c0       	push   $0xc010d27f
c01071be:	e8 35 92 ff ff       	call   c01003f8 <__panic>

    p2 = p0 + 1;
c01071c3:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01071c6:	83 c0 20             	add    $0x20,%eax
c01071c9:	89 45 c0             	mov    %eax,-0x40(%ebp)
    free_page(p0);
c01071cc:	83 ec 08             	sub    $0x8,%esp
c01071cf:	6a 01                	push   $0x1
c01071d1:	ff 75 dc             	pushl  -0x24(%ebp)
c01071d4:	e8 e6 05 00 00       	call   c01077bf <free_pages>
c01071d9:	83 c4 10             	add    $0x10,%esp
    free_pages(p1, 3);
c01071dc:	83 ec 08             	sub    $0x8,%esp
c01071df:	6a 03                	push   $0x3
c01071e1:	ff 75 c4             	pushl  -0x3c(%ebp)
c01071e4:	e8 d6 05 00 00       	call   c01077bf <free_pages>
c01071e9:	83 c4 10             	add    $0x10,%esp
    assert(PageProperty(p0) && p0->property == 1);
c01071ec:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01071ef:	83 c0 04             	add    $0x4,%eax
c01071f2:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
c01071f9:	89 45 94             	mov    %eax,-0x6c(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01071fc:	8b 45 94             	mov    -0x6c(%ebp),%eax
c01071ff:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0107202:	0f a3 10             	bt     %edx,(%eax)
c0107205:	19 c0                	sbb    %eax,%eax
c0107207:	89 45 90             	mov    %eax,-0x70(%ebp)
    return oldbit != 0;
c010720a:	83 7d 90 00          	cmpl   $0x0,-0x70(%ebp)
c010720e:	0f 95 c0             	setne  %al
c0107211:	0f b6 c0             	movzbl %al,%eax
c0107214:	85 c0                	test   %eax,%eax
c0107216:	74 0b                	je     c0107223 <default_check+0x344>
c0107218:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010721b:	8b 40 08             	mov    0x8(%eax),%eax
c010721e:	83 f8 01             	cmp    $0x1,%eax
c0107221:	74 19                	je     c010723c <default_check+0x35d>
c0107223:	68 08 d5 10 c0       	push   $0xc010d508
c0107228:	68 6a d2 10 c0       	push   $0xc010d26a
c010722d:	68 24 01 00 00       	push   $0x124
c0107232:	68 7f d2 10 c0       	push   $0xc010d27f
c0107237:	e8 bc 91 ff ff       	call   c01003f8 <__panic>
    assert(PageProperty(p1) && p1->property == 3);
c010723c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010723f:	83 c0 04             	add    $0x4,%eax
c0107242:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
c0107249:	89 45 8c             	mov    %eax,-0x74(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010724c:	8b 45 8c             	mov    -0x74(%ebp),%eax
c010724f:	8b 55 bc             	mov    -0x44(%ebp),%edx
c0107252:	0f a3 10             	bt     %edx,(%eax)
c0107255:	19 c0                	sbb    %eax,%eax
c0107257:	89 45 88             	mov    %eax,-0x78(%ebp)
    return oldbit != 0;
c010725a:	83 7d 88 00          	cmpl   $0x0,-0x78(%ebp)
c010725e:	0f 95 c0             	setne  %al
c0107261:	0f b6 c0             	movzbl %al,%eax
c0107264:	85 c0                	test   %eax,%eax
c0107266:	74 0b                	je     c0107273 <default_check+0x394>
c0107268:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010726b:	8b 40 08             	mov    0x8(%eax),%eax
c010726e:	83 f8 03             	cmp    $0x3,%eax
c0107271:	74 19                	je     c010728c <default_check+0x3ad>
c0107273:	68 30 d5 10 c0       	push   $0xc010d530
c0107278:	68 6a d2 10 c0       	push   $0xc010d26a
c010727d:	68 25 01 00 00       	push   $0x125
c0107282:	68 7f d2 10 c0       	push   $0xc010d27f
c0107287:	e8 6c 91 ff ff       	call   c01003f8 <__panic>

    assert((p0 = alloc_page()) == p2 - 1);
c010728c:	83 ec 0c             	sub    $0xc,%esp
c010728f:	6a 01                	push   $0x1
c0107291:	e8 bd 04 00 00       	call   c0107753 <alloc_pages>
c0107296:	83 c4 10             	add    $0x10,%esp
c0107299:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010729c:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010729f:	83 e8 20             	sub    $0x20,%eax
c01072a2:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c01072a5:	74 19                	je     c01072c0 <default_check+0x3e1>
c01072a7:	68 56 d5 10 c0       	push   $0xc010d556
c01072ac:	68 6a d2 10 c0       	push   $0xc010d26a
c01072b1:	68 27 01 00 00       	push   $0x127
c01072b6:	68 7f d2 10 c0       	push   $0xc010d27f
c01072bb:	e8 38 91 ff ff       	call   c01003f8 <__panic>
    free_page(p0);
c01072c0:	83 ec 08             	sub    $0x8,%esp
c01072c3:	6a 01                	push   $0x1
c01072c5:	ff 75 dc             	pushl  -0x24(%ebp)
c01072c8:	e8 f2 04 00 00       	call   c01077bf <free_pages>
c01072cd:	83 c4 10             	add    $0x10,%esp
    assert((p0 = alloc_pages(2)) == p2 + 1);
c01072d0:	83 ec 0c             	sub    $0xc,%esp
c01072d3:	6a 02                	push   $0x2
c01072d5:	e8 79 04 00 00       	call   c0107753 <alloc_pages>
c01072da:	83 c4 10             	add    $0x10,%esp
c01072dd:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01072e0:	8b 45 c0             	mov    -0x40(%ebp),%eax
c01072e3:	83 c0 20             	add    $0x20,%eax
c01072e6:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c01072e9:	74 19                	je     c0107304 <default_check+0x425>
c01072eb:	68 74 d5 10 c0       	push   $0xc010d574
c01072f0:	68 6a d2 10 c0       	push   $0xc010d26a
c01072f5:	68 29 01 00 00       	push   $0x129
c01072fa:	68 7f d2 10 c0       	push   $0xc010d27f
c01072ff:	e8 f4 90 ff ff       	call   c01003f8 <__panic>

    free_pages(p0, 2);
c0107304:	83 ec 08             	sub    $0x8,%esp
c0107307:	6a 02                	push   $0x2
c0107309:	ff 75 dc             	pushl  -0x24(%ebp)
c010730c:	e8 ae 04 00 00       	call   c01077bf <free_pages>
c0107311:	83 c4 10             	add    $0x10,%esp
    free_page(p2);
c0107314:	83 ec 08             	sub    $0x8,%esp
c0107317:	6a 01                	push   $0x1
c0107319:	ff 75 c0             	pushl  -0x40(%ebp)
c010731c:	e8 9e 04 00 00       	call   c01077bf <free_pages>
c0107321:	83 c4 10             	add    $0x10,%esp

    assert((p0 = alloc_pages(5)) != NULL);
c0107324:	83 ec 0c             	sub    $0xc,%esp
c0107327:	6a 05                	push   $0x5
c0107329:	e8 25 04 00 00       	call   c0107753 <alloc_pages>
c010732e:	83 c4 10             	add    $0x10,%esp
c0107331:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0107334:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0107338:	75 19                	jne    c0107353 <default_check+0x474>
c010733a:	68 94 d5 10 c0       	push   $0xc010d594
c010733f:	68 6a d2 10 c0       	push   $0xc010d26a
c0107344:	68 2e 01 00 00       	push   $0x12e
c0107349:	68 7f d2 10 c0       	push   $0xc010d27f
c010734e:	e8 a5 90 ff ff       	call   c01003f8 <__panic>
    assert(alloc_page() == NULL);
c0107353:	83 ec 0c             	sub    $0xc,%esp
c0107356:	6a 01                	push   $0x1
c0107358:	e8 f6 03 00 00       	call   c0107753 <alloc_pages>
c010735d:	83 c4 10             	add    $0x10,%esp
c0107360:	85 c0                	test   %eax,%eax
c0107362:	74 19                	je     c010737d <default_check+0x49e>
c0107364:	68 f2 d3 10 c0       	push   $0xc010d3f2
c0107369:	68 6a d2 10 c0       	push   $0xc010d26a
c010736e:	68 2f 01 00 00       	push   $0x12f
c0107373:	68 7f d2 10 c0       	push   $0xc010d27f
c0107378:	e8 7b 90 ff ff       	call   c01003f8 <__panic>

    assert(nr_free == 0);
c010737d:	a1 8c 21 1a c0       	mov    0xc01a218c,%eax
c0107382:	85 c0                	test   %eax,%eax
c0107384:	74 19                	je     c010739f <default_check+0x4c0>
c0107386:	68 45 d4 10 c0       	push   $0xc010d445
c010738b:	68 6a d2 10 c0       	push   $0xc010d26a
c0107390:	68 31 01 00 00       	push   $0x131
c0107395:	68 7f d2 10 c0       	push   $0xc010d27f
c010739a:	e8 59 90 ff ff       	call   c01003f8 <__panic>
    nr_free = nr_free_store;
c010739f:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01073a2:	a3 8c 21 1a c0       	mov    %eax,0xc01a218c

    free_list = free_list_store;
c01073a7:	8b 45 80             	mov    -0x80(%ebp),%eax
c01073aa:	8b 55 84             	mov    -0x7c(%ebp),%edx
c01073ad:	a3 84 21 1a c0       	mov    %eax,0xc01a2184
c01073b2:	89 15 88 21 1a c0    	mov    %edx,0xc01a2188
    free_pages(p0, 5);
c01073b8:	83 ec 08             	sub    $0x8,%esp
c01073bb:	6a 05                	push   $0x5
c01073bd:	ff 75 dc             	pushl  -0x24(%ebp)
c01073c0:	e8 fa 03 00 00       	call   c01077bf <free_pages>
c01073c5:	83 c4 10             	add    $0x10,%esp

    le = &free_list;
c01073c8:	c7 45 ec 84 21 1a c0 	movl   $0xc01a2184,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c01073cf:	eb 1d                	jmp    c01073ee <default_check+0x50f>
        struct Page *p = le2page(le, page_link);
c01073d1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01073d4:	83 e8 0c             	sub    $0xc,%eax
c01073d7:	89 45 b4             	mov    %eax,-0x4c(%ebp)
        count --, total -= p->property;
c01073da:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c01073de:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01073e1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01073e4:	8b 40 08             	mov    0x8(%eax),%eax
c01073e7:	29 c2                	sub    %eax,%edx
c01073e9:	89 d0                	mov    %edx,%eax
c01073eb:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01073ee:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01073f1:	89 45 b8             	mov    %eax,-0x48(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01073f4:	8b 45 b8             	mov    -0x48(%ebp),%eax
c01073f7:	8b 40 04             	mov    0x4(%eax),%eax

    free_list = free_list_store;
    free_pages(p0, 5);

    le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c01073fa:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01073fd:	81 7d ec 84 21 1a c0 	cmpl   $0xc01a2184,-0x14(%ebp)
c0107404:	75 cb                	jne    c01073d1 <default_check+0x4f2>
        struct Page *p = le2page(le, page_link);
        count --, total -= p->property;
    }
    assert(count == 0);
c0107406:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010740a:	74 19                	je     c0107425 <default_check+0x546>
c010740c:	68 b2 d5 10 c0       	push   $0xc010d5b2
c0107411:	68 6a d2 10 c0       	push   $0xc010d26a
c0107416:	68 3c 01 00 00       	push   $0x13c
c010741b:	68 7f d2 10 c0       	push   $0xc010d27f
c0107420:	e8 d3 8f ff ff       	call   c01003f8 <__panic>
    assert(total == 0);
c0107425:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0107429:	74 19                	je     c0107444 <default_check+0x565>
c010742b:	68 bd d5 10 c0       	push   $0xc010d5bd
c0107430:	68 6a d2 10 c0       	push   $0xc010d26a
c0107435:	68 3d 01 00 00       	push   $0x13d
c010743a:	68 7f d2 10 c0       	push   $0xc010d27f
c010743f:	e8 b4 8f ff ff       	call   c01003f8 <__panic>
}
c0107444:	90                   	nop
c0107445:	c9                   	leave  
c0107446:	c3                   	ret    

c0107447 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0107447:	55                   	push   %ebp
c0107448:	89 e5                	mov    %esp,%ebp
    return page - pages;
c010744a:	8b 45 08             	mov    0x8(%ebp),%eax
c010744d:	8b 15 98 21 1a c0    	mov    0xc01a2198,%edx
c0107453:	29 d0                	sub    %edx,%eax
c0107455:	c1 f8 05             	sar    $0x5,%eax
}
c0107458:	5d                   	pop    %ebp
c0107459:	c3                   	ret    

c010745a <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c010745a:	55                   	push   %ebp
c010745b:	89 e5                	mov    %esp,%ebp
    return page2ppn(page) << PGSHIFT;
c010745d:	ff 75 08             	pushl  0x8(%ebp)
c0107460:	e8 e2 ff ff ff       	call   c0107447 <page2ppn>
c0107465:	83 c4 04             	add    $0x4,%esp
c0107468:	c1 e0 0c             	shl    $0xc,%eax
}
c010746b:	c9                   	leave  
c010746c:	c3                   	ret    

c010746d <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c010746d:	55                   	push   %ebp
c010746e:	89 e5                	mov    %esp,%ebp
c0107470:	83 ec 08             	sub    $0x8,%esp
    if (PPN(pa) >= npage) {
c0107473:	8b 45 08             	mov    0x8(%ebp),%eax
c0107476:	c1 e8 0c             	shr    $0xc,%eax
c0107479:	89 c2                	mov    %eax,%edx
c010747b:	a1 80 ff 19 c0       	mov    0xc019ff80,%eax
c0107480:	39 c2                	cmp    %eax,%edx
c0107482:	72 14                	jb     c0107498 <pa2page+0x2b>
        panic("pa2page called with invalid pa");
c0107484:	83 ec 04             	sub    $0x4,%esp
c0107487:	68 f8 d5 10 c0       	push   $0xc010d5f8
c010748c:	6a 5e                	push   $0x5e
c010748e:	68 17 d6 10 c0       	push   $0xc010d617
c0107493:	e8 60 8f ff ff       	call   c01003f8 <__panic>
    }
    return &pages[PPN(pa)];
c0107498:	a1 98 21 1a c0       	mov    0xc01a2198,%eax
c010749d:	8b 55 08             	mov    0x8(%ebp),%edx
c01074a0:	c1 ea 0c             	shr    $0xc,%edx
c01074a3:	c1 e2 05             	shl    $0x5,%edx
c01074a6:	01 d0                	add    %edx,%eax
}
c01074a8:	c9                   	leave  
c01074a9:	c3                   	ret    

c01074aa <page2kva>:

static inline void *
page2kva(struct Page *page) {
c01074aa:	55                   	push   %ebp
c01074ab:	89 e5                	mov    %esp,%ebp
c01074ad:	83 ec 18             	sub    $0x18,%esp
    return KADDR(page2pa(page));
c01074b0:	ff 75 08             	pushl  0x8(%ebp)
c01074b3:	e8 a2 ff ff ff       	call   c010745a <page2pa>
c01074b8:	83 c4 04             	add    $0x4,%esp
c01074bb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01074be:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01074c1:	c1 e8 0c             	shr    $0xc,%eax
c01074c4:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01074c7:	a1 80 ff 19 c0       	mov    0xc019ff80,%eax
c01074cc:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c01074cf:	72 14                	jb     c01074e5 <page2kva+0x3b>
c01074d1:	ff 75 f4             	pushl  -0xc(%ebp)
c01074d4:	68 28 d6 10 c0       	push   $0xc010d628
c01074d9:	6a 65                	push   $0x65
c01074db:	68 17 d6 10 c0       	push   $0xc010d617
c01074e0:	e8 13 8f ff ff       	call   c01003f8 <__panic>
c01074e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01074e8:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c01074ed:	c9                   	leave  
c01074ee:	c3                   	ret    

c01074ef <pte2page>:
kva2page(void *kva) {
    return pa2page(PADDR(kva));
}

static inline struct Page *
pte2page(pte_t pte) {
c01074ef:	55                   	push   %ebp
c01074f0:	89 e5                	mov    %esp,%ebp
c01074f2:	83 ec 08             	sub    $0x8,%esp
    if (!(pte & PTE_P)) {
c01074f5:	8b 45 08             	mov    0x8(%ebp),%eax
c01074f8:	83 e0 01             	and    $0x1,%eax
c01074fb:	85 c0                	test   %eax,%eax
c01074fd:	75 14                	jne    c0107513 <pte2page+0x24>
        panic("pte2page called with invalid pte");
c01074ff:	83 ec 04             	sub    $0x4,%esp
c0107502:	68 4c d6 10 c0       	push   $0xc010d64c
c0107507:	6a 70                	push   $0x70
c0107509:	68 17 d6 10 c0       	push   $0xc010d617
c010750e:	e8 e5 8e ff ff       	call   c01003f8 <__panic>
    }
    return pa2page(PTE_ADDR(pte));
c0107513:	8b 45 08             	mov    0x8(%ebp),%eax
c0107516:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010751b:	83 ec 0c             	sub    $0xc,%esp
c010751e:	50                   	push   %eax
c010751f:	e8 49 ff ff ff       	call   c010746d <pa2page>
c0107524:	83 c4 10             	add    $0x10,%esp
}
c0107527:	c9                   	leave  
c0107528:	c3                   	ret    

c0107529 <pde2page>:

static inline struct Page *
pde2page(pde_t pde) {
c0107529:	55                   	push   %ebp
c010752a:	89 e5                	mov    %esp,%ebp
c010752c:	83 ec 08             	sub    $0x8,%esp
    return pa2page(PDE_ADDR(pde));
c010752f:	8b 45 08             	mov    0x8(%ebp),%eax
c0107532:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0107537:	83 ec 0c             	sub    $0xc,%esp
c010753a:	50                   	push   %eax
c010753b:	e8 2d ff ff ff       	call   c010746d <pa2page>
c0107540:	83 c4 10             	add    $0x10,%esp
}
c0107543:	c9                   	leave  
c0107544:	c3                   	ret    

c0107545 <page_ref>:

static inline int
page_ref(struct Page *page) {
c0107545:	55                   	push   %ebp
c0107546:	89 e5                	mov    %esp,%ebp
    return page->ref;
c0107548:	8b 45 08             	mov    0x8(%ebp),%eax
c010754b:	8b 00                	mov    (%eax),%eax
}
c010754d:	5d                   	pop    %ebp
c010754e:	c3                   	ret    

c010754f <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c010754f:	55                   	push   %ebp
c0107550:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c0107552:	8b 45 08             	mov    0x8(%ebp),%eax
c0107555:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107558:	89 10                	mov    %edx,(%eax)
}
c010755a:	90                   	nop
c010755b:	5d                   	pop    %ebp
c010755c:	c3                   	ret    

c010755d <page_ref_inc>:

static inline int
page_ref_inc(struct Page *page) {
c010755d:	55                   	push   %ebp
c010755e:	89 e5                	mov    %esp,%ebp
    page->ref += 1;
c0107560:	8b 45 08             	mov    0x8(%ebp),%eax
c0107563:	8b 00                	mov    (%eax),%eax
c0107565:	8d 50 01             	lea    0x1(%eax),%edx
c0107568:	8b 45 08             	mov    0x8(%ebp),%eax
c010756b:	89 10                	mov    %edx,(%eax)
    return page->ref;
c010756d:	8b 45 08             	mov    0x8(%ebp),%eax
c0107570:	8b 00                	mov    (%eax),%eax
}
c0107572:	5d                   	pop    %ebp
c0107573:	c3                   	ret    

c0107574 <page_ref_dec>:

static inline int
page_ref_dec(struct Page *page) {
c0107574:	55                   	push   %ebp
c0107575:	89 e5                	mov    %esp,%ebp
    page->ref -= 1;
c0107577:	8b 45 08             	mov    0x8(%ebp),%eax
c010757a:	8b 00                	mov    (%eax),%eax
c010757c:	8d 50 ff             	lea    -0x1(%eax),%edx
c010757f:	8b 45 08             	mov    0x8(%ebp),%eax
c0107582:	89 10                	mov    %edx,(%eax)
    return page->ref;
c0107584:	8b 45 08             	mov    0x8(%ebp),%eax
c0107587:	8b 00                	mov    (%eax),%eax
}
c0107589:	5d                   	pop    %ebp
c010758a:	c3                   	ret    

c010758b <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c010758b:	55                   	push   %ebp
c010758c:	89 e5                	mov    %esp,%ebp
c010758e:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0107591:	9c                   	pushf  
c0107592:	58                   	pop    %eax
c0107593:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0107596:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0107599:	25 00 02 00 00       	and    $0x200,%eax
c010759e:	85 c0                	test   %eax,%eax
c01075a0:	74 0c                	je     c01075ae <__intr_save+0x23>
        intr_disable();
c01075a2:	e8 10 ac ff ff       	call   c01021b7 <intr_disable>
        return 1;
c01075a7:	b8 01 00 00 00       	mov    $0x1,%eax
c01075ac:	eb 05                	jmp    c01075b3 <__intr_save+0x28>
    }
    return 0;
c01075ae:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01075b3:	c9                   	leave  
c01075b4:	c3                   	ret    

c01075b5 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c01075b5:	55                   	push   %ebp
c01075b6:	89 e5                	mov    %esp,%ebp
c01075b8:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c01075bb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01075bf:	74 05                	je     c01075c6 <__intr_restore+0x11>
        intr_enable();
c01075c1:	e8 ea ab ff ff       	call   c01021b0 <intr_enable>
    }
}
c01075c6:	90                   	nop
c01075c7:	c9                   	leave  
c01075c8:	c3                   	ret    

c01075c9 <lgdt>:
/* *
 * lgdt - load the global descriptor table register and reset the
 * data/code segement registers for kernel.
 * */
static inline void
lgdt(struct pseudodesc *pd) {
c01075c9:	55                   	push   %ebp
c01075ca:	89 e5                	mov    %esp,%ebp
    asm volatile ("lgdt (%0)" :: "r" (pd));
c01075cc:	8b 45 08             	mov    0x8(%ebp),%eax
c01075cf:	0f 01 10             	lgdtl  (%eax)
    asm volatile ("movw %%ax, %%gs" :: "a" (USER_DS));
c01075d2:	b8 23 00 00 00       	mov    $0x23,%eax
c01075d7:	8e e8                	mov    %eax,%gs
    asm volatile ("movw %%ax, %%fs" :: "a" (USER_DS));
c01075d9:	b8 23 00 00 00       	mov    $0x23,%eax
c01075de:	8e e0                	mov    %eax,%fs
    asm volatile ("movw %%ax, %%es" :: "a" (KERNEL_DS));
c01075e0:	b8 10 00 00 00       	mov    $0x10,%eax
c01075e5:	8e c0                	mov    %eax,%es
    asm volatile ("movw %%ax, %%ds" :: "a" (KERNEL_DS));
c01075e7:	b8 10 00 00 00       	mov    $0x10,%eax
c01075ec:	8e d8                	mov    %eax,%ds
    asm volatile ("movw %%ax, %%ss" :: "a" (KERNEL_DS));
c01075ee:	b8 10 00 00 00       	mov    $0x10,%eax
c01075f3:	8e d0                	mov    %eax,%ss
    // reload cs
    asm volatile ("ljmp %0, $1f\n 1:\n" :: "i" (KERNEL_CS));
c01075f5:	ea fc 75 10 c0 08 00 	ljmp   $0x8,$0xc01075fc
}
c01075fc:	90                   	nop
c01075fd:	5d                   	pop    %ebp
c01075fe:	c3                   	ret    

c01075ff <load_esp0>:
 * load_esp0 - change the ESP0 in default task state segment,
 * so that we can use different kernel stack when we trap frame
 * user to kernel.
 * */
void
load_esp0(uintptr_t esp0) {
c01075ff:	55                   	push   %ebp
c0107600:	89 e5                	mov    %esp,%ebp
    ts.ts_esp0 = esp0;
c0107602:	8b 45 08             	mov    0x8(%ebp),%eax
c0107605:	a3 a4 ff 19 c0       	mov    %eax,0xc019ffa4
}
c010760a:	90                   	nop
c010760b:	5d                   	pop    %ebp
c010760c:	c3                   	ret    

c010760d <gdt_init>:

/* gdt_init - initialize the default GDT and TSS */
static void
gdt_init(void) {
c010760d:	55                   	push   %ebp
c010760e:	89 e5                	mov    %esp,%ebp
c0107610:	83 ec 10             	sub    $0x10,%esp
    // set boot kernel stack and default SS0
    load_esp0((uintptr_t)bootstacktop);
c0107613:	b8 00 b0 12 c0       	mov    $0xc012b000,%eax
c0107618:	50                   	push   %eax
c0107619:	e8 e1 ff ff ff       	call   c01075ff <load_esp0>
c010761e:	83 c4 04             	add    $0x4,%esp
    ts.ts_ss0 = KERNEL_DS;
c0107621:	66 c7 05 a8 ff 19 c0 	movw   $0x10,0xc019ffa8
c0107628:	10 00 

    // initialize the TSS filed of the gdt
    gdt[SEG_TSS] = SEGTSS(STS_T32A, (uintptr_t)&ts, sizeof(ts), DPL_KERNEL);
c010762a:	66 c7 05 a8 ba 12 c0 	movw   $0x68,0xc012baa8
c0107631:	68 00 
c0107633:	b8 a0 ff 19 c0       	mov    $0xc019ffa0,%eax
c0107638:	66 a3 aa ba 12 c0    	mov    %ax,0xc012baaa
c010763e:	b8 a0 ff 19 c0       	mov    $0xc019ffa0,%eax
c0107643:	c1 e8 10             	shr    $0x10,%eax
c0107646:	a2 ac ba 12 c0       	mov    %al,0xc012baac
c010764b:	0f b6 05 ad ba 12 c0 	movzbl 0xc012baad,%eax
c0107652:	83 e0 f0             	and    $0xfffffff0,%eax
c0107655:	83 c8 09             	or     $0x9,%eax
c0107658:	a2 ad ba 12 c0       	mov    %al,0xc012baad
c010765d:	0f b6 05 ad ba 12 c0 	movzbl 0xc012baad,%eax
c0107664:	83 e0 ef             	and    $0xffffffef,%eax
c0107667:	a2 ad ba 12 c0       	mov    %al,0xc012baad
c010766c:	0f b6 05 ad ba 12 c0 	movzbl 0xc012baad,%eax
c0107673:	83 e0 9f             	and    $0xffffff9f,%eax
c0107676:	a2 ad ba 12 c0       	mov    %al,0xc012baad
c010767b:	0f b6 05 ad ba 12 c0 	movzbl 0xc012baad,%eax
c0107682:	83 c8 80             	or     $0xffffff80,%eax
c0107685:	a2 ad ba 12 c0       	mov    %al,0xc012baad
c010768a:	0f b6 05 ae ba 12 c0 	movzbl 0xc012baae,%eax
c0107691:	83 e0 f0             	and    $0xfffffff0,%eax
c0107694:	a2 ae ba 12 c0       	mov    %al,0xc012baae
c0107699:	0f b6 05 ae ba 12 c0 	movzbl 0xc012baae,%eax
c01076a0:	83 e0 ef             	and    $0xffffffef,%eax
c01076a3:	a2 ae ba 12 c0       	mov    %al,0xc012baae
c01076a8:	0f b6 05 ae ba 12 c0 	movzbl 0xc012baae,%eax
c01076af:	83 e0 df             	and    $0xffffffdf,%eax
c01076b2:	a2 ae ba 12 c0       	mov    %al,0xc012baae
c01076b7:	0f b6 05 ae ba 12 c0 	movzbl 0xc012baae,%eax
c01076be:	83 c8 40             	or     $0x40,%eax
c01076c1:	a2 ae ba 12 c0       	mov    %al,0xc012baae
c01076c6:	0f b6 05 ae ba 12 c0 	movzbl 0xc012baae,%eax
c01076cd:	83 e0 7f             	and    $0x7f,%eax
c01076d0:	a2 ae ba 12 c0       	mov    %al,0xc012baae
c01076d5:	b8 a0 ff 19 c0       	mov    $0xc019ffa0,%eax
c01076da:	c1 e8 18             	shr    $0x18,%eax
c01076dd:	a2 af ba 12 c0       	mov    %al,0xc012baaf

    // reload all segment registers
    lgdt(&gdt_pd);
c01076e2:	68 b0 ba 12 c0       	push   $0xc012bab0
c01076e7:	e8 dd fe ff ff       	call   c01075c9 <lgdt>
c01076ec:	83 c4 04             	add    $0x4,%esp
c01076ef:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
    asm volatile ("cli" ::: "memory");
}

static inline void
ltr(uint16_t sel) {
    asm volatile ("ltr %0" :: "r" (sel) : "memory");
c01076f5:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c01076f9:	0f 00 d8             	ltr    %ax

    // load the TSS
    ltr(GD_TSS);
}
c01076fc:	90                   	nop
c01076fd:	c9                   	leave  
c01076fe:	c3                   	ret    

c01076ff <init_pmm_manager>:

//init_pmm_manager - initialize a pmm_manager instance
static void
init_pmm_manager(void) {
c01076ff:	55                   	push   %ebp
c0107700:	89 e5                	mov    %esp,%ebp
c0107702:	83 ec 08             	sub    $0x8,%esp
    pmm_manager = &default_pmm_manager;
c0107705:	c7 05 90 21 1a c0 dc 	movl   $0xc010d5dc,0xc01a2190
c010770c:	d5 10 c0 
    cprintf("memory management: %s\n", pmm_manager->name);
c010770f:	a1 90 21 1a c0       	mov    0xc01a2190,%eax
c0107714:	8b 00                	mov    (%eax),%eax
c0107716:	83 ec 08             	sub    $0x8,%esp
c0107719:	50                   	push   %eax
c010771a:	68 78 d6 10 c0       	push   $0xc010d678
c010771f:	e8 6e 8b ff ff       	call   c0100292 <cprintf>
c0107724:	83 c4 10             	add    $0x10,%esp
    pmm_manager->init();
c0107727:	a1 90 21 1a c0       	mov    0xc01a2190,%eax
c010772c:	8b 40 04             	mov    0x4(%eax),%eax
c010772f:	ff d0                	call   *%eax
}
c0107731:	90                   	nop
c0107732:	c9                   	leave  
c0107733:	c3                   	ret    

c0107734 <init_memmap>:

//init_memmap - call pmm->init_memmap to build Page struct for free memory  
static void
init_memmap(struct Page *base, size_t n) {
c0107734:	55                   	push   %ebp
c0107735:	89 e5                	mov    %esp,%ebp
c0107737:	83 ec 08             	sub    $0x8,%esp
    pmm_manager->init_memmap(base, n);
c010773a:	a1 90 21 1a c0       	mov    0xc01a2190,%eax
c010773f:	8b 40 08             	mov    0x8(%eax),%eax
c0107742:	83 ec 08             	sub    $0x8,%esp
c0107745:	ff 75 0c             	pushl  0xc(%ebp)
c0107748:	ff 75 08             	pushl  0x8(%ebp)
c010774b:	ff d0                	call   *%eax
c010774d:	83 c4 10             	add    $0x10,%esp
}
c0107750:	90                   	nop
c0107751:	c9                   	leave  
c0107752:	c3                   	ret    

c0107753 <alloc_pages>:

//alloc_pages - call pmm->alloc_pages to allocate a continuous n*PAGESIZE memory 
struct Page *
alloc_pages(size_t n) {
c0107753:	55                   	push   %ebp
c0107754:	89 e5                	mov    %esp,%ebp
c0107756:	83 ec 18             	sub    $0x18,%esp
    struct Page *page=NULL;
c0107759:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    
    while (1)
    {
         local_intr_save(intr_flag);
c0107760:	e8 26 fe ff ff       	call   c010758b <__intr_save>
c0107765:	89 45 f0             	mov    %eax,-0x10(%ebp)
         {
              page = pmm_manager->alloc_pages(n);
c0107768:	a1 90 21 1a c0       	mov    0xc01a2190,%eax
c010776d:	8b 40 0c             	mov    0xc(%eax),%eax
c0107770:	83 ec 0c             	sub    $0xc,%esp
c0107773:	ff 75 08             	pushl  0x8(%ebp)
c0107776:	ff d0                	call   *%eax
c0107778:	83 c4 10             	add    $0x10,%esp
c010777b:	89 45 f4             	mov    %eax,-0xc(%ebp)
         }
         local_intr_restore(intr_flag);
c010777e:	83 ec 0c             	sub    $0xc,%esp
c0107781:	ff 75 f0             	pushl  -0x10(%ebp)
c0107784:	e8 2c fe ff ff       	call   c01075b5 <__intr_restore>
c0107789:	83 c4 10             	add    $0x10,%esp

         if (page != NULL || n > 1 || swap_init_ok == 0) break;
c010778c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107790:	75 28                	jne    c01077ba <alloc_pages+0x67>
c0107792:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c0107796:	77 22                	ja     c01077ba <alloc_pages+0x67>
c0107798:	a1 6c ff 19 c0       	mov    0xc019ff6c,%eax
c010779d:	85 c0                	test   %eax,%eax
c010779f:	74 19                	je     c01077ba <alloc_pages+0x67>
         
         extern struct mm_struct *check_mm_struct;
         //cprintf("page %x, call swap_out in alloc_pages %d\n",page, n);
         swap_out(check_mm_struct, n, 0);
c01077a1:	8b 55 08             	mov    0x8(%ebp),%edx
c01077a4:	a1 bc 20 1a c0       	mov    0xc01a20bc,%eax
c01077a9:	83 ec 04             	sub    $0x4,%esp
c01077ac:	6a 00                	push   $0x0
c01077ae:	52                   	push   %edx
c01077af:	50                   	push   %eax
c01077b0:	e8 62 e3 ff ff       	call   c0105b17 <swap_out>
c01077b5:	83 c4 10             	add    $0x10,%esp
    }
c01077b8:	eb a6                	jmp    c0107760 <alloc_pages+0xd>
    //cprintf("n %d,get page %x, No %d in alloc_pages\n",n,page,(page-pages));
    return page;
c01077ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01077bd:	c9                   	leave  
c01077be:	c3                   	ret    

c01077bf <free_pages>:

//free_pages - call pmm->free_pages to free a continuous n*PAGESIZE memory 
void
free_pages(struct Page *base, size_t n) {
c01077bf:	55                   	push   %ebp
c01077c0:	89 e5                	mov    %esp,%ebp
c01077c2:	83 ec 18             	sub    $0x18,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c01077c5:	e8 c1 fd ff ff       	call   c010758b <__intr_save>
c01077ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        pmm_manager->free_pages(base, n);
c01077cd:	a1 90 21 1a c0       	mov    0xc01a2190,%eax
c01077d2:	8b 40 10             	mov    0x10(%eax),%eax
c01077d5:	83 ec 08             	sub    $0x8,%esp
c01077d8:	ff 75 0c             	pushl  0xc(%ebp)
c01077db:	ff 75 08             	pushl  0x8(%ebp)
c01077de:	ff d0                	call   *%eax
c01077e0:	83 c4 10             	add    $0x10,%esp
    }
    local_intr_restore(intr_flag);
c01077e3:	83 ec 0c             	sub    $0xc,%esp
c01077e6:	ff 75 f4             	pushl  -0xc(%ebp)
c01077e9:	e8 c7 fd ff ff       	call   c01075b5 <__intr_restore>
c01077ee:	83 c4 10             	add    $0x10,%esp
}
c01077f1:	90                   	nop
c01077f2:	c9                   	leave  
c01077f3:	c3                   	ret    

c01077f4 <nr_free_pages>:

//nr_free_pages - call pmm->nr_free_pages to get the size (nr*PAGESIZE) 
//of current free memory
size_t
nr_free_pages(void) {
c01077f4:	55                   	push   %ebp
c01077f5:	89 e5                	mov    %esp,%ebp
c01077f7:	83 ec 18             	sub    $0x18,%esp
    size_t ret;
    bool intr_flag;
    local_intr_save(intr_flag);
c01077fa:	e8 8c fd ff ff       	call   c010758b <__intr_save>
c01077ff:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        ret = pmm_manager->nr_free_pages();
c0107802:	a1 90 21 1a c0       	mov    0xc01a2190,%eax
c0107807:	8b 40 14             	mov    0x14(%eax),%eax
c010780a:	ff d0                	call   *%eax
c010780c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    local_intr_restore(intr_flag);
c010780f:	83 ec 0c             	sub    $0xc,%esp
c0107812:	ff 75 f4             	pushl  -0xc(%ebp)
c0107815:	e8 9b fd ff ff       	call   c01075b5 <__intr_restore>
c010781a:	83 c4 10             	add    $0x10,%esp
    return ret;
c010781d:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0107820:	c9                   	leave  
c0107821:	c3                   	ret    

c0107822 <page_init>:

/* pmm_init - initialize the physical memory management */
static void
page_init(void) {
c0107822:	55                   	push   %ebp
c0107823:	89 e5                	mov    %esp,%ebp
c0107825:	57                   	push   %edi
c0107826:	56                   	push   %esi
c0107827:	53                   	push   %ebx
c0107828:	83 ec 7c             	sub    $0x7c,%esp
    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
c010782b:	c7 45 c4 00 80 00 c0 	movl   $0xc0008000,-0x3c(%ebp)
    uint64_t maxpa = 0;
c0107832:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
c0107839:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

    cprintf("e820map:\n");
c0107840:	83 ec 0c             	sub    $0xc,%esp
c0107843:	68 8f d6 10 c0       	push   $0xc010d68f
c0107848:	e8 45 8a ff ff       	call   c0100292 <cprintf>
c010784d:	83 c4 10             	add    $0x10,%esp
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
c0107850:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0107857:	e9 fc 00 00 00       	jmp    c0107958 <page_init+0x136>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c010785c:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c010785f:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0107862:	89 d0                	mov    %edx,%eax
c0107864:	c1 e0 02             	shl    $0x2,%eax
c0107867:	01 d0                	add    %edx,%eax
c0107869:	c1 e0 02             	shl    $0x2,%eax
c010786c:	01 c8                	add    %ecx,%eax
c010786e:	8b 50 08             	mov    0x8(%eax),%edx
c0107871:	8b 40 04             	mov    0x4(%eax),%eax
c0107874:	89 45 b8             	mov    %eax,-0x48(%ebp)
c0107877:	89 55 bc             	mov    %edx,-0x44(%ebp)
c010787a:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c010787d:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0107880:	89 d0                	mov    %edx,%eax
c0107882:	c1 e0 02             	shl    $0x2,%eax
c0107885:	01 d0                	add    %edx,%eax
c0107887:	c1 e0 02             	shl    $0x2,%eax
c010788a:	01 c8                	add    %ecx,%eax
c010788c:	8b 48 0c             	mov    0xc(%eax),%ecx
c010788f:	8b 58 10             	mov    0x10(%eax),%ebx
c0107892:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0107895:	8b 55 bc             	mov    -0x44(%ebp),%edx
c0107898:	01 c8                	add    %ecx,%eax
c010789a:	11 da                	adc    %ebx,%edx
c010789c:	89 45 b0             	mov    %eax,-0x50(%ebp)
c010789f:	89 55 b4             	mov    %edx,-0x4c(%ebp)
        cprintf("  memory: %08llx, [%08llx, %08llx], type = %d.\n",
c01078a2:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01078a5:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01078a8:	89 d0                	mov    %edx,%eax
c01078aa:	c1 e0 02             	shl    $0x2,%eax
c01078ad:	01 d0                	add    %edx,%eax
c01078af:	c1 e0 02             	shl    $0x2,%eax
c01078b2:	01 c8                	add    %ecx,%eax
c01078b4:	83 c0 14             	add    $0x14,%eax
c01078b7:	8b 00                	mov    (%eax),%eax
c01078b9:	89 45 84             	mov    %eax,-0x7c(%ebp)
c01078bc:	8b 45 b0             	mov    -0x50(%ebp),%eax
c01078bf:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c01078c2:	83 c0 ff             	add    $0xffffffff,%eax
c01078c5:	83 d2 ff             	adc    $0xffffffff,%edx
c01078c8:	89 c1                	mov    %eax,%ecx
c01078ca:	89 d3                	mov    %edx,%ebx
c01078cc:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c01078cf:	89 55 80             	mov    %edx,-0x80(%ebp)
c01078d2:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01078d5:	89 d0                	mov    %edx,%eax
c01078d7:	c1 e0 02             	shl    $0x2,%eax
c01078da:	01 d0                	add    %edx,%eax
c01078dc:	c1 e0 02             	shl    $0x2,%eax
c01078df:	03 45 80             	add    -0x80(%ebp),%eax
c01078e2:	8b 50 10             	mov    0x10(%eax),%edx
c01078e5:	8b 40 0c             	mov    0xc(%eax),%eax
c01078e8:	ff 75 84             	pushl  -0x7c(%ebp)
c01078eb:	53                   	push   %ebx
c01078ec:	51                   	push   %ecx
c01078ed:	ff 75 bc             	pushl  -0x44(%ebp)
c01078f0:	ff 75 b8             	pushl  -0x48(%ebp)
c01078f3:	52                   	push   %edx
c01078f4:	50                   	push   %eax
c01078f5:	68 9c d6 10 c0       	push   $0xc010d69c
c01078fa:	e8 93 89 ff ff       	call   c0100292 <cprintf>
c01078ff:	83 c4 20             	add    $0x20,%esp
                memmap->map[i].size, begin, end - 1, memmap->map[i].type);
        if (memmap->map[i].type == E820_ARM) {
c0107902:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0107905:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0107908:	89 d0                	mov    %edx,%eax
c010790a:	c1 e0 02             	shl    $0x2,%eax
c010790d:	01 d0                	add    %edx,%eax
c010790f:	c1 e0 02             	shl    $0x2,%eax
c0107912:	01 c8                	add    %ecx,%eax
c0107914:	83 c0 14             	add    $0x14,%eax
c0107917:	8b 00                	mov    (%eax),%eax
c0107919:	83 f8 01             	cmp    $0x1,%eax
c010791c:	75 36                	jne    c0107954 <page_init+0x132>
            if (maxpa < end && begin < KMEMSIZE) {
c010791e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107921:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0107924:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c0107927:	77 2b                	ja     c0107954 <page_init+0x132>
c0107929:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c010792c:	72 05                	jb     c0107933 <page_init+0x111>
c010792e:	3b 45 b0             	cmp    -0x50(%ebp),%eax
c0107931:	73 21                	jae    c0107954 <page_init+0x132>
c0107933:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0107937:	77 1b                	ja     c0107954 <page_init+0x132>
c0107939:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c010793d:	72 09                	jb     c0107948 <page_init+0x126>
c010793f:	81 7d b8 ff ff ff 37 	cmpl   $0x37ffffff,-0x48(%ebp)
c0107946:	77 0c                	ja     c0107954 <page_init+0x132>
                maxpa = end;
c0107948:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010794b:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c010794e:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0107951:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
    uint64_t maxpa = 0;

    cprintf("e820map:\n");
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
c0107954:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c0107958:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010795b:	8b 00                	mov    (%eax),%eax
c010795d:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c0107960:	0f 8f f6 fe ff ff    	jg     c010785c <page_init+0x3a>
            if (maxpa < end && begin < KMEMSIZE) {
                maxpa = end;
            }
        }
    }
    if (maxpa > KMEMSIZE) {
c0107966:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010796a:	72 1d                	jb     c0107989 <page_init+0x167>
c010796c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0107970:	77 09                	ja     c010797b <page_init+0x159>
c0107972:	81 7d e0 00 00 00 38 	cmpl   $0x38000000,-0x20(%ebp)
c0107979:	76 0e                	jbe    c0107989 <page_init+0x167>
        maxpa = KMEMSIZE;
c010797b:	c7 45 e0 00 00 00 38 	movl   $0x38000000,-0x20(%ebp)
c0107982:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    }

    extern char end[];

    npage = maxpa / PGSIZE;
c0107989:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010798c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010798f:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c0107993:	c1 ea 0c             	shr    $0xc,%edx
c0107996:	a3 80 ff 19 c0       	mov    %eax,0xc019ff80
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);
c010799b:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
c01079a2:	b8 a4 21 1a c0       	mov    $0xc01a21a4,%eax
c01079a7:	8d 50 ff             	lea    -0x1(%eax),%edx
c01079aa:	8b 45 ac             	mov    -0x54(%ebp),%eax
c01079ad:	01 d0                	add    %edx,%eax
c01079af:	89 45 a8             	mov    %eax,-0x58(%ebp)
c01079b2:	8b 45 a8             	mov    -0x58(%ebp),%eax
c01079b5:	ba 00 00 00 00       	mov    $0x0,%edx
c01079ba:	f7 75 ac             	divl   -0x54(%ebp)
c01079bd:	8b 45 a8             	mov    -0x58(%ebp),%eax
c01079c0:	29 d0                	sub    %edx,%eax
c01079c2:	a3 98 21 1a c0       	mov    %eax,0xc01a2198

    for (i = 0; i < npage; i ++) {
c01079c7:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c01079ce:	eb 27                	jmp    c01079f7 <page_init+0x1d5>
        SetPageReserved(pages + i);
c01079d0:	a1 98 21 1a c0       	mov    0xc01a2198,%eax
c01079d5:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01079d8:	c1 e2 05             	shl    $0x5,%edx
c01079db:	01 d0                	add    %edx,%eax
c01079dd:	83 c0 04             	add    $0x4,%eax
c01079e0:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
c01079e7:	89 45 8c             	mov    %eax,-0x74(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c01079ea:	8b 45 8c             	mov    -0x74(%ebp),%eax
c01079ed:	8b 55 90             	mov    -0x70(%ebp),%edx
c01079f0:	0f ab 10             	bts    %edx,(%eax)
    extern char end[];

    npage = maxpa / PGSIZE;
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);

    for (i = 0; i < npage; i ++) {
c01079f3:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c01079f7:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01079fa:	a1 80 ff 19 c0       	mov    0xc019ff80,%eax
c01079ff:	39 c2                	cmp    %eax,%edx
c0107a01:	72 cd                	jb     c01079d0 <page_init+0x1ae>
        SetPageReserved(pages + i);
    }

    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);
c0107a03:	a1 80 ff 19 c0       	mov    0xc019ff80,%eax
c0107a08:	c1 e0 05             	shl    $0x5,%eax
c0107a0b:	89 c2                	mov    %eax,%edx
c0107a0d:	a1 98 21 1a c0       	mov    0xc01a2198,%eax
c0107a12:	01 d0                	add    %edx,%eax
c0107a14:	89 45 a4             	mov    %eax,-0x5c(%ebp)
c0107a17:	81 7d a4 ff ff ff bf 	cmpl   $0xbfffffff,-0x5c(%ebp)
c0107a1e:	77 17                	ja     c0107a37 <page_init+0x215>
c0107a20:	ff 75 a4             	pushl  -0x5c(%ebp)
c0107a23:	68 cc d6 10 c0       	push   $0xc010d6cc
c0107a28:	68 ea 00 00 00       	push   $0xea
c0107a2d:	68 f0 d6 10 c0       	push   $0xc010d6f0
c0107a32:	e8 c1 89 ff ff       	call   c01003f8 <__panic>
c0107a37:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0107a3a:	05 00 00 00 40       	add    $0x40000000,%eax
c0107a3f:	89 45 a0             	mov    %eax,-0x60(%ebp)

    for (i = 0; i < memmap->nr_map; i ++) {
c0107a42:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0107a49:	e9 69 01 00 00       	jmp    c0107bb7 <page_init+0x395>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c0107a4e:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0107a51:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0107a54:	89 d0                	mov    %edx,%eax
c0107a56:	c1 e0 02             	shl    $0x2,%eax
c0107a59:	01 d0                	add    %edx,%eax
c0107a5b:	c1 e0 02             	shl    $0x2,%eax
c0107a5e:	01 c8                	add    %ecx,%eax
c0107a60:	8b 50 08             	mov    0x8(%eax),%edx
c0107a63:	8b 40 04             	mov    0x4(%eax),%eax
c0107a66:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0107a69:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0107a6c:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0107a6f:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0107a72:	89 d0                	mov    %edx,%eax
c0107a74:	c1 e0 02             	shl    $0x2,%eax
c0107a77:	01 d0                	add    %edx,%eax
c0107a79:	c1 e0 02             	shl    $0x2,%eax
c0107a7c:	01 c8                	add    %ecx,%eax
c0107a7e:	8b 48 0c             	mov    0xc(%eax),%ecx
c0107a81:	8b 58 10             	mov    0x10(%eax),%ebx
c0107a84:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0107a87:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0107a8a:	01 c8                	add    %ecx,%eax
c0107a8c:	11 da                	adc    %ebx,%edx
c0107a8e:	89 45 c8             	mov    %eax,-0x38(%ebp)
c0107a91:	89 55 cc             	mov    %edx,-0x34(%ebp)
        if (memmap->map[i].type == E820_ARM) {
c0107a94:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0107a97:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0107a9a:	89 d0                	mov    %edx,%eax
c0107a9c:	c1 e0 02             	shl    $0x2,%eax
c0107a9f:	01 d0                	add    %edx,%eax
c0107aa1:	c1 e0 02             	shl    $0x2,%eax
c0107aa4:	01 c8                	add    %ecx,%eax
c0107aa6:	83 c0 14             	add    $0x14,%eax
c0107aa9:	8b 00                	mov    (%eax),%eax
c0107aab:	83 f8 01             	cmp    $0x1,%eax
c0107aae:	0f 85 ff 00 00 00    	jne    c0107bb3 <page_init+0x391>
            if (begin < freemem) {
c0107ab4:	8b 45 a0             	mov    -0x60(%ebp),%eax
c0107ab7:	ba 00 00 00 00       	mov    $0x0,%edx
c0107abc:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c0107abf:	72 17                	jb     c0107ad8 <page_init+0x2b6>
c0107ac1:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c0107ac4:	77 05                	ja     c0107acb <page_init+0x2a9>
c0107ac6:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c0107ac9:	76 0d                	jbe    c0107ad8 <page_init+0x2b6>
                begin = freemem;
c0107acb:	8b 45 a0             	mov    -0x60(%ebp),%eax
c0107ace:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0107ad1:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
            }
            if (end > KMEMSIZE) {
c0107ad8:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0107adc:	72 1d                	jb     c0107afb <page_init+0x2d9>
c0107ade:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0107ae2:	77 09                	ja     c0107aed <page_init+0x2cb>
c0107ae4:	81 7d c8 00 00 00 38 	cmpl   $0x38000000,-0x38(%ebp)
c0107aeb:	76 0e                	jbe    c0107afb <page_init+0x2d9>
                end = KMEMSIZE;
c0107aed:	c7 45 c8 00 00 00 38 	movl   $0x38000000,-0x38(%ebp)
c0107af4:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
            }
            if (begin < end) {
c0107afb:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0107afe:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0107b01:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c0107b04:	0f 87 a9 00 00 00    	ja     c0107bb3 <page_init+0x391>
c0107b0a:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c0107b0d:	72 09                	jb     c0107b18 <page_init+0x2f6>
c0107b0f:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c0107b12:	0f 83 9b 00 00 00    	jae    c0107bb3 <page_init+0x391>
                begin = ROUNDUP(begin, PGSIZE);
c0107b18:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
c0107b1f:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0107b22:	8b 45 9c             	mov    -0x64(%ebp),%eax
c0107b25:	01 d0                	add    %edx,%eax
c0107b27:	83 e8 01             	sub    $0x1,%eax
c0107b2a:	89 45 98             	mov    %eax,-0x68(%ebp)
c0107b2d:	8b 45 98             	mov    -0x68(%ebp),%eax
c0107b30:	ba 00 00 00 00       	mov    $0x0,%edx
c0107b35:	f7 75 9c             	divl   -0x64(%ebp)
c0107b38:	8b 45 98             	mov    -0x68(%ebp),%eax
c0107b3b:	29 d0                	sub    %edx,%eax
c0107b3d:	ba 00 00 00 00       	mov    $0x0,%edx
c0107b42:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0107b45:	89 55 d4             	mov    %edx,-0x2c(%ebp)
                end = ROUNDDOWN(end, PGSIZE);
c0107b48:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0107b4b:	89 45 94             	mov    %eax,-0x6c(%ebp)
c0107b4e:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0107b51:	ba 00 00 00 00       	mov    $0x0,%edx
c0107b56:	89 c3                	mov    %eax,%ebx
c0107b58:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
c0107b5e:	89 de                	mov    %ebx,%esi
c0107b60:	89 d0                	mov    %edx,%eax
c0107b62:	83 e0 00             	and    $0x0,%eax
c0107b65:	89 c7                	mov    %eax,%edi
c0107b67:	89 75 c8             	mov    %esi,-0x38(%ebp)
c0107b6a:	89 7d cc             	mov    %edi,-0x34(%ebp)
                if (begin < end) {
c0107b6d:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0107b70:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0107b73:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c0107b76:	77 3b                	ja     c0107bb3 <page_init+0x391>
c0107b78:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c0107b7b:	72 05                	jb     c0107b82 <page_init+0x360>
c0107b7d:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c0107b80:	73 31                	jae    c0107bb3 <page_init+0x391>
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
c0107b82:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0107b85:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0107b88:	2b 45 d0             	sub    -0x30(%ebp),%eax
c0107b8b:	1b 55 d4             	sbb    -0x2c(%ebp),%edx
c0107b8e:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c0107b92:	c1 ea 0c             	shr    $0xc,%edx
c0107b95:	89 c3                	mov    %eax,%ebx
c0107b97:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0107b9a:	83 ec 0c             	sub    $0xc,%esp
c0107b9d:	50                   	push   %eax
c0107b9e:	e8 ca f8 ff ff       	call   c010746d <pa2page>
c0107ba3:	83 c4 10             	add    $0x10,%esp
c0107ba6:	83 ec 08             	sub    $0x8,%esp
c0107ba9:	53                   	push   %ebx
c0107baa:	50                   	push   %eax
c0107bab:	e8 84 fb ff ff       	call   c0107734 <init_memmap>
c0107bb0:	83 c4 10             	add    $0x10,%esp
        SetPageReserved(pages + i);
    }

    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);

    for (i = 0; i < memmap->nr_map; i ++) {
c0107bb3:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c0107bb7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0107bba:	8b 00                	mov    (%eax),%eax
c0107bbc:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c0107bbf:	0f 8f 89 fe ff ff    	jg     c0107a4e <page_init+0x22c>
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
                }
            }
        }
    }
}
c0107bc5:	90                   	nop
c0107bc6:	8d 65 f4             	lea    -0xc(%ebp),%esp
c0107bc9:	5b                   	pop    %ebx
c0107bca:	5e                   	pop    %esi
c0107bcb:	5f                   	pop    %edi
c0107bcc:	5d                   	pop    %ebp
c0107bcd:	c3                   	ret    

c0107bce <boot_map_segment>:
//  la:   linear address of this memory need to map (after x86 segment map)
//  size: memory size
//  pa:   physical address of this memory
//  perm: permission of this memory  
static void
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
c0107bce:	55                   	push   %ebp
c0107bcf:	89 e5                	mov    %esp,%ebp
c0107bd1:	83 ec 28             	sub    $0x28,%esp
    assert(PGOFF(la) == PGOFF(pa));
c0107bd4:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107bd7:	33 45 14             	xor    0x14(%ebp),%eax
c0107bda:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107bdf:	85 c0                	test   %eax,%eax
c0107be1:	74 19                	je     c0107bfc <boot_map_segment+0x2e>
c0107be3:	68 fe d6 10 c0       	push   $0xc010d6fe
c0107be8:	68 15 d7 10 c0       	push   $0xc010d715
c0107bed:	68 08 01 00 00       	push   $0x108
c0107bf2:	68 f0 d6 10 c0       	push   $0xc010d6f0
c0107bf7:	e8 fc 87 ff ff       	call   c01003f8 <__panic>
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
c0107bfc:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
c0107c03:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107c06:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107c0b:	89 c2                	mov    %eax,%edx
c0107c0d:	8b 45 10             	mov    0x10(%ebp),%eax
c0107c10:	01 c2                	add    %eax,%edx
c0107c12:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107c15:	01 d0                	add    %edx,%eax
c0107c17:	83 e8 01             	sub    $0x1,%eax
c0107c1a:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0107c1d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107c20:	ba 00 00 00 00       	mov    $0x0,%edx
c0107c25:	f7 75 f0             	divl   -0x10(%ebp)
c0107c28:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107c2b:	29 d0                	sub    %edx,%eax
c0107c2d:	c1 e8 0c             	shr    $0xc,%eax
c0107c30:	89 45 f4             	mov    %eax,-0xc(%ebp)
    la = ROUNDDOWN(la, PGSIZE);
c0107c33:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107c36:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0107c39:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107c3c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0107c41:	89 45 0c             	mov    %eax,0xc(%ebp)
    pa = ROUNDDOWN(pa, PGSIZE);
c0107c44:	8b 45 14             	mov    0x14(%ebp),%eax
c0107c47:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0107c4a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107c4d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0107c52:	89 45 14             	mov    %eax,0x14(%ebp)
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c0107c55:	eb 57                	jmp    c0107cae <boot_map_segment+0xe0>
        pte_t *ptep = get_pte(pgdir, la, 1);
c0107c57:	83 ec 04             	sub    $0x4,%esp
c0107c5a:	6a 01                	push   $0x1
c0107c5c:	ff 75 0c             	pushl  0xc(%ebp)
c0107c5f:	ff 75 08             	pushl  0x8(%ebp)
c0107c62:	e8 58 01 00 00       	call   c0107dbf <get_pte>
c0107c67:	83 c4 10             	add    $0x10,%esp
c0107c6a:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(ptep != NULL);
c0107c6d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0107c71:	75 19                	jne    c0107c8c <boot_map_segment+0xbe>
c0107c73:	68 2a d7 10 c0       	push   $0xc010d72a
c0107c78:	68 15 d7 10 c0       	push   $0xc010d715
c0107c7d:	68 0e 01 00 00       	push   $0x10e
c0107c82:	68 f0 d6 10 c0       	push   $0xc010d6f0
c0107c87:	e8 6c 87 ff ff       	call   c01003f8 <__panic>
        *ptep = pa | PTE_P | perm;
c0107c8c:	8b 45 14             	mov    0x14(%ebp),%eax
c0107c8f:	0b 45 18             	or     0x18(%ebp),%eax
c0107c92:	83 c8 01             	or     $0x1,%eax
c0107c95:	89 c2                	mov    %eax,%edx
c0107c97:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107c9a:	89 10                	mov    %edx,(%eax)
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
    assert(PGOFF(la) == PGOFF(pa));
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
    la = ROUNDDOWN(la, PGSIZE);
    pa = ROUNDDOWN(pa, PGSIZE);
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c0107c9c:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0107ca0:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
c0107ca7:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
c0107cae:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107cb2:	75 a3                	jne    c0107c57 <boot_map_segment+0x89>
        pte_t *ptep = get_pte(pgdir, la, 1);
        assert(ptep != NULL);
        *ptep = pa | PTE_P | perm;
    }
}
c0107cb4:	90                   	nop
c0107cb5:	c9                   	leave  
c0107cb6:	c3                   	ret    

c0107cb7 <boot_alloc_page>:

//boot_alloc_page - allocate one page using pmm->alloc_pages(1) 
// return value: the kernel virtual address of this allocated page
//note: this function is used to get the memory for PDT(Page Directory Table)&PT(Page Table)
static void *
boot_alloc_page(void) {
c0107cb7:	55                   	push   %ebp
c0107cb8:	89 e5                	mov    %esp,%ebp
c0107cba:	83 ec 18             	sub    $0x18,%esp
    struct Page *p = alloc_page();
c0107cbd:	83 ec 0c             	sub    $0xc,%esp
c0107cc0:	6a 01                	push   $0x1
c0107cc2:	e8 8c fa ff ff       	call   c0107753 <alloc_pages>
c0107cc7:	83 c4 10             	add    $0x10,%esp
c0107cca:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (p == NULL) {
c0107ccd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107cd1:	75 17                	jne    c0107cea <boot_alloc_page+0x33>
        panic("boot_alloc_page failed.\n");
c0107cd3:	83 ec 04             	sub    $0x4,%esp
c0107cd6:	68 37 d7 10 c0       	push   $0xc010d737
c0107cdb:	68 1a 01 00 00       	push   $0x11a
c0107ce0:	68 f0 d6 10 c0       	push   $0xc010d6f0
c0107ce5:	e8 0e 87 ff ff       	call   c01003f8 <__panic>
    }
    return page2kva(p);
c0107cea:	83 ec 0c             	sub    $0xc,%esp
c0107ced:	ff 75 f4             	pushl  -0xc(%ebp)
c0107cf0:	e8 b5 f7 ff ff       	call   c01074aa <page2kva>
c0107cf5:	83 c4 10             	add    $0x10,%esp
}
c0107cf8:	c9                   	leave  
c0107cf9:	c3                   	ret    

c0107cfa <pmm_init>:

//pmm_init - setup a pmm to manage physical memory, build PDT&PT to setup paging mechanism 
//         - check the correctness of pmm & paging mechanism, print PDT&PT
void
pmm_init(void) {
c0107cfa:	55                   	push   %ebp
c0107cfb:	89 e5                	mov    %esp,%ebp
c0107cfd:	83 ec 18             	sub    $0x18,%esp
    // We've already enabled paging
    boot_cr3 = PADDR(boot_pgdir);
c0107d00:	a1 60 ba 12 c0       	mov    0xc012ba60,%eax
c0107d05:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0107d08:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c0107d0f:	77 17                	ja     c0107d28 <pmm_init+0x2e>
c0107d11:	ff 75 f4             	pushl  -0xc(%ebp)
c0107d14:	68 cc d6 10 c0       	push   $0xc010d6cc
c0107d19:	68 24 01 00 00       	push   $0x124
c0107d1e:	68 f0 d6 10 c0       	push   $0xc010d6f0
c0107d23:	e8 d0 86 ff ff       	call   c01003f8 <__panic>
c0107d28:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107d2b:	05 00 00 00 40       	add    $0x40000000,%eax
c0107d30:	a3 94 21 1a c0       	mov    %eax,0xc01a2194
    //We need to alloc/free the physical memory (granularity is 4KB or other size). 
    //So a framework of physical memory manager (struct pmm_manager)is defined in pmm.h
    //First we should init a physical memory manager(pmm) based on the framework.
    //Then pmm can alloc/free the physical memory. 
    //Now the first_fit/best_fit/worst_fit/buddy_system pmm are available.
    init_pmm_manager();
c0107d35:	e8 c5 f9 ff ff       	call   c01076ff <init_pmm_manager>

    // detect physical memory space, reserve already used memory,
    // then use pmm->init_memmap to create free page list
    page_init();
c0107d3a:	e8 e3 fa ff ff       	call   c0107822 <page_init>

    //use pmm->check to verify the correctness of the alloc/free function in a pmm
    check_alloc_page();
c0107d3f:	e8 c5 07 00 00       	call   c0108509 <check_alloc_page>

    check_pgdir();
c0107d44:	e8 e3 07 00 00       	call   c010852c <check_pgdir>

    static_assert(KERNBASE % PTSIZE == 0 && KERNTOP % PTSIZE == 0);

    // recursively insert boot_pgdir in itself
    // to form a virtual page table at virtual address VPT
    boot_pgdir[PDX(VPT)] = PADDR(boot_pgdir) | PTE_P | PTE_W;
c0107d49:	a1 60 ba 12 c0       	mov    0xc012ba60,%eax
c0107d4e:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
c0107d54:	a1 60 ba 12 c0       	mov    0xc012ba60,%eax
c0107d59:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107d5c:	81 7d f0 ff ff ff bf 	cmpl   $0xbfffffff,-0x10(%ebp)
c0107d63:	77 17                	ja     c0107d7c <pmm_init+0x82>
c0107d65:	ff 75 f0             	pushl  -0x10(%ebp)
c0107d68:	68 cc d6 10 c0       	push   $0xc010d6cc
c0107d6d:	68 3a 01 00 00       	push   $0x13a
c0107d72:	68 f0 d6 10 c0       	push   $0xc010d6f0
c0107d77:	e8 7c 86 ff ff       	call   c01003f8 <__panic>
c0107d7c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107d7f:	05 00 00 00 40       	add    $0x40000000,%eax
c0107d84:	83 c8 03             	or     $0x3,%eax
c0107d87:	89 02                	mov    %eax,(%edx)

    // map all physical memory to linear memory with base linear addr KERNBASE
    // linear_addr KERNBASE ~ KERNBASE + KMEMSIZE = phy_addr 0 ~ KMEMSIZE
    boot_map_segment(boot_pgdir, KERNBASE, KMEMSIZE, 0, PTE_W);
c0107d89:	a1 60 ba 12 c0       	mov    0xc012ba60,%eax
c0107d8e:	83 ec 0c             	sub    $0xc,%esp
c0107d91:	6a 02                	push   $0x2
c0107d93:	6a 00                	push   $0x0
c0107d95:	68 00 00 00 38       	push   $0x38000000
c0107d9a:	68 00 00 00 c0       	push   $0xc0000000
c0107d9f:	50                   	push   %eax
c0107da0:	e8 29 fe ff ff       	call   c0107bce <boot_map_segment>
c0107da5:	83 c4 20             	add    $0x20,%esp

    // Since we are using bootloader's GDT,
    // we should reload gdt (second time, the last time) to get user segments and the TSS
    // map virtual_addr 0 ~ 4G = linear_addr 0 ~ 4G
    // then set kernel stack (ss:esp) in TSS, setup TSS in gdt, load TSS
    gdt_init();
c0107da8:	e8 60 f8 ff ff       	call   c010760d <gdt_init>

    //now the basic virtual memory map(see memalyout.h) is established.
    //check the correctness of the basic virtual memory map.
    check_boot_pgdir();
c0107dad:	e8 e0 0c 00 00       	call   c0108a92 <check_boot_pgdir>

    print_pgdir();
c0107db2:	e8 d6 10 00 00       	call   c0108e8d <print_pgdir>
    
    kmalloc_init();
c0107db7:	e8 25 d9 ff ff       	call   c01056e1 <kmalloc_init>

}
c0107dbc:	90                   	nop
c0107dbd:	c9                   	leave  
c0107dbe:	c3                   	ret    

c0107dbf <get_pte>:
//  pgdir:  the kernel virtual base address of PDT
//  la:     the linear address need to map
//  create: a logical value to decide if alloc a page for PT
// return vaule: the kernel virtual address of this pte
pte_t *
get_pte(pde_t *pgdir, uintptr_t la, bool create) {
c0107dbf:	55                   	push   %ebp
c0107dc0:	89 e5                	mov    %esp,%ebp
c0107dc2:	83 ec 38             	sub    $0x38,%esp
                          // (7) set page directory entry's permission
    }
    return NULL;          // (8) return page table entry
#endif
    // (1) find page directory entry
    size_t pdx = PDX(la);       // index of this la in page dir table
c0107dc5:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107dc8:	c1 e8 16             	shr    $0x16,%eax
c0107dcb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    pde_t * pdep = pgdir + pdx; // NOTE: this is a virtual addr
c0107dce:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107dd1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0107dd8:	8b 45 08             	mov    0x8(%ebp),%eax
c0107ddb:	01 d0                	add    %edx,%eax
c0107ddd:	89 45 f0             	mov    %eax,-0x10(%ebp)
    // (2) check if entry is not present
    if (!(*pdep & PTE_P)) {
c0107de0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107de3:	8b 00                	mov    (%eax),%eax
c0107de5:	83 e0 01             	and    $0x1,%eax
c0107de8:	85 c0                	test   %eax,%eax
c0107dea:	0f 85 ae 00 00 00    	jne    c0107e9e <get_pte+0xdf>
        // (3) check if creating is needed
        if (!create) {
c0107df0:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0107df4:	75 0a                	jne    c0107e00 <get_pte+0x41>
            return NULL;
c0107df6:	b8 00 00 00 00       	mov    $0x0,%eax
c0107dfb:	e9 01 01 00 00       	jmp    c0107f01 <get_pte+0x142>
        }
        // alloc page for page table
        struct Page * pt_page =  alloc_page();
c0107e00:	83 ec 0c             	sub    $0xc,%esp
c0107e03:	6a 01                	push   $0x1
c0107e05:	e8 49 f9 ff ff       	call   c0107753 <alloc_pages>
c0107e0a:	83 c4 10             	add    $0x10,%esp
c0107e0d:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (pt_page == NULL) {
c0107e10:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0107e14:	75 0a                	jne    c0107e20 <get_pte+0x61>
            return NULL;
c0107e16:	b8 00 00 00 00       	mov    $0x0,%eax
c0107e1b:	e9 e1 00 00 00       	jmp    c0107f01 <get_pte+0x142>
        }
        // (4) set page reference
        set_page_ref(pt_page, 1);
c0107e20:	83 ec 08             	sub    $0x8,%esp
c0107e23:	6a 01                	push   $0x1
c0107e25:	ff 75 ec             	pushl  -0x14(%ebp)
c0107e28:	e8 22 f7 ff ff       	call   c010754f <set_page_ref>
c0107e2d:	83 c4 10             	add    $0x10,%esp
        // (5) get linear address of page
        uintptr_t pt_addr = page2pa(pt_page);
c0107e30:	83 ec 0c             	sub    $0xc,%esp
c0107e33:	ff 75 ec             	pushl  -0x14(%ebp)
c0107e36:	e8 1f f6 ff ff       	call   c010745a <page2pa>
c0107e3b:	83 c4 10             	add    $0x10,%esp
c0107e3e:	89 45 e8             	mov    %eax,-0x18(%ebp)
        // (6) clear page content using memset
        memset(KADDR(pt_addr), 0, PGSIZE);
c0107e41:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107e44:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0107e47:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107e4a:	c1 e8 0c             	shr    $0xc,%eax
c0107e4d:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0107e50:	a1 80 ff 19 c0       	mov    0xc019ff80,%eax
c0107e55:	39 45 e0             	cmp    %eax,-0x20(%ebp)
c0107e58:	72 17                	jb     c0107e71 <get_pte+0xb2>
c0107e5a:	ff 75 e4             	pushl  -0x1c(%ebp)
c0107e5d:	68 28 d6 10 c0       	push   $0xc010d628
c0107e62:	68 8d 01 00 00       	push   $0x18d
c0107e67:	68 f0 d6 10 c0       	push   $0xc010d6f0
c0107e6c:	e8 87 85 ff ff       	call   c01003f8 <__panic>
c0107e71:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107e74:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0107e79:	83 ec 04             	sub    $0x4,%esp
c0107e7c:	68 00 10 00 00       	push   $0x1000
c0107e81:	6a 00                	push   $0x0
c0107e83:	50                   	push   %eax
c0107e84:	e8 9e 33 00 00       	call   c010b227 <memset>
c0107e89:	83 c4 10             	add    $0x10,%esp
        // (7) set page directory entry's permission
        *pdep = (PDE_ADDR(pt_addr)) | PTE_U | PTE_W | PTE_P; // PDE_ADDR: get pa &= ~0xFFF
c0107e8c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107e8f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0107e94:	83 c8 07             	or     $0x7,%eax
c0107e97:	89 c2                	mov    %eax,%edx
c0107e99:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107e9c:	89 10                	mov    %edx,(%eax)
    }
    // (8) return page table entry
    size_t ptx = PTX(la);   // index of this la in page dir table
c0107e9e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107ea1:	c1 e8 0c             	shr    $0xc,%eax
c0107ea4:	25 ff 03 00 00       	and    $0x3ff,%eax
c0107ea9:	89 45 dc             	mov    %eax,-0x24(%ebp)
    uintptr_t pt_pa = PDE_ADDR(*pdep);
c0107eac:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107eaf:	8b 00                	mov    (%eax),%eax
c0107eb1:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0107eb6:	89 45 d8             	mov    %eax,-0x28(%ebp)
    pte_t * ptep = (pte_t *)KADDR(pt_pa) + ptx;
c0107eb9:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0107ebc:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c0107ebf:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0107ec2:	c1 e8 0c             	shr    $0xc,%eax
c0107ec5:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0107ec8:	a1 80 ff 19 c0       	mov    0xc019ff80,%eax
c0107ecd:	39 45 d0             	cmp    %eax,-0x30(%ebp)
c0107ed0:	72 17                	jb     c0107ee9 <get_pte+0x12a>
c0107ed2:	ff 75 d4             	pushl  -0x2c(%ebp)
c0107ed5:	68 28 d6 10 c0       	push   $0xc010d628
c0107eda:	68 94 01 00 00       	push   $0x194
c0107edf:	68 f0 d6 10 c0       	push   $0xc010d6f0
c0107ee4:	e8 0f 85 ff ff       	call   c01003f8 <__panic>
c0107ee9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0107eec:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0107ef1:	89 c2                	mov    %eax,%edx
c0107ef3:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107ef6:	c1 e0 02             	shl    $0x2,%eax
c0107ef9:	01 d0                	add    %edx,%eax
c0107efb:	89 45 cc             	mov    %eax,-0x34(%ebp)
    return ptep;
c0107efe:	8b 45 cc             	mov    -0x34(%ebp),%eax
}
c0107f01:	c9                   	leave  
c0107f02:	c3                   	ret    

c0107f03 <get_page>:

//get_page - get related Page struct for linear address la using PDT pgdir
struct Page *
get_page(pde_t *pgdir, uintptr_t la, pte_t **ptep_store) {
c0107f03:	55                   	push   %ebp
c0107f04:	89 e5                	mov    %esp,%ebp
c0107f06:	83 ec 18             	sub    $0x18,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c0107f09:	83 ec 04             	sub    $0x4,%esp
c0107f0c:	6a 00                	push   $0x0
c0107f0e:	ff 75 0c             	pushl  0xc(%ebp)
c0107f11:	ff 75 08             	pushl  0x8(%ebp)
c0107f14:	e8 a6 fe ff ff       	call   c0107dbf <get_pte>
c0107f19:	83 c4 10             	add    $0x10,%esp
c0107f1c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep_store != NULL) {
c0107f1f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0107f23:	74 08                	je     c0107f2d <get_page+0x2a>
        *ptep_store = ptep;
c0107f25:	8b 45 10             	mov    0x10(%ebp),%eax
c0107f28:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0107f2b:	89 10                	mov    %edx,(%eax)
    }
    if (ptep != NULL && *ptep & PTE_P) {
c0107f2d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107f31:	74 1f                	je     c0107f52 <get_page+0x4f>
c0107f33:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107f36:	8b 00                	mov    (%eax),%eax
c0107f38:	83 e0 01             	and    $0x1,%eax
c0107f3b:	85 c0                	test   %eax,%eax
c0107f3d:	74 13                	je     c0107f52 <get_page+0x4f>
        return pte2page(*ptep);
c0107f3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107f42:	8b 00                	mov    (%eax),%eax
c0107f44:	83 ec 0c             	sub    $0xc,%esp
c0107f47:	50                   	push   %eax
c0107f48:	e8 a2 f5 ff ff       	call   c01074ef <pte2page>
c0107f4d:	83 c4 10             	add    $0x10,%esp
c0107f50:	eb 05                	jmp    c0107f57 <get_page+0x54>
    }
    return NULL;
c0107f52:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107f57:	c9                   	leave  
c0107f58:	c3                   	ret    

c0107f59 <page_remove_pte>:

//page_remove_pte - free an Page sturct which is related linear address la
//                - and clean(invalidate) pte which is related linear address la
//note: PT is changed, so the TLB need to be invalidate 
static inline void
page_remove_pte(pde_t *pgdir, uintptr_t la, pte_t *ptep) {
c0107f59:	55                   	push   %ebp
c0107f5a:	89 e5                	mov    %esp,%ebp
c0107f5c:	83 ec 18             	sub    $0x18,%esp
                                  //(5) clear second page table entry
                                  //(6) flush tlb
    }
#endif
    //(1) check if this page table entry is present
    if (!(*ptep & PTE_P)) {
c0107f5f:	8b 45 10             	mov    0x10(%ebp),%eax
c0107f62:	8b 00                	mov    (%eax),%eax
c0107f64:	83 e0 01             	and    $0x1,%eax
c0107f67:	85 c0                	test   %eax,%eax
c0107f69:	74 57                	je     c0107fc2 <page_remove_pte+0x69>
        return;
    }
    //(2) find corresponding page to pte
    struct Page *page = pte2page(*ptep);
c0107f6b:	8b 45 10             	mov    0x10(%ebp),%eax
c0107f6e:	8b 00                	mov    (%eax),%eax
c0107f70:	83 ec 0c             	sub    $0xc,%esp
c0107f73:	50                   	push   %eax
c0107f74:	e8 76 f5 ff ff       	call   c01074ef <pte2page>
c0107f79:	83 c4 10             	add    $0x10,%esp
c0107f7c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    //(3) decrease page reference
    page_ref_dec(page);
c0107f7f:	83 ec 0c             	sub    $0xc,%esp
c0107f82:	ff 75 f4             	pushl  -0xc(%ebp)
c0107f85:	e8 ea f5 ff ff       	call   c0107574 <page_ref_dec>
c0107f8a:	83 c4 10             	add    $0x10,%esp
    //(4) and free this page when page reference reachs 0
    if (page->ref == 0) {
c0107f8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107f90:	8b 00                	mov    (%eax),%eax
c0107f92:	85 c0                	test   %eax,%eax
c0107f94:	75 10                	jne    c0107fa6 <page_remove_pte+0x4d>
        free_page(page);
c0107f96:	83 ec 08             	sub    $0x8,%esp
c0107f99:	6a 01                	push   $0x1
c0107f9b:	ff 75 f4             	pushl  -0xc(%ebp)
c0107f9e:	e8 1c f8 ff ff       	call   c01077bf <free_pages>
c0107fa3:	83 c4 10             	add    $0x10,%esp
    }
    //(5) clear second page table entry
    *ptep = 0;
c0107fa6:	8b 45 10             	mov    0x10(%ebp),%eax
c0107fa9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    //(6) flush tlb
    tlb_invalidate(pgdir, la);
c0107faf:	83 ec 08             	sub    $0x8,%esp
c0107fb2:	ff 75 0c             	pushl  0xc(%ebp)
c0107fb5:	ff 75 08             	pushl  0x8(%ebp)
c0107fb8:	e8 4b 04 00 00       	call   c0108408 <tlb_invalidate>
c0107fbd:	83 c4 10             	add    $0x10,%esp
c0107fc0:	eb 01                	jmp    c0107fc3 <page_remove_pte+0x6a>
                                  //(6) flush tlb
    }
#endif
    //(1) check if this page table entry is present
    if (!(*ptep & PTE_P)) {
        return;
c0107fc2:	90                   	nop
    }
    //(5) clear second page table entry
    *ptep = 0;
    //(6) flush tlb
    tlb_invalidate(pgdir, la);
}
c0107fc3:	c9                   	leave  
c0107fc4:	c3                   	ret    

c0107fc5 <unmap_range>:

void
unmap_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c0107fc5:	55                   	push   %ebp
c0107fc6:	89 e5                	mov    %esp,%ebp
c0107fc8:	83 ec 18             	sub    $0x18,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0107fcb:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107fce:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107fd3:	85 c0                	test   %eax,%eax
c0107fd5:	75 0c                	jne    c0107fe3 <unmap_range+0x1e>
c0107fd7:	8b 45 10             	mov    0x10(%ebp),%eax
c0107fda:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107fdf:	85 c0                	test   %eax,%eax
c0107fe1:	74 19                	je     c0107ffc <unmap_range+0x37>
c0107fe3:	68 50 d7 10 c0       	push   $0xc010d750
c0107fe8:	68 15 d7 10 c0       	push   $0xc010d715
c0107fed:	68 d7 01 00 00       	push   $0x1d7
c0107ff2:	68 f0 d6 10 c0       	push   $0xc010d6f0
c0107ff7:	e8 fc 83 ff ff       	call   c01003f8 <__panic>
    assert(USER_ACCESS(start, end));
c0107ffc:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0108003:	76 11                	jbe    c0108016 <unmap_range+0x51>
c0108005:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108008:	3b 45 10             	cmp    0x10(%ebp),%eax
c010800b:	73 09                	jae    c0108016 <unmap_range+0x51>
c010800d:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c0108014:	76 19                	jbe    c010802f <unmap_range+0x6a>
c0108016:	68 79 d7 10 c0       	push   $0xc010d779
c010801b:	68 15 d7 10 c0       	push   $0xc010d715
c0108020:	68 d8 01 00 00       	push   $0x1d8
c0108025:	68 f0 d6 10 c0       	push   $0xc010d6f0
c010802a:	e8 c9 83 ff ff       	call   c01003f8 <__panic>

    do {
        pte_t *ptep = get_pte(pgdir, start, 0);
c010802f:	83 ec 04             	sub    $0x4,%esp
c0108032:	6a 00                	push   $0x0
c0108034:	ff 75 0c             	pushl  0xc(%ebp)
c0108037:	ff 75 08             	pushl  0x8(%ebp)
c010803a:	e8 80 fd ff ff       	call   c0107dbf <get_pte>
c010803f:	83 c4 10             	add    $0x10,%esp
c0108042:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ptep == NULL) {
c0108045:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108049:	75 18                	jne    c0108063 <unmap_range+0x9e>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
c010804b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010804e:	05 00 00 40 00       	add    $0x400000,%eax
c0108053:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108056:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108059:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c010805e:	89 45 0c             	mov    %eax,0xc(%ebp)
            continue ;
c0108061:	eb 24                	jmp    c0108087 <unmap_range+0xc2>
        }
        if (*ptep != 0) {
c0108063:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108066:	8b 00                	mov    (%eax),%eax
c0108068:	85 c0                	test   %eax,%eax
c010806a:	74 14                	je     c0108080 <unmap_range+0xbb>
            page_remove_pte(pgdir, start, ptep);
c010806c:	83 ec 04             	sub    $0x4,%esp
c010806f:	ff 75 f4             	pushl  -0xc(%ebp)
c0108072:	ff 75 0c             	pushl  0xc(%ebp)
c0108075:	ff 75 08             	pushl  0x8(%ebp)
c0108078:	e8 dc fe ff ff       	call   c0107f59 <page_remove_pte>
c010807d:	83 c4 10             	add    $0x10,%esp
        }
        start += PGSIZE;
c0108080:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
    } while (start != 0 && start < end);
c0108087:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010808b:	74 08                	je     c0108095 <unmap_range+0xd0>
c010808d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108090:	3b 45 10             	cmp    0x10(%ebp),%eax
c0108093:	72 9a                	jb     c010802f <unmap_range+0x6a>
}
c0108095:	90                   	nop
c0108096:	c9                   	leave  
c0108097:	c3                   	ret    

c0108098 <exit_range>:

void
exit_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c0108098:	55                   	push   %ebp
c0108099:	89 e5                	mov    %esp,%ebp
c010809b:	83 ec 18             	sub    $0x18,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c010809e:	8b 45 0c             	mov    0xc(%ebp),%eax
c01080a1:	25 ff 0f 00 00       	and    $0xfff,%eax
c01080a6:	85 c0                	test   %eax,%eax
c01080a8:	75 0c                	jne    c01080b6 <exit_range+0x1e>
c01080aa:	8b 45 10             	mov    0x10(%ebp),%eax
c01080ad:	25 ff 0f 00 00       	and    $0xfff,%eax
c01080b2:	85 c0                	test   %eax,%eax
c01080b4:	74 19                	je     c01080cf <exit_range+0x37>
c01080b6:	68 50 d7 10 c0       	push   $0xc010d750
c01080bb:	68 15 d7 10 c0       	push   $0xc010d715
c01080c0:	68 e9 01 00 00       	push   $0x1e9
c01080c5:	68 f0 d6 10 c0       	push   $0xc010d6f0
c01080ca:	e8 29 83 ff ff       	call   c01003f8 <__panic>
    assert(USER_ACCESS(start, end));
c01080cf:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c01080d6:	76 11                	jbe    c01080e9 <exit_range+0x51>
c01080d8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01080db:	3b 45 10             	cmp    0x10(%ebp),%eax
c01080de:	73 09                	jae    c01080e9 <exit_range+0x51>
c01080e0:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c01080e7:	76 19                	jbe    c0108102 <exit_range+0x6a>
c01080e9:	68 79 d7 10 c0       	push   $0xc010d779
c01080ee:	68 15 d7 10 c0       	push   $0xc010d715
c01080f3:	68 ea 01 00 00       	push   $0x1ea
c01080f8:	68 f0 d6 10 c0       	push   $0xc010d6f0
c01080fd:	e8 f6 82 ff ff       	call   c01003f8 <__panic>

    start = ROUNDDOWN(start, PTSIZE);
c0108102:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108105:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108108:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010810b:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0108110:	89 45 0c             	mov    %eax,0xc(%ebp)
    do {
        int pde_idx = PDX(start);
c0108113:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108116:	c1 e8 16             	shr    $0x16,%eax
c0108119:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pgdir[pde_idx] & PTE_P) {
c010811c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010811f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0108126:	8b 45 08             	mov    0x8(%ebp),%eax
c0108129:	01 d0                	add    %edx,%eax
c010812b:	8b 00                	mov    (%eax),%eax
c010812d:	83 e0 01             	and    $0x1,%eax
c0108130:	85 c0                	test   %eax,%eax
c0108132:	74 40                	je     c0108174 <exit_range+0xdc>
            free_page(pde2page(pgdir[pde_idx]));
c0108134:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108137:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010813e:	8b 45 08             	mov    0x8(%ebp),%eax
c0108141:	01 d0                	add    %edx,%eax
c0108143:	8b 00                	mov    (%eax),%eax
c0108145:	83 ec 0c             	sub    $0xc,%esp
c0108148:	50                   	push   %eax
c0108149:	e8 db f3 ff ff       	call   c0107529 <pde2page>
c010814e:	83 c4 10             	add    $0x10,%esp
c0108151:	83 ec 08             	sub    $0x8,%esp
c0108154:	6a 01                	push   $0x1
c0108156:	50                   	push   %eax
c0108157:	e8 63 f6 ff ff       	call   c01077bf <free_pages>
c010815c:	83 c4 10             	add    $0x10,%esp
            pgdir[pde_idx] = 0;
c010815f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108162:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0108169:	8b 45 08             	mov    0x8(%ebp),%eax
c010816c:	01 d0                	add    %edx,%eax
c010816e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        }
        start += PTSIZE;
c0108174:	81 45 0c 00 00 40 00 	addl   $0x400000,0xc(%ebp)
    } while (start != 0 && start < end);
c010817b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010817f:	74 08                	je     c0108189 <exit_range+0xf1>
c0108181:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108184:	3b 45 10             	cmp    0x10(%ebp),%eax
c0108187:	72 8a                	jb     c0108113 <exit_range+0x7b>
}
c0108189:	90                   	nop
c010818a:	c9                   	leave  
c010818b:	c3                   	ret    

c010818c <copy_range>:
 * @share: flags to indicate to dup OR share. We just use dup method, so it didn't be used.
 *
 * CALL GRAPH: copy_mm-->dup_mmap-->copy_range
 */
int
copy_range(pde_t *to, pde_t *from, uintptr_t start, uintptr_t end, bool share) {
c010818c:	55                   	push   %ebp
c010818d:	89 e5                	mov    %esp,%ebp
c010818f:	83 ec 28             	sub    $0x28,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0108192:	8b 45 10             	mov    0x10(%ebp),%eax
c0108195:	25 ff 0f 00 00       	and    $0xfff,%eax
c010819a:	85 c0                	test   %eax,%eax
c010819c:	75 0c                	jne    c01081aa <copy_range+0x1e>
c010819e:	8b 45 14             	mov    0x14(%ebp),%eax
c01081a1:	25 ff 0f 00 00       	and    $0xfff,%eax
c01081a6:	85 c0                	test   %eax,%eax
c01081a8:	74 19                	je     c01081c3 <copy_range+0x37>
c01081aa:	68 50 d7 10 c0       	push   $0xc010d750
c01081af:	68 15 d7 10 c0       	push   $0xc010d715
c01081b4:	68 ff 01 00 00       	push   $0x1ff
c01081b9:	68 f0 d6 10 c0       	push   $0xc010d6f0
c01081be:	e8 35 82 ff ff       	call   c01003f8 <__panic>
    assert(USER_ACCESS(start, end));
c01081c3:	81 7d 10 ff ff 1f 00 	cmpl   $0x1fffff,0x10(%ebp)
c01081ca:	76 11                	jbe    c01081dd <copy_range+0x51>
c01081cc:	8b 45 10             	mov    0x10(%ebp),%eax
c01081cf:	3b 45 14             	cmp    0x14(%ebp),%eax
c01081d2:	73 09                	jae    c01081dd <copy_range+0x51>
c01081d4:	81 7d 14 00 00 00 b0 	cmpl   $0xb0000000,0x14(%ebp)
c01081db:	76 19                	jbe    c01081f6 <copy_range+0x6a>
c01081dd:	68 79 d7 10 c0       	push   $0xc010d779
c01081e2:	68 15 d7 10 c0       	push   $0xc010d715
c01081e7:	68 00 02 00 00       	push   $0x200
c01081ec:	68 f0 d6 10 c0       	push   $0xc010d6f0
c01081f1:	e8 02 82 ff ff       	call   c01003f8 <__panic>
    // copy content by page unit.
    do {
        //call get_pte to find process A's pte according to the addr start
        pte_t *ptep = get_pte(from, start, 0), *nptep;
c01081f6:	83 ec 04             	sub    $0x4,%esp
c01081f9:	6a 00                	push   $0x0
c01081fb:	ff 75 10             	pushl  0x10(%ebp)
c01081fe:	ff 75 0c             	pushl  0xc(%ebp)
c0108201:	e8 b9 fb ff ff       	call   c0107dbf <get_pte>
c0108206:	83 c4 10             	add    $0x10,%esp
c0108209:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ptep == NULL) {
c010820c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108210:	75 1b                	jne    c010822d <copy_range+0xa1>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
c0108212:	8b 45 10             	mov    0x10(%ebp),%eax
c0108215:	05 00 00 40 00       	add    $0x400000,%eax
c010821a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010821d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108220:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0108225:	89 45 10             	mov    %eax,0x10(%ebp)
            continue ;
c0108228:	e9 d0 00 00 00       	jmp    c01082fd <copy_range+0x171>
        }
        //call get_pte to find process B's pte according to the addr start. If pte is NULL, just alloc a PT
        if (*ptep & PTE_P) {
c010822d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108230:	8b 00                	mov    (%eax),%eax
c0108232:	83 e0 01             	and    $0x1,%eax
c0108235:	85 c0                	test   %eax,%eax
c0108237:	0f 84 b9 00 00 00    	je     c01082f6 <copy_range+0x16a>
            if ((nptep = get_pte(to, start, 1)) == NULL) {
c010823d:	83 ec 04             	sub    $0x4,%esp
c0108240:	6a 01                	push   $0x1
c0108242:	ff 75 10             	pushl  0x10(%ebp)
c0108245:	ff 75 08             	pushl  0x8(%ebp)
c0108248:	e8 72 fb ff ff       	call   c0107dbf <get_pte>
c010824d:	83 c4 10             	add    $0x10,%esp
c0108250:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0108253:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0108257:	75 0a                	jne    c0108263 <copy_range+0xd7>
                return -E_NO_MEM;
c0108259:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010825e:	e9 b1 00 00 00       	jmp    c0108314 <copy_range+0x188>
            }
        uint32_t perm = (*ptep & PTE_USER);
c0108263:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108266:	8b 00                	mov    (%eax),%eax
c0108268:	83 e0 07             	and    $0x7,%eax
c010826b:	89 45 e8             	mov    %eax,-0x18(%ebp)
        //get page from ptep
        struct Page *page = pte2page(*ptep);
c010826e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108271:	8b 00                	mov    (%eax),%eax
c0108273:	83 ec 0c             	sub    $0xc,%esp
c0108276:	50                   	push   %eax
c0108277:	e8 73 f2 ff ff       	call   c01074ef <pte2page>
c010827c:	83 c4 10             	add    $0x10,%esp
c010827f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        // alloc a page for process B
        struct Page *npage=alloc_page();
c0108282:	83 ec 0c             	sub    $0xc,%esp
c0108285:	6a 01                	push   $0x1
c0108287:	e8 c7 f4 ff ff       	call   c0107753 <alloc_pages>
c010828c:	83 c4 10             	add    $0x10,%esp
c010828f:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(page!=NULL);
c0108292:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0108296:	75 19                	jne    c01082b1 <copy_range+0x125>
c0108298:	68 91 d7 10 c0       	push   $0xc010d791
c010829d:	68 15 d7 10 c0       	push   $0xc010d715
c01082a2:	68 13 02 00 00       	push   $0x213
c01082a7:	68 f0 d6 10 c0       	push   $0xc010d6f0
c01082ac:	e8 47 81 ff ff       	call   c01003f8 <__panic>
        assert(npage!=NULL);
c01082b1:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01082b5:	75 19                	jne    c01082d0 <copy_range+0x144>
c01082b7:	68 9c d7 10 c0       	push   $0xc010d79c
c01082bc:	68 15 d7 10 c0       	push   $0xc010d715
c01082c1:	68 14 02 00 00       	push   $0x214
c01082c6:	68 f0 d6 10 c0       	push   $0xc010d6f0
c01082cb:	e8 28 81 ff ff       	call   c01003f8 <__panic>
        int ret=0;
c01082d0:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
         * (1) find src_kvaddr: the kernel virtual address of page
         * (2) find dst_kvaddr: the kernel virtual address of npage
         * (3) memory copy from src_kvaddr to dst_kvaddr, size is PGSIZE
         * (4) build the map of phy addr of  nage with the linear addr start
         */
        assert(ret == 0);
c01082d7:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c01082db:	74 19                	je     c01082f6 <copy_range+0x16a>
c01082dd:	68 a8 d7 10 c0       	push   $0xc010d7a8
c01082e2:	68 15 d7 10 c0       	push   $0xc010d715
c01082e7:	68 24 02 00 00       	push   $0x224
c01082ec:	68 f0 d6 10 c0       	push   $0xc010d6f0
c01082f1:	e8 02 81 ff ff       	call   c01003f8 <__panic>
        }
        start += PGSIZE;
c01082f6:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    } while (start != 0 && start < end);
c01082fd:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0108301:	74 0c                	je     c010830f <copy_range+0x183>
c0108303:	8b 45 10             	mov    0x10(%ebp),%eax
c0108306:	3b 45 14             	cmp    0x14(%ebp),%eax
c0108309:	0f 82 e7 fe ff ff    	jb     c01081f6 <copy_range+0x6a>
    return 0;
c010830f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0108314:	c9                   	leave  
c0108315:	c3                   	ret    

c0108316 <page_remove>:

//page_remove - free an Page which is related linear address la and has an validated pte
void
page_remove(pde_t *pgdir, uintptr_t la) {
c0108316:	55                   	push   %ebp
c0108317:	89 e5                	mov    %esp,%ebp
c0108319:	83 ec 18             	sub    $0x18,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c010831c:	83 ec 04             	sub    $0x4,%esp
c010831f:	6a 00                	push   $0x0
c0108321:	ff 75 0c             	pushl  0xc(%ebp)
c0108324:	ff 75 08             	pushl  0x8(%ebp)
c0108327:	e8 93 fa ff ff       	call   c0107dbf <get_pte>
c010832c:	83 c4 10             	add    $0x10,%esp
c010832f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep != NULL) {
c0108332:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108336:	74 14                	je     c010834c <page_remove+0x36>
        page_remove_pte(pgdir, la, ptep);
c0108338:	83 ec 04             	sub    $0x4,%esp
c010833b:	ff 75 f4             	pushl  -0xc(%ebp)
c010833e:	ff 75 0c             	pushl  0xc(%ebp)
c0108341:	ff 75 08             	pushl  0x8(%ebp)
c0108344:	e8 10 fc ff ff       	call   c0107f59 <page_remove_pte>
c0108349:	83 c4 10             	add    $0x10,%esp
    }
}
c010834c:	90                   	nop
c010834d:	c9                   	leave  
c010834e:	c3                   	ret    

c010834f <page_insert>:
//  la:    the linear address need to map
//  perm:  the permission of this Page which is setted in related pte
// return value: always 0
//note: PT is changed, so the TLB need to be invalidate 
int
page_insert(pde_t *pgdir, struct Page *page, uintptr_t la, uint32_t perm) {
c010834f:	55                   	push   %ebp
c0108350:	89 e5                	mov    %esp,%ebp
c0108352:	83 ec 18             	sub    $0x18,%esp
    pte_t *ptep = get_pte(pgdir, la, 1);
c0108355:	83 ec 04             	sub    $0x4,%esp
c0108358:	6a 01                	push   $0x1
c010835a:	ff 75 10             	pushl  0x10(%ebp)
c010835d:	ff 75 08             	pushl  0x8(%ebp)
c0108360:	e8 5a fa ff ff       	call   c0107dbf <get_pte>
c0108365:	83 c4 10             	add    $0x10,%esp
c0108368:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep == NULL) {
c010836b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010836f:	75 0a                	jne    c010837b <page_insert+0x2c>
        return -E_NO_MEM;
c0108371:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0108376:	e9 8b 00 00 00       	jmp    c0108406 <page_insert+0xb7>
    }
    page_ref_inc(page);
c010837b:	83 ec 0c             	sub    $0xc,%esp
c010837e:	ff 75 0c             	pushl  0xc(%ebp)
c0108381:	e8 d7 f1 ff ff       	call   c010755d <page_ref_inc>
c0108386:	83 c4 10             	add    $0x10,%esp
    if (*ptep & PTE_P) {
c0108389:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010838c:	8b 00                	mov    (%eax),%eax
c010838e:	83 e0 01             	and    $0x1,%eax
c0108391:	85 c0                	test   %eax,%eax
c0108393:	74 40                	je     c01083d5 <page_insert+0x86>
        struct Page *p = pte2page(*ptep);
c0108395:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108398:	8b 00                	mov    (%eax),%eax
c010839a:	83 ec 0c             	sub    $0xc,%esp
c010839d:	50                   	push   %eax
c010839e:	e8 4c f1 ff ff       	call   c01074ef <pte2page>
c01083a3:	83 c4 10             	add    $0x10,%esp
c01083a6:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (p == page) {
c01083a9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01083ac:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01083af:	75 10                	jne    c01083c1 <page_insert+0x72>
            page_ref_dec(page);
c01083b1:	83 ec 0c             	sub    $0xc,%esp
c01083b4:	ff 75 0c             	pushl  0xc(%ebp)
c01083b7:	e8 b8 f1 ff ff       	call   c0107574 <page_ref_dec>
c01083bc:	83 c4 10             	add    $0x10,%esp
c01083bf:	eb 14                	jmp    c01083d5 <page_insert+0x86>
        }
        else {
            page_remove_pte(pgdir, la, ptep);
c01083c1:	83 ec 04             	sub    $0x4,%esp
c01083c4:	ff 75 f4             	pushl  -0xc(%ebp)
c01083c7:	ff 75 10             	pushl  0x10(%ebp)
c01083ca:	ff 75 08             	pushl  0x8(%ebp)
c01083cd:	e8 87 fb ff ff       	call   c0107f59 <page_remove_pte>
c01083d2:	83 c4 10             	add    $0x10,%esp
        }
    }
    *ptep = page2pa(page) | PTE_P | perm;
c01083d5:	83 ec 0c             	sub    $0xc,%esp
c01083d8:	ff 75 0c             	pushl  0xc(%ebp)
c01083db:	e8 7a f0 ff ff       	call   c010745a <page2pa>
c01083e0:	83 c4 10             	add    $0x10,%esp
c01083e3:	0b 45 14             	or     0x14(%ebp),%eax
c01083e6:	83 c8 01             	or     $0x1,%eax
c01083e9:	89 c2                	mov    %eax,%edx
c01083eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01083ee:	89 10                	mov    %edx,(%eax)
    tlb_invalidate(pgdir, la);
c01083f0:	83 ec 08             	sub    $0x8,%esp
c01083f3:	ff 75 10             	pushl  0x10(%ebp)
c01083f6:	ff 75 08             	pushl  0x8(%ebp)
c01083f9:	e8 0a 00 00 00       	call   c0108408 <tlb_invalidate>
c01083fe:	83 c4 10             	add    $0x10,%esp
    return 0;
c0108401:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0108406:	c9                   	leave  
c0108407:	c3                   	ret    

c0108408 <tlb_invalidate>:

// invalidate a TLB entry, but only if the page tables being
// edited are the ones currently in use by the processor.
void
tlb_invalidate(pde_t *pgdir, uintptr_t la) {
c0108408:	55                   	push   %ebp
c0108409:	89 e5                	mov    %esp,%ebp
c010840b:	83 ec 18             	sub    $0x18,%esp
}

static inline uintptr_t
rcr3(void) {
    uintptr_t cr3;
    asm volatile ("mov %%cr3, %0" : "=r" (cr3) :: "memory");
c010840e:	0f 20 d8             	mov    %cr3,%eax
c0108411:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return cr3;
c0108414:	8b 55 ec             	mov    -0x14(%ebp),%edx
    if (rcr3() == PADDR(pgdir)) {
c0108417:	8b 45 08             	mov    0x8(%ebp),%eax
c010841a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010841d:	81 7d f0 ff ff ff bf 	cmpl   $0xbfffffff,-0x10(%ebp)
c0108424:	77 17                	ja     c010843d <tlb_invalidate+0x35>
c0108426:	ff 75 f0             	pushl  -0x10(%ebp)
c0108429:	68 cc d6 10 c0       	push   $0xc010d6cc
c010842e:	68 55 02 00 00       	push   $0x255
c0108433:	68 f0 d6 10 c0       	push   $0xc010d6f0
c0108438:	e8 bb 7f ff ff       	call   c01003f8 <__panic>
c010843d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108440:	05 00 00 00 40       	add    $0x40000000,%eax
c0108445:	39 c2                	cmp    %eax,%edx
c0108447:	75 0c                	jne    c0108455 <tlb_invalidate+0x4d>
        invlpg((void *)la);
c0108449:	8b 45 0c             	mov    0xc(%ebp),%eax
c010844c:	89 45 f4             	mov    %eax,-0xc(%ebp)
}

static inline void
invlpg(void *addr) {
    asm volatile ("invlpg (%0)" :: "r" (addr) : "memory");
c010844f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108452:	0f 01 38             	invlpg (%eax)
    }
}
c0108455:	90                   	nop
c0108456:	c9                   	leave  
c0108457:	c3                   	ret    

c0108458 <pgdir_alloc_page>:

// pgdir_alloc_page - call alloc_page & page_insert functions to 
//                  - allocate a page size memory & setup an addr map
//                  - pa<->la with linear address la and the PDT pgdir
struct Page *
pgdir_alloc_page(pde_t *pgdir, uintptr_t la, uint32_t perm) {
c0108458:	55                   	push   %ebp
c0108459:	89 e5                	mov    %esp,%ebp
c010845b:	83 ec 18             	sub    $0x18,%esp
    struct Page *page = alloc_page();
c010845e:	83 ec 0c             	sub    $0xc,%esp
c0108461:	6a 01                	push   $0x1
c0108463:	e8 eb f2 ff ff       	call   c0107753 <alloc_pages>
c0108468:	83 c4 10             	add    $0x10,%esp
c010846b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c010846e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108472:	0f 84 8c 00 00 00    	je     c0108504 <pgdir_alloc_page+0xac>
        if (page_insert(pgdir, page, la, perm) != 0) {
c0108478:	ff 75 10             	pushl  0x10(%ebp)
c010847b:	ff 75 0c             	pushl  0xc(%ebp)
c010847e:	ff 75 f4             	pushl  -0xc(%ebp)
c0108481:	ff 75 08             	pushl  0x8(%ebp)
c0108484:	e8 c6 fe ff ff       	call   c010834f <page_insert>
c0108489:	83 c4 10             	add    $0x10,%esp
c010848c:	85 c0                	test   %eax,%eax
c010848e:	74 17                	je     c01084a7 <pgdir_alloc_page+0x4f>
            free_page(page);
c0108490:	83 ec 08             	sub    $0x8,%esp
c0108493:	6a 01                	push   $0x1
c0108495:	ff 75 f4             	pushl  -0xc(%ebp)
c0108498:	e8 22 f3 ff ff       	call   c01077bf <free_pages>
c010849d:	83 c4 10             	add    $0x10,%esp
            return NULL;
c01084a0:	b8 00 00 00 00       	mov    $0x0,%eax
c01084a5:	eb 60                	jmp    c0108507 <pgdir_alloc_page+0xaf>
        }
        if (swap_init_ok){
c01084a7:	a1 6c ff 19 c0       	mov    0xc019ff6c,%eax
c01084ac:	85 c0                	test   %eax,%eax
c01084ae:	74 54                	je     c0108504 <pgdir_alloc_page+0xac>
            if(check_mm_struct!=NULL) {
c01084b0:	a1 bc 20 1a c0       	mov    0xc01a20bc,%eax
c01084b5:	85 c0                	test   %eax,%eax
c01084b7:	74 4b                	je     c0108504 <pgdir_alloc_page+0xac>
                swap_map_swappable(check_mm_struct, la, page, 0);
c01084b9:	a1 bc 20 1a c0       	mov    0xc01a20bc,%eax
c01084be:	6a 00                	push   $0x0
c01084c0:	ff 75 f4             	pushl  -0xc(%ebp)
c01084c3:	ff 75 0c             	pushl  0xc(%ebp)
c01084c6:	50                   	push   %eax
c01084c7:	e8 0c d6 ff ff       	call   c0105ad8 <swap_map_swappable>
c01084cc:	83 c4 10             	add    $0x10,%esp
                page->pra_vaddr=la;
c01084cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01084d2:	8b 55 0c             	mov    0xc(%ebp),%edx
c01084d5:	89 50 1c             	mov    %edx,0x1c(%eax)
                assert(page_ref(page) == 1);
c01084d8:	83 ec 0c             	sub    $0xc,%esp
c01084db:	ff 75 f4             	pushl  -0xc(%ebp)
c01084de:	e8 62 f0 ff ff       	call   c0107545 <page_ref>
c01084e3:	83 c4 10             	add    $0x10,%esp
c01084e6:	83 f8 01             	cmp    $0x1,%eax
c01084e9:	74 19                	je     c0108504 <pgdir_alloc_page+0xac>
c01084eb:	68 b1 d7 10 c0       	push   $0xc010d7b1
c01084f0:	68 15 d7 10 c0       	push   $0xc010d715
c01084f5:	68 69 02 00 00       	push   $0x269
c01084fa:	68 f0 d6 10 c0       	push   $0xc010d6f0
c01084ff:	e8 f4 7e ff ff       	call   c01003f8 <__panic>
            }
        }

    }

    return page;
c0108504:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0108507:	c9                   	leave  
c0108508:	c3                   	ret    

c0108509 <check_alloc_page>:

static void
check_alloc_page(void) {
c0108509:	55                   	push   %ebp
c010850a:	89 e5                	mov    %esp,%ebp
c010850c:	83 ec 08             	sub    $0x8,%esp
    pmm_manager->check();
c010850f:	a1 90 21 1a c0       	mov    0xc01a2190,%eax
c0108514:	8b 40 18             	mov    0x18(%eax),%eax
c0108517:	ff d0                	call   *%eax
    cprintf("check_alloc_page() succeeded!\n");
c0108519:	83 ec 0c             	sub    $0xc,%esp
c010851c:	68 c8 d7 10 c0       	push   $0xc010d7c8
c0108521:	e8 6c 7d ff ff       	call   c0100292 <cprintf>
c0108526:	83 c4 10             	add    $0x10,%esp
}
c0108529:	90                   	nop
c010852a:	c9                   	leave  
c010852b:	c3                   	ret    

c010852c <check_pgdir>:

static void
check_pgdir(void) {
c010852c:	55                   	push   %ebp
c010852d:	89 e5                	mov    %esp,%ebp
c010852f:	83 ec 28             	sub    $0x28,%esp
    assert(npage <= KMEMSIZE / PGSIZE);
c0108532:	a1 80 ff 19 c0       	mov    0xc019ff80,%eax
c0108537:	3d 00 80 03 00       	cmp    $0x38000,%eax
c010853c:	76 19                	jbe    c0108557 <check_pgdir+0x2b>
c010853e:	68 e7 d7 10 c0       	push   $0xc010d7e7
c0108543:	68 15 d7 10 c0       	push   $0xc010d715
c0108548:	68 81 02 00 00       	push   $0x281
c010854d:	68 f0 d6 10 c0       	push   $0xc010d6f0
c0108552:	e8 a1 7e ff ff       	call   c01003f8 <__panic>
    assert(boot_pgdir != NULL && (uint32_t)PGOFF(boot_pgdir) == 0);
c0108557:	a1 60 ba 12 c0       	mov    0xc012ba60,%eax
c010855c:	85 c0                	test   %eax,%eax
c010855e:	74 0e                	je     c010856e <check_pgdir+0x42>
c0108560:	a1 60 ba 12 c0       	mov    0xc012ba60,%eax
c0108565:	25 ff 0f 00 00       	and    $0xfff,%eax
c010856a:	85 c0                	test   %eax,%eax
c010856c:	74 19                	je     c0108587 <check_pgdir+0x5b>
c010856e:	68 04 d8 10 c0       	push   $0xc010d804
c0108573:	68 15 d7 10 c0       	push   $0xc010d715
c0108578:	68 82 02 00 00       	push   $0x282
c010857d:	68 f0 d6 10 c0       	push   $0xc010d6f0
c0108582:	e8 71 7e ff ff       	call   c01003f8 <__panic>
    assert(get_page(boot_pgdir, 0x0, NULL) == NULL);
c0108587:	a1 60 ba 12 c0       	mov    0xc012ba60,%eax
c010858c:	83 ec 04             	sub    $0x4,%esp
c010858f:	6a 00                	push   $0x0
c0108591:	6a 00                	push   $0x0
c0108593:	50                   	push   %eax
c0108594:	e8 6a f9 ff ff       	call   c0107f03 <get_page>
c0108599:	83 c4 10             	add    $0x10,%esp
c010859c:	85 c0                	test   %eax,%eax
c010859e:	74 19                	je     c01085b9 <check_pgdir+0x8d>
c01085a0:	68 3c d8 10 c0       	push   $0xc010d83c
c01085a5:	68 15 d7 10 c0       	push   $0xc010d715
c01085aa:	68 83 02 00 00       	push   $0x283
c01085af:	68 f0 d6 10 c0       	push   $0xc010d6f0
c01085b4:	e8 3f 7e ff ff       	call   c01003f8 <__panic>

    struct Page *p1, *p2;
    p1 = alloc_page();
c01085b9:	83 ec 0c             	sub    $0xc,%esp
c01085bc:	6a 01                	push   $0x1
c01085be:	e8 90 f1 ff ff       	call   c0107753 <alloc_pages>
c01085c3:	83 c4 10             	add    $0x10,%esp
c01085c6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(page_insert(boot_pgdir, p1, 0x0, 0) == 0);
c01085c9:	a1 60 ba 12 c0       	mov    0xc012ba60,%eax
c01085ce:	6a 00                	push   $0x0
c01085d0:	6a 00                	push   $0x0
c01085d2:	ff 75 f4             	pushl  -0xc(%ebp)
c01085d5:	50                   	push   %eax
c01085d6:	e8 74 fd ff ff       	call   c010834f <page_insert>
c01085db:	83 c4 10             	add    $0x10,%esp
c01085de:	85 c0                	test   %eax,%eax
c01085e0:	74 19                	je     c01085fb <check_pgdir+0xcf>
c01085e2:	68 64 d8 10 c0       	push   $0xc010d864
c01085e7:	68 15 d7 10 c0       	push   $0xc010d715
c01085ec:	68 87 02 00 00       	push   $0x287
c01085f1:	68 f0 d6 10 c0       	push   $0xc010d6f0
c01085f6:	e8 fd 7d ff ff       	call   c01003f8 <__panic>

    pte_t *ptep;
    assert((ptep = get_pte(boot_pgdir, 0x0, 0)) != NULL);
c01085fb:	a1 60 ba 12 c0       	mov    0xc012ba60,%eax
c0108600:	83 ec 04             	sub    $0x4,%esp
c0108603:	6a 00                	push   $0x0
c0108605:	6a 00                	push   $0x0
c0108607:	50                   	push   %eax
c0108608:	e8 b2 f7 ff ff       	call   c0107dbf <get_pte>
c010860d:	83 c4 10             	add    $0x10,%esp
c0108610:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108613:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0108617:	75 19                	jne    c0108632 <check_pgdir+0x106>
c0108619:	68 90 d8 10 c0       	push   $0xc010d890
c010861e:	68 15 d7 10 c0       	push   $0xc010d715
c0108623:	68 8a 02 00 00       	push   $0x28a
c0108628:	68 f0 d6 10 c0       	push   $0xc010d6f0
c010862d:	e8 c6 7d ff ff       	call   c01003f8 <__panic>
    assert(pte2page(*ptep) == p1);
c0108632:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108635:	8b 00                	mov    (%eax),%eax
c0108637:	83 ec 0c             	sub    $0xc,%esp
c010863a:	50                   	push   %eax
c010863b:	e8 af ee ff ff       	call   c01074ef <pte2page>
c0108640:	83 c4 10             	add    $0x10,%esp
c0108643:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0108646:	74 19                	je     c0108661 <check_pgdir+0x135>
c0108648:	68 bd d8 10 c0       	push   $0xc010d8bd
c010864d:	68 15 d7 10 c0       	push   $0xc010d715
c0108652:	68 8b 02 00 00       	push   $0x28b
c0108657:	68 f0 d6 10 c0       	push   $0xc010d6f0
c010865c:	e8 97 7d ff ff       	call   c01003f8 <__panic>
    assert(page_ref(p1) == 1);
c0108661:	83 ec 0c             	sub    $0xc,%esp
c0108664:	ff 75 f4             	pushl  -0xc(%ebp)
c0108667:	e8 d9 ee ff ff       	call   c0107545 <page_ref>
c010866c:	83 c4 10             	add    $0x10,%esp
c010866f:	83 f8 01             	cmp    $0x1,%eax
c0108672:	74 19                	je     c010868d <check_pgdir+0x161>
c0108674:	68 d3 d8 10 c0       	push   $0xc010d8d3
c0108679:	68 15 d7 10 c0       	push   $0xc010d715
c010867e:	68 8c 02 00 00       	push   $0x28c
c0108683:	68 f0 d6 10 c0       	push   $0xc010d6f0
c0108688:	e8 6b 7d ff ff       	call   c01003f8 <__panic>

    ptep = &((pte_t *)KADDR(PDE_ADDR(boot_pgdir[0])))[1];
c010868d:	a1 60 ba 12 c0       	mov    0xc012ba60,%eax
c0108692:	8b 00                	mov    (%eax),%eax
c0108694:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0108699:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010869c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010869f:	c1 e8 0c             	shr    $0xc,%eax
c01086a2:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01086a5:	a1 80 ff 19 c0       	mov    0xc019ff80,%eax
c01086aa:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c01086ad:	72 17                	jb     c01086c6 <check_pgdir+0x19a>
c01086af:	ff 75 ec             	pushl  -0x14(%ebp)
c01086b2:	68 28 d6 10 c0       	push   $0xc010d628
c01086b7:	68 8e 02 00 00       	push   $0x28e
c01086bc:	68 f0 d6 10 c0       	push   $0xc010d6f0
c01086c1:	e8 32 7d ff ff       	call   c01003f8 <__panic>
c01086c6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01086c9:	2d 00 00 00 40       	sub    $0x40000000,%eax
c01086ce:	83 c0 04             	add    $0x4,%eax
c01086d1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    assert(get_pte(boot_pgdir, PGSIZE, 0) == ptep);
c01086d4:	a1 60 ba 12 c0       	mov    0xc012ba60,%eax
c01086d9:	83 ec 04             	sub    $0x4,%esp
c01086dc:	6a 00                	push   $0x0
c01086de:	68 00 10 00 00       	push   $0x1000
c01086e3:	50                   	push   %eax
c01086e4:	e8 d6 f6 ff ff       	call   c0107dbf <get_pte>
c01086e9:	83 c4 10             	add    $0x10,%esp
c01086ec:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01086ef:	74 19                	je     c010870a <check_pgdir+0x1de>
c01086f1:	68 e8 d8 10 c0       	push   $0xc010d8e8
c01086f6:	68 15 d7 10 c0       	push   $0xc010d715
c01086fb:	68 8f 02 00 00       	push   $0x28f
c0108700:	68 f0 d6 10 c0       	push   $0xc010d6f0
c0108705:	e8 ee 7c ff ff       	call   c01003f8 <__panic>

    p2 = alloc_page();
c010870a:	83 ec 0c             	sub    $0xc,%esp
c010870d:	6a 01                	push   $0x1
c010870f:	e8 3f f0 ff ff       	call   c0107753 <alloc_pages>
c0108714:	83 c4 10             	add    $0x10,%esp
c0108717:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(page_insert(boot_pgdir, p2, PGSIZE, PTE_U | PTE_W) == 0);
c010871a:	a1 60 ba 12 c0       	mov    0xc012ba60,%eax
c010871f:	6a 06                	push   $0x6
c0108721:	68 00 10 00 00       	push   $0x1000
c0108726:	ff 75 e4             	pushl  -0x1c(%ebp)
c0108729:	50                   	push   %eax
c010872a:	e8 20 fc ff ff       	call   c010834f <page_insert>
c010872f:	83 c4 10             	add    $0x10,%esp
c0108732:	85 c0                	test   %eax,%eax
c0108734:	74 19                	je     c010874f <check_pgdir+0x223>
c0108736:	68 10 d9 10 c0       	push   $0xc010d910
c010873b:	68 15 d7 10 c0       	push   $0xc010d715
c0108740:	68 92 02 00 00       	push   $0x292
c0108745:	68 f0 d6 10 c0       	push   $0xc010d6f0
c010874a:	e8 a9 7c ff ff       	call   c01003f8 <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c010874f:	a1 60 ba 12 c0       	mov    0xc012ba60,%eax
c0108754:	83 ec 04             	sub    $0x4,%esp
c0108757:	6a 00                	push   $0x0
c0108759:	68 00 10 00 00       	push   $0x1000
c010875e:	50                   	push   %eax
c010875f:	e8 5b f6 ff ff       	call   c0107dbf <get_pte>
c0108764:	83 c4 10             	add    $0x10,%esp
c0108767:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010876a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010876e:	75 19                	jne    c0108789 <check_pgdir+0x25d>
c0108770:	68 48 d9 10 c0       	push   $0xc010d948
c0108775:	68 15 d7 10 c0       	push   $0xc010d715
c010877a:	68 93 02 00 00       	push   $0x293
c010877f:	68 f0 d6 10 c0       	push   $0xc010d6f0
c0108784:	e8 6f 7c ff ff       	call   c01003f8 <__panic>
    assert(*ptep & PTE_U);
c0108789:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010878c:	8b 00                	mov    (%eax),%eax
c010878e:	83 e0 04             	and    $0x4,%eax
c0108791:	85 c0                	test   %eax,%eax
c0108793:	75 19                	jne    c01087ae <check_pgdir+0x282>
c0108795:	68 78 d9 10 c0       	push   $0xc010d978
c010879a:	68 15 d7 10 c0       	push   $0xc010d715
c010879f:	68 94 02 00 00       	push   $0x294
c01087a4:	68 f0 d6 10 c0       	push   $0xc010d6f0
c01087a9:	e8 4a 7c ff ff       	call   c01003f8 <__panic>
    assert(*ptep & PTE_W);
c01087ae:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01087b1:	8b 00                	mov    (%eax),%eax
c01087b3:	83 e0 02             	and    $0x2,%eax
c01087b6:	85 c0                	test   %eax,%eax
c01087b8:	75 19                	jne    c01087d3 <check_pgdir+0x2a7>
c01087ba:	68 86 d9 10 c0       	push   $0xc010d986
c01087bf:	68 15 d7 10 c0       	push   $0xc010d715
c01087c4:	68 95 02 00 00       	push   $0x295
c01087c9:	68 f0 d6 10 c0       	push   $0xc010d6f0
c01087ce:	e8 25 7c ff ff       	call   c01003f8 <__panic>
    assert(boot_pgdir[0] & PTE_U);
c01087d3:	a1 60 ba 12 c0       	mov    0xc012ba60,%eax
c01087d8:	8b 00                	mov    (%eax),%eax
c01087da:	83 e0 04             	and    $0x4,%eax
c01087dd:	85 c0                	test   %eax,%eax
c01087df:	75 19                	jne    c01087fa <check_pgdir+0x2ce>
c01087e1:	68 94 d9 10 c0       	push   $0xc010d994
c01087e6:	68 15 d7 10 c0       	push   $0xc010d715
c01087eb:	68 96 02 00 00       	push   $0x296
c01087f0:	68 f0 d6 10 c0       	push   $0xc010d6f0
c01087f5:	e8 fe 7b ff ff       	call   c01003f8 <__panic>
    assert(page_ref(p2) == 1);
c01087fa:	83 ec 0c             	sub    $0xc,%esp
c01087fd:	ff 75 e4             	pushl  -0x1c(%ebp)
c0108800:	e8 40 ed ff ff       	call   c0107545 <page_ref>
c0108805:	83 c4 10             	add    $0x10,%esp
c0108808:	83 f8 01             	cmp    $0x1,%eax
c010880b:	74 19                	je     c0108826 <check_pgdir+0x2fa>
c010880d:	68 aa d9 10 c0       	push   $0xc010d9aa
c0108812:	68 15 d7 10 c0       	push   $0xc010d715
c0108817:	68 97 02 00 00       	push   $0x297
c010881c:	68 f0 d6 10 c0       	push   $0xc010d6f0
c0108821:	e8 d2 7b ff ff       	call   c01003f8 <__panic>

    assert(page_insert(boot_pgdir, p1, PGSIZE, 0) == 0);
c0108826:	a1 60 ba 12 c0       	mov    0xc012ba60,%eax
c010882b:	6a 00                	push   $0x0
c010882d:	68 00 10 00 00       	push   $0x1000
c0108832:	ff 75 f4             	pushl  -0xc(%ebp)
c0108835:	50                   	push   %eax
c0108836:	e8 14 fb ff ff       	call   c010834f <page_insert>
c010883b:	83 c4 10             	add    $0x10,%esp
c010883e:	85 c0                	test   %eax,%eax
c0108840:	74 19                	je     c010885b <check_pgdir+0x32f>
c0108842:	68 bc d9 10 c0       	push   $0xc010d9bc
c0108847:	68 15 d7 10 c0       	push   $0xc010d715
c010884c:	68 99 02 00 00       	push   $0x299
c0108851:	68 f0 d6 10 c0       	push   $0xc010d6f0
c0108856:	e8 9d 7b ff ff       	call   c01003f8 <__panic>
    assert(page_ref(p1) == 2);
c010885b:	83 ec 0c             	sub    $0xc,%esp
c010885e:	ff 75 f4             	pushl  -0xc(%ebp)
c0108861:	e8 df ec ff ff       	call   c0107545 <page_ref>
c0108866:	83 c4 10             	add    $0x10,%esp
c0108869:	83 f8 02             	cmp    $0x2,%eax
c010886c:	74 19                	je     c0108887 <check_pgdir+0x35b>
c010886e:	68 e8 d9 10 c0       	push   $0xc010d9e8
c0108873:	68 15 d7 10 c0       	push   $0xc010d715
c0108878:	68 9a 02 00 00       	push   $0x29a
c010887d:	68 f0 d6 10 c0       	push   $0xc010d6f0
c0108882:	e8 71 7b ff ff       	call   c01003f8 <__panic>
    assert(page_ref(p2) == 0);
c0108887:	83 ec 0c             	sub    $0xc,%esp
c010888a:	ff 75 e4             	pushl  -0x1c(%ebp)
c010888d:	e8 b3 ec ff ff       	call   c0107545 <page_ref>
c0108892:	83 c4 10             	add    $0x10,%esp
c0108895:	85 c0                	test   %eax,%eax
c0108897:	74 19                	je     c01088b2 <check_pgdir+0x386>
c0108899:	68 fa d9 10 c0       	push   $0xc010d9fa
c010889e:	68 15 d7 10 c0       	push   $0xc010d715
c01088a3:	68 9b 02 00 00       	push   $0x29b
c01088a8:	68 f0 d6 10 c0       	push   $0xc010d6f0
c01088ad:	e8 46 7b ff ff       	call   c01003f8 <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c01088b2:	a1 60 ba 12 c0       	mov    0xc012ba60,%eax
c01088b7:	83 ec 04             	sub    $0x4,%esp
c01088ba:	6a 00                	push   $0x0
c01088bc:	68 00 10 00 00       	push   $0x1000
c01088c1:	50                   	push   %eax
c01088c2:	e8 f8 f4 ff ff       	call   c0107dbf <get_pte>
c01088c7:	83 c4 10             	add    $0x10,%esp
c01088ca:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01088cd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01088d1:	75 19                	jne    c01088ec <check_pgdir+0x3c0>
c01088d3:	68 48 d9 10 c0       	push   $0xc010d948
c01088d8:	68 15 d7 10 c0       	push   $0xc010d715
c01088dd:	68 9c 02 00 00       	push   $0x29c
c01088e2:	68 f0 d6 10 c0       	push   $0xc010d6f0
c01088e7:	e8 0c 7b ff ff       	call   c01003f8 <__panic>
    assert(pte2page(*ptep) == p1);
c01088ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01088ef:	8b 00                	mov    (%eax),%eax
c01088f1:	83 ec 0c             	sub    $0xc,%esp
c01088f4:	50                   	push   %eax
c01088f5:	e8 f5 eb ff ff       	call   c01074ef <pte2page>
c01088fa:	83 c4 10             	add    $0x10,%esp
c01088fd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0108900:	74 19                	je     c010891b <check_pgdir+0x3ef>
c0108902:	68 bd d8 10 c0       	push   $0xc010d8bd
c0108907:	68 15 d7 10 c0       	push   $0xc010d715
c010890c:	68 9d 02 00 00       	push   $0x29d
c0108911:	68 f0 d6 10 c0       	push   $0xc010d6f0
c0108916:	e8 dd 7a ff ff       	call   c01003f8 <__panic>
    assert((*ptep & PTE_U) == 0);
c010891b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010891e:	8b 00                	mov    (%eax),%eax
c0108920:	83 e0 04             	and    $0x4,%eax
c0108923:	85 c0                	test   %eax,%eax
c0108925:	74 19                	je     c0108940 <check_pgdir+0x414>
c0108927:	68 0c da 10 c0       	push   $0xc010da0c
c010892c:	68 15 d7 10 c0       	push   $0xc010d715
c0108931:	68 9e 02 00 00       	push   $0x29e
c0108936:	68 f0 d6 10 c0       	push   $0xc010d6f0
c010893b:	e8 b8 7a ff ff       	call   c01003f8 <__panic>

    page_remove(boot_pgdir, 0x0);
c0108940:	a1 60 ba 12 c0       	mov    0xc012ba60,%eax
c0108945:	83 ec 08             	sub    $0x8,%esp
c0108948:	6a 00                	push   $0x0
c010894a:	50                   	push   %eax
c010894b:	e8 c6 f9 ff ff       	call   c0108316 <page_remove>
c0108950:	83 c4 10             	add    $0x10,%esp
    assert(page_ref(p1) == 1);
c0108953:	83 ec 0c             	sub    $0xc,%esp
c0108956:	ff 75 f4             	pushl  -0xc(%ebp)
c0108959:	e8 e7 eb ff ff       	call   c0107545 <page_ref>
c010895e:	83 c4 10             	add    $0x10,%esp
c0108961:	83 f8 01             	cmp    $0x1,%eax
c0108964:	74 19                	je     c010897f <check_pgdir+0x453>
c0108966:	68 d3 d8 10 c0       	push   $0xc010d8d3
c010896b:	68 15 d7 10 c0       	push   $0xc010d715
c0108970:	68 a1 02 00 00       	push   $0x2a1
c0108975:	68 f0 d6 10 c0       	push   $0xc010d6f0
c010897a:	e8 79 7a ff ff       	call   c01003f8 <__panic>
    assert(page_ref(p2) == 0);
c010897f:	83 ec 0c             	sub    $0xc,%esp
c0108982:	ff 75 e4             	pushl  -0x1c(%ebp)
c0108985:	e8 bb eb ff ff       	call   c0107545 <page_ref>
c010898a:	83 c4 10             	add    $0x10,%esp
c010898d:	85 c0                	test   %eax,%eax
c010898f:	74 19                	je     c01089aa <check_pgdir+0x47e>
c0108991:	68 fa d9 10 c0       	push   $0xc010d9fa
c0108996:	68 15 d7 10 c0       	push   $0xc010d715
c010899b:	68 a2 02 00 00       	push   $0x2a2
c01089a0:	68 f0 d6 10 c0       	push   $0xc010d6f0
c01089a5:	e8 4e 7a ff ff       	call   c01003f8 <__panic>

    page_remove(boot_pgdir, PGSIZE);
c01089aa:	a1 60 ba 12 c0       	mov    0xc012ba60,%eax
c01089af:	83 ec 08             	sub    $0x8,%esp
c01089b2:	68 00 10 00 00       	push   $0x1000
c01089b7:	50                   	push   %eax
c01089b8:	e8 59 f9 ff ff       	call   c0108316 <page_remove>
c01089bd:	83 c4 10             	add    $0x10,%esp
    assert(page_ref(p1) == 0);
c01089c0:	83 ec 0c             	sub    $0xc,%esp
c01089c3:	ff 75 f4             	pushl  -0xc(%ebp)
c01089c6:	e8 7a eb ff ff       	call   c0107545 <page_ref>
c01089cb:	83 c4 10             	add    $0x10,%esp
c01089ce:	85 c0                	test   %eax,%eax
c01089d0:	74 19                	je     c01089eb <check_pgdir+0x4bf>
c01089d2:	68 21 da 10 c0       	push   $0xc010da21
c01089d7:	68 15 d7 10 c0       	push   $0xc010d715
c01089dc:	68 a5 02 00 00       	push   $0x2a5
c01089e1:	68 f0 d6 10 c0       	push   $0xc010d6f0
c01089e6:	e8 0d 7a ff ff       	call   c01003f8 <__panic>
    assert(page_ref(p2) == 0);
c01089eb:	83 ec 0c             	sub    $0xc,%esp
c01089ee:	ff 75 e4             	pushl  -0x1c(%ebp)
c01089f1:	e8 4f eb ff ff       	call   c0107545 <page_ref>
c01089f6:	83 c4 10             	add    $0x10,%esp
c01089f9:	85 c0                	test   %eax,%eax
c01089fb:	74 19                	je     c0108a16 <check_pgdir+0x4ea>
c01089fd:	68 fa d9 10 c0       	push   $0xc010d9fa
c0108a02:	68 15 d7 10 c0       	push   $0xc010d715
c0108a07:	68 a6 02 00 00       	push   $0x2a6
c0108a0c:	68 f0 d6 10 c0       	push   $0xc010d6f0
c0108a11:	e8 e2 79 ff ff       	call   c01003f8 <__panic>

    assert(page_ref(pde2page(boot_pgdir[0])) == 1);
c0108a16:	a1 60 ba 12 c0       	mov    0xc012ba60,%eax
c0108a1b:	8b 00                	mov    (%eax),%eax
c0108a1d:	83 ec 0c             	sub    $0xc,%esp
c0108a20:	50                   	push   %eax
c0108a21:	e8 03 eb ff ff       	call   c0107529 <pde2page>
c0108a26:	83 c4 10             	add    $0x10,%esp
c0108a29:	83 ec 0c             	sub    $0xc,%esp
c0108a2c:	50                   	push   %eax
c0108a2d:	e8 13 eb ff ff       	call   c0107545 <page_ref>
c0108a32:	83 c4 10             	add    $0x10,%esp
c0108a35:	83 f8 01             	cmp    $0x1,%eax
c0108a38:	74 19                	je     c0108a53 <check_pgdir+0x527>
c0108a3a:	68 34 da 10 c0       	push   $0xc010da34
c0108a3f:	68 15 d7 10 c0       	push   $0xc010d715
c0108a44:	68 a8 02 00 00       	push   $0x2a8
c0108a49:	68 f0 d6 10 c0       	push   $0xc010d6f0
c0108a4e:	e8 a5 79 ff ff       	call   c01003f8 <__panic>
    free_page(pde2page(boot_pgdir[0]));
c0108a53:	a1 60 ba 12 c0       	mov    0xc012ba60,%eax
c0108a58:	8b 00                	mov    (%eax),%eax
c0108a5a:	83 ec 0c             	sub    $0xc,%esp
c0108a5d:	50                   	push   %eax
c0108a5e:	e8 c6 ea ff ff       	call   c0107529 <pde2page>
c0108a63:	83 c4 10             	add    $0x10,%esp
c0108a66:	83 ec 08             	sub    $0x8,%esp
c0108a69:	6a 01                	push   $0x1
c0108a6b:	50                   	push   %eax
c0108a6c:	e8 4e ed ff ff       	call   c01077bf <free_pages>
c0108a71:	83 c4 10             	add    $0x10,%esp
    boot_pgdir[0] = 0;
c0108a74:	a1 60 ba 12 c0       	mov    0xc012ba60,%eax
c0108a79:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    cprintf("check_pgdir() succeeded!\n");
c0108a7f:	83 ec 0c             	sub    $0xc,%esp
c0108a82:	68 5b da 10 c0       	push   $0xc010da5b
c0108a87:	e8 06 78 ff ff       	call   c0100292 <cprintf>
c0108a8c:	83 c4 10             	add    $0x10,%esp
}
c0108a8f:	90                   	nop
c0108a90:	c9                   	leave  
c0108a91:	c3                   	ret    

c0108a92 <check_boot_pgdir>:

static void
check_boot_pgdir(void) {
c0108a92:	55                   	push   %ebp
c0108a93:	89 e5                	mov    %esp,%ebp
c0108a95:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
c0108a98:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0108a9f:	e9 a3 00 00 00       	jmp    c0108b47 <check_boot_pgdir+0xb5>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
c0108aa4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108aa7:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108aaa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108aad:	c1 e8 0c             	shr    $0xc,%eax
c0108ab0:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0108ab3:	a1 80 ff 19 c0       	mov    0xc019ff80,%eax
c0108ab8:	39 45 ec             	cmp    %eax,-0x14(%ebp)
c0108abb:	72 17                	jb     c0108ad4 <check_boot_pgdir+0x42>
c0108abd:	ff 75 f0             	pushl  -0x10(%ebp)
c0108ac0:	68 28 d6 10 c0       	push   $0xc010d628
c0108ac5:	68 b4 02 00 00       	push   $0x2b4
c0108aca:	68 f0 d6 10 c0       	push   $0xc010d6f0
c0108acf:	e8 24 79 ff ff       	call   c01003f8 <__panic>
c0108ad4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108ad7:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0108adc:	89 c2                	mov    %eax,%edx
c0108ade:	a1 60 ba 12 c0       	mov    0xc012ba60,%eax
c0108ae3:	83 ec 04             	sub    $0x4,%esp
c0108ae6:	6a 00                	push   $0x0
c0108ae8:	52                   	push   %edx
c0108ae9:	50                   	push   %eax
c0108aea:	e8 d0 f2 ff ff       	call   c0107dbf <get_pte>
c0108aef:	83 c4 10             	add    $0x10,%esp
c0108af2:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0108af5:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0108af9:	75 19                	jne    c0108b14 <check_boot_pgdir+0x82>
c0108afb:	68 78 da 10 c0       	push   $0xc010da78
c0108b00:	68 15 d7 10 c0       	push   $0xc010d715
c0108b05:	68 b4 02 00 00       	push   $0x2b4
c0108b0a:	68 f0 d6 10 c0       	push   $0xc010d6f0
c0108b0f:	e8 e4 78 ff ff       	call   c01003f8 <__panic>
        assert(PTE_ADDR(*ptep) == i);
c0108b14:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108b17:	8b 00                	mov    (%eax),%eax
c0108b19:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0108b1e:	89 c2                	mov    %eax,%edx
c0108b20:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108b23:	39 c2                	cmp    %eax,%edx
c0108b25:	74 19                	je     c0108b40 <check_boot_pgdir+0xae>
c0108b27:	68 b5 da 10 c0       	push   $0xc010dab5
c0108b2c:	68 15 d7 10 c0       	push   $0xc010d715
c0108b31:	68 b5 02 00 00       	push   $0x2b5
c0108b36:	68 f0 d6 10 c0       	push   $0xc010d6f0
c0108b3b:	e8 b8 78 ff ff       	call   c01003f8 <__panic>

static void
check_boot_pgdir(void) {
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
c0108b40:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
c0108b47:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108b4a:	a1 80 ff 19 c0       	mov    0xc019ff80,%eax
c0108b4f:	39 c2                	cmp    %eax,%edx
c0108b51:	0f 82 4d ff ff ff    	jb     c0108aa4 <check_boot_pgdir+0x12>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
        assert(PTE_ADDR(*ptep) == i);
    }

    assert(PDE_ADDR(boot_pgdir[PDX(VPT)]) == PADDR(boot_pgdir));
c0108b57:	a1 60 ba 12 c0       	mov    0xc012ba60,%eax
c0108b5c:	05 ac 0f 00 00       	add    $0xfac,%eax
c0108b61:	8b 00                	mov    (%eax),%eax
c0108b63:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0108b68:	89 c2                	mov    %eax,%edx
c0108b6a:	a1 60 ba 12 c0       	mov    0xc012ba60,%eax
c0108b6f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0108b72:	81 7d e4 ff ff ff bf 	cmpl   $0xbfffffff,-0x1c(%ebp)
c0108b79:	77 17                	ja     c0108b92 <check_boot_pgdir+0x100>
c0108b7b:	ff 75 e4             	pushl  -0x1c(%ebp)
c0108b7e:	68 cc d6 10 c0       	push   $0xc010d6cc
c0108b83:	68 b8 02 00 00       	push   $0x2b8
c0108b88:	68 f0 d6 10 c0       	push   $0xc010d6f0
c0108b8d:	e8 66 78 ff ff       	call   c01003f8 <__panic>
c0108b92:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108b95:	05 00 00 00 40       	add    $0x40000000,%eax
c0108b9a:	39 c2                	cmp    %eax,%edx
c0108b9c:	74 19                	je     c0108bb7 <check_boot_pgdir+0x125>
c0108b9e:	68 cc da 10 c0       	push   $0xc010dacc
c0108ba3:	68 15 d7 10 c0       	push   $0xc010d715
c0108ba8:	68 b8 02 00 00       	push   $0x2b8
c0108bad:	68 f0 d6 10 c0       	push   $0xc010d6f0
c0108bb2:	e8 41 78 ff ff       	call   c01003f8 <__panic>

    assert(boot_pgdir[0] == 0);
c0108bb7:	a1 60 ba 12 c0       	mov    0xc012ba60,%eax
c0108bbc:	8b 00                	mov    (%eax),%eax
c0108bbe:	85 c0                	test   %eax,%eax
c0108bc0:	74 19                	je     c0108bdb <check_boot_pgdir+0x149>
c0108bc2:	68 00 db 10 c0       	push   $0xc010db00
c0108bc7:	68 15 d7 10 c0       	push   $0xc010d715
c0108bcc:	68 ba 02 00 00       	push   $0x2ba
c0108bd1:	68 f0 d6 10 c0       	push   $0xc010d6f0
c0108bd6:	e8 1d 78 ff ff       	call   c01003f8 <__panic>

    struct Page *p;
    p = alloc_page();
c0108bdb:	83 ec 0c             	sub    $0xc,%esp
c0108bde:	6a 01                	push   $0x1
c0108be0:	e8 6e eb ff ff       	call   c0107753 <alloc_pages>
c0108be5:	83 c4 10             	add    $0x10,%esp
c0108be8:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(page_insert(boot_pgdir, p, 0x100, PTE_W) == 0);
c0108beb:	a1 60 ba 12 c0       	mov    0xc012ba60,%eax
c0108bf0:	6a 02                	push   $0x2
c0108bf2:	68 00 01 00 00       	push   $0x100
c0108bf7:	ff 75 e0             	pushl  -0x20(%ebp)
c0108bfa:	50                   	push   %eax
c0108bfb:	e8 4f f7 ff ff       	call   c010834f <page_insert>
c0108c00:	83 c4 10             	add    $0x10,%esp
c0108c03:	85 c0                	test   %eax,%eax
c0108c05:	74 19                	je     c0108c20 <check_boot_pgdir+0x18e>
c0108c07:	68 14 db 10 c0       	push   $0xc010db14
c0108c0c:	68 15 d7 10 c0       	push   $0xc010d715
c0108c11:	68 be 02 00 00       	push   $0x2be
c0108c16:	68 f0 d6 10 c0       	push   $0xc010d6f0
c0108c1b:	e8 d8 77 ff ff       	call   c01003f8 <__panic>
    assert(page_ref(p) == 1);
c0108c20:	83 ec 0c             	sub    $0xc,%esp
c0108c23:	ff 75 e0             	pushl  -0x20(%ebp)
c0108c26:	e8 1a e9 ff ff       	call   c0107545 <page_ref>
c0108c2b:	83 c4 10             	add    $0x10,%esp
c0108c2e:	83 f8 01             	cmp    $0x1,%eax
c0108c31:	74 19                	je     c0108c4c <check_boot_pgdir+0x1ba>
c0108c33:	68 42 db 10 c0       	push   $0xc010db42
c0108c38:	68 15 d7 10 c0       	push   $0xc010d715
c0108c3d:	68 bf 02 00 00       	push   $0x2bf
c0108c42:	68 f0 d6 10 c0       	push   $0xc010d6f0
c0108c47:	e8 ac 77 ff ff       	call   c01003f8 <__panic>
    assert(page_insert(boot_pgdir, p, 0x100 + PGSIZE, PTE_W) == 0);
c0108c4c:	a1 60 ba 12 c0       	mov    0xc012ba60,%eax
c0108c51:	6a 02                	push   $0x2
c0108c53:	68 00 11 00 00       	push   $0x1100
c0108c58:	ff 75 e0             	pushl  -0x20(%ebp)
c0108c5b:	50                   	push   %eax
c0108c5c:	e8 ee f6 ff ff       	call   c010834f <page_insert>
c0108c61:	83 c4 10             	add    $0x10,%esp
c0108c64:	85 c0                	test   %eax,%eax
c0108c66:	74 19                	je     c0108c81 <check_boot_pgdir+0x1ef>
c0108c68:	68 54 db 10 c0       	push   $0xc010db54
c0108c6d:	68 15 d7 10 c0       	push   $0xc010d715
c0108c72:	68 c0 02 00 00       	push   $0x2c0
c0108c77:	68 f0 d6 10 c0       	push   $0xc010d6f0
c0108c7c:	e8 77 77 ff ff       	call   c01003f8 <__panic>
    assert(page_ref(p) == 2);
c0108c81:	83 ec 0c             	sub    $0xc,%esp
c0108c84:	ff 75 e0             	pushl  -0x20(%ebp)
c0108c87:	e8 b9 e8 ff ff       	call   c0107545 <page_ref>
c0108c8c:	83 c4 10             	add    $0x10,%esp
c0108c8f:	83 f8 02             	cmp    $0x2,%eax
c0108c92:	74 19                	je     c0108cad <check_boot_pgdir+0x21b>
c0108c94:	68 8b db 10 c0       	push   $0xc010db8b
c0108c99:	68 15 d7 10 c0       	push   $0xc010d715
c0108c9e:	68 c1 02 00 00       	push   $0x2c1
c0108ca3:	68 f0 d6 10 c0       	push   $0xc010d6f0
c0108ca8:	e8 4b 77 ff ff       	call   c01003f8 <__panic>

    const char *str = "ucore: Hello world!!";
c0108cad:	c7 45 dc 9c db 10 c0 	movl   $0xc010db9c,-0x24(%ebp)
    strcpy((void *)0x100, str);
c0108cb4:	83 ec 08             	sub    $0x8,%esp
c0108cb7:	ff 75 dc             	pushl  -0x24(%ebp)
c0108cba:	68 00 01 00 00       	push   $0x100
c0108cbf:	e8 8a 22 00 00       	call   c010af4e <strcpy>
c0108cc4:	83 c4 10             	add    $0x10,%esp
    assert(strcmp((void *)0x100, (void *)(0x100 + PGSIZE)) == 0);
c0108cc7:	83 ec 08             	sub    $0x8,%esp
c0108cca:	68 00 11 00 00       	push   $0x1100
c0108ccf:	68 00 01 00 00       	push   $0x100
c0108cd4:	e8 ef 22 00 00       	call   c010afc8 <strcmp>
c0108cd9:	83 c4 10             	add    $0x10,%esp
c0108cdc:	85 c0                	test   %eax,%eax
c0108cde:	74 19                	je     c0108cf9 <check_boot_pgdir+0x267>
c0108ce0:	68 b4 db 10 c0       	push   $0xc010dbb4
c0108ce5:	68 15 d7 10 c0       	push   $0xc010d715
c0108cea:	68 c5 02 00 00       	push   $0x2c5
c0108cef:	68 f0 d6 10 c0       	push   $0xc010d6f0
c0108cf4:	e8 ff 76 ff ff       	call   c01003f8 <__panic>

    *(char *)(page2kva(p) + 0x100) = '\0';
c0108cf9:	83 ec 0c             	sub    $0xc,%esp
c0108cfc:	ff 75 e0             	pushl  -0x20(%ebp)
c0108cff:	e8 a6 e7 ff ff       	call   c01074aa <page2kva>
c0108d04:	83 c4 10             	add    $0x10,%esp
c0108d07:	05 00 01 00 00       	add    $0x100,%eax
c0108d0c:	c6 00 00             	movb   $0x0,(%eax)
    assert(strlen((const char *)0x100) == 0);
c0108d0f:	83 ec 0c             	sub    $0xc,%esp
c0108d12:	68 00 01 00 00       	push   $0x100
c0108d17:	e8 da 21 00 00       	call   c010aef6 <strlen>
c0108d1c:	83 c4 10             	add    $0x10,%esp
c0108d1f:	85 c0                	test   %eax,%eax
c0108d21:	74 19                	je     c0108d3c <check_boot_pgdir+0x2aa>
c0108d23:	68 ec db 10 c0       	push   $0xc010dbec
c0108d28:	68 15 d7 10 c0       	push   $0xc010d715
c0108d2d:	68 c8 02 00 00       	push   $0x2c8
c0108d32:	68 f0 d6 10 c0       	push   $0xc010d6f0
c0108d37:	e8 bc 76 ff ff       	call   c01003f8 <__panic>

    free_page(p);
c0108d3c:	83 ec 08             	sub    $0x8,%esp
c0108d3f:	6a 01                	push   $0x1
c0108d41:	ff 75 e0             	pushl  -0x20(%ebp)
c0108d44:	e8 76 ea ff ff       	call   c01077bf <free_pages>
c0108d49:	83 c4 10             	add    $0x10,%esp
    free_page(pde2page(boot_pgdir[0]));
c0108d4c:	a1 60 ba 12 c0       	mov    0xc012ba60,%eax
c0108d51:	8b 00                	mov    (%eax),%eax
c0108d53:	83 ec 0c             	sub    $0xc,%esp
c0108d56:	50                   	push   %eax
c0108d57:	e8 cd e7 ff ff       	call   c0107529 <pde2page>
c0108d5c:	83 c4 10             	add    $0x10,%esp
c0108d5f:	83 ec 08             	sub    $0x8,%esp
c0108d62:	6a 01                	push   $0x1
c0108d64:	50                   	push   %eax
c0108d65:	e8 55 ea ff ff       	call   c01077bf <free_pages>
c0108d6a:	83 c4 10             	add    $0x10,%esp
    boot_pgdir[0] = 0;
c0108d6d:	a1 60 ba 12 c0       	mov    0xc012ba60,%eax
c0108d72:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    cprintf("check_boot_pgdir() succeeded!\n");
c0108d78:	83 ec 0c             	sub    $0xc,%esp
c0108d7b:	68 10 dc 10 c0       	push   $0xc010dc10
c0108d80:	e8 0d 75 ff ff       	call   c0100292 <cprintf>
c0108d85:	83 c4 10             	add    $0x10,%esp
}
c0108d88:	90                   	nop
c0108d89:	c9                   	leave  
c0108d8a:	c3                   	ret    

c0108d8b <perm2str>:

//perm2str - use string 'u,r,w,-' to present the permission
static const char *
perm2str(int perm) {
c0108d8b:	55                   	push   %ebp
c0108d8c:	89 e5                	mov    %esp,%ebp
    static char str[4];
    str[0] = (perm & PTE_U) ? 'u' : '-';
c0108d8e:	8b 45 08             	mov    0x8(%ebp),%eax
c0108d91:	83 e0 04             	and    $0x4,%eax
c0108d94:	85 c0                	test   %eax,%eax
c0108d96:	74 07                	je     c0108d9f <perm2str+0x14>
c0108d98:	b8 75 00 00 00       	mov    $0x75,%eax
c0108d9d:	eb 05                	jmp    c0108da4 <perm2str+0x19>
c0108d9f:	b8 2d 00 00 00       	mov    $0x2d,%eax
c0108da4:	a2 08 00 1a c0       	mov    %al,0xc01a0008
    str[1] = 'r';
c0108da9:	c6 05 09 00 1a c0 72 	movb   $0x72,0xc01a0009
    str[2] = (perm & PTE_W) ? 'w' : '-';
c0108db0:	8b 45 08             	mov    0x8(%ebp),%eax
c0108db3:	83 e0 02             	and    $0x2,%eax
c0108db6:	85 c0                	test   %eax,%eax
c0108db8:	74 07                	je     c0108dc1 <perm2str+0x36>
c0108dba:	b8 77 00 00 00       	mov    $0x77,%eax
c0108dbf:	eb 05                	jmp    c0108dc6 <perm2str+0x3b>
c0108dc1:	b8 2d 00 00 00       	mov    $0x2d,%eax
c0108dc6:	a2 0a 00 1a c0       	mov    %al,0xc01a000a
    str[3] = '\0';
c0108dcb:	c6 05 0b 00 1a c0 00 	movb   $0x0,0xc01a000b
    return str;
c0108dd2:	b8 08 00 1a c0       	mov    $0xc01a0008,%eax
}
c0108dd7:	5d                   	pop    %ebp
c0108dd8:	c3                   	ret    

c0108dd9 <get_pgtable_items>:
//  table:       the beginning addr of table
//  left_store:  the pointer of the high side of table's next range
//  right_store: the pointer of the low side of table's next range
// return value: 0 - not a invalid item range, perm - a valid item range with perm permission 
static int
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
c0108dd9:	55                   	push   %ebp
c0108dda:	89 e5                	mov    %esp,%ebp
c0108ddc:	83 ec 10             	sub    $0x10,%esp
    if (start >= right) {
c0108ddf:	8b 45 10             	mov    0x10(%ebp),%eax
c0108de2:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0108de5:	72 0e                	jb     c0108df5 <get_pgtable_items+0x1c>
        return 0;
c0108de7:	b8 00 00 00 00       	mov    $0x0,%eax
c0108dec:	e9 9a 00 00 00       	jmp    c0108e8b <get_pgtable_items+0xb2>
    }
    while (start < right && !(table[start] & PTE_P)) {
        start ++;
c0108df1:	83 45 10 01          	addl   $0x1,0x10(%ebp)
static int
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
    if (start >= right) {
        return 0;
    }
    while (start < right && !(table[start] & PTE_P)) {
c0108df5:	8b 45 10             	mov    0x10(%ebp),%eax
c0108df8:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0108dfb:	73 18                	jae    c0108e15 <get_pgtable_items+0x3c>
c0108dfd:	8b 45 10             	mov    0x10(%ebp),%eax
c0108e00:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0108e07:	8b 45 14             	mov    0x14(%ebp),%eax
c0108e0a:	01 d0                	add    %edx,%eax
c0108e0c:	8b 00                	mov    (%eax),%eax
c0108e0e:	83 e0 01             	and    $0x1,%eax
c0108e11:	85 c0                	test   %eax,%eax
c0108e13:	74 dc                	je     c0108df1 <get_pgtable_items+0x18>
        start ++;
    }
    if (start < right) {
c0108e15:	8b 45 10             	mov    0x10(%ebp),%eax
c0108e18:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0108e1b:	73 69                	jae    c0108e86 <get_pgtable_items+0xad>
        if (left_store != NULL) {
c0108e1d:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0108e21:	74 08                	je     c0108e2b <get_pgtable_items+0x52>
            *left_store = start;
c0108e23:	8b 45 18             	mov    0x18(%ebp),%eax
c0108e26:	8b 55 10             	mov    0x10(%ebp),%edx
c0108e29:	89 10                	mov    %edx,(%eax)
        }
        int perm = (table[start ++] & PTE_USER);
c0108e2b:	8b 45 10             	mov    0x10(%ebp),%eax
c0108e2e:	8d 50 01             	lea    0x1(%eax),%edx
c0108e31:	89 55 10             	mov    %edx,0x10(%ebp)
c0108e34:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0108e3b:	8b 45 14             	mov    0x14(%ebp),%eax
c0108e3e:	01 d0                	add    %edx,%eax
c0108e40:	8b 00                	mov    (%eax),%eax
c0108e42:	83 e0 07             	and    $0x7,%eax
c0108e45:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while (start < right && (table[start] & PTE_USER) == perm) {
c0108e48:	eb 04                	jmp    c0108e4e <get_pgtable_items+0x75>
            start ++;
c0108e4a:	83 45 10 01          	addl   $0x1,0x10(%ebp)
    if (start < right) {
        if (left_store != NULL) {
            *left_store = start;
        }
        int perm = (table[start ++] & PTE_USER);
        while (start < right && (table[start] & PTE_USER) == perm) {
c0108e4e:	8b 45 10             	mov    0x10(%ebp),%eax
c0108e51:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0108e54:	73 1d                	jae    c0108e73 <get_pgtable_items+0x9a>
c0108e56:	8b 45 10             	mov    0x10(%ebp),%eax
c0108e59:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0108e60:	8b 45 14             	mov    0x14(%ebp),%eax
c0108e63:	01 d0                	add    %edx,%eax
c0108e65:	8b 00                	mov    (%eax),%eax
c0108e67:	83 e0 07             	and    $0x7,%eax
c0108e6a:	89 c2                	mov    %eax,%edx
c0108e6c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108e6f:	39 c2                	cmp    %eax,%edx
c0108e71:	74 d7                	je     c0108e4a <get_pgtable_items+0x71>
            start ++;
        }
        if (right_store != NULL) {
c0108e73:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c0108e77:	74 08                	je     c0108e81 <get_pgtable_items+0xa8>
            *right_store = start;
c0108e79:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0108e7c:	8b 55 10             	mov    0x10(%ebp),%edx
c0108e7f:	89 10                	mov    %edx,(%eax)
        }
        return perm;
c0108e81:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108e84:	eb 05                	jmp    c0108e8b <get_pgtable_items+0xb2>
    }
    return 0;
c0108e86:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0108e8b:	c9                   	leave  
c0108e8c:	c3                   	ret    

c0108e8d <print_pgdir>:

//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
c0108e8d:	55                   	push   %ebp
c0108e8e:	89 e5                	mov    %esp,%ebp
c0108e90:	57                   	push   %edi
c0108e91:	56                   	push   %esi
c0108e92:	53                   	push   %ebx
c0108e93:	83 ec 2c             	sub    $0x2c,%esp
    cprintf("-------------------- BEGIN --------------------\n");
c0108e96:	83 ec 0c             	sub    $0xc,%esp
c0108e99:	68 30 dc 10 c0       	push   $0xc010dc30
c0108e9e:	e8 ef 73 ff ff       	call   c0100292 <cprintf>
c0108ea3:	83 c4 10             	add    $0x10,%esp
    size_t left, right = 0, perm;
c0108ea6:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c0108ead:	e9 e5 00 00 00       	jmp    c0108f97 <print_pgdir+0x10a>
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c0108eb2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108eb5:	83 ec 0c             	sub    $0xc,%esp
c0108eb8:	50                   	push   %eax
c0108eb9:	e8 cd fe ff ff       	call   c0108d8b <perm2str>
c0108ebe:	83 c4 10             	add    $0x10,%esp
c0108ec1:	89 c7                	mov    %eax,%edi
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
c0108ec3:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0108ec6:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108ec9:	29 c2                	sub    %eax,%edx
c0108ecb:	89 d0                	mov    %edx,%eax
void
print_pgdir(void) {
    cprintf("-------------------- BEGIN --------------------\n");
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c0108ecd:	c1 e0 16             	shl    $0x16,%eax
c0108ed0:	89 c3                	mov    %eax,%ebx
c0108ed2:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108ed5:	c1 e0 16             	shl    $0x16,%eax
c0108ed8:	89 c1                	mov    %eax,%ecx
c0108eda:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108edd:	c1 e0 16             	shl    $0x16,%eax
c0108ee0:	89 c2                	mov    %eax,%edx
c0108ee2:	8b 75 dc             	mov    -0x24(%ebp),%esi
c0108ee5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108ee8:	29 c6                	sub    %eax,%esi
c0108eea:	89 f0                	mov    %esi,%eax
c0108eec:	83 ec 08             	sub    $0x8,%esp
c0108eef:	57                   	push   %edi
c0108ef0:	53                   	push   %ebx
c0108ef1:	51                   	push   %ecx
c0108ef2:	52                   	push   %edx
c0108ef3:	50                   	push   %eax
c0108ef4:	68 61 dc 10 c0       	push   $0xc010dc61
c0108ef9:	e8 94 73 ff ff       	call   c0100292 <cprintf>
c0108efe:	83 c4 20             	add    $0x20,%esp
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
c0108f01:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108f04:	c1 e0 0a             	shl    $0xa,%eax
c0108f07:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c0108f0a:	eb 4f                	jmp    c0108f5b <print_pgdir+0xce>
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c0108f0c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108f0f:	83 ec 0c             	sub    $0xc,%esp
c0108f12:	50                   	push   %eax
c0108f13:	e8 73 fe ff ff       	call   c0108d8b <perm2str>
c0108f18:	83 c4 10             	add    $0x10,%esp
c0108f1b:	89 c7                	mov    %eax,%edi
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
c0108f1d:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0108f20:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0108f23:	29 c2                	sub    %eax,%edx
c0108f25:	89 d0                	mov    %edx,%eax
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c0108f27:	c1 e0 0c             	shl    $0xc,%eax
c0108f2a:	89 c3                	mov    %eax,%ebx
c0108f2c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0108f2f:	c1 e0 0c             	shl    $0xc,%eax
c0108f32:	89 c1                	mov    %eax,%ecx
c0108f34:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0108f37:	c1 e0 0c             	shl    $0xc,%eax
c0108f3a:	89 c2                	mov    %eax,%edx
c0108f3c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
c0108f3f:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0108f42:	29 c6                	sub    %eax,%esi
c0108f44:	89 f0                	mov    %esi,%eax
c0108f46:	83 ec 08             	sub    $0x8,%esp
c0108f49:	57                   	push   %edi
c0108f4a:	53                   	push   %ebx
c0108f4b:	51                   	push   %ecx
c0108f4c:	52                   	push   %edx
c0108f4d:	50                   	push   %eax
c0108f4e:	68 80 dc 10 c0       	push   $0xc010dc80
c0108f53:	e8 3a 73 ff ff       	call   c0100292 <cprintf>
c0108f58:	83 c4 20             	add    $0x20,%esp
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c0108f5b:	be 00 00 c0 fa       	mov    $0xfac00000,%esi
c0108f60:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0108f63:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0108f66:	89 d3                	mov    %edx,%ebx
c0108f68:	c1 e3 0a             	shl    $0xa,%ebx
c0108f6b:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0108f6e:	89 d1                	mov    %edx,%ecx
c0108f70:	c1 e1 0a             	shl    $0xa,%ecx
c0108f73:	83 ec 08             	sub    $0x8,%esp
c0108f76:	8d 55 d4             	lea    -0x2c(%ebp),%edx
c0108f79:	52                   	push   %edx
c0108f7a:	8d 55 d8             	lea    -0x28(%ebp),%edx
c0108f7d:	52                   	push   %edx
c0108f7e:	56                   	push   %esi
c0108f7f:	50                   	push   %eax
c0108f80:	53                   	push   %ebx
c0108f81:	51                   	push   %ecx
c0108f82:	e8 52 fe ff ff       	call   c0108dd9 <get_pgtable_items>
c0108f87:	83 c4 20             	add    $0x20,%esp
c0108f8a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0108f8d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0108f91:	0f 85 75 ff ff ff    	jne    c0108f0c <print_pgdir+0x7f>
//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
    cprintf("-------------------- BEGIN --------------------\n");
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c0108f97:	b9 00 b0 fe fa       	mov    $0xfafeb000,%ecx
c0108f9c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108f9f:	83 ec 08             	sub    $0x8,%esp
c0108fa2:	8d 55 dc             	lea    -0x24(%ebp),%edx
c0108fa5:	52                   	push   %edx
c0108fa6:	8d 55 e0             	lea    -0x20(%ebp),%edx
c0108fa9:	52                   	push   %edx
c0108faa:	51                   	push   %ecx
c0108fab:	50                   	push   %eax
c0108fac:	68 00 04 00 00       	push   $0x400
c0108fb1:	6a 00                	push   $0x0
c0108fb3:	e8 21 fe ff ff       	call   c0108dd9 <get_pgtable_items>
c0108fb8:	83 c4 20             	add    $0x20,%esp
c0108fbb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0108fbe:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0108fc2:	0f 85 ea fe ff ff    	jne    c0108eb2 <print_pgdir+0x25>
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
        }
    }
    cprintf("--------------------- END ---------------------\n");
c0108fc8:	83 ec 0c             	sub    $0xc,%esp
c0108fcb:	68 a4 dc 10 c0       	push   $0xc010dca4
c0108fd0:	e8 bd 72 ff ff       	call   c0100292 <cprintf>
c0108fd5:	83 c4 10             	add    $0x10,%esp
}
c0108fd8:	90                   	nop
c0108fd9:	8d 65 f4             	lea    -0xc(%ebp),%esp
c0108fdc:	5b                   	pop    %ebx
c0108fdd:	5e                   	pop    %esi
c0108fde:	5f                   	pop    %edi
c0108fdf:	5d                   	pop    %ebp
c0108fe0:	c3                   	ret    

c0108fe1 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0108fe1:	55                   	push   %ebp
c0108fe2:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0108fe4:	8b 45 08             	mov    0x8(%ebp),%eax
c0108fe7:	8b 15 98 21 1a c0    	mov    0xc01a2198,%edx
c0108fed:	29 d0                	sub    %edx,%eax
c0108fef:	c1 f8 05             	sar    $0x5,%eax
}
c0108ff2:	5d                   	pop    %ebp
c0108ff3:	c3                   	ret    

c0108ff4 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0108ff4:	55                   	push   %ebp
c0108ff5:	89 e5                	mov    %esp,%ebp
    return page2ppn(page) << PGSHIFT;
c0108ff7:	ff 75 08             	pushl  0x8(%ebp)
c0108ffa:	e8 e2 ff ff ff       	call   c0108fe1 <page2ppn>
c0108fff:	83 c4 04             	add    $0x4,%esp
c0109002:	c1 e0 0c             	shl    $0xc,%eax
}
c0109005:	c9                   	leave  
c0109006:	c3                   	ret    

c0109007 <page2kva>:
    }
    return &pages[PPN(pa)];
}

static inline void *
page2kva(struct Page *page) {
c0109007:	55                   	push   %ebp
c0109008:	89 e5                	mov    %esp,%ebp
c010900a:	83 ec 18             	sub    $0x18,%esp
    return KADDR(page2pa(page));
c010900d:	ff 75 08             	pushl  0x8(%ebp)
c0109010:	e8 df ff ff ff       	call   c0108ff4 <page2pa>
c0109015:	83 c4 04             	add    $0x4,%esp
c0109018:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010901b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010901e:	c1 e8 0c             	shr    $0xc,%eax
c0109021:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109024:	a1 80 ff 19 c0       	mov    0xc019ff80,%eax
c0109029:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010902c:	72 14                	jb     c0109042 <page2kva+0x3b>
c010902e:	ff 75 f4             	pushl  -0xc(%ebp)
c0109031:	68 d8 dc 10 c0       	push   $0xc010dcd8
c0109036:	6a 65                	push   $0x65
c0109038:	68 fb dc 10 c0       	push   $0xc010dcfb
c010903d:	e8 b6 73 ff ff       	call   c01003f8 <__panic>
c0109042:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109045:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c010904a:	c9                   	leave  
c010904b:	c3                   	ret    

c010904c <swapfs_init>:
#include <ide.h>
#include <pmm.h>
#include <assert.h>

void
swapfs_init(void) {
c010904c:	55                   	push   %ebp
c010904d:	89 e5                	mov    %esp,%ebp
c010904f:	83 ec 08             	sub    $0x8,%esp
    static_assert((PGSIZE % SECTSIZE) == 0);
    if (!ide_device_valid(SWAP_DEV_NO)) {
c0109052:	83 ec 0c             	sub    $0xc,%esp
c0109055:	6a 01                	push   $0x1
c0109057:	e8 78 81 ff ff       	call   c01011d4 <ide_device_valid>
c010905c:	83 c4 10             	add    $0x10,%esp
c010905f:	85 c0                	test   %eax,%eax
c0109061:	75 14                	jne    c0109077 <swapfs_init+0x2b>
        panic("swap fs isn't available.\n");
c0109063:	83 ec 04             	sub    $0x4,%esp
c0109066:	68 09 dd 10 c0       	push   $0xc010dd09
c010906b:	6a 0d                	push   $0xd
c010906d:	68 23 dd 10 c0       	push   $0xc010dd23
c0109072:	e8 81 73 ff ff       	call   c01003f8 <__panic>
    }
    max_swap_offset = ide_device_size(SWAP_DEV_NO) / (PGSIZE / SECTSIZE);
c0109077:	83 ec 0c             	sub    $0xc,%esp
c010907a:	6a 01                	push   $0x1
c010907c:	e8 93 81 ff ff       	call   c0101214 <ide_device_size>
c0109081:	83 c4 10             	add    $0x10,%esp
c0109084:	c1 e8 03             	shr    $0x3,%eax
c0109087:	a3 5c 21 1a c0       	mov    %eax,0xc01a215c
}
c010908c:	90                   	nop
c010908d:	c9                   	leave  
c010908e:	c3                   	ret    

c010908f <swapfs_read>:

int
swapfs_read(swap_entry_t entry, struct Page *page) {
c010908f:	55                   	push   %ebp
c0109090:	89 e5                	mov    %esp,%ebp
c0109092:	83 ec 18             	sub    $0x18,%esp
    return ide_read_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c0109095:	83 ec 0c             	sub    $0xc,%esp
c0109098:	ff 75 0c             	pushl  0xc(%ebp)
c010909b:	e8 67 ff ff ff       	call   c0109007 <page2kva>
c01090a0:	83 c4 10             	add    $0x10,%esp
c01090a3:	89 c2                	mov    %eax,%edx
c01090a5:	8b 45 08             	mov    0x8(%ebp),%eax
c01090a8:	c1 e8 08             	shr    $0x8,%eax
c01090ab:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01090ae:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01090b2:	74 0a                	je     c01090be <swapfs_read+0x2f>
c01090b4:	a1 5c 21 1a c0       	mov    0xc01a215c,%eax
c01090b9:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c01090bc:	72 14                	jb     c01090d2 <swapfs_read+0x43>
c01090be:	ff 75 08             	pushl  0x8(%ebp)
c01090c1:	68 34 dd 10 c0       	push   $0xc010dd34
c01090c6:	6a 14                	push   $0x14
c01090c8:	68 23 dd 10 c0       	push   $0xc010dd23
c01090cd:	e8 26 73 ff ff       	call   c01003f8 <__panic>
c01090d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01090d5:	c1 e0 03             	shl    $0x3,%eax
c01090d8:	6a 08                	push   $0x8
c01090da:	52                   	push   %edx
c01090db:	50                   	push   %eax
c01090dc:	6a 01                	push   $0x1
c01090de:	e8 71 81 ff ff       	call   c0101254 <ide_read_secs>
c01090e3:	83 c4 10             	add    $0x10,%esp
}
c01090e6:	c9                   	leave  
c01090e7:	c3                   	ret    

c01090e8 <swapfs_write>:

int
swapfs_write(swap_entry_t entry, struct Page *page) {
c01090e8:	55                   	push   %ebp
c01090e9:	89 e5                	mov    %esp,%ebp
c01090eb:	83 ec 18             	sub    $0x18,%esp
    return ide_write_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c01090ee:	83 ec 0c             	sub    $0xc,%esp
c01090f1:	ff 75 0c             	pushl  0xc(%ebp)
c01090f4:	e8 0e ff ff ff       	call   c0109007 <page2kva>
c01090f9:	83 c4 10             	add    $0x10,%esp
c01090fc:	89 c2                	mov    %eax,%edx
c01090fe:	8b 45 08             	mov    0x8(%ebp),%eax
c0109101:	c1 e8 08             	shr    $0x8,%eax
c0109104:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109107:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010910b:	74 0a                	je     c0109117 <swapfs_write+0x2f>
c010910d:	a1 5c 21 1a c0       	mov    0xc01a215c,%eax
c0109112:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0109115:	72 14                	jb     c010912b <swapfs_write+0x43>
c0109117:	ff 75 08             	pushl  0x8(%ebp)
c010911a:	68 34 dd 10 c0       	push   $0xc010dd34
c010911f:	6a 19                	push   $0x19
c0109121:	68 23 dd 10 c0       	push   $0xc010dd23
c0109126:	e8 cd 72 ff ff       	call   c01003f8 <__panic>
c010912b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010912e:	c1 e0 03             	shl    $0x3,%eax
c0109131:	6a 08                	push   $0x8
c0109133:	52                   	push   %edx
c0109134:	50                   	push   %eax
c0109135:	6a 01                	push   $0x1
c0109137:	e8 42 83 ff ff       	call   c010147e <ide_write_secs>
c010913c:	83 c4 10             	add    $0x10,%esp
}
c010913f:	c9                   	leave  
c0109140:	c3                   	ret    

c0109141 <kernel_thread_entry>:
.text
.globl kernel_thread_entry
kernel_thread_entry:        # void kernel_thread(void)

    pushl %edx              # push arg
c0109141:	52                   	push   %edx
    call *%ebx              # call fn
c0109142:	ff d3                	call   *%ebx

    pushl %eax              # save the return value of fn(arg)
c0109144:	50                   	push   %eax
    call do_exit            # call do_exit to terminate current thread
c0109145:	e8 27 0c 00 00       	call   c0109d71 <do_exit>

c010914a <switch_to>:
.text
.globl switch_to
switch_to:                      # switch_to(from, to)

    # save from's registers
    movl 4(%esp), %eax          # eax points to from
c010914a:	8b 44 24 04          	mov    0x4(%esp),%eax
    popl 0(%eax)                # save eip !popl
c010914e:	8f 00                	popl   (%eax)
    movl %esp, 4(%eax)
c0109150:	89 60 04             	mov    %esp,0x4(%eax)
    movl %ebx, 8(%eax)
c0109153:	89 58 08             	mov    %ebx,0x8(%eax)
    movl %ecx, 12(%eax)
c0109156:	89 48 0c             	mov    %ecx,0xc(%eax)
    movl %edx, 16(%eax)
c0109159:	89 50 10             	mov    %edx,0x10(%eax)
    movl %esi, 20(%eax)
c010915c:	89 70 14             	mov    %esi,0x14(%eax)
    movl %edi, 24(%eax)
c010915f:	89 78 18             	mov    %edi,0x18(%eax)
    movl %ebp, 28(%eax)
c0109162:	89 68 1c             	mov    %ebp,0x1c(%eax)

    # restore to's registers
    movl 4(%esp), %eax          # not 8(%esp): popped return address already
c0109165:	8b 44 24 04          	mov    0x4(%esp),%eax
                                # eax now points to to
    movl 28(%eax), %ebp
c0109169:	8b 68 1c             	mov    0x1c(%eax),%ebp
    movl 24(%eax), %edi
c010916c:	8b 78 18             	mov    0x18(%eax),%edi
    movl 20(%eax), %esi
c010916f:	8b 70 14             	mov    0x14(%eax),%esi
    movl 16(%eax), %edx
c0109172:	8b 50 10             	mov    0x10(%eax),%edx
    movl 12(%eax), %ecx
c0109175:	8b 48 0c             	mov    0xc(%eax),%ecx
    movl 8(%eax), %ebx
c0109178:	8b 58 08             	mov    0x8(%eax),%ebx
    movl 4(%eax), %esp
c010917b:	8b 60 04             	mov    0x4(%eax),%esp

    pushl 0(%eax)               # push eip
c010917e:	ff 30                	pushl  (%eax)

    ret
c0109180:	c3                   	ret    

c0109181 <test_and_set_bit>:
 * test_and_set_bit - Atomically set a bit and return its old value
 * @nr:     the bit to set
 * @addr:   the address to count from
 * */
static inline bool
test_and_set_bit(int nr, volatile void *addr) {
c0109181:	55                   	push   %ebp
c0109182:	89 e5                	mov    %esp,%ebp
c0109184:	83 ec 10             	sub    $0x10,%esp
    int oldbit;
    asm volatile ("btsl %2, %1; sbbl %0, %0" : "=r" (oldbit), "=m" (*(volatile long *)addr) : "Ir" (nr) : "memory");
c0109187:	8b 55 0c             	mov    0xc(%ebp),%edx
c010918a:	8b 45 08             	mov    0x8(%ebp),%eax
c010918d:	0f ab 02             	bts    %eax,(%edx)
c0109190:	19 c0                	sbb    %eax,%eax
c0109192:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return oldbit != 0;
c0109195:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0109199:	0f 95 c0             	setne  %al
c010919c:	0f b6 c0             	movzbl %al,%eax
}
c010919f:	c9                   	leave  
c01091a0:	c3                   	ret    

c01091a1 <test_and_clear_bit>:
 * test_and_clear_bit - Atomically clear a bit and return its old value
 * @nr:     the bit to clear
 * @addr:   the address to count from
 * */
static inline bool
test_and_clear_bit(int nr, volatile void *addr) {
c01091a1:	55                   	push   %ebp
c01091a2:	89 e5                	mov    %esp,%ebp
c01091a4:	83 ec 10             	sub    $0x10,%esp
    int oldbit;
    asm volatile ("btrl %2, %1; sbbl %0, %0" : "=r" (oldbit), "=m" (*(volatile long *)addr) : "Ir" (nr) : "memory");
c01091a7:	8b 55 0c             	mov    0xc(%ebp),%edx
c01091aa:	8b 45 08             	mov    0x8(%ebp),%eax
c01091ad:	0f b3 02             	btr    %eax,(%edx)
c01091b0:	19 c0                	sbb    %eax,%eax
c01091b2:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return oldbit != 0;
c01091b5:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c01091b9:	0f 95 c0             	setne  %al
c01091bc:	0f b6 c0             	movzbl %al,%eax
}
c01091bf:	c9                   	leave  
c01091c0:	c3                   	ret    

c01091c1 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c01091c1:	55                   	push   %ebp
c01091c2:	89 e5                	mov    %esp,%ebp
c01091c4:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c01091c7:	9c                   	pushf  
c01091c8:	58                   	pop    %eax
c01091c9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c01091cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c01091cf:	25 00 02 00 00       	and    $0x200,%eax
c01091d4:	85 c0                	test   %eax,%eax
c01091d6:	74 0c                	je     c01091e4 <__intr_save+0x23>
        intr_disable();
c01091d8:	e8 da 8f ff ff       	call   c01021b7 <intr_disable>
        return 1;
c01091dd:	b8 01 00 00 00       	mov    $0x1,%eax
c01091e2:	eb 05                	jmp    c01091e9 <__intr_save+0x28>
    }
    return 0;
c01091e4:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01091e9:	c9                   	leave  
c01091ea:	c3                   	ret    

c01091eb <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c01091eb:	55                   	push   %ebp
c01091ec:	89 e5                	mov    %esp,%ebp
c01091ee:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c01091f1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01091f5:	74 05                	je     c01091fc <__intr_restore+0x11>
        intr_enable();
c01091f7:	e8 b4 8f ff ff       	call   c01021b0 <intr_enable>
    }
}
c01091fc:	90                   	nop
c01091fd:	c9                   	leave  
c01091fe:	c3                   	ret    

c01091ff <try_lock>:
lock_init(lock_t *lock) {
    *lock = 0;
}

static inline bool
try_lock(lock_t *lock) {
c01091ff:	55                   	push   %ebp
c0109200:	89 e5                	mov    %esp,%ebp
    return !test_and_set_bit(0, lock);
c0109202:	ff 75 08             	pushl  0x8(%ebp)
c0109205:	6a 00                	push   $0x0
c0109207:	e8 75 ff ff ff       	call   c0109181 <test_and_set_bit>
c010920c:	83 c4 08             	add    $0x8,%esp
c010920f:	85 c0                	test   %eax,%eax
c0109211:	0f 94 c0             	sete   %al
c0109214:	0f b6 c0             	movzbl %al,%eax
}
c0109217:	c9                   	leave  
c0109218:	c3                   	ret    

c0109219 <lock>:

static inline void
lock(lock_t *lock) {
c0109219:	55                   	push   %ebp
c010921a:	89 e5                	mov    %esp,%ebp
c010921c:	83 ec 08             	sub    $0x8,%esp
    while (!try_lock(lock)) {
c010921f:	eb 05                	jmp    c0109226 <lock+0xd>
        schedule();
c0109221:	e8 1c 1a 00 00       	call   c010ac42 <schedule>
    return !test_and_set_bit(0, lock);
}

static inline void
lock(lock_t *lock) {
    while (!try_lock(lock)) {
c0109226:	83 ec 0c             	sub    $0xc,%esp
c0109229:	ff 75 08             	pushl  0x8(%ebp)
c010922c:	e8 ce ff ff ff       	call   c01091ff <try_lock>
c0109231:	83 c4 10             	add    $0x10,%esp
c0109234:	85 c0                	test   %eax,%eax
c0109236:	74 e9                	je     c0109221 <lock+0x8>
        schedule();
    }
}
c0109238:	90                   	nop
c0109239:	c9                   	leave  
c010923a:	c3                   	ret    

c010923b <unlock>:

static inline void
unlock(lock_t *lock) {
c010923b:	55                   	push   %ebp
c010923c:	89 e5                	mov    %esp,%ebp
c010923e:	83 ec 08             	sub    $0x8,%esp
    if (!test_and_clear_bit(0, lock)) {
c0109241:	ff 75 08             	pushl  0x8(%ebp)
c0109244:	6a 00                	push   $0x0
c0109246:	e8 56 ff ff ff       	call   c01091a1 <test_and_clear_bit>
c010924b:	83 c4 08             	add    $0x8,%esp
c010924e:	85 c0                	test   %eax,%eax
c0109250:	75 14                	jne    c0109266 <unlock+0x2b>
        panic("Unlock failed.\n");
c0109252:	83 ec 04             	sub    $0x4,%esp
c0109255:	68 54 dd 10 c0       	push   $0xc010dd54
c010925a:	6a 34                	push   $0x34
c010925c:	68 64 dd 10 c0       	push   $0xc010dd64
c0109261:	e8 92 71 ff ff       	call   c01003f8 <__panic>
    }
}
c0109266:	90                   	nop
c0109267:	c9                   	leave  
c0109268:	c3                   	ret    

c0109269 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0109269:	55                   	push   %ebp
c010926a:	89 e5                	mov    %esp,%ebp
    return page - pages;
c010926c:	8b 45 08             	mov    0x8(%ebp),%eax
c010926f:	8b 15 98 21 1a c0    	mov    0xc01a2198,%edx
c0109275:	29 d0                	sub    %edx,%eax
c0109277:	c1 f8 05             	sar    $0x5,%eax
}
c010927a:	5d                   	pop    %ebp
c010927b:	c3                   	ret    

c010927c <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c010927c:	55                   	push   %ebp
c010927d:	89 e5                	mov    %esp,%ebp
    return page2ppn(page) << PGSHIFT;
c010927f:	ff 75 08             	pushl  0x8(%ebp)
c0109282:	e8 e2 ff ff ff       	call   c0109269 <page2ppn>
c0109287:	83 c4 04             	add    $0x4,%esp
c010928a:	c1 e0 0c             	shl    $0xc,%eax
}
c010928d:	c9                   	leave  
c010928e:	c3                   	ret    

c010928f <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c010928f:	55                   	push   %ebp
c0109290:	89 e5                	mov    %esp,%ebp
c0109292:	83 ec 08             	sub    $0x8,%esp
    if (PPN(pa) >= npage) {
c0109295:	8b 45 08             	mov    0x8(%ebp),%eax
c0109298:	c1 e8 0c             	shr    $0xc,%eax
c010929b:	89 c2                	mov    %eax,%edx
c010929d:	a1 80 ff 19 c0       	mov    0xc019ff80,%eax
c01092a2:	39 c2                	cmp    %eax,%edx
c01092a4:	72 14                	jb     c01092ba <pa2page+0x2b>
        panic("pa2page called with invalid pa");
c01092a6:	83 ec 04             	sub    $0x4,%esp
c01092a9:	68 78 dd 10 c0       	push   $0xc010dd78
c01092ae:	6a 5e                	push   $0x5e
c01092b0:	68 97 dd 10 c0       	push   $0xc010dd97
c01092b5:	e8 3e 71 ff ff       	call   c01003f8 <__panic>
    }
    return &pages[PPN(pa)];
c01092ba:	a1 98 21 1a c0       	mov    0xc01a2198,%eax
c01092bf:	8b 55 08             	mov    0x8(%ebp),%edx
c01092c2:	c1 ea 0c             	shr    $0xc,%edx
c01092c5:	c1 e2 05             	shl    $0x5,%edx
c01092c8:	01 d0                	add    %edx,%eax
}
c01092ca:	c9                   	leave  
c01092cb:	c3                   	ret    

c01092cc <page2kva>:

static inline void *
page2kva(struct Page *page) {
c01092cc:	55                   	push   %ebp
c01092cd:	89 e5                	mov    %esp,%ebp
c01092cf:	83 ec 18             	sub    $0x18,%esp
    return KADDR(page2pa(page));
c01092d2:	ff 75 08             	pushl  0x8(%ebp)
c01092d5:	e8 a2 ff ff ff       	call   c010927c <page2pa>
c01092da:	83 c4 04             	add    $0x4,%esp
c01092dd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01092e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01092e3:	c1 e8 0c             	shr    $0xc,%eax
c01092e6:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01092e9:	a1 80 ff 19 c0       	mov    0xc019ff80,%eax
c01092ee:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c01092f1:	72 14                	jb     c0109307 <page2kva+0x3b>
c01092f3:	ff 75 f4             	pushl  -0xc(%ebp)
c01092f6:	68 a8 dd 10 c0       	push   $0xc010dda8
c01092fb:	6a 65                	push   $0x65
c01092fd:	68 97 dd 10 c0       	push   $0xc010dd97
c0109302:	e8 f1 70 ff ff       	call   c01003f8 <__panic>
c0109307:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010930a:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c010930f:	c9                   	leave  
c0109310:	c3                   	ret    

c0109311 <kva2page>:

static inline struct Page *
kva2page(void *kva) {
c0109311:	55                   	push   %ebp
c0109312:	89 e5                	mov    %esp,%ebp
c0109314:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PADDR(kva));
c0109317:	8b 45 08             	mov    0x8(%ebp),%eax
c010931a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010931d:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c0109324:	77 14                	ja     c010933a <kva2page+0x29>
c0109326:	ff 75 f4             	pushl  -0xc(%ebp)
c0109329:	68 cc dd 10 c0       	push   $0xc010ddcc
c010932e:	6a 6a                	push   $0x6a
c0109330:	68 97 dd 10 c0       	push   $0xc010dd97
c0109335:	e8 be 70 ff ff       	call   c01003f8 <__panic>
c010933a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010933d:	05 00 00 00 40       	add    $0x40000000,%eax
c0109342:	83 ec 0c             	sub    $0xc,%esp
c0109345:	50                   	push   %eax
c0109346:	e8 44 ff ff ff       	call   c010928f <pa2page>
c010934b:	83 c4 10             	add    $0x10,%esp
}
c010934e:	c9                   	leave  
c010934f:	c3                   	ret    

c0109350 <mm_count_inc>:

static inline int
mm_count_inc(struct mm_struct *mm) {
c0109350:	55                   	push   %ebp
c0109351:	89 e5                	mov    %esp,%ebp
    mm->mm_count += 1;
c0109353:	8b 45 08             	mov    0x8(%ebp),%eax
c0109356:	8b 40 18             	mov    0x18(%eax),%eax
c0109359:	8d 50 01             	lea    0x1(%eax),%edx
c010935c:	8b 45 08             	mov    0x8(%ebp),%eax
c010935f:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c0109362:	8b 45 08             	mov    0x8(%ebp),%eax
c0109365:	8b 40 18             	mov    0x18(%eax),%eax
}
c0109368:	5d                   	pop    %ebp
c0109369:	c3                   	ret    

c010936a <mm_count_dec>:

static inline int
mm_count_dec(struct mm_struct *mm) {
c010936a:	55                   	push   %ebp
c010936b:	89 e5                	mov    %esp,%ebp
    mm->mm_count -= 1;
c010936d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109370:	8b 40 18             	mov    0x18(%eax),%eax
c0109373:	8d 50 ff             	lea    -0x1(%eax),%edx
c0109376:	8b 45 08             	mov    0x8(%ebp),%eax
c0109379:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c010937c:	8b 45 08             	mov    0x8(%ebp),%eax
c010937f:	8b 40 18             	mov    0x18(%eax),%eax
}
c0109382:	5d                   	pop    %ebp
c0109383:	c3                   	ret    

c0109384 <lock_mm>:

static inline void
lock_mm(struct mm_struct *mm) {
c0109384:	55                   	push   %ebp
c0109385:	89 e5                	mov    %esp,%ebp
c0109387:	83 ec 08             	sub    $0x8,%esp
    if (mm != NULL) {
c010938a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010938e:	74 12                	je     c01093a2 <lock_mm+0x1e>
        lock(&(mm->mm_lock));
c0109390:	8b 45 08             	mov    0x8(%ebp),%eax
c0109393:	83 c0 1c             	add    $0x1c,%eax
c0109396:	83 ec 0c             	sub    $0xc,%esp
c0109399:	50                   	push   %eax
c010939a:	e8 7a fe ff ff       	call   c0109219 <lock>
c010939f:	83 c4 10             	add    $0x10,%esp
    }
}
c01093a2:	90                   	nop
c01093a3:	c9                   	leave  
c01093a4:	c3                   	ret    

c01093a5 <unlock_mm>:

static inline void
unlock_mm(struct mm_struct *mm) {
c01093a5:	55                   	push   %ebp
c01093a6:	89 e5                	mov    %esp,%ebp
c01093a8:	83 ec 08             	sub    $0x8,%esp
    if (mm != NULL) {
c01093ab:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01093af:	74 12                	je     c01093c3 <unlock_mm+0x1e>
        unlock(&(mm->mm_lock));
c01093b1:	8b 45 08             	mov    0x8(%ebp),%eax
c01093b4:	83 c0 1c             	add    $0x1c,%eax
c01093b7:	83 ec 0c             	sub    $0xc,%esp
c01093ba:	50                   	push   %eax
c01093bb:	e8 7b fe ff ff       	call   c010923b <unlock>
c01093c0:	83 c4 10             	add    $0x10,%esp
    }
}
c01093c3:	90                   	nop
c01093c4:	c9                   	leave  
c01093c5:	c3                   	ret    

c01093c6 <alloc_proc>:
void forkrets(struct trapframe *tf);
void switch_to(struct context *from, struct context *to);

// alloc_proc - alloc a proc_struct and init all fields of proc_struct
static struct proc_struct *
alloc_proc(void) {
c01093c6:	55                   	push   %ebp
c01093c7:	89 e5                	mov    %esp,%ebp
c01093c9:	83 ec 18             	sub    $0x18,%esp
    struct proc_struct *proc = kmalloc(sizeof(struct proc_struct));
c01093cc:	83 ec 0c             	sub    $0xc,%esp
c01093cf:	6a 7c                	push   $0x7c
c01093d1:	e8 50 c4 ff ff       	call   c0105826 <kmalloc>
c01093d6:	83 c4 10             	add    $0x10,%esp
c01093d9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (proc != NULL) {
c01093dc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01093e0:	0f 84 91 00 00 00    	je     c0109477 <alloc_proc+0xb1>
    /*
     * below fields(add in LAB5) in proc_struct need to be initialized	
     *       uint32_t wait_state;                        // waiting state
     *       struct proc_struct *cptr, *yptr, *optr;     // relations between processes
	 */
        proc->state = PROC_UNINIT;
c01093e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01093e9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        proc->pid = -1;         // an invalid pid
c01093ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01093f2:	c7 40 04 ff ff ff ff 	movl   $0xffffffff,0x4(%eax)
        proc->runs = 0;
c01093f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01093fc:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        proc->kstack = 0;
c0109403:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109406:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        proc->need_resched = 0;
c010940d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109410:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
        proc->parent = NULL;
c0109417:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010941a:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
        proc->mm = NULL;
c0109421:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109424:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
        proc->tf = NULL;
c010942b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010942e:	c7 40 3c 00 00 00 00 	movl   $0x0,0x3c(%eax)
        proc->cr3 = boot_cr3;   // kernel threads share boot_cr3
c0109435:	8b 15 94 21 1a c0    	mov    0xc01a2194,%edx
c010943b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010943e:	89 50 40             	mov    %edx,0x40(%eax)
        proc->flags = 0;
c0109441:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109444:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)

        memset(&(proc->context), 0, sizeof(struct context));
c010944b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010944e:	83 c0 1c             	add    $0x1c,%eax
c0109451:	83 ec 04             	sub    $0x4,%esp
c0109454:	6a 20                	push   $0x20
c0109456:	6a 00                	push   $0x0
c0109458:	50                   	push   %eax
c0109459:	e8 c9 1d 00 00       	call   c010b227 <memset>
c010945e:	83 c4 10             	add    $0x10,%esp
        memset(proc->name, 0, sizeof(char) * (PROC_NAME_LEN + 1));   
c0109461:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109464:	83 c0 48             	add    $0x48,%eax
c0109467:	83 ec 04             	sub    $0x4,%esp
c010946a:	6a 10                	push   $0x10
c010946c:	6a 00                	push   $0x0
c010946e:	50                   	push   %eax
c010946f:	e8 b3 1d 00 00       	call   c010b227 <memset>
c0109474:	83 c4 10             	add    $0x10,%esp
    }
    return proc;
c0109477:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010947a:	c9                   	leave  
c010947b:	c3                   	ret    

c010947c <set_proc_name>:

// set_proc_name - set the name of proc
char *
set_proc_name(struct proc_struct *proc, const char *name) {
c010947c:	55                   	push   %ebp
c010947d:	89 e5                	mov    %esp,%ebp
c010947f:	83 ec 08             	sub    $0x8,%esp
    memset(proc->name, 0, sizeof(proc->name));
c0109482:	8b 45 08             	mov    0x8(%ebp),%eax
c0109485:	83 c0 48             	add    $0x48,%eax
c0109488:	83 ec 04             	sub    $0x4,%esp
c010948b:	6a 10                	push   $0x10
c010948d:	6a 00                	push   $0x0
c010948f:	50                   	push   %eax
c0109490:	e8 92 1d 00 00       	call   c010b227 <memset>
c0109495:	83 c4 10             	add    $0x10,%esp
    return memcpy(proc->name, name, PROC_NAME_LEN);
c0109498:	8b 45 08             	mov    0x8(%ebp),%eax
c010949b:	83 c0 48             	add    $0x48,%eax
c010949e:	83 ec 04             	sub    $0x4,%esp
c01094a1:	6a 0f                	push   $0xf
c01094a3:	ff 75 0c             	pushl  0xc(%ebp)
c01094a6:	50                   	push   %eax
c01094a7:	e8 5e 1e 00 00       	call   c010b30a <memcpy>
c01094ac:	83 c4 10             	add    $0x10,%esp
}
c01094af:	c9                   	leave  
c01094b0:	c3                   	ret    

c01094b1 <get_proc_name>:

// get_proc_name - get the name of proc
char *
get_proc_name(struct proc_struct *proc) {
c01094b1:	55                   	push   %ebp
c01094b2:	89 e5                	mov    %esp,%ebp
c01094b4:	83 ec 08             	sub    $0x8,%esp
    static char name[PROC_NAME_LEN + 1];
    memset(name, 0, sizeof(name));
c01094b7:	83 ec 04             	sub    $0x4,%esp
c01094ba:	6a 10                	push   $0x10
c01094bc:	6a 00                	push   $0x0
c01094be:	68 44 20 1a c0       	push   $0xc01a2044
c01094c3:	e8 5f 1d 00 00       	call   c010b227 <memset>
c01094c8:	83 c4 10             	add    $0x10,%esp
    return memcpy(name, proc->name, PROC_NAME_LEN);
c01094cb:	8b 45 08             	mov    0x8(%ebp),%eax
c01094ce:	83 c0 48             	add    $0x48,%eax
c01094d1:	83 ec 04             	sub    $0x4,%esp
c01094d4:	6a 0f                	push   $0xf
c01094d6:	50                   	push   %eax
c01094d7:	68 44 20 1a c0       	push   $0xc01a2044
c01094dc:	e8 29 1e 00 00       	call   c010b30a <memcpy>
c01094e1:	83 c4 10             	add    $0x10,%esp
}
c01094e4:	c9                   	leave  
c01094e5:	c3                   	ret    

c01094e6 <set_links>:

// set_links - set the relation links of process
static void
set_links(struct proc_struct *proc) {
c01094e6:	55                   	push   %ebp
c01094e7:	89 e5                	mov    %esp,%ebp
c01094e9:	83 ec 20             	sub    $0x20,%esp
    list_add(&proc_list, &(proc->list_link));
c01094ec:	8b 45 08             	mov    0x8(%ebp),%eax
c01094ef:	83 c0 58             	add    $0x58,%eax
c01094f2:	c7 45 fc 9c 21 1a c0 	movl   $0xc01a219c,-0x4(%ebp)
c01094f9:	89 45 f8             	mov    %eax,-0x8(%ebp)
c01094fc:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01094ff:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109502:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0109505:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0109508:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010950b:	8b 40 04             	mov    0x4(%eax),%eax
c010950e:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0109511:	89 55 ec             	mov    %edx,-0x14(%ebp)
c0109514:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109517:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010951a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010951d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109520:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0109523:	89 10                	mov    %edx,(%eax)
c0109525:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109528:	8b 10                	mov    (%eax),%edx
c010952a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010952d:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0109530:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109533:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0109536:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0109539:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010953c:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010953f:	89 10                	mov    %edx,(%eax)
    proc->yptr = NULL;
c0109541:	8b 45 08             	mov    0x8(%ebp),%eax
c0109544:	c7 40 74 00 00 00 00 	movl   $0x0,0x74(%eax)
    if ((proc->optr = proc->parent->cptr) != NULL) {
c010954b:	8b 45 08             	mov    0x8(%ebp),%eax
c010954e:	8b 40 14             	mov    0x14(%eax),%eax
c0109551:	8b 50 70             	mov    0x70(%eax),%edx
c0109554:	8b 45 08             	mov    0x8(%ebp),%eax
c0109557:	89 50 78             	mov    %edx,0x78(%eax)
c010955a:	8b 45 08             	mov    0x8(%ebp),%eax
c010955d:	8b 40 78             	mov    0x78(%eax),%eax
c0109560:	85 c0                	test   %eax,%eax
c0109562:	74 0c                	je     c0109570 <set_links+0x8a>
        proc->optr->yptr = proc;
c0109564:	8b 45 08             	mov    0x8(%ebp),%eax
c0109567:	8b 40 78             	mov    0x78(%eax),%eax
c010956a:	8b 55 08             	mov    0x8(%ebp),%edx
c010956d:	89 50 74             	mov    %edx,0x74(%eax)
    }
    proc->parent->cptr = proc;
c0109570:	8b 45 08             	mov    0x8(%ebp),%eax
c0109573:	8b 40 14             	mov    0x14(%eax),%eax
c0109576:	8b 55 08             	mov    0x8(%ebp),%edx
c0109579:	89 50 70             	mov    %edx,0x70(%eax)
    nr_process ++;
c010957c:	a1 40 20 1a c0       	mov    0xc01a2040,%eax
c0109581:	83 c0 01             	add    $0x1,%eax
c0109584:	a3 40 20 1a c0       	mov    %eax,0xc01a2040
}
c0109589:	90                   	nop
c010958a:	c9                   	leave  
c010958b:	c3                   	ret    

c010958c <remove_links>:

// remove_links - clean the relation links of process
static void
remove_links(struct proc_struct *proc) {
c010958c:	55                   	push   %ebp
c010958d:	89 e5                	mov    %esp,%ebp
c010958f:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->list_link));
c0109592:	8b 45 08             	mov    0x8(%ebp),%eax
c0109595:	83 c0 58             	add    $0x58,%eax
c0109598:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010959b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010959e:	8b 40 04             	mov    0x4(%eax),%eax
c01095a1:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01095a4:	8b 12                	mov    (%edx),%edx
c01095a6:	89 55 f8             	mov    %edx,-0x8(%ebp)
c01095a9:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c01095ac:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01095af:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01095b2:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c01095b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01095b8:	8b 55 f8             	mov    -0x8(%ebp),%edx
c01095bb:	89 10                	mov    %edx,(%eax)
    if (proc->optr != NULL) {
c01095bd:	8b 45 08             	mov    0x8(%ebp),%eax
c01095c0:	8b 40 78             	mov    0x78(%eax),%eax
c01095c3:	85 c0                	test   %eax,%eax
c01095c5:	74 0f                	je     c01095d6 <remove_links+0x4a>
        proc->optr->yptr = proc->yptr;
c01095c7:	8b 45 08             	mov    0x8(%ebp),%eax
c01095ca:	8b 40 78             	mov    0x78(%eax),%eax
c01095cd:	8b 55 08             	mov    0x8(%ebp),%edx
c01095d0:	8b 52 74             	mov    0x74(%edx),%edx
c01095d3:	89 50 74             	mov    %edx,0x74(%eax)
    }
    if (proc->yptr != NULL) {
c01095d6:	8b 45 08             	mov    0x8(%ebp),%eax
c01095d9:	8b 40 74             	mov    0x74(%eax),%eax
c01095dc:	85 c0                	test   %eax,%eax
c01095de:	74 11                	je     c01095f1 <remove_links+0x65>
        proc->yptr->optr = proc->optr;
c01095e0:	8b 45 08             	mov    0x8(%ebp),%eax
c01095e3:	8b 40 74             	mov    0x74(%eax),%eax
c01095e6:	8b 55 08             	mov    0x8(%ebp),%edx
c01095e9:	8b 52 78             	mov    0x78(%edx),%edx
c01095ec:	89 50 78             	mov    %edx,0x78(%eax)
c01095ef:	eb 0f                	jmp    c0109600 <remove_links+0x74>
    }
    else {
       proc->parent->cptr = proc->optr;
c01095f1:	8b 45 08             	mov    0x8(%ebp),%eax
c01095f4:	8b 40 14             	mov    0x14(%eax),%eax
c01095f7:	8b 55 08             	mov    0x8(%ebp),%edx
c01095fa:	8b 52 78             	mov    0x78(%edx),%edx
c01095fd:	89 50 70             	mov    %edx,0x70(%eax)
    }
    nr_process --;
c0109600:	a1 40 20 1a c0       	mov    0xc01a2040,%eax
c0109605:	83 e8 01             	sub    $0x1,%eax
c0109608:	a3 40 20 1a c0       	mov    %eax,0xc01a2040
}
c010960d:	90                   	nop
c010960e:	c9                   	leave  
c010960f:	c3                   	ret    

c0109610 <get_pid>:

// get_pid - alloc a unique pid for process
static int
get_pid(void) {
c0109610:	55                   	push   %ebp
c0109611:	89 e5                	mov    %esp,%ebp
c0109613:	83 ec 10             	sub    $0x10,%esp
    static_assert(MAX_PID > MAX_PROCESS);
    struct proc_struct *proc;
    list_entry_t *list = &proc_list, *le;
c0109616:	c7 45 f8 9c 21 1a c0 	movl   $0xc01a219c,-0x8(%ebp)
    static int next_safe = MAX_PID, last_pid = MAX_PID;
    if (++ last_pid >= MAX_PID) {
c010961d:	a1 b8 ba 12 c0       	mov    0xc012bab8,%eax
c0109622:	83 c0 01             	add    $0x1,%eax
c0109625:	a3 b8 ba 12 c0       	mov    %eax,0xc012bab8
c010962a:	a1 b8 ba 12 c0       	mov    0xc012bab8,%eax
c010962f:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c0109634:	7e 0c                	jle    c0109642 <get_pid+0x32>
        last_pid = 1;
c0109636:	c7 05 b8 ba 12 c0 01 	movl   $0x1,0xc012bab8
c010963d:	00 00 00 
        goto inside;
c0109640:	eb 13                	jmp    c0109655 <get_pid+0x45>
    }
    if (last_pid >= next_safe) {
c0109642:	8b 15 b8 ba 12 c0    	mov    0xc012bab8,%edx
c0109648:	a1 bc ba 12 c0       	mov    0xc012babc,%eax
c010964d:	39 c2                	cmp    %eax,%edx
c010964f:	0f 8c ac 00 00 00    	jl     c0109701 <get_pid+0xf1>
    inside:
        next_safe = MAX_PID;
c0109655:	c7 05 bc ba 12 c0 00 	movl   $0x2000,0xc012babc
c010965c:	20 00 00 
    repeat:
        le = list;
c010965f:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0109662:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while ((le = list_next(le)) != list) {
c0109665:	eb 7f                	jmp    c01096e6 <get_pid+0xd6>
            proc = le2proc(le, list_link);
c0109667:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010966a:	83 e8 58             	sub    $0x58,%eax
c010966d:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (proc->pid == last_pid) {
c0109670:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109673:	8b 50 04             	mov    0x4(%eax),%edx
c0109676:	a1 b8 ba 12 c0       	mov    0xc012bab8,%eax
c010967b:	39 c2                	cmp    %eax,%edx
c010967d:	75 3e                	jne    c01096bd <get_pid+0xad>
                if (++ last_pid >= next_safe) {
c010967f:	a1 b8 ba 12 c0       	mov    0xc012bab8,%eax
c0109684:	83 c0 01             	add    $0x1,%eax
c0109687:	a3 b8 ba 12 c0       	mov    %eax,0xc012bab8
c010968c:	8b 15 b8 ba 12 c0    	mov    0xc012bab8,%edx
c0109692:	a1 bc ba 12 c0       	mov    0xc012babc,%eax
c0109697:	39 c2                	cmp    %eax,%edx
c0109699:	7c 4b                	jl     c01096e6 <get_pid+0xd6>
                    if (last_pid >= MAX_PID) {
c010969b:	a1 b8 ba 12 c0       	mov    0xc012bab8,%eax
c01096a0:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c01096a5:	7e 0a                	jle    c01096b1 <get_pid+0xa1>
                        last_pid = 1;
c01096a7:	c7 05 b8 ba 12 c0 01 	movl   $0x1,0xc012bab8
c01096ae:	00 00 00 
                    }
                    next_safe = MAX_PID;
c01096b1:	c7 05 bc ba 12 c0 00 	movl   $0x2000,0xc012babc
c01096b8:	20 00 00 
                    goto repeat;
c01096bb:	eb a2                	jmp    c010965f <get_pid+0x4f>
                }
            }
            else if (proc->pid > last_pid && next_safe > proc->pid) {
c01096bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01096c0:	8b 50 04             	mov    0x4(%eax),%edx
c01096c3:	a1 b8 ba 12 c0       	mov    0xc012bab8,%eax
c01096c8:	39 c2                	cmp    %eax,%edx
c01096ca:	7e 1a                	jle    c01096e6 <get_pid+0xd6>
c01096cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01096cf:	8b 50 04             	mov    0x4(%eax),%edx
c01096d2:	a1 bc ba 12 c0       	mov    0xc012babc,%eax
c01096d7:	39 c2                	cmp    %eax,%edx
c01096d9:	7d 0b                	jge    c01096e6 <get_pid+0xd6>
                next_safe = proc->pid;
c01096db:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01096de:	8b 40 04             	mov    0x4(%eax),%eax
c01096e1:	a3 bc ba 12 c0       	mov    %eax,0xc012babc
c01096e6:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01096e9:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01096ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01096ef:	8b 40 04             	mov    0x4(%eax),%eax
    if (last_pid >= next_safe) {
    inside:
        next_safe = MAX_PID;
    repeat:
        le = list;
        while ((le = list_next(le)) != list) {
c01096f2:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01096f5:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01096f8:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c01096fb:	0f 85 66 ff ff ff    	jne    c0109667 <get_pid+0x57>
            else if (proc->pid > last_pid && next_safe > proc->pid) {
                next_safe = proc->pid;
            }
        }
    }
    return last_pid;
c0109701:	a1 b8 ba 12 c0       	mov    0xc012bab8,%eax
}
c0109706:	c9                   	leave  
c0109707:	c3                   	ret    

c0109708 <proc_run>:

// proc_run - make process "proc" running on cpu
// NOTE: before call switch_to, should load  base addr of "proc"'s new PDT
void
proc_run(struct proc_struct *proc) {
c0109708:	55                   	push   %ebp
c0109709:	89 e5                	mov    %esp,%ebp
c010970b:	83 ec 18             	sub    $0x18,%esp
    if (proc != current) {
c010970e:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c0109713:	39 45 08             	cmp    %eax,0x8(%ebp)
c0109716:	74 6b                	je     c0109783 <proc_run+0x7b>
        bool intr_flag;
        struct proc_struct *prev = current, *next = proc;
c0109718:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c010971d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109720:	8b 45 08             	mov    0x8(%ebp),%eax
c0109723:	89 45 f0             	mov    %eax,-0x10(%ebp)
        local_intr_save(intr_flag);
c0109726:	e8 96 fa ff ff       	call   c01091c1 <__intr_save>
c010972b:	89 45 ec             	mov    %eax,-0x14(%ebp)
        {
            current = proc;
c010972e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109731:	a3 28 00 1a c0       	mov    %eax,0xc01a0028
            load_esp0(next->kstack + KSTACKSIZE);
c0109736:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109739:	8b 40 0c             	mov    0xc(%eax),%eax
c010973c:	05 00 20 00 00       	add    $0x2000,%eax
c0109741:	83 ec 0c             	sub    $0xc,%esp
c0109744:	50                   	push   %eax
c0109745:	e8 b5 de ff ff       	call   c01075ff <load_esp0>
c010974a:	83 c4 10             	add    $0x10,%esp
            lcr3(next->cr3);
c010974d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109750:	8b 40 40             	mov    0x40(%eax),%eax
c0109753:	89 45 e8             	mov    %eax,-0x18(%ebp)
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
}

static inline void
lcr3(uintptr_t cr3) {
    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
c0109756:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109759:	0f 22 d8             	mov    %eax,%cr3
            switch_to(&(prev->context), &(next->context));
c010975c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010975f:	8d 50 1c             	lea    0x1c(%eax),%edx
c0109762:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109765:	83 c0 1c             	add    $0x1c,%eax
c0109768:	83 ec 08             	sub    $0x8,%esp
c010976b:	52                   	push   %edx
c010976c:	50                   	push   %eax
c010976d:	e8 d8 f9 ff ff       	call   c010914a <switch_to>
c0109772:	83 c4 10             	add    $0x10,%esp
        }
        local_intr_restore(intr_flag);
c0109775:	83 ec 0c             	sub    $0xc,%esp
c0109778:	ff 75 ec             	pushl  -0x14(%ebp)
c010977b:	e8 6b fa ff ff       	call   c01091eb <__intr_restore>
c0109780:	83 c4 10             	add    $0x10,%esp
    }
}
c0109783:	90                   	nop
c0109784:	c9                   	leave  
c0109785:	c3                   	ret    

c0109786 <forkret>:

// forkret -- the first kernel entry point of a new thread/process
// NOTE: the addr of forkret is setted in copy_thread function
//       after switch_to, the current proc will execute here.
static void
forkret(void) {
c0109786:	55                   	push   %ebp
c0109787:	89 e5                	mov    %esp,%ebp
c0109789:	83 ec 08             	sub    $0x8,%esp
    forkrets(current->tf);
c010978c:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c0109791:	8b 40 3c             	mov    0x3c(%eax),%eax
c0109794:	83 ec 0c             	sub    $0xc,%esp
c0109797:	50                   	push   %eax
c0109798:	e8 b1 9d ff ff       	call   c010354e <forkrets>
c010979d:	83 c4 10             	add    $0x10,%esp
}
c01097a0:	90                   	nop
c01097a1:	c9                   	leave  
c01097a2:	c3                   	ret    

c01097a3 <hash_proc>:

// hash_proc - add proc into proc hash_list
static void
hash_proc(struct proc_struct *proc) {
c01097a3:	55                   	push   %ebp
c01097a4:	89 e5                	mov    %esp,%ebp
c01097a6:	53                   	push   %ebx
c01097a7:	83 ec 24             	sub    $0x24,%esp
    list_add(hash_list + pid_hashfn(proc->pid), &(proc->hash_link));
c01097aa:	8b 45 08             	mov    0x8(%ebp),%eax
c01097ad:	8d 58 60             	lea    0x60(%eax),%ebx
c01097b0:	8b 45 08             	mov    0x8(%ebp),%eax
c01097b3:	8b 40 04             	mov    0x4(%eax),%eax
c01097b6:	83 ec 08             	sub    $0x8,%esp
c01097b9:	6a 0a                	push   $0xa
c01097bb:	50                   	push   %eax
c01097bc:	e8 fd 21 00 00       	call   c010b9be <hash32>
c01097c1:	83 c4 10             	add    $0x10,%esp
c01097c4:	c1 e0 03             	shl    $0x3,%eax
c01097c7:	05 40 00 1a c0       	add    $0xc01a0040,%eax
c01097cc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01097cf:	89 5d f0             	mov    %ebx,-0x10(%ebp)
c01097d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01097d5:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01097d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01097db:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c01097de:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01097e1:	8b 40 04             	mov    0x4(%eax),%eax
c01097e4:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01097e7:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c01097ea:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01097ed:	89 55 e0             	mov    %edx,-0x20(%ebp)
c01097f0:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c01097f3:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01097f6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01097f9:	89 10                	mov    %edx,(%eax)
c01097fb:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01097fe:	8b 10                	mov    (%eax),%edx
c0109800:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109803:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0109806:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109809:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010980c:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010980f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109812:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0109815:	89 10                	mov    %edx,(%eax)
}
c0109817:	90                   	nop
c0109818:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c010981b:	c9                   	leave  
c010981c:	c3                   	ret    

c010981d <unhash_proc>:

// unhash_proc - delete proc from proc hash_list
static void
unhash_proc(struct proc_struct *proc) {
c010981d:	55                   	push   %ebp
c010981e:	89 e5                	mov    %esp,%ebp
c0109820:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->hash_link));
c0109823:	8b 45 08             	mov    0x8(%ebp),%eax
c0109826:	83 c0 60             	add    $0x60,%eax
c0109829:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010982c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010982f:	8b 40 04             	mov    0x4(%eax),%eax
c0109832:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0109835:	8b 12                	mov    (%edx),%edx
c0109837:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010983a:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010983d:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0109840:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109843:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0109846:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109849:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010984c:	89 10                	mov    %edx,(%eax)
}
c010984e:	90                   	nop
c010984f:	c9                   	leave  
c0109850:	c3                   	ret    

c0109851 <find_proc>:

// find_proc - find proc frome proc hash_list according to pid
struct proc_struct *
find_proc(int pid) {
c0109851:	55                   	push   %ebp
c0109852:	89 e5                	mov    %esp,%ebp
c0109854:	83 ec 18             	sub    $0x18,%esp
    if (0 < pid && pid < MAX_PID) {
c0109857:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010985b:	7e 5d                	jle    c01098ba <find_proc+0x69>
c010985d:	81 7d 08 ff 1f 00 00 	cmpl   $0x1fff,0x8(%ebp)
c0109864:	7f 54                	jg     c01098ba <find_proc+0x69>
        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
c0109866:	8b 45 08             	mov    0x8(%ebp),%eax
c0109869:	83 ec 08             	sub    $0x8,%esp
c010986c:	6a 0a                	push   $0xa
c010986e:	50                   	push   %eax
c010986f:	e8 4a 21 00 00       	call   c010b9be <hash32>
c0109874:	83 c4 10             	add    $0x10,%esp
c0109877:	c1 e0 03             	shl    $0x3,%eax
c010987a:	05 40 00 1a c0       	add    $0xc01a0040,%eax
c010987f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109882:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109885:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while ((le = list_next(le)) != list) {
c0109888:	eb 19                	jmp    c01098a3 <find_proc+0x52>
            struct proc_struct *proc = le2proc(le, hash_link);
c010988a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010988d:	83 e8 60             	sub    $0x60,%eax
c0109890:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if (proc->pid == pid) {
c0109893:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109896:	8b 40 04             	mov    0x4(%eax),%eax
c0109899:	3b 45 08             	cmp    0x8(%ebp),%eax
c010989c:	75 05                	jne    c01098a3 <find_proc+0x52>
                return proc;
c010989e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01098a1:	eb 1c                	jmp    c01098bf <find_proc+0x6e>
c01098a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01098a6:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01098a9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01098ac:	8b 40 04             	mov    0x4(%eax),%eax
// find_proc - find proc frome proc hash_list according to pid
struct proc_struct *
find_proc(int pid) {
    if (0 < pid && pid < MAX_PID) {
        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
        while ((le = list_next(le)) != list) {
c01098af:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01098b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01098b5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01098b8:	75 d0                	jne    c010988a <find_proc+0x39>
            if (proc->pid == pid) {
                return proc;
            }
        }
    }
    return NULL;
c01098ba:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01098bf:	c9                   	leave  
c01098c0:	c3                   	ret    

c01098c1 <kernel_thread>:

// kernel_thread - create a kernel thread using "fn" function
// NOTE: the contents of temp trapframe tf will be copied to 
//       proc->tf in do_fork-->copy_thread function
int
kernel_thread(int (*fn)(void *), void *arg, uint32_t clone_flags) {
c01098c1:	55                   	push   %ebp
c01098c2:	89 e5                	mov    %esp,%ebp
c01098c4:	83 ec 58             	sub    $0x58,%esp
    struct trapframe tf;
    memset(&tf, 0, sizeof(struct trapframe));
c01098c7:	83 ec 04             	sub    $0x4,%esp
c01098ca:	6a 4c                	push   $0x4c
c01098cc:	6a 00                	push   $0x0
c01098ce:	8d 45 ac             	lea    -0x54(%ebp),%eax
c01098d1:	50                   	push   %eax
c01098d2:	e8 50 19 00 00       	call   c010b227 <memset>
c01098d7:	83 c4 10             	add    $0x10,%esp
    tf.tf_cs = KERNEL_CS;
c01098da:	66 c7 45 e8 08 00    	movw   $0x8,-0x18(%ebp)
    tf.tf_ds = tf.tf_es = tf.tf_ss = KERNEL_DS;
c01098e0:	66 c7 45 f4 10 00    	movw   $0x10,-0xc(%ebp)
c01098e6:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c01098ea:	66 89 45 d4          	mov    %ax,-0x2c(%ebp)
c01098ee:	0f b7 45 d4          	movzwl -0x2c(%ebp),%eax
c01098f2:	66 89 45 d8          	mov    %ax,-0x28(%ebp)
    tf.tf_regs.reg_ebx = (uint32_t)fn;
c01098f6:	8b 45 08             	mov    0x8(%ebp),%eax
c01098f9:	89 45 bc             	mov    %eax,-0x44(%ebp)
    tf.tf_regs.reg_edx = (uint32_t)arg;
c01098fc:	8b 45 0c             	mov    0xc(%ebp),%eax
c01098ff:	89 45 c0             	mov    %eax,-0x40(%ebp)
    tf.tf_eip = (uint32_t)kernel_thread_entry;
c0109902:	b8 41 91 10 c0       	mov    $0xc0109141,%eax
c0109907:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return do_fork(clone_flags | CLONE_VM, 0, &tf);
c010990a:	8b 45 10             	mov    0x10(%ebp),%eax
c010990d:	80 cc 01             	or     $0x1,%ah
c0109910:	89 c2                	mov    %eax,%edx
c0109912:	83 ec 04             	sub    $0x4,%esp
c0109915:	8d 45 ac             	lea    -0x54(%ebp),%eax
c0109918:	50                   	push   %eax
c0109919:	6a 00                	push   $0x0
c010991b:	52                   	push   %edx
c010991c:	e8 f2 02 00 00       	call   c0109c13 <do_fork>
c0109921:	83 c4 10             	add    $0x10,%esp
}
c0109924:	c9                   	leave  
c0109925:	c3                   	ret    

c0109926 <setup_kstack>:

// setup_kstack - alloc pages with size KSTACKPAGE as process kernel stack
static int
setup_kstack(struct proc_struct *proc) {
c0109926:	55                   	push   %ebp
c0109927:	89 e5                	mov    %esp,%ebp
c0109929:	83 ec 18             	sub    $0x18,%esp
    struct Page *page = alloc_pages(KSTACKPAGE);
c010992c:	83 ec 0c             	sub    $0xc,%esp
c010992f:	6a 02                	push   $0x2
c0109931:	e8 1d de ff ff       	call   c0107753 <alloc_pages>
c0109936:	83 c4 10             	add    $0x10,%esp
c0109939:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c010993c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109940:	74 1d                	je     c010995f <setup_kstack+0x39>
        proc->kstack = (uintptr_t)page2kva(page);
c0109942:	83 ec 0c             	sub    $0xc,%esp
c0109945:	ff 75 f4             	pushl  -0xc(%ebp)
c0109948:	e8 7f f9 ff ff       	call   c01092cc <page2kva>
c010994d:	83 c4 10             	add    $0x10,%esp
c0109950:	89 c2                	mov    %eax,%edx
c0109952:	8b 45 08             	mov    0x8(%ebp),%eax
c0109955:	89 50 0c             	mov    %edx,0xc(%eax)
        return 0;
c0109958:	b8 00 00 00 00       	mov    $0x0,%eax
c010995d:	eb 05                	jmp    c0109964 <setup_kstack+0x3e>
    }
    return -E_NO_MEM;
c010995f:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c0109964:	c9                   	leave  
c0109965:	c3                   	ret    

c0109966 <put_kstack>:

// put_kstack - free the memory space of process kernel stack
static void
put_kstack(struct proc_struct *proc) {
c0109966:	55                   	push   %ebp
c0109967:	89 e5                	mov    %esp,%ebp
c0109969:	83 ec 08             	sub    $0x8,%esp
    free_pages(kva2page((void *)(proc->kstack)), KSTACKPAGE);
c010996c:	8b 45 08             	mov    0x8(%ebp),%eax
c010996f:	8b 40 0c             	mov    0xc(%eax),%eax
c0109972:	83 ec 0c             	sub    $0xc,%esp
c0109975:	50                   	push   %eax
c0109976:	e8 96 f9 ff ff       	call   c0109311 <kva2page>
c010997b:	83 c4 10             	add    $0x10,%esp
c010997e:	83 ec 08             	sub    $0x8,%esp
c0109981:	6a 02                	push   $0x2
c0109983:	50                   	push   %eax
c0109984:	e8 36 de ff ff       	call   c01077bf <free_pages>
c0109989:	83 c4 10             	add    $0x10,%esp
}
c010998c:	90                   	nop
c010998d:	c9                   	leave  
c010998e:	c3                   	ret    

c010998f <setup_pgdir>:

// setup_pgdir - alloc one page as PDT
static int
setup_pgdir(struct mm_struct *mm) {
c010998f:	55                   	push   %ebp
c0109990:	89 e5                	mov    %esp,%ebp
c0109992:	83 ec 18             	sub    $0x18,%esp
    struct Page *page;
    if ((page = alloc_page()) == NULL) {
c0109995:	83 ec 0c             	sub    $0xc,%esp
c0109998:	6a 01                	push   $0x1
c010999a:	e8 b4 dd ff ff       	call   c0107753 <alloc_pages>
c010999f:	83 c4 10             	add    $0x10,%esp
c01099a2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01099a5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01099a9:	75 07                	jne    c01099b2 <setup_pgdir+0x23>
        return -E_NO_MEM;
c01099ab:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c01099b0:	eb 74                	jmp    c0109a26 <setup_pgdir+0x97>
    }
    pde_t *pgdir = page2kva(page);
c01099b2:	83 ec 0c             	sub    $0xc,%esp
c01099b5:	ff 75 f4             	pushl  -0xc(%ebp)
c01099b8:	e8 0f f9 ff ff       	call   c01092cc <page2kva>
c01099bd:	83 c4 10             	add    $0x10,%esp
c01099c0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    memcpy(pgdir, boot_pgdir, PGSIZE);
c01099c3:	a1 60 ba 12 c0       	mov    0xc012ba60,%eax
c01099c8:	83 ec 04             	sub    $0x4,%esp
c01099cb:	68 00 10 00 00       	push   $0x1000
c01099d0:	50                   	push   %eax
c01099d1:	ff 75 f0             	pushl  -0x10(%ebp)
c01099d4:	e8 31 19 00 00       	call   c010b30a <memcpy>
c01099d9:	83 c4 10             	add    $0x10,%esp
    pgdir[PDX(VPT)] = PADDR(pgdir) | PTE_P | PTE_W;
c01099dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01099df:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
c01099e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01099e8:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01099eb:	81 7d ec ff ff ff bf 	cmpl   $0xbfffffff,-0x14(%ebp)
c01099f2:	77 17                	ja     c0109a0b <setup_pgdir+0x7c>
c01099f4:	ff 75 ec             	pushl  -0x14(%ebp)
c01099f7:	68 cc dd 10 c0       	push   $0xc010ddcc
c01099fc:	68 2d 01 00 00       	push   $0x12d
c0109a01:	68 f0 dd 10 c0       	push   $0xc010ddf0
c0109a06:	e8 ed 69 ff ff       	call   c01003f8 <__panic>
c0109a0b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109a0e:	05 00 00 00 40       	add    $0x40000000,%eax
c0109a13:	83 c8 03             	or     $0x3,%eax
c0109a16:	89 02                	mov    %eax,(%edx)
    mm->pgdir = pgdir;
c0109a18:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a1b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0109a1e:	89 50 0c             	mov    %edx,0xc(%eax)
    return 0;
c0109a21:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109a26:	c9                   	leave  
c0109a27:	c3                   	ret    

c0109a28 <put_pgdir>:

// put_pgdir - free the memory space of PDT
static void
put_pgdir(struct mm_struct *mm) {
c0109a28:	55                   	push   %ebp
c0109a29:	89 e5                	mov    %esp,%ebp
c0109a2b:	83 ec 08             	sub    $0x8,%esp
    free_page(kva2page(mm->pgdir));
c0109a2e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a31:	8b 40 0c             	mov    0xc(%eax),%eax
c0109a34:	83 ec 0c             	sub    $0xc,%esp
c0109a37:	50                   	push   %eax
c0109a38:	e8 d4 f8 ff ff       	call   c0109311 <kva2page>
c0109a3d:	83 c4 10             	add    $0x10,%esp
c0109a40:	83 ec 08             	sub    $0x8,%esp
c0109a43:	6a 01                	push   $0x1
c0109a45:	50                   	push   %eax
c0109a46:	e8 74 dd ff ff       	call   c01077bf <free_pages>
c0109a4b:	83 c4 10             	add    $0x10,%esp
}
c0109a4e:	90                   	nop
c0109a4f:	c9                   	leave  
c0109a50:	c3                   	ret    

c0109a51 <copy_mm>:

// copy_mm - process "proc" duplicate OR share process "current"'s mm according clone_flags
//         - if clone_flags & CLONE_VM, then "share" ; else "duplicate"
static int
copy_mm(uint32_t clone_flags, struct proc_struct *proc) {
c0109a51:	55                   	push   %ebp
c0109a52:	89 e5                	mov    %esp,%ebp
c0109a54:	83 ec 18             	sub    $0x18,%esp
    struct mm_struct *mm, *oldmm = current->mm;
c0109a57:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c0109a5c:	8b 40 18             	mov    0x18(%eax),%eax
c0109a5f:	89 45 ec             	mov    %eax,-0x14(%ebp)

    /* current is a kernel thread */
    if (oldmm == NULL) {
c0109a62:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0109a66:	75 0a                	jne    c0109a72 <copy_mm+0x21>
        return 0;
c0109a68:	b8 00 00 00 00       	mov    $0x0,%eax
c0109a6d:	e9 03 01 00 00       	jmp    c0109b75 <copy_mm+0x124>
    }
    if (clone_flags & CLONE_VM) {
c0109a72:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a75:	25 00 01 00 00       	and    $0x100,%eax
c0109a7a:	85 c0                	test   %eax,%eax
c0109a7c:	74 08                	je     c0109a86 <copy_mm+0x35>
        mm = oldmm;
c0109a7e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109a81:	89 45 f4             	mov    %eax,-0xc(%ebp)
        goto good_mm;
c0109a84:	eb 65                	jmp    c0109aeb <copy_mm+0x9a>
    }

    int ret = -E_NO_MEM;
c0109a86:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
    if ((mm = mm_create()) == NULL) {
c0109a8d:	e8 6e a2 ff ff       	call   c0103d00 <mm_create>
c0109a92:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109a95:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109a99:	0f 84 d2 00 00 00    	je     c0109b71 <copy_mm+0x120>
        goto bad_mm;
    }
    if (setup_pgdir(mm) != 0) {
c0109a9f:	83 ec 0c             	sub    $0xc,%esp
c0109aa2:	ff 75 f4             	pushl  -0xc(%ebp)
c0109aa5:	e8 e5 fe ff ff       	call   c010998f <setup_pgdir>
c0109aaa:	83 c4 10             	add    $0x10,%esp
c0109aad:	85 c0                	test   %eax,%eax
c0109aaf:	0f 85 ab 00 00 00    	jne    c0109b60 <copy_mm+0x10f>
        goto bad_pgdir_cleanup_mm;
    }

    lock_mm(oldmm);
c0109ab5:	83 ec 0c             	sub    $0xc,%esp
c0109ab8:	ff 75 ec             	pushl  -0x14(%ebp)
c0109abb:	e8 c4 f8 ff ff       	call   c0109384 <lock_mm>
c0109ac0:	83 c4 10             	add    $0x10,%esp
    {
        ret = dup_mmap(mm, oldmm);
c0109ac3:	83 ec 08             	sub    $0x8,%esp
c0109ac6:	ff 75 ec             	pushl  -0x14(%ebp)
c0109ac9:	ff 75 f4             	pushl  -0xc(%ebp)
c0109acc:	e8 00 a7 ff ff       	call   c01041d1 <dup_mmap>
c0109ad1:	83 c4 10             	add    $0x10,%esp
c0109ad4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    unlock_mm(oldmm);
c0109ad7:	83 ec 0c             	sub    $0xc,%esp
c0109ada:	ff 75 ec             	pushl  -0x14(%ebp)
c0109add:	e8 c3 f8 ff ff       	call   c01093a5 <unlock_mm>
c0109ae2:	83 c4 10             	add    $0x10,%esp

    if (ret != 0) {
c0109ae5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0109ae9:	75 56                	jne    c0109b41 <copy_mm+0xf0>
        goto bad_dup_cleanup_mmap;
    }

good_mm:
    mm_count_inc(mm);
c0109aeb:	83 ec 0c             	sub    $0xc,%esp
c0109aee:	ff 75 f4             	pushl  -0xc(%ebp)
c0109af1:	e8 5a f8 ff ff       	call   c0109350 <mm_count_inc>
c0109af6:	83 c4 10             	add    $0x10,%esp
    proc->mm = mm;
c0109af9:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109afc:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109aff:	89 50 18             	mov    %edx,0x18(%eax)
    proc->cr3 = PADDR(mm->pgdir);
c0109b02:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109b05:	8b 40 0c             	mov    0xc(%eax),%eax
c0109b08:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0109b0b:	81 7d e8 ff ff ff bf 	cmpl   $0xbfffffff,-0x18(%ebp)
c0109b12:	77 17                	ja     c0109b2b <copy_mm+0xda>
c0109b14:	ff 75 e8             	pushl  -0x18(%ebp)
c0109b17:	68 cc dd 10 c0       	push   $0xc010ddcc
c0109b1c:	68 5c 01 00 00       	push   $0x15c
c0109b21:	68 f0 dd 10 c0       	push   $0xc010ddf0
c0109b26:	e8 cd 68 ff ff       	call   c01003f8 <__panic>
c0109b2b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109b2e:	8d 90 00 00 00 40    	lea    0x40000000(%eax),%edx
c0109b34:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109b37:	89 50 40             	mov    %edx,0x40(%eax)
    return 0;
c0109b3a:	b8 00 00 00 00       	mov    $0x0,%eax
c0109b3f:	eb 34                	jmp    c0109b75 <copy_mm+0x124>
        ret = dup_mmap(mm, oldmm);
    }
    unlock_mm(oldmm);

    if (ret != 0) {
        goto bad_dup_cleanup_mmap;
c0109b41:	90                   	nop
    mm_count_inc(mm);
    proc->mm = mm;
    proc->cr3 = PADDR(mm->pgdir);
    return 0;
bad_dup_cleanup_mmap:
    exit_mmap(mm);
c0109b42:	83 ec 0c             	sub    $0xc,%esp
c0109b45:	ff 75 f4             	pushl  -0xc(%ebp)
c0109b48:	e8 6b a7 ff ff       	call   c01042b8 <exit_mmap>
c0109b4d:	83 c4 10             	add    $0x10,%esp
    put_pgdir(mm);
c0109b50:	83 ec 0c             	sub    $0xc,%esp
c0109b53:	ff 75 f4             	pushl  -0xc(%ebp)
c0109b56:	e8 cd fe ff ff       	call   c0109a28 <put_pgdir>
c0109b5b:	83 c4 10             	add    $0x10,%esp
c0109b5e:	eb 01                	jmp    c0109b61 <copy_mm+0x110>
    int ret = -E_NO_MEM;
    if ((mm = mm_create()) == NULL) {
        goto bad_mm;
    }
    if (setup_pgdir(mm) != 0) {
        goto bad_pgdir_cleanup_mm;
c0109b60:	90                   	nop
    return 0;
bad_dup_cleanup_mmap:
    exit_mmap(mm);
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
c0109b61:	83 ec 0c             	sub    $0xc,%esp
c0109b64:	ff 75 f4             	pushl  -0xc(%ebp)
c0109b67:	e8 be a4 ff ff       	call   c010402a <mm_destroy>
c0109b6c:	83 c4 10             	add    $0x10,%esp
c0109b6f:	eb 01                	jmp    c0109b72 <copy_mm+0x121>
        goto good_mm;
    }

    int ret = -E_NO_MEM;
    if ((mm = mm_create()) == NULL) {
        goto bad_mm;
c0109b71:	90                   	nop
    exit_mmap(mm);
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
bad_mm:
    return ret;
c0109b72:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0109b75:	c9                   	leave  
c0109b76:	c3                   	ret    

c0109b77 <copy_thread>:

// copy_thread - setup the trapframe on the  process's kernel stack top and
//             - setup the kernel entry point and stack of process
static void
copy_thread(struct proc_struct *proc, uintptr_t esp, struct trapframe *tf) {
c0109b77:	55                   	push   %ebp
c0109b78:	89 e5                	mov    %esp,%ebp
c0109b7a:	57                   	push   %edi
c0109b7b:	56                   	push   %esi
c0109b7c:	53                   	push   %ebx
    proc->tf = (struct trapframe *)(proc->kstack + KSTACKSIZE) - 1;
c0109b7d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b80:	8b 40 0c             	mov    0xc(%eax),%eax
c0109b83:	05 b4 1f 00 00       	add    $0x1fb4,%eax
c0109b88:	89 c2                	mov    %eax,%edx
c0109b8a:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b8d:	89 50 3c             	mov    %edx,0x3c(%eax)
    *(proc->tf) = *tf;
c0109b90:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b93:	8b 40 3c             	mov    0x3c(%eax),%eax
c0109b96:	8b 55 10             	mov    0x10(%ebp),%edx
c0109b99:	89 d3                	mov    %edx,%ebx
c0109b9b:	ba 4c 00 00 00       	mov    $0x4c,%edx
c0109ba0:	8b 0b                	mov    (%ebx),%ecx
c0109ba2:	89 08                	mov    %ecx,(%eax)
c0109ba4:	8b 4c 13 fc          	mov    -0x4(%ebx,%edx,1),%ecx
c0109ba8:	89 4c 10 fc          	mov    %ecx,-0x4(%eax,%edx,1)
c0109bac:	8d 78 04             	lea    0x4(%eax),%edi
c0109baf:	83 e7 fc             	and    $0xfffffffc,%edi
c0109bb2:	29 f8                	sub    %edi,%eax
c0109bb4:	29 c3                	sub    %eax,%ebx
c0109bb6:	01 c2                	add    %eax,%edx
c0109bb8:	83 e2 fc             	and    $0xfffffffc,%edx
c0109bbb:	89 d0                	mov    %edx,%eax
c0109bbd:	c1 e8 02             	shr    $0x2,%eax
c0109bc0:	89 de                	mov    %ebx,%esi
c0109bc2:	89 c1                	mov    %eax,%ecx
c0109bc4:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
    proc->tf->tf_regs.reg_eax = 0;
c0109bc6:	8b 45 08             	mov    0x8(%ebp),%eax
c0109bc9:	8b 40 3c             	mov    0x3c(%eax),%eax
c0109bcc:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    proc->tf->tf_esp = esp;
c0109bd3:	8b 45 08             	mov    0x8(%ebp),%eax
c0109bd6:	8b 40 3c             	mov    0x3c(%eax),%eax
c0109bd9:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109bdc:	89 50 44             	mov    %edx,0x44(%eax)
    proc->tf->tf_eflags |= FL_IF;
c0109bdf:	8b 45 08             	mov    0x8(%ebp),%eax
c0109be2:	8b 40 3c             	mov    0x3c(%eax),%eax
c0109be5:	8b 55 08             	mov    0x8(%ebp),%edx
c0109be8:	8b 52 3c             	mov    0x3c(%edx),%edx
c0109beb:	8b 52 40             	mov    0x40(%edx),%edx
c0109bee:	80 ce 02             	or     $0x2,%dh
c0109bf1:	89 50 40             	mov    %edx,0x40(%eax)

    proc->context.eip = (uintptr_t)forkret;
c0109bf4:	ba 86 97 10 c0       	mov    $0xc0109786,%edx
c0109bf9:	8b 45 08             	mov    0x8(%ebp),%eax
c0109bfc:	89 50 1c             	mov    %edx,0x1c(%eax)
    proc->context.esp = (uintptr_t)(proc->tf);
c0109bff:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c02:	8b 40 3c             	mov    0x3c(%eax),%eax
c0109c05:	89 c2                	mov    %eax,%edx
c0109c07:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c0a:	89 50 20             	mov    %edx,0x20(%eax)
}
c0109c0d:	90                   	nop
c0109c0e:	5b                   	pop    %ebx
c0109c0f:	5e                   	pop    %esi
c0109c10:	5f                   	pop    %edi
c0109c11:	5d                   	pop    %ebp
c0109c12:	c3                   	ret    

c0109c13 <do_fork>:
 * @clone_flags: used to guide how to clone the child process
 * @stack:       the parent's user stack pointer. if stack==0, It means to fork a kernel thread.
 * @tf:          the trapframe info, which will be copied to child process's proc->tf
 */
int
do_fork(uint32_t clone_flags, uintptr_t stack, struct trapframe *tf) {
c0109c13:	55                   	push   %ebp
c0109c14:	89 e5                	mov    %esp,%ebp
c0109c16:	83 ec 38             	sub    $0x38,%esp
    int ret = -E_NO_FREE_PROC;
c0109c19:	c7 45 f4 fb ff ff ff 	movl   $0xfffffffb,-0xc(%ebp)
    struct proc_struct *proc;
    if (nr_process >= MAX_PROCESS) {
c0109c20:	a1 40 20 1a c0       	mov    0xc01a2040,%eax
c0109c25:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c0109c2a:	0f 8f 14 01 00 00    	jg     c0109d44 <do_fork+0x131>
        goto fork_out;
    }
    ret = -E_NO_MEM;
c0109c30:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    *    -------------------
	*    update step 1: set child proc's parent to current process, make sure current process's wait_state is 0
	*    update step 5: insert proc_struct into hash_list && proc_list, set the relation links of process
    */
    //    1. call alloc_proc to allocate a proc_struct
    proc = alloc_proc();
c0109c37:	e8 8a f7 ff ff       	call   c01093c6 <alloc_proc>
c0109c3c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (proc == NULL) {
c0109c3f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0109c43:	0f 84 fe 00 00 00    	je     c0109d47 <do_fork+0x134>
        goto fork_out;
    }
    proc->parent = current;
c0109c49:	8b 15 28 00 1a c0    	mov    0xc01a0028,%edx
c0109c4f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109c52:	89 50 14             	mov    %edx,0x14(%eax)
    //    2. call setup_kstack to allocate a kernel stack for child process
    if (setup_kstack(proc) != 0) {
c0109c55:	83 ec 0c             	sub    $0xc,%esp
c0109c58:	ff 75 f0             	pushl  -0x10(%ebp)
c0109c5b:	e8 c6 fc ff ff       	call   c0109926 <setup_kstack>
c0109c60:	83 c4 10             	add    $0x10,%esp
c0109c63:	85 c0                	test   %eax,%eax
c0109c65:	0f 85 f3 00 00 00    	jne    c0109d5e <do_fork+0x14b>
        goto bad_fork_cleanup_proc;
    }
    //    3. call copy_mm to dup OR share mm according clone_flag
    if (copy_mm(clone_flags, proc) != 0) {
c0109c6b:	83 ec 08             	sub    $0x8,%esp
c0109c6e:	ff 75 f0             	pushl  -0x10(%ebp)
c0109c71:	ff 75 08             	pushl  0x8(%ebp)
c0109c74:	e8 d8 fd ff ff       	call   c0109a51 <copy_mm>
c0109c79:	83 c4 10             	add    $0x10,%esp
c0109c7c:	85 c0                	test   %eax,%eax
c0109c7e:	0f 85 c9 00 00 00    	jne    c0109d4d <do_fork+0x13a>
        goto bad_fork_cleanup_kstack;
    }
    //    4. call copy_thread to setup tf & context in proc_struct
    copy_thread(proc, stack, tf);   // note: if stack == 0, this is a kernel thread
c0109c84:	83 ec 04             	sub    $0x4,%esp
c0109c87:	ff 75 10             	pushl  0x10(%ebp)
c0109c8a:	ff 75 0c             	pushl  0xc(%ebp)
c0109c8d:	ff 75 f0             	pushl  -0x10(%ebp)
c0109c90:	e8 e2 fe ff ff       	call   c0109b77 <copy_thread>
c0109c95:	83 c4 10             	add    $0x10,%esp
    //    5. insert proc_struct into hash_list && proc_list
    // this need disabling interrupt
    bool intr_flag;
    local_intr_save(intr_flag);
c0109c98:	e8 24 f5 ff ff       	call   c01091c1 <__intr_save>
c0109c9d:	89 45 ec             	mov    %eax,-0x14(%ebp)
    {
        proc->pid = get_pid();
c0109ca0:	e8 6b f9 ff ff       	call   c0109610 <get_pid>
c0109ca5:	89 c2                	mov    %eax,%edx
c0109ca7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109caa:	89 50 04             	mov    %edx,0x4(%eax)
        hash_proc(proc);
c0109cad:	83 ec 0c             	sub    $0xc,%esp
c0109cb0:	ff 75 f0             	pushl  -0x10(%ebp)
c0109cb3:	e8 eb fa ff ff       	call   c01097a3 <hash_proc>
c0109cb8:	83 c4 10             	add    $0x10,%esp
        list_add(&proc_list, &(proc->list_link));
c0109cbb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109cbe:	83 c0 58             	add    $0x58,%eax
c0109cc1:	c7 45 e8 9c 21 1a c0 	movl   $0xc01a219c,-0x18(%ebp)
c0109cc8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0109ccb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109cce:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0109cd1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109cd4:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0109cd7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109cda:	8b 40 04             	mov    0x4(%eax),%eax
c0109cdd:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0109ce0:	89 55 d8             	mov    %edx,-0x28(%ebp)
c0109ce3:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0109ce6:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0109ce9:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0109cec:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0109cef:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0109cf2:	89 10                	mov    %edx,(%eax)
c0109cf4:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0109cf7:	8b 10                	mov    (%eax),%edx
c0109cf9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0109cfc:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0109cff:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0109d02:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0109d05:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0109d08:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0109d0b:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0109d0e:	89 10                	mov    %edx,(%eax)
        nr_process++;
c0109d10:	a1 40 20 1a c0       	mov    0xc01a2040,%eax
c0109d15:	83 c0 01             	add    $0x1,%eax
c0109d18:	a3 40 20 1a c0       	mov    %eax,0xc01a2040
    }
    local_intr_restore(intr_flag);
c0109d1d:	83 ec 0c             	sub    $0xc,%esp
c0109d20:	ff 75 ec             	pushl  -0x14(%ebp)
c0109d23:	e8 c3 f4 ff ff       	call   c01091eb <__intr_restore>
c0109d28:	83 c4 10             	add    $0x10,%esp
    //    6. call wakeup_proc to make the new child process RUNNABLE
    wakeup_proc(proc);
c0109d2b:	83 ec 0c             	sub    $0xc,%esp
c0109d2e:	ff 75 f0             	pushl  -0x10(%ebp)
c0109d31:	e8 97 0e 00 00       	call   c010abcd <wakeup_proc>
c0109d36:	83 c4 10             	add    $0x10,%esp
    //    7. set ret vaule using child proc's pid
    ret = proc->pid;
c0109d39:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109d3c:	8b 40 04             	mov    0x4(%eax),%eax
c0109d3f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109d42:	eb 04                	jmp    c0109d48 <do_fork+0x135>
int
do_fork(uint32_t clone_flags, uintptr_t stack, struct trapframe *tf) {
    int ret = -E_NO_FREE_PROC;
    struct proc_struct *proc;
    if (nr_process >= MAX_PROCESS) {
        goto fork_out;
c0109d44:	90                   	nop
c0109d45:	eb 01                	jmp    c0109d48 <do_fork+0x135>
	*    update step 5: insert proc_struct into hash_list && proc_list, set the relation links of process
    */
    //    1. call alloc_proc to allocate a proc_struct
    proc = alloc_proc();
    if (proc == NULL) {
        goto fork_out;
c0109d47:	90                   	nop
    wakeup_proc(proc);
    //    7. set ret vaule using child proc's pid
    ret = proc->pid;
	
fork_out:
    return ret;
c0109d48:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109d4b:	eb 22                	jmp    c0109d6f <do_fork+0x15c>
    if (setup_kstack(proc) != 0) {
        goto bad_fork_cleanup_proc;
    }
    //    3. call copy_mm to dup OR share mm according clone_flag
    if (copy_mm(clone_flags, proc) != 0) {
        goto bad_fork_cleanup_kstack;
c0109d4d:	90                   	nop
	
fork_out:
    return ret;

bad_fork_cleanup_kstack:
    put_kstack(proc);
c0109d4e:	83 ec 0c             	sub    $0xc,%esp
c0109d51:	ff 75 f0             	pushl  -0x10(%ebp)
c0109d54:	e8 0d fc ff ff       	call   c0109966 <put_kstack>
c0109d59:	83 c4 10             	add    $0x10,%esp
c0109d5c:	eb 01                	jmp    c0109d5f <do_fork+0x14c>
        goto fork_out;
    }
    proc->parent = current;
    //    2. call setup_kstack to allocate a kernel stack for child process
    if (setup_kstack(proc) != 0) {
        goto bad_fork_cleanup_proc;
c0109d5e:	90                   	nop
    return ret;

bad_fork_cleanup_kstack:
    put_kstack(proc);
bad_fork_cleanup_proc:
    kfree(proc);
c0109d5f:	83 ec 0c             	sub    $0xc,%esp
c0109d62:	ff 75 f0             	pushl  -0x10(%ebp)
c0109d65:	e8 d4 ba ff ff       	call   c010583e <kfree>
c0109d6a:	83 c4 10             	add    $0x10,%esp
    goto fork_out;
c0109d6d:	eb d9                	jmp    c0109d48 <do_fork+0x135>
}
c0109d6f:	c9                   	leave  
c0109d70:	c3                   	ret    

c0109d71 <do_exit>:
// do_exit - called by sys_exit
//   1. call exit_mmap & put_pgdir & mm_destroy to free the almost all memory space of process
//   2. set process' state as PROC_ZOMBIE, then call wakeup_proc(parent) to ask parent reclaim itself.
//   3. call scheduler to switch to other process
int
do_exit(int error_code) {
c0109d71:	55                   	push   %ebp
c0109d72:	89 e5                	mov    %esp,%ebp
c0109d74:	83 ec 18             	sub    $0x18,%esp
    if (current == idleproc) {
c0109d77:	8b 15 28 00 1a c0    	mov    0xc01a0028,%edx
c0109d7d:	a1 20 00 1a c0       	mov    0xc01a0020,%eax
c0109d82:	39 c2                	cmp    %eax,%edx
c0109d84:	75 17                	jne    c0109d9d <do_exit+0x2c>
        panic("idleproc exit.\n");
c0109d86:	83 ec 04             	sub    $0x4,%esp
c0109d89:	68 04 de 10 c0       	push   $0xc010de04
c0109d8e:	68 d4 01 00 00       	push   $0x1d4
c0109d93:	68 f0 dd 10 c0       	push   $0xc010ddf0
c0109d98:	e8 5b 66 ff ff       	call   c01003f8 <__panic>
    }
    if (current == initproc) {
c0109d9d:	8b 15 28 00 1a c0    	mov    0xc01a0028,%edx
c0109da3:	a1 24 00 1a c0       	mov    0xc01a0024,%eax
c0109da8:	39 c2                	cmp    %eax,%edx
c0109daa:	75 17                	jne    c0109dc3 <do_exit+0x52>
        panic("initproc exit.\n");
c0109dac:	83 ec 04             	sub    $0x4,%esp
c0109daf:	68 14 de 10 c0       	push   $0xc010de14
c0109db4:	68 d7 01 00 00       	push   $0x1d7
c0109db9:	68 f0 dd 10 c0       	push   $0xc010ddf0
c0109dbe:	e8 35 66 ff ff       	call   c01003f8 <__panic>
    }
    
    struct mm_struct *mm = current->mm;
c0109dc3:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c0109dc8:	8b 40 18             	mov    0x18(%eax),%eax
c0109dcb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (mm != NULL) {
c0109dce:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109dd2:	74 56                	je     c0109e2a <do_exit+0xb9>
        lcr3(boot_cr3);
c0109dd4:	a1 94 21 1a c0       	mov    0xc01a2194,%eax
c0109dd9:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0109ddc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109ddf:	0f 22 d8             	mov    %eax,%cr3
        if (mm_count_dec(mm) == 0) {
c0109de2:	83 ec 0c             	sub    $0xc,%esp
c0109de5:	ff 75 f4             	pushl  -0xc(%ebp)
c0109de8:	e8 7d f5 ff ff       	call   c010936a <mm_count_dec>
c0109ded:	83 c4 10             	add    $0x10,%esp
c0109df0:	85 c0                	test   %eax,%eax
c0109df2:	75 2a                	jne    c0109e1e <do_exit+0xad>
            exit_mmap(mm);
c0109df4:	83 ec 0c             	sub    $0xc,%esp
c0109df7:	ff 75 f4             	pushl  -0xc(%ebp)
c0109dfa:	e8 b9 a4 ff ff       	call   c01042b8 <exit_mmap>
c0109dff:	83 c4 10             	add    $0x10,%esp
            put_pgdir(mm);
c0109e02:	83 ec 0c             	sub    $0xc,%esp
c0109e05:	ff 75 f4             	pushl  -0xc(%ebp)
c0109e08:	e8 1b fc ff ff       	call   c0109a28 <put_pgdir>
c0109e0d:	83 c4 10             	add    $0x10,%esp
            mm_destroy(mm);
c0109e10:	83 ec 0c             	sub    $0xc,%esp
c0109e13:	ff 75 f4             	pushl  -0xc(%ebp)
c0109e16:	e8 0f a2 ff ff       	call   c010402a <mm_destroy>
c0109e1b:	83 c4 10             	add    $0x10,%esp
        }
        current->mm = NULL;
c0109e1e:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c0109e23:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    current->state = PROC_ZOMBIE;
c0109e2a:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c0109e2f:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
    current->exit_code = error_code;
c0109e35:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c0109e3a:	8b 55 08             	mov    0x8(%ebp),%edx
c0109e3d:	89 50 68             	mov    %edx,0x68(%eax)
    
    bool intr_flag;
    struct proc_struct *proc;
    local_intr_save(intr_flag);
c0109e40:	e8 7c f3 ff ff       	call   c01091c1 <__intr_save>
c0109e45:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        proc = current->parent;
c0109e48:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c0109e4d:	8b 40 14             	mov    0x14(%eax),%eax
c0109e50:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (proc->wait_state == WT_CHILD) {
c0109e53:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109e56:	8b 40 6c             	mov    0x6c(%eax),%eax
c0109e59:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c0109e5e:	0f 85 9d 00 00 00    	jne    c0109f01 <do_exit+0x190>
            wakeup_proc(proc);
c0109e64:	83 ec 0c             	sub    $0xc,%esp
c0109e67:	ff 75 ec             	pushl  -0x14(%ebp)
c0109e6a:	e8 5e 0d 00 00       	call   c010abcd <wakeup_proc>
c0109e6f:	83 c4 10             	add    $0x10,%esp
        }
        while (current->cptr != NULL) {
c0109e72:	e9 8a 00 00 00       	jmp    c0109f01 <do_exit+0x190>
            proc = current->cptr;
c0109e77:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c0109e7c:	8b 40 70             	mov    0x70(%eax),%eax
c0109e7f:	89 45 ec             	mov    %eax,-0x14(%ebp)
            current->cptr = proc->optr;
c0109e82:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c0109e87:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0109e8a:	8b 52 78             	mov    0x78(%edx),%edx
c0109e8d:	89 50 70             	mov    %edx,0x70(%eax)
    
            proc->yptr = NULL;
c0109e90:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109e93:	c7 40 74 00 00 00 00 	movl   $0x0,0x74(%eax)
            if ((proc->optr = initproc->cptr) != NULL) {
c0109e9a:	a1 24 00 1a c0       	mov    0xc01a0024,%eax
c0109e9f:	8b 50 70             	mov    0x70(%eax),%edx
c0109ea2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109ea5:	89 50 78             	mov    %edx,0x78(%eax)
c0109ea8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109eab:	8b 40 78             	mov    0x78(%eax),%eax
c0109eae:	85 c0                	test   %eax,%eax
c0109eb0:	74 0e                	je     c0109ec0 <do_exit+0x14f>
                initproc->cptr->yptr = proc;
c0109eb2:	a1 24 00 1a c0       	mov    0xc01a0024,%eax
c0109eb7:	8b 40 70             	mov    0x70(%eax),%eax
c0109eba:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0109ebd:	89 50 74             	mov    %edx,0x74(%eax)
            }
            proc->parent = initproc;
c0109ec0:	8b 15 24 00 1a c0    	mov    0xc01a0024,%edx
c0109ec6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109ec9:	89 50 14             	mov    %edx,0x14(%eax)
            initproc->cptr = proc;
c0109ecc:	a1 24 00 1a c0       	mov    0xc01a0024,%eax
c0109ed1:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0109ed4:	89 50 70             	mov    %edx,0x70(%eax)
            if (proc->state == PROC_ZOMBIE) {
c0109ed7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109eda:	8b 00                	mov    (%eax),%eax
c0109edc:	83 f8 03             	cmp    $0x3,%eax
c0109edf:	75 20                	jne    c0109f01 <do_exit+0x190>
                if (initproc->wait_state == WT_CHILD) {
c0109ee1:	a1 24 00 1a c0       	mov    0xc01a0024,%eax
c0109ee6:	8b 40 6c             	mov    0x6c(%eax),%eax
c0109ee9:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c0109eee:	75 11                	jne    c0109f01 <do_exit+0x190>
                    wakeup_proc(initproc);
c0109ef0:	a1 24 00 1a c0       	mov    0xc01a0024,%eax
c0109ef5:	83 ec 0c             	sub    $0xc,%esp
c0109ef8:	50                   	push   %eax
c0109ef9:	e8 cf 0c 00 00       	call   c010abcd <wakeup_proc>
c0109efe:	83 c4 10             	add    $0x10,%esp
    {
        proc = current->parent;
        if (proc->wait_state == WT_CHILD) {
            wakeup_proc(proc);
        }
        while (current->cptr != NULL) {
c0109f01:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c0109f06:	8b 40 70             	mov    0x70(%eax),%eax
c0109f09:	85 c0                	test   %eax,%eax
c0109f0b:	0f 85 66 ff ff ff    	jne    c0109e77 <do_exit+0x106>
                    wakeup_proc(initproc);
                }
            }
        }
    }
    local_intr_restore(intr_flag);
c0109f11:	83 ec 0c             	sub    $0xc,%esp
c0109f14:	ff 75 f0             	pushl  -0x10(%ebp)
c0109f17:	e8 cf f2 ff ff       	call   c01091eb <__intr_restore>
c0109f1c:	83 c4 10             	add    $0x10,%esp
    
    schedule();
c0109f1f:	e8 1e 0d 00 00       	call   c010ac42 <schedule>
    panic("do_exit will not return!! %d.\n", current->pid);
c0109f24:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c0109f29:	8b 40 04             	mov    0x4(%eax),%eax
c0109f2c:	50                   	push   %eax
c0109f2d:	68 24 de 10 c0       	push   $0xc010de24
c0109f32:	68 03 02 00 00       	push   $0x203
c0109f37:	68 f0 dd 10 c0       	push   $0xc010ddf0
c0109f3c:	e8 b7 64 ff ff       	call   c01003f8 <__panic>

c0109f41 <load_icode>:
/* load_icode - load the content of binary program(ELF format) as the new content of current process
 * @binary:  the memory addr of the content of binary program
 * @size:  the size of the content of binary program
 */
static int
load_icode(unsigned char *binary, size_t size) {
c0109f41:	55                   	push   %ebp
c0109f42:	89 e5                	mov    %esp,%ebp
c0109f44:	83 ec 58             	sub    $0x58,%esp
    if (current->mm != NULL) {
c0109f47:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c0109f4c:	8b 40 18             	mov    0x18(%eax),%eax
c0109f4f:	85 c0                	test   %eax,%eax
c0109f51:	74 17                	je     c0109f6a <load_icode+0x29>
        panic("load_icode: current->mm must be empty.\n");
c0109f53:	83 ec 04             	sub    $0x4,%esp
c0109f56:	68 44 de 10 c0       	push   $0xc010de44
c0109f5b:	68 0d 02 00 00       	push   $0x20d
c0109f60:	68 f0 dd 10 c0       	push   $0xc010ddf0
c0109f65:	e8 8e 64 ff ff       	call   c01003f8 <__panic>
    }

    int ret = -E_NO_MEM;
c0109f6a:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    struct mm_struct *mm;
    //(1) create a new mm for current process
    if ((mm = mm_create()) == NULL) {
c0109f71:	e8 8a 9d ff ff       	call   c0103d00 <mm_create>
c0109f76:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0109f79:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c0109f7d:	0f 84 42 05 00 00    	je     c010a4c5 <load_icode+0x584>
        goto bad_mm;
    }
    //(2) create a new PDT, and mm->pgdir= kernel virtual addr of PDT
    if (setup_pgdir(mm) != 0) {
c0109f83:	83 ec 0c             	sub    $0xc,%esp
c0109f86:	ff 75 d0             	pushl  -0x30(%ebp)
c0109f89:	e8 01 fa ff ff       	call   c010998f <setup_pgdir>
c0109f8e:	83 c4 10             	add    $0x10,%esp
c0109f91:	85 c0                	test   %eax,%eax
c0109f93:	0f 85 1b 05 00 00    	jne    c010a4b4 <load_icode+0x573>
        goto bad_pgdir_cleanup_mm;
    }
    //(3) copy TEXT/DATA section, build BSS parts in binary to memory space of process
    struct Page *page;
    //(3.1) get the file header of the bianry program (ELF format)
    struct elfhdr *elf = (struct elfhdr *)binary;
c0109f99:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f9c:	89 45 cc             	mov    %eax,-0x34(%ebp)
    //(3.2) get the entry of the program section headers of the bianry program (ELF format)
    struct proghdr *ph = (struct proghdr *)(binary + elf->e_phoff);
c0109f9f:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0109fa2:	8b 50 1c             	mov    0x1c(%eax),%edx
c0109fa5:	8b 45 08             	mov    0x8(%ebp),%eax
c0109fa8:	01 d0                	add    %edx,%eax
c0109faa:	89 45 ec             	mov    %eax,-0x14(%ebp)
    //(3.3) This program is valid?
    if (elf->e_magic != ELF_MAGIC) {
c0109fad:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0109fb0:	8b 00                	mov    (%eax),%eax
c0109fb2:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
c0109fb7:	74 0c                	je     c0109fc5 <load_icode+0x84>
        ret = -E_INVAL_ELF;
c0109fb9:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
        goto bad_elf_cleanup_pgdir;
c0109fc0:	e9 df 04 00 00       	jmp    c010a4a4 <load_icode+0x563>
    }

    uint32_t vm_flags, perm;
    struct proghdr *ph_end = ph + elf->e_phnum;
c0109fc5:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0109fc8:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c0109fcc:	0f b7 c0             	movzwl %ax,%eax
c0109fcf:	c1 e0 05             	shl    $0x5,%eax
c0109fd2:	89 c2                	mov    %eax,%edx
c0109fd4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109fd7:	01 d0                	add    %edx,%eax
c0109fd9:	89 45 c8             	mov    %eax,-0x38(%ebp)
    for (; ph < ph_end; ph ++) {
c0109fdc:	e9 e0 02 00 00       	jmp    c010a2c1 <load_icode+0x380>
    //(3.4) find every program section headers
        if (ph->p_type != ELF_PT_LOAD) {
c0109fe1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109fe4:	8b 00                	mov    (%eax),%eax
c0109fe6:	83 f8 01             	cmp    $0x1,%eax
c0109fe9:	0f 85 c7 02 00 00    	jne    c010a2b6 <load_icode+0x375>
            continue ;
        }
        if (ph->p_filesz > ph->p_memsz) {
c0109fef:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109ff2:	8b 50 10             	mov    0x10(%eax),%edx
c0109ff5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109ff8:	8b 40 14             	mov    0x14(%eax),%eax
c0109ffb:	39 c2                	cmp    %eax,%edx
c0109ffd:	76 0c                	jbe    c010a00b <load_icode+0xca>
            ret = -E_INVAL_ELF;
c0109fff:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
            goto bad_cleanup_mmap;
c010a006:	e9 8b 04 00 00       	jmp    c010a496 <load_icode+0x555>
        }
        if (ph->p_filesz == 0) {
c010a00b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a00e:	8b 40 10             	mov    0x10(%eax),%eax
c010a011:	85 c0                	test   %eax,%eax
c010a013:	0f 84 a0 02 00 00    	je     c010a2b9 <load_icode+0x378>
            continue ;
        }
    //(3.5) call mm_map fun to setup the new vma ( ph->p_va, ph->p_memsz)
        vm_flags = 0, perm = PTE_U;
c010a019:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c010a020:	c7 45 e4 04 00 00 00 	movl   $0x4,-0x1c(%ebp)
        if (ph->p_flags & ELF_PF_X) vm_flags |= VM_EXEC;
c010a027:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a02a:	8b 40 18             	mov    0x18(%eax),%eax
c010a02d:	83 e0 01             	and    $0x1,%eax
c010a030:	85 c0                	test   %eax,%eax
c010a032:	74 04                	je     c010a038 <load_icode+0xf7>
c010a034:	83 4d e8 04          	orl    $0x4,-0x18(%ebp)
        if (ph->p_flags & ELF_PF_W) vm_flags |= VM_WRITE;
c010a038:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a03b:	8b 40 18             	mov    0x18(%eax),%eax
c010a03e:	83 e0 02             	and    $0x2,%eax
c010a041:	85 c0                	test   %eax,%eax
c010a043:	74 04                	je     c010a049 <load_icode+0x108>
c010a045:	83 4d e8 02          	orl    $0x2,-0x18(%ebp)
        if (ph->p_flags & ELF_PF_R) vm_flags |= VM_READ;
c010a049:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a04c:	8b 40 18             	mov    0x18(%eax),%eax
c010a04f:	83 e0 04             	and    $0x4,%eax
c010a052:	85 c0                	test   %eax,%eax
c010a054:	74 04                	je     c010a05a <load_icode+0x119>
c010a056:	83 4d e8 01          	orl    $0x1,-0x18(%ebp)
        if (vm_flags & VM_WRITE) perm |= PTE_W;
c010a05a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a05d:	83 e0 02             	and    $0x2,%eax
c010a060:	85 c0                	test   %eax,%eax
c010a062:	74 04                	je     c010a068 <load_icode+0x127>
c010a064:	83 4d e4 02          	orl    $0x2,-0x1c(%ebp)
        if ((ret = mm_map(mm, ph->p_va, ph->p_memsz, vm_flags, NULL)) != 0) {
c010a068:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a06b:	8b 50 14             	mov    0x14(%eax),%edx
c010a06e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a071:	8b 40 08             	mov    0x8(%eax),%eax
c010a074:	83 ec 0c             	sub    $0xc,%esp
c010a077:	6a 00                	push   $0x0
c010a079:	ff 75 e8             	pushl  -0x18(%ebp)
c010a07c:	52                   	push   %edx
c010a07d:	50                   	push   %eax
c010a07e:	ff 75 d0             	pushl  -0x30(%ebp)
c010a081:	e8 43 a0 ff ff       	call   c01040c9 <mm_map>
c010a086:	83 c4 20             	add    $0x20,%esp
c010a089:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a08c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a090:	0f 85 f6 03 00 00    	jne    c010a48c <load_icode+0x54b>
            goto bad_cleanup_mmap;
        }
        unsigned char *from = binary + ph->p_offset;
c010a096:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a099:	8b 50 04             	mov    0x4(%eax),%edx
c010a09c:	8b 45 08             	mov    0x8(%ebp),%eax
c010a09f:	01 d0                	add    %edx,%eax
c010a0a1:	89 45 e0             	mov    %eax,-0x20(%ebp)
        size_t off, size;
        uintptr_t start = ph->p_va, end, la = ROUNDDOWN(start, PGSIZE);
c010a0a4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a0a7:	8b 40 08             	mov    0x8(%eax),%eax
c010a0aa:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010a0ad:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010a0b0:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c010a0b3:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010a0b6:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010a0bb:	89 45 d4             	mov    %eax,-0x2c(%ebp)

        ret = -E_NO_MEM;
c010a0be:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
        end = ph->p_va + ph->p_filesz;
c010a0c5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a0c8:	8b 50 08             	mov    0x8(%eax),%edx
c010a0cb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a0ce:	8b 40 10             	mov    0x10(%eax),%eax
c010a0d1:	01 d0                	add    %edx,%eax
c010a0d3:	89 45 c0             	mov    %eax,-0x40(%ebp)
     //(3.6.1) copy TEXT/DATA section of bianry program
        while (start < end) {
c010a0d6:	e9 84 00 00 00       	jmp    c010a15f <load_icode+0x21e>
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
c010a0db:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010a0de:	8b 40 0c             	mov    0xc(%eax),%eax
c010a0e1:	83 ec 04             	sub    $0x4,%esp
c010a0e4:	ff 75 e4             	pushl  -0x1c(%ebp)
c010a0e7:	ff 75 d4             	pushl  -0x2c(%ebp)
c010a0ea:	50                   	push   %eax
c010a0eb:	e8 68 e3 ff ff       	call   c0108458 <pgdir_alloc_page>
c010a0f0:	83 c4 10             	add    $0x10,%esp
c010a0f3:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010a0f6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010a0fa:	0f 84 8f 03 00 00    	je     c010a48f <load_icode+0x54e>
                goto bad_cleanup_mmap;
            }
            off = start - la, size = PGSIZE - off, la += PGSIZE;
c010a100:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010a103:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c010a106:	89 45 bc             	mov    %eax,-0x44(%ebp)
c010a109:	b8 00 10 00 00       	mov    $0x1000,%eax
c010a10e:	2b 45 bc             	sub    -0x44(%ebp),%eax
c010a111:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010a114:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
            if (end < la) {
c010a11b:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010a11e:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010a121:	73 09                	jae    c010a12c <load_icode+0x1eb>
                size -= la - end;
c010a123:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010a126:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c010a129:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memcpy(page2kva(page) + off, from, size);
c010a12c:	83 ec 0c             	sub    $0xc,%esp
c010a12f:	ff 75 f0             	pushl  -0x10(%ebp)
c010a132:	e8 95 f1 ff ff       	call   c01092cc <page2kva>
c010a137:	83 c4 10             	add    $0x10,%esp
c010a13a:	89 c2                	mov    %eax,%edx
c010a13c:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010a13f:	01 d0                	add    %edx,%eax
c010a141:	83 ec 04             	sub    $0x4,%esp
c010a144:	ff 75 dc             	pushl  -0x24(%ebp)
c010a147:	ff 75 e0             	pushl  -0x20(%ebp)
c010a14a:	50                   	push   %eax
c010a14b:	e8 ba 11 00 00       	call   c010b30a <memcpy>
c010a150:	83 c4 10             	add    $0x10,%esp
            start += size, from += size;
c010a153:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a156:	01 45 d8             	add    %eax,-0x28(%ebp)
c010a159:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a15c:	01 45 e0             	add    %eax,-0x20(%ebp)
        ret = -E_NO_MEM;

     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
        end = ph->p_va + ph->p_filesz;
     //(3.6.1) copy TEXT/DATA section of bianry program
        while (start < end) {
c010a15f:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010a162:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010a165:	0f 82 70 ff ff ff    	jb     c010a0db <load_icode+0x19a>
            memcpy(page2kva(page) + off, from, size);
            start += size, from += size;
        }

      //(3.6.2) build BSS section of binary program
        end = ph->p_va + ph->p_memsz;
c010a16b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a16e:	8b 50 08             	mov    0x8(%eax),%edx
c010a171:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a174:	8b 40 14             	mov    0x14(%eax),%eax
c010a177:	01 d0                	add    %edx,%eax
c010a179:	89 45 c0             	mov    %eax,-0x40(%ebp)
        if (start < la) {
c010a17c:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010a17f:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010a182:	0f 83 20 01 00 00    	jae    c010a2a8 <load_icode+0x367>
            /* ph->p_memsz == ph->p_filesz */
            if (start == end) {
c010a188:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010a18b:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010a18e:	0f 84 28 01 00 00    	je     c010a2bc <load_icode+0x37b>
                continue ;
            }
            off = start + PGSIZE - la, size = PGSIZE - off;
c010a194:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010a197:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c010a19a:	05 00 10 00 00       	add    $0x1000,%eax
c010a19f:	89 45 bc             	mov    %eax,-0x44(%ebp)
c010a1a2:	b8 00 10 00 00       	mov    $0x1000,%eax
c010a1a7:	2b 45 bc             	sub    -0x44(%ebp),%eax
c010a1aa:	89 45 dc             	mov    %eax,-0x24(%ebp)
            if (end < la) {
c010a1ad:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010a1b0:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010a1b3:	73 09                	jae    c010a1be <load_icode+0x27d>
                size -= la - end;
c010a1b5:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010a1b8:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c010a1bb:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
c010a1be:	83 ec 0c             	sub    $0xc,%esp
c010a1c1:	ff 75 f0             	pushl  -0x10(%ebp)
c010a1c4:	e8 03 f1 ff ff       	call   c01092cc <page2kva>
c010a1c9:	83 c4 10             	add    $0x10,%esp
c010a1cc:	89 c2                	mov    %eax,%edx
c010a1ce:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010a1d1:	01 d0                	add    %edx,%eax
c010a1d3:	83 ec 04             	sub    $0x4,%esp
c010a1d6:	ff 75 dc             	pushl  -0x24(%ebp)
c010a1d9:	6a 00                	push   $0x0
c010a1db:	50                   	push   %eax
c010a1dc:	e8 46 10 00 00       	call   c010b227 <memset>
c010a1e1:	83 c4 10             	add    $0x10,%esp
            start += size;
c010a1e4:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a1e7:	01 45 d8             	add    %eax,-0x28(%ebp)
            assert((end < la && start == end) || (end >= la && start == la));
c010a1ea:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010a1ed:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010a1f0:	73 0c                	jae    c010a1fe <load_icode+0x2bd>
c010a1f2:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010a1f5:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010a1f8:	0f 84 aa 00 00 00    	je     c010a2a8 <load_icode+0x367>
c010a1fe:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010a201:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010a204:	72 0c                	jb     c010a212 <load_icode+0x2d1>
c010a206:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010a209:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010a20c:	0f 84 96 00 00 00    	je     c010a2a8 <load_icode+0x367>
c010a212:	68 6c de 10 c0       	push   $0xc010de6c
c010a217:	68 a5 de 10 c0       	push   $0xc010dea5
c010a21c:	68 5f 02 00 00       	push   $0x25f
c010a221:	68 f0 dd 10 c0       	push   $0xc010ddf0
c010a226:	e8 cd 61 ff ff       	call   c01003f8 <__panic>
        }
        while (start < end) {
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
c010a22b:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010a22e:	8b 40 0c             	mov    0xc(%eax),%eax
c010a231:	83 ec 04             	sub    $0x4,%esp
c010a234:	ff 75 e4             	pushl  -0x1c(%ebp)
c010a237:	ff 75 d4             	pushl  -0x2c(%ebp)
c010a23a:	50                   	push   %eax
c010a23b:	e8 18 e2 ff ff       	call   c0108458 <pgdir_alloc_page>
c010a240:	83 c4 10             	add    $0x10,%esp
c010a243:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010a246:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010a24a:	0f 84 42 02 00 00    	je     c010a492 <load_icode+0x551>
                goto bad_cleanup_mmap;
            }
            off = start - la, size = PGSIZE - off, la += PGSIZE;
c010a250:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010a253:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c010a256:	89 45 bc             	mov    %eax,-0x44(%ebp)
c010a259:	b8 00 10 00 00       	mov    $0x1000,%eax
c010a25e:	2b 45 bc             	sub    -0x44(%ebp),%eax
c010a261:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010a264:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
            if (end < la) {
c010a26b:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010a26e:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010a271:	73 09                	jae    c010a27c <load_icode+0x33b>
                size -= la - end;
c010a273:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010a276:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c010a279:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
c010a27c:	83 ec 0c             	sub    $0xc,%esp
c010a27f:	ff 75 f0             	pushl  -0x10(%ebp)
c010a282:	e8 45 f0 ff ff       	call   c01092cc <page2kva>
c010a287:	83 c4 10             	add    $0x10,%esp
c010a28a:	89 c2                	mov    %eax,%edx
c010a28c:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010a28f:	01 d0                	add    %edx,%eax
c010a291:	83 ec 04             	sub    $0x4,%esp
c010a294:	ff 75 dc             	pushl  -0x24(%ebp)
c010a297:	6a 00                	push   $0x0
c010a299:	50                   	push   %eax
c010a29a:	e8 88 0f 00 00       	call   c010b227 <memset>
c010a29f:	83 c4 10             	add    $0x10,%esp
            start += size;
c010a2a2:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a2a5:	01 45 d8             	add    %eax,-0x28(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
            start += size;
            assert((end < la && start == end) || (end >= la && start == la));
        }
        while (start < end) {
c010a2a8:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010a2ab:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010a2ae:	0f 82 77 ff ff ff    	jb     c010a22b <load_icode+0x2ea>
c010a2b4:	eb 07                	jmp    c010a2bd <load_icode+0x37c>
    uint32_t vm_flags, perm;
    struct proghdr *ph_end = ph + elf->e_phnum;
    for (; ph < ph_end; ph ++) {
    //(3.4) find every program section headers
        if (ph->p_type != ELF_PT_LOAD) {
            continue ;
c010a2b6:	90                   	nop
c010a2b7:	eb 04                	jmp    c010a2bd <load_icode+0x37c>
        if (ph->p_filesz > ph->p_memsz) {
            ret = -E_INVAL_ELF;
            goto bad_cleanup_mmap;
        }
        if (ph->p_filesz == 0) {
            continue ;
c010a2b9:	90                   	nop
c010a2ba:	eb 01                	jmp    c010a2bd <load_icode+0x37c>
      //(3.6.2) build BSS section of binary program
        end = ph->p_va + ph->p_memsz;
        if (start < la) {
            /* ph->p_memsz == ph->p_filesz */
            if (start == end) {
                continue ;
c010a2bc:	90                   	nop
        goto bad_elf_cleanup_pgdir;
    }

    uint32_t vm_flags, perm;
    struct proghdr *ph_end = ph + elf->e_phnum;
    for (; ph < ph_end; ph ++) {
c010a2bd:	83 45 ec 20          	addl   $0x20,-0x14(%ebp)
c010a2c1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a2c4:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c010a2c7:	0f 82 14 fd ff ff    	jb     c0109fe1 <load_icode+0xa0>
            memset(page2kva(page) + off, 0, size);
            start += size;
        }
    }
    //(4) build user stack memory
    vm_flags = VM_READ | VM_WRITE | VM_STACK;
c010a2cd:	c7 45 e8 0b 00 00 00 	movl   $0xb,-0x18(%ebp)
    if ((ret = mm_map(mm, USTACKTOP - USTACKSIZE, USTACKSIZE, vm_flags, NULL)) != 0) {
c010a2d4:	83 ec 0c             	sub    $0xc,%esp
c010a2d7:	6a 00                	push   $0x0
c010a2d9:	ff 75 e8             	pushl  -0x18(%ebp)
c010a2dc:	68 00 00 10 00       	push   $0x100000
c010a2e1:	68 00 00 f0 af       	push   $0xaff00000
c010a2e6:	ff 75 d0             	pushl  -0x30(%ebp)
c010a2e9:	e8 db 9d ff ff       	call   c01040c9 <mm_map>
c010a2ee:	83 c4 20             	add    $0x20,%esp
c010a2f1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a2f4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a2f8:	0f 85 97 01 00 00    	jne    c010a495 <load_icode+0x554>
        goto bad_cleanup_mmap;
    }
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-PGSIZE , PTE_USER) != NULL);
c010a2fe:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010a301:	8b 40 0c             	mov    0xc(%eax),%eax
c010a304:	83 ec 04             	sub    $0x4,%esp
c010a307:	6a 07                	push   $0x7
c010a309:	68 00 f0 ff af       	push   $0xaffff000
c010a30e:	50                   	push   %eax
c010a30f:	e8 44 e1 ff ff       	call   c0108458 <pgdir_alloc_page>
c010a314:	83 c4 10             	add    $0x10,%esp
c010a317:	85 c0                	test   %eax,%eax
c010a319:	75 19                	jne    c010a334 <load_icode+0x3f3>
c010a31b:	68 bc de 10 c0       	push   $0xc010debc
c010a320:	68 a5 de 10 c0       	push   $0xc010dea5
c010a325:	68 72 02 00 00       	push   $0x272
c010a32a:	68 f0 dd 10 c0       	push   $0xc010ddf0
c010a32f:	e8 c4 60 ff ff       	call   c01003f8 <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-2*PGSIZE , PTE_USER) != NULL);
c010a334:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010a337:	8b 40 0c             	mov    0xc(%eax),%eax
c010a33a:	83 ec 04             	sub    $0x4,%esp
c010a33d:	6a 07                	push   $0x7
c010a33f:	68 00 e0 ff af       	push   $0xafffe000
c010a344:	50                   	push   %eax
c010a345:	e8 0e e1 ff ff       	call   c0108458 <pgdir_alloc_page>
c010a34a:	83 c4 10             	add    $0x10,%esp
c010a34d:	85 c0                	test   %eax,%eax
c010a34f:	75 19                	jne    c010a36a <load_icode+0x429>
c010a351:	68 00 df 10 c0       	push   $0xc010df00
c010a356:	68 a5 de 10 c0       	push   $0xc010dea5
c010a35b:	68 73 02 00 00       	push   $0x273
c010a360:	68 f0 dd 10 c0       	push   $0xc010ddf0
c010a365:	e8 8e 60 ff ff       	call   c01003f8 <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-3*PGSIZE , PTE_USER) != NULL);
c010a36a:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010a36d:	8b 40 0c             	mov    0xc(%eax),%eax
c010a370:	83 ec 04             	sub    $0x4,%esp
c010a373:	6a 07                	push   $0x7
c010a375:	68 00 d0 ff af       	push   $0xafffd000
c010a37a:	50                   	push   %eax
c010a37b:	e8 d8 e0 ff ff       	call   c0108458 <pgdir_alloc_page>
c010a380:	83 c4 10             	add    $0x10,%esp
c010a383:	85 c0                	test   %eax,%eax
c010a385:	75 19                	jne    c010a3a0 <load_icode+0x45f>
c010a387:	68 44 df 10 c0       	push   $0xc010df44
c010a38c:	68 a5 de 10 c0       	push   $0xc010dea5
c010a391:	68 74 02 00 00       	push   $0x274
c010a396:	68 f0 dd 10 c0       	push   $0xc010ddf0
c010a39b:	e8 58 60 ff ff       	call   c01003f8 <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-4*PGSIZE , PTE_USER) != NULL);
c010a3a0:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010a3a3:	8b 40 0c             	mov    0xc(%eax),%eax
c010a3a6:	83 ec 04             	sub    $0x4,%esp
c010a3a9:	6a 07                	push   $0x7
c010a3ab:	68 00 c0 ff af       	push   $0xafffc000
c010a3b0:	50                   	push   %eax
c010a3b1:	e8 a2 e0 ff ff       	call   c0108458 <pgdir_alloc_page>
c010a3b6:	83 c4 10             	add    $0x10,%esp
c010a3b9:	85 c0                	test   %eax,%eax
c010a3bb:	75 19                	jne    c010a3d6 <load_icode+0x495>
c010a3bd:	68 88 df 10 c0       	push   $0xc010df88
c010a3c2:	68 a5 de 10 c0       	push   $0xc010dea5
c010a3c7:	68 75 02 00 00       	push   $0x275
c010a3cc:	68 f0 dd 10 c0       	push   $0xc010ddf0
c010a3d1:	e8 22 60 ff ff       	call   c01003f8 <__panic>
    
    //(5) set current process's mm, sr3, and set CR3 reg = physical addr of Page Directory
    mm_count_inc(mm);
c010a3d6:	83 ec 0c             	sub    $0xc,%esp
c010a3d9:	ff 75 d0             	pushl  -0x30(%ebp)
c010a3dc:	e8 6f ef ff ff       	call   c0109350 <mm_count_inc>
c010a3e1:	83 c4 10             	add    $0x10,%esp
    current->mm = mm;
c010a3e4:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c010a3e9:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010a3ec:	89 50 18             	mov    %edx,0x18(%eax)
    current->cr3 = PADDR(mm->pgdir);
c010a3ef:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c010a3f4:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010a3f7:	8b 52 0c             	mov    0xc(%edx),%edx
c010a3fa:	89 55 b8             	mov    %edx,-0x48(%ebp)
c010a3fd:	81 7d b8 ff ff ff bf 	cmpl   $0xbfffffff,-0x48(%ebp)
c010a404:	77 17                	ja     c010a41d <load_icode+0x4dc>
c010a406:	ff 75 b8             	pushl  -0x48(%ebp)
c010a409:	68 cc dd 10 c0       	push   $0xc010ddcc
c010a40e:	68 7a 02 00 00       	push   $0x27a
c010a413:	68 f0 dd 10 c0       	push   $0xc010ddf0
c010a418:	e8 db 5f ff ff       	call   c01003f8 <__panic>
c010a41d:	8b 55 b8             	mov    -0x48(%ebp),%edx
c010a420:	81 c2 00 00 00 40    	add    $0x40000000,%edx
c010a426:	89 50 40             	mov    %edx,0x40(%eax)
    lcr3(PADDR(mm->pgdir));
c010a429:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010a42c:	8b 40 0c             	mov    0xc(%eax),%eax
c010a42f:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c010a432:	81 7d b4 ff ff ff bf 	cmpl   $0xbfffffff,-0x4c(%ebp)
c010a439:	77 17                	ja     c010a452 <load_icode+0x511>
c010a43b:	ff 75 b4             	pushl  -0x4c(%ebp)
c010a43e:	68 cc dd 10 c0       	push   $0xc010ddcc
c010a443:	68 7b 02 00 00       	push   $0x27b
c010a448:	68 f0 dd 10 c0       	push   $0xc010ddf0
c010a44d:	e8 a6 5f ff ff       	call   c01003f8 <__panic>
c010a452:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010a455:	05 00 00 00 40       	add    $0x40000000,%eax
c010a45a:	89 45 ac             	mov    %eax,-0x54(%ebp)
c010a45d:	8b 45 ac             	mov    -0x54(%ebp),%eax
c010a460:	0f 22 d8             	mov    %eax,%cr3

    //(6) setup trapframe for user environment
    struct trapframe *tf = current->tf;
c010a463:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c010a468:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a46b:	89 45 b0             	mov    %eax,-0x50(%ebp)
    memset(tf, 0, sizeof(struct trapframe));
c010a46e:	83 ec 04             	sub    $0x4,%esp
c010a471:	6a 4c                	push   $0x4c
c010a473:	6a 00                	push   $0x0
c010a475:	ff 75 b0             	pushl  -0x50(%ebp)
c010a478:	e8 aa 0d 00 00       	call   c010b227 <memset>
c010a47d:	83 c4 10             	add    $0x10,%esp
     *          tf_ds=tf_es=tf_ss should be USER_DS segment
     *          tf_esp should be the top addr of user stack (USTACKTOP)
     *          tf_eip should be the entry point of this binary program (elf->e_entry)
     *          tf_eflags should be set to enable computer to produce Interrupt
     */
    ret = 0;
c010a480:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
out:
    return ret;
c010a487:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a48a:	eb 3c                	jmp    c010a4c8 <load_icode+0x587>
        if (ph->p_flags & ELF_PF_X) vm_flags |= VM_EXEC;
        if (ph->p_flags & ELF_PF_W) vm_flags |= VM_WRITE;
        if (ph->p_flags & ELF_PF_R) vm_flags |= VM_READ;
        if (vm_flags & VM_WRITE) perm |= PTE_W;
        if ((ret = mm_map(mm, ph->p_va, ph->p_memsz, vm_flags, NULL)) != 0) {
            goto bad_cleanup_mmap;
c010a48c:	90                   	nop
c010a48d:	eb 07                	jmp    c010a496 <load_icode+0x555>
     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
        end = ph->p_va + ph->p_filesz;
     //(3.6.1) copy TEXT/DATA section of bianry program
        while (start < end) {
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
                goto bad_cleanup_mmap;
c010a48f:	90                   	nop
c010a490:	eb 04                	jmp    c010a496 <load_icode+0x555>
            start += size;
            assert((end < la && start == end) || (end >= la && start == la));
        }
        while (start < end) {
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
                goto bad_cleanup_mmap;
c010a492:	90                   	nop
c010a493:	eb 01                	jmp    c010a496 <load_icode+0x555>
        }
    }
    //(4) build user stack memory
    vm_flags = VM_READ | VM_WRITE | VM_STACK;
    if ((ret = mm_map(mm, USTACKTOP - USTACKSIZE, USTACKSIZE, vm_flags, NULL)) != 0) {
        goto bad_cleanup_mmap;
c010a495:	90                   	nop
     */
    ret = 0;
out:
    return ret;
bad_cleanup_mmap:
    exit_mmap(mm);
c010a496:	83 ec 0c             	sub    $0xc,%esp
c010a499:	ff 75 d0             	pushl  -0x30(%ebp)
c010a49c:	e8 17 9e ff ff       	call   c01042b8 <exit_mmap>
c010a4a1:	83 c4 10             	add    $0x10,%esp
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
c010a4a4:	83 ec 0c             	sub    $0xc,%esp
c010a4a7:	ff 75 d0             	pushl  -0x30(%ebp)
c010a4aa:	e8 79 f5 ff ff       	call   c0109a28 <put_pgdir>
c010a4af:	83 c4 10             	add    $0x10,%esp
c010a4b2:	eb 01                	jmp    c010a4b5 <load_icode+0x574>
    if ((mm = mm_create()) == NULL) {
        goto bad_mm;
    }
    //(2) create a new PDT, and mm->pgdir= kernel virtual addr of PDT
    if (setup_pgdir(mm) != 0) {
        goto bad_pgdir_cleanup_mm;
c010a4b4:	90                   	nop
bad_cleanup_mmap:
    exit_mmap(mm);
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
c010a4b5:	83 ec 0c             	sub    $0xc,%esp
c010a4b8:	ff 75 d0             	pushl  -0x30(%ebp)
c010a4bb:	e8 6a 9b ff ff       	call   c010402a <mm_destroy>
c010a4c0:	83 c4 10             	add    $0x10,%esp
bad_mm:
    goto out;
c010a4c3:	eb c2                	jmp    c010a487 <load_icode+0x546>

    int ret = -E_NO_MEM;
    struct mm_struct *mm;
    //(1) create a new mm for current process
    if ((mm = mm_create()) == NULL) {
        goto bad_mm;
c010a4c5:	90                   	nop
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
bad_mm:
    goto out;
c010a4c6:	eb bf                	jmp    c010a487 <load_icode+0x546>
}
c010a4c8:	c9                   	leave  
c010a4c9:	c3                   	ret    

c010a4ca <do_execve>:

// do_execve - call exit_mmap(mm)&put_pgdir(mm) to reclaim memory space of current process
//           - call load_icode to setup new memory space accroding binary prog.
int
do_execve(const char *name, size_t len, unsigned char *binary, size_t size) {
c010a4ca:	55                   	push   %ebp
c010a4cb:	89 e5                	mov    %esp,%ebp
c010a4cd:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = current->mm;
c010a4d0:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c010a4d5:	8b 40 18             	mov    0x18(%eax),%eax
c010a4d8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!user_mem_check(mm, (uintptr_t)name, len, 0)) {
c010a4db:	8b 45 08             	mov    0x8(%ebp),%eax
c010a4de:	6a 00                	push   $0x0
c010a4e0:	ff 75 0c             	pushl  0xc(%ebp)
c010a4e3:	50                   	push   %eax
c010a4e4:	ff 75 f4             	pushl  -0xc(%ebp)
c010a4e7:	e8 5d a7 ff ff       	call   c0104c49 <user_mem_check>
c010a4ec:	83 c4 10             	add    $0x10,%esp
c010a4ef:	85 c0                	test   %eax,%eax
c010a4f1:	75 0a                	jne    c010a4fd <do_execve+0x33>
        return -E_INVAL;
c010a4f3:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010a4f8:	e9 ed 00 00 00       	jmp    c010a5ea <do_execve+0x120>
    }
    if (len > PROC_NAME_LEN) {
c010a4fd:	83 7d 0c 0f          	cmpl   $0xf,0xc(%ebp)
c010a501:	76 07                	jbe    c010a50a <do_execve+0x40>
        len = PROC_NAME_LEN;
c010a503:	c7 45 0c 0f 00 00 00 	movl   $0xf,0xc(%ebp)
    }

    char local_name[PROC_NAME_LEN + 1];
    memset(local_name, 0, sizeof(local_name));
c010a50a:	83 ec 04             	sub    $0x4,%esp
c010a50d:	6a 10                	push   $0x10
c010a50f:	6a 00                	push   $0x0
c010a511:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010a514:	50                   	push   %eax
c010a515:	e8 0d 0d 00 00       	call   c010b227 <memset>
c010a51a:	83 c4 10             	add    $0x10,%esp
    memcpy(local_name, name, len);
c010a51d:	83 ec 04             	sub    $0x4,%esp
c010a520:	ff 75 0c             	pushl  0xc(%ebp)
c010a523:	ff 75 08             	pushl  0x8(%ebp)
c010a526:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010a529:	50                   	push   %eax
c010a52a:	e8 db 0d 00 00       	call   c010b30a <memcpy>
c010a52f:	83 c4 10             	add    $0x10,%esp

    if (mm != NULL) {
c010a532:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a536:	74 56                	je     c010a58e <do_execve+0xc4>
        lcr3(boot_cr3);
c010a538:	a1 94 21 1a c0       	mov    0xc01a2194,%eax
c010a53d:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010a540:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a543:	0f 22 d8             	mov    %eax,%cr3
        if (mm_count_dec(mm) == 0) {
c010a546:	83 ec 0c             	sub    $0xc,%esp
c010a549:	ff 75 f4             	pushl  -0xc(%ebp)
c010a54c:	e8 19 ee ff ff       	call   c010936a <mm_count_dec>
c010a551:	83 c4 10             	add    $0x10,%esp
c010a554:	85 c0                	test   %eax,%eax
c010a556:	75 2a                	jne    c010a582 <do_execve+0xb8>
            exit_mmap(mm);
c010a558:	83 ec 0c             	sub    $0xc,%esp
c010a55b:	ff 75 f4             	pushl  -0xc(%ebp)
c010a55e:	e8 55 9d ff ff       	call   c01042b8 <exit_mmap>
c010a563:	83 c4 10             	add    $0x10,%esp
            put_pgdir(mm);
c010a566:	83 ec 0c             	sub    $0xc,%esp
c010a569:	ff 75 f4             	pushl  -0xc(%ebp)
c010a56c:	e8 b7 f4 ff ff       	call   c0109a28 <put_pgdir>
c010a571:	83 c4 10             	add    $0x10,%esp
            mm_destroy(mm);
c010a574:	83 ec 0c             	sub    $0xc,%esp
c010a577:	ff 75 f4             	pushl  -0xc(%ebp)
c010a57a:	e8 ab 9a ff ff       	call   c010402a <mm_destroy>
c010a57f:	83 c4 10             	add    $0x10,%esp
        }
        current->mm = NULL;
c010a582:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c010a587:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    int ret;
    if ((ret = load_icode(binary, size)) != 0) {
c010a58e:	83 ec 08             	sub    $0x8,%esp
c010a591:	ff 75 14             	pushl  0x14(%ebp)
c010a594:	ff 75 10             	pushl  0x10(%ebp)
c010a597:	e8 a5 f9 ff ff       	call   c0109f41 <load_icode>
c010a59c:	83 c4 10             	add    $0x10,%esp
c010a59f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010a5a2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010a5a6:	75 1c                	jne    c010a5c4 <do_execve+0xfa>
        goto execve_exit;
    }
    set_proc_name(current, local_name);
c010a5a8:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c010a5ad:	83 ec 08             	sub    $0x8,%esp
c010a5b0:	8d 55 dc             	lea    -0x24(%ebp),%edx
c010a5b3:	52                   	push   %edx
c010a5b4:	50                   	push   %eax
c010a5b5:	e8 c2 ee ff ff       	call   c010947c <set_proc_name>
c010a5ba:	83 c4 10             	add    $0x10,%esp
    return 0;
c010a5bd:	b8 00 00 00 00       	mov    $0x0,%eax
c010a5c2:	eb 26                	jmp    c010a5ea <do_execve+0x120>
        }
        current->mm = NULL;
    }
    int ret;
    if ((ret = load_icode(binary, size)) != 0) {
        goto execve_exit;
c010a5c4:	90                   	nop
    }
    set_proc_name(current, local_name);
    return 0;

execve_exit:
    do_exit(ret);
c010a5c5:	83 ec 0c             	sub    $0xc,%esp
c010a5c8:	ff 75 f0             	pushl  -0x10(%ebp)
c010a5cb:	e8 a1 f7 ff ff       	call   c0109d71 <do_exit>
c010a5d0:	83 c4 10             	add    $0x10,%esp
    panic("already exit: %e.\n", ret);
c010a5d3:	ff 75 f0             	pushl  -0x10(%ebp)
c010a5d6:	68 cb df 10 c0       	push   $0xc010dfcb
c010a5db:	68 b8 02 00 00       	push   $0x2b8
c010a5e0:	68 f0 dd 10 c0       	push   $0xc010ddf0
c010a5e5:	e8 0e 5e ff ff       	call   c01003f8 <__panic>
}
c010a5ea:	c9                   	leave  
c010a5eb:	c3                   	ret    

c010a5ec <do_yield>:

// do_yield - ask the scheduler to reschedule
int
do_yield(void) {
c010a5ec:	55                   	push   %ebp
c010a5ed:	89 e5                	mov    %esp,%ebp
    current->need_resched = 1;
c010a5ef:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c010a5f4:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    return 0;
c010a5fb:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a600:	5d                   	pop    %ebp
c010a601:	c3                   	ret    

c010a602 <do_wait>:

// do_wait - wait one OR any children with PROC_ZOMBIE state, and free memory space of kernel stack
//         - proc struct of this child.
// NOTE: only after do_wait function, all resources of the child proces are free.
int
do_wait(int pid, int *code_store) {
c010a602:	55                   	push   %ebp
c010a603:	89 e5                	mov    %esp,%ebp
c010a605:	83 ec 18             	sub    $0x18,%esp
    struct mm_struct *mm = current->mm;
c010a608:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c010a60d:	8b 40 18             	mov    0x18(%eax),%eax
c010a610:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (code_store != NULL) {
c010a613:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010a617:	74 21                	je     c010a63a <do_wait+0x38>
        if (!user_mem_check(mm, (uintptr_t)code_store, sizeof(int), 1)) {
c010a619:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a61c:	6a 01                	push   $0x1
c010a61e:	6a 04                	push   $0x4
c010a620:	50                   	push   %eax
c010a621:	ff 75 ec             	pushl  -0x14(%ebp)
c010a624:	e8 20 a6 ff ff       	call   c0104c49 <user_mem_check>
c010a629:	83 c4 10             	add    $0x10,%esp
c010a62c:	85 c0                	test   %eax,%eax
c010a62e:	75 0a                	jne    c010a63a <do_wait+0x38>
            return -E_INVAL;
c010a630:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010a635:	e9 54 01 00 00       	jmp    c010a78e <do_wait+0x18c>
    }

    struct proc_struct *proc;
    bool intr_flag, haskid;
repeat:
    haskid = 0;
c010a63a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    if (pid != 0) {
c010a641:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a645:	74 39                	je     c010a680 <do_wait+0x7e>
        proc = find_proc(pid);
c010a647:	83 ec 0c             	sub    $0xc,%esp
c010a64a:	ff 75 08             	pushl  0x8(%ebp)
c010a64d:	e8 ff f1 ff ff       	call   c0109851 <find_proc>
c010a652:	83 c4 10             	add    $0x10,%esp
c010a655:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (proc != NULL && proc->parent == current) {
c010a658:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a65c:	74 4f                	je     c010a6ad <do_wait+0xab>
c010a65e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a661:	8b 50 14             	mov    0x14(%eax),%edx
c010a664:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c010a669:	39 c2                	cmp    %eax,%edx
c010a66b:	75 40                	jne    c010a6ad <do_wait+0xab>
            haskid = 1;
c010a66d:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c010a674:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a677:	8b 00                	mov    (%eax),%eax
c010a679:	83 f8 03             	cmp    $0x3,%eax
c010a67c:	75 2f                	jne    c010a6ad <do_wait+0xab>
                goto found;
c010a67e:	eb 7f                	jmp    c010a6ff <do_wait+0xfd>
            }
        }
    }
    else {
        proc = current->cptr;
c010a680:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c010a685:	8b 40 70             	mov    0x70(%eax),%eax
c010a688:	89 45 f4             	mov    %eax,-0xc(%ebp)
        for (; proc != NULL; proc = proc->optr) {
c010a68b:	eb 1a                	jmp    c010a6a7 <do_wait+0xa5>
            haskid = 1;
c010a68d:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c010a694:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a697:	8b 00                	mov    (%eax),%eax
c010a699:	83 f8 03             	cmp    $0x3,%eax
c010a69c:	74 60                	je     c010a6fe <do_wait+0xfc>
            }
        }
    }
    else {
        proc = current->cptr;
        for (; proc != NULL; proc = proc->optr) {
c010a69e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a6a1:	8b 40 78             	mov    0x78(%eax),%eax
c010a6a4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a6a7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a6ab:	75 e0                	jne    c010a68d <do_wait+0x8b>
            if (proc->state == PROC_ZOMBIE) {
                goto found;
            }
        }
    }
    if (haskid) {
c010a6ad:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010a6b1:	74 41                	je     c010a6f4 <do_wait+0xf2>
        current->state = PROC_SLEEPING;
c010a6b3:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c010a6b8:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        current->wait_state = WT_CHILD;
c010a6be:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c010a6c3:	c7 40 6c 01 00 00 80 	movl   $0x80000001,0x6c(%eax)
        schedule();
c010a6ca:	e8 73 05 00 00       	call   c010ac42 <schedule>
        if (current->flags & PF_EXITING) {
c010a6cf:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c010a6d4:	8b 40 44             	mov    0x44(%eax),%eax
c010a6d7:	83 e0 01             	and    $0x1,%eax
c010a6da:	85 c0                	test   %eax,%eax
c010a6dc:	0f 84 58 ff ff ff    	je     c010a63a <do_wait+0x38>
            do_exit(-E_KILLED);
c010a6e2:	83 ec 0c             	sub    $0xc,%esp
c010a6e5:	6a f7                	push   $0xfffffff7
c010a6e7:	e8 85 f6 ff ff       	call   c0109d71 <do_exit>
c010a6ec:	83 c4 10             	add    $0x10,%esp
        }
        goto repeat;
c010a6ef:	e9 46 ff ff ff       	jmp    c010a63a <do_wait+0x38>
    }
    return -E_BAD_PROC;
c010a6f4:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
c010a6f9:	e9 90 00 00 00       	jmp    c010a78e <do_wait+0x18c>
    else {
        proc = current->cptr;
        for (; proc != NULL; proc = proc->optr) {
            haskid = 1;
            if (proc->state == PROC_ZOMBIE) {
                goto found;
c010a6fe:	90                   	nop
        goto repeat;
    }
    return -E_BAD_PROC;

found:
    if (proc == idleproc || proc == initproc) {
c010a6ff:	a1 20 00 1a c0       	mov    0xc01a0020,%eax
c010a704:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010a707:	74 0a                	je     c010a713 <do_wait+0x111>
c010a709:	a1 24 00 1a c0       	mov    0xc01a0024,%eax
c010a70e:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010a711:	75 17                	jne    c010a72a <do_wait+0x128>
        panic("wait idleproc or initproc.\n");
c010a713:	83 ec 04             	sub    $0x4,%esp
c010a716:	68 de df 10 c0       	push   $0xc010dfde
c010a71b:	68 f1 02 00 00       	push   $0x2f1
c010a720:	68 f0 dd 10 c0       	push   $0xc010ddf0
c010a725:	e8 ce 5c ff ff       	call   c01003f8 <__panic>
    }
    if (code_store != NULL) {
c010a72a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010a72e:	74 0b                	je     c010a73b <do_wait+0x139>
        *code_store = proc->exit_code;
c010a730:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a733:	8b 50 68             	mov    0x68(%eax),%edx
c010a736:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a739:	89 10                	mov    %edx,(%eax)
    }
    local_intr_save(intr_flag);
c010a73b:	e8 81 ea ff ff       	call   c01091c1 <__intr_save>
c010a740:	89 45 e8             	mov    %eax,-0x18(%ebp)
    {
        unhash_proc(proc);
c010a743:	83 ec 0c             	sub    $0xc,%esp
c010a746:	ff 75 f4             	pushl  -0xc(%ebp)
c010a749:	e8 cf f0 ff ff       	call   c010981d <unhash_proc>
c010a74e:	83 c4 10             	add    $0x10,%esp
        remove_links(proc);
c010a751:	83 ec 0c             	sub    $0xc,%esp
c010a754:	ff 75 f4             	pushl  -0xc(%ebp)
c010a757:	e8 30 ee ff ff       	call   c010958c <remove_links>
c010a75c:	83 c4 10             	add    $0x10,%esp
    }
    local_intr_restore(intr_flag);
c010a75f:	83 ec 0c             	sub    $0xc,%esp
c010a762:	ff 75 e8             	pushl  -0x18(%ebp)
c010a765:	e8 81 ea ff ff       	call   c01091eb <__intr_restore>
c010a76a:	83 c4 10             	add    $0x10,%esp
    put_kstack(proc);
c010a76d:	83 ec 0c             	sub    $0xc,%esp
c010a770:	ff 75 f4             	pushl  -0xc(%ebp)
c010a773:	e8 ee f1 ff ff       	call   c0109966 <put_kstack>
c010a778:	83 c4 10             	add    $0x10,%esp
    kfree(proc);
c010a77b:	83 ec 0c             	sub    $0xc,%esp
c010a77e:	ff 75 f4             	pushl  -0xc(%ebp)
c010a781:	e8 b8 b0 ff ff       	call   c010583e <kfree>
c010a786:	83 c4 10             	add    $0x10,%esp
    return 0;
c010a789:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a78e:	c9                   	leave  
c010a78f:	c3                   	ret    

c010a790 <do_kill>:

// do_kill - kill process with pid by set this process's flags with PF_EXITING
int
do_kill(int pid) {
c010a790:	55                   	push   %ebp
c010a791:	89 e5                	mov    %esp,%ebp
c010a793:	83 ec 18             	sub    $0x18,%esp
    struct proc_struct *proc;
    if ((proc = find_proc(pid)) != NULL) {
c010a796:	83 ec 0c             	sub    $0xc,%esp
c010a799:	ff 75 08             	pushl  0x8(%ebp)
c010a79c:	e8 b0 f0 ff ff       	call   c0109851 <find_proc>
c010a7a1:	83 c4 10             	add    $0x10,%esp
c010a7a4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a7a7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a7ab:	74 44                	je     c010a7f1 <do_kill+0x61>
        if (!(proc->flags & PF_EXITING)) {
c010a7ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a7b0:	8b 40 44             	mov    0x44(%eax),%eax
c010a7b3:	83 e0 01             	and    $0x1,%eax
c010a7b6:	85 c0                	test   %eax,%eax
c010a7b8:	75 30                	jne    c010a7ea <do_kill+0x5a>
            proc->flags |= PF_EXITING;
c010a7ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a7bd:	8b 40 44             	mov    0x44(%eax),%eax
c010a7c0:	83 c8 01             	or     $0x1,%eax
c010a7c3:	89 c2                	mov    %eax,%edx
c010a7c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a7c8:	89 50 44             	mov    %edx,0x44(%eax)
            if (proc->wait_state & WT_INTERRUPTED) {
c010a7cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a7ce:	8b 40 6c             	mov    0x6c(%eax),%eax
c010a7d1:	85 c0                	test   %eax,%eax
c010a7d3:	79 0e                	jns    c010a7e3 <do_kill+0x53>
                wakeup_proc(proc);
c010a7d5:	83 ec 0c             	sub    $0xc,%esp
c010a7d8:	ff 75 f4             	pushl  -0xc(%ebp)
c010a7db:	e8 ed 03 00 00       	call   c010abcd <wakeup_proc>
c010a7e0:	83 c4 10             	add    $0x10,%esp
            }
            return 0;
c010a7e3:	b8 00 00 00 00       	mov    $0x0,%eax
c010a7e8:	eb 0c                	jmp    c010a7f6 <do_kill+0x66>
        }
        return -E_KILLED;
c010a7ea:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
c010a7ef:	eb 05                	jmp    c010a7f6 <do_kill+0x66>
    }
    return -E_INVAL;
c010a7f1:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c010a7f6:	c9                   	leave  
c010a7f7:	c3                   	ret    

c010a7f8 <kernel_execve>:

// kernel_execve - do SYS_exec syscall to exec a user program called by user_main kernel_thread
static int
kernel_execve(const char *name, unsigned char *binary, size_t size) {
c010a7f8:	55                   	push   %ebp
c010a7f9:	89 e5                	mov    %esp,%ebp
c010a7fb:	57                   	push   %edi
c010a7fc:	56                   	push   %esi
c010a7fd:	53                   	push   %ebx
c010a7fe:	83 ec 1c             	sub    $0x1c,%esp
    int ret, len = strlen(name);
c010a801:	83 ec 0c             	sub    $0xc,%esp
c010a804:	ff 75 08             	pushl  0x8(%ebp)
c010a807:	e8 ea 06 00 00       	call   c010aef6 <strlen>
c010a80c:	83 c4 10             	add    $0x10,%esp
c010a80f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    asm volatile (
c010a812:	b8 04 00 00 00       	mov    $0x4,%eax
c010a817:	8b 55 08             	mov    0x8(%ebp),%edx
c010a81a:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c010a81d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c010a820:	8b 75 10             	mov    0x10(%ebp),%esi
c010a823:	89 f7                	mov    %esi,%edi
c010a825:	cd 80                	int    $0x80
c010a827:	89 45 e0             	mov    %eax,-0x20(%ebp)
        "int %1;"
        : "=a" (ret)
        : "i" (T_SYSCALL), "0" (SYS_exec), "d" (name), "c" (len), "b" (binary), "D" (size)
        : "memory");
    return ret;
c010a82a:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
c010a82d:	8d 65 f4             	lea    -0xc(%ebp),%esp
c010a830:	5b                   	pop    %ebx
c010a831:	5e                   	pop    %esi
c010a832:	5f                   	pop    %edi
c010a833:	5d                   	pop    %ebp
c010a834:	c3                   	ret    

c010a835 <user_main>:

#define KERNEL_EXECVE2(x, xstart, xsize)        __KERNEL_EXECVE2(x, xstart, xsize)

// user_main - kernel thread used to exec a user program
static int
user_main(void *arg) {
c010a835:	55                   	push   %ebp
c010a836:	89 e5                	mov    %esp,%ebp
c010a838:	83 ec 08             	sub    $0x8,%esp
#ifdef TEST
    KERNEL_EXECVE2(TEST, TESTSTART, TESTSIZE);
c010a83b:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c010a840:	8b 40 04             	mov    0x4(%eax),%eax
c010a843:	83 ec 04             	sub    $0x4,%esp
c010a846:	68 fa df 10 c0       	push   $0xc010dffa
c010a84b:	50                   	push   %eax
c010a84c:	68 04 e0 10 c0       	push   $0xc010e004
c010a851:	e8 3c 5a ff ff       	call   c0100292 <cprintf>
c010a856:	83 c4 10             	add    $0x10,%esp
c010a859:	b8 8c 78 00 00       	mov    $0x788c,%eax
c010a85e:	83 ec 04             	sub    $0x4,%esp
c010a861:	50                   	push   %eax
c010a862:	68 9c 24 14 c0       	push   $0xc014249c
c010a867:	68 fa df 10 c0       	push   $0xc010dffa
c010a86c:	e8 87 ff ff ff       	call   c010a7f8 <kernel_execve>
c010a871:	83 c4 10             	add    $0x10,%esp
#else
    KERNEL_EXECVE(exit);
#endif
    panic("user_main execve failed.\n");
c010a874:	83 ec 04             	sub    $0x4,%esp
c010a877:	68 2b e0 10 c0       	push   $0xc010e02b
c010a87c:	68 3a 03 00 00       	push   $0x33a
c010a881:	68 f0 dd 10 c0       	push   $0xc010ddf0
c010a886:	e8 6d 5b ff ff       	call   c01003f8 <__panic>

c010a88b <init_main>:
}

// init_main - the second kernel thread used to create user_main kernel threads
static int
init_main(void *arg) {
c010a88b:	55                   	push   %ebp
c010a88c:	89 e5                	mov    %esp,%ebp
c010a88e:	83 ec 28             	sub    $0x28,%esp
    size_t nr_free_pages_store = nr_free_pages();
c010a891:	e8 5e cf ff ff       	call   c01077f4 <nr_free_pages>
c010a896:	89 45 f4             	mov    %eax,-0xc(%ebp)
    size_t kernel_allocated_store = kallocated();
c010a899:	e8 6b ae ff ff       	call   c0105709 <kallocated>
c010a89e:	89 45 f0             	mov    %eax,-0x10(%ebp)

    int pid = kernel_thread(user_main, NULL, 0);
c010a8a1:	83 ec 04             	sub    $0x4,%esp
c010a8a4:	6a 00                	push   $0x0
c010a8a6:	6a 00                	push   $0x0
c010a8a8:	68 35 a8 10 c0       	push   $0xc010a835
c010a8ad:	e8 0f f0 ff ff       	call   c01098c1 <kernel_thread>
c010a8b2:	83 c4 10             	add    $0x10,%esp
c010a8b5:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (pid <= 0) {
c010a8b8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010a8bc:	7f 1c                	jg     c010a8da <init_main+0x4f>
        panic("create user_main failed.\n");
c010a8be:	83 ec 04             	sub    $0x4,%esp
c010a8c1:	68 45 e0 10 c0       	push   $0xc010e045
c010a8c6:	68 45 03 00 00       	push   $0x345
c010a8cb:	68 f0 dd 10 c0       	push   $0xc010ddf0
c010a8d0:	e8 23 5b ff ff       	call   c01003f8 <__panic>
    }

    while (do_wait(0, NULL) == 0) {
        schedule();
c010a8d5:	e8 68 03 00 00       	call   c010ac42 <schedule>
    int pid = kernel_thread(user_main, NULL, 0);
    if (pid <= 0) {
        panic("create user_main failed.\n");
    }

    while (do_wait(0, NULL) == 0) {
c010a8da:	83 ec 08             	sub    $0x8,%esp
c010a8dd:	6a 00                	push   $0x0
c010a8df:	6a 00                	push   $0x0
c010a8e1:	e8 1c fd ff ff       	call   c010a602 <do_wait>
c010a8e6:	83 c4 10             	add    $0x10,%esp
c010a8e9:	85 c0                	test   %eax,%eax
c010a8eb:	74 e8                	je     c010a8d5 <init_main+0x4a>
        schedule();
    }

    cprintf("all user-mode processes have quit.\n");
c010a8ed:	83 ec 0c             	sub    $0xc,%esp
c010a8f0:	68 60 e0 10 c0       	push   $0xc010e060
c010a8f5:	e8 98 59 ff ff       	call   c0100292 <cprintf>
c010a8fa:	83 c4 10             	add    $0x10,%esp
    assert(initproc->cptr == NULL && initproc->yptr == NULL && initproc->optr == NULL);
c010a8fd:	a1 24 00 1a c0       	mov    0xc01a0024,%eax
c010a902:	8b 40 70             	mov    0x70(%eax),%eax
c010a905:	85 c0                	test   %eax,%eax
c010a907:	75 18                	jne    c010a921 <init_main+0x96>
c010a909:	a1 24 00 1a c0       	mov    0xc01a0024,%eax
c010a90e:	8b 40 74             	mov    0x74(%eax),%eax
c010a911:	85 c0                	test   %eax,%eax
c010a913:	75 0c                	jne    c010a921 <init_main+0x96>
c010a915:	a1 24 00 1a c0       	mov    0xc01a0024,%eax
c010a91a:	8b 40 78             	mov    0x78(%eax),%eax
c010a91d:	85 c0                	test   %eax,%eax
c010a91f:	74 19                	je     c010a93a <init_main+0xaf>
c010a921:	68 84 e0 10 c0       	push   $0xc010e084
c010a926:	68 a5 de 10 c0       	push   $0xc010dea5
c010a92b:	68 4d 03 00 00       	push   $0x34d
c010a930:	68 f0 dd 10 c0       	push   $0xc010ddf0
c010a935:	e8 be 5a ff ff       	call   c01003f8 <__panic>
    assert(nr_process == 2);
c010a93a:	a1 40 20 1a c0       	mov    0xc01a2040,%eax
c010a93f:	83 f8 02             	cmp    $0x2,%eax
c010a942:	74 19                	je     c010a95d <init_main+0xd2>
c010a944:	68 cf e0 10 c0       	push   $0xc010e0cf
c010a949:	68 a5 de 10 c0       	push   $0xc010dea5
c010a94e:	68 4e 03 00 00       	push   $0x34e
c010a953:	68 f0 dd 10 c0       	push   $0xc010ddf0
c010a958:	e8 9b 5a ff ff       	call   c01003f8 <__panic>
c010a95d:	c7 45 e4 9c 21 1a c0 	movl   $0xc01a219c,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010a964:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a967:	8b 40 04             	mov    0x4(%eax),%eax
    assert(list_next(&proc_list) == &(initproc->list_link));
c010a96a:	8b 15 24 00 1a c0    	mov    0xc01a0024,%edx
c010a970:	83 c2 58             	add    $0x58,%edx
c010a973:	39 d0                	cmp    %edx,%eax
c010a975:	74 19                	je     c010a990 <init_main+0x105>
c010a977:	68 e0 e0 10 c0       	push   $0xc010e0e0
c010a97c:	68 a5 de 10 c0       	push   $0xc010dea5
c010a981:	68 4f 03 00 00       	push   $0x34f
c010a986:	68 f0 dd 10 c0       	push   $0xc010ddf0
c010a98b:	e8 68 5a ff ff       	call   c01003f8 <__panic>
c010a990:	c7 45 e8 9c 21 1a c0 	movl   $0xc01a219c,-0x18(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c010a997:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a99a:	8b 00                	mov    (%eax),%eax
    assert(list_prev(&proc_list) == &(initproc->list_link));
c010a99c:	8b 15 24 00 1a c0    	mov    0xc01a0024,%edx
c010a9a2:	83 c2 58             	add    $0x58,%edx
c010a9a5:	39 d0                	cmp    %edx,%eax
c010a9a7:	74 19                	je     c010a9c2 <init_main+0x137>
c010a9a9:	68 10 e1 10 c0       	push   $0xc010e110
c010a9ae:	68 a5 de 10 c0       	push   $0xc010dea5
c010a9b3:	68 50 03 00 00       	push   $0x350
c010a9b8:	68 f0 dd 10 c0       	push   $0xc010ddf0
c010a9bd:	e8 36 5a ff ff       	call   c01003f8 <__panic>

    cprintf("init check memory pass.\n");
c010a9c2:	83 ec 0c             	sub    $0xc,%esp
c010a9c5:	68 40 e1 10 c0       	push   $0xc010e140
c010a9ca:	e8 c3 58 ff ff       	call   c0100292 <cprintf>
c010a9cf:	83 c4 10             	add    $0x10,%esp
    return 0;
c010a9d2:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a9d7:	c9                   	leave  
c010a9d8:	c3                   	ret    

c010a9d9 <proc_init>:

// proc_init - set up the first kernel thread idleproc "idle" by itself and 
//           - create the second kernel thread init_main
void
proc_init(void) {
c010a9d9:	55                   	push   %ebp
c010a9da:	89 e5                	mov    %esp,%ebp
c010a9dc:	83 ec 18             	sub    $0x18,%esp
c010a9df:	c7 45 e8 9c 21 1a c0 	movl   $0xc01a219c,-0x18(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010a9e6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a9e9:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010a9ec:	89 50 04             	mov    %edx,0x4(%eax)
c010a9ef:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a9f2:	8b 50 04             	mov    0x4(%eax),%edx
c010a9f5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a9f8:	89 10                	mov    %edx,(%eax)
    int i;

    list_init(&proc_list);
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c010a9fa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010aa01:	eb 26                	jmp    c010aa29 <proc_init+0x50>
        list_init(hash_list + i);
c010aa03:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aa06:	c1 e0 03             	shl    $0x3,%eax
c010aa09:	05 40 00 1a c0       	add    $0xc01a0040,%eax
c010aa0e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010aa11:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aa14:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010aa17:	89 50 04             	mov    %edx,0x4(%eax)
c010aa1a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aa1d:	8b 50 04             	mov    0x4(%eax),%edx
c010aa20:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aa23:	89 10                	mov    %edx,(%eax)
void
proc_init(void) {
    int i;

    list_init(&proc_list);
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c010aa25:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010aa29:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
c010aa30:	7e d1                	jle    c010aa03 <proc_init+0x2a>
        list_init(hash_list + i);
    }

    if ((idleproc = alloc_proc()) == NULL) {
c010aa32:	e8 8f e9 ff ff       	call   c01093c6 <alloc_proc>
c010aa37:	a3 20 00 1a c0       	mov    %eax,0xc01a0020
c010aa3c:	a1 20 00 1a c0       	mov    0xc01a0020,%eax
c010aa41:	85 c0                	test   %eax,%eax
c010aa43:	75 17                	jne    c010aa5c <proc_init+0x83>
        panic("cannot alloc idleproc.\n");
c010aa45:	83 ec 04             	sub    $0x4,%esp
c010aa48:	68 59 e1 10 c0       	push   $0xc010e159
c010aa4d:	68 62 03 00 00       	push   $0x362
c010aa52:	68 f0 dd 10 c0       	push   $0xc010ddf0
c010aa57:	e8 9c 59 ff ff       	call   c01003f8 <__panic>
    }

    idleproc->pid = 0;
c010aa5c:	a1 20 00 1a c0       	mov    0xc01a0020,%eax
c010aa61:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    idleproc->state = PROC_RUNNABLE;
c010aa68:	a1 20 00 1a c0       	mov    0xc01a0020,%eax
c010aa6d:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    idleproc->kstack = (uintptr_t)bootstack;
c010aa73:	a1 20 00 1a c0       	mov    0xc01a0020,%eax
c010aa78:	ba 00 90 12 c0       	mov    $0xc0129000,%edx
c010aa7d:	89 50 0c             	mov    %edx,0xc(%eax)
    idleproc->need_resched = 1;
c010aa80:	a1 20 00 1a c0       	mov    0xc01a0020,%eax
c010aa85:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    set_proc_name(idleproc, "idle");
c010aa8c:	a1 20 00 1a c0       	mov    0xc01a0020,%eax
c010aa91:	83 ec 08             	sub    $0x8,%esp
c010aa94:	68 71 e1 10 c0       	push   $0xc010e171
c010aa99:	50                   	push   %eax
c010aa9a:	e8 dd e9 ff ff       	call   c010947c <set_proc_name>
c010aa9f:	83 c4 10             	add    $0x10,%esp
    nr_process ++;
c010aaa2:	a1 40 20 1a c0       	mov    0xc01a2040,%eax
c010aaa7:	83 c0 01             	add    $0x1,%eax
c010aaaa:	a3 40 20 1a c0       	mov    %eax,0xc01a2040

    current = idleproc;
c010aaaf:	a1 20 00 1a c0       	mov    0xc01a0020,%eax
c010aab4:	a3 28 00 1a c0       	mov    %eax,0xc01a0028

    int pid = kernel_thread(init_main, NULL, 0);
c010aab9:	83 ec 04             	sub    $0x4,%esp
c010aabc:	6a 00                	push   $0x0
c010aabe:	6a 00                	push   $0x0
c010aac0:	68 8b a8 10 c0       	push   $0xc010a88b
c010aac5:	e8 f7 ed ff ff       	call   c01098c1 <kernel_thread>
c010aaca:	83 c4 10             	add    $0x10,%esp
c010aacd:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (pid <= 0) {
c010aad0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010aad4:	7f 17                	jg     c010aaed <proc_init+0x114>
        panic("create init_main failed.\n");
c010aad6:	83 ec 04             	sub    $0x4,%esp
c010aad9:	68 76 e1 10 c0       	push   $0xc010e176
c010aade:	68 70 03 00 00       	push   $0x370
c010aae3:	68 f0 dd 10 c0       	push   $0xc010ddf0
c010aae8:	e8 0b 59 ff ff       	call   c01003f8 <__panic>
    }

    initproc = find_proc(pid);
c010aaed:	83 ec 0c             	sub    $0xc,%esp
c010aaf0:	ff 75 ec             	pushl  -0x14(%ebp)
c010aaf3:	e8 59 ed ff ff       	call   c0109851 <find_proc>
c010aaf8:	83 c4 10             	add    $0x10,%esp
c010aafb:	a3 24 00 1a c0       	mov    %eax,0xc01a0024
    set_proc_name(initproc, "init");
c010ab00:	a1 24 00 1a c0       	mov    0xc01a0024,%eax
c010ab05:	83 ec 08             	sub    $0x8,%esp
c010ab08:	68 90 e1 10 c0       	push   $0xc010e190
c010ab0d:	50                   	push   %eax
c010ab0e:	e8 69 e9 ff ff       	call   c010947c <set_proc_name>
c010ab13:	83 c4 10             	add    $0x10,%esp

    assert(idleproc != NULL && idleproc->pid == 0);
c010ab16:	a1 20 00 1a c0       	mov    0xc01a0020,%eax
c010ab1b:	85 c0                	test   %eax,%eax
c010ab1d:	74 0c                	je     c010ab2b <proc_init+0x152>
c010ab1f:	a1 20 00 1a c0       	mov    0xc01a0020,%eax
c010ab24:	8b 40 04             	mov    0x4(%eax),%eax
c010ab27:	85 c0                	test   %eax,%eax
c010ab29:	74 19                	je     c010ab44 <proc_init+0x16b>
c010ab2b:	68 98 e1 10 c0       	push   $0xc010e198
c010ab30:	68 a5 de 10 c0       	push   $0xc010dea5
c010ab35:	68 76 03 00 00       	push   $0x376
c010ab3a:	68 f0 dd 10 c0       	push   $0xc010ddf0
c010ab3f:	e8 b4 58 ff ff       	call   c01003f8 <__panic>
    assert(initproc != NULL && initproc->pid == 1);
c010ab44:	a1 24 00 1a c0       	mov    0xc01a0024,%eax
c010ab49:	85 c0                	test   %eax,%eax
c010ab4b:	74 0d                	je     c010ab5a <proc_init+0x181>
c010ab4d:	a1 24 00 1a c0       	mov    0xc01a0024,%eax
c010ab52:	8b 40 04             	mov    0x4(%eax),%eax
c010ab55:	83 f8 01             	cmp    $0x1,%eax
c010ab58:	74 19                	je     c010ab73 <proc_init+0x19a>
c010ab5a:	68 c0 e1 10 c0       	push   $0xc010e1c0
c010ab5f:	68 a5 de 10 c0       	push   $0xc010dea5
c010ab64:	68 77 03 00 00       	push   $0x377
c010ab69:	68 f0 dd 10 c0       	push   $0xc010ddf0
c010ab6e:	e8 85 58 ff ff       	call   c01003f8 <__panic>
}
c010ab73:	90                   	nop
c010ab74:	c9                   	leave  
c010ab75:	c3                   	ret    

c010ab76 <cpu_idle>:

// cpu_idle - at the end of kern_init, the first kernel thread idleproc will do below works
void
cpu_idle(void) {
c010ab76:	55                   	push   %ebp
c010ab77:	89 e5                	mov    %esp,%ebp
c010ab79:	83 ec 08             	sub    $0x8,%esp
    while (1) {
        if (current->need_resched) {
c010ab7c:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c010ab81:	8b 40 10             	mov    0x10(%eax),%eax
c010ab84:	85 c0                	test   %eax,%eax
c010ab86:	74 f4                	je     c010ab7c <cpu_idle+0x6>
            schedule();
c010ab88:	e8 b5 00 00 00       	call   c010ac42 <schedule>
        }
    }
c010ab8d:	eb ed                	jmp    c010ab7c <cpu_idle+0x6>

c010ab8f <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c010ab8f:	55                   	push   %ebp
c010ab90:	89 e5                	mov    %esp,%ebp
c010ab92:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010ab95:	9c                   	pushf  
c010ab96:	58                   	pop    %eax
c010ab97:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010ab9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010ab9d:	25 00 02 00 00       	and    $0x200,%eax
c010aba2:	85 c0                	test   %eax,%eax
c010aba4:	74 0c                	je     c010abb2 <__intr_save+0x23>
        intr_disable();
c010aba6:	e8 0c 76 ff ff       	call   c01021b7 <intr_disable>
        return 1;
c010abab:	b8 01 00 00 00       	mov    $0x1,%eax
c010abb0:	eb 05                	jmp    c010abb7 <__intr_save+0x28>
    }
    return 0;
c010abb2:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010abb7:	c9                   	leave  
c010abb8:	c3                   	ret    

c010abb9 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010abb9:	55                   	push   %ebp
c010abba:	89 e5                	mov    %esp,%ebp
c010abbc:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010abbf:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010abc3:	74 05                	je     c010abca <__intr_restore+0x11>
        intr_enable();
c010abc5:	e8 e6 75 ff ff       	call   c01021b0 <intr_enable>
    }
}
c010abca:	90                   	nop
c010abcb:	c9                   	leave  
c010abcc:	c3                   	ret    

c010abcd <wakeup_proc>:
#include <proc.h>
#include <sched.h>
#include <assert.h>

void
wakeup_proc(struct proc_struct *proc) {
c010abcd:	55                   	push   %ebp
c010abce:	89 e5                	mov    %esp,%ebp
c010abd0:	83 ec 18             	sub    $0x18,%esp
    assert(proc->state != PROC_ZOMBIE);
c010abd3:	8b 45 08             	mov    0x8(%ebp),%eax
c010abd6:	8b 00                	mov    (%eax),%eax
c010abd8:	83 f8 03             	cmp    $0x3,%eax
c010abdb:	75 16                	jne    c010abf3 <wakeup_proc+0x26>
c010abdd:	68 e7 e1 10 c0       	push   $0xc010e1e7
c010abe2:	68 02 e2 10 c0       	push   $0xc010e202
c010abe7:	6a 09                	push   $0x9
c010abe9:	68 17 e2 10 c0       	push   $0xc010e217
c010abee:	e8 05 58 ff ff       	call   c01003f8 <__panic>
    bool intr_flag;
    local_intr_save(intr_flag);
c010abf3:	e8 97 ff ff ff       	call   c010ab8f <__intr_save>
c010abf8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        if (proc->state != PROC_RUNNABLE) {
c010abfb:	8b 45 08             	mov    0x8(%ebp),%eax
c010abfe:	8b 00                	mov    (%eax),%eax
c010ac00:	83 f8 02             	cmp    $0x2,%eax
c010ac03:	74 15                	je     c010ac1a <wakeup_proc+0x4d>
            proc->state = PROC_RUNNABLE;
c010ac05:	8b 45 08             	mov    0x8(%ebp),%eax
c010ac08:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
            proc->wait_state = 0;
c010ac0e:	8b 45 08             	mov    0x8(%ebp),%eax
c010ac11:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
c010ac18:	eb 17                	jmp    c010ac31 <wakeup_proc+0x64>
        }
        else {
            warn("wakeup runnable process.\n");
c010ac1a:	83 ec 04             	sub    $0x4,%esp
c010ac1d:	68 2d e2 10 c0       	push   $0xc010e22d
c010ac22:	6a 12                	push   $0x12
c010ac24:	68 17 e2 10 c0       	push   $0xc010e217
c010ac29:	e8 4d 58 ff ff       	call   c010047b <__warn>
c010ac2e:	83 c4 10             	add    $0x10,%esp
        }
    }
    local_intr_restore(intr_flag);
c010ac31:	83 ec 0c             	sub    $0xc,%esp
c010ac34:	ff 75 f4             	pushl  -0xc(%ebp)
c010ac37:	e8 7d ff ff ff       	call   c010abb9 <__intr_restore>
c010ac3c:	83 c4 10             	add    $0x10,%esp
}
c010ac3f:	90                   	nop
c010ac40:	c9                   	leave  
c010ac41:	c3                   	ret    

c010ac42 <schedule>:

void
schedule(void) {
c010ac42:	55                   	push   %ebp
c010ac43:	89 e5                	mov    %esp,%ebp
c010ac45:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    list_entry_t *le, *last;
    struct proc_struct *next = NULL;
c010ac48:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    local_intr_save(intr_flag);
c010ac4f:	e8 3b ff ff ff       	call   c010ab8f <__intr_save>
c010ac54:	89 45 ec             	mov    %eax,-0x14(%ebp)
    {
        current->need_resched = 0;
c010ac57:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c010ac5c:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
        last = (current == idleproc) ? &proc_list : &(current->list_link);
c010ac63:	8b 15 28 00 1a c0    	mov    0xc01a0028,%edx
c010ac69:	a1 20 00 1a c0       	mov    0xc01a0020,%eax
c010ac6e:	39 c2                	cmp    %eax,%edx
c010ac70:	74 0a                	je     c010ac7c <schedule+0x3a>
c010ac72:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c010ac77:	83 c0 58             	add    $0x58,%eax
c010ac7a:	eb 05                	jmp    c010ac81 <schedule+0x3f>
c010ac7c:	b8 9c 21 1a c0       	mov    $0xc01a219c,%eax
c010ac81:	89 45 e8             	mov    %eax,-0x18(%ebp)
        le = last;
c010ac84:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ac87:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ac8a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ac8d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010ac90:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ac93:	8b 40 04             	mov    0x4(%eax),%eax
        do {
            if ((le = list_next(le)) != &proc_list) {
c010ac96:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ac99:	81 7d f4 9c 21 1a c0 	cmpl   $0xc01a219c,-0xc(%ebp)
c010aca0:	74 13                	je     c010acb5 <schedule+0x73>
                next = le2proc(le, list_link);
c010aca2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aca5:	83 e8 58             	sub    $0x58,%eax
c010aca8:	89 45 f0             	mov    %eax,-0x10(%ebp)
                if (next->state == PROC_RUNNABLE) {
c010acab:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010acae:	8b 00                	mov    (%eax),%eax
c010acb0:	83 f8 02             	cmp    $0x2,%eax
c010acb3:	74 0a                	je     c010acbf <schedule+0x7d>
                    break;
                }
            }
        } while (le != last);
c010acb5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010acb8:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c010acbb:	75 cd                	jne    c010ac8a <schedule+0x48>
c010acbd:	eb 01                	jmp    c010acc0 <schedule+0x7e>
        le = last;
        do {
            if ((le = list_next(le)) != &proc_list) {
                next = le2proc(le, list_link);
                if (next->state == PROC_RUNNABLE) {
                    break;
c010acbf:	90                   	nop
                }
            }
        } while (le != last);
        if (next == NULL || next->state != PROC_RUNNABLE) {
c010acc0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010acc4:	74 0a                	je     c010acd0 <schedule+0x8e>
c010acc6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010acc9:	8b 00                	mov    (%eax),%eax
c010accb:	83 f8 02             	cmp    $0x2,%eax
c010acce:	74 08                	je     c010acd8 <schedule+0x96>
            next = idleproc;
c010acd0:	a1 20 00 1a c0       	mov    0xc01a0020,%eax
c010acd5:	89 45 f0             	mov    %eax,-0x10(%ebp)
        }
        next->runs ++;
c010acd8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010acdb:	8b 40 08             	mov    0x8(%eax),%eax
c010acde:	8d 50 01             	lea    0x1(%eax),%edx
c010ace1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ace4:	89 50 08             	mov    %edx,0x8(%eax)
        if (next != current) {
c010ace7:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c010acec:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010acef:	74 0e                	je     c010acff <schedule+0xbd>
            proc_run(next);
c010acf1:	83 ec 0c             	sub    $0xc,%esp
c010acf4:	ff 75 f0             	pushl  -0x10(%ebp)
c010acf7:	e8 0c ea ff ff       	call   c0109708 <proc_run>
c010acfc:	83 c4 10             	add    $0x10,%esp
        }
    }
    local_intr_restore(intr_flag);
c010acff:	83 ec 0c             	sub    $0xc,%esp
c010ad02:	ff 75 ec             	pushl  -0x14(%ebp)
c010ad05:	e8 af fe ff ff       	call   c010abb9 <__intr_restore>
c010ad0a:	83 c4 10             	add    $0x10,%esp
}
c010ad0d:	90                   	nop
c010ad0e:	c9                   	leave  
c010ad0f:	c3                   	ret    

c010ad10 <sys_exit>:
#include <stdio.h>
#include <pmm.h>
#include <assert.h>

static int
sys_exit(uint32_t arg[]) {
c010ad10:	55                   	push   %ebp
c010ad11:	89 e5                	mov    %esp,%ebp
c010ad13:	83 ec 18             	sub    $0x18,%esp
    int error_code = (int)arg[0];
c010ad16:	8b 45 08             	mov    0x8(%ebp),%eax
c010ad19:	8b 00                	mov    (%eax),%eax
c010ad1b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_exit(error_code);
c010ad1e:	83 ec 0c             	sub    $0xc,%esp
c010ad21:	ff 75 f4             	pushl  -0xc(%ebp)
c010ad24:	e8 48 f0 ff ff       	call   c0109d71 <do_exit>
c010ad29:	83 c4 10             	add    $0x10,%esp
}
c010ad2c:	c9                   	leave  
c010ad2d:	c3                   	ret    

c010ad2e <sys_fork>:

static int
sys_fork(uint32_t arg[]) {
c010ad2e:	55                   	push   %ebp
c010ad2f:	89 e5                	mov    %esp,%ebp
c010ad31:	83 ec 18             	sub    $0x18,%esp
    struct trapframe *tf = current->tf;
c010ad34:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c010ad39:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ad3c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uintptr_t stack = tf->tf_esp;
c010ad3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ad42:	8b 40 44             	mov    0x44(%eax),%eax
c010ad45:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_fork(0, stack, tf);
c010ad48:	83 ec 04             	sub    $0x4,%esp
c010ad4b:	ff 75 f4             	pushl  -0xc(%ebp)
c010ad4e:	ff 75 f0             	pushl  -0x10(%ebp)
c010ad51:	6a 00                	push   $0x0
c010ad53:	e8 bb ee ff ff       	call   c0109c13 <do_fork>
c010ad58:	83 c4 10             	add    $0x10,%esp
}
c010ad5b:	c9                   	leave  
c010ad5c:	c3                   	ret    

c010ad5d <sys_wait>:

static int
sys_wait(uint32_t arg[]) {
c010ad5d:	55                   	push   %ebp
c010ad5e:	89 e5                	mov    %esp,%ebp
c010ad60:	83 ec 18             	sub    $0x18,%esp
    int pid = (int)arg[0];
c010ad63:	8b 45 08             	mov    0x8(%ebp),%eax
c010ad66:	8b 00                	mov    (%eax),%eax
c010ad68:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int *store = (int *)arg[1];
c010ad6b:	8b 45 08             	mov    0x8(%ebp),%eax
c010ad6e:	83 c0 04             	add    $0x4,%eax
c010ad71:	8b 00                	mov    (%eax),%eax
c010ad73:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_wait(pid, store);
c010ad76:	83 ec 08             	sub    $0x8,%esp
c010ad79:	ff 75 f0             	pushl  -0x10(%ebp)
c010ad7c:	ff 75 f4             	pushl  -0xc(%ebp)
c010ad7f:	e8 7e f8 ff ff       	call   c010a602 <do_wait>
c010ad84:	83 c4 10             	add    $0x10,%esp
}
c010ad87:	c9                   	leave  
c010ad88:	c3                   	ret    

c010ad89 <sys_exec>:

static int
sys_exec(uint32_t arg[]) {
c010ad89:	55                   	push   %ebp
c010ad8a:	89 e5                	mov    %esp,%ebp
c010ad8c:	83 ec 18             	sub    $0x18,%esp
    const char *name = (const char *)arg[0];
c010ad8f:	8b 45 08             	mov    0x8(%ebp),%eax
c010ad92:	8b 00                	mov    (%eax),%eax
c010ad94:	89 45 f4             	mov    %eax,-0xc(%ebp)
    size_t len = (size_t)arg[1];
c010ad97:	8b 45 08             	mov    0x8(%ebp),%eax
c010ad9a:	83 c0 04             	add    $0x4,%eax
c010ad9d:	8b 00                	mov    (%eax),%eax
c010ad9f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    unsigned char *binary = (unsigned char *)arg[2];
c010ada2:	8b 45 08             	mov    0x8(%ebp),%eax
c010ada5:	83 c0 08             	add    $0x8,%eax
c010ada8:	8b 00                	mov    (%eax),%eax
c010adaa:	89 45 ec             	mov    %eax,-0x14(%ebp)
    size_t size = (size_t)arg[3];
c010adad:	8b 45 08             	mov    0x8(%ebp),%eax
c010adb0:	83 c0 0c             	add    $0xc,%eax
c010adb3:	8b 00                	mov    (%eax),%eax
c010adb5:	89 45 e8             	mov    %eax,-0x18(%ebp)
    return do_execve(name, len, binary, size);
c010adb8:	ff 75 e8             	pushl  -0x18(%ebp)
c010adbb:	ff 75 ec             	pushl  -0x14(%ebp)
c010adbe:	ff 75 f0             	pushl  -0x10(%ebp)
c010adc1:	ff 75 f4             	pushl  -0xc(%ebp)
c010adc4:	e8 01 f7 ff ff       	call   c010a4ca <do_execve>
c010adc9:	83 c4 10             	add    $0x10,%esp
}
c010adcc:	c9                   	leave  
c010adcd:	c3                   	ret    

c010adce <sys_yield>:

static int
sys_yield(uint32_t arg[]) {
c010adce:	55                   	push   %ebp
c010adcf:	89 e5                	mov    %esp,%ebp
c010add1:	83 ec 08             	sub    $0x8,%esp
    return do_yield();
c010add4:	e8 13 f8 ff ff       	call   c010a5ec <do_yield>
}
c010add9:	c9                   	leave  
c010adda:	c3                   	ret    

c010addb <sys_kill>:

static int
sys_kill(uint32_t arg[]) {
c010addb:	55                   	push   %ebp
c010addc:	89 e5                	mov    %esp,%ebp
c010adde:	83 ec 18             	sub    $0x18,%esp
    int pid = (int)arg[0];
c010ade1:	8b 45 08             	mov    0x8(%ebp),%eax
c010ade4:	8b 00                	mov    (%eax),%eax
c010ade6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_kill(pid);
c010ade9:	83 ec 0c             	sub    $0xc,%esp
c010adec:	ff 75 f4             	pushl  -0xc(%ebp)
c010adef:	e8 9c f9 ff ff       	call   c010a790 <do_kill>
c010adf4:	83 c4 10             	add    $0x10,%esp
}
c010adf7:	c9                   	leave  
c010adf8:	c3                   	ret    

c010adf9 <sys_getpid>:

static int
sys_getpid(uint32_t arg[]) {
c010adf9:	55                   	push   %ebp
c010adfa:	89 e5                	mov    %esp,%ebp
    return current->pid;
c010adfc:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c010ae01:	8b 40 04             	mov    0x4(%eax),%eax
}
c010ae04:	5d                   	pop    %ebp
c010ae05:	c3                   	ret    

c010ae06 <sys_putc>:

static int
sys_putc(uint32_t arg[]) {
c010ae06:	55                   	push   %ebp
c010ae07:	89 e5                	mov    %esp,%ebp
c010ae09:	83 ec 18             	sub    $0x18,%esp
    int c = (int)arg[0];
c010ae0c:	8b 45 08             	mov    0x8(%ebp),%eax
c010ae0f:	8b 00                	mov    (%eax),%eax
c010ae11:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cputchar(c);
c010ae14:	83 ec 0c             	sub    $0xc,%esp
c010ae17:	ff 75 f4             	pushl  -0xc(%ebp)
c010ae1a:	e8 99 54 ff ff       	call   c01002b8 <cputchar>
c010ae1f:	83 c4 10             	add    $0x10,%esp
    return 0;
c010ae22:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ae27:	c9                   	leave  
c010ae28:	c3                   	ret    

c010ae29 <sys_pgdir>:

static int
sys_pgdir(uint32_t arg[]) {
c010ae29:	55                   	push   %ebp
c010ae2a:	89 e5                	mov    %esp,%ebp
c010ae2c:	83 ec 08             	sub    $0x8,%esp
    print_pgdir();
c010ae2f:	e8 59 e0 ff ff       	call   c0108e8d <print_pgdir>
    return 0;
c010ae34:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ae39:	c9                   	leave  
c010ae3a:	c3                   	ret    

c010ae3b <syscall>:
};

#define NUM_SYSCALLS        ((sizeof(syscalls)) / (sizeof(syscalls[0])))

void
syscall(void) {
c010ae3b:	55                   	push   %ebp
c010ae3c:	89 e5                	mov    %esp,%ebp
c010ae3e:	83 ec 28             	sub    $0x28,%esp
    struct trapframe *tf = current->tf;
c010ae41:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c010ae46:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ae49:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t arg[5];
    int num = tf->tf_regs.reg_eax;
c010ae4c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ae4f:	8b 40 1c             	mov    0x1c(%eax),%eax
c010ae52:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (num >= 0 && num < NUM_SYSCALLS) {
c010ae55:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010ae59:	78 62                	js     c010aebd <syscall+0x82>
c010ae5b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ae5e:	83 f8 1f             	cmp    $0x1f,%eax
c010ae61:	77 5a                	ja     c010aebd <syscall+0x82>
        if (syscalls[num] != NULL) {
c010ae63:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ae66:	8b 04 85 c0 ba 12 c0 	mov    -0x3fed4540(,%eax,4),%eax
c010ae6d:	85 c0                	test   %eax,%eax
c010ae6f:	74 4c                	je     c010aebd <syscall+0x82>
            arg[0] = tf->tf_regs.reg_edx;
c010ae71:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ae74:	8b 40 14             	mov    0x14(%eax),%eax
c010ae77:	89 45 dc             	mov    %eax,-0x24(%ebp)
            arg[1] = tf->tf_regs.reg_ecx;
c010ae7a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ae7d:	8b 40 18             	mov    0x18(%eax),%eax
c010ae80:	89 45 e0             	mov    %eax,-0x20(%ebp)
            arg[2] = tf->tf_regs.reg_ebx;
c010ae83:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ae86:	8b 40 10             	mov    0x10(%eax),%eax
c010ae89:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            arg[3] = tf->tf_regs.reg_edi;
c010ae8c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ae8f:	8b 00                	mov    (%eax),%eax
c010ae91:	89 45 e8             	mov    %eax,-0x18(%ebp)
            arg[4] = tf->tf_regs.reg_esi;
c010ae94:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ae97:	8b 40 04             	mov    0x4(%eax),%eax
c010ae9a:	89 45 ec             	mov    %eax,-0x14(%ebp)
            tf->tf_regs.reg_eax = syscalls[num](arg);
c010ae9d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aea0:	8b 04 85 c0 ba 12 c0 	mov    -0x3fed4540(,%eax,4),%eax
c010aea7:	83 ec 0c             	sub    $0xc,%esp
c010aeaa:	8d 55 dc             	lea    -0x24(%ebp),%edx
c010aead:	52                   	push   %edx
c010aeae:	ff d0                	call   *%eax
c010aeb0:	83 c4 10             	add    $0x10,%esp
c010aeb3:	89 c2                	mov    %eax,%edx
c010aeb5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aeb8:	89 50 1c             	mov    %edx,0x1c(%eax)
            return ;
c010aebb:	eb 37                	jmp    c010aef4 <syscall+0xb9>
        }
    }
    print_trapframe(tf);
c010aebd:	83 ec 0c             	sub    $0xc,%esp
c010aec0:	ff 75 f4             	pushl  -0xc(%ebp)
c010aec3:	e8 ea 74 ff ff       	call   c01023b2 <print_trapframe>
c010aec8:	83 c4 10             	add    $0x10,%esp
    panic("undefined syscall %d, pid = %d, name = %s.\n",
c010aecb:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c010aed0:	8d 50 48             	lea    0x48(%eax),%edx
c010aed3:	a1 28 00 1a c0       	mov    0xc01a0028,%eax
c010aed8:	8b 40 04             	mov    0x4(%eax),%eax
c010aedb:	83 ec 08             	sub    $0x8,%esp
c010aede:	52                   	push   %edx
c010aedf:	50                   	push   %eax
c010aee0:	ff 75 f0             	pushl  -0x10(%ebp)
c010aee3:	68 48 e2 10 c0       	push   $0xc010e248
c010aee8:	6a 63                	push   $0x63
c010aeea:	68 74 e2 10 c0       	push   $0xc010e274
c010aeef:	e8 04 55 ff ff       	call   c01003f8 <__panic>
            num, current->pid, current->name);
}
c010aef4:	c9                   	leave  
c010aef5:	c3                   	ret    

c010aef6 <strlen>:
 * @s:      the input string
 *
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
c010aef6:	55                   	push   %ebp
c010aef7:	89 e5                	mov    %esp,%ebp
c010aef9:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c010aefc:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (*s ++ != '\0') {
c010af03:	eb 04                	jmp    c010af09 <strlen+0x13>
        cnt ++;
c010af05:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
    size_t cnt = 0;
    while (*s ++ != '\0') {
c010af09:	8b 45 08             	mov    0x8(%ebp),%eax
c010af0c:	8d 50 01             	lea    0x1(%eax),%edx
c010af0f:	89 55 08             	mov    %edx,0x8(%ebp)
c010af12:	0f b6 00             	movzbl (%eax),%eax
c010af15:	84 c0                	test   %al,%al
c010af17:	75 ec                	jne    c010af05 <strlen+0xf>
        cnt ++;
    }
    return cnt;
c010af19:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010af1c:	c9                   	leave  
c010af1d:	c3                   	ret    

c010af1e <strnlen>:
 * The return value is strlen(s), if that is less than @len, or
 * @len if there is no '\0' character among the first @len characters
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
c010af1e:	55                   	push   %ebp
c010af1f:	89 e5                	mov    %esp,%ebp
c010af21:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c010af24:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (cnt < len && *s ++ != '\0') {
c010af2b:	eb 04                	jmp    c010af31 <strnlen+0x13>
        cnt ++;
c010af2d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
    size_t cnt = 0;
    while (cnt < len && *s ++ != '\0') {
c010af31:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010af34:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010af37:	73 10                	jae    c010af49 <strnlen+0x2b>
c010af39:	8b 45 08             	mov    0x8(%ebp),%eax
c010af3c:	8d 50 01             	lea    0x1(%eax),%edx
c010af3f:	89 55 08             	mov    %edx,0x8(%ebp)
c010af42:	0f b6 00             	movzbl (%eax),%eax
c010af45:	84 c0                	test   %al,%al
c010af47:	75 e4                	jne    c010af2d <strnlen+0xf>
        cnt ++;
    }
    return cnt;
c010af49:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010af4c:	c9                   	leave  
c010af4d:	c3                   	ret    

c010af4e <strcpy>:
 * To avoid overflows, the size of array pointed by @dst should be long enough to
 * contain the same string as @src (including the terminating null character), and
 * should not overlap in memory with @src.
 * */
char *
strcpy(char *dst, const char *src) {
c010af4e:	55                   	push   %ebp
c010af4f:	89 e5                	mov    %esp,%ebp
c010af51:	57                   	push   %edi
c010af52:	56                   	push   %esi
c010af53:	83 ec 20             	sub    $0x20,%esp
c010af56:	8b 45 08             	mov    0x8(%ebp),%eax
c010af59:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010af5c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010af5f:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_STRCPY
#define __HAVE_ARCH_STRCPY
static inline char *
__strcpy(char *dst, const char *src) {
    int d0, d1, d2;
    asm volatile (
c010af62:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010af65:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010af68:	89 d1                	mov    %edx,%ecx
c010af6a:	89 c2                	mov    %eax,%edx
c010af6c:	89 ce                	mov    %ecx,%esi
c010af6e:	89 d7                	mov    %edx,%edi
c010af70:	ac                   	lods   %ds:(%esi),%al
c010af71:	aa                   	stos   %al,%es:(%edi)
c010af72:	84 c0                	test   %al,%al
c010af74:	75 fa                	jne    c010af70 <strcpy+0x22>
c010af76:	89 fa                	mov    %edi,%edx
c010af78:	89 f1                	mov    %esi,%ecx
c010af7a:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c010af7d:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010af80:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        "stosb;"
        "testb %%al, %%al;"
        "jne 1b;"
        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
        : "0" (src), "1" (dst) : "memory");
    return dst;
c010af83:	8b 45 f4             	mov    -0xc(%ebp),%eax
#ifdef __HAVE_ARCH_STRCPY
    return __strcpy(dst, src);
c010af86:	90                   	nop
    char *p = dst;
    while ((*p ++ = *src ++) != '\0')
        /* nothing */;
    return dst;
#endif /* __HAVE_ARCH_STRCPY */
}
c010af87:	83 c4 20             	add    $0x20,%esp
c010af8a:	5e                   	pop    %esi
c010af8b:	5f                   	pop    %edi
c010af8c:	5d                   	pop    %ebp
c010af8d:	c3                   	ret    

c010af8e <strncpy>:
 * @len:    maximum number of characters to be copied from @src
 *
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
c010af8e:	55                   	push   %ebp
c010af8f:	89 e5                	mov    %esp,%ebp
c010af91:	83 ec 10             	sub    $0x10,%esp
    char *p = dst;
c010af94:	8b 45 08             	mov    0x8(%ebp),%eax
c010af97:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (len > 0) {
c010af9a:	eb 21                	jmp    c010afbd <strncpy+0x2f>
        if ((*p = *src) != '\0') {
c010af9c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010af9f:	0f b6 10             	movzbl (%eax),%edx
c010afa2:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010afa5:	88 10                	mov    %dl,(%eax)
c010afa7:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010afaa:	0f b6 00             	movzbl (%eax),%eax
c010afad:	84 c0                	test   %al,%al
c010afaf:	74 04                	je     c010afb5 <strncpy+0x27>
            src ++;
c010afb1:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
        }
        p ++, len --;
c010afb5:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010afb9:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
    char *p = dst;
    while (len > 0) {
c010afbd:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010afc1:	75 d9                	jne    c010af9c <strncpy+0xe>
        if ((*p = *src) != '\0') {
            src ++;
        }
        p ++, len --;
    }
    return dst;
c010afc3:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010afc6:	c9                   	leave  
c010afc7:	c3                   	ret    

c010afc8 <strcmp>:
 * - A value greater than zero indicates that the first character that does
 *   not match has a greater value in @s1 than in @s2;
 * - And a value less than zero indicates the opposite.
 * */
int
strcmp(const char *s1, const char *s2) {
c010afc8:	55                   	push   %ebp
c010afc9:	89 e5                	mov    %esp,%ebp
c010afcb:	57                   	push   %edi
c010afcc:	56                   	push   %esi
c010afcd:	83 ec 20             	sub    $0x20,%esp
c010afd0:	8b 45 08             	mov    0x8(%ebp),%eax
c010afd3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010afd6:	8b 45 0c             	mov    0xc(%ebp),%eax
c010afd9:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_STRCMP
#define __HAVE_ARCH_STRCMP
static inline int
__strcmp(const char *s1, const char *s2) {
    int d0, d1, ret;
    asm volatile (
c010afdc:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010afdf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010afe2:	89 d1                	mov    %edx,%ecx
c010afe4:	89 c2                	mov    %eax,%edx
c010afe6:	89 ce                	mov    %ecx,%esi
c010afe8:	89 d7                	mov    %edx,%edi
c010afea:	ac                   	lods   %ds:(%esi),%al
c010afeb:	ae                   	scas   %es:(%edi),%al
c010afec:	75 08                	jne    c010aff6 <strcmp+0x2e>
c010afee:	84 c0                	test   %al,%al
c010aff0:	75 f8                	jne    c010afea <strcmp+0x22>
c010aff2:	31 c0                	xor    %eax,%eax
c010aff4:	eb 04                	jmp    c010affa <strcmp+0x32>
c010aff6:	19 c0                	sbb    %eax,%eax
c010aff8:	0c 01                	or     $0x1,%al
c010affa:	89 fa                	mov    %edi,%edx
c010affc:	89 f1                	mov    %esi,%ecx
c010affe:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010b001:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c010b004:	89 55 e4             	mov    %edx,-0x1c(%ebp)
        "orb $1, %%al;"
        "3:"
        : "=a" (ret), "=&S" (d0), "=&D" (d1)
        : "1" (s1), "2" (s2)
        : "memory");
    return ret;
c010b007:	8b 45 ec             	mov    -0x14(%ebp),%eax
#ifdef __HAVE_ARCH_STRCMP
    return __strcmp(s1, s2);
c010b00a:	90                   	nop
    while (*s1 != '\0' && *s1 == *s2) {
        s1 ++, s2 ++;
    }
    return (int)((unsigned char)*s1 - (unsigned char)*s2);
#endif /* __HAVE_ARCH_STRCMP */
}
c010b00b:	83 c4 20             	add    $0x20,%esp
c010b00e:	5e                   	pop    %esi
c010b00f:	5f                   	pop    %edi
c010b010:	5d                   	pop    %ebp
c010b011:	c3                   	ret    

c010b012 <strncmp>:
 * they are equal to each other, it continues with the following pairs until
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
c010b012:	55                   	push   %ebp
c010b013:	89 e5                	mov    %esp,%ebp
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c010b015:	eb 0c                	jmp    c010b023 <strncmp+0x11>
        n --, s1 ++, s2 ++;
c010b017:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c010b01b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010b01f:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c010b023:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010b027:	74 1a                	je     c010b043 <strncmp+0x31>
c010b029:	8b 45 08             	mov    0x8(%ebp),%eax
c010b02c:	0f b6 00             	movzbl (%eax),%eax
c010b02f:	84 c0                	test   %al,%al
c010b031:	74 10                	je     c010b043 <strncmp+0x31>
c010b033:	8b 45 08             	mov    0x8(%ebp),%eax
c010b036:	0f b6 10             	movzbl (%eax),%edx
c010b039:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b03c:	0f b6 00             	movzbl (%eax),%eax
c010b03f:	38 c2                	cmp    %al,%dl
c010b041:	74 d4                	je     c010b017 <strncmp+0x5>
        n --, s1 ++, s2 ++;
    }
    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
c010b043:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010b047:	74 18                	je     c010b061 <strncmp+0x4f>
c010b049:	8b 45 08             	mov    0x8(%ebp),%eax
c010b04c:	0f b6 00             	movzbl (%eax),%eax
c010b04f:	0f b6 d0             	movzbl %al,%edx
c010b052:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b055:	0f b6 00             	movzbl (%eax),%eax
c010b058:	0f b6 c0             	movzbl %al,%eax
c010b05b:	29 c2                	sub    %eax,%edx
c010b05d:	89 d0                	mov    %edx,%eax
c010b05f:	eb 05                	jmp    c010b066 <strncmp+0x54>
c010b061:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010b066:	5d                   	pop    %ebp
c010b067:	c3                   	ret    

c010b068 <strchr>:
 *
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
c010b068:	55                   	push   %ebp
c010b069:	89 e5                	mov    %esp,%ebp
c010b06b:	83 ec 04             	sub    $0x4,%esp
c010b06e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b071:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c010b074:	eb 14                	jmp    c010b08a <strchr+0x22>
        if (*s == c) {
c010b076:	8b 45 08             	mov    0x8(%ebp),%eax
c010b079:	0f b6 00             	movzbl (%eax),%eax
c010b07c:	3a 45 fc             	cmp    -0x4(%ebp),%al
c010b07f:	75 05                	jne    c010b086 <strchr+0x1e>
            return (char *)s;
c010b081:	8b 45 08             	mov    0x8(%ebp),%eax
c010b084:	eb 13                	jmp    c010b099 <strchr+0x31>
        }
        s ++;
c010b086:	83 45 08 01          	addl   $0x1,0x8(%ebp)
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
    while (*s != '\0') {
c010b08a:	8b 45 08             	mov    0x8(%ebp),%eax
c010b08d:	0f b6 00             	movzbl (%eax),%eax
c010b090:	84 c0                	test   %al,%al
c010b092:	75 e2                	jne    c010b076 <strchr+0xe>
        if (*s == c) {
            return (char *)s;
        }
        s ++;
    }
    return NULL;
c010b094:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010b099:	c9                   	leave  
c010b09a:	c3                   	ret    

c010b09b <strfind>:
 * The strfind() function is like strchr() except that if @c is
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
c010b09b:	55                   	push   %ebp
c010b09c:	89 e5                	mov    %esp,%ebp
c010b09e:	83 ec 04             	sub    $0x4,%esp
c010b0a1:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b0a4:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c010b0a7:	eb 0f                	jmp    c010b0b8 <strfind+0x1d>
        if (*s == c) {
c010b0a9:	8b 45 08             	mov    0x8(%ebp),%eax
c010b0ac:	0f b6 00             	movzbl (%eax),%eax
c010b0af:	3a 45 fc             	cmp    -0x4(%ebp),%al
c010b0b2:	74 10                	je     c010b0c4 <strfind+0x29>
            break;
        }
        s ++;
c010b0b4:	83 45 08 01          	addl   $0x1,0x8(%ebp)
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
    while (*s != '\0') {
c010b0b8:	8b 45 08             	mov    0x8(%ebp),%eax
c010b0bb:	0f b6 00             	movzbl (%eax),%eax
c010b0be:	84 c0                	test   %al,%al
c010b0c0:	75 e7                	jne    c010b0a9 <strfind+0xe>
c010b0c2:	eb 01                	jmp    c010b0c5 <strfind+0x2a>
        if (*s == c) {
            break;
c010b0c4:	90                   	nop
        }
        s ++;
    }
    return (char *)s;
c010b0c5:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010b0c8:	c9                   	leave  
c010b0c9:	c3                   	ret    

c010b0ca <strtol>:
 * an optional "0x" or "0X" prefix.
 *
 * The strtol() function returns the converted integral number as a long int value.
 * */
long
strtol(const char *s, char **endptr, int base) {
c010b0ca:	55                   	push   %ebp
c010b0cb:	89 e5                	mov    %esp,%ebp
c010b0cd:	83 ec 10             	sub    $0x10,%esp
    int neg = 0;
c010b0d0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    long val = 0;
c010b0d7:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
c010b0de:	eb 04                	jmp    c010b0e4 <strtol+0x1a>
        s ++;
c010b0e0:	83 45 08 01          	addl   $0x1,0x8(%ebp)
strtol(const char *s, char **endptr, int base) {
    int neg = 0;
    long val = 0;

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
c010b0e4:	8b 45 08             	mov    0x8(%ebp),%eax
c010b0e7:	0f b6 00             	movzbl (%eax),%eax
c010b0ea:	3c 20                	cmp    $0x20,%al
c010b0ec:	74 f2                	je     c010b0e0 <strtol+0x16>
c010b0ee:	8b 45 08             	mov    0x8(%ebp),%eax
c010b0f1:	0f b6 00             	movzbl (%eax),%eax
c010b0f4:	3c 09                	cmp    $0x9,%al
c010b0f6:	74 e8                	je     c010b0e0 <strtol+0x16>
        s ++;
    }

    // plus/minus sign
    if (*s == '+') {
c010b0f8:	8b 45 08             	mov    0x8(%ebp),%eax
c010b0fb:	0f b6 00             	movzbl (%eax),%eax
c010b0fe:	3c 2b                	cmp    $0x2b,%al
c010b100:	75 06                	jne    c010b108 <strtol+0x3e>
        s ++;
c010b102:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010b106:	eb 15                	jmp    c010b11d <strtol+0x53>
    }
    else if (*s == '-') {
c010b108:	8b 45 08             	mov    0x8(%ebp),%eax
c010b10b:	0f b6 00             	movzbl (%eax),%eax
c010b10e:	3c 2d                	cmp    $0x2d,%al
c010b110:	75 0b                	jne    c010b11d <strtol+0x53>
        s ++, neg = 1;
c010b112:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010b116:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
    }

    // hex or octal base prefix
    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
c010b11d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010b121:	74 06                	je     c010b129 <strtol+0x5f>
c010b123:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
c010b127:	75 24                	jne    c010b14d <strtol+0x83>
c010b129:	8b 45 08             	mov    0x8(%ebp),%eax
c010b12c:	0f b6 00             	movzbl (%eax),%eax
c010b12f:	3c 30                	cmp    $0x30,%al
c010b131:	75 1a                	jne    c010b14d <strtol+0x83>
c010b133:	8b 45 08             	mov    0x8(%ebp),%eax
c010b136:	83 c0 01             	add    $0x1,%eax
c010b139:	0f b6 00             	movzbl (%eax),%eax
c010b13c:	3c 78                	cmp    $0x78,%al
c010b13e:	75 0d                	jne    c010b14d <strtol+0x83>
        s += 2, base = 16;
c010b140:	83 45 08 02          	addl   $0x2,0x8(%ebp)
c010b144:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
c010b14b:	eb 2a                	jmp    c010b177 <strtol+0xad>
    }
    else if (base == 0 && s[0] == '0') {
c010b14d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010b151:	75 17                	jne    c010b16a <strtol+0xa0>
c010b153:	8b 45 08             	mov    0x8(%ebp),%eax
c010b156:	0f b6 00             	movzbl (%eax),%eax
c010b159:	3c 30                	cmp    $0x30,%al
c010b15b:	75 0d                	jne    c010b16a <strtol+0xa0>
        s ++, base = 8;
c010b15d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010b161:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
c010b168:	eb 0d                	jmp    c010b177 <strtol+0xad>
    }
    else if (base == 0) {
c010b16a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010b16e:	75 07                	jne    c010b177 <strtol+0xad>
        base = 10;
c010b170:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

    // digits
    while (1) {
        int dig;

        if (*s >= '0' && *s <= '9') {
c010b177:	8b 45 08             	mov    0x8(%ebp),%eax
c010b17a:	0f b6 00             	movzbl (%eax),%eax
c010b17d:	3c 2f                	cmp    $0x2f,%al
c010b17f:	7e 1b                	jle    c010b19c <strtol+0xd2>
c010b181:	8b 45 08             	mov    0x8(%ebp),%eax
c010b184:	0f b6 00             	movzbl (%eax),%eax
c010b187:	3c 39                	cmp    $0x39,%al
c010b189:	7f 11                	jg     c010b19c <strtol+0xd2>
            dig = *s - '0';
c010b18b:	8b 45 08             	mov    0x8(%ebp),%eax
c010b18e:	0f b6 00             	movzbl (%eax),%eax
c010b191:	0f be c0             	movsbl %al,%eax
c010b194:	83 e8 30             	sub    $0x30,%eax
c010b197:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b19a:	eb 48                	jmp    c010b1e4 <strtol+0x11a>
        }
        else if (*s >= 'a' && *s <= 'z') {
c010b19c:	8b 45 08             	mov    0x8(%ebp),%eax
c010b19f:	0f b6 00             	movzbl (%eax),%eax
c010b1a2:	3c 60                	cmp    $0x60,%al
c010b1a4:	7e 1b                	jle    c010b1c1 <strtol+0xf7>
c010b1a6:	8b 45 08             	mov    0x8(%ebp),%eax
c010b1a9:	0f b6 00             	movzbl (%eax),%eax
c010b1ac:	3c 7a                	cmp    $0x7a,%al
c010b1ae:	7f 11                	jg     c010b1c1 <strtol+0xf7>
            dig = *s - 'a' + 10;
c010b1b0:	8b 45 08             	mov    0x8(%ebp),%eax
c010b1b3:	0f b6 00             	movzbl (%eax),%eax
c010b1b6:	0f be c0             	movsbl %al,%eax
c010b1b9:	83 e8 57             	sub    $0x57,%eax
c010b1bc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b1bf:	eb 23                	jmp    c010b1e4 <strtol+0x11a>
        }
        else if (*s >= 'A' && *s <= 'Z') {
c010b1c1:	8b 45 08             	mov    0x8(%ebp),%eax
c010b1c4:	0f b6 00             	movzbl (%eax),%eax
c010b1c7:	3c 40                	cmp    $0x40,%al
c010b1c9:	7e 3c                	jle    c010b207 <strtol+0x13d>
c010b1cb:	8b 45 08             	mov    0x8(%ebp),%eax
c010b1ce:	0f b6 00             	movzbl (%eax),%eax
c010b1d1:	3c 5a                	cmp    $0x5a,%al
c010b1d3:	7f 32                	jg     c010b207 <strtol+0x13d>
            dig = *s - 'A' + 10;
c010b1d5:	8b 45 08             	mov    0x8(%ebp),%eax
c010b1d8:	0f b6 00             	movzbl (%eax),%eax
c010b1db:	0f be c0             	movsbl %al,%eax
c010b1de:	83 e8 37             	sub    $0x37,%eax
c010b1e1:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        else {
            break;
        }
        if (dig >= base) {
c010b1e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b1e7:	3b 45 10             	cmp    0x10(%ebp),%eax
c010b1ea:	7d 1a                	jge    c010b206 <strtol+0x13c>
            break;
        }
        s ++, val = (val * base) + dig;
c010b1ec:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010b1f0:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010b1f3:	0f af 45 10          	imul   0x10(%ebp),%eax
c010b1f7:	89 c2                	mov    %eax,%edx
c010b1f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b1fc:	01 d0                	add    %edx,%eax
c010b1fe:	89 45 f8             	mov    %eax,-0x8(%ebp)
        // we don't properly detect overflow!
    }
c010b201:	e9 71 ff ff ff       	jmp    c010b177 <strtol+0xad>
        }
        else {
            break;
        }
        if (dig >= base) {
            break;
c010b206:	90                   	nop
        }
        s ++, val = (val * base) + dig;
        // we don't properly detect overflow!
    }

    if (endptr) {
c010b207:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010b20b:	74 08                	je     c010b215 <strtol+0x14b>
        *endptr = (char *) s;
c010b20d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b210:	8b 55 08             	mov    0x8(%ebp),%edx
c010b213:	89 10                	mov    %edx,(%eax)
    }
    return (neg ? -val : val);
c010b215:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c010b219:	74 07                	je     c010b222 <strtol+0x158>
c010b21b:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010b21e:	f7 d8                	neg    %eax
c010b220:	eb 03                	jmp    c010b225 <strtol+0x15b>
c010b222:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c010b225:	c9                   	leave  
c010b226:	c3                   	ret    

c010b227 <memset>:
 * @n:      number of bytes to be set to the value
 *
 * The memset() function returns @s.
 * */
void *
memset(void *s, char c, size_t n) {
c010b227:	55                   	push   %ebp
c010b228:	89 e5                	mov    %esp,%ebp
c010b22a:	57                   	push   %edi
c010b22b:	83 ec 24             	sub    $0x24,%esp
c010b22e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b231:	88 45 d8             	mov    %al,-0x28(%ebp)
#ifdef __HAVE_ARCH_MEMSET
    return __memset(s, c, n);
c010b234:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
c010b238:	8b 55 08             	mov    0x8(%ebp),%edx
c010b23b:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010b23e:	88 45 f7             	mov    %al,-0x9(%ebp)
c010b241:	8b 45 10             	mov    0x10(%ebp),%eax
c010b244:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_MEMSET
#define __HAVE_ARCH_MEMSET
static inline void *
__memset(void *s, char c, size_t n) {
    int d0, d1;
    asm volatile (
c010b247:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010b24a:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c010b24e:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010b251:	89 d7                	mov    %edx,%edi
c010b253:	f3 aa                	rep stos %al,%es:(%edi)
c010b255:	89 fa                	mov    %edi,%edx
c010b257:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c010b25a:	89 55 e8             	mov    %edx,-0x18(%ebp)
        "rep; stosb;"
        : "=&c" (d0), "=&D" (d1)
        : "0" (n), "a" (c), "1" (s)
        : "memory");
    return s;
c010b25d:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010b260:	90                   	nop
    while (n -- > 0) {
        *p ++ = c;
    }
    return s;
#endif /* __HAVE_ARCH_MEMSET */
}
c010b261:	83 c4 24             	add    $0x24,%esp
c010b264:	5f                   	pop    %edi
c010b265:	5d                   	pop    %ebp
c010b266:	c3                   	ret    

c010b267 <memmove>:
 * @n:      number of bytes to copy
 *
 * The memmove() function returns @dst.
 * */
void *
memmove(void *dst, const void *src, size_t n) {
c010b267:	55                   	push   %ebp
c010b268:	89 e5                	mov    %esp,%ebp
c010b26a:	57                   	push   %edi
c010b26b:	56                   	push   %esi
c010b26c:	53                   	push   %ebx
c010b26d:	83 ec 30             	sub    $0x30,%esp
c010b270:	8b 45 08             	mov    0x8(%ebp),%eax
c010b273:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b276:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b279:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010b27c:	8b 45 10             	mov    0x10(%ebp),%eax
c010b27f:	89 45 e8             	mov    %eax,-0x18(%ebp)

#ifndef __HAVE_ARCH_MEMMOVE
#define __HAVE_ARCH_MEMMOVE
static inline void *
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
c010b282:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b285:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010b288:	73 42                	jae    c010b2cc <memmove+0x65>
c010b28a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b28d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010b290:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b293:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010b296:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b299:	89 45 dc             	mov    %eax,-0x24(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c010b29c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b29f:	c1 e8 02             	shr    $0x2,%eax
c010b2a2:	89 c1                	mov    %eax,%ecx
#ifndef __HAVE_ARCH_MEMCPY
#define __HAVE_ARCH_MEMCPY
static inline void *
__memcpy(void *dst, const void *src, size_t n) {
    int d0, d1, d2;
    asm volatile (
c010b2a4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010b2a7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b2aa:	89 d7                	mov    %edx,%edi
c010b2ac:	89 c6                	mov    %eax,%esi
c010b2ae:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010b2b0:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c010b2b3:	83 e1 03             	and    $0x3,%ecx
c010b2b6:	74 02                	je     c010b2ba <memmove+0x53>
c010b2b8:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010b2ba:	89 f0                	mov    %esi,%eax
c010b2bc:	89 fa                	mov    %edi,%edx
c010b2be:	89 4d d8             	mov    %ecx,-0x28(%ebp)
c010b2c1:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010b2c4:	89 45 d0             	mov    %eax,-0x30(%ebp)
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
        : "memory");
    return dst;
c010b2c7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
#ifdef __HAVE_ARCH_MEMMOVE
    return __memmove(dst, src, n);
c010b2ca:	eb 36                	jmp    c010b302 <memmove+0x9b>
    asm volatile (
        "std;"
        "rep; movsb;"
        "cld;"
        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
c010b2cc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b2cf:	8d 50 ff             	lea    -0x1(%eax),%edx
c010b2d2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b2d5:	01 c2                	add    %eax,%edx
c010b2d7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b2da:	8d 48 ff             	lea    -0x1(%eax),%ecx
c010b2dd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b2e0:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
        return __memcpy(dst, src, n);
    }
    int d0, d1, d2;
    asm volatile (
c010b2e3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b2e6:	89 c1                	mov    %eax,%ecx
c010b2e8:	89 d8                	mov    %ebx,%eax
c010b2ea:	89 d6                	mov    %edx,%esi
c010b2ec:	89 c7                	mov    %eax,%edi
c010b2ee:	fd                   	std    
c010b2ef:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010b2f1:	fc                   	cld    
c010b2f2:	89 f8                	mov    %edi,%eax
c010b2f4:	89 f2                	mov    %esi,%edx
c010b2f6:	89 4d cc             	mov    %ecx,-0x34(%ebp)
c010b2f9:	89 55 c8             	mov    %edx,-0x38(%ebp)
c010b2fc:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        "rep; movsb;"
        "cld;"
        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
        : "memory");
    return dst;
c010b2ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
            *d ++ = *s ++;
        }
    }
    return dst;
#endif /* __HAVE_ARCH_MEMMOVE */
}
c010b302:	83 c4 30             	add    $0x30,%esp
c010b305:	5b                   	pop    %ebx
c010b306:	5e                   	pop    %esi
c010b307:	5f                   	pop    %edi
c010b308:	5d                   	pop    %ebp
c010b309:	c3                   	ret    

c010b30a <memcpy>:
 * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
 * by both @src and @dst, should be at least @n bytes, and should not overlap
 * (for overlapping memory area, memmove is a safer approach).
 * */
void *
memcpy(void *dst, const void *src, size_t n) {
c010b30a:	55                   	push   %ebp
c010b30b:	89 e5                	mov    %esp,%ebp
c010b30d:	57                   	push   %edi
c010b30e:	56                   	push   %esi
c010b30f:	83 ec 20             	sub    $0x20,%esp
c010b312:	8b 45 08             	mov    0x8(%ebp),%eax
c010b315:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b318:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b31b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b31e:	8b 45 10             	mov    0x10(%ebp),%eax
c010b321:	89 45 ec             	mov    %eax,-0x14(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c010b324:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b327:	c1 e8 02             	shr    $0x2,%eax
c010b32a:	89 c1                	mov    %eax,%ecx
#ifndef __HAVE_ARCH_MEMCPY
#define __HAVE_ARCH_MEMCPY
static inline void *
__memcpy(void *dst, const void *src, size_t n) {
    int d0, d1, d2;
    asm volatile (
c010b32c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b32f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b332:	89 d7                	mov    %edx,%edi
c010b334:	89 c6                	mov    %eax,%esi
c010b336:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010b338:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c010b33b:	83 e1 03             	and    $0x3,%ecx
c010b33e:	74 02                	je     c010b342 <memcpy+0x38>
c010b340:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010b342:	89 f0                	mov    %esi,%eax
c010b344:	89 fa                	mov    %edi,%edx
c010b346:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c010b349:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c010b34c:	89 45 e0             	mov    %eax,-0x20(%ebp)
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
        : "memory");
    return dst;
c010b34f:	8b 45 f4             	mov    -0xc(%ebp),%eax
#ifdef __HAVE_ARCH_MEMCPY
    return __memcpy(dst, src, n);
c010b352:	90                   	nop
    while (n -- > 0) {
        *d ++ = *s ++;
    }
    return dst;
#endif /* __HAVE_ARCH_MEMCPY */
}
c010b353:	83 c4 20             	add    $0x20,%esp
c010b356:	5e                   	pop    %esi
c010b357:	5f                   	pop    %edi
c010b358:	5d                   	pop    %ebp
c010b359:	c3                   	ret    

c010b35a <memcmp>:
 *   match in both memory blocks has a greater value in @v1 than in @v2
 *   as if evaluated as unsigned char values;
 * - And a value less than zero indicates the opposite.
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
c010b35a:	55                   	push   %ebp
c010b35b:	89 e5                	mov    %esp,%ebp
c010b35d:	83 ec 10             	sub    $0x10,%esp
    const char *s1 = (const char *)v1;
c010b360:	8b 45 08             	mov    0x8(%ebp),%eax
c010b363:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s2 = (const char *)v2;
c010b366:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b369:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (n -- > 0) {
c010b36c:	eb 30                	jmp    c010b39e <memcmp+0x44>
        if (*s1 != *s2) {
c010b36e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010b371:	0f b6 10             	movzbl (%eax),%edx
c010b374:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010b377:	0f b6 00             	movzbl (%eax),%eax
c010b37a:	38 c2                	cmp    %al,%dl
c010b37c:	74 18                	je     c010b396 <memcmp+0x3c>
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
c010b37e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010b381:	0f b6 00             	movzbl (%eax),%eax
c010b384:	0f b6 d0             	movzbl %al,%edx
c010b387:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010b38a:	0f b6 00             	movzbl (%eax),%eax
c010b38d:	0f b6 c0             	movzbl %al,%eax
c010b390:	29 c2                	sub    %eax,%edx
c010b392:	89 d0                	mov    %edx,%eax
c010b394:	eb 1a                	jmp    c010b3b0 <memcmp+0x56>
        }
        s1 ++, s2 ++;
c010b396:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010b39a:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
    const char *s1 = (const char *)v1;
    const char *s2 = (const char *)v2;
    while (n -- > 0) {
c010b39e:	8b 45 10             	mov    0x10(%ebp),%eax
c010b3a1:	8d 50 ff             	lea    -0x1(%eax),%edx
c010b3a4:	89 55 10             	mov    %edx,0x10(%ebp)
c010b3a7:	85 c0                	test   %eax,%eax
c010b3a9:	75 c3                	jne    c010b36e <memcmp+0x14>
        if (*s1 != *s2) {
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
        }
        s1 ++, s2 ++;
    }
    return 0;
c010b3ab:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010b3b0:	c9                   	leave  
c010b3b1:	c3                   	ret    

c010b3b2 <printnum>:
 * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
 * @padc:       character that padded on the left if the actual width is less than @width
 * */
static void
printnum(void (*putch)(int, void*), void *putdat,
        unsigned long long num, unsigned base, int width, int padc) {
c010b3b2:	55                   	push   %ebp
c010b3b3:	89 e5                	mov    %esp,%ebp
c010b3b5:	83 ec 38             	sub    $0x38,%esp
c010b3b8:	8b 45 10             	mov    0x10(%ebp),%eax
c010b3bb:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010b3be:	8b 45 14             	mov    0x14(%ebp),%eax
c010b3c1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    unsigned long long result = num;
c010b3c4:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b3c7:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010b3ca:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010b3cd:	89 55 ec             	mov    %edx,-0x14(%ebp)
    unsigned mod = do_div(result, base);
c010b3d0:	8b 45 18             	mov    0x18(%ebp),%eax
c010b3d3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010b3d6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b3d9:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010b3dc:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010b3df:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010b3e2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b3e5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b3e8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b3ec:	74 1c                	je     c010b40a <printnum+0x58>
c010b3ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b3f1:	ba 00 00 00 00       	mov    $0x0,%edx
c010b3f6:	f7 75 e4             	divl   -0x1c(%ebp)
c010b3f9:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010b3fc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b3ff:	ba 00 00 00 00       	mov    $0x0,%edx
c010b404:	f7 75 e4             	divl   -0x1c(%ebp)
c010b407:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b40a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b40d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b410:	f7 75 e4             	divl   -0x1c(%ebp)
c010b413:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010b416:	89 55 dc             	mov    %edx,-0x24(%ebp)
c010b419:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b41c:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010b41f:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010b422:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010b425:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b428:	89 45 d8             	mov    %eax,-0x28(%ebp)

    // first recursively print all preceding (more significant) digits
    if (num >= base) {
c010b42b:	8b 45 18             	mov    0x18(%ebp),%eax
c010b42e:	ba 00 00 00 00       	mov    $0x0,%edx
c010b433:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c010b436:	77 41                	ja     c010b479 <printnum+0xc7>
c010b438:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c010b43b:	72 05                	jb     c010b442 <printnum+0x90>
c010b43d:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c010b440:	77 37                	ja     c010b479 <printnum+0xc7>
        printnum(putch, putdat, result, base, width - 1, padc);
c010b442:	8b 45 1c             	mov    0x1c(%ebp),%eax
c010b445:	83 e8 01             	sub    $0x1,%eax
c010b448:	83 ec 04             	sub    $0x4,%esp
c010b44b:	ff 75 20             	pushl  0x20(%ebp)
c010b44e:	50                   	push   %eax
c010b44f:	ff 75 18             	pushl  0x18(%ebp)
c010b452:	ff 75 ec             	pushl  -0x14(%ebp)
c010b455:	ff 75 e8             	pushl  -0x18(%ebp)
c010b458:	ff 75 0c             	pushl  0xc(%ebp)
c010b45b:	ff 75 08             	pushl  0x8(%ebp)
c010b45e:	e8 4f ff ff ff       	call   c010b3b2 <printnum>
c010b463:	83 c4 20             	add    $0x20,%esp
c010b466:	eb 1b                	jmp    c010b483 <printnum+0xd1>
    } else {
        // print any needed pad characters before first digit
        while (-- width > 0)
            putch(padc, putdat);
c010b468:	83 ec 08             	sub    $0x8,%esp
c010b46b:	ff 75 0c             	pushl  0xc(%ebp)
c010b46e:	ff 75 20             	pushl  0x20(%ebp)
c010b471:	8b 45 08             	mov    0x8(%ebp),%eax
c010b474:	ff d0                	call   *%eax
c010b476:	83 c4 10             	add    $0x10,%esp
    // first recursively print all preceding (more significant) digits
    if (num >= base) {
        printnum(putch, putdat, result, base, width - 1, padc);
    } else {
        // print any needed pad characters before first digit
        while (-- width > 0)
c010b479:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
c010b47d:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c010b481:	7f e5                	jg     c010b468 <printnum+0xb6>
            putch(padc, putdat);
    }
    // then print this (the least significant) digit
    putch("0123456789abcdef"[mod], putdat);
c010b483:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b486:	05 a4 e3 10 c0       	add    $0xc010e3a4,%eax
c010b48b:	0f b6 00             	movzbl (%eax),%eax
c010b48e:	0f be c0             	movsbl %al,%eax
c010b491:	83 ec 08             	sub    $0x8,%esp
c010b494:	ff 75 0c             	pushl  0xc(%ebp)
c010b497:	50                   	push   %eax
c010b498:	8b 45 08             	mov    0x8(%ebp),%eax
c010b49b:	ff d0                	call   *%eax
c010b49d:	83 c4 10             	add    $0x10,%esp
}
c010b4a0:	90                   	nop
c010b4a1:	c9                   	leave  
c010b4a2:	c3                   	ret    

c010b4a3 <getuint>:
 * getuint - get an unsigned int of various possible sizes from a varargs list
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static unsigned long long
getuint(va_list *ap, int lflag) {
c010b4a3:	55                   	push   %ebp
c010b4a4:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c010b4a6:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c010b4aa:	7e 14                	jle    c010b4c0 <getuint+0x1d>
        return va_arg(*ap, unsigned long long);
c010b4ac:	8b 45 08             	mov    0x8(%ebp),%eax
c010b4af:	8b 00                	mov    (%eax),%eax
c010b4b1:	8d 48 08             	lea    0x8(%eax),%ecx
c010b4b4:	8b 55 08             	mov    0x8(%ebp),%edx
c010b4b7:	89 0a                	mov    %ecx,(%edx)
c010b4b9:	8b 50 04             	mov    0x4(%eax),%edx
c010b4bc:	8b 00                	mov    (%eax),%eax
c010b4be:	eb 30                	jmp    c010b4f0 <getuint+0x4d>
    }
    else if (lflag) {
c010b4c0:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010b4c4:	74 16                	je     c010b4dc <getuint+0x39>
        return va_arg(*ap, unsigned long);
c010b4c6:	8b 45 08             	mov    0x8(%ebp),%eax
c010b4c9:	8b 00                	mov    (%eax),%eax
c010b4cb:	8d 48 04             	lea    0x4(%eax),%ecx
c010b4ce:	8b 55 08             	mov    0x8(%ebp),%edx
c010b4d1:	89 0a                	mov    %ecx,(%edx)
c010b4d3:	8b 00                	mov    (%eax),%eax
c010b4d5:	ba 00 00 00 00       	mov    $0x0,%edx
c010b4da:	eb 14                	jmp    c010b4f0 <getuint+0x4d>
    }
    else {
        return va_arg(*ap, unsigned int);
c010b4dc:	8b 45 08             	mov    0x8(%ebp),%eax
c010b4df:	8b 00                	mov    (%eax),%eax
c010b4e1:	8d 48 04             	lea    0x4(%eax),%ecx
c010b4e4:	8b 55 08             	mov    0x8(%ebp),%edx
c010b4e7:	89 0a                	mov    %ecx,(%edx)
c010b4e9:	8b 00                	mov    (%eax),%eax
c010b4eb:	ba 00 00 00 00       	mov    $0x0,%edx
    }
}
c010b4f0:	5d                   	pop    %ebp
c010b4f1:	c3                   	ret    

c010b4f2 <getint>:
 * getint - same as getuint but signed, we can't use getuint because of sign extension
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static long long
getint(va_list *ap, int lflag) {
c010b4f2:	55                   	push   %ebp
c010b4f3:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c010b4f5:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c010b4f9:	7e 14                	jle    c010b50f <getint+0x1d>
        return va_arg(*ap, long long);
c010b4fb:	8b 45 08             	mov    0x8(%ebp),%eax
c010b4fe:	8b 00                	mov    (%eax),%eax
c010b500:	8d 48 08             	lea    0x8(%eax),%ecx
c010b503:	8b 55 08             	mov    0x8(%ebp),%edx
c010b506:	89 0a                	mov    %ecx,(%edx)
c010b508:	8b 50 04             	mov    0x4(%eax),%edx
c010b50b:	8b 00                	mov    (%eax),%eax
c010b50d:	eb 28                	jmp    c010b537 <getint+0x45>
    }
    else if (lflag) {
c010b50f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010b513:	74 12                	je     c010b527 <getint+0x35>
        return va_arg(*ap, long);
c010b515:	8b 45 08             	mov    0x8(%ebp),%eax
c010b518:	8b 00                	mov    (%eax),%eax
c010b51a:	8d 48 04             	lea    0x4(%eax),%ecx
c010b51d:	8b 55 08             	mov    0x8(%ebp),%edx
c010b520:	89 0a                	mov    %ecx,(%edx)
c010b522:	8b 00                	mov    (%eax),%eax
c010b524:	99                   	cltd   
c010b525:	eb 10                	jmp    c010b537 <getint+0x45>
    }
    else {
        return va_arg(*ap, int);
c010b527:	8b 45 08             	mov    0x8(%ebp),%eax
c010b52a:	8b 00                	mov    (%eax),%eax
c010b52c:	8d 48 04             	lea    0x4(%eax),%ecx
c010b52f:	8b 55 08             	mov    0x8(%ebp),%edx
c010b532:	89 0a                	mov    %ecx,(%edx)
c010b534:	8b 00                	mov    (%eax),%eax
c010b536:	99                   	cltd   
    }
}
c010b537:	5d                   	pop    %ebp
c010b538:	c3                   	ret    

c010b539 <printfmt>:
 * @putch:      specified putch function, print a single character
 * @putdat:     used by @putch function
 * @fmt:        the format string to use
 * */
void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
c010b539:	55                   	push   %ebp
c010b53a:	89 e5                	mov    %esp,%ebp
c010b53c:	83 ec 18             	sub    $0x18,%esp
    va_list ap;

    va_start(ap, fmt);
c010b53f:	8d 45 14             	lea    0x14(%ebp),%eax
c010b542:	89 45 f4             	mov    %eax,-0xc(%ebp)
    vprintfmt(putch, putdat, fmt, ap);
c010b545:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b548:	50                   	push   %eax
c010b549:	ff 75 10             	pushl  0x10(%ebp)
c010b54c:	ff 75 0c             	pushl  0xc(%ebp)
c010b54f:	ff 75 08             	pushl  0x8(%ebp)
c010b552:	e8 06 00 00 00       	call   c010b55d <vprintfmt>
c010b557:	83 c4 10             	add    $0x10,%esp
    va_end(ap);
}
c010b55a:	90                   	nop
c010b55b:	c9                   	leave  
c010b55c:	c3                   	ret    

c010b55d <vprintfmt>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want printfmt() instead.
 * */
void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
c010b55d:	55                   	push   %ebp
c010b55e:	89 e5                	mov    %esp,%ebp
c010b560:	56                   	push   %esi
c010b561:	53                   	push   %ebx
c010b562:	83 ec 20             	sub    $0x20,%esp
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c010b565:	eb 17                	jmp    c010b57e <vprintfmt+0x21>
            if (ch == '\0') {
c010b567:	85 db                	test   %ebx,%ebx
c010b569:	0f 84 8e 03 00 00    	je     c010b8fd <vprintfmt+0x3a0>
                return;
            }
            putch(ch, putdat);
c010b56f:	83 ec 08             	sub    $0x8,%esp
c010b572:	ff 75 0c             	pushl  0xc(%ebp)
c010b575:	53                   	push   %ebx
c010b576:	8b 45 08             	mov    0x8(%ebp),%eax
c010b579:	ff d0                	call   *%eax
c010b57b:	83 c4 10             	add    $0x10,%esp
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c010b57e:	8b 45 10             	mov    0x10(%ebp),%eax
c010b581:	8d 50 01             	lea    0x1(%eax),%edx
c010b584:	89 55 10             	mov    %edx,0x10(%ebp)
c010b587:	0f b6 00             	movzbl (%eax),%eax
c010b58a:	0f b6 d8             	movzbl %al,%ebx
c010b58d:	83 fb 25             	cmp    $0x25,%ebx
c010b590:	75 d5                	jne    c010b567 <vprintfmt+0xa>
            }
            putch(ch, putdat);
        }

        // Process a %-escape sequence
        char padc = ' ';
c010b592:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
        width = precision = -1;
c010b596:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
c010b59d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b5a0:	89 45 e8             	mov    %eax,-0x18(%ebp)
        lflag = altflag = 0;
c010b5a3:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c010b5aa:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b5ad:	89 45 e0             	mov    %eax,-0x20(%ebp)

    reswitch:
        switch (ch = *(unsigned char *)fmt ++) {
c010b5b0:	8b 45 10             	mov    0x10(%ebp),%eax
c010b5b3:	8d 50 01             	lea    0x1(%eax),%edx
c010b5b6:	89 55 10             	mov    %edx,0x10(%ebp)
c010b5b9:	0f b6 00             	movzbl (%eax),%eax
c010b5bc:	0f b6 d8             	movzbl %al,%ebx
c010b5bf:	8d 43 dd             	lea    -0x23(%ebx),%eax
c010b5c2:	83 f8 55             	cmp    $0x55,%eax
c010b5c5:	0f 87 05 03 00 00    	ja     c010b8d0 <vprintfmt+0x373>
c010b5cb:	8b 04 85 c8 e3 10 c0 	mov    -0x3fef1c38(,%eax,4),%eax
c010b5d2:	ff e0                	jmp    *%eax

        // flag to pad on the right
        case '-':
            padc = '-';
c010b5d4:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
            goto reswitch;
c010b5d8:	eb d6                	jmp    c010b5b0 <vprintfmt+0x53>

        // flag to pad with 0's instead of spaces
        case '0':
            padc = '0';
c010b5da:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
            goto reswitch;
c010b5de:	eb d0                	jmp    c010b5b0 <vprintfmt+0x53>

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
c010b5e0:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
                precision = precision * 10 + ch - '0';
c010b5e7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010b5ea:	89 d0                	mov    %edx,%eax
c010b5ec:	c1 e0 02             	shl    $0x2,%eax
c010b5ef:	01 d0                	add    %edx,%eax
c010b5f1:	01 c0                	add    %eax,%eax
c010b5f3:	01 d8                	add    %ebx,%eax
c010b5f5:	83 e8 30             	sub    $0x30,%eax
c010b5f8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                ch = *fmt;
c010b5fb:	8b 45 10             	mov    0x10(%ebp),%eax
c010b5fe:	0f b6 00             	movzbl (%eax),%eax
c010b601:	0f be d8             	movsbl %al,%ebx
                if (ch < '0' || ch > '9') {
c010b604:	83 fb 2f             	cmp    $0x2f,%ebx
c010b607:	7e 39                	jle    c010b642 <vprintfmt+0xe5>
c010b609:	83 fb 39             	cmp    $0x39,%ebx
c010b60c:	7f 34                	jg     c010b642 <vprintfmt+0xe5>
            padc = '0';
            goto reswitch;

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
c010b60e:	83 45 10 01          	addl   $0x1,0x10(%ebp)
                precision = precision * 10 + ch - '0';
                ch = *fmt;
                if (ch < '0' || ch > '9') {
                    break;
                }
            }
c010b612:	eb d3                	jmp    c010b5e7 <vprintfmt+0x8a>
            goto process_precision;

        case '*':
            precision = va_arg(ap, int);
c010b614:	8b 45 14             	mov    0x14(%ebp),%eax
c010b617:	8d 50 04             	lea    0x4(%eax),%edx
c010b61a:	89 55 14             	mov    %edx,0x14(%ebp)
c010b61d:	8b 00                	mov    (%eax),%eax
c010b61f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            goto process_precision;
c010b622:	eb 1f                	jmp    c010b643 <vprintfmt+0xe6>

        case '.':
            if (width < 0)
c010b624:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010b628:	79 86                	jns    c010b5b0 <vprintfmt+0x53>
                width = 0;
c010b62a:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
            goto reswitch;
c010b631:	e9 7a ff ff ff       	jmp    c010b5b0 <vprintfmt+0x53>

        case '#':
            altflag = 1;
c010b636:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
            goto reswitch;
c010b63d:	e9 6e ff ff ff       	jmp    c010b5b0 <vprintfmt+0x53>
                ch = *fmt;
                if (ch < '0' || ch > '9') {
                    break;
                }
            }
            goto process_precision;
c010b642:	90                   	nop
        case '#':
            altflag = 1;
            goto reswitch;

        process_precision:
            if (width < 0)
c010b643:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010b647:	0f 89 63 ff ff ff    	jns    c010b5b0 <vprintfmt+0x53>
                width = precision, precision = -1;
c010b64d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b650:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010b653:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
            goto reswitch;
c010b65a:	e9 51 ff ff ff       	jmp    c010b5b0 <vprintfmt+0x53>

        // long flag (doubled for long long)
        case 'l':
            lflag ++;
c010b65f:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
            goto reswitch;
c010b663:	e9 48 ff ff ff       	jmp    c010b5b0 <vprintfmt+0x53>

        // character
        case 'c':
            putch(va_arg(ap, int), putdat);
c010b668:	8b 45 14             	mov    0x14(%ebp),%eax
c010b66b:	8d 50 04             	lea    0x4(%eax),%edx
c010b66e:	89 55 14             	mov    %edx,0x14(%ebp)
c010b671:	8b 00                	mov    (%eax),%eax
c010b673:	83 ec 08             	sub    $0x8,%esp
c010b676:	ff 75 0c             	pushl  0xc(%ebp)
c010b679:	50                   	push   %eax
c010b67a:	8b 45 08             	mov    0x8(%ebp),%eax
c010b67d:	ff d0                	call   *%eax
c010b67f:	83 c4 10             	add    $0x10,%esp
            break;
c010b682:	e9 71 02 00 00       	jmp    c010b8f8 <vprintfmt+0x39b>

        // error message
        case 'e':
            err = va_arg(ap, int);
c010b687:	8b 45 14             	mov    0x14(%ebp),%eax
c010b68a:	8d 50 04             	lea    0x4(%eax),%edx
c010b68d:	89 55 14             	mov    %edx,0x14(%ebp)
c010b690:	8b 18                	mov    (%eax),%ebx
            if (err < 0) {
c010b692:	85 db                	test   %ebx,%ebx
c010b694:	79 02                	jns    c010b698 <vprintfmt+0x13b>
                err = -err;
c010b696:	f7 db                	neg    %ebx
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
c010b698:	83 fb 18             	cmp    $0x18,%ebx
c010b69b:	7f 0b                	jg     c010b6a8 <vprintfmt+0x14b>
c010b69d:	8b 34 9d 40 e3 10 c0 	mov    -0x3fef1cc0(,%ebx,4),%esi
c010b6a4:	85 f6                	test   %esi,%esi
c010b6a6:	75 19                	jne    c010b6c1 <vprintfmt+0x164>
                printfmt(putch, putdat, "error %d", err);
c010b6a8:	53                   	push   %ebx
c010b6a9:	68 b5 e3 10 c0       	push   $0xc010e3b5
c010b6ae:	ff 75 0c             	pushl  0xc(%ebp)
c010b6b1:	ff 75 08             	pushl  0x8(%ebp)
c010b6b4:	e8 80 fe ff ff       	call   c010b539 <printfmt>
c010b6b9:	83 c4 10             	add    $0x10,%esp
            }
            else {
                printfmt(putch, putdat, "%s", p);
            }
            break;
c010b6bc:	e9 37 02 00 00       	jmp    c010b8f8 <vprintfmt+0x39b>
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
                printfmt(putch, putdat, "error %d", err);
            }
            else {
                printfmt(putch, putdat, "%s", p);
c010b6c1:	56                   	push   %esi
c010b6c2:	68 be e3 10 c0       	push   $0xc010e3be
c010b6c7:	ff 75 0c             	pushl  0xc(%ebp)
c010b6ca:	ff 75 08             	pushl  0x8(%ebp)
c010b6cd:	e8 67 fe ff ff       	call   c010b539 <printfmt>
c010b6d2:	83 c4 10             	add    $0x10,%esp
            }
            break;
c010b6d5:	e9 1e 02 00 00       	jmp    c010b8f8 <vprintfmt+0x39b>

        // string
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
c010b6da:	8b 45 14             	mov    0x14(%ebp),%eax
c010b6dd:	8d 50 04             	lea    0x4(%eax),%edx
c010b6e0:	89 55 14             	mov    %edx,0x14(%ebp)
c010b6e3:	8b 30                	mov    (%eax),%esi
c010b6e5:	85 f6                	test   %esi,%esi
c010b6e7:	75 05                	jne    c010b6ee <vprintfmt+0x191>
                p = "(null)";
c010b6e9:	be c1 e3 10 c0       	mov    $0xc010e3c1,%esi
            }
            if (width > 0 && padc != '-') {
c010b6ee:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010b6f2:	7e 76                	jle    c010b76a <vprintfmt+0x20d>
c010b6f4:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
c010b6f8:	74 70                	je     c010b76a <vprintfmt+0x20d>
                for (width -= strnlen(p, precision); width > 0; width --) {
c010b6fa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b6fd:	83 ec 08             	sub    $0x8,%esp
c010b700:	50                   	push   %eax
c010b701:	56                   	push   %esi
c010b702:	e8 17 f8 ff ff       	call   c010af1e <strnlen>
c010b707:	83 c4 10             	add    $0x10,%esp
c010b70a:	89 c2                	mov    %eax,%edx
c010b70c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b70f:	29 d0                	sub    %edx,%eax
c010b711:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010b714:	eb 17                	jmp    c010b72d <vprintfmt+0x1d0>
                    putch(padc, putdat);
c010b716:	0f be 45 db          	movsbl -0x25(%ebp),%eax
c010b71a:	83 ec 08             	sub    $0x8,%esp
c010b71d:	ff 75 0c             	pushl  0xc(%ebp)
c010b720:	50                   	push   %eax
c010b721:	8b 45 08             	mov    0x8(%ebp),%eax
c010b724:	ff d0                	call   *%eax
c010b726:	83 c4 10             	add    $0x10,%esp
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
                p = "(null)";
            }
            if (width > 0 && padc != '-') {
                for (width -= strnlen(p, precision); width > 0; width --) {
c010b729:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c010b72d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010b731:	7f e3                	jg     c010b716 <vprintfmt+0x1b9>
                    putch(padc, putdat);
                }
            }
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c010b733:	eb 35                	jmp    c010b76a <vprintfmt+0x20d>
                if (altflag && (ch < ' ' || ch > '~')) {
c010b735:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010b739:	74 1c                	je     c010b757 <vprintfmt+0x1fa>
c010b73b:	83 fb 1f             	cmp    $0x1f,%ebx
c010b73e:	7e 05                	jle    c010b745 <vprintfmt+0x1e8>
c010b740:	83 fb 7e             	cmp    $0x7e,%ebx
c010b743:	7e 12                	jle    c010b757 <vprintfmt+0x1fa>
                    putch('?', putdat);
c010b745:	83 ec 08             	sub    $0x8,%esp
c010b748:	ff 75 0c             	pushl  0xc(%ebp)
c010b74b:	6a 3f                	push   $0x3f
c010b74d:	8b 45 08             	mov    0x8(%ebp),%eax
c010b750:	ff d0                	call   *%eax
c010b752:	83 c4 10             	add    $0x10,%esp
c010b755:	eb 0f                	jmp    c010b766 <vprintfmt+0x209>
                }
                else {
                    putch(ch, putdat);
c010b757:	83 ec 08             	sub    $0x8,%esp
c010b75a:	ff 75 0c             	pushl  0xc(%ebp)
c010b75d:	53                   	push   %ebx
c010b75e:	8b 45 08             	mov    0x8(%ebp),%eax
c010b761:	ff d0                	call   *%eax
c010b763:	83 c4 10             	add    $0x10,%esp
            if (width > 0 && padc != '-') {
                for (width -= strnlen(p, precision); width > 0; width --) {
                    putch(padc, putdat);
                }
            }
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c010b766:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c010b76a:	89 f0                	mov    %esi,%eax
c010b76c:	8d 70 01             	lea    0x1(%eax),%esi
c010b76f:	0f b6 00             	movzbl (%eax),%eax
c010b772:	0f be d8             	movsbl %al,%ebx
c010b775:	85 db                	test   %ebx,%ebx
c010b777:	74 26                	je     c010b79f <vprintfmt+0x242>
c010b779:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010b77d:	78 b6                	js     c010b735 <vprintfmt+0x1d8>
c010b77f:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
c010b783:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010b787:	79 ac                	jns    c010b735 <vprintfmt+0x1d8>
                }
                else {
                    putch(ch, putdat);
                }
            }
            for (; width > 0; width --) {
c010b789:	eb 14                	jmp    c010b79f <vprintfmt+0x242>
                putch(' ', putdat);
c010b78b:	83 ec 08             	sub    $0x8,%esp
c010b78e:	ff 75 0c             	pushl  0xc(%ebp)
c010b791:	6a 20                	push   $0x20
c010b793:	8b 45 08             	mov    0x8(%ebp),%eax
c010b796:	ff d0                	call   *%eax
c010b798:	83 c4 10             	add    $0x10,%esp
                }
                else {
                    putch(ch, putdat);
                }
            }
            for (; width > 0; width --) {
c010b79b:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c010b79f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010b7a3:	7f e6                	jg     c010b78b <vprintfmt+0x22e>
                putch(' ', putdat);
            }
            break;
c010b7a5:	e9 4e 01 00 00       	jmp    c010b8f8 <vprintfmt+0x39b>

        // (signed) decimal
        case 'd':
            num = getint(&ap, lflag);
c010b7aa:	83 ec 08             	sub    $0x8,%esp
c010b7ad:	ff 75 e0             	pushl  -0x20(%ebp)
c010b7b0:	8d 45 14             	lea    0x14(%ebp),%eax
c010b7b3:	50                   	push   %eax
c010b7b4:	e8 39 fd ff ff       	call   c010b4f2 <getint>
c010b7b9:	83 c4 10             	add    $0x10,%esp
c010b7bc:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b7bf:	89 55 f4             	mov    %edx,-0xc(%ebp)
            if ((long long)num < 0) {
c010b7c2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b7c5:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b7c8:	85 d2                	test   %edx,%edx
c010b7ca:	79 23                	jns    c010b7ef <vprintfmt+0x292>
                putch('-', putdat);
c010b7cc:	83 ec 08             	sub    $0x8,%esp
c010b7cf:	ff 75 0c             	pushl  0xc(%ebp)
c010b7d2:	6a 2d                	push   $0x2d
c010b7d4:	8b 45 08             	mov    0x8(%ebp),%eax
c010b7d7:	ff d0                	call   *%eax
c010b7d9:	83 c4 10             	add    $0x10,%esp
                num = -(long long)num;
c010b7dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b7df:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b7e2:	f7 d8                	neg    %eax
c010b7e4:	83 d2 00             	adc    $0x0,%edx
c010b7e7:	f7 da                	neg    %edx
c010b7e9:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b7ec:	89 55 f4             	mov    %edx,-0xc(%ebp)
            }
            base = 10;
c010b7ef:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c010b7f6:	e9 9f 00 00 00       	jmp    c010b89a <vprintfmt+0x33d>

        // unsigned decimal
        case 'u':
            num = getuint(&ap, lflag);
c010b7fb:	83 ec 08             	sub    $0x8,%esp
c010b7fe:	ff 75 e0             	pushl  -0x20(%ebp)
c010b801:	8d 45 14             	lea    0x14(%ebp),%eax
c010b804:	50                   	push   %eax
c010b805:	e8 99 fc ff ff       	call   c010b4a3 <getuint>
c010b80a:	83 c4 10             	add    $0x10,%esp
c010b80d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b810:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 10;
c010b813:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c010b81a:	eb 7e                	jmp    c010b89a <vprintfmt+0x33d>

        // (unsigned) octal
        case 'o':
            num = getuint(&ap, lflag);
c010b81c:	83 ec 08             	sub    $0x8,%esp
c010b81f:	ff 75 e0             	pushl  -0x20(%ebp)
c010b822:	8d 45 14             	lea    0x14(%ebp),%eax
c010b825:	50                   	push   %eax
c010b826:	e8 78 fc ff ff       	call   c010b4a3 <getuint>
c010b82b:	83 c4 10             	add    $0x10,%esp
c010b82e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b831:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 8;
c010b834:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
            goto number;
c010b83b:	eb 5d                	jmp    c010b89a <vprintfmt+0x33d>

        // pointer
        case 'p':
            putch('0', putdat);
c010b83d:	83 ec 08             	sub    $0x8,%esp
c010b840:	ff 75 0c             	pushl  0xc(%ebp)
c010b843:	6a 30                	push   $0x30
c010b845:	8b 45 08             	mov    0x8(%ebp),%eax
c010b848:	ff d0                	call   *%eax
c010b84a:	83 c4 10             	add    $0x10,%esp
            putch('x', putdat);
c010b84d:	83 ec 08             	sub    $0x8,%esp
c010b850:	ff 75 0c             	pushl  0xc(%ebp)
c010b853:	6a 78                	push   $0x78
c010b855:	8b 45 08             	mov    0x8(%ebp),%eax
c010b858:	ff d0                	call   *%eax
c010b85a:	83 c4 10             	add    $0x10,%esp
            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
c010b85d:	8b 45 14             	mov    0x14(%ebp),%eax
c010b860:	8d 50 04             	lea    0x4(%eax),%edx
c010b863:	89 55 14             	mov    %edx,0x14(%ebp)
c010b866:	8b 00                	mov    (%eax),%eax
c010b868:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b86b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            base = 16;
c010b872:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
            goto number;
c010b879:	eb 1f                	jmp    c010b89a <vprintfmt+0x33d>

        // (unsigned) hexadecimal
        case 'x':
            num = getuint(&ap, lflag);
c010b87b:	83 ec 08             	sub    $0x8,%esp
c010b87e:	ff 75 e0             	pushl  -0x20(%ebp)
c010b881:	8d 45 14             	lea    0x14(%ebp),%eax
c010b884:	50                   	push   %eax
c010b885:	e8 19 fc ff ff       	call   c010b4a3 <getuint>
c010b88a:	83 c4 10             	add    $0x10,%esp
c010b88d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b890:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 16;
c010b893:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
        number:
            printnum(putch, putdat, num, base, width, padc);
c010b89a:	0f be 55 db          	movsbl -0x25(%ebp),%edx
c010b89e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b8a1:	83 ec 04             	sub    $0x4,%esp
c010b8a4:	52                   	push   %edx
c010b8a5:	ff 75 e8             	pushl  -0x18(%ebp)
c010b8a8:	50                   	push   %eax
c010b8a9:	ff 75 f4             	pushl  -0xc(%ebp)
c010b8ac:	ff 75 f0             	pushl  -0x10(%ebp)
c010b8af:	ff 75 0c             	pushl  0xc(%ebp)
c010b8b2:	ff 75 08             	pushl  0x8(%ebp)
c010b8b5:	e8 f8 fa ff ff       	call   c010b3b2 <printnum>
c010b8ba:	83 c4 20             	add    $0x20,%esp
            break;
c010b8bd:	eb 39                	jmp    c010b8f8 <vprintfmt+0x39b>

        // escaped '%' character
        case '%':
            putch(ch, putdat);
c010b8bf:	83 ec 08             	sub    $0x8,%esp
c010b8c2:	ff 75 0c             	pushl  0xc(%ebp)
c010b8c5:	53                   	push   %ebx
c010b8c6:	8b 45 08             	mov    0x8(%ebp),%eax
c010b8c9:	ff d0                	call   *%eax
c010b8cb:	83 c4 10             	add    $0x10,%esp
            break;
c010b8ce:	eb 28                	jmp    c010b8f8 <vprintfmt+0x39b>

        // unrecognized escape sequence - just print it literally
        default:
            putch('%', putdat);
c010b8d0:	83 ec 08             	sub    $0x8,%esp
c010b8d3:	ff 75 0c             	pushl  0xc(%ebp)
c010b8d6:	6a 25                	push   $0x25
c010b8d8:	8b 45 08             	mov    0x8(%ebp),%eax
c010b8db:	ff d0                	call   *%eax
c010b8dd:	83 c4 10             	add    $0x10,%esp
            for (fmt --; fmt[-1] != '%'; fmt --)
c010b8e0:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c010b8e4:	eb 04                	jmp    c010b8ea <vprintfmt+0x38d>
c010b8e6:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c010b8ea:	8b 45 10             	mov    0x10(%ebp),%eax
c010b8ed:	83 e8 01             	sub    $0x1,%eax
c010b8f0:	0f b6 00             	movzbl (%eax),%eax
c010b8f3:	3c 25                	cmp    $0x25,%al
c010b8f5:	75 ef                	jne    c010b8e6 <vprintfmt+0x389>
                /* do nothing */;
            break;
c010b8f7:	90                   	nop
        }
    }
c010b8f8:	e9 68 fc ff ff       	jmp    c010b565 <vprintfmt+0x8>
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
            if (ch == '\0') {
                return;
c010b8fd:	90                   	nop
            for (fmt --; fmt[-1] != '%'; fmt --)
                /* do nothing */;
            break;
        }
    }
}
c010b8fe:	8d 65 f8             	lea    -0x8(%ebp),%esp
c010b901:	5b                   	pop    %ebx
c010b902:	5e                   	pop    %esi
c010b903:	5d                   	pop    %ebp
c010b904:	c3                   	ret    

c010b905 <sprintputch>:
 * sprintputch - 'print' a single character in a buffer
 * @ch:         the character will be printed
 * @b:          the buffer to place the character @ch
 * */
static void
sprintputch(int ch, struct sprintbuf *b) {
c010b905:	55                   	push   %ebp
c010b906:	89 e5                	mov    %esp,%ebp
    b->cnt ++;
c010b908:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b90b:	8b 40 08             	mov    0x8(%eax),%eax
c010b90e:	8d 50 01             	lea    0x1(%eax),%edx
c010b911:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b914:	89 50 08             	mov    %edx,0x8(%eax)
    if (b->buf < b->ebuf) {
c010b917:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b91a:	8b 10                	mov    (%eax),%edx
c010b91c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b91f:	8b 40 04             	mov    0x4(%eax),%eax
c010b922:	39 c2                	cmp    %eax,%edx
c010b924:	73 12                	jae    c010b938 <sprintputch+0x33>
        *b->buf ++ = ch;
c010b926:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b929:	8b 00                	mov    (%eax),%eax
c010b92b:	8d 48 01             	lea    0x1(%eax),%ecx
c010b92e:	8b 55 0c             	mov    0xc(%ebp),%edx
c010b931:	89 0a                	mov    %ecx,(%edx)
c010b933:	8b 55 08             	mov    0x8(%ebp),%edx
c010b936:	88 10                	mov    %dl,(%eax)
    }
}
c010b938:	90                   	nop
c010b939:	5d                   	pop    %ebp
c010b93a:	c3                   	ret    

c010b93b <snprintf>:
 * @str:        the buffer to place the result into
 * @size:       the size of buffer, including the trailing null space
 * @fmt:        the format string to use
 * */
int
snprintf(char *str, size_t size, const char *fmt, ...) {
c010b93b:	55                   	push   %ebp
c010b93c:	89 e5                	mov    %esp,%ebp
c010b93e:	83 ec 18             	sub    $0x18,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c010b941:	8d 45 14             	lea    0x14(%ebp),%eax
c010b944:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cnt = vsnprintf(str, size, fmt, ap);
c010b947:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b94a:	50                   	push   %eax
c010b94b:	ff 75 10             	pushl  0x10(%ebp)
c010b94e:	ff 75 0c             	pushl  0xc(%ebp)
c010b951:	ff 75 08             	pushl  0x8(%ebp)
c010b954:	e8 0b 00 00 00       	call   c010b964 <vsnprintf>
c010b959:	83 c4 10             	add    $0x10,%esp
c010b95c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c010b95f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010b962:	c9                   	leave  
c010b963:	c3                   	ret    

c010b964 <vsnprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want snprintf() instead.
 * */
int
vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
c010b964:	55                   	push   %ebp
c010b965:	89 e5                	mov    %esp,%ebp
c010b967:	83 ec 18             	sub    $0x18,%esp
    struct sprintbuf b = {str, str + size - 1, 0};
c010b96a:	8b 45 08             	mov    0x8(%ebp),%eax
c010b96d:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010b970:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b973:	8d 50 ff             	lea    -0x1(%eax),%edx
c010b976:	8b 45 08             	mov    0x8(%ebp),%eax
c010b979:	01 d0                	add    %edx,%eax
c010b97b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b97e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if (str == NULL || b.buf > b.ebuf) {
c010b985:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b989:	74 0a                	je     c010b995 <vsnprintf+0x31>
c010b98b:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010b98e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b991:	39 c2                	cmp    %eax,%edx
c010b993:	76 07                	jbe    c010b99c <vsnprintf+0x38>
        return -E_INVAL;
c010b995:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010b99a:	eb 20                	jmp    c010b9bc <vsnprintf+0x58>
    }
    // print the string to the buffer
    vprintfmt((void*)sprintputch, &b, fmt, ap);
c010b99c:	ff 75 14             	pushl  0x14(%ebp)
c010b99f:	ff 75 10             	pushl  0x10(%ebp)
c010b9a2:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010b9a5:	50                   	push   %eax
c010b9a6:	68 05 b9 10 c0       	push   $0xc010b905
c010b9ab:	e8 ad fb ff ff       	call   c010b55d <vprintfmt>
c010b9b0:	83 c4 10             	add    $0x10,%esp
    // null terminate the buffer
    *b.buf = '\0';
c010b9b3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b9b6:	c6 00 00             	movb   $0x0,(%eax)
    return b.cnt;
c010b9b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010b9bc:	c9                   	leave  
c010b9bd:	c3                   	ret    

c010b9be <hash32>:
 * @bits:   the number of bits in a return value
 *
 * High bits are more random, so we use them.
 * */
uint32_t
hash32(uint32_t val, unsigned int bits) {
c010b9be:	55                   	push   %ebp
c010b9bf:	89 e5                	mov    %esp,%ebp
c010b9c1:	83 ec 10             	sub    $0x10,%esp
    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
c010b9c4:	8b 45 08             	mov    0x8(%ebp),%eax
c010b9c7:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
c010b9cd:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return (hash >> (32 - bits));
c010b9d0:	b8 20 00 00 00       	mov    $0x20,%eax
c010b9d5:	2b 45 0c             	sub    0xc(%ebp),%eax
c010b9d8:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010b9db:	89 c1                	mov    %eax,%ecx
c010b9dd:	d3 ea                	shr    %cl,%edx
c010b9df:	89 d0                	mov    %edx,%eax
}
c010b9e1:	c9                   	leave  
c010b9e2:	c3                   	ret    

c010b9e3 <rand>:
 * rand - returns a pseudo-random integer
 *
 * The rand() function return a value in the range [0, RAND_MAX].
 * */
int
rand(void) {
c010b9e3:	55                   	push   %ebp
c010b9e4:	89 e5                	mov    %esp,%ebp
c010b9e6:	57                   	push   %edi
c010b9e7:	56                   	push   %esi
c010b9e8:	53                   	push   %ebx
c010b9e9:	83 ec 24             	sub    $0x24,%esp
    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
c010b9ec:	a1 40 bb 12 c0       	mov    0xc012bb40,%eax
c010b9f1:	8b 15 44 bb 12 c0    	mov    0xc012bb44,%edx
c010b9f7:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
c010b9fd:	6b f0 05             	imul   $0x5,%eax,%esi
c010ba00:	01 fe                	add    %edi,%esi
c010ba02:	bf 6d e6 ec de       	mov    $0xdeece66d,%edi
c010ba07:	f7 e7                	mul    %edi
c010ba09:	01 d6                	add    %edx,%esi
c010ba0b:	89 f2                	mov    %esi,%edx
c010ba0d:	83 c0 0b             	add    $0xb,%eax
c010ba10:	83 d2 00             	adc    $0x0,%edx
c010ba13:	89 c7                	mov    %eax,%edi
c010ba15:	83 e7 ff             	and    $0xffffffff,%edi
c010ba18:	89 f9                	mov    %edi,%ecx
c010ba1a:	0f b7 da             	movzwl %dx,%ebx
c010ba1d:	89 0d 40 bb 12 c0    	mov    %ecx,0xc012bb40
c010ba23:	89 1d 44 bb 12 c0    	mov    %ebx,0xc012bb44
    unsigned long long result = (next >> 12);
c010ba29:	a1 40 bb 12 c0       	mov    0xc012bb40,%eax
c010ba2e:	8b 15 44 bb 12 c0    	mov    0xc012bb44,%edx
c010ba34:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c010ba38:	c1 ea 0c             	shr    $0xc,%edx
c010ba3b:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010ba3e:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    return (int)do_div(result, RAND_MAX + 1);
c010ba41:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
c010ba48:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010ba4b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010ba4e:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010ba51:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010ba54:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ba57:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010ba5a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010ba5e:	74 1c                	je     c010ba7c <rand+0x99>
c010ba60:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ba63:	ba 00 00 00 00       	mov    $0x0,%edx
c010ba68:	f7 75 dc             	divl   -0x24(%ebp)
c010ba6b:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010ba6e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ba71:	ba 00 00 00 00       	mov    $0x0,%edx
c010ba76:	f7 75 dc             	divl   -0x24(%ebp)
c010ba79:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010ba7c:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010ba7f:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010ba82:	f7 75 dc             	divl   -0x24(%ebp)
c010ba85:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010ba88:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010ba8b:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010ba8e:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010ba91:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010ba94:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c010ba97:	8b 45 d4             	mov    -0x2c(%ebp),%eax
}
c010ba9a:	83 c4 24             	add    $0x24,%esp
c010ba9d:	5b                   	pop    %ebx
c010ba9e:	5e                   	pop    %esi
c010ba9f:	5f                   	pop    %edi
c010baa0:	5d                   	pop    %ebp
c010baa1:	c3                   	ret    

c010baa2 <srand>:
/* *
 * srand - seed the random number generator with the given number
 * @seed:   the required seed number
 * */
void
srand(unsigned int seed) {
c010baa2:	55                   	push   %ebp
c010baa3:	89 e5                	mov    %esp,%ebp
    next = seed;
c010baa5:	8b 45 08             	mov    0x8(%ebp),%eax
c010baa8:	ba 00 00 00 00       	mov    $0x0,%edx
c010baad:	a3 40 bb 12 c0       	mov    %eax,0xc012bb40
c010bab2:	89 15 44 bb 12 c0    	mov    %edx,0xc012bb44
}
c010bab8:	90                   	nop
c010bab9:	5d                   	pop    %ebp
c010baba:	c3                   	ret    


bin/kernel:     file format elf32-i386


Disassembly of section .text:

c0100000 <kern_entry>:

.text
.globl kern_entry
kern_entry:
    # load pa of boot pgdir
    movl $REALLOC(__boot_pgdir), %eax
c0100000:	b8 00 20 1c 00       	mov    $0x1c2000,%eax
    movl %eax, %cr3
c0100005:	0f 22 d8             	mov    %eax,%cr3

    # enable paging
    movl %cr0, %eax
c0100008:	0f 20 c0             	mov    %cr0,%eax
    orl $(CR0_PE | CR0_PG | CR0_AM | CR0_WP | CR0_NE | CR0_TS | CR0_EM | CR0_MP), %eax
c010000b:	0d 2f 00 05 80       	or     $0x8005002f,%eax
    andl $~(CR0_TS | CR0_EM), %eax
c0100010:	83 e0 f3             	and    $0xfffffff3,%eax
    movl %eax, %cr0
c0100013:	0f 22 c0             	mov    %eax,%cr0

    # update eip
    # now, eip = 0x1.....
    leal next, %eax
c0100016:	8d 05 1e 00 10 c0    	lea    0xc010001e,%eax
    # set eip = KERNBASE + 0x1.....
    jmp *%eax
c010001c:	ff e0                	jmp    *%eax

c010001e <next>:
next:

    # unmap va 0 ~ 4M, it's temporary mapping
    xorl %eax, %eax
c010001e:	31 c0                	xor    %eax,%eax
    movl %eax, __boot_pgdir
c0100020:	a3 00 20 1c c0       	mov    %eax,0xc01c2000

    # set ebp, esp
    movl $0x0, %ebp
c0100025:	bd 00 00 00 00       	mov    $0x0,%ebp
    # the kernel stack region is from bootstack -- bootstacktop,
    # the kernel stack size is KSTACKSIZE (8KB)defined in memlayout.h
    movl $bootstacktop, %esp
c010002a:	bc 00 10 13 c0       	mov    $0xc0131000,%esp
    # now kernel stack is ready , call the first C function
    call kern_init
c010002f:	e8 02 00 00 00       	call   c0100036 <kern_init>

c0100034 <spin>:

# should never get here
spin:
    jmp spin
c0100034:	eb fe                	jmp    c0100034 <spin>

c0100036 <kern_init>:
int kern_init(void) __attribute__((noreturn));
void grade_backtrace(void);
static void lab1_switch_test(void);

int
kern_init(void) {
c0100036:	55                   	push   %ebp
c0100037:	89 e5                	mov    %esp,%ebp
c0100039:	83 ec 18             	sub    $0x18,%esp
    extern char edata[], end[];
    memset(edata, 0, end - edata);
c010003c:	ba e4 72 1c c0       	mov    $0xc01c72e4,%edx
c0100041:	b8 00 40 1c c0       	mov    $0xc01c4000,%eax
c0100046:	29 c2                	sub    %eax,%edx
c0100048:	89 d0                	mov    %edx,%eax
c010004a:	83 ec 04             	sub    $0x4,%esp
c010004d:	50                   	push   %eax
c010004e:	6a 00                	push   $0x0
c0100050:	68 00 40 1c c0       	push   $0xc01c4000
c0100055:	e8 3b c4 00 00       	call   c010c495 <memset>
c010005a:	83 c4 10             	add    $0x10,%esp

    cons_init();                // init the console
c010005d:	e8 a4 1e 00 00       	call   c0101f06 <cons_init>

    const char *message = "(THU.CST) os is loading ...";
c0100062:	c7 45 f4 40 cd 10 c0 	movl   $0xc010cd40,-0xc(%ebp)
    cprintf("%s\n\n", message);
c0100069:	83 ec 08             	sub    $0x8,%esp
c010006c:	ff 75 f4             	pushl  -0xc(%ebp)
c010006f:	68 5c cd 10 c0       	push   $0xc010cd5c
c0100074:	e8 1e 02 00 00       	call   c0100297 <cprintf>
c0100079:	83 c4 10             	add    $0x10,%esp

    print_kerninfo();
c010007c:	e8 8c 09 00 00       	call   c0100a0d <print_kerninfo>

    grade_backtrace();
c0100081:	e8 90 00 00 00       	call   c0100116 <grade_backtrace>

    pmm_init();                 // init physical memory management
c0100086:	e8 af 75 00 00       	call   c010763a <pmm_init>

    pic_init();                 // init interrupt controller
c010008b:	e8 e8 1f 00 00       	call   c0102078 <pic_init>
    idt_init();                 // init interrupt descriptor table
c0100090:	e8 6a 21 00 00       	call   c01021ff <idt_init>

    vmm_init();                 // init virtual memory management
c0100095:	e8 aa 3c 00 00       	call   c0103d44 <vmm_init>
    sched_init();               // init scheduler
c010009a:	e8 9b b6 00 00       	call   c010b73a <sched_init>
    proc_init();                // init process table
c010009f:	e8 48 b3 00 00       	call   c010b3ec <proc_init>
    
    ide_init();                 // init ide devices
c01000a4:	e8 2c 0e 00 00       	call   c0100ed5 <ide_init>
    swap_init();                // init swap
c01000a9:	e8 b4 52 00 00       	call   c0105362 <swap_init>

    clock_init();               // init clock interrupt
c01000ae:	e8 fa 15 00 00       	call   c01016ad <clock_init>
    intr_enable();              // enable irq interrupt
c01000b3:	e8 fd 20 00 00       	call   c01021b5 <intr_enable>

    //LAB1: CAHLLENGE 1 If you try to do it, uncomment lab1_switch_test()
    // user/kernel mode switch test
    //lab1_switch_test();
    
    cpu_idle();                 // run idle process
c01000b8:	e8 cc b4 00 00       	call   c010b589 <cpu_idle>

c01000bd <grade_backtrace2>:
}

void __attribute__((noinline))
grade_backtrace2(int arg0, int arg1, int arg2, int arg3) {
c01000bd:	55                   	push   %ebp
c01000be:	89 e5                	mov    %esp,%ebp
c01000c0:	83 ec 08             	sub    $0x8,%esp
    mon_backtrace(0, NULL, NULL);
c01000c3:	83 ec 04             	sub    $0x4,%esp
c01000c6:	6a 00                	push   $0x0
c01000c8:	6a 00                	push   $0x0
c01000ca:	6a 00                	push   $0x0
c01000cc:	e8 98 0d 00 00       	call   c0100e69 <mon_backtrace>
c01000d1:	83 c4 10             	add    $0x10,%esp
}
c01000d4:	90                   	nop
c01000d5:	c9                   	leave  
c01000d6:	c3                   	ret    

c01000d7 <grade_backtrace1>:

void __attribute__((noinline))
grade_backtrace1(int arg0, int arg1) {
c01000d7:	55                   	push   %ebp
c01000d8:	89 e5                	mov    %esp,%ebp
c01000da:	53                   	push   %ebx
c01000db:	83 ec 04             	sub    $0x4,%esp
    grade_backtrace2(arg0, (int)&arg0, arg1, (int)&arg1);
c01000de:	8d 4d 0c             	lea    0xc(%ebp),%ecx
c01000e1:	8b 55 0c             	mov    0xc(%ebp),%edx
c01000e4:	8d 5d 08             	lea    0x8(%ebp),%ebx
c01000e7:	8b 45 08             	mov    0x8(%ebp),%eax
c01000ea:	51                   	push   %ecx
c01000eb:	52                   	push   %edx
c01000ec:	53                   	push   %ebx
c01000ed:	50                   	push   %eax
c01000ee:	e8 ca ff ff ff       	call   c01000bd <grade_backtrace2>
c01000f3:	83 c4 10             	add    $0x10,%esp
}
c01000f6:	90                   	nop
c01000f7:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c01000fa:	c9                   	leave  
c01000fb:	c3                   	ret    

c01000fc <grade_backtrace0>:

void __attribute__((noinline))
grade_backtrace0(int arg0, int arg1, int arg2) {
c01000fc:	55                   	push   %ebp
c01000fd:	89 e5                	mov    %esp,%ebp
c01000ff:	83 ec 08             	sub    $0x8,%esp
    grade_backtrace1(arg0, arg2);
c0100102:	83 ec 08             	sub    $0x8,%esp
c0100105:	ff 75 10             	pushl  0x10(%ebp)
c0100108:	ff 75 08             	pushl  0x8(%ebp)
c010010b:	e8 c7 ff ff ff       	call   c01000d7 <grade_backtrace1>
c0100110:	83 c4 10             	add    $0x10,%esp
}
c0100113:	90                   	nop
c0100114:	c9                   	leave  
c0100115:	c3                   	ret    

c0100116 <grade_backtrace>:

void
grade_backtrace(void) {
c0100116:	55                   	push   %ebp
c0100117:	89 e5                	mov    %esp,%ebp
c0100119:	83 ec 08             	sub    $0x8,%esp
    grade_backtrace0(0, (int)kern_init, 0xffff0000);
c010011c:	b8 36 00 10 c0       	mov    $0xc0100036,%eax
c0100121:	83 ec 04             	sub    $0x4,%esp
c0100124:	68 00 00 ff ff       	push   $0xffff0000
c0100129:	50                   	push   %eax
c010012a:	6a 00                	push   $0x0
c010012c:	e8 cb ff ff ff       	call   c01000fc <grade_backtrace0>
c0100131:	83 c4 10             	add    $0x10,%esp
}
c0100134:	90                   	nop
c0100135:	c9                   	leave  
c0100136:	c3                   	ret    

c0100137 <lab1_print_cur_status>:

static void
lab1_print_cur_status(void) {
c0100137:	55                   	push   %ebp
c0100138:	89 e5                	mov    %esp,%ebp
c010013a:	83 ec 18             	sub    $0x18,%esp
    static int round = 0;
    uint16_t reg1, reg2, reg3, reg4;
    asm volatile (
c010013d:	8c 4d f6             	mov    %cs,-0xa(%ebp)
c0100140:	8c 5d f4             	mov    %ds,-0xc(%ebp)
c0100143:	8c 45 f2             	mov    %es,-0xe(%ebp)
c0100146:	8c 55 f0             	mov    %ss,-0x10(%ebp)
            "mov %%cs, %0;"
            "mov %%ds, %1;"
            "mov %%es, %2;"
            "mov %%ss, %3;"
            : "=m"(reg1), "=m"(reg2), "=m"(reg3), "=m"(reg4));
    cprintf("%d: @ring %d\n", round, reg1 & 3);
c0100149:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010014d:	0f b7 c0             	movzwl %ax,%eax
c0100150:	83 e0 03             	and    $0x3,%eax
c0100153:	89 c2                	mov    %eax,%edx
c0100155:	a1 00 40 1c c0       	mov    0xc01c4000,%eax
c010015a:	83 ec 04             	sub    $0x4,%esp
c010015d:	52                   	push   %edx
c010015e:	50                   	push   %eax
c010015f:	68 61 cd 10 c0       	push   $0xc010cd61
c0100164:	e8 2e 01 00 00       	call   c0100297 <cprintf>
c0100169:	83 c4 10             	add    $0x10,%esp
    cprintf("%d:  cs = %x\n", round, reg1);
c010016c:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100170:	0f b7 d0             	movzwl %ax,%edx
c0100173:	a1 00 40 1c c0       	mov    0xc01c4000,%eax
c0100178:	83 ec 04             	sub    $0x4,%esp
c010017b:	52                   	push   %edx
c010017c:	50                   	push   %eax
c010017d:	68 6f cd 10 c0       	push   $0xc010cd6f
c0100182:	e8 10 01 00 00       	call   c0100297 <cprintf>
c0100187:	83 c4 10             	add    $0x10,%esp
    cprintf("%d:  ds = %x\n", round, reg2);
c010018a:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c010018e:	0f b7 d0             	movzwl %ax,%edx
c0100191:	a1 00 40 1c c0       	mov    0xc01c4000,%eax
c0100196:	83 ec 04             	sub    $0x4,%esp
c0100199:	52                   	push   %edx
c010019a:	50                   	push   %eax
c010019b:	68 7d cd 10 c0       	push   $0xc010cd7d
c01001a0:	e8 f2 00 00 00       	call   c0100297 <cprintf>
c01001a5:	83 c4 10             	add    $0x10,%esp
    cprintf("%d:  es = %x\n", round, reg3);
c01001a8:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01001ac:	0f b7 d0             	movzwl %ax,%edx
c01001af:	a1 00 40 1c c0       	mov    0xc01c4000,%eax
c01001b4:	83 ec 04             	sub    $0x4,%esp
c01001b7:	52                   	push   %edx
c01001b8:	50                   	push   %eax
c01001b9:	68 8b cd 10 c0       	push   $0xc010cd8b
c01001be:	e8 d4 00 00 00       	call   c0100297 <cprintf>
c01001c3:	83 c4 10             	add    $0x10,%esp
    cprintf("%d:  ss = %x\n", round, reg4);
c01001c6:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c01001ca:	0f b7 d0             	movzwl %ax,%edx
c01001cd:	a1 00 40 1c c0       	mov    0xc01c4000,%eax
c01001d2:	83 ec 04             	sub    $0x4,%esp
c01001d5:	52                   	push   %edx
c01001d6:	50                   	push   %eax
c01001d7:	68 99 cd 10 c0       	push   $0xc010cd99
c01001dc:	e8 b6 00 00 00       	call   c0100297 <cprintf>
c01001e1:	83 c4 10             	add    $0x10,%esp
    round ++;
c01001e4:	a1 00 40 1c c0       	mov    0xc01c4000,%eax
c01001e9:	83 c0 01             	add    $0x1,%eax
c01001ec:	a3 00 40 1c c0       	mov    %eax,0xc01c4000
}
c01001f1:	90                   	nop
c01001f2:	c9                   	leave  
c01001f3:	c3                   	ret    

c01001f4 <lab1_switch_to_user>:

static void
lab1_switch_to_user(void) {
c01001f4:	55                   	push   %ebp
c01001f5:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 : TODO
    asm volatile (
c01001f7:	cd 78                	int    $0x78
c01001f9:	89 ec                	mov    %ebp,%esp
	    "int %0;"
        "movl %%ebp, %%esp"
	    : 
	    : "i"(T_SWITCH_TOU)
	);
}
c01001fb:	90                   	nop
c01001fc:	5d                   	pop    %ebp
c01001fd:	c3                   	ret    

c01001fe <lab1_switch_to_kernel>:

static void
lab1_switch_to_kernel(void) {
c01001fe:	55                   	push   %ebp
c01001ff:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 :  TODO
    // cprintf("in lab1_switch_to_kernel\n");
    asm volatile (
c0100201:	cd 79                	int    $0x79
c0100203:	89 ec                	mov    %ebp,%esp
	    "int %0;"
        "movl %%ebp, %%esp"
        : 
	    : "i"(T_SWITCH_TOK)
	);
}
c0100205:	90                   	nop
c0100206:	5d                   	pop    %ebp
c0100207:	c3                   	ret    

c0100208 <lab1_switch_test>:

static void
lab1_switch_test(void) {
c0100208:	55                   	push   %ebp
c0100209:	89 e5                	mov    %esp,%ebp
c010020b:	83 ec 08             	sub    $0x8,%esp
    lab1_print_cur_status();
c010020e:	e8 24 ff ff ff       	call   c0100137 <lab1_print_cur_status>
    cprintf("+++ switch to  user  mode +++\n");
c0100213:	83 ec 0c             	sub    $0xc,%esp
c0100216:	68 a8 cd 10 c0       	push   $0xc010cda8
c010021b:	e8 77 00 00 00       	call   c0100297 <cprintf>
c0100220:	83 c4 10             	add    $0x10,%esp
    lab1_switch_to_user();
c0100223:	e8 cc ff ff ff       	call   c01001f4 <lab1_switch_to_user>
    lab1_print_cur_status();
c0100228:	e8 0a ff ff ff       	call   c0100137 <lab1_print_cur_status>
    cprintf("+++ switch to kernel mode +++\n");
c010022d:	83 ec 0c             	sub    $0xc,%esp
c0100230:	68 c8 cd 10 c0       	push   $0xc010cdc8
c0100235:	e8 5d 00 00 00       	call   c0100297 <cprintf>
c010023a:	83 c4 10             	add    $0x10,%esp
    lab1_switch_to_kernel();
c010023d:	e8 bc ff ff ff       	call   c01001fe <lab1_switch_to_kernel>
    lab1_print_cur_status();
c0100242:	e8 f0 fe ff ff       	call   c0100137 <lab1_print_cur_status>
}
c0100247:	90                   	nop
c0100248:	c9                   	leave  
c0100249:	c3                   	ret    

c010024a <cputch>:
/* *
 * cputch - writes a single character @c to stdout, and it will
 * increace the value of counter pointed by @cnt.
 * */
static void
cputch(int c, int *cnt) {
c010024a:	55                   	push   %ebp
c010024b:	89 e5                	mov    %esp,%ebp
c010024d:	83 ec 08             	sub    $0x8,%esp
    cons_putc(c);
c0100250:	83 ec 0c             	sub    $0xc,%esp
c0100253:	ff 75 08             	pushl  0x8(%ebp)
c0100256:	e8 dc 1c 00 00       	call   c0101f37 <cons_putc>
c010025b:	83 c4 10             	add    $0x10,%esp
    (*cnt) ++;
c010025e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100261:	8b 00                	mov    (%eax),%eax
c0100263:	8d 50 01             	lea    0x1(%eax),%edx
c0100266:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100269:	89 10                	mov    %edx,(%eax)
}
c010026b:	90                   	nop
c010026c:	c9                   	leave  
c010026d:	c3                   	ret    

c010026e <vcprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want cprintf() instead.
 * */
int
vcprintf(const char *fmt, va_list ap) {
c010026e:	55                   	push   %ebp
c010026f:	89 e5                	mov    %esp,%ebp
c0100271:	83 ec 18             	sub    $0x18,%esp
    int cnt = 0;
c0100274:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    vprintfmt((void*)cputch, &cnt, fmt, ap);
c010027b:	ff 75 0c             	pushl  0xc(%ebp)
c010027e:	ff 75 08             	pushl  0x8(%ebp)
c0100281:	8d 45 f4             	lea    -0xc(%ebp),%eax
c0100284:	50                   	push   %eax
c0100285:	68 4a 02 10 c0       	push   $0xc010024a
c010028a:	e8 3c c5 00 00       	call   c010c7cb <vprintfmt>
c010028f:	83 c4 10             	add    $0x10,%esp
    return cnt;
c0100292:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100295:	c9                   	leave  
c0100296:	c3                   	ret    

c0100297 <cprintf>:
 *
 * The return value is the number of characters which would be
 * written to stdout.
 * */
int
cprintf(const char *fmt, ...) {
c0100297:	55                   	push   %ebp
c0100298:	89 e5                	mov    %esp,%ebp
c010029a:	83 ec 18             	sub    $0x18,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c010029d:	8d 45 0c             	lea    0xc(%ebp),%eax
c01002a0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cnt = vcprintf(fmt, ap);
c01002a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002a6:	83 ec 08             	sub    $0x8,%esp
c01002a9:	50                   	push   %eax
c01002aa:	ff 75 08             	pushl  0x8(%ebp)
c01002ad:	e8 bc ff ff ff       	call   c010026e <vcprintf>
c01002b2:	83 c4 10             	add    $0x10,%esp
c01002b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c01002b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01002bb:	c9                   	leave  
c01002bc:	c3                   	ret    

c01002bd <cputchar>:

/* cputchar - writes a single character to stdout */
void
cputchar(int c) {
c01002bd:	55                   	push   %ebp
c01002be:	89 e5                	mov    %esp,%ebp
c01002c0:	83 ec 08             	sub    $0x8,%esp
    cons_putc(c);
c01002c3:	83 ec 0c             	sub    $0xc,%esp
c01002c6:	ff 75 08             	pushl  0x8(%ebp)
c01002c9:	e8 69 1c 00 00       	call   c0101f37 <cons_putc>
c01002ce:	83 c4 10             	add    $0x10,%esp
}
c01002d1:	90                   	nop
c01002d2:	c9                   	leave  
c01002d3:	c3                   	ret    

c01002d4 <cputs>:
/* *
 * cputs- writes the string pointed by @str to stdout and
 * appends a newline character.
 * */
int
cputs(const char *str) {
c01002d4:	55                   	push   %ebp
c01002d5:	89 e5                	mov    %esp,%ebp
c01002d7:	83 ec 18             	sub    $0x18,%esp
    int cnt = 0;
c01002da:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    char c;
    while ((c = *str ++) != '\0') {
c01002e1:	eb 14                	jmp    c01002f7 <cputs+0x23>
        cputch(c, &cnt);
c01002e3:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
c01002e7:	83 ec 08             	sub    $0x8,%esp
c01002ea:	8d 55 f0             	lea    -0x10(%ebp),%edx
c01002ed:	52                   	push   %edx
c01002ee:	50                   	push   %eax
c01002ef:	e8 56 ff ff ff       	call   c010024a <cputch>
c01002f4:	83 c4 10             	add    $0x10,%esp
 * */
int
cputs(const char *str) {
    int cnt = 0;
    char c;
    while ((c = *str ++) != '\0') {
c01002f7:	8b 45 08             	mov    0x8(%ebp),%eax
c01002fa:	8d 50 01             	lea    0x1(%eax),%edx
c01002fd:	89 55 08             	mov    %edx,0x8(%ebp)
c0100300:	0f b6 00             	movzbl (%eax),%eax
c0100303:	88 45 f7             	mov    %al,-0x9(%ebp)
c0100306:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
c010030a:	75 d7                	jne    c01002e3 <cputs+0xf>
        cputch(c, &cnt);
    }
    cputch('\n', &cnt);
c010030c:	83 ec 08             	sub    $0x8,%esp
c010030f:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0100312:	50                   	push   %eax
c0100313:	6a 0a                	push   $0xa
c0100315:	e8 30 ff ff ff       	call   c010024a <cputch>
c010031a:	83 c4 10             	add    $0x10,%esp
    return cnt;
c010031d:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0100320:	c9                   	leave  
c0100321:	c3                   	ret    

c0100322 <getchar>:

/* getchar - reads a single non-zero character from stdin */
int
getchar(void) {
c0100322:	55                   	push   %ebp
c0100323:	89 e5                	mov    %esp,%ebp
c0100325:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = cons_getc()) == 0)
c0100328:	e8 53 1c 00 00       	call   c0101f80 <cons_getc>
c010032d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100330:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100334:	74 f2                	je     c0100328 <getchar+0x6>
        /* do nothing */;
    return c;
c0100336:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100339:	c9                   	leave  
c010033a:	c3                   	ret    

c010033b <readline>:
 * The readline() function returns the text of the line read. If some errors
 * are happened, NULL is returned. The return value is a global variable,
 * thus it should be copied before it is used.
 * */
char *
readline(const char *prompt) {
c010033b:	55                   	push   %ebp
c010033c:	89 e5                	mov    %esp,%ebp
c010033e:	83 ec 18             	sub    $0x18,%esp
    if (prompt != NULL) {
c0100341:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0100345:	74 13                	je     c010035a <readline+0x1f>
        cprintf("%s", prompt);
c0100347:	83 ec 08             	sub    $0x8,%esp
c010034a:	ff 75 08             	pushl  0x8(%ebp)
c010034d:	68 e7 cd 10 c0       	push   $0xc010cde7
c0100352:	e8 40 ff ff ff       	call   c0100297 <cprintf>
c0100357:	83 c4 10             	add    $0x10,%esp
    }
    int i = 0, c;
c010035a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        c = getchar();
c0100361:	e8 bc ff ff ff       	call   c0100322 <getchar>
c0100366:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (c < 0) {
c0100369:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010036d:	79 0a                	jns    c0100379 <readline+0x3e>
            return NULL;
c010036f:	b8 00 00 00 00       	mov    $0x0,%eax
c0100374:	e9 82 00 00 00       	jmp    c01003fb <readline+0xc0>
        }
        else if (c >= ' ' && i < BUFSIZE - 1) {
c0100379:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
c010037d:	7e 2b                	jle    c01003aa <readline+0x6f>
c010037f:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
c0100386:	7f 22                	jg     c01003aa <readline+0x6f>
            cputchar(c);
c0100388:	83 ec 0c             	sub    $0xc,%esp
c010038b:	ff 75 f0             	pushl  -0x10(%ebp)
c010038e:	e8 2a ff ff ff       	call   c01002bd <cputchar>
c0100393:	83 c4 10             	add    $0x10,%esp
            buf[i ++] = c;
c0100396:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100399:	8d 50 01             	lea    0x1(%eax),%edx
c010039c:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010039f:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01003a2:	88 90 20 40 1c c0    	mov    %dl,-0x3fe3bfe0(%eax)
c01003a8:	eb 4c                	jmp    c01003f6 <readline+0xbb>
        }
        else if (c == '\b' && i > 0) {
c01003aa:	83 7d f0 08          	cmpl   $0x8,-0x10(%ebp)
c01003ae:	75 1a                	jne    c01003ca <readline+0x8f>
c01003b0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01003b4:	7e 14                	jle    c01003ca <readline+0x8f>
            cputchar(c);
c01003b6:	83 ec 0c             	sub    $0xc,%esp
c01003b9:	ff 75 f0             	pushl  -0x10(%ebp)
c01003bc:	e8 fc fe ff ff       	call   c01002bd <cputchar>
c01003c1:	83 c4 10             	add    $0x10,%esp
            i --;
c01003c4:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c01003c8:	eb 2c                	jmp    c01003f6 <readline+0xbb>
        }
        else if (c == '\n' || c == '\r') {
c01003ca:	83 7d f0 0a          	cmpl   $0xa,-0x10(%ebp)
c01003ce:	74 06                	je     c01003d6 <readline+0x9b>
c01003d0:	83 7d f0 0d          	cmpl   $0xd,-0x10(%ebp)
c01003d4:	75 8b                	jne    c0100361 <readline+0x26>
            cputchar(c);
c01003d6:	83 ec 0c             	sub    $0xc,%esp
c01003d9:	ff 75 f0             	pushl  -0x10(%ebp)
c01003dc:	e8 dc fe ff ff       	call   c01002bd <cputchar>
c01003e1:	83 c4 10             	add    $0x10,%esp
            buf[i] = '\0';
c01003e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01003e7:	05 20 40 1c c0       	add    $0xc01c4020,%eax
c01003ec:	c6 00 00             	movb   $0x0,(%eax)
            return buf;
c01003ef:	b8 20 40 1c c0       	mov    $0xc01c4020,%eax
c01003f4:	eb 05                	jmp    c01003fb <readline+0xc0>
        }
    }
c01003f6:	e9 66 ff ff ff       	jmp    c0100361 <readline+0x26>
}
c01003fb:	c9                   	leave  
c01003fc:	c3                   	ret    

c01003fd <__panic>:
/* *
 * __panic - __panic is called on unresolvable fatal errors. it prints
 * "panic: 'message'", and then enters the kernel monitor.
 * */
void
__panic(const char *file, int line, const char *fmt, ...) {
c01003fd:	55                   	push   %ebp
c01003fe:	89 e5                	mov    %esp,%ebp
c0100400:	83 ec 18             	sub    $0x18,%esp
    if (is_panic) {
c0100403:	a1 20 44 1c c0       	mov    0xc01c4420,%eax
c0100408:	85 c0                	test   %eax,%eax
c010040a:	75 5f                	jne    c010046b <__panic+0x6e>
        goto panic_dead;
    }
    is_panic = 1;
c010040c:	c7 05 20 44 1c c0 01 	movl   $0x1,0xc01c4420
c0100413:	00 00 00 

    // print the 'message'
    va_list ap;
    va_start(ap, fmt);
c0100416:	8d 45 14             	lea    0x14(%ebp),%eax
c0100419:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cprintf("kernel panic at %s:%d:\n    ", file, line);
c010041c:	83 ec 04             	sub    $0x4,%esp
c010041f:	ff 75 0c             	pushl  0xc(%ebp)
c0100422:	ff 75 08             	pushl  0x8(%ebp)
c0100425:	68 ea cd 10 c0       	push   $0xc010cdea
c010042a:	e8 68 fe ff ff       	call   c0100297 <cprintf>
c010042f:	83 c4 10             	add    $0x10,%esp
    vcprintf(fmt, ap);
c0100432:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100435:	83 ec 08             	sub    $0x8,%esp
c0100438:	50                   	push   %eax
c0100439:	ff 75 10             	pushl  0x10(%ebp)
c010043c:	e8 2d fe ff ff       	call   c010026e <vcprintf>
c0100441:	83 c4 10             	add    $0x10,%esp
    cprintf("\n");
c0100444:	83 ec 0c             	sub    $0xc,%esp
c0100447:	68 06 ce 10 c0       	push   $0xc010ce06
c010044c:	e8 46 fe ff ff       	call   c0100297 <cprintf>
c0100451:	83 c4 10             	add    $0x10,%esp
    
    cprintf("stack trackback:\n");
c0100454:	83 ec 0c             	sub    $0xc,%esp
c0100457:	68 08 ce 10 c0       	push   $0xc010ce08
c010045c:	e8 36 fe ff ff       	call   c0100297 <cprintf>
c0100461:	83 c4 10             	add    $0x10,%esp
    print_stackframe();
c0100464:	e8 ee 06 00 00       	call   c0100b57 <print_stackframe>
c0100469:	eb 01                	jmp    c010046c <__panic+0x6f>
 * "panic: 'message'", and then enters the kernel monitor.
 * */
void
__panic(const char *file, int line, const char *fmt, ...) {
    if (is_panic) {
        goto panic_dead;
c010046b:	90                   	nop
    print_stackframe();
    
    va_end(ap);

panic_dead:
    intr_disable();
c010046c:	e8 4b 1d 00 00       	call   c01021bc <intr_disable>
    while (1) {
        kmonitor(NULL);
c0100471:	83 ec 0c             	sub    $0xc,%esp
c0100474:	6a 00                	push   $0x0
c0100476:	e8 14 09 00 00       	call   c0100d8f <kmonitor>
c010047b:	83 c4 10             	add    $0x10,%esp
    }
c010047e:	eb f1                	jmp    c0100471 <__panic+0x74>

c0100480 <__warn>:
}

/* __warn - like panic, but don't */
void
__warn(const char *file, int line, const char *fmt, ...) {
c0100480:	55                   	push   %ebp
c0100481:	89 e5                	mov    %esp,%ebp
c0100483:	83 ec 18             	sub    $0x18,%esp
    va_list ap;
    va_start(ap, fmt);
c0100486:	8d 45 14             	lea    0x14(%ebp),%eax
c0100489:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cprintf("kernel warning at %s:%d:\n    ", file, line);
c010048c:	83 ec 04             	sub    $0x4,%esp
c010048f:	ff 75 0c             	pushl  0xc(%ebp)
c0100492:	ff 75 08             	pushl  0x8(%ebp)
c0100495:	68 1a ce 10 c0       	push   $0xc010ce1a
c010049a:	e8 f8 fd ff ff       	call   c0100297 <cprintf>
c010049f:	83 c4 10             	add    $0x10,%esp
    vcprintf(fmt, ap);
c01004a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01004a5:	83 ec 08             	sub    $0x8,%esp
c01004a8:	50                   	push   %eax
c01004a9:	ff 75 10             	pushl  0x10(%ebp)
c01004ac:	e8 bd fd ff ff       	call   c010026e <vcprintf>
c01004b1:	83 c4 10             	add    $0x10,%esp
    cprintf("\n");
c01004b4:	83 ec 0c             	sub    $0xc,%esp
c01004b7:	68 06 ce 10 c0       	push   $0xc010ce06
c01004bc:	e8 d6 fd ff ff       	call   c0100297 <cprintf>
c01004c1:	83 c4 10             	add    $0x10,%esp
    va_end(ap);
}
c01004c4:	90                   	nop
c01004c5:	c9                   	leave  
c01004c6:	c3                   	ret    

c01004c7 <is_kernel_panic>:

bool
is_kernel_panic(void) {
c01004c7:	55                   	push   %ebp
c01004c8:	89 e5                	mov    %esp,%ebp
    return is_panic;
c01004ca:	a1 20 44 1c c0       	mov    0xc01c4420,%eax
}
c01004cf:	5d                   	pop    %ebp
c01004d0:	c3                   	ret    

c01004d1 <stab_binsearch>:
 *      stab_binsearch(stabs, &left, &right, N_SO, 0xf0100184);
 * will exit setting left = 118, right = 554.
 * */
static void
stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
           int type, uintptr_t addr) {
c01004d1:	55                   	push   %ebp
c01004d2:	89 e5                	mov    %esp,%ebp
c01004d4:	83 ec 20             	sub    $0x20,%esp
    int l = *region_left, r = *region_right, any_matches = 0;
c01004d7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01004da:	8b 00                	mov    (%eax),%eax
c01004dc:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01004df:	8b 45 10             	mov    0x10(%ebp),%eax
c01004e2:	8b 00                	mov    (%eax),%eax
c01004e4:	89 45 f8             	mov    %eax,-0x8(%ebp)
c01004e7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    while (l <= r) {
c01004ee:	e9 d2 00 00 00       	jmp    c01005c5 <stab_binsearch+0xf4>
        int true_m = (l + r) / 2, m = true_m;
c01004f3:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01004f6:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01004f9:	01 d0                	add    %edx,%eax
c01004fb:	89 c2                	mov    %eax,%edx
c01004fd:	c1 ea 1f             	shr    $0x1f,%edx
c0100500:	01 d0                	add    %edx,%eax
c0100502:	d1 f8                	sar    %eax
c0100504:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0100507:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010050a:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // search for earliest stab with right type
        while (m >= l && stabs[m].n_type != type) {
c010050d:	eb 04                	jmp    c0100513 <stab_binsearch+0x42>
            m --;
c010050f:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)

    while (l <= r) {
        int true_m = (l + r) / 2, m = true_m;

        // search for earliest stab with right type
        while (m >= l && stabs[m].n_type != type) {
c0100513:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100516:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100519:	7c 1f                	jl     c010053a <stab_binsearch+0x69>
c010051b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010051e:	89 d0                	mov    %edx,%eax
c0100520:	01 c0                	add    %eax,%eax
c0100522:	01 d0                	add    %edx,%eax
c0100524:	c1 e0 02             	shl    $0x2,%eax
c0100527:	89 c2                	mov    %eax,%edx
c0100529:	8b 45 08             	mov    0x8(%ebp),%eax
c010052c:	01 d0                	add    %edx,%eax
c010052e:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100532:	0f b6 c0             	movzbl %al,%eax
c0100535:	3b 45 14             	cmp    0x14(%ebp),%eax
c0100538:	75 d5                	jne    c010050f <stab_binsearch+0x3e>
            m --;
        }
        if (m < l) {    // no match in [l, m]
c010053a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010053d:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100540:	7d 0b                	jge    c010054d <stab_binsearch+0x7c>
            l = true_m + 1;
c0100542:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100545:	83 c0 01             	add    $0x1,%eax
c0100548:	89 45 fc             	mov    %eax,-0x4(%ebp)
            continue;
c010054b:	eb 78                	jmp    c01005c5 <stab_binsearch+0xf4>
        }

        // actual binary search
        any_matches = 1;
c010054d:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
        if (stabs[m].n_value < addr) {
c0100554:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100557:	89 d0                	mov    %edx,%eax
c0100559:	01 c0                	add    %eax,%eax
c010055b:	01 d0                	add    %edx,%eax
c010055d:	c1 e0 02             	shl    $0x2,%eax
c0100560:	89 c2                	mov    %eax,%edx
c0100562:	8b 45 08             	mov    0x8(%ebp),%eax
c0100565:	01 d0                	add    %edx,%eax
c0100567:	8b 40 08             	mov    0x8(%eax),%eax
c010056a:	3b 45 18             	cmp    0x18(%ebp),%eax
c010056d:	73 13                	jae    c0100582 <stab_binsearch+0xb1>
            *region_left = m;
c010056f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100572:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100575:	89 10                	mov    %edx,(%eax)
            l = true_m + 1;
c0100577:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010057a:	83 c0 01             	add    $0x1,%eax
c010057d:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0100580:	eb 43                	jmp    c01005c5 <stab_binsearch+0xf4>
        } else if (stabs[m].n_value > addr) {
c0100582:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100585:	89 d0                	mov    %edx,%eax
c0100587:	01 c0                	add    %eax,%eax
c0100589:	01 d0                	add    %edx,%eax
c010058b:	c1 e0 02             	shl    $0x2,%eax
c010058e:	89 c2                	mov    %eax,%edx
c0100590:	8b 45 08             	mov    0x8(%ebp),%eax
c0100593:	01 d0                	add    %edx,%eax
c0100595:	8b 40 08             	mov    0x8(%eax),%eax
c0100598:	3b 45 18             	cmp    0x18(%ebp),%eax
c010059b:	76 16                	jbe    c01005b3 <stab_binsearch+0xe2>
            *region_right = m - 1;
c010059d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01005a0:	8d 50 ff             	lea    -0x1(%eax),%edx
c01005a3:	8b 45 10             	mov    0x10(%ebp),%eax
c01005a6:	89 10                	mov    %edx,(%eax)
            r = m - 1;
c01005a8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01005ab:	83 e8 01             	sub    $0x1,%eax
c01005ae:	89 45 f8             	mov    %eax,-0x8(%ebp)
c01005b1:	eb 12                	jmp    c01005c5 <stab_binsearch+0xf4>
        } else {
            // exact match for 'addr', but continue loop to find
            // *region_right
            *region_left = m;
c01005b3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01005b6:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01005b9:	89 10                	mov    %edx,(%eax)
            l = m;
c01005bb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01005be:	89 45 fc             	mov    %eax,-0x4(%ebp)
            addr ++;
c01005c1:	83 45 18 01          	addl   $0x1,0x18(%ebp)
static void
stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
           int type, uintptr_t addr) {
    int l = *region_left, r = *region_right, any_matches = 0;

    while (l <= r) {
c01005c5:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01005c8:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c01005cb:	0f 8e 22 ff ff ff    	jle    c01004f3 <stab_binsearch+0x22>
            l = m;
            addr ++;
        }
    }

    if (!any_matches) {
c01005d1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01005d5:	75 0f                	jne    c01005e6 <stab_binsearch+0x115>
        *region_right = *region_left - 1;
c01005d7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01005da:	8b 00                	mov    (%eax),%eax
c01005dc:	8d 50 ff             	lea    -0x1(%eax),%edx
c01005df:	8b 45 10             	mov    0x10(%ebp),%eax
c01005e2:	89 10                	mov    %edx,(%eax)
        l = *region_right;
        for (; l > *region_left && stabs[l].n_type != type; l --)
            /* do nothing */;
        *region_left = l;
    }
}
c01005e4:	eb 3f                	jmp    c0100625 <stab_binsearch+0x154>
    if (!any_matches) {
        *region_right = *region_left - 1;
    }
    else {
        // find rightmost region containing 'addr'
        l = *region_right;
c01005e6:	8b 45 10             	mov    0x10(%ebp),%eax
c01005e9:	8b 00                	mov    (%eax),%eax
c01005eb:	89 45 fc             	mov    %eax,-0x4(%ebp)
        for (; l > *region_left && stabs[l].n_type != type; l --)
c01005ee:	eb 04                	jmp    c01005f4 <stab_binsearch+0x123>
c01005f0:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
c01005f4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01005f7:	8b 00                	mov    (%eax),%eax
c01005f9:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c01005fc:	7d 1f                	jge    c010061d <stab_binsearch+0x14c>
c01005fe:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0100601:	89 d0                	mov    %edx,%eax
c0100603:	01 c0                	add    %eax,%eax
c0100605:	01 d0                	add    %edx,%eax
c0100607:	c1 e0 02             	shl    $0x2,%eax
c010060a:	89 c2                	mov    %eax,%edx
c010060c:	8b 45 08             	mov    0x8(%ebp),%eax
c010060f:	01 d0                	add    %edx,%eax
c0100611:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100615:	0f b6 c0             	movzbl %al,%eax
c0100618:	3b 45 14             	cmp    0x14(%ebp),%eax
c010061b:	75 d3                	jne    c01005f0 <stab_binsearch+0x11f>
            /* do nothing */;
        *region_left = l;
c010061d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100620:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0100623:	89 10                	mov    %edx,(%eax)
    }
}
c0100625:	90                   	nop
c0100626:	c9                   	leave  
c0100627:	c3                   	ret    

c0100628 <debuginfo_eip>:
 * the specified instruction address, @addr.  Returns 0 if information
 * was found, and negative if not.  But even if it returns negative it
 * has stored some information into '*info'.
 * */
int
debuginfo_eip(uintptr_t addr, struct eipdebuginfo *info) {
c0100628:	55                   	push   %ebp
c0100629:	89 e5                	mov    %esp,%ebp
c010062b:	83 ec 38             	sub    $0x38,%esp
    const struct stab *stabs, *stab_end;
    const char *stabstr, *stabstr_end;

    info->eip_file = "<unknown>";
c010062e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100631:	c7 00 38 ce 10 c0    	movl   $0xc010ce38,(%eax)
    info->eip_line = 0;
c0100637:	8b 45 0c             	mov    0xc(%ebp),%eax
c010063a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    info->eip_fn_name = "<unknown>";
c0100641:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100644:	c7 40 08 38 ce 10 c0 	movl   $0xc010ce38,0x8(%eax)
    info->eip_fn_namelen = 9;
c010064b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010064e:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
    info->eip_fn_addr = addr;
c0100655:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100658:	8b 55 08             	mov    0x8(%ebp),%edx
c010065b:	89 50 10             	mov    %edx,0x10(%eax)
    info->eip_fn_narg = 0;
c010065e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100661:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

    // find the relevant set of stabs
    if (addr >= KERNBASE) {
c0100668:	81 7d 08 ff ff ff bf 	cmpl   $0xbfffffff,0x8(%ebp)
c010066f:	76 21                	jbe    c0100692 <debuginfo_eip+0x6a>
        stabs = __STAB_BEGIN__;
c0100671:	c7 45 f4 80 fa 10 c0 	movl   $0xc010fa80,-0xc(%ebp)
        stab_end = __STAB_END__;
c0100678:	c7 45 f0 68 77 12 c0 	movl   $0xc0127768,-0x10(%ebp)
        stabstr = __STABSTR_BEGIN__;
c010067f:	c7 45 ec 69 77 12 c0 	movl   $0xc0127769,-0x14(%ebp)
        stabstr_end = __STABSTR_END__;
c0100686:	c7 45 e8 2e e7 12 c0 	movl   $0xc012e72e,-0x18(%ebp)
c010068d:	e9 c3 00 00 00       	jmp    c0100755 <debuginfo_eip+0x12d>
    }
    else {
        // user-program linker script, tools/user.ld puts the information about the
        // program's stabs (included __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__,
        // and __STABSTR_END__) in a structure located at virtual address USTAB.
        const struct userstabdata *usd = (struct userstabdata *)USTAB;
c0100692:	c7 45 e4 00 00 20 00 	movl   $0x200000,-0x1c(%ebp)

        // make sure that debugger (current process) can access this memory
        struct mm_struct *mm;
        if (current == NULL || (mm = current->mm) == NULL) {
c0100699:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010069e:	85 c0                	test   %eax,%eax
c01006a0:	74 11                	je     c01006b3 <debuginfo_eip+0x8b>
c01006a2:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c01006a7:	8b 40 18             	mov    0x18(%eax),%eax
c01006aa:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01006ad:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01006b1:	75 0a                	jne    c01006bd <debuginfo_eip+0x95>
            return -1;
c01006b3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01006b8:	e9 4e 03 00 00       	jmp    c0100a0b <debuginfo_eip+0x3e3>
        }
        if (!user_mem_check(mm, (uintptr_t)usd, sizeof(struct userstabdata), 0)) {
c01006bd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01006c0:	6a 00                	push   $0x0
c01006c2:	6a 10                	push   $0x10
c01006c4:	50                   	push   %eax
c01006c5:	ff 75 e0             	pushl  -0x20(%ebp)
c01006c8:	e8 bf 3e 00 00       	call   c010458c <user_mem_check>
c01006cd:	83 c4 10             	add    $0x10,%esp
c01006d0:	85 c0                	test   %eax,%eax
c01006d2:	75 0a                	jne    c01006de <debuginfo_eip+0xb6>
            return -1;
c01006d4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01006d9:	e9 2d 03 00 00       	jmp    c0100a0b <debuginfo_eip+0x3e3>
        }

        stabs = usd->stabs;
c01006de:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01006e1:	8b 00                	mov    (%eax),%eax
c01006e3:	89 45 f4             	mov    %eax,-0xc(%ebp)
        stab_end = usd->stab_end;
c01006e6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01006e9:	8b 40 04             	mov    0x4(%eax),%eax
c01006ec:	89 45 f0             	mov    %eax,-0x10(%ebp)
        stabstr = usd->stabstr;
c01006ef:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01006f2:	8b 40 08             	mov    0x8(%eax),%eax
c01006f5:	89 45 ec             	mov    %eax,-0x14(%ebp)
        stabstr_end = usd->stabstr_end;
c01006f8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01006fb:	8b 40 0c             	mov    0xc(%eax),%eax
c01006fe:	89 45 e8             	mov    %eax,-0x18(%ebp)

        // make sure the STABS and string table memory is valid
        if (!user_mem_check(mm, (uintptr_t)stabs, (uintptr_t)stab_end - (uintptr_t)stabs, 0)) {
c0100701:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100704:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100707:	29 c2                	sub    %eax,%edx
c0100709:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010070c:	6a 00                	push   $0x0
c010070e:	52                   	push   %edx
c010070f:	50                   	push   %eax
c0100710:	ff 75 e0             	pushl  -0x20(%ebp)
c0100713:	e8 74 3e 00 00       	call   c010458c <user_mem_check>
c0100718:	83 c4 10             	add    $0x10,%esp
c010071b:	85 c0                	test   %eax,%eax
c010071d:	75 0a                	jne    c0100729 <debuginfo_eip+0x101>
            return -1;
c010071f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100724:	e9 e2 02 00 00       	jmp    c0100a0b <debuginfo_eip+0x3e3>
        }
        if (!user_mem_check(mm, (uintptr_t)stabstr, stabstr_end - stabstr, 0)) {
c0100729:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010072c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010072f:	29 c2                	sub    %eax,%edx
c0100731:	89 d0                	mov    %edx,%eax
c0100733:	89 c2                	mov    %eax,%edx
c0100735:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100738:	6a 00                	push   $0x0
c010073a:	52                   	push   %edx
c010073b:	50                   	push   %eax
c010073c:	ff 75 e0             	pushl  -0x20(%ebp)
c010073f:	e8 48 3e 00 00       	call   c010458c <user_mem_check>
c0100744:	83 c4 10             	add    $0x10,%esp
c0100747:	85 c0                	test   %eax,%eax
c0100749:	75 0a                	jne    c0100755 <debuginfo_eip+0x12d>
            return -1;
c010074b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100750:	e9 b6 02 00 00       	jmp    c0100a0b <debuginfo_eip+0x3e3>
        }
    }

    // String table validity checks
    if (stabstr_end <= stabstr || stabstr_end[-1] != 0) {
c0100755:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100758:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010075b:	76 0d                	jbe    c010076a <debuginfo_eip+0x142>
c010075d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100760:	83 e8 01             	sub    $0x1,%eax
c0100763:	0f b6 00             	movzbl (%eax),%eax
c0100766:	84 c0                	test   %al,%al
c0100768:	74 0a                	je     c0100774 <debuginfo_eip+0x14c>
        return -1;
c010076a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010076f:	e9 97 02 00 00       	jmp    c0100a0b <debuginfo_eip+0x3e3>
    // 'eip'.  First, we find the basic source file containing 'eip'.
    // Then, we look in that source file for the function.  Then we look
    // for the line number.

    // Search the entire set of stabs for the source file (type N_SO).
    int lfile = 0, rfile = (stab_end - stabs) - 1;
c0100774:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c010077b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010077e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100781:	29 c2                	sub    %eax,%edx
c0100783:	89 d0                	mov    %edx,%eax
c0100785:	c1 f8 02             	sar    $0x2,%eax
c0100788:	69 c0 ab aa aa aa    	imul   $0xaaaaaaab,%eax,%eax
c010078e:	83 e8 01             	sub    $0x1,%eax
c0100791:	89 45 d8             	mov    %eax,-0x28(%ebp)
    stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
c0100794:	83 ec 0c             	sub    $0xc,%esp
c0100797:	ff 75 08             	pushl  0x8(%ebp)
c010079a:	6a 64                	push   $0x64
c010079c:	8d 45 d8             	lea    -0x28(%ebp),%eax
c010079f:	50                   	push   %eax
c01007a0:	8d 45 dc             	lea    -0x24(%ebp),%eax
c01007a3:	50                   	push   %eax
c01007a4:	ff 75 f4             	pushl  -0xc(%ebp)
c01007a7:	e8 25 fd ff ff       	call   c01004d1 <stab_binsearch>
c01007ac:	83 c4 20             	add    $0x20,%esp
    if (lfile == 0)
c01007af:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01007b2:	85 c0                	test   %eax,%eax
c01007b4:	75 0a                	jne    c01007c0 <debuginfo_eip+0x198>
        return -1;
c01007b6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01007bb:	e9 4b 02 00 00       	jmp    c0100a0b <debuginfo_eip+0x3e3>

    // Search within that file's stabs for the function definition
    // (N_FUN).
    int lfun = lfile, rfun = rfile;
c01007c0:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01007c3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c01007c6:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01007c9:	89 45 d0             	mov    %eax,-0x30(%ebp)
    int lline, rline;
    stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
c01007cc:	83 ec 0c             	sub    $0xc,%esp
c01007cf:	ff 75 08             	pushl  0x8(%ebp)
c01007d2:	6a 24                	push   $0x24
c01007d4:	8d 45 d0             	lea    -0x30(%ebp),%eax
c01007d7:	50                   	push   %eax
c01007d8:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c01007db:	50                   	push   %eax
c01007dc:	ff 75 f4             	pushl  -0xc(%ebp)
c01007df:	e8 ed fc ff ff       	call   c01004d1 <stab_binsearch>
c01007e4:	83 c4 20             	add    $0x20,%esp

    if (lfun <= rfun) {
c01007e7:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01007ea:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01007ed:	39 c2                	cmp    %eax,%edx
c01007ef:	7f 7c                	jg     c010086d <debuginfo_eip+0x245>
        // stabs[lfun] points to the function name
        // in the string table, but check bounds just in case.
        if (stabs[lfun].n_strx < stabstr_end - stabstr) {
c01007f1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01007f4:	89 c2                	mov    %eax,%edx
c01007f6:	89 d0                	mov    %edx,%eax
c01007f8:	01 c0                	add    %eax,%eax
c01007fa:	01 d0                	add    %edx,%eax
c01007fc:	c1 e0 02             	shl    $0x2,%eax
c01007ff:	89 c2                	mov    %eax,%edx
c0100801:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100804:	01 d0                	add    %edx,%eax
c0100806:	8b 00                	mov    (%eax),%eax
c0100808:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c010080b:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010080e:	29 d1                	sub    %edx,%ecx
c0100810:	89 ca                	mov    %ecx,%edx
c0100812:	39 d0                	cmp    %edx,%eax
c0100814:	73 22                	jae    c0100838 <debuginfo_eip+0x210>
            info->eip_fn_name = stabstr + stabs[lfun].n_strx;
c0100816:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100819:	89 c2                	mov    %eax,%edx
c010081b:	89 d0                	mov    %edx,%eax
c010081d:	01 c0                	add    %eax,%eax
c010081f:	01 d0                	add    %edx,%eax
c0100821:	c1 e0 02             	shl    $0x2,%eax
c0100824:	89 c2                	mov    %eax,%edx
c0100826:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100829:	01 d0                	add    %edx,%eax
c010082b:	8b 10                	mov    (%eax),%edx
c010082d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100830:	01 c2                	add    %eax,%edx
c0100832:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100835:	89 50 08             	mov    %edx,0x8(%eax)
        }
        info->eip_fn_addr = stabs[lfun].n_value;
c0100838:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010083b:	89 c2                	mov    %eax,%edx
c010083d:	89 d0                	mov    %edx,%eax
c010083f:	01 c0                	add    %eax,%eax
c0100841:	01 d0                	add    %edx,%eax
c0100843:	c1 e0 02             	shl    $0x2,%eax
c0100846:	89 c2                	mov    %eax,%edx
c0100848:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010084b:	01 d0                	add    %edx,%eax
c010084d:	8b 50 08             	mov    0x8(%eax),%edx
c0100850:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100853:	89 50 10             	mov    %edx,0x10(%eax)
        addr -= info->eip_fn_addr;
c0100856:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100859:	8b 40 10             	mov    0x10(%eax),%eax
c010085c:	29 45 08             	sub    %eax,0x8(%ebp)
        // Search within the function definition for the line number.
        lline = lfun;
c010085f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100862:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfun;
c0100865:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0100868:	89 45 c8             	mov    %eax,-0x38(%ebp)
c010086b:	eb 15                	jmp    c0100882 <debuginfo_eip+0x25a>
    } else {
        // Couldn't find function stab!  Maybe we're in an assembly
        // file.  Search the whole file for the line number.
        info->eip_fn_addr = addr;
c010086d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100870:	8b 55 08             	mov    0x8(%ebp),%edx
c0100873:	89 50 10             	mov    %edx,0x10(%eax)
        lline = lfile;
c0100876:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100879:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfile;
c010087c:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010087f:	89 45 c8             	mov    %eax,-0x38(%ebp)
    }
    info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
c0100882:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100885:	8b 40 08             	mov    0x8(%eax),%eax
c0100888:	83 ec 08             	sub    $0x8,%esp
c010088b:	6a 3a                	push   $0x3a
c010088d:	50                   	push   %eax
c010088e:	e8 76 ba 00 00       	call   c010c309 <strfind>
c0100893:	83 c4 10             	add    $0x10,%esp
c0100896:	89 c2                	mov    %eax,%edx
c0100898:	8b 45 0c             	mov    0xc(%ebp),%eax
c010089b:	8b 40 08             	mov    0x8(%eax),%eax
c010089e:	29 c2                	sub    %eax,%edx
c01008a0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01008a3:	89 50 0c             	mov    %edx,0xc(%eax)

    // Search within [lline, rline] for the line number stab.
    // If found, set info->eip_line to the right line number.
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
c01008a6:	83 ec 0c             	sub    $0xc,%esp
c01008a9:	ff 75 08             	pushl  0x8(%ebp)
c01008ac:	6a 44                	push   $0x44
c01008ae:	8d 45 c8             	lea    -0x38(%ebp),%eax
c01008b1:	50                   	push   %eax
c01008b2:	8d 45 cc             	lea    -0x34(%ebp),%eax
c01008b5:	50                   	push   %eax
c01008b6:	ff 75 f4             	pushl  -0xc(%ebp)
c01008b9:	e8 13 fc ff ff       	call   c01004d1 <stab_binsearch>
c01008be:	83 c4 20             	add    $0x20,%esp
    if (lline <= rline) {
c01008c1:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01008c4:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01008c7:	39 c2                	cmp    %eax,%edx
c01008c9:	7f 24                	jg     c01008ef <debuginfo_eip+0x2c7>
        info->eip_line = stabs[rline].n_desc;
c01008cb:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01008ce:	89 c2                	mov    %eax,%edx
c01008d0:	89 d0                	mov    %edx,%eax
c01008d2:	01 c0                	add    %eax,%eax
c01008d4:	01 d0                	add    %edx,%eax
c01008d6:	c1 e0 02             	shl    $0x2,%eax
c01008d9:	89 c2                	mov    %eax,%edx
c01008db:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01008de:	01 d0                	add    %edx,%eax
c01008e0:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c01008e4:	0f b7 d0             	movzwl %ax,%edx
c01008e7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01008ea:	89 50 04             	mov    %edx,0x4(%eax)

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c01008ed:	eb 13                	jmp    c0100902 <debuginfo_eip+0x2da>
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
    if (lline <= rline) {
        info->eip_line = stabs[rline].n_desc;
    } else {
        return -1;
c01008ef:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01008f4:	e9 12 01 00 00       	jmp    c0100a0b <debuginfo_eip+0x3e3>
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
           && stabs[lline].n_type != N_SOL
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
        lline --;
c01008f9:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01008fc:	83 e8 01             	sub    $0x1,%eax
c01008ff:	89 45 cc             	mov    %eax,-0x34(%ebp)

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c0100902:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0100905:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100908:	39 c2                	cmp    %eax,%edx
c010090a:	7c 56                	jl     c0100962 <debuginfo_eip+0x33a>
           && stabs[lline].n_type != N_SOL
c010090c:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010090f:	89 c2                	mov    %eax,%edx
c0100911:	89 d0                	mov    %edx,%eax
c0100913:	01 c0                	add    %eax,%eax
c0100915:	01 d0                	add    %edx,%eax
c0100917:	c1 e0 02             	shl    $0x2,%eax
c010091a:	89 c2                	mov    %eax,%edx
c010091c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010091f:	01 d0                	add    %edx,%eax
c0100921:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100925:	3c 84                	cmp    $0x84,%al
c0100927:	74 39                	je     c0100962 <debuginfo_eip+0x33a>
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
c0100929:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010092c:	89 c2                	mov    %eax,%edx
c010092e:	89 d0                	mov    %edx,%eax
c0100930:	01 c0                	add    %eax,%eax
c0100932:	01 d0                	add    %edx,%eax
c0100934:	c1 e0 02             	shl    $0x2,%eax
c0100937:	89 c2                	mov    %eax,%edx
c0100939:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010093c:	01 d0                	add    %edx,%eax
c010093e:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100942:	3c 64                	cmp    $0x64,%al
c0100944:	75 b3                	jne    c01008f9 <debuginfo_eip+0x2d1>
c0100946:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100949:	89 c2                	mov    %eax,%edx
c010094b:	89 d0                	mov    %edx,%eax
c010094d:	01 c0                	add    %eax,%eax
c010094f:	01 d0                	add    %edx,%eax
c0100951:	c1 e0 02             	shl    $0x2,%eax
c0100954:	89 c2                	mov    %eax,%edx
c0100956:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100959:	01 d0                	add    %edx,%eax
c010095b:	8b 40 08             	mov    0x8(%eax),%eax
c010095e:	85 c0                	test   %eax,%eax
c0100960:	74 97                	je     c01008f9 <debuginfo_eip+0x2d1>
        lline --;
    }
    if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr) {
c0100962:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0100965:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100968:	39 c2                	cmp    %eax,%edx
c010096a:	7c 46                	jl     c01009b2 <debuginfo_eip+0x38a>
c010096c:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010096f:	89 c2                	mov    %eax,%edx
c0100971:	89 d0                	mov    %edx,%eax
c0100973:	01 c0                	add    %eax,%eax
c0100975:	01 d0                	add    %edx,%eax
c0100977:	c1 e0 02             	shl    $0x2,%eax
c010097a:	89 c2                	mov    %eax,%edx
c010097c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010097f:	01 d0                	add    %edx,%eax
c0100981:	8b 00                	mov    (%eax),%eax
c0100983:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c0100986:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0100989:	29 d1                	sub    %edx,%ecx
c010098b:	89 ca                	mov    %ecx,%edx
c010098d:	39 d0                	cmp    %edx,%eax
c010098f:	73 21                	jae    c01009b2 <debuginfo_eip+0x38a>
        info->eip_file = stabstr + stabs[lline].n_strx;
c0100991:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100994:	89 c2                	mov    %eax,%edx
c0100996:	89 d0                	mov    %edx,%eax
c0100998:	01 c0                	add    %eax,%eax
c010099a:	01 d0                	add    %edx,%eax
c010099c:	c1 e0 02             	shl    $0x2,%eax
c010099f:	89 c2                	mov    %eax,%edx
c01009a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01009a4:	01 d0                	add    %edx,%eax
c01009a6:	8b 10                	mov    (%eax),%edx
c01009a8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01009ab:	01 c2                	add    %eax,%edx
c01009ad:	8b 45 0c             	mov    0xc(%ebp),%eax
c01009b0:	89 10                	mov    %edx,(%eax)
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
c01009b2:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01009b5:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01009b8:	39 c2                	cmp    %eax,%edx
c01009ba:	7d 4a                	jge    c0100a06 <debuginfo_eip+0x3de>
        for (lline = lfun + 1;
c01009bc:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01009bf:	83 c0 01             	add    $0x1,%eax
c01009c2:	89 45 cc             	mov    %eax,-0x34(%ebp)
c01009c5:	eb 18                	jmp    c01009df <debuginfo_eip+0x3b7>
             lline < rfun && stabs[lline].n_type == N_PSYM;
             lline ++) {
            info->eip_fn_narg ++;
c01009c7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01009ca:	8b 40 14             	mov    0x14(%eax),%eax
c01009cd:	8d 50 01             	lea    0x1(%eax),%edx
c01009d0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01009d3:	89 50 14             	mov    %edx,0x14(%eax)
    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
             lline < rfun && stabs[lline].n_type == N_PSYM;
             lline ++) {
c01009d6:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01009d9:	83 c0 01             	add    $0x1,%eax
c01009dc:	89 45 cc             	mov    %eax,-0x34(%ebp)

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
             lline < rfun && stabs[lline].n_type == N_PSYM;
c01009df:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01009e2:	8b 45 d0             	mov    -0x30(%ebp),%eax
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
c01009e5:	39 c2                	cmp    %eax,%edx
c01009e7:	7d 1d                	jge    c0100a06 <debuginfo_eip+0x3de>
             lline < rfun && stabs[lline].n_type == N_PSYM;
c01009e9:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01009ec:	89 c2                	mov    %eax,%edx
c01009ee:	89 d0                	mov    %edx,%eax
c01009f0:	01 c0                	add    %eax,%eax
c01009f2:	01 d0                	add    %edx,%eax
c01009f4:	c1 e0 02             	shl    $0x2,%eax
c01009f7:	89 c2                	mov    %eax,%edx
c01009f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01009fc:	01 d0                	add    %edx,%eax
c01009fe:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100a02:	3c a0                	cmp    $0xa0,%al
c0100a04:	74 c1                	je     c01009c7 <debuginfo_eip+0x39f>
             lline ++) {
            info->eip_fn_narg ++;
        }
    }
    return 0;
c0100a06:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100a0b:	c9                   	leave  
c0100a0c:	c3                   	ret    

c0100a0d <print_kerninfo>:
 * print_kerninfo - print the information about kernel, including the location
 * of kernel entry, the start addresses of data and text segements, the start
 * address of free memory and how many memory that kernel has used.
 * */
void
print_kerninfo(void) {
c0100a0d:	55                   	push   %ebp
c0100a0e:	89 e5                	mov    %esp,%ebp
c0100a10:	83 ec 08             	sub    $0x8,%esp
    extern char etext[], edata[], end[], kern_init[];
    cprintf("Special kernel symbols:\n");
c0100a13:	83 ec 0c             	sub    $0xc,%esp
c0100a16:	68 42 ce 10 c0       	push   $0xc010ce42
c0100a1b:	e8 77 f8 ff ff       	call   c0100297 <cprintf>
c0100a20:	83 c4 10             	add    $0x10,%esp
    cprintf("  entry  0x%08x (phys)\n", kern_init);
c0100a23:	83 ec 08             	sub    $0x8,%esp
c0100a26:	68 36 00 10 c0       	push   $0xc0100036
c0100a2b:	68 5b ce 10 c0       	push   $0xc010ce5b
c0100a30:	e8 62 f8 ff ff       	call   c0100297 <cprintf>
c0100a35:	83 c4 10             	add    $0x10,%esp
    cprintf("  etext  0x%08x (phys)\n", etext);
c0100a38:	83 ec 08             	sub    $0x8,%esp
c0100a3b:	68 29 cd 10 c0       	push   $0xc010cd29
c0100a40:	68 73 ce 10 c0       	push   $0xc010ce73
c0100a45:	e8 4d f8 ff ff       	call   c0100297 <cprintf>
c0100a4a:	83 c4 10             	add    $0x10,%esp
    cprintf("  edata  0x%08x (phys)\n", edata);
c0100a4d:	83 ec 08             	sub    $0x8,%esp
c0100a50:	68 00 40 1c c0       	push   $0xc01c4000
c0100a55:	68 8b ce 10 c0       	push   $0xc010ce8b
c0100a5a:	e8 38 f8 ff ff       	call   c0100297 <cprintf>
c0100a5f:	83 c4 10             	add    $0x10,%esp
    cprintf("  end    0x%08x (phys)\n", end);
c0100a62:	83 ec 08             	sub    $0x8,%esp
c0100a65:	68 e4 72 1c c0       	push   $0xc01c72e4
c0100a6a:	68 a3 ce 10 c0       	push   $0xc010cea3
c0100a6f:	e8 23 f8 ff ff       	call   c0100297 <cprintf>
c0100a74:	83 c4 10             	add    $0x10,%esp
    cprintf("Kernel executable memory footprint: %dKB\n", (end - kern_init + 1023)/1024);
c0100a77:	b8 e4 72 1c c0       	mov    $0xc01c72e4,%eax
c0100a7c:	05 ff 03 00 00       	add    $0x3ff,%eax
c0100a81:	ba 36 00 10 c0       	mov    $0xc0100036,%edx
c0100a86:	29 d0                	sub    %edx,%eax
c0100a88:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
c0100a8e:	85 c0                	test   %eax,%eax
c0100a90:	0f 48 c2             	cmovs  %edx,%eax
c0100a93:	c1 f8 0a             	sar    $0xa,%eax
c0100a96:	83 ec 08             	sub    $0x8,%esp
c0100a99:	50                   	push   %eax
c0100a9a:	68 bc ce 10 c0       	push   $0xc010cebc
c0100a9f:	e8 f3 f7 ff ff       	call   c0100297 <cprintf>
c0100aa4:	83 c4 10             	add    $0x10,%esp
}
c0100aa7:	90                   	nop
c0100aa8:	c9                   	leave  
c0100aa9:	c3                   	ret    

c0100aaa <print_debuginfo>:
/* *
 * print_debuginfo - read and print the stat information for the address @eip,
 * and info.eip_fn_addr should be the first address of the related function.
 * */
void
print_debuginfo(uintptr_t eip) {
c0100aaa:	55                   	push   %ebp
c0100aab:	89 e5                	mov    %esp,%ebp
c0100aad:	81 ec 28 01 00 00    	sub    $0x128,%esp
    struct eipdebuginfo info;
    if (debuginfo_eip(eip, &info) != 0) {
c0100ab3:	83 ec 08             	sub    $0x8,%esp
c0100ab6:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0100ab9:	50                   	push   %eax
c0100aba:	ff 75 08             	pushl  0x8(%ebp)
c0100abd:	e8 66 fb ff ff       	call   c0100628 <debuginfo_eip>
c0100ac2:	83 c4 10             	add    $0x10,%esp
c0100ac5:	85 c0                	test   %eax,%eax
c0100ac7:	74 15                	je     c0100ade <print_debuginfo+0x34>
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
c0100ac9:	83 ec 08             	sub    $0x8,%esp
c0100acc:	ff 75 08             	pushl  0x8(%ebp)
c0100acf:	68 e6 ce 10 c0       	push   $0xc010cee6
c0100ad4:	e8 be f7 ff ff       	call   c0100297 <cprintf>
c0100ad9:	83 c4 10             	add    $0x10,%esp
        }
        fnname[j] = '\0';
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
                fnname, eip - info.eip_fn_addr);
    }
}
c0100adc:	eb 65                	jmp    c0100b43 <print_debuginfo+0x99>
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
    }
    else {
        char fnname[256];
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0100ade:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100ae5:	eb 1c                	jmp    c0100b03 <print_debuginfo+0x59>
            fnname[j] = info.eip_fn_name[j];
c0100ae7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0100aea:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100aed:	01 d0                	add    %edx,%eax
c0100aef:	0f b6 00             	movzbl (%eax),%eax
c0100af2:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
c0100af8:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100afb:	01 ca                	add    %ecx,%edx
c0100afd:	88 02                	mov    %al,(%edx)
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
    }
    else {
        char fnname[256];
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0100aff:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100b03:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100b06:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0100b09:	7f dc                	jg     c0100ae7 <print_debuginfo+0x3d>
            fnname[j] = info.eip_fn_name[j];
        }
        fnname[j] = '\0';
c0100b0b:	8d 95 dc fe ff ff    	lea    -0x124(%ebp),%edx
c0100b11:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b14:	01 d0                	add    %edx,%eax
c0100b16:	c6 00 00             	movb   $0x0,(%eax)
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
                fnname, eip - info.eip_fn_addr);
c0100b19:	8b 45 ec             	mov    -0x14(%ebp),%eax
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
            fnname[j] = info.eip_fn_name[j];
        }
        fnname[j] = '\0';
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
c0100b1c:	8b 55 08             	mov    0x8(%ebp),%edx
c0100b1f:	89 d1                	mov    %edx,%ecx
c0100b21:	29 c1                	sub    %eax,%ecx
c0100b23:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0100b26:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100b29:	83 ec 0c             	sub    $0xc,%esp
c0100b2c:	51                   	push   %ecx
c0100b2d:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
c0100b33:	51                   	push   %ecx
c0100b34:	52                   	push   %edx
c0100b35:	50                   	push   %eax
c0100b36:	68 02 cf 10 c0       	push   $0xc010cf02
c0100b3b:	e8 57 f7 ff ff       	call   c0100297 <cprintf>
c0100b40:	83 c4 20             	add    $0x20,%esp
                fnname, eip - info.eip_fn_addr);
    }
}
c0100b43:	90                   	nop
c0100b44:	c9                   	leave  
c0100b45:	c3                   	ret    

c0100b46 <read_eip>:

static __noinline uint32_t
read_eip(void) {
c0100b46:	55                   	push   %ebp
c0100b47:	89 e5                	mov    %esp,%ebp
c0100b49:	83 ec 10             	sub    $0x10,%esp
    uint32_t eip;
    asm volatile("movl 4(%%ebp), %0" : "=r" (eip));
c0100b4c:	8b 45 04             	mov    0x4(%ebp),%eax
c0100b4f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eip;
c0100b52:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0100b55:	c9                   	leave  
c0100b56:	c3                   	ret    

c0100b57 <print_stackframe>:
 *
 * Note that, the length of ebp-chain is limited. In boot/bootasm.S, before jumping
 * to the kernel entry, the value of ebp has been set to zero, that's the boundary.
 * */
void
print_stackframe(void) {
c0100b57:	55                   	push   %ebp
c0100b58:	89 e5                	mov    %esp,%ebp
c0100b5a:	53                   	push   %ebx
c0100b5b:	83 ec 34             	sub    $0x34,%esp
}

static inline uint32_t
read_ebp(void) {
    uint32_t ebp;
    asm volatile ("movl %%ebp, %0" : "=r" (ebp));
c0100b5e:	89 e8                	mov    %ebp,%eax
c0100b60:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return ebp;
c0100b63:	8b 45 e4             	mov    -0x1c(%ebp),%eax
      *    (3.5) popup a calling stackframe
      *           NOTICE: the calling funciton's return addr eip  = ss:[ebp+4]
      *                   the calling funciton's ebp = ss:[ebp]
      */
    // 1. read_ebp
    uint32_t stack_val_ebp = read_ebp();
c0100b66:	89 45 f4             	mov    %eax,-0xc(%ebp)
    // 2. read_eip
    uint32_t stack_val_eip = read_eip();
c0100b69:	e8 d8 ff ff ff       	call   c0100b46 <read_eip>
c0100b6e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    // 3. iterate stacks
    uint32_t stack_val_args[4];
    for (int i = 0; i < STACKFRAME_DEPTH; i++) {
c0100b71:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0100b78:	e9 93 00 00 00       	jmp    c0100c10 <print_stackframe+0xb9>
        cprintf("ebp:0x%08x eip:0x%08x ", stack_val_ebp, stack_val_eip);
c0100b7d:	83 ec 04             	sub    $0x4,%esp
c0100b80:	ff 75 f0             	pushl  -0x10(%ebp)
c0100b83:	ff 75 f4             	pushl  -0xc(%ebp)
c0100b86:	68 14 cf 10 c0       	push   $0xc010cf14
c0100b8b:	e8 07 f7 ff ff       	call   c0100297 <cprintf>
c0100b90:	83 c4 10             	add    $0x10,%esp
        // get args
        for (int j = 0; j < 4; j++) {
c0100b93:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c0100b9a:	eb 1f                	jmp    c0100bbb <print_stackframe+0x64>
            stack_val_args[j] = *(((uint32_t*) stack_val_ebp) + 2 + j);
c0100b9c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100b9f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0100ba6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100ba9:	01 d0                	add    %edx,%eax
c0100bab:	83 c0 08             	add    $0x8,%eax
c0100bae:	8b 10                	mov    (%eax),%edx
c0100bb0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100bb3:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
    // 3. iterate stacks
    uint32_t stack_val_args[4];
    for (int i = 0; i < STACKFRAME_DEPTH; i++) {
        cprintf("ebp:0x%08x eip:0x%08x ", stack_val_ebp, stack_val_eip);
        // get args
        for (int j = 0; j < 4; j++) {
c0100bb7:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
c0100bbb:	83 7d e8 03          	cmpl   $0x3,-0x18(%ebp)
c0100bbf:	7e db                	jle    c0100b9c <print_stackframe+0x45>
            stack_val_args[j] = *(((uint32_t*) stack_val_ebp) + 2 + j);
        }
        cprintf("args:0x%08x 0x%08x 0x%08x 0x%08x\n", stack_val_args[0], 
c0100bc1:	8b 5d e0             	mov    -0x20(%ebp),%ebx
c0100bc4:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0100bc7:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0100bca:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100bcd:	83 ec 0c             	sub    $0xc,%esp
c0100bd0:	53                   	push   %ebx
c0100bd1:	51                   	push   %ecx
c0100bd2:	52                   	push   %edx
c0100bd3:	50                   	push   %eax
c0100bd4:	68 2c cf 10 c0       	push   $0xc010cf2c
c0100bd9:	e8 b9 f6 ff ff       	call   c0100297 <cprintf>
c0100bde:	83 c4 20             	add    $0x20,%esp
                stack_val_args[1], stack_val_args[2], stack_val_args[3]);
        // print function info
        print_debuginfo(stack_val_eip - 1);
c0100be1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100be4:	83 e8 01             	sub    $0x1,%eax
c0100be7:	83 ec 0c             	sub    $0xc,%esp
c0100bea:	50                   	push   %eax
c0100beb:	e8 ba fe ff ff       	call   c0100aaa <print_debuginfo>
c0100bf0:	83 c4 10             	add    $0x10,%esp
        // pop up stackframe, refresh ebp & eip
        stack_val_eip = *(((uint32_t*) stack_val_ebp) + 1);
c0100bf3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100bf6:	83 c0 04             	add    $0x4,%eax
c0100bf9:	8b 00                	mov    (%eax),%eax
c0100bfb:	89 45 f0             	mov    %eax,-0x10(%ebp)
        stack_val_ebp = *(((uint32_t*) stack_val_ebp));
c0100bfe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100c01:	8b 00                	mov    (%eax),%eax
c0100c03:	89 45 f4             	mov    %eax,-0xc(%ebp)
        // ebp should be valid
        if (stack_val_ebp <= 0) {
c0100c06:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100c0a:	74 10                	je     c0100c1c <print_stackframe+0xc5>
    uint32_t stack_val_ebp = read_ebp();
    // 2. read_eip
    uint32_t stack_val_eip = read_eip();
    // 3. iterate stacks
    uint32_t stack_val_args[4];
    for (int i = 0; i < STACKFRAME_DEPTH; i++) {
c0100c0c:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0100c10:	83 7d ec 13          	cmpl   $0x13,-0x14(%ebp)
c0100c14:	0f 8e 63 ff ff ff    	jle    c0100b7d <print_stackframe+0x26>
        // ebp should be valid
        if (stack_val_ebp <= 0) {
            break;
        }
    }
}
c0100c1a:	eb 01                	jmp    c0100c1d <print_stackframe+0xc6>
        // pop up stackframe, refresh ebp & eip
        stack_val_eip = *(((uint32_t*) stack_val_ebp) + 1);
        stack_val_ebp = *(((uint32_t*) stack_val_ebp));
        // ebp should be valid
        if (stack_val_ebp <= 0) {
            break;
c0100c1c:	90                   	nop
        }
    }
}
c0100c1d:	90                   	nop
c0100c1e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0100c21:	c9                   	leave  
c0100c22:	c3                   	ret    

c0100c23 <parse>:
#define MAXARGS         16
#define WHITESPACE      " \t\n\r"

/* parse - parse the command buffer into whitespace-separated arguments */
static int
parse(char *buf, char **argv) {
c0100c23:	55                   	push   %ebp
c0100c24:	89 e5                	mov    %esp,%ebp
c0100c26:	83 ec 18             	sub    $0x18,%esp
    int argc = 0;
c0100c29:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100c30:	eb 0c                	jmp    c0100c3e <parse+0x1b>
            *buf ++ = '\0';
c0100c32:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c35:	8d 50 01             	lea    0x1(%eax),%edx
c0100c38:	89 55 08             	mov    %edx,0x8(%ebp)
c0100c3b:	c6 00 00             	movb   $0x0,(%eax)
static int
parse(char *buf, char **argv) {
    int argc = 0;
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100c3e:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c41:	0f b6 00             	movzbl (%eax),%eax
c0100c44:	84 c0                	test   %al,%al
c0100c46:	74 1e                	je     c0100c66 <parse+0x43>
c0100c48:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c4b:	0f b6 00             	movzbl (%eax),%eax
c0100c4e:	0f be c0             	movsbl %al,%eax
c0100c51:	83 ec 08             	sub    $0x8,%esp
c0100c54:	50                   	push   %eax
c0100c55:	68 d0 cf 10 c0       	push   $0xc010cfd0
c0100c5a:	e8 77 b6 00 00       	call   c010c2d6 <strchr>
c0100c5f:	83 c4 10             	add    $0x10,%esp
c0100c62:	85 c0                	test   %eax,%eax
c0100c64:	75 cc                	jne    c0100c32 <parse+0xf>
            *buf ++ = '\0';
        }
        if (*buf == '\0') {
c0100c66:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c69:	0f b6 00             	movzbl (%eax),%eax
c0100c6c:	84 c0                	test   %al,%al
c0100c6e:	74 69                	je     c0100cd9 <parse+0xb6>
            break;
        }

        // save and scan past next arg
        if (argc == MAXARGS - 1) {
c0100c70:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
c0100c74:	75 12                	jne    c0100c88 <parse+0x65>
            cprintf("Too many arguments (max %d).\n", MAXARGS);
c0100c76:	83 ec 08             	sub    $0x8,%esp
c0100c79:	6a 10                	push   $0x10
c0100c7b:	68 d5 cf 10 c0       	push   $0xc010cfd5
c0100c80:	e8 12 f6 ff ff       	call   c0100297 <cprintf>
c0100c85:	83 c4 10             	add    $0x10,%esp
        }
        argv[argc ++] = buf;
c0100c88:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100c8b:	8d 50 01             	lea    0x1(%eax),%edx
c0100c8e:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0100c91:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0100c98:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100c9b:	01 c2                	add    %eax,%edx
c0100c9d:	8b 45 08             	mov    0x8(%ebp),%eax
c0100ca0:	89 02                	mov    %eax,(%edx)
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c0100ca2:	eb 04                	jmp    c0100ca8 <parse+0x85>
            buf ++;
c0100ca4:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        // save and scan past next arg
        if (argc == MAXARGS - 1) {
            cprintf("Too many arguments (max %d).\n", MAXARGS);
        }
        argv[argc ++] = buf;
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c0100ca8:	8b 45 08             	mov    0x8(%ebp),%eax
c0100cab:	0f b6 00             	movzbl (%eax),%eax
c0100cae:	84 c0                	test   %al,%al
c0100cb0:	0f 84 7a ff ff ff    	je     c0100c30 <parse+0xd>
c0100cb6:	8b 45 08             	mov    0x8(%ebp),%eax
c0100cb9:	0f b6 00             	movzbl (%eax),%eax
c0100cbc:	0f be c0             	movsbl %al,%eax
c0100cbf:	83 ec 08             	sub    $0x8,%esp
c0100cc2:	50                   	push   %eax
c0100cc3:	68 d0 cf 10 c0       	push   $0xc010cfd0
c0100cc8:	e8 09 b6 00 00       	call   c010c2d6 <strchr>
c0100ccd:	83 c4 10             	add    $0x10,%esp
c0100cd0:	85 c0                	test   %eax,%eax
c0100cd2:	74 d0                	je     c0100ca4 <parse+0x81>
            buf ++;
        }
    }
c0100cd4:	e9 57 ff ff ff       	jmp    c0100c30 <parse+0xd>
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
            *buf ++ = '\0';
        }
        if (*buf == '\0') {
            break;
c0100cd9:	90                   	nop
        argv[argc ++] = buf;
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
            buf ++;
        }
    }
    return argc;
c0100cda:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100cdd:	c9                   	leave  
c0100cde:	c3                   	ret    

c0100cdf <runcmd>:
/* *
 * runcmd - parse the input string, split it into separated arguments
 * and then lookup and invoke some related commands/
 * */
static int
runcmd(char *buf, struct trapframe *tf) {
c0100cdf:	55                   	push   %ebp
c0100ce0:	89 e5                	mov    %esp,%ebp
c0100ce2:	83 ec 58             	sub    $0x58,%esp
    char *argv[MAXARGS];
    int argc = parse(buf, argv);
c0100ce5:	83 ec 08             	sub    $0x8,%esp
c0100ce8:	8d 45 b0             	lea    -0x50(%ebp),%eax
c0100ceb:	50                   	push   %eax
c0100cec:	ff 75 08             	pushl  0x8(%ebp)
c0100cef:	e8 2f ff ff ff       	call   c0100c23 <parse>
c0100cf4:	83 c4 10             	add    $0x10,%esp
c0100cf7:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (argc == 0) {
c0100cfa:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0100cfe:	75 0a                	jne    c0100d0a <runcmd+0x2b>
        return 0;
c0100d00:	b8 00 00 00 00       	mov    $0x0,%eax
c0100d05:	e9 83 00 00 00       	jmp    c0100d8d <runcmd+0xae>
    }
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100d0a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100d11:	eb 59                	jmp    c0100d6c <runcmd+0x8d>
        if (strcmp(commands[i].name, argv[0]) == 0) {
c0100d13:	8b 4d b0             	mov    -0x50(%ebp),%ecx
c0100d16:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100d19:	89 d0                	mov    %edx,%eax
c0100d1b:	01 c0                	add    %eax,%eax
c0100d1d:	01 d0                	add    %edx,%eax
c0100d1f:	c1 e0 02             	shl    $0x2,%eax
c0100d22:	05 00 10 13 c0       	add    $0xc0131000,%eax
c0100d27:	8b 00                	mov    (%eax),%eax
c0100d29:	83 ec 08             	sub    $0x8,%esp
c0100d2c:	51                   	push   %ecx
c0100d2d:	50                   	push   %eax
c0100d2e:	e8 03 b5 00 00       	call   c010c236 <strcmp>
c0100d33:	83 c4 10             	add    $0x10,%esp
c0100d36:	85 c0                	test   %eax,%eax
c0100d38:	75 2e                	jne    c0100d68 <runcmd+0x89>
            return commands[i].func(argc - 1, argv + 1, tf);
c0100d3a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100d3d:	89 d0                	mov    %edx,%eax
c0100d3f:	01 c0                	add    %eax,%eax
c0100d41:	01 d0                	add    %edx,%eax
c0100d43:	c1 e0 02             	shl    $0x2,%eax
c0100d46:	05 08 10 13 c0       	add    $0xc0131008,%eax
c0100d4b:	8b 10                	mov    (%eax),%edx
c0100d4d:	8d 45 b0             	lea    -0x50(%ebp),%eax
c0100d50:	83 c0 04             	add    $0x4,%eax
c0100d53:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c0100d56:	83 e9 01             	sub    $0x1,%ecx
c0100d59:	83 ec 04             	sub    $0x4,%esp
c0100d5c:	ff 75 0c             	pushl  0xc(%ebp)
c0100d5f:	50                   	push   %eax
c0100d60:	51                   	push   %ecx
c0100d61:	ff d2                	call   *%edx
c0100d63:	83 c4 10             	add    $0x10,%esp
c0100d66:	eb 25                	jmp    c0100d8d <runcmd+0xae>
    int argc = parse(buf, argv);
    if (argc == 0) {
        return 0;
    }
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100d68:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100d6c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100d6f:	83 f8 02             	cmp    $0x2,%eax
c0100d72:	76 9f                	jbe    c0100d13 <runcmd+0x34>
        if (strcmp(commands[i].name, argv[0]) == 0) {
            return commands[i].func(argc - 1, argv + 1, tf);
        }
    }
    cprintf("Unknown command '%s'\n", argv[0]);
c0100d74:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0100d77:	83 ec 08             	sub    $0x8,%esp
c0100d7a:	50                   	push   %eax
c0100d7b:	68 f3 cf 10 c0       	push   $0xc010cff3
c0100d80:	e8 12 f5 ff ff       	call   c0100297 <cprintf>
c0100d85:	83 c4 10             	add    $0x10,%esp
    return 0;
c0100d88:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100d8d:	c9                   	leave  
c0100d8e:	c3                   	ret    

c0100d8f <kmonitor>:

/***** Implementations of basic kernel monitor commands *****/

void
kmonitor(struct trapframe *tf) {
c0100d8f:	55                   	push   %ebp
c0100d90:	89 e5                	mov    %esp,%ebp
c0100d92:	83 ec 18             	sub    $0x18,%esp
    cprintf("Welcome to the kernel debug monitor!!\n");
c0100d95:	83 ec 0c             	sub    $0xc,%esp
c0100d98:	68 0c d0 10 c0       	push   $0xc010d00c
c0100d9d:	e8 f5 f4 ff ff       	call   c0100297 <cprintf>
c0100da2:	83 c4 10             	add    $0x10,%esp
    cprintf("Type 'help' for a list of commands.\n");
c0100da5:	83 ec 0c             	sub    $0xc,%esp
c0100da8:	68 34 d0 10 c0       	push   $0xc010d034
c0100dad:	e8 e5 f4 ff ff       	call   c0100297 <cprintf>
c0100db2:	83 c4 10             	add    $0x10,%esp

    if (tf != NULL) {
c0100db5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0100db9:	74 0e                	je     c0100dc9 <kmonitor+0x3a>
        print_trapframe(tf);
c0100dbb:	83 ec 0c             	sub    $0xc,%esp
c0100dbe:	ff 75 08             	pushl  0x8(%ebp)
c0100dc1:	e8 6d 16 00 00       	call   c0102433 <print_trapframe>
c0100dc6:	83 c4 10             	add    $0x10,%esp
    }

    char *buf;
    while (1) {
        if ((buf = readline("K> ")) != NULL) {
c0100dc9:	83 ec 0c             	sub    $0xc,%esp
c0100dcc:	68 59 d0 10 c0       	push   $0xc010d059
c0100dd1:	e8 65 f5 ff ff       	call   c010033b <readline>
c0100dd6:	83 c4 10             	add    $0x10,%esp
c0100dd9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100ddc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100de0:	74 e7                	je     c0100dc9 <kmonitor+0x3a>
            if (runcmd(buf, tf) < 0) {
c0100de2:	83 ec 08             	sub    $0x8,%esp
c0100de5:	ff 75 08             	pushl  0x8(%ebp)
c0100de8:	ff 75 f4             	pushl  -0xc(%ebp)
c0100deb:	e8 ef fe ff ff       	call   c0100cdf <runcmd>
c0100df0:	83 c4 10             	add    $0x10,%esp
c0100df3:	85 c0                	test   %eax,%eax
c0100df5:	78 02                	js     c0100df9 <kmonitor+0x6a>
                break;
            }
        }
    }
c0100df7:	eb d0                	jmp    c0100dc9 <kmonitor+0x3a>

    char *buf;
    while (1) {
        if ((buf = readline("K> ")) != NULL) {
            if (runcmd(buf, tf) < 0) {
                break;
c0100df9:	90                   	nop
            }
        }
    }
}
c0100dfa:	90                   	nop
c0100dfb:	c9                   	leave  
c0100dfc:	c3                   	ret    

c0100dfd <mon_help>:

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
c0100dfd:	55                   	push   %ebp
c0100dfe:	89 e5                	mov    %esp,%ebp
c0100e00:	83 ec 18             	sub    $0x18,%esp
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100e03:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100e0a:	eb 3c                	jmp    c0100e48 <mon_help+0x4b>
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
c0100e0c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100e0f:	89 d0                	mov    %edx,%eax
c0100e11:	01 c0                	add    %eax,%eax
c0100e13:	01 d0                	add    %edx,%eax
c0100e15:	c1 e0 02             	shl    $0x2,%eax
c0100e18:	05 04 10 13 c0       	add    $0xc0131004,%eax
c0100e1d:	8b 08                	mov    (%eax),%ecx
c0100e1f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100e22:	89 d0                	mov    %edx,%eax
c0100e24:	01 c0                	add    %eax,%eax
c0100e26:	01 d0                	add    %edx,%eax
c0100e28:	c1 e0 02             	shl    $0x2,%eax
c0100e2b:	05 00 10 13 c0       	add    $0xc0131000,%eax
c0100e30:	8b 00                	mov    (%eax),%eax
c0100e32:	83 ec 04             	sub    $0x4,%esp
c0100e35:	51                   	push   %ecx
c0100e36:	50                   	push   %eax
c0100e37:	68 5d d0 10 c0       	push   $0xc010d05d
c0100e3c:	e8 56 f4 ff ff       	call   c0100297 <cprintf>
c0100e41:	83 c4 10             	add    $0x10,%esp

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100e44:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100e48:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100e4b:	83 f8 02             	cmp    $0x2,%eax
c0100e4e:	76 bc                	jbe    c0100e0c <mon_help+0xf>
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
    }
    return 0;
c0100e50:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100e55:	c9                   	leave  
c0100e56:	c3                   	ret    

c0100e57 <mon_kerninfo>:
/* *
 * mon_kerninfo - call print_kerninfo in kern/debug/kdebug.c to
 * print the memory occupancy in kernel.
 * */
int
mon_kerninfo(int argc, char **argv, struct trapframe *tf) {
c0100e57:	55                   	push   %ebp
c0100e58:	89 e5                	mov    %esp,%ebp
c0100e5a:	83 ec 08             	sub    $0x8,%esp
    print_kerninfo();
c0100e5d:	e8 ab fb ff ff       	call   c0100a0d <print_kerninfo>
    return 0;
c0100e62:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100e67:	c9                   	leave  
c0100e68:	c3                   	ret    

c0100e69 <mon_backtrace>:
/* *
 * mon_backtrace - call print_stackframe in kern/debug/kdebug.c to
 * print a backtrace of the stack.
 * */
int
mon_backtrace(int argc, char **argv, struct trapframe *tf) {
c0100e69:	55                   	push   %ebp
c0100e6a:	89 e5                	mov    %esp,%ebp
c0100e6c:	83 ec 08             	sub    $0x8,%esp
    print_stackframe();
c0100e6f:	e8 e3 fc ff ff       	call   c0100b57 <print_stackframe>
    return 0;
c0100e74:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100e79:	c9                   	leave  
c0100e7a:	c3                   	ret    

c0100e7b <ide_wait_ready>:
    unsigned int size;          // Size in Sectors
    unsigned char model[41];    // Model in String
} ide_devices[MAX_IDE];

static int
ide_wait_ready(unsigned short iobase, bool check_error) {
c0100e7b:	55                   	push   %ebp
c0100e7c:	89 e5                	mov    %esp,%ebp
c0100e7e:	83 ec 14             	sub    $0x14,%esp
c0100e81:	8b 45 08             	mov    0x8(%ebp),%eax
c0100e84:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    int r;
    while ((r = inb(iobase + ISA_STATUS)) & IDE_BSY)
c0100e88:	90                   	nop
c0100e89:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0100e8d:	83 c0 07             	add    $0x7,%eax
c0100e90:	0f b7 c0             	movzwl %ax,%eax
c0100e93:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0100e97:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0100e9b:	89 c2                	mov    %eax,%edx
c0100e9d:	ec                   	in     (%dx),%al
c0100e9e:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c0100ea1:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c0100ea5:	0f b6 c0             	movzbl %al,%eax
c0100ea8:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0100eab:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100eae:	25 80 00 00 00       	and    $0x80,%eax
c0100eb3:	85 c0                	test   %eax,%eax
c0100eb5:	75 d2                	jne    c0100e89 <ide_wait_ready+0xe>
        /* nothing */;
    if (check_error && (r & (IDE_DF | IDE_ERR)) != 0) {
c0100eb7:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0100ebb:	74 11                	je     c0100ece <ide_wait_ready+0x53>
c0100ebd:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100ec0:	83 e0 21             	and    $0x21,%eax
c0100ec3:	85 c0                	test   %eax,%eax
c0100ec5:	74 07                	je     c0100ece <ide_wait_ready+0x53>
        return -1;
c0100ec7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100ecc:	eb 05                	jmp    c0100ed3 <ide_wait_ready+0x58>
    }
    return 0;
c0100ece:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100ed3:	c9                   	leave  
c0100ed4:	c3                   	ret    

c0100ed5 <ide_init>:

void
ide_init(void) {
c0100ed5:	55                   	push   %ebp
c0100ed6:	89 e5                	mov    %esp,%ebp
c0100ed8:	57                   	push   %edi
c0100ed9:	53                   	push   %ebx
c0100eda:	81 ec 40 02 00 00    	sub    $0x240,%esp
    static_assert((SECTSIZE % 4) == 0);
    unsigned short ideno, iobase;
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c0100ee0:	66 c7 45 f6 00 00    	movw   $0x0,-0xa(%ebp)
c0100ee6:	e9 c1 02 00 00       	jmp    c01011ac <ide_init+0x2d7>
        /* assume that no device here */
        ide_devices[ideno].valid = 0;
c0100eeb:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100eef:	c1 e0 03             	shl    $0x3,%eax
c0100ef2:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0100ef9:	29 c2                	sub    %eax,%edx
c0100efb:	89 d0                	mov    %edx,%eax
c0100efd:	05 40 44 1c c0       	add    $0xc01c4440,%eax
c0100f02:	c6 00 00             	movb   $0x0,(%eax)

        iobase = IO_BASE(ideno);
c0100f05:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100f09:	66 d1 e8             	shr    %ax
c0100f0c:	0f b7 c0             	movzwl %ax,%eax
c0100f0f:	0f b7 04 85 68 d0 10 	movzwl -0x3fef2f98(,%eax,4),%eax
c0100f16:	c0 
c0100f17:	66 89 45 ea          	mov    %ax,-0x16(%ebp)

        /* wait device ready */
        ide_wait_ready(iobase, 0);
c0100f1b:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0100f1f:	6a 00                	push   $0x0
c0100f21:	50                   	push   %eax
c0100f22:	e8 54 ff ff ff       	call   c0100e7b <ide_wait_ready>
c0100f27:	83 c4 08             	add    $0x8,%esp

        /* step1: select drive */
        outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4));
c0100f2a:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100f2e:	83 e0 01             	and    $0x1,%eax
c0100f31:	c1 e0 04             	shl    $0x4,%eax
c0100f34:	83 c8 e0             	or     $0xffffffe0,%eax
c0100f37:	0f b6 c0             	movzbl %al,%eax
c0100f3a:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0100f3e:	83 c2 06             	add    $0x6,%edx
c0100f41:	0f b7 d2             	movzwl %dx,%edx
c0100f44:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c0100f48:	88 45 c7             	mov    %al,-0x39(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0100f4b:	0f b6 45 c7          	movzbl -0x39(%ebp),%eax
c0100f4f:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0100f53:	ee                   	out    %al,(%dx)
        ide_wait_ready(iobase, 0);
c0100f54:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0100f58:	6a 00                	push   $0x0
c0100f5a:	50                   	push   %eax
c0100f5b:	e8 1b ff ff ff       	call   c0100e7b <ide_wait_ready>
c0100f60:	83 c4 08             	add    $0x8,%esp

        /* step2: send ATA identify command */
        outb(iobase + ISA_COMMAND, IDE_CMD_IDENTIFY);
c0100f63:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0100f67:	83 c0 07             	add    $0x7,%eax
c0100f6a:	0f b7 c0             	movzwl %ax,%eax
c0100f6d:	66 89 45 e0          	mov    %ax,-0x20(%ebp)
c0100f71:	c6 45 c8 ec          	movb   $0xec,-0x38(%ebp)
c0100f75:	0f b6 45 c8          	movzbl -0x38(%ebp),%eax
c0100f79:	0f b7 55 e0          	movzwl -0x20(%ebp),%edx
c0100f7d:	ee                   	out    %al,(%dx)
        ide_wait_ready(iobase, 0);
c0100f7e:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0100f82:	6a 00                	push   $0x0
c0100f84:	50                   	push   %eax
c0100f85:	e8 f1 fe ff ff       	call   c0100e7b <ide_wait_ready>
c0100f8a:	83 c4 08             	add    $0x8,%esp

        /* step3: polling */
        if (inb(iobase + ISA_STATUS) == 0 || ide_wait_ready(iobase, 1) != 0) {
c0100f8d:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0100f91:	83 c0 07             	add    $0x7,%eax
c0100f94:	0f b7 c0             	movzwl %ax,%eax
c0100f97:	66 89 45 ca          	mov    %ax,-0x36(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0100f9b:	0f b7 45 ca          	movzwl -0x36(%ebp),%eax
c0100f9f:	89 c2                	mov    %eax,%edx
c0100fa1:	ec                   	in     (%dx),%al
c0100fa2:	88 45 c9             	mov    %al,-0x37(%ebp)
    return data;
c0100fa5:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
c0100fa9:	84 c0                	test   %al,%al
c0100fab:	0f 84 ef 01 00 00    	je     c01011a0 <ide_init+0x2cb>
c0100fb1:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0100fb5:	6a 01                	push   $0x1
c0100fb7:	50                   	push   %eax
c0100fb8:	e8 be fe ff ff       	call   c0100e7b <ide_wait_ready>
c0100fbd:	83 c4 08             	add    $0x8,%esp
c0100fc0:	85 c0                	test   %eax,%eax
c0100fc2:	0f 85 d8 01 00 00    	jne    c01011a0 <ide_init+0x2cb>
            continue ;
        }

        /* device is ok */
        ide_devices[ideno].valid = 1;
c0100fc8:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100fcc:	c1 e0 03             	shl    $0x3,%eax
c0100fcf:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0100fd6:	29 c2                	sub    %eax,%edx
c0100fd8:	89 d0                	mov    %edx,%eax
c0100fda:	05 40 44 1c c0       	add    $0xc01c4440,%eax
c0100fdf:	c6 00 01             	movb   $0x1,(%eax)

        /* read identification space of the device */
        unsigned int buffer[128];
        insl(iobase + ISA_DATA, buffer, sizeof(buffer) / sizeof(unsigned int));
c0100fe2:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0100fe6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0100fe9:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
c0100fef:	89 45 c0             	mov    %eax,-0x40(%ebp)
c0100ff2:	c7 45 bc 80 00 00 00 	movl   $0x80,-0x44(%ebp)
}

static inline void
insl(uint32_t port, void *addr, int cnt) {
    asm volatile (
c0100ff9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0100ffc:	8b 4d c0             	mov    -0x40(%ebp),%ecx
c0100fff:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0101002:	89 cb                	mov    %ecx,%ebx
c0101004:	89 df                	mov    %ebx,%edi
c0101006:	89 c1                	mov    %eax,%ecx
c0101008:	fc                   	cld    
c0101009:	f2 6d                	repnz insl (%dx),%es:(%edi)
c010100b:	89 c8                	mov    %ecx,%eax
c010100d:	89 fb                	mov    %edi,%ebx
c010100f:	89 5d c0             	mov    %ebx,-0x40(%ebp)
c0101012:	89 45 bc             	mov    %eax,-0x44(%ebp)

        unsigned char *ident = (unsigned char *)buffer;
c0101015:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
c010101b:	89 45 dc             	mov    %eax,-0x24(%ebp)
        unsigned int sectors;
        unsigned int cmdsets = *(unsigned int *)(ident + IDE_IDENT_CMDSETS);
c010101e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101021:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
c0101027:	89 45 d8             	mov    %eax,-0x28(%ebp)
        /* device use 48-bits or 28-bits addressing */
        if (cmdsets & (1 << 26)) {
c010102a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010102d:	25 00 00 00 04       	and    $0x4000000,%eax
c0101032:	85 c0                	test   %eax,%eax
c0101034:	74 0e                	je     c0101044 <ide_init+0x16f>
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA_EXT);
c0101036:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101039:	8b 80 c8 00 00 00    	mov    0xc8(%eax),%eax
c010103f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0101042:	eb 09                	jmp    c010104d <ide_init+0x178>
        }
        else {
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA);
c0101044:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101047:	8b 40 78             	mov    0x78(%eax),%eax
c010104a:	89 45 f0             	mov    %eax,-0x10(%ebp)
        }
        ide_devices[ideno].sets = cmdsets;
c010104d:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101051:	c1 e0 03             	shl    $0x3,%eax
c0101054:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c010105b:	29 c2                	sub    %eax,%edx
c010105d:	89 d0                	mov    %edx,%eax
c010105f:	8d 90 44 44 1c c0    	lea    -0x3fe3bbbc(%eax),%edx
c0101065:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0101068:	89 02                	mov    %eax,(%edx)
        ide_devices[ideno].size = sectors;
c010106a:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010106e:	c1 e0 03             	shl    $0x3,%eax
c0101071:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101078:	29 c2                	sub    %eax,%edx
c010107a:	89 d0                	mov    %edx,%eax
c010107c:	8d 90 48 44 1c c0    	lea    -0x3fe3bbb8(%eax),%edx
c0101082:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0101085:	89 02                	mov    %eax,(%edx)

        /* check if supports LBA */
        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);
c0101087:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010108a:	83 c0 62             	add    $0x62,%eax
c010108d:	0f b7 00             	movzwl (%eax),%eax
c0101090:	0f b7 c0             	movzwl %ax,%eax
c0101093:	25 00 02 00 00       	and    $0x200,%eax
c0101098:	85 c0                	test   %eax,%eax
c010109a:	75 16                	jne    c01010b2 <ide_init+0x1dd>
c010109c:	68 70 d0 10 c0       	push   $0xc010d070
c01010a1:	68 b3 d0 10 c0       	push   $0xc010d0b3
c01010a6:	6a 7d                	push   $0x7d
c01010a8:	68 c8 d0 10 c0       	push   $0xc010d0c8
c01010ad:	e8 4b f3 ff ff       	call   c01003fd <__panic>

        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
c01010b2:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c01010b6:	89 c2                	mov    %eax,%edx
c01010b8:	8d 04 d5 00 00 00 00 	lea    0x0(,%edx,8),%eax
c01010bf:	89 c2                	mov    %eax,%edx
c01010c1:	8d 04 d5 00 00 00 00 	lea    0x0(,%edx,8),%eax
c01010c8:	29 d0                	sub    %edx,%eax
c01010ca:	05 40 44 1c c0       	add    $0xc01c4440,%eax
c01010cf:	83 c0 0c             	add    $0xc,%eax
c01010d2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c01010d5:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01010d8:	83 c0 36             	add    $0x36,%eax
c01010db:	89 45 d0             	mov    %eax,-0x30(%ebp)
        unsigned int i, length = 40;
c01010de:	c7 45 cc 28 00 00 00 	movl   $0x28,-0x34(%ebp)
        for (i = 0; i < length; i += 2) {
c01010e5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01010ec:	eb 34                	jmp    c0101122 <ide_init+0x24d>
            model[i] = data[i + 1], model[i + 1] = data[i];
c01010ee:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01010f1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01010f4:	01 c2                	add    %eax,%edx
c01010f6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01010f9:	8d 48 01             	lea    0x1(%eax),%ecx
c01010fc:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01010ff:	01 c8                	add    %ecx,%eax
c0101101:	0f b6 00             	movzbl (%eax),%eax
c0101104:	88 02                	mov    %al,(%edx)
c0101106:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101109:	8d 50 01             	lea    0x1(%eax),%edx
c010110c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010110f:	01 c2                	add    %eax,%edx
c0101111:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c0101114:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101117:	01 c8                	add    %ecx,%eax
c0101119:	0f b6 00             	movzbl (%eax),%eax
c010111c:	88 02                	mov    %al,(%edx)
        /* check if supports LBA */
        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);

        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
        unsigned int i, length = 40;
        for (i = 0; i < length; i += 2) {
c010111e:	83 45 ec 02          	addl   $0x2,-0x14(%ebp)
c0101122:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101125:	3b 45 cc             	cmp    -0x34(%ebp),%eax
c0101128:	72 c4                	jb     c01010ee <ide_init+0x219>
            model[i] = data[i + 1], model[i + 1] = data[i];
        }
        do {
            model[i] = '\0';
c010112a:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010112d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101130:	01 d0                	add    %edx,%eax
c0101132:	c6 00 00             	movb   $0x0,(%eax)
        } while (i -- > 0 && model[i] == ' ');
c0101135:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101138:	8d 50 ff             	lea    -0x1(%eax),%edx
c010113b:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010113e:	85 c0                	test   %eax,%eax
c0101140:	74 0f                	je     c0101151 <ide_init+0x27c>
c0101142:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0101145:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101148:	01 d0                	add    %edx,%eax
c010114a:	0f b6 00             	movzbl (%eax),%eax
c010114d:	3c 20                	cmp    $0x20,%al
c010114f:	74 d9                	je     c010112a <ide_init+0x255>

        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
c0101151:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101155:	89 c2                	mov    %eax,%edx
c0101157:	8d 04 d5 00 00 00 00 	lea    0x0(,%edx,8),%eax
c010115e:	89 c2                	mov    %eax,%edx
c0101160:	8d 04 d5 00 00 00 00 	lea    0x0(,%edx,8),%eax
c0101167:	29 d0                	sub    %edx,%eax
c0101169:	05 40 44 1c c0       	add    $0xc01c4440,%eax
c010116e:	8d 48 0c             	lea    0xc(%eax),%ecx
c0101171:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101175:	c1 e0 03             	shl    $0x3,%eax
c0101178:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c010117f:	29 c2                	sub    %eax,%edx
c0101181:	89 d0                	mov    %edx,%eax
c0101183:	05 48 44 1c c0       	add    $0xc01c4448,%eax
c0101188:	8b 10                	mov    (%eax),%edx
c010118a:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010118e:	51                   	push   %ecx
c010118f:	52                   	push   %edx
c0101190:	50                   	push   %eax
c0101191:	68 da d0 10 c0       	push   $0xc010d0da
c0101196:	e8 fc f0 ff ff       	call   c0100297 <cprintf>
c010119b:	83 c4 10             	add    $0x10,%esp
c010119e:	eb 01                	jmp    c01011a1 <ide_init+0x2cc>
        outb(iobase + ISA_COMMAND, IDE_CMD_IDENTIFY);
        ide_wait_ready(iobase, 0);

        /* step3: polling */
        if (inb(iobase + ISA_STATUS) == 0 || ide_wait_ready(iobase, 1) != 0) {
            continue ;
c01011a0:	90                   	nop

void
ide_init(void) {
    static_assert((SECTSIZE % 4) == 0);
    unsigned short ideno, iobase;
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c01011a1:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c01011a5:	83 c0 01             	add    $0x1,%eax
c01011a8:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
c01011ac:	66 83 7d f6 03       	cmpw   $0x3,-0xa(%ebp)
c01011b1:	0f 86 34 fd ff ff    	jbe    c0100eeb <ide_init+0x16>

        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
    }

    // enable ide interrupt
    pic_enable(IRQ_IDE1);
c01011b7:	83 ec 0c             	sub    $0xc,%esp
c01011ba:	6a 0e                	push   $0xe
c01011bc:	e8 8a 0e 00 00       	call   c010204b <pic_enable>
c01011c1:	83 c4 10             	add    $0x10,%esp
    pic_enable(IRQ_IDE2);
c01011c4:	83 ec 0c             	sub    $0xc,%esp
c01011c7:	6a 0f                	push   $0xf
c01011c9:	e8 7d 0e 00 00       	call   c010204b <pic_enable>
c01011ce:	83 c4 10             	add    $0x10,%esp
}
c01011d1:	90                   	nop
c01011d2:	8d 65 f8             	lea    -0x8(%ebp),%esp
c01011d5:	5b                   	pop    %ebx
c01011d6:	5f                   	pop    %edi
c01011d7:	5d                   	pop    %ebp
c01011d8:	c3                   	ret    

c01011d9 <ide_device_valid>:

bool
ide_device_valid(unsigned short ideno) {
c01011d9:	55                   	push   %ebp
c01011da:	89 e5                	mov    %esp,%ebp
c01011dc:	83 ec 04             	sub    $0x4,%esp
c01011df:	8b 45 08             	mov    0x8(%ebp),%eax
c01011e2:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    return VALID_IDE(ideno);
c01011e6:	66 83 7d fc 03       	cmpw   $0x3,-0x4(%ebp)
c01011eb:	77 25                	ja     c0101212 <ide_device_valid+0x39>
c01011ed:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c01011f1:	c1 e0 03             	shl    $0x3,%eax
c01011f4:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c01011fb:	29 c2                	sub    %eax,%edx
c01011fd:	89 d0                	mov    %edx,%eax
c01011ff:	05 40 44 1c c0       	add    $0xc01c4440,%eax
c0101204:	0f b6 00             	movzbl (%eax),%eax
c0101207:	84 c0                	test   %al,%al
c0101209:	74 07                	je     c0101212 <ide_device_valid+0x39>
c010120b:	b8 01 00 00 00       	mov    $0x1,%eax
c0101210:	eb 05                	jmp    c0101217 <ide_device_valid+0x3e>
c0101212:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101217:	c9                   	leave  
c0101218:	c3                   	ret    

c0101219 <ide_device_size>:

size_t
ide_device_size(unsigned short ideno) {
c0101219:	55                   	push   %ebp
c010121a:	89 e5                	mov    %esp,%ebp
c010121c:	83 ec 04             	sub    $0x4,%esp
c010121f:	8b 45 08             	mov    0x8(%ebp),%eax
c0101222:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    if (ide_device_valid(ideno)) {
c0101226:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c010122a:	50                   	push   %eax
c010122b:	e8 a9 ff ff ff       	call   c01011d9 <ide_device_valid>
c0101230:	83 c4 04             	add    $0x4,%esp
c0101233:	85 c0                	test   %eax,%eax
c0101235:	74 1b                	je     c0101252 <ide_device_size+0x39>
        return ide_devices[ideno].size;
c0101237:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c010123b:	c1 e0 03             	shl    $0x3,%eax
c010123e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101245:	29 c2                	sub    %eax,%edx
c0101247:	89 d0                	mov    %edx,%eax
c0101249:	05 48 44 1c c0       	add    $0xc01c4448,%eax
c010124e:	8b 00                	mov    (%eax),%eax
c0101250:	eb 05                	jmp    c0101257 <ide_device_size+0x3e>
    }
    return 0;
c0101252:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101257:	c9                   	leave  
c0101258:	c3                   	ret    

c0101259 <ide_read_secs>:

int
ide_read_secs(unsigned short ideno, uint32_t secno, void *dst, size_t nsecs) {
c0101259:	55                   	push   %ebp
c010125a:	89 e5                	mov    %esp,%ebp
c010125c:	57                   	push   %edi
c010125d:	53                   	push   %ebx
c010125e:	83 ec 40             	sub    $0x40,%esp
c0101261:	8b 45 08             	mov    0x8(%ebp),%eax
c0101264:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c0101268:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c010126f:	77 25                	ja     c0101296 <ide_read_secs+0x3d>
c0101271:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
c0101276:	77 1e                	ja     c0101296 <ide_read_secs+0x3d>
c0101278:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c010127c:	c1 e0 03             	shl    $0x3,%eax
c010127f:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101286:	29 c2                	sub    %eax,%edx
c0101288:	89 d0                	mov    %edx,%eax
c010128a:	05 40 44 1c c0       	add    $0xc01c4440,%eax
c010128f:	0f b6 00             	movzbl (%eax),%eax
c0101292:	84 c0                	test   %al,%al
c0101294:	75 19                	jne    c01012af <ide_read_secs+0x56>
c0101296:	68 f8 d0 10 c0       	push   $0xc010d0f8
c010129b:	68 b3 d0 10 c0       	push   $0xc010d0b3
c01012a0:	68 9f 00 00 00       	push   $0x9f
c01012a5:	68 c8 d0 10 c0       	push   $0xc010d0c8
c01012aa:	e8 4e f1 ff ff       	call   c01003fd <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c01012af:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c01012b6:	77 0f                	ja     c01012c7 <ide_read_secs+0x6e>
c01012b8:	8b 55 0c             	mov    0xc(%ebp),%edx
c01012bb:	8b 45 14             	mov    0x14(%ebp),%eax
c01012be:	01 d0                	add    %edx,%eax
c01012c0:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c01012c5:	76 19                	jbe    c01012e0 <ide_read_secs+0x87>
c01012c7:	68 20 d1 10 c0       	push   $0xc010d120
c01012cc:	68 b3 d0 10 c0       	push   $0xc010d0b3
c01012d1:	68 a0 00 00 00       	push   $0xa0
c01012d6:	68 c8 d0 10 c0       	push   $0xc010d0c8
c01012db:	e8 1d f1 ff ff       	call   c01003fd <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c01012e0:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c01012e4:	66 d1 e8             	shr    %ax
c01012e7:	0f b7 c0             	movzwl %ax,%eax
c01012ea:	0f b7 04 85 68 d0 10 	movzwl -0x3fef2f98(,%eax,4),%eax
c01012f1:	c0 
c01012f2:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c01012f6:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c01012fa:	66 d1 e8             	shr    %ax
c01012fd:	0f b7 c0             	movzwl %ax,%eax
c0101300:	0f b7 04 85 6a d0 10 	movzwl -0x3fef2f96(,%eax,4),%eax
c0101307:	c0 
c0101308:	66 89 45 f0          	mov    %ax,-0x10(%ebp)

    ide_wait_ready(iobase, 0);
c010130c:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101310:	83 ec 08             	sub    $0x8,%esp
c0101313:	6a 00                	push   $0x0
c0101315:	50                   	push   %eax
c0101316:	e8 60 fb ff ff       	call   c0100e7b <ide_wait_ready>
c010131b:	83 c4 10             	add    $0x10,%esp

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c010131e:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c0101322:	83 c0 02             	add    $0x2,%eax
c0101325:	0f b7 c0             	movzwl %ax,%eax
c0101328:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
c010132c:	c6 45 d7 00          	movb   $0x0,-0x29(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101330:	0f b6 45 d7          	movzbl -0x29(%ebp),%eax
c0101334:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101338:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECCNT, nsecs);
c0101339:	8b 45 14             	mov    0x14(%ebp),%eax
c010133c:	0f b6 c0             	movzbl %al,%eax
c010133f:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101343:	83 c2 02             	add    $0x2,%edx
c0101346:	0f b7 d2             	movzwl %dx,%edx
c0101349:	66 89 55 e8          	mov    %dx,-0x18(%ebp)
c010134d:	88 45 d8             	mov    %al,-0x28(%ebp)
c0101350:	0f b6 45 d8          	movzbl -0x28(%ebp),%eax
c0101354:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c0101358:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c0101359:	8b 45 0c             	mov    0xc(%ebp),%eax
c010135c:	0f b6 c0             	movzbl %al,%eax
c010135f:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101363:	83 c2 03             	add    $0x3,%edx
c0101366:	0f b7 d2             	movzwl %dx,%edx
c0101369:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c010136d:	88 45 d9             	mov    %al,-0x27(%ebp)
c0101370:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c0101374:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0101378:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c0101379:	8b 45 0c             	mov    0xc(%ebp),%eax
c010137c:	c1 e8 08             	shr    $0x8,%eax
c010137f:	0f b6 c0             	movzbl %al,%eax
c0101382:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101386:	83 c2 04             	add    $0x4,%edx
c0101389:	0f b7 d2             	movzwl %dx,%edx
c010138c:	66 89 55 e4          	mov    %dx,-0x1c(%ebp)
c0101390:	88 45 da             	mov    %al,-0x26(%ebp)
c0101393:	0f b6 45 da          	movzbl -0x26(%ebp),%eax
c0101397:	0f b7 55 e4          	movzwl -0x1c(%ebp),%edx
c010139b:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c010139c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010139f:	c1 e8 10             	shr    $0x10,%eax
c01013a2:	0f b6 c0             	movzbl %al,%eax
c01013a5:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01013a9:	83 c2 05             	add    $0x5,%edx
c01013ac:	0f b7 d2             	movzwl %dx,%edx
c01013af:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c01013b3:	88 45 db             	mov    %al,-0x25(%ebp)
c01013b6:	0f b6 45 db          	movzbl -0x25(%ebp),%eax
c01013ba:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c01013be:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c01013bf:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c01013c3:	83 e0 01             	and    $0x1,%eax
c01013c6:	c1 e0 04             	shl    $0x4,%eax
c01013c9:	89 c2                	mov    %eax,%edx
c01013cb:	8b 45 0c             	mov    0xc(%ebp),%eax
c01013ce:	c1 e8 18             	shr    $0x18,%eax
c01013d1:	83 e0 0f             	and    $0xf,%eax
c01013d4:	09 d0                	or     %edx,%eax
c01013d6:	83 c8 e0             	or     $0xffffffe0,%eax
c01013d9:	0f b6 c0             	movzbl %al,%eax
c01013dc:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01013e0:	83 c2 06             	add    $0x6,%edx
c01013e3:	0f b7 d2             	movzwl %dx,%edx
c01013e6:	66 89 55 e0          	mov    %dx,-0x20(%ebp)
c01013ea:	88 45 dc             	mov    %al,-0x24(%ebp)
c01013ed:	0f b6 45 dc          	movzbl -0x24(%ebp),%eax
c01013f1:	0f b7 55 e0          	movzwl -0x20(%ebp),%edx
c01013f5:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_COMMAND, IDE_CMD_READ);
c01013f6:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01013fa:	83 c0 07             	add    $0x7,%eax
c01013fd:	0f b7 c0             	movzwl %ax,%eax
c0101400:	66 89 45 de          	mov    %ax,-0x22(%ebp)
c0101404:	c6 45 dd 20          	movb   $0x20,-0x23(%ebp)
c0101408:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c010140c:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c0101410:	ee                   	out    %al,(%dx)

    int ret = 0;
c0101411:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c0101418:	eb 56                	jmp    c0101470 <ide_read_secs+0x217>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c010141a:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c010141e:	83 ec 08             	sub    $0x8,%esp
c0101421:	6a 01                	push   $0x1
c0101423:	50                   	push   %eax
c0101424:	e8 52 fa ff ff       	call   c0100e7b <ide_wait_ready>
c0101429:	83 c4 10             	add    $0x10,%esp
c010142c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010142f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0101433:	75 43                	jne    c0101478 <ide_read_secs+0x21f>
            goto out;
        }
        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
c0101435:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101439:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010143c:	8b 45 10             	mov    0x10(%ebp),%eax
c010143f:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0101442:	c7 45 cc 80 00 00 00 	movl   $0x80,-0x34(%ebp)
    return data;
}

static inline void
insl(uint32_t port, void *addr, int cnt) {
    asm volatile (
c0101449:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010144c:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c010144f:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0101452:	89 cb                	mov    %ecx,%ebx
c0101454:	89 df                	mov    %ebx,%edi
c0101456:	89 c1                	mov    %eax,%ecx
c0101458:	fc                   	cld    
c0101459:	f2 6d                	repnz insl (%dx),%es:(%edi)
c010145b:	89 c8                	mov    %ecx,%eax
c010145d:	89 fb                	mov    %edi,%ebx
c010145f:	89 5d d0             	mov    %ebx,-0x30(%ebp)
c0101462:	89 45 cc             	mov    %eax,-0x34(%ebp)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
    outb(iobase + ISA_COMMAND, IDE_CMD_READ);

    int ret = 0;
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c0101465:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0101469:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c0101470:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0101474:	75 a4                	jne    c010141a <ide_read_secs+0x1c1>
c0101476:	eb 01                	jmp    c0101479 <ide_read_secs+0x220>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
            goto out;
c0101478:	90                   	nop
        }
        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
    }

out:
    return ret;
c0101479:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010147c:	8d 65 f8             	lea    -0x8(%ebp),%esp
c010147f:	5b                   	pop    %ebx
c0101480:	5f                   	pop    %edi
c0101481:	5d                   	pop    %ebp
c0101482:	c3                   	ret    

c0101483 <ide_write_secs>:

int
ide_write_secs(unsigned short ideno, uint32_t secno, const void *src, size_t nsecs) {
c0101483:	55                   	push   %ebp
c0101484:	89 e5                	mov    %esp,%ebp
c0101486:	56                   	push   %esi
c0101487:	53                   	push   %ebx
c0101488:	83 ec 40             	sub    $0x40,%esp
c010148b:	8b 45 08             	mov    0x8(%ebp),%eax
c010148e:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c0101492:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c0101499:	77 25                	ja     c01014c0 <ide_write_secs+0x3d>
c010149b:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
c01014a0:	77 1e                	ja     c01014c0 <ide_write_secs+0x3d>
c01014a2:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c01014a6:	c1 e0 03             	shl    $0x3,%eax
c01014a9:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c01014b0:	29 c2                	sub    %eax,%edx
c01014b2:	89 d0                	mov    %edx,%eax
c01014b4:	05 40 44 1c c0       	add    $0xc01c4440,%eax
c01014b9:	0f b6 00             	movzbl (%eax),%eax
c01014bc:	84 c0                	test   %al,%al
c01014be:	75 19                	jne    c01014d9 <ide_write_secs+0x56>
c01014c0:	68 f8 d0 10 c0       	push   $0xc010d0f8
c01014c5:	68 b3 d0 10 c0       	push   $0xc010d0b3
c01014ca:	68 bc 00 00 00       	push   $0xbc
c01014cf:	68 c8 d0 10 c0       	push   $0xc010d0c8
c01014d4:	e8 24 ef ff ff       	call   c01003fd <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c01014d9:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c01014e0:	77 0f                	ja     c01014f1 <ide_write_secs+0x6e>
c01014e2:	8b 55 0c             	mov    0xc(%ebp),%edx
c01014e5:	8b 45 14             	mov    0x14(%ebp),%eax
c01014e8:	01 d0                	add    %edx,%eax
c01014ea:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c01014ef:	76 19                	jbe    c010150a <ide_write_secs+0x87>
c01014f1:	68 20 d1 10 c0       	push   $0xc010d120
c01014f6:	68 b3 d0 10 c0       	push   $0xc010d0b3
c01014fb:	68 bd 00 00 00       	push   $0xbd
c0101500:	68 c8 d0 10 c0       	push   $0xc010d0c8
c0101505:	e8 f3 ee ff ff       	call   c01003fd <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c010150a:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c010150e:	66 d1 e8             	shr    %ax
c0101511:	0f b7 c0             	movzwl %ax,%eax
c0101514:	0f b7 04 85 68 d0 10 	movzwl -0x3fef2f98(,%eax,4),%eax
c010151b:	c0 
c010151c:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0101520:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101524:	66 d1 e8             	shr    %ax
c0101527:	0f b7 c0             	movzwl %ax,%eax
c010152a:	0f b7 04 85 6a d0 10 	movzwl -0x3fef2f96(,%eax,4),%eax
c0101531:	c0 
c0101532:	66 89 45 f0          	mov    %ax,-0x10(%ebp)

    ide_wait_ready(iobase, 0);
c0101536:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c010153a:	83 ec 08             	sub    $0x8,%esp
c010153d:	6a 00                	push   $0x0
c010153f:	50                   	push   %eax
c0101540:	e8 36 f9 ff ff       	call   c0100e7b <ide_wait_ready>
c0101545:	83 c4 10             	add    $0x10,%esp

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c0101548:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c010154c:	83 c0 02             	add    $0x2,%eax
c010154f:	0f b7 c0             	movzwl %ax,%eax
c0101552:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
c0101556:	c6 45 d7 00          	movb   $0x0,-0x29(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010155a:	0f b6 45 d7          	movzbl -0x29(%ebp),%eax
c010155e:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101562:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECCNT, nsecs);
c0101563:	8b 45 14             	mov    0x14(%ebp),%eax
c0101566:	0f b6 c0             	movzbl %al,%eax
c0101569:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010156d:	83 c2 02             	add    $0x2,%edx
c0101570:	0f b7 d2             	movzwl %dx,%edx
c0101573:	66 89 55 e8          	mov    %dx,-0x18(%ebp)
c0101577:	88 45 d8             	mov    %al,-0x28(%ebp)
c010157a:	0f b6 45 d8          	movzbl -0x28(%ebp),%eax
c010157e:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c0101582:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c0101583:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101586:	0f b6 c0             	movzbl %al,%eax
c0101589:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010158d:	83 c2 03             	add    $0x3,%edx
c0101590:	0f b7 d2             	movzwl %dx,%edx
c0101593:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c0101597:	88 45 d9             	mov    %al,-0x27(%ebp)
c010159a:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c010159e:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c01015a2:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c01015a3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01015a6:	c1 e8 08             	shr    $0x8,%eax
c01015a9:	0f b6 c0             	movzbl %al,%eax
c01015ac:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01015b0:	83 c2 04             	add    $0x4,%edx
c01015b3:	0f b7 d2             	movzwl %dx,%edx
c01015b6:	66 89 55 e4          	mov    %dx,-0x1c(%ebp)
c01015ba:	88 45 da             	mov    %al,-0x26(%ebp)
c01015bd:	0f b6 45 da          	movzbl -0x26(%ebp),%eax
c01015c1:	0f b7 55 e4          	movzwl -0x1c(%ebp),%edx
c01015c5:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c01015c6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01015c9:	c1 e8 10             	shr    $0x10,%eax
c01015cc:	0f b6 c0             	movzbl %al,%eax
c01015cf:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01015d3:	83 c2 05             	add    $0x5,%edx
c01015d6:	0f b7 d2             	movzwl %dx,%edx
c01015d9:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c01015dd:	88 45 db             	mov    %al,-0x25(%ebp)
c01015e0:	0f b6 45 db          	movzbl -0x25(%ebp),%eax
c01015e4:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c01015e8:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c01015e9:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c01015ed:	83 e0 01             	and    $0x1,%eax
c01015f0:	c1 e0 04             	shl    $0x4,%eax
c01015f3:	89 c2                	mov    %eax,%edx
c01015f5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01015f8:	c1 e8 18             	shr    $0x18,%eax
c01015fb:	83 e0 0f             	and    $0xf,%eax
c01015fe:	09 d0                	or     %edx,%eax
c0101600:	83 c8 e0             	or     $0xffffffe0,%eax
c0101603:	0f b6 c0             	movzbl %al,%eax
c0101606:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010160a:	83 c2 06             	add    $0x6,%edx
c010160d:	0f b7 d2             	movzwl %dx,%edx
c0101610:	66 89 55 e0          	mov    %dx,-0x20(%ebp)
c0101614:	88 45 dc             	mov    %al,-0x24(%ebp)
c0101617:	0f b6 45 dc          	movzbl -0x24(%ebp),%eax
c010161b:	0f b7 55 e0          	movzwl -0x20(%ebp),%edx
c010161f:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);
c0101620:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101624:	83 c0 07             	add    $0x7,%eax
c0101627:	0f b7 c0             	movzwl %ax,%eax
c010162a:	66 89 45 de          	mov    %ax,-0x22(%ebp)
c010162e:	c6 45 dd 30          	movb   $0x30,-0x23(%ebp)
c0101632:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0101636:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c010163a:	ee                   	out    %al,(%dx)

    int ret = 0;
c010163b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c0101642:	eb 56                	jmp    c010169a <ide_write_secs+0x217>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c0101644:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101648:	83 ec 08             	sub    $0x8,%esp
c010164b:	6a 01                	push   $0x1
c010164d:	50                   	push   %eax
c010164e:	e8 28 f8 ff ff       	call   c0100e7b <ide_wait_ready>
c0101653:	83 c4 10             	add    $0x10,%esp
c0101656:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0101659:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010165d:	75 43                	jne    c01016a2 <ide_write_secs+0x21f>
            goto out;
        }
        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
c010165f:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101663:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0101666:	8b 45 10             	mov    0x10(%ebp),%eax
c0101669:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010166c:	c7 45 cc 80 00 00 00 	movl   $0x80,-0x34(%ebp)
    asm volatile ("outw %0, %1" :: "a" (data), "d" (port) : "memory");
}

static inline void
outsl(uint32_t port, const void *addr, int cnt) {
    asm volatile (
c0101673:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0101676:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c0101679:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010167c:	89 cb                	mov    %ecx,%ebx
c010167e:	89 de                	mov    %ebx,%esi
c0101680:	89 c1                	mov    %eax,%ecx
c0101682:	fc                   	cld    
c0101683:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
c0101685:	89 c8                	mov    %ecx,%eax
c0101687:	89 f3                	mov    %esi,%ebx
c0101689:	89 5d d0             	mov    %ebx,-0x30(%ebp)
c010168c:	89 45 cc             	mov    %eax,-0x34(%ebp)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);

    int ret = 0;
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c010168f:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0101693:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c010169a:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010169e:	75 a4                	jne    c0101644 <ide_write_secs+0x1c1>
c01016a0:	eb 01                	jmp    c01016a3 <ide_write_secs+0x220>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
            goto out;
c01016a2:	90                   	nop
        }
        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
    }

out:
    return ret;
c01016a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01016a6:	8d 65 f8             	lea    -0x8(%ebp),%esp
c01016a9:	5b                   	pop    %ebx
c01016aa:	5e                   	pop    %esi
c01016ab:	5d                   	pop    %ebp
c01016ac:	c3                   	ret    

c01016ad <clock_init>:
/* *
 * clock_init - initialize 8253 clock to interrupt 100 times per second,
 * and then enable IRQ_TIMER.
 * */
void
clock_init(void) {
c01016ad:	55                   	push   %ebp
c01016ae:	89 e5                	mov    %esp,%ebp
c01016b0:	83 ec 18             	sub    $0x18,%esp
c01016b3:	66 c7 45 f6 43 00    	movw   $0x43,-0xa(%ebp)
c01016b9:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01016bd:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
c01016c1:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c01016c5:	ee                   	out    %al,(%dx)
c01016c6:	66 c7 45 f4 40 00    	movw   $0x40,-0xc(%ebp)
c01016cc:	c6 45 f0 9c          	movb   $0x9c,-0x10(%ebp)
c01016d0:	0f b6 45 f0          	movzbl -0x10(%ebp),%eax
c01016d4:	0f b7 55 f4          	movzwl -0xc(%ebp),%edx
c01016d8:	ee                   	out    %al,(%dx)
c01016d9:	66 c7 45 f2 40 00    	movw   $0x40,-0xe(%ebp)
c01016df:	c6 45 f1 2e          	movb   $0x2e,-0xf(%ebp)
c01016e3:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c01016e7:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01016eb:	ee                   	out    %al,(%dx)
    outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
    outb(IO_TIMER1, TIMER_DIV(100) % 256);
    outb(IO_TIMER1, TIMER_DIV(100) / 256);

    // initialize time counter 'ticks' to zero
    ticks = 0;
c01016ec:	c7 05 b8 70 1c c0 00 	movl   $0x0,0xc01c70b8
c01016f3:	00 00 00 

    cprintf("++ setup timer interrupts\n");
c01016f6:	83 ec 0c             	sub    $0xc,%esp
c01016f9:	68 5a d1 10 c0       	push   $0xc010d15a
c01016fe:	e8 94 eb ff ff       	call   c0100297 <cprintf>
c0101703:	83 c4 10             	add    $0x10,%esp
    pic_enable(IRQ_TIMER);
c0101706:	83 ec 0c             	sub    $0xc,%esp
c0101709:	6a 00                	push   $0x0
c010170b:	e8 3b 09 00 00       	call   c010204b <pic_enable>
c0101710:	83 c4 10             	add    $0x10,%esp
}
c0101713:	90                   	nop
c0101714:	c9                   	leave  
c0101715:	c3                   	ret    

c0101716 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0101716:	55                   	push   %ebp
c0101717:	89 e5                	mov    %esp,%ebp
c0101719:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010171c:	9c                   	pushf  
c010171d:	58                   	pop    %eax
c010171e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0101721:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0101724:	25 00 02 00 00       	and    $0x200,%eax
c0101729:	85 c0                	test   %eax,%eax
c010172b:	74 0c                	je     c0101739 <__intr_save+0x23>
        intr_disable();
c010172d:	e8 8a 0a 00 00       	call   c01021bc <intr_disable>
        return 1;
c0101732:	b8 01 00 00 00       	mov    $0x1,%eax
c0101737:	eb 05                	jmp    c010173e <__intr_save+0x28>
    }
    return 0;
c0101739:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010173e:	c9                   	leave  
c010173f:	c3                   	ret    

c0101740 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0101740:	55                   	push   %ebp
c0101741:	89 e5                	mov    %esp,%ebp
c0101743:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0101746:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010174a:	74 05                	je     c0101751 <__intr_restore+0x11>
        intr_enable();
c010174c:	e8 64 0a 00 00       	call   c01021b5 <intr_enable>
    }
}
c0101751:	90                   	nop
c0101752:	c9                   	leave  
c0101753:	c3                   	ret    

c0101754 <delay>:
#include <memlayout.h>
#include <sync.h>

/* stupid I/O delay routine necessitated by historical PC design flaws */
static void
delay(void) {
c0101754:	55                   	push   %ebp
c0101755:	89 e5                	mov    %esp,%ebp
c0101757:	83 ec 10             	sub    $0x10,%esp
c010175a:	66 c7 45 fe 84 00    	movw   $0x84,-0x2(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101760:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c0101764:	89 c2                	mov    %eax,%edx
c0101766:	ec                   	in     (%dx),%al
c0101767:	88 45 f4             	mov    %al,-0xc(%ebp)
c010176a:	66 c7 45 fc 84 00    	movw   $0x84,-0x4(%ebp)
c0101770:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101774:	89 c2                	mov    %eax,%edx
c0101776:	ec                   	in     (%dx),%al
c0101777:	88 45 f5             	mov    %al,-0xb(%ebp)
c010177a:	66 c7 45 fa 84 00    	movw   $0x84,-0x6(%ebp)
c0101780:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0101784:	89 c2                	mov    %eax,%edx
c0101786:	ec                   	in     (%dx),%al
c0101787:	88 45 f6             	mov    %al,-0xa(%ebp)
c010178a:	66 c7 45 f8 84 00    	movw   $0x84,-0x8(%ebp)
c0101790:	0f b7 45 f8          	movzwl -0x8(%ebp),%eax
c0101794:	89 c2                	mov    %eax,%edx
c0101796:	ec                   	in     (%dx),%al
c0101797:	88 45 f7             	mov    %al,-0x9(%ebp)
    inb(0x84);
    inb(0x84);
    inb(0x84);
    inb(0x84);
}
c010179a:	90                   	nop
c010179b:	c9                   	leave  
c010179c:	c3                   	ret    

c010179d <cga_init>:
static uint16_t addr_6845;

/* TEXT-mode CGA/VGA display output */

static void
cga_init(void) {
c010179d:	55                   	push   %ebp
c010179e:	89 e5                	mov    %esp,%ebp
c01017a0:	83 ec 20             	sub    $0x20,%esp
    volatile uint16_t *cp = (uint16_t *)(CGA_BUF + KERNBASE);
c01017a3:	c7 45 fc 00 80 0b c0 	movl   $0xc00b8000,-0x4(%ebp)
    uint16_t was = *cp;
c01017aa:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01017ad:	0f b7 00             	movzwl (%eax),%eax
c01017b0:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    *cp = (uint16_t) 0xA55A;
c01017b4:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01017b7:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
    if (*cp != 0xA55A) {
c01017bc:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01017bf:	0f b7 00             	movzwl (%eax),%eax
c01017c2:	66 3d 5a a5          	cmp    $0xa55a,%ax
c01017c6:	74 12                	je     c01017da <cga_init+0x3d>
        cp = (uint16_t*)(MONO_BUF + KERNBASE);
c01017c8:	c7 45 fc 00 00 0b c0 	movl   $0xc00b0000,-0x4(%ebp)
        addr_6845 = MONO_BASE;
c01017cf:	66 c7 05 26 45 1c c0 	movw   $0x3b4,0xc01c4526
c01017d6:	b4 03 
c01017d8:	eb 13                	jmp    c01017ed <cga_init+0x50>
    } else {
        *cp = was;
c01017da:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01017dd:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c01017e1:	66 89 10             	mov    %dx,(%eax)
        addr_6845 = CGA_BASE;
c01017e4:	66 c7 05 26 45 1c c0 	movw   $0x3d4,0xc01c4526
c01017eb:	d4 03 
    }

    // Extract cursor location
    uint32_t pos;
    outb(addr_6845, 14);
c01017ed:	0f b7 05 26 45 1c c0 	movzwl 0xc01c4526,%eax
c01017f4:	0f b7 c0             	movzwl %ax,%eax
c01017f7:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
c01017fb:	c6 45 ea 0e          	movb   $0xe,-0x16(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01017ff:	0f b6 45 ea          	movzbl -0x16(%ebp),%eax
c0101803:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
c0101807:	ee                   	out    %al,(%dx)
    pos = inb(addr_6845 + 1) << 8;
c0101808:	0f b7 05 26 45 1c c0 	movzwl 0xc01c4526,%eax
c010180f:	83 c0 01             	add    $0x1,%eax
c0101812:	0f b7 c0             	movzwl %ax,%eax
c0101815:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101819:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c010181d:	89 c2                	mov    %eax,%edx
c010181f:	ec                   	in     (%dx),%al
c0101820:	88 45 eb             	mov    %al,-0x15(%ebp)
    return data;
c0101823:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
c0101827:	0f b6 c0             	movzbl %al,%eax
c010182a:	c1 e0 08             	shl    $0x8,%eax
c010182d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    outb(addr_6845, 15);
c0101830:	0f b7 05 26 45 1c c0 	movzwl 0xc01c4526,%eax
c0101837:	0f b7 c0             	movzwl %ax,%eax
c010183a:	66 89 45 f0          	mov    %ax,-0x10(%ebp)
c010183e:	c6 45 ec 0f          	movb   $0xf,-0x14(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101842:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
c0101846:	0f b7 55 f0          	movzwl -0x10(%ebp),%edx
c010184a:	ee                   	out    %al,(%dx)
    pos |= inb(addr_6845 + 1);
c010184b:	0f b7 05 26 45 1c c0 	movzwl 0xc01c4526,%eax
c0101852:	83 c0 01             	add    $0x1,%eax
c0101855:	0f b7 c0             	movzwl %ax,%eax
c0101858:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c010185c:	0f b7 45 ee          	movzwl -0x12(%ebp),%eax
c0101860:	89 c2                	mov    %eax,%edx
c0101862:	ec                   	in     (%dx),%al
c0101863:	88 45 ed             	mov    %al,-0x13(%ebp)
    return data;
c0101866:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c010186a:	0f b6 c0             	movzbl %al,%eax
c010186d:	09 45 f4             	or     %eax,-0xc(%ebp)

    crt_buf = (uint16_t*) cp;
c0101870:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0101873:	a3 20 45 1c c0       	mov    %eax,0xc01c4520
    crt_pos = pos;
c0101878:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010187b:	66 a3 24 45 1c c0    	mov    %ax,0xc01c4524
}
c0101881:	90                   	nop
c0101882:	c9                   	leave  
c0101883:	c3                   	ret    

c0101884 <serial_init>:

static bool serial_exists = 0;

static void
serial_init(void) {
c0101884:	55                   	push   %ebp
c0101885:	89 e5                	mov    %esp,%ebp
c0101887:	83 ec 28             	sub    $0x28,%esp
c010188a:	66 c7 45 f6 fa 03    	movw   $0x3fa,-0xa(%ebp)
c0101890:	c6 45 da 00          	movb   $0x0,-0x26(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101894:	0f b6 45 da          	movzbl -0x26(%ebp),%eax
c0101898:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c010189c:	ee                   	out    %al,(%dx)
c010189d:	66 c7 45 f4 fb 03    	movw   $0x3fb,-0xc(%ebp)
c01018a3:	c6 45 db 80          	movb   $0x80,-0x25(%ebp)
c01018a7:	0f b6 45 db          	movzbl -0x25(%ebp),%eax
c01018ab:	0f b7 55 f4          	movzwl -0xc(%ebp),%edx
c01018af:	ee                   	out    %al,(%dx)
c01018b0:	66 c7 45 f2 f8 03    	movw   $0x3f8,-0xe(%ebp)
c01018b6:	c6 45 dc 0c          	movb   $0xc,-0x24(%ebp)
c01018ba:	0f b6 45 dc          	movzbl -0x24(%ebp),%eax
c01018be:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01018c2:	ee                   	out    %al,(%dx)
c01018c3:	66 c7 45 f0 f9 03    	movw   $0x3f9,-0x10(%ebp)
c01018c9:	c6 45 dd 00          	movb   $0x0,-0x23(%ebp)
c01018cd:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c01018d1:	0f b7 55 f0          	movzwl -0x10(%ebp),%edx
c01018d5:	ee                   	out    %al,(%dx)
c01018d6:	66 c7 45 ee fb 03    	movw   $0x3fb,-0x12(%ebp)
c01018dc:	c6 45 de 03          	movb   $0x3,-0x22(%ebp)
c01018e0:	0f b6 45 de          	movzbl -0x22(%ebp),%eax
c01018e4:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c01018e8:	ee                   	out    %al,(%dx)
c01018e9:	66 c7 45 ec fc 03    	movw   $0x3fc,-0x14(%ebp)
c01018ef:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
c01018f3:	0f b6 45 df          	movzbl -0x21(%ebp),%eax
c01018f7:	0f b7 55 ec          	movzwl -0x14(%ebp),%edx
c01018fb:	ee                   	out    %al,(%dx)
c01018fc:	66 c7 45 ea f9 03    	movw   $0x3f9,-0x16(%ebp)
c0101902:	c6 45 e0 01          	movb   $0x1,-0x20(%ebp)
c0101906:	0f b6 45 e0          	movzbl -0x20(%ebp),%eax
c010190a:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c010190e:	ee                   	out    %al,(%dx)
c010190f:	66 c7 45 e8 fd 03    	movw   $0x3fd,-0x18(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101915:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
c0101919:	89 c2                	mov    %eax,%edx
c010191b:	ec                   	in     (%dx),%al
c010191c:	88 45 e1             	mov    %al,-0x1f(%ebp)
    return data;
c010191f:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
    // Enable rcv interrupts
    outb(COM1 + COM_IER, COM_IER_RDI);

    // Clear any preexisting overrun indications and interrupts
    // Serial port doesn't exist if COM_LSR returns 0xFF
    serial_exists = (inb(COM1 + COM_LSR) != 0xFF);
c0101923:	3c ff                	cmp    $0xff,%al
c0101925:	0f 95 c0             	setne  %al
c0101928:	0f b6 c0             	movzbl %al,%eax
c010192b:	a3 28 45 1c c0       	mov    %eax,0xc01c4528
c0101930:	66 c7 45 e6 fa 03    	movw   $0x3fa,-0x1a(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101936:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c010193a:	89 c2                	mov    %eax,%edx
c010193c:	ec                   	in     (%dx),%al
c010193d:	88 45 e2             	mov    %al,-0x1e(%ebp)
c0101940:	66 c7 45 e4 f8 03    	movw   $0x3f8,-0x1c(%ebp)
c0101946:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
c010194a:	89 c2                	mov    %eax,%edx
c010194c:	ec                   	in     (%dx),%al
c010194d:	88 45 e3             	mov    %al,-0x1d(%ebp)
    (void) inb(COM1+COM_IIR);
    (void) inb(COM1+COM_RX);

    if (serial_exists) {
c0101950:	a1 28 45 1c c0       	mov    0xc01c4528,%eax
c0101955:	85 c0                	test   %eax,%eax
c0101957:	74 0d                	je     c0101966 <serial_init+0xe2>
        pic_enable(IRQ_COM1);
c0101959:	83 ec 0c             	sub    $0xc,%esp
c010195c:	6a 04                	push   $0x4
c010195e:	e8 e8 06 00 00       	call   c010204b <pic_enable>
c0101963:	83 c4 10             	add    $0x10,%esp
    }
}
c0101966:	90                   	nop
c0101967:	c9                   	leave  
c0101968:	c3                   	ret    

c0101969 <lpt_putc_sub>:

static void
lpt_putc_sub(int c) {
c0101969:	55                   	push   %ebp
c010196a:	89 e5                	mov    %esp,%ebp
c010196c:	83 ec 10             	sub    $0x10,%esp
    int i;
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c010196f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0101976:	eb 09                	jmp    c0101981 <lpt_putc_sub+0x18>
        delay();
c0101978:	e8 d7 fd ff ff       	call   c0101754 <delay>
}

static void
lpt_putc_sub(int c) {
    int i;
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c010197d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0101981:	66 c7 45 f4 79 03    	movw   $0x379,-0xc(%ebp)
c0101987:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c010198b:	89 c2                	mov    %eax,%edx
c010198d:	ec                   	in     (%dx),%al
c010198e:	88 45 f3             	mov    %al,-0xd(%ebp)
    return data;
c0101991:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101995:	84 c0                	test   %al,%al
c0101997:	78 09                	js     c01019a2 <lpt_putc_sub+0x39>
c0101999:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
c01019a0:	7e d6                	jle    c0101978 <lpt_putc_sub+0xf>
        delay();
    }
    outb(LPTPORT + 0, c);
c01019a2:	8b 45 08             	mov    0x8(%ebp),%eax
c01019a5:	0f b6 c0             	movzbl %al,%eax
c01019a8:	66 c7 45 f8 78 03    	movw   $0x378,-0x8(%ebp)
c01019ae:	88 45 f0             	mov    %al,-0x10(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01019b1:	0f b6 45 f0          	movzbl -0x10(%ebp),%eax
c01019b5:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
c01019b9:	ee                   	out    %al,(%dx)
c01019ba:	66 c7 45 f6 7a 03    	movw   $0x37a,-0xa(%ebp)
c01019c0:	c6 45 f1 0d          	movb   $0xd,-0xf(%ebp)
c01019c4:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c01019c8:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c01019cc:	ee                   	out    %al,(%dx)
c01019cd:	66 c7 45 fa 7a 03    	movw   $0x37a,-0x6(%ebp)
c01019d3:	c6 45 f2 08          	movb   $0x8,-0xe(%ebp)
c01019d7:	0f b6 45 f2          	movzbl -0xe(%ebp),%eax
c01019db:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c01019df:	ee                   	out    %al,(%dx)
    outb(LPTPORT + 2, 0x08 | 0x04 | 0x01);
    outb(LPTPORT + 2, 0x08);
}
c01019e0:	90                   	nop
c01019e1:	c9                   	leave  
c01019e2:	c3                   	ret    

c01019e3 <lpt_putc>:

/* lpt_putc - copy console output to parallel port */
static void
lpt_putc(int c) {
c01019e3:	55                   	push   %ebp
c01019e4:	89 e5                	mov    %esp,%ebp
    if (c != '\b') {
c01019e6:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c01019ea:	74 0d                	je     c01019f9 <lpt_putc+0x16>
        lpt_putc_sub(c);
c01019ec:	ff 75 08             	pushl  0x8(%ebp)
c01019ef:	e8 75 ff ff ff       	call   c0101969 <lpt_putc_sub>
c01019f4:	83 c4 04             	add    $0x4,%esp
    else {
        lpt_putc_sub('\b');
        lpt_putc_sub(' ');
        lpt_putc_sub('\b');
    }
}
c01019f7:	eb 1e                	jmp    c0101a17 <lpt_putc+0x34>
lpt_putc(int c) {
    if (c != '\b') {
        lpt_putc_sub(c);
    }
    else {
        lpt_putc_sub('\b');
c01019f9:	6a 08                	push   $0x8
c01019fb:	e8 69 ff ff ff       	call   c0101969 <lpt_putc_sub>
c0101a00:	83 c4 04             	add    $0x4,%esp
        lpt_putc_sub(' ');
c0101a03:	6a 20                	push   $0x20
c0101a05:	e8 5f ff ff ff       	call   c0101969 <lpt_putc_sub>
c0101a0a:	83 c4 04             	add    $0x4,%esp
        lpt_putc_sub('\b');
c0101a0d:	6a 08                	push   $0x8
c0101a0f:	e8 55 ff ff ff       	call   c0101969 <lpt_putc_sub>
c0101a14:	83 c4 04             	add    $0x4,%esp
    }
}
c0101a17:	90                   	nop
c0101a18:	c9                   	leave  
c0101a19:	c3                   	ret    

c0101a1a <cga_putc>:

/* cga_putc - print character to console */
static void
cga_putc(int c) {
c0101a1a:	55                   	push   %ebp
c0101a1b:	89 e5                	mov    %esp,%ebp
c0101a1d:	53                   	push   %ebx
c0101a1e:	83 ec 14             	sub    $0x14,%esp
    // set black on white
    if (!(c & ~0xFF)) {
c0101a21:	8b 45 08             	mov    0x8(%ebp),%eax
c0101a24:	b0 00                	mov    $0x0,%al
c0101a26:	85 c0                	test   %eax,%eax
c0101a28:	75 07                	jne    c0101a31 <cga_putc+0x17>
        c |= 0x0700;
c0101a2a:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)
    }

    switch (c & 0xff) {
c0101a31:	8b 45 08             	mov    0x8(%ebp),%eax
c0101a34:	0f b6 c0             	movzbl %al,%eax
c0101a37:	83 f8 0a             	cmp    $0xa,%eax
c0101a3a:	74 4e                	je     c0101a8a <cga_putc+0x70>
c0101a3c:	83 f8 0d             	cmp    $0xd,%eax
c0101a3f:	74 59                	je     c0101a9a <cga_putc+0x80>
c0101a41:	83 f8 08             	cmp    $0x8,%eax
c0101a44:	0f 85 8a 00 00 00    	jne    c0101ad4 <cga_putc+0xba>
    case '\b':
        if (crt_pos > 0) {
c0101a4a:	0f b7 05 24 45 1c c0 	movzwl 0xc01c4524,%eax
c0101a51:	66 85 c0             	test   %ax,%ax
c0101a54:	0f 84 a0 00 00 00    	je     c0101afa <cga_putc+0xe0>
            crt_pos --;
c0101a5a:	0f b7 05 24 45 1c c0 	movzwl 0xc01c4524,%eax
c0101a61:	83 e8 01             	sub    $0x1,%eax
c0101a64:	66 a3 24 45 1c c0    	mov    %ax,0xc01c4524
            crt_buf[crt_pos] = (c & ~0xff) | ' ';
c0101a6a:	a1 20 45 1c c0       	mov    0xc01c4520,%eax
c0101a6f:	0f b7 15 24 45 1c c0 	movzwl 0xc01c4524,%edx
c0101a76:	0f b7 d2             	movzwl %dx,%edx
c0101a79:	01 d2                	add    %edx,%edx
c0101a7b:	01 d0                	add    %edx,%eax
c0101a7d:	8b 55 08             	mov    0x8(%ebp),%edx
c0101a80:	b2 00                	mov    $0x0,%dl
c0101a82:	83 ca 20             	or     $0x20,%edx
c0101a85:	66 89 10             	mov    %dx,(%eax)
        }
        break;
c0101a88:	eb 70                	jmp    c0101afa <cga_putc+0xe0>
    case '\n':
        crt_pos += CRT_COLS;
c0101a8a:	0f b7 05 24 45 1c c0 	movzwl 0xc01c4524,%eax
c0101a91:	83 c0 50             	add    $0x50,%eax
c0101a94:	66 a3 24 45 1c c0    	mov    %ax,0xc01c4524
    case '\r':
        crt_pos -= (crt_pos % CRT_COLS);
c0101a9a:	0f b7 1d 24 45 1c c0 	movzwl 0xc01c4524,%ebx
c0101aa1:	0f b7 0d 24 45 1c c0 	movzwl 0xc01c4524,%ecx
c0101aa8:	0f b7 c1             	movzwl %cx,%eax
c0101aab:	69 c0 cd cc 00 00    	imul   $0xcccd,%eax,%eax
c0101ab1:	c1 e8 10             	shr    $0x10,%eax
c0101ab4:	89 c2                	mov    %eax,%edx
c0101ab6:	66 c1 ea 06          	shr    $0x6,%dx
c0101aba:	89 d0                	mov    %edx,%eax
c0101abc:	c1 e0 02             	shl    $0x2,%eax
c0101abf:	01 d0                	add    %edx,%eax
c0101ac1:	c1 e0 04             	shl    $0x4,%eax
c0101ac4:	29 c1                	sub    %eax,%ecx
c0101ac6:	89 ca                	mov    %ecx,%edx
c0101ac8:	89 d8                	mov    %ebx,%eax
c0101aca:	29 d0                	sub    %edx,%eax
c0101acc:	66 a3 24 45 1c c0    	mov    %ax,0xc01c4524
        break;
c0101ad2:	eb 27                	jmp    c0101afb <cga_putc+0xe1>
    default:
        crt_buf[crt_pos ++] = c;     // write the character
c0101ad4:	8b 0d 20 45 1c c0    	mov    0xc01c4520,%ecx
c0101ada:	0f b7 05 24 45 1c c0 	movzwl 0xc01c4524,%eax
c0101ae1:	8d 50 01             	lea    0x1(%eax),%edx
c0101ae4:	66 89 15 24 45 1c c0 	mov    %dx,0xc01c4524
c0101aeb:	0f b7 c0             	movzwl %ax,%eax
c0101aee:	01 c0                	add    %eax,%eax
c0101af0:	01 c8                	add    %ecx,%eax
c0101af2:	8b 55 08             	mov    0x8(%ebp),%edx
c0101af5:	66 89 10             	mov    %dx,(%eax)
        break;
c0101af8:	eb 01                	jmp    c0101afb <cga_putc+0xe1>
    case '\b':
        if (crt_pos > 0) {
            crt_pos --;
            crt_buf[crt_pos] = (c & ~0xff) | ' ';
        }
        break;
c0101afa:	90                   	nop
        crt_buf[crt_pos ++] = c;     // write the character
        break;
    }

    // What is the purpose of this?
    if (crt_pos >= CRT_SIZE) {
c0101afb:	0f b7 05 24 45 1c c0 	movzwl 0xc01c4524,%eax
c0101b02:	66 3d cf 07          	cmp    $0x7cf,%ax
c0101b06:	76 59                	jbe    c0101b61 <cga_putc+0x147>
        int i;
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
c0101b08:	a1 20 45 1c c0       	mov    0xc01c4520,%eax
c0101b0d:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
c0101b13:	a1 20 45 1c c0       	mov    0xc01c4520,%eax
c0101b18:	83 ec 04             	sub    $0x4,%esp
c0101b1b:	68 00 0f 00 00       	push   $0xf00
c0101b20:	52                   	push   %edx
c0101b21:	50                   	push   %eax
c0101b22:	e8 ae a9 00 00       	call   c010c4d5 <memmove>
c0101b27:	83 c4 10             	add    $0x10,%esp
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c0101b2a:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
c0101b31:	eb 15                	jmp    c0101b48 <cga_putc+0x12e>
            crt_buf[i] = 0x0700 | ' ';
c0101b33:	a1 20 45 1c c0       	mov    0xc01c4520,%eax
c0101b38:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0101b3b:	01 d2                	add    %edx,%edx
c0101b3d:	01 d0                	add    %edx,%eax
c0101b3f:	66 c7 00 20 07       	movw   $0x720,(%eax)

    // What is the purpose of this?
    if (crt_pos >= CRT_SIZE) {
        int i;
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c0101b44:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0101b48:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
c0101b4f:	7e e2                	jle    c0101b33 <cga_putc+0x119>
            crt_buf[i] = 0x0700 | ' ';
        }
        crt_pos -= CRT_COLS;
c0101b51:	0f b7 05 24 45 1c c0 	movzwl 0xc01c4524,%eax
c0101b58:	83 e8 50             	sub    $0x50,%eax
c0101b5b:	66 a3 24 45 1c c0    	mov    %ax,0xc01c4524
    }

    // move that little blinky thing
    outb(addr_6845, 14);
c0101b61:	0f b7 05 26 45 1c c0 	movzwl 0xc01c4526,%eax
c0101b68:	0f b7 c0             	movzwl %ax,%eax
c0101b6b:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0101b6f:	c6 45 e8 0e          	movb   $0xe,-0x18(%ebp)
c0101b73:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
c0101b77:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101b7b:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos >> 8);
c0101b7c:	0f b7 05 24 45 1c c0 	movzwl 0xc01c4524,%eax
c0101b83:	66 c1 e8 08          	shr    $0x8,%ax
c0101b87:	0f b6 c0             	movzbl %al,%eax
c0101b8a:	0f b7 15 26 45 1c c0 	movzwl 0xc01c4526,%edx
c0101b91:	83 c2 01             	add    $0x1,%edx
c0101b94:	0f b7 d2             	movzwl %dx,%edx
c0101b97:	66 89 55 f0          	mov    %dx,-0x10(%ebp)
c0101b9b:	88 45 e9             	mov    %al,-0x17(%ebp)
c0101b9e:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101ba2:	0f b7 55 f0          	movzwl -0x10(%ebp),%edx
c0101ba6:	ee                   	out    %al,(%dx)
    outb(addr_6845, 15);
c0101ba7:	0f b7 05 26 45 1c c0 	movzwl 0xc01c4526,%eax
c0101bae:	0f b7 c0             	movzwl %ax,%eax
c0101bb1:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
c0101bb5:	c6 45 ea 0f          	movb   $0xf,-0x16(%ebp)
c0101bb9:	0f b6 45 ea          	movzbl -0x16(%ebp),%eax
c0101bbd:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101bc1:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos);
c0101bc2:	0f b7 05 24 45 1c c0 	movzwl 0xc01c4524,%eax
c0101bc9:	0f b6 c0             	movzbl %al,%eax
c0101bcc:	0f b7 15 26 45 1c c0 	movzwl 0xc01c4526,%edx
c0101bd3:	83 c2 01             	add    $0x1,%edx
c0101bd6:	0f b7 d2             	movzwl %dx,%edx
c0101bd9:	66 89 55 ec          	mov    %dx,-0x14(%ebp)
c0101bdd:	88 45 eb             	mov    %al,-0x15(%ebp)
c0101be0:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
c0101be4:	0f b7 55 ec          	movzwl -0x14(%ebp),%edx
c0101be8:	ee                   	out    %al,(%dx)
}
c0101be9:	90                   	nop
c0101bea:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0101bed:	c9                   	leave  
c0101bee:	c3                   	ret    

c0101bef <serial_putc_sub>:

static void
serial_putc_sub(int c) {
c0101bef:	55                   	push   %ebp
c0101bf0:	89 e5                	mov    %esp,%ebp
c0101bf2:	83 ec 10             	sub    $0x10,%esp
    int i;
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c0101bf5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0101bfc:	eb 09                	jmp    c0101c07 <serial_putc_sub+0x18>
        delay();
c0101bfe:	e8 51 fb ff ff       	call   c0101754 <delay>
}

static void
serial_putc_sub(int c) {
    int i;
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c0101c03:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0101c07:	66 c7 45 f8 fd 03    	movw   $0x3fd,-0x8(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101c0d:	0f b7 45 f8          	movzwl -0x8(%ebp),%eax
c0101c11:	89 c2                	mov    %eax,%edx
c0101c13:	ec                   	in     (%dx),%al
c0101c14:	88 45 f7             	mov    %al,-0x9(%ebp)
    return data;
c0101c17:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0101c1b:	0f b6 c0             	movzbl %al,%eax
c0101c1e:	83 e0 20             	and    $0x20,%eax
c0101c21:	85 c0                	test   %eax,%eax
c0101c23:	75 09                	jne    c0101c2e <serial_putc_sub+0x3f>
c0101c25:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
c0101c2c:	7e d0                	jle    c0101bfe <serial_putc_sub+0xf>
        delay();
    }
    outb(COM1 + COM_TX, c);
c0101c2e:	8b 45 08             	mov    0x8(%ebp),%eax
c0101c31:	0f b6 c0             	movzbl %al,%eax
c0101c34:	66 c7 45 fa f8 03    	movw   $0x3f8,-0x6(%ebp)
c0101c3a:	88 45 f6             	mov    %al,-0xa(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101c3d:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
c0101c41:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c0101c45:	ee                   	out    %al,(%dx)
}
c0101c46:	90                   	nop
c0101c47:	c9                   	leave  
c0101c48:	c3                   	ret    

c0101c49 <serial_putc>:

/* serial_putc - print character to serial port */
static void
serial_putc(int c) {
c0101c49:	55                   	push   %ebp
c0101c4a:	89 e5                	mov    %esp,%ebp
    if (c != '\b') {
c0101c4c:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c0101c50:	74 0d                	je     c0101c5f <serial_putc+0x16>
        serial_putc_sub(c);
c0101c52:	ff 75 08             	pushl  0x8(%ebp)
c0101c55:	e8 95 ff ff ff       	call   c0101bef <serial_putc_sub>
c0101c5a:	83 c4 04             	add    $0x4,%esp
    else {
        serial_putc_sub('\b');
        serial_putc_sub(' ');
        serial_putc_sub('\b');
    }
}
c0101c5d:	eb 1e                	jmp    c0101c7d <serial_putc+0x34>
serial_putc(int c) {
    if (c != '\b') {
        serial_putc_sub(c);
    }
    else {
        serial_putc_sub('\b');
c0101c5f:	6a 08                	push   $0x8
c0101c61:	e8 89 ff ff ff       	call   c0101bef <serial_putc_sub>
c0101c66:	83 c4 04             	add    $0x4,%esp
        serial_putc_sub(' ');
c0101c69:	6a 20                	push   $0x20
c0101c6b:	e8 7f ff ff ff       	call   c0101bef <serial_putc_sub>
c0101c70:	83 c4 04             	add    $0x4,%esp
        serial_putc_sub('\b');
c0101c73:	6a 08                	push   $0x8
c0101c75:	e8 75 ff ff ff       	call   c0101bef <serial_putc_sub>
c0101c7a:	83 c4 04             	add    $0x4,%esp
    }
}
c0101c7d:	90                   	nop
c0101c7e:	c9                   	leave  
c0101c7f:	c3                   	ret    

c0101c80 <cons_intr>:
/* *
 * cons_intr - called by device interrupt routines to feed input
 * characters into the circular console input buffer.
 * */
static void
cons_intr(int (*proc)(void)) {
c0101c80:	55                   	push   %ebp
c0101c81:	89 e5                	mov    %esp,%ebp
c0101c83:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = (*proc)()) != -1) {
c0101c86:	eb 33                	jmp    c0101cbb <cons_intr+0x3b>
        if (c != 0) {
c0101c88:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0101c8c:	74 2d                	je     c0101cbb <cons_intr+0x3b>
            cons.buf[cons.wpos ++] = c;
c0101c8e:	a1 44 47 1c c0       	mov    0xc01c4744,%eax
c0101c93:	8d 50 01             	lea    0x1(%eax),%edx
c0101c96:	89 15 44 47 1c c0    	mov    %edx,0xc01c4744
c0101c9c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0101c9f:	88 90 40 45 1c c0    	mov    %dl,-0x3fe3bac0(%eax)
            if (cons.wpos == CONSBUFSIZE) {
c0101ca5:	a1 44 47 1c c0       	mov    0xc01c4744,%eax
c0101caa:	3d 00 02 00 00       	cmp    $0x200,%eax
c0101caf:	75 0a                	jne    c0101cbb <cons_intr+0x3b>
                cons.wpos = 0;
c0101cb1:	c7 05 44 47 1c c0 00 	movl   $0x0,0xc01c4744
c0101cb8:	00 00 00 
 * characters into the circular console input buffer.
 * */
static void
cons_intr(int (*proc)(void)) {
    int c;
    while ((c = (*proc)()) != -1) {
c0101cbb:	8b 45 08             	mov    0x8(%ebp),%eax
c0101cbe:	ff d0                	call   *%eax
c0101cc0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0101cc3:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
c0101cc7:	75 bf                	jne    c0101c88 <cons_intr+0x8>
            if (cons.wpos == CONSBUFSIZE) {
                cons.wpos = 0;
            }
        }
    }
}
c0101cc9:	90                   	nop
c0101cca:	c9                   	leave  
c0101ccb:	c3                   	ret    

c0101ccc <serial_proc_data>:

/* serial_proc_data - get data from serial port */
static int
serial_proc_data(void) {
c0101ccc:	55                   	push   %ebp
c0101ccd:	89 e5                	mov    %esp,%ebp
c0101ccf:	83 ec 10             	sub    $0x10,%esp
c0101cd2:	66 c7 45 f8 fd 03    	movw   $0x3fd,-0x8(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101cd8:	0f b7 45 f8          	movzwl -0x8(%ebp),%eax
c0101cdc:	89 c2                	mov    %eax,%edx
c0101cde:	ec                   	in     (%dx),%al
c0101cdf:	88 45 f7             	mov    %al,-0x9(%ebp)
    return data;
c0101ce2:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
    if (!(inb(COM1 + COM_LSR) & COM_LSR_DATA)) {
c0101ce6:	0f b6 c0             	movzbl %al,%eax
c0101ce9:	83 e0 01             	and    $0x1,%eax
c0101cec:	85 c0                	test   %eax,%eax
c0101cee:	75 07                	jne    c0101cf7 <serial_proc_data+0x2b>
        return -1;
c0101cf0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101cf5:	eb 2a                	jmp    c0101d21 <serial_proc_data+0x55>
c0101cf7:	66 c7 45 fa f8 03    	movw   $0x3f8,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101cfd:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0101d01:	89 c2                	mov    %eax,%edx
c0101d03:	ec                   	in     (%dx),%al
c0101d04:	88 45 f6             	mov    %al,-0xa(%ebp)
    return data;
c0101d07:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
    }
    int c = inb(COM1 + COM_RX);
c0101d0b:	0f b6 c0             	movzbl %al,%eax
c0101d0e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (c == 127) {
c0101d11:	83 7d fc 7f          	cmpl   $0x7f,-0x4(%ebp)
c0101d15:	75 07                	jne    c0101d1e <serial_proc_data+0x52>
        c = '\b';
c0101d17:	c7 45 fc 08 00 00 00 	movl   $0x8,-0x4(%ebp)
    }
    return c;
c0101d1e:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0101d21:	c9                   	leave  
c0101d22:	c3                   	ret    

c0101d23 <serial_intr>:

/* serial_intr - try to feed input characters from serial port */
void
serial_intr(void) {
c0101d23:	55                   	push   %ebp
c0101d24:	89 e5                	mov    %esp,%ebp
c0101d26:	83 ec 08             	sub    $0x8,%esp
    if (serial_exists) {
c0101d29:	a1 28 45 1c c0       	mov    0xc01c4528,%eax
c0101d2e:	85 c0                	test   %eax,%eax
c0101d30:	74 10                	je     c0101d42 <serial_intr+0x1f>
        cons_intr(serial_proc_data);
c0101d32:	83 ec 0c             	sub    $0xc,%esp
c0101d35:	68 cc 1c 10 c0       	push   $0xc0101ccc
c0101d3a:	e8 41 ff ff ff       	call   c0101c80 <cons_intr>
c0101d3f:	83 c4 10             	add    $0x10,%esp
    }
}
c0101d42:	90                   	nop
c0101d43:	c9                   	leave  
c0101d44:	c3                   	ret    

c0101d45 <kbd_proc_data>:
 *
 * The kbd_proc_data() function gets data from the keyboard.
 * If we finish a character, return it, else 0. And return -1 if no data.
 * */
static int
kbd_proc_data(void) {
c0101d45:	55                   	push   %ebp
c0101d46:	89 e5                	mov    %esp,%ebp
c0101d48:	83 ec 18             	sub    $0x18,%esp
c0101d4b:	66 c7 45 ec 64 00    	movw   $0x64,-0x14(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101d51:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0101d55:	89 c2                	mov    %eax,%edx
c0101d57:	ec                   	in     (%dx),%al
c0101d58:	88 45 eb             	mov    %al,-0x15(%ebp)
    return data;
c0101d5b:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
    int c;
    uint8_t data;
    static uint32_t shift;

    if ((inb(KBSTATP) & KBS_DIB) == 0) {
c0101d5f:	0f b6 c0             	movzbl %al,%eax
c0101d62:	83 e0 01             	and    $0x1,%eax
c0101d65:	85 c0                	test   %eax,%eax
c0101d67:	75 0a                	jne    c0101d73 <kbd_proc_data+0x2e>
        return -1;
c0101d69:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101d6e:	e9 5d 01 00 00       	jmp    c0101ed0 <kbd_proc_data+0x18b>
c0101d73:	66 c7 45 f0 60 00    	movw   $0x60,-0x10(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101d79:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c0101d7d:	89 c2                	mov    %eax,%edx
c0101d7f:	ec                   	in     (%dx),%al
c0101d80:	88 45 ea             	mov    %al,-0x16(%ebp)
    return data;
c0101d83:	0f b6 45 ea          	movzbl -0x16(%ebp),%eax
    }

    data = inb(KBDATAP);
c0101d87:	88 45 f3             	mov    %al,-0xd(%ebp)

    if (data == 0xE0) {
c0101d8a:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
c0101d8e:	75 17                	jne    c0101da7 <kbd_proc_data+0x62>
        // E0 escape character
        shift |= E0ESC;
c0101d90:	a1 48 47 1c c0       	mov    0xc01c4748,%eax
c0101d95:	83 c8 40             	or     $0x40,%eax
c0101d98:	a3 48 47 1c c0       	mov    %eax,0xc01c4748
        return 0;
c0101d9d:	b8 00 00 00 00       	mov    $0x0,%eax
c0101da2:	e9 29 01 00 00       	jmp    c0101ed0 <kbd_proc_data+0x18b>
    } else if (data & 0x80) {
c0101da7:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101dab:	84 c0                	test   %al,%al
c0101dad:	79 47                	jns    c0101df6 <kbd_proc_data+0xb1>
        // Key released
        data = (shift & E0ESC ? data : data & 0x7F);
c0101daf:	a1 48 47 1c c0       	mov    0xc01c4748,%eax
c0101db4:	83 e0 40             	and    $0x40,%eax
c0101db7:	85 c0                	test   %eax,%eax
c0101db9:	75 09                	jne    c0101dc4 <kbd_proc_data+0x7f>
c0101dbb:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101dbf:	83 e0 7f             	and    $0x7f,%eax
c0101dc2:	eb 04                	jmp    c0101dc8 <kbd_proc_data+0x83>
c0101dc4:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101dc8:	88 45 f3             	mov    %al,-0xd(%ebp)
        shift &= ~(shiftcode[data] | E0ESC);
c0101dcb:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101dcf:	0f b6 80 40 10 13 c0 	movzbl -0x3fecefc0(%eax),%eax
c0101dd6:	83 c8 40             	or     $0x40,%eax
c0101dd9:	0f b6 c0             	movzbl %al,%eax
c0101ddc:	f7 d0                	not    %eax
c0101dde:	89 c2                	mov    %eax,%edx
c0101de0:	a1 48 47 1c c0       	mov    0xc01c4748,%eax
c0101de5:	21 d0                	and    %edx,%eax
c0101de7:	a3 48 47 1c c0       	mov    %eax,0xc01c4748
        return 0;
c0101dec:	b8 00 00 00 00       	mov    $0x0,%eax
c0101df1:	e9 da 00 00 00       	jmp    c0101ed0 <kbd_proc_data+0x18b>
    } else if (shift & E0ESC) {
c0101df6:	a1 48 47 1c c0       	mov    0xc01c4748,%eax
c0101dfb:	83 e0 40             	and    $0x40,%eax
c0101dfe:	85 c0                	test   %eax,%eax
c0101e00:	74 11                	je     c0101e13 <kbd_proc_data+0xce>
        // Last character was an E0 escape; or with 0x80
        data |= 0x80;
c0101e02:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
        shift &= ~E0ESC;
c0101e06:	a1 48 47 1c c0       	mov    0xc01c4748,%eax
c0101e0b:	83 e0 bf             	and    $0xffffffbf,%eax
c0101e0e:	a3 48 47 1c c0       	mov    %eax,0xc01c4748
    }

    shift |= shiftcode[data];
c0101e13:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101e17:	0f b6 80 40 10 13 c0 	movzbl -0x3fecefc0(%eax),%eax
c0101e1e:	0f b6 d0             	movzbl %al,%edx
c0101e21:	a1 48 47 1c c0       	mov    0xc01c4748,%eax
c0101e26:	09 d0                	or     %edx,%eax
c0101e28:	a3 48 47 1c c0       	mov    %eax,0xc01c4748
    shift ^= togglecode[data];
c0101e2d:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101e31:	0f b6 80 40 11 13 c0 	movzbl -0x3feceec0(%eax),%eax
c0101e38:	0f b6 d0             	movzbl %al,%edx
c0101e3b:	a1 48 47 1c c0       	mov    0xc01c4748,%eax
c0101e40:	31 d0                	xor    %edx,%eax
c0101e42:	a3 48 47 1c c0       	mov    %eax,0xc01c4748

    c = charcode[shift & (CTL | SHIFT)][data];
c0101e47:	a1 48 47 1c c0       	mov    0xc01c4748,%eax
c0101e4c:	83 e0 03             	and    $0x3,%eax
c0101e4f:	8b 14 85 40 15 13 c0 	mov    -0x3feceac0(,%eax,4),%edx
c0101e56:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101e5a:	01 d0                	add    %edx,%eax
c0101e5c:	0f b6 00             	movzbl (%eax),%eax
c0101e5f:	0f b6 c0             	movzbl %al,%eax
c0101e62:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (shift & CAPSLOCK) {
c0101e65:	a1 48 47 1c c0       	mov    0xc01c4748,%eax
c0101e6a:	83 e0 08             	and    $0x8,%eax
c0101e6d:	85 c0                	test   %eax,%eax
c0101e6f:	74 22                	je     c0101e93 <kbd_proc_data+0x14e>
        if ('a' <= c && c <= 'z')
c0101e71:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
c0101e75:	7e 0c                	jle    c0101e83 <kbd_proc_data+0x13e>
c0101e77:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
c0101e7b:	7f 06                	jg     c0101e83 <kbd_proc_data+0x13e>
            c += 'A' - 'a';
c0101e7d:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
c0101e81:	eb 10                	jmp    c0101e93 <kbd_proc_data+0x14e>
        else if ('A' <= c && c <= 'Z')
c0101e83:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
c0101e87:	7e 0a                	jle    c0101e93 <kbd_proc_data+0x14e>
c0101e89:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
c0101e8d:	7f 04                	jg     c0101e93 <kbd_proc_data+0x14e>
            c += 'a' - 'A';
c0101e8f:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
    }

    // Process special keys
    // Ctrl-Alt-Del: reboot
    if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
c0101e93:	a1 48 47 1c c0       	mov    0xc01c4748,%eax
c0101e98:	f7 d0                	not    %eax
c0101e9a:	83 e0 06             	and    $0x6,%eax
c0101e9d:	85 c0                	test   %eax,%eax
c0101e9f:	75 2c                	jne    c0101ecd <kbd_proc_data+0x188>
c0101ea1:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
c0101ea8:	75 23                	jne    c0101ecd <kbd_proc_data+0x188>
        cprintf("Rebooting!\n");
c0101eaa:	83 ec 0c             	sub    $0xc,%esp
c0101ead:	68 75 d1 10 c0       	push   $0xc010d175
c0101eb2:	e8 e0 e3 ff ff       	call   c0100297 <cprintf>
c0101eb7:	83 c4 10             	add    $0x10,%esp
c0101eba:	66 c7 45 ee 92 00    	movw   $0x92,-0x12(%ebp)
c0101ec0:	c6 45 e9 03          	movb   $0x3,-0x17(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101ec4:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101ec8:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101ecc:	ee                   	out    %al,(%dx)
        outb(0x92, 0x3); // courtesy of Chris Frost
    }
    return c;
c0101ecd:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0101ed0:	c9                   	leave  
c0101ed1:	c3                   	ret    

c0101ed2 <kbd_intr>:

/* kbd_intr - try to feed input characters from keyboard */
static void
kbd_intr(void) {
c0101ed2:	55                   	push   %ebp
c0101ed3:	89 e5                	mov    %esp,%ebp
c0101ed5:	83 ec 08             	sub    $0x8,%esp
    cons_intr(kbd_proc_data);
c0101ed8:	83 ec 0c             	sub    $0xc,%esp
c0101edb:	68 45 1d 10 c0       	push   $0xc0101d45
c0101ee0:	e8 9b fd ff ff       	call   c0101c80 <cons_intr>
c0101ee5:	83 c4 10             	add    $0x10,%esp
}
c0101ee8:	90                   	nop
c0101ee9:	c9                   	leave  
c0101eea:	c3                   	ret    

c0101eeb <kbd_init>:

static void
kbd_init(void) {
c0101eeb:	55                   	push   %ebp
c0101eec:	89 e5                	mov    %esp,%ebp
c0101eee:	83 ec 08             	sub    $0x8,%esp
    // drain the kbd buffer
    kbd_intr();
c0101ef1:	e8 dc ff ff ff       	call   c0101ed2 <kbd_intr>
    pic_enable(IRQ_KBD);
c0101ef6:	83 ec 0c             	sub    $0xc,%esp
c0101ef9:	6a 01                	push   $0x1
c0101efb:	e8 4b 01 00 00       	call   c010204b <pic_enable>
c0101f00:	83 c4 10             	add    $0x10,%esp
}
c0101f03:	90                   	nop
c0101f04:	c9                   	leave  
c0101f05:	c3                   	ret    

c0101f06 <cons_init>:

/* cons_init - initializes the console devices */
void
cons_init(void) {
c0101f06:	55                   	push   %ebp
c0101f07:	89 e5                	mov    %esp,%ebp
c0101f09:	83 ec 08             	sub    $0x8,%esp
    cga_init();
c0101f0c:	e8 8c f8 ff ff       	call   c010179d <cga_init>
    serial_init();
c0101f11:	e8 6e f9 ff ff       	call   c0101884 <serial_init>
    kbd_init();
c0101f16:	e8 d0 ff ff ff       	call   c0101eeb <kbd_init>
    if (!serial_exists) {
c0101f1b:	a1 28 45 1c c0       	mov    0xc01c4528,%eax
c0101f20:	85 c0                	test   %eax,%eax
c0101f22:	75 10                	jne    c0101f34 <cons_init+0x2e>
        cprintf("serial port does not exist!!\n");
c0101f24:	83 ec 0c             	sub    $0xc,%esp
c0101f27:	68 81 d1 10 c0       	push   $0xc010d181
c0101f2c:	e8 66 e3 ff ff       	call   c0100297 <cprintf>
c0101f31:	83 c4 10             	add    $0x10,%esp
    }
}
c0101f34:	90                   	nop
c0101f35:	c9                   	leave  
c0101f36:	c3                   	ret    

c0101f37 <cons_putc>:

/* cons_putc - print a single character @c to console devices */
void
cons_putc(int c) {
c0101f37:	55                   	push   %ebp
c0101f38:	89 e5                	mov    %esp,%ebp
c0101f3a:	83 ec 18             	sub    $0x18,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c0101f3d:	e8 d4 f7 ff ff       	call   c0101716 <__intr_save>
c0101f42:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        lpt_putc(c);
c0101f45:	83 ec 0c             	sub    $0xc,%esp
c0101f48:	ff 75 08             	pushl  0x8(%ebp)
c0101f4b:	e8 93 fa ff ff       	call   c01019e3 <lpt_putc>
c0101f50:	83 c4 10             	add    $0x10,%esp
        cga_putc(c);
c0101f53:	83 ec 0c             	sub    $0xc,%esp
c0101f56:	ff 75 08             	pushl  0x8(%ebp)
c0101f59:	e8 bc fa ff ff       	call   c0101a1a <cga_putc>
c0101f5e:	83 c4 10             	add    $0x10,%esp
        serial_putc(c);
c0101f61:	83 ec 0c             	sub    $0xc,%esp
c0101f64:	ff 75 08             	pushl  0x8(%ebp)
c0101f67:	e8 dd fc ff ff       	call   c0101c49 <serial_putc>
c0101f6c:	83 c4 10             	add    $0x10,%esp
    }
    local_intr_restore(intr_flag);
c0101f6f:	83 ec 0c             	sub    $0xc,%esp
c0101f72:	ff 75 f4             	pushl  -0xc(%ebp)
c0101f75:	e8 c6 f7 ff ff       	call   c0101740 <__intr_restore>
c0101f7a:	83 c4 10             	add    $0x10,%esp
}
c0101f7d:	90                   	nop
c0101f7e:	c9                   	leave  
c0101f7f:	c3                   	ret    

c0101f80 <cons_getc>:
/* *
 * cons_getc - return the next input character from console,
 * or 0 if none waiting.
 * */
int
cons_getc(void) {
c0101f80:	55                   	push   %ebp
c0101f81:	89 e5                	mov    %esp,%ebp
c0101f83:	83 ec 18             	sub    $0x18,%esp
    int c = 0;
c0101f86:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    local_intr_save(intr_flag);
c0101f8d:	e8 84 f7 ff ff       	call   c0101716 <__intr_save>
c0101f92:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        // poll for any pending input characters,
        // so that this function works even when interrupts are disabled
        // (e.g., when called from the kernel monitor).
        serial_intr();
c0101f95:	e8 89 fd ff ff       	call   c0101d23 <serial_intr>
        kbd_intr();
c0101f9a:	e8 33 ff ff ff       	call   c0101ed2 <kbd_intr>

        // grab the next character from the input buffer.
        if (cons.rpos != cons.wpos) {
c0101f9f:	8b 15 40 47 1c c0    	mov    0xc01c4740,%edx
c0101fa5:	a1 44 47 1c c0       	mov    0xc01c4744,%eax
c0101faa:	39 c2                	cmp    %eax,%edx
c0101fac:	74 31                	je     c0101fdf <cons_getc+0x5f>
            c = cons.buf[cons.rpos ++];
c0101fae:	a1 40 47 1c c0       	mov    0xc01c4740,%eax
c0101fb3:	8d 50 01             	lea    0x1(%eax),%edx
c0101fb6:	89 15 40 47 1c c0    	mov    %edx,0xc01c4740
c0101fbc:	0f b6 80 40 45 1c c0 	movzbl -0x3fe3bac0(%eax),%eax
c0101fc3:	0f b6 c0             	movzbl %al,%eax
c0101fc6:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (cons.rpos == CONSBUFSIZE) {
c0101fc9:	a1 40 47 1c c0       	mov    0xc01c4740,%eax
c0101fce:	3d 00 02 00 00       	cmp    $0x200,%eax
c0101fd3:	75 0a                	jne    c0101fdf <cons_getc+0x5f>
                cons.rpos = 0;
c0101fd5:	c7 05 40 47 1c c0 00 	movl   $0x0,0xc01c4740
c0101fdc:	00 00 00 
            }
        }
    }
    local_intr_restore(intr_flag);
c0101fdf:	83 ec 0c             	sub    $0xc,%esp
c0101fe2:	ff 75 f0             	pushl  -0x10(%ebp)
c0101fe5:	e8 56 f7 ff ff       	call   c0101740 <__intr_restore>
c0101fea:	83 c4 10             	add    $0x10,%esp
    return c;
c0101fed:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0101ff0:	c9                   	leave  
c0101ff1:	c3                   	ret    

c0101ff2 <pic_setmask>:
// Initial IRQ mask has interrupt 2 enabled (for slave 8259A).
static uint16_t irq_mask = 0xFFFF & ~(1 << IRQ_SLAVE);
static bool did_init = 0;

static void
pic_setmask(uint16_t mask) {
c0101ff2:	55                   	push   %ebp
c0101ff3:	89 e5                	mov    %esp,%ebp
c0101ff5:	83 ec 14             	sub    $0x14,%esp
c0101ff8:	8b 45 08             	mov    0x8(%ebp),%eax
c0101ffb:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    irq_mask = mask;
c0101fff:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0102003:	66 a3 50 15 13 c0    	mov    %ax,0xc0131550
    if (did_init) {
c0102009:	a1 4c 47 1c c0       	mov    0xc01c474c,%eax
c010200e:	85 c0                	test   %eax,%eax
c0102010:	74 36                	je     c0102048 <pic_setmask+0x56>
        outb(IO_PIC1 + 1, mask);
c0102012:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0102016:	0f b6 c0             	movzbl %al,%eax
c0102019:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
c010201f:	88 45 fa             	mov    %al,-0x6(%ebp)
c0102022:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
c0102026:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c010202a:	ee                   	out    %al,(%dx)
        outb(IO_PIC2 + 1, mask >> 8);
c010202b:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c010202f:	66 c1 e8 08          	shr    $0x8,%ax
c0102033:	0f b6 c0             	movzbl %al,%eax
c0102036:	66 c7 45 fc a1 00    	movw   $0xa1,-0x4(%ebp)
c010203c:	88 45 fb             	mov    %al,-0x5(%ebp)
c010203f:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
c0102043:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c0102047:	ee                   	out    %al,(%dx)
    }
}
c0102048:	90                   	nop
c0102049:	c9                   	leave  
c010204a:	c3                   	ret    

c010204b <pic_enable>:

void
pic_enable(unsigned int irq) {
c010204b:	55                   	push   %ebp
c010204c:	89 e5                	mov    %esp,%ebp
    pic_setmask(irq_mask & ~(1 << irq));
c010204e:	8b 45 08             	mov    0x8(%ebp),%eax
c0102051:	ba 01 00 00 00       	mov    $0x1,%edx
c0102056:	89 c1                	mov    %eax,%ecx
c0102058:	d3 e2                	shl    %cl,%edx
c010205a:	89 d0                	mov    %edx,%eax
c010205c:	f7 d0                	not    %eax
c010205e:	89 c2                	mov    %eax,%edx
c0102060:	0f b7 05 50 15 13 c0 	movzwl 0xc0131550,%eax
c0102067:	21 d0                	and    %edx,%eax
c0102069:	0f b7 c0             	movzwl %ax,%eax
c010206c:	50                   	push   %eax
c010206d:	e8 80 ff ff ff       	call   c0101ff2 <pic_setmask>
c0102072:	83 c4 04             	add    $0x4,%esp
}
c0102075:	90                   	nop
c0102076:	c9                   	leave  
c0102077:	c3                   	ret    

c0102078 <pic_init>:

/* pic_init - initialize the 8259A interrupt controllers */
void
pic_init(void) {
c0102078:	55                   	push   %ebp
c0102079:	89 e5                	mov    %esp,%ebp
c010207b:	83 ec 30             	sub    $0x30,%esp
    did_init = 1;
c010207e:	c7 05 4c 47 1c c0 01 	movl   $0x1,0xc01c474c
c0102085:	00 00 00 
c0102088:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
c010208e:	c6 45 d6 ff          	movb   $0xff,-0x2a(%ebp)
c0102092:	0f b6 45 d6          	movzbl -0x2a(%ebp),%eax
c0102096:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c010209a:	ee                   	out    %al,(%dx)
c010209b:	66 c7 45 fc a1 00    	movw   $0xa1,-0x4(%ebp)
c01020a1:	c6 45 d7 ff          	movb   $0xff,-0x29(%ebp)
c01020a5:	0f b6 45 d7          	movzbl -0x29(%ebp),%eax
c01020a9:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c01020ad:	ee                   	out    %al,(%dx)
c01020ae:	66 c7 45 fa 20 00    	movw   $0x20,-0x6(%ebp)
c01020b4:	c6 45 d8 11          	movb   $0x11,-0x28(%ebp)
c01020b8:	0f b6 45 d8          	movzbl -0x28(%ebp),%eax
c01020bc:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c01020c0:	ee                   	out    %al,(%dx)
c01020c1:	66 c7 45 f8 21 00    	movw   $0x21,-0x8(%ebp)
c01020c7:	c6 45 d9 20          	movb   $0x20,-0x27(%ebp)
c01020cb:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c01020cf:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
c01020d3:	ee                   	out    %al,(%dx)
c01020d4:	66 c7 45 f6 21 00    	movw   $0x21,-0xa(%ebp)
c01020da:	c6 45 da 04          	movb   $0x4,-0x26(%ebp)
c01020de:	0f b6 45 da          	movzbl -0x26(%ebp),%eax
c01020e2:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c01020e6:	ee                   	out    %al,(%dx)
c01020e7:	66 c7 45 f4 21 00    	movw   $0x21,-0xc(%ebp)
c01020ed:	c6 45 db 03          	movb   $0x3,-0x25(%ebp)
c01020f1:	0f b6 45 db          	movzbl -0x25(%ebp),%eax
c01020f5:	0f b7 55 f4          	movzwl -0xc(%ebp),%edx
c01020f9:	ee                   	out    %al,(%dx)
c01020fa:	66 c7 45 f2 a0 00    	movw   $0xa0,-0xe(%ebp)
c0102100:	c6 45 dc 11          	movb   $0x11,-0x24(%ebp)
c0102104:	0f b6 45 dc          	movzbl -0x24(%ebp),%eax
c0102108:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010210c:	ee                   	out    %al,(%dx)
c010210d:	66 c7 45 f0 a1 00    	movw   $0xa1,-0x10(%ebp)
c0102113:	c6 45 dd 28          	movb   $0x28,-0x23(%ebp)
c0102117:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c010211b:	0f b7 55 f0          	movzwl -0x10(%ebp),%edx
c010211f:	ee                   	out    %al,(%dx)
c0102120:	66 c7 45 ee a1 00    	movw   $0xa1,-0x12(%ebp)
c0102126:	c6 45 de 02          	movb   $0x2,-0x22(%ebp)
c010212a:	0f b6 45 de          	movzbl -0x22(%ebp),%eax
c010212e:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0102132:	ee                   	out    %al,(%dx)
c0102133:	66 c7 45 ec a1 00    	movw   $0xa1,-0x14(%ebp)
c0102139:	c6 45 df 03          	movb   $0x3,-0x21(%ebp)
c010213d:	0f b6 45 df          	movzbl -0x21(%ebp),%eax
c0102141:	0f b7 55 ec          	movzwl -0x14(%ebp),%edx
c0102145:	ee                   	out    %al,(%dx)
c0102146:	66 c7 45 ea 20 00    	movw   $0x20,-0x16(%ebp)
c010214c:	c6 45 e0 68          	movb   $0x68,-0x20(%ebp)
c0102150:	0f b6 45 e0          	movzbl -0x20(%ebp),%eax
c0102154:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0102158:	ee                   	out    %al,(%dx)
c0102159:	66 c7 45 e8 20 00    	movw   $0x20,-0x18(%ebp)
c010215f:	c6 45 e1 0a          	movb   $0xa,-0x1f(%ebp)
c0102163:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0102167:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c010216b:	ee                   	out    %al,(%dx)
c010216c:	66 c7 45 e6 a0 00    	movw   $0xa0,-0x1a(%ebp)
c0102172:	c6 45 e2 68          	movb   $0x68,-0x1e(%ebp)
c0102176:	0f b6 45 e2          	movzbl -0x1e(%ebp),%eax
c010217a:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c010217e:	ee                   	out    %al,(%dx)
c010217f:	66 c7 45 e4 a0 00    	movw   $0xa0,-0x1c(%ebp)
c0102185:	c6 45 e3 0a          	movb   $0xa,-0x1d(%ebp)
c0102189:	0f b6 45 e3          	movzbl -0x1d(%ebp),%eax
c010218d:	0f b7 55 e4          	movzwl -0x1c(%ebp),%edx
c0102191:	ee                   	out    %al,(%dx)
    outb(IO_PIC1, 0x0a);    // read IRR by default

    outb(IO_PIC2, 0x68);    // OCW3
    outb(IO_PIC2, 0x0a);    // OCW3

    if (irq_mask != 0xFFFF) {
c0102192:	0f b7 05 50 15 13 c0 	movzwl 0xc0131550,%eax
c0102199:	66 83 f8 ff          	cmp    $0xffff,%ax
c010219d:	74 13                	je     c01021b2 <pic_init+0x13a>
        pic_setmask(irq_mask);
c010219f:	0f b7 05 50 15 13 c0 	movzwl 0xc0131550,%eax
c01021a6:	0f b7 c0             	movzwl %ax,%eax
c01021a9:	50                   	push   %eax
c01021aa:	e8 43 fe ff ff       	call   c0101ff2 <pic_setmask>
c01021af:	83 c4 04             	add    $0x4,%esp
    }
}
c01021b2:	90                   	nop
c01021b3:	c9                   	leave  
c01021b4:	c3                   	ret    

c01021b5 <intr_enable>:
#include <x86.h>
#include <intr.h>

/* intr_enable - enable irq interrupt */
void
intr_enable(void) {
c01021b5:	55                   	push   %ebp
c01021b6:	89 e5                	mov    %esp,%ebp
    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
}

static inline void
sti(void) {
    asm volatile ("sti");
c01021b8:	fb                   	sti    
    sti();
}
c01021b9:	90                   	nop
c01021ba:	5d                   	pop    %ebp
c01021bb:	c3                   	ret    

c01021bc <intr_disable>:

/* intr_disable - disable irq interrupt */
void
intr_disable(void) {
c01021bc:	55                   	push   %ebp
c01021bd:	89 e5                	mov    %esp,%ebp
}

static inline void
cli(void) {
    asm volatile ("cli" ::: "memory");
c01021bf:	fa                   	cli    
    cli();
}
c01021c0:	90                   	nop
c01021c1:	5d                   	pop    %ebp
c01021c2:	c3                   	ret    

c01021c3 <print_ticks>:
#include <sync.h>
#include <proc.h>

#define TICK_NUM 100

static void print_ticks() {
c01021c3:	55                   	push   %ebp
c01021c4:	89 e5                	mov    %esp,%ebp
c01021c6:	83 ec 08             	sub    $0x8,%esp
    cprintf("%d ticks\n",TICK_NUM);
c01021c9:	83 ec 08             	sub    $0x8,%esp
c01021cc:	6a 64                	push   $0x64
c01021ce:	68 a0 d1 10 c0       	push   $0xc010d1a0
c01021d3:	e8 bf e0 ff ff       	call   c0100297 <cprintf>
c01021d8:	83 c4 10             	add    $0x10,%esp
#ifdef DEBUG_GRADE
    cprintf("End of Test.\n");
c01021db:	83 ec 0c             	sub    $0xc,%esp
c01021de:	68 aa d1 10 c0       	push   $0xc010d1aa
c01021e3:	e8 af e0 ff ff       	call   c0100297 <cprintf>
c01021e8:	83 c4 10             	add    $0x10,%esp
    panic("EOT: kernel seems ok.");
c01021eb:	83 ec 04             	sub    $0x4,%esp
c01021ee:	68 b8 d1 10 c0       	push   $0xc010d1b8
c01021f3:	6a 1a                	push   $0x1a
c01021f5:	68 ce d1 10 c0       	push   $0xc010d1ce
c01021fa:	e8 fe e1 ff ff       	call   c01003fd <__panic>

c01021ff <idt_init>:
/* temporary trapframe or pointer to trapframe */
struct trapframe switchk2u, *switchu2k;

/* idt_init - initialize IDT to each of the entry points in kern/trap/vectors.S */
void
idt_init(void) {
c01021ff:	55                   	push   %ebp
c0102200:	89 e5                	mov    %esp,%ebp
c0102202:	83 ec 10             	sub    $0x10,%esp
     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
     //so you should setup the syscall interrupt gate in here
    // 1. get vectors
    extern uintptr_t __vectors[];
    // 2. setup entries
    for (int i = 0; i < 256; i++) {
c0102205:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c010220c:	e9 c3 00 00 00       	jmp    c01022d4 <idt_init+0xd5>
        SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);
c0102211:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102214:	8b 04 85 e0 15 13 c0 	mov    -0x3fecea20(,%eax,4),%eax
c010221b:	89 c2                	mov    %eax,%edx
c010221d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102220:	66 89 14 c5 60 47 1c 	mov    %dx,-0x3fe3b8a0(,%eax,8)
c0102227:	c0 
c0102228:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010222b:	66 c7 04 c5 62 47 1c 	movw   $0x8,-0x3fe3b89e(,%eax,8)
c0102232:	c0 08 00 
c0102235:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102238:	0f b6 14 c5 64 47 1c 	movzbl -0x3fe3b89c(,%eax,8),%edx
c010223f:	c0 
c0102240:	83 e2 e0             	and    $0xffffffe0,%edx
c0102243:	88 14 c5 64 47 1c c0 	mov    %dl,-0x3fe3b89c(,%eax,8)
c010224a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010224d:	0f b6 14 c5 64 47 1c 	movzbl -0x3fe3b89c(,%eax,8),%edx
c0102254:	c0 
c0102255:	83 e2 1f             	and    $0x1f,%edx
c0102258:	88 14 c5 64 47 1c c0 	mov    %dl,-0x3fe3b89c(,%eax,8)
c010225f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102262:	0f b6 14 c5 65 47 1c 	movzbl -0x3fe3b89b(,%eax,8),%edx
c0102269:	c0 
c010226a:	83 e2 f0             	and    $0xfffffff0,%edx
c010226d:	83 ca 0e             	or     $0xe,%edx
c0102270:	88 14 c5 65 47 1c c0 	mov    %dl,-0x3fe3b89b(,%eax,8)
c0102277:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010227a:	0f b6 14 c5 65 47 1c 	movzbl -0x3fe3b89b(,%eax,8),%edx
c0102281:	c0 
c0102282:	83 e2 ef             	and    $0xffffffef,%edx
c0102285:	88 14 c5 65 47 1c c0 	mov    %dl,-0x3fe3b89b(,%eax,8)
c010228c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010228f:	0f b6 14 c5 65 47 1c 	movzbl -0x3fe3b89b(,%eax,8),%edx
c0102296:	c0 
c0102297:	83 e2 9f             	and    $0xffffff9f,%edx
c010229a:	88 14 c5 65 47 1c c0 	mov    %dl,-0x3fe3b89b(,%eax,8)
c01022a1:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01022a4:	0f b6 14 c5 65 47 1c 	movzbl -0x3fe3b89b(,%eax,8),%edx
c01022ab:	c0 
c01022ac:	83 ca 80             	or     $0xffffff80,%edx
c01022af:	88 14 c5 65 47 1c c0 	mov    %dl,-0x3fe3b89b(,%eax,8)
c01022b6:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01022b9:	8b 04 85 e0 15 13 c0 	mov    -0x3fecea20(,%eax,4),%eax
c01022c0:	c1 e8 10             	shr    $0x10,%eax
c01022c3:	89 c2                	mov    %eax,%edx
c01022c5:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01022c8:	66 89 14 c5 66 47 1c 	mov    %dx,-0x3fe3b89a(,%eax,8)
c01022cf:	c0 
     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
     //so you should setup the syscall interrupt gate in here
    // 1. get vectors
    extern uintptr_t __vectors[];
    // 2. setup entries
    for (int i = 0; i < 256; i++) {
c01022d0:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c01022d4:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
c01022db:	0f 8e 30 ff ff ff    	jle    c0102211 <idt_init+0x12>
        SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);
    }
	// set RPL of switch_to_kernel as user 
    SETGATE(idt[T_SWITCH_TOK], 0, GD_KTEXT, __vectors[T_SWITCH_TOK], DPL_USER);
c01022e1:	a1 c4 17 13 c0       	mov    0xc01317c4,%eax
c01022e6:	66 a3 28 4b 1c c0    	mov    %ax,0xc01c4b28
c01022ec:	66 c7 05 2a 4b 1c c0 	movw   $0x8,0xc01c4b2a
c01022f3:	08 00 
c01022f5:	0f b6 05 2c 4b 1c c0 	movzbl 0xc01c4b2c,%eax
c01022fc:	83 e0 e0             	and    $0xffffffe0,%eax
c01022ff:	a2 2c 4b 1c c0       	mov    %al,0xc01c4b2c
c0102304:	0f b6 05 2c 4b 1c c0 	movzbl 0xc01c4b2c,%eax
c010230b:	83 e0 1f             	and    $0x1f,%eax
c010230e:	a2 2c 4b 1c c0       	mov    %al,0xc01c4b2c
c0102313:	0f b6 05 2d 4b 1c c0 	movzbl 0xc01c4b2d,%eax
c010231a:	83 e0 f0             	and    $0xfffffff0,%eax
c010231d:	83 c8 0e             	or     $0xe,%eax
c0102320:	a2 2d 4b 1c c0       	mov    %al,0xc01c4b2d
c0102325:	0f b6 05 2d 4b 1c c0 	movzbl 0xc01c4b2d,%eax
c010232c:	83 e0 ef             	and    $0xffffffef,%eax
c010232f:	a2 2d 4b 1c c0       	mov    %al,0xc01c4b2d
c0102334:	0f b6 05 2d 4b 1c c0 	movzbl 0xc01c4b2d,%eax
c010233b:	83 c8 60             	or     $0x60,%eax
c010233e:	a2 2d 4b 1c c0       	mov    %al,0xc01c4b2d
c0102343:	0f b6 05 2d 4b 1c c0 	movzbl 0xc01c4b2d,%eax
c010234a:	83 c8 80             	or     $0xffffff80,%eax
c010234d:	a2 2d 4b 1c c0       	mov    %al,0xc01c4b2d
c0102352:	a1 c4 17 13 c0       	mov    0xc01317c4,%eax
c0102357:	c1 e8 10             	shr    $0x10,%eax
c010235a:	66 a3 2e 4b 1c c0    	mov    %ax,0xc01c4b2e
    // set trap gate
    SETGATE(idt[T_SYSCALL], 1, GD_KTEXT, __vectors[T_SYSCALL], DPL_USER);
c0102360:	a1 e0 17 13 c0       	mov    0xc01317e0,%eax
c0102365:	66 a3 60 4b 1c c0    	mov    %ax,0xc01c4b60
c010236b:	66 c7 05 62 4b 1c c0 	movw   $0x8,0xc01c4b62
c0102372:	08 00 
c0102374:	0f b6 05 64 4b 1c c0 	movzbl 0xc01c4b64,%eax
c010237b:	83 e0 e0             	and    $0xffffffe0,%eax
c010237e:	a2 64 4b 1c c0       	mov    %al,0xc01c4b64
c0102383:	0f b6 05 64 4b 1c c0 	movzbl 0xc01c4b64,%eax
c010238a:	83 e0 1f             	and    $0x1f,%eax
c010238d:	a2 64 4b 1c c0       	mov    %al,0xc01c4b64
c0102392:	0f b6 05 65 4b 1c c0 	movzbl 0xc01c4b65,%eax
c0102399:	83 c8 0f             	or     $0xf,%eax
c010239c:	a2 65 4b 1c c0       	mov    %al,0xc01c4b65
c01023a1:	0f b6 05 65 4b 1c c0 	movzbl 0xc01c4b65,%eax
c01023a8:	83 e0 ef             	and    $0xffffffef,%eax
c01023ab:	a2 65 4b 1c c0       	mov    %al,0xc01c4b65
c01023b0:	0f b6 05 65 4b 1c c0 	movzbl 0xc01c4b65,%eax
c01023b7:	83 c8 60             	or     $0x60,%eax
c01023ba:	a2 65 4b 1c c0       	mov    %al,0xc01c4b65
c01023bf:	0f b6 05 65 4b 1c c0 	movzbl 0xc01c4b65,%eax
c01023c6:	83 c8 80             	or     $0xffffff80,%eax
c01023c9:	a2 65 4b 1c c0       	mov    %al,0xc01c4b65
c01023ce:	a1 e0 17 13 c0       	mov    0xc01317e0,%eax
c01023d3:	c1 e8 10             	shr    $0x10,%eax
c01023d6:	66 a3 66 4b 1c c0    	mov    %ax,0xc01c4b66
c01023dc:	c7 45 f8 60 15 13 c0 	movl   $0xc0131560,-0x8(%ebp)
    }
}

static inline void
lidt(struct pseudodesc *pd) {
    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
c01023e3:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01023e6:	0f 01 18             	lidtl  (%eax)
    // 3. LIDT
    lidt(&idt_pd);
}
c01023e9:	90                   	nop
c01023ea:	c9                   	leave  
c01023eb:	c3                   	ret    

c01023ec <trapname>:

static const char *
trapname(int trapno) {
c01023ec:	55                   	push   %ebp
c01023ed:	89 e5                	mov    %esp,%ebp
        "Alignment Check",
        "Machine-Check",
        "SIMD Floating-Point Exception"
    };

    if (trapno < sizeof(excnames)/sizeof(const char * const)) {
c01023ef:	8b 45 08             	mov    0x8(%ebp),%eax
c01023f2:	83 f8 13             	cmp    $0x13,%eax
c01023f5:	77 0c                	ja     c0102403 <trapname+0x17>
        return excnames[trapno];
c01023f7:	8b 45 08             	mov    0x8(%ebp),%eax
c01023fa:	8b 04 85 40 d6 10 c0 	mov    -0x3fef29c0(,%eax,4),%eax
c0102401:	eb 18                	jmp    c010241b <trapname+0x2f>
    }
    if (trapno >= IRQ_OFFSET && trapno < IRQ_OFFSET + 16) {
c0102403:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
c0102407:	7e 0d                	jle    c0102416 <trapname+0x2a>
c0102409:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
c010240d:	7f 07                	jg     c0102416 <trapname+0x2a>
        return "Hardware Interrupt";
c010240f:	b8 df d1 10 c0       	mov    $0xc010d1df,%eax
c0102414:	eb 05                	jmp    c010241b <trapname+0x2f>
    }
    return "(unknown trap)";
c0102416:	b8 f2 d1 10 c0       	mov    $0xc010d1f2,%eax
}
c010241b:	5d                   	pop    %ebp
c010241c:	c3                   	ret    

c010241d <trap_in_kernel>:

/* trap_in_kernel - test if trap happened in kernel */
bool
trap_in_kernel(struct trapframe *tf) {
c010241d:	55                   	push   %ebp
c010241e:	89 e5                	mov    %esp,%ebp
    return (tf->tf_cs == (uint16_t)KERNEL_CS);
c0102420:	8b 45 08             	mov    0x8(%ebp),%eax
c0102423:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c0102427:	66 83 f8 08          	cmp    $0x8,%ax
c010242b:	0f 94 c0             	sete   %al
c010242e:	0f b6 c0             	movzbl %al,%eax
}
c0102431:	5d                   	pop    %ebp
c0102432:	c3                   	ret    

c0102433 <print_trapframe>:
    "TF", "IF", "DF", "OF", NULL, NULL, "NT", NULL,
    "RF", "VM", "AC", "VIF", "VIP", "ID", NULL, NULL,
};

void
print_trapframe(struct trapframe *tf) {
c0102433:	55                   	push   %ebp
c0102434:	89 e5                	mov    %esp,%ebp
c0102436:	83 ec 18             	sub    $0x18,%esp
    cprintf("trapframe at %p\n", tf);
c0102439:	83 ec 08             	sub    $0x8,%esp
c010243c:	ff 75 08             	pushl  0x8(%ebp)
c010243f:	68 33 d2 10 c0       	push   $0xc010d233
c0102444:	e8 4e de ff ff       	call   c0100297 <cprintf>
c0102449:	83 c4 10             	add    $0x10,%esp
    print_regs(&tf->tf_regs);
c010244c:	8b 45 08             	mov    0x8(%ebp),%eax
c010244f:	83 ec 0c             	sub    $0xc,%esp
c0102452:	50                   	push   %eax
c0102453:	e8 b8 01 00 00       	call   c0102610 <print_regs>
c0102458:	83 c4 10             	add    $0x10,%esp
    cprintf("  ds   0x----%04x\n", tf->tf_ds);
c010245b:	8b 45 08             	mov    0x8(%ebp),%eax
c010245e:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c0102462:	0f b7 c0             	movzwl %ax,%eax
c0102465:	83 ec 08             	sub    $0x8,%esp
c0102468:	50                   	push   %eax
c0102469:	68 44 d2 10 c0       	push   $0xc010d244
c010246e:	e8 24 de ff ff       	call   c0100297 <cprintf>
c0102473:	83 c4 10             	add    $0x10,%esp
    cprintf("  es   0x----%04x\n", tf->tf_es);
c0102476:	8b 45 08             	mov    0x8(%ebp),%eax
c0102479:	0f b7 40 28          	movzwl 0x28(%eax),%eax
c010247d:	0f b7 c0             	movzwl %ax,%eax
c0102480:	83 ec 08             	sub    $0x8,%esp
c0102483:	50                   	push   %eax
c0102484:	68 57 d2 10 c0       	push   $0xc010d257
c0102489:	e8 09 de ff ff       	call   c0100297 <cprintf>
c010248e:	83 c4 10             	add    $0x10,%esp
    cprintf("  fs   0x----%04x\n", tf->tf_fs);
c0102491:	8b 45 08             	mov    0x8(%ebp),%eax
c0102494:	0f b7 40 24          	movzwl 0x24(%eax),%eax
c0102498:	0f b7 c0             	movzwl %ax,%eax
c010249b:	83 ec 08             	sub    $0x8,%esp
c010249e:	50                   	push   %eax
c010249f:	68 6a d2 10 c0       	push   $0xc010d26a
c01024a4:	e8 ee dd ff ff       	call   c0100297 <cprintf>
c01024a9:	83 c4 10             	add    $0x10,%esp
    cprintf("  gs   0x----%04x\n", tf->tf_gs);
c01024ac:	8b 45 08             	mov    0x8(%ebp),%eax
c01024af:	0f b7 40 20          	movzwl 0x20(%eax),%eax
c01024b3:	0f b7 c0             	movzwl %ax,%eax
c01024b6:	83 ec 08             	sub    $0x8,%esp
c01024b9:	50                   	push   %eax
c01024ba:	68 7d d2 10 c0       	push   $0xc010d27d
c01024bf:	e8 d3 dd ff ff       	call   c0100297 <cprintf>
c01024c4:	83 c4 10             	add    $0x10,%esp
    cprintf("  trap 0x%08x %s\n", tf->tf_trapno, trapname(tf->tf_trapno));
c01024c7:	8b 45 08             	mov    0x8(%ebp),%eax
c01024ca:	8b 40 30             	mov    0x30(%eax),%eax
c01024cd:	83 ec 0c             	sub    $0xc,%esp
c01024d0:	50                   	push   %eax
c01024d1:	e8 16 ff ff ff       	call   c01023ec <trapname>
c01024d6:	83 c4 10             	add    $0x10,%esp
c01024d9:	89 c2                	mov    %eax,%edx
c01024db:	8b 45 08             	mov    0x8(%ebp),%eax
c01024de:	8b 40 30             	mov    0x30(%eax),%eax
c01024e1:	83 ec 04             	sub    $0x4,%esp
c01024e4:	52                   	push   %edx
c01024e5:	50                   	push   %eax
c01024e6:	68 90 d2 10 c0       	push   $0xc010d290
c01024eb:	e8 a7 dd ff ff       	call   c0100297 <cprintf>
c01024f0:	83 c4 10             	add    $0x10,%esp
    cprintf("  err  0x%08x\n", tf->tf_err);
c01024f3:	8b 45 08             	mov    0x8(%ebp),%eax
c01024f6:	8b 40 34             	mov    0x34(%eax),%eax
c01024f9:	83 ec 08             	sub    $0x8,%esp
c01024fc:	50                   	push   %eax
c01024fd:	68 a2 d2 10 c0       	push   $0xc010d2a2
c0102502:	e8 90 dd ff ff       	call   c0100297 <cprintf>
c0102507:	83 c4 10             	add    $0x10,%esp
    cprintf("  eip  0x%08x\n", tf->tf_eip);
c010250a:	8b 45 08             	mov    0x8(%ebp),%eax
c010250d:	8b 40 38             	mov    0x38(%eax),%eax
c0102510:	83 ec 08             	sub    $0x8,%esp
c0102513:	50                   	push   %eax
c0102514:	68 b1 d2 10 c0       	push   $0xc010d2b1
c0102519:	e8 79 dd ff ff       	call   c0100297 <cprintf>
c010251e:	83 c4 10             	add    $0x10,%esp
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
c0102521:	8b 45 08             	mov    0x8(%ebp),%eax
c0102524:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c0102528:	0f b7 c0             	movzwl %ax,%eax
c010252b:	83 ec 08             	sub    $0x8,%esp
c010252e:	50                   	push   %eax
c010252f:	68 c0 d2 10 c0       	push   $0xc010d2c0
c0102534:	e8 5e dd ff ff       	call   c0100297 <cprintf>
c0102539:	83 c4 10             	add    $0x10,%esp
    cprintf("  flag 0x%08x ", tf->tf_eflags);
c010253c:	8b 45 08             	mov    0x8(%ebp),%eax
c010253f:	8b 40 40             	mov    0x40(%eax),%eax
c0102542:	83 ec 08             	sub    $0x8,%esp
c0102545:	50                   	push   %eax
c0102546:	68 d3 d2 10 c0       	push   $0xc010d2d3
c010254b:	e8 47 dd ff ff       	call   c0100297 <cprintf>
c0102550:	83 c4 10             	add    $0x10,%esp

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c0102553:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010255a:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c0102561:	eb 3f                	jmp    c01025a2 <print_trapframe+0x16f>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
c0102563:	8b 45 08             	mov    0x8(%ebp),%eax
c0102566:	8b 50 40             	mov    0x40(%eax),%edx
c0102569:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010256c:	21 d0                	and    %edx,%eax
c010256e:	85 c0                	test   %eax,%eax
c0102570:	74 29                	je     c010259b <print_trapframe+0x168>
c0102572:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102575:	8b 04 85 80 15 13 c0 	mov    -0x3fecea80(,%eax,4),%eax
c010257c:	85 c0                	test   %eax,%eax
c010257e:	74 1b                	je     c010259b <print_trapframe+0x168>
            cprintf("%s,", IA32flags[i]);
c0102580:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102583:	8b 04 85 80 15 13 c0 	mov    -0x3fecea80(,%eax,4),%eax
c010258a:	83 ec 08             	sub    $0x8,%esp
c010258d:	50                   	push   %eax
c010258e:	68 e2 d2 10 c0       	push   $0xc010d2e2
c0102593:	e8 ff dc ff ff       	call   c0100297 <cprintf>
c0102598:	83 c4 10             	add    $0x10,%esp
    cprintf("  eip  0x%08x\n", tf->tf_eip);
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
    cprintf("  flag 0x%08x ", tf->tf_eflags);

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c010259b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010259f:	d1 65 f0             	shll   -0x10(%ebp)
c01025a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01025a5:	83 f8 17             	cmp    $0x17,%eax
c01025a8:	76 b9                	jbe    c0102563 <print_trapframe+0x130>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
            cprintf("%s,", IA32flags[i]);
        }
    }
    cprintf("IOPL=%d\n", (tf->tf_eflags & FL_IOPL_MASK) >> 12);
c01025aa:	8b 45 08             	mov    0x8(%ebp),%eax
c01025ad:	8b 40 40             	mov    0x40(%eax),%eax
c01025b0:	25 00 30 00 00       	and    $0x3000,%eax
c01025b5:	c1 e8 0c             	shr    $0xc,%eax
c01025b8:	83 ec 08             	sub    $0x8,%esp
c01025bb:	50                   	push   %eax
c01025bc:	68 e6 d2 10 c0       	push   $0xc010d2e6
c01025c1:	e8 d1 dc ff ff       	call   c0100297 <cprintf>
c01025c6:	83 c4 10             	add    $0x10,%esp

    if (!trap_in_kernel(tf)) {
c01025c9:	83 ec 0c             	sub    $0xc,%esp
c01025cc:	ff 75 08             	pushl  0x8(%ebp)
c01025cf:	e8 49 fe ff ff       	call   c010241d <trap_in_kernel>
c01025d4:	83 c4 10             	add    $0x10,%esp
c01025d7:	85 c0                	test   %eax,%eax
c01025d9:	75 32                	jne    c010260d <print_trapframe+0x1da>
        cprintf("  esp  0x%08x\n", tf->tf_esp);
c01025db:	8b 45 08             	mov    0x8(%ebp),%eax
c01025de:	8b 40 44             	mov    0x44(%eax),%eax
c01025e1:	83 ec 08             	sub    $0x8,%esp
c01025e4:	50                   	push   %eax
c01025e5:	68 ef d2 10 c0       	push   $0xc010d2ef
c01025ea:	e8 a8 dc ff ff       	call   c0100297 <cprintf>
c01025ef:	83 c4 10             	add    $0x10,%esp
        cprintf("  ss   0x----%04x\n", tf->tf_ss);
c01025f2:	8b 45 08             	mov    0x8(%ebp),%eax
c01025f5:	0f b7 40 48          	movzwl 0x48(%eax),%eax
c01025f9:	0f b7 c0             	movzwl %ax,%eax
c01025fc:	83 ec 08             	sub    $0x8,%esp
c01025ff:	50                   	push   %eax
c0102600:	68 fe d2 10 c0       	push   $0xc010d2fe
c0102605:	e8 8d dc ff ff       	call   c0100297 <cprintf>
c010260a:	83 c4 10             	add    $0x10,%esp
    }
}
c010260d:	90                   	nop
c010260e:	c9                   	leave  
c010260f:	c3                   	ret    

c0102610 <print_regs>:

void
print_regs(struct pushregs *regs) {
c0102610:	55                   	push   %ebp
c0102611:	89 e5                	mov    %esp,%ebp
c0102613:	83 ec 08             	sub    $0x8,%esp
    cprintf("  edi  0x%08x\n", regs->reg_edi);
c0102616:	8b 45 08             	mov    0x8(%ebp),%eax
c0102619:	8b 00                	mov    (%eax),%eax
c010261b:	83 ec 08             	sub    $0x8,%esp
c010261e:	50                   	push   %eax
c010261f:	68 11 d3 10 c0       	push   $0xc010d311
c0102624:	e8 6e dc ff ff       	call   c0100297 <cprintf>
c0102629:	83 c4 10             	add    $0x10,%esp
    cprintf("  esi  0x%08x\n", regs->reg_esi);
c010262c:	8b 45 08             	mov    0x8(%ebp),%eax
c010262f:	8b 40 04             	mov    0x4(%eax),%eax
c0102632:	83 ec 08             	sub    $0x8,%esp
c0102635:	50                   	push   %eax
c0102636:	68 20 d3 10 c0       	push   $0xc010d320
c010263b:	e8 57 dc ff ff       	call   c0100297 <cprintf>
c0102640:	83 c4 10             	add    $0x10,%esp
    cprintf("  ebp  0x%08x\n", regs->reg_ebp);
c0102643:	8b 45 08             	mov    0x8(%ebp),%eax
c0102646:	8b 40 08             	mov    0x8(%eax),%eax
c0102649:	83 ec 08             	sub    $0x8,%esp
c010264c:	50                   	push   %eax
c010264d:	68 2f d3 10 c0       	push   $0xc010d32f
c0102652:	e8 40 dc ff ff       	call   c0100297 <cprintf>
c0102657:	83 c4 10             	add    $0x10,%esp
    cprintf("  oesp 0x%08x\n", regs->reg_oesp);
c010265a:	8b 45 08             	mov    0x8(%ebp),%eax
c010265d:	8b 40 0c             	mov    0xc(%eax),%eax
c0102660:	83 ec 08             	sub    $0x8,%esp
c0102663:	50                   	push   %eax
c0102664:	68 3e d3 10 c0       	push   $0xc010d33e
c0102669:	e8 29 dc ff ff       	call   c0100297 <cprintf>
c010266e:	83 c4 10             	add    $0x10,%esp
    cprintf("  ebx  0x%08x\n", regs->reg_ebx);
c0102671:	8b 45 08             	mov    0x8(%ebp),%eax
c0102674:	8b 40 10             	mov    0x10(%eax),%eax
c0102677:	83 ec 08             	sub    $0x8,%esp
c010267a:	50                   	push   %eax
c010267b:	68 4d d3 10 c0       	push   $0xc010d34d
c0102680:	e8 12 dc ff ff       	call   c0100297 <cprintf>
c0102685:	83 c4 10             	add    $0x10,%esp
    cprintf("  edx  0x%08x\n", regs->reg_edx);
c0102688:	8b 45 08             	mov    0x8(%ebp),%eax
c010268b:	8b 40 14             	mov    0x14(%eax),%eax
c010268e:	83 ec 08             	sub    $0x8,%esp
c0102691:	50                   	push   %eax
c0102692:	68 5c d3 10 c0       	push   $0xc010d35c
c0102697:	e8 fb db ff ff       	call   c0100297 <cprintf>
c010269c:	83 c4 10             	add    $0x10,%esp
    cprintf("  ecx  0x%08x\n", regs->reg_ecx);
c010269f:	8b 45 08             	mov    0x8(%ebp),%eax
c01026a2:	8b 40 18             	mov    0x18(%eax),%eax
c01026a5:	83 ec 08             	sub    $0x8,%esp
c01026a8:	50                   	push   %eax
c01026a9:	68 6b d3 10 c0       	push   $0xc010d36b
c01026ae:	e8 e4 db ff ff       	call   c0100297 <cprintf>
c01026b3:	83 c4 10             	add    $0x10,%esp
    cprintf("  eax  0x%08x\n", regs->reg_eax);
c01026b6:	8b 45 08             	mov    0x8(%ebp),%eax
c01026b9:	8b 40 1c             	mov    0x1c(%eax),%eax
c01026bc:	83 ec 08             	sub    $0x8,%esp
c01026bf:	50                   	push   %eax
c01026c0:	68 7a d3 10 c0       	push   $0xc010d37a
c01026c5:	e8 cd db ff ff       	call   c0100297 <cprintf>
c01026ca:	83 c4 10             	add    $0x10,%esp
}
c01026cd:	90                   	nop
c01026ce:	c9                   	leave  
c01026cf:	c3                   	ret    

c01026d0 <print_pgfault>:

static inline void
print_pgfault(struct trapframe *tf) {
c01026d0:	55                   	push   %ebp
c01026d1:	89 e5                	mov    %esp,%ebp
c01026d3:	53                   	push   %ebx
c01026d4:	83 ec 14             	sub    $0x14,%esp
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
            (tf->tf_err & 1) ? "protection fault" : "no page found");
c01026d7:	8b 45 08             	mov    0x8(%ebp),%eax
c01026da:	8b 40 34             	mov    0x34(%eax),%eax
c01026dd:	83 e0 01             	and    $0x1,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c01026e0:	85 c0                	test   %eax,%eax
c01026e2:	74 07                	je     c01026eb <print_pgfault+0x1b>
c01026e4:	bb 89 d3 10 c0       	mov    $0xc010d389,%ebx
c01026e9:	eb 05                	jmp    c01026f0 <print_pgfault+0x20>
c01026eb:	bb 9a d3 10 c0       	mov    $0xc010d39a,%ebx
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
c01026f0:	8b 45 08             	mov    0x8(%ebp),%eax
c01026f3:	8b 40 34             	mov    0x34(%eax),%eax
c01026f6:	83 e0 02             	and    $0x2,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c01026f9:	85 c0                	test   %eax,%eax
c01026fb:	74 07                	je     c0102704 <print_pgfault+0x34>
c01026fd:	b9 57 00 00 00       	mov    $0x57,%ecx
c0102702:	eb 05                	jmp    c0102709 <print_pgfault+0x39>
c0102704:	b9 52 00 00 00       	mov    $0x52,%ecx
            (tf->tf_err & 4) ? 'U' : 'K',
c0102709:	8b 45 08             	mov    0x8(%ebp),%eax
c010270c:	8b 40 34             	mov    0x34(%eax),%eax
c010270f:	83 e0 04             	and    $0x4,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c0102712:	85 c0                	test   %eax,%eax
c0102714:	74 07                	je     c010271d <print_pgfault+0x4d>
c0102716:	ba 55 00 00 00       	mov    $0x55,%edx
c010271b:	eb 05                	jmp    c0102722 <print_pgfault+0x52>
c010271d:	ba 4b 00 00 00       	mov    $0x4b,%edx
}

static inline uintptr_t
rcr2(void) {
    uintptr_t cr2;
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c0102722:	0f 20 d0             	mov    %cr2,%eax
c0102725:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return cr2;
c0102728:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010272b:	83 ec 0c             	sub    $0xc,%esp
c010272e:	53                   	push   %ebx
c010272f:	51                   	push   %ecx
c0102730:	52                   	push   %edx
c0102731:	50                   	push   %eax
c0102732:	68 a8 d3 10 c0       	push   $0xc010d3a8
c0102737:	e8 5b db ff ff       	call   c0100297 <cprintf>
c010273c:	83 c4 20             	add    $0x20,%esp
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
            (tf->tf_err & 1) ? "protection fault" : "no page found");
}
c010273f:	90                   	nop
c0102740:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0102743:	c9                   	leave  
c0102744:	c3                   	ret    

c0102745 <pgfault_handler>:

static int
pgfault_handler(struct trapframe *tf) {
c0102745:	55                   	push   %ebp
c0102746:	89 e5                	mov    %esp,%ebp
c0102748:	83 ec 18             	sub    $0x18,%esp
    extern struct mm_struct *check_mm_struct;
    if(check_mm_struct !=NULL) { //used for test check_swap
c010274b:	a1 10 71 1c c0       	mov    0xc01c7110,%eax
c0102750:	85 c0                	test   %eax,%eax
c0102752:	74 0e                	je     c0102762 <pgfault_handler+0x1d>
            print_pgfault(tf);
c0102754:	83 ec 0c             	sub    $0xc,%esp
c0102757:	ff 75 08             	pushl  0x8(%ebp)
c010275a:	e8 71 ff ff ff       	call   c01026d0 <print_pgfault>
c010275f:	83 c4 10             	add    $0x10,%esp
        }
    struct mm_struct *mm;
    if (check_mm_struct != NULL) {
c0102762:	a1 10 71 1c c0       	mov    0xc01c7110,%eax
c0102767:	85 c0                	test   %eax,%eax
c0102769:	74 32                	je     c010279d <pgfault_handler+0x58>
        assert(current == idleproc);
c010276b:	8b 15 28 50 1c c0    	mov    0xc01c5028,%edx
c0102771:	a1 20 50 1c c0       	mov    0xc01c5020,%eax
c0102776:	39 c2                	cmp    %eax,%edx
c0102778:	74 19                	je     c0102793 <pgfault_handler+0x4e>
c010277a:	68 cb d3 10 c0       	push   $0xc010d3cb
c010277f:	68 df d3 10 c0       	push   $0xc010d3df
c0102784:	68 b9 00 00 00       	push   $0xb9
c0102789:	68 ce d1 10 c0       	push   $0xc010d1ce
c010278e:	e8 6a dc ff ff       	call   c01003fd <__panic>
        mm = check_mm_struct;
c0102793:	a1 10 71 1c c0       	mov    0xc01c7110,%eax
c0102798:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010279b:	eb 47                	jmp    c01027e4 <pgfault_handler+0x9f>
    }
    else {
        if (current == NULL) {
c010279d:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c01027a2:	85 c0                	test   %eax,%eax
c01027a4:	75 33                	jne    c01027d9 <pgfault_handler+0x94>
            print_trapframe(tf);
c01027a6:	83 ec 0c             	sub    $0xc,%esp
c01027a9:	ff 75 08             	pushl  0x8(%ebp)
c01027ac:	e8 82 fc ff ff       	call   c0102433 <print_trapframe>
c01027b1:	83 c4 10             	add    $0x10,%esp
            print_pgfault(tf);
c01027b4:	83 ec 0c             	sub    $0xc,%esp
c01027b7:	ff 75 08             	pushl  0x8(%ebp)
c01027ba:	e8 11 ff ff ff       	call   c01026d0 <print_pgfault>
c01027bf:	83 c4 10             	add    $0x10,%esp
            panic("unhandled page fault.\n");
c01027c2:	83 ec 04             	sub    $0x4,%esp
c01027c5:	68 f4 d3 10 c0       	push   $0xc010d3f4
c01027ca:	68 c0 00 00 00       	push   $0xc0
c01027cf:	68 ce d1 10 c0       	push   $0xc010d1ce
c01027d4:	e8 24 dc ff ff       	call   c01003fd <__panic>
        }
        mm = current->mm;
c01027d9:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c01027de:	8b 40 18             	mov    0x18(%eax),%eax
c01027e1:	89 45 f4             	mov    %eax,-0xc(%ebp)
}

static inline uintptr_t
rcr2(void) {
    uintptr_t cr2;
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c01027e4:	0f 20 d0             	mov    %cr2,%eax
c01027e7:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return cr2;
c01027ea:	8b 55 f0             	mov    -0x10(%ebp),%edx
    }
    return do_pgfault(mm, tf->tf_err, rcr2());
c01027ed:	8b 45 08             	mov    0x8(%ebp),%eax
c01027f0:	8b 40 34             	mov    0x34(%eax),%eax
c01027f3:	83 ec 04             	sub    $0x4,%esp
c01027f6:	52                   	push   %edx
c01027f7:	50                   	push   %eax
c01027f8:	ff 75 f4             	pushl  -0xc(%ebp)
c01027fb:	e8 7f 1b 00 00       	call   c010437f <do_pgfault>
c0102800:	83 c4 10             	add    $0x10,%esp
}
c0102803:	c9                   	leave  
c0102804:	c3                   	ret    

c0102805 <trap_dispatch>:

static volatile int in_swap_tick_event = 0;
extern struct mm_struct *check_mm_struct;

static void
trap_dispatch(struct trapframe *tf) {
c0102805:	55                   	push   %ebp
c0102806:	89 e5                	mov    %esp,%ebp
c0102808:	57                   	push   %edi
c0102809:	56                   	push   %esi
c010280a:	53                   	push   %ebx
c010280b:	83 ec 1c             	sub    $0x1c,%esp
    char c;

    int ret=0;
c010280e:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

    switch (tf->tf_trapno) {
c0102815:	8b 45 08             	mov    0x8(%ebp),%eax
c0102818:	8b 40 30             	mov    0x30(%eax),%eax
c010281b:	83 f8 2f             	cmp    $0x2f,%eax
c010281e:	77 38                	ja     c0102858 <trap_dispatch+0x53>
c0102820:	83 f8 2e             	cmp    $0x2e,%eax
c0102823:	0f 83 69 02 00 00    	jae    c0102a92 <trap_dispatch+0x28d>
c0102829:	83 f8 20             	cmp    $0x20,%eax
c010282c:	0f 84 eb 00 00 00    	je     c010291d <trap_dispatch+0x118>
c0102832:	83 f8 20             	cmp    $0x20,%eax
c0102835:	77 0a                	ja     c0102841 <trap_dispatch+0x3c>
c0102837:	83 f8 0e             	cmp    $0xe,%eax
c010283a:	74 3e                	je     c010287a <trap_dispatch+0x75>
c010283c:	e9 06 02 00 00       	jmp    c0102a47 <trap_dispatch+0x242>
c0102841:	83 f8 21             	cmp    $0x21,%eax
c0102844:	0f 84 33 01 00 00    	je     c010297d <trap_dispatch+0x178>
c010284a:	83 f8 24             	cmp    $0x24,%eax
c010284d:	0f 84 03 01 00 00    	je     c0102956 <trap_dispatch+0x151>
c0102853:	e9 ef 01 00 00       	jmp    c0102a47 <trap_dispatch+0x242>
c0102858:	83 f8 79             	cmp    $0x79,%eax
c010285b:	0f 84 b8 01 00 00    	je     c0102a19 <trap_dispatch+0x214>
c0102861:	3d 80 00 00 00       	cmp    $0x80,%eax
c0102866:	0f 84 a7 00 00 00    	je     c0102913 <trap_dispatch+0x10e>
c010286c:	83 f8 78             	cmp    $0x78,%eax
c010286f:	0f 84 2f 01 00 00    	je     c01029a4 <trap_dispatch+0x19f>
c0102875:	e9 cd 01 00 00       	jmp    c0102a47 <trap_dispatch+0x242>
    case T_PGFLT:  //page fault
        if ((ret = pgfault_handler(tf)) != 0) {
c010287a:	83 ec 0c             	sub    $0xc,%esp
c010287d:	ff 75 08             	pushl  0x8(%ebp)
c0102880:	e8 c0 fe ff ff       	call   c0102745 <pgfault_handler>
c0102885:	83 c4 10             	add    $0x10,%esp
c0102888:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010288b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010288f:	0f 84 00 02 00 00    	je     c0102a95 <trap_dispatch+0x290>
            print_trapframe(tf);
c0102895:	83 ec 0c             	sub    $0xc,%esp
c0102898:	ff 75 08             	pushl  0x8(%ebp)
c010289b:	e8 93 fb ff ff       	call   c0102433 <print_trapframe>
c01028a0:	83 c4 10             	add    $0x10,%esp
            if (current == NULL) {
c01028a3:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c01028a8:	85 c0                	test   %eax,%eax
c01028aa:	75 17                	jne    c01028c3 <trap_dispatch+0xbe>
                panic("handle pgfault failed. ret=%d\n", ret);
c01028ac:	ff 75 e4             	pushl  -0x1c(%ebp)
c01028af:	68 0c d4 10 c0       	push   $0xc010d40c
c01028b4:	68 d5 00 00 00       	push   $0xd5
c01028b9:	68 ce d1 10 c0       	push   $0xc010d1ce
c01028be:	e8 3a db ff ff       	call   c01003fd <__panic>
            }
            else {
                if (trap_in_kernel(tf)) {
c01028c3:	83 ec 0c             	sub    $0xc,%esp
c01028c6:	ff 75 08             	pushl  0x8(%ebp)
c01028c9:	e8 4f fb ff ff       	call   c010241d <trap_in_kernel>
c01028ce:	83 c4 10             	add    $0x10,%esp
c01028d1:	85 c0                	test   %eax,%eax
c01028d3:	74 17                	je     c01028ec <trap_dispatch+0xe7>
                    panic("handle pgfault failed in kernel mode. ret=%d\n", ret);
c01028d5:	ff 75 e4             	pushl  -0x1c(%ebp)
c01028d8:	68 2c d4 10 c0       	push   $0xc010d42c
c01028dd:	68 d9 00 00 00       	push   $0xd9
c01028e2:	68 ce d1 10 c0       	push   $0xc010d1ce
c01028e7:	e8 11 db ff ff       	call   c01003fd <__panic>
                }
                cprintf("killed by kernel.\n");
c01028ec:	83 ec 0c             	sub    $0xc,%esp
c01028ef:	68 5a d4 10 c0       	push   $0xc010d45a
c01028f4:	e8 9e d9 ff ff       	call   c0100297 <cprintf>
c01028f9:	83 c4 10             	add    $0x10,%esp
                panic("handle user mode pgfault failed. ret=%d\n", ret); 
c01028fc:	ff 75 e4             	pushl  -0x1c(%ebp)
c01028ff:	68 70 d4 10 c0       	push   $0xc010d470
c0102904:	68 dc 00 00 00       	push   $0xdc
c0102909:	68 ce d1 10 c0       	push   $0xc010d1ce
c010290e:	e8 ea da ff ff       	call   c01003fd <__panic>
                do_exit(-E_KILLED);
            }
        }
        break;
    case T_SYSCALL:
        syscall();
c0102913:	e8 8f 97 00 00       	call   c010c0a7 <syscall>
        break;
c0102918:	e9 79 01 00 00       	jmp    c0102a96 <trap_dispatch+0x291>
        /* LAB7 2015010062 */
        /* you should upate you lab6 code
         * IMPORTANT FUNCTIONS:
	     * run_timer_list
         */
        ticks++;
c010291d:	a1 b8 70 1c c0       	mov    0xc01c70b8,%eax
c0102922:	83 c0 01             	add    $0x1,%eax
c0102925:	a3 b8 70 1c c0       	mov    %eax,0xc01c70b8
        assert(current != NULL);
c010292a:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010292f:	85 c0                	test   %eax,%eax
c0102931:	75 19                	jne    c010294c <trap_dispatch+0x147>
c0102933:	68 99 d4 10 c0       	push   $0xc010d499
c0102938:	68 df d3 10 c0       	push   $0xc010d3df
c010293d:	68 fe 00 00 00       	push   $0xfe
c0102942:	68 ce d1 10 c0       	push   $0xc010d1ce
c0102947:	e8 b1 da ff ff       	call   c01003fd <__panic>
        // sched_class_proc_tick(current);
        run_timer_list();
c010294c:	e8 73 91 00 00       	call   c010bac4 <run_timer_list>
        break;
c0102951:	e9 40 01 00 00       	jmp    c0102a96 <trap_dispatch+0x291>
    case IRQ_OFFSET + IRQ_COM1:
        c = cons_getc();
c0102956:	e8 25 f6 ff ff       	call   c0101f80 <cons_getc>
c010295b:	88 45 e3             	mov    %al,-0x1d(%ebp)
        cprintf("serial [%03d] %c\n", c, c);
c010295e:	0f be 55 e3          	movsbl -0x1d(%ebp),%edx
c0102962:	0f be 45 e3          	movsbl -0x1d(%ebp),%eax
c0102966:	83 ec 04             	sub    $0x4,%esp
c0102969:	52                   	push   %edx
c010296a:	50                   	push   %eax
c010296b:	68 a9 d4 10 c0       	push   $0xc010d4a9
c0102970:	e8 22 d9 ff ff       	call   c0100297 <cprintf>
c0102975:	83 c4 10             	add    $0x10,%esp
        break;
c0102978:	e9 19 01 00 00       	jmp    c0102a96 <trap_dispatch+0x291>
    case IRQ_OFFSET + IRQ_KBD:
        c = cons_getc();
c010297d:	e8 fe f5 ff ff       	call   c0101f80 <cons_getc>
c0102982:	88 45 e3             	mov    %al,-0x1d(%ebp)
        cprintf("kbd [%03d] %c\n", c, c);
c0102985:	0f be 55 e3          	movsbl -0x1d(%ebp),%edx
c0102989:	0f be 45 e3          	movsbl -0x1d(%ebp),%eax
c010298d:	83 ec 04             	sub    $0x4,%esp
c0102990:	52                   	push   %edx
c0102991:	50                   	push   %eax
c0102992:	68 bb d4 10 c0       	push   $0xc010d4bb
c0102997:	e8 fb d8 ff ff       	call   c0100297 <cprintf>
c010299c:	83 c4 10             	add    $0x10,%esp
        break;
c010299f:	e9 f2 00 00 00       	jmp    c0102a96 <trap_dispatch+0x291>
    //LAB1 CHALLENGE 1 : YOUR CODE you should modify below codes.
    case T_SWITCH_TOU:
        switchk2u = *tf;
c01029a4:	8b 55 08             	mov    0x8(%ebp),%edx
c01029a7:	b8 c0 70 1c c0       	mov    $0xc01c70c0,%eax
c01029ac:	89 d3                	mov    %edx,%ebx
c01029ae:	ba 4c 00 00 00       	mov    $0x4c,%edx
c01029b3:	8b 0b                	mov    (%ebx),%ecx
c01029b5:	89 08                	mov    %ecx,(%eax)
c01029b7:	8b 4c 13 fc          	mov    -0x4(%ebx,%edx,1),%ecx
c01029bb:	89 4c 10 fc          	mov    %ecx,-0x4(%eax,%edx,1)
c01029bf:	8d 78 04             	lea    0x4(%eax),%edi
c01029c2:	83 e7 fc             	and    $0xfffffffc,%edi
c01029c5:	29 f8                	sub    %edi,%eax
c01029c7:	29 c3                	sub    %eax,%ebx
c01029c9:	01 c2                	add    %eax,%edx
c01029cb:	83 e2 fc             	and    $0xfffffffc,%edx
c01029ce:	89 d0                	mov    %edx,%eax
c01029d0:	c1 e8 02             	shr    $0x2,%eax
c01029d3:	89 de                	mov    %ebx,%esi
c01029d5:	89 c1                	mov    %eax,%ecx
c01029d7:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
        switchk2u.tf_cs = USER_CS;
c01029d9:	66 c7 05 fc 70 1c c0 	movw   $0x1b,0xc01c70fc
c01029e0:	1b 00 
        switchk2u.tf_ds = USER_DS;
c01029e2:	66 c7 05 ec 70 1c c0 	movw   $0x23,0xc01c70ec
c01029e9:	23 00 
        switchk2u.tf_es = USER_DS;
c01029eb:	66 c7 05 e8 70 1c c0 	movw   $0x23,0xc01c70e8
c01029f2:	23 00 
        switchk2u.tf_ss = USER_DS;
c01029f4:	66 c7 05 08 71 1c c0 	movw   $0x23,0xc01c7108
c01029fb:	23 00 
        switchk2u.tf_eflags |= FL_IOPL_MASK;
c01029fd:	a1 00 71 1c c0       	mov    0xc01c7100,%eax
c0102a02:	80 cc 30             	or     $0x30,%ah
c0102a05:	a3 00 71 1c c0       	mov    %eax,0xc01c7100
        *((uint32_t *)tf - 1) = (uint32_t)&switchk2u;
c0102a0a:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a0d:	83 e8 04             	sub    $0x4,%eax
c0102a10:	ba c0 70 1c c0       	mov    $0xc01c70c0,%edx
c0102a15:	89 10                	mov    %edx,(%eax)
        break;
c0102a17:	eb 7d                	jmp    c0102a96 <trap_dispatch+0x291>
    case T_SWITCH_TOK:
        tf->tf_cs = KERNEL_CS;
c0102a19:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a1c:	66 c7 40 3c 08 00    	movw   $0x8,0x3c(%eax)
        tf->tf_ds = KERNEL_DS;
c0102a22:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a25:	66 c7 40 2c 10 00    	movw   $0x10,0x2c(%eax)
        tf->tf_es = KERNEL_DS;
c0102a2b:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a2e:	66 c7 40 28 10 00    	movw   $0x10,0x28(%eax)
        tf->tf_eflags &= ~FL_IOPL_MASK;
c0102a34:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a37:	8b 40 40             	mov    0x40(%eax),%eax
c0102a3a:	80 e4 cf             	and    $0xcf,%ah
c0102a3d:	89 c2                	mov    %eax,%edx
c0102a3f:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a42:	89 50 40             	mov    %edx,0x40(%eax)
        break;
c0102a45:	eb 4f                	jmp    c0102a96 <trap_dispatch+0x291>
    case IRQ_OFFSET + IRQ_IDE1:
    case IRQ_OFFSET + IRQ_IDE2:
        /* do nothing */
        break;
    default:
        print_trapframe(tf);
c0102a47:	83 ec 0c             	sub    $0xc,%esp
c0102a4a:	ff 75 08             	pushl  0x8(%ebp)
c0102a4d:	e8 e1 f9 ff ff       	call   c0102433 <print_trapframe>
c0102a52:	83 c4 10             	add    $0x10,%esp
        if (current != NULL) {
c0102a55:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c0102a5a:	85 c0                	test   %eax,%eax
c0102a5c:	74 1d                	je     c0102a7b <trap_dispatch+0x276>
            cprintf("unhandled trap.\n");
c0102a5e:	83 ec 0c             	sub    $0xc,%esp
c0102a61:	68 ca d4 10 c0       	push   $0xc010d4ca
c0102a66:	e8 2c d8 ff ff       	call   c0100297 <cprintf>
c0102a6b:	83 c4 10             	add    $0x10,%esp
            do_exit(-E_KILLED);
c0102a6e:	83 ec 0c             	sub    $0xc,%esp
c0102a71:	6a f7                	push   $0xfffffff7
c0102a73:	e8 75 7c 00 00       	call   c010a6ed <do_exit>
c0102a78:	83 c4 10             	add    $0x10,%esp
        }
        // in kernel, it must be a mistake
        panic("unexpected trap in kernel.\n");
c0102a7b:	83 ec 04             	sub    $0x4,%esp
c0102a7e:	68 db d4 10 c0       	push   $0xc010d4db
c0102a83:	68 26 01 00 00       	push   $0x126
c0102a88:	68 ce d1 10 c0       	push   $0xc010d1ce
c0102a8d:	e8 6b d9 ff ff       	call   c01003fd <__panic>
        break;
    // end of copy
    case IRQ_OFFSET + IRQ_IDE1:
    case IRQ_OFFSET + IRQ_IDE2:
        /* do nothing */
        break;
c0102a92:	90                   	nop
c0102a93:	eb 01                	jmp    c0102a96 <trap_dispatch+0x291>
                cprintf("killed by kernel.\n");
                panic("handle user mode pgfault failed. ret=%d\n", ret); 
                do_exit(-E_KILLED);
            }
        }
        break;
c0102a95:	90                   	nop
        }
        // in kernel, it must be a mistake
        panic("unexpected trap in kernel.\n");

    }
}
c0102a96:	90                   	nop
c0102a97:	8d 65 f4             	lea    -0xc(%ebp),%esp
c0102a9a:	5b                   	pop    %ebx
c0102a9b:	5e                   	pop    %esi
c0102a9c:	5f                   	pop    %edi
c0102a9d:	5d                   	pop    %ebp
c0102a9e:	c3                   	ret    

c0102a9f <trap>:
 * trap - handles or dispatches an exception/interrupt. if and when trap() returns,
 * the code in kern/trap/trapentry.S restores the old CPU state saved in the
 * trapframe and then uses the iret instruction to return from the exception.
 * */
void
trap(struct trapframe *tf) {
c0102a9f:	55                   	push   %ebp
c0102aa0:	89 e5                	mov    %esp,%ebp
c0102aa2:	83 ec 18             	sub    $0x18,%esp
    // dispatch based on what type of trap occurred
    // used for previous projects
    if (current == NULL) {
c0102aa5:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c0102aaa:	85 c0                	test   %eax,%eax
c0102aac:	75 10                	jne    c0102abe <trap+0x1f>
        trap_dispatch(tf);
c0102aae:	83 ec 0c             	sub    $0xc,%esp
c0102ab1:	ff 75 08             	pushl  0x8(%ebp)
c0102ab4:	e8 4c fd ff ff       	call   c0102805 <trap_dispatch>
c0102ab9:	83 c4 10             	add    $0x10,%esp
            if (current->need_resched) {
                schedule();
            }
        }
    }
}
c0102abc:	eb 73                	jmp    c0102b31 <trap+0x92>
    if (current == NULL) {
        trap_dispatch(tf);
    }
    else {
        // keep a trapframe chain in stack
        struct trapframe *otf = current->tf;
c0102abe:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c0102ac3:	8b 40 3c             	mov    0x3c(%eax),%eax
c0102ac6:	89 45 f4             	mov    %eax,-0xc(%ebp)
        current->tf = tf;
c0102ac9:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c0102ace:	8b 55 08             	mov    0x8(%ebp),%edx
c0102ad1:	89 50 3c             	mov    %edx,0x3c(%eax)
    
        bool in_kernel = trap_in_kernel(tf);
c0102ad4:	83 ec 0c             	sub    $0xc,%esp
c0102ad7:	ff 75 08             	pushl  0x8(%ebp)
c0102ada:	e8 3e f9 ff ff       	call   c010241d <trap_in_kernel>
c0102adf:	83 c4 10             	add    $0x10,%esp
c0102ae2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
        trap_dispatch(tf);
c0102ae5:	83 ec 0c             	sub    $0xc,%esp
c0102ae8:	ff 75 08             	pushl  0x8(%ebp)
c0102aeb:	e8 15 fd ff ff       	call   c0102805 <trap_dispatch>
c0102af0:	83 c4 10             	add    $0x10,%esp
    
        current->tf = otf;
c0102af3:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c0102af8:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0102afb:	89 50 3c             	mov    %edx,0x3c(%eax)
        if (!in_kernel) {
c0102afe:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0102b02:	75 2d                	jne    c0102b31 <trap+0x92>
            if (current->flags & PF_EXITING) {
c0102b04:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c0102b09:	8b 40 44             	mov    0x44(%eax),%eax
c0102b0c:	83 e0 01             	and    $0x1,%eax
c0102b0f:	85 c0                	test   %eax,%eax
c0102b11:	74 0d                	je     c0102b20 <trap+0x81>
                do_exit(-E_KILLED);
c0102b13:	83 ec 0c             	sub    $0xc,%esp
c0102b16:	6a f7                	push   $0xfffffff7
c0102b18:	e8 d0 7b 00 00       	call   c010a6ed <do_exit>
c0102b1d:	83 c4 10             	add    $0x10,%esp
            }
            if (current->need_resched) {
c0102b20:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c0102b25:	8b 40 10             	mov    0x10(%eax),%eax
c0102b28:	85 c0                	test   %eax,%eax
c0102b2a:	74 05                	je     c0102b31 <trap+0x92>
                schedule();
c0102b2c:	e8 0c 8d 00 00       	call   c010b83d <schedule>
            }
        }
    }
}
c0102b31:	90                   	nop
c0102b32:	c9                   	leave  
c0102b33:	c3                   	ret    

c0102b34 <vector0>:
# handler
.text
.globl __alltraps
.globl vector0
vector0:
  pushl $0
c0102b34:	6a 00                	push   $0x0
  pushl $0
c0102b36:	6a 00                	push   $0x0
  jmp __alltraps
c0102b38:	e9 69 0a 00 00       	jmp    c01035a6 <__alltraps>

c0102b3d <vector1>:
.globl vector1
vector1:
  pushl $0
c0102b3d:	6a 00                	push   $0x0
  pushl $1
c0102b3f:	6a 01                	push   $0x1
  jmp __alltraps
c0102b41:	e9 60 0a 00 00       	jmp    c01035a6 <__alltraps>

c0102b46 <vector2>:
.globl vector2
vector2:
  pushl $0
c0102b46:	6a 00                	push   $0x0
  pushl $2
c0102b48:	6a 02                	push   $0x2
  jmp __alltraps
c0102b4a:	e9 57 0a 00 00       	jmp    c01035a6 <__alltraps>

c0102b4f <vector3>:
.globl vector3
vector3:
  pushl $0
c0102b4f:	6a 00                	push   $0x0
  pushl $3
c0102b51:	6a 03                	push   $0x3
  jmp __alltraps
c0102b53:	e9 4e 0a 00 00       	jmp    c01035a6 <__alltraps>

c0102b58 <vector4>:
.globl vector4
vector4:
  pushl $0
c0102b58:	6a 00                	push   $0x0
  pushl $4
c0102b5a:	6a 04                	push   $0x4
  jmp __alltraps
c0102b5c:	e9 45 0a 00 00       	jmp    c01035a6 <__alltraps>

c0102b61 <vector5>:
.globl vector5
vector5:
  pushl $0
c0102b61:	6a 00                	push   $0x0
  pushl $5
c0102b63:	6a 05                	push   $0x5
  jmp __alltraps
c0102b65:	e9 3c 0a 00 00       	jmp    c01035a6 <__alltraps>

c0102b6a <vector6>:
.globl vector6
vector6:
  pushl $0
c0102b6a:	6a 00                	push   $0x0
  pushl $6
c0102b6c:	6a 06                	push   $0x6
  jmp __alltraps
c0102b6e:	e9 33 0a 00 00       	jmp    c01035a6 <__alltraps>

c0102b73 <vector7>:
.globl vector7
vector7:
  pushl $0
c0102b73:	6a 00                	push   $0x0
  pushl $7
c0102b75:	6a 07                	push   $0x7
  jmp __alltraps
c0102b77:	e9 2a 0a 00 00       	jmp    c01035a6 <__alltraps>

c0102b7c <vector8>:
.globl vector8
vector8:
  pushl $8
c0102b7c:	6a 08                	push   $0x8
  jmp __alltraps
c0102b7e:	e9 23 0a 00 00       	jmp    c01035a6 <__alltraps>

c0102b83 <vector9>:
.globl vector9
vector9:
  pushl $0
c0102b83:	6a 00                	push   $0x0
  pushl $9
c0102b85:	6a 09                	push   $0x9
  jmp __alltraps
c0102b87:	e9 1a 0a 00 00       	jmp    c01035a6 <__alltraps>

c0102b8c <vector10>:
.globl vector10
vector10:
  pushl $10
c0102b8c:	6a 0a                	push   $0xa
  jmp __alltraps
c0102b8e:	e9 13 0a 00 00       	jmp    c01035a6 <__alltraps>

c0102b93 <vector11>:
.globl vector11
vector11:
  pushl $11
c0102b93:	6a 0b                	push   $0xb
  jmp __alltraps
c0102b95:	e9 0c 0a 00 00       	jmp    c01035a6 <__alltraps>

c0102b9a <vector12>:
.globl vector12
vector12:
  pushl $12
c0102b9a:	6a 0c                	push   $0xc
  jmp __alltraps
c0102b9c:	e9 05 0a 00 00       	jmp    c01035a6 <__alltraps>

c0102ba1 <vector13>:
.globl vector13
vector13:
  pushl $13
c0102ba1:	6a 0d                	push   $0xd
  jmp __alltraps
c0102ba3:	e9 fe 09 00 00       	jmp    c01035a6 <__alltraps>

c0102ba8 <vector14>:
.globl vector14
vector14:
  pushl $14
c0102ba8:	6a 0e                	push   $0xe
  jmp __alltraps
c0102baa:	e9 f7 09 00 00       	jmp    c01035a6 <__alltraps>

c0102baf <vector15>:
.globl vector15
vector15:
  pushl $0
c0102baf:	6a 00                	push   $0x0
  pushl $15
c0102bb1:	6a 0f                	push   $0xf
  jmp __alltraps
c0102bb3:	e9 ee 09 00 00       	jmp    c01035a6 <__alltraps>

c0102bb8 <vector16>:
.globl vector16
vector16:
  pushl $0
c0102bb8:	6a 00                	push   $0x0
  pushl $16
c0102bba:	6a 10                	push   $0x10
  jmp __alltraps
c0102bbc:	e9 e5 09 00 00       	jmp    c01035a6 <__alltraps>

c0102bc1 <vector17>:
.globl vector17
vector17:
  pushl $17
c0102bc1:	6a 11                	push   $0x11
  jmp __alltraps
c0102bc3:	e9 de 09 00 00       	jmp    c01035a6 <__alltraps>

c0102bc8 <vector18>:
.globl vector18
vector18:
  pushl $0
c0102bc8:	6a 00                	push   $0x0
  pushl $18
c0102bca:	6a 12                	push   $0x12
  jmp __alltraps
c0102bcc:	e9 d5 09 00 00       	jmp    c01035a6 <__alltraps>

c0102bd1 <vector19>:
.globl vector19
vector19:
  pushl $0
c0102bd1:	6a 00                	push   $0x0
  pushl $19
c0102bd3:	6a 13                	push   $0x13
  jmp __alltraps
c0102bd5:	e9 cc 09 00 00       	jmp    c01035a6 <__alltraps>

c0102bda <vector20>:
.globl vector20
vector20:
  pushl $0
c0102bda:	6a 00                	push   $0x0
  pushl $20
c0102bdc:	6a 14                	push   $0x14
  jmp __alltraps
c0102bde:	e9 c3 09 00 00       	jmp    c01035a6 <__alltraps>

c0102be3 <vector21>:
.globl vector21
vector21:
  pushl $0
c0102be3:	6a 00                	push   $0x0
  pushl $21
c0102be5:	6a 15                	push   $0x15
  jmp __alltraps
c0102be7:	e9 ba 09 00 00       	jmp    c01035a6 <__alltraps>

c0102bec <vector22>:
.globl vector22
vector22:
  pushl $0
c0102bec:	6a 00                	push   $0x0
  pushl $22
c0102bee:	6a 16                	push   $0x16
  jmp __alltraps
c0102bf0:	e9 b1 09 00 00       	jmp    c01035a6 <__alltraps>

c0102bf5 <vector23>:
.globl vector23
vector23:
  pushl $0
c0102bf5:	6a 00                	push   $0x0
  pushl $23
c0102bf7:	6a 17                	push   $0x17
  jmp __alltraps
c0102bf9:	e9 a8 09 00 00       	jmp    c01035a6 <__alltraps>

c0102bfe <vector24>:
.globl vector24
vector24:
  pushl $0
c0102bfe:	6a 00                	push   $0x0
  pushl $24
c0102c00:	6a 18                	push   $0x18
  jmp __alltraps
c0102c02:	e9 9f 09 00 00       	jmp    c01035a6 <__alltraps>

c0102c07 <vector25>:
.globl vector25
vector25:
  pushl $0
c0102c07:	6a 00                	push   $0x0
  pushl $25
c0102c09:	6a 19                	push   $0x19
  jmp __alltraps
c0102c0b:	e9 96 09 00 00       	jmp    c01035a6 <__alltraps>

c0102c10 <vector26>:
.globl vector26
vector26:
  pushl $0
c0102c10:	6a 00                	push   $0x0
  pushl $26
c0102c12:	6a 1a                	push   $0x1a
  jmp __alltraps
c0102c14:	e9 8d 09 00 00       	jmp    c01035a6 <__alltraps>

c0102c19 <vector27>:
.globl vector27
vector27:
  pushl $0
c0102c19:	6a 00                	push   $0x0
  pushl $27
c0102c1b:	6a 1b                	push   $0x1b
  jmp __alltraps
c0102c1d:	e9 84 09 00 00       	jmp    c01035a6 <__alltraps>

c0102c22 <vector28>:
.globl vector28
vector28:
  pushl $0
c0102c22:	6a 00                	push   $0x0
  pushl $28
c0102c24:	6a 1c                	push   $0x1c
  jmp __alltraps
c0102c26:	e9 7b 09 00 00       	jmp    c01035a6 <__alltraps>

c0102c2b <vector29>:
.globl vector29
vector29:
  pushl $0
c0102c2b:	6a 00                	push   $0x0
  pushl $29
c0102c2d:	6a 1d                	push   $0x1d
  jmp __alltraps
c0102c2f:	e9 72 09 00 00       	jmp    c01035a6 <__alltraps>

c0102c34 <vector30>:
.globl vector30
vector30:
  pushl $0
c0102c34:	6a 00                	push   $0x0
  pushl $30
c0102c36:	6a 1e                	push   $0x1e
  jmp __alltraps
c0102c38:	e9 69 09 00 00       	jmp    c01035a6 <__alltraps>

c0102c3d <vector31>:
.globl vector31
vector31:
  pushl $0
c0102c3d:	6a 00                	push   $0x0
  pushl $31
c0102c3f:	6a 1f                	push   $0x1f
  jmp __alltraps
c0102c41:	e9 60 09 00 00       	jmp    c01035a6 <__alltraps>

c0102c46 <vector32>:
.globl vector32
vector32:
  pushl $0
c0102c46:	6a 00                	push   $0x0
  pushl $32
c0102c48:	6a 20                	push   $0x20
  jmp __alltraps
c0102c4a:	e9 57 09 00 00       	jmp    c01035a6 <__alltraps>

c0102c4f <vector33>:
.globl vector33
vector33:
  pushl $0
c0102c4f:	6a 00                	push   $0x0
  pushl $33
c0102c51:	6a 21                	push   $0x21
  jmp __alltraps
c0102c53:	e9 4e 09 00 00       	jmp    c01035a6 <__alltraps>

c0102c58 <vector34>:
.globl vector34
vector34:
  pushl $0
c0102c58:	6a 00                	push   $0x0
  pushl $34
c0102c5a:	6a 22                	push   $0x22
  jmp __alltraps
c0102c5c:	e9 45 09 00 00       	jmp    c01035a6 <__alltraps>

c0102c61 <vector35>:
.globl vector35
vector35:
  pushl $0
c0102c61:	6a 00                	push   $0x0
  pushl $35
c0102c63:	6a 23                	push   $0x23
  jmp __alltraps
c0102c65:	e9 3c 09 00 00       	jmp    c01035a6 <__alltraps>

c0102c6a <vector36>:
.globl vector36
vector36:
  pushl $0
c0102c6a:	6a 00                	push   $0x0
  pushl $36
c0102c6c:	6a 24                	push   $0x24
  jmp __alltraps
c0102c6e:	e9 33 09 00 00       	jmp    c01035a6 <__alltraps>

c0102c73 <vector37>:
.globl vector37
vector37:
  pushl $0
c0102c73:	6a 00                	push   $0x0
  pushl $37
c0102c75:	6a 25                	push   $0x25
  jmp __alltraps
c0102c77:	e9 2a 09 00 00       	jmp    c01035a6 <__alltraps>

c0102c7c <vector38>:
.globl vector38
vector38:
  pushl $0
c0102c7c:	6a 00                	push   $0x0
  pushl $38
c0102c7e:	6a 26                	push   $0x26
  jmp __alltraps
c0102c80:	e9 21 09 00 00       	jmp    c01035a6 <__alltraps>

c0102c85 <vector39>:
.globl vector39
vector39:
  pushl $0
c0102c85:	6a 00                	push   $0x0
  pushl $39
c0102c87:	6a 27                	push   $0x27
  jmp __alltraps
c0102c89:	e9 18 09 00 00       	jmp    c01035a6 <__alltraps>

c0102c8e <vector40>:
.globl vector40
vector40:
  pushl $0
c0102c8e:	6a 00                	push   $0x0
  pushl $40
c0102c90:	6a 28                	push   $0x28
  jmp __alltraps
c0102c92:	e9 0f 09 00 00       	jmp    c01035a6 <__alltraps>

c0102c97 <vector41>:
.globl vector41
vector41:
  pushl $0
c0102c97:	6a 00                	push   $0x0
  pushl $41
c0102c99:	6a 29                	push   $0x29
  jmp __alltraps
c0102c9b:	e9 06 09 00 00       	jmp    c01035a6 <__alltraps>

c0102ca0 <vector42>:
.globl vector42
vector42:
  pushl $0
c0102ca0:	6a 00                	push   $0x0
  pushl $42
c0102ca2:	6a 2a                	push   $0x2a
  jmp __alltraps
c0102ca4:	e9 fd 08 00 00       	jmp    c01035a6 <__alltraps>

c0102ca9 <vector43>:
.globl vector43
vector43:
  pushl $0
c0102ca9:	6a 00                	push   $0x0
  pushl $43
c0102cab:	6a 2b                	push   $0x2b
  jmp __alltraps
c0102cad:	e9 f4 08 00 00       	jmp    c01035a6 <__alltraps>

c0102cb2 <vector44>:
.globl vector44
vector44:
  pushl $0
c0102cb2:	6a 00                	push   $0x0
  pushl $44
c0102cb4:	6a 2c                	push   $0x2c
  jmp __alltraps
c0102cb6:	e9 eb 08 00 00       	jmp    c01035a6 <__alltraps>

c0102cbb <vector45>:
.globl vector45
vector45:
  pushl $0
c0102cbb:	6a 00                	push   $0x0
  pushl $45
c0102cbd:	6a 2d                	push   $0x2d
  jmp __alltraps
c0102cbf:	e9 e2 08 00 00       	jmp    c01035a6 <__alltraps>

c0102cc4 <vector46>:
.globl vector46
vector46:
  pushl $0
c0102cc4:	6a 00                	push   $0x0
  pushl $46
c0102cc6:	6a 2e                	push   $0x2e
  jmp __alltraps
c0102cc8:	e9 d9 08 00 00       	jmp    c01035a6 <__alltraps>

c0102ccd <vector47>:
.globl vector47
vector47:
  pushl $0
c0102ccd:	6a 00                	push   $0x0
  pushl $47
c0102ccf:	6a 2f                	push   $0x2f
  jmp __alltraps
c0102cd1:	e9 d0 08 00 00       	jmp    c01035a6 <__alltraps>

c0102cd6 <vector48>:
.globl vector48
vector48:
  pushl $0
c0102cd6:	6a 00                	push   $0x0
  pushl $48
c0102cd8:	6a 30                	push   $0x30
  jmp __alltraps
c0102cda:	e9 c7 08 00 00       	jmp    c01035a6 <__alltraps>

c0102cdf <vector49>:
.globl vector49
vector49:
  pushl $0
c0102cdf:	6a 00                	push   $0x0
  pushl $49
c0102ce1:	6a 31                	push   $0x31
  jmp __alltraps
c0102ce3:	e9 be 08 00 00       	jmp    c01035a6 <__alltraps>

c0102ce8 <vector50>:
.globl vector50
vector50:
  pushl $0
c0102ce8:	6a 00                	push   $0x0
  pushl $50
c0102cea:	6a 32                	push   $0x32
  jmp __alltraps
c0102cec:	e9 b5 08 00 00       	jmp    c01035a6 <__alltraps>

c0102cf1 <vector51>:
.globl vector51
vector51:
  pushl $0
c0102cf1:	6a 00                	push   $0x0
  pushl $51
c0102cf3:	6a 33                	push   $0x33
  jmp __alltraps
c0102cf5:	e9 ac 08 00 00       	jmp    c01035a6 <__alltraps>

c0102cfa <vector52>:
.globl vector52
vector52:
  pushl $0
c0102cfa:	6a 00                	push   $0x0
  pushl $52
c0102cfc:	6a 34                	push   $0x34
  jmp __alltraps
c0102cfe:	e9 a3 08 00 00       	jmp    c01035a6 <__alltraps>

c0102d03 <vector53>:
.globl vector53
vector53:
  pushl $0
c0102d03:	6a 00                	push   $0x0
  pushl $53
c0102d05:	6a 35                	push   $0x35
  jmp __alltraps
c0102d07:	e9 9a 08 00 00       	jmp    c01035a6 <__alltraps>

c0102d0c <vector54>:
.globl vector54
vector54:
  pushl $0
c0102d0c:	6a 00                	push   $0x0
  pushl $54
c0102d0e:	6a 36                	push   $0x36
  jmp __alltraps
c0102d10:	e9 91 08 00 00       	jmp    c01035a6 <__alltraps>

c0102d15 <vector55>:
.globl vector55
vector55:
  pushl $0
c0102d15:	6a 00                	push   $0x0
  pushl $55
c0102d17:	6a 37                	push   $0x37
  jmp __alltraps
c0102d19:	e9 88 08 00 00       	jmp    c01035a6 <__alltraps>

c0102d1e <vector56>:
.globl vector56
vector56:
  pushl $0
c0102d1e:	6a 00                	push   $0x0
  pushl $56
c0102d20:	6a 38                	push   $0x38
  jmp __alltraps
c0102d22:	e9 7f 08 00 00       	jmp    c01035a6 <__alltraps>

c0102d27 <vector57>:
.globl vector57
vector57:
  pushl $0
c0102d27:	6a 00                	push   $0x0
  pushl $57
c0102d29:	6a 39                	push   $0x39
  jmp __alltraps
c0102d2b:	e9 76 08 00 00       	jmp    c01035a6 <__alltraps>

c0102d30 <vector58>:
.globl vector58
vector58:
  pushl $0
c0102d30:	6a 00                	push   $0x0
  pushl $58
c0102d32:	6a 3a                	push   $0x3a
  jmp __alltraps
c0102d34:	e9 6d 08 00 00       	jmp    c01035a6 <__alltraps>

c0102d39 <vector59>:
.globl vector59
vector59:
  pushl $0
c0102d39:	6a 00                	push   $0x0
  pushl $59
c0102d3b:	6a 3b                	push   $0x3b
  jmp __alltraps
c0102d3d:	e9 64 08 00 00       	jmp    c01035a6 <__alltraps>

c0102d42 <vector60>:
.globl vector60
vector60:
  pushl $0
c0102d42:	6a 00                	push   $0x0
  pushl $60
c0102d44:	6a 3c                	push   $0x3c
  jmp __alltraps
c0102d46:	e9 5b 08 00 00       	jmp    c01035a6 <__alltraps>

c0102d4b <vector61>:
.globl vector61
vector61:
  pushl $0
c0102d4b:	6a 00                	push   $0x0
  pushl $61
c0102d4d:	6a 3d                	push   $0x3d
  jmp __alltraps
c0102d4f:	e9 52 08 00 00       	jmp    c01035a6 <__alltraps>

c0102d54 <vector62>:
.globl vector62
vector62:
  pushl $0
c0102d54:	6a 00                	push   $0x0
  pushl $62
c0102d56:	6a 3e                	push   $0x3e
  jmp __alltraps
c0102d58:	e9 49 08 00 00       	jmp    c01035a6 <__alltraps>

c0102d5d <vector63>:
.globl vector63
vector63:
  pushl $0
c0102d5d:	6a 00                	push   $0x0
  pushl $63
c0102d5f:	6a 3f                	push   $0x3f
  jmp __alltraps
c0102d61:	e9 40 08 00 00       	jmp    c01035a6 <__alltraps>

c0102d66 <vector64>:
.globl vector64
vector64:
  pushl $0
c0102d66:	6a 00                	push   $0x0
  pushl $64
c0102d68:	6a 40                	push   $0x40
  jmp __alltraps
c0102d6a:	e9 37 08 00 00       	jmp    c01035a6 <__alltraps>

c0102d6f <vector65>:
.globl vector65
vector65:
  pushl $0
c0102d6f:	6a 00                	push   $0x0
  pushl $65
c0102d71:	6a 41                	push   $0x41
  jmp __alltraps
c0102d73:	e9 2e 08 00 00       	jmp    c01035a6 <__alltraps>

c0102d78 <vector66>:
.globl vector66
vector66:
  pushl $0
c0102d78:	6a 00                	push   $0x0
  pushl $66
c0102d7a:	6a 42                	push   $0x42
  jmp __alltraps
c0102d7c:	e9 25 08 00 00       	jmp    c01035a6 <__alltraps>

c0102d81 <vector67>:
.globl vector67
vector67:
  pushl $0
c0102d81:	6a 00                	push   $0x0
  pushl $67
c0102d83:	6a 43                	push   $0x43
  jmp __alltraps
c0102d85:	e9 1c 08 00 00       	jmp    c01035a6 <__alltraps>

c0102d8a <vector68>:
.globl vector68
vector68:
  pushl $0
c0102d8a:	6a 00                	push   $0x0
  pushl $68
c0102d8c:	6a 44                	push   $0x44
  jmp __alltraps
c0102d8e:	e9 13 08 00 00       	jmp    c01035a6 <__alltraps>

c0102d93 <vector69>:
.globl vector69
vector69:
  pushl $0
c0102d93:	6a 00                	push   $0x0
  pushl $69
c0102d95:	6a 45                	push   $0x45
  jmp __alltraps
c0102d97:	e9 0a 08 00 00       	jmp    c01035a6 <__alltraps>

c0102d9c <vector70>:
.globl vector70
vector70:
  pushl $0
c0102d9c:	6a 00                	push   $0x0
  pushl $70
c0102d9e:	6a 46                	push   $0x46
  jmp __alltraps
c0102da0:	e9 01 08 00 00       	jmp    c01035a6 <__alltraps>

c0102da5 <vector71>:
.globl vector71
vector71:
  pushl $0
c0102da5:	6a 00                	push   $0x0
  pushl $71
c0102da7:	6a 47                	push   $0x47
  jmp __alltraps
c0102da9:	e9 f8 07 00 00       	jmp    c01035a6 <__alltraps>

c0102dae <vector72>:
.globl vector72
vector72:
  pushl $0
c0102dae:	6a 00                	push   $0x0
  pushl $72
c0102db0:	6a 48                	push   $0x48
  jmp __alltraps
c0102db2:	e9 ef 07 00 00       	jmp    c01035a6 <__alltraps>

c0102db7 <vector73>:
.globl vector73
vector73:
  pushl $0
c0102db7:	6a 00                	push   $0x0
  pushl $73
c0102db9:	6a 49                	push   $0x49
  jmp __alltraps
c0102dbb:	e9 e6 07 00 00       	jmp    c01035a6 <__alltraps>

c0102dc0 <vector74>:
.globl vector74
vector74:
  pushl $0
c0102dc0:	6a 00                	push   $0x0
  pushl $74
c0102dc2:	6a 4a                	push   $0x4a
  jmp __alltraps
c0102dc4:	e9 dd 07 00 00       	jmp    c01035a6 <__alltraps>

c0102dc9 <vector75>:
.globl vector75
vector75:
  pushl $0
c0102dc9:	6a 00                	push   $0x0
  pushl $75
c0102dcb:	6a 4b                	push   $0x4b
  jmp __alltraps
c0102dcd:	e9 d4 07 00 00       	jmp    c01035a6 <__alltraps>

c0102dd2 <vector76>:
.globl vector76
vector76:
  pushl $0
c0102dd2:	6a 00                	push   $0x0
  pushl $76
c0102dd4:	6a 4c                	push   $0x4c
  jmp __alltraps
c0102dd6:	e9 cb 07 00 00       	jmp    c01035a6 <__alltraps>

c0102ddb <vector77>:
.globl vector77
vector77:
  pushl $0
c0102ddb:	6a 00                	push   $0x0
  pushl $77
c0102ddd:	6a 4d                	push   $0x4d
  jmp __alltraps
c0102ddf:	e9 c2 07 00 00       	jmp    c01035a6 <__alltraps>

c0102de4 <vector78>:
.globl vector78
vector78:
  pushl $0
c0102de4:	6a 00                	push   $0x0
  pushl $78
c0102de6:	6a 4e                	push   $0x4e
  jmp __alltraps
c0102de8:	e9 b9 07 00 00       	jmp    c01035a6 <__alltraps>

c0102ded <vector79>:
.globl vector79
vector79:
  pushl $0
c0102ded:	6a 00                	push   $0x0
  pushl $79
c0102def:	6a 4f                	push   $0x4f
  jmp __alltraps
c0102df1:	e9 b0 07 00 00       	jmp    c01035a6 <__alltraps>

c0102df6 <vector80>:
.globl vector80
vector80:
  pushl $0
c0102df6:	6a 00                	push   $0x0
  pushl $80
c0102df8:	6a 50                	push   $0x50
  jmp __alltraps
c0102dfa:	e9 a7 07 00 00       	jmp    c01035a6 <__alltraps>

c0102dff <vector81>:
.globl vector81
vector81:
  pushl $0
c0102dff:	6a 00                	push   $0x0
  pushl $81
c0102e01:	6a 51                	push   $0x51
  jmp __alltraps
c0102e03:	e9 9e 07 00 00       	jmp    c01035a6 <__alltraps>

c0102e08 <vector82>:
.globl vector82
vector82:
  pushl $0
c0102e08:	6a 00                	push   $0x0
  pushl $82
c0102e0a:	6a 52                	push   $0x52
  jmp __alltraps
c0102e0c:	e9 95 07 00 00       	jmp    c01035a6 <__alltraps>

c0102e11 <vector83>:
.globl vector83
vector83:
  pushl $0
c0102e11:	6a 00                	push   $0x0
  pushl $83
c0102e13:	6a 53                	push   $0x53
  jmp __alltraps
c0102e15:	e9 8c 07 00 00       	jmp    c01035a6 <__alltraps>

c0102e1a <vector84>:
.globl vector84
vector84:
  pushl $0
c0102e1a:	6a 00                	push   $0x0
  pushl $84
c0102e1c:	6a 54                	push   $0x54
  jmp __alltraps
c0102e1e:	e9 83 07 00 00       	jmp    c01035a6 <__alltraps>

c0102e23 <vector85>:
.globl vector85
vector85:
  pushl $0
c0102e23:	6a 00                	push   $0x0
  pushl $85
c0102e25:	6a 55                	push   $0x55
  jmp __alltraps
c0102e27:	e9 7a 07 00 00       	jmp    c01035a6 <__alltraps>

c0102e2c <vector86>:
.globl vector86
vector86:
  pushl $0
c0102e2c:	6a 00                	push   $0x0
  pushl $86
c0102e2e:	6a 56                	push   $0x56
  jmp __alltraps
c0102e30:	e9 71 07 00 00       	jmp    c01035a6 <__alltraps>

c0102e35 <vector87>:
.globl vector87
vector87:
  pushl $0
c0102e35:	6a 00                	push   $0x0
  pushl $87
c0102e37:	6a 57                	push   $0x57
  jmp __alltraps
c0102e39:	e9 68 07 00 00       	jmp    c01035a6 <__alltraps>

c0102e3e <vector88>:
.globl vector88
vector88:
  pushl $0
c0102e3e:	6a 00                	push   $0x0
  pushl $88
c0102e40:	6a 58                	push   $0x58
  jmp __alltraps
c0102e42:	e9 5f 07 00 00       	jmp    c01035a6 <__alltraps>

c0102e47 <vector89>:
.globl vector89
vector89:
  pushl $0
c0102e47:	6a 00                	push   $0x0
  pushl $89
c0102e49:	6a 59                	push   $0x59
  jmp __alltraps
c0102e4b:	e9 56 07 00 00       	jmp    c01035a6 <__alltraps>

c0102e50 <vector90>:
.globl vector90
vector90:
  pushl $0
c0102e50:	6a 00                	push   $0x0
  pushl $90
c0102e52:	6a 5a                	push   $0x5a
  jmp __alltraps
c0102e54:	e9 4d 07 00 00       	jmp    c01035a6 <__alltraps>

c0102e59 <vector91>:
.globl vector91
vector91:
  pushl $0
c0102e59:	6a 00                	push   $0x0
  pushl $91
c0102e5b:	6a 5b                	push   $0x5b
  jmp __alltraps
c0102e5d:	e9 44 07 00 00       	jmp    c01035a6 <__alltraps>

c0102e62 <vector92>:
.globl vector92
vector92:
  pushl $0
c0102e62:	6a 00                	push   $0x0
  pushl $92
c0102e64:	6a 5c                	push   $0x5c
  jmp __alltraps
c0102e66:	e9 3b 07 00 00       	jmp    c01035a6 <__alltraps>

c0102e6b <vector93>:
.globl vector93
vector93:
  pushl $0
c0102e6b:	6a 00                	push   $0x0
  pushl $93
c0102e6d:	6a 5d                	push   $0x5d
  jmp __alltraps
c0102e6f:	e9 32 07 00 00       	jmp    c01035a6 <__alltraps>

c0102e74 <vector94>:
.globl vector94
vector94:
  pushl $0
c0102e74:	6a 00                	push   $0x0
  pushl $94
c0102e76:	6a 5e                	push   $0x5e
  jmp __alltraps
c0102e78:	e9 29 07 00 00       	jmp    c01035a6 <__alltraps>

c0102e7d <vector95>:
.globl vector95
vector95:
  pushl $0
c0102e7d:	6a 00                	push   $0x0
  pushl $95
c0102e7f:	6a 5f                	push   $0x5f
  jmp __alltraps
c0102e81:	e9 20 07 00 00       	jmp    c01035a6 <__alltraps>

c0102e86 <vector96>:
.globl vector96
vector96:
  pushl $0
c0102e86:	6a 00                	push   $0x0
  pushl $96
c0102e88:	6a 60                	push   $0x60
  jmp __alltraps
c0102e8a:	e9 17 07 00 00       	jmp    c01035a6 <__alltraps>

c0102e8f <vector97>:
.globl vector97
vector97:
  pushl $0
c0102e8f:	6a 00                	push   $0x0
  pushl $97
c0102e91:	6a 61                	push   $0x61
  jmp __alltraps
c0102e93:	e9 0e 07 00 00       	jmp    c01035a6 <__alltraps>

c0102e98 <vector98>:
.globl vector98
vector98:
  pushl $0
c0102e98:	6a 00                	push   $0x0
  pushl $98
c0102e9a:	6a 62                	push   $0x62
  jmp __alltraps
c0102e9c:	e9 05 07 00 00       	jmp    c01035a6 <__alltraps>

c0102ea1 <vector99>:
.globl vector99
vector99:
  pushl $0
c0102ea1:	6a 00                	push   $0x0
  pushl $99
c0102ea3:	6a 63                	push   $0x63
  jmp __alltraps
c0102ea5:	e9 fc 06 00 00       	jmp    c01035a6 <__alltraps>

c0102eaa <vector100>:
.globl vector100
vector100:
  pushl $0
c0102eaa:	6a 00                	push   $0x0
  pushl $100
c0102eac:	6a 64                	push   $0x64
  jmp __alltraps
c0102eae:	e9 f3 06 00 00       	jmp    c01035a6 <__alltraps>

c0102eb3 <vector101>:
.globl vector101
vector101:
  pushl $0
c0102eb3:	6a 00                	push   $0x0
  pushl $101
c0102eb5:	6a 65                	push   $0x65
  jmp __alltraps
c0102eb7:	e9 ea 06 00 00       	jmp    c01035a6 <__alltraps>

c0102ebc <vector102>:
.globl vector102
vector102:
  pushl $0
c0102ebc:	6a 00                	push   $0x0
  pushl $102
c0102ebe:	6a 66                	push   $0x66
  jmp __alltraps
c0102ec0:	e9 e1 06 00 00       	jmp    c01035a6 <__alltraps>

c0102ec5 <vector103>:
.globl vector103
vector103:
  pushl $0
c0102ec5:	6a 00                	push   $0x0
  pushl $103
c0102ec7:	6a 67                	push   $0x67
  jmp __alltraps
c0102ec9:	e9 d8 06 00 00       	jmp    c01035a6 <__alltraps>

c0102ece <vector104>:
.globl vector104
vector104:
  pushl $0
c0102ece:	6a 00                	push   $0x0
  pushl $104
c0102ed0:	6a 68                	push   $0x68
  jmp __alltraps
c0102ed2:	e9 cf 06 00 00       	jmp    c01035a6 <__alltraps>

c0102ed7 <vector105>:
.globl vector105
vector105:
  pushl $0
c0102ed7:	6a 00                	push   $0x0
  pushl $105
c0102ed9:	6a 69                	push   $0x69
  jmp __alltraps
c0102edb:	e9 c6 06 00 00       	jmp    c01035a6 <__alltraps>

c0102ee0 <vector106>:
.globl vector106
vector106:
  pushl $0
c0102ee0:	6a 00                	push   $0x0
  pushl $106
c0102ee2:	6a 6a                	push   $0x6a
  jmp __alltraps
c0102ee4:	e9 bd 06 00 00       	jmp    c01035a6 <__alltraps>

c0102ee9 <vector107>:
.globl vector107
vector107:
  pushl $0
c0102ee9:	6a 00                	push   $0x0
  pushl $107
c0102eeb:	6a 6b                	push   $0x6b
  jmp __alltraps
c0102eed:	e9 b4 06 00 00       	jmp    c01035a6 <__alltraps>

c0102ef2 <vector108>:
.globl vector108
vector108:
  pushl $0
c0102ef2:	6a 00                	push   $0x0
  pushl $108
c0102ef4:	6a 6c                	push   $0x6c
  jmp __alltraps
c0102ef6:	e9 ab 06 00 00       	jmp    c01035a6 <__alltraps>

c0102efb <vector109>:
.globl vector109
vector109:
  pushl $0
c0102efb:	6a 00                	push   $0x0
  pushl $109
c0102efd:	6a 6d                	push   $0x6d
  jmp __alltraps
c0102eff:	e9 a2 06 00 00       	jmp    c01035a6 <__alltraps>

c0102f04 <vector110>:
.globl vector110
vector110:
  pushl $0
c0102f04:	6a 00                	push   $0x0
  pushl $110
c0102f06:	6a 6e                	push   $0x6e
  jmp __alltraps
c0102f08:	e9 99 06 00 00       	jmp    c01035a6 <__alltraps>

c0102f0d <vector111>:
.globl vector111
vector111:
  pushl $0
c0102f0d:	6a 00                	push   $0x0
  pushl $111
c0102f0f:	6a 6f                	push   $0x6f
  jmp __alltraps
c0102f11:	e9 90 06 00 00       	jmp    c01035a6 <__alltraps>

c0102f16 <vector112>:
.globl vector112
vector112:
  pushl $0
c0102f16:	6a 00                	push   $0x0
  pushl $112
c0102f18:	6a 70                	push   $0x70
  jmp __alltraps
c0102f1a:	e9 87 06 00 00       	jmp    c01035a6 <__alltraps>

c0102f1f <vector113>:
.globl vector113
vector113:
  pushl $0
c0102f1f:	6a 00                	push   $0x0
  pushl $113
c0102f21:	6a 71                	push   $0x71
  jmp __alltraps
c0102f23:	e9 7e 06 00 00       	jmp    c01035a6 <__alltraps>

c0102f28 <vector114>:
.globl vector114
vector114:
  pushl $0
c0102f28:	6a 00                	push   $0x0
  pushl $114
c0102f2a:	6a 72                	push   $0x72
  jmp __alltraps
c0102f2c:	e9 75 06 00 00       	jmp    c01035a6 <__alltraps>

c0102f31 <vector115>:
.globl vector115
vector115:
  pushl $0
c0102f31:	6a 00                	push   $0x0
  pushl $115
c0102f33:	6a 73                	push   $0x73
  jmp __alltraps
c0102f35:	e9 6c 06 00 00       	jmp    c01035a6 <__alltraps>

c0102f3a <vector116>:
.globl vector116
vector116:
  pushl $0
c0102f3a:	6a 00                	push   $0x0
  pushl $116
c0102f3c:	6a 74                	push   $0x74
  jmp __alltraps
c0102f3e:	e9 63 06 00 00       	jmp    c01035a6 <__alltraps>

c0102f43 <vector117>:
.globl vector117
vector117:
  pushl $0
c0102f43:	6a 00                	push   $0x0
  pushl $117
c0102f45:	6a 75                	push   $0x75
  jmp __alltraps
c0102f47:	e9 5a 06 00 00       	jmp    c01035a6 <__alltraps>

c0102f4c <vector118>:
.globl vector118
vector118:
  pushl $0
c0102f4c:	6a 00                	push   $0x0
  pushl $118
c0102f4e:	6a 76                	push   $0x76
  jmp __alltraps
c0102f50:	e9 51 06 00 00       	jmp    c01035a6 <__alltraps>

c0102f55 <vector119>:
.globl vector119
vector119:
  pushl $0
c0102f55:	6a 00                	push   $0x0
  pushl $119
c0102f57:	6a 77                	push   $0x77
  jmp __alltraps
c0102f59:	e9 48 06 00 00       	jmp    c01035a6 <__alltraps>

c0102f5e <vector120>:
.globl vector120
vector120:
  pushl $0
c0102f5e:	6a 00                	push   $0x0
  pushl $120
c0102f60:	6a 78                	push   $0x78
  jmp __alltraps
c0102f62:	e9 3f 06 00 00       	jmp    c01035a6 <__alltraps>

c0102f67 <vector121>:
.globl vector121
vector121:
  pushl $0
c0102f67:	6a 00                	push   $0x0
  pushl $121
c0102f69:	6a 79                	push   $0x79
  jmp __alltraps
c0102f6b:	e9 36 06 00 00       	jmp    c01035a6 <__alltraps>

c0102f70 <vector122>:
.globl vector122
vector122:
  pushl $0
c0102f70:	6a 00                	push   $0x0
  pushl $122
c0102f72:	6a 7a                	push   $0x7a
  jmp __alltraps
c0102f74:	e9 2d 06 00 00       	jmp    c01035a6 <__alltraps>

c0102f79 <vector123>:
.globl vector123
vector123:
  pushl $0
c0102f79:	6a 00                	push   $0x0
  pushl $123
c0102f7b:	6a 7b                	push   $0x7b
  jmp __alltraps
c0102f7d:	e9 24 06 00 00       	jmp    c01035a6 <__alltraps>

c0102f82 <vector124>:
.globl vector124
vector124:
  pushl $0
c0102f82:	6a 00                	push   $0x0
  pushl $124
c0102f84:	6a 7c                	push   $0x7c
  jmp __alltraps
c0102f86:	e9 1b 06 00 00       	jmp    c01035a6 <__alltraps>

c0102f8b <vector125>:
.globl vector125
vector125:
  pushl $0
c0102f8b:	6a 00                	push   $0x0
  pushl $125
c0102f8d:	6a 7d                	push   $0x7d
  jmp __alltraps
c0102f8f:	e9 12 06 00 00       	jmp    c01035a6 <__alltraps>

c0102f94 <vector126>:
.globl vector126
vector126:
  pushl $0
c0102f94:	6a 00                	push   $0x0
  pushl $126
c0102f96:	6a 7e                	push   $0x7e
  jmp __alltraps
c0102f98:	e9 09 06 00 00       	jmp    c01035a6 <__alltraps>

c0102f9d <vector127>:
.globl vector127
vector127:
  pushl $0
c0102f9d:	6a 00                	push   $0x0
  pushl $127
c0102f9f:	6a 7f                	push   $0x7f
  jmp __alltraps
c0102fa1:	e9 00 06 00 00       	jmp    c01035a6 <__alltraps>

c0102fa6 <vector128>:
.globl vector128
vector128:
  pushl $0
c0102fa6:	6a 00                	push   $0x0
  pushl $128
c0102fa8:	68 80 00 00 00       	push   $0x80
  jmp __alltraps
c0102fad:	e9 f4 05 00 00       	jmp    c01035a6 <__alltraps>

c0102fb2 <vector129>:
.globl vector129
vector129:
  pushl $0
c0102fb2:	6a 00                	push   $0x0
  pushl $129
c0102fb4:	68 81 00 00 00       	push   $0x81
  jmp __alltraps
c0102fb9:	e9 e8 05 00 00       	jmp    c01035a6 <__alltraps>

c0102fbe <vector130>:
.globl vector130
vector130:
  pushl $0
c0102fbe:	6a 00                	push   $0x0
  pushl $130
c0102fc0:	68 82 00 00 00       	push   $0x82
  jmp __alltraps
c0102fc5:	e9 dc 05 00 00       	jmp    c01035a6 <__alltraps>

c0102fca <vector131>:
.globl vector131
vector131:
  pushl $0
c0102fca:	6a 00                	push   $0x0
  pushl $131
c0102fcc:	68 83 00 00 00       	push   $0x83
  jmp __alltraps
c0102fd1:	e9 d0 05 00 00       	jmp    c01035a6 <__alltraps>

c0102fd6 <vector132>:
.globl vector132
vector132:
  pushl $0
c0102fd6:	6a 00                	push   $0x0
  pushl $132
c0102fd8:	68 84 00 00 00       	push   $0x84
  jmp __alltraps
c0102fdd:	e9 c4 05 00 00       	jmp    c01035a6 <__alltraps>

c0102fe2 <vector133>:
.globl vector133
vector133:
  pushl $0
c0102fe2:	6a 00                	push   $0x0
  pushl $133
c0102fe4:	68 85 00 00 00       	push   $0x85
  jmp __alltraps
c0102fe9:	e9 b8 05 00 00       	jmp    c01035a6 <__alltraps>

c0102fee <vector134>:
.globl vector134
vector134:
  pushl $0
c0102fee:	6a 00                	push   $0x0
  pushl $134
c0102ff0:	68 86 00 00 00       	push   $0x86
  jmp __alltraps
c0102ff5:	e9 ac 05 00 00       	jmp    c01035a6 <__alltraps>

c0102ffa <vector135>:
.globl vector135
vector135:
  pushl $0
c0102ffa:	6a 00                	push   $0x0
  pushl $135
c0102ffc:	68 87 00 00 00       	push   $0x87
  jmp __alltraps
c0103001:	e9 a0 05 00 00       	jmp    c01035a6 <__alltraps>

c0103006 <vector136>:
.globl vector136
vector136:
  pushl $0
c0103006:	6a 00                	push   $0x0
  pushl $136
c0103008:	68 88 00 00 00       	push   $0x88
  jmp __alltraps
c010300d:	e9 94 05 00 00       	jmp    c01035a6 <__alltraps>

c0103012 <vector137>:
.globl vector137
vector137:
  pushl $0
c0103012:	6a 00                	push   $0x0
  pushl $137
c0103014:	68 89 00 00 00       	push   $0x89
  jmp __alltraps
c0103019:	e9 88 05 00 00       	jmp    c01035a6 <__alltraps>

c010301e <vector138>:
.globl vector138
vector138:
  pushl $0
c010301e:	6a 00                	push   $0x0
  pushl $138
c0103020:	68 8a 00 00 00       	push   $0x8a
  jmp __alltraps
c0103025:	e9 7c 05 00 00       	jmp    c01035a6 <__alltraps>

c010302a <vector139>:
.globl vector139
vector139:
  pushl $0
c010302a:	6a 00                	push   $0x0
  pushl $139
c010302c:	68 8b 00 00 00       	push   $0x8b
  jmp __alltraps
c0103031:	e9 70 05 00 00       	jmp    c01035a6 <__alltraps>

c0103036 <vector140>:
.globl vector140
vector140:
  pushl $0
c0103036:	6a 00                	push   $0x0
  pushl $140
c0103038:	68 8c 00 00 00       	push   $0x8c
  jmp __alltraps
c010303d:	e9 64 05 00 00       	jmp    c01035a6 <__alltraps>

c0103042 <vector141>:
.globl vector141
vector141:
  pushl $0
c0103042:	6a 00                	push   $0x0
  pushl $141
c0103044:	68 8d 00 00 00       	push   $0x8d
  jmp __alltraps
c0103049:	e9 58 05 00 00       	jmp    c01035a6 <__alltraps>

c010304e <vector142>:
.globl vector142
vector142:
  pushl $0
c010304e:	6a 00                	push   $0x0
  pushl $142
c0103050:	68 8e 00 00 00       	push   $0x8e
  jmp __alltraps
c0103055:	e9 4c 05 00 00       	jmp    c01035a6 <__alltraps>

c010305a <vector143>:
.globl vector143
vector143:
  pushl $0
c010305a:	6a 00                	push   $0x0
  pushl $143
c010305c:	68 8f 00 00 00       	push   $0x8f
  jmp __alltraps
c0103061:	e9 40 05 00 00       	jmp    c01035a6 <__alltraps>

c0103066 <vector144>:
.globl vector144
vector144:
  pushl $0
c0103066:	6a 00                	push   $0x0
  pushl $144
c0103068:	68 90 00 00 00       	push   $0x90
  jmp __alltraps
c010306d:	e9 34 05 00 00       	jmp    c01035a6 <__alltraps>

c0103072 <vector145>:
.globl vector145
vector145:
  pushl $0
c0103072:	6a 00                	push   $0x0
  pushl $145
c0103074:	68 91 00 00 00       	push   $0x91
  jmp __alltraps
c0103079:	e9 28 05 00 00       	jmp    c01035a6 <__alltraps>

c010307e <vector146>:
.globl vector146
vector146:
  pushl $0
c010307e:	6a 00                	push   $0x0
  pushl $146
c0103080:	68 92 00 00 00       	push   $0x92
  jmp __alltraps
c0103085:	e9 1c 05 00 00       	jmp    c01035a6 <__alltraps>

c010308a <vector147>:
.globl vector147
vector147:
  pushl $0
c010308a:	6a 00                	push   $0x0
  pushl $147
c010308c:	68 93 00 00 00       	push   $0x93
  jmp __alltraps
c0103091:	e9 10 05 00 00       	jmp    c01035a6 <__alltraps>

c0103096 <vector148>:
.globl vector148
vector148:
  pushl $0
c0103096:	6a 00                	push   $0x0
  pushl $148
c0103098:	68 94 00 00 00       	push   $0x94
  jmp __alltraps
c010309d:	e9 04 05 00 00       	jmp    c01035a6 <__alltraps>

c01030a2 <vector149>:
.globl vector149
vector149:
  pushl $0
c01030a2:	6a 00                	push   $0x0
  pushl $149
c01030a4:	68 95 00 00 00       	push   $0x95
  jmp __alltraps
c01030a9:	e9 f8 04 00 00       	jmp    c01035a6 <__alltraps>

c01030ae <vector150>:
.globl vector150
vector150:
  pushl $0
c01030ae:	6a 00                	push   $0x0
  pushl $150
c01030b0:	68 96 00 00 00       	push   $0x96
  jmp __alltraps
c01030b5:	e9 ec 04 00 00       	jmp    c01035a6 <__alltraps>

c01030ba <vector151>:
.globl vector151
vector151:
  pushl $0
c01030ba:	6a 00                	push   $0x0
  pushl $151
c01030bc:	68 97 00 00 00       	push   $0x97
  jmp __alltraps
c01030c1:	e9 e0 04 00 00       	jmp    c01035a6 <__alltraps>

c01030c6 <vector152>:
.globl vector152
vector152:
  pushl $0
c01030c6:	6a 00                	push   $0x0
  pushl $152
c01030c8:	68 98 00 00 00       	push   $0x98
  jmp __alltraps
c01030cd:	e9 d4 04 00 00       	jmp    c01035a6 <__alltraps>

c01030d2 <vector153>:
.globl vector153
vector153:
  pushl $0
c01030d2:	6a 00                	push   $0x0
  pushl $153
c01030d4:	68 99 00 00 00       	push   $0x99
  jmp __alltraps
c01030d9:	e9 c8 04 00 00       	jmp    c01035a6 <__alltraps>

c01030de <vector154>:
.globl vector154
vector154:
  pushl $0
c01030de:	6a 00                	push   $0x0
  pushl $154
c01030e0:	68 9a 00 00 00       	push   $0x9a
  jmp __alltraps
c01030e5:	e9 bc 04 00 00       	jmp    c01035a6 <__alltraps>

c01030ea <vector155>:
.globl vector155
vector155:
  pushl $0
c01030ea:	6a 00                	push   $0x0
  pushl $155
c01030ec:	68 9b 00 00 00       	push   $0x9b
  jmp __alltraps
c01030f1:	e9 b0 04 00 00       	jmp    c01035a6 <__alltraps>

c01030f6 <vector156>:
.globl vector156
vector156:
  pushl $0
c01030f6:	6a 00                	push   $0x0
  pushl $156
c01030f8:	68 9c 00 00 00       	push   $0x9c
  jmp __alltraps
c01030fd:	e9 a4 04 00 00       	jmp    c01035a6 <__alltraps>

c0103102 <vector157>:
.globl vector157
vector157:
  pushl $0
c0103102:	6a 00                	push   $0x0
  pushl $157
c0103104:	68 9d 00 00 00       	push   $0x9d
  jmp __alltraps
c0103109:	e9 98 04 00 00       	jmp    c01035a6 <__alltraps>

c010310e <vector158>:
.globl vector158
vector158:
  pushl $0
c010310e:	6a 00                	push   $0x0
  pushl $158
c0103110:	68 9e 00 00 00       	push   $0x9e
  jmp __alltraps
c0103115:	e9 8c 04 00 00       	jmp    c01035a6 <__alltraps>

c010311a <vector159>:
.globl vector159
vector159:
  pushl $0
c010311a:	6a 00                	push   $0x0
  pushl $159
c010311c:	68 9f 00 00 00       	push   $0x9f
  jmp __alltraps
c0103121:	e9 80 04 00 00       	jmp    c01035a6 <__alltraps>

c0103126 <vector160>:
.globl vector160
vector160:
  pushl $0
c0103126:	6a 00                	push   $0x0
  pushl $160
c0103128:	68 a0 00 00 00       	push   $0xa0
  jmp __alltraps
c010312d:	e9 74 04 00 00       	jmp    c01035a6 <__alltraps>

c0103132 <vector161>:
.globl vector161
vector161:
  pushl $0
c0103132:	6a 00                	push   $0x0
  pushl $161
c0103134:	68 a1 00 00 00       	push   $0xa1
  jmp __alltraps
c0103139:	e9 68 04 00 00       	jmp    c01035a6 <__alltraps>

c010313e <vector162>:
.globl vector162
vector162:
  pushl $0
c010313e:	6a 00                	push   $0x0
  pushl $162
c0103140:	68 a2 00 00 00       	push   $0xa2
  jmp __alltraps
c0103145:	e9 5c 04 00 00       	jmp    c01035a6 <__alltraps>

c010314a <vector163>:
.globl vector163
vector163:
  pushl $0
c010314a:	6a 00                	push   $0x0
  pushl $163
c010314c:	68 a3 00 00 00       	push   $0xa3
  jmp __alltraps
c0103151:	e9 50 04 00 00       	jmp    c01035a6 <__alltraps>

c0103156 <vector164>:
.globl vector164
vector164:
  pushl $0
c0103156:	6a 00                	push   $0x0
  pushl $164
c0103158:	68 a4 00 00 00       	push   $0xa4
  jmp __alltraps
c010315d:	e9 44 04 00 00       	jmp    c01035a6 <__alltraps>

c0103162 <vector165>:
.globl vector165
vector165:
  pushl $0
c0103162:	6a 00                	push   $0x0
  pushl $165
c0103164:	68 a5 00 00 00       	push   $0xa5
  jmp __alltraps
c0103169:	e9 38 04 00 00       	jmp    c01035a6 <__alltraps>

c010316e <vector166>:
.globl vector166
vector166:
  pushl $0
c010316e:	6a 00                	push   $0x0
  pushl $166
c0103170:	68 a6 00 00 00       	push   $0xa6
  jmp __alltraps
c0103175:	e9 2c 04 00 00       	jmp    c01035a6 <__alltraps>

c010317a <vector167>:
.globl vector167
vector167:
  pushl $0
c010317a:	6a 00                	push   $0x0
  pushl $167
c010317c:	68 a7 00 00 00       	push   $0xa7
  jmp __alltraps
c0103181:	e9 20 04 00 00       	jmp    c01035a6 <__alltraps>

c0103186 <vector168>:
.globl vector168
vector168:
  pushl $0
c0103186:	6a 00                	push   $0x0
  pushl $168
c0103188:	68 a8 00 00 00       	push   $0xa8
  jmp __alltraps
c010318d:	e9 14 04 00 00       	jmp    c01035a6 <__alltraps>

c0103192 <vector169>:
.globl vector169
vector169:
  pushl $0
c0103192:	6a 00                	push   $0x0
  pushl $169
c0103194:	68 a9 00 00 00       	push   $0xa9
  jmp __alltraps
c0103199:	e9 08 04 00 00       	jmp    c01035a6 <__alltraps>

c010319e <vector170>:
.globl vector170
vector170:
  pushl $0
c010319e:	6a 00                	push   $0x0
  pushl $170
c01031a0:	68 aa 00 00 00       	push   $0xaa
  jmp __alltraps
c01031a5:	e9 fc 03 00 00       	jmp    c01035a6 <__alltraps>

c01031aa <vector171>:
.globl vector171
vector171:
  pushl $0
c01031aa:	6a 00                	push   $0x0
  pushl $171
c01031ac:	68 ab 00 00 00       	push   $0xab
  jmp __alltraps
c01031b1:	e9 f0 03 00 00       	jmp    c01035a6 <__alltraps>

c01031b6 <vector172>:
.globl vector172
vector172:
  pushl $0
c01031b6:	6a 00                	push   $0x0
  pushl $172
c01031b8:	68 ac 00 00 00       	push   $0xac
  jmp __alltraps
c01031bd:	e9 e4 03 00 00       	jmp    c01035a6 <__alltraps>

c01031c2 <vector173>:
.globl vector173
vector173:
  pushl $0
c01031c2:	6a 00                	push   $0x0
  pushl $173
c01031c4:	68 ad 00 00 00       	push   $0xad
  jmp __alltraps
c01031c9:	e9 d8 03 00 00       	jmp    c01035a6 <__alltraps>

c01031ce <vector174>:
.globl vector174
vector174:
  pushl $0
c01031ce:	6a 00                	push   $0x0
  pushl $174
c01031d0:	68 ae 00 00 00       	push   $0xae
  jmp __alltraps
c01031d5:	e9 cc 03 00 00       	jmp    c01035a6 <__alltraps>

c01031da <vector175>:
.globl vector175
vector175:
  pushl $0
c01031da:	6a 00                	push   $0x0
  pushl $175
c01031dc:	68 af 00 00 00       	push   $0xaf
  jmp __alltraps
c01031e1:	e9 c0 03 00 00       	jmp    c01035a6 <__alltraps>

c01031e6 <vector176>:
.globl vector176
vector176:
  pushl $0
c01031e6:	6a 00                	push   $0x0
  pushl $176
c01031e8:	68 b0 00 00 00       	push   $0xb0
  jmp __alltraps
c01031ed:	e9 b4 03 00 00       	jmp    c01035a6 <__alltraps>

c01031f2 <vector177>:
.globl vector177
vector177:
  pushl $0
c01031f2:	6a 00                	push   $0x0
  pushl $177
c01031f4:	68 b1 00 00 00       	push   $0xb1
  jmp __alltraps
c01031f9:	e9 a8 03 00 00       	jmp    c01035a6 <__alltraps>

c01031fe <vector178>:
.globl vector178
vector178:
  pushl $0
c01031fe:	6a 00                	push   $0x0
  pushl $178
c0103200:	68 b2 00 00 00       	push   $0xb2
  jmp __alltraps
c0103205:	e9 9c 03 00 00       	jmp    c01035a6 <__alltraps>

c010320a <vector179>:
.globl vector179
vector179:
  pushl $0
c010320a:	6a 00                	push   $0x0
  pushl $179
c010320c:	68 b3 00 00 00       	push   $0xb3
  jmp __alltraps
c0103211:	e9 90 03 00 00       	jmp    c01035a6 <__alltraps>

c0103216 <vector180>:
.globl vector180
vector180:
  pushl $0
c0103216:	6a 00                	push   $0x0
  pushl $180
c0103218:	68 b4 00 00 00       	push   $0xb4
  jmp __alltraps
c010321d:	e9 84 03 00 00       	jmp    c01035a6 <__alltraps>

c0103222 <vector181>:
.globl vector181
vector181:
  pushl $0
c0103222:	6a 00                	push   $0x0
  pushl $181
c0103224:	68 b5 00 00 00       	push   $0xb5
  jmp __alltraps
c0103229:	e9 78 03 00 00       	jmp    c01035a6 <__alltraps>

c010322e <vector182>:
.globl vector182
vector182:
  pushl $0
c010322e:	6a 00                	push   $0x0
  pushl $182
c0103230:	68 b6 00 00 00       	push   $0xb6
  jmp __alltraps
c0103235:	e9 6c 03 00 00       	jmp    c01035a6 <__alltraps>

c010323a <vector183>:
.globl vector183
vector183:
  pushl $0
c010323a:	6a 00                	push   $0x0
  pushl $183
c010323c:	68 b7 00 00 00       	push   $0xb7
  jmp __alltraps
c0103241:	e9 60 03 00 00       	jmp    c01035a6 <__alltraps>

c0103246 <vector184>:
.globl vector184
vector184:
  pushl $0
c0103246:	6a 00                	push   $0x0
  pushl $184
c0103248:	68 b8 00 00 00       	push   $0xb8
  jmp __alltraps
c010324d:	e9 54 03 00 00       	jmp    c01035a6 <__alltraps>

c0103252 <vector185>:
.globl vector185
vector185:
  pushl $0
c0103252:	6a 00                	push   $0x0
  pushl $185
c0103254:	68 b9 00 00 00       	push   $0xb9
  jmp __alltraps
c0103259:	e9 48 03 00 00       	jmp    c01035a6 <__alltraps>

c010325e <vector186>:
.globl vector186
vector186:
  pushl $0
c010325e:	6a 00                	push   $0x0
  pushl $186
c0103260:	68 ba 00 00 00       	push   $0xba
  jmp __alltraps
c0103265:	e9 3c 03 00 00       	jmp    c01035a6 <__alltraps>

c010326a <vector187>:
.globl vector187
vector187:
  pushl $0
c010326a:	6a 00                	push   $0x0
  pushl $187
c010326c:	68 bb 00 00 00       	push   $0xbb
  jmp __alltraps
c0103271:	e9 30 03 00 00       	jmp    c01035a6 <__alltraps>

c0103276 <vector188>:
.globl vector188
vector188:
  pushl $0
c0103276:	6a 00                	push   $0x0
  pushl $188
c0103278:	68 bc 00 00 00       	push   $0xbc
  jmp __alltraps
c010327d:	e9 24 03 00 00       	jmp    c01035a6 <__alltraps>

c0103282 <vector189>:
.globl vector189
vector189:
  pushl $0
c0103282:	6a 00                	push   $0x0
  pushl $189
c0103284:	68 bd 00 00 00       	push   $0xbd
  jmp __alltraps
c0103289:	e9 18 03 00 00       	jmp    c01035a6 <__alltraps>

c010328e <vector190>:
.globl vector190
vector190:
  pushl $0
c010328e:	6a 00                	push   $0x0
  pushl $190
c0103290:	68 be 00 00 00       	push   $0xbe
  jmp __alltraps
c0103295:	e9 0c 03 00 00       	jmp    c01035a6 <__alltraps>

c010329a <vector191>:
.globl vector191
vector191:
  pushl $0
c010329a:	6a 00                	push   $0x0
  pushl $191
c010329c:	68 bf 00 00 00       	push   $0xbf
  jmp __alltraps
c01032a1:	e9 00 03 00 00       	jmp    c01035a6 <__alltraps>

c01032a6 <vector192>:
.globl vector192
vector192:
  pushl $0
c01032a6:	6a 00                	push   $0x0
  pushl $192
c01032a8:	68 c0 00 00 00       	push   $0xc0
  jmp __alltraps
c01032ad:	e9 f4 02 00 00       	jmp    c01035a6 <__alltraps>

c01032b2 <vector193>:
.globl vector193
vector193:
  pushl $0
c01032b2:	6a 00                	push   $0x0
  pushl $193
c01032b4:	68 c1 00 00 00       	push   $0xc1
  jmp __alltraps
c01032b9:	e9 e8 02 00 00       	jmp    c01035a6 <__alltraps>

c01032be <vector194>:
.globl vector194
vector194:
  pushl $0
c01032be:	6a 00                	push   $0x0
  pushl $194
c01032c0:	68 c2 00 00 00       	push   $0xc2
  jmp __alltraps
c01032c5:	e9 dc 02 00 00       	jmp    c01035a6 <__alltraps>

c01032ca <vector195>:
.globl vector195
vector195:
  pushl $0
c01032ca:	6a 00                	push   $0x0
  pushl $195
c01032cc:	68 c3 00 00 00       	push   $0xc3
  jmp __alltraps
c01032d1:	e9 d0 02 00 00       	jmp    c01035a6 <__alltraps>

c01032d6 <vector196>:
.globl vector196
vector196:
  pushl $0
c01032d6:	6a 00                	push   $0x0
  pushl $196
c01032d8:	68 c4 00 00 00       	push   $0xc4
  jmp __alltraps
c01032dd:	e9 c4 02 00 00       	jmp    c01035a6 <__alltraps>

c01032e2 <vector197>:
.globl vector197
vector197:
  pushl $0
c01032e2:	6a 00                	push   $0x0
  pushl $197
c01032e4:	68 c5 00 00 00       	push   $0xc5
  jmp __alltraps
c01032e9:	e9 b8 02 00 00       	jmp    c01035a6 <__alltraps>

c01032ee <vector198>:
.globl vector198
vector198:
  pushl $0
c01032ee:	6a 00                	push   $0x0
  pushl $198
c01032f0:	68 c6 00 00 00       	push   $0xc6
  jmp __alltraps
c01032f5:	e9 ac 02 00 00       	jmp    c01035a6 <__alltraps>

c01032fa <vector199>:
.globl vector199
vector199:
  pushl $0
c01032fa:	6a 00                	push   $0x0
  pushl $199
c01032fc:	68 c7 00 00 00       	push   $0xc7
  jmp __alltraps
c0103301:	e9 a0 02 00 00       	jmp    c01035a6 <__alltraps>

c0103306 <vector200>:
.globl vector200
vector200:
  pushl $0
c0103306:	6a 00                	push   $0x0
  pushl $200
c0103308:	68 c8 00 00 00       	push   $0xc8
  jmp __alltraps
c010330d:	e9 94 02 00 00       	jmp    c01035a6 <__alltraps>

c0103312 <vector201>:
.globl vector201
vector201:
  pushl $0
c0103312:	6a 00                	push   $0x0
  pushl $201
c0103314:	68 c9 00 00 00       	push   $0xc9
  jmp __alltraps
c0103319:	e9 88 02 00 00       	jmp    c01035a6 <__alltraps>

c010331e <vector202>:
.globl vector202
vector202:
  pushl $0
c010331e:	6a 00                	push   $0x0
  pushl $202
c0103320:	68 ca 00 00 00       	push   $0xca
  jmp __alltraps
c0103325:	e9 7c 02 00 00       	jmp    c01035a6 <__alltraps>

c010332a <vector203>:
.globl vector203
vector203:
  pushl $0
c010332a:	6a 00                	push   $0x0
  pushl $203
c010332c:	68 cb 00 00 00       	push   $0xcb
  jmp __alltraps
c0103331:	e9 70 02 00 00       	jmp    c01035a6 <__alltraps>

c0103336 <vector204>:
.globl vector204
vector204:
  pushl $0
c0103336:	6a 00                	push   $0x0
  pushl $204
c0103338:	68 cc 00 00 00       	push   $0xcc
  jmp __alltraps
c010333d:	e9 64 02 00 00       	jmp    c01035a6 <__alltraps>

c0103342 <vector205>:
.globl vector205
vector205:
  pushl $0
c0103342:	6a 00                	push   $0x0
  pushl $205
c0103344:	68 cd 00 00 00       	push   $0xcd
  jmp __alltraps
c0103349:	e9 58 02 00 00       	jmp    c01035a6 <__alltraps>

c010334e <vector206>:
.globl vector206
vector206:
  pushl $0
c010334e:	6a 00                	push   $0x0
  pushl $206
c0103350:	68 ce 00 00 00       	push   $0xce
  jmp __alltraps
c0103355:	e9 4c 02 00 00       	jmp    c01035a6 <__alltraps>

c010335a <vector207>:
.globl vector207
vector207:
  pushl $0
c010335a:	6a 00                	push   $0x0
  pushl $207
c010335c:	68 cf 00 00 00       	push   $0xcf
  jmp __alltraps
c0103361:	e9 40 02 00 00       	jmp    c01035a6 <__alltraps>

c0103366 <vector208>:
.globl vector208
vector208:
  pushl $0
c0103366:	6a 00                	push   $0x0
  pushl $208
c0103368:	68 d0 00 00 00       	push   $0xd0
  jmp __alltraps
c010336d:	e9 34 02 00 00       	jmp    c01035a6 <__alltraps>

c0103372 <vector209>:
.globl vector209
vector209:
  pushl $0
c0103372:	6a 00                	push   $0x0
  pushl $209
c0103374:	68 d1 00 00 00       	push   $0xd1
  jmp __alltraps
c0103379:	e9 28 02 00 00       	jmp    c01035a6 <__alltraps>

c010337e <vector210>:
.globl vector210
vector210:
  pushl $0
c010337e:	6a 00                	push   $0x0
  pushl $210
c0103380:	68 d2 00 00 00       	push   $0xd2
  jmp __alltraps
c0103385:	e9 1c 02 00 00       	jmp    c01035a6 <__alltraps>

c010338a <vector211>:
.globl vector211
vector211:
  pushl $0
c010338a:	6a 00                	push   $0x0
  pushl $211
c010338c:	68 d3 00 00 00       	push   $0xd3
  jmp __alltraps
c0103391:	e9 10 02 00 00       	jmp    c01035a6 <__alltraps>

c0103396 <vector212>:
.globl vector212
vector212:
  pushl $0
c0103396:	6a 00                	push   $0x0
  pushl $212
c0103398:	68 d4 00 00 00       	push   $0xd4
  jmp __alltraps
c010339d:	e9 04 02 00 00       	jmp    c01035a6 <__alltraps>

c01033a2 <vector213>:
.globl vector213
vector213:
  pushl $0
c01033a2:	6a 00                	push   $0x0
  pushl $213
c01033a4:	68 d5 00 00 00       	push   $0xd5
  jmp __alltraps
c01033a9:	e9 f8 01 00 00       	jmp    c01035a6 <__alltraps>

c01033ae <vector214>:
.globl vector214
vector214:
  pushl $0
c01033ae:	6a 00                	push   $0x0
  pushl $214
c01033b0:	68 d6 00 00 00       	push   $0xd6
  jmp __alltraps
c01033b5:	e9 ec 01 00 00       	jmp    c01035a6 <__alltraps>

c01033ba <vector215>:
.globl vector215
vector215:
  pushl $0
c01033ba:	6a 00                	push   $0x0
  pushl $215
c01033bc:	68 d7 00 00 00       	push   $0xd7
  jmp __alltraps
c01033c1:	e9 e0 01 00 00       	jmp    c01035a6 <__alltraps>

c01033c6 <vector216>:
.globl vector216
vector216:
  pushl $0
c01033c6:	6a 00                	push   $0x0
  pushl $216
c01033c8:	68 d8 00 00 00       	push   $0xd8
  jmp __alltraps
c01033cd:	e9 d4 01 00 00       	jmp    c01035a6 <__alltraps>

c01033d2 <vector217>:
.globl vector217
vector217:
  pushl $0
c01033d2:	6a 00                	push   $0x0
  pushl $217
c01033d4:	68 d9 00 00 00       	push   $0xd9
  jmp __alltraps
c01033d9:	e9 c8 01 00 00       	jmp    c01035a6 <__alltraps>

c01033de <vector218>:
.globl vector218
vector218:
  pushl $0
c01033de:	6a 00                	push   $0x0
  pushl $218
c01033e0:	68 da 00 00 00       	push   $0xda
  jmp __alltraps
c01033e5:	e9 bc 01 00 00       	jmp    c01035a6 <__alltraps>

c01033ea <vector219>:
.globl vector219
vector219:
  pushl $0
c01033ea:	6a 00                	push   $0x0
  pushl $219
c01033ec:	68 db 00 00 00       	push   $0xdb
  jmp __alltraps
c01033f1:	e9 b0 01 00 00       	jmp    c01035a6 <__alltraps>

c01033f6 <vector220>:
.globl vector220
vector220:
  pushl $0
c01033f6:	6a 00                	push   $0x0
  pushl $220
c01033f8:	68 dc 00 00 00       	push   $0xdc
  jmp __alltraps
c01033fd:	e9 a4 01 00 00       	jmp    c01035a6 <__alltraps>

c0103402 <vector221>:
.globl vector221
vector221:
  pushl $0
c0103402:	6a 00                	push   $0x0
  pushl $221
c0103404:	68 dd 00 00 00       	push   $0xdd
  jmp __alltraps
c0103409:	e9 98 01 00 00       	jmp    c01035a6 <__alltraps>

c010340e <vector222>:
.globl vector222
vector222:
  pushl $0
c010340e:	6a 00                	push   $0x0
  pushl $222
c0103410:	68 de 00 00 00       	push   $0xde
  jmp __alltraps
c0103415:	e9 8c 01 00 00       	jmp    c01035a6 <__alltraps>

c010341a <vector223>:
.globl vector223
vector223:
  pushl $0
c010341a:	6a 00                	push   $0x0
  pushl $223
c010341c:	68 df 00 00 00       	push   $0xdf
  jmp __alltraps
c0103421:	e9 80 01 00 00       	jmp    c01035a6 <__alltraps>

c0103426 <vector224>:
.globl vector224
vector224:
  pushl $0
c0103426:	6a 00                	push   $0x0
  pushl $224
c0103428:	68 e0 00 00 00       	push   $0xe0
  jmp __alltraps
c010342d:	e9 74 01 00 00       	jmp    c01035a6 <__alltraps>

c0103432 <vector225>:
.globl vector225
vector225:
  pushl $0
c0103432:	6a 00                	push   $0x0
  pushl $225
c0103434:	68 e1 00 00 00       	push   $0xe1
  jmp __alltraps
c0103439:	e9 68 01 00 00       	jmp    c01035a6 <__alltraps>

c010343e <vector226>:
.globl vector226
vector226:
  pushl $0
c010343e:	6a 00                	push   $0x0
  pushl $226
c0103440:	68 e2 00 00 00       	push   $0xe2
  jmp __alltraps
c0103445:	e9 5c 01 00 00       	jmp    c01035a6 <__alltraps>

c010344a <vector227>:
.globl vector227
vector227:
  pushl $0
c010344a:	6a 00                	push   $0x0
  pushl $227
c010344c:	68 e3 00 00 00       	push   $0xe3
  jmp __alltraps
c0103451:	e9 50 01 00 00       	jmp    c01035a6 <__alltraps>

c0103456 <vector228>:
.globl vector228
vector228:
  pushl $0
c0103456:	6a 00                	push   $0x0
  pushl $228
c0103458:	68 e4 00 00 00       	push   $0xe4
  jmp __alltraps
c010345d:	e9 44 01 00 00       	jmp    c01035a6 <__alltraps>

c0103462 <vector229>:
.globl vector229
vector229:
  pushl $0
c0103462:	6a 00                	push   $0x0
  pushl $229
c0103464:	68 e5 00 00 00       	push   $0xe5
  jmp __alltraps
c0103469:	e9 38 01 00 00       	jmp    c01035a6 <__alltraps>

c010346e <vector230>:
.globl vector230
vector230:
  pushl $0
c010346e:	6a 00                	push   $0x0
  pushl $230
c0103470:	68 e6 00 00 00       	push   $0xe6
  jmp __alltraps
c0103475:	e9 2c 01 00 00       	jmp    c01035a6 <__alltraps>

c010347a <vector231>:
.globl vector231
vector231:
  pushl $0
c010347a:	6a 00                	push   $0x0
  pushl $231
c010347c:	68 e7 00 00 00       	push   $0xe7
  jmp __alltraps
c0103481:	e9 20 01 00 00       	jmp    c01035a6 <__alltraps>

c0103486 <vector232>:
.globl vector232
vector232:
  pushl $0
c0103486:	6a 00                	push   $0x0
  pushl $232
c0103488:	68 e8 00 00 00       	push   $0xe8
  jmp __alltraps
c010348d:	e9 14 01 00 00       	jmp    c01035a6 <__alltraps>

c0103492 <vector233>:
.globl vector233
vector233:
  pushl $0
c0103492:	6a 00                	push   $0x0
  pushl $233
c0103494:	68 e9 00 00 00       	push   $0xe9
  jmp __alltraps
c0103499:	e9 08 01 00 00       	jmp    c01035a6 <__alltraps>

c010349e <vector234>:
.globl vector234
vector234:
  pushl $0
c010349e:	6a 00                	push   $0x0
  pushl $234
c01034a0:	68 ea 00 00 00       	push   $0xea
  jmp __alltraps
c01034a5:	e9 fc 00 00 00       	jmp    c01035a6 <__alltraps>

c01034aa <vector235>:
.globl vector235
vector235:
  pushl $0
c01034aa:	6a 00                	push   $0x0
  pushl $235
c01034ac:	68 eb 00 00 00       	push   $0xeb
  jmp __alltraps
c01034b1:	e9 f0 00 00 00       	jmp    c01035a6 <__alltraps>

c01034b6 <vector236>:
.globl vector236
vector236:
  pushl $0
c01034b6:	6a 00                	push   $0x0
  pushl $236
c01034b8:	68 ec 00 00 00       	push   $0xec
  jmp __alltraps
c01034bd:	e9 e4 00 00 00       	jmp    c01035a6 <__alltraps>

c01034c2 <vector237>:
.globl vector237
vector237:
  pushl $0
c01034c2:	6a 00                	push   $0x0
  pushl $237
c01034c4:	68 ed 00 00 00       	push   $0xed
  jmp __alltraps
c01034c9:	e9 d8 00 00 00       	jmp    c01035a6 <__alltraps>

c01034ce <vector238>:
.globl vector238
vector238:
  pushl $0
c01034ce:	6a 00                	push   $0x0
  pushl $238
c01034d0:	68 ee 00 00 00       	push   $0xee
  jmp __alltraps
c01034d5:	e9 cc 00 00 00       	jmp    c01035a6 <__alltraps>

c01034da <vector239>:
.globl vector239
vector239:
  pushl $0
c01034da:	6a 00                	push   $0x0
  pushl $239
c01034dc:	68 ef 00 00 00       	push   $0xef
  jmp __alltraps
c01034e1:	e9 c0 00 00 00       	jmp    c01035a6 <__alltraps>

c01034e6 <vector240>:
.globl vector240
vector240:
  pushl $0
c01034e6:	6a 00                	push   $0x0
  pushl $240
c01034e8:	68 f0 00 00 00       	push   $0xf0
  jmp __alltraps
c01034ed:	e9 b4 00 00 00       	jmp    c01035a6 <__alltraps>

c01034f2 <vector241>:
.globl vector241
vector241:
  pushl $0
c01034f2:	6a 00                	push   $0x0
  pushl $241
c01034f4:	68 f1 00 00 00       	push   $0xf1
  jmp __alltraps
c01034f9:	e9 a8 00 00 00       	jmp    c01035a6 <__alltraps>

c01034fe <vector242>:
.globl vector242
vector242:
  pushl $0
c01034fe:	6a 00                	push   $0x0
  pushl $242
c0103500:	68 f2 00 00 00       	push   $0xf2
  jmp __alltraps
c0103505:	e9 9c 00 00 00       	jmp    c01035a6 <__alltraps>

c010350a <vector243>:
.globl vector243
vector243:
  pushl $0
c010350a:	6a 00                	push   $0x0
  pushl $243
c010350c:	68 f3 00 00 00       	push   $0xf3
  jmp __alltraps
c0103511:	e9 90 00 00 00       	jmp    c01035a6 <__alltraps>

c0103516 <vector244>:
.globl vector244
vector244:
  pushl $0
c0103516:	6a 00                	push   $0x0
  pushl $244
c0103518:	68 f4 00 00 00       	push   $0xf4
  jmp __alltraps
c010351d:	e9 84 00 00 00       	jmp    c01035a6 <__alltraps>

c0103522 <vector245>:
.globl vector245
vector245:
  pushl $0
c0103522:	6a 00                	push   $0x0
  pushl $245
c0103524:	68 f5 00 00 00       	push   $0xf5
  jmp __alltraps
c0103529:	e9 78 00 00 00       	jmp    c01035a6 <__alltraps>

c010352e <vector246>:
.globl vector246
vector246:
  pushl $0
c010352e:	6a 00                	push   $0x0
  pushl $246
c0103530:	68 f6 00 00 00       	push   $0xf6
  jmp __alltraps
c0103535:	e9 6c 00 00 00       	jmp    c01035a6 <__alltraps>

c010353a <vector247>:
.globl vector247
vector247:
  pushl $0
c010353a:	6a 00                	push   $0x0
  pushl $247
c010353c:	68 f7 00 00 00       	push   $0xf7
  jmp __alltraps
c0103541:	e9 60 00 00 00       	jmp    c01035a6 <__alltraps>

c0103546 <vector248>:
.globl vector248
vector248:
  pushl $0
c0103546:	6a 00                	push   $0x0
  pushl $248
c0103548:	68 f8 00 00 00       	push   $0xf8
  jmp __alltraps
c010354d:	e9 54 00 00 00       	jmp    c01035a6 <__alltraps>

c0103552 <vector249>:
.globl vector249
vector249:
  pushl $0
c0103552:	6a 00                	push   $0x0
  pushl $249
c0103554:	68 f9 00 00 00       	push   $0xf9
  jmp __alltraps
c0103559:	e9 48 00 00 00       	jmp    c01035a6 <__alltraps>

c010355e <vector250>:
.globl vector250
vector250:
  pushl $0
c010355e:	6a 00                	push   $0x0
  pushl $250
c0103560:	68 fa 00 00 00       	push   $0xfa
  jmp __alltraps
c0103565:	e9 3c 00 00 00       	jmp    c01035a6 <__alltraps>

c010356a <vector251>:
.globl vector251
vector251:
  pushl $0
c010356a:	6a 00                	push   $0x0
  pushl $251
c010356c:	68 fb 00 00 00       	push   $0xfb
  jmp __alltraps
c0103571:	e9 30 00 00 00       	jmp    c01035a6 <__alltraps>

c0103576 <vector252>:
.globl vector252
vector252:
  pushl $0
c0103576:	6a 00                	push   $0x0
  pushl $252
c0103578:	68 fc 00 00 00       	push   $0xfc
  jmp __alltraps
c010357d:	e9 24 00 00 00       	jmp    c01035a6 <__alltraps>

c0103582 <vector253>:
.globl vector253
vector253:
  pushl $0
c0103582:	6a 00                	push   $0x0
  pushl $253
c0103584:	68 fd 00 00 00       	push   $0xfd
  jmp __alltraps
c0103589:	e9 18 00 00 00       	jmp    c01035a6 <__alltraps>

c010358e <vector254>:
.globl vector254
vector254:
  pushl $0
c010358e:	6a 00                	push   $0x0
  pushl $254
c0103590:	68 fe 00 00 00       	push   $0xfe
  jmp __alltraps
c0103595:	e9 0c 00 00 00       	jmp    c01035a6 <__alltraps>

c010359a <vector255>:
.globl vector255
vector255:
  pushl $0
c010359a:	6a 00                	push   $0x0
  pushl $255
c010359c:	68 ff 00 00 00       	push   $0xff
  jmp __alltraps
c01035a1:	e9 00 00 00 00       	jmp    c01035a6 <__alltraps>

c01035a6 <__alltraps>:
.text
.globl __alltraps
__alltraps:
    # push registers to build a trap frame
    # therefore make the stack look like a struct trapframe
    pushl %ds
c01035a6:	1e                   	push   %ds
    pushl %es
c01035a7:	06                   	push   %es
    pushl %fs
c01035a8:	0f a0                	push   %fs
    pushl %gs
c01035aa:	0f a8                	push   %gs
    pushal
c01035ac:	60                   	pusha  

    # load GD_KDATA into %ds and %es to set up data segments for kernel
    movl $GD_KDATA, %eax
c01035ad:	b8 10 00 00 00       	mov    $0x10,%eax
    movw %ax, %ds
c01035b2:	8e d8                	mov    %eax,%ds
    movw %ax, %es
c01035b4:	8e c0                	mov    %eax,%es

    # push %esp to pass a pointer to the trapframe as an argument to trap()
    pushl %esp
c01035b6:	54                   	push   %esp

    # call trap(tf), where tf=%esp
    call trap
c01035b7:	e8 e3 f4 ff ff       	call   c0102a9f <trap>

    # pop the pushed stack pointer
    popl %esp
c01035bc:	5c                   	pop    %esp

c01035bd <__trapret>:

    # return falls through to trapret...
.globl __trapret
__trapret:
    # restore registers from stack
    popal
c01035bd:	61                   	popa   

    # restore %ds, %es, %fs and %gs
    popl %gs
c01035be:	0f a9                	pop    %gs
    popl %fs
c01035c0:	0f a1                	pop    %fs
    popl %es
c01035c2:	07                   	pop    %es
    popl %ds
c01035c3:	1f                   	pop    %ds

    # get rid of the trap number and error code
    addl $0x8, %esp
c01035c4:	83 c4 08             	add    $0x8,%esp
    iret
c01035c7:	cf                   	iret   

c01035c8 <forkrets>:

.globl forkrets
forkrets:
    # set stack to this new process's trapframe
    movl 4(%esp), %esp
c01035c8:	8b 64 24 04          	mov    0x4(%esp),%esp
    jmp __trapret
c01035cc:	eb ef                	jmp    c01035bd <__trapret>

c01035ce <mm_count>:
bool user_mem_check(struct mm_struct *mm, uintptr_t start, size_t len, bool write);
bool copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable);
bool copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len);

static inline int
mm_count(struct mm_struct *mm) {
c01035ce:	55                   	push   %ebp
c01035cf:	89 e5                	mov    %esp,%ebp
    return mm->mm_count;
c01035d1:	8b 45 08             	mov    0x8(%ebp),%eax
c01035d4:	8b 40 18             	mov    0x18(%eax),%eax
}
c01035d7:	5d                   	pop    %ebp
c01035d8:	c3                   	ret    

c01035d9 <set_mm_count>:

static inline void
set_mm_count(struct mm_struct *mm, int val) {
c01035d9:	55                   	push   %ebp
c01035da:	89 e5                	mov    %esp,%ebp
    mm->mm_count = val;
c01035dc:	8b 45 08             	mov    0x8(%ebp),%eax
c01035df:	8b 55 0c             	mov    0xc(%ebp),%edx
c01035e2:	89 50 18             	mov    %edx,0x18(%eax)
}
c01035e5:	90                   	nop
c01035e6:	5d                   	pop    %ebp
c01035e7:	c3                   	ret    

c01035e8 <pa2page>:
page2pa(struct Page *page) {
    return page2ppn(page) << PGSHIFT;
}

static inline struct Page *
pa2page(uintptr_t pa) {
c01035e8:	55                   	push   %ebp
c01035e9:	89 e5                	mov    %esp,%ebp
c01035eb:	83 ec 08             	sub    $0x8,%esp
    if (PPN(pa) >= npage) {
c01035ee:	8b 45 08             	mov    0x8(%ebp),%eax
c01035f1:	c1 e8 0c             	shr    $0xc,%eax
c01035f4:	89 c2                	mov    %eax,%edx
c01035f6:	a1 80 4f 1c c0       	mov    0xc01c4f80,%eax
c01035fb:	39 c2                	cmp    %eax,%edx
c01035fd:	72 14                	jb     c0103613 <pa2page+0x2b>
        panic("pa2page called with invalid pa");
c01035ff:	83 ec 04             	sub    $0x4,%esp
c0103602:	68 90 d6 10 c0       	push   $0xc010d690
c0103607:	6a 5e                	push   $0x5e
c0103609:	68 af d6 10 c0       	push   $0xc010d6af
c010360e:	e8 ea cd ff ff       	call   c01003fd <__panic>
    }
    return &pages[PPN(pa)];
c0103613:	a1 f8 71 1c c0       	mov    0xc01c71f8,%eax
c0103618:	8b 55 08             	mov    0x8(%ebp),%edx
c010361b:	c1 ea 0c             	shr    $0xc,%edx
c010361e:	c1 e2 05             	shl    $0x5,%edx
c0103621:	01 d0                	add    %edx,%eax
}
c0103623:	c9                   	leave  
c0103624:	c3                   	ret    

c0103625 <pde2page>:
    }
    return pa2page(PTE_ADDR(pte));
}

static inline struct Page *
pde2page(pde_t pde) {
c0103625:	55                   	push   %ebp
c0103626:	89 e5                	mov    %esp,%ebp
c0103628:	83 ec 08             	sub    $0x8,%esp
    return pa2page(PDE_ADDR(pde));
c010362b:	8b 45 08             	mov    0x8(%ebp),%eax
c010362e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0103633:	83 ec 0c             	sub    $0xc,%esp
c0103636:	50                   	push   %eax
c0103637:	e8 ac ff ff ff       	call   c01035e8 <pa2page>
c010363c:	83 c4 10             	add    $0x10,%esp
}
c010363f:	c9                   	leave  
c0103640:	c3                   	ret    

c0103641 <mm_create>:
static void check_vma_struct(void);
static void check_pgfault(void);

// mm_create -  alloc a mm_struct & initialize it.
struct mm_struct *
mm_create(void) {
c0103641:	55                   	push   %ebp
c0103642:	89 e5                	mov    %esp,%ebp
c0103644:	83 ec 18             	sub    $0x18,%esp
    struct mm_struct *mm = kmalloc(sizeof(struct mm_struct));
c0103647:	83 ec 0c             	sub    $0xc,%esp
c010364a:	6a 2c                	push   $0x2c
c010364c:	e8 18 1b 00 00       	call   c0105169 <kmalloc>
c0103651:	83 c4 10             	add    $0x10,%esp
c0103654:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (mm != NULL) {
c0103657:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010365b:	74 7f                	je     c01036dc <mm_create+0x9b>
        list_init(&(mm->mmap_list));
c010365d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103660:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0103663:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103666:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0103669:	89 50 04             	mov    %edx,0x4(%eax)
c010366c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010366f:	8b 50 04             	mov    0x4(%eax),%edx
c0103672:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103675:	89 10                	mov    %edx,(%eax)
        mm->mmap_cache = NULL;
c0103677:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010367a:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        mm->pgdir = NULL;
c0103681:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103684:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        mm->map_count = 0;
c010368b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010368e:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)

        if (swap_init_ok) swap_init_mm(mm);
c0103695:	a1 6c 4f 1c c0       	mov    0xc01c4f6c,%eax
c010369a:	85 c0                	test   %eax,%eax
c010369c:	74 10                	je     c01036ae <mm_create+0x6d>
c010369e:	83 ec 0c             	sub    $0xc,%esp
c01036a1:	ff 75 f4             	pushl  -0xc(%ebp)
c01036a4:	e8 3c 1d 00 00       	call   c01053e5 <swap_init_mm>
c01036a9:	83 c4 10             	add    $0x10,%esp
c01036ac:	eb 0a                	jmp    c01036b8 <mm_create+0x77>
        else mm->sm_priv = NULL;
c01036ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036b1:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
        
        set_mm_count(mm, 0);
c01036b8:	83 ec 08             	sub    $0x8,%esp
c01036bb:	6a 00                	push   $0x0
c01036bd:	ff 75 f4             	pushl  -0xc(%ebp)
c01036c0:	e8 14 ff ff ff       	call   c01035d9 <set_mm_count>
c01036c5:	83 c4 10             	add    $0x10,%esp
        sem_init(&(mm->mm_sem), 1);
c01036c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036cb:	83 c0 1c             	add    $0x1c,%eax
c01036ce:	83 ec 08             	sub    $0x8,%esp
c01036d1:	6a 01                	push   $0x1
c01036d3:	50                   	push   %eax
c01036d4:	e8 b2 5d 00 00       	call   c010948b <sem_init>
c01036d9:	83 c4 10             	add    $0x10,%esp
    }    
    return mm;
c01036dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01036df:	c9                   	leave  
c01036e0:	c3                   	ret    

c01036e1 <vma_create>:

// vma_create - alloc a vma_struct & initialize it. (addr range: vm_start~vm_end)
struct vma_struct *
vma_create(uintptr_t vm_start, uintptr_t vm_end, uint32_t vm_flags) {
c01036e1:	55                   	push   %ebp
c01036e2:	89 e5                	mov    %esp,%ebp
c01036e4:	83 ec 18             	sub    $0x18,%esp
    struct vma_struct *vma = kmalloc(sizeof(struct vma_struct));
c01036e7:	83 ec 0c             	sub    $0xc,%esp
c01036ea:	6a 18                	push   $0x18
c01036ec:	e8 78 1a 00 00       	call   c0105169 <kmalloc>
c01036f1:	83 c4 10             	add    $0x10,%esp
c01036f4:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (vma != NULL) {
c01036f7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01036fb:	74 1b                	je     c0103718 <vma_create+0x37>
        vma->vm_start = vm_start;
c01036fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103700:	8b 55 08             	mov    0x8(%ebp),%edx
c0103703:	89 50 04             	mov    %edx,0x4(%eax)
        vma->vm_end = vm_end;
c0103706:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103709:	8b 55 0c             	mov    0xc(%ebp),%edx
c010370c:	89 50 08             	mov    %edx,0x8(%eax)
        vma->vm_flags = vm_flags;
c010370f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103712:	8b 55 10             	mov    0x10(%ebp),%edx
c0103715:	89 50 0c             	mov    %edx,0xc(%eax)
    }
    return vma;
c0103718:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010371b:	c9                   	leave  
c010371c:	c3                   	ret    

c010371d <find_vma>:


// find_vma - find a vma  (vma->vm_start <= addr <= vma_vm_end)
struct vma_struct *
find_vma(struct mm_struct *mm, uintptr_t addr) {
c010371d:	55                   	push   %ebp
c010371e:	89 e5                	mov    %esp,%ebp
c0103720:	83 ec 20             	sub    $0x20,%esp
    struct vma_struct *vma = NULL;
c0103723:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    if (mm != NULL) {
c010372a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010372e:	0f 84 95 00 00 00    	je     c01037c9 <find_vma+0xac>
        vma = mm->mmap_cache;
c0103734:	8b 45 08             	mov    0x8(%ebp),%eax
c0103737:	8b 40 08             	mov    0x8(%eax),%eax
c010373a:	89 45 fc             	mov    %eax,-0x4(%ebp)
        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
c010373d:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0103741:	74 16                	je     c0103759 <find_vma+0x3c>
c0103743:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103746:	8b 40 04             	mov    0x4(%eax),%eax
c0103749:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010374c:	77 0b                	ja     c0103759 <find_vma+0x3c>
c010374e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103751:	8b 40 08             	mov    0x8(%eax),%eax
c0103754:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0103757:	77 61                	ja     c01037ba <find_vma+0x9d>
                bool found = 0;
c0103759:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
                list_entry_t *list = &(mm->mmap_list), *le = list;
c0103760:	8b 45 08             	mov    0x8(%ebp),%eax
c0103763:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103766:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103769:	89 45 f4             	mov    %eax,-0xc(%ebp)
                while ((le = list_next(le)) != list) {
c010376c:	eb 28                	jmp    c0103796 <find_vma+0x79>
                    vma = le2vma(le, list_link);
c010376e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103771:	83 e8 10             	sub    $0x10,%eax
c0103774:	89 45 fc             	mov    %eax,-0x4(%ebp)
                    if (vma->vm_start<=addr && addr < vma->vm_end) {
c0103777:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010377a:	8b 40 04             	mov    0x4(%eax),%eax
c010377d:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0103780:	77 14                	ja     c0103796 <find_vma+0x79>
c0103782:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103785:	8b 40 08             	mov    0x8(%eax),%eax
c0103788:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010378b:	76 09                	jbe    c0103796 <find_vma+0x79>
                        found = 1;
c010378d:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
                        break;
c0103794:	eb 17                	jmp    c01037ad <find_vma+0x90>
c0103796:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103799:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010379c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010379f:	8b 40 04             	mov    0x4(%eax),%eax
    if (mm != NULL) {
        vma = mm->mmap_cache;
        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
                bool found = 0;
                list_entry_t *list = &(mm->mmap_list), *le = list;
                while ((le = list_next(le)) != list) {
c01037a2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01037a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01037a8:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01037ab:	75 c1                	jne    c010376e <find_vma+0x51>
                    if (vma->vm_start<=addr && addr < vma->vm_end) {
                        found = 1;
                        break;
                    }
                }
                if (!found) {
c01037ad:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
c01037b1:	75 07                	jne    c01037ba <find_vma+0x9d>
                    vma = NULL;
c01037b3:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
                }
        }
        if (vma != NULL) {
c01037ba:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c01037be:	74 09                	je     c01037c9 <find_vma+0xac>
            mm->mmap_cache = vma;
c01037c0:	8b 45 08             	mov    0x8(%ebp),%eax
c01037c3:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01037c6:	89 50 08             	mov    %edx,0x8(%eax)
        }
    }
    return vma;
c01037c9:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c01037cc:	c9                   	leave  
c01037cd:	c3                   	ret    

c01037ce <check_vma_overlap>:


// check_vma_overlap - check if vma1 overlaps vma2 ?
static inline void
check_vma_overlap(struct vma_struct *prev, struct vma_struct *next) {
c01037ce:	55                   	push   %ebp
c01037cf:	89 e5                	mov    %esp,%ebp
c01037d1:	83 ec 08             	sub    $0x8,%esp
    assert(prev->vm_start < prev->vm_end);
c01037d4:	8b 45 08             	mov    0x8(%ebp),%eax
c01037d7:	8b 50 04             	mov    0x4(%eax),%edx
c01037da:	8b 45 08             	mov    0x8(%ebp),%eax
c01037dd:	8b 40 08             	mov    0x8(%eax),%eax
c01037e0:	39 c2                	cmp    %eax,%edx
c01037e2:	72 16                	jb     c01037fa <check_vma_overlap+0x2c>
c01037e4:	68 bd d6 10 c0       	push   $0xc010d6bd
c01037e9:	68 db d6 10 c0       	push   $0xc010d6db
c01037ee:	6a 6b                	push   $0x6b
c01037f0:	68 f0 d6 10 c0       	push   $0xc010d6f0
c01037f5:	e8 03 cc ff ff       	call   c01003fd <__panic>
    assert(prev->vm_end <= next->vm_start);
c01037fa:	8b 45 08             	mov    0x8(%ebp),%eax
c01037fd:	8b 50 08             	mov    0x8(%eax),%edx
c0103800:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103803:	8b 40 04             	mov    0x4(%eax),%eax
c0103806:	39 c2                	cmp    %eax,%edx
c0103808:	76 16                	jbe    c0103820 <check_vma_overlap+0x52>
c010380a:	68 00 d7 10 c0       	push   $0xc010d700
c010380f:	68 db d6 10 c0       	push   $0xc010d6db
c0103814:	6a 6c                	push   $0x6c
c0103816:	68 f0 d6 10 c0       	push   $0xc010d6f0
c010381b:	e8 dd cb ff ff       	call   c01003fd <__panic>
    assert(next->vm_start < next->vm_end);
c0103820:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103823:	8b 50 04             	mov    0x4(%eax),%edx
c0103826:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103829:	8b 40 08             	mov    0x8(%eax),%eax
c010382c:	39 c2                	cmp    %eax,%edx
c010382e:	72 16                	jb     c0103846 <check_vma_overlap+0x78>
c0103830:	68 1f d7 10 c0       	push   $0xc010d71f
c0103835:	68 db d6 10 c0       	push   $0xc010d6db
c010383a:	6a 6d                	push   $0x6d
c010383c:	68 f0 d6 10 c0       	push   $0xc010d6f0
c0103841:	e8 b7 cb ff ff       	call   c01003fd <__panic>
}
c0103846:	90                   	nop
c0103847:	c9                   	leave  
c0103848:	c3                   	ret    

c0103849 <insert_vma_struct>:


// insert_vma_struct -insert vma in mm's list link
void
insert_vma_struct(struct mm_struct *mm, struct vma_struct *vma) {
c0103849:	55                   	push   %ebp
c010384a:	89 e5                	mov    %esp,%ebp
c010384c:	83 ec 38             	sub    $0x38,%esp
    assert(vma->vm_start < vma->vm_end);
c010384f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103852:	8b 50 04             	mov    0x4(%eax),%edx
c0103855:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103858:	8b 40 08             	mov    0x8(%eax),%eax
c010385b:	39 c2                	cmp    %eax,%edx
c010385d:	72 16                	jb     c0103875 <insert_vma_struct+0x2c>
c010385f:	68 3d d7 10 c0       	push   $0xc010d73d
c0103864:	68 db d6 10 c0       	push   $0xc010d6db
c0103869:	6a 74                	push   $0x74
c010386b:	68 f0 d6 10 c0       	push   $0xc010d6f0
c0103870:	e8 88 cb ff ff       	call   c01003fd <__panic>
    list_entry_t *list = &(mm->mmap_list);
c0103875:	8b 45 08             	mov    0x8(%ebp),%eax
c0103878:	89 45 ec             	mov    %eax,-0x14(%ebp)
    list_entry_t *le_prev = list, *le_next;
c010387b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010387e:	89 45 f4             	mov    %eax,-0xc(%ebp)

        list_entry_t *le = list;
c0103881:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103884:	89 45 f0             	mov    %eax,-0x10(%ebp)
        while ((le = list_next(le)) != list) {
c0103887:	eb 1f                	jmp    c01038a8 <insert_vma_struct+0x5f>
            struct vma_struct *mmap_prev = le2vma(le, list_link);
c0103889:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010388c:	83 e8 10             	sub    $0x10,%eax
c010388f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            if (mmap_prev->vm_start > vma->vm_start) {
c0103892:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103895:	8b 50 04             	mov    0x4(%eax),%edx
c0103898:	8b 45 0c             	mov    0xc(%ebp),%eax
c010389b:	8b 40 04             	mov    0x4(%eax),%eax
c010389e:	39 c2                	cmp    %eax,%edx
c01038a0:	77 1f                	ja     c01038c1 <insert_vma_struct+0x78>
                break;
            }
            le_prev = le;
c01038a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01038a5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01038a8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01038ab:	89 45 d8             	mov    %eax,-0x28(%ebp)
c01038ae:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01038b1:	8b 40 04             	mov    0x4(%eax),%eax
    assert(vma->vm_start < vma->vm_end);
    list_entry_t *list = &(mm->mmap_list);
    list_entry_t *le_prev = list, *le_next;

        list_entry_t *le = list;
        while ((le = list_next(le)) != list) {
c01038b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01038b7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01038ba:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01038bd:	75 ca                	jne    c0103889 <insert_vma_struct+0x40>
c01038bf:	eb 01                	jmp    c01038c2 <insert_vma_struct+0x79>
            struct vma_struct *mmap_prev = le2vma(le, list_link);
            if (mmap_prev->vm_start > vma->vm_start) {
                break;
c01038c1:	90                   	nop
c01038c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01038c5:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01038c8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01038cb:	8b 40 04             	mov    0x4(%eax),%eax
            }
            le_prev = le;
        }

    le_next = list_next(le_prev);
c01038ce:	89 45 dc             	mov    %eax,-0x24(%ebp)

    /* check overlap */
    if (le_prev != list) {
c01038d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01038d4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01038d7:	74 15                	je     c01038ee <insert_vma_struct+0xa5>
        check_vma_overlap(le2vma(le_prev, list_link), vma);
c01038d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01038dc:	83 e8 10             	sub    $0x10,%eax
c01038df:	83 ec 08             	sub    $0x8,%esp
c01038e2:	ff 75 0c             	pushl  0xc(%ebp)
c01038e5:	50                   	push   %eax
c01038e6:	e8 e3 fe ff ff       	call   c01037ce <check_vma_overlap>
c01038eb:	83 c4 10             	add    $0x10,%esp
    }
    if (le_next != list) {
c01038ee:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01038f1:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01038f4:	74 15                	je     c010390b <insert_vma_struct+0xc2>
        check_vma_overlap(vma, le2vma(le_next, list_link));
c01038f6:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01038f9:	83 e8 10             	sub    $0x10,%eax
c01038fc:	83 ec 08             	sub    $0x8,%esp
c01038ff:	50                   	push   %eax
c0103900:	ff 75 0c             	pushl  0xc(%ebp)
c0103903:	e8 c6 fe ff ff       	call   c01037ce <check_vma_overlap>
c0103908:	83 c4 10             	add    $0x10,%esp
    }

    vma->vm_mm = mm;
c010390b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010390e:	8b 55 08             	mov    0x8(%ebp),%edx
c0103911:	89 10                	mov    %edx,(%eax)
    list_add_after(le_prev, &(vma->list_link));
c0103913:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103916:	8d 50 10             	lea    0x10(%eax),%edx
c0103919:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010391c:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010391f:	89 55 d4             	mov    %edx,-0x2c(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0103922:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103925:	8b 40 04             	mov    0x4(%eax),%eax
c0103928:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010392b:	89 55 d0             	mov    %edx,-0x30(%ebp)
c010392e:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0103931:	89 55 cc             	mov    %edx,-0x34(%ebp)
c0103934:	89 45 c8             	mov    %eax,-0x38(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0103937:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010393a:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010393d:	89 10                	mov    %edx,(%eax)
c010393f:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0103942:	8b 10                	mov    (%eax),%edx
c0103944:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0103947:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010394a:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010394d:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0103950:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0103953:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0103956:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0103959:	89 10                	mov    %edx,(%eax)

    mm->map_count ++;
c010395b:	8b 45 08             	mov    0x8(%ebp),%eax
c010395e:	8b 40 10             	mov    0x10(%eax),%eax
c0103961:	8d 50 01             	lea    0x1(%eax),%edx
c0103964:	8b 45 08             	mov    0x8(%ebp),%eax
c0103967:	89 50 10             	mov    %edx,0x10(%eax)
}
c010396a:	90                   	nop
c010396b:	c9                   	leave  
c010396c:	c3                   	ret    

c010396d <mm_destroy>:

// mm_destroy - free mm and mm internal fields
void
mm_destroy(struct mm_struct *mm) {
c010396d:	55                   	push   %ebp
c010396e:	89 e5                	mov    %esp,%ebp
c0103970:	83 ec 28             	sub    $0x28,%esp
    assert(mm_count(mm) == 0);
c0103973:	ff 75 08             	pushl  0x8(%ebp)
c0103976:	e8 53 fc ff ff       	call   c01035ce <mm_count>
c010397b:	83 c4 04             	add    $0x4,%esp
c010397e:	85 c0                	test   %eax,%eax
c0103980:	74 19                	je     c010399b <mm_destroy+0x2e>
c0103982:	68 59 d7 10 c0       	push   $0xc010d759
c0103987:	68 db d6 10 c0       	push   $0xc010d6db
c010398c:	68 94 00 00 00       	push   $0x94
c0103991:	68 f0 d6 10 c0       	push   $0xc010d6f0
c0103996:	e8 62 ca ff ff       	call   c01003fd <__panic>

    list_entry_t *list = &(mm->mmap_list), *le;
c010399b:	8b 45 08             	mov    0x8(%ebp),%eax
c010399e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(list)) != list) {
c01039a1:	eb 3a                	jmp    c01039dd <mm_destroy+0x70>
c01039a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01039a6:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c01039a9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01039ac:	8b 40 04             	mov    0x4(%eax),%eax
c01039af:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01039b2:	8b 12                	mov    (%edx),%edx
c01039b4:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c01039b7:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c01039ba:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01039bd:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01039c0:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c01039c3:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01039c6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01039c9:	89 10                	mov    %edx,(%eax)
        list_del(le);
        kfree(le2vma(le, list_link));  //kfree vma        
c01039cb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01039ce:	83 e8 10             	sub    $0x10,%eax
c01039d1:	83 ec 0c             	sub    $0xc,%esp
c01039d4:	50                   	push   %eax
c01039d5:	e8 a7 17 00 00       	call   c0105181 <kfree>
c01039da:	83 c4 10             	add    $0x10,%esp
c01039dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01039e0:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01039e3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01039e6:	8b 40 04             	mov    0x4(%eax),%eax
void
mm_destroy(struct mm_struct *mm) {
    assert(mm_count(mm) == 0);

    list_entry_t *list = &(mm->mmap_list), *le;
    while ((le = list_next(list)) != list) {
c01039e9:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01039ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01039ef:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01039f2:	75 af                	jne    c01039a3 <mm_destroy+0x36>
        list_del(le);
        kfree(le2vma(le, list_link));  //kfree vma        
    }
    kfree(mm); //kfree mm
c01039f4:	83 ec 0c             	sub    $0xc,%esp
c01039f7:	ff 75 08             	pushl  0x8(%ebp)
c01039fa:	e8 82 17 00 00       	call   c0105181 <kfree>
c01039ff:	83 c4 10             	add    $0x10,%esp
    mm=NULL;
c0103a02:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
}
c0103a09:	90                   	nop
c0103a0a:	c9                   	leave  
c0103a0b:	c3                   	ret    

c0103a0c <mm_map>:

int
mm_map(struct mm_struct *mm, uintptr_t addr, size_t len, uint32_t vm_flags,
       struct vma_struct **vma_store) {
c0103a0c:	55                   	push   %ebp
c0103a0d:	89 e5                	mov    %esp,%ebp
c0103a0f:	83 ec 28             	sub    $0x28,%esp
    uintptr_t start = ROUNDDOWN(addr, PGSIZE), end = ROUNDUP(addr + len, PGSIZE);
c0103a12:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103a15:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103a18:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103a1b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0103a20:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0103a23:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
c0103a2a:	8b 55 0c             	mov    0xc(%ebp),%edx
c0103a2d:	8b 45 10             	mov    0x10(%ebp),%eax
c0103a30:	01 c2                	add    %eax,%edx
c0103a32:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103a35:	01 d0                	add    %edx,%eax
c0103a37:	83 e8 01             	sub    $0x1,%eax
c0103a3a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0103a3d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103a40:	ba 00 00 00 00       	mov    $0x0,%edx
c0103a45:	f7 75 e8             	divl   -0x18(%ebp)
c0103a48:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103a4b:	29 d0                	sub    %edx,%eax
c0103a4d:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if (!USER_ACCESS(start, end)) {
c0103a50:	81 7d ec ff ff 1f 00 	cmpl   $0x1fffff,-0x14(%ebp)
c0103a57:	76 11                	jbe    c0103a6a <mm_map+0x5e>
c0103a59:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103a5c:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0103a5f:	73 09                	jae    c0103a6a <mm_map+0x5e>
c0103a61:	81 7d e0 00 00 00 b0 	cmpl   $0xb0000000,-0x20(%ebp)
c0103a68:	76 0a                	jbe    c0103a74 <mm_map+0x68>
        return -E_INVAL;
c0103a6a:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0103a6f:	e9 9e 00 00 00       	jmp    c0103b12 <mm_map+0x106>
    }

    assert(mm != NULL);
c0103a74:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0103a78:	75 19                	jne    c0103a93 <mm_map+0x87>
c0103a7a:	68 6b d7 10 c0       	push   $0xc010d76b
c0103a7f:	68 db d6 10 c0       	push   $0xc010d6db
c0103a84:	68 a7 00 00 00       	push   $0xa7
c0103a89:	68 f0 d6 10 c0       	push   $0xc010d6f0
c0103a8e:	e8 6a c9 ff ff       	call   c01003fd <__panic>

    int ret = -E_INVAL;
c0103a93:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)

    struct vma_struct *vma;
    if ((vma = find_vma(mm, start)) != NULL && end > vma->vm_start) {
c0103a9a:	83 ec 08             	sub    $0x8,%esp
c0103a9d:	ff 75 ec             	pushl  -0x14(%ebp)
c0103aa0:	ff 75 08             	pushl  0x8(%ebp)
c0103aa3:	e8 75 fc ff ff       	call   c010371d <find_vma>
c0103aa8:	83 c4 10             	add    $0x10,%esp
c0103aab:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0103aae:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0103ab2:	74 0b                	je     c0103abf <mm_map+0xb3>
c0103ab4:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103ab7:	8b 40 04             	mov    0x4(%eax),%eax
c0103aba:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0103abd:	72 4c                	jb     c0103b0b <mm_map+0xff>
        goto out;
    }
    ret = -E_NO_MEM;
c0103abf:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    if ((vma = vma_create(start, end, vm_flags)) == NULL) {
c0103ac6:	83 ec 04             	sub    $0x4,%esp
c0103ac9:	ff 75 14             	pushl  0x14(%ebp)
c0103acc:	ff 75 e0             	pushl  -0x20(%ebp)
c0103acf:	ff 75 ec             	pushl  -0x14(%ebp)
c0103ad2:	e8 0a fc ff ff       	call   c01036e1 <vma_create>
c0103ad7:	83 c4 10             	add    $0x10,%esp
c0103ada:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0103add:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0103ae1:	74 2b                	je     c0103b0e <mm_map+0x102>
        goto out;
    }
    insert_vma_struct(mm, vma);
c0103ae3:	83 ec 08             	sub    $0x8,%esp
c0103ae6:	ff 75 dc             	pushl  -0x24(%ebp)
c0103ae9:	ff 75 08             	pushl  0x8(%ebp)
c0103aec:	e8 58 fd ff ff       	call   c0103849 <insert_vma_struct>
c0103af1:	83 c4 10             	add    $0x10,%esp
    if (vma_store != NULL) {
c0103af4:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0103af8:	74 08                	je     c0103b02 <mm_map+0xf6>
        *vma_store = vma;
c0103afa:	8b 45 18             	mov    0x18(%ebp),%eax
c0103afd:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0103b00:	89 10                	mov    %edx,(%eax)
    }
    ret = 0;
c0103b02:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0103b09:	eb 04                	jmp    c0103b0f <mm_map+0x103>

    int ret = -E_INVAL;

    struct vma_struct *vma;
    if ((vma = find_vma(mm, start)) != NULL && end > vma->vm_start) {
        goto out;
c0103b0b:	90                   	nop
c0103b0c:	eb 01                	jmp    c0103b0f <mm_map+0x103>
    }
    ret = -E_NO_MEM;

    if ((vma = vma_create(start, end, vm_flags)) == NULL) {
        goto out;
c0103b0e:	90                   	nop
        *vma_store = vma;
    }
    ret = 0;

out:
    return ret;
c0103b0f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0103b12:	c9                   	leave  
c0103b13:	c3                   	ret    

c0103b14 <dup_mmap>:

int
dup_mmap(struct mm_struct *to, struct mm_struct *from) {
c0103b14:	55                   	push   %ebp
c0103b15:	89 e5                	mov    %esp,%ebp
c0103b17:	53                   	push   %ebx
c0103b18:	83 ec 24             	sub    $0x24,%esp
    assert(to != NULL && from != NULL);
c0103b1b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0103b1f:	74 06                	je     c0103b27 <dup_mmap+0x13>
c0103b21:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0103b25:	75 19                	jne    c0103b40 <dup_mmap+0x2c>
c0103b27:	68 76 d7 10 c0       	push   $0xc010d776
c0103b2c:	68 db d6 10 c0       	push   $0xc010d6db
c0103b31:	68 c0 00 00 00       	push   $0xc0
c0103b36:	68 f0 d6 10 c0       	push   $0xc010d6f0
c0103b3b:	e8 bd c8 ff ff       	call   c01003fd <__panic>
    list_entry_t *list = &(from->mmap_list), *le = list;
c0103b40:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103b43:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103b46:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103b49:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_prev(le)) != list) {
c0103b4c:	e9 86 00 00 00       	jmp    c0103bd7 <dup_mmap+0xc3>
        struct vma_struct *vma, *nvma;
        vma = le2vma(le, list_link);
c0103b51:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103b54:	83 e8 10             	sub    $0x10,%eax
c0103b57:	89 45 ec             	mov    %eax,-0x14(%ebp)
        nvma = vma_create(vma->vm_start, vma->vm_end, vma->vm_flags);
c0103b5a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103b5d:	8b 48 0c             	mov    0xc(%eax),%ecx
c0103b60:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103b63:	8b 50 08             	mov    0x8(%eax),%edx
c0103b66:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103b69:	8b 40 04             	mov    0x4(%eax),%eax
c0103b6c:	83 ec 04             	sub    $0x4,%esp
c0103b6f:	51                   	push   %ecx
c0103b70:	52                   	push   %edx
c0103b71:	50                   	push   %eax
c0103b72:	e8 6a fb ff ff       	call   c01036e1 <vma_create>
c0103b77:	83 c4 10             	add    $0x10,%esp
c0103b7a:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (nvma == NULL) {
c0103b7d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0103b81:	75 07                	jne    c0103b8a <dup_mmap+0x76>
            return -E_NO_MEM;
c0103b83:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0103b88:	eb 6c                	jmp    c0103bf6 <dup_mmap+0xe2>
        }

        insert_vma_struct(to, nvma);
c0103b8a:	83 ec 08             	sub    $0x8,%esp
c0103b8d:	ff 75 e8             	pushl  -0x18(%ebp)
c0103b90:	ff 75 08             	pushl  0x8(%ebp)
c0103b93:	e8 b1 fc ff ff       	call   c0103849 <insert_vma_struct>
c0103b98:	83 c4 10             	add    $0x10,%esp

        bool share = 0;
c0103b9b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
c0103ba2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103ba5:	8b 58 08             	mov    0x8(%eax),%ebx
c0103ba8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103bab:	8b 48 04             	mov    0x4(%eax),%ecx
c0103bae:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103bb1:	8b 50 0c             	mov    0xc(%eax),%edx
c0103bb4:	8b 45 08             	mov    0x8(%ebp),%eax
c0103bb7:	8b 40 0c             	mov    0xc(%eax),%eax
c0103bba:	83 ec 0c             	sub    $0xc,%esp
c0103bbd:	ff 75 e4             	pushl  -0x1c(%ebp)
c0103bc0:	53                   	push   %ebx
c0103bc1:	51                   	push   %ecx
c0103bc2:	52                   	push   %edx
c0103bc3:	50                   	push   %eax
c0103bc4:	e8 03 3f 00 00       	call   c0107acc <copy_range>
c0103bc9:	83 c4 20             	add    $0x20,%esp
c0103bcc:	85 c0                	test   %eax,%eax
c0103bce:	74 07                	je     c0103bd7 <dup_mmap+0xc3>
            return -E_NO_MEM;
c0103bd0:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0103bd5:	eb 1f                	jmp    c0103bf6 <dup_mmap+0xe2>
c0103bd7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103bda:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c0103bdd:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103be0:	8b 00                	mov    (%eax),%eax

int
dup_mmap(struct mm_struct *to, struct mm_struct *from) {
    assert(to != NULL && from != NULL);
    list_entry_t *list = &(from->mmap_list), *le = list;
    while ((le = list_prev(le)) != list) {
c0103be2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103be5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103be8:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0103beb:	0f 85 60 ff ff ff    	jne    c0103b51 <dup_mmap+0x3d>
        bool share = 0;
        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
            return -E_NO_MEM;
        }
    }
    return 0;
c0103bf1:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0103bf6:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0103bf9:	c9                   	leave  
c0103bfa:	c3                   	ret    

c0103bfb <exit_mmap>:

void
exit_mmap(struct mm_struct *mm) {
c0103bfb:	55                   	push   %ebp
c0103bfc:	89 e5                	mov    %esp,%ebp
c0103bfe:	83 ec 28             	sub    $0x28,%esp
    assert(mm != NULL && mm_count(mm) == 0);
c0103c01:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0103c05:	74 0f                	je     c0103c16 <exit_mmap+0x1b>
c0103c07:	ff 75 08             	pushl  0x8(%ebp)
c0103c0a:	e8 bf f9 ff ff       	call   c01035ce <mm_count>
c0103c0f:	83 c4 04             	add    $0x4,%esp
c0103c12:	85 c0                	test   %eax,%eax
c0103c14:	74 19                	je     c0103c2f <exit_mmap+0x34>
c0103c16:	68 94 d7 10 c0       	push   $0xc010d794
c0103c1b:	68 db d6 10 c0       	push   $0xc010d6db
c0103c20:	68 d6 00 00 00       	push   $0xd6
c0103c25:	68 f0 d6 10 c0       	push   $0xc010d6f0
c0103c2a:	e8 ce c7 ff ff       	call   c01003fd <__panic>
    pde_t *pgdir = mm->pgdir;
c0103c2f:	8b 45 08             	mov    0x8(%ebp),%eax
c0103c32:	8b 40 0c             	mov    0xc(%eax),%eax
c0103c35:	89 45 f0             	mov    %eax,-0x10(%ebp)
    list_entry_t *list = &(mm->mmap_list), *le = list;
c0103c38:	8b 45 08             	mov    0x8(%ebp),%eax
c0103c3b:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0103c3e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103c41:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c0103c44:	eb 25                	jmp    c0103c6b <exit_mmap+0x70>
        struct vma_struct *vma = le2vma(le, list_link);
c0103c46:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103c49:	83 e8 10             	sub    $0x10,%eax
c0103c4c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
c0103c4f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103c52:	8b 50 08             	mov    0x8(%eax),%edx
c0103c55:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103c58:	8b 40 04             	mov    0x4(%eax),%eax
c0103c5b:	83 ec 04             	sub    $0x4,%esp
c0103c5e:	52                   	push   %edx
c0103c5f:	50                   	push   %eax
c0103c60:	ff 75 f0             	pushl  -0x10(%ebp)
c0103c63:	e8 9d 3c 00 00       	call   c0107905 <unmap_range>
c0103c68:	83 c4 10             	add    $0x10,%esp
c0103c6b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103c6e:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0103c71:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103c74:	8b 40 04             	mov    0x4(%eax),%eax
void
exit_mmap(struct mm_struct *mm) {
    assert(mm != NULL && mm_count(mm) == 0);
    pde_t *pgdir = mm->pgdir;
    list_entry_t *list = &(mm->mmap_list), *le = list;
    while ((le = list_next(le)) != list) {
c0103c77:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103c7a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103c7d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0103c80:	75 c4                	jne    c0103c46 <exit_mmap+0x4b>
        struct vma_struct *vma = le2vma(le, list_link);
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
    }
    while ((le = list_next(le)) != list) {
c0103c82:	eb 25                	jmp    c0103ca9 <exit_mmap+0xae>
        struct vma_struct *vma = le2vma(le, list_link);
c0103c84:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103c87:	83 e8 10             	sub    $0x10,%eax
c0103c8a:	89 45 e0             	mov    %eax,-0x20(%ebp)
        exit_range(pgdir, vma->vm_start, vma->vm_end);
c0103c8d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103c90:	8b 50 08             	mov    0x8(%eax),%edx
c0103c93:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103c96:	8b 40 04             	mov    0x4(%eax),%eax
c0103c99:	83 ec 04             	sub    $0x4,%esp
c0103c9c:	52                   	push   %edx
c0103c9d:	50                   	push   %eax
c0103c9e:	ff 75 f0             	pushl  -0x10(%ebp)
c0103ca1:	e8 32 3d 00 00       	call   c01079d8 <exit_range>
c0103ca6:	83 c4 10             	add    $0x10,%esp
c0103ca9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103cac:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0103caf:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103cb2:	8b 40 04             	mov    0x4(%eax),%eax
    list_entry_t *list = &(mm->mmap_list), *le = list;
    while ((le = list_next(le)) != list) {
        struct vma_struct *vma = le2vma(le, list_link);
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
    }
    while ((le = list_next(le)) != list) {
c0103cb5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103cb8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103cbb:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0103cbe:	75 c4                	jne    c0103c84 <exit_mmap+0x89>
        struct vma_struct *vma = le2vma(le, list_link);
        exit_range(pgdir, vma->vm_start, vma->vm_end);
    }
}
c0103cc0:	90                   	nop
c0103cc1:	c9                   	leave  
c0103cc2:	c3                   	ret    

c0103cc3 <copy_from_user>:

bool
copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable) {
c0103cc3:	55                   	push   %ebp
c0103cc4:	89 e5                	mov    %esp,%ebp
c0103cc6:	83 ec 08             	sub    $0x8,%esp
    if (!user_mem_check(mm, (uintptr_t)src, len, writable)) {
c0103cc9:	8b 45 10             	mov    0x10(%ebp),%eax
c0103ccc:	ff 75 18             	pushl  0x18(%ebp)
c0103ccf:	ff 75 14             	pushl  0x14(%ebp)
c0103cd2:	50                   	push   %eax
c0103cd3:	ff 75 08             	pushl  0x8(%ebp)
c0103cd6:	e8 b1 08 00 00       	call   c010458c <user_mem_check>
c0103cdb:	83 c4 10             	add    $0x10,%esp
c0103cde:	85 c0                	test   %eax,%eax
c0103ce0:	75 07                	jne    c0103ce9 <copy_from_user+0x26>
        return 0;
c0103ce2:	b8 00 00 00 00       	mov    $0x0,%eax
c0103ce7:	eb 19                	jmp    c0103d02 <copy_from_user+0x3f>
    }
    memcpy(dst, src, len);
c0103ce9:	83 ec 04             	sub    $0x4,%esp
c0103cec:	ff 75 14             	pushl  0x14(%ebp)
c0103cef:	ff 75 10             	pushl  0x10(%ebp)
c0103cf2:	ff 75 0c             	pushl  0xc(%ebp)
c0103cf5:	e8 7e 88 00 00       	call   c010c578 <memcpy>
c0103cfa:	83 c4 10             	add    $0x10,%esp
    return 1;
c0103cfd:	b8 01 00 00 00       	mov    $0x1,%eax
}
c0103d02:	c9                   	leave  
c0103d03:	c3                   	ret    

c0103d04 <copy_to_user>:

bool
copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len) {
c0103d04:	55                   	push   %ebp
c0103d05:	89 e5                	mov    %esp,%ebp
c0103d07:	83 ec 08             	sub    $0x8,%esp
    if (!user_mem_check(mm, (uintptr_t)dst, len, 1)) {
c0103d0a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103d0d:	6a 01                	push   $0x1
c0103d0f:	ff 75 14             	pushl  0x14(%ebp)
c0103d12:	50                   	push   %eax
c0103d13:	ff 75 08             	pushl  0x8(%ebp)
c0103d16:	e8 71 08 00 00       	call   c010458c <user_mem_check>
c0103d1b:	83 c4 10             	add    $0x10,%esp
c0103d1e:	85 c0                	test   %eax,%eax
c0103d20:	75 07                	jne    c0103d29 <copy_to_user+0x25>
        return 0;
c0103d22:	b8 00 00 00 00       	mov    $0x0,%eax
c0103d27:	eb 19                	jmp    c0103d42 <copy_to_user+0x3e>
    }
    memcpy(dst, src, len);
c0103d29:	83 ec 04             	sub    $0x4,%esp
c0103d2c:	ff 75 14             	pushl  0x14(%ebp)
c0103d2f:	ff 75 10             	pushl  0x10(%ebp)
c0103d32:	ff 75 0c             	pushl  0xc(%ebp)
c0103d35:	e8 3e 88 00 00       	call   c010c578 <memcpy>
c0103d3a:	83 c4 10             	add    $0x10,%esp
    return 1;
c0103d3d:	b8 01 00 00 00       	mov    $0x1,%eax
}
c0103d42:	c9                   	leave  
c0103d43:	c3                   	ret    

c0103d44 <vmm_init>:

// vmm_init - initialize virtual memory management
//          - now just call check_vmm to check correctness of vmm
void
vmm_init(void) {
c0103d44:	55                   	push   %ebp
c0103d45:	89 e5                	mov    %esp,%ebp
c0103d47:	83 ec 08             	sub    $0x8,%esp
    check_vmm();
c0103d4a:	e8 03 00 00 00       	call   c0103d52 <check_vmm>
}
c0103d4f:	90                   	nop
c0103d50:	c9                   	leave  
c0103d51:	c3                   	ret    

c0103d52 <check_vmm>:

// check_vmm - check correctness of vmm
static void
check_vmm(void) {
c0103d52:	55                   	push   %ebp
c0103d53:	89 e5                	mov    %esp,%ebp
c0103d55:	83 ec 18             	sub    $0x18,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0103d58:	e8 d7 33 00 00       	call   c0107134 <nr_free_pages>
c0103d5d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    check_vma_struct();
c0103d60:	e8 18 00 00 00       	call   c0103d7d <check_vma_struct>
    check_pgfault();
c0103d65:	e8 10 04 00 00       	call   c010417a <check_pgfault>

    cprintf("check_vmm() succeeded.\n");
c0103d6a:	83 ec 0c             	sub    $0xc,%esp
c0103d6d:	68 b4 d7 10 c0       	push   $0xc010d7b4
c0103d72:	e8 20 c5 ff ff       	call   c0100297 <cprintf>
c0103d77:	83 c4 10             	add    $0x10,%esp
}
c0103d7a:	90                   	nop
c0103d7b:	c9                   	leave  
c0103d7c:	c3                   	ret    

c0103d7d <check_vma_struct>:

static void
check_vma_struct(void) {
c0103d7d:	55                   	push   %ebp
c0103d7e:	89 e5                	mov    %esp,%ebp
c0103d80:	83 ec 58             	sub    $0x58,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0103d83:	e8 ac 33 00 00       	call   c0107134 <nr_free_pages>
c0103d88:	89 45 ec             	mov    %eax,-0x14(%ebp)

    struct mm_struct *mm = mm_create();
c0103d8b:	e8 b1 f8 ff ff       	call   c0103641 <mm_create>
c0103d90:	89 45 e8             	mov    %eax,-0x18(%ebp)
    assert(mm != NULL);
c0103d93:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0103d97:	75 19                	jne    c0103db2 <check_vma_struct+0x35>
c0103d99:	68 6b d7 10 c0       	push   $0xc010d76b
c0103d9e:	68 db d6 10 c0       	push   $0xc010d6db
c0103da3:	68 0c 01 00 00       	push   $0x10c
c0103da8:	68 f0 d6 10 c0       	push   $0xc010d6f0
c0103dad:	e8 4b c6 ff ff       	call   c01003fd <__panic>

    int step1 = 10, step2 = step1 * 10;
c0103db2:	c7 45 e4 0a 00 00 00 	movl   $0xa,-0x1c(%ebp)
c0103db9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0103dbc:	89 d0                	mov    %edx,%eax
c0103dbe:	c1 e0 02             	shl    $0x2,%eax
c0103dc1:	01 d0                	add    %edx,%eax
c0103dc3:	01 c0                	add    %eax,%eax
c0103dc5:	89 45 e0             	mov    %eax,-0x20(%ebp)

    int i;
    for (i = step1; i >= 1; i --) {
c0103dc8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103dcb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103dce:	eb 5f                	jmp    c0103e2f <check_vma_struct+0xb2>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c0103dd0:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0103dd3:	89 d0                	mov    %edx,%eax
c0103dd5:	c1 e0 02             	shl    $0x2,%eax
c0103dd8:	01 d0                	add    %edx,%eax
c0103dda:	83 c0 02             	add    $0x2,%eax
c0103ddd:	89 c1                	mov    %eax,%ecx
c0103ddf:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0103de2:	89 d0                	mov    %edx,%eax
c0103de4:	c1 e0 02             	shl    $0x2,%eax
c0103de7:	01 d0                	add    %edx,%eax
c0103de9:	83 ec 04             	sub    $0x4,%esp
c0103dec:	6a 00                	push   $0x0
c0103dee:	51                   	push   %ecx
c0103def:	50                   	push   %eax
c0103df0:	e8 ec f8 ff ff       	call   c01036e1 <vma_create>
c0103df5:	83 c4 10             	add    $0x10,%esp
c0103df8:	89 45 dc             	mov    %eax,-0x24(%ebp)
        assert(vma != NULL);
c0103dfb:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0103dff:	75 19                	jne    c0103e1a <check_vma_struct+0x9d>
c0103e01:	68 cc d7 10 c0       	push   $0xc010d7cc
c0103e06:	68 db d6 10 c0       	push   $0xc010d6db
c0103e0b:	68 13 01 00 00       	push   $0x113
c0103e10:	68 f0 d6 10 c0       	push   $0xc010d6f0
c0103e15:	e8 e3 c5 ff ff       	call   c01003fd <__panic>
        insert_vma_struct(mm, vma);
c0103e1a:	83 ec 08             	sub    $0x8,%esp
c0103e1d:	ff 75 dc             	pushl  -0x24(%ebp)
c0103e20:	ff 75 e8             	pushl  -0x18(%ebp)
c0103e23:	e8 21 fa ff ff       	call   c0103849 <insert_vma_struct>
c0103e28:	83 c4 10             	add    $0x10,%esp
    assert(mm != NULL);

    int step1 = 10, step2 = step1 * 10;

    int i;
    for (i = step1; i >= 1; i --) {
c0103e2b:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0103e2f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0103e33:	7f 9b                	jg     c0103dd0 <check_vma_struct+0x53>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    for (i = step1 + 1; i <= step2; i ++) {
c0103e35:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103e38:	83 c0 01             	add    $0x1,%eax
c0103e3b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103e3e:	eb 5f                	jmp    c0103e9f <check_vma_struct+0x122>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c0103e40:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0103e43:	89 d0                	mov    %edx,%eax
c0103e45:	c1 e0 02             	shl    $0x2,%eax
c0103e48:	01 d0                	add    %edx,%eax
c0103e4a:	83 c0 02             	add    $0x2,%eax
c0103e4d:	89 c1                	mov    %eax,%ecx
c0103e4f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0103e52:	89 d0                	mov    %edx,%eax
c0103e54:	c1 e0 02             	shl    $0x2,%eax
c0103e57:	01 d0                	add    %edx,%eax
c0103e59:	83 ec 04             	sub    $0x4,%esp
c0103e5c:	6a 00                	push   $0x0
c0103e5e:	51                   	push   %ecx
c0103e5f:	50                   	push   %eax
c0103e60:	e8 7c f8 ff ff       	call   c01036e1 <vma_create>
c0103e65:	83 c4 10             	add    $0x10,%esp
c0103e68:	89 45 d8             	mov    %eax,-0x28(%ebp)
        assert(vma != NULL);
c0103e6b:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c0103e6f:	75 19                	jne    c0103e8a <check_vma_struct+0x10d>
c0103e71:	68 cc d7 10 c0       	push   $0xc010d7cc
c0103e76:	68 db d6 10 c0       	push   $0xc010d6db
c0103e7b:	68 19 01 00 00       	push   $0x119
c0103e80:	68 f0 d6 10 c0       	push   $0xc010d6f0
c0103e85:	e8 73 c5 ff ff       	call   c01003fd <__panic>
        insert_vma_struct(mm, vma);
c0103e8a:	83 ec 08             	sub    $0x8,%esp
c0103e8d:	ff 75 d8             	pushl  -0x28(%ebp)
c0103e90:	ff 75 e8             	pushl  -0x18(%ebp)
c0103e93:	e8 b1 f9 ff ff       	call   c0103849 <insert_vma_struct>
c0103e98:	83 c4 10             	add    $0x10,%esp
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    for (i = step1 + 1; i <= step2; i ++) {
c0103e9b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0103e9f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103ea2:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0103ea5:	7e 99                	jle    c0103e40 <check_vma_struct+0xc3>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    list_entry_t *le = list_next(&(mm->mmap_list));
c0103ea7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103eaa:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c0103ead:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0103eb0:	8b 40 04             	mov    0x4(%eax),%eax
c0103eb3:	89 45 f0             	mov    %eax,-0x10(%ebp)

    for (i = 1; i <= step2; i ++) {
c0103eb6:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
c0103ebd:	e9 81 00 00 00       	jmp    c0103f43 <check_vma_struct+0x1c6>
        assert(le != &(mm->mmap_list));
c0103ec2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103ec5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0103ec8:	75 19                	jne    c0103ee3 <check_vma_struct+0x166>
c0103eca:	68 d8 d7 10 c0       	push   $0xc010d7d8
c0103ecf:	68 db d6 10 c0       	push   $0xc010d6db
c0103ed4:	68 20 01 00 00       	push   $0x120
c0103ed9:	68 f0 d6 10 c0       	push   $0xc010d6f0
c0103ede:	e8 1a c5 ff ff       	call   c01003fd <__panic>
        struct vma_struct *mmap = le2vma(le, list_link);
c0103ee3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103ee6:	83 e8 10             	sub    $0x10,%eax
c0103ee9:	89 45 d0             	mov    %eax,-0x30(%ebp)
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
c0103eec:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0103eef:	8b 48 04             	mov    0x4(%eax),%ecx
c0103ef2:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0103ef5:	89 d0                	mov    %edx,%eax
c0103ef7:	c1 e0 02             	shl    $0x2,%eax
c0103efa:	01 d0                	add    %edx,%eax
c0103efc:	39 c1                	cmp    %eax,%ecx
c0103efe:	75 17                	jne    c0103f17 <check_vma_struct+0x19a>
c0103f00:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0103f03:	8b 48 08             	mov    0x8(%eax),%ecx
c0103f06:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0103f09:	89 d0                	mov    %edx,%eax
c0103f0b:	c1 e0 02             	shl    $0x2,%eax
c0103f0e:	01 d0                	add    %edx,%eax
c0103f10:	83 c0 02             	add    $0x2,%eax
c0103f13:	39 c1                	cmp    %eax,%ecx
c0103f15:	74 19                	je     c0103f30 <check_vma_struct+0x1b3>
c0103f17:	68 f0 d7 10 c0       	push   $0xc010d7f0
c0103f1c:	68 db d6 10 c0       	push   $0xc010d6db
c0103f21:	68 22 01 00 00       	push   $0x122
c0103f26:	68 f0 d6 10 c0       	push   $0xc010d6f0
c0103f2b:	e8 cd c4 ff ff       	call   c01003fd <__panic>
c0103f30:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103f33:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c0103f36:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0103f39:	8b 40 04             	mov    0x4(%eax),%eax
        le = list_next(le);
c0103f3c:	89 45 f0             	mov    %eax,-0x10(%ebp)
        insert_vma_struct(mm, vma);
    }

    list_entry_t *le = list_next(&(mm->mmap_list));

    for (i = 1; i <= step2; i ++) {
c0103f3f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0103f43:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103f46:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0103f49:	0f 8e 73 ff ff ff    	jle    c0103ec2 <check_vma_struct+0x145>
        struct vma_struct *mmap = le2vma(le, list_link);
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
        le = list_next(le);
    }

    for (i = 5; i <= 5 * step2; i +=5) {
c0103f4f:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
c0103f56:	e9 80 01 00 00       	jmp    c01040db <check_vma_struct+0x35e>
        struct vma_struct *vma1 = find_vma(mm, i);
c0103f5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103f5e:	83 ec 08             	sub    $0x8,%esp
c0103f61:	50                   	push   %eax
c0103f62:	ff 75 e8             	pushl  -0x18(%ebp)
c0103f65:	e8 b3 f7 ff ff       	call   c010371d <find_vma>
c0103f6a:	83 c4 10             	add    $0x10,%esp
c0103f6d:	89 45 cc             	mov    %eax,-0x34(%ebp)
        assert(vma1 != NULL);
c0103f70:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0103f74:	75 19                	jne    c0103f8f <check_vma_struct+0x212>
c0103f76:	68 25 d8 10 c0       	push   $0xc010d825
c0103f7b:	68 db d6 10 c0       	push   $0xc010d6db
c0103f80:	68 28 01 00 00       	push   $0x128
c0103f85:	68 f0 d6 10 c0       	push   $0xc010d6f0
c0103f8a:	e8 6e c4 ff ff       	call   c01003fd <__panic>
        struct vma_struct *vma2 = find_vma(mm, i+1);
c0103f8f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103f92:	83 c0 01             	add    $0x1,%eax
c0103f95:	83 ec 08             	sub    $0x8,%esp
c0103f98:	50                   	push   %eax
c0103f99:	ff 75 e8             	pushl  -0x18(%ebp)
c0103f9c:	e8 7c f7 ff ff       	call   c010371d <find_vma>
c0103fa1:	83 c4 10             	add    $0x10,%esp
c0103fa4:	89 45 c8             	mov    %eax,-0x38(%ebp)
        assert(vma2 != NULL);
c0103fa7:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c0103fab:	75 19                	jne    c0103fc6 <check_vma_struct+0x249>
c0103fad:	68 32 d8 10 c0       	push   $0xc010d832
c0103fb2:	68 db d6 10 c0       	push   $0xc010d6db
c0103fb7:	68 2a 01 00 00       	push   $0x12a
c0103fbc:	68 f0 d6 10 c0       	push   $0xc010d6f0
c0103fc1:	e8 37 c4 ff ff       	call   c01003fd <__panic>
        struct vma_struct *vma3 = find_vma(mm, i+2);
c0103fc6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103fc9:	83 c0 02             	add    $0x2,%eax
c0103fcc:	83 ec 08             	sub    $0x8,%esp
c0103fcf:	50                   	push   %eax
c0103fd0:	ff 75 e8             	pushl  -0x18(%ebp)
c0103fd3:	e8 45 f7 ff ff       	call   c010371d <find_vma>
c0103fd8:	83 c4 10             	add    $0x10,%esp
c0103fdb:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        assert(vma3 == NULL);
c0103fde:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
c0103fe2:	74 19                	je     c0103ffd <check_vma_struct+0x280>
c0103fe4:	68 3f d8 10 c0       	push   $0xc010d83f
c0103fe9:	68 db d6 10 c0       	push   $0xc010d6db
c0103fee:	68 2c 01 00 00       	push   $0x12c
c0103ff3:	68 f0 d6 10 c0       	push   $0xc010d6f0
c0103ff8:	e8 00 c4 ff ff       	call   c01003fd <__panic>
        struct vma_struct *vma4 = find_vma(mm, i+3);
c0103ffd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104000:	83 c0 03             	add    $0x3,%eax
c0104003:	83 ec 08             	sub    $0x8,%esp
c0104006:	50                   	push   %eax
c0104007:	ff 75 e8             	pushl  -0x18(%ebp)
c010400a:	e8 0e f7 ff ff       	call   c010371d <find_vma>
c010400f:	83 c4 10             	add    $0x10,%esp
c0104012:	89 45 c0             	mov    %eax,-0x40(%ebp)
        assert(vma4 == NULL);
c0104015:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
c0104019:	74 19                	je     c0104034 <check_vma_struct+0x2b7>
c010401b:	68 4c d8 10 c0       	push   $0xc010d84c
c0104020:	68 db d6 10 c0       	push   $0xc010d6db
c0104025:	68 2e 01 00 00       	push   $0x12e
c010402a:	68 f0 d6 10 c0       	push   $0xc010d6f0
c010402f:	e8 c9 c3 ff ff       	call   c01003fd <__panic>
        struct vma_struct *vma5 = find_vma(mm, i+4);
c0104034:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104037:	83 c0 04             	add    $0x4,%eax
c010403a:	83 ec 08             	sub    $0x8,%esp
c010403d:	50                   	push   %eax
c010403e:	ff 75 e8             	pushl  -0x18(%ebp)
c0104041:	e8 d7 f6 ff ff       	call   c010371d <find_vma>
c0104046:	83 c4 10             	add    $0x10,%esp
c0104049:	89 45 bc             	mov    %eax,-0x44(%ebp)
        assert(vma5 == NULL);
c010404c:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0104050:	74 19                	je     c010406b <check_vma_struct+0x2ee>
c0104052:	68 59 d8 10 c0       	push   $0xc010d859
c0104057:	68 db d6 10 c0       	push   $0xc010d6db
c010405c:	68 30 01 00 00       	push   $0x130
c0104061:	68 f0 d6 10 c0       	push   $0xc010d6f0
c0104066:	e8 92 c3 ff ff       	call   c01003fd <__panic>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
c010406b:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010406e:	8b 50 04             	mov    0x4(%eax),%edx
c0104071:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104074:	39 c2                	cmp    %eax,%edx
c0104076:	75 10                	jne    c0104088 <check_vma_struct+0x30b>
c0104078:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010407b:	8b 40 08             	mov    0x8(%eax),%eax
c010407e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0104081:	83 c2 02             	add    $0x2,%edx
c0104084:	39 d0                	cmp    %edx,%eax
c0104086:	74 19                	je     c01040a1 <check_vma_struct+0x324>
c0104088:	68 68 d8 10 c0       	push   $0xc010d868
c010408d:	68 db d6 10 c0       	push   $0xc010d6db
c0104092:	68 32 01 00 00       	push   $0x132
c0104097:	68 f0 d6 10 c0       	push   $0xc010d6f0
c010409c:	e8 5c c3 ff ff       	call   c01003fd <__panic>
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
c01040a1:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01040a4:	8b 50 04             	mov    0x4(%eax),%edx
c01040a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01040aa:	39 c2                	cmp    %eax,%edx
c01040ac:	75 10                	jne    c01040be <check_vma_struct+0x341>
c01040ae:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01040b1:	8b 40 08             	mov    0x8(%eax),%eax
c01040b4:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01040b7:	83 c2 02             	add    $0x2,%edx
c01040ba:	39 d0                	cmp    %edx,%eax
c01040bc:	74 19                	je     c01040d7 <check_vma_struct+0x35a>
c01040be:	68 98 d8 10 c0       	push   $0xc010d898
c01040c3:	68 db d6 10 c0       	push   $0xc010d6db
c01040c8:	68 33 01 00 00       	push   $0x133
c01040cd:	68 f0 d6 10 c0       	push   $0xc010d6f0
c01040d2:	e8 26 c3 ff ff       	call   c01003fd <__panic>
        struct vma_struct *mmap = le2vma(le, list_link);
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
        le = list_next(le);
    }

    for (i = 5; i <= 5 * step2; i +=5) {
c01040d7:	83 45 f4 05          	addl   $0x5,-0xc(%ebp)
c01040db:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01040de:	89 d0                	mov    %edx,%eax
c01040e0:	c1 e0 02             	shl    $0x2,%eax
c01040e3:	01 d0                	add    %edx,%eax
c01040e5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01040e8:	0f 8d 6d fe ff ff    	jge    c0103f5b <check_vma_struct+0x1de>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
    }

    for (i =4; i>=0; i--) {
c01040ee:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%ebp)
c01040f5:	eb 5c                	jmp    c0104153 <check_vma_struct+0x3d6>
        struct vma_struct *vma_below_5= find_vma(mm,i);
c01040f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01040fa:	83 ec 08             	sub    $0x8,%esp
c01040fd:	50                   	push   %eax
c01040fe:	ff 75 e8             	pushl  -0x18(%ebp)
c0104101:	e8 17 f6 ff ff       	call   c010371d <find_vma>
c0104106:	83 c4 10             	add    $0x10,%esp
c0104109:	89 45 b8             	mov    %eax,-0x48(%ebp)
        if (vma_below_5 != NULL ) {
c010410c:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
c0104110:	74 1e                	je     c0104130 <check_vma_struct+0x3b3>
           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
c0104112:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0104115:	8b 50 08             	mov    0x8(%eax),%edx
c0104118:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010411b:	8b 40 04             	mov    0x4(%eax),%eax
c010411e:	52                   	push   %edx
c010411f:	50                   	push   %eax
c0104120:	ff 75 f4             	pushl  -0xc(%ebp)
c0104123:	68 c8 d8 10 c0       	push   $0xc010d8c8
c0104128:	e8 6a c1 ff ff       	call   c0100297 <cprintf>
c010412d:	83 c4 10             	add    $0x10,%esp
        }
        assert(vma_below_5 == NULL);
c0104130:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
c0104134:	74 19                	je     c010414f <check_vma_struct+0x3d2>
c0104136:	68 ed d8 10 c0       	push   $0xc010d8ed
c010413b:	68 db d6 10 c0       	push   $0xc010d6db
c0104140:	68 3b 01 00 00       	push   $0x13b
c0104145:	68 f0 d6 10 c0       	push   $0xc010d6f0
c010414a:	e8 ae c2 ff ff       	call   c01003fd <__panic>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
    }

    for (i =4; i>=0; i--) {
c010414f:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0104153:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104157:	79 9e                	jns    c01040f7 <check_vma_struct+0x37a>
           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
        }
        assert(vma_below_5 == NULL);
    }

    mm_destroy(mm);
c0104159:	83 ec 0c             	sub    $0xc,%esp
c010415c:	ff 75 e8             	pushl  -0x18(%ebp)
c010415f:	e8 09 f8 ff ff       	call   c010396d <mm_destroy>
c0104164:	83 c4 10             	add    $0x10,%esp

    cprintf("check_vma_struct() succeeded!\n");
c0104167:	83 ec 0c             	sub    $0xc,%esp
c010416a:	68 04 d9 10 c0       	push   $0xc010d904
c010416f:	e8 23 c1 ff ff       	call   c0100297 <cprintf>
c0104174:	83 c4 10             	add    $0x10,%esp
}
c0104177:	90                   	nop
c0104178:	c9                   	leave  
c0104179:	c3                   	ret    

c010417a <check_pgfault>:

struct mm_struct *check_mm_struct;

// check_pgfault - check correctness of pgfault handler
static void
check_pgfault(void) {
c010417a:	55                   	push   %ebp
c010417b:	89 e5                	mov    %esp,%ebp
c010417d:	83 ec 28             	sub    $0x28,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0104180:	e8 af 2f 00 00       	call   c0107134 <nr_free_pages>
c0104185:	89 45 ec             	mov    %eax,-0x14(%ebp)

    check_mm_struct = mm_create();
c0104188:	e8 b4 f4 ff ff       	call   c0103641 <mm_create>
c010418d:	a3 10 71 1c c0       	mov    %eax,0xc01c7110
    assert(check_mm_struct != NULL);
c0104192:	a1 10 71 1c c0       	mov    0xc01c7110,%eax
c0104197:	85 c0                	test   %eax,%eax
c0104199:	75 19                	jne    c01041b4 <check_pgfault+0x3a>
c010419b:	68 23 d9 10 c0       	push   $0xc010d923
c01041a0:	68 db d6 10 c0       	push   $0xc010d6db
c01041a5:	68 4b 01 00 00       	push   $0x14b
c01041aa:	68 f0 d6 10 c0       	push   $0xc010d6f0
c01041af:	e8 49 c2 ff ff       	call   c01003fd <__panic>

    struct mm_struct *mm = check_mm_struct;
c01041b4:	a1 10 71 1c c0       	mov    0xc01c7110,%eax
c01041b9:	89 45 e8             	mov    %eax,-0x18(%ebp)
    pde_t *pgdir = mm->pgdir = boot_pgdir;
c01041bc:	8b 15 20 1a 13 c0    	mov    0xc0131a20,%edx
c01041c2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01041c5:	89 50 0c             	mov    %edx,0xc(%eax)
c01041c8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01041cb:	8b 40 0c             	mov    0xc(%eax),%eax
c01041ce:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(pgdir[0] == 0);
c01041d1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01041d4:	8b 00                	mov    (%eax),%eax
c01041d6:	85 c0                	test   %eax,%eax
c01041d8:	74 19                	je     c01041f3 <check_pgfault+0x79>
c01041da:	68 3b d9 10 c0       	push   $0xc010d93b
c01041df:	68 db d6 10 c0       	push   $0xc010d6db
c01041e4:	68 4f 01 00 00       	push   $0x14f
c01041e9:	68 f0 d6 10 c0       	push   $0xc010d6f0
c01041ee:	e8 0a c2 ff ff       	call   c01003fd <__panic>

    struct vma_struct *vma = vma_create(0, PTSIZE, VM_WRITE);
c01041f3:	83 ec 04             	sub    $0x4,%esp
c01041f6:	6a 02                	push   $0x2
c01041f8:	68 00 00 40 00       	push   $0x400000
c01041fd:	6a 00                	push   $0x0
c01041ff:	e8 dd f4 ff ff       	call   c01036e1 <vma_create>
c0104204:	83 c4 10             	add    $0x10,%esp
c0104207:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(vma != NULL);
c010420a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c010420e:	75 19                	jne    c0104229 <check_pgfault+0xaf>
c0104210:	68 cc d7 10 c0       	push   $0xc010d7cc
c0104215:	68 db d6 10 c0       	push   $0xc010d6db
c010421a:	68 52 01 00 00       	push   $0x152
c010421f:	68 f0 d6 10 c0       	push   $0xc010d6f0
c0104224:	e8 d4 c1 ff ff       	call   c01003fd <__panic>

    insert_vma_struct(mm, vma);
c0104229:	83 ec 08             	sub    $0x8,%esp
c010422c:	ff 75 e0             	pushl  -0x20(%ebp)
c010422f:	ff 75 e8             	pushl  -0x18(%ebp)
c0104232:	e8 12 f6 ff ff       	call   c0103849 <insert_vma_struct>
c0104237:	83 c4 10             	add    $0x10,%esp

    uintptr_t addr = 0x100;
c010423a:	c7 45 dc 00 01 00 00 	movl   $0x100,-0x24(%ebp)
    assert(find_vma(mm, addr) == vma);
c0104241:	83 ec 08             	sub    $0x8,%esp
c0104244:	ff 75 dc             	pushl  -0x24(%ebp)
c0104247:	ff 75 e8             	pushl  -0x18(%ebp)
c010424a:	e8 ce f4 ff ff       	call   c010371d <find_vma>
c010424f:	83 c4 10             	add    $0x10,%esp
c0104252:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0104255:	74 19                	je     c0104270 <check_pgfault+0xf6>
c0104257:	68 49 d9 10 c0       	push   $0xc010d949
c010425c:	68 db d6 10 c0       	push   $0xc010d6db
c0104261:	68 57 01 00 00       	push   $0x157
c0104266:	68 f0 d6 10 c0       	push   $0xc010d6f0
c010426b:	e8 8d c1 ff ff       	call   c01003fd <__panic>

    int i, sum = 0;
c0104270:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    for (i = 0; i < 100; i ++) {
c0104277:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010427e:	eb 19                	jmp    c0104299 <check_pgfault+0x11f>
        *(char *)(addr + i) = i;
c0104280:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0104283:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104286:	01 d0                	add    %edx,%eax
c0104288:	89 c2                	mov    %eax,%edx
c010428a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010428d:	88 02                	mov    %al,(%edx)
        sum += i;
c010428f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104292:	01 45 f0             	add    %eax,-0x10(%ebp)

    uintptr_t addr = 0x100;
    assert(find_vma(mm, addr) == vma);

    int i, sum = 0;
    for (i = 0; i < 100; i ++) {
c0104295:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0104299:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c010429d:	7e e1                	jle    c0104280 <check_pgfault+0x106>
        *(char *)(addr + i) = i;
        sum += i;
    }
    for (i = 0; i < 100; i ++) {
c010429f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01042a6:	eb 15                	jmp    c01042bd <check_pgfault+0x143>
        sum -= *(char *)(addr + i);
c01042a8:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01042ab:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01042ae:	01 d0                	add    %edx,%eax
c01042b0:	0f b6 00             	movzbl (%eax),%eax
c01042b3:	0f be c0             	movsbl %al,%eax
c01042b6:	29 45 f0             	sub    %eax,-0x10(%ebp)
    int i, sum = 0;
    for (i = 0; i < 100; i ++) {
        *(char *)(addr + i) = i;
        sum += i;
    }
    for (i = 0; i < 100; i ++) {
c01042b9:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01042bd:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c01042c1:	7e e5                	jle    c01042a8 <check_pgfault+0x12e>
        sum -= *(char *)(addr + i);
    }
    assert(sum == 0);
c01042c3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01042c7:	74 19                	je     c01042e2 <check_pgfault+0x168>
c01042c9:	68 63 d9 10 c0       	push   $0xc010d963
c01042ce:	68 db d6 10 c0       	push   $0xc010d6db
c01042d3:	68 61 01 00 00       	push   $0x161
c01042d8:	68 f0 d6 10 c0       	push   $0xc010d6f0
c01042dd:	e8 1b c1 ff ff       	call   c01003fd <__panic>

    page_remove(pgdir, ROUNDDOWN(addr, PGSIZE));
c01042e2:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01042e5:	89 45 d8             	mov    %eax,-0x28(%ebp)
c01042e8:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01042eb:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01042f0:	83 ec 08             	sub    $0x8,%esp
c01042f3:	50                   	push   %eax
c01042f4:	ff 75 e4             	pushl  -0x1c(%ebp)
c01042f7:	e8 ab 39 00 00       	call   c0107ca7 <page_remove>
c01042fc:	83 c4 10             	add    $0x10,%esp
    free_page(pde2page(pgdir[0]));
c01042ff:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104302:	8b 00                	mov    (%eax),%eax
c0104304:	83 ec 0c             	sub    $0xc,%esp
c0104307:	50                   	push   %eax
c0104308:	e8 18 f3 ff ff       	call   c0103625 <pde2page>
c010430d:	83 c4 10             	add    $0x10,%esp
c0104310:	83 ec 08             	sub    $0x8,%esp
c0104313:	6a 01                	push   $0x1
c0104315:	50                   	push   %eax
c0104316:	e8 e4 2d 00 00       	call   c01070ff <free_pages>
c010431b:	83 c4 10             	add    $0x10,%esp
    pgdir[0] = 0;
c010431e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104321:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    mm->pgdir = NULL;
c0104327:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010432a:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
    mm_destroy(mm);
c0104331:	83 ec 0c             	sub    $0xc,%esp
c0104334:	ff 75 e8             	pushl  -0x18(%ebp)
c0104337:	e8 31 f6 ff ff       	call   c010396d <mm_destroy>
c010433c:	83 c4 10             	add    $0x10,%esp
    check_mm_struct = NULL;
c010433f:	c7 05 10 71 1c c0 00 	movl   $0x0,0xc01c7110
c0104346:	00 00 00 

    assert(nr_free_pages_store == nr_free_pages());
c0104349:	e8 e6 2d 00 00       	call   c0107134 <nr_free_pages>
c010434e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0104351:	74 19                	je     c010436c <check_pgfault+0x1f2>
c0104353:	68 6c d9 10 c0       	push   $0xc010d96c
c0104358:	68 db d6 10 c0       	push   $0xc010d6db
c010435d:	68 6b 01 00 00       	push   $0x16b
c0104362:	68 f0 d6 10 c0       	push   $0xc010d6f0
c0104367:	e8 91 c0 ff ff       	call   c01003fd <__panic>

    cprintf("check_pgfault() succeeded!\n");
c010436c:	83 ec 0c             	sub    $0xc,%esp
c010436f:	68 93 d9 10 c0       	push   $0xc010d993
c0104374:	e8 1e bf ff ff       	call   c0100297 <cprintf>
c0104379:	83 c4 10             	add    $0x10,%esp
}
c010437c:	90                   	nop
c010437d:	c9                   	leave  
c010437e:	c3                   	ret    

c010437f <do_pgfault>:
 *            was a read (0) or write (1).
 *         -- The U/S flag (bit 2) indicates whether the processor was executing at user mode (1)
 *            or supervisor mode (0) at the time of the exception.
 */
int
do_pgfault(struct mm_struct *mm, uint32_t error_code, uintptr_t addr) {
c010437f:	55                   	push   %ebp
c0104380:	89 e5                	mov    %esp,%ebp
c0104382:	83 ec 28             	sub    $0x28,%esp
    int ret = -E_INVAL;
c0104385:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
    //try to find a vma which include addr
    struct vma_struct *vma = find_vma(mm, addr);
c010438c:	ff 75 10             	pushl  0x10(%ebp)
c010438f:	ff 75 08             	pushl  0x8(%ebp)
c0104392:	e8 86 f3 ff ff       	call   c010371d <find_vma>
c0104397:	83 c4 08             	add    $0x8,%esp
c010439a:	89 45 ec             	mov    %eax,-0x14(%ebp)

    pgfault_num++;
c010439d:	a1 64 4f 1c c0       	mov    0xc01c4f64,%eax
c01043a2:	83 c0 01             	add    $0x1,%eax
c01043a5:	a3 64 4f 1c c0       	mov    %eax,0xc01c4f64
    //If the addr is in the range of a mm's vma?
    if (vma == NULL || vma->vm_start > addr) {
c01043aa:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01043ae:	74 0b                	je     c01043bb <do_pgfault+0x3c>
c01043b0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01043b3:	8b 40 04             	mov    0x4(%eax),%eax
c01043b6:	3b 45 10             	cmp    0x10(%ebp),%eax
c01043b9:	76 18                	jbe    c01043d3 <do_pgfault+0x54>
        cprintf("not valid addr %x, and  can not find it in vma\n", addr);
c01043bb:	83 ec 08             	sub    $0x8,%esp
c01043be:	ff 75 10             	pushl  0x10(%ebp)
c01043c1:	68 b0 d9 10 c0       	push   $0xc010d9b0
c01043c6:	e8 cc be ff ff       	call   c0100297 <cprintf>
c01043cb:	83 c4 10             	add    $0x10,%esp
        goto failed;
c01043ce:	e9 b4 01 00 00       	jmp    c0104587 <do_pgfault+0x208>
    }
    //check the error_code
    switch (error_code & 3) {
c01043d3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01043d6:	83 e0 03             	and    $0x3,%eax
c01043d9:	85 c0                	test   %eax,%eax
c01043db:	74 3c                	je     c0104419 <do_pgfault+0x9a>
c01043dd:	83 f8 01             	cmp    $0x1,%eax
c01043e0:	74 22                	je     c0104404 <do_pgfault+0x85>
    default:
            /* error code flag : default is 3 ( W/R=1, P=1): write, present */
    case 2: /* error code flag : (W/R=1, P=0): write, not present */
        if (!(vma->vm_flags & VM_WRITE)) {
c01043e2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01043e5:	8b 40 0c             	mov    0xc(%eax),%eax
c01043e8:	83 e0 02             	and    $0x2,%eax
c01043eb:	85 c0                	test   %eax,%eax
c01043ed:	75 4c                	jne    c010443b <do_pgfault+0xbc>
            cprintf("do_pgfault failed: error code flag = write AND not present, but the addr's vma cannot write\n");
c01043ef:	83 ec 0c             	sub    $0xc,%esp
c01043f2:	68 e0 d9 10 c0       	push   $0xc010d9e0
c01043f7:	e8 9b be ff ff       	call   c0100297 <cprintf>
c01043fc:	83 c4 10             	add    $0x10,%esp
            goto failed;
c01043ff:	e9 83 01 00 00       	jmp    c0104587 <do_pgfault+0x208>
        }
        break;
    case 1: /* error code flag : (W/R=0, P=1): read, present */
        cprintf("do_pgfault failed: error code flag = read AND present\n");
c0104404:	83 ec 0c             	sub    $0xc,%esp
c0104407:	68 40 da 10 c0       	push   $0xc010da40
c010440c:	e8 86 be ff ff       	call   c0100297 <cprintf>
c0104411:	83 c4 10             	add    $0x10,%esp
        goto failed;
c0104414:	e9 6e 01 00 00       	jmp    c0104587 <do_pgfault+0x208>
    case 0: /* error code flag : (W/R=0, P=0): read, not present */
        if (!(vma->vm_flags & (VM_READ | VM_EXEC))) {
c0104419:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010441c:	8b 40 0c             	mov    0xc(%eax),%eax
c010441f:	83 e0 05             	and    $0x5,%eax
c0104422:	85 c0                	test   %eax,%eax
c0104424:	75 16                	jne    c010443c <do_pgfault+0xbd>
            cprintf("do_pgfault failed: error code flag = read AND not present, but the addr's vma cannot read or exec\n");
c0104426:	83 ec 0c             	sub    $0xc,%esp
c0104429:	68 78 da 10 c0       	push   $0xc010da78
c010442e:	e8 64 be ff ff       	call   c0100297 <cprintf>
c0104433:	83 c4 10             	add    $0x10,%esp
            goto failed;
c0104436:	e9 4c 01 00 00       	jmp    c0104587 <do_pgfault+0x208>
    case 2: /* error code flag : (W/R=1, P=0): write, not present */
        if (!(vma->vm_flags & VM_WRITE)) {
            cprintf("do_pgfault failed: error code flag = write AND not present, but the addr's vma cannot write\n");
            goto failed;
        }
        break;
c010443b:	90                   	nop
     *    (write an non_existed addr && addr is writable) OR
     *    (read  an non_existed addr && addr is readable)
     * THEN
     *    continue process
     */
    uint32_t perm = PTE_U;
c010443c:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
    if (vma->vm_flags & VM_WRITE) {
c0104443:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104446:	8b 40 0c             	mov    0xc(%eax),%eax
c0104449:	83 e0 02             	and    $0x2,%eax
c010444c:	85 c0                	test   %eax,%eax
c010444e:	74 04                	je     c0104454 <do_pgfault+0xd5>
        perm |= PTE_W;
c0104450:	83 4d f0 02          	orl    $0x2,-0x10(%ebp)
    }
    addr = ROUNDDOWN(addr, PGSIZE);
c0104454:	8b 45 10             	mov    0x10(%ebp),%eax
c0104457:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010445a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010445d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0104462:	89 45 10             	mov    %eax,0x10(%ebp)

    ret = -E_NO_MEM;
c0104465:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    pte_t *ptep=NULL;
c010446c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    *   mm->pgdir : the PDT of these vma
    *
    */
   /*LAB3 EXERCISE 1: YOUR CODE*/
    //(1) try to find a pte, if pte's PT(Page Table) isn't existed, then create a PT.
    ptep = get_pte(mm->pgdir, addr, 1);
c0104473:	8b 45 08             	mov    0x8(%ebp),%eax
c0104476:	8b 40 0c             	mov    0xc(%eax),%eax
c0104479:	83 ec 04             	sub    $0x4,%esp
c010447c:	6a 01                	push   $0x1
c010447e:	ff 75 10             	pushl  0x10(%ebp)
c0104481:	50                   	push   %eax
c0104482:	e8 78 32 00 00       	call   c01076ff <get_pte>
c0104487:	83 c4 10             	add    $0x10,%esp
c010448a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(ptep != NULL);
c010448d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0104491:	75 19                	jne    c01044ac <do_pgfault+0x12d>
c0104493:	68 db da 10 c0       	push   $0xc010dadb
c0104498:	68 db d6 10 c0       	push   $0xc010d6db
c010449d:	68 c9 01 00 00       	push   $0x1c9
c01044a2:	68 f0 d6 10 c0       	push   $0xc010d6f0
c01044a7:	e8 51 bf ff ff       	call   c01003fd <__panic>
    //(2) if the phy addr isn't exist, then alloc a page & map the phy addr with logical addr
    if (*ptep == 0) {
c01044ac:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01044af:	8b 00                	mov    (%eax),%eax
c01044b1:	85 c0                	test   %eax,%eax
c01044b3:	75 39                	jne    c01044ee <do_pgfault+0x16f>
        assert(pgdir_alloc_page(mm->pgdir, addr, perm) != NULL);
c01044b5:	8b 45 08             	mov    0x8(%ebp),%eax
c01044b8:	8b 40 0c             	mov    0xc(%eax),%eax
c01044bb:	83 ec 04             	sub    $0x4,%esp
c01044be:	ff 75 f0             	pushl  -0x10(%ebp)
c01044c1:	ff 75 10             	pushl  0x10(%ebp)
c01044c4:	50                   	push   %eax
c01044c5:	e8 1f 39 00 00       	call   c0107de9 <pgdir_alloc_page>
c01044ca:	83 c4 10             	add    $0x10,%esp
c01044cd:	85 c0                	test   %eax,%eax
c01044cf:	0f 85 ab 00 00 00    	jne    c0104580 <do_pgfault+0x201>
c01044d5:	68 e8 da 10 c0       	push   $0xc010dae8
c01044da:	68 db d6 10 c0       	push   $0xc010d6db
c01044df:	68 cc 01 00 00       	push   $0x1cc
c01044e4:	68 f0 d6 10 c0       	push   $0xc010d6f0
c01044e9:	e8 0f bf ff ff       	call   c01003fd <__panic>
    *    swap_in(mm, addr, &page) : alloc a memory page, then according to the swap entry in PTE for addr,
    *                               find the addr of disk page, read the content of disk page into this memroy page
    *    page_insert ： build the map of phy addr of an Page with the linear addr la
    *    swap_map_swappable ： set the page swappable
    */
        if(swap_init_ok) {
c01044ee:	a1 6c 4f 1c c0       	mov    0xc01c4f6c,%eax
c01044f3:	85 c0                	test   %eax,%eax
c01044f5:	74 71                	je     c0104568 <do_pgfault+0x1e9>
            struct Page *page=NULL;
c01044f7:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
            //(1）According to the mm AND addr, try to load the content of right disk page
            //    into the memory which page managed.
            assert(swap_in(mm, addr, &page) == 0);
c01044fe:	83 ec 04             	sub    $0x4,%esp
c0104501:	8d 45 e0             	lea    -0x20(%ebp),%eax
c0104504:	50                   	push   %eax
c0104505:	ff 75 10             	pushl  0x10(%ebp)
c0104508:	ff 75 08             	pushl  0x8(%ebp)
c010450b:	e8 9b 10 00 00       	call   c01055ab <swap_in>
c0104510:	83 c4 10             	add    $0x10,%esp
c0104513:	85 c0                	test   %eax,%eax
c0104515:	74 19                	je     c0104530 <do_pgfault+0x1b1>
c0104517:	68 18 db 10 c0       	push   $0xc010db18
c010451c:	68 db d6 10 c0       	push   $0xc010d6db
c0104521:	68 de 01 00 00       	push   $0x1de
c0104526:	68 f0 d6 10 c0       	push   $0xc010d6f0
c010452b:	e8 cd be ff ff       	call   c01003fd <__panic>
            page->pra_vaddr = addr;
c0104530:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104533:	8b 55 10             	mov    0x10(%ebp),%edx
c0104536:	89 50 1c             	mov    %edx,0x1c(%eax)
            //(2) According to the mm, addr AND page, setup the map of phy addr <---> logical addr
            page_insert(mm->pgdir, page, addr, perm);
c0104539:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010453c:	8b 45 08             	mov    0x8(%ebp),%eax
c010453f:	8b 40 0c             	mov    0xc(%eax),%eax
c0104542:	ff 75 f0             	pushl  -0x10(%ebp)
c0104545:	ff 75 10             	pushl  0x10(%ebp)
c0104548:	52                   	push   %edx
c0104549:	50                   	push   %eax
c010454a:	e8 91 37 00 00       	call   c0107ce0 <page_insert>
c010454f:	83 c4 10             	add    $0x10,%esp
            //(3) make the page swappable.
            swap_map_swappable(mm, addr, page, 1);
c0104552:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104555:	6a 01                	push   $0x1
c0104557:	50                   	push   %eax
c0104558:	ff 75 10             	pushl  0x10(%ebp)
c010455b:	ff 75 08             	pushl  0x8(%ebp)
c010455e:	e8 b8 0e 00 00       	call   c010541b <swap_map_swappable>
c0104563:	83 c4 10             	add    $0x10,%esp
c0104566:	eb 18                	jmp    c0104580 <do_pgfault+0x201>
        }
        else {
            cprintf("no swap_init_ok but ptep is %x, failed\n",*ptep);
c0104568:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010456b:	8b 00                	mov    (%eax),%eax
c010456d:	83 ec 08             	sub    $0x8,%esp
c0104570:	50                   	push   %eax
c0104571:	68 38 db 10 c0       	push   $0xc010db38
c0104576:	e8 1c bd ff ff       	call   c0100297 <cprintf>
c010457b:	83 c4 10             	add    $0x10,%esp
            goto failed;
c010457e:	eb 07                	jmp    c0104587 <do_pgfault+0x208>
            cprintf("no swap_init_ok but ptep is %x, failed\n",*ptep);
            goto failed;
        }
#endif
   }
   ret = 0;
c0104580:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
failed:
    return ret;
c0104587:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010458a:	c9                   	leave  
c010458b:	c3                   	ret    

c010458c <user_mem_check>:

bool
user_mem_check(struct mm_struct *mm, uintptr_t addr, size_t len, bool write) {
c010458c:	55                   	push   %ebp
c010458d:	89 e5                	mov    %esp,%ebp
c010458f:	83 ec 10             	sub    $0x10,%esp
    if (mm != NULL) {
c0104592:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104596:	0f 84 dc 00 00 00    	je     c0104678 <user_mem_check+0xec>
        if (!USER_ACCESS(addr, addr + len)) {
c010459c:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c01045a3:	76 1c                	jbe    c01045c1 <user_mem_check+0x35>
c01045a5:	8b 55 0c             	mov    0xc(%ebp),%edx
c01045a8:	8b 45 10             	mov    0x10(%ebp),%eax
c01045ab:	01 d0                	add    %edx,%eax
c01045ad:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01045b0:	76 0f                	jbe    c01045c1 <user_mem_check+0x35>
c01045b2:	8b 55 0c             	mov    0xc(%ebp),%edx
c01045b5:	8b 45 10             	mov    0x10(%ebp),%eax
c01045b8:	01 d0                	add    %edx,%eax
c01045ba:	3d 00 00 00 b0       	cmp    $0xb0000000,%eax
c01045bf:	76 0a                	jbe    c01045cb <user_mem_check+0x3f>
            return 0;
c01045c1:	b8 00 00 00 00       	mov    $0x0,%eax
c01045c6:	e9 df 00 00 00       	jmp    c01046aa <user_mem_check+0x11e>
        }
        struct vma_struct *vma;
        uintptr_t start = addr, end = addr + len;
c01045cb:	8b 45 0c             	mov    0xc(%ebp),%eax
c01045ce:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01045d1:	8b 55 0c             	mov    0xc(%ebp),%edx
c01045d4:	8b 45 10             	mov    0x10(%ebp),%eax
c01045d7:	01 d0                	add    %edx,%eax
c01045d9:	89 45 f8             	mov    %eax,-0x8(%ebp)
        while (start < end) {
c01045dc:	e9 84 00 00 00       	jmp    c0104665 <user_mem_check+0xd9>
            if ((vma = find_vma(mm, start)) == NULL || start < vma->vm_start) {
c01045e1:	ff 75 fc             	pushl  -0x4(%ebp)
c01045e4:	ff 75 08             	pushl  0x8(%ebp)
c01045e7:	e8 31 f1 ff ff       	call   c010371d <find_vma>
c01045ec:	83 c4 08             	add    $0x8,%esp
c01045ef:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01045f2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01045f6:	74 0b                	je     c0104603 <user_mem_check+0x77>
c01045f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01045fb:	8b 40 04             	mov    0x4(%eax),%eax
c01045fe:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0104601:	76 0a                	jbe    c010460d <user_mem_check+0x81>
                return 0;
c0104603:	b8 00 00 00 00       	mov    $0x0,%eax
c0104608:	e9 9d 00 00 00       	jmp    c01046aa <user_mem_check+0x11e>
            }
            if (!(vma->vm_flags & ((write) ? VM_WRITE : VM_READ))) {
c010460d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104610:	8b 40 0c             	mov    0xc(%eax),%eax
c0104613:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0104617:	74 07                	je     c0104620 <user_mem_check+0x94>
c0104619:	ba 02 00 00 00       	mov    $0x2,%edx
c010461e:	eb 05                	jmp    c0104625 <user_mem_check+0x99>
c0104620:	ba 01 00 00 00       	mov    $0x1,%edx
c0104625:	21 d0                	and    %edx,%eax
c0104627:	85 c0                	test   %eax,%eax
c0104629:	75 07                	jne    c0104632 <user_mem_check+0xa6>
                return 0;
c010462b:	b8 00 00 00 00       	mov    $0x0,%eax
c0104630:	eb 78                	jmp    c01046aa <user_mem_check+0x11e>
            }
            if (write && (vma->vm_flags & VM_STACK)) {
c0104632:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0104636:	74 24                	je     c010465c <user_mem_check+0xd0>
c0104638:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010463b:	8b 40 0c             	mov    0xc(%eax),%eax
c010463e:	83 e0 08             	and    $0x8,%eax
c0104641:	85 c0                	test   %eax,%eax
c0104643:	74 17                	je     c010465c <user_mem_check+0xd0>
                if (start < vma->vm_start + PGSIZE) { //check stack start & size
c0104645:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104648:	8b 40 04             	mov    0x4(%eax),%eax
c010464b:	05 00 10 00 00       	add    $0x1000,%eax
c0104650:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0104653:	76 07                	jbe    c010465c <user_mem_check+0xd0>
                    return 0;
c0104655:	b8 00 00 00 00       	mov    $0x0,%eax
c010465a:	eb 4e                	jmp    c01046aa <user_mem_check+0x11e>
                }
            }
            start = vma->vm_end;
c010465c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010465f:	8b 40 08             	mov    0x8(%eax),%eax
c0104662:	89 45 fc             	mov    %eax,-0x4(%ebp)
        if (!USER_ACCESS(addr, addr + len)) {
            return 0;
        }
        struct vma_struct *vma;
        uintptr_t start = addr, end = addr + len;
        while (start < end) {
c0104665:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0104668:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c010466b:	0f 82 70 ff ff ff    	jb     c01045e1 <user_mem_check+0x55>
                    return 0;
                }
            }
            start = vma->vm_end;
        }
        return 1;
c0104671:	b8 01 00 00 00       	mov    $0x1,%eax
c0104676:	eb 32                	jmp    c01046aa <user_mem_check+0x11e>
    }
    return KERN_ACCESS(addr, addr + len);
c0104678:	81 7d 0c ff ff ff bf 	cmpl   $0xbfffffff,0xc(%ebp)
c010467f:	76 23                	jbe    c01046a4 <user_mem_check+0x118>
c0104681:	8b 55 0c             	mov    0xc(%ebp),%edx
c0104684:	8b 45 10             	mov    0x10(%ebp),%eax
c0104687:	01 d0                	add    %edx,%eax
c0104689:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010468c:	76 16                	jbe    c01046a4 <user_mem_check+0x118>
c010468e:	8b 55 0c             	mov    0xc(%ebp),%edx
c0104691:	8b 45 10             	mov    0x10(%ebp),%eax
c0104694:	01 d0                	add    %edx,%eax
c0104696:	3d 00 00 00 f8       	cmp    $0xf8000000,%eax
c010469b:	77 07                	ja     c01046a4 <user_mem_check+0x118>
c010469d:	b8 01 00 00 00       	mov    $0x1,%eax
c01046a2:	eb 05                	jmp    c01046a9 <user_mem_check+0x11d>
c01046a4:	b8 00 00 00 00       	mov    $0x0,%eax
c01046a9:	90                   	nop
}
c01046aa:	c9                   	leave  
c01046ab:	c3                   	ret    

c01046ac <_fifo_init_mm>:
 * (2) _fifo_init_mm: init pra_list_head and let  mm->sm_priv point to the addr of pra_list_head.
 *              Now, From the memory control struct mm_struct, we can access FIFO PRA
 */
static int
_fifo_init_mm(struct mm_struct *mm)
{     
c01046ac:	55                   	push   %ebp
c01046ad:	89 e5                	mov    %esp,%ebp
c01046af:	83 ec 10             	sub    $0x10,%esp
c01046b2:	c7 45 fc 14 71 1c c0 	movl   $0xc01c7114,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c01046b9:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01046bc:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01046bf:	89 50 04             	mov    %edx,0x4(%eax)
c01046c2:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01046c5:	8b 50 04             	mov    0x4(%eax),%edx
c01046c8:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01046cb:	89 10                	mov    %edx,(%eax)
     list_init(&pra_list_head);
     mm->sm_priv = &pra_list_head;
c01046cd:	8b 45 08             	mov    0x8(%ebp),%eax
c01046d0:	c7 40 14 14 71 1c c0 	movl   $0xc01c7114,0x14(%eax)
     //cprintf(" mm->sm_priv %x in fifo_init_mm\n",mm->sm_priv);
     return 0;
c01046d7:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01046dc:	c9                   	leave  
c01046dd:	c3                   	ret    

c01046de <_fifo_map_swappable>:
/*
 * (3)_fifo_map_swappable: According FIFO PRA, we should link the most recent arrival page at the back of pra_list_head qeueue
 */
static int
_fifo_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c01046de:	55                   	push   %ebp
c01046df:	89 e5                	mov    %esp,%ebp
c01046e1:	83 ec 48             	sub    $0x48,%esp
    list_entry_t *head=(list_entry_t*) mm->sm_priv;
c01046e4:	8b 45 08             	mov    0x8(%ebp),%eax
c01046e7:	8b 40 14             	mov    0x14(%eax),%eax
c01046ea:	89 45 f0             	mov    %eax,-0x10(%ebp)
    list_entry_t *entry=&(page->pra_page_link);
c01046ed:	8b 45 10             	mov    0x10(%ebp),%eax
c01046f0:	83 c0 14             	add    $0x14,%eax
c01046f3:	89 45 ec             	mov    %eax,-0x14(%ebp)
 
    assert(entry != NULL && head != NULL);
c01046f6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01046fa:	74 06                	je     c0104702 <_fifo_map_swappable+0x24>
c01046fc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0104700:	75 16                	jne    c0104718 <_fifo_map_swappable+0x3a>
c0104702:	68 60 db 10 c0       	push   $0xc010db60
c0104707:	68 7e db 10 c0       	push   $0xc010db7e
c010470c:	6a 32                	push   $0x32
c010470e:	68 93 db 10 c0       	push   $0xc010db93
c0104713:	e8 e5 bc ff ff       	call   c01003fd <__panic>
    //record the page access situlation
    /*LAB3 EXERCISE 2: YOUR CODE*/ 
    // not swap in but call this func, means failed to swap out 
    if (swap_in == 0) {
c0104718:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010471c:	75 57                	jne    c0104775 <_fifo_map_swappable+0x97>
        list_entry_t *le_prev = head, *le;
c010471e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104721:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while ((le = list_next(le_prev)) != head) {
c0104724:	eb 38                	jmp    c010475e <_fifo_map_swappable+0x80>
            if (le == entry) {
c0104726:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104729:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010472c:	75 2a                	jne    c0104758 <_fifo_map_swappable+0x7a>
c010472e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104731:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0104734:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104737:	8b 40 04             	mov    0x4(%eax),%eax
c010473a:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010473d:	8b 12                	mov    (%edx),%edx
c010473f:	89 55 d8             	mov    %edx,-0x28(%ebp)
c0104742:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0104745:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0104748:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010474b:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010474e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0104751:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0104754:	89 10                	mov    %edx,(%eax)
                list_del(le);
                break;
c0104756:	eb 1d                	jmp    c0104775 <_fifo_map_swappable+0x97>
            }
            le_prev = le;        
c0104758:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010475b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010475e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104761:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0104764:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104767:	8b 40 04             	mov    0x4(%eax),%eax
    //record the page access situlation
    /*LAB3 EXERCISE 2: YOUR CODE*/ 
    // not swap in but call this func, means failed to swap out 
    if (swap_in == 0) {
        list_entry_t *le_prev = head, *le;
        while ((le = list_next(le_prev)) != head) {
c010476a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010476d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104770:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104773:	75 b1                	jne    c0104726 <_fifo_map_swappable+0x48>
c0104775:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104778:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010477b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010477e:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c0104781:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104784:	8b 00                	mov    (%eax),%eax
c0104786:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0104789:	89 55 cc             	mov    %edx,-0x34(%ebp)
c010478c:	89 45 c8             	mov    %eax,-0x38(%ebp)
c010478f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104792:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0104795:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0104798:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010479b:	89 10                	mov    %edx,(%eax)
c010479d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01047a0:	8b 10                	mov    (%eax),%edx
c01047a2:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01047a5:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c01047a8:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01047ab:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c01047ae:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c01047b1:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01047b4:	8b 55 c8             	mov    -0x38(%ebp),%edx
c01047b7:	89 10                	mov    %edx,(%eax)
            le_prev = le;        
        }
    }
    //(1)link the most recent arrival page at the back of the pra_list_head qeueue.
    list_add_before(head, entry);
    return 0;
c01047b9:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01047be:	c9                   	leave  
c01047bf:	c3                   	ret    

c01047c0 <_fifo_swap_out_victim>:
 *  (4)_fifo_swap_out_victim: According FIFO PRA, we should unlink the  earliest arrival page in front of pra_list_head qeueue,
 *                            then assign the value of *ptr_page to the addr of this page.
 */
static int
_fifo_swap_out_victim(struct mm_struct *mm, struct Page ** ptr_page, int in_tick)
{
c01047c0:	55                   	push   %ebp
c01047c1:	89 e5                	mov    %esp,%ebp
c01047c3:	83 ec 28             	sub    $0x28,%esp
     list_entry_t *head=(list_entry_t*) mm->sm_priv;
c01047c6:	8b 45 08             	mov    0x8(%ebp),%eax
c01047c9:	8b 40 14             	mov    0x14(%eax),%eax
c01047cc:	89 45 f4             	mov    %eax,-0xc(%ebp)
         assert(head != NULL);
c01047cf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01047d3:	75 16                	jne    c01047eb <_fifo_swap_out_victim+0x2b>
c01047d5:	68 a7 db 10 c0       	push   $0xc010dba7
c01047da:	68 7e db 10 c0       	push   $0xc010db7e
c01047df:	6a 4c                	push   $0x4c
c01047e1:	68 93 db 10 c0       	push   $0xc010db93
c01047e6:	e8 12 bc ff ff       	call   c01003fd <__panic>
     assert(in_tick==0);
c01047eb:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01047ef:	74 16                	je     c0104807 <_fifo_swap_out_victim+0x47>
c01047f1:	68 b4 db 10 c0       	push   $0xc010dbb4
c01047f6:	68 7e db 10 c0       	push   $0xc010db7e
c01047fb:	6a 4d                	push   $0x4d
c01047fd:	68 93 db 10 c0       	push   $0xc010db93
c0104802:	e8 f6 bb ff ff       	call   c01003fd <__panic>
c0104807:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010480a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010480d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104810:	8b 40 04             	mov    0x4(%eax),%eax
     /* Select the victim */
     /*LAB3 EXERCISE 2: YOUR CODE*/ 
    //(1)  unlink the  earliest arrival page in front of pra_list_head qeueue
    list_entry_t *front = list_next(head);
c0104813:	89 45 ec             	mov    %eax,-0x14(%ebp)
    assert(front != head);
c0104816:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104819:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010481c:	75 16                	jne    c0104834 <_fifo_swap_out_victim+0x74>
c010481e:	68 bf db 10 c0       	push   $0xc010dbbf
c0104823:	68 7e db 10 c0       	push   $0xc010db7e
c0104828:	6a 52                	push   $0x52
c010482a:	68 93 db 10 c0       	push   $0xc010db93
c010482f:	e8 c9 bb ff ff       	call   c01003fd <__panic>
c0104834:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104837:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010483a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010483d:	8b 40 04             	mov    0x4(%eax),%eax
c0104840:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104843:	8b 12                	mov    (%edx),%edx
c0104845:	89 55 e0             	mov    %edx,-0x20(%ebp)
c0104848:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010484b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010484e:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0104851:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0104854:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104857:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010485a:	89 10                	mov    %edx,(%eax)
    list_del(front);
    //(2)  assign the value of *ptr_page to the addr of this page
    struct Page *page = le2page(front, pra_page_link);
c010485c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010485f:	83 e8 14             	sub    $0x14,%eax
c0104862:	89 45 e8             	mov    %eax,-0x18(%ebp)
    assert(page != NULL);
c0104865:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0104869:	75 16                	jne    c0104881 <_fifo_swap_out_victim+0xc1>
c010486b:	68 cd db 10 c0       	push   $0xc010dbcd
c0104870:	68 7e db 10 c0       	push   $0xc010db7e
c0104875:	6a 56                	push   $0x56
c0104877:	68 93 db 10 c0       	push   $0xc010db93
c010487c:	e8 7c bb ff ff       	call   c01003fd <__panic>
    *ptr_page = page;
c0104881:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104884:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0104887:	89 10                	mov    %edx,(%eax)
    return 0;
c0104889:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010488e:	c9                   	leave  
c010488f:	c3                   	ret    

c0104890 <_fifo_check_swap>:

static int
_fifo_check_swap(void) {
c0104890:	55                   	push   %ebp
c0104891:	89 e5                	mov    %esp,%ebp
c0104893:	83 ec 08             	sub    $0x8,%esp
    cprintf("write Virt Page c in fifo_check_swap\n");
c0104896:	83 ec 0c             	sub    $0xc,%esp
c0104899:	68 dc db 10 c0       	push   $0xc010dbdc
c010489e:	e8 f4 b9 ff ff       	call   c0100297 <cprintf>
c01048a3:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x3000 = 0x0c;
c01048a6:	b8 00 30 00 00       	mov    $0x3000,%eax
c01048ab:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==4);
c01048ae:	a1 64 4f 1c c0       	mov    0xc01c4f64,%eax
c01048b3:	83 f8 04             	cmp    $0x4,%eax
c01048b6:	74 16                	je     c01048ce <_fifo_check_swap+0x3e>
c01048b8:	68 02 dc 10 c0       	push   $0xc010dc02
c01048bd:	68 7e db 10 c0       	push   $0xc010db7e
c01048c2:	6a 5f                	push   $0x5f
c01048c4:	68 93 db 10 c0       	push   $0xc010db93
c01048c9:	e8 2f bb ff ff       	call   c01003fd <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c01048ce:	83 ec 0c             	sub    $0xc,%esp
c01048d1:	68 14 dc 10 c0       	push   $0xc010dc14
c01048d6:	e8 bc b9 ff ff       	call   c0100297 <cprintf>
c01048db:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x1000 = 0x0a;
c01048de:	b8 00 10 00 00       	mov    $0x1000,%eax
c01048e3:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==4);
c01048e6:	a1 64 4f 1c c0       	mov    0xc01c4f64,%eax
c01048eb:	83 f8 04             	cmp    $0x4,%eax
c01048ee:	74 16                	je     c0104906 <_fifo_check_swap+0x76>
c01048f0:	68 02 dc 10 c0       	push   $0xc010dc02
c01048f5:	68 7e db 10 c0       	push   $0xc010db7e
c01048fa:	6a 62                	push   $0x62
c01048fc:	68 93 db 10 c0       	push   $0xc010db93
c0104901:	e8 f7 ba ff ff       	call   c01003fd <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c0104906:	83 ec 0c             	sub    $0xc,%esp
c0104909:	68 3c dc 10 c0       	push   $0xc010dc3c
c010490e:	e8 84 b9 ff ff       	call   c0100297 <cprintf>
c0104913:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x4000 = 0x0d;
c0104916:	b8 00 40 00 00       	mov    $0x4000,%eax
c010491b:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==4);
c010491e:	a1 64 4f 1c c0       	mov    0xc01c4f64,%eax
c0104923:	83 f8 04             	cmp    $0x4,%eax
c0104926:	74 16                	je     c010493e <_fifo_check_swap+0xae>
c0104928:	68 02 dc 10 c0       	push   $0xc010dc02
c010492d:	68 7e db 10 c0       	push   $0xc010db7e
c0104932:	6a 65                	push   $0x65
c0104934:	68 93 db 10 c0       	push   $0xc010db93
c0104939:	e8 bf ba ff ff       	call   c01003fd <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c010493e:	83 ec 0c             	sub    $0xc,%esp
c0104941:	68 64 dc 10 c0       	push   $0xc010dc64
c0104946:	e8 4c b9 ff ff       	call   c0100297 <cprintf>
c010494b:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x2000 = 0x0b;
c010494e:	b8 00 20 00 00       	mov    $0x2000,%eax
c0104953:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==4);
c0104956:	a1 64 4f 1c c0       	mov    0xc01c4f64,%eax
c010495b:	83 f8 04             	cmp    $0x4,%eax
c010495e:	74 16                	je     c0104976 <_fifo_check_swap+0xe6>
c0104960:	68 02 dc 10 c0       	push   $0xc010dc02
c0104965:	68 7e db 10 c0       	push   $0xc010db7e
c010496a:	6a 68                	push   $0x68
c010496c:	68 93 db 10 c0       	push   $0xc010db93
c0104971:	e8 87 ba ff ff       	call   c01003fd <__panic>
    cprintf("write Virt Page e in fifo_check_swap\n");
c0104976:	83 ec 0c             	sub    $0xc,%esp
c0104979:	68 8c dc 10 c0       	push   $0xc010dc8c
c010497e:	e8 14 b9 ff ff       	call   c0100297 <cprintf>
c0104983:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x5000 = 0x0e;
c0104986:	b8 00 50 00 00       	mov    $0x5000,%eax
c010498b:	c6 00 0e             	movb   $0xe,(%eax)
    assert(pgfault_num==5);
c010498e:	a1 64 4f 1c c0       	mov    0xc01c4f64,%eax
c0104993:	83 f8 05             	cmp    $0x5,%eax
c0104996:	74 16                	je     c01049ae <_fifo_check_swap+0x11e>
c0104998:	68 b2 dc 10 c0       	push   $0xc010dcb2
c010499d:	68 7e db 10 c0       	push   $0xc010db7e
c01049a2:	6a 6b                	push   $0x6b
c01049a4:	68 93 db 10 c0       	push   $0xc010db93
c01049a9:	e8 4f ba ff ff       	call   c01003fd <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c01049ae:	83 ec 0c             	sub    $0xc,%esp
c01049b1:	68 64 dc 10 c0       	push   $0xc010dc64
c01049b6:	e8 dc b8 ff ff       	call   c0100297 <cprintf>
c01049bb:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x2000 = 0x0b;
c01049be:	b8 00 20 00 00       	mov    $0x2000,%eax
c01049c3:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==5);
c01049c6:	a1 64 4f 1c c0       	mov    0xc01c4f64,%eax
c01049cb:	83 f8 05             	cmp    $0x5,%eax
c01049ce:	74 16                	je     c01049e6 <_fifo_check_swap+0x156>
c01049d0:	68 b2 dc 10 c0       	push   $0xc010dcb2
c01049d5:	68 7e db 10 c0       	push   $0xc010db7e
c01049da:	6a 6e                	push   $0x6e
c01049dc:	68 93 db 10 c0       	push   $0xc010db93
c01049e1:	e8 17 ba ff ff       	call   c01003fd <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c01049e6:	83 ec 0c             	sub    $0xc,%esp
c01049e9:	68 14 dc 10 c0       	push   $0xc010dc14
c01049ee:	e8 a4 b8 ff ff       	call   c0100297 <cprintf>
c01049f3:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x1000 = 0x0a;
c01049f6:	b8 00 10 00 00       	mov    $0x1000,%eax
c01049fb:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==6);
c01049fe:	a1 64 4f 1c c0       	mov    0xc01c4f64,%eax
c0104a03:	83 f8 06             	cmp    $0x6,%eax
c0104a06:	74 16                	je     c0104a1e <_fifo_check_swap+0x18e>
c0104a08:	68 c1 dc 10 c0       	push   $0xc010dcc1
c0104a0d:	68 7e db 10 c0       	push   $0xc010db7e
c0104a12:	6a 71                	push   $0x71
c0104a14:	68 93 db 10 c0       	push   $0xc010db93
c0104a19:	e8 df b9 ff ff       	call   c01003fd <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0104a1e:	83 ec 0c             	sub    $0xc,%esp
c0104a21:	68 64 dc 10 c0       	push   $0xc010dc64
c0104a26:	e8 6c b8 ff ff       	call   c0100297 <cprintf>
c0104a2b:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x2000 = 0x0b;
c0104a2e:	b8 00 20 00 00       	mov    $0x2000,%eax
c0104a33:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==7);
c0104a36:	a1 64 4f 1c c0       	mov    0xc01c4f64,%eax
c0104a3b:	83 f8 07             	cmp    $0x7,%eax
c0104a3e:	74 16                	je     c0104a56 <_fifo_check_swap+0x1c6>
c0104a40:	68 d0 dc 10 c0       	push   $0xc010dcd0
c0104a45:	68 7e db 10 c0       	push   $0xc010db7e
c0104a4a:	6a 74                	push   $0x74
c0104a4c:	68 93 db 10 c0       	push   $0xc010db93
c0104a51:	e8 a7 b9 ff ff       	call   c01003fd <__panic>
    cprintf("write Virt Page c in fifo_check_swap\n");
c0104a56:	83 ec 0c             	sub    $0xc,%esp
c0104a59:	68 dc db 10 c0       	push   $0xc010dbdc
c0104a5e:	e8 34 b8 ff ff       	call   c0100297 <cprintf>
c0104a63:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x3000 = 0x0c;
c0104a66:	b8 00 30 00 00       	mov    $0x3000,%eax
c0104a6b:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==8);
c0104a6e:	a1 64 4f 1c c0       	mov    0xc01c4f64,%eax
c0104a73:	83 f8 08             	cmp    $0x8,%eax
c0104a76:	74 16                	je     c0104a8e <_fifo_check_swap+0x1fe>
c0104a78:	68 df dc 10 c0       	push   $0xc010dcdf
c0104a7d:	68 7e db 10 c0       	push   $0xc010db7e
c0104a82:	6a 77                	push   $0x77
c0104a84:	68 93 db 10 c0       	push   $0xc010db93
c0104a89:	e8 6f b9 ff ff       	call   c01003fd <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c0104a8e:	83 ec 0c             	sub    $0xc,%esp
c0104a91:	68 3c dc 10 c0       	push   $0xc010dc3c
c0104a96:	e8 fc b7 ff ff       	call   c0100297 <cprintf>
c0104a9b:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x4000 = 0x0d;
c0104a9e:	b8 00 40 00 00       	mov    $0x4000,%eax
c0104aa3:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==9);
c0104aa6:	a1 64 4f 1c c0       	mov    0xc01c4f64,%eax
c0104aab:	83 f8 09             	cmp    $0x9,%eax
c0104aae:	74 16                	je     c0104ac6 <_fifo_check_swap+0x236>
c0104ab0:	68 ee dc 10 c0       	push   $0xc010dcee
c0104ab5:	68 7e db 10 c0       	push   $0xc010db7e
c0104aba:	6a 7a                	push   $0x7a
c0104abc:	68 93 db 10 c0       	push   $0xc010db93
c0104ac1:	e8 37 b9 ff ff       	call   c01003fd <__panic>
    cprintf("write Virt Page e in fifo_check_swap\n");
c0104ac6:	83 ec 0c             	sub    $0xc,%esp
c0104ac9:	68 8c dc 10 c0       	push   $0xc010dc8c
c0104ace:	e8 c4 b7 ff ff       	call   c0100297 <cprintf>
c0104ad3:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x5000 = 0x0e;
c0104ad6:	b8 00 50 00 00       	mov    $0x5000,%eax
c0104adb:	c6 00 0e             	movb   $0xe,(%eax)
    assert(pgfault_num==10);
c0104ade:	a1 64 4f 1c c0       	mov    0xc01c4f64,%eax
c0104ae3:	83 f8 0a             	cmp    $0xa,%eax
c0104ae6:	74 16                	je     c0104afe <_fifo_check_swap+0x26e>
c0104ae8:	68 fd dc 10 c0       	push   $0xc010dcfd
c0104aed:	68 7e db 10 c0       	push   $0xc010db7e
c0104af2:	6a 7d                	push   $0x7d
c0104af4:	68 93 db 10 c0       	push   $0xc010db93
c0104af9:	e8 ff b8 ff ff       	call   c01003fd <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c0104afe:	83 ec 0c             	sub    $0xc,%esp
c0104b01:	68 14 dc 10 c0       	push   $0xc010dc14
c0104b06:	e8 8c b7 ff ff       	call   c0100297 <cprintf>
c0104b0b:	83 c4 10             	add    $0x10,%esp
    assert(*(unsigned char *)0x1000 == 0x0a);
c0104b0e:	b8 00 10 00 00       	mov    $0x1000,%eax
c0104b13:	0f b6 00             	movzbl (%eax),%eax
c0104b16:	3c 0a                	cmp    $0xa,%al
c0104b18:	74 16                	je     c0104b30 <_fifo_check_swap+0x2a0>
c0104b1a:	68 10 dd 10 c0       	push   $0xc010dd10
c0104b1f:	68 7e db 10 c0       	push   $0xc010db7e
c0104b24:	6a 7f                	push   $0x7f
c0104b26:	68 93 db 10 c0       	push   $0xc010db93
c0104b2b:	e8 cd b8 ff ff       	call   c01003fd <__panic>
    *(unsigned char *)0x1000 = 0x0a;
c0104b30:	b8 00 10 00 00       	mov    $0x1000,%eax
c0104b35:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==11);
c0104b38:	a1 64 4f 1c c0       	mov    0xc01c4f64,%eax
c0104b3d:	83 f8 0b             	cmp    $0xb,%eax
c0104b40:	74 19                	je     c0104b5b <_fifo_check_swap+0x2cb>
c0104b42:	68 31 dd 10 c0       	push   $0xc010dd31
c0104b47:	68 7e db 10 c0       	push   $0xc010db7e
c0104b4c:	68 81 00 00 00       	push   $0x81
c0104b51:	68 93 db 10 c0       	push   $0xc010db93
c0104b56:	e8 a2 b8 ff ff       	call   c01003fd <__panic>
    return 0;
c0104b5b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104b60:	c9                   	leave  
c0104b61:	c3                   	ret    

c0104b62 <_fifo_init>:


static int
_fifo_init(void)
{
c0104b62:	55                   	push   %ebp
c0104b63:	89 e5                	mov    %esp,%ebp
    return 0;
c0104b65:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104b6a:	5d                   	pop    %ebp
c0104b6b:	c3                   	ret    

c0104b6c <_fifo_set_unswappable>:

static int
_fifo_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c0104b6c:	55                   	push   %ebp
c0104b6d:	89 e5                	mov    %esp,%ebp
    return 0;
c0104b6f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104b74:	5d                   	pop    %ebp
c0104b75:	c3                   	ret    

c0104b76 <_fifo_tick_event>:

static int
_fifo_tick_event(struct mm_struct *mm)
{ return 0; }
c0104b76:	55                   	push   %ebp
c0104b77:	89 e5                	mov    %esp,%ebp
c0104b79:	b8 00 00 00 00       	mov    $0x0,%eax
c0104b7e:	5d                   	pop    %ebp
c0104b7f:	c3                   	ret    

c0104b80 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0104b80:	55                   	push   %ebp
c0104b81:	89 e5                	mov    %esp,%ebp
c0104b83:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0104b86:	9c                   	pushf  
c0104b87:	58                   	pop    %eax
c0104b88:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0104b8b:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0104b8e:	25 00 02 00 00       	and    $0x200,%eax
c0104b93:	85 c0                	test   %eax,%eax
c0104b95:	74 0c                	je     c0104ba3 <__intr_save+0x23>
        intr_disable();
c0104b97:	e8 20 d6 ff ff       	call   c01021bc <intr_disable>
        return 1;
c0104b9c:	b8 01 00 00 00       	mov    $0x1,%eax
c0104ba1:	eb 05                	jmp    c0104ba8 <__intr_save+0x28>
    }
    return 0;
c0104ba3:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104ba8:	c9                   	leave  
c0104ba9:	c3                   	ret    

c0104baa <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0104baa:	55                   	push   %ebp
c0104bab:	89 e5                	mov    %esp,%ebp
c0104bad:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0104bb0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104bb4:	74 05                	je     c0104bbb <__intr_restore+0x11>
        intr_enable();
c0104bb6:	e8 fa d5 ff ff       	call   c01021b5 <intr_enable>
    }
}
c0104bbb:	90                   	nop
c0104bbc:	c9                   	leave  
c0104bbd:	c3                   	ret    

c0104bbe <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0104bbe:	55                   	push   %ebp
c0104bbf:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0104bc1:	8b 45 08             	mov    0x8(%ebp),%eax
c0104bc4:	8b 15 f8 71 1c c0    	mov    0xc01c71f8,%edx
c0104bca:	29 d0                	sub    %edx,%eax
c0104bcc:	c1 f8 05             	sar    $0x5,%eax
}
c0104bcf:	5d                   	pop    %ebp
c0104bd0:	c3                   	ret    

c0104bd1 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0104bd1:	55                   	push   %ebp
c0104bd2:	89 e5                	mov    %esp,%ebp
    return page2ppn(page) << PGSHIFT;
c0104bd4:	ff 75 08             	pushl  0x8(%ebp)
c0104bd7:	e8 e2 ff ff ff       	call   c0104bbe <page2ppn>
c0104bdc:	83 c4 04             	add    $0x4,%esp
c0104bdf:	c1 e0 0c             	shl    $0xc,%eax
}
c0104be2:	c9                   	leave  
c0104be3:	c3                   	ret    

c0104be4 <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c0104be4:	55                   	push   %ebp
c0104be5:	89 e5                	mov    %esp,%ebp
c0104be7:	83 ec 08             	sub    $0x8,%esp
    if (PPN(pa) >= npage) {
c0104bea:	8b 45 08             	mov    0x8(%ebp),%eax
c0104bed:	c1 e8 0c             	shr    $0xc,%eax
c0104bf0:	89 c2                	mov    %eax,%edx
c0104bf2:	a1 80 4f 1c c0       	mov    0xc01c4f80,%eax
c0104bf7:	39 c2                	cmp    %eax,%edx
c0104bf9:	72 14                	jb     c0104c0f <pa2page+0x2b>
        panic("pa2page called with invalid pa");
c0104bfb:	83 ec 04             	sub    $0x4,%esp
c0104bfe:	68 54 dd 10 c0       	push   $0xc010dd54
c0104c03:	6a 5e                	push   $0x5e
c0104c05:	68 73 dd 10 c0       	push   $0xc010dd73
c0104c0a:	e8 ee b7 ff ff       	call   c01003fd <__panic>
    }
    return &pages[PPN(pa)];
c0104c0f:	a1 f8 71 1c c0       	mov    0xc01c71f8,%eax
c0104c14:	8b 55 08             	mov    0x8(%ebp),%edx
c0104c17:	c1 ea 0c             	shr    $0xc,%edx
c0104c1a:	c1 e2 05             	shl    $0x5,%edx
c0104c1d:	01 d0                	add    %edx,%eax
}
c0104c1f:	c9                   	leave  
c0104c20:	c3                   	ret    

c0104c21 <page2kva>:

static inline void *
page2kva(struct Page *page) {
c0104c21:	55                   	push   %ebp
c0104c22:	89 e5                	mov    %esp,%ebp
c0104c24:	83 ec 18             	sub    $0x18,%esp
    return KADDR(page2pa(page));
c0104c27:	ff 75 08             	pushl  0x8(%ebp)
c0104c2a:	e8 a2 ff ff ff       	call   c0104bd1 <page2pa>
c0104c2f:	83 c4 04             	add    $0x4,%esp
c0104c32:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104c35:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c38:	c1 e8 0c             	shr    $0xc,%eax
c0104c3b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104c3e:	a1 80 4f 1c c0       	mov    0xc01c4f80,%eax
c0104c43:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0104c46:	72 14                	jb     c0104c5c <page2kva+0x3b>
c0104c48:	ff 75 f4             	pushl  -0xc(%ebp)
c0104c4b:	68 84 dd 10 c0       	push   $0xc010dd84
c0104c50:	6a 65                	push   $0x65
c0104c52:	68 73 dd 10 c0       	push   $0xc010dd73
c0104c57:	e8 a1 b7 ff ff       	call   c01003fd <__panic>
c0104c5c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c5f:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c0104c64:	c9                   	leave  
c0104c65:	c3                   	ret    

c0104c66 <kva2page>:

static inline struct Page *
kva2page(void *kva) {
c0104c66:	55                   	push   %ebp
c0104c67:	89 e5                	mov    %esp,%ebp
c0104c69:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PADDR(kva));
c0104c6c:	8b 45 08             	mov    0x8(%ebp),%eax
c0104c6f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104c72:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c0104c79:	77 14                	ja     c0104c8f <kva2page+0x29>
c0104c7b:	ff 75 f4             	pushl  -0xc(%ebp)
c0104c7e:	68 a8 dd 10 c0       	push   $0xc010dda8
c0104c83:	6a 6a                	push   $0x6a
c0104c85:	68 73 dd 10 c0       	push   $0xc010dd73
c0104c8a:	e8 6e b7 ff ff       	call   c01003fd <__panic>
c0104c8f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c92:	05 00 00 00 40       	add    $0x40000000,%eax
c0104c97:	83 ec 0c             	sub    $0xc,%esp
c0104c9a:	50                   	push   %eax
c0104c9b:	e8 44 ff ff ff       	call   c0104be4 <pa2page>
c0104ca0:	83 c4 10             	add    $0x10,%esp
}
c0104ca3:	c9                   	leave  
c0104ca4:	c3                   	ret    

c0104ca5 <__slob_get_free_pages>:
static slob_t *slobfree = &arena;
static bigblock_t *bigblocks;


static void* __slob_get_free_pages(gfp_t gfp, int order)
{
c0104ca5:	55                   	push   %ebp
c0104ca6:	89 e5                	mov    %esp,%ebp
c0104ca8:	83 ec 18             	sub    $0x18,%esp
  struct Page * page = alloc_pages(1 << order);
c0104cab:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104cae:	ba 01 00 00 00       	mov    $0x1,%edx
c0104cb3:	89 c1                	mov    %eax,%ecx
c0104cb5:	d3 e2                	shl    %cl,%edx
c0104cb7:	89 d0                	mov    %edx,%eax
c0104cb9:	83 ec 0c             	sub    $0xc,%esp
c0104cbc:	50                   	push   %eax
c0104cbd:	e8 d1 23 00 00       	call   c0107093 <alloc_pages>
c0104cc2:	83 c4 10             	add    $0x10,%esp
c0104cc5:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if(!page)
c0104cc8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104ccc:	75 07                	jne    c0104cd5 <__slob_get_free_pages+0x30>
    return NULL;
c0104cce:	b8 00 00 00 00       	mov    $0x0,%eax
c0104cd3:	eb 0e                	jmp    c0104ce3 <__slob_get_free_pages+0x3e>
  return page2kva(page);
c0104cd5:	83 ec 0c             	sub    $0xc,%esp
c0104cd8:	ff 75 f4             	pushl  -0xc(%ebp)
c0104cdb:	e8 41 ff ff ff       	call   c0104c21 <page2kva>
c0104ce0:	83 c4 10             	add    $0x10,%esp
}
c0104ce3:	c9                   	leave  
c0104ce4:	c3                   	ret    

c0104ce5 <__slob_free_pages>:

#define __slob_get_free_page(gfp) __slob_get_free_pages(gfp, 0)

static inline void __slob_free_pages(unsigned long kva, int order)
{
c0104ce5:	55                   	push   %ebp
c0104ce6:	89 e5                	mov    %esp,%ebp
c0104ce8:	53                   	push   %ebx
c0104ce9:	83 ec 04             	sub    $0x4,%esp
  free_pages(kva2page(kva), 1 << order);
c0104cec:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104cef:	ba 01 00 00 00       	mov    $0x1,%edx
c0104cf4:	89 c1                	mov    %eax,%ecx
c0104cf6:	d3 e2                	shl    %cl,%edx
c0104cf8:	89 d0                	mov    %edx,%eax
c0104cfa:	89 c3                	mov    %eax,%ebx
c0104cfc:	8b 45 08             	mov    0x8(%ebp),%eax
c0104cff:	83 ec 0c             	sub    $0xc,%esp
c0104d02:	50                   	push   %eax
c0104d03:	e8 5e ff ff ff       	call   c0104c66 <kva2page>
c0104d08:	83 c4 10             	add    $0x10,%esp
c0104d0b:	83 ec 08             	sub    $0x8,%esp
c0104d0e:	53                   	push   %ebx
c0104d0f:	50                   	push   %eax
c0104d10:	e8 ea 23 00 00       	call   c01070ff <free_pages>
c0104d15:	83 c4 10             	add    $0x10,%esp
}
c0104d18:	90                   	nop
c0104d19:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0104d1c:	c9                   	leave  
c0104d1d:	c3                   	ret    

c0104d1e <slob_alloc>:

static void slob_free(void *b, int size);

static void *slob_alloc(size_t size, gfp_t gfp, int align)
{
c0104d1e:	55                   	push   %ebp
c0104d1f:	89 e5                	mov    %esp,%ebp
c0104d21:	83 ec 28             	sub    $0x28,%esp
  assert( (size + SLOB_UNIT) < PAGE_SIZE );
c0104d24:	8b 45 08             	mov    0x8(%ebp),%eax
c0104d27:	83 c0 08             	add    $0x8,%eax
c0104d2a:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c0104d2f:	76 16                	jbe    c0104d47 <slob_alloc+0x29>
c0104d31:	68 cc dd 10 c0       	push   $0xc010ddcc
c0104d36:	68 eb dd 10 c0       	push   $0xc010ddeb
c0104d3b:	6a 64                	push   $0x64
c0104d3d:	68 00 de 10 c0       	push   $0xc010de00
c0104d42:	e8 b6 b6 ff ff       	call   c01003fd <__panic>

	slob_t *prev, *cur, *aligned = 0;
c0104d47:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	int delta = 0, units = SLOB_UNITS(size);
c0104d4e:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c0104d55:	8b 45 08             	mov    0x8(%ebp),%eax
c0104d58:	83 c0 07             	add    $0x7,%eax
c0104d5b:	c1 e8 03             	shr    $0x3,%eax
c0104d5e:	89 45 e0             	mov    %eax,-0x20(%ebp)
	unsigned long flags;

	spin_lock_irqsave(&slob_lock, flags);
c0104d61:	e8 1a fe ff ff       	call   c0104b80 <__intr_save>
c0104d66:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	prev = slobfree;
c0104d69:	a1 08 1a 13 c0       	mov    0xc0131a08,%eax
c0104d6e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c0104d71:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d74:	8b 40 04             	mov    0x4(%eax),%eax
c0104d77:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (align) {
c0104d7a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0104d7e:	74 25                	je     c0104da5 <slob_alloc+0x87>
			aligned = (slob_t *)ALIGN((unsigned long)cur, align);
c0104d80:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104d83:	8b 45 10             	mov    0x10(%ebp),%eax
c0104d86:	01 d0                	add    %edx,%eax
c0104d88:	8d 50 ff             	lea    -0x1(%eax),%edx
c0104d8b:	8b 45 10             	mov    0x10(%ebp),%eax
c0104d8e:	f7 d8                	neg    %eax
c0104d90:	21 d0                	and    %edx,%eax
c0104d92:	89 45 ec             	mov    %eax,-0x14(%ebp)
			delta = aligned - cur;
c0104d95:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0104d98:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104d9b:	29 c2                	sub    %eax,%edx
c0104d9d:	89 d0                	mov    %edx,%eax
c0104d9f:	c1 f8 03             	sar    $0x3,%eax
c0104da2:	89 45 e8             	mov    %eax,-0x18(%ebp)
		}
		if (cur->units >= units + delta) { /* room enough? */
c0104da5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104da8:	8b 00                	mov    (%eax),%eax
c0104daa:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c0104dad:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0104db0:	01 ca                	add    %ecx,%edx
c0104db2:	39 d0                	cmp    %edx,%eax
c0104db4:	0f 8c b1 00 00 00    	jl     c0104e6b <slob_alloc+0x14d>
			if (delta) { /* need to fragment head to align? */
c0104dba:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0104dbe:	74 38                	je     c0104df8 <slob_alloc+0xda>
				aligned->units = cur->units - delta;
c0104dc0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104dc3:	8b 00                	mov    (%eax),%eax
c0104dc5:	2b 45 e8             	sub    -0x18(%ebp),%eax
c0104dc8:	89 c2                	mov    %eax,%edx
c0104dca:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104dcd:	89 10                	mov    %edx,(%eax)
				aligned->next = cur->next;
c0104dcf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104dd2:	8b 50 04             	mov    0x4(%eax),%edx
c0104dd5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104dd8:	89 50 04             	mov    %edx,0x4(%eax)
				cur->next = aligned;
c0104ddb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104dde:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0104de1:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = delta;
c0104de4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104de7:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0104dea:	89 10                	mov    %edx,(%eax)
				prev = cur;
c0104dec:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104def:	89 45 f4             	mov    %eax,-0xc(%ebp)
				cur = aligned;
c0104df2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104df5:	89 45 f0             	mov    %eax,-0x10(%ebp)
			}

			if (cur->units == units) /* exact fit? */
c0104df8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104dfb:	8b 00                	mov    (%eax),%eax
c0104dfd:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0104e00:	75 0e                	jne    c0104e10 <slob_alloc+0xf2>
				prev->next = cur->next; /* unlink */
c0104e02:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104e05:	8b 50 04             	mov    0x4(%eax),%edx
c0104e08:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e0b:	89 50 04             	mov    %edx,0x4(%eax)
c0104e0e:	eb 3c                	jmp    c0104e4c <slob_alloc+0x12e>
			else { /* fragment */
				prev->next = cur + units;
c0104e10:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104e13:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0104e1a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104e1d:	01 c2                	add    %eax,%edx
c0104e1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e22:	89 50 04             	mov    %edx,0x4(%eax)
				prev->next->units = cur->units - units;
c0104e25:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e28:	8b 40 04             	mov    0x4(%eax),%eax
c0104e2b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104e2e:	8b 12                	mov    (%edx),%edx
c0104e30:	2b 55 e0             	sub    -0x20(%ebp),%edx
c0104e33:	89 10                	mov    %edx,(%eax)
				prev->next->next = cur->next;
c0104e35:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e38:	8b 40 04             	mov    0x4(%eax),%eax
c0104e3b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104e3e:	8b 52 04             	mov    0x4(%edx),%edx
c0104e41:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = units;
c0104e44:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104e47:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0104e4a:	89 10                	mov    %edx,(%eax)
			}

			slobfree = prev;
c0104e4c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e4f:	a3 08 1a 13 c0       	mov    %eax,0xc0131a08
			spin_unlock_irqrestore(&slob_lock, flags);
c0104e54:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104e57:	83 ec 0c             	sub    $0xc,%esp
c0104e5a:	50                   	push   %eax
c0104e5b:	e8 4a fd ff ff       	call   c0104baa <__intr_restore>
c0104e60:	83 c4 10             	add    $0x10,%esp
			return cur;
c0104e63:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104e66:	e9 80 00 00 00       	jmp    c0104eeb <slob_alloc+0x1cd>
		}
		if (cur == slobfree) {
c0104e6b:	a1 08 1a 13 c0       	mov    0xc0131a08,%eax
c0104e70:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0104e73:	75 62                	jne    c0104ed7 <slob_alloc+0x1b9>
			spin_unlock_irqrestore(&slob_lock, flags);
c0104e75:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104e78:	83 ec 0c             	sub    $0xc,%esp
c0104e7b:	50                   	push   %eax
c0104e7c:	e8 29 fd ff ff       	call   c0104baa <__intr_restore>
c0104e81:	83 c4 10             	add    $0x10,%esp

			if (size == PAGE_SIZE) /* trying to shrink arena? */
c0104e84:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c0104e8b:	75 07                	jne    c0104e94 <slob_alloc+0x176>
				return 0;
c0104e8d:	b8 00 00 00 00       	mov    $0x0,%eax
c0104e92:	eb 57                	jmp    c0104eeb <slob_alloc+0x1cd>

			cur = (slob_t *)__slob_get_free_page(gfp);
c0104e94:	83 ec 08             	sub    $0x8,%esp
c0104e97:	6a 00                	push   $0x0
c0104e99:	ff 75 0c             	pushl  0xc(%ebp)
c0104e9c:	e8 04 fe ff ff       	call   c0104ca5 <__slob_get_free_pages>
c0104ea1:	83 c4 10             	add    $0x10,%esp
c0104ea4:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (!cur)
c0104ea7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0104eab:	75 07                	jne    c0104eb4 <slob_alloc+0x196>
				return 0;
c0104ead:	b8 00 00 00 00       	mov    $0x0,%eax
c0104eb2:	eb 37                	jmp    c0104eeb <slob_alloc+0x1cd>

			slob_free(cur, PAGE_SIZE);
c0104eb4:	83 ec 08             	sub    $0x8,%esp
c0104eb7:	68 00 10 00 00       	push   $0x1000
c0104ebc:	ff 75 f0             	pushl  -0x10(%ebp)
c0104ebf:	e8 29 00 00 00       	call   c0104eed <slob_free>
c0104ec4:	83 c4 10             	add    $0x10,%esp
			spin_lock_irqsave(&slob_lock, flags);
c0104ec7:	e8 b4 fc ff ff       	call   c0104b80 <__intr_save>
c0104ecc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			cur = slobfree;
c0104ecf:	a1 08 1a 13 c0       	mov    0xc0131a08,%eax
c0104ed4:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int delta = 0, units = SLOB_UNITS(size);
	unsigned long flags;

	spin_lock_irqsave(&slob_lock, flags);
	prev = slobfree;
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c0104ed7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104eda:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104edd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104ee0:	8b 40 04             	mov    0x4(%eax),%eax
c0104ee3:	89 45 f0             	mov    %eax,-0x10(%ebp)

			slob_free(cur, PAGE_SIZE);
			spin_lock_irqsave(&slob_lock, flags);
			cur = slobfree;
		}
	}
c0104ee6:	e9 8f fe ff ff       	jmp    c0104d7a <slob_alloc+0x5c>
}
c0104eeb:	c9                   	leave  
c0104eec:	c3                   	ret    

c0104eed <slob_free>:

static void slob_free(void *block, int size)
{
c0104eed:	55                   	push   %ebp
c0104eee:	89 e5                	mov    %esp,%ebp
c0104ef0:	83 ec 18             	sub    $0x18,%esp
	slob_t *cur, *b = (slob_t *)block;
c0104ef3:	8b 45 08             	mov    0x8(%ebp),%eax
c0104ef6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c0104ef9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104efd:	0f 84 05 01 00 00    	je     c0105008 <slob_free+0x11b>
		return;

	if (size)
c0104f03:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0104f07:	74 10                	je     c0104f19 <slob_free+0x2c>
		b->units = SLOB_UNITS(size);
c0104f09:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104f0c:	83 c0 07             	add    $0x7,%eax
c0104f0f:	c1 e8 03             	shr    $0x3,%eax
c0104f12:	89 c2                	mov    %eax,%edx
c0104f14:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104f17:	89 10                	mov    %edx,(%eax)

	/* Find reinsertion point */
	spin_lock_irqsave(&slob_lock, flags);
c0104f19:	e8 62 fc ff ff       	call   c0104b80 <__intr_save>
c0104f1e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c0104f21:	a1 08 1a 13 c0       	mov    0xc0131a08,%eax
c0104f26:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104f29:	eb 27                	jmp    c0104f52 <slob_free+0x65>
		if (cur >= cur->next && (b > cur || b < cur->next))
c0104f2b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104f2e:	8b 40 04             	mov    0x4(%eax),%eax
c0104f31:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104f34:	77 13                	ja     c0104f49 <slob_free+0x5c>
c0104f36:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104f39:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104f3c:	77 27                	ja     c0104f65 <slob_free+0x78>
c0104f3e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104f41:	8b 40 04             	mov    0x4(%eax),%eax
c0104f44:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104f47:	77 1c                	ja     c0104f65 <slob_free+0x78>
	if (size)
		b->units = SLOB_UNITS(size);

	/* Find reinsertion point */
	spin_lock_irqsave(&slob_lock, flags);
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c0104f49:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104f4c:	8b 40 04             	mov    0x4(%eax),%eax
c0104f4f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104f52:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104f55:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104f58:	76 d1                	jbe    c0104f2b <slob_free+0x3e>
c0104f5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104f5d:	8b 40 04             	mov    0x4(%eax),%eax
c0104f60:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104f63:	76 c6                	jbe    c0104f2b <slob_free+0x3e>
		if (cur >= cur->next && (b > cur || b < cur->next))
			break;

	if (b + b->units == cur->next) {
c0104f65:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104f68:	8b 00                	mov    (%eax),%eax
c0104f6a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0104f71:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104f74:	01 c2                	add    %eax,%edx
c0104f76:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104f79:	8b 40 04             	mov    0x4(%eax),%eax
c0104f7c:	39 c2                	cmp    %eax,%edx
c0104f7e:	75 25                	jne    c0104fa5 <slob_free+0xb8>
		b->units += cur->next->units;
c0104f80:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104f83:	8b 10                	mov    (%eax),%edx
c0104f85:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104f88:	8b 40 04             	mov    0x4(%eax),%eax
c0104f8b:	8b 00                	mov    (%eax),%eax
c0104f8d:	01 c2                	add    %eax,%edx
c0104f8f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104f92:	89 10                	mov    %edx,(%eax)
		b->next = cur->next->next;
c0104f94:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104f97:	8b 40 04             	mov    0x4(%eax),%eax
c0104f9a:	8b 50 04             	mov    0x4(%eax),%edx
c0104f9d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104fa0:	89 50 04             	mov    %edx,0x4(%eax)
c0104fa3:	eb 0c                	jmp    c0104fb1 <slob_free+0xc4>
	} else
		b->next = cur->next;
c0104fa5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104fa8:	8b 50 04             	mov    0x4(%eax),%edx
c0104fab:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104fae:	89 50 04             	mov    %edx,0x4(%eax)

	if (cur + cur->units == b) {
c0104fb1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104fb4:	8b 00                	mov    (%eax),%eax
c0104fb6:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0104fbd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104fc0:	01 d0                	add    %edx,%eax
c0104fc2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104fc5:	75 1f                	jne    c0104fe6 <slob_free+0xf9>
		cur->units += b->units;
c0104fc7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104fca:	8b 10                	mov    (%eax),%edx
c0104fcc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104fcf:	8b 00                	mov    (%eax),%eax
c0104fd1:	01 c2                	add    %eax,%edx
c0104fd3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104fd6:	89 10                	mov    %edx,(%eax)
		cur->next = b->next;
c0104fd8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104fdb:	8b 50 04             	mov    0x4(%eax),%edx
c0104fde:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104fe1:	89 50 04             	mov    %edx,0x4(%eax)
c0104fe4:	eb 09                	jmp    c0104fef <slob_free+0x102>
	} else
		cur->next = b;
c0104fe6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104fe9:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104fec:	89 50 04             	mov    %edx,0x4(%eax)

	slobfree = cur;
c0104fef:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ff2:	a3 08 1a 13 c0       	mov    %eax,0xc0131a08

	spin_unlock_irqrestore(&slob_lock, flags);
c0104ff7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104ffa:	83 ec 0c             	sub    $0xc,%esp
c0104ffd:	50                   	push   %eax
c0104ffe:	e8 a7 fb ff ff       	call   c0104baa <__intr_restore>
c0105003:	83 c4 10             	add    $0x10,%esp
c0105006:	eb 01                	jmp    c0105009 <slob_free+0x11c>
{
	slob_t *cur, *b = (slob_t *)block;
	unsigned long flags;

	if (!block)
		return;
c0105008:	90                   	nop
		cur->next = b;

	slobfree = cur;

	spin_unlock_irqrestore(&slob_lock, flags);
}
c0105009:	c9                   	leave  
c010500a:	c3                   	ret    

c010500b <slob_init>:



void
slob_init(void) {
c010500b:	55                   	push   %ebp
c010500c:	89 e5                	mov    %esp,%ebp
c010500e:	83 ec 08             	sub    $0x8,%esp
  cprintf("use SLOB allocator\n");
c0105011:	83 ec 0c             	sub    $0xc,%esp
c0105014:	68 12 de 10 c0       	push   $0xc010de12
c0105019:	e8 79 b2 ff ff       	call   c0100297 <cprintf>
c010501e:	83 c4 10             	add    $0x10,%esp
}
c0105021:	90                   	nop
c0105022:	c9                   	leave  
c0105023:	c3                   	ret    

c0105024 <kmalloc_init>:

inline void 
kmalloc_init(void) {
c0105024:	55                   	push   %ebp
c0105025:	89 e5                	mov    %esp,%ebp
c0105027:	83 ec 08             	sub    $0x8,%esp
    slob_init();
c010502a:	e8 dc ff ff ff       	call   c010500b <slob_init>
    cprintf("kmalloc_init() succeeded!\n");
c010502f:	83 ec 0c             	sub    $0xc,%esp
c0105032:	68 26 de 10 c0       	push   $0xc010de26
c0105037:	e8 5b b2 ff ff       	call   c0100297 <cprintf>
c010503c:	83 c4 10             	add    $0x10,%esp
}
c010503f:	90                   	nop
c0105040:	c9                   	leave  
c0105041:	c3                   	ret    

c0105042 <slob_allocated>:

size_t
slob_allocated(void) {
c0105042:	55                   	push   %ebp
c0105043:	89 e5                	mov    %esp,%ebp
  return 0;
c0105045:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010504a:	5d                   	pop    %ebp
c010504b:	c3                   	ret    

c010504c <kallocated>:

size_t
kallocated(void) {
c010504c:	55                   	push   %ebp
c010504d:	89 e5                	mov    %esp,%ebp
   return slob_allocated();
c010504f:	e8 ee ff ff ff       	call   c0105042 <slob_allocated>
}
c0105054:	5d                   	pop    %ebp
c0105055:	c3                   	ret    

c0105056 <find_order>:

static int find_order(int size)
{
c0105056:	55                   	push   %ebp
c0105057:	89 e5                	mov    %esp,%ebp
c0105059:	83 ec 10             	sub    $0x10,%esp
	int order = 0;
c010505c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for ( ; size > 4096 ; size >>=1)
c0105063:	eb 07                	jmp    c010506c <find_order+0x16>
		order++;
c0105065:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
}

static int find_order(int size)
{
	int order = 0;
	for ( ; size > 4096 ; size >>=1)
c0105069:	d1 7d 08             	sarl   0x8(%ebp)
c010506c:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c0105073:	7f f0                	jg     c0105065 <find_order+0xf>
		order++;
	return order;
c0105075:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0105078:	c9                   	leave  
c0105079:	c3                   	ret    

c010507a <__kmalloc>:

static void *__kmalloc(size_t size, gfp_t gfp)
{
c010507a:	55                   	push   %ebp
c010507b:	89 e5                	mov    %esp,%ebp
c010507d:	83 ec 18             	sub    $0x18,%esp
	slob_t *m;
	bigblock_t *bb;
	unsigned long flags;

	if (size < PAGE_SIZE - SLOB_UNIT) {
c0105080:	81 7d 08 f7 0f 00 00 	cmpl   $0xff7,0x8(%ebp)
c0105087:	77 35                	ja     c01050be <__kmalloc+0x44>
		m = slob_alloc(size + SLOB_UNIT, gfp, 0);
c0105089:	8b 45 08             	mov    0x8(%ebp),%eax
c010508c:	83 c0 08             	add    $0x8,%eax
c010508f:	83 ec 04             	sub    $0x4,%esp
c0105092:	6a 00                	push   $0x0
c0105094:	ff 75 0c             	pushl  0xc(%ebp)
c0105097:	50                   	push   %eax
c0105098:	e8 81 fc ff ff       	call   c0104d1e <slob_alloc>
c010509d:	83 c4 10             	add    $0x10,%esp
c01050a0:	89 45 f4             	mov    %eax,-0xc(%ebp)
		return m ? (void *)(m + 1) : 0;
c01050a3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01050a7:	74 0b                	je     c01050b4 <__kmalloc+0x3a>
c01050a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01050ac:	83 c0 08             	add    $0x8,%eax
c01050af:	e9 b3 00 00 00       	jmp    c0105167 <__kmalloc+0xed>
c01050b4:	b8 00 00 00 00       	mov    $0x0,%eax
c01050b9:	e9 a9 00 00 00       	jmp    c0105167 <__kmalloc+0xed>
	}

	bb = slob_alloc(sizeof(bigblock_t), gfp, 0);
c01050be:	83 ec 04             	sub    $0x4,%esp
c01050c1:	6a 00                	push   $0x0
c01050c3:	ff 75 0c             	pushl  0xc(%ebp)
c01050c6:	6a 0c                	push   $0xc
c01050c8:	e8 51 fc ff ff       	call   c0104d1e <slob_alloc>
c01050cd:	83 c4 10             	add    $0x10,%esp
c01050d0:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (!bb)
c01050d3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01050d7:	75 0a                	jne    c01050e3 <__kmalloc+0x69>
		return 0;
c01050d9:	b8 00 00 00 00       	mov    $0x0,%eax
c01050de:	e9 84 00 00 00       	jmp    c0105167 <__kmalloc+0xed>

	bb->order = find_order(size);
c01050e3:	8b 45 08             	mov    0x8(%ebp),%eax
c01050e6:	83 ec 0c             	sub    $0xc,%esp
c01050e9:	50                   	push   %eax
c01050ea:	e8 67 ff ff ff       	call   c0105056 <find_order>
c01050ef:	83 c4 10             	add    $0x10,%esp
c01050f2:	89 c2                	mov    %eax,%edx
c01050f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01050f7:	89 10                	mov    %edx,(%eax)
	bb->pages = (void *)__slob_get_free_pages(gfp, bb->order);
c01050f9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01050fc:	8b 00                	mov    (%eax),%eax
c01050fe:	83 ec 08             	sub    $0x8,%esp
c0105101:	50                   	push   %eax
c0105102:	ff 75 0c             	pushl  0xc(%ebp)
c0105105:	e8 9b fb ff ff       	call   c0104ca5 <__slob_get_free_pages>
c010510a:	83 c4 10             	add    $0x10,%esp
c010510d:	89 c2                	mov    %eax,%edx
c010510f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105112:	89 50 04             	mov    %edx,0x4(%eax)

	if (bb->pages) {
c0105115:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105118:	8b 40 04             	mov    0x4(%eax),%eax
c010511b:	85 c0                	test   %eax,%eax
c010511d:	74 33                	je     c0105152 <__kmalloc+0xd8>
		spin_lock_irqsave(&block_lock, flags);
c010511f:	e8 5c fa ff ff       	call   c0104b80 <__intr_save>
c0105124:	89 45 ec             	mov    %eax,-0x14(%ebp)
		bb->next = bigblocks;
c0105127:	8b 15 68 4f 1c c0    	mov    0xc01c4f68,%edx
c010512d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105130:	89 50 08             	mov    %edx,0x8(%eax)
		bigblocks = bb;
c0105133:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105136:	a3 68 4f 1c c0       	mov    %eax,0xc01c4f68
		spin_unlock_irqrestore(&block_lock, flags);
c010513b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010513e:	83 ec 0c             	sub    $0xc,%esp
c0105141:	50                   	push   %eax
c0105142:	e8 63 fa ff ff       	call   c0104baa <__intr_restore>
c0105147:	83 c4 10             	add    $0x10,%esp
		return bb->pages;
c010514a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010514d:	8b 40 04             	mov    0x4(%eax),%eax
c0105150:	eb 15                	jmp    c0105167 <__kmalloc+0xed>
	}

	slob_free(bb, sizeof(bigblock_t));
c0105152:	83 ec 08             	sub    $0x8,%esp
c0105155:	6a 0c                	push   $0xc
c0105157:	ff 75 f0             	pushl  -0x10(%ebp)
c010515a:	e8 8e fd ff ff       	call   c0104eed <slob_free>
c010515f:	83 c4 10             	add    $0x10,%esp
	return 0;
c0105162:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105167:	c9                   	leave  
c0105168:	c3                   	ret    

c0105169 <kmalloc>:

void *
kmalloc(size_t size)
{
c0105169:	55                   	push   %ebp
c010516a:	89 e5                	mov    %esp,%ebp
c010516c:	83 ec 08             	sub    $0x8,%esp
  return __kmalloc(size, 0);
c010516f:	83 ec 08             	sub    $0x8,%esp
c0105172:	6a 00                	push   $0x0
c0105174:	ff 75 08             	pushl  0x8(%ebp)
c0105177:	e8 fe fe ff ff       	call   c010507a <__kmalloc>
c010517c:	83 c4 10             	add    $0x10,%esp
}
c010517f:	c9                   	leave  
c0105180:	c3                   	ret    

c0105181 <kfree>:


void kfree(void *block)
{
c0105181:	55                   	push   %ebp
c0105182:	89 e5                	mov    %esp,%ebp
c0105184:	83 ec 18             	sub    $0x18,%esp
	bigblock_t *bb, **last = &bigblocks;
c0105187:	c7 45 f0 68 4f 1c c0 	movl   $0xc01c4f68,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c010518e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0105192:	0f 84 ac 00 00 00    	je     c0105244 <kfree+0xc3>
		return;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c0105198:	8b 45 08             	mov    0x8(%ebp),%eax
c010519b:	25 ff 0f 00 00       	and    $0xfff,%eax
c01051a0:	85 c0                	test   %eax,%eax
c01051a2:	0f 85 85 00 00 00    	jne    c010522d <kfree+0xac>
		/* might be on the big block list */
		spin_lock_irqsave(&block_lock, flags);
c01051a8:	e8 d3 f9 ff ff       	call   c0104b80 <__intr_save>
c01051ad:	89 45 ec             	mov    %eax,-0x14(%ebp)
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c01051b0:	a1 68 4f 1c c0       	mov    0xc01c4f68,%eax
c01051b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01051b8:	eb 5e                	jmp    c0105218 <kfree+0x97>
			if (bb->pages == block) {
c01051ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01051bd:	8b 40 04             	mov    0x4(%eax),%eax
c01051c0:	3b 45 08             	cmp    0x8(%ebp),%eax
c01051c3:	75 41                	jne    c0105206 <kfree+0x85>
				*last = bb->next;
c01051c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01051c8:	8b 50 08             	mov    0x8(%eax),%edx
c01051cb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01051ce:	89 10                	mov    %edx,(%eax)
				spin_unlock_irqrestore(&block_lock, flags);
c01051d0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01051d3:	83 ec 0c             	sub    $0xc,%esp
c01051d6:	50                   	push   %eax
c01051d7:	e8 ce f9 ff ff       	call   c0104baa <__intr_restore>
c01051dc:	83 c4 10             	add    $0x10,%esp
				__slob_free_pages((unsigned long)block, bb->order);
c01051df:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01051e2:	8b 10                	mov    (%eax),%edx
c01051e4:	8b 45 08             	mov    0x8(%ebp),%eax
c01051e7:	83 ec 08             	sub    $0x8,%esp
c01051ea:	52                   	push   %edx
c01051eb:	50                   	push   %eax
c01051ec:	e8 f4 fa ff ff       	call   c0104ce5 <__slob_free_pages>
c01051f1:	83 c4 10             	add    $0x10,%esp
				slob_free(bb, sizeof(bigblock_t));
c01051f4:	83 ec 08             	sub    $0x8,%esp
c01051f7:	6a 0c                	push   $0xc
c01051f9:	ff 75 f4             	pushl  -0xc(%ebp)
c01051fc:	e8 ec fc ff ff       	call   c0104eed <slob_free>
c0105201:	83 c4 10             	add    $0x10,%esp
				return;
c0105204:	eb 3f                	jmp    c0105245 <kfree+0xc4>
		return;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
		/* might be on the big block list */
		spin_lock_irqsave(&block_lock, flags);
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c0105206:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105209:	83 c0 08             	add    $0x8,%eax
c010520c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010520f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105212:	8b 40 08             	mov    0x8(%eax),%eax
c0105215:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105218:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010521c:	75 9c                	jne    c01051ba <kfree+0x39>
				__slob_free_pages((unsigned long)block, bb->order);
				slob_free(bb, sizeof(bigblock_t));
				return;
			}
		}
		spin_unlock_irqrestore(&block_lock, flags);
c010521e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105221:	83 ec 0c             	sub    $0xc,%esp
c0105224:	50                   	push   %eax
c0105225:	e8 80 f9 ff ff       	call   c0104baa <__intr_restore>
c010522a:	83 c4 10             	add    $0x10,%esp
	}

	slob_free((slob_t *)block - 1, 0);
c010522d:	8b 45 08             	mov    0x8(%ebp),%eax
c0105230:	83 e8 08             	sub    $0x8,%eax
c0105233:	83 ec 08             	sub    $0x8,%esp
c0105236:	6a 00                	push   $0x0
c0105238:	50                   	push   %eax
c0105239:	e8 af fc ff ff       	call   c0104eed <slob_free>
c010523e:	83 c4 10             	add    $0x10,%esp
	return;
c0105241:	90                   	nop
c0105242:	eb 01                	jmp    c0105245 <kfree+0xc4>
{
	bigblock_t *bb, **last = &bigblocks;
	unsigned long flags;

	if (!block)
		return;
c0105244:	90                   	nop
		spin_unlock_irqrestore(&block_lock, flags);
	}

	slob_free((slob_t *)block - 1, 0);
	return;
}
c0105245:	c9                   	leave  
c0105246:	c3                   	ret    

c0105247 <ksize>:


unsigned int ksize(const void *block)
{
c0105247:	55                   	push   %ebp
c0105248:	89 e5                	mov    %esp,%ebp
c010524a:	83 ec 18             	sub    $0x18,%esp
	bigblock_t *bb;
	unsigned long flags;

	if (!block)
c010524d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0105251:	75 07                	jne    c010525a <ksize+0x13>
		return 0;
c0105253:	b8 00 00 00 00       	mov    $0x0,%eax
c0105258:	eb 73                	jmp    c01052cd <ksize+0x86>

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c010525a:	8b 45 08             	mov    0x8(%ebp),%eax
c010525d:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105262:	85 c0                	test   %eax,%eax
c0105264:	75 5c                	jne    c01052c2 <ksize+0x7b>
		spin_lock_irqsave(&block_lock, flags);
c0105266:	e8 15 f9 ff ff       	call   c0104b80 <__intr_save>
c010526b:	89 45 f0             	mov    %eax,-0x10(%ebp)
		for (bb = bigblocks; bb; bb = bb->next)
c010526e:	a1 68 4f 1c c0       	mov    0xc01c4f68,%eax
c0105273:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105276:	eb 35                	jmp    c01052ad <ksize+0x66>
			if (bb->pages == block) {
c0105278:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010527b:	8b 40 04             	mov    0x4(%eax),%eax
c010527e:	3b 45 08             	cmp    0x8(%ebp),%eax
c0105281:	75 21                	jne    c01052a4 <ksize+0x5d>
				spin_unlock_irqrestore(&slob_lock, flags);
c0105283:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105286:	83 ec 0c             	sub    $0xc,%esp
c0105289:	50                   	push   %eax
c010528a:	e8 1b f9 ff ff       	call   c0104baa <__intr_restore>
c010528f:	83 c4 10             	add    $0x10,%esp
				return PAGE_SIZE << bb->order;
c0105292:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105295:	8b 00                	mov    (%eax),%eax
c0105297:	ba 00 10 00 00       	mov    $0x1000,%edx
c010529c:	89 c1                	mov    %eax,%ecx
c010529e:	d3 e2                	shl    %cl,%edx
c01052a0:	89 d0                	mov    %edx,%eax
c01052a2:	eb 29                	jmp    c01052cd <ksize+0x86>
	if (!block)
		return 0;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
		spin_lock_irqsave(&block_lock, flags);
		for (bb = bigblocks; bb; bb = bb->next)
c01052a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01052a7:	8b 40 08             	mov    0x8(%eax),%eax
c01052aa:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01052ad:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01052b1:	75 c5                	jne    c0105278 <ksize+0x31>
			if (bb->pages == block) {
				spin_unlock_irqrestore(&slob_lock, flags);
				return PAGE_SIZE << bb->order;
			}
		spin_unlock_irqrestore(&block_lock, flags);
c01052b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01052b6:	83 ec 0c             	sub    $0xc,%esp
c01052b9:	50                   	push   %eax
c01052ba:	e8 eb f8 ff ff       	call   c0104baa <__intr_restore>
c01052bf:	83 c4 10             	add    $0x10,%esp
	}

	return ((slob_t *)block - 1)->units * SLOB_UNIT;
c01052c2:	8b 45 08             	mov    0x8(%ebp),%eax
c01052c5:	83 e8 08             	sub    $0x8,%eax
c01052c8:	8b 00                	mov    (%eax),%eax
c01052ca:	c1 e0 03             	shl    $0x3,%eax
}
c01052cd:	c9                   	leave  
c01052ce:	c3                   	ret    

c01052cf <pa2page>:
page2pa(struct Page *page) {
    return page2ppn(page) << PGSHIFT;
}

static inline struct Page *
pa2page(uintptr_t pa) {
c01052cf:	55                   	push   %ebp
c01052d0:	89 e5                	mov    %esp,%ebp
c01052d2:	83 ec 08             	sub    $0x8,%esp
    if (PPN(pa) >= npage) {
c01052d5:	8b 45 08             	mov    0x8(%ebp),%eax
c01052d8:	c1 e8 0c             	shr    $0xc,%eax
c01052db:	89 c2                	mov    %eax,%edx
c01052dd:	a1 80 4f 1c c0       	mov    0xc01c4f80,%eax
c01052e2:	39 c2                	cmp    %eax,%edx
c01052e4:	72 14                	jb     c01052fa <pa2page+0x2b>
        panic("pa2page called with invalid pa");
c01052e6:	83 ec 04             	sub    $0x4,%esp
c01052e9:	68 44 de 10 c0       	push   $0xc010de44
c01052ee:	6a 5e                	push   $0x5e
c01052f0:	68 63 de 10 c0       	push   $0xc010de63
c01052f5:	e8 03 b1 ff ff       	call   c01003fd <__panic>
    }
    return &pages[PPN(pa)];
c01052fa:	a1 f8 71 1c c0       	mov    0xc01c71f8,%eax
c01052ff:	8b 55 08             	mov    0x8(%ebp),%edx
c0105302:	c1 ea 0c             	shr    $0xc,%edx
c0105305:	c1 e2 05             	shl    $0x5,%edx
c0105308:	01 d0                	add    %edx,%eax
}
c010530a:	c9                   	leave  
c010530b:	c3                   	ret    

c010530c <pte2page>:
kva2page(void *kva) {
    return pa2page(PADDR(kva));
}

static inline struct Page *
pte2page(pte_t pte) {
c010530c:	55                   	push   %ebp
c010530d:	89 e5                	mov    %esp,%ebp
c010530f:	83 ec 08             	sub    $0x8,%esp
    if (!(pte & PTE_P)) {
c0105312:	8b 45 08             	mov    0x8(%ebp),%eax
c0105315:	83 e0 01             	and    $0x1,%eax
c0105318:	85 c0                	test   %eax,%eax
c010531a:	75 14                	jne    c0105330 <pte2page+0x24>
        panic("pte2page called with invalid pte");
c010531c:	83 ec 04             	sub    $0x4,%esp
c010531f:	68 74 de 10 c0       	push   $0xc010de74
c0105324:	6a 70                	push   $0x70
c0105326:	68 63 de 10 c0       	push   $0xc010de63
c010532b:	e8 cd b0 ff ff       	call   c01003fd <__panic>
    }
    return pa2page(PTE_ADDR(pte));
c0105330:	8b 45 08             	mov    0x8(%ebp),%eax
c0105333:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0105338:	83 ec 0c             	sub    $0xc,%esp
c010533b:	50                   	push   %eax
c010533c:	e8 8e ff ff ff       	call   c01052cf <pa2page>
c0105341:	83 c4 10             	add    $0x10,%esp
}
c0105344:	c9                   	leave  
c0105345:	c3                   	ret    

c0105346 <pde2page>:

static inline struct Page *
pde2page(pde_t pde) {
c0105346:	55                   	push   %ebp
c0105347:	89 e5                	mov    %esp,%ebp
c0105349:	83 ec 08             	sub    $0x8,%esp
    return pa2page(PDE_ADDR(pde));
c010534c:	8b 45 08             	mov    0x8(%ebp),%eax
c010534f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0105354:	83 ec 0c             	sub    $0xc,%esp
c0105357:	50                   	push   %eax
c0105358:	e8 72 ff ff ff       	call   c01052cf <pa2page>
c010535d:	83 c4 10             	add    $0x10,%esp
}
c0105360:	c9                   	leave  
c0105361:	c3                   	ret    

c0105362 <swap_init>:

static void check_swap(void);

int
swap_init(void)
{
c0105362:	55                   	push   %ebp
c0105363:	89 e5                	mov    %esp,%ebp
c0105365:	83 ec 18             	sub    $0x18,%esp
     swapfs_init();
c0105368:	e8 ec 45 00 00       	call   c0109959 <swapfs_init>

     if (!(1024 <= max_swap_offset && max_swap_offset < MAX_SWAP_OFFSET_LIMIT))
c010536d:	a1 bc 71 1c c0       	mov    0xc01c71bc,%eax
c0105372:	3d ff 03 00 00       	cmp    $0x3ff,%eax
c0105377:	76 0c                	jbe    c0105385 <swap_init+0x23>
c0105379:	a1 bc 71 1c c0       	mov    0xc01c71bc,%eax
c010537e:	3d ff ff ff 00       	cmp    $0xffffff,%eax
c0105383:	76 17                	jbe    c010539c <swap_init+0x3a>
     {
          panic("bad max_swap_offset %08x.\n", max_swap_offset);
c0105385:	a1 bc 71 1c c0       	mov    0xc01c71bc,%eax
c010538a:	50                   	push   %eax
c010538b:	68 95 de 10 c0       	push   $0xc010de95
c0105390:	6a 27                	push   $0x27
c0105392:	68 b0 de 10 c0       	push   $0xc010deb0
c0105397:	e8 61 b0 ff ff       	call   c01003fd <__panic>
     }
     

     sm = &swap_manager_fifo;
c010539c:	c7 05 74 4f 1c c0 e0 	movl   $0xc01319e0,0xc01c4f74
c01053a3:	19 13 c0 
     int r = sm->init();
c01053a6:	a1 74 4f 1c c0       	mov    0xc01c4f74,%eax
c01053ab:	8b 40 04             	mov    0x4(%eax),%eax
c01053ae:	ff d0                	call   *%eax
c01053b0:	89 45 f4             	mov    %eax,-0xc(%ebp)
     
     if (r == 0)
c01053b3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01053b7:	75 27                	jne    c01053e0 <swap_init+0x7e>
     {
          swap_init_ok = 1;
c01053b9:	c7 05 6c 4f 1c c0 01 	movl   $0x1,0xc01c4f6c
c01053c0:	00 00 00 
          cprintf("SWAP: manager = %s\n", sm->name);
c01053c3:	a1 74 4f 1c c0       	mov    0xc01c4f74,%eax
c01053c8:	8b 00                	mov    (%eax),%eax
c01053ca:	83 ec 08             	sub    $0x8,%esp
c01053cd:	50                   	push   %eax
c01053ce:	68 bf de 10 c0       	push   $0xc010debf
c01053d3:	e8 bf ae ff ff       	call   c0100297 <cprintf>
c01053d8:	83 c4 10             	add    $0x10,%esp
          check_swap();
c01053db:	e8 f7 03 00 00       	call   c01057d7 <check_swap>
     }

     return r;
c01053e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01053e3:	c9                   	leave  
c01053e4:	c3                   	ret    

c01053e5 <swap_init_mm>:

int
swap_init_mm(struct mm_struct *mm)
{
c01053e5:	55                   	push   %ebp
c01053e6:	89 e5                	mov    %esp,%ebp
c01053e8:	83 ec 08             	sub    $0x8,%esp
     return sm->init_mm(mm);
c01053eb:	a1 74 4f 1c c0       	mov    0xc01c4f74,%eax
c01053f0:	8b 40 08             	mov    0x8(%eax),%eax
c01053f3:	83 ec 0c             	sub    $0xc,%esp
c01053f6:	ff 75 08             	pushl  0x8(%ebp)
c01053f9:	ff d0                	call   *%eax
c01053fb:	83 c4 10             	add    $0x10,%esp
}
c01053fe:	c9                   	leave  
c01053ff:	c3                   	ret    

c0105400 <swap_tick_event>:

int
swap_tick_event(struct mm_struct *mm)
{
c0105400:	55                   	push   %ebp
c0105401:	89 e5                	mov    %esp,%ebp
c0105403:	83 ec 08             	sub    $0x8,%esp
     return sm->tick_event(mm);
c0105406:	a1 74 4f 1c c0       	mov    0xc01c4f74,%eax
c010540b:	8b 40 0c             	mov    0xc(%eax),%eax
c010540e:	83 ec 0c             	sub    $0xc,%esp
c0105411:	ff 75 08             	pushl  0x8(%ebp)
c0105414:	ff d0                	call   *%eax
c0105416:	83 c4 10             	add    $0x10,%esp
}
c0105419:	c9                   	leave  
c010541a:	c3                   	ret    

c010541b <swap_map_swappable>:

int
swap_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c010541b:	55                   	push   %ebp
c010541c:	89 e5                	mov    %esp,%ebp
c010541e:	83 ec 08             	sub    $0x8,%esp
     return sm->map_swappable(mm, addr, page, swap_in);
c0105421:	a1 74 4f 1c c0       	mov    0xc01c4f74,%eax
c0105426:	8b 40 10             	mov    0x10(%eax),%eax
c0105429:	ff 75 14             	pushl  0x14(%ebp)
c010542c:	ff 75 10             	pushl  0x10(%ebp)
c010542f:	ff 75 0c             	pushl  0xc(%ebp)
c0105432:	ff 75 08             	pushl  0x8(%ebp)
c0105435:	ff d0                	call   *%eax
c0105437:	83 c4 10             	add    $0x10,%esp
}
c010543a:	c9                   	leave  
c010543b:	c3                   	ret    

c010543c <swap_set_unswappable>:

int
swap_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c010543c:	55                   	push   %ebp
c010543d:	89 e5                	mov    %esp,%ebp
c010543f:	83 ec 08             	sub    $0x8,%esp
     return sm->set_unswappable(mm, addr);
c0105442:	a1 74 4f 1c c0       	mov    0xc01c4f74,%eax
c0105447:	8b 40 14             	mov    0x14(%eax),%eax
c010544a:	83 ec 08             	sub    $0x8,%esp
c010544d:	ff 75 0c             	pushl  0xc(%ebp)
c0105450:	ff 75 08             	pushl  0x8(%ebp)
c0105453:	ff d0                	call   *%eax
c0105455:	83 c4 10             	add    $0x10,%esp
}
c0105458:	c9                   	leave  
c0105459:	c3                   	ret    

c010545a <swap_out>:

volatile unsigned int swap_out_num=0;

int
swap_out(struct mm_struct *mm, int n, int in_tick)
{
c010545a:	55                   	push   %ebp
c010545b:	89 e5                	mov    %esp,%ebp
c010545d:	83 ec 28             	sub    $0x28,%esp
     int i;
     for (i = 0; i != n; ++ i)
c0105460:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0105467:	e9 2e 01 00 00       	jmp    c010559a <swap_out+0x140>
     {
          uintptr_t v;
          //struct Page **ptr_page=NULL;
          struct Page *page;
          // cprintf("i %d, SWAP: call swap_out_victim\n",i);
          int r = sm->swap_out_victim(mm, &page, in_tick);
c010546c:	a1 74 4f 1c c0       	mov    0xc01c4f74,%eax
c0105471:	8b 40 18             	mov    0x18(%eax),%eax
c0105474:	83 ec 04             	sub    $0x4,%esp
c0105477:	ff 75 10             	pushl  0x10(%ebp)
c010547a:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c010547d:	52                   	push   %edx
c010547e:	ff 75 08             	pushl  0x8(%ebp)
c0105481:	ff d0                	call   *%eax
c0105483:	83 c4 10             	add    $0x10,%esp
c0105486:	89 45 f0             	mov    %eax,-0x10(%ebp)
          if (r != 0) {
c0105489:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010548d:	74 18                	je     c01054a7 <swap_out+0x4d>
                    cprintf("i %d, swap_out: call swap_out_victim failed\n",i);
c010548f:	83 ec 08             	sub    $0x8,%esp
c0105492:	ff 75 f4             	pushl  -0xc(%ebp)
c0105495:	68 d4 de 10 c0       	push   $0xc010ded4
c010549a:	e8 f8 ad ff ff       	call   c0100297 <cprintf>
c010549f:	83 c4 10             	add    $0x10,%esp
c01054a2:	e9 ff 00 00 00       	jmp    c01055a6 <swap_out+0x14c>
          }          
          //assert(!PageReserved(page));

          //cprintf("SWAP: choose victim page 0x%08x\n", page);
          
          v=page->pra_vaddr; 
c01054a7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01054aa:	8b 40 1c             	mov    0x1c(%eax),%eax
c01054ad:	89 45 ec             	mov    %eax,-0x14(%ebp)
          pte_t *ptep = get_pte(mm->pgdir, v, 0);
c01054b0:	8b 45 08             	mov    0x8(%ebp),%eax
c01054b3:	8b 40 0c             	mov    0xc(%eax),%eax
c01054b6:	83 ec 04             	sub    $0x4,%esp
c01054b9:	6a 00                	push   $0x0
c01054bb:	ff 75 ec             	pushl  -0x14(%ebp)
c01054be:	50                   	push   %eax
c01054bf:	e8 3b 22 00 00       	call   c01076ff <get_pte>
c01054c4:	83 c4 10             	add    $0x10,%esp
c01054c7:	89 45 e8             	mov    %eax,-0x18(%ebp)
          assert((*ptep & PTE_P) != 0);
c01054ca:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01054cd:	8b 00                	mov    (%eax),%eax
c01054cf:	83 e0 01             	and    $0x1,%eax
c01054d2:	85 c0                	test   %eax,%eax
c01054d4:	75 16                	jne    c01054ec <swap_out+0x92>
c01054d6:	68 01 df 10 c0       	push   $0xc010df01
c01054db:	68 16 df 10 c0       	push   $0xc010df16
c01054e0:	6a 67                	push   $0x67
c01054e2:	68 b0 de 10 c0       	push   $0xc010deb0
c01054e7:	e8 11 af ff ff       	call   c01003fd <__panic>

          if (swapfs_write( (page->pra_vaddr/PGSIZE+1)<<8, page) != 0) {
c01054ec:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01054ef:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01054f2:	8b 52 1c             	mov    0x1c(%edx),%edx
c01054f5:	c1 ea 0c             	shr    $0xc,%edx
c01054f8:	83 c2 01             	add    $0x1,%edx
c01054fb:	c1 e2 08             	shl    $0x8,%edx
c01054fe:	83 ec 08             	sub    $0x8,%esp
c0105501:	50                   	push   %eax
c0105502:	52                   	push   %edx
c0105503:	e8 ed 44 00 00       	call   c01099f5 <swapfs_write>
c0105508:	83 c4 10             	add    $0x10,%esp
c010550b:	85 c0                	test   %eax,%eax
c010550d:	74 2b                	je     c010553a <swap_out+0xe0>
                    cprintf("SWAP: failed to save\n");
c010550f:	83 ec 0c             	sub    $0xc,%esp
c0105512:	68 2b df 10 c0       	push   $0xc010df2b
c0105517:	e8 7b ad ff ff       	call   c0100297 <cprintf>
c010551c:	83 c4 10             	add    $0x10,%esp
                    sm->map_swappable(mm, v, page, 0);
c010551f:	a1 74 4f 1c c0       	mov    0xc01c4f74,%eax
c0105524:	8b 40 10             	mov    0x10(%eax),%eax
c0105527:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010552a:	6a 00                	push   $0x0
c010552c:	52                   	push   %edx
c010552d:	ff 75 ec             	pushl  -0x14(%ebp)
c0105530:	ff 75 08             	pushl  0x8(%ebp)
c0105533:	ff d0                	call   *%eax
c0105535:	83 c4 10             	add    $0x10,%esp
c0105538:	eb 5c                	jmp    c0105596 <swap_out+0x13c>
                    continue;
          }
          else {
                    cprintf("swap_out: i %d, store page in vaddr 0x%x to disk swap entry %d\n", i, v, page->pra_vaddr/PGSIZE+1);
c010553a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010553d:	8b 40 1c             	mov    0x1c(%eax),%eax
c0105540:	c1 e8 0c             	shr    $0xc,%eax
c0105543:	83 c0 01             	add    $0x1,%eax
c0105546:	50                   	push   %eax
c0105547:	ff 75 ec             	pushl  -0x14(%ebp)
c010554a:	ff 75 f4             	pushl  -0xc(%ebp)
c010554d:	68 44 df 10 c0       	push   $0xc010df44
c0105552:	e8 40 ad ff ff       	call   c0100297 <cprintf>
c0105557:	83 c4 10             	add    $0x10,%esp
                    *ptep = (page->pra_vaddr/PGSIZE+1)<<8;
c010555a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010555d:	8b 40 1c             	mov    0x1c(%eax),%eax
c0105560:	c1 e8 0c             	shr    $0xc,%eax
c0105563:	83 c0 01             	add    $0x1,%eax
c0105566:	c1 e0 08             	shl    $0x8,%eax
c0105569:	89 c2                	mov    %eax,%edx
c010556b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010556e:	89 10                	mov    %edx,(%eax)
                    free_page(page);
c0105570:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105573:	83 ec 08             	sub    $0x8,%esp
c0105576:	6a 01                	push   $0x1
c0105578:	50                   	push   %eax
c0105579:	e8 81 1b 00 00       	call   c01070ff <free_pages>
c010557e:	83 c4 10             	add    $0x10,%esp
          }
          
          tlb_invalidate(mm->pgdir, v);
c0105581:	8b 45 08             	mov    0x8(%ebp),%eax
c0105584:	8b 40 0c             	mov    0xc(%eax),%eax
c0105587:	83 ec 08             	sub    $0x8,%esp
c010558a:	ff 75 ec             	pushl  -0x14(%ebp)
c010558d:	50                   	push   %eax
c010558e:	e8 06 28 00 00       	call   c0107d99 <tlb_invalidate>
c0105593:	83 c4 10             	add    $0x10,%esp

int
swap_out(struct mm_struct *mm, int n, int in_tick)
{
     int i;
     for (i = 0; i != n; ++ i)
c0105596:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010559a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010559d:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01055a0:	0f 85 c6 fe ff ff    	jne    c010546c <swap_out+0x12>
                    free_page(page);
          }
          
          tlb_invalidate(mm->pgdir, v);
     }
     return i;
c01055a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01055a9:	c9                   	leave  
c01055aa:	c3                   	ret    

c01055ab <swap_in>:

int
swap_in(struct mm_struct *mm, uintptr_t addr, struct Page **ptr_result)
{
c01055ab:	55                   	push   %ebp
c01055ac:	89 e5                	mov    %esp,%ebp
c01055ae:	83 ec 18             	sub    $0x18,%esp
     struct Page *result = alloc_page();
c01055b1:	83 ec 0c             	sub    $0xc,%esp
c01055b4:	6a 01                	push   $0x1
c01055b6:	e8 d8 1a 00 00       	call   c0107093 <alloc_pages>
c01055bb:	83 c4 10             	add    $0x10,%esp
c01055be:	89 45 f4             	mov    %eax,-0xc(%ebp)
     assert(result!=NULL);
c01055c1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01055c5:	75 16                	jne    c01055dd <swap_in+0x32>
c01055c7:	68 84 df 10 c0       	push   $0xc010df84
c01055cc:	68 16 df 10 c0       	push   $0xc010df16
c01055d1:	6a 7d                	push   $0x7d
c01055d3:	68 b0 de 10 c0       	push   $0xc010deb0
c01055d8:	e8 20 ae ff ff       	call   c01003fd <__panic>

     pte_t *ptep = get_pte(mm->pgdir, addr, 0);
c01055dd:	8b 45 08             	mov    0x8(%ebp),%eax
c01055e0:	8b 40 0c             	mov    0xc(%eax),%eax
c01055e3:	83 ec 04             	sub    $0x4,%esp
c01055e6:	6a 00                	push   $0x0
c01055e8:	ff 75 0c             	pushl  0xc(%ebp)
c01055eb:	50                   	push   %eax
c01055ec:	e8 0e 21 00 00       	call   c01076ff <get_pte>
c01055f1:	83 c4 10             	add    $0x10,%esp
c01055f4:	89 45 f0             	mov    %eax,-0x10(%ebp)
     // cprintf("SWAP: load ptep %x swap entry %d to vaddr 0x%08x, page %x, No %d\n", ptep, (*ptep)>>8, addr, result, (result-pages));
    
     int r;
     if ((r = swapfs_read((*ptep), result)) != 0)
c01055f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01055fa:	8b 00                	mov    (%eax),%eax
c01055fc:	83 ec 08             	sub    $0x8,%esp
c01055ff:	ff 75 f4             	pushl  -0xc(%ebp)
c0105602:	50                   	push   %eax
c0105603:	e8 94 43 00 00       	call   c010999c <swapfs_read>
c0105608:	83 c4 10             	add    $0x10,%esp
c010560b:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010560e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0105612:	74 1f                	je     c0105633 <swap_in+0x88>
     {
        assert(r!=0);
c0105614:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0105618:	75 19                	jne    c0105633 <swap_in+0x88>
c010561a:	68 91 df 10 c0       	push   $0xc010df91
c010561f:	68 16 df 10 c0       	push   $0xc010df16
c0105624:	68 85 00 00 00       	push   $0x85
c0105629:	68 b0 de 10 c0       	push   $0xc010deb0
c010562e:	e8 ca ad ff ff       	call   c01003fd <__panic>
     }
     cprintf("swap_in: load disk swap entry %d with swap_page in vadr 0x%x\n", (*ptep)>>8, addr);
c0105633:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105636:	8b 00                	mov    (%eax),%eax
c0105638:	c1 e8 08             	shr    $0x8,%eax
c010563b:	83 ec 04             	sub    $0x4,%esp
c010563e:	ff 75 0c             	pushl  0xc(%ebp)
c0105641:	50                   	push   %eax
c0105642:	68 98 df 10 c0       	push   $0xc010df98
c0105647:	e8 4b ac ff ff       	call   c0100297 <cprintf>
c010564c:	83 c4 10             	add    $0x10,%esp
     *ptr_result=result;
c010564f:	8b 45 10             	mov    0x10(%ebp),%eax
c0105652:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0105655:	89 10                	mov    %edx,(%eax)
     return 0;
c0105657:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010565c:	c9                   	leave  
c010565d:	c3                   	ret    

c010565e <check_content_set>:



static inline void
check_content_set(void)
{
c010565e:	55                   	push   %ebp
c010565f:	89 e5                	mov    %esp,%ebp
c0105661:	83 ec 08             	sub    $0x8,%esp
     *(unsigned char *)0x1000 = 0x0a;
c0105664:	b8 00 10 00 00       	mov    $0x1000,%eax
c0105669:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c010566c:	a1 64 4f 1c c0       	mov    0xc01c4f64,%eax
c0105671:	83 f8 01             	cmp    $0x1,%eax
c0105674:	74 19                	je     c010568f <check_content_set+0x31>
c0105676:	68 d6 df 10 c0       	push   $0xc010dfd6
c010567b:	68 16 df 10 c0       	push   $0xc010df16
c0105680:	68 92 00 00 00       	push   $0x92
c0105685:	68 b0 de 10 c0       	push   $0xc010deb0
c010568a:	e8 6e ad ff ff       	call   c01003fd <__panic>
     *(unsigned char *)0x1010 = 0x0a;
c010568f:	b8 10 10 00 00       	mov    $0x1010,%eax
c0105694:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c0105697:	a1 64 4f 1c c0       	mov    0xc01c4f64,%eax
c010569c:	83 f8 01             	cmp    $0x1,%eax
c010569f:	74 19                	je     c01056ba <check_content_set+0x5c>
c01056a1:	68 d6 df 10 c0       	push   $0xc010dfd6
c01056a6:	68 16 df 10 c0       	push   $0xc010df16
c01056ab:	68 94 00 00 00       	push   $0x94
c01056b0:	68 b0 de 10 c0       	push   $0xc010deb0
c01056b5:	e8 43 ad ff ff       	call   c01003fd <__panic>
     *(unsigned char *)0x2000 = 0x0b;
c01056ba:	b8 00 20 00 00       	mov    $0x2000,%eax
c01056bf:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c01056c2:	a1 64 4f 1c c0       	mov    0xc01c4f64,%eax
c01056c7:	83 f8 02             	cmp    $0x2,%eax
c01056ca:	74 19                	je     c01056e5 <check_content_set+0x87>
c01056cc:	68 e5 df 10 c0       	push   $0xc010dfe5
c01056d1:	68 16 df 10 c0       	push   $0xc010df16
c01056d6:	68 96 00 00 00       	push   $0x96
c01056db:	68 b0 de 10 c0       	push   $0xc010deb0
c01056e0:	e8 18 ad ff ff       	call   c01003fd <__panic>
     *(unsigned char *)0x2010 = 0x0b;
c01056e5:	b8 10 20 00 00       	mov    $0x2010,%eax
c01056ea:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c01056ed:	a1 64 4f 1c c0       	mov    0xc01c4f64,%eax
c01056f2:	83 f8 02             	cmp    $0x2,%eax
c01056f5:	74 19                	je     c0105710 <check_content_set+0xb2>
c01056f7:	68 e5 df 10 c0       	push   $0xc010dfe5
c01056fc:	68 16 df 10 c0       	push   $0xc010df16
c0105701:	68 98 00 00 00       	push   $0x98
c0105706:	68 b0 de 10 c0       	push   $0xc010deb0
c010570b:	e8 ed ac ff ff       	call   c01003fd <__panic>
     *(unsigned char *)0x3000 = 0x0c;
c0105710:	b8 00 30 00 00       	mov    $0x3000,%eax
c0105715:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c0105718:	a1 64 4f 1c c0       	mov    0xc01c4f64,%eax
c010571d:	83 f8 03             	cmp    $0x3,%eax
c0105720:	74 19                	je     c010573b <check_content_set+0xdd>
c0105722:	68 f4 df 10 c0       	push   $0xc010dff4
c0105727:	68 16 df 10 c0       	push   $0xc010df16
c010572c:	68 9a 00 00 00       	push   $0x9a
c0105731:	68 b0 de 10 c0       	push   $0xc010deb0
c0105736:	e8 c2 ac ff ff       	call   c01003fd <__panic>
     *(unsigned char *)0x3010 = 0x0c;
c010573b:	b8 10 30 00 00       	mov    $0x3010,%eax
c0105740:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c0105743:	a1 64 4f 1c c0       	mov    0xc01c4f64,%eax
c0105748:	83 f8 03             	cmp    $0x3,%eax
c010574b:	74 19                	je     c0105766 <check_content_set+0x108>
c010574d:	68 f4 df 10 c0       	push   $0xc010dff4
c0105752:	68 16 df 10 c0       	push   $0xc010df16
c0105757:	68 9c 00 00 00       	push   $0x9c
c010575c:	68 b0 de 10 c0       	push   $0xc010deb0
c0105761:	e8 97 ac ff ff       	call   c01003fd <__panic>
     *(unsigned char *)0x4000 = 0x0d;
c0105766:	b8 00 40 00 00       	mov    $0x4000,%eax
c010576b:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c010576e:	a1 64 4f 1c c0       	mov    0xc01c4f64,%eax
c0105773:	83 f8 04             	cmp    $0x4,%eax
c0105776:	74 19                	je     c0105791 <check_content_set+0x133>
c0105778:	68 03 e0 10 c0       	push   $0xc010e003
c010577d:	68 16 df 10 c0       	push   $0xc010df16
c0105782:	68 9e 00 00 00       	push   $0x9e
c0105787:	68 b0 de 10 c0       	push   $0xc010deb0
c010578c:	e8 6c ac ff ff       	call   c01003fd <__panic>
     *(unsigned char *)0x4010 = 0x0d;
c0105791:	b8 10 40 00 00       	mov    $0x4010,%eax
c0105796:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c0105799:	a1 64 4f 1c c0       	mov    0xc01c4f64,%eax
c010579e:	83 f8 04             	cmp    $0x4,%eax
c01057a1:	74 19                	je     c01057bc <check_content_set+0x15e>
c01057a3:	68 03 e0 10 c0       	push   $0xc010e003
c01057a8:	68 16 df 10 c0       	push   $0xc010df16
c01057ad:	68 a0 00 00 00       	push   $0xa0
c01057b2:	68 b0 de 10 c0       	push   $0xc010deb0
c01057b7:	e8 41 ac ff ff       	call   c01003fd <__panic>
}
c01057bc:	90                   	nop
c01057bd:	c9                   	leave  
c01057be:	c3                   	ret    

c01057bf <check_content_access>:

static inline int
check_content_access(void)
{
c01057bf:	55                   	push   %ebp
c01057c0:	89 e5                	mov    %esp,%ebp
c01057c2:	83 ec 18             	sub    $0x18,%esp
    int ret = sm->check_swap();
c01057c5:	a1 74 4f 1c c0       	mov    0xc01c4f74,%eax
c01057ca:	8b 40 1c             	mov    0x1c(%eax),%eax
c01057cd:	ff d0                	call   *%eax
c01057cf:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return ret;
c01057d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01057d5:	c9                   	leave  
c01057d6:	c3                   	ret    

c01057d7 <check_swap>:
#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
check_swap(void)
{
c01057d7:	55                   	push   %ebp
c01057d8:	89 e5                	mov    %esp,%ebp
c01057da:	83 ec 68             	sub    $0x68,%esp
    //backup mem env
     int ret, count = 0, total = 0, i;
c01057dd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01057e4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
     list_entry_t *le = &free_list;
c01057eb:	c7 45 e8 e4 71 1c c0 	movl   $0xc01c71e4,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c01057f2:	eb 60                	jmp    c0105854 <check_swap+0x7d>
        struct Page *p = le2page(le, page_link);
c01057f4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01057f7:	83 e8 0c             	sub    $0xc,%eax
c01057fa:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(PageProperty(p));
c01057fd:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105800:	83 c0 04             	add    $0x4,%eax
c0105803:	c7 45 b0 01 00 00 00 	movl   $0x1,-0x50(%ebp)
c010580a:	89 45 ac             	mov    %eax,-0x54(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010580d:	8b 45 ac             	mov    -0x54(%ebp),%eax
c0105810:	8b 55 b0             	mov    -0x50(%ebp),%edx
c0105813:	0f a3 10             	bt     %edx,(%eax)
c0105816:	19 c0                	sbb    %eax,%eax
c0105818:	89 45 a8             	mov    %eax,-0x58(%ebp)
    return oldbit != 0;
c010581b:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
c010581f:	0f 95 c0             	setne  %al
c0105822:	0f b6 c0             	movzbl %al,%eax
c0105825:	85 c0                	test   %eax,%eax
c0105827:	75 19                	jne    c0105842 <check_swap+0x6b>
c0105829:	68 12 e0 10 c0       	push   $0xc010e012
c010582e:	68 16 df 10 c0       	push   $0xc010df16
c0105833:	68 bb 00 00 00       	push   $0xbb
c0105838:	68 b0 de 10 c0       	push   $0xc010deb0
c010583d:	e8 bb ab ff ff       	call   c01003fd <__panic>
        count ++, total += p->property;
c0105842:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0105846:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105849:	8b 50 08             	mov    0x8(%eax),%edx
c010584c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010584f:	01 d0                	add    %edx,%eax
c0105851:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105854:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105857:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010585a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010585d:	8b 40 04             	mov    0x4(%eax),%eax
check_swap(void)
{
    //backup mem env
     int ret, count = 0, total = 0, i;
     list_entry_t *le = &free_list;
     while ((le = list_next(le)) != &free_list) {
c0105860:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0105863:	81 7d e8 e4 71 1c c0 	cmpl   $0xc01c71e4,-0x18(%ebp)
c010586a:	75 88                	jne    c01057f4 <check_swap+0x1d>
        struct Page *p = le2page(le, page_link);
        assert(PageProperty(p));
        count ++, total += p->property;
     }
     assert(total == nr_free_pages());
c010586c:	e8 c3 18 00 00       	call   c0107134 <nr_free_pages>
c0105871:	89 c2                	mov    %eax,%edx
c0105873:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105876:	39 c2                	cmp    %eax,%edx
c0105878:	74 19                	je     c0105893 <check_swap+0xbc>
c010587a:	68 22 e0 10 c0       	push   $0xc010e022
c010587f:	68 16 df 10 c0       	push   $0xc010df16
c0105884:	68 be 00 00 00       	push   $0xbe
c0105889:	68 b0 de 10 c0       	push   $0xc010deb0
c010588e:	e8 6a ab ff ff       	call   c01003fd <__panic>
     cprintf("BEGIN check_swap: count %d, total %d\n",count,total);
c0105893:	83 ec 04             	sub    $0x4,%esp
c0105896:	ff 75 f0             	pushl  -0x10(%ebp)
c0105899:	ff 75 f4             	pushl  -0xc(%ebp)
c010589c:	68 3c e0 10 c0       	push   $0xc010e03c
c01058a1:	e8 f1 a9 ff ff       	call   c0100297 <cprintf>
c01058a6:	83 c4 10             	add    $0x10,%esp
     
     //now we set the phy pages env     
     struct mm_struct *mm = mm_create();
c01058a9:	e8 93 dd ff ff       	call   c0103641 <mm_create>
c01058ae:	89 45 d8             	mov    %eax,-0x28(%ebp)
     assert(mm != NULL);
c01058b1:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c01058b5:	75 19                	jne    c01058d0 <check_swap+0xf9>
c01058b7:	68 62 e0 10 c0       	push   $0xc010e062
c01058bc:	68 16 df 10 c0       	push   $0xc010df16
c01058c1:	68 c3 00 00 00       	push   $0xc3
c01058c6:	68 b0 de 10 c0       	push   $0xc010deb0
c01058cb:	e8 2d ab ff ff       	call   c01003fd <__panic>

     extern struct mm_struct *check_mm_struct;
     assert(check_mm_struct == NULL);
c01058d0:	a1 10 71 1c c0       	mov    0xc01c7110,%eax
c01058d5:	85 c0                	test   %eax,%eax
c01058d7:	74 19                	je     c01058f2 <check_swap+0x11b>
c01058d9:	68 6d e0 10 c0       	push   $0xc010e06d
c01058de:	68 16 df 10 c0       	push   $0xc010df16
c01058e3:	68 c6 00 00 00       	push   $0xc6
c01058e8:	68 b0 de 10 c0       	push   $0xc010deb0
c01058ed:	e8 0b ab ff ff       	call   c01003fd <__panic>

     check_mm_struct = mm;
c01058f2:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01058f5:	a3 10 71 1c c0       	mov    %eax,0xc01c7110

     pde_t *pgdir = mm->pgdir = boot_pgdir;
c01058fa:	8b 15 20 1a 13 c0    	mov    0xc0131a20,%edx
c0105900:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0105903:	89 50 0c             	mov    %edx,0xc(%eax)
c0105906:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0105909:	8b 40 0c             	mov    0xc(%eax),%eax
c010590c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
     assert(pgdir[0] == 0);
c010590f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0105912:	8b 00                	mov    (%eax),%eax
c0105914:	85 c0                	test   %eax,%eax
c0105916:	74 19                	je     c0105931 <check_swap+0x15a>
c0105918:	68 85 e0 10 c0       	push   $0xc010e085
c010591d:	68 16 df 10 c0       	push   $0xc010df16
c0105922:	68 cb 00 00 00       	push   $0xcb
c0105927:	68 b0 de 10 c0       	push   $0xc010deb0
c010592c:	e8 cc aa ff ff       	call   c01003fd <__panic>

     struct vma_struct *vma = vma_create(BEING_CHECK_VALID_VADDR, CHECK_VALID_VADDR, VM_WRITE | VM_READ);
c0105931:	83 ec 04             	sub    $0x4,%esp
c0105934:	6a 03                	push   $0x3
c0105936:	68 00 60 00 00       	push   $0x6000
c010593b:	68 00 10 00 00       	push   $0x1000
c0105940:	e8 9c dd ff ff       	call   c01036e1 <vma_create>
c0105945:	83 c4 10             	add    $0x10,%esp
c0105948:	89 45 d0             	mov    %eax,-0x30(%ebp)
     assert(vma != NULL);
c010594b:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c010594f:	75 19                	jne    c010596a <check_swap+0x193>
c0105951:	68 93 e0 10 c0       	push   $0xc010e093
c0105956:	68 16 df 10 c0       	push   $0xc010df16
c010595b:	68 ce 00 00 00       	push   $0xce
c0105960:	68 b0 de 10 c0       	push   $0xc010deb0
c0105965:	e8 93 aa ff ff       	call   c01003fd <__panic>

     insert_vma_struct(mm, vma);
c010596a:	83 ec 08             	sub    $0x8,%esp
c010596d:	ff 75 d0             	pushl  -0x30(%ebp)
c0105970:	ff 75 d8             	pushl  -0x28(%ebp)
c0105973:	e8 d1 de ff ff       	call   c0103849 <insert_vma_struct>
c0105978:	83 c4 10             	add    $0x10,%esp

     //setup the temp Page Table vaddr 0~4MB
     cprintf("setup Page Table for vaddr 0X1000, so alloc a page\n");
c010597b:	83 ec 0c             	sub    $0xc,%esp
c010597e:	68 a0 e0 10 c0       	push   $0xc010e0a0
c0105983:	e8 0f a9 ff ff       	call   c0100297 <cprintf>
c0105988:	83 c4 10             	add    $0x10,%esp
     pte_t *temp_ptep=NULL;
c010598b:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
c0105992:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0105995:	8b 40 0c             	mov    0xc(%eax),%eax
c0105998:	83 ec 04             	sub    $0x4,%esp
c010599b:	6a 01                	push   $0x1
c010599d:	68 00 10 00 00       	push   $0x1000
c01059a2:	50                   	push   %eax
c01059a3:	e8 57 1d 00 00       	call   c01076ff <get_pte>
c01059a8:	83 c4 10             	add    $0x10,%esp
c01059ab:	89 45 cc             	mov    %eax,-0x34(%ebp)
     assert(temp_ptep!= NULL);
c01059ae:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c01059b2:	75 19                	jne    c01059cd <check_swap+0x1f6>
c01059b4:	68 d4 e0 10 c0       	push   $0xc010e0d4
c01059b9:	68 16 df 10 c0       	push   $0xc010df16
c01059be:	68 d6 00 00 00       	push   $0xd6
c01059c3:	68 b0 de 10 c0       	push   $0xc010deb0
c01059c8:	e8 30 aa ff ff       	call   c01003fd <__panic>
     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
c01059cd:	83 ec 0c             	sub    $0xc,%esp
c01059d0:	68 e8 e0 10 c0       	push   $0xc010e0e8
c01059d5:	e8 bd a8 ff ff       	call   c0100297 <cprintf>
c01059da:	83 c4 10             	add    $0x10,%esp
     
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01059dd:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01059e4:	e9 90 00 00 00       	jmp    c0105a79 <check_swap+0x2a2>
          check_rp[i] = alloc_page();
c01059e9:	83 ec 0c             	sub    $0xc,%esp
c01059ec:	6a 01                	push   $0x1
c01059ee:	e8 a0 16 00 00       	call   c0107093 <alloc_pages>
c01059f3:	83 c4 10             	add    $0x10,%esp
c01059f6:	89 c2                	mov    %eax,%edx
c01059f8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01059fb:	89 14 85 20 71 1c c0 	mov    %edx,-0x3fe38ee0(,%eax,4)
          assert(check_rp[i] != NULL );
c0105a02:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105a05:	8b 04 85 20 71 1c c0 	mov    -0x3fe38ee0(,%eax,4),%eax
c0105a0c:	85 c0                	test   %eax,%eax
c0105a0e:	75 19                	jne    c0105a29 <check_swap+0x252>
c0105a10:	68 0c e1 10 c0       	push   $0xc010e10c
c0105a15:	68 16 df 10 c0       	push   $0xc010df16
c0105a1a:	68 db 00 00 00       	push   $0xdb
c0105a1f:	68 b0 de 10 c0       	push   $0xc010deb0
c0105a24:	e8 d4 a9 ff ff       	call   c01003fd <__panic>
          assert(!PageProperty(check_rp[i]));
c0105a29:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105a2c:	8b 04 85 20 71 1c c0 	mov    -0x3fe38ee0(,%eax,4),%eax
c0105a33:	83 c0 04             	add    $0x4,%eax
c0105a36:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
c0105a3d:	89 45 a4             	mov    %eax,-0x5c(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0105a40:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0105a43:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0105a46:	0f a3 10             	bt     %edx,(%eax)
c0105a49:	19 c0                	sbb    %eax,%eax
c0105a4b:	89 45 a0             	mov    %eax,-0x60(%ebp)
    return oldbit != 0;
c0105a4e:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
c0105a52:	0f 95 c0             	setne  %al
c0105a55:	0f b6 c0             	movzbl %al,%eax
c0105a58:	85 c0                	test   %eax,%eax
c0105a5a:	74 19                	je     c0105a75 <check_swap+0x29e>
c0105a5c:	68 20 e1 10 c0       	push   $0xc010e120
c0105a61:	68 16 df 10 c0       	push   $0xc010df16
c0105a66:	68 dc 00 00 00       	push   $0xdc
c0105a6b:	68 b0 de 10 c0       	push   $0xc010deb0
c0105a70:	e8 88 a9 ff ff       	call   c01003fd <__panic>
     pte_t *temp_ptep=NULL;
     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
     assert(temp_ptep!= NULL);
     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
     
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0105a75:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0105a79:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0105a7d:	0f 8e 66 ff ff ff    	jle    c01059e9 <check_swap+0x212>
          check_rp[i] = alloc_page();
          assert(check_rp[i] != NULL );
          assert(!PageProperty(check_rp[i]));
     }
     list_entry_t free_list_store = free_list;
c0105a83:	a1 e4 71 1c c0       	mov    0xc01c71e4,%eax
c0105a88:	8b 15 e8 71 1c c0    	mov    0xc01c71e8,%edx
c0105a8e:	89 45 98             	mov    %eax,-0x68(%ebp)
c0105a91:	89 55 9c             	mov    %edx,-0x64(%ebp)
c0105a94:	c7 45 c0 e4 71 1c c0 	movl   $0xc01c71e4,-0x40(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0105a9b:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0105a9e:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0105aa1:	89 50 04             	mov    %edx,0x4(%eax)
c0105aa4:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0105aa7:	8b 50 04             	mov    0x4(%eax),%edx
c0105aaa:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0105aad:	89 10                	mov    %edx,(%eax)
c0105aaf:	c7 45 c8 e4 71 1c c0 	movl   $0xc01c71e4,-0x38(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0105ab6:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0105ab9:	8b 40 04             	mov    0x4(%eax),%eax
c0105abc:	39 45 c8             	cmp    %eax,-0x38(%ebp)
c0105abf:	0f 94 c0             	sete   %al
c0105ac2:	0f b6 c0             	movzbl %al,%eax
     list_init(&free_list);
     assert(list_empty(&free_list));
c0105ac5:	85 c0                	test   %eax,%eax
c0105ac7:	75 19                	jne    c0105ae2 <check_swap+0x30b>
c0105ac9:	68 3b e1 10 c0       	push   $0xc010e13b
c0105ace:	68 16 df 10 c0       	push   $0xc010df16
c0105ad3:	68 e0 00 00 00       	push   $0xe0
c0105ad8:	68 b0 de 10 c0       	push   $0xc010deb0
c0105add:	e8 1b a9 ff ff       	call   c01003fd <__panic>
     
     //assert(alloc_page() == NULL);
     
     unsigned int nr_free_store = nr_free;
c0105ae2:	a1 ec 71 1c c0       	mov    0xc01c71ec,%eax
c0105ae7:	89 45 bc             	mov    %eax,-0x44(%ebp)
     nr_free = 0;
c0105aea:	c7 05 ec 71 1c c0 00 	movl   $0x0,0xc01c71ec
c0105af1:	00 00 00 
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0105af4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0105afb:	eb 1c                	jmp    c0105b19 <check_swap+0x342>
        free_pages(check_rp[i],1);
c0105afd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105b00:	8b 04 85 20 71 1c c0 	mov    -0x3fe38ee0(,%eax,4),%eax
c0105b07:	83 ec 08             	sub    $0x8,%esp
c0105b0a:	6a 01                	push   $0x1
c0105b0c:	50                   	push   %eax
c0105b0d:	e8 ed 15 00 00       	call   c01070ff <free_pages>
c0105b12:	83 c4 10             	add    $0x10,%esp
     
     //assert(alloc_page() == NULL);
     
     unsigned int nr_free_store = nr_free;
     nr_free = 0;
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0105b15:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0105b19:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0105b1d:	7e de                	jle    c0105afd <check_swap+0x326>
        free_pages(check_rp[i],1);
     }
     assert(nr_free==CHECK_VALID_PHY_PAGE_NUM);
c0105b1f:	a1 ec 71 1c c0       	mov    0xc01c71ec,%eax
c0105b24:	83 f8 04             	cmp    $0x4,%eax
c0105b27:	74 19                	je     c0105b42 <check_swap+0x36b>
c0105b29:	68 54 e1 10 c0       	push   $0xc010e154
c0105b2e:	68 16 df 10 c0       	push   $0xc010df16
c0105b33:	68 e9 00 00 00       	push   $0xe9
c0105b38:	68 b0 de 10 c0       	push   $0xc010deb0
c0105b3d:	e8 bb a8 ff ff       	call   c01003fd <__panic>
     
     cprintf("set up init env for check_swap begin!\n");
c0105b42:	83 ec 0c             	sub    $0xc,%esp
c0105b45:	68 78 e1 10 c0       	push   $0xc010e178
c0105b4a:	e8 48 a7 ff ff       	call   c0100297 <cprintf>
c0105b4f:	83 c4 10             	add    $0x10,%esp
     //setup initial vir_page<->phy_page environment for page relpacement algorithm 

     
     pgfault_num=0;
c0105b52:	c7 05 64 4f 1c c0 00 	movl   $0x0,0xc01c4f64
c0105b59:	00 00 00 
     
     check_content_set();
c0105b5c:	e8 fd fa ff ff       	call   c010565e <check_content_set>
     assert( nr_free == 0);         
c0105b61:	a1 ec 71 1c c0       	mov    0xc01c71ec,%eax
c0105b66:	85 c0                	test   %eax,%eax
c0105b68:	74 19                	je     c0105b83 <check_swap+0x3ac>
c0105b6a:	68 9f e1 10 c0       	push   $0xc010e19f
c0105b6f:	68 16 df 10 c0       	push   $0xc010df16
c0105b74:	68 f2 00 00 00       	push   $0xf2
c0105b79:	68 b0 de 10 c0       	push   $0xc010deb0
c0105b7e:	e8 7a a8 ff ff       	call   c01003fd <__panic>
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c0105b83:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0105b8a:	eb 26                	jmp    c0105bb2 <check_swap+0x3db>
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
c0105b8c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105b8f:	c7 04 85 40 71 1c c0 	movl   $0xffffffff,-0x3fe38ec0(,%eax,4)
c0105b96:	ff ff ff ff 
c0105b9a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105b9d:	8b 14 85 40 71 1c c0 	mov    -0x3fe38ec0(,%eax,4),%edx
c0105ba4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105ba7:	89 14 85 80 71 1c c0 	mov    %edx,-0x3fe38e80(,%eax,4)
     
     pgfault_num=0;
     
     check_content_set();
     assert( nr_free == 0);         
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c0105bae:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0105bb2:	83 7d ec 09          	cmpl   $0x9,-0x14(%ebp)
c0105bb6:	7e d4                	jle    c0105b8c <check_swap+0x3b5>
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
     
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0105bb8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0105bbf:	e9 cc 00 00 00       	jmp    c0105c90 <check_swap+0x4b9>
         check_ptep[i]=0;
c0105bc4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105bc7:	c7 04 85 d4 71 1c c0 	movl   $0x0,-0x3fe38e2c(,%eax,4)
c0105bce:	00 00 00 00 
         check_ptep[i] = get_pte(pgdir, (i+1)*0x1000, 0);
c0105bd2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105bd5:	83 c0 01             	add    $0x1,%eax
c0105bd8:	c1 e0 0c             	shl    $0xc,%eax
c0105bdb:	83 ec 04             	sub    $0x4,%esp
c0105bde:	6a 00                	push   $0x0
c0105be0:	50                   	push   %eax
c0105be1:	ff 75 d4             	pushl  -0x2c(%ebp)
c0105be4:	e8 16 1b 00 00       	call   c01076ff <get_pte>
c0105be9:	83 c4 10             	add    $0x10,%esp
c0105bec:	89 c2                	mov    %eax,%edx
c0105bee:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105bf1:	89 14 85 d4 71 1c c0 	mov    %edx,-0x3fe38e2c(,%eax,4)
         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
         assert(check_ptep[i] != NULL);
c0105bf8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105bfb:	8b 04 85 d4 71 1c c0 	mov    -0x3fe38e2c(,%eax,4),%eax
c0105c02:	85 c0                	test   %eax,%eax
c0105c04:	75 19                	jne    c0105c1f <check_swap+0x448>
c0105c06:	68 ac e1 10 c0       	push   $0xc010e1ac
c0105c0b:	68 16 df 10 c0       	push   $0xc010df16
c0105c10:	68 fa 00 00 00       	push   $0xfa
c0105c15:	68 b0 de 10 c0       	push   $0xc010deb0
c0105c1a:	e8 de a7 ff ff       	call   c01003fd <__panic>
         assert(pte2page(*check_ptep[i]) == check_rp[i]);
c0105c1f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105c22:	8b 04 85 d4 71 1c c0 	mov    -0x3fe38e2c(,%eax,4),%eax
c0105c29:	8b 00                	mov    (%eax),%eax
c0105c2b:	83 ec 0c             	sub    $0xc,%esp
c0105c2e:	50                   	push   %eax
c0105c2f:	e8 d8 f6 ff ff       	call   c010530c <pte2page>
c0105c34:	83 c4 10             	add    $0x10,%esp
c0105c37:	89 c2                	mov    %eax,%edx
c0105c39:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105c3c:	8b 04 85 20 71 1c c0 	mov    -0x3fe38ee0(,%eax,4),%eax
c0105c43:	39 c2                	cmp    %eax,%edx
c0105c45:	74 19                	je     c0105c60 <check_swap+0x489>
c0105c47:	68 c4 e1 10 c0       	push   $0xc010e1c4
c0105c4c:	68 16 df 10 c0       	push   $0xc010df16
c0105c51:	68 fb 00 00 00       	push   $0xfb
c0105c56:	68 b0 de 10 c0       	push   $0xc010deb0
c0105c5b:	e8 9d a7 ff ff       	call   c01003fd <__panic>
         assert((*check_ptep[i] & PTE_P));          
c0105c60:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105c63:	8b 04 85 d4 71 1c c0 	mov    -0x3fe38e2c(,%eax,4),%eax
c0105c6a:	8b 00                	mov    (%eax),%eax
c0105c6c:	83 e0 01             	and    $0x1,%eax
c0105c6f:	85 c0                	test   %eax,%eax
c0105c71:	75 19                	jne    c0105c8c <check_swap+0x4b5>
c0105c73:	68 ec e1 10 c0       	push   $0xc010e1ec
c0105c78:	68 16 df 10 c0       	push   $0xc010df16
c0105c7d:	68 fc 00 00 00       	push   $0xfc
c0105c82:	68 b0 de 10 c0       	push   $0xc010deb0
c0105c87:	e8 71 a7 ff ff       	call   c01003fd <__panic>
     check_content_set();
     assert( nr_free == 0);         
     for(i = 0; i<MAX_SEQ_NO ; i++) 
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
     
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0105c8c:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0105c90:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0105c94:	0f 8e 2a ff ff ff    	jle    c0105bc4 <check_swap+0x3ed>
         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
         assert(check_ptep[i] != NULL);
         assert(pte2page(*check_ptep[i]) == check_rp[i]);
         assert((*check_ptep[i] & PTE_P));          
     }
     cprintf("set up init env for check_swap over!\n");
c0105c9a:	83 ec 0c             	sub    $0xc,%esp
c0105c9d:	68 08 e2 10 c0       	push   $0xc010e208
c0105ca2:	e8 f0 a5 ff ff       	call   c0100297 <cprintf>
c0105ca7:	83 c4 10             	add    $0x10,%esp
     // now access the virt pages to test  page relpacement algorithm 
     ret=check_content_access();
c0105caa:	e8 10 fb ff ff       	call   c01057bf <check_content_access>
c0105caf:	89 45 b8             	mov    %eax,-0x48(%ebp)
     assert(ret==0);
c0105cb2:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
c0105cb6:	74 19                	je     c0105cd1 <check_swap+0x4fa>
c0105cb8:	68 2e e2 10 c0       	push   $0xc010e22e
c0105cbd:	68 16 df 10 c0       	push   $0xc010df16
c0105cc2:	68 01 01 00 00       	push   $0x101
c0105cc7:	68 b0 de 10 c0       	push   $0xc010deb0
c0105ccc:	e8 2c a7 ff ff       	call   c01003fd <__panic>
     
     //restore kernel mem env
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0105cd1:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0105cd8:	eb 1c                	jmp    c0105cf6 <check_swap+0x51f>
         free_pages(check_rp[i],1);
c0105cda:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105cdd:	8b 04 85 20 71 1c c0 	mov    -0x3fe38ee0(,%eax,4),%eax
c0105ce4:	83 ec 08             	sub    $0x8,%esp
c0105ce7:	6a 01                	push   $0x1
c0105ce9:	50                   	push   %eax
c0105cea:	e8 10 14 00 00       	call   c01070ff <free_pages>
c0105cef:	83 c4 10             	add    $0x10,%esp
     // now access the virt pages to test  page relpacement algorithm 
     ret=check_content_access();
     assert(ret==0);
     
     //restore kernel mem env
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0105cf2:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0105cf6:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0105cfa:	7e de                	jle    c0105cda <check_swap+0x503>
         free_pages(check_rp[i],1);
     } 

     //free_page(pte2page(*temp_ptep));
    free_page(pde2page(pgdir[0]));
c0105cfc:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0105cff:	8b 00                	mov    (%eax),%eax
c0105d01:	83 ec 0c             	sub    $0xc,%esp
c0105d04:	50                   	push   %eax
c0105d05:	e8 3c f6 ff ff       	call   c0105346 <pde2page>
c0105d0a:	83 c4 10             	add    $0x10,%esp
c0105d0d:	83 ec 08             	sub    $0x8,%esp
c0105d10:	6a 01                	push   $0x1
c0105d12:	50                   	push   %eax
c0105d13:	e8 e7 13 00 00       	call   c01070ff <free_pages>
c0105d18:	83 c4 10             	add    $0x10,%esp
     pgdir[0] = 0;
c0105d1b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0105d1e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
     mm->pgdir = NULL;
c0105d24:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0105d27:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
     mm_destroy(mm);
c0105d2e:	83 ec 0c             	sub    $0xc,%esp
c0105d31:	ff 75 d8             	pushl  -0x28(%ebp)
c0105d34:	e8 34 dc ff ff       	call   c010396d <mm_destroy>
c0105d39:	83 c4 10             	add    $0x10,%esp
     check_mm_struct = NULL;
c0105d3c:	c7 05 10 71 1c c0 00 	movl   $0x0,0xc01c7110
c0105d43:	00 00 00 
     
     nr_free = nr_free_store;
c0105d46:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0105d49:	a3 ec 71 1c c0       	mov    %eax,0xc01c71ec
     free_list = free_list_store;
c0105d4e:	8b 45 98             	mov    -0x68(%ebp),%eax
c0105d51:	8b 55 9c             	mov    -0x64(%ebp),%edx
c0105d54:	a3 e4 71 1c c0       	mov    %eax,0xc01c71e4
c0105d59:	89 15 e8 71 1c c0    	mov    %edx,0xc01c71e8

     
     le = &free_list;
c0105d5f:	c7 45 e8 e4 71 1c c0 	movl   $0xc01c71e4,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c0105d66:	eb 1d                	jmp    c0105d85 <check_swap+0x5ae>
         struct Page *p = le2page(le, page_link);
c0105d68:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105d6b:	83 e8 0c             	sub    $0xc,%eax
c0105d6e:	89 45 b4             	mov    %eax,-0x4c(%ebp)
         count --, total -= p->property;
c0105d71:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0105d75:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0105d78:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0105d7b:	8b 40 08             	mov    0x8(%eax),%eax
c0105d7e:	29 c2                	sub    %eax,%edx
c0105d80:	89 d0                	mov    %edx,%eax
c0105d82:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105d85:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105d88:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0105d8b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0105d8e:	8b 40 04             	mov    0x4(%eax),%eax
     nr_free = nr_free_store;
     free_list = free_list_store;

     
     le = &free_list;
     while ((le = list_next(le)) != &free_list) {
c0105d91:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0105d94:	81 7d e8 e4 71 1c c0 	cmpl   $0xc01c71e4,-0x18(%ebp)
c0105d9b:	75 cb                	jne    c0105d68 <check_swap+0x591>
         struct Page *p = le2page(le, page_link);
         count --, total -= p->property;
     }
     cprintf("count is %d, total is %d\n",count,total);
c0105d9d:	83 ec 04             	sub    $0x4,%esp
c0105da0:	ff 75 f0             	pushl  -0x10(%ebp)
c0105da3:	ff 75 f4             	pushl  -0xc(%ebp)
c0105da6:	68 35 e2 10 c0       	push   $0xc010e235
c0105dab:	e8 e7 a4 ff ff       	call   c0100297 <cprintf>
c0105db0:	83 c4 10             	add    $0x10,%esp
     //assert(count == 0);
     
     cprintf("check_swap() succeeded!\n");
c0105db3:	83 ec 0c             	sub    $0xc,%esp
c0105db6:	68 4f e2 10 c0       	push   $0xc010e24f
c0105dbb:	e8 d7 a4 ff ff       	call   c0100297 <cprintf>
c0105dc0:	83 c4 10             	add    $0x10,%esp
}
c0105dc3:	90                   	nop
c0105dc4:	c9                   	leave  
c0105dc5:	c3                   	ret    

c0105dc6 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0105dc6:	55                   	push   %ebp
c0105dc7:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0105dc9:	8b 45 08             	mov    0x8(%ebp),%eax
c0105dcc:	8b 15 f8 71 1c c0    	mov    0xc01c71f8,%edx
c0105dd2:	29 d0                	sub    %edx,%eax
c0105dd4:	c1 f8 05             	sar    $0x5,%eax
}
c0105dd7:	5d                   	pop    %ebp
c0105dd8:	c3                   	ret    

c0105dd9 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0105dd9:	55                   	push   %ebp
c0105dda:	89 e5                	mov    %esp,%ebp
    return page2ppn(page) << PGSHIFT;
c0105ddc:	ff 75 08             	pushl  0x8(%ebp)
c0105ddf:	e8 e2 ff ff ff       	call   c0105dc6 <page2ppn>
c0105de4:	83 c4 04             	add    $0x4,%esp
c0105de7:	c1 e0 0c             	shl    $0xc,%eax
}
c0105dea:	c9                   	leave  
c0105deb:	c3                   	ret    

c0105dec <page_ref>:
pde2page(pde_t pde) {
    return pa2page(PDE_ADDR(pde));
}

static inline int
page_ref(struct Page *page) {
c0105dec:	55                   	push   %ebp
c0105ded:	89 e5                	mov    %esp,%ebp
    return page->ref;
c0105def:	8b 45 08             	mov    0x8(%ebp),%eax
c0105df2:	8b 00                	mov    (%eax),%eax
}
c0105df4:	5d                   	pop    %ebp
c0105df5:	c3                   	ret    

c0105df6 <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c0105df6:	55                   	push   %ebp
c0105df7:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c0105df9:	8b 45 08             	mov    0x8(%ebp),%eax
c0105dfc:	8b 55 0c             	mov    0xc(%ebp),%edx
c0105dff:	89 10                	mov    %edx,(%eax)
}
c0105e01:	90                   	nop
c0105e02:	5d                   	pop    %ebp
c0105e03:	c3                   	ret    

c0105e04 <default_init>:

#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
default_init(void) {
c0105e04:	55                   	push   %ebp
c0105e05:	89 e5                	mov    %esp,%ebp
c0105e07:	83 ec 10             	sub    $0x10,%esp
c0105e0a:	c7 45 fc e4 71 1c c0 	movl   $0xc01c71e4,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0105e11:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0105e14:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0105e17:	89 50 04             	mov    %edx,0x4(%eax)
c0105e1a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0105e1d:	8b 50 04             	mov    0x4(%eax),%edx
c0105e20:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0105e23:	89 10                	mov    %edx,(%eax)
    list_init(&free_list);
    nr_free = 0;
c0105e25:	c7 05 ec 71 1c c0 00 	movl   $0x0,0xc01c71ec
c0105e2c:	00 00 00 
}
c0105e2f:	90                   	nop
c0105e30:	c9                   	leave  
c0105e31:	c3                   	ret    

c0105e32 <default_init_memmap>:

static void
default_init_memmap(struct Page *base, size_t n) {
c0105e32:	55                   	push   %ebp
c0105e33:	89 e5                	mov    %esp,%ebp
c0105e35:	83 ec 48             	sub    $0x48,%esp
    assert(n > 0);
c0105e38:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0105e3c:	75 16                	jne    c0105e54 <default_init_memmap+0x22>
c0105e3e:	68 68 e2 10 c0       	push   $0xc010e268
c0105e43:	68 6e e2 10 c0       	push   $0xc010e26e
c0105e48:	6a 6d                	push   $0x6d
c0105e4a:	68 83 e2 10 c0       	push   $0xc010e283
c0105e4f:	e8 a9 a5 ff ff       	call   c01003fd <__panic>
    struct Page *p = base;
c0105e54:	8b 45 08             	mov    0x8(%ebp),%eax
c0105e57:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (; p != base + n; p ++) {
c0105e5a:	eb 6c                	jmp    c0105ec8 <default_init_memmap+0x96>
        assert(PageReserved(p));
c0105e5c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105e5f:	83 c0 04             	add    $0x4,%eax
c0105e62:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c0105e69:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0105e6c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105e6f:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0105e72:	0f a3 10             	bt     %edx,(%eax)
c0105e75:	19 c0                	sbb    %eax,%eax
c0105e77:	89 45 e0             	mov    %eax,-0x20(%ebp)
    return oldbit != 0;
c0105e7a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0105e7e:	0f 95 c0             	setne  %al
c0105e81:	0f b6 c0             	movzbl %al,%eax
c0105e84:	85 c0                	test   %eax,%eax
c0105e86:	75 16                	jne    c0105e9e <default_init_memmap+0x6c>
c0105e88:	68 99 e2 10 c0       	push   $0xc010e299
c0105e8d:	68 6e e2 10 c0       	push   $0xc010e26e
c0105e92:	6a 70                	push   $0x70
c0105e94:	68 83 e2 10 c0       	push   $0xc010e283
c0105e99:	e8 5f a5 ff ff       	call   c01003fd <__panic>
        p->flags = p->property = 0;
c0105e9e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105ea1:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
c0105ea8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105eab:	8b 50 08             	mov    0x8(%eax),%edx
c0105eae:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105eb1:	89 50 04             	mov    %edx,0x4(%eax)
        set_page_ref(p, 0);
c0105eb4:	83 ec 08             	sub    $0x8,%esp
c0105eb7:	6a 00                	push   $0x0
c0105eb9:	ff 75 f4             	pushl  -0xc(%ebp)
c0105ebc:	e8 35 ff ff ff       	call   c0105df6 <set_page_ref>
c0105ec1:	83 c4 10             	add    $0x10,%esp

static void
default_init_memmap(struct Page *base, size_t n) {
    assert(n > 0);
    struct Page *p = base;
    for (; p != base + n; p ++) {
c0105ec4:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
c0105ec8:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105ecb:	c1 e0 05             	shl    $0x5,%eax
c0105ece:	89 c2                	mov    %eax,%edx
c0105ed0:	8b 45 08             	mov    0x8(%ebp),%eax
c0105ed3:	01 d0                	add    %edx,%eax
c0105ed5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0105ed8:	75 82                	jne    c0105e5c <default_init_memmap+0x2a>
        assert(PageReserved(p));
        p->flags = p->property = 0;
        set_page_ref(p, 0);
    }
    base->property = n;
c0105eda:	8b 45 08             	mov    0x8(%ebp),%eax
c0105edd:	8b 55 0c             	mov    0xc(%ebp),%edx
c0105ee0:	89 50 08             	mov    %edx,0x8(%eax)
    SetPageProperty(base);
c0105ee3:	8b 45 08             	mov    0x8(%ebp),%eax
c0105ee6:	83 c0 04             	add    $0x4,%eax
c0105ee9:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
c0105ef0:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0105ef3:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0105ef6:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0105ef9:	0f ab 10             	bts    %edx,(%eax)
    nr_free += n;
c0105efc:	8b 15 ec 71 1c c0    	mov    0xc01c71ec,%edx
c0105f02:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105f05:	01 d0                	add    %edx,%eax
c0105f07:	a3 ec 71 1c c0       	mov    %eax,0xc01c71ec
    list_add(&free_list, &(base->page_link));
c0105f0c:	8b 45 08             	mov    0x8(%ebp),%eax
c0105f0f:	83 c0 0c             	add    $0xc,%eax
c0105f12:	c7 45 f0 e4 71 1c c0 	movl   $0xc01c71e4,-0x10(%ebp)
c0105f19:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0105f1c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105f1f:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0105f22:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0105f25:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0105f28:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0105f2b:	8b 40 04             	mov    0x4(%eax),%eax
c0105f2e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0105f31:	89 55 d0             	mov    %edx,-0x30(%ebp)
c0105f34:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0105f37:	89 55 cc             	mov    %edx,-0x34(%ebp)
c0105f3a:	89 45 c8             	mov    %eax,-0x38(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0105f3d:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0105f40:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0105f43:	89 10                	mov    %edx,(%eax)
c0105f45:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0105f48:	8b 10                	mov    (%eax),%edx
c0105f4a:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0105f4d:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0105f50:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0105f53:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0105f56:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0105f59:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0105f5c:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0105f5f:	89 10                	mov    %edx,(%eax)
}
c0105f61:	90                   	nop
c0105f62:	c9                   	leave  
c0105f63:	c3                   	ret    

c0105f64 <default_alloc_pages>:

// LAB2 MODIFIED need to be rewritten
static struct Page *
default_alloc_pages(size_t n) {
c0105f64:	55                   	push   %ebp
c0105f65:	89 e5                	mov    %esp,%ebp
c0105f67:	83 ec 58             	sub    $0x58,%esp
    assert(n > 0);
c0105f6a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0105f6e:	75 16                	jne    c0105f86 <default_alloc_pages+0x22>
c0105f70:	68 68 e2 10 c0       	push   $0xc010e268
c0105f75:	68 6e e2 10 c0       	push   $0xc010e26e
c0105f7a:	6a 7d                	push   $0x7d
c0105f7c:	68 83 e2 10 c0       	push   $0xc010e283
c0105f81:	e8 77 a4 ff ff       	call   c01003fd <__panic>
    if (n > nr_free) {
c0105f86:	a1 ec 71 1c c0       	mov    0xc01c71ec,%eax
c0105f8b:	3b 45 08             	cmp    0x8(%ebp),%eax
c0105f8e:	73 0a                	jae    c0105f9a <default_alloc_pages+0x36>
        return NULL;
c0105f90:	b8 00 00 00 00       	mov    $0x0,%eax
c0105f95:	e9 41 01 00 00       	jmp    c01060db <default_alloc_pages+0x177>
    }
    struct Page *page = NULL;
c0105f9a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    list_entry_t *le = &free_list;
c0105fa1:	c7 45 f0 e4 71 1c c0 	movl   $0xc01c71e4,-0x10(%ebp)
    while ((le = list_next(le)) != &free_list) {
c0105fa8:	eb 1c                	jmp    c0105fc6 <default_alloc_pages+0x62>
        struct Page *p = le2page(le, page_link);
c0105faa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105fad:	83 e8 0c             	sub    $0xc,%eax
c0105fb0:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (p->property >= n) {
c0105fb3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105fb6:	8b 40 08             	mov    0x8(%eax),%eax
c0105fb9:	3b 45 08             	cmp    0x8(%ebp),%eax
c0105fbc:	72 08                	jb     c0105fc6 <default_alloc_pages+0x62>
            page = p;
c0105fbe:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105fc1:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
c0105fc4:	eb 18                	jmp    c0105fde <default_alloc_pages+0x7a>
c0105fc6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105fc9:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0105fcc:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0105fcf:	8b 40 04             	mov    0x4(%eax),%eax
    if (n > nr_free) {
        return NULL;
    }
    struct Page *page = NULL;
    list_entry_t *le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c0105fd2:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105fd5:	81 7d f0 e4 71 1c c0 	cmpl   $0xc01c71e4,-0x10(%ebp)
c0105fdc:	75 cc                	jne    c0105faa <default_alloc_pages+0x46>
        if (p->property >= n) {
            page = p;
            break;
        }
    }
    if (page != NULL) {
c0105fde:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105fe2:	0f 84 f0 00 00 00    	je     c01060d8 <default_alloc_pages+0x174>
c0105fe8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105feb:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0105fee:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0105ff1:	8b 40 04             	mov    0x4(%eax),%eax
        list_entry_t *following_le = list_next(le);
c0105ff4:	89 45 e0             	mov    %eax,-0x20(%ebp)
        list_del(&(page->page_link));
c0105ff7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105ffa:	83 c0 0c             	add    $0xc,%eax
c0105ffd:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0106000:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106003:	8b 40 04             	mov    0x4(%eax),%eax
c0106006:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0106009:	8b 12                	mov    (%edx),%edx
c010600b:	89 55 c8             	mov    %edx,-0x38(%ebp)
c010600e:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0106011:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0106014:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0106017:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010601a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010601d:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0106020:	89 10                	mov    %edx,(%eax)
        if (page->property > n) {
c0106022:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106025:	8b 40 08             	mov    0x8(%eax),%eax
c0106028:	3b 45 08             	cmp    0x8(%ebp),%eax
c010602b:	0f 86 81 00 00 00    	jbe    c01060b2 <default_alloc_pages+0x14e>
            struct Page *p = page + n;                      // split the allocated page
c0106031:	8b 45 08             	mov    0x8(%ebp),%eax
c0106034:	c1 e0 05             	shl    $0x5,%eax
c0106037:	89 c2                	mov    %eax,%edx
c0106039:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010603c:	01 d0                	add    %edx,%eax
c010603e:	89 45 d8             	mov    %eax,-0x28(%ebp)
            p->property = page->property - n;               // set page num
c0106041:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106044:	8b 40 08             	mov    0x8(%eax),%eax
c0106047:	2b 45 08             	sub    0x8(%ebp),%eax
c010604a:	89 c2                	mov    %eax,%edx
c010604c:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010604f:	89 50 08             	mov    %edx,0x8(%eax)
            SetPageProperty(p);                             // mark as the head page
c0106052:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0106055:	83 c0 04             	add    $0x4,%eax
c0106058:	c7 45 d0 01 00 00 00 	movl   $0x1,-0x30(%ebp)
c010605f:	89 45 b0             	mov    %eax,-0x50(%ebp)
c0106062:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0106065:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0106068:	0f ab 10             	bts    %edx,(%eax)
            list_add_before(following_le, &(p->page_link)); // add the remaining block before the formerly following block
c010606b:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010606e:	8d 50 0c             	lea    0xc(%eax),%edx
c0106071:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106074:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0106077:	89 55 c0             	mov    %edx,-0x40(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c010607a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010607d:	8b 00                	mov    (%eax),%eax
c010607f:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0106082:	89 55 bc             	mov    %edx,-0x44(%ebp)
c0106085:	89 45 b8             	mov    %eax,-0x48(%ebp)
c0106088:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010608b:	89 45 b4             	mov    %eax,-0x4c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010608e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0106091:	8b 55 bc             	mov    -0x44(%ebp),%edx
c0106094:	89 10                	mov    %edx,(%eax)
c0106096:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0106099:	8b 10                	mov    (%eax),%edx
c010609b:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010609e:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c01060a1:	8b 45 bc             	mov    -0x44(%ebp),%eax
c01060a4:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c01060a7:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c01060aa:	8b 45 bc             	mov    -0x44(%ebp),%eax
c01060ad:	8b 55 b8             	mov    -0x48(%ebp),%edx
c01060b0:	89 10                	mov    %edx,(%eax)
        }
        nr_free -= n;
c01060b2:	a1 ec 71 1c c0       	mov    0xc01c71ec,%eax
c01060b7:	2b 45 08             	sub    0x8(%ebp),%eax
c01060ba:	a3 ec 71 1c c0       	mov    %eax,0xc01c71ec
        ClearPageProperty(page);    // mark as "not head page"
c01060bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01060c2:	83 c0 04             	add    $0x4,%eax
c01060c5:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
c01060cc:	89 45 ac             	mov    %eax,-0x54(%ebp)
 * @nr:     the bit to clear
 * @addr:   the address to start counting from
 * */
static inline void
clear_bit(int nr, volatile void *addr) {
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c01060cf:	8b 45 ac             	mov    -0x54(%ebp),%eax
c01060d2:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01060d5:	0f b3 10             	btr    %edx,(%eax)
    }
    return page;
c01060d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01060db:	c9                   	leave  
c01060dc:	c3                   	ret    

c01060dd <default_free_pages>:

// LAB2 MODIFIED
static void
default_free_pages(struct Page *base, size_t n) {
c01060dd:	55                   	push   %ebp
c01060de:	89 e5                	mov    %esp,%ebp
c01060e0:	81 ec 88 00 00 00    	sub    $0x88,%esp
    assert(n > 0);
c01060e6:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01060ea:	75 19                	jne    c0106105 <default_free_pages+0x28>
c01060ec:	68 68 e2 10 c0       	push   $0xc010e268
c01060f1:	68 6e e2 10 c0       	push   $0xc010e26e
c01060f6:	68 9c 00 00 00       	push   $0x9c
c01060fb:	68 83 e2 10 c0       	push   $0xc010e283
c0106100:	e8 f8 a2 ff ff       	call   c01003fd <__panic>
    struct Page *p = base;
c0106105:	8b 45 08             	mov    0x8(%ebp),%eax
c0106108:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (; p != base + n; p ++) {
c010610b:	e9 8f 00 00 00       	jmp    c010619f <default_free_pages+0xc2>
        assert(!PageReserved(p) && !PageProperty(p));
c0106110:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106113:	83 c0 04             	add    $0x4,%eax
c0106116:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
c010611d:	89 45 bc             	mov    %eax,-0x44(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0106120:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0106123:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0106126:	0f a3 10             	bt     %edx,(%eax)
c0106129:	19 c0                	sbb    %eax,%eax
c010612b:	89 45 b8             	mov    %eax,-0x48(%ebp)
    return oldbit != 0;
c010612e:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
c0106132:	0f 95 c0             	setne  %al
c0106135:	0f b6 c0             	movzbl %al,%eax
c0106138:	85 c0                	test   %eax,%eax
c010613a:	75 2c                	jne    c0106168 <default_free_pages+0x8b>
c010613c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010613f:	83 c0 04             	add    $0x4,%eax
c0106142:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
c0106149:	89 45 b4             	mov    %eax,-0x4c(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010614c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010614f:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0106152:	0f a3 10             	bt     %edx,(%eax)
c0106155:	19 c0                	sbb    %eax,%eax
c0106157:	89 45 b0             	mov    %eax,-0x50(%ebp)
    return oldbit != 0;
c010615a:	83 7d b0 00          	cmpl   $0x0,-0x50(%ebp)
c010615e:	0f 95 c0             	setne  %al
c0106161:	0f b6 c0             	movzbl %al,%eax
c0106164:	85 c0                	test   %eax,%eax
c0106166:	74 19                	je     c0106181 <default_free_pages+0xa4>
c0106168:	68 ac e2 10 c0       	push   $0xc010e2ac
c010616d:	68 6e e2 10 c0       	push   $0xc010e26e
c0106172:	68 9f 00 00 00       	push   $0x9f
c0106177:	68 83 e2 10 c0       	push   $0xc010e283
c010617c:	e8 7c a2 ff ff       	call   c01003fd <__panic>
        p->flags = 0;
c0106181:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106184:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
        set_page_ref(p, 0);     // clear ref flag
c010618b:	83 ec 08             	sub    $0x8,%esp
c010618e:	6a 00                	push   $0x0
c0106190:	ff 75 f4             	pushl  -0xc(%ebp)
c0106193:	e8 5e fc ff ff       	call   c0105df6 <set_page_ref>
c0106198:	83 c4 10             	add    $0x10,%esp
// LAB2 MODIFIED
static void
default_free_pages(struct Page *base, size_t n) {
    assert(n > 0);
    struct Page *p = base;
    for (; p != base + n; p ++) {
c010619b:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
c010619f:	8b 45 0c             	mov    0xc(%ebp),%eax
c01061a2:	c1 e0 05             	shl    $0x5,%eax
c01061a5:	89 c2                	mov    %eax,%edx
c01061a7:	8b 45 08             	mov    0x8(%ebp),%eax
c01061aa:	01 d0                	add    %edx,%eax
c01061ac:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01061af:	0f 85 5b ff ff ff    	jne    c0106110 <default_free_pages+0x33>
        assert(!PageReserved(p) && !PageProperty(p));
        p->flags = 0;
        set_page_ref(p, 0);     // clear ref flag
    }
    base->property = n;
c01061b5:	8b 45 08             	mov    0x8(%ebp),%eax
c01061b8:	8b 55 0c             	mov    0xc(%ebp),%edx
c01061bb:	89 50 08             	mov    %edx,0x8(%eax)
    SetPageProperty(base);
c01061be:	8b 45 08             	mov    0x8(%ebp),%eax
c01061c1:	83 c0 04             	add    $0x4,%eax
c01061c4:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
c01061cb:	89 45 ac             	mov    %eax,-0x54(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c01061ce:	8b 45 ac             	mov    -0x54(%ebp),%eax
c01061d1:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01061d4:	0f ab 10             	bts    %edx,(%eax)
c01061d7:	c7 45 e8 e4 71 1c c0 	movl   $0xc01c71e4,-0x18(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01061de:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01061e1:	8b 40 04             	mov    0x4(%eax),%eax
    // try to extend free block
    list_entry_t *le = list_next(&free_list);
c01061e4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    while (le != &free_list) {
c01061e7:	e9 0e 01 00 00       	jmp    c01062fa <default_free_pages+0x21d>
        p = le2page(le, page_link);
c01061ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01061ef:	83 e8 0c             	sub    $0xc,%eax
c01061f2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01061f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01061f8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01061fb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01061fe:	8b 40 04             	mov    0x4(%eax),%eax
        le = list_next(le);
c0106201:	89 45 f0             	mov    %eax,-0x10(%ebp)
        // page is exactly before one page
        if (base + base->property == p) {
c0106204:	8b 45 08             	mov    0x8(%ebp),%eax
c0106207:	8b 40 08             	mov    0x8(%eax),%eax
c010620a:	c1 e0 05             	shl    $0x5,%eax
c010620d:	89 c2                	mov    %eax,%edx
c010620f:	8b 45 08             	mov    0x8(%ebp),%eax
c0106212:	01 d0                	add    %edx,%eax
c0106214:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0106217:	75 64                	jne    c010627d <default_free_pages+0x1a0>
            base->property += p->property;
c0106219:	8b 45 08             	mov    0x8(%ebp),%eax
c010621c:	8b 50 08             	mov    0x8(%eax),%edx
c010621f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106222:	8b 40 08             	mov    0x8(%eax),%eax
c0106225:	01 c2                	add    %eax,%edx
c0106227:	8b 45 08             	mov    0x8(%ebp),%eax
c010622a:	89 50 08             	mov    %edx,0x8(%eax)
            p->property = 0;     // clear properties of p
c010622d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106230:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
            ClearPageProperty(p);
c0106237:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010623a:	83 c0 04             	add    $0x4,%eax
c010623d:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
c0106244:	89 45 a0             	mov    %eax,-0x60(%ebp)
 * @nr:     the bit to clear
 * @addr:   the address to start counting from
 * */
static inline void
clear_bit(int nr, volatile void *addr) {
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0106247:	8b 45 a0             	mov    -0x60(%ebp),%eax
c010624a:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010624d:	0f b3 10             	btr    %edx,(%eax)
            list_del(&(p->page_link));
c0106250:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106253:	83 c0 0c             	add    $0xc,%eax
c0106256:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0106259:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010625c:	8b 40 04             	mov    0x4(%eax),%eax
c010625f:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0106262:	8b 12                	mov    (%edx),%edx
c0106264:	89 55 a8             	mov    %edx,-0x58(%ebp)
c0106267:	89 45 a4             	mov    %eax,-0x5c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010626a:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010626d:	8b 55 a4             	mov    -0x5c(%ebp),%edx
c0106270:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0106273:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0106276:	8b 55 a8             	mov    -0x58(%ebp),%edx
c0106279:	89 10                	mov    %edx,(%eax)
c010627b:	eb 7d                	jmp    c01062fa <default_free_pages+0x21d>
        }
        // page is exactly after one page
        else if (p + p->property == base) {
c010627d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106280:	8b 40 08             	mov    0x8(%eax),%eax
c0106283:	c1 e0 05             	shl    $0x5,%eax
c0106286:	89 c2                	mov    %eax,%edx
c0106288:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010628b:	01 d0                	add    %edx,%eax
c010628d:	3b 45 08             	cmp    0x8(%ebp),%eax
c0106290:	75 68                	jne    c01062fa <default_free_pages+0x21d>
            p->property += base->property;
c0106292:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106295:	8b 50 08             	mov    0x8(%eax),%edx
c0106298:	8b 45 08             	mov    0x8(%ebp),%eax
c010629b:	8b 40 08             	mov    0x8(%eax),%eax
c010629e:	01 c2                	add    %eax,%edx
c01062a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01062a3:	89 50 08             	mov    %edx,0x8(%eax)
            base->property = 0;     // clear properties of base
c01062a6:	8b 45 08             	mov    0x8(%ebp),%eax
c01062a9:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
            ClearPageProperty(base);
c01062b0:	8b 45 08             	mov    0x8(%ebp),%eax
c01062b3:	83 c0 04             	add    $0x4,%eax
c01062b6:	c7 45 cc 01 00 00 00 	movl   $0x1,-0x34(%ebp)
c01062bd:	89 45 94             	mov    %eax,-0x6c(%ebp)
c01062c0:	8b 45 94             	mov    -0x6c(%ebp),%eax
c01062c3:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01062c6:	0f b3 10             	btr    %edx,(%eax)
            base = p;
c01062c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01062cc:	89 45 08             	mov    %eax,0x8(%ebp)
            list_del(&(p->page_link));
c01062cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01062d2:	83 c0 0c             	add    $0xc,%eax
c01062d5:	89 45 d8             	mov    %eax,-0x28(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c01062d8:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01062db:	8b 40 04             	mov    0x4(%eax),%eax
c01062de:	8b 55 d8             	mov    -0x28(%ebp),%edx
c01062e1:	8b 12                	mov    (%edx),%edx
c01062e3:	89 55 9c             	mov    %edx,-0x64(%ebp)
c01062e6:	89 45 98             	mov    %eax,-0x68(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c01062e9:	8b 45 9c             	mov    -0x64(%ebp),%eax
c01062ec:	8b 55 98             	mov    -0x68(%ebp),%edx
c01062ef:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c01062f2:	8b 45 98             	mov    -0x68(%ebp),%eax
c01062f5:	8b 55 9c             	mov    -0x64(%ebp),%edx
c01062f8:	89 10                	mov    %edx,(%eax)
    }
    base->property = n;
    SetPageProperty(base);
    // try to extend free block
    list_entry_t *le = list_next(&free_list);
    while (le != &free_list) {
c01062fa:	81 7d f0 e4 71 1c c0 	cmpl   $0xc01c71e4,-0x10(%ebp)
c0106301:	0f 85 e5 fe ff ff    	jne    c01061ec <default_free_pages+0x10f>
c0106307:	c7 45 d0 e4 71 1c c0 	movl   $0xc01c71e4,-0x30(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010630e:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0106311:	8b 40 04             	mov    0x4(%eax),%eax
            base = p;
            list_del(&(p->page_link));
        }
    }
    // search for a place to add page into list
    le = list_next(&free_list);
c0106314:	89 45 f0             	mov    %eax,-0x10(%ebp)
    while (le != &free_list) {
c0106317:	eb 20                	jmp    c0106339 <default_free_pages+0x25c>
        p = le2page(le, page_link);
c0106319:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010631c:	83 e8 0c             	sub    $0xc,%eax
c010631f:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (p > base) {
c0106322:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106325:	3b 45 08             	cmp    0x8(%ebp),%eax
c0106328:	77 1a                	ja     c0106344 <default_free_pages+0x267>
c010632a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010632d:	89 45 c8             	mov    %eax,-0x38(%ebp)
c0106330:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0106333:	8b 40 04             	mov    0x4(%eax),%eax
            break;
        }
        le = list_next(le);
c0106336:	89 45 f0             	mov    %eax,-0x10(%ebp)
            list_del(&(p->page_link));
        }
    }
    // search for a place to add page into list
    le = list_next(&free_list);
    while (le != &free_list) {
c0106339:	81 7d f0 e4 71 1c c0 	cmpl   $0xc01c71e4,-0x10(%ebp)
c0106340:	75 d7                	jne    c0106319 <default_free_pages+0x23c>
c0106342:	eb 01                	jmp    c0106345 <default_free_pages+0x268>
        p = le2page(le, page_link);
        if (p > base) {
            break;
c0106344:	90                   	nop
        }
        le = list_next(le);
    }
    nr_free += n;
c0106345:	8b 15 ec 71 1c c0    	mov    0xc01c71ec,%edx
c010634b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010634e:	01 d0                	add    %edx,%eax
c0106350:	a3 ec 71 1c c0       	mov    %eax,0xc01c71ec
    list_add_before(le, &(base->page_link)); 
c0106355:	8b 45 08             	mov    0x8(%ebp),%eax
c0106358:	8d 50 0c             	lea    0xc(%eax),%edx
c010635b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010635e:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c0106361:	89 55 90             	mov    %edx,-0x70(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c0106364:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0106367:	8b 00                	mov    (%eax),%eax
c0106369:	8b 55 90             	mov    -0x70(%ebp),%edx
c010636c:	89 55 8c             	mov    %edx,-0x74(%ebp)
c010636f:	89 45 88             	mov    %eax,-0x78(%ebp)
c0106372:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0106375:	89 45 84             	mov    %eax,-0x7c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0106378:	8b 45 84             	mov    -0x7c(%ebp),%eax
c010637b:	8b 55 8c             	mov    -0x74(%ebp),%edx
c010637e:	89 10                	mov    %edx,(%eax)
c0106380:	8b 45 84             	mov    -0x7c(%ebp),%eax
c0106383:	8b 10                	mov    (%eax),%edx
c0106385:	8b 45 88             	mov    -0x78(%ebp),%eax
c0106388:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010638b:	8b 45 8c             	mov    -0x74(%ebp),%eax
c010638e:	8b 55 84             	mov    -0x7c(%ebp),%edx
c0106391:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0106394:	8b 45 8c             	mov    -0x74(%ebp),%eax
c0106397:	8b 55 88             	mov    -0x78(%ebp),%edx
c010639a:	89 10                	mov    %edx,(%eax)
}
c010639c:	90                   	nop
c010639d:	c9                   	leave  
c010639e:	c3                   	ret    

c010639f <default_nr_free_pages>:

static size_t
default_nr_free_pages(void) {
c010639f:	55                   	push   %ebp
c01063a0:	89 e5                	mov    %esp,%ebp
    return nr_free;
c01063a2:	a1 ec 71 1c c0       	mov    0xc01c71ec,%eax
}
c01063a7:	5d                   	pop    %ebp
c01063a8:	c3                   	ret    

c01063a9 <basic_check>:

static void
basic_check(void) {
c01063a9:	55                   	push   %ebp
c01063aa:	89 e5                	mov    %esp,%ebp
c01063ac:	83 ec 38             	sub    $0x38,%esp
    struct Page *p0, *p1, *p2;
    p0 = p1 = p2 = NULL;
c01063af:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01063b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01063b9:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01063bc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01063bf:	89 45 ec             	mov    %eax,-0x14(%ebp)
    assert((p0 = alloc_page()) != NULL);
c01063c2:	83 ec 0c             	sub    $0xc,%esp
c01063c5:	6a 01                	push   $0x1
c01063c7:	e8 c7 0c 00 00       	call   c0107093 <alloc_pages>
c01063cc:	83 c4 10             	add    $0x10,%esp
c01063cf:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01063d2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01063d6:	75 19                	jne    c01063f1 <basic_check+0x48>
c01063d8:	68 d1 e2 10 c0       	push   $0xc010e2d1
c01063dd:	68 6e e2 10 c0       	push   $0xc010e26e
c01063e2:	68 d0 00 00 00       	push   $0xd0
c01063e7:	68 83 e2 10 c0       	push   $0xc010e283
c01063ec:	e8 0c a0 ff ff       	call   c01003fd <__panic>
    assert((p1 = alloc_page()) != NULL);
c01063f1:	83 ec 0c             	sub    $0xc,%esp
c01063f4:	6a 01                	push   $0x1
c01063f6:	e8 98 0c 00 00       	call   c0107093 <alloc_pages>
c01063fb:	83 c4 10             	add    $0x10,%esp
c01063fe:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106401:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106405:	75 19                	jne    c0106420 <basic_check+0x77>
c0106407:	68 ed e2 10 c0       	push   $0xc010e2ed
c010640c:	68 6e e2 10 c0       	push   $0xc010e26e
c0106411:	68 d1 00 00 00       	push   $0xd1
c0106416:	68 83 e2 10 c0       	push   $0xc010e283
c010641b:	e8 dd 9f ff ff       	call   c01003fd <__panic>
    assert((p2 = alloc_page()) != NULL);
c0106420:	83 ec 0c             	sub    $0xc,%esp
c0106423:	6a 01                	push   $0x1
c0106425:	e8 69 0c 00 00       	call   c0107093 <alloc_pages>
c010642a:	83 c4 10             	add    $0x10,%esp
c010642d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0106430:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106434:	75 19                	jne    c010644f <basic_check+0xa6>
c0106436:	68 09 e3 10 c0       	push   $0xc010e309
c010643b:	68 6e e2 10 c0       	push   $0xc010e26e
c0106440:	68 d2 00 00 00       	push   $0xd2
c0106445:	68 83 e2 10 c0       	push   $0xc010e283
c010644a:	e8 ae 9f ff ff       	call   c01003fd <__panic>

    assert(p0 != p1 && p0 != p2 && p1 != p2);
c010644f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106452:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0106455:	74 10                	je     c0106467 <basic_check+0xbe>
c0106457:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010645a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010645d:	74 08                	je     c0106467 <basic_check+0xbe>
c010645f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106462:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0106465:	75 19                	jne    c0106480 <basic_check+0xd7>
c0106467:	68 28 e3 10 c0       	push   $0xc010e328
c010646c:	68 6e e2 10 c0       	push   $0xc010e26e
c0106471:	68 d4 00 00 00       	push   $0xd4
c0106476:	68 83 e2 10 c0       	push   $0xc010e283
c010647b:	e8 7d 9f ff ff       	call   c01003fd <__panic>
    assert(page_ref(p0) == 0 && page_ref(p1) == 0 && page_ref(p2) == 0);
c0106480:	83 ec 0c             	sub    $0xc,%esp
c0106483:	ff 75 ec             	pushl  -0x14(%ebp)
c0106486:	e8 61 f9 ff ff       	call   c0105dec <page_ref>
c010648b:	83 c4 10             	add    $0x10,%esp
c010648e:	85 c0                	test   %eax,%eax
c0106490:	75 24                	jne    c01064b6 <basic_check+0x10d>
c0106492:	83 ec 0c             	sub    $0xc,%esp
c0106495:	ff 75 f0             	pushl  -0x10(%ebp)
c0106498:	e8 4f f9 ff ff       	call   c0105dec <page_ref>
c010649d:	83 c4 10             	add    $0x10,%esp
c01064a0:	85 c0                	test   %eax,%eax
c01064a2:	75 12                	jne    c01064b6 <basic_check+0x10d>
c01064a4:	83 ec 0c             	sub    $0xc,%esp
c01064a7:	ff 75 f4             	pushl  -0xc(%ebp)
c01064aa:	e8 3d f9 ff ff       	call   c0105dec <page_ref>
c01064af:	83 c4 10             	add    $0x10,%esp
c01064b2:	85 c0                	test   %eax,%eax
c01064b4:	74 19                	je     c01064cf <basic_check+0x126>
c01064b6:	68 4c e3 10 c0       	push   $0xc010e34c
c01064bb:	68 6e e2 10 c0       	push   $0xc010e26e
c01064c0:	68 d5 00 00 00       	push   $0xd5
c01064c5:	68 83 e2 10 c0       	push   $0xc010e283
c01064ca:	e8 2e 9f ff ff       	call   c01003fd <__panic>

    assert(page2pa(p0) < npage * PGSIZE);
c01064cf:	83 ec 0c             	sub    $0xc,%esp
c01064d2:	ff 75 ec             	pushl  -0x14(%ebp)
c01064d5:	e8 ff f8 ff ff       	call   c0105dd9 <page2pa>
c01064da:	83 c4 10             	add    $0x10,%esp
c01064dd:	89 c2                	mov    %eax,%edx
c01064df:	a1 80 4f 1c c0       	mov    0xc01c4f80,%eax
c01064e4:	c1 e0 0c             	shl    $0xc,%eax
c01064e7:	39 c2                	cmp    %eax,%edx
c01064e9:	72 19                	jb     c0106504 <basic_check+0x15b>
c01064eb:	68 88 e3 10 c0       	push   $0xc010e388
c01064f0:	68 6e e2 10 c0       	push   $0xc010e26e
c01064f5:	68 d7 00 00 00       	push   $0xd7
c01064fa:	68 83 e2 10 c0       	push   $0xc010e283
c01064ff:	e8 f9 9e ff ff       	call   c01003fd <__panic>
    assert(page2pa(p1) < npage * PGSIZE);
c0106504:	83 ec 0c             	sub    $0xc,%esp
c0106507:	ff 75 f0             	pushl  -0x10(%ebp)
c010650a:	e8 ca f8 ff ff       	call   c0105dd9 <page2pa>
c010650f:	83 c4 10             	add    $0x10,%esp
c0106512:	89 c2                	mov    %eax,%edx
c0106514:	a1 80 4f 1c c0       	mov    0xc01c4f80,%eax
c0106519:	c1 e0 0c             	shl    $0xc,%eax
c010651c:	39 c2                	cmp    %eax,%edx
c010651e:	72 19                	jb     c0106539 <basic_check+0x190>
c0106520:	68 a5 e3 10 c0       	push   $0xc010e3a5
c0106525:	68 6e e2 10 c0       	push   $0xc010e26e
c010652a:	68 d8 00 00 00       	push   $0xd8
c010652f:	68 83 e2 10 c0       	push   $0xc010e283
c0106534:	e8 c4 9e ff ff       	call   c01003fd <__panic>
    assert(page2pa(p2) < npage * PGSIZE);
c0106539:	83 ec 0c             	sub    $0xc,%esp
c010653c:	ff 75 f4             	pushl  -0xc(%ebp)
c010653f:	e8 95 f8 ff ff       	call   c0105dd9 <page2pa>
c0106544:	83 c4 10             	add    $0x10,%esp
c0106547:	89 c2                	mov    %eax,%edx
c0106549:	a1 80 4f 1c c0       	mov    0xc01c4f80,%eax
c010654e:	c1 e0 0c             	shl    $0xc,%eax
c0106551:	39 c2                	cmp    %eax,%edx
c0106553:	72 19                	jb     c010656e <basic_check+0x1c5>
c0106555:	68 c2 e3 10 c0       	push   $0xc010e3c2
c010655a:	68 6e e2 10 c0       	push   $0xc010e26e
c010655f:	68 d9 00 00 00       	push   $0xd9
c0106564:	68 83 e2 10 c0       	push   $0xc010e283
c0106569:	e8 8f 9e ff ff       	call   c01003fd <__panic>

    list_entry_t free_list_store = free_list;
c010656e:	a1 e4 71 1c c0       	mov    0xc01c71e4,%eax
c0106573:	8b 15 e8 71 1c c0    	mov    0xc01c71e8,%edx
c0106579:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010657c:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010657f:	c7 45 e4 e4 71 1c c0 	movl   $0xc01c71e4,-0x1c(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0106586:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106589:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010658c:	89 50 04             	mov    %edx,0x4(%eax)
c010658f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106592:	8b 50 04             	mov    0x4(%eax),%edx
c0106595:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106598:	89 10                	mov    %edx,(%eax)
c010659a:	c7 45 d8 e4 71 1c c0 	movl   $0xc01c71e4,-0x28(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c01065a1:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01065a4:	8b 40 04             	mov    0x4(%eax),%eax
c01065a7:	39 45 d8             	cmp    %eax,-0x28(%ebp)
c01065aa:	0f 94 c0             	sete   %al
c01065ad:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c01065b0:	85 c0                	test   %eax,%eax
c01065b2:	75 19                	jne    c01065cd <basic_check+0x224>
c01065b4:	68 df e3 10 c0       	push   $0xc010e3df
c01065b9:	68 6e e2 10 c0       	push   $0xc010e26e
c01065be:	68 dd 00 00 00       	push   $0xdd
c01065c3:	68 83 e2 10 c0       	push   $0xc010e283
c01065c8:	e8 30 9e ff ff       	call   c01003fd <__panic>

    unsigned int nr_free_store = nr_free;
c01065cd:	a1 ec 71 1c c0       	mov    0xc01c71ec,%eax
c01065d2:	89 45 e0             	mov    %eax,-0x20(%ebp)
    nr_free = 0;
c01065d5:	c7 05 ec 71 1c c0 00 	movl   $0x0,0xc01c71ec
c01065dc:	00 00 00 

    assert(alloc_page() == NULL);
c01065df:	83 ec 0c             	sub    $0xc,%esp
c01065e2:	6a 01                	push   $0x1
c01065e4:	e8 aa 0a 00 00       	call   c0107093 <alloc_pages>
c01065e9:	83 c4 10             	add    $0x10,%esp
c01065ec:	85 c0                	test   %eax,%eax
c01065ee:	74 19                	je     c0106609 <basic_check+0x260>
c01065f0:	68 f6 e3 10 c0       	push   $0xc010e3f6
c01065f5:	68 6e e2 10 c0       	push   $0xc010e26e
c01065fa:	68 e2 00 00 00       	push   $0xe2
c01065ff:	68 83 e2 10 c0       	push   $0xc010e283
c0106604:	e8 f4 9d ff ff       	call   c01003fd <__panic>

    free_page(p0);
c0106609:	83 ec 08             	sub    $0x8,%esp
c010660c:	6a 01                	push   $0x1
c010660e:	ff 75 ec             	pushl  -0x14(%ebp)
c0106611:	e8 e9 0a 00 00       	call   c01070ff <free_pages>
c0106616:	83 c4 10             	add    $0x10,%esp
    free_page(p1);
c0106619:	83 ec 08             	sub    $0x8,%esp
c010661c:	6a 01                	push   $0x1
c010661e:	ff 75 f0             	pushl  -0x10(%ebp)
c0106621:	e8 d9 0a 00 00       	call   c01070ff <free_pages>
c0106626:	83 c4 10             	add    $0x10,%esp
    free_page(p2);
c0106629:	83 ec 08             	sub    $0x8,%esp
c010662c:	6a 01                	push   $0x1
c010662e:	ff 75 f4             	pushl  -0xc(%ebp)
c0106631:	e8 c9 0a 00 00       	call   c01070ff <free_pages>
c0106636:	83 c4 10             	add    $0x10,%esp
    assert(nr_free == 3);
c0106639:	a1 ec 71 1c c0       	mov    0xc01c71ec,%eax
c010663e:	83 f8 03             	cmp    $0x3,%eax
c0106641:	74 19                	je     c010665c <basic_check+0x2b3>
c0106643:	68 0b e4 10 c0       	push   $0xc010e40b
c0106648:	68 6e e2 10 c0       	push   $0xc010e26e
c010664d:	68 e7 00 00 00       	push   $0xe7
c0106652:	68 83 e2 10 c0       	push   $0xc010e283
c0106657:	e8 a1 9d ff ff       	call   c01003fd <__panic>

    assert((p0 = alloc_page()) != NULL);
c010665c:	83 ec 0c             	sub    $0xc,%esp
c010665f:	6a 01                	push   $0x1
c0106661:	e8 2d 0a 00 00       	call   c0107093 <alloc_pages>
c0106666:	83 c4 10             	add    $0x10,%esp
c0106669:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010666c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0106670:	75 19                	jne    c010668b <basic_check+0x2e2>
c0106672:	68 d1 e2 10 c0       	push   $0xc010e2d1
c0106677:	68 6e e2 10 c0       	push   $0xc010e26e
c010667c:	68 e9 00 00 00       	push   $0xe9
c0106681:	68 83 e2 10 c0       	push   $0xc010e283
c0106686:	e8 72 9d ff ff       	call   c01003fd <__panic>
    assert((p1 = alloc_page()) != NULL);
c010668b:	83 ec 0c             	sub    $0xc,%esp
c010668e:	6a 01                	push   $0x1
c0106690:	e8 fe 09 00 00       	call   c0107093 <alloc_pages>
c0106695:	83 c4 10             	add    $0x10,%esp
c0106698:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010669b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010669f:	75 19                	jne    c01066ba <basic_check+0x311>
c01066a1:	68 ed e2 10 c0       	push   $0xc010e2ed
c01066a6:	68 6e e2 10 c0       	push   $0xc010e26e
c01066ab:	68 ea 00 00 00       	push   $0xea
c01066b0:	68 83 e2 10 c0       	push   $0xc010e283
c01066b5:	e8 43 9d ff ff       	call   c01003fd <__panic>
    assert((p2 = alloc_page()) != NULL);
c01066ba:	83 ec 0c             	sub    $0xc,%esp
c01066bd:	6a 01                	push   $0x1
c01066bf:	e8 cf 09 00 00       	call   c0107093 <alloc_pages>
c01066c4:	83 c4 10             	add    $0x10,%esp
c01066c7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01066ca:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01066ce:	75 19                	jne    c01066e9 <basic_check+0x340>
c01066d0:	68 09 e3 10 c0       	push   $0xc010e309
c01066d5:	68 6e e2 10 c0       	push   $0xc010e26e
c01066da:	68 eb 00 00 00       	push   $0xeb
c01066df:	68 83 e2 10 c0       	push   $0xc010e283
c01066e4:	e8 14 9d ff ff       	call   c01003fd <__panic>

    assert(alloc_page() == NULL);
c01066e9:	83 ec 0c             	sub    $0xc,%esp
c01066ec:	6a 01                	push   $0x1
c01066ee:	e8 a0 09 00 00       	call   c0107093 <alloc_pages>
c01066f3:	83 c4 10             	add    $0x10,%esp
c01066f6:	85 c0                	test   %eax,%eax
c01066f8:	74 19                	je     c0106713 <basic_check+0x36a>
c01066fa:	68 f6 e3 10 c0       	push   $0xc010e3f6
c01066ff:	68 6e e2 10 c0       	push   $0xc010e26e
c0106704:	68 ed 00 00 00       	push   $0xed
c0106709:	68 83 e2 10 c0       	push   $0xc010e283
c010670e:	e8 ea 9c ff ff       	call   c01003fd <__panic>

    free_page(p0);
c0106713:	83 ec 08             	sub    $0x8,%esp
c0106716:	6a 01                	push   $0x1
c0106718:	ff 75 ec             	pushl  -0x14(%ebp)
c010671b:	e8 df 09 00 00       	call   c01070ff <free_pages>
c0106720:	83 c4 10             	add    $0x10,%esp
c0106723:	c7 45 e8 e4 71 1c c0 	movl   $0xc01c71e4,-0x18(%ebp)
c010672a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010672d:	8b 40 04             	mov    0x4(%eax),%eax
c0106730:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c0106733:	0f 94 c0             	sete   %al
c0106736:	0f b6 c0             	movzbl %al,%eax
    assert(!list_empty(&free_list));
c0106739:	85 c0                	test   %eax,%eax
c010673b:	74 19                	je     c0106756 <basic_check+0x3ad>
c010673d:	68 18 e4 10 c0       	push   $0xc010e418
c0106742:	68 6e e2 10 c0       	push   $0xc010e26e
c0106747:	68 f0 00 00 00       	push   $0xf0
c010674c:	68 83 e2 10 c0       	push   $0xc010e283
c0106751:	e8 a7 9c ff ff       	call   c01003fd <__panic>

    struct Page *p;
    assert((p = alloc_page()) == p0);
c0106756:	83 ec 0c             	sub    $0xc,%esp
c0106759:	6a 01                	push   $0x1
c010675b:	e8 33 09 00 00       	call   c0107093 <alloc_pages>
c0106760:	83 c4 10             	add    $0x10,%esp
c0106763:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0106766:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106769:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010676c:	74 19                	je     c0106787 <basic_check+0x3de>
c010676e:	68 30 e4 10 c0       	push   $0xc010e430
c0106773:	68 6e e2 10 c0       	push   $0xc010e26e
c0106778:	68 f3 00 00 00       	push   $0xf3
c010677d:	68 83 e2 10 c0       	push   $0xc010e283
c0106782:	e8 76 9c ff ff       	call   c01003fd <__panic>
    assert(alloc_page() == NULL);
c0106787:	83 ec 0c             	sub    $0xc,%esp
c010678a:	6a 01                	push   $0x1
c010678c:	e8 02 09 00 00       	call   c0107093 <alloc_pages>
c0106791:	83 c4 10             	add    $0x10,%esp
c0106794:	85 c0                	test   %eax,%eax
c0106796:	74 19                	je     c01067b1 <basic_check+0x408>
c0106798:	68 f6 e3 10 c0       	push   $0xc010e3f6
c010679d:	68 6e e2 10 c0       	push   $0xc010e26e
c01067a2:	68 f4 00 00 00       	push   $0xf4
c01067a7:	68 83 e2 10 c0       	push   $0xc010e283
c01067ac:	e8 4c 9c ff ff       	call   c01003fd <__panic>

    assert(nr_free == 0);
c01067b1:	a1 ec 71 1c c0       	mov    0xc01c71ec,%eax
c01067b6:	85 c0                	test   %eax,%eax
c01067b8:	74 19                	je     c01067d3 <basic_check+0x42a>
c01067ba:	68 49 e4 10 c0       	push   $0xc010e449
c01067bf:	68 6e e2 10 c0       	push   $0xc010e26e
c01067c4:	68 f6 00 00 00       	push   $0xf6
c01067c9:	68 83 e2 10 c0       	push   $0xc010e283
c01067ce:	e8 2a 9c ff ff       	call   c01003fd <__panic>
    free_list = free_list_store;
c01067d3:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01067d6:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01067d9:	a3 e4 71 1c c0       	mov    %eax,0xc01c71e4
c01067de:	89 15 e8 71 1c c0    	mov    %edx,0xc01c71e8
    nr_free = nr_free_store;
c01067e4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01067e7:	a3 ec 71 1c c0       	mov    %eax,0xc01c71ec

    free_page(p);
c01067ec:	83 ec 08             	sub    $0x8,%esp
c01067ef:	6a 01                	push   $0x1
c01067f1:	ff 75 dc             	pushl  -0x24(%ebp)
c01067f4:	e8 06 09 00 00       	call   c01070ff <free_pages>
c01067f9:	83 c4 10             	add    $0x10,%esp
    free_page(p1);
c01067fc:	83 ec 08             	sub    $0x8,%esp
c01067ff:	6a 01                	push   $0x1
c0106801:	ff 75 f0             	pushl  -0x10(%ebp)
c0106804:	e8 f6 08 00 00       	call   c01070ff <free_pages>
c0106809:	83 c4 10             	add    $0x10,%esp
    free_page(p2);
c010680c:	83 ec 08             	sub    $0x8,%esp
c010680f:	6a 01                	push   $0x1
c0106811:	ff 75 f4             	pushl  -0xc(%ebp)
c0106814:	e8 e6 08 00 00       	call   c01070ff <free_pages>
c0106819:	83 c4 10             	add    $0x10,%esp
}
c010681c:	90                   	nop
c010681d:	c9                   	leave  
c010681e:	c3                   	ret    

c010681f <default_check>:

// LAB2: below code is used to check the first fit allocation algorithm (your EXERCISE 1) 
// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
static void
default_check(void) {
c010681f:	55                   	push   %ebp
c0106820:	89 e5                	mov    %esp,%ebp
c0106822:	81 ec 88 00 00 00    	sub    $0x88,%esp
    int count = 0, total = 0;
c0106828:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010682f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    list_entry_t *le = &free_list;
c0106836:	c7 45 ec e4 71 1c c0 	movl   $0xc01c71e4,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c010683d:	eb 60                	jmp    c010689f <default_check+0x80>
        struct Page *p = le2page(le, page_link);
c010683f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106842:	83 e8 0c             	sub    $0xc,%eax
c0106845:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        assert(PageProperty(p));
c0106848:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010684b:	83 c0 04             	add    $0x4,%eax
c010684e:	c7 45 b0 01 00 00 00 	movl   $0x1,-0x50(%ebp)
c0106855:	89 45 ac             	mov    %eax,-0x54(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0106858:	8b 45 ac             	mov    -0x54(%ebp),%eax
c010685b:	8b 55 b0             	mov    -0x50(%ebp),%edx
c010685e:	0f a3 10             	bt     %edx,(%eax)
c0106861:	19 c0                	sbb    %eax,%eax
c0106863:	89 45 a8             	mov    %eax,-0x58(%ebp)
    return oldbit != 0;
c0106866:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
c010686a:	0f 95 c0             	setne  %al
c010686d:	0f b6 c0             	movzbl %al,%eax
c0106870:	85 c0                	test   %eax,%eax
c0106872:	75 19                	jne    c010688d <default_check+0x6e>
c0106874:	68 56 e4 10 c0       	push   $0xc010e456
c0106879:	68 6e e2 10 c0       	push   $0xc010e26e
c010687e:	68 07 01 00 00       	push   $0x107
c0106883:	68 83 e2 10 c0       	push   $0xc010e283
c0106888:	e8 70 9b ff ff       	call   c01003fd <__panic>
        count ++, total += p->property;
c010688d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0106891:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106894:	8b 50 08             	mov    0x8(%eax),%edx
c0106897:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010689a:	01 d0                	add    %edx,%eax
c010689c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010689f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01068a2:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01068a5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01068a8:	8b 40 04             	mov    0x4(%eax),%eax
// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
static void
default_check(void) {
    int count = 0, total = 0;
    list_entry_t *le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c01068ab:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01068ae:	81 7d ec e4 71 1c c0 	cmpl   $0xc01c71e4,-0x14(%ebp)
c01068b5:	75 88                	jne    c010683f <default_check+0x20>
        struct Page *p = le2page(le, page_link);
        assert(PageProperty(p));
        count ++, total += p->property;
    }
    assert(total == nr_free_pages());
c01068b7:	e8 78 08 00 00       	call   c0107134 <nr_free_pages>
c01068bc:	89 c2                	mov    %eax,%edx
c01068be:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01068c1:	39 c2                	cmp    %eax,%edx
c01068c3:	74 19                	je     c01068de <default_check+0xbf>
c01068c5:	68 66 e4 10 c0       	push   $0xc010e466
c01068ca:	68 6e e2 10 c0       	push   $0xc010e26e
c01068cf:	68 0a 01 00 00       	push   $0x10a
c01068d4:	68 83 e2 10 c0       	push   $0xc010e283
c01068d9:	e8 1f 9b ff ff       	call   c01003fd <__panic>

    basic_check();
c01068de:	e8 c6 fa ff ff       	call   c01063a9 <basic_check>

    struct Page *p0 = alloc_pages(5), *p1, *p2;
c01068e3:	83 ec 0c             	sub    $0xc,%esp
c01068e6:	6a 05                	push   $0x5
c01068e8:	e8 a6 07 00 00       	call   c0107093 <alloc_pages>
c01068ed:	83 c4 10             	add    $0x10,%esp
c01068f0:	89 45 dc             	mov    %eax,-0x24(%ebp)
    assert(p0 != NULL);
c01068f3:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c01068f7:	75 19                	jne    c0106912 <default_check+0xf3>
c01068f9:	68 7f e4 10 c0       	push   $0xc010e47f
c01068fe:	68 6e e2 10 c0       	push   $0xc010e26e
c0106903:	68 0f 01 00 00       	push   $0x10f
c0106908:	68 83 e2 10 c0       	push   $0xc010e283
c010690d:	e8 eb 9a ff ff       	call   c01003fd <__panic>
    assert(!PageProperty(p0));
c0106912:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106915:	83 c0 04             	add    $0x4,%eax
c0106918:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
c010691f:	89 45 a4             	mov    %eax,-0x5c(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0106922:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0106925:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0106928:	0f a3 10             	bt     %edx,(%eax)
c010692b:	19 c0                	sbb    %eax,%eax
c010692d:	89 45 a0             	mov    %eax,-0x60(%ebp)
    return oldbit != 0;
c0106930:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
c0106934:	0f 95 c0             	setne  %al
c0106937:	0f b6 c0             	movzbl %al,%eax
c010693a:	85 c0                	test   %eax,%eax
c010693c:	74 19                	je     c0106957 <default_check+0x138>
c010693e:	68 8a e4 10 c0       	push   $0xc010e48a
c0106943:	68 6e e2 10 c0       	push   $0xc010e26e
c0106948:	68 10 01 00 00       	push   $0x110
c010694d:	68 83 e2 10 c0       	push   $0xc010e283
c0106952:	e8 a6 9a ff ff       	call   c01003fd <__panic>

    list_entry_t free_list_store = free_list;
c0106957:	a1 e4 71 1c c0       	mov    0xc01c71e4,%eax
c010695c:	8b 15 e8 71 1c c0    	mov    0xc01c71e8,%edx
c0106962:	89 45 80             	mov    %eax,-0x80(%ebp)
c0106965:	89 55 84             	mov    %edx,-0x7c(%ebp)
c0106968:	c7 45 d0 e4 71 1c c0 	movl   $0xc01c71e4,-0x30(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010696f:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0106972:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0106975:	89 50 04             	mov    %edx,0x4(%eax)
c0106978:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010697b:	8b 50 04             	mov    0x4(%eax),%edx
c010697e:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0106981:	89 10                	mov    %edx,(%eax)
c0106983:	c7 45 d8 e4 71 1c c0 	movl   $0xc01c71e4,-0x28(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010698a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010698d:	8b 40 04             	mov    0x4(%eax),%eax
c0106990:	39 45 d8             	cmp    %eax,-0x28(%ebp)
c0106993:	0f 94 c0             	sete   %al
c0106996:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c0106999:	85 c0                	test   %eax,%eax
c010699b:	75 19                	jne    c01069b6 <default_check+0x197>
c010699d:	68 df e3 10 c0       	push   $0xc010e3df
c01069a2:	68 6e e2 10 c0       	push   $0xc010e26e
c01069a7:	68 14 01 00 00       	push   $0x114
c01069ac:	68 83 e2 10 c0       	push   $0xc010e283
c01069b1:	e8 47 9a ff ff       	call   c01003fd <__panic>
    assert(alloc_page() == NULL);
c01069b6:	83 ec 0c             	sub    $0xc,%esp
c01069b9:	6a 01                	push   $0x1
c01069bb:	e8 d3 06 00 00       	call   c0107093 <alloc_pages>
c01069c0:	83 c4 10             	add    $0x10,%esp
c01069c3:	85 c0                	test   %eax,%eax
c01069c5:	74 19                	je     c01069e0 <default_check+0x1c1>
c01069c7:	68 f6 e3 10 c0       	push   $0xc010e3f6
c01069cc:	68 6e e2 10 c0       	push   $0xc010e26e
c01069d1:	68 15 01 00 00       	push   $0x115
c01069d6:	68 83 e2 10 c0       	push   $0xc010e283
c01069db:	e8 1d 9a ff ff       	call   c01003fd <__panic>

    unsigned int nr_free_store = nr_free;
c01069e0:	a1 ec 71 1c c0       	mov    0xc01c71ec,%eax
c01069e5:	89 45 cc             	mov    %eax,-0x34(%ebp)
    nr_free = 0;
c01069e8:	c7 05 ec 71 1c c0 00 	movl   $0x0,0xc01c71ec
c01069ef:	00 00 00 

    free_pages(p0 + 2, 3);
c01069f2:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01069f5:	83 c0 40             	add    $0x40,%eax
c01069f8:	83 ec 08             	sub    $0x8,%esp
c01069fb:	6a 03                	push   $0x3
c01069fd:	50                   	push   %eax
c01069fe:	e8 fc 06 00 00       	call   c01070ff <free_pages>
c0106a03:	83 c4 10             	add    $0x10,%esp
    assert(alloc_pages(4) == NULL);
c0106a06:	83 ec 0c             	sub    $0xc,%esp
c0106a09:	6a 04                	push   $0x4
c0106a0b:	e8 83 06 00 00       	call   c0107093 <alloc_pages>
c0106a10:	83 c4 10             	add    $0x10,%esp
c0106a13:	85 c0                	test   %eax,%eax
c0106a15:	74 19                	je     c0106a30 <default_check+0x211>
c0106a17:	68 9c e4 10 c0       	push   $0xc010e49c
c0106a1c:	68 6e e2 10 c0       	push   $0xc010e26e
c0106a21:	68 1b 01 00 00       	push   $0x11b
c0106a26:	68 83 e2 10 c0       	push   $0xc010e283
c0106a2b:	e8 cd 99 ff ff       	call   c01003fd <__panic>
    assert(PageProperty(p0 + 2) && p0[2].property == 3);
c0106a30:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106a33:	83 c0 40             	add    $0x40,%eax
c0106a36:	83 c0 04             	add    $0x4,%eax
c0106a39:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
c0106a40:	89 45 9c             	mov    %eax,-0x64(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0106a43:	8b 45 9c             	mov    -0x64(%ebp),%eax
c0106a46:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0106a49:	0f a3 10             	bt     %edx,(%eax)
c0106a4c:	19 c0                	sbb    %eax,%eax
c0106a4e:	89 45 98             	mov    %eax,-0x68(%ebp)
    return oldbit != 0;
c0106a51:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
c0106a55:	0f 95 c0             	setne  %al
c0106a58:	0f b6 c0             	movzbl %al,%eax
c0106a5b:	85 c0                	test   %eax,%eax
c0106a5d:	74 0e                	je     c0106a6d <default_check+0x24e>
c0106a5f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106a62:	83 c0 40             	add    $0x40,%eax
c0106a65:	8b 40 08             	mov    0x8(%eax),%eax
c0106a68:	83 f8 03             	cmp    $0x3,%eax
c0106a6b:	74 19                	je     c0106a86 <default_check+0x267>
c0106a6d:	68 b4 e4 10 c0       	push   $0xc010e4b4
c0106a72:	68 6e e2 10 c0       	push   $0xc010e26e
c0106a77:	68 1c 01 00 00       	push   $0x11c
c0106a7c:	68 83 e2 10 c0       	push   $0xc010e283
c0106a81:	e8 77 99 ff ff       	call   c01003fd <__panic>
    assert((p1 = alloc_pages(3)) != NULL);
c0106a86:	83 ec 0c             	sub    $0xc,%esp
c0106a89:	6a 03                	push   $0x3
c0106a8b:	e8 03 06 00 00       	call   c0107093 <alloc_pages>
c0106a90:	83 c4 10             	add    $0x10,%esp
c0106a93:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c0106a96:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
c0106a9a:	75 19                	jne    c0106ab5 <default_check+0x296>
c0106a9c:	68 e0 e4 10 c0       	push   $0xc010e4e0
c0106aa1:	68 6e e2 10 c0       	push   $0xc010e26e
c0106aa6:	68 1d 01 00 00       	push   $0x11d
c0106aab:	68 83 e2 10 c0       	push   $0xc010e283
c0106ab0:	e8 48 99 ff ff       	call   c01003fd <__panic>
    assert(alloc_page() == NULL);
c0106ab5:	83 ec 0c             	sub    $0xc,%esp
c0106ab8:	6a 01                	push   $0x1
c0106aba:	e8 d4 05 00 00       	call   c0107093 <alloc_pages>
c0106abf:	83 c4 10             	add    $0x10,%esp
c0106ac2:	85 c0                	test   %eax,%eax
c0106ac4:	74 19                	je     c0106adf <default_check+0x2c0>
c0106ac6:	68 f6 e3 10 c0       	push   $0xc010e3f6
c0106acb:	68 6e e2 10 c0       	push   $0xc010e26e
c0106ad0:	68 1e 01 00 00       	push   $0x11e
c0106ad5:	68 83 e2 10 c0       	push   $0xc010e283
c0106ada:	e8 1e 99 ff ff       	call   c01003fd <__panic>
    assert(p0 + 2 == p1);
c0106adf:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106ae2:	83 c0 40             	add    $0x40,%eax
c0106ae5:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
c0106ae8:	74 19                	je     c0106b03 <default_check+0x2e4>
c0106aea:	68 fe e4 10 c0       	push   $0xc010e4fe
c0106aef:	68 6e e2 10 c0       	push   $0xc010e26e
c0106af4:	68 1f 01 00 00       	push   $0x11f
c0106af9:	68 83 e2 10 c0       	push   $0xc010e283
c0106afe:	e8 fa 98 ff ff       	call   c01003fd <__panic>

    p2 = p0 + 1;
c0106b03:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106b06:	83 c0 20             	add    $0x20,%eax
c0106b09:	89 45 c0             	mov    %eax,-0x40(%ebp)
    free_page(p0);
c0106b0c:	83 ec 08             	sub    $0x8,%esp
c0106b0f:	6a 01                	push   $0x1
c0106b11:	ff 75 dc             	pushl  -0x24(%ebp)
c0106b14:	e8 e6 05 00 00       	call   c01070ff <free_pages>
c0106b19:	83 c4 10             	add    $0x10,%esp
    free_pages(p1, 3);
c0106b1c:	83 ec 08             	sub    $0x8,%esp
c0106b1f:	6a 03                	push   $0x3
c0106b21:	ff 75 c4             	pushl  -0x3c(%ebp)
c0106b24:	e8 d6 05 00 00       	call   c01070ff <free_pages>
c0106b29:	83 c4 10             	add    $0x10,%esp
    assert(PageProperty(p0) && p0->property == 1);
c0106b2c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106b2f:	83 c0 04             	add    $0x4,%eax
c0106b32:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
c0106b39:	89 45 94             	mov    %eax,-0x6c(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0106b3c:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0106b3f:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0106b42:	0f a3 10             	bt     %edx,(%eax)
c0106b45:	19 c0                	sbb    %eax,%eax
c0106b47:	89 45 90             	mov    %eax,-0x70(%ebp)
    return oldbit != 0;
c0106b4a:	83 7d 90 00          	cmpl   $0x0,-0x70(%ebp)
c0106b4e:	0f 95 c0             	setne  %al
c0106b51:	0f b6 c0             	movzbl %al,%eax
c0106b54:	85 c0                	test   %eax,%eax
c0106b56:	74 0b                	je     c0106b63 <default_check+0x344>
c0106b58:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106b5b:	8b 40 08             	mov    0x8(%eax),%eax
c0106b5e:	83 f8 01             	cmp    $0x1,%eax
c0106b61:	74 19                	je     c0106b7c <default_check+0x35d>
c0106b63:	68 0c e5 10 c0       	push   $0xc010e50c
c0106b68:	68 6e e2 10 c0       	push   $0xc010e26e
c0106b6d:	68 24 01 00 00       	push   $0x124
c0106b72:	68 83 e2 10 c0       	push   $0xc010e283
c0106b77:	e8 81 98 ff ff       	call   c01003fd <__panic>
    assert(PageProperty(p1) && p1->property == 3);
c0106b7c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0106b7f:	83 c0 04             	add    $0x4,%eax
c0106b82:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
c0106b89:	89 45 8c             	mov    %eax,-0x74(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0106b8c:	8b 45 8c             	mov    -0x74(%ebp),%eax
c0106b8f:	8b 55 bc             	mov    -0x44(%ebp),%edx
c0106b92:	0f a3 10             	bt     %edx,(%eax)
c0106b95:	19 c0                	sbb    %eax,%eax
c0106b97:	89 45 88             	mov    %eax,-0x78(%ebp)
    return oldbit != 0;
c0106b9a:	83 7d 88 00          	cmpl   $0x0,-0x78(%ebp)
c0106b9e:	0f 95 c0             	setne  %al
c0106ba1:	0f b6 c0             	movzbl %al,%eax
c0106ba4:	85 c0                	test   %eax,%eax
c0106ba6:	74 0b                	je     c0106bb3 <default_check+0x394>
c0106ba8:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0106bab:	8b 40 08             	mov    0x8(%eax),%eax
c0106bae:	83 f8 03             	cmp    $0x3,%eax
c0106bb1:	74 19                	je     c0106bcc <default_check+0x3ad>
c0106bb3:	68 34 e5 10 c0       	push   $0xc010e534
c0106bb8:	68 6e e2 10 c0       	push   $0xc010e26e
c0106bbd:	68 25 01 00 00       	push   $0x125
c0106bc2:	68 83 e2 10 c0       	push   $0xc010e283
c0106bc7:	e8 31 98 ff ff       	call   c01003fd <__panic>

    assert((p0 = alloc_page()) == p2 - 1);
c0106bcc:	83 ec 0c             	sub    $0xc,%esp
c0106bcf:	6a 01                	push   $0x1
c0106bd1:	e8 bd 04 00 00       	call   c0107093 <alloc_pages>
c0106bd6:	83 c4 10             	add    $0x10,%esp
c0106bd9:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0106bdc:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0106bdf:	83 e8 20             	sub    $0x20,%eax
c0106be2:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c0106be5:	74 19                	je     c0106c00 <default_check+0x3e1>
c0106be7:	68 5a e5 10 c0       	push   $0xc010e55a
c0106bec:	68 6e e2 10 c0       	push   $0xc010e26e
c0106bf1:	68 27 01 00 00       	push   $0x127
c0106bf6:	68 83 e2 10 c0       	push   $0xc010e283
c0106bfb:	e8 fd 97 ff ff       	call   c01003fd <__panic>
    free_page(p0);
c0106c00:	83 ec 08             	sub    $0x8,%esp
c0106c03:	6a 01                	push   $0x1
c0106c05:	ff 75 dc             	pushl  -0x24(%ebp)
c0106c08:	e8 f2 04 00 00       	call   c01070ff <free_pages>
c0106c0d:	83 c4 10             	add    $0x10,%esp
    assert((p0 = alloc_pages(2)) == p2 + 1);
c0106c10:	83 ec 0c             	sub    $0xc,%esp
c0106c13:	6a 02                	push   $0x2
c0106c15:	e8 79 04 00 00       	call   c0107093 <alloc_pages>
c0106c1a:	83 c4 10             	add    $0x10,%esp
c0106c1d:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0106c20:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0106c23:	83 c0 20             	add    $0x20,%eax
c0106c26:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c0106c29:	74 19                	je     c0106c44 <default_check+0x425>
c0106c2b:	68 78 e5 10 c0       	push   $0xc010e578
c0106c30:	68 6e e2 10 c0       	push   $0xc010e26e
c0106c35:	68 29 01 00 00       	push   $0x129
c0106c3a:	68 83 e2 10 c0       	push   $0xc010e283
c0106c3f:	e8 b9 97 ff ff       	call   c01003fd <__panic>

    free_pages(p0, 2);
c0106c44:	83 ec 08             	sub    $0x8,%esp
c0106c47:	6a 02                	push   $0x2
c0106c49:	ff 75 dc             	pushl  -0x24(%ebp)
c0106c4c:	e8 ae 04 00 00       	call   c01070ff <free_pages>
c0106c51:	83 c4 10             	add    $0x10,%esp
    free_page(p2);
c0106c54:	83 ec 08             	sub    $0x8,%esp
c0106c57:	6a 01                	push   $0x1
c0106c59:	ff 75 c0             	pushl  -0x40(%ebp)
c0106c5c:	e8 9e 04 00 00       	call   c01070ff <free_pages>
c0106c61:	83 c4 10             	add    $0x10,%esp

    assert((p0 = alloc_pages(5)) != NULL);
c0106c64:	83 ec 0c             	sub    $0xc,%esp
c0106c67:	6a 05                	push   $0x5
c0106c69:	e8 25 04 00 00       	call   c0107093 <alloc_pages>
c0106c6e:	83 c4 10             	add    $0x10,%esp
c0106c71:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0106c74:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0106c78:	75 19                	jne    c0106c93 <default_check+0x474>
c0106c7a:	68 98 e5 10 c0       	push   $0xc010e598
c0106c7f:	68 6e e2 10 c0       	push   $0xc010e26e
c0106c84:	68 2e 01 00 00       	push   $0x12e
c0106c89:	68 83 e2 10 c0       	push   $0xc010e283
c0106c8e:	e8 6a 97 ff ff       	call   c01003fd <__panic>
    assert(alloc_page() == NULL);
c0106c93:	83 ec 0c             	sub    $0xc,%esp
c0106c96:	6a 01                	push   $0x1
c0106c98:	e8 f6 03 00 00       	call   c0107093 <alloc_pages>
c0106c9d:	83 c4 10             	add    $0x10,%esp
c0106ca0:	85 c0                	test   %eax,%eax
c0106ca2:	74 19                	je     c0106cbd <default_check+0x49e>
c0106ca4:	68 f6 e3 10 c0       	push   $0xc010e3f6
c0106ca9:	68 6e e2 10 c0       	push   $0xc010e26e
c0106cae:	68 2f 01 00 00       	push   $0x12f
c0106cb3:	68 83 e2 10 c0       	push   $0xc010e283
c0106cb8:	e8 40 97 ff ff       	call   c01003fd <__panic>

    assert(nr_free == 0);
c0106cbd:	a1 ec 71 1c c0       	mov    0xc01c71ec,%eax
c0106cc2:	85 c0                	test   %eax,%eax
c0106cc4:	74 19                	je     c0106cdf <default_check+0x4c0>
c0106cc6:	68 49 e4 10 c0       	push   $0xc010e449
c0106ccb:	68 6e e2 10 c0       	push   $0xc010e26e
c0106cd0:	68 31 01 00 00       	push   $0x131
c0106cd5:	68 83 e2 10 c0       	push   $0xc010e283
c0106cda:	e8 1e 97 ff ff       	call   c01003fd <__panic>
    nr_free = nr_free_store;
c0106cdf:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0106ce2:	a3 ec 71 1c c0       	mov    %eax,0xc01c71ec

    free_list = free_list_store;
c0106ce7:	8b 45 80             	mov    -0x80(%ebp),%eax
c0106cea:	8b 55 84             	mov    -0x7c(%ebp),%edx
c0106ced:	a3 e4 71 1c c0       	mov    %eax,0xc01c71e4
c0106cf2:	89 15 e8 71 1c c0    	mov    %edx,0xc01c71e8
    free_pages(p0, 5);
c0106cf8:	83 ec 08             	sub    $0x8,%esp
c0106cfb:	6a 05                	push   $0x5
c0106cfd:	ff 75 dc             	pushl  -0x24(%ebp)
c0106d00:	e8 fa 03 00 00       	call   c01070ff <free_pages>
c0106d05:	83 c4 10             	add    $0x10,%esp

    le = &free_list;
c0106d08:	c7 45 ec e4 71 1c c0 	movl   $0xc01c71e4,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c0106d0f:	eb 1d                	jmp    c0106d2e <default_check+0x50f>
        struct Page *p = le2page(le, page_link);
c0106d11:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106d14:	83 e8 0c             	sub    $0xc,%eax
c0106d17:	89 45 b4             	mov    %eax,-0x4c(%ebp)
        count --, total -= p->property;
c0106d1a:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0106d1e:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0106d21:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0106d24:	8b 40 08             	mov    0x8(%eax),%eax
c0106d27:	29 c2                	sub    %eax,%edx
c0106d29:	89 d0                	mov    %edx,%eax
c0106d2b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106d2e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106d31:	89 45 b8             	mov    %eax,-0x48(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0106d34:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0106d37:	8b 40 04             	mov    0x4(%eax),%eax

    free_list = free_list_store;
    free_pages(p0, 5);

    le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c0106d3a:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0106d3d:	81 7d ec e4 71 1c c0 	cmpl   $0xc01c71e4,-0x14(%ebp)
c0106d44:	75 cb                	jne    c0106d11 <default_check+0x4f2>
        struct Page *p = le2page(le, page_link);
        count --, total -= p->property;
    }
    assert(count == 0);
c0106d46:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106d4a:	74 19                	je     c0106d65 <default_check+0x546>
c0106d4c:	68 b6 e5 10 c0       	push   $0xc010e5b6
c0106d51:	68 6e e2 10 c0       	push   $0xc010e26e
c0106d56:	68 3c 01 00 00       	push   $0x13c
c0106d5b:	68 83 e2 10 c0       	push   $0xc010e283
c0106d60:	e8 98 96 ff ff       	call   c01003fd <__panic>
    assert(total == 0);
c0106d65:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106d69:	74 19                	je     c0106d84 <default_check+0x565>
c0106d6b:	68 c1 e5 10 c0       	push   $0xc010e5c1
c0106d70:	68 6e e2 10 c0       	push   $0xc010e26e
c0106d75:	68 3d 01 00 00       	push   $0x13d
c0106d7a:	68 83 e2 10 c0       	push   $0xc010e283
c0106d7f:	e8 79 96 ff ff       	call   c01003fd <__panic>
}
c0106d84:	90                   	nop
c0106d85:	c9                   	leave  
c0106d86:	c3                   	ret    

c0106d87 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0106d87:	55                   	push   %ebp
c0106d88:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0106d8a:	8b 45 08             	mov    0x8(%ebp),%eax
c0106d8d:	8b 15 f8 71 1c c0    	mov    0xc01c71f8,%edx
c0106d93:	29 d0                	sub    %edx,%eax
c0106d95:	c1 f8 05             	sar    $0x5,%eax
}
c0106d98:	5d                   	pop    %ebp
c0106d99:	c3                   	ret    

c0106d9a <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0106d9a:	55                   	push   %ebp
c0106d9b:	89 e5                	mov    %esp,%ebp
    return page2ppn(page) << PGSHIFT;
c0106d9d:	ff 75 08             	pushl  0x8(%ebp)
c0106da0:	e8 e2 ff ff ff       	call   c0106d87 <page2ppn>
c0106da5:	83 c4 04             	add    $0x4,%esp
c0106da8:	c1 e0 0c             	shl    $0xc,%eax
}
c0106dab:	c9                   	leave  
c0106dac:	c3                   	ret    

c0106dad <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c0106dad:	55                   	push   %ebp
c0106dae:	89 e5                	mov    %esp,%ebp
c0106db0:	83 ec 08             	sub    $0x8,%esp
    if (PPN(pa) >= npage) {
c0106db3:	8b 45 08             	mov    0x8(%ebp),%eax
c0106db6:	c1 e8 0c             	shr    $0xc,%eax
c0106db9:	89 c2                	mov    %eax,%edx
c0106dbb:	a1 80 4f 1c c0       	mov    0xc01c4f80,%eax
c0106dc0:	39 c2                	cmp    %eax,%edx
c0106dc2:	72 14                	jb     c0106dd8 <pa2page+0x2b>
        panic("pa2page called with invalid pa");
c0106dc4:	83 ec 04             	sub    $0x4,%esp
c0106dc7:	68 fc e5 10 c0       	push   $0xc010e5fc
c0106dcc:	6a 5e                	push   $0x5e
c0106dce:	68 1b e6 10 c0       	push   $0xc010e61b
c0106dd3:	e8 25 96 ff ff       	call   c01003fd <__panic>
    }
    return &pages[PPN(pa)];
c0106dd8:	a1 f8 71 1c c0       	mov    0xc01c71f8,%eax
c0106ddd:	8b 55 08             	mov    0x8(%ebp),%edx
c0106de0:	c1 ea 0c             	shr    $0xc,%edx
c0106de3:	c1 e2 05             	shl    $0x5,%edx
c0106de6:	01 d0                	add    %edx,%eax
}
c0106de8:	c9                   	leave  
c0106de9:	c3                   	ret    

c0106dea <page2kva>:

static inline void *
page2kva(struct Page *page) {
c0106dea:	55                   	push   %ebp
c0106deb:	89 e5                	mov    %esp,%ebp
c0106ded:	83 ec 18             	sub    $0x18,%esp
    return KADDR(page2pa(page));
c0106df0:	ff 75 08             	pushl  0x8(%ebp)
c0106df3:	e8 a2 ff ff ff       	call   c0106d9a <page2pa>
c0106df8:	83 c4 04             	add    $0x4,%esp
c0106dfb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0106dfe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106e01:	c1 e8 0c             	shr    $0xc,%eax
c0106e04:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106e07:	a1 80 4f 1c c0       	mov    0xc01c4f80,%eax
c0106e0c:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0106e0f:	72 14                	jb     c0106e25 <page2kva+0x3b>
c0106e11:	ff 75 f4             	pushl  -0xc(%ebp)
c0106e14:	68 2c e6 10 c0       	push   $0xc010e62c
c0106e19:	6a 65                	push   $0x65
c0106e1b:	68 1b e6 10 c0       	push   $0xc010e61b
c0106e20:	e8 d8 95 ff ff       	call   c01003fd <__panic>
c0106e25:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106e28:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c0106e2d:	c9                   	leave  
c0106e2e:	c3                   	ret    

c0106e2f <pte2page>:
kva2page(void *kva) {
    return pa2page(PADDR(kva));
}

static inline struct Page *
pte2page(pte_t pte) {
c0106e2f:	55                   	push   %ebp
c0106e30:	89 e5                	mov    %esp,%ebp
c0106e32:	83 ec 08             	sub    $0x8,%esp
    if (!(pte & PTE_P)) {
c0106e35:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e38:	83 e0 01             	and    $0x1,%eax
c0106e3b:	85 c0                	test   %eax,%eax
c0106e3d:	75 14                	jne    c0106e53 <pte2page+0x24>
        panic("pte2page called with invalid pte");
c0106e3f:	83 ec 04             	sub    $0x4,%esp
c0106e42:	68 50 e6 10 c0       	push   $0xc010e650
c0106e47:	6a 70                	push   $0x70
c0106e49:	68 1b e6 10 c0       	push   $0xc010e61b
c0106e4e:	e8 aa 95 ff ff       	call   c01003fd <__panic>
    }
    return pa2page(PTE_ADDR(pte));
c0106e53:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e56:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106e5b:	83 ec 0c             	sub    $0xc,%esp
c0106e5e:	50                   	push   %eax
c0106e5f:	e8 49 ff ff ff       	call   c0106dad <pa2page>
c0106e64:	83 c4 10             	add    $0x10,%esp
}
c0106e67:	c9                   	leave  
c0106e68:	c3                   	ret    

c0106e69 <pde2page>:

static inline struct Page *
pde2page(pde_t pde) {
c0106e69:	55                   	push   %ebp
c0106e6a:	89 e5                	mov    %esp,%ebp
c0106e6c:	83 ec 08             	sub    $0x8,%esp
    return pa2page(PDE_ADDR(pde));
c0106e6f:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e72:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106e77:	83 ec 0c             	sub    $0xc,%esp
c0106e7a:	50                   	push   %eax
c0106e7b:	e8 2d ff ff ff       	call   c0106dad <pa2page>
c0106e80:	83 c4 10             	add    $0x10,%esp
}
c0106e83:	c9                   	leave  
c0106e84:	c3                   	ret    

c0106e85 <page_ref>:

static inline int
page_ref(struct Page *page) {
c0106e85:	55                   	push   %ebp
c0106e86:	89 e5                	mov    %esp,%ebp
    return page->ref;
c0106e88:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e8b:	8b 00                	mov    (%eax),%eax
}
c0106e8d:	5d                   	pop    %ebp
c0106e8e:	c3                   	ret    

c0106e8f <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c0106e8f:	55                   	push   %ebp
c0106e90:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c0106e92:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e95:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106e98:	89 10                	mov    %edx,(%eax)
}
c0106e9a:	90                   	nop
c0106e9b:	5d                   	pop    %ebp
c0106e9c:	c3                   	ret    

c0106e9d <page_ref_inc>:

static inline int
page_ref_inc(struct Page *page) {
c0106e9d:	55                   	push   %ebp
c0106e9e:	89 e5                	mov    %esp,%ebp
    page->ref += 1;
c0106ea0:	8b 45 08             	mov    0x8(%ebp),%eax
c0106ea3:	8b 00                	mov    (%eax),%eax
c0106ea5:	8d 50 01             	lea    0x1(%eax),%edx
c0106ea8:	8b 45 08             	mov    0x8(%ebp),%eax
c0106eab:	89 10                	mov    %edx,(%eax)
    return page->ref;
c0106ead:	8b 45 08             	mov    0x8(%ebp),%eax
c0106eb0:	8b 00                	mov    (%eax),%eax
}
c0106eb2:	5d                   	pop    %ebp
c0106eb3:	c3                   	ret    

c0106eb4 <page_ref_dec>:

static inline int
page_ref_dec(struct Page *page) {
c0106eb4:	55                   	push   %ebp
c0106eb5:	89 e5                	mov    %esp,%ebp
    page->ref -= 1;
c0106eb7:	8b 45 08             	mov    0x8(%ebp),%eax
c0106eba:	8b 00                	mov    (%eax),%eax
c0106ebc:	8d 50 ff             	lea    -0x1(%eax),%edx
c0106ebf:	8b 45 08             	mov    0x8(%ebp),%eax
c0106ec2:	89 10                	mov    %edx,(%eax)
    return page->ref;
c0106ec4:	8b 45 08             	mov    0x8(%ebp),%eax
c0106ec7:	8b 00                	mov    (%eax),%eax
}
c0106ec9:	5d                   	pop    %ebp
c0106eca:	c3                   	ret    

c0106ecb <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0106ecb:	55                   	push   %ebp
c0106ecc:	89 e5                	mov    %esp,%ebp
c0106ece:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0106ed1:	9c                   	pushf  
c0106ed2:	58                   	pop    %eax
c0106ed3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0106ed6:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0106ed9:	25 00 02 00 00       	and    $0x200,%eax
c0106ede:	85 c0                	test   %eax,%eax
c0106ee0:	74 0c                	je     c0106eee <__intr_save+0x23>
        intr_disable();
c0106ee2:	e8 d5 b2 ff ff       	call   c01021bc <intr_disable>
        return 1;
c0106ee7:	b8 01 00 00 00       	mov    $0x1,%eax
c0106eec:	eb 05                	jmp    c0106ef3 <__intr_save+0x28>
    }
    return 0;
c0106eee:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0106ef3:	c9                   	leave  
c0106ef4:	c3                   	ret    

c0106ef5 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0106ef5:	55                   	push   %ebp
c0106ef6:	89 e5                	mov    %esp,%ebp
c0106ef8:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0106efb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0106eff:	74 05                	je     c0106f06 <__intr_restore+0x11>
        intr_enable();
c0106f01:	e8 af b2 ff ff       	call   c01021b5 <intr_enable>
    }
}
c0106f06:	90                   	nop
c0106f07:	c9                   	leave  
c0106f08:	c3                   	ret    

c0106f09 <lgdt>:
/* *
 * lgdt - load the global descriptor table register and reset the
 * data/code segement registers for kernel.
 * */
static inline void
lgdt(struct pseudodesc *pd) {
c0106f09:	55                   	push   %ebp
c0106f0a:	89 e5                	mov    %esp,%ebp
    asm volatile ("lgdt (%0)" :: "r" (pd));
c0106f0c:	8b 45 08             	mov    0x8(%ebp),%eax
c0106f0f:	0f 01 10             	lgdtl  (%eax)
    asm volatile ("movw %%ax, %%gs" :: "a" (USER_DS));
c0106f12:	b8 23 00 00 00       	mov    $0x23,%eax
c0106f17:	8e e8                	mov    %eax,%gs
    asm volatile ("movw %%ax, %%fs" :: "a" (USER_DS));
c0106f19:	b8 23 00 00 00       	mov    $0x23,%eax
c0106f1e:	8e e0                	mov    %eax,%fs
    asm volatile ("movw %%ax, %%es" :: "a" (KERNEL_DS));
c0106f20:	b8 10 00 00 00       	mov    $0x10,%eax
c0106f25:	8e c0                	mov    %eax,%es
    asm volatile ("movw %%ax, %%ds" :: "a" (KERNEL_DS));
c0106f27:	b8 10 00 00 00       	mov    $0x10,%eax
c0106f2c:	8e d8                	mov    %eax,%ds
    asm volatile ("movw %%ax, %%ss" :: "a" (KERNEL_DS));
c0106f2e:	b8 10 00 00 00       	mov    $0x10,%eax
c0106f33:	8e d0                	mov    %eax,%ss
    // reload cs
    asm volatile ("ljmp %0, $1f\n 1:\n" :: "i" (KERNEL_CS));
c0106f35:	ea 3c 6f 10 c0 08 00 	ljmp   $0x8,$0xc0106f3c
}
c0106f3c:	90                   	nop
c0106f3d:	5d                   	pop    %ebp
c0106f3e:	c3                   	ret    

c0106f3f <load_esp0>:
 * load_esp0 - change the ESP0 in default task state segment,
 * so that we can use different kernel stack when we trap frame
 * user to kernel.
 * */
void
load_esp0(uintptr_t esp0) {
c0106f3f:	55                   	push   %ebp
c0106f40:	89 e5                	mov    %esp,%ebp
    ts.ts_esp0 = esp0;
c0106f42:	8b 45 08             	mov    0x8(%ebp),%eax
c0106f45:	a3 a4 4f 1c c0       	mov    %eax,0xc01c4fa4
}
c0106f4a:	90                   	nop
c0106f4b:	5d                   	pop    %ebp
c0106f4c:	c3                   	ret    

c0106f4d <gdt_init>:

/* gdt_init - initialize the default GDT and TSS */
static void
gdt_init(void) {
c0106f4d:	55                   	push   %ebp
c0106f4e:	89 e5                	mov    %esp,%ebp
c0106f50:	83 ec 10             	sub    $0x10,%esp
    // set boot kernel stack and default SS0
    load_esp0((uintptr_t)bootstacktop);
c0106f53:	b8 00 10 13 c0       	mov    $0xc0131000,%eax
c0106f58:	50                   	push   %eax
c0106f59:	e8 e1 ff ff ff       	call   c0106f3f <load_esp0>
c0106f5e:	83 c4 04             	add    $0x4,%esp
    ts.ts_ss0 = KERNEL_DS;
c0106f61:	66 c7 05 a8 4f 1c c0 	movw   $0x10,0xc01c4fa8
c0106f68:	10 00 

    // initialize the TSS filed of the gdt
    gdt[SEG_TSS] = SEGTSS(STS_T32A, (uintptr_t)&ts, sizeof(ts), DPL_KERNEL);
c0106f6a:	66 c7 05 68 1a 13 c0 	movw   $0x68,0xc0131a68
c0106f71:	68 00 
c0106f73:	b8 a0 4f 1c c0       	mov    $0xc01c4fa0,%eax
c0106f78:	66 a3 6a 1a 13 c0    	mov    %ax,0xc0131a6a
c0106f7e:	b8 a0 4f 1c c0       	mov    $0xc01c4fa0,%eax
c0106f83:	c1 e8 10             	shr    $0x10,%eax
c0106f86:	a2 6c 1a 13 c0       	mov    %al,0xc0131a6c
c0106f8b:	0f b6 05 6d 1a 13 c0 	movzbl 0xc0131a6d,%eax
c0106f92:	83 e0 f0             	and    $0xfffffff0,%eax
c0106f95:	83 c8 09             	or     $0x9,%eax
c0106f98:	a2 6d 1a 13 c0       	mov    %al,0xc0131a6d
c0106f9d:	0f b6 05 6d 1a 13 c0 	movzbl 0xc0131a6d,%eax
c0106fa4:	83 e0 ef             	and    $0xffffffef,%eax
c0106fa7:	a2 6d 1a 13 c0       	mov    %al,0xc0131a6d
c0106fac:	0f b6 05 6d 1a 13 c0 	movzbl 0xc0131a6d,%eax
c0106fb3:	83 e0 9f             	and    $0xffffff9f,%eax
c0106fb6:	a2 6d 1a 13 c0       	mov    %al,0xc0131a6d
c0106fbb:	0f b6 05 6d 1a 13 c0 	movzbl 0xc0131a6d,%eax
c0106fc2:	83 c8 80             	or     $0xffffff80,%eax
c0106fc5:	a2 6d 1a 13 c0       	mov    %al,0xc0131a6d
c0106fca:	0f b6 05 6e 1a 13 c0 	movzbl 0xc0131a6e,%eax
c0106fd1:	83 e0 f0             	and    $0xfffffff0,%eax
c0106fd4:	a2 6e 1a 13 c0       	mov    %al,0xc0131a6e
c0106fd9:	0f b6 05 6e 1a 13 c0 	movzbl 0xc0131a6e,%eax
c0106fe0:	83 e0 ef             	and    $0xffffffef,%eax
c0106fe3:	a2 6e 1a 13 c0       	mov    %al,0xc0131a6e
c0106fe8:	0f b6 05 6e 1a 13 c0 	movzbl 0xc0131a6e,%eax
c0106fef:	83 e0 df             	and    $0xffffffdf,%eax
c0106ff2:	a2 6e 1a 13 c0       	mov    %al,0xc0131a6e
c0106ff7:	0f b6 05 6e 1a 13 c0 	movzbl 0xc0131a6e,%eax
c0106ffe:	83 c8 40             	or     $0x40,%eax
c0107001:	a2 6e 1a 13 c0       	mov    %al,0xc0131a6e
c0107006:	0f b6 05 6e 1a 13 c0 	movzbl 0xc0131a6e,%eax
c010700d:	83 e0 7f             	and    $0x7f,%eax
c0107010:	a2 6e 1a 13 c0       	mov    %al,0xc0131a6e
c0107015:	b8 a0 4f 1c c0       	mov    $0xc01c4fa0,%eax
c010701a:	c1 e8 18             	shr    $0x18,%eax
c010701d:	a2 6f 1a 13 c0       	mov    %al,0xc0131a6f

    // reload all segment registers
    lgdt(&gdt_pd);
c0107022:	68 70 1a 13 c0       	push   $0xc0131a70
c0107027:	e8 dd fe ff ff       	call   c0106f09 <lgdt>
c010702c:	83 c4 04             	add    $0x4,%esp
c010702f:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
    asm volatile ("cli" ::: "memory");
}

static inline void
ltr(uint16_t sel) {
    asm volatile ("ltr %0" :: "r" (sel) : "memory");
c0107035:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c0107039:	0f 00 d8             	ltr    %ax

    // load the TSS
    ltr(GD_TSS);
}
c010703c:	90                   	nop
c010703d:	c9                   	leave  
c010703e:	c3                   	ret    

c010703f <init_pmm_manager>:

//init_pmm_manager - initialize a pmm_manager instance
static void
init_pmm_manager(void) {
c010703f:	55                   	push   %ebp
c0107040:	89 e5                	mov    %esp,%ebp
c0107042:	83 ec 08             	sub    $0x8,%esp
    pmm_manager = &default_pmm_manager;
c0107045:	c7 05 f0 71 1c c0 e0 	movl   $0xc010e5e0,0xc01c71f0
c010704c:	e5 10 c0 
    cprintf("memory management: %s\n", pmm_manager->name);
c010704f:	a1 f0 71 1c c0       	mov    0xc01c71f0,%eax
c0107054:	8b 00                	mov    (%eax),%eax
c0107056:	83 ec 08             	sub    $0x8,%esp
c0107059:	50                   	push   %eax
c010705a:	68 7c e6 10 c0       	push   $0xc010e67c
c010705f:	e8 33 92 ff ff       	call   c0100297 <cprintf>
c0107064:	83 c4 10             	add    $0x10,%esp
    pmm_manager->init();
c0107067:	a1 f0 71 1c c0       	mov    0xc01c71f0,%eax
c010706c:	8b 40 04             	mov    0x4(%eax),%eax
c010706f:	ff d0                	call   *%eax
}
c0107071:	90                   	nop
c0107072:	c9                   	leave  
c0107073:	c3                   	ret    

c0107074 <init_memmap>:

//init_memmap - call pmm->init_memmap to build Page struct for free memory  
static void
init_memmap(struct Page *base, size_t n) {
c0107074:	55                   	push   %ebp
c0107075:	89 e5                	mov    %esp,%ebp
c0107077:	83 ec 08             	sub    $0x8,%esp
    pmm_manager->init_memmap(base, n);
c010707a:	a1 f0 71 1c c0       	mov    0xc01c71f0,%eax
c010707f:	8b 40 08             	mov    0x8(%eax),%eax
c0107082:	83 ec 08             	sub    $0x8,%esp
c0107085:	ff 75 0c             	pushl  0xc(%ebp)
c0107088:	ff 75 08             	pushl  0x8(%ebp)
c010708b:	ff d0                	call   *%eax
c010708d:	83 c4 10             	add    $0x10,%esp
}
c0107090:	90                   	nop
c0107091:	c9                   	leave  
c0107092:	c3                   	ret    

c0107093 <alloc_pages>:

//alloc_pages - call pmm->alloc_pages to allocate a continuous n*PAGESIZE memory 
struct Page *
alloc_pages(size_t n) {
c0107093:	55                   	push   %ebp
c0107094:	89 e5                	mov    %esp,%ebp
c0107096:	83 ec 18             	sub    $0x18,%esp
    struct Page *page=NULL;
c0107099:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    
    while (1)
    {
         local_intr_save(intr_flag);
c01070a0:	e8 26 fe ff ff       	call   c0106ecb <__intr_save>
c01070a5:	89 45 f0             	mov    %eax,-0x10(%ebp)
         {
              page = pmm_manager->alloc_pages(n);
c01070a8:	a1 f0 71 1c c0       	mov    0xc01c71f0,%eax
c01070ad:	8b 40 0c             	mov    0xc(%eax),%eax
c01070b0:	83 ec 0c             	sub    $0xc,%esp
c01070b3:	ff 75 08             	pushl  0x8(%ebp)
c01070b6:	ff d0                	call   *%eax
c01070b8:	83 c4 10             	add    $0x10,%esp
c01070bb:	89 45 f4             	mov    %eax,-0xc(%ebp)
         }
         local_intr_restore(intr_flag);
c01070be:	83 ec 0c             	sub    $0xc,%esp
c01070c1:	ff 75 f0             	pushl  -0x10(%ebp)
c01070c4:	e8 2c fe ff ff       	call   c0106ef5 <__intr_restore>
c01070c9:	83 c4 10             	add    $0x10,%esp

         if (page != NULL || n > 1 || swap_init_ok == 0) break;
c01070cc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01070d0:	75 28                	jne    c01070fa <alloc_pages+0x67>
c01070d2:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c01070d6:	77 22                	ja     c01070fa <alloc_pages+0x67>
c01070d8:	a1 6c 4f 1c c0       	mov    0xc01c4f6c,%eax
c01070dd:	85 c0                	test   %eax,%eax
c01070df:	74 19                	je     c01070fa <alloc_pages+0x67>
         
         extern struct mm_struct *check_mm_struct;
         //cprintf("page %x, call swap_out in alloc_pages %d\n",page, n);
         swap_out(check_mm_struct, n, 0);
c01070e1:	8b 55 08             	mov    0x8(%ebp),%edx
c01070e4:	a1 10 71 1c c0       	mov    0xc01c7110,%eax
c01070e9:	83 ec 04             	sub    $0x4,%esp
c01070ec:	6a 00                	push   $0x0
c01070ee:	52                   	push   %edx
c01070ef:	50                   	push   %eax
c01070f0:	e8 65 e3 ff ff       	call   c010545a <swap_out>
c01070f5:	83 c4 10             	add    $0x10,%esp
    }
c01070f8:	eb a6                	jmp    c01070a0 <alloc_pages+0xd>
    //cprintf("n %d,get page %x, No %d in alloc_pages\n",n,page,(page-pages));
    return page;
c01070fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01070fd:	c9                   	leave  
c01070fe:	c3                   	ret    

c01070ff <free_pages>:

//free_pages - call pmm->free_pages to free a continuous n*PAGESIZE memory 
void
free_pages(struct Page *base, size_t n) {
c01070ff:	55                   	push   %ebp
c0107100:	89 e5                	mov    %esp,%ebp
c0107102:	83 ec 18             	sub    $0x18,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c0107105:	e8 c1 fd ff ff       	call   c0106ecb <__intr_save>
c010710a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        pmm_manager->free_pages(base, n);
c010710d:	a1 f0 71 1c c0       	mov    0xc01c71f0,%eax
c0107112:	8b 40 10             	mov    0x10(%eax),%eax
c0107115:	83 ec 08             	sub    $0x8,%esp
c0107118:	ff 75 0c             	pushl  0xc(%ebp)
c010711b:	ff 75 08             	pushl  0x8(%ebp)
c010711e:	ff d0                	call   *%eax
c0107120:	83 c4 10             	add    $0x10,%esp
    }
    local_intr_restore(intr_flag);
c0107123:	83 ec 0c             	sub    $0xc,%esp
c0107126:	ff 75 f4             	pushl  -0xc(%ebp)
c0107129:	e8 c7 fd ff ff       	call   c0106ef5 <__intr_restore>
c010712e:	83 c4 10             	add    $0x10,%esp
}
c0107131:	90                   	nop
c0107132:	c9                   	leave  
c0107133:	c3                   	ret    

c0107134 <nr_free_pages>:

//nr_free_pages - call pmm->nr_free_pages to get the size (nr*PAGESIZE) 
//of current free memory
size_t
nr_free_pages(void) {
c0107134:	55                   	push   %ebp
c0107135:	89 e5                	mov    %esp,%ebp
c0107137:	83 ec 18             	sub    $0x18,%esp
    size_t ret;
    bool intr_flag;
    local_intr_save(intr_flag);
c010713a:	e8 8c fd ff ff       	call   c0106ecb <__intr_save>
c010713f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        ret = pmm_manager->nr_free_pages();
c0107142:	a1 f0 71 1c c0       	mov    0xc01c71f0,%eax
c0107147:	8b 40 14             	mov    0x14(%eax),%eax
c010714a:	ff d0                	call   *%eax
c010714c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    local_intr_restore(intr_flag);
c010714f:	83 ec 0c             	sub    $0xc,%esp
c0107152:	ff 75 f4             	pushl  -0xc(%ebp)
c0107155:	e8 9b fd ff ff       	call   c0106ef5 <__intr_restore>
c010715a:	83 c4 10             	add    $0x10,%esp
    return ret;
c010715d:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0107160:	c9                   	leave  
c0107161:	c3                   	ret    

c0107162 <page_init>:

/* pmm_init - initialize the physical memory management */
static void
page_init(void) {
c0107162:	55                   	push   %ebp
c0107163:	89 e5                	mov    %esp,%ebp
c0107165:	57                   	push   %edi
c0107166:	56                   	push   %esi
c0107167:	53                   	push   %ebx
c0107168:	83 ec 7c             	sub    $0x7c,%esp
    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
c010716b:	c7 45 c4 00 80 00 c0 	movl   $0xc0008000,-0x3c(%ebp)
    uint64_t maxpa = 0;
c0107172:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
c0107179:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

    cprintf("e820map:\n");
c0107180:	83 ec 0c             	sub    $0xc,%esp
c0107183:	68 93 e6 10 c0       	push   $0xc010e693
c0107188:	e8 0a 91 ff ff       	call   c0100297 <cprintf>
c010718d:	83 c4 10             	add    $0x10,%esp
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
c0107190:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0107197:	e9 fc 00 00 00       	jmp    c0107298 <page_init+0x136>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c010719c:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c010719f:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01071a2:	89 d0                	mov    %edx,%eax
c01071a4:	c1 e0 02             	shl    $0x2,%eax
c01071a7:	01 d0                	add    %edx,%eax
c01071a9:	c1 e0 02             	shl    $0x2,%eax
c01071ac:	01 c8                	add    %ecx,%eax
c01071ae:	8b 50 08             	mov    0x8(%eax),%edx
c01071b1:	8b 40 04             	mov    0x4(%eax),%eax
c01071b4:	89 45 b8             	mov    %eax,-0x48(%ebp)
c01071b7:	89 55 bc             	mov    %edx,-0x44(%ebp)
c01071ba:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01071bd:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01071c0:	89 d0                	mov    %edx,%eax
c01071c2:	c1 e0 02             	shl    $0x2,%eax
c01071c5:	01 d0                	add    %edx,%eax
c01071c7:	c1 e0 02             	shl    $0x2,%eax
c01071ca:	01 c8                	add    %ecx,%eax
c01071cc:	8b 48 0c             	mov    0xc(%eax),%ecx
c01071cf:	8b 58 10             	mov    0x10(%eax),%ebx
c01071d2:	8b 45 b8             	mov    -0x48(%ebp),%eax
c01071d5:	8b 55 bc             	mov    -0x44(%ebp),%edx
c01071d8:	01 c8                	add    %ecx,%eax
c01071da:	11 da                	adc    %ebx,%edx
c01071dc:	89 45 b0             	mov    %eax,-0x50(%ebp)
c01071df:	89 55 b4             	mov    %edx,-0x4c(%ebp)
        cprintf("  memory: %08llx, [%08llx, %08llx], type = %d.\n",
c01071e2:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01071e5:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01071e8:	89 d0                	mov    %edx,%eax
c01071ea:	c1 e0 02             	shl    $0x2,%eax
c01071ed:	01 d0                	add    %edx,%eax
c01071ef:	c1 e0 02             	shl    $0x2,%eax
c01071f2:	01 c8                	add    %ecx,%eax
c01071f4:	83 c0 14             	add    $0x14,%eax
c01071f7:	8b 00                	mov    (%eax),%eax
c01071f9:	89 45 84             	mov    %eax,-0x7c(%ebp)
c01071fc:	8b 45 b0             	mov    -0x50(%ebp),%eax
c01071ff:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0107202:	83 c0 ff             	add    $0xffffffff,%eax
c0107205:	83 d2 ff             	adc    $0xffffffff,%edx
c0107208:	89 c1                	mov    %eax,%ecx
c010720a:	89 d3                	mov    %edx,%ebx
c010720c:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c010720f:	89 55 80             	mov    %edx,-0x80(%ebp)
c0107212:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0107215:	89 d0                	mov    %edx,%eax
c0107217:	c1 e0 02             	shl    $0x2,%eax
c010721a:	01 d0                	add    %edx,%eax
c010721c:	c1 e0 02             	shl    $0x2,%eax
c010721f:	03 45 80             	add    -0x80(%ebp),%eax
c0107222:	8b 50 10             	mov    0x10(%eax),%edx
c0107225:	8b 40 0c             	mov    0xc(%eax),%eax
c0107228:	ff 75 84             	pushl  -0x7c(%ebp)
c010722b:	53                   	push   %ebx
c010722c:	51                   	push   %ecx
c010722d:	ff 75 bc             	pushl  -0x44(%ebp)
c0107230:	ff 75 b8             	pushl  -0x48(%ebp)
c0107233:	52                   	push   %edx
c0107234:	50                   	push   %eax
c0107235:	68 a0 e6 10 c0       	push   $0xc010e6a0
c010723a:	e8 58 90 ff ff       	call   c0100297 <cprintf>
c010723f:	83 c4 20             	add    $0x20,%esp
                memmap->map[i].size, begin, end - 1, memmap->map[i].type);
        if (memmap->map[i].type == E820_ARM) {
c0107242:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0107245:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0107248:	89 d0                	mov    %edx,%eax
c010724a:	c1 e0 02             	shl    $0x2,%eax
c010724d:	01 d0                	add    %edx,%eax
c010724f:	c1 e0 02             	shl    $0x2,%eax
c0107252:	01 c8                	add    %ecx,%eax
c0107254:	83 c0 14             	add    $0x14,%eax
c0107257:	8b 00                	mov    (%eax),%eax
c0107259:	83 f8 01             	cmp    $0x1,%eax
c010725c:	75 36                	jne    c0107294 <page_init+0x132>
            if (maxpa < end && begin < KMEMSIZE) {
c010725e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107261:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0107264:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c0107267:	77 2b                	ja     c0107294 <page_init+0x132>
c0107269:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c010726c:	72 05                	jb     c0107273 <page_init+0x111>
c010726e:	3b 45 b0             	cmp    -0x50(%ebp),%eax
c0107271:	73 21                	jae    c0107294 <page_init+0x132>
c0107273:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0107277:	77 1b                	ja     c0107294 <page_init+0x132>
c0107279:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c010727d:	72 09                	jb     c0107288 <page_init+0x126>
c010727f:	81 7d b8 ff ff ff 37 	cmpl   $0x37ffffff,-0x48(%ebp)
c0107286:	77 0c                	ja     c0107294 <page_init+0x132>
                maxpa = end;
c0107288:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010728b:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c010728e:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0107291:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
    uint64_t maxpa = 0;

    cprintf("e820map:\n");
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
c0107294:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c0107298:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010729b:	8b 00                	mov    (%eax),%eax
c010729d:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c01072a0:	0f 8f f6 fe ff ff    	jg     c010719c <page_init+0x3a>
            if (maxpa < end && begin < KMEMSIZE) {
                maxpa = end;
            }
        }
    }
    if (maxpa > KMEMSIZE) {
c01072a6:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c01072aa:	72 1d                	jb     c01072c9 <page_init+0x167>
c01072ac:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c01072b0:	77 09                	ja     c01072bb <page_init+0x159>
c01072b2:	81 7d e0 00 00 00 38 	cmpl   $0x38000000,-0x20(%ebp)
c01072b9:	76 0e                	jbe    c01072c9 <page_init+0x167>
        maxpa = KMEMSIZE;
c01072bb:	c7 45 e0 00 00 00 38 	movl   $0x38000000,-0x20(%ebp)
c01072c2:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    }

    extern char end[];

    npage = maxpa / PGSIZE;
c01072c9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01072cc:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01072cf:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c01072d3:	c1 ea 0c             	shr    $0xc,%edx
c01072d6:	a3 80 4f 1c c0       	mov    %eax,0xc01c4f80
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);
c01072db:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
c01072e2:	b8 e4 72 1c c0       	mov    $0xc01c72e4,%eax
c01072e7:	8d 50 ff             	lea    -0x1(%eax),%edx
c01072ea:	8b 45 ac             	mov    -0x54(%ebp),%eax
c01072ed:	01 d0                	add    %edx,%eax
c01072ef:	89 45 a8             	mov    %eax,-0x58(%ebp)
c01072f2:	8b 45 a8             	mov    -0x58(%ebp),%eax
c01072f5:	ba 00 00 00 00       	mov    $0x0,%edx
c01072fa:	f7 75 ac             	divl   -0x54(%ebp)
c01072fd:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0107300:	29 d0                	sub    %edx,%eax
c0107302:	a3 f8 71 1c c0       	mov    %eax,0xc01c71f8

    for (i = 0; i < npage; i ++) {
c0107307:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c010730e:	eb 27                	jmp    c0107337 <page_init+0x1d5>
        SetPageReserved(pages + i);
c0107310:	a1 f8 71 1c c0       	mov    0xc01c71f8,%eax
c0107315:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0107318:	c1 e2 05             	shl    $0x5,%edx
c010731b:	01 d0                	add    %edx,%eax
c010731d:	83 c0 04             	add    $0x4,%eax
c0107320:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
c0107327:	89 45 8c             	mov    %eax,-0x74(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c010732a:	8b 45 8c             	mov    -0x74(%ebp),%eax
c010732d:	8b 55 90             	mov    -0x70(%ebp),%edx
c0107330:	0f ab 10             	bts    %edx,(%eax)
    extern char end[];

    npage = maxpa / PGSIZE;
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);

    for (i = 0; i < npage; i ++) {
c0107333:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c0107337:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010733a:	a1 80 4f 1c c0       	mov    0xc01c4f80,%eax
c010733f:	39 c2                	cmp    %eax,%edx
c0107341:	72 cd                	jb     c0107310 <page_init+0x1ae>
        SetPageReserved(pages + i);
    }

    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);
c0107343:	a1 80 4f 1c c0       	mov    0xc01c4f80,%eax
c0107348:	c1 e0 05             	shl    $0x5,%eax
c010734b:	89 c2                	mov    %eax,%edx
c010734d:	a1 f8 71 1c c0       	mov    0xc01c71f8,%eax
c0107352:	01 d0                	add    %edx,%eax
c0107354:	89 45 a4             	mov    %eax,-0x5c(%ebp)
c0107357:	81 7d a4 ff ff ff bf 	cmpl   $0xbfffffff,-0x5c(%ebp)
c010735e:	77 17                	ja     c0107377 <page_init+0x215>
c0107360:	ff 75 a4             	pushl  -0x5c(%ebp)
c0107363:	68 d0 e6 10 c0       	push   $0xc010e6d0
c0107368:	68 ea 00 00 00       	push   $0xea
c010736d:	68 f4 e6 10 c0       	push   $0xc010e6f4
c0107372:	e8 86 90 ff ff       	call   c01003fd <__panic>
c0107377:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c010737a:	05 00 00 00 40       	add    $0x40000000,%eax
c010737f:	89 45 a0             	mov    %eax,-0x60(%ebp)

    for (i = 0; i < memmap->nr_map; i ++) {
c0107382:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0107389:	e9 69 01 00 00       	jmp    c01074f7 <page_init+0x395>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c010738e:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0107391:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0107394:	89 d0                	mov    %edx,%eax
c0107396:	c1 e0 02             	shl    $0x2,%eax
c0107399:	01 d0                	add    %edx,%eax
c010739b:	c1 e0 02             	shl    $0x2,%eax
c010739e:	01 c8                	add    %ecx,%eax
c01073a0:	8b 50 08             	mov    0x8(%eax),%edx
c01073a3:	8b 40 04             	mov    0x4(%eax),%eax
c01073a6:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01073a9:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c01073ac:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01073af:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01073b2:	89 d0                	mov    %edx,%eax
c01073b4:	c1 e0 02             	shl    $0x2,%eax
c01073b7:	01 d0                	add    %edx,%eax
c01073b9:	c1 e0 02             	shl    $0x2,%eax
c01073bc:	01 c8                	add    %ecx,%eax
c01073be:	8b 48 0c             	mov    0xc(%eax),%ecx
c01073c1:	8b 58 10             	mov    0x10(%eax),%ebx
c01073c4:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01073c7:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01073ca:	01 c8                	add    %ecx,%eax
c01073cc:	11 da                	adc    %ebx,%edx
c01073ce:	89 45 c8             	mov    %eax,-0x38(%ebp)
c01073d1:	89 55 cc             	mov    %edx,-0x34(%ebp)
        if (memmap->map[i].type == E820_ARM) {
c01073d4:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01073d7:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01073da:	89 d0                	mov    %edx,%eax
c01073dc:	c1 e0 02             	shl    $0x2,%eax
c01073df:	01 d0                	add    %edx,%eax
c01073e1:	c1 e0 02             	shl    $0x2,%eax
c01073e4:	01 c8                	add    %ecx,%eax
c01073e6:	83 c0 14             	add    $0x14,%eax
c01073e9:	8b 00                	mov    (%eax),%eax
c01073eb:	83 f8 01             	cmp    $0x1,%eax
c01073ee:	0f 85 ff 00 00 00    	jne    c01074f3 <page_init+0x391>
            if (begin < freemem) {
c01073f4:	8b 45 a0             	mov    -0x60(%ebp),%eax
c01073f7:	ba 00 00 00 00       	mov    $0x0,%edx
c01073fc:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c01073ff:	72 17                	jb     c0107418 <page_init+0x2b6>
c0107401:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c0107404:	77 05                	ja     c010740b <page_init+0x2a9>
c0107406:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c0107409:	76 0d                	jbe    c0107418 <page_init+0x2b6>
                begin = freemem;
c010740b:	8b 45 a0             	mov    -0x60(%ebp),%eax
c010740e:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0107411:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
            }
            if (end > KMEMSIZE) {
c0107418:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c010741c:	72 1d                	jb     c010743b <page_init+0x2d9>
c010741e:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0107422:	77 09                	ja     c010742d <page_init+0x2cb>
c0107424:	81 7d c8 00 00 00 38 	cmpl   $0x38000000,-0x38(%ebp)
c010742b:	76 0e                	jbe    c010743b <page_init+0x2d9>
                end = KMEMSIZE;
c010742d:	c7 45 c8 00 00 00 38 	movl   $0x38000000,-0x38(%ebp)
c0107434:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
            }
            if (begin < end) {
c010743b:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010743e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0107441:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c0107444:	0f 87 a9 00 00 00    	ja     c01074f3 <page_init+0x391>
c010744a:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c010744d:	72 09                	jb     c0107458 <page_init+0x2f6>
c010744f:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c0107452:	0f 83 9b 00 00 00    	jae    c01074f3 <page_init+0x391>
                begin = ROUNDUP(begin, PGSIZE);
c0107458:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
c010745f:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0107462:	8b 45 9c             	mov    -0x64(%ebp),%eax
c0107465:	01 d0                	add    %edx,%eax
c0107467:	83 e8 01             	sub    $0x1,%eax
c010746a:	89 45 98             	mov    %eax,-0x68(%ebp)
c010746d:	8b 45 98             	mov    -0x68(%ebp),%eax
c0107470:	ba 00 00 00 00       	mov    $0x0,%edx
c0107475:	f7 75 9c             	divl   -0x64(%ebp)
c0107478:	8b 45 98             	mov    -0x68(%ebp),%eax
c010747b:	29 d0                	sub    %edx,%eax
c010747d:	ba 00 00 00 00       	mov    $0x0,%edx
c0107482:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0107485:	89 55 d4             	mov    %edx,-0x2c(%ebp)
                end = ROUNDDOWN(end, PGSIZE);
c0107488:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010748b:	89 45 94             	mov    %eax,-0x6c(%ebp)
c010748e:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0107491:	ba 00 00 00 00       	mov    $0x0,%edx
c0107496:	89 c3                	mov    %eax,%ebx
c0107498:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
c010749e:	89 de                	mov    %ebx,%esi
c01074a0:	89 d0                	mov    %edx,%eax
c01074a2:	83 e0 00             	and    $0x0,%eax
c01074a5:	89 c7                	mov    %eax,%edi
c01074a7:	89 75 c8             	mov    %esi,-0x38(%ebp)
c01074aa:	89 7d cc             	mov    %edi,-0x34(%ebp)
                if (begin < end) {
c01074ad:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01074b0:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01074b3:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c01074b6:	77 3b                	ja     c01074f3 <page_init+0x391>
c01074b8:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c01074bb:	72 05                	jb     c01074c2 <page_init+0x360>
c01074bd:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c01074c0:	73 31                	jae    c01074f3 <page_init+0x391>
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
c01074c2:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01074c5:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01074c8:	2b 45 d0             	sub    -0x30(%ebp),%eax
c01074cb:	1b 55 d4             	sbb    -0x2c(%ebp),%edx
c01074ce:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c01074d2:	c1 ea 0c             	shr    $0xc,%edx
c01074d5:	89 c3                	mov    %eax,%ebx
c01074d7:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01074da:	83 ec 0c             	sub    $0xc,%esp
c01074dd:	50                   	push   %eax
c01074de:	e8 ca f8 ff ff       	call   c0106dad <pa2page>
c01074e3:	83 c4 10             	add    $0x10,%esp
c01074e6:	83 ec 08             	sub    $0x8,%esp
c01074e9:	53                   	push   %ebx
c01074ea:	50                   	push   %eax
c01074eb:	e8 84 fb ff ff       	call   c0107074 <init_memmap>
c01074f0:	83 c4 10             	add    $0x10,%esp
        SetPageReserved(pages + i);
    }

    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);

    for (i = 0; i < memmap->nr_map; i ++) {
c01074f3:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c01074f7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01074fa:	8b 00                	mov    (%eax),%eax
c01074fc:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c01074ff:	0f 8f 89 fe ff ff    	jg     c010738e <page_init+0x22c>
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
                }
            }
        }
    }
}
c0107505:	90                   	nop
c0107506:	8d 65 f4             	lea    -0xc(%ebp),%esp
c0107509:	5b                   	pop    %ebx
c010750a:	5e                   	pop    %esi
c010750b:	5f                   	pop    %edi
c010750c:	5d                   	pop    %ebp
c010750d:	c3                   	ret    

c010750e <boot_map_segment>:
//  la:   linear address of this memory need to map (after x86 segment map)
//  size: memory size
//  pa:   physical address of this memory
//  perm: permission of this memory  
static void
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
c010750e:	55                   	push   %ebp
c010750f:	89 e5                	mov    %esp,%ebp
c0107511:	83 ec 28             	sub    $0x28,%esp
    assert(PGOFF(la) == PGOFF(pa));
c0107514:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107517:	33 45 14             	xor    0x14(%ebp),%eax
c010751a:	25 ff 0f 00 00       	and    $0xfff,%eax
c010751f:	85 c0                	test   %eax,%eax
c0107521:	74 19                	je     c010753c <boot_map_segment+0x2e>
c0107523:	68 02 e7 10 c0       	push   $0xc010e702
c0107528:	68 19 e7 10 c0       	push   $0xc010e719
c010752d:	68 08 01 00 00       	push   $0x108
c0107532:	68 f4 e6 10 c0       	push   $0xc010e6f4
c0107537:	e8 c1 8e ff ff       	call   c01003fd <__panic>
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
c010753c:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
c0107543:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107546:	25 ff 0f 00 00       	and    $0xfff,%eax
c010754b:	89 c2                	mov    %eax,%edx
c010754d:	8b 45 10             	mov    0x10(%ebp),%eax
c0107550:	01 c2                	add    %eax,%edx
c0107552:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107555:	01 d0                	add    %edx,%eax
c0107557:	83 e8 01             	sub    $0x1,%eax
c010755a:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010755d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107560:	ba 00 00 00 00       	mov    $0x0,%edx
c0107565:	f7 75 f0             	divl   -0x10(%ebp)
c0107568:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010756b:	29 d0                	sub    %edx,%eax
c010756d:	c1 e8 0c             	shr    $0xc,%eax
c0107570:	89 45 f4             	mov    %eax,-0xc(%ebp)
    la = ROUNDDOWN(la, PGSIZE);
c0107573:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107576:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0107579:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010757c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0107581:	89 45 0c             	mov    %eax,0xc(%ebp)
    pa = ROUNDDOWN(pa, PGSIZE);
c0107584:	8b 45 14             	mov    0x14(%ebp),%eax
c0107587:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010758a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010758d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0107592:	89 45 14             	mov    %eax,0x14(%ebp)
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c0107595:	eb 57                	jmp    c01075ee <boot_map_segment+0xe0>
        pte_t *ptep = get_pte(pgdir, la, 1);
c0107597:	83 ec 04             	sub    $0x4,%esp
c010759a:	6a 01                	push   $0x1
c010759c:	ff 75 0c             	pushl  0xc(%ebp)
c010759f:	ff 75 08             	pushl  0x8(%ebp)
c01075a2:	e8 58 01 00 00       	call   c01076ff <get_pte>
c01075a7:	83 c4 10             	add    $0x10,%esp
c01075aa:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(ptep != NULL);
c01075ad:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01075b1:	75 19                	jne    c01075cc <boot_map_segment+0xbe>
c01075b3:	68 2e e7 10 c0       	push   $0xc010e72e
c01075b8:	68 19 e7 10 c0       	push   $0xc010e719
c01075bd:	68 0e 01 00 00       	push   $0x10e
c01075c2:	68 f4 e6 10 c0       	push   $0xc010e6f4
c01075c7:	e8 31 8e ff ff       	call   c01003fd <__panic>
        *ptep = pa | PTE_P | perm;
c01075cc:	8b 45 14             	mov    0x14(%ebp),%eax
c01075cf:	0b 45 18             	or     0x18(%ebp),%eax
c01075d2:	83 c8 01             	or     $0x1,%eax
c01075d5:	89 c2                	mov    %eax,%edx
c01075d7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01075da:	89 10                	mov    %edx,(%eax)
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
    assert(PGOFF(la) == PGOFF(pa));
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
    la = ROUNDDOWN(la, PGSIZE);
    pa = ROUNDDOWN(pa, PGSIZE);
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c01075dc:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c01075e0:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
c01075e7:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
c01075ee:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01075f2:	75 a3                	jne    c0107597 <boot_map_segment+0x89>
        pte_t *ptep = get_pte(pgdir, la, 1);
        assert(ptep != NULL);
        *ptep = pa | PTE_P | perm;
    }
}
c01075f4:	90                   	nop
c01075f5:	c9                   	leave  
c01075f6:	c3                   	ret    

c01075f7 <boot_alloc_page>:

//boot_alloc_page - allocate one page using pmm->alloc_pages(1) 
// return value: the kernel virtual address of this allocated page
//note: this function is used to get the memory for PDT(Page Directory Table)&PT(Page Table)
static void *
boot_alloc_page(void) {
c01075f7:	55                   	push   %ebp
c01075f8:	89 e5                	mov    %esp,%ebp
c01075fa:	83 ec 18             	sub    $0x18,%esp
    struct Page *p = alloc_page();
c01075fd:	83 ec 0c             	sub    $0xc,%esp
c0107600:	6a 01                	push   $0x1
c0107602:	e8 8c fa ff ff       	call   c0107093 <alloc_pages>
c0107607:	83 c4 10             	add    $0x10,%esp
c010760a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (p == NULL) {
c010760d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107611:	75 17                	jne    c010762a <boot_alloc_page+0x33>
        panic("boot_alloc_page failed.\n");
c0107613:	83 ec 04             	sub    $0x4,%esp
c0107616:	68 3b e7 10 c0       	push   $0xc010e73b
c010761b:	68 1a 01 00 00       	push   $0x11a
c0107620:	68 f4 e6 10 c0       	push   $0xc010e6f4
c0107625:	e8 d3 8d ff ff       	call   c01003fd <__panic>
    }
    return page2kva(p);
c010762a:	83 ec 0c             	sub    $0xc,%esp
c010762d:	ff 75 f4             	pushl  -0xc(%ebp)
c0107630:	e8 b5 f7 ff ff       	call   c0106dea <page2kva>
c0107635:	83 c4 10             	add    $0x10,%esp
}
c0107638:	c9                   	leave  
c0107639:	c3                   	ret    

c010763a <pmm_init>:

//pmm_init - setup a pmm to manage physical memory, build PDT&PT to setup paging mechanism 
//         - check the correctness of pmm & paging mechanism, print PDT&PT
void
pmm_init(void) {
c010763a:	55                   	push   %ebp
c010763b:	89 e5                	mov    %esp,%ebp
c010763d:	83 ec 18             	sub    $0x18,%esp
    // We've already enabled paging
    boot_cr3 = PADDR(boot_pgdir);
c0107640:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c0107645:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0107648:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c010764f:	77 17                	ja     c0107668 <pmm_init+0x2e>
c0107651:	ff 75 f4             	pushl  -0xc(%ebp)
c0107654:	68 d0 e6 10 c0       	push   $0xc010e6d0
c0107659:	68 24 01 00 00       	push   $0x124
c010765e:	68 f4 e6 10 c0       	push   $0xc010e6f4
c0107663:	e8 95 8d ff ff       	call   c01003fd <__panic>
c0107668:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010766b:	05 00 00 00 40       	add    $0x40000000,%eax
c0107670:	a3 f4 71 1c c0       	mov    %eax,0xc01c71f4
    //We need to alloc/free the physical memory (granularity is 4KB or other size). 
    //So a framework of physical memory manager (struct pmm_manager)is defined in pmm.h
    //First we should init a physical memory manager(pmm) based on the framework.
    //Then pmm can alloc/free the physical memory. 
    //Now the first_fit/best_fit/worst_fit/buddy_system pmm are available.
    init_pmm_manager();
c0107675:	e8 c5 f9 ff ff       	call   c010703f <init_pmm_manager>

    // detect physical memory space, reserve already used memory,
    // then use pmm->init_memmap to create free page list
    page_init();
c010767a:	e8 e3 fa ff ff       	call   c0107162 <page_init>

    //use pmm->check to verify the correctness of the alloc/free function in a pmm
    check_alloc_page();
c010767f:	e8 16 08 00 00       	call   c0107e9a <check_alloc_page>

    check_pgdir();
c0107684:	e8 34 08 00 00       	call   c0107ebd <check_pgdir>

    static_assert(KERNBASE % PTSIZE == 0 && KERNTOP % PTSIZE == 0);

    // recursively insert boot_pgdir in itself
    // to form a virtual page table at virtual address VPT
    boot_pgdir[PDX(VPT)] = PADDR(boot_pgdir) | PTE_P | PTE_W;
c0107689:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c010768e:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
c0107694:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c0107699:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010769c:	81 7d f0 ff ff ff bf 	cmpl   $0xbfffffff,-0x10(%ebp)
c01076a3:	77 17                	ja     c01076bc <pmm_init+0x82>
c01076a5:	ff 75 f0             	pushl  -0x10(%ebp)
c01076a8:	68 d0 e6 10 c0       	push   $0xc010e6d0
c01076ad:	68 3a 01 00 00       	push   $0x13a
c01076b2:	68 f4 e6 10 c0       	push   $0xc010e6f4
c01076b7:	e8 41 8d ff ff       	call   c01003fd <__panic>
c01076bc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01076bf:	05 00 00 00 40       	add    $0x40000000,%eax
c01076c4:	83 c8 03             	or     $0x3,%eax
c01076c7:	89 02                	mov    %eax,(%edx)

    // map all physical memory to linear memory with base linear addr KERNBASE
    // linear_addr KERNBASE ~ KERNBASE + KMEMSIZE = phy_addr 0 ~ KMEMSIZE
    boot_map_segment(boot_pgdir, KERNBASE, KMEMSIZE, 0, PTE_W);
c01076c9:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c01076ce:	83 ec 0c             	sub    $0xc,%esp
c01076d1:	6a 02                	push   $0x2
c01076d3:	6a 00                	push   $0x0
c01076d5:	68 00 00 00 38       	push   $0x38000000
c01076da:	68 00 00 00 c0       	push   $0xc0000000
c01076df:	50                   	push   %eax
c01076e0:	e8 29 fe ff ff       	call   c010750e <boot_map_segment>
c01076e5:	83 c4 20             	add    $0x20,%esp

    // Since we are using bootloader's GDT,
    // we should reload gdt (second time, the last time) to get user segments and the TSS
    // map virtual_addr 0 ~ 4G = linear_addr 0 ~ 4G
    // then set kernel stack (ss:esp) in TSS, setup TSS in gdt, load TSS
    gdt_init();
c01076e8:	e8 60 f8 ff ff       	call   c0106f4d <gdt_init>

    //now the basic virtual memory map(see memalyout.h) is established.
    //check the correctness of the basic virtual memory map.
    check_boot_pgdir();
c01076ed:	e8 31 0d 00 00       	call   c0108423 <check_boot_pgdir>

    print_pgdir();
c01076f2:	e8 27 11 00 00       	call   c010881e <print_pgdir>
    
    kmalloc_init();
c01076f7:	e8 28 d9 ff ff       	call   c0105024 <kmalloc_init>

}
c01076fc:	90                   	nop
c01076fd:	c9                   	leave  
c01076fe:	c3                   	ret    

c01076ff <get_pte>:
//  pgdir:  the kernel virtual base address of PDT
//  la:     the linear address need to map
//  create: a logical value to decide if alloc a page for PT
// return vaule: the kernel virtual address of this pte
pte_t *
get_pte(pde_t *pgdir, uintptr_t la, bool create) {
c01076ff:	55                   	push   %ebp
c0107700:	89 e5                	mov    %esp,%ebp
c0107702:	83 ec 38             	sub    $0x38,%esp
                          // (7) set page directory entry's permission
    }
    return NULL;          // (8) return page table entry
#endif
    // (1) find page directory entry
    size_t pdx = PDX(la);       // index of this la in page dir table
c0107705:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107708:	c1 e8 16             	shr    $0x16,%eax
c010770b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    pde_t * pdep = pgdir + pdx; // NOTE: this is a virtual addr
c010770e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107711:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0107718:	8b 45 08             	mov    0x8(%ebp),%eax
c010771b:	01 d0                	add    %edx,%eax
c010771d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    // (2) check if entry is not present
    if (!(*pdep & PTE_P)) {
c0107720:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107723:	8b 00                	mov    (%eax),%eax
c0107725:	83 e0 01             	and    $0x1,%eax
c0107728:	85 c0                	test   %eax,%eax
c010772a:	0f 85 ae 00 00 00    	jne    c01077de <get_pte+0xdf>
        // (3) check if creating is needed
        if (!create) {
c0107730:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0107734:	75 0a                	jne    c0107740 <get_pte+0x41>
            return NULL;
c0107736:	b8 00 00 00 00       	mov    $0x0,%eax
c010773b:	e9 01 01 00 00       	jmp    c0107841 <get_pte+0x142>
        }
        // alloc page for page table
        struct Page * pt_page =  alloc_page();
c0107740:	83 ec 0c             	sub    $0xc,%esp
c0107743:	6a 01                	push   $0x1
c0107745:	e8 49 f9 ff ff       	call   c0107093 <alloc_pages>
c010774a:	83 c4 10             	add    $0x10,%esp
c010774d:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (pt_page == NULL) {
c0107750:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0107754:	75 0a                	jne    c0107760 <get_pte+0x61>
            return NULL;
c0107756:	b8 00 00 00 00       	mov    $0x0,%eax
c010775b:	e9 e1 00 00 00       	jmp    c0107841 <get_pte+0x142>
        }
        // (4) set page reference
        set_page_ref(pt_page, 1);
c0107760:	83 ec 08             	sub    $0x8,%esp
c0107763:	6a 01                	push   $0x1
c0107765:	ff 75 ec             	pushl  -0x14(%ebp)
c0107768:	e8 22 f7 ff ff       	call   c0106e8f <set_page_ref>
c010776d:	83 c4 10             	add    $0x10,%esp
        // (5) get linear address of page
        uintptr_t pt_addr = page2pa(pt_page);
c0107770:	83 ec 0c             	sub    $0xc,%esp
c0107773:	ff 75 ec             	pushl  -0x14(%ebp)
c0107776:	e8 1f f6 ff ff       	call   c0106d9a <page2pa>
c010777b:	83 c4 10             	add    $0x10,%esp
c010777e:	89 45 e8             	mov    %eax,-0x18(%ebp)
        // (6) clear page content using memset
        memset(KADDR(pt_addr), 0, PGSIZE);
c0107781:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107784:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0107787:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010778a:	c1 e8 0c             	shr    $0xc,%eax
c010778d:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0107790:	a1 80 4f 1c c0       	mov    0xc01c4f80,%eax
c0107795:	39 45 e0             	cmp    %eax,-0x20(%ebp)
c0107798:	72 17                	jb     c01077b1 <get_pte+0xb2>
c010779a:	ff 75 e4             	pushl  -0x1c(%ebp)
c010779d:	68 2c e6 10 c0       	push   $0xc010e62c
c01077a2:	68 8d 01 00 00       	push   $0x18d
c01077a7:	68 f4 e6 10 c0       	push   $0xc010e6f4
c01077ac:	e8 4c 8c ff ff       	call   c01003fd <__panic>
c01077b1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01077b4:	2d 00 00 00 40       	sub    $0x40000000,%eax
c01077b9:	83 ec 04             	sub    $0x4,%esp
c01077bc:	68 00 10 00 00       	push   $0x1000
c01077c1:	6a 00                	push   $0x0
c01077c3:	50                   	push   %eax
c01077c4:	e8 cc 4c 00 00       	call   c010c495 <memset>
c01077c9:	83 c4 10             	add    $0x10,%esp
        // (7) set page directory entry's permission
        *pdep = (PDE_ADDR(pt_addr)) | PTE_U | PTE_W | PTE_P; // PDE_ADDR: get pa &= ~0xFFF
c01077cc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01077cf:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01077d4:	83 c8 07             	or     $0x7,%eax
c01077d7:	89 c2                	mov    %eax,%edx
c01077d9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01077dc:	89 10                	mov    %edx,(%eax)
    }
    // (8) return page table entry
    size_t ptx = PTX(la);   // index of this la in page dir table
c01077de:	8b 45 0c             	mov    0xc(%ebp),%eax
c01077e1:	c1 e8 0c             	shr    $0xc,%eax
c01077e4:	25 ff 03 00 00       	and    $0x3ff,%eax
c01077e9:	89 45 dc             	mov    %eax,-0x24(%ebp)
    uintptr_t pt_pa = PDE_ADDR(*pdep);
c01077ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01077ef:	8b 00                	mov    (%eax),%eax
c01077f1:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01077f6:	89 45 d8             	mov    %eax,-0x28(%ebp)
    pte_t * ptep = (pte_t *)KADDR(pt_pa) + ptx;
c01077f9:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01077fc:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c01077ff:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0107802:	c1 e8 0c             	shr    $0xc,%eax
c0107805:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0107808:	a1 80 4f 1c c0       	mov    0xc01c4f80,%eax
c010780d:	39 45 d0             	cmp    %eax,-0x30(%ebp)
c0107810:	72 17                	jb     c0107829 <get_pte+0x12a>
c0107812:	ff 75 d4             	pushl  -0x2c(%ebp)
c0107815:	68 2c e6 10 c0       	push   $0xc010e62c
c010781a:	68 94 01 00 00       	push   $0x194
c010781f:	68 f4 e6 10 c0       	push   $0xc010e6f4
c0107824:	e8 d4 8b ff ff       	call   c01003fd <__panic>
c0107829:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010782c:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0107831:	89 c2                	mov    %eax,%edx
c0107833:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107836:	c1 e0 02             	shl    $0x2,%eax
c0107839:	01 d0                	add    %edx,%eax
c010783b:	89 45 cc             	mov    %eax,-0x34(%ebp)
    return ptep;
c010783e:	8b 45 cc             	mov    -0x34(%ebp),%eax
}
c0107841:	c9                   	leave  
c0107842:	c3                   	ret    

c0107843 <get_page>:

//get_page - get related Page struct for linear address la using PDT pgdir
struct Page *
get_page(pde_t *pgdir, uintptr_t la, pte_t **ptep_store) {
c0107843:	55                   	push   %ebp
c0107844:	89 e5                	mov    %esp,%ebp
c0107846:	83 ec 18             	sub    $0x18,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c0107849:	83 ec 04             	sub    $0x4,%esp
c010784c:	6a 00                	push   $0x0
c010784e:	ff 75 0c             	pushl  0xc(%ebp)
c0107851:	ff 75 08             	pushl  0x8(%ebp)
c0107854:	e8 a6 fe ff ff       	call   c01076ff <get_pte>
c0107859:	83 c4 10             	add    $0x10,%esp
c010785c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep_store != NULL) {
c010785f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0107863:	74 08                	je     c010786d <get_page+0x2a>
        *ptep_store = ptep;
c0107865:	8b 45 10             	mov    0x10(%ebp),%eax
c0107868:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010786b:	89 10                	mov    %edx,(%eax)
    }
    if (ptep != NULL && *ptep & PTE_P) {
c010786d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107871:	74 1f                	je     c0107892 <get_page+0x4f>
c0107873:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107876:	8b 00                	mov    (%eax),%eax
c0107878:	83 e0 01             	and    $0x1,%eax
c010787b:	85 c0                	test   %eax,%eax
c010787d:	74 13                	je     c0107892 <get_page+0x4f>
        return pte2page(*ptep);
c010787f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107882:	8b 00                	mov    (%eax),%eax
c0107884:	83 ec 0c             	sub    $0xc,%esp
c0107887:	50                   	push   %eax
c0107888:	e8 a2 f5 ff ff       	call   c0106e2f <pte2page>
c010788d:	83 c4 10             	add    $0x10,%esp
c0107890:	eb 05                	jmp    c0107897 <get_page+0x54>
    }
    return NULL;
c0107892:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107897:	c9                   	leave  
c0107898:	c3                   	ret    

c0107899 <page_remove_pte>:

//page_remove_pte - free an Page sturct which is related linear address la
//                - and clean(invalidate) pte which is related linear address la
//note: PT is changed, so the TLB need to be invalidate 
static inline void
page_remove_pte(pde_t *pgdir, uintptr_t la, pte_t *ptep) {
c0107899:	55                   	push   %ebp
c010789a:	89 e5                	mov    %esp,%ebp
c010789c:	83 ec 18             	sub    $0x18,%esp
                                  //(5) clear second page table entry
                                  //(6) flush tlb
    }
#endif
    //(1) check if this page table entry is present
    if (!(*ptep & PTE_P)) {
c010789f:	8b 45 10             	mov    0x10(%ebp),%eax
c01078a2:	8b 00                	mov    (%eax),%eax
c01078a4:	83 e0 01             	and    $0x1,%eax
c01078a7:	85 c0                	test   %eax,%eax
c01078a9:	74 57                	je     c0107902 <page_remove_pte+0x69>
        return;
    }
    //(2) find corresponding page to pte
    struct Page *page = pte2page(*ptep);
c01078ab:	8b 45 10             	mov    0x10(%ebp),%eax
c01078ae:	8b 00                	mov    (%eax),%eax
c01078b0:	83 ec 0c             	sub    $0xc,%esp
c01078b3:	50                   	push   %eax
c01078b4:	e8 76 f5 ff ff       	call   c0106e2f <pte2page>
c01078b9:	83 c4 10             	add    $0x10,%esp
c01078bc:	89 45 f4             	mov    %eax,-0xc(%ebp)
    //(3) decrease page reference
    page_ref_dec(page);
c01078bf:	83 ec 0c             	sub    $0xc,%esp
c01078c2:	ff 75 f4             	pushl  -0xc(%ebp)
c01078c5:	e8 ea f5 ff ff       	call   c0106eb4 <page_ref_dec>
c01078ca:	83 c4 10             	add    $0x10,%esp
    //(4) and free this page when page reference reachs 0
    if (page->ref == 0) {
c01078cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01078d0:	8b 00                	mov    (%eax),%eax
c01078d2:	85 c0                	test   %eax,%eax
c01078d4:	75 10                	jne    c01078e6 <page_remove_pte+0x4d>
        free_page(page);
c01078d6:	83 ec 08             	sub    $0x8,%esp
c01078d9:	6a 01                	push   $0x1
c01078db:	ff 75 f4             	pushl  -0xc(%ebp)
c01078de:	e8 1c f8 ff ff       	call   c01070ff <free_pages>
c01078e3:	83 c4 10             	add    $0x10,%esp
    }
    //(5) clear second page table entry
    *ptep = 0;
c01078e6:	8b 45 10             	mov    0x10(%ebp),%eax
c01078e9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    //(6) flush tlb
    tlb_invalidate(pgdir, la);
c01078ef:	83 ec 08             	sub    $0x8,%esp
c01078f2:	ff 75 0c             	pushl  0xc(%ebp)
c01078f5:	ff 75 08             	pushl  0x8(%ebp)
c01078f8:	e8 9c 04 00 00       	call   c0107d99 <tlb_invalidate>
c01078fd:	83 c4 10             	add    $0x10,%esp
c0107900:	eb 01                	jmp    c0107903 <page_remove_pte+0x6a>
                                  //(6) flush tlb
    }
#endif
    //(1) check if this page table entry is present
    if (!(*ptep & PTE_P)) {
        return;
c0107902:	90                   	nop
    }
    //(5) clear second page table entry
    *ptep = 0;
    //(6) flush tlb
    tlb_invalidate(pgdir, la);
}
c0107903:	c9                   	leave  
c0107904:	c3                   	ret    

c0107905 <unmap_range>:

void
unmap_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c0107905:	55                   	push   %ebp
c0107906:	89 e5                	mov    %esp,%ebp
c0107908:	83 ec 18             	sub    $0x18,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c010790b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010790e:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107913:	85 c0                	test   %eax,%eax
c0107915:	75 0c                	jne    c0107923 <unmap_range+0x1e>
c0107917:	8b 45 10             	mov    0x10(%ebp),%eax
c010791a:	25 ff 0f 00 00       	and    $0xfff,%eax
c010791f:	85 c0                	test   %eax,%eax
c0107921:	74 19                	je     c010793c <unmap_range+0x37>
c0107923:	68 54 e7 10 c0       	push   $0xc010e754
c0107928:	68 19 e7 10 c0       	push   $0xc010e719
c010792d:	68 d7 01 00 00       	push   $0x1d7
c0107932:	68 f4 e6 10 c0       	push   $0xc010e6f4
c0107937:	e8 c1 8a ff ff       	call   c01003fd <__panic>
    assert(USER_ACCESS(start, end));
c010793c:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0107943:	76 11                	jbe    c0107956 <unmap_range+0x51>
c0107945:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107948:	3b 45 10             	cmp    0x10(%ebp),%eax
c010794b:	73 09                	jae    c0107956 <unmap_range+0x51>
c010794d:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c0107954:	76 19                	jbe    c010796f <unmap_range+0x6a>
c0107956:	68 7d e7 10 c0       	push   $0xc010e77d
c010795b:	68 19 e7 10 c0       	push   $0xc010e719
c0107960:	68 d8 01 00 00       	push   $0x1d8
c0107965:	68 f4 e6 10 c0       	push   $0xc010e6f4
c010796a:	e8 8e 8a ff ff       	call   c01003fd <__panic>

    do {
        pte_t *ptep = get_pte(pgdir, start, 0);
c010796f:	83 ec 04             	sub    $0x4,%esp
c0107972:	6a 00                	push   $0x0
c0107974:	ff 75 0c             	pushl  0xc(%ebp)
c0107977:	ff 75 08             	pushl  0x8(%ebp)
c010797a:	e8 80 fd ff ff       	call   c01076ff <get_pte>
c010797f:	83 c4 10             	add    $0x10,%esp
c0107982:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ptep == NULL) {
c0107985:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107989:	75 18                	jne    c01079a3 <unmap_range+0x9e>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
c010798b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010798e:	05 00 00 40 00       	add    $0x400000,%eax
c0107993:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107996:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107999:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c010799e:	89 45 0c             	mov    %eax,0xc(%ebp)
            continue ;
c01079a1:	eb 24                	jmp    c01079c7 <unmap_range+0xc2>
        }
        if (*ptep != 0) {
c01079a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01079a6:	8b 00                	mov    (%eax),%eax
c01079a8:	85 c0                	test   %eax,%eax
c01079aa:	74 14                	je     c01079c0 <unmap_range+0xbb>
            page_remove_pte(pgdir, start, ptep);
c01079ac:	83 ec 04             	sub    $0x4,%esp
c01079af:	ff 75 f4             	pushl  -0xc(%ebp)
c01079b2:	ff 75 0c             	pushl  0xc(%ebp)
c01079b5:	ff 75 08             	pushl  0x8(%ebp)
c01079b8:	e8 dc fe ff ff       	call   c0107899 <page_remove_pte>
c01079bd:	83 c4 10             	add    $0x10,%esp
        }
        start += PGSIZE;
c01079c0:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
    } while (start != 0 && start < end);
c01079c7:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01079cb:	74 08                	je     c01079d5 <unmap_range+0xd0>
c01079cd:	8b 45 0c             	mov    0xc(%ebp),%eax
c01079d0:	3b 45 10             	cmp    0x10(%ebp),%eax
c01079d3:	72 9a                	jb     c010796f <unmap_range+0x6a>
}
c01079d5:	90                   	nop
c01079d6:	c9                   	leave  
c01079d7:	c3                   	ret    

c01079d8 <exit_range>:

void
exit_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c01079d8:	55                   	push   %ebp
c01079d9:	89 e5                	mov    %esp,%ebp
c01079db:	83 ec 18             	sub    $0x18,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c01079de:	8b 45 0c             	mov    0xc(%ebp),%eax
c01079e1:	25 ff 0f 00 00       	and    $0xfff,%eax
c01079e6:	85 c0                	test   %eax,%eax
c01079e8:	75 0c                	jne    c01079f6 <exit_range+0x1e>
c01079ea:	8b 45 10             	mov    0x10(%ebp),%eax
c01079ed:	25 ff 0f 00 00       	and    $0xfff,%eax
c01079f2:	85 c0                	test   %eax,%eax
c01079f4:	74 19                	je     c0107a0f <exit_range+0x37>
c01079f6:	68 54 e7 10 c0       	push   $0xc010e754
c01079fb:	68 19 e7 10 c0       	push   $0xc010e719
c0107a00:	68 e9 01 00 00       	push   $0x1e9
c0107a05:	68 f4 e6 10 c0       	push   $0xc010e6f4
c0107a0a:	e8 ee 89 ff ff       	call   c01003fd <__panic>
    assert(USER_ACCESS(start, end));
c0107a0f:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0107a16:	76 11                	jbe    c0107a29 <exit_range+0x51>
c0107a18:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107a1b:	3b 45 10             	cmp    0x10(%ebp),%eax
c0107a1e:	73 09                	jae    c0107a29 <exit_range+0x51>
c0107a20:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c0107a27:	76 19                	jbe    c0107a42 <exit_range+0x6a>
c0107a29:	68 7d e7 10 c0       	push   $0xc010e77d
c0107a2e:	68 19 e7 10 c0       	push   $0xc010e719
c0107a33:	68 ea 01 00 00       	push   $0x1ea
c0107a38:	68 f4 e6 10 c0       	push   $0xc010e6f4
c0107a3d:	e8 bb 89 ff ff       	call   c01003fd <__panic>

    start = ROUNDDOWN(start, PTSIZE);
c0107a42:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107a45:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0107a48:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107a4b:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0107a50:	89 45 0c             	mov    %eax,0xc(%ebp)
    do {
        int pde_idx = PDX(start);
c0107a53:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107a56:	c1 e8 16             	shr    $0x16,%eax
c0107a59:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pgdir[pde_idx] & PTE_P) {
c0107a5c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107a5f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0107a66:	8b 45 08             	mov    0x8(%ebp),%eax
c0107a69:	01 d0                	add    %edx,%eax
c0107a6b:	8b 00                	mov    (%eax),%eax
c0107a6d:	83 e0 01             	and    $0x1,%eax
c0107a70:	85 c0                	test   %eax,%eax
c0107a72:	74 40                	je     c0107ab4 <exit_range+0xdc>
            free_page(pde2page(pgdir[pde_idx]));
c0107a74:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107a77:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0107a7e:	8b 45 08             	mov    0x8(%ebp),%eax
c0107a81:	01 d0                	add    %edx,%eax
c0107a83:	8b 00                	mov    (%eax),%eax
c0107a85:	83 ec 0c             	sub    $0xc,%esp
c0107a88:	50                   	push   %eax
c0107a89:	e8 db f3 ff ff       	call   c0106e69 <pde2page>
c0107a8e:	83 c4 10             	add    $0x10,%esp
c0107a91:	83 ec 08             	sub    $0x8,%esp
c0107a94:	6a 01                	push   $0x1
c0107a96:	50                   	push   %eax
c0107a97:	e8 63 f6 ff ff       	call   c01070ff <free_pages>
c0107a9c:	83 c4 10             	add    $0x10,%esp
            pgdir[pde_idx] = 0;
c0107a9f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107aa2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0107aa9:	8b 45 08             	mov    0x8(%ebp),%eax
c0107aac:	01 d0                	add    %edx,%eax
c0107aae:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        }
        start += PTSIZE;
c0107ab4:	81 45 0c 00 00 40 00 	addl   $0x400000,0xc(%ebp)
    } while (start != 0 && start < end);
c0107abb:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0107abf:	74 08                	je     c0107ac9 <exit_range+0xf1>
c0107ac1:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107ac4:	3b 45 10             	cmp    0x10(%ebp),%eax
c0107ac7:	72 8a                	jb     c0107a53 <exit_range+0x7b>
}
c0107ac9:	90                   	nop
c0107aca:	c9                   	leave  
c0107acb:	c3                   	ret    

c0107acc <copy_range>:
 * @share: flags to indicate to dup OR share. We just use dup method, so it didn't be used.
 *
 * CALL GRAPH: copy_mm-->dup_mmap-->copy_range
 */
int
copy_range(pde_t *to, pde_t *from, uintptr_t start, uintptr_t end, bool share) {
c0107acc:	55                   	push   %ebp
c0107acd:	89 e5                	mov    %esp,%ebp
c0107acf:	83 ec 38             	sub    $0x38,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0107ad2:	8b 45 10             	mov    0x10(%ebp),%eax
c0107ad5:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107ada:	85 c0                	test   %eax,%eax
c0107adc:	75 0c                	jne    c0107aea <copy_range+0x1e>
c0107ade:	8b 45 14             	mov    0x14(%ebp),%eax
c0107ae1:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107ae6:	85 c0                	test   %eax,%eax
c0107ae8:	74 19                	je     c0107b03 <copy_range+0x37>
c0107aea:	68 54 e7 10 c0       	push   $0xc010e754
c0107aef:	68 19 e7 10 c0       	push   $0xc010e719
c0107af4:	68 ff 01 00 00       	push   $0x1ff
c0107af9:	68 f4 e6 10 c0       	push   $0xc010e6f4
c0107afe:	e8 fa 88 ff ff       	call   c01003fd <__panic>
    assert(USER_ACCESS(start, end));
c0107b03:	81 7d 10 ff ff 1f 00 	cmpl   $0x1fffff,0x10(%ebp)
c0107b0a:	76 11                	jbe    c0107b1d <copy_range+0x51>
c0107b0c:	8b 45 10             	mov    0x10(%ebp),%eax
c0107b0f:	3b 45 14             	cmp    0x14(%ebp),%eax
c0107b12:	73 09                	jae    c0107b1d <copy_range+0x51>
c0107b14:	81 7d 14 00 00 00 b0 	cmpl   $0xb0000000,0x14(%ebp)
c0107b1b:	76 19                	jbe    c0107b36 <copy_range+0x6a>
c0107b1d:	68 7d e7 10 c0       	push   $0xc010e77d
c0107b22:	68 19 e7 10 c0       	push   $0xc010e719
c0107b27:	68 00 02 00 00       	push   $0x200
c0107b2c:	68 f4 e6 10 c0       	push   $0xc010e6f4
c0107b31:	e8 c7 88 ff ff       	call   c01003fd <__panic>
    // copy content by page unit.
    do {
        //call get_pte to find process A's pte according to the addr start
        pte_t *ptep = get_pte(from, start, 0), *nptep;
c0107b36:	83 ec 04             	sub    $0x4,%esp
c0107b39:	6a 00                	push   $0x0
c0107b3b:	ff 75 10             	pushl  0x10(%ebp)
c0107b3e:	ff 75 0c             	pushl  0xc(%ebp)
c0107b41:	e8 b9 fb ff ff       	call   c01076ff <get_pte>
c0107b46:	83 c4 10             	add    $0x10,%esp
c0107b49:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ptep == NULL) {
c0107b4c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107b50:	75 1b                	jne    c0107b6d <copy_range+0xa1>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
c0107b52:	8b 45 10             	mov    0x10(%ebp),%eax
c0107b55:	05 00 00 40 00       	add    $0x400000,%eax
c0107b5a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107b5d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107b60:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0107b65:	89 45 10             	mov    %eax,0x10(%ebp)
            continue ;
c0107b68:	e9 21 01 00 00       	jmp    c0107c8e <copy_range+0x1c2>
        }
        //call get_pte to find process B's pte according to the addr start. If pte is NULL, just alloc a PT
        if (*ptep & PTE_P) {
c0107b6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107b70:	8b 00                	mov    (%eax),%eax
c0107b72:	83 e0 01             	and    $0x1,%eax
c0107b75:	85 c0                	test   %eax,%eax
c0107b77:	0f 84 0a 01 00 00    	je     c0107c87 <copy_range+0x1bb>
            if ((nptep = get_pte(to, start, 1)) == NULL) {
c0107b7d:	83 ec 04             	sub    $0x4,%esp
c0107b80:	6a 01                	push   $0x1
c0107b82:	ff 75 10             	pushl  0x10(%ebp)
c0107b85:	ff 75 08             	pushl  0x8(%ebp)
c0107b88:	e8 72 fb ff ff       	call   c01076ff <get_pte>
c0107b8d:	83 c4 10             	add    $0x10,%esp
c0107b90:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0107b93:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0107b97:	75 0a                	jne    c0107ba3 <copy_range+0xd7>
                return -E_NO_MEM;
c0107b99:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0107b9e:	e9 02 01 00 00       	jmp    c0107ca5 <copy_range+0x1d9>
            }
            uint32_t perm = (*ptep & PTE_USER);
c0107ba3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107ba6:	8b 00                	mov    (%eax),%eax
c0107ba8:	83 e0 07             	and    $0x7,%eax
c0107bab:	89 45 e8             	mov    %eax,-0x18(%ebp)
            //get page from ptep
            struct Page *page = pte2page(*ptep);
c0107bae:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107bb1:	8b 00                	mov    (%eax),%eax
c0107bb3:	83 ec 0c             	sub    $0xc,%esp
c0107bb6:	50                   	push   %eax
c0107bb7:	e8 73 f2 ff ff       	call   c0106e2f <pte2page>
c0107bbc:	83 c4 10             	add    $0x10,%esp
c0107bbf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            // alloc a page for process B
            struct Page *npage=alloc_page();
c0107bc2:	83 ec 0c             	sub    $0xc,%esp
c0107bc5:	6a 01                	push   $0x1
c0107bc7:	e8 c7 f4 ff ff       	call   c0107093 <alloc_pages>
c0107bcc:	83 c4 10             	add    $0x10,%esp
c0107bcf:	89 45 e0             	mov    %eax,-0x20(%ebp)
            assert(page!=NULL);
c0107bd2:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0107bd6:	75 19                	jne    c0107bf1 <copy_range+0x125>
c0107bd8:	68 95 e7 10 c0       	push   $0xc010e795
c0107bdd:	68 19 e7 10 c0       	push   $0xc010e719
c0107be2:	68 13 02 00 00       	push   $0x213
c0107be7:	68 f4 e6 10 c0       	push   $0xc010e6f4
c0107bec:	e8 0c 88 ff ff       	call   c01003fd <__panic>
            assert(npage!=NULL);
c0107bf1:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0107bf5:	75 19                	jne    c0107c10 <copy_range+0x144>
c0107bf7:	68 a0 e7 10 c0       	push   $0xc010e7a0
c0107bfc:	68 19 e7 10 c0       	push   $0xc010e719
c0107c01:	68 14 02 00 00       	push   $0x214
c0107c06:	68 f4 e6 10 c0       	push   $0xc010e6f4
c0107c0b:	e8 ed 87 ff ff       	call   c01003fd <__panic>
            int ret=0;
c0107c10:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
            * (2) find dst_kvaddr: the kernel virtual address of npage
            * (3) memory copy from src_kvaddr to dst_kvaddr, size is PGSIZE
            * (4) build the map of phy addr of  nage with the linear addr start
            */
            // (1) find src_kvaddr: the kernel virtual address of page
            uintptr_t src_kvaddr = page2kva(page);
c0107c17:	83 ec 0c             	sub    $0xc,%esp
c0107c1a:	ff 75 e4             	pushl  -0x1c(%ebp)
c0107c1d:	e8 c8 f1 ff ff       	call   c0106dea <page2kva>
c0107c22:	83 c4 10             	add    $0x10,%esp
c0107c25:	89 45 d8             	mov    %eax,-0x28(%ebp)
            // (2) find dst_kvaddr: the kernel virtual address of npage
            uintptr_t dst_kvaddr = page2kva(npage);
c0107c28:	83 ec 0c             	sub    $0xc,%esp
c0107c2b:	ff 75 e0             	pushl  -0x20(%ebp)
c0107c2e:	e8 b7 f1 ff ff       	call   c0106dea <page2kva>
c0107c33:	83 c4 10             	add    $0x10,%esp
c0107c36:	89 45 d4             	mov    %eax,-0x2c(%ebp)
            // (3) memory copy from src_kvaddr to dst_kvaddr, size is PGSIZE
            memcpy(dst_kvaddr, src_kvaddr, PGSIZE);
c0107c39:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0107c3c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0107c3f:	83 ec 04             	sub    $0x4,%esp
c0107c42:	68 00 10 00 00       	push   $0x1000
c0107c47:	52                   	push   %edx
c0107c48:	50                   	push   %eax
c0107c49:	e8 2a 49 00 00       	call   c010c578 <memcpy>
c0107c4e:	83 c4 10             	add    $0x10,%esp
            // (4) build the map of phy addr of  nage with the linear addr start
            ret = page_insert(to, npage, start, perm);
c0107c51:	ff 75 e8             	pushl  -0x18(%ebp)
c0107c54:	ff 75 10             	pushl  0x10(%ebp)
c0107c57:	ff 75 e0             	pushl  -0x20(%ebp)
c0107c5a:	ff 75 08             	pushl  0x8(%ebp)
c0107c5d:	e8 7e 00 00 00       	call   c0107ce0 <page_insert>
c0107c62:	83 c4 10             	add    $0x10,%esp
c0107c65:	89 45 dc             	mov    %eax,-0x24(%ebp)
            assert(ret == 0);
c0107c68:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0107c6c:	74 19                	je     c0107c87 <copy_range+0x1bb>
c0107c6e:	68 ac e7 10 c0       	push   $0xc010e7ac
c0107c73:	68 19 e7 10 c0       	push   $0xc010e719
c0107c78:	68 2c 02 00 00       	push   $0x22c
c0107c7d:	68 f4 e6 10 c0       	push   $0xc010e6f4
c0107c82:	e8 76 87 ff ff       	call   c01003fd <__panic>
        }
        start += PGSIZE;
c0107c87:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    } while (start != 0 && start < end);
c0107c8e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0107c92:	74 0c                	je     c0107ca0 <copy_range+0x1d4>
c0107c94:	8b 45 10             	mov    0x10(%ebp),%eax
c0107c97:	3b 45 14             	cmp    0x14(%ebp),%eax
c0107c9a:	0f 82 96 fe ff ff    	jb     c0107b36 <copy_range+0x6a>
    return 0;
c0107ca0:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107ca5:	c9                   	leave  
c0107ca6:	c3                   	ret    

c0107ca7 <page_remove>:

//page_remove - free an Page which is related linear address la and has an validated pte
void
page_remove(pde_t *pgdir, uintptr_t la) {
c0107ca7:	55                   	push   %ebp
c0107ca8:	89 e5                	mov    %esp,%ebp
c0107caa:	83 ec 18             	sub    $0x18,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c0107cad:	83 ec 04             	sub    $0x4,%esp
c0107cb0:	6a 00                	push   $0x0
c0107cb2:	ff 75 0c             	pushl  0xc(%ebp)
c0107cb5:	ff 75 08             	pushl  0x8(%ebp)
c0107cb8:	e8 42 fa ff ff       	call   c01076ff <get_pte>
c0107cbd:	83 c4 10             	add    $0x10,%esp
c0107cc0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep != NULL) {
c0107cc3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107cc7:	74 14                	je     c0107cdd <page_remove+0x36>
        page_remove_pte(pgdir, la, ptep);
c0107cc9:	83 ec 04             	sub    $0x4,%esp
c0107ccc:	ff 75 f4             	pushl  -0xc(%ebp)
c0107ccf:	ff 75 0c             	pushl  0xc(%ebp)
c0107cd2:	ff 75 08             	pushl  0x8(%ebp)
c0107cd5:	e8 bf fb ff ff       	call   c0107899 <page_remove_pte>
c0107cda:	83 c4 10             	add    $0x10,%esp
    }
}
c0107cdd:	90                   	nop
c0107cde:	c9                   	leave  
c0107cdf:	c3                   	ret    

c0107ce0 <page_insert>:
//  la:    the linear address need to map
//  perm:  the permission of this Page which is setted in related pte
// return value: always 0
//note: PT is changed, so the TLB need to be invalidate 
int
page_insert(pde_t *pgdir, struct Page *page, uintptr_t la, uint32_t perm) {
c0107ce0:	55                   	push   %ebp
c0107ce1:	89 e5                	mov    %esp,%ebp
c0107ce3:	83 ec 18             	sub    $0x18,%esp
    pte_t *ptep = get_pte(pgdir, la, 1);
c0107ce6:	83 ec 04             	sub    $0x4,%esp
c0107ce9:	6a 01                	push   $0x1
c0107ceb:	ff 75 10             	pushl  0x10(%ebp)
c0107cee:	ff 75 08             	pushl  0x8(%ebp)
c0107cf1:	e8 09 fa ff ff       	call   c01076ff <get_pte>
c0107cf6:	83 c4 10             	add    $0x10,%esp
c0107cf9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep == NULL) {
c0107cfc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107d00:	75 0a                	jne    c0107d0c <page_insert+0x2c>
        return -E_NO_MEM;
c0107d02:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0107d07:	e9 8b 00 00 00       	jmp    c0107d97 <page_insert+0xb7>
    }
    page_ref_inc(page);
c0107d0c:	83 ec 0c             	sub    $0xc,%esp
c0107d0f:	ff 75 0c             	pushl  0xc(%ebp)
c0107d12:	e8 86 f1 ff ff       	call   c0106e9d <page_ref_inc>
c0107d17:	83 c4 10             	add    $0x10,%esp
    if (*ptep & PTE_P) {
c0107d1a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107d1d:	8b 00                	mov    (%eax),%eax
c0107d1f:	83 e0 01             	and    $0x1,%eax
c0107d22:	85 c0                	test   %eax,%eax
c0107d24:	74 40                	je     c0107d66 <page_insert+0x86>
        struct Page *p = pte2page(*ptep);
c0107d26:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107d29:	8b 00                	mov    (%eax),%eax
c0107d2b:	83 ec 0c             	sub    $0xc,%esp
c0107d2e:	50                   	push   %eax
c0107d2f:	e8 fb f0 ff ff       	call   c0106e2f <pte2page>
c0107d34:	83 c4 10             	add    $0x10,%esp
c0107d37:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (p == page) {
c0107d3a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107d3d:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0107d40:	75 10                	jne    c0107d52 <page_insert+0x72>
            page_ref_dec(page);
c0107d42:	83 ec 0c             	sub    $0xc,%esp
c0107d45:	ff 75 0c             	pushl  0xc(%ebp)
c0107d48:	e8 67 f1 ff ff       	call   c0106eb4 <page_ref_dec>
c0107d4d:	83 c4 10             	add    $0x10,%esp
c0107d50:	eb 14                	jmp    c0107d66 <page_insert+0x86>
        }
        else {
            page_remove_pte(pgdir, la, ptep);
c0107d52:	83 ec 04             	sub    $0x4,%esp
c0107d55:	ff 75 f4             	pushl  -0xc(%ebp)
c0107d58:	ff 75 10             	pushl  0x10(%ebp)
c0107d5b:	ff 75 08             	pushl  0x8(%ebp)
c0107d5e:	e8 36 fb ff ff       	call   c0107899 <page_remove_pte>
c0107d63:	83 c4 10             	add    $0x10,%esp
        }
    }
    *ptep = page2pa(page) | PTE_P | perm;
c0107d66:	83 ec 0c             	sub    $0xc,%esp
c0107d69:	ff 75 0c             	pushl  0xc(%ebp)
c0107d6c:	e8 29 f0 ff ff       	call   c0106d9a <page2pa>
c0107d71:	83 c4 10             	add    $0x10,%esp
c0107d74:	0b 45 14             	or     0x14(%ebp),%eax
c0107d77:	83 c8 01             	or     $0x1,%eax
c0107d7a:	89 c2                	mov    %eax,%edx
c0107d7c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107d7f:	89 10                	mov    %edx,(%eax)
    tlb_invalidate(pgdir, la);
c0107d81:	83 ec 08             	sub    $0x8,%esp
c0107d84:	ff 75 10             	pushl  0x10(%ebp)
c0107d87:	ff 75 08             	pushl  0x8(%ebp)
c0107d8a:	e8 0a 00 00 00       	call   c0107d99 <tlb_invalidate>
c0107d8f:	83 c4 10             	add    $0x10,%esp
    return 0;
c0107d92:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107d97:	c9                   	leave  
c0107d98:	c3                   	ret    

c0107d99 <tlb_invalidate>:

// invalidate a TLB entry, but only if the page tables being
// edited are the ones currently in use by the processor.
void
tlb_invalidate(pde_t *pgdir, uintptr_t la) {
c0107d99:	55                   	push   %ebp
c0107d9a:	89 e5                	mov    %esp,%ebp
c0107d9c:	83 ec 18             	sub    $0x18,%esp
}

static inline uintptr_t
rcr3(void) {
    uintptr_t cr3;
    asm volatile ("mov %%cr3, %0" : "=r" (cr3) :: "memory");
c0107d9f:	0f 20 d8             	mov    %cr3,%eax
c0107da2:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return cr3;
c0107da5:	8b 55 ec             	mov    -0x14(%ebp),%edx
    if (rcr3() == PADDR(pgdir)) {
c0107da8:	8b 45 08             	mov    0x8(%ebp),%eax
c0107dab:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107dae:	81 7d f0 ff ff ff bf 	cmpl   $0xbfffffff,-0x10(%ebp)
c0107db5:	77 17                	ja     c0107dce <tlb_invalidate+0x35>
c0107db7:	ff 75 f0             	pushl  -0x10(%ebp)
c0107dba:	68 d0 e6 10 c0       	push   $0xc010e6d0
c0107dbf:	68 5d 02 00 00       	push   $0x25d
c0107dc4:	68 f4 e6 10 c0       	push   $0xc010e6f4
c0107dc9:	e8 2f 86 ff ff       	call   c01003fd <__panic>
c0107dce:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107dd1:	05 00 00 00 40       	add    $0x40000000,%eax
c0107dd6:	39 c2                	cmp    %eax,%edx
c0107dd8:	75 0c                	jne    c0107de6 <tlb_invalidate+0x4d>
        invlpg((void *)la);
c0107dda:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107ddd:	89 45 f4             	mov    %eax,-0xc(%ebp)
}

static inline void
invlpg(void *addr) {
    asm volatile ("invlpg (%0)" :: "r" (addr) : "memory");
c0107de0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107de3:	0f 01 38             	invlpg (%eax)
    }
}
c0107de6:	90                   	nop
c0107de7:	c9                   	leave  
c0107de8:	c3                   	ret    

c0107de9 <pgdir_alloc_page>:

// pgdir_alloc_page - call alloc_page & page_insert functions to 
//                  - allocate a page size memory & setup an addr map
//                  - pa<->la with linear address la and the PDT pgdir
struct Page *
pgdir_alloc_page(pde_t *pgdir, uintptr_t la, uint32_t perm) {
c0107de9:	55                   	push   %ebp
c0107dea:	89 e5                	mov    %esp,%ebp
c0107dec:	83 ec 18             	sub    $0x18,%esp
    struct Page *page = alloc_page();
c0107def:	83 ec 0c             	sub    $0xc,%esp
c0107df2:	6a 01                	push   $0x1
c0107df4:	e8 9a f2 ff ff       	call   c0107093 <alloc_pages>
c0107df9:	83 c4 10             	add    $0x10,%esp
c0107dfc:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c0107dff:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107e03:	0f 84 8c 00 00 00    	je     c0107e95 <pgdir_alloc_page+0xac>
        if (page_insert(pgdir, page, la, perm) != 0) {
c0107e09:	ff 75 10             	pushl  0x10(%ebp)
c0107e0c:	ff 75 0c             	pushl  0xc(%ebp)
c0107e0f:	ff 75 f4             	pushl  -0xc(%ebp)
c0107e12:	ff 75 08             	pushl  0x8(%ebp)
c0107e15:	e8 c6 fe ff ff       	call   c0107ce0 <page_insert>
c0107e1a:	83 c4 10             	add    $0x10,%esp
c0107e1d:	85 c0                	test   %eax,%eax
c0107e1f:	74 17                	je     c0107e38 <pgdir_alloc_page+0x4f>
            free_page(page);
c0107e21:	83 ec 08             	sub    $0x8,%esp
c0107e24:	6a 01                	push   $0x1
c0107e26:	ff 75 f4             	pushl  -0xc(%ebp)
c0107e29:	e8 d1 f2 ff ff       	call   c01070ff <free_pages>
c0107e2e:	83 c4 10             	add    $0x10,%esp
            return NULL;
c0107e31:	b8 00 00 00 00       	mov    $0x0,%eax
c0107e36:	eb 60                	jmp    c0107e98 <pgdir_alloc_page+0xaf>
        }
        if (swap_init_ok){
c0107e38:	a1 6c 4f 1c c0       	mov    0xc01c4f6c,%eax
c0107e3d:	85 c0                	test   %eax,%eax
c0107e3f:	74 54                	je     c0107e95 <pgdir_alloc_page+0xac>
            if(check_mm_struct!=NULL) {
c0107e41:	a1 10 71 1c c0       	mov    0xc01c7110,%eax
c0107e46:	85 c0                	test   %eax,%eax
c0107e48:	74 4b                	je     c0107e95 <pgdir_alloc_page+0xac>
                swap_map_swappable(check_mm_struct, la, page, 0);
c0107e4a:	a1 10 71 1c c0       	mov    0xc01c7110,%eax
c0107e4f:	6a 00                	push   $0x0
c0107e51:	ff 75 f4             	pushl  -0xc(%ebp)
c0107e54:	ff 75 0c             	pushl  0xc(%ebp)
c0107e57:	50                   	push   %eax
c0107e58:	e8 be d5 ff ff       	call   c010541b <swap_map_swappable>
c0107e5d:	83 c4 10             	add    $0x10,%esp
                page->pra_vaddr=la;
c0107e60:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107e63:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107e66:	89 50 1c             	mov    %edx,0x1c(%eax)
                assert(page_ref(page) == 1);
c0107e69:	83 ec 0c             	sub    $0xc,%esp
c0107e6c:	ff 75 f4             	pushl  -0xc(%ebp)
c0107e6f:	e8 11 f0 ff ff       	call   c0106e85 <page_ref>
c0107e74:	83 c4 10             	add    $0x10,%esp
c0107e77:	83 f8 01             	cmp    $0x1,%eax
c0107e7a:	74 19                	je     c0107e95 <pgdir_alloc_page+0xac>
c0107e7c:	68 b5 e7 10 c0       	push   $0xc010e7b5
c0107e81:	68 19 e7 10 c0       	push   $0xc010e719
c0107e86:	68 71 02 00 00       	push   $0x271
c0107e8b:	68 f4 e6 10 c0       	push   $0xc010e6f4
c0107e90:	e8 68 85 ff ff       	call   c01003fd <__panic>
            }
        }

    }

    return page;
c0107e95:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0107e98:	c9                   	leave  
c0107e99:	c3                   	ret    

c0107e9a <check_alloc_page>:

static void
check_alloc_page(void) {
c0107e9a:	55                   	push   %ebp
c0107e9b:	89 e5                	mov    %esp,%ebp
c0107e9d:	83 ec 08             	sub    $0x8,%esp
    pmm_manager->check();
c0107ea0:	a1 f0 71 1c c0       	mov    0xc01c71f0,%eax
c0107ea5:	8b 40 18             	mov    0x18(%eax),%eax
c0107ea8:	ff d0                	call   *%eax
    cprintf("check_alloc_page() succeeded!\n");
c0107eaa:	83 ec 0c             	sub    $0xc,%esp
c0107ead:	68 cc e7 10 c0       	push   $0xc010e7cc
c0107eb2:	e8 e0 83 ff ff       	call   c0100297 <cprintf>
c0107eb7:	83 c4 10             	add    $0x10,%esp
}
c0107eba:	90                   	nop
c0107ebb:	c9                   	leave  
c0107ebc:	c3                   	ret    

c0107ebd <check_pgdir>:

static void
check_pgdir(void) {
c0107ebd:	55                   	push   %ebp
c0107ebe:	89 e5                	mov    %esp,%ebp
c0107ec0:	83 ec 28             	sub    $0x28,%esp
    assert(npage <= KMEMSIZE / PGSIZE);
c0107ec3:	a1 80 4f 1c c0       	mov    0xc01c4f80,%eax
c0107ec8:	3d 00 80 03 00       	cmp    $0x38000,%eax
c0107ecd:	76 19                	jbe    c0107ee8 <check_pgdir+0x2b>
c0107ecf:	68 eb e7 10 c0       	push   $0xc010e7eb
c0107ed4:	68 19 e7 10 c0       	push   $0xc010e719
c0107ed9:	68 89 02 00 00       	push   $0x289
c0107ede:	68 f4 e6 10 c0       	push   $0xc010e6f4
c0107ee3:	e8 15 85 ff ff       	call   c01003fd <__panic>
    assert(boot_pgdir != NULL && (uint32_t)PGOFF(boot_pgdir) == 0);
c0107ee8:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c0107eed:	85 c0                	test   %eax,%eax
c0107eef:	74 0e                	je     c0107eff <check_pgdir+0x42>
c0107ef1:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c0107ef6:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107efb:	85 c0                	test   %eax,%eax
c0107efd:	74 19                	je     c0107f18 <check_pgdir+0x5b>
c0107eff:	68 08 e8 10 c0       	push   $0xc010e808
c0107f04:	68 19 e7 10 c0       	push   $0xc010e719
c0107f09:	68 8a 02 00 00       	push   $0x28a
c0107f0e:	68 f4 e6 10 c0       	push   $0xc010e6f4
c0107f13:	e8 e5 84 ff ff       	call   c01003fd <__panic>
    assert(get_page(boot_pgdir, 0x0, NULL) == NULL);
c0107f18:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c0107f1d:	83 ec 04             	sub    $0x4,%esp
c0107f20:	6a 00                	push   $0x0
c0107f22:	6a 00                	push   $0x0
c0107f24:	50                   	push   %eax
c0107f25:	e8 19 f9 ff ff       	call   c0107843 <get_page>
c0107f2a:	83 c4 10             	add    $0x10,%esp
c0107f2d:	85 c0                	test   %eax,%eax
c0107f2f:	74 19                	je     c0107f4a <check_pgdir+0x8d>
c0107f31:	68 40 e8 10 c0       	push   $0xc010e840
c0107f36:	68 19 e7 10 c0       	push   $0xc010e719
c0107f3b:	68 8b 02 00 00       	push   $0x28b
c0107f40:	68 f4 e6 10 c0       	push   $0xc010e6f4
c0107f45:	e8 b3 84 ff ff       	call   c01003fd <__panic>

    struct Page *p1, *p2;
    p1 = alloc_page();
c0107f4a:	83 ec 0c             	sub    $0xc,%esp
c0107f4d:	6a 01                	push   $0x1
c0107f4f:	e8 3f f1 ff ff       	call   c0107093 <alloc_pages>
c0107f54:	83 c4 10             	add    $0x10,%esp
c0107f57:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(page_insert(boot_pgdir, p1, 0x0, 0) == 0);
c0107f5a:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c0107f5f:	6a 00                	push   $0x0
c0107f61:	6a 00                	push   $0x0
c0107f63:	ff 75 f4             	pushl  -0xc(%ebp)
c0107f66:	50                   	push   %eax
c0107f67:	e8 74 fd ff ff       	call   c0107ce0 <page_insert>
c0107f6c:	83 c4 10             	add    $0x10,%esp
c0107f6f:	85 c0                	test   %eax,%eax
c0107f71:	74 19                	je     c0107f8c <check_pgdir+0xcf>
c0107f73:	68 68 e8 10 c0       	push   $0xc010e868
c0107f78:	68 19 e7 10 c0       	push   $0xc010e719
c0107f7d:	68 8f 02 00 00       	push   $0x28f
c0107f82:	68 f4 e6 10 c0       	push   $0xc010e6f4
c0107f87:	e8 71 84 ff ff       	call   c01003fd <__panic>

    pte_t *ptep;
    assert((ptep = get_pte(boot_pgdir, 0x0, 0)) != NULL);
c0107f8c:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c0107f91:	83 ec 04             	sub    $0x4,%esp
c0107f94:	6a 00                	push   $0x0
c0107f96:	6a 00                	push   $0x0
c0107f98:	50                   	push   %eax
c0107f99:	e8 61 f7 ff ff       	call   c01076ff <get_pte>
c0107f9e:	83 c4 10             	add    $0x10,%esp
c0107fa1:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107fa4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0107fa8:	75 19                	jne    c0107fc3 <check_pgdir+0x106>
c0107faa:	68 94 e8 10 c0       	push   $0xc010e894
c0107faf:	68 19 e7 10 c0       	push   $0xc010e719
c0107fb4:	68 92 02 00 00       	push   $0x292
c0107fb9:	68 f4 e6 10 c0       	push   $0xc010e6f4
c0107fbe:	e8 3a 84 ff ff       	call   c01003fd <__panic>
    assert(pte2page(*ptep) == p1);
c0107fc3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107fc6:	8b 00                	mov    (%eax),%eax
c0107fc8:	83 ec 0c             	sub    $0xc,%esp
c0107fcb:	50                   	push   %eax
c0107fcc:	e8 5e ee ff ff       	call   c0106e2f <pte2page>
c0107fd1:	83 c4 10             	add    $0x10,%esp
c0107fd4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0107fd7:	74 19                	je     c0107ff2 <check_pgdir+0x135>
c0107fd9:	68 c1 e8 10 c0       	push   $0xc010e8c1
c0107fde:	68 19 e7 10 c0       	push   $0xc010e719
c0107fe3:	68 93 02 00 00       	push   $0x293
c0107fe8:	68 f4 e6 10 c0       	push   $0xc010e6f4
c0107fed:	e8 0b 84 ff ff       	call   c01003fd <__panic>
    assert(page_ref(p1) == 1);
c0107ff2:	83 ec 0c             	sub    $0xc,%esp
c0107ff5:	ff 75 f4             	pushl  -0xc(%ebp)
c0107ff8:	e8 88 ee ff ff       	call   c0106e85 <page_ref>
c0107ffd:	83 c4 10             	add    $0x10,%esp
c0108000:	83 f8 01             	cmp    $0x1,%eax
c0108003:	74 19                	je     c010801e <check_pgdir+0x161>
c0108005:	68 d7 e8 10 c0       	push   $0xc010e8d7
c010800a:	68 19 e7 10 c0       	push   $0xc010e719
c010800f:	68 94 02 00 00       	push   $0x294
c0108014:	68 f4 e6 10 c0       	push   $0xc010e6f4
c0108019:	e8 df 83 ff ff       	call   c01003fd <__panic>

    ptep = &((pte_t *)KADDR(PDE_ADDR(boot_pgdir[0])))[1];
c010801e:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c0108023:	8b 00                	mov    (%eax),%eax
c0108025:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010802a:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010802d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108030:	c1 e8 0c             	shr    $0xc,%eax
c0108033:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0108036:	a1 80 4f 1c c0       	mov    0xc01c4f80,%eax
c010803b:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c010803e:	72 17                	jb     c0108057 <check_pgdir+0x19a>
c0108040:	ff 75 ec             	pushl  -0x14(%ebp)
c0108043:	68 2c e6 10 c0       	push   $0xc010e62c
c0108048:	68 96 02 00 00       	push   $0x296
c010804d:	68 f4 e6 10 c0       	push   $0xc010e6f4
c0108052:	e8 a6 83 ff ff       	call   c01003fd <__panic>
c0108057:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010805a:	2d 00 00 00 40       	sub    $0x40000000,%eax
c010805f:	83 c0 04             	add    $0x4,%eax
c0108062:	89 45 f0             	mov    %eax,-0x10(%ebp)
    assert(get_pte(boot_pgdir, PGSIZE, 0) == ptep);
c0108065:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c010806a:	83 ec 04             	sub    $0x4,%esp
c010806d:	6a 00                	push   $0x0
c010806f:	68 00 10 00 00       	push   $0x1000
c0108074:	50                   	push   %eax
c0108075:	e8 85 f6 ff ff       	call   c01076ff <get_pte>
c010807a:	83 c4 10             	add    $0x10,%esp
c010807d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0108080:	74 19                	je     c010809b <check_pgdir+0x1de>
c0108082:	68 ec e8 10 c0       	push   $0xc010e8ec
c0108087:	68 19 e7 10 c0       	push   $0xc010e719
c010808c:	68 97 02 00 00       	push   $0x297
c0108091:	68 f4 e6 10 c0       	push   $0xc010e6f4
c0108096:	e8 62 83 ff ff       	call   c01003fd <__panic>

    p2 = alloc_page();
c010809b:	83 ec 0c             	sub    $0xc,%esp
c010809e:	6a 01                	push   $0x1
c01080a0:	e8 ee ef ff ff       	call   c0107093 <alloc_pages>
c01080a5:	83 c4 10             	add    $0x10,%esp
c01080a8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(page_insert(boot_pgdir, p2, PGSIZE, PTE_U | PTE_W) == 0);
c01080ab:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c01080b0:	6a 06                	push   $0x6
c01080b2:	68 00 10 00 00       	push   $0x1000
c01080b7:	ff 75 e4             	pushl  -0x1c(%ebp)
c01080ba:	50                   	push   %eax
c01080bb:	e8 20 fc ff ff       	call   c0107ce0 <page_insert>
c01080c0:	83 c4 10             	add    $0x10,%esp
c01080c3:	85 c0                	test   %eax,%eax
c01080c5:	74 19                	je     c01080e0 <check_pgdir+0x223>
c01080c7:	68 14 e9 10 c0       	push   $0xc010e914
c01080cc:	68 19 e7 10 c0       	push   $0xc010e719
c01080d1:	68 9a 02 00 00       	push   $0x29a
c01080d6:	68 f4 e6 10 c0       	push   $0xc010e6f4
c01080db:	e8 1d 83 ff ff       	call   c01003fd <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c01080e0:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c01080e5:	83 ec 04             	sub    $0x4,%esp
c01080e8:	6a 00                	push   $0x0
c01080ea:	68 00 10 00 00       	push   $0x1000
c01080ef:	50                   	push   %eax
c01080f0:	e8 0a f6 ff ff       	call   c01076ff <get_pte>
c01080f5:	83 c4 10             	add    $0x10,%esp
c01080f8:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01080fb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01080ff:	75 19                	jne    c010811a <check_pgdir+0x25d>
c0108101:	68 4c e9 10 c0       	push   $0xc010e94c
c0108106:	68 19 e7 10 c0       	push   $0xc010e719
c010810b:	68 9b 02 00 00       	push   $0x29b
c0108110:	68 f4 e6 10 c0       	push   $0xc010e6f4
c0108115:	e8 e3 82 ff ff       	call   c01003fd <__panic>
    assert(*ptep & PTE_U);
c010811a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010811d:	8b 00                	mov    (%eax),%eax
c010811f:	83 e0 04             	and    $0x4,%eax
c0108122:	85 c0                	test   %eax,%eax
c0108124:	75 19                	jne    c010813f <check_pgdir+0x282>
c0108126:	68 7c e9 10 c0       	push   $0xc010e97c
c010812b:	68 19 e7 10 c0       	push   $0xc010e719
c0108130:	68 9c 02 00 00       	push   $0x29c
c0108135:	68 f4 e6 10 c0       	push   $0xc010e6f4
c010813a:	e8 be 82 ff ff       	call   c01003fd <__panic>
    assert(*ptep & PTE_W);
c010813f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108142:	8b 00                	mov    (%eax),%eax
c0108144:	83 e0 02             	and    $0x2,%eax
c0108147:	85 c0                	test   %eax,%eax
c0108149:	75 19                	jne    c0108164 <check_pgdir+0x2a7>
c010814b:	68 8a e9 10 c0       	push   $0xc010e98a
c0108150:	68 19 e7 10 c0       	push   $0xc010e719
c0108155:	68 9d 02 00 00       	push   $0x29d
c010815a:	68 f4 e6 10 c0       	push   $0xc010e6f4
c010815f:	e8 99 82 ff ff       	call   c01003fd <__panic>
    assert(boot_pgdir[0] & PTE_U);
c0108164:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c0108169:	8b 00                	mov    (%eax),%eax
c010816b:	83 e0 04             	and    $0x4,%eax
c010816e:	85 c0                	test   %eax,%eax
c0108170:	75 19                	jne    c010818b <check_pgdir+0x2ce>
c0108172:	68 98 e9 10 c0       	push   $0xc010e998
c0108177:	68 19 e7 10 c0       	push   $0xc010e719
c010817c:	68 9e 02 00 00       	push   $0x29e
c0108181:	68 f4 e6 10 c0       	push   $0xc010e6f4
c0108186:	e8 72 82 ff ff       	call   c01003fd <__panic>
    assert(page_ref(p2) == 1);
c010818b:	83 ec 0c             	sub    $0xc,%esp
c010818e:	ff 75 e4             	pushl  -0x1c(%ebp)
c0108191:	e8 ef ec ff ff       	call   c0106e85 <page_ref>
c0108196:	83 c4 10             	add    $0x10,%esp
c0108199:	83 f8 01             	cmp    $0x1,%eax
c010819c:	74 19                	je     c01081b7 <check_pgdir+0x2fa>
c010819e:	68 ae e9 10 c0       	push   $0xc010e9ae
c01081a3:	68 19 e7 10 c0       	push   $0xc010e719
c01081a8:	68 9f 02 00 00       	push   $0x29f
c01081ad:	68 f4 e6 10 c0       	push   $0xc010e6f4
c01081b2:	e8 46 82 ff ff       	call   c01003fd <__panic>

    assert(page_insert(boot_pgdir, p1, PGSIZE, 0) == 0);
c01081b7:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c01081bc:	6a 00                	push   $0x0
c01081be:	68 00 10 00 00       	push   $0x1000
c01081c3:	ff 75 f4             	pushl  -0xc(%ebp)
c01081c6:	50                   	push   %eax
c01081c7:	e8 14 fb ff ff       	call   c0107ce0 <page_insert>
c01081cc:	83 c4 10             	add    $0x10,%esp
c01081cf:	85 c0                	test   %eax,%eax
c01081d1:	74 19                	je     c01081ec <check_pgdir+0x32f>
c01081d3:	68 c0 e9 10 c0       	push   $0xc010e9c0
c01081d8:	68 19 e7 10 c0       	push   $0xc010e719
c01081dd:	68 a1 02 00 00       	push   $0x2a1
c01081e2:	68 f4 e6 10 c0       	push   $0xc010e6f4
c01081e7:	e8 11 82 ff ff       	call   c01003fd <__panic>
    assert(page_ref(p1) == 2);
c01081ec:	83 ec 0c             	sub    $0xc,%esp
c01081ef:	ff 75 f4             	pushl  -0xc(%ebp)
c01081f2:	e8 8e ec ff ff       	call   c0106e85 <page_ref>
c01081f7:	83 c4 10             	add    $0x10,%esp
c01081fa:	83 f8 02             	cmp    $0x2,%eax
c01081fd:	74 19                	je     c0108218 <check_pgdir+0x35b>
c01081ff:	68 ec e9 10 c0       	push   $0xc010e9ec
c0108204:	68 19 e7 10 c0       	push   $0xc010e719
c0108209:	68 a2 02 00 00       	push   $0x2a2
c010820e:	68 f4 e6 10 c0       	push   $0xc010e6f4
c0108213:	e8 e5 81 ff ff       	call   c01003fd <__panic>
    assert(page_ref(p2) == 0);
c0108218:	83 ec 0c             	sub    $0xc,%esp
c010821b:	ff 75 e4             	pushl  -0x1c(%ebp)
c010821e:	e8 62 ec ff ff       	call   c0106e85 <page_ref>
c0108223:	83 c4 10             	add    $0x10,%esp
c0108226:	85 c0                	test   %eax,%eax
c0108228:	74 19                	je     c0108243 <check_pgdir+0x386>
c010822a:	68 fe e9 10 c0       	push   $0xc010e9fe
c010822f:	68 19 e7 10 c0       	push   $0xc010e719
c0108234:	68 a3 02 00 00       	push   $0x2a3
c0108239:	68 f4 e6 10 c0       	push   $0xc010e6f4
c010823e:	e8 ba 81 ff ff       	call   c01003fd <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c0108243:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c0108248:	83 ec 04             	sub    $0x4,%esp
c010824b:	6a 00                	push   $0x0
c010824d:	68 00 10 00 00       	push   $0x1000
c0108252:	50                   	push   %eax
c0108253:	e8 a7 f4 ff ff       	call   c01076ff <get_pte>
c0108258:	83 c4 10             	add    $0x10,%esp
c010825b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010825e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0108262:	75 19                	jne    c010827d <check_pgdir+0x3c0>
c0108264:	68 4c e9 10 c0       	push   $0xc010e94c
c0108269:	68 19 e7 10 c0       	push   $0xc010e719
c010826e:	68 a4 02 00 00       	push   $0x2a4
c0108273:	68 f4 e6 10 c0       	push   $0xc010e6f4
c0108278:	e8 80 81 ff ff       	call   c01003fd <__panic>
    assert(pte2page(*ptep) == p1);
c010827d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108280:	8b 00                	mov    (%eax),%eax
c0108282:	83 ec 0c             	sub    $0xc,%esp
c0108285:	50                   	push   %eax
c0108286:	e8 a4 eb ff ff       	call   c0106e2f <pte2page>
c010828b:	83 c4 10             	add    $0x10,%esp
c010828e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0108291:	74 19                	je     c01082ac <check_pgdir+0x3ef>
c0108293:	68 c1 e8 10 c0       	push   $0xc010e8c1
c0108298:	68 19 e7 10 c0       	push   $0xc010e719
c010829d:	68 a5 02 00 00       	push   $0x2a5
c01082a2:	68 f4 e6 10 c0       	push   $0xc010e6f4
c01082a7:	e8 51 81 ff ff       	call   c01003fd <__panic>
    assert((*ptep & PTE_U) == 0);
c01082ac:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01082af:	8b 00                	mov    (%eax),%eax
c01082b1:	83 e0 04             	and    $0x4,%eax
c01082b4:	85 c0                	test   %eax,%eax
c01082b6:	74 19                	je     c01082d1 <check_pgdir+0x414>
c01082b8:	68 10 ea 10 c0       	push   $0xc010ea10
c01082bd:	68 19 e7 10 c0       	push   $0xc010e719
c01082c2:	68 a6 02 00 00       	push   $0x2a6
c01082c7:	68 f4 e6 10 c0       	push   $0xc010e6f4
c01082cc:	e8 2c 81 ff ff       	call   c01003fd <__panic>

    page_remove(boot_pgdir, 0x0);
c01082d1:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c01082d6:	83 ec 08             	sub    $0x8,%esp
c01082d9:	6a 00                	push   $0x0
c01082db:	50                   	push   %eax
c01082dc:	e8 c6 f9 ff ff       	call   c0107ca7 <page_remove>
c01082e1:	83 c4 10             	add    $0x10,%esp
    assert(page_ref(p1) == 1);
c01082e4:	83 ec 0c             	sub    $0xc,%esp
c01082e7:	ff 75 f4             	pushl  -0xc(%ebp)
c01082ea:	e8 96 eb ff ff       	call   c0106e85 <page_ref>
c01082ef:	83 c4 10             	add    $0x10,%esp
c01082f2:	83 f8 01             	cmp    $0x1,%eax
c01082f5:	74 19                	je     c0108310 <check_pgdir+0x453>
c01082f7:	68 d7 e8 10 c0       	push   $0xc010e8d7
c01082fc:	68 19 e7 10 c0       	push   $0xc010e719
c0108301:	68 a9 02 00 00       	push   $0x2a9
c0108306:	68 f4 e6 10 c0       	push   $0xc010e6f4
c010830b:	e8 ed 80 ff ff       	call   c01003fd <__panic>
    assert(page_ref(p2) == 0);
c0108310:	83 ec 0c             	sub    $0xc,%esp
c0108313:	ff 75 e4             	pushl  -0x1c(%ebp)
c0108316:	e8 6a eb ff ff       	call   c0106e85 <page_ref>
c010831b:	83 c4 10             	add    $0x10,%esp
c010831e:	85 c0                	test   %eax,%eax
c0108320:	74 19                	je     c010833b <check_pgdir+0x47e>
c0108322:	68 fe e9 10 c0       	push   $0xc010e9fe
c0108327:	68 19 e7 10 c0       	push   $0xc010e719
c010832c:	68 aa 02 00 00       	push   $0x2aa
c0108331:	68 f4 e6 10 c0       	push   $0xc010e6f4
c0108336:	e8 c2 80 ff ff       	call   c01003fd <__panic>

    page_remove(boot_pgdir, PGSIZE);
c010833b:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c0108340:	83 ec 08             	sub    $0x8,%esp
c0108343:	68 00 10 00 00       	push   $0x1000
c0108348:	50                   	push   %eax
c0108349:	e8 59 f9 ff ff       	call   c0107ca7 <page_remove>
c010834e:	83 c4 10             	add    $0x10,%esp
    assert(page_ref(p1) == 0);
c0108351:	83 ec 0c             	sub    $0xc,%esp
c0108354:	ff 75 f4             	pushl  -0xc(%ebp)
c0108357:	e8 29 eb ff ff       	call   c0106e85 <page_ref>
c010835c:	83 c4 10             	add    $0x10,%esp
c010835f:	85 c0                	test   %eax,%eax
c0108361:	74 19                	je     c010837c <check_pgdir+0x4bf>
c0108363:	68 25 ea 10 c0       	push   $0xc010ea25
c0108368:	68 19 e7 10 c0       	push   $0xc010e719
c010836d:	68 ad 02 00 00       	push   $0x2ad
c0108372:	68 f4 e6 10 c0       	push   $0xc010e6f4
c0108377:	e8 81 80 ff ff       	call   c01003fd <__panic>
    assert(page_ref(p2) == 0);
c010837c:	83 ec 0c             	sub    $0xc,%esp
c010837f:	ff 75 e4             	pushl  -0x1c(%ebp)
c0108382:	e8 fe ea ff ff       	call   c0106e85 <page_ref>
c0108387:	83 c4 10             	add    $0x10,%esp
c010838a:	85 c0                	test   %eax,%eax
c010838c:	74 19                	je     c01083a7 <check_pgdir+0x4ea>
c010838e:	68 fe e9 10 c0       	push   $0xc010e9fe
c0108393:	68 19 e7 10 c0       	push   $0xc010e719
c0108398:	68 ae 02 00 00       	push   $0x2ae
c010839d:	68 f4 e6 10 c0       	push   $0xc010e6f4
c01083a2:	e8 56 80 ff ff       	call   c01003fd <__panic>

    assert(page_ref(pde2page(boot_pgdir[0])) == 1);
c01083a7:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c01083ac:	8b 00                	mov    (%eax),%eax
c01083ae:	83 ec 0c             	sub    $0xc,%esp
c01083b1:	50                   	push   %eax
c01083b2:	e8 b2 ea ff ff       	call   c0106e69 <pde2page>
c01083b7:	83 c4 10             	add    $0x10,%esp
c01083ba:	83 ec 0c             	sub    $0xc,%esp
c01083bd:	50                   	push   %eax
c01083be:	e8 c2 ea ff ff       	call   c0106e85 <page_ref>
c01083c3:	83 c4 10             	add    $0x10,%esp
c01083c6:	83 f8 01             	cmp    $0x1,%eax
c01083c9:	74 19                	je     c01083e4 <check_pgdir+0x527>
c01083cb:	68 38 ea 10 c0       	push   $0xc010ea38
c01083d0:	68 19 e7 10 c0       	push   $0xc010e719
c01083d5:	68 b0 02 00 00       	push   $0x2b0
c01083da:	68 f4 e6 10 c0       	push   $0xc010e6f4
c01083df:	e8 19 80 ff ff       	call   c01003fd <__panic>
    free_page(pde2page(boot_pgdir[0]));
c01083e4:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c01083e9:	8b 00                	mov    (%eax),%eax
c01083eb:	83 ec 0c             	sub    $0xc,%esp
c01083ee:	50                   	push   %eax
c01083ef:	e8 75 ea ff ff       	call   c0106e69 <pde2page>
c01083f4:	83 c4 10             	add    $0x10,%esp
c01083f7:	83 ec 08             	sub    $0x8,%esp
c01083fa:	6a 01                	push   $0x1
c01083fc:	50                   	push   %eax
c01083fd:	e8 fd ec ff ff       	call   c01070ff <free_pages>
c0108402:	83 c4 10             	add    $0x10,%esp
    boot_pgdir[0] = 0;
c0108405:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c010840a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    cprintf("check_pgdir() succeeded!\n");
c0108410:	83 ec 0c             	sub    $0xc,%esp
c0108413:	68 5f ea 10 c0       	push   $0xc010ea5f
c0108418:	e8 7a 7e ff ff       	call   c0100297 <cprintf>
c010841d:	83 c4 10             	add    $0x10,%esp
}
c0108420:	90                   	nop
c0108421:	c9                   	leave  
c0108422:	c3                   	ret    

c0108423 <check_boot_pgdir>:

static void
check_boot_pgdir(void) {
c0108423:	55                   	push   %ebp
c0108424:	89 e5                	mov    %esp,%ebp
c0108426:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
c0108429:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0108430:	e9 a3 00 00 00       	jmp    c01084d8 <check_boot_pgdir+0xb5>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
c0108435:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108438:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010843b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010843e:	c1 e8 0c             	shr    $0xc,%eax
c0108441:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0108444:	a1 80 4f 1c c0       	mov    0xc01c4f80,%eax
c0108449:	39 45 ec             	cmp    %eax,-0x14(%ebp)
c010844c:	72 17                	jb     c0108465 <check_boot_pgdir+0x42>
c010844e:	ff 75 f0             	pushl  -0x10(%ebp)
c0108451:	68 2c e6 10 c0       	push   $0xc010e62c
c0108456:	68 bc 02 00 00       	push   $0x2bc
c010845b:	68 f4 e6 10 c0       	push   $0xc010e6f4
c0108460:	e8 98 7f ff ff       	call   c01003fd <__panic>
c0108465:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108468:	2d 00 00 00 40       	sub    $0x40000000,%eax
c010846d:	89 c2                	mov    %eax,%edx
c010846f:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c0108474:	83 ec 04             	sub    $0x4,%esp
c0108477:	6a 00                	push   $0x0
c0108479:	52                   	push   %edx
c010847a:	50                   	push   %eax
c010847b:	e8 7f f2 ff ff       	call   c01076ff <get_pte>
c0108480:	83 c4 10             	add    $0x10,%esp
c0108483:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0108486:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010848a:	75 19                	jne    c01084a5 <check_boot_pgdir+0x82>
c010848c:	68 7c ea 10 c0       	push   $0xc010ea7c
c0108491:	68 19 e7 10 c0       	push   $0xc010e719
c0108496:	68 bc 02 00 00       	push   $0x2bc
c010849b:	68 f4 e6 10 c0       	push   $0xc010e6f4
c01084a0:	e8 58 7f ff ff       	call   c01003fd <__panic>
        assert(PTE_ADDR(*ptep) == i);
c01084a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01084a8:	8b 00                	mov    (%eax),%eax
c01084aa:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01084af:	89 c2                	mov    %eax,%edx
c01084b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01084b4:	39 c2                	cmp    %eax,%edx
c01084b6:	74 19                	je     c01084d1 <check_boot_pgdir+0xae>
c01084b8:	68 b9 ea 10 c0       	push   $0xc010eab9
c01084bd:	68 19 e7 10 c0       	push   $0xc010e719
c01084c2:	68 bd 02 00 00       	push   $0x2bd
c01084c7:	68 f4 e6 10 c0       	push   $0xc010e6f4
c01084cc:	e8 2c 7f ff ff       	call   c01003fd <__panic>

static void
check_boot_pgdir(void) {
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
c01084d1:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
c01084d8:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01084db:	a1 80 4f 1c c0       	mov    0xc01c4f80,%eax
c01084e0:	39 c2                	cmp    %eax,%edx
c01084e2:	0f 82 4d ff ff ff    	jb     c0108435 <check_boot_pgdir+0x12>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
        assert(PTE_ADDR(*ptep) == i);
    }

    assert(PDE_ADDR(boot_pgdir[PDX(VPT)]) == PADDR(boot_pgdir));
c01084e8:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c01084ed:	05 ac 0f 00 00       	add    $0xfac,%eax
c01084f2:	8b 00                	mov    (%eax),%eax
c01084f4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01084f9:	89 c2                	mov    %eax,%edx
c01084fb:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c0108500:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0108503:	81 7d e4 ff ff ff bf 	cmpl   $0xbfffffff,-0x1c(%ebp)
c010850a:	77 17                	ja     c0108523 <check_boot_pgdir+0x100>
c010850c:	ff 75 e4             	pushl  -0x1c(%ebp)
c010850f:	68 d0 e6 10 c0       	push   $0xc010e6d0
c0108514:	68 c0 02 00 00       	push   $0x2c0
c0108519:	68 f4 e6 10 c0       	push   $0xc010e6f4
c010851e:	e8 da 7e ff ff       	call   c01003fd <__panic>
c0108523:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108526:	05 00 00 00 40       	add    $0x40000000,%eax
c010852b:	39 c2                	cmp    %eax,%edx
c010852d:	74 19                	je     c0108548 <check_boot_pgdir+0x125>
c010852f:	68 d0 ea 10 c0       	push   $0xc010ead0
c0108534:	68 19 e7 10 c0       	push   $0xc010e719
c0108539:	68 c0 02 00 00       	push   $0x2c0
c010853e:	68 f4 e6 10 c0       	push   $0xc010e6f4
c0108543:	e8 b5 7e ff ff       	call   c01003fd <__panic>

    assert(boot_pgdir[0] == 0);
c0108548:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c010854d:	8b 00                	mov    (%eax),%eax
c010854f:	85 c0                	test   %eax,%eax
c0108551:	74 19                	je     c010856c <check_boot_pgdir+0x149>
c0108553:	68 04 eb 10 c0       	push   $0xc010eb04
c0108558:	68 19 e7 10 c0       	push   $0xc010e719
c010855d:	68 c2 02 00 00       	push   $0x2c2
c0108562:	68 f4 e6 10 c0       	push   $0xc010e6f4
c0108567:	e8 91 7e ff ff       	call   c01003fd <__panic>

    struct Page *p;
    p = alloc_page();
c010856c:	83 ec 0c             	sub    $0xc,%esp
c010856f:	6a 01                	push   $0x1
c0108571:	e8 1d eb ff ff       	call   c0107093 <alloc_pages>
c0108576:	83 c4 10             	add    $0x10,%esp
c0108579:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(page_insert(boot_pgdir, p, 0x100, PTE_W) == 0);
c010857c:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c0108581:	6a 02                	push   $0x2
c0108583:	68 00 01 00 00       	push   $0x100
c0108588:	ff 75 e0             	pushl  -0x20(%ebp)
c010858b:	50                   	push   %eax
c010858c:	e8 4f f7 ff ff       	call   c0107ce0 <page_insert>
c0108591:	83 c4 10             	add    $0x10,%esp
c0108594:	85 c0                	test   %eax,%eax
c0108596:	74 19                	je     c01085b1 <check_boot_pgdir+0x18e>
c0108598:	68 18 eb 10 c0       	push   $0xc010eb18
c010859d:	68 19 e7 10 c0       	push   $0xc010e719
c01085a2:	68 c6 02 00 00       	push   $0x2c6
c01085a7:	68 f4 e6 10 c0       	push   $0xc010e6f4
c01085ac:	e8 4c 7e ff ff       	call   c01003fd <__panic>
    assert(page_ref(p) == 1);
c01085b1:	83 ec 0c             	sub    $0xc,%esp
c01085b4:	ff 75 e0             	pushl  -0x20(%ebp)
c01085b7:	e8 c9 e8 ff ff       	call   c0106e85 <page_ref>
c01085bc:	83 c4 10             	add    $0x10,%esp
c01085bf:	83 f8 01             	cmp    $0x1,%eax
c01085c2:	74 19                	je     c01085dd <check_boot_pgdir+0x1ba>
c01085c4:	68 46 eb 10 c0       	push   $0xc010eb46
c01085c9:	68 19 e7 10 c0       	push   $0xc010e719
c01085ce:	68 c7 02 00 00       	push   $0x2c7
c01085d3:	68 f4 e6 10 c0       	push   $0xc010e6f4
c01085d8:	e8 20 7e ff ff       	call   c01003fd <__panic>
    assert(page_insert(boot_pgdir, p, 0x100 + PGSIZE, PTE_W) == 0);
c01085dd:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c01085e2:	6a 02                	push   $0x2
c01085e4:	68 00 11 00 00       	push   $0x1100
c01085e9:	ff 75 e0             	pushl  -0x20(%ebp)
c01085ec:	50                   	push   %eax
c01085ed:	e8 ee f6 ff ff       	call   c0107ce0 <page_insert>
c01085f2:	83 c4 10             	add    $0x10,%esp
c01085f5:	85 c0                	test   %eax,%eax
c01085f7:	74 19                	je     c0108612 <check_boot_pgdir+0x1ef>
c01085f9:	68 58 eb 10 c0       	push   $0xc010eb58
c01085fe:	68 19 e7 10 c0       	push   $0xc010e719
c0108603:	68 c8 02 00 00       	push   $0x2c8
c0108608:	68 f4 e6 10 c0       	push   $0xc010e6f4
c010860d:	e8 eb 7d ff ff       	call   c01003fd <__panic>
    assert(page_ref(p) == 2);
c0108612:	83 ec 0c             	sub    $0xc,%esp
c0108615:	ff 75 e0             	pushl  -0x20(%ebp)
c0108618:	e8 68 e8 ff ff       	call   c0106e85 <page_ref>
c010861d:	83 c4 10             	add    $0x10,%esp
c0108620:	83 f8 02             	cmp    $0x2,%eax
c0108623:	74 19                	je     c010863e <check_boot_pgdir+0x21b>
c0108625:	68 8f eb 10 c0       	push   $0xc010eb8f
c010862a:	68 19 e7 10 c0       	push   $0xc010e719
c010862f:	68 c9 02 00 00       	push   $0x2c9
c0108634:	68 f4 e6 10 c0       	push   $0xc010e6f4
c0108639:	e8 bf 7d ff ff       	call   c01003fd <__panic>

    const char *str = "ucore: Hello world!!";
c010863e:	c7 45 dc a0 eb 10 c0 	movl   $0xc010eba0,-0x24(%ebp)
    strcpy((void *)0x100, str);
c0108645:	83 ec 08             	sub    $0x8,%esp
c0108648:	ff 75 dc             	pushl  -0x24(%ebp)
c010864b:	68 00 01 00 00       	push   $0x100
c0108650:	e8 67 3b 00 00       	call   c010c1bc <strcpy>
c0108655:	83 c4 10             	add    $0x10,%esp
    assert(strcmp((void *)0x100, (void *)(0x100 + PGSIZE)) == 0);
c0108658:	83 ec 08             	sub    $0x8,%esp
c010865b:	68 00 11 00 00       	push   $0x1100
c0108660:	68 00 01 00 00       	push   $0x100
c0108665:	e8 cc 3b 00 00       	call   c010c236 <strcmp>
c010866a:	83 c4 10             	add    $0x10,%esp
c010866d:	85 c0                	test   %eax,%eax
c010866f:	74 19                	je     c010868a <check_boot_pgdir+0x267>
c0108671:	68 b8 eb 10 c0       	push   $0xc010ebb8
c0108676:	68 19 e7 10 c0       	push   $0xc010e719
c010867b:	68 cd 02 00 00       	push   $0x2cd
c0108680:	68 f4 e6 10 c0       	push   $0xc010e6f4
c0108685:	e8 73 7d ff ff       	call   c01003fd <__panic>

    *(char *)(page2kva(p) + 0x100) = '\0';
c010868a:	83 ec 0c             	sub    $0xc,%esp
c010868d:	ff 75 e0             	pushl  -0x20(%ebp)
c0108690:	e8 55 e7 ff ff       	call   c0106dea <page2kva>
c0108695:	83 c4 10             	add    $0x10,%esp
c0108698:	05 00 01 00 00       	add    $0x100,%eax
c010869d:	c6 00 00             	movb   $0x0,(%eax)
    assert(strlen((const char *)0x100) == 0);
c01086a0:	83 ec 0c             	sub    $0xc,%esp
c01086a3:	68 00 01 00 00       	push   $0x100
c01086a8:	e8 b7 3a 00 00       	call   c010c164 <strlen>
c01086ad:	83 c4 10             	add    $0x10,%esp
c01086b0:	85 c0                	test   %eax,%eax
c01086b2:	74 19                	je     c01086cd <check_boot_pgdir+0x2aa>
c01086b4:	68 f0 eb 10 c0       	push   $0xc010ebf0
c01086b9:	68 19 e7 10 c0       	push   $0xc010e719
c01086be:	68 d0 02 00 00       	push   $0x2d0
c01086c3:	68 f4 e6 10 c0       	push   $0xc010e6f4
c01086c8:	e8 30 7d ff ff       	call   c01003fd <__panic>

    free_page(p);
c01086cd:	83 ec 08             	sub    $0x8,%esp
c01086d0:	6a 01                	push   $0x1
c01086d2:	ff 75 e0             	pushl  -0x20(%ebp)
c01086d5:	e8 25 ea ff ff       	call   c01070ff <free_pages>
c01086da:	83 c4 10             	add    $0x10,%esp
    free_page(pde2page(boot_pgdir[0]));
c01086dd:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c01086e2:	8b 00                	mov    (%eax),%eax
c01086e4:	83 ec 0c             	sub    $0xc,%esp
c01086e7:	50                   	push   %eax
c01086e8:	e8 7c e7 ff ff       	call   c0106e69 <pde2page>
c01086ed:	83 c4 10             	add    $0x10,%esp
c01086f0:	83 ec 08             	sub    $0x8,%esp
c01086f3:	6a 01                	push   $0x1
c01086f5:	50                   	push   %eax
c01086f6:	e8 04 ea ff ff       	call   c01070ff <free_pages>
c01086fb:	83 c4 10             	add    $0x10,%esp
    boot_pgdir[0] = 0;
c01086fe:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c0108703:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    cprintf("check_boot_pgdir() succeeded!\n");
c0108709:	83 ec 0c             	sub    $0xc,%esp
c010870c:	68 14 ec 10 c0       	push   $0xc010ec14
c0108711:	e8 81 7b ff ff       	call   c0100297 <cprintf>
c0108716:	83 c4 10             	add    $0x10,%esp
}
c0108719:	90                   	nop
c010871a:	c9                   	leave  
c010871b:	c3                   	ret    

c010871c <perm2str>:

//perm2str - use string 'u,r,w,-' to present the permission
static const char *
perm2str(int perm) {
c010871c:	55                   	push   %ebp
c010871d:	89 e5                	mov    %esp,%ebp
    static char str[4];
    str[0] = (perm & PTE_U) ? 'u' : '-';
c010871f:	8b 45 08             	mov    0x8(%ebp),%eax
c0108722:	83 e0 04             	and    $0x4,%eax
c0108725:	85 c0                	test   %eax,%eax
c0108727:	74 07                	je     c0108730 <perm2str+0x14>
c0108729:	b8 75 00 00 00       	mov    $0x75,%eax
c010872e:	eb 05                	jmp    c0108735 <perm2str+0x19>
c0108730:	b8 2d 00 00 00       	mov    $0x2d,%eax
c0108735:	a2 08 50 1c c0       	mov    %al,0xc01c5008
    str[1] = 'r';
c010873a:	c6 05 09 50 1c c0 72 	movb   $0x72,0xc01c5009
    str[2] = (perm & PTE_W) ? 'w' : '-';
c0108741:	8b 45 08             	mov    0x8(%ebp),%eax
c0108744:	83 e0 02             	and    $0x2,%eax
c0108747:	85 c0                	test   %eax,%eax
c0108749:	74 07                	je     c0108752 <perm2str+0x36>
c010874b:	b8 77 00 00 00       	mov    $0x77,%eax
c0108750:	eb 05                	jmp    c0108757 <perm2str+0x3b>
c0108752:	b8 2d 00 00 00       	mov    $0x2d,%eax
c0108757:	a2 0a 50 1c c0       	mov    %al,0xc01c500a
    str[3] = '\0';
c010875c:	c6 05 0b 50 1c c0 00 	movb   $0x0,0xc01c500b
    return str;
c0108763:	b8 08 50 1c c0       	mov    $0xc01c5008,%eax
}
c0108768:	5d                   	pop    %ebp
c0108769:	c3                   	ret    

c010876a <get_pgtable_items>:
//  table:       the beginning addr of table
//  left_store:  the pointer of the high side of table's next range
//  right_store: the pointer of the low side of table's next range
// return value: 0 - not a invalid item range, perm - a valid item range with perm permission 
static int
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
c010876a:	55                   	push   %ebp
c010876b:	89 e5                	mov    %esp,%ebp
c010876d:	83 ec 10             	sub    $0x10,%esp
    if (start >= right) {
c0108770:	8b 45 10             	mov    0x10(%ebp),%eax
c0108773:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0108776:	72 0e                	jb     c0108786 <get_pgtable_items+0x1c>
        return 0;
c0108778:	b8 00 00 00 00       	mov    $0x0,%eax
c010877d:	e9 9a 00 00 00       	jmp    c010881c <get_pgtable_items+0xb2>
    }
    while (start < right && !(table[start] & PTE_P)) {
        start ++;
c0108782:	83 45 10 01          	addl   $0x1,0x10(%ebp)
static int
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
    if (start >= right) {
        return 0;
    }
    while (start < right && !(table[start] & PTE_P)) {
c0108786:	8b 45 10             	mov    0x10(%ebp),%eax
c0108789:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010878c:	73 18                	jae    c01087a6 <get_pgtable_items+0x3c>
c010878e:	8b 45 10             	mov    0x10(%ebp),%eax
c0108791:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0108798:	8b 45 14             	mov    0x14(%ebp),%eax
c010879b:	01 d0                	add    %edx,%eax
c010879d:	8b 00                	mov    (%eax),%eax
c010879f:	83 e0 01             	and    $0x1,%eax
c01087a2:	85 c0                	test   %eax,%eax
c01087a4:	74 dc                	je     c0108782 <get_pgtable_items+0x18>
        start ++;
    }
    if (start < right) {
c01087a6:	8b 45 10             	mov    0x10(%ebp),%eax
c01087a9:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01087ac:	73 69                	jae    c0108817 <get_pgtable_items+0xad>
        if (left_store != NULL) {
c01087ae:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c01087b2:	74 08                	je     c01087bc <get_pgtable_items+0x52>
            *left_store = start;
c01087b4:	8b 45 18             	mov    0x18(%ebp),%eax
c01087b7:	8b 55 10             	mov    0x10(%ebp),%edx
c01087ba:	89 10                	mov    %edx,(%eax)
        }
        int perm = (table[start ++] & PTE_USER);
c01087bc:	8b 45 10             	mov    0x10(%ebp),%eax
c01087bf:	8d 50 01             	lea    0x1(%eax),%edx
c01087c2:	89 55 10             	mov    %edx,0x10(%ebp)
c01087c5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01087cc:	8b 45 14             	mov    0x14(%ebp),%eax
c01087cf:	01 d0                	add    %edx,%eax
c01087d1:	8b 00                	mov    (%eax),%eax
c01087d3:	83 e0 07             	and    $0x7,%eax
c01087d6:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while (start < right && (table[start] & PTE_USER) == perm) {
c01087d9:	eb 04                	jmp    c01087df <get_pgtable_items+0x75>
            start ++;
c01087db:	83 45 10 01          	addl   $0x1,0x10(%ebp)
    if (start < right) {
        if (left_store != NULL) {
            *left_store = start;
        }
        int perm = (table[start ++] & PTE_USER);
        while (start < right && (table[start] & PTE_USER) == perm) {
c01087df:	8b 45 10             	mov    0x10(%ebp),%eax
c01087e2:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01087e5:	73 1d                	jae    c0108804 <get_pgtable_items+0x9a>
c01087e7:	8b 45 10             	mov    0x10(%ebp),%eax
c01087ea:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01087f1:	8b 45 14             	mov    0x14(%ebp),%eax
c01087f4:	01 d0                	add    %edx,%eax
c01087f6:	8b 00                	mov    (%eax),%eax
c01087f8:	83 e0 07             	and    $0x7,%eax
c01087fb:	89 c2                	mov    %eax,%edx
c01087fd:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108800:	39 c2                	cmp    %eax,%edx
c0108802:	74 d7                	je     c01087db <get_pgtable_items+0x71>
            start ++;
        }
        if (right_store != NULL) {
c0108804:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c0108808:	74 08                	je     c0108812 <get_pgtable_items+0xa8>
            *right_store = start;
c010880a:	8b 45 1c             	mov    0x1c(%ebp),%eax
c010880d:	8b 55 10             	mov    0x10(%ebp),%edx
c0108810:	89 10                	mov    %edx,(%eax)
        }
        return perm;
c0108812:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108815:	eb 05                	jmp    c010881c <get_pgtable_items+0xb2>
    }
    return 0;
c0108817:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010881c:	c9                   	leave  
c010881d:	c3                   	ret    

c010881e <print_pgdir>:

//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
c010881e:	55                   	push   %ebp
c010881f:	89 e5                	mov    %esp,%ebp
c0108821:	57                   	push   %edi
c0108822:	56                   	push   %esi
c0108823:	53                   	push   %ebx
c0108824:	83 ec 2c             	sub    $0x2c,%esp
    cprintf("-------------------- BEGIN --------------------\n");
c0108827:	83 ec 0c             	sub    $0xc,%esp
c010882a:	68 34 ec 10 c0       	push   $0xc010ec34
c010882f:	e8 63 7a ff ff       	call   c0100297 <cprintf>
c0108834:	83 c4 10             	add    $0x10,%esp
    size_t left, right = 0, perm;
c0108837:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c010883e:	e9 e5 00 00 00       	jmp    c0108928 <print_pgdir+0x10a>
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c0108843:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108846:	83 ec 0c             	sub    $0xc,%esp
c0108849:	50                   	push   %eax
c010884a:	e8 cd fe ff ff       	call   c010871c <perm2str>
c010884f:	83 c4 10             	add    $0x10,%esp
c0108852:	89 c7                	mov    %eax,%edi
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
c0108854:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0108857:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010885a:	29 c2                	sub    %eax,%edx
c010885c:	89 d0                	mov    %edx,%eax
void
print_pgdir(void) {
    cprintf("-------------------- BEGIN --------------------\n");
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c010885e:	c1 e0 16             	shl    $0x16,%eax
c0108861:	89 c3                	mov    %eax,%ebx
c0108863:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108866:	c1 e0 16             	shl    $0x16,%eax
c0108869:	89 c1                	mov    %eax,%ecx
c010886b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010886e:	c1 e0 16             	shl    $0x16,%eax
c0108871:	89 c2                	mov    %eax,%edx
c0108873:	8b 75 dc             	mov    -0x24(%ebp),%esi
c0108876:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108879:	29 c6                	sub    %eax,%esi
c010887b:	89 f0                	mov    %esi,%eax
c010887d:	83 ec 08             	sub    $0x8,%esp
c0108880:	57                   	push   %edi
c0108881:	53                   	push   %ebx
c0108882:	51                   	push   %ecx
c0108883:	52                   	push   %edx
c0108884:	50                   	push   %eax
c0108885:	68 65 ec 10 c0       	push   $0xc010ec65
c010888a:	e8 08 7a ff ff       	call   c0100297 <cprintf>
c010888f:	83 c4 20             	add    $0x20,%esp
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
c0108892:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108895:	c1 e0 0a             	shl    $0xa,%eax
c0108898:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c010889b:	eb 4f                	jmp    c01088ec <print_pgdir+0xce>
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c010889d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01088a0:	83 ec 0c             	sub    $0xc,%esp
c01088a3:	50                   	push   %eax
c01088a4:	e8 73 fe ff ff       	call   c010871c <perm2str>
c01088a9:	83 c4 10             	add    $0x10,%esp
c01088ac:	89 c7                	mov    %eax,%edi
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
c01088ae:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01088b1:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01088b4:	29 c2                	sub    %eax,%edx
c01088b6:	89 d0                	mov    %edx,%eax
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c01088b8:	c1 e0 0c             	shl    $0xc,%eax
c01088bb:	89 c3                	mov    %eax,%ebx
c01088bd:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01088c0:	c1 e0 0c             	shl    $0xc,%eax
c01088c3:	89 c1                	mov    %eax,%ecx
c01088c5:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01088c8:	c1 e0 0c             	shl    $0xc,%eax
c01088cb:	89 c2                	mov    %eax,%edx
c01088cd:	8b 75 d4             	mov    -0x2c(%ebp),%esi
c01088d0:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01088d3:	29 c6                	sub    %eax,%esi
c01088d5:	89 f0                	mov    %esi,%eax
c01088d7:	83 ec 08             	sub    $0x8,%esp
c01088da:	57                   	push   %edi
c01088db:	53                   	push   %ebx
c01088dc:	51                   	push   %ecx
c01088dd:	52                   	push   %edx
c01088de:	50                   	push   %eax
c01088df:	68 84 ec 10 c0       	push   $0xc010ec84
c01088e4:	e8 ae 79 ff ff       	call   c0100297 <cprintf>
c01088e9:	83 c4 20             	add    $0x20,%esp
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c01088ec:	be 00 00 c0 fa       	mov    $0xfac00000,%esi
c01088f1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01088f4:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01088f7:	89 d3                	mov    %edx,%ebx
c01088f9:	c1 e3 0a             	shl    $0xa,%ebx
c01088fc:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01088ff:	89 d1                	mov    %edx,%ecx
c0108901:	c1 e1 0a             	shl    $0xa,%ecx
c0108904:	83 ec 08             	sub    $0x8,%esp
c0108907:	8d 55 d4             	lea    -0x2c(%ebp),%edx
c010890a:	52                   	push   %edx
c010890b:	8d 55 d8             	lea    -0x28(%ebp),%edx
c010890e:	52                   	push   %edx
c010890f:	56                   	push   %esi
c0108910:	50                   	push   %eax
c0108911:	53                   	push   %ebx
c0108912:	51                   	push   %ecx
c0108913:	e8 52 fe ff ff       	call   c010876a <get_pgtable_items>
c0108918:	83 c4 20             	add    $0x20,%esp
c010891b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010891e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0108922:	0f 85 75 ff ff ff    	jne    c010889d <print_pgdir+0x7f>
//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
    cprintf("-------------------- BEGIN --------------------\n");
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c0108928:	b9 00 b0 fe fa       	mov    $0xfafeb000,%ecx
c010892d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108930:	83 ec 08             	sub    $0x8,%esp
c0108933:	8d 55 dc             	lea    -0x24(%ebp),%edx
c0108936:	52                   	push   %edx
c0108937:	8d 55 e0             	lea    -0x20(%ebp),%edx
c010893a:	52                   	push   %edx
c010893b:	51                   	push   %ecx
c010893c:	50                   	push   %eax
c010893d:	68 00 04 00 00       	push   $0x400
c0108942:	6a 00                	push   $0x0
c0108944:	e8 21 fe ff ff       	call   c010876a <get_pgtable_items>
c0108949:	83 c4 20             	add    $0x20,%esp
c010894c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010894f:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0108953:	0f 85 ea fe ff ff    	jne    c0108843 <print_pgdir+0x25>
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
        }
    }
    cprintf("--------------------- END ---------------------\n");
c0108959:	83 ec 0c             	sub    $0xc,%esp
c010895c:	68 a8 ec 10 c0       	push   $0xc010eca8
c0108961:	e8 31 79 ff ff       	call   c0100297 <cprintf>
c0108966:	83 c4 10             	add    $0x10,%esp
}
c0108969:	90                   	nop
c010896a:	8d 65 f4             	lea    -0xc(%ebp),%esp
c010896d:	5b                   	pop    %ebx
c010896e:	5e                   	pop    %esi
c010896f:	5f                   	pop    %edi
c0108970:	5d                   	pop    %ebp
c0108971:	c3                   	ret    

c0108972 <phi_test_sema>:
semaphore_t s[N]; /* 每个哲学家一个信号量 */

struct proc_struct *philosopher_proc_sema[N];

void phi_test_sema(i) /* i：哲学家号码从0到N-1 */
{ 
c0108972:	55                   	push   %ebp
c0108973:	89 e5                	mov    %esp,%ebp
c0108975:	83 ec 08             	sub    $0x8,%esp
    if(state_sema[i]==HUNGRY&&state_sema[LEFT]!=EATING
c0108978:	8b 45 08             	mov    0x8(%ebp),%eax
c010897b:	8b 04 85 00 72 1c c0 	mov    -0x3fe38e00(,%eax,4),%eax
c0108982:	83 f8 01             	cmp    $0x1,%eax
c0108985:	0f 85 8d 00 00 00    	jne    c0108a18 <phi_test_sema+0xa6>
c010898b:	8b 45 08             	mov    0x8(%ebp),%eax
c010898e:	8d 48 04             	lea    0x4(%eax),%ecx
c0108991:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0108996:	89 c8                	mov    %ecx,%eax
c0108998:	f7 ea                	imul   %edx
c010899a:	d1 fa                	sar    %edx
c010899c:	89 c8                	mov    %ecx,%eax
c010899e:	c1 f8 1f             	sar    $0x1f,%eax
c01089a1:	29 c2                	sub    %eax,%edx
c01089a3:	89 d0                	mov    %edx,%eax
c01089a5:	89 c2                	mov    %eax,%edx
c01089a7:	c1 e2 02             	shl    $0x2,%edx
c01089aa:	01 c2                	add    %eax,%edx
c01089ac:	89 c8                	mov    %ecx,%eax
c01089ae:	29 d0                	sub    %edx,%eax
c01089b0:	8b 04 85 00 72 1c c0 	mov    -0x3fe38e00(,%eax,4),%eax
c01089b7:	83 f8 02             	cmp    $0x2,%eax
c01089ba:	74 5c                	je     c0108a18 <phi_test_sema+0xa6>
            &&state_sema[RIGHT]!=EATING)
c01089bc:	8b 45 08             	mov    0x8(%ebp),%eax
c01089bf:	8d 48 01             	lea    0x1(%eax),%ecx
c01089c2:	ba 67 66 66 66       	mov    $0x66666667,%edx
c01089c7:	89 c8                	mov    %ecx,%eax
c01089c9:	f7 ea                	imul   %edx
c01089cb:	d1 fa                	sar    %edx
c01089cd:	89 c8                	mov    %ecx,%eax
c01089cf:	c1 f8 1f             	sar    $0x1f,%eax
c01089d2:	29 c2                	sub    %eax,%edx
c01089d4:	89 d0                	mov    %edx,%eax
c01089d6:	89 c2                	mov    %eax,%edx
c01089d8:	c1 e2 02             	shl    $0x2,%edx
c01089db:	01 c2                	add    %eax,%edx
c01089dd:	89 c8                	mov    %ecx,%eax
c01089df:	29 d0                	sub    %edx,%eax
c01089e1:	8b 04 85 00 72 1c c0 	mov    -0x3fe38e00(,%eax,4),%eax
c01089e8:	83 f8 02             	cmp    $0x2,%eax
c01089eb:	74 2b                	je     c0108a18 <phi_test_sema+0xa6>
    {
        state_sema[i]=EATING;
c01089ed:	8b 45 08             	mov    0x8(%ebp),%eax
c01089f0:	c7 04 85 00 72 1c c0 	movl   $0x2,-0x3fe38e00(,%eax,4)
c01089f7:	02 00 00 00 
        up(&s[i]);
c01089fb:	8b 55 08             	mov    0x8(%ebp),%edx
c01089fe:	89 d0                	mov    %edx,%eax
c0108a00:	01 c0                	add    %eax,%eax
c0108a02:	01 d0                	add    %edx,%eax
c0108a04:	c1 e0 02             	shl    $0x2,%eax
c0108a07:	05 a0 72 1c c0       	add    $0xc01c72a0,%eax
c0108a0c:	83 ec 0c             	sub    $0xc,%esp
c0108a0f:	50                   	push   %eax
c0108a10:	e8 e3 0b 00 00       	call   c01095f8 <up>
c0108a15:	83 c4 10             	add    $0x10,%esp
    }
}
c0108a18:	90                   	nop
c0108a19:	c9                   	leave  
c0108a1a:	c3                   	ret    

c0108a1b <phi_take_forks_sema>:

void phi_take_forks_sema(int i) /* i：哲学家号码从0到N-1 */
{ 
c0108a1b:	55                   	push   %ebp
c0108a1c:	89 e5                	mov    %esp,%ebp
c0108a1e:	83 ec 08             	sub    $0x8,%esp
        down(&mutex); /* 进入临界区 */
c0108a21:	83 ec 0c             	sub    $0xc,%esp
c0108a24:	68 28 72 1c c0       	push   $0xc01c7228
c0108a29:	e8 e6 0b 00 00       	call   c0109614 <down>
c0108a2e:	83 c4 10             	add    $0x10,%esp
        state_sema[i]=HUNGRY; /* 记录下哲学家i饥饿的事实 */
c0108a31:	8b 45 08             	mov    0x8(%ebp),%eax
c0108a34:	c7 04 85 00 72 1c c0 	movl   $0x1,-0x3fe38e00(,%eax,4)
c0108a3b:	01 00 00 00 
        phi_test_sema(i); /* 试图得到两只叉子 */
c0108a3f:	83 ec 0c             	sub    $0xc,%esp
c0108a42:	ff 75 08             	pushl  0x8(%ebp)
c0108a45:	e8 28 ff ff ff       	call   c0108972 <phi_test_sema>
c0108a4a:	83 c4 10             	add    $0x10,%esp
        up(&mutex); /* 离开临界区 */
c0108a4d:	83 ec 0c             	sub    $0xc,%esp
c0108a50:	68 28 72 1c c0       	push   $0xc01c7228
c0108a55:	e8 9e 0b 00 00       	call   c01095f8 <up>
c0108a5a:	83 c4 10             	add    $0x10,%esp
        down(&s[i]); /* 如果得不到叉子就阻塞 */
c0108a5d:	8b 55 08             	mov    0x8(%ebp),%edx
c0108a60:	89 d0                	mov    %edx,%eax
c0108a62:	01 c0                	add    %eax,%eax
c0108a64:	01 d0                	add    %edx,%eax
c0108a66:	c1 e0 02             	shl    $0x2,%eax
c0108a69:	05 a0 72 1c c0       	add    $0xc01c72a0,%eax
c0108a6e:	83 ec 0c             	sub    $0xc,%esp
c0108a71:	50                   	push   %eax
c0108a72:	e8 9d 0b 00 00       	call   c0109614 <down>
c0108a77:	83 c4 10             	add    $0x10,%esp
}
c0108a7a:	90                   	nop
c0108a7b:	c9                   	leave  
c0108a7c:	c3                   	ret    

c0108a7d <phi_put_forks_sema>:

void phi_put_forks_sema(int i) /* i：哲学家号码从0到N-1 */
{ 
c0108a7d:	55                   	push   %ebp
c0108a7e:	89 e5                	mov    %esp,%ebp
c0108a80:	83 ec 08             	sub    $0x8,%esp
        down(&mutex); /* 进入临界区 */
c0108a83:	83 ec 0c             	sub    $0xc,%esp
c0108a86:	68 28 72 1c c0       	push   $0xc01c7228
c0108a8b:	e8 84 0b 00 00       	call   c0109614 <down>
c0108a90:	83 c4 10             	add    $0x10,%esp
        state_sema[i]=THINKING; /* 哲学家进餐结束 */
c0108a93:	8b 45 08             	mov    0x8(%ebp),%eax
c0108a96:	c7 04 85 00 72 1c c0 	movl   $0x0,-0x3fe38e00(,%eax,4)
c0108a9d:	00 00 00 00 
        phi_test_sema(LEFT); /* 看一下左邻居现在是否能进餐 */
c0108aa1:	8b 45 08             	mov    0x8(%ebp),%eax
c0108aa4:	8d 48 04             	lea    0x4(%eax),%ecx
c0108aa7:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0108aac:	89 c8                	mov    %ecx,%eax
c0108aae:	f7 ea                	imul   %edx
c0108ab0:	d1 fa                	sar    %edx
c0108ab2:	89 c8                	mov    %ecx,%eax
c0108ab4:	c1 f8 1f             	sar    $0x1f,%eax
c0108ab7:	29 c2                	sub    %eax,%edx
c0108ab9:	89 d0                	mov    %edx,%eax
c0108abb:	89 c2                	mov    %eax,%edx
c0108abd:	c1 e2 02             	shl    $0x2,%edx
c0108ac0:	01 c2                	add    %eax,%edx
c0108ac2:	89 c8                	mov    %ecx,%eax
c0108ac4:	29 d0                	sub    %edx,%eax
c0108ac6:	83 ec 0c             	sub    $0xc,%esp
c0108ac9:	50                   	push   %eax
c0108aca:	e8 a3 fe ff ff       	call   c0108972 <phi_test_sema>
c0108acf:	83 c4 10             	add    $0x10,%esp
        phi_test_sema(RIGHT); /* 看一下右邻居现在是否能进餐 */
c0108ad2:	8b 45 08             	mov    0x8(%ebp),%eax
c0108ad5:	8d 48 01             	lea    0x1(%eax),%ecx
c0108ad8:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0108add:	89 c8                	mov    %ecx,%eax
c0108adf:	f7 ea                	imul   %edx
c0108ae1:	d1 fa                	sar    %edx
c0108ae3:	89 c8                	mov    %ecx,%eax
c0108ae5:	c1 f8 1f             	sar    $0x1f,%eax
c0108ae8:	29 c2                	sub    %eax,%edx
c0108aea:	89 d0                	mov    %edx,%eax
c0108aec:	89 c2                	mov    %eax,%edx
c0108aee:	c1 e2 02             	shl    $0x2,%edx
c0108af1:	01 c2                	add    %eax,%edx
c0108af3:	89 c8                	mov    %ecx,%eax
c0108af5:	29 d0                	sub    %edx,%eax
c0108af7:	83 ec 0c             	sub    $0xc,%esp
c0108afa:	50                   	push   %eax
c0108afb:	e8 72 fe ff ff       	call   c0108972 <phi_test_sema>
c0108b00:	83 c4 10             	add    $0x10,%esp
        up(&mutex); /* 离开临界区 */
c0108b03:	83 ec 0c             	sub    $0xc,%esp
c0108b06:	68 28 72 1c c0       	push   $0xc01c7228
c0108b0b:	e8 e8 0a 00 00       	call   c01095f8 <up>
c0108b10:	83 c4 10             	add    $0x10,%esp
}
c0108b13:	90                   	nop
c0108b14:	c9                   	leave  
c0108b15:	c3                   	ret    

c0108b16 <philosopher_using_semaphore>:

int philosopher_using_semaphore(void * arg) /* i：哲学家号码，从0到N-1 */
{
c0108b16:	55                   	push   %ebp
c0108b17:	89 e5                	mov    %esp,%ebp
c0108b19:	83 ec 18             	sub    $0x18,%esp
    int i, iter=0;
c0108b1c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    i=(int)arg;
c0108b23:	8b 45 08             	mov    0x8(%ebp),%eax
c0108b26:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cprintf("I am No.%d philosopher_sema\n",i);
c0108b29:	83 ec 08             	sub    $0x8,%esp
c0108b2c:	ff 75 f0             	pushl  -0x10(%ebp)
c0108b2f:	68 dc ec 10 c0       	push   $0xc010ecdc
c0108b34:	e8 5e 77 ff ff       	call   c0100297 <cprintf>
c0108b39:	83 c4 10             	add    $0x10,%esp
    while(iter++<TIMES)
c0108b3c:	eb 62                	jmp    c0108ba0 <philosopher_using_semaphore+0x8a>
    { /* 无限循环 */
        cprintf("Iter %d, No.%d philosopher_sema is thinking\n",iter,i); /* 哲学家正在思考 */
c0108b3e:	83 ec 04             	sub    $0x4,%esp
c0108b41:	ff 75 f0             	pushl  -0x10(%ebp)
c0108b44:	ff 75 f4             	pushl  -0xc(%ebp)
c0108b47:	68 fc ec 10 c0       	push   $0xc010ecfc
c0108b4c:	e8 46 77 ff ff       	call   c0100297 <cprintf>
c0108b51:	83 c4 10             	add    $0x10,%esp
        do_sleep(SLEEP_TIME);
c0108b54:	83 ec 0c             	sub    $0xc,%esp
c0108b57:	6a 0a                	push   $0xa
c0108b59:	e8 6f 2a 00 00       	call   c010b5cd <do_sleep>
c0108b5e:	83 c4 10             	add    $0x10,%esp
        phi_take_forks_sema(i); 
c0108b61:	83 ec 0c             	sub    $0xc,%esp
c0108b64:	ff 75 f0             	pushl  -0x10(%ebp)
c0108b67:	e8 af fe ff ff       	call   c0108a1b <phi_take_forks_sema>
c0108b6c:	83 c4 10             	add    $0x10,%esp
        /* 需要两只叉子，或者阻塞 */
        cprintf("Iter %d, No.%d philosopher_sema is eating\n",iter,i); /* 进餐 */
c0108b6f:	83 ec 04             	sub    $0x4,%esp
c0108b72:	ff 75 f0             	pushl  -0x10(%ebp)
c0108b75:	ff 75 f4             	pushl  -0xc(%ebp)
c0108b78:	68 2c ed 10 c0       	push   $0xc010ed2c
c0108b7d:	e8 15 77 ff ff       	call   c0100297 <cprintf>
c0108b82:	83 c4 10             	add    $0x10,%esp
        do_sleep(SLEEP_TIME);
c0108b85:	83 ec 0c             	sub    $0xc,%esp
c0108b88:	6a 0a                	push   $0xa
c0108b8a:	e8 3e 2a 00 00       	call   c010b5cd <do_sleep>
c0108b8f:	83 c4 10             	add    $0x10,%esp
        phi_put_forks_sema(i); 
c0108b92:	83 ec 0c             	sub    $0xc,%esp
c0108b95:	ff 75 f0             	pushl  -0x10(%ebp)
c0108b98:	e8 e0 fe ff ff       	call   c0108a7d <phi_put_forks_sema>
c0108b9d:	83 c4 10             	add    $0x10,%esp
int philosopher_using_semaphore(void * arg) /* i：哲学家号码，从0到N-1 */
{
    int i, iter=0;
    i=(int)arg;
    cprintf("I am No.%d philosopher_sema\n",i);
    while(iter++<TIMES)
c0108ba0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108ba3:	8d 50 01             	lea    0x1(%eax),%edx
c0108ba6:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0108ba9:	83 f8 03             	cmp    $0x3,%eax
c0108bac:	7e 90                	jle    c0108b3e <philosopher_using_semaphore+0x28>
        cprintf("Iter %d, No.%d philosopher_sema is eating\n",iter,i); /* 进餐 */
        do_sleep(SLEEP_TIME);
        phi_put_forks_sema(i); 
        /* 把两把叉子同时放回桌子 */
    }
    cprintf("No.%d philosopher_sema quit\n",i);
c0108bae:	83 ec 08             	sub    $0x8,%esp
c0108bb1:	ff 75 f0             	pushl  -0x10(%ebp)
c0108bb4:	68 57 ed 10 c0       	push   $0xc010ed57
c0108bb9:	e8 d9 76 ff ff       	call   c0100297 <cprintf>
c0108bbe:	83 c4 10             	add    $0x10,%esp
    return 0;    
c0108bc1:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0108bc6:	c9                   	leave  
c0108bc7:	c3                   	ret    

c0108bc8 <phi_test_condvar>:

struct proc_struct *philosopher_proc_condvar[N]; // N philosopher
int state_condvar[N];                            // the philosopher's state: EATING, HUNGARY, THINKING  
monitor_t mt, *mtp=&mt;                          // monitor

void phi_test_condvar (i) { 
c0108bc8:	55                   	push   %ebp
c0108bc9:	89 e5                	mov    %esp,%ebp
c0108bcb:	83 ec 08             	sub    $0x8,%esp
    if(state_condvar[i]==HUNGRY&&state_condvar[LEFT]!=EATING
c0108bce:	8b 45 08             	mov    0x8(%ebp),%eax
c0108bd1:	8b 04 85 60 72 1c c0 	mov    -0x3fe38da0(,%eax,4),%eax
c0108bd8:	83 f8 01             	cmp    $0x1,%eax
c0108bdb:	0f 85 bd 00 00 00    	jne    c0108c9e <phi_test_condvar+0xd6>
c0108be1:	8b 45 08             	mov    0x8(%ebp),%eax
c0108be4:	8d 48 04             	lea    0x4(%eax),%ecx
c0108be7:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0108bec:	89 c8                	mov    %ecx,%eax
c0108bee:	f7 ea                	imul   %edx
c0108bf0:	d1 fa                	sar    %edx
c0108bf2:	89 c8                	mov    %ecx,%eax
c0108bf4:	c1 f8 1f             	sar    $0x1f,%eax
c0108bf7:	29 c2                	sub    %eax,%edx
c0108bf9:	89 d0                	mov    %edx,%eax
c0108bfb:	89 c2                	mov    %eax,%edx
c0108bfd:	c1 e2 02             	shl    $0x2,%edx
c0108c00:	01 c2                	add    %eax,%edx
c0108c02:	89 c8                	mov    %ecx,%eax
c0108c04:	29 d0                	sub    %edx,%eax
c0108c06:	8b 04 85 60 72 1c c0 	mov    -0x3fe38da0(,%eax,4),%eax
c0108c0d:	83 f8 02             	cmp    $0x2,%eax
c0108c10:	0f 84 88 00 00 00    	je     c0108c9e <phi_test_condvar+0xd6>
            &&state_condvar[RIGHT]!=EATING) {
c0108c16:	8b 45 08             	mov    0x8(%ebp),%eax
c0108c19:	8d 48 01             	lea    0x1(%eax),%ecx
c0108c1c:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0108c21:	89 c8                	mov    %ecx,%eax
c0108c23:	f7 ea                	imul   %edx
c0108c25:	d1 fa                	sar    %edx
c0108c27:	89 c8                	mov    %ecx,%eax
c0108c29:	c1 f8 1f             	sar    $0x1f,%eax
c0108c2c:	29 c2                	sub    %eax,%edx
c0108c2e:	89 d0                	mov    %edx,%eax
c0108c30:	89 c2                	mov    %eax,%edx
c0108c32:	c1 e2 02             	shl    $0x2,%edx
c0108c35:	01 c2                	add    %eax,%edx
c0108c37:	89 c8                	mov    %ecx,%eax
c0108c39:	29 d0                	sub    %edx,%eax
c0108c3b:	8b 04 85 60 72 1c c0 	mov    -0x3fe38da0(,%eax,4),%eax
c0108c42:	83 f8 02             	cmp    $0x2,%eax
c0108c45:	74 57                	je     c0108c9e <phi_test_condvar+0xd6>
        cprintf("phi_test_condvar: state_condvar[%d] will eating\n",i);
c0108c47:	83 ec 08             	sub    $0x8,%esp
c0108c4a:	ff 75 08             	pushl  0x8(%ebp)
c0108c4d:	68 74 ed 10 c0       	push   $0xc010ed74
c0108c52:	e8 40 76 ff ff       	call   c0100297 <cprintf>
c0108c57:	83 c4 10             	add    $0x10,%esp
        state_condvar[i] = EATING ;
c0108c5a:	8b 45 08             	mov    0x8(%ebp),%eax
c0108c5d:	c7 04 85 60 72 1c c0 	movl   $0x2,-0x3fe38da0(,%eax,4)
c0108c64:	02 00 00 00 
        cprintf("phi_test_condvar: signal self_cv[%d] \n",i);
c0108c68:	83 ec 08             	sub    $0x8,%esp
c0108c6b:	ff 75 08             	pushl  0x8(%ebp)
c0108c6e:	68 a8 ed 10 c0       	push   $0xc010eda8
c0108c73:	e8 1f 76 ff ff       	call   c0100297 <cprintf>
c0108c78:	83 c4 10             	add    $0x10,%esp
        cond_signal(&mtp->cv[i]) ;
c0108c7b:	a1 78 1a 13 c0       	mov    0xc0131a78,%eax
c0108c80:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0108c83:	8b 55 08             	mov    0x8(%ebp),%edx
c0108c86:	89 d0                	mov    %edx,%eax
c0108c88:	c1 e0 02             	shl    $0x2,%eax
c0108c8b:	01 d0                	add    %edx,%eax
c0108c8d:	c1 e0 02             	shl    $0x2,%eax
c0108c90:	01 c8                	add    %ecx,%eax
c0108c92:	83 ec 0c             	sub    $0xc,%esp
c0108c95:	50                   	push   %eax
c0108c96:	e8 08 0b 00 00       	call   c01097a3 <cond_signal>
c0108c9b:	83 c4 10             	add    $0x10,%esp
    }
}
c0108c9e:	90                   	nop
c0108c9f:	c9                   	leave  
c0108ca0:	c3                   	ret    

c0108ca1 <phi_take_forks_condvar>:


void phi_take_forks_condvar(int i) {
c0108ca1:	55                   	push   %ebp
c0108ca2:	89 e5                	mov    %esp,%ebp
c0108ca4:	83 ec 08             	sub    $0x8,%esp
    down(&(mtp->mutex));
c0108ca7:	a1 78 1a 13 c0       	mov    0xc0131a78,%eax
c0108cac:	83 ec 0c             	sub    $0xc,%esp
c0108caf:	50                   	push   %eax
c0108cb0:	e8 5f 09 00 00       	call   c0109614 <down>
c0108cb5:	83 c4 10             	add    $0x10,%esp
//--------into routine in monitor--------------
     // LAB7 EXERCISE1: 2015010062
     // I am hungry
     // try to get fork
    state_condvar[i] = HUNGRY; /* 记录下哲学家i饥饿的事实 */
c0108cb8:	8b 45 08             	mov    0x8(%ebp),%eax
c0108cbb:	c7 04 85 60 72 1c c0 	movl   $0x1,-0x3fe38da0(,%eax,4)
c0108cc2:	01 00 00 00 
    phi_test_condvar(i); /* 试图得到两只叉子 */
c0108cc6:	83 ec 0c             	sub    $0xc,%esp
c0108cc9:	ff 75 08             	pushl  0x8(%ebp)
c0108ccc:	e8 f7 fe ff ff       	call   c0108bc8 <phi_test_condvar>
c0108cd1:	83 c4 10             	add    $0x10,%esp

    if (state_condvar[i] != EATING) {
c0108cd4:	8b 45 08             	mov    0x8(%ebp),%eax
c0108cd7:	8b 04 85 60 72 1c c0 	mov    -0x3fe38da0(,%eax,4),%eax
c0108cde:	83 f8 02             	cmp    $0x2,%eax
c0108ce1:	74 23                	je     c0108d06 <phi_take_forks_condvar+0x65>
        cond_wait(&(mtp->cv[i]));
c0108ce3:	a1 78 1a 13 c0       	mov    0xc0131a78,%eax
c0108ce8:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0108ceb:	8b 55 08             	mov    0x8(%ebp),%edx
c0108cee:	89 d0                	mov    %edx,%eax
c0108cf0:	c1 e0 02             	shl    $0x2,%eax
c0108cf3:	01 d0                	add    %edx,%eax
c0108cf5:	c1 e0 02             	shl    $0x2,%eax
c0108cf8:	01 c8                	add    %ecx,%eax
c0108cfa:	83 ec 0c             	sub    $0xc,%esp
c0108cfd:	50                   	push   %eax
c0108cfe:	e8 3d 0b 00 00       	call   c0109840 <cond_wait>
c0108d03:	83 c4 10             	add    $0x10,%esp
    }

//--------leave routine in monitor--------------
    if(mtp->next_count>0)
c0108d06:	a1 78 1a 13 c0       	mov    0xc0131a78,%eax
c0108d0b:	8b 40 18             	mov    0x18(%eax),%eax
c0108d0e:	85 c0                	test   %eax,%eax
c0108d10:	7e 16                	jle    c0108d28 <phi_take_forks_condvar+0x87>
        up(&(mtp->next));
c0108d12:	a1 78 1a 13 c0       	mov    0xc0131a78,%eax
c0108d17:	83 c0 0c             	add    $0xc,%eax
c0108d1a:	83 ec 0c             	sub    $0xc,%esp
c0108d1d:	50                   	push   %eax
c0108d1e:	e8 d5 08 00 00       	call   c01095f8 <up>
c0108d23:	83 c4 10             	add    $0x10,%esp
    else
        up(&(mtp->mutex));
}
c0108d26:	eb 11                	jmp    c0108d39 <phi_take_forks_condvar+0x98>

//--------leave routine in monitor--------------
    if(mtp->next_count>0)
        up(&(mtp->next));
    else
        up(&(mtp->mutex));
c0108d28:	a1 78 1a 13 c0       	mov    0xc0131a78,%eax
c0108d2d:	83 ec 0c             	sub    $0xc,%esp
c0108d30:	50                   	push   %eax
c0108d31:	e8 c2 08 00 00       	call   c01095f8 <up>
c0108d36:	83 c4 10             	add    $0x10,%esp
}
c0108d39:	90                   	nop
c0108d3a:	c9                   	leave  
c0108d3b:	c3                   	ret    

c0108d3c <phi_put_forks_condvar>:

void phi_put_forks_condvar(int i) {
c0108d3c:	55                   	push   %ebp
c0108d3d:	89 e5                	mov    %esp,%ebp
c0108d3f:	83 ec 08             	sub    $0x8,%esp
     down(&(mtp->mutex));
c0108d42:	a1 78 1a 13 c0       	mov    0xc0131a78,%eax
c0108d47:	83 ec 0c             	sub    $0xc,%esp
c0108d4a:	50                   	push   %eax
c0108d4b:	e8 c4 08 00 00       	call   c0109614 <down>
c0108d50:	83 c4 10             	add    $0x10,%esp

//--------into routine in monitor--------------
     // LAB7 EXERCISE1: 2015010062
     // I ate over
     // test left and right neighbors
    state_condvar[i] = THINKING; /* 哲学家进餐结束 */
c0108d53:	8b 45 08             	mov    0x8(%ebp),%eax
c0108d56:	c7 04 85 60 72 1c c0 	movl   $0x0,-0x3fe38da0(,%eax,4)
c0108d5d:	00 00 00 00 
    phi_test_condvar(LEFT); /* 看一下左邻居现在是否能进餐 */
c0108d61:	8b 45 08             	mov    0x8(%ebp),%eax
c0108d64:	8d 48 04             	lea    0x4(%eax),%ecx
c0108d67:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0108d6c:	89 c8                	mov    %ecx,%eax
c0108d6e:	f7 ea                	imul   %edx
c0108d70:	d1 fa                	sar    %edx
c0108d72:	89 c8                	mov    %ecx,%eax
c0108d74:	c1 f8 1f             	sar    $0x1f,%eax
c0108d77:	29 c2                	sub    %eax,%edx
c0108d79:	89 d0                	mov    %edx,%eax
c0108d7b:	89 c2                	mov    %eax,%edx
c0108d7d:	c1 e2 02             	shl    $0x2,%edx
c0108d80:	01 c2                	add    %eax,%edx
c0108d82:	89 c8                	mov    %ecx,%eax
c0108d84:	29 d0                	sub    %edx,%eax
c0108d86:	83 ec 0c             	sub    $0xc,%esp
c0108d89:	50                   	push   %eax
c0108d8a:	e8 39 fe ff ff       	call   c0108bc8 <phi_test_condvar>
c0108d8f:	83 c4 10             	add    $0x10,%esp
    phi_test_condvar(RIGHT); /* 看一下右邻居现在是否能进餐 */
c0108d92:	8b 45 08             	mov    0x8(%ebp),%eax
c0108d95:	8d 48 01             	lea    0x1(%eax),%ecx
c0108d98:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0108d9d:	89 c8                	mov    %ecx,%eax
c0108d9f:	f7 ea                	imul   %edx
c0108da1:	d1 fa                	sar    %edx
c0108da3:	89 c8                	mov    %ecx,%eax
c0108da5:	c1 f8 1f             	sar    $0x1f,%eax
c0108da8:	29 c2                	sub    %eax,%edx
c0108daa:	89 d0                	mov    %edx,%eax
c0108dac:	89 c2                	mov    %eax,%edx
c0108dae:	c1 e2 02             	shl    $0x2,%edx
c0108db1:	01 c2                	add    %eax,%edx
c0108db3:	89 c8                	mov    %ecx,%eax
c0108db5:	29 d0                	sub    %edx,%eax
c0108db7:	83 ec 0c             	sub    $0xc,%esp
c0108dba:	50                   	push   %eax
c0108dbb:	e8 08 fe ff ff       	call   c0108bc8 <phi_test_condvar>
c0108dc0:	83 c4 10             	add    $0x10,%esp
//--------leave routine in monitor--------------
    if(mtp->next_count>0)
c0108dc3:	a1 78 1a 13 c0       	mov    0xc0131a78,%eax
c0108dc8:	8b 40 18             	mov    0x18(%eax),%eax
c0108dcb:	85 c0                	test   %eax,%eax
c0108dcd:	7e 16                	jle    c0108de5 <phi_put_forks_condvar+0xa9>
        up(&(mtp->next));
c0108dcf:	a1 78 1a 13 c0       	mov    0xc0131a78,%eax
c0108dd4:	83 c0 0c             	add    $0xc,%eax
c0108dd7:	83 ec 0c             	sub    $0xc,%esp
c0108dda:	50                   	push   %eax
c0108ddb:	e8 18 08 00 00       	call   c01095f8 <up>
c0108de0:	83 c4 10             	add    $0x10,%esp
    else
        up(&(mtp->mutex));
}
c0108de3:	eb 11                	jmp    c0108df6 <phi_put_forks_condvar+0xba>
    phi_test_condvar(RIGHT); /* 看一下右邻居现在是否能进餐 */
//--------leave routine in monitor--------------
    if(mtp->next_count>0)
        up(&(mtp->next));
    else
        up(&(mtp->mutex));
c0108de5:	a1 78 1a 13 c0       	mov    0xc0131a78,%eax
c0108dea:	83 ec 0c             	sub    $0xc,%esp
c0108ded:	50                   	push   %eax
c0108dee:	e8 05 08 00 00       	call   c01095f8 <up>
c0108df3:	83 c4 10             	add    $0x10,%esp
}
c0108df6:	90                   	nop
c0108df7:	c9                   	leave  
c0108df8:	c3                   	ret    

c0108df9 <philosopher_using_condvar>:

//---------- philosophers using monitor (condition variable) ----------------------
int philosopher_using_condvar(void * arg) { /* arg is the No. of philosopher 0~N-1*/
c0108df9:	55                   	push   %ebp
c0108dfa:	89 e5                	mov    %esp,%ebp
c0108dfc:	83 ec 18             	sub    $0x18,%esp
  
    int i, iter=0;
c0108dff:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    i=(int)arg;
c0108e06:	8b 45 08             	mov    0x8(%ebp),%eax
c0108e09:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cprintf("I am No.%d philosopher_condvar\n",i);
c0108e0c:	83 ec 08             	sub    $0x8,%esp
c0108e0f:	ff 75 f0             	pushl  -0x10(%ebp)
c0108e12:	68 d0 ed 10 c0       	push   $0xc010edd0
c0108e17:	e8 7b 74 ff ff       	call   c0100297 <cprintf>
c0108e1c:	83 c4 10             	add    $0x10,%esp
    while(iter++<TIMES)
c0108e1f:	eb 62                	jmp    c0108e83 <philosopher_using_condvar+0x8a>
    { /* iterate*/
        cprintf("Iter %d, No.%d philosopher_condvar is thinking\n",iter,i); /* thinking*/
c0108e21:	83 ec 04             	sub    $0x4,%esp
c0108e24:	ff 75 f0             	pushl  -0x10(%ebp)
c0108e27:	ff 75 f4             	pushl  -0xc(%ebp)
c0108e2a:	68 f0 ed 10 c0       	push   $0xc010edf0
c0108e2f:	e8 63 74 ff ff       	call   c0100297 <cprintf>
c0108e34:	83 c4 10             	add    $0x10,%esp
        do_sleep(SLEEP_TIME);
c0108e37:	83 ec 0c             	sub    $0xc,%esp
c0108e3a:	6a 0a                	push   $0xa
c0108e3c:	e8 8c 27 00 00       	call   c010b5cd <do_sleep>
c0108e41:	83 c4 10             	add    $0x10,%esp
        phi_take_forks_condvar(i); 
c0108e44:	83 ec 0c             	sub    $0xc,%esp
c0108e47:	ff 75 f0             	pushl  -0x10(%ebp)
c0108e4a:	e8 52 fe ff ff       	call   c0108ca1 <phi_take_forks_condvar>
c0108e4f:	83 c4 10             	add    $0x10,%esp
        /* need two forks, maybe blocked */
        cprintf("Iter %d, No.%d philosopher_condvar is eating\n",iter,i); /* eating*/
c0108e52:	83 ec 04             	sub    $0x4,%esp
c0108e55:	ff 75 f0             	pushl  -0x10(%ebp)
c0108e58:	ff 75 f4             	pushl  -0xc(%ebp)
c0108e5b:	68 20 ee 10 c0       	push   $0xc010ee20
c0108e60:	e8 32 74 ff ff       	call   c0100297 <cprintf>
c0108e65:	83 c4 10             	add    $0x10,%esp
        do_sleep(SLEEP_TIME);
c0108e68:	83 ec 0c             	sub    $0xc,%esp
c0108e6b:	6a 0a                	push   $0xa
c0108e6d:	e8 5b 27 00 00       	call   c010b5cd <do_sleep>
c0108e72:	83 c4 10             	add    $0x10,%esp
        phi_put_forks_condvar(i); 
c0108e75:	83 ec 0c             	sub    $0xc,%esp
c0108e78:	ff 75 f0             	pushl  -0x10(%ebp)
c0108e7b:	e8 bc fe ff ff       	call   c0108d3c <phi_put_forks_condvar>
c0108e80:	83 c4 10             	add    $0x10,%esp
int philosopher_using_condvar(void * arg) { /* arg is the No. of philosopher 0~N-1*/
  
    int i, iter=0;
    i=(int)arg;
    cprintf("I am No.%d philosopher_condvar\n",i);
    while(iter++<TIMES)
c0108e83:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108e86:	8d 50 01             	lea    0x1(%eax),%edx
c0108e89:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0108e8c:	83 f8 03             	cmp    $0x3,%eax
c0108e8f:	7e 90                	jle    c0108e21 <philosopher_using_condvar+0x28>
        cprintf("Iter %d, No.%d philosopher_condvar is eating\n",iter,i); /* eating*/
        do_sleep(SLEEP_TIME);
        phi_put_forks_condvar(i); 
        /* return two forks back*/
    }
    cprintf("No.%d philosopher_condvar quit\n",i);
c0108e91:	83 ec 08             	sub    $0x8,%esp
c0108e94:	ff 75 f0             	pushl  -0x10(%ebp)
c0108e97:	68 50 ee 10 c0       	push   $0xc010ee50
c0108e9c:	e8 f6 73 ff ff       	call   c0100297 <cprintf>
c0108ea1:	83 c4 10             	add    $0x10,%esp
    return 0;    
c0108ea4:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0108ea9:	c9                   	leave  
c0108eaa:	c3                   	ret    

c0108eab <check_sync>:

void check_sync(void){
c0108eab:	55                   	push   %ebp
c0108eac:	89 e5                	mov    %esp,%ebp
c0108eae:	83 ec 18             	sub    $0x18,%esp

    int i;

    //check semaphore
    sem_init(&mutex, 1);
c0108eb1:	83 ec 08             	sub    $0x8,%esp
c0108eb4:	6a 01                	push   $0x1
c0108eb6:	68 28 72 1c c0       	push   $0xc01c7228
c0108ebb:	e8 cb 05 00 00       	call   c010948b <sem_init>
c0108ec0:	83 c4 10             	add    $0x10,%esp
    for(i=0;i<N;i++){
c0108ec3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0108eca:	e9 8e 00 00 00       	jmp    c0108f5d <check_sync+0xb2>
        sem_init(&s[i], 0);
c0108ecf:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108ed2:	89 d0                	mov    %edx,%eax
c0108ed4:	01 c0                	add    %eax,%eax
c0108ed6:	01 d0                	add    %edx,%eax
c0108ed8:	c1 e0 02             	shl    $0x2,%eax
c0108edb:	05 a0 72 1c c0       	add    $0xc01c72a0,%eax
c0108ee0:	83 ec 08             	sub    $0x8,%esp
c0108ee3:	6a 00                	push   $0x0
c0108ee5:	50                   	push   %eax
c0108ee6:	e8 a0 05 00 00       	call   c010948b <sem_init>
c0108eeb:	83 c4 10             	add    $0x10,%esp
        int pid = kernel_thread(philosopher_using_semaphore, (void *)i, 0);
c0108eee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108ef1:	83 ec 04             	sub    $0x4,%esp
c0108ef4:	6a 00                	push   $0x0
c0108ef6:	50                   	push   %eax
c0108ef7:	68 16 8b 10 c0       	push   $0xc0108b16
c0108efc:	e8 6c 13 00 00       	call   c010a26d <kernel_thread>
c0108f01:	83 c4 10             	add    $0x10,%esp
c0108f04:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pid <= 0) {
c0108f07:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0108f0b:	7f 17                	jg     c0108f24 <check_sync+0x79>
            panic("create No.%d philosopher_using_semaphore failed.\n");
c0108f0d:	83 ec 04             	sub    $0x4,%esp
c0108f10:	68 70 ee 10 c0       	push   $0xc010ee70
c0108f15:	68 f9 00 00 00       	push   $0xf9
c0108f1a:	68 a2 ee 10 c0       	push   $0xc010eea2
c0108f1f:	e8 d9 74 ff ff       	call   c01003fd <__panic>
        }
        philosopher_proc_sema[i] = find_proc(pid);
c0108f24:	83 ec 0c             	sub    $0xc,%esp
c0108f27:	ff 75 f0             	pushl  -0x10(%ebp)
c0108f2a:	e8 cc 12 00 00       	call   c010a1fb <find_proc>
c0108f2f:	83 c4 10             	add    $0x10,%esp
c0108f32:	89 c2                	mov    %eax,%edx
c0108f34:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108f37:	89 14 85 74 72 1c c0 	mov    %edx,-0x3fe38d8c(,%eax,4)
        set_proc_name(philosopher_proc_sema[i], "philosopher_sema_proc");
c0108f3e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108f41:	8b 04 85 74 72 1c c0 	mov    -0x3fe38d8c(,%eax,4),%eax
c0108f48:	83 ec 08             	sub    $0x8,%esp
c0108f4b:	68 b9 ee 10 c0       	push   $0xc010eeb9
c0108f50:	50                   	push   %eax
c0108f51:	e8 98 0e 00 00       	call   c0109dee <set_proc_name>
c0108f56:	83 c4 10             	add    $0x10,%esp

    int i;

    //check semaphore
    sem_init(&mutex, 1);
    for(i=0;i<N;i++){
c0108f59:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0108f5d:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
c0108f61:	0f 8e 68 ff ff ff    	jle    c0108ecf <check_sync+0x24>
        philosopher_proc_sema[i] = find_proc(pid);
        set_proc_name(philosopher_proc_sema[i], "philosopher_sema_proc");
    }

    //check condition variable
    monitor_init(&mt, N);
c0108f67:	83 ec 08             	sub    $0x8,%esp
c0108f6a:	6a 05                	push   $0x5
c0108f6c:	68 40 72 1c c0       	push   $0xc01c7240
c0108f71:	e8 1e 07 00 00       	call   c0109694 <monitor_init>
c0108f76:	83 c4 10             	add    $0x10,%esp
    for(i=0;i<N;i++){
c0108f79:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0108f80:	eb 7d                	jmp    c0108fff <check_sync+0x154>
        state_condvar[i]=THINKING;
c0108f82:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108f85:	c7 04 85 60 72 1c c0 	movl   $0x0,-0x3fe38da0(,%eax,4)
c0108f8c:	00 00 00 00 
        int pid = kernel_thread(philosopher_using_condvar, (void *)i, 0);
c0108f90:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108f93:	83 ec 04             	sub    $0x4,%esp
c0108f96:	6a 00                	push   $0x0
c0108f98:	50                   	push   %eax
c0108f99:	68 f9 8d 10 c0       	push   $0xc0108df9
c0108f9e:	e8 ca 12 00 00       	call   c010a26d <kernel_thread>
c0108fa3:	83 c4 10             	add    $0x10,%esp
c0108fa6:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (pid <= 0) {
c0108fa9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0108fad:	7f 17                	jg     c0108fc6 <check_sync+0x11b>
            panic("create No.%d philosopher_using_condvar failed.\n");
c0108faf:	83 ec 04             	sub    $0x4,%esp
c0108fb2:	68 d0 ee 10 c0       	push   $0xc010eed0
c0108fb7:	68 05 01 00 00       	push   $0x105
c0108fbc:	68 a2 ee 10 c0       	push   $0xc010eea2
c0108fc1:	e8 37 74 ff ff       	call   c01003fd <__panic>
        }
        philosopher_proc_condvar[i] = find_proc(pid);
c0108fc6:	83 ec 0c             	sub    $0xc,%esp
c0108fc9:	ff 75 ec             	pushl  -0x14(%ebp)
c0108fcc:	e8 2a 12 00 00       	call   c010a1fb <find_proc>
c0108fd1:	83 c4 10             	add    $0x10,%esp
c0108fd4:	89 c2                	mov    %eax,%edx
c0108fd6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108fd9:	89 14 85 14 72 1c c0 	mov    %edx,-0x3fe38dec(,%eax,4)
        set_proc_name(philosopher_proc_condvar[i], "philosopher_condvar_proc");
c0108fe0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108fe3:	8b 04 85 14 72 1c c0 	mov    -0x3fe38dec(,%eax,4),%eax
c0108fea:	83 ec 08             	sub    $0x8,%esp
c0108fed:	68 00 ef 10 c0       	push   $0xc010ef00
c0108ff2:	50                   	push   %eax
c0108ff3:	e8 f6 0d 00 00       	call   c0109dee <set_proc_name>
c0108ff8:	83 c4 10             	add    $0x10,%esp
        set_proc_name(philosopher_proc_sema[i], "philosopher_sema_proc");
    }

    //check condition variable
    monitor_init(&mt, N);
    for(i=0;i<N;i++){
c0108ffb:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0108fff:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
c0109003:	0f 8e 79 ff ff ff    	jle    c0108f82 <check_sync+0xd7>
            panic("create No.%d philosopher_using_condvar failed.\n");
        }
        philosopher_proc_condvar[i] = find_proc(pid);
        set_proc_name(philosopher_proc_condvar[i], "philosopher_condvar_proc");
    }
}
c0109009:	90                   	nop
c010900a:	c9                   	leave  
c010900b:	c3                   	ret    

c010900c <wait_init>:
#include <sync.h>
#include <wait.h>
#include <proc.h>

void
wait_init(wait_t *wait, struct proc_struct *proc) {
c010900c:	55                   	push   %ebp
c010900d:	89 e5                	mov    %esp,%ebp
c010900f:	83 ec 10             	sub    $0x10,%esp
    wait->proc = proc;
c0109012:	8b 45 08             	mov    0x8(%ebp),%eax
c0109015:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109018:	89 10                	mov    %edx,(%eax)
    wait->wakeup_flags = WT_INTERRUPTED;
c010901a:	8b 45 08             	mov    0x8(%ebp),%eax
c010901d:	c7 40 04 00 00 00 80 	movl   $0x80000000,0x4(%eax)
    list_init(&(wait->wait_link));
c0109024:	8b 45 08             	mov    0x8(%ebp),%eax
c0109027:	83 c0 0c             	add    $0xc,%eax
c010902a:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010902d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109030:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0109033:	89 50 04             	mov    %edx,0x4(%eax)
c0109036:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109039:	8b 50 04             	mov    0x4(%eax),%edx
c010903c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010903f:	89 10                	mov    %edx,(%eax)
}
c0109041:	90                   	nop
c0109042:	c9                   	leave  
c0109043:	c3                   	ret    

c0109044 <wait_queue_init>:

void
wait_queue_init(wait_queue_t *queue) {
c0109044:	55                   	push   %ebp
c0109045:	89 e5                	mov    %esp,%ebp
c0109047:	83 ec 10             	sub    $0x10,%esp
    list_init(&(queue->wait_head));
c010904a:	8b 45 08             	mov    0x8(%ebp),%eax
c010904d:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0109050:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109053:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0109056:	89 50 04             	mov    %edx,0x4(%eax)
c0109059:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010905c:	8b 50 04             	mov    0x4(%eax),%edx
c010905f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109062:	89 10                	mov    %edx,(%eax)
}
c0109064:	90                   	nop
c0109065:	c9                   	leave  
c0109066:	c3                   	ret    

c0109067 <wait_queue_add>:

void
wait_queue_add(wait_queue_t *queue, wait_t *wait) {
c0109067:	55                   	push   %ebp
c0109068:	89 e5                	mov    %esp,%ebp
c010906a:	83 ec 28             	sub    $0x28,%esp
    assert(list_empty(&(wait->wait_link)) && wait->proc != NULL);
c010906d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109070:	83 c0 0c             	add    $0xc,%eax
c0109073:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0109076:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109079:	8b 40 04             	mov    0x4(%eax),%eax
c010907c:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010907f:	0f 94 c0             	sete   %al
c0109082:	0f b6 c0             	movzbl %al,%eax
c0109085:	85 c0                	test   %eax,%eax
c0109087:	74 09                	je     c0109092 <wait_queue_add+0x2b>
c0109089:	8b 45 0c             	mov    0xc(%ebp),%eax
c010908c:	8b 00                	mov    (%eax),%eax
c010908e:	85 c0                	test   %eax,%eax
c0109090:	75 16                	jne    c01090a8 <wait_queue_add+0x41>
c0109092:	68 1c ef 10 c0       	push   $0xc010ef1c
c0109097:	68 51 ef 10 c0       	push   $0xc010ef51
c010909c:	6a 15                	push   $0x15
c010909e:	68 66 ef 10 c0       	push   $0xc010ef66
c01090a3:	e8 55 73 ff ff       	call   c01003fd <__panic>
    wait->wait_queue = queue;
c01090a8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01090ab:	8b 55 08             	mov    0x8(%ebp),%edx
c01090ae:	89 50 08             	mov    %edx,0x8(%eax)
    list_add_before(&(queue->wait_head), &(wait->wait_link));
c01090b1:	8b 45 0c             	mov    0xc(%ebp),%eax
c01090b4:	8d 50 0c             	lea    0xc(%eax),%edx
c01090b7:	8b 45 08             	mov    0x8(%ebp),%eax
c01090ba:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01090bd:	89 55 ec             	mov    %edx,-0x14(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c01090c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01090c3:	8b 00                	mov    (%eax),%eax
c01090c5:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01090c8:	89 55 e8             	mov    %edx,-0x18(%ebp)
c01090cb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01090ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01090d1:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c01090d4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01090d7:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01090da:	89 10                	mov    %edx,(%eax)
c01090dc:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01090df:	8b 10                	mov    (%eax),%edx
c01090e1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01090e4:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c01090e7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01090ea:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01090ed:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c01090f0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01090f3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01090f6:	89 10                	mov    %edx,(%eax)
}
c01090f8:	90                   	nop
c01090f9:	c9                   	leave  
c01090fa:	c3                   	ret    

c01090fb <wait_queue_del>:

void
wait_queue_del(wait_queue_t *queue, wait_t *wait) {
c01090fb:	55                   	push   %ebp
c01090fc:	89 e5                	mov    %esp,%ebp
c01090fe:	83 ec 28             	sub    $0x28,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c0109101:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109104:	83 c0 0c             	add    $0xc,%eax
c0109107:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010910a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010910d:	8b 40 04             	mov    0x4(%eax),%eax
c0109110:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0109113:	0f 94 c0             	sete   %al
c0109116:	0f b6 c0             	movzbl %al,%eax
c0109119:	85 c0                	test   %eax,%eax
c010911b:	75 0b                	jne    c0109128 <wait_queue_del+0x2d>
c010911d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109120:	8b 40 08             	mov    0x8(%eax),%eax
c0109123:	3b 45 08             	cmp    0x8(%ebp),%eax
c0109126:	74 16                	je     c010913e <wait_queue_del+0x43>
c0109128:	68 78 ef 10 c0       	push   $0xc010ef78
c010912d:	68 51 ef 10 c0       	push   $0xc010ef51
c0109132:	6a 1c                	push   $0x1c
c0109134:	68 66 ef 10 c0       	push   $0xc010ef66
c0109139:	e8 bf 72 ff ff       	call   c01003fd <__panic>
    list_del_init(&(wait->wait_link));
c010913e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109141:	83 c0 0c             	add    $0xc,%eax
c0109144:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109147:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010914a:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010914d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109150:	8b 40 04             	mov    0x4(%eax),%eax
c0109153:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0109156:	8b 12                	mov    (%edx),%edx
c0109158:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010915b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010915e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109161:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0109164:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0109167:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010916a:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010916d:	89 10                	mov    %edx,(%eax)
c010916f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109172:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0109175:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109178:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010917b:	89 50 04             	mov    %edx,0x4(%eax)
c010917e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109181:	8b 50 04             	mov    0x4(%eax),%edx
c0109184:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109187:	89 10                	mov    %edx,(%eax)
}
c0109189:	90                   	nop
c010918a:	c9                   	leave  
c010918b:	c3                   	ret    

c010918c <wait_queue_next>:

wait_t *
wait_queue_next(wait_queue_t *queue, wait_t *wait) {
c010918c:	55                   	push   %ebp
c010918d:	89 e5                	mov    %esp,%ebp
c010918f:	83 ec 18             	sub    $0x18,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c0109192:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109195:	83 c0 0c             	add    $0xc,%eax
c0109198:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010919b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010919e:	8b 40 04             	mov    0x4(%eax),%eax
c01091a1:	39 45 ec             	cmp    %eax,-0x14(%ebp)
c01091a4:	0f 94 c0             	sete   %al
c01091a7:	0f b6 c0             	movzbl %al,%eax
c01091aa:	85 c0                	test   %eax,%eax
c01091ac:	75 0b                	jne    c01091b9 <wait_queue_next+0x2d>
c01091ae:	8b 45 0c             	mov    0xc(%ebp),%eax
c01091b1:	8b 40 08             	mov    0x8(%eax),%eax
c01091b4:	3b 45 08             	cmp    0x8(%ebp),%eax
c01091b7:	74 16                	je     c01091cf <wait_queue_next+0x43>
c01091b9:	68 78 ef 10 c0       	push   $0xc010ef78
c01091be:	68 51 ef 10 c0       	push   $0xc010ef51
c01091c3:	6a 22                	push   $0x22
c01091c5:	68 66 ef 10 c0       	push   $0xc010ef66
c01091ca:	e8 2e 72 ff ff       	call   c01003fd <__panic>
    list_entry_t *le = list_next(&(wait->wait_link));
c01091cf:	8b 45 0c             	mov    0xc(%ebp),%eax
c01091d2:	83 c0 0c             	add    $0xc,%eax
c01091d5:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01091d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01091db:	8b 40 04             	mov    0x4(%eax),%eax
c01091de:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (le != &(queue->wait_head)) {
c01091e1:	8b 45 08             	mov    0x8(%ebp),%eax
c01091e4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01091e7:	74 08                	je     c01091f1 <wait_queue_next+0x65>
        return le2wait(le, wait_link);
c01091e9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01091ec:	83 e8 0c             	sub    $0xc,%eax
c01091ef:	eb 05                	jmp    c01091f6 <wait_queue_next+0x6a>
    }
    return NULL;
c01091f1:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01091f6:	c9                   	leave  
c01091f7:	c3                   	ret    

c01091f8 <wait_queue_prev>:

wait_t *
wait_queue_prev(wait_queue_t *queue, wait_t *wait) {
c01091f8:	55                   	push   %ebp
c01091f9:	89 e5                	mov    %esp,%ebp
c01091fb:	83 ec 18             	sub    $0x18,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c01091fe:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109201:	83 c0 0c             	add    $0xc,%eax
c0109204:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0109207:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010920a:	8b 40 04             	mov    0x4(%eax),%eax
c010920d:	39 45 ec             	cmp    %eax,-0x14(%ebp)
c0109210:	0f 94 c0             	sete   %al
c0109213:	0f b6 c0             	movzbl %al,%eax
c0109216:	85 c0                	test   %eax,%eax
c0109218:	75 0b                	jne    c0109225 <wait_queue_prev+0x2d>
c010921a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010921d:	8b 40 08             	mov    0x8(%eax),%eax
c0109220:	3b 45 08             	cmp    0x8(%ebp),%eax
c0109223:	74 16                	je     c010923b <wait_queue_prev+0x43>
c0109225:	68 78 ef 10 c0       	push   $0xc010ef78
c010922a:	68 51 ef 10 c0       	push   $0xc010ef51
c010922f:	6a 2c                	push   $0x2c
c0109231:	68 66 ef 10 c0       	push   $0xc010ef66
c0109236:	e8 c2 71 ff ff       	call   c01003fd <__panic>
    list_entry_t *le = list_prev(&(wait->wait_link));
c010923b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010923e:	83 c0 0c             	add    $0xc,%eax
c0109241:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c0109244:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109247:	8b 00                	mov    (%eax),%eax
c0109249:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (le != &(queue->wait_head)) {
c010924c:	8b 45 08             	mov    0x8(%ebp),%eax
c010924f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0109252:	74 08                	je     c010925c <wait_queue_prev+0x64>
        return le2wait(le, wait_link);
c0109254:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109257:	83 e8 0c             	sub    $0xc,%eax
c010925a:	eb 05                	jmp    c0109261 <wait_queue_prev+0x69>
    }
    return NULL;
c010925c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109261:	c9                   	leave  
c0109262:	c3                   	ret    

c0109263 <wait_queue_first>:

wait_t *
wait_queue_first(wait_queue_t *queue) {
c0109263:	55                   	push   %ebp
c0109264:	89 e5                	mov    %esp,%ebp
c0109266:	83 ec 10             	sub    $0x10,%esp
    list_entry_t *le = list_next(&(queue->wait_head));
c0109269:	8b 45 08             	mov    0x8(%ebp),%eax
c010926c:	89 45 f8             	mov    %eax,-0x8(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010926f:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0109272:	8b 40 04             	mov    0x4(%eax),%eax
c0109275:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (le != &(queue->wait_head)) {
c0109278:	8b 45 08             	mov    0x8(%ebp),%eax
c010927b:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c010927e:	74 08                	je     c0109288 <wait_queue_first+0x25>
        return le2wait(le, wait_link);
c0109280:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109283:	83 e8 0c             	sub    $0xc,%eax
c0109286:	eb 05                	jmp    c010928d <wait_queue_first+0x2a>
    }
    return NULL;
c0109288:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010928d:	c9                   	leave  
c010928e:	c3                   	ret    

c010928f <wait_queue_last>:

wait_t *
wait_queue_last(wait_queue_t *queue) {
c010928f:	55                   	push   %ebp
c0109290:	89 e5                	mov    %esp,%ebp
c0109292:	83 ec 10             	sub    $0x10,%esp
    list_entry_t *le = list_prev(&(queue->wait_head));
c0109295:	8b 45 08             	mov    0x8(%ebp),%eax
c0109298:	89 45 f8             	mov    %eax,-0x8(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c010929b:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010929e:	8b 00                	mov    (%eax),%eax
c01092a0:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (le != &(queue->wait_head)) {
c01092a3:	8b 45 08             	mov    0x8(%ebp),%eax
c01092a6:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c01092a9:	74 08                	je     c01092b3 <wait_queue_last+0x24>
        return le2wait(le, wait_link);
c01092ab:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01092ae:	83 e8 0c             	sub    $0xc,%eax
c01092b1:	eb 05                	jmp    c01092b8 <wait_queue_last+0x29>
    }
    return NULL;
c01092b3:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01092b8:	c9                   	leave  
c01092b9:	c3                   	ret    

c01092ba <wait_queue_empty>:

bool
wait_queue_empty(wait_queue_t *queue) {
c01092ba:	55                   	push   %ebp
c01092bb:	89 e5                	mov    %esp,%ebp
c01092bd:	83 ec 10             	sub    $0x10,%esp
    return list_empty(&(queue->wait_head));
c01092c0:	8b 45 08             	mov    0x8(%ebp),%eax
c01092c3:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c01092c6:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01092c9:	8b 40 04             	mov    0x4(%eax),%eax
c01092cc:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c01092cf:	0f 94 c0             	sete   %al
c01092d2:	0f b6 c0             	movzbl %al,%eax
c01092d5:	90                   	nop
}
c01092d6:	c9                   	leave  
c01092d7:	c3                   	ret    

c01092d8 <wait_in_queue>:

bool
wait_in_queue(wait_t *wait) {
c01092d8:	55                   	push   %ebp
c01092d9:	89 e5                	mov    %esp,%ebp
c01092db:	83 ec 10             	sub    $0x10,%esp
    return !list_empty(&(wait->wait_link));
c01092de:	8b 45 08             	mov    0x8(%ebp),%eax
c01092e1:	83 c0 0c             	add    $0xc,%eax
c01092e4:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01092e7:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01092ea:	8b 40 04             	mov    0x4(%eax),%eax
c01092ed:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c01092f0:	0f 94 c0             	sete   %al
c01092f3:	0f b6 c0             	movzbl %al,%eax
c01092f6:	85 c0                	test   %eax,%eax
c01092f8:	0f 94 c0             	sete   %al
c01092fb:	0f b6 c0             	movzbl %al,%eax
}
c01092fe:	c9                   	leave  
c01092ff:	c3                   	ret    

c0109300 <wakeup_wait>:

void
wakeup_wait(wait_queue_t *queue, wait_t *wait, uint32_t wakeup_flags, bool del) {
c0109300:	55                   	push   %ebp
c0109301:	89 e5                	mov    %esp,%ebp
c0109303:	83 ec 08             	sub    $0x8,%esp
    if (del) {
c0109306:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010930a:	74 11                	je     c010931d <wakeup_wait+0x1d>
        wait_queue_del(queue, wait);
c010930c:	83 ec 08             	sub    $0x8,%esp
c010930f:	ff 75 0c             	pushl  0xc(%ebp)
c0109312:	ff 75 08             	pushl  0x8(%ebp)
c0109315:	e8 e1 fd ff ff       	call   c01090fb <wait_queue_del>
c010931a:	83 c4 10             	add    $0x10,%esp
    }
    wait->wakeup_flags = wakeup_flags;
c010931d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109320:	8b 55 10             	mov    0x10(%ebp),%edx
c0109323:	89 50 04             	mov    %edx,0x4(%eax)
    wakeup_proc(wait->proc);
c0109326:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109329:	8b 00                	mov    (%eax),%eax
c010932b:	83 ec 0c             	sub    $0xc,%esp
c010932e:	50                   	push   %eax
c010932f:	e8 79 24 00 00       	call   c010b7ad <wakeup_proc>
c0109334:	83 c4 10             	add    $0x10,%esp
}
c0109337:	90                   	nop
c0109338:	c9                   	leave  
c0109339:	c3                   	ret    

c010933a <wakeup_first>:

void
wakeup_first(wait_queue_t *queue, uint32_t wakeup_flags, bool del) {
c010933a:	55                   	push   %ebp
c010933b:	89 e5                	mov    %esp,%ebp
c010933d:	83 ec 18             	sub    $0x18,%esp
    wait_t *wait;
    if ((wait = wait_queue_first(queue)) != NULL) {
c0109340:	ff 75 08             	pushl  0x8(%ebp)
c0109343:	e8 1b ff ff ff       	call   c0109263 <wait_queue_first>
c0109348:	83 c4 04             	add    $0x4,%esp
c010934b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010934e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109352:	74 14                	je     c0109368 <wakeup_first+0x2e>
        wakeup_wait(queue, wait, wakeup_flags, del);
c0109354:	ff 75 10             	pushl  0x10(%ebp)
c0109357:	ff 75 0c             	pushl  0xc(%ebp)
c010935a:	ff 75 f4             	pushl  -0xc(%ebp)
c010935d:	ff 75 08             	pushl  0x8(%ebp)
c0109360:	e8 9b ff ff ff       	call   c0109300 <wakeup_wait>
c0109365:	83 c4 10             	add    $0x10,%esp
    }
}
c0109368:	90                   	nop
c0109369:	c9                   	leave  
c010936a:	c3                   	ret    

c010936b <wakeup_queue>:

void
wakeup_queue(wait_queue_t *queue, uint32_t wakeup_flags, bool del) {
c010936b:	55                   	push   %ebp
c010936c:	89 e5                	mov    %esp,%ebp
c010936e:	83 ec 18             	sub    $0x18,%esp
    wait_t *wait;
    if ((wait = wait_queue_first(queue)) != NULL) {
c0109371:	ff 75 08             	pushl  0x8(%ebp)
c0109374:	e8 ea fe ff ff       	call   c0109263 <wait_queue_first>
c0109379:	83 c4 04             	add    $0x4,%esp
c010937c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010937f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109383:	74 5f                	je     c01093e4 <wakeup_queue+0x79>
        if (del) {
c0109385:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0109389:	74 2c                	je     c01093b7 <wakeup_queue+0x4c>
            do {
                wakeup_wait(queue, wait, wakeup_flags, 1);
c010938b:	6a 01                	push   $0x1
c010938d:	ff 75 0c             	pushl  0xc(%ebp)
c0109390:	ff 75 f4             	pushl  -0xc(%ebp)
c0109393:	ff 75 08             	pushl  0x8(%ebp)
c0109396:	e8 65 ff ff ff       	call   c0109300 <wakeup_wait>
c010939b:	83 c4 10             	add    $0x10,%esp
            } while ((wait = wait_queue_first(queue)) != NULL);
c010939e:	83 ec 0c             	sub    $0xc,%esp
c01093a1:	ff 75 08             	pushl  0x8(%ebp)
c01093a4:	e8 ba fe ff ff       	call   c0109263 <wait_queue_first>
c01093a9:	83 c4 10             	add    $0x10,%esp
c01093ac:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01093af:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01093b3:	75 d6                	jne    c010938b <wakeup_queue+0x20>
            do {
                wakeup_wait(queue, wait, wakeup_flags, 0);
            } while ((wait = wait_queue_next(queue, wait)) != NULL);
        }
    }
}
c01093b5:	eb 2d                	jmp    c01093e4 <wakeup_queue+0x79>
                wakeup_wait(queue, wait, wakeup_flags, 1);
            } while ((wait = wait_queue_first(queue)) != NULL);
        }
        else {
            do {
                wakeup_wait(queue, wait, wakeup_flags, 0);
c01093b7:	6a 00                	push   $0x0
c01093b9:	ff 75 0c             	pushl  0xc(%ebp)
c01093bc:	ff 75 f4             	pushl  -0xc(%ebp)
c01093bf:	ff 75 08             	pushl  0x8(%ebp)
c01093c2:	e8 39 ff ff ff       	call   c0109300 <wakeup_wait>
c01093c7:	83 c4 10             	add    $0x10,%esp
            } while ((wait = wait_queue_next(queue, wait)) != NULL);
c01093ca:	83 ec 08             	sub    $0x8,%esp
c01093cd:	ff 75 f4             	pushl  -0xc(%ebp)
c01093d0:	ff 75 08             	pushl  0x8(%ebp)
c01093d3:	e8 b4 fd ff ff       	call   c010918c <wait_queue_next>
c01093d8:	83 c4 10             	add    $0x10,%esp
c01093db:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01093de:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01093e2:	75 d3                	jne    c01093b7 <wakeup_queue+0x4c>
        }
    }
}
c01093e4:	90                   	nop
c01093e5:	c9                   	leave  
c01093e6:	c3                   	ret    

c01093e7 <wait_current_set>:

void
wait_current_set(wait_queue_t *queue, wait_t *wait, uint32_t wait_state) {
c01093e7:	55                   	push   %ebp
c01093e8:	89 e5                	mov    %esp,%ebp
c01093ea:	83 ec 08             	sub    $0x8,%esp
    assert(current != NULL);
c01093ed:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c01093f2:	85 c0                	test   %eax,%eax
c01093f4:	75 16                	jne    c010940c <wait_current_set+0x25>
c01093f6:	68 b5 ef 10 c0       	push   $0xc010efb5
c01093fb:	68 51 ef 10 c0       	push   $0xc010ef51
c0109400:	6a 74                	push   $0x74
c0109402:	68 66 ef 10 c0       	push   $0xc010ef66
c0109407:	e8 f1 6f ff ff       	call   c01003fd <__panic>
    wait_init(wait, current);
c010940c:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c0109411:	83 ec 08             	sub    $0x8,%esp
c0109414:	50                   	push   %eax
c0109415:	ff 75 0c             	pushl  0xc(%ebp)
c0109418:	e8 ef fb ff ff       	call   c010900c <wait_init>
c010941d:	83 c4 10             	add    $0x10,%esp
    current->state = PROC_SLEEPING;
c0109420:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c0109425:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    current->wait_state = wait_state;
c010942b:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c0109430:	8b 55 10             	mov    0x10(%ebp),%edx
c0109433:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)
    wait_queue_add(queue, wait);
c0109439:	83 ec 08             	sub    $0x8,%esp
c010943c:	ff 75 0c             	pushl  0xc(%ebp)
c010943f:	ff 75 08             	pushl  0x8(%ebp)
c0109442:	e8 20 fc ff ff       	call   c0109067 <wait_queue_add>
c0109447:	83 c4 10             	add    $0x10,%esp
}
c010944a:	90                   	nop
c010944b:	c9                   	leave  
c010944c:	c3                   	ret    

c010944d <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c010944d:	55                   	push   %ebp
c010944e:	89 e5                	mov    %esp,%ebp
c0109450:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0109453:	9c                   	pushf  
c0109454:	58                   	pop    %eax
c0109455:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0109458:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010945b:	25 00 02 00 00       	and    $0x200,%eax
c0109460:	85 c0                	test   %eax,%eax
c0109462:	74 0c                	je     c0109470 <__intr_save+0x23>
        intr_disable();
c0109464:	e8 53 8d ff ff       	call   c01021bc <intr_disable>
        return 1;
c0109469:	b8 01 00 00 00       	mov    $0x1,%eax
c010946e:	eb 05                	jmp    c0109475 <__intr_save+0x28>
    }
    return 0;
c0109470:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109475:	c9                   	leave  
c0109476:	c3                   	ret    

c0109477 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0109477:	55                   	push   %ebp
c0109478:	89 e5                	mov    %esp,%ebp
c010947a:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010947d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0109481:	74 05                	je     c0109488 <__intr_restore+0x11>
        intr_enable();
c0109483:	e8 2d 8d ff ff       	call   c01021b5 <intr_enable>
    }
}
c0109488:	90                   	nop
c0109489:	c9                   	leave  
c010948a:	c3                   	ret    

c010948b <sem_init>:
#include <proc.h>
#include <sync.h>
#include <assert.h>

void
sem_init(semaphore_t *sem, int value) {
c010948b:	55                   	push   %ebp
c010948c:	89 e5                	mov    %esp,%ebp
c010948e:	83 ec 08             	sub    $0x8,%esp
    sem->value = value;
c0109491:	8b 45 08             	mov    0x8(%ebp),%eax
c0109494:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109497:	89 10                	mov    %edx,(%eax)
    wait_queue_init(&(sem->wait_queue));
c0109499:	8b 45 08             	mov    0x8(%ebp),%eax
c010949c:	83 c0 04             	add    $0x4,%eax
c010949f:	83 ec 0c             	sub    $0xc,%esp
c01094a2:	50                   	push   %eax
c01094a3:	e8 9c fb ff ff       	call   c0109044 <wait_queue_init>
c01094a8:	83 c4 10             	add    $0x10,%esp
}
c01094ab:	90                   	nop
c01094ac:	c9                   	leave  
c01094ad:	c3                   	ret    

c01094ae <__up>:

static __noinline void __up(semaphore_t *sem, uint32_t wait_state) {
c01094ae:	55                   	push   %ebp
c01094af:	89 e5                	mov    %esp,%ebp
c01094b1:	83 ec 18             	sub    $0x18,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c01094b4:	e8 94 ff ff ff       	call   c010944d <__intr_save>
c01094b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        wait_t *wait;
        if ((wait = wait_queue_first(&(sem->wait_queue))) == NULL) {
c01094bc:	8b 45 08             	mov    0x8(%ebp),%eax
c01094bf:	83 c0 04             	add    $0x4,%eax
c01094c2:	83 ec 0c             	sub    $0xc,%esp
c01094c5:	50                   	push   %eax
c01094c6:	e8 98 fd ff ff       	call   c0109263 <wait_queue_first>
c01094cb:	83 c4 10             	add    $0x10,%esp
c01094ce:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01094d1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01094d5:	75 0f                	jne    c01094e6 <__up+0x38>
            sem->value ++;
c01094d7:	8b 45 08             	mov    0x8(%ebp),%eax
c01094da:	8b 00                	mov    (%eax),%eax
c01094dc:	8d 50 01             	lea    0x1(%eax),%edx
c01094df:	8b 45 08             	mov    0x8(%ebp),%eax
c01094e2:	89 10                	mov    %edx,(%eax)
c01094e4:	eb 3d                	jmp    c0109523 <__up+0x75>
        }
        else {
            assert(wait->proc->wait_state == wait_state);
c01094e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01094e9:	8b 00                	mov    (%eax),%eax
c01094eb:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c01094f1:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01094f4:	74 16                	je     c010950c <__up+0x5e>
c01094f6:	68 c8 ef 10 c0       	push   $0xc010efc8
c01094fb:	68 ed ef 10 c0       	push   $0xc010efed
c0109500:	6a 19                	push   $0x19
c0109502:	68 02 f0 10 c0       	push   $0xc010f002
c0109507:	e8 f1 6e ff ff       	call   c01003fd <__panic>
            wakeup_wait(&(sem->wait_queue), wait, wait_state, 1);
c010950c:	8b 45 08             	mov    0x8(%ebp),%eax
c010950f:	83 c0 04             	add    $0x4,%eax
c0109512:	6a 01                	push   $0x1
c0109514:	ff 75 0c             	pushl  0xc(%ebp)
c0109517:	ff 75 f0             	pushl  -0x10(%ebp)
c010951a:	50                   	push   %eax
c010951b:	e8 e0 fd ff ff       	call   c0109300 <wakeup_wait>
c0109520:	83 c4 10             	add    $0x10,%esp
        }
    }
    local_intr_restore(intr_flag);
c0109523:	83 ec 0c             	sub    $0xc,%esp
c0109526:	ff 75 f4             	pushl  -0xc(%ebp)
c0109529:	e8 49 ff ff ff       	call   c0109477 <__intr_restore>
c010952e:	83 c4 10             	add    $0x10,%esp
}
c0109531:	90                   	nop
c0109532:	c9                   	leave  
c0109533:	c3                   	ret    

c0109534 <__down>:

static __noinline uint32_t __down(semaphore_t *sem, uint32_t wait_state) {
c0109534:	55                   	push   %ebp
c0109535:	89 e5                	mov    %esp,%ebp
c0109537:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010953a:	e8 0e ff ff ff       	call   c010944d <__intr_save>
c010953f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (sem->value > 0) {
c0109542:	8b 45 08             	mov    0x8(%ebp),%eax
c0109545:	8b 00                	mov    (%eax),%eax
c0109547:	85 c0                	test   %eax,%eax
c0109549:	7e 25                	jle    c0109570 <__down+0x3c>
        sem->value --;
c010954b:	8b 45 08             	mov    0x8(%ebp),%eax
c010954e:	8b 00                	mov    (%eax),%eax
c0109550:	8d 50 ff             	lea    -0x1(%eax),%edx
c0109553:	8b 45 08             	mov    0x8(%ebp),%eax
c0109556:	89 10                	mov    %edx,(%eax)
        local_intr_restore(intr_flag);
c0109558:	83 ec 0c             	sub    $0xc,%esp
c010955b:	ff 75 f4             	pushl  -0xc(%ebp)
c010955e:	e8 14 ff ff ff       	call   c0109477 <__intr_restore>
c0109563:	83 c4 10             	add    $0x10,%esp
        return 0;
c0109566:	b8 00 00 00 00       	mov    $0x0,%eax
c010956b:	e9 86 00 00 00       	jmp    c01095f6 <__down+0xc2>
    }
    wait_t __wait, *wait = &__wait;
c0109570:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0109573:	89 45 f0             	mov    %eax,-0x10(%ebp)
    wait_current_set(&(sem->wait_queue), wait, wait_state);
c0109576:	8b 45 08             	mov    0x8(%ebp),%eax
c0109579:	83 c0 04             	add    $0x4,%eax
c010957c:	83 ec 04             	sub    $0x4,%esp
c010957f:	ff 75 0c             	pushl  0xc(%ebp)
c0109582:	ff 75 f0             	pushl  -0x10(%ebp)
c0109585:	50                   	push   %eax
c0109586:	e8 5c fe ff ff       	call   c01093e7 <wait_current_set>
c010958b:	83 c4 10             	add    $0x10,%esp
    local_intr_restore(intr_flag);
c010958e:	83 ec 0c             	sub    $0xc,%esp
c0109591:	ff 75 f4             	pushl  -0xc(%ebp)
c0109594:	e8 de fe ff ff       	call   c0109477 <__intr_restore>
c0109599:	83 c4 10             	add    $0x10,%esp

    schedule();
c010959c:	e8 9c 22 00 00       	call   c010b83d <schedule>

    local_intr_save(intr_flag);
c01095a1:	e8 a7 fe ff ff       	call   c010944d <__intr_save>
c01095a6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    wait_current_del(&(sem->wait_queue), wait);
c01095a9:	83 ec 0c             	sub    $0xc,%esp
c01095ac:	ff 75 f0             	pushl  -0x10(%ebp)
c01095af:	e8 24 fd ff ff       	call   c01092d8 <wait_in_queue>
c01095b4:	83 c4 10             	add    $0x10,%esp
c01095b7:	85 c0                	test   %eax,%eax
c01095b9:	74 15                	je     c01095d0 <__down+0x9c>
c01095bb:	8b 45 08             	mov    0x8(%ebp),%eax
c01095be:	83 c0 04             	add    $0x4,%eax
c01095c1:	83 ec 08             	sub    $0x8,%esp
c01095c4:	ff 75 f0             	pushl  -0x10(%ebp)
c01095c7:	50                   	push   %eax
c01095c8:	e8 2e fb ff ff       	call   c01090fb <wait_queue_del>
c01095cd:	83 c4 10             	add    $0x10,%esp
    local_intr_restore(intr_flag);
c01095d0:	83 ec 0c             	sub    $0xc,%esp
c01095d3:	ff 75 f4             	pushl  -0xc(%ebp)
c01095d6:	e8 9c fe ff ff       	call   c0109477 <__intr_restore>
c01095db:	83 c4 10             	add    $0x10,%esp

    if (wait->wakeup_flags != wait_state) {
c01095de:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01095e1:	8b 40 04             	mov    0x4(%eax),%eax
c01095e4:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01095e7:	74 08                	je     c01095f1 <__down+0xbd>
        return wait->wakeup_flags;
c01095e9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01095ec:	8b 40 04             	mov    0x4(%eax),%eax
c01095ef:	eb 05                	jmp    c01095f6 <__down+0xc2>
    }
    return 0;
c01095f1:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01095f6:	c9                   	leave  
c01095f7:	c3                   	ret    

c01095f8 <up>:

void
up(semaphore_t *sem) {
c01095f8:	55                   	push   %ebp
c01095f9:	89 e5                	mov    %esp,%ebp
c01095fb:	83 ec 08             	sub    $0x8,%esp
    __up(sem, WT_KSEM);
c01095fe:	83 ec 08             	sub    $0x8,%esp
c0109601:	68 00 01 00 00       	push   $0x100
c0109606:	ff 75 08             	pushl  0x8(%ebp)
c0109609:	e8 a0 fe ff ff       	call   c01094ae <__up>
c010960e:	83 c4 10             	add    $0x10,%esp
}
c0109611:	90                   	nop
c0109612:	c9                   	leave  
c0109613:	c3                   	ret    

c0109614 <down>:

void
down(semaphore_t *sem) {
c0109614:	55                   	push   %ebp
c0109615:	89 e5                	mov    %esp,%ebp
c0109617:	83 ec 18             	sub    $0x18,%esp
    uint32_t flags = __down(sem, WT_KSEM);
c010961a:	83 ec 08             	sub    $0x8,%esp
c010961d:	68 00 01 00 00       	push   $0x100
c0109622:	ff 75 08             	pushl  0x8(%ebp)
c0109625:	e8 0a ff ff ff       	call   c0109534 <__down>
c010962a:	83 c4 10             	add    $0x10,%esp
c010962d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(flags == 0);
c0109630:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109634:	74 16                	je     c010964c <down+0x38>
c0109636:	68 12 f0 10 c0       	push   $0xc010f012
c010963b:	68 ed ef 10 c0       	push   $0xc010efed
c0109640:	6a 40                	push   $0x40
c0109642:	68 02 f0 10 c0       	push   $0xc010f002
c0109647:	e8 b1 6d ff ff       	call   c01003fd <__panic>
}
c010964c:	90                   	nop
c010964d:	c9                   	leave  
c010964e:	c3                   	ret    

c010964f <try_down>:

bool
try_down(semaphore_t *sem) {
c010964f:	55                   	push   %ebp
c0109650:	89 e5                	mov    %esp,%ebp
c0109652:	83 ec 18             	sub    $0x18,%esp
    bool intr_flag, ret = 0;
c0109655:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    local_intr_save(intr_flag);
c010965c:	e8 ec fd ff ff       	call   c010944d <__intr_save>
c0109661:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (sem->value > 0) {
c0109664:	8b 45 08             	mov    0x8(%ebp),%eax
c0109667:	8b 00                	mov    (%eax),%eax
c0109669:	85 c0                	test   %eax,%eax
c010966b:	7e 14                	jle    c0109681 <try_down+0x32>
        sem->value --, ret = 1;
c010966d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109670:	8b 00                	mov    (%eax),%eax
c0109672:	8d 50 ff             	lea    -0x1(%eax),%edx
c0109675:	8b 45 08             	mov    0x8(%ebp),%eax
c0109678:	89 10                	mov    %edx,(%eax)
c010967a:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    }
    local_intr_restore(intr_flag);
c0109681:	83 ec 0c             	sub    $0xc,%esp
c0109684:	ff 75 f0             	pushl  -0x10(%ebp)
c0109687:	e8 eb fd ff ff       	call   c0109477 <__intr_restore>
c010968c:	83 c4 10             	add    $0x10,%esp
    return ret;
c010968f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0109692:	c9                   	leave  
c0109693:	c3                   	ret    

c0109694 <monitor_init>:
#include <assert.h>


// Initialize monitor.
void     
monitor_init (monitor_t * mtp, size_t num_cv) {
c0109694:	55                   	push   %ebp
c0109695:	89 e5                	mov    %esp,%ebp
c0109697:	83 ec 18             	sub    $0x18,%esp
    int i;
    assert(num_cv>0);
c010969a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010969e:	75 16                	jne    c01096b6 <monitor_init+0x22>
c01096a0:	68 20 f0 10 c0       	push   $0xc010f020
c01096a5:	68 29 f0 10 c0       	push   $0xc010f029
c01096aa:	6a 0b                	push   $0xb
c01096ac:	68 3e f0 10 c0       	push   $0xc010f03e
c01096b1:	e8 47 6d ff ff       	call   c01003fd <__panic>
    mtp->next_count = 0;
c01096b6:	8b 45 08             	mov    0x8(%ebp),%eax
c01096b9:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    mtp->cv = NULL;
c01096c0:	8b 45 08             	mov    0x8(%ebp),%eax
c01096c3:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    sem_init(&(mtp->mutex), 1); //unlocked
c01096ca:	8b 45 08             	mov    0x8(%ebp),%eax
c01096cd:	83 ec 08             	sub    $0x8,%esp
c01096d0:	6a 01                	push   $0x1
c01096d2:	50                   	push   %eax
c01096d3:	e8 b3 fd ff ff       	call   c010948b <sem_init>
c01096d8:	83 c4 10             	add    $0x10,%esp
    sem_init(&(mtp->next), 0);
c01096db:	8b 45 08             	mov    0x8(%ebp),%eax
c01096de:	83 c0 0c             	add    $0xc,%eax
c01096e1:	83 ec 08             	sub    $0x8,%esp
c01096e4:	6a 00                	push   $0x0
c01096e6:	50                   	push   %eax
c01096e7:	e8 9f fd ff ff       	call   c010948b <sem_init>
c01096ec:	83 c4 10             	add    $0x10,%esp
    mtp->cv =(condvar_t *) kmalloc(sizeof(condvar_t)*num_cv);
c01096ef:	8b 55 0c             	mov    0xc(%ebp),%edx
c01096f2:	89 d0                	mov    %edx,%eax
c01096f4:	c1 e0 02             	shl    $0x2,%eax
c01096f7:	01 d0                	add    %edx,%eax
c01096f9:	c1 e0 02             	shl    $0x2,%eax
c01096fc:	83 ec 0c             	sub    $0xc,%esp
c01096ff:	50                   	push   %eax
c0109700:	e8 64 ba ff ff       	call   c0105169 <kmalloc>
c0109705:	83 c4 10             	add    $0x10,%esp
c0109708:	89 c2                	mov    %eax,%edx
c010970a:	8b 45 08             	mov    0x8(%ebp),%eax
c010970d:	89 50 1c             	mov    %edx,0x1c(%eax)
    assert(mtp->cv!=NULL);
c0109710:	8b 45 08             	mov    0x8(%ebp),%eax
c0109713:	8b 40 1c             	mov    0x1c(%eax),%eax
c0109716:	85 c0                	test   %eax,%eax
c0109718:	75 16                	jne    c0109730 <monitor_init+0x9c>
c010971a:	68 52 f0 10 c0       	push   $0xc010f052
c010971f:	68 29 f0 10 c0       	push   $0xc010f029
c0109724:	6a 11                	push   $0x11
c0109726:	68 3e f0 10 c0       	push   $0xc010f03e
c010972b:	e8 cd 6c ff ff       	call   c01003fd <__panic>
    for(i=0; i<num_cv; i++){
c0109730:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0109737:	eb 5f                	jmp    c0109798 <monitor_init+0x104>
        mtp->cv[i].count=0;
c0109739:	8b 45 08             	mov    0x8(%ebp),%eax
c010973c:	8b 48 1c             	mov    0x1c(%eax),%ecx
c010973f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109742:	89 d0                	mov    %edx,%eax
c0109744:	c1 e0 02             	shl    $0x2,%eax
c0109747:	01 d0                	add    %edx,%eax
c0109749:	c1 e0 02             	shl    $0x2,%eax
c010974c:	01 c8                	add    %ecx,%eax
c010974e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        sem_init(&(mtp->cv[i].sem),0);
c0109755:	8b 45 08             	mov    0x8(%ebp),%eax
c0109758:	8b 48 1c             	mov    0x1c(%eax),%ecx
c010975b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010975e:	89 d0                	mov    %edx,%eax
c0109760:	c1 e0 02             	shl    $0x2,%eax
c0109763:	01 d0                	add    %edx,%eax
c0109765:	c1 e0 02             	shl    $0x2,%eax
c0109768:	01 c8                	add    %ecx,%eax
c010976a:	83 ec 08             	sub    $0x8,%esp
c010976d:	6a 00                	push   $0x0
c010976f:	50                   	push   %eax
c0109770:	e8 16 fd ff ff       	call   c010948b <sem_init>
c0109775:	83 c4 10             	add    $0x10,%esp
        mtp->cv[i].owner=mtp;
c0109778:	8b 45 08             	mov    0x8(%ebp),%eax
c010977b:	8b 48 1c             	mov    0x1c(%eax),%ecx
c010977e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109781:	89 d0                	mov    %edx,%eax
c0109783:	c1 e0 02             	shl    $0x2,%eax
c0109786:	01 d0                	add    %edx,%eax
c0109788:	c1 e0 02             	shl    $0x2,%eax
c010978b:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c010978e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109791:	89 42 10             	mov    %eax,0x10(%edx)
    mtp->cv = NULL;
    sem_init(&(mtp->mutex), 1); //unlocked
    sem_init(&(mtp->next), 0);
    mtp->cv =(condvar_t *) kmalloc(sizeof(condvar_t)*num_cv);
    assert(mtp->cv!=NULL);
    for(i=0; i<num_cv; i++){
c0109794:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0109798:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010979b:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010979e:	72 99                	jb     c0109739 <monitor_init+0xa5>
        mtp->cv[i].count=0;
        sem_init(&(mtp->cv[i].sem),0);
        mtp->cv[i].owner=mtp;
    }
}
c01097a0:	90                   	nop
c01097a1:	c9                   	leave  
c01097a2:	c3                   	ret    

c01097a3 <cond_signal>:

// Unlock one of threads waiting on the condition variable. 
void 
cond_signal (condvar_t *cvp) {
c01097a3:	55                   	push   %ebp
c01097a4:	89 e5                	mov    %esp,%ebp
c01097a6:	83 ec 18             	sub    $0x18,%esp
    //LAB7 EXERCISE1: 2015010062
    cprintf("cond_signal begin: cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);  
c01097a9:	8b 45 08             	mov    0x8(%ebp),%eax
c01097ac:	8b 40 10             	mov    0x10(%eax),%eax
c01097af:	8b 50 18             	mov    0x18(%eax),%edx
c01097b2:	8b 45 08             	mov    0x8(%ebp),%eax
c01097b5:	8b 40 0c             	mov    0xc(%eax),%eax
c01097b8:	52                   	push   %edx
c01097b9:	50                   	push   %eax
c01097ba:	ff 75 08             	pushl  0x8(%ebp)
c01097bd:	68 60 f0 10 c0       	push   $0xc010f060
c01097c2:	e8 d0 6a ff ff       	call   c0100297 <cprintf>
c01097c7:	83 c4 10             	add    $0x10,%esp
    if(cvp->count > 0) {
c01097ca:	8b 45 08             	mov    0x8(%ebp),%eax
c01097cd:	8b 40 0c             	mov    0xc(%eax),%eax
c01097d0:	85 c0                	test   %eax,%eax
c01097d2:	7e 48                	jle    c010981c <cond_signal+0x79>
        monitor_t * mt = cvp->owner;
c01097d4:	8b 45 08             	mov    0x8(%ebp),%eax
c01097d7:	8b 40 10             	mov    0x10(%eax),%eax
c01097da:	89 45 f4             	mov    %eax,-0xc(%ebp)
        mt->next_count ++;
c01097dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01097e0:	8b 40 18             	mov    0x18(%eax),%eax
c01097e3:	8d 50 01             	lea    0x1(%eax),%edx
c01097e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01097e9:	89 50 18             	mov    %edx,0x18(%eax)
        up(&(cvp->sem));
c01097ec:	8b 45 08             	mov    0x8(%ebp),%eax
c01097ef:	83 ec 0c             	sub    $0xc,%esp
c01097f2:	50                   	push   %eax
c01097f3:	e8 00 fe ff ff       	call   c01095f8 <up>
c01097f8:	83 c4 10             	add    $0x10,%esp
        down(&(mt->next));
c01097fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01097fe:	83 c0 0c             	add    $0xc,%eax
c0109801:	83 ec 0c             	sub    $0xc,%esp
c0109804:	50                   	push   %eax
c0109805:	e8 0a fe ff ff       	call   c0109614 <down>
c010980a:	83 c4 10             	add    $0x10,%esp
        // after woken up
        mt->next_count--;
c010980d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109810:	8b 40 18             	mov    0x18(%eax),%eax
c0109813:	8d 50 ff             	lea    -0x1(%eax),%edx
c0109816:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109819:	89 50 18             	mov    %edx,0x18(%eax)
    }
    cprintf("cond_signal end: cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c010981c:	8b 45 08             	mov    0x8(%ebp),%eax
c010981f:	8b 40 10             	mov    0x10(%eax),%eax
c0109822:	8b 50 18             	mov    0x18(%eax),%edx
c0109825:	8b 45 08             	mov    0x8(%ebp),%eax
c0109828:	8b 40 0c             	mov    0xc(%eax),%eax
c010982b:	52                   	push   %edx
c010982c:	50                   	push   %eax
c010982d:	ff 75 08             	pushl  0x8(%ebp)
c0109830:	68 a8 f0 10 c0       	push   $0xc010f0a8
c0109835:	e8 5d 6a ff ff       	call   c0100297 <cprintf>
c010983a:	83 c4 10             	add    $0x10,%esp
}
c010983d:	90                   	nop
c010983e:	c9                   	leave  
c010983f:	c3                   	ret    

c0109840 <cond_wait>:

// Suspend calling thread on a condition variable waiting for condition Atomically unlocks 
// mutex and suspends calling thread on conditional variable after waking up locks mutex. Notice: mp is mutex semaphore for monitor's procedures
void
cond_wait (condvar_t *cvp) {
c0109840:	55                   	push   %ebp
c0109841:	89 e5                	mov    %esp,%ebp
c0109843:	83 ec 18             	sub    $0x18,%esp
    //LAB7 EXERCISE1: 2015010062
    cprintf("cond_wait begin:  cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c0109846:	8b 45 08             	mov    0x8(%ebp),%eax
c0109849:	8b 40 10             	mov    0x10(%eax),%eax
c010984c:	8b 50 18             	mov    0x18(%eax),%edx
c010984f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109852:	8b 40 0c             	mov    0xc(%eax),%eax
c0109855:	52                   	push   %edx
c0109856:	50                   	push   %eax
c0109857:	ff 75 08             	pushl  0x8(%ebp)
c010985a:	68 ec f0 10 c0       	push   $0xc010f0ec
c010985f:	e8 33 6a ff ff       	call   c0100297 <cprintf>
c0109864:	83 c4 10             	add    $0x10,%esp
    cvp->count ++;
c0109867:	8b 45 08             	mov    0x8(%ebp),%eax
c010986a:	8b 40 0c             	mov    0xc(%eax),%eax
c010986d:	8d 50 01             	lea    0x1(%eax),%edx
c0109870:	8b 45 08             	mov    0x8(%ebp),%eax
c0109873:	89 50 0c             	mov    %edx,0xc(%eax)
    monitor_t * mt = cvp->owner;
c0109876:	8b 45 08             	mov    0x8(%ebp),%eax
c0109879:	8b 40 10             	mov    0x10(%eax),%eax
c010987c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(mt->next_count > 0) {
c010987f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109882:	8b 40 18             	mov    0x18(%eax),%eax
c0109885:	85 c0                	test   %eax,%eax
c0109887:	7e 14                	jle    c010989d <cond_wait+0x5d>
        up(&(mt->next));
c0109889:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010988c:	83 c0 0c             	add    $0xc,%eax
c010988f:	83 ec 0c             	sub    $0xc,%esp
c0109892:	50                   	push   %eax
c0109893:	e8 60 fd ff ff       	call   c01095f8 <up>
c0109898:	83 c4 10             	add    $0x10,%esp
c010989b:	eb 0f                	jmp    c01098ac <cond_wait+0x6c>
    }
    else {
        up(&(mt->mutex));
c010989d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01098a0:	83 ec 0c             	sub    $0xc,%esp
c01098a3:	50                   	push   %eax
c01098a4:	e8 4f fd ff ff       	call   c01095f8 <up>
c01098a9:	83 c4 10             	add    $0x10,%esp
    }
    down(&(cvp->sem));
c01098ac:	8b 45 08             	mov    0x8(%ebp),%eax
c01098af:	83 ec 0c             	sub    $0xc,%esp
c01098b2:	50                   	push   %eax
c01098b3:	e8 5c fd ff ff       	call   c0109614 <down>
c01098b8:	83 c4 10             	add    $0x10,%esp
    cvp->count --;
c01098bb:	8b 45 08             	mov    0x8(%ebp),%eax
c01098be:	8b 40 0c             	mov    0xc(%eax),%eax
c01098c1:	8d 50 ff             	lea    -0x1(%eax),%edx
c01098c4:	8b 45 08             	mov    0x8(%ebp),%eax
c01098c7:	89 50 0c             	mov    %edx,0xc(%eax)
    cprintf("cond_wait end:  cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c01098ca:	8b 45 08             	mov    0x8(%ebp),%eax
c01098cd:	8b 40 10             	mov    0x10(%eax),%eax
c01098d0:	8b 50 18             	mov    0x18(%eax),%edx
c01098d3:	8b 45 08             	mov    0x8(%ebp),%eax
c01098d6:	8b 40 0c             	mov    0xc(%eax),%eax
c01098d9:	52                   	push   %edx
c01098da:	50                   	push   %eax
c01098db:	ff 75 08             	pushl  0x8(%ebp)
c01098de:	68 30 f1 10 c0       	push   $0xc010f130
c01098e3:	e8 af 69 ff ff       	call   c0100297 <cprintf>
c01098e8:	83 c4 10             	add    $0x10,%esp
}
c01098eb:	90                   	nop
c01098ec:	c9                   	leave  
c01098ed:	c3                   	ret    

c01098ee <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c01098ee:	55                   	push   %ebp
c01098ef:	89 e5                	mov    %esp,%ebp
    return page - pages;
c01098f1:	8b 45 08             	mov    0x8(%ebp),%eax
c01098f4:	8b 15 f8 71 1c c0    	mov    0xc01c71f8,%edx
c01098fa:	29 d0                	sub    %edx,%eax
c01098fc:	c1 f8 05             	sar    $0x5,%eax
}
c01098ff:	5d                   	pop    %ebp
c0109900:	c3                   	ret    

c0109901 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0109901:	55                   	push   %ebp
c0109902:	89 e5                	mov    %esp,%ebp
    return page2ppn(page) << PGSHIFT;
c0109904:	ff 75 08             	pushl  0x8(%ebp)
c0109907:	e8 e2 ff ff ff       	call   c01098ee <page2ppn>
c010990c:	83 c4 04             	add    $0x4,%esp
c010990f:	c1 e0 0c             	shl    $0xc,%eax
}
c0109912:	c9                   	leave  
c0109913:	c3                   	ret    

c0109914 <page2kva>:
    }
    return &pages[PPN(pa)];
}

static inline void *
page2kva(struct Page *page) {
c0109914:	55                   	push   %ebp
c0109915:	89 e5                	mov    %esp,%ebp
c0109917:	83 ec 18             	sub    $0x18,%esp
    return KADDR(page2pa(page));
c010991a:	ff 75 08             	pushl  0x8(%ebp)
c010991d:	e8 df ff ff ff       	call   c0109901 <page2pa>
c0109922:	83 c4 04             	add    $0x4,%esp
c0109925:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109928:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010992b:	c1 e8 0c             	shr    $0xc,%eax
c010992e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109931:	a1 80 4f 1c c0       	mov    0xc01c4f80,%eax
c0109936:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0109939:	72 14                	jb     c010994f <page2kva+0x3b>
c010993b:	ff 75 f4             	pushl  -0xc(%ebp)
c010993e:	68 74 f1 10 c0       	push   $0xc010f174
c0109943:	6a 65                	push   $0x65
c0109945:	68 97 f1 10 c0       	push   $0xc010f197
c010994a:	e8 ae 6a ff ff       	call   c01003fd <__panic>
c010994f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109952:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c0109957:	c9                   	leave  
c0109958:	c3                   	ret    

c0109959 <swapfs_init>:
#include <ide.h>
#include <pmm.h>
#include <assert.h>

void
swapfs_init(void) {
c0109959:	55                   	push   %ebp
c010995a:	89 e5                	mov    %esp,%ebp
c010995c:	83 ec 08             	sub    $0x8,%esp
    static_assert((PGSIZE % SECTSIZE) == 0);
    if (!ide_device_valid(SWAP_DEV_NO)) {
c010995f:	83 ec 0c             	sub    $0xc,%esp
c0109962:	6a 01                	push   $0x1
c0109964:	e8 70 78 ff ff       	call   c01011d9 <ide_device_valid>
c0109969:	83 c4 10             	add    $0x10,%esp
c010996c:	85 c0                	test   %eax,%eax
c010996e:	75 14                	jne    c0109984 <swapfs_init+0x2b>
        panic("swap fs isn't available.\n");
c0109970:	83 ec 04             	sub    $0x4,%esp
c0109973:	68 a5 f1 10 c0       	push   $0xc010f1a5
c0109978:	6a 0d                	push   $0xd
c010997a:	68 bf f1 10 c0       	push   $0xc010f1bf
c010997f:	e8 79 6a ff ff       	call   c01003fd <__panic>
    }
    max_swap_offset = ide_device_size(SWAP_DEV_NO) / (PGSIZE / SECTSIZE);
c0109984:	83 ec 0c             	sub    $0xc,%esp
c0109987:	6a 01                	push   $0x1
c0109989:	e8 8b 78 ff ff       	call   c0101219 <ide_device_size>
c010998e:	83 c4 10             	add    $0x10,%esp
c0109991:	c1 e8 03             	shr    $0x3,%eax
c0109994:	a3 bc 71 1c c0       	mov    %eax,0xc01c71bc
}
c0109999:	90                   	nop
c010999a:	c9                   	leave  
c010999b:	c3                   	ret    

c010999c <swapfs_read>:

int
swapfs_read(swap_entry_t entry, struct Page *page) {
c010999c:	55                   	push   %ebp
c010999d:	89 e5                	mov    %esp,%ebp
c010999f:	83 ec 18             	sub    $0x18,%esp
    return ide_read_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c01099a2:	83 ec 0c             	sub    $0xc,%esp
c01099a5:	ff 75 0c             	pushl  0xc(%ebp)
c01099a8:	e8 67 ff ff ff       	call   c0109914 <page2kva>
c01099ad:	83 c4 10             	add    $0x10,%esp
c01099b0:	89 c2                	mov    %eax,%edx
c01099b2:	8b 45 08             	mov    0x8(%ebp),%eax
c01099b5:	c1 e8 08             	shr    $0x8,%eax
c01099b8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01099bb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01099bf:	74 0a                	je     c01099cb <swapfs_read+0x2f>
c01099c1:	a1 bc 71 1c c0       	mov    0xc01c71bc,%eax
c01099c6:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c01099c9:	72 14                	jb     c01099df <swapfs_read+0x43>
c01099cb:	ff 75 08             	pushl  0x8(%ebp)
c01099ce:	68 d0 f1 10 c0       	push   $0xc010f1d0
c01099d3:	6a 14                	push   $0x14
c01099d5:	68 bf f1 10 c0       	push   $0xc010f1bf
c01099da:	e8 1e 6a ff ff       	call   c01003fd <__panic>
c01099df:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01099e2:	c1 e0 03             	shl    $0x3,%eax
c01099e5:	6a 08                	push   $0x8
c01099e7:	52                   	push   %edx
c01099e8:	50                   	push   %eax
c01099e9:	6a 01                	push   $0x1
c01099eb:	e8 69 78 ff ff       	call   c0101259 <ide_read_secs>
c01099f0:	83 c4 10             	add    $0x10,%esp
}
c01099f3:	c9                   	leave  
c01099f4:	c3                   	ret    

c01099f5 <swapfs_write>:

int
swapfs_write(swap_entry_t entry, struct Page *page) {
c01099f5:	55                   	push   %ebp
c01099f6:	89 e5                	mov    %esp,%ebp
c01099f8:	83 ec 18             	sub    $0x18,%esp
    return ide_write_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c01099fb:	83 ec 0c             	sub    $0xc,%esp
c01099fe:	ff 75 0c             	pushl  0xc(%ebp)
c0109a01:	e8 0e ff ff ff       	call   c0109914 <page2kva>
c0109a06:	83 c4 10             	add    $0x10,%esp
c0109a09:	89 c2                	mov    %eax,%edx
c0109a0b:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a0e:	c1 e8 08             	shr    $0x8,%eax
c0109a11:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109a14:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109a18:	74 0a                	je     c0109a24 <swapfs_write+0x2f>
c0109a1a:	a1 bc 71 1c c0       	mov    0xc01c71bc,%eax
c0109a1f:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0109a22:	72 14                	jb     c0109a38 <swapfs_write+0x43>
c0109a24:	ff 75 08             	pushl  0x8(%ebp)
c0109a27:	68 d0 f1 10 c0       	push   $0xc010f1d0
c0109a2c:	6a 19                	push   $0x19
c0109a2e:	68 bf f1 10 c0       	push   $0xc010f1bf
c0109a33:	e8 c5 69 ff ff       	call   c01003fd <__panic>
c0109a38:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109a3b:	c1 e0 03             	shl    $0x3,%eax
c0109a3e:	6a 08                	push   $0x8
c0109a40:	52                   	push   %edx
c0109a41:	50                   	push   %eax
c0109a42:	6a 01                	push   $0x1
c0109a44:	e8 3a 7a ff ff       	call   c0101483 <ide_write_secs>
c0109a49:	83 c4 10             	add    $0x10,%esp
}
c0109a4c:	c9                   	leave  
c0109a4d:	c3                   	ret    

c0109a4e <kernel_thread_entry>:
.text
.globl kernel_thread_entry
kernel_thread_entry:        # void kernel_thread(void)

    pushl %edx              # push arg
c0109a4e:	52                   	push   %edx
    call *%ebx              # call fn
c0109a4f:	ff d3                	call   *%ebx

    pushl %eax              # save the return value of fn(arg)
c0109a51:	50                   	push   %eax
    call do_exit            # call do_exit to terminate current thread
c0109a52:	e8 96 0c 00 00       	call   c010a6ed <do_exit>

c0109a57 <switch_to>:
.text
.globl switch_to
switch_to:                      # switch_to(from, to)

    # save from's registers
    movl 4(%esp), %eax          # eax points to from
c0109a57:	8b 44 24 04          	mov    0x4(%esp),%eax
    popl 0(%eax)                # save eip !popl
c0109a5b:	8f 00                	popl   (%eax)
    movl %esp, 4(%eax)
c0109a5d:	89 60 04             	mov    %esp,0x4(%eax)
    movl %ebx, 8(%eax)
c0109a60:	89 58 08             	mov    %ebx,0x8(%eax)
    movl %ecx, 12(%eax)
c0109a63:	89 48 0c             	mov    %ecx,0xc(%eax)
    movl %edx, 16(%eax)
c0109a66:	89 50 10             	mov    %edx,0x10(%eax)
    movl %esi, 20(%eax)
c0109a69:	89 70 14             	mov    %esi,0x14(%eax)
    movl %edi, 24(%eax)
c0109a6c:	89 78 18             	mov    %edi,0x18(%eax)
    movl %ebp, 28(%eax)
c0109a6f:	89 68 1c             	mov    %ebp,0x1c(%eax)

    # restore to's registers
    movl 4(%esp), %eax          # not 8(%esp): popped return address already
c0109a72:	8b 44 24 04          	mov    0x4(%esp),%eax
                                # eax now points to to
    movl 28(%eax), %ebp
c0109a76:	8b 68 1c             	mov    0x1c(%eax),%ebp
    movl 24(%eax), %edi
c0109a79:	8b 78 18             	mov    0x18(%eax),%edi
    movl 20(%eax), %esi
c0109a7c:	8b 70 14             	mov    0x14(%eax),%esi
    movl 16(%eax), %edx
c0109a7f:	8b 50 10             	mov    0x10(%eax),%edx
    movl 12(%eax), %ecx
c0109a82:	8b 48 0c             	mov    0xc(%eax),%ecx
    movl 8(%eax), %ebx
c0109a85:	8b 58 08             	mov    0x8(%eax),%ebx
    movl 4(%eax), %esp
c0109a88:	8b 60 04             	mov    0x4(%eax),%esp

    pushl 0(%eax)               # push eip
c0109a8b:	ff 30                	pushl  (%eax)

    ret
c0109a8d:	c3                   	ret    

c0109a8e <timer_init>:
#define le2timer(le, member)            \
to_struct((le), timer_t, member)

// init a timer
static inline timer_t *
timer_init(timer_t *timer, struct proc_struct *proc, int expires) {
c0109a8e:	55                   	push   %ebp
c0109a8f:	89 e5                	mov    %esp,%ebp
c0109a91:	83 ec 10             	sub    $0x10,%esp
    timer->expires = expires;
c0109a94:	8b 55 10             	mov    0x10(%ebp),%edx
c0109a97:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a9a:	89 10                	mov    %edx,(%eax)
    timer->proc = proc;
c0109a9c:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a9f:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109aa2:	89 50 04             	mov    %edx,0x4(%eax)
    list_init(&(timer->timer_link));
c0109aa5:	8b 45 08             	mov    0x8(%ebp),%eax
c0109aa8:	83 c0 08             	add    $0x8,%eax
c0109aab:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0109aae:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109ab1:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0109ab4:	89 50 04             	mov    %edx,0x4(%eax)
c0109ab7:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109aba:	8b 50 04             	mov    0x4(%eax),%edx
c0109abd:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109ac0:	89 10                	mov    %edx,(%eax)
    return timer;
c0109ac2:	8b 45 08             	mov    0x8(%ebp),%eax
}
c0109ac5:	c9                   	leave  
c0109ac6:	c3                   	ret    

c0109ac7 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0109ac7:	55                   	push   %ebp
c0109ac8:	89 e5                	mov    %esp,%ebp
c0109aca:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0109acd:	9c                   	pushf  
c0109ace:	58                   	pop    %eax
c0109acf:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0109ad2:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0109ad5:	25 00 02 00 00       	and    $0x200,%eax
c0109ada:	85 c0                	test   %eax,%eax
c0109adc:	74 0c                	je     c0109aea <__intr_save+0x23>
        intr_disable();
c0109ade:	e8 d9 86 ff ff       	call   c01021bc <intr_disable>
        return 1;
c0109ae3:	b8 01 00 00 00       	mov    $0x1,%eax
c0109ae8:	eb 05                	jmp    c0109aef <__intr_save+0x28>
    }
    return 0;
c0109aea:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109aef:	c9                   	leave  
c0109af0:	c3                   	ret    

c0109af1 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0109af1:	55                   	push   %ebp
c0109af2:	89 e5                	mov    %esp,%ebp
c0109af4:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0109af7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0109afb:	74 05                	je     c0109b02 <__intr_restore+0x11>
        intr_enable();
c0109afd:	e8 b3 86 ff ff       	call   c01021b5 <intr_enable>
    }
}
c0109b02:	90                   	nop
c0109b03:	c9                   	leave  
c0109b04:	c3                   	ret    

c0109b05 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0109b05:	55                   	push   %ebp
c0109b06:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0109b08:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b0b:	8b 15 f8 71 1c c0    	mov    0xc01c71f8,%edx
c0109b11:	29 d0                	sub    %edx,%eax
c0109b13:	c1 f8 05             	sar    $0x5,%eax
}
c0109b16:	5d                   	pop    %ebp
c0109b17:	c3                   	ret    

c0109b18 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0109b18:	55                   	push   %ebp
c0109b19:	89 e5                	mov    %esp,%ebp
    return page2ppn(page) << PGSHIFT;
c0109b1b:	ff 75 08             	pushl  0x8(%ebp)
c0109b1e:	e8 e2 ff ff ff       	call   c0109b05 <page2ppn>
c0109b23:	83 c4 04             	add    $0x4,%esp
c0109b26:	c1 e0 0c             	shl    $0xc,%eax
}
c0109b29:	c9                   	leave  
c0109b2a:	c3                   	ret    

c0109b2b <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c0109b2b:	55                   	push   %ebp
c0109b2c:	89 e5                	mov    %esp,%ebp
c0109b2e:	83 ec 08             	sub    $0x8,%esp
    if (PPN(pa) >= npage) {
c0109b31:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b34:	c1 e8 0c             	shr    $0xc,%eax
c0109b37:	89 c2                	mov    %eax,%edx
c0109b39:	a1 80 4f 1c c0       	mov    0xc01c4f80,%eax
c0109b3e:	39 c2                	cmp    %eax,%edx
c0109b40:	72 14                	jb     c0109b56 <pa2page+0x2b>
        panic("pa2page called with invalid pa");
c0109b42:	83 ec 04             	sub    $0x4,%esp
c0109b45:	68 f0 f1 10 c0       	push   $0xc010f1f0
c0109b4a:	6a 5e                	push   $0x5e
c0109b4c:	68 0f f2 10 c0       	push   $0xc010f20f
c0109b51:	e8 a7 68 ff ff       	call   c01003fd <__panic>
    }
    return &pages[PPN(pa)];
c0109b56:	a1 f8 71 1c c0       	mov    0xc01c71f8,%eax
c0109b5b:	8b 55 08             	mov    0x8(%ebp),%edx
c0109b5e:	c1 ea 0c             	shr    $0xc,%edx
c0109b61:	c1 e2 05             	shl    $0x5,%edx
c0109b64:	01 d0                	add    %edx,%eax
}
c0109b66:	c9                   	leave  
c0109b67:	c3                   	ret    

c0109b68 <page2kva>:

static inline void *
page2kva(struct Page *page) {
c0109b68:	55                   	push   %ebp
c0109b69:	89 e5                	mov    %esp,%ebp
c0109b6b:	83 ec 18             	sub    $0x18,%esp
    return KADDR(page2pa(page));
c0109b6e:	ff 75 08             	pushl  0x8(%ebp)
c0109b71:	e8 a2 ff ff ff       	call   c0109b18 <page2pa>
c0109b76:	83 c4 04             	add    $0x4,%esp
c0109b79:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109b7c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109b7f:	c1 e8 0c             	shr    $0xc,%eax
c0109b82:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109b85:	a1 80 4f 1c c0       	mov    0xc01c4f80,%eax
c0109b8a:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0109b8d:	72 14                	jb     c0109ba3 <page2kva+0x3b>
c0109b8f:	ff 75 f4             	pushl  -0xc(%ebp)
c0109b92:	68 20 f2 10 c0       	push   $0xc010f220
c0109b97:	6a 65                	push   $0x65
c0109b99:	68 0f f2 10 c0       	push   $0xc010f20f
c0109b9e:	e8 5a 68 ff ff       	call   c01003fd <__panic>
c0109ba3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109ba6:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c0109bab:	c9                   	leave  
c0109bac:	c3                   	ret    

c0109bad <kva2page>:

static inline struct Page *
kva2page(void *kva) {
c0109bad:	55                   	push   %ebp
c0109bae:	89 e5                	mov    %esp,%ebp
c0109bb0:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PADDR(kva));
c0109bb3:	8b 45 08             	mov    0x8(%ebp),%eax
c0109bb6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109bb9:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c0109bc0:	77 14                	ja     c0109bd6 <kva2page+0x29>
c0109bc2:	ff 75 f4             	pushl  -0xc(%ebp)
c0109bc5:	68 44 f2 10 c0       	push   $0xc010f244
c0109bca:	6a 6a                	push   $0x6a
c0109bcc:	68 0f f2 10 c0       	push   $0xc010f20f
c0109bd1:	e8 27 68 ff ff       	call   c01003fd <__panic>
c0109bd6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109bd9:	05 00 00 00 40       	add    $0x40000000,%eax
c0109bde:	83 ec 0c             	sub    $0xc,%esp
c0109be1:	50                   	push   %eax
c0109be2:	e8 44 ff ff ff       	call   c0109b2b <pa2page>
c0109be7:	83 c4 10             	add    $0x10,%esp
}
c0109bea:	c9                   	leave  
c0109beb:	c3                   	ret    

c0109bec <mm_count_inc>:

static inline int
mm_count_inc(struct mm_struct *mm) {
c0109bec:	55                   	push   %ebp
c0109bed:	89 e5                	mov    %esp,%ebp
    mm->mm_count += 1;
c0109bef:	8b 45 08             	mov    0x8(%ebp),%eax
c0109bf2:	8b 40 18             	mov    0x18(%eax),%eax
c0109bf5:	8d 50 01             	lea    0x1(%eax),%edx
c0109bf8:	8b 45 08             	mov    0x8(%ebp),%eax
c0109bfb:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c0109bfe:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c01:	8b 40 18             	mov    0x18(%eax),%eax
}
c0109c04:	5d                   	pop    %ebp
c0109c05:	c3                   	ret    

c0109c06 <mm_count_dec>:

static inline int
mm_count_dec(struct mm_struct *mm) {
c0109c06:	55                   	push   %ebp
c0109c07:	89 e5                	mov    %esp,%ebp
    mm->mm_count -= 1;
c0109c09:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c0c:	8b 40 18             	mov    0x18(%eax),%eax
c0109c0f:	8d 50 ff             	lea    -0x1(%eax),%edx
c0109c12:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c15:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c0109c18:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c1b:	8b 40 18             	mov    0x18(%eax),%eax
}
c0109c1e:	5d                   	pop    %ebp
c0109c1f:	c3                   	ret    

c0109c20 <lock_mm>:

static inline void
lock_mm(struct mm_struct *mm) {
c0109c20:	55                   	push   %ebp
c0109c21:	89 e5                	mov    %esp,%ebp
c0109c23:	83 ec 08             	sub    $0x8,%esp
    if (mm != NULL) {
c0109c26:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0109c2a:	74 29                	je     c0109c55 <lock_mm+0x35>
        down(&(mm->mm_sem));
c0109c2c:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c2f:	83 c0 1c             	add    $0x1c,%eax
c0109c32:	83 ec 0c             	sub    $0xc,%esp
c0109c35:	50                   	push   %eax
c0109c36:	e8 d9 f9 ff ff       	call   c0109614 <down>
c0109c3b:	83 c4 10             	add    $0x10,%esp
        if (current != NULL) {
c0109c3e:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c0109c43:	85 c0                	test   %eax,%eax
c0109c45:	74 0e                	je     c0109c55 <lock_mm+0x35>
            mm->locked_by = current->pid;
c0109c47:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c0109c4c:	8b 50 04             	mov    0x4(%eax),%edx
c0109c4f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c52:	89 50 28             	mov    %edx,0x28(%eax)
        }
    }
}
c0109c55:	90                   	nop
c0109c56:	c9                   	leave  
c0109c57:	c3                   	ret    

c0109c58 <unlock_mm>:

static inline void
unlock_mm(struct mm_struct *mm) {
c0109c58:	55                   	push   %ebp
c0109c59:	89 e5                	mov    %esp,%ebp
c0109c5b:	83 ec 08             	sub    $0x8,%esp
    if (mm != NULL) {
c0109c5e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0109c62:	74 1c                	je     c0109c80 <unlock_mm+0x28>
        up(&(mm->mm_sem));
c0109c64:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c67:	83 c0 1c             	add    $0x1c,%eax
c0109c6a:	83 ec 0c             	sub    $0xc,%esp
c0109c6d:	50                   	push   %eax
c0109c6e:	e8 85 f9 ff ff       	call   c01095f8 <up>
c0109c73:	83 c4 10             	add    $0x10,%esp
        mm->locked_by = 0;
c0109c76:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c79:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    }
}
c0109c80:	90                   	nop
c0109c81:	c9                   	leave  
c0109c82:	c3                   	ret    

c0109c83 <alloc_proc>:
void forkrets(struct trapframe *tf);
void switch_to(struct context *from, struct context *to);

// alloc_proc - alloc a proc_struct and init all fields of proc_struct
static struct proc_struct *
alloc_proc(void) {
c0109c83:	55                   	push   %ebp
c0109c84:	89 e5                	mov    %esp,%ebp
c0109c86:	83 ec 18             	sub    $0x18,%esp
    struct proc_struct *proc = kmalloc(sizeof(struct proc_struct));
c0109c89:	83 ec 0c             	sub    $0xc,%esp
c0109c8c:	68 c4 00 00 00       	push   $0xc4
c0109c91:	e8 d3 b4 ff ff       	call   c0105169 <kmalloc>
c0109c96:	83 c4 10             	add    $0x10,%esp
c0109c99:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (proc != NULL) {
c0109c9c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109ca0:	0f 84 43 01 00 00    	je     c0109de9 <alloc_proc+0x166>
     *     int time_slice;                             // time slice for occupying the CPU
     *     skew_heap_entry_t lab6_run_pool;            // FOR LAB6 ONLY: the entry in the run pool
     *     uint32_t lab6_stride;                       // FOR LAB6 ONLY: the current stride of the process
     *     uint32_t lab6_priority;                     // FOR LAB6 ONLY: the priority of process, set by lab6_set_priority(uint32_t)
     */
        proc->state = PROC_UNINIT;
c0109ca6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109ca9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        proc->pid = -1;         // an invalid pid
c0109caf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109cb2:	c7 40 04 ff ff ff ff 	movl   $0xffffffff,0x4(%eax)
        proc->runs = 0;
c0109cb9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109cbc:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        proc->kstack = 0;
c0109cc3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109cc6:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        proc->need_resched = 0;
c0109ccd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109cd0:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
        proc->parent = NULL;
c0109cd7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109cda:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
        proc->mm = NULL;
c0109ce1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109ce4:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
        proc->tf = NULL;
c0109ceb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109cee:	c7 40 3c 00 00 00 00 	movl   $0x0,0x3c(%eax)
        proc->cr3 = boot_cr3;   // kernel threads share boot_cr3
c0109cf5:	8b 15 f4 71 1c c0    	mov    0xc01c71f4,%edx
c0109cfb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109cfe:	89 50 40             	mov    %edx,0x40(%eax)
        proc->flags = 0;
c0109d01:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109d04:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
        // NEW
        proc->wait_state = 0;
c0109d0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109d0e:	c7 80 90 00 00 00 00 	movl   $0x0,0x90(%eax)
c0109d15:	00 00 00 
        proc->cptr = NULL;
c0109d18:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109d1b:	c7 80 94 00 00 00 00 	movl   $0x0,0x94(%eax)
c0109d22:	00 00 00 
        proc->yptr = NULL;
c0109d25:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109d28:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
c0109d2f:	00 00 00 
        proc->optr = NULL;
c0109d32:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109d35:	c7 80 9c 00 00 00 00 	movl   $0x0,0x9c(%eax)
c0109d3c:	00 00 00 
        // NEW IN LAB 6
        proc->rq = NULL;
c0109d3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109d42:	c7 80 a0 00 00 00 00 	movl   $0x0,0xa0(%eax)
c0109d49:	00 00 00 
        list_init(&(proc->run_link));
c0109d4c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109d4f:	05 a4 00 00 00       	add    $0xa4,%eax
c0109d54:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109d57:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109d5a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0109d5d:	89 50 04             	mov    %edx,0x4(%eax)
c0109d60:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109d63:	8b 50 04             	mov    0x4(%eax),%edx
c0109d66:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109d69:	89 10                	mov    %edx,(%eax)
        proc->time_slice = 0;
c0109d6b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109d6e:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
c0109d75:	00 00 00 
        // for stride
        skew_heap_init(&(proc->lab6_run_pool));
c0109d78:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109d7b:	05 b0 00 00 00       	add    $0xb0,%eax
c0109d80:	89 45 ec             	mov    %eax,-0x14(%ebp)
     compare_f comp) __attribute__((always_inline));

static inline void
skew_heap_init(skew_heap_entry_t *a)
{
     a->left = a->right = a->parent = NULL;
c0109d83:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109d86:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0109d8c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109d8f:	8b 10                	mov    (%eax),%edx
c0109d91:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109d94:	89 50 08             	mov    %edx,0x8(%eax)
c0109d97:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109d9a:	8b 50 08             	mov    0x8(%eax),%edx
c0109d9d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109da0:	89 50 04             	mov    %edx,0x4(%eax)
        proc->lab6_stride = 0;
c0109da3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109da6:	c7 80 bc 00 00 00 00 	movl   $0x0,0xbc(%eax)
c0109dad:	00 00 00 
        proc->lab6_priority = 1;
c0109db0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109db3:	c7 80 c0 00 00 00 01 	movl   $0x1,0xc0(%eax)
c0109dba:	00 00 00 

        memset(&(proc->context), 0, sizeof(struct context));
c0109dbd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109dc0:	83 c0 1c             	add    $0x1c,%eax
c0109dc3:	83 ec 04             	sub    $0x4,%esp
c0109dc6:	6a 20                	push   $0x20
c0109dc8:	6a 00                	push   $0x0
c0109dca:	50                   	push   %eax
c0109dcb:	e8 c5 26 00 00       	call   c010c495 <memset>
c0109dd0:	83 c4 10             	add    $0x10,%esp
        memset(proc->name, 0, sizeof(char) * (PROC_NAME_LEN + 1));
c0109dd3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109dd6:	83 c0 48             	add    $0x48,%eax
c0109dd9:	83 ec 04             	sub    $0x4,%esp
c0109ddc:	6a 33                	push   $0x33
c0109dde:	6a 00                	push   $0x0
c0109de0:	50                   	push   %eax
c0109de1:	e8 af 26 00 00       	call   c010c495 <memset>
c0109de6:	83 c4 10             	add    $0x10,%esp
    }
    return proc;
c0109de9:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0109dec:	c9                   	leave  
c0109ded:	c3                   	ret    

c0109dee <set_proc_name>:

// set_proc_name - set the name of proc
char *
set_proc_name(struct proc_struct *proc, const char *name) {
c0109dee:	55                   	push   %ebp
c0109def:	89 e5                	mov    %esp,%ebp
c0109df1:	83 ec 08             	sub    $0x8,%esp
    memset(proc->name, 0, sizeof(proc->name));
c0109df4:	8b 45 08             	mov    0x8(%ebp),%eax
c0109df7:	83 c0 48             	add    $0x48,%eax
c0109dfa:	83 ec 04             	sub    $0x4,%esp
c0109dfd:	6a 33                	push   $0x33
c0109dff:	6a 00                	push   $0x0
c0109e01:	50                   	push   %eax
c0109e02:	e8 8e 26 00 00       	call   c010c495 <memset>
c0109e07:	83 c4 10             	add    $0x10,%esp
    return memcpy(proc->name, name, PROC_NAME_LEN);
c0109e0a:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e0d:	83 c0 48             	add    $0x48,%eax
c0109e10:	83 ec 04             	sub    $0x4,%esp
c0109e13:	6a 32                	push   $0x32
c0109e15:	ff 75 0c             	pushl  0xc(%ebp)
c0109e18:	50                   	push   %eax
c0109e19:	e8 5a 27 00 00       	call   c010c578 <memcpy>
c0109e1e:	83 c4 10             	add    $0x10,%esp
}
c0109e21:	c9                   	leave  
c0109e22:	c3                   	ret    

c0109e23 <get_proc_name>:

// get_proc_name - get the name of proc
char *
get_proc_name(struct proc_struct *proc) {
c0109e23:	55                   	push   %ebp
c0109e24:	89 e5                	mov    %esp,%ebp
c0109e26:	83 ec 08             	sub    $0x8,%esp
    static char name[PROC_NAME_LEN + 1];
    memset(name, 0, sizeof(name));
c0109e29:	83 ec 04             	sub    $0x4,%esp
c0109e2c:	6a 33                	push   $0x33
c0109e2e:	6a 00                	push   $0x0
c0109e30:	68 60 70 1c c0       	push   $0xc01c7060
c0109e35:	e8 5b 26 00 00       	call   c010c495 <memset>
c0109e3a:	83 c4 10             	add    $0x10,%esp
    return memcpy(name, proc->name, PROC_NAME_LEN);
c0109e3d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e40:	83 c0 48             	add    $0x48,%eax
c0109e43:	83 ec 04             	sub    $0x4,%esp
c0109e46:	6a 32                	push   $0x32
c0109e48:	50                   	push   %eax
c0109e49:	68 60 70 1c c0       	push   $0xc01c7060
c0109e4e:	e8 25 27 00 00       	call   c010c578 <memcpy>
c0109e53:	83 c4 10             	add    $0x10,%esp
}
c0109e56:	c9                   	leave  
c0109e57:	c3                   	ret    

c0109e58 <set_links>:

// set_links - set the relation links of process
static void
set_links(struct proc_struct *proc) {
c0109e58:	55                   	push   %ebp
c0109e59:	89 e5                	mov    %esp,%ebp
c0109e5b:	83 ec 20             	sub    $0x20,%esp
    list_add(&proc_list, &(proc->list_link));
c0109e5e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e61:	83 c0 7c             	add    $0x7c,%eax
c0109e64:	c7 45 fc dc 72 1c c0 	movl   $0xc01c72dc,-0x4(%ebp)
c0109e6b:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0109e6e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109e71:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109e74:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0109e77:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0109e7a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109e7d:	8b 40 04             	mov    0x4(%eax),%eax
c0109e80:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0109e83:	89 55 ec             	mov    %edx,-0x14(%ebp)
c0109e86:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109e89:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0109e8c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0109e8f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109e92:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0109e95:	89 10                	mov    %edx,(%eax)
c0109e97:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109e9a:	8b 10                	mov    (%eax),%edx
c0109e9c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109e9f:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0109ea2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109ea5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0109ea8:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0109eab:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109eae:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0109eb1:	89 10                	mov    %edx,(%eax)
    proc->yptr = NULL;
c0109eb3:	8b 45 08             	mov    0x8(%ebp),%eax
c0109eb6:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
c0109ebd:	00 00 00 
    if ((proc->optr = proc->parent->cptr) != NULL) {
c0109ec0:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ec3:	8b 40 14             	mov    0x14(%eax),%eax
c0109ec6:	8b 90 94 00 00 00    	mov    0x94(%eax),%edx
c0109ecc:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ecf:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c0109ed5:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ed8:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c0109ede:	85 c0                	test   %eax,%eax
c0109ee0:	74 12                	je     c0109ef4 <set_links+0x9c>
        proc->optr->yptr = proc;
c0109ee2:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ee5:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c0109eeb:	8b 55 08             	mov    0x8(%ebp),%edx
c0109eee:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    }
    proc->parent->cptr = proc;
c0109ef4:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ef7:	8b 40 14             	mov    0x14(%eax),%eax
c0109efa:	8b 55 08             	mov    0x8(%ebp),%edx
c0109efd:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    nr_process ++;
c0109f03:	a1 40 70 1c c0       	mov    0xc01c7040,%eax
c0109f08:	83 c0 01             	add    $0x1,%eax
c0109f0b:	a3 40 70 1c c0       	mov    %eax,0xc01c7040
}
c0109f10:	90                   	nop
c0109f11:	c9                   	leave  
c0109f12:	c3                   	ret    

c0109f13 <remove_links>:

// remove_links - clean the relation links of process
static void
remove_links(struct proc_struct *proc) {
c0109f13:	55                   	push   %ebp
c0109f14:	89 e5                	mov    %esp,%ebp
c0109f16:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->list_link));
c0109f19:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f1c:	83 c0 7c             	add    $0x7c,%eax
c0109f1f:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0109f22:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109f25:	8b 40 04             	mov    0x4(%eax),%eax
c0109f28:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0109f2b:	8b 12                	mov    (%edx),%edx
c0109f2d:	89 55 f8             	mov    %edx,-0x8(%ebp)
c0109f30:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0109f33:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0109f36:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109f39:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0109f3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109f3f:	8b 55 f8             	mov    -0x8(%ebp),%edx
c0109f42:	89 10                	mov    %edx,(%eax)
    if (proc->optr != NULL) {
c0109f44:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f47:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c0109f4d:	85 c0                	test   %eax,%eax
c0109f4f:	74 18                	je     c0109f69 <remove_links+0x56>
        proc->optr->yptr = proc->yptr;
c0109f51:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f54:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c0109f5a:	8b 55 08             	mov    0x8(%ebp),%edx
c0109f5d:	8b 92 98 00 00 00    	mov    0x98(%edx),%edx
c0109f63:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    }
    if (proc->yptr != NULL) {
c0109f69:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f6c:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c0109f72:	85 c0                	test   %eax,%eax
c0109f74:	74 1a                	je     c0109f90 <remove_links+0x7d>
        proc->yptr->optr = proc->optr;
c0109f76:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f79:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c0109f7f:	8b 55 08             	mov    0x8(%ebp),%edx
c0109f82:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c0109f88:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c0109f8e:	eb 15                	jmp    c0109fa5 <remove_links+0x92>
    }
    else {
       proc->parent->cptr = proc->optr;
c0109f90:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f93:	8b 40 14             	mov    0x14(%eax),%eax
c0109f96:	8b 55 08             	mov    0x8(%ebp),%edx
c0109f99:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c0109f9f:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    }
    nr_process --;
c0109fa5:	a1 40 70 1c c0       	mov    0xc01c7040,%eax
c0109faa:	83 e8 01             	sub    $0x1,%eax
c0109fad:	a3 40 70 1c c0       	mov    %eax,0xc01c7040
}
c0109fb2:	90                   	nop
c0109fb3:	c9                   	leave  
c0109fb4:	c3                   	ret    

c0109fb5 <get_pid>:

// get_pid - alloc a unique pid for process
static int
get_pid(void) {
c0109fb5:	55                   	push   %ebp
c0109fb6:	89 e5                	mov    %esp,%ebp
c0109fb8:	83 ec 10             	sub    $0x10,%esp
    static_assert(MAX_PID > MAX_PROCESS);
    struct proc_struct *proc;
    list_entry_t *list = &proc_list, *le;
c0109fbb:	c7 45 f8 dc 72 1c c0 	movl   $0xc01c72dc,-0x8(%ebp)
    static int next_safe = MAX_PID, last_pid = MAX_PID;
    if (++ last_pid >= MAX_PID) {
c0109fc2:	a1 7c 1a 13 c0       	mov    0xc0131a7c,%eax
c0109fc7:	83 c0 01             	add    $0x1,%eax
c0109fca:	a3 7c 1a 13 c0       	mov    %eax,0xc0131a7c
c0109fcf:	a1 7c 1a 13 c0       	mov    0xc0131a7c,%eax
c0109fd4:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c0109fd9:	7e 0c                	jle    c0109fe7 <get_pid+0x32>
        last_pid = 1;
c0109fdb:	c7 05 7c 1a 13 c0 01 	movl   $0x1,0xc0131a7c
c0109fe2:	00 00 00 
        goto inside;
c0109fe5:	eb 13                	jmp    c0109ffa <get_pid+0x45>
    }
    if (last_pid >= next_safe) {
c0109fe7:	8b 15 7c 1a 13 c0    	mov    0xc0131a7c,%edx
c0109fed:	a1 80 1a 13 c0       	mov    0xc0131a80,%eax
c0109ff2:	39 c2                	cmp    %eax,%edx
c0109ff4:	0f 8c ac 00 00 00    	jl     c010a0a6 <get_pid+0xf1>
    inside:
        next_safe = MAX_PID;
c0109ffa:	c7 05 80 1a 13 c0 00 	movl   $0x2000,0xc0131a80
c010a001:	20 00 00 
    repeat:
        le = list;
c010a004:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010a007:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while ((le = list_next(le)) != list) {
c010a00a:	eb 7f                	jmp    c010a08b <get_pid+0xd6>
            proc = le2proc(le, list_link);
c010a00c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a00f:	83 e8 7c             	sub    $0x7c,%eax
c010a012:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (proc->pid == last_pid) {
c010a015:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a018:	8b 50 04             	mov    0x4(%eax),%edx
c010a01b:	a1 7c 1a 13 c0       	mov    0xc0131a7c,%eax
c010a020:	39 c2                	cmp    %eax,%edx
c010a022:	75 3e                	jne    c010a062 <get_pid+0xad>
                if (++ last_pid >= next_safe) {
c010a024:	a1 7c 1a 13 c0       	mov    0xc0131a7c,%eax
c010a029:	83 c0 01             	add    $0x1,%eax
c010a02c:	a3 7c 1a 13 c0       	mov    %eax,0xc0131a7c
c010a031:	8b 15 7c 1a 13 c0    	mov    0xc0131a7c,%edx
c010a037:	a1 80 1a 13 c0       	mov    0xc0131a80,%eax
c010a03c:	39 c2                	cmp    %eax,%edx
c010a03e:	7c 4b                	jl     c010a08b <get_pid+0xd6>
                    if (last_pid >= MAX_PID) {
c010a040:	a1 7c 1a 13 c0       	mov    0xc0131a7c,%eax
c010a045:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c010a04a:	7e 0a                	jle    c010a056 <get_pid+0xa1>
                        last_pid = 1;
c010a04c:	c7 05 7c 1a 13 c0 01 	movl   $0x1,0xc0131a7c
c010a053:	00 00 00 
                    }
                    next_safe = MAX_PID;
c010a056:	c7 05 80 1a 13 c0 00 	movl   $0x2000,0xc0131a80
c010a05d:	20 00 00 
                    goto repeat;
c010a060:	eb a2                	jmp    c010a004 <get_pid+0x4f>
                }
            }
            else if (proc->pid > last_pid && next_safe > proc->pid) {
c010a062:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a065:	8b 50 04             	mov    0x4(%eax),%edx
c010a068:	a1 7c 1a 13 c0       	mov    0xc0131a7c,%eax
c010a06d:	39 c2                	cmp    %eax,%edx
c010a06f:	7e 1a                	jle    c010a08b <get_pid+0xd6>
c010a071:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a074:	8b 50 04             	mov    0x4(%eax),%edx
c010a077:	a1 80 1a 13 c0       	mov    0xc0131a80,%eax
c010a07c:	39 c2                	cmp    %eax,%edx
c010a07e:	7d 0b                	jge    c010a08b <get_pid+0xd6>
                next_safe = proc->pid;
c010a080:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a083:	8b 40 04             	mov    0x4(%eax),%eax
c010a086:	a3 80 1a 13 c0       	mov    %eax,0xc0131a80
c010a08b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a08e:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010a091:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a094:	8b 40 04             	mov    0x4(%eax),%eax
    if (last_pid >= next_safe) {
    inside:
        next_safe = MAX_PID;
    repeat:
        le = list;
        while ((le = list_next(le)) != list) {
c010a097:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010a09a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a09d:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c010a0a0:	0f 85 66 ff ff ff    	jne    c010a00c <get_pid+0x57>
            else if (proc->pid > last_pid && next_safe > proc->pid) {
                next_safe = proc->pid;
            }
        }
    }
    return last_pid;
c010a0a6:	a1 7c 1a 13 c0       	mov    0xc0131a7c,%eax
}
c010a0ab:	c9                   	leave  
c010a0ac:	c3                   	ret    

c010a0ad <proc_run>:

// proc_run - make process "proc" running on cpu
// NOTE: before call switch_to, should load  base addr of "proc"'s new PDT
void
proc_run(struct proc_struct *proc) {
c010a0ad:	55                   	push   %ebp
c010a0ae:	89 e5                	mov    %esp,%ebp
c010a0b0:	83 ec 18             	sub    $0x18,%esp
    if (proc != current) {
c010a0b3:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010a0b8:	39 45 08             	cmp    %eax,0x8(%ebp)
c010a0bb:	74 6b                	je     c010a128 <proc_run+0x7b>
        bool intr_flag;
        struct proc_struct *prev = current, *next = proc;
c010a0bd:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010a0c2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a0c5:	8b 45 08             	mov    0x8(%ebp),%eax
c010a0c8:	89 45 f0             	mov    %eax,-0x10(%ebp)
        local_intr_save(intr_flag);
c010a0cb:	e8 f7 f9 ff ff       	call   c0109ac7 <__intr_save>
c010a0d0:	89 45 ec             	mov    %eax,-0x14(%ebp)
        {
            current = proc;
c010a0d3:	8b 45 08             	mov    0x8(%ebp),%eax
c010a0d6:	a3 28 50 1c c0       	mov    %eax,0xc01c5028
            load_esp0(next->kstack + KSTACKSIZE);
c010a0db:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a0de:	8b 40 0c             	mov    0xc(%eax),%eax
c010a0e1:	05 00 20 00 00       	add    $0x2000,%eax
c010a0e6:	83 ec 0c             	sub    $0xc,%esp
c010a0e9:	50                   	push   %eax
c010a0ea:	e8 50 ce ff ff       	call   c0106f3f <load_esp0>
c010a0ef:	83 c4 10             	add    $0x10,%esp
            lcr3(next->cr3);
c010a0f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a0f5:	8b 40 40             	mov    0x40(%eax),%eax
c010a0f8:	89 45 e8             	mov    %eax,-0x18(%ebp)
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
}

static inline void
lcr3(uintptr_t cr3) {
    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
c010a0fb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a0fe:	0f 22 d8             	mov    %eax,%cr3
            switch_to(&(prev->context), &(next->context));
c010a101:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a104:	8d 50 1c             	lea    0x1c(%eax),%edx
c010a107:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a10a:	83 c0 1c             	add    $0x1c,%eax
c010a10d:	83 ec 08             	sub    $0x8,%esp
c010a110:	52                   	push   %edx
c010a111:	50                   	push   %eax
c010a112:	e8 40 f9 ff ff       	call   c0109a57 <switch_to>
c010a117:	83 c4 10             	add    $0x10,%esp
        }
        local_intr_restore(intr_flag);
c010a11a:	83 ec 0c             	sub    $0xc,%esp
c010a11d:	ff 75 ec             	pushl  -0x14(%ebp)
c010a120:	e8 cc f9 ff ff       	call   c0109af1 <__intr_restore>
c010a125:	83 c4 10             	add    $0x10,%esp
    }
}
c010a128:	90                   	nop
c010a129:	c9                   	leave  
c010a12a:	c3                   	ret    

c010a12b <forkret>:

// forkret -- the first kernel entry point of a new thread/process
// NOTE: the addr of forkret is setted in copy_thread function
//       after switch_to, the current proc will execute here.
static void
forkret(void) {
c010a12b:	55                   	push   %ebp
c010a12c:	89 e5                	mov    %esp,%ebp
c010a12e:	83 ec 08             	sub    $0x8,%esp
    forkrets(current->tf);
c010a131:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010a136:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a139:	83 ec 0c             	sub    $0xc,%esp
c010a13c:	50                   	push   %eax
c010a13d:	e8 86 94 ff ff       	call   c01035c8 <forkrets>
c010a142:	83 c4 10             	add    $0x10,%esp
}
c010a145:	90                   	nop
c010a146:	c9                   	leave  
c010a147:	c3                   	ret    

c010a148 <hash_proc>:

// hash_proc - add proc into proc hash_list
static void
hash_proc(struct proc_struct *proc) {
c010a148:	55                   	push   %ebp
c010a149:	89 e5                	mov    %esp,%ebp
c010a14b:	53                   	push   %ebx
c010a14c:	83 ec 24             	sub    $0x24,%esp
    list_add(hash_list + pid_hashfn(proc->pid), &(proc->hash_link));
c010a14f:	8b 45 08             	mov    0x8(%ebp),%eax
c010a152:	8d 98 84 00 00 00    	lea    0x84(%eax),%ebx
c010a158:	8b 45 08             	mov    0x8(%ebp),%eax
c010a15b:	8b 40 04             	mov    0x4(%eax),%eax
c010a15e:	83 ec 08             	sub    $0x8,%esp
c010a161:	6a 0a                	push   $0xa
c010a163:	50                   	push   %eax
c010a164:	e8 c3 2a 00 00       	call   c010cc2c <hash32>
c010a169:	83 c4 10             	add    $0x10,%esp
c010a16c:	c1 e0 03             	shl    $0x3,%eax
c010a16f:	05 40 50 1c c0       	add    $0xc01c5040,%eax
c010a174:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a177:	89 5d f0             	mov    %ebx,-0x10(%ebp)
c010a17a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a17d:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010a180:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a183:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010a186:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a189:	8b 40 04             	mov    0x4(%eax),%eax
c010a18c:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010a18f:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c010a192:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010a195:	89 55 e0             	mov    %edx,-0x20(%ebp)
c010a198:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010a19b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a19e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010a1a1:	89 10                	mov    %edx,(%eax)
c010a1a3:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a1a6:	8b 10                	mov    (%eax),%edx
c010a1a8:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a1ab:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010a1ae:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a1b1:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010a1b4:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010a1b7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a1ba:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010a1bd:	89 10                	mov    %edx,(%eax)
}
c010a1bf:	90                   	nop
c010a1c0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c010a1c3:	c9                   	leave  
c010a1c4:	c3                   	ret    

c010a1c5 <unhash_proc>:

// unhash_proc - delete proc from proc hash_list
static void
unhash_proc(struct proc_struct *proc) {
c010a1c5:	55                   	push   %ebp
c010a1c6:	89 e5                	mov    %esp,%ebp
c010a1c8:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->hash_link));
c010a1cb:	8b 45 08             	mov    0x8(%ebp),%eax
c010a1ce:	05 84 00 00 00       	add    $0x84,%eax
c010a1d3:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010a1d6:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a1d9:	8b 40 04             	mov    0x4(%eax),%eax
c010a1dc:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010a1df:	8b 12                	mov    (%edx),%edx
c010a1e1:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010a1e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010a1e7:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010a1ea:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a1ed:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010a1f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a1f3:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010a1f6:	89 10                	mov    %edx,(%eax)
}
c010a1f8:	90                   	nop
c010a1f9:	c9                   	leave  
c010a1fa:	c3                   	ret    

c010a1fb <find_proc>:

// find_proc - find proc frome proc hash_list according to pid
struct proc_struct *
find_proc(int pid) {
c010a1fb:	55                   	push   %ebp
c010a1fc:	89 e5                	mov    %esp,%ebp
c010a1fe:	83 ec 18             	sub    $0x18,%esp
    if (0 < pid && pid < MAX_PID) {
c010a201:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a205:	7e 5f                	jle    c010a266 <find_proc+0x6b>
c010a207:	81 7d 08 ff 1f 00 00 	cmpl   $0x1fff,0x8(%ebp)
c010a20e:	7f 56                	jg     c010a266 <find_proc+0x6b>
        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
c010a210:	8b 45 08             	mov    0x8(%ebp),%eax
c010a213:	83 ec 08             	sub    $0x8,%esp
c010a216:	6a 0a                	push   $0xa
c010a218:	50                   	push   %eax
c010a219:	e8 0e 2a 00 00       	call   c010cc2c <hash32>
c010a21e:	83 c4 10             	add    $0x10,%esp
c010a221:	c1 e0 03             	shl    $0x3,%eax
c010a224:	05 40 50 1c c0       	add    $0xc01c5040,%eax
c010a229:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010a22c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a22f:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while ((le = list_next(le)) != list) {
c010a232:	eb 1b                	jmp    c010a24f <find_proc+0x54>
            struct proc_struct *proc = le2proc(le, hash_link);
c010a234:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a237:	2d 84 00 00 00       	sub    $0x84,%eax
c010a23c:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if (proc->pid == pid) {
c010a23f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a242:	8b 40 04             	mov    0x4(%eax),%eax
c010a245:	3b 45 08             	cmp    0x8(%ebp),%eax
c010a248:	75 05                	jne    c010a24f <find_proc+0x54>
                return proc;
c010a24a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a24d:	eb 1c                	jmp    c010a26b <find_proc+0x70>
c010a24f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a252:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010a255:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a258:	8b 40 04             	mov    0x4(%eax),%eax
// find_proc - find proc frome proc hash_list according to pid
struct proc_struct *
find_proc(int pid) {
    if (0 < pid && pid < MAX_PID) {
        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
        while ((le = list_next(le)) != list) {
c010a25b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a25e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a261:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010a264:	75 ce                	jne    c010a234 <find_proc+0x39>
            if (proc->pid == pid) {
                return proc;
            }
        }
    }
    return NULL;
c010a266:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a26b:	c9                   	leave  
c010a26c:	c3                   	ret    

c010a26d <kernel_thread>:

// kernel_thread - create a kernel thread using "fn" function
// NOTE: the contents of temp trapframe tf will be copied to 
//       proc->tf in do_fork-->copy_thread function
int
kernel_thread(int (*fn)(void *), void *arg, uint32_t clone_flags) {
c010a26d:	55                   	push   %ebp
c010a26e:	89 e5                	mov    %esp,%ebp
c010a270:	83 ec 58             	sub    $0x58,%esp
    struct trapframe tf;
    memset(&tf, 0, sizeof(struct trapframe));
c010a273:	83 ec 04             	sub    $0x4,%esp
c010a276:	6a 4c                	push   $0x4c
c010a278:	6a 00                	push   $0x0
c010a27a:	8d 45 ac             	lea    -0x54(%ebp),%eax
c010a27d:	50                   	push   %eax
c010a27e:	e8 12 22 00 00       	call   c010c495 <memset>
c010a283:	83 c4 10             	add    $0x10,%esp
    tf.tf_cs = KERNEL_CS;
c010a286:	66 c7 45 e8 08 00    	movw   $0x8,-0x18(%ebp)
    tf.tf_ds = tf.tf_es = tf.tf_ss = KERNEL_DS;
c010a28c:	66 c7 45 f4 10 00    	movw   $0x10,-0xc(%ebp)
c010a292:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c010a296:	66 89 45 d4          	mov    %ax,-0x2c(%ebp)
c010a29a:	0f b7 45 d4          	movzwl -0x2c(%ebp),%eax
c010a29e:	66 89 45 d8          	mov    %ax,-0x28(%ebp)
    tf.tf_regs.reg_ebx = (uint32_t)fn;
c010a2a2:	8b 45 08             	mov    0x8(%ebp),%eax
c010a2a5:	89 45 bc             	mov    %eax,-0x44(%ebp)
    tf.tf_regs.reg_edx = (uint32_t)arg;
c010a2a8:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a2ab:	89 45 c0             	mov    %eax,-0x40(%ebp)
    tf.tf_eip = (uint32_t)kernel_thread_entry;
c010a2ae:	b8 4e 9a 10 c0       	mov    $0xc0109a4e,%eax
c010a2b3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return do_fork(clone_flags | CLONE_VM, 0, &tf);
c010a2b6:	8b 45 10             	mov    0x10(%ebp),%eax
c010a2b9:	80 cc 01             	or     $0x1,%ah
c010a2bc:	89 c2                	mov    %eax,%edx
c010a2be:	83 ec 04             	sub    $0x4,%esp
c010a2c1:	8d 45 ac             	lea    -0x54(%ebp),%eax
c010a2c4:	50                   	push   %eax
c010a2c5:	6a 00                	push   $0x0
c010a2c7:	52                   	push   %edx
c010a2c8:	e8 f2 02 00 00       	call   c010a5bf <do_fork>
c010a2cd:	83 c4 10             	add    $0x10,%esp
}
c010a2d0:	c9                   	leave  
c010a2d1:	c3                   	ret    

c010a2d2 <setup_kstack>:

// setup_kstack - alloc pages with size KSTACKPAGE as process kernel stack
static int
setup_kstack(struct proc_struct *proc) {
c010a2d2:	55                   	push   %ebp
c010a2d3:	89 e5                	mov    %esp,%ebp
c010a2d5:	83 ec 18             	sub    $0x18,%esp
    struct Page *page = alloc_pages(KSTACKPAGE);
c010a2d8:	83 ec 0c             	sub    $0xc,%esp
c010a2db:	6a 02                	push   $0x2
c010a2dd:	e8 b1 cd ff ff       	call   c0107093 <alloc_pages>
c010a2e2:	83 c4 10             	add    $0x10,%esp
c010a2e5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c010a2e8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a2ec:	74 1d                	je     c010a30b <setup_kstack+0x39>
        proc->kstack = (uintptr_t)page2kva(page);
c010a2ee:	83 ec 0c             	sub    $0xc,%esp
c010a2f1:	ff 75 f4             	pushl  -0xc(%ebp)
c010a2f4:	e8 6f f8 ff ff       	call   c0109b68 <page2kva>
c010a2f9:	83 c4 10             	add    $0x10,%esp
c010a2fc:	89 c2                	mov    %eax,%edx
c010a2fe:	8b 45 08             	mov    0x8(%ebp),%eax
c010a301:	89 50 0c             	mov    %edx,0xc(%eax)
        return 0;
c010a304:	b8 00 00 00 00       	mov    $0x0,%eax
c010a309:	eb 05                	jmp    c010a310 <setup_kstack+0x3e>
    }
    return -E_NO_MEM;
c010a30b:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c010a310:	c9                   	leave  
c010a311:	c3                   	ret    

c010a312 <put_kstack>:

// put_kstack - free the memory space of process kernel stack
static void
put_kstack(struct proc_struct *proc) {
c010a312:	55                   	push   %ebp
c010a313:	89 e5                	mov    %esp,%ebp
c010a315:	83 ec 08             	sub    $0x8,%esp
    free_pages(kva2page((void *)(proc->kstack)), KSTACKPAGE);
c010a318:	8b 45 08             	mov    0x8(%ebp),%eax
c010a31b:	8b 40 0c             	mov    0xc(%eax),%eax
c010a31e:	83 ec 0c             	sub    $0xc,%esp
c010a321:	50                   	push   %eax
c010a322:	e8 86 f8 ff ff       	call   c0109bad <kva2page>
c010a327:	83 c4 10             	add    $0x10,%esp
c010a32a:	83 ec 08             	sub    $0x8,%esp
c010a32d:	6a 02                	push   $0x2
c010a32f:	50                   	push   %eax
c010a330:	e8 ca cd ff ff       	call   c01070ff <free_pages>
c010a335:	83 c4 10             	add    $0x10,%esp
}
c010a338:	90                   	nop
c010a339:	c9                   	leave  
c010a33a:	c3                   	ret    

c010a33b <setup_pgdir>:

// setup_pgdir - alloc one page as PDT
static int
setup_pgdir(struct mm_struct *mm) {
c010a33b:	55                   	push   %ebp
c010a33c:	89 e5                	mov    %esp,%ebp
c010a33e:	83 ec 18             	sub    $0x18,%esp
    struct Page *page;
    if ((page = alloc_page()) == NULL) {
c010a341:	83 ec 0c             	sub    $0xc,%esp
c010a344:	6a 01                	push   $0x1
c010a346:	e8 48 cd ff ff       	call   c0107093 <alloc_pages>
c010a34b:	83 c4 10             	add    $0x10,%esp
c010a34e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a351:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a355:	75 07                	jne    c010a35e <setup_pgdir+0x23>
        return -E_NO_MEM;
c010a357:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010a35c:	eb 74                	jmp    c010a3d2 <setup_pgdir+0x97>
    }
    pde_t *pgdir = page2kva(page);
c010a35e:	83 ec 0c             	sub    $0xc,%esp
c010a361:	ff 75 f4             	pushl  -0xc(%ebp)
c010a364:	e8 ff f7 ff ff       	call   c0109b68 <page2kva>
c010a369:	83 c4 10             	add    $0x10,%esp
c010a36c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    memcpy(pgdir, boot_pgdir, PGSIZE);
c010a36f:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c010a374:	83 ec 04             	sub    $0x4,%esp
c010a377:	68 00 10 00 00       	push   $0x1000
c010a37c:	50                   	push   %eax
c010a37d:	ff 75 f0             	pushl  -0x10(%ebp)
c010a380:	e8 f3 21 00 00       	call   c010c578 <memcpy>
c010a385:	83 c4 10             	add    $0x10,%esp
    pgdir[PDX(VPT)] = PADDR(pgdir) | PTE_P | PTE_W;
c010a388:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a38b:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
c010a391:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a394:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010a397:	81 7d ec ff ff ff bf 	cmpl   $0xbfffffff,-0x14(%ebp)
c010a39e:	77 17                	ja     c010a3b7 <setup_pgdir+0x7c>
c010a3a0:	ff 75 ec             	pushl  -0x14(%ebp)
c010a3a3:	68 44 f2 10 c0       	push   $0xc010f244
c010a3a8:	68 44 01 00 00       	push   $0x144
c010a3ad:	68 68 f2 10 c0       	push   $0xc010f268
c010a3b2:	e8 46 60 ff ff       	call   c01003fd <__panic>
c010a3b7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a3ba:	05 00 00 00 40       	add    $0x40000000,%eax
c010a3bf:	83 c8 03             	or     $0x3,%eax
c010a3c2:	89 02                	mov    %eax,(%edx)
    mm->pgdir = pgdir;
c010a3c4:	8b 45 08             	mov    0x8(%ebp),%eax
c010a3c7:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010a3ca:	89 50 0c             	mov    %edx,0xc(%eax)
    return 0;
c010a3cd:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a3d2:	c9                   	leave  
c010a3d3:	c3                   	ret    

c010a3d4 <put_pgdir>:

// put_pgdir - free the memory space of PDT
static void
put_pgdir(struct mm_struct *mm) {
c010a3d4:	55                   	push   %ebp
c010a3d5:	89 e5                	mov    %esp,%ebp
c010a3d7:	83 ec 08             	sub    $0x8,%esp
    free_page(kva2page(mm->pgdir));
c010a3da:	8b 45 08             	mov    0x8(%ebp),%eax
c010a3dd:	8b 40 0c             	mov    0xc(%eax),%eax
c010a3e0:	83 ec 0c             	sub    $0xc,%esp
c010a3e3:	50                   	push   %eax
c010a3e4:	e8 c4 f7 ff ff       	call   c0109bad <kva2page>
c010a3e9:	83 c4 10             	add    $0x10,%esp
c010a3ec:	83 ec 08             	sub    $0x8,%esp
c010a3ef:	6a 01                	push   $0x1
c010a3f1:	50                   	push   %eax
c010a3f2:	e8 08 cd ff ff       	call   c01070ff <free_pages>
c010a3f7:	83 c4 10             	add    $0x10,%esp
}
c010a3fa:	90                   	nop
c010a3fb:	c9                   	leave  
c010a3fc:	c3                   	ret    

c010a3fd <copy_mm>:

// copy_mm - process "proc" duplicate OR share process "current"'s mm according clone_flags
//         - if clone_flags & CLONE_VM, then "share" ; else "duplicate"
static int
copy_mm(uint32_t clone_flags, struct proc_struct *proc) {
c010a3fd:	55                   	push   %ebp
c010a3fe:	89 e5                	mov    %esp,%ebp
c010a400:	83 ec 18             	sub    $0x18,%esp
    struct mm_struct *mm, *oldmm = current->mm;
c010a403:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010a408:	8b 40 18             	mov    0x18(%eax),%eax
c010a40b:	89 45 ec             	mov    %eax,-0x14(%ebp)

    /* current is a kernel thread */
    if (oldmm == NULL) {
c010a40e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010a412:	75 0a                	jne    c010a41e <copy_mm+0x21>
        return 0;
c010a414:	b8 00 00 00 00       	mov    $0x0,%eax
c010a419:	e9 03 01 00 00       	jmp    c010a521 <copy_mm+0x124>
    }
    if (clone_flags & CLONE_VM) {
c010a41e:	8b 45 08             	mov    0x8(%ebp),%eax
c010a421:	25 00 01 00 00       	and    $0x100,%eax
c010a426:	85 c0                	test   %eax,%eax
c010a428:	74 08                	je     c010a432 <copy_mm+0x35>
        mm = oldmm;
c010a42a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a42d:	89 45 f4             	mov    %eax,-0xc(%ebp)
        goto good_mm;
c010a430:	eb 65                	jmp    c010a497 <copy_mm+0x9a>
    }

    int ret = -E_NO_MEM;
c010a432:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
    if ((mm = mm_create()) == NULL) {
c010a439:	e8 03 92 ff ff       	call   c0103641 <mm_create>
c010a43e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a441:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a445:	0f 84 d2 00 00 00    	je     c010a51d <copy_mm+0x120>
        goto bad_mm;
    }
    if (setup_pgdir(mm) != 0) {
c010a44b:	83 ec 0c             	sub    $0xc,%esp
c010a44e:	ff 75 f4             	pushl  -0xc(%ebp)
c010a451:	e8 e5 fe ff ff       	call   c010a33b <setup_pgdir>
c010a456:	83 c4 10             	add    $0x10,%esp
c010a459:	85 c0                	test   %eax,%eax
c010a45b:	0f 85 ab 00 00 00    	jne    c010a50c <copy_mm+0x10f>
        goto bad_pgdir_cleanup_mm;
    }

    lock_mm(oldmm);
c010a461:	83 ec 0c             	sub    $0xc,%esp
c010a464:	ff 75 ec             	pushl  -0x14(%ebp)
c010a467:	e8 b4 f7 ff ff       	call   c0109c20 <lock_mm>
c010a46c:	83 c4 10             	add    $0x10,%esp
    {
        ret = dup_mmap(mm, oldmm);
c010a46f:	83 ec 08             	sub    $0x8,%esp
c010a472:	ff 75 ec             	pushl  -0x14(%ebp)
c010a475:	ff 75 f4             	pushl  -0xc(%ebp)
c010a478:	e8 97 96 ff ff       	call   c0103b14 <dup_mmap>
c010a47d:	83 c4 10             	add    $0x10,%esp
c010a480:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    unlock_mm(oldmm);
c010a483:	83 ec 0c             	sub    $0xc,%esp
c010a486:	ff 75 ec             	pushl  -0x14(%ebp)
c010a489:	e8 ca f7 ff ff       	call   c0109c58 <unlock_mm>
c010a48e:	83 c4 10             	add    $0x10,%esp

    if (ret != 0) {
c010a491:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010a495:	75 56                	jne    c010a4ed <copy_mm+0xf0>
        goto bad_dup_cleanup_mmap;
    }

good_mm:
    mm_count_inc(mm);
c010a497:	83 ec 0c             	sub    $0xc,%esp
c010a49a:	ff 75 f4             	pushl  -0xc(%ebp)
c010a49d:	e8 4a f7 ff ff       	call   c0109bec <mm_count_inc>
c010a4a2:	83 c4 10             	add    $0x10,%esp
    proc->mm = mm;
c010a4a5:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a4a8:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a4ab:	89 50 18             	mov    %edx,0x18(%eax)
    proc->cr3 = PADDR(mm->pgdir);
c010a4ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a4b1:	8b 40 0c             	mov    0xc(%eax),%eax
c010a4b4:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010a4b7:	81 7d e8 ff ff ff bf 	cmpl   $0xbfffffff,-0x18(%ebp)
c010a4be:	77 17                	ja     c010a4d7 <copy_mm+0xda>
c010a4c0:	ff 75 e8             	pushl  -0x18(%ebp)
c010a4c3:	68 44 f2 10 c0       	push   $0xc010f244
c010a4c8:	68 73 01 00 00       	push   $0x173
c010a4cd:	68 68 f2 10 c0       	push   $0xc010f268
c010a4d2:	e8 26 5f ff ff       	call   c01003fd <__panic>
c010a4d7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a4da:	8d 90 00 00 00 40    	lea    0x40000000(%eax),%edx
c010a4e0:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a4e3:	89 50 40             	mov    %edx,0x40(%eax)
    return 0;
c010a4e6:	b8 00 00 00 00       	mov    $0x0,%eax
c010a4eb:	eb 34                	jmp    c010a521 <copy_mm+0x124>
        ret = dup_mmap(mm, oldmm);
    }
    unlock_mm(oldmm);

    if (ret != 0) {
        goto bad_dup_cleanup_mmap;
c010a4ed:	90                   	nop
    mm_count_inc(mm);
    proc->mm = mm;
    proc->cr3 = PADDR(mm->pgdir);
    return 0;
bad_dup_cleanup_mmap:
    exit_mmap(mm);
c010a4ee:	83 ec 0c             	sub    $0xc,%esp
c010a4f1:	ff 75 f4             	pushl  -0xc(%ebp)
c010a4f4:	e8 02 97 ff ff       	call   c0103bfb <exit_mmap>
c010a4f9:	83 c4 10             	add    $0x10,%esp
    put_pgdir(mm);
c010a4fc:	83 ec 0c             	sub    $0xc,%esp
c010a4ff:	ff 75 f4             	pushl  -0xc(%ebp)
c010a502:	e8 cd fe ff ff       	call   c010a3d4 <put_pgdir>
c010a507:	83 c4 10             	add    $0x10,%esp
c010a50a:	eb 01                	jmp    c010a50d <copy_mm+0x110>
    int ret = -E_NO_MEM;
    if ((mm = mm_create()) == NULL) {
        goto bad_mm;
    }
    if (setup_pgdir(mm) != 0) {
        goto bad_pgdir_cleanup_mm;
c010a50c:	90                   	nop
    return 0;
bad_dup_cleanup_mmap:
    exit_mmap(mm);
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
c010a50d:	83 ec 0c             	sub    $0xc,%esp
c010a510:	ff 75 f4             	pushl  -0xc(%ebp)
c010a513:	e8 55 94 ff ff       	call   c010396d <mm_destroy>
c010a518:	83 c4 10             	add    $0x10,%esp
c010a51b:	eb 01                	jmp    c010a51e <copy_mm+0x121>
        goto good_mm;
    }

    int ret = -E_NO_MEM;
    if ((mm = mm_create()) == NULL) {
        goto bad_mm;
c010a51d:	90                   	nop
    exit_mmap(mm);
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
bad_mm:
    return ret;
c010a51e:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010a521:	c9                   	leave  
c010a522:	c3                   	ret    

c010a523 <copy_thread>:

// copy_thread - setup the trapframe on the  process's kernel stack top and
//             - setup the kernel entry point and stack of process
static void
copy_thread(struct proc_struct *proc, uintptr_t esp, struct trapframe *tf) {
c010a523:	55                   	push   %ebp
c010a524:	89 e5                	mov    %esp,%ebp
c010a526:	57                   	push   %edi
c010a527:	56                   	push   %esi
c010a528:	53                   	push   %ebx
    proc->tf = (struct trapframe *)(proc->kstack + KSTACKSIZE) - 1;
c010a529:	8b 45 08             	mov    0x8(%ebp),%eax
c010a52c:	8b 40 0c             	mov    0xc(%eax),%eax
c010a52f:	05 b4 1f 00 00       	add    $0x1fb4,%eax
c010a534:	89 c2                	mov    %eax,%edx
c010a536:	8b 45 08             	mov    0x8(%ebp),%eax
c010a539:	89 50 3c             	mov    %edx,0x3c(%eax)
    *(proc->tf) = *tf;
c010a53c:	8b 45 08             	mov    0x8(%ebp),%eax
c010a53f:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a542:	8b 55 10             	mov    0x10(%ebp),%edx
c010a545:	89 d3                	mov    %edx,%ebx
c010a547:	ba 4c 00 00 00       	mov    $0x4c,%edx
c010a54c:	8b 0b                	mov    (%ebx),%ecx
c010a54e:	89 08                	mov    %ecx,(%eax)
c010a550:	8b 4c 13 fc          	mov    -0x4(%ebx,%edx,1),%ecx
c010a554:	89 4c 10 fc          	mov    %ecx,-0x4(%eax,%edx,1)
c010a558:	8d 78 04             	lea    0x4(%eax),%edi
c010a55b:	83 e7 fc             	and    $0xfffffffc,%edi
c010a55e:	29 f8                	sub    %edi,%eax
c010a560:	29 c3                	sub    %eax,%ebx
c010a562:	01 c2                	add    %eax,%edx
c010a564:	83 e2 fc             	and    $0xfffffffc,%edx
c010a567:	89 d0                	mov    %edx,%eax
c010a569:	c1 e8 02             	shr    $0x2,%eax
c010a56c:	89 de                	mov    %ebx,%esi
c010a56e:	89 c1                	mov    %eax,%ecx
c010a570:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
    proc->tf->tf_regs.reg_eax = 0;
c010a572:	8b 45 08             	mov    0x8(%ebp),%eax
c010a575:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a578:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    proc->tf->tf_esp = esp;
c010a57f:	8b 45 08             	mov    0x8(%ebp),%eax
c010a582:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a585:	8b 55 0c             	mov    0xc(%ebp),%edx
c010a588:	89 50 44             	mov    %edx,0x44(%eax)
    proc->tf->tf_eflags |= FL_IF;
c010a58b:	8b 45 08             	mov    0x8(%ebp),%eax
c010a58e:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a591:	8b 55 08             	mov    0x8(%ebp),%edx
c010a594:	8b 52 3c             	mov    0x3c(%edx),%edx
c010a597:	8b 52 40             	mov    0x40(%edx),%edx
c010a59a:	80 ce 02             	or     $0x2,%dh
c010a59d:	89 50 40             	mov    %edx,0x40(%eax)

    proc->context.eip = (uintptr_t)forkret;
c010a5a0:	ba 2b a1 10 c0       	mov    $0xc010a12b,%edx
c010a5a5:	8b 45 08             	mov    0x8(%ebp),%eax
c010a5a8:	89 50 1c             	mov    %edx,0x1c(%eax)
    proc->context.esp = (uintptr_t)(proc->tf);
c010a5ab:	8b 45 08             	mov    0x8(%ebp),%eax
c010a5ae:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a5b1:	89 c2                	mov    %eax,%edx
c010a5b3:	8b 45 08             	mov    0x8(%ebp),%eax
c010a5b6:	89 50 20             	mov    %edx,0x20(%eax)
}
c010a5b9:	90                   	nop
c010a5ba:	5b                   	pop    %ebx
c010a5bb:	5e                   	pop    %esi
c010a5bc:	5f                   	pop    %edi
c010a5bd:	5d                   	pop    %ebp
c010a5be:	c3                   	ret    

c010a5bf <do_fork>:
 * @clone_flags: used to guide how to clone the child process
 * @stack:       the parent's user stack pointer. if stack==0, It means to fork a kernel thread.
 * @tf:          the trapframe info, which will be copied to child process's proc->tf
 */
int
do_fork(uint32_t clone_flags, uintptr_t stack, struct trapframe *tf) {
c010a5bf:	55                   	push   %ebp
c010a5c0:	89 e5                	mov    %esp,%ebp
c010a5c2:	83 ec 18             	sub    $0x18,%esp
    int ret = -E_NO_FREE_PROC;
c010a5c5:	c7 45 f4 fb ff ff ff 	movl   $0xfffffffb,-0xc(%ebp)
    struct proc_struct *proc;
    if (nr_process >= MAX_PROCESS) {
c010a5cc:	a1 40 70 1c c0       	mov    0xc01c7040,%eax
c010a5d1:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c010a5d6:	0f 8f e4 00 00 00    	jg     c010a6c0 <do_fork+0x101>
        goto fork_out;
    }
    ret = -E_NO_MEM;
c010a5dc:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    *    -------------------
	*    update step 1: set child proc's parent to current process, make sure current process's wait_state is 0
	*    update step 5: insert proc_struct into hash_list && proc_list, set the relation links of process
    */
    //    1. call alloc_proc to allocate a proc_struct
    proc = alloc_proc();
c010a5e3:	e8 9b f6 ff ff       	call   c0109c83 <alloc_proc>
c010a5e8:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (proc == NULL) {
c010a5eb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010a5ef:	0f 84 ce 00 00 00    	je     c010a6c3 <do_fork+0x104>
        goto fork_out;
    }
    // update
    assert(current->wait_state == 0);
c010a5f5:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010a5fa:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010a600:	85 c0                	test   %eax,%eax
c010a602:	74 19                	je     c010a61d <do_fork+0x5e>
c010a604:	68 7c f2 10 c0       	push   $0xc010f27c
c010a609:	68 95 f2 10 c0       	push   $0xc010f295
c010a60e:	68 c0 01 00 00       	push   $0x1c0
c010a613:	68 68 f2 10 c0       	push   $0xc010f268
c010a618:	e8 e0 5d ff ff       	call   c01003fd <__panic>
    proc->parent = current;
c010a61d:	8b 15 28 50 1c c0    	mov    0xc01c5028,%edx
c010a623:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a626:	89 50 14             	mov    %edx,0x14(%eax)
    //    2. call setup_kstack to allocate a kernel stack for child process
    if (setup_kstack(proc) != 0) {
c010a629:	83 ec 0c             	sub    $0xc,%esp
c010a62c:	ff 75 f0             	pushl  -0x10(%ebp)
c010a62f:	e8 9e fc ff ff       	call   c010a2d2 <setup_kstack>
c010a634:	83 c4 10             	add    $0x10,%esp
c010a637:	85 c0                	test   %eax,%eax
c010a639:	0f 85 9b 00 00 00    	jne    c010a6da <do_fork+0x11b>
        goto bad_fork_cleanup_proc;
    }
    //    3. call copy_mm to dup OR share mm according clone_flag
    if (copy_mm(clone_flags, proc) != 0) {
c010a63f:	83 ec 08             	sub    $0x8,%esp
c010a642:	ff 75 f0             	pushl  -0x10(%ebp)
c010a645:	ff 75 08             	pushl  0x8(%ebp)
c010a648:	e8 b0 fd ff ff       	call   c010a3fd <copy_mm>
c010a64d:	83 c4 10             	add    $0x10,%esp
c010a650:	85 c0                	test   %eax,%eax
c010a652:	75 75                	jne    c010a6c9 <do_fork+0x10a>
        goto bad_fork_cleanup_kstack;
    }
    //    4. call copy_thread to setup tf & context in proc_struct
    copy_thread(proc, stack, tf);   // note: if stack == 0, this is a kernel thread
c010a654:	83 ec 04             	sub    $0x4,%esp
c010a657:	ff 75 10             	pushl  0x10(%ebp)
c010a65a:	ff 75 0c             	pushl  0xc(%ebp)
c010a65d:	ff 75 f0             	pushl  -0x10(%ebp)
c010a660:	e8 be fe ff ff       	call   c010a523 <copy_thread>
c010a665:	83 c4 10             	add    $0x10,%esp
    //    5. insert proc_struct into hash_list && proc_list
    // this need disabling interrupt
    bool intr_flag;
    local_intr_save(intr_flag);
c010a668:	e8 5a f4 ff ff       	call   c0109ac7 <__intr_save>
c010a66d:	89 45 ec             	mov    %eax,-0x14(%ebp)
    {
        proc->pid = get_pid();
c010a670:	e8 40 f9 ff ff       	call   c0109fb5 <get_pid>
c010a675:	89 c2                	mov    %eax,%edx
c010a677:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a67a:	89 50 04             	mov    %edx,0x4(%eax)
        hash_proc(proc);
c010a67d:	83 ec 0c             	sub    $0xc,%esp
c010a680:	ff 75 f0             	pushl  -0x10(%ebp)
c010a683:	e8 c0 fa ff ff       	call   c010a148 <hash_proc>
c010a688:	83 c4 10             	add    $0x10,%esp
        // list_add(&proc_list, &(proc->list_link));
        // nr_process++;
        // update
        set_links(proc);
c010a68b:	83 ec 0c             	sub    $0xc,%esp
c010a68e:	ff 75 f0             	pushl  -0x10(%ebp)
c010a691:	e8 c2 f7 ff ff       	call   c0109e58 <set_links>
c010a696:	83 c4 10             	add    $0x10,%esp
    }
    local_intr_restore(intr_flag);
c010a699:	83 ec 0c             	sub    $0xc,%esp
c010a69c:	ff 75 ec             	pushl  -0x14(%ebp)
c010a69f:	e8 4d f4 ff ff       	call   c0109af1 <__intr_restore>
c010a6a4:	83 c4 10             	add    $0x10,%esp
    //    6. call wakeup_proc to make the new child process RUNNABLE
    wakeup_proc(proc);
c010a6a7:	83 ec 0c             	sub    $0xc,%esp
c010a6aa:	ff 75 f0             	pushl  -0x10(%ebp)
c010a6ad:	e8 fb 10 00 00       	call   c010b7ad <wakeup_proc>
c010a6b2:	83 c4 10             	add    $0x10,%esp
    //    7. set ret vaule using child proc's pid
    ret = proc->pid;
c010a6b5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a6b8:	8b 40 04             	mov    0x4(%eax),%eax
c010a6bb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a6be:	eb 04                	jmp    c010a6c4 <do_fork+0x105>
int
do_fork(uint32_t clone_flags, uintptr_t stack, struct trapframe *tf) {
    int ret = -E_NO_FREE_PROC;
    struct proc_struct *proc;
    if (nr_process >= MAX_PROCESS) {
        goto fork_out;
c010a6c0:	90                   	nop
c010a6c1:	eb 01                	jmp    c010a6c4 <do_fork+0x105>
	*    update step 5: insert proc_struct into hash_list && proc_list, set the relation links of process
    */
    //    1. call alloc_proc to allocate a proc_struct
    proc = alloc_proc();
    if (proc == NULL) {
        goto fork_out;
c010a6c3:	90                   	nop
    wakeup_proc(proc);
    //    7. set ret vaule using child proc's pid
    ret = proc->pid;
	
fork_out:
    return ret;
c010a6c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a6c7:	eb 22                	jmp    c010a6eb <do_fork+0x12c>
    if (setup_kstack(proc) != 0) {
        goto bad_fork_cleanup_proc;
    }
    //    3. call copy_mm to dup OR share mm according clone_flag
    if (copy_mm(clone_flags, proc) != 0) {
        goto bad_fork_cleanup_kstack;
c010a6c9:	90                   	nop
	
fork_out:
    return ret;

bad_fork_cleanup_kstack:
    put_kstack(proc);
c010a6ca:	83 ec 0c             	sub    $0xc,%esp
c010a6cd:	ff 75 f0             	pushl  -0x10(%ebp)
c010a6d0:	e8 3d fc ff ff       	call   c010a312 <put_kstack>
c010a6d5:	83 c4 10             	add    $0x10,%esp
c010a6d8:	eb 01                	jmp    c010a6db <do_fork+0x11c>
    // update
    assert(current->wait_state == 0);
    proc->parent = current;
    //    2. call setup_kstack to allocate a kernel stack for child process
    if (setup_kstack(proc) != 0) {
        goto bad_fork_cleanup_proc;
c010a6da:	90                   	nop
    return ret;

bad_fork_cleanup_kstack:
    put_kstack(proc);
bad_fork_cleanup_proc:
    kfree(proc);
c010a6db:	83 ec 0c             	sub    $0xc,%esp
c010a6de:	ff 75 f0             	pushl  -0x10(%ebp)
c010a6e1:	e8 9b aa ff ff       	call   c0105181 <kfree>
c010a6e6:	83 c4 10             	add    $0x10,%esp
    goto fork_out;
c010a6e9:	eb d9                	jmp    c010a6c4 <do_fork+0x105>
}
c010a6eb:	c9                   	leave  
c010a6ec:	c3                   	ret    

c010a6ed <do_exit>:
// do_exit - called by sys_exit
//   1. call exit_mmap & put_pgdir & mm_destroy to free the almost all memory space of process
//   2. set process' state as PROC_ZOMBIE, then call wakeup_proc(parent) to ask parent reclaim itself.
//   3. call scheduler to switch to other process
int
do_exit(int error_code) {
c010a6ed:	55                   	push   %ebp
c010a6ee:	89 e5                	mov    %esp,%ebp
c010a6f0:	83 ec 18             	sub    $0x18,%esp
    if (current == idleproc) {
c010a6f3:	8b 15 28 50 1c c0    	mov    0xc01c5028,%edx
c010a6f9:	a1 20 50 1c c0       	mov    0xc01c5020,%eax
c010a6fe:	39 c2                	cmp    %eax,%edx
c010a700:	75 17                	jne    c010a719 <do_exit+0x2c>
        panic("idleproc exit.\n");
c010a702:	83 ec 04             	sub    $0x4,%esp
c010a705:	68 aa f2 10 c0       	push   $0xc010f2aa
c010a70a:	68 ef 01 00 00       	push   $0x1ef
c010a70f:	68 68 f2 10 c0       	push   $0xc010f268
c010a714:	e8 e4 5c ff ff       	call   c01003fd <__panic>
    }
    if (current == initproc) {
c010a719:	8b 15 28 50 1c c0    	mov    0xc01c5028,%edx
c010a71f:	a1 24 50 1c c0       	mov    0xc01c5024,%eax
c010a724:	39 c2                	cmp    %eax,%edx
c010a726:	75 17                	jne    c010a73f <do_exit+0x52>
        panic("initproc exit.\n");
c010a728:	83 ec 04             	sub    $0x4,%esp
c010a72b:	68 ba f2 10 c0       	push   $0xc010f2ba
c010a730:	68 f2 01 00 00       	push   $0x1f2
c010a735:	68 68 f2 10 c0       	push   $0xc010f268
c010a73a:	e8 be 5c ff ff       	call   c01003fd <__panic>
    }
    
    struct mm_struct *mm = current->mm;
c010a73f:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010a744:	8b 40 18             	mov    0x18(%eax),%eax
c010a747:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (mm != NULL) {
c010a74a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a74e:	74 56                	je     c010a7a6 <do_exit+0xb9>
        lcr3(boot_cr3);
c010a750:	a1 f4 71 1c c0       	mov    0xc01c71f4,%eax
c010a755:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010a758:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a75b:	0f 22 d8             	mov    %eax,%cr3
        if (mm_count_dec(mm) == 0) {
c010a75e:	83 ec 0c             	sub    $0xc,%esp
c010a761:	ff 75 f4             	pushl  -0xc(%ebp)
c010a764:	e8 9d f4 ff ff       	call   c0109c06 <mm_count_dec>
c010a769:	83 c4 10             	add    $0x10,%esp
c010a76c:	85 c0                	test   %eax,%eax
c010a76e:	75 2a                	jne    c010a79a <do_exit+0xad>
            exit_mmap(mm);
c010a770:	83 ec 0c             	sub    $0xc,%esp
c010a773:	ff 75 f4             	pushl  -0xc(%ebp)
c010a776:	e8 80 94 ff ff       	call   c0103bfb <exit_mmap>
c010a77b:	83 c4 10             	add    $0x10,%esp
            put_pgdir(mm);
c010a77e:	83 ec 0c             	sub    $0xc,%esp
c010a781:	ff 75 f4             	pushl  -0xc(%ebp)
c010a784:	e8 4b fc ff ff       	call   c010a3d4 <put_pgdir>
c010a789:	83 c4 10             	add    $0x10,%esp
            mm_destroy(mm);
c010a78c:	83 ec 0c             	sub    $0xc,%esp
c010a78f:	ff 75 f4             	pushl  -0xc(%ebp)
c010a792:	e8 d6 91 ff ff       	call   c010396d <mm_destroy>
c010a797:	83 c4 10             	add    $0x10,%esp
        }
        current->mm = NULL;
c010a79a:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010a79f:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    current->state = PROC_ZOMBIE;
c010a7a6:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010a7ab:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
    current->exit_code = error_code;
c010a7b1:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010a7b6:	8b 55 08             	mov    0x8(%ebp),%edx
c010a7b9:	89 90 8c 00 00 00    	mov    %edx,0x8c(%eax)
    
    bool intr_flag;
    struct proc_struct *proc;
    local_intr_save(intr_flag);
c010a7bf:	e8 03 f3 ff ff       	call   c0109ac7 <__intr_save>
c010a7c4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        proc = current->parent;
c010a7c7:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010a7cc:	8b 40 14             	mov    0x14(%eax),%eax
c010a7cf:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (proc->wait_state == WT_CHILD) {
c010a7d2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a7d5:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010a7db:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c010a7e0:	0f 85 be 00 00 00    	jne    c010a8a4 <do_exit+0x1b7>
            wakeup_proc(proc);
c010a7e6:	83 ec 0c             	sub    $0xc,%esp
c010a7e9:	ff 75 ec             	pushl  -0x14(%ebp)
c010a7ec:	e8 bc 0f 00 00       	call   c010b7ad <wakeup_proc>
c010a7f1:	83 c4 10             	add    $0x10,%esp
        }
        while (current->cptr != NULL) {
c010a7f4:	e9 ab 00 00 00       	jmp    c010a8a4 <do_exit+0x1b7>
            proc = current->cptr;
c010a7f9:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010a7fe:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010a804:	89 45 ec             	mov    %eax,-0x14(%ebp)
            current->cptr = proc->optr;
c010a807:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010a80c:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010a80f:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c010a815:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    
            proc->yptr = NULL;
c010a81b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a81e:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
c010a825:	00 00 00 
            if ((proc->optr = initproc->cptr) != NULL) {
c010a828:	a1 24 50 1c c0       	mov    0xc01c5024,%eax
c010a82d:	8b 90 94 00 00 00    	mov    0x94(%eax),%edx
c010a833:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a836:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010a83c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a83f:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010a845:	85 c0                	test   %eax,%eax
c010a847:	74 14                	je     c010a85d <do_exit+0x170>
                initproc->cptr->yptr = proc;
c010a849:	a1 24 50 1c c0       	mov    0xc01c5024,%eax
c010a84e:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010a854:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010a857:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
            }
            proc->parent = initproc;
c010a85d:	8b 15 24 50 1c c0    	mov    0xc01c5024,%edx
c010a863:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a866:	89 50 14             	mov    %edx,0x14(%eax)
            initproc->cptr = proc;
c010a869:	a1 24 50 1c c0       	mov    0xc01c5024,%eax
c010a86e:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010a871:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
            if (proc->state == PROC_ZOMBIE) {
c010a877:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a87a:	8b 00                	mov    (%eax),%eax
c010a87c:	83 f8 03             	cmp    $0x3,%eax
c010a87f:	75 23                	jne    c010a8a4 <do_exit+0x1b7>
                if (initproc->wait_state == WT_CHILD) {
c010a881:	a1 24 50 1c c0       	mov    0xc01c5024,%eax
c010a886:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010a88c:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c010a891:	75 11                	jne    c010a8a4 <do_exit+0x1b7>
                    wakeup_proc(initproc);
c010a893:	a1 24 50 1c c0       	mov    0xc01c5024,%eax
c010a898:	83 ec 0c             	sub    $0xc,%esp
c010a89b:	50                   	push   %eax
c010a89c:	e8 0c 0f 00 00       	call   c010b7ad <wakeup_proc>
c010a8a1:	83 c4 10             	add    $0x10,%esp
    {
        proc = current->parent;
        if (proc->wait_state == WT_CHILD) {
            wakeup_proc(proc);
        }
        while (current->cptr != NULL) {
c010a8a4:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010a8a9:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010a8af:	85 c0                	test   %eax,%eax
c010a8b1:	0f 85 42 ff ff ff    	jne    c010a7f9 <do_exit+0x10c>
                    wakeup_proc(initproc);
                }
            }
        }
    }
    local_intr_restore(intr_flag);
c010a8b7:	83 ec 0c             	sub    $0xc,%esp
c010a8ba:	ff 75 f0             	pushl  -0x10(%ebp)
c010a8bd:	e8 2f f2 ff ff       	call   c0109af1 <__intr_restore>
c010a8c2:	83 c4 10             	add    $0x10,%esp
    
    schedule();
c010a8c5:	e8 73 0f 00 00       	call   c010b83d <schedule>
    panic("do_exit will not return!! %d.\n", current->pid);
c010a8ca:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010a8cf:	8b 40 04             	mov    0x4(%eax),%eax
c010a8d2:	50                   	push   %eax
c010a8d3:	68 cc f2 10 c0       	push   $0xc010f2cc
c010a8d8:	68 1e 02 00 00       	push   $0x21e
c010a8dd:	68 68 f2 10 c0       	push   $0xc010f268
c010a8e2:	e8 16 5b ff ff       	call   c01003fd <__panic>

c010a8e7 <load_icode>:
/* load_icode - load the content of binary program(ELF format) as the new content of current process
 * @binary:  the memory addr of the content of binary program
 * @size:  the size of the content of binary program
 */
static int
load_icode(unsigned char *binary, size_t size) {
c010a8e7:	55                   	push   %ebp
c010a8e8:	89 e5                	mov    %esp,%ebp
c010a8ea:	83 ec 58             	sub    $0x58,%esp
    if (current->mm != NULL) {
c010a8ed:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010a8f2:	8b 40 18             	mov    0x18(%eax),%eax
c010a8f5:	85 c0                	test   %eax,%eax
c010a8f7:	74 17                	je     c010a910 <load_icode+0x29>
        panic("load_icode: current->mm must be empty.\n");
c010a8f9:	83 ec 04             	sub    $0x4,%esp
c010a8fc:	68 ec f2 10 c0       	push   $0xc010f2ec
c010a901:	68 28 02 00 00       	push   $0x228
c010a906:	68 68 f2 10 c0       	push   $0xc010f268
c010a90b:	e8 ed 5a ff ff       	call   c01003fd <__panic>
    }

    int ret = -E_NO_MEM;
c010a910:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    struct mm_struct *mm;
    //(1) create a new mm for current process
    if ((mm = mm_create()) == NULL) {
c010a917:	e8 25 8d ff ff       	call   c0103641 <mm_create>
c010a91c:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010a91f:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c010a923:	0f 84 8d 05 00 00    	je     c010aeb6 <load_icode+0x5cf>
        goto bad_mm;
    }
    //(2) create a new PDT, and mm->pgdir= kernel virtual addr of PDT
    if (setup_pgdir(mm) != 0) {
c010a929:	83 ec 0c             	sub    $0xc,%esp
c010a92c:	ff 75 d0             	pushl  -0x30(%ebp)
c010a92f:	e8 07 fa ff ff       	call   c010a33b <setup_pgdir>
c010a934:	83 c4 10             	add    $0x10,%esp
c010a937:	85 c0                	test   %eax,%eax
c010a939:	0f 85 66 05 00 00    	jne    c010aea5 <load_icode+0x5be>
        goto bad_pgdir_cleanup_mm;
    }
    //(3) copy TEXT/DATA section, build BSS parts in binary to memory space of process
    struct Page *page;
    //(3.1) get the file header of the bianry program (ELF format)
    struct elfhdr *elf = (struct elfhdr *)binary;
c010a93f:	8b 45 08             	mov    0x8(%ebp),%eax
c010a942:	89 45 cc             	mov    %eax,-0x34(%ebp)
    //(3.2) get the entry of the program section headers of the bianry program (ELF format)
    struct proghdr *ph = (struct proghdr *)(binary + elf->e_phoff);
c010a945:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010a948:	8b 50 1c             	mov    0x1c(%eax),%edx
c010a94b:	8b 45 08             	mov    0x8(%ebp),%eax
c010a94e:	01 d0                	add    %edx,%eax
c010a950:	89 45 ec             	mov    %eax,-0x14(%ebp)
    //(3.3) This program is valid?
    if (elf->e_magic != ELF_MAGIC) {
c010a953:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010a956:	8b 00                	mov    (%eax),%eax
c010a958:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
c010a95d:	74 0c                	je     c010a96b <load_icode+0x84>
        ret = -E_INVAL_ELF;
c010a95f:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
        goto bad_elf_cleanup_pgdir;
c010a966:	e9 2a 05 00 00       	jmp    c010ae95 <load_icode+0x5ae>
    }

    uint32_t vm_flags, perm;
    struct proghdr *ph_end = ph + elf->e_phnum;
c010a96b:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010a96e:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c010a972:	0f b7 c0             	movzwl %ax,%eax
c010a975:	c1 e0 05             	shl    $0x5,%eax
c010a978:	89 c2                	mov    %eax,%edx
c010a97a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a97d:	01 d0                	add    %edx,%eax
c010a97f:	89 45 c8             	mov    %eax,-0x38(%ebp)
    for (; ph < ph_end; ph ++) {
c010a982:	e9 e0 02 00 00       	jmp    c010ac67 <load_icode+0x380>
    //(3.4) find every program section headers
        if (ph->p_type != ELF_PT_LOAD) {
c010a987:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a98a:	8b 00                	mov    (%eax),%eax
c010a98c:	83 f8 01             	cmp    $0x1,%eax
c010a98f:	0f 85 c7 02 00 00    	jne    c010ac5c <load_icode+0x375>
            continue ;
        }
        if (ph->p_filesz > ph->p_memsz) {
c010a995:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a998:	8b 50 10             	mov    0x10(%eax),%edx
c010a99b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a99e:	8b 40 14             	mov    0x14(%eax),%eax
c010a9a1:	39 c2                	cmp    %eax,%edx
c010a9a3:	76 0c                	jbe    c010a9b1 <load_icode+0xca>
            ret = -E_INVAL_ELF;
c010a9a5:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
            goto bad_cleanup_mmap;
c010a9ac:	e9 d6 04 00 00       	jmp    c010ae87 <load_icode+0x5a0>
        }
        if (ph->p_filesz == 0) {
c010a9b1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a9b4:	8b 40 10             	mov    0x10(%eax),%eax
c010a9b7:	85 c0                	test   %eax,%eax
c010a9b9:	0f 84 a0 02 00 00    	je     c010ac5f <load_icode+0x378>
            continue ;
        }
    //(3.5) call mm_map fun to setup the new vma ( ph->p_va, ph->p_memsz)
        vm_flags = 0, perm = PTE_U;
c010a9bf:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c010a9c6:	c7 45 e4 04 00 00 00 	movl   $0x4,-0x1c(%ebp)
        if (ph->p_flags & ELF_PF_X) vm_flags |= VM_EXEC;
c010a9cd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a9d0:	8b 40 18             	mov    0x18(%eax),%eax
c010a9d3:	83 e0 01             	and    $0x1,%eax
c010a9d6:	85 c0                	test   %eax,%eax
c010a9d8:	74 04                	je     c010a9de <load_icode+0xf7>
c010a9da:	83 4d e8 04          	orl    $0x4,-0x18(%ebp)
        if (ph->p_flags & ELF_PF_W) vm_flags |= VM_WRITE;
c010a9de:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a9e1:	8b 40 18             	mov    0x18(%eax),%eax
c010a9e4:	83 e0 02             	and    $0x2,%eax
c010a9e7:	85 c0                	test   %eax,%eax
c010a9e9:	74 04                	je     c010a9ef <load_icode+0x108>
c010a9eb:	83 4d e8 02          	orl    $0x2,-0x18(%ebp)
        if (ph->p_flags & ELF_PF_R) vm_flags |= VM_READ;
c010a9ef:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a9f2:	8b 40 18             	mov    0x18(%eax),%eax
c010a9f5:	83 e0 04             	and    $0x4,%eax
c010a9f8:	85 c0                	test   %eax,%eax
c010a9fa:	74 04                	je     c010aa00 <load_icode+0x119>
c010a9fc:	83 4d e8 01          	orl    $0x1,-0x18(%ebp)
        if (vm_flags & VM_WRITE) perm |= PTE_W;
c010aa00:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010aa03:	83 e0 02             	and    $0x2,%eax
c010aa06:	85 c0                	test   %eax,%eax
c010aa08:	74 04                	je     c010aa0e <load_icode+0x127>
c010aa0a:	83 4d e4 02          	orl    $0x2,-0x1c(%ebp)
        if ((ret = mm_map(mm, ph->p_va, ph->p_memsz, vm_flags, NULL)) != 0) {
c010aa0e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aa11:	8b 50 14             	mov    0x14(%eax),%edx
c010aa14:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aa17:	8b 40 08             	mov    0x8(%eax),%eax
c010aa1a:	83 ec 0c             	sub    $0xc,%esp
c010aa1d:	6a 00                	push   $0x0
c010aa1f:	ff 75 e8             	pushl  -0x18(%ebp)
c010aa22:	52                   	push   %edx
c010aa23:	50                   	push   %eax
c010aa24:	ff 75 d0             	pushl  -0x30(%ebp)
c010aa27:	e8 e0 8f ff ff       	call   c0103a0c <mm_map>
c010aa2c:	83 c4 20             	add    $0x20,%esp
c010aa2f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010aa32:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010aa36:	0f 85 41 04 00 00    	jne    c010ae7d <load_icode+0x596>
            goto bad_cleanup_mmap;
        }
        unsigned char *from = binary + ph->p_offset;
c010aa3c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aa3f:	8b 50 04             	mov    0x4(%eax),%edx
c010aa42:	8b 45 08             	mov    0x8(%ebp),%eax
c010aa45:	01 d0                	add    %edx,%eax
c010aa47:	89 45 e0             	mov    %eax,-0x20(%ebp)
        size_t off, size;
        uintptr_t start = ph->p_va, end, la = ROUNDDOWN(start, PGSIZE);
c010aa4a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aa4d:	8b 40 08             	mov    0x8(%eax),%eax
c010aa50:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010aa53:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010aa56:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c010aa59:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010aa5c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010aa61:	89 45 d4             	mov    %eax,-0x2c(%ebp)

        ret = -E_NO_MEM;
c010aa64:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
        end = ph->p_va + ph->p_filesz;
c010aa6b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aa6e:	8b 50 08             	mov    0x8(%eax),%edx
c010aa71:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aa74:	8b 40 10             	mov    0x10(%eax),%eax
c010aa77:	01 d0                	add    %edx,%eax
c010aa79:	89 45 c0             	mov    %eax,-0x40(%ebp)
     //(3.6.1) copy TEXT/DATA section of bianry program
        while (start < end) {
c010aa7c:	e9 84 00 00 00       	jmp    c010ab05 <load_icode+0x21e>
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
c010aa81:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010aa84:	8b 40 0c             	mov    0xc(%eax),%eax
c010aa87:	83 ec 04             	sub    $0x4,%esp
c010aa8a:	ff 75 e4             	pushl  -0x1c(%ebp)
c010aa8d:	ff 75 d4             	pushl  -0x2c(%ebp)
c010aa90:	50                   	push   %eax
c010aa91:	e8 53 d3 ff ff       	call   c0107de9 <pgdir_alloc_page>
c010aa96:	83 c4 10             	add    $0x10,%esp
c010aa99:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010aa9c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010aaa0:	0f 84 da 03 00 00    	je     c010ae80 <load_icode+0x599>
                goto bad_cleanup_mmap;
            }
            off = start - la, size = PGSIZE - off, la += PGSIZE;
c010aaa6:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010aaa9:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c010aaac:	89 45 bc             	mov    %eax,-0x44(%ebp)
c010aaaf:	b8 00 10 00 00       	mov    $0x1000,%eax
c010aab4:	2b 45 bc             	sub    -0x44(%ebp),%eax
c010aab7:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010aaba:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
            if (end < la) {
c010aac1:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010aac4:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010aac7:	73 09                	jae    c010aad2 <load_icode+0x1eb>
                size -= la - end;
c010aac9:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010aacc:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c010aacf:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memcpy(page2kva(page) + off, from, size);
c010aad2:	83 ec 0c             	sub    $0xc,%esp
c010aad5:	ff 75 f0             	pushl  -0x10(%ebp)
c010aad8:	e8 8b f0 ff ff       	call   c0109b68 <page2kva>
c010aadd:	83 c4 10             	add    $0x10,%esp
c010aae0:	89 c2                	mov    %eax,%edx
c010aae2:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010aae5:	01 d0                	add    %edx,%eax
c010aae7:	83 ec 04             	sub    $0x4,%esp
c010aaea:	ff 75 dc             	pushl  -0x24(%ebp)
c010aaed:	ff 75 e0             	pushl  -0x20(%ebp)
c010aaf0:	50                   	push   %eax
c010aaf1:	e8 82 1a 00 00       	call   c010c578 <memcpy>
c010aaf6:	83 c4 10             	add    $0x10,%esp
            start += size, from += size;
c010aaf9:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010aafc:	01 45 d8             	add    %eax,-0x28(%ebp)
c010aaff:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010ab02:	01 45 e0             	add    %eax,-0x20(%ebp)
        ret = -E_NO_MEM;

     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
        end = ph->p_va + ph->p_filesz;
     //(3.6.1) copy TEXT/DATA section of bianry program
        while (start < end) {
c010ab05:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010ab08:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010ab0b:	0f 82 70 ff ff ff    	jb     c010aa81 <load_icode+0x19a>
            memcpy(page2kva(page) + off, from, size);
            start += size, from += size;
        }

      //(3.6.2) build BSS section of binary program
        end = ph->p_va + ph->p_memsz;
c010ab11:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ab14:	8b 50 08             	mov    0x8(%eax),%edx
c010ab17:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ab1a:	8b 40 14             	mov    0x14(%eax),%eax
c010ab1d:	01 d0                	add    %edx,%eax
c010ab1f:	89 45 c0             	mov    %eax,-0x40(%ebp)
        if (start < la) {
c010ab22:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010ab25:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010ab28:	0f 83 20 01 00 00    	jae    c010ac4e <load_icode+0x367>
            /* ph->p_memsz == ph->p_filesz */
            if (start == end) {
c010ab2e:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010ab31:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010ab34:	0f 84 28 01 00 00    	je     c010ac62 <load_icode+0x37b>
                continue ;
            }
            off = start + PGSIZE - la, size = PGSIZE - off;
c010ab3a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010ab3d:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c010ab40:	05 00 10 00 00       	add    $0x1000,%eax
c010ab45:	89 45 bc             	mov    %eax,-0x44(%ebp)
c010ab48:	b8 00 10 00 00       	mov    $0x1000,%eax
c010ab4d:	2b 45 bc             	sub    -0x44(%ebp),%eax
c010ab50:	89 45 dc             	mov    %eax,-0x24(%ebp)
            if (end < la) {
c010ab53:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010ab56:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010ab59:	73 09                	jae    c010ab64 <load_icode+0x27d>
                size -= la - end;
c010ab5b:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010ab5e:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c010ab61:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
c010ab64:	83 ec 0c             	sub    $0xc,%esp
c010ab67:	ff 75 f0             	pushl  -0x10(%ebp)
c010ab6a:	e8 f9 ef ff ff       	call   c0109b68 <page2kva>
c010ab6f:	83 c4 10             	add    $0x10,%esp
c010ab72:	89 c2                	mov    %eax,%edx
c010ab74:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010ab77:	01 d0                	add    %edx,%eax
c010ab79:	83 ec 04             	sub    $0x4,%esp
c010ab7c:	ff 75 dc             	pushl  -0x24(%ebp)
c010ab7f:	6a 00                	push   $0x0
c010ab81:	50                   	push   %eax
c010ab82:	e8 0e 19 00 00       	call   c010c495 <memset>
c010ab87:	83 c4 10             	add    $0x10,%esp
            start += size;
c010ab8a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010ab8d:	01 45 d8             	add    %eax,-0x28(%ebp)
            assert((end < la && start == end) || (end >= la && start == la));
c010ab90:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010ab93:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010ab96:	73 0c                	jae    c010aba4 <load_icode+0x2bd>
c010ab98:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010ab9b:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010ab9e:	0f 84 aa 00 00 00    	je     c010ac4e <load_icode+0x367>
c010aba4:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010aba7:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010abaa:	72 0c                	jb     c010abb8 <load_icode+0x2d1>
c010abac:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010abaf:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010abb2:	0f 84 96 00 00 00    	je     c010ac4e <load_icode+0x367>
c010abb8:	68 14 f3 10 c0       	push   $0xc010f314
c010abbd:	68 95 f2 10 c0       	push   $0xc010f295
c010abc2:	68 7a 02 00 00       	push   $0x27a
c010abc7:	68 68 f2 10 c0       	push   $0xc010f268
c010abcc:	e8 2c 58 ff ff       	call   c01003fd <__panic>
        }
        while (start < end) {
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
c010abd1:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010abd4:	8b 40 0c             	mov    0xc(%eax),%eax
c010abd7:	83 ec 04             	sub    $0x4,%esp
c010abda:	ff 75 e4             	pushl  -0x1c(%ebp)
c010abdd:	ff 75 d4             	pushl  -0x2c(%ebp)
c010abe0:	50                   	push   %eax
c010abe1:	e8 03 d2 ff ff       	call   c0107de9 <pgdir_alloc_page>
c010abe6:	83 c4 10             	add    $0x10,%esp
c010abe9:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010abec:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010abf0:	0f 84 8d 02 00 00    	je     c010ae83 <load_icode+0x59c>
                goto bad_cleanup_mmap;
            }
            off = start - la, size = PGSIZE - off, la += PGSIZE;
c010abf6:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010abf9:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c010abfc:	89 45 bc             	mov    %eax,-0x44(%ebp)
c010abff:	b8 00 10 00 00       	mov    $0x1000,%eax
c010ac04:	2b 45 bc             	sub    -0x44(%ebp),%eax
c010ac07:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010ac0a:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
            if (end < la) {
c010ac11:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010ac14:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010ac17:	73 09                	jae    c010ac22 <load_icode+0x33b>
                size -= la - end;
c010ac19:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010ac1c:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c010ac1f:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
c010ac22:	83 ec 0c             	sub    $0xc,%esp
c010ac25:	ff 75 f0             	pushl  -0x10(%ebp)
c010ac28:	e8 3b ef ff ff       	call   c0109b68 <page2kva>
c010ac2d:	83 c4 10             	add    $0x10,%esp
c010ac30:	89 c2                	mov    %eax,%edx
c010ac32:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010ac35:	01 d0                	add    %edx,%eax
c010ac37:	83 ec 04             	sub    $0x4,%esp
c010ac3a:	ff 75 dc             	pushl  -0x24(%ebp)
c010ac3d:	6a 00                	push   $0x0
c010ac3f:	50                   	push   %eax
c010ac40:	e8 50 18 00 00       	call   c010c495 <memset>
c010ac45:	83 c4 10             	add    $0x10,%esp
            start += size;
c010ac48:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010ac4b:	01 45 d8             	add    %eax,-0x28(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
            start += size;
            assert((end < la && start == end) || (end >= la && start == la));
        }
        while (start < end) {
c010ac4e:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010ac51:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010ac54:	0f 82 77 ff ff ff    	jb     c010abd1 <load_icode+0x2ea>
c010ac5a:	eb 07                	jmp    c010ac63 <load_icode+0x37c>
    uint32_t vm_flags, perm;
    struct proghdr *ph_end = ph + elf->e_phnum;
    for (; ph < ph_end; ph ++) {
    //(3.4) find every program section headers
        if (ph->p_type != ELF_PT_LOAD) {
            continue ;
c010ac5c:	90                   	nop
c010ac5d:	eb 04                	jmp    c010ac63 <load_icode+0x37c>
        if (ph->p_filesz > ph->p_memsz) {
            ret = -E_INVAL_ELF;
            goto bad_cleanup_mmap;
        }
        if (ph->p_filesz == 0) {
            continue ;
c010ac5f:	90                   	nop
c010ac60:	eb 01                	jmp    c010ac63 <load_icode+0x37c>
      //(3.6.2) build BSS section of binary program
        end = ph->p_va + ph->p_memsz;
        if (start < la) {
            /* ph->p_memsz == ph->p_filesz */
            if (start == end) {
                continue ;
c010ac62:	90                   	nop
        goto bad_elf_cleanup_pgdir;
    }

    uint32_t vm_flags, perm;
    struct proghdr *ph_end = ph + elf->e_phnum;
    for (; ph < ph_end; ph ++) {
c010ac63:	83 45 ec 20          	addl   $0x20,-0x14(%ebp)
c010ac67:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ac6a:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c010ac6d:	0f 82 14 fd ff ff    	jb     c010a987 <load_icode+0xa0>
            memset(page2kva(page) + off, 0, size);
            start += size;
        }
    }
    //(4) build user stack memory
    vm_flags = VM_READ | VM_WRITE | VM_STACK;
c010ac73:	c7 45 e8 0b 00 00 00 	movl   $0xb,-0x18(%ebp)
    if ((ret = mm_map(mm, USTACKTOP - USTACKSIZE, USTACKSIZE, vm_flags, NULL)) != 0) {
c010ac7a:	83 ec 0c             	sub    $0xc,%esp
c010ac7d:	6a 00                	push   $0x0
c010ac7f:	ff 75 e8             	pushl  -0x18(%ebp)
c010ac82:	68 00 00 10 00       	push   $0x100000
c010ac87:	68 00 00 f0 af       	push   $0xaff00000
c010ac8c:	ff 75 d0             	pushl  -0x30(%ebp)
c010ac8f:	e8 78 8d ff ff       	call   c0103a0c <mm_map>
c010ac94:	83 c4 20             	add    $0x20,%esp
c010ac97:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ac9a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ac9e:	0f 85 e2 01 00 00    	jne    c010ae86 <load_icode+0x59f>
        goto bad_cleanup_mmap;
    }
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-PGSIZE , PTE_USER) != NULL);
c010aca4:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010aca7:	8b 40 0c             	mov    0xc(%eax),%eax
c010acaa:	83 ec 04             	sub    $0x4,%esp
c010acad:	6a 07                	push   $0x7
c010acaf:	68 00 f0 ff af       	push   $0xaffff000
c010acb4:	50                   	push   %eax
c010acb5:	e8 2f d1 ff ff       	call   c0107de9 <pgdir_alloc_page>
c010acba:	83 c4 10             	add    $0x10,%esp
c010acbd:	85 c0                	test   %eax,%eax
c010acbf:	75 19                	jne    c010acda <load_icode+0x3f3>
c010acc1:	68 50 f3 10 c0       	push   $0xc010f350
c010acc6:	68 95 f2 10 c0       	push   $0xc010f295
c010accb:	68 8d 02 00 00       	push   $0x28d
c010acd0:	68 68 f2 10 c0       	push   $0xc010f268
c010acd5:	e8 23 57 ff ff       	call   c01003fd <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-2*PGSIZE , PTE_USER) != NULL);
c010acda:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010acdd:	8b 40 0c             	mov    0xc(%eax),%eax
c010ace0:	83 ec 04             	sub    $0x4,%esp
c010ace3:	6a 07                	push   $0x7
c010ace5:	68 00 e0 ff af       	push   $0xafffe000
c010acea:	50                   	push   %eax
c010aceb:	e8 f9 d0 ff ff       	call   c0107de9 <pgdir_alloc_page>
c010acf0:	83 c4 10             	add    $0x10,%esp
c010acf3:	85 c0                	test   %eax,%eax
c010acf5:	75 19                	jne    c010ad10 <load_icode+0x429>
c010acf7:	68 94 f3 10 c0       	push   $0xc010f394
c010acfc:	68 95 f2 10 c0       	push   $0xc010f295
c010ad01:	68 8e 02 00 00       	push   $0x28e
c010ad06:	68 68 f2 10 c0       	push   $0xc010f268
c010ad0b:	e8 ed 56 ff ff       	call   c01003fd <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-3*PGSIZE , PTE_USER) != NULL);
c010ad10:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010ad13:	8b 40 0c             	mov    0xc(%eax),%eax
c010ad16:	83 ec 04             	sub    $0x4,%esp
c010ad19:	6a 07                	push   $0x7
c010ad1b:	68 00 d0 ff af       	push   $0xafffd000
c010ad20:	50                   	push   %eax
c010ad21:	e8 c3 d0 ff ff       	call   c0107de9 <pgdir_alloc_page>
c010ad26:	83 c4 10             	add    $0x10,%esp
c010ad29:	85 c0                	test   %eax,%eax
c010ad2b:	75 19                	jne    c010ad46 <load_icode+0x45f>
c010ad2d:	68 d8 f3 10 c0       	push   $0xc010f3d8
c010ad32:	68 95 f2 10 c0       	push   $0xc010f295
c010ad37:	68 8f 02 00 00       	push   $0x28f
c010ad3c:	68 68 f2 10 c0       	push   $0xc010f268
c010ad41:	e8 b7 56 ff ff       	call   c01003fd <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-4*PGSIZE , PTE_USER) != NULL);
c010ad46:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010ad49:	8b 40 0c             	mov    0xc(%eax),%eax
c010ad4c:	83 ec 04             	sub    $0x4,%esp
c010ad4f:	6a 07                	push   $0x7
c010ad51:	68 00 c0 ff af       	push   $0xafffc000
c010ad56:	50                   	push   %eax
c010ad57:	e8 8d d0 ff ff       	call   c0107de9 <pgdir_alloc_page>
c010ad5c:	83 c4 10             	add    $0x10,%esp
c010ad5f:	85 c0                	test   %eax,%eax
c010ad61:	75 19                	jne    c010ad7c <load_icode+0x495>
c010ad63:	68 1c f4 10 c0       	push   $0xc010f41c
c010ad68:	68 95 f2 10 c0       	push   $0xc010f295
c010ad6d:	68 90 02 00 00       	push   $0x290
c010ad72:	68 68 f2 10 c0       	push   $0xc010f268
c010ad77:	e8 81 56 ff ff       	call   c01003fd <__panic>
    
    //(5) set current process's mm, sr3, and set CR3 reg = physical addr of Page Directory
    mm_count_inc(mm);
c010ad7c:	83 ec 0c             	sub    $0xc,%esp
c010ad7f:	ff 75 d0             	pushl  -0x30(%ebp)
c010ad82:	e8 65 ee ff ff       	call   c0109bec <mm_count_inc>
c010ad87:	83 c4 10             	add    $0x10,%esp
    current->mm = mm;
c010ad8a:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010ad8f:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010ad92:	89 50 18             	mov    %edx,0x18(%eax)
    current->cr3 = PADDR(mm->pgdir);
c010ad95:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010ad9a:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010ad9d:	8b 52 0c             	mov    0xc(%edx),%edx
c010ada0:	89 55 b8             	mov    %edx,-0x48(%ebp)
c010ada3:	81 7d b8 ff ff ff bf 	cmpl   $0xbfffffff,-0x48(%ebp)
c010adaa:	77 17                	ja     c010adc3 <load_icode+0x4dc>
c010adac:	ff 75 b8             	pushl  -0x48(%ebp)
c010adaf:	68 44 f2 10 c0       	push   $0xc010f244
c010adb4:	68 95 02 00 00       	push   $0x295
c010adb9:	68 68 f2 10 c0       	push   $0xc010f268
c010adbe:	e8 3a 56 ff ff       	call   c01003fd <__panic>
c010adc3:	8b 55 b8             	mov    -0x48(%ebp),%edx
c010adc6:	81 c2 00 00 00 40    	add    $0x40000000,%edx
c010adcc:	89 50 40             	mov    %edx,0x40(%eax)
    lcr3(PADDR(mm->pgdir));
c010adcf:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010add2:	8b 40 0c             	mov    0xc(%eax),%eax
c010add5:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c010add8:	81 7d b4 ff ff ff bf 	cmpl   $0xbfffffff,-0x4c(%ebp)
c010addf:	77 17                	ja     c010adf8 <load_icode+0x511>
c010ade1:	ff 75 b4             	pushl  -0x4c(%ebp)
c010ade4:	68 44 f2 10 c0       	push   $0xc010f244
c010ade9:	68 96 02 00 00       	push   $0x296
c010adee:	68 68 f2 10 c0       	push   $0xc010f268
c010adf3:	e8 05 56 ff ff       	call   c01003fd <__panic>
c010adf8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010adfb:	05 00 00 00 40       	add    $0x40000000,%eax
c010ae00:	89 45 ac             	mov    %eax,-0x54(%ebp)
c010ae03:	8b 45 ac             	mov    -0x54(%ebp),%eax
c010ae06:	0f 22 d8             	mov    %eax,%cr3

    //(6) setup trapframe for user environment
    struct trapframe *tf = current->tf;
c010ae09:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010ae0e:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ae11:	89 45 b0             	mov    %eax,-0x50(%ebp)
    memset(tf, 0, sizeof(struct trapframe));
c010ae14:	83 ec 04             	sub    $0x4,%esp
c010ae17:	6a 4c                	push   $0x4c
c010ae19:	6a 00                	push   $0x0
c010ae1b:	ff 75 b0             	pushl  -0x50(%ebp)
c010ae1e:	e8 72 16 00 00       	call   c010c495 <memset>
c010ae23:	83 c4 10             	add    $0x10,%esp
     *          tf_ds=tf_es=tf_ss should be USER_DS segment
     *          tf_esp should be the top addr of user stack (USTACKTOP)
     *          tf_eip should be the entry point of this binary program (elf->e_entry)
     *          tf_eflags should be set to enable computer to produce Interrupt
     */
    tf->tf_cs = USER_CS;
c010ae26:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010ae29:	66 c7 40 3c 1b 00    	movw   $0x1b,0x3c(%eax)
    tf->tf_ds = USER_DS;
c010ae2f:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010ae32:	66 c7 40 2c 23 00    	movw   $0x23,0x2c(%eax)
    tf->tf_es = USER_DS;
c010ae38:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010ae3b:	66 c7 40 28 23 00    	movw   $0x23,0x28(%eax)
    tf->tf_ss = USER_DS;
c010ae41:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010ae44:	66 c7 40 48 23 00    	movw   $0x23,0x48(%eax)
    tf->tf_esp = USTACKTOP;
c010ae4a:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010ae4d:	c7 40 44 00 00 00 b0 	movl   $0xb0000000,0x44(%eax)
    tf->tf_eip = elf->e_entry;
c010ae54:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010ae57:	8b 50 18             	mov    0x18(%eax),%edx
c010ae5a:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010ae5d:	89 50 38             	mov    %edx,0x38(%eax)
    tf->tf_eflags |= FL_IF;     // enable intr
c010ae60:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010ae63:	8b 40 40             	mov    0x40(%eax),%eax
c010ae66:	80 cc 02             	or     $0x2,%ah
c010ae69:	89 c2                	mov    %eax,%edx
c010ae6b:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010ae6e:	89 50 40             	mov    %edx,0x40(%eax)
    ret = 0;
c010ae71:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
out:
    return ret;
c010ae78:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ae7b:	eb 3c                	jmp    c010aeb9 <load_icode+0x5d2>
        if (ph->p_flags & ELF_PF_X) vm_flags |= VM_EXEC;
        if (ph->p_flags & ELF_PF_W) vm_flags |= VM_WRITE;
        if (ph->p_flags & ELF_PF_R) vm_flags |= VM_READ;
        if (vm_flags & VM_WRITE) perm |= PTE_W;
        if ((ret = mm_map(mm, ph->p_va, ph->p_memsz, vm_flags, NULL)) != 0) {
            goto bad_cleanup_mmap;
c010ae7d:	90                   	nop
c010ae7e:	eb 07                	jmp    c010ae87 <load_icode+0x5a0>
     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
        end = ph->p_va + ph->p_filesz;
     //(3.6.1) copy TEXT/DATA section of bianry program
        while (start < end) {
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
                goto bad_cleanup_mmap;
c010ae80:	90                   	nop
c010ae81:	eb 04                	jmp    c010ae87 <load_icode+0x5a0>
            start += size;
            assert((end < la && start == end) || (end >= la && start == la));
        }
        while (start < end) {
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
                goto bad_cleanup_mmap;
c010ae83:	90                   	nop
c010ae84:	eb 01                	jmp    c010ae87 <load_icode+0x5a0>
        }
    }
    //(4) build user stack memory
    vm_flags = VM_READ | VM_WRITE | VM_STACK;
    if ((ret = mm_map(mm, USTACKTOP - USTACKSIZE, USTACKSIZE, vm_flags, NULL)) != 0) {
        goto bad_cleanup_mmap;
c010ae86:	90                   	nop
    tf->tf_eflags |= FL_IF;     // enable intr
    ret = 0;
out:
    return ret;
bad_cleanup_mmap:
    exit_mmap(mm);
c010ae87:	83 ec 0c             	sub    $0xc,%esp
c010ae8a:	ff 75 d0             	pushl  -0x30(%ebp)
c010ae8d:	e8 69 8d ff ff       	call   c0103bfb <exit_mmap>
c010ae92:	83 c4 10             	add    $0x10,%esp
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
c010ae95:	83 ec 0c             	sub    $0xc,%esp
c010ae98:	ff 75 d0             	pushl  -0x30(%ebp)
c010ae9b:	e8 34 f5 ff ff       	call   c010a3d4 <put_pgdir>
c010aea0:	83 c4 10             	add    $0x10,%esp
c010aea3:	eb 01                	jmp    c010aea6 <load_icode+0x5bf>
    if ((mm = mm_create()) == NULL) {
        goto bad_mm;
    }
    //(2) create a new PDT, and mm->pgdir= kernel virtual addr of PDT
    if (setup_pgdir(mm) != 0) {
        goto bad_pgdir_cleanup_mm;
c010aea5:	90                   	nop
bad_cleanup_mmap:
    exit_mmap(mm);
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
c010aea6:	83 ec 0c             	sub    $0xc,%esp
c010aea9:	ff 75 d0             	pushl  -0x30(%ebp)
c010aeac:	e8 bc 8a ff ff       	call   c010396d <mm_destroy>
c010aeb1:	83 c4 10             	add    $0x10,%esp
bad_mm:
    goto out;
c010aeb4:	eb c2                	jmp    c010ae78 <load_icode+0x591>

    int ret = -E_NO_MEM;
    struct mm_struct *mm;
    //(1) create a new mm for current process
    if ((mm = mm_create()) == NULL) {
        goto bad_mm;
c010aeb6:	90                   	nop
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
bad_mm:
    goto out;
c010aeb7:	eb bf                	jmp    c010ae78 <load_icode+0x591>
}
c010aeb9:	c9                   	leave  
c010aeba:	c3                   	ret    

c010aebb <do_execve>:

// do_execve - call exit_mmap(mm)&put_pgdir(mm) to reclaim memory space of current process
//           - call load_icode to setup new memory space accroding binary prog.
int
do_execve(const char *name, size_t len, unsigned char *binary, size_t size) {
c010aebb:	55                   	push   %ebp
c010aebc:	89 e5                	mov    %esp,%ebp
c010aebe:	83 ec 48             	sub    $0x48,%esp
    struct mm_struct *mm = current->mm;
c010aec1:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010aec6:	8b 40 18             	mov    0x18(%eax),%eax
c010aec9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!user_mem_check(mm, (uintptr_t)name, len, 0)) {
c010aecc:	8b 45 08             	mov    0x8(%ebp),%eax
c010aecf:	6a 00                	push   $0x0
c010aed1:	ff 75 0c             	pushl  0xc(%ebp)
c010aed4:	50                   	push   %eax
c010aed5:	ff 75 f4             	pushl  -0xc(%ebp)
c010aed8:	e8 af 96 ff ff       	call   c010458c <user_mem_check>
c010aedd:	83 c4 10             	add    $0x10,%esp
c010aee0:	85 c0                	test   %eax,%eax
c010aee2:	75 0a                	jne    c010aeee <do_execve+0x33>
        return -E_INVAL;
c010aee4:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010aee9:	e9 ed 00 00 00       	jmp    c010afdb <do_execve+0x120>
    }
    if (len > PROC_NAME_LEN) {
c010aeee:	83 7d 0c 32          	cmpl   $0x32,0xc(%ebp)
c010aef2:	76 07                	jbe    c010aefb <do_execve+0x40>
        len = PROC_NAME_LEN;
c010aef4:	c7 45 0c 32 00 00 00 	movl   $0x32,0xc(%ebp)
    }

    char local_name[PROC_NAME_LEN + 1];
    memset(local_name, 0, sizeof(local_name));
c010aefb:	83 ec 04             	sub    $0x4,%esp
c010aefe:	6a 33                	push   $0x33
c010af00:	6a 00                	push   $0x0
c010af02:	8d 45 b9             	lea    -0x47(%ebp),%eax
c010af05:	50                   	push   %eax
c010af06:	e8 8a 15 00 00       	call   c010c495 <memset>
c010af0b:	83 c4 10             	add    $0x10,%esp
    memcpy(local_name, name, len);
c010af0e:	83 ec 04             	sub    $0x4,%esp
c010af11:	ff 75 0c             	pushl  0xc(%ebp)
c010af14:	ff 75 08             	pushl  0x8(%ebp)
c010af17:	8d 45 b9             	lea    -0x47(%ebp),%eax
c010af1a:	50                   	push   %eax
c010af1b:	e8 58 16 00 00       	call   c010c578 <memcpy>
c010af20:	83 c4 10             	add    $0x10,%esp

    if (mm != NULL) {
c010af23:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010af27:	74 56                	je     c010af7f <do_execve+0xc4>
        lcr3(boot_cr3);
c010af29:	a1 f4 71 1c c0       	mov    0xc01c71f4,%eax
c010af2e:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010af31:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010af34:	0f 22 d8             	mov    %eax,%cr3
        if (mm_count_dec(mm) == 0) {
c010af37:	83 ec 0c             	sub    $0xc,%esp
c010af3a:	ff 75 f4             	pushl  -0xc(%ebp)
c010af3d:	e8 c4 ec ff ff       	call   c0109c06 <mm_count_dec>
c010af42:	83 c4 10             	add    $0x10,%esp
c010af45:	85 c0                	test   %eax,%eax
c010af47:	75 2a                	jne    c010af73 <do_execve+0xb8>
            exit_mmap(mm);
c010af49:	83 ec 0c             	sub    $0xc,%esp
c010af4c:	ff 75 f4             	pushl  -0xc(%ebp)
c010af4f:	e8 a7 8c ff ff       	call   c0103bfb <exit_mmap>
c010af54:	83 c4 10             	add    $0x10,%esp
            put_pgdir(mm);
c010af57:	83 ec 0c             	sub    $0xc,%esp
c010af5a:	ff 75 f4             	pushl  -0xc(%ebp)
c010af5d:	e8 72 f4 ff ff       	call   c010a3d4 <put_pgdir>
c010af62:	83 c4 10             	add    $0x10,%esp
            mm_destroy(mm);
c010af65:	83 ec 0c             	sub    $0xc,%esp
c010af68:	ff 75 f4             	pushl  -0xc(%ebp)
c010af6b:	e8 fd 89 ff ff       	call   c010396d <mm_destroy>
c010af70:	83 c4 10             	add    $0x10,%esp
        }
        current->mm = NULL;
c010af73:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010af78:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    int ret;
    if ((ret = load_icode(binary, size)) != 0) {
c010af7f:	83 ec 08             	sub    $0x8,%esp
c010af82:	ff 75 14             	pushl  0x14(%ebp)
c010af85:	ff 75 10             	pushl  0x10(%ebp)
c010af88:	e8 5a f9 ff ff       	call   c010a8e7 <load_icode>
c010af8d:	83 c4 10             	add    $0x10,%esp
c010af90:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010af93:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010af97:	75 1c                	jne    c010afb5 <do_execve+0xfa>
        goto execve_exit;
    }
    set_proc_name(current, local_name);
c010af99:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010af9e:	83 ec 08             	sub    $0x8,%esp
c010afa1:	8d 55 b9             	lea    -0x47(%ebp),%edx
c010afa4:	52                   	push   %edx
c010afa5:	50                   	push   %eax
c010afa6:	e8 43 ee ff ff       	call   c0109dee <set_proc_name>
c010afab:	83 c4 10             	add    $0x10,%esp
    return 0;
c010afae:	b8 00 00 00 00       	mov    $0x0,%eax
c010afb3:	eb 26                	jmp    c010afdb <do_execve+0x120>
        }
        current->mm = NULL;
    }
    int ret;
    if ((ret = load_icode(binary, size)) != 0) {
        goto execve_exit;
c010afb5:	90                   	nop
    }
    set_proc_name(current, local_name);
    return 0;

execve_exit:
    do_exit(ret);
c010afb6:	83 ec 0c             	sub    $0xc,%esp
c010afb9:	ff 75 f0             	pushl  -0x10(%ebp)
c010afbc:	e8 2c f7 ff ff       	call   c010a6ed <do_exit>
c010afc1:	83 c4 10             	add    $0x10,%esp
    panic("already exit: %e.\n", ret);
c010afc4:	ff 75 f0             	pushl  -0x10(%ebp)
c010afc7:	68 5f f4 10 c0       	push   $0xc010f45f
c010afcc:	68 da 02 00 00       	push   $0x2da
c010afd1:	68 68 f2 10 c0       	push   $0xc010f268
c010afd6:	e8 22 54 ff ff       	call   c01003fd <__panic>
}
c010afdb:	c9                   	leave  
c010afdc:	c3                   	ret    

c010afdd <do_yield>:

// do_yield - ask the scheduler to reschedule
int
do_yield(void) {
c010afdd:	55                   	push   %ebp
c010afde:	89 e5                	mov    %esp,%ebp
    current->need_resched = 1;
c010afe0:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010afe5:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    return 0;
c010afec:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010aff1:	5d                   	pop    %ebp
c010aff2:	c3                   	ret    

c010aff3 <do_wait>:

// do_wait - wait one OR any children with PROC_ZOMBIE state, and free memory space of kernel stack
//         - proc struct of this child.
// NOTE: only after do_wait function, all resources of the child proces are free.
int
do_wait(int pid, int *code_store) {
c010aff3:	55                   	push   %ebp
c010aff4:	89 e5                	mov    %esp,%ebp
c010aff6:	83 ec 18             	sub    $0x18,%esp
    struct mm_struct *mm = current->mm;
c010aff9:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010affe:	8b 40 18             	mov    0x18(%eax),%eax
c010b001:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (code_store != NULL) {
c010b004:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010b008:	74 21                	je     c010b02b <do_wait+0x38>
        if (!user_mem_check(mm, (uintptr_t)code_store, sizeof(int), 1)) {
c010b00a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b00d:	6a 01                	push   $0x1
c010b00f:	6a 04                	push   $0x4
c010b011:	50                   	push   %eax
c010b012:	ff 75 ec             	pushl  -0x14(%ebp)
c010b015:	e8 72 95 ff ff       	call   c010458c <user_mem_check>
c010b01a:	83 c4 10             	add    $0x10,%esp
c010b01d:	85 c0                	test   %eax,%eax
c010b01f:	75 0a                	jne    c010b02b <do_wait+0x38>
            return -E_INVAL;
c010b021:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010b026:	e9 63 01 00 00       	jmp    c010b18e <do_wait+0x19b>
    }

    struct proc_struct *proc;
    bool intr_flag, haskid;
repeat:
    haskid = 0;
c010b02b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    if (pid != 0) {
c010b032:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b036:	74 3c                	je     c010b074 <do_wait+0x81>
        proc = find_proc(pid);
c010b038:	83 ec 0c             	sub    $0xc,%esp
c010b03b:	ff 75 08             	pushl  0x8(%ebp)
c010b03e:	e8 b8 f1 ff ff       	call   c010a1fb <find_proc>
c010b043:	83 c4 10             	add    $0x10,%esp
c010b046:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (proc != NULL && proc->parent == current) {
c010b049:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b04d:	74 58                	je     c010b0a7 <do_wait+0xb4>
c010b04f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b052:	8b 50 14             	mov    0x14(%eax),%edx
c010b055:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010b05a:	39 c2                	cmp    %eax,%edx
c010b05c:	75 49                	jne    c010b0a7 <do_wait+0xb4>
            haskid = 1;
c010b05e:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c010b065:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b068:	8b 00                	mov    (%eax),%eax
c010b06a:	83 f8 03             	cmp    $0x3,%eax
c010b06d:	75 38                	jne    c010b0a7 <do_wait+0xb4>
                goto found;
c010b06f:	e9 88 00 00 00       	jmp    c010b0fc <do_wait+0x109>
            }
        }
    }
    else {
        proc = current->cptr;
c010b074:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010b079:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010b07f:	89 45 f4             	mov    %eax,-0xc(%ebp)
        for (; proc != NULL; proc = proc->optr) {
c010b082:	eb 1d                	jmp    c010b0a1 <do_wait+0xae>
            haskid = 1;
c010b084:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c010b08b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b08e:	8b 00                	mov    (%eax),%eax
c010b090:	83 f8 03             	cmp    $0x3,%eax
c010b093:	74 66                	je     c010b0fb <do_wait+0x108>
            }
        }
    }
    else {
        proc = current->cptr;
        for (; proc != NULL; proc = proc->optr) {
c010b095:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b098:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010b09e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b0a1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b0a5:	75 dd                	jne    c010b084 <do_wait+0x91>
            if (proc->state == PROC_ZOMBIE) {
                goto found;
            }
        }
    }
    if (haskid) {
c010b0a7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b0ab:	74 44                	je     c010b0f1 <do_wait+0xfe>
        current->state = PROC_SLEEPING;
c010b0ad:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010b0b2:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        current->wait_state = WT_CHILD;
c010b0b8:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010b0bd:	c7 80 90 00 00 00 01 	movl   $0x80000001,0x90(%eax)
c010b0c4:	00 00 80 
        schedule();
c010b0c7:	e8 71 07 00 00       	call   c010b83d <schedule>
        if (current->flags & PF_EXITING) {
c010b0cc:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010b0d1:	8b 40 44             	mov    0x44(%eax),%eax
c010b0d4:	83 e0 01             	and    $0x1,%eax
c010b0d7:	85 c0                	test   %eax,%eax
c010b0d9:	0f 84 4c ff ff ff    	je     c010b02b <do_wait+0x38>
            do_exit(-E_KILLED);
c010b0df:	83 ec 0c             	sub    $0xc,%esp
c010b0e2:	6a f7                	push   $0xfffffff7
c010b0e4:	e8 04 f6 ff ff       	call   c010a6ed <do_exit>
c010b0e9:	83 c4 10             	add    $0x10,%esp
        }
        goto repeat;
c010b0ec:	e9 3a ff ff ff       	jmp    c010b02b <do_wait+0x38>
    }
    return -E_BAD_PROC;
c010b0f1:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
c010b0f6:	e9 93 00 00 00       	jmp    c010b18e <do_wait+0x19b>
    else {
        proc = current->cptr;
        for (; proc != NULL; proc = proc->optr) {
            haskid = 1;
            if (proc->state == PROC_ZOMBIE) {
                goto found;
c010b0fb:	90                   	nop
        goto repeat;
    }
    return -E_BAD_PROC;

found:
    if (proc == idleproc || proc == initproc) {
c010b0fc:	a1 20 50 1c c0       	mov    0xc01c5020,%eax
c010b101:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010b104:	74 0a                	je     c010b110 <do_wait+0x11d>
c010b106:	a1 24 50 1c c0       	mov    0xc01c5024,%eax
c010b10b:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010b10e:	75 17                	jne    c010b127 <do_wait+0x134>
        panic("wait idleproc or initproc.\n");
c010b110:	83 ec 04             	sub    $0x4,%esp
c010b113:	68 72 f4 10 c0       	push   $0xc010f472
c010b118:	68 13 03 00 00       	push   $0x313
c010b11d:	68 68 f2 10 c0       	push   $0xc010f268
c010b122:	e8 d6 52 ff ff       	call   c01003fd <__panic>
    }
    if (code_store != NULL) {
c010b127:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010b12b:	74 0e                	je     c010b13b <do_wait+0x148>
        *code_store = proc->exit_code;
c010b12d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b130:	8b 90 8c 00 00 00    	mov    0x8c(%eax),%edx
c010b136:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b139:	89 10                	mov    %edx,(%eax)
    }
    local_intr_save(intr_flag);
c010b13b:	e8 87 e9 ff ff       	call   c0109ac7 <__intr_save>
c010b140:	89 45 e8             	mov    %eax,-0x18(%ebp)
    {
        unhash_proc(proc);
c010b143:	83 ec 0c             	sub    $0xc,%esp
c010b146:	ff 75 f4             	pushl  -0xc(%ebp)
c010b149:	e8 77 f0 ff ff       	call   c010a1c5 <unhash_proc>
c010b14e:	83 c4 10             	add    $0x10,%esp
        remove_links(proc);
c010b151:	83 ec 0c             	sub    $0xc,%esp
c010b154:	ff 75 f4             	pushl  -0xc(%ebp)
c010b157:	e8 b7 ed ff ff       	call   c0109f13 <remove_links>
c010b15c:	83 c4 10             	add    $0x10,%esp
    }
    local_intr_restore(intr_flag);
c010b15f:	83 ec 0c             	sub    $0xc,%esp
c010b162:	ff 75 e8             	pushl  -0x18(%ebp)
c010b165:	e8 87 e9 ff ff       	call   c0109af1 <__intr_restore>
c010b16a:	83 c4 10             	add    $0x10,%esp
    put_kstack(proc);
c010b16d:	83 ec 0c             	sub    $0xc,%esp
c010b170:	ff 75 f4             	pushl  -0xc(%ebp)
c010b173:	e8 9a f1 ff ff       	call   c010a312 <put_kstack>
c010b178:	83 c4 10             	add    $0x10,%esp
    kfree(proc);
c010b17b:	83 ec 0c             	sub    $0xc,%esp
c010b17e:	ff 75 f4             	pushl  -0xc(%ebp)
c010b181:	e8 fb 9f ff ff       	call   c0105181 <kfree>
c010b186:	83 c4 10             	add    $0x10,%esp
    return 0;
c010b189:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010b18e:	c9                   	leave  
c010b18f:	c3                   	ret    

c010b190 <do_kill>:

// do_kill - kill process with pid by set this process's flags with PF_EXITING
int
do_kill(int pid) {
c010b190:	55                   	push   %ebp
c010b191:	89 e5                	mov    %esp,%ebp
c010b193:	83 ec 18             	sub    $0x18,%esp
    struct proc_struct *proc;
    if ((proc = find_proc(pid)) != NULL) {
c010b196:	83 ec 0c             	sub    $0xc,%esp
c010b199:	ff 75 08             	pushl  0x8(%ebp)
c010b19c:	e8 5a f0 ff ff       	call   c010a1fb <find_proc>
c010b1a1:	83 c4 10             	add    $0x10,%esp
c010b1a4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b1a7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b1ab:	74 47                	je     c010b1f4 <do_kill+0x64>
        if (!(proc->flags & PF_EXITING)) {
c010b1ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b1b0:	8b 40 44             	mov    0x44(%eax),%eax
c010b1b3:	83 e0 01             	and    $0x1,%eax
c010b1b6:	85 c0                	test   %eax,%eax
c010b1b8:	75 33                	jne    c010b1ed <do_kill+0x5d>
            proc->flags |= PF_EXITING;
c010b1ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b1bd:	8b 40 44             	mov    0x44(%eax),%eax
c010b1c0:	83 c8 01             	or     $0x1,%eax
c010b1c3:	89 c2                	mov    %eax,%edx
c010b1c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b1c8:	89 50 44             	mov    %edx,0x44(%eax)
            if (proc->wait_state & WT_INTERRUPTED) {
c010b1cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b1ce:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010b1d4:	85 c0                	test   %eax,%eax
c010b1d6:	79 0e                	jns    c010b1e6 <do_kill+0x56>
                wakeup_proc(proc);
c010b1d8:	83 ec 0c             	sub    $0xc,%esp
c010b1db:	ff 75 f4             	pushl  -0xc(%ebp)
c010b1de:	e8 ca 05 00 00       	call   c010b7ad <wakeup_proc>
c010b1e3:	83 c4 10             	add    $0x10,%esp
            }
            return 0;
c010b1e6:	b8 00 00 00 00       	mov    $0x0,%eax
c010b1eb:	eb 0c                	jmp    c010b1f9 <do_kill+0x69>
        }
        return -E_KILLED;
c010b1ed:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
c010b1f2:	eb 05                	jmp    c010b1f9 <do_kill+0x69>
    }
    return -E_INVAL;
c010b1f4:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c010b1f9:	c9                   	leave  
c010b1fa:	c3                   	ret    

c010b1fb <kernel_execve>:

// kernel_execve - do SYS_exec syscall to exec a user program called by user_main kernel_thread
static int
kernel_execve(const char *name, unsigned char *binary, size_t size) {
c010b1fb:	55                   	push   %ebp
c010b1fc:	89 e5                	mov    %esp,%ebp
c010b1fe:	57                   	push   %edi
c010b1ff:	56                   	push   %esi
c010b200:	53                   	push   %ebx
c010b201:	83 ec 1c             	sub    $0x1c,%esp
    int ret, len = strlen(name);
c010b204:	83 ec 0c             	sub    $0xc,%esp
c010b207:	ff 75 08             	pushl  0x8(%ebp)
c010b20a:	e8 55 0f 00 00       	call   c010c164 <strlen>
c010b20f:	83 c4 10             	add    $0x10,%esp
c010b212:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    asm volatile (
c010b215:	b8 04 00 00 00       	mov    $0x4,%eax
c010b21a:	8b 55 08             	mov    0x8(%ebp),%edx
c010b21d:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c010b220:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c010b223:	8b 75 10             	mov    0x10(%ebp),%esi
c010b226:	89 f7                	mov    %esi,%edi
c010b228:	cd 80                	int    $0x80
c010b22a:	89 45 e0             	mov    %eax,-0x20(%ebp)
        "int %1;"
        : "=a" (ret)
        : "i" (T_SYSCALL), "0" (SYS_exec), "d" (name), "c" (len), "b" (binary), "D" (size)
        : "memory");
    return ret;
c010b22d:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
c010b230:	8d 65 f4             	lea    -0xc(%ebp),%esp
c010b233:	5b                   	pop    %ebx
c010b234:	5e                   	pop    %esi
c010b235:	5f                   	pop    %edi
c010b236:	5d                   	pop    %ebp
c010b237:	c3                   	ret    

c010b238 <user_main>:

#define KERNEL_EXECVE2(x, xstart, xsize)        __KERNEL_EXECVE2(x, xstart, xsize)

// user_main - kernel thread used to exec a user program
static int
user_main(void *arg) {
c010b238:	55                   	push   %ebp
c010b239:	89 e5                	mov    %esp,%ebp
c010b23b:	83 ec 08             	sub    $0x8,%esp
#ifdef TEST
    KERNEL_EXECVE2(TEST, TESTSTART, TESTSIZE);
c010b23e:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010b243:	8b 40 04             	mov    0x4(%eax),%eax
c010b246:	83 ec 04             	sub    $0x4,%esp
c010b249:	68 8e f4 10 c0       	push   $0xc010f48e
c010b24e:	50                   	push   %eax
c010b24f:	68 98 f4 10 c0       	push   $0xc010f498
c010b254:	e8 3e 50 ff ff       	call   c0100297 <cprintf>
c010b259:	83 c4 10             	add    $0x10,%esp
c010b25c:	b8 98 79 00 00       	mov    $0x7998,%eax
c010b261:	83 ec 04             	sub    $0x4,%esp
c010b264:	50                   	push   %eax
c010b265:	68 1c a2 1b c0       	push   $0xc01ba21c
c010b26a:	68 8e f4 10 c0       	push   $0xc010f48e
c010b26f:	e8 87 ff ff ff       	call   c010b1fb <kernel_execve>
c010b274:	83 c4 10             	add    $0x10,%esp
#else
    KERNEL_EXECVE(exit);
#endif
    panic("user_main execve failed.\n");
c010b277:	83 ec 04             	sub    $0x4,%esp
c010b27a:	68 bf f4 10 c0       	push   $0xc010f4bf
c010b27f:	68 5c 03 00 00       	push   $0x35c
c010b284:	68 68 f2 10 c0       	push   $0xc010f268
c010b289:	e8 6f 51 ff ff       	call   c01003fd <__panic>

c010b28e <init_main>:
}

// init_main - the second kernel thread used to create user_main kernel threads
static int
init_main(void *arg) {
c010b28e:	55                   	push   %ebp
c010b28f:	89 e5                	mov    %esp,%ebp
c010b291:	83 ec 28             	sub    $0x28,%esp
    size_t nr_free_pages_store = nr_free_pages();
c010b294:	e8 9b be ff ff       	call   c0107134 <nr_free_pages>
c010b299:	89 45 f4             	mov    %eax,-0xc(%ebp)
    size_t kernel_allocated_store = kallocated();
c010b29c:	e8 ab 9d ff ff       	call   c010504c <kallocated>
c010b2a1:	89 45 f0             	mov    %eax,-0x10(%ebp)

    int pid = kernel_thread(user_main, NULL, 0);
c010b2a4:	83 ec 04             	sub    $0x4,%esp
c010b2a7:	6a 00                	push   $0x0
c010b2a9:	6a 00                	push   $0x0
c010b2ab:	68 38 b2 10 c0       	push   $0xc010b238
c010b2b0:	e8 b8 ef ff ff       	call   c010a26d <kernel_thread>
c010b2b5:	83 c4 10             	add    $0x10,%esp
c010b2b8:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (pid <= 0) {
c010b2bb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010b2bf:	7f 17                	jg     c010b2d8 <init_main+0x4a>
        panic("create user_main failed.\n");
c010b2c1:	83 ec 04             	sub    $0x4,%esp
c010b2c4:	68 d9 f4 10 c0       	push   $0xc010f4d9
c010b2c9:	68 67 03 00 00       	push   $0x367
c010b2ce:	68 68 f2 10 c0       	push   $0xc010f268
c010b2d3:	e8 25 51 ff ff       	call   c01003fd <__panic>
    }
 extern void check_sync(void);
    check_sync();                // check philosopher sync problem
c010b2d8:	e8 ce db ff ff       	call   c0108eab <check_sync>

    while (do_wait(0, NULL) == 0) {
c010b2dd:	eb 05                	jmp    c010b2e4 <init_main+0x56>
        schedule();
c010b2df:	e8 59 05 00 00       	call   c010b83d <schedule>
        panic("create user_main failed.\n");
    }
 extern void check_sync(void);
    check_sync();                // check philosopher sync problem

    while (do_wait(0, NULL) == 0) {
c010b2e4:	83 ec 08             	sub    $0x8,%esp
c010b2e7:	6a 00                	push   $0x0
c010b2e9:	6a 00                	push   $0x0
c010b2eb:	e8 03 fd ff ff       	call   c010aff3 <do_wait>
c010b2f0:	83 c4 10             	add    $0x10,%esp
c010b2f3:	85 c0                	test   %eax,%eax
c010b2f5:	74 e8                	je     c010b2df <init_main+0x51>
        schedule();
    }

    cprintf("all user-mode processes have quit.\n");
c010b2f7:	83 ec 0c             	sub    $0xc,%esp
c010b2fa:	68 f4 f4 10 c0       	push   $0xc010f4f4
c010b2ff:	e8 93 4f ff ff       	call   c0100297 <cprintf>
c010b304:	83 c4 10             	add    $0x10,%esp
    assert(initproc->cptr == NULL && initproc->yptr == NULL && initproc->optr == NULL);
c010b307:	a1 24 50 1c c0       	mov    0xc01c5024,%eax
c010b30c:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010b312:	85 c0                	test   %eax,%eax
c010b314:	75 1e                	jne    c010b334 <init_main+0xa6>
c010b316:	a1 24 50 1c c0       	mov    0xc01c5024,%eax
c010b31b:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010b321:	85 c0                	test   %eax,%eax
c010b323:	75 0f                	jne    c010b334 <init_main+0xa6>
c010b325:	a1 24 50 1c c0       	mov    0xc01c5024,%eax
c010b32a:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010b330:	85 c0                	test   %eax,%eax
c010b332:	74 19                	je     c010b34d <init_main+0xbf>
c010b334:	68 18 f5 10 c0       	push   $0xc010f518
c010b339:	68 95 f2 10 c0       	push   $0xc010f295
c010b33e:	68 71 03 00 00       	push   $0x371
c010b343:	68 68 f2 10 c0       	push   $0xc010f268
c010b348:	e8 b0 50 ff ff       	call   c01003fd <__panic>
    assert(nr_process == 2);
c010b34d:	a1 40 70 1c c0       	mov    0xc01c7040,%eax
c010b352:	83 f8 02             	cmp    $0x2,%eax
c010b355:	74 19                	je     c010b370 <init_main+0xe2>
c010b357:	68 63 f5 10 c0       	push   $0xc010f563
c010b35c:	68 95 f2 10 c0       	push   $0xc010f295
c010b361:	68 72 03 00 00       	push   $0x372
c010b366:	68 68 f2 10 c0       	push   $0xc010f268
c010b36b:	e8 8d 50 ff ff       	call   c01003fd <__panic>
c010b370:	c7 45 e4 dc 72 1c c0 	movl   $0xc01c72dc,-0x1c(%ebp)
c010b377:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b37a:	8b 40 04             	mov    0x4(%eax),%eax
    assert(list_next(&proc_list) == &(initproc->list_link));
c010b37d:	8b 15 24 50 1c c0    	mov    0xc01c5024,%edx
c010b383:	83 c2 7c             	add    $0x7c,%edx
c010b386:	39 d0                	cmp    %edx,%eax
c010b388:	74 19                	je     c010b3a3 <init_main+0x115>
c010b38a:	68 74 f5 10 c0       	push   $0xc010f574
c010b38f:	68 95 f2 10 c0       	push   $0xc010f295
c010b394:	68 73 03 00 00       	push   $0x373
c010b399:	68 68 f2 10 c0       	push   $0xc010f268
c010b39e:	e8 5a 50 ff ff       	call   c01003fd <__panic>
c010b3a3:	c7 45 e8 dc 72 1c c0 	movl   $0xc01c72dc,-0x18(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c010b3aa:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b3ad:	8b 00                	mov    (%eax),%eax
    assert(list_prev(&proc_list) == &(initproc->list_link));
c010b3af:	8b 15 24 50 1c c0    	mov    0xc01c5024,%edx
c010b3b5:	83 c2 7c             	add    $0x7c,%edx
c010b3b8:	39 d0                	cmp    %edx,%eax
c010b3ba:	74 19                	je     c010b3d5 <init_main+0x147>
c010b3bc:	68 a4 f5 10 c0       	push   $0xc010f5a4
c010b3c1:	68 95 f2 10 c0       	push   $0xc010f295
c010b3c6:	68 74 03 00 00       	push   $0x374
c010b3cb:	68 68 f2 10 c0       	push   $0xc010f268
c010b3d0:	e8 28 50 ff ff       	call   c01003fd <__panic>

    cprintf("init check memory pass.\n");
c010b3d5:	83 ec 0c             	sub    $0xc,%esp
c010b3d8:	68 d4 f5 10 c0       	push   $0xc010f5d4
c010b3dd:	e8 b5 4e ff ff       	call   c0100297 <cprintf>
c010b3e2:	83 c4 10             	add    $0x10,%esp
    return 0;
c010b3e5:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010b3ea:	c9                   	leave  
c010b3eb:	c3                   	ret    

c010b3ec <proc_init>:

// proc_init - set up the first kernel thread idleproc "idle" by itself and 
//           - create the second kernel thread init_main
void
proc_init(void) {
c010b3ec:	55                   	push   %ebp
c010b3ed:	89 e5                	mov    %esp,%ebp
c010b3ef:	83 ec 18             	sub    $0x18,%esp
c010b3f2:	c7 45 e8 dc 72 1c c0 	movl   $0xc01c72dc,-0x18(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010b3f9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b3fc:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010b3ff:	89 50 04             	mov    %edx,0x4(%eax)
c010b402:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b405:	8b 50 04             	mov    0x4(%eax),%edx
c010b408:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b40b:	89 10                	mov    %edx,(%eax)
    int i;

    list_init(&proc_list);
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c010b40d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010b414:	eb 26                	jmp    c010b43c <proc_init+0x50>
        list_init(hash_list + i);
c010b416:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b419:	c1 e0 03             	shl    $0x3,%eax
c010b41c:	05 40 50 1c c0       	add    $0xc01c5040,%eax
c010b421:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b424:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b427:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010b42a:	89 50 04             	mov    %edx,0x4(%eax)
c010b42d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b430:	8b 50 04             	mov    0x4(%eax),%edx
c010b433:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b436:	89 10                	mov    %edx,(%eax)
void
proc_init(void) {
    int i;

    list_init(&proc_list);
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c010b438:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010b43c:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
c010b443:	7e d1                	jle    c010b416 <proc_init+0x2a>
        list_init(hash_list + i);
    }

    if ((idleproc = alloc_proc()) == NULL) {
c010b445:	e8 39 e8 ff ff       	call   c0109c83 <alloc_proc>
c010b44a:	a3 20 50 1c c0       	mov    %eax,0xc01c5020
c010b44f:	a1 20 50 1c c0       	mov    0xc01c5020,%eax
c010b454:	85 c0                	test   %eax,%eax
c010b456:	75 17                	jne    c010b46f <proc_init+0x83>
        panic("cannot alloc idleproc.\n");
c010b458:	83 ec 04             	sub    $0x4,%esp
c010b45b:	68 ed f5 10 c0       	push   $0xc010f5ed
c010b460:	68 86 03 00 00       	push   $0x386
c010b465:	68 68 f2 10 c0       	push   $0xc010f268
c010b46a:	e8 8e 4f ff ff       	call   c01003fd <__panic>
    }

    idleproc->pid = 0;
c010b46f:	a1 20 50 1c c0       	mov    0xc01c5020,%eax
c010b474:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    idleproc->state = PROC_RUNNABLE;
c010b47b:	a1 20 50 1c c0       	mov    0xc01c5020,%eax
c010b480:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    idleproc->kstack = (uintptr_t)bootstack;
c010b486:	a1 20 50 1c c0       	mov    0xc01c5020,%eax
c010b48b:	ba 00 f0 12 c0       	mov    $0xc012f000,%edx
c010b490:	89 50 0c             	mov    %edx,0xc(%eax)
    idleproc->need_resched = 1;
c010b493:	a1 20 50 1c c0       	mov    0xc01c5020,%eax
c010b498:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    set_proc_name(idleproc, "idle");
c010b49f:	a1 20 50 1c c0       	mov    0xc01c5020,%eax
c010b4a4:	83 ec 08             	sub    $0x8,%esp
c010b4a7:	68 05 f6 10 c0       	push   $0xc010f605
c010b4ac:	50                   	push   %eax
c010b4ad:	e8 3c e9 ff ff       	call   c0109dee <set_proc_name>
c010b4b2:	83 c4 10             	add    $0x10,%esp
    nr_process ++;
c010b4b5:	a1 40 70 1c c0       	mov    0xc01c7040,%eax
c010b4ba:	83 c0 01             	add    $0x1,%eax
c010b4bd:	a3 40 70 1c c0       	mov    %eax,0xc01c7040

    current = idleproc;
c010b4c2:	a1 20 50 1c c0       	mov    0xc01c5020,%eax
c010b4c7:	a3 28 50 1c c0       	mov    %eax,0xc01c5028

    int pid = kernel_thread(init_main, NULL, 0);
c010b4cc:	83 ec 04             	sub    $0x4,%esp
c010b4cf:	6a 00                	push   $0x0
c010b4d1:	6a 00                	push   $0x0
c010b4d3:	68 8e b2 10 c0       	push   $0xc010b28e
c010b4d8:	e8 90 ed ff ff       	call   c010a26d <kernel_thread>
c010b4dd:	83 c4 10             	add    $0x10,%esp
c010b4e0:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (pid <= 0) {
c010b4e3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010b4e7:	7f 17                	jg     c010b500 <proc_init+0x114>
        panic("create init_main failed.\n");
c010b4e9:	83 ec 04             	sub    $0x4,%esp
c010b4ec:	68 0a f6 10 c0       	push   $0xc010f60a
c010b4f1:	68 94 03 00 00       	push   $0x394
c010b4f6:	68 68 f2 10 c0       	push   $0xc010f268
c010b4fb:	e8 fd 4e ff ff       	call   c01003fd <__panic>
    }

    initproc = find_proc(pid);
c010b500:	83 ec 0c             	sub    $0xc,%esp
c010b503:	ff 75 ec             	pushl  -0x14(%ebp)
c010b506:	e8 f0 ec ff ff       	call   c010a1fb <find_proc>
c010b50b:	83 c4 10             	add    $0x10,%esp
c010b50e:	a3 24 50 1c c0       	mov    %eax,0xc01c5024
    set_proc_name(initproc, "init");
c010b513:	a1 24 50 1c c0       	mov    0xc01c5024,%eax
c010b518:	83 ec 08             	sub    $0x8,%esp
c010b51b:	68 24 f6 10 c0       	push   $0xc010f624
c010b520:	50                   	push   %eax
c010b521:	e8 c8 e8 ff ff       	call   c0109dee <set_proc_name>
c010b526:	83 c4 10             	add    $0x10,%esp

    assert(idleproc != NULL && idleproc->pid == 0);
c010b529:	a1 20 50 1c c0       	mov    0xc01c5020,%eax
c010b52e:	85 c0                	test   %eax,%eax
c010b530:	74 0c                	je     c010b53e <proc_init+0x152>
c010b532:	a1 20 50 1c c0       	mov    0xc01c5020,%eax
c010b537:	8b 40 04             	mov    0x4(%eax),%eax
c010b53a:	85 c0                	test   %eax,%eax
c010b53c:	74 19                	je     c010b557 <proc_init+0x16b>
c010b53e:	68 2c f6 10 c0       	push   $0xc010f62c
c010b543:	68 95 f2 10 c0       	push   $0xc010f295
c010b548:	68 9a 03 00 00       	push   $0x39a
c010b54d:	68 68 f2 10 c0       	push   $0xc010f268
c010b552:	e8 a6 4e ff ff       	call   c01003fd <__panic>
    assert(initproc != NULL && initproc->pid == 1);
c010b557:	a1 24 50 1c c0       	mov    0xc01c5024,%eax
c010b55c:	85 c0                	test   %eax,%eax
c010b55e:	74 0d                	je     c010b56d <proc_init+0x181>
c010b560:	a1 24 50 1c c0       	mov    0xc01c5024,%eax
c010b565:	8b 40 04             	mov    0x4(%eax),%eax
c010b568:	83 f8 01             	cmp    $0x1,%eax
c010b56b:	74 19                	je     c010b586 <proc_init+0x19a>
c010b56d:	68 54 f6 10 c0       	push   $0xc010f654
c010b572:	68 95 f2 10 c0       	push   $0xc010f295
c010b577:	68 9b 03 00 00       	push   $0x39b
c010b57c:	68 68 f2 10 c0       	push   $0xc010f268
c010b581:	e8 77 4e ff ff       	call   c01003fd <__panic>
}
c010b586:	90                   	nop
c010b587:	c9                   	leave  
c010b588:	c3                   	ret    

c010b589 <cpu_idle>:

// cpu_idle - at the end of kern_init, the first kernel thread idleproc will do below works
void
cpu_idle(void) {
c010b589:	55                   	push   %ebp
c010b58a:	89 e5                	mov    %esp,%ebp
c010b58c:	83 ec 08             	sub    $0x8,%esp
    while (1) {
        if (current->need_resched) {
c010b58f:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010b594:	8b 40 10             	mov    0x10(%eax),%eax
c010b597:	85 c0                	test   %eax,%eax
c010b599:	74 f4                	je     c010b58f <cpu_idle+0x6>
            schedule();
c010b59b:	e8 9d 02 00 00       	call   c010b83d <schedule>
        }
    }
c010b5a0:	eb ed                	jmp    c010b58f <cpu_idle+0x6>

c010b5a2 <lab6_set_priority>:
}

//FOR LAB6, set the process's priority (bigger value will get more CPU time) 
void
lab6_set_priority(uint32_t priority)
{
c010b5a2:	55                   	push   %ebp
c010b5a3:	89 e5                	mov    %esp,%ebp
    if (priority == 0)
c010b5a5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b5a9:	75 11                	jne    c010b5bc <lab6_set_priority+0x1a>
        current->lab6_priority = 1;
c010b5ab:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010b5b0:	c7 80 c0 00 00 00 01 	movl   $0x1,0xc0(%eax)
c010b5b7:	00 00 00 
    else current->lab6_priority = priority;
}
c010b5ba:	eb 0e                	jmp    c010b5ca <lab6_set_priority+0x28>
void
lab6_set_priority(uint32_t priority)
{
    if (priority == 0)
        current->lab6_priority = 1;
    else current->lab6_priority = priority;
c010b5bc:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010b5c1:	8b 55 08             	mov    0x8(%ebp),%edx
c010b5c4:	89 90 c0 00 00 00    	mov    %edx,0xc0(%eax)
}
c010b5ca:	90                   	nop
c010b5cb:	5d                   	pop    %ebp
c010b5cc:	c3                   	ret    

c010b5cd <do_sleep>:

// do_sleep - set current process state to sleep and add timer with "time"
//          - then call scheduler. if process run again, delete timer first.
int
do_sleep(unsigned int time) {
c010b5cd:	55                   	push   %ebp
c010b5ce:	89 e5                	mov    %esp,%ebp
c010b5d0:	83 ec 28             	sub    $0x28,%esp
    if (time == 0) {
c010b5d3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b5d7:	75 07                	jne    c010b5e0 <do_sleep+0x13>
        return 0;
c010b5d9:	b8 00 00 00 00       	mov    $0x0,%eax
c010b5de:	eb 72                	jmp    c010b652 <do_sleep+0x85>
    }
    bool intr_flag;
    local_intr_save(intr_flag);
c010b5e0:	e8 e2 e4 ff ff       	call   c0109ac7 <__intr_save>
c010b5e5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    timer_t __timer, *timer = timer_init(&__timer, current, time);
c010b5e8:	8b 55 08             	mov    0x8(%ebp),%edx
c010b5eb:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010b5f0:	83 ec 04             	sub    $0x4,%esp
c010b5f3:	52                   	push   %edx
c010b5f4:	50                   	push   %eax
c010b5f5:	8d 45 e0             	lea    -0x20(%ebp),%eax
c010b5f8:	50                   	push   %eax
c010b5f9:	e8 90 e4 ff ff       	call   c0109a8e <timer_init>
c010b5fe:	83 c4 10             	add    $0x10,%esp
c010b601:	89 45 f0             	mov    %eax,-0x10(%ebp)
    current->state = PROC_SLEEPING;
c010b604:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010b609:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    current->wait_state = WT_TIMER;
c010b60f:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010b614:	c7 80 90 00 00 00 02 	movl   $0x80000002,0x90(%eax)
c010b61b:	00 00 80 
    add_timer(timer);
c010b61e:	83 ec 0c             	sub    $0xc,%esp
c010b621:	ff 75 f0             	pushl  -0x10(%ebp)
c010b624:	e8 ad 02 00 00       	call   c010b8d6 <add_timer>
c010b629:	83 c4 10             	add    $0x10,%esp
    local_intr_restore(intr_flag);
c010b62c:	83 ec 0c             	sub    $0xc,%esp
c010b62f:	ff 75 f4             	pushl  -0xc(%ebp)
c010b632:	e8 ba e4 ff ff       	call   c0109af1 <__intr_restore>
c010b637:	83 c4 10             	add    $0x10,%esp

    schedule();
c010b63a:	e8 fe 01 00 00       	call   c010b83d <schedule>

    del_timer(timer);
c010b63f:	83 ec 0c             	sub    $0xc,%esp
c010b642:	ff 75 f0             	pushl  -0x10(%ebp)
c010b645:	e8 b2 03 00 00       	call   c010b9fc <del_timer>
c010b64a:	83 c4 10             	add    $0x10,%esp
    return 0;
c010b64d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010b652:	c9                   	leave  
c010b653:	c3                   	ret    

c010b654 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c010b654:	55                   	push   %ebp
c010b655:	89 e5                	mov    %esp,%ebp
c010b657:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010b65a:	9c                   	pushf  
c010b65b:	58                   	pop    %eax
c010b65c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010b65f:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010b662:	25 00 02 00 00       	and    $0x200,%eax
c010b667:	85 c0                	test   %eax,%eax
c010b669:	74 0c                	je     c010b677 <__intr_save+0x23>
        intr_disable();
c010b66b:	e8 4c 6b ff ff       	call   c01021bc <intr_disable>
        return 1;
c010b670:	b8 01 00 00 00       	mov    $0x1,%eax
c010b675:	eb 05                	jmp    c010b67c <__intr_save+0x28>
    }
    return 0;
c010b677:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010b67c:	c9                   	leave  
c010b67d:	c3                   	ret    

c010b67e <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010b67e:	55                   	push   %ebp
c010b67f:	89 e5                	mov    %esp,%ebp
c010b681:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010b684:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b688:	74 05                	je     c010b68f <__intr_restore+0x11>
        intr_enable();
c010b68a:	e8 26 6b ff ff       	call   c01021b5 <intr_enable>
    }
}
c010b68f:	90                   	nop
c010b690:	c9                   	leave  
c010b691:	c3                   	ret    

c010b692 <sched_class_enqueue>:
static struct sched_class *sched_class;

static struct run_queue *rq;

static inline void
sched_class_enqueue(struct proc_struct *proc) {
c010b692:	55                   	push   %ebp
c010b693:	89 e5                	mov    %esp,%ebp
c010b695:	83 ec 08             	sub    $0x8,%esp
    if (proc != idleproc) {
c010b698:	a1 20 50 1c c0       	mov    0xc01c5020,%eax
c010b69d:	39 45 08             	cmp    %eax,0x8(%ebp)
c010b6a0:	74 1a                	je     c010b6bc <sched_class_enqueue+0x2a>
        sched_class->enqueue(rq, proc);
c010b6a2:	a1 9c 70 1c c0       	mov    0xc01c709c,%eax
c010b6a7:	8b 40 08             	mov    0x8(%eax),%eax
c010b6aa:	8b 15 a0 70 1c c0    	mov    0xc01c70a0,%edx
c010b6b0:	83 ec 08             	sub    $0x8,%esp
c010b6b3:	ff 75 08             	pushl  0x8(%ebp)
c010b6b6:	52                   	push   %edx
c010b6b7:	ff d0                	call   *%eax
c010b6b9:	83 c4 10             	add    $0x10,%esp
    }
}
c010b6bc:	90                   	nop
c010b6bd:	c9                   	leave  
c010b6be:	c3                   	ret    

c010b6bf <sched_class_dequeue>:

static inline void
sched_class_dequeue(struct proc_struct *proc) {
c010b6bf:	55                   	push   %ebp
c010b6c0:	89 e5                	mov    %esp,%ebp
c010b6c2:	83 ec 08             	sub    $0x8,%esp
    sched_class->dequeue(rq, proc);
c010b6c5:	a1 9c 70 1c c0       	mov    0xc01c709c,%eax
c010b6ca:	8b 40 0c             	mov    0xc(%eax),%eax
c010b6cd:	8b 15 a0 70 1c c0    	mov    0xc01c70a0,%edx
c010b6d3:	83 ec 08             	sub    $0x8,%esp
c010b6d6:	ff 75 08             	pushl  0x8(%ebp)
c010b6d9:	52                   	push   %edx
c010b6da:	ff d0                	call   *%eax
c010b6dc:	83 c4 10             	add    $0x10,%esp
}
c010b6df:	90                   	nop
c010b6e0:	c9                   	leave  
c010b6e1:	c3                   	ret    

c010b6e2 <sched_class_pick_next>:

static inline struct proc_struct *
sched_class_pick_next(void) {
c010b6e2:	55                   	push   %ebp
c010b6e3:	89 e5                	mov    %esp,%ebp
c010b6e5:	83 ec 08             	sub    $0x8,%esp
    return sched_class->pick_next(rq);
c010b6e8:	a1 9c 70 1c c0       	mov    0xc01c709c,%eax
c010b6ed:	8b 40 10             	mov    0x10(%eax),%eax
c010b6f0:	8b 15 a0 70 1c c0    	mov    0xc01c70a0,%edx
c010b6f6:	83 ec 0c             	sub    $0xc,%esp
c010b6f9:	52                   	push   %edx
c010b6fa:	ff d0                	call   *%eax
c010b6fc:	83 c4 10             	add    $0x10,%esp
}
c010b6ff:	c9                   	leave  
c010b700:	c3                   	ret    

c010b701 <sched_class_proc_tick>:

static void
sched_class_proc_tick(struct proc_struct *proc) {
c010b701:	55                   	push   %ebp
c010b702:	89 e5                	mov    %esp,%ebp
c010b704:	83 ec 08             	sub    $0x8,%esp
    if (proc != idleproc) {
c010b707:	a1 20 50 1c c0       	mov    0xc01c5020,%eax
c010b70c:	39 45 08             	cmp    %eax,0x8(%ebp)
c010b70f:	74 1c                	je     c010b72d <sched_class_proc_tick+0x2c>
        sched_class->proc_tick(rq, proc);
c010b711:	a1 9c 70 1c c0       	mov    0xc01c709c,%eax
c010b716:	8b 40 14             	mov    0x14(%eax),%eax
c010b719:	8b 15 a0 70 1c c0    	mov    0xc01c70a0,%edx
c010b71f:	83 ec 08             	sub    $0x8,%esp
c010b722:	ff 75 08             	pushl  0x8(%ebp)
c010b725:	52                   	push   %edx
c010b726:	ff d0                	call   *%eax
c010b728:	83 c4 10             	add    $0x10,%esp
    }
    else {
        proc->need_resched = 1;
    }
}
c010b72b:	eb 0a                	jmp    c010b737 <sched_class_proc_tick+0x36>
sched_class_proc_tick(struct proc_struct *proc) {
    if (proc != idleproc) {
        sched_class->proc_tick(rq, proc);
    }
    else {
        proc->need_resched = 1;
c010b72d:	8b 45 08             	mov    0x8(%ebp),%eax
c010b730:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    }
}
c010b737:	90                   	nop
c010b738:	c9                   	leave  
c010b739:	c3                   	ret    

c010b73a <sched_init>:

static struct run_queue __rq;

void
sched_init(void) {
c010b73a:	55                   	push   %ebp
c010b73b:	89 e5                	mov    %esp,%ebp
c010b73d:	83 ec 18             	sub    $0x18,%esp
c010b740:	c7 45 f4 94 70 1c c0 	movl   $0xc01c7094,-0xc(%ebp)
c010b747:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b74a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b74d:	89 50 04             	mov    %edx,0x4(%eax)
c010b750:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b753:	8b 50 04             	mov    0x4(%eax),%edx
c010b756:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b759:	89 10                	mov    %edx,(%eax)
    list_init(&timer_list);

    sched_class = &default_sched_class;
c010b75b:	c7 05 9c 70 1c c0 84 	movl   $0xc0131a84,0xc01c709c
c010b762:	1a 13 c0 

    rq = &__rq;
c010b765:	c7 05 a0 70 1c c0 a4 	movl   $0xc01c70a4,0xc01c70a0
c010b76c:	70 1c c0 
    rq->max_time_slice = 5;
c010b76f:	a1 a0 70 1c c0       	mov    0xc01c70a0,%eax
c010b774:	c7 40 0c 05 00 00 00 	movl   $0x5,0xc(%eax)
    sched_class->init(rq);
c010b77b:	a1 9c 70 1c c0       	mov    0xc01c709c,%eax
c010b780:	8b 40 04             	mov    0x4(%eax),%eax
c010b783:	8b 15 a0 70 1c c0    	mov    0xc01c70a0,%edx
c010b789:	83 ec 0c             	sub    $0xc,%esp
c010b78c:	52                   	push   %edx
c010b78d:	ff d0                	call   *%eax
c010b78f:	83 c4 10             	add    $0x10,%esp

    cprintf("sched class: %s\n", sched_class->name);
c010b792:	a1 9c 70 1c c0       	mov    0xc01c709c,%eax
c010b797:	8b 00                	mov    (%eax),%eax
c010b799:	83 ec 08             	sub    $0x8,%esp
c010b79c:	50                   	push   %eax
c010b79d:	68 7c f6 10 c0       	push   $0xc010f67c
c010b7a2:	e8 f0 4a ff ff       	call   c0100297 <cprintf>
c010b7a7:	83 c4 10             	add    $0x10,%esp
}
c010b7aa:	90                   	nop
c010b7ab:	c9                   	leave  
c010b7ac:	c3                   	ret    

c010b7ad <wakeup_proc>:

void
wakeup_proc(struct proc_struct *proc) {
c010b7ad:	55                   	push   %ebp
c010b7ae:	89 e5                	mov    %esp,%ebp
c010b7b0:	83 ec 18             	sub    $0x18,%esp
    assert(proc->state != PROC_ZOMBIE);
c010b7b3:	8b 45 08             	mov    0x8(%ebp),%eax
c010b7b6:	8b 00                	mov    (%eax),%eax
c010b7b8:	83 f8 03             	cmp    $0x3,%eax
c010b7bb:	75 16                	jne    c010b7d3 <wakeup_proc+0x26>
c010b7bd:	68 8d f6 10 c0       	push   $0xc010f68d
c010b7c2:	68 a8 f6 10 c0       	push   $0xc010f6a8
c010b7c7:	6a 3c                	push   $0x3c
c010b7c9:	68 bd f6 10 c0       	push   $0xc010f6bd
c010b7ce:	e8 2a 4c ff ff       	call   c01003fd <__panic>
    bool intr_flag;
    local_intr_save(intr_flag);
c010b7d3:	e8 7c fe ff ff       	call   c010b654 <__intr_save>
c010b7d8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        if (proc->state != PROC_RUNNABLE) {
c010b7db:	8b 45 08             	mov    0x8(%ebp),%eax
c010b7de:	8b 00                	mov    (%eax),%eax
c010b7e0:	83 f8 02             	cmp    $0x2,%eax
c010b7e3:	74 30                	je     c010b815 <wakeup_proc+0x68>
            proc->state = PROC_RUNNABLE;
c010b7e5:	8b 45 08             	mov    0x8(%ebp),%eax
c010b7e8:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
            proc->wait_state = 0;
c010b7ee:	8b 45 08             	mov    0x8(%ebp),%eax
c010b7f1:	c7 80 90 00 00 00 00 	movl   $0x0,0x90(%eax)
c010b7f8:	00 00 00 
            if (proc != current) {
c010b7fb:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010b800:	39 45 08             	cmp    %eax,0x8(%ebp)
c010b803:	74 27                	je     c010b82c <wakeup_proc+0x7f>
                sched_class_enqueue(proc);
c010b805:	83 ec 0c             	sub    $0xc,%esp
c010b808:	ff 75 08             	pushl  0x8(%ebp)
c010b80b:	e8 82 fe ff ff       	call   c010b692 <sched_class_enqueue>
c010b810:	83 c4 10             	add    $0x10,%esp
c010b813:	eb 17                	jmp    c010b82c <wakeup_proc+0x7f>
            }
        }
        else {
            warn("wakeup runnable process.\n");
c010b815:	83 ec 04             	sub    $0x4,%esp
c010b818:	68 d3 f6 10 c0       	push   $0xc010f6d3
c010b81d:	6a 48                	push   $0x48
c010b81f:	68 bd f6 10 c0       	push   $0xc010f6bd
c010b824:	e8 57 4c ff ff       	call   c0100480 <__warn>
c010b829:	83 c4 10             	add    $0x10,%esp
        }
    }
    local_intr_restore(intr_flag);
c010b82c:	83 ec 0c             	sub    $0xc,%esp
c010b82f:	ff 75 f4             	pushl  -0xc(%ebp)
c010b832:	e8 47 fe ff ff       	call   c010b67e <__intr_restore>
c010b837:	83 c4 10             	add    $0x10,%esp
}
c010b83a:	90                   	nop
c010b83b:	c9                   	leave  
c010b83c:	c3                   	ret    

c010b83d <schedule>:

void
schedule(void) {
c010b83d:	55                   	push   %ebp
c010b83e:	89 e5                	mov    %esp,%ebp
c010b840:	83 ec 18             	sub    $0x18,%esp
    bool intr_flag;
    struct proc_struct *next;
    local_intr_save(intr_flag);
c010b843:	e8 0c fe ff ff       	call   c010b654 <__intr_save>
c010b848:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        current->need_resched = 0;
c010b84b:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010b850:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
        if (current->state == PROC_RUNNABLE) {
c010b857:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010b85c:	8b 00                	mov    (%eax),%eax
c010b85e:	83 f8 02             	cmp    $0x2,%eax
c010b861:	75 11                	jne    c010b874 <schedule+0x37>
            sched_class_enqueue(current);
c010b863:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010b868:	83 ec 0c             	sub    $0xc,%esp
c010b86b:	50                   	push   %eax
c010b86c:	e8 21 fe ff ff       	call   c010b692 <sched_class_enqueue>
c010b871:	83 c4 10             	add    $0x10,%esp
        }
        if ((next = sched_class_pick_next()) != NULL) {
c010b874:	e8 69 fe ff ff       	call   c010b6e2 <sched_class_pick_next>
c010b879:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b87c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b880:	74 0e                	je     c010b890 <schedule+0x53>
            sched_class_dequeue(next);
c010b882:	83 ec 0c             	sub    $0xc,%esp
c010b885:	ff 75 f4             	pushl  -0xc(%ebp)
c010b888:	e8 32 fe ff ff       	call   c010b6bf <sched_class_dequeue>
c010b88d:	83 c4 10             	add    $0x10,%esp
        }
        if (next == NULL) {
c010b890:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b894:	75 08                	jne    c010b89e <schedule+0x61>
            next = idleproc;
c010b896:	a1 20 50 1c c0       	mov    0xc01c5020,%eax
c010b89b:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        next->runs ++;
c010b89e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b8a1:	8b 40 08             	mov    0x8(%eax),%eax
c010b8a4:	8d 50 01             	lea    0x1(%eax),%edx
c010b8a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b8aa:	89 50 08             	mov    %edx,0x8(%eax)
        if (next != current) {
c010b8ad:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010b8b2:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010b8b5:	74 0e                	je     c010b8c5 <schedule+0x88>
            proc_run(next);
c010b8b7:	83 ec 0c             	sub    $0xc,%esp
c010b8ba:	ff 75 f4             	pushl  -0xc(%ebp)
c010b8bd:	e8 eb e7 ff ff       	call   c010a0ad <proc_run>
c010b8c2:	83 c4 10             	add    $0x10,%esp
        }
    }
    local_intr_restore(intr_flag);
c010b8c5:	83 ec 0c             	sub    $0xc,%esp
c010b8c8:	ff 75 f0             	pushl  -0x10(%ebp)
c010b8cb:	e8 ae fd ff ff       	call   c010b67e <__intr_restore>
c010b8d0:	83 c4 10             	add    $0x10,%esp
}
c010b8d3:	90                   	nop
c010b8d4:	c9                   	leave  
c010b8d5:	c3                   	ret    

c010b8d6 <add_timer>:

// add timer to timer_list
void
add_timer(timer_t *timer) {
c010b8d6:	55                   	push   %ebp
c010b8d7:	89 e5                	mov    %esp,%ebp
c010b8d9:	83 ec 38             	sub    $0x38,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010b8dc:	e8 73 fd ff ff       	call   c010b654 <__intr_save>
c010b8e1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        assert(timer->expires > 0 && timer->proc != NULL);
c010b8e4:	8b 45 08             	mov    0x8(%ebp),%eax
c010b8e7:	8b 00                	mov    (%eax),%eax
c010b8e9:	85 c0                	test   %eax,%eax
c010b8eb:	74 0a                	je     c010b8f7 <add_timer+0x21>
c010b8ed:	8b 45 08             	mov    0x8(%ebp),%eax
c010b8f0:	8b 40 04             	mov    0x4(%eax),%eax
c010b8f3:	85 c0                	test   %eax,%eax
c010b8f5:	75 16                	jne    c010b90d <add_timer+0x37>
c010b8f7:	68 f0 f6 10 c0       	push   $0xc010f6f0
c010b8fc:	68 a8 f6 10 c0       	push   $0xc010f6a8
c010b901:	6a 6c                	push   $0x6c
c010b903:	68 bd f6 10 c0       	push   $0xc010f6bd
c010b908:	e8 f0 4a ff ff       	call   c01003fd <__panic>
        assert(list_empty(&(timer->timer_link)));
c010b90d:	8b 45 08             	mov    0x8(%ebp),%eax
c010b910:	83 c0 08             	add    $0x8,%eax
c010b913:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010b916:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b919:	8b 40 04             	mov    0x4(%eax),%eax
c010b91c:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c010b91f:	0f 94 c0             	sete   %al
c010b922:	0f b6 c0             	movzbl %al,%eax
c010b925:	85 c0                	test   %eax,%eax
c010b927:	75 16                	jne    c010b93f <add_timer+0x69>
c010b929:	68 1c f7 10 c0       	push   $0xc010f71c
c010b92e:	68 a8 f6 10 c0       	push   $0xc010f6a8
c010b933:	6a 6d                	push   $0x6d
c010b935:	68 bd f6 10 c0       	push   $0xc010f6bd
c010b93a:	e8 be 4a ff ff       	call   c01003fd <__panic>
c010b93f:	c7 45 ec 94 70 1c c0 	movl   $0xc01c7094,-0x14(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010b946:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b949:	8b 40 04             	mov    0x4(%eax),%eax
        list_entry_t *le = list_next(&timer_list);
c010b94c:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while (le != &timer_list) {
c010b94f:	eb 4a                	jmp    c010b99b <add_timer+0xc5>
            timer_t *next = le2timer(le, timer_link);
c010b951:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b954:	83 e8 08             	sub    $0x8,%eax
c010b957:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            if (timer->expires < next->expires) {
c010b95a:	8b 45 08             	mov    0x8(%ebp),%eax
c010b95d:	8b 10                	mov    (%eax),%edx
c010b95f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b962:	8b 00                	mov    (%eax),%eax
c010b964:	39 c2                	cmp    %eax,%edx
c010b966:	73 13                	jae    c010b97b <add_timer+0xa5>
                next->expires -= timer->expires;
c010b968:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b96b:	8b 10                	mov    (%eax),%edx
c010b96d:	8b 45 08             	mov    0x8(%ebp),%eax
c010b970:	8b 00                	mov    (%eax),%eax
c010b972:	29 c2                	sub    %eax,%edx
c010b974:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b977:	89 10                	mov    %edx,(%eax)
                break;
c010b979:	eb 29                	jmp    c010b9a4 <add_timer+0xce>
            }
            timer->expires -= next->expires;
c010b97b:	8b 45 08             	mov    0x8(%ebp),%eax
c010b97e:	8b 10                	mov    (%eax),%edx
c010b980:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b983:	8b 00                	mov    (%eax),%eax
c010b985:	29 c2                	sub    %eax,%edx
c010b987:	8b 45 08             	mov    0x8(%ebp),%eax
c010b98a:	89 10                	mov    %edx,(%eax)
c010b98c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b98f:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010b992:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b995:	8b 40 04             	mov    0x4(%eax),%eax
            le = list_next(le);
c010b998:	89 45 f4             	mov    %eax,-0xc(%ebp)
    local_intr_save(intr_flag);
    {
        assert(timer->expires > 0 && timer->proc != NULL);
        assert(list_empty(&(timer->timer_link)));
        list_entry_t *le = list_next(&timer_list);
        while (le != &timer_list) {
c010b99b:	81 7d f4 94 70 1c c0 	cmpl   $0xc01c7094,-0xc(%ebp)
c010b9a2:	75 ad                	jne    c010b951 <add_timer+0x7b>
                break;
            }
            timer->expires -= next->expires;
            le = list_next(le);
        }
        list_add_before(le, &(timer->timer_link));
c010b9a4:	8b 45 08             	mov    0x8(%ebp),%eax
c010b9a7:	8d 50 08             	lea    0x8(%eax),%edx
c010b9aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b9ad:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010b9b0:	89 55 d8             	mov    %edx,-0x28(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c010b9b3:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b9b6:	8b 00                	mov    (%eax),%eax
c010b9b8:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010b9bb:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010b9be:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010b9c1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b9c4:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010b9c7:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b9ca:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010b9cd:	89 10                	mov    %edx,(%eax)
c010b9cf:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b9d2:	8b 10                	mov    (%eax),%edx
c010b9d4:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b9d7:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010b9da:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010b9dd:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010b9e0:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010b9e3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010b9e6:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010b9e9:	89 10                	mov    %edx,(%eax)
    }
    local_intr_restore(intr_flag);
c010b9eb:	83 ec 0c             	sub    $0xc,%esp
c010b9ee:	ff 75 f0             	pushl  -0x10(%ebp)
c010b9f1:	e8 88 fc ff ff       	call   c010b67e <__intr_restore>
c010b9f6:	83 c4 10             	add    $0x10,%esp
}
c010b9f9:	90                   	nop
c010b9fa:	c9                   	leave  
c010b9fb:	c3                   	ret    

c010b9fc <del_timer>:

// del timer from timer_list
void
del_timer(timer_t *timer) {
c010b9fc:	55                   	push   %ebp
c010b9fd:	89 e5                	mov    %esp,%ebp
c010b9ff:	83 ec 38             	sub    $0x38,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010ba02:	e8 4d fc ff ff       	call   c010b654 <__intr_save>
c010ba07:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        if (!list_empty(&(timer->timer_link))) {
c010ba0a:	8b 45 08             	mov    0x8(%ebp),%eax
c010ba0d:	83 c0 08             	add    $0x8,%eax
c010ba10:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010ba13:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010ba16:	8b 40 04             	mov    0x4(%eax),%eax
c010ba19:	39 45 e0             	cmp    %eax,-0x20(%ebp)
c010ba1c:	0f 94 c0             	sete   %al
c010ba1f:	0f b6 c0             	movzbl %al,%eax
c010ba22:	85 c0                	test   %eax,%eax
c010ba24:	0f 85 89 00 00 00    	jne    c010bab3 <del_timer+0xb7>
            if (timer->expires != 0) {
c010ba2a:	8b 45 08             	mov    0x8(%ebp),%eax
c010ba2d:	8b 00                	mov    (%eax),%eax
c010ba2f:	85 c0                	test   %eax,%eax
c010ba31:	74 35                	je     c010ba68 <del_timer+0x6c>
                list_entry_t *le = list_next(&(timer->timer_link));
c010ba33:	8b 45 08             	mov    0x8(%ebp),%eax
c010ba36:	83 c0 08             	add    $0x8,%eax
c010ba39:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010ba3c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ba3f:	8b 40 04             	mov    0x4(%eax),%eax
c010ba42:	89 45 e8             	mov    %eax,-0x18(%ebp)
                if (le != &timer_list) {
c010ba45:	81 7d e8 94 70 1c c0 	cmpl   $0xc01c7094,-0x18(%ebp)
c010ba4c:	74 1a                	je     c010ba68 <del_timer+0x6c>
                    timer_t *next = le2timer(le, timer_link);
c010ba4e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ba51:	83 e8 08             	sub    $0x8,%eax
c010ba54:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                    next->expires += timer->expires;
c010ba57:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ba5a:	8b 10                	mov    (%eax),%edx
c010ba5c:	8b 45 08             	mov    0x8(%ebp),%eax
c010ba5f:	8b 00                	mov    (%eax),%eax
c010ba61:	01 c2                	add    %eax,%edx
c010ba63:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ba66:	89 10                	mov    %edx,(%eax)
                }
            }
            list_del_init(&(timer->timer_link));
c010ba68:	8b 45 08             	mov    0x8(%ebp),%eax
c010ba6b:	83 c0 08             	add    $0x8,%eax
c010ba6e:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010ba71:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ba74:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010ba77:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010ba7a:	8b 40 04             	mov    0x4(%eax),%eax
c010ba7d:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010ba80:	8b 12                	mov    (%edx),%edx
c010ba82:	89 55 d8             	mov    %edx,-0x28(%ebp)
c010ba85:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010ba88:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010ba8b:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010ba8e:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010ba91:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010ba94:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010ba97:	89 10                	mov    %edx,(%eax)
c010ba99:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ba9c:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010ba9f:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010baa2:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010baa5:	89 50 04             	mov    %edx,0x4(%eax)
c010baa8:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010baab:	8b 50 04             	mov    0x4(%eax),%edx
c010baae:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010bab1:	89 10                	mov    %edx,(%eax)
        }
    }
    local_intr_restore(intr_flag);
c010bab3:	83 ec 0c             	sub    $0xc,%esp
c010bab6:	ff 75 f4             	pushl  -0xc(%ebp)
c010bab9:	e8 c0 fb ff ff       	call   c010b67e <__intr_restore>
c010babe:	83 c4 10             	add    $0x10,%esp
}
c010bac1:	90                   	nop
c010bac2:	c9                   	leave  
c010bac3:	c3                   	ret    

c010bac4 <run_timer_list>:

// call scheduler to update tick related info, and check the timer is expired? If expired, then wakup proc
void
run_timer_list(void) {
c010bac4:	55                   	push   %ebp
c010bac5:	89 e5                	mov    %esp,%ebp
c010bac7:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010baca:	e8 85 fb ff ff       	call   c010b654 <__intr_save>
c010bacf:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010bad2:	c7 45 e0 94 70 1c c0 	movl   $0xc01c7094,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010bad9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010badc:	8b 40 04             	mov    0x4(%eax),%eax
    {
        list_entry_t *le = list_next(&timer_list);
c010badf:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (le != &timer_list) {
c010bae2:	81 7d f4 94 70 1c c0 	cmpl   $0xc01c7094,-0xc(%ebp)
c010bae9:	0f 84 e4 00 00 00    	je     c010bbd3 <run_timer_list+0x10f>
            timer_t *timer = le2timer(le, timer_link);
c010baef:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010baf2:	83 e8 08             	sub    $0x8,%eax
c010baf5:	89 45 f0             	mov    %eax,-0x10(%ebp)
            assert(timer->expires != 0);
c010baf8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bafb:	8b 00                	mov    (%eax),%eax
c010bafd:	85 c0                	test   %eax,%eax
c010baff:	75 19                	jne    c010bb1a <run_timer_list+0x56>
c010bb01:	68 3d f7 10 c0       	push   $0xc010f73d
c010bb06:	68 a8 f6 10 c0       	push   $0xc010f6a8
c010bb0b:	68 9a 00 00 00       	push   $0x9a
c010bb10:	68 bd f6 10 c0       	push   $0xc010f6bd
c010bb15:	e8 e3 48 ff ff       	call   c01003fd <__panic>
            timer->expires --;
c010bb1a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bb1d:	8b 00                	mov    (%eax),%eax
c010bb1f:	8d 50 ff             	lea    -0x1(%eax),%edx
c010bb22:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bb25:	89 10                	mov    %edx,(%eax)
            while (timer->expires == 0) {
c010bb27:	e9 97 00 00 00       	jmp    c010bbc3 <run_timer_list+0xff>
c010bb2c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bb2f:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010bb32:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010bb35:	8b 40 04             	mov    0x4(%eax),%eax
                le = list_next(le);
c010bb38:	89 45 f4             	mov    %eax,-0xc(%ebp)
                struct proc_struct *proc = timer->proc;
c010bb3b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bb3e:	8b 40 04             	mov    0x4(%eax),%eax
c010bb41:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                if (proc->wait_state != 0) {
c010bb44:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010bb47:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010bb4d:	85 c0                	test   %eax,%eax
c010bb4f:	74 26                	je     c010bb77 <run_timer_list+0xb3>
                    assert(proc->wait_state & WT_INTERRUPTED);
c010bb51:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010bb54:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010bb5a:	85 c0                	test   %eax,%eax
c010bb5c:	78 37                	js     c010bb95 <run_timer_list+0xd1>
c010bb5e:	68 54 f7 10 c0       	push   $0xc010f754
c010bb63:	68 a8 f6 10 c0       	push   $0xc010f6a8
c010bb68:	68 a0 00 00 00       	push   $0xa0
c010bb6d:	68 bd f6 10 c0       	push   $0xc010f6bd
c010bb72:	e8 86 48 ff ff       	call   c01003fd <__panic>
                }
                else {
                    warn("process %d's wait_state == 0.\n", proc->pid);
c010bb77:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010bb7a:	8b 40 04             	mov    0x4(%eax),%eax
c010bb7d:	50                   	push   %eax
c010bb7e:	68 78 f7 10 c0       	push   $0xc010f778
c010bb83:	68 a3 00 00 00       	push   $0xa3
c010bb88:	68 bd f6 10 c0       	push   $0xc010f6bd
c010bb8d:	e8 ee 48 ff ff       	call   c0100480 <__warn>
c010bb92:	83 c4 10             	add    $0x10,%esp
                }
                wakeup_proc(proc);
c010bb95:	83 ec 0c             	sub    $0xc,%esp
c010bb98:	ff 75 e4             	pushl  -0x1c(%ebp)
c010bb9b:	e8 0d fc ff ff       	call   c010b7ad <wakeup_proc>
c010bba0:	83 c4 10             	add    $0x10,%esp
                del_timer(timer);
c010bba3:	83 ec 0c             	sub    $0xc,%esp
c010bba6:	ff 75 f0             	pushl  -0x10(%ebp)
c010bba9:	e8 4e fe ff ff       	call   c010b9fc <del_timer>
c010bbae:	83 c4 10             	add    $0x10,%esp
                if (le == &timer_list) {
c010bbb1:	81 7d f4 94 70 1c c0 	cmpl   $0xc01c7094,-0xc(%ebp)
c010bbb8:	74 18                	je     c010bbd2 <run_timer_list+0x10e>
                    break;
                }
                timer = le2timer(le, timer_link);
c010bbba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bbbd:	83 e8 08             	sub    $0x8,%eax
c010bbc0:	89 45 f0             	mov    %eax,-0x10(%ebp)
        list_entry_t *le = list_next(&timer_list);
        if (le != &timer_list) {
            timer_t *timer = le2timer(le, timer_link);
            assert(timer->expires != 0);
            timer->expires --;
            while (timer->expires == 0) {
c010bbc3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bbc6:	8b 00                	mov    (%eax),%eax
c010bbc8:	85 c0                	test   %eax,%eax
c010bbca:	0f 84 5c ff ff ff    	je     c010bb2c <run_timer_list+0x68>
c010bbd0:	eb 01                	jmp    c010bbd3 <run_timer_list+0x10f>
                    warn("process %d's wait_state == 0.\n", proc->pid);
                }
                wakeup_proc(proc);
                del_timer(timer);
                if (le == &timer_list) {
                    break;
c010bbd2:	90                   	nop
                }
                timer = le2timer(le, timer_link);
            }
        }
        sched_class_proc_tick(current);
c010bbd3:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010bbd8:	83 ec 0c             	sub    $0xc,%esp
c010bbdb:	50                   	push   %eax
c010bbdc:	e8 20 fb ff ff       	call   c010b701 <sched_class_proc_tick>
c010bbe1:	83 c4 10             	add    $0x10,%esp
    }
    local_intr_restore(intr_flag);
c010bbe4:	83 ec 0c             	sub    $0xc,%esp
c010bbe7:	ff 75 ec             	pushl  -0x14(%ebp)
c010bbea:	e8 8f fa ff ff       	call   c010b67e <__intr_restore>
c010bbef:	83 c4 10             	add    $0x10,%esp
}
c010bbf2:	90                   	nop
c010bbf3:	c9                   	leave  
c010bbf4:	c3                   	ret    

c010bbf5 <skew_heap_merge>:
}

static inline skew_heap_entry_t *
skew_heap_merge(skew_heap_entry_t *a, skew_heap_entry_t *b,
                compare_f comp)
{
c010bbf5:	55                   	push   %ebp
c010bbf6:	89 e5                	mov    %esp,%ebp
c010bbf8:	83 ec 18             	sub    $0x18,%esp
     if (a == NULL) return b;
c010bbfb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010bbff:	75 08                	jne    c010bc09 <skew_heap_merge+0x14>
c010bc01:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bc04:	e9 b4 00 00 00       	jmp    c010bcbd <skew_heap_merge+0xc8>
     else if (b == NULL) return a;
c010bc09:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010bc0d:	75 08                	jne    c010bc17 <skew_heap_merge+0x22>
c010bc0f:	8b 45 08             	mov    0x8(%ebp),%eax
c010bc12:	e9 a6 00 00 00       	jmp    c010bcbd <skew_heap_merge+0xc8>
     
     skew_heap_entry_t *l, *r;
     if (comp(a, b) == -1)
c010bc17:	83 ec 08             	sub    $0x8,%esp
c010bc1a:	ff 75 0c             	pushl  0xc(%ebp)
c010bc1d:	ff 75 08             	pushl  0x8(%ebp)
c010bc20:	8b 45 10             	mov    0x10(%ebp),%eax
c010bc23:	ff d0                	call   *%eax
c010bc25:	83 c4 10             	add    $0x10,%esp
c010bc28:	83 f8 ff             	cmp    $0xffffffff,%eax
c010bc2b:	75 49                	jne    c010bc76 <skew_heap_merge+0x81>
     {
          r = a->left;
c010bc2d:	8b 45 08             	mov    0x8(%ebp),%eax
c010bc30:	8b 40 04             	mov    0x4(%eax),%eax
c010bc33:	89 45 f4             	mov    %eax,-0xc(%ebp)
          l = skew_heap_merge(a->right, b, comp);
c010bc36:	8b 45 08             	mov    0x8(%ebp),%eax
c010bc39:	8b 40 08             	mov    0x8(%eax),%eax
c010bc3c:	83 ec 04             	sub    $0x4,%esp
c010bc3f:	ff 75 10             	pushl  0x10(%ebp)
c010bc42:	ff 75 0c             	pushl  0xc(%ebp)
c010bc45:	50                   	push   %eax
c010bc46:	e8 aa ff ff ff       	call   c010bbf5 <skew_heap_merge>
c010bc4b:	83 c4 10             	add    $0x10,%esp
c010bc4e:	89 45 f0             	mov    %eax,-0x10(%ebp)
          
          a->left = l;
c010bc51:	8b 45 08             	mov    0x8(%ebp),%eax
c010bc54:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010bc57:	89 50 04             	mov    %edx,0x4(%eax)
          a->right = r;
c010bc5a:	8b 45 08             	mov    0x8(%ebp),%eax
c010bc5d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010bc60:	89 50 08             	mov    %edx,0x8(%eax)
          if (l) l->parent = a;
c010bc63:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010bc67:	74 08                	je     c010bc71 <skew_heap_merge+0x7c>
c010bc69:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bc6c:	8b 55 08             	mov    0x8(%ebp),%edx
c010bc6f:	89 10                	mov    %edx,(%eax)

          return a;
c010bc71:	8b 45 08             	mov    0x8(%ebp),%eax
c010bc74:	eb 47                	jmp    c010bcbd <skew_heap_merge+0xc8>
     }
     else
     {
          r = b->left;
c010bc76:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bc79:	8b 40 04             	mov    0x4(%eax),%eax
c010bc7c:	89 45 f4             	mov    %eax,-0xc(%ebp)
          l = skew_heap_merge(a, b->right, comp);
c010bc7f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bc82:	8b 40 08             	mov    0x8(%eax),%eax
c010bc85:	83 ec 04             	sub    $0x4,%esp
c010bc88:	ff 75 10             	pushl  0x10(%ebp)
c010bc8b:	50                   	push   %eax
c010bc8c:	ff 75 08             	pushl  0x8(%ebp)
c010bc8f:	e8 61 ff ff ff       	call   c010bbf5 <skew_heap_merge>
c010bc94:	83 c4 10             	add    $0x10,%esp
c010bc97:	89 45 f0             	mov    %eax,-0x10(%ebp)
          
          b->left = l;
c010bc9a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bc9d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010bca0:	89 50 04             	mov    %edx,0x4(%eax)
          b->right = r;
c010bca3:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bca6:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010bca9:	89 50 08             	mov    %edx,0x8(%eax)
          if (l) l->parent = b;
c010bcac:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010bcb0:	74 08                	je     c010bcba <skew_heap_merge+0xc5>
c010bcb2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bcb5:	8b 55 0c             	mov    0xc(%ebp),%edx
c010bcb8:	89 10                	mov    %edx,(%eax)

          return b;
c010bcba:	8b 45 0c             	mov    0xc(%ebp),%eax
     }
}
c010bcbd:	c9                   	leave  
c010bcbe:	c3                   	ret    

c010bcbf <proc_stride_comp_f>:

/* The compare function for two skew_heap_node_t's and the
 * corresponding procs*/
static int
proc_stride_comp_f(void *a, void *b)
{
c010bcbf:	55                   	push   %ebp
c010bcc0:	89 e5                	mov    %esp,%ebp
c010bcc2:	83 ec 10             	sub    $0x10,%esp
     struct proc_struct *p = le2proc(a, lab6_run_pool);
c010bcc5:	8b 45 08             	mov    0x8(%ebp),%eax
c010bcc8:	2d b0 00 00 00       	sub    $0xb0,%eax
c010bccd:	89 45 fc             	mov    %eax,-0x4(%ebp)
     struct proc_struct *q = le2proc(b, lab6_run_pool);
c010bcd0:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bcd3:	2d b0 00 00 00       	sub    $0xb0,%eax
c010bcd8:	89 45 f8             	mov    %eax,-0x8(%ebp)
     int32_t c = p->lab6_stride - q->lab6_stride;
c010bcdb:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010bcde:	8b 90 bc 00 00 00    	mov    0xbc(%eax),%edx
c010bce4:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010bce7:	8b 80 bc 00 00 00    	mov    0xbc(%eax),%eax
c010bced:	29 c2                	sub    %eax,%edx
c010bcef:	89 d0                	mov    %edx,%eax
c010bcf1:	89 45 f4             	mov    %eax,-0xc(%ebp)
     if (c > 0) return 1;
c010bcf4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bcf8:	7e 07                	jle    c010bd01 <proc_stride_comp_f+0x42>
c010bcfa:	b8 01 00 00 00       	mov    $0x1,%eax
c010bcff:	eb 12                	jmp    c010bd13 <proc_stride_comp_f+0x54>
     else if (c == 0) return 0;
c010bd01:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bd05:	75 07                	jne    c010bd0e <proc_stride_comp_f+0x4f>
c010bd07:	b8 00 00 00 00       	mov    $0x0,%eax
c010bd0c:	eb 05                	jmp    c010bd13 <proc_stride_comp_f+0x54>
     else return -1;
c010bd0e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
c010bd13:	c9                   	leave  
c010bd14:	c3                   	ret    

c010bd15 <stride_init>:
 *   - max_time_slice: no need here, the variable would be assigned by the caller.
 *
 * hint: see libs/list.h for routines of the list structures.
 */
static void
stride_init(struct run_queue *rq) {
c010bd15:	55                   	push   %ebp
c010bd16:	89 e5                	mov    %esp,%ebp
c010bd18:	83 ec 10             	sub    $0x10,%esp
      * (1) init the ready process list: rq->run_list
      * (2) init the run pool: rq->lab6_run_pool
      * (3) set number of process: rq->proc_num to 0       
      */
    // (1) init the ready process list: rq->run_list
    list_init(&(rq->run_list));
c010bd1b:	8b 45 08             	mov    0x8(%ebp),%eax
c010bd1e:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010bd21:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010bd24:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010bd27:	89 50 04             	mov    %edx,0x4(%eax)
c010bd2a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010bd2d:	8b 50 04             	mov    0x4(%eax),%edx
c010bd30:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010bd33:	89 10                	mov    %edx,(%eax)
    // (2) init the run pool: rq->lab6_run_pool
    rq->lab6_run_pool = NULL;
c010bd35:	8b 45 08             	mov    0x8(%ebp),%eax
c010bd38:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
    //(3) set number of process: rq->proc_num to 0 
    rq->proc_num = 0;
c010bd3f:	8b 45 08             	mov    0x8(%ebp),%eax
c010bd42:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
c010bd49:	90                   	nop
c010bd4a:	c9                   	leave  
c010bd4b:	c3                   	ret    

c010bd4c <stride_enqueue>:
 * 
 * hint: see libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static void
stride_enqueue(struct run_queue *rq, struct proc_struct *proc) {
c010bd4c:	55                   	push   %ebp
c010bd4d:	89 e5                	mov    %esp,%ebp
c010bd4f:	83 ec 18             	sub    $0x18,%esp
      * (2) recalculate proc->time_slice
      * (3) set proc->rq pointer to rq
      * (4) increase rq->proc_num
      */
    // (1) insert the proc into rq correctly
    rq->lab6_run_pool = skew_heap_insert(rq->lab6_run_pool, &(proc->lab6_run_pool), (compare_f)proc_stride_comp_f);
c010bd52:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bd55:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
c010bd5b:	8b 45 08             	mov    0x8(%ebp),%eax
c010bd5e:	8b 40 10             	mov    0x10(%eax),%eax
c010bd61:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bd64:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010bd67:	c7 45 ec bf bc 10 c0 	movl   $0xc010bcbf,-0x14(%ebp)
c010bd6e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bd71:	89 45 e8             	mov    %eax,-0x18(%ebp)
     compare_f comp) __attribute__((always_inline));

static inline void
skew_heap_init(skew_heap_entry_t *a)
{
     a->left = a->right = a->parent = NULL;
c010bd74:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010bd77:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c010bd7d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010bd80:	8b 10                	mov    (%eax),%edx
c010bd82:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010bd85:	89 50 08             	mov    %edx,0x8(%eax)
c010bd88:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010bd8b:	8b 50 08             	mov    0x8(%eax),%edx
c010bd8e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010bd91:	89 50 04             	mov    %edx,0x4(%eax)
static inline skew_heap_entry_t *
skew_heap_insert(skew_heap_entry_t *a, skew_heap_entry_t *b,
                 compare_f comp)
{
     skew_heap_init(b);
     return skew_heap_merge(a, b, comp);
c010bd94:	83 ec 04             	sub    $0x4,%esp
c010bd97:	ff 75 ec             	pushl  -0x14(%ebp)
c010bd9a:	ff 75 f0             	pushl  -0x10(%ebp)
c010bd9d:	ff 75 f4             	pushl  -0xc(%ebp)
c010bda0:	e8 50 fe ff ff       	call   c010bbf5 <skew_heap_merge>
c010bda5:	83 c4 10             	add    $0x10,%esp
c010bda8:	89 c2                	mov    %eax,%edx
c010bdaa:	8b 45 08             	mov    0x8(%ebp),%eax
c010bdad:	89 50 10             	mov    %edx,0x10(%eax)
    // (2) recalculate proc->time_slice
    if (proc->time_slice == 0 || proc->time_slice > rq->max_time_slice) {
c010bdb0:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bdb3:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010bdb9:	85 c0                	test   %eax,%eax
c010bdbb:	74 13                	je     c010bdd0 <stride_enqueue+0x84>
c010bdbd:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bdc0:	8b 90 ac 00 00 00    	mov    0xac(%eax),%edx
c010bdc6:	8b 45 08             	mov    0x8(%ebp),%eax
c010bdc9:	8b 40 0c             	mov    0xc(%eax),%eax
c010bdcc:	39 c2                	cmp    %eax,%edx
c010bdce:	7e 0f                	jle    c010bddf <stride_enqueue+0x93>
        proc->time_slice = rq->max_time_slice;
c010bdd0:	8b 45 08             	mov    0x8(%ebp),%eax
c010bdd3:	8b 50 0c             	mov    0xc(%eax),%edx
c010bdd6:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bdd9:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
    }
    // (3) set proc->rq pointer to rq
    proc->rq = rq;
c010bddf:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bde2:	8b 55 08             	mov    0x8(%ebp),%edx
c010bde5:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
    // (4) increase rq->proc_num
    rq->proc_num ++;
c010bdeb:	8b 45 08             	mov    0x8(%ebp),%eax
c010bdee:	8b 40 08             	mov    0x8(%eax),%eax
c010bdf1:	8d 50 01             	lea    0x1(%eax),%edx
c010bdf4:	8b 45 08             	mov    0x8(%ebp),%eax
c010bdf7:	89 50 08             	mov    %edx,0x8(%eax)
}
c010bdfa:	90                   	nop
c010bdfb:	c9                   	leave  
c010bdfc:	c3                   	ret    

c010bdfd <stride_dequeue>:
 *
 * hint: see libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static void
stride_dequeue(struct run_queue *rq, struct proc_struct *proc) {
c010bdfd:	55                   	push   %ebp
c010bdfe:	89 e5                	mov    %esp,%ebp
c010be00:	83 ec 28             	sub    $0x28,%esp
      * NOTICE: you can use skew_heap or list. Important functions
      *         skew_heap_remove: remove a entry from skew_heap
      *         list_del_init: remove a entry from the  list
      */
    // (1) remove the proc from rq correctly
    rq->lab6_run_pool = skew_heap_remove(rq->lab6_run_pool, &(proc->lab6_run_pool), (compare_f)proc_stride_comp_f);
c010be03:	8b 45 0c             	mov    0xc(%ebp),%eax
c010be06:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
c010be0c:	8b 45 08             	mov    0x8(%ebp),%eax
c010be0f:	8b 40 10             	mov    0x10(%eax),%eax
c010be12:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010be15:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010be18:	c7 45 ec bf bc 10 c0 	movl   $0xc010bcbf,-0x14(%ebp)

static inline skew_heap_entry_t *
skew_heap_remove(skew_heap_entry_t *a, skew_heap_entry_t *b,
                 compare_f comp)
{
     skew_heap_entry_t *p   = b->parent;
c010be1f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010be22:	8b 00                	mov    (%eax),%eax
c010be24:	89 45 e8             	mov    %eax,-0x18(%ebp)
     skew_heap_entry_t *rep = skew_heap_merge(b->left, b->right, comp);
c010be27:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010be2a:	8b 50 08             	mov    0x8(%eax),%edx
c010be2d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010be30:	8b 40 04             	mov    0x4(%eax),%eax
c010be33:	83 ec 04             	sub    $0x4,%esp
c010be36:	ff 75 ec             	pushl  -0x14(%ebp)
c010be39:	52                   	push   %edx
c010be3a:	50                   	push   %eax
c010be3b:	e8 b5 fd ff ff       	call   c010bbf5 <skew_heap_merge>
c010be40:	83 c4 10             	add    $0x10,%esp
c010be43:	89 45 e4             	mov    %eax,-0x1c(%ebp)
     if (rep) rep->parent = p;
c010be46:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010be4a:	74 08                	je     c010be54 <stride_dequeue+0x57>
c010be4c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010be4f:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010be52:	89 10                	mov    %edx,(%eax)
     
     if (p)
c010be54:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010be58:	74 24                	je     c010be7e <stride_dequeue+0x81>
     {
          if (p->left == b)
c010be5a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010be5d:	8b 40 04             	mov    0x4(%eax),%eax
c010be60:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010be63:	75 0b                	jne    c010be70 <stride_dequeue+0x73>
               p->left = rep;
c010be65:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010be68:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010be6b:	89 50 04             	mov    %edx,0x4(%eax)
c010be6e:	eb 09                	jmp    c010be79 <stride_dequeue+0x7c>
          else p->right = rep;
c010be70:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010be73:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010be76:	89 50 08             	mov    %edx,0x8(%eax)
          return a;
c010be79:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010be7c:	eb 03                	jmp    c010be81 <stride_dequeue+0x84>
     }
     else return rep;
c010be7e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010be81:	8b 55 08             	mov    0x8(%ebp),%edx
c010be84:	89 42 10             	mov    %eax,0x10(%edx)
    rq->proc_num --;
c010be87:	8b 45 08             	mov    0x8(%ebp),%eax
c010be8a:	8b 40 08             	mov    0x8(%eax),%eax
c010be8d:	8d 50 ff             	lea    -0x1(%eax),%edx
c010be90:	8b 45 08             	mov    0x8(%ebp),%eax
c010be93:	89 50 08             	mov    %edx,0x8(%eax)
}
c010be96:	90                   	nop
c010be97:	c9                   	leave  
c010be98:	c3                   	ret    

c010be99 <stride_pick_next>:
 *
 * hint: see libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static struct proc_struct *
stride_pick_next(struct run_queue *rq) {
c010be99:	55                   	push   %ebp
c010be9a:	89 e5                	mov    %esp,%ebp
c010be9c:	53                   	push   %ebx
c010be9d:	83 ec 10             	sub    $0x10,%esp
      * (3) return p
      */
    // (1) get a  proc_struct pointer p  with the minimum value of stride
    //        (1.1) If using skew_heap, we can use le2proc get the p from rq->lab6_run_poll
    // cprintf("in pick next()...\n");
    if (rq->lab6_run_pool == NULL) {
c010bea0:	8b 45 08             	mov    0x8(%ebp),%eax
c010bea3:	8b 40 10             	mov    0x10(%eax),%eax
c010bea6:	85 c0                	test   %eax,%eax
c010bea8:	75 07                	jne    c010beb1 <stride_pick_next+0x18>
        return NULL;
c010beaa:	b8 00 00 00 00       	mov    $0x0,%eax
c010beaf:	eb 3b                	jmp    c010beec <stride_pick_next+0x53>
    }
    struct proc_struct * proc = le2proc(rq->lab6_run_pool, lab6_run_pool);
c010beb1:	8b 45 08             	mov    0x8(%ebp),%eax
c010beb4:	8b 40 10             	mov    0x10(%eax),%eax
c010beb7:	2d b0 00 00 00       	sub    $0xb0,%eax
c010bebc:	89 45 f8             	mov    %eax,-0x8(%ebp)
    // (2) update p's stride value: p->lab6_stride
    proc->lab6_stride += BIG_STRIDE / proc->lab6_priority;
c010bebf:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010bec2:	8b 88 bc 00 00 00    	mov    0xbc(%eax),%ecx
c010bec8:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010becb:	8b 98 c0 00 00 00    	mov    0xc0(%eax),%ebx
c010bed1:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
c010bed6:	ba 00 00 00 00       	mov    $0x0,%edx
c010bedb:	f7 f3                	div    %ebx
c010bedd:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c010bee0:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010bee3:	89 90 bc 00 00 00    	mov    %edx,0xbc(%eax)
    // (3) return p
    // cprintf("next is %s\n", proc->name);
    return proc;
c010bee9:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c010beec:	83 c4 10             	add    $0x10,%esp
c010beef:	5b                   	pop    %ebx
c010bef0:	5d                   	pop    %ebp
c010bef1:	c3                   	ret    

c010bef2 <stride_proc_tick>:
 * denotes the time slices left for current
 * process. proc->need_resched is the flag variable for process
 * switching.
 */
static void
stride_proc_tick(struct run_queue *rq, struct proc_struct *proc) {
c010bef2:	55                   	push   %ebp
c010bef3:	89 e5                	mov    %esp,%ebp
     /* LAB6: YOUR CODE */
    if (proc->time_slice > 0) {
c010bef5:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bef8:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010befe:	85 c0                	test   %eax,%eax
c010bf00:	7e 15                	jle    c010bf17 <stride_proc_tick+0x25>
        proc->time_slice --;
c010bf02:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bf05:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010bf0b:	8d 50 ff             	lea    -0x1(%eax),%edx
c010bf0e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bf11:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
    }
    if (proc->time_slice == 0) {
c010bf17:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bf1a:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010bf20:	85 c0                	test   %eax,%eax
c010bf22:	75 0a                	jne    c010bf2e <stride_proc_tick+0x3c>
        proc->need_resched = 1;
c010bf24:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bf27:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    }
}
c010bf2e:	90                   	nop
c010bf2f:	5d                   	pop    %ebp
c010bf30:	c3                   	ret    

c010bf31 <sys_exit>:
#include <pmm.h>
#include <assert.h>
#include <clock.h>

static int
sys_exit(uint32_t arg[]) {
c010bf31:	55                   	push   %ebp
c010bf32:	89 e5                	mov    %esp,%ebp
c010bf34:	83 ec 18             	sub    $0x18,%esp
    int error_code = (int)arg[0];
c010bf37:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf3a:	8b 00                	mov    (%eax),%eax
c010bf3c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_exit(error_code);
c010bf3f:	83 ec 0c             	sub    $0xc,%esp
c010bf42:	ff 75 f4             	pushl  -0xc(%ebp)
c010bf45:	e8 a3 e7 ff ff       	call   c010a6ed <do_exit>
c010bf4a:	83 c4 10             	add    $0x10,%esp
}
c010bf4d:	c9                   	leave  
c010bf4e:	c3                   	ret    

c010bf4f <sys_fork>:

static int
sys_fork(uint32_t arg[]) {
c010bf4f:	55                   	push   %ebp
c010bf50:	89 e5                	mov    %esp,%ebp
c010bf52:	83 ec 18             	sub    $0x18,%esp
    struct trapframe *tf = current->tf;
c010bf55:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010bf5a:	8b 40 3c             	mov    0x3c(%eax),%eax
c010bf5d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uintptr_t stack = tf->tf_esp;
c010bf60:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bf63:	8b 40 44             	mov    0x44(%eax),%eax
c010bf66:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_fork(0, stack, tf);
c010bf69:	83 ec 04             	sub    $0x4,%esp
c010bf6c:	ff 75 f4             	pushl  -0xc(%ebp)
c010bf6f:	ff 75 f0             	pushl  -0x10(%ebp)
c010bf72:	6a 00                	push   $0x0
c010bf74:	e8 46 e6 ff ff       	call   c010a5bf <do_fork>
c010bf79:	83 c4 10             	add    $0x10,%esp
}
c010bf7c:	c9                   	leave  
c010bf7d:	c3                   	ret    

c010bf7e <sys_wait>:

static int
sys_wait(uint32_t arg[]) {
c010bf7e:	55                   	push   %ebp
c010bf7f:	89 e5                	mov    %esp,%ebp
c010bf81:	83 ec 18             	sub    $0x18,%esp
    int pid = (int)arg[0];
c010bf84:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf87:	8b 00                	mov    (%eax),%eax
c010bf89:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int *store = (int *)arg[1];
c010bf8c:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf8f:	83 c0 04             	add    $0x4,%eax
c010bf92:	8b 00                	mov    (%eax),%eax
c010bf94:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_wait(pid, store);
c010bf97:	83 ec 08             	sub    $0x8,%esp
c010bf9a:	ff 75 f0             	pushl  -0x10(%ebp)
c010bf9d:	ff 75 f4             	pushl  -0xc(%ebp)
c010bfa0:	e8 4e f0 ff ff       	call   c010aff3 <do_wait>
c010bfa5:	83 c4 10             	add    $0x10,%esp
}
c010bfa8:	c9                   	leave  
c010bfa9:	c3                   	ret    

c010bfaa <sys_exec>:

static int
sys_exec(uint32_t arg[]) {
c010bfaa:	55                   	push   %ebp
c010bfab:	89 e5                	mov    %esp,%ebp
c010bfad:	83 ec 18             	sub    $0x18,%esp
    const char *name = (const char *)arg[0];
c010bfb0:	8b 45 08             	mov    0x8(%ebp),%eax
c010bfb3:	8b 00                	mov    (%eax),%eax
c010bfb5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    size_t len = (size_t)arg[1];
c010bfb8:	8b 45 08             	mov    0x8(%ebp),%eax
c010bfbb:	83 c0 04             	add    $0x4,%eax
c010bfbe:	8b 00                	mov    (%eax),%eax
c010bfc0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    unsigned char *binary = (unsigned char *)arg[2];
c010bfc3:	8b 45 08             	mov    0x8(%ebp),%eax
c010bfc6:	83 c0 08             	add    $0x8,%eax
c010bfc9:	8b 00                	mov    (%eax),%eax
c010bfcb:	89 45 ec             	mov    %eax,-0x14(%ebp)
    size_t size = (size_t)arg[3];
c010bfce:	8b 45 08             	mov    0x8(%ebp),%eax
c010bfd1:	83 c0 0c             	add    $0xc,%eax
c010bfd4:	8b 00                	mov    (%eax),%eax
c010bfd6:	89 45 e8             	mov    %eax,-0x18(%ebp)
    return do_execve(name, len, binary, size);
c010bfd9:	ff 75 e8             	pushl  -0x18(%ebp)
c010bfdc:	ff 75 ec             	pushl  -0x14(%ebp)
c010bfdf:	ff 75 f0             	pushl  -0x10(%ebp)
c010bfe2:	ff 75 f4             	pushl  -0xc(%ebp)
c010bfe5:	e8 d1 ee ff ff       	call   c010aebb <do_execve>
c010bfea:	83 c4 10             	add    $0x10,%esp
}
c010bfed:	c9                   	leave  
c010bfee:	c3                   	ret    

c010bfef <sys_yield>:

static int
sys_yield(uint32_t arg[]) {
c010bfef:	55                   	push   %ebp
c010bff0:	89 e5                	mov    %esp,%ebp
c010bff2:	83 ec 08             	sub    $0x8,%esp
    return do_yield();
c010bff5:	e8 e3 ef ff ff       	call   c010afdd <do_yield>
}
c010bffa:	c9                   	leave  
c010bffb:	c3                   	ret    

c010bffc <sys_kill>:

static int
sys_kill(uint32_t arg[]) {
c010bffc:	55                   	push   %ebp
c010bffd:	89 e5                	mov    %esp,%ebp
c010bfff:	83 ec 18             	sub    $0x18,%esp
    int pid = (int)arg[0];
c010c002:	8b 45 08             	mov    0x8(%ebp),%eax
c010c005:	8b 00                	mov    (%eax),%eax
c010c007:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_kill(pid);
c010c00a:	83 ec 0c             	sub    $0xc,%esp
c010c00d:	ff 75 f4             	pushl  -0xc(%ebp)
c010c010:	e8 7b f1 ff ff       	call   c010b190 <do_kill>
c010c015:	83 c4 10             	add    $0x10,%esp
}
c010c018:	c9                   	leave  
c010c019:	c3                   	ret    

c010c01a <sys_getpid>:

static int
sys_getpid(uint32_t arg[]) {
c010c01a:	55                   	push   %ebp
c010c01b:	89 e5                	mov    %esp,%ebp
    return current->pid;
c010c01d:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010c022:	8b 40 04             	mov    0x4(%eax),%eax
}
c010c025:	5d                   	pop    %ebp
c010c026:	c3                   	ret    

c010c027 <sys_putc>:

static int
sys_putc(uint32_t arg[]) {
c010c027:	55                   	push   %ebp
c010c028:	89 e5                	mov    %esp,%ebp
c010c02a:	83 ec 18             	sub    $0x18,%esp
    int c = (int)arg[0];
c010c02d:	8b 45 08             	mov    0x8(%ebp),%eax
c010c030:	8b 00                	mov    (%eax),%eax
c010c032:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cputchar(c);
c010c035:	83 ec 0c             	sub    $0xc,%esp
c010c038:	ff 75 f4             	pushl  -0xc(%ebp)
c010c03b:	e8 7d 42 ff ff       	call   c01002bd <cputchar>
c010c040:	83 c4 10             	add    $0x10,%esp
    return 0;
c010c043:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c048:	c9                   	leave  
c010c049:	c3                   	ret    

c010c04a <sys_pgdir>:

static int
sys_pgdir(uint32_t arg[]) {
c010c04a:	55                   	push   %ebp
c010c04b:	89 e5                	mov    %esp,%ebp
c010c04d:	83 ec 08             	sub    $0x8,%esp
    print_pgdir();
c010c050:	e8 c9 c7 ff ff       	call   c010881e <print_pgdir>
    return 0;
c010c055:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c05a:	c9                   	leave  
c010c05b:	c3                   	ret    

c010c05c <sys_gettime>:

static int
sys_gettime(uint32_t arg[]) {
c010c05c:	55                   	push   %ebp
c010c05d:	89 e5                	mov    %esp,%ebp
    return (int)ticks;
c010c05f:	a1 b8 70 1c c0       	mov    0xc01c70b8,%eax
}
c010c064:	5d                   	pop    %ebp
c010c065:	c3                   	ret    

c010c066 <sys_lab6_set_priority>:
static int
sys_lab6_set_priority(uint32_t arg[])
{
c010c066:	55                   	push   %ebp
c010c067:	89 e5                	mov    %esp,%ebp
c010c069:	83 ec 18             	sub    $0x18,%esp
    uint32_t priority = (uint32_t)arg[0];
c010c06c:	8b 45 08             	mov    0x8(%ebp),%eax
c010c06f:	8b 00                	mov    (%eax),%eax
c010c071:	89 45 f4             	mov    %eax,-0xc(%ebp)
    lab6_set_priority(priority);
c010c074:	83 ec 0c             	sub    $0xc,%esp
c010c077:	ff 75 f4             	pushl  -0xc(%ebp)
c010c07a:	e8 23 f5 ff ff       	call   c010b5a2 <lab6_set_priority>
c010c07f:	83 c4 10             	add    $0x10,%esp
    return 0;
c010c082:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c087:	c9                   	leave  
c010c088:	c3                   	ret    

c010c089 <sys_sleep>:

static int
sys_sleep(uint32_t arg[]) {
c010c089:	55                   	push   %ebp
c010c08a:	89 e5                	mov    %esp,%ebp
c010c08c:	83 ec 18             	sub    $0x18,%esp
    unsigned int time = (unsigned int)arg[0];
c010c08f:	8b 45 08             	mov    0x8(%ebp),%eax
c010c092:	8b 00                	mov    (%eax),%eax
c010c094:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_sleep(time);
c010c097:	83 ec 0c             	sub    $0xc,%esp
c010c09a:	ff 75 f4             	pushl  -0xc(%ebp)
c010c09d:	e8 2b f5 ff ff       	call   c010b5cd <do_sleep>
c010c0a2:	83 c4 10             	add    $0x10,%esp
}
c010c0a5:	c9                   	leave  
c010c0a6:	c3                   	ret    

c010c0a7 <syscall>:
};

#define NUM_SYSCALLS        ((sizeof(syscalls)) / (sizeof(syscalls[0])))

void
syscall(void) {
c010c0a7:	55                   	push   %ebp
c010c0a8:	89 e5                	mov    %esp,%ebp
c010c0aa:	83 ec 28             	sub    $0x28,%esp
    struct trapframe *tf = current->tf;
c010c0ad:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010c0b2:	8b 40 3c             	mov    0x3c(%eax),%eax
c010c0b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t arg[5];
    int num = tf->tf_regs.reg_eax;
c010c0b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c0bb:	8b 40 1c             	mov    0x1c(%eax),%eax
c010c0be:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (num >= 0 && num < NUM_SYSCALLS) {
c010c0c1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010c0c5:	78 64                	js     c010c12b <syscall+0x84>
c010c0c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c0ca:	3d ff 00 00 00       	cmp    $0xff,%eax
c010c0cf:	77 5a                	ja     c010c12b <syscall+0x84>
        if (syscalls[num] != NULL) {
c010c0d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c0d4:	8b 04 85 a0 1a 13 c0 	mov    -0x3fece560(,%eax,4),%eax
c010c0db:	85 c0                	test   %eax,%eax
c010c0dd:	74 4c                	je     c010c12b <syscall+0x84>
            arg[0] = tf->tf_regs.reg_edx;
c010c0df:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c0e2:	8b 40 14             	mov    0x14(%eax),%eax
c010c0e5:	89 45 dc             	mov    %eax,-0x24(%ebp)
            arg[1] = tf->tf_regs.reg_ecx;
c010c0e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c0eb:	8b 40 18             	mov    0x18(%eax),%eax
c010c0ee:	89 45 e0             	mov    %eax,-0x20(%ebp)
            arg[2] = tf->tf_regs.reg_ebx;
c010c0f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c0f4:	8b 40 10             	mov    0x10(%eax),%eax
c010c0f7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            arg[3] = tf->tf_regs.reg_edi;
c010c0fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c0fd:	8b 00                	mov    (%eax),%eax
c010c0ff:	89 45 e8             	mov    %eax,-0x18(%ebp)
            arg[4] = tf->tf_regs.reg_esi;
c010c102:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c105:	8b 40 04             	mov    0x4(%eax),%eax
c010c108:	89 45 ec             	mov    %eax,-0x14(%ebp)
            tf->tf_regs.reg_eax = syscalls[num](arg);
c010c10b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c10e:	8b 04 85 a0 1a 13 c0 	mov    -0x3fece560(,%eax,4),%eax
c010c115:	83 ec 0c             	sub    $0xc,%esp
c010c118:	8d 55 dc             	lea    -0x24(%ebp),%edx
c010c11b:	52                   	push   %edx
c010c11c:	ff d0                	call   *%eax
c010c11e:	83 c4 10             	add    $0x10,%esp
c010c121:	89 c2                	mov    %eax,%edx
c010c123:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c126:	89 50 1c             	mov    %edx,0x1c(%eax)
            return ;
c010c129:	eb 37                	jmp    c010c162 <syscall+0xbb>
        }
    }
    print_trapframe(tf);
c010c12b:	83 ec 0c             	sub    $0xc,%esp
c010c12e:	ff 75 f4             	pushl  -0xc(%ebp)
c010c131:	e8 fd 62 ff ff       	call   c0102433 <print_trapframe>
c010c136:	83 c4 10             	add    $0x10,%esp
    panic("undefined syscall %d, pid = %d, name = %s.\n",
c010c139:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010c13e:	8d 50 48             	lea    0x48(%eax),%edx
c010c141:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010c146:	8b 40 04             	mov    0x4(%eax),%eax
c010c149:	83 ec 08             	sub    $0x8,%esp
c010c14c:	52                   	push   %edx
c010c14d:	50                   	push   %eax
c010c14e:	ff 75 f0             	pushl  -0x10(%ebp)
c010c151:	68 a8 f7 10 c0       	push   $0xc010f7a8
c010c156:	6a 79                	push   $0x79
c010c158:	68 d4 f7 10 c0       	push   $0xc010f7d4
c010c15d:	e8 9b 42 ff ff       	call   c01003fd <__panic>
            num, current->pid, current->name);
}
c010c162:	c9                   	leave  
c010c163:	c3                   	ret    

c010c164 <strlen>:
 * @s:      the input string
 *
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
c010c164:	55                   	push   %ebp
c010c165:	89 e5                	mov    %esp,%ebp
c010c167:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c010c16a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (*s ++ != '\0') {
c010c171:	eb 04                	jmp    c010c177 <strlen+0x13>
        cnt ++;
c010c173:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
    size_t cnt = 0;
    while (*s ++ != '\0') {
c010c177:	8b 45 08             	mov    0x8(%ebp),%eax
c010c17a:	8d 50 01             	lea    0x1(%eax),%edx
c010c17d:	89 55 08             	mov    %edx,0x8(%ebp)
c010c180:	0f b6 00             	movzbl (%eax),%eax
c010c183:	84 c0                	test   %al,%al
c010c185:	75 ec                	jne    c010c173 <strlen+0xf>
        cnt ++;
    }
    return cnt;
c010c187:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010c18a:	c9                   	leave  
c010c18b:	c3                   	ret    

c010c18c <strnlen>:
 * The return value is strlen(s), if that is less than @len, or
 * @len if there is no '\0' character among the first @len characters
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
c010c18c:	55                   	push   %ebp
c010c18d:	89 e5                	mov    %esp,%ebp
c010c18f:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c010c192:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (cnt < len && *s ++ != '\0') {
c010c199:	eb 04                	jmp    c010c19f <strnlen+0x13>
        cnt ++;
c010c19b:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
    size_t cnt = 0;
    while (cnt < len && *s ++ != '\0') {
c010c19f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c1a2:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010c1a5:	73 10                	jae    c010c1b7 <strnlen+0x2b>
c010c1a7:	8b 45 08             	mov    0x8(%ebp),%eax
c010c1aa:	8d 50 01             	lea    0x1(%eax),%edx
c010c1ad:	89 55 08             	mov    %edx,0x8(%ebp)
c010c1b0:	0f b6 00             	movzbl (%eax),%eax
c010c1b3:	84 c0                	test   %al,%al
c010c1b5:	75 e4                	jne    c010c19b <strnlen+0xf>
        cnt ++;
    }
    return cnt;
c010c1b7:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010c1ba:	c9                   	leave  
c010c1bb:	c3                   	ret    

c010c1bc <strcpy>:
 * To avoid overflows, the size of array pointed by @dst should be long enough to
 * contain the same string as @src (including the terminating null character), and
 * should not overlap in memory with @src.
 * */
char *
strcpy(char *dst, const char *src) {
c010c1bc:	55                   	push   %ebp
c010c1bd:	89 e5                	mov    %esp,%ebp
c010c1bf:	57                   	push   %edi
c010c1c0:	56                   	push   %esi
c010c1c1:	83 ec 20             	sub    $0x20,%esp
c010c1c4:	8b 45 08             	mov    0x8(%ebp),%eax
c010c1c7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c1ca:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c1cd:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_STRCPY
#define __HAVE_ARCH_STRCPY
static inline char *
__strcpy(char *dst, const char *src) {
    int d0, d1, d2;
    asm volatile (
c010c1d0:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010c1d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c1d6:	89 d1                	mov    %edx,%ecx
c010c1d8:	89 c2                	mov    %eax,%edx
c010c1da:	89 ce                	mov    %ecx,%esi
c010c1dc:	89 d7                	mov    %edx,%edi
c010c1de:	ac                   	lods   %ds:(%esi),%al
c010c1df:	aa                   	stos   %al,%es:(%edi)
c010c1e0:	84 c0                	test   %al,%al
c010c1e2:	75 fa                	jne    c010c1de <strcpy+0x22>
c010c1e4:	89 fa                	mov    %edi,%edx
c010c1e6:	89 f1                	mov    %esi,%ecx
c010c1e8:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c010c1eb:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010c1ee:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        "stosb;"
        "testb %%al, %%al;"
        "jne 1b;"
        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
        : "0" (src), "1" (dst) : "memory");
    return dst;
c010c1f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
#ifdef __HAVE_ARCH_STRCPY
    return __strcpy(dst, src);
c010c1f4:	90                   	nop
    char *p = dst;
    while ((*p ++ = *src ++) != '\0')
        /* nothing */;
    return dst;
#endif /* __HAVE_ARCH_STRCPY */
}
c010c1f5:	83 c4 20             	add    $0x20,%esp
c010c1f8:	5e                   	pop    %esi
c010c1f9:	5f                   	pop    %edi
c010c1fa:	5d                   	pop    %ebp
c010c1fb:	c3                   	ret    

c010c1fc <strncpy>:
 * @len:    maximum number of characters to be copied from @src
 *
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
c010c1fc:	55                   	push   %ebp
c010c1fd:	89 e5                	mov    %esp,%ebp
c010c1ff:	83 ec 10             	sub    $0x10,%esp
    char *p = dst;
c010c202:	8b 45 08             	mov    0x8(%ebp),%eax
c010c205:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (len > 0) {
c010c208:	eb 21                	jmp    c010c22b <strncpy+0x2f>
        if ((*p = *src) != '\0') {
c010c20a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c20d:	0f b6 10             	movzbl (%eax),%edx
c010c210:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c213:	88 10                	mov    %dl,(%eax)
c010c215:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c218:	0f b6 00             	movzbl (%eax),%eax
c010c21b:	84 c0                	test   %al,%al
c010c21d:	74 04                	je     c010c223 <strncpy+0x27>
            src ++;
c010c21f:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
        }
        p ++, len --;
c010c223:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010c227:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
    char *p = dst;
    while (len > 0) {
c010c22b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010c22f:	75 d9                	jne    c010c20a <strncpy+0xe>
        if ((*p = *src) != '\0') {
            src ++;
        }
        p ++, len --;
    }
    return dst;
c010c231:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010c234:	c9                   	leave  
c010c235:	c3                   	ret    

c010c236 <strcmp>:
 * - A value greater than zero indicates that the first character that does
 *   not match has a greater value in @s1 than in @s2;
 * - And a value less than zero indicates the opposite.
 * */
int
strcmp(const char *s1, const char *s2) {
c010c236:	55                   	push   %ebp
c010c237:	89 e5                	mov    %esp,%ebp
c010c239:	57                   	push   %edi
c010c23a:	56                   	push   %esi
c010c23b:	83 ec 20             	sub    $0x20,%esp
c010c23e:	8b 45 08             	mov    0x8(%ebp),%eax
c010c241:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c244:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c247:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_STRCMP
#define __HAVE_ARCH_STRCMP
static inline int
__strcmp(const char *s1, const char *s2) {
    int d0, d1, ret;
    asm volatile (
c010c24a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c24d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c250:	89 d1                	mov    %edx,%ecx
c010c252:	89 c2                	mov    %eax,%edx
c010c254:	89 ce                	mov    %ecx,%esi
c010c256:	89 d7                	mov    %edx,%edi
c010c258:	ac                   	lods   %ds:(%esi),%al
c010c259:	ae                   	scas   %es:(%edi),%al
c010c25a:	75 08                	jne    c010c264 <strcmp+0x2e>
c010c25c:	84 c0                	test   %al,%al
c010c25e:	75 f8                	jne    c010c258 <strcmp+0x22>
c010c260:	31 c0                	xor    %eax,%eax
c010c262:	eb 04                	jmp    c010c268 <strcmp+0x32>
c010c264:	19 c0                	sbb    %eax,%eax
c010c266:	0c 01                	or     $0x1,%al
c010c268:	89 fa                	mov    %edi,%edx
c010c26a:	89 f1                	mov    %esi,%ecx
c010c26c:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010c26f:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c010c272:	89 55 e4             	mov    %edx,-0x1c(%ebp)
        "orb $1, %%al;"
        "3:"
        : "=a" (ret), "=&S" (d0), "=&D" (d1)
        : "1" (s1), "2" (s2)
        : "memory");
    return ret;
c010c275:	8b 45 ec             	mov    -0x14(%ebp),%eax
#ifdef __HAVE_ARCH_STRCMP
    return __strcmp(s1, s2);
c010c278:	90                   	nop
    while (*s1 != '\0' && *s1 == *s2) {
        s1 ++, s2 ++;
    }
    return (int)((unsigned char)*s1 - (unsigned char)*s2);
#endif /* __HAVE_ARCH_STRCMP */
}
c010c279:	83 c4 20             	add    $0x20,%esp
c010c27c:	5e                   	pop    %esi
c010c27d:	5f                   	pop    %edi
c010c27e:	5d                   	pop    %ebp
c010c27f:	c3                   	ret    

c010c280 <strncmp>:
 * they are equal to each other, it continues with the following pairs until
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
c010c280:	55                   	push   %ebp
c010c281:	89 e5                	mov    %esp,%ebp
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c010c283:	eb 0c                	jmp    c010c291 <strncmp+0x11>
        n --, s1 ++, s2 ++;
c010c285:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c010c289:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010c28d:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c010c291:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010c295:	74 1a                	je     c010c2b1 <strncmp+0x31>
c010c297:	8b 45 08             	mov    0x8(%ebp),%eax
c010c29a:	0f b6 00             	movzbl (%eax),%eax
c010c29d:	84 c0                	test   %al,%al
c010c29f:	74 10                	je     c010c2b1 <strncmp+0x31>
c010c2a1:	8b 45 08             	mov    0x8(%ebp),%eax
c010c2a4:	0f b6 10             	movzbl (%eax),%edx
c010c2a7:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c2aa:	0f b6 00             	movzbl (%eax),%eax
c010c2ad:	38 c2                	cmp    %al,%dl
c010c2af:	74 d4                	je     c010c285 <strncmp+0x5>
        n --, s1 ++, s2 ++;
    }
    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
c010c2b1:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010c2b5:	74 18                	je     c010c2cf <strncmp+0x4f>
c010c2b7:	8b 45 08             	mov    0x8(%ebp),%eax
c010c2ba:	0f b6 00             	movzbl (%eax),%eax
c010c2bd:	0f b6 d0             	movzbl %al,%edx
c010c2c0:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c2c3:	0f b6 00             	movzbl (%eax),%eax
c010c2c6:	0f b6 c0             	movzbl %al,%eax
c010c2c9:	29 c2                	sub    %eax,%edx
c010c2cb:	89 d0                	mov    %edx,%eax
c010c2cd:	eb 05                	jmp    c010c2d4 <strncmp+0x54>
c010c2cf:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c2d4:	5d                   	pop    %ebp
c010c2d5:	c3                   	ret    

c010c2d6 <strchr>:
 *
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
c010c2d6:	55                   	push   %ebp
c010c2d7:	89 e5                	mov    %esp,%ebp
c010c2d9:	83 ec 04             	sub    $0x4,%esp
c010c2dc:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c2df:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c010c2e2:	eb 14                	jmp    c010c2f8 <strchr+0x22>
        if (*s == c) {
c010c2e4:	8b 45 08             	mov    0x8(%ebp),%eax
c010c2e7:	0f b6 00             	movzbl (%eax),%eax
c010c2ea:	3a 45 fc             	cmp    -0x4(%ebp),%al
c010c2ed:	75 05                	jne    c010c2f4 <strchr+0x1e>
            return (char *)s;
c010c2ef:	8b 45 08             	mov    0x8(%ebp),%eax
c010c2f2:	eb 13                	jmp    c010c307 <strchr+0x31>
        }
        s ++;
c010c2f4:	83 45 08 01          	addl   $0x1,0x8(%ebp)
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
    while (*s != '\0') {
c010c2f8:	8b 45 08             	mov    0x8(%ebp),%eax
c010c2fb:	0f b6 00             	movzbl (%eax),%eax
c010c2fe:	84 c0                	test   %al,%al
c010c300:	75 e2                	jne    c010c2e4 <strchr+0xe>
        if (*s == c) {
            return (char *)s;
        }
        s ++;
    }
    return NULL;
c010c302:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c307:	c9                   	leave  
c010c308:	c3                   	ret    

c010c309 <strfind>:
 * The strfind() function is like strchr() except that if @c is
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
c010c309:	55                   	push   %ebp
c010c30a:	89 e5                	mov    %esp,%ebp
c010c30c:	83 ec 04             	sub    $0x4,%esp
c010c30f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c312:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c010c315:	eb 0f                	jmp    c010c326 <strfind+0x1d>
        if (*s == c) {
c010c317:	8b 45 08             	mov    0x8(%ebp),%eax
c010c31a:	0f b6 00             	movzbl (%eax),%eax
c010c31d:	3a 45 fc             	cmp    -0x4(%ebp),%al
c010c320:	74 10                	je     c010c332 <strfind+0x29>
            break;
        }
        s ++;
c010c322:	83 45 08 01          	addl   $0x1,0x8(%ebp)
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
    while (*s != '\0') {
c010c326:	8b 45 08             	mov    0x8(%ebp),%eax
c010c329:	0f b6 00             	movzbl (%eax),%eax
c010c32c:	84 c0                	test   %al,%al
c010c32e:	75 e7                	jne    c010c317 <strfind+0xe>
c010c330:	eb 01                	jmp    c010c333 <strfind+0x2a>
        if (*s == c) {
            break;
c010c332:	90                   	nop
        }
        s ++;
    }
    return (char *)s;
c010c333:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010c336:	c9                   	leave  
c010c337:	c3                   	ret    

c010c338 <strtol>:
 * an optional "0x" or "0X" prefix.
 *
 * The strtol() function returns the converted integral number as a long int value.
 * */
long
strtol(const char *s, char **endptr, int base) {
c010c338:	55                   	push   %ebp
c010c339:	89 e5                	mov    %esp,%ebp
c010c33b:	83 ec 10             	sub    $0x10,%esp
    int neg = 0;
c010c33e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    long val = 0;
c010c345:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
c010c34c:	eb 04                	jmp    c010c352 <strtol+0x1a>
        s ++;
c010c34e:	83 45 08 01          	addl   $0x1,0x8(%ebp)
strtol(const char *s, char **endptr, int base) {
    int neg = 0;
    long val = 0;

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
c010c352:	8b 45 08             	mov    0x8(%ebp),%eax
c010c355:	0f b6 00             	movzbl (%eax),%eax
c010c358:	3c 20                	cmp    $0x20,%al
c010c35a:	74 f2                	je     c010c34e <strtol+0x16>
c010c35c:	8b 45 08             	mov    0x8(%ebp),%eax
c010c35f:	0f b6 00             	movzbl (%eax),%eax
c010c362:	3c 09                	cmp    $0x9,%al
c010c364:	74 e8                	je     c010c34e <strtol+0x16>
        s ++;
    }

    // plus/minus sign
    if (*s == '+') {
c010c366:	8b 45 08             	mov    0x8(%ebp),%eax
c010c369:	0f b6 00             	movzbl (%eax),%eax
c010c36c:	3c 2b                	cmp    $0x2b,%al
c010c36e:	75 06                	jne    c010c376 <strtol+0x3e>
        s ++;
c010c370:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010c374:	eb 15                	jmp    c010c38b <strtol+0x53>
    }
    else if (*s == '-') {
c010c376:	8b 45 08             	mov    0x8(%ebp),%eax
c010c379:	0f b6 00             	movzbl (%eax),%eax
c010c37c:	3c 2d                	cmp    $0x2d,%al
c010c37e:	75 0b                	jne    c010c38b <strtol+0x53>
        s ++, neg = 1;
c010c380:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010c384:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
    }

    // hex or octal base prefix
    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
c010c38b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010c38f:	74 06                	je     c010c397 <strtol+0x5f>
c010c391:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
c010c395:	75 24                	jne    c010c3bb <strtol+0x83>
c010c397:	8b 45 08             	mov    0x8(%ebp),%eax
c010c39a:	0f b6 00             	movzbl (%eax),%eax
c010c39d:	3c 30                	cmp    $0x30,%al
c010c39f:	75 1a                	jne    c010c3bb <strtol+0x83>
c010c3a1:	8b 45 08             	mov    0x8(%ebp),%eax
c010c3a4:	83 c0 01             	add    $0x1,%eax
c010c3a7:	0f b6 00             	movzbl (%eax),%eax
c010c3aa:	3c 78                	cmp    $0x78,%al
c010c3ac:	75 0d                	jne    c010c3bb <strtol+0x83>
        s += 2, base = 16;
c010c3ae:	83 45 08 02          	addl   $0x2,0x8(%ebp)
c010c3b2:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
c010c3b9:	eb 2a                	jmp    c010c3e5 <strtol+0xad>
    }
    else if (base == 0 && s[0] == '0') {
c010c3bb:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010c3bf:	75 17                	jne    c010c3d8 <strtol+0xa0>
c010c3c1:	8b 45 08             	mov    0x8(%ebp),%eax
c010c3c4:	0f b6 00             	movzbl (%eax),%eax
c010c3c7:	3c 30                	cmp    $0x30,%al
c010c3c9:	75 0d                	jne    c010c3d8 <strtol+0xa0>
        s ++, base = 8;
c010c3cb:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010c3cf:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
c010c3d6:	eb 0d                	jmp    c010c3e5 <strtol+0xad>
    }
    else if (base == 0) {
c010c3d8:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010c3dc:	75 07                	jne    c010c3e5 <strtol+0xad>
        base = 10;
c010c3de:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

    // digits
    while (1) {
        int dig;

        if (*s >= '0' && *s <= '9') {
c010c3e5:	8b 45 08             	mov    0x8(%ebp),%eax
c010c3e8:	0f b6 00             	movzbl (%eax),%eax
c010c3eb:	3c 2f                	cmp    $0x2f,%al
c010c3ed:	7e 1b                	jle    c010c40a <strtol+0xd2>
c010c3ef:	8b 45 08             	mov    0x8(%ebp),%eax
c010c3f2:	0f b6 00             	movzbl (%eax),%eax
c010c3f5:	3c 39                	cmp    $0x39,%al
c010c3f7:	7f 11                	jg     c010c40a <strtol+0xd2>
            dig = *s - '0';
c010c3f9:	8b 45 08             	mov    0x8(%ebp),%eax
c010c3fc:	0f b6 00             	movzbl (%eax),%eax
c010c3ff:	0f be c0             	movsbl %al,%eax
c010c402:	83 e8 30             	sub    $0x30,%eax
c010c405:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c408:	eb 48                	jmp    c010c452 <strtol+0x11a>
        }
        else if (*s >= 'a' && *s <= 'z') {
c010c40a:	8b 45 08             	mov    0x8(%ebp),%eax
c010c40d:	0f b6 00             	movzbl (%eax),%eax
c010c410:	3c 60                	cmp    $0x60,%al
c010c412:	7e 1b                	jle    c010c42f <strtol+0xf7>
c010c414:	8b 45 08             	mov    0x8(%ebp),%eax
c010c417:	0f b6 00             	movzbl (%eax),%eax
c010c41a:	3c 7a                	cmp    $0x7a,%al
c010c41c:	7f 11                	jg     c010c42f <strtol+0xf7>
            dig = *s - 'a' + 10;
c010c41e:	8b 45 08             	mov    0x8(%ebp),%eax
c010c421:	0f b6 00             	movzbl (%eax),%eax
c010c424:	0f be c0             	movsbl %al,%eax
c010c427:	83 e8 57             	sub    $0x57,%eax
c010c42a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c42d:	eb 23                	jmp    c010c452 <strtol+0x11a>
        }
        else if (*s >= 'A' && *s <= 'Z') {
c010c42f:	8b 45 08             	mov    0x8(%ebp),%eax
c010c432:	0f b6 00             	movzbl (%eax),%eax
c010c435:	3c 40                	cmp    $0x40,%al
c010c437:	7e 3c                	jle    c010c475 <strtol+0x13d>
c010c439:	8b 45 08             	mov    0x8(%ebp),%eax
c010c43c:	0f b6 00             	movzbl (%eax),%eax
c010c43f:	3c 5a                	cmp    $0x5a,%al
c010c441:	7f 32                	jg     c010c475 <strtol+0x13d>
            dig = *s - 'A' + 10;
c010c443:	8b 45 08             	mov    0x8(%ebp),%eax
c010c446:	0f b6 00             	movzbl (%eax),%eax
c010c449:	0f be c0             	movsbl %al,%eax
c010c44c:	83 e8 37             	sub    $0x37,%eax
c010c44f:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        else {
            break;
        }
        if (dig >= base) {
c010c452:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c455:	3b 45 10             	cmp    0x10(%ebp),%eax
c010c458:	7d 1a                	jge    c010c474 <strtol+0x13c>
            break;
        }
        s ++, val = (val * base) + dig;
c010c45a:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010c45e:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c461:	0f af 45 10          	imul   0x10(%ebp),%eax
c010c465:	89 c2                	mov    %eax,%edx
c010c467:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c46a:	01 d0                	add    %edx,%eax
c010c46c:	89 45 f8             	mov    %eax,-0x8(%ebp)
        // we don't properly detect overflow!
    }
c010c46f:	e9 71 ff ff ff       	jmp    c010c3e5 <strtol+0xad>
        }
        else {
            break;
        }
        if (dig >= base) {
            break;
c010c474:	90                   	nop
        }
        s ++, val = (val * base) + dig;
        // we don't properly detect overflow!
    }

    if (endptr) {
c010c475:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010c479:	74 08                	je     c010c483 <strtol+0x14b>
        *endptr = (char *) s;
c010c47b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c47e:	8b 55 08             	mov    0x8(%ebp),%edx
c010c481:	89 10                	mov    %edx,(%eax)
    }
    return (neg ? -val : val);
c010c483:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c010c487:	74 07                	je     c010c490 <strtol+0x158>
c010c489:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c48c:	f7 d8                	neg    %eax
c010c48e:	eb 03                	jmp    c010c493 <strtol+0x15b>
c010c490:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c010c493:	c9                   	leave  
c010c494:	c3                   	ret    

c010c495 <memset>:
 * @n:      number of bytes to be set to the value
 *
 * The memset() function returns @s.
 * */
void *
memset(void *s, char c, size_t n) {
c010c495:	55                   	push   %ebp
c010c496:	89 e5                	mov    %esp,%ebp
c010c498:	57                   	push   %edi
c010c499:	83 ec 24             	sub    $0x24,%esp
c010c49c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c49f:	88 45 d8             	mov    %al,-0x28(%ebp)
#ifdef __HAVE_ARCH_MEMSET
    return __memset(s, c, n);
c010c4a2:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
c010c4a6:	8b 55 08             	mov    0x8(%ebp),%edx
c010c4a9:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010c4ac:	88 45 f7             	mov    %al,-0x9(%ebp)
c010c4af:	8b 45 10             	mov    0x10(%ebp),%eax
c010c4b2:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_MEMSET
#define __HAVE_ARCH_MEMSET
static inline void *
__memset(void *s, char c, size_t n) {
    int d0, d1;
    asm volatile (
c010c4b5:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010c4b8:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c010c4bc:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010c4bf:	89 d7                	mov    %edx,%edi
c010c4c1:	f3 aa                	rep stos %al,%es:(%edi)
c010c4c3:	89 fa                	mov    %edi,%edx
c010c4c5:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c010c4c8:	89 55 e8             	mov    %edx,-0x18(%ebp)
        "rep; stosb;"
        : "=&c" (d0), "=&D" (d1)
        : "0" (n), "a" (c), "1" (s)
        : "memory");
    return s;
c010c4cb:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c4ce:	90                   	nop
    while (n -- > 0) {
        *p ++ = c;
    }
    return s;
#endif /* __HAVE_ARCH_MEMSET */
}
c010c4cf:	83 c4 24             	add    $0x24,%esp
c010c4d2:	5f                   	pop    %edi
c010c4d3:	5d                   	pop    %ebp
c010c4d4:	c3                   	ret    

c010c4d5 <memmove>:
 * @n:      number of bytes to copy
 *
 * The memmove() function returns @dst.
 * */
void *
memmove(void *dst, const void *src, size_t n) {
c010c4d5:	55                   	push   %ebp
c010c4d6:	89 e5                	mov    %esp,%ebp
c010c4d8:	57                   	push   %edi
c010c4d9:	56                   	push   %esi
c010c4da:	53                   	push   %ebx
c010c4db:	83 ec 30             	sub    $0x30,%esp
c010c4de:	8b 45 08             	mov    0x8(%ebp),%eax
c010c4e1:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c4e4:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c4e7:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010c4ea:	8b 45 10             	mov    0x10(%ebp),%eax
c010c4ed:	89 45 e8             	mov    %eax,-0x18(%ebp)

#ifndef __HAVE_ARCH_MEMMOVE
#define __HAVE_ARCH_MEMMOVE
static inline void *
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
c010c4f0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c4f3:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010c4f6:	73 42                	jae    c010c53a <memmove+0x65>
c010c4f8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c4fb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010c4fe:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c501:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010c504:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c507:	89 45 dc             	mov    %eax,-0x24(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c010c50a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c50d:	c1 e8 02             	shr    $0x2,%eax
c010c510:	89 c1                	mov    %eax,%ecx
#ifndef __HAVE_ARCH_MEMCPY
#define __HAVE_ARCH_MEMCPY
static inline void *
__memcpy(void *dst, const void *src, size_t n) {
    int d0, d1, d2;
    asm volatile (
c010c512:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010c515:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c518:	89 d7                	mov    %edx,%edi
c010c51a:	89 c6                	mov    %eax,%esi
c010c51c:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010c51e:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c010c521:	83 e1 03             	and    $0x3,%ecx
c010c524:	74 02                	je     c010c528 <memmove+0x53>
c010c526:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010c528:	89 f0                	mov    %esi,%eax
c010c52a:	89 fa                	mov    %edi,%edx
c010c52c:	89 4d d8             	mov    %ecx,-0x28(%ebp)
c010c52f:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010c532:	89 45 d0             	mov    %eax,-0x30(%ebp)
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
        : "memory");
    return dst;
c010c535:	8b 45 e4             	mov    -0x1c(%ebp),%eax
#ifdef __HAVE_ARCH_MEMMOVE
    return __memmove(dst, src, n);
c010c538:	eb 36                	jmp    c010c570 <memmove+0x9b>
    asm volatile (
        "std;"
        "rep; movsb;"
        "cld;"
        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
c010c53a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c53d:	8d 50 ff             	lea    -0x1(%eax),%edx
c010c540:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c543:	01 c2                	add    %eax,%edx
c010c545:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c548:	8d 48 ff             	lea    -0x1(%eax),%ecx
c010c54b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c54e:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
        return __memcpy(dst, src, n);
    }
    int d0, d1, d2;
    asm volatile (
c010c551:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c554:	89 c1                	mov    %eax,%ecx
c010c556:	89 d8                	mov    %ebx,%eax
c010c558:	89 d6                	mov    %edx,%esi
c010c55a:	89 c7                	mov    %eax,%edi
c010c55c:	fd                   	std    
c010c55d:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010c55f:	fc                   	cld    
c010c560:	89 f8                	mov    %edi,%eax
c010c562:	89 f2                	mov    %esi,%edx
c010c564:	89 4d cc             	mov    %ecx,-0x34(%ebp)
c010c567:	89 55 c8             	mov    %edx,-0x38(%ebp)
c010c56a:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        "rep; movsb;"
        "cld;"
        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
        : "memory");
    return dst;
c010c56d:	8b 45 f0             	mov    -0x10(%ebp),%eax
            *d ++ = *s ++;
        }
    }
    return dst;
#endif /* __HAVE_ARCH_MEMMOVE */
}
c010c570:	83 c4 30             	add    $0x30,%esp
c010c573:	5b                   	pop    %ebx
c010c574:	5e                   	pop    %esi
c010c575:	5f                   	pop    %edi
c010c576:	5d                   	pop    %ebp
c010c577:	c3                   	ret    

c010c578 <memcpy>:
 * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
 * by both @src and @dst, should be at least @n bytes, and should not overlap
 * (for overlapping memory area, memmove is a safer approach).
 * */
void *
memcpy(void *dst, const void *src, size_t n) {
c010c578:	55                   	push   %ebp
c010c579:	89 e5                	mov    %esp,%ebp
c010c57b:	57                   	push   %edi
c010c57c:	56                   	push   %esi
c010c57d:	83 ec 20             	sub    $0x20,%esp
c010c580:	8b 45 08             	mov    0x8(%ebp),%eax
c010c583:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c586:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c589:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c58c:	8b 45 10             	mov    0x10(%ebp),%eax
c010c58f:	89 45 ec             	mov    %eax,-0x14(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c010c592:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c595:	c1 e8 02             	shr    $0x2,%eax
c010c598:	89 c1                	mov    %eax,%ecx
#ifndef __HAVE_ARCH_MEMCPY
#define __HAVE_ARCH_MEMCPY
static inline void *
__memcpy(void *dst, const void *src, size_t n) {
    int d0, d1, d2;
    asm volatile (
c010c59a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c59d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c5a0:	89 d7                	mov    %edx,%edi
c010c5a2:	89 c6                	mov    %eax,%esi
c010c5a4:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010c5a6:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c010c5a9:	83 e1 03             	and    $0x3,%ecx
c010c5ac:	74 02                	je     c010c5b0 <memcpy+0x38>
c010c5ae:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010c5b0:	89 f0                	mov    %esi,%eax
c010c5b2:	89 fa                	mov    %edi,%edx
c010c5b4:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c010c5b7:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c010c5ba:	89 45 e0             	mov    %eax,-0x20(%ebp)
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
        : "memory");
    return dst;
c010c5bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
#ifdef __HAVE_ARCH_MEMCPY
    return __memcpy(dst, src, n);
c010c5c0:	90                   	nop
    while (n -- > 0) {
        *d ++ = *s ++;
    }
    return dst;
#endif /* __HAVE_ARCH_MEMCPY */
}
c010c5c1:	83 c4 20             	add    $0x20,%esp
c010c5c4:	5e                   	pop    %esi
c010c5c5:	5f                   	pop    %edi
c010c5c6:	5d                   	pop    %ebp
c010c5c7:	c3                   	ret    

c010c5c8 <memcmp>:
 *   match in both memory blocks has a greater value in @v1 than in @v2
 *   as if evaluated as unsigned char values;
 * - And a value less than zero indicates the opposite.
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
c010c5c8:	55                   	push   %ebp
c010c5c9:	89 e5                	mov    %esp,%ebp
c010c5cb:	83 ec 10             	sub    $0x10,%esp
    const char *s1 = (const char *)v1;
c010c5ce:	8b 45 08             	mov    0x8(%ebp),%eax
c010c5d1:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s2 = (const char *)v2;
c010c5d4:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c5d7:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (n -- > 0) {
c010c5da:	eb 30                	jmp    c010c60c <memcmp+0x44>
        if (*s1 != *s2) {
c010c5dc:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c5df:	0f b6 10             	movzbl (%eax),%edx
c010c5e2:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c5e5:	0f b6 00             	movzbl (%eax),%eax
c010c5e8:	38 c2                	cmp    %al,%dl
c010c5ea:	74 18                	je     c010c604 <memcmp+0x3c>
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
c010c5ec:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c5ef:	0f b6 00             	movzbl (%eax),%eax
c010c5f2:	0f b6 d0             	movzbl %al,%edx
c010c5f5:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c5f8:	0f b6 00             	movzbl (%eax),%eax
c010c5fb:	0f b6 c0             	movzbl %al,%eax
c010c5fe:	29 c2                	sub    %eax,%edx
c010c600:	89 d0                	mov    %edx,%eax
c010c602:	eb 1a                	jmp    c010c61e <memcmp+0x56>
        }
        s1 ++, s2 ++;
c010c604:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010c608:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
    const char *s1 = (const char *)v1;
    const char *s2 = (const char *)v2;
    while (n -- > 0) {
c010c60c:	8b 45 10             	mov    0x10(%ebp),%eax
c010c60f:	8d 50 ff             	lea    -0x1(%eax),%edx
c010c612:	89 55 10             	mov    %edx,0x10(%ebp)
c010c615:	85 c0                	test   %eax,%eax
c010c617:	75 c3                	jne    c010c5dc <memcmp+0x14>
        if (*s1 != *s2) {
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
        }
        s1 ++, s2 ++;
    }
    return 0;
c010c619:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c61e:	c9                   	leave  
c010c61f:	c3                   	ret    

c010c620 <printnum>:
 * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
 * @padc:       character that padded on the left if the actual width is less than @width
 * */
static void
printnum(void (*putch)(int, void*), void *putdat,
        unsigned long long num, unsigned base, int width, int padc) {
c010c620:	55                   	push   %ebp
c010c621:	89 e5                	mov    %esp,%ebp
c010c623:	83 ec 38             	sub    $0x38,%esp
c010c626:	8b 45 10             	mov    0x10(%ebp),%eax
c010c629:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010c62c:	8b 45 14             	mov    0x14(%ebp),%eax
c010c62f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    unsigned long long result = num;
c010c632:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010c635:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010c638:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010c63b:	89 55 ec             	mov    %edx,-0x14(%ebp)
    unsigned mod = do_div(result, base);
c010c63e:	8b 45 18             	mov    0x18(%ebp),%eax
c010c641:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010c644:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c647:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010c64a:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010c64d:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010c650:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c653:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c656:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010c65a:	74 1c                	je     c010c678 <printnum+0x58>
c010c65c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c65f:	ba 00 00 00 00       	mov    $0x0,%edx
c010c664:	f7 75 e4             	divl   -0x1c(%ebp)
c010c667:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010c66a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c66d:	ba 00 00 00 00       	mov    $0x0,%edx
c010c672:	f7 75 e4             	divl   -0x1c(%ebp)
c010c675:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c678:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c67b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c67e:	f7 75 e4             	divl   -0x1c(%ebp)
c010c681:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010c684:	89 55 dc             	mov    %edx,-0x24(%ebp)
c010c687:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c68a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010c68d:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010c690:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010c693:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c696:	89 45 d8             	mov    %eax,-0x28(%ebp)

    // first recursively print all preceding (more significant) digits
    if (num >= base) {
c010c699:	8b 45 18             	mov    0x18(%ebp),%eax
c010c69c:	ba 00 00 00 00       	mov    $0x0,%edx
c010c6a1:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c010c6a4:	77 41                	ja     c010c6e7 <printnum+0xc7>
c010c6a6:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c010c6a9:	72 05                	jb     c010c6b0 <printnum+0x90>
c010c6ab:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c010c6ae:	77 37                	ja     c010c6e7 <printnum+0xc7>
        printnum(putch, putdat, result, base, width - 1, padc);
c010c6b0:	8b 45 1c             	mov    0x1c(%ebp),%eax
c010c6b3:	83 e8 01             	sub    $0x1,%eax
c010c6b6:	83 ec 04             	sub    $0x4,%esp
c010c6b9:	ff 75 20             	pushl  0x20(%ebp)
c010c6bc:	50                   	push   %eax
c010c6bd:	ff 75 18             	pushl  0x18(%ebp)
c010c6c0:	ff 75 ec             	pushl  -0x14(%ebp)
c010c6c3:	ff 75 e8             	pushl  -0x18(%ebp)
c010c6c6:	ff 75 0c             	pushl  0xc(%ebp)
c010c6c9:	ff 75 08             	pushl  0x8(%ebp)
c010c6cc:	e8 4f ff ff ff       	call   c010c620 <printnum>
c010c6d1:	83 c4 20             	add    $0x20,%esp
c010c6d4:	eb 1b                	jmp    c010c6f1 <printnum+0xd1>
    } else {
        // print any needed pad characters before first digit
        while (-- width > 0)
            putch(padc, putdat);
c010c6d6:	83 ec 08             	sub    $0x8,%esp
c010c6d9:	ff 75 0c             	pushl  0xc(%ebp)
c010c6dc:	ff 75 20             	pushl  0x20(%ebp)
c010c6df:	8b 45 08             	mov    0x8(%ebp),%eax
c010c6e2:	ff d0                	call   *%eax
c010c6e4:	83 c4 10             	add    $0x10,%esp
    // first recursively print all preceding (more significant) digits
    if (num >= base) {
        printnum(putch, putdat, result, base, width - 1, padc);
    } else {
        // print any needed pad characters before first digit
        while (-- width > 0)
c010c6e7:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
c010c6eb:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c010c6ef:	7f e5                	jg     c010c6d6 <printnum+0xb6>
            putch(padc, putdat);
    }
    // then print this (the least significant) digit
    putch("0123456789abcdef"[mod], putdat);
c010c6f1:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010c6f4:	05 04 f9 10 c0       	add    $0xc010f904,%eax
c010c6f9:	0f b6 00             	movzbl (%eax),%eax
c010c6fc:	0f be c0             	movsbl %al,%eax
c010c6ff:	83 ec 08             	sub    $0x8,%esp
c010c702:	ff 75 0c             	pushl  0xc(%ebp)
c010c705:	50                   	push   %eax
c010c706:	8b 45 08             	mov    0x8(%ebp),%eax
c010c709:	ff d0                	call   *%eax
c010c70b:	83 c4 10             	add    $0x10,%esp
}
c010c70e:	90                   	nop
c010c70f:	c9                   	leave  
c010c710:	c3                   	ret    

c010c711 <getuint>:
 * getuint - get an unsigned int of various possible sizes from a varargs list
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static unsigned long long
getuint(va_list *ap, int lflag) {
c010c711:	55                   	push   %ebp
c010c712:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c010c714:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c010c718:	7e 14                	jle    c010c72e <getuint+0x1d>
        return va_arg(*ap, unsigned long long);
c010c71a:	8b 45 08             	mov    0x8(%ebp),%eax
c010c71d:	8b 00                	mov    (%eax),%eax
c010c71f:	8d 48 08             	lea    0x8(%eax),%ecx
c010c722:	8b 55 08             	mov    0x8(%ebp),%edx
c010c725:	89 0a                	mov    %ecx,(%edx)
c010c727:	8b 50 04             	mov    0x4(%eax),%edx
c010c72a:	8b 00                	mov    (%eax),%eax
c010c72c:	eb 30                	jmp    c010c75e <getuint+0x4d>
    }
    else if (lflag) {
c010c72e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010c732:	74 16                	je     c010c74a <getuint+0x39>
        return va_arg(*ap, unsigned long);
c010c734:	8b 45 08             	mov    0x8(%ebp),%eax
c010c737:	8b 00                	mov    (%eax),%eax
c010c739:	8d 48 04             	lea    0x4(%eax),%ecx
c010c73c:	8b 55 08             	mov    0x8(%ebp),%edx
c010c73f:	89 0a                	mov    %ecx,(%edx)
c010c741:	8b 00                	mov    (%eax),%eax
c010c743:	ba 00 00 00 00       	mov    $0x0,%edx
c010c748:	eb 14                	jmp    c010c75e <getuint+0x4d>
    }
    else {
        return va_arg(*ap, unsigned int);
c010c74a:	8b 45 08             	mov    0x8(%ebp),%eax
c010c74d:	8b 00                	mov    (%eax),%eax
c010c74f:	8d 48 04             	lea    0x4(%eax),%ecx
c010c752:	8b 55 08             	mov    0x8(%ebp),%edx
c010c755:	89 0a                	mov    %ecx,(%edx)
c010c757:	8b 00                	mov    (%eax),%eax
c010c759:	ba 00 00 00 00       	mov    $0x0,%edx
    }
}
c010c75e:	5d                   	pop    %ebp
c010c75f:	c3                   	ret    

c010c760 <getint>:
 * getint - same as getuint but signed, we can't use getuint because of sign extension
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static long long
getint(va_list *ap, int lflag) {
c010c760:	55                   	push   %ebp
c010c761:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c010c763:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c010c767:	7e 14                	jle    c010c77d <getint+0x1d>
        return va_arg(*ap, long long);
c010c769:	8b 45 08             	mov    0x8(%ebp),%eax
c010c76c:	8b 00                	mov    (%eax),%eax
c010c76e:	8d 48 08             	lea    0x8(%eax),%ecx
c010c771:	8b 55 08             	mov    0x8(%ebp),%edx
c010c774:	89 0a                	mov    %ecx,(%edx)
c010c776:	8b 50 04             	mov    0x4(%eax),%edx
c010c779:	8b 00                	mov    (%eax),%eax
c010c77b:	eb 28                	jmp    c010c7a5 <getint+0x45>
    }
    else if (lflag) {
c010c77d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010c781:	74 12                	je     c010c795 <getint+0x35>
        return va_arg(*ap, long);
c010c783:	8b 45 08             	mov    0x8(%ebp),%eax
c010c786:	8b 00                	mov    (%eax),%eax
c010c788:	8d 48 04             	lea    0x4(%eax),%ecx
c010c78b:	8b 55 08             	mov    0x8(%ebp),%edx
c010c78e:	89 0a                	mov    %ecx,(%edx)
c010c790:	8b 00                	mov    (%eax),%eax
c010c792:	99                   	cltd   
c010c793:	eb 10                	jmp    c010c7a5 <getint+0x45>
    }
    else {
        return va_arg(*ap, int);
c010c795:	8b 45 08             	mov    0x8(%ebp),%eax
c010c798:	8b 00                	mov    (%eax),%eax
c010c79a:	8d 48 04             	lea    0x4(%eax),%ecx
c010c79d:	8b 55 08             	mov    0x8(%ebp),%edx
c010c7a0:	89 0a                	mov    %ecx,(%edx)
c010c7a2:	8b 00                	mov    (%eax),%eax
c010c7a4:	99                   	cltd   
    }
}
c010c7a5:	5d                   	pop    %ebp
c010c7a6:	c3                   	ret    

c010c7a7 <printfmt>:
 * @putch:      specified putch function, print a single character
 * @putdat:     used by @putch function
 * @fmt:        the format string to use
 * */
void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
c010c7a7:	55                   	push   %ebp
c010c7a8:	89 e5                	mov    %esp,%ebp
c010c7aa:	83 ec 18             	sub    $0x18,%esp
    va_list ap;

    va_start(ap, fmt);
c010c7ad:	8d 45 14             	lea    0x14(%ebp),%eax
c010c7b0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    vprintfmt(putch, putdat, fmt, ap);
c010c7b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c7b6:	50                   	push   %eax
c010c7b7:	ff 75 10             	pushl  0x10(%ebp)
c010c7ba:	ff 75 0c             	pushl  0xc(%ebp)
c010c7bd:	ff 75 08             	pushl  0x8(%ebp)
c010c7c0:	e8 06 00 00 00       	call   c010c7cb <vprintfmt>
c010c7c5:	83 c4 10             	add    $0x10,%esp
    va_end(ap);
}
c010c7c8:	90                   	nop
c010c7c9:	c9                   	leave  
c010c7ca:	c3                   	ret    

c010c7cb <vprintfmt>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want printfmt() instead.
 * */
void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
c010c7cb:	55                   	push   %ebp
c010c7cc:	89 e5                	mov    %esp,%ebp
c010c7ce:	56                   	push   %esi
c010c7cf:	53                   	push   %ebx
c010c7d0:	83 ec 20             	sub    $0x20,%esp
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c010c7d3:	eb 17                	jmp    c010c7ec <vprintfmt+0x21>
            if (ch == '\0') {
c010c7d5:	85 db                	test   %ebx,%ebx
c010c7d7:	0f 84 8e 03 00 00    	je     c010cb6b <vprintfmt+0x3a0>
                return;
            }
            putch(ch, putdat);
c010c7dd:	83 ec 08             	sub    $0x8,%esp
c010c7e0:	ff 75 0c             	pushl  0xc(%ebp)
c010c7e3:	53                   	push   %ebx
c010c7e4:	8b 45 08             	mov    0x8(%ebp),%eax
c010c7e7:	ff d0                	call   *%eax
c010c7e9:	83 c4 10             	add    $0x10,%esp
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c010c7ec:	8b 45 10             	mov    0x10(%ebp),%eax
c010c7ef:	8d 50 01             	lea    0x1(%eax),%edx
c010c7f2:	89 55 10             	mov    %edx,0x10(%ebp)
c010c7f5:	0f b6 00             	movzbl (%eax),%eax
c010c7f8:	0f b6 d8             	movzbl %al,%ebx
c010c7fb:	83 fb 25             	cmp    $0x25,%ebx
c010c7fe:	75 d5                	jne    c010c7d5 <vprintfmt+0xa>
            }
            putch(ch, putdat);
        }

        // Process a %-escape sequence
        char padc = ' ';
c010c800:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
        width = precision = -1;
c010c804:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
c010c80b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c80e:	89 45 e8             	mov    %eax,-0x18(%ebp)
        lflag = altflag = 0;
c010c811:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c010c818:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c81b:	89 45 e0             	mov    %eax,-0x20(%ebp)

    reswitch:
        switch (ch = *(unsigned char *)fmt ++) {
c010c81e:	8b 45 10             	mov    0x10(%ebp),%eax
c010c821:	8d 50 01             	lea    0x1(%eax),%edx
c010c824:	89 55 10             	mov    %edx,0x10(%ebp)
c010c827:	0f b6 00             	movzbl (%eax),%eax
c010c82a:	0f b6 d8             	movzbl %al,%ebx
c010c82d:	8d 43 dd             	lea    -0x23(%ebx),%eax
c010c830:	83 f8 55             	cmp    $0x55,%eax
c010c833:	0f 87 05 03 00 00    	ja     c010cb3e <vprintfmt+0x373>
c010c839:	8b 04 85 28 f9 10 c0 	mov    -0x3fef06d8(,%eax,4),%eax
c010c840:	ff e0                	jmp    *%eax

        // flag to pad on the right
        case '-':
            padc = '-';
c010c842:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
            goto reswitch;
c010c846:	eb d6                	jmp    c010c81e <vprintfmt+0x53>

        // flag to pad with 0's instead of spaces
        case '0':
            padc = '0';
c010c848:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
            goto reswitch;
c010c84c:	eb d0                	jmp    c010c81e <vprintfmt+0x53>

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
c010c84e:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
                precision = precision * 10 + ch - '0';
c010c855:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010c858:	89 d0                	mov    %edx,%eax
c010c85a:	c1 e0 02             	shl    $0x2,%eax
c010c85d:	01 d0                	add    %edx,%eax
c010c85f:	01 c0                	add    %eax,%eax
c010c861:	01 d8                	add    %ebx,%eax
c010c863:	83 e8 30             	sub    $0x30,%eax
c010c866:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                ch = *fmt;
c010c869:	8b 45 10             	mov    0x10(%ebp),%eax
c010c86c:	0f b6 00             	movzbl (%eax),%eax
c010c86f:	0f be d8             	movsbl %al,%ebx
                if (ch < '0' || ch > '9') {
c010c872:	83 fb 2f             	cmp    $0x2f,%ebx
c010c875:	7e 39                	jle    c010c8b0 <vprintfmt+0xe5>
c010c877:	83 fb 39             	cmp    $0x39,%ebx
c010c87a:	7f 34                	jg     c010c8b0 <vprintfmt+0xe5>
            padc = '0';
            goto reswitch;

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
c010c87c:	83 45 10 01          	addl   $0x1,0x10(%ebp)
                precision = precision * 10 + ch - '0';
                ch = *fmt;
                if (ch < '0' || ch > '9') {
                    break;
                }
            }
c010c880:	eb d3                	jmp    c010c855 <vprintfmt+0x8a>
            goto process_precision;

        case '*':
            precision = va_arg(ap, int);
c010c882:	8b 45 14             	mov    0x14(%ebp),%eax
c010c885:	8d 50 04             	lea    0x4(%eax),%edx
c010c888:	89 55 14             	mov    %edx,0x14(%ebp)
c010c88b:	8b 00                	mov    (%eax),%eax
c010c88d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            goto process_precision;
c010c890:	eb 1f                	jmp    c010c8b1 <vprintfmt+0xe6>

        case '.':
            if (width < 0)
c010c892:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010c896:	79 86                	jns    c010c81e <vprintfmt+0x53>
                width = 0;
c010c898:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
            goto reswitch;
c010c89f:	e9 7a ff ff ff       	jmp    c010c81e <vprintfmt+0x53>

        case '#':
            altflag = 1;
c010c8a4:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
            goto reswitch;
c010c8ab:	e9 6e ff ff ff       	jmp    c010c81e <vprintfmt+0x53>
                ch = *fmt;
                if (ch < '0' || ch > '9') {
                    break;
                }
            }
            goto process_precision;
c010c8b0:	90                   	nop
        case '#':
            altflag = 1;
            goto reswitch;

        process_precision:
            if (width < 0)
c010c8b1:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010c8b5:	0f 89 63 ff ff ff    	jns    c010c81e <vprintfmt+0x53>
                width = precision, precision = -1;
c010c8bb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c8be:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010c8c1:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
            goto reswitch;
c010c8c8:	e9 51 ff ff ff       	jmp    c010c81e <vprintfmt+0x53>

        // long flag (doubled for long long)
        case 'l':
            lflag ++;
c010c8cd:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
            goto reswitch;
c010c8d1:	e9 48 ff ff ff       	jmp    c010c81e <vprintfmt+0x53>

        // character
        case 'c':
            putch(va_arg(ap, int), putdat);
c010c8d6:	8b 45 14             	mov    0x14(%ebp),%eax
c010c8d9:	8d 50 04             	lea    0x4(%eax),%edx
c010c8dc:	89 55 14             	mov    %edx,0x14(%ebp)
c010c8df:	8b 00                	mov    (%eax),%eax
c010c8e1:	83 ec 08             	sub    $0x8,%esp
c010c8e4:	ff 75 0c             	pushl  0xc(%ebp)
c010c8e7:	50                   	push   %eax
c010c8e8:	8b 45 08             	mov    0x8(%ebp),%eax
c010c8eb:	ff d0                	call   *%eax
c010c8ed:	83 c4 10             	add    $0x10,%esp
            break;
c010c8f0:	e9 71 02 00 00       	jmp    c010cb66 <vprintfmt+0x39b>

        // error message
        case 'e':
            err = va_arg(ap, int);
c010c8f5:	8b 45 14             	mov    0x14(%ebp),%eax
c010c8f8:	8d 50 04             	lea    0x4(%eax),%edx
c010c8fb:	89 55 14             	mov    %edx,0x14(%ebp)
c010c8fe:	8b 18                	mov    (%eax),%ebx
            if (err < 0) {
c010c900:	85 db                	test   %ebx,%ebx
c010c902:	79 02                	jns    c010c906 <vprintfmt+0x13b>
                err = -err;
c010c904:	f7 db                	neg    %ebx
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
c010c906:	83 fb 18             	cmp    $0x18,%ebx
c010c909:	7f 0b                	jg     c010c916 <vprintfmt+0x14b>
c010c90b:	8b 34 9d a0 f8 10 c0 	mov    -0x3fef0760(,%ebx,4),%esi
c010c912:	85 f6                	test   %esi,%esi
c010c914:	75 19                	jne    c010c92f <vprintfmt+0x164>
                printfmt(putch, putdat, "error %d", err);
c010c916:	53                   	push   %ebx
c010c917:	68 15 f9 10 c0       	push   $0xc010f915
c010c91c:	ff 75 0c             	pushl  0xc(%ebp)
c010c91f:	ff 75 08             	pushl  0x8(%ebp)
c010c922:	e8 80 fe ff ff       	call   c010c7a7 <printfmt>
c010c927:	83 c4 10             	add    $0x10,%esp
            }
            else {
                printfmt(putch, putdat, "%s", p);
            }
            break;
c010c92a:	e9 37 02 00 00       	jmp    c010cb66 <vprintfmt+0x39b>
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
                printfmt(putch, putdat, "error %d", err);
            }
            else {
                printfmt(putch, putdat, "%s", p);
c010c92f:	56                   	push   %esi
c010c930:	68 1e f9 10 c0       	push   $0xc010f91e
c010c935:	ff 75 0c             	pushl  0xc(%ebp)
c010c938:	ff 75 08             	pushl  0x8(%ebp)
c010c93b:	e8 67 fe ff ff       	call   c010c7a7 <printfmt>
c010c940:	83 c4 10             	add    $0x10,%esp
            }
            break;
c010c943:	e9 1e 02 00 00       	jmp    c010cb66 <vprintfmt+0x39b>

        // string
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
c010c948:	8b 45 14             	mov    0x14(%ebp),%eax
c010c94b:	8d 50 04             	lea    0x4(%eax),%edx
c010c94e:	89 55 14             	mov    %edx,0x14(%ebp)
c010c951:	8b 30                	mov    (%eax),%esi
c010c953:	85 f6                	test   %esi,%esi
c010c955:	75 05                	jne    c010c95c <vprintfmt+0x191>
                p = "(null)";
c010c957:	be 21 f9 10 c0       	mov    $0xc010f921,%esi
            }
            if (width > 0 && padc != '-') {
c010c95c:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010c960:	7e 76                	jle    c010c9d8 <vprintfmt+0x20d>
c010c962:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
c010c966:	74 70                	je     c010c9d8 <vprintfmt+0x20d>
                for (width -= strnlen(p, precision); width > 0; width --) {
c010c968:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c96b:	83 ec 08             	sub    $0x8,%esp
c010c96e:	50                   	push   %eax
c010c96f:	56                   	push   %esi
c010c970:	e8 17 f8 ff ff       	call   c010c18c <strnlen>
c010c975:	83 c4 10             	add    $0x10,%esp
c010c978:	89 c2                	mov    %eax,%edx
c010c97a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c97d:	29 d0                	sub    %edx,%eax
c010c97f:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010c982:	eb 17                	jmp    c010c99b <vprintfmt+0x1d0>
                    putch(padc, putdat);
c010c984:	0f be 45 db          	movsbl -0x25(%ebp),%eax
c010c988:	83 ec 08             	sub    $0x8,%esp
c010c98b:	ff 75 0c             	pushl  0xc(%ebp)
c010c98e:	50                   	push   %eax
c010c98f:	8b 45 08             	mov    0x8(%ebp),%eax
c010c992:	ff d0                	call   *%eax
c010c994:	83 c4 10             	add    $0x10,%esp
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
                p = "(null)";
            }
            if (width > 0 && padc != '-') {
                for (width -= strnlen(p, precision); width > 0; width --) {
c010c997:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c010c99b:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010c99f:	7f e3                	jg     c010c984 <vprintfmt+0x1b9>
                    putch(padc, putdat);
                }
            }
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c010c9a1:	eb 35                	jmp    c010c9d8 <vprintfmt+0x20d>
                if (altflag && (ch < ' ' || ch > '~')) {
c010c9a3:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010c9a7:	74 1c                	je     c010c9c5 <vprintfmt+0x1fa>
c010c9a9:	83 fb 1f             	cmp    $0x1f,%ebx
c010c9ac:	7e 05                	jle    c010c9b3 <vprintfmt+0x1e8>
c010c9ae:	83 fb 7e             	cmp    $0x7e,%ebx
c010c9b1:	7e 12                	jle    c010c9c5 <vprintfmt+0x1fa>
                    putch('?', putdat);
c010c9b3:	83 ec 08             	sub    $0x8,%esp
c010c9b6:	ff 75 0c             	pushl  0xc(%ebp)
c010c9b9:	6a 3f                	push   $0x3f
c010c9bb:	8b 45 08             	mov    0x8(%ebp),%eax
c010c9be:	ff d0                	call   *%eax
c010c9c0:	83 c4 10             	add    $0x10,%esp
c010c9c3:	eb 0f                	jmp    c010c9d4 <vprintfmt+0x209>
                }
                else {
                    putch(ch, putdat);
c010c9c5:	83 ec 08             	sub    $0x8,%esp
c010c9c8:	ff 75 0c             	pushl  0xc(%ebp)
c010c9cb:	53                   	push   %ebx
c010c9cc:	8b 45 08             	mov    0x8(%ebp),%eax
c010c9cf:	ff d0                	call   *%eax
c010c9d1:	83 c4 10             	add    $0x10,%esp
            if (width > 0 && padc != '-') {
                for (width -= strnlen(p, precision); width > 0; width --) {
                    putch(padc, putdat);
                }
            }
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c010c9d4:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c010c9d8:	89 f0                	mov    %esi,%eax
c010c9da:	8d 70 01             	lea    0x1(%eax),%esi
c010c9dd:	0f b6 00             	movzbl (%eax),%eax
c010c9e0:	0f be d8             	movsbl %al,%ebx
c010c9e3:	85 db                	test   %ebx,%ebx
c010c9e5:	74 26                	je     c010ca0d <vprintfmt+0x242>
c010c9e7:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010c9eb:	78 b6                	js     c010c9a3 <vprintfmt+0x1d8>
c010c9ed:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
c010c9f1:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010c9f5:	79 ac                	jns    c010c9a3 <vprintfmt+0x1d8>
                }
                else {
                    putch(ch, putdat);
                }
            }
            for (; width > 0; width --) {
c010c9f7:	eb 14                	jmp    c010ca0d <vprintfmt+0x242>
                putch(' ', putdat);
c010c9f9:	83 ec 08             	sub    $0x8,%esp
c010c9fc:	ff 75 0c             	pushl  0xc(%ebp)
c010c9ff:	6a 20                	push   $0x20
c010ca01:	8b 45 08             	mov    0x8(%ebp),%eax
c010ca04:	ff d0                	call   *%eax
c010ca06:	83 c4 10             	add    $0x10,%esp
                }
                else {
                    putch(ch, putdat);
                }
            }
            for (; width > 0; width --) {
c010ca09:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c010ca0d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010ca11:	7f e6                	jg     c010c9f9 <vprintfmt+0x22e>
                putch(' ', putdat);
            }
            break;
c010ca13:	e9 4e 01 00 00       	jmp    c010cb66 <vprintfmt+0x39b>

        // (signed) decimal
        case 'd':
            num = getint(&ap, lflag);
c010ca18:	83 ec 08             	sub    $0x8,%esp
c010ca1b:	ff 75 e0             	pushl  -0x20(%ebp)
c010ca1e:	8d 45 14             	lea    0x14(%ebp),%eax
c010ca21:	50                   	push   %eax
c010ca22:	e8 39 fd ff ff       	call   c010c760 <getint>
c010ca27:	83 c4 10             	add    $0x10,%esp
c010ca2a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010ca2d:	89 55 f4             	mov    %edx,-0xc(%ebp)
            if ((long long)num < 0) {
c010ca30:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ca33:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010ca36:	85 d2                	test   %edx,%edx
c010ca38:	79 23                	jns    c010ca5d <vprintfmt+0x292>
                putch('-', putdat);
c010ca3a:	83 ec 08             	sub    $0x8,%esp
c010ca3d:	ff 75 0c             	pushl  0xc(%ebp)
c010ca40:	6a 2d                	push   $0x2d
c010ca42:	8b 45 08             	mov    0x8(%ebp),%eax
c010ca45:	ff d0                	call   *%eax
c010ca47:	83 c4 10             	add    $0x10,%esp
                num = -(long long)num;
c010ca4a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ca4d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010ca50:	f7 d8                	neg    %eax
c010ca52:	83 d2 00             	adc    $0x0,%edx
c010ca55:	f7 da                	neg    %edx
c010ca57:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010ca5a:	89 55 f4             	mov    %edx,-0xc(%ebp)
            }
            base = 10;
c010ca5d:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c010ca64:	e9 9f 00 00 00       	jmp    c010cb08 <vprintfmt+0x33d>

        // unsigned decimal
        case 'u':
            num = getuint(&ap, lflag);
c010ca69:	83 ec 08             	sub    $0x8,%esp
c010ca6c:	ff 75 e0             	pushl  -0x20(%ebp)
c010ca6f:	8d 45 14             	lea    0x14(%ebp),%eax
c010ca72:	50                   	push   %eax
c010ca73:	e8 99 fc ff ff       	call   c010c711 <getuint>
c010ca78:	83 c4 10             	add    $0x10,%esp
c010ca7b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010ca7e:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 10;
c010ca81:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c010ca88:	eb 7e                	jmp    c010cb08 <vprintfmt+0x33d>

        // (unsigned) octal
        case 'o':
            num = getuint(&ap, lflag);
c010ca8a:	83 ec 08             	sub    $0x8,%esp
c010ca8d:	ff 75 e0             	pushl  -0x20(%ebp)
c010ca90:	8d 45 14             	lea    0x14(%ebp),%eax
c010ca93:	50                   	push   %eax
c010ca94:	e8 78 fc ff ff       	call   c010c711 <getuint>
c010ca99:	83 c4 10             	add    $0x10,%esp
c010ca9c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010ca9f:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 8;
c010caa2:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
            goto number;
c010caa9:	eb 5d                	jmp    c010cb08 <vprintfmt+0x33d>

        // pointer
        case 'p':
            putch('0', putdat);
c010caab:	83 ec 08             	sub    $0x8,%esp
c010caae:	ff 75 0c             	pushl  0xc(%ebp)
c010cab1:	6a 30                	push   $0x30
c010cab3:	8b 45 08             	mov    0x8(%ebp),%eax
c010cab6:	ff d0                	call   *%eax
c010cab8:	83 c4 10             	add    $0x10,%esp
            putch('x', putdat);
c010cabb:	83 ec 08             	sub    $0x8,%esp
c010cabe:	ff 75 0c             	pushl  0xc(%ebp)
c010cac1:	6a 78                	push   $0x78
c010cac3:	8b 45 08             	mov    0x8(%ebp),%eax
c010cac6:	ff d0                	call   *%eax
c010cac8:	83 c4 10             	add    $0x10,%esp
            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
c010cacb:	8b 45 14             	mov    0x14(%ebp),%eax
c010cace:	8d 50 04             	lea    0x4(%eax),%edx
c010cad1:	89 55 14             	mov    %edx,0x14(%ebp)
c010cad4:	8b 00                	mov    (%eax),%eax
c010cad6:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010cad9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            base = 16;
c010cae0:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
            goto number;
c010cae7:	eb 1f                	jmp    c010cb08 <vprintfmt+0x33d>

        // (unsigned) hexadecimal
        case 'x':
            num = getuint(&ap, lflag);
c010cae9:	83 ec 08             	sub    $0x8,%esp
c010caec:	ff 75 e0             	pushl  -0x20(%ebp)
c010caef:	8d 45 14             	lea    0x14(%ebp),%eax
c010caf2:	50                   	push   %eax
c010caf3:	e8 19 fc ff ff       	call   c010c711 <getuint>
c010caf8:	83 c4 10             	add    $0x10,%esp
c010cafb:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010cafe:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 16;
c010cb01:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
        number:
            printnum(putch, putdat, num, base, width, padc);
c010cb08:	0f be 55 db          	movsbl -0x25(%ebp),%edx
c010cb0c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cb0f:	83 ec 04             	sub    $0x4,%esp
c010cb12:	52                   	push   %edx
c010cb13:	ff 75 e8             	pushl  -0x18(%ebp)
c010cb16:	50                   	push   %eax
c010cb17:	ff 75 f4             	pushl  -0xc(%ebp)
c010cb1a:	ff 75 f0             	pushl  -0x10(%ebp)
c010cb1d:	ff 75 0c             	pushl  0xc(%ebp)
c010cb20:	ff 75 08             	pushl  0x8(%ebp)
c010cb23:	e8 f8 fa ff ff       	call   c010c620 <printnum>
c010cb28:	83 c4 20             	add    $0x20,%esp
            break;
c010cb2b:	eb 39                	jmp    c010cb66 <vprintfmt+0x39b>

        // escaped '%' character
        case '%':
            putch(ch, putdat);
c010cb2d:	83 ec 08             	sub    $0x8,%esp
c010cb30:	ff 75 0c             	pushl  0xc(%ebp)
c010cb33:	53                   	push   %ebx
c010cb34:	8b 45 08             	mov    0x8(%ebp),%eax
c010cb37:	ff d0                	call   *%eax
c010cb39:	83 c4 10             	add    $0x10,%esp
            break;
c010cb3c:	eb 28                	jmp    c010cb66 <vprintfmt+0x39b>

        // unrecognized escape sequence - just print it literally
        default:
            putch('%', putdat);
c010cb3e:	83 ec 08             	sub    $0x8,%esp
c010cb41:	ff 75 0c             	pushl  0xc(%ebp)
c010cb44:	6a 25                	push   $0x25
c010cb46:	8b 45 08             	mov    0x8(%ebp),%eax
c010cb49:	ff d0                	call   *%eax
c010cb4b:	83 c4 10             	add    $0x10,%esp
            for (fmt --; fmt[-1] != '%'; fmt --)
c010cb4e:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c010cb52:	eb 04                	jmp    c010cb58 <vprintfmt+0x38d>
c010cb54:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c010cb58:	8b 45 10             	mov    0x10(%ebp),%eax
c010cb5b:	83 e8 01             	sub    $0x1,%eax
c010cb5e:	0f b6 00             	movzbl (%eax),%eax
c010cb61:	3c 25                	cmp    $0x25,%al
c010cb63:	75 ef                	jne    c010cb54 <vprintfmt+0x389>
                /* do nothing */;
            break;
c010cb65:	90                   	nop
        }
    }
c010cb66:	e9 68 fc ff ff       	jmp    c010c7d3 <vprintfmt+0x8>
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
            if (ch == '\0') {
                return;
c010cb6b:	90                   	nop
            for (fmt --; fmt[-1] != '%'; fmt --)
                /* do nothing */;
            break;
        }
    }
}
c010cb6c:	8d 65 f8             	lea    -0x8(%ebp),%esp
c010cb6f:	5b                   	pop    %ebx
c010cb70:	5e                   	pop    %esi
c010cb71:	5d                   	pop    %ebp
c010cb72:	c3                   	ret    

c010cb73 <sprintputch>:
 * sprintputch - 'print' a single character in a buffer
 * @ch:         the character will be printed
 * @b:          the buffer to place the character @ch
 * */
static void
sprintputch(int ch, struct sprintbuf *b) {
c010cb73:	55                   	push   %ebp
c010cb74:	89 e5                	mov    %esp,%ebp
    b->cnt ++;
c010cb76:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cb79:	8b 40 08             	mov    0x8(%eax),%eax
c010cb7c:	8d 50 01             	lea    0x1(%eax),%edx
c010cb7f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cb82:	89 50 08             	mov    %edx,0x8(%eax)
    if (b->buf < b->ebuf) {
c010cb85:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cb88:	8b 10                	mov    (%eax),%edx
c010cb8a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cb8d:	8b 40 04             	mov    0x4(%eax),%eax
c010cb90:	39 c2                	cmp    %eax,%edx
c010cb92:	73 12                	jae    c010cba6 <sprintputch+0x33>
        *b->buf ++ = ch;
c010cb94:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cb97:	8b 00                	mov    (%eax),%eax
c010cb99:	8d 48 01             	lea    0x1(%eax),%ecx
c010cb9c:	8b 55 0c             	mov    0xc(%ebp),%edx
c010cb9f:	89 0a                	mov    %ecx,(%edx)
c010cba1:	8b 55 08             	mov    0x8(%ebp),%edx
c010cba4:	88 10                	mov    %dl,(%eax)
    }
}
c010cba6:	90                   	nop
c010cba7:	5d                   	pop    %ebp
c010cba8:	c3                   	ret    

c010cba9 <snprintf>:
 * @str:        the buffer to place the result into
 * @size:       the size of buffer, including the trailing null space
 * @fmt:        the format string to use
 * */
int
snprintf(char *str, size_t size, const char *fmt, ...) {
c010cba9:	55                   	push   %ebp
c010cbaa:	89 e5                	mov    %esp,%ebp
c010cbac:	83 ec 18             	sub    $0x18,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c010cbaf:	8d 45 14             	lea    0x14(%ebp),%eax
c010cbb2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cnt = vsnprintf(str, size, fmt, ap);
c010cbb5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cbb8:	50                   	push   %eax
c010cbb9:	ff 75 10             	pushl  0x10(%ebp)
c010cbbc:	ff 75 0c             	pushl  0xc(%ebp)
c010cbbf:	ff 75 08             	pushl  0x8(%ebp)
c010cbc2:	e8 0b 00 00 00       	call   c010cbd2 <vsnprintf>
c010cbc7:	83 c4 10             	add    $0x10,%esp
c010cbca:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c010cbcd:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010cbd0:	c9                   	leave  
c010cbd1:	c3                   	ret    

c010cbd2 <vsnprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want snprintf() instead.
 * */
int
vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
c010cbd2:	55                   	push   %ebp
c010cbd3:	89 e5                	mov    %esp,%ebp
c010cbd5:	83 ec 18             	sub    $0x18,%esp
    struct sprintbuf b = {str, str + size - 1, 0};
c010cbd8:	8b 45 08             	mov    0x8(%ebp),%eax
c010cbdb:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010cbde:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cbe1:	8d 50 ff             	lea    -0x1(%eax),%edx
c010cbe4:	8b 45 08             	mov    0x8(%ebp),%eax
c010cbe7:	01 d0                	add    %edx,%eax
c010cbe9:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010cbec:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if (str == NULL || b.buf > b.ebuf) {
c010cbf3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010cbf7:	74 0a                	je     c010cc03 <vsnprintf+0x31>
c010cbf9:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010cbfc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cbff:	39 c2                	cmp    %eax,%edx
c010cc01:	76 07                	jbe    c010cc0a <vsnprintf+0x38>
        return -E_INVAL;
c010cc03:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010cc08:	eb 20                	jmp    c010cc2a <vsnprintf+0x58>
    }
    // print the string to the buffer
    vprintfmt((void*)sprintputch, &b, fmt, ap);
c010cc0a:	ff 75 14             	pushl  0x14(%ebp)
c010cc0d:	ff 75 10             	pushl  0x10(%ebp)
c010cc10:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010cc13:	50                   	push   %eax
c010cc14:	68 73 cb 10 c0       	push   $0xc010cb73
c010cc19:	e8 ad fb ff ff       	call   c010c7cb <vprintfmt>
c010cc1e:	83 c4 10             	add    $0x10,%esp
    // null terminate the buffer
    *b.buf = '\0';
c010cc21:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cc24:	c6 00 00             	movb   $0x0,(%eax)
    return b.cnt;
c010cc27:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010cc2a:	c9                   	leave  
c010cc2b:	c3                   	ret    

c010cc2c <hash32>:
 * @bits:   the number of bits in a return value
 *
 * High bits are more random, so we use them.
 * */
uint32_t
hash32(uint32_t val, unsigned int bits) {
c010cc2c:	55                   	push   %ebp
c010cc2d:	89 e5                	mov    %esp,%ebp
c010cc2f:	83 ec 10             	sub    $0x10,%esp
    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
c010cc32:	8b 45 08             	mov    0x8(%ebp),%eax
c010cc35:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
c010cc3b:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return (hash >> (32 - bits));
c010cc3e:	b8 20 00 00 00       	mov    $0x20,%eax
c010cc43:	2b 45 0c             	sub    0xc(%ebp),%eax
c010cc46:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010cc49:	89 c1                	mov    %eax,%ecx
c010cc4b:	d3 ea                	shr    %cl,%edx
c010cc4d:	89 d0                	mov    %edx,%eax
}
c010cc4f:	c9                   	leave  
c010cc50:	c3                   	ret    

c010cc51 <rand>:
 * rand - returns a pseudo-random integer
 *
 * The rand() function return a value in the range [0, RAND_MAX].
 * */
int
rand(void) {
c010cc51:	55                   	push   %ebp
c010cc52:	89 e5                	mov    %esp,%ebp
c010cc54:	57                   	push   %edi
c010cc55:	56                   	push   %esi
c010cc56:	53                   	push   %ebx
c010cc57:	83 ec 24             	sub    $0x24,%esp
    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
c010cc5a:	a1 a0 1e 13 c0       	mov    0xc0131ea0,%eax
c010cc5f:	8b 15 a4 1e 13 c0    	mov    0xc0131ea4,%edx
c010cc65:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
c010cc6b:	6b f0 05             	imul   $0x5,%eax,%esi
c010cc6e:	01 fe                	add    %edi,%esi
c010cc70:	bf 6d e6 ec de       	mov    $0xdeece66d,%edi
c010cc75:	f7 e7                	mul    %edi
c010cc77:	01 d6                	add    %edx,%esi
c010cc79:	89 f2                	mov    %esi,%edx
c010cc7b:	83 c0 0b             	add    $0xb,%eax
c010cc7e:	83 d2 00             	adc    $0x0,%edx
c010cc81:	89 c7                	mov    %eax,%edi
c010cc83:	83 e7 ff             	and    $0xffffffff,%edi
c010cc86:	89 f9                	mov    %edi,%ecx
c010cc88:	0f b7 da             	movzwl %dx,%ebx
c010cc8b:	89 0d a0 1e 13 c0    	mov    %ecx,0xc0131ea0
c010cc91:	89 1d a4 1e 13 c0    	mov    %ebx,0xc0131ea4
    unsigned long long result = (next >> 12);
c010cc97:	a1 a0 1e 13 c0       	mov    0xc0131ea0,%eax
c010cc9c:	8b 15 a4 1e 13 c0    	mov    0xc0131ea4,%edx
c010cca2:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c010cca6:	c1 ea 0c             	shr    $0xc,%edx
c010cca9:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010ccac:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    return (int)do_div(result, RAND_MAX + 1);
c010ccaf:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
c010ccb6:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010ccb9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010ccbc:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010ccbf:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010ccc2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ccc5:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010ccc8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010cccc:	74 1c                	je     c010ccea <rand+0x99>
c010ccce:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ccd1:	ba 00 00 00 00       	mov    $0x0,%edx
c010ccd6:	f7 75 dc             	divl   -0x24(%ebp)
c010ccd9:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010ccdc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ccdf:	ba 00 00 00 00       	mov    $0x0,%edx
c010cce4:	f7 75 dc             	divl   -0x24(%ebp)
c010cce7:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010ccea:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010cced:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010ccf0:	f7 75 dc             	divl   -0x24(%ebp)
c010ccf3:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010ccf6:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010ccf9:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010ccfc:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010ccff:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010cd02:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c010cd05:	8b 45 d4             	mov    -0x2c(%ebp),%eax
}
c010cd08:	83 c4 24             	add    $0x24,%esp
c010cd0b:	5b                   	pop    %ebx
c010cd0c:	5e                   	pop    %esi
c010cd0d:	5f                   	pop    %edi
c010cd0e:	5d                   	pop    %ebp
c010cd0f:	c3                   	ret    

c010cd10 <srand>:
/* *
 * srand - seed the random number generator with the given number
 * @seed:   the required seed number
 * */
void
srand(unsigned int seed) {
c010cd10:	55                   	push   %ebp
c010cd11:	89 e5                	mov    %esp,%ebp
    next = seed;
c010cd13:	8b 45 08             	mov    0x8(%ebp),%eax
c010cd16:	ba 00 00 00 00       	mov    $0x0,%edx
c010cd1b:	a3 a0 1e 13 c0       	mov    %eax,0xc0131ea0
c010cd20:	89 15 a4 1e 13 c0    	mov    %edx,0xc0131ea4
}
c010cd26:	90                   	nop
c010cd27:	5d                   	pop    %ebp
c010cd28:	c3                   	ret    

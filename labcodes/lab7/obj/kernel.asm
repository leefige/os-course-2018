
bin/kernel:     file format elf32-i386


Disassembly of section .text:

c0100000 <kern_entry>:

.text
.globl kern_entry
kern_entry:
    # load pa of boot pgdir
    movl $REALLOC(__boot_pgdir), %eax
c0100000:	b8 00 20 1c 00       	mov    $0x1c2000,%eax
    movl %eax, %cr3
c0100005:	0f 22 d8             	mov    %eax,%cr3

    # enable paging
    movl %cr0, %eax
c0100008:	0f 20 c0             	mov    %cr0,%eax
    orl $(CR0_PE | CR0_PG | CR0_AM | CR0_WP | CR0_NE | CR0_TS | CR0_EM | CR0_MP), %eax
c010000b:	0d 2f 00 05 80       	or     $0x8005002f,%eax
    andl $~(CR0_TS | CR0_EM), %eax
c0100010:	83 e0 f3             	and    $0xfffffff3,%eax
    movl %eax, %cr0
c0100013:	0f 22 c0             	mov    %eax,%cr0

    # update eip
    # now, eip = 0x1.....
    leal next, %eax
c0100016:	8d 05 1e 00 10 c0    	lea    0xc010001e,%eax
    # set eip = KERNBASE + 0x1.....
    jmp *%eax
c010001c:	ff e0                	jmp    *%eax

c010001e <next>:
next:

    # unmap va 0 ~ 4M, it's temporary mapping
    xorl %eax, %eax
c010001e:	31 c0                	xor    %eax,%eax
    movl %eax, __boot_pgdir
c0100020:	a3 00 20 1c c0       	mov    %eax,0xc01c2000

    # set ebp, esp
    movl $0x0, %ebp
c0100025:	bd 00 00 00 00       	mov    $0x0,%ebp
    # the kernel stack region is from bootstack -- bootstacktop,
    # the kernel stack size is KSTACKSIZE (8KB)defined in memlayout.h
    movl $bootstacktop, %esp
c010002a:	bc 00 10 13 c0       	mov    $0xc0131000,%esp
    # now kernel stack is ready , call the first C function
    call kern_init
c010002f:	e8 02 00 00 00       	call   c0100036 <kern_init>

c0100034 <spin>:

# should never get here
spin:
    jmp spin
c0100034:	eb fe                	jmp    c0100034 <spin>

c0100036 <kern_init>:
int kern_init(void) __attribute__((noreturn));
void grade_backtrace(void);
static void lab1_switch_test(void);

int
kern_init(void) {
c0100036:	55                   	push   %ebp
c0100037:	89 e5                	mov    %esp,%ebp
c0100039:	83 ec 18             	sub    $0x18,%esp
    extern char edata[], end[];
    memset(edata, 0, end - edata);
c010003c:	ba e4 72 1c c0       	mov    $0xc01c72e4,%edx
c0100041:	b8 00 40 1c c0       	mov    $0xc01c4000,%eax
c0100046:	29 c2                	sub    %eax,%edx
c0100048:	89 d0                	mov    %edx,%eax
c010004a:	83 ec 04             	sub    $0x4,%esp
c010004d:	50                   	push   %eax
c010004e:	6a 00                	push   $0x0
c0100050:	68 00 40 1c c0       	push   $0xc01c4000
c0100055:	e8 32 c3 00 00       	call   c010c38c <memset>
c010005a:	83 c4 10             	add    $0x10,%esp

    cons_init();                // init the console
c010005d:	e8 a4 1e 00 00       	call   c0101f06 <cons_init>

    const char *message = "(THU.CST) os is loading ...";
c0100062:	c7 45 f4 20 cc 10 c0 	movl   $0xc010cc20,-0xc(%ebp)
    cprintf("%s\n\n", message);
c0100069:	83 ec 08             	sub    $0x8,%esp
c010006c:	ff 75 f4             	pushl  -0xc(%ebp)
c010006f:	68 3c cc 10 c0       	push   $0xc010cc3c
c0100074:	e8 1e 02 00 00       	call   c0100297 <cprintf>
c0100079:	83 c4 10             	add    $0x10,%esp

    print_kerninfo();
c010007c:	e8 8c 09 00 00       	call   c0100a0d <print_kerninfo>

    grade_backtrace();
c0100081:	e8 90 00 00 00       	call   c0100116 <grade_backtrace>

    pmm_init();                 // init physical memory management
c0100086:	e8 8e 75 00 00       	call   c0107619 <pmm_init>

    pic_init();                 // init interrupt controller
c010008b:	e8 e8 1f 00 00       	call   c0102078 <pic_init>
    idt_init();                 // init interrupt descriptor table
c0100090:	e8 49 21 00 00       	call   c01021de <idt_init>

    vmm_init();                 // init virtual memory management
c0100095:	e8 89 3c 00 00       	call   c0103d23 <vmm_init>
    sched_init();               // init scheduler
c010009a:	e8 92 b5 00 00       	call   c010b631 <sched_init>
    proc_init();                // init process table
c010009f:	e8 3f b2 00 00       	call   c010b2e3 <proc_init>
    
    ide_init();                 // init ide devices
c01000a4:	e8 2c 0e 00 00       	call   c0100ed5 <ide_init>
    swap_init();                // init swap
c01000a9:	e8 93 52 00 00       	call   c0105341 <swap_init>

    clock_init();               // init clock interrupt
c01000ae:	e8 fa 15 00 00       	call   c01016ad <clock_init>
    intr_enable();              // enable irq interrupt
c01000b3:	e8 fd 20 00 00       	call   c01021b5 <intr_enable>

    //LAB1: CAHLLENGE 1 If you try to do it, uncomment lab1_switch_test()
    // user/kernel mode switch test
    //lab1_switch_test();
    
    cpu_idle();                 // run idle process
c01000b8:	e8 c3 b3 00 00       	call   c010b480 <cpu_idle>

c01000bd <grade_backtrace2>:
}

void __attribute__((noinline))
grade_backtrace2(int arg0, int arg1, int arg2, int arg3) {
c01000bd:	55                   	push   %ebp
c01000be:	89 e5                	mov    %esp,%ebp
c01000c0:	83 ec 08             	sub    $0x8,%esp
    mon_backtrace(0, NULL, NULL);
c01000c3:	83 ec 04             	sub    $0x4,%esp
c01000c6:	6a 00                	push   $0x0
c01000c8:	6a 00                	push   $0x0
c01000ca:	6a 00                	push   $0x0
c01000cc:	e8 98 0d 00 00       	call   c0100e69 <mon_backtrace>
c01000d1:	83 c4 10             	add    $0x10,%esp
}
c01000d4:	90                   	nop
c01000d5:	c9                   	leave  
c01000d6:	c3                   	ret    

c01000d7 <grade_backtrace1>:

void __attribute__((noinline))
grade_backtrace1(int arg0, int arg1) {
c01000d7:	55                   	push   %ebp
c01000d8:	89 e5                	mov    %esp,%ebp
c01000da:	53                   	push   %ebx
c01000db:	83 ec 04             	sub    $0x4,%esp
    grade_backtrace2(arg0, (int)&arg0, arg1, (int)&arg1);
c01000de:	8d 4d 0c             	lea    0xc(%ebp),%ecx
c01000e1:	8b 55 0c             	mov    0xc(%ebp),%edx
c01000e4:	8d 5d 08             	lea    0x8(%ebp),%ebx
c01000e7:	8b 45 08             	mov    0x8(%ebp),%eax
c01000ea:	51                   	push   %ecx
c01000eb:	52                   	push   %edx
c01000ec:	53                   	push   %ebx
c01000ed:	50                   	push   %eax
c01000ee:	e8 ca ff ff ff       	call   c01000bd <grade_backtrace2>
c01000f3:	83 c4 10             	add    $0x10,%esp
}
c01000f6:	90                   	nop
c01000f7:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c01000fa:	c9                   	leave  
c01000fb:	c3                   	ret    

c01000fc <grade_backtrace0>:

void __attribute__((noinline))
grade_backtrace0(int arg0, int arg1, int arg2) {
c01000fc:	55                   	push   %ebp
c01000fd:	89 e5                	mov    %esp,%ebp
c01000ff:	83 ec 08             	sub    $0x8,%esp
    grade_backtrace1(arg0, arg2);
c0100102:	83 ec 08             	sub    $0x8,%esp
c0100105:	ff 75 10             	pushl  0x10(%ebp)
c0100108:	ff 75 08             	pushl  0x8(%ebp)
c010010b:	e8 c7 ff ff ff       	call   c01000d7 <grade_backtrace1>
c0100110:	83 c4 10             	add    $0x10,%esp
}
c0100113:	90                   	nop
c0100114:	c9                   	leave  
c0100115:	c3                   	ret    

c0100116 <grade_backtrace>:

void
grade_backtrace(void) {
c0100116:	55                   	push   %ebp
c0100117:	89 e5                	mov    %esp,%ebp
c0100119:	83 ec 08             	sub    $0x8,%esp
    grade_backtrace0(0, (int)kern_init, 0xffff0000);
c010011c:	b8 36 00 10 c0       	mov    $0xc0100036,%eax
c0100121:	83 ec 04             	sub    $0x4,%esp
c0100124:	68 00 00 ff ff       	push   $0xffff0000
c0100129:	50                   	push   %eax
c010012a:	6a 00                	push   $0x0
c010012c:	e8 cb ff ff ff       	call   c01000fc <grade_backtrace0>
c0100131:	83 c4 10             	add    $0x10,%esp
}
c0100134:	90                   	nop
c0100135:	c9                   	leave  
c0100136:	c3                   	ret    

c0100137 <lab1_print_cur_status>:

static void
lab1_print_cur_status(void) {
c0100137:	55                   	push   %ebp
c0100138:	89 e5                	mov    %esp,%ebp
c010013a:	83 ec 18             	sub    $0x18,%esp
    static int round = 0;
    uint16_t reg1, reg2, reg3, reg4;
    asm volatile (
c010013d:	8c 4d f6             	mov    %cs,-0xa(%ebp)
c0100140:	8c 5d f4             	mov    %ds,-0xc(%ebp)
c0100143:	8c 45 f2             	mov    %es,-0xe(%ebp)
c0100146:	8c 55 f0             	mov    %ss,-0x10(%ebp)
            "mov %%cs, %0;"
            "mov %%ds, %1;"
            "mov %%es, %2;"
            "mov %%ss, %3;"
            : "=m"(reg1), "=m"(reg2), "=m"(reg3), "=m"(reg4));
    cprintf("%d: @ring %d\n", round, reg1 & 3);
c0100149:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010014d:	0f b7 c0             	movzwl %ax,%eax
c0100150:	83 e0 03             	and    $0x3,%eax
c0100153:	89 c2                	mov    %eax,%edx
c0100155:	a1 00 40 1c c0       	mov    0xc01c4000,%eax
c010015a:	83 ec 04             	sub    $0x4,%esp
c010015d:	52                   	push   %edx
c010015e:	50                   	push   %eax
c010015f:	68 41 cc 10 c0       	push   $0xc010cc41
c0100164:	e8 2e 01 00 00       	call   c0100297 <cprintf>
c0100169:	83 c4 10             	add    $0x10,%esp
    cprintf("%d:  cs = %x\n", round, reg1);
c010016c:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100170:	0f b7 d0             	movzwl %ax,%edx
c0100173:	a1 00 40 1c c0       	mov    0xc01c4000,%eax
c0100178:	83 ec 04             	sub    $0x4,%esp
c010017b:	52                   	push   %edx
c010017c:	50                   	push   %eax
c010017d:	68 4f cc 10 c0       	push   $0xc010cc4f
c0100182:	e8 10 01 00 00       	call   c0100297 <cprintf>
c0100187:	83 c4 10             	add    $0x10,%esp
    cprintf("%d:  ds = %x\n", round, reg2);
c010018a:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c010018e:	0f b7 d0             	movzwl %ax,%edx
c0100191:	a1 00 40 1c c0       	mov    0xc01c4000,%eax
c0100196:	83 ec 04             	sub    $0x4,%esp
c0100199:	52                   	push   %edx
c010019a:	50                   	push   %eax
c010019b:	68 5d cc 10 c0       	push   $0xc010cc5d
c01001a0:	e8 f2 00 00 00       	call   c0100297 <cprintf>
c01001a5:	83 c4 10             	add    $0x10,%esp
    cprintf("%d:  es = %x\n", round, reg3);
c01001a8:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01001ac:	0f b7 d0             	movzwl %ax,%edx
c01001af:	a1 00 40 1c c0       	mov    0xc01c4000,%eax
c01001b4:	83 ec 04             	sub    $0x4,%esp
c01001b7:	52                   	push   %edx
c01001b8:	50                   	push   %eax
c01001b9:	68 6b cc 10 c0       	push   $0xc010cc6b
c01001be:	e8 d4 00 00 00       	call   c0100297 <cprintf>
c01001c3:	83 c4 10             	add    $0x10,%esp
    cprintf("%d:  ss = %x\n", round, reg4);
c01001c6:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c01001ca:	0f b7 d0             	movzwl %ax,%edx
c01001cd:	a1 00 40 1c c0       	mov    0xc01c4000,%eax
c01001d2:	83 ec 04             	sub    $0x4,%esp
c01001d5:	52                   	push   %edx
c01001d6:	50                   	push   %eax
c01001d7:	68 79 cc 10 c0       	push   $0xc010cc79
c01001dc:	e8 b6 00 00 00       	call   c0100297 <cprintf>
c01001e1:	83 c4 10             	add    $0x10,%esp
    round ++;
c01001e4:	a1 00 40 1c c0       	mov    0xc01c4000,%eax
c01001e9:	83 c0 01             	add    $0x1,%eax
c01001ec:	a3 00 40 1c c0       	mov    %eax,0xc01c4000
}
c01001f1:	90                   	nop
c01001f2:	c9                   	leave  
c01001f3:	c3                   	ret    

c01001f4 <lab1_switch_to_user>:

static void
lab1_switch_to_user(void) {
c01001f4:	55                   	push   %ebp
c01001f5:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 : TODO
    asm volatile (
c01001f7:	cd 78                	int    $0x78
c01001f9:	89 ec                	mov    %ebp,%esp
	    "int %0;"
        "movl %%ebp, %%esp"
	    : 
	    : "i"(T_SWITCH_TOU)
	);
}
c01001fb:	90                   	nop
c01001fc:	5d                   	pop    %ebp
c01001fd:	c3                   	ret    

c01001fe <lab1_switch_to_kernel>:

static void
lab1_switch_to_kernel(void) {
c01001fe:	55                   	push   %ebp
c01001ff:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 :  TODO
    // cprintf("in lab1_switch_to_kernel\n");
    asm volatile (
c0100201:	cd 79                	int    $0x79
c0100203:	89 ec                	mov    %ebp,%esp
	    "int %0;"
        "movl %%ebp, %%esp"
        : 
	    : "i"(T_SWITCH_TOK)
	);
}
c0100205:	90                   	nop
c0100206:	5d                   	pop    %ebp
c0100207:	c3                   	ret    

c0100208 <lab1_switch_test>:

static void
lab1_switch_test(void) {
c0100208:	55                   	push   %ebp
c0100209:	89 e5                	mov    %esp,%ebp
c010020b:	83 ec 08             	sub    $0x8,%esp
    lab1_print_cur_status();
c010020e:	e8 24 ff ff ff       	call   c0100137 <lab1_print_cur_status>
    cprintf("+++ switch to  user  mode +++\n");
c0100213:	83 ec 0c             	sub    $0xc,%esp
c0100216:	68 88 cc 10 c0       	push   $0xc010cc88
c010021b:	e8 77 00 00 00       	call   c0100297 <cprintf>
c0100220:	83 c4 10             	add    $0x10,%esp
    lab1_switch_to_user();
c0100223:	e8 cc ff ff ff       	call   c01001f4 <lab1_switch_to_user>
    lab1_print_cur_status();
c0100228:	e8 0a ff ff ff       	call   c0100137 <lab1_print_cur_status>
    cprintf("+++ switch to kernel mode +++\n");
c010022d:	83 ec 0c             	sub    $0xc,%esp
c0100230:	68 a8 cc 10 c0       	push   $0xc010cca8
c0100235:	e8 5d 00 00 00       	call   c0100297 <cprintf>
c010023a:	83 c4 10             	add    $0x10,%esp
    lab1_switch_to_kernel();
c010023d:	e8 bc ff ff ff       	call   c01001fe <lab1_switch_to_kernel>
    lab1_print_cur_status();
c0100242:	e8 f0 fe ff ff       	call   c0100137 <lab1_print_cur_status>
}
c0100247:	90                   	nop
c0100248:	c9                   	leave  
c0100249:	c3                   	ret    

c010024a <cputch>:
/* *
 * cputch - writes a single character @c to stdout, and it will
 * increace the value of counter pointed by @cnt.
 * */
static void
cputch(int c, int *cnt) {
c010024a:	55                   	push   %ebp
c010024b:	89 e5                	mov    %esp,%ebp
c010024d:	83 ec 08             	sub    $0x8,%esp
    cons_putc(c);
c0100250:	83 ec 0c             	sub    $0xc,%esp
c0100253:	ff 75 08             	pushl  0x8(%ebp)
c0100256:	e8 dc 1c 00 00       	call   c0101f37 <cons_putc>
c010025b:	83 c4 10             	add    $0x10,%esp
    (*cnt) ++;
c010025e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100261:	8b 00                	mov    (%eax),%eax
c0100263:	8d 50 01             	lea    0x1(%eax),%edx
c0100266:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100269:	89 10                	mov    %edx,(%eax)
}
c010026b:	90                   	nop
c010026c:	c9                   	leave  
c010026d:	c3                   	ret    

c010026e <vcprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want cprintf() instead.
 * */
int
vcprintf(const char *fmt, va_list ap) {
c010026e:	55                   	push   %ebp
c010026f:	89 e5                	mov    %esp,%ebp
c0100271:	83 ec 18             	sub    $0x18,%esp
    int cnt = 0;
c0100274:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    vprintfmt((void*)cputch, &cnt, fmt, ap);
c010027b:	ff 75 0c             	pushl  0xc(%ebp)
c010027e:	ff 75 08             	pushl  0x8(%ebp)
c0100281:	8d 45 f4             	lea    -0xc(%ebp),%eax
c0100284:	50                   	push   %eax
c0100285:	68 4a 02 10 c0       	push   $0xc010024a
c010028a:	e8 33 c4 00 00       	call   c010c6c2 <vprintfmt>
c010028f:	83 c4 10             	add    $0x10,%esp
    return cnt;
c0100292:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100295:	c9                   	leave  
c0100296:	c3                   	ret    

c0100297 <cprintf>:
 *
 * The return value is the number of characters which would be
 * written to stdout.
 * */
int
cprintf(const char *fmt, ...) {
c0100297:	55                   	push   %ebp
c0100298:	89 e5                	mov    %esp,%ebp
c010029a:	83 ec 18             	sub    $0x18,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c010029d:	8d 45 0c             	lea    0xc(%ebp),%eax
c01002a0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cnt = vcprintf(fmt, ap);
c01002a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002a6:	83 ec 08             	sub    $0x8,%esp
c01002a9:	50                   	push   %eax
c01002aa:	ff 75 08             	pushl  0x8(%ebp)
c01002ad:	e8 bc ff ff ff       	call   c010026e <vcprintf>
c01002b2:	83 c4 10             	add    $0x10,%esp
c01002b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c01002b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01002bb:	c9                   	leave  
c01002bc:	c3                   	ret    

c01002bd <cputchar>:

/* cputchar - writes a single character to stdout */
void
cputchar(int c) {
c01002bd:	55                   	push   %ebp
c01002be:	89 e5                	mov    %esp,%ebp
c01002c0:	83 ec 08             	sub    $0x8,%esp
    cons_putc(c);
c01002c3:	83 ec 0c             	sub    $0xc,%esp
c01002c6:	ff 75 08             	pushl  0x8(%ebp)
c01002c9:	e8 69 1c 00 00       	call   c0101f37 <cons_putc>
c01002ce:	83 c4 10             	add    $0x10,%esp
}
c01002d1:	90                   	nop
c01002d2:	c9                   	leave  
c01002d3:	c3                   	ret    

c01002d4 <cputs>:
/* *
 * cputs- writes the string pointed by @str to stdout and
 * appends a newline character.
 * */
int
cputs(const char *str) {
c01002d4:	55                   	push   %ebp
c01002d5:	89 e5                	mov    %esp,%ebp
c01002d7:	83 ec 18             	sub    $0x18,%esp
    int cnt = 0;
c01002da:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    char c;
    while ((c = *str ++) != '\0') {
c01002e1:	eb 14                	jmp    c01002f7 <cputs+0x23>
        cputch(c, &cnt);
c01002e3:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
c01002e7:	83 ec 08             	sub    $0x8,%esp
c01002ea:	8d 55 f0             	lea    -0x10(%ebp),%edx
c01002ed:	52                   	push   %edx
c01002ee:	50                   	push   %eax
c01002ef:	e8 56 ff ff ff       	call   c010024a <cputch>
c01002f4:	83 c4 10             	add    $0x10,%esp
 * */
int
cputs(const char *str) {
    int cnt = 0;
    char c;
    while ((c = *str ++) != '\0') {
c01002f7:	8b 45 08             	mov    0x8(%ebp),%eax
c01002fa:	8d 50 01             	lea    0x1(%eax),%edx
c01002fd:	89 55 08             	mov    %edx,0x8(%ebp)
c0100300:	0f b6 00             	movzbl (%eax),%eax
c0100303:	88 45 f7             	mov    %al,-0x9(%ebp)
c0100306:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
c010030a:	75 d7                	jne    c01002e3 <cputs+0xf>
        cputch(c, &cnt);
    }
    cputch('\n', &cnt);
c010030c:	83 ec 08             	sub    $0x8,%esp
c010030f:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0100312:	50                   	push   %eax
c0100313:	6a 0a                	push   $0xa
c0100315:	e8 30 ff ff ff       	call   c010024a <cputch>
c010031a:	83 c4 10             	add    $0x10,%esp
    return cnt;
c010031d:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0100320:	c9                   	leave  
c0100321:	c3                   	ret    

c0100322 <getchar>:

/* getchar - reads a single non-zero character from stdin */
int
getchar(void) {
c0100322:	55                   	push   %ebp
c0100323:	89 e5                	mov    %esp,%ebp
c0100325:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = cons_getc()) == 0)
c0100328:	e8 53 1c 00 00       	call   c0101f80 <cons_getc>
c010032d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100330:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100334:	74 f2                	je     c0100328 <getchar+0x6>
        /* do nothing */;
    return c;
c0100336:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100339:	c9                   	leave  
c010033a:	c3                   	ret    

c010033b <readline>:
 * The readline() function returns the text of the line read. If some errors
 * are happened, NULL is returned. The return value is a global variable,
 * thus it should be copied before it is used.
 * */
char *
readline(const char *prompt) {
c010033b:	55                   	push   %ebp
c010033c:	89 e5                	mov    %esp,%ebp
c010033e:	83 ec 18             	sub    $0x18,%esp
    if (prompt != NULL) {
c0100341:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0100345:	74 13                	je     c010035a <readline+0x1f>
        cprintf("%s", prompt);
c0100347:	83 ec 08             	sub    $0x8,%esp
c010034a:	ff 75 08             	pushl  0x8(%ebp)
c010034d:	68 c7 cc 10 c0       	push   $0xc010ccc7
c0100352:	e8 40 ff ff ff       	call   c0100297 <cprintf>
c0100357:	83 c4 10             	add    $0x10,%esp
    }
    int i = 0, c;
c010035a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        c = getchar();
c0100361:	e8 bc ff ff ff       	call   c0100322 <getchar>
c0100366:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (c < 0) {
c0100369:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010036d:	79 0a                	jns    c0100379 <readline+0x3e>
            return NULL;
c010036f:	b8 00 00 00 00       	mov    $0x0,%eax
c0100374:	e9 82 00 00 00       	jmp    c01003fb <readline+0xc0>
        }
        else if (c >= ' ' && i < BUFSIZE - 1) {
c0100379:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
c010037d:	7e 2b                	jle    c01003aa <readline+0x6f>
c010037f:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
c0100386:	7f 22                	jg     c01003aa <readline+0x6f>
            cputchar(c);
c0100388:	83 ec 0c             	sub    $0xc,%esp
c010038b:	ff 75 f0             	pushl  -0x10(%ebp)
c010038e:	e8 2a ff ff ff       	call   c01002bd <cputchar>
c0100393:	83 c4 10             	add    $0x10,%esp
            buf[i ++] = c;
c0100396:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100399:	8d 50 01             	lea    0x1(%eax),%edx
c010039c:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010039f:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01003a2:	88 90 20 40 1c c0    	mov    %dl,-0x3fe3bfe0(%eax)
c01003a8:	eb 4c                	jmp    c01003f6 <readline+0xbb>
        }
        else if (c == '\b' && i > 0) {
c01003aa:	83 7d f0 08          	cmpl   $0x8,-0x10(%ebp)
c01003ae:	75 1a                	jne    c01003ca <readline+0x8f>
c01003b0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01003b4:	7e 14                	jle    c01003ca <readline+0x8f>
            cputchar(c);
c01003b6:	83 ec 0c             	sub    $0xc,%esp
c01003b9:	ff 75 f0             	pushl  -0x10(%ebp)
c01003bc:	e8 fc fe ff ff       	call   c01002bd <cputchar>
c01003c1:	83 c4 10             	add    $0x10,%esp
            i --;
c01003c4:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c01003c8:	eb 2c                	jmp    c01003f6 <readline+0xbb>
        }
        else if (c == '\n' || c == '\r') {
c01003ca:	83 7d f0 0a          	cmpl   $0xa,-0x10(%ebp)
c01003ce:	74 06                	je     c01003d6 <readline+0x9b>
c01003d0:	83 7d f0 0d          	cmpl   $0xd,-0x10(%ebp)
c01003d4:	75 8b                	jne    c0100361 <readline+0x26>
            cputchar(c);
c01003d6:	83 ec 0c             	sub    $0xc,%esp
c01003d9:	ff 75 f0             	pushl  -0x10(%ebp)
c01003dc:	e8 dc fe ff ff       	call   c01002bd <cputchar>
c01003e1:	83 c4 10             	add    $0x10,%esp
            buf[i] = '\0';
c01003e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01003e7:	05 20 40 1c c0       	add    $0xc01c4020,%eax
c01003ec:	c6 00 00             	movb   $0x0,(%eax)
            return buf;
c01003ef:	b8 20 40 1c c0       	mov    $0xc01c4020,%eax
c01003f4:	eb 05                	jmp    c01003fb <readline+0xc0>
        }
    }
c01003f6:	e9 66 ff ff ff       	jmp    c0100361 <readline+0x26>
}
c01003fb:	c9                   	leave  
c01003fc:	c3                   	ret    

c01003fd <__panic>:
/* *
 * __panic - __panic is called on unresolvable fatal errors. it prints
 * "panic: 'message'", and then enters the kernel monitor.
 * */
void
__panic(const char *file, int line, const char *fmt, ...) {
c01003fd:	55                   	push   %ebp
c01003fe:	89 e5                	mov    %esp,%ebp
c0100400:	83 ec 18             	sub    $0x18,%esp
    if (is_panic) {
c0100403:	a1 20 44 1c c0       	mov    0xc01c4420,%eax
c0100408:	85 c0                	test   %eax,%eax
c010040a:	75 5f                	jne    c010046b <__panic+0x6e>
        goto panic_dead;
    }
    is_panic = 1;
c010040c:	c7 05 20 44 1c c0 01 	movl   $0x1,0xc01c4420
c0100413:	00 00 00 

    // print the 'message'
    va_list ap;
    va_start(ap, fmt);
c0100416:	8d 45 14             	lea    0x14(%ebp),%eax
c0100419:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cprintf("kernel panic at %s:%d:\n    ", file, line);
c010041c:	83 ec 04             	sub    $0x4,%esp
c010041f:	ff 75 0c             	pushl  0xc(%ebp)
c0100422:	ff 75 08             	pushl  0x8(%ebp)
c0100425:	68 ca cc 10 c0       	push   $0xc010ccca
c010042a:	e8 68 fe ff ff       	call   c0100297 <cprintf>
c010042f:	83 c4 10             	add    $0x10,%esp
    vcprintf(fmt, ap);
c0100432:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100435:	83 ec 08             	sub    $0x8,%esp
c0100438:	50                   	push   %eax
c0100439:	ff 75 10             	pushl  0x10(%ebp)
c010043c:	e8 2d fe ff ff       	call   c010026e <vcprintf>
c0100441:	83 c4 10             	add    $0x10,%esp
    cprintf("\n");
c0100444:	83 ec 0c             	sub    $0xc,%esp
c0100447:	68 e6 cc 10 c0       	push   $0xc010cce6
c010044c:	e8 46 fe ff ff       	call   c0100297 <cprintf>
c0100451:	83 c4 10             	add    $0x10,%esp
    
    cprintf("stack trackback:\n");
c0100454:	83 ec 0c             	sub    $0xc,%esp
c0100457:	68 e8 cc 10 c0       	push   $0xc010cce8
c010045c:	e8 36 fe ff ff       	call   c0100297 <cprintf>
c0100461:	83 c4 10             	add    $0x10,%esp
    print_stackframe();
c0100464:	e8 ee 06 00 00       	call   c0100b57 <print_stackframe>
c0100469:	eb 01                	jmp    c010046c <__panic+0x6f>
 * "panic: 'message'", and then enters the kernel monitor.
 * */
void
__panic(const char *file, int line, const char *fmt, ...) {
    if (is_panic) {
        goto panic_dead;
c010046b:	90                   	nop
    print_stackframe();
    
    va_end(ap);

panic_dead:
    intr_disable();
c010046c:	e8 4b 1d 00 00       	call   c01021bc <intr_disable>
    while (1) {
        kmonitor(NULL);
c0100471:	83 ec 0c             	sub    $0xc,%esp
c0100474:	6a 00                	push   $0x0
c0100476:	e8 14 09 00 00       	call   c0100d8f <kmonitor>
c010047b:	83 c4 10             	add    $0x10,%esp
    }
c010047e:	eb f1                	jmp    c0100471 <__panic+0x74>

c0100480 <__warn>:
}

/* __warn - like panic, but don't */
void
__warn(const char *file, int line, const char *fmt, ...) {
c0100480:	55                   	push   %ebp
c0100481:	89 e5                	mov    %esp,%ebp
c0100483:	83 ec 18             	sub    $0x18,%esp
    va_list ap;
    va_start(ap, fmt);
c0100486:	8d 45 14             	lea    0x14(%ebp),%eax
c0100489:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cprintf("kernel warning at %s:%d:\n    ", file, line);
c010048c:	83 ec 04             	sub    $0x4,%esp
c010048f:	ff 75 0c             	pushl  0xc(%ebp)
c0100492:	ff 75 08             	pushl  0x8(%ebp)
c0100495:	68 fa cc 10 c0       	push   $0xc010ccfa
c010049a:	e8 f8 fd ff ff       	call   c0100297 <cprintf>
c010049f:	83 c4 10             	add    $0x10,%esp
    vcprintf(fmt, ap);
c01004a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01004a5:	83 ec 08             	sub    $0x8,%esp
c01004a8:	50                   	push   %eax
c01004a9:	ff 75 10             	pushl  0x10(%ebp)
c01004ac:	e8 bd fd ff ff       	call   c010026e <vcprintf>
c01004b1:	83 c4 10             	add    $0x10,%esp
    cprintf("\n");
c01004b4:	83 ec 0c             	sub    $0xc,%esp
c01004b7:	68 e6 cc 10 c0       	push   $0xc010cce6
c01004bc:	e8 d6 fd ff ff       	call   c0100297 <cprintf>
c01004c1:	83 c4 10             	add    $0x10,%esp
    va_end(ap);
}
c01004c4:	90                   	nop
c01004c5:	c9                   	leave  
c01004c6:	c3                   	ret    

c01004c7 <is_kernel_panic>:

bool
is_kernel_panic(void) {
c01004c7:	55                   	push   %ebp
c01004c8:	89 e5                	mov    %esp,%ebp
    return is_panic;
c01004ca:	a1 20 44 1c c0       	mov    0xc01c4420,%eax
}
c01004cf:	5d                   	pop    %ebp
c01004d0:	c3                   	ret    

c01004d1 <stab_binsearch>:
 *      stab_binsearch(stabs, &left, &right, N_SO, 0xf0100184);
 * will exit setting left = 118, right = 554.
 * */
static void
stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
           int type, uintptr_t addr) {
c01004d1:	55                   	push   %ebp
c01004d2:	89 e5                	mov    %esp,%ebp
c01004d4:	83 ec 20             	sub    $0x20,%esp
    int l = *region_left, r = *region_right, any_matches = 0;
c01004d7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01004da:	8b 00                	mov    (%eax),%eax
c01004dc:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01004df:	8b 45 10             	mov    0x10(%ebp),%eax
c01004e2:	8b 00                	mov    (%eax),%eax
c01004e4:	89 45 f8             	mov    %eax,-0x8(%ebp)
c01004e7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    while (l <= r) {
c01004ee:	e9 d2 00 00 00       	jmp    c01005c5 <stab_binsearch+0xf4>
        int true_m = (l + r) / 2, m = true_m;
c01004f3:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01004f6:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01004f9:	01 d0                	add    %edx,%eax
c01004fb:	89 c2                	mov    %eax,%edx
c01004fd:	c1 ea 1f             	shr    $0x1f,%edx
c0100500:	01 d0                	add    %edx,%eax
c0100502:	d1 f8                	sar    %eax
c0100504:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0100507:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010050a:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // search for earliest stab with right type
        while (m >= l && stabs[m].n_type != type) {
c010050d:	eb 04                	jmp    c0100513 <stab_binsearch+0x42>
            m --;
c010050f:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)

    while (l <= r) {
        int true_m = (l + r) / 2, m = true_m;

        // search for earliest stab with right type
        while (m >= l && stabs[m].n_type != type) {
c0100513:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100516:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100519:	7c 1f                	jl     c010053a <stab_binsearch+0x69>
c010051b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010051e:	89 d0                	mov    %edx,%eax
c0100520:	01 c0                	add    %eax,%eax
c0100522:	01 d0                	add    %edx,%eax
c0100524:	c1 e0 02             	shl    $0x2,%eax
c0100527:	89 c2                	mov    %eax,%edx
c0100529:	8b 45 08             	mov    0x8(%ebp),%eax
c010052c:	01 d0                	add    %edx,%eax
c010052e:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100532:	0f b6 c0             	movzbl %al,%eax
c0100535:	3b 45 14             	cmp    0x14(%ebp),%eax
c0100538:	75 d5                	jne    c010050f <stab_binsearch+0x3e>
            m --;
        }
        if (m < l) {    // no match in [l, m]
c010053a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010053d:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100540:	7d 0b                	jge    c010054d <stab_binsearch+0x7c>
            l = true_m + 1;
c0100542:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100545:	83 c0 01             	add    $0x1,%eax
c0100548:	89 45 fc             	mov    %eax,-0x4(%ebp)
            continue;
c010054b:	eb 78                	jmp    c01005c5 <stab_binsearch+0xf4>
        }

        // actual binary search
        any_matches = 1;
c010054d:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
        if (stabs[m].n_value < addr) {
c0100554:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100557:	89 d0                	mov    %edx,%eax
c0100559:	01 c0                	add    %eax,%eax
c010055b:	01 d0                	add    %edx,%eax
c010055d:	c1 e0 02             	shl    $0x2,%eax
c0100560:	89 c2                	mov    %eax,%edx
c0100562:	8b 45 08             	mov    0x8(%ebp),%eax
c0100565:	01 d0                	add    %edx,%eax
c0100567:	8b 40 08             	mov    0x8(%eax),%eax
c010056a:	3b 45 18             	cmp    0x18(%ebp),%eax
c010056d:	73 13                	jae    c0100582 <stab_binsearch+0xb1>
            *region_left = m;
c010056f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100572:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100575:	89 10                	mov    %edx,(%eax)
            l = true_m + 1;
c0100577:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010057a:	83 c0 01             	add    $0x1,%eax
c010057d:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0100580:	eb 43                	jmp    c01005c5 <stab_binsearch+0xf4>
        } else if (stabs[m].n_value > addr) {
c0100582:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100585:	89 d0                	mov    %edx,%eax
c0100587:	01 c0                	add    %eax,%eax
c0100589:	01 d0                	add    %edx,%eax
c010058b:	c1 e0 02             	shl    $0x2,%eax
c010058e:	89 c2                	mov    %eax,%edx
c0100590:	8b 45 08             	mov    0x8(%ebp),%eax
c0100593:	01 d0                	add    %edx,%eax
c0100595:	8b 40 08             	mov    0x8(%eax),%eax
c0100598:	3b 45 18             	cmp    0x18(%ebp),%eax
c010059b:	76 16                	jbe    c01005b3 <stab_binsearch+0xe2>
            *region_right = m - 1;
c010059d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01005a0:	8d 50 ff             	lea    -0x1(%eax),%edx
c01005a3:	8b 45 10             	mov    0x10(%ebp),%eax
c01005a6:	89 10                	mov    %edx,(%eax)
            r = m - 1;
c01005a8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01005ab:	83 e8 01             	sub    $0x1,%eax
c01005ae:	89 45 f8             	mov    %eax,-0x8(%ebp)
c01005b1:	eb 12                	jmp    c01005c5 <stab_binsearch+0xf4>
        } else {
            // exact match for 'addr', but continue loop to find
            // *region_right
            *region_left = m;
c01005b3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01005b6:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01005b9:	89 10                	mov    %edx,(%eax)
            l = m;
c01005bb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01005be:	89 45 fc             	mov    %eax,-0x4(%ebp)
            addr ++;
c01005c1:	83 45 18 01          	addl   $0x1,0x18(%ebp)
static void
stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
           int type, uintptr_t addr) {
    int l = *region_left, r = *region_right, any_matches = 0;

    while (l <= r) {
c01005c5:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01005c8:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c01005cb:	0f 8e 22 ff ff ff    	jle    c01004f3 <stab_binsearch+0x22>
            l = m;
            addr ++;
        }
    }

    if (!any_matches) {
c01005d1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01005d5:	75 0f                	jne    c01005e6 <stab_binsearch+0x115>
        *region_right = *region_left - 1;
c01005d7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01005da:	8b 00                	mov    (%eax),%eax
c01005dc:	8d 50 ff             	lea    -0x1(%eax),%edx
c01005df:	8b 45 10             	mov    0x10(%ebp),%eax
c01005e2:	89 10                	mov    %edx,(%eax)
        l = *region_right;
        for (; l > *region_left && stabs[l].n_type != type; l --)
            /* do nothing */;
        *region_left = l;
    }
}
c01005e4:	eb 3f                	jmp    c0100625 <stab_binsearch+0x154>
    if (!any_matches) {
        *region_right = *region_left - 1;
    }
    else {
        // find rightmost region containing 'addr'
        l = *region_right;
c01005e6:	8b 45 10             	mov    0x10(%ebp),%eax
c01005e9:	8b 00                	mov    (%eax),%eax
c01005eb:	89 45 fc             	mov    %eax,-0x4(%ebp)
        for (; l > *region_left && stabs[l].n_type != type; l --)
c01005ee:	eb 04                	jmp    c01005f4 <stab_binsearch+0x123>
c01005f0:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
c01005f4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01005f7:	8b 00                	mov    (%eax),%eax
c01005f9:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c01005fc:	7d 1f                	jge    c010061d <stab_binsearch+0x14c>
c01005fe:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0100601:	89 d0                	mov    %edx,%eax
c0100603:	01 c0                	add    %eax,%eax
c0100605:	01 d0                	add    %edx,%eax
c0100607:	c1 e0 02             	shl    $0x2,%eax
c010060a:	89 c2                	mov    %eax,%edx
c010060c:	8b 45 08             	mov    0x8(%ebp),%eax
c010060f:	01 d0                	add    %edx,%eax
c0100611:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100615:	0f b6 c0             	movzbl %al,%eax
c0100618:	3b 45 14             	cmp    0x14(%ebp),%eax
c010061b:	75 d3                	jne    c01005f0 <stab_binsearch+0x11f>
            /* do nothing */;
        *region_left = l;
c010061d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100620:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0100623:	89 10                	mov    %edx,(%eax)
    }
}
c0100625:	90                   	nop
c0100626:	c9                   	leave  
c0100627:	c3                   	ret    

c0100628 <debuginfo_eip>:
 * the specified instruction address, @addr.  Returns 0 if information
 * was found, and negative if not.  But even if it returns negative it
 * has stored some information into '*info'.
 * */
int
debuginfo_eip(uintptr_t addr, struct eipdebuginfo *info) {
c0100628:	55                   	push   %ebp
c0100629:	89 e5                	mov    %esp,%ebp
c010062b:	83 ec 38             	sub    $0x38,%esp
    const struct stab *stabs, *stab_end;
    const char *stabstr, *stabstr_end;

    info->eip_file = "<unknown>";
c010062e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100631:	c7 00 18 cd 10 c0    	movl   $0xc010cd18,(%eax)
    info->eip_line = 0;
c0100637:	8b 45 0c             	mov    0xc(%ebp),%eax
c010063a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    info->eip_fn_name = "<unknown>";
c0100641:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100644:	c7 40 08 18 cd 10 c0 	movl   $0xc010cd18,0x8(%eax)
    info->eip_fn_namelen = 9;
c010064b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010064e:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
    info->eip_fn_addr = addr;
c0100655:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100658:	8b 55 08             	mov    0x8(%ebp),%edx
c010065b:	89 50 10             	mov    %edx,0x10(%eax)
    info->eip_fn_narg = 0;
c010065e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100661:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

    // find the relevant set of stabs
    if (addr >= KERNBASE) {
c0100668:	81 7d 08 ff ff ff bf 	cmpl   $0xbfffffff,0x8(%ebp)
c010066f:	76 21                	jbe    c0100692 <debuginfo_eip+0x6a>
        stabs = __STAB_BEGIN__;
c0100671:	c7 45 f4 e0 f8 10 c0 	movl   $0xc010f8e0,-0xc(%ebp)
        stab_end = __STAB_END__;
c0100678:	c7 45 f0 08 75 12 c0 	movl   $0xc0127508,-0x10(%ebp)
        stabstr = __STABSTR_BEGIN__;
c010067f:	c7 45 ec 09 75 12 c0 	movl   $0xc0127509,-0x14(%ebp)
        stabstr_end = __STABSTR_END__;
c0100686:	c7 45 e8 ce e4 12 c0 	movl   $0xc012e4ce,-0x18(%ebp)
c010068d:	e9 c3 00 00 00       	jmp    c0100755 <debuginfo_eip+0x12d>
    }
    else {
        // user-program linker script, tools/user.ld puts the information about the
        // program's stabs (included __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__,
        // and __STABSTR_END__) in a structure located at virtual address USTAB.
        const struct userstabdata *usd = (struct userstabdata *)USTAB;
c0100692:	c7 45 e4 00 00 20 00 	movl   $0x200000,-0x1c(%ebp)

        // make sure that debugger (current process) can access this memory
        struct mm_struct *mm;
        if (current == NULL || (mm = current->mm) == NULL) {
c0100699:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010069e:	85 c0                	test   %eax,%eax
c01006a0:	74 11                	je     c01006b3 <debuginfo_eip+0x8b>
c01006a2:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c01006a7:	8b 40 18             	mov    0x18(%eax),%eax
c01006aa:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01006ad:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01006b1:	75 0a                	jne    c01006bd <debuginfo_eip+0x95>
            return -1;
c01006b3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01006b8:	e9 4e 03 00 00       	jmp    c0100a0b <debuginfo_eip+0x3e3>
        }
        if (!user_mem_check(mm, (uintptr_t)usd, sizeof(struct userstabdata), 0)) {
c01006bd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01006c0:	6a 00                	push   $0x0
c01006c2:	6a 10                	push   $0x10
c01006c4:	50                   	push   %eax
c01006c5:	ff 75 e0             	pushl  -0x20(%ebp)
c01006c8:	e8 9e 3e 00 00       	call   c010456b <user_mem_check>
c01006cd:	83 c4 10             	add    $0x10,%esp
c01006d0:	85 c0                	test   %eax,%eax
c01006d2:	75 0a                	jne    c01006de <debuginfo_eip+0xb6>
            return -1;
c01006d4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01006d9:	e9 2d 03 00 00       	jmp    c0100a0b <debuginfo_eip+0x3e3>
        }

        stabs = usd->stabs;
c01006de:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01006e1:	8b 00                	mov    (%eax),%eax
c01006e3:	89 45 f4             	mov    %eax,-0xc(%ebp)
        stab_end = usd->stab_end;
c01006e6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01006e9:	8b 40 04             	mov    0x4(%eax),%eax
c01006ec:	89 45 f0             	mov    %eax,-0x10(%ebp)
        stabstr = usd->stabstr;
c01006ef:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01006f2:	8b 40 08             	mov    0x8(%eax),%eax
c01006f5:	89 45 ec             	mov    %eax,-0x14(%ebp)
        stabstr_end = usd->stabstr_end;
c01006f8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01006fb:	8b 40 0c             	mov    0xc(%eax),%eax
c01006fe:	89 45 e8             	mov    %eax,-0x18(%ebp)

        // make sure the STABS and string table memory is valid
        if (!user_mem_check(mm, (uintptr_t)stabs, (uintptr_t)stab_end - (uintptr_t)stabs, 0)) {
c0100701:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100704:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100707:	29 c2                	sub    %eax,%edx
c0100709:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010070c:	6a 00                	push   $0x0
c010070e:	52                   	push   %edx
c010070f:	50                   	push   %eax
c0100710:	ff 75 e0             	pushl  -0x20(%ebp)
c0100713:	e8 53 3e 00 00       	call   c010456b <user_mem_check>
c0100718:	83 c4 10             	add    $0x10,%esp
c010071b:	85 c0                	test   %eax,%eax
c010071d:	75 0a                	jne    c0100729 <debuginfo_eip+0x101>
            return -1;
c010071f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100724:	e9 e2 02 00 00       	jmp    c0100a0b <debuginfo_eip+0x3e3>
        }
        if (!user_mem_check(mm, (uintptr_t)stabstr, stabstr_end - stabstr, 0)) {
c0100729:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010072c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010072f:	29 c2                	sub    %eax,%edx
c0100731:	89 d0                	mov    %edx,%eax
c0100733:	89 c2                	mov    %eax,%edx
c0100735:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100738:	6a 00                	push   $0x0
c010073a:	52                   	push   %edx
c010073b:	50                   	push   %eax
c010073c:	ff 75 e0             	pushl  -0x20(%ebp)
c010073f:	e8 27 3e 00 00       	call   c010456b <user_mem_check>
c0100744:	83 c4 10             	add    $0x10,%esp
c0100747:	85 c0                	test   %eax,%eax
c0100749:	75 0a                	jne    c0100755 <debuginfo_eip+0x12d>
            return -1;
c010074b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100750:	e9 b6 02 00 00       	jmp    c0100a0b <debuginfo_eip+0x3e3>
        }
    }

    // String table validity checks
    if (stabstr_end <= stabstr || stabstr_end[-1] != 0) {
c0100755:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100758:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010075b:	76 0d                	jbe    c010076a <debuginfo_eip+0x142>
c010075d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100760:	83 e8 01             	sub    $0x1,%eax
c0100763:	0f b6 00             	movzbl (%eax),%eax
c0100766:	84 c0                	test   %al,%al
c0100768:	74 0a                	je     c0100774 <debuginfo_eip+0x14c>
        return -1;
c010076a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010076f:	e9 97 02 00 00       	jmp    c0100a0b <debuginfo_eip+0x3e3>
    // 'eip'.  First, we find the basic source file containing 'eip'.
    // Then, we look in that source file for the function.  Then we look
    // for the line number.

    // Search the entire set of stabs for the source file (type N_SO).
    int lfile = 0, rfile = (stab_end - stabs) - 1;
c0100774:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c010077b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010077e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100781:	29 c2                	sub    %eax,%edx
c0100783:	89 d0                	mov    %edx,%eax
c0100785:	c1 f8 02             	sar    $0x2,%eax
c0100788:	69 c0 ab aa aa aa    	imul   $0xaaaaaaab,%eax,%eax
c010078e:	83 e8 01             	sub    $0x1,%eax
c0100791:	89 45 d8             	mov    %eax,-0x28(%ebp)
    stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
c0100794:	83 ec 0c             	sub    $0xc,%esp
c0100797:	ff 75 08             	pushl  0x8(%ebp)
c010079a:	6a 64                	push   $0x64
c010079c:	8d 45 d8             	lea    -0x28(%ebp),%eax
c010079f:	50                   	push   %eax
c01007a0:	8d 45 dc             	lea    -0x24(%ebp),%eax
c01007a3:	50                   	push   %eax
c01007a4:	ff 75 f4             	pushl  -0xc(%ebp)
c01007a7:	e8 25 fd ff ff       	call   c01004d1 <stab_binsearch>
c01007ac:	83 c4 20             	add    $0x20,%esp
    if (lfile == 0)
c01007af:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01007b2:	85 c0                	test   %eax,%eax
c01007b4:	75 0a                	jne    c01007c0 <debuginfo_eip+0x198>
        return -1;
c01007b6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01007bb:	e9 4b 02 00 00       	jmp    c0100a0b <debuginfo_eip+0x3e3>

    // Search within that file's stabs for the function definition
    // (N_FUN).
    int lfun = lfile, rfun = rfile;
c01007c0:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01007c3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c01007c6:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01007c9:	89 45 d0             	mov    %eax,-0x30(%ebp)
    int lline, rline;
    stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
c01007cc:	83 ec 0c             	sub    $0xc,%esp
c01007cf:	ff 75 08             	pushl  0x8(%ebp)
c01007d2:	6a 24                	push   $0x24
c01007d4:	8d 45 d0             	lea    -0x30(%ebp),%eax
c01007d7:	50                   	push   %eax
c01007d8:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c01007db:	50                   	push   %eax
c01007dc:	ff 75 f4             	pushl  -0xc(%ebp)
c01007df:	e8 ed fc ff ff       	call   c01004d1 <stab_binsearch>
c01007e4:	83 c4 20             	add    $0x20,%esp

    if (lfun <= rfun) {
c01007e7:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01007ea:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01007ed:	39 c2                	cmp    %eax,%edx
c01007ef:	7f 7c                	jg     c010086d <debuginfo_eip+0x245>
        // stabs[lfun] points to the function name
        // in the string table, but check bounds just in case.
        if (stabs[lfun].n_strx < stabstr_end - stabstr) {
c01007f1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01007f4:	89 c2                	mov    %eax,%edx
c01007f6:	89 d0                	mov    %edx,%eax
c01007f8:	01 c0                	add    %eax,%eax
c01007fa:	01 d0                	add    %edx,%eax
c01007fc:	c1 e0 02             	shl    $0x2,%eax
c01007ff:	89 c2                	mov    %eax,%edx
c0100801:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100804:	01 d0                	add    %edx,%eax
c0100806:	8b 00                	mov    (%eax),%eax
c0100808:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c010080b:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010080e:	29 d1                	sub    %edx,%ecx
c0100810:	89 ca                	mov    %ecx,%edx
c0100812:	39 d0                	cmp    %edx,%eax
c0100814:	73 22                	jae    c0100838 <debuginfo_eip+0x210>
            info->eip_fn_name = stabstr + stabs[lfun].n_strx;
c0100816:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100819:	89 c2                	mov    %eax,%edx
c010081b:	89 d0                	mov    %edx,%eax
c010081d:	01 c0                	add    %eax,%eax
c010081f:	01 d0                	add    %edx,%eax
c0100821:	c1 e0 02             	shl    $0x2,%eax
c0100824:	89 c2                	mov    %eax,%edx
c0100826:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100829:	01 d0                	add    %edx,%eax
c010082b:	8b 10                	mov    (%eax),%edx
c010082d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100830:	01 c2                	add    %eax,%edx
c0100832:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100835:	89 50 08             	mov    %edx,0x8(%eax)
        }
        info->eip_fn_addr = stabs[lfun].n_value;
c0100838:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010083b:	89 c2                	mov    %eax,%edx
c010083d:	89 d0                	mov    %edx,%eax
c010083f:	01 c0                	add    %eax,%eax
c0100841:	01 d0                	add    %edx,%eax
c0100843:	c1 e0 02             	shl    $0x2,%eax
c0100846:	89 c2                	mov    %eax,%edx
c0100848:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010084b:	01 d0                	add    %edx,%eax
c010084d:	8b 50 08             	mov    0x8(%eax),%edx
c0100850:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100853:	89 50 10             	mov    %edx,0x10(%eax)
        addr -= info->eip_fn_addr;
c0100856:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100859:	8b 40 10             	mov    0x10(%eax),%eax
c010085c:	29 45 08             	sub    %eax,0x8(%ebp)
        // Search within the function definition for the line number.
        lline = lfun;
c010085f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100862:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfun;
c0100865:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0100868:	89 45 c8             	mov    %eax,-0x38(%ebp)
c010086b:	eb 15                	jmp    c0100882 <debuginfo_eip+0x25a>
    } else {
        // Couldn't find function stab!  Maybe we're in an assembly
        // file.  Search the whole file for the line number.
        info->eip_fn_addr = addr;
c010086d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100870:	8b 55 08             	mov    0x8(%ebp),%edx
c0100873:	89 50 10             	mov    %edx,0x10(%eax)
        lline = lfile;
c0100876:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100879:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfile;
c010087c:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010087f:	89 45 c8             	mov    %eax,-0x38(%ebp)
    }
    info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
c0100882:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100885:	8b 40 08             	mov    0x8(%eax),%eax
c0100888:	83 ec 08             	sub    $0x8,%esp
c010088b:	6a 3a                	push   $0x3a
c010088d:	50                   	push   %eax
c010088e:	e8 6d b9 00 00       	call   c010c200 <strfind>
c0100893:	83 c4 10             	add    $0x10,%esp
c0100896:	89 c2                	mov    %eax,%edx
c0100898:	8b 45 0c             	mov    0xc(%ebp),%eax
c010089b:	8b 40 08             	mov    0x8(%eax),%eax
c010089e:	29 c2                	sub    %eax,%edx
c01008a0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01008a3:	89 50 0c             	mov    %edx,0xc(%eax)

    // Search within [lline, rline] for the line number stab.
    // If found, set info->eip_line to the right line number.
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
c01008a6:	83 ec 0c             	sub    $0xc,%esp
c01008a9:	ff 75 08             	pushl  0x8(%ebp)
c01008ac:	6a 44                	push   $0x44
c01008ae:	8d 45 c8             	lea    -0x38(%ebp),%eax
c01008b1:	50                   	push   %eax
c01008b2:	8d 45 cc             	lea    -0x34(%ebp),%eax
c01008b5:	50                   	push   %eax
c01008b6:	ff 75 f4             	pushl  -0xc(%ebp)
c01008b9:	e8 13 fc ff ff       	call   c01004d1 <stab_binsearch>
c01008be:	83 c4 20             	add    $0x20,%esp
    if (lline <= rline) {
c01008c1:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01008c4:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01008c7:	39 c2                	cmp    %eax,%edx
c01008c9:	7f 24                	jg     c01008ef <debuginfo_eip+0x2c7>
        info->eip_line = stabs[rline].n_desc;
c01008cb:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01008ce:	89 c2                	mov    %eax,%edx
c01008d0:	89 d0                	mov    %edx,%eax
c01008d2:	01 c0                	add    %eax,%eax
c01008d4:	01 d0                	add    %edx,%eax
c01008d6:	c1 e0 02             	shl    $0x2,%eax
c01008d9:	89 c2                	mov    %eax,%edx
c01008db:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01008de:	01 d0                	add    %edx,%eax
c01008e0:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c01008e4:	0f b7 d0             	movzwl %ax,%edx
c01008e7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01008ea:	89 50 04             	mov    %edx,0x4(%eax)

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c01008ed:	eb 13                	jmp    c0100902 <debuginfo_eip+0x2da>
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
    if (lline <= rline) {
        info->eip_line = stabs[rline].n_desc;
    } else {
        return -1;
c01008ef:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01008f4:	e9 12 01 00 00       	jmp    c0100a0b <debuginfo_eip+0x3e3>
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
           && stabs[lline].n_type != N_SOL
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
        lline --;
c01008f9:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01008fc:	83 e8 01             	sub    $0x1,%eax
c01008ff:	89 45 cc             	mov    %eax,-0x34(%ebp)

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c0100902:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0100905:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100908:	39 c2                	cmp    %eax,%edx
c010090a:	7c 56                	jl     c0100962 <debuginfo_eip+0x33a>
           && stabs[lline].n_type != N_SOL
c010090c:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010090f:	89 c2                	mov    %eax,%edx
c0100911:	89 d0                	mov    %edx,%eax
c0100913:	01 c0                	add    %eax,%eax
c0100915:	01 d0                	add    %edx,%eax
c0100917:	c1 e0 02             	shl    $0x2,%eax
c010091a:	89 c2                	mov    %eax,%edx
c010091c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010091f:	01 d0                	add    %edx,%eax
c0100921:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100925:	3c 84                	cmp    $0x84,%al
c0100927:	74 39                	je     c0100962 <debuginfo_eip+0x33a>
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
c0100929:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010092c:	89 c2                	mov    %eax,%edx
c010092e:	89 d0                	mov    %edx,%eax
c0100930:	01 c0                	add    %eax,%eax
c0100932:	01 d0                	add    %edx,%eax
c0100934:	c1 e0 02             	shl    $0x2,%eax
c0100937:	89 c2                	mov    %eax,%edx
c0100939:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010093c:	01 d0                	add    %edx,%eax
c010093e:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100942:	3c 64                	cmp    $0x64,%al
c0100944:	75 b3                	jne    c01008f9 <debuginfo_eip+0x2d1>
c0100946:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100949:	89 c2                	mov    %eax,%edx
c010094b:	89 d0                	mov    %edx,%eax
c010094d:	01 c0                	add    %eax,%eax
c010094f:	01 d0                	add    %edx,%eax
c0100951:	c1 e0 02             	shl    $0x2,%eax
c0100954:	89 c2                	mov    %eax,%edx
c0100956:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100959:	01 d0                	add    %edx,%eax
c010095b:	8b 40 08             	mov    0x8(%eax),%eax
c010095e:	85 c0                	test   %eax,%eax
c0100960:	74 97                	je     c01008f9 <debuginfo_eip+0x2d1>
        lline --;
    }
    if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr) {
c0100962:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0100965:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100968:	39 c2                	cmp    %eax,%edx
c010096a:	7c 46                	jl     c01009b2 <debuginfo_eip+0x38a>
c010096c:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010096f:	89 c2                	mov    %eax,%edx
c0100971:	89 d0                	mov    %edx,%eax
c0100973:	01 c0                	add    %eax,%eax
c0100975:	01 d0                	add    %edx,%eax
c0100977:	c1 e0 02             	shl    $0x2,%eax
c010097a:	89 c2                	mov    %eax,%edx
c010097c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010097f:	01 d0                	add    %edx,%eax
c0100981:	8b 00                	mov    (%eax),%eax
c0100983:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c0100986:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0100989:	29 d1                	sub    %edx,%ecx
c010098b:	89 ca                	mov    %ecx,%edx
c010098d:	39 d0                	cmp    %edx,%eax
c010098f:	73 21                	jae    c01009b2 <debuginfo_eip+0x38a>
        info->eip_file = stabstr + stabs[lline].n_strx;
c0100991:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100994:	89 c2                	mov    %eax,%edx
c0100996:	89 d0                	mov    %edx,%eax
c0100998:	01 c0                	add    %eax,%eax
c010099a:	01 d0                	add    %edx,%eax
c010099c:	c1 e0 02             	shl    $0x2,%eax
c010099f:	89 c2                	mov    %eax,%edx
c01009a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01009a4:	01 d0                	add    %edx,%eax
c01009a6:	8b 10                	mov    (%eax),%edx
c01009a8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01009ab:	01 c2                	add    %eax,%edx
c01009ad:	8b 45 0c             	mov    0xc(%ebp),%eax
c01009b0:	89 10                	mov    %edx,(%eax)
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
c01009b2:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01009b5:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01009b8:	39 c2                	cmp    %eax,%edx
c01009ba:	7d 4a                	jge    c0100a06 <debuginfo_eip+0x3de>
        for (lline = lfun + 1;
c01009bc:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01009bf:	83 c0 01             	add    $0x1,%eax
c01009c2:	89 45 cc             	mov    %eax,-0x34(%ebp)
c01009c5:	eb 18                	jmp    c01009df <debuginfo_eip+0x3b7>
             lline < rfun && stabs[lline].n_type == N_PSYM;
             lline ++) {
            info->eip_fn_narg ++;
c01009c7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01009ca:	8b 40 14             	mov    0x14(%eax),%eax
c01009cd:	8d 50 01             	lea    0x1(%eax),%edx
c01009d0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01009d3:	89 50 14             	mov    %edx,0x14(%eax)
    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
             lline < rfun && stabs[lline].n_type == N_PSYM;
             lline ++) {
c01009d6:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01009d9:	83 c0 01             	add    $0x1,%eax
c01009dc:	89 45 cc             	mov    %eax,-0x34(%ebp)

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
             lline < rfun && stabs[lline].n_type == N_PSYM;
c01009df:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01009e2:	8b 45 d0             	mov    -0x30(%ebp),%eax
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
c01009e5:	39 c2                	cmp    %eax,%edx
c01009e7:	7d 1d                	jge    c0100a06 <debuginfo_eip+0x3de>
             lline < rfun && stabs[lline].n_type == N_PSYM;
c01009e9:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01009ec:	89 c2                	mov    %eax,%edx
c01009ee:	89 d0                	mov    %edx,%eax
c01009f0:	01 c0                	add    %eax,%eax
c01009f2:	01 d0                	add    %edx,%eax
c01009f4:	c1 e0 02             	shl    $0x2,%eax
c01009f7:	89 c2                	mov    %eax,%edx
c01009f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01009fc:	01 d0                	add    %edx,%eax
c01009fe:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100a02:	3c a0                	cmp    $0xa0,%al
c0100a04:	74 c1                	je     c01009c7 <debuginfo_eip+0x39f>
             lline ++) {
            info->eip_fn_narg ++;
        }
    }
    return 0;
c0100a06:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100a0b:	c9                   	leave  
c0100a0c:	c3                   	ret    

c0100a0d <print_kerninfo>:
 * print_kerninfo - print the information about kernel, including the location
 * of kernel entry, the start addresses of data and text segements, the start
 * address of free memory and how many memory that kernel has used.
 * */
void
print_kerninfo(void) {
c0100a0d:	55                   	push   %ebp
c0100a0e:	89 e5                	mov    %esp,%ebp
c0100a10:	83 ec 08             	sub    $0x8,%esp
    extern char etext[], edata[], end[], kern_init[];
    cprintf("Special kernel symbols:\n");
c0100a13:	83 ec 0c             	sub    $0xc,%esp
c0100a16:	68 22 cd 10 c0       	push   $0xc010cd22
c0100a1b:	e8 77 f8 ff ff       	call   c0100297 <cprintf>
c0100a20:	83 c4 10             	add    $0x10,%esp
    cprintf("  entry  0x%08x (phys)\n", kern_init);
c0100a23:	83 ec 08             	sub    $0x8,%esp
c0100a26:	68 36 00 10 c0       	push   $0xc0100036
c0100a2b:	68 3b cd 10 c0       	push   $0xc010cd3b
c0100a30:	e8 62 f8 ff ff       	call   c0100297 <cprintf>
c0100a35:	83 c4 10             	add    $0x10,%esp
    cprintf("  etext  0x%08x (phys)\n", etext);
c0100a38:	83 ec 08             	sub    $0x8,%esp
c0100a3b:	68 20 cc 10 c0       	push   $0xc010cc20
c0100a40:	68 53 cd 10 c0       	push   $0xc010cd53
c0100a45:	e8 4d f8 ff ff       	call   c0100297 <cprintf>
c0100a4a:	83 c4 10             	add    $0x10,%esp
    cprintf("  edata  0x%08x (phys)\n", edata);
c0100a4d:	83 ec 08             	sub    $0x8,%esp
c0100a50:	68 00 40 1c c0       	push   $0xc01c4000
c0100a55:	68 6b cd 10 c0       	push   $0xc010cd6b
c0100a5a:	e8 38 f8 ff ff       	call   c0100297 <cprintf>
c0100a5f:	83 c4 10             	add    $0x10,%esp
    cprintf("  end    0x%08x (phys)\n", end);
c0100a62:	83 ec 08             	sub    $0x8,%esp
c0100a65:	68 e4 72 1c c0       	push   $0xc01c72e4
c0100a6a:	68 83 cd 10 c0       	push   $0xc010cd83
c0100a6f:	e8 23 f8 ff ff       	call   c0100297 <cprintf>
c0100a74:	83 c4 10             	add    $0x10,%esp
    cprintf("Kernel executable memory footprint: %dKB\n", (end - kern_init + 1023)/1024);
c0100a77:	b8 e4 72 1c c0       	mov    $0xc01c72e4,%eax
c0100a7c:	05 ff 03 00 00       	add    $0x3ff,%eax
c0100a81:	ba 36 00 10 c0       	mov    $0xc0100036,%edx
c0100a86:	29 d0                	sub    %edx,%eax
c0100a88:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
c0100a8e:	85 c0                	test   %eax,%eax
c0100a90:	0f 48 c2             	cmovs  %edx,%eax
c0100a93:	c1 f8 0a             	sar    $0xa,%eax
c0100a96:	83 ec 08             	sub    $0x8,%esp
c0100a99:	50                   	push   %eax
c0100a9a:	68 9c cd 10 c0       	push   $0xc010cd9c
c0100a9f:	e8 f3 f7 ff ff       	call   c0100297 <cprintf>
c0100aa4:	83 c4 10             	add    $0x10,%esp
}
c0100aa7:	90                   	nop
c0100aa8:	c9                   	leave  
c0100aa9:	c3                   	ret    

c0100aaa <print_debuginfo>:
/* *
 * print_debuginfo - read and print the stat information for the address @eip,
 * and info.eip_fn_addr should be the first address of the related function.
 * */
void
print_debuginfo(uintptr_t eip) {
c0100aaa:	55                   	push   %ebp
c0100aab:	89 e5                	mov    %esp,%ebp
c0100aad:	81 ec 28 01 00 00    	sub    $0x128,%esp
    struct eipdebuginfo info;
    if (debuginfo_eip(eip, &info) != 0) {
c0100ab3:	83 ec 08             	sub    $0x8,%esp
c0100ab6:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0100ab9:	50                   	push   %eax
c0100aba:	ff 75 08             	pushl  0x8(%ebp)
c0100abd:	e8 66 fb ff ff       	call   c0100628 <debuginfo_eip>
c0100ac2:	83 c4 10             	add    $0x10,%esp
c0100ac5:	85 c0                	test   %eax,%eax
c0100ac7:	74 15                	je     c0100ade <print_debuginfo+0x34>
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
c0100ac9:	83 ec 08             	sub    $0x8,%esp
c0100acc:	ff 75 08             	pushl  0x8(%ebp)
c0100acf:	68 c6 cd 10 c0       	push   $0xc010cdc6
c0100ad4:	e8 be f7 ff ff       	call   c0100297 <cprintf>
c0100ad9:	83 c4 10             	add    $0x10,%esp
        }
        fnname[j] = '\0';
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
                fnname, eip - info.eip_fn_addr);
    }
}
c0100adc:	eb 65                	jmp    c0100b43 <print_debuginfo+0x99>
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
    }
    else {
        char fnname[256];
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0100ade:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100ae5:	eb 1c                	jmp    c0100b03 <print_debuginfo+0x59>
            fnname[j] = info.eip_fn_name[j];
c0100ae7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0100aea:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100aed:	01 d0                	add    %edx,%eax
c0100aef:	0f b6 00             	movzbl (%eax),%eax
c0100af2:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
c0100af8:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100afb:	01 ca                	add    %ecx,%edx
c0100afd:	88 02                	mov    %al,(%edx)
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
    }
    else {
        char fnname[256];
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0100aff:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100b03:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100b06:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0100b09:	7f dc                	jg     c0100ae7 <print_debuginfo+0x3d>
            fnname[j] = info.eip_fn_name[j];
        }
        fnname[j] = '\0';
c0100b0b:	8d 95 dc fe ff ff    	lea    -0x124(%ebp),%edx
c0100b11:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b14:	01 d0                	add    %edx,%eax
c0100b16:	c6 00 00             	movb   $0x0,(%eax)
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
                fnname, eip - info.eip_fn_addr);
c0100b19:	8b 45 ec             	mov    -0x14(%ebp),%eax
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
            fnname[j] = info.eip_fn_name[j];
        }
        fnname[j] = '\0';
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
c0100b1c:	8b 55 08             	mov    0x8(%ebp),%edx
c0100b1f:	89 d1                	mov    %edx,%ecx
c0100b21:	29 c1                	sub    %eax,%ecx
c0100b23:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0100b26:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100b29:	83 ec 0c             	sub    $0xc,%esp
c0100b2c:	51                   	push   %ecx
c0100b2d:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
c0100b33:	51                   	push   %ecx
c0100b34:	52                   	push   %edx
c0100b35:	50                   	push   %eax
c0100b36:	68 e2 cd 10 c0       	push   $0xc010cde2
c0100b3b:	e8 57 f7 ff ff       	call   c0100297 <cprintf>
c0100b40:	83 c4 20             	add    $0x20,%esp
                fnname, eip - info.eip_fn_addr);
    }
}
c0100b43:	90                   	nop
c0100b44:	c9                   	leave  
c0100b45:	c3                   	ret    

c0100b46 <read_eip>:

static __noinline uint32_t
read_eip(void) {
c0100b46:	55                   	push   %ebp
c0100b47:	89 e5                	mov    %esp,%ebp
c0100b49:	83 ec 10             	sub    $0x10,%esp
    uint32_t eip;
    asm volatile("movl 4(%%ebp), %0" : "=r" (eip));
c0100b4c:	8b 45 04             	mov    0x4(%ebp),%eax
c0100b4f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eip;
c0100b52:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0100b55:	c9                   	leave  
c0100b56:	c3                   	ret    

c0100b57 <print_stackframe>:
 *
 * Note that, the length of ebp-chain is limited. In boot/bootasm.S, before jumping
 * to the kernel entry, the value of ebp has been set to zero, that's the boundary.
 * */
void
print_stackframe(void) {
c0100b57:	55                   	push   %ebp
c0100b58:	89 e5                	mov    %esp,%ebp
c0100b5a:	53                   	push   %ebx
c0100b5b:	83 ec 34             	sub    $0x34,%esp
}

static inline uint32_t
read_ebp(void) {
    uint32_t ebp;
    asm volatile ("movl %%ebp, %0" : "=r" (ebp));
c0100b5e:	89 e8                	mov    %ebp,%eax
c0100b60:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return ebp;
c0100b63:	8b 45 e4             	mov    -0x1c(%ebp),%eax
      *    (3.5) popup a calling stackframe
      *           NOTICE: the calling funciton's return addr eip  = ss:[ebp+4]
      *                   the calling funciton's ebp = ss:[ebp]
      */
    // 1. read_ebp
    uint32_t stack_val_ebp = read_ebp();
c0100b66:	89 45 f4             	mov    %eax,-0xc(%ebp)
    // 2. read_eip
    uint32_t stack_val_eip = read_eip();
c0100b69:	e8 d8 ff ff ff       	call   c0100b46 <read_eip>
c0100b6e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    // 3. iterate stacks
    uint32_t stack_val_args[4];
    for (int i = 0; i < STACKFRAME_DEPTH; i++) {
c0100b71:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0100b78:	e9 93 00 00 00       	jmp    c0100c10 <print_stackframe+0xb9>
        cprintf("ebp:0x%08x eip:0x%08x ", stack_val_ebp, stack_val_eip);
c0100b7d:	83 ec 04             	sub    $0x4,%esp
c0100b80:	ff 75 f0             	pushl  -0x10(%ebp)
c0100b83:	ff 75 f4             	pushl  -0xc(%ebp)
c0100b86:	68 f4 cd 10 c0       	push   $0xc010cdf4
c0100b8b:	e8 07 f7 ff ff       	call   c0100297 <cprintf>
c0100b90:	83 c4 10             	add    $0x10,%esp
        // get args
        for (int j = 0; j < 4; j++) {
c0100b93:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c0100b9a:	eb 1f                	jmp    c0100bbb <print_stackframe+0x64>
            stack_val_args[j] = *(((uint32_t*) stack_val_ebp) + 2 + j);
c0100b9c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100b9f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0100ba6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100ba9:	01 d0                	add    %edx,%eax
c0100bab:	83 c0 08             	add    $0x8,%eax
c0100bae:	8b 10                	mov    (%eax),%edx
c0100bb0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100bb3:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
    // 3. iterate stacks
    uint32_t stack_val_args[4];
    for (int i = 0; i < STACKFRAME_DEPTH; i++) {
        cprintf("ebp:0x%08x eip:0x%08x ", stack_val_ebp, stack_val_eip);
        // get args
        for (int j = 0; j < 4; j++) {
c0100bb7:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
c0100bbb:	83 7d e8 03          	cmpl   $0x3,-0x18(%ebp)
c0100bbf:	7e db                	jle    c0100b9c <print_stackframe+0x45>
            stack_val_args[j] = *(((uint32_t*) stack_val_ebp) + 2 + j);
        }
        cprintf("args:0x%08x 0x%08x 0x%08x 0x%08x\n", stack_val_args[0], 
c0100bc1:	8b 5d e0             	mov    -0x20(%ebp),%ebx
c0100bc4:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0100bc7:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0100bca:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100bcd:	83 ec 0c             	sub    $0xc,%esp
c0100bd0:	53                   	push   %ebx
c0100bd1:	51                   	push   %ecx
c0100bd2:	52                   	push   %edx
c0100bd3:	50                   	push   %eax
c0100bd4:	68 0c ce 10 c0       	push   $0xc010ce0c
c0100bd9:	e8 b9 f6 ff ff       	call   c0100297 <cprintf>
c0100bde:	83 c4 20             	add    $0x20,%esp
                stack_val_args[1], stack_val_args[2], stack_val_args[3]);
        // print function info
        print_debuginfo(stack_val_eip - 1);
c0100be1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100be4:	83 e8 01             	sub    $0x1,%eax
c0100be7:	83 ec 0c             	sub    $0xc,%esp
c0100bea:	50                   	push   %eax
c0100beb:	e8 ba fe ff ff       	call   c0100aaa <print_debuginfo>
c0100bf0:	83 c4 10             	add    $0x10,%esp
        // pop up stackframe, refresh ebp & eip
        stack_val_eip = *(((uint32_t*) stack_val_ebp) + 1);
c0100bf3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100bf6:	83 c0 04             	add    $0x4,%eax
c0100bf9:	8b 00                	mov    (%eax),%eax
c0100bfb:	89 45 f0             	mov    %eax,-0x10(%ebp)
        stack_val_ebp = *(((uint32_t*) stack_val_ebp));
c0100bfe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100c01:	8b 00                	mov    (%eax),%eax
c0100c03:	89 45 f4             	mov    %eax,-0xc(%ebp)
        // ebp should be valid
        if (stack_val_ebp <= 0) {
c0100c06:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100c0a:	74 10                	je     c0100c1c <print_stackframe+0xc5>
    uint32_t stack_val_ebp = read_ebp();
    // 2. read_eip
    uint32_t stack_val_eip = read_eip();
    // 3. iterate stacks
    uint32_t stack_val_args[4];
    for (int i = 0; i < STACKFRAME_DEPTH; i++) {
c0100c0c:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0100c10:	83 7d ec 13          	cmpl   $0x13,-0x14(%ebp)
c0100c14:	0f 8e 63 ff ff ff    	jle    c0100b7d <print_stackframe+0x26>
        // ebp should be valid
        if (stack_val_ebp <= 0) {
            break;
        }
    }
}
c0100c1a:	eb 01                	jmp    c0100c1d <print_stackframe+0xc6>
        // pop up stackframe, refresh ebp & eip
        stack_val_eip = *(((uint32_t*) stack_val_ebp) + 1);
        stack_val_ebp = *(((uint32_t*) stack_val_ebp));
        // ebp should be valid
        if (stack_val_ebp <= 0) {
            break;
c0100c1c:	90                   	nop
        }
    }
}
c0100c1d:	90                   	nop
c0100c1e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0100c21:	c9                   	leave  
c0100c22:	c3                   	ret    

c0100c23 <parse>:
#define MAXARGS         16
#define WHITESPACE      " \t\n\r"

/* parse - parse the command buffer into whitespace-separated arguments */
static int
parse(char *buf, char **argv) {
c0100c23:	55                   	push   %ebp
c0100c24:	89 e5                	mov    %esp,%ebp
c0100c26:	83 ec 18             	sub    $0x18,%esp
    int argc = 0;
c0100c29:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100c30:	eb 0c                	jmp    c0100c3e <parse+0x1b>
            *buf ++ = '\0';
c0100c32:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c35:	8d 50 01             	lea    0x1(%eax),%edx
c0100c38:	89 55 08             	mov    %edx,0x8(%ebp)
c0100c3b:	c6 00 00             	movb   $0x0,(%eax)
static int
parse(char *buf, char **argv) {
    int argc = 0;
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100c3e:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c41:	0f b6 00             	movzbl (%eax),%eax
c0100c44:	84 c0                	test   %al,%al
c0100c46:	74 1e                	je     c0100c66 <parse+0x43>
c0100c48:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c4b:	0f b6 00             	movzbl (%eax),%eax
c0100c4e:	0f be c0             	movsbl %al,%eax
c0100c51:	83 ec 08             	sub    $0x8,%esp
c0100c54:	50                   	push   %eax
c0100c55:	68 b0 ce 10 c0       	push   $0xc010ceb0
c0100c5a:	e8 6e b5 00 00       	call   c010c1cd <strchr>
c0100c5f:	83 c4 10             	add    $0x10,%esp
c0100c62:	85 c0                	test   %eax,%eax
c0100c64:	75 cc                	jne    c0100c32 <parse+0xf>
            *buf ++ = '\0';
        }
        if (*buf == '\0') {
c0100c66:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c69:	0f b6 00             	movzbl (%eax),%eax
c0100c6c:	84 c0                	test   %al,%al
c0100c6e:	74 69                	je     c0100cd9 <parse+0xb6>
            break;
        }

        // save and scan past next arg
        if (argc == MAXARGS - 1) {
c0100c70:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
c0100c74:	75 12                	jne    c0100c88 <parse+0x65>
            cprintf("Too many arguments (max %d).\n", MAXARGS);
c0100c76:	83 ec 08             	sub    $0x8,%esp
c0100c79:	6a 10                	push   $0x10
c0100c7b:	68 b5 ce 10 c0       	push   $0xc010ceb5
c0100c80:	e8 12 f6 ff ff       	call   c0100297 <cprintf>
c0100c85:	83 c4 10             	add    $0x10,%esp
        }
        argv[argc ++] = buf;
c0100c88:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100c8b:	8d 50 01             	lea    0x1(%eax),%edx
c0100c8e:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0100c91:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0100c98:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100c9b:	01 c2                	add    %eax,%edx
c0100c9d:	8b 45 08             	mov    0x8(%ebp),%eax
c0100ca0:	89 02                	mov    %eax,(%edx)
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c0100ca2:	eb 04                	jmp    c0100ca8 <parse+0x85>
            buf ++;
c0100ca4:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        // save and scan past next arg
        if (argc == MAXARGS - 1) {
            cprintf("Too many arguments (max %d).\n", MAXARGS);
        }
        argv[argc ++] = buf;
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c0100ca8:	8b 45 08             	mov    0x8(%ebp),%eax
c0100cab:	0f b6 00             	movzbl (%eax),%eax
c0100cae:	84 c0                	test   %al,%al
c0100cb0:	0f 84 7a ff ff ff    	je     c0100c30 <parse+0xd>
c0100cb6:	8b 45 08             	mov    0x8(%ebp),%eax
c0100cb9:	0f b6 00             	movzbl (%eax),%eax
c0100cbc:	0f be c0             	movsbl %al,%eax
c0100cbf:	83 ec 08             	sub    $0x8,%esp
c0100cc2:	50                   	push   %eax
c0100cc3:	68 b0 ce 10 c0       	push   $0xc010ceb0
c0100cc8:	e8 00 b5 00 00       	call   c010c1cd <strchr>
c0100ccd:	83 c4 10             	add    $0x10,%esp
c0100cd0:	85 c0                	test   %eax,%eax
c0100cd2:	74 d0                	je     c0100ca4 <parse+0x81>
            buf ++;
        }
    }
c0100cd4:	e9 57 ff ff ff       	jmp    c0100c30 <parse+0xd>
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
            *buf ++ = '\0';
        }
        if (*buf == '\0') {
            break;
c0100cd9:	90                   	nop
        argv[argc ++] = buf;
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
            buf ++;
        }
    }
    return argc;
c0100cda:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100cdd:	c9                   	leave  
c0100cde:	c3                   	ret    

c0100cdf <runcmd>:
/* *
 * runcmd - parse the input string, split it into separated arguments
 * and then lookup and invoke some related commands/
 * */
static int
runcmd(char *buf, struct trapframe *tf) {
c0100cdf:	55                   	push   %ebp
c0100ce0:	89 e5                	mov    %esp,%ebp
c0100ce2:	83 ec 58             	sub    $0x58,%esp
    char *argv[MAXARGS];
    int argc = parse(buf, argv);
c0100ce5:	83 ec 08             	sub    $0x8,%esp
c0100ce8:	8d 45 b0             	lea    -0x50(%ebp),%eax
c0100ceb:	50                   	push   %eax
c0100cec:	ff 75 08             	pushl  0x8(%ebp)
c0100cef:	e8 2f ff ff ff       	call   c0100c23 <parse>
c0100cf4:	83 c4 10             	add    $0x10,%esp
c0100cf7:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (argc == 0) {
c0100cfa:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0100cfe:	75 0a                	jne    c0100d0a <runcmd+0x2b>
        return 0;
c0100d00:	b8 00 00 00 00       	mov    $0x0,%eax
c0100d05:	e9 83 00 00 00       	jmp    c0100d8d <runcmd+0xae>
    }
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100d0a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100d11:	eb 59                	jmp    c0100d6c <runcmd+0x8d>
        if (strcmp(commands[i].name, argv[0]) == 0) {
c0100d13:	8b 4d b0             	mov    -0x50(%ebp),%ecx
c0100d16:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100d19:	89 d0                	mov    %edx,%eax
c0100d1b:	01 c0                	add    %eax,%eax
c0100d1d:	01 d0                	add    %edx,%eax
c0100d1f:	c1 e0 02             	shl    $0x2,%eax
c0100d22:	05 00 10 13 c0       	add    $0xc0131000,%eax
c0100d27:	8b 00                	mov    (%eax),%eax
c0100d29:	83 ec 08             	sub    $0x8,%esp
c0100d2c:	51                   	push   %ecx
c0100d2d:	50                   	push   %eax
c0100d2e:	e8 fa b3 00 00       	call   c010c12d <strcmp>
c0100d33:	83 c4 10             	add    $0x10,%esp
c0100d36:	85 c0                	test   %eax,%eax
c0100d38:	75 2e                	jne    c0100d68 <runcmd+0x89>
            return commands[i].func(argc - 1, argv + 1, tf);
c0100d3a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100d3d:	89 d0                	mov    %edx,%eax
c0100d3f:	01 c0                	add    %eax,%eax
c0100d41:	01 d0                	add    %edx,%eax
c0100d43:	c1 e0 02             	shl    $0x2,%eax
c0100d46:	05 08 10 13 c0       	add    $0xc0131008,%eax
c0100d4b:	8b 10                	mov    (%eax),%edx
c0100d4d:	8d 45 b0             	lea    -0x50(%ebp),%eax
c0100d50:	83 c0 04             	add    $0x4,%eax
c0100d53:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c0100d56:	83 e9 01             	sub    $0x1,%ecx
c0100d59:	83 ec 04             	sub    $0x4,%esp
c0100d5c:	ff 75 0c             	pushl  0xc(%ebp)
c0100d5f:	50                   	push   %eax
c0100d60:	51                   	push   %ecx
c0100d61:	ff d2                	call   *%edx
c0100d63:	83 c4 10             	add    $0x10,%esp
c0100d66:	eb 25                	jmp    c0100d8d <runcmd+0xae>
    int argc = parse(buf, argv);
    if (argc == 0) {
        return 0;
    }
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100d68:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100d6c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100d6f:	83 f8 02             	cmp    $0x2,%eax
c0100d72:	76 9f                	jbe    c0100d13 <runcmd+0x34>
        if (strcmp(commands[i].name, argv[0]) == 0) {
            return commands[i].func(argc - 1, argv + 1, tf);
        }
    }
    cprintf("Unknown command '%s'\n", argv[0]);
c0100d74:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0100d77:	83 ec 08             	sub    $0x8,%esp
c0100d7a:	50                   	push   %eax
c0100d7b:	68 d3 ce 10 c0       	push   $0xc010ced3
c0100d80:	e8 12 f5 ff ff       	call   c0100297 <cprintf>
c0100d85:	83 c4 10             	add    $0x10,%esp
    return 0;
c0100d88:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100d8d:	c9                   	leave  
c0100d8e:	c3                   	ret    

c0100d8f <kmonitor>:

/***** Implementations of basic kernel monitor commands *****/

void
kmonitor(struct trapframe *tf) {
c0100d8f:	55                   	push   %ebp
c0100d90:	89 e5                	mov    %esp,%ebp
c0100d92:	83 ec 18             	sub    $0x18,%esp
    cprintf("Welcome to the kernel debug monitor!!\n");
c0100d95:	83 ec 0c             	sub    $0xc,%esp
c0100d98:	68 ec ce 10 c0       	push   $0xc010ceec
c0100d9d:	e8 f5 f4 ff ff       	call   c0100297 <cprintf>
c0100da2:	83 c4 10             	add    $0x10,%esp
    cprintf("Type 'help' for a list of commands.\n");
c0100da5:	83 ec 0c             	sub    $0xc,%esp
c0100da8:	68 14 cf 10 c0       	push   $0xc010cf14
c0100dad:	e8 e5 f4 ff ff       	call   c0100297 <cprintf>
c0100db2:	83 c4 10             	add    $0x10,%esp

    if (tf != NULL) {
c0100db5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0100db9:	74 0e                	je     c0100dc9 <kmonitor+0x3a>
        print_trapframe(tf);
c0100dbb:	83 ec 0c             	sub    $0xc,%esp
c0100dbe:	ff 75 08             	pushl  0x8(%ebp)
c0100dc1:	e8 4c 16 00 00       	call   c0102412 <print_trapframe>
c0100dc6:	83 c4 10             	add    $0x10,%esp
    }

    char *buf;
    while (1) {
        if ((buf = readline("K> ")) != NULL) {
c0100dc9:	83 ec 0c             	sub    $0xc,%esp
c0100dcc:	68 39 cf 10 c0       	push   $0xc010cf39
c0100dd1:	e8 65 f5 ff ff       	call   c010033b <readline>
c0100dd6:	83 c4 10             	add    $0x10,%esp
c0100dd9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100ddc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100de0:	74 e7                	je     c0100dc9 <kmonitor+0x3a>
            if (runcmd(buf, tf) < 0) {
c0100de2:	83 ec 08             	sub    $0x8,%esp
c0100de5:	ff 75 08             	pushl  0x8(%ebp)
c0100de8:	ff 75 f4             	pushl  -0xc(%ebp)
c0100deb:	e8 ef fe ff ff       	call   c0100cdf <runcmd>
c0100df0:	83 c4 10             	add    $0x10,%esp
c0100df3:	85 c0                	test   %eax,%eax
c0100df5:	78 02                	js     c0100df9 <kmonitor+0x6a>
                break;
            }
        }
    }
c0100df7:	eb d0                	jmp    c0100dc9 <kmonitor+0x3a>

    char *buf;
    while (1) {
        if ((buf = readline("K> ")) != NULL) {
            if (runcmd(buf, tf) < 0) {
                break;
c0100df9:	90                   	nop
            }
        }
    }
}
c0100dfa:	90                   	nop
c0100dfb:	c9                   	leave  
c0100dfc:	c3                   	ret    

c0100dfd <mon_help>:

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
c0100dfd:	55                   	push   %ebp
c0100dfe:	89 e5                	mov    %esp,%ebp
c0100e00:	83 ec 18             	sub    $0x18,%esp
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100e03:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100e0a:	eb 3c                	jmp    c0100e48 <mon_help+0x4b>
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
c0100e0c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100e0f:	89 d0                	mov    %edx,%eax
c0100e11:	01 c0                	add    %eax,%eax
c0100e13:	01 d0                	add    %edx,%eax
c0100e15:	c1 e0 02             	shl    $0x2,%eax
c0100e18:	05 04 10 13 c0       	add    $0xc0131004,%eax
c0100e1d:	8b 08                	mov    (%eax),%ecx
c0100e1f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100e22:	89 d0                	mov    %edx,%eax
c0100e24:	01 c0                	add    %eax,%eax
c0100e26:	01 d0                	add    %edx,%eax
c0100e28:	c1 e0 02             	shl    $0x2,%eax
c0100e2b:	05 00 10 13 c0       	add    $0xc0131000,%eax
c0100e30:	8b 00                	mov    (%eax),%eax
c0100e32:	83 ec 04             	sub    $0x4,%esp
c0100e35:	51                   	push   %ecx
c0100e36:	50                   	push   %eax
c0100e37:	68 3d cf 10 c0       	push   $0xc010cf3d
c0100e3c:	e8 56 f4 ff ff       	call   c0100297 <cprintf>
c0100e41:	83 c4 10             	add    $0x10,%esp

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100e44:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100e48:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100e4b:	83 f8 02             	cmp    $0x2,%eax
c0100e4e:	76 bc                	jbe    c0100e0c <mon_help+0xf>
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
    }
    return 0;
c0100e50:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100e55:	c9                   	leave  
c0100e56:	c3                   	ret    

c0100e57 <mon_kerninfo>:
/* *
 * mon_kerninfo - call print_kerninfo in kern/debug/kdebug.c to
 * print the memory occupancy in kernel.
 * */
int
mon_kerninfo(int argc, char **argv, struct trapframe *tf) {
c0100e57:	55                   	push   %ebp
c0100e58:	89 e5                	mov    %esp,%ebp
c0100e5a:	83 ec 08             	sub    $0x8,%esp
    print_kerninfo();
c0100e5d:	e8 ab fb ff ff       	call   c0100a0d <print_kerninfo>
    return 0;
c0100e62:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100e67:	c9                   	leave  
c0100e68:	c3                   	ret    

c0100e69 <mon_backtrace>:
/* *
 * mon_backtrace - call print_stackframe in kern/debug/kdebug.c to
 * print a backtrace of the stack.
 * */
int
mon_backtrace(int argc, char **argv, struct trapframe *tf) {
c0100e69:	55                   	push   %ebp
c0100e6a:	89 e5                	mov    %esp,%ebp
c0100e6c:	83 ec 08             	sub    $0x8,%esp
    print_stackframe();
c0100e6f:	e8 e3 fc ff ff       	call   c0100b57 <print_stackframe>
    return 0;
c0100e74:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100e79:	c9                   	leave  
c0100e7a:	c3                   	ret    

c0100e7b <ide_wait_ready>:
    unsigned int size;          // Size in Sectors
    unsigned char model[41];    // Model in String
} ide_devices[MAX_IDE];

static int
ide_wait_ready(unsigned short iobase, bool check_error) {
c0100e7b:	55                   	push   %ebp
c0100e7c:	89 e5                	mov    %esp,%ebp
c0100e7e:	83 ec 14             	sub    $0x14,%esp
c0100e81:	8b 45 08             	mov    0x8(%ebp),%eax
c0100e84:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    int r;
    while ((r = inb(iobase + ISA_STATUS)) & IDE_BSY)
c0100e88:	90                   	nop
c0100e89:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0100e8d:	83 c0 07             	add    $0x7,%eax
c0100e90:	0f b7 c0             	movzwl %ax,%eax
c0100e93:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0100e97:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0100e9b:	89 c2                	mov    %eax,%edx
c0100e9d:	ec                   	in     (%dx),%al
c0100e9e:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c0100ea1:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c0100ea5:	0f b6 c0             	movzbl %al,%eax
c0100ea8:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0100eab:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100eae:	25 80 00 00 00       	and    $0x80,%eax
c0100eb3:	85 c0                	test   %eax,%eax
c0100eb5:	75 d2                	jne    c0100e89 <ide_wait_ready+0xe>
        /* nothing */;
    if (check_error && (r & (IDE_DF | IDE_ERR)) != 0) {
c0100eb7:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0100ebb:	74 11                	je     c0100ece <ide_wait_ready+0x53>
c0100ebd:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100ec0:	83 e0 21             	and    $0x21,%eax
c0100ec3:	85 c0                	test   %eax,%eax
c0100ec5:	74 07                	je     c0100ece <ide_wait_ready+0x53>
        return -1;
c0100ec7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100ecc:	eb 05                	jmp    c0100ed3 <ide_wait_ready+0x58>
    }
    return 0;
c0100ece:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100ed3:	c9                   	leave  
c0100ed4:	c3                   	ret    

c0100ed5 <ide_init>:

void
ide_init(void) {
c0100ed5:	55                   	push   %ebp
c0100ed6:	89 e5                	mov    %esp,%ebp
c0100ed8:	57                   	push   %edi
c0100ed9:	53                   	push   %ebx
c0100eda:	81 ec 40 02 00 00    	sub    $0x240,%esp
    static_assert((SECTSIZE % 4) == 0);
    unsigned short ideno, iobase;
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c0100ee0:	66 c7 45 f6 00 00    	movw   $0x0,-0xa(%ebp)
c0100ee6:	e9 c1 02 00 00       	jmp    c01011ac <ide_init+0x2d7>
        /* assume that no device here */
        ide_devices[ideno].valid = 0;
c0100eeb:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100eef:	c1 e0 03             	shl    $0x3,%eax
c0100ef2:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0100ef9:	29 c2                	sub    %eax,%edx
c0100efb:	89 d0                	mov    %edx,%eax
c0100efd:	05 40 44 1c c0       	add    $0xc01c4440,%eax
c0100f02:	c6 00 00             	movb   $0x0,(%eax)

        iobase = IO_BASE(ideno);
c0100f05:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100f09:	66 d1 e8             	shr    %ax
c0100f0c:	0f b7 c0             	movzwl %ax,%eax
c0100f0f:	0f b7 04 85 48 cf 10 	movzwl -0x3fef30b8(,%eax,4),%eax
c0100f16:	c0 
c0100f17:	66 89 45 ea          	mov    %ax,-0x16(%ebp)

        /* wait device ready */
        ide_wait_ready(iobase, 0);
c0100f1b:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0100f1f:	6a 00                	push   $0x0
c0100f21:	50                   	push   %eax
c0100f22:	e8 54 ff ff ff       	call   c0100e7b <ide_wait_ready>
c0100f27:	83 c4 08             	add    $0x8,%esp

        /* step1: select drive */
        outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4));
c0100f2a:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100f2e:	83 e0 01             	and    $0x1,%eax
c0100f31:	c1 e0 04             	shl    $0x4,%eax
c0100f34:	83 c8 e0             	or     $0xffffffe0,%eax
c0100f37:	0f b6 c0             	movzbl %al,%eax
c0100f3a:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0100f3e:	83 c2 06             	add    $0x6,%edx
c0100f41:	0f b7 d2             	movzwl %dx,%edx
c0100f44:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c0100f48:	88 45 c7             	mov    %al,-0x39(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0100f4b:	0f b6 45 c7          	movzbl -0x39(%ebp),%eax
c0100f4f:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0100f53:	ee                   	out    %al,(%dx)
        ide_wait_ready(iobase, 0);
c0100f54:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0100f58:	6a 00                	push   $0x0
c0100f5a:	50                   	push   %eax
c0100f5b:	e8 1b ff ff ff       	call   c0100e7b <ide_wait_ready>
c0100f60:	83 c4 08             	add    $0x8,%esp

        /* step2: send ATA identify command */
        outb(iobase + ISA_COMMAND, IDE_CMD_IDENTIFY);
c0100f63:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0100f67:	83 c0 07             	add    $0x7,%eax
c0100f6a:	0f b7 c0             	movzwl %ax,%eax
c0100f6d:	66 89 45 e0          	mov    %ax,-0x20(%ebp)
c0100f71:	c6 45 c8 ec          	movb   $0xec,-0x38(%ebp)
c0100f75:	0f b6 45 c8          	movzbl -0x38(%ebp),%eax
c0100f79:	0f b7 55 e0          	movzwl -0x20(%ebp),%edx
c0100f7d:	ee                   	out    %al,(%dx)
        ide_wait_ready(iobase, 0);
c0100f7e:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0100f82:	6a 00                	push   $0x0
c0100f84:	50                   	push   %eax
c0100f85:	e8 f1 fe ff ff       	call   c0100e7b <ide_wait_ready>
c0100f8a:	83 c4 08             	add    $0x8,%esp

        /* step3: polling */
        if (inb(iobase + ISA_STATUS) == 0 || ide_wait_ready(iobase, 1) != 0) {
c0100f8d:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0100f91:	83 c0 07             	add    $0x7,%eax
c0100f94:	0f b7 c0             	movzwl %ax,%eax
c0100f97:	66 89 45 ca          	mov    %ax,-0x36(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0100f9b:	0f b7 45 ca          	movzwl -0x36(%ebp),%eax
c0100f9f:	89 c2                	mov    %eax,%edx
c0100fa1:	ec                   	in     (%dx),%al
c0100fa2:	88 45 c9             	mov    %al,-0x37(%ebp)
    return data;
c0100fa5:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
c0100fa9:	84 c0                	test   %al,%al
c0100fab:	0f 84 ef 01 00 00    	je     c01011a0 <ide_init+0x2cb>
c0100fb1:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0100fb5:	6a 01                	push   $0x1
c0100fb7:	50                   	push   %eax
c0100fb8:	e8 be fe ff ff       	call   c0100e7b <ide_wait_ready>
c0100fbd:	83 c4 08             	add    $0x8,%esp
c0100fc0:	85 c0                	test   %eax,%eax
c0100fc2:	0f 85 d8 01 00 00    	jne    c01011a0 <ide_init+0x2cb>
            continue ;
        }

        /* device is ok */
        ide_devices[ideno].valid = 1;
c0100fc8:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100fcc:	c1 e0 03             	shl    $0x3,%eax
c0100fcf:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0100fd6:	29 c2                	sub    %eax,%edx
c0100fd8:	89 d0                	mov    %edx,%eax
c0100fda:	05 40 44 1c c0       	add    $0xc01c4440,%eax
c0100fdf:	c6 00 01             	movb   $0x1,(%eax)

        /* read identification space of the device */
        unsigned int buffer[128];
        insl(iobase + ISA_DATA, buffer, sizeof(buffer) / sizeof(unsigned int));
c0100fe2:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0100fe6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0100fe9:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
c0100fef:	89 45 c0             	mov    %eax,-0x40(%ebp)
c0100ff2:	c7 45 bc 80 00 00 00 	movl   $0x80,-0x44(%ebp)
}

static inline void
insl(uint32_t port, void *addr, int cnt) {
    asm volatile (
c0100ff9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0100ffc:	8b 4d c0             	mov    -0x40(%ebp),%ecx
c0100fff:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0101002:	89 cb                	mov    %ecx,%ebx
c0101004:	89 df                	mov    %ebx,%edi
c0101006:	89 c1                	mov    %eax,%ecx
c0101008:	fc                   	cld    
c0101009:	f2 6d                	repnz insl (%dx),%es:(%edi)
c010100b:	89 c8                	mov    %ecx,%eax
c010100d:	89 fb                	mov    %edi,%ebx
c010100f:	89 5d c0             	mov    %ebx,-0x40(%ebp)
c0101012:	89 45 bc             	mov    %eax,-0x44(%ebp)

        unsigned char *ident = (unsigned char *)buffer;
c0101015:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
c010101b:	89 45 dc             	mov    %eax,-0x24(%ebp)
        unsigned int sectors;
        unsigned int cmdsets = *(unsigned int *)(ident + IDE_IDENT_CMDSETS);
c010101e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101021:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
c0101027:	89 45 d8             	mov    %eax,-0x28(%ebp)
        /* device use 48-bits or 28-bits addressing */
        if (cmdsets & (1 << 26)) {
c010102a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010102d:	25 00 00 00 04       	and    $0x4000000,%eax
c0101032:	85 c0                	test   %eax,%eax
c0101034:	74 0e                	je     c0101044 <ide_init+0x16f>
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA_EXT);
c0101036:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101039:	8b 80 c8 00 00 00    	mov    0xc8(%eax),%eax
c010103f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0101042:	eb 09                	jmp    c010104d <ide_init+0x178>
        }
        else {
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA);
c0101044:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101047:	8b 40 78             	mov    0x78(%eax),%eax
c010104a:	89 45 f0             	mov    %eax,-0x10(%ebp)
        }
        ide_devices[ideno].sets = cmdsets;
c010104d:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101051:	c1 e0 03             	shl    $0x3,%eax
c0101054:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c010105b:	29 c2                	sub    %eax,%edx
c010105d:	89 d0                	mov    %edx,%eax
c010105f:	8d 90 44 44 1c c0    	lea    -0x3fe3bbbc(%eax),%edx
c0101065:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0101068:	89 02                	mov    %eax,(%edx)
        ide_devices[ideno].size = sectors;
c010106a:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010106e:	c1 e0 03             	shl    $0x3,%eax
c0101071:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101078:	29 c2                	sub    %eax,%edx
c010107a:	89 d0                	mov    %edx,%eax
c010107c:	8d 90 48 44 1c c0    	lea    -0x3fe3bbb8(%eax),%edx
c0101082:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0101085:	89 02                	mov    %eax,(%edx)

        /* check if supports LBA */
        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);
c0101087:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010108a:	83 c0 62             	add    $0x62,%eax
c010108d:	0f b7 00             	movzwl (%eax),%eax
c0101090:	0f b7 c0             	movzwl %ax,%eax
c0101093:	25 00 02 00 00       	and    $0x200,%eax
c0101098:	85 c0                	test   %eax,%eax
c010109a:	75 16                	jne    c01010b2 <ide_init+0x1dd>
c010109c:	68 50 cf 10 c0       	push   $0xc010cf50
c01010a1:	68 93 cf 10 c0       	push   $0xc010cf93
c01010a6:	6a 7d                	push   $0x7d
c01010a8:	68 a8 cf 10 c0       	push   $0xc010cfa8
c01010ad:	e8 4b f3 ff ff       	call   c01003fd <__panic>

        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
c01010b2:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c01010b6:	89 c2                	mov    %eax,%edx
c01010b8:	8d 04 d5 00 00 00 00 	lea    0x0(,%edx,8),%eax
c01010bf:	89 c2                	mov    %eax,%edx
c01010c1:	8d 04 d5 00 00 00 00 	lea    0x0(,%edx,8),%eax
c01010c8:	29 d0                	sub    %edx,%eax
c01010ca:	05 40 44 1c c0       	add    $0xc01c4440,%eax
c01010cf:	83 c0 0c             	add    $0xc,%eax
c01010d2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c01010d5:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01010d8:	83 c0 36             	add    $0x36,%eax
c01010db:	89 45 d0             	mov    %eax,-0x30(%ebp)
        unsigned int i, length = 40;
c01010de:	c7 45 cc 28 00 00 00 	movl   $0x28,-0x34(%ebp)
        for (i = 0; i < length; i += 2) {
c01010e5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01010ec:	eb 34                	jmp    c0101122 <ide_init+0x24d>
            model[i] = data[i + 1], model[i + 1] = data[i];
c01010ee:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01010f1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01010f4:	01 c2                	add    %eax,%edx
c01010f6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01010f9:	8d 48 01             	lea    0x1(%eax),%ecx
c01010fc:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01010ff:	01 c8                	add    %ecx,%eax
c0101101:	0f b6 00             	movzbl (%eax),%eax
c0101104:	88 02                	mov    %al,(%edx)
c0101106:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101109:	8d 50 01             	lea    0x1(%eax),%edx
c010110c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010110f:	01 c2                	add    %eax,%edx
c0101111:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c0101114:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101117:	01 c8                	add    %ecx,%eax
c0101119:	0f b6 00             	movzbl (%eax),%eax
c010111c:	88 02                	mov    %al,(%edx)
        /* check if supports LBA */
        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);

        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
        unsigned int i, length = 40;
        for (i = 0; i < length; i += 2) {
c010111e:	83 45 ec 02          	addl   $0x2,-0x14(%ebp)
c0101122:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101125:	3b 45 cc             	cmp    -0x34(%ebp),%eax
c0101128:	72 c4                	jb     c01010ee <ide_init+0x219>
            model[i] = data[i + 1], model[i + 1] = data[i];
        }
        do {
            model[i] = '\0';
c010112a:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010112d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101130:	01 d0                	add    %edx,%eax
c0101132:	c6 00 00             	movb   $0x0,(%eax)
        } while (i -- > 0 && model[i] == ' ');
c0101135:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101138:	8d 50 ff             	lea    -0x1(%eax),%edx
c010113b:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010113e:	85 c0                	test   %eax,%eax
c0101140:	74 0f                	je     c0101151 <ide_init+0x27c>
c0101142:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0101145:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101148:	01 d0                	add    %edx,%eax
c010114a:	0f b6 00             	movzbl (%eax),%eax
c010114d:	3c 20                	cmp    $0x20,%al
c010114f:	74 d9                	je     c010112a <ide_init+0x255>

        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
c0101151:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101155:	89 c2                	mov    %eax,%edx
c0101157:	8d 04 d5 00 00 00 00 	lea    0x0(,%edx,8),%eax
c010115e:	89 c2                	mov    %eax,%edx
c0101160:	8d 04 d5 00 00 00 00 	lea    0x0(,%edx,8),%eax
c0101167:	29 d0                	sub    %edx,%eax
c0101169:	05 40 44 1c c0       	add    $0xc01c4440,%eax
c010116e:	8d 48 0c             	lea    0xc(%eax),%ecx
c0101171:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101175:	c1 e0 03             	shl    $0x3,%eax
c0101178:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c010117f:	29 c2                	sub    %eax,%edx
c0101181:	89 d0                	mov    %edx,%eax
c0101183:	05 48 44 1c c0       	add    $0xc01c4448,%eax
c0101188:	8b 10                	mov    (%eax),%edx
c010118a:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010118e:	51                   	push   %ecx
c010118f:	52                   	push   %edx
c0101190:	50                   	push   %eax
c0101191:	68 ba cf 10 c0       	push   $0xc010cfba
c0101196:	e8 fc f0 ff ff       	call   c0100297 <cprintf>
c010119b:	83 c4 10             	add    $0x10,%esp
c010119e:	eb 01                	jmp    c01011a1 <ide_init+0x2cc>
        outb(iobase + ISA_COMMAND, IDE_CMD_IDENTIFY);
        ide_wait_ready(iobase, 0);

        /* step3: polling */
        if (inb(iobase + ISA_STATUS) == 0 || ide_wait_ready(iobase, 1) != 0) {
            continue ;
c01011a0:	90                   	nop

void
ide_init(void) {
    static_assert((SECTSIZE % 4) == 0);
    unsigned short ideno, iobase;
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c01011a1:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c01011a5:	83 c0 01             	add    $0x1,%eax
c01011a8:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
c01011ac:	66 83 7d f6 03       	cmpw   $0x3,-0xa(%ebp)
c01011b1:	0f 86 34 fd ff ff    	jbe    c0100eeb <ide_init+0x16>

        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
    }

    // enable ide interrupt
    pic_enable(IRQ_IDE1);
c01011b7:	83 ec 0c             	sub    $0xc,%esp
c01011ba:	6a 0e                	push   $0xe
c01011bc:	e8 8a 0e 00 00       	call   c010204b <pic_enable>
c01011c1:	83 c4 10             	add    $0x10,%esp
    pic_enable(IRQ_IDE2);
c01011c4:	83 ec 0c             	sub    $0xc,%esp
c01011c7:	6a 0f                	push   $0xf
c01011c9:	e8 7d 0e 00 00       	call   c010204b <pic_enable>
c01011ce:	83 c4 10             	add    $0x10,%esp
}
c01011d1:	90                   	nop
c01011d2:	8d 65 f8             	lea    -0x8(%ebp),%esp
c01011d5:	5b                   	pop    %ebx
c01011d6:	5f                   	pop    %edi
c01011d7:	5d                   	pop    %ebp
c01011d8:	c3                   	ret    

c01011d9 <ide_device_valid>:

bool
ide_device_valid(unsigned short ideno) {
c01011d9:	55                   	push   %ebp
c01011da:	89 e5                	mov    %esp,%ebp
c01011dc:	83 ec 04             	sub    $0x4,%esp
c01011df:	8b 45 08             	mov    0x8(%ebp),%eax
c01011e2:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    return VALID_IDE(ideno);
c01011e6:	66 83 7d fc 03       	cmpw   $0x3,-0x4(%ebp)
c01011eb:	77 25                	ja     c0101212 <ide_device_valid+0x39>
c01011ed:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c01011f1:	c1 e0 03             	shl    $0x3,%eax
c01011f4:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c01011fb:	29 c2                	sub    %eax,%edx
c01011fd:	89 d0                	mov    %edx,%eax
c01011ff:	05 40 44 1c c0       	add    $0xc01c4440,%eax
c0101204:	0f b6 00             	movzbl (%eax),%eax
c0101207:	84 c0                	test   %al,%al
c0101209:	74 07                	je     c0101212 <ide_device_valid+0x39>
c010120b:	b8 01 00 00 00       	mov    $0x1,%eax
c0101210:	eb 05                	jmp    c0101217 <ide_device_valid+0x3e>
c0101212:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101217:	c9                   	leave  
c0101218:	c3                   	ret    

c0101219 <ide_device_size>:

size_t
ide_device_size(unsigned short ideno) {
c0101219:	55                   	push   %ebp
c010121a:	89 e5                	mov    %esp,%ebp
c010121c:	83 ec 04             	sub    $0x4,%esp
c010121f:	8b 45 08             	mov    0x8(%ebp),%eax
c0101222:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    if (ide_device_valid(ideno)) {
c0101226:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c010122a:	50                   	push   %eax
c010122b:	e8 a9 ff ff ff       	call   c01011d9 <ide_device_valid>
c0101230:	83 c4 04             	add    $0x4,%esp
c0101233:	85 c0                	test   %eax,%eax
c0101235:	74 1b                	je     c0101252 <ide_device_size+0x39>
        return ide_devices[ideno].size;
c0101237:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c010123b:	c1 e0 03             	shl    $0x3,%eax
c010123e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101245:	29 c2                	sub    %eax,%edx
c0101247:	89 d0                	mov    %edx,%eax
c0101249:	05 48 44 1c c0       	add    $0xc01c4448,%eax
c010124e:	8b 00                	mov    (%eax),%eax
c0101250:	eb 05                	jmp    c0101257 <ide_device_size+0x3e>
    }
    return 0;
c0101252:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101257:	c9                   	leave  
c0101258:	c3                   	ret    

c0101259 <ide_read_secs>:

int
ide_read_secs(unsigned short ideno, uint32_t secno, void *dst, size_t nsecs) {
c0101259:	55                   	push   %ebp
c010125a:	89 e5                	mov    %esp,%ebp
c010125c:	57                   	push   %edi
c010125d:	53                   	push   %ebx
c010125e:	83 ec 40             	sub    $0x40,%esp
c0101261:	8b 45 08             	mov    0x8(%ebp),%eax
c0101264:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c0101268:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c010126f:	77 25                	ja     c0101296 <ide_read_secs+0x3d>
c0101271:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
c0101276:	77 1e                	ja     c0101296 <ide_read_secs+0x3d>
c0101278:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c010127c:	c1 e0 03             	shl    $0x3,%eax
c010127f:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101286:	29 c2                	sub    %eax,%edx
c0101288:	89 d0                	mov    %edx,%eax
c010128a:	05 40 44 1c c0       	add    $0xc01c4440,%eax
c010128f:	0f b6 00             	movzbl (%eax),%eax
c0101292:	84 c0                	test   %al,%al
c0101294:	75 19                	jne    c01012af <ide_read_secs+0x56>
c0101296:	68 d8 cf 10 c0       	push   $0xc010cfd8
c010129b:	68 93 cf 10 c0       	push   $0xc010cf93
c01012a0:	68 9f 00 00 00       	push   $0x9f
c01012a5:	68 a8 cf 10 c0       	push   $0xc010cfa8
c01012aa:	e8 4e f1 ff ff       	call   c01003fd <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c01012af:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c01012b6:	77 0f                	ja     c01012c7 <ide_read_secs+0x6e>
c01012b8:	8b 55 0c             	mov    0xc(%ebp),%edx
c01012bb:	8b 45 14             	mov    0x14(%ebp),%eax
c01012be:	01 d0                	add    %edx,%eax
c01012c0:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c01012c5:	76 19                	jbe    c01012e0 <ide_read_secs+0x87>
c01012c7:	68 00 d0 10 c0       	push   $0xc010d000
c01012cc:	68 93 cf 10 c0       	push   $0xc010cf93
c01012d1:	68 a0 00 00 00       	push   $0xa0
c01012d6:	68 a8 cf 10 c0       	push   $0xc010cfa8
c01012db:	e8 1d f1 ff ff       	call   c01003fd <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c01012e0:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c01012e4:	66 d1 e8             	shr    %ax
c01012e7:	0f b7 c0             	movzwl %ax,%eax
c01012ea:	0f b7 04 85 48 cf 10 	movzwl -0x3fef30b8(,%eax,4),%eax
c01012f1:	c0 
c01012f2:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c01012f6:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c01012fa:	66 d1 e8             	shr    %ax
c01012fd:	0f b7 c0             	movzwl %ax,%eax
c0101300:	0f b7 04 85 4a cf 10 	movzwl -0x3fef30b6(,%eax,4),%eax
c0101307:	c0 
c0101308:	66 89 45 f0          	mov    %ax,-0x10(%ebp)

    ide_wait_ready(iobase, 0);
c010130c:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101310:	83 ec 08             	sub    $0x8,%esp
c0101313:	6a 00                	push   $0x0
c0101315:	50                   	push   %eax
c0101316:	e8 60 fb ff ff       	call   c0100e7b <ide_wait_ready>
c010131b:	83 c4 10             	add    $0x10,%esp

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c010131e:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c0101322:	83 c0 02             	add    $0x2,%eax
c0101325:	0f b7 c0             	movzwl %ax,%eax
c0101328:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
c010132c:	c6 45 d7 00          	movb   $0x0,-0x29(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101330:	0f b6 45 d7          	movzbl -0x29(%ebp),%eax
c0101334:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101338:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECCNT, nsecs);
c0101339:	8b 45 14             	mov    0x14(%ebp),%eax
c010133c:	0f b6 c0             	movzbl %al,%eax
c010133f:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101343:	83 c2 02             	add    $0x2,%edx
c0101346:	0f b7 d2             	movzwl %dx,%edx
c0101349:	66 89 55 e8          	mov    %dx,-0x18(%ebp)
c010134d:	88 45 d8             	mov    %al,-0x28(%ebp)
c0101350:	0f b6 45 d8          	movzbl -0x28(%ebp),%eax
c0101354:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c0101358:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c0101359:	8b 45 0c             	mov    0xc(%ebp),%eax
c010135c:	0f b6 c0             	movzbl %al,%eax
c010135f:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101363:	83 c2 03             	add    $0x3,%edx
c0101366:	0f b7 d2             	movzwl %dx,%edx
c0101369:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c010136d:	88 45 d9             	mov    %al,-0x27(%ebp)
c0101370:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c0101374:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0101378:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c0101379:	8b 45 0c             	mov    0xc(%ebp),%eax
c010137c:	c1 e8 08             	shr    $0x8,%eax
c010137f:	0f b6 c0             	movzbl %al,%eax
c0101382:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101386:	83 c2 04             	add    $0x4,%edx
c0101389:	0f b7 d2             	movzwl %dx,%edx
c010138c:	66 89 55 e4          	mov    %dx,-0x1c(%ebp)
c0101390:	88 45 da             	mov    %al,-0x26(%ebp)
c0101393:	0f b6 45 da          	movzbl -0x26(%ebp),%eax
c0101397:	0f b7 55 e4          	movzwl -0x1c(%ebp),%edx
c010139b:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c010139c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010139f:	c1 e8 10             	shr    $0x10,%eax
c01013a2:	0f b6 c0             	movzbl %al,%eax
c01013a5:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01013a9:	83 c2 05             	add    $0x5,%edx
c01013ac:	0f b7 d2             	movzwl %dx,%edx
c01013af:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c01013b3:	88 45 db             	mov    %al,-0x25(%ebp)
c01013b6:	0f b6 45 db          	movzbl -0x25(%ebp),%eax
c01013ba:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c01013be:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c01013bf:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c01013c3:	83 e0 01             	and    $0x1,%eax
c01013c6:	c1 e0 04             	shl    $0x4,%eax
c01013c9:	89 c2                	mov    %eax,%edx
c01013cb:	8b 45 0c             	mov    0xc(%ebp),%eax
c01013ce:	c1 e8 18             	shr    $0x18,%eax
c01013d1:	83 e0 0f             	and    $0xf,%eax
c01013d4:	09 d0                	or     %edx,%eax
c01013d6:	83 c8 e0             	or     $0xffffffe0,%eax
c01013d9:	0f b6 c0             	movzbl %al,%eax
c01013dc:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01013e0:	83 c2 06             	add    $0x6,%edx
c01013e3:	0f b7 d2             	movzwl %dx,%edx
c01013e6:	66 89 55 e0          	mov    %dx,-0x20(%ebp)
c01013ea:	88 45 dc             	mov    %al,-0x24(%ebp)
c01013ed:	0f b6 45 dc          	movzbl -0x24(%ebp),%eax
c01013f1:	0f b7 55 e0          	movzwl -0x20(%ebp),%edx
c01013f5:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_COMMAND, IDE_CMD_READ);
c01013f6:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01013fa:	83 c0 07             	add    $0x7,%eax
c01013fd:	0f b7 c0             	movzwl %ax,%eax
c0101400:	66 89 45 de          	mov    %ax,-0x22(%ebp)
c0101404:	c6 45 dd 20          	movb   $0x20,-0x23(%ebp)
c0101408:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c010140c:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c0101410:	ee                   	out    %al,(%dx)

    int ret = 0;
c0101411:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c0101418:	eb 56                	jmp    c0101470 <ide_read_secs+0x217>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c010141a:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c010141e:	83 ec 08             	sub    $0x8,%esp
c0101421:	6a 01                	push   $0x1
c0101423:	50                   	push   %eax
c0101424:	e8 52 fa ff ff       	call   c0100e7b <ide_wait_ready>
c0101429:	83 c4 10             	add    $0x10,%esp
c010142c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010142f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0101433:	75 43                	jne    c0101478 <ide_read_secs+0x21f>
            goto out;
        }
        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
c0101435:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101439:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010143c:	8b 45 10             	mov    0x10(%ebp),%eax
c010143f:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0101442:	c7 45 cc 80 00 00 00 	movl   $0x80,-0x34(%ebp)
    return data;
}

static inline void
insl(uint32_t port, void *addr, int cnt) {
    asm volatile (
c0101449:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010144c:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c010144f:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0101452:	89 cb                	mov    %ecx,%ebx
c0101454:	89 df                	mov    %ebx,%edi
c0101456:	89 c1                	mov    %eax,%ecx
c0101458:	fc                   	cld    
c0101459:	f2 6d                	repnz insl (%dx),%es:(%edi)
c010145b:	89 c8                	mov    %ecx,%eax
c010145d:	89 fb                	mov    %edi,%ebx
c010145f:	89 5d d0             	mov    %ebx,-0x30(%ebp)
c0101462:	89 45 cc             	mov    %eax,-0x34(%ebp)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
    outb(iobase + ISA_COMMAND, IDE_CMD_READ);

    int ret = 0;
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c0101465:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0101469:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c0101470:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0101474:	75 a4                	jne    c010141a <ide_read_secs+0x1c1>
c0101476:	eb 01                	jmp    c0101479 <ide_read_secs+0x220>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
            goto out;
c0101478:	90                   	nop
        }
        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
    }

out:
    return ret;
c0101479:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010147c:	8d 65 f8             	lea    -0x8(%ebp),%esp
c010147f:	5b                   	pop    %ebx
c0101480:	5f                   	pop    %edi
c0101481:	5d                   	pop    %ebp
c0101482:	c3                   	ret    

c0101483 <ide_write_secs>:

int
ide_write_secs(unsigned short ideno, uint32_t secno, const void *src, size_t nsecs) {
c0101483:	55                   	push   %ebp
c0101484:	89 e5                	mov    %esp,%ebp
c0101486:	56                   	push   %esi
c0101487:	53                   	push   %ebx
c0101488:	83 ec 40             	sub    $0x40,%esp
c010148b:	8b 45 08             	mov    0x8(%ebp),%eax
c010148e:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c0101492:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c0101499:	77 25                	ja     c01014c0 <ide_write_secs+0x3d>
c010149b:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
c01014a0:	77 1e                	ja     c01014c0 <ide_write_secs+0x3d>
c01014a2:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c01014a6:	c1 e0 03             	shl    $0x3,%eax
c01014a9:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c01014b0:	29 c2                	sub    %eax,%edx
c01014b2:	89 d0                	mov    %edx,%eax
c01014b4:	05 40 44 1c c0       	add    $0xc01c4440,%eax
c01014b9:	0f b6 00             	movzbl (%eax),%eax
c01014bc:	84 c0                	test   %al,%al
c01014be:	75 19                	jne    c01014d9 <ide_write_secs+0x56>
c01014c0:	68 d8 cf 10 c0       	push   $0xc010cfd8
c01014c5:	68 93 cf 10 c0       	push   $0xc010cf93
c01014ca:	68 bc 00 00 00       	push   $0xbc
c01014cf:	68 a8 cf 10 c0       	push   $0xc010cfa8
c01014d4:	e8 24 ef ff ff       	call   c01003fd <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c01014d9:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c01014e0:	77 0f                	ja     c01014f1 <ide_write_secs+0x6e>
c01014e2:	8b 55 0c             	mov    0xc(%ebp),%edx
c01014e5:	8b 45 14             	mov    0x14(%ebp),%eax
c01014e8:	01 d0                	add    %edx,%eax
c01014ea:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c01014ef:	76 19                	jbe    c010150a <ide_write_secs+0x87>
c01014f1:	68 00 d0 10 c0       	push   $0xc010d000
c01014f6:	68 93 cf 10 c0       	push   $0xc010cf93
c01014fb:	68 bd 00 00 00       	push   $0xbd
c0101500:	68 a8 cf 10 c0       	push   $0xc010cfa8
c0101505:	e8 f3 ee ff ff       	call   c01003fd <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c010150a:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c010150e:	66 d1 e8             	shr    %ax
c0101511:	0f b7 c0             	movzwl %ax,%eax
c0101514:	0f b7 04 85 48 cf 10 	movzwl -0x3fef30b8(,%eax,4),%eax
c010151b:	c0 
c010151c:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0101520:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101524:	66 d1 e8             	shr    %ax
c0101527:	0f b7 c0             	movzwl %ax,%eax
c010152a:	0f b7 04 85 4a cf 10 	movzwl -0x3fef30b6(,%eax,4),%eax
c0101531:	c0 
c0101532:	66 89 45 f0          	mov    %ax,-0x10(%ebp)

    ide_wait_ready(iobase, 0);
c0101536:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c010153a:	83 ec 08             	sub    $0x8,%esp
c010153d:	6a 00                	push   $0x0
c010153f:	50                   	push   %eax
c0101540:	e8 36 f9 ff ff       	call   c0100e7b <ide_wait_ready>
c0101545:	83 c4 10             	add    $0x10,%esp

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c0101548:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c010154c:	83 c0 02             	add    $0x2,%eax
c010154f:	0f b7 c0             	movzwl %ax,%eax
c0101552:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
c0101556:	c6 45 d7 00          	movb   $0x0,-0x29(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010155a:	0f b6 45 d7          	movzbl -0x29(%ebp),%eax
c010155e:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101562:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECCNT, nsecs);
c0101563:	8b 45 14             	mov    0x14(%ebp),%eax
c0101566:	0f b6 c0             	movzbl %al,%eax
c0101569:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010156d:	83 c2 02             	add    $0x2,%edx
c0101570:	0f b7 d2             	movzwl %dx,%edx
c0101573:	66 89 55 e8          	mov    %dx,-0x18(%ebp)
c0101577:	88 45 d8             	mov    %al,-0x28(%ebp)
c010157a:	0f b6 45 d8          	movzbl -0x28(%ebp),%eax
c010157e:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c0101582:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c0101583:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101586:	0f b6 c0             	movzbl %al,%eax
c0101589:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010158d:	83 c2 03             	add    $0x3,%edx
c0101590:	0f b7 d2             	movzwl %dx,%edx
c0101593:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c0101597:	88 45 d9             	mov    %al,-0x27(%ebp)
c010159a:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c010159e:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c01015a2:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c01015a3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01015a6:	c1 e8 08             	shr    $0x8,%eax
c01015a9:	0f b6 c0             	movzbl %al,%eax
c01015ac:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01015b0:	83 c2 04             	add    $0x4,%edx
c01015b3:	0f b7 d2             	movzwl %dx,%edx
c01015b6:	66 89 55 e4          	mov    %dx,-0x1c(%ebp)
c01015ba:	88 45 da             	mov    %al,-0x26(%ebp)
c01015bd:	0f b6 45 da          	movzbl -0x26(%ebp),%eax
c01015c1:	0f b7 55 e4          	movzwl -0x1c(%ebp),%edx
c01015c5:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c01015c6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01015c9:	c1 e8 10             	shr    $0x10,%eax
c01015cc:	0f b6 c0             	movzbl %al,%eax
c01015cf:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01015d3:	83 c2 05             	add    $0x5,%edx
c01015d6:	0f b7 d2             	movzwl %dx,%edx
c01015d9:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c01015dd:	88 45 db             	mov    %al,-0x25(%ebp)
c01015e0:	0f b6 45 db          	movzbl -0x25(%ebp),%eax
c01015e4:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c01015e8:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c01015e9:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c01015ed:	83 e0 01             	and    $0x1,%eax
c01015f0:	c1 e0 04             	shl    $0x4,%eax
c01015f3:	89 c2                	mov    %eax,%edx
c01015f5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01015f8:	c1 e8 18             	shr    $0x18,%eax
c01015fb:	83 e0 0f             	and    $0xf,%eax
c01015fe:	09 d0                	or     %edx,%eax
c0101600:	83 c8 e0             	or     $0xffffffe0,%eax
c0101603:	0f b6 c0             	movzbl %al,%eax
c0101606:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010160a:	83 c2 06             	add    $0x6,%edx
c010160d:	0f b7 d2             	movzwl %dx,%edx
c0101610:	66 89 55 e0          	mov    %dx,-0x20(%ebp)
c0101614:	88 45 dc             	mov    %al,-0x24(%ebp)
c0101617:	0f b6 45 dc          	movzbl -0x24(%ebp),%eax
c010161b:	0f b7 55 e0          	movzwl -0x20(%ebp),%edx
c010161f:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);
c0101620:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101624:	83 c0 07             	add    $0x7,%eax
c0101627:	0f b7 c0             	movzwl %ax,%eax
c010162a:	66 89 45 de          	mov    %ax,-0x22(%ebp)
c010162e:	c6 45 dd 30          	movb   $0x30,-0x23(%ebp)
c0101632:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0101636:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c010163a:	ee                   	out    %al,(%dx)

    int ret = 0;
c010163b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c0101642:	eb 56                	jmp    c010169a <ide_write_secs+0x217>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c0101644:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101648:	83 ec 08             	sub    $0x8,%esp
c010164b:	6a 01                	push   $0x1
c010164d:	50                   	push   %eax
c010164e:	e8 28 f8 ff ff       	call   c0100e7b <ide_wait_ready>
c0101653:	83 c4 10             	add    $0x10,%esp
c0101656:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0101659:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010165d:	75 43                	jne    c01016a2 <ide_write_secs+0x21f>
            goto out;
        }
        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
c010165f:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101663:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0101666:	8b 45 10             	mov    0x10(%ebp),%eax
c0101669:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010166c:	c7 45 cc 80 00 00 00 	movl   $0x80,-0x34(%ebp)
    asm volatile ("outw %0, %1" :: "a" (data), "d" (port) : "memory");
}

static inline void
outsl(uint32_t port, const void *addr, int cnt) {
    asm volatile (
c0101673:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0101676:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c0101679:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010167c:	89 cb                	mov    %ecx,%ebx
c010167e:	89 de                	mov    %ebx,%esi
c0101680:	89 c1                	mov    %eax,%ecx
c0101682:	fc                   	cld    
c0101683:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
c0101685:	89 c8                	mov    %ecx,%eax
c0101687:	89 f3                	mov    %esi,%ebx
c0101689:	89 5d d0             	mov    %ebx,-0x30(%ebp)
c010168c:	89 45 cc             	mov    %eax,-0x34(%ebp)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);

    int ret = 0;
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c010168f:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0101693:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c010169a:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010169e:	75 a4                	jne    c0101644 <ide_write_secs+0x1c1>
c01016a0:	eb 01                	jmp    c01016a3 <ide_write_secs+0x220>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
            goto out;
c01016a2:	90                   	nop
        }
        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
    }

out:
    return ret;
c01016a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01016a6:	8d 65 f8             	lea    -0x8(%ebp),%esp
c01016a9:	5b                   	pop    %ebx
c01016aa:	5e                   	pop    %esi
c01016ab:	5d                   	pop    %ebp
c01016ac:	c3                   	ret    

c01016ad <clock_init>:
/* *
 * clock_init - initialize 8253 clock to interrupt 100 times per second,
 * and then enable IRQ_TIMER.
 * */
void
clock_init(void) {
c01016ad:	55                   	push   %ebp
c01016ae:	89 e5                	mov    %esp,%ebp
c01016b0:	83 ec 18             	sub    $0x18,%esp
c01016b3:	66 c7 45 f6 43 00    	movw   $0x43,-0xa(%ebp)
c01016b9:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01016bd:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
c01016c1:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c01016c5:	ee                   	out    %al,(%dx)
c01016c6:	66 c7 45 f4 40 00    	movw   $0x40,-0xc(%ebp)
c01016cc:	c6 45 f0 9c          	movb   $0x9c,-0x10(%ebp)
c01016d0:	0f b6 45 f0          	movzbl -0x10(%ebp),%eax
c01016d4:	0f b7 55 f4          	movzwl -0xc(%ebp),%edx
c01016d8:	ee                   	out    %al,(%dx)
c01016d9:	66 c7 45 f2 40 00    	movw   $0x40,-0xe(%ebp)
c01016df:	c6 45 f1 2e          	movb   $0x2e,-0xf(%ebp)
c01016e3:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c01016e7:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01016eb:	ee                   	out    %al,(%dx)
    outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
    outb(IO_TIMER1, TIMER_DIV(100) % 256);
    outb(IO_TIMER1, TIMER_DIV(100) / 256);

    // initialize time counter 'ticks' to zero
    ticks = 0;
c01016ec:	c7 05 b8 70 1c c0 00 	movl   $0x0,0xc01c70b8
c01016f3:	00 00 00 

    cprintf("++ setup timer interrupts\n");
c01016f6:	83 ec 0c             	sub    $0xc,%esp
c01016f9:	68 3a d0 10 c0       	push   $0xc010d03a
c01016fe:	e8 94 eb ff ff       	call   c0100297 <cprintf>
c0101703:	83 c4 10             	add    $0x10,%esp
    pic_enable(IRQ_TIMER);
c0101706:	83 ec 0c             	sub    $0xc,%esp
c0101709:	6a 00                	push   $0x0
c010170b:	e8 3b 09 00 00       	call   c010204b <pic_enable>
c0101710:	83 c4 10             	add    $0x10,%esp
}
c0101713:	90                   	nop
c0101714:	c9                   	leave  
c0101715:	c3                   	ret    

c0101716 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0101716:	55                   	push   %ebp
c0101717:	89 e5                	mov    %esp,%ebp
c0101719:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010171c:	9c                   	pushf  
c010171d:	58                   	pop    %eax
c010171e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0101721:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0101724:	25 00 02 00 00       	and    $0x200,%eax
c0101729:	85 c0                	test   %eax,%eax
c010172b:	74 0c                	je     c0101739 <__intr_save+0x23>
        intr_disable();
c010172d:	e8 8a 0a 00 00       	call   c01021bc <intr_disable>
        return 1;
c0101732:	b8 01 00 00 00       	mov    $0x1,%eax
c0101737:	eb 05                	jmp    c010173e <__intr_save+0x28>
    }
    return 0;
c0101739:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010173e:	c9                   	leave  
c010173f:	c3                   	ret    

c0101740 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0101740:	55                   	push   %ebp
c0101741:	89 e5                	mov    %esp,%ebp
c0101743:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0101746:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010174a:	74 05                	je     c0101751 <__intr_restore+0x11>
        intr_enable();
c010174c:	e8 64 0a 00 00       	call   c01021b5 <intr_enable>
    }
}
c0101751:	90                   	nop
c0101752:	c9                   	leave  
c0101753:	c3                   	ret    

c0101754 <delay>:
#include <memlayout.h>
#include <sync.h>

/* stupid I/O delay routine necessitated by historical PC design flaws */
static void
delay(void) {
c0101754:	55                   	push   %ebp
c0101755:	89 e5                	mov    %esp,%ebp
c0101757:	83 ec 10             	sub    $0x10,%esp
c010175a:	66 c7 45 fe 84 00    	movw   $0x84,-0x2(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101760:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c0101764:	89 c2                	mov    %eax,%edx
c0101766:	ec                   	in     (%dx),%al
c0101767:	88 45 f4             	mov    %al,-0xc(%ebp)
c010176a:	66 c7 45 fc 84 00    	movw   $0x84,-0x4(%ebp)
c0101770:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101774:	89 c2                	mov    %eax,%edx
c0101776:	ec                   	in     (%dx),%al
c0101777:	88 45 f5             	mov    %al,-0xb(%ebp)
c010177a:	66 c7 45 fa 84 00    	movw   $0x84,-0x6(%ebp)
c0101780:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0101784:	89 c2                	mov    %eax,%edx
c0101786:	ec                   	in     (%dx),%al
c0101787:	88 45 f6             	mov    %al,-0xa(%ebp)
c010178a:	66 c7 45 f8 84 00    	movw   $0x84,-0x8(%ebp)
c0101790:	0f b7 45 f8          	movzwl -0x8(%ebp),%eax
c0101794:	89 c2                	mov    %eax,%edx
c0101796:	ec                   	in     (%dx),%al
c0101797:	88 45 f7             	mov    %al,-0x9(%ebp)
    inb(0x84);
    inb(0x84);
    inb(0x84);
    inb(0x84);
}
c010179a:	90                   	nop
c010179b:	c9                   	leave  
c010179c:	c3                   	ret    

c010179d <cga_init>:
static uint16_t addr_6845;

/* TEXT-mode CGA/VGA display output */

static void
cga_init(void) {
c010179d:	55                   	push   %ebp
c010179e:	89 e5                	mov    %esp,%ebp
c01017a0:	83 ec 20             	sub    $0x20,%esp
    volatile uint16_t *cp = (uint16_t *)(CGA_BUF + KERNBASE);
c01017a3:	c7 45 fc 00 80 0b c0 	movl   $0xc00b8000,-0x4(%ebp)
    uint16_t was = *cp;
c01017aa:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01017ad:	0f b7 00             	movzwl (%eax),%eax
c01017b0:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    *cp = (uint16_t) 0xA55A;
c01017b4:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01017b7:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
    if (*cp != 0xA55A) {
c01017bc:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01017bf:	0f b7 00             	movzwl (%eax),%eax
c01017c2:	66 3d 5a a5          	cmp    $0xa55a,%ax
c01017c6:	74 12                	je     c01017da <cga_init+0x3d>
        cp = (uint16_t*)(MONO_BUF + KERNBASE);
c01017c8:	c7 45 fc 00 00 0b c0 	movl   $0xc00b0000,-0x4(%ebp)
        addr_6845 = MONO_BASE;
c01017cf:	66 c7 05 26 45 1c c0 	movw   $0x3b4,0xc01c4526
c01017d6:	b4 03 
c01017d8:	eb 13                	jmp    c01017ed <cga_init+0x50>
    } else {
        *cp = was;
c01017da:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01017dd:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c01017e1:	66 89 10             	mov    %dx,(%eax)
        addr_6845 = CGA_BASE;
c01017e4:	66 c7 05 26 45 1c c0 	movw   $0x3d4,0xc01c4526
c01017eb:	d4 03 
    }

    // Extract cursor location
    uint32_t pos;
    outb(addr_6845, 14);
c01017ed:	0f b7 05 26 45 1c c0 	movzwl 0xc01c4526,%eax
c01017f4:	0f b7 c0             	movzwl %ax,%eax
c01017f7:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
c01017fb:	c6 45 ea 0e          	movb   $0xe,-0x16(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01017ff:	0f b6 45 ea          	movzbl -0x16(%ebp),%eax
c0101803:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
c0101807:	ee                   	out    %al,(%dx)
    pos = inb(addr_6845 + 1) << 8;
c0101808:	0f b7 05 26 45 1c c0 	movzwl 0xc01c4526,%eax
c010180f:	83 c0 01             	add    $0x1,%eax
c0101812:	0f b7 c0             	movzwl %ax,%eax
c0101815:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101819:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c010181d:	89 c2                	mov    %eax,%edx
c010181f:	ec                   	in     (%dx),%al
c0101820:	88 45 eb             	mov    %al,-0x15(%ebp)
    return data;
c0101823:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
c0101827:	0f b6 c0             	movzbl %al,%eax
c010182a:	c1 e0 08             	shl    $0x8,%eax
c010182d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    outb(addr_6845, 15);
c0101830:	0f b7 05 26 45 1c c0 	movzwl 0xc01c4526,%eax
c0101837:	0f b7 c0             	movzwl %ax,%eax
c010183a:	66 89 45 f0          	mov    %ax,-0x10(%ebp)
c010183e:	c6 45 ec 0f          	movb   $0xf,-0x14(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101842:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
c0101846:	0f b7 55 f0          	movzwl -0x10(%ebp),%edx
c010184a:	ee                   	out    %al,(%dx)
    pos |= inb(addr_6845 + 1);
c010184b:	0f b7 05 26 45 1c c0 	movzwl 0xc01c4526,%eax
c0101852:	83 c0 01             	add    $0x1,%eax
c0101855:	0f b7 c0             	movzwl %ax,%eax
c0101858:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c010185c:	0f b7 45 ee          	movzwl -0x12(%ebp),%eax
c0101860:	89 c2                	mov    %eax,%edx
c0101862:	ec                   	in     (%dx),%al
c0101863:	88 45 ed             	mov    %al,-0x13(%ebp)
    return data;
c0101866:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c010186a:	0f b6 c0             	movzbl %al,%eax
c010186d:	09 45 f4             	or     %eax,-0xc(%ebp)

    crt_buf = (uint16_t*) cp;
c0101870:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0101873:	a3 20 45 1c c0       	mov    %eax,0xc01c4520
    crt_pos = pos;
c0101878:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010187b:	66 a3 24 45 1c c0    	mov    %ax,0xc01c4524
}
c0101881:	90                   	nop
c0101882:	c9                   	leave  
c0101883:	c3                   	ret    

c0101884 <serial_init>:

static bool serial_exists = 0;

static void
serial_init(void) {
c0101884:	55                   	push   %ebp
c0101885:	89 e5                	mov    %esp,%ebp
c0101887:	83 ec 28             	sub    $0x28,%esp
c010188a:	66 c7 45 f6 fa 03    	movw   $0x3fa,-0xa(%ebp)
c0101890:	c6 45 da 00          	movb   $0x0,-0x26(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101894:	0f b6 45 da          	movzbl -0x26(%ebp),%eax
c0101898:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c010189c:	ee                   	out    %al,(%dx)
c010189d:	66 c7 45 f4 fb 03    	movw   $0x3fb,-0xc(%ebp)
c01018a3:	c6 45 db 80          	movb   $0x80,-0x25(%ebp)
c01018a7:	0f b6 45 db          	movzbl -0x25(%ebp),%eax
c01018ab:	0f b7 55 f4          	movzwl -0xc(%ebp),%edx
c01018af:	ee                   	out    %al,(%dx)
c01018b0:	66 c7 45 f2 f8 03    	movw   $0x3f8,-0xe(%ebp)
c01018b6:	c6 45 dc 0c          	movb   $0xc,-0x24(%ebp)
c01018ba:	0f b6 45 dc          	movzbl -0x24(%ebp),%eax
c01018be:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01018c2:	ee                   	out    %al,(%dx)
c01018c3:	66 c7 45 f0 f9 03    	movw   $0x3f9,-0x10(%ebp)
c01018c9:	c6 45 dd 00          	movb   $0x0,-0x23(%ebp)
c01018cd:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c01018d1:	0f b7 55 f0          	movzwl -0x10(%ebp),%edx
c01018d5:	ee                   	out    %al,(%dx)
c01018d6:	66 c7 45 ee fb 03    	movw   $0x3fb,-0x12(%ebp)
c01018dc:	c6 45 de 03          	movb   $0x3,-0x22(%ebp)
c01018e0:	0f b6 45 de          	movzbl -0x22(%ebp),%eax
c01018e4:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c01018e8:	ee                   	out    %al,(%dx)
c01018e9:	66 c7 45 ec fc 03    	movw   $0x3fc,-0x14(%ebp)
c01018ef:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
c01018f3:	0f b6 45 df          	movzbl -0x21(%ebp),%eax
c01018f7:	0f b7 55 ec          	movzwl -0x14(%ebp),%edx
c01018fb:	ee                   	out    %al,(%dx)
c01018fc:	66 c7 45 ea f9 03    	movw   $0x3f9,-0x16(%ebp)
c0101902:	c6 45 e0 01          	movb   $0x1,-0x20(%ebp)
c0101906:	0f b6 45 e0          	movzbl -0x20(%ebp),%eax
c010190a:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c010190e:	ee                   	out    %al,(%dx)
c010190f:	66 c7 45 e8 fd 03    	movw   $0x3fd,-0x18(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101915:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
c0101919:	89 c2                	mov    %eax,%edx
c010191b:	ec                   	in     (%dx),%al
c010191c:	88 45 e1             	mov    %al,-0x1f(%ebp)
    return data;
c010191f:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
    // Enable rcv interrupts
    outb(COM1 + COM_IER, COM_IER_RDI);

    // Clear any preexisting overrun indications and interrupts
    // Serial port doesn't exist if COM_LSR returns 0xFF
    serial_exists = (inb(COM1 + COM_LSR) != 0xFF);
c0101923:	3c ff                	cmp    $0xff,%al
c0101925:	0f 95 c0             	setne  %al
c0101928:	0f b6 c0             	movzbl %al,%eax
c010192b:	a3 28 45 1c c0       	mov    %eax,0xc01c4528
c0101930:	66 c7 45 e6 fa 03    	movw   $0x3fa,-0x1a(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101936:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c010193a:	89 c2                	mov    %eax,%edx
c010193c:	ec                   	in     (%dx),%al
c010193d:	88 45 e2             	mov    %al,-0x1e(%ebp)
c0101940:	66 c7 45 e4 f8 03    	movw   $0x3f8,-0x1c(%ebp)
c0101946:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
c010194a:	89 c2                	mov    %eax,%edx
c010194c:	ec                   	in     (%dx),%al
c010194d:	88 45 e3             	mov    %al,-0x1d(%ebp)
    (void) inb(COM1+COM_IIR);
    (void) inb(COM1+COM_RX);

    if (serial_exists) {
c0101950:	a1 28 45 1c c0       	mov    0xc01c4528,%eax
c0101955:	85 c0                	test   %eax,%eax
c0101957:	74 0d                	je     c0101966 <serial_init+0xe2>
        pic_enable(IRQ_COM1);
c0101959:	83 ec 0c             	sub    $0xc,%esp
c010195c:	6a 04                	push   $0x4
c010195e:	e8 e8 06 00 00       	call   c010204b <pic_enable>
c0101963:	83 c4 10             	add    $0x10,%esp
    }
}
c0101966:	90                   	nop
c0101967:	c9                   	leave  
c0101968:	c3                   	ret    

c0101969 <lpt_putc_sub>:

static void
lpt_putc_sub(int c) {
c0101969:	55                   	push   %ebp
c010196a:	89 e5                	mov    %esp,%ebp
c010196c:	83 ec 10             	sub    $0x10,%esp
    int i;
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c010196f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0101976:	eb 09                	jmp    c0101981 <lpt_putc_sub+0x18>
        delay();
c0101978:	e8 d7 fd ff ff       	call   c0101754 <delay>
}

static void
lpt_putc_sub(int c) {
    int i;
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c010197d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0101981:	66 c7 45 f4 79 03    	movw   $0x379,-0xc(%ebp)
c0101987:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c010198b:	89 c2                	mov    %eax,%edx
c010198d:	ec                   	in     (%dx),%al
c010198e:	88 45 f3             	mov    %al,-0xd(%ebp)
    return data;
c0101991:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101995:	84 c0                	test   %al,%al
c0101997:	78 09                	js     c01019a2 <lpt_putc_sub+0x39>
c0101999:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
c01019a0:	7e d6                	jle    c0101978 <lpt_putc_sub+0xf>
        delay();
    }
    outb(LPTPORT + 0, c);
c01019a2:	8b 45 08             	mov    0x8(%ebp),%eax
c01019a5:	0f b6 c0             	movzbl %al,%eax
c01019a8:	66 c7 45 f8 78 03    	movw   $0x378,-0x8(%ebp)
c01019ae:	88 45 f0             	mov    %al,-0x10(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01019b1:	0f b6 45 f0          	movzbl -0x10(%ebp),%eax
c01019b5:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
c01019b9:	ee                   	out    %al,(%dx)
c01019ba:	66 c7 45 f6 7a 03    	movw   $0x37a,-0xa(%ebp)
c01019c0:	c6 45 f1 0d          	movb   $0xd,-0xf(%ebp)
c01019c4:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c01019c8:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c01019cc:	ee                   	out    %al,(%dx)
c01019cd:	66 c7 45 fa 7a 03    	movw   $0x37a,-0x6(%ebp)
c01019d3:	c6 45 f2 08          	movb   $0x8,-0xe(%ebp)
c01019d7:	0f b6 45 f2          	movzbl -0xe(%ebp),%eax
c01019db:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c01019df:	ee                   	out    %al,(%dx)
    outb(LPTPORT + 2, 0x08 | 0x04 | 0x01);
    outb(LPTPORT + 2, 0x08);
}
c01019e0:	90                   	nop
c01019e1:	c9                   	leave  
c01019e2:	c3                   	ret    

c01019e3 <lpt_putc>:

/* lpt_putc - copy console output to parallel port */
static void
lpt_putc(int c) {
c01019e3:	55                   	push   %ebp
c01019e4:	89 e5                	mov    %esp,%ebp
    if (c != '\b') {
c01019e6:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c01019ea:	74 0d                	je     c01019f9 <lpt_putc+0x16>
        lpt_putc_sub(c);
c01019ec:	ff 75 08             	pushl  0x8(%ebp)
c01019ef:	e8 75 ff ff ff       	call   c0101969 <lpt_putc_sub>
c01019f4:	83 c4 04             	add    $0x4,%esp
    else {
        lpt_putc_sub('\b');
        lpt_putc_sub(' ');
        lpt_putc_sub('\b');
    }
}
c01019f7:	eb 1e                	jmp    c0101a17 <lpt_putc+0x34>
lpt_putc(int c) {
    if (c != '\b') {
        lpt_putc_sub(c);
    }
    else {
        lpt_putc_sub('\b');
c01019f9:	6a 08                	push   $0x8
c01019fb:	e8 69 ff ff ff       	call   c0101969 <lpt_putc_sub>
c0101a00:	83 c4 04             	add    $0x4,%esp
        lpt_putc_sub(' ');
c0101a03:	6a 20                	push   $0x20
c0101a05:	e8 5f ff ff ff       	call   c0101969 <lpt_putc_sub>
c0101a0a:	83 c4 04             	add    $0x4,%esp
        lpt_putc_sub('\b');
c0101a0d:	6a 08                	push   $0x8
c0101a0f:	e8 55 ff ff ff       	call   c0101969 <lpt_putc_sub>
c0101a14:	83 c4 04             	add    $0x4,%esp
    }
}
c0101a17:	90                   	nop
c0101a18:	c9                   	leave  
c0101a19:	c3                   	ret    

c0101a1a <cga_putc>:

/* cga_putc - print character to console */
static void
cga_putc(int c) {
c0101a1a:	55                   	push   %ebp
c0101a1b:	89 e5                	mov    %esp,%ebp
c0101a1d:	53                   	push   %ebx
c0101a1e:	83 ec 14             	sub    $0x14,%esp
    // set black on white
    if (!(c & ~0xFF)) {
c0101a21:	8b 45 08             	mov    0x8(%ebp),%eax
c0101a24:	b0 00                	mov    $0x0,%al
c0101a26:	85 c0                	test   %eax,%eax
c0101a28:	75 07                	jne    c0101a31 <cga_putc+0x17>
        c |= 0x0700;
c0101a2a:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)
    }

    switch (c & 0xff) {
c0101a31:	8b 45 08             	mov    0x8(%ebp),%eax
c0101a34:	0f b6 c0             	movzbl %al,%eax
c0101a37:	83 f8 0a             	cmp    $0xa,%eax
c0101a3a:	74 4e                	je     c0101a8a <cga_putc+0x70>
c0101a3c:	83 f8 0d             	cmp    $0xd,%eax
c0101a3f:	74 59                	je     c0101a9a <cga_putc+0x80>
c0101a41:	83 f8 08             	cmp    $0x8,%eax
c0101a44:	0f 85 8a 00 00 00    	jne    c0101ad4 <cga_putc+0xba>
    case '\b':
        if (crt_pos > 0) {
c0101a4a:	0f b7 05 24 45 1c c0 	movzwl 0xc01c4524,%eax
c0101a51:	66 85 c0             	test   %ax,%ax
c0101a54:	0f 84 a0 00 00 00    	je     c0101afa <cga_putc+0xe0>
            crt_pos --;
c0101a5a:	0f b7 05 24 45 1c c0 	movzwl 0xc01c4524,%eax
c0101a61:	83 e8 01             	sub    $0x1,%eax
c0101a64:	66 a3 24 45 1c c0    	mov    %ax,0xc01c4524
            crt_buf[crt_pos] = (c & ~0xff) | ' ';
c0101a6a:	a1 20 45 1c c0       	mov    0xc01c4520,%eax
c0101a6f:	0f b7 15 24 45 1c c0 	movzwl 0xc01c4524,%edx
c0101a76:	0f b7 d2             	movzwl %dx,%edx
c0101a79:	01 d2                	add    %edx,%edx
c0101a7b:	01 d0                	add    %edx,%eax
c0101a7d:	8b 55 08             	mov    0x8(%ebp),%edx
c0101a80:	b2 00                	mov    $0x0,%dl
c0101a82:	83 ca 20             	or     $0x20,%edx
c0101a85:	66 89 10             	mov    %dx,(%eax)
        }
        break;
c0101a88:	eb 70                	jmp    c0101afa <cga_putc+0xe0>
    case '\n':
        crt_pos += CRT_COLS;
c0101a8a:	0f b7 05 24 45 1c c0 	movzwl 0xc01c4524,%eax
c0101a91:	83 c0 50             	add    $0x50,%eax
c0101a94:	66 a3 24 45 1c c0    	mov    %ax,0xc01c4524
    case '\r':
        crt_pos -= (crt_pos % CRT_COLS);
c0101a9a:	0f b7 1d 24 45 1c c0 	movzwl 0xc01c4524,%ebx
c0101aa1:	0f b7 0d 24 45 1c c0 	movzwl 0xc01c4524,%ecx
c0101aa8:	0f b7 c1             	movzwl %cx,%eax
c0101aab:	69 c0 cd cc 00 00    	imul   $0xcccd,%eax,%eax
c0101ab1:	c1 e8 10             	shr    $0x10,%eax
c0101ab4:	89 c2                	mov    %eax,%edx
c0101ab6:	66 c1 ea 06          	shr    $0x6,%dx
c0101aba:	89 d0                	mov    %edx,%eax
c0101abc:	c1 e0 02             	shl    $0x2,%eax
c0101abf:	01 d0                	add    %edx,%eax
c0101ac1:	c1 e0 04             	shl    $0x4,%eax
c0101ac4:	29 c1                	sub    %eax,%ecx
c0101ac6:	89 ca                	mov    %ecx,%edx
c0101ac8:	89 d8                	mov    %ebx,%eax
c0101aca:	29 d0                	sub    %edx,%eax
c0101acc:	66 a3 24 45 1c c0    	mov    %ax,0xc01c4524
        break;
c0101ad2:	eb 27                	jmp    c0101afb <cga_putc+0xe1>
    default:
        crt_buf[crt_pos ++] = c;     // write the character
c0101ad4:	8b 0d 20 45 1c c0    	mov    0xc01c4520,%ecx
c0101ada:	0f b7 05 24 45 1c c0 	movzwl 0xc01c4524,%eax
c0101ae1:	8d 50 01             	lea    0x1(%eax),%edx
c0101ae4:	66 89 15 24 45 1c c0 	mov    %dx,0xc01c4524
c0101aeb:	0f b7 c0             	movzwl %ax,%eax
c0101aee:	01 c0                	add    %eax,%eax
c0101af0:	01 c8                	add    %ecx,%eax
c0101af2:	8b 55 08             	mov    0x8(%ebp),%edx
c0101af5:	66 89 10             	mov    %dx,(%eax)
        break;
c0101af8:	eb 01                	jmp    c0101afb <cga_putc+0xe1>
    case '\b':
        if (crt_pos > 0) {
            crt_pos --;
            crt_buf[crt_pos] = (c & ~0xff) | ' ';
        }
        break;
c0101afa:	90                   	nop
        crt_buf[crt_pos ++] = c;     // write the character
        break;
    }

    // What is the purpose of this?
    if (crt_pos >= CRT_SIZE) {
c0101afb:	0f b7 05 24 45 1c c0 	movzwl 0xc01c4524,%eax
c0101b02:	66 3d cf 07          	cmp    $0x7cf,%ax
c0101b06:	76 59                	jbe    c0101b61 <cga_putc+0x147>
        int i;
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
c0101b08:	a1 20 45 1c c0       	mov    0xc01c4520,%eax
c0101b0d:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
c0101b13:	a1 20 45 1c c0       	mov    0xc01c4520,%eax
c0101b18:	83 ec 04             	sub    $0x4,%esp
c0101b1b:	68 00 0f 00 00       	push   $0xf00
c0101b20:	52                   	push   %edx
c0101b21:	50                   	push   %eax
c0101b22:	e8 a5 a8 00 00       	call   c010c3cc <memmove>
c0101b27:	83 c4 10             	add    $0x10,%esp
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c0101b2a:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
c0101b31:	eb 15                	jmp    c0101b48 <cga_putc+0x12e>
            crt_buf[i] = 0x0700 | ' ';
c0101b33:	a1 20 45 1c c0       	mov    0xc01c4520,%eax
c0101b38:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0101b3b:	01 d2                	add    %edx,%edx
c0101b3d:	01 d0                	add    %edx,%eax
c0101b3f:	66 c7 00 20 07       	movw   $0x720,(%eax)

    // What is the purpose of this?
    if (crt_pos >= CRT_SIZE) {
        int i;
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c0101b44:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0101b48:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
c0101b4f:	7e e2                	jle    c0101b33 <cga_putc+0x119>
            crt_buf[i] = 0x0700 | ' ';
        }
        crt_pos -= CRT_COLS;
c0101b51:	0f b7 05 24 45 1c c0 	movzwl 0xc01c4524,%eax
c0101b58:	83 e8 50             	sub    $0x50,%eax
c0101b5b:	66 a3 24 45 1c c0    	mov    %ax,0xc01c4524
    }

    // move that little blinky thing
    outb(addr_6845, 14);
c0101b61:	0f b7 05 26 45 1c c0 	movzwl 0xc01c4526,%eax
c0101b68:	0f b7 c0             	movzwl %ax,%eax
c0101b6b:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0101b6f:	c6 45 e8 0e          	movb   $0xe,-0x18(%ebp)
c0101b73:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
c0101b77:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101b7b:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos >> 8);
c0101b7c:	0f b7 05 24 45 1c c0 	movzwl 0xc01c4524,%eax
c0101b83:	66 c1 e8 08          	shr    $0x8,%ax
c0101b87:	0f b6 c0             	movzbl %al,%eax
c0101b8a:	0f b7 15 26 45 1c c0 	movzwl 0xc01c4526,%edx
c0101b91:	83 c2 01             	add    $0x1,%edx
c0101b94:	0f b7 d2             	movzwl %dx,%edx
c0101b97:	66 89 55 f0          	mov    %dx,-0x10(%ebp)
c0101b9b:	88 45 e9             	mov    %al,-0x17(%ebp)
c0101b9e:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101ba2:	0f b7 55 f0          	movzwl -0x10(%ebp),%edx
c0101ba6:	ee                   	out    %al,(%dx)
    outb(addr_6845, 15);
c0101ba7:	0f b7 05 26 45 1c c0 	movzwl 0xc01c4526,%eax
c0101bae:	0f b7 c0             	movzwl %ax,%eax
c0101bb1:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
c0101bb5:	c6 45 ea 0f          	movb   $0xf,-0x16(%ebp)
c0101bb9:	0f b6 45 ea          	movzbl -0x16(%ebp),%eax
c0101bbd:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101bc1:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos);
c0101bc2:	0f b7 05 24 45 1c c0 	movzwl 0xc01c4524,%eax
c0101bc9:	0f b6 c0             	movzbl %al,%eax
c0101bcc:	0f b7 15 26 45 1c c0 	movzwl 0xc01c4526,%edx
c0101bd3:	83 c2 01             	add    $0x1,%edx
c0101bd6:	0f b7 d2             	movzwl %dx,%edx
c0101bd9:	66 89 55 ec          	mov    %dx,-0x14(%ebp)
c0101bdd:	88 45 eb             	mov    %al,-0x15(%ebp)
c0101be0:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
c0101be4:	0f b7 55 ec          	movzwl -0x14(%ebp),%edx
c0101be8:	ee                   	out    %al,(%dx)
}
c0101be9:	90                   	nop
c0101bea:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0101bed:	c9                   	leave  
c0101bee:	c3                   	ret    

c0101bef <serial_putc_sub>:

static void
serial_putc_sub(int c) {
c0101bef:	55                   	push   %ebp
c0101bf0:	89 e5                	mov    %esp,%ebp
c0101bf2:	83 ec 10             	sub    $0x10,%esp
    int i;
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c0101bf5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0101bfc:	eb 09                	jmp    c0101c07 <serial_putc_sub+0x18>
        delay();
c0101bfe:	e8 51 fb ff ff       	call   c0101754 <delay>
}

static void
serial_putc_sub(int c) {
    int i;
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c0101c03:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0101c07:	66 c7 45 f8 fd 03    	movw   $0x3fd,-0x8(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101c0d:	0f b7 45 f8          	movzwl -0x8(%ebp),%eax
c0101c11:	89 c2                	mov    %eax,%edx
c0101c13:	ec                   	in     (%dx),%al
c0101c14:	88 45 f7             	mov    %al,-0x9(%ebp)
    return data;
c0101c17:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0101c1b:	0f b6 c0             	movzbl %al,%eax
c0101c1e:	83 e0 20             	and    $0x20,%eax
c0101c21:	85 c0                	test   %eax,%eax
c0101c23:	75 09                	jne    c0101c2e <serial_putc_sub+0x3f>
c0101c25:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
c0101c2c:	7e d0                	jle    c0101bfe <serial_putc_sub+0xf>
        delay();
    }
    outb(COM1 + COM_TX, c);
c0101c2e:	8b 45 08             	mov    0x8(%ebp),%eax
c0101c31:	0f b6 c0             	movzbl %al,%eax
c0101c34:	66 c7 45 fa f8 03    	movw   $0x3f8,-0x6(%ebp)
c0101c3a:	88 45 f6             	mov    %al,-0xa(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101c3d:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
c0101c41:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c0101c45:	ee                   	out    %al,(%dx)
}
c0101c46:	90                   	nop
c0101c47:	c9                   	leave  
c0101c48:	c3                   	ret    

c0101c49 <serial_putc>:

/* serial_putc - print character to serial port */
static void
serial_putc(int c) {
c0101c49:	55                   	push   %ebp
c0101c4a:	89 e5                	mov    %esp,%ebp
    if (c != '\b') {
c0101c4c:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c0101c50:	74 0d                	je     c0101c5f <serial_putc+0x16>
        serial_putc_sub(c);
c0101c52:	ff 75 08             	pushl  0x8(%ebp)
c0101c55:	e8 95 ff ff ff       	call   c0101bef <serial_putc_sub>
c0101c5a:	83 c4 04             	add    $0x4,%esp
    else {
        serial_putc_sub('\b');
        serial_putc_sub(' ');
        serial_putc_sub('\b');
    }
}
c0101c5d:	eb 1e                	jmp    c0101c7d <serial_putc+0x34>
serial_putc(int c) {
    if (c != '\b') {
        serial_putc_sub(c);
    }
    else {
        serial_putc_sub('\b');
c0101c5f:	6a 08                	push   $0x8
c0101c61:	e8 89 ff ff ff       	call   c0101bef <serial_putc_sub>
c0101c66:	83 c4 04             	add    $0x4,%esp
        serial_putc_sub(' ');
c0101c69:	6a 20                	push   $0x20
c0101c6b:	e8 7f ff ff ff       	call   c0101bef <serial_putc_sub>
c0101c70:	83 c4 04             	add    $0x4,%esp
        serial_putc_sub('\b');
c0101c73:	6a 08                	push   $0x8
c0101c75:	e8 75 ff ff ff       	call   c0101bef <serial_putc_sub>
c0101c7a:	83 c4 04             	add    $0x4,%esp
    }
}
c0101c7d:	90                   	nop
c0101c7e:	c9                   	leave  
c0101c7f:	c3                   	ret    

c0101c80 <cons_intr>:
/* *
 * cons_intr - called by device interrupt routines to feed input
 * characters into the circular console input buffer.
 * */
static void
cons_intr(int (*proc)(void)) {
c0101c80:	55                   	push   %ebp
c0101c81:	89 e5                	mov    %esp,%ebp
c0101c83:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = (*proc)()) != -1) {
c0101c86:	eb 33                	jmp    c0101cbb <cons_intr+0x3b>
        if (c != 0) {
c0101c88:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0101c8c:	74 2d                	je     c0101cbb <cons_intr+0x3b>
            cons.buf[cons.wpos ++] = c;
c0101c8e:	a1 44 47 1c c0       	mov    0xc01c4744,%eax
c0101c93:	8d 50 01             	lea    0x1(%eax),%edx
c0101c96:	89 15 44 47 1c c0    	mov    %edx,0xc01c4744
c0101c9c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0101c9f:	88 90 40 45 1c c0    	mov    %dl,-0x3fe3bac0(%eax)
            if (cons.wpos == CONSBUFSIZE) {
c0101ca5:	a1 44 47 1c c0       	mov    0xc01c4744,%eax
c0101caa:	3d 00 02 00 00       	cmp    $0x200,%eax
c0101caf:	75 0a                	jne    c0101cbb <cons_intr+0x3b>
                cons.wpos = 0;
c0101cb1:	c7 05 44 47 1c c0 00 	movl   $0x0,0xc01c4744
c0101cb8:	00 00 00 
 * characters into the circular console input buffer.
 * */
static void
cons_intr(int (*proc)(void)) {
    int c;
    while ((c = (*proc)()) != -1) {
c0101cbb:	8b 45 08             	mov    0x8(%ebp),%eax
c0101cbe:	ff d0                	call   *%eax
c0101cc0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0101cc3:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
c0101cc7:	75 bf                	jne    c0101c88 <cons_intr+0x8>
            if (cons.wpos == CONSBUFSIZE) {
                cons.wpos = 0;
            }
        }
    }
}
c0101cc9:	90                   	nop
c0101cca:	c9                   	leave  
c0101ccb:	c3                   	ret    

c0101ccc <serial_proc_data>:

/* serial_proc_data - get data from serial port */
static int
serial_proc_data(void) {
c0101ccc:	55                   	push   %ebp
c0101ccd:	89 e5                	mov    %esp,%ebp
c0101ccf:	83 ec 10             	sub    $0x10,%esp
c0101cd2:	66 c7 45 f8 fd 03    	movw   $0x3fd,-0x8(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101cd8:	0f b7 45 f8          	movzwl -0x8(%ebp),%eax
c0101cdc:	89 c2                	mov    %eax,%edx
c0101cde:	ec                   	in     (%dx),%al
c0101cdf:	88 45 f7             	mov    %al,-0x9(%ebp)
    return data;
c0101ce2:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
    if (!(inb(COM1 + COM_LSR) & COM_LSR_DATA)) {
c0101ce6:	0f b6 c0             	movzbl %al,%eax
c0101ce9:	83 e0 01             	and    $0x1,%eax
c0101cec:	85 c0                	test   %eax,%eax
c0101cee:	75 07                	jne    c0101cf7 <serial_proc_data+0x2b>
        return -1;
c0101cf0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101cf5:	eb 2a                	jmp    c0101d21 <serial_proc_data+0x55>
c0101cf7:	66 c7 45 fa f8 03    	movw   $0x3f8,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101cfd:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0101d01:	89 c2                	mov    %eax,%edx
c0101d03:	ec                   	in     (%dx),%al
c0101d04:	88 45 f6             	mov    %al,-0xa(%ebp)
    return data;
c0101d07:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
    }
    int c = inb(COM1 + COM_RX);
c0101d0b:	0f b6 c0             	movzbl %al,%eax
c0101d0e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (c == 127) {
c0101d11:	83 7d fc 7f          	cmpl   $0x7f,-0x4(%ebp)
c0101d15:	75 07                	jne    c0101d1e <serial_proc_data+0x52>
        c = '\b';
c0101d17:	c7 45 fc 08 00 00 00 	movl   $0x8,-0x4(%ebp)
    }
    return c;
c0101d1e:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0101d21:	c9                   	leave  
c0101d22:	c3                   	ret    

c0101d23 <serial_intr>:

/* serial_intr - try to feed input characters from serial port */
void
serial_intr(void) {
c0101d23:	55                   	push   %ebp
c0101d24:	89 e5                	mov    %esp,%ebp
c0101d26:	83 ec 08             	sub    $0x8,%esp
    if (serial_exists) {
c0101d29:	a1 28 45 1c c0       	mov    0xc01c4528,%eax
c0101d2e:	85 c0                	test   %eax,%eax
c0101d30:	74 10                	je     c0101d42 <serial_intr+0x1f>
        cons_intr(serial_proc_data);
c0101d32:	83 ec 0c             	sub    $0xc,%esp
c0101d35:	68 cc 1c 10 c0       	push   $0xc0101ccc
c0101d3a:	e8 41 ff ff ff       	call   c0101c80 <cons_intr>
c0101d3f:	83 c4 10             	add    $0x10,%esp
    }
}
c0101d42:	90                   	nop
c0101d43:	c9                   	leave  
c0101d44:	c3                   	ret    

c0101d45 <kbd_proc_data>:
 *
 * The kbd_proc_data() function gets data from the keyboard.
 * If we finish a character, return it, else 0. And return -1 if no data.
 * */
static int
kbd_proc_data(void) {
c0101d45:	55                   	push   %ebp
c0101d46:	89 e5                	mov    %esp,%ebp
c0101d48:	83 ec 18             	sub    $0x18,%esp
c0101d4b:	66 c7 45 ec 64 00    	movw   $0x64,-0x14(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101d51:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0101d55:	89 c2                	mov    %eax,%edx
c0101d57:	ec                   	in     (%dx),%al
c0101d58:	88 45 eb             	mov    %al,-0x15(%ebp)
    return data;
c0101d5b:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
    int c;
    uint8_t data;
    static uint32_t shift;

    if ((inb(KBSTATP) & KBS_DIB) == 0) {
c0101d5f:	0f b6 c0             	movzbl %al,%eax
c0101d62:	83 e0 01             	and    $0x1,%eax
c0101d65:	85 c0                	test   %eax,%eax
c0101d67:	75 0a                	jne    c0101d73 <kbd_proc_data+0x2e>
        return -1;
c0101d69:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101d6e:	e9 5d 01 00 00       	jmp    c0101ed0 <kbd_proc_data+0x18b>
c0101d73:	66 c7 45 f0 60 00    	movw   $0x60,-0x10(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101d79:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c0101d7d:	89 c2                	mov    %eax,%edx
c0101d7f:	ec                   	in     (%dx),%al
c0101d80:	88 45 ea             	mov    %al,-0x16(%ebp)
    return data;
c0101d83:	0f b6 45 ea          	movzbl -0x16(%ebp),%eax
    }

    data = inb(KBDATAP);
c0101d87:	88 45 f3             	mov    %al,-0xd(%ebp)

    if (data == 0xE0) {
c0101d8a:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
c0101d8e:	75 17                	jne    c0101da7 <kbd_proc_data+0x62>
        // E0 escape character
        shift |= E0ESC;
c0101d90:	a1 48 47 1c c0       	mov    0xc01c4748,%eax
c0101d95:	83 c8 40             	or     $0x40,%eax
c0101d98:	a3 48 47 1c c0       	mov    %eax,0xc01c4748
        return 0;
c0101d9d:	b8 00 00 00 00       	mov    $0x0,%eax
c0101da2:	e9 29 01 00 00       	jmp    c0101ed0 <kbd_proc_data+0x18b>
    } else if (data & 0x80) {
c0101da7:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101dab:	84 c0                	test   %al,%al
c0101dad:	79 47                	jns    c0101df6 <kbd_proc_data+0xb1>
        // Key released
        data = (shift & E0ESC ? data : data & 0x7F);
c0101daf:	a1 48 47 1c c0       	mov    0xc01c4748,%eax
c0101db4:	83 e0 40             	and    $0x40,%eax
c0101db7:	85 c0                	test   %eax,%eax
c0101db9:	75 09                	jne    c0101dc4 <kbd_proc_data+0x7f>
c0101dbb:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101dbf:	83 e0 7f             	and    $0x7f,%eax
c0101dc2:	eb 04                	jmp    c0101dc8 <kbd_proc_data+0x83>
c0101dc4:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101dc8:	88 45 f3             	mov    %al,-0xd(%ebp)
        shift &= ~(shiftcode[data] | E0ESC);
c0101dcb:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101dcf:	0f b6 80 40 10 13 c0 	movzbl -0x3fecefc0(%eax),%eax
c0101dd6:	83 c8 40             	or     $0x40,%eax
c0101dd9:	0f b6 c0             	movzbl %al,%eax
c0101ddc:	f7 d0                	not    %eax
c0101dde:	89 c2                	mov    %eax,%edx
c0101de0:	a1 48 47 1c c0       	mov    0xc01c4748,%eax
c0101de5:	21 d0                	and    %edx,%eax
c0101de7:	a3 48 47 1c c0       	mov    %eax,0xc01c4748
        return 0;
c0101dec:	b8 00 00 00 00       	mov    $0x0,%eax
c0101df1:	e9 da 00 00 00       	jmp    c0101ed0 <kbd_proc_data+0x18b>
    } else if (shift & E0ESC) {
c0101df6:	a1 48 47 1c c0       	mov    0xc01c4748,%eax
c0101dfb:	83 e0 40             	and    $0x40,%eax
c0101dfe:	85 c0                	test   %eax,%eax
c0101e00:	74 11                	je     c0101e13 <kbd_proc_data+0xce>
        // Last character was an E0 escape; or with 0x80
        data |= 0x80;
c0101e02:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
        shift &= ~E0ESC;
c0101e06:	a1 48 47 1c c0       	mov    0xc01c4748,%eax
c0101e0b:	83 e0 bf             	and    $0xffffffbf,%eax
c0101e0e:	a3 48 47 1c c0       	mov    %eax,0xc01c4748
    }

    shift |= shiftcode[data];
c0101e13:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101e17:	0f b6 80 40 10 13 c0 	movzbl -0x3fecefc0(%eax),%eax
c0101e1e:	0f b6 d0             	movzbl %al,%edx
c0101e21:	a1 48 47 1c c0       	mov    0xc01c4748,%eax
c0101e26:	09 d0                	or     %edx,%eax
c0101e28:	a3 48 47 1c c0       	mov    %eax,0xc01c4748
    shift ^= togglecode[data];
c0101e2d:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101e31:	0f b6 80 40 11 13 c0 	movzbl -0x3feceec0(%eax),%eax
c0101e38:	0f b6 d0             	movzbl %al,%edx
c0101e3b:	a1 48 47 1c c0       	mov    0xc01c4748,%eax
c0101e40:	31 d0                	xor    %edx,%eax
c0101e42:	a3 48 47 1c c0       	mov    %eax,0xc01c4748

    c = charcode[shift & (CTL | SHIFT)][data];
c0101e47:	a1 48 47 1c c0       	mov    0xc01c4748,%eax
c0101e4c:	83 e0 03             	and    $0x3,%eax
c0101e4f:	8b 14 85 40 15 13 c0 	mov    -0x3feceac0(,%eax,4),%edx
c0101e56:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101e5a:	01 d0                	add    %edx,%eax
c0101e5c:	0f b6 00             	movzbl (%eax),%eax
c0101e5f:	0f b6 c0             	movzbl %al,%eax
c0101e62:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (shift & CAPSLOCK) {
c0101e65:	a1 48 47 1c c0       	mov    0xc01c4748,%eax
c0101e6a:	83 e0 08             	and    $0x8,%eax
c0101e6d:	85 c0                	test   %eax,%eax
c0101e6f:	74 22                	je     c0101e93 <kbd_proc_data+0x14e>
        if ('a' <= c && c <= 'z')
c0101e71:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
c0101e75:	7e 0c                	jle    c0101e83 <kbd_proc_data+0x13e>
c0101e77:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
c0101e7b:	7f 06                	jg     c0101e83 <kbd_proc_data+0x13e>
            c += 'A' - 'a';
c0101e7d:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
c0101e81:	eb 10                	jmp    c0101e93 <kbd_proc_data+0x14e>
        else if ('A' <= c && c <= 'Z')
c0101e83:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
c0101e87:	7e 0a                	jle    c0101e93 <kbd_proc_data+0x14e>
c0101e89:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
c0101e8d:	7f 04                	jg     c0101e93 <kbd_proc_data+0x14e>
            c += 'a' - 'A';
c0101e8f:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
    }

    // Process special keys
    // Ctrl-Alt-Del: reboot
    if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
c0101e93:	a1 48 47 1c c0       	mov    0xc01c4748,%eax
c0101e98:	f7 d0                	not    %eax
c0101e9a:	83 e0 06             	and    $0x6,%eax
c0101e9d:	85 c0                	test   %eax,%eax
c0101e9f:	75 2c                	jne    c0101ecd <kbd_proc_data+0x188>
c0101ea1:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
c0101ea8:	75 23                	jne    c0101ecd <kbd_proc_data+0x188>
        cprintf("Rebooting!\n");
c0101eaa:	83 ec 0c             	sub    $0xc,%esp
c0101ead:	68 55 d0 10 c0       	push   $0xc010d055
c0101eb2:	e8 e0 e3 ff ff       	call   c0100297 <cprintf>
c0101eb7:	83 c4 10             	add    $0x10,%esp
c0101eba:	66 c7 45 ee 92 00    	movw   $0x92,-0x12(%ebp)
c0101ec0:	c6 45 e9 03          	movb   $0x3,-0x17(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101ec4:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101ec8:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101ecc:	ee                   	out    %al,(%dx)
        outb(0x92, 0x3); // courtesy of Chris Frost
    }
    return c;
c0101ecd:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0101ed0:	c9                   	leave  
c0101ed1:	c3                   	ret    

c0101ed2 <kbd_intr>:

/* kbd_intr - try to feed input characters from keyboard */
static void
kbd_intr(void) {
c0101ed2:	55                   	push   %ebp
c0101ed3:	89 e5                	mov    %esp,%ebp
c0101ed5:	83 ec 08             	sub    $0x8,%esp
    cons_intr(kbd_proc_data);
c0101ed8:	83 ec 0c             	sub    $0xc,%esp
c0101edb:	68 45 1d 10 c0       	push   $0xc0101d45
c0101ee0:	e8 9b fd ff ff       	call   c0101c80 <cons_intr>
c0101ee5:	83 c4 10             	add    $0x10,%esp
}
c0101ee8:	90                   	nop
c0101ee9:	c9                   	leave  
c0101eea:	c3                   	ret    

c0101eeb <kbd_init>:

static void
kbd_init(void) {
c0101eeb:	55                   	push   %ebp
c0101eec:	89 e5                	mov    %esp,%ebp
c0101eee:	83 ec 08             	sub    $0x8,%esp
    // drain the kbd buffer
    kbd_intr();
c0101ef1:	e8 dc ff ff ff       	call   c0101ed2 <kbd_intr>
    pic_enable(IRQ_KBD);
c0101ef6:	83 ec 0c             	sub    $0xc,%esp
c0101ef9:	6a 01                	push   $0x1
c0101efb:	e8 4b 01 00 00       	call   c010204b <pic_enable>
c0101f00:	83 c4 10             	add    $0x10,%esp
}
c0101f03:	90                   	nop
c0101f04:	c9                   	leave  
c0101f05:	c3                   	ret    

c0101f06 <cons_init>:

/* cons_init - initializes the console devices */
void
cons_init(void) {
c0101f06:	55                   	push   %ebp
c0101f07:	89 e5                	mov    %esp,%ebp
c0101f09:	83 ec 08             	sub    $0x8,%esp
    cga_init();
c0101f0c:	e8 8c f8 ff ff       	call   c010179d <cga_init>
    serial_init();
c0101f11:	e8 6e f9 ff ff       	call   c0101884 <serial_init>
    kbd_init();
c0101f16:	e8 d0 ff ff ff       	call   c0101eeb <kbd_init>
    if (!serial_exists) {
c0101f1b:	a1 28 45 1c c0       	mov    0xc01c4528,%eax
c0101f20:	85 c0                	test   %eax,%eax
c0101f22:	75 10                	jne    c0101f34 <cons_init+0x2e>
        cprintf("serial port does not exist!!\n");
c0101f24:	83 ec 0c             	sub    $0xc,%esp
c0101f27:	68 61 d0 10 c0       	push   $0xc010d061
c0101f2c:	e8 66 e3 ff ff       	call   c0100297 <cprintf>
c0101f31:	83 c4 10             	add    $0x10,%esp
    }
}
c0101f34:	90                   	nop
c0101f35:	c9                   	leave  
c0101f36:	c3                   	ret    

c0101f37 <cons_putc>:

/* cons_putc - print a single character @c to console devices */
void
cons_putc(int c) {
c0101f37:	55                   	push   %ebp
c0101f38:	89 e5                	mov    %esp,%ebp
c0101f3a:	83 ec 18             	sub    $0x18,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c0101f3d:	e8 d4 f7 ff ff       	call   c0101716 <__intr_save>
c0101f42:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        lpt_putc(c);
c0101f45:	83 ec 0c             	sub    $0xc,%esp
c0101f48:	ff 75 08             	pushl  0x8(%ebp)
c0101f4b:	e8 93 fa ff ff       	call   c01019e3 <lpt_putc>
c0101f50:	83 c4 10             	add    $0x10,%esp
        cga_putc(c);
c0101f53:	83 ec 0c             	sub    $0xc,%esp
c0101f56:	ff 75 08             	pushl  0x8(%ebp)
c0101f59:	e8 bc fa ff ff       	call   c0101a1a <cga_putc>
c0101f5e:	83 c4 10             	add    $0x10,%esp
        serial_putc(c);
c0101f61:	83 ec 0c             	sub    $0xc,%esp
c0101f64:	ff 75 08             	pushl  0x8(%ebp)
c0101f67:	e8 dd fc ff ff       	call   c0101c49 <serial_putc>
c0101f6c:	83 c4 10             	add    $0x10,%esp
    }
    local_intr_restore(intr_flag);
c0101f6f:	83 ec 0c             	sub    $0xc,%esp
c0101f72:	ff 75 f4             	pushl  -0xc(%ebp)
c0101f75:	e8 c6 f7 ff ff       	call   c0101740 <__intr_restore>
c0101f7a:	83 c4 10             	add    $0x10,%esp
}
c0101f7d:	90                   	nop
c0101f7e:	c9                   	leave  
c0101f7f:	c3                   	ret    

c0101f80 <cons_getc>:
/* *
 * cons_getc - return the next input character from console,
 * or 0 if none waiting.
 * */
int
cons_getc(void) {
c0101f80:	55                   	push   %ebp
c0101f81:	89 e5                	mov    %esp,%ebp
c0101f83:	83 ec 18             	sub    $0x18,%esp
    int c = 0;
c0101f86:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    local_intr_save(intr_flag);
c0101f8d:	e8 84 f7 ff ff       	call   c0101716 <__intr_save>
c0101f92:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        // poll for any pending input characters,
        // so that this function works even when interrupts are disabled
        // (e.g., when called from the kernel monitor).
        serial_intr();
c0101f95:	e8 89 fd ff ff       	call   c0101d23 <serial_intr>
        kbd_intr();
c0101f9a:	e8 33 ff ff ff       	call   c0101ed2 <kbd_intr>

        // grab the next character from the input buffer.
        if (cons.rpos != cons.wpos) {
c0101f9f:	8b 15 40 47 1c c0    	mov    0xc01c4740,%edx
c0101fa5:	a1 44 47 1c c0       	mov    0xc01c4744,%eax
c0101faa:	39 c2                	cmp    %eax,%edx
c0101fac:	74 31                	je     c0101fdf <cons_getc+0x5f>
            c = cons.buf[cons.rpos ++];
c0101fae:	a1 40 47 1c c0       	mov    0xc01c4740,%eax
c0101fb3:	8d 50 01             	lea    0x1(%eax),%edx
c0101fb6:	89 15 40 47 1c c0    	mov    %edx,0xc01c4740
c0101fbc:	0f b6 80 40 45 1c c0 	movzbl -0x3fe3bac0(%eax),%eax
c0101fc3:	0f b6 c0             	movzbl %al,%eax
c0101fc6:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (cons.rpos == CONSBUFSIZE) {
c0101fc9:	a1 40 47 1c c0       	mov    0xc01c4740,%eax
c0101fce:	3d 00 02 00 00       	cmp    $0x200,%eax
c0101fd3:	75 0a                	jne    c0101fdf <cons_getc+0x5f>
                cons.rpos = 0;
c0101fd5:	c7 05 40 47 1c c0 00 	movl   $0x0,0xc01c4740
c0101fdc:	00 00 00 
            }
        }
    }
    local_intr_restore(intr_flag);
c0101fdf:	83 ec 0c             	sub    $0xc,%esp
c0101fe2:	ff 75 f0             	pushl  -0x10(%ebp)
c0101fe5:	e8 56 f7 ff ff       	call   c0101740 <__intr_restore>
c0101fea:	83 c4 10             	add    $0x10,%esp
    return c;
c0101fed:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0101ff0:	c9                   	leave  
c0101ff1:	c3                   	ret    

c0101ff2 <pic_setmask>:
// Initial IRQ mask has interrupt 2 enabled (for slave 8259A).
static uint16_t irq_mask = 0xFFFF & ~(1 << IRQ_SLAVE);
static bool did_init = 0;

static void
pic_setmask(uint16_t mask) {
c0101ff2:	55                   	push   %ebp
c0101ff3:	89 e5                	mov    %esp,%ebp
c0101ff5:	83 ec 14             	sub    $0x14,%esp
c0101ff8:	8b 45 08             	mov    0x8(%ebp),%eax
c0101ffb:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    irq_mask = mask;
c0101fff:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0102003:	66 a3 50 15 13 c0    	mov    %ax,0xc0131550
    if (did_init) {
c0102009:	a1 4c 47 1c c0       	mov    0xc01c474c,%eax
c010200e:	85 c0                	test   %eax,%eax
c0102010:	74 36                	je     c0102048 <pic_setmask+0x56>
        outb(IO_PIC1 + 1, mask);
c0102012:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0102016:	0f b6 c0             	movzbl %al,%eax
c0102019:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
c010201f:	88 45 fa             	mov    %al,-0x6(%ebp)
c0102022:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
c0102026:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c010202a:	ee                   	out    %al,(%dx)
        outb(IO_PIC2 + 1, mask >> 8);
c010202b:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c010202f:	66 c1 e8 08          	shr    $0x8,%ax
c0102033:	0f b6 c0             	movzbl %al,%eax
c0102036:	66 c7 45 fc a1 00    	movw   $0xa1,-0x4(%ebp)
c010203c:	88 45 fb             	mov    %al,-0x5(%ebp)
c010203f:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
c0102043:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c0102047:	ee                   	out    %al,(%dx)
    }
}
c0102048:	90                   	nop
c0102049:	c9                   	leave  
c010204a:	c3                   	ret    

c010204b <pic_enable>:

void
pic_enable(unsigned int irq) {
c010204b:	55                   	push   %ebp
c010204c:	89 e5                	mov    %esp,%ebp
    pic_setmask(irq_mask & ~(1 << irq));
c010204e:	8b 45 08             	mov    0x8(%ebp),%eax
c0102051:	ba 01 00 00 00       	mov    $0x1,%edx
c0102056:	89 c1                	mov    %eax,%ecx
c0102058:	d3 e2                	shl    %cl,%edx
c010205a:	89 d0                	mov    %edx,%eax
c010205c:	f7 d0                	not    %eax
c010205e:	89 c2                	mov    %eax,%edx
c0102060:	0f b7 05 50 15 13 c0 	movzwl 0xc0131550,%eax
c0102067:	21 d0                	and    %edx,%eax
c0102069:	0f b7 c0             	movzwl %ax,%eax
c010206c:	50                   	push   %eax
c010206d:	e8 80 ff ff ff       	call   c0101ff2 <pic_setmask>
c0102072:	83 c4 04             	add    $0x4,%esp
}
c0102075:	90                   	nop
c0102076:	c9                   	leave  
c0102077:	c3                   	ret    

c0102078 <pic_init>:

/* pic_init - initialize the 8259A interrupt controllers */
void
pic_init(void) {
c0102078:	55                   	push   %ebp
c0102079:	89 e5                	mov    %esp,%ebp
c010207b:	83 ec 30             	sub    $0x30,%esp
    did_init = 1;
c010207e:	c7 05 4c 47 1c c0 01 	movl   $0x1,0xc01c474c
c0102085:	00 00 00 
c0102088:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
c010208e:	c6 45 d6 ff          	movb   $0xff,-0x2a(%ebp)
c0102092:	0f b6 45 d6          	movzbl -0x2a(%ebp),%eax
c0102096:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c010209a:	ee                   	out    %al,(%dx)
c010209b:	66 c7 45 fc a1 00    	movw   $0xa1,-0x4(%ebp)
c01020a1:	c6 45 d7 ff          	movb   $0xff,-0x29(%ebp)
c01020a5:	0f b6 45 d7          	movzbl -0x29(%ebp),%eax
c01020a9:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c01020ad:	ee                   	out    %al,(%dx)
c01020ae:	66 c7 45 fa 20 00    	movw   $0x20,-0x6(%ebp)
c01020b4:	c6 45 d8 11          	movb   $0x11,-0x28(%ebp)
c01020b8:	0f b6 45 d8          	movzbl -0x28(%ebp),%eax
c01020bc:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c01020c0:	ee                   	out    %al,(%dx)
c01020c1:	66 c7 45 f8 21 00    	movw   $0x21,-0x8(%ebp)
c01020c7:	c6 45 d9 20          	movb   $0x20,-0x27(%ebp)
c01020cb:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c01020cf:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
c01020d3:	ee                   	out    %al,(%dx)
c01020d4:	66 c7 45 f6 21 00    	movw   $0x21,-0xa(%ebp)
c01020da:	c6 45 da 04          	movb   $0x4,-0x26(%ebp)
c01020de:	0f b6 45 da          	movzbl -0x26(%ebp),%eax
c01020e2:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c01020e6:	ee                   	out    %al,(%dx)
c01020e7:	66 c7 45 f4 21 00    	movw   $0x21,-0xc(%ebp)
c01020ed:	c6 45 db 03          	movb   $0x3,-0x25(%ebp)
c01020f1:	0f b6 45 db          	movzbl -0x25(%ebp),%eax
c01020f5:	0f b7 55 f4          	movzwl -0xc(%ebp),%edx
c01020f9:	ee                   	out    %al,(%dx)
c01020fa:	66 c7 45 f2 a0 00    	movw   $0xa0,-0xe(%ebp)
c0102100:	c6 45 dc 11          	movb   $0x11,-0x24(%ebp)
c0102104:	0f b6 45 dc          	movzbl -0x24(%ebp),%eax
c0102108:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010210c:	ee                   	out    %al,(%dx)
c010210d:	66 c7 45 f0 a1 00    	movw   $0xa1,-0x10(%ebp)
c0102113:	c6 45 dd 28          	movb   $0x28,-0x23(%ebp)
c0102117:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c010211b:	0f b7 55 f0          	movzwl -0x10(%ebp),%edx
c010211f:	ee                   	out    %al,(%dx)
c0102120:	66 c7 45 ee a1 00    	movw   $0xa1,-0x12(%ebp)
c0102126:	c6 45 de 02          	movb   $0x2,-0x22(%ebp)
c010212a:	0f b6 45 de          	movzbl -0x22(%ebp),%eax
c010212e:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0102132:	ee                   	out    %al,(%dx)
c0102133:	66 c7 45 ec a1 00    	movw   $0xa1,-0x14(%ebp)
c0102139:	c6 45 df 03          	movb   $0x3,-0x21(%ebp)
c010213d:	0f b6 45 df          	movzbl -0x21(%ebp),%eax
c0102141:	0f b7 55 ec          	movzwl -0x14(%ebp),%edx
c0102145:	ee                   	out    %al,(%dx)
c0102146:	66 c7 45 ea 20 00    	movw   $0x20,-0x16(%ebp)
c010214c:	c6 45 e0 68          	movb   $0x68,-0x20(%ebp)
c0102150:	0f b6 45 e0          	movzbl -0x20(%ebp),%eax
c0102154:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0102158:	ee                   	out    %al,(%dx)
c0102159:	66 c7 45 e8 20 00    	movw   $0x20,-0x18(%ebp)
c010215f:	c6 45 e1 0a          	movb   $0xa,-0x1f(%ebp)
c0102163:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0102167:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c010216b:	ee                   	out    %al,(%dx)
c010216c:	66 c7 45 e6 a0 00    	movw   $0xa0,-0x1a(%ebp)
c0102172:	c6 45 e2 68          	movb   $0x68,-0x1e(%ebp)
c0102176:	0f b6 45 e2          	movzbl -0x1e(%ebp),%eax
c010217a:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c010217e:	ee                   	out    %al,(%dx)
c010217f:	66 c7 45 e4 a0 00    	movw   $0xa0,-0x1c(%ebp)
c0102185:	c6 45 e3 0a          	movb   $0xa,-0x1d(%ebp)
c0102189:	0f b6 45 e3          	movzbl -0x1d(%ebp),%eax
c010218d:	0f b7 55 e4          	movzwl -0x1c(%ebp),%edx
c0102191:	ee                   	out    %al,(%dx)
    outb(IO_PIC1, 0x0a);    // read IRR by default

    outb(IO_PIC2, 0x68);    // OCW3
    outb(IO_PIC2, 0x0a);    // OCW3

    if (irq_mask != 0xFFFF) {
c0102192:	0f b7 05 50 15 13 c0 	movzwl 0xc0131550,%eax
c0102199:	66 83 f8 ff          	cmp    $0xffff,%ax
c010219d:	74 13                	je     c01021b2 <pic_init+0x13a>
        pic_setmask(irq_mask);
c010219f:	0f b7 05 50 15 13 c0 	movzwl 0xc0131550,%eax
c01021a6:	0f b7 c0             	movzwl %ax,%eax
c01021a9:	50                   	push   %eax
c01021aa:	e8 43 fe ff ff       	call   c0101ff2 <pic_setmask>
c01021af:	83 c4 04             	add    $0x4,%esp
    }
}
c01021b2:	90                   	nop
c01021b3:	c9                   	leave  
c01021b4:	c3                   	ret    

c01021b5 <intr_enable>:
#include <x86.h>
#include <intr.h>

/* intr_enable - enable irq interrupt */
void
intr_enable(void) {
c01021b5:	55                   	push   %ebp
c01021b6:	89 e5                	mov    %esp,%ebp
    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
}

static inline void
sti(void) {
    asm volatile ("sti");
c01021b8:	fb                   	sti    
    sti();
}
c01021b9:	90                   	nop
c01021ba:	5d                   	pop    %ebp
c01021bb:	c3                   	ret    

c01021bc <intr_disable>:

/* intr_disable - disable irq interrupt */
void
intr_disable(void) {
c01021bc:	55                   	push   %ebp
c01021bd:	89 e5                	mov    %esp,%ebp
}

static inline void
cli(void) {
    asm volatile ("cli" ::: "memory");
c01021bf:	fa                   	cli    
    cli();
}
c01021c0:	90                   	nop
c01021c1:	5d                   	pop    %ebp
c01021c2:	c3                   	ret    

c01021c3 <print_ticks>:
#include <sync.h>
#include <proc.h>

#define TICK_NUM 100

static void print_ticks() {
c01021c3:	55                   	push   %ebp
c01021c4:	89 e5                	mov    %esp,%ebp
c01021c6:	83 ec 08             	sub    $0x8,%esp
    cprintf("%d ticks\n",TICK_NUM);
c01021c9:	83 ec 08             	sub    $0x8,%esp
c01021cc:	6a 64                	push   $0x64
c01021ce:	68 80 d0 10 c0       	push   $0xc010d080
c01021d3:	e8 bf e0 ff ff       	call   c0100297 <cprintf>
c01021d8:	83 c4 10             	add    $0x10,%esp
#ifdef DEBUG_GRADE
    cprintf("End of Test.\n");
    panic("EOT: kernel seems ok.");
#endif
}
c01021db:	90                   	nop
c01021dc:	c9                   	leave  
c01021dd:	c3                   	ret    

c01021de <idt_init>:
/* temporary trapframe or pointer to trapframe */
struct trapframe switchk2u, *switchu2k;

/* idt_init - initialize IDT to each of the entry points in kern/trap/vectors.S */
void
idt_init(void) {
c01021de:	55                   	push   %ebp
c01021df:	89 e5                	mov    %esp,%ebp
c01021e1:	83 ec 10             	sub    $0x10,%esp
     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
     //so you should setup the syscall interrupt gate in here
    // 1. get vectors
    extern uintptr_t __vectors[];
    // 2. setup entries
    for (int i = 0; i < 256; i++) {
c01021e4:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c01021eb:	e9 c3 00 00 00       	jmp    c01022b3 <idt_init+0xd5>
        SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);
c01021f0:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01021f3:	8b 04 85 e0 15 13 c0 	mov    -0x3fecea20(,%eax,4),%eax
c01021fa:	89 c2                	mov    %eax,%edx
c01021fc:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01021ff:	66 89 14 c5 60 47 1c 	mov    %dx,-0x3fe3b8a0(,%eax,8)
c0102206:	c0 
c0102207:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010220a:	66 c7 04 c5 62 47 1c 	movw   $0x8,-0x3fe3b89e(,%eax,8)
c0102211:	c0 08 00 
c0102214:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102217:	0f b6 14 c5 64 47 1c 	movzbl -0x3fe3b89c(,%eax,8),%edx
c010221e:	c0 
c010221f:	83 e2 e0             	and    $0xffffffe0,%edx
c0102222:	88 14 c5 64 47 1c c0 	mov    %dl,-0x3fe3b89c(,%eax,8)
c0102229:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010222c:	0f b6 14 c5 64 47 1c 	movzbl -0x3fe3b89c(,%eax,8),%edx
c0102233:	c0 
c0102234:	83 e2 1f             	and    $0x1f,%edx
c0102237:	88 14 c5 64 47 1c c0 	mov    %dl,-0x3fe3b89c(,%eax,8)
c010223e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102241:	0f b6 14 c5 65 47 1c 	movzbl -0x3fe3b89b(,%eax,8),%edx
c0102248:	c0 
c0102249:	83 e2 f0             	and    $0xfffffff0,%edx
c010224c:	83 ca 0e             	or     $0xe,%edx
c010224f:	88 14 c5 65 47 1c c0 	mov    %dl,-0x3fe3b89b(,%eax,8)
c0102256:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102259:	0f b6 14 c5 65 47 1c 	movzbl -0x3fe3b89b(,%eax,8),%edx
c0102260:	c0 
c0102261:	83 e2 ef             	and    $0xffffffef,%edx
c0102264:	88 14 c5 65 47 1c c0 	mov    %dl,-0x3fe3b89b(,%eax,8)
c010226b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010226e:	0f b6 14 c5 65 47 1c 	movzbl -0x3fe3b89b(,%eax,8),%edx
c0102275:	c0 
c0102276:	83 e2 9f             	and    $0xffffff9f,%edx
c0102279:	88 14 c5 65 47 1c c0 	mov    %dl,-0x3fe3b89b(,%eax,8)
c0102280:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102283:	0f b6 14 c5 65 47 1c 	movzbl -0x3fe3b89b(,%eax,8),%edx
c010228a:	c0 
c010228b:	83 ca 80             	or     $0xffffff80,%edx
c010228e:	88 14 c5 65 47 1c c0 	mov    %dl,-0x3fe3b89b(,%eax,8)
c0102295:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102298:	8b 04 85 e0 15 13 c0 	mov    -0x3fecea20(,%eax,4),%eax
c010229f:	c1 e8 10             	shr    $0x10,%eax
c01022a2:	89 c2                	mov    %eax,%edx
c01022a4:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01022a7:	66 89 14 c5 66 47 1c 	mov    %dx,-0x3fe3b89a(,%eax,8)
c01022ae:	c0 
     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
     //so you should setup the syscall interrupt gate in here
    // 1. get vectors
    extern uintptr_t __vectors[];
    // 2. setup entries
    for (int i = 0; i < 256; i++) {
c01022af:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c01022b3:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
c01022ba:	0f 8e 30 ff ff ff    	jle    c01021f0 <idt_init+0x12>
        SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);
    }
	// set RPL of switch_to_kernel as user 
    SETGATE(idt[T_SWITCH_TOK], 0, GD_KTEXT, __vectors[T_SWITCH_TOK], DPL_USER);
c01022c0:	a1 c4 17 13 c0       	mov    0xc01317c4,%eax
c01022c5:	66 a3 28 4b 1c c0    	mov    %ax,0xc01c4b28
c01022cb:	66 c7 05 2a 4b 1c c0 	movw   $0x8,0xc01c4b2a
c01022d2:	08 00 
c01022d4:	0f b6 05 2c 4b 1c c0 	movzbl 0xc01c4b2c,%eax
c01022db:	83 e0 e0             	and    $0xffffffe0,%eax
c01022de:	a2 2c 4b 1c c0       	mov    %al,0xc01c4b2c
c01022e3:	0f b6 05 2c 4b 1c c0 	movzbl 0xc01c4b2c,%eax
c01022ea:	83 e0 1f             	and    $0x1f,%eax
c01022ed:	a2 2c 4b 1c c0       	mov    %al,0xc01c4b2c
c01022f2:	0f b6 05 2d 4b 1c c0 	movzbl 0xc01c4b2d,%eax
c01022f9:	83 e0 f0             	and    $0xfffffff0,%eax
c01022fc:	83 c8 0e             	or     $0xe,%eax
c01022ff:	a2 2d 4b 1c c0       	mov    %al,0xc01c4b2d
c0102304:	0f b6 05 2d 4b 1c c0 	movzbl 0xc01c4b2d,%eax
c010230b:	83 e0 ef             	and    $0xffffffef,%eax
c010230e:	a2 2d 4b 1c c0       	mov    %al,0xc01c4b2d
c0102313:	0f b6 05 2d 4b 1c c0 	movzbl 0xc01c4b2d,%eax
c010231a:	83 c8 60             	or     $0x60,%eax
c010231d:	a2 2d 4b 1c c0       	mov    %al,0xc01c4b2d
c0102322:	0f b6 05 2d 4b 1c c0 	movzbl 0xc01c4b2d,%eax
c0102329:	83 c8 80             	or     $0xffffff80,%eax
c010232c:	a2 2d 4b 1c c0       	mov    %al,0xc01c4b2d
c0102331:	a1 c4 17 13 c0       	mov    0xc01317c4,%eax
c0102336:	c1 e8 10             	shr    $0x10,%eax
c0102339:	66 a3 2e 4b 1c c0    	mov    %ax,0xc01c4b2e
    // set trap gate
    SETGATE(idt[T_SYSCALL], 1, GD_KTEXT, __vectors[T_SYSCALL], DPL_USER);
c010233f:	a1 e0 17 13 c0       	mov    0xc01317e0,%eax
c0102344:	66 a3 60 4b 1c c0    	mov    %ax,0xc01c4b60
c010234a:	66 c7 05 62 4b 1c c0 	movw   $0x8,0xc01c4b62
c0102351:	08 00 
c0102353:	0f b6 05 64 4b 1c c0 	movzbl 0xc01c4b64,%eax
c010235a:	83 e0 e0             	and    $0xffffffe0,%eax
c010235d:	a2 64 4b 1c c0       	mov    %al,0xc01c4b64
c0102362:	0f b6 05 64 4b 1c c0 	movzbl 0xc01c4b64,%eax
c0102369:	83 e0 1f             	and    $0x1f,%eax
c010236c:	a2 64 4b 1c c0       	mov    %al,0xc01c4b64
c0102371:	0f b6 05 65 4b 1c c0 	movzbl 0xc01c4b65,%eax
c0102378:	83 c8 0f             	or     $0xf,%eax
c010237b:	a2 65 4b 1c c0       	mov    %al,0xc01c4b65
c0102380:	0f b6 05 65 4b 1c c0 	movzbl 0xc01c4b65,%eax
c0102387:	83 e0 ef             	and    $0xffffffef,%eax
c010238a:	a2 65 4b 1c c0       	mov    %al,0xc01c4b65
c010238f:	0f b6 05 65 4b 1c c0 	movzbl 0xc01c4b65,%eax
c0102396:	83 c8 60             	or     $0x60,%eax
c0102399:	a2 65 4b 1c c0       	mov    %al,0xc01c4b65
c010239e:	0f b6 05 65 4b 1c c0 	movzbl 0xc01c4b65,%eax
c01023a5:	83 c8 80             	or     $0xffffff80,%eax
c01023a8:	a2 65 4b 1c c0       	mov    %al,0xc01c4b65
c01023ad:	a1 e0 17 13 c0       	mov    0xc01317e0,%eax
c01023b2:	c1 e8 10             	shr    $0x10,%eax
c01023b5:	66 a3 66 4b 1c c0    	mov    %ax,0xc01c4b66
c01023bb:	c7 45 f8 60 15 13 c0 	movl   $0xc0131560,-0x8(%ebp)
    }
}

static inline void
lidt(struct pseudodesc *pd) {
    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
c01023c2:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01023c5:	0f 01 18             	lidtl  (%eax)
    // 3. LIDT
    lidt(&idt_pd);
}
c01023c8:	90                   	nop
c01023c9:	c9                   	leave  
c01023ca:	c3                   	ret    

c01023cb <trapname>:

static const char *
trapname(int trapno) {
c01023cb:	55                   	push   %ebp
c01023cc:	89 e5                	mov    %esp,%ebp
        "Alignment Check",
        "Machine-Check",
        "SIMD Floating-Point Exception"
    };

    if (trapno < sizeof(excnames)/sizeof(const char * const)) {
c01023ce:	8b 45 08             	mov    0x8(%ebp),%eax
c01023d1:	83 f8 13             	cmp    $0x13,%eax
c01023d4:	77 0c                	ja     c01023e2 <trapname+0x17>
        return excnames[trapno];
c01023d6:	8b 45 08             	mov    0x8(%ebp),%eax
c01023d9:	8b 04 85 00 d5 10 c0 	mov    -0x3fef2b00(,%eax,4),%eax
c01023e0:	eb 18                	jmp    c01023fa <trapname+0x2f>
    }
    if (trapno >= IRQ_OFFSET && trapno < IRQ_OFFSET + 16) {
c01023e2:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
c01023e6:	7e 0d                	jle    c01023f5 <trapname+0x2a>
c01023e8:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
c01023ec:	7f 07                	jg     c01023f5 <trapname+0x2a>
        return "Hardware Interrupt";
c01023ee:	b8 8a d0 10 c0       	mov    $0xc010d08a,%eax
c01023f3:	eb 05                	jmp    c01023fa <trapname+0x2f>
    }
    return "(unknown trap)";
c01023f5:	b8 9d d0 10 c0       	mov    $0xc010d09d,%eax
}
c01023fa:	5d                   	pop    %ebp
c01023fb:	c3                   	ret    

c01023fc <trap_in_kernel>:

/* trap_in_kernel - test if trap happened in kernel */
bool
trap_in_kernel(struct trapframe *tf) {
c01023fc:	55                   	push   %ebp
c01023fd:	89 e5                	mov    %esp,%ebp
    return (tf->tf_cs == (uint16_t)KERNEL_CS);
c01023ff:	8b 45 08             	mov    0x8(%ebp),%eax
c0102402:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c0102406:	66 83 f8 08          	cmp    $0x8,%ax
c010240a:	0f 94 c0             	sete   %al
c010240d:	0f b6 c0             	movzbl %al,%eax
}
c0102410:	5d                   	pop    %ebp
c0102411:	c3                   	ret    

c0102412 <print_trapframe>:
    "TF", "IF", "DF", "OF", NULL, NULL, "NT", NULL,
    "RF", "VM", "AC", "VIF", "VIP", "ID", NULL, NULL,
};

void
print_trapframe(struct trapframe *tf) {
c0102412:	55                   	push   %ebp
c0102413:	89 e5                	mov    %esp,%ebp
c0102415:	83 ec 18             	sub    $0x18,%esp
    cprintf("trapframe at %p\n", tf);
c0102418:	83 ec 08             	sub    $0x8,%esp
c010241b:	ff 75 08             	pushl  0x8(%ebp)
c010241e:	68 de d0 10 c0       	push   $0xc010d0de
c0102423:	e8 6f de ff ff       	call   c0100297 <cprintf>
c0102428:	83 c4 10             	add    $0x10,%esp
    print_regs(&tf->tf_regs);
c010242b:	8b 45 08             	mov    0x8(%ebp),%eax
c010242e:	83 ec 0c             	sub    $0xc,%esp
c0102431:	50                   	push   %eax
c0102432:	e8 b8 01 00 00       	call   c01025ef <print_regs>
c0102437:	83 c4 10             	add    $0x10,%esp
    cprintf("  ds   0x----%04x\n", tf->tf_ds);
c010243a:	8b 45 08             	mov    0x8(%ebp),%eax
c010243d:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c0102441:	0f b7 c0             	movzwl %ax,%eax
c0102444:	83 ec 08             	sub    $0x8,%esp
c0102447:	50                   	push   %eax
c0102448:	68 ef d0 10 c0       	push   $0xc010d0ef
c010244d:	e8 45 de ff ff       	call   c0100297 <cprintf>
c0102452:	83 c4 10             	add    $0x10,%esp
    cprintf("  es   0x----%04x\n", tf->tf_es);
c0102455:	8b 45 08             	mov    0x8(%ebp),%eax
c0102458:	0f b7 40 28          	movzwl 0x28(%eax),%eax
c010245c:	0f b7 c0             	movzwl %ax,%eax
c010245f:	83 ec 08             	sub    $0x8,%esp
c0102462:	50                   	push   %eax
c0102463:	68 02 d1 10 c0       	push   $0xc010d102
c0102468:	e8 2a de ff ff       	call   c0100297 <cprintf>
c010246d:	83 c4 10             	add    $0x10,%esp
    cprintf("  fs   0x----%04x\n", tf->tf_fs);
c0102470:	8b 45 08             	mov    0x8(%ebp),%eax
c0102473:	0f b7 40 24          	movzwl 0x24(%eax),%eax
c0102477:	0f b7 c0             	movzwl %ax,%eax
c010247a:	83 ec 08             	sub    $0x8,%esp
c010247d:	50                   	push   %eax
c010247e:	68 15 d1 10 c0       	push   $0xc010d115
c0102483:	e8 0f de ff ff       	call   c0100297 <cprintf>
c0102488:	83 c4 10             	add    $0x10,%esp
    cprintf("  gs   0x----%04x\n", tf->tf_gs);
c010248b:	8b 45 08             	mov    0x8(%ebp),%eax
c010248e:	0f b7 40 20          	movzwl 0x20(%eax),%eax
c0102492:	0f b7 c0             	movzwl %ax,%eax
c0102495:	83 ec 08             	sub    $0x8,%esp
c0102498:	50                   	push   %eax
c0102499:	68 28 d1 10 c0       	push   $0xc010d128
c010249e:	e8 f4 dd ff ff       	call   c0100297 <cprintf>
c01024a3:	83 c4 10             	add    $0x10,%esp
    cprintf("  trap 0x%08x %s\n", tf->tf_trapno, trapname(tf->tf_trapno));
c01024a6:	8b 45 08             	mov    0x8(%ebp),%eax
c01024a9:	8b 40 30             	mov    0x30(%eax),%eax
c01024ac:	83 ec 0c             	sub    $0xc,%esp
c01024af:	50                   	push   %eax
c01024b0:	e8 16 ff ff ff       	call   c01023cb <trapname>
c01024b5:	83 c4 10             	add    $0x10,%esp
c01024b8:	89 c2                	mov    %eax,%edx
c01024ba:	8b 45 08             	mov    0x8(%ebp),%eax
c01024bd:	8b 40 30             	mov    0x30(%eax),%eax
c01024c0:	83 ec 04             	sub    $0x4,%esp
c01024c3:	52                   	push   %edx
c01024c4:	50                   	push   %eax
c01024c5:	68 3b d1 10 c0       	push   $0xc010d13b
c01024ca:	e8 c8 dd ff ff       	call   c0100297 <cprintf>
c01024cf:	83 c4 10             	add    $0x10,%esp
    cprintf("  err  0x%08x\n", tf->tf_err);
c01024d2:	8b 45 08             	mov    0x8(%ebp),%eax
c01024d5:	8b 40 34             	mov    0x34(%eax),%eax
c01024d8:	83 ec 08             	sub    $0x8,%esp
c01024db:	50                   	push   %eax
c01024dc:	68 4d d1 10 c0       	push   $0xc010d14d
c01024e1:	e8 b1 dd ff ff       	call   c0100297 <cprintf>
c01024e6:	83 c4 10             	add    $0x10,%esp
    cprintf("  eip  0x%08x\n", tf->tf_eip);
c01024e9:	8b 45 08             	mov    0x8(%ebp),%eax
c01024ec:	8b 40 38             	mov    0x38(%eax),%eax
c01024ef:	83 ec 08             	sub    $0x8,%esp
c01024f2:	50                   	push   %eax
c01024f3:	68 5c d1 10 c0       	push   $0xc010d15c
c01024f8:	e8 9a dd ff ff       	call   c0100297 <cprintf>
c01024fd:	83 c4 10             	add    $0x10,%esp
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
c0102500:	8b 45 08             	mov    0x8(%ebp),%eax
c0102503:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c0102507:	0f b7 c0             	movzwl %ax,%eax
c010250a:	83 ec 08             	sub    $0x8,%esp
c010250d:	50                   	push   %eax
c010250e:	68 6b d1 10 c0       	push   $0xc010d16b
c0102513:	e8 7f dd ff ff       	call   c0100297 <cprintf>
c0102518:	83 c4 10             	add    $0x10,%esp
    cprintf("  flag 0x%08x ", tf->tf_eflags);
c010251b:	8b 45 08             	mov    0x8(%ebp),%eax
c010251e:	8b 40 40             	mov    0x40(%eax),%eax
c0102521:	83 ec 08             	sub    $0x8,%esp
c0102524:	50                   	push   %eax
c0102525:	68 7e d1 10 c0       	push   $0xc010d17e
c010252a:	e8 68 dd ff ff       	call   c0100297 <cprintf>
c010252f:	83 c4 10             	add    $0x10,%esp

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c0102532:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0102539:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c0102540:	eb 3f                	jmp    c0102581 <print_trapframe+0x16f>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
c0102542:	8b 45 08             	mov    0x8(%ebp),%eax
c0102545:	8b 50 40             	mov    0x40(%eax),%edx
c0102548:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010254b:	21 d0                	and    %edx,%eax
c010254d:	85 c0                	test   %eax,%eax
c010254f:	74 29                	je     c010257a <print_trapframe+0x168>
c0102551:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102554:	8b 04 85 80 15 13 c0 	mov    -0x3fecea80(,%eax,4),%eax
c010255b:	85 c0                	test   %eax,%eax
c010255d:	74 1b                	je     c010257a <print_trapframe+0x168>
            cprintf("%s,", IA32flags[i]);
c010255f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102562:	8b 04 85 80 15 13 c0 	mov    -0x3fecea80(,%eax,4),%eax
c0102569:	83 ec 08             	sub    $0x8,%esp
c010256c:	50                   	push   %eax
c010256d:	68 8d d1 10 c0       	push   $0xc010d18d
c0102572:	e8 20 dd ff ff       	call   c0100297 <cprintf>
c0102577:	83 c4 10             	add    $0x10,%esp
    cprintf("  eip  0x%08x\n", tf->tf_eip);
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
    cprintf("  flag 0x%08x ", tf->tf_eflags);

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c010257a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010257e:	d1 65 f0             	shll   -0x10(%ebp)
c0102581:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102584:	83 f8 17             	cmp    $0x17,%eax
c0102587:	76 b9                	jbe    c0102542 <print_trapframe+0x130>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
            cprintf("%s,", IA32flags[i]);
        }
    }
    cprintf("IOPL=%d\n", (tf->tf_eflags & FL_IOPL_MASK) >> 12);
c0102589:	8b 45 08             	mov    0x8(%ebp),%eax
c010258c:	8b 40 40             	mov    0x40(%eax),%eax
c010258f:	25 00 30 00 00       	and    $0x3000,%eax
c0102594:	c1 e8 0c             	shr    $0xc,%eax
c0102597:	83 ec 08             	sub    $0x8,%esp
c010259a:	50                   	push   %eax
c010259b:	68 91 d1 10 c0       	push   $0xc010d191
c01025a0:	e8 f2 dc ff ff       	call   c0100297 <cprintf>
c01025a5:	83 c4 10             	add    $0x10,%esp

    if (!trap_in_kernel(tf)) {
c01025a8:	83 ec 0c             	sub    $0xc,%esp
c01025ab:	ff 75 08             	pushl  0x8(%ebp)
c01025ae:	e8 49 fe ff ff       	call   c01023fc <trap_in_kernel>
c01025b3:	83 c4 10             	add    $0x10,%esp
c01025b6:	85 c0                	test   %eax,%eax
c01025b8:	75 32                	jne    c01025ec <print_trapframe+0x1da>
        cprintf("  esp  0x%08x\n", tf->tf_esp);
c01025ba:	8b 45 08             	mov    0x8(%ebp),%eax
c01025bd:	8b 40 44             	mov    0x44(%eax),%eax
c01025c0:	83 ec 08             	sub    $0x8,%esp
c01025c3:	50                   	push   %eax
c01025c4:	68 9a d1 10 c0       	push   $0xc010d19a
c01025c9:	e8 c9 dc ff ff       	call   c0100297 <cprintf>
c01025ce:	83 c4 10             	add    $0x10,%esp
        cprintf("  ss   0x----%04x\n", tf->tf_ss);
c01025d1:	8b 45 08             	mov    0x8(%ebp),%eax
c01025d4:	0f b7 40 48          	movzwl 0x48(%eax),%eax
c01025d8:	0f b7 c0             	movzwl %ax,%eax
c01025db:	83 ec 08             	sub    $0x8,%esp
c01025de:	50                   	push   %eax
c01025df:	68 a9 d1 10 c0       	push   $0xc010d1a9
c01025e4:	e8 ae dc ff ff       	call   c0100297 <cprintf>
c01025e9:	83 c4 10             	add    $0x10,%esp
    }
}
c01025ec:	90                   	nop
c01025ed:	c9                   	leave  
c01025ee:	c3                   	ret    

c01025ef <print_regs>:

void
print_regs(struct pushregs *regs) {
c01025ef:	55                   	push   %ebp
c01025f0:	89 e5                	mov    %esp,%ebp
c01025f2:	83 ec 08             	sub    $0x8,%esp
    cprintf("  edi  0x%08x\n", regs->reg_edi);
c01025f5:	8b 45 08             	mov    0x8(%ebp),%eax
c01025f8:	8b 00                	mov    (%eax),%eax
c01025fa:	83 ec 08             	sub    $0x8,%esp
c01025fd:	50                   	push   %eax
c01025fe:	68 bc d1 10 c0       	push   $0xc010d1bc
c0102603:	e8 8f dc ff ff       	call   c0100297 <cprintf>
c0102608:	83 c4 10             	add    $0x10,%esp
    cprintf("  esi  0x%08x\n", regs->reg_esi);
c010260b:	8b 45 08             	mov    0x8(%ebp),%eax
c010260e:	8b 40 04             	mov    0x4(%eax),%eax
c0102611:	83 ec 08             	sub    $0x8,%esp
c0102614:	50                   	push   %eax
c0102615:	68 cb d1 10 c0       	push   $0xc010d1cb
c010261a:	e8 78 dc ff ff       	call   c0100297 <cprintf>
c010261f:	83 c4 10             	add    $0x10,%esp
    cprintf("  ebp  0x%08x\n", regs->reg_ebp);
c0102622:	8b 45 08             	mov    0x8(%ebp),%eax
c0102625:	8b 40 08             	mov    0x8(%eax),%eax
c0102628:	83 ec 08             	sub    $0x8,%esp
c010262b:	50                   	push   %eax
c010262c:	68 da d1 10 c0       	push   $0xc010d1da
c0102631:	e8 61 dc ff ff       	call   c0100297 <cprintf>
c0102636:	83 c4 10             	add    $0x10,%esp
    cprintf("  oesp 0x%08x\n", regs->reg_oesp);
c0102639:	8b 45 08             	mov    0x8(%ebp),%eax
c010263c:	8b 40 0c             	mov    0xc(%eax),%eax
c010263f:	83 ec 08             	sub    $0x8,%esp
c0102642:	50                   	push   %eax
c0102643:	68 e9 d1 10 c0       	push   $0xc010d1e9
c0102648:	e8 4a dc ff ff       	call   c0100297 <cprintf>
c010264d:	83 c4 10             	add    $0x10,%esp
    cprintf("  ebx  0x%08x\n", regs->reg_ebx);
c0102650:	8b 45 08             	mov    0x8(%ebp),%eax
c0102653:	8b 40 10             	mov    0x10(%eax),%eax
c0102656:	83 ec 08             	sub    $0x8,%esp
c0102659:	50                   	push   %eax
c010265a:	68 f8 d1 10 c0       	push   $0xc010d1f8
c010265f:	e8 33 dc ff ff       	call   c0100297 <cprintf>
c0102664:	83 c4 10             	add    $0x10,%esp
    cprintf("  edx  0x%08x\n", regs->reg_edx);
c0102667:	8b 45 08             	mov    0x8(%ebp),%eax
c010266a:	8b 40 14             	mov    0x14(%eax),%eax
c010266d:	83 ec 08             	sub    $0x8,%esp
c0102670:	50                   	push   %eax
c0102671:	68 07 d2 10 c0       	push   $0xc010d207
c0102676:	e8 1c dc ff ff       	call   c0100297 <cprintf>
c010267b:	83 c4 10             	add    $0x10,%esp
    cprintf("  ecx  0x%08x\n", regs->reg_ecx);
c010267e:	8b 45 08             	mov    0x8(%ebp),%eax
c0102681:	8b 40 18             	mov    0x18(%eax),%eax
c0102684:	83 ec 08             	sub    $0x8,%esp
c0102687:	50                   	push   %eax
c0102688:	68 16 d2 10 c0       	push   $0xc010d216
c010268d:	e8 05 dc ff ff       	call   c0100297 <cprintf>
c0102692:	83 c4 10             	add    $0x10,%esp
    cprintf("  eax  0x%08x\n", regs->reg_eax);
c0102695:	8b 45 08             	mov    0x8(%ebp),%eax
c0102698:	8b 40 1c             	mov    0x1c(%eax),%eax
c010269b:	83 ec 08             	sub    $0x8,%esp
c010269e:	50                   	push   %eax
c010269f:	68 25 d2 10 c0       	push   $0xc010d225
c01026a4:	e8 ee db ff ff       	call   c0100297 <cprintf>
c01026a9:	83 c4 10             	add    $0x10,%esp
}
c01026ac:	90                   	nop
c01026ad:	c9                   	leave  
c01026ae:	c3                   	ret    

c01026af <print_pgfault>:

static inline void
print_pgfault(struct trapframe *tf) {
c01026af:	55                   	push   %ebp
c01026b0:	89 e5                	mov    %esp,%ebp
c01026b2:	53                   	push   %ebx
c01026b3:	83 ec 14             	sub    $0x14,%esp
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
            (tf->tf_err & 1) ? "protection fault" : "no page found");
c01026b6:	8b 45 08             	mov    0x8(%ebp),%eax
c01026b9:	8b 40 34             	mov    0x34(%eax),%eax
c01026bc:	83 e0 01             	and    $0x1,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c01026bf:	85 c0                	test   %eax,%eax
c01026c1:	74 07                	je     c01026ca <print_pgfault+0x1b>
c01026c3:	bb 34 d2 10 c0       	mov    $0xc010d234,%ebx
c01026c8:	eb 05                	jmp    c01026cf <print_pgfault+0x20>
c01026ca:	bb 45 d2 10 c0       	mov    $0xc010d245,%ebx
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
c01026cf:	8b 45 08             	mov    0x8(%ebp),%eax
c01026d2:	8b 40 34             	mov    0x34(%eax),%eax
c01026d5:	83 e0 02             	and    $0x2,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c01026d8:	85 c0                	test   %eax,%eax
c01026da:	74 07                	je     c01026e3 <print_pgfault+0x34>
c01026dc:	b9 57 00 00 00       	mov    $0x57,%ecx
c01026e1:	eb 05                	jmp    c01026e8 <print_pgfault+0x39>
c01026e3:	b9 52 00 00 00       	mov    $0x52,%ecx
            (tf->tf_err & 4) ? 'U' : 'K',
c01026e8:	8b 45 08             	mov    0x8(%ebp),%eax
c01026eb:	8b 40 34             	mov    0x34(%eax),%eax
c01026ee:	83 e0 04             	and    $0x4,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c01026f1:	85 c0                	test   %eax,%eax
c01026f3:	74 07                	je     c01026fc <print_pgfault+0x4d>
c01026f5:	ba 55 00 00 00       	mov    $0x55,%edx
c01026fa:	eb 05                	jmp    c0102701 <print_pgfault+0x52>
c01026fc:	ba 4b 00 00 00       	mov    $0x4b,%edx
}

static inline uintptr_t
rcr2(void) {
    uintptr_t cr2;
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c0102701:	0f 20 d0             	mov    %cr2,%eax
c0102704:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return cr2;
c0102707:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010270a:	83 ec 0c             	sub    $0xc,%esp
c010270d:	53                   	push   %ebx
c010270e:	51                   	push   %ecx
c010270f:	52                   	push   %edx
c0102710:	50                   	push   %eax
c0102711:	68 54 d2 10 c0       	push   $0xc010d254
c0102716:	e8 7c db ff ff       	call   c0100297 <cprintf>
c010271b:	83 c4 20             	add    $0x20,%esp
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
            (tf->tf_err & 1) ? "protection fault" : "no page found");
}
c010271e:	90                   	nop
c010271f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0102722:	c9                   	leave  
c0102723:	c3                   	ret    

c0102724 <pgfault_handler>:

static int
pgfault_handler(struct trapframe *tf) {
c0102724:	55                   	push   %ebp
c0102725:	89 e5                	mov    %esp,%ebp
c0102727:	83 ec 18             	sub    $0x18,%esp
    extern struct mm_struct *check_mm_struct;
    if(check_mm_struct !=NULL) { //used for test check_swap
c010272a:	a1 10 71 1c c0       	mov    0xc01c7110,%eax
c010272f:	85 c0                	test   %eax,%eax
c0102731:	74 0e                	je     c0102741 <pgfault_handler+0x1d>
            print_pgfault(tf);
c0102733:	83 ec 0c             	sub    $0xc,%esp
c0102736:	ff 75 08             	pushl  0x8(%ebp)
c0102739:	e8 71 ff ff ff       	call   c01026af <print_pgfault>
c010273e:	83 c4 10             	add    $0x10,%esp
        }
    struct mm_struct *mm;
    if (check_mm_struct != NULL) {
c0102741:	a1 10 71 1c c0       	mov    0xc01c7110,%eax
c0102746:	85 c0                	test   %eax,%eax
c0102748:	74 32                	je     c010277c <pgfault_handler+0x58>
        assert(current == idleproc);
c010274a:	8b 15 28 50 1c c0    	mov    0xc01c5028,%edx
c0102750:	a1 20 50 1c c0       	mov    0xc01c5020,%eax
c0102755:	39 c2                	cmp    %eax,%edx
c0102757:	74 19                	je     c0102772 <pgfault_handler+0x4e>
c0102759:	68 77 d2 10 c0       	push   $0xc010d277
c010275e:	68 8b d2 10 c0       	push   $0xc010d28b
c0102763:	68 b9 00 00 00       	push   $0xb9
c0102768:	68 a0 d2 10 c0       	push   $0xc010d2a0
c010276d:	e8 8b dc ff ff       	call   c01003fd <__panic>
        mm = check_mm_struct;
c0102772:	a1 10 71 1c c0       	mov    0xc01c7110,%eax
c0102777:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010277a:	eb 47                	jmp    c01027c3 <pgfault_handler+0x9f>
    }
    else {
        if (current == NULL) {
c010277c:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c0102781:	85 c0                	test   %eax,%eax
c0102783:	75 33                	jne    c01027b8 <pgfault_handler+0x94>
            print_trapframe(tf);
c0102785:	83 ec 0c             	sub    $0xc,%esp
c0102788:	ff 75 08             	pushl  0x8(%ebp)
c010278b:	e8 82 fc ff ff       	call   c0102412 <print_trapframe>
c0102790:	83 c4 10             	add    $0x10,%esp
            print_pgfault(tf);
c0102793:	83 ec 0c             	sub    $0xc,%esp
c0102796:	ff 75 08             	pushl  0x8(%ebp)
c0102799:	e8 11 ff ff ff       	call   c01026af <print_pgfault>
c010279e:	83 c4 10             	add    $0x10,%esp
            panic("unhandled page fault.\n");
c01027a1:	83 ec 04             	sub    $0x4,%esp
c01027a4:	68 b1 d2 10 c0       	push   $0xc010d2b1
c01027a9:	68 c0 00 00 00       	push   $0xc0
c01027ae:	68 a0 d2 10 c0       	push   $0xc010d2a0
c01027b3:	e8 45 dc ff ff       	call   c01003fd <__panic>
        }
        mm = current->mm;
c01027b8:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c01027bd:	8b 40 18             	mov    0x18(%eax),%eax
c01027c0:	89 45 f4             	mov    %eax,-0xc(%ebp)
}

static inline uintptr_t
rcr2(void) {
    uintptr_t cr2;
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c01027c3:	0f 20 d0             	mov    %cr2,%eax
c01027c6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return cr2;
c01027c9:	8b 55 f0             	mov    -0x10(%ebp),%edx
    }
    return do_pgfault(mm, tf->tf_err, rcr2());
c01027cc:	8b 45 08             	mov    0x8(%ebp),%eax
c01027cf:	8b 40 34             	mov    0x34(%eax),%eax
c01027d2:	83 ec 04             	sub    $0x4,%esp
c01027d5:	52                   	push   %edx
c01027d6:	50                   	push   %eax
c01027d7:	ff 75 f4             	pushl  -0xc(%ebp)
c01027da:	e8 7f 1b 00 00       	call   c010435e <do_pgfault>
c01027df:	83 c4 10             	add    $0x10,%esp
}
c01027e2:	c9                   	leave  
c01027e3:	c3                   	ret    

c01027e4 <trap_dispatch>:

static volatile int in_swap_tick_event = 0;
extern struct mm_struct *check_mm_struct;

static void
trap_dispatch(struct trapframe *tf) {
c01027e4:	55                   	push   %ebp
c01027e5:	89 e5                	mov    %esp,%ebp
c01027e7:	57                   	push   %edi
c01027e8:	56                   	push   %esi
c01027e9:	53                   	push   %ebx
c01027ea:	83 ec 1c             	sub    $0x1c,%esp
    char c;

    int ret=0;
c01027ed:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

    switch (tf->tf_trapno) {
c01027f4:	8b 45 08             	mov    0x8(%ebp),%eax
c01027f7:	8b 40 30             	mov    0x30(%eax),%eax
c01027fa:	83 f8 2f             	cmp    $0x2f,%eax
c01027fd:	77 38                	ja     c0102837 <trap_dispatch+0x53>
c01027ff:	83 f8 2e             	cmp    $0x2e,%eax
c0102802:	0f 83 69 02 00 00    	jae    c0102a71 <trap_dispatch+0x28d>
c0102808:	83 f8 20             	cmp    $0x20,%eax
c010280b:	0f 84 eb 00 00 00    	je     c01028fc <trap_dispatch+0x118>
c0102811:	83 f8 20             	cmp    $0x20,%eax
c0102814:	77 0a                	ja     c0102820 <trap_dispatch+0x3c>
c0102816:	83 f8 0e             	cmp    $0xe,%eax
c0102819:	74 3e                	je     c0102859 <trap_dispatch+0x75>
c010281b:	e9 06 02 00 00       	jmp    c0102a26 <trap_dispatch+0x242>
c0102820:	83 f8 21             	cmp    $0x21,%eax
c0102823:	0f 84 33 01 00 00    	je     c010295c <trap_dispatch+0x178>
c0102829:	83 f8 24             	cmp    $0x24,%eax
c010282c:	0f 84 03 01 00 00    	je     c0102935 <trap_dispatch+0x151>
c0102832:	e9 ef 01 00 00       	jmp    c0102a26 <trap_dispatch+0x242>
c0102837:	83 f8 79             	cmp    $0x79,%eax
c010283a:	0f 84 b8 01 00 00    	je     c01029f8 <trap_dispatch+0x214>
c0102840:	3d 80 00 00 00       	cmp    $0x80,%eax
c0102845:	0f 84 a7 00 00 00    	je     c01028f2 <trap_dispatch+0x10e>
c010284b:	83 f8 78             	cmp    $0x78,%eax
c010284e:	0f 84 2f 01 00 00    	je     c0102983 <trap_dispatch+0x19f>
c0102854:	e9 cd 01 00 00       	jmp    c0102a26 <trap_dispatch+0x242>
    case T_PGFLT:  //page fault
        if ((ret = pgfault_handler(tf)) != 0) {
c0102859:	83 ec 0c             	sub    $0xc,%esp
c010285c:	ff 75 08             	pushl  0x8(%ebp)
c010285f:	e8 c0 fe ff ff       	call   c0102724 <pgfault_handler>
c0102864:	83 c4 10             	add    $0x10,%esp
c0102867:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010286a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010286e:	0f 84 00 02 00 00    	je     c0102a74 <trap_dispatch+0x290>
            print_trapframe(tf);
c0102874:	83 ec 0c             	sub    $0xc,%esp
c0102877:	ff 75 08             	pushl  0x8(%ebp)
c010287a:	e8 93 fb ff ff       	call   c0102412 <print_trapframe>
c010287f:	83 c4 10             	add    $0x10,%esp
            if (current == NULL) {
c0102882:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c0102887:	85 c0                	test   %eax,%eax
c0102889:	75 17                	jne    c01028a2 <trap_dispatch+0xbe>
                panic("handle pgfault failed. ret=%d\n", ret);
c010288b:	ff 75 e4             	pushl  -0x1c(%ebp)
c010288e:	68 c8 d2 10 c0       	push   $0xc010d2c8
c0102893:	68 d5 00 00 00       	push   $0xd5
c0102898:	68 a0 d2 10 c0       	push   $0xc010d2a0
c010289d:	e8 5b db ff ff       	call   c01003fd <__panic>
            }
            else {
                if (trap_in_kernel(tf)) {
c01028a2:	83 ec 0c             	sub    $0xc,%esp
c01028a5:	ff 75 08             	pushl  0x8(%ebp)
c01028a8:	e8 4f fb ff ff       	call   c01023fc <trap_in_kernel>
c01028ad:	83 c4 10             	add    $0x10,%esp
c01028b0:	85 c0                	test   %eax,%eax
c01028b2:	74 17                	je     c01028cb <trap_dispatch+0xe7>
                    panic("handle pgfault failed in kernel mode. ret=%d\n", ret);
c01028b4:	ff 75 e4             	pushl  -0x1c(%ebp)
c01028b7:	68 e8 d2 10 c0       	push   $0xc010d2e8
c01028bc:	68 d9 00 00 00       	push   $0xd9
c01028c1:	68 a0 d2 10 c0       	push   $0xc010d2a0
c01028c6:	e8 32 db ff ff       	call   c01003fd <__panic>
                }
                cprintf("killed by kernel.\n");
c01028cb:	83 ec 0c             	sub    $0xc,%esp
c01028ce:	68 16 d3 10 c0       	push   $0xc010d316
c01028d3:	e8 bf d9 ff ff       	call   c0100297 <cprintf>
c01028d8:	83 c4 10             	add    $0x10,%esp
                panic("handle user mode pgfault failed. ret=%d\n", ret); 
c01028db:	ff 75 e4             	pushl  -0x1c(%ebp)
c01028de:	68 2c d3 10 c0       	push   $0xc010d32c
c01028e3:	68 dc 00 00 00       	push   $0xdc
c01028e8:	68 a0 d2 10 c0       	push   $0xc010d2a0
c01028ed:	e8 0b db ff ff       	call   c01003fd <__panic>
                do_exit(-E_KILLED);
            }
        }
        break;
    case T_SYSCALL:
        syscall();
c01028f2:	e8 a7 96 00 00       	call   c010bf9e <syscall>
        break;
c01028f7:	e9 79 01 00 00       	jmp    c0102a75 <trap_dispatch+0x291>
        /* LAB7 2015010062 */
        /* you should upate you lab6 code
         * IMPORTANT FUNCTIONS:
	     * run_timer_list
         */
        ticks++;
c01028fc:	a1 b8 70 1c c0       	mov    0xc01c70b8,%eax
c0102901:	83 c0 01             	add    $0x1,%eax
c0102904:	a3 b8 70 1c c0       	mov    %eax,0xc01c70b8
        assert(current != NULL);
c0102909:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010290e:	85 c0                	test   %eax,%eax
c0102910:	75 19                	jne    c010292b <trap_dispatch+0x147>
c0102912:	68 55 d3 10 c0       	push   $0xc010d355
c0102917:	68 8b d2 10 c0       	push   $0xc010d28b
c010291c:	68 fe 00 00 00       	push   $0xfe
c0102921:	68 a0 d2 10 c0       	push   $0xc010d2a0
c0102926:	e8 d2 da ff ff       	call   c01003fd <__panic>
        // sched_class_proc_tick(current);
        run_timer_list();
c010292b:	e8 8b 90 00 00       	call   c010b9bb <run_timer_list>
        break;
c0102930:	e9 40 01 00 00       	jmp    c0102a75 <trap_dispatch+0x291>
    case IRQ_OFFSET + IRQ_COM1:
        c = cons_getc();
c0102935:	e8 46 f6 ff ff       	call   c0101f80 <cons_getc>
c010293a:	88 45 e3             	mov    %al,-0x1d(%ebp)
        cprintf("serial [%03d] %c\n", c, c);
c010293d:	0f be 55 e3          	movsbl -0x1d(%ebp),%edx
c0102941:	0f be 45 e3          	movsbl -0x1d(%ebp),%eax
c0102945:	83 ec 04             	sub    $0x4,%esp
c0102948:	52                   	push   %edx
c0102949:	50                   	push   %eax
c010294a:	68 65 d3 10 c0       	push   $0xc010d365
c010294f:	e8 43 d9 ff ff       	call   c0100297 <cprintf>
c0102954:	83 c4 10             	add    $0x10,%esp
        break;
c0102957:	e9 19 01 00 00       	jmp    c0102a75 <trap_dispatch+0x291>
    case IRQ_OFFSET + IRQ_KBD:
        c = cons_getc();
c010295c:	e8 1f f6 ff ff       	call   c0101f80 <cons_getc>
c0102961:	88 45 e3             	mov    %al,-0x1d(%ebp)
        cprintf("kbd [%03d] %c\n", c, c);
c0102964:	0f be 55 e3          	movsbl -0x1d(%ebp),%edx
c0102968:	0f be 45 e3          	movsbl -0x1d(%ebp),%eax
c010296c:	83 ec 04             	sub    $0x4,%esp
c010296f:	52                   	push   %edx
c0102970:	50                   	push   %eax
c0102971:	68 77 d3 10 c0       	push   $0xc010d377
c0102976:	e8 1c d9 ff ff       	call   c0100297 <cprintf>
c010297b:	83 c4 10             	add    $0x10,%esp
        break;
c010297e:	e9 f2 00 00 00       	jmp    c0102a75 <trap_dispatch+0x291>
    //LAB1 CHALLENGE 1 : YOUR CODE you should modify below codes.
    case T_SWITCH_TOU:
        switchk2u = *tf;
c0102983:	8b 55 08             	mov    0x8(%ebp),%edx
c0102986:	b8 c0 70 1c c0       	mov    $0xc01c70c0,%eax
c010298b:	89 d3                	mov    %edx,%ebx
c010298d:	ba 4c 00 00 00       	mov    $0x4c,%edx
c0102992:	8b 0b                	mov    (%ebx),%ecx
c0102994:	89 08                	mov    %ecx,(%eax)
c0102996:	8b 4c 13 fc          	mov    -0x4(%ebx,%edx,1),%ecx
c010299a:	89 4c 10 fc          	mov    %ecx,-0x4(%eax,%edx,1)
c010299e:	8d 78 04             	lea    0x4(%eax),%edi
c01029a1:	83 e7 fc             	and    $0xfffffffc,%edi
c01029a4:	29 f8                	sub    %edi,%eax
c01029a6:	29 c3                	sub    %eax,%ebx
c01029a8:	01 c2                	add    %eax,%edx
c01029aa:	83 e2 fc             	and    $0xfffffffc,%edx
c01029ad:	89 d0                	mov    %edx,%eax
c01029af:	c1 e8 02             	shr    $0x2,%eax
c01029b2:	89 de                	mov    %ebx,%esi
c01029b4:	89 c1                	mov    %eax,%ecx
c01029b6:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
        switchk2u.tf_cs = USER_CS;
c01029b8:	66 c7 05 fc 70 1c c0 	movw   $0x1b,0xc01c70fc
c01029bf:	1b 00 
        switchk2u.tf_ds = USER_DS;
c01029c1:	66 c7 05 ec 70 1c c0 	movw   $0x23,0xc01c70ec
c01029c8:	23 00 
        switchk2u.tf_es = USER_DS;
c01029ca:	66 c7 05 e8 70 1c c0 	movw   $0x23,0xc01c70e8
c01029d1:	23 00 
        switchk2u.tf_ss = USER_DS;
c01029d3:	66 c7 05 08 71 1c c0 	movw   $0x23,0xc01c7108
c01029da:	23 00 
        switchk2u.tf_eflags |= FL_IOPL_MASK;
c01029dc:	a1 00 71 1c c0       	mov    0xc01c7100,%eax
c01029e1:	80 cc 30             	or     $0x30,%ah
c01029e4:	a3 00 71 1c c0       	mov    %eax,0xc01c7100
        *((uint32_t *)tf - 1) = (uint32_t)&switchk2u;
c01029e9:	8b 45 08             	mov    0x8(%ebp),%eax
c01029ec:	83 e8 04             	sub    $0x4,%eax
c01029ef:	ba c0 70 1c c0       	mov    $0xc01c70c0,%edx
c01029f4:	89 10                	mov    %edx,(%eax)
        break;
c01029f6:	eb 7d                	jmp    c0102a75 <trap_dispatch+0x291>
    case T_SWITCH_TOK:
        tf->tf_cs = KERNEL_CS;
c01029f8:	8b 45 08             	mov    0x8(%ebp),%eax
c01029fb:	66 c7 40 3c 08 00    	movw   $0x8,0x3c(%eax)
        tf->tf_ds = KERNEL_DS;
c0102a01:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a04:	66 c7 40 2c 10 00    	movw   $0x10,0x2c(%eax)
        tf->tf_es = KERNEL_DS;
c0102a0a:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a0d:	66 c7 40 28 10 00    	movw   $0x10,0x28(%eax)
        tf->tf_eflags &= ~FL_IOPL_MASK;
c0102a13:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a16:	8b 40 40             	mov    0x40(%eax),%eax
c0102a19:	80 e4 cf             	and    $0xcf,%ah
c0102a1c:	89 c2                	mov    %eax,%edx
c0102a1e:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a21:	89 50 40             	mov    %edx,0x40(%eax)
        break;
c0102a24:	eb 4f                	jmp    c0102a75 <trap_dispatch+0x291>
    case IRQ_OFFSET + IRQ_IDE1:
    case IRQ_OFFSET + IRQ_IDE2:
        /* do nothing */
        break;
    default:
        print_trapframe(tf);
c0102a26:	83 ec 0c             	sub    $0xc,%esp
c0102a29:	ff 75 08             	pushl  0x8(%ebp)
c0102a2c:	e8 e1 f9 ff ff       	call   c0102412 <print_trapframe>
c0102a31:	83 c4 10             	add    $0x10,%esp
        if (current != NULL) {
c0102a34:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c0102a39:	85 c0                	test   %eax,%eax
c0102a3b:	74 1d                	je     c0102a5a <trap_dispatch+0x276>
            cprintf("unhandled trap.\n");
c0102a3d:	83 ec 0c             	sub    $0xc,%esp
c0102a40:	68 86 d3 10 c0       	push   $0xc010d386
c0102a45:	e8 4d d8 ff ff       	call   c0100297 <cprintf>
c0102a4a:	83 c4 10             	add    $0x10,%esp
            do_exit(-E_KILLED);
c0102a4d:	83 ec 0c             	sub    $0xc,%esp
c0102a50:	6a f7                	push   $0xfffffff7
c0102a52:	e8 8d 7b 00 00       	call   c010a5e4 <do_exit>
c0102a57:	83 c4 10             	add    $0x10,%esp
        }
        // in kernel, it must be a mistake
        panic("unexpected trap in kernel.\n");
c0102a5a:	83 ec 04             	sub    $0x4,%esp
c0102a5d:	68 97 d3 10 c0       	push   $0xc010d397
c0102a62:	68 26 01 00 00       	push   $0x126
c0102a67:	68 a0 d2 10 c0       	push   $0xc010d2a0
c0102a6c:	e8 8c d9 ff ff       	call   c01003fd <__panic>
        break;
    // end of copy
    case IRQ_OFFSET + IRQ_IDE1:
    case IRQ_OFFSET + IRQ_IDE2:
        /* do nothing */
        break;
c0102a71:	90                   	nop
c0102a72:	eb 01                	jmp    c0102a75 <trap_dispatch+0x291>
                cprintf("killed by kernel.\n");
                panic("handle user mode pgfault failed. ret=%d\n", ret); 
                do_exit(-E_KILLED);
            }
        }
        break;
c0102a74:	90                   	nop
        }
        // in kernel, it must be a mistake
        panic("unexpected trap in kernel.\n");

    }
}
c0102a75:	90                   	nop
c0102a76:	8d 65 f4             	lea    -0xc(%ebp),%esp
c0102a79:	5b                   	pop    %ebx
c0102a7a:	5e                   	pop    %esi
c0102a7b:	5f                   	pop    %edi
c0102a7c:	5d                   	pop    %ebp
c0102a7d:	c3                   	ret    

c0102a7e <trap>:
 * trap - handles or dispatches an exception/interrupt. if and when trap() returns,
 * the code in kern/trap/trapentry.S restores the old CPU state saved in the
 * trapframe and then uses the iret instruction to return from the exception.
 * */
void
trap(struct trapframe *tf) {
c0102a7e:	55                   	push   %ebp
c0102a7f:	89 e5                	mov    %esp,%ebp
c0102a81:	83 ec 18             	sub    $0x18,%esp
    // dispatch based on what type of trap occurred
    // used for previous projects
    if (current == NULL) {
c0102a84:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c0102a89:	85 c0                	test   %eax,%eax
c0102a8b:	75 10                	jne    c0102a9d <trap+0x1f>
        trap_dispatch(tf);
c0102a8d:	83 ec 0c             	sub    $0xc,%esp
c0102a90:	ff 75 08             	pushl  0x8(%ebp)
c0102a93:	e8 4c fd ff ff       	call   c01027e4 <trap_dispatch>
c0102a98:	83 c4 10             	add    $0x10,%esp
            if (current->need_resched) {
                schedule();
            }
        }
    }
}
c0102a9b:	eb 73                	jmp    c0102b10 <trap+0x92>
    if (current == NULL) {
        trap_dispatch(tf);
    }
    else {
        // keep a trapframe chain in stack
        struct trapframe *otf = current->tf;
c0102a9d:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c0102aa2:	8b 40 3c             	mov    0x3c(%eax),%eax
c0102aa5:	89 45 f4             	mov    %eax,-0xc(%ebp)
        current->tf = tf;
c0102aa8:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c0102aad:	8b 55 08             	mov    0x8(%ebp),%edx
c0102ab0:	89 50 3c             	mov    %edx,0x3c(%eax)
    
        bool in_kernel = trap_in_kernel(tf);
c0102ab3:	83 ec 0c             	sub    $0xc,%esp
c0102ab6:	ff 75 08             	pushl  0x8(%ebp)
c0102ab9:	e8 3e f9 ff ff       	call   c01023fc <trap_in_kernel>
c0102abe:	83 c4 10             	add    $0x10,%esp
c0102ac1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
        trap_dispatch(tf);
c0102ac4:	83 ec 0c             	sub    $0xc,%esp
c0102ac7:	ff 75 08             	pushl  0x8(%ebp)
c0102aca:	e8 15 fd ff ff       	call   c01027e4 <trap_dispatch>
c0102acf:	83 c4 10             	add    $0x10,%esp
    
        current->tf = otf;
c0102ad2:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c0102ad7:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0102ada:	89 50 3c             	mov    %edx,0x3c(%eax)
        if (!in_kernel) {
c0102add:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0102ae1:	75 2d                	jne    c0102b10 <trap+0x92>
            if (current->flags & PF_EXITING) {
c0102ae3:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c0102ae8:	8b 40 44             	mov    0x44(%eax),%eax
c0102aeb:	83 e0 01             	and    $0x1,%eax
c0102aee:	85 c0                	test   %eax,%eax
c0102af0:	74 0d                	je     c0102aff <trap+0x81>
                do_exit(-E_KILLED);
c0102af2:	83 ec 0c             	sub    $0xc,%esp
c0102af5:	6a f7                	push   $0xfffffff7
c0102af7:	e8 e8 7a 00 00       	call   c010a5e4 <do_exit>
c0102afc:	83 c4 10             	add    $0x10,%esp
            }
            if (current->need_resched) {
c0102aff:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c0102b04:	8b 40 10             	mov    0x10(%eax),%eax
c0102b07:	85 c0                	test   %eax,%eax
c0102b09:	74 05                	je     c0102b10 <trap+0x92>
                schedule();
c0102b0b:	e8 24 8c 00 00       	call   c010b734 <schedule>
            }
        }
    }
}
c0102b10:	90                   	nop
c0102b11:	c9                   	leave  
c0102b12:	c3                   	ret    

c0102b13 <vector0>:
# handler
.text
.globl __alltraps
.globl vector0
vector0:
  pushl $0
c0102b13:	6a 00                	push   $0x0
  pushl $0
c0102b15:	6a 00                	push   $0x0
  jmp __alltraps
c0102b17:	e9 69 0a 00 00       	jmp    c0103585 <__alltraps>

c0102b1c <vector1>:
.globl vector1
vector1:
  pushl $0
c0102b1c:	6a 00                	push   $0x0
  pushl $1
c0102b1e:	6a 01                	push   $0x1
  jmp __alltraps
c0102b20:	e9 60 0a 00 00       	jmp    c0103585 <__alltraps>

c0102b25 <vector2>:
.globl vector2
vector2:
  pushl $0
c0102b25:	6a 00                	push   $0x0
  pushl $2
c0102b27:	6a 02                	push   $0x2
  jmp __alltraps
c0102b29:	e9 57 0a 00 00       	jmp    c0103585 <__alltraps>

c0102b2e <vector3>:
.globl vector3
vector3:
  pushl $0
c0102b2e:	6a 00                	push   $0x0
  pushl $3
c0102b30:	6a 03                	push   $0x3
  jmp __alltraps
c0102b32:	e9 4e 0a 00 00       	jmp    c0103585 <__alltraps>

c0102b37 <vector4>:
.globl vector4
vector4:
  pushl $0
c0102b37:	6a 00                	push   $0x0
  pushl $4
c0102b39:	6a 04                	push   $0x4
  jmp __alltraps
c0102b3b:	e9 45 0a 00 00       	jmp    c0103585 <__alltraps>

c0102b40 <vector5>:
.globl vector5
vector5:
  pushl $0
c0102b40:	6a 00                	push   $0x0
  pushl $5
c0102b42:	6a 05                	push   $0x5
  jmp __alltraps
c0102b44:	e9 3c 0a 00 00       	jmp    c0103585 <__alltraps>

c0102b49 <vector6>:
.globl vector6
vector6:
  pushl $0
c0102b49:	6a 00                	push   $0x0
  pushl $6
c0102b4b:	6a 06                	push   $0x6
  jmp __alltraps
c0102b4d:	e9 33 0a 00 00       	jmp    c0103585 <__alltraps>

c0102b52 <vector7>:
.globl vector7
vector7:
  pushl $0
c0102b52:	6a 00                	push   $0x0
  pushl $7
c0102b54:	6a 07                	push   $0x7
  jmp __alltraps
c0102b56:	e9 2a 0a 00 00       	jmp    c0103585 <__alltraps>

c0102b5b <vector8>:
.globl vector8
vector8:
  pushl $8
c0102b5b:	6a 08                	push   $0x8
  jmp __alltraps
c0102b5d:	e9 23 0a 00 00       	jmp    c0103585 <__alltraps>

c0102b62 <vector9>:
.globl vector9
vector9:
  pushl $0
c0102b62:	6a 00                	push   $0x0
  pushl $9
c0102b64:	6a 09                	push   $0x9
  jmp __alltraps
c0102b66:	e9 1a 0a 00 00       	jmp    c0103585 <__alltraps>

c0102b6b <vector10>:
.globl vector10
vector10:
  pushl $10
c0102b6b:	6a 0a                	push   $0xa
  jmp __alltraps
c0102b6d:	e9 13 0a 00 00       	jmp    c0103585 <__alltraps>

c0102b72 <vector11>:
.globl vector11
vector11:
  pushl $11
c0102b72:	6a 0b                	push   $0xb
  jmp __alltraps
c0102b74:	e9 0c 0a 00 00       	jmp    c0103585 <__alltraps>

c0102b79 <vector12>:
.globl vector12
vector12:
  pushl $12
c0102b79:	6a 0c                	push   $0xc
  jmp __alltraps
c0102b7b:	e9 05 0a 00 00       	jmp    c0103585 <__alltraps>

c0102b80 <vector13>:
.globl vector13
vector13:
  pushl $13
c0102b80:	6a 0d                	push   $0xd
  jmp __alltraps
c0102b82:	e9 fe 09 00 00       	jmp    c0103585 <__alltraps>

c0102b87 <vector14>:
.globl vector14
vector14:
  pushl $14
c0102b87:	6a 0e                	push   $0xe
  jmp __alltraps
c0102b89:	e9 f7 09 00 00       	jmp    c0103585 <__alltraps>

c0102b8e <vector15>:
.globl vector15
vector15:
  pushl $0
c0102b8e:	6a 00                	push   $0x0
  pushl $15
c0102b90:	6a 0f                	push   $0xf
  jmp __alltraps
c0102b92:	e9 ee 09 00 00       	jmp    c0103585 <__alltraps>

c0102b97 <vector16>:
.globl vector16
vector16:
  pushl $0
c0102b97:	6a 00                	push   $0x0
  pushl $16
c0102b99:	6a 10                	push   $0x10
  jmp __alltraps
c0102b9b:	e9 e5 09 00 00       	jmp    c0103585 <__alltraps>

c0102ba0 <vector17>:
.globl vector17
vector17:
  pushl $17
c0102ba0:	6a 11                	push   $0x11
  jmp __alltraps
c0102ba2:	e9 de 09 00 00       	jmp    c0103585 <__alltraps>

c0102ba7 <vector18>:
.globl vector18
vector18:
  pushl $0
c0102ba7:	6a 00                	push   $0x0
  pushl $18
c0102ba9:	6a 12                	push   $0x12
  jmp __alltraps
c0102bab:	e9 d5 09 00 00       	jmp    c0103585 <__alltraps>

c0102bb0 <vector19>:
.globl vector19
vector19:
  pushl $0
c0102bb0:	6a 00                	push   $0x0
  pushl $19
c0102bb2:	6a 13                	push   $0x13
  jmp __alltraps
c0102bb4:	e9 cc 09 00 00       	jmp    c0103585 <__alltraps>

c0102bb9 <vector20>:
.globl vector20
vector20:
  pushl $0
c0102bb9:	6a 00                	push   $0x0
  pushl $20
c0102bbb:	6a 14                	push   $0x14
  jmp __alltraps
c0102bbd:	e9 c3 09 00 00       	jmp    c0103585 <__alltraps>

c0102bc2 <vector21>:
.globl vector21
vector21:
  pushl $0
c0102bc2:	6a 00                	push   $0x0
  pushl $21
c0102bc4:	6a 15                	push   $0x15
  jmp __alltraps
c0102bc6:	e9 ba 09 00 00       	jmp    c0103585 <__alltraps>

c0102bcb <vector22>:
.globl vector22
vector22:
  pushl $0
c0102bcb:	6a 00                	push   $0x0
  pushl $22
c0102bcd:	6a 16                	push   $0x16
  jmp __alltraps
c0102bcf:	e9 b1 09 00 00       	jmp    c0103585 <__alltraps>

c0102bd4 <vector23>:
.globl vector23
vector23:
  pushl $0
c0102bd4:	6a 00                	push   $0x0
  pushl $23
c0102bd6:	6a 17                	push   $0x17
  jmp __alltraps
c0102bd8:	e9 a8 09 00 00       	jmp    c0103585 <__alltraps>

c0102bdd <vector24>:
.globl vector24
vector24:
  pushl $0
c0102bdd:	6a 00                	push   $0x0
  pushl $24
c0102bdf:	6a 18                	push   $0x18
  jmp __alltraps
c0102be1:	e9 9f 09 00 00       	jmp    c0103585 <__alltraps>

c0102be6 <vector25>:
.globl vector25
vector25:
  pushl $0
c0102be6:	6a 00                	push   $0x0
  pushl $25
c0102be8:	6a 19                	push   $0x19
  jmp __alltraps
c0102bea:	e9 96 09 00 00       	jmp    c0103585 <__alltraps>

c0102bef <vector26>:
.globl vector26
vector26:
  pushl $0
c0102bef:	6a 00                	push   $0x0
  pushl $26
c0102bf1:	6a 1a                	push   $0x1a
  jmp __alltraps
c0102bf3:	e9 8d 09 00 00       	jmp    c0103585 <__alltraps>

c0102bf8 <vector27>:
.globl vector27
vector27:
  pushl $0
c0102bf8:	6a 00                	push   $0x0
  pushl $27
c0102bfa:	6a 1b                	push   $0x1b
  jmp __alltraps
c0102bfc:	e9 84 09 00 00       	jmp    c0103585 <__alltraps>

c0102c01 <vector28>:
.globl vector28
vector28:
  pushl $0
c0102c01:	6a 00                	push   $0x0
  pushl $28
c0102c03:	6a 1c                	push   $0x1c
  jmp __alltraps
c0102c05:	e9 7b 09 00 00       	jmp    c0103585 <__alltraps>

c0102c0a <vector29>:
.globl vector29
vector29:
  pushl $0
c0102c0a:	6a 00                	push   $0x0
  pushl $29
c0102c0c:	6a 1d                	push   $0x1d
  jmp __alltraps
c0102c0e:	e9 72 09 00 00       	jmp    c0103585 <__alltraps>

c0102c13 <vector30>:
.globl vector30
vector30:
  pushl $0
c0102c13:	6a 00                	push   $0x0
  pushl $30
c0102c15:	6a 1e                	push   $0x1e
  jmp __alltraps
c0102c17:	e9 69 09 00 00       	jmp    c0103585 <__alltraps>

c0102c1c <vector31>:
.globl vector31
vector31:
  pushl $0
c0102c1c:	6a 00                	push   $0x0
  pushl $31
c0102c1e:	6a 1f                	push   $0x1f
  jmp __alltraps
c0102c20:	e9 60 09 00 00       	jmp    c0103585 <__alltraps>

c0102c25 <vector32>:
.globl vector32
vector32:
  pushl $0
c0102c25:	6a 00                	push   $0x0
  pushl $32
c0102c27:	6a 20                	push   $0x20
  jmp __alltraps
c0102c29:	e9 57 09 00 00       	jmp    c0103585 <__alltraps>

c0102c2e <vector33>:
.globl vector33
vector33:
  pushl $0
c0102c2e:	6a 00                	push   $0x0
  pushl $33
c0102c30:	6a 21                	push   $0x21
  jmp __alltraps
c0102c32:	e9 4e 09 00 00       	jmp    c0103585 <__alltraps>

c0102c37 <vector34>:
.globl vector34
vector34:
  pushl $0
c0102c37:	6a 00                	push   $0x0
  pushl $34
c0102c39:	6a 22                	push   $0x22
  jmp __alltraps
c0102c3b:	e9 45 09 00 00       	jmp    c0103585 <__alltraps>

c0102c40 <vector35>:
.globl vector35
vector35:
  pushl $0
c0102c40:	6a 00                	push   $0x0
  pushl $35
c0102c42:	6a 23                	push   $0x23
  jmp __alltraps
c0102c44:	e9 3c 09 00 00       	jmp    c0103585 <__alltraps>

c0102c49 <vector36>:
.globl vector36
vector36:
  pushl $0
c0102c49:	6a 00                	push   $0x0
  pushl $36
c0102c4b:	6a 24                	push   $0x24
  jmp __alltraps
c0102c4d:	e9 33 09 00 00       	jmp    c0103585 <__alltraps>

c0102c52 <vector37>:
.globl vector37
vector37:
  pushl $0
c0102c52:	6a 00                	push   $0x0
  pushl $37
c0102c54:	6a 25                	push   $0x25
  jmp __alltraps
c0102c56:	e9 2a 09 00 00       	jmp    c0103585 <__alltraps>

c0102c5b <vector38>:
.globl vector38
vector38:
  pushl $0
c0102c5b:	6a 00                	push   $0x0
  pushl $38
c0102c5d:	6a 26                	push   $0x26
  jmp __alltraps
c0102c5f:	e9 21 09 00 00       	jmp    c0103585 <__alltraps>

c0102c64 <vector39>:
.globl vector39
vector39:
  pushl $0
c0102c64:	6a 00                	push   $0x0
  pushl $39
c0102c66:	6a 27                	push   $0x27
  jmp __alltraps
c0102c68:	e9 18 09 00 00       	jmp    c0103585 <__alltraps>

c0102c6d <vector40>:
.globl vector40
vector40:
  pushl $0
c0102c6d:	6a 00                	push   $0x0
  pushl $40
c0102c6f:	6a 28                	push   $0x28
  jmp __alltraps
c0102c71:	e9 0f 09 00 00       	jmp    c0103585 <__alltraps>

c0102c76 <vector41>:
.globl vector41
vector41:
  pushl $0
c0102c76:	6a 00                	push   $0x0
  pushl $41
c0102c78:	6a 29                	push   $0x29
  jmp __alltraps
c0102c7a:	e9 06 09 00 00       	jmp    c0103585 <__alltraps>

c0102c7f <vector42>:
.globl vector42
vector42:
  pushl $0
c0102c7f:	6a 00                	push   $0x0
  pushl $42
c0102c81:	6a 2a                	push   $0x2a
  jmp __alltraps
c0102c83:	e9 fd 08 00 00       	jmp    c0103585 <__alltraps>

c0102c88 <vector43>:
.globl vector43
vector43:
  pushl $0
c0102c88:	6a 00                	push   $0x0
  pushl $43
c0102c8a:	6a 2b                	push   $0x2b
  jmp __alltraps
c0102c8c:	e9 f4 08 00 00       	jmp    c0103585 <__alltraps>

c0102c91 <vector44>:
.globl vector44
vector44:
  pushl $0
c0102c91:	6a 00                	push   $0x0
  pushl $44
c0102c93:	6a 2c                	push   $0x2c
  jmp __alltraps
c0102c95:	e9 eb 08 00 00       	jmp    c0103585 <__alltraps>

c0102c9a <vector45>:
.globl vector45
vector45:
  pushl $0
c0102c9a:	6a 00                	push   $0x0
  pushl $45
c0102c9c:	6a 2d                	push   $0x2d
  jmp __alltraps
c0102c9e:	e9 e2 08 00 00       	jmp    c0103585 <__alltraps>

c0102ca3 <vector46>:
.globl vector46
vector46:
  pushl $0
c0102ca3:	6a 00                	push   $0x0
  pushl $46
c0102ca5:	6a 2e                	push   $0x2e
  jmp __alltraps
c0102ca7:	e9 d9 08 00 00       	jmp    c0103585 <__alltraps>

c0102cac <vector47>:
.globl vector47
vector47:
  pushl $0
c0102cac:	6a 00                	push   $0x0
  pushl $47
c0102cae:	6a 2f                	push   $0x2f
  jmp __alltraps
c0102cb0:	e9 d0 08 00 00       	jmp    c0103585 <__alltraps>

c0102cb5 <vector48>:
.globl vector48
vector48:
  pushl $0
c0102cb5:	6a 00                	push   $0x0
  pushl $48
c0102cb7:	6a 30                	push   $0x30
  jmp __alltraps
c0102cb9:	e9 c7 08 00 00       	jmp    c0103585 <__alltraps>

c0102cbe <vector49>:
.globl vector49
vector49:
  pushl $0
c0102cbe:	6a 00                	push   $0x0
  pushl $49
c0102cc0:	6a 31                	push   $0x31
  jmp __alltraps
c0102cc2:	e9 be 08 00 00       	jmp    c0103585 <__alltraps>

c0102cc7 <vector50>:
.globl vector50
vector50:
  pushl $0
c0102cc7:	6a 00                	push   $0x0
  pushl $50
c0102cc9:	6a 32                	push   $0x32
  jmp __alltraps
c0102ccb:	e9 b5 08 00 00       	jmp    c0103585 <__alltraps>

c0102cd0 <vector51>:
.globl vector51
vector51:
  pushl $0
c0102cd0:	6a 00                	push   $0x0
  pushl $51
c0102cd2:	6a 33                	push   $0x33
  jmp __alltraps
c0102cd4:	e9 ac 08 00 00       	jmp    c0103585 <__alltraps>

c0102cd9 <vector52>:
.globl vector52
vector52:
  pushl $0
c0102cd9:	6a 00                	push   $0x0
  pushl $52
c0102cdb:	6a 34                	push   $0x34
  jmp __alltraps
c0102cdd:	e9 a3 08 00 00       	jmp    c0103585 <__alltraps>

c0102ce2 <vector53>:
.globl vector53
vector53:
  pushl $0
c0102ce2:	6a 00                	push   $0x0
  pushl $53
c0102ce4:	6a 35                	push   $0x35
  jmp __alltraps
c0102ce6:	e9 9a 08 00 00       	jmp    c0103585 <__alltraps>

c0102ceb <vector54>:
.globl vector54
vector54:
  pushl $0
c0102ceb:	6a 00                	push   $0x0
  pushl $54
c0102ced:	6a 36                	push   $0x36
  jmp __alltraps
c0102cef:	e9 91 08 00 00       	jmp    c0103585 <__alltraps>

c0102cf4 <vector55>:
.globl vector55
vector55:
  pushl $0
c0102cf4:	6a 00                	push   $0x0
  pushl $55
c0102cf6:	6a 37                	push   $0x37
  jmp __alltraps
c0102cf8:	e9 88 08 00 00       	jmp    c0103585 <__alltraps>

c0102cfd <vector56>:
.globl vector56
vector56:
  pushl $0
c0102cfd:	6a 00                	push   $0x0
  pushl $56
c0102cff:	6a 38                	push   $0x38
  jmp __alltraps
c0102d01:	e9 7f 08 00 00       	jmp    c0103585 <__alltraps>

c0102d06 <vector57>:
.globl vector57
vector57:
  pushl $0
c0102d06:	6a 00                	push   $0x0
  pushl $57
c0102d08:	6a 39                	push   $0x39
  jmp __alltraps
c0102d0a:	e9 76 08 00 00       	jmp    c0103585 <__alltraps>

c0102d0f <vector58>:
.globl vector58
vector58:
  pushl $0
c0102d0f:	6a 00                	push   $0x0
  pushl $58
c0102d11:	6a 3a                	push   $0x3a
  jmp __alltraps
c0102d13:	e9 6d 08 00 00       	jmp    c0103585 <__alltraps>

c0102d18 <vector59>:
.globl vector59
vector59:
  pushl $0
c0102d18:	6a 00                	push   $0x0
  pushl $59
c0102d1a:	6a 3b                	push   $0x3b
  jmp __alltraps
c0102d1c:	e9 64 08 00 00       	jmp    c0103585 <__alltraps>

c0102d21 <vector60>:
.globl vector60
vector60:
  pushl $0
c0102d21:	6a 00                	push   $0x0
  pushl $60
c0102d23:	6a 3c                	push   $0x3c
  jmp __alltraps
c0102d25:	e9 5b 08 00 00       	jmp    c0103585 <__alltraps>

c0102d2a <vector61>:
.globl vector61
vector61:
  pushl $0
c0102d2a:	6a 00                	push   $0x0
  pushl $61
c0102d2c:	6a 3d                	push   $0x3d
  jmp __alltraps
c0102d2e:	e9 52 08 00 00       	jmp    c0103585 <__alltraps>

c0102d33 <vector62>:
.globl vector62
vector62:
  pushl $0
c0102d33:	6a 00                	push   $0x0
  pushl $62
c0102d35:	6a 3e                	push   $0x3e
  jmp __alltraps
c0102d37:	e9 49 08 00 00       	jmp    c0103585 <__alltraps>

c0102d3c <vector63>:
.globl vector63
vector63:
  pushl $0
c0102d3c:	6a 00                	push   $0x0
  pushl $63
c0102d3e:	6a 3f                	push   $0x3f
  jmp __alltraps
c0102d40:	e9 40 08 00 00       	jmp    c0103585 <__alltraps>

c0102d45 <vector64>:
.globl vector64
vector64:
  pushl $0
c0102d45:	6a 00                	push   $0x0
  pushl $64
c0102d47:	6a 40                	push   $0x40
  jmp __alltraps
c0102d49:	e9 37 08 00 00       	jmp    c0103585 <__alltraps>

c0102d4e <vector65>:
.globl vector65
vector65:
  pushl $0
c0102d4e:	6a 00                	push   $0x0
  pushl $65
c0102d50:	6a 41                	push   $0x41
  jmp __alltraps
c0102d52:	e9 2e 08 00 00       	jmp    c0103585 <__alltraps>

c0102d57 <vector66>:
.globl vector66
vector66:
  pushl $0
c0102d57:	6a 00                	push   $0x0
  pushl $66
c0102d59:	6a 42                	push   $0x42
  jmp __alltraps
c0102d5b:	e9 25 08 00 00       	jmp    c0103585 <__alltraps>

c0102d60 <vector67>:
.globl vector67
vector67:
  pushl $0
c0102d60:	6a 00                	push   $0x0
  pushl $67
c0102d62:	6a 43                	push   $0x43
  jmp __alltraps
c0102d64:	e9 1c 08 00 00       	jmp    c0103585 <__alltraps>

c0102d69 <vector68>:
.globl vector68
vector68:
  pushl $0
c0102d69:	6a 00                	push   $0x0
  pushl $68
c0102d6b:	6a 44                	push   $0x44
  jmp __alltraps
c0102d6d:	e9 13 08 00 00       	jmp    c0103585 <__alltraps>

c0102d72 <vector69>:
.globl vector69
vector69:
  pushl $0
c0102d72:	6a 00                	push   $0x0
  pushl $69
c0102d74:	6a 45                	push   $0x45
  jmp __alltraps
c0102d76:	e9 0a 08 00 00       	jmp    c0103585 <__alltraps>

c0102d7b <vector70>:
.globl vector70
vector70:
  pushl $0
c0102d7b:	6a 00                	push   $0x0
  pushl $70
c0102d7d:	6a 46                	push   $0x46
  jmp __alltraps
c0102d7f:	e9 01 08 00 00       	jmp    c0103585 <__alltraps>

c0102d84 <vector71>:
.globl vector71
vector71:
  pushl $0
c0102d84:	6a 00                	push   $0x0
  pushl $71
c0102d86:	6a 47                	push   $0x47
  jmp __alltraps
c0102d88:	e9 f8 07 00 00       	jmp    c0103585 <__alltraps>

c0102d8d <vector72>:
.globl vector72
vector72:
  pushl $0
c0102d8d:	6a 00                	push   $0x0
  pushl $72
c0102d8f:	6a 48                	push   $0x48
  jmp __alltraps
c0102d91:	e9 ef 07 00 00       	jmp    c0103585 <__alltraps>

c0102d96 <vector73>:
.globl vector73
vector73:
  pushl $0
c0102d96:	6a 00                	push   $0x0
  pushl $73
c0102d98:	6a 49                	push   $0x49
  jmp __alltraps
c0102d9a:	e9 e6 07 00 00       	jmp    c0103585 <__alltraps>

c0102d9f <vector74>:
.globl vector74
vector74:
  pushl $0
c0102d9f:	6a 00                	push   $0x0
  pushl $74
c0102da1:	6a 4a                	push   $0x4a
  jmp __alltraps
c0102da3:	e9 dd 07 00 00       	jmp    c0103585 <__alltraps>

c0102da8 <vector75>:
.globl vector75
vector75:
  pushl $0
c0102da8:	6a 00                	push   $0x0
  pushl $75
c0102daa:	6a 4b                	push   $0x4b
  jmp __alltraps
c0102dac:	e9 d4 07 00 00       	jmp    c0103585 <__alltraps>

c0102db1 <vector76>:
.globl vector76
vector76:
  pushl $0
c0102db1:	6a 00                	push   $0x0
  pushl $76
c0102db3:	6a 4c                	push   $0x4c
  jmp __alltraps
c0102db5:	e9 cb 07 00 00       	jmp    c0103585 <__alltraps>

c0102dba <vector77>:
.globl vector77
vector77:
  pushl $0
c0102dba:	6a 00                	push   $0x0
  pushl $77
c0102dbc:	6a 4d                	push   $0x4d
  jmp __alltraps
c0102dbe:	e9 c2 07 00 00       	jmp    c0103585 <__alltraps>

c0102dc3 <vector78>:
.globl vector78
vector78:
  pushl $0
c0102dc3:	6a 00                	push   $0x0
  pushl $78
c0102dc5:	6a 4e                	push   $0x4e
  jmp __alltraps
c0102dc7:	e9 b9 07 00 00       	jmp    c0103585 <__alltraps>

c0102dcc <vector79>:
.globl vector79
vector79:
  pushl $0
c0102dcc:	6a 00                	push   $0x0
  pushl $79
c0102dce:	6a 4f                	push   $0x4f
  jmp __alltraps
c0102dd0:	e9 b0 07 00 00       	jmp    c0103585 <__alltraps>

c0102dd5 <vector80>:
.globl vector80
vector80:
  pushl $0
c0102dd5:	6a 00                	push   $0x0
  pushl $80
c0102dd7:	6a 50                	push   $0x50
  jmp __alltraps
c0102dd9:	e9 a7 07 00 00       	jmp    c0103585 <__alltraps>

c0102dde <vector81>:
.globl vector81
vector81:
  pushl $0
c0102dde:	6a 00                	push   $0x0
  pushl $81
c0102de0:	6a 51                	push   $0x51
  jmp __alltraps
c0102de2:	e9 9e 07 00 00       	jmp    c0103585 <__alltraps>

c0102de7 <vector82>:
.globl vector82
vector82:
  pushl $0
c0102de7:	6a 00                	push   $0x0
  pushl $82
c0102de9:	6a 52                	push   $0x52
  jmp __alltraps
c0102deb:	e9 95 07 00 00       	jmp    c0103585 <__alltraps>

c0102df0 <vector83>:
.globl vector83
vector83:
  pushl $0
c0102df0:	6a 00                	push   $0x0
  pushl $83
c0102df2:	6a 53                	push   $0x53
  jmp __alltraps
c0102df4:	e9 8c 07 00 00       	jmp    c0103585 <__alltraps>

c0102df9 <vector84>:
.globl vector84
vector84:
  pushl $0
c0102df9:	6a 00                	push   $0x0
  pushl $84
c0102dfb:	6a 54                	push   $0x54
  jmp __alltraps
c0102dfd:	e9 83 07 00 00       	jmp    c0103585 <__alltraps>

c0102e02 <vector85>:
.globl vector85
vector85:
  pushl $0
c0102e02:	6a 00                	push   $0x0
  pushl $85
c0102e04:	6a 55                	push   $0x55
  jmp __alltraps
c0102e06:	e9 7a 07 00 00       	jmp    c0103585 <__alltraps>

c0102e0b <vector86>:
.globl vector86
vector86:
  pushl $0
c0102e0b:	6a 00                	push   $0x0
  pushl $86
c0102e0d:	6a 56                	push   $0x56
  jmp __alltraps
c0102e0f:	e9 71 07 00 00       	jmp    c0103585 <__alltraps>

c0102e14 <vector87>:
.globl vector87
vector87:
  pushl $0
c0102e14:	6a 00                	push   $0x0
  pushl $87
c0102e16:	6a 57                	push   $0x57
  jmp __alltraps
c0102e18:	e9 68 07 00 00       	jmp    c0103585 <__alltraps>

c0102e1d <vector88>:
.globl vector88
vector88:
  pushl $0
c0102e1d:	6a 00                	push   $0x0
  pushl $88
c0102e1f:	6a 58                	push   $0x58
  jmp __alltraps
c0102e21:	e9 5f 07 00 00       	jmp    c0103585 <__alltraps>

c0102e26 <vector89>:
.globl vector89
vector89:
  pushl $0
c0102e26:	6a 00                	push   $0x0
  pushl $89
c0102e28:	6a 59                	push   $0x59
  jmp __alltraps
c0102e2a:	e9 56 07 00 00       	jmp    c0103585 <__alltraps>

c0102e2f <vector90>:
.globl vector90
vector90:
  pushl $0
c0102e2f:	6a 00                	push   $0x0
  pushl $90
c0102e31:	6a 5a                	push   $0x5a
  jmp __alltraps
c0102e33:	e9 4d 07 00 00       	jmp    c0103585 <__alltraps>

c0102e38 <vector91>:
.globl vector91
vector91:
  pushl $0
c0102e38:	6a 00                	push   $0x0
  pushl $91
c0102e3a:	6a 5b                	push   $0x5b
  jmp __alltraps
c0102e3c:	e9 44 07 00 00       	jmp    c0103585 <__alltraps>

c0102e41 <vector92>:
.globl vector92
vector92:
  pushl $0
c0102e41:	6a 00                	push   $0x0
  pushl $92
c0102e43:	6a 5c                	push   $0x5c
  jmp __alltraps
c0102e45:	e9 3b 07 00 00       	jmp    c0103585 <__alltraps>

c0102e4a <vector93>:
.globl vector93
vector93:
  pushl $0
c0102e4a:	6a 00                	push   $0x0
  pushl $93
c0102e4c:	6a 5d                	push   $0x5d
  jmp __alltraps
c0102e4e:	e9 32 07 00 00       	jmp    c0103585 <__alltraps>

c0102e53 <vector94>:
.globl vector94
vector94:
  pushl $0
c0102e53:	6a 00                	push   $0x0
  pushl $94
c0102e55:	6a 5e                	push   $0x5e
  jmp __alltraps
c0102e57:	e9 29 07 00 00       	jmp    c0103585 <__alltraps>

c0102e5c <vector95>:
.globl vector95
vector95:
  pushl $0
c0102e5c:	6a 00                	push   $0x0
  pushl $95
c0102e5e:	6a 5f                	push   $0x5f
  jmp __alltraps
c0102e60:	e9 20 07 00 00       	jmp    c0103585 <__alltraps>

c0102e65 <vector96>:
.globl vector96
vector96:
  pushl $0
c0102e65:	6a 00                	push   $0x0
  pushl $96
c0102e67:	6a 60                	push   $0x60
  jmp __alltraps
c0102e69:	e9 17 07 00 00       	jmp    c0103585 <__alltraps>

c0102e6e <vector97>:
.globl vector97
vector97:
  pushl $0
c0102e6e:	6a 00                	push   $0x0
  pushl $97
c0102e70:	6a 61                	push   $0x61
  jmp __alltraps
c0102e72:	e9 0e 07 00 00       	jmp    c0103585 <__alltraps>

c0102e77 <vector98>:
.globl vector98
vector98:
  pushl $0
c0102e77:	6a 00                	push   $0x0
  pushl $98
c0102e79:	6a 62                	push   $0x62
  jmp __alltraps
c0102e7b:	e9 05 07 00 00       	jmp    c0103585 <__alltraps>

c0102e80 <vector99>:
.globl vector99
vector99:
  pushl $0
c0102e80:	6a 00                	push   $0x0
  pushl $99
c0102e82:	6a 63                	push   $0x63
  jmp __alltraps
c0102e84:	e9 fc 06 00 00       	jmp    c0103585 <__alltraps>

c0102e89 <vector100>:
.globl vector100
vector100:
  pushl $0
c0102e89:	6a 00                	push   $0x0
  pushl $100
c0102e8b:	6a 64                	push   $0x64
  jmp __alltraps
c0102e8d:	e9 f3 06 00 00       	jmp    c0103585 <__alltraps>

c0102e92 <vector101>:
.globl vector101
vector101:
  pushl $0
c0102e92:	6a 00                	push   $0x0
  pushl $101
c0102e94:	6a 65                	push   $0x65
  jmp __alltraps
c0102e96:	e9 ea 06 00 00       	jmp    c0103585 <__alltraps>

c0102e9b <vector102>:
.globl vector102
vector102:
  pushl $0
c0102e9b:	6a 00                	push   $0x0
  pushl $102
c0102e9d:	6a 66                	push   $0x66
  jmp __alltraps
c0102e9f:	e9 e1 06 00 00       	jmp    c0103585 <__alltraps>

c0102ea4 <vector103>:
.globl vector103
vector103:
  pushl $0
c0102ea4:	6a 00                	push   $0x0
  pushl $103
c0102ea6:	6a 67                	push   $0x67
  jmp __alltraps
c0102ea8:	e9 d8 06 00 00       	jmp    c0103585 <__alltraps>

c0102ead <vector104>:
.globl vector104
vector104:
  pushl $0
c0102ead:	6a 00                	push   $0x0
  pushl $104
c0102eaf:	6a 68                	push   $0x68
  jmp __alltraps
c0102eb1:	e9 cf 06 00 00       	jmp    c0103585 <__alltraps>

c0102eb6 <vector105>:
.globl vector105
vector105:
  pushl $0
c0102eb6:	6a 00                	push   $0x0
  pushl $105
c0102eb8:	6a 69                	push   $0x69
  jmp __alltraps
c0102eba:	e9 c6 06 00 00       	jmp    c0103585 <__alltraps>

c0102ebf <vector106>:
.globl vector106
vector106:
  pushl $0
c0102ebf:	6a 00                	push   $0x0
  pushl $106
c0102ec1:	6a 6a                	push   $0x6a
  jmp __alltraps
c0102ec3:	e9 bd 06 00 00       	jmp    c0103585 <__alltraps>

c0102ec8 <vector107>:
.globl vector107
vector107:
  pushl $0
c0102ec8:	6a 00                	push   $0x0
  pushl $107
c0102eca:	6a 6b                	push   $0x6b
  jmp __alltraps
c0102ecc:	e9 b4 06 00 00       	jmp    c0103585 <__alltraps>

c0102ed1 <vector108>:
.globl vector108
vector108:
  pushl $0
c0102ed1:	6a 00                	push   $0x0
  pushl $108
c0102ed3:	6a 6c                	push   $0x6c
  jmp __alltraps
c0102ed5:	e9 ab 06 00 00       	jmp    c0103585 <__alltraps>

c0102eda <vector109>:
.globl vector109
vector109:
  pushl $0
c0102eda:	6a 00                	push   $0x0
  pushl $109
c0102edc:	6a 6d                	push   $0x6d
  jmp __alltraps
c0102ede:	e9 a2 06 00 00       	jmp    c0103585 <__alltraps>

c0102ee3 <vector110>:
.globl vector110
vector110:
  pushl $0
c0102ee3:	6a 00                	push   $0x0
  pushl $110
c0102ee5:	6a 6e                	push   $0x6e
  jmp __alltraps
c0102ee7:	e9 99 06 00 00       	jmp    c0103585 <__alltraps>

c0102eec <vector111>:
.globl vector111
vector111:
  pushl $0
c0102eec:	6a 00                	push   $0x0
  pushl $111
c0102eee:	6a 6f                	push   $0x6f
  jmp __alltraps
c0102ef0:	e9 90 06 00 00       	jmp    c0103585 <__alltraps>

c0102ef5 <vector112>:
.globl vector112
vector112:
  pushl $0
c0102ef5:	6a 00                	push   $0x0
  pushl $112
c0102ef7:	6a 70                	push   $0x70
  jmp __alltraps
c0102ef9:	e9 87 06 00 00       	jmp    c0103585 <__alltraps>

c0102efe <vector113>:
.globl vector113
vector113:
  pushl $0
c0102efe:	6a 00                	push   $0x0
  pushl $113
c0102f00:	6a 71                	push   $0x71
  jmp __alltraps
c0102f02:	e9 7e 06 00 00       	jmp    c0103585 <__alltraps>

c0102f07 <vector114>:
.globl vector114
vector114:
  pushl $0
c0102f07:	6a 00                	push   $0x0
  pushl $114
c0102f09:	6a 72                	push   $0x72
  jmp __alltraps
c0102f0b:	e9 75 06 00 00       	jmp    c0103585 <__alltraps>

c0102f10 <vector115>:
.globl vector115
vector115:
  pushl $0
c0102f10:	6a 00                	push   $0x0
  pushl $115
c0102f12:	6a 73                	push   $0x73
  jmp __alltraps
c0102f14:	e9 6c 06 00 00       	jmp    c0103585 <__alltraps>

c0102f19 <vector116>:
.globl vector116
vector116:
  pushl $0
c0102f19:	6a 00                	push   $0x0
  pushl $116
c0102f1b:	6a 74                	push   $0x74
  jmp __alltraps
c0102f1d:	e9 63 06 00 00       	jmp    c0103585 <__alltraps>

c0102f22 <vector117>:
.globl vector117
vector117:
  pushl $0
c0102f22:	6a 00                	push   $0x0
  pushl $117
c0102f24:	6a 75                	push   $0x75
  jmp __alltraps
c0102f26:	e9 5a 06 00 00       	jmp    c0103585 <__alltraps>

c0102f2b <vector118>:
.globl vector118
vector118:
  pushl $0
c0102f2b:	6a 00                	push   $0x0
  pushl $118
c0102f2d:	6a 76                	push   $0x76
  jmp __alltraps
c0102f2f:	e9 51 06 00 00       	jmp    c0103585 <__alltraps>

c0102f34 <vector119>:
.globl vector119
vector119:
  pushl $0
c0102f34:	6a 00                	push   $0x0
  pushl $119
c0102f36:	6a 77                	push   $0x77
  jmp __alltraps
c0102f38:	e9 48 06 00 00       	jmp    c0103585 <__alltraps>

c0102f3d <vector120>:
.globl vector120
vector120:
  pushl $0
c0102f3d:	6a 00                	push   $0x0
  pushl $120
c0102f3f:	6a 78                	push   $0x78
  jmp __alltraps
c0102f41:	e9 3f 06 00 00       	jmp    c0103585 <__alltraps>

c0102f46 <vector121>:
.globl vector121
vector121:
  pushl $0
c0102f46:	6a 00                	push   $0x0
  pushl $121
c0102f48:	6a 79                	push   $0x79
  jmp __alltraps
c0102f4a:	e9 36 06 00 00       	jmp    c0103585 <__alltraps>

c0102f4f <vector122>:
.globl vector122
vector122:
  pushl $0
c0102f4f:	6a 00                	push   $0x0
  pushl $122
c0102f51:	6a 7a                	push   $0x7a
  jmp __alltraps
c0102f53:	e9 2d 06 00 00       	jmp    c0103585 <__alltraps>

c0102f58 <vector123>:
.globl vector123
vector123:
  pushl $0
c0102f58:	6a 00                	push   $0x0
  pushl $123
c0102f5a:	6a 7b                	push   $0x7b
  jmp __alltraps
c0102f5c:	e9 24 06 00 00       	jmp    c0103585 <__alltraps>

c0102f61 <vector124>:
.globl vector124
vector124:
  pushl $0
c0102f61:	6a 00                	push   $0x0
  pushl $124
c0102f63:	6a 7c                	push   $0x7c
  jmp __alltraps
c0102f65:	e9 1b 06 00 00       	jmp    c0103585 <__alltraps>

c0102f6a <vector125>:
.globl vector125
vector125:
  pushl $0
c0102f6a:	6a 00                	push   $0x0
  pushl $125
c0102f6c:	6a 7d                	push   $0x7d
  jmp __alltraps
c0102f6e:	e9 12 06 00 00       	jmp    c0103585 <__alltraps>

c0102f73 <vector126>:
.globl vector126
vector126:
  pushl $0
c0102f73:	6a 00                	push   $0x0
  pushl $126
c0102f75:	6a 7e                	push   $0x7e
  jmp __alltraps
c0102f77:	e9 09 06 00 00       	jmp    c0103585 <__alltraps>

c0102f7c <vector127>:
.globl vector127
vector127:
  pushl $0
c0102f7c:	6a 00                	push   $0x0
  pushl $127
c0102f7e:	6a 7f                	push   $0x7f
  jmp __alltraps
c0102f80:	e9 00 06 00 00       	jmp    c0103585 <__alltraps>

c0102f85 <vector128>:
.globl vector128
vector128:
  pushl $0
c0102f85:	6a 00                	push   $0x0
  pushl $128
c0102f87:	68 80 00 00 00       	push   $0x80
  jmp __alltraps
c0102f8c:	e9 f4 05 00 00       	jmp    c0103585 <__alltraps>

c0102f91 <vector129>:
.globl vector129
vector129:
  pushl $0
c0102f91:	6a 00                	push   $0x0
  pushl $129
c0102f93:	68 81 00 00 00       	push   $0x81
  jmp __alltraps
c0102f98:	e9 e8 05 00 00       	jmp    c0103585 <__alltraps>

c0102f9d <vector130>:
.globl vector130
vector130:
  pushl $0
c0102f9d:	6a 00                	push   $0x0
  pushl $130
c0102f9f:	68 82 00 00 00       	push   $0x82
  jmp __alltraps
c0102fa4:	e9 dc 05 00 00       	jmp    c0103585 <__alltraps>

c0102fa9 <vector131>:
.globl vector131
vector131:
  pushl $0
c0102fa9:	6a 00                	push   $0x0
  pushl $131
c0102fab:	68 83 00 00 00       	push   $0x83
  jmp __alltraps
c0102fb0:	e9 d0 05 00 00       	jmp    c0103585 <__alltraps>

c0102fb5 <vector132>:
.globl vector132
vector132:
  pushl $0
c0102fb5:	6a 00                	push   $0x0
  pushl $132
c0102fb7:	68 84 00 00 00       	push   $0x84
  jmp __alltraps
c0102fbc:	e9 c4 05 00 00       	jmp    c0103585 <__alltraps>

c0102fc1 <vector133>:
.globl vector133
vector133:
  pushl $0
c0102fc1:	6a 00                	push   $0x0
  pushl $133
c0102fc3:	68 85 00 00 00       	push   $0x85
  jmp __alltraps
c0102fc8:	e9 b8 05 00 00       	jmp    c0103585 <__alltraps>

c0102fcd <vector134>:
.globl vector134
vector134:
  pushl $0
c0102fcd:	6a 00                	push   $0x0
  pushl $134
c0102fcf:	68 86 00 00 00       	push   $0x86
  jmp __alltraps
c0102fd4:	e9 ac 05 00 00       	jmp    c0103585 <__alltraps>

c0102fd9 <vector135>:
.globl vector135
vector135:
  pushl $0
c0102fd9:	6a 00                	push   $0x0
  pushl $135
c0102fdb:	68 87 00 00 00       	push   $0x87
  jmp __alltraps
c0102fe0:	e9 a0 05 00 00       	jmp    c0103585 <__alltraps>

c0102fe5 <vector136>:
.globl vector136
vector136:
  pushl $0
c0102fe5:	6a 00                	push   $0x0
  pushl $136
c0102fe7:	68 88 00 00 00       	push   $0x88
  jmp __alltraps
c0102fec:	e9 94 05 00 00       	jmp    c0103585 <__alltraps>

c0102ff1 <vector137>:
.globl vector137
vector137:
  pushl $0
c0102ff1:	6a 00                	push   $0x0
  pushl $137
c0102ff3:	68 89 00 00 00       	push   $0x89
  jmp __alltraps
c0102ff8:	e9 88 05 00 00       	jmp    c0103585 <__alltraps>

c0102ffd <vector138>:
.globl vector138
vector138:
  pushl $0
c0102ffd:	6a 00                	push   $0x0
  pushl $138
c0102fff:	68 8a 00 00 00       	push   $0x8a
  jmp __alltraps
c0103004:	e9 7c 05 00 00       	jmp    c0103585 <__alltraps>

c0103009 <vector139>:
.globl vector139
vector139:
  pushl $0
c0103009:	6a 00                	push   $0x0
  pushl $139
c010300b:	68 8b 00 00 00       	push   $0x8b
  jmp __alltraps
c0103010:	e9 70 05 00 00       	jmp    c0103585 <__alltraps>

c0103015 <vector140>:
.globl vector140
vector140:
  pushl $0
c0103015:	6a 00                	push   $0x0
  pushl $140
c0103017:	68 8c 00 00 00       	push   $0x8c
  jmp __alltraps
c010301c:	e9 64 05 00 00       	jmp    c0103585 <__alltraps>

c0103021 <vector141>:
.globl vector141
vector141:
  pushl $0
c0103021:	6a 00                	push   $0x0
  pushl $141
c0103023:	68 8d 00 00 00       	push   $0x8d
  jmp __alltraps
c0103028:	e9 58 05 00 00       	jmp    c0103585 <__alltraps>

c010302d <vector142>:
.globl vector142
vector142:
  pushl $0
c010302d:	6a 00                	push   $0x0
  pushl $142
c010302f:	68 8e 00 00 00       	push   $0x8e
  jmp __alltraps
c0103034:	e9 4c 05 00 00       	jmp    c0103585 <__alltraps>

c0103039 <vector143>:
.globl vector143
vector143:
  pushl $0
c0103039:	6a 00                	push   $0x0
  pushl $143
c010303b:	68 8f 00 00 00       	push   $0x8f
  jmp __alltraps
c0103040:	e9 40 05 00 00       	jmp    c0103585 <__alltraps>

c0103045 <vector144>:
.globl vector144
vector144:
  pushl $0
c0103045:	6a 00                	push   $0x0
  pushl $144
c0103047:	68 90 00 00 00       	push   $0x90
  jmp __alltraps
c010304c:	e9 34 05 00 00       	jmp    c0103585 <__alltraps>

c0103051 <vector145>:
.globl vector145
vector145:
  pushl $0
c0103051:	6a 00                	push   $0x0
  pushl $145
c0103053:	68 91 00 00 00       	push   $0x91
  jmp __alltraps
c0103058:	e9 28 05 00 00       	jmp    c0103585 <__alltraps>

c010305d <vector146>:
.globl vector146
vector146:
  pushl $0
c010305d:	6a 00                	push   $0x0
  pushl $146
c010305f:	68 92 00 00 00       	push   $0x92
  jmp __alltraps
c0103064:	e9 1c 05 00 00       	jmp    c0103585 <__alltraps>

c0103069 <vector147>:
.globl vector147
vector147:
  pushl $0
c0103069:	6a 00                	push   $0x0
  pushl $147
c010306b:	68 93 00 00 00       	push   $0x93
  jmp __alltraps
c0103070:	e9 10 05 00 00       	jmp    c0103585 <__alltraps>

c0103075 <vector148>:
.globl vector148
vector148:
  pushl $0
c0103075:	6a 00                	push   $0x0
  pushl $148
c0103077:	68 94 00 00 00       	push   $0x94
  jmp __alltraps
c010307c:	e9 04 05 00 00       	jmp    c0103585 <__alltraps>

c0103081 <vector149>:
.globl vector149
vector149:
  pushl $0
c0103081:	6a 00                	push   $0x0
  pushl $149
c0103083:	68 95 00 00 00       	push   $0x95
  jmp __alltraps
c0103088:	e9 f8 04 00 00       	jmp    c0103585 <__alltraps>

c010308d <vector150>:
.globl vector150
vector150:
  pushl $0
c010308d:	6a 00                	push   $0x0
  pushl $150
c010308f:	68 96 00 00 00       	push   $0x96
  jmp __alltraps
c0103094:	e9 ec 04 00 00       	jmp    c0103585 <__alltraps>

c0103099 <vector151>:
.globl vector151
vector151:
  pushl $0
c0103099:	6a 00                	push   $0x0
  pushl $151
c010309b:	68 97 00 00 00       	push   $0x97
  jmp __alltraps
c01030a0:	e9 e0 04 00 00       	jmp    c0103585 <__alltraps>

c01030a5 <vector152>:
.globl vector152
vector152:
  pushl $0
c01030a5:	6a 00                	push   $0x0
  pushl $152
c01030a7:	68 98 00 00 00       	push   $0x98
  jmp __alltraps
c01030ac:	e9 d4 04 00 00       	jmp    c0103585 <__alltraps>

c01030b1 <vector153>:
.globl vector153
vector153:
  pushl $0
c01030b1:	6a 00                	push   $0x0
  pushl $153
c01030b3:	68 99 00 00 00       	push   $0x99
  jmp __alltraps
c01030b8:	e9 c8 04 00 00       	jmp    c0103585 <__alltraps>

c01030bd <vector154>:
.globl vector154
vector154:
  pushl $0
c01030bd:	6a 00                	push   $0x0
  pushl $154
c01030bf:	68 9a 00 00 00       	push   $0x9a
  jmp __alltraps
c01030c4:	e9 bc 04 00 00       	jmp    c0103585 <__alltraps>

c01030c9 <vector155>:
.globl vector155
vector155:
  pushl $0
c01030c9:	6a 00                	push   $0x0
  pushl $155
c01030cb:	68 9b 00 00 00       	push   $0x9b
  jmp __alltraps
c01030d0:	e9 b0 04 00 00       	jmp    c0103585 <__alltraps>

c01030d5 <vector156>:
.globl vector156
vector156:
  pushl $0
c01030d5:	6a 00                	push   $0x0
  pushl $156
c01030d7:	68 9c 00 00 00       	push   $0x9c
  jmp __alltraps
c01030dc:	e9 a4 04 00 00       	jmp    c0103585 <__alltraps>

c01030e1 <vector157>:
.globl vector157
vector157:
  pushl $0
c01030e1:	6a 00                	push   $0x0
  pushl $157
c01030e3:	68 9d 00 00 00       	push   $0x9d
  jmp __alltraps
c01030e8:	e9 98 04 00 00       	jmp    c0103585 <__alltraps>

c01030ed <vector158>:
.globl vector158
vector158:
  pushl $0
c01030ed:	6a 00                	push   $0x0
  pushl $158
c01030ef:	68 9e 00 00 00       	push   $0x9e
  jmp __alltraps
c01030f4:	e9 8c 04 00 00       	jmp    c0103585 <__alltraps>

c01030f9 <vector159>:
.globl vector159
vector159:
  pushl $0
c01030f9:	6a 00                	push   $0x0
  pushl $159
c01030fb:	68 9f 00 00 00       	push   $0x9f
  jmp __alltraps
c0103100:	e9 80 04 00 00       	jmp    c0103585 <__alltraps>

c0103105 <vector160>:
.globl vector160
vector160:
  pushl $0
c0103105:	6a 00                	push   $0x0
  pushl $160
c0103107:	68 a0 00 00 00       	push   $0xa0
  jmp __alltraps
c010310c:	e9 74 04 00 00       	jmp    c0103585 <__alltraps>

c0103111 <vector161>:
.globl vector161
vector161:
  pushl $0
c0103111:	6a 00                	push   $0x0
  pushl $161
c0103113:	68 a1 00 00 00       	push   $0xa1
  jmp __alltraps
c0103118:	e9 68 04 00 00       	jmp    c0103585 <__alltraps>

c010311d <vector162>:
.globl vector162
vector162:
  pushl $0
c010311d:	6a 00                	push   $0x0
  pushl $162
c010311f:	68 a2 00 00 00       	push   $0xa2
  jmp __alltraps
c0103124:	e9 5c 04 00 00       	jmp    c0103585 <__alltraps>

c0103129 <vector163>:
.globl vector163
vector163:
  pushl $0
c0103129:	6a 00                	push   $0x0
  pushl $163
c010312b:	68 a3 00 00 00       	push   $0xa3
  jmp __alltraps
c0103130:	e9 50 04 00 00       	jmp    c0103585 <__alltraps>

c0103135 <vector164>:
.globl vector164
vector164:
  pushl $0
c0103135:	6a 00                	push   $0x0
  pushl $164
c0103137:	68 a4 00 00 00       	push   $0xa4
  jmp __alltraps
c010313c:	e9 44 04 00 00       	jmp    c0103585 <__alltraps>

c0103141 <vector165>:
.globl vector165
vector165:
  pushl $0
c0103141:	6a 00                	push   $0x0
  pushl $165
c0103143:	68 a5 00 00 00       	push   $0xa5
  jmp __alltraps
c0103148:	e9 38 04 00 00       	jmp    c0103585 <__alltraps>

c010314d <vector166>:
.globl vector166
vector166:
  pushl $0
c010314d:	6a 00                	push   $0x0
  pushl $166
c010314f:	68 a6 00 00 00       	push   $0xa6
  jmp __alltraps
c0103154:	e9 2c 04 00 00       	jmp    c0103585 <__alltraps>

c0103159 <vector167>:
.globl vector167
vector167:
  pushl $0
c0103159:	6a 00                	push   $0x0
  pushl $167
c010315b:	68 a7 00 00 00       	push   $0xa7
  jmp __alltraps
c0103160:	e9 20 04 00 00       	jmp    c0103585 <__alltraps>

c0103165 <vector168>:
.globl vector168
vector168:
  pushl $0
c0103165:	6a 00                	push   $0x0
  pushl $168
c0103167:	68 a8 00 00 00       	push   $0xa8
  jmp __alltraps
c010316c:	e9 14 04 00 00       	jmp    c0103585 <__alltraps>

c0103171 <vector169>:
.globl vector169
vector169:
  pushl $0
c0103171:	6a 00                	push   $0x0
  pushl $169
c0103173:	68 a9 00 00 00       	push   $0xa9
  jmp __alltraps
c0103178:	e9 08 04 00 00       	jmp    c0103585 <__alltraps>

c010317d <vector170>:
.globl vector170
vector170:
  pushl $0
c010317d:	6a 00                	push   $0x0
  pushl $170
c010317f:	68 aa 00 00 00       	push   $0xaa
  jmp __alltraps
c0103184:	e9 fc 03 00 00       	jmp    c0103585 <__alltraps>

c0103189 <vector171>:
.globl vector171
vector171:
  pushl $0
c0103189:	6a 00                	push   $0x0
  pushl $171
c010318b:	68 ab 00 00 00       	push   $0xab
  jmp __alltraps
c0103190:	e9 f0 03 00 00       	jmp    c0103585 <__alltraps>

c0103195 <vector172>:
.globl vector172
vector172:
  pushl $0
c0103195:	6a 00                	push   $0x0
  pushl $172
c0103197:	68 ac 00 00 00       	push   $0xac
  jmp __alltraps
c010319c:	e9 e4 03 00 00       	jmp    c0103585 <__alltraps>

c01031a1 <vector173>:
.globl vector173
vector173:
  pushl $0
c01031a1:	6a 00                	push   $0x0
  pushl $173
c01031a3:	68 ad 00 00 00       	push   $0xad
  jmp __alltraps
c01031a8:	e9 d8 03 00 00       	jmp    c0103585 <__alltraps>

c01031ad <vector174>:
.globl vector174
vector174:
  pushl $0
c01031ad:	6a 00                	push   $0x0
  pushl $174
c01031af:	68 ae 00 00 00       	push   $0xae
  jmp __alltraps
c01031b4:	e9 cc 03 00 00       	jmp    c0103585 <__alltraps>

c01031b9 <vector175>:
.globl vector175
vector175:
  pushl $0
c01031b9:	6a 00                	push   $0x0
  pushl $175
c01031bb:	68 af 00 00 00       	push   $0xaf
  jmp __alltraps
c01031c0:	e9 c0 03 00 00       	jmp    c0103585 <__alltraps>

c01031c5 <vector176>:
.globl vector176
vector176:
  pushl $0
c01031c5:	6a 00                	push   $0x0
  pushl $176
c01031c7:	68 b0 00 00 00       	push   $0xb0
  jmp __alltraps
c01031cc:	e9 b4 03 00 00       	jmp    c0103585 <__alltraps>

c01031d1 <vector177>:
.globl vector177
vector177:
  pushl $0
c01031d1:	6a 00                	push   $0x0
  pushl $177
c01031d3:	68 b1 00 00 00       	push   $0xb1
  jmp __alltraps
c01031d8:	e9 a8 03 00 00       	jmp    c0103585 <__alltraps>

c01031dd <vector178>:
.globl vector178
vector178:
  pushl $0
c01031dd:	6a 00                	push   $0x0
  pushl $178
c01031df:	68 b2 00 00 00       	push   $0xb2
  jmp __alltraps
c01031e4:	e9 9c 03 00 00       	jmp    c0103585 <__alltraps>

c01031e9 <vector179>:
.globl vector179
vector179:
  pushl $0
c01031e9:	6a 00                	push   $0x0
  pushl $179
c01031eb:	68 b3 00 00 00       	push   $0xb3
  jmp __alltraps
c01031f0:	e9 90 03 00 00       	jmp    c0103585 <__alltraps>

c01031f5 <vector180>:
.globl vector180
vector180:
  pushl $0
c01031f5:	6a 00                	push   $0x0
  pushl $180
c01031f7:	68 b4 00 00 00       	push   $0xb4
  jmp __alltraps
c01031fc:	e9 84 03 00 00       	jmp    c0103585 <__alltraps>

c0103201 <vector181>:
.globl vector181
vector181:
  pushl $0
c0103201:	6a 00                	push   $0x0
  pushl $181
c0103203:	68 b5 00 00 00       	push   $0xb5
  jmp __alltraps
c0103208:	e9 78 03 00 00       	jmp    c0103585 <__alltraps>

c010320d <vector182>:
.globl vector182
vector182:
  pushl $0
c010320d:	6a 00                	push   $0x0
  pushl $182
c010320f:	68 b6 00 00 00       	push   $0xb6
  jmp __alltraps
c0103214:	e9 6c 03 00 00       	jmp    c0103585 <__alltraps>

c0103219 <vector183>:
.globl vector183
vector183:
  pushl $0
c0103219:	6a 00                	push   $0x0
  pushl $183
c010321b:	68 b7 00 00 00       	push   $0xb7
  jmp __alltraps
c0103220:	e9 60 03 00 00       	jmp    c0103585 <__alltraps>

c0103225 <vector184>:
.globl vector184
vector184:
  pushl $0
c0103225:	6a 00                	push   $0x0
  pushl $184
c0103227:	68 b8 00 00 00       	push   $0xb8
  jmp __alltraps
c010322c:	e9 54 03 00 00       	jmp    c0103585 <__alltraps>

c0103231 <vector185>:
.globl vector185
vector185:
  pushl $0
c0103231:	6a 00                	push   $0x0
  pushl $185
c0103233:	68 b9 00 00 00       	push   $0xb9
  jmp __alltraps
c0103238:	e9 48 03 00 00       	jmp    c0103585 <__alltraps>

c010323d <vector186>:
.globl vector186
vector186:
  pushl $0
c010323d:	6a 00                	push   $0x0
  pushl $186
c010323f:	68 ba 00 00 00       	push   $0xba
  jmp __alltraps
c0103244:	e9 3c 03 00 00       	jmp    c0103585 <__alltraps>

c0103249 <vector187>:
.globl vector187
vector187:
  pushl $0
c0103249:	6a 00                	push   $0x0
  pushl $187
c010324b:	68 bb 00 00 00       	push   $0xbb
  jmp __alltraps
c0103250:	e9 30 03 00 00       	jmp    c0103585 <__alltraps>

c0103255 <vector188>:
.globl vector188
vector188:
  pushl $0
c0103255:	6a 00                	push   $0x0
  pushl $188
c0103257:	68 bc 00 00 00       	push   $0xbc
  jmp __alltraps
c010325c:	e9 24 03 00 00       	jmp    c0103585 <__alltraps>

c0103261 <vector189>:
.globl vector189
vector189:
  pushl $0
c0103261:	6a 00                	push   $0x0
  pushl $189
c0103263:	68 bd 00 00 00       	push   $0xbd
  jmp __alltraps
c0103268:	e9 18 03 00 00       	jmp    c0103585 <__alltraps>

c010326d <vector190>:
.globl vector190
vector190:
  pushl $0
c010326d:	6a 00                	push   $0x0
  pushl $190
c010326f:	68 be 00 00 00       	push   $0xbe
  jmp __alltraps
c0103274:	e9 0c 03 00 00       	jmp    c0103585 <__alltraps>

c0103279 <vector191>:
.globl vector191
vector191:
  pushl $0
c0103279:	6a 00                	push   $0x0
  pushl $191
c010327b:	68 bf 00 00 00       	push   $0xbf
  jmp __alltraps
c0103280:	e9 00 03 00 00       	jmp    c0103585 <__alltraps>

c0103285 <vector192>:
.globl vector192
vector192:
  pushl $0
c0103285:	6a 00                	push   $0x0
  pushl $192
c0103287:	68 c0 00 00 00       	push   $0xc0
  jmp __alltraps
c010328c:	e9 f4 02 00 00       	jmp    c0103585 <__alltraps>

c0103291 <vector193>:
.globl vector193
vector193:
  pushl $0
c0103291:	6a 00                	push   $0x0
  pushl $193
c0103293:	68 c1 00 00 00       	push   $0xc1
  jmp __alltraps
c0103298:	e9 e8 02 00 00       	jmp    c0103585 <__alltraps>

c010329d <vector194>:
.globl vector194
vector194:
  pushl $0
c010329d:	6a 00                	push   $0x0
  pushl $194
c010329f:	68 c2 00 00 00       	push   $0xc2
  jmp __alltraps
c01032a4:	e9 dc 02 00 00       	jmp    c0103585 <__alltraps>

c01032a9 <vector195>:
.globl vector195
vector195:
  pushl $0
c01032a9:	6a 00                	push   $0x0
  pushl $195
c01032ab:	68 c3 00 00 00       	push   $0xc3
  jmp __alltraps
c01032b0:	e9 d0 02 00 00       	jmp    c0103585 <__alltraps>

c01032b5 <vector196>:
.globl vector196
vector196:
  pushl $0
c01032b5:	6a 00                	push   $0x0
  pushl $196
c01032b7:	68 c4 00 00 00       	push   $0xc4
  jmp __alltraps
c01032bc:	e9 c4 02 00 00       	jmp    c0103585 <__alltraps>

c01032c1 <vector197>:
.globl vector197
vector197:
  pushl $0
c01032c1:	6a 00                	push   $0x0
  pushl $197
c01032c3:	68 c5 00 00 00       	push   $0xc5
  jmp __alltraps
c01032c8:	e9 b8 02 00 00       	jmp    c0103585 <__alltraps>

c01032cd <vector198>:
.globl vector198
vector198:
  pushl $0
c01032cd:	6a 00                	push   $0x0
  pushl $198
c01032cf:	68 c6 00 00 00       	push   $0xc6
  jmp __alltraps
c01032d4:	e9 ac 02 00 00       	jmp    c0103585 <__alltraps>

c01032d9 <vector199>:
.globl vector199
vector199:
  pushl $0
c01032d9:	6a 00                	push   $0x0
  pushl $199
c01032db:	68 c7 00 00 00       	push   $0xc7
  jmp __alltraps
c01032e0:	e9 a0 02 00 00       	jmp    c0103585 <__alltraps>

c01032e5 <vector200>:
.globl vector200
vector200:
  pushl $0
c01032e5:	6a 00                	push   $0x0
  pushl $200
c01032e7:	68 c8 00 00 00       	push   $0xc8
  jmp __alltraps
c01032ec:	e9 94 02 00 00       	jmp    c0103585 <__alltraps>

c01032f1 <vector201>:
.globl vector201
vector201:
  pushl $0
c01032f1:	6a 00                	push   $0x0
  pushl $201
c01032f3:	68 c9 00 00 00       	push   $0xc9
  jmp __alltraps
c01032f8:	e9 88 02 00 00       	jmp    c0103585 <__alltraps>

c01032fd <vector202>:
.globl vector202
vector202:
  pushl $0
c01032fd:	6a 00                	push   $0x0
  pushl $202
c01032ff:	68 ca 00 00 00       	push   $0xca
  jmp __alltraps
c0103304:	e9 7c 02 00 00       	jmp    c0103585 <__alltraps>

c0103309 <vector203>:
.globl vector203
vector203:
  pushl $0
c0103309:	6a 00                	push   $0x0
  pushl $203
c010330b:	68 cb 00 00 00       	push   $0xcb
  jmp __alltraps
c0103310:	e9 70 02 00 00       	jmp    c0103585 <__alltraps>

c0103315 <vector204>:
.globl vector204
vector204:
  pushl $0
c0103315:	6a 00                	push   $0x0
  pushl $204
c0103317:	68 cc 00 00 00       	push   $0xcc
  jmp __alltraps
c010331c:	e9 64 02 00 00       	jmp    c0103585 <__alltraps>

c0103321 <vector205>:
.globl vector205
vector205:
  pushl $0
c0103321:	6a 00                	push   $0x0
  pushl $205
c0103323:	68 cd 00 00 00       	push   $0xcd
  jmp __alltraps
c0103328:	e9 58 02 00 00       	jmp    c0103585 <__alltraps>

c010332d <vector206>:
.globl vector206
vector206:
  pushl $0
c010332d:	6a 00                	push   $0x0
  pushl $206
c010332f:	68 ce 00 00 00       	push   $0xce
  jmp __alltraps
c0103334:	e9 4c 02 00 00       	jmp    c0103585 <__alltraps>

c0103339 <vector207>:
.globl vector207
vector207:
  pushl $0
c0103339:	6a 00                	push   $0x0
  pushl $207
c010333b:	68 cf 00 00 00       	push   $0xcf
  jmp __alltraps
c0103340:	e9 40 02 00 00       	jmp    c0103585 <__alltraps>

c0103345 <vector208>:
.globl vector208
vector208:
  pushl $0
c0103345:	6a 00                	push   $0x0
  pushl $208
c0103347:	68 d0 00 00 00       	push   $0xd0
  jmp __alltraps
c010334c:	e9 34 02 00 00       	jmp    c0103585 <__alltraps>

c0103351 <vector209>:
.globl vector209
vector209:
  pushl $0
c0103351:	6a 00                	push   $0x0
  pushl $209
c0103353:	68 d1 00 00 00       	push   $0xd1
  jmp __alltraps
c0103358:	e9 28 02 00 00       	jmp    c0103585 <__alltraps>

c010335d <vector210>:
.globl vector210
vector210:
  pushl $0
c010335d:	6a 00                	push   $0x0
  pushl $210
c010335f:	68 d2 00 00 00       	push   $0xd2
  jmp __alltraps
c0103364:	e9 1c 02 00 00       	jmp    c0103585 <__alltraps>

c0103369 <vector211>:
.globl vector211
vector211:
  pushl $0
c0103369:	6a 00                	push   $0x0
  pushl $211
c010336b:	68 d3 00 00 00       	push   $0xd3
  jmp __alltraps
c0103370:	e9 10 02 00 00       	jmp    c0103585 <__alltraps>

c0103375 <vector212>:
.globl vector212
vector212:
  pushl $0
c0103375:	6a 00                	push   $0x0
  pushl $212
c0103377:	68 d4 00 00 00       	push   $0xd4
  jmp __alltraps
c010337c:	e9 04 02 00 00       	jmp    c0103585 <__alltraps>

c0103381 <vector213>:
.globl vector213
vector213:
  pushl $0
c0103381:	6a 00                	push   $0x0
  pushl $213
c0103383:	68 d5 00 00 00       	push   $0xd5
  jmp __alltraps
c0103388:	e9 f8 01 00 00       	jmp    c0103585 <__alltraps>

c010338d <vector214>:
.globl vector214
vector214:
  pushl $0
c010338d:	6a 00                	push   $0x0
  pushl $214
c010338f:	68 d6 00 00 00       	push   $0xd6
  jmp __alltraps
c0103394:	e9 ec 01 00 00       	jmp    c0103585 <__alltraps>

c0103399 <vector215>:
.globl vector215
vector215:
  pushl $0
c0103399:	6a 00                	push   $0x0
  pushl $215
c010339b:	68 d7 00 00 00       	push   $0xd7
  jmp __alltraps
c01033a0:	e9 e0 01 00 00       	jmp    c0103585 <__alltraps>

c01033a5 <vector216>:
.globl vector216
vector216:
  pushl $0
c01033a5:	6a 00                	push   $0x0
  pushl $216
c01033a7:	68 d8 00 00 00       	push   $0xd8
  jmp __alltraps
c01033ac:	e9 d4 01 00 00       	jmp    c0103585 <__alltraps>

c01033b1 <vector217>:
.globl vector217
vector217:
  pushl $0
c01033b1:	6a 00                	push   $0x0
  pushl $217
c01033b3:	68 d9 00 00 00       	push   $0xd9
  jmp __alltraps
c01033b8:	e9 c8 01 00 00       	jmp    c0103585 <__alltraps>

c01033bd <vector218>:
.globl vector218
vector218:
  pushl $0
c01033bd:	6a 00                	push   $0x0
  pushl $218
c01033bf:	68 da 00 00 00       	push   $0xda
  jmp __alltraps
c01033c4:	e9 bc 01 00 00       	jmp    c0103585 <__alltraps>

c01033c9 <vector219>:
.globl vector219
vector219:
  pushl $0
c01033c9:	6a 00                	push   $0x0
  pushl $219
c01033cb:	68 db 00 00 00       	push   $0xdb
  jmp __alltraps
c01033d0:	e9 b0 01 00 00       	jmp    c0103585 <__alltraps>

c01033d5 <vector220>:
.globl vector220
vector220:
  pushl $0
c01033d5:	6a 00                	push   $0x0
  pushl $220
c01033d7:	68 dc 00 00 00       	push   $0xdc
  jmp __alltraps
c01033dc:	e9 a4 01 00 00       	jmp    c0103585 <__alltraps>

c01033e1 <vector221>:
.globl vector221
vector221:
  pushl $0
c01033e1:	6a 00                	push   $0x0
  pushl $221
c01033e3:	68 dd 00 00 00       	push   $0xdd
  jmp __alltraps
c01033e8:	e9 98 01 00 00       	jmp    c0103585 <__alltraps>

c01033ed <vector222>:
.globl vector222
vector222:
  pushl $0
c01033ed:	6a 00                	push   $0x0
  pushl $222
c01033ef:	68 de 00 00 00       	push   $0xde
  jmp __alltraps
c01033f4:	e9 8c 01 00 00       	jmp    c0103585 <__alltraps>

c01033f9 <vector223>:
.globl vector223
vector223:
  pushl $0
c01033f9:	6a 00                	push   $0x0
  pushl $223
c01033fb:	68 df 00 00 00       	push   $0xdf
  jmp __alltraps
c0103400:	e9 80 01 00 00       	jmp    c0103585 <__alltraps>

c0103405 <vector224>:
.globl vector224
vector224:
  pushl $0
c0103405:	6a 00                	push   $0x0
  pushl $224
c0103407:	68 e0 00 00 00       	push   $0xe0
  jmp __alltraps
c010340c:	e9 74 01 00 00       	jmp    c0103585 <__alltraps>

c0103411 <vector225>:
.globl vector225
vector225:
  pushl $0
c0103411:	6a 00                	push   $0x0
  pushl $225
c0103413:	68 e1 00 00 00       	push   $0xe1
  jmp __alltraps
c0103418:	e9 68 01 00 00       	jmp    c0103585 <__alltraps>

c010341d <vector226>:
.globl vector226
vector226:
  pushl $0
c010341d:	6a 00                	push   $0x0
  pushl $226
c010341f:	68 e2 00 00 00       	push   $0xe2
  jmp __alltraps
c0103424:	e9 5c 01 00 00       	jmp    c0103585 <__alltraps>

c0103429 <vector227>:
.globl vector227
vector227:
  pushl $0
c0103429:	6a 00                	push   $0x0
  pushl $227
c010342b:	68 e3 00 00 00       	push   $0xe3
  jmp __alltraps
c0103430:	e9 50 01 00 00       	jmp    c0103585 <__alltraps>

c0103435 <vector228>:
.globl vector228
vector228:
  pushl $0
c0103435:	6a 00                	push   $0x0
  pushl $228
c0103437:	68 e4 00 00 00       	push   $0xe4
  jmp __alltraps
c010343c:	e9 44 01 00 00       	jmp    c0103585 <__alltraps>

c0103441 <vector229>:
.globl vector229
vector229:
  pushl $0
c0103441:	6a 00                	push   $0x0
  pushl $229
c0103443:	68 e5 00 00 00       	push   $0xe5
  jmp __alltraps
c0103448:	e9 38 01 00 00       	jmp    c0103585 <__alltraps>

c010344d <vector230>:
.globl vector230
vector230:
  pushl $0
c010344d:	6a 00                	push   $0x0
  pushl $230
c010344f:	68 e6 00 00 00       	push   $0xe6
  jmp __alltraps
c0103454:	e9 2c 01 00 00       	jmp    c0103585 <__alltraps>

c0103459 <vector231>:
.globl vector231
vector231:
  pushl $0
c0103459:	6a 00                	push   $0x0
  pushl $231
c010345b:	68 e7 00 00 00       	push   $0xe7
  jmp __alltraps
c0103460:	e9 20 01 00 00       	jmp    c0103585 <__alltraps>

c0103465 <vector232>:
.globl vector232
vector232:
  pushl $0
c0103465:	6a 00                	push   $0x0
  pushl $232
c0103467:	68 e8 00 00 00       	push   $0xe8
  jmp __alltraps
c010346c:	e9 14 01 00 00       	jmp    c0103585 <__alltraps>

c0103471 <vector233>:
.globl vector233
vector233:
  pushl $0
c0103471:	6a 00                	push   $0x0
  pushl $233
c0103473:	68 e9 00 00 00       	push   $0xe9
  jmp __alltraps
c0103478:	e9 08 01 00 00       	jmp    c0103585 <__alltraps>

c010347d <vector234>:
.globl vector234
vector234:
  pushl $0
c010347d:	6a 00                	push   $0x0
  pushl $234
c010347f:	68 ea 00 00 00       	push   $0xea
  jmp __alltraps
c0103484:	e9 fc 00 00 00       	jmp    c0103585 <__alltraps>

c0103489 <vector235>:
.globl vector235
vector235:
  pushl $0
c0103489:	6a 00                	push   $0x0
  pushl $235
c010348b:	68 eb 00 00 00       	push   $0xeb
  jmp __alltraps
c0103490:	e9 f0 00 00 00       	jmp    c0103585 <__alltraps>

c0103495 <vector236>:
.globl vector236
vector236:
  pushl $0
c0103495:	6a 00                	push   $0x0
  pushl $236
c0103497:	68 ec 00 00 00       	push   $0xec
  jmp __alltraps
c010349c:	e9 e4 00 00 00       	jmp    c0103585 <__alltraps>

c01034a1 <vector237>:
.globl vector237
vector237:
  pushl $0
c01034a1:	6a 00                	push   $0x0
  pushl $237
c01034a3:	68 ed 00 00 00       	push   $0xed
  jmp __alltraps
c01034a8:	e9 d8 00 00 00       	jmp    c0103585 <__alltraps>

c01034ad <vector238>:
.globl vector238
vector238:
  pushl $0
c01034ad:	6a 00                	push   $0x0
  pushl $238
c01034af:	68 ee 00 00 00       	push   $0xee
  jmp __alltraps
c01034b4:	e9 cc 00 00 00       	jmp    c0103585 <__alltraps>

c01034b9 <vector239>:
.globl vector239
vector239:
  pushl $0
c01034b9:	6a 00                	push   $0x0
  pushl $239
c01034bb:	68 ef 00 00 00       	push   $0xef
  jmp __alltraps
c01034c0:	e9 c0 00 00 00       	jmp    c0103585 <__alltraps>

c01034c5 <vector240>:
.globl vector240
vector240:
  pushl $0
c01034c5:	6a 00                	push   $0x0
  pushl $240
c01034c7:	68 f0 00 00 00       	push   $0xf0
  jmp __alltraps
c01034cc:	e9 b4 00 00 00       	jmp    c0103585 <__alltraps>

c01034d1 <vector241>:
.globl vector241
vector241:
  pushl $0
c01034d1:	6a 00                	push   $0x0
  pushl $241
c01034d3:	68 f1 00 00 00       	push   $0xf1
  jmp __alltraps
c01034d8:	e9 a8 00 00 00       	jmp    c0103585 <__alltraps>

c01034dd <vector242>:
.globl vector242
vector242:
  pushl $0
c01034dd:	6a 00                	push   $0x0
  pushl $242
c01034df:	68 f2 00 00 00       	push   $0xf2
  jmp __alltraps
c01034e4:	e9 9c 00 00 00       	jmp    c0103585 <__alltraps>

c01034e9 <vector243>:
.globl vector243
vector243:
  pushl $0
c01034e9:	6a 00                	push   $0x0
  pushl $243
c01034eb:	68 f3 00 00 00       	push   $0xf3
  jmp __alltraps
c01034f0:	e9 90 00 00 00       	jmp    c0103585 <__alltraps>

c01034f5 <vector244>:
.globl vector244
vector244:
  pushl $0
c01034f5:	6a 00                	push   $0x0
  pushl $244
c01034f7:	68 f4 00 00 00       	push   $0xf4
  jmp __alltraps
c01034fc:	e9 84 00 00 00       	jmp    c0103585 <__alltraps>

c0103501 <vector245>:
.globl vector245
vector245:
  pushl $0
c0103501:	6a 00                	push   $0x0
  pushl $245
c0103503:	68 f5 00 00 00       	push   $0xf5
  jmp __alltraps
c0103508:	e9 78 00 00 00       	jmp    c0103585 <__alltraps>

c010350d <vector246>:
.globl vector246
vector246:
  pushl $0
c010350d:	6a 00                	push   $0x0
  pushl $246
c010350f:	68 f6 00 00 00       	push   $0xf6
  jmp __alltraps
c0103514:	e9 6c 00 00 00       	jmp    c0103585 <__alltraps>

c0103519 <vector247>:
.globl vector247
vector247:
  pushl $0
c0103519:	6a 00                	push   $0x0
  pushl $247
c010351b:	68 f7 00 00 00       	push   $0xf7
  jmp __alltraps
c0103520:	e9 60 00 00 00       	jmp    c0103585 <__alltraps>

c0103525 <vector248>:
.globl vector248
vector248:
  pushl $0
c0103525:	6a 00                	push   $0x0
  pushl $248
c0103527:	68 f8 00 00 00       	push   $0xf8
  jmp __alltraps
c010352c:	e9 54 00 00 00       	jmp    c0103585 <__alltraps>

c0103531 <vector249>:
.globl vector249
vector249:
  pushl $0
c0103531:	6a 00                	push   $0x0
  pushl $249
c0103533:	68 f9 00 00 00       	push   $0xf9
  jmp __alltraps
c0103538:	e9 48 00 00 00       	jmp    c0103585 <__alltraps>

c010353d <vector250>:
.globl vector250
vector250:
  pushl $0
c010353d:	6a 00                	push   $0x0
  pushl $250
c010353f:	68 fa 00 00 00       	push   $0xfa
  jmp __alltraps
c0103544:	e9 3c 00 00 00       	jmp    c0103585 <__alltraps>

c0103549 <vector251>:
.globl vector251
vector251:
  pushl $0
c0103549:	6a 00                	push   $0x0
  pushl $251
c010354b:	68 fb 00 00 00       	push   $0xfb
  jmp __alltraps
c0103550:	e9 30 00 00 00       	jmp    c0103585 <__alltraps>

c0103555 <vector252>:
.globl vector252
vector252:
  pushl $0
c0103555:	6a 00                	push   $0x0
  pushl $252
c0103557:	68 fc 00 00 00       	push   $0xfc
  jmp __alltraps
c010355c:	e9 24 00 00 00       	jmp    c0103585 <__alltraps>

c0103561 <vector253>:
.globl vector253
vector253:
  pushl $0
c0103561:	6a 00                	push   $0x0
  pushl $253
c0103563:	68 fd 00 00 00       	push   $0xfd
  jmp __alltraps
c0103568:	e9 18 00 00 00       	jmp    c0103585 <__alltraps>

c010356d <vector254>:
.globl vector254
vector254:
  pushl $0
c010356d:	6a 00                	push   $0x0
  pushl $254
c010356f:	68 fe 00 00 00       	push   $0xfe
  jmp __alltraps
c0103574:	e9 0c 00 00 00       	jmp    c0103585 <__alltraps>

c0103579 <vector255>:
.globl vector255
vector255:
  pushl $0
c0103579:	6a 00                	push   $0x0
  pushl $255
c010357b:	68 ff 00 00 00       	push   $0xff
  jmp __alltraps
c0103580:	e9 00 00 00 00       	jmp    c0103585 <__alltraps>

c0103585 <__alltraps>:
.text
.globl __alltraps
__alltraps:
    # push registers to build a trap frame
    # therefore make the stack look like a struct trapframe
    pushl %ds
c0103585:	1e                   	push   %ds
    pushl %es
c0103586:	06                   	push   %es
    pushl %fs
c0103587:	0f a0                	push   %fs
    pushl %gs
c0103589:	0f a8                	push   %gs
    pushal
c010358b:	60                   	pusha  

    # load GD_KDATA into %ds and %es to set up data segments for kernel
    movl $GD_KDATA, %eax
c010358c:	b8 10 00 00 00       	mov    $0x10,%eax
    movw %ax, %ds
c0103591:	8e d8                	mov    %eax,%ds
    movw %ax, %es
c0103593:	8e c0                	mov    %eax,%es

    # push %esp to pass a pointer to the trapframe as an argument to trap()
    pushl %esp
c0103595:	54                   	push   %esp

    # call trap(tf), where tf=%esp
    call trap
c0103596:	e8 e3 f4 ff ff       	call   c0102a7e <trap>

    # pop the pushed stack pointer
    popl %esp
c010359b:	5c                   	pop    %esp

c010359c <__trapret>:

    # return falls through to trapret...
.globl __trapret
__trapret:
    # restore registers from stack
    popal
c010359c:	61                   	popa   

    # restore %ds, %es, %fs and %gs
    popl %gs
c010359d:	0f a9                	pop    %gs
    popl %fs
c010359f:	0f a1                	pop    %fs
    popl %es
c01035a1:	07                   	pop    %es
    popl %ds
c01035a2:	1f                   	pop    %ds

    # get rid of the trap number and error code
    addl $0x8, %esp
c01035a3:	83 c4 08             	add    $0x8,%esp
    iret
c01035a6:	cf                   	iret   

c01035a7 <forkrets>:

.globl forkrets
forkrets:
    # set stack to this new process's trapframe
    movl 4(%esp), %esp
c01035a7:	8b 64 24 04          	mov    0x4(%esp),%esp
    jmp __trapret
c01035ab:	eb ef                	jmp    c010359c <__trapret>

c01035ad <mm_count>:
bool user_mem_check(struct mm_struct *mm, uintptr_t start, size_t len, bool write);
bool copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable);
bool copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len);

static inline int
mm_count(struct mm_struct *mm) {
c01035ad:	55                   	push   %ebp
c01035ae:	89 e5                	mov    %esp,%ebp
    return mm->mm_count;
c01035b0:	8b 45 08             	mov    0x8(%ebp),%eax
c01035b3:	8b 40 18             	mov    0x18(%eax),%eax
}
c01035b6:	5d                   	pop    %ebp
c01035b7:	c3                   	ret    

c01035b8 <set_mm_count>:

static inline void
set_mm_count(struct mm_struct *mm, int val) {
c01035b8:	55                   	push   %ebp
c01035b9:	89 e5                	mov    %esp,%ebp
    mm->mm_count = val;
c01035bb:	8b 45 08             	mov    0x8(%ebp),%eax
c01035be:	8b 55 0c             	mov    0xc(%ebp),%edx
c01035c1:	89 50 18             	mov    %edx,0x18(%eax)
}
c01035c4:	90                   	nop
c01035c5:	5d                   	pop    %ebp
c01035c6:	c3                   	ret    

c01035c7 <pa2page>:
page2pa(struct Page *page) {
    return page2ppn(page) << PGSHIFT;
}

static inline struct Page *
pa2page(uintptr_t pa) {
c01035c7:	55                   	push   %ebp
c01035c8:	89 e5                	mov    %esp,%ebp
c01035ca:	83 ec 08             	sub    $0x8,%esp
    if (PPN(pa) >= npage) {
c01035cd:	8b 45 08             	mov    0x8(%ebp),%eax
c01035d0:	c1 e8 0c             	shr    $0xc,%eax
c01035d3:	89 c2                	mov    %eax,%edx
c01035d5:	a1 80 4f 1c c0       	mov    0xc01c4f80,%eax
c01035da:	39 c2                	cmp    %eax,%edx
c01035dc:	72 14                	jb     c01035f2 <pa2page+0x2b>
        panic("pa2page called with invalid pa");
c01035de:	83 ec 04             	sub    $0x4,%esp
c01035e1:	68 50 d5 10 c0       	push   $0xc010d550
c01035e6:	6a 5e                	push   $0x5e
c01035e8:	68 6f d5 10 c0       	push   $0xc010d56f
c01035ed:	e8 0b ce ff ff       	call   c01003fd <__panic>
    }
    return &pages[PPN(pa)];
c01035f2:	a1 f8 71 1c c0       	mov    0xc01c71f8,%eax
c01035f7:	8b 55 08             	mov    0x8(%ebp),%edx
c01035fa:	c1 ea 0c             	shr    $0xc,%edx
c01035fd:	c1 e2 05             	shl    $0x5,%edx
c0103600:	01 d0                	add    %edx,%eax
}
c0103602:	c9                   	leave  
c0103603:	c3                   	ret    

c0103604 <pde2page>:
    }
    return pa2page(PTE_ADDR(pte));
}

static inline struct Page *
pde2page(pde_t pde) {
c0103604:	55                   	push   %ebp
c0103605:	89 e5                	mov    %esp,%ebp
c0103607:	83 ec 08             	sub    $0x8,%esp
    return pa2page(PDE_ADDR(pde));
c010360a:	8b 45 08             	mov    0x8(%ebp),%eax
c010360d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0103612:	83 ec 0c             	sub    $0xc,%esp
c0103615:	50                   	push   %eax
c0103616:	e8 ac ff ff ff       	call   c01035c7 <pa2page>
c010361b:	83 c4 10             	add    $0x10,%esp
}
c010361e:	c9                   	leave  
c010361f:	c3                   	ret    

c0103620 <mm_create>:
static void check_vma_struct(void);
static void check_pgfault(void);

// mm_create -  alloc a mm_struct & initialize it.
struct mm_struct *
mm_create(void) {
c0103620:	55                   	push   %ebp
c0103621:	89 e5                	mov    %esp,%ebp
c0103623:	83 ec 18             	sub    $0x18,%esp
    struct mm_struct *mm = kmalloc(sizeof(struct mm_struct));
c0103626:	83 ec 0c             	sub    $0xc,%esp
c0103629:	6a 2c                	push   $0x2c
c010362b:	e8 18 1b 00 00       	call   c0105148 <kmalloc>
c0103630:	83 c4 10             	add    $0x10,%esp
c0103633:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (mm != NULL) {
c0103636:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010363a:	74 7f                	je     c01036bb <mm_create+0x9b>
        list_init(&(mm->mmap_list));
c010363c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010363f:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0103642:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103645:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0103648:	89 50 04             	mov    %edx,0x4(%eax)
c010364b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010364e:	8b 50 04             	mov    0x4(%eax),%edx
c0103651:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103654:	89 10                	mov    %edx,(%eax)
        mm->mmap_cache = NULL;
c0103656:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103659:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        mm->pgdir = NULL;
c0103660:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103663:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        mm->map_count = 0;
c010366a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010366d:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)

        if (swap_init_ok) swap_init_mm(mm);
c0103674:	a1 6c 4f 1c c0       	mov    0xc01c4f6c,%eax
c0103679:	85 c0                	test   %eax,%eax
c010367b:	74 10                	je     c010368d <mm_create+0x6d>
c010367d:	83 ec 0c             	sub    $0xc,%esp
c0103680:	ff 75 f4             	pushl  -0xc(%ebp)
c0103683:	e8 3c 1d 00 00       	call   c01053c4 <swap_init_mm>
c0103688:	83 c4 10             	add    $0x10,%esp
c010368b:	eb 0a                	jmp    c0103697 <mm_create+0x77>
        else mm->sm_priv = NULL;
c010368d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103690:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
        
        set_mm_count(mm, 0);
c0103697:	83 ec 08             	sub    $0x8,%esp
c010369a:	6a 00                	push   $0x0
c010369c:	ff 75 f4             	pushl  -0xc(%ebp)
c010369f:	e8 14 ff ff ff       	call   c01035b8 <set_mm_count>
c01036a4:	83 c4 10             	add    $0x10,%esp
        sem_init(&(mm->mm_sem), 1);
c01036a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036aa:	83 c0 1c             	add    $0x1c,%eax
c01036ad:	83 ec 08             	sub    $0x8,%esp
c01036b0:	6a 01                	push   $0x1
c01036b2:	50                   	push   %eax
c01036b3:	e8 ca 5c 00 00       	call   c0109382 <sem_init>
c01036b8:	83 c4 10             	add    $0x10,%esp
    }    
    return mm;
c01036bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01036be:	c9                   	leave  
c01036bf:	c3                   	ret    

c01036c0 <vma_create>:

// vma_create - alloc a vma_struct & initialize it. (addr range: vm_start~vm_end)
struct vma_struct *
vma_create(uintptr_t vm_start, uintptr_t vm_end, uint32_t vm_flags) {
c01036c0:	55                   	push   %ebp
c01036c1:	89 e5                	mov    %esp,%ebp
c01036c3:	83 ec 18             	sub    $0x18,%esp
    struct vma_struct *vma = kmalloc(sizeof(struct vma_struct));
c01036c6:	83 ec 0c             	sub    $0xc,%esp
c01036c9:	6a 18                	push   $0x18
c01036cb:	e8 78 1a 00 00       	call   c0105148 <kmalloc>
c01036d0:	83 c4 10             	add    $0x10,%esp
c01036d3:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (vma != NULL) {
c01036d6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01036da:	74 1b                	je     c01036f7 <vma_create+0x37>
        vma->vm_start = vm_start;
c01036dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036df:	8b 55 08             	mov    0x8(%ebp),%edx
c01036e2:	89 50 04             	mov    %edx,0x4(%eax)
        vma->vm_end = vm_end;
c01036e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036e8:	8b 55 0c             	mov    0xc(%ebp),%edx
c01036eb:	89 50 08             	mov    %edx,0x8(%eax)
        vma->vm_flags = vm_flags;
c01036ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036f1:	8b 55 10             	mov    0x10(%ebp),%edx
c01036f4:	89 50 0c             	mov    %edx,0xc(%eax)
    }
    return vma;
c01036f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01036fa:	c9                   	leave  
c01036fb:	c3                   	ret    

c01036fc <find_vma>:


// find_vma - find a vma  (vma->vm_start <= addr <= vma_vm_end)
struct vma_struct *
find_vma(struct mm_struct *mm, uintptr_t addr) {
c01036fc:	55                   	push   %ebp
c01036fd:	89 e5                	mov    %esp,%ebp
c01036ff:	83 ec 20             	sub    $0x20,%esp
    struct vma_struct *vma = NULL;
c0103702:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    if (mm != NULL) {
c0103709:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010370d:	0f 84 95 00 00 00    	je     c01037a8 <find_vma+0xac>
        vma = mm->mmap_cache;
c0103713:	8b 45 08             	mov    0x8(%ebp),%eax
c0103716:	8b 40 08             	mov    0x8(%eax),%eax
c0103719:	89 45 fc             	mov    %eax,-0x4(%ebp)
        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
c010371c:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0103720:	74 16                	je     c0103738 <find_vma+0x3c>
c0103722:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103725:	8b 40 04             	mov    0x4(%eax),%eax
c0103728:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010372b:	77 0b                	ja     c0103738 <find_vma+0x3c>
c010372d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103730:	8b 40 08             	mov    0x8(%eax),%eax
c0103733:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0103736:	77 61                	ja     c0103799 <find_vma+0x9d>
                bool found = 0;
c0103738:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
                list_entry_t *list = &(mm->mmap_list), *le = list;
c010373f:	8b 45 08             	mov    0x8(%ebp),%eax
c0103742:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103745:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103748:	89 45 f4             	mov    %eax,-0xc(%ebp)
                while ((le = list_next(le)) != list) {
c010374b:	eb 28                	jmp    c0103775 <find_vma+0x79>
                    vma = le2vma(le, list_link);
c010374d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103750:	83 e8 10             	sub    $0x10,%eax
c0103753:	89 45 fc             	mov    %eax,-0x4(%ebp)
                    if (vma->vm_start<=addr && addr < vma->vm_end) {
c0103756:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103759:	8b 40 04             	mov    0x4(%eax),%eax
c010375c:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010375f:	77 14                	ja     c0103775 <find_vma+0x79>
c0103761:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103764:	8b 40 08             	mov    0x8(%eax),%eax
c0103767:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010376a:	76 09                	jbe    c0103775 <find_vma+0x79>
                        found = 1;
c010376c:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
                        break;
c0103773:	eb 17                	jmp    c010378c <find_vma+0x90>
c0103775:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103778:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010377b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010377e:	8b 40 04             	mov    0x4(%eax),%eax
    if (mm != NULL) {
        vma = mm->mmap_cache;
        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
                bool found = 0;
                list_entry_t *list = &(mm->mmap_list), *le = list;
                while ((le = list_next(le)) != list) {
c0103781:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103784:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103787:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010378a:	75 c1                	jne    c010374d <find_vma+0x51>
                    if (vma->vm_start<=addr && addr < vma->vm_end) {
                        found = 1;
                        break;
                    }
                }
                if (!found) {
c010378c:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
c0103790:	75 07                	jne    c0103799 <find_vma+0x9d>
                    vma = NULL;
c0103792:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
                }
        }
        if (vma != NULL) {
c0103799:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c010379d:	74 09                	je     c01037a8 <find_vma+0xac>
            mm->mmap_cache = vma;
c010379f:	8b 45 08             	mov    0x8(%ebp),%eax
c01037a2:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01037a5:	89 50 08             	mov    %edx,0x8(%eax)
        }
    }
    return vma;
c01037a8:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c01037ab:	c9                   	leave  
c01037ac:	c3                   	ret    

c01037ad <check_vma_overlap>:


// check_vma_overlap - check if vma1 overlaps vma2 ?
static inline void
check_vma_overlap(struct vma_struct *prev, struct vma_struct *next) {
c01037ad:	55                   	push   %ebp
c01037ae:	89 e5                	mov    %esp,%ebp
c01037b0:	83 ec 08             	sub    $0x8,%esp
    assert(prev->vm_start < prev->vm_end);
c01037b3:	8b 45 08             	mov    0x8(%ebp),%eax
c01037b6:	8b 50 04             	mov    0x4(%eax),%edx
c01037b9:	8b 45 08             	mov    0x8(%ebp),%eax
c01037bc:	8b 40 08             	mov    0x8(%eax),%eax
c01037bf:	39 c2                	cmp    %eax,%edx
c01037c1:	72 16                	jb     c01037d9 <check_vma_overlap+0x2c>
c01037c3:	68 7d d5 10 c0       	push   $0xc010d57d
c01037c8:	68 9b d5 10 c0       	push   $0xc010d59b
c01037cd:	6a 6b                	push   $0x6b
c01037cf:	68 b0 d5 10 c0       	push   $0xc010d5b0
c01037d4:	e8 24 cc ff ff       	call   c01003fd <__panic>
    assert(prev->vm_end <= next->vm_start);
c01037d9:	8b 45 08             	mov    0x8(%ebp),%eax
c01037dc:	8b 50 08             	mov    0x8(%eax),%edx
c01037df:	8b 45 0c             	mov    0xc(%ebp),%eax
c01037e2:	8b 40 04             	mov    0x4(%eax),%eax
c01037e5:	39 c2                	cmp    %eax,%edx
c01037e7:	76 16                	jbe    c01037ff <check_vma_overlap+0x52>
c01037e9:	68 c0 d5 10 c0       	push   $0xc010d5c0
c01037ee:	68 9b d5 10 c0       	push   $0xc010d59b
c01037f3:	6a 6c                	push   $0x6c
c01037f5:	68 b0 d5 10 c0       	push   $0xc010d5b0
c01037fa:	e8 fe cb ff ff       	call   c01003fd <__panic>
    assert(next->vm_start < next->vm_end);
c01037ff:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103802:	8b 50 04             	mov    0x4(%eax),%edx
c0103805:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103808:	8b 40 08             	mov    0x8(%eax),%eax
c010380b:	39 c2                	cmp    %eax,%edx
c010380d:	72 16                	jb     c0103825 <check_vma_overlap+0x78>
c010380f:	68 df d5 10 c0       	push   $0xc010d5df
c0103814:	68 9b d5 10 c0       	push   $0xc010d59b
c0103819:	6a 6d                	push   $0x6d
c010381b:	68 b0 d5 10 c0       	push   $0xc010d5b0
c0103820:	e8 d8 cb ff ff       	call   c01003fd <__panic>
}
c0103825:	90                   	nop
c0103826:	c9                   	leave  
c0103827:	c3                   	ret    

c0103828 <insert_vma_struct>:


// insert_vma_struct -insert vma in mm's list link
void
insert_vma_struct(struct mm_struct *mm, struct vma_struct *vma) {
c0103828:	55                   	push   %ebp
c0103829:	89 e5                	mov    %esp,%ebp
c010382b:	83 ec 38             	sub    $0x38,%esp
    assert(vma->vm_start < vma->vm_end);
c010382e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103831:	8b 50 04             	mov    0x4(%eax),%edx
c0103834:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103837:	8b 40 08             	mov    0x8(%eax),%eax
c010383a:	39 c2                	cmp    %eax,%edx
c010383c:	72 16                	jb     c0103854 <insert_vma_struct+0x2c>
c010383e:	68 fd d5 10 c0       	push   $0xc010d5fd
c0103843:	68 9b d5 10 c0       	push   $0xc010d59b
c0103848:	6a 74                	push   $0x74
c010384a:	68 b0 d5 10 c0       	push   $0xc010d5b0
c010384f:	e8 a9 cb ff ff       	call   c01003fd <__panic>
    list_entry_t *list = &(mm->mmap_list);
c0103854:	8b 45 08             	mov    0x8(%ebp),%eax
c0103857:	89 45 ec             	mov    %eax,-0x14(%ebp)
    list_entry_t *le_prev = list, *le_next;
c010385a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010385d:	89 45 f4             	mov    %eax,-0xc(%ebp)

        list_entry_t *le = list;
c0103860:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103863:	89 45 f0             	mov    %eax,-0x10(%ebp)
        while ((le = list_next(le)) != list) {
c0103866:	eb 1f                	jmp    c0103887 <insert_vma_struct+0x5f>
            struct vma_struct *mmap_prev = le2vma(le, list_link);
c0103868:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010386b:	83 e8 10             	sub    $0x10,%eax
c010386e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            if (mmap_prev->vm_start > vma->vm_start) {
c0103871:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103874:	8b 50 04             	mov    0x4(%eax),%edx
c0103877:	8b 45 0c             	mov    0xc(%ebp),%eax
c010387a:	8b 40 04             	mov    0x4(%eax),%eax
c010387d:	39 c2                	cmp    %eax,%edx
c010387f:	77 1f                	ja     c01038a0 <insert_vma_struct+0x78>
                break;
            }
            le_prev = le;
c0103881:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103884:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103887:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010388a:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010388d:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0103890:	8b 40 04             	mov    0x4(%eax),%eax
    assert(vma->vm_start < vma->vm_end);
    list_entry_t *list = &(mm->mmap_list);
    list_entry_t *le_prev = list, *le_next;

        list_entry_t *le = list;
        while ((le = list_next(le)) != list) {
c0103893:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103896:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103899:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010389c:	75 ca                	jne    c0103868 <insert_vma_struct+0x40>
c010389e:	eb 01                	jmp    c01038a1 <insert_vma_struct+0x79>
            struct vma_struct *mmap_prev = le2vma(le, list_link);
            if (mmap_prev->vm_start > vma->vm_start) {
                break;
c01038a0:	90                   	nop
c01038a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01038a4:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01038a7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01038aa:	8b 40 04             	mov    0x4(%eax),%eax
            }
            le_prev = le;
        }

    le_next = list_next(le_prev);
c01038ad:	89 45 dc             	mov    %eax,-0x24(%ebp)

    /* check overlap */
    if (le_prev != list) {
c01038b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01038b3:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01038b6:	74 15                	je     c01038cd <insert_vma_struct+0xa5>
        check_vma_overlap(le2vma(le_prev, list_link), vma);
c01038b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01038bb:	83 e8 10             	sub    $0x10,%eax
c01038be:	83 ec 08             	sub    $0x8,%esp
c01038c1:	ff 75 0c             	pushl  0xc(%ebp)
c01038c4:	50                   	push   %eax
c01038c5:	e8 e3 fe ff ff       	call   c01037ad <check_vma_overlap>
c01038ca:	83 c4 10             	add    $0x10,%esp
    }
    if (le_next != list) {
c01038cd:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01038d0:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01038d3:	74 15                	je     c01038ea <insert_vma_struct+0xc2>
        check_vma_overlap(vma, le2vma(le_next, list_link));
c01038d5:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01038d8:	83 e8 10             	sub    $0x10,%eax
c01038db:	83 ec 08             	sub    $0x8,%esp
c01038de:	50                   	push   %eax
c01038df:	ff 75 0c             	pushl  0xc(%ebp)
c01038e2:	e8 c6 fe ff ff       	call   c01037ad <check_vma_overlap>
c01038e7:	83 c4 10             	add    $0x10,%esp
    }

    vma->vm_mm = mm;
c01038ea:	8b 45 0c             	mov    0xc(%ebp),%eax
c01038ed:	8b 55 08             	mov    0x8(%ebp),%edx
c01038f0:	89 10                	mov    %edx,(%eax)
    list_add_after(le_prev, &(vma->list_link));
c01038f2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01038f5:	8d 50 10             	lea    0x10(%eax),%edx
c01038f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01038fb:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01038fe:	89 55 d4             	mov    %edx,-0x2c(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0103901:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103904:	8b 40 04             	mov    0x4(%eax),%eax
c0103907:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010390a:	89 55 d0             	mov    %edx,-0x30(%ebp)
c010390d:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0103910:	89 55 cc             	mov    %edx,-0x34(%ebp)
c0103913:	89 45 c8             	mov    %eax,-0x38(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0103916:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0103919:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010391c:	89 10                	mov    %edx,(%eax)
c010391e:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0103921:	8b 10                	mov    (%eax),%edx
c0103923:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0103926:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0103929:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010392c:	8b 55 c8             	mov    -0x38(%ebp),%edx
c010392f:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0103932:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0103935:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0103938:	89 10                	mov    %edx,(%eax)

    mm->map_count ++;
c010393a:	8b 45 08             	mov    0x8(%ebp),%eax
c010393d:	8b 40 10             	mov    0x10(%eax),%eax
c0103940:	8d 50 01             	lea    0x1(%eax),%edx
c0103943:	8b 45 08             	mov    0x8(%ebp),%eax
c0103946:	89 50 10             	mov    %edx,0x10(%eax)
}
c0103949:	90                   	nop
c010394a:	c9                   	leave  
c010394b:	c3                   	ret    

c010394c <mm_destroy>:

// mm_destroy - free mm and mm internal fields
void
mm_destroy(struct mm_struct *mm) {
c010394c:	55                   	push   %ebp
c010394d:	89 e5                	mov    %esp,%ebp
c010394f:	83 ec 28             	sub    $0x28,%esp
    assert(mm_count(mm) == 0);
c0103952:	ff 75 08             	pushl  0x8(%ebp)
c0103955:	e8 53 fc ff ff       	call   c01035ad <mm_count>
c010395a:	83 c4 04             	add    $0x4,%esp
c010395d:	85 c0                	test   %eax,%eax
c010395f:	74 19                	je     c010397a <mm_destroy+0x2e>
c0103961:	68 19 d6 10 c0       	push   $0xc010d619
c0103966:	68 9b d5 10 c0       	push   $0xc010d59b
c010396b:	68 94 00 00 00       	push   $0x94
c0103970:	68 b0 d5 10 c0       	push   $0xc010d5b0
c0103975:	e8 83 ca ff ff       	call   c01003fd <__panic>

    list_entry_t *list = &(mm->mmap_list), *le;
c010397a:	8b 45 08             	mov    0x8(%ebp),%eax
c010397d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(list)) != list) {
c0103980:	eb 3a                	jmp    c01039bc <mm_destroy+0x70>
c0103982:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103985:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0103988:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010398b:	8b 40 04             	mov    0x4(%eax),%eax
c010398e:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0103991:	8b 12                	mov    (%edx),%edx
c0103993:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0103996:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0103999:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010399c:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010399f:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c01039a2:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01039a5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01039a8:	89 10                	mov    %edx,(%eax)
        list_del(le);
        kfree(le2vma(le, list_link));  //kfree vma        
c01039aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01039ad:	83 e8 10             	sub    $0x10,%eax
c01039b0:	83 ec 0c             	sub    $0xc,%esp
c01039b3:	50                   	push   %eax
c01039b4:	e8 a7 17 00 00       	call   c0105160 <kfree>
c01039b9:	83 c4 10             	add    $0x10,%esp
c01039bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01039bf:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01039c2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01039c5:	8b 40 04             	mov    0x4(%eax),%eax
void
mm_destroy(struct mm_struct *mm) {
    assert(mm_count(mm) == 0);

    list_entry_t *list = &(mm->mmap_list), *le;
    while ((le = list_next(list)) != list) {
c01039c8:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01039cb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01039ce:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01039d1:	75 af                	jne    c0103982 <mm_destroy+0x36>
        list_del(le);
        kfree(le2vma(le, list_link));  //kfree vma        
    }
    kfree(mm); //kfree mm
c01039d3:	83 ec 0c             	sub    $0xc,%esp
c01039d6:	ff 75 08             	pushl  0x8(%ebp)
c01039d9:	e8 82 17 00 00       	call   c0105160 <kfree>
c01039de:	83 c4 10             	add    $0x10,%esp
    mm=NULL;
c01039e1:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
}
c01039e8:	90                   	nop
c01039e9:	c9                   	leave  
c01039ea:	c3                   	ret    

c01039eb <mm_map>:

int
mm_map(struct mm_struct *mm, uintptr_t addr, size_t len, uint32_t vm_flags,
       struct vma_struct **vma_store) {
c01039eb:	55                   	push   %ebp
c01039ec:	89 e5                	mov    %esp,%ebp
c01039ee:	83 ec 28             	sub    $0x28,%esp
    uintptr_t start = ROUNDDOWN(addr, PGSIZE), end = ROUNDUP(addr + len, PGSIZE);
c01039f1:	8b 45 0c             	mov    0xc(%ebp),%eax
c01039f4:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01039f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01039fa:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01039ff:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0103a02:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
c0103a09:	8b 55 0c             	mov    0xc(%ebp),%edx
c0103a0c:	8b 45 10             	mov    0x10(%ebp),%eax
c0103a0f:	01 c2                	add    %eax,%edx
c0103a11:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103a14:	01 d0                	add    %edx,%eax
c0103a16:	83 e8 01             	sub    $0x1,%eax
c0103a19:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0103a1c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103a1f:	ba 00 00 00 00       	mov    $0x0,%edx
c0103a24:	f7 75 e8             	divl   -0x18(%ebp)
c0103a27:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103a2a:	29 d0                	sub    %edx,%eax
c0103a2c:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if (!USER_ACCESS(start, end)) {
c0103a2f:	81 7d ec ff ff 1f 00 	cmpl   $0x1fffff,-0x14(%ebp)
c0103a36:	76 11                	jbe    c0103a49 <mm_map+0x5e>
c0103a38:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103a3b:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0103a3e:	73 09                	jae    c0103a49 <mm_map+0x5e>
c0103a40:	81 7d e0 00 00 00 b0 	cmpl   $0xb0000000,-0x20(%ebp)
c0103a47:	76 0a                	jbe    c0103a53 <mm_map+0x68>
        return -E_INVAL;
c0103a49:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0103a4e:	e9 9e 00 00 00       	jmp    c0103af1 <mm_map+0x106>
    }

    assert(mm != NULL);
c0103a53:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0103a57:	75 19                	jne    c0103a72 <mm_map+0x87>
c0103a59:	68 2b d6 10 c0       	push   $0xc010d62b
c0103a5e:	68 9b d5 10 c0       	push   $0xc010d59b
c0103a63:	68 a7 00 00 00       	push   $0xa7
c0103a68:	68 b0 d5 10 c0       	push   $0xc010d5b0
c0103a6d:	e8 8b c9 ff ff       	call   c01003fd <__panic>

    int ret = -E_INVAL;
c0103a72:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)

    struct vma_struct *vma;
    if ((vma = find_vma(mm, start)) != NULL && end > vma->vm_start) {
c0103a79:	83 ec 08             	sub    $0x8,%esp
c0103a7c:	ff 75 ec             	pushl  -0x14(%ebp)
c0103a7f:	ff 75 08             	pushl  0x8(%ebp)
c0103a82:	e8 75 fc ff ff       	call   c01036fc <find_vma>
c0103a87:	83 c4 10             	add    $0x10,%esp
c0103a8a:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0103a8d:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0103a91:	74 0b                	je     c0103a9e <mm_map+0xb3>
c0103a93:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103a96:	8b 40 04             	mov    0x4(%eax),%eax
c0103a99:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0103a9c:	72 4c                	jb     c0103aea <mm_map+0xff>
        goto out;
    }
    ret = -E_NO_MEM;
c0103a9e:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    if ((vma = vma_create(start, end, vm_flags)) == NULL) {
c0103aa5:	83 ec 04             	sub    $0x4,%esp
c0103aa8:	ff 75 14             	pushl  0x14(%ebp)
c0103aab:	ff 75 e0             	pushl  -0x20(%ebp)
c0103aae:	ff 75 ec             	pushl  -0x14(%ebp)
c0103ab1:	e8 0a fc ff ff       	call   c01036c0 <vma_create>
c0103ab6:	83 c4 10             	add    $0x10,%esp
c0103ab9:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0103abc:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0103ac0:	74 2b                	je     c0103aed <mm_map+0x102>
        goto out;
    }
    insert_vma_struct(mm, vma);
c0103ac2:	83 ec 08             	sub    $0x8,%esp
c0103ac5:	ff 75 dc             	pushl  -0x24(%ebp)
c0103ac8:	ff 75 08             	pushl  0x8(%ebp)
c0103acb:	e8 58 fd ff ff       	call   c0103828 <insert_vma_struct>
c0103ad0:	83 c4 10             	add    $0x10,%esp
    if (vma_store != NULL) {
c0103ad3:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0103ad7:	74 08                	je     c0103ae1 <mm_map+0xf6>
        *vma_store = vma;
c0103ad9:	8b 45 18             	mov    0x18(%ebp),%eax
c0103adc:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0103adf:	89 10                	mov    %edx,(%eax)
    }
    ret = 0;
c0103ae1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0103ae8:	eb 04                	jmp    c0103aee <mm_map+0x103>

    int ret = -E_INVAL;

    struct vma_struct *vma;
    if ((vma = find_vma(mm, start)) != NULL && end > vma->vm_start) {
        goto out;
c0103aea:	90                   	nop
c0103aeb:	eb 01                	jmp    c0103aee <mm_map+0x103>
    }
    ret = -E_NO_MEM;

    if ((vma = vma_create(start, end, vm_flags)) == NULL) {
        goto out;
c0103aed:	90                   	nop
        *vma_store = vma;
    }
    ret = 0;

out:
    return ret;
c0103aee:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0103af1:	c9                   	leave  
c0103af2:	c3                   	ret    

c0103af3 <dup_mmap>:

int
dup_mmap(struct mm_struct *to, struct mm_struct *from) {
c0103af3:	55                   	push   %ebp
c0103af4:	89 e5                	mov    %esp,%ebp
c0103af6:	53                   	push   %ebx
c0103af7:	83 ec 24             	sub    $0x24,%esp
    assert(to != NULL && from != NULL);
c0103afa:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0103afe:	74 06                	je     c0103b06 <dup_mmap+0x13>
c0103b00:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0103b04:	75 19                	jne    c0103b1f <dup_mmap+0x2c>
c0103b06:	68 36 d6 10 c0       	push   $0xc010d636
c0103b0b:	68 9b d5 10 c0       	push   $0xc010d59b
c0103b10:	68 c0 00 00 00       	push   $0xc0
c0103b15:	68 b0 d5 10 c0       	push   $0xc010d5b0
c0103b1a:	e8 de c8 ff ff       	call   c01003fd <__panic>
    list_entry_t *list = &(from->mmap_list), *le = list;
c0103b1f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103b22:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103b25:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103b28:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_prev(le)) != list) {
c0103b2b:	e9 86 00 00 00       	jmp    c0103bb6 <dup_mmap+0xc3>
        struct vma_struct *vma, *nvma;
        vma = le2vma(le, list_link);
c0103b30:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103b33:	83 e8 10             	sub    $0x10,%eax
c0103b36:	89 45 ec             	mov    %eax,-0x14(%ebp)
        nvma = vma_create(vma->vm_start, vma->vm_end, vma->vm_flags);
c0103b39:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103b3c:	8b 48 0c             	mov    0xc(%eax),%ecx
c0103b3f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103b42:	8b 50 08             	mov    0x8(%eax),%edx
c0103b45:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103b48:	8b 40 04             	mov    0x4(%eax),%eax
c0103b4b:	83 ec 04             	sub    $0x4,%esp
c0103b4e:	51                   	push   %ecx
c0103b4f:	52                   	push   %edx
c0103b50:	50                   	push   %eax
c0103b51:	e8 6a fb ff ff       	call   c01036c0 <vma_create>
c0103b56:	83 c4 10             	add    $0x10,%esp
c0103b59:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (nvma == NULL) {
c0103b5c:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0103b60:	75 07                	jne    c0103b69 <dup_mmap+0x76>
            return -E_NO_MEM;
c0103b62:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0103b67:	eb 6c                	jmp    c0103bd5 <dup_mmap+0xe2>
        }

        insert_vma_struct(to, nvma);
c0103b69:	83 ec 08             	sub    $0x8,%esp
c0103b6c:	ff 75 e8             	pushl  -0x18(%ebp)
c0103b6f:	ff 75 08             	pushl  0x8(%ebp)
c0103b72:	e8 b1 fc ff ff       	call   c0103828 <insert_vma_struct>
c0103b77:	83 c4 10             	add    $0x10,%esp

        bool share = 0;
c0103b7a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
c0103b81:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103b84:	8b 58 08             	mov    0x8(%eax),%ebx
c0103b87:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103b8a:	8b 48 04             	mov    0x4(%eax),%ecx
c0103b8d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103b90:	8b 50 0c             	mov    0xc(%eax),%edx
c0103b93:	8b 45 08             	mov    0x8(%ebp),%eax
c0103b96:	8b 40 0c             	mov    0xc(%eax),%eax
c0103b99:	83 ec 0c             	sub    $0xc,%esp
c0103b9c:	ff 75 e4             	pushl  -0x1c(%ebp)
c0103b9f:	53                   	push   %ebx
c0103ba0:	51                   	push   %ecx
c0103ba1:	52                   	push   %edx
c0103ba2:	50                   	push   %eax
c0103ba3:	e8 03 3f 00 00       	call   c0107aab <copy_range>
c0103ba8:	83 c4 20             	add    $0x20,%esp
c0103bab:	85 c0                	test   %eax,%eax
c0103bad:	74 07                	je     c0103bb6 <dup_mmap+0xc3>
            return -E_NO_MEM;
c0103baf:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0103bb4:	eb 1f                	jmp    c0103bd5 <dup_mmap+0xe2>
c0103bb6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103bb9:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c0103bbc:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103bbf:	8b 00                	mov    (%eax),%eax

int
dup_mmap(struct mm_struct *to, struct mm_struct *from) {
    assert(to != NULL && from != NULL);
    list_entry_t *list = &(from->mmap_list), *le = list;
    while ((le = list_prev(le)) != list) {
c0103bc1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103bc4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103bc7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0103bca:	0f 85 60 ff ff ff    	jne    c0103b30 <dup_mmap+0x3d>
        bool share = 0;
        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
            return -E_NO_MEM;
        }
    }
    return 0;
c0103bd0:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0103bd5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0103bd8:	c9                   	leave  
c0103bd9:	c3                   	ret    

c0103bda <exit_mmap>:

void
exit_mmap(struct mm_struct *mm) {
c0103bda:	55                   	push   %ebp
c0103bdb:	89 e5                	mov    %esp,%ebp
c0103bdd:	83 ec 28             	sub    $0x28,%esp
    assert(mm != NULL && mm_count(mm) == 0);
c0103be0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0103be4:	74 0f                	je     c0103bf5 <exit_mmap+0x1b>
c0103be6:	ff 75 08             	pushl  0x8(%ebp)
c0103be9:	e8 bf f9 ff ff       	call   c01035ad <mm_count>
c0103bee:	83 c4 04             	add    $0x4,%esp
c0103bf1:	85 c0                	test   %eax,%eax
c0103bf3:	74 19                	je     c0103c0e <exit_mmap+0x34>
c0103bf5:	68 54 d6 10 c0       	push   $0xc010d654
c0103bfa:	68 9b d5 10 c0       	push   $0xc010d59b
c0103bff:	68 d6 00 00 00       	push   $0xd6
c0103c04:	68 b0 d5 10 c0       	push   $0xc010d5b0
c0103c09:	e8 ef c7 ff ff       	call   c01003fd <__panic>
    pde_t *pgdir = mm->pgdir;
c0103c0e:	8b 45 08             	mov    0x8(%ebp),%eax
c0103c11:	8b 40 0c             	mov    0xc(%eax),%eax
c0103c14:	89 45 f0             	mov    %eax,-0x10(%ebp)
    list_entry_t *list = &(mm->mmap_list), *le = list;
c0103c17:	8b 45 08             	mov    0x8(%ebp),%eax
c0103c1a:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0103c1d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103c20:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c0103c23:	eb 25                	jmp    c0103c4a <exit_mmap+0x70>
        struct vma_struct *vma = le2vma(le, list_link);
c0103c25:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103c28:	83 e8 10             	sub    $0x10,%eax
c0103c2b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
c0103c2e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103c31:	8b 50 08             	mov    0x8(%eax),%edx
c0103c34:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103c37:	8b 40 04             	mov    0x4(%eax),%eax
c0103c3a:	83 ec 04             	sub    $0x4,%esp
c0103c3d:	52                   	push   %edx
c0103c3e:	50                   	push   %eax
c0103c3f:	ff 75 f0             	pushl  -0x10(%ebp)
c0103c42:	e8 9d 3c 00 00       	call   c01078e4 <unmap_range>
c0103c47:	83 c4 10             	add    $0x10,%esp
c0103c4a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103c4d:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0103c50:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103c53:	8b 40 04             	mov    0x4(%eax),%eax
void
exit_mmap(struct mm_struct *mm) {
    assert(mm != NULL && mm_count(mm) == 0);
    pde_t *pgdir = mm->pgdir;
    list_entry_t *list = &(mm->mmap_list), *le = list;
    while ((le = list_next(le)) != list) {
c0103c56:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103c59:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103c5c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0103c5f:	75 c4                	jne    c0103c25 <exit_mmap+0x4b>
        struct vma_struct *vma = le2vma(le, list_link);
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
    }
    while ((le = list_next(le)) != list) {
c0103c61:	eb 25                	jmp    c0103c88 <exit_mmap+0xae>
        struct vma_struct *vma = le2vma(le, list_link);
c0103c63:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103c66:	83 e8 10             	sub    $0x10,%eax
c0103c69:	89 45 e0             	mov    %eax,-0x20(%ebp)
        exit_range(pgdir, vma->vm_start, vma->vm_end);
c0103c6c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103c6f:	8b 50 08             	mov    0x8(%eax),%edx
c0103c72:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103c75:	8b 40 04             	mov    0x4(%eax),%eax
c0103c78:	83 ec 04             	sub    $0x4,%esp
c0103c7b:	52                   	push   %edx
c0103c7c:	50                   	push   %eax
c0103c7d:	ff 75 f0             	pushl  -0x10(%ebp)
c0103c80:	e8 32 3d 00 00       	call   c01079b7 <exit_range>
c0103c85:	83 c4 10             	add    $0x10,%esp
c0103c88:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103c8b:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0103c8e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103c91:	8b 40 04             	mov    0x4(%eax),%eax
    list_entry_t *list = &(mm->mmap_list), *le = list;
    while ((le = list_next(le)) != list) {
        struct vma_struct *vma = le2vma(le, list_link);
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
    }
    while ((le = list_next(le)) != list) {
c0103c94:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103c97:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103c9a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0103c9d:	75 c4                	jne    c0103c63 <exit_mmap+0x89>
        struct vma_struct *vma = le2vma(le, list_link);
        exit_range(pgdir, vma->vm_start, vma->vm_end);
    }
}
c0103c9f:	90                   	nop
c0103ca0:	c9                   	leave  
c0103ca1:	c3                   	ret    

c0103ca2 <copy_from_user>:

bool
copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable) {
c0103ca2:	55                   	push   %ebp
c0103ca3:	89 e5                	mov    %esp,%ebp
c0103ca5:	83 ec 08             	sub    $0x8,%esp
    if (!user_mem_check(mm, (uintptr_t)src, len, writable)) {
c0103ca8:	8b 45 10             	mov    0x10(%ebp),%eax
c0103cab:	ff 75 18             	pushl  0x18(%ebp)
c0103cae:	ff 75 14             	pushl  0x14(%ebp)
c0103cb1:	50                   	push   %eax
c0103cb2:	ff 75 08             	pushl  0x8(%ebp)
c0103cb5:	e8 b1 08 00 00       	call   c010456b <user_mem_check>
c0103cba:	83 c4 10             	add    $0x10,%esp
c0103cbd:	85 c0                	test   %eax,%eax
c0103cbf:	75 07                	jne    c0103cc8 <copy_from_user+0x26>
        return 0;
c0103cc1:	b8 00 00 00 00       	mov    $0x0,%eax
c0103cc6:	eb 19                	jmp    c0103ce1 <copy_from_user+0x3f>
    }
    memcpy(dst, src, len);
c0103cc8:	83 ec 04             	sub    $0x4,%esp
c0103ccb:	ff 75 14             	pushl  0x14(%ebp)
c0103cce:	ff 75 10             	pushl  0x10(%ebp)
c0103cd1:	ff 75 0c             	pushl  0xc(%ebp)
c0103cd4:	e8 96 87 00 00       	call   c010c46f <memcpy>
c0103cd9:	83 c4 10             	add    $0x10,%esp
    return 1;
c0103cdc:	b8 01 00 00 00       	mov    $0x1,%eax
}
c0103ce1:	c9                   	leave  
c0103ce2:	c3                   	ret    

c0103ce3 <copy_to_user>:

bool
copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len) {
c0103ce3:	55                   	push   %ebp
c0103ce4:	89 e5                	mov    %esp,%ebp
c0103ce6:	83 ec 08             	sub    $0x8,%esp
    if (!user_mem_check(mm, (uintptr_t)dst, len, 1)) {
c0103ce9:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103cec:	6a 01                	push   $0x1
c0103cee:	ff 75 14             	pushl  0x14(%ebp)
c0103cf1:	50                   	push   %eax
c0103cf2:	ff 75 08             	pushl  0x8(%ebp)
c0103cf5:	e8 71 08 00 00       	call   c010456b <user_mem_check>
c0103cfa:	83 c4 10             	add    $0x10,%esp
c0103cfd:	85 c0                	test   %eax,%eax
c0103cff:	75 07                	jne    c0103d08 <copy_to_user+0x25>
        return 0;
c0103d01:	b8 00 00 00 00       	mov    $0x0,%eax
c0103d06:	eb 19                	jmp    c0103d21 <copy_to_user+0x3e>
    }
    memcpy(dst, src, len);
c0103d08:	83 ec 04             	sub    $0x4,%esp
c0103d0b:	ff 75 14             	pushl  0x14(%ebp)
c0103d0e:	ff 75 10             	pushl  0x10(%ebp)
c0103d11:	ff 75 0c             	pushl  0xc(%ebp)
c0103d14:	e8 56 87 00 00       	call   c010c46f <memcpy>
c0103d19:	83 c4 10             	add    $0x10,%esp
    return 1;
c0103d1c:	b8 01 00 00 00       	mov    $0x1,%eax
}
c0103d21:	c9                   	leave  
c0103d22:	c3                   	ret    

c0103d23 <vmm_init>:

// vmm_init - initialize virtual memory management
//          - now just call check_vmm to check correctness of vmm
void
vmm_init(void) {
c0103d23:	55                   	push   %ebp
c0103d24:	89 e5                	mov    %esp,%ebp
c0103d26:	83 ec 08             	sub    $0x8,%esp
    check_vmm();
c0103d29:	e8 03 00 00 00       	call   c0103d31 <check_vmm>
}
c0103d2e:	90                   	nop
c0103d2f:	c9                   	leave  
c0103d30:	c3                   	ret    

c0103d31 <check_vmm>:

// check_vmm - check correctness of vmm
static void
check_vmm(void) {
c0103d31:	55                   	push   %ebp
c0103d32:	89 e5                	mov    %esp,%ebp
c0103d34:	83 ec 18             	sub    $0x18,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0103d37:	e8 d7 33 00 00       	call   c0107113 <nr_free_pages>
c0103d3c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    check_vma_struct();
c0103d3f:	e8 18 00 00 00       	call   c0103d5c <check_vma_struct>
    check_pgfault();
c0103d44:	e8 10 04 00 00       	call   c0104159 <check_pgfault>

    cprintf("check_vmm() succeeded.\n");
c0103d49:	83 ec 0c             	sub    $0xc,%esp
c0103d4c:	68 74 d6 10 c0       	push   $0xc010d674
c0103d51:	e8 41 c5 ff ff       	call   c0100297 <cprintf>
c0103d56:	83 c4 10             	add    $0x10,%esp
}
c0103d59:	90                   	nop
c0103d5a:	c9                   	leave  
c0103d5b:	c3                   	ret    

c0103d5c <check_vma_struct>:

static void
check_vma_struct(void) {
c0103d5c:	55                   	push   %ebp
c0103d5d:	89 e5                	mov    %esp,%ebp
c0103d5f:	83 ec 58             	sub    $0x58,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0103d62:	e8 ac 33 00 00       	call   c0107113 <nr_free_pages>
c0103d67:	89 45 ec             	mov    %eax,-0x14(%ebp)

    struct mm_struct *mm = mm_create();
c0103d6a:	e8 b1 f8 ff ff       	call   c0103620 <mm_create>
c0103d6f:	89 45 e8             	mov    %eax,-0x18(%ebp)
    assert(mm != NULL);
c0103d72:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0103d76:	75 19                	jne    c0103d91 <check_vma_struct+0x35>
c0103d78:	68 2b d6 10 c0       	push   $0xc010d62b
c0103d7d:	68 9b d5 10 c0       	push   $0xc010d59b
c0103d82:	68 0c 01 00 00       	push   $0x10c
c0103d87:	68 b0 d5 10 c0       	push   $0xc010d5b0
c0103d8c:	e8 6c c6 ff ff       	call   c01003fd <__panic>

    int step1 = 10, step2 = step1 * 10;
c0103d91:	c7 45 e4 0a 00 00 00 	movl   $0xa,-0x1c(%ebp)
c0103d98:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0103d9b:	89 d0                	mov    %edx,%eax
c0103d9d:	c1 e0 02             	shl    $0x2,%eax
c0103da0:	01 d0                	add    %edx,%eax
c0103da2:	01 c0                	add    %eax,%eax
c0103da4:	89 45 e0             	mov    %eax,-0x20(%ebp)

    int i;
    for (i = step1; i >= 1; i --) {
c0103da7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103daa:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103dad:	eb 5f                	jmp    c0103e0e <check_vma_struct+0xb2>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c0103daf:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0103db2:	89 d0                	mov    %edx,%eax
c0103db4:	c1 e0 02             	shl    $0x2,%eax
c0103db7:	01 d0                	add    %edx,%eax
c0103db9:	83 c0 02             	add    $0x2,%eax
c0103dbc:	89 c1                	mov    %eax,%ecx
c0103dbe:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0103dc1:	89 d0                	mov    %edx,%eax
c0103dc3:	c1 e0 02             	shl    $0x2,%eax
c0103dc6:	01 d0                	add    %edx,%eax
c0103dc8:	83 ec 04             	sub    $0x4,%esp
c0103dcb:	6a 00                	push   $0x0
c0103dcd:	51                   	push   %ecx
c0103dce:	50                   	push   %eax
c0103dcf:	e8 ec f8 ff ff       	call   c01036c0 <vma_create>
c0103dd4:	83 c4 10             	add    $0x10,%esp
c0103dd7:	89 45 dc             	mov    %eax,-0x24(%ebp)
        assert(vma != NULL);
c0103dda:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0103dde:	75 19                	jne    c0103df9 <check_vma_struct+0x9d>
c0103de0:	68 8c d6 10 c0       	push   $0xc010d68c
c0103de5:	68 9b d5 10 c0       	push   $0xc010d59b
c0103dea:	68 13 01 00 00       	push   $0x113
c0103def:	68 b0 d5 10 c0       	push   $0xc010d5b0
c0103df4:	e8 04 c6 ff ff       	call   c01003fd <__panic>
        insert_vma_struct(mm, vma);
c0103df9:	83 ec 08             	sub    $0x8,%esp
c0103dfc:	ff 75 dc             	pushl  -0x24(%ebp)
c0103dff:	ff 75 e8             	pushl  -0x18(%ebp)
c0103e02:	e8 21 fa ff ff       	call   c0103828 <insert_vma_struct>
c0103e07:	83 c4 10             	add    $0x10,%esp
    assert(mm != NULL);

    int step1 = 10, step2 = step1 * 10;

    int i;
    for (i = step1; i >= 1; i --) {
c0103e0a:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0103e0e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0103e12:	7f 9b                	jg     c0103daf <check_vma_struct+0x53>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    for (i = step1 + 1; i <= step2; i ++) {
c0103e14:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103e17:	83 c0 01             	add    $0x1,%eax
c0103e1a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103e1d:	eb 5f                	jmp    c0103e7e <check_vma_struct+0x122>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c0103e1f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0103e22:	89 d0                	mov    %edx,%eax
c0103e24:	c1 e0 02             	shl    $0x2,%eax
c0103e27:	01 d0                	add    %edx,%eax
c0103e29:	83 c0 02             	add    $0x2,%eax
c0103e2c:	89 c1                	mov    %eax,%ecx
c0103e2e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0103e31:	89 d0                	mov    %edx,%eax
c0103e33:	c1 e0 02             	shl    $0x2,%eax
c0103e36:	01 d0                	add    %edx,%eax
c0103e38:	83 ec 04             	sub    $0x4,%esp
c0103e3b:	6a 00                	push   $0x0
c0103e3d:	51                   	push   %ecx
c0103e3e:	50                   	push   %eax
c0103e3f:	e8 7c f8 ff ff       	call   c01036c0 <vma_create>
c0103e44:	83 c4 10             	add    $0x10,%esp
c0103e47:	89 45 d8             	mov    %eax,-0x28(%ebp)
        assert(vma != NULL);
c0103e4a:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c0103e4e:	75 19                	jne    c0103e69 <check_vma_struct+0x10d>
c0103e50:	68 8c d6 10 c0       	push   $0xc010d68c
c0103e55:	68 9b d5 10 c0       	push   $0xc010d59b
c0103e5a:	68 19 01 00 00       	push   $0x119
c0103e5f:	68 b0 d5 10 c0       	push   $0xc010d5b0
c0103e64:	e8 94 c5 ff ff       	call   c01003fd <__panic>
        insert_vma_struct(mm, vma);
c0103e69:	83 ec 08             	sub    $0x8,%esp
c0103e6c:	ff 75 d8             	pushl  -0x28(%ebp)
c0103e6f:	ff 75 e8             	pushl  -0x18(%ebp)
c0103e72:	e8 b1 f9 ff ff       	call   c0103828 <insert_vma_struct>
c0103e77:	83 c4 10             	add    $0x10,%esp
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    for (i = step1 + 1; i <= step2; i ++) {
c0103e7a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0103e7e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103e81:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0103e84:	7e 99                	jle    c0103e1f <check_vma_struct+0xc3>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    list_entry_t *le = list_next(&(mm->mmap_list));
c0103e86:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103e89:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c0103e8c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0103e8f:	8b 40 04             	mov    0x4(%eax),%eax
c0103e92:	89 45 f0             	mov    %eax,-0x10(%ebp)

    for (i = 1; i <= step2; i ++) {
c0103e95:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
c0103e9c:	e9 81 00 00 00       	jmp    c0103f22 <check_vma_struct+0x1c6>
        assert(le != &(mm->mmap_list));
c0103ea1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103ea4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0103ea7:	75 19                	jne    c0103ec2 <check_vma_struct+0x166>
c0103ea9:	68 98 d6 10 c0       	push   $0xc010d698
c0103eae:	68 9b d5 10 c0       	push   $0xc010d59b
c0103eb3:	68 20 01 00 00       	push   $0x120
c0103eb8:	68 b0 d5 10 c0       	push   $0xc010d5b0
c0103ebd:	e8 3b c5 ff ff       	call   c01003fd <__panic>
        struct vma_struct *mmap = le2vma(le, list_link);
c0103ec2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103ec5:	83 e8 10             	sub    $0x10,%eax
c0103ec8:	89 45 d0             	mov    %eax,-0x30(%ebp)
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
c0103ecb:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0103ece:	8b 48 04             	mov    0x4(%eax),%ecx
c0103ed1:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0103ed4:	89 d0                	mov    %edx,%eax
c0103ed6:	c1 e0 02             	shl    $0x2,%eax
c0103ed9:	01 d0                	add    %edx,%eax
c0103edb:	39 c1                	cmp    %eax,%ecx
c0103edd:	75 17                	jne    c0103ef6 <check_vma_struct+0x19a>
c0103edf:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0103ee2:	8b 48 08             	mov    0x8(%eax),%ecx
c0103ee5:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0103ee8:	89 d0                	mov    %edx,%eax
c0103eea:	c1 e0 02             	shl    $0x2,%eax
c0103eed:	01 d0                	add    %edx,%eax
c0103eef:	83 c0 02             	add    $0x2,%eax
c0103ef2:	39 c1                	cmp    %eax,%ecx
c0103ef4:	74 19                	je     c0103f0f <check_vma_struct+0x1b3>
c0103ef6:	68 b0 d6 10 c0       	push   $0xc010d6b0
c0103efb:	68 9b d5 10 c0       	push   $0xc010d59b
c0103f00:	68 22 01 00 00       	push   $0x122
c0103f05:	68 b0 d5 10 c0       	push   $0xc010d5b0
c0103f0a:	e8 ee c4 ff ff       	call   c01003fd <__panic>
c0103f0f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103f12:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c0103f15:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0103f18:	8b 40 04             	mov    0x4(%eax),%eax
        le = list_next(le);
c0103f1b:	89 45 f0             	mov    %eax,-0x10(%ebp)
        insert_vma_struct(mm, vma);
    }

    list_entry_t *le = list_next(&(mm->mmap_list));

    for (i = 1; i <= step2; i ++) {
c0103f1e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0103f22:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103f25:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0103f28:	0f 8e 73 ff ff ff    	jle    c0103ea1 <check_vma_struct+0x145>
        struct vma_struct *mmap = le2vma(le, list_link);
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
        le = list_next(le);
    }

    for (i = 5; i <= 5 * step2; i +=5) {
c0103f2e:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
c0103f35:	e9 80 01 00 00       	jmp    c01040ba <check_vma_struct+0x35e>
        struct vma_struct *vma1 = find_vma(mm, i);
c0103f3a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103f3d:	83 ec 08             	sub    $0x8,%esp
c0103f40:	50                   	push   %eax
c0103f41:	ff 75 e8             	pushl  -0x18(%ebp)
c0103f44:	e8 b3 f7 ff ff       	call   c01036fc <find_vma>
c0103f49:	83 c4 10             	add    $0x10,%esp
c0103f4c:	89 45 cc             	mov    %eax,-0x34(%ebp)
        assert(vma1 != NULL);
c0103f4f:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0103f53:	75 19                	jne    c0103f6e <check_vma_struct+0x212>
c0103f55:	68 e5 d6 10 c0       	push   $0xc010d6e5
c0103f5a:	68 9b d5 10 c0       	push   $0xc010d59b
c0103f5f:	68 28 01 00 00       	push   $0x128
c0103f64:	68 b0 d5 10 c0       	push   $0xc010d5b0
c0103f69:	e8 8f c4 ff ff       	call   c01003fd <__panic>
        struct vma_struct *vma2 = find_vma(mm, i+1);
c0103f6e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103f71:	83 c0 01             	add    $0x1,%eax
c0103f74:	83 ec 08             	sub    $0x8,%esp
c0103f77:	50                   	push   %eax
c0103f78:	ff 75 e8             	pushl  -0x18(%ebp)
c0103f7b:	e8 7c f7 ff ff       	call   c01036fc <find_vma>
c0103f80:	83 c4 10             	add    $0x10,%esp
c0103f83:	89 45 c8             	mov    %eax,-0x38(%ebp)
        assert(vma2 != NULL);
c0103f86:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c0103f8a:	75 19                	jne    c0103fa5 <check_vma_struct+0x249>
c0103f8c:	68 f2 d6 10 c0       	push   $0xc010d6f2
c0103f91:	68 9b d5 10 c0       	push   $0xc010d59b
c0103f96:	68 2a 01 00 00       	push   $0x12a
c0103f9b:	68 b0 d5 10 c0       	push   $0xc010d5b0
c0103fa0:	e8 58 c4 ff ff       	call   c01003fd <__panic>
        struct vma_struct *vma3 = find_vma(mm, i+2);
c0103fa5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103fa8:	83 c0 02             	add    $0x2,%eax
c0103fab:	83 ec 08             	sub    $0x8,%esp
c0103fae:	50                   	push   %eax
c0103faf:	ff 75 e8             	pushl  -0x18(%ebp)
c0103fb2:	e8 45 f7 ff ff       	call   c01036fc <find_vma>
c0103fb7:	83 c4 10             	add    $0x10,%esp
c0103fba:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        assert(vma3 == NULL);
c0103fbd:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
c0103fc1:	74 19                	je     c0103fdc <check_vma_struct+0x280>
c0103fc3:	68 ff d6 10 c0       	push   $0xc010d6ff
c0103fc8:	68 9b d5 10 c0       	push   $0xc010d59b
c0103fcd:	68 2c 01 00 00       	push   $0x12c
c0103fd2:	68 b0 d5 10 c0       	push   $0xc010d5b0
c0103fd7:	e8 21 c4 ff ff       	call   c01003fd <__panic>
        struct vma_struct *vma4 = find_vma(mm, i+3);
c0103fdc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103fdf:	83 c0 03             	add    $0x3,%eax
c0103fe2:	83 ec 08             	sub    $0x8,%esp
c0103fe5:	50                   	push   %eax
c0103fe6:	ff 75 e8             	pushl  -0x18(%ebp)
c0103fe9:	e8 0e f7 ff ff       	call   c01036fc <find_vma>
c0103fee:	83 c4 10             	add    $0x10,%esp
c0103ff1:	89 45 c0             	mov    %eax,-0x40(%ebp)
        assert(vma4 == NULL);
c0103ff4:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
c0103ff8:	74 19                	je     c0104013 <check_vma_struct+0x2b7>
c0103ffa:	68 0c d7 10 c0       	push   $0xc010d70c
c0103fff:	68 9b d5 10 c0       	push   $0xc010d59b
c0104004:	68 2e 01 00 00       	push   $0x12e
c0104009:	68 b0 d5 10 c0       	push   $0xc010d5b0
c010400e:	e8 ea c3 ff ff       	call   c01003fd <__panic>
        struct vma_struct *vma5 = find_vma(mm, i+4);
c0104013:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104016:	83 c0 04             	add    $0x4,%eax
c0104019:	83 ec 08             	sub    $0x8,%esp
c010401c:	50                   	push   %eax
c010401d:	ff 75 e8             	pushl  -0x18(%ebp)
c0104020:	e8 d7 f6 ff ff       	call   c01036fc <find_vma>
c0104025:	83 c4 10             	add    $0x10,%esp
c0104028:	89 45 bc             	mov    %eax,-0x44(%ebp)
        assert(vma5 == NULL);
c010402b:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c010402f:	74 19                	je     c010404a <check_vma_struct+0x2ee>
c0104031:	68 19 d7 10 c0       	push   $0xc010d719
c0104036:	68 9b d5 10 c0       	push   $0xc010d59b
c010403b:	68 30 01 00 00       	push   $0x130
c0104040:	68 b0 d5 10 c0       	push   $0xc010d5b0
c0104045:	e8 b3 c3 ff ff       	call   c01003fd <__panic>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
c010404a:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010404d:	8b 50 04             	mov    0x4(%eax),%edx
c0104050:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104053:	39 c2                	cmp    %eax,%edx
c0104055:	75 10                	jne    c0104067 <check_vma_struct+0x30b>
c0104057:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010405a:	8b 40 08             	mov    0x8(%eax),%eax
c010405d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0104060:	83 c2 02             	add    $0x2,%edx
c0104063:	39 d0                	cmp    %edx,%eax
c0104065:	74 19                	je     c0104080 <check_vma_struct+0x324>
c0104067:	68 28 d7 10 c0       	push   $0xc010d728
c010406c:	68 9b d5 10 c0       	push   $0xc010d59b
c0104071:	68 32 01 00 00       	push   $0x132
c0104076:	68 b0 d5 10 c0       	push   $0xc010d5b0
c010407b:	e8 7d c3 ff ff       	call   c01003fd <__panic>
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
c0104080:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0104083:	8b 50 04             	mov    0x4(%eax),%edx
c0104086:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104089:	39 c2                	cmp    %eax,%edx
c010408b:	75 10                	jne    c010409d <check_vma_struct+0x341>
c010408d:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0104090:	8b 40 08             	mov    0x8(%eax),%eax
c0104093:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0104096:	83 c2 02             	add    $0x2,%edx
c0104099:	39 d0                	cmp    %edx,%eax
c010409b:	74 19                	je     c01040b6 <check_vma_struct+0x35a>
c010409d:	68 58 d7 10 c0       	push   $0xc010d758
c01040a2:	68 9b d5 10 c0       	push   $0xc010d59b
c01040a7:	68 33 01 00 00       	push   $0x133
c01040ac:	68 b0 d5 10 c0       	push   $0xc010d5b0
c01040b1:	e8 47 c3 ff ff       	call   c01003fd <__panic>
        struct vma_struct *mmap = le2vma(le, list_link);
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
        le = list_next(le);
    }

    for (i = 5; i <= 5 * step2; i +=5) {
c01040b6:	83 45 f4 05          	addl   $0x5,-0xc(%ebp)
c01040ba:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01040bd:	89 d0                	mov    %edx,%eax
c01040bf:	c1 e0 02             	shl    $0x2,%eax
c01040c2:	01 d0                	add    %edx,%eax
c01040c4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01040c7:	0f 8d 6d fe ff ff    	jge    c0103f3a <check_vma_struct+0x1de>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
    }

    for (i =4; i>=0; i--) {
c01040cd:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%ebp)
c01040d4:	eb 5c                	jmp    c0104132 <check_vma_struct+0x3d6>
        struct vma_struct *vma_below_5= find_vma(mm,i);
c01040d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01040d9:	83 ec 08             	sub    $0x8,%esp
c01040dc:	50                   	push   %eax
c01040dd:	ff 75 e8             	pushl  -0x18(%ebp)
c01040e0:	e8 17 f6 ff ff       	call   c01036fc <find_vma>
c01040e5:	83 c4 10             	add    $0x10,%esp
c01040e8:	89 45 b8             	mov    %eax,-0x48(%ebp)
        if (vma_below_5 != NULL ) {
c01040eb:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
c01040ef:	74 1e                	je     c010410f <check_vma_struct+0x3b3>
           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
c01040f1:	8b 45 b8             	mov    -0x48(%ebp),%eax
c01040f4:	8b 50 08             	mov    0x8(%eax),%edx
c01040f7:	8b 45 b8             	mov    -0x48(%ebp),%eax
c01040fa:	8b 40 04             	mov    0x4(%eax),%eax
c01040fd:	52                   	push   %edx
c01040fe:	50                   	push   %eax
c01040ff:	ff 75 f4             	pushl  -0xc(%ebp)
c0104102:	68 88 d7 10 c0       	push   $0xc010d788
c0104107:	e8 8b c1 ff ff       	call   c0100297 <cprintf>
c010410c:	83 c4 10             	add    $0x10,%esp
        }
        assert(vma_below_5 == NULL);
c010410f:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
c0104113:	74 19                	je     c010412e <check_vma_struct+0x3d2>
c0104115:	68 ad d7 10 c0       	push   $0xc010d7ad
c010411a:	68 9b d5 10 c0       	push   $0xc010d59b
c010411f:	68 3b 01 00 00       	push   $0x13b
c0104124:	68 b0 d5 10 c0       	push   $0xc010d5b0
c0104129:	e8 cf c2 ff ff       	call   c01003fd <__panic>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
    }

    for (i =4; i>=0; i--) {
c010412e:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0104132:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104136:	79 9e                	jns    c01040d6 <check_vma_struct+0x37a>
           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
        }
        assert(vma_below_5 == NULL);
    }

    mm_destroy(mm);
c0104138:	83 ec 0c             	sub    $0xc,%esp
c010413b:	ff 75 e8             	pushl  -0x18(%ebp)
c010413e:	e8 09 f8 ff ff       	call   c010394c <mm_destroy>
c0104143:	83 c4 10             	add    $0x10,%esp

    cprintf("check_vma_struct() succeeded!\n");
c0104146:	83 ec 0c             	sub    $0xc,%esp
c0104149:	68 c4 d7 10 c0       	push   $0xc010d7c4
c010414e:	e8 44 c1 ff ff       	call   c0100297 <cprintf>
c0104153:	83 c4 10             	add    $0x10,%esp
}
c0104156:	90                   	nop
c0104157:	c9                   	leave  
c0104158:	c3                   	ret    

c0104159 <check_pgfault>:

struct mm_struct *check_mm_struct;

// check_pgfault - check correctness of pgfault handler
static void
check_pgfault(void) {
c0104159:	55                   	push   %ebp
c010415a:	89 e5                	mov    %esp,%ebp
c010415c:	83 ec 28             	sub    $0x28,%esp
    size_t nr_free_pages_store = nr_free_pages();
c010415f:	e8 af 2f 00 00       	call   c0107113 <nr_free_pages>
c0104164:	89 45 ec             	mov    %eax,-0x14(%ebp)

    check_mm_struct = mm_create();
c0104167:	e8 b4 f4 ff ff       	call   c0103620 <mm_create>
c010416c:	a3 10 71 1c c0       	mov    %eax,0xc01c7110
    assert(check_mm_struct != NULL);
c0104171:	a1 10 71 1c c0       	mov    0xc01c7110,%eax
c0104176:	85 c0                	test   %eax,%eax
c0104178:	75 19                	jne    c0104193 <check_pgfault+0x3a>
c010417a:	68 e3 d7 10 c0       	push   $0xc010d7e3
c010417f:	68 9b d5 10 c0       	push   $0xc010d59b
c0104184:	68 4b 01 00 00       	push   $0x14b
c0104189:	68 b0 d5 10 c0       	push   $0xc010d5b0
c010418e:	e8 6a c2 ff ff       	call   c01003fd <__panic>

    struct mm_struct *mm = check_mm_struct;
c0104193:	a1 10 71 1c c0       	mov    0xc01c7110,%eax
c0104198:	89 45 e8             	mov    %eax,-0x18(%ebp)
    pde_t *pgdir = mm->pgdir = boot_pgdir;
c010419b:	8b 15 20 1a 13 c0    	mov    0xc0131a20,%edx
c01041a1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01041a4:	89 50 0c             	mov    %edx,0xc(%eax)
c01041a7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01041aa:	8b 40 0c             	mov    0xc(%eax),%eax
c01041ad:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(pgdir[0] == 0);
c01041b0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01041b3:	8b 00                	mov    (%eax),%eax
c01041b5:	85 c0                	test   %eax,%eax
c01041b7:	74 19                	je     c01041d2 <check_pgfault+0x79>
c01041b9:	68 fb d7 10 c0       	push   $0xc010d7fb
c01041be:	68 9b d5 10 c0       	push   $0xc010d59b
c01041c3:	68 4f 01 00 00       	push   $0x14f
c01041c8:	68 b0 d5 10 c0       	push   $0xc010d5b0
c01041cd:	e8 2b c2 ff ff       	call   c01003fd <__panic>

    struct vma_struct *vma = vma_create(0, PTSIZE, VM_WRITE);
c01041d2:	83 ec 04             	sub    $0x4,%esp
c01041d5:	6a 02                	push   $0x2
c01041d7:	68 00 00 40 00       	push   $0x400000
c01041dc:	6a 00                	push   $0x0
c01041de:	e8 dd f4 ff ff       	call   c01036c0 <vma_create>
c01041e3:	83 c4 10             	add    $0x10,%esp
c01041e6:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(vma != NULL);
c01041e9:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01041ed:	75 19                	jne    c0104208 <check_pgfault+0xaf>
c01041ef:	68 8c d6 10 c0       	push   $0xc010d68c
c01041f4:	68 9b d5 10 c0       	push   $0xc010d59b
c01041f9:	68 52 01 00 00       	push   $0x152
c01041fe:	68 b0 d5 10 c0       	push   $0xc010d5b0
c0104203:	e8 f5 c1 ff ff       	call   c01003fd <__panic>

    insert_vma_struct(mm, vma);
c0104208:	83 ec 08             	sub    $0x8,%esp
c010420b:	ff 75 e0             	pushl  -0x20(%ebp)
c010420e:	ff 75 e8             	pushl  -0x18(%ebp)
c0104211:	e8 12 f6 ff ff       	call   c0103828 <insert_vma_struct>
c0104216:	83 c4 10             	add    $0x10,%esp

    uintptr_t addr = 0x100;
c0104219:	c7 45 dc 00 01 00 00 	movl   $0x100,-0x24(%ebp)
    assert(find_vma(mm, addr) == vma);
c0104220:	83 ec 08             	sub    $0x8,%esp
c0104223:	ff 75 dc             	pushl  -0x24(%ebp)
c0104226:	ff 75 e8             	pushl  -0x18(%ebp)
c0104229:	e8 ce f4 ff ff       	call   c01036fc <find_vma>
c010422e:	83 c4 10             	add    $0x10,%esp
c0104231:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0104234:	74 19                	je     c010424f <check_pgfault+0xf6>
c0104236:	68 09 d8 10 c0       	push   $0xc010d809
c010423b:	68 9b d5 10 c0       	push   $0xc010d59b
c0104240:	68 57 01 00 00       	push   $0x157
c0104245:	68 b0 d5 10 c0       	push   $0xc010d5b0
c010424a:	e8 ae c1 ff ff       	call   c01003fd <__panic>

    int i, sum = 0;
c010424f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    for (i = 0; i < 100; i ++) {
c0104256:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010425d:	eb 19                	jmp    c0104278 <check_pgfault+0x11f>
        *(char *)(addr + i) = i;
c010425f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0104262:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104265:	01 d0                	add    %edx,%eax
c0104267:	89 c2                	mov    %eax,%edx
c0104269:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010426c:	88 02                	mov    %al,(%edx)
        sum += i;
c010426e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104271:	01 45 f0             	add    %eax,-0x10(%ebp)

    uintptr_t addr = 0x100;
    assert(find_vma(mm, addr) == vma);

    int i, sum = 0;
    for (i = 0; i < 100; i ++) {
c0104274:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0104278:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c010427c:	7e e1                	jle    c010425f <check_pgfault+0x106>
        *(char *)(addr + i) = i;
        sum += i;
    }
    for (i = 0; i < 100; i ++) {
c010427e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0104285:	eb 15                	jmp    c010429c <check_pgfault+0x143>
        sum -= *(char *)(addr + i);
c0104287:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010428a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010428d:	01 d0                	add    %edx,%eax
c010428f:	0f b6 00             	movzbl (%eax),%eax
c0104292:	0f be c0             	movsbl %al,%eax
c0104295:	29 45 f0             	sub    %eax,-0x10(%ebp)
    int i, sum = 0;
    for (i = 0; i < 100; i ++) {
        *(char *)(addr + i) = i;
        sum += i;
    }
    for (i = 0; i < 100; i ++) {
c0104298:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010429c:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c01042a0:	7e e5                	jle    c0104287 <check_pgfault+0x12e>
        sum -= *(char *)(addr + i);
    }
    assert(sum == 0);
c01042a2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01042a6:	74 19                	je     c01042c1 <check_pgfault+0x168>
c01042a8:	68 23 d8 10 c0       	push   $0xc010d823
c01042ad:	68 9b d5 10 c0       	push   $0xc010d59b
c01042b2:	68 61 01 00 00       	push   $0x161
c01042b7:	68 b0 d5 10 c0       	push   $0xc010d5b0
c01042bc:	e8 3c c1 ff ff       	call   c01003fd <__panic>

    page_remove(pgdir, ROUNDDOWN(addr, PGSIZE));
c01042c1:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01042c4:	89 45 d8             	mov    %eax,-0x28(%ebp)
c01042c7:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01042ca:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01042cf:	83 ec 08             	sub    $0x8,%esp
c01042d2:	50                   	push   %eax
c01042d3:	ff 75 e4             	pushl  -0x1c(%ebp)
c01042d6:	e8 ab 39 00 00       	call   c0107c86 <page_remove>
c01042db:	83 c4 10             	add    $0x10,%esp
    free_page(pde2page(pgdir[0]));
c01042de:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01042e1:	8b 00                	mov    (%eax),%eax
c01042e3:	83 ec 0c             	sub    $0xc,%esp
c01042e6:	50                   	push   %eax
c01042e7:	e8 18 f3 ff ff       	call   c0103604 <pde2page>
c01042ec:	83 c4 10             	add    $0x10,%esp
c01042ef:	83 ec 08             	sub    $0x8,%esp
c01042f2:	6a 01                	push   $0x1
c01042f4:	50                   	push   %eax
c01042f5:	e8 e4 2d 00 00       	call   c01070de <free_pages>
c01042fa:	83 c4 10             	add    $0x10,%esp
    pgdir[0] = 0;
c01042fd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104300:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    mm->pgdir = NULL;
c0104306:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104309:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
    mm_destroy(mm);
c0104310:	83 ec 0c             	sub    $0xc,%esp
c0104313:	ff 75 e8             	pushl  -0x18(%ebp)
c0104316:	e8 31 f6 ff ff       	call   c010394c <mm_destroy>
c010431b:	83 c4 10             	add    $0x10,%esp
    check_mm_struct = NULL;
c010431e:	c7 05 10 71 1c c0 00 	movl   $0x0,0xc01c7110
c0104325:	00 00 00 

    assert(nr_free_pages_store == nr_free_pages());
c0104328:	e8 e6 2d 00 00       	call   c0107113 <nr_free_pages>
c010432d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0104330:	74 19                	je     c010434b <check_pgfault+0x1f2>
c0104332:	68 2c d8 10 c0       	push   $0xc010d82c
c0104337:	68 9b d5 10 c0       	push   $0xc010d59b
c010433c:	68 6b 01 00 00       	push   $0x16b
c0104341:	68 b0 d5 10 c0       	push   $0xc010d5b0
c0104346:	e8 b2 c0 ff ff       	call   c01003fd <__panic>

    cprintf("check_pgfault() succeeded!\n");
c010434b:	83 ec 0c             	sub    $0xc,%esp
c010434e:	68 53 d8 10 c0       	push   $0xc010d853
c0104353:	e8 3f bf ff ff       	call   c0100297 <cprintf>
c0104358:	83 c4 10             	add    $0x10,%esp
}
c010435b:	90                   	nop
c010435c:	c9                   	leave  
c010435d:	c3                   	ret    

c010435e <do_pgfault>:
 *            was a read (0) or write (1).
 *         -- The U/S flag (bit 2) indicates whether the processor was executing at user mode (1)
 *            or supervisor mode (0) at the time of the exception.
 */
int
do_pgfault(struct mm_struct *mm, uint32_t error_code, uintptr_t addr) {
c010435e:	55                   	push   %ebp
c010435f:	89 e5                	mov    %esp,%ebp
c0104361:	83 ec 28             	sub    $0x28,%esp
    int ret = -E_INVAL;
c0104364:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
    //try to find a vma which include addr
    struct vma_struct *vma = find_vma(mm, addr);
c010436b:	ff 75 10             	pushl  0x10(%ebp)
c010436e:	ff 75 08             	pushl  0x8(%ebp)
c0104371:	e8 86 f3 ff ff       	call   c01036fc <find_vma>
c0104376:	83 c4 08             	add    $0x8,%esp
c0104379:	89 45 ec             	mov    %eax,-0x14(%ebp)

    pgfault_num++;
c010437c:	a1 64 4f 1c c0       	mov    0xc01c4f64,%eax
c0104381:	83 c0 01             	add    $0x1,%eax
c0104384:	a3 64 4f 1c c0       	mov    %eax,0xc01c4f64
    //If the addr is in the range of a mm's vma?
    if (vma == NULL || vma->vm_start > addr) {
c0104389:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010438d:	74 0b                	je     c010439a <do_pgfault+0x3c>
c010438f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104392:	8b 40 04             	mov    0x4(%eax),%eax
c0104395:	3b 45 10             	cmp    0x10(%ebp),%eax
c0104398:	76 18                	jbe    c01043b2 <do_pgfault+0x54>
        cprintf("not valid addr %x, and  can not find it in vma\n", addr);
c010439a:	83 ec 08             	sub    $0x8,%esp
c010439d:	ff 75 10             	pushl  0x10(%ebp)
c01043a0:	68 70 d8 10 c0       	push   $0xc010d870
c01043a5:	e8 ed be ff ff       	call   c0100297 <cprintf>
c01043aa:	83 c4 10             	add    $0x10,%esp
        goto failed;
c01043ad:	e9 b4 01 00 00       	jmp    c0104566 <do_pgfault+0x208>
    }
    //check the error_code
    switch (error_code & 3) {
c01043b2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01043b5:	83 e0 03             	and    $0x3,%eax
c01043b8:	85 c0                	test   %eax,%eax
c01043ba:	74 3c                	je     c01043f8 <do_pgfault+0x9a>
c01043bc:	83 f8 01             	cmp    $0x1,%eax
c01043bf:	74 22                	je     c01043e3 <do_pgfault+0x85>
    default:
            /* error code flag : default is 3 ( W/R=1, P=1): write, present */
    case 2: /* error code flag : (W/R=1, P=0): write, not present */
        if (!(vma->vm_flags & VM_WRITE)) {
c01043c1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01043c4:	8b 40 0c             	mov    0xc(%eax),%eax
c01043c7:	83 e0 02             	and    $0x2,%eax
c01043ca:	85 c0                	test   %eax,%eax
c01043cc:	75 4c                	jne    c010441a <do_pgfault+0xbc>
            cprintf("do_pgfault failed: error code flag = write AND not present, but the addr's vma cannot write\n");
c01043ce:	83 ec 0c             	sub    $0xc,%esp
c01043d1:	68 a0 d8 10 c0       	push   $0xc010d8a0
c01043d6:	e8 bc be ff ff       	call   c0100297 <cprintf>
c01043db:	83 c4 10             	add    $0x10,%esp
            goto failed;
c01043de:	e9 83 01 00 00       	jmp    c0104566 <do_pgfault+0x208>
        }
        break;
    case 1: /* error code flag : (W/R=0, P=1): read, present */
        cprintf("do_pgfault failed: error code flag = read AND present\n");
c01043e3:	83 ec 0c             	sub    $0xc,%esp
c01043e6:	68 00 d9 10 c0       	push   $0xc010d900
c01043eb:	e8 a7 be ff ff       	call   c0100297 <cprintf>
c01043f0:	83 c4 10             	add    $0x10,%esp
        goto failed;
c01043f3:	e9 6e 01 00 00       	jmp    c0104566 <do_pgfault+0x208>
    case 0: /* error code flag : (W/R=0, P=0): read, not present */
        if (!(vma->vm_flags & (VM_READ | VM_EXEC))) {
c01043f8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01043fb:	8b 40 0c             	mov    0xc(%eax),%eax
c01043fe:	83 e0 05             	and    $0x5,%eax
c0104401:	85 c0                	test   %eax,%eax
c0104403:	75 16                	jne    c010441b <do_pgfault+0xbd>
            cprintf("do_pgfault failed: error code flag = read AND not present, but the addr's vma cannot read or exec\n");
c0104405:	83 ec 0c             	sub    $0xc,%esp
c0104408:	68 38 d9 10 c0       	push   $0xc010d938
c010440d:	e8 85 be ff ff       	call   c0100297 <cprintf>
c0104412:	83 c4 10             	add    $0x10,%esp
            goto failed;
c0104415:	e9 4c 01 00 00       	jmp    c0104566 <do_pgfault+0x208>
    case 2: /* error code flag : (W/R=1, P=0): write, not present */
        if (!(vma->vm_flags & VM_WRITE)) {
            cprintf("do_pgfault failed: error code flag = write AND not present, but the addr's vma cannot write\n");
            goto failed;
        }
        break;
c010441a:	90                   	nop
     *    (write an non_existed addr && addr is writable) OR
     *    (read  an non_existed addr && addr is readable)
     * THEN
     *    continue process
     */
    uint32_t perm = PTE_U;
c010441b:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
    if (vma->vm_flags & VM_WRITE) {
c0104422:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104425:	8b 40 0c             	mov    0xc(%eax),%eax
c0104428:	83 e0 02             	and    $0x2,%eax
c010442b:	85 c0                	test   %eax,%eax
c010442d:	74 04                	je     c0104433 <do_pgfault+0xd5>
        perm |= PTE_W;
c010442f:	83 4d f0 02          	orl    $0x2,-0x10(%ebp)
    }
    addr = ROUNDDOWN(addr, PGSIZE);
c0104433:	8b 45 10             	mov    0x10(%ebp),%eax
c0104436:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0104439:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010443c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0104441:	89 45 10             	mov    %eax,0x10(%ebp)

    ret = -E_NO_MEM;
c0104444:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    pte_t *ptep=NULL;
c010444b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    *   mm->pgdir : the PDT of these vma
    *
    */
   /*LAB3 EXERCISE 1: YOUR CODE*/
    //(1) try to find a pte, if pte's PT(Page Table) isn't existed, then create a PT.
    ptep = get_pte(mm->pgdir, addr, 1);
c0104452:	8b 45 08             	mov    0x8(%ebp),%eax
c0104455:	8b 40 0c             	mov    0xc(%eax),%eax
c0104458:	83 ec 04             	sub    $0x4,%esp
c010445b:	6a 01                	push   $0x1
c010445d:	ff 75 10             	pushl  0x10(%ebp)
c0104460:	50                   	push   %eax
c0104461:	e8 78 32 00 00       	call   c01076de <get_pte>
c0104466:	83 c4 10             	add    $0x10,%esp
c0104469:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(ptep != NULL);
c010446c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0104470:	75 19                	jne    c010448b <do_pgfault+0x12d>
c0104472:	68 9b d9 10 c0       	push   $0xc010d99b
c0104477:	68 9b d5 10 c0       	push   $0xc010d59b
c010447c:	68 c9 01 00 00       	push   $0x1c9
c0104481:	68 b0 d5 10 c0       	push   $0xc010d5b0
c0104486:	e8 72 bf ff ff       	call   c01003fd <__panic>
    //(2) if the phy addr isn't exist, then alloc a page & map the phy addr with logical addr
    if (*ptep == 0) {
c010448b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010448e:	8b 00                	mov    (%eax),%eax
c0104490:	85 c0                	test   %eax,%eax
c0104492:	75 39                	jne    c01044cd <do_pgfault+0x16f>
        assert(pgdir_alloc_page(mm->pgdir, addr, perm) != NULL);
c0104494:	8b 45 08             	mov    0x8(%ebp),%eax
c0104497:	8b 40 0c             	mov    0xc(%eax),%eax
c010449a:	83 ec 04             	sub    $0x4,%esp
c010449d:	ff 75 f0             	pushl  -0x10(%ebp)
c01044a0:	ff 75 10             	pushl  0x10(%ebp)
c01044a3:	50                   	push   %eax
c01044a4:	e8 1f 39 00 00       	call   c0107dc8 <pgdir_alloc_page>
c01044a9:	83 c4 10             	add    $0x10,%esp
c01044ac:	85 c0                	test   %eax,%eax
c01044ae:	0f 85 ab 00 00 00    	jne    c010455f <do_pgfault+0x201>
c01044b4:	68 a8 d9 10 c0       	push   $0xc010d9a8
c01044b9:	68 9b d5 10 c0       	push   $0xc010d59b
c01044be:	68 cc 01 00 00       	push   $0x1cc
c01044c3:	68 b0 d5 10 c0       	push   $0xc010d5b0
c01044c8:	e8 30 bf ff ff       	call   c01003fd <__panic>
    *    swap_in(mm, addr, &page) : alloc a memory page, then according to the swap entry in PTE for addr,
    *                               find the addr of disk page, read the content of disk page into this memroy page
    *    page_insert ： build the map of phy addr of an Page with the linear addr la
    *    swap_map_swappable ： set the page swappable
    */
        if(swap_init_ok) {
c01044cd:	a1 6c 4f 1c c0       	mov    0xc01c4f6c,%eax
c01044d2:	85 c0                	test   %eax,%eax
c01044d4:	74 71                	je     c0104547 <do_pgfault+0x1e9>
            struct Page *page=NULL;
c01044d6:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
            //(1）According to the mm AND addr, try to load the content of right disk page
            //    into the memory which page managed.
            assert(swap_in(mm, addr, &page) == 0);
c01044dd:	83 ec 04             	sub    $0x4,%esp
c01044e0:	8d 45 e0             	lea    -0x20(%ebp),%eax
c01044e3:	50                   	push   %eax
c01044e4:	ff 75 10             	pushl  0x10(%ebp)
c01044e7:	ff 75 08             	pushl  0x8(%ebp)
c01044ea:	e8 9b 10 00 00       	call   c010558a <swap_in>
c01044ef:	83 c4 10             	add    $0x10,%esp
c01044f2:	85 c0                	test   %eax,%eax
c01044f4:	74 19                	je     c010450f <do_pgfault+0x1b1>
c01044f6:	68 d8 d9 10 c0       	push   $0xc010d9d8
c01044fb:	68 9b d5 10 c0       	push   $0xc010d59b
c0104500:	68 de 01 00 00       	push   $0x1de
c0104505:	68 b0 d5 10 c0       	push   $0xc010d5b0
c010450a:	e8 ee be ff ff       	call   c01003fd <__panic>
            page->pra_vaddr = addr;
c010450f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104512:	8b 55 10             	mov    0x10(%ebp),%edx
c0104515:	89 50 1c             	mov    %edx,0x1c(%eax)
            //(2) According to the mm, addr AND page, setup the map of phy addr <---> logical addr
            page_insert(mm->pgdir, page, addr, perm);
c0104518:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010451b:	8b 45 08             	mov    0x8(%ebp),%eax
c010451e:	8b 40 0c             	mov    0xc(%eax),%eax
c0104521:	ff 75 f0             	pushl  -0x10(%ebp)
c0104524:	ff 75 10             	pushl  0x10(%ebp)
c0104527:	52                   	push   %edx
c0104528:	50                   	push   %eax
c0104529:	e8 91 37 00 00       	call   c0107cbf <page_insert>
c010452e:	83 c4 10             	add    $0x10,%esp
            //(3) make the page swappable.
            swap_map_swappable(mm, addr, page, 1);
c0104531:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104534:	6a 01                	push   $0x1
c0104536:	50                   	push   %eax
c0104537:	ff 75 10             	pushl  0x10(%ebp)
c010453a:	ff 75 08             	pushl  0x8(%ebp)
c010453d:	e8 b8 0e 00 00       	call   c01053fa <swap_map_swappable>
c0104542:	83 c4 10             	add    $0x10,%esp
c0104545:	eb 18                	jmp    c010455f <do_pgfault+0x201>
        }
        else {
            cprintf("no swap_init_ok but ptep is %x, failed\n",*ptep);
c0104547:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010454a:	8b 00                	mov    (%eax),%eax
c010454c:	83 ec 08             	sub    $0x8,%esp
c010454f:	50                   	push   %eax
c0104550:	68 f8 d9 10 c0       	push   $0xc010d9f8
c0104555:	e8 3d bd ff ff       	call   c0100297 <cprintf>
c010455a:	83 c4 10             	add    $0x10,%esp
            goto failed;
c010455d:	eb 07                	jmp    c0104566 <do_pgfault+0x208>
            cprintf("no swap_init_ok but ptep is %x, failed\n",*ptep);
            goto failed;
        }
#endif
   }
   ret = 0;
c010455f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
failed:
    return ret;
c0104566:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0104569:	c9                   	leave  
c010456a:	c3                   	ret    

c010456b <user_mem_check>:

bool
user_mem_check(struct mm_struct *mm, uintptr_t addr, size_t len, bool write) {
c010456b:	55                   	push   %ebp
c010456c:	89 e5                	mov    %esp,%ebp
c010456e:	83 ec 10             	sub    $0x10,%esp
    if (mm != NULL) {
c0104571:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104575:	0f 84 dc 00 00 00    	je     c0104657 <user_mem_check+0xec>
        if (!USER_ACCESS(addr, addr + len)) {
c010457b:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0104582:	76 1c                	jbe    c01045a0 <user_mem_check+0x35>
c0104584:	8b 55 0c             	mov    0xc(%ebp),%edx
c0104587:	8b 45 10             	mov    0x10(%ebp),%eax
c010458a:	01 d0                	add    %edx,%eax
c010458c:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010458f:	76 0f                	jbe    c01045a0 <user_mem_check+0x35>
c0104591:	8b 55 0c             	mov    0xc(%ebp),%edx
c0104594:	8b 45 10             	mov    0x10(%ebp),%eax
c0104597:	01 d0                	add    %edx,%eax
c0104599:	3d 00 00 00 b0       	cmp    $0xb0000000,%eax
c010459e:	76 0a                	jbe    c01045aa <user_mem_check+0x3f>
            return 0;
c01045a0:	b8 00 00 00 00       	mov    $0x0,%eax
c01045a5:	e9 df 00 00 00       	jmp    c0104689 <user_mem_check+0x11e>
        }
        struct vma_struct *vma;
        uintptr_t start = addr, end = addr + len;
c01045aa:	8b 45 0c             	mov    0xc(%ebp),%eax
c01045ad:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01045b0:	8b 55 0c             	mov    0xc(%ebp),%edx
c01045b3:	8b 45 10             	mov    0x10(%ebp),%eax
c01045b6:	01 d0                	add    %edx,%eax
c01045b8:	89 45 f8             	mov    %eax,-0x8(%ebp)
        while (start < end) {
c01045bb:	e9 84 00 00 00       	jmp    c0104644 <user_mem_check+0xd9>
            if ((vma = find_vma(mm, start)) == NULL || start < vma->vm_start) {
c01045c0:	ff 75 fc             	pushl  -0x4(%ebp)
c01045c3:	ff 75 08             	pushl  0x8(%ebp)
c01045c6:	e8 31 f1 ff ff       	call   c01036fc <find_vma>
c01045cb:	83 c4 08             	add    $0x8,%esp
c01045ce:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01045d1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01045d5:	74 0b                	je     c01045e2 <user_mem_check+0x77>
c01045d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01045da:	8b 40 04             	mov    0x4(%eax),%eax
c01045dd:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c01045e0:	76 0a                	jbe    c01045ec <user_mem_check+0x81>
                return 0;
c01045e2:	b8 00 00 00 00       	mov    $0x0,%eax
c01045e7:	e9 9d 00 00 00       	jmp    c0104689 <user_mem_check+0x11e>
            }
            if (!(vma->vm_flags & ((write) ? VM_WRITE : VM_READ))) {
c01045ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01045ef:	8b 40 0c             	mov    0xc(%eax),%eax
c01045f2:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c01045f6:	74 07                	je     c01045ff <user_mem_check+0x94>
c01045f8:	ba 02 00 00 00       	mov    $0x2,%edx
c01045fd:	eb 05                	jmp    c0104604 <user_mem_check+0x99>
c01045ff:	ba 01 00 00 00       	mov    $0x1,%edx
c0104604:	21 d0                	and    %edx,%eax
c0104606:	85 c0                	test   %eax,%eax
c0104608:	75 07                	jne    c0104611 <user_mem_check+0xa6>
                return 0;
c010460a:	b8 00 00 00 00       	mov    $0x0,%eax
c010460f:	eb 78                	jmp    c0104689 <user_mem_check+0x11e>
            }
            if (write && (vma->vm_flags & VM_STACK)) {
c0104611:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0104615:	74 24                	je     c010463b <user_mem_check+0xd0>
c0104617:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010461a:	8b 40 0c             	mov    0xc(%eax),%eax
c010461d:	83 e0 08             	and    $0x8,%eax
c0104620:	85 c0                	test   %eax,%eax
c0104622:	74 17                	je     c010463b <user_mem_check+0xd0>
                if (start < vma->vm_start + PGSIZE) { //check stack start & size
c0104624:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104627:	8b 40 04             	mov    0x4(%eax),%eax
c010462a:	05 00 10 00 00       	add    $0x1000,%eax
c010462f:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0104632:	76 07                	jbe    c010463b <user_mem_check+0xd0>
                    return 0;
c0104634:	b8 00 00 00 00       	mov    $0x0,%eax
c0104639:	eb 4e                	jmp    c0104689 <user_mem_check+0x11e>
                }
            }
            start = vma->vm_end;
c010463b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010463e:	8b 40 08             	mov    0x8(%eax),%eax
c0104641:	89 45 fc             	mov    %eax,-0x4(%ebp)
        if (!USER_ACCESS(addr, addr + len)) {
            return 0;
        }
        struct vma_struct *vma;
        uintptr_t start = addr, end = addr + len;
        while (start < end) {
c0104644:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0104647:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c010464a:	0f 82 70 ff ff ff    	jb     c01045c0 <user_mem_check+0x55>
                    return 0;
                }
            }
            start = vma->vm_end;
        }
        return 1;
c0104650:	b8 01 00 00 00       	mov    $0x1,%eax
c0104655:	eb 32                	jmp    c0104689 <user_mem_check+0x11e>
    }
    return KERN_ACCESS(addr, addr + len);
c0104657:	81 7d 0c ff ff ff bf 	cmpl   $0xbfffffff,0xc(%ebp)
c010465e:	76 23                	jbe    c0104683 <user_mem_check+0x118>
c0104660:	8b 55 0c             	mov    0xc(%ebp),%edx
c0104663:	8b 45 10             	mov    0x10(%ebp),%eax
c0104666:	01 d0                	add    %edx,%eax
c0104668:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010466b:	76 16                	jbe    c0104683 <user_mem_check+0x118>
c010466d:	8b 55 0c             	mov    0xc(%ebp),%edx
c0104670:	8b 45 10             	mov    0x10(%ebp),%eax
c0104673:	01 d0                	add    %edx,%eax
c0104675:	3d 00 00 00 f8       	cmp    $0xf8000000,%eax
c010467a:	77 07                	ja     c0104683 <user_mem_check+0x118>
c010467c:	b8 01 00 00 00       	mov    $0x1,%eax
c0104681:	eb 05                	jmp    c0104688 <user_mem_check+0x11d>
c0104683:	b8 00 00 00 00       	mov    $0x0,%eax
c0104688:	90                   	nop
}
c0104689:	c9                   	leave  
c010468a:	c3                   	ret    

c010468b <_fifo_init_mm>:
 * (2) _fifo_init_mm: init pra_list_head and let  mm->sm_priv point to the addr of pra_list_head.
 *              Now, From the memory control struct mm_struct, we can access FIFO PRA
 */
static int
_fifo_init_mm(struct mm_struct *mm)
{     
c010468b:	55                   	push   %ebp
c010468c:	89 e5                	mov    %esp,%ebp
c010468e:	83 ec 10             	sub    $0x10,%esp
c0104691:	c7 45 fc 14 71 1c c0 	movl   $0xc01c7114,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0104698:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010469b:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010469e:	89 50 04             	mov    %edx,0x4(%eax)
c01046a1:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01046a4:	8b 50 04             	mov    0x4(%eax),%edx
c01046a7:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01046aa:	89 10                	mov    %edx,(%eax)
     list_init(&pra_list_head);
     mm->sm_priv = &pra_list_head;
c01046ac:	8b 45 08             	mov    0x8(%ebp),%eax
c01046af:	c7 40 14 14 71 1c c0 	movl   $0xc01c7114,0x14(%eax)
     //cprintf(" mm->sm_priv %x in fifo_init_mm\n",mm->sm_priv);
     return 0;
c01046b6:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01046bb:	c9                   	leave  
c01046bc:	c3                   	ret    

c01046bd <_fifo_map_swappable>:
/*
 * (3)_fifo_map_swappable: According FIFO PRA, we should link the most recent arrival page at the back of pra_list_head qeueue
 */
static int
_fifo_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c01046bd:	55                   	push   %ebp
c01046be:	89 e5                	mov    %esp,%ebp
c01046c0:	83 ec 48             	sub    $0x48,%esp
    list_entry_t *head=(list_entry_t*) mm->sm_priv;
c01046c3:	8b 45 08             	mov    0x8(%ebp),%eax
c01046c6:	8b 40 14             	mov    0x14(%eax),%eax
c01046c9:	89 45 f0             	mov    %eax,-0x10(%ebp)
    list_entry_t *entry=&(page->pra_page_link);
c01046cc:	8b 45 10             	mov    0x10(%ebp),%eax
c01046cf:	83 c0 14             	add    $0x14,%eax
c01046d2:	89 45 ec             	mov    %eax,-0x14(%ebp)
 
    assert(entry != NULL && head != NULL);
c01046d5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01046d9:	74 06                	je     c01046e1 <_fifo_map_swappable+0x24>
c01046db:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01046df:	75 16                	jne    c01046f7 <_fifo_map_swappable+0x3a>
c01046e1:	68 20 da 10 c0       	push   $0xc010da20
c01046e6:	68 3e da 10 c0       	push   $0xc010da3e
c01046eb:	6a 32                	push   $0x32
c01046ed:	68 53 da 10 c0       	push   $0xc010da53
c01046f2:	e8 06 bd ff ff       	call   c01003fd <__panic>
    //record the page access situlation
    /*LAB3 EXERCISE 2: YOUR CODE*/ 
    // not swap in but call this func, means failed to swap out 
    if (swap_in == 0) {
c01046f7:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c01046fb:	75 57                	jne    c0104754 <_fifo_map_swappable+0x97>
        list_entry_t *le_prev = head, *le;
c01046fd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104700:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while ((le = list_next(le_prev)) != head) {
c0104703:	eb 38                	jmp    c010473d <_fifo_map_swappable+0x80>
            if (le == entry) {
c0104705:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104708:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010470b:	75 2a                	jne    c0104737 <_fifo_map_swappable+0x7a>
c010470d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104710:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0104713:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104716:	8b 40 04             	mov    0x4(%eax),%eax
c0104719:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010471c:	8b 12                	mov    (%edx),%edx
c010471e:	89 55 d8             	mov    %edx,-0x28(%ebp)
c0104721:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0104724:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0104727:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010472a:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010472d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0104730:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0104733:	89 10                	mov    %edx,(%eax)
                list_del(le);
                break;
c0104735:	eb 1d                	jmp    c0104754 <_fifo_map_swappable+0x97>
            }
            le_prev = le;        
c0104737:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010473a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010473d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104740:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0104743:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104746:	8b 40 04             	mov    0x4(%eax),%eax
    //record the page access situlation
    /*LAB3 EXERCISE 2: YOUR CODE*/ 
    // not swap in but call this func, means failed to swap out 
    if (swap_in == 0) {
        list_entry_t *le_prev = head, *le;
        while ((le = list_next(le_prev)) != head) {
c0104749:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010474c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010474f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104752:	75 b1                	jne    c0104705 <_fifo_map_swappable+0x48>
c0104754:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104757:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010475a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010475d:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c0104760:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104763:	8b 00                	mov    (%eax),%eax
c0104765:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0104768:	89 55 cc             	mov    %edx,-0x34(%ebp)
c010476b:	89 45 c8             	mov    %eax,-0x38(%ebp)
c010476e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104771:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0104774:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0104777:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010477a:	89 10                	mov    %edx,(%eax)
c010477c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010477f:	8b 10                	mov    (%eax),%edx
c0104781:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0104784:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0104787:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010478a:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c010478d:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0104790:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0104793:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0104796:	89 10                	mov    %edx,(%eax)
            le_prev = le;        
        }
    }
    //(1)link the most recent arrival page at the back of the pra_list_head qeueue.
    list_add_before(head, entry);
    return 0;
c0104798:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010479d:	c9                   	leave  
c010479e:	c3                   	ret    

c010479f <_fifo_swap_out_victim>:
 *  (4)_fifo_swap_out_victim: According FIFO PRA, we should unlink the  earliest arrival page in front of pra_list_head qeueue,
 *                            then assign the value of *ptr_page to the addr of this page.
 */
static int
_fifo_swap_out_victim(struct mm_struct *mm, struct Page ** ptr_page, int in_tick)
{
c010479f:	55                   	push   %ebp
c01047a0:	89 e5                	mov    %esp,%ebp
c01047a2:	83 ec 28             	sub    $0x28,%esp
     list_entry_t *head=(list_entry_t*) mm->sm_priv;
c01047a5:	8b 45 08             	mov    0x8(%ebp),%eax
c01047a8:	8b 40 14             	mov    0x14(%eax),%eax
c01047ab:	89 45 f4             	mov    %eax,-0xc(%ebp)
         assert(head != NULL);
c01047ae:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01047b2:	75 16                	jne    c01047ca <_fifo_swap_out_victim+0x2b>
c01047b4:	68 67 da 10 c0       	push   $0xc010da67
c01047b9:	68 3e da 10 c0       	push   $0xc010da3e
c01047be:	6a 4c                	push   $0x4c
c01047c0:	68 53 da 10 c0       	push   $0xc010da53
c01047c5:	e8 33 bc ff ff       	call   c01003fd <__panic>
     assert(in_tick==0);
c01047ca:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01047ce:	74 16                	je     c01047e6 <_fifo_swap_out_victim+0x47>
c01047d0:	68 74 da 10 c0       	push   $0xc010da74
c01047d5:	68 3e da 10 c0       	push   $0xc010da3e
c01047da:	6a 4d                	push   $0x4d
c01047dc:	68 53 da 10 c0       	push   $0xc010da53
c01047e1:	e8 17 bc ff ff       	call   c01003fd <__panic>
c01047e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01047e9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01047ec:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01047ef:	8b 40 04             	mov    0x4(%eax),%eax
     /* Select the victim */
     /*LAB3 EXERCISE 2: YOUR CODE*/ 
    //(1)  unlink the  earliest arrival page in front of pra_list_head qeueue
    list_entry_t *front = list_next(head);
c01047f2:	89 45 ec             	mov    %eax,-0x14(%ebp)
    assert(front != head);
c01047f5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01047f8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01047fb:	75 16                	jne    c0104813 <_fifo_swap_out_victim+0x74>
c01047fd:	68 7f da 10 c0       	push   $0xc010da7f
c0104802:	68 3e da 10 c0       	push   $0xc010da3e
c0104807:	6a 52                	push   $0x52
c0104809:	68 53 da 10 c0       	push   $0xc010da53
c010480e:	e8 ea bb ff ff       	call   c01003fd <__panic>
c0104813:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104816:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0104819:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010481c:	8b 40 04             	mov    0x4(%eax),%eax
c010481f:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104822:	8b 12                	mov    (%edx),%edx
c0104824:	89 55 e0             	mov    %edx,-0x20(%ebp)
c0104827:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010482a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010482d:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0104830:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0104833:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104836:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0104839:	89 10                	mov    %edx,(%eax)
    list_del(front);
    //(2)  assign the value of *ptr_page to the addr of this page
    struct Page *page = le2page(front, pra_page_link);
c010483b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010483e:	83 e8 14             	sub    $0x14,%eax
c0104841:	89 45 e8             	mov    %eax,-0x18(%ebp)
    assert(page != NULL);
c0104844:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0104848:	75 16                	jne    c0104860 <_fifo_swap_out_victim+0xc1>
c010484a:	68 8d da 10 c0       	push   $0xc010da8d
c010484f:	68 3e da 10 c0       	push   $0xc010da3e
c0104854:	6a 56                	push   $0x56
c0104856:	68 53 da 10 c0       	push   $0xc010da53
c010485b:	e8 9d bb ff ff       	call   c01003fd <__panic>
    *ptr_page = page;
c0104860:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104863:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0104866:	89 10                	mov    %edx,(%eax)
    return 0;
c0104868:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010486d:	c9                   	leave  
c010486e:	c3                   	ret    

c010486f <_fifo_check_swap>:

static int
_fifo_check_swap(void) {
c010486f:	55                   	push   %ebp
c0104870:	89 e5                	mov    %esp,%ebp
c0104872:	83 ec 08             	sub    $0x8,%esp
    cprintf("write Virt Page c in fifo_check_swap\n");
c0104875:	83 ec 0c             	sub    $0xc,%esp
c0104878:	68 9c da 10 c0       	push   $0xc010da9c
c010487d:	e8 15 ba ff ff       	call   c0100297 <cprintf>
c0104882:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x3000 = 0x0c;
c0104885:	b8 00 30 00 00       	mov    $0x3000,%eax
c010488a:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==4);
c010488d:	a1 64 4f 1c c0       	mov    0xc01c4f64,%eax
c0104892:	83 f8 04             	cmp    $0x4,%eax
c0104895:	74 16                	je     c01048ad <_fifo_check_swap+0x3e>
c0104897:	68 c2 da 10 c0       	push   $0xc010dac2
c010489c:	68 3e da 10 c0       	push   $0xc010da3e
c01048a1:	6a 5f                	push   $0x5f
c01048a3:	68 53 da 10 c0       	push   $0xc010da53
c01048a8:	e8 50 bb ff ff       	call   c01003fd <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c01048ad:	83 ec 0c             	sub    $0xc,%esp
c01048b0:	68 d4 da 10 c0       	push   $0xc010dad4
c01048b5:	e8 dd b9 ff ff       	call   c0100297 <cprintf>
c01048ba:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x1000 = 0x0a;
c01048bd:	b8 00 10 00 00       	mov    $0x1000,%eax
c01048c2:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==4);
c01048c5:	a1 64 4f 1c c0       	mov    0xc01c4f64,%eax
c01048ca:	83 f8 04             	cmp    $0x4,%eax
c01048cd:	74 16                	je     c01048e5 <_fifo_check_swap+0x76>
c01048cf:	68 c2 da 10 c0       	push   $0xc010dac2
c01048d4:	68 3e da 10 c0       	push   $0xc010da3e
c01048d9:	6a 62                	push   $0x62
c01048db:	68 53 da 10 c0       	push   $0xc010da53
c01048e0:	e8 18 bb ff ff       	call   c01003fd <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c01048e5:	83 ec 0c             	sub    $0xc,%esp
c01048e8:	68 fc da 10 c0       	push   $0xc010dafc
c01048ed:	e8 a5 b9 ff ff       	call   c0100297 <cprintf>
c01048f2:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x4000 = 0x0d;
c01048f5:	b8 00 40 00 00       	mov    $0x4000,%eax
c01048fa:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==4);
c01048fd:	a1 64 4f 1c c0       	mov    0xc01c4f64,%eax
c0104902:	83 f8 04             	cmp    $0x4,%eax
c0104905:	74 16                	je     c010491d <_fifo_check_swap+0xae>
c0104907:	68 c2 da 10 c0       	push   $0xc010dac2
c010490c:	68 3e da 10 c0       	push   $0xc010da3e
c0104911:	6a 65                	push   $0x65
c0104913:	68 53 da 10 c0       	push   $0xc010da53
c0104918:	e8 e0 ba ff ff       	call   c01003fd <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c010491d:	83 ec 0c             	sub    $0xc,%esp
c0104920:	68 24 db 10 c0       	push   $0xc010db24
c0104925:	e8 6d b9 ff ff       	call   c0100297 <cprintf>
c010492a:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x2000 = 0x0b;
c010492d:	b8 00 20 00 00       	mov    $0x2000,%eax
c0104932:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==4);
c0104935:	a1 64 4f 1c c0       	mov    0xc01c4f64,%eax
c010493a:	83 f8 04             	cmp    $0x4,%eax
c010493d:	74 16                	je     c0104955 <_fifo_check_swap+0xe6>
c010493f:	68 c2 da 10 c0       	push   $0xc010dac2
c0104944:	68 3e da 10 c0       	push   $0xc010da3e
c0104949:	6a 68                	push   $0x68
c010494b:	68 53 da 10 c0       	push   $0xc010da53
c0104950:	e8 a8 ba ff ff       	call   c01003fd <__panic>
    cprintf("write Virt Page e in fifo_check_swap\n");
c0104955:	83 ec 0c             	sub    $0xc,%esp
c0104958:	68 4c db 10 c0       	push   $0xc010db4c
c010495d:	e8 35 b9 ff ff       	call   c0100297 <cprintf>
c0104962:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x5000 = 0x0e;
c0104965:	b8 00 50 00 00       	mov    $0x5000,%eax
c010496a:	c6 00 0e             	movb   $0xe,(%eax)
    assert(pgfault_num==5);
c010496d:	a1 64 4f 1c c0       	mov    0xc01c4f64,%eax
c0104972:	83 f8 05             	cmp    $0x5,%eax
c0104975:	74 16                	je     c010498d <_fifo_check_swap+0x11e>
c0104977:	68 72 db 10 c0       	push   $0xc010db72
c010497c:	68 3e da 10 c0       	push   $0xc010da3e
c0104981:	6a 6b                	push   $0x6b
c0104983:	68 53 da 10 c0       	push   $0xc010da53
c0104988:	e8 70 ba ff ff       	call   c01003fd <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c010498d:	83 ec 0c             	sub    $0xc,%esp
c0104990:	68 24 db 10 c0       	push   $0xc010db24
c0104995:	e8 fd b8 ff ff       	call   c0100297 <cprintf>
c010499a:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x2000 = 0x0b;
c010499d:	b8 00 20 00 00       	mov    $0x2000,%eax
c01049a2:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==5);
c01049a5:	a1 64 4f 1c c0       	mov    0xc01c4f64,%eax
c01049aa:	83 f8 05             	cmp    $0x5,%eax
c01049ad:	74 16                	je     c01049c5 <_fifo_check_swap+0x156>
c01049af:	68 72 db 10 c0       	push   $0xc010db72
c01049b4:	68 3e da 10 c0       	push   $0xc010da3e
c01049b9:	6a 6e                	push   $0x6e
c01049bb:	68 53 da 10 c0       	push   $0xc010da53
c01049c0:	e8 38 ba ff ff       	call   c01003fd <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c01049c5:	83 ec 0c             	sub    $0xc,%esp
c01049c8:	68 d4 da 10 c0       	push   $0xc010dad4
c01049cd:	e8 c5 b8 ff ff       	call   c0100297 <cprintf>
c01049d2:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x1000 = 0x0a;
c01049d5:	b8 00 10 00 00       	mov    $0x1000,%eax
c01049da:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==6);
c01049dd:	a1 64 4f 1c c0       	mov    0xc01c4f64,%eax
c01049e2:	83 f8 06             	cmp    $0x6,%eax
c01049e5:	74 16                	je     c01049fd <_fifo_check_swap+0x18e>
c01049e7:	68 81 db 10 c0       	push   $0xc010db81
c01049ec:	68 3e da 10 c0       	push   $0xc010da3e
c01049f1:	6a 71                	push   $0x71
c01049f3:	68 53 da 10 c0       	push   $0xc010da53
c01049f8:	e8 00 ba ff ff       	call   c01003fd <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c01049fd:	83 ec 0c             	sub    $0xc,%esp
c0104a00:	68 24 db 10 c0       	push   $0xc010db24
c0104a05:	e8 8d b8 ff ff       	call   c0100297 <cprintf>
c0104a0a:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x2000 = 0x0b;
c0104a0d:	b8 00 20 00 00       	mov    $0x2000,%eax
c0104a12:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==7);
c0104a15:	a1 64 4f 1c c0       	mov    0xc01c4f64,%eax
c0104a1a:	83 f8 07             	cmp    $0x7,%eax
c0104a1d:	74 16                	je     c0104a35 <_fifo_check_swap+0x1c6>
c0104a1f:	68 90 db 10 c0       	push   $0xc010db90
c0104a24:	68 3e da 10 c0       	push   $0xc010da3e
c0104a29:	6a 74                	push   $0x74
c0104a2b:	68 53 da 10 c0       	push   $0xc010da53
c0104a30:	e8 c8 b9 ff ff       	call   c01003fd <__panic>
    cprintf("write Virt Page c in fifo_check_swap\n");
c0104a35:	83 ec 0c             	sub    $0xc,%esp
c0104a38:	68 9c da 10 c0       	push   $0xc010da9c
c0104a3d:	e8 55 b8 ff ff       	call   c0100297 <cprintf>
c0104a42:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x3000 = 0x0c;
c0104a45:	b8 00 30 00 00       	mov    $0x3000,%eax
c0104a4a:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==8);
c0104a4d:	a1 64 4f 1c c0       	mov    0xc01c4f64,%eax
c0104a52:	83 f8 08             	cmp    $0x8,%eax
c0104a55:	74 16                	je     c0104a6d <_fifo_check_swap+0x1fe>
c0104a57:	68 9f db 10 c0       	push   $0xc010db9f
c0104a5c:	68 3e da 10 c0       	push   $0xc010da3e
c0104a61:	6a 77                	push   $0x77
c0104a63:	68 53 da 10 c0       	push   $0xc010da53
c0104a68:	e8 90 b9 ff ff       	call   c01003fd <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c0104a6d:	83 ec 0c             	sub    $0xc,%esp
c0104a70:	68 fc da 10 c0       	push   $0xc010dafc
c0104a75:	e8 1d b8 ff ff       	call   c0100297 <cprintf>
c0104a7a:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x4000 = 0x0d;
c0104a7d:	b8 00 40 00 00       	mov    $0x4000,%eax
c0104a82:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==9);
c0104a85:	a1 64 4f 1c c0       	mov    0xc01c4f64,%eax
c0104a8a:	83 f8 09             	cmp    $0x9,%eax
c0104a8d:	74 16                	je     c0104aa5 <_fifo_check_swap+0x236>
c0104a8f:	68 ae db 10 c0       	push   $0xc010dbae
c0104a94:	68 3e da 10 c0       	push   $0xc010da3e
c0104a99:	6a 7a                	push   $0x7a
c0104a9b:	68 53 da 10 c0       	push   $0xc010da53
c0104aa0:	e8 58 b9 ff ff       	call   c01003fd <__panic>
    cprintf("write Virt Page e in fifo_check_swap\n");
c0104aa5:	83 ec 0c             	sub    $0xc,%esp
c0104aa8:	68 4c db 10 c0       	push   $0xc010db4c
c0104aad:	e8 e5 b7 ff ff       	call   c0100297 <cprintf>
c0104ab2:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x5000 = 0x0e;
c0104ab5:	b8 00 50 00 00       	mov    $0x5000,%eax
c0104aba:	c6 00 0e             	movb   $0xe,(%eax)
    assert(pgfault_num==10);
c0104abd:	a1 64 4f 1c c0       	mov    0xc01c4f64,%eax
c0104ac2:	83 f8 0a             	cmp    $0xa,%eax
c0104ac5:	74 16                	je     c0104add <_fifo_check_swap+0x26e>
c0104ac7:	68 bd db 10 c0       	push   $0xc010dbbd
c0104acc:	68 3e da 10 c0       	push   $0xc010da3e
c0104ad1:	6a 7d                	push   $0x7d
c0104ad3:	68 53 da 10 c0       	push   $0xc010da53
c0104ad8:	e8 20 b9 ff ff       	call   c01003fd <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c0104add:	83 ec 0c             	sub    $0xc,%esp
c0104ae0:	68 d4 da 10 c0       	push   $0xc010dad4
c0104ae5:	e8 ad b7 ff ff       	call   c0100297 <cprintf>
c0104aea:	83 c4 10             	add    $0x10,%esp
    assert(*(unsigned char *)0x1000 == 0x0a);
c0104aed:	b8 00 10 00 00       	mov    $0x1000,%eax
c0104af2:	0f b6 00             	movzbl (%eax),%eax
c0104af5:	3c 0a                	cmp    $0xa,%al
c0104af7:	74 16                	je     c0104b0f <_fifo_check_swap+0x2a0>
c0104af9:	68 d0 db 10 c0       	push   $0xc010dbd0
c0104afe:	68 3e da 10 c0       	push   $0xc010da3e
c0104b03:	6a 7f                	push   $0x7f
c0104b05:	68 53 da 10 c0       	push   $0xc010da53
c0104b0a:	e8 ee b8 ff ff       	call   c01003fd <__panic>
    *(unsigned char *)0x1000 = 0x0a;
c0104b0f:	b8 00 10 00 00       	mov    $0x1000,%eax
c0104b14:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==11);
c0104b17:	a1 64 4f 1c c0       	mov    0xc01c4f64,%eax
c0104b1c:	83 f8 0b             	cmp    $0xb,%eax
c0104b1f:	74 19                	je     c0104b3a <_fifo_check_swap+0x2cb>
c0104b21:	68 f1 db 10 c0       	push   $0xc010dbf1
c0104b26:	68 3e da 10 c0       	push   $0xc010da3e
c0104b2b:	68 81 00 00 00       	push   $0x81
c0104b30:	68 53 da 10 c0       	push   $0xc010da53
c0104b35:	e8 c3 b8 ff ff       	call   c01003fd <__panic>
    return 0;
c0104b3a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104b3f:	c9                   	leave  
c0104b40:	c3                   	ret    

c0104b41 <_fifo_init>:


static int
_fifo_init(void)
{
c0104b41:	55                   	push   %ebp
c0104b42:	89 e5                	mov    %esp,%ebp
    return 0;
c0104b44:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104b49:	5d                   	pop    %ebp
c0104b4a:	c3                   	ret    

c0104b4b <_fifo_set_unswappable>:

static int
_fifo_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c0104b4b:	55                   	push   %ebp
c0104b4c:	89 e5                	mov    %esp,%ebp
    return 0;
c0104b4e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104b53:	5d                   	pop    %ebp
c0104b54:	c3                   	ret    

c0104b55 <_fifo_tick_event>:

static int
_fifo_tick_event(struct mm_struct *mm)
{ return 0; }
c0104b55:	55                   	push   %ebp
c0104b56:	89 e5                	mov    %esp,%ebp
c0104b58:	b8 00 00 00 00       	mov    $0x0,%eax
c0104b5d:	5d                   	pop    %ebp
c0104b5e:	c3                   	ret    

c0104b5f <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0104b5f:	55                   	push   %ebp
c0104b60:	89 e5                	mov    %esp,%ebp
c0104b62:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0104b65:	9c                   	pushf  
c0104b66:	58                   	pop    %eax
c0104b67:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0104b6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0104b6d:	25 00 02 00 00       	and    $0x200,%eax
c0104b72:	85 c0                	test   %eax,%eax
c0104b74:	74 0c                	je     c0104b82 <__intr_save+0x23>
        intr_disable();
c0104b76:	e8 41 d6 ff ff       	call   c01021bc <intr_disable>
        return 1;
c0104b7b:	b8 01 00 00 00       	mov    $0x1,%eax
c0104b80:	eb 05                	jmp    c0104b87 <__intr_save+0x28>
    }
    return 0;
c0104b82:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104b87:	c9                   	leave  
c0104b88:	c3                   	ret    

c0104b89 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0104b89:	55                   	push   %ebp
c0104b8a:	89 e5                	mov    %esp,%ebp
c0104b8c:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0104b8f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104b93:	74 05                	je     c0104b9a <__intr_restore+0x11>
        intr_enable();
c0104b95:	e8 1b d6 ff ff       	call   c01021b5 <intr_enable>
    }
}
c0104b9a:	90                   	nop
c0104b9b:	c9                   	leave  
c0104b9c:	c3                   	ret    

c0104b9d <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0104b9d:	55                   	push   %ebp
c0104b9e:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0104ba0:	8b 45 08             	mov    0x8(%ebp),%eax
c0104ba3:	8b 15 f8 71 1c c0    	mov    0xc01c71f8,%edx
c0104ba9:	29 d0                	sub    %edx,%eax
c0104bab:	c1 f8 05             	sar    $0x5,%eax
}
c0104bae:	5d                   	pop    %ebp
c0104baf:	c3                   	ret    

c0104bb0 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0104bb0:	55                   	push   %ebp
c0104bb1:	89 e5                	mov    %esp,%ebp
    return page2ppn(page) << PGSHIFT;
c0104bb3:	ff 75 08             	pushl  0x8(%ebp)
c0104bb6:	e8 e2 ff ff ff       	call   c0104b9d <page2ppn>
c0104bbb:	83 c4 04             	add    $0x4,%esp
c0104bbe:	c1 e0 0c             	shl    $0xc,%eax
}
c0104bc1:	c9                   	leave  
c0104bc2:	c3                   	ret    

c0104bc3 <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c0104bc3:	55                   	push   %ebp
c0104bc4:	89 e5                	mov    %esp,%ebp
c0104bc6:	83 ec 08             	sub    $0x8,%esp
    if (PPN(pa) >= npage) {
c0104bc9:	8b 45 08             	mov    0x8(%ebp),%eax
c0104bcc:	c1 e8 0c             	shr    $0xc,%eax
c0104bcf:	89 c2                	mov    %eax,%edx
c0104bd1:	a1 80 4f 1c c0       	mov    0xc01c4f80,%eax
c0104bd6:	39 c2                	cmp    %eax,%edx
c0104bd8:	72 14                	jb     c0104bee <pa2page+0x2b>
        panic("pa2page called with invalid pa");
c0104bda:	83 ec 04             	sub    $0x4,%esp
c0104bdd:	68 14 dc 10 c0       	push   $0xc010dc14
c0104be2:	6a 5e                	push   $0x5e
c0104be4:	68 33 dc 10 c0       	push   $0xc010dc33
c0104be9:	e8 0f b8 ff ff       	call   c01003fd <__panic>
    }
    return &pages[PPN(pa)];
c0104bee:	a1 f8 71 1c c0       	mov    0xc01c71f8,%eax
c0104bf3:	8b 55 08             	mov    0x8(%ebp),%edx
c0104bf6:	c1 ea 0c             	shr    $0xc,%edx
c0104bf9:	c1 e2 05             	shl    $0x5,%edx
c0104bfc:	01 d0                	add    %edx,%eax
}
c0104bfe:	c9                   	leave  
c0104bff:	c3                   	ret    

c0104c00 <page2kva>:

static inline void *
page2kva(struct Page *page) {
c0104c00:	55                   	push   %ebp
c0104c01:	89 e5                	mov    %esp,%ebp
c0104c03:	83 ec 18             	sub    $0x18,%esp
    return KADDR(page2pa(page));
c0104c06:	ff 75 08             	pushl  0x8(%ebp)
c0104c09:	e8 a2 ff ff ff       	call   c0104bb0 <page2pa>
c0104c0e:	83 c4 04             	add    $0x4,%esp
c0104c11:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104c14:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c17:	c1 e8 0c             	shr    $0xc,%eax
c0104c1a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104c1d:	a1 80 4f 1c c0       	mov    0xc01c4f80,%eax
c0104c22:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0104c25:	72 14                	jb     c0104c3b <page2kva+0x3b>
c0104c27:	ff 75 f4             	pushl  -0xc(%ebp)
c0104c2a:	68 44 dc 10 c0       	push   $0xc010dc44
c0104c2f:	6a 65                	push   $0x65
c0104c31:	68 33 dc 10 c0       	push   $0xc010dc33
c0104c36:	e8 c2 b7 ff ff       	call   c01003fd <__panic>
c0104c3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c3e:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c0104c43:	c9                   	leave  
c0104c44:	c3                   	ret    

c0104c45 <kva2page>:

static inline struct Page *
kva2page(void *kva) {
c0104c45:	55                   	push   %ebp
c0104c46:	89 e5                	mov    %esp,%ebp
c0104c48:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PADDR(kva));
c0104c4b:	8b 45 08             	mov    0x8(%ebp),%eax
c0104c4e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104c51:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c0104c58:	77 14                	ja     c0104c6e <kva2page+0x29>
c0104c5a:	ff 75 f4             	pushl  -0xc(%ebp)
c0104c5d:	68 68 dc 10 c0       	push   $0xc010dc68
c0104c62:	6a 6a                	push   $0x6a
c0104c64:	68 33 dc 10 c0       	push   $0xc010dc33
c0104c69:	e8 8f b7 ff ff       	call   c01003fd <__panic>
c0104c6e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c71:	05 00 00 00 40       	add    $0x40000000,%eax
c0104c76:	83 ec 0c             	sub    $0xc,%esp
c0104c79:	50                   	push   %eax
c0104c7a:	e8 44 ff ff ff       	call   c0104bc3 <pa2page>
c0104c7f:	83 c4 10             	add    $0x10,%esp
}
c0104c82:	c9                   	leave  
c0104c83:	c3                   	ret    

c0104c84 <__slob_get_free_pages>:
static slob_t *slobfree = &arena;
static bigblock_t *bigblocks;


static void* __slob_get_free_pages(gfp_t gfp, int order)
{
c0104c84:	55                   	push   %ebp
c0104c85:	89 e5                	mov    %esp,%ebp
c0104c87:	83 ec 18             	sub    $0x18,%esp
  struct Page * page = alloc_pages(1 << order);
c0104c8a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104c8d:	ba 01 00 00 00       	mov    $0x1,%edx
c0104c92:	89 c1                	mov    %eax,%ecx
c0104c94:	d3 e2                	shl    %cl,%edx
c0104c96:	89 d0                	mov    %edx,%eax
c0104c98:	83 ec 0c             	sub    $0xc,%esp
c0104c9b:	50                   	push   %eax
c0104c9c:	e8 d1 23 00 00       	call   c0107072 <alloc_pages>
c0104ca1:	83 c4 10             	add    $0x10,%esp
c0104ca4:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if(!page)
c0104ca7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104cab:	75 07                	jne    c0104cb4 <__slob_get_free_pages+0x30>
    return NULL;
c0104cad:	b8 00 00 00 00       	mov    $0x0,%eax
c0104cb2:	eb 0e                	jmp    c0104cc2 <__slob_get_free_pages+0x3e>
  return page2kva(page);
c0104cb4:	83 ec 0c             	sub    $0xc,%esp
c0104cb7:	ff 75 f4             	pushl  -0xc(%ebp)
c0104cba:	e8 41 ff ff ff       	call   c0104c00 <page2kva>
c0104cbf:	83 c4 10             	add    $0x10,%esp
}
c0104cc2:	c9                   	leave  
c0104cc3:	c3                   	ret    

c0104cc4 <__slob_free_pages>:

#define __slob_get_free_page(gfp) __slob_get_free_pages(gfp, 0)

static inline void __slob_free_pages(unsigned long kva, int order)
{
c0104cc4:	55                   	push   %ebp
c0104cc5:	89 e5                	mov    %esp,%ebp
c0104cc7:	53                   	push   %ebx
c0104cc8:	83 ec 04             	sub    $0x4,%esp
  free_pages(kva2page(kva), 1 << order);
c0104ccb:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104cce:	ba 01 00 00 00       	mov    $0x1,%edx
c0104cd3:	89 c1                	mov    %eax,%ecx
c0104cd5:	d3 e2                	shl    %cl,%edx
c0104cd7:	89 d0                	mov    %edx,%eax
c0104cd9:	89 c3                	mov    %eax,%ebx
c0104cdb:	8b 45 08             	mov    0x8(%ebp),%eax
c0104cde:	83 ec 0c             	sub    $0xc,%esp
c0104ce1:	50                   	push   %eax
c0104ce2:	e8 5e ff ff ff       	call   c0104c45 <kva2page>
c0104ce7:	83 c4 10             	add    $0x10,%esp
c0104cea:	83 ec 08             	sub    $0x8,%esp
c0104ced:	53                   	push   %ebx
c0104cee:	50                   	push   %eax
c0104cef:	e8 ea 23 00 00       	call   c01070de <free_pages>
c0104cf4:	83 c4 10             	add    $0x10,%esp
}
c0104cf7:	90                   	nop
c0104cf8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0104cfb:	c9                   	leave  
c0104cfc:	c3                   	ret    

c0104cfd <slob_alloc>:

static void slob_free(void *b, int size);

static void *slob_alloc(size_t size, gfp_t gfp, int align)
{
c0104cfd:	55                   	push   %ebp
c0104cfe:	89 e5                	mov    %esp,%ebp
c0104d00:	83 ec 28             	sub    $0x28,%esp
  assert( (size + SLOB_UNIT) < PAGE_SIZE );
c0104d03:	8b 45 08             	mov    0x8(%ebp),%eax
c0104d06:	83 c0 08             	add    $0x8,%eax
c0104d09:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c0104d0e:	76 16                	jbe    c0104d26 <slob_alloc+0x29>
c0104d10:	68 8c dc 10 c0       	push   $0xc010dc8c
c0104d15:	68 ab dc 10 c0       	push   $0xc010dcab
c0104d1a:	6a 64                	push   $0x64
c0104d1c:	68 c0 dc 10 c0       	push   $0xc010dcc0
c0104d21:	e8 d7 b6 ff ff       	call   c01003fd <__panic>

	slob_t *prev, *cur, *aligned = 0;
c0104d26:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	int delta = 0, units = SLOB_UNITS(size);
c0104d2d:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c0104d34:	8b 45 08             	mov    0x8(%ebp),%eax
c0104d37:	83 c0 07             	add    $0x7,%eax
c0104d3a:	c1 e8 03             	shr    $0x3,%eax
c0104d3d:	89 45 e0             	mov    %eax,-0x20(%ebp)
	unsigned long flags;

	spin_lock_irqsave(&slob_lock, flags);
c0104d40:	e8 1a fe ff ff       	call   c0104b5f <__intr_save>
c0104d45:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	prev = slobfree;
c0104d48:	a1 08 1a 13 c0       	mov    0xc0131a08,%eax
c0104d4d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c0104d50:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d53:	8b 40 04             	mov    0x4(%eax),%eax
c0104d56:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (align) {
c0104d59:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0104d5d:	74 25                	je     c0104d84 <slob_alloc+0x87>
			aligned = (slob_t *)ALIGN((unsigned long)cur, align);
c0104d5f:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104d62:	8b 45 10             	mov    0x10(%ebp),%eax
c0104d65:	01 d0                	add    %edx,%eax
c0104d67:	8d 50 ff             	lea    -0x1(%eax),%edx
c0104d6a:	8b 45 10             	mov    0x10(%ebp),%eax
c0104d6d:	f7 d8                	neg    %eax
c0104d6f:	21 d0                	and    %edx,%eax
c0104d71:	89 45 ec             	mov    %eax,-0x14(%ebp)
			delta = aligned - cur;
c0104d74:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0104d77:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104d7a:	29 c2                	sub    %eax,%edx
c0104d7c:	89 d0                	mov    %edx,%eax
c0104d7e:	c1 f8 03             	sar    $0x3,%eax
c0104d81:	89 45 e8             	mov    %eax,-0x18(%ebp)
		}
		if (cur->units >= units + delta) { /* room enough? */
c0104d84:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104d87:	8b 00                	mov    (%eax),%eax
c0104d89:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c0104d8c:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0104d8f:	01 ca                	add    %ecx,%edx
c0104d91:	39 d0                	cmp    %edx,%eax
c0104d93:	0f 8c b1 00 00 00    	jl     c0104e4a <slob_alloc+0x14d>
			if (delta) { /* need to fragment head to align? */
c0104d99:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0104d9d:	74 38                	je     c0104dd7 <slob_alloc+0xda>
				aligned->units = cur->units - delta;
c0104d9f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104da2:	8b 00                	mov    (%eax),%eax
c0104da4:	2b 45 e8             	sub    -0x18(%ebp),%eax
c0104da7:	89 c2                	mov    %eax,%edx
c0104da9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104dac:	89 10                	mov    %edx,(%eax)
				aligned->next = cur->next;
c0104dae:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104db1:	8b 50 04             	mov    0x4(%eax),%edx
c0104db4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104db7:	89 50 04             	mov    %edx,0x4(%eax)
				cur->next = aligned;
c0104dba:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104dbd:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0104dc0:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = delta;
c0104dc3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104dc6:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0104dc9:	89 10                	mov    %edx,(%eax)
				prev = cur;
c0104dcb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104dce:	89 45 f4             	mov    %eax,-0xc(%ebp)
				cur = aligned;
c0104dd1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104dd4:	89 45 f0             	mov    %eax,-0x10(%ebp)
			}

			if (cur->units == units) /* exact fit? */
c0104dd7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104dda:	8b 00                	mov    (%eax),%eax
c0104ddc:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0104ddf:	75 0e                	jne    c0104def <slob_alloc+0xf2>
				prev->next = cur->next; /* unlink */
c0104de1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104de4:	8b 50 04             	mov    0x4(%eax),%edx
c0104de7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104dea:	89 50 04             	mov    %edx,0x4(%eax)
c0104ded:	eb 3c                	jmp    c0104e2b <slob_alloc+0x12e>
			else { /* fragment */
				prev->next = cur + units;
c0104def:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104df2:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0104df9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104dfc:	01 c2                	add    %eax,%edx
c0104dfe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e01:	89 50 04             	mov    %edx,0x4(%eax)
				prev->next->units = cur->units - units;
c0104e04:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e07:	8b 40 04             	mov    0x4(%eax),%eax
c0104e0a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104e0d:	8b 12                	mov    (%edx),%edx
c0104e0f:	2b 55 e0             	sub    -0x20(%ebp),%edx
c0104e12:	89 10                	mov    %edx,(%eax)
				prev->next->next = cur->next;
c0104e14:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e17:	8b 40 04             	mov    0x4(%eax),%eax
c0104e1a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104e1d:	8b 52 04             	mov    0x4(%edx),%edx
c0104e20:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = units;
c0104e23:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104e26:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0104e29:	89 10                	mov    %edx,(%eax)
			}

			slobfree = prev;
c0104e2b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e2e:	a3 08 1a 13 c0       	mov    %eax,0xc0131a08
			spin_unlock_irqrestore(&slob_lock, flags);
c0104e33:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104e36:	83 ec 0c             	sub    $0xc,%esp
c0104e39:	50                   	push   %eax
c0104e3a:	e8 4a fd ff ff       	call   c0104b89 <__intr_restore>
c0104e3f:	83 c4 10             	add    $0x10,%esp
			return cur;
c0104e42:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104e45:	e9 80 00 00 00       	jmp    c0104eca <slob_alloc+0x1cd>
		}
		if (cur == slobfree) {
c0104e4a:	a1 08 1a 13 c0       	mov    0xc0131a08,%eax
c0104e4f:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0104e52:	75 62                	jne    c0104eb6 <slob_alloc+0x1b9>
			spin_unlock_irqrestore(&slob_lock, flags);
c0104e54:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104e57:	83 ec 0c             	sub    $0xc,%esp
c0104e5a:	50                   	push   %eax
c0104e5b:	e8 29 fd ff ff       	call   c0104b89 <__intr_restore>
c0104e60:	83 c4 10             	add    $0x10,%esp

			if (size == PAGE_SIZE) /* trying to shrink arena? */
c0104e63:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c0104e6a:	75 07                	jne    c0104e73 <slob_alloc+0x176>
				return 0;
c0104e6c:	b8 00 00 00 00       	mov    $0x0,%eax
c0104e71:	eb 57                	jmp    c0104eca <slob_alloc+0x1cd>

			cur = (slob_t *)__slob_get_free_page(gfp);
c0104e73:	83 ec 08             	sub    $0x8,%esp
c0104e76:	6a 00                	push   $0x0
c0104e78:	ff 75 0c             	pushl  0xc(%ebp)
c0104e7b:	e8 04 fe ff ff       	call   c0104c84 <__slob_get_free_pages>
c0104e80:	83 c4 10             	add    $0x10,%esp
c0104e83:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (!cur)
c0104e86:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0104e8a:	75 07                	jne    c0104e93 <slob_alloc+0x196>
				return 0;
c0104e8c:	b8 00 00 00 00       	mov    $0x0,%eax
c0104e91:	eb 37                	jmp    c0104eca <slob_alloc+0x1cd>

			slob_free(cur, PAGE_SIZE);
c0104e93:	83 ec 08             	sub    $0x8,%esp
c0104e96:	68 00 10 00 00       	push   $0x1000
c0104e9b:	ff 75 f0             	pushl  -0x10(%ebp)
c0104e9e:	e8 29 00 00 00       	call   c0104ecc <slob_free>
c0104ea3:	83 c4 10             	add    $0x10,%esp
			spin_lock_irqsave(&slob_lock, flags);
c0104ea6:	e8 b4 fc ff ff       	call   c0104b5f <__intr_save>
c0104eab:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			cur = slobfree;
c0104eae:	a1 08 1a 13 c0       	mov    0xc0131a08,%eax
c0104eb3:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int delta = 0, units = SLOB_UNITS(size);
	unsigned long flags;

	spin_lock_irqsave(&slob_lock, flags);
	prev = slobfree;
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c0104eb6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104eb9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104ebc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104ebf:	8b 40 04             	mov    0x4(%eax),%eax
c0104ec2:	89 45 f0             	mov    %eax,-0x10(%ebp)

			slob_free(cur, PAGE_SIZE);
			spin_lock_irqsave(&slob_lock, flags);
			cur = slobfree;
		}
	}
c0104ec5:	e9 8f fe ff ff       	jmp    c0104d59 <slob_alloc+0x5c>
}
c0104eca:	c9                   	leave  
c0104ecb:	c3                   	ret    

c0104ecc <slob_free>:

static void slob_free(void *block, int size)
{
c0104ecc:	55                   	push   %ebp
c0104ecd:	89 e5                	mov    %esp,%ebp
c0104ecf:	83 ec 18             	sub    $0x18,%esp
	slob_t *cur, *b = (slob_t *)block;
c0104ed2:	8b 45 08             	mov    0x8(%ebp),%eax
c0104ed5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c0104ed8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104edc:	0f 84 05 01 00 00    	je     c0104fe7 <slob_free+0x11b>
		return;

	if (size)
c0104ee2:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0104ee6:	74 10                	je     c0104ef8 <slob_free+0x2c>
		b->units = SLOB_UNITS(size);
c0104ee8:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104eeb:	83 c0 07             	add    $0x7,%eax
c0104eee:	c1 e8 03             	shr    $0x3,%eax
c0104ef1:	89 c2                	mov    %eax,%edx
c0104ef3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104ef6:	89 10                	mov    %edx,(%eax)

	/* Find reinsertion point */
	spin_lock_irqsave(&slob_lock, flags);
c0104ef8:	e8 62 fc ff ff       	call   c0104b5f <__intr_save>
c0104efd:	89 45 ec             	mov    %eax,-0x14(%ebp)
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c0104f00:	a1 08 1a 13 c0       	mov    0xc0131a08,%eax
c0104f05:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104f08:	eb 27                	jmp    c0104f31 <slob_free+0x65>
		if (cur >= cur->next && (b > cur || b < cur->next))
c0104f0a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104f0d:	8b 40 04             	mov    0x4(%eax),%eax
c0104f10:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104f13:	77 13                	ja     c0104f28 <slob_free+0x5c>
c0104f15:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104f18:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104f1b:	77 27                	ja     c0104f44 <slob_free+0x78>
c0104f1d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104f20:	8b 40 04             	mov    0x4(%eax),%eax
c0104f23:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104f26:	77 1c                	ja     c0104f44 <slob_free+0x78>
	if (size)
		b->units = SLOB_UNITS(size);

	/* Find reinsertion point */
	spin_lock_irqsave(&slob_lock, flags);
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c0104f28:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104f2b:	8b 40 04             	mov    0x4(%eax),%eax
c0104f2e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104f31:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104f34:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104f37:	76 d1                	jbe    c0104f0a <slob_free+0x3e>
c0104f39:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104f3c:	8b 40 04             	mov    0x4(%eax),%eax
c0104f3f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104f42:	76 c6                	jbe    c0104f0a <slob_free+0x3e>
		if (cur >= cur->next && (b > cur || b < cur->next))
			break;

	if (b + b->units == cur->next) {
c0104f44:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104f47:	8b 00                	mov    (%eax),%eax
c0104f49:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0104f50:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104f53:	01 c2                	add    %eax,%edx
c0104f55:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104f58:	8b 40 04             	mov    0x4(%eax),%eax
c0104f5b:	39 c2                	cmp    %eax,%edx
c0104f5d:	75 25                	jne    c0104f84 <slob_free+0xb8>
		b->units += cur->next->units;
c0104f5f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104f62:	8b 10                	mov    (%eax),%edx
c0104f64:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104f67:	8b 40 04             	mov    0x4(%eax),%eax
c0104f6a:	8b 00                	mov    (%eax),%eax
c0104f6c:	01 c2                	add    %eax,%edx
c0104f6e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104f71:	89 10                	mov    %edx,(%eax)
		b->next = cur->next->next;
c0104f73:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104f76:	8b 40 04             	mov    0x4(%eax),%eax
c0104f79:	8b 50 04             	mov    0x4(%eax),%edx
c0104f7c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104f7f:	89 50 04             	mov    %edx,0x4(%eax)
c0104f82:	eb 0c                	jmp    c0104f90 <slob_free+0xc4>
	} else
		b->next = cur->next;
c0104f84:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104f87:	8b 50 04             	mov    0x4(%eax),%edx
c0104f8a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104f8d:	89 50 04             	mov    %edx,0x4(%eax)

	if (cur + cur->units == b) {
c0104f90:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104f93:	8b 00                	mov    (%eax),%eax
c0104f95:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0104f9c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104f9f:	01 d0                	add    %edx,%eax
c0104fa1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104fa4:	75 1f                	jne    c0104fc5 <slob_free+0xf9>
		cur->units += b->units;
c0104fa6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104fa9:	8b 10                	mov    (%eax),%edx
c0104fab:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104fae:	8b 00                	mov    (%eax),%eax
c0104fb0:	01 c2                	add    %eax,%edx
c0104fb2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104fb5:	89 10                	mov    %edx,(%eax)
		cur->next = b->next;
c0104fb7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104fba:	8b 50 04             	mov    0x4(%eax),%edx
c0104fbd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104fc0:	89 50 04             	mov    %edx,0x4(%eax)
c0104fc3:	eb 09                	jmp    c0104fce <slob_free+0x102>
	} else
		cur->next = b;
c0104fc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104fc8:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104fcb:	89 50 04             	mov    %edx,0x4(%eax)

	slobfree = cur;
c0104fce:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104fd1:	a3 08 1a 13 c0       	mov    %eax,0xc0131a08

	spin_unlock_irqrestore(&slob_lock, flags);
c0104fd6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104fd9:	83 ec 0c             	sub    $0xc,%esp
c0104fdc:	50                   	push   %eax
c0104fdd:	e8 a7 fb ff ff       	call   c0104b89 <__intr_restore>
c0104fe2:	83 c4 10             	add    $0x10,%esp
c0104fe5:	eb 01                	jmp    c0104fe8 <slob_free+0x11c>
{
	slob_t *cur, *b = (slob_t *)block;
	unsigned long flags;

	if (!block)
		return;
c0104fe7:	90                   	nop
		cur->next = b;

	slobfree = cur;

	spin_unlock_irqrestore(&slob_lock, flags);
}
c0104fe8:	c9                   	leave  
c0104fe9:	c3                   	ret    

c0104fea <slob_init>:



void
slob_init(void) {
c0104fea:	55                   	push   %ebp
c0104feb:	89 e5                	mov    %esp,%ebp
c0104fed:	83 ec 08             	sub    $0x8,%esp
  cprintf("use SLOB allocator\n");
c0104ff0:	83 ec 0c             	sub    $0xc,%esp
c0104ff3:	68 d2 dc 10 c0       	push   $0xc010dcd2
c0104ff8:	e8 9a b2 ff ff       	call   c0100297 <cprintf>
c0104ffd:	83 c4 10             	add    $0x10,%esp
}
c0105000:	90                   	nop
c0105001:	c9                   	leave  
c0105002:	c3                   	ret    

c0105003 <kmalloc_init>:

inline void 
kmalloc_init(void) {
c0105003:	55                   	push   %ebp
c0105004:	89 e5                	mov    %esp,%ebp
c0105006:	83 ec 08             	sub    $0x8,%esp
    slob_init();
c0105009:	e8 dc ff ff ff       	call   c0104fea <slob_init>
    cprintf("kmalloc_init() succeeded!\n");
c010500e:	83 ec 0c             	sub    $0xc,%esp
c0105011:	68 e6 dc 10 c0       	push   $0xc010dce6
c0105016:	e8 7c b2 ff ff       	call   c0100297 <cprintf>
c010501b:	83 c4 10             	add    $0x10,%esp
}
c010501e:	90                   	nop
c010501f:	c9                   	leave  
c0105020:	c3                   	ret    

c0105021 <slob_allocated>:

size_t
slob_allocated(void) {
c0105021:	55                   	push   %ebp
c0105022:	89 e5                	mov    %esp,%ebp
  return 0;
c0105024:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105029:	5d                   	pop    %ebp
c010502a:	c3                   	ret    

c010502b <kallocated>:

size_t
kallocated(void) {
c010502b:	55                   	push   %ebp
c010502c:	89 e5                	mov    %esp,%ebp
   return slob_allocated();
c010502e:	e8 ee ff ff ff       	call   c0105021 <slob_allocated>
}
c0105033:	5d                   	pop    %ebp
c0105034:	c3                   	ret    

c0105035 <find_order>:

static int find_order(int size)
{
c0105035:	55                   	push   %ebp
c0105036:	89 e5                	mov    %esp,%ebp
c0105038:	83 ec 10             	sub    $0x10,%esp
	int order = 0;
c010503b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for ( ; size > 4096 ; size >>=1)
c0105042:	eb 07                	jmp    c010504b <find_order+0x16>
		order++;
c0105044:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
}

static int find_order(int size)
{
	int order = 0;
	for ( ; size > 4096 ; size >>=1)
c0105048:	d1 7d 08             	sarl   0x8(%ebp)
c010504b:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c0105052:	7f f0                	jg     c0105044 <find_order+0xf>
		order++;
	return order;
c0105054:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0105057:	c9                   	leave  
c0105058:	c3                   	ret    

c0105059 <__kmalloc>:

static void *__kmalloc(size_t size, gfp_t gfp)
{
c0105059:	55                   	push   %ebp
c010505a:	89 e5                	mov    %esp,%ebp
c010505c:	83 ec 18             	sub    $0x18,%esp
	slob_t *m;
	bigblock_t *bb;
	unsigned long flags;

	if (size < PAGE_SIZE - SLOB_UNIT) {
c010505f:	81 7d 08 f7 0f 00 00 	cmpl   $0xff7,0x8(%ebp)
c0105066:	77 35                	ja     c010509d <__kmalloc+0x44>
		m = slob_alloc(size + SLOB_UNIT, gfp, 0);
c0105068:	8b 45 08             	mov    0x8(%ebp),%eax
c010506b:	83 c0 08             	add    $0x8,%eax
c010506e:	83 ec 04             	sub    $0x4,%esp
c0105071:	6a 00                	push   $0x0
c0105073:	ff 75 0c             	pushl  0xc(%ebp)
c0105076:	50                   	push   %eax
c0105077:	e8 81 fc ff ff       	call   c0104cfd <slob_alloc>
c010507c:	83 c4 10             	add    $0x10,%esp
c010507f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		return m ? (void *)(m + 1) : 0;
c0105082:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105086:	74 0b                	je     c0105093 <__kmalloc+0x3a>
c0105088:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010508b:	83 c0 08             	add    $0x8,%eax
c010508e:	e9 b3 00 00 00       	jmp    c0105146 <__kmalloc+0xed>
c0105093:	b8 00 00 00 00       	mov    $0x0,%eax
c0105098:	e9 a9 00 00 00       	jmp    c0105146 <__kmalloc+0xed>
	}

	bb = slob_alloc(sizeof(bigblock_t), gfp, 0);
c010509d:	83 ec 04             	sub    $0x4,%esp
c01050a0:	6a 00                	push   $0x0
c01050a2:	ff 75 0c             	pushl  0xc(%ebp)
c01050a5:	6a 0c                	push   $0xc
c01050a7:	e8 51 fc ff ff       	call   c0104cfd <slob_alloc>
c01050ac:	83 c4 10             	add    $0x10,%esp
c01050af:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (!bb)
c01050b2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01050b6:	75 0a                	jne    c01050c2 <__kmalloc+0x69>
		return 0;
c01050b8:	b8 00 00 00 00       	mov    $0x0,%eax
c01050bd:	e9 84 00 00 00       	jmp    c0105146 <__kmalloc+0xed>

	bb->order = find_order(size);
c01050c2:	8b 45 08             	mov    0x8(%ebp),%eax
c01050c5:	83 ec 0c             	sub    $0xc,%esp
c01050c8:	50                   	push   %eax
c01050c9:	e8 67 ff ff ff       	call   c0105035 <find_order>
c01050ce:	83 c4 10             	add    $0x10,%esp
c01050d1:	89 c2                	mov    %eax,%edx
c01050d3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01050d6:	89 10                	mov    %edx,(%eax)
	bb->pages = (void *)__slob_get_free_pages(gfp, bb->order);
c01050d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01050db:	8b 00                	mov    (%eax),%eax
c01050dd:	83 ec 08             	sub    $0x8,%esp
c01050e0:	50                   	push   %eax
c01050e1:	ff 75 0c             	pushl  0xc(%ebp)
c01050e4:	e8 9b fb ff ff       	call   c0104c84 <__slob_get_free_pages>
c01050e9:	83 c4 10             	add    $0x10,%esp
c01050ec:	89 c2                	mov    %eax,%edx
c01050ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01050f1:	89 50 04             	mov    %edx,0x4(%eax)

	if (bb->pages) {
c01050f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01050f7:	8b 40 04             	mov    0x4(%eax),%eax
c01050fa:	85 c0                	test   %eax,%eax
c01050fc:	74 33                	je     c0105131 <__kmalloc+0xd8>
		spin_lock_irqsave(&block_lock, flags);
c01050fe:	e8 5c fa ff ff       	call   c0104b5f <__intr_save>
c0105103:	89 45 ec             	mov    %eax,-0x14(%ebp)
		bb->next = bigblocks;
c0105106:	8b 15 68 4f 1c c0    	mov    0xc01c4f68,%edx
c010510c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010510f:	89 50 08             	mov    %edx,0x8(%eax)
		bigblocks = bb;
c0105112:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105115:	a3 68 4f 1c c0       	mov    %eax,0xc01c4f68
		spin_unlock_irqrestore(&block_lock, flags);
c010511a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010511d:	83 ec 0c             	sub    $0xc,%esp
c0105120:	50                   	push   %eax
c0105121:	e8 63 fa ff ff       	call   c0104b89 <__intr_restore>
c0105126:	83 c4 10             	add    $0x10,%esp
		return bb->pages;
c0105129:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010512c:	8b 40 04             	mov    0x4(%eax),%eax
c010512f:	eb 15                	jmp    c0105146 <__kmalloc+0xed>
	}

	slob_free(bb, sizeof(bigblock_t));
c0105131:	83 ec 08             	sub    $0x8,%esp
c0105134:	6a 0c                	push   $0xc
c0105136:	ff 75 f0             	pushl  -0x10(%ebp)
c0105139:	e8 8e fd ff ff       	call   c0104ecc <slob_free>
c010513e:	83 c4 10             	add    $0x10,%esp
	return 0;
c0105141:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105146:	c9                   	leave  
c0105147:	c3                   	ret    

c0105148 <kmalloc>:

void *
kmalloc(size_t size)
{
c0105148:	55                   	push   %ebp
c0105149:	89 e5                	mov    %esp,%ebp
c010514b:	83 ec 08             	sub    $0x8,%esp
  return __kmalloc(size, 0);
c010514e:	83 ec 08             	sub    $0x8,%esp
c0105151:	6a 00                	push   $0x0
c0105153:	ff 75 08             	pushl  0x8(%ebp)
c0105156:	e8 fe fe ff ff       	call   c0105059 <__kmalloc>
c010515b:	83 c4 10             	add    $0x10,%esp
}
c010515e:	c9                   	leave  
c010515f:	c3                   	ret    

c0105160 <kfree>:


void kfree(void *block)
{
c0105160:	55                   	push   %ebp
c0105161:	89 e5                	mov    %esp,%ebp
c0105163:	83 ec 18             	sub    $0x18,%esp
	bigblock_t *bb, **last = &bigblocks;
c0105166:	c7 45 f0 68 4f 1c c0 	movl   $0xc01c4f68,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c010516d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0105171:	0f 84 ac 00 00 00    	je     c0105223 <kfree+0xc3>
		return;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c0105177:	8b 45 08             	mov    0x8(%ebp),%eax
c010517a:	25 ff 0f 00 00       	and    $0xfff,%eax
c010517f:	85 c0                	test   %eax,%eax
c0105181:	0f 85 85 00 00 00    	jne    c010520c <kfree+0xac>
		/* might be on the big block list */
		spin_lock_irqsave(&block_lock, flags);
c0105187:	e8 d3 f9 ff ff       	call   c0104b5f <__intr_save>
c010518c:	89 45 ec             	mov    %eax,-0x14(%ebp)
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c010518f:	a1 68 4f 1c c0       	mov    0xc01c4f68,%eax
c0105194:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105197:	eb 5e                	jmp    c01051f7 <kfree+0x97>
			if (bb->pages == block) {
c0105199:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010519c:	8b 40 04             	mov    0x4(%eax),%eax
c010519f:	3b 45 08             	cmp    0x8(%ebp),%eax
c01051a2:	75 41                	jne    c01051e5 <kfree+0x85>
				*last = bb->next;
c01051a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01051a7:	8b 50 08             	mov    0x8(%eax),%edx
c01051aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01051ad:	89 10                	mov    %edx,(%eax)
				spin_unlock_irqrestore(&block_lock, flags);
c01051af:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01051b2:	83 ec 0c             	sub    $0xc,%esp
c01051b5:	50                   	push   %eax
c01051b6:	e8 ce f9 ff ff       	call   c0104b89 <__intr_restore>
c01051bb:	83 c4 10             	add    $0x10,%esp
				__slob_free_pages((unsigned long)block, bb->order);
c01051be:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01051c1:	8b 10                	mov    (%eax),%edx
c01051c3:	8b 45 08             	mov    0x8(%ebp),%eax
c01051c6:	83 ec 08             	sub    $0x8,%esp
c01051c9:	52                   	push   %edx
c01051ca:	50                   	push   %eax
c01051cb:	e8 f4 fa ff ff       	call   c0104cc4 <__slob_free_pages>
c01051d0:	83 c4 10             	add    $0x10,%esp
				slob_free(bb, sizeof(bigblock_t));
c01051d3:	83 ec 08             	sub    $0x8,%esp
c01051d6:	6a 0c                	push   $0xc
c01051d8:	ff 75 f4             	pushl  -0xc(%ebp)
c01051db:	e8 ec fc ff ff       	call   c0104ecc <slob_free>
c01051e0:	83 c4 10             	add    $0x10,%esp
				return;
c01051e3:	eb 3f                	jmp    c0105224 <kfree+0xc4>
		return;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
		/* might be on the big block list */
		spin_lock_irqsave(&block_lock, flags);
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c01051e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01051e8:	83 c0 08             	add    $0x8,%eax
c01051eb:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01051ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01051f1:	8b 40 08             	mov    0x8(%eax),%eax
c01051f4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01051f7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01051fb:	75 9c                	jne    c0105199 <kfree+0x39>
				__slob_free_pages((unsigned long)block, bb->order);
				slob_free(bb, sizeof(bigblock_t));
				return;
			}
		}
		spin_unlock_irqrestore(&block_lock, flags);
c01051fd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105200:	83 ec 0c             	sub    $0xc,%esp
c0105203:	50                   	push   %eax
c0105204:	e8 80 f9 ff ff       	call   c0104b89 <__intr_restore>
c0105209:	83 c4 10             	add    $0x10,%esp
	}

	slob_free((slob_t *)block - 1, 0);
c010520c:	8b 45 08             	mov    0x8(%ebp),%eax
c010520f:	83 e8 08             	sub    $0x8,%eax
c0105212:	83 ec 08             	sub    $0x8,%esp
c0105215:	6a 00                	push   $0x0
c0105217:	50                   	push   %eax
c0105218:	e8 af fc ff ff       	call   c0104ecc <slob_free>
c010521d:	83 c4 10             	add    $0x10,%esp
	return;
c0105220:	90                   	nop
c0105221:	eb 01                	jmp    c0105224 <kfree+0xc4>
{
	bigblock_t *bb, **last = &bigblocks;
	unsigned long flags;

	if (!block)
		return;
c0105223:	90                   	nop
		spin_unlock_irqrestore(&block_lock, flags);
	}

	slob_free((slob_t *)block - 1, 0);
	return;
}
c0105224:	c9                   	leave  
c0105225:	c3                   	ret    

c0105226 <ksize>:


unsigned int ksize(const void *block)
{
c0105226:	55                   	push   %ebp
c0105227:	89 e5                	mov    %esp,%ebp
c0105229:	83 ec 18             	sub    $0x18,%esp
	bigblock_t *bb;
	unsigned long flags;

	if (!block)
c010522c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0105230:	75 07                	jne    c0105239 <ksize+0x13>
		return 0;
c0105232:	b8 00 00 00 00       	mov    $0x0,%eax
c0105237:	eb 73                	jmp    c01052ac <ksize+0x86>

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c0105239:	8b 45 08             	mov    0x8(%ebp),%eax
c010523c:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105241:	85 c0                	test   %eax,%eax
c0105243:	75 5c                	jne    c01052a1 <ksize+0x7b>
		spin_lock_irqsave(&block_lock, flags);
c0105245:	e8 15 f9 ff ff       	call   c0104b5f <__intr_save>
c010524a:	89 45 f0             	mov    %eax,-0x10(%ebp)
		for (bb = bigblocks; bb; bb = bb->next)
c010524d:	a1 68 4f 1c c0       	mov    0xc01c4f68,%eax
c0105252:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105255:	eb 35                	jmp    c010528c <ksize+0x66>
			if (bb->pages == block) {
c0105257:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010525a:	8b 40 04             	mov    0x4(%eax),%eax
c010525d:	3b 45 08             	cmp    0x8(%ebp),%eax
c0105260:	75 21                	jne    c0105283 <ksize+0x5d>
				spin_unlock_irqrestore(&slob_lock, flags);
c0105262:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105265:	83 ec 0c             	sub    $0xc,%esp
c0105268:	50                   	push   %eax
c0105269:	e8 1b f9 ff ff       	call   c0104b89 <__intr_restore>
c010526e:	83 c4 10             	add    $0x10,%esp
				return PAGE_SIZE << bb->order;
c0105271:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105274:	8b 00                	mov    (%eax),%eax
c0105276:	ba 00 10 00 00       	mov    $0x1000,%edx
c010527b:	89 c1                	mov    %eax,%ecx
c010527d:	d3 e2                	shl    %cl,%edx
c010527f:	89 d0                	mov    %edx,%eax
c0105281:	eb 29                	jmp    c01052ac <ksize+0x86>
	if (!block)
		return 0;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
		spin_lock_irqsave(&block_lock, flags);
		for (bb = bigblocks; bb; bb = bb->next)
c0105283:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105286:	8b 40 08             	mov    0x8(%eax),%eax
c0105289:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010528c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105290:	75 c5                	jne    c0105257 <ksize+0x31>
			if (bb->pages == block) {
				spin_unlock_irqrestore(&slob_lock, flags);
				return PAGE_SIZE << bb->order;
			}
		spin_unlock_irqrestore(&block_lock, flags);
c0105292:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105295:	83 ec 0c             	sub    $0xc,%esp
c0105298:	50                   	push   %eax
c0105299:	e8 eb f8 ff ff       	call   c0104b89 <__intr_restore>
c010529e:	83 c4 10             	add    $0x10,%esp
	}

	return ((slob_t *)block - 1)->units * SLOB_UNIT;
c01052a1:	8b 45 08             	mov    0x8(%ebp),%eax
c01052a4:	83 e8 08             	sub    $0x8,%eax
c01052a7:	8b 00                	mov    (%eax),%eax
c01052a9:	c1 e0 03             	shl    $0x3,%eax
}
c01052ac:	c9                   	leave  
c01052ad:	c3                   	ret    

c01052ae <pa2page>:
page2pa(struct Page *page) {
    return page2ppn(page) << PGSHIFT;
}

static inline struct Page *
pa2page(uintptr_t pa) {
c01052ae:	55                   	push   %ebp
c01052af:	89 e5                	mov    %esp,%ebp
c01052b1:	83 ec 08             	sub    $0x8,%esp
    if (PPN(pa) >= npage) {
c01052b4:	8b 45 08             	mov    0x8(%ebp),%eax
c01052b7:	c1 e8 0c             	shr    $0xc,%eax
c01052ba:	89 c2                	mov    %eax,%edx
c01052bc:	a1 80 4f 1c c0       	mov    0xc01c4f80,%eax
c01052c1:	39 c2                	cmp    %eax,%edx
c01052c3:	72 14                	jb     c01052d9 <pa2page+0x2b>
        panic("pa2page called with invalid pa");
c01052c5:	83 ec 04             	sub    $0x4,%esp
c01052c8:	68 04 dd 10 c0       	push   $0xc010dd04
c01052cd:	6a 5e                	push   $0x5e
c01052cf:	68 23 dd 10 c0       	push   $0xc010dd23
c01052d4:	e8 24 b1 ff ff       	call   c01003fd <__panic>
    }
    return &pages[PPN(pa)];
c01052d9:	a1 f8 71 1c c0       	mov    0xc01c71f8,%eax
c01052de:	8b 55 08             	mov    0x8(%ebp),%edx
c01052e1:	c1 ea 0c             	shr    $0xc,%edx
c01052e4:	c1 e2 05             	shl    $0x5,%edx
c01052e7:	01 d0                	add    %edx,%eax
}
c01052e9:	c9                   	leave  
c01052ea:	c3                   	ret    

c01052eb <pte2page>:
kva2page(void *kva) {
    return pa2page(PADDR(kva));
}

static inline struct Page *
pte2page(pte_t pte) {
c01052eb:	55                   	push   %ebp
c01052ec:	89 e5                	mov    %esp,%ebp
c01052ee:	83 ec 08             	sub    $0x8,%esp
    if (!(pte & PTE_P)) {
c01052f1:	8b 45 08             	mov    0x8(%ebp),%eax
c01052f4:	83 e0 01             	and    $0x1,%eax
c01052f7:	85 c0                	test   %eax,%eax
c01052f9:	75 14                	jne    c010530f <pte2page+0x24>
        panic("pte2page called with invalid pte");
c01052fb:	83 ec 04             	sub    $0x4,%esp
c01052fe:	68 34 dd 10 c0       	push   $0xc010dd34
c0105303:	6a 70                	push   $0x70
c0105305:	68 23 dd 10 c0       	push   $0xc010dd23
c010530a:	e8 ee b0 ff ff       	call   c01003fd <__panic>
    }
    return pa2page(PTE_ADDR(pte));
c010530f:	8b 45 08             	mov    0x8(%ebp),%eax
c0105312:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0105317:	83 ec 0c             	sub    $0xc,%esp
c010531a:	50                   	push   %eax
c010531b:	e8 8e ff ff ff       	call   c01052ae <pa2page>
c0105320:	83 c4 10             	add    $0x10,%esp
}
c0105323:	c9                   	leave  
c0105324:	c3                   	ret    

c0105325 <pde2page>:

static inline struct Page *
pde2page(pde_t pde) {
c0105325:	55                   	push   %ebp
c0105326:	89 e5                	mov    %esp,%ebp
c0105328:	83 ec 08             	sub    $0x8,%esp
    return pa2page(PDE_ADDR(pde));
c010532b:	8b 45 08             	mov    0x8(%ebp),%eax
c010532e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0105333:	83 ec 0c             	sub    $0xc,%esp
c0105336:	50                   	push   %eax
c0105337:	e8 72 ff ff ff       	call   c01052ae <pa2page>
c010533c:	83 c4 10             	add    $0x10,%esp
}
c010533f:	c9                   	leave  
c0105340:	c3                   	ret    

c0105341 <swap_init>:

static void check_swap(void);

int
swap_init(void)
{
c0105341:	55                   	push   %ebp
c0105342:	89 e5                	mov    %esp,%ebp
c0105344:	83 ec 18             	sub    $0x18,%esp
     swapfs_init();
c0105347:	e8 04 45 00 00       	call   c0109850 <swapfs_init>

     if (!(1024 <= max_swap_offset && max_swap_offset < MAX_SWAP_OFFSET_LIMIT))
c010534c:	a1 bc 71 1c c0       	mov    0xc01c71bc,%eax
c0105351:	3d ff 03 00 00       	cmp    $0x3ff,%eax
c0105356:	76 0c                	jbe    c0105364 <swap_init+0x23>
c0105358:	a1 bc 71 1c c0       	mov    0xc01c71bc,%eax
c010535d:	3d ff ff ff 00       	cmp    $0xffffff,%eax
c0105362:	76 17                	jbe    c010537b <swap_init+0x3a>
     {
          panic("bad max_swap_offset %08x.\n", max_swap_offset);
c0105364:	a1 bc 71 1c c0       	mov    0xc01c71bc,%eax
c0105369:	50                   	push   %eax
c010536a:	68 55 dd 10 c0       	push   $0xc010dd55
c010536f:	6a 27                	push   $0x27
c0105371:	68 70 dd 10 c0       	push   $0xc010dd70
c0105376:	e8 82 b0 ff ff       	call   c01003fd <__panic>
     }
     

     sm = &swap_manager_fifo;
c010537b:	c7 05 74 4f 1c c0 e0 	movl   $0xc01319e0,0xc01c4f74
c0105382:	19 13 c0 
     int r = sm->init();
c0105385:	a1 74 4f 1c c0       	mov    0xc01c4f74,%eax
c010538a:	8b 40 04             	mov    0x4(%eax),%eax
c010538d:	ff d0                	call   *%eax
c010538f:	89 45 f4             	mov    %eax,-0xc(%ebp)
     
     if (r == 0)
c0105392:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105396:	75 27                	jne    c01053bf <swap_init+0x7e>
     {
          swap_init_ok = 1;
c0105398:	c7 05 6c 4f 1c c0 01 	movl   $0x1,0xc01c4f6c
c010539f:	00 00 00 
          cprintf("SWAP: manager = %s\n", sm->name);
c01053a2:	a1 74 4f 1c c0       	mov    0xc01c4f74,%eax
c01053a7:	8b 00                	mov    (%eax),%eax
c01053a9:	83 ec 08             	sub    $0x8,%esp
c01053ac:	50                   	push   %eax
c01053ad:	68 7f dd 10 c0       	push   $0xc010dd7f
c01053b2:	e8 e0 ae ff ff       	call   c0100297 <cprintf>
c01053b7:	83 c4 10             	add    $0x10,%esp
          check_swap();
c01053ba:	e8 f7 03 00 00       	call   c01057b6 <check_swap>
     }

     return r;
c01053bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01053c2:	c9                   	leave  
c01053c3:	c3                   	ret    

c01053c4 <swap_init_mm>:

int
swap_init_mm(struct mm_struct *mm)
{
c01053c4:	55                   	push   %ebp
c01053c5:	89 e5                	mov    %esp,%ebp
c01053c7:	83 ec 08             	sub    $0x8,%esp
     return sm->init_mm(mm);
c01053ca:	a1 74 4f 1c c0       	mov    0xc01c4f74,%eax
c01053cf:	8b 40 08             	mov    0x8(%eax),%eax
c01053d2:	83 ec 0c             	sub    $0xc,%esp
c01053d5:	ff 75 08             	pushl  0x8(%ebp)
c01053d8:	ff d0                	call   *%eax
c01053da:	83 c4 10             	add    $0x10,%esp
}
c01053dd:	c9                   	leave  
c01053de:	c3                   	ret    

c01053df <swap_tick_event>:

int
swap_tick_event(struct mm_struct *mm)
{
c01053df:	55                   	push   %ebp
c01053e0:	89 e5                	mov    %esp,%ebp
c01053e2:	83 ec 08             	sub    $0x8,%esp
     return sm->tick_event(mm);
c01053e5:	a1 74 4f 1c c0       	mov    0xc01c4f74,%eax
c01053ea:	8b 40 0c             	mov    0xc(%eax),%eax
c01053ed:	83 ec 0c             	sub    $0xc,%esp
c01053f0:	ff 75 08             	pushl  0x8(%ebp)
c01053f3:	ff d0                	call   *%eax
c01053f5:	83 c4 10             	add    $0x10,%esp
}
c01053f8:	c9                   	leave  
c01053f9:	c3                   	ret    

c01053fa <swap_map_swappable>:

int
swap_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c01053fa:	55                   	push   %ebp
c01053fb:	89 e5                	mov    %esp,%ebp
c01053fd:	83 ec 08             	sub    $0x8,%esp
     return sm->map_swappable(mm, addr, page, swap_in);
c0105400:	a1 74 4f 1c c0       	mov    0xc01c4f74,%eax
c0105405:	8b 40 10             	mov    0x10(%eax),%eax
c0105408:	ff 75 14             	pushl  0x14(%ebp)
c010540b:	ff 75 10             	pushl  0x10(%ebp)
c010540e:	ff 75 0c             	pushl  0xc(%ebp)
c0105411:	ff 75 08             	pushl  0x8(%ebp)
c0105414:	ff d0                	call   *%eax
c0105416:	83 c4 10             	add    $0x10,%esp
}
c0105419:	c9                   	leave  
c010541a:	c3                   	ret    

c010541b <swap_set_unswappable>:

int
swap_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c010541b:	55                   	push   %ebp
c010541c:	89 e5                	mov    %esp,%ebp
c010541e:	83 ec 08             	sub    $0x8,%esp
     return sm->set_unswappable(mm, addr);
c0105421:	a1 74 4f 1c c0       	mov    0xc01c4f74,%eax
c0105426:	8b 40 14             	mov    0x14(%eax),%eax
c0105429:	83 ec 08             	sub    $0x8,%esp
c010542c:	ff 75 0c             	pushl  0xc(%ebp)
c010542f:	ff 75 08             	pushl  0x8(%ebp)
c0105432:	ff d0                	call   *%eax
c0105434:	83 c4 10             	add    $0x10,%esp
}
c0105437:	c9                   	leave  
c0105438:	c3                   	ret    

c0105439 <swap_out>:

volatile unsigned int swap_out_num=0;

int
swap_out(struct mm_struct *mm, int n, int in_tick)
{
c0105439:	55                   	push   %ebp
c010543a:	89 e5                	mov    %esp,%ebp
c010543c:	83 ec 28             	sub    $0x28,%esp
     int i;
     for (i = 0; i != n; ++ i)
c010543f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0105446:	e9 2e 01 00 00       	jmp    c0105579 <swap_out+0x140>
     {
          uintptr_t v;
          //struct Page **ptr_page=NULL;
          struct Page *page;
          // cprintf("i %d, SWAP: call swap_out_victim\n",i);
          int r = sm->swap_out_victim(mm, &page, in_tick);
c010544b:	a1 74 4f 1c c0       	mov    0xc01c4f74,%eax
c0105450:	8b 40 18             	mov    0x18(%eax),%eax
c0105453:	83 ec 04             	sub    $0x4,%esp
c0105456:	ff 75 10             	pushl  0x10(%ebp)
c0105459:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c010545c:	52                   	push   %edx
c010545d:	ff 75 08             	pushl  0x8(%ebp)
c0105460:	ff d0                	call   *%eax
c0105462:	83 c4 10             	add    $0x10,%esp
c0105465:	89 45 f0             	mov    %eax,-0x10(%ebp)
          if (r != 0) {
c0105468:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010546c:	74 18                	je     c0105486 <swap_out+0x4d>
                    cprintf("i %d, swap_out: call swap_out_victim failed\n",i);
c010546e:	83 ec 08             	sub    $0x8,%esp
c0105471:	ff 75 f4             	pushl  -0xc(%ebp)
c0105474:	68 94 dd 10 c0       	push   $0xc010dd94
c0105479:	e8 19 ae ff ff       	call   c0100297 <cprintf>
c010547e:	83 c4 10             	add    $0x10,%esp
c0105481:	e9 ff 00 00 00       	jmp    c0105585 <swap_out+0x14c>
          }          
          //assert(!PageReserved(page));

          //cprintf("SWAP: choose victim page 0x%08x\n", page);
          
          v=page->pra_vaddr; 
c0105486:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105489:	8b 40 1c             	mov    0x1c(%eax),%eax
c010548c:	89 45 ec             	mov    %eax,-0x14(%ebp)
          pte_t *ptep = get_pte(mm->pgdir, v, 0);
c010548f:	8b 45 08             	mov    0x8(%ebp),%eax
c0105492:	8b 40 0c             	mov    0xc(%eax),%eax
c0105495:	83 ec 04             	sub    $0x4,%esp
c0105498:	6a 00                	push   $0x0
c010549a:	ff 75 ec             	pushl  -0x14(%ebp)
c010549d:	50                   	push   %eax
c010549e:	e8 3b 22 00 00       	call   c01076de <get_pte>
c01054a3:	83 c4 10             	add    $0x10,%esp
c01054a6:	89 45 e8             	mov    %eax,-0x18(%ebp)
          assert((*ptep & PTE_P) != 0);
c01054a9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01054ac:	8b 00                	mov    (%eax),%eax
c01054ae:	83 e0 01             	and    $0x1,%eax
c01054b1:	85 c0                	test   %eax,%eax
c01054b3:	75 16                	jne    c01054cb <swap_out+0x92>
c01054b5:	68 c1 dd 10 c0       	push   $0xc010ddc1
c01054ba:	68 d6 dd 10 c0       	push   $0xc010ddd6
c01054bf:	6a 67                	push   $0x67
c01054c1:	68 70 dd 10 c0       	push   $0xc010dd70
c01054c6:	e8 32 af ff ff       	call   c01003fd <__panic>

          if (swapfs_write( (page->pra_vaddr/PGSIZE+1)<<8, page) != 0) {
c01054cb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01054ce:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01054d1:	8b 52 1c             	mov    0x1c(%edx),%edx
c01054d4:	c1 ea 0c             	shr    $0xc,%edx
c01054d7:	83 c2 01             	add    $0x1,%edx
c01054da:	c1 e2 08             	shl    $0x8,%edx
c01054dd:	83 ec 08             	sub    $0x8,%esp
c01054e0:	50                   	push   %eax
c01054e1:	52                   	push   %edx
c01054e2:	e8 05 44 00 00       	call   c01098ec <swapfs_write>
c01054e7:	83 c4 10             	add    $0x10,%esp
c01054ea:	85 c0                	test   %eax,%eax
c01054ec:	74 2b                	je     c0105519 <swap_out+0xe0>
                    cprintf("SWAP: failed to save\n");
c01054ee:	83 ec 0c             	sub    $0xc,%esp
c01054f1:	68 eb dd 10 c0       	push   $0xc010ddeb
c01054f6:	e8 9c ad ff ff       	call   c0100297 <cprintf>
c01054fb:	83 c4 10             	add    $0x10,%esp
                    sm->map_swappable(mm, v, page, 0);
c01054fe:	a1 74 4f 1c c0       	mov    0xc01c4f74,%eax
c0105503:	8b 40 10             	mov    0x10(%eax),%eax
c0105506:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0105509:	6a 00                	push   $0x0
c010550b:	52                   	push   %edx
c010550c:	ff 75 ec             	pushl  -0x14(%ebp)
c010550f:	ff 75 08             	pushl  0x8(%ebp)
c0105512:	ff d0                	call   *%eax
c0105514:	83 c4 10             	add    $0x10,%esp
c0105517:	eb 5c                	jmp    c0105575 <swap_out+0x13c>
                    continue;
          }
          else {
                    cprintf("swap_out: i %d, store page in vaddr 0x%x to disk swap entry %d\n", i, v, page->pra_vaddr/PGSIZE+1);
c0105519:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010551c:	8b 40 1c             	mov    0x1c(%eax),%eax
c010551f:	c1 e8 0c             	shr    $0xc,%eax
c0105522:	83 c0 01             	add    $0x1,%eax
c0105525:	50                   	push   %eax
c0105526:	ff 75 ec             	pushl  -0x14(%ebp)
c0105529:	ff 75 f4             	pushl  -0xc(%ebp)
c010552c:	68 04 de 10 c0       	push   $0xc010de04
c0105531:	e8 61 ad ff ff       	call   c0100297 <cprintf>
c0105536:	83 c4 10             	add    $0x10,%esp
                    *ptep = (page->pra_vaddr/PGSIZE+1)<<8;
c0105539:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010553c:	8b 40 1c             	mov    0x1c(%eax),%eax
c010553f:	c1 e8 0c             	shr    $0xc,%eax
c0105542:	83 c0 01             	add    $0x1,%eax
c0105545:	c1 e0 08             	shl    $0x8,%eax
c0105548:	89 c2                	mov    %eax,%edx
c010554a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010554d:	89 10                	mov    %edx,(%eax)
                    free_page(page);
c010554f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105552:	83 ec 08             	sub    $0x8,%esp
c0105555:	6a 01                	push   $0x1
c0105557:	50                   	push   %eax
c0105558:	e8 81 1b 00 00       	call   c01070de <free_pages>
c010555d:	83 c4 10             	add    $0x10,%esp
          }
          
          tlb_invalidate(mm->pgdir, v);
c0105560:	8b 45 08             	mov    0x8(%ebp),%eax
c0105563:	8b 40 0c             	mov    0xc(%eax),%eax
c0105566:	83 ec 08             	sub    $0x8,%esp
c0105569:	ff 75 ec             	pushl  -0x14(%ebp)
c010556c:	50                   	push   %eax
c010556d:	e8 06 28 00 00       	call   c0107d78 <tlb_invalidate>
c0105572:	83 c4 10             	add    $0x10,%esp

int
swap_out(struct mm_struct *mm, int n, int in_tick)
{
     int i;
     for (i = 0; i != n; ++ i)
c0105575:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0105579:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010557c:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010557f:	0f 85 c6 fe ff ff    	jne    c010544b <swap_out+0x12>
                    free_page(page);
          }
          
          tlb_invalidate(mm->pgdir, v);
     }
     return i;
c0105585:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0105588:	c9                   	leave  
c0105589:	c3                   	ret    

c010558a <swap_in>:

int
swap_in(struct mm_struct *mm, uintptr_t addr, struct Page **ptr_result)
{
c010558a:	55                   	push   %ebp
c010558b:	89 e5                	mov    %esp,%ebp
c010558d:	83 ec 18             	sub    $0x18,%esp
     struct Page *result = alloc_page();
c0105590:	83 ec 0c             	sub    $0xc,%esp
c0105593:	6a 01                	push   $0x1
c0105595:	e8 d8 1a 00 00       	call   c0107072 <alloc_pages>
c010559a:	83 c4 10             	add    $0x10,%esp
c010559d:	89 45 f4             	mov    %eax,-0xc(%ebp)
     assert(result!=NULL);
c01055a0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01055a4:	75 16                	jne    c01055bc <swap_in+0x32>
c01055a6:	68 44 de 10 c0       	push   $0xc010de44
c01055ab:	68 d6 dd 10 c0       	push   $0xc010ddd6
c01055b0:	6a 7d                	push   $0x7d
c01055b2:	68 70 dd 10 c0       	push   $0xc010dd70
c01055b7:	e8 41 ae ff ff       	call   c01003fd <__panic>

     pte_t *ptep = get_pte(mm->pgdir, addr, 0);
c01055bc:	8b 45 08             	mov    0x8(%ebp),%eax
c01055bf:	8b 40 0c             	mov    0xc(%eax),%eax
c01055c2:	83 ec 04             	sub    $0x4,%esp
c01055c5:	6a 00                	push   $0x0
c01055c7:	ff 75 0c             	pushl  0xc(%ebp)
c01055ca:	50                   	push   %eax
c01055cb:	e8 0e 21 00 00       	call   c01076de <get_pte>
c01055d0:	83 c4 10             	add    $0x10,%esp
c01055d3:	89 45 f0             	mov    %eax,-0x10(%ebp)
     // cprintf("SWAP: load ptep %x swap entry %d to vaddr 0x%08x, page %x, No %d\n", ptep, (*ptep)>>8, addr, result, (result-pages));
    
     int r;
     if ((r = swapfs_read((*ptep), result)) != 0)
c01055d6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01055d9:	8b 00                	mov    (%eax),%eax
c01055db:	83 ec 08             	sub    $0x8,%esp
c01055de:	ff 75 f4             	pushl  -0xc(%ebp)
c01055e1:	50                   	push   %eax
c01055e2:	e8 ac 42 00 00       	call   c0109893 <swapfs_read>
c01055e7:	83 c4 10             	add    $0x10,%esp
c01055ea:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01055ed:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01055f1:	74 1f                	je     c0105612 <swap_in+0x88>
     {
        assert(r!=0);
c01055f3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01055f7:	75 19                	jne    c0105612 <swap_in+0x88>
c01055f9:	68 51 de 10 c0       	push   $0xc010de51
c01055fe:	68 d6 dd 10 c0       	push   $0xc010ddd6
c0105603:	68 85 00 00 00       	push   $0x85
c0105608:	68 70 dd 10 c0       	push   $0xc010dd70
c010560d:	e8 eb ad ff ff       	call   c01003fd <__panic>
     }
     cprintf("swap_in: load disk swap entry %d with swap_page in vadr 0x%x\n", (*ptep)>>8, addr);
c0105612:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105615:	8b 00                	mov    (%eax),%eax
c0105617:	c1 e8 08             	shr    $0x8,%eax
c010561a:	83 ec 04             	sub    $0x4,%esp
c010561d:	ff 75 0c             	pushl  0xc(%ebp)
c0105620:	50                   	push   %eax
c0105621:	68 58 de 10 c0       	push   $0xc010de58
c0105626:	e8 6c ac ff ff       	call   c0100297 <cprintf>
c010562b:	83 c4 10             	add    $0x10,%esp
     *ptr_result=result;
c010562e:	8b 45 10             	mov    0x10(%ebp),%eax
c0105631:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0105634:	89 10                	mov    %edx,(%eax)
     return 0;
c0105636:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010563b:	c9                   	leave  
c010563c:	c3                   	ret    

c010563d <check_content_set>:



static inline void
check_content_set(void)
{
c010563d:	55                   	push   %ebp
c010563e:	89 e5                	mov    %esp,%ebp
c0105640:	83 ec 08             	sub    $0x8,%esp
     *(unsigned char *)0x1000 = 0x0a;
c0105643:	b8 00 10 00 00       	mov    $0x1000,%eax
c0105648:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c010564b:	a1 64 4f 1c c0       	mov    0xc01c4f64,%eax
c0105650:	83 f8 01             	cmp    $0x1,%eax
c0105653:	74 19                	je     c010566e <check_content_set+0x31>
c0105655:	68 96 de 10 c0       	push   $0xc010de96
c010565a:	68 d6 dd 10 c0       	push   $0xc010ddd6
c010565f:	68 92 00 00 00       	push   $0x92
c0105664:	68 70 dd 10 c0       	push   $0xc010dd70
c0105669:	e8 8f ad ff ff       	call   c01003fd <__panic>
     *(unsigned char *)0x1010 = 0x0a;
c010566e:	b8 10 10 00 00       	mov    $0x1010,%eax
c0105673:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c0105676:	a1 64 4f 1c c0       	mov    0xc01c4f64,%eax
c010567b:	83 f8 01             	cmp    $0x1,%eax
c010567e:	74 19                	je     c0105699 <check_content_set+0x5c>
c0105680:	68 96 de 10 c0       	push   $0xc010de96
c0105685:	68 d6 dd 10 c0       	push   $0xc010ddd6
c010568a:	68 94 00 00 00       	push   $0x94
c010568f:	68 70 dd 10 c0       	push   $0xc010dd70
c0105694:	e8 64 ad ff ff       	call   c01003fd <__panic>
     *(unsigned char *)0x2000 = 0x0b;
c0105699:	b8 00 20 00 00       	mov    $0x2000,%eax
c010569e:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c01056a1:	a1 64 4f 1c c0       	mov    0xc01c4f64,%eax
c01056a6:	83 f8 02             	cmp    $0x2,%eax
c01056a9:	74 19                	je     c01056c4 <check_content_set+0x87>
c01056ab:	68 a5 de 10 c0       	push   $0xc010dea5
c01056b0:	68 d6 dd 10 c0       	push   $0xc010ddd6
c01056b5:	68 96 00 00 00       	push   $0x96
c01056ba:	68 70 dd 10 c0       	push   $0xc010dd70
c01056bf:	e8 39 ad ff ff       	call   c01003fd <__panic>
     *(unsigned char *)0x2010 = 0x0b;
c01056c4:	b8 10 20 00 00       	mov    $0x2010,%eax
c01056c9:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c01056cc:	a1 64 4f 1c c0       	mov    0xc01c4f64,%eax
c01056d1:	83 f8 02             	cmp    $0x2,%eax
c01056d4:	74 19                	je     c01056ef <check_content_set+0xb2>
c01056d6:	68 a5 de 10 c0       	push   $0xc010dea5
c01056db:	68 d6 dd 10 c0       	push   $0xc010ddd6
c01056e0:	68 98 00 00 00       	push   $0x98
c01056e5:	68 70 dd 10 c0       	push   $0xc010dd70
c01056ea:	e8 0e ad ff ff       	call   c01003fd <__panic>
     *(unsigned char *)0x3000 = 0x0c;
c01056ef:	b8 00 30 00 00       	mov    $0x3000,%eax
c01056f4:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c01056f7:	a1 64 4f 1c c0       	mov    0xc01c4f64,%eax
c01056fc:	83 f8 03             	cmp    $0x3,%eax
c01056ff:	74 19                	je     c010571a <check_content_set+0xdd>
c0105701:	68 b4 de 10 c0       	push   $0xc010deb4
c0105706:	68 d6 dd 10 c0       	push   $0xc010ddd6
c010570b:	68 9a 00 00 00       	push   $0x9a
c0105710:	68 70 dd 10 c0       	push   $0xc010dd70
c0105715:	e8 e3 ac ff ff       	call   c01003fd <__panic>
     *(unsigned char *)0x3010 = 0x0c;
c010571a:	b8 10 30 00 00       	mov    $0x3010,%eax
c010571f:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c0105722:	a1 64 4f 1c c0       	mov    0xc01c4f64,%eax
c0105727:	83 f8 03             	cmp    $0x3,%eax
c010572a:	74 19                	je     c0105745 <check_content_set+0x108>
c010572c:	68 b4 de 10 c0       	push   $0xc010deb4
c0105731:	68 d6 dd 10 c0       	push   $0xc010ddd6
c0105736:	68 9c 00 00 00       	push   $0x9c
c010573b:	68 70 dd 10 c0       	push   $0xc010dd70
c0105740:	e8 b8 ac ff ff       	call   c01003fd <__panic>
     *(unsigned char *)0x4000 = 0x0d;
c0105745:	b8 00 40 00 00       	mov    $0x4000,%eax
c010574a:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c010574d:	a1 64 4f 1c c0       	mov    0xc01c4f64,%eax
c0105752:	83 f8 04             	cmp    $0x4,%eax
c0105755:	74 19                	je     c0105770 <check_content_set+0x133>
c0105757:	68 c3 de 10 c0       	push   $0xc010dec3
c010575c:	68 d6 dd 10 c0       	push   $0xc010ddd6
c0105761:	68 9e 00 00 00       	push   $0x9e
c0105766:	68 70 dd 10 c0       	push   $0xc010dd70
c010576b:	e8 8d ac ff ff       	call   c01003fd <__panic>
     *(unsigned char *)0x4010 = 0x0d;
c0105770:	b8 10 40 00 00       	mov    $0x4010,%eax
c0105775:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c0105778:	a1 64 4f 1c c0       	mov    0xc01c4f64,%eax
c010577d:	83 f8 04             	cmp    $0x4,%eax
c0105780:	74 19                	je     c010579b <check_content_set+0x15e>
c0105782:	68 c3 de 10 c0       	push   $0xc010dec3
c0105787:	68 d6 dd 10 c0       	push   $0xc010ddd6
c010578c:	68 a0 00 00 00       	push   $0xa0
c0105791:	68 70 dd 10 c0       	push   $0xc010dd70
c0105796:	e8 62 ac ff ff       	call   c01003fd <__panic>
}
c010579b:	90                   	nop
c010579c:	c9                   	leave  
c010579d:	c3                   	ret    

c010579e <check_content_access>:

static inline int
check_content_access(void)
{
c010579e:	55                   	push   %ebp
c010579f:	89 e5                	mov    %esp,%ebp
c01057a1:	83 ec 18             	sub    $0x18,%esp
    int ret = sm->check_swap();
c01057a4:	a1 74 4f 1c c0       	mov    0xc01c4f74,%eax
c01057a9:	8b 40 1c             	mov    0x1c(%eax),%eax
c01057ac:	ff d0                	call   *%eax
c01057ae:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return ret;
c01057b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01057b4:	c9                   	leave  
c01057b5:	c3                   	ret    

c01057b6 <check_swap>:
#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
check_swap(void)
{
c01057b6:	55                   	push   %ebp
c01057b7:	89 e5                	mov    %esp,%ebp
c01057b9:	83 ec 68             	sub    $0x68,%esp
    //backup mem env
     int ret, count = 0, total = 0, i;
c01057bc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01057c3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
     list_entry_t *le = &free_list;
c01057ca:	c7 45 e8 e4 71 1c c0 	movl   $0xc01c71e4,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c01057d1:	eb 60                	jmp    c0105833 <check_swap+0x7d>
        struct Page *p = le2page(le, page_link);
c01057d3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01057d6:	83 e8 0c             	sub    $0xc,%eax
c01057d9:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(PageProperty(p));
c01057dc:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01057df:	83 c0 04             	add    $0x4,%eax
c01057e2:	c7 45 b0 01 00 00 00 	movl   $0x1,-0x50(%ebp)
c01057e9:	89 45 ac             	mov    %eax,-0x54(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01057ec:	8b 45 ac             	mov    -0x54(%ebp),%eax
c01057ef:	8b 55 b0             	mov    -0x50(%ebp),%edx
c01057f2:	0f a3 10             	bt     %edx,(%eax)
c01057f5:	19 c0                	sbb    %eax,%eax
c01057f7:	89 45 a8             	mov    %eax,-0x58(%ebp)
    return oldbit != 0;
c01057fa:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
c01057fe:	0f 95 c0             	setne  %al
c0105801:	0f b6 c0             	movzbl %al,%eax
c0105804:	85 c0                	test   %eax,%eax
c0105806:	75 19                	jne    c0105821 <check_swap+0x6b>
c0105808:	68 d2 de 10 c0       	push   $0xc010ded2
c010580d:	68 d6 dd 10 c0       	push   $0xc010ddd6
c0105812:	68 bb 00 00 00       	push   $0xbb
c0105817:	68 70 dd 10 c0       	push   $0xc010dd70
c010581c:	e8 dc ab ff ff       	call   c01003fd <__panic>
        count ++, total += p->property;
c0105821:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0105825:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105828:	8b 50 08             	mov    0x8(%eax),%edx
c010582b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010582e:	01 d0                	add    %edx,%eax
c0105830:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105833:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105836:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0105839:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010583c:	8b 40 04             	mov    0x4(%eax),%eax
check_swap(void)
{
    //backup mem env
     int ret, count = 0, total = 0, i;
     list_entry_t *le = &free_list;
     while ((le = list_next(le)) != &free_list) {
c010583f:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0105842:	81 7d e8 e4 71 1c c0 	cmpl   $0xc01c71e4,-0x18(%ebp)
c0105849:	75 88                	jne    c01057d3 <check_swap+0x1d>
        struct Page *p = le2page(le, page_link);
        assert(PageProperty(p));
        count ++, total += p->property;
     }
     assert(total == nr_free_pages());
c010584b:	e8 c3 18 00 00       	call   c0107113 <nr_free_pages>
c0105850:	89 c2                	mov    %eax,%edx
c0105852:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105855:	39 c2                	cmp    %eax,%edx
c0105857:	74 19                	je     c0105872 <check_swap+0xbc>
c0105859:	68 e2 de 10 c0       	push   $0xc010dee2
c010585e:	68 d6 dd 10 c0       	push   $0xc010ddd6
c0105863:	68 be 00 00 00       	push   $0xbe
c0105868:	68 70 dd 10 c0       	push   $0xc010dd70
c010586d:	e8 8b ab ff ff       	call   c01003fd <__panic>
     cprintf("BEGIN check_swap: count %d, total %d\n",count,total);
c0105872:	83 ec 04             	sub    $0x4,%esp
c0105875:	ff 75 f0             	pushl  -0x10(%ebp)
c0105878:	ff 75 f4             	pushl  -0xc(%ebp)
c010587b:	68 fc de 10 c0       	push   $0xc010defc
c0105880:	e8 12 aa ff ff       	call   c0100297 <cprintf>
c0105885:	83 c4 10             	add    $0x10,%esp
     
     //now we set the phy pages env     
     struct mm_struct *mm = mm_create();
c0105888:	e8 93 dd ff ff       	call   c0103620 <mm_create>
c010588d:	89 45 d8             	mov    %eax,-0x28(%ebp)
     assert(mm != NULL);
c0105890:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c0105894:	75 19                	jne    c01058af <check_swap+0xf9>
c0105896:	68 22 df 10 c0       	push   $0xc010df22
c010589b:	68 d6 dd 10 c0       	push   $0xc010ddd6
c01058a0:	68 c3 00 00 00       	push   $0xc3
c01058a5:	68 70 dd 10 c0       	push   $0xc010dd70
c01058aa:	e8 4e ab ff ff       	call   c01003fd <__panic>

     extern struct mm_struct *check_mm_struct;
     assert(check_mm_struct == NULL);
c01058af:	a1 10 71 1c c0       	mov    0xc01c7110,%eax
c01058b4:	85 c0                	test   %eax,%eax
c01058b6:	74 19                	je     c01058d1 <check_swap+0x11b>
c01058b8:	68 2d df 10 c0       	push   $0xc010df2d
c01058bd:	68 d6 dd 10 c0       	push   $0xc010ddd6
c01058c2:	68 c6 00 00 00       	push   $0xc6
c01058c7:	68 70 dd 10 c0       	push   $0xc010dd70
c01058cc:	e8 2c ab ff ff       	call   c01003fd <__panic>

     check_mm_struct = mm;
c01058d1:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01058d4:	a3 10 71 1c c0       	mov    %eax,0xc01c7110

     pde_t *pgdir = mm->pgdir = boot_pgdir;
c01058d9:	8b 15 20 1a 13 c0    	mov    0xc0131a20,%edx
c01058df:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01058e2:	89 50 0c             	mov    %edx,0xc(%eax)
c01058e5:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01058e8:	8b 40 0c             	mov    0xc(%eax),%eax
c01058eb:	89 45 d4             	mov    %eax,-0x2c(%ebp)
     assert(pgdir[0] == 0);
c01058ee:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01058f1:	8b 00                	mov    (%eax),%eax
c01058f3:	85 c0                	test   %eax,%eax
c01058f5:	74 19                	je     c0105910 <check_swap+0x15a>
c01058f7:	68 45 df 10 c0       	push   $0xc010df45
c01058fc:	68 d6 dd 10 c0       	push   $0xc010ddd6
c0105901:	68 cb 00 00 00       	push   $0xcb
c0105906:	68 70 dd 10 c0       	push   $0xc010dd70
c010590b:	e8 ed aa ff ff       	call   c01003fd <__panic>

     struct vma_struct *vma = vma_create(BEING_CHECK_VALID_VADDR, CHECK_VALID_VADDR, VM_WRITE | VM_READ);
c0105910:	83 ec 04             	sub    $0x4,%esp
c0105913:	6a 03                	push   $0x3
c0105915:	68 00 60 00 00       	push   $0x6000
c010591a:	68 00 10 00 00       	push   $0x1000
c010591f:	e8 9c dd ff ff       	call   c01036c0 <vma_create>
c0105924:	83 c4 10             	add    $0x10,%esp
c0105927:	89 45 d0             	mov    %eax,-0x30(%ebp)
     assert(vma != NULL);
c010592a:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c010592e:	75 19                	jne    c0105949 <check_swap+0x193>
c0105930:	68 53 df 10 c0       	push   $0xc010df53
c0105935:	68 d6 dd 10 c0       	push   $0xc010ddd6
c010593a:	68 ce 00 00 00       	push   $0xce
c010593f:	68 70 dd 10 c0       	push   $0xc010dd70
c0105944:	e8 b4 aa ff ff       	call   c01003fd <__panic>

     insert_vma_struct(mm, vma);
c0105949:	83 ec 08             	sub    $0x8,%esp
c010594c:	ff 75 d0             	pushl  -0x30(%ebp)
c010594f:	ff 75 d8             	pushl  -0x28(%ebp)
c0105952:	e8 d1 de ff ff       	call   c0103828 <insert_vma_struct>
c0105957:	83 c4 10             	add    $0x10,%esp

     //setup the temp Page Table vaddr 0~4MB
     cprintf("setup Page Table for vaddr 0X1000, so alloc a page\n");
c010595a:	83 ec 0c             	sub    $0xc,%esp
c010595d:	68 60 df 10 c0       	push   $0xc010df60
c0105962:	e8 30 a9 ff ff       	call   c0100297 <cprintf>
c0105967:	83 c4 10             	add    $0x10,%esp
     pte_t *temp_ptep=NULL;
c010596a:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
c0105971:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0105974:	8b 40 0c             	mov    0xc(%eax),%eax
c0105977:	83 ec 04             	sub    $0x4,%esp
c010597a:	6a 01                	push   $0x1
c010597c:	68 00 10 00 00       	push   $0x1000
c0105981:	50                   	push   %eax
c0105982:	e8 57 1d 00 00       	call   c01076de <get_pte>
c0105987:	83 c4 10             	add    $0x10,%esp
c010598a:	89 45 cc             	mov    %eax,-0x34(%ebp)
     assert(temp_ptep!= NULL);
c010598d:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0105991:	75 19                	jne    c01059ac <check_swap+0x1f6>
c0105993:	68 94 df 10 c0       	push   $0xc010df94
c0105998:	68 d6 dd 10 c0       	push   $0xc010ddd6
c010599d:	68 d6 00 00 00       	push   $0xd6
c01059a2:	68 70 dd 10 c0       	push   $0xc010dd70
c01059a7:	e8 51 aa ff ff       	call   c01003fd <__panic>
     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
c01059ac:	83 ec 0c             	sub    $0xc,%esp
c01059af:	68 a8 df 10 c0       	push   $0xc010dfa8
c01059b4:	e8 de a8 ff ff       	call   c0100297 <cprintf>
c01059b9:	83 c4 10             	add    $0x10,%esp
     
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01059bc:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01059c3:	e9 90 00 00 00       	jmp    c0105a58 <check_swap+0x2a2>
          check_rp[i] = alloc_page();
c01059c8:	83 ec 0c             	sub    $0xc,%esp
c01059cb:	6a 01                	push   $0x1
c01059cd:	e8 a0 16 00 00       	call   c0107072 <alloc_pages>
c01059d2:	83 c4 10             	add    $0x10,%esp
c01059d5:	89 c2                	mov    %eax,%edx
c01059d7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01059da:	89 14 85 20 71 1c c0 	mov    %edx,-0x3fe38ee0(,%eax,4)
          assert(check_rp[i] != NULL );
c01059e1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01059e4:	8b 04 85 20 71 1c c0 	mov    -0x3fe38ee0(,%eax,4),%eax
c01059eb:	85 c0                	test   %eax,%eax
c01059ed:	75 19                	jne    c0105a08 <check_swap+0x252>
c01059ef:	68 cc df 10 c0       	push   $0xc010dfcc
c01059f4:	68 d6 dd 10 c0       	push   $0xc010ddd6
c01059f9:	68 db 00 00 00       	push   $0xdb
c01059fe:	68 70 dd 10 c0       	push   $0xc010dd70
c0105a03:	e8 f5 a9 ff ff       	call   c01003fd <__panic>
          assert(!PageProperty(check_rp[i]));
c0105a08:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105a0b:	8b 04 85 20 71 1c c0 	mov    -0x3fe38ee0(,%eax,4),%eax
c0105a12:	83 c0 04             	add    $0x4,%eax
c0105a15:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
c0105a1c:	89 45 a4             	mov    %eax,-0x5c(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0105a1f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0105a22:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0105a25:	0f a3 10             	bt     %edx,(%eax)
c0105a28:	19 c0                	sbb    %eax,%eax
c0105a2a:	89 45 a0             	mov    %eax,-0x60(%ebp)
    return oldbit != 0;
c0105a2d:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
c0105a31:	0f 95 c0             	setne  %al
c0105a34:	0f b6 c0             	movzbl %al,%eax
c0105a37:	85 c0                	test   %eax,%eax
c0105a39:	74 19                	je     c0105a54 <check_swap+0x29e>
c0105a3b:	68 e0 df 10 c0       	push   $0xc010dfe0
c0105a40:	68 d6 dd 10 c0       	push   $0xc010ddd6
c0105a45:	68 dc 00 00 00       	push   $0xdc
c0105a4a:	68 70 dd 10 c0       	push   $0xc010dd70
c0105a4f:	e8 a9 a9 ff ff       	call   c01003fd <__panic>
     pte_t *temp_ptep=NULL;
     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
     assert(temp_ptep!= NULL);
     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
     
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0105a54:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0105a58:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0105a5c:	0f 8e 66 ff ff ff    	jle    c01059c8 <check_swap+0x212>
          check_rp[i] = alloc_page();
          assert(check_rp[i] != NULL );
          assert(!PageProperty(check_rp[i]));
     }
     list_entry_t free_list_store = free_list;
c0105a62:	a1 e4 71 1c c0       	mov    0xc01c71e4,%eax
c0105a67:	8b 15 e8 71 1c c0    	mov    0xc01c71e8,%edx
c0105a6d:	89 45 98             	mov    %eax,-0x68(%ebp)
c0105a70:	89 55 9c             	mov    %edx,-0x64(%ebp)
c0105a73:	c7 45 c0 e4 71 1c c0 	movl   $0xc01c71e4,-0x40(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0105a7a:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0105a7d:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0105a80:	89 50 04             	mov    %edx,0x4(%eax)
c0105a83:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0105a86:	8b 50 04             	mov    0x4(%eax),%edx
c0105a89:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0105a8c:	89 10                	mov    %edx,(%eax)
c0105a8e:	c7 45 c8 e4 71 1c c0 	movl   $0xc01c71e4,-0x38(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0105a95:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0105a98:	8b 40 04             	mov    0x4(%eax),%eax
c0105a9b:	39 45 c8             	cmp    %eax,-0x38(%ebp)
c0105a9e:	0f 94 c0             	sete   %al
c0105aa1:	0f b6 c0             	movzbl %al,%eax
     list_init(&free_list);
     assert(list_empty(&free_list));
c0105aa4:	85 c0                	test   %eax,%eax
c0105aa6:	75 19                	jne    c0105ac1 <check_swap+0x30b>
c0105aa8:	68 fb df 10 c0       	push   $0xc010dffb
c0105aad:	68 d6 dd 10 c0       	push   $0xc010ddd6
c0105ab2:	68 e0 00 00 00       	push   $0xe0
c0105ab7:	68 70 dd 10 c0       	push   $0xc010dd70
c0105abc:	e8 3c a9 ff ff       	call   c01003fd <__panic>
     
     //assert(alloc_page() == NULL);
     
     unsigned int nr_free_store = nr_free;
c0105ac1:	a1 ec 71 1c c0       	mov    0xc01c71ec,%eax
c0105ac6:	89 45 bc             	mov    %eax,-0x44(%ebp)
     nr_free = 0;
c0105ac9:	c7 05 ec 71 1c c0 00 	movl   $0x0,0xc01c71ec
c0105ad0:	00 00 00 
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0105ad3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0105ada:	eb 1c                	jmp    c0105af8 <check_swap+0x342>
        free_pages(check_rp[i],1);
c0105adc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105adf:	8b 04 85 20 71 1c c0 	mov    -0x3fe38ee0(,%eax,4),%eax
c0105ae6:	83 ec 08             	sub    $0x8,%esp
c0105ae9:	6a 01                	push   $0x1
c0105aeb:	50                   	push   %eax
c0105aec:	e8 ed 15 00 00       	call   c01070de <free_pages>
c0105af1:	83 c4 10             	add    $0x10,%esp
     
     //assert(alloc_page() == NULL);
     
     unsigned int nr_free_store = nr_free;
     nr_free = 0;
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0105af4:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0105af8:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0105afc:	7e de                	jle    c0105adc <check_swap+0x326>
        free_pages(check_rp[i],1);
     }
     assert(nr_free==CHECK_VALID_PHY_PAGE_NUM);
c0105afe:	a1 ec 71 1c c0       	mov    0xc01c71ec,%eax
c0105b03:	83 f8 04             	cmp    $0x4,%eax
c0105b06:	74 19                	je     c0105b21 <check_swap+0x36b>
c0105b08:	68 14 e0 10 c0       	push   $0xc010e014
c0105b0d:	68 d6 dd 10 c0       	push   $0xc010ddd6
c0105b12:	68 e9 00 00 00       	push   $0xe9
c0105b17:	68 70 dd 10 c0       	push   $0xc010dd70
c0105b1c:	e8 dc a8 ff ff       	call   c01003fd <__panic>
     
     cprintf("set up init env for check_swap begin!\n");
c0105b21:	83 ec 0c             	sub    $0xc,%esp
c0105b24:	68 38 e0 10 c0       	push   $0xc010e038
c0105b29:	e8 69 a7 ff ff       	call   c0100297 <cprintf>
c0105b2e:	83 c4 10             	add    $0x10,%esp
     //setup initial vir_page<->phy_page environment for page relpacement algorithm 

     
     pgfault_num=0;
c0105b31:	c7 05 64 4f 1c c0 00 	movl   $0x0,0xc01c4f64
c0105b38:	00 00 00 
     
     check_content_set();
c0105b3b:	e8 fd fa ff ff       	call   c010563d <check_content_set>
     assert( nr_free == 0);         
c0105b40:	a1 ec 71 1c c0       	mov    0xc01c71ec,%eax
c0105b45:	85 c0                	test   %eax,%eax
c0105b47:	74 19                	je     c0105b62 <check_swap+0x3ac>
c0105b49:	68 5f e0 10 c0       	push   $0xc010e05f
c0105b4e:	68 d6 dd 10 c0       	push   $0xc010ddd6
c0105b53:	68 f2 00 00 00       	push   $0xf2
c0105b58:	68 70 dd 10 c0       	push   $0xc010dd70
c0105b5d:	e8 9b a8 ff ff       	call   c01003fd <__panic>
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c0105b62:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0105b69:	eb 26                	jmp    c0105b91 <check_swap+0x3db>
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
c0105b6b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105b6e:	c7 04 85 40 71 1c c0 	movl   $0xffffffff,-0x3fe38ec0(,%eax,4)
c0105b75:	ff ff ff ff 
c0105b79:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105b7c:	8b 14 85 40 71 1c c0 	mov    -0x3fe38ec0(,%eax,4),%edx
c0105b83:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105b86:	89 14 85 80 71 1c c0 	mov    %edx,-0x3fe38e80(,%eax,4)
     
     pgfault_num=0;
     
     check_content_set();
     assert( nr_free == 0);         
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c0105b8d:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0105b91:	83 7d ec 09          	cmpl   $0x9,-0x14(%ebp)
c0105b95:	7e d4                	jle    c0105b6b <check_swap+0x3b5>
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
     
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0105b97:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0105b9e:	e9 cc 00 00 00       	jmp    c0105c6f <check_swap+0x4b9>
         check_ptep[i]=0;
c0105ba3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105ba6:	c7 04 85 d4 71 1c c0 	movl   $0x0,-0x3fe38e2c(,%eax,4)
c0105bad:	00 00 00 00 
         check_ptep[i] = get_pte(pgdir, (i+1)*0x1000, 0);
c0105bb1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105bb4:	83 c0 01             	add    $0x1,%eax
c0105bb7:	c1 e0 0c             	shl    $0xc,%eax
c0105bba:	83 ec 04             	sub    $0x4,%esp
c0105bbd:	6a 00                	push   $0x0
c0105bbf:	50                   	push   %eax
c0105bc0:	ff 75 d4             	pushl  -0x2c(%ebp)
c0105bc3:	e8 16 1b 00 00       	call   c01076de <get_pte>
c0105bc8:	83 c4 10             	add    $0x10,%esp
c0105bcb:	89 c2                	mov    %eax,%edx
c0105bcd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105bd0:	89 14 85 d4 71 1c c0 	mov    %edx,-0x3fe38e2c(,%eax,4)
         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
         assert(check_ptep[i] != NULL);
c0105bd7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105bda:	8b 04 85 d4 71 1c c0 	mov    -0x3fe38e2c(,%eax,4),%eax
c0105be1:	85 c0                	test   %eax,%eax
c0105be3:	75 19                	jne    c0105bfe <check_swap+0x448>
c0105be5:	68 6c e0 10 c0       	push   $0xc010e06c
c0105bea:	68 d6 dd 10 c0       	push   $0xc010ddd6
c0105bef:	68 fa 00 00 00       	push   $0xfa
c0105bf4:	68 70 dd 10 c0       	push   $0xc010dd70
c0105bf9:	e8 ff a7 ff ff       	call   c01003fd <__panic>
         assert(pte2page(*check_ptep[i]) == check_rp[i]);
c0105bfe:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105c01:	8b 04 85 d4 71 1c c0 	mov    -0x3fe38e2c(,%eax,4),%eax
c0105c08:	8b 00                	mov    (%eax),%eax
c0105c0a:	83 ec 0c             	sub    $0xc,%esp
c0105c0d:	50                   	push   %eax
c0105c0e:	e8 d8 f6 ff ff       	call   c01052eb <pte2page>
c0105c13:	83 c4 10             	add    $0x10,%esp
c0105c16:	89 c2                	mov    %eax,%edx
c0105c18:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105c1b:	8b 04 85 20 71 1c c0 	mov    -0x3fe38ee0(,%eax,4),%eax
c0105c22:	39 c2                	cmp    %eax,%edx
c0105c24:	74 19                	je     c0105c3f <check_swap+0x489>
c0105c26:	68 84 e0 10 c0       	push   $0xc010e084
c0105c2b:	68 d6 dd 10 c0       	push   $0xc010ddd6
c0105c30:	68 fb 00 00 00       	push   $0xfb
c0105c35:	68 70 dd 10 c0       	push   $0xc010dd70
c0105c3a:	e8 be a7 ff ff       	call   c01003fd <__panic>
         assert((*check_ptep[i] & PTE_P));          
c0105c3f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105c42:	8b 04 85 d4 71 1c c0 	mov    -0x3fe38e2c(,%eax,4),%eax
c0105c49:	8b 00                	mov    (%eax),%eax
c0105c4b:	83 e0 01             	and    $0x1,%eax
c0105c4e:	85 c0                	test   %eax,%eax
c0105c50:	75 19                	jne    c0105c6b <check_swap+0x4b5>
c0105c52:	68 ac e0 10 c0       	push   $0xc010e0ac
c0105c57:	68 d6 dd 10 c0       	push   $0xc010ddd6
c0105c5c:	68 fc 00 00 00       	push   $0xfc
c0105c61:	68 70 dd 10 c0       	push   $0xc010dd70
c0105c66:	e8 92 a7 ff ff       	call   c01003fd <__panic>
     check_content_set();
     assert( nr_free == 0);         
     for(i = 0; i<MAX_SEQ_NO ; i++) 
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
     
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0105c6b:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0105c6f:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0105c73:	0f 8e 2a ff ff ff    	jle    c0105ba3 <check_swap+0x3ed>
         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
         assert(check_ptep[i] != NULL);
         assert(pte2page(*check_ptep[i]) == check_rp[i]);
         assert((*check_ptep[i] & PTE_P));          
     }
     cprintf("set up init env for check_swap over!\n");
c0105c79:	83 ec 0c             	sub    $0xc,%esp
c0105c7c:	68 c8 e0 10 c0       	push   $0xc010e0c8
c0105c81:	e8 11 a6 ff ff       	call   c0100297 <cprintf>
c0105c86:	83 c4 10             	add    $0x10,%esp
     // now access the virt pages to test  page relpacement algorithm 
     ret=check_content_access();
c0105c89:	e8 10 fb ff ff       	call   c010579e <check_content_access>
c0105c8e:	89 45 b8             	mov    %eax,-0x48(%ebp)
     assert(ret==0);
c0105c91:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
c0105c95:	74 19                	je     c0105cb0 <check_swap+0x4fa>
c0105c97:	68 ee e0 10 c0       	push   $0xc010e0ee
c0105c9c:	68 d6 dd 10 c0       	push   $0xc010ddd6
c0105ca1:	68 01 01 00 00       	push   $0x101
c0105ca6:	68 70 dd 10 c0       	push   $0xc010dd70
c0105cab:	e8 4d a7 ff ff       	call   c01003fd <__panic>
     
     //restore kernel mem env
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0105cb0:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0105cb7:	eb 1c                	jmp    c0105cd5 <check_swap+0x51f>
         free_pages(check_rp[i],1);
c0105cb9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105cbc:	8b 04 85 20 71 1c c0 	mov    -0x3fe38ee0(,%eax,4),%eax
c0105cc3:	83 ec 08             	sub    $0x8,%esp
c0105cc6:	6a 01                	push   $0x1
c0105cc8:	50                   	push   %eax
c0105cc9:	e8 10 14 00 00       	call   c01070de <free_pages>
c0105cce:	83 c4 10             	add    $0x10,%esp
     // now access the virt pages to test  page relpacement algorithm 
     ret=check_content_access();
     assert(ret==0);
     
     //restore kernel mem env
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0105cd1:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0105cd5:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0105cd9:	7e de                	jle    c0105cb9 <check_swap+0x503>
         free_pages(check_rp[i],1);
     } 

     //free_page(pte2page(*temp_ptep));
    free_page(pde2page(pgdir[0]));
c0105cdb:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0105cde:	8b 00                	mov    (%eax),%eax
c0105ce0:	83 ec 0c             	sub    $0xc,%esp
c0105ce3:	50                   	push   %eax
c0105ce4:	e8 3c f6 ff ff       	call   c0105325 <pde2page>
c0105ce9:	83 c4 10             	add    $0x10,%esp
c0105cec:	83 ec 08             	sub    $0x8,%esp
c0105cef:	6a 01                	push   $0x1
c0105cf1:	50                   	push   %eax
c0105cf2:	e8 e7 13 00 00       	call   c01070de <free_pages>
c0105cf7:	83 c4 10             	add    $0x10,%esp
     pgdir[0] = 0;
c0105cfa:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0105cfd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
     mm->pgdir = NULL;
c0105d03:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0105d06:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
     mm_destroy(mm);
c0105d0d:	83 ec 0c             	sub    $0xc,%esp
c0105d10:	ff 75 d8             	pushl  -0x28(%ebp)
c0105d13:	e8 34 dc ff ff       	call   c010394c <mm_destroy>
c0105d18:	83 c4 10             	add    $0x10,%esp
     check_mm_struct = NULL;
c0105d1b:	c7 05 10 71 1c c0 00 	movl   $0x0,0xc01c7110
c0105d22:	00 00 00 
     
     nr_free = nr_free_store;
c0105d25:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0105d28:	a3 ec 71 1c c0       	mov    %eax,0xc01c71ec
     free_list = free_list_store;
c0105d2d:	8b 45 98             	mov    -0x68(%ebp),%eax
c0105d30:	8b 55 9c             	mov    -0x64(%ebp),%edx
c0105d33:	a3 e4 71 1c c0       	mov    %eax,0xc01c71e4
c0105d38:	89 15 e8 71 1c c0    	mov    %edx,0xc01c71e8

     
     le = &free_list;
c0105d3e:	c7 45 e8 e4 71 1c c0 	movl   $0xc01c71e4,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c0105d45:	eb 1d                	jmp    c0105d64 <check_swap+0x5ae>
         struct Page *p = le2page(le, page_link);
c0105d47:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105d4a:	83 e8 0c             	sub    $0xc,%eax
c0105d4d:	89 45 b4             	mov    %eax,-0x4c(%ebp)
         count --, total -= p->property;
c0105d50:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0105d54:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0105d57:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0105d5a:	8b 40 08             	mov    0x8(%eax),%eax
c0105d5d:	29 c2                	sub    %eax,%edx
c0105d5f:	89 d0                	mov    %edx,%eax
c0105d61:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105d64:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105d67:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0105d6a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0105d6d:	8b 40 04             	mov    0x4(%eax),%eax
     nr_free = nr_free_store;
     free_list = free_list_store;

     
     le = &free_list;
     while ((le = list_next(le)) != &free_list) {
c0105d70:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0105d73:	81 7d e8 e4 71 1c c0 	cmpl   $0xc01c71e4,-0x18(%ebp)
c0105d7a:	75 cb                	jne    c0105d47 <check_swap+0x591>
         struct Page *p = le2page(le, page_link);
         count --, total -= p->property;
     }
     cprintf("count is %d, total is %d\n",count,total);
c0105d7c:	83 ec 04             	sub    $0x4,%esp
c0105d7f:	ff 75 f0             	pushl  -0x10(%ebp)
c0105d82:	ff 75 f4             	pushl  -0xc(%ebp)
c0105d85:	68 f5 e0 10 c0       	push   $0xc010e0f5
c0105d8a:	e8 08 a5 ff ff       	call   c0100297 <cprintf>
c0105d8f:	83 c4 10             	add    $0x10,%esp
     //assert(count == 0);
     
     cprintf("check_swap() succeeded!\n");
c0105d92:	83 ec 0c             	sub    $0xc,%esp
c0105d95:	68 0f e1 10 c0       	push   $0xc010e10f
c0105d9a:	e8 f8 a4 ff ff       	call   c0100297 <cprintf>
c0105d9f:	83 c4 10             	add    $0x10,%esp
}
c0105da2:	90                   	nop
c0105da3:	c9                   	leave  
c0105da4:	c3                   	ret    

c0105da5 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0105da5:	55                   	push   %ebp
c0105da6:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0105da8:	8b 45 08             	mov    0x8(%ebp),%eax
c0105dab:	8b 15 f8 71 1c c0    	mov    0xc01c71f8,%edx
c0105db1:	29 d0                	sub    %edx,%eax
c0105db3:	c1 f8 05             	sar    $0x5,%eax
}
c0105db6:	5d                   	pop    %ebp
c0105db7:	c3                   	ret    

c0105db8 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0105db8:	55                   	push   %ebp
c0105db9:	89 e5                	mov    %esp,%ebp
    return page2ppn(page) << PGSHIFT;
c0105dbb:	ff 75 08             	pushl  0x8(%ebp)
c0105dbe:	e8 e2 ff ff ff       	call   c0105da5 <page2ppn>
c0105dc3:	83 c4 04             	add    $0x4,%esp
c0105dc6:	c1 e0 0c             	shl    $0xc,%eax
}
c0105dc9:	c9                   	leave  
c0105dca:	c3                   	ret    

c0105dcb <page_ref>:
pde2page(pde_t pde) {
    return pa2page(PDE_ADDR(pde));
}

static inline int
page_ref(struct Page *page) {
c0105dcb:	55                   	push   %ebp
c0105dcc:	89 e5                	mov    %esp,%ebp
    return page->ref;
c0105dce:	8b 45 08             	mov    0x8(%ebp),%eax
c0105dd1:	8b 00                	mov    (%eax),%eax
}
c0105dd3:	5d                   	pop    %ebp
c0105dd4:	c3                   	ret    

c0105dd5 <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c0105dd5:	55                   	push   %ebp
c0105dd6:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c0105dd8:	8b 45 08             	mov    0x8(%ebp),%eax
c0105ddb:	8b 55 0c             	mov    0xc(%ebp),%edx
c0105dde:	89 10                	mov    %edx,(%eax)
}
c0105de0:	90                   	nop
c0105de1:	5d                   	pop    %ebp
c0105de2:	c3                   	ret    

c0105de3 <default_init>:

#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
default_init(void) {
c0105de3:	55                   	push   %ebp
c0105de4:	89 e5                	mov    %esp,%ebp
c0105de6:	83 ec 10             	sub    $0x10,%esp
c0105de9:	c7 45 fc e4 71 1c c0 	movl   $0xc01c71e4,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0105df0:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0105df3:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0105df6:	89 50 04             	mov    %edx,0x4(%eax)
c0105df9:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0105dfc:	8b 50 04             	mov    0x4(%eax),%edx
c0105dff:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0105e02:	89 10                	mov    %edx,(%eax)
    list_init(&free_list);
    nr_free = 0;
c0105e04:	c7 05 ec 71 1c c0 00 	movl   $0x0,0xc01c71ec
c0105e0b:	00 00 00 
}
c0105e0e:	90                   	nop
c0105e0f:	c9                   	leave  
c0105e10:	c3                   	ret    

c0105e11 <default_init_memmap>:

static void
default_init_memmap(struct Page *base, size_t n) {
c0105e11:	55                   	push   %ebp
c0105e12:	89 e5                	mov    %esp,%ebp
c0105e14:	83 ec 48             	sub    $0x48,%esp
    assert(n > 0);
c0105e17:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0105e1b:	75 16                	jne    c0105e33 <default_init_memmap+0x22>
c0105e1d:	68 28 e1 10 c0       	push   $0xc010e128
c0105e22:	68 2e e1 10 c0       	push   $0xc010e12e
c0105e27:	6a 6d                	push   $0x6d
c0105e29:	68 43 e1 10 c0       	push   $0xc010e143
c0105e2e:	e8 ca a5 ff ff       	call   c01003fd <__panic>
    struct Page *p = base;
c0105e33:	8b 45 08             	mov    0x8(%ebp),%eax
c0105e36:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (; p != base + n; p ++) {
c0105e39:	eb 6c                	jmp    c0105ea7 <default_init_memmap+0x96>
        assert(PageReserved(p));
c0105e3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105e3e:	83 c0 04             	add    $0x4,%eax
c0105e41:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c0105e48:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0105e4b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105e4e:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0105e51:	0f a3 10             	bt     %edx,(%eax)
c0105e54:	19 c0                	sbb    %eax,%eax
c0105e56:	89 45 e0             	mov    %eax,-0x20(%ebp)
    return oldbit != 0;
c0105e59:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0105e5d:	0f 95 c0             	setne  %al
c0105e60:	0f b6 c0             	movzbl %al,%eax
c0105e63:	85 c0                	test   %eax,%eax
c0105e65:	75 16                	jne    c0105e7d <default_init_memmap+0x6c>
c0105e67:	68 59 e1 10 c0       	push   $0xc010e159
c0105e6c:	68 2e e1 10 c0       	push   $0xc010e12e
c0105e71:	6a 70                	push   $0x70
c0105e73:	68 43 e1 10 c0       	push   $0xc010e143
c0105e78:	e8 80 a5 ff ff       	call   c01003fd <__panic>
        p->flags = p->property = 0;
c0105e7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105e80:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
c0105e87:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105e8a:	8b 50 08             	mov    0x8(%eax),%edx
c0105e8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105e90:	89 50 04             	mov    %edx,0x4(%eax)
        set_page_ref(p, 0);
c0105e93:	83 ec 08             	sub    $0x8,%esp
c0105e96:	6a 00                	push   $0x0
c0105e98:	ff 75 f4             	pushl  -0xc(%ebp)
c0105e9b:	e8 35 ff ff ff       	call   c0105dd5 <set_page_ref>
c0105ea0:	83 c4 10             	add    $0x10,%esp

static void
default_init_memmap(struct Page *base, size_t n) {
    assert(n > 0);
    struct Page *p = base;
    for (; p != base + n; p ++) {
c0105ea3:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
c0105ea7:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105eaa:	c1 e0 05             	shl    $0x5,%eax
c0105ead:	89 c2                	mov    %eax,%edx
c0105eaf:	8b 45 08             	mov    0x8(%ebp),%eax
c0105eb2:	01 d0                	add    %edx,%eax
c0105eb4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0105eb7:	75 82                	jne    c0105e3b <default_init_memmap+0x2a>
        assert(PageReserved(p));
        p->flags = p->property = 0;
        set_page_ref(p, 0);
    }
    base->property = n;
c0105eb9:	8b 45 08             	mov    0x8(%ebp),%eax
c0105ebc:	8b 55 0c             	mov    0xc(%ebp),%edx
c0105ebf:	89 50 08             	mov    %edx,0x8(%eax)
    SetPageProperty(base);
c0105ec2:	8b 45 08             	mov    0x8(%ebp),%eax
c0105ec5:	83 c0 04             	add    $0x4,%eax
c0105ec8:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
c0105ecf:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0105ed2:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0105ed5:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0105ed8:	0f ab 10             	bts    %edx,(%eax)
    nr_free += n;
c0105edb:	8b 15 ec 71 1c c0    	mov    0xc01c71ec,%edx
c0105ee1:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105ee4:	01 d0                	add    %edx,%eax
c0105ee6:	a3 ec 71 1c c0       	mov    %eax,0xc01c71ec
    list_add(&free_list, &(base->page_link));
c0105eeb:	8b 45 08             	mov    0x8(%ebp),%eax
c0105eee:	83 c0 0c             	add    $0xc,%eax
c0105ef1:	c7 45 f0 e4 71 1c c0 	movl   $0xc01c71e4,-0x10(%ebp)
c0105ef8:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0105efb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105efe:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0105f01:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0105f04:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0105f07:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0105f0a:	8b 40 04             	mov    0x4(%eax),%eax
c0105f0d:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0105f10:	89 55 d0             	mov    %edx,-0x30(%ebp)
c0105f13:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0105f16:	89 55 cc             	mov    %edx,-0x34(%ebp)
c0105f19:	89 45 c8             	mov    %eax,-0x38(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0105f1c:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0105f1f:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0105f22:	89 10                	mov    %edx,(%eax)
c0105f24:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0105f27:	8b 10                	mov    (%eax),%edx
c0105f29:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0105f2c:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0105f2f:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0105f32:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0105f35:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0105f38:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0105f3b:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0105f3e:	89 10                	mov    %edx,(%eax)
}
c0105f40:	90                   	nop
c0105f41:	c9                   	leave  
c0105f42:	c3                   	ret    

c0105f43 <default_alloc_pages>:

// LAB2 MODIFIED need to be rewritten
static struct Page *
default_alloc_pages(size_t n) {
c0105f43:	55                   	push   %ebp
c0105f44:	89 e5                	mov    %esp,%ebp
c0105f46:	83 ec 58             	sub    $0x58,%esp
    assert(n > 0);
c0105f49:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0105f4d:	75 16                	jne    c0105f65 <default_alloc_pages+0x22>
c0105f4f:	68 28 e1 10 c0       	push   $0xc010e128
c0105f54:	68 2e e1 10 c0       	push   $0xc010e12e
c0105f59:	6a 7d                	push   $0x7d
c0105f5b:	68 43 e1 10 c0       	push   $0xc010e143
c0105f60:	e8 98 a4 ff ff       	call   c01003fd <__panic>
    if (n > nr_free) {
c0105f65:	a1 ec 71 1c c0       	mov    0xc01c71ec,%eax
c0105f6a:	3b 45 08             	cmp    0x8(%ebp),%eax
c0105f6d:	73 0a                	jae    c0105f79 <default_alloc_pages+0x36>
        return NULL;
c0105f6f:	b8 00 00 00 00       	mov    $0x0,%eax
c0105f74:	e9 41 01 00 00       	jmp    c01060ba <default_alloc_pages+0x177>
    }
    struct Page *page = NULL;
c0105f79:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    list_entry_t *le = &free_list;
c0105f80:	c7 45 f0 e4 71 1c c0 	movl   $0xc01c71e4,-0x10(%ebp)
    while ((le = list_next(le)) != &free_list) {
c0105f87:	eb 1c                	jmp    c0105fa5 <default_alloc_pages+0x62>
        struct Page *p = le2page(le, page_link);
c0105f89:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105f8c:	83 e8 0c             	sub    $0xc,%eax
c0105f8f:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (p->property >= n) {
c0105f92:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105f95:	8b 40 08             	mov    0x8(%eax),%eax
c0105f98:	3b 45 08             	cmp    0x8(%ebp),%eax
c0105f9b:	72 08                	jb     c0105fa5 <default_alloc_pages+0x62>
            page = p;
c0105f9d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105fa0:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
c0105fa3:	eb 18                	jmp    c0105fbd <default_alloc_pages+0x7a>
c0105fa5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105fa8:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0105fab:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0105fae:	8b 40 04             	mov    0x4(%eax),%eax
    if (n > nr_free) {
        return NULL;
    }
    struct Page *page = NULL;
    list_entry_t *le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c0105fb1:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105fb4:	81 7d f0 e4 71 1c c0 	cmpl   $0xc01c71e4,-0x10(%ebp)
c0105fbb:	75 cc                	jne    c0105f89 <default_alloc_pages+0x46>
        if (p->property >= n) {
            page = p;
            break;
        }
    }
    if (page != NULL) {
c0105fbd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105fc1:	0f 84 f0 00 00 00    	je     c01060b7 <default_alloc_pages+0x174>
c0105fc7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105fca:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0105fcd:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0105fd0:	8b 40 04             	mov    0x4(%eax),%eax
        list_entry_t *following_le = list_next(le);
c0105fd3:	89 45 e0             	mov    %eax,-0x20(%ebp)
        list_del(&(page->page_link));
c0105fd6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105fd9:	83 c0 0c             	add    $0xc,%eax
c0105fdc:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0105fdf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105fe2:	8b 40 04             	mov    0x4(%eax),%eax
c0105fe5:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0105fe8:	8b 12                	mov    (%edx),%edx
c0105fea:	89 55 c8             	mov    %edx,-0x38(%ebp)
c0105fed:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0105ff0:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0105ff3:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0105ff6:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0105ff9:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0105ffc:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0105fff:	89 10                	mov    %edx,(%eax)
        if (page->property > n) {
c0106001:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106004:	8b 40 08             	mov    0x8(%eax),%eax
c0106007:	3b 45 08             	cmp    0x8(%ebp),%eax
c010600a:	0f 86 81 00 00 00    	jbe    c0106091 <default_alloc_pages+0x14e>
            struct Page *p = page + n;                      // split the allocated page
c0106010:	8b 45 08             	mov    0x8(%ebp),%eax
c0106013:	c1 e0 05             	shl    $0x5,%eax
c0106016:	89 c2                	mov    %eax,%edx
c0106018:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010601b:	01 d0                	add    %edx,%eax
c010601d:	89 45 d8             	mov    %eax,-0x28(%ebp)
            p->property = page->property - n;               // set page num
c0106020:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106023:	8b 40 08             	mov    0x8(%eax),%eax
c0106026:	2b 45 08             	sub    0x8(%ebp),%eax
c0106029:	89 c2                	mov    %eax,%edx
c010602b:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010602e:	89 50 08             	mov    %edx,0x8(%eax)
            SetPageProperty(p);                             // mark as the head page
c0106031:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0106034:	83 c0 04             	add    $0x4,%eax
c0106037:	c7 45 d0 01 00 00 00 	movl   $0x1,-0x30(%ebp)
c010603e:	89 45 b0             	mov    %eax,-0x50(%ebp)
c0106041:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0106044:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0106047:	0f ab 10             	bts    %edx,(%eax)
            list_add_before(following_le, &(p->page_link)); // add the remaining block before the formerly following block
c010604a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010604d:	8d 50 0c             	lea    0xc(%eax),%edx
c0106050:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106053:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0106056:	89 55 c0             	mov    %edx,-0x40(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c0106059:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010605c:	8b 00                	mov    (%eax),%eax
c010605e:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0106061:	89 55 bc             	mov    %edx,-0x44(%ebp)
c0106064:	89 45 b8             	mov    %eax,-0x48(%ebp)
c0106067:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010606a:	89 45 b4             	mov    %eax,-0x4c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010606d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0106070:	8b 55 bc             	mov    -0x44(%ebp),%edx
c0106073:	89 10                	mov    %edx,(%eax)
c0106075:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0106078:	8b 10                	mov    (%eax),%edx
c010607a:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010607d:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0106080:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0106083:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0106086:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0106089:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010608c:	8b 55 b8             	mov    -0x48(%ebp),%edx
c010608f:	89 10                	mov    %edx,(%eax)
        }
        nr_free -= n;
c0106091:	a1 ec 71 1c c0       	mov    0xc01c71ec,%eax
c0106096:	2b 45 08             	sub    0x8(%ebp),%eax
c0106099:	a3 ec 71 1c c0       	mov    %eax,0xc01c71ec
        ClearPageProperty(page);    // mark as "not head page"
c010609e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01060a1:	83 c0 04             	add    $0x4,%eax
c01060a4:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
c01060ab:	89 45 ac             	mov    %eax,-0x54(%ebp)
 * @nr:     the bit to clear
 * @addr:   the address to start counting from
 * */
static inline void
clear_bit(int nr, volatile void *addr) {
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c01060ae:	8b 45 ac             	mov    -0x54(%ebp),%eax
c01060b1:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01060b4:	0f b3 10             	btr    %edx,(%eax)
    }
    return page;
c01060b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01060ba:	c9                   	leave  
c01060bb:	c3                   	ret    

c01060bc <default_free_pages>:

// LAB2 MODIFIED
static void
default_free_pages(struct Page *base, size_t n) {
c01060bc:	55                   	push   %ebp
c01060bd:	89 e5                	mov    %esp,%ebp
c01060bf:	81 ec 88 00 00 00    	sub    $0x88,%esp
    assert(n > 0);
c01060c5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01060c9:	75 19                	jne    c01060e4 <default_free_pages+0x28>
c01060cb:	68 28 e1 10 c0       	push   $0xc010e128
c01060d0:	68 2e e1 10 c0       	push   $0xc010e12e
c01060d5:	68 9c 00 00 00       	push   $0x9c
c01060da:	68 43 e1 10 c0       	push   $0xc010e143
c01060df:	e8 19 a3 ff ff       	call   c01003fd <__panic>
    struct Page *p = base;
c01060e4:	8b 45 08             	mov    0x8(%ebp),%eax
c01060e7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (; p != base + n; p ++) {
c01060ea:	e9 8f 00 00 00       	jmp    c010617e <default_free_pages+0xc2>
        assert(!PageReserved(p) && !PageProperty(p));
c01060ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01060f2:	83 c0 04             	add    $0x4,%eax
c01060f5:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
c01060fc:	89 45 bc             	mov    %eax,-0x44(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01060ff:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0106102:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0106105:	0f a3 10             	bt     %edx,(%eax)
c0106108:	19 c0                	sbb    %eax,%eax
c010610a:	89 45 b8             	mov    %eax,-0x48(%ebp)
    return oldbit != 0;
c010610d:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
c0106111:	0f 95 c0             	setne  %al
c0106114:	0f b6 c0             	movzbl %al,%eax
c0106117:	85 c0                	test   %eax,%eax
c0106119:	75 2c                	jne    c0106147 <default_free_pages+0x8b>
c010611b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010611e:	83 c0 04             	add    $0x4,%eax
c0106121:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
c0106128:	89 45 b4             	mov    %eax,-0x4c(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010612b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010612e:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0106131:	0f a3 10             	bt     %edx,(%eax)
c0106134:	19 c0                	sbb    %eax,%eax
c0106136:	89 45 b0             	mov    %eax,-0x50(%ebp)
    return oldbit != 0;
c0106139:	83 7d b0 00          	cmpl   $0x0,-0x50(%ebp)
c010613d:	0f 95 c0             	setne  %al
c0106140:	0f b6 c0             	movzbl %al,%eax
c0106143:	85 c0                	test   %eax,%eax
c0106145:	74 19                	je     c0106160 <default_free_pages+0xa4>
c0106147:	68 6c e1 10 c0       	push   $0xc010e16c
c010614c:	68 2e e1 10 c0       	push   $0xc010e12e
c0106151:	68 9f 00 00 00       	push   $0x9f
c0106156:	68 43 e1 10 c0       	push   $0xc010e143
c010615b:	e8 9d a2 ff ff       	call   c01003fd <__panic>
        p->flags = 0;
c0106160:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106163:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
        set_page_ref(p, 0);     // clear ref flag
c010616a:	83 ec 08             	sub    $0x8,%esp
c010616d:	6a 00                	push   $0x0
c010616f:	ff 75 f4             	pushl  -0xc(%ebp)
c0106172:	e8 5e fc ff ff       	call   c0105dd5 <set_page_ref>
c0106177:	83 c4 10             	add    $0x10,%esp
// LAB2 MODIFIED
static void
default_free_pages(struct Page *base, size_t n) {
    assert(n > 0);
    struct Page *p = base;
    for (; p != base + n; p ++) {
c010617a:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
c010617e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106181:	c1 e0 05             	shl    $0x5,%eax
c0106184:	89 c2                	mov    %eax,%edx
c0106186:	8b 45 08             	mov    0x8(%ebp),%eax
c0106189:	01 d0                	add    %edx,%eax
c010618b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010618e:	0f 85 5b ff ff ff    	jne    c01060ef <default_free_pages+0x33>
        assert(!PageReserved(p) && !PageProperty(p));
        p->flags = 0;
        set_page_ref(p, 0);     // clear ref flag
    }
    base->property = n;
c0106194:	8b 45 08             	mov    0x8(%ebp),%eax
c0106197:	8b 55 0c             	mov    0xc(%ebp),%edx
c010619a:	89 50 08             	mov    %edx,0x8(%eax)
    SetPageProperty(base);
c010619d:	8b 45 08             	mov    0x8(%ebp),%eax
c01061a0:	83 c0 04             	add    $0x4,%eax
c01061a3:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
c01061aa:	89 45 ac             	mov    %eax,-0x54(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c01061ad:	8b 45 ac             	mov    -0x54(%ebp),%eax
c01061b0:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01061b3:	0f ab 10             	bts    %edx,(%eax)
c01061b6:	c7 45 e8 e4 71 1c c0 	movl   $0xc01c71e4,-0x18(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01061bd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01061c0:	8b 40 04             	mov    0x4(%eax),%eax
    // try to extend free block
    list_entry_t *le = list_next(&free_list);
c01061c3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    while (le != &free_list) {
c01061c6:	e9 0e 01 00 00       	jmp    c01062d9 <default_free_pages+0x21d>
        p = le2page(le, page_link);
c01061cb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01061ce:	83 e8 0c             	sub    $0xc,%eax
c01061d1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01061d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01061d7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01061da:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01061dd:	8b 40 04             	mov    0x4(%eax),%eax
        le = list_next(le);
c01061e0:	89 45 f0             	mov    %eax,-0x10(%ebp)
        // page is exactly before one page
        if (base + base->property == p) {
c01061e3:	8b 45 08             	mov    0x8(%ebp),%eax
c01061e6:	8b 40 08             	mov    0x8(%eax),%eax
c01061e9:	c1 e0 05             	shl    $0x5,%eax
c01061ec:	89 c2                	mov    %eax,%edx
c01061ee:	8b 45 08             	mov    0x8(%ebp),%eax
c01061f1:	01 d0                	add    %edx,%eax
c01061f3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01061f6:	75 64                	jne    c010625c <default_free_pages+0x1a0>
            base->property += p->property;
c01061f8:	8b 45 08             	mov    0x8(%ebp),%eax
c01061fb:	8b 50 08             	mov    0x8(%eax),%edx
c01061fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106201:	8b 40 08             	mov    0x8(%eax),%eax
c0106204:	01 c2                	add    %eax,%edx
c0106206:	8b 45 08             	mov    0x8(%ebp),%eax
c0106209:	89 50 08             	mov    %edx,0x8(%eax)
            p->property = 0;     // clear properties of p
c010620c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010620f:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
            ClearPageProperty(p);
c0106216:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106219:	83 c0 04             	add    $0x4,%eax
c010621c:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
c0106223:	89 45 a0             	mov    %eax,-0x60(%ebp)
 * @nr:     the bit to clear
 * @addr:   the address to start counting from
 * */
static inline void
clear_bit(int nr, volatile void *addr) {
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0106226:	8b 45 a0             	mov    -0x60(%ebp),%eax
c0106229:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010622c:	0f b3 10             	btr    %edx,(%eax)
            list_del(&(p->page_link));
c010622f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106232:	83 c0 0c             	add    $0xc,%eax
c0106235:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0106238:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010623b:	8b 40 04             	mov    0x4(%eax),%eax
c010623e:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0106241:	8b 12                	mov    (%edx),%edx
c0106243:	89 55 a8             	mov    %edx,-0x58(%ebp)
c0106246:	89 45 a4             	mov    %eax,-0x5c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0106249:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010624c:	8b 55 a4             	mov    -0x5c(%ebp),%edx
c010624f:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0106252:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0106255:	8b 55 a8             	mov    -0x58(%ebp),%edx
c0106258:	89 10                	mov    %edx,(%eax)
c010625a:	eb 7d                	jmp    c01062d9 <default_free_pages+0x21d>
        }
        // page is exactly after one page
        else if (p + p->property == base) {
c010625c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010625f:	8b 40 08             	mov    0x8(%eax),%eax
c0106262:	c1 e0 05             	shl    $0x5,%eax
c0106265:	89 c2                	mov    %eax,%edx
c0106267:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010626a:	01 d0                	add    %edx,%eax
c010626c:	3b 45 08             	cmp    0x8(%ebp),%eax
c010626f:	75 68                	jne    c01062d9 <default_free_pages+0x21d>
            p->property += base->property;
c0106271:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106274:	8b 50 08             	mov    0x8(%eax),%edx
c0106277:	8b 45 08             	mov    0x8(%ebp),%eax
c010627a:	8b 40 08             	mov    0x8(%eax),%eax
c010627d:	01 c2                	add    %eax,%edx
c010627f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106282:	89 50 08             	mov    %edx,0x8(%eax)
            base->property = 0;     // clear properties of base
c0106285:	8b 45 08             	mov    0x8(%ebp),%eax
c0106288:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
            ClearPageProperty(base);
c010628f:	8b 45 08             	mov    0x8(%ebp),%eax
c0106292:	83 c0 04             	add    $0x4,%eax
c0106295:	c7 45 cc 01 00 00 00 	movl   $0x1,-0x34(%ebp)
c010629c:	89 45 94             	mov    %eax,-0x6c(%ebp)
c010629f:	8b 45 94             	mov    -0x6c(%ebp),%eax
c01062a2:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01062a5:	0f b3 10             	btr    %edx,(%eax)
            base = p;
c01062a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01062ab:	89 45 08             	mov    %eax,0x8(%ebp)
            list_del(&(p->page_link));
c01062ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01062b1:	83 c0 0c             	add    $0xc,%eax
c01062b4:	89 45 d8             	mov    %eax,-0x28(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c01062b7:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01062ba:	8b 40 04             	mov    0x4(%eax),%eax
c01062bd:	8b 55 d8             	mov    -0x28(%ebp),%edx
c01062c0:	8b 12                	mov    (%edx),%edx
c01062c2:	89 55 9c             	mov    %edx,-0x64(%ebp)
c01062c5:	89 45 98             	mov    %eax,-0x68(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c01062c8:	8b 45 9c             	mov    -0x64(%ebp),%eax
c01062cb:	8b 55 98             	mov    -0x68(%ebp),%edx
c01062ce:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c01062d1:	8b 45 98             	mov    -0x68(%ebp),%eax
c01062d4:	8b 55 9c             	mov    -0x64(%ebp),%edx
c01062d7:	89 10                	mov    %edx,(%eax)
    }
    base->property = n;
    SetPageProperty(base);
    // try to extend free block
    list_entry_t *le = list_next(&free_list);
    while (le != &free_list) {
c01062d9:	81 7d f0 e4 71 1c c0 	cmpl   $0xc01c71e4,-0x10(%ebp)
c01062e0:	0f 85 e5 fe ff ff    	jne    c01061cb <default_free_pages+0x10f>
c01062e6:	c7 45 d0 e4 71 1c c0 	movl   $0xc01c71e4,-0x30(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01062ed:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01062f0:	8b 40 04             	mov    0x4(%eax),%eax
            base = p;
            list_del(&(p->page_link));
        }
    }
    // search for a place to add page into list
    le = list_next(&free_list);
c01062f3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    while (le != &free_list) {
c01062f6:	eb 20                	jmp    c0106318 <default_free_pages+0x25c>
        p = le2page(le, page_link);
c01062f8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01062fb:	83 e8 0c             	sub    $0xc,%eax
c01062fe:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (p > base) {
c0106301:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106304:	3b 45 08             	cmp    0x8(%ebp),%eax
c0106307:	77 1a                	ja     c0106323 <default_free_pages+0x267>
c0106309:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010630c:	89 45 c8             	mov    %eax,-0x38(%ebp)
c010630f:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0106312:	8b 40 04             	mov    0x4(%eax),%eax
            break;
        }
        le = list_next(le);
c0106315:	89 45 f0             	mov    %eax,-0x10(%ebp)
            list_del(&(p->page_link));
        }
    }
    // search for a place to add page into list
    le = list_next(&free_list);
    while (le != &free_list) {
c0106318:	81 7d f0 e4 71 1c c0 	cmpl   $0xc01c71e4,-0x10(%ebp)
c010631f:	75 d7                	jne    c01062f8 <default_free_pages+0x23c>
c0106321:	eb 01                	jmp    c0106324 <default_free_pages+0x268>
        p = le2page(le, page_link);
        if (p > base) {
            break;
c0106323:	90                   	nop
        }
        le = list_next(le);
    }
    nr_free += n;
c0106324:	8b 15 ec 71 1c c0    	mov    0xc01c71ec,%edx
c010632a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010632d:	01 d0                	add    %edx,%eax
c010632f:	a3 ec 71 1c c0       	mov    %eax,0xc01c71ec
    list_add_before(le, &(base->page_link)); 
c0106334:	8b 45 08             	mov    0x8(%ebp),%eax
c0106337:	8d 50 0c             	lea    0xc(%eax),%edx
c010633a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010633d:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c0106340:	89 55 90             	mov    %edx,-0x70(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c0106343:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0106346:	8b 00                	mov    (%eax),%eax
c0106348:	8b 55 90             	mov    -0x70(%ebp),%edx
c010634b:	89 55 8c             	mov    %edx,-0x74(%ebp)
c010634e:	89 45 88             	mov    %eax,-0x78(%ebp)
c0106351:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0106354:	89 45 84             	mov    %eax,-0x7c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0106357:	8b 45 84             	mov    -0x7c(%ebp),%eax
c010635a:	8b 55 8c             	mov    -0x74(%ebp),%edx
c010635d:	89 10                	mov    %edx,(%eax)
c010635f:	8b 45 84             	mov    -0x7c(%ebp),%eax
c0106362:	8b 10                	mov    (%eax),%edx
c0106364:	8b 45 88             	mov    -0x78(%ebp),%eax
c0106367:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010636a:	8b 45 8c             	mov    -0x74(%ebp),%eax
c010636d:	8b 55 84             	mov    -0x7c(%ebp),%edx
c0106370:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0106373:	8b 45 8c             	mov    -0x74(%ebp),%eax
c0106376:	8b 55 88             	mov    -0x78(%ebp),%edx
c0106379:	89 10                	mov    %edx,(%eax)
}
c010637b:	90                   	nop
c010637c:	c9                   	leave  
c010637d:	c3                   	ret    

c010637e <default_nr_free_pages>:

static size_t
default_nr_free_pages(void) {
c010637e:	55                   	push   %ebp
c010637f:	89 e5                	mov    %esp,%ebp
    return nr_free;
c0106381:	a1 ec 71 1c c0       	mov    0xc01c71ec,%eax
}
c0106386:	5d                   	pop    %ebp
c0106387:	c3                   	ret    

c0106388 <basic_check>:

static void
basic_check(void) {
c0106388:	55                   	push   %ebp
c0106389:	89 e5                	mov    %esp,%ebp
c010638b:	83 ec 38             	sub    $0x38,%esp
    struct Page *p0, *p1, *p2;
    p0 = p1 = p2 = NULL;
c010638e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0106395:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106398:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010639b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010639e:	89 45 ec             	mov    %eax,-0x14(%ebp)
    assert((p0 = alloc_page()) != NULL);
c01063a1:	83 ec 0c             	sub    $0xc,%esp
c01063a4:	6a 01                	push   $0x1
c01063a6:	e8 c7 0c 00 00       	call   c0107072 <alloc_pages>
c01063ab:	83 c4 10             	add    $0x10,%esp
c01063ae:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01063b1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01063b5:	75 19                	jne    c01063d0 <basic_check+0x48>
c01063b7:	68 91 e1 10 c0       	push   $0xc010e191
c01063bc:	68 2e e1 10 c0       	push   $0xc010e12e
c01063c1:	68 d0 00 00 00       	push   $0xd0
c01063c6:	68 43 e1 10 c0       	push   $0xc010e143
c01063cb:	e8 2d a0 ff ff       	call   c01003fd <__panic>
    assert((p1 = alloc_page()) != NULL);
c01063d0:	83 ec 0c             	sub    $0xc,%esp
c01063d3:	6a 01                	push   $0x1
c01063d5:	e8 98 0c 00 00       	call   c0107072 <alloc_pages>
c01063da:	83 c4 10             	add    $0x10,%esp
c01063dd:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01063e0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01063e4:	75 19                	jne    c01063ff <basic_check+0x77>
c01063e6:	68 ad e1 10 c0       	push   $0xc010e1ad
c01063eb:	68 2e e1 10 c0       	push   $0xc010e12e
c01063f0:	68 d1 00 00 00       	push   $0xd1
c01063f5:	68 43 e1 10 c0       	push   $0xc010e143
c01063fa:	e8 fe 9f ff ff       	call   c01003fd <__panic>
    assert((p2 = alloc_page()) != NULL);
c01063ff:	83 ec 0c             	sub    $0xc,%esp
c0106402:	6a 01                	push   $0x1
c0106404:	e8 69 0c 00 00       	call   c0107072 <alloc_pages>
c0106409:	83 c4 10             	add    $0x10,%esp
c010640c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010640f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106413:	75 19                	jne    c010642e <basic_check+0xa6>
c0106415:	68 c9 e1 10 c0       	push   $0xc010e1c9
c010641a:	68 2e e1 10 c0       	push   $0xc010e12e
c010641f:	68 d2 00 00 00       	push   $0xd2
c0106424:	68 43 e1 10 c0       	push   $0xc010e143
c0106429:	e8 cf 9f ff ff       	call   c01003fd <__panic>

    assert(p0 != p1 && p0 != p2 && p1 != p2);
c010642e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106431:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0106434:	74 10                	je     c0106446 <basic_check+0xbe>
c0106436:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106439:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010643c:	74 08                	je     c0106446 <basic_check+0xbe>
c010643e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106441:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0106444:	75 19                	jne    c010645f <basic_check+0xd7>
c0106446:	68 e8 e1 10 c0       	push   $0xc010e1e8
c010644b:	68 2e e1 10 c0       	push   $0xc010e12e
c0106450:	68 d4 00 00 00       	push   $0xd4
c0106455:	68 43 e1 10 c0       	push   $0xc010e143
c010645a:	e8 9e 9f ff ff       	call   c01003fd <__panic>
    assert(page_ref(p0) == 0 && page_ref(p1) == 0 && page_ref(p2) == 0);
c010645f:	83 ec 0c             	sub    $0xc,%esp
c0106462:	ff 75 ec             	pushl  -0x14(%ebp)
c0106465:	e8 61 f9 ff ff       	call   c0105dcb <page_ref>
c010646a:	83 c4 10             	add    $0x10,%esp
c010646d:	85 c0                	test   %eax,%eax
c010646f:	75 24                	jne    c0106495 <basic_check+0x10d>
c0106471:	83 ec 0c             	sub    $0xc,%esp
c0106474:	ff 75 f0             	pushl  -0x10(%ebp)
c0106477:	e8 4f f9 ff ff       	call   c0105dcb <page_ref>
c010647c:	83 c4 10             	add    $0x10,%esp
c010647f:	85 c0                	test   %eax,%eax
c0106481:	75 12                	jne    c0106495 <basic_check+0x10d>
c0106483:	83 ec 0c             	sub    $0xc,%esp
c0106486:	ff 75 f4             	pushl  -0xc(%ebp)
c0106489:	e8 3d f9 ff ff       	call   c0105dcb <page_ref>
c010648e:	83 c4 10             	add    $0x10,%esp
c0106491:	85 c0                	test   %eax,%eax
c0106493:	74 19                	je     c01064ae <basic_check+0x126>
c0106495:	68 0c e2 10 c0       	push   $0xc010e20c
c010649a:	68 2e e1 10 c0       	push   $0xc010e12e
c010649f:	68 d5 00 00 00       	push   $0xd5
c01064a4:	68 43 e1 10 c0       	push   $0xc010e143
c01064a9:	e8 4f 9f ff ff       	call   c01003fd <__panic>

    assert(page2pa(p0) < npage * PGSIZE);
c01064ae:	83 ec 0c             	sub    $0xc,%esp
c01064b1:	ff 75 ec             	pushl  -0x14(%ebp)
c01064b4:	e8 ff f8 ff ff       	call   c0105db8 <page2pa>
c01064b9:	83 c4 10             	add    $0x10,%esp
c01064bc:	89 c2                	mov    %eax,%edx
c01064be:	a1 80 4f 1c c0       	mov    0xc01c4f80,%eax
c01064c3:	c1 e0 0c             	shl    $0xc,%eax
c01064c6:	39 c2                	cmp    %eax,%edx
c01064c8:	72 19                	jb     c01064e3 <basic_check+0x15b>
c01064ca:	68 48 e2 10 c0       	push   $0xc010e248
c01064cf:	68 2e e1 10 c0       	push   $0xc010e12e
c01064d4:	68 d7 00 00 00       	push   $0xd7
c01064d9:	68 43 e1 10 c0       	push   $0xc010e143
c01064de:	e8 1a 9f ff ff       	call   c01003fd <__panic>
    assert(page2pa(p1) < npage * PGSIZE);
c01064e3:	83 ec 0c             	sub    $0xc,%esp
c01064e6:	ff 75 f0             	pushl  -0x10(%ebp)
c01064e9:	e8 ca f8 ff ff       	call   c0105db8 <page2pa>
c01064ee:	83 c4 10             	add    $0x10,%esp
c01064f1:	89 c2                	mov    %eax,%edx
c01064f3:	a1 80 4f 1c c0       	mov    0xc01c4f80,%eax
c01064f8:	c1 e0 0c             	shl    $0xc,%eax
c01064fb:	39 c2                	cmp    %eax,%edx
c01064fd:	72 19                	jb     c0106518 <basic_check+0x190>
c01064ff:	68 65 e2 10 c0       	push   $0xc010e265
c0106504:	68 2e e1 10 c0       	push   $0xc010e12e
c0106509:	68 d8 00 00 00       	push   $0xd8
c010650e:	68 43 e1 10 c0       	push   $0xc010e143
c0106513:	e8 e5 9e ff ff       	call   c01003fd <__panic>
    assert(page2pa(p2) < npage * PGSIZE);
c0106518:	83 ec 0c             	sub    $0xc,%esp
c010651b:	ff 75 f4             	pushl  -0xc(%ebp)
c010651e:	e8 95 f8 ff ff       	call   c0105db8 <page2pa>
c0106523:	83 c4 10             	add    $0x10,%esp
c0106526:	89 c2                	mov    %eax,%edx
c0106528:	a1 80 4f 1c c0       	mov    0xc01c4f80,%eax
c010652d:	c1 e0 0c             	shl    $0xc,%eax
c0106530:	39 c2                	cmp    %eax,%edx
c0106532:	72 19                	jb     c010654d <basic_check+0x1c5>
c0106534:	68 82 e2 10 c0       	push   $0xc010e282
c0106539:	68 2e e1 10 c0       	push   $0xc010e12e
c010653e:	68 d9 00 00 00       	push   $0xd9
c0106543:	68 43 e1 10 c0       	push   $0xc010e143
c0106548:	e8 b0 9e ff ff       	call   c01003fd <__panic>

    list_entry_t free_list_store = free_list;
c010654d:	a1 e4 71 1c c0       	mov    0xc01c71e4,%eax
c0106552:	8b 15 e8 71 1c c0    	mov    0xc01c71e8,%edx
c0106558:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010655b:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010655e:	c7 45 e4 e4 71 1c c0 	movl   $0xc01c71e4,-0x1c(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0106565:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106568:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010656b:	89 50 04             	mov    %edx,0x4(%eax)
c010656e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106571:	8b 50 04             	mov    0x4(%eax),%edx
c0106574:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106577:	89 10                	mov    %edx,(%eax)
c0106579:	c7 45 d8 e4 71 1c c0 	movl   $0xc01c71e4,-0x28(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0106580:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0106583:	8b 40 04             	mov    0x4(%eax),%eax
c0106586:	39 45 d8             	cmp    %eax,-0x28(%ebp)
c0106589:	0f 94 c0             	sete   %al
c010658c:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c010658f:	85 c0                	test   %eax,%eax
c0106591:	75 19                	jne    c01065ac <basic_check+0x224>
c0106593:	68 9f e2 10 c0       	push   $0xc010e29f
c0106598:	68 2e e1 10 c0       	push   $0xc010e12e
c010659d:	68 dd 00 00 00       	push   $0xdd
c01065a2:	68 43 e1 10 c0       	push   $0xc010e143
c01065a7:	e8 51 9e ff ff       	call   c01003fd <__panic>

    unsigned int nr_free_store = nr_free;
c01065ac:	a1 ec 71 1c c0       	mov    0xc01c71ec,%eax
c01065b1:	89 45 e0             	mov    %eax,-0x20(%ebp)
    nr_free = 0;
c01065b4:	c7 05 ec 71 1c c0 00 	movl   $0x0,0xc01c71ec
c01065bb:	00 00 00 

    assert(alloc_page() == NULL);
c01065be:	83 ec 0c             	sub    $0xc,%esp
c01065c1:	6a 01                	push   $0x1
c01065c3:	e8 aa 0a 00 00       	call   c0107072 <alloc_pages>
c01065c8:	83 c4 10             	add    $0x10,%esp
c01065cb:	85 c0                	test   %eax,%eax
c01065cd:	74 19                	je     c01065e8 <basic_check+0x260>
c01065cf:	68 b6 e2 10 c0       	push   $0xc010e2b6
c01065d4:	68 2e e1 10 c0       	push   $0xc010e12e
c01065d9:	68 e2 00 00 00       	push   $0xe2
c01065de:	68 43 e1 10 c0       	push   $0xc010e143
c01065e3:	e8 15 9e ff ff       	call   c01003fd <__panic>

    free_page(p0);
c01065e8:	83 ec 08             	sub    $0x8,%esp
c01065eb:	6a 01                	push   $0x1
c01065ed:	ff 75 ec             	pushl  -0x14(%ebp)
c01065f0:	e8 e9 0a 00 00       	call   c01070de <free_pages>
c01065f5:	83 c4 10             	add    $0x10,%esp
    free_page(p1);
c01065f8:	83 ec 08             	sub    $0x8,%esp
c01065fb:	6a 01                	push   $0x1
c01065fd:	ff 75 f0             	pushl  -0x10(%ebp)
c0106600:	e8 d9 0a 00 00       	call   c01070de <free_pages>
c0106605:	83 c4 10             	add    $0x10,%esp
    free_page(p2);
c0106608:	83 ec 08             	sub    $0x8,%esp
c010660b:	6a 01                	push   $0x1
c010660d:	ff 75 f4             	pushl  -0xc(%ebp)
c0106610:	e8 c9 0a 00 00       	call   c01070de <free_pages>
c0106615:	83 c4 10             	add    $0x10,%esp
    assert(nr_free == 3);
c0106618:	a1 ec 71 1c c0       	mov    0xc01c71ec,%eax
c010661d:	83 f8 03             	cmp    $0x3,%eax
c0106620:	74 19                	je     c010663b <basic_check+0x2b3>
c0106622:	68 cb e2 10 c0       	push   $0xc010e2cb
c0106627:	68 2e e1 10 c0       	push   $0xc010e12e
c010662c:	68 e7 00 00 00       	push   $0xe7
c0106631:	68 43 e1 10 c0       	push   $0xc010e143
c0106636:	e8 c2 9d ff ff       	call   c01003fd <__panic>

    assert((p0 = alloc_page()) != NULL);
c010663b:	83 ec 0c             	sub    $0xc,%esp
c010663e:	6a 01                	push   $0x1
c0106640:	e8 2d 0a 00 00       	call   c0107072 <alloc_pages>
c0106645:	83 c4 10             	add    $0x10,%esp
c0106648:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010664b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010664f:	75 19                	jne    c010666a <basic_check+0x2e2>
c0106651:	68 91 e1 10 c0       	push   $0xc010e191
c0106656:	68 2e e1 10 c0       	push   $0xc010e12e
c010665b:	68 e9 00 00 00       	push   $0xe9
c0106660:	68 43 e1 10 c0       	push   $0xc010e143
c0106665:	e8 93 9d ff ff       	call   c01003fd <__panic>
    assert((p1 = alloc_page()) != NULL);
c010666a:	83 ec 0c             	sub    $0xc,%esp
c010666d:	6a 01                	push   $0x1
c010666f:	e8 fe 09 00 00       	call   c0107072 <alloc_pages>
c0106674:	83 c4 10             	add    $0x10,%esp
c0106677:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010667a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010667e:	75 19                	jne    c0106699 <basic_check+0x311>
c0106680:	68 ad e1 10 c0       	push   $0xc010e1ad
c0106685:	68 2e e1 10 c0       	push   $0xc010e12e
c010668a:	68 ea 00 00 00       	push   $0xea
c010668f:	68 43 e1 10 c0       	push   $0xc010e143
c0106694:	e8 64 9d ff ff       	call   c01003fd <__panic>
    assert((p2 = alloc_page()) != NULL);
c0106699:	83 ec 0c             	sub    $0xc,%esp
c010669c:	6a 01                	push   $0x1
c010669e:	e8 cf 09 00 00       	call   c0107072 <alloc_pages>
c01066a3:	83 c4 10             	add    $0x10,%esp
c01066a6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01066a9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01066ad:	75 19                	jne    c01066c8 <basic_check+0x340>
c01066af:	68 c9 e1 10 c0       	push   $0xc010e1c9
c01066b4:	68 2e e1 10 c0       	push   $0xc010e12e
c01066b9:	68 eb 00 00 00       	push   $0xeb
c01066be:	68 43 e1 10 c0       	push   $0xc010e143
c01066c3:	e8 35 9d ff ff       	call   c01003fd <__panic>

    assert(alloc_page() == NULL);
c01066c8:	83 ec 0c             	sub    $0xc,%esp
c01066cb:	6a 01                	push   $0x1
c01066cd:	e8 a0 09 00 00       	call   c0107072 <alloc_pages>
c01066d2:	83 c4 10             	add    $0x10,%esp
c01066d5:	85 c0                	test   %eax,%eax
c01066d7:	74 19                	je     c01066f2 <basic_check+0x36a>
c01066d9:	68 b6 e2 10 c0       	push   $0xc010e2b6
c01066de:	68 2e e1 10 c0       	push   $0xc010e12e
c01066e3:	68 ed 00 00 00       	push   $0xed
c01066e8:	68 43 e1 10 c0       	push   $0xc010e143
c01066ed:	e8 0b 9d ff ff       	call   c01003fd <__panic>

    free_page(p0);
c01066f2:	83 ec 08             	sub    $0x8,%esp
c01066f5:	6a 01                	push   $0x1
c01066f7:	ff 75 ec             	pushl  -0x14(%ebp)
c01066fa:	e8 df 09 00 00       	call   c01070de <free_pages>
c01066ff:	83 c4 10             	add    $0x10,%esp
c0106702:	c7 45 e8 e4 71 1c c0 	movl   $0xc01c71e4,-0x18(%ebp)
c0106709:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010670c:	8b 40 04             	mov    0x4(%eax),%eax
c010670f:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c0106712:	0f 94 c0             	sete   %al
c0106715:	0f b6 c0             	movzbl %al,%eax
    assert(!list_empty(&free_list));
c0106718:	85 c0                	test   %eax,%eax
c010671a:	74 19                	je     c0106735 <basic_check+0x3ad>
c010671c:	68 d8 e2 10 c0       	push   $0xc010e2d8
c0106721:	68 2e e1 10 c0       	push   $0xc010e12e
c0106726:	68 f0 00 00 00       	push   $0xf0
c010672b:	68 43 e1 10 c0       	push   $0xc010e143
c0106730:	e8 c8 9c ff ff       	call   c01003fd <__panic>

    struct Page *p;
    assert((p = alloc_page()) == p0);
c0106735:	83 ec 0c             	sub    $0xc,%esp
c0106738:	6a 01                	push   $0x1
c010673a:	e8 33 09 00 00       	call   c0107072 <alloc_pages>
c010673f:	83 c4 10             	add    $0x10,%esp
c0106742:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0106745:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106748:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010674b:	74 19                	je     c0106766 <basic_check+0x3de>
c010674d:	68 f0 e2 10 c0       	push   $0xc010e2f0
c0106752:	68 2e e1 10 c0       	push   $0xc010e12e
c0106757:	68 f3 00 00 00       	push   $0xf3
c010675c:	68 43 e1 10 c0       	push   $0xc010e143
c0106761:	e8 97 9c ff ff       	call   c01003fd <__panic>
    assert(alloc_page() == NULL);
c0106766:	83 ec 0c             	sub    $0xc,%esp
c0106769:	6a 01                	push   $0x1
c010676b:	e8 02 09 00 00       	call   c0107072 <alloc_pages>
c0106770:	83 c4 10             	add    $0x10,%esp
c0106773:	85 c0                	test   %eax,%eax
c0106775:	74 19                	je     c0106790 <basic_check+0x408>
c0106777:	68 b6 e2 10 c0       	push   $0xc010e2b6
c010677c:	68 2e e1 10 c0       	push   $0xc010e12e
c0106781:	68 f4 00 00 00       	push   $0xf4
c0106786:	68 43 e1 10 c0       	push   $0xc010e143
c010678b:	e8 6d 9c ff ff       	call   c01003fd <__panic>

    assert(nr_free == 0);
c0106790:	a1 ec 71 1c c0       	mov    0xc01c71ec,%eax
c0106795:	85 c0                	test   %eax,%eax
c0106797:	74 19                	je     c01067b2 <basic_check+0x42a>
c0106799:	68 09 e3 10 c0       	push   $0xc010e309
c010679e:	68 2e e1 10 c0       	push   $0xc010e12e
c01067a3:	68 f6 00 00 00       	push   $0xf6
c01067a8:	68 43 e1 10 c0       	push   $0xc010e143
c01067ad:	e8 4b 9c ff ff       	call   c01003fd <__panic>
    free_list = free_list_store;
c01067b2:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01067b5:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01067b8:	a3 e4 71 1c c0       	mov    %eax,0xc01c71e4
c01067bd:	89 15 e8 71 1c c0    	mov    %edx,0xc01c71e8
    nr_free = nr_free_store;
c01067c3:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01067c6:	a3 ec 71 1c c0       	mov    %eax,0xc01c71ec

    free_page(p);
c01067cb:	83 ec 08             	sub    $0x8,%esp
c01067ce:	6a 01                	push   $0x1
c01067d0:	ff 75 dc             	pushl  -0x24(%ebp)
c01067d3:	e8 06 09 00 00       	call   c01070de <free_pages>
c01067d8:	83 c4 10             	add    $0x10,%esp
    free_page(p1);
c01067db:	83 ec 08             	sub    $0x8,%esp
c01067de:	6a 01                	push   $0x1
c01067e0:	ff 75 f0             	pushl  -0x10(%ebp)
c01067e3:	e8 f6 08 00 00       	call   c01070de <free_pages>
c01067e8:	83 c4 10             	add    $0x10,%esp
    free_page(p2);
c01067eb:	83 ec 08             	sub    $0x8,%esp
c01067ee:	6a 01                	push   $0x1
c01067f0:	ff 75 f4             	pushl  -0xc(%ebp)
c01067f3:	e8 e6 08 00 00       	call   c01070de <free_pages>
c01067f8:	83 c4 10             	add    $0x10,%esp
}
c01067fb:	90                   	nop
c01067fc:	c9                   	leave  
c01067fd:	c3                   	ret    

c01067fe <default_check>:

// LAB2: below code is used to check the first fit allocation algorithm (your EXERCISE 1) 
// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
static void
default_check(void) {
c01067fe:	55                   	push   %ebp
c01067ff:	89 e5                	mov    %esp,%ebp
c0106801:	81 ec 88 00 00 00    	sub    $0x88,%esp
    int count = 0, total = 0;
c0106807:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010680e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    list_entry_t *le = &free_list;
c0106815:	c7 45 ec e4 71 1c c0 	movl   $0xc01c71e4,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c010681c:	eb 60                	jmp    c010687e <default_check+0x80>
        struct Page *p = le2page(le, page_link);
c010681e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106821:	83 e8 0c             	sub    $0xc,%eax
c0106824:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        assert(PageProperty(p));
c0106827:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010682a:	83 c0 04             	add    $0x4,%eax
c010682d:	c7 45 b0 01 00 00 00 	movl   $0x1,-0x50(%ebp)
c0106834:	89 45 ac             	mov    %eax,-0x54(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0106837:	8b 45 ac             	mov    -0x54(%ebp),%eax
c010683a:	8b 55 b0             	mov    -0x50(%ebp),%edx
c010683d:	0f a3 10             	bt     %edx,(%eax)
c0106840:	19 c0                	sbb    %eax,%eax
c0106842:	89 45 a8             	mov    %eax,-0x58(%ebp)
    return oldbit != 0;
c0106845:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
c0106849:	0f 95 c0             	setne  %al
c010684c:	0f b6 c0             	movzbl %al,%eax
c010684f:	85 c0                	test   %eax,%eax
c0106851:	75 19                	jne    c010686c <default_check+0x6e>
c0106853:	68 16 e3 10 c0       	push   $0xc010e316
c0106858:	68 2e e1 10 c0       	push   $0xc010e12e
c010685d:	68 07 01 00 00       	push   $0x107
c0106862:	68 43 e1 10 c0       	push   $0xc010e143
c0106867:	e8 91 9b ff ff       	call   c01003fd <__panic>
        count ++, total += p->property;
c010686c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0106870:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106873:	8b 50 08             	mov    0x8(%eax),%edx
c0106876:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106879:	01 d0                	add    %edx,%eax
c010687b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010687e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106881:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0106884:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106887:	8b 40 04             	mov    0x4(%eax),%eax
// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
static void
default_check(void) {
    int count = 0, total = 0;
    list_entry_t *le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c010688a:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010688d:	81 7d ec e4 71 1c c0 	cmpl   $0xc01c71e4,-0x14(%ebp)
c0106894:	75 88                	jne    c010681e <default_check+0x20>
        struct Page *p = le2page(le, page_link);
        assert(PageProperty(p));
        count ++, total += p->property;
    }
    assert(total == nr_free_pages());
c0106896:	e8 78 08 00 00       	call   c0107113 <nr_free_pages>
c010689b:	89 c2                	mov    %eax,%edx
c010689d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01068a0:	39 c2                	cmp    %eax,%edx
c01068a2:	74 19                	je     c01068bd <default_check+0xbf>
c01068a4:	68 26 e3 10 c0       	push   $0xc010e326
c01068a9:	68 2e e1 10 c0       	push   $0xc010e12e
c01068ae:	68 0a 01 00 00       	push   $0x10a
c01068b3:	68 43 e1 10 c0       	push   $0xc010e143
c01068b8:	e8 40 9b ff ff       	call   c01003fd <__panic>

    basic_check();
c01068bd:	e8 c6 fa ff ff       	call   c0106388 <basic_check>

    struct Page *p0 = alloc_pages(5), *p1, *p2;
c01068c2:	83 ec 0c             	sub    $0xc,%esp
c01068c5:	6a 05                	push   $0x5
c01068c7:	e8 a6 07 00 00       	call   c0107072 <alloc_pages>
c01068cc:	83 c4 10             	add    $0x10,%esp
c01068cf:	89 45 dc             	mov    %eax,-0x24(%ebp)
    assert(p0 != NULL);
c01068d2:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c01068d6:	75 19                	jne    c01068f1 <default_check+0xf3>
c01068d8:	68 3f e3 10 c0       	push   $0xc010e33f
c01068dd:	68 2e e1 10 c0       	push   $0xc010e12e
c01068e2:	68 0f 01 00 00       	push   $0x10f
c01068e7:	68 43 e1 10 c0       	push   $0xc010e143
c01068ec:	e8 0c 9b ff ff       	call   c01003fd <__panic>
    assert(!PageProperty(p0));
c01068f1:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01068f4:	83 c0 04             	add    $0x4,%eax
c01068f7:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
c01068fe:	89 45 a4             	mov    %eax,-0x5c(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0106901:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0106904:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0106907:	0f a3 10             	bt     %edx,(%eax)
c010690a:	19 c0                	sbb    %eax,%eax
c010690c:	89 45 a0             	mov    %eax,-0x60(%ebp)
    return oldbit != 0;
c010690f:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
c0106913:	0f 95 c0             	setne  %al
c0106916:	0f b6 c0             	movzbl %al,%eax
c0106919:	85 c0                	test   %eax,%eax
c010691b:	74 19                	je     c0106936 <default_check+0x138>
c010691d:	68 4a e3 10 c0       	push   $0xc010e34a
c0106922:	68 2e e1 10 c0       	push   $0xc010e12e
c0106927:	68 10 01 00 00       	push   $0x110
c010692c:	68 43 e1 10 c0       	push   $0xc010e143
c0106931:	e8 c7 9a ff ff       	call   c01003fd <__panic>

    list_entry_t free_list_store = free_list;
c0106936:	a1 e4 71 1c c0       	mov    0xc01c71e4,%eax
c010693b:	8b 15 e8 71 1c c0    	mov    0xc01c71e8,%edx
c0106941:	89 45 80             	mov    %eax,-0x80(%ebp)
c0106944:	89 55 84             	mov    %edx,-0x7c(%ebp)
c0106947:	c7 45 d0 e4 71 1c c0 	movl   $0xc01c71e4,-0x30(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010694e:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0106951:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0106954:	89 50 04             	mov    %edx,0x4(%eax)
c0106957:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010695a:	8b 50 04             	mov    0x4(%eax),%edx
c010695d:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0106960:	89 10                	mov    %edx,(%eax)
c0106962:	c7 45 d8 e4 71 1c c0 	movl   $0xc01c71e4,-0x28(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0106969:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010696c:	8b 40 04             	mov    0x4(%eax),%eax
c010696f:	39 45 d8             	cmp    %eax,-0x28(%ebp)
c0106972:	0f 94 c0             	sete   %al
c0106975:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c0106978:	85 c0                	test   %eax,%eax
c010697a:	75 19                	jne    c0106995 <default_check+0x197>
c010697c:	68 9f e2 10 c0       	push   $0xc010e29f
c0106981:	68 2e e1 10 c0       	push   $0xc010e12e
c0106986:	68 14 01 00 00       	push   $0x114
c010698b:	68 43 e1 10 c0       	push   $0xc010e143
c0106990:	e8 68 9a ff ff       	call   c01003fd <__panic>
    assert(alloc_page() == NULL);
c0106995:	83 ec 0c             	sub    $0xc,%esp
c0106998:	6a 01                	push   $0x1
c010699a:	e8 d3 06 00 00       	call   c0107072 <alloc_pages>
c010699f:	83 c4 10             	add    $0x10,%esp
c01069a2:	85 c0                	test   %eax,%eax
c01069a4:	74 19                	je     c01069bf <default_check+0x1c1>
c01069a6:	68 b6 e2 10 c0       	push   $0xc010e2b6
c01069ab:	68 2e e1 10 c0       	push   $0xc010e12e
c01069b0:	68 15 01 00 00       	push   $0x115
c01069b5:	68 43 e1 10 c0       	push   $0xc010e143
c01069ba:	e8 3e 9a ff ff       	call   c01003fd <__panic>

    unsigned int nr_free_store = nr_free;
c01069bf:	a1 ec 71 1c c0       	mov    0xc01c71ec,%eax
c01069c4:	89 45 cc             	mov    %eax,-0x34(%ebp)
    nr_free = 0;
c01069c7:	c7 05 ec 71 1c c0 00 	movl   $0x0,0xc01c71ec
c01069ce:	00 00 00 

    free_pages(p0 + 2, 3);
c01069d1:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01069d4:	83 c0 40             	add    $0x40,%eax
c01069d7:	83 ec 08             	sub    $0x8,%esp
c01069da:	6a 03                	push   $0x3
c01069dc:	50                   	push   %eax
c01069dd:	e8 fc 06 00 00       	call   c01070de <free_pages>
c01069e2:	83 c4 10             	add    $0x10,%esp
    assert(alloc_pages(4) == NULL);
c01069e5:	83 ec 0c             	sub    $0xc,%esp
c01069e8:	6a 04                	push   $0x4
c01069ea:	e8 83 06 00 00       	call   c0107072 <alloc_pages>
c01069ef:	83 c4 10             	add    $0x10,%esp
c01069f2:	85 c0                	test   %eax,%eax
c01069f4:	74 19                	je     c0106a0f <default_check+0x211>
c01069f6:	68 5c e3 10 c0       	push   $0xc010e35c
c01069fb:	68 2e e1 10 c0       	push   $0xc010e12e
c0106a00:	68 1b 01 00 00       	push   $0x11b
c0106a05:	68 43 e1 10 c0       	push   $0xc010e143
c0106a0a:	e8 ee 99 ff ff       	call   c01003fd <__panic>
    assert(PageProperty(p0 + 2) && p0[2].property == 3);
c0106a0f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106a12:	83 c0 40             	add    $0x40,%eax
c0106a15:	83 c0 04             	add    $0x4,%eax
c0106a18:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
c0106a1f:	89 45 9c             	mov    %eax,-0x64(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0106a22:	8b 45 9c             	mov    -0x64(%ebp),%eax
c0106a25:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0106a28:	0f a3 10             	bt     %edx,(%eax)
c0106a2b:	19 c0                	sbb    %eax,%eax
c0106a2d:	89 45 98             	mov    %eax,-0x68(%ebp)
    return oldbit != 0;
c0106a30:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
c0106a34:	0f 95 c0             	setne  %al
c0106a37:	0f b6 c0             	movzbl %al,%eax
c0106a3a:	85 c0                	test   %eax,%eax
c0106a3c:	74 0e                	je     c0106a4c <default_check+0x24e>
c0106a3e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106a41:	83 c0 40             	add    $0x40,%eax
c0106a44:	8b 40 08             	mov    0x8(%eax),%eax
c0106a47:	83 f8 03             	cmp    $0x3,%eax
c0106a4a:	74 19                	je     c0106a65 <default_check+0x267>
c0106a4c:	68 74 e3 10 c0       	push   $0xc010e374
c0106a51:	68 2e e1 10 c0       	push   $0xc010e12e
c0106a56:	68 1c 01 00 00       	push   $0x11c
c0106a5b:	68 43 e1 10 c0       	push   $0xc010e143
c0106a60:	e8 98 99 ff ff       	call   c01003fd <__panic>
    assert((p1 = alloc_pages(3)) != NULL);
c0106a65:	83 ec 0c             	sub    $0xc,%esp
c0106a68:	6a 03                	push   $0x3
c0106a6a:	e8 03 06 00 00       	call   c0107072 <alloc_pages>
c0106a6f:	83 c4 10             	add    $0x10,%esp
c0106a72:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c0106a75:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
c0106a79:	75 19                	jne    c0106a94 <default_check+0x296>
c0106a7b:	68 a0 e3 10 c0       	push   $0xc010e3a0
c0106a80:	68 2e e1 10 c0       	push   $0xc010e12e
c0106a85:	68 1d 01 00 00       	push   $0x11d
c0106a8a:	68 43 e1 10 c0       	push   $0xc010e143
c0106a8f:	e8 69 99 ff ff       	call   c01003fd <__panic>
    assert(alloc_page() == NULL);
c0106a94:	83 ec 0c             	sub    $0xc,%esp
c0106a97:	6a 01                	push   $0x1
c0106a99:	e8 d4 05 00 00       	call   c0107072 <alloc_pages>
c0106a9e:	83 c4 10             	add    $0x10,%esp
c0106aa1:	85 c0                	test   %eax,%eax
c0106aa3:	74 19                	je     c0106abe <default_check+0x2c0>
c0106aa5:	68 b6 e2 10 c0       	push   $0xc010e2b6
c0106aaa:	68 2e e1 10 c0       	push   $0xc010e12e
c0106aaf:	68 1e 01 00 00       	push   $0x11e
c0106ab4:	68 43 e1 10 c0       	push   $0xc010e143
c0106ab9:	e8 3f 99 ff ff       	call   c01003fd <__panic>
    assert(p0 + 2 == p1);
c0106abe:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106ac1:	83 c0 40             	add    $0x40,%eax
c0106ac4:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
c0106ac7:	74 19                	je     c0106ae2 <default_check+0x2e4>
c0106ac9:	68 be e3 10 c0       	push   $0xc010e3be
c0106ace:	68 2e e1 10 c0       	push   $0xc010e12e
c0106ad3:	68 1f 01 00 00       	push   $0x11f
c0106ad8:	68 43 e1 10 c0       	push   $0xc010e143
c0106add:	e8 1b 99 ff ff       	call   c01003fd <__panic>

    p2 = p0 + 1;
c0106ae2:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106ae5:	83 c0 20             	add    $0x20,%eax
c0106ae8:	89 45 c0             	mov    %eax,-0x40(%ebp)
    free_page(p0);
c0106aeb:	83 ec 08             	sub    $0x8,%esp
c0106aee:	6a 01                	push   $0x1
c0106af0:	ff 75 dc             	pushl  -0x24(%ebp)
c0106af3:	e8 e6 05 00 00       	call   c01070de <free_pages>
c0106af8:	83 c4 10             	add    $0x10,%esp
    free_pages(p1, 3);
c0106afb:	83 ec 08             	sub    $0x8,%esp
c0106afe:	6a 03                	push   $0x3
c0106b00:	ff 75 c4             	pushl  -0x3c(%ebp)
c0106b03:	e8 d6 05 00 00       	call   c01070de <free_pages>
c0106b08:	83 c4 10             	add    $0x10,%esp
    assert(PageProperty(p0) && p0->property == 1);
c0106b0b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106b0e:	83 c0 04             	add    $0x4,%eax
c0106b11:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
c0106b18:	89 45 94             	mov    %eax,-0x6c(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0106b1b:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0106b1e:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0106b21:	0f a3 10             	bt     %edx,(%eax)
c0106b24:	19 c0                	sbb    %eax,%eax
c0106b26:	89 45 90             	mov    %eax,-0x70(%ebp)
    return oldbit != 0;
c0106b29:	83 7d 90 00          	cmpl   $0x0,-0x70(%ebp)
c0106b2d:	0f 95 c0             	setne  %al
c0106b30:	0f b6 c0             	movzbl %al,%eax
c0106b33:	85 c0                	test   %eax,%eax
c0106b35:	74 0b                	je     c0106b42 <default_check+0x344>
c0106b37:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106b3a:	8b 40 08             	mov    0x8(%eax),%eax
c0106b3d:	83 f8 01             	cmp    $0x1,%eax
c0106b40:	74 19                	je     c0106b5b <default_check+0x35d>
c0106b42:	68 cc e3 10 c0       	push   $0xc010e3cc
c0106b47:	68 2e e1 10 c0       	push   $0xc010e12e
c0106b4c:	68 24 01 00 00       	push   $0x124
c0106b51:	68 43 e1 10 c0       	push   $0xc010e143
c0106b56:	e8 a2 98 ff ff       	call   c01003fd <__panic>
    assert(PageProperty(p1) && p1->property == 3);
c0106b5b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0106b5e:	83 c0 04             	add    $0x4,%eax
c0106b61:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
c0106b68:	89 45 8c             	mov    %eax,-0x74(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0106b6b:	8b 45 8c             	mov    -0x74(%ebp),%eax
c0106b6e:	8b 55 bc             	mov    -0x44(%ebp),%edx
c0106b71:	0f a3 10             	bt     %edx,(%eax)
c0106b74:	19 c0                	sbb    %eax,%eax
c0106b76:	89 45 88             	mov    %eax,-0x78(%ebp)
    return oldbit != 0;
c0106b79:	83 7d 88 00          	cmpl   $0x0,-0x78(%ebp)
c0106b7d:	0f 95 c0             	setne  %al
c0106b80:	0f b6 c0             	movzbl %al,%eax
c0106b83:	85 c0                	test   %eax,%eax
c0106b85:	74 0b                	je     c0106b92 <default_check+0x394>
c0106b87:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0106b8a:	8b 40 08             	mov    0x8(%eax),%eax
c0106b8d:	83 f8 03             	cmp    $0x3,%eax
c0106b90:	74 19                	je     c0106bab <default_check+0x3ad>
c0106b92:	68 f4 e3 10 c0       	push   $0xc010e3f4
c0106b97:	68 2e e1 10 c0       	push   $0xc010e12e
c0106b9c:	68 25 01 00 00       	push   $0x125
c0106ba1:	68 43 e1 10 c0       	push   $0xc010e143
c0106ba6:	e8 52 98 ff ff       	call   c01003fd <__panic>

    assert((p0 = alloc_page()) == p2 - 1);
c0106bab:	83 ec 0c             	sub    $0xc,%esp
c0106bae:	6a 01                	push   $0x1
c0106bb0:	e8 bd 04 00 00       	call   c0107072 <alloc_pages>
c0106bb5:	83 c4 10             	add    $0x10,%esp
c0106bb8:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0106bbb:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0106bbe:	83 e8 20             	sub    $0x20,%eax
c0106bc1:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c0106bc4:	74 19                	je     c0106bdf <default_check+0x3e1>
c0106bc6:	68 1a e4 10 c0       	push   $0xc010e41a
c0106bcb:	68 2e e1 10 c0       	push   $0xc010e12e
c0106bd0:	68 27 01 00 00       	push   $0x127
c0106bd5:	68 43 e1 10 c0       	push   $0xc010e143
c0106bda:	e8 1e 98 ff ff       	call   c01003fd <__panic>
    free_page(p0);
c0106bdf:	83 ec 08             	sub    $0x8,%esp
c0106be2:	6a 01                	push   $0x1
c0106be4:	ff 75 dc             	pushl  -0x24(%ebp)
c0106be7:	e8 f2 04 00 00       	call   c01070de <free_pages>
c0106bec:	83 c4 10             	add    $0x10,%esp
    assert((p0 = alloc_pages(2)) == p2 + 1);
c0106bef:	83 ec 0c             	sub    $0xc,%esp
c0106bf2:	6a 02                	push   $0x2
c0106bf4:	e8 79 04 00 00       	call   c0107072 <alloc_pages>
c0106bf9:	83 c4 10             	add    $0x10,%esp
c0106bfc:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0106bff:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0106c02:	83 c0 20             	add    $0x20,%eax
c0106c05:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c0106c08:	74 19                	je     c0106c23 <default_check+0x425>
c0106c0a:	68 38 e4 10 c0       	push   $0xc010e438
c0106c0f:	68 2e e1 10 c0       	push   $0xc010e12e
c0106c14:	68 29 01 00 00       	push   $0x129
c0106c19:	68 43 e1 10 c0       	push   $0xc010e143
c0106c1e:	e8 da 97 ff ff       	call   c01003fd <__panic>

    free_pages(p0, 2);
c0106c23:	83 ec 08             	sub    $0x8,%esp
c0106c26:	6a 02                	push   $0x2
c0106c28:	ff 75 dc             	pushl  -0x24(%ebp)
c0106c2b:	e8 ae 04 00 00       	call   c01070de <free_pages>
c0106c30:	83 c4 10             	add    $0x10,%esp
    free_page(p2);
c0106c33:	83 ec 08             	sub    $0x8,%esp
c0106c36:	6a 01                	push   $0x1
c0106c38:	ff 75 c0             	pushl  -0x40(%ebp)
c0106c3b:	e8 9e 04 00 00       	call   c01070de <free_pages>
c0106c40:	83 c4 10             	add    $0x10,%esp

    assert((p0 = alloc_pages(5)) != NULL);
c0106c43:	83 ec 0c             	sub    $0xc,%esp
c0106c46:	6a 05                	push   $0x5
c0106c48:	e8 25 04 00 00       	call   c0107072 <alloc_pages>
c0106c4d:	83 c4 10             	add    $0x10,%esp
c0106c50:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0106c53:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0106c57:	75 19                	jne    c0106c72 <default_check+0x474>
c0106c59:	68 58 e4 10 c0       	push   $0xc010e458
c0106c5e:	68 2e e1 10 c0       	push   $0xc010e12e
c0106c63:	68 2e 01 00 00       	push   $0x12e
c0106c68:	68 43 e1 10 c0       	push   $0xc010e143
c0106c6d:	e8 8b 97 ff ff       	call   c01003fd <__panic>
    assert(alloc_page() == NULL);
c0106c72:	83 ec 0c             	sub    $0xc,%esp
c0106c75:	6a 01                	push   $0x1
c0106c77:	e8 f6 03 00 00       	call   c0107072 <alloc_pages>
c0106c7c:	83 c4 10             	add    $0x10,%esp
c0106c7f:	85 c0                	test   %eax,%eax
c0106c81:	74 19                	je     c0106c9c <default_check+0x49e>
c0106c83:	68 b6 e2 10 c0       	push   $0xc010e2b6
c0106c88:	68 2e e1 10 c0       	push   $0xc010e12e
c0106c8d:	68 2f 01 00 00       	push   $0x12f
c0106c92:	68 43 e1 10 c0       	push   $0xc010e143
c0106c97:	e8 61 97 ff ff       	call   c01003fd <__panic>

    assert(nr_free == 0);
c0106c9c:	a1 ec 71 1c c0       	mov    0xc01c71ec,%eax
c0106ca1:	85 c0                	test   %eax,%eax
c0106ca3:	74 19                	je     c0106cbe <default_check+0x4c0>
c0106ca5:	68 09 e3 10 c0       	push   $0xc010e309
c0106caa:	68 2e e1 10 c0       	push   $0xc010e12e
c0106caf:	68 31 01 00 00       	push   $0x131
c0106cb4:	68 43 e1 10 c0       	push   $0xc010e143
c0106cb9:	e8 3f 97 ff ff       	call   c01003fd <__panic>
    nr_free = nr_free_store;
c0106cbe:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0106cc1:	a3 ec 71 1c c0       	mov    %eax,0xc01c71ec

    free_list = free_list_store;
c0106cc6:	8b 45 80             	mov    -0x80(%ebp),%eax
c0106cc9:	8b 55 84             	mov    -0x7c(%ebp),%edx
c0106ccc:	a3 e4 71 1c c0       	mov    %eax,0xc01c71e4
c0106cd1:	89 15 e8 71 1c c0    	mov    %edx,0xc01c71e8
    free_pages(p0, 5);
c0106cd7:	83 ec 08             	sub    $0x8,%esp
c0106cda:	6a 05                	push   $0x5
c0106cdc:	ff 75 dc             	pushl  -0x24(%ebp)
c0106cdf:	e8 fa 03 00 00       	call   c01070de <free_pages>
c0106ce4:	83 c4 10             	add    $0x10,%esp

    le = &free_list;
c0106ce7:	c7 45 ec e4 71 1c c0 	movl   $0xc01c71e4,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c0106cee:	eb 1d                	jmp    c0106d0d <default_check+0x50f>
        struct Page *p = le2page(le, page_link);
c0106cf0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106cf3:	83 e8 0c             	sub    $0xc,%eax
c0106cf6:	89 45 b4             	mov    %eax,-0x4c(%ebp)
        count --, total -= p->property;
c0106cf9:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0106cfd:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0106d00:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0106d03:	8b 40 08             	mov    0x8(%eax),%eax
c0106d06:	29 c2                	sub    %eax,%edx
c0106d08:	89 d0                	mov    %edx,%eax
c0106d0a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106d0d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106d10:	89 45 b8             	mov    %eax,-0x48(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0106d13:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0106d16:	8b 40 04             	mov    0x4(%eax),%eax

    free_list = free_list_store;
    free_pages(p0, 5);

    le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c0106d19:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0106d1c:	81 7d ec e4 71 1c c0 	cmpl   $0xc01c71e4,-0x14(%ebp)
c0106d23:	75 cb                	jne    c0106cf0 <default_check+0x4f2>
        struct Page *p = le2page(le, page_link);
        count --, total -= p->property;
    }
    assert(count == 0);
c0106d25:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106d29:	74 19                	je     c0106d44 <default_check+0x546>
c0106d2b:	68 76 e4 10 c0       	push   $0xc010e476
c0106d30:	68 2e e1 10 c0       	push   $0xc010e12e
c0106d35:	68 3c 01 00 00       	push   $0x13c
c0106d3a:	68 43 e1 10 c0       	push   $0xc010e143
c0106d3f:	e8 b9 96 ff ff       	call   c01003fd <__panic>
    assert(total == 0);
c0106d44:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106d48:	74 19                	je     c0106d63 <default_check+0x565>
c0106d4a:	68 81 e4 10 c0       	push   $0xc010e481
c0106d4f:	68 2e e1 10 c0       	push   $0xc010e12e
c0106d54:	68 3d 01 00 00       	push   $0x13d
c0106d59:	68 43 e1 10 c0       	push   $0xc010e143
c0106d5e:	e8 9a 96 ff ff       	call   c01003fd <__panic>
}
c0106d63:	90                   	nop
c0106d64:	c9                   	leave  
c0106d65:	c3                   	ret    

c0106d66 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0106d66:	55                   	push   %ebp
c0106d67:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0106d69:	8b 45 08             	mov    0x8(%ebp),%eax
c0106d6c:	8b 15 f8 71 1c c0    	mov    0xc01c71f8,%edx
c0106d72:	29 d0                	sub    %edx,%eax
c0106d74:	c1 f8 05             	sar    $0x5,%eax
}
c0106d77:	5d                   	pop    %ebp
c0106d78:	c3                   	ret    

c0106d79 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0106d79:	55                   	push   %ebp
c0106d7a:	89 e5                	mov    %esp,%ebp
    return page2ppn(page) << PGSHIFT;
c0106d7c:	ff 75 08             	pushl  0x8(%ebp)
c0106d7f:	e8 e2 ff ff ff       	call   c0106d66 <page2ppn>
c0106d84:	83 c4 04             	add    $0x4,%esp
c0106d87:	c1 e0 0c             	shl    $0xc,%eax
}
c0106d8a:	c9                   	leave  
c0106d8b:	c3                   	ret    

c0106d8c <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c0106d8c:	55                   	push   %ebp
c0106d8d:	89 e5                	mov    %esp,%ebp
c0106d8f:	83 ec 08             	sub    $0x8,%esp
    if (PPN(pa) >= npage) {
c0106d92:	8b 45 08             	mov    0x8(%ebp),%eax
c0106d95:	c1 e8 0c             	shr    $0xc,%eax
c0106d98:	89 c2                	mov    %eax,%edx
c0106d9a:	a1 80 4f 1c c0       	mov    0xc01c4f80,%eax
c0106d9f:	39 c2                	cmp    %eax,%edx
c0106da1:	72 14                	jb     c0106db7 <pa2page+0x2b>
        panic("pa2page called with invalid pa");
c0106da3:	83 ec 04             	sub    $0x4,%esp
c0106da6:	68 bc e4 10 c0       	push   $0xc010e4bc
c0106dab:	6a 5e                	push   $0x5e
c0106dad:	68 db e4 10 c0       	push   $0xc010e4db
c0106db2:	e8 46 96 ff ff       	call   c01003fd <__panic>
    }
    return &pages[PPN(pa)];
c0106db7:	a1 f8 71 1c c0       	mov    0xc01c71f8,%eax
c0106dbc:	8b 55 08             	mov    0x8(%ebp),%edx
c0106dbf:	c1 ea 0c             	shr    $0xc,%edx
c0106dc2:	c1 e2 05             	shl    $0x5,%edx
c0106dc5:	01 d0                	add    %edx,%eax
}
c0106dc7:	c9                   	leave  
c0106dc8:	c3                   	ret    

c0106dc9 <page2kva>:

static inline void *
page2kva(struct Page *page) {
c0106dc9:	55                   	push   %ebp
c0106dca:	89 e5                	mov    %esp,%ebp
c0106dcc:	83 ec 18             	sub    $0x18,%esp
    return KADDR(page2pa(page));
c0106dcf:	ff 75 08             	pushl  0x8(%ebp)
c0106dd2:	e8 a2 ff ff ff       	call   c0106d79 <page2pa>
c0106dd7:	83 c4 04             	add    $0x4,%esp
c0106dda:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0106ddd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106de0:	c1 e8 0c             	shr    $0xc,%eax
c0106de3:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106de6:	a1 80 4f 1c c0       	mov    0xc01c4f80,%eax
c0106deb:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0106dee:	72 14                	jb     c0106e04 <page2kva+0x3b>
c0106df0:	ff 75 f4             	pushl  -0xc(%ebp)
c0106df3:	68 ec e4 10 c0       	push   $0xc010e4ec
c0106df8:	6a 65                	push   $0x65
c0106dfa:	68 db e4 10 c0       	push   $0xc010e4db
c0106dff:	e8 f9 95 ff ff       	call   c01003fd <__panic>
c0106e04:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106e07:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c0106e0c:	c9                   	leave  
c0106e0d:	c3                   	ret    

c0106e0e <pte2page>:
kva2page(void *kva) {
    return pa2page(PADDR(kva));
}

static inline struct Page *
pte2page(pte_t pte) {
c0106e0e:	55                   	push   %ebp
c0106e0f:	89 e5                	mov    %esp,%ebp
c0106e11:	83 ec 08             	sub    $0x8,%esp
    if (!(pte & PTE_P)) {
c0106e14:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e17:	83 e0 01             	and    $0x1,%eax
c0106e1a:	85 c0                	test   %eax,%eax
c0106e1c:	75 14                	jne    c0106e32 <pte2page+0x24>
        panic("pte2page called with invalid pte");
c0106e1e:	83 ec 04             	sub    $0x4,%esp
c0106e21:	68 10 e5 10 c0       	push   $0xc010e510
c0106e26:	6a 70                	push   $0x70
c0106e28:	68 db e4 10 c0       	push   $0xc010e4db
c0106e2d:	e8 cb 95 ff ff       	call   c01003fd <__panic>
    }
    return pa2page(PTE_ADDR(pte));
c0106e32:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e35:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106e3a:	83 ec 0c             	sub    $0xc,%esp
c0106e3d:	50                   	push   %eax
c0106e3e:	e8 49 ff ff ff       	call   c0106d8c <pa2page>
c0106e43:	83 c4 10             	add    $0x10,%esp
}
c0106e46:	c9                   	leave  
c0106e47:	c3                   	ret    

c0106e48 <pde2page>:

static inline struct Page *
pde2page(pde_t pde) {
c0106e48:	55                   	push   %ebp
c0106e49:	89 e5                	mov    %esp,%ebp
c0106e4b:	83 ec 08             	sub    $0x8,%esp
    return pa2page(PDE_ADDR(pde));
c0106e4e:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e51:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106e56:	83 ec 0c             	sub    $0xc,%esp
c0106e59:	50                   	push   %eax
c0106e5a:	e8 2d ff ff ff       	call   c0106d8c <pa2page>
c0106e5f:	83 c4 10             	add    $0x10,%esp
}
c0106e62:	c9                   	leave  
c0106e63:	c3                   	ret    

c0106e64 <page_ref>:

static inline int
page_ref(struct Page *page) {
c0106e64:	55                   	push   %ebp
c0106e65:	89 e5                	mov    %esp,%ebp
    return page->ref;
c0106e67:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e6a:	8b 00                	mov    (%eax),%eax
}
c0106e6c:	5d                   	pop    %ebp
c0106e6d:	c3                   	ret    

c0106e6e <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c0106e6e:	55                   	push   %ebp
c0106e6f:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c0106e71:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e74:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106e77:	89 10                	mov    %edx,(%eax)
}
c0106e79:	90                   	nop
c0106e7a:	5d                   	pop    %ebp
c0106e7b:	c3                   	ret    

c0106e7c <page_ref_inc>:

static inline int
page_ref_inc(struct Page *page) {
c0106e7c:	55                   	push   %ebp
c0106e7d:	89 e5                	mov    %esp,%ebp
    page->ref += 1;
c0106e7f:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e82:	8b 00                	mov    (%eax),%eax
c0106e84:	8d 50 01             	lea    0x1(%eax),%edx
c0106e87:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e8a:	89 10                	mov    %edx,(%eax)
    return page->ref;
c0106e8c:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e8f:	8b 00                	mov    (%eax),%eax
}
c0106e91:	5d                   	pop    %ebp
c0106e92:	c3                   	ret    

c0106e93 <page_ref_dec>:

static inline int
page_ref_dec(struct Page *page) {
c0106e93:	55                   	push   %ebp
c0106e94:	89 e5                	mov    %esp,%ebp
    page->ref -= 1;
c0106e96:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e99:	8b 00                	mov    (%eax),%eax
c0106e9b:	8d 50 ff             	lea    -0x1(%eax),%edx
c0106e9e:	8b 45 08             	mov    0x8(%ebp),%eax
c0106ea1:	89 10                	mov    %edx,(%eax)
    return page->ref;
c0106ea3:	8b 45 08             	mov    0x8(%ebp),%eax
c0106ea6:	8b 00                	mov    (%eax),%eax
}
c0106ea8:	5d                   	pop    %ebp
c0106ea9:	c3                   	ret    

c0106eaa <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0106eaa:	55                   	push   %ebp
c0106eab:	89 e5                	mov    %esp,%ebp
c0106ead:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0106eb0:	9c                   	pushf  
c0106eb1:	58                   	pop    %eax
c0106eb2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0106eb5:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0106eb8:	25 00 02 00 00       	and    $0x200,%eax
c0106ebd:	85 c0                	test   %eax,%eax
c0106ebf:	74 0c                	je     c0106ecd <__intr_save+0x23>
        intr_disable();
c0106ec1:	e8 f6 b2 ff ff       	call   c01021bc <intr_disable>
        return 1;
c0106ec6:	b8 01 00 00 00       	mov    $0x1,%eax
c0106ecb:	eb 05                	jmp    c0106ed2 <__intr_save+0x28>
    }
    return 0;
c0106ecd:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0106ed2:	c9                   	leave  
c0106ed3:	c3                   	ret    

c0106ed4 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0106ed4:	55                   	push   %ebp
c0106ed5:	89 e5                	mov    %esp,%ebp
c0106ed7:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0106eda:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0106ede:	74 05                	je     c0106ee5 <__intr_restore+0x11>
        intr_enable();
c0106ee0:	e8 d0 b2 ff ff       	call   c01021b5 <intr_enable>
    }
}
c0106ee5:	90                   	nop
c0106ee6:	c9                   	leave  
c0106ee7:	c3                   	ret    

c0106ee8 <lgdt>:
/* *
 * lgdt - load the global descriptor table register and reset the
 * data/code segement registers for kernel.
 * */
static inline void
lgdt(struct pseudodesc *pd) {
c0106ee8:	55                   	push   %ebp
c0106ee9:	89 e5                	mov    %esp,%ebp
    asm volatile ("lgdt (%0)" :: "r" (pd));
c0106eeb:	8b 45 08             	mov    0x8(%ebp),%eax
c0106eee:	0f 01 10             	lgdtl  (%eax)
    asm volatile ("movw %%ax, %%gs" :: "a" (USER_DS));
c0106ef1:	b8 23 00 00 00       	mov    $0x23,%eax
c0106ef6:	8e e8                	mov    %eax,%gs
    asm volatile ("movw %%ax, %%fs" :: "a" (USER_DS));
c0106ef8:	b8 23 00 00 00       	mov    $0x23,%eax
c0106efd:	8e e0                	mov    %eax,%fs
    asm volatile ("movw %%ax, %%es" :: "a" (KERNEL_DS));
c0106eff:	b8 10 00 00 00       	mov    $0x10,%eax
c0106f04:	8e c0                	mov    %eax,%es
    asm volatile ("movw %%ax, %%ds" :: "a" (KERNEL_DS));
c0106f06:	b8 10 00 00 00       	mov    $0x10,%eax
c0106f0b:	8e d8                	mov    %eax,%ds
    asm volatile ("movw %%ax, %%ss" :: "a" (KERNEL_DS));
c0106f0d:	b8 10 00 00 00       	mov    $0x10,%eax
c0106f12:	8e d0                	mov    %eax,%ss
    // reload cs
    asm volatile ("ljmp %0, $1f\n 1:\n" :: "i" (KERNEL_CS));
c0106f14:	ea 1b 6f 10 c0 08 00 	ljmp   $0x8,$0xc0106f1b
}
c0106f1b:	90                   	nop
c0106f1c:	5d                   	pop    %ebp
c0106f1d:	c3                   	ret    

c0106f1e <load_esp0>:
 * load_esp0 - change the ESP0 in default task state segment,
 * so that we can use different kernel stack when we trap frame
 * user to kernel.
 * */
void
load_esp0(uintptr_t esp0) {
c0106f1e:	55                   	push   %ebp
c0106f1f:	89 e5                	mov    %esp,%ebp
    ts.ts_esp0 = esp0;
c0106f21:	8b 45 08             	mov    0x8(%ebp),%eax
c0106f24:	a3 a4 4f 1c c0       	mov    %eax,0xc01c4fa4
}
c0106f29:	90                   	nop
c0106f2a:	5d                   	pop    %ebp
c0106f2b:	c3                   	ret    

c0106f2c <gdt_init>:

/* gdt_init - initialize the default GDT and TSS */
static void
gdt_init(void) {
c0106f2c:	55                   	push   %ebp
c0106f2d:	89 e5                	mov    %esp,%ebp
c0106f2f:	83 ec 10             	sub    $0x10,%esp
    // set boot kernel stack and default SS0
    load_esp0((uintptr_t)bootstacktop);
c0106f32:	b8 00 10 13 c0       	mov    $0xc0131000,%eax
c0106f37:	50                   	push   %eax
c0106f38:	e8 e1 ff ff ff       	call   c0106f1e <load_esp0>
c0106f3d:	83 c4 04             	add    $0x4,%esp
    ts.ts_ss0 = KERNEL_DS;
c0106f40:	66 c7 05 a8 4f 1c c0 	movw   $0x10,0xc01c4fa8
c0106f47:	10 00 

    // initialize the TSS filed of the gdt
    gdt[SEG_TSS] = SEGTSS(STS_T32A, (uintptr_t)&ts, sizeof(ts), DPL_KERNEL);
c0106f49:	66 c7 05 68 1a 13 c0 	movw   $0x68,0xc0131a68
c0106f50:	68 00 
c0106f52:	b8 a0 4f 1c c0       	mov    $0xc01c4fa0,%eax
c0106f57:	66 a3 6a 1a 13 c0    	mov    %ax,0xc0131a6a
c0106f5d:	b8 a0 4f 1c c0       	mov    $0xc01c4fa0,%eax
c0106f62:	c1 e8 10             	shr    $0x10,%eax
c0106f65:	a2 6c 1a 13 c0       	mov    %al,0xc0131a6c
c0106f6a:	0f b6 05 6d 1a 13 c0 	movzbl 0xc0131a6d,%eax
c0106f71:	83 e0 f0             	and    $0xfffffff0,%eax
c0106f74:	83 c8 09             	or     $0x9,%eax
c0106f77:	a2 6d 1a 13 c0       	mov    %al,0xc0131a6d
c0106f7c:	0f b6 05 6d 1a 13 c0 	movzbl 0xc0131a6d,%eax
c0106f83:	83 e0 ef             	and    $0xffffffef,%eax
c0106f86:	a2 6d 1a 13 c0       	mov    %al,0xc0131a6d
c0106f8b:	0f b6 05 6d 1a 13 c0 	movzbl 0xc0131a6d,%eax
c0106f92:	83 e0 9f             	and    $0xffffff9f,%eax
c0106f95:	a2 6d 1a 13 c0       	mov    %al,0xc0131a6d
c0106f9a:	0f b6 05 6d 1a 13 c0 	movzbl 0xc0131a6d,%eax
c0106fa1:	83 c8 80             	or     $0xffffff80,%eax
c0106fa4:	a2 6d 1a 13 c0       	mov    %al,0xc0131a6d
c0106fa9:	0f b6 05 6e 1a 13 c0 	movzbl 0xc0131a6e,%eax
c0106fb0:	83 e0 f0             	and    $0xfffffff0,%eax
c0106fb3:	a2 6e 1a 13 c0       	mov    %al,0xc0131a6e
c0106fb8:	0f b6 05 6e 1a 13 c0 	movzbl 0xc0131a6e,%eax
c0106fbf:	83 e0 ef             	and    $0xffffffef,%eax
c0106fc2:	a2 6e 1a 13 c0       	mov    %al,0xc0131a6e
c0106fc7:	0f b6 05 6e 1a 13 c0 	movzbl 0xc0131a6e,%eax
c0106fce:	83 e0 df             	and    $0xffffffdf,%eax
c0106fd1:	a2 6e 1a 13 c0       	mov    %al,0xc0131a6e
c0106fd6:	0f b6 05 6e 1a 13 c0 	movzbl 0xc0131a6e,%eax
c0106fdd:	83 c8 40             	or     $0x40,%eax
c0106fe0:	a2 6e 1a 13 c0       	mov    %al,0xc0131a6e
c0106fe5:	0f b6 05 6e 1a 13 c0 	movzbl 0xc0131a6e,%eax
c0106fec:	83 e0 7f             	and    $0x7f,%eax
c0106fef:	a2 6e 1a 13 c0       	mov    %al,0xc0131a6e
c0106ff4:	b8 a0 4f 1c c0       	mov    $0xc01c4fa0,%eax
c0106ff9:	c1 e8 18             	shr    $0x18,%eax
c0106ffc:	a2 6f 1a 13 c0       	mov    %al,0xc0131a6f

    // reload all segment registers
    lgdt(&gdt_pd);
c0107001:	68 70 1a 13 c0       	push   $0xc0131a70
c0107006:	e8 dd fe ff ff       	call   c0106ee8 <lgdt>
c010700b:	83 c4 04             	add    $0x4,%esp
c010700e:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
    asm volatile ("cli" ::: "memory");
}

static inline void
ltr(uint16_t sel) {
    asm volatile ("ltr %0" :: "r" (sel) : "memory");
c0107014:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c0107018:	0f 00 d8             	ltr    %ax

    // load the TSS
    ltr(GD_TSS);
}
c010701b:	90                   	nop
c010701c:	c9                   	leave  
c010701d:	c3                   	ret    

c010701e <init_pmm_manager>:

//init_pmm_manager - initialize a pmm_manager instance
static void
init_pmm_manager(void) {
c010701e:	55                   	push   %ebp
c010701f:	89 e5                	mov    %esp,%ebp
c0107021:	83 ec 08             	sub    $0x8,%esp
    pmm_manager = &default_pmm_manager;
c0107024:	c7 05 f0 71 1c c0 a0 	movl   $0xc010e4a0,0xc01c71f0
c010702b:	e4 10 c0 
    cprintf("memory management: %s\n", pmm_manager->name);
c010702e:	a1 f0 71 1c c0       	mov    0xc01c71f0,%eax
c0107033:	8b 00                	mov    (%eax),%eax
c0107035:	83 ec 08             	sub    $0x8,%esp
c0107038:	50                   	push   %eax
c0107039:	68 3c e5 10 c0       	push   $0xc010e53c
c010703e:	e8 54 92 ff ff       	call   c0100297 <cprintf>
c0107043:	83 c4 10             	add    $0x10,%esp
    pmm_manager->init();
c0107046:	a1 f0 71 1c c0       	mov    0xc01c71f0,%eax
c010704b:	8b 40 04             	mov    0x4(%eax),%eax
c010704e:	ff d0                	call   *%eax
}
c0107050:	90                   	nop
c0107051:	c9                   	leave  
c0107052:	c3                   	ret    

c0107053 <init_memmap>:

//init_memmap - call pmm->init_memmap to build Page struct for free memory  
static void
init_memmap(struct Page *base, size_t n) {
c0107053:	55                   	push   %ebp
c0107054:	89 e5                	mov    %esp,%ebp
c0107056:	83 ec 08             	sub    $0x8,%esp
    pmm_manager->init_memmap(base, n);
c0107059:	a1 f0 71 1c c0       	mov    0xc01c71f0,%eax
c010705e:	8b 40 08             	mov    0x8(%eax),%eax
c0107061:	83 ec 08             	sub    $0x8,%esp
c0107064:	ff 75 0c             	pushl  0xc(%ebp)
c0107067:	ff 75 08             	pushl  0x8(%ebp)
c010706a:	ff d0                	call   *%eax
c010706c:	83 c4 10             	add    $0x10,%esp
}
c010706f:	90                   	nop
c0107070:	c9                   	leave  
c0107071:	c3                   	ret    

c0107072 <alloc_pages>:

//alloc_pages - call pmm->alloc_pages to allocate a continuous n*PAGESIZE memory 
struct Page *
alloc_pages(size_t n) {
c0107072:	55                   	push   %ebp
c0107073:	89 e5                	mov    %esp,%ebp
c0107075:	83 ec 18             	sub    $0x18,%esp
    struct Page *page=NULL;
c0107078:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    
    while (1)
    {
         local_intr_save(intr_flag);
c010707f:	e8 26 fe ff ff       	call   c0106eaa <__intr_save>
c0107084:	89 45 f0             	mov    %eax,-0x10(%ebp)
         {
              page = pmm_manager->alloc_pages(n);
c0107087:	a1 f0 71 1c c0       	mov    0xc01c71f0,%eax
c010708c:	8b 40 0c             	mov    0xc(%eax),%eax
c010708f:	83 ec 0c             	sub    $0xc,%esp
c0107092:	ff 75 08             	pushl  0x8(%ebp)
c0107095:	ff d0                	call   *%eax
c0107097:	83 c4 10             	add    $0x10,%esp
c010709a:	89 45 f4             	mov    %eax,-0xc(%ebp)
         }
         local_intr_restore(intr_flag);
c010709d:	83 ec 0c             	sub    $0xc,%esp
c01070a0:	ff 75 f0             	pushl  -0x10(%ebp)
c01070a3:	e8 2c fe ff ff       	call   c0106ed4 <__intr_restore>
c01070a8:	83 c4 10             	add    $0x10,%esp

         if (page != NULL || n > 1 || swap_init_ok == 0) break;
c01070ab:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01070af:	75 28                	jne    c01070d9 <alloc_pages+0x67>
c01070b1:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c01070b5:	77 22                	ja     c01070d9 <alloc_pages+0x67>
c01070b7:	a1 6c 4f 1c c0       	mov    0xc01c4f6c,%eax
c01070bc:	85 c0                	test   %eax,%eax
c01070be:	74 19                	je     c01070d9 <alloc_pages+0x67>
         
         extern struct mm_struct *check_mm_struct;
         //cprintf("page %x, call swap_out in alloc_pages %d\n",page, n);
         swap_out(check_mm_struct, n, 0);
c01070c0:	8b 55 08             	mov    0x8(%ebp),%edx
c01070c3:	a1 10 71 1c c0       	mov    0xc01c7110,%eax
c01070c8:	83 ec 04             	sub    $0x4,%esp
c01070cb:	6a 00                	push   $0x0
c01070cd:	52                   	push   %edx
c01070ce:	50                   	push   %eax
c01070cf:	e8 65 e3 ff ff       	call   c0105439 <swap_out>
c01070d4:	83 c4 10             	add    $0x10,%esp
    }
c01070d7:	eb a6                	jmp    c010707f <alloc_pages+0xd>
    //cprintf("n %d,get page %x, No %d in alloc_pages\n",n,page,(page-pages));
    return page;
c01070d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01070dc:	c9                   	leave  
c01070dd:	c3                   	ret    

c01070de <free_pages>:

//free_pages - call pmm->free_pages to free a continuous n*PAGESIZE memory 
void
free_pages(struct Page *base, size_t n) {
c01070de:	55                   	push   %ebp
c01070df:	89 e5                	mov    %esp,%ebp
c01070e1:	83 ec 18             	sub    $0x18,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c01070e4:	e8 c1 fd ff ff       	call   c0106eaa <__intr_save>
c01070e9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        pmm_manager->free_pages(base, n);
c01070ec:	a1 f0 71 1c c0       	mov    0xc01c71f0,%eax
c01070f1:	8b 40 10             	mov    0x10(%eax),%eax
c01070f4:	83 ec 08             	sub    $0x8,%esp
c01070f7:	ff 75 0c             	pushl  0xc(%ebp)
c01070fa:	ff 75 08             	pushl  0x8(%ebp)
c01070fd:	ff d0                	call   *%eax
c01070ff:	83 c4 10             	add    $0x10,%esp
    }
    local_intr_restore(intr_flag);
c0107102:	83 ec 0c             	sub    $0xc,%esp
c0107105:	ff 75 f4             	pushl  -0xc(%ebp)
c0107108:	e8 c7 fd ff ff       	call   c0106ed4 <__intr_restore>
c010710d:	83 c4 10             	add    $0x10,%esp
}
c0107110:	90                   	nop
c0107111:	c9                   	leave  
c0107112:	c3                   	ret    

c0107113 <nr_free_pages>:

//nr_free_pages - call pmm->nr_free_pages to get the size (nr*PAGESIZE) 
//of current free memory
size_t
nr_free_pages(void) {
c0107113:	55                   	push   %ebp
c0107114:	89 e5                	mov    %esp,%ebp
c0107116:	83 ec 18             	sub    $0x18,%esp
    size_t ret;
    bool intr_flag;
    local_intr_save(intr_flag);
c0107119:	e8 8c fd ff ff       	call   c0106eaa <__intr_save>
c010711e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        ret = pmm_manager->nr_free_pages();
c0107121:	a1 f0 71 1c c0       	mov    0xc01c71f0,%eax
c0107126:	8b 40 14             	mov    0x14(%eax),%eax
c0107129:	ff d0                	call   *%eax
c010712b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    local_intr_restore(intr_flag);
c010712e:	83 ec 0c             	sub    $0xc,%esp
c0107131:	ff 75 f4             	pushl  -0xc(%ebp)
c0107134:	e8 9b fd ff ff       	call   c0106ed4 <__intr_restore>
c0107139:	83 c4 10             	add    $0x10,%esp
    return ret;
c010713c:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010713f:	c9                   	leave  
c0107140:	c3                   	ret    

c0107141 <page_init>:

/* pmm_init - initialize the physical memory management */
static void
page_init(void) {
c0107141:	55                   	push   %ebp
c0107142:	89 e5                	mov    %esp,%ebp
c0107144:	57                   	push   %edi
c0107145:	56                   	push   %esi
c0107146:	53                   	push   %ebx
c0107147:	83 ec 7c             	sub    $0x7c,%esp
    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
c010714a:	c7 45 c4 00 80 00 c0 	movl   $0xc0008000,-0x3c(%ebp)
    uint64_t maxpa = 0;
c0107151:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
c0107158:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

    cprintf("e820map:\n");
c010715f:	83 ec 0c             	sub    $0xc,%esp
c0107162:	68 53 e5 10 c0       	push   $0xc010e553
c0107167:	e8 2b 91 ff ff       	call   c0100297 <cprintf>
c010716c:	83 c4 10             	add    $0x10,%esp
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
c010716f:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0107176:	e9 fc 00 00 00       	jmp    c0107277 <page_init+0x136>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c010717b:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c010717e:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0107181:	89 d0                	mov    %edx,%eax
c0107183:	c1 e0 02             	shl    $0x2,%eax
c0107186:	01 d0                	add    %edx,%eax
c0107188:	c1 e0 02             	shl    $0x2,%eax
c010718b:	01 c8                	add    %ecx,%eax
c010718d:	8b 50 08             	mov    0x8(%eax),%edx
c0107190:	8b 40 04             	mov    0x4(%eax),%eax
c0107193:	89 45 b8             	mov    %eax,-0x48(%ebp)
c0107196:	89 55 bc             	mov    %edx,-0x44(%ebp)
c0107199:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c010719c:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010719f:	89 d0                	mov    %edx,%eax
c01071a1:	c1 e0 02             	shl    $0x2,%eax
c01071a4:	01 d0                	add    %edx,%eax
c01071a6:	c1 e0 02             	shl    $0x2,%eax
c01071a9:	01 c8                	add    %ecx,%eax
c01071ab:	8b 48 0c             	mov    0xc(%eax),%ecx
c01071ae:	8b 58 10             	mov    0x10(%eax),%ebx
c01071b1:	8b 45 b8             	mov    -0x48(%ebp),%eax
c01071b4:	8b 55 bc             	mov    -0x44(%ebp),%edx
c01071b7:	01 c8                	add    %ecx,%eax
c01071b9:	11 da                	adc    %ebx,%edx
c01071bb:	89 45 b0             	mov    %eax,-0x50(%ebp)
c01071be:	89 55 b4             	mov    %edx,-0x4c(%ebp)
        cprintf("  memory: %08llx, [%08llx, %08llx], type = %d.\n",
c01071c1:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01071c4:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01071c7:	89 d0                	mov    %edx,%eax
c01071c9:	c1 e0 02             	shl    $0x2,%eax
c01071cc:	01 d0                	add    %edx,%eax
c01071ce:	c1 e0 02             	shl    $0x2,%eax
c01071d1:	01 c8                	add    %ecx,%eax
c01071d3:	83 c0 14             	add    $0x14,%eax
c01071d6:	8b 00                	mov    (%eax),%eax
c01071d8:	89 45 84             	mov    %eax,-0x7c(%ebp)
c01071db:	8b 45 b0             	mov    -0x50(%ebp),%eax
c01071de:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c01071e1:	83 c0 ff             	add    $0xffffffff,%eax
c01071e4:	83 d2 ff             	adc    $0xffffffff,%edx
c01071e7:	89 c1                	mov    %eax,%ecx
c01071e9:	89 d3                	mov    %edx,%ebx
c01071eb:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c01071ee:	89 55 80             	mov    %edx,-0x80(%ebp)
c01071f1:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01071f4:	89 d0                	mov    %edx,%eax
c01071f6:	c1 e0 02             	shl    $0x2,%eax
c01071f9:	01 d0                	add    %edx,%eax
c01071fb:	c1 e0 02             	shl    $0x2,%eax
c01071fe:	03 45 80             	add    -0x80(%ebp),%eax
c0107201:	8b 50 10             	mov    0x10(%eax),%edx
c0107204:	8b 40 0c             	mov    0xc(%eax),%eax
c0107207:	ff 75 84             	pushl  -0x7c(%ebp)
c010720a:	53                   	push   %ebx
c010720b:	51                   	push   %ecx
c010720c:	ff 75 bc             	pushl  -0x44(%ebp)
c010720f:	ff 75 b8             	pushl  -0x48(%ebp)
c0107212:	52                   	push   %edx
c0107213:	50                   	push   %eax
c0107214:	68 60 e5 10 c0       	push   $0xc010e560
c0107219:	e8 79 90 ff ff       	call   c0100297 <cprintf>
c010721e:	83 c4 20             	add    $0x20,%esp
                memmap->map[i].size, begin, end - 1, memmap->map[i].type);
        if (memmap->map[i].type == E820_ARM) {
c0107221:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0107224:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0107227:	89 d0                	mov    %edx,%eax
c0107229:	c1 e0 02             	shl    $0x2,%eax
c010722c:	01 d0                	add    %edx,%eax
c010722e:	c1 e0 02             	shl    $0x2,%eax
c0107231:	01 c8                	add    %ecx,%eax
c0107233:	83 c0 14             	add    $0x14,%eax
c0107236:	8b 00                	mov    (%eax),%eax
c0107238:	83 f8 01             	cmp    $0x1,%eax
c010723b:	75 36                	jne    c0107273 <page_init+0x132>
            if (maxpa < end && begin < KMEMSIZE) {
c010723d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107240:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0107243:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c0107246:	77 2b                	ja     c0107273 <page_init+0x132>
c0107248:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c010724b:	72 05                	jb     c0107252 <page_init+0x111>
c010724d:	3b 45 b0             	cmp    -0x50(%ebp),%eax
c0107250:	73 21                	jae    c0107273 <page_init+0x132>
c0107252:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0107256:	77 1b                	ja     c0107273 <page_init+0x132>
c0107258:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c010725c:	72 09                	jb     c0107267 <page_init+0x126>
c010725e:	81 7d b8 ff ff ff 37 	cmpl   $0x37ffffff,-0x48(%ebp)
c0107265:	77 0c                	ja     c0107273 <page_init+0x132>
                maxpa = end;
c0107267:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010726a:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c010726d:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0107270:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
    uint64_t maxpa = 0;

    cprintf("e820map:\n");
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
c0107273:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c0107277:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010727a:	8b 00                	mov    (%eax),%eax
c010727c:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c010727f:	0f 8f f6 fe ff ff    	jg     c010717b <page_init+0x3a>
            if (maxpa < end && begin < KMEMSIZE) {
                maxpa = end;
            }
        }
    }
    if (maxpa > KMEMSIZE) {
c0107285:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0107289:	72 1d                	jb     c01072a8 <page_init+0x167>
c010728b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010728f:	77 09                	ja     c010729a <page_init+0x159>
c0107291:	81 7d e0 00 00 00 38 	cmpl   $0x38000000,-0x20(%ebp)
c0107298:	76 0e                	jbe    c01072a8 <page_init+0x167>
        maxpa = KMEMSIZE;
c010729a:	c7 45 e0 00 00 00 38 	movl   $0x38000000,-0x20(%ebp)
c01072a1:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    }

    extern char end[];

    npage = maxpa / PGSIZE;
c01072a8:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01072ab:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01072ae:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c01072b2:	c1 ea 0c             	shr    $0xc,%edx
c01072b5:	a3 80 4f 1c c0       	mov    %eax,0xc01c4f80
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);
c01072ba:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
c01072c1:	b8 e4 72 1c c0       	mov    $0xc01c72e4,%eax
c01072c6:	8d 50 ff             	lea    -0x1(%eax),%edx
c01072c9:	8b 45 ac             	mov    -0x54(%ebp),%eax
c01072cc:	01 d0                	add    %edx,%eax
c01072ce:	89 45 a8             	mov    %eax,-0x58(%ebp)
c01072d1:	8b 45 a8             	mov    -0x58(%ebp),%eax
c01072d4:	ba 00 00 00 00       	mov    $0x0,%edx
c01072d9:	f7 75 ac             	divl   -0x54(%ebp)
c01072dc:	8b 45 a8             	mov    -0x58(%ebp),%eax
c01072df:	29 d0                	sub    %edx,%eax
c01072e1:	a3 f8 71 1c c0       	mov    %eax,0xc01c71f8

    for (i = 0; i < npage; i ++) {
c01072e6:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c01072ed:	eb 27                	jmp    c0107316 <page_init+0x1d5>
        SetPageReserved(pages + i);
c01072ef:	a1 f8 71 1c c0       	mov    0xc01c71f8,%eax
c01072f4:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01072f7:	c1 e2 05             	shl    $0x5,%edx
c01072fa:	01 d0                	add    %edx,%eax
c01072fc:	83 c0 04             	add    $0x4,%eax
c01072ff:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
c0107306:	89 45 8c             	mov    %eax,-0x74(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0107309:	8b 45 8c             	mov    -0x74(%ebp),%eax
c010730c:	8b 55 90             	mov    -0x70(%ebp),%edx
c010730f:	0f ab 10             	bts    %edx,(%eax)
    extern char end[];

    npage = maxpa / PGSIZE;
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);

    for (i = 0; i < npage; i ++) {
c0107312:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c0107316:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0107319:	a1 80 4f 1c c0       	mov    0xc01c4f80,%eax
c010731e:	39 c2                	cmp    %eax,%edx
c0107320:	72 cd                	jb     c01072ef <page_init+0x1ae>
        SetPageReserved(pages + i);
    }

    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);
c0107322:	a1 80 4f 1c c0       	mov    0xc01c4f80,%eax
c0107327:	c1 e0 05             	shl    $0x5,%eax
c010732a:	89 c2                	mov    %eax,%edx
c010732c:	a1 f8 71 1c c0       	mov    0xc01c71f8,%eax
c0107331:	01 d0                	add    %edx,%eax
c0107333:	89 45 a4             	mov    %eax,-0x5c(%ebp)
c0107336:	81 7d a4 ff ff ff bf 	cmpl   $0xbfffffff,-0x5c(%ebp)
c010733d:	77 17                	ja     c0107356 <page_init+0x215>
c010733f:	ff 75 a4             	pushl  -0x5c(%ebp)
c0107342:	68 90 e5 10 c0       	push   $0xc010e590
c0107347:	68 ea 00 00 00       	push   $0xea
c010734c:	68 b4 e5 10 c0       	push   $0xc010e5b4
c0107351:	e8 a7 90 ff ff       	call   c01003fd <__panic>
c0107356:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0107359:	05 00 00 00 40       	add    $0x40000000,%eax
c010735e:	89 45 a0             	mov    %eax,-0x60(%ebp)

    for (i = 0; i < memmap->nr_map; i ++) {
c0107361:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0107368:	e9 69 01 00 00       	jmp    c01074d6 <page_init+0x395>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c010736d:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0107370:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0107373:	89 d0                	mov    %edx,%eax
c0107375:	c1 e0 02             	shl    $0x2,%eax
c0107378:	01 d0                	add    %edx,%eax
c010737a:	c1 e0 02             	shl    $0x2,%eax
c010737d:	01 c8                	add    %ecx,%eax
c010737f:	8b 50 08             	mov    0x8(%eax),%edx
c0107382:	8b 40 04             	mov    0x4(%eax),%eax
c0107385:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0107388:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010738b:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c010738e:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0107391:	89 d0                	mov    %edx,%eax
c0107393:	c1 e0 02             	shl    $0x2,%eax
c0107396:	01 d0                	add    %edx,%eax
c0107398:	c1 e0 02             	shl    $0x2,%eax
c010739b:	01 c8                	add    %ecx,%eax
c010739d:	8b 48 0c             	mov    0xc(%eax),%ecx
c01073a0:	8b 58 10             	mov    0x10(%eax),%ebx
c01073a3:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01073a6:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01073a9:	01 c8                	add    %ecx,%eax
c01073ab:	11 da                	adc    %ebx,%edx
c01073ad:	89 45 c8             	mov    %eax,-0x38(%ebp)
c01073b0:	89 55 cc             	mov    %edx,-0x34(%ebp)
        if (memmap->map[i].type == E820_ARM) {
c01073b3:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01073b6:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01073b9:	89 d0                	mov    %edx,%eax
c01073bb:	c1 e0 02             	shl    $0x2,%eax
c01073be:	01 d0                	add    %edx,%eax
c01073c0:	c1 e0 02             	shl    $0x2,%eax
c01073c3:	01 c8                	add    %ecx,%eax
c01073c5:	83 c0 14             	add    $0x14,%eax
c01073c8:	8b 00                	mov    (%eax),%eax
c01073ca:	83 f8 01             	cmp    $0x1,%eax
c01073cd:	0f 85 ff 00 00 00    	jne    c01074d2 <page_init+0x391>
            if (begin < freemem) {
c01073d3:	8b 45 a0             	mov    -0x60(%ebp),%eax
c01073d6:	ba 00 00 00 00       	mov    $0x0,%edx
c01073db:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c01073de:	72 17                	jb     c01073f7 <page_init+0x2b6>
c01073e0:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c01073e3:	77 05                	ja     c01073ea <page_init+0x2a9>
c01073e5:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c01073e8:	76 0d                	jbe    c01073f7 <page_init+0x2b6>
                begin = freemem;
c01073ea:	8b 45 a0             	mov    -0x60(%ebp),%eax
c01073ed:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01073f0:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
            }
            if (end > KMEMSIZE) {
c01073f7:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c01073fb:	72 1d                	jb     c010741a <page_init+0x2d9>
c01073fd:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0107401:	77 09                	ja     c010740c <page_init+0x2cb>
c0107403:	81 7d c8 00 00 00 38 	cmpl   $0x38000000,-0x38(%ebp)
c010740a:	76 0e                	jbe    c010741a <page_init+0x2d9>
                end = KMEMSIZE;
c010740c:	c7 45 c8 00 00 00 38 	movl   $0x38000000,-0x38(%ebp)
c0107413:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
            }
            if (begin < end) {
c010741a:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010741d:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0107420:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c0107423:	0f 87 a9 00 00 00    	ja     c01074d2 <page_init+0x391>
c0107429:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c010742c:	72 09                	jb     c0107437 <page_init+0x2f6>
c010742e:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c0107431:	0f 83 9b 00 00 00    	jae    c01074d2 <page_init+0x391>
                begin = ROUNDUP(begin, PGSIZE);
c0107437:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
c010743e:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0107441:	8b 45 9c             	mov    -0x64(%ebp),%eax
c0107444:	01 d0                	add    %edx,%eax
c0107446:	83 e8 01             	sub    $0x1,%eax
c0107449:	89 45 98             	mov    %eax,-0x68(%ebp)
c010744c:	8b 45 98             	mov    -0x68(%ebp),%eax
c010744f:	ba 00 00 00 00       	mov    $0x0,%edx
c0107454:	f7 75 9c             	divl   -0x64(%ebp)
c0107457:	8b 45 98             	mov    -0x68(%ebp),%eax
c010745a:	29 d0                	sub    %edx,%eax
c010745c:	ba 00 00 00 00       	mov    $0x0,%edx
c0107461:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0107464:	89 55 d4             	mov    %edx,-0x2c(%ebp)
                end = ROUNDDOWN(end, PGSIZE);
c0107467:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010746a:	89 45 94             	mov    %eax,-0x6c(%ebp)
c010746d:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0107470:	ba 00 00 00 00       	mov    $0x0,%edx
c0107475:	89 c3                	mov    %eax,%ebx
c0107477:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
c010747d:	89 de                	mov    %ebx,%esi
c010747f:	89 d0                	mov    %edx,%eax
c0107481:	83 e0 00             	and    $0x0,%eax
c0107484:	89 c7                	mov    %eax,%edi
c0107486:	89 75 c8             	mov    %esi,-0x38(%ebp)
c0107489:	89 7d cc             	mov    %edi,-0x34(%ebp)
                if (begin < end) {
c010748c:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010748f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0107492:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c0107495:	77 3b                	ja     c01074d2 <page_init+0x391>
c0107497:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c010749a:	72 05                	jb     c01074a1 <page_init+0x360>
c010749c:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c010749f:	73 31                	jae    c01074d2 <page_init+0x391>
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
c01074a1:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01074a4:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01074a7:	2b 45 d0             	sub    -0x30(%ebp),%eax
c01074aa:	1b 55 d4             	sbb    -0x2c(%ebp),%edx
c01074ad:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c01074b1:	c1 ea 0c             	shr    $0xc,%edx
c01074b4:	89 c3                	mov    %eax,%ebx
c01074b6:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01074b9:	83 ec 0c             	sub    $0xc,%esp
c01074bc:	50                   	push   %eax
c01074bd:	e8 ca f8 ff ff       	call   c0106d8c <pa2page>
c01074c2:	83 c4 10             	add    $0x10,%esp
c01074c5:	83 ec 08             	sub    $0x8,%esp
c01074c8:	53                   	push   %ebx
c01074c9:	50                   	push   %eax
c01074ca:	e8 84 fb ff ff       	call   c0107053 <init_memmap>
c01074cf:	83 c4 10             	add    $0x10,%esp
        SetPageReserved(pages + i);
    }

    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);

    for (i = 0; i < memmap->nr_map; i ++) {
c01074d2:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c01074d6:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01074d9:	8b 00                	mov    (%eax),%eax
c01074db:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c01074de:	0f 8f 89 fe ff ff    	jg     c010736d <page_init+0x22c>
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
                }
            }
        }
    }
}
c01074e4:	90                   	nop
c01074e5:	8d 65 f4             	lea    -0xc(%ebp),%esp
c01074e8:	5b                   	pop    %ebx
c01074e9:	5e                   	pop    %esi
c01074ea:	5f                   	pop    %edi
c01074eb:	5d                   	pop    %ebp
c01074ec:	c3                   	ret    

c01074ed <boot_map_segment>:
//  la:   linear address of this memory need to map (after x86 segment map)
//  size: memory size
//  pa:   physical address of this memory
//  perm: permission of this memory  
static void
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
c01074ed:	55                   	push   %ebp
c01074ee:	89 e5                	mov    %esp,%ebp
c01074f0:	83 ec 28             	sub    $0x28,%esp
    assert(PGOFF(la) == PGOFF(pa));
c01074f3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01074f6:	33 45 14             	xor    0x14(%ebp),%eax
c01074f9:	25 ff 0f 00 00       	and    $0xfff,%eax
c01074fe:	85 c0                	test   %eax,%eax
c0107500:	74 19                	je     c010751b <boot_map_segment+0x2e>
c0107502:	68 c2 e5 10 c0       	push   $0xc010e5c2
c0107507:	68 d9 e5 10 c0       	push   $0xc010e5d9
c010750c:	68 08 01 00 00       	push   $0x108
c0107511:	68 b4 e5 10 c0       	push   $0xc010e5b4
c0107516:	e8 e2 8e ff ff       	call   c01003fd <__panic>
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
c010751b:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
c0107522:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107525:	25 ff 0f 00 00       	and    $0xfff,%eax
c010752a:	89 c2                	mov    %eax,%edx
c010752c:	8b 45 10             	mov    0x10(%ebp),%eax
c010752f:	01 c2                	add    %eax,%edx
c0107531:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107534:	01 d0                	add    %edx,%eax
c0107536:	83 e8 01             	sub    $0x1,%eax
c0107539:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010753c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010753f:	ba 00 00 00 00       	mov    $0x0,%edx
c0107544:	f7 75 f0             	divl   -0x10(%ebp)
c0107547:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010754a:	29 d0                	sub    %edx,%eax
c010754c:	c1 e8 0c             	shr    $0xc,%eax
c010754f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    la = ROUNDDOWN(la, PGSIZE);
c0107552:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107555:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0107558:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010755b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0107560:	89 45 0c             	mov    %eax,0xc(%ebp)
    pa = ROUNDDOWN(pa, PGSIZE);
c0107563:	8b 45 14             	mov    0x14(%ebp),%eax
c0107566:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0107569:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010756c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0107571:	89 45 14             	mov    %eax,0x14(%ebp)
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c0107574:	eb 57                	jmp    c01075cd <boot_map_segment+0xe0>
        pte_t *ptep = get_pte(pgdir, la, 1);
c0107576:	83 ec 04             	sub    $0x4,%esp
c0107579:	6a 01                	push   $0x1
c010757b:	ff 75 0c             	pushl  0xc(%ebp)
c010757e:	ff 75 08             	pushl  0x8(%ebp)
c0107581:	e8 58 01 00 00       	call   c01076de <get_pte>
c0107586:	83 c4 10             	add    $0x10,%esp
c0107589:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(ptep != NULL);
c010758c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0107590:	75 19                	jne    c01075ab <boot_map_segment+0xbe>
c0107592:	68 ee e5 10 c0       	push   $0xc010e5ee
c0107597:	68 d9 e5 10 c0       	push   $0xc010e5d9
c010759c:	68 0e 01 00 00       	push   $0x10e
c01075a1:	68 b4 e5 10 c0       	push   $0xc010e5b4
c01075a6:	e8 52 8e ff ff       	call   c01003fd <__panic>
        *ptep = pa | PTE_P | perm;
c01075ab:	8b 45 14             	mov    0x14(%ebp),%eax
c01075ae:	0b 45 18             	or     0x18(%ebp),%eax
c01075b1:	83 c8 01             	or     $0x1,%eax
c01075b4:	89 c2                	mov    %eax,%edx
c01075b6:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01075b9:	89 10                	mov    %edx,(%eax)
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
    assert(PGOFF(la) == PGOFF(pa));
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
    la = ROUNDDOWN(la, PGSIZE);
    pa = ROUNDDOWN(pa, PGSIZE);
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c01075bb:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c01075bf:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
c01075c6:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
c01075cd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01075d1:	75 a3                	jne    c0107576 <boot_map_segment+0x89>
        pte_t *ptep = get_pte(pgdir, la, 1);
        assert(ptep != NULL);
        *ptep = pa | PTE_P | perm;
    }
}
c01075d3:	90                   	nop
c01075d4:	c9                   	leave  
c01075d5:	c3                   	ret    

c01075d6 <boot_alloc_page>:

//boot_alloc_page - allocate one page using pmm->alloc_pages(1) 
// return value: the kernel virtual address of this allocated page
//note: this function is used to get the memory for PDT(Page Directory Table)&PT(Page Table)
static void *
boot_alloc_page(void) {
c01075d6:	55                   	push   %ebp
c01075d7:	89 e5                	mov    %esp,%ebp
c01075d9:	83 ec 18             	sub    $0x18,%esp
    struct Page *p = alloc_page();
c01075dc:	83 ec 0c             	sub    $0xc,%esp
c01075df:	6a 01                	push   $0x1
c01075e1:	e8 8c fa ff ff       	call   c0107072 <alloc_pages>
c01075e6:	83 c4 10             	add    $0x10,%esp
c01075e9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (p == NULL) {
c01075ec:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01075f0:	75 17                	jne    c0107609 <boot_alloc_page+0x33>
        panic("boot_alloc_page failed.\n");
c01075f2:	83 ec 04             	sub    $0x4,%esp
c01075f5:	68 fb e5 10 c0       	push   $0xc010e5fb
c01075fa:	68 1a 01 00 00       	push   $0x11a
c01075ff:	68 b4 e5 10 c0       	push   $0xc010e5b4
c0107604:	e8 f4 8d ff ff       	call   c01003fd <__panic>
    }
    return page2kva(p);
c0107609:	83 ec 0c             	sub    $0xc,%esp
c010760c:	ff 75 f4             	pushl  -0xc(%ebp)
c010760f:	e8 b5 f7 ff ff       	call   c0106dc9 <page2kva>
c0107614:	83 c4 10             	add    $0x10,%esp
}
c0107617:	c9                   	leave  
c0107618:	c3                   	ret    

c0107619 <pmm_init>:

//pmm_init - setup a pmm to manage physical memory, build PDT&PT to setup paging mechanism 
//         - check the correctness of pmm & paging mechanism, print PDT&PT
void
pmm_init(void) {
c0107619:	55                   	push   %ebp
c010761a:	89 e5                	mov    %esp,%ebp
c010761c:	83 ec 18             	sub    $0x18,%esp
    // We've already enabled paging
    boot_cr3 = PADDR(boot_pgdir);
c010761f:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c0107624:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0107627:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c010762e:	77 17                	ja     c0107647 <pmm_init+0x2e>
c0107630:	ff 75 f4             	pushl  -0xc(%ebp)
c0107633:	68 90 e5 10 c0       	push   $0xc010e590
c0107638:	68 24 01 00 00       	push   $0x124
c010763d:	68 b4 e5 10 c0       	push   $0xc010e5b4
c0107642:	e8 b6 8d ff ff       	call   c01003fd <__panic>
c0107647:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010764a:	05 00 00 00 40       	add    $0x40000000,%eax
c010764f:	a3 f4 71 1c c0       	mov    %eax,0xc01c71f4
    //We need to alloc/free the physical memory (granularity is 4KB or other size). 
    //So a framework of physical memory manager (struct pmm_manager)is defined in pmm.h
    //First we should init a physical memory manager(pmm) based on the framework.
    //Then pmm can alloc/free the physical memory. 
    //Now the first_fit/best_fit/worst_fit/buddy_system pmm are available.
    init_pmm_manager();
c0107654:	e8 c5 f9 ff ff       	call   c010701e <init_pmm_manager>

    // detect physical memory space, reserve already used memory,
    // then use pmm->init_memmap to create free page list
    page_init();
c0107659:	e8 e3 fa ff ff       	call   c0107141 <page_init>

    //use pmm->check to verify the correctness of the alloc/free function in a pmm
    check_alloc_page();
c010765e:	e8 16 08 00 00       	call   c0107e79 <check_alloc_page>

    check_pgdir();
c0107663:	e8 34 08 00 00       	call   c0107e9c <check_pgdir>

    static_assert(KERNBASE % PTSIZE == 0 && KERNTOP % PTSIZE == 0);

    // recursively insert boot_pgdir in itself
    // to form a virtual page table at virtual address VPT
    boot_pgdir[PDX(VPT)] = PADDR(boot_pgdir) | PTE_P | PTE_W;
c0107668:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c010766d:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
c0107673:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c0107678:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010767b:	81 7d f0 ff ff ff bf 	cmpl   $0xbfffffff,-0x10(%ebp)
c0107682:	77 17                	ja     c010769b <pmm_init+0x82>
c0107684:	ff 75 f0             	pushl  -0x10(%ebp)
c0107687:	68 90 e5 10 c0       	push   $0xc010e590
c010768c:	68 3a 01 00 00       	push   $0x13a
c0107691:	68 b4 e5 10 c0       	push   $0xc010e5b4
c0107696:	e8 62 8d ff ff       	call   c01003fd <__panic>
c010769b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010769e:	05 00 00 00 40       	add    $0x40000000,%eax
c01076a3:	83 c8 03             	or     $0x3,%eax
c01076a6:	89 02                	mov    %eax,(%edx)

    // map all physical memory to linear memory with base linear addr KERNBASE
    // linear_addr KERNBASE ~ KERNBASE + KMEMSIZE = phy_addr 0 ~ KMEMSIZE
    boot_map_segment(boot_pgdir, KERNBASE, KMEMSIZE, 0, PTE_W);
c01076a8:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c01076ad:	83 ec 0c             	sub    $0xc,%esp
c01076b0:	6a 02                	push   $0x2
c01076b2:	6a 00                	push   $0x0
c01076b4:	68 00 00 00 38       	push   $0x38000000
c01076b9:	68 00 00 00 c0       	push   $0xc0000000
c01076be:	50                   	push   %eax
c01076bf:	e8 29 fe ff ff       	call   c01074ed <boot_map_segment>
c01076c4:	83 c4 20             	add    $0x20,%esp

    // Since we are using bootloader's GDT,
    // we should reload gdt (second time, the last time) to get user segments and the TSS
    // map virtual_addr 0 ~ 4G = linear_addr 0 ~ 4G
    // then set kernel stack (ss:esp) in TSS, setup TSS in gdt, load TSS
    gdt_init();
c01076c7:	e8 60 f8 ff ff       	call   c0106f2c <gdt_init>

    //now the basic virtual memory map(see memalyout.h) is established.
    //check the correctness of the basic virtual memory map.
    check_boot_pgdir();
c01076cc:	e8 31 0d 00 00       	call   c0108402 <check_boot_pgdir>

    print_pgdir();
c01076d1:	e8 27 11 00 00       	call   c01087fd <print_pgdir>
    
    kmalloc_init();
c01076d6:	e8 28 d9 ff ff       	call   c0105003 <kmalloc_init>

}
c01076db:	90                   	nop
c01076dc:	c9                   	leave  
c01076dd:	c3                   	ret    

c01076de <get_pte>:
//  pgdir:  the kernel virtual base address of PDT
//  la:     the linear address need to map
//  create: a logical value to decide if alloc a page for PT
// return vaule: the kernel virtual address of this pte
pte_t *
get_pte(pde_t *pgdir, uintptr_t la, bool create) {
c01076de:	55                   	push   %ebp
c01076df:	89 e5                	mov    %esp,%ebp
c01076e1:	83 ec 38             	sub    $0x38,%esp
                          // (7) set page directory entry's permission
    }
    return NULL;          // (8) return page table entry
#endif
    // (1) find page directory entry
    size_t pdx = PDX(la);       // index of this la in page dir table
c01076e4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01076e7:	c1 e8 16             	shr    $0x16,%eax
c01076ea:	89 45 f4             	mov    %eax,-0xc(%ebp)
    pde_t * pdep = pgdir + pdx; // NOTE: this is a virtual addr
c01076ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01076f0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01076f7:	8b 45 08             	mov    0x8(%ebp),%eax
c01076fa:	01 d0                	add    %edx,%eax
c01076fc:	89 45 f0             	mov    %eax,-0x10(%ebp)
    // (2) check if entry is not present
    if (!(*pdep & PTE_P)) {
c01076ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107702:	8b 00                	mov    (%eax),%eax
c0107704:	83 e0 01             	and    $0x1,%eax
c0107707:	85 c0                	test   %eax,%eax
c0107709:	0f 85 ae 00 00 00    	jne    c01077bd <get_pte+0xdf>
        // (3) check if creating is needed
        if (!create) {
c010770f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0107713:	75 0a                	jne    c010771f <get_pte+0x41>
            return NULL;
c0107715:	b8 00 00 00 00       	mov    $0x0,%eax
c010771a:	e9 01 01 00 00       	jmp    c0107820 <get_pte+0x142>
        }
        // alloc page for page table
        struct Page * pt_page =  alloc_page();
c010771f:	83 ec 0c             	sub    $0xc,%esp
c0107722:	6a 01                	push   $0x1
c0107724:	e8 49 f9 ff ff       	call   c0107072 <alloc_pages>
c0107729:	83 c4 10             	add    $0x10,%esp
c010772c:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (pt_page == NULL) {
c010772f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0107733:	75 0a                	jne    c010773f <get_pte+0x61>
            return NULL;
c0107735:	b8 00 00 00 00       	mov    $0x0,%eax
c010773a:	e9 e1 00 00 00       	jmp    c0107820 <get_pte+0x142>
        }
        // (4) set page reference
        set_page_ref(pt_page, 1);
c010773f:	83 ec 08             	sub    $0x8,%esp
c0107742:	6a 01                	push   $0x1
c0107744:	ff 75 ec             	pushl  -0x14(%ebp)
c0107747:	e8 22 f7 ff ff       	call   c0106e6e <set_page_ref>
c010774c:	83 c4 10             	add    $0x10,%esp
        // (5) get linear address of page
        uintptr_t pt_addr = page2pa(pt_page);
c010774f:	83 ec 0c             	sub    $0xc,%esp
c0107752:	ff 75 ec             	pushl  -0x14(%ebp)
c0107755:	e8 1f f6 ff ff       	call   c0106d79 <page2pa>
c010775a:	83 c4 10             	add    $0x10,%esp
c010775d:	89 45 e8             	mov    %eax,-0x18(%ebp)
        // (6) clear page content using memset
        memset(KADDR(pt_addr), 0, PGSIZE);
c0107760:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107763:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0107766:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107769:	c1 e8 0c             	shr    $0xc,%eax
c010776c:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010776f:	a1 80 4f 1c c0       	mov    0xc01c4f80,%eax
c0107774:	39 45 e0             	cmp    %eax,-0x20(%ebp)
c0107777:	72 17                	jb     c0107790 <get_pte+0xb2>
c0107779:	ff 75 e4             	pushl  -0x1c(%ebp)
c010777c:	68 ec e4 10 c0       	push   $0xc010e4ec
c0107781:	68 8d 01 00 00       	push   $0x18d
c0107786:	68 b4 e5 10 c0       	push   $0xc010e5b4
c010778b:	e8 6d 8c ff ff       	call   c01003fd <__panic>
c0107790:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107793:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0107798:	83 ec 04             	sub    $0x4,%esp
c010779b:	68 00 10 00 00       	push   $0x1000
c01077a0:	6a 00                	push   $0x0
c01077a2:	50                   	push   %eax
c01077a3:	e8 e4 4b 00 00       	call   c010c38c <memset>
c01077a8:	83 c4 10             	add    $0x10,%esp
        // (7) set page directory entry's permission
        *pdep = (PDE_ADDR(pt_addr)) | PTE_U | PTE_W | PTE_P; // PDE_ADDR: get pa &= ~0xFFF
c01077ab:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01077ae:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01077b3:	83 c8 07             	or     $0x7,%eax
c01077b6:	89 c2                	mov    %eax,%edx
c01077b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01077bb:	89 10                	mov    %edx,(%eax)
    }
    // (8) return page table entry
    size_t ptx = PTX(la);   // index of this la in page dir table
c01077bd:	8b 45 0c             	mov    0xc(%ebp),%eax
c01077c0:	c1 e8 0c             	shr    $0xc,%eax
c01077c3:	25 ff 03 00 00       	and    $0x3ff,%eax
c01077c8:	89 45 dc             	mov    %eax,-0x24(%ebp)
    uintptr_t pt_pa = PDE_ADDR(*pdep);
c01077cb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01077ce:	8b 00                	mov    (%eax),%eax
c01077d0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01077d5:	89 45 d8             	mov    %eax,-0x28(%ebp)
    pte_t * ptep = (pte_t *)KADDR(pt_pa) + ptx;
c01077d8:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01077db:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c01077de:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01077e1:	c1 e8 0c             	shr    $0xc,%eax
c01077e4:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01077e7:	a1 80 4f 1c c0       	mov    0xc01c4f80,%eax
c01077ec:	39 45 d0             	cmp    %eax,-0x30(%ebp)
c01077ef:	72 17                	jb     c0107808 <get_pte+0x12a>
c01077f1:	ff 75 d4             	pushl  -0x2c(%ebp)
c01077f4:	68 ec e4 10 c0       	push   $0xc010e4ec
c01077f9:	68 94 01 00 00       	push   $0x194
c01077fe:	68 b4 e5 10 c0       	push   $0xc010e5b4
c0107803:	e8 f5 8b ff ff       	call   c01003fd <__panic>
c0107808:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010780b:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0107810:	89 c2                	mov    %eax,%edx
c0107812:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107815:	c1 e0 02             	shl    $0x2,%eax
c0107818:	01 d0                	add    %edx,%eax
c010781a:	89 45 cc             	mov    %eax,-0x34(%ebp)
    return ptep;
c010781d:	8b 45 cc             	mov    -0x34(%ebp),%eax
}
c0107820:	c9                   	leave  
c0107821:	c3                   	ret    

c0107822 <get_page>:

//get_page - get related Page struct for linear address la using PDT pgdir
struct Page *
get_page(pde_t *pgdir, uintptr_t la, pte_t **ptep_store) {
c0107822:	55                   	push   %ebp
c0107823:	89 e5                	mov    %esp,%ebp
c0107825:	83 ec 18             	sub    $0x18,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c0107828:	83 ec 04             	sub    $0x4,%esp
c010782b:	6a 00                	push   $0x0
c010782d:	ff 75 0c             	pushl  0xc(%ebp)
c0107830:	ff 75 08             	pushl  0x8(%ebp)
c0107833:	e8 a6 fe ff ff       	call   c01076de <get_pte>
c0107838:	83 c4 10             	add    $0x10,%esp
c010783b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep_store != NULL) {
c010783e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0107842:	74 08                	je     c010784c <get_page+0x2a>
        *ptep_store = ptep;
c0107844:	8b 45 10             	mov    0x10(%ebp),%eax
c0107847:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010784a:	89 10                	mov    %edx,(%eax)
    }
    if (ptep != NULL && *ptep & PTE_P) {
c010784c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107850:	74 1f                	je     c0107871 <get_page+0x4f>
c0107852:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107855:	8b 00                	mov    (%eax),%eax
c0107857:	83 e0 01             	and    $0x1,%eax
c010785a:	85 c0                	test   %eax,%eax
c010785c:	74 13                	je     c0107871 <get_page+0x4f>
        return pte2page(*ptep);
c010785e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107861:	8b 00                	mov    (%eax),%eax
c0107863:	83 ec 0c             	sub    $0xc,%esp
c0107866:	50                   	push   %eax
c0107867:	e8 a2 f5 ff ff       	call   c0106e0e <pte2page>
c010786c:	83 c4 10             	add    $0x10,%esp
c010786f:	eb 05                	jmp    c0107876 <get_page+0x54>
    }
    return NULL;
c0107871:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107876:	c9                   	leave  
c0107877:	c3                   	ret    

c0107878 <page_remove_pte>:

//page_remove_pte - free an Page sturct which is related linear address la
//                - and clean(invalidate) pte which is related linear address la
//note: PT is changed, so the TLB need to be invalidate 
static inline void
page_remove_pte(pde_t *pgdir, uintptr_t la, pte_t *ptep) {
c0107878:	55                   	push   %ebp
c0107879:	89 e5                	mov    %esp,%ebp
c010787b:	83 ec 18             	sub    $0x18,%esp
                                  //(5) clear second page table entry
                                  //(6) flush tlb
    }
#endif
    //(1) check if this page table entry is present
    if (!(*ptep & PTE_P)) {
c010787e:	8b 45 10             	mov    0x10(%ebp),%eax
c0107881:	8b 00                	mov    (%eax),%eax
c0107883:	83 e0 01             	and    $0x1,%eax
c0107886:	85 c0                	test   %eax,%eax
c0107888:	74 57                	je     c01078e1 <page_remove_pte+0x69>
        return;
    }
    //(2) find corresponding page to pte
    struct Page *page = pte2page(*ptep);
c010788a:	8b 45 10             	mov    0x10(%ebp),%eax
c010788d:	8b 00                	mov    (%eax),%eax
c010788f:	83 ec 0c             	sub    $0xc,%esp
c0107892:	50                   	push   %eax
c0107893:	e8 76 f5 ff ff       	call   c0106e0e <pte2page>
c0107898:	83 c4 10             	add    $0x10,%esp
c010789b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    //(3) decrease page reference
    page_ref_dec(page);
c010789e:	83 ec 0c             	sub    $0xc,%esp
c01078a1:	ff 75 f4             	pushl  -0xc(%ebp)
c01078a4:	e8 ea f5 ff ff       	call   c0106e93 <page_ref_dec>
c01078a9:	83 c4 10             	add    $0x10,%esp
    //(4) and free this page when page reference reachs 0
    if (page->ref == 0) {
c01078ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01078af:	8b 00                	mov    (%eax),%eax
c01078b1:	85 c0                	test   %eax,%eax
c01078b3:	75 10                	jne    c01078c5 <page_remove_pte+0x4d>
        free_page(page);
c01078b5:	83 ec 08             	sub    $0x8,%esp
c01078b8:	6a 01                	push   $0x1
c01078ba:	ff 75 f4             	pushl  -0xc(%ebp)
c01078bd:	e8 1c f8 ff ff       	call   c01070de <free_pages>
c01078c2:	83 c4 10             	add    $0x10,%esp
    }
    //(5) clear second page table entry
    *ptep = 0;
c01078c5:	8b 45 10             	mov    0x10(%ebp),%eax
c01078c8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    //(6) flush tlb
    tlb_invalidate(pgdir, la);
c01078ce:	83 ec 08             	sub    $0x8,%esp
c01078d1:	ff 75 0c             	pushl  0xc(%ebp)
c01078d4:	ff 75 08             	pushl  0x8(%ebp)
c01078d7:	e8 9c 04 00 00       	call   c0107d78 <tlb_invalidate>
c01078dc:	83 c4 10             	add    $0x10,%esp
c01078df:	eb 01                	jmp    c01078e2 <page_remove_pte+0x6a>
                                  //(6) flush tlb
    }
#endif
    //(1) check if this page table entry is present
    if (!(*ptep & PTE_P)) {
        return;
c01078e1:	90                   	nop
    }
    //(5) clear second page table entry
    *ptep = 0;
    //(6) flush tlb
    tlb_invalidate(pgdir, la);
}
c01078e2:	c9                   	leave  
c01078e3:	c3                   	ret    

c01078e4 <unmap_range>:

void
unmap_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c01078e4:	55                   	push   %ebp
c01078e5:	89 e5                	mov    %esp,%ebp
c01078e7:	83 ec 18             	sub    $0x18,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c01078ea:	8b 45 0c             	mov    0xc(%ebp),%eax
c01078ed:	25 ff 0f 00 00       	and    $0xfff,%eax
c01078f2:	85 c0                	test   %eax,%eax
c01078f4:	75 0c                	jne    c0107902 <unmap_range+0x1e>
c01078f6:	8b 45 10             	mov    0x10(%ebp),%eax
c01078f9:	25 ff 0f 00 00       	and    $0xfff,%eax
c01078fe:	85 c0                	test   %eax,%eax
c0107900:	74 19                	je     c010791b <unmap_range+0x37>
c0107902:	68 14 e6 10 c0       	push   $0xc010e614
c0107907:	68 d9 e5 10 c0       	push   $0xc010e5d9
c010790c:	68 d7 01 00 00       	push   $0x1d7
c0107911:	68 b4 e5 10 c0       	push   $0xc010e5b4
c0107916:	e8 e2 8a ff ff       	call   c01003fd <__panic>
    assert(USER_ACCESS(start, end));
c010791b:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0107922:	76 11                	jbe    c0107935 <unmap_range+0x51>
c0107924:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107927:	3b 45 10             	cmp    0x10(%ebp),%eax
c010792a:	73 09                	jae    c0107935 <unmap_range+0x51>
c010792c:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c0107933:	76 19                	jbe    c010794e <unmap_range+0x6a>
c0107935:	68 3d e6 10 c0       	push   $0xc010e63d
c010793a:	68 d9 e5 10 c0       	push   $0xc010e5d9
c010793f:	68 d8 01 00 00       	push   $0x1d8
c0107944:	68 b4 e5 10 c0       	push   $0xc010e5b4
c0107949:	e8 af 8a ff ff       	call   c01003fd <__panic>

    do {
        pte_t *ptep = get_pte(pgdir, start, 0);
c010794e:	83 ec 04             	sub    $0x4,%esp
c0107951:	6a 00                	push   $0x0
c0107953:	ff 75 0c             	pushl  0xc(%ebp)
c0107956:	ff 75 08             	pushl  0x8(%ebp)
c0107959:	e8 80 fd ff ff       	call   c01076de <get_pte>
c010795e:	83 c4 10             	add    $0x10,%esp
c0107961:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ptep == NULL) {
c0107964:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107968:	75 18                	jne    c0107982 <unmap_range+0x9e>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
c010796a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010796d:	05 00 00 40 00       	add    $0x400000,%eax
c0107972:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107975:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107978:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c010797d:	89 45 0c             	mov    %eax,0xc(%ebp)
            continue ;
c0107980:	eb 24                	jmp    c01079a6 <unmap_range+0xc2>
        }
        if (*ptep != 0) {
c0107982:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107985:	8b 00                	mov    (%eax),%eax
c0107987:	85 c0                	test   %eax,%eax
c0107989:	74 14                	je     c010799f <unmap_range+0xbb>
            page_remove_pte(pgdir, start, ptep);
c010798b:	83 ec 04             	sub    $0x4,%esp
c010798e:	ff 75 f4             	pushl  -0xc(%ebp)
c0107991:	ff 75 0c             	pushl  0xc(%ebp)
c0107994:	ff 75 08             	pushl  0x8(%ebp)
c0107997:	e8 dc fe ff ff       	call   c0107878 <page_remove_pte>
c010799c:	83 c4 10             	add    $0x10,%esp
        }
        start += PGSIZE;
c010799f:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
    } while (start != 0 && start < end);
c01079a6:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01079aa:	74 08                	je     c01079b4 <unmap_range+0xd0>
c01079ac:	8b 45 0c             	mov    0xc(%ebp),%eax
c01079af:	3b 45 10             	cmp    0x10(%ebp),%eax
c01079b2:	72 9a                	jb     c010794e <unmap_range+0x6a>
}
c01079b4:	90                   	nop
c01079b5:	c9                   	leave  
c01079b6:	c3                   	ret    

c01079b7 <exit_range>:

void
exit_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c01079b7:	55                   	push   %ebp
c01079b8:	89 e5                	mov    %esp,%ebp
c01079ba:	83 ec 18             	sub    $0x18,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c01079bd:	8b 45 0c             	mov    0xc(%ebp),%eax
c01079c0:	25 ff 0f 00 00       	and    $0xfff,%eax
c01079c5:	85 c0                	test   %eax,%eax
c01079c7:	75 0c                	jne    c01079d5 <exit_range+0x1e>
c01079c9:	8b 45 10             	mov    0x10(%ebp),%eax
c01079cc:	25 ff 0f 00 00       	and    $0xfff,%eax
c01079d1:	85 c0                	test   %eax,%eax
c01079d3:	74 19                	je     c01079ee <exit_range+0x37>
c01079d5:	68 14 e6 10 c0       	push   $0xc010e614
c01079da:	68 d9 e5 10 c0       	push   $0xc010e5d9
c01079df:	68 e9 01 00 00       	push   $0x1e9
c01079e4:	68 b4 e5 10 c0       	push   $0xc010e5b4
c01079e9:	e8 0f 8a ff ff       	call   c01003fd <__panic>
    assert(USER_ACCESS(start, end));
c01079ee:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c01079f5:	76 11                	jbe    c0107a08 <exit_range+0x51>
c01079f7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01079fa:	3b 45 10             	cmp    0x10(%ebp),%eax
c01079fd:	73 09                	jae    c0107a08 <exit_range+0x51>
c01079ff:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c0107a06:	76 19                	jbe    c0107a21 <exit_range+0x6a>
c0107a08:	68 3d e6 10 c0       	push   $0xc010e63d
c0107a0d:	68 d9 e5 10 c0       	push   $0xc010e5d9
c0107a12:	68 ea 01 00 00       	push   $0x1ea
c0107a17:	68 b4 e5 10 c0       	push   $0xc010e5b4
c0107a1c:	e8 dc 89 ff ff       	call   c01003fd <__panic>

    start = ROUNDDOWN(start, PTSIZE);
c0107a21:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107a24:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0107a27:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107a2a:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0107a2f:	89 45 0c             	mov    %eax,0xc(%ebp)
    do {
        int pde_idx = PDX(start);
c0107a32:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107a35:	c1 e8 16             	shr    $0x16,%eax
c0107a38:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pgdir[pde_idx] & PTE_P) {
c0107a3b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107a3e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0107a45:	8b 45 08             	mov    0x8(%ebp),%eax
c0107a48:	01 d0                	add    %edx,%eax
c0107a4a:	8b 00                	mov    (%eax),%eax
c0107a4c:	83 e0 01             	and    $0x1,%eax
c0107a4f:	85 c0                	test   %eax,%eax
c0107a51:	74 40                	je     c0107a93 <exit_range+0xdc>
            free_page(pde2page(pgdir[pde_idx]));
c0107a53:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107a56:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0107a5d:	8b 45 08             	mov    0x8(%ebp),%eax
c0107a60:	01 d0                	add    %edx,%eax
c0107a62:	8b 00                	mov    (%eax),%eax
c0107a64:	83 ec 0c             	sub    $0xc,%esp
c0107a67:	50                   	push   %eax
c0107a68:	e8 db f3 ff ff       	call   c0106e48 <pde2page>
c0107a6d:	83 c4 10             	add    $0x10,%esp
c0107a70:	83 ec 08             	sub    $0x8,%esp
c0107a73:	6a 01                	push   $0x1
c0107a75:	50                   	push   %eax
c0107a76:	e8 63 f6 ff ff       	call   c01070de <free_pages>
c0107a7b:	83 c4 10             	add    $0x10,%esp
            pgdir[pde_idx] = 0;
c0107a7e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107a81:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0107a88:	8b 45 08             	mov    0x8(%ebp),%eax
c0107a8b:	01 d0                	add    %edx,%eax
c0107a8d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        }
        start += PTSIZE;
c0107a93:	81 45 0c 00 00 40 00 	addl   $0x400000,0xc(%ebp)
    } while (start != 0 && start < end);
c0107a9a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0107a9e:	74 08                	je     c0107aa8 <exit_range+0xf1>
c0107aa0:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107aa3:	3b 45 10             	cmp    0x10(%ebp),%eax
c0107aa6:	72 8a                	jb     c0107a32 <exit_range+0x7b>
}
c0107aa8:	90                   	nop
c0107aa9:	c9                   	leave  
c0107aaa:	c3                   	ret    

c0107aab <copy_range>:
 * @share: flags to indicate to dup OR share. We just use dup method, so it didn't be used.
 *
 * CALL GRAPH: copy_mm-->dup_mmap-->copy_range
 */
int
copy_range(pde_t *to, pde_t *from, uintptr_t start, uintptr_t end, bool share) {
c0107aab:	55                   	push   %ebp
c0107aac:	89 e5                	mov    %esp,%ebp
c0107aae:	83 ec 38             	sub    $0x38,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0107ab1:	8b 45 10             	mov    0x10(%ebp),%eax
c0107ab4:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107ab9:	85 c0                	test   %eax,%eax
c0107abb:	75 0c                	jne    c0107ac9 <copy_range+0x1e>
c0107abd:	8b 45 14             	mov    0x14(%ebp),%eax
c0107ac0:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107ac5:	85 c0                	test   %eax,%eax
c0107ac7:	74 19                	je     c0107ae2 <copy_range+0x37>
c0107ac9:	68 14 e6 10 c0       	push   $0xc010e614
c0107ace:	68 d9 e5 10 c0       	push   $0xc010e5d9
c0107ad3:	68 ff 01 00 00       	push   $0x1ff
c0107ad8:	68 b4 e5 10 c0       	push   $0xc010e5b4
c0107add:	e8 1b 89 ff ff       	call   c01003fd <__panic>
    assert(USER_ACCESS(start, end));
c0107ae2:	81 7d 10 ff ff 1f 00 	cmpl   $0x1fffff,0x10(%ebp)
c0107ae9:	76 11                	jbe    c0107afc <copy_range+0x51>
c0107aeb:	8b 45 10             	mov    0x10(%ebp),%eax
c0107aee:	3b 45 14             	cmp    0x14(%ebp),%eax
c0107af1:	73 09                	jae    c0107afc <copy_range+0x51>
c0107af3:	81 7d 14 00 00 00 b0 	cmpl   $0xb0000000,0x14(%ebp)
c0107afa:	76 19                	jbe    c0107b15 <copy_range+0x6a>
c0107afc:	68 3d e6 10 c0       	push   $0xc010e63d
c0107b01:	68 d9 e5 10 c0       	push   $0xc010e5d9
c0107b06:	68 00 02 00 00       	push   $0x200
c0107b0b:	68 b4 e5 10 c0       	push   $0xc010e5b4
c0107b10:	e8 e8 88 ff ff       	call   c01003fd <__panic>
    // copy content by page unit.
    do {
        //call get_pte to find process A's pte according to the addr start
        pte_t *ptep = get_pte(from, start, 0), *nptep;
c0107b15:	83 ec 04             	sub    $0x4,%esp
c0107b18:	6a 00                	push   $0x0
c0107b1a:	ff 75 10             	pushl  0x10(%ebp)
c0107b1d:	ff 75 0c             	pushl  0xc(%ebp)
c0107b20:	e8 b9 fb ff ff       	call   c01076de <get_pte>
c0107b25:	83 c4 10             	add    $0x10,%esp
c0107b28:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ptep == NULL) {
c0107b2b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107b2f:	75 1b                	jne    c0107b4c <copy_range+0xa1>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
c0107b31:	8b 45 10             	mov    0x10(%ebp),%eax
c0107b34:	05 00 00 40 00       	add    $0x400000,%eax
c0107b39:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107b3c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107b3f:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0107b44:	89 45 10             	mov    %eax,0x10(%ebp)
            continue ;
c0107b47:	e9 21 01 00 00       	jmp    c0107c6d <copy_range+0x1c2>
        }
        //call get_pte to find process B's pte according to the addr start. If pte is NULL, just alloc a PT
        if (*ptep & PTE_P) {
c0107b4c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107b4f:	8b 00                	mov    (%eax),%eax
c0107b51:	83 e0 01             	and    $0x1,%eax
c0107b54:	85 c0                	test   %eax,%eax
c0107b56:	0f 84 0a 01 00 00    	je     c0107c66 <copy_range+0x1bb>
            if ((nptep = get_pte(to, start, 1)) == NULL) {
c0107b5c:	83 ec 04             	sub    $0x4,%esp
c0107b5f:	6a 01                	push   $0x1
c0107b61:	ff 75 10             	pushl  0x10(%ebp)
c0107b64:	ff 75 08             	pushl  0x8(%ebp)
c0107b67:	e8 72 fb ff ff       	call   c01076de <get_pte>
c0107b6c:	83 c4 10             	add    $0x10,%esp
c0107b6f:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0107b72:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0107b76:	75 0a                	jne    c0107b82 <copy_range+0xd7>
                return -E_NO_MEM;
c0107b78:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0107b7d:	e9 02 01 00 00       	jmp    c0107c84 <copy_range+0x1d9>
            }
            uint32_t perm = (*ptep & PTE_USER);
c0107b82:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107b85:	8b 00                	mov    (%eax),%eax
c0107b87:	83 e0 07             	and    $0x7,%eax
c0107b8a:	89 45 e8             	mov    %eax,-0x18(%ebp)
            //get page from ptep
            struct Page *page = pte2page(*ptep);
c0107b8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107b90:	8b 00                	mov    (%eax),%eax
c0107b92:	83 ec 0c             	sub    $0xc,%esp
c0107b95:	50                   	push   %eax
c0107b96:	e8 73 f2 ff ff       	call   c0106e0e <pte2page>
c0107b9b:	83 c4 10             	add    $0x10,%esp
c0107b9e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            // alloc a page for process B
            struct Page *npage=alloc_page();
c0107ba1:	83 ec 0c             	sub    $0xc,%esp
c0107ba4:	6a 01                	push   $0x1
c0107ba6:	e8 c7 f4 ff ff       	call   c0107072 <alloc_pages>
c0107bab:	83 c4 10             	add    $0x10,%esp
c0107bae:	89 45 e0             	mov    %eax,-0x20(%ebp)
            assert(page!=NULL);
c0107bb1:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0107bb5:	75 19                	jne    c0107bd0 <copy_range+0x125>
c0107bb7:	68 55 e6 10 c0       	push   $0xc010e655
c0107bbc:	68 d9 e5 10 c0       	push   $0xc010e5d9
c0107bc1:	68 13 02 00 00       	push   $0x213
c0107bc6:	68 b4 e5 10 c0       	push   $0xc010e5b4
c0107bcb:	e8 2d 88 ff ff       	call   c01003fd <__panic>
            assert(npage!=NULL);
c0107bd0:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0107bd4:	75 19                	jne    c0107bef <copy_range+0x144>
c0107bd6:	68 60 e6 10 c0       	push   $0xc010e660
c0107bdb:	68 d9 e5 10 c0       	push   $0xc010e5d9
c0107be0:	68 14 02 00 00       	push   $0x214
c0107be5:	68 b4 e5 10 c0       	push   $0xc010e5b4
c0107bea:	e8 0e 88 ff ff       	call   c01003fd <__panic>
            int ret=0;
c0107bef:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
            * (2) find dst_kvaddr: the kernel virtual address of npage
            * (3) memory copy from src_kvaddr to dst_kvaddr, size is PGSIZE
            * (4) build the map of phy addr of  nage with the linear addr start
            */
            // (1) find src_kvaddr: the kernel virtual address of page
            uintptr_t src_kvaddr = page2kva(page);
c0107bf6:	83 ec 0c             	sub    $0xc,%esp
c0107bf9:	ff 75 e4             	pushl  -0x1c(%ebp)
c0107bfc:	e8 c8 f1 ff ff       	call   c0106dc9 <page2kva>
c0107c01:	83 c4 10             	add    $0x10,%esp
c0107c04:	89 45 d8             	mov    %eax,-0x28(%ebp)
            // (2) find dst_kvaddr: the kernel virtual address of npage
            uintptr_t dst_kvaddr = page2kva(npage);
c0107c07:	83 ec 0c             	sub    $0xc,%esp
c0107c0a:	ff 75 e0             	pushl  -0x20(%ebp)
c0107c0d:	e8 b7 f1 ff ff       	call   c0106dc9 <page2kva>
c0107c12:	83 c4 10             	add    $0x10,%esp
c0107c15:	89 45 d4             	mov    %eax,-0x2c(%ebp)
            // (3) memory copy from src_kvaddr to dst_kvaddr, size is PGSIZE
            memcpy(dst_kvaddr, src_kvaddr, PGSIZE);
c0107c18:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0107c1b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0107c1e:	83 ec 04             	sub    $0x4,%esp
c0107c21:	68 00 10 00 00       	push   $0x1000
c0107c26:	52                   	push   %edx
c0107c27:	50                   	push   %eax
c0107c28:	e8 42 48 00 00       	call   c010c46f <memcpy>
c0107c2d:	83 c4 10             	add    $0x10,%esp
            // (4) build the map of phy addr of  nage with the linear addr start
            ret = page_insert(to, npage, start, perm);
c0107c30:	ff 75 e8             	pushl  -0x18(%ebp)
c0107c33:	ff 75 10             	pushl  0x10(%ebp)
c0107c36:	ff 75 e0             	pushl  -0x20(%ebp)
c0107c39:	ff 75 08             	pushl  0x8(%ebp)
c0107c3c:	e8 7e 00 00 00       	call   c0107cbf <page_insert>
c0107c41:	83 c4 10             	add    $0x10,%esp
c0107c44:	89 45 dc             	mov    %eax,-0x24(%ebp)
            assert(ret == 0);
c0107c47:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0107c4b:	74 19                	je     c0107c66 <copy_range+0x1bb>
c0107c4d:	68 6c e6 10 c0       	push   $0xc010e66c
c0107c52:	68 d9 e5 10 c0       	push   $0xc010e5d9
c0107c57:	68 2c 02 00 00       	push   $0x22c
c0107c5c:	68 b4 e5 10 c0       	push   $0xc010e5b4
c0107c61:	e8 97 87 ff ff       	call   c01003fd <__panic>
        }
        start += PGSIZE;
c0107c66:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    } while (start != 0 && start < end);
c0107c6d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0107c71:	74 0c                	je     c0107c7f <copy_range+0x1d4>
c0107c73:	8b 45 10             	mov    0x10(%ebp),%eax
c0107c76:	3b 45 14             	cmp    0x14(%ebp),%eax
c0107c79:	0f 82 96 fe ff ff    	jb     c0107b15 <copy_range+0x6a>
    return 0;
c0107c7f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107c84:	c9                   	leave  
c0107c85:	c3                   	ret    

c0107c86 <page_remove>:

//page_remove - free an Page which is related linear address la and has an validated pte
void
page_remove(pde_t *pgdir, uintptr_t la) {
c0107c86:	55                   	push   %ebp
c0107c87:	89 e5                	mov    %esp,%ebp
c0107c89:	83 ec 18             	sub    $0x18,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c0107c8c:	83 ec 04             	sub    $0x4,%esp
c0107c8f:	6a 00                	push   $0x0
c0107c91:	ff 75 0c             	pushl  0xc(%ebp)
c0107c94:	ff 75 08             	pushl  0x8(%ebp)
c0107c97:	e8 42 fa ff ff       	call   c01076de <get_pte>
c0107c9c:	83 c4 10             	add    $0x10,%esp
c0107c9f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep != NULL) {
c0107ca2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107ca6:	74 14                	je     c0107cbc <page_remove+0x36>
        page_remove_pte(pgdir, la, ptep);
c0107ca8:	83 ec 04             	sub    $0x4,%esp
c0107cab:	ff 75 f4             	pushl  -0xc(%ebp)
c0107cae:	ff 75 0c             	pushl  0xc(%ebp)
c0107cb1:	ff 75 08             	pushl  0x8(%ebp)
c0107cb4:	e8 bf fb ff ff       	call   c0107878 <page_remove_pte>
c0107cb9:	83 c4 10             	add    $0x10,%esp
    }
}
c0107cbc:	90                   	nop
c0107cbd:	c9                   	leave  
c0107cbe:	c3                   	ret    

c0107cbf <page_insert>:
//  la:    the linear address need to map
//  perm:  the permission of this Page which is setted in related pte
// return value: always 0
//note: PT is changed, so the TLB need to be invalidate 
int
page_insert(pde_t *pgdir, struct Page *page, uintptr_t la, uint32_t perm) {
c0107cbf:	55                   	push   %ebp
c0107cc0:	89 e5                	mov    %esp,%ebp
c0107cc2:	83 ec 18             	sub    $0x18,%esp
    pte_t *ptep = get_pte(pgdir, la, 1);
c0107cc5:	83 ec 04             	sub    $0x4,%esp
c0107cc8:	6a 01                	push   $0x1
c0107cca:	ff 75 10             	pushl  0x10(%ebp)
c0107ccd:	ff 75 08             	pushl  0x8(%ebp)
c0107cd0:	e8 09 fa ff ff       	call   c01076de <get_pte>
c0107cd5:	83 c4 10             	add    $0x10,%esp
c0107cd8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep == NULL) {
c0107cdb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107cdf:	75 0a                	jne    c0107ceb <page_insert+0x2c>
        return -E_NO_MEM;
c0107ce1:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0107ce6:	e9 8b 00 00 00       	jmp    c0107d76 <page_insert+0xb7>
    }
    page_ref_inc(page);
c0107ceb:	83 ec 0c             	sub    $0xc,%esp
c0107cee:	ff 75 0c             	pushl  0xc(%ebp)
c0107cf1:	e8 86 f1 ff ff       	call   c0106e7c <page_ref_inc>
c0107cf6:	83 c4 10             	add    $0x10,%esp
    if (*ptep & PTE_P) {
c0107cf9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107cfc:	8b 00                	mov    (%eax),%eax
c0107cfe:	83 e0 01             	and    $0x1,%eax
c0107d01:	85 c0                	test   %eax,%eax
c0107d03:	74 40                	je     c0107d45 <page_insert+0x86>
        struct Page *p = pte2page(*ptep);
c0107d05:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107d08:	8b 00                	mov    (%eax),%eax
c0107d0a:	83 ec 0c             	sub    $0xc,%esp
c0107d0d:	50                   	push   %eax
c0107d0e:	e8 fb f0 ff ff       	call   c0106e0e <pte2page>
c0107d13:	83 c4 10             	add    $0x10,%esp
c0107d16:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (p == page) {
c0107d19:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107d1c:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0107d1f:	75 10                	jne    c0107d31 <page_insert+0x72>
            page_ref_dec(page);
c0107d21:	83 ec 0c             	sub    $0xc,%esp
c0107d24:	ff 75 0c             	pushl  0xc(%ebp)
c0107d27:	e8 67 f1 ff ff       	call   c0106e93 <page_ref_dec>
c0107d2c:	83 c4 10             	add    $0x10,%esp
c0107d2f:	eb 14                	jmp    c0107d45 <page_insert+0x86>
        }
        else {
            page_remove_pte(pgdir, la, ptep);
c0107d31:	83 ec 04             	sub    $0x4,%esp
c0107d34:	ff 75 f4             	pushl  -0xc(%ebp)
c0107d37:	ff 75 10             	pushl  0x10(%ebp)
c0107d3a:	ff 75 08             	pushl  0x8(%ebp)
c0107d3d:	e8 36 fb ff ff       	call   c0107878 <page_remove_pte>
c0107d42:	83 c4 10             	add    $0x10,%esp
        }
    }
    *ptep = page2pa(page) | PTE_P | perm;
c0107d45:	83 ec 0c             	sub    $0xc,%esp
c0107d48:	ff 75 0c             	pushl  0xc(%ebp)
c0107d4b:	e8 29 f0 ff ff       	call   c0106d79 <page2pa>
c0107d50:	83 c4 10             	add    $0x10,%esp
c0107d53:	0b 45 14             	or     0x14(%ebp),%eax
c0107d56:	83 c8 01             	or     $0x1,%eax
c0107d59:	89 c2                	mov    %eax,%edx
c0107d5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107d5e:	89 10                	mov    %edx,(%eax)
    tlb_invalidate(pgdir, la);
c0107d60:	83 ec 08             	sub    $0x8,%esp
c0107d63:	ff 75 10             	pushl  0x10(%ebp)
c0107d66:	ff 75 08             	pushl  0x8(%ebp)
c0107d69:	e8 0a 00 00 00       	call   c0107d78 <tlb_invalidate>
c0107d6e:	83 c4 10             	add    $0x10,%esp
    return 0;
c0107d71:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107d76:	c9                   	leave  
c0107d77:	c3                   	ret    

c0107d78 <tlb_invalidate>:

// invalidate a TLB entry, but only if the page tables being
// edited are the ones currently in use by the processor.
void
tlb_invalidate(pde_t *pgdir, uintptr_t la) {
c0107d78:	55                   	push   %ebp
c0107d79:	89 e5                	mov    %esp,%ebp
c0107d7b:	83 ec 18             	sub    $0x18,%esp
}

static inline uintptr_t
rcr3(void) {
    uintptr_t cr3;
    asm volatile ("mov %%cr3, %0" : "=r" (cr3) :: "memory");
c0107d7e:	0f 20 d8             	mov    %cr3,%eax
c0107d81:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return cr3;
c0107d84:	8b 55 ec             	mov    -0x14(%ebp),%edx
    if (rcr3() == PADDR(pgdir)) {
c0107d87:	8b 45 08             	mov    0x8(%ebp),%eax
c0107d8a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107d8d:	81 7d f0 ff ff ff bf 	cmpl   $0xbfffffff,-0x10(%ebp)
c0107d94:	77 17                	ja     c0107dad <tlb_invalidate+0x35>
c0107d96:	ff 75 f0             	pushl  -0x10(%ebp)
c0107d99:	68 90 e5 10 c0       	push   $0xc010e590
c0107d9e:	68 5d 02 00 00       	push   $0x25d
c0107da3:	68 b4 e5 10 c0       	push   $0xc010e5b4
c0107da8:	e8 50 86 ff ff       	call   c01003fd <__panic>
c0107dad:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107db0:	05 00 00 00 40       	add    $0x40000000,%eax
c0107db5:	39 c2                	cmp    %eax,%edx
c0107db7:	75 0c                	jne    c0107dc5 <tlb_invalidate+0x4d>
        invlpg((void *)la);
c0107db9:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107dbc:	89 45 f4             	mov    %eax,-0xc(%ebp)
}

static inline void
invlpg(void *addr) {
    asm volatile ("invlpg (%0)" :: "r" (addr) : "memory");
c0107dbf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107dc2:	0f 01 38             	invlpg (%eax)
    }
}
c0107dc5:	90                   	nop
c0107dc6:	c9                   	leave  
c0107dc7:	c3                   	ret    

c0107dc8 <pgdir_alloc_page>:

// pgdir_alloc_page - call alloc_page & page_insert functions to 
//                  - allocate a page size memory & setup an addr map
//                  - pa<->la with linear address la and the PDT pgdir
struct Page *
pgdir_alloc_page(pde_t *pgdir, uintptr_t la, uint32_t perm) {
c0107dc8:	55                   	push   %ebp
c0107dc9:	89 e5                	mov    %esp,%ebp
c0107dcb:	83 ec 18             	sub    $0x18,%esp
    struct Page *page = alloc_page();
c0107dce:	83 ec 0c             	sub    $0xc,%esp
c0107dd1:	6a 01                	push   $0x1
c0107dd3:	e8 9a f2 ff ff       	call   c0107072 <alloc_pages>
c0107dd8:	83 c4 10             	add    $0x10,%esp
c0107ddb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c0107dde:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107de2:	0f 84 8c 00 00 00    	je     c0107e74 <pgdir_alloc_page+0xac>
        if (page_insert(pgdir, page, la, perm) != 0) {
c0107de8:	ff 75 10             	pushl  0x10(%ebp)
c0107deb:	ff 75 0c             	pushl  0xc(%ebp)
c0107dee:	ff 75 f4             	pushl  -0xc(%ebp)
c0107df1:	ff 75 08             	pushl  0x8(%ebp)
c0107df4:	e8 c6 fe ff ff       	call   c0107cbf <page_insert>
c0107df9:	83 c4 10             	add    $0x10,%esp
c0107dfc:	85 c0                	test   %eax,%eax
c0107dfe:	74 17                	je     c0107e17 <pgdir_alloc_page+0x4f>
            free_page(page);
c0107e00:	83 ec 08             	sub    $0x8,%esp
c0107e03:	6a 01                	push   $0x1
c0107e05:	ff 75 f4             	pushl  -0xc(%ebp)
c0107e08:	e8 d1 f2 ff ff       	call   c01070de <free_pages>
c0107e0d:	83 c4 10             	add    $0x10,%esp
            return NULL;
c0107e10:	b8 00 00 00 00       	mov    $0x0,%eax
c0107e15:	eb 60                	jmp    c0107e77 <pgdir_alloc_page+0xaf>
        }
        if (swap_init_ok){
c0107e17:	a1 6c 4f 1c c0       	mov    0xc01c4f6c,%eax
c0107e1c:	85 c0                	test   %eax,%eax
c0107e1e:	74 54                	je     c0107e74 <pgdir_alloc_page+0xac>
            if(check_mm_struct!=NULL) {
c0107e20:	a1 10 71 1c c0       	mov    0xc01c7110,%eax
c0107e25:	85 c0                	test   %eax,%eax
c0107e27:	74 4b                	je     c0107e74 <pgdir_alloc_page+0xac>
                swap_map_swappable(check_mm_struct, la, page, 0);
c0107e29:	a1 10 71 1c c0       	mov    0xc01c7110,%eax
c0107e2e:	6a 00                	push   $0x0
c0107e30:	ff 75 f4             	pushl  -0xc(%ebp)
c0107e33:	ff 75 0c             	pushl  0xc(%ebp)
c0107e36:	50                   	push   %eax
c0107e37:	e8 be d5 ff ff       	call   c01053fa <swap_map_swappable>
c0107e3c:	83 c4 10             	add    $0x10,%esp
                page->pra_vaddr=la;
c0107e3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107e42:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107e45:	89 50 1c             	mov    %edx,0x1c(%eax)
                assert(page_ref(page) == 1);
c0107e48:	83 ec 0c             	sub    $0xc,%esp
c0107e4b:	ff 75 f4             	pushl  -0xc(%ebp)
c0107e4e:	e8 11 f0 ff ff       	call   c0106e64 <page_ref>
c0107e53:	83 c4 10             	add    $0x10,%esp
c0107e56:	83 f8 01             	cmp    $0x1,%eax
c0107e59:	74 19                	je     c0107e74 <pgdir_alloc_page+0xac>
c0107e5b:	68 75 e6 10 c0       	push   $0xc010e675
c0107e60:	68 d9 e5 10 c0       	push   $0xc010e5d9
c0107e65:	68 71 02 00 00       	push   $0x271
c0107e6a:	68 b4 e5 10 c0       	push   $0xc010e5b4
c0107e6f:	e8 89 85 ff ff       	call   c01003fd <__panic>
            }
        }

    }

    return page;
c0107e74:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0107e77:	c9                   	leave  
c0107e78:	c3                   	ret    

c0107e79 <check_alloc_page>:

static void
check_alloc_page(void) {
c0107e79:	55                   	push   %ebp
c0107e7a:	89 e5                	mov    %esp,%ebp
c0107e7c:	83 ec 08             	sub    $0x8,%esp
    pmm_manager->check();
c0107e7f:	a1 f0 71 1c c0       	mov    0xc01c71f0,%eax
c0107e84:	8b 40 18             	mov    0x18(%eax),%eax
c0107e87:	ff d0                	call   *%eax
    cprintf("check_alloc_page() succeeded!\n");
c0107e89:	83 ec 0c             	sub    $0xc,%esp
c0107e8c:	68 8c e6 10 c0       	push   $0xc010e68c
c0107e91:	e8 01 84 ff ff       	call   c0100297 <cprintf>
c0107e96:	83 c4 10             	add    $0x10,%esp
}
c0107e99:	90                   	nop
c0107e9a:	c9                   	leave  
c0107e9b:	c3                   	ret    

c0107e9c <check_pgdir>:

static void
check_pgdir(void) {
c0107e9c:	55                   	push   %ebp
c0107e9d:	89 e5                	mov    %esp,%ebp
c0107e9f:	83 ec 28             	sub    $0x28,%esp
    assert(npage <= KMEMSIZE / PGSIZE);
c0107ea2:	a1 80 4f 1c c0       	mov    0xc01c4f80,%eax
c0107ea7:	3d 00 80 03 00       	cmp    $0x38000,%eax
c0107eac:	76 19                	jbe    c0107ec7 <check_pgdir+0x2b>
c0107eae:	68 ab e6 10 c0       	push   $0xc010e6ab
c0107eb3:	68 d9 e5 10 c0       	push   $0xc010e5d9
c0107eb8:	68 89 02 00 00       	push   $0x289
c0107ebd:	68 b4 e5 10 c0       	push   $0xc010e5b4
c0107ec2:	e8 36 85 ff ff       	call   c01003fd <__panic>
    assert(boot_pgdir != NULL && (uint32_t)PGOFF(boot_pgdir) == 0);
c0107ec7:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c0107ecc:	85 c0                	test   %eax,%eax
c0107ece:	74 0e                	je     c0107ede <check_pgdir+0x42>
c0107ed0:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c0107ed5:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107eda:	85 c0                	test   %eax,%eax
c0107edc:	74 19                	je     c0107ef7 <check_pgdir+0x5b>
c0107ede:	68 c8 e6 10 c0       	push   $0xc010e6c8
c0107ee3:	68 d9 e5 10 c0       	push   $0xc010e5d9
c0107ee8:	68 8a 02 00 00       	push   $0x28a
c0107eed:	68 b4 e5 10 c0       	push   $0xc010e5b4
c0107ef2:	e8 06 85 ff ff       	call   c01003fd <__panic>
    assert(get_page(boot_pgdir, 0x0, NULL) == NULL);
c0107ef7:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c0107efc:	83 ec 04             	sub    $0x4,%esp
c0107eff:	6a 00                	push   $0x0
c0107f01:	6a 00                	push   $0x0
c0107f03:	50                   	push   %eax
c0107f04:	e8 19 f9 ff ff       	call   c0107822 <get_page>
c0107f09:	83 c4 10             	add    $0x10,%esp
c0107f0c:	85 c0                	test   %eax,%eax
c0107f0e:	74 19                	je     c0107f29 <check_pgdir+0x8d>
c0107f10:	68 00 e7 10 c0       	push   $0xc010e700
c0107f15:	68 d9 e5 10 c0       	push   $0xc010e5d9
c0107f1a:	68 8b 02 00 00       	push   $0x28b
c0107f1f:	68 b4 e5 10 c0       	push   $0xc010e5b4
c0107f24:	e8 d4 84 ff ff       	call   c01003fd <__panic>

    struct Page *p1, *p2;
    p1 = alloc_page();
c0107f29:	83 ec 0c             	sub    $0xc,%esp
c0107f2c:	6a 01                	push   $0x1
c0107f2e:	e8 3f f1 ff ff       	call   c0107072 <alloc_pages>
c0107f33:	83 c4 10             	add    $0x10,%esp
c0107f36:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(page_insert(boot_pgdir, p1, 0x0, 0) == 0);
c0107f39:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c0107f3e:	6a 00                	push   $0x0
c0107f40:	6a 00                	push   $0x0
c0107f42:	ff 75 f4             	pushl  -0xc(%ebp)
c0107f45:	50                   	push   %eax
c0107f46:	e8 74 fd ff ff       	call   c0107cbf <page_insert>
c0107f4b:	83 c4 10             	add    $0x10,%esp
c0107f4e:	85 c0                	test   %eax,%eax
c0107f50:	74 19                	je     c0107f6b <check_pgdir+0xcf>
c0107f52:	68 28 e7 10 c0       	push   $0xc010e728
c0107f57:	68 d9 e5 10 c0       	push   $0xc010e5d9
c0107f5c:	68 8f 02 00 00       	push   $0x28f
c0107f61:	68 b4 e5 10 c0       	push   $0xc010e5b4
c0107f66:	e8 92 84 ff ff       	call   c01003fd <__panic>

    pte_t *ptep;
    assert((ptep = get_pte(boot_pgdir, 0x0, 0)) != NULL);
c0107f6b:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c0107f70:	83 ec 04             	sub    $0x4,%esp
c0107f73:	6a 00                	push   $0x0
c0107f75:	6a 00                	push   $0x0
c0107f77:	50                   	push   %eax
c0107f78:	e8 61 f7 ff ff       	call   c01076de <get_pte>
c0107f7d:	83 c4 10             	add    $0x10,%esp
c0107f80:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107f83:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0107f87:	75 19                	jne    c0107fa2 <check_pgdir+0x106>
c0107f89:	68 54 e7 10 c0       	push   $0xc010e754
c0107f8e:	68 d9 e5 10 c0       	push   $0xc010e5d9
c0107f93:	68 92 02 00 00       	push   $0x292
c0107f98:	68 b4 e5 10 c0       	push   $0xc010e5b4
c0107f9d:	e8 5b 84 ff ff       	call   c01003fd <__panic>
    assert(pte2page(*ptep) == p1);
c0107fa2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107fa5:	8b 00                	mov    (%eax),%eax
c0107fa7:	83 ec 0c             	sub    $0xc,%esp
c0107faa:	50                   	push   %eax
c0107fab:	e8 5e ee ff ff       	call   c0106e0e <pte2page>
c0107fb0:	83 c4 10             	add    $0x10,%esp
c0107fb3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0107fb6:	74 19                	je     c0107fd1 <check_pgdir+0x135>
c0107fb8:	68 81 e7 10 c0       	push   $0xc010e781
c0107fbd:	68 d9 e5 10 c0       	push   $0xc010e5d9
c0107fc2:	68 93 02 00 00       	push   $0x293
c0107fc7:	68 b4 e5 10 c0       	push   $0xc010e5b4
c0107fcc:	e8 2c 84 ff ff       	call   c01003fd <__panic>
    assert(page_ref(p1) == 1);
c0107fd1:	83 ec 0c             	sub    $0xc,%esp
c0107fd4:	ff 75 f4             	pushl  -0xc(%ebp)
c0107fd7:	e8 88 ee ff ff       	call   c0106e64 <page_ref>
c0107fdc:	83 c4 10             	add    $0x10,%esp
c0107fdf:	83 f8 01             	cmp    $0x1,%eax
c0107fe2:	74 19                	je     c0107ffd <check_pgdir+0x161>
c0107fe4:	68 97 e7 10 c0       	push   $0xc010e797
c0107fe9:	68 d9 e5 10 c0       	push   $0xc010e5d9
c0107fee:	68 94 02 00 00       	push   $0x294
c0107ff3:	68 b4 e5 10 c0       	push   $0xc010e5b4
c0107ff8:	e8 00 84 ff ff       	call   c01003fd <__panic>

    ptep = &((pte_t *)KADDR(PDE_ADDR(boot_pgdir[0])))[1];
c0107ffd:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c0108002:	8b 00                	mov    (%eax),%eax
c0108004:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0108009:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010800c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010800f:	c1 e8 0c             	shr    $0xc,%eax
c0108012:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0108015:	a1 80 4f 1c c0       	mov    0xc01c4f80,%eax
c010801a:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c010801d:	72 17                	jb     c0108036 <check_pgdir+0x19a>
c010801f:	ff 75 ec             	pushl  -0x14(%ebp)
c0108022:	68 ec e4 10 c0       	push   $0xc010e4ec
c0108027:	68 96 02 00 00       	push   $0x296
c010802c:	68 b4 e5 10 c0       	push   $0xc010e5b4
c0108031:	e8 c7 83 ff ff       	call   c01003fd <__panic>
c0108036:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108039:	2d 00 00 00 40       	sub    $0x40000000,%eax
c010803e:	83 c0 04             	add    $0x4,%eax
c0108041:	89 45 f0             	mov    %eax,-0x10(%ebp)
    assert(get_pte(boot_pgdir, PGSIZE, 0) == ptep);
c0108044:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c0108049:	83 ec 04             	sub    $0x4,%esp
c010804c:	6a 00                	push   $0x0
c010804e:	68 00 10 00 00       	push   $0x1000
c0108053:	50                   	push   %eax
c0108054:	e8 85 f6 ff ff       	call   c01076de <get_pte>
c0108059:	83 c4 10             	add    $0x10,%esp
c010805c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010805f:	74 19                	je     c010807a <check_pgdir+0x1de>
c0108061:	68 ac e7 10 c0       	push   $0xc010e7ac
c0108066:	68 d9 e5 10 c0       	push   $0xc010e5d9
c010806b:	68 97 02 00 00       	push   $0x297
c0108070:	68 b4 e5 10 c0       	push   $0xc010e5b4
c0108075:	e8 83 83 ff ff       	call   c01003fd <__panic>

    p2 = alloc_page();
c010807a:	83 ec 0c             	sub    $0xc,%esp
c010807d:	6a 01                	push   $0x1
c010807f:	e8 ee ef ff ff       	call   c0107072 <alloc_pages>
c0108084:	83 c4 10             	add    $0x10,%esp
c0108087:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(page_insert(boot_pgdir, p2, PGSIZE, PTE_U | PTE_W) == 0);
c010808a:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c010808f:	6a 06                	push   $0x6
c0108091:	68 00 10 00 00       	push   $0x1000
c0108096:	ff 75 e4             	pushl  -0x1c(%ebp)
c0108099:	50                   	push   %eax
c010809a:	e8 20 fc ff ff       	call   c0107cbf <page_insert>
c010809f:	83 c4 10             	add    $0x10,%esp
c01080a2:	85 c0                	test   %eax,%eax
c01080a4:	74 19                	je     c01080bf <check_pgdir+0x223>
c01080a6:	68 d4 e7 10 c0       	push   $0xc010e7d4
c01080ab:	68 d9 e5 10 c0       	push   $0xc010e5d9
c01080b0:	68 9a 02 00 00       	push   $0x29a
c01080b5:	68 b4 e5 10 c0       	push   $0xc010e5b4
c01080ba:	e8 3e 83 ff ff       	call   c01003fd <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c01080bf:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c01080c4:	83 ec 04             	sub    $0x4,%esp
c01080c7:	6a 00                	push   $0x0
c01080c9:	68 00 10 00 00       	push   $0x1000
c01080ce:	50                   	push   %eax
c01080cf:	e8 0a f6 ff ff       	call   c01076de <get_pte>
c01080d4:	83 c4 10             	add    $0x10,%esp
c01080d7:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01080da:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01080de:	75 19                	jne    c01080f9 <check_pgdir+0x25d>
c01080e0:	68 0c e8 10 c0       	push   $0xc010e80c
c01080e5:	68 d9 e5 10 c0       	push   $0xc010e5d9
c01080ea:	68 9b 02 00 00       	push   $0x29b
c01080ef:	68 b4 e5 10 c0       	push   $0xc010e5b4
c01080f4:	e8 04 83 ff ff       	call   c01003fd <__panic>
    assert(*ptep & PTE_U);
c01080f9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01080fc:	8b 00                	mov    (%eax),%eax
c01080fe:	83 e0 04             	and    $0x4,%eax
c0108101:	85 c0                	test   %eax,%eax
c0108103:	75 19                	jne    c010811e <check_pgdir+0x282>
c0108105:	68 3c e8 10 c0       	push   $0xc010e83c
c010810a:	68 d9 e5 10 c0       	push   $0xc010e5d9
c010810f:	68 9c 02 00 00       	push   $0x29c
c0108114:	68 b4 e5 10 c0       	push   $0xc010e5b4
c0108119:	e8 df 82 ff ff       	call   c01003fd <__panic>
    assert(*ptep & PTE_W);
c010811e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108121:	8b 00                	mov    (%eax),%eax
c0108123:	83 e0 02             	and    $0x2,%eax
c0108126:	85 c0                	test   %eax,%eax
c0108128:	75 19                	jne    c0108143 <check_pgdir+0x2a7>
c010812a:	68 4a e8 10 c0       	push   $0xc010e84a
c010812f:	68 d9 e5 10 c0       	push   $0xc010e5d9
c0108134:	68 9d 02 00 00       	push   $0x29d
c0108139:	68 b4 e5 10 c0       	push   $0xc010e5b4
c010813e:	e8 ba 82 ff ff       	call   c01003fd <__panic>
    assert(boot_pgdir[0] & PTE_U);
c0108143:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c0108148:	8b 00                	mov    (%eax),%eax
c010814a:	83 e0 04             	and    $0x4,%eax
c010814d:	85 c0                	test   %eax,%eax
c010814f:	75 19                	jne    c010816a <check_pgdir+0x2ce>
c0108151:	68 58 e8 10 c0       	push   $0xc010e858
c0108156:	68 d9 e5 10 c0       	push   $0xc010e5d9
c010815b:	68 9e 02 00 00       	push   $0x29e
c0108160:	68 b4 e5 10 c0       	push   $0xc010e5b4
c0108165:	e8 93 82 ff ff       	call   c01003fd <__panic>
    assert(page_ref(p2) == 1);
c010816a:	83 ec 0c             	sub    $0xc,%esp
c010816d:	ff 75 e4             	pushl  -0x1c(%ebp)
c0108170:	e8 ef ec ff ff       	call   c0106e64 <page_ref>
c0108175:	83 c4 10             	add    $0x10,%esp
c0108178:	83 f8 01             	cmp    $0x1,%eax
c010817b:	74 19                	je     c0108196 <check_pgdir+0x2fa>
c010817d:	68 6e e8 10 c0       	push   $0xc010e86e
c0108182:	68 d9 e5 10 c0       	push   $0xc010e5d9
c0108187:	68 9f 02 00 00       	push   $0x29f
c010818c:	68 b4 e5 10 c0       	push   $0xc010e5b4
c0108191:	e8 67 82 ff ff       	call   c01003fd <__panic>

    assert(page_insert(boot_pgdir, p1, PGSIZE, 0) == 0);
c0108196:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c010819b:	6a 00                	push   $0x0
c010819d:	68 00 10 00 00       	push   $0x1000
c01081a2:	ff 75 f4             	pushl  -0xc(%ebp)
c01081a5:	50                   	push   %eax
c01081a6:	e8 14 fb ff ff       	call   c0107cbf <page_insert>
c01081ab:	83 c4 10             	add    $0x10,%esp
c01081ae:	85 c0                	test   %eax,%eax
c01081b0:	74 19                	je     c01081cb <check_pgdir+0x32f>
c01081b2:	68 80 e8 10 c0       	push   $0xc010e880
c01081b7:	68 d9 e5 10 c0       	push   $0xc010e5d9
c01081bc:	68 a1 02 00 00       	push   $0x2a1
c01081c1:	68 b4 e5 10 c0       	push   $0xc010e5b4
c01081c6:	e8 32 82 ff ff       	call   c01003fd <__panic>
    assert(page_ref(p1) == 2);
c01081cb:	83 ec 0c             	sub    $0xc,%esp
c01081ce:	ff 75 f4             	pushl  -0xc(%ebp)
c01081d1:	e8 8e ec ff ff       	call   c0106e64 <page_ref>
c01081d6:	83 c4 10             	add    $0x10,%esp
c01081d9:	83 f8 02             	cmp    $0x2,%eax
c01081dc:	74 19                	je     c01081f7 <check_pgdir+0x35b>
c01081de:	68 ac e8 10 c0       	push   $0xc010e8ac
c01081e3:	68 d9 e5 10 c0       	push   $0xc010e5d9
c01081e8:	68 a2 02 00 00       	push   $0x2a2
c01081ed:	68 b4 e5 10 c0       	push   $0xc010e5b4
c01081f2:	e8 06 82 ff ff       	call   c01003fd <__panic>
    assert(page_ref(p2) == 0);
c01081f7:	83 ec 0c             	sub    $0xc,%esp
c01081fa:	ff 75 e4             	pushl  -0x1c(%ebp)
c01081fd:	e8 62 ec ff ff       	call   c0106e64 <page_ref>
c0108202:	83 c4 10             	add    $0x10,%esp
c0108205:	85 c0                	test   %eax,%eax
c0108207:	74 19                	je     c0108222 <check_pgdir+0x386>
c0108209:	68 be e8 10 c0       	push   $0xc010e8be
c010820e:	68 d9 e5 10 c0       	push   $0xc010e5d9
c0108213:	68 a3 02 00 00       	push   $0x2a3
c0108218:	68 b4 e5 10 c0       	push   $0xc010e5b4
c010821d:	e8 db 81 ff ff       	call   c01003fd <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c0108222:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c0108227:	83 ec 04             	sub    $0x4,%esp
c010822a:	6a 00                	push   $0x0
c010822c:	68 00 10 00 00       	push   $0x1000
c0108231:	50                   	push   %eax
c0108232:	e8 a7 f4 ff ff       	call   c01076de <get_pte>
c0108237:	83 c4 10             	add    $0x10,%esp
c010823a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010823d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0108241:	75 19                	jne    c010825c <check_pgdir+0x3c0>
c0108243:	68 0c e8 10 c0       	push   $0xc010e80c
c0108248:	68 d9 e5 10 c0       	push   $0xc010e5d9
c010824d:	68 a4 02 00 00       	push   $0x2a4
c0108252:	68 b4 e5 10 c0       	push   $0xc010e5b4
c0108257:	e8 a1 81 ff ff       	call   c01003fd <__panic>
    assert(pte2page(*ptep) == p1);
c010825c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010825f:	8b 00                	mov    (%eax),%eax
c0108261:	83 ec 0c             	sub    $0xc,%esp
c0108264:	50                   	push   %eax
c0108265:	e8 a4 eb ff ff       	call   c0106e0e <pte2page>
c010826a:	83 c4 10             	add    $0x10,%esp
c010826d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0108270:	74 19                	je     c010828b <check_pgdir+0x3ef>
c0108272:	68 81 e7 10 c0       	push   $0xc010e781
c0108277:	68 d9 e5 10 c0       	push   $0xc010e5d9
c010827c:	68 a5 02 00 00       	push   $0x2a5
c0108281:	68 b4 e5 10 c0       	push   $0xc010e5b4
c0108286:	e8 72 81 ff ff       	call   c01003fd <__panic>
    assert((*ptep & PTE_U) == 0);
c010828b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010828e:	8b 00                	mov    (%eax),%eax
c0108290:	83 e0 04             	and    $0x4,%eax
c0108293:	85 c0                	test   %eax,%eax
c0108295:	74 19                	je     c01082b0 <check_pgdir+0x414>
c0108297:	68 d0 e8 10 c0       	push   $0xc010e8d0
c010829c:	68 d9 e5 10 c0       	push   $0xc010e5d9
c01082a1:	68 a6 02 00 00       	push   $0x2a6
c01082a6:	68 b4 e5 10 c0       	push   $0xc010e5b4
c01082ab:	e8 4d 81 ff ff       	call   c01003fd <__panic>

    page_remove(boot_pgdir, 0x0);
c01082b0:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c01082b5:	83 ec 08             	sub    $0x8,%esp
c01082b8:	6a 00                	push   $0x0
c01082ba:	50                   	push   %eax
c01082bb:	e8 c6 f9 ff ff       	call   c0107c86 <page_remove>
c01082c0:	83 c4 10             	add    $0x10,%esp
    assert(page_ref(p1) == 1);
c01082c3:	83 ec 0c             	sub    $0xc,%esp
c01082c6:	ff 75 f4             	pushl  -0xc(%ebp)
c01082c9:	e8 96 eb ff ff       	call   c0106e64 <page_ref>
c01082ce:	83 c4 10             	add    $0x10,%esp
c01082d1:	83 f8 01             	cmp    $0x1,%eax
c01082d4:	74 19                	je     c01082ef <check_pgdir+0x453>
c01082d6:	68 97 e7 10 c0       	push   $0xc010e797
c01082db:	68 d9 e5 10 c0       	push   $0xc010e5d9
c01082e0:	68 a9 02 00 00       	push   $0x2a9
c01082e5:	68 b4 e5 10 c0       	push   $0xc010e5b4
c01082ea:	e8 0e 81 ff ff       	call   c01003fd <__panic>
    assert(page_ref(p2) == 0);
c01082ef:	83 ec 0c             	sub    $0xc,%esp
c01082f2:	ff 75 e4             	pushl  -0x1c(%ebp)
c01082f5:	e8 6a eb ff ff       	call   c0106e64 <page_ref>
c01082fa:	83 c4 10             	add    $0x10,%esp
c01082fd:	85 c0                	test   %eax,%eax
c01082ff:	74 19                	je     c010831a <check_pgdir+0x47e>
c0108301:	68 be e8 10 c0       	push   $0xc010e8be
c0108306:	68 d9 e5 10 c0       	push   $0xc010e5d9
c010830b:	68 aa 02 00 00       	push   $0x2aa
c0108310:	68 b4 e5 10 c0       	push   $0xc010e5b4
c0108315:	e8 e3 80 ff ff       	call   c01003fd <__panic>

    page_remove(boot_pgdir, PGSIZE);
c010831a:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c010831f:	83 ec 08             	sub    $0x8,%esp
c0108322:	68 00 10 00 00       	push   $0x1000
c0108327:	50                   	push   %eax
c0108328:	e8 59 f9 ff ff       	call   c0107c86 <page_remove>
c010832d:	83 c4 10             	add    $0x10,%esp
    assert(page_ref(p1) == 0);
c0108330:	83 ec 0c             	sub    $0xc,%esp
c0108333:	ff 75 f4             	pushl  -0xc(%ebp)
c0108336:	e8 29 eb ff ff       	call   c0106e64 <page_ref>
c010833b:	83 c4 10             	add    $0x10,%esp
c010833e:	85 c0                	test   %eax,%eax
c0108340:	74 19                	je     c010835b <check_pgdir+0x4bf>
c0108342:	68 e5 e8 10 c0       	push   $0xc010e8e5
c0108347:	68 d9 e5 10 c0       	push   $0xc010e5d9
c010834c:	68 ad 02 00 00       	push   $0x2ad
c0108351:	68 b4 e5 10 c0       	push   $0xc010e5b4
c0108356:	e8 a2 80 ff ff       	call   c01003fd <__panic>
    assert(page_ref(p2) == 0);
c010835b:	83 ec 0c             	sub    $0xc,%esp
c010835e:	ff 75 e4             	pushl  -0x1c(%ebp)
c0108361:	e8 fe ea ff ff       	call   c0106e64 <page_ref>
c0108366:	83 c4 10             	add    $0x10,%esp
c0108369:	85 c0                	test   %eax,%eax
c010836b:	74 19                	je     c0108386 <check_pgdir+0x4ea>
c010836d:	68 be e8 10 c0       	push   $0xc010e8be
c0108372:	68 d9 e5 10 c0       	push   $0xc010e5d9
c0108377:	68 ae 02 00 00       	push   $0x2ae
c010837c:	68 b4 e5 10 c0       	push   $0xc010e5b4
c0108381:	e8 77 80 ff ff       	call   c01003fd <__panic>

    assert(page_ref(pde2page(boot_pgdir[0])) == 1);
c0108386:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c010838b:	8b 00                	mov    (%eax),%eax
c010838d:	83 ec 0c             	sub    $0xc,%esp
c0108390:	50                   	push   %eax
c0108391:	e8 b2 ea ff ff       	call   c0106e48 <pde2page>
c0108396:	83 c4 10             	add    $0x10,%esp
c0108399:	83 ec 0c             	sub    $0xc,%esp
c010839c:	50                   	push   %eax
c010839d:	e8 c2 ea ff ff       	call   c0106e64 <page_ref>
c01083a2:	83 c4 10             	add    $0x10,%esp
c01083a5:	83 f8 01             	cmp    $0x1,%eax
c01083a8:	74 19                	je     c01083c3 <check_pgdir+0x527>
c01083aa:	68 f8 e8 10 c0       	push   $0xc010e8f8
c01083af:	68 d9 e5 10 c0       	push   $0xc010e5d9
c01083b4:	68 b0 02 00 00       	push   $0x2b0
c01083b9:	68 b4 e5 10 c0       	push   $0xc010e5b4
c01083be:	e8 3a 80 ff ff       	call   c01003fd <__panic>
    free_page(pde2page(boot_pgdir[0]));
c01083c3:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c01083c8:	8b 00                	mov    (%eax),%eax
c01083ca:	83 ec 0c             	sub    $0xc,%esp
c01083cd:	50                   	push   %eax
c01083ce:	e8 75 ea ff ff       	call   c0106e48 <pde2page>
c01083d3:	83 c4 10             	add    $0x10,%esp
c01083d6:	83 ec 08             	sub    $0x8,%esp
c01083d9:	6a 01                	push   $0x1
c01083db:	50                   	push   %eax
c01083dc:	e8 fd ec ff ff       	call   c01070de <free_pages>
c01083e1:	83 c4 10             	add    $0x10,%esp
    boot_pgdir[0] = 0;
c01083e4:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c01083e9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    cprintf("check_pgdir() succeeded!\n");
c01083ef:	83 ec 0c             	sub    $0xc,%esp
c01083f2:	68 1f e9 10 c0       	push   $0xc010e91f
c01083f7:	e8 9b 7e ff ff       	call   c0100297 <cprintf>
c01083fc:	83 c4 10             	add    $0x10,%esp
}
c01083ff:	90                   	nop
c0108400:	c9                   	leave  
c0108401:	c3                   	ret    

c0108402 <check_boot_pgdir>:

static void
check_boot_pgdir(void) {
c0108402:	55                   	push   %ebp
c0108403:	89 e5                	mov    %esp,%ebp
c0108405:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
c0108408:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010840f:	e9 a3 00 00 00       	jmp    c01084b7 <check_boot_pgdir+0xb5>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
c0108414:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108417:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010841a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010841d:	c1 e8 0c             	shr    $0xc,%eax
c0108420:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0108423:	a1 80 4f 1c c0       	mov    0xc01c4f80,%eax
c0108428:	39 45 ec             	cmp    %eax,-0x14(%ebp)
c010842b:	72 17                	jb     c0108444 <check_boot_pgdir+0x42>
c010842d:	ff 75 f0             	pushl  -0x10(%ebp)
c0108430:	68 ec e4 10 c0       	push   $0xc010e4ec
c0108435:	68 bc 02 00 00       	push   $0x2bc
c010843a:	68 b4 e5 10 c0       	push   $0xc010e5b4
c010843f:	e8 b9 7f ff ff       	call   c01003fd <__panic>
c0108444:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108447:	2d 00 00 00 40       	sub    $0x40000000,%eax
c010844c:	89 c2                	mov    %eax,%edx
c010844e:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c0108453:	83 ec 04             	sub    $0x4,%esp
c0108456:	6a 00                	push   $0x0
c0108458:	52                   	push   %edx
c0108459:	50                   	push   %eax
c010845a:	e8 7f f2 ff ff       	call   c01076de <get_pte>
c010845f:	83 c4 10             	add    $0x10,%esp
c0108462:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0108465:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0108469:	75 19                	jne    c0108484 <check_boot_pgdir+0x82>
c010846b:	68 3c e9 10 c0       	push   $0xc010e93c
c0108470:	68 d9 e5 10 c0       	push   $0xc010e5d9
c0108475:	68 bc 02 00 00       	push   $0x2bc
c010847a:	68 b4 e5 10 c0       	push   $0xc010e5b4
c010847f:	e8 79 7f ff ff       	call   c01003fd <__panic>
        assert(PTE_ADDR(*ptep) == i);
c0108484:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108487:	8b 00                	mov    (%eax),%eax
c0108489:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010848e:	89 c2                	mov    %eax,%edx
c0108490:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108493:	39 c2                	cmp    %eax,%edx
c0108495:	74 19                	je     c01084b0 <check_boot_pgdir+0xae>
c0108497:	68 79 e9 10 c0       	push   $0xc010e979
c010849c:	68 d9 e5 10 c0       	push   $0xc010e5d9
c01084a1:	68 bd 02 00 00       	push   $0x2bd
c01084a6:	68 b4 e5 10 c0       	push   $0xc010e5b4
c01084ab:	e8 4d 7f ff ff       	call   c01003fd <__panic>

static void
check_boot_pgdir(void) {
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
c01084b0:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
c01084b7:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01084ba:	a1 80 4f 1c c0       	mov    0xc01c4f80,%eax
c01084bf:	39 c2                	cmp    %eax,%edx
c01084c1:	0f 82 4d ff ff ff    	jb     c0108414 <check_boot_pgdir+0x12>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
        assert(PTE_ADDR(*ptep) == i);
    }

    assert(PDE_ADDR(boot_pgdir[PDX(VPT)]) == PADDR(boot_pgdir));
c01084c7:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c01084cc:	05 ac 0f 00 00       	add    $0xfac,%eax
c01084d1:	8b 00                	mov    (%eax),%eax
c01084d3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01084d8:	89 c2                	mov    %eax,%edx
c01084da:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c01084df:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01084e2:	81 7d e4 ff ff ff bf 	cmpl   $0xbfffffff,-0x1c(%ebp)
c01084e9:	77 17                	ja     c0108502 <check_boot_pgdir+0x100>
c01084eb:	ff 75 e4             	pushl  -0x1c(%ebp)
c01084ee:	68 90 e5 10 c0       	push   $0xc010e590
c01084f3:	68 c0 02 00 00       	push   $0x2c0
c01084f8:	68 b4 e5 10 c0       	push   $0xc010e5b4
c01084fd:	e8 fb 7e ff ff       	call   c01003fd <__panic>
c0108502:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108505:	05 00 00 00 40       	add    $0x40000000,%eax
c010850a:	39 c2                	cmp    %eax,%edx
c010850c:	74 19                	je     c0108527 <check_boot_pgdir+0x125>
c010850e:	68 90 e9 10 c0       	push   $0xc010e990
c0108513:	68 d9 e5 10 c0       	push   $0xc010e5d9
c0108518:	68 c0 02 00 00       	push   $0x2c0
c010851d:	68 b4 e5 10 c0       	push   $0xc010e5b4
c0108522:	e8 d6 7e ff ff       	call   c01003fd <__panic>

    assert(boot_pgdir[0] == 0);
c0108527:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c010852c:	8b 00                	mov    (%eax),%eax
c010852e:	85 c0                	test   %eax,%eax
c0108530:	74 19                	je     c010854b <check_boot_pgdir+0x149>
c0108532:	68 c4 e9 10 c0       	push   $0xc010e9c4
c0108537:	68 d9 e5 10 c0       	push   $0xc010e5d9
c010853c:	68 c2 02 00 00       	push   $0x2c2
c0108541:	68 b4 e5 10 c0       	push   $0xc010e5b4
c0108546:	e8 b2 7e ff ff       	call   c01003fd <__panic>

    struct Page *p;
    p = alloc_page();
c010854b:	83 ec 0c             	sub    $0xc,%esp
c010854e:	6a 01                	push   $0x1
c0108550:	e8 1d eb ff ff       	call   c0107072 <alloc_pages>
c0108555:	83 c4 10             	add    $0x10,%esp
c0108558:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(page_insert(boot_pgdir, p, 0x100, PTE_W) == 0);
c010855b:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c0108560:	6a 02                	push   $0x2
c0108562:	68 00 01 00 00       	push   $0x100
c0108567:	ff 75 e0             	pushl  -0x20(%ebp)
c010856a:	50                   	push   %eax
c010856b:	e8 4f f7 ff ff       	call   c0107cbf <page_insert>
c0108570:	83 c4 10             	add    $0x10,%esp
c0108573:	85 c0                	test   %eax,%eax
c0108575:	74 19                	je     c0108590 <check_boot_pgdir+0x18e>
c0108577:	68 d8 e9 10 c0       	push   $0xc010e9d8
c010857c:	68 d9 e5 10 c0       	push   $0xc010e5d9
c0108581:	68 c6 02 00 00       	push   $0x2c6
c0108586:	68 b4 e5 10 c0       	push   $0xc010e5b4
c010858b:	e8 6d 7e ff ff       	call   c01003fd <__panic>
    assert(page_ref(p) == 1);
c0108590:	83 ec 0c             	sub    $0xc,%esp
c0108593:	ff 75 e0             	pushl  -0x20(%ebp)
c0108596:	e8 c9 e8 ff ff       	call   c0106e64 <page_ref>
c010859b:	83 c4 10             	add    $0x10,%esp
c010859e:	83 f8 01             	cmp    $0x1,%eax
c01085a1:	74 19                	je     c01085bc <check_boot_pgdir+0x1ba>
c01085a3:	68 06 ea 10 c0       	push   $0xc010ea06
c01085a8:	68 d9 e5 10 c0       	push   $0xc010e5d9
c01085ad:	68 c7 02 00 00       	push   $0x2c7
c01085b2:	68 b4 e5 10 c0       	push   $0xc010e5b4
c01085b7:	e8 41 7e ff ff       	call   c01003fd <__panic>
    assert(page_insert(boot_pgdir, p, 0x100 + PGSIZE, PTE_W) == 0);
c01085bc:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c01085c1:	6a 02                	push   $0x2
c01085c3:	68 00 11 00 00       	push   $0x1100
c01085c8:	ff 75 e0             	pushl  -0x20(%ebp)
c01085cb:	50                   	push   %eax
c01085cc:	e8 ee f6 ff ff       	call   c0107cbf <page_insert>
c01085d1:	83 c4 10             	add    $0x10,%esp
c01085d4:	85 c0                	test   %eax,%eax
c01085d6:	74 19                	je     c01085f1 <check_boot_pgdir+0x1ef>
c01085d8:	68 18 ea 10 c0       	push   $0xc010ea18
c01085dd:	68 d9 e5 10 c0       	push   $0xc010e5d9
c01085e2:	68 c8 02 00 00       	push   $0x2c8
c01085e7:	68 b4 e5 10 c0       	push   $0xc010e5b4
c01085ec:	e8 0c 7e ff ff       	call   c01003fd <__panic>
    assert(page_ref(p) == 2);
c01085f1:	83 ec 0c             	sub    $0xc,%esp
c01085f4:	ff 75 e0             	pushl  -0x20(%ebp)
c01085f7:	e8 68 e8 ff ff       	call   c0106e64 <page_ref>
c01085fc:	83 c4 10             	add    $0x10,%esp
c01085ff:	83 f8 02             	cmp    $0x2,%eax
c0108602:	74 19                	je     c010861d <check_boot_pgdir+0x21b>
c0108604:	68 4f ea 10 c0       	push   $0xc010ea4f
c0108609:	68 d9 e5 10 c0       	push   $0xc010e5d9
c010860e:	68 c9 02 00 00       	push   $0x2c9
c0108613:	68 b4 e5 10 c0       	push   $0xc010e5b4
c0108618:	e8 e0 7d ff ff       	call   c01003fd <__panic>

    const char *str = "ucore: Hello world!!";
c010861d:	c7 45 dc 60 ea 10 c0 	movl   $0xc010ea60,-0x24(%ebp)
    strcpy((void *)0x100, str);
c0108624:	83 ec 08             	sub    $0x8,%esp
c0108627:	ff 75 dc             	pushl  -0x24(%ebp)
c010862a:	68 00 01 00 00       	push   $0x100
c010862f:	e8 7f 3a 00 00       	call   c010c0b3 <strcpy>
c0108634:	83 c4 10             	add    $0x10,%esp
    assert(strcmp((void *)0x100, (void *)(0x100 + PGSIZE)) == 0);
c0108637:	83 ec 08             	sub    $0x8,%esp
c010863a:	68 00 11 00 00       	push   $0x1100
c010863f:	68 00 01 00 00       	push   $0x100
c0108644:	e8 e4 3a 00 00       	call   c010c12d <strcmp>
c0108649:	83 c4 10             	add    $0x10,%esp
c010864c:	85 c0                	test   %eax,%eax
c010864e:	74 19                	je     c0108669 <check_boot_pgdir+0x267>
c0108650:	68 78 ea 10 c0       	push   $0xc010ea78
c0108655:	68 d9 e5 10 c0       	push   $0xc010e5d9
c010865a:	68 cd 02 00 00       	push   $0x2cd
c010865f:	68 b4 e5 10 c0       	push   $0xc010e5b4
c0108664:	e8 94 7d ff ff       	call   c01003fd <__panic>

    *(char *)(page2kva(p) + 0x100) = '\0';
c0108669:	83 ec 0c             	sub    $0xc,%esp
c010866c:	ff 75 e0             	pushl  -0x20(%ebp)
c010866f:	e8 55 e7 ff ff       	call   c0106dc9 <page2kva>
c0108674:	83 c4 10             	add    $0x10,%esp
c0108677:	05 00 01 00 00       	add    $0x100,%eax
c010867c:	c6 00 00             	movb   $0x0,(%eax)
    assert(strlen((const char *)0x100) == 0);
c010867f:	83 ec 0c             	sub    $0xc,%esp
c0108682:	68 00 01 00 00       	push   $0x100
c0108687:	e8 cf 39 00 00       	call   c010c05b <strlen>
c010868c:	83 c4 10             	add    $0x10,%esp
c010868f:	85 c0                	test   %eax,%eax
c0108691:	74 19                	je     c01086ac <check_boot_pgdir+0x2aa>
c0108693:	68 b0 ea 10 c0       	push   $0xc010eab0
c0108698:	68 d9 e5 10 c0       	push   $0xc010e5d9
c010869d:	68 d0 02 00 00       	push   $0x2d0
c01086a2:	68 b4 e5 10 c0       	push   $0xc010e5b4
c01086a7:	e8 51 7d ff ff       	call   c01003fd <__panic>

    free_page(p);
c01086ac:	83 ec 08             	sub    $0x8,%esp
c01086af:	6a 01                	push   $0x1
c01086b1:	ff 75 e0             	pushl  -0x20(%ebp)
c01086b4:	e8 25 ea ff ff       	call   c01070de <free_pages>
c01086b9:	83 c4 10             	add    $0x10,%esp
    free_page(pde2page(boot_pgdir[0]));
c01086bc:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c01086c1:	8b 00                	mov    (%eax),%eax
c01086c3:	83 ec 0c             	sub    $0xc,%esp
c01086c6:	50                   	push   %eax
c01086c7:	e8 7c e7 ff ff       	call   c0106e48 <pde2page>
c01086cc:	83 c4 10             	add    $0x10,%esp
c01086cf:	83 ec 08             	sub    $0x8,%esp
c01086d2:	6a 01                	push   $0x1
c01086d4:	50                   	push   %eax
c01086d5:	e8 04 ea ff ff       	call   c01070de <free_pages>
c01086da:	83 c4 10             	add    $0x10,%esp
    boot_pgdir[0] = 0;
c01086dd:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c01086e2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    cprintf("check_boot_pgdir() succeeded!\n");
c01086e8:	83 ec 0c             	sub    $0xc,%esp
c01086eb:	68 d4 ea 10 c0       	push   $0xc010ead4
c01086f0:	e8 a2 7b ff ff       	call   c0100297 <cprintf>
c01086f5:	83 c4 10             	add    $0x10,%esp
}
c01086f8:	90                   	nop
c01086f9:	c9                   	leave  
c01086fa:	c3                   	ret    

c01086fb <perm2str>:

//perm2str - use string 'u,r,w,-' to present the permission
static const char *
perm2str(int perm) {
c01086fb:	55                   	push   %ebp
c01086fc:	89 e5                	mov    %esp,%ebp
    static char str[4];
    str[0] = (perm & PTE_U) ? 'u' : '-';
c01086fe:	8b 45 08             	mov    0x8(%ebp),%eax
c0108701:	83 e0 04             	and    $0x4,%eax
c0108704:	85 c0                	test   %eax,%eax
c0108706:	74 07                	je     c010870f <perm2str+0x14>
c0108708:	b8 75 00 00 00       	mov    $0x75,%eax
c010870d:	eb 05                	jmp    c0108714 <perm2str+0x19>
c010870f:	b8 2d 00 00 00       	mov    $0x2d,%eax
c0108714:	a2 08 50 1c c0       	mov    %al,0xc01c5008
    str[1] = 'r';
c0108719:	c6 05 09 50 1c c0 72 	movb   $0x72,0xc01c5009
    str[2] = (perm & PTE_W) ? 'w' : '-';
c0108720:	8b 45 08             	mov    0x8(%ebp),%eax
c0108723:	83 e0 02             	and    $0x2,%eax
c0108726:	85 c0                	test   %eax,%eax
c0108728:	74 07                	je     c0108731 <perm2str+0x36>
c010872a:	b8 77 00 00 00       	mov    $0x77,%eax
c010872f:	eb 05                	jmp    c0108736 <perm2str+0x3b>
c0108731:	b8 2d 00 00 00       	mov    $0x2d,%eax
c0108736:	a2 0a 50 1c c0       	mov    %al,0xc01c500a
    str[3] = '\0';
c010873b:	c6 05 0b 50 1c c0 00 	movb   $0x0,0xc01c500b
    return str;
c0108742:	b8 08 50 1c c0       	mov    $0xc01c5008,%eax
}
c0108747:	5d                   	pop    %ebp
c0108748:	c3                   	ret    

c0108749 <get_pgtable_items>:
//  table:       the beginning addr of table
//  left_store:  the pointer of the high side of table's next range
//  right_store: the pointer of the low side of table's next range
// return value: 0 - not a invalid item range, perm - a valid item range with perm permission 
static int
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
c0108749:	55                   	push   %ebp
c010874a:	89 e5                	mov    %esp,%ebp
c010874c:	83 ec 10             	sub    $0x10,%esp
    if (start >= right) {
c010874f:	8b 45 10             	mov    0x10(%ebp),%eax
c0108752:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0108755:	72 0e                	jb     c0108765 <get_pgtable_items+0x1c>
        return 0;
c0108757:	b8 00 00 00 00       	mov    $0x0,%eax
c010875c:	e9 9a 00 00 00       	jmp    c01087fb <get_pgtable_items+0xb2>
    }
    while (start < right && !(table[start] & PTE_P)) {
        start ++;
c0108761:	83 45 10 01          	addl   $0x1,0x10(%ebp)
static int
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
    if (start >= right) {
        return 0;
    }
    while (start < right && !(table[start] & PTE_P)) {
c0108765:	8b 45 10             	mov    0x10(%ebp),%eax
c0108768:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010876b:	73 18                	jae    c0108785 <get_pgtable_items+0x3c>
c010876d:	8b 45 10             	mov    0x10(%ebp),%eax
c0108770:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0108777:	8b 45 14             	mov    0x14(%ebp),%eax
c010877a:	01 d0                	add    %edx,%eax
c010877c:	8b 00                	mov    (%eax),%eax
c010877e:	83 e0 01             	and    $0x1,%eax
c0108781:	85 c0                	test   %eax,%eax
c0108783:	74 dc                	je     c0108761 <get_pgtable_items+0x18>
        start ++;
    }
    if (start < right) {
c0108785:	8b 45 10             	mov    0x10(%ebp),%eax
c0108788:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010878b:	73 69                	jae    c01087f6 <get_pgtable_items+0xad>
        if (left_store != NULL) {
c010878d:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0108791:	74 08                	je     c010879b <get_pgtable_items+0x52>
            *left_store = start;
c0108793:	8b 45 18             	mov    0x18(%ebp),%eax
c0108796:	8b 55 10             	mov    0x10(%ebp),%edx
c0108799:	89 10                	mov    %edx,(%eax)
        }
        int perm = (table[start ++] & PTE_USER);
c010879b:	8b 45 10             	mov    0x10(%ebp),%eax
c010879e:	8d 50 01             	lea    0x1(%eax),%edx
c01087a1:	89 55 10             	mov    %edx,0x10(%ebp)
c01087a4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01087ab:	8b 45 14             	mov    0x14(%ebp),%eax
c01087ae:	01 d0                	add    %edx,%eax
c01087b0:	8b 00                	mov    (%eax),%eax
c01087b2:	83 e0 07             	and    $0x7,%eax
c01087b5:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while (start < right && (table[start] & PTE_USER) == perm) {
c01087b8:	eb 04                	jmp    c01087be <get_pgtable_items+0x75>
            start ++;
c01087ba:	83 45 10 01          	addl   $0x1,0x10(%ebp)
    if (start < right) {
        if (left_store != NULL) {
            *left_store = start;
        }
        int perm = (table[start ++] & PTE_USER);
        while (start < right && (table[start] & PTE_USER) == perm) {
c01087be:	8b 45 10             	mov    0x10(%ebp),%eax
c01087c1:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01087c4:	73 1d                	jae    c01087e3 <get_pgtable_items+0x9a>
c01087c6:	8b 45 10             	mov    0x10(%ebp),%eax
c01087c9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01087d0:	8b 45 14             	mov    0x14(%ebp),%eax
c01087d3:	01 d0                	add    %edx,%eax
c01087d5:	8b 00                	mov    (%eax),%eax
c01087d7:	83 e0 07             	and    $0x7,%eax
c01087da:	89 c2                	mov    %eax,%edx
c01087dc:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01087df:	39 c2                	cmp    %eax,%edx
c01087e1:	74 d7                	je     c01087ba <get_pgtable_items+0x71>
            start ++;
        }
        if (right_store != NULL) {
c01087e3:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c01087e7:	74 08                	je     c01087f1 <get_pgtable_items+0xa8>
            *right_store = start;
c01087e9:	8b 45 1c             	mov    0x1c(%ebp),%eax
c01087ec:	8b 55 10             	mov    0x10(%ebp),%edx
c01087ef:	89 10                	mov    %edx,(%eax)
        }
        return perm;
c01087f1:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01087f4:	eb 05                	jmp    c01087fb <get_pgtable_items+0xb2>
    }
    return 0;
c01087f6:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01087fb:	c9                   	leave  
c01087fc:	c3                   	ret    

c01087fd <print_pgdir>:

//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
c01087fd:	55                   	push   %ebp
c01087fe:	89 e5                	mov    %esp,%ebp
c0108800:	57                   	push   %edi
c0108801:	56                   	push   %esi
c0108802:	53                   	push   %ebx
c0108803:	83 ec 2c             	sub    $0x2c,%esp
    cprintf("-------------------- BEGIN --------------------\n");
c0108806:	83 ec 0c             	sub    $0xc,%esp
c0108809:	68 f4 ea 10 c0       	push   $0xc010eaf4
c010880e:	e8 84 7a ff ff       	call   c0100297 <cprintf>
c0108813:	83 c4 10             	add    $0x10,%esp
    size_t left, right = 0, perm;
c0108816:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c010881d:	e9 e5 00 00 00       	jmp    c0108907 <print_pgdir+0x10a>
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c0108822:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108825:	83 ec 0c             	sub    $0xc,%esp
c0108828:	50                   	push   %eax
c0108829:	e8 cd fe ff ff       	call   c01086fb <perm2str>
c010882e:	83 c4 10             	add    $0x10,%esp
c0108831:	89 c7                	mov    %eax,%edi
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
c0108833:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0108836:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108839:	29 c2                	sub    %eax,%edx
c010883b:	89 d0                	mov    %edx,%eax
void
print_pgdir(void) {
    cprintf("-------------------- BEGIN --------------------\n");
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c010883d:	c1 e0 16             	shl    $0x16,%eax
c0108840:	89 c3                	mov    %eax,%ebx
c0108842:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108845:	c1 e0 16             	shl    $0x16,%eax
c0108848:	89 c1                	mov    %eax,%ecx
c010884a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010884d:	c1 e0 16             	shl    $0x16,%eax
c0108850:	89 c2                	mov    %eax,%edx
c0108852:	8b 75 dc             	mov    -0x24(%ebp),%esi
c0108855:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108858:	29 c6                	sub    %eax,%esi
c010885a:	89 f0                	mov    %esi,%eax
c010885c:	83 ec 08             	sub    $0x8,%esp
c010885f:	57                   	push   %edi
c0108860:	53                   	push   %ebx
c0108861:	51                   	push   %ecx
c0108862:	52                   	push   %edx
c0108863:	50                   	push   %eax
c0108864:	68 25 eb 10 c0       	push   $0xc010eb25
c0108869:	e8 29 7a ff ff       	call   c0100297 <cprintf>
c010886e:	83 c4 20             	add    $0x20,%esp
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
c0108871:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108874:	c1 e0 0a             	shl    $0xa,%eax
c0108877:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c010887a:	eb 4f                	jmp    c01088cb <print_pgdir+0xce>
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c010887c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010887f:	83 ec 0c             	sub    $0xc,%esp
c0108882:	50                   	push   %eax
c0108883:	e8 73 fe ff ff       	call   c01086fb <perm2str>
c0108888:	83 c4 10             	add    $0x10,%esp
c010888b:	89 c7                	mov    %eax,%edi
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
c010888d:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0108890:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0108893:	29 c2                	sub    %eax,%edx
c0108895:	89 d0                	mov    %edx,%eax
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c0108897:	c1 e0 0c             	shl    $0xc,%eax
c010889a:	89 c3                	mov    %eax,%ebx
c010889c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010889f:	c1 e0 0c             	shl    $0xc,%eax
c01088a2:	89 c1                	mov    %eax,%ecx
c01088a4:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01088a7:	c1 e0 0c             	shl    $0xc,%eax
c01088aa:	89 c2                	mov    %eax,%edx
c01088ac:	8b 75 d4             	mov    -0x2c(%ebp),%esi
c01088af:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01088b2:	29 c6                	sub    %eax,%esi
c01088b4:	89 f0                	mov    %esi,%eax
c01088b6:	83 ec 08             	sub    $0x8,%esp
c01088b9:	57                   	push   %edi
c01088ba:	53                   	push   %ebx
c01088bb:	51                   	push   %ecx
c01088bc:	52                   	push   %edx
c01088bd:	50                   	push   %eax
c01088be:	68 44 eb 10 c0       	push   $0xc010eb44
c01088c3:	e8 cf 79 ff ff       	call   c0100297 <cprintf>
c01088c8:	83 c4 20             	add    $0x20,%esp
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c01088cb:	be 00 00 c0 fa       	mov    $0xfac00000,%esi
c01088d0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01088d3:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01088d6:	89 d3                	mov    %edx,%ebx
c01088d8:	c1 e3 0a             	shl    $0xa,%ebx
c01088db:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01088de:	89 d1                	mov    %edx,%ecx
c01088e0:	c1 e1 0a             	shl    $0xa,%ecx
c01088e3:	83 ec 08             	sub    $0x8,%esp
c01088e6:	8d 55 d4             	lea    -0x2c(%ebp),%edx
c01088e9:	52                   	push   %edx
c01088ea:	8d 55 d8             	lea    -0x28(%ebp),%edx
c01088ed:	52                   	push   %edx
c01088ee:	56                   	push   %esi
c01088ef:	50                   	push   %eax
c01088f0:	53                   	push   %ebx
c01088f1:	51                   	push   %ecx
c01088f2:	e8 52 fe ff ff       	call   c0108749 <get_pgtable_items>
c01088f7:	83 c4 20             	add    $0x20,%esp
c01088fa:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01088fd:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0108901:	0f 85 75 ff ff ff    	jne    c010887c <print_pgdir+0x7f>
//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
    cprintf("-------------------- BEGIN --------------------\n");
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c0108907:	b9 00 b0 fe fa       	mov    $0xfafeb000,%ecx
c010890c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010890f:	83 ec 08             	sub    $0x8,%esp
c0108912:	8d 55 dc             	lea    -0x24(%ebp),%edx
c0108915:	52                   	push   %edx
c0108916:	8d 55 e0             	lea    -0x20(%ebp),%edx
c0108919:	52                   	push   %edx
c010891a:	51                   	push   %ecx
c010891b:	50                   	push   %eax
c010891c:	68 00 04 00 00       	push   $0x400
c0108921:	6a 00                	push   $0x0
c0108923:	e8 21 fe ff ff       	call   c0108749 <get_pgtable_items>
c0108928:	83 c4 20             	add    $0x20,%esp
c010892b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010892e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0108932:	0f 85 ea fe ff ff    	jne    c0108822 <print_pgdir+0x25>
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
        }
    }
    cprintf("--------------------- END ---------------------\n");
c0108938:	83 ec 0c             	sub    $0xc,%esp
c010893b:	68 68 eb 10 c0       	push   $0xc010eb68
c0108940:	e8 52 79 ff ff       	call   c0100297 <cprintf>
c0108945:	83 c4 10             	add    $0x10,%esp
}
c0108948:	90                   	nop
c0108949:	8d 65 f4             	lea    -0xc(%ebp),%esp
c010894c:	5b                   	pop    %ebx
c010894d:	5e                   	pop    %esi
c010894e:	5f                   	pop    %edi
c010894f:	5d                   	pop    %ebp
c0108950:	c3                   	ret    

c0108951 <phi_test_sema>:
semaphore_t s[N]; /* 每个哲学家一个信号量 */

struct proc_struct *philosopher_proc_sema[N];

void phi_test_sema(i) /* i：哲学家号码从0到N-1 */
{ 
c0108951:	55                   	push   %ebp
c0108952:	89 e5                	mov    %esp,%ebp
c0108954:	83 ec 08             	sub    $0x8,%esp
    if(state_sema[i]==HUNGRY&&state_sema[LEFT]!=EATING
c0108957:	8b 45 08             	mov    0x8(%ebp),%eax
c010895a:	8b 04 85 00 72 1c c0 	mov    -0x3fe38e00(,%eax,4),%eax
c0108961:	83 f8 01             	cmp    $0x1,%eax
c0108964:	0f 85 8d 00 00 00    	jne    c01089f7 <phi_test_sema+0xa6>
c010896a:	8b 45 08             	mov    0x8(%ebp),%eax
c010896d:	8d 48 04             	lea    0x4(%eax),%ecx
c0108970:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0108975:	89 c8                	mov    %ecx,%eax
c0108977:	f7 ea                	imul   %edx
c0108979:	d1 fa                	sar    %edx
c010897b:	89 c8                	mov    %ecx,%eax
c010897d:	c1 f8 1f             	sar    $0x1f,%eax
c0108980:	29 c2                	sub    %eax,%edx
c0108982:	89 d0                	mov    %edx,%eax
c0108984:	89 c2                	mov    %eax,%edx
c0108986:	c1 e2 02             	shl    $0x2,%edx
c0108989:	01 c2                	add    %eax,%edx
c010898b:	89 c8                	mov    %ecx,%eax
c010898d:	29 d0                	sub    %edx,%eax
c010898f:	8b 04 85 00 72 1c c0 	mov    -0x3fe38e00(,%eax,4),%eax
c0108996:	83 f8 02             	cmp    $0x2,%eax
c0108999:	74 5c                	je     c01089f7 <phi_test_sema+0xa6>
            &&state_sema[RIGHT]!=EATING)
c010899b:	8b 45 08             	mov    0x8(%ebp),%eax
c010899e:	8d 48 01             	lea    0x1(%eax),%ecx
c01089a1:	ba 67 66 66 66       	mov    $0x66666667,%edx
c01089a6:	89 c8                	mov    %ecx,%eax
c01089a8:	f7 ea                	imul   %edx
c01089aa:	d1 fa                	sar    %edx
c01089ac:	89 c8                	mov    %ecx,%eax
c01089ae:	c1 f8 1f             	sar    $0x1f,%eax
c01089b1:	29 c2                	sub    %eax,%edx
c01089b3:	89 d0                	mov    %edx,%eax
c01089b5:	89 c2                	mov    %eax,%edx
c01089b7:	c1 e2 02             	shl    $0x2,%edx
c01089ba:	01 c2                	add    %eax,%edx
c01089bc:	89 c8                	mov    %ecx,%eax
c01089be:	29 d0                	sub    %edx,%eax
c01089c0:	8b 04 85 00 72 1c c0 	mov    -0x3fe38e00(,%eax,4),%eax
c01089c7:	83 f8 02             	cmp    $0x2,%eax
c01089ca:	74 2b                	je     c01089f7 <phi_test_sema+0xa6>
    {
        state_sema[i]=EATING;
c01089cc:	8b 45 08             	mov    0x8(%ebp),%eax
c01089cf:	c7 04 85 00 72 1c c0 	movl   $0x2,-0x3fe38e00(,%eax,4)
c01089d6:	02 00 00 00 
        up(&s[i]);
c01089da:	8b 55 08             	mov    0x8(%ebp),%edx
c01089dd:	89 d0                	mov    %edx,%eax
c01089df:	01 c0                	add    %eax,%eax
c01089e1:	01 d0                	add    %edx,%eax
c01089e3:	c1 e0 02             	shl    $0x2,%eax
c01089e6:	05 a0 72 1c c0       	add    $0xc01c72a0,%eax
c01089eb:	83 ec 0c             	sub    $0xc,%esp
c01089ee:	50                   	push   %eax
c01089ef:	e8 fb 0a 00 00       	call   c01094ef <up>
c01089f4:	83 c4 10             	add    $0x10,%esp
    }
}
c01089f7:	90                   	nop
c01089f8:	c9                   	leave  
c01089f9:	c3                   	ret    

c01089fa <phi_take_forks_sema>:

void phi_take_forks_sema(int i) /* i：哲学家号码从0到N-1 */
{ 
c01089fa:	55                   	push   %ebp
c01089fb:	89 e5                	mov    %esp,%ebp
c01089fd:	83 ec 08             	sub    $0x8,%esp
        down(&mutex); /* 进入临界区 */
c0108a00:	83 ec 0c             	sub    $0xc,%esp
c0108a03:	68 28 72 1c c0       	push   $0xc01c7228
c0108a08:	e8 fe 0a 00 00       	call   c010950b <down>
c0108a0d:	83 c4 10             	add    $0x10,%esp
        state_sema[i]=HUNGRY; /* 记录下哲学家i饥饿的事实 */
c0108a10:	8b 45 08             	mov    0x8(%ebp),%eax
c0108a13:	c7 04 85 00 72 1c c0 	movl   $0x1,-0x3fe38e00(,%eax,4)
c0108a1a:	01 00 00 00 
        phi_test_sema(i); /* 试图得到两只叉子 */
c0108a1e:	83 ec 0c             	sub    $0xc,%esp
c0108a21:	ff 75 08             	pushl  0x8(%ebp)
c0108a24:	e8 28 ff ff ff       	call   c0108951 <phi_test_sema>
c0108a29:	83 c4 10             	add    $0x10,%esp
        up(&mutex); /* 离开临界区 */
c0108a2c:	83 ec 0c             	sub    $0xc,%esp
c0108a2f:	68 28 72 1c c0       	push   $0xc01c7228
c0108a34:	e8 b6 0a 00 00       	call   c01094ef <up>
c0108a39:	83 c4 10             	add    $0x10,%esp
        down(&s[i]); /* 如果得不到叉子就阻塞 */
c0108a3c:	8b 55 08             	mov    0x8(%ebp),%edx
c0108a3f:	89 d0                	mov    %edx,%eax
c0108a41:	01 c0                	add    %eax,%eax
c0108a43:	01 d0                	add    %edx,%eax
c0108a45:	c1 e0 02             	shl    $0x2,%eax
c0108a48:	05 a0 72 1c c0       	add    $0xc01c72a0,%eax
c0108a4d:	83 ec 0c             	sub    $0xc,%esp
c0108a50:	50                   	push   %eax
c0108a51:	e8 b5 0a 00 00       	call   c010950b <down>
c0108a56:	83 c4 10             	add    $0x10,%esp
}
c0108a59:	90                   	nop
c0108a5a:	c9                   	leave  
c0108a5b:	c3                   	ret    

c0108a5c <phi_put_forks_sema>:

void phi_put_forks_sema(int i) /* i：哲学家号码从0到N-1 */
{ 
c0108a5c:	55                   	push   %ebp
c0108a5d:	89 e5                	mov    %esp,%ebp
c0108a5f:	83 ec 08             	sub    $0x8,%esp
        down(&mutex); /* 进入临界区 */
c0108a62:	83 ec 0c             	sub    $0xc,%esp
c0108a65:	68 28 72 1c c0       	push   $0xc01c7228
c0108a6a:	e8 9c 0a 00 00       	call   c010950b <down>
c0108a6f:	83 c4 10             	add    $0x10,%esp
        state_sema[i]=THINKING; /* 哲学家进餐结束 */
c0108a72:	8b 45 08             	mov    0x8(%ebp),%eax
c0108a75:	c7 04 85 00 72 1c c0 	movl   $0x0,-0x3fe38e00(,%eax,4)
c0108a7c:	00 00 00 00 
        phi_test_sema(LEFT); /* 看一下左邻居现在是否能进餐 */
c0108a80:	8b 45 08             	mov    0x8(%ebp),%eax
c0108a83:	8d 48 04             	lea    0x4(%eax),%ecx
c0108a86:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0108a8b:	89 c8                	mov    %ecx,%eax
c0108a8d:	f7 ea                	imul   %edx
c0108a8f:	d1 fa                	sar    %edx
c0108a91:	89 c8                	mov    %ecx,%eax
c0108a93:	c1 f8 1f             	sar    $0x1f,%eax
c0108a96:	29 c2                	sub    %eax,%edx
c0108a98:	89 d0                	mov    %edx,%eax
c0108a9a:	89 c2                	mov    %eax,%edx
c0108a9c:	c1 e2 02             	shl    $0x2,%edx
c0108a9f:	01 c2                	add    %eax,%edx
c0108aa1:	89 c8                	mov    %ecx,%eax
c0108aa3:	29 d0                	sub    %edx,%eax
c0108aa5:	83 ec 0c             	sub    $0xc,%esp
c0108aa8:	50                   	push   %eax
c0108aa9:	e8 a3 fe ff ff       	call   c0108951 <phi_test_sema>
c0108aae:	83 c4 10             	add    $0x10,%esp
        phi_test_sema(RIGHT); /* 看一下右邻居现在是否能进餐 */
c0108ab1:	8b 45 08             	mov    0x8(%ebp),%eax
c0108ab4:	8d 48 01             	lea    0x1(%eax),%ecx
c0108ab7:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0108abc:	89 c8                	mov    %ecx,%eax
c0108abe:	f7 ea                	imul   %edx
c0108ac0:	d1 fa                	sar    %edx
c0108ac2:	89 c8                	mov    %ecx,%eax
c0108ac4:	c1 f8 1f             	sar    $0x1f,%eax
c0108ac7:	29 c2                	sub    %eax,%edx
c0108ac9:	89 d0                	mov    %edx,%eax
c0108acb:	89 c2                	mov    %eax,%edx
c0108acd:	c1 e2 02             	shl    $0x2,%edx
c0108ad0:	01 c2                	add    %eax,%edx
c0108ad2:	89 c8                	mov    %ecx,%eax
c0108ad4:	29 d0                	sub    %edx,%eax
c0108ad6:	83 ec 0c             	sub    $0xc,%esp
c0108ad9:	50                   	push   %eax
c0108ada:	e8 72 fe ff ff       	call   c0108951 <phi_test_sema>
c0108adf:	83 c4 10             	add    $0x10,%esp
        up(&mutex); /* 离开临界区 */
c0108ae2:	83 ec 0c             	sub    $0xc,%esp
c0108ae5:	68 28 72 1c c0       	push   $0xc01c7228
c0108aea:	e8 00 0a 00 00       	call   c01094ef <up>
c0108aef:	83 c4 10             	add    $0x10,%esp
}
c0108af2:	90                   	nop
c0108af3:	c9                   	leave  
c0108af4:	c3                   	ret    

c0108af5 <philosopher_using_semaphore>:

int philosopher_using_semaphore(void * arg) /* i：哲学家号码，从0到N-1 */
{
c0108af5:	55                   	push   %ebp
c0108af6:	89 e5                	mov    %esp,%ebp
c0108af8:	83 ec 18             	sub    $0x18,%esp
    int i, iter=0;
c0108afb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    i=(int)arg;
c0108b02:	8b 45 08             	mov    0x8(%ebp),%eax
c0108b05:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cprintf("I am No.%d philosopher_sema\n",i);
c0108b08:	83 ec 08             	sub    $0x8,%esp
c0108b0b:	ff 75 f0             	pushl  -0x10(%ebp)
c0108b0e:	68 9c eb 10 c0       	push   $0xc010eb9c
c0108b13:	e8 7f 77 ff ff       	call   c0100297 <cprintf>
c0108b18:	83 c4 10             	add    $0x10,%esp
    while(iter++<TIMES)
c0108b1b:	eb 62                	jmp    c0108b7f <philosopher_using_semaphore+0x8a>
    { /* 无限循环 */
        cprintf("Iter %d, No.%d philosopher_sema is thinking\n",iter,i); /* 哲学家正在思考 */
c0108b1d:	83 ec 04             	sub    $0x4,%esp
c0108b20:	ff 75 f0             	pushl  -0x10(%ebp)
c0108b23:	ff 75 f4             	pushl  -0xc(%ebp)
c0108b26:	68 bc eb 10 c0       	push   $0xc010ebbc
c0108b2b:	e8 67 77 ff ff       	call   c0100297 <cprintf>
c0108b30:	83 c4 10             	add    $0x10,%esp
        do_sleep(SLEEP_TIME);
c0108b33:	83 ec 0c             	sub    $0xc,%esp
c0108b36:	6a 0a                	push   $0xa
c0108b38:	e8 87 29 00 00       	call   c010b4c4 <do_sleep>
c0108b3d:	83 c4 10             	add    $0x10,%esp
        phi_take_forks_sema(i); 
c0108b40:	83 ec 0c             	sub    $0xc,%esp
c0108b43:	ff 75 f0             	pushl  -0x10(%ebp)
c0108b46:	e8 af fe ff ff       	call   c01089fa <phi_take_forks_sema>
c0108b4b:	83 c4 10             	add    $0x10,%esp
        /* 需要两只叉子，或者阻塞 */
        cprintf("Iter %d, No.%d philosopher_sema is eating\n",iter,i); /* 进餐 */
c0108b4e:	83 ec 04             	sub    $0x4,%esp
c0108b51:	ff 75 f0             	pushl  -0x10(%ebp)
c0108b54:	ff 75 f4             	pushl  -0xc(%ebp)
c0108b57:	68 ec eb 10 c0       	push   $0xc010ebec
c0108b5c:	e8 36 77 ff ff       	call   c0100297 <cprintf>
c0108b61:	83 c4 10             	add    $0x10,%esp
        do_sleep(SLEEP_TIME);
c0108b64:	83 ec 0c             	sub    $0xc,%esp
c0108b67:	6a 0a                	push   $0xa
c0108b69:	e8 56 29 00 00       	call   c010b4c4 <do_sleep>
c0108b6e:	83 c4 10             	add    $0x10,%esp
        phi_put_forks_sema(i); 
c0108b71:	83 ec 0c             	sub    $0xc,%esp
c0108b74:	ff 75 f0             	pushl  -0x10(%ebp)
c0108b77:	e8 e0 fe ff ff       	call   c0108a5c <phi_put_forks_sema>
c0108b7c:	83 c4 10             	add    $0x10,%esp
int philosopher_using_semaphore(void * arg) /* i：哲学家号码，从0到N-1 */
{
    int i, iter=0;
    i=(int)arg;
    cprintf("I am No.%d philosopher_sema\n",i);
    while(iter++<TIMES)
c0108b7f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108b82:	8d 50 01             	lea    0x1(%eax),%edx
c0108b85:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0108b88:	83 f8 03             	cmp    $0x3,%eax
c0108b8b:	7e 90                	jle    c0108b1d <philosopher_using_semaphore+0x28>
        cprintf("Iter %d, No.%d philosopher_sema is eating\n",iter,i); /* 进餐 */
        do_sleep(SLEEP_TIME);
        phi_put_forks_sema(i); 
        /* 把两把叉子同时放回桌子 */
    }
    cprintf("No.%d philosopher_sema quit\n",i);
c0108b8d:	83 ec 08             	sub    $0x8,%esp
c0108b90:	ff 75 f0             	pushl  -0x10(%ebp)
c0108b93:	68 17 ec 10 c0       	push   $0xc010ec17
c0108b98:	e8 fa 76 ff ff       	call   c0100297 <cprintf>
c0108b9d:	83 c4 10             	add    $0x10,%esp
    return 0;    
c0108ba0:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0108ba5:	c9                   	leave  
c0108ba6:	c3                   	ret    

c0108ba7 <phi_test_condvar>:

struct proc_struct *philosopher_proc_condvar[N]; // N philosopher
int state_condvar[N];                            // the philosopher's state: EATING, HUNGARY, THINKING  
monitor_t mt, *mtp=&mt;                          // monitor

void phi_test_condvar (i) { 
c0108ba7:	55                   	push   %ebp
c0108ba8:	89 e5                	mov    %esp,%ebp
c0108baa:	83 ec 08             	sub    $0x8,%esp
    if(state_condvar[i]==HUNGRY&&state_condvar[LEFT]!=EATING
c0108bad:	8b 45 08             	mov    0x8(%ebp),%eax
c0108bb0:	8b 04 85 60 72 1c c0 	mov    -0x3fe38da0(,%eax,4),%eax
c0108bb7:	83 f8 01             	cmp    $0x1,%eax
c0108bba:	0f 85 bd 00 00 00    	jne    c0108c7d <phi_test_condvar+0xd6>
c0108bc0:	8b 45 08             	mov    0x8(%ebp),%eax
c0108bc3:	8d 48 04             	lea    0x4(%eax),%ecx
c0108bc6:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0108bcb:	89 c8                	mov    %ecx,%eax
c0108bcd:	f7 ea                	imul   %edx
c0108bcf:	d1 fa                	sar    %edx
c0108bd1:	89 c8                	mov    %ecx,%eax
c0108bd3:	c1 f8 1f             	sar    $0x1f,%eax
c0108bd6:	29 c2                	sub    %eax,%edx
c0108bd8:	89 d0                	mov    %edx,%eax
c0108bda:	89 c2                	mov    %eax,%edx
c0108bdc:	c1 e2 02             	shl    $0x2,%edx
c0108bdf:	01 c2                	add    %eax,%edx
c0108be1:	89 c8                	mov    %ecx,%eax
c0108be3:	29 d0                	sub    %edx,%eax
c0108be5:	8b 04 85 60 72 1c c0 	mov    -0x3fe38da0(,%eax,4),%eax
c0108bec:	83 f8 02             	cmp    $0x2,%eax
c0108bef:	0f 84 88 00 00 00    	je     c0108c7d <phi_test_condvar+0xd6>
            &&state_condvar[RIGHT]!=EATING) {
c0108bf5:	8b 45 08             	mov    0x8(%ebp),%eax
c0108bf8:	8d 48 01             	lea    0x1(%eax),%ecx
c0108bfb:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0108c00:	89 c8                	mov    %ecx,%eax
c0108c02:	f7 ea                	imul   %edx
c0108c04:	d1 fa                	sar    %edx
c0108c06:	89 c8                	mov    %ecx,%eax
c0108c08:	c1 f8 1f             	sar    $0x1f,%eax
c0108c0b:	29 c2                	sub    %eax,%edx
c0108c0d:	89 d0                	mov    %edx,%eax
c0108c0f:	89 c2                	mov    %eax,%edx
c0108c11:	c1 e2 02             	shl    $0x2,%edx
c0108c14:	01 c2                	add    %eax,%edx
c0108c16:	89 c8                	mov    %ecx,%eax
c0108c18:	29 d0                	sub    %edx,%eax
c0108c1a:	8b 04 85 60 72 1c c0 	mov    -0x3fe38da0(,%eax,4),%eax
c0108c21:	83 f8 02             	cmp    $0x2,%eax
c0108c24:	74 57                	je     c0108c7d <phi_test_condvar+0xd6>
        cprintf("phi_test_condvar: state_condvar[%d] will eating\n",i);
c0108c26:	83 ec 08             	sub    $0x8,%esp
c0108c29:	ff 75 08             	pushl  0x8(%ebp)
c0108c2c:	68 34 ec 10 c0       	push   $0xc010ec34
c0108c31:	e8 61 76 ff ff       	call   c0100297 <cprintf>
c0108c36:	83 c4 10             	add    $0x10,%esp
        state_condvar[i] = EATING ;
c0108c39:	8b 45 08             	mov    0x8(%ebp),%eax
c0108c3c:	c7 04 85 60 72 1c c0 	movl   $0x2,-0x3fe38da0(,%eax,4)
c0108c43:	02 00 00 00 
        cprintf("phi_test_condvar: signal self_cv[%d] \n",i);
c0108c47:	83 ec 08             	sub    $0x8,%esp
c0108c4a:	ff 75 08             	pushl  0x8(%ebp)
c0108c4d:	68 68 ec 10 c0       	push   $0xc010ec68
c0108c52:	e8 40 76 ff ff       	call   c0100297 <cprintf>
c0108c57:	83 c4 10             	add    $0x10,%esp
        cond_signal(&mtp->cv[i]) ;
c0108c5a:	a1 78 1a 13 c0       	mov    0xc0131a78,%eax
c0108c5f:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0108c62:	8b 55 08             	mov    0x8(%ebp),%edx
c0108c65:	89 d0                	mov    %edx,%eax
c0108c67:	c1 e0 02             	shl    $0x2,%eax
c0108c6a:	01 d0                	add    %edx,%eax
c0108c6c:	c1 e0 02             	shl    $0x2,%eax
c0108c6f:	01 c8                	add    %ecx,%eax
c0108c71:	83 ec 0c             	sub    $0xc,%esp
c0108c74:	50                   	push   %eax
c0108c75:	e8 20 0a 00 00       	call   c010969a <cond_signal>
c0108c7a:	83 c4 10             	add    $0x10,%esp
    }
}
c0108c7d:	90                   	nop
c0108c7e:	c9                   	leave  
c0108c7f:	c3                   	ret    

c0108c80 <phi_take_forks_condvar>:


void phi_take_forks_condvar(int i) {
c0108c80:	55                   	push   %ebp
c0108c81:	89 e5                	mov    %esp,%ebp
c0108c83:	83 ec 08             	sub    $0x8,%esp
    down(&(mtp->mutex));
c0108c86:	a1 78 1a 13 c0       	mov    0xc0131a78,%eax
c0108c8b:	83 ec 0c             	sub    $0xc,%esp
c0108c8e:	50                   	push   %eax
c0108c8f:	e8 77 08 00 00       	call   c010950b <down>
c0108c94:	83 c4 10             	add    $0x10,%esp
//--------into routine in monitor--------------
     // LAB7 EXERCISE1: 2015010062
     // I am hungry
     // try to get fork
    state_condvar[i]=HUNGRY; /* 记录下哲学家i饥饿的事实 */
c0108c97:	8b 45 08             	mov    0x8(%ebp),%eax
c0108c9a:	c7 04 85 60 72 1c c0 	movl   $0x1,-0x3fe38da0(,%eax,4)
c0108ca1:	01 00 00 00 
    phi_test_condvar(i); /* 试图得到两只叉子 */
c0108ca5:	83 ec 0c             	sub    $0xc,%esp
c0108ca8:	ff 75 08             	pushl  0x8(%ebp)
c0108cab:	e8 f7 fe ff ff       	call   c0108ba7 <phi_test_condvar>
c0108cb0:	83 c4 10             	add    $0x10,%esp

//--------leave routine in monitor--------------
    if(mtp->next_count>0)
c0108cb3:	a1 78 1a 13 c0       	mov    0xc0131a78,%eax
c0108cb8:	8b 40 18             	mov    0x18(%eax),%eax
c0108cbb:	85 c0                	test   %eax,%eax
c0108cbd:	7e 16                	jle    c0108cd5 <phi_take_forks_condvar+0x55>
        up(&(mtp->next));
c0108cbf:	a1 78 1a 13 c0       	mov    0xc0131a78,%eax
c0108cc4:	83 c0 0c             	add    $0xc,%eax
c0108cc7:	83 ec 0c             	sub    $0xc,%esp
c0108cca:	50                   	push   %eax
c0108ccb:	e8 1f 08 00 00       	call   c01094ef <up>
c0108cd0:	83 c4 10             	add    $0x10,%esp
    else
        up(&(mtp->mutex));
}
c0108cd3:	eb 11                	jmp    c0108ce6 <phi_take_forks_condvar+0x66>

//--------leave routine in monitor--------------
    if(mtp->next_count>0)
        up(&(mtp->next));
    else
        up(&(mtp->mutex));
c0108cd5:	a1 78 1a 13 c0       	mov    0xc0131a78,%eax
c0108cda:	83 ec 0c             	sub    $0xc,%esp
c0108cdd:	50                   	push   %eax
c0108cde:	e8 0c 08 00 00       	call   c01094ef <up>
c0108ce3:	83 c4 10             	add    $0x10,%esp
}
c0108ce6:	90                   	nop
c0108ce7:	c9                   	leave  
c0108ce8:	c3                   	ret    

c0108ce9 <phi_put_forks_condvar>:

void phi_put_forks_condvar(int i) {
c0108ce9:	55                   	push   %ebp
c0108cea:	89 e5                	mov    %esp,%ebp
c0108cec:	83 ec 08             	sub    $0x8,%esp
     down(&(mtp->mutex));
c0108cef:	a1 78 1a 13 c0       	mov    0xc0131a78,%eax
c0108cf4:	83 ec 0c             	sub    $0xc,%esp
c0108cf7:	50                   	push   %eax
c0108cf8:	e8 0e 08 00 00       	call   c010950b <down>
c0108cfd:	83 c4 10             	add    $0x10,%esp

//--------into routine in monitor--------------
     // LAB7 EXERCISE1: 2015010062
     // I ate over
     // test left and right neighbors
    state_condvar[i]=THINKING; /* 哲学家进餐结束 */
c0108d00:	8b 45 08             	mov    0x8(%ebp),%eax
c0108d03:	c7 04 85 60 72 1c c0 	movl   $0x0,-0x3fe38da0(,%eax,4)
c0108d0a:	00 00 00 00 
    phi_test_condvar(LEFT); /* 看一下左邻居现在是否能进餐 */
c0108d0e:	8b 45 08             	mov    0x8(%ebp),%eax
c0108d11:	8d 48 04             	lea    0x4(%eax),%ecx
c0108d14:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0108d19:	89 c8                	mov    %ecx,%eax
c0108d1b:	f7 ea                	imul   %edx
c0108d1d:	d1 fa                	sar    %edx
c0108d1f:	89 c8                	mov    %ecx,%eax
c0108d21:	c1 f8 1f             	sar    $0x1f,%eax
c0108d24:	29 c2                	sub    %eax,%edx
c0108d26:	89 d0                	mov    %edx,%eax
c0108d28:	89 c2                	mov    %eax,%edx
c0108d2a:	c1 e2 02             	shl    $0x2,%edx
c0108d2d:	01 c2                	add    %eax,%edx
c0108d2f:	89 c8                	mov    %ecx,%eax
c0108d31:	29 d0                	sub    %edx,%eax
c0108d33:	83 ec 0c             	sub    $0xc,%esp
c0108d36:	50                   	push   %eax
c0108d37:	e8 6b fe ff ff       	call   c0108ba7 <phi_test_condvar>
c0108d3c:	83 c4 10             	add    $0x10,%esp
    phi_test_condvar(RIGHT); /* 看一下右邻居现在是否能进餐 */
c0108d3f:	8b 45 08             	mov    0x8(%ebp),%eax
c0108d42:	8d 48 01             	lea    0x1(%eax),%ecx
c0108d45:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0108d4a:	89 c8                	mov    %ecx,%eax
c0108d4c:	f7 ea                	imul   %edx
c0108d4e:	d1 fa                	sar    %edx
c0108d50:	89 c8                	mov    %ecx,%eax
c0108d52:	c1 f8 1f             	sar    $0x1f,%eax
c0108d55:	29 c2                	sub    %eax,%edx
c0108d57:	89 d0                	mov    %edx,%eax
c0108d59:	89 c2                	mov    %eax,%edx
c0108d5b:	c1 e2 02             	shl    $0x2,%edx
c0108d5e:	01 c2                	add    %eax,%edx
c0108d60:	89 c8                	mov    %ecx,%eax
c0108d62:	29 d0                	sub    %edx,%eax
c0108d64:	83 ec 0c             	sub    $0xc,%esp
c0108d67:	50                   	push   %eax
c0108d68:	e8 3a fe ff ff       	call   c0108ba7 <phi_test_condvar>
c0108d6d:	83 c4 10             	add    $0x10,%esp
//--------leave routine in monitor--------------
    if(mtp->next_count>0)
c0108d70:	a1 78 1a 13 c0       	mov    0xc0131a78,%eax
c0108d75:	8b 40 18             	mov    0x18(%eax),%eax
c0108d78:	85 c0                	test   %eax,%eax
c0108d7a:	7e 16                	jle    c0108d92 <phi_put_forks_condvar+0xa9>
        up(&(mtp->next));
c0108d7c:	a1 78 1a 13 c0       	mov    0xc0131a78,%eax
c0108d81:	83 c0 0c             	add    $0xc,%eax
c0108d84:	83 ec 0c             	sub    $0xc,%esp
c0108d87:	50                   	push   %eax
c0108d88:	e8 62 07 00 00       	call   c01094ef <up>
c0108d8d:	83 c4 10             	add    $0x10,%esp
    else
        up(&(mtp->mutex));
}
c0108d90:	eb 11                	jmp    c0108da3 <phi_put_forks_condvar+0xba>
    phi_test_condvar(RIGHT); /* 看一下右邻居现在是否能进餐 */
//--------leave routine in monitor--------------
    if(mtp->next_count>0)
        up(&(mtp->next));
    else
        up(&(mtp->mutex));
c0108d92:	a1 78 1a 13 c0       	mov    0xc0131a78,%eax
c0108d97:	83 ec 0c             	sub    $0xc,%esp
c0108d9a:	50                   	push   %eax
c0108d9b:	e8 4f 07 00 00       	call   c01094ef <up>
c0108da0:	83 c4 10             	add    $0x10,%esp
}
c0108da3:	90                   	nop
c0108da4:	c9                   	leave  
c0108da5:	c3                   	ret    

c0108da6 <philosopher_using_condvar>:

//---------- philosophers using monitor (condition variable) ----------------------
int philosopher_using_condvar(void * arg) { /* arg is the No. of philosopher 0~N-1*/
c0108da6:	55                   	push   %ebp
c0108da7:	89 e5                	mov    %esp,%ebp
c0108da9:	83 ec 18             	sub    $0x18,%esp
  
    int i, iter=0;
c0108dac:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    i=(int)arg;
c0108db3:	8b 45 08             	mov    0x8(%ebp),%eax
c0108db6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cprintf("I am No.%d philosopher_condvar\n",i);
c0108db9:	83 ec 08             	sub    $0x8,%esp
c0108dbc:	ff 75 f0             	pushl  -0x10(%ebp)
c0108dbf:	68 90 ec 10 c0       	push   $0xc010ec90
c0108dc4:	e8 ce 74 ff ff       	call   c0100297 <cprintf>
c0108dc9:	83 c4 10             	add    $0x10,%esp
    while(iter++<TIMES)
c0108dcc:	eb 62                	jmp    c0108e30 <philosopher_using_condvar+0x8a>
    { /* iterate*/
        cprintf("Iter %d, No.%d philosopher_condvar is thinking\n",iter,i); /* thinking*/
c0108dce:	83 ec 04             	sub    $0x4,%esp
c0108dd1:	ff 75 f0             	pushl  -0x10(%ebp)
c0108dd4:	ff 75 f4             	pushl  -0xc(%ebp)
c0108dd7:	68 b0 ec 10 c0       	push   $0xc010ecb0
c0108ddc:	e8 b6 74 ff ff       	call   c0100297 <cprintf>
c0108de1:	83 c4 10             	add    $0x10,%esp
        do_sleep(SLEEP_TIME);
c0108de4:	83 ec 0c             	sub    $0xc,%esp
c0108de7:	6a 0a                	push   $0xa
c0108de9:	e8 d6 26 00 00       	call   c010b4c4 <do_sleep>
c0108dee:	83 c4 10             	add    $0x10,%esp
        phi_take_forks_condvar(i); 
c0108df1:	83 ec 0c             	sub    $0xc,%esp
c0108df4:	ff 75 f0             	pushl  -0x10(%ebp)
c0108df7:	e8 84 fe ff ff       	call   c0108c80 <phi_take_forks_condvar>
c0108dfc:	83 c4 10             	add    $0x10,%esp
        /* need two forks, maybe blocked */
        cprintf("Iter %d, No.%d philosopher_condvar is eating\n",iter,i); /* eating*/
c0108dff:	83 ec 04             	sub    $0x4,%esp
c0108e02:	ff 75 f0             	pushl  -0x10(%ebp)
c0108e05:	ff 75 f4             	pushl  -0xc(%ebp)
c0108e08:	68 e0 ec 10 c0       	push   $0xc010ece0
c0108e0d:	e8 85 74 ff ff       	call   c0100297 <cprintf>
c0108e12:	83 c4 10             	add    $0x10,%esp
        do_sleep(SLEEP_TIME);
c0108e15:	83 ec 0c             	sub    $0xc,%esp
c0108e18:	6a 0a                	push   $0xa
c0108e1a:	e8 a5 26 00 00       	call   c010b4c4 <do_sleep>
c0108e1f:	83 c4 10             	add    $0x10,%esp
        phi_put_forks_condvar(i); 
c0108e22:	83 ec 0c             	sub    $0xc,%esp
c0108e25:	ff 75 f0             	pushl  -0x10(%ebp)
c0108e28:	e8 bc fe ff ff       	call   c0108ce9 <phi_put_forks_condvar>
c0108e2d:	83 c4 10             	add    $0x10,%esp
int philosopher_using_condvar(void * arg) { /* arg is the No. of philosopher 0~N-1*/
  
    int i, iter=0;
    i=(int)arg;
    cprintf("I am No.%d philosopher_condvar\n",i);
    while(iter++<TIMES)
c0108e30:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108e33:	8d 50 01             	lea    0x1(%eax),%edx
c0108e36:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0108e39:	83 f8 03             	cmp    $0x3,%eax
c0108e3c:	7e 90                	jle    c0108dce <philosopher_using_condvar+0x28>
        cprintf("Iter %d, No.%d philosopher_condvar is eating\n",iter,i); /* eating*/
        do_sleep(SLEEP_TIME);
        phi_put_forks_condvar(i); 
        /* return two forks back*/
    }
    cprintf("No.%d philosopher_condvar quit\n",i);
c0108e3e:	83 ec 08             	sub    $0x8,%esp
c0108e41:	ff 75 f0             	pushl  -0x10(%ebp)
c0108e44:	68 10 ed 10 c0       	push   $0xc010ed10
c0108e49:	e8 49 74 ff ff       	call   c0100297 <cprintf>
c0108e4e:	83 c4 10             	add    $0x10,%esp
    return 0;    
c0108e51:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0108e56:	c9                   	leave  
c0108e57:	c3                   	ret    

c0108e58 <check_sync>:

void check_sync(void){
c0108e58:	55                   	push   %ebp
c0108e59:	89 e5                	mov    %esp,%ebp
c0108e5b:	83 ec 18             	sub    $0x18,%esp
    //     philosopher_proc_sema[i] = find_proc(pid);
    //     set_proc_name(philosopher_proc_sema[i], "philosopher_sema_proc");
    // }

    //check condition variable
    monitor_init(&mt, N);
c0108e5e:	83 ec 08             	sub    $0x8,%esp
c0108e61:	6a 05                	push   $0x5
c0108e63:	68 40 72 1c c0       	push   $0xc01c7240
c0108e68:	e8 1e 07 00 00       	call   c010958b <monitor_init>
c0108e6d:	83 c4 10             	add    $0x10,%esp
    for(i=0;i<N;i++){
c0108e70:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0108e77:	eb 7d                	jmp    c0108ef6 <check_sync+0x9e>
        state_condvar[i]=THINKING;
c0108e79:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108e7c:	c7 04 85 60 72 1c c0 	movl   $0x0,-0x3fe38da0(,%eax,4)
c0108e83:	00 00 00 00 
        int pid = kernel_thread(philosopher_using_condvar, (void *)i, 0);
c0108e87:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108e8a:	83 ec 04             	sub    $0x4,%esp
c0108e8d:	6a 00                	push   $0x0
c0108e8f:	50                   	push   %eax
c0108e90:	68 a6 8d 10 c0       	push   $0xc0108da6
c0108e95:	e8 ca 12 00 00       	call   c010a164 <kernel_thread>
c0108e9a:	83 c4 10             	add    $0x10,%esp
c0108e9d:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pid <= 0) {
c0108ea0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0108ea4:	7f 17                	jg     c0108ebd <check_sync+0x65>
            panic("create No.%d philosopher_using_condvar failed.\n");
c0108ea6:	83 ec 04             	sub    $0x4,%esp
c0108ea9:	68 30 ed 10 c0       	push   $0xc010ed30
c0108eae:	68 01 01 00 00       	push   $0x101
c0108eb3:	68 60 ed 10 c0       	push   $0xc010ed60
c0108eb8:	e8 40 75 ff ff       	call   c01003fd <__panic>
        }
        philosopher_proc_condvar[i] = find_proc(pid);
c0108ebd:	83 ec 0c             	sub    $0xc,%esp
c0108ec0:	ff 75 f0             	pushl  -0x10(%ebp)
c0108ec3:	e8 2a 12 00 00       	call   c010a0f2 <find_proc>
c0108ec8:	83 c4 10             	add    $0x10,%esp
c0108ecb:	89 c2                	mov    %eax,%edx
c0108ecd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108ed0:	89 14 85 14 72 1c c0 	mov    %edx,-0x3fe38dec(,%eax,4)
        set_proc_name(philosopher_proc_condvar[i], "philosopher_condvar_proc");
c0108ed7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108eda:	8b 04 85 14 72 1c c0 	mov    -0x3fe38dec(,%eax,4),%eax
c0108ee1:	83 ec 08             	sub    $0x8,%esp
c0108ee4:	68 77 ed 10 c0       	push   $0xc010ed77
c0108ee9:	50                   	push   %eax
c0108eea:	e8 f6 0d 00 00       	call   c0109ce5 <set_proc_name>
c0108eef:	83 c4 10             	add    $0x10,%esp
    //     set_proc_name(philosopher_proc_sema[i], "philosopher_sema_proc");
    // }

    //check condition variable
    monitor_init(&mt, N);
    for(i=0;i<N;i++){
c0108ef2:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0108ef6:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
c0108efa:	0f 8e 79 ff ff ff    	jle    c0108e79 <check_sync+0x21>
            panic("create No.%d philosopher_using_condvar failed.\n");
        }
        philosopher_proc_condvar[i] = find_proc(pid);
        set_proc_name(philosopher_proc_condvar[i], "philosopher_condvar_proc");
    }
}
c0108f00:	90                   	nop
c0108f01:	c9                   	leave  
c0108f02:	c3                   	ret    

c0108f03 <wait_init>:
#include <sync.h>
#include <wait.h>
#include <proc.h>

void
wait_init(wait_t *wait, struct proc_struct *proc) {
c0108f03:	55                   	push   %ebp
c0108f04:	89 e5                	mov    %esp,%ebp
c0108f06:	83 ec 10             	sub    $0x10,%esp
    wait->proc = proc;
c0108f09:	8b 45 08             	mov    0x8(%ebp),%eax
c0108f0c:	8b 55 0c             	mov    0xc(%ebp),%edx
c0108f0f:	89 10                	mov    %edx,(%eax)
    wait->wakeup_flags = WT_INTERRUPTED;
c0108f11:	8b 45 08             	mov    0x8(%ebp),%eax
c0108f14:	c7 40 04 00 00 00 80 	movl   $0x80000000,0x4(%eax)
    list_init(&(wait->wait_link));
c0108f1b:	8b 45 08             	mov    0x8(%ebp),%eax
c0108f1e:	83 c0 0c             	add    $0xc,%eax
c0108f21:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0108f24:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108f27:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0108f2a:	89 50 04             	mov    %edx,0x4(%eax)
c0108f2d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108f30:	8b 50 04             	mov    0x4(%eax),%edx
c0108f33:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108f36:	89 10                	mov    %edx,(%eax)
}
c0108f38:	90                   	nop
c0108f39:	c9                   	leave  
c0108f3a:	c3                   	ret    

c0108f3b <wait_queue_init>:

void
wait_queue_init(wait_queue_t *queue) {
c0108f3b:	55                   	push   %ebp
c0108f3c:	89 e5                	mov    %esp,%ebp
c0108f3e:	83 ec 10             	sub    $0x10,%esp
    list_init(&(queue->wait_head));
c0108f41:	8b 45 08             	mov    0x8(%ebp),%eax
c0108f44:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0108f47:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108f4a:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0108f4d:	89 50 04             	mov    %edx,0x4(%eax)
c0108f50:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108f53:	8b 50 04             	mov    0x4(%eax),%edx
c0108f56:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108f59:	89 10                	mov    %edx,(%eax)
}
c0108f5b:	90                   	nop
c0108f5c:	c9                   	leave  
c0108f5d:	c3                   	ret    

c0108f5e <wait_queue_add>:

void
wait_queue_add(wait_queue_t *queue, wait_t *wait) {
c0108f5e:	55                   	push   %ebp
c0108f5f:	89 e5                	mov    %esp,%ebp
c0108f61:	83 ec 28             	sub    $0x28,%esp
    assert(list_empty(&(wait->wait_link)) && wait->proc != NULL);
c0108f64:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108f67:	83 c0 0c             	add    $0xc,%eax
c0108f6a:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0108f6d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108f70:	8b 40 04             	mov    0x4(%eax),%eax
c0108f73:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0108f76:	0f 94 c0             	sete   %al
c0108f79:	0f b6 c0             	movzbl %al,%eax
c0108f7c:	85 c0                	test   %eax,%eax
c0108f7e:	74 09                	je     c0108f89 <wait_queue_add+0x2b>
c0108f80:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108f83:	8b 00                	mov    (%eax),%eax
c0108f85:	85 c0                	test   %eax,%eax
c0108f87:	75 16                	jne    c0108f9f <wait_queue_add+0x41>
c0108f89:	68 90 ed 10 c0       	push   $0xc010ed90
c0108f8e:	68 c5 ed 10 c0       	push   $0xc010edc5
c0108f93:	6a 15                	push   $0x15
c0108f95:	68 da ed 10 c0       	push   $0xc010edda
c0108f9a:	e8 5e 74 ff ff       	call   c01003fd <__panic>
    wait->wait_queue = queue;
c0108f9f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108fa2:	8b 55 08             	mov    0x8(%ebp),%edx
c0108fa5:	89 50 08             	mov    %edx,0x8(%eax)
    list_add_before(&(queue->wait_head), &(wait->wait_link));
c0108fa8:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108fab:	8d 50 0c             	lea    0xc(%eax),%edx
c0108fae:	8b 45 08             	mov    0x8(%ebp),%eax
c0108fb1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108fb4:	89 55 ec             	mov    %edx,-0x14(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c0108fb7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108fba:	8b 00                	mov    (%eax),%eax
c0108fbc:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0108fbf:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0108fc2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0108fc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108fc8:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0108fcb:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108fce:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0108fd1:	89 10                	mov    %edx,(%eax)
c0108fd3:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108fd6:	8b 10                	mov    (%eax),%edx
c0108fd8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108fdb:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0108fde:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108fe1:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0108fe4:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0108fe7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108fea:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0108fed:	89 10                	mov    %edx,(%eax)
}
c0108fef:	90                   	nop
c0108ff0:	c9                   	leave  
c0108ff1:	c3                   	ret    

c0108ff2 <wait_queue_del>:

void
wait_queue_del(wait_queue_t *queue, wait_t *wait) {
c0108ff2:	55                   	push   %ebp
c0108ff3:	89 e5                	mov    %esp,%ebp
c0108ff5:	83 ec 28             	sub    $0x28,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c0108ff8:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108ffb:	83 c0 0c             	add    $0xc,%eax
c0108ffe:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0109001:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109004:	8b 40 04             	mov    0x4(%eax),%eax
c0109007:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010900a:	0f 94 c0             	sete   %al
c010900d:	0f b6 c0             	movzbl %al,%eax
c0109010:	85 c0                	test   %eax,%eax
c0109012:	75 0b                	jne    c010901f <wait_queue_del+0x2d>
c0109014:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109017:	8b 40 08             	mov    0x8(%eax),%eax
c010901a:	3b 45 08             	cmp    0x8(%ebp),%eax
c010901d:	74 16                	je     c0109035 <wait_queue_del+0x43>
c010901f:	68 ec ed 10 c0       	push   $0xc010edec
c0109024:	68 c5 ed 10 c0       	push   $0xc010edc5
c0109029:	6a 1c                	push   $0x1c
c010902b:	68 da ed 10 c0       	push   $0xc010edda
c0109030:	e8 c8 73 ff ff       	call   c01003fd <__panic>
    list_del_init(&(wait->wait_link));
c0109035:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109038:	83 c0 0c             	add    $0xc,%eax
c010903b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010903e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109041:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0109044:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109047:	8b 40 04             	mov    0x4(%eax),%eax
c010904a:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010904d:	8b 12                	mov    (%edx),%edx
c010904f:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0109052:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0109055:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109058:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010905b:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010905e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109061:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0109064:	89 10                	mov    %edx,(%eax)
c0109066:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109069:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010906c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010906f:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0109072:	89 50 04             	mov    %edx,0x4(%eax)
c0109075:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109078:	8b 50 04             	mov    0x4(%eax),%edx
c010907b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010907e:	89 10                	mov    %edx,(%eax)
}
c0109080:	90                   	nop
c0109081:	c9                   	leave  
c0109082:	c3                   	ret    

c0109083 <wait_queue_next>:

wait_t *
wait_queue_next(wait_queue_t *queue, wait_t *wait) {
c0109083:	55                   	push   %ebp
c0109084:	89 e5                	mov    %esp,%ebp
c0109086:	83 ec 18             	sub    $0x18,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c0109089:	8b 45 0c             	mov    0xc(%ebp),%eax
c010908c:	83 c0 0c             	add    $0xc,%eax
c010908f:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0109092:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109095:	8b 40 04             	mov    0x4(%eax),%eax
c0109098:	39 45 ec             	cmp    %eax,-0x14(%ebp)
c010909b:	0f 94 c0             	sete   %al
c010909e:	0f b6 c0             	movzbl %al,%eax
c01090a1:	85 c0                	test   %eax,%eax
c01090a3:	75 0b                	jne    c01090b0 <wait_queue_next+0x2d>
c01090a5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01090a8:	8b 40 08             	mov    0x8(%eax),%eax
c01090ab:	3b 45 08             	cmp    0x8(%ebp),%eax
c01090ae:	74 16                	je     c01090c6 <wait_queue_next+0x43>
c01090b0:	68 ec ed 10 c0       	push   $0xc010edec
c01090b5:	68 c5 ed 10 c0       	push   $0xc010edc5
c01090ba:	6a 22                	push   $0x22
c01090bc:	68 da ed 10 c0       	push   $0xc010edda
c01090c1:	e8 37 73 ff ff       	call   c01003fd <__panic>
    list_entry_t *le = list_next(&(wait->wait_link));
c01090c6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01090c9:	83 c0 0c             	add    $0xc,%eax
c01090cc:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01090cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01090d2:	8b 40 04             	mov    0x4(%eax),%eax
c01090d5:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (le != &(queue->wait_head)) {
c01090d8:	8b 45 08             	mov    0x8(%ebp),%eax
c01090db:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01090de:	74 08                	je     c01090e8 <wait_queue_next+0x65>
        return le2wait(le, wait_link);
c01090e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01090e3:	83 e8 0c             	sub    $0xc,%eax
c01090e6:	eb 05                	jmp    c01090ed <wait_queue_next+0x6a>
    }
    return NULL;
c01090e8:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01090ed:	c9                   	leave  
c01090ee:	c3                   	ret    

c01090ef <wait_queue_prev>:

wait_t *
wait_queue_prev(wait_queue_t *queue, wait_t *wait) {
c01090ef:	55                   	push   %ebp
c01090f0:	89 e5                	mov    %esp,%ebp
c01090f2:	83 ec 18             	sub    $0x18,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c01090f5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01090f8:	83 c0 0c             	add    $0xc,%eax
c01090fb:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c01090fe:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109101:	8b 40 04             	mov    0x4(%eax),%eax
c0109104:	39 45 ec             	cmp    %eax,-0x14(%ebp)
c0109107:	0f 94 c0             	sete   %al
c010910a:	0f b6 c0             	movzbl %al,%eax
c010910d:	85 c0                	test   %eax,%eax
c010910f:	75 0b                	jne    c010911c <wait_queue_prev+0x2d>
c0109111:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109114:	8b 40 08             	mov    0x8(%eax),%eax
c0109117:	3b 45 08             	cmp    0x8(%ebp),%eax
c010911a:	74 16                	je     c0109132 <wait_queue_prev+0x43>
c010911c:	68 ec ed 10 c0       	push   $0xc010edec
c0109121:	68 c5 ed 10 c0       	push   $0xc010edc5
c0109126:	6a 2c                	push   $0x2c
c0109128:	68 da ed 10 c0       	push   $0xc010edda
c010912d:	e8 cb 72 ff ff       	call   c01003fd <__panic>
    list_entry_t *le = list_prev(&(wait->wait_link));
c0109132:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109135:	83 c0 0c             	add    $0xc,%eax
c0109138:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c010913b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010913e:	8b 00                	mov    (%eax),%eax
c0109140:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (le != &(queue->wait_head)) {
c0109143:	8b 45 08             	mov    0x8(%ebp),%eax
c0109146:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0109149:	74 08                	je     c0109153 <wait_queue_prev+0x64>
        return le2wait(le, wait_link);
c010914b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010914e:	83 e8 0c             	sub    $0xc,%eax
c0109151:	eb 05                	jmp    c0109158 <wait_queue_prev+0x69>
    }
    return NULL;
c0109153:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109158:	c9                   	leave  
c0109159:	c3                   	ret    

c010915a <wait_queue_first>:

wait_t *
wait_queue_first(wait_queue_t *queue) {
c010915a:	55                   	push   %ebp
c010915b:	89 e5                	mov    %esp,%ebp
c010915d:	83 ec 10             	sub    $0x10,%esp
    list_entry_t *le = list_next(&(queue->wait_head));
c0109160:	8b 45 08             	mov    0x8(%ebp),%eax
c0109163:	89 45 f8             	mov    %eax,-0x8(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0109166:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0109169:	8b 40 04             	mov    0x4(%eax),%eax
c010916c:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (le != &(queue->wait_head)) {
c010916f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109172:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0109175:	74 08                	je     c010917f <wait_queue_first+0x25>
        return le2wait(le, wait_link);
c0109177:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010917a:	83 e8 0c             	sub    $0xc,%eax
c010917d:	eb 05                	jmp    c0109184 <wait_queue_first+0x2a>
    }
    return NULL;
c010917f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109184:	c9                   	leave  
c0109185:	c3                   	ret    

c0109186 <wait_queue_last>:

wait_t *
wait_queue_last(wait_queue_t *queue) {
c0109186:	55                   	push   %ebp
c0109187:	89 e5                	mov    %esp,%ebp
c0109189:	83 ec 10             	sub    $0x10,%esp
    list_entry_t *le = list_prev(&(queue->wait_head));
c010918c:	8b 45 08             	mov    0x8(%ebp),%eax
c010918f:	89 45 f8             	mov    %eax,-0x8(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c0109192:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0109195:	8b 00                	mov    (%eax),%eax
c0109197:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (le != &(queue->wait_head)) {
c010919a:	8b 45 08             	mov    0x8(%ebp),%eax
c010919d:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c01091a0:	74 08                	je     c01091aa <wait_queue_last+0x24>
        return le2wait(le, wait_link);
c01091a2:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01091a5:	83 e8 0c             	sub    $0xc,%eax
c01091a8:	eb 05                	jmp    c01091af <wait_queue_last+0x29>
    }
    return NULL;
c01091aa:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01091af:	c9                   	leave  
c01091b0:	c3                   	ret    

c01091b1 <wait_queue_empty>:

bool
wait_queue_empty(wait_queue_t *queue) {
c01091b1:	55                   	push   %ebp
c01091b2:	89 e5                	mov    %esp,%ebp
c01091b4:	83 ec 10             	sub    $0x10,%esp
    return list_empty(&(queue->wait_head));
c01091b7:	8b 45 08             	mov    0x8(%ebp),%eax
c01091ba:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c01091bd:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01091c0:	8b 40 04             	mov    0x4(%eax),%eax
c01091c3:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c01091c6:	0f 94 c0             	sete   %al
c01091c9:	0f b6 c0             	movzbl %al,%eax
c01091cc:	90                   	nop
}
c01091cd:	c9                   	leave  
c01091ce:	c3                   	ret    

c01091cf <wait_in_queue>:

bool
wait_in_queue(wait_t *wait) {
c01091cf:	55                   	push   %ebp
c01091d0:	89 e5                	mov    %esp,%ebp
c01091d2:	83 ec 10             	sub    $0x10,%esp
    return !list_empty(&(wait->wait_link));
c01091d5:	8b 45 08             	mov    0x8(%ebp),%eax
c01091d8:	83 c0 0c             	add    $0xc,%eax
c01091db:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01091de:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01091e1:	8b 40 04             	mov    0x4(%eax),%eax
c01091e4:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c01091e7:	0f 94 c0             	sete   %al
c01091ea:	0f b6 c0             	movzbl %al,%eax
c01091ed:	85 c0                	test   %eax,%eax
c01091ef:	0f 94 c0             	sete   %al
c01091f2:	0f b6 c0             	movzbl %al,%eax
}
c01091f5:	c9                   	leave  
c01091f6:	c3                   	ret    

c01091f7 <wakeup_wait>:

void
wakeup_wait(wait_queue_t *queue, wait_t *wait, uint32_t wakeup_flags, bool del) {
c01091f7:	55                   	push   %ebp
c01091f8:	89 e5                	mov    %esp,%ebp
c01091fa:	83 ec 08             	sub    $0x8,%esp
    if (del) {
c01091fd:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0109201:	74 11                	je     c0109214 <wakeup_wait+0x1d>
        wait_queue_del(queue, wait);
c0109203:	83 ec 08             	sub    $0x8,%esp
c0109206:	ff 75 0c             	pushl  0xc(%ebp)
c0109209:	ff 75 08             	pushl  0x8(%ebp)
c010920c:	e8 e1 fd ff ff       	call   c0108ff2 <wait_queue_del>
c0109211:	83 c4 10             	add    $0x10,%esp
    }
    wait->wakeup_flags = wakeup_flags;
c0109214:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109217:	8b 55 10             	mov    0x10(%ebp),%edx
c010921a:	89 50 04             	mov    %edx,0x4(%eax)
    wakeup_proc(wait->proc);
c010921d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109220:	8b 00                	mov    (%eax),%eax
c0109222:	83 ec 0c             	sub    $0xc,%esp
c0109225:	50                   	push   %eax
c0109226:	e8 79 24 00 00       	call   c010b6a4 <wakeup_proc>
c010922b:	83 c4 10             	add    $0x10,%esp
}
c010922e:	90                   	nop
c010922f:	c9                   	leave  
c0109230:	c3                   	ret    

c0109231 <wakeup_first>:

void
wakeup_first(wait_queue_t *queue, uint32_t wakeup_flags, bool del) {
c0109231:	55                   	push   %ebp
c0109232:	89 e5                	mov    %esp,%ebp
c0109234:	83 ec 18             	sub    $0x18,%esp
    wait_t *wait;
    if ((wait = wait_queue_first(queue)) != NULL) {
c0109237:	ff 75 08             	pushl  0x8(%ebp)
c010923a:	e8 1b ff ff ff       	call   c010915a <wait_queue_first>
c010923f:	83 c4 04             	add    $0x4,%esp
c0109242:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109245:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109249:	74 14                	je     c010925f <wakeup_first+0x2e>
        wakeup_wait(queue, wait, wakeup_flags, del);
c010924b:	ff 75 10             	pushl  0x10(%ebp)
c010924e:	ff 75 0c             	pushl  0xc(%ebp)
c0109251:	ff 75 f4             	pushl  -0xc(%ebp)
c0109254:	ff 75 08             	pushl  0x8(%ebp)
c0109257:	e8 9b ff ff ff       	call   c01091f7 <wakeup_wait>
c010925c:	83 c4 10             	add    $0x10,%esp
    }
}
c010925f:	90                   	nop
c0109260:	c9                   	leave  
c0109261:	c3                   	ret    

c0109262 <wakeup_queue>:

void
wakeup_queue(wait_queue_t *queue, uint32_t wakeup_flags, bool del) {
c0109262:	55                   	push   %ebp
c0109263:	89 e5                	mov    %esp,%ebp
c0109265:	83 ec 18             	sub    $0x18,%esp
    wait_t *wait;
    if ((wait = wait_queue_first(queue)) != NULL) {
c0109268:	ff 75 08             	pushl  0x8(%ebp)
c010926b:	e8 ea fe ff ff       	call   c010915a <wait_queue_first>
c0109270:	83 c4 04             	add    $0x4,%esp
c0109273:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109276:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010927a:	74 5f                	je     c01092db <wakeup_queue+0x79>
        if (del) {
c010927c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0109280:	74 2c                	je     c01092ae <wakeup_queue+0x4c>
            do {
                wakeup_wait(queue, wait, wakeup_flags, 1);
c0109282:	6a 01                	push   $0x1
c0109284:	ff 75 0c             	pushl  0xc(%ebp)
c0109287:	ff 75 f4             	pushl  -0xc(%ebp)
c010928a:	ff 75 08             	pushl  0x8(%ebp)
c010928d:	e8 65 ff ff ff       	call   c01091f7 <wakeup_wait>
c0109292:	83 c4 10             	add    $0x10,%esp
            } while ((wait = wait_queue_first(queue)) != NULL);
c0109295:	83 ec 0c             	sub    $0xc,%esp
c0109298:	ff 75 08             	pushl  0x8(%ebp)
c010929b:	e8 ba fe ff ff       	call   c010915a <wait_queue_first>
c01092a0:	83 c4 10             	add    $0x10,%esp
c01092a3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01092a6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01092aa:	75 d6                	jne    c0109282 <wakeup_queue+0x20>
            do {
                wakeup_wait(queue, wait, wakeup_flags, 0);
            } while ((wait = wait_queue_next(queue, wait)) != NULL);
        }
    }
}
c01092ac:	eb 2d                	jmp    c01092db <wakeup_queue+0x79>
                wakeup_wait(queue, wait, wakeup_flags, 1);
            } while ((wait = wait_queue_first(queue)) != NULL);
        }
        else {
            do {
                wakeup_wait(queue, wait, wakeup_flags, 0);
c01092ae:	6a 00                	push   $0x0
c01092b0:	ff 75 0c             	pushl  0xc(%ebp)
c01092b3:	ff 75 f4             	pushl  -0xc(%ebp)
c01092b6:	ff 75 08             	pushl  0x8(%ebp)
c01092b9:	e8 39 ff ff ff       	call   c01091f7 <wakeup_wait>
c01092be:	83 c4 10             	add    $0x10,%esp
            } while ((wait = wait_queue_next(queue, wait)) != NULL);
c01092c1:	83 ec 08             	sub    $0x8,%esp
c01092c4:	ff 75 f4             	pushl  -0xc(%ebp)
c01092c7:	ff 75 08             	pushl  0x8(%ebp)
c01092ca:	e8 b4 fd ff ff       	call   c0109083 <wait_queue_next>
c01092cf:	83 c4 10             	add    $0x10,%esp
c01092d2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01092d5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01092d9:	75 d3                	jne    c01092ae <wakeup_queue+0x4c>
        }
    }
}
c01092db:	90                   	nop
c01092dc:	c9                   	leave  
c01092dd:	c3                   	ret    

c01092de <wait_current_set>:

void
wait_current_set(wait_queue_t *queue, wait_t *wait, uint32_t wait_state) {
c01092de:	55                   	push   %ebp
c01092df:	89 e5                	mov    %esp,%ebp
c01092e1:	83 ec 08             	sub    $0x8,%esp
    assert(current != NULL);
c01092e4:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c01092e9:	85 c0                	test   %eax,%eax
c01092eb:	75 16                	jne    c0109303 <wait_current_set+0x25>
c01092ed:	68 29 ee 10 c0       	push   $0xc010ee29
c01092f2:	68 c5 ed 10 c0       	push   $0xc010edc5
c01092f7:	6a 74                	push   $0x74
c01092f9:	68 da ed 10 c0       	push   $0xc010edda
c01092fe:	e8 fa 70 ff ff       	call   c01003fd <__panic>
    wait_init(wait, current);
c0109303:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c0109308:	83 ec 08             	sub    $0x8,%esp
c010930b:	50                   	push   %eax
c010930c:	ff 75 0c             	pushl  0xc(%ebp)
c010930f:	e8 ef fb ff ff       	call   c0108f03 <wait_init>
c0109314:	83 c4 10             	add    $0x10,%esp
    current->state = PROC_SLEEPING;
c0109317:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010931c:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    current->wait_state = wait_state;
c0109322:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c0109327:	8b 55 10             	mov    0x10(%ebp),%edx
c010932a:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)
    wait_queue_add(queue, wait);
c0109330:	83 ec 08             	sub    $0x8,%esp
c0109333:	ff 75 0c             	pushl  0xc(%ebp)
c0109336:	ff 75 08             	pushl  0x8(%ebp)
c0109339:	e8 20 fc ff ff       	call   c0108f5e <wait_queue_add>
c010933e:	83 c4 10             	add    $0x10,%esp
}
c0109341:	90                   	nop
c0109342:	c9                   	leave  
c0109343:	c3                   	ret    

c0109344 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0109344:	55                   	push   %ebp
c0109345:	89 e5                	mov    %esp,%ebp
c0109347:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010934a:	9c                   	pushf  
c010934b:	58                   	pop    %eax
c010934c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010934f:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0109352:	25 00 02 00 00       	and    $0x200,%eax
c0109357:	85 c0                	test   %eax,%eax
c0109359:	74 0c                	je     c0109367 <__intr_save+0x23>
        intr_disable();
c010935b:	e8 5c 8e ff ff       	call   c01021bc <intr_disable>
        return 1;
c0109360:	b8 01 00 00 00       	mov    $0x1,%eax
c0109365:	eb 05                	jmp    c010936c <__intr_save+0x28>
    }
    return 0;
c0109367:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010936c:	c9                   	leave  
c010936d:	c3                   	ret    

c010936e <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010936e:	55                   	push   %ebp
c010936f:	89 e5                	mov    %esp,%ebp
c0109371:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0109374:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0109378:	74 05                	je     c010937f <__intr_restore+0x11>
        intr_enable();
c010937a:	e8 36 8e ff ff       	call   c01021b5 <intr_enable>
    }
}
c010937f:	90                   	nop
c0109380:	c9                   	leave  
c0109381:	c3                   	ret    

c0109382 <sem_init>:
#include <proc.h>
#include <sync.h>
#include <assert.h>

void
sem_init(semaphore_t *sem, int value) {
c0109382:	55                   	push   %ebp
c0109383:	89 e5                	mov    %esp,%ebp
c0109385:	83 ec 08             	sub    $0x8,%esp
    sem->value = value;
c0109388:	8b 45 08             	mov    0x8(%ebp),%eax
c010938b:	8b 55 0c             	mov    0xc(%ebp),%edx
c010938e:	89 10                	mov    %edx,(%eax)
    wait_queue_init(&(sem->wait_queue));
c0109390:	8b 45 08             	mov    0x8(%ebp),%eax
c0109393:	83 c0 04             	add    $0x4,%eax
c0109396:	83 ec 0c             	sub    $0xc,%esp
c0109399:	50                   	push   %eax
c010939a:	e8 9c fb ff ff       	call   c0108f3b <wait_queue_init>
c010939f:	83 c4 10             	add    $0x10,%esp
}
c01093a2:	90                   	nop
c01093a3:	c9                   	leave  
c01093a4:	c3                   	ret    

c01093a5 <__up>:

static __noinline void __up(semaphore_t *sem, uint32_t wait_state) {
c01093a5:	55                   	push   %ebp
c01093a6:	89 e5                	mov    %esp,%ebp
c01093a8:	83 ec 18             	sub    $0x18,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c01093ab:	e8 94 ff ff ff       	call   c0109344 <__intr_save>
c01093b0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        wait_t *wait;
        if ((wait = wait_queue_first(&(sem->wait_queue))) == NULL) {
c01093b3:	8b 45 08             	mov    0x8(%ebp),%eax
c01093b6:	83 c0 04             	add    $0x4,%eax
c01093b9:	83 ec 0c             	sub    $0xc,%esp
c01093bc:	50                   	push   %eax
c01093bd:	e8 98 fd ff ff       	call   c010915a <wait_queue_first>
c01093c2:	83 c4 10             	add    $0x10,%esp
c01093c5:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01093c8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01093cc:	75 0f                	jne    c01093dd <__up+0x38>
            sem->value ++;
c01093ce:	8b 45 08             	mov    0x8(%ebp),%eax
c01093d1:	8b 00                	mov    (%eax),%eax
c01093d3:	8d 50 01             	lea    0x1(%eax),%edx
c01093d6:	8b 45 08             	mov    0x8(%ebp),%eax
c01093d9:	89 10                	mov    %edx,(%eax)
c01093db:	eb 3d                	jmp    c010941a <__up+0x75>
        }
        else {
            assert(wait->proc->wait_state == wait_state);
c01093dd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01093e0:	8b 00                	mov    (%eax),%eax
c01093e2:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c01093e8:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01093eb:	74 16                	je     c0109403 <__up+0x5e>
c01093ed:	68 3c ee 10 c0       	push   $0xc010ee3c
c01093f2:	68 61 ee 10 c0       	push   $0xc010ee61
c01093f7:	6a 19                	push   $0x19
c01093f9:	68 76 ee 10 c0       	push   $0xc010ee76
c01093fe:	e8 fa 6f ff ff       	call   c01003fd <__panic>
            wakeup_wait(&(sem->wait_queue), wait, wait_state, 1);
c0109403:	8b 45 08             	mov    0x8(%ebp),%eax
c0109406:	83 c0 04             	add    $0x4,%eax
c0109409:	6a 01                	push   $0x1
c010940b:	ff 75 0c             	pushl  0xc(%ebp)
c010940e:	ff 75 f0             	pushl  -0x10(%ebp)
c0109411:	50                   	push   %eax
c0109412:	e8 e0 fd ff ff       	call   c01091f7 <wakeup_wait>
c0109417:	83 c4 10             	add    $0x10,%esp
        }
    }
    local_intr_restore(intr_flag);
c010941a:	83 ec 0c             	sub    $0xc,%esp
c010941d:	ff 75 f4             	pushl  -0xc(%ebp)
c0109420:	e8 49 ff ff ff       	call   c010936e <__intr_restore>
c0109425:	83 c4 10             	add    $0x10,%esp
}
c0109428:	90                   	nop
c0109429:	c9                   	leave  
c010942a:	c3                   	ret    

c010942b <__down>:

static __noinline uint32_t __down(semaphore_t *sem, uint32_t wait_state) {
c010942b:	55                   	push   %ebp
c010942c:	89 e5                	mov    %esp,%ebp
c010942e:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c0109431:	e8 0e ff ff ff       	call   c0109344 <__intr_save>
c0109436:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (sem->value > 0) {
c0109439:	8b 45 08             	mov    0x8(%ebp),%eax
c010943c:	8b 00                	mov    (%eax),%eax
c010943e:	85 c0                	test   %eax,%eax
c0109440:	7e 25                	jle    c0109467 <__down+0x3c>
        sem->value --;
c0109442:	8b 45 08             	mov    0x8(%ebp),%eax
c0109445:	8b 00                	mov    (%eax),%eax
c0109447:	8d 50 ff             	lea    -0x1(%eax),%edx
c010944a:	8b 45 08             	mov    0x8(%ebp),%eax
c010944d:	89 10                	mov    %edx,(%eax)
        local_intr_restore(intr_flag);
c010944f:	83 ec 0c             	sub    $0xc,%esp
c0109452:	ff 75 f4             	pushl  -0xc(%ebp)
c0109455:	e8 14 ff ff ff       	call   c010936e <__intr_restore>
c010945a:	83 c4 10             	add    $0x10,%esp
        return 0;
c010945d:	b8 00 00 00 00       	mov    $0x0,%eax
c0109462:	e9 86 00 00 00       	jmp    c01094ed <__down+0xc2>
    }
    wait_t __wait, *wait = &__wait;
c0109467:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010946a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    wait_current_set(&(sem->wait_queue), wait, wait_state);
c010946d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109470:	83 c0 04             	add    $0x4,%eax
c0109473:	83 ec 04             	sub    $0x4,%esp
c0109476:	ff 75 0c             	pushl  0xc(%ebp)
c0109479:	ff 75 f0             	pushl  -0x10(%ebp)
c010947c:	50                   	push   %eax
c010947d:	e8 5c fe ff ff       	call   c01092de <wait_current_set>
c0109482:	83 c4 10             	add    $0x10,%esp
    local_intr_restore(intr_flag);
c0109485:	83 ec 0c             	sub    $0xc,%esp
c0109488:	ff 75 f4             	pushl  -0xc(%ebp)
c010948b:	e8 de fe ff ff       	call   c010936e <__intr_restore>
c0109490:	83 c4 10             	add    $0x10,%esp

    schedule();
c0109493:	e8 9c 22 00 00       	call   c010b734 <schedule>

    local_intr_save(intr_flag);
c0109498:	e8 a7 fe ff ff       	call   c0109344 <__intr_save>
c010949d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    wait_current_del(&(sem->wait_queue), wait);
c01094a0:	83 ec 0c             	sub    $0xc,%esp
c01094a3:	ff 75 f0             	pushl  -0x10(%ebp)
c01094a6:	e8 24 fd ff ff       	call   c01091cf <wait_in_queue>
c01094ab:	83 c4 10             	add    $0x10,%esp
c01094ae:	85 c0                	test   %eax,%eax
c01094b0:	74 15                	je     c01094c7 <__down+0x9c>
c01094b2:	8b 45 08             	mov    0x8(%ebp),%eax
c01094b5:	83 c0 04             	add    $0x4,%eax
c01094b8:	83 ec 08             	sub    $0x8,%esp
c01094bb:	ff 75 f0             	pushl  -0x10(%ebp)
c01094be:	50                   	push   %eax
c01094bf:	e8 2e fb ff ff       	call   c0108ff2 <wait_queue_del>
c01094c4:	83 c4 10             	add    $0x10,%esp
    local_intr_restore(intr_flag);
c01094c7:	83 ec 0c             	sub    $0xc,%esp
c01094ca:	ff 75 f4             	pushl  -0xc(%ebp)
c01094cd:	e8 9c fe ff ff       	call   c010936e <__intr_restore>
c01094d2:	83 c4 10             	add    $0x10,%esp

    if (wait->wakeup_flags != wait_state) {
c01094d5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01094d8:	8b 40 04             	mov    0x4(%eax),%eax
c01094db:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01094de:	74 08                	je     c01094e8 <__down+0xbd>
        return wait->wakeup_flags;
c01094e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01094e3:	8b 40 04             	mov    0x4(%eax),%eax
c01094e6:	eb 05                	jmp    c01094ed <__down+0xc2>
    }
    return 0;
c01094e8:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01094ed:	c9                   	leave  
c01094ee:	c3                   	ret    

c01094ef <up>:

void
up(semaphore_t *sem) {
c01094ef:	55                   	push   %ebp
c01094f0:	89 e5                	mov    %esp,%ebp
c01094f2:	83 ec 08             	sub    $0x8,%esp
    __up(sem, WT_KSEM);
c01094f5:	83 ec 08             	sub    $0x8,%esp
c01094f8:	68 00 01 00 00       	push   $0x100
c01094fd:	ff 75 08             	pushl  0x8(%ebp)
c0109500:	e8 a0 fe ff ff       	call   c01093a5 <__up>
c0109505:	83 c4 10             	add    $0x10,%esp
}
c0109508:	90                   	nop
c0109509:	c9                   	leave  
c010950a:	c3                   	ret    

c010950b <down>:

void
down(semaphore_t *sem) {
c010950b:	55                   	push   %ebp
c010950c:	89 e5                	mov    %esp,%ebp
c010950e:	83 ec 18             	sub    $0x18,%esp
    uint32_t flags = __down(sem, WT_KSEM);
c0109511:	83 ec 08             	sub    $0x8,%esp
c0109514:	68 00 01 00 00       	push   $0x100
c0109519:	ff 75 08             	pushl  0x8(%ebp)
c010951c:	e8 0a ff ff ff       	call   c010942b <__down>
c0109521:	83 c4 10             	add    $0x10,%esp
c0109524:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(flags == 0);
c0109527:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010952b:	74 16                	je     c0109543 <down+0x38>
c010952d:	68 86 ee 10 c0       	push   $0xc010ee86
c0109532:	68 61 ee 10 c0       	push   $0xc010ee61
c0109537:	6a 40                	push   $0x40
c0109539:	68 76 ee 10 c0       	push   $0xc010ee76
c010953e:	e8 ba 6e ff ff       	call   c01003fd <__panic>
}
c0109543:	90                   	nop
c0109544:	c9                   	leave  
c0109545:	c3                   	ret    

c0109546 <try_down>:

bool
try_down(semaphore_t *sem) {
c0109546:	55                   	push   %ebp
c0109547:	89 e5                	mov    %esp,%ebp
c0109549:	83 ec 18             	sub    $0x18,%esp
    bool intr_flag, ret = 0;
c010954c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    local_intr_save(intr_flag);
c0109553:	e8 ec fd ff ff       	call   c0109344 <__intr_save>
c0109558:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (sem->value > 0) {
c010955b:	8b 45 08             	mov    0x8(%ebp),%eax
c010955e:	8b 00                	mov    (%eax),%eax
c0109560:	85 c0                	test   %eax,%eax
c0109562:	7e 14                	jle    c0109578 <try_down+0x32>
        sem->value --, ret = 1;
c0109564:	8b 45 08             	mov    0x8(%ebp),%eax
c0109567:	8b 00                	mov    (%eax),%eax
c0109569:	8d 50 ff             	lea    -0x1(%eax),%edx
c010956c:	8b 45 08             	mov    0x8(%ebp),%eax
c010956f:	89 10                	mov    %edx,(%eax)
c0109571:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    }
    local_intr_restore(intr_flag);
c0109578:	83 ec 0c             	sub    $0xc,%esp
c010957b:	ff 75 f0             	pushl  -0x10(%ebp)
c010957e:	e8 eb fd ff ff       	call   c010936e <__intr_restore>
c0109583:	83 c4 10             	add    $0x10,%esp
    return ret;
c0109586:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0109589:	c9                   	leave  
c010958a:	c3                   	ret    

c010958b <monitor_init>:
#include <assert.h>


// Initialize monitor.
void     
monitor_init (monitor_t * mtp, size_t num_cv) {
c010958b:	55                   	push   %ebp
c010958c:	89 e5                	mov    %esp,%ebp
c010958e:	83 ec 18             	sub    $0x18,%esp
    int i;
    assert(num_cv>0);
c0109591:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0109595:	75 16                	jne    c01095ad <monitor_init+0x22>
c0109597:	68 94 ee 10 c0       	push   $0xc010ee94
c010959c:	68 9d ee 10 c0       	push   $0xc010ee9d
c01095a1:	6a 0b                	push   $0xb
c01095a3:	68 b2 ee 10 c0       	push   $0xc010eeb2
c01095a8:	e8 50 6e ff ff       	call   c01003fd <__panic>
    mtp->next_count = 0;
c01095ad:	8b 45 08             	mov    0x8(%ebp),%eax
c01095b0:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    mtp->cv = NULL;
c01095b7:	8b 45 08             	mov    0x8(%ebp),%eax
c01095ba:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    sem_init(&(mtp->mutex), 1); //unlocked
c01095c1:	8b 45 08             	mov    0x8(%ebp),%eax
c01095c4:	83 ec 08             	sub    $0x8,%esp
c01095c7:	6a 01                	push   $0x1
c01095c9:	50                   	push   %eax
c01095ca:	e8 b3 fd ff ff       	call   c0109382 <sem_init>
c01095cf:	83 c4 10             	add    $0x10,%esp
    sem_init(&(mtp->next), 0);
c01095d2:	8b 45 08             	mov    0x8(%ebp),%eax
c01095d5:	83 c0 0c             	add    $0xc,%eax
c01095d8:	83 ec 08             	sub    $0x8,%esp
c01095db:	6a 00                	push   $0x0
c01095dd:	50                   	push   %eax
c01095de:	e8 9f fd ff ff       	call   c0109382 <sem_init>
c01095e3:	83 c4 10             	add    $0x10,%esp
    mtp->cv =(condvar_t *) kmalloc(sizeof(condvar_t)*num_cv);
c01095e6:	8b 55 0c             	mov    0xc(%ebp),%edx
c01095e9:	89 d0                	mov    %edx,%eax
c01095eb:	c1 e0 02             	shl    $0x2,%eax
c01095ee:	01 d0                	add    %edx,%eax
c01095f0:	c1 e0 02             	shl    $0x2,%eax
c01095f3:	83 ec 0c             	sub    $0xc,%esp
c01095f6:	50                   	push   %eax
c01095f7:	e8 4c bb ff ff       	call   c0105148 <kmalloc>
c01095fc:	83 c4 10             	add    $0x10,%esp
c01095ff:	89 c2                	mov    %eax,%edx
c0109601:	8b 45 08             	mov    0x8(%ebp),%eax
c0109604:	89 50 1c             	mov    %edx,0x1c(%eax)
    assert(mtp->cv!=NULL);
c0109607:	8b 45 08             	mov    0x8(%ebp),%eax
c010960a:	8b 40 1c             	mov    0x1c(%eax),%eax
c010960d:	85 c0                	test   %eax,%eax
c010960f:	75 16                	jne    c0109627 <monitor_init+0x9c>
c0109611:	68 c6 ee 10 c0       	push   $0xc010eec6
c0109616:	68 9d ee 10 c0       	push   $0xc010ee9d
c010961b:	6a 11                	push   $0x11
c010961d:	68 b2 ee 10 c0       	push   $0xc010eeb2
c0109622:	e8 d6 6d ff ff       	call   c01003fd <__panic>
    for(i=0; i<num_cv; i++){
c0109627:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010962e:	eb 5f                	jmp    c010968f <monitor_init+0x104>
        mtp->cv[i].count=0;
c0109630:	8b 45 08             	mov    0x8(%ebp),%eax
c0109633:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0109636:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109639:	89 d0                	mov    %edx,%eax
c010963b:	c1 e0 02             	shl    $0x2,%eax
c010963e:	01 d0                	add    %edx,%eax
c0109640:	c1 e0 02             	shl    $0x2,%eax
c0109643:	01 c8                	add    %ecx,%eax
c0109645:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        sem_init(&(mtp->cv[i].sem),0);
c010964c:	8b 45 08             	mov    0x8(%ebp),%eax
c010964f:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0109652:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109655:	89 d0                	mov    %edx,%eax
c0109657:	c1 e0 02             	shl    $0x2,%eax
c010965a:	01 d0                	add    %edx,%eax
c010965c:	c1 e0 02             	shl    $0x2,%eax
c010965f:	01 c8                	add    %ecx,%eax
c0109661:	83 ec 08             	sub    $0x8,%esp
c0109664:	6a 00                	push   $0x0
c0109666:	50                   	push   %eax
c0109667:	e8 16 fd ff ff       	call   c0109382 <sem_init>
c010966c:	83 c4 10             	add    $0x10,%esp
        mtp->cv[i].owner=mtp;
c010966f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109672:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0109675:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109678:	89 d0                	mov    %edx,%eax
c010967a:	c1 e0 02             	shl    $0x2,%eax
c010967d:	01 d0                	add    %edx,%eax
c010967f:	c1 e0 02             	shl    $0x2,%eax
c0109682:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c0109685:	8b 45 08             	mov    0x8(%ebp),%eax
c0109688:	89 42 10             	mov    %eax,0x10(%edx)
    mtp->cv = NULL;
    sem_init(&(mtp->mutex), 1); //unlocked
    sem_init(&(mtp->next), 0);
    mtp->cv =(condvar_t *) kmalloc(sizeof(condvar_t)*num_cv);
    assert(mtp->cv!=NULL);
    for(i=0; i<num_cv; i++){
c010968b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010968f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109692:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0109695:	72 99                	jb     c0109630 <monitor_init+0xa5>
        mtp->cv[i].count=0;
        sem_init(&(mtp->cv[i].sem),0);
        mtp->cv[i].owner=mtp;
    }
}
c0109697:	90                   	nop
c0109698:	c9                   	leave  
c0109699:	c3                   	ret    

c010969a <cond_signal>:

// Unlock one of threads waiting on the condition variable. 
void 
cond_signal (condvar_t *cvp) {
c010969a:	55                   	push   %ebp
c010969b:	89 e5                	mov    %esp,%ebp
c010969d:	83 ec 18             	sub    $0x18,%esp
    //LAB7 EXERCISE1: 2015010062
    cprintf("cond_signal begin: cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);  
c01096a0:	8b 45 08             	mov    0x8(%ebp),%eax
c01096a3:	8b 40 10             	mov    0x10(%eax),%eax
c01096a6:	8b 50 18             	mov    0x18(%eax),%edx
c01096a9:	8b 45 08             	mov    0x8(%ebp),%eax
c01096ac:	8b 40 0c             	mov    0xc(%eax),%eax
c01096af:	52                   	push   %edx
c01096b0:	50                   	push   %eax
c01096b1:	ff 75 08             	pushl  0x8(%ebp)
c01096b4:	68 d4 ee 10 c0       	push   $0xc010eed4
c01096b9:	e8 d9 6b ff ff       	call   c0100297 <cprintf>
c01096be:	83 c4 10             	add    $0x10,%esp
    if(cvp->count > 0) {
c01096c1:	8b 45 08             	mov    0x8(%ebp),%eax
c01096c4:	8b 40 0c             	mov    0xc(%eax),%eax
c01096c7:	85 c0                	test   %eax,%eax
c01096c9:	7e 48                	jle    c0109713 <cond_signal+0x79>
        monitor_t * mt = cvp->owner;
c01096cb:	8b 45 08             	mov    0x8(%ebp),%eax
c01096ce:	8b 40 10             	mov    0x10(%eax),%eax
c01096d1:	89 45 f4             	mov    %eax,-0xc(%ebp)
        mt->next_count ++;
c01096d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01096d7:	8b 40 18             	mov    0x18(%eax),%eax
c01096da:	8d 50 01             	lea    0x1(%eax),%edx
c01096dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01096e0:	89 50 18             	mov    %edx,0x18(%eax)
        up(&(cvp->sem));
c01096e3:	8b 45 08             	mov    0x8(%ebp),%eax
c01096e6:	83 ec 0c             	sub    $0xc,%esp
c01096e9:	50                   	push   %eax
c01096ea:	e8 00 fe ff ff       	call   c01094ef <up>
c01096ef:	83 c4 10             	add    $0x10,%esp
        down(&(mt->next));
c01096f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01096f5:	83 c0 0c             	add    $0xc,%eax
c01096f8:	83 ec 0c             	sub    $0xc,%esp
c01096fb:	50                   	push   %eax
c01096fc:	e8 0a fe ff ff       	call   c010950b <down>
c0109701:	83 c4 10             	add    $0x10,%esp
        // after woken up
        mt->next_count--;
c0109704:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109707:	8b 40 18             	mov    0x18(%eax),%eax
c010970a:	8d 50 ff             	lea    -0x1(%eax),%edx
c010970d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109710:	89 50 18             	mov    %edx,0x18(%eax)
    }
    cprintf("cond_signal end: cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c0109713:	8b 45 08             	mov    0x8(%ebp),%eax
c0109716:	8b 40 10             	mov    0x10(%eax),%eax
c0109719:	8b 50 18             	mov    0x18(%eax),%edx
c010971c:	8b 45 08             	mov    0x8(%ebp),%eax
c010971f:	8b 40 0c             	mov    0xc(%eax),%eax
c0109722:	52                   	push   %edx
c0109723:	50                   	push   %eax
c0109724:	ff 75 08             	pushl  0x8(%ebp)
c0109727:	68 1c ef 10 c0       	push   $0xc010ef1c
c010972c:	e8 66 6b ff ff       	call   c0100297 <cprintf>
c0109731:	83 c4 10             	add    $0x10,%esp
}
c0109734:	90                   	nop
c0109735:	c9                   	leave  
c0109736:	c3                   	ret    

c0109737 <cond_wait>:

// Suspend calling thread on a condition variable waiting for condition Atomically unlocks 
// mutex and suspends calling thread on conditional variable after waking up locks mutex. Notice: mp is mutex semaphore for monitor's procedures
void
cond_wait (condvar_t *cvp) {
c0109737:	55                   	push   %ebp
c0109738:	89 e5                	mov    %esp,%ebp
c010973a:	83 ec 18             	sub    $0x18,%esp
    //LAB7 EXERCISE1: 2015010062
    cprintf("cond_wait begin:  cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c010973d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109740:	8b 40 10             	mov    0x10(%eax),%eax
c0109743:	8b 50 18             	mov    0x18(%eax),%edx
c0109746:	8b 45 08             	mov    0x8(%ebp),%eax
c0109749:	8b 40 0c             	mov    0xc(%eax),%eax
c010974c:	52                   	push   %edx
c010974d:	50                   	push   %eax
c010974e:	ff 75 08             	pushl  0x8(%ebp)
c0109751:	68 60 ef 10 c0       	push   $0xc010ef60
c0109756:	e8 3c 6b ff ff       	call   c0100297 <cprintf>
c010975b:	83 c4 10             	add    $0x10,%esp
    cvp->count ++;
c010975e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109761:	8b 40 0c             	mov    0xc(%eax),%eax
c0109764:	8d 50 01             	lea    0x1(%eax),%edx
c0109767:	8b 45 08             	mov    0x8(%ebp),%eax
c010976a:	89 50 0c             	mov    %edx,0xc(%eax)
    monitor_t * mt = cvp->owner;
c010976d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109770:	8b 40 10             	mov    0x10(%eax),%eax
c0109773:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(mt->next_count > 0) {
c0109776:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109779:	8b 40 18             	mov    0x18(%eax),%eax
c010977c:	85 c0                	test   %eax,%eax
c010977e:	7e 14                	jle    c0109794 <cond_wait+0x5d>
        up(&(mt->next));
c0109780:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109783:	83 c0 0c             	add    $0xc,%eax
c0109786:	83 ec 0c             	sub    $0xc,%esp
c0109789:	50                   	push   %eax
c010978a:	e8 60 fd ff ff       	call   c01094ef <up>
c010978f:	83 c4 10             	add    $0x10,%esp
c0109792:	eb 0f                	jmp    c01097a3 <cond_wait+0x6c>
    }
    else {
        up(&(mt->mutex));
c0109794:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109797:	83 ec 0c             	sub    $0xc,%esp
c010979a:	50                   	push   %eax
c010979b:	e8 4f fd ff ff       	call   c01094ef <up>
c01097a0:	83 c4 10             	add    $0x10,%esp
    }
    down(&(cvp->sem));
c01097a3:	8b 45 08             	mov    0x8(%ebp),%eax
c01097a6:	83 ec 0c             	sub    $0xc,%esp
c01097a9:	50                   	push   %eax
c01097aa:	e8 5c fd ff ff       	call   c010950b <down>
c01097af:	83 c4 10             	add    $0x10,%esp
    cvp->count --;
c01097b2:	8b 45 08             	mov    0x8(%ebp),%eax
c01097b5:	8b 40 0c             	mov    0xc(%eax),%eax
c01097b8:	8d 50 ff             	lea    -0x1(%eax),%edx
c01097bb:	8b 45 08             	mov    0x8(%ebp),%eax
c01097be:	89 50 0c             	mov    %edx,0xc(%eax)
    cprintf("cond_wait end:  cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c01097c1:	8b 45 08             	mov    0x8(%ebp),%eax
c01097c4:	8b 40 10             	mov    0x10(%eax),%eax
c01097c7:	8b 50 18             	mov    0x18(%eax),%edx
c01097ca:	8b 45 08             	mov    0x8(%ebp),%eax
c01097cd:	8b 40 0c             	mov    0xc(%eax),%eax
c01097d0:	52                   	push   %edx
c01097d1:	50                   	push   %eax
c01097d2:	ff 75 08             	pushl  0x8(%ebp)
c01097d5:	68 a4 ef 10 c0       	push   $0xc010efa4
c01097da:	e8 b8 6a ff ff       	call   c0100297 <cprintf>
c01097df:	83 c4 10             	add    $0x10,%esp
}
c01097e2:	90                   	nop
c01097e3:	c9                   	leave  
c01097e4:	c3                   	ret    

c01097e5 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c01097e5:	55                   	push   %ebp
c01097e6:	89 e5                	mov    %esp,%ebp
    return page - pages;
c01097e8:	8b 45 08             	mov    0x8(%ebp),%eax
c01097eb:	8b 15 f8 71 1c c0    	mov    0xc01c71f8,%edx
c01097f1:	29 d0                	sub    %edx,%eax
c01097f3:	c1 f8 05             	sar    $0x5,%eax
}
c01097f6:	5d                   	pop    %ebp
c01097f7:	c3                   	ret    

c01097f8 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c01097f8:	55                   	push   %ebp
c01097f9:	89 e5                	mov    %esp,%ebp
    return page2ppn(page) << PGSHIFT;
c01097fb:	ff 75 08             	pushl  0x8(%ebp)
c01097fe:	e8 e2 ff ff ff       	call   c01097e5 <page2ppn>
c0109803:	83 c4 04             	add    $0x4,%esp
c0109806:	c1 e0 0c             	shl    $0xc,%eax
}
c0109809:	c9                   	leave  
c010980a:	c3                   	ret    

c010980b <page2kva>:
    }
    return &pages[PPN(pa)];
}

static inline void *
page2kva(struct Page *page) {
c010980b:	55                   	push   %ebp
c010980c:	89 e5                	mov    %esp,%ebp
c010980e:	83 ec 18             	sub    $0x18,%esp
    return KADDR(page2pa(page));
c0109811:	ff 75 08             	pushl  0x8(%ebp)
c0109814:	e8 df ff ff ff       	call   c01097f8 <page2pa>
c0109819:	83 c4 04             	add    $0x4,%esp
c010981c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010981f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109822:	c1 e8 0c             	shr    $0xc,%eax
c0109825:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109828:	a1 80 4f 1c c0       	mov    0xc01c4f80,%eax
c010982d:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0109830:	72 14                	jb     c0109846 <page2kva+0x3b>
c0109832:	ff 75 f4             	pushl  -0xc(%ebp)
c0109835:	68 e8 ef 10 c0       	push   $0xc010efe8
c010983a:	6a 65                	push   $0x65
c010983c:	68 0b f0 10 c0       	push   $0xc010f00b
c0109841:	e8 b7 6b ff ff       	call   c01003fd <__panic>
c0109846:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109849:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c010984e:	c9                   	leave  
c010984f:	c3                   	ret    

c0109850 <swapfs_init>:
#include <ide.h>
#include <pmm.h>
#include <assert.h>

void
swapfs_init(void) {
c0109850:	55                   	push   %ebp
c0109851:	89 e5                	mov    %esp,%ebp
c0109853:	83 ec 08             	sub    $0x8,%esp
    static_assert((PGSIZE % SECTSIZE) == 0);
    if (!ide_device_valid(SWAP_DEV_NO)) {
c0109856:	83 ec 0c             	sub    $0xc,%esp
c0109859:	6a 01                	push   $0x1
c010985b:	e8 79 79 ff ff       	call   c01011d9 <ide_device_valid>
c0109860:	83 c4 10             	add    $0x10,%esp
c0109863:	85 c0                	test   %eax,%eax
c0109865:	75 14                	jne    c010987b <swapfs_init+0x2b>
        panic("swap fs isn't available.\n");
c0109867:	83 ec 04             	sub    $0x4,%esp
c010986a:	68 19 f0 10 c0       	push   $0xc010f019
c010986f:	6a 0d                	push   $0xd
c0109871:	68 33 f0 10 c0       	push   $0xc010f033
c0109876:	e8 82 6b ff ff       	call   c01003fd <__panic>
    }
    max_swap_offset = ide_device_size(SWAP_DEV_NO) / (PGSIZE / SECTSIZE);
c010987b:	83 ec 0c             	sub    $0xc,%esp
c010987e:	6a 01                	push   $0x1
c0109880:	e8 94 79 ff ff       	call   c0101219 <ide_device_size>
c0109885:	83 c4 10             	add    $0x10,%esp
c0109888:	c1 e8 03             	shr    $0x3,%eax
c010988b:	a3 bc 71 1c c0       	mov    %eax,0xc01c71bc
}
c0109890:	90                   	nop
c0109891:	c9                   	leave  
c0109892:	c3                   	ret    

c0109893 <swapfs_read>:

int
swapfs_read(swap_entry_t entry, struct Page *page) {
c0109893:	55                   	push   %ebp
c0109894:	89 e5                	mov    %esp,%ebp
c0109896:	83 ec 18             	sub    $0x18,%esp
    return ide_read_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c0109899:	83 ec 0c             	sub    $0xc,%esp
c010989c:	ff 75 0c             	pushl  0xc(%ebp)
c010989f:	e8 67 ff ff ff       	call   c010980b <page2kva>
c01098a4:	83 c4 10             	add    $0x10,%esp
c01098a7:	89 c2                	mov    %eax,%edx
c01098a9:	8b 45 08             	mov    0x8(%ebp),%eax
c01098ac:	c1 e8 08             	shr    $0x8,%eax
c01098af:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01098b2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01098b6:	74 0a                	je     c01098c2 <swapfs_read+0x2f>
c01098b8:	a1 bc 71 1c c0       	mov    0xc01c71bc,%eax
c01098bd:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c01098c0:	72 14                	jb     c01098d6 <swapfs_read+0x43>
c01098c2:	ff 75 08             	pushl  0x8(%ebp)
c01098c5:	68 44 f0 10 c0       	push   $0xc010f044
c01098ca:	6a 14                	push   $0x14
c01098cc:	68 33 f0 10 c0       	push   $0xc010f033
c01098d1:	e8 27 6b ff ff       	call   c01003fd <__panic>
c01098d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01098d9:	c1 e0 03             	shl    $0x3,%eax
c01098dc:	6a 08                	push   $0x8
c01098de:	52                   	push   %edx
c01098df:	50                   	push   %eax
c01098e0:	6a 01                	push   $0x1
c01098e2:	e8 72 79 ff ff       	call   c0101259 <ide_read_secs>
c01098e7:	83 c4 10             	add    $0x10,%esp
}
c01098ea:	c9                   	leave  
c01098eb:	c3                   	ret    

c01098ec <swapfs_write>:

int
swapfs_write(swap_entry_t entry, struct Page *page) {
c01098ec:	55                   	push   %ebp
c01098ed:	89 e5                	mov    %esp,%ebp
c01098ef:	83 ec 18             	sub    $0x18,%esp
    return ide_write_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c01098f2:	83 ec 0c             	sub    $0xc,%esp
c01098f5:	ff 75 0c             	pushl  0xc(%ebp)
c01098f8:	e8 0e ff ff ff       	call   c010980b <page2kva>
c01098fd:	83 c4 10             	add    $0x10,%esp
c0109900:	89 c2                	mov    %eax,%edx
c0109902:	8b 45 08             	mov    0x8(%ebp),%eax
c0109905:	c1 e8 08             	shr    $0x8,%eax
c0109908:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010990b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010990f:	74 0a                	je     c010991b <swapfs_write+0x2f>
c0109911:	a1 bc 71 1c c0       	mov    0xc01c71bc,%eax
c0109916:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0109919:	72 14                	jb     c010992f <swapfs_write+0x43>
c010991b:	ff 75 08             	pushl  0x8(%ebp)
c010991e:	68 44 f0 10 c0       	push   $0xc010f044
c0109923:	6a 19                	push   $0x19
c0109925:	68 33 f0 10 c0       	push   $0xc010f033
c010992a:	e8 ce 6a ff ff       	call   c01003fd <__panic>
c010992f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109932:	c1 e0 03             	shl    $0x3,%eax
c0109935:	6a 08                	push   $0x8
c0109937:	52                   	push   %edx
c0109938:	50                   	push   %eax
c0109939:	6a 01                	push   $0x1
c010993b:	e8 43 7b ff ff       	call   c0101483 <ide_write_secs>
c0109940:	83 c4 10             	add    $0x10,%esp
}
c0109943:	c9                   	leave  
c0109944:	c3                   	ret    

c0109945 <kernel_thread_entry>:
.text
.globl kernel_thread_entry
kernel_thread_entry:        # void kernel_thread(void)

    pushl %edx              # push arg
c0109945:	52                   	push   %edx
    call *%ebx              # call fn
c0109946:	ff d3                	call   *%ebx

    pushl %eax              # save the return value of fn(arg)
c0109948:	50                   	push   %eax
    call do_exit            # call do_exit to terminate current thread
c0109949:	e8 96 0c 00 00       	call   c010a5e4 <do_exit>

c010994e <switch_to>:
.text
.globl switch_to
switch_to:                      # switch_to(from, to)

    # save from's registers
    movl 4(%esp), %eax          # eax points to from
c010994e:	8b 44 24 04          	mov    0x4(%esp),%eax
    popl 0(%eax)                # save eip !popl
c0109952:	8f 00                	popl   (%eax)
    movl %esp, 4(%eax)
c0109954:	89 60 04             	mov    %esp,0x4(%eax)
    movl %ebx, 8(%eax)
c0109957:	89 58 08             	mov    %ebx,0x8(%eax)
    movl %ecx, 12(%eax)
c010995a:	89 48 0c             	mov    %ecx,0xc(%eax)
    movl %edx, 16(%eax)
c010995d:	89 50 10             	mov    %edx,0x10(%eax)
    movl %esi, 20(%eax)
c0109960:	89 70 14             	mov    %esi,0x14(%eax)
    movl %edi, 24(%eax)
c0109963:	89 78 18             	mov    %edi,0x18(%eax)
    movl %ebp, 28(%eax)
c0109966:	89 68 1c             	mov    %ebp,0x1c(%eax)

    # restore to's registers
    movl 4(%esp), %eax          # not 8(%esp): popped return address already
c0109969:	8b 44 24 04          	mov    0x4(%esp),%eax
                                # eax now points to to
    movl 28(%eax), %ebp
c010996d:	8b 68 1c             	mov    0x1c(%eax),%ebp
    movl 24(%eax), %edi
c0109970:	8b 78 18             	mov    0x18(%eax),%edi
    movl 20(%eax), %esi
c0109973:	8b 70 14             	mov    0x14(%eax),%esi
    movl 16(%eax), %edx
c0109976:	8b 50 10             	mov    0x10(%eax),%edx
    movl 12(%eax), %ecx
c0109979:	8b 48 0c             	mov    0xc(%eax),%ecx
    movl 8(%eax), %ebx
c010997c:	8b 58 08             	mov    0x8(%eax),%ebx
    movl 4(%eax), %esp
c010997f:	8b 60 04             	mov    0x4(%eax),%esp

    pushl 0(%eax)               # push eip
c0109982:	ff 30                	pushl  (%eax)

    ret
c0109984:	c3                   	ret    

c0109985 <timer_init>:
#define le2timer(le, member)            \
to_struct((le), timer_t, member)

// init a timer
static inline timer_t *
timer_init(timer_t *timer, struct proc_struct *proc, int expires) {
c0109985:	55                   	push   %ebp
c0109986:	89 e5                	mov    %esp,%ebp
c0109988:	83 ec 10             	sub    $0x10,%esp
    timer->expires = expires;
c010998b:	8b 55 10             	mov    0x10(%ebp),%edx
c010998e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109991:	89 10                	mov    %edx,(%eax)
    timer->proc = proc;
c0109993:	8b 45 08             	mov    0x8(%ebp),%eax
c0109996:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109999:	89 50 04             	mov    %edx,0x4(%eax)
    list_init(&(timer->timer_link));
c010999c:	8b 45 08             	mov    0x8(%ebp),%eax
c010999f:	83 c0 08             	add    $0x8,%eax
c01099a2:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c01099a5:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01099a8:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01099ab:	89 50 04             	mov    %edx,0x4(%eax)
c01099ae:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01099b1:	8b 50 04             	mov    0x4(%eax),%edx
c01099b4:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01099b7:	89 10                	mov    %edx,(%eax)
    return timer;
c01099b9:	8b 45 08             	mov    0x8(%ebp),%eax
}
c01099bc:	c9                   	leave  
c01099bd:	c3                   	ret    

c01099be <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c01099be:	55                   	push   %ebp
c01099bf:	89 e5                	mov    %esp,%ebp
c01099c1:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c01099c4:	9c                   	pushf  
c01099c5:	58                   	pop    %eax
c01099c6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c01099c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c01099cc:	25 00 02 00 00       	and    $0x200,%eax
c01099d1:	85 c0                	test   %eax,%eax
c01099d3:	74 0c                	je     c01099e1 <__intr_save+0x23>
        intr_disable();
c01099d5:	e8 e2 87 ff ff       	call   c01021bc <intr_disable>
        return 1;
c01099da:	b8 01 00 00 00       	mov    $0x1,%eax
c01099df:	eb 05                	jmp    c01099e6 <__intr_save+0x28>
    }
    return 0;
c01099e1:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01099e6:	c9                   	leave  
c01099e7:	c3                   	ret    

c01099e8 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c01099e8:	55                   	push   %ebp
c01099e9:	89 e5                	mov    %esp,%ebp
c01099eb:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c01099ee:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01099f2:	74 05                	je     c01099f9 <__intr_restore+0x11>
        intr_enable();
c01099f4:	e8 bc 87 ff ff       	call   c01021b5 <intr_enable>
    }
}
c01099f9:	90                   	nop
c01099fa:	c9                   	leave  
c01099fb:	c3                   	ret    

c01099fc <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c01099fc:	55                   	push   %ebp
c01099fd:	89 e5                	mov    %esp,%ebp
    return page - pages;
c01099ff:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a02:	8b 15 f8 71 1c c0    	mov    0xc01c71f8,%edx
c0109a08:	29 d0                	sub    %edx,%eax
c0109a0a:	c1 f8 05             	sar    $0x5,%eax
}
c0109a0d:	5d                   	pop    %ebp
c0109a0e:	c3                   	ret    

c0109a0f <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0109a0f:	55                   	push   %ebp
c0109a10:	89 e5                	mov    %esp,%ebp
    return page2ppn(page) << PGSHIFT;
c0109a12:	ff 75 08             	pushl  0x8(%ebp)
c0109a15:	e8 e2 ff ff ff       	call   c01099fc <page2ppn>
c0109a1a:	83 c4 04             	add    $0x4,%esp
c0109a1d:	c1 e0 0c             	shl    $0xc,%eax
}
c0109a20:	c9                   	leave  
c0109a21:	c3                   	ret    

c0109a22 <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c0109a22:	55                   	push   %ebp
c0109a23:	89 e5                	mov    %esp,%ebp
c0109a25:	83 ec 08             	sub    $0x8,%esp
    if (PPN(pa) >= npage) {
c0109a28:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a2b:	c1 e8 0c             	shr    $0xc,%eax
c0109a2e:	89 c2                	mov    %eax,%edx
c0109a30:	a1 80 4f 1c c0       	mov    0xc01c4f80,%eax
c0109a35:	39 c2                	cmp    %eax,%edx
c0109a37:	72 14                	jb     c0109a4d <pa2page+0x2b>
        panic("pa2page called with invalid pa");
c0109a39:	83 ec 04             	sub    $0x4,%esp
c0109a3c:	68 64 f0 10 c0       	push   $0xc010f064
c0109a41:	6a 5e                	push   $0x5e
c0109a43:	68 83 f0 10 c0       	push   $0xc010f083
c0109a48:	e8 b0 69 ff ff       	call   c01003fd <__panic>
    }
    return &pages[PPN(pa)];
c0109a4d:	a1 f8 71 1c c0       	mov    0xc01c71f8,%eax
c0109a52:	8b 55 08             	mov    0x8(%ebp),%edx
c0109a55:	c1 ea 0c             	shr    $0xc,%edx
c0109a58:	c1 e2 05             	shl    $0x5,%edx
c0109a5b:	01 d0                	add    %edx,%eax
}
c0109a5d:	c9                   	leave  
c0109a5e:	c3                   	ret    

c0109a5f <page2kva>:

static inline void *
page2kva(struct Page *page) {
c0109a5f:	55                   	push   %ebp
c0109a60:	89 e5                	mov    %esp,%ebp
c0109a62:	83 ec 18             	sub    $0x18,%esp
    return KADDR(page2pa(page));
c0109a65:	ff 75 08             	pushl  0x8(%ebp)
c0109a68:	e8 a2 ff ff ff       	call   c0109a0f <page2pa>
c0109a6d:	83 c4 04             	add    $0x4,%esp
c0109a70:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109a73:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109a76:	c1 e8 0c             	shr    $0xc,%eax
c0109a79:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109a7c:	a1 80 4f 1c c0       	mov    0xc01c4f80,%eax
c0109a81:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0109a84:	72 14                	jb     c0109a9a <page2kva+0x3b>
c0109a86:	ff 75 f4             	pushl  -0xc(%ebp)
c0109a89:	68 94 f0 10 c0       	push   $0xc010f094
c0109a8e:	6a 65                	push   $0x65
c0109a90:	68 83 f0 10 c0       	push   $0xc010f083
c0109a95:	e8 63 69 ff ff       	call   c01003fd <__panic>
c0109a9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109a9d:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c0109aa2:	c9                   	leave  
c0109aa3:	c3                   	ret    

c0109aa4 <kva2page>:

static inline struct Page *
kva2page(void *kva) {
c0109aa4:	55                   	push   %ebp
c0109aa5:	89 e5                	mov    %esp,%ebp
c0109aa7:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PADDR(kva));
c0109aaa:	8b 45 08             	mov    0x8(%ebp),%eax
c0109aad:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109ab0:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c0109ab7:	77 14                	ja     c0109acd <kva2page+0x29>
c0109ab9:	ff 75 f4             	pushl  -0xc(%ebp)
c0109abc:	68 b8 f0 10 c0       	push   $0xc010f0b8
c0109ac1:	6a 6a                	push   $0x6a
c0109ac3:	68 83 f0 10 c0       	push   $0xc010f083
c0109ac8:	e8 30 69 ff ff       	call   c01003fd <__panic>
c0109acd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109ad0:	05 00 00 00 40       	add    $0x40000000,%eax
c0109ad5:	83 ec 0c             	sub    $0xc,%esp
c0109ad8:	50                   	push   %eax
c0109ad9:	e8 44 ff ff ff       	call   c0109a22 <pa2page>
c0109ade:	83 c4 10             	add    $0x10,%esp
}
c0109ae1:	c9                   	leave  
c0109ae2:	c3                   	ret    

c0109ae3 <mm_count_inc>:

static inline int
mm_count_inc(struct mm_struct *mm) {
c0109ae3:	55                   	push   %ebp
c0109ae4:	89 e5                	mov    %esp,%ebp
    mm->mm_count += 1;
c0109ae6:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ae9:	8b 40 18             	mov    0x18(%eax),%eax
c0109aec:	8d 50 01             	lea    0x1(%eax),%edx
c0109aef:	8b 45 08             	mov    0x8(%ebp),%eax
c0109af2:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c0109af5:	8b 45 08             	mov    0x8(%ebp),%eax
c0109af8:	8b 40 18             	mov    0x18(%eax),%eax
}
c0109afb:	5d                   	pop    %ebp
c0109afc:	c3                   	ret    

c0109afd <mm_count_dec>:

static inline int
mm_count_dec(struct mm_struct *mm) {
c0109afd:	55                   	push   %ebp
c0109afe:	89 e5                	mov    %esp,%ebp
    mm->mm_count -= 1;
c0109b00:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b03:	8b 40 18             	mov    0x18(%eax),%eax
c0109b06:	8d 50 ff             	lea    -0x1(%eax),%edx
c0109b09:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b0c:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c0109b0f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b12:	8b 40 18             	mov    0x18(%eax),%eax
}
c0109b15:	5d                   	pop    %ebp
c0109b16:	c3                   	ret    

c0109b17 <lock_mm>:

static inline void
lock_mm(struct mm_struct *mm) {
c0109b17:	55                   	push   %ebp
c0109b18:	89 e5                	mov    %esp,%ebp
c0109b1a:	83 ec 08             	sub    $0x8,%esp
    if (mm != NULL) {
c0109b1d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0109b21:	74 29                	je     c0109b4c <lock_mm+0x35>
        down(&(mm->mm_sem));
c0109b23:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b26:	83 c0 1c             	add    $0x1c,%eax
c0109b29:	83 ec 0c             	sub    $0xc,%esp
c0109b2c:	50                   	push   %eax
c0109b2d:	e8 d9 f9 ff ff       	call   c010950b <down>
c0109b32:	83 c4 10             	add    $0x10,%esp
        if (current != NULL) {
c0109b35:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c0109b3a:	85 c0                	test   %eax,%eax
c0109b3c:	74 0e                	je     c0109b4c <lock_mm+0x35>
            mm->locked_by = current->pid;
c0109b3e:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c0109b43:	8b 50 04             	mov    0x4(%eax),%edx
c0109b46:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b49:	89 50 28             	mov    %edx,0x28(%eax)
        }
    }
}
c0109b4c:	90                   	nop
c0109b4d:	c9                   	leave  
c0109b4e:	c3                   	ret    

c0109b4f <unlock_mm>:

static inline void
unlock_mm(struct mm_struct *mm) {
c0109b4f:	55                   	push   %ebp
c0109b50:	89 e5                	mov    %esp,%ebp
c0109b52:	83 ec 08             	sub    $0x8,%esp
    if (mm != NULL) {
c0109b55:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0109b59:	74 1c                	je     c0109b77 <unlock_mm+0x28>
        up(&(mm->mm_sem));
c0109b5b:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b5e:	83 c0 1c             	add    $0x1c,%eax
c0109b61:	83 ec 0c             	sub    $0xc,%esp
c0109b64:	50                   	push   %eax
c0109b65:	e8 85 f9 ff ff       	call   c01094ef <up>
c0109b6a:	83 c4 10             	add    $0x10,%esp
        mm->locked_by = 0;
c0109b6d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b70:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    }
}
c0109b77:	90                   	nop
c0109b78:	c9                   	leave  
c0109b79:	c3                   	ret    

c0109b7a <alloc_proc>:
void forkrets(struct trapframe *tf);
void switch_to(struct context *from, struct context *to);

// alloc_proc - alloc a proc_struct and init all fields of proc_struct
static struct proc_struct *
alloc_proc(void) {
c0109b7a:	55                   	push   %ebp
c0109b7b:	89 e5                	mov    %esp,%ebp
c0109b7d:	83 ec 18             	sub    $0x18,%esp
    struct proc_struct *proc = kmalloc(sizeof(struct proc_struct));
c0109b80:	83 ec 0c             	sub    $0xc,%esp
c0109b83:	68 c4 00 00 00       	push   $0xc4
c0109b88:	e8 bb b5 ff ff       	call   c0105148 <kmalloc>
c0109b8d:	83 c4 10             	add    $0x10,%esp
c0109b90:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (proc != NULL) {
c0109b93:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109b97:	0f 84 43 01 00 00    	je     c0109ce0 <alloc_proc+0x166>
     *     int time_slice;                             // time slice for occupying the CPU
     *     skew_heap_entry_t lab6_run_pool;            // FOR LAB6 ONLY: the entry in the run pool
     *     uint32_t lab6_stride;                       // FOR LAB6 ONLY: the current stride of the process
     *     uint32_t lab6_priority;                     // FOR LAB6 ONLY: the priority of process, set by lab6_set_priority(uint32_t)
     */
        proc->state = PROC_UNINIT;
c0109b9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109ba0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        proc->pid = -1;         // an invalid pid
c0109ba6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109ba9:	c7 40 04 ff ff ff ff 	movl   $0xffffffff,0x4(%eax)
        proc->runs = 0;
c0109bb0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109bb3:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        proc->kstack = 0;
c0109bba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109bbd:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        proc->need_resched = 0;
c0109bc4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109bc7:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
        proc->parent = NULL;
c0109bce:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109bd1:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
        proc->mm = NULL;
c0109bd8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109bdb:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
        proc->tf = NULL;
c0109be2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109be5:	c7 40 3c 00 00 00 00 	movl   $0x0,0x3c(%eax)
        proc->cr3 = boot_cr3;   // kernel threads share boot_cr3
c0109bec:	8b 15 f4 71 1c c0    	mov    0xc01c71f4,%edx
c0109bf2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109bf5:	89 50 40             	mov    %edx,0x40(%eax)
        proc->flags = 0;
c0109bf8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109bfb:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
        // NEW
        proc->wait_state = 0;
c0109c02:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109c05:	c7 80 90 00 00 00 00 	movl   $0x0,0x90(%eax)
c0109c0c:	00 00 00 
        proc->cptr = NULL;
c0109c0f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109c12:	c7 80 94 00 00 00 00 	movl   $0x0,0x94(%eax)
c0109c19:	00 00 00 
        proc->yptr = NULL;
c0109c1c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109c1f:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
c0109c26:	00 00 00 
        proc->optr = NULL;
c0109c29:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109c2c:	c7 80 9c 00 00 00 00 	movl   $0x0,0x9c(%eax)
c0109c33:	00 00 00 
        // NEW IN LAB 6
        proc->rq = NULL;
c0109c36:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109c39:	c7 80 a0 00 00 00 00 	movl   $0x0,0xa0(%eax)
c0109c40:	00 00 00 
        list_init(&(proc->run_link));
c0109c43:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109c46:	05 a4 00 00 00       	add    $0xa4,%eax
c0109c4b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109c4e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109c51:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0109c54:	89 50 04             	mov    %edx,0x4(%eax)
c0109c57:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109c5a:	8b 50 04             	mov    0x4(%eax),%edx
c0109c5d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109c60:	89 10                	mov    %edx,(%eax)
        proc->time_slice = 0;
c0109c62:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109c65:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
c0109c6c:	00 00 00 
        // for stride
        skew_heap_init(&(proc->lab6_run_pool));
c0109c6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109c72:	05 b0 00 00 00       	add    $0xb0,%eax
c0109c77:	89 45 ec             	mov    %eax,-0x14(%ebp)
     compare_f comp) __attribute__((always_inline));

static inline void
skew_heap_init(skew_heap_entry_t *a)
{
     a->left = a->right = a->parent = NULL;
c0109c7a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109c7d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0109c83:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109c86:	8b 10                	mov    (%eax),%edx
c0109c88:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109c8b:	89 50 08             	mov    %edx,0x8(%eax)
c0109c8e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109c91:	8b 50 08             	mov    0x8(%eax),%edx
c0109c94:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109c97:	89 50 04             	mov    %edx,0x4(%eax)
        proc->lab6_stride = 0;
c0109c9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109c9d:	c7 80 bc 00 00 00 00 	movl   $0x0,0xbc(%eax)
c0109ca4:	00 00 00 
        proc->lab6_priority = 1;
c0109ca7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109caa:	c7 80 c0 00 00 00 01 	movl   $0x1,0xc0(%eax)
c0109cb1:	00 00 00 

        memset(&(proc->context), 0, sizeof(struct context));
c0109cb4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109cb7:	83 c0 1c             	add    $0x1c,%eax
c0109cba:	83 ec 04             	sub    $0x4,%esp
c0109cbd:	6a 20                	push   $0x20
c0109cbf:	6a 00                	push   $0x0
c0109cc1:	50                   	push   %eax
c0109cc2:	e8 c5 26 00 00       	call   c010c38c <memset>
c0109cc7:	83 c4 10             	add    $0x10,%esp
        memset(proc->name, 0, sizeof(char) * (PROC_NAME_LEN + 1));
c0109cca:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109ccd:	83 c0 48             	add    $0x48,%eax
c0109cd0:	83 ec 04             	sub    $0x4,%esp
c0109cd3:	6a 33                	push   $0x33
c0109cd5:	6a 00                	push   $0x0
c0109cd7:	50                   	push   %eax
c0109cd8:	e8 af 26 00 00       	call   c010c38c <memset>
c0109cdd:	83 c4 10             	add    $0x10,%esp
    }
    return proc;
c0109ce0:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0109ce3:	c9                   	leave  
c0109ce4:	c3                   	ret    

c0109ce5 <set_proc_name>:

// set_proc_name - set the name of proc
char *
set_proc_name(struct proc_struct *proc, const char *name) {
c0109ce5:	55                   	push   %ebp
c0109ce6:	89 e5                	mov    %esp,%ebp
c0109ce8:	83 ec 08             	sub    $0x8,%esp
    memset(proc->name, 0, sizeof(proc->name));
c0109ceb:	8b 45 08             	mov    0x8(%ebp),%eax
c0109cee:	83 c0 48             	add    $0x48,%eax
c0109cf1:	83 ec 04             	sub    $0x4,%esp
c0109cf4:	6a 33                	push   $0x33
c0109cf6:	6a 00                	push   $0x0
c0109cf8:	50                   	push   %eax
c0109cf9:	e8 8e 26 00 00       	call   c010c38c <memset>
c0109cfe:	83 c4 10             	add    $0x10,%esp
    return memcpy(proc->name, name, PROC_NAME_LEN);
c0109d01:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d04:	83 c0 48             	add    $0x48,%eax
c0109d07:	83 ec 04             	sub    $0x4,%esp
c0109d0a:	6a 32                	push   $0x32
c0109d0c:	ff 75 0c             	pushl  0xc(%ebp)
c0109d0f:	50                   	push   %eax
c0109d10:	e8 5a 27 00 00       	call   c010c46f <memcpy>
c0109d15:	83 c4 10             	add    $0x10,%esp
}
c0109d18:	c9                   	leave  
c0109d19:	c3                   	ret    

c0109d1a <get_proc_name>:

// get_proc_name - get the name of proc
char *
get_proc_name(struct proc_struct *proc) {
c0109d1a:	55                   	push   %ebp
c0109d1b:	89 e5                	mov    %esp,%ebp
c0109d1d:	83 ec 08             	sub    $0x8,%esp
    static char name[PROC_NAME_LEN + 1];
    memset(name, 0, sizeof(name));
c0109d20:	83 ec 04             	sub    $0x4,%esp
c0109d23:	6a 33                	push   $0x33
c0109d25:	6a 00                	push   $0x0
c0109d27:	68 60 70 1c c0       	push   $0xc01c7060
c0109d2c:	e8 5b 26 00 00       	call   c010c38c <memset>
c0109d31:	83 c4 10             	add    $0x10,%esp
    return memcpy(name, proc->name, PROC_NAME_LEN);
c0109d34:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d37:	83 c0 48             	add    $0x48,%eax
c0109d3a:	83 ec 04             	sub    $0x4,%esp
c0109d3d:	6a 32                	push   $0x32
c0109d3f:	50                   	push   %eax
c0109d40:	68 60 70 1c c0       	push   $0xc01c7060
c0109d45:	e8 25 27 00 00       	call   c010c46f <memcpy>
c0109d4a:	83 c4 10             	add    $0x10,%esp
}
c0109d4d:	c9                   	leave  
c0109d4e:	c3                   	ret    

c0109d4f <set_links>:

// set_links - set the relation links of process
static void
set_links(struct proc_struct *proc) {
c0109d4f:	55                   	push   %ebp
c0109d50:	89 e5                	mov    %esp,%ebp
c0109d52:	83 ec 20             	sub    $0x20,%esp
    list_add(&proc_list, &(proc->list_link));
c0109d55:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d58:	83 c0 7c             	add    $0x7c,%eax
c0109d5b:	c7 45 fc dc 72 1c c0 	movl   $0xc01c72dc,-0x4(%ebp)
c0109d62:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0109d65:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109d68:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109d6b:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0109d6e:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0109d71:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109d74:	8b 40 04             	mov    0x4(%eax),%eax
c0109d77:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0109d7a:	89 55 ec             	mov    %edx,-0x14(%ebp)
c0109d7d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109d80:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0109d83:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0109d86:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109d89:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0109d8c:	89 10                	mov    %edx,(%eax)
c0109d8e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109d91:	8b 10                	mov    (%eax),%edx
c0109d93:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109d96:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0109d99:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109d9c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0109d9f:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0109da2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109da5:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0109da8:	89 10                	mov    %edx,(%eax)
    proc->yptr = NULL;
c0109daa:	8b 45 08             	mov    0x8(%ebp),%eax
c0109dad:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
c0109db4:	00 00 00 
    if ((proc->optr = proc->parent->cptr) != NULL) {
c0109db7:	8b 45 08             	mov    0x8(%ebp),%eax
c0109dba:	8b 40 14             	mov    0x14(%eax),%eax
c0109dbd:	8b 90 94 00 00 00    	mov    0x94(%eax),%edx
c0109dc3:	8b 45 08             	mov    0x8(%ebp),%eax
c0109dc6:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c0109dcc:	8b 45 08             	mov    0x8(%ebp),%eax
c0109dcf:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c0109dd5:	85 c0                	test   %eax,%eax
c0109dd7:	74 12                	je     c0109deb <set_links+0x9c>
        proc->optr->yptr = proc;
c0109dd9:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ddc:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c0109de2:	8b 55 08             	mov    0x8(%ebp),%edx
c0109de5:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    }
    proc->parent->cptr = proc;
c0109deb:	8b 45 08             	mov    0x8(%ebp),%eax
c0109dee:	8b 40 14             	mov    0x14(%eax),%eax
c0109df1:	8b 55 08             	mov    0x8(%ebp),%edx
c0109df4:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    nr_process ++;
c0109dfa:	a1 40 70 1c c0       	mov    0xc01c7040,%eax
c0109dff:	83 c0 01             	add    $0x1,%eax
c0109e02:	a3 40 70 1c c0       	mov    %eax,0xc01c7040
}
c0109e07:	90                   	nop
c0109e08:	c9                   	leave  
c0109e09:	c3                   	ret    

c0109e0a <remove_links>:

// remove_links - clean the relation links of process
static void
remove_links(struct proc_struct *proc) {
c0109e0a:	55                   	push   %ebp
c0109e0b:	89 e5                	mov    %esp,%ebp
c0109e0d:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->list_link));
c0109e10:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e13:	83 c0 7c             	add    $0x7c,%eax
c0109e16:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0109e19:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109e1c:	8b 40 04             	mov    0x4(%eax),%eax
c0109e1f:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0109e22:	8b 12                	mov    (%edx),%edx
c0109e24:	89 55 f8             	mov    %edx,-0x8(%ebp)
c0109e27:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0109e2a:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0109e2d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109e30:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0109e33:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109e36:	8b 55 f8             	mov    -0x8(%ebp),%edx
c0109e39:	89 10                	mov    %edx,(%eax)
    if (proc->optr != NULL) {
c0109e3b:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e3e:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c0109e44:	85 c0                	test   %eax,%eax
c0109e46:	74 18                	je     c0109e60 <remove_links+0x56>
        proc->optr->yptr = proc->yptr;
c0109e48:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e4b:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c0109e51:	8b 55 08             	mov    0x8(%ebp),%edx
c0109e54:	8b 92 98 00 00 00    	mov    0x98(%edx),%edx
c0109e5a:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    }
    if (proc->yptr != NULL) {
c0109e60:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e63:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c0109e69:	85 c0                	test   %eax,%eax
c0109e6b:	74 1a                	je     c0109e87 <remove_links+0x7d>
        proc->yptr->optr = proc->optr;
c0109e6d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e70:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c0109e76:	8b 55 08             	mov    0x8(%ebp),%edx
c0109e79:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c0109e7f:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c0109e85:	eb 15                	jmp    c0109e9c <remove_links+0x92>
    }
    else {
       proc->parent->cptr = proc->optr;
c0109e87:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e8a:	8b 40 14             	mov    0x14(%eax),%eax
c0109e8d:	8b 55 08             	mov    0x8(%ebp),%edx
c0109e90:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c0109e96:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    }
    nr_process --;
c0109e9c:	a1 40 70 1c c0       	mov    0xc01c7040,%eax
c0109ea1:	83 e8 01             	sub    $0x1,%eax
c0109ea4:	a3 40 70 1c c0       	mov    %eax,0xc01c7040
}
c0109ea9:	90                   	nop
c0109eaa:	c9                   	leave  
c0109eab:	c3                   	ret    

c0109eac <get_pid>:

// get_pid - alloc a unique pid for process
static int
get_pid(void) {
c0109eac:	55                   	push   %ebp
c0109ead:	89 e5                	mov    %esp,%ebp
c0109eaf:	83 ec 10             	sub    $0x10,%esp
    static_assert(MAX_PID > MAX_PROCESS);
    struct proc_struct *proc;
    list_entry_t *list = &proc_list, *le;
c0109eb2:	c7 45 f8 dc 72 1c c0 	movl   $0xc01c72dc,-0x8(%ebp)
    static int next_safe = MAX_PID, last_pid = MAX_PID;
    if (++ last_pid >= MAX_PID) {
c0109eb9:	a1 7c 1a 13 c0       	mov    0xc0131a7c,%eax
c0109ebe:	83 c0 01             	add    $0x1,%eax
c0109ec1:	a3 7c 1a 13 c0       	mov    %eax,0xc0131a7c
c0109ec6:	a1 7c 1a 13 c0       	mov    0xc0131a7c,%eax
c0109ecb:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c0109ed0:	7e 0c                	jle    c0109ede <get_pid+0x32>
        last_pid = 1;
c0109ed2:	c7 05 7c 1a 13 c0 01 	movl   $0x1,0xc0131a7c
c0109ed9:	00 00 00 
        goto inside;
c0109edc:	eb 13                	jmp    c0109ef1 <get_pid+0x45>
    }
    if (last_pid >= next_safe) {
c0109ede:	8b 15 7c 1a 13 c0    	mov    0xc0131a7c,%edx
c0109ee4:	a1 80 1a 13 c0       	mov    0xc0131a80,%eax
c0109ee9:	39 c2                	cmp    %eax,%edx
c0109eeb:	0f 8c ac 00 00 00    	jl     c0109f9d <get_pid+0xf1>
    inside:
        next_safe = MAX_PID;
c0109ef1:	c7 05 80 1a 13 c0 00 	movl   $0x2000,0xc0131a80
c0109ef8:	20 00 00 
    repeat:
        le = list;
c0109efb:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0109efe:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while ((le = list_next(le)) != list) {
c0109f01:	eb 7f                	jmp    c0109f82 <get_pid+0xd6>
            proc = le2proc(le, list_link);
c0109f03:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109f06:	83 e8 7c             	sub    $0x7c,%eax
c0109f09:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (proc->pid == last_pid) {
c0109f0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109f0f:	8b 50 04             	mov    0x4(%eax),%edx
c0109f12:	a1 7c 1a 13 c0       	mov    0xc0131a7c,%eax
c0109f17:	39 c2                	cmp    %eax,%edx
c0109f19:	75 3e                	jne    c0109f59 <get_pid+0xad>
                if (++ last_pid >= next_safe) {
c0109f1b:	a1 7c 1a 13 c0       	mov    0xc0131a7c,%eax
c0109f20:	83 c0 01             	add    $0x1,%eax
c0109f23:	a3 7c 1a 13 c0       	mov    %eax,0xc0131a7c
c0109f28:	8b 15 7c 1a 13 c0    	mov    0xc0131a7c,%edx
c0109f2e:	a1 80 1a 13 c0       	mov    0xc0131a80,%eax
c0109f33:	39 c2                	cmp    %eax,%edx
c0109f35:	7c 4b                	jl     c0109f82 <get_pid+0xd6>
                    if (last_pid >= MAX_PID) {
c0109f37:	a1 7c 1a 13 c0       	mov    0xc0131a7c,%eax
c0109f3c:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c0109f41:	7e 0a                	jle    c0109f4d <get_pid+0xa1>
                        last_pid = 1;
c0109f43:	c7 05 7c 1a 13 c0 01 	movl   $0x1,0xc0131a7c
c0109f4a:	00 00 00 
                    }
                    next_safe = MAX_PID;
c0109f4d:	c7 05 80 1a 13 c0 00 	movl   $0x2000,0xc0131a80
c0109f54:	20 00 00 
                    goto repeat;
c0109f57:	eb a2                	jmp    c0109efb <get_pid+0x4f>
                }
            }
            else if (proc->pid > last_pid && next_safe > proc->pid) {
c0109f59:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109f5c:	8b 50 04             	mov    0x4(%eax),%edx
c0109f5f:	a1 7c 1a 13 c0       	mov    0xc0131a7c,%eax
c0109f64:	39 c2                	cmp    %eax,%edx
c0109f66:	7e 1a                	jle    c0109f82 <get_pid+0xd6>
c0109f68:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109f6b:	8b 50 04             	mov    0x4(%eax),%edx
c0109f6e:	a1 80 1a 13 c0       	mov    0xc0131a80,%eax
c0109f73:	39 c2                	cmp    %eax,%edx
c0109f75:	7d 0b                	jge    c0109f82 <get_pid+0xd6>
                next_safe = proc->pid;
c0109f77:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109f7a:	8b 40 04             	mov    0x4(%eax),%eax
c0109f7d:	a3 80 1a 13 c0       	mov    %eax,0xc0131a80
c0109f82:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109f85:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0109f88:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109f8b:	8b 40 04             	mov    0x4(%eax),%eax
    if (last_pid >= next_safe) {
    inside:
        next_safe = MAX_PID;
    repeat:
        le = list;
        while ((le = list_next(le)) != list) {
c0109f8e:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0109f91:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109f94:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c0109f97:	0f 85 66 ff ff ff    	jne    c0109f03 <get_pid+0x57>
            else if (proc->pid > last_pid && next_safe > proc->pid) {
                next_safe = proc->pid;
            }
        }
    }
    return last_pid;
c0109f9d:	a1 7c 1a 13 c0       	mov    0xc0131a7c,%eax
}
c0109fa2:	c9                   	leave  
c0109fa3:	c3                   	ret    

c0109fa4 <proc_run>:

// proc_run - make process "proc" running on cpu
// NOTE: before call switch_to, should load  base addr of "proc"'s new PDT
void
proc_run(struct proc_struct *proc) {
c0109fa4:	55                   	push   %ebp
c0109fa5:	89 e5                	mov    %esp,%ebp
c0109fa7:	83 ec 18             	sub    $0x18,%esp
    if (proc != current) {
c0109faa:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c0109faf:	39 45 08             	cmp    %eax,0x8(%ebp)
c0109fb2:	74 6b                	je     c010a01f <proc_run+0x7b>
        bool intr_flag;
        struct proc_struct *prev = current, *next = proc;
c0109fb4:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c0109fb9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109fbc:	8b 45 08             	mov    0x8(%ebp),%eax
c0109fbf:	89 45 f0             	mov    %eax,-0x10(%ebp)
        local_intr_save(intr_flag);
c0109fc2:	e8 f7 f9 ff ff       	call   c01099be <__intr_save>
c0109fc7:	89 45 ec             	mov    %eax,-0x14(%ebp)
        {
            current = proc;
c0109fca:	8b 45 08             	mov    0x8(%ebp),%eax
c0109fcd:	a3 28 50 1c c0       	mov    %eax,0xc01c5028
            load_esp0(next->kstack + KSTACKSIZE);
c0109fd2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109fd5:	8b 40 0c             	mov    0xc(%eax),%eax
c0109fd8:	05 00 20 00 00       	add    $0x2000,%eax
c0109fdd:	83 ec 0c             	sub    $0xc,%esp
c0109fe0:	50                   	push   %eax
c0109fe1:	e8 38 cf ff ff       	call   c0106f1e <load_esp0>
c0109fe6:	83 c4 10             	add    $0x10,%esp
            lcr3(next->cr3);
c0109fe9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109fec:	8b 40 40             	mov    0x40(%eax),%eax
c0109fef:	89 45 e8             	mov    %eax,-0x18(%ebp)
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
}

static inline void
lcr3(uintptr_t cr3) {
    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
c0109ff2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109ff5:	0f 22 d8             	mov    %eax,%cr3
            switch_to(&(prev->context), &(next->context));
c0109ff8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109ffb:	8d 50 1c             	lea    0x1c(%eax),%edx
c0109ffe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a001:	83 c0 1c             	add    $0x1c,%eax
c010a004:	83 ec 08             	sub    $0x8,%esp
c010a007:	52                   	push   %edx
c010a008:	50                   	push   %eax
c010a009:	e8 40 f9 ff ff       	call   c010994e <switch_to>
c010a00e:	83 c4 10             	add    $0x10,%esp
        }
        local_intr_restore(intr_flag);
c010a011:	83 ec 0c             	sub    $0xc,%esp
c010a014:	ff 75 ec             	pushl  -0x14(%ebp)
c010a017:	e8 cc f9 ff ff       	call   c01099e8 <__intr_restore>
c010a01c:	83 c4 10             	add    $0x10,%esp
    }
}
c010a01f:	90                   	nop
c010a020:	c9                   	leave  
c010a021:	c3                   	ret    

c010a022 <forkret>:

// forkret -- the first kernel entry point of a new thread/process
// NOTE: the addr of forkret is setted in copy_thread function
//       after switch_to, the current proc will execute here.
static void
forkret(void) {
c010a022:	55                   	push   %ebp
c010a023:	89 e5                	mov    %esp,%ebp
c010a025:	83 ec 08             	sub    $0x8,%esp
    forkrets(current->tf);
c010a028:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010a02d:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a030:	83 ec 0c             	sub    $0xc,%esp
c010a033:	50                   	push   %eax
c010a034:	e8 6e 95 ff ff       	call   c01035a7 <forkrets>
c010a039:	83 c4 10             	add    $0x10,%esp
}
c010a03c:	90                   	nop
c010a03d:	c9                   	leave  
c010a03e:	c3                   	ret    

c010a03f <hash_proc>:

// hash_proc - add proc into proc hash_list
static void
hash_proc(struct proc_struct *proc) {
c010a03f:	55                   	push   %ebp
c010a040:	89 e5                	mov    %esp,%ebp
c010a042:	53                   	push   %ebx
c010a043:	83 ec 24             	sub    $0x24,%esp
    list_add(hash_list + pid_hashfn(proc->pid), &(proc->hash_link));
c010a046:	8b 45 08             	mov    0x8(%ebp),%eax
c010a049:	8d 98 84 00 00 00    	lea    0x84(%eax),%ebx
c010a04f:	8b 45 08             	mov    0x8(%ebp),%eax
c010a052:	8b 40 04             	mov    0x4(%eax),%eax
c010a055:	83 ec 08             	sub    $0x8,%esp
c010a058:	6a 0a                	push   $0xa
c010a05a:	50                   	push   %eax
c010a05b:	e8 c3 2a 00 00       	call   c010cb23 <hash32>
c010a060:	83 c4 10             	add    $0x10,%esp
c010a063:	c1 e0 03             	shl    $0x3,%eax
c010a066:	05 40 50 1c c0       	add    $0xc01c5040,%eax
c010a06b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a06e:	89 5d f0             	mov    %ebx,-0x10(%ebp)
c010a071:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a074:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010a077:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a07a:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010a07d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a080:	8b 40 04             	mov    0x4(%eax),%eax
c010a083:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010a086:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c010a089:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010a08c:	89 55 e0             	mov    %edx,-0x20(%ebp)
c010a08f:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010a092:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a095:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010a098:	89 10                	mov    %edx,(%eax)
c010a09a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a09d:	8b 10                	mov    (%eax),%edx
c010a09f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a0a2:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010a0a5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a0a8:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010a0ab:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010a0ae:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a0b1:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010a0b4:	89 10                	mov    %edx,(%eax)
}
c010a0b6:	90                   	nop
c010a0b7:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c010a0ba:	c9                   	leave  
c010a0bb:	c3                   	ret    

c010a0bc <unhash_proc>:

// unhash_proc - delete proc from proc hash_list
static void
unhash_proc(struct proc_struct *proc) {
c010a0bc:	55                   	push   %ebp
c010a0bd:	89 e5                	mov    %esp,%ebp
c010a0bf:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->hash_link));
c010a0c2:	8b 45 08             	mov    0x8(%ebp),%eax
c010a0c5:	05 84 00 00 00       	add    $0x84,%eax
c010a0ca:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010a0cd:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a0d0:	8b 40 04             	mov    0x4(%eax),%eax
c010a0d3:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010a0d6:	8b 12                	mov    (%edx),%edx
c010a0d8:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010a0db:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010a0de:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010a0e1:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a0e4:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010a0e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a0ea:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010a0ed:	89 10                	mov    %edx,(%eax)
}
c010a0ef:	90                   	nop
c010a0f0:	c9                   	leave  
c010a0f1:	c3                   	ret    

c010a0f2 <find_proc>:

// find_proc - find proc frome proc hash_list according to pid
struct proc_struct *
find_proc(int pid) {
c010a0f2:	55                   	push   %ebp
c010a0f3:	89 e5                	mov    %esp,%ebp
c010a0f5:	83 ec 18             	sub    $0x18,%esp
    if (0 < pid && pid < MAX_PID) {
c010a0f8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a0fc:	7e 5f                	jle    c010a15d <find_proc+0x6b>
c010a0fe:	81 7d 08 ff 1f 00 00 	cmpl   $0x1fff,0x8(%ebp)
c010a105:	7f 56                	jg     c010a15d <find_proc+0x6b>
        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
c010a107:	8b 45 08             	mov    0x8(%ebp),%eax
c010a10a:	83 ec 08             	sub    $0x8,%esp
c010a10d:	6a 0a                	push   $0xa
c010a10f:	50                   	push   %eax
c010a110:	e8 0e 2a 00 00       	call   c010cb23 <hash32>
c010a115:	83 c4 10             	add    $0x10,%esp
c010a118:	c1 e0 03             	shl    $0x3,%eax
c010a11b:	05 40 50 1c c0       	add    $0xc01c5040,%eax
c010a120:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010a123:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a126:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while ((le = list_next(le)) != list) {
c010a129:	eb 1b                	jmp    c010a146 <find_proc+0x54>
            struct proc_struct *proc = le2proc(le, hash_link);
c010a12b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a12e:	2d 84 00 00 00       	sub    $0x84,%eax
c010a133:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if (proc->pid == pid) {
c010a136:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a139:	8b 40 04             	mov    0x4(%eax),%eax
c010a13c:	3b 45 08             	cmp    0x8(%ebp),%eax
c010a13f:	75 05                	jne    c010a146 <find_proc+0x54>
                return proc;
c010a141:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a144:	eb 1c                	jmp    c010a162 <find_proc+0x70>
c010a146:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a149:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010a14c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a14f:	8b 40 04             	mov    0x4(%eax),%eax
// find_proc - find proc frome proc hash_list according to pid
struct proc_struct *
find_proc(int pid) {
    if (0 < pid && pid < MAX_PID) {
        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
        while ((le = list_next(le)) != list) {
c010a152:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a155:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a158:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010a15b:	75 ce                	jne    c010a12b <find_proc+0x39>
            if (proc->pid == pid) {
                return proc;
            }
        }
    }
    return NULL;
c010a15d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a162:	c9                   	leave  
c010a163:	c3                   	ret    

c010a164 <kernel_thread>:

// kernel_thread - create a kernel thread using "fn" function
// NOTE: the contents of temp trapframe tf will be copied to 
//       proc->tf in do_fork-->copy_thread function
int
kernel_thread(int (*fn)(void *), void *arg, uint32_t clone_flags) {
c010a164:	55                   	push   %ebp
c010a165:	89 e5                	mov    %esp,%ebp
c010a167:	83 ec 58             	sub    $0x58,%esp
    struct trapframe tf;
    memset(&tf, 0, sizeof(struct trapframe));
c010a16a:	83 ec 04             	sub    $0x4,%esp
c010a16d:	6a 4c                	push   $0x4c
c010a16f:	6a 00                	push   $0x0
c010a171:	8d 45 ac             	lea    -0x54(%ebp),%eax
c010a174:	50                   	push   %eax
c010a175:	e8 12 22 00 00       	call   c010c38c <memset>
c010a17a:	83 c4 10             	add    $0x10,%esp
    tf.tf_cs = KERNEL_CS;
c010a17d:	66 c7 45 e8 08 00    	movw   $0x8,-0x18(%ebp)
    tf.tf_ds = tf.tf_es = tf.tf_ss = KERNEL_DS;
c010a183:	66 c7 45 f4 10 00    	movw   $0x10,-0xc(%ebp)
c010a189:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c010a18d:	66 89 45 d4          	mov    %ax,-0x2c(%ebp)
c010a191:	0f b7 45 d4          	movzwl -0x2c(%ebp),%eax
c010a195:	66 89 45 d8          	mov    %ax,-0x28(%ebp)
    tf.tf_regs.reg_ebx = (uint32_t)fn;
c010a199:	8b 45 08             	mov    0x8(%ebp),%eax
c010a19c:	89 45 bc             	mov    %eax,-0x44(%ebp)
    tf.tf_regs.reg_edx = (uint32_t)arg;
c010a19f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a1a2:	89 45 c0             	mov    %eax,-0x40(%ebp)
    tf.tf_eip = (uint32_t)kernel_thread_entry;
c010a1a5:	b8 45 99 10 c0       	mov    $0xc0109945,%eax
c010a1aa:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return do_fork(clone_flags | CLONE_VM, 0, &tf);
c010a1ad:	8b 45 10             	mov    0x10(%ebp),%eax
c010a1b0:	80 cc 01             	or     $0x1,%ah
c010a1b3:	89 c2                	mov    %eax,%edx
c010a1b5:	83 ec 04             	sub    $0x4,%esp
c010a1b8:	8d 45 ac             	lea    -0x54(%ebp),%eax
c010a1bb:	50                   	push   %eax
c010a1bc:	6a 00                	push   $0x0
c010a1be:	52                   	push   %edx
c010a1bf:	e8 f2 02 00 00       	call   c010a4b6 <do_fork>
c010a1c4:	83 c4 10             	add    $0x10,%esp
}
c010a1c7:	c9                   	leave  
c010a1c8:	c3                   	ret    

c010a1c9 <setup_kstack>:

// setup_kstack - alloc pages with size KSTACKPAGE as process kernel stack
static int
setup_kstack(struct proc_struct *proc) {
c010a1c9:	55                   	push   %ebp
c010a1ca:	89 e5                	mov    %esp,%ebp
c010a1cc:	83 ec 18             	sub    $0x18,%esp
    struct Page *page = alloc_pages(KSTACKPAGE);
c010a1cf:	83 ec 0c             	sub    $0xc,%esp
c010a1d2:	6a 02                	push   $0x2
c010a1d4:	e8 99 ce ff ff       	call   c0107072 <alloc_pages>
c010a1d9:	83 c4 10             	add    $0x10,%esp
c010a1dc:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c010a1df:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a1e3:	74 1d                	je     c010a202 <setup_kstack+0x39>
        proc->kstack = (uintptr_t)page2kva(page);
c010a1e5:	83 ec 0c             	sub    $0xc,%esp
c010a1e8:	ff 75 f4             	pushl  -0xc(%ebp)
c010a1eb:	e8 6f f8 ff ff       	call   c0109a5f <page2kva>
c010a1f0:	83 c4 10             	add    $0x10,%esp
c010a1f3:	89 c2                	mov    %eax,%edx
c010a1f5:	8b 45 08             	mov    0x8(%ebp),%eax
c010a1f8:	89 50 0c             	mov    %edx,0xc(%eax)
        return 0;
c010a1fb:	b8 00 00 00 00       	mov    $0x0,%eax
c010a200:	eb 05                	jmp    c010a207 <setup_kstack+0x3e>
    }
    return -E_NO_MEM;
c010a202:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c010a207:	c9                   	leave  
c010a208:	c3                   	ret    

c010a209 <put_kstack>:

// put_kstack - free the memory space of process kernel stack
static void
put_kstack(struct proc_struct *proc) {
c010a209:	55                   	push   %ebp
c010a20a:	89 e5                	mov    %esp,%ebp
c010a20c:	83 ec 08             	sub    $0x8,%esp
    free_pages(kva2page((void *)(proc->kstack)), KSTACKPAGE);
c010a20f:	8b 45 08             	mov    0x8(%ebp),%eax
c010a212:	8b 40 0c             	mov    0xc(%eax),%eax
c010a215:	83 ec 0c             	sub    $0xc,%esp
c010a218:	50                   	push   %eax
c010a219:	e8 86 f8 ff ff       	call   c0109aa4 <kva2page>
c010a21e:	83 c4 10             	add    $0x10,%esp
c010a221:	83 ec 08             	sub    $0x8,%esp
c010a224:	6a 02                	push   $0x2
c010a226:	50                   	push   %eax
c010a227:	e8 b2 ce ff ff       	call   c01070de <free_pages>
c010a22c:	83 c4 10             	add    $0x10,%esp
}
c010a22f:	90                   	nop
c010a230:	c9                   	leave  
c010a231:	c3                   	ret    

c010a232 <setup_pgdir>:

// setup_pgdir - alloc one page as PDT
static int
setup_pgdir(struct mm_struct *mm) {
c010a232:	55                   	push   %ebp
c010a233:	89 e5                	mov    %esp,%ebp
c010a235:	83 ec 18             	sub    $0x18,%esp
    struct Page *page;
    if ((page = alloc_page()) == NULL) {
c010a238:	83 ec 0c             	sub    $0xc,%esp
c010a23b:	6a 01                	push   $0x1
c010a23d:	e8 30 ce ff ff       	call   c0107072 <alloc_pages>
c010a242:	83 c4 10             	add    $0x10,%esp
c010a245:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a248:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a24c:	75 07                	jne    c010a255 <setup_pgdir+0x23>
        return -E_NO_MEM;
c010a24e:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010a253:	eb 74                	jmp    c010a2c9 <setup_pgdir+0x97>
    }
    pde_t *pgdir = page2kva(page);
c010a255:	83 ec 0c             	sub    $0xc,%esp
c010a258:	ff 75 f4             	pushl  -0xc(%ebp)
c010a25b:	e8 ff f7 ff ff       	call   c0109a5f <page2kva>
c010a260:	83 c4 10             	add    $0x10,%esp
c010a263:	89 45 f0             	mov    %eax,-0x10(%ebp)
    memcpy(pgdir, boot_pgdir, PGSIZE);
c010a266:	a1 20 1a 13 c0       	mov    0xc0131a20,%eax
c010a26b:	83 ec 04             	sub    $0x4,%esp
c010a26e:	68 00 10 00 00       	push   $0x1000
c010a273:	50                   	push   %eax
c010a274:	ff 75 f0             	pushl  -0x10(%ebp)
c010a277:	e8 f3 21 00 00       	call   c010c46f <memcpy>
c010a27c:	83 c4 10             	add    $0x10,%esp
    pgdir[PDX(VPT)] = PADDR(pgdir) | PTE_P | PTE_W;
c010a27f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a282:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
c010a288:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a28b:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010a28e:	81 7d ec ff ff ff bf 	cmpl   $0xbfffffff,-0x14(%ebp)
c010a295:	77 17                	ja     c010a2ae <setup_pgdir+0x7c>
c010a297:	ff 75 ec             	pushl  -0x14(%ebp)
c010a29a:	68 b8 f0 10 c0       	push   $0xc010f0b8
c010a29f:	68 44 01 00 00       	push   $0x144
c010a2a4:	68 dc f0 10 c0       	push   $0xc010f0dc
c010a2a9:	e8 4f 61 ff ff       	call   c01003fd <__panic>
c010a2ae:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a2b1:	05 00 00 00 40       	add    $0x40000000,%eax
c010a2b6:	83 c8 03             	or     $0x3,%eax
c010a2b9:	89 02                	mov    %eax,(%edx)
    mm->pgdir = pgdir;
c010a2bb:	8b 45 08             	mov    0x8(%ebp),%eax
c010a2be:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010a2c1:	89 50 0c             	mov    %edx,0xc(%eax)
    return 0;
c010a2c4:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a2c9:	c9                   	leave  
c010a2ca:	c3                   	ret    

c010a2cb <put_pgdir>:

// put_pgdir - free the memory space of PDT
static void
put_pgdir(struct mm_struct *mm) {
c010a2cb:	55                   	push   %ebp
c010a2cc:	89 e5                	mov    %esp,%ebp
c010a2ce:	83 ec 08             	sub    $0x8,%esp
    free_page(kva2page(mm->pgdir));
c010a2d1:	8b 45 08             	mov    0x8(%ebp),%eax
c010a2d4:	8b 40 0c             	mov    0xc(%eax),%eax
c010a2d7:	83 ec 0c             	sub    $0xc,%esp
c010a2da:	50                   	push   %eax
c010a2db:	e8 c4 f7 ff ff       	call   c0109aa4 <kva2page>
c010a2e0:	83 c4 10             	add    $0x10,%esp
c010a2e3:	83 ec 08             	sub    $0x8,%esp
c010a2e6:	6a 01                	push   $0x1
c010a2e8:	50                   	push   %eax
c010a2e9:	e8 f0 cd ff ff       	call   c01070de <free_pages>
c010a2ee:	83 c4 10             	add    $0x10,%esp
}
c010a2f1:	90                   	nop
c010a2f2:	c9                   	leave  
c010a2f3:	c3                   	ret    

c010a2f4 <copy_mm>:

// copy_mm - process "proc" duplicate OR share process "current"'s mm according clone_flags
//         - if clone_flags & CLONE_VM, then "share" ; else "duplicate"
static int
copy_mm(uint32_t clone_flags, struct proc_struct *proc) {
c010a2f4:	55                   	push   %ebp
c010a2f5:	89 e5                	mov    %esp,%ebp
c010a2f7:	83 ec 18             	sub    $0x18,%esp
    struct mm_struct *mm, *oldmm = current->mm;
c010a2fa:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010a2ff:	8b 40 18             	mov    0x18(%eax),%eax
c010a302:	89 45 ec             	mov    %eax,-0x14(%ebp)

    /* current is a kernel thread */
    if (oldmm == NULL) {
c010a305:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010a309:	75 0a                	jne    c010a315 <copy_mm+0x21>
        return 0;
c010a30b:	b8 00 00 00 00       	mov    $0x0,%eax
c010a310:	e9 03 01 00 00       	jmp    c010a418 <copy_mm+0x124>
    }
    if (clone_flags & CLONE_VM) {
c010a315:	8b 45 08             	mov    0x8(%ebp),%eax
c010a318:	25 00 01 00 00       	and    $0x100,%eax
c010a31d:	85 c0                	test   %eax,%eax
c010a31f:	74 08                	je     c010a329 <copy_mm+0x35>
        mm = oldmm;
c010a321:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a324:	89 45 f4             	mov    %eax,-0xc(%ebp)
        goto good_mm;
c010a327:	eb 65                	jmp    c010a38e <copy_mm+0x9a>
    }

    int ret = -E_NO_MEM;
c010a329:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
    if ((mm = mm_create()) == NULL) {
c010a330:	e8 eb 92 ff ff       	call   c0103620 <mm_create>
c010a335:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a338:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a33c:	0f 84 d2 00 00 00    	je     c010a414 <copy_mm+0x120>
        goto bad_mm;
    }
    if (setup_pgdir(mm) != 0) {
c010a342:	83 ec 0c             	sub    $0xc,%esp
c010a345:	ff 75 f4             	pushl  -0xc(%ebp)
c010a348:	e8 e5 fe ff ff       	call   c010a232 <setup_pgdir>
c010a34d:	83 c4 10             	add    $0x10,%esp
c010a350:	85 c0                	test   %eax,%eax
c010a352:	0f 85 ab 00 00 00    	jne    c010a403 <copy_mm+0x10f>
        goto bad_pgdir_cleanup_mm;
    }

    lock_mm(oldmm);
c010a358:	83 ec 0c             	sub    $0xc,%esp
c010a35b:	ff 75 ec             	pushl  -0x14(%ebp)
c010a35e:	e8 b4 f7 ff ff       	call   c0109b17 <lock_mm>
c010a363:	83 c4 10             	add    $0x10,%esp
    {
        ret = dup_mmap(mm, oldmm);
c010a366:	83 ec 08             	sub    $0x8,%esp
c010a369:	ff 75 ec             	pushl  -0x14(%ebp)
c010a36c:	ff 75 f4             	pushl  -0xc(%ebp)
c010a36f:	e8 7f 97 ff ff       	call   c0103af3 <dup_mmap>
c010a374:	83 c4 10             	add    $0x10,%esp
c010a377:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    unlock_mm(oldmm);
c010a37a:	83 ec 0c             	sub    $0xc,%esp
c010a37d:	ff 75 ec             	pushl  -0x14(%ebp)
c010a380:	e8 ca f7 ff ff       	call   c0109b4f <unlock_mm>
c010a385:	83 c4 10             	add    $0x10,%esp

    if (ret != 0) {
c010a388:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010a38c:	75 56                	jne    c010a3e4 <copy_mm+0xf0>
        goto bad_dup_cleanup_mmap;
    }

good_mm:
    mm_count_inc(mm);
c010a38e:	83 ec 0c             	sub    $0xc,%esp
c010a391:	ff 75 f4             	pushl  -0xc(%ebp)
c010a394:	e8 4a f7 ff ff       	call   c0109ae3 <mm_count_inc>
c010a399:	83 c4 10             	add    $0x10,%esp
    proc->mm = mm;
c010a39c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a39f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a3a2:	89 50 18             	mov    %edx,0x18(%eax)
    proc->cr3 = PADDR(mm->pgdir);
c010a3a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a3a8:	8b 40 0c             	mov    0xc(%eax),%eax
c010a3ab:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010a3ae:	81 7d e8 ff ff ff bf 	cmpl   $0xbfffffff,-0x18(%ebp)
c010a3b5:	77 17                	ja     c010a3ce <copy_mm+0xda>
c010a3b7:	ff 75 e8             	pushl  -0x18(%ebp)
c010a3ba:	68 b8 f0 10 c0       	push   $0xc010f0b8
c010a3bf:	68 73 01 00 00       	push   $0x173
c010a3c4:	68 dc f0 10 c0       	push   $0xc010f0dc
c010a3c9:	e8 2f 60 ff ff       	call   c01003fd <__panic>
c010a3ce:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a3d1:	8d 90 00 00 00 40    	lea    0x40000000(%eax),%edx
c010a3d7:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a3da:	89 50 40             	mov    %edx,0x40(%eax)
    return 0;
c010a3dd:	b8 00 00 00 00       	mov    $0x0,%eax
c010a3e2:	eb 34                	jmp    c010a418 <copy_mm+0x124>
        ret = dup_mmap(mm, oldmm);
    }
    unlock_mm(oldmm);

    if (ret != 0) {
        goto bad_dup_cleanup_mmap;
c010a3e4:	90                   	nop
    mm_count_inc(mm);
    proc->mm = mm;
    proc->cr3 = PADDR(mm->pgdir);
    return 0;
bad_dup_cleanup_mmap:
    exit_mmap(mm);
c010a3e5:	83 ec 0c             	sub    $0xc,%esp
c010a3e8:	ff 75 f4             	pushl  -0xc(%ebp)
c010a3eb:	e8 ea 97 ff ff       	call   c0103bda <exit_mmap>
c010a3f0:	83 c4 10             	add    $0x10,%esp
    put_pgdir(mm);
c010a3f3:	83 ec 0c             	sub    $0xc,%esp
c010a3f6:	ff 75 f4             	pushl  -0xc(%ebp)
c010a3f9:	e8 cd fe ff ff       	call   c010a2cb <put_pgdir>
c010a3fe:	83 c4 10             	add    $0x10,%esp
c010a401:	eb 01                	jmp    c010a404 <copy_mm+0x110>
    int ret = -E_NO_MEM;
    if ((mm = mm_create()) == NULL) {
        goto bad_mm;
    }
    if (setup_pgdir(mm) != 0) {
        goto bad_pgdir_cleanup_mm;
c010a403:	90                   	nop
    return 0;
bad_dup_cleanup_mmap:
    exit_mmap(mm);
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
c010a404:	83 ec 0c             	sub    $0xc,%esp
c010a407:	ff 75 f4             	pushl  -0xc(%ebp)
c010a40a:	e8 3d 95 ff ff       	call   c010394c <mm_destroy>
c010a40f:	83 c4 10             	add    $0x10,%esp
c010a412:	eb 01                	jmp    c010a415 <copy_mm+0x121>
        goto good_mm;
    }

    int ret = -E_NO_MEM;
    if ((mm = mm_create()) == NULL) {
        goto bad_mm;
c010a414:	90                   	nop
    exit_mmap(mm);
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
bad_mm:
    return ret;
c010a415:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010a418:	c9                   	leave  
c010a419:	c3                   	ret    

c010a41a <copy_thread>:

// copy_thread - setup the trapframe on the  process's kernel stack top and
//             - setup the kernel entry point and stack of process
static void
copy_thread(struct proc_struct *proc, uintptr_t esp, struct trapframe *tf) {
c010a41a:	55                   	push   %ebp
c010a41b:	89 e5                	mov    %esp,%ebp
c010a41d:	57                   	push   %edi
c010a41e:	56                   	push   %esi
c010a41f:	53                   	push   %ebx
    proc->tf = (struct trapframe *)(proc->kstack + KSTACKSIZE) - 1;
c010a420:	8b 45 08             	mov    0x8(%ebp),%eax
c010a423:	8b 40 0c             	mov    0xc(%eax),%eax
c010a426:	05 b4 1f 00 00       	add    $0x1fb4,%eax
c010a42b:	89 c2                	mov    %eax,%edx
c010a42d:	8b 45 08             	mov    0x8(%ebp),%eax
c010a430:	89 50 3c             	mov    %edx,0x3c(%eax)
    *(proc->tf) = *tf;
c010a433:	8b 45 08             	mov    0x8(%ebp),%eax
c010a436:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a439:	8b 55 10             	mov    0x10(%ebp),%edx
c010a43c:	89 d3                	mov    %edx,%ebx
c010a43e:	ba 4c 00 00 00       	mov    $0x4c,%edx
c010a443:	8b 0b                	mov    (%ebx),%ecx
c010a445:	89 08                	mov    %ecx,(%eax)
c010a447:	8b 4c 13 fc          	mov    -0x4(%ebx,%edx,1),%ecx
c010a44b:	89 4c 10 fc          	mov    %ecx,-0x4(%eax,%edx,1)
c010a44f:	8d 78 04             	lea    0x4(%eax),%edi
c010a452:	83 e7 fc             	and    $0xfffffffc,%edi
c010a455:	29 f8                	sub    %edi,%eax
c010a457:	29 c3                	sub    %eax,%ebx
c010a459:	01 c2                	add    %eax,%edx
c010a45b:	83 e2 fc             	and    $0xfffffffc,%edx
c010a45e:	89 d0                	mov    %edx,%eax
c010a460:	c1 e8 02             	shr    $0x2,%eax
c010a463:	89 de                	mov    %ebx,%esi
c010a465:	89 c1                	mov    %eax,%ecx
c010a467:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
    proc->tf->tf_regs.reg_eax = 0;
c010a469:	8b 45 08             	mov    0x8(%ebp),%eax
c010a46c:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a46f:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    proc->tf->tf_esp = esp;
c010a476:	8b 45 08             	mov    0x8(%ebp),%eax
c010a479:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a47c:	8b 55 0c             	mov    0xc(%ebp),%edx
c010a47f:	89 50 44             	mov    %edx,0x44(%eax)
    proc->tf->tf_eflags |= FL_IF;
c010a482:	8b 45 08             	mov    0x8(%ebp),%eax
c010a485:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a488:	8b 55 08             	mov    0x8(%ebp),%edx
c010a48b:	8b 52 3c             	mov    0x3c(%edx),%edx
c010a48e:	8b 52 40             	mov    0x40(%edx),%edx
c010a491:	80 ce 02             	or     $0x2,%dh
c010a494:	89 50 40             	mov    %edx,0x40(%eax)

    proc->context.eip = (uintptr_t)forkret;
c010a497:	ba 22 a0 10 c0       	mov    $0xc010a022,%edx
c010a49c:	8b 45 08             	mov    0x8(%ebp),%eax
c010a49f:	89 50 1c             	mov    %edx,0x1c(%eax)
    proc->context.esp = (uintptr_t)(proc->tf);
c010a4a2:	8b 45 08             	mov    0x8(%ebp),%eax
c010a4a5:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a4a8:	89 c2                	mov    %eax,%edx
c010a4aa:	8b 45 08             	mov    0x8(%ebp),%eax
c010a4ad:	89 50 20             	mov    %edx,0x20(%eax)
}
c010a4b0:	90                   	nop
c010a4b1:	5b                   	pop    %ebx
c010a4b2:	5e                   	pop    %esi
c010a4b3:	5f                   	pop    %edi
c010a4b4:	5d                   	pop    %ebp
c010a4b5:	c3                   	ret    

c010a4b6 <do_fork>:
 * @clone_flags: used to guide how to clone the child process
 * @stack:       the parent's user stack pointer. if stack==0, It means to fork a kernel thread.
 * @tf:          the trapframe info, which will be copied to child process's proc->tf
 */
int
do_fork(uint32_t clone_flags, uintptr_t stack, struct trapframe *tf) {
c010a4b6:	55                   	push   %ebp
c010a4b7:	89 e5                	mov    %esp,%ebp
c010a4b9:	83 ec 18             	sub    $0x18,%esp
    int ret = -E_NO_FREE_PROC;
c010a4bc:	c7 45 f4 fb ff ff ff 	movl   $0xfffffffb,-0xc(%ebp)
    struct proc_struct *proc;
    if (nr_process >= MAX_PROCESS) {
c010a4c3:	a1 40 70 1c c0       	mov    0xc01c7040,%eax
c010a4c8:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c010a4cd:	0f 8f e4 00 00 00    	jg     c010a5b7 <do_fork+0x101>
        goto fork_out;
    }
    ret = -E_NO_MEM;
c010a4d3:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    *    -------------------
	*    update step 1: set child proc's parent to current process, make sure current process's wait_state is 0
	*    update step 5: insert proc_struct into hash_list && proc_list, set the relation links of process
    */
    //    1. call alloc_proc to allocate a proc_struct
    proc = alloc_proc();
c010a4da:	e8 9b f6 ff ff       	call   c0109b7a <alloc_proc>
c010a4df:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (proc == NULL) {
c010a4e2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010a4e6:	0f 84 ce 00 00 00    	je     c010a5ba <do_fork+0x104>
        goto fork_out;
    }
    // update
    assert(current->wait_state == 0);
c010a4ec:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010a4f1:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010a4f7:	85 c0                	test   %eax,%eax
c010a4f9:	74 19                	je     c010a514 <do_fork+0x5e>
c010a4fb:	68 f0 f0 10 c0       	push   $0xc010f0f0
c010a500:	68 09 f1 10 c0       	push   $0xc010f109
c010a505:	68 c0 01 00 00       	push   $0x1c0
c010a50a:	68 dc f0 10 c0       	push   $0xc010f0dc
c010a50f:	e8 e9 5e ff ff       	call   c01003fd <__panic>
    proc->parent = current;
c010a514:	8b 15 28 50 1c c0    	mov    0xc01c5028,%edx
c010a51a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a51d:	89 50 14             	mov    %edx,0x14(%eax)
    //    2. call setup_kstack to allocate a kernel stack for child process
    if (setup_kstack(proc) != 0) {
c010a520:	83 ec 0c             	sub    $0xc,%esp
c010a523:	ff 75 f0             	pushl  -0x10(%ebp)
c010a526:	e8 9e fc ff ff       	call   c010a1c9 <setup_kstack>
c010a52b:	83 c4 10             	add    $0x10,%esp
c010a52e:	85 c0                	test   %eax,%eax
c010a530:	0f 85 9b 00 00 00    	jne    c010a5d1 <do_fork+0x11b>
        goto bad_fork_cleanup_proc;
    }
    //    3. call copy_mm to dup OR share mm according clone_flag
    if (copy_mm(clone_flags, proc) != 0) {
c010a536:	83 ec 08             	sub    $0x8,%esp
c010a539:	ff 75 f0             	pushl  -0x10(%ebp)
c010a53c:	ff 75 08             	pushl  0x8(%ebp)
c010a53f:	e8 b0 fd ff ff       	call   c010a2f4 <copy_mm>
c010a544:	83 c4 10             	add    $0x10,%esp
c010a547:	85 c0                	test   %eax,%eax
c010a549:	75 75                	jne    c010a5c0 <do_fork+0x10a>
        goto bad_fork_cleanup_kstack;
    }
    //    4. call copy_thread to setup tf & context in proc_struct
    copy_thread(proc, stack, tf);   // note: if stack == 0, this is a kernel thread
c010a54b:	83 ec 04             	sub    $0x4,%esp
c010a54e:	ff 75 10             	pushl  0x10(%ebp)
c010a551:	ff 75 0c             	pushl  0xc(%ebp)
c010a554:	ff 75 f0             	pushl  -0x10(%ebp)
c010a557:	e8 be fe ff ff       	call   c010a41a <copy_thread>
c010a55c:	83 c4 10             	add    $0x10,%esp
    //    5. insert proc_struct into hash_list && proc_list
    // this need disabling interrupt
    bool intr_flag;
    local_intr_save(intr_flag);
c010a55f:	e8 5a f4 ff ff       	call   c01099be <__intr_save>
c010a564:	89 45 ec             	mov    %eax,-0x14(%ebp)
    {
        proc->pid = get_pid();
c010a567:	e8 40 f9 ff ff       	call   c0109eac <get_pid>
c010a56c:	89 c2                	mov    %eax,%edx
c010a56e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a571:	89 50 04             	mov    %edx,0x4(%eax)
        hash_proc(proc);
c010a574:	83 ec 0c             	sub    $0xc,%esp
c010a577:	ff 75 f0             	pushl  -0x10(%ebp)
c010a57a:	e8 c0 fa ff ff       	call   c010a03f <hash_proc>
c010a57f:	83 c4 10             	add    $0x10,%esp
        // list_add(&proc_list, &(proc->list_link));
        // nr_process++;
        // update
        set_links(proc);
c010a582:	83 ec 0c             	sub    $0xc,%esp
c010a585:	ff 75 f0             	pushl  -0x10(%ebp)
c010a588:	e8 c2 f7 ff ff       	call   c0109d4f <set_links>
c010a58d:	83 c4 10             	add    $0x10,%esp
    }
    local_intr_restore(intr_flag);
c010a590:	83 ec 0c             	sub    $0xc,%esp
c010a593:	ff 75 ec             	pushl  -0x14(%ebp)
c010a596:	e8 4d f4 ff ff       	call   c01099e8 <__intr_restore>
c010a59b:	83 c4 10             	add    $0x10,%esp
    //    6. call wakeup_proc to make the new child process RUNNABLE
    wakeup_proc(proc);
c010a59e:	83 ec 0c             	sub    $0xc,%esp
c010a5a1:	ff 75 f0             	pushl  -0x10(%ebp)
c010a5a4:	e8 fb 10 00 00       	call   c010b6a4 <wakeup_proc>
c010a5a9:	83 c4 10             	add    $0x10,%esp
    //    7. set ret vaule using child proc's pid
    ret = proc->pid;
c010a5ac:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a5af:	8b 40 04             	mov    0x4(%eax),%eax
c010a5b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a5b5:	eb 04                	jmp    c010a5bb <do_fork+0x105>
int
do_fork(uint32_t clone_flags, uintptr_t stack, struct trapframe *tf) {
    int ret = -E_NO_FREE_PROC;
    struct proc_struct *proc;
    if (nr_process >= MAX_PROCESS) {
        goto fork_out;
c010a5b7:	90                   	nop
c010a5b8:	eb 01                	jmp    c010a5bb <do_fork+0x105>
	*    update step 5: insert proc_struct into hash_list && proc_list, set the relation links of process
    */
    //    1. call alloc_proc to allocate a proc_struct
    proc = alloc_proc();
    if (proc == NULL) {
        goto fork_out;
c010a5ba:	90                   	nop
    wakeup_proc(proc);
    //    7. set ret vaule using child proc's pid
    ret = proc->pid;
	
fork_out:
    return ret;
c010a5bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a5be:	eb 22                	jmp    c010a5e2 <do_fork+0x12c>
    if (setup_kstack(proc) != 0) {
        goto bad_fork_cleanup_proc;
    }
    //    3. call copy_mm to dup OR share mm according clone_flag
    if (copy_mm(clone_flags, proc) != 0) {
        goto bad_fork_cleanup_kstack;
c010a5c0:	90                   	nop
	
fork_out:
    return ret;

bad_fork_cleanup_kstack:
    put_kstack(proc);
c010a5c1:	83 ec 0c             	sub    $0xc,%esp
c010a5c4:	ff 75 f0             	pushl  -0x10(%ebp)
c010a5c7:	e8 3d fc ff ff       	call   c010a209 <put_kstack>
c010a5cc:	83 c4 10             	add    $0x10,%esp
c010a5cf:	eb 01                	jmp    c010a5d2 <do_fork+0x11c>
    // update
    assert(current->wait_state == 0);
    proc->parent = current;
    //    2. call setup_kstack to allocate a kernel stack for child process
    if (setup_kstack(proc) != 0) {
        goto bad_fork_cleanup_proc;
c010a5d1:	90                   	nop
    return ret;

bad_fork_cleanup_kstack:
    put_kstack(proc);
bad_fork_cleanup_proc:
    kfree(proc);
c010a5d2:	83 ec 0c             	sub    $0xc,%esp
c010a5d5:	ff 75 f0             	pushl  -0x10(%ebp)
c010a5d8:	e8 83 ab ff ff       	call   c0105160 <kfree>
c010a5dd:	83 c4 10             	add    $0x10,%esp
    goto fork_out;
c010a5e0:	eb d9                	jmp    c010a5bb <do_fork+0x105>
}
c010a5e2:	c9                   	leave  
c010a5e3:	c3                   	ret    

c010a5e4 <do_exit>:
// do_exit - called by sys_exit
//   1. call exit_mmap & put_pgdir & mm_destroy to free the almost all memory space of process
//   2. set process' state as PROC_ZOMBIE, then call wakeup_proc(parent) to ask parent reclaim itself.
//   3. call scheduler to switch to other process
int
do_exit(int error_code) {
c010a5e4:	55                   	push   %ebp
c010a5e5:	89 e5                	mov    %esp,%ebp
c010a5e7:	83 ec 18             	sub    $0x18,%esp
    if (current == idleproc) {
c010a5ea:	8b 15 28 50 1c c0    	mov    0xc01c5028,%edx
c010a5f0:	a1 20 50 1c c0       	mov    0xc01c5020,%eax
c010a5f5:	39 c2                	cmp    %eax,%edx
c010a5f7:	75 17                	jne    c010a610 <do_exit+0x2c>
        panic("idleproc exit.\n");
c010a5f9:	83 ec 04             	sub    $0x4,%esp
c010a5fc:	68 1e f1 10 c0       	push   $0xc010f11e
c010a601:	68 ef 01 00 00       	push   $0x1ef
c010a606:	68 dc f0 10 c0       	push   $0xc010f0dc
c010a60b:	e8 ed 5d ff ff       	call   c01003fd <__panic>
    }
    if (current == initproc) {
c010a610:	8b 15 28 50 1c c0    	mov    0xc01c5028,%edx
c010a616:	a1 24 50 1c c0       	mov    0xc01c5024,%eax
c010a61b:	39 c2                	cmp    %eax,%edx
c010a61d:	75 17                	jne    c010a636 <do_exit+0x52>
        panic("initproc exit.\n");
c010a61f:	83 ec 04             	sub    $0x4,%esp
c010a622:	68 2e f1 10 c0       	push   $0xc010f12e
c010a627:	68 f2 01 00 00       	push   $0x1f2
c010a62c:	68 dc f0 10 c0       	push   $0xc010f0dc
c010a631:	e8 c7 5d ff ff       	call   c01003fd <__panic>
    }
    
    struct mm_struct *mm = current->mm;
c010a636:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010a63b:	8b 40 18             	mov    0x18(%eax),%eax
c010a63e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (mm != NULL) {
c010a641:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a645:	74 56                	je     c010a69d <do_exit+0xb9>
        lcr3(boot_cr3);
c010a647:	a1 f4 71 1c c0       	mov    0xc01c71f4,%eax
c010a64c:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010a64f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a652:	0f 22 d8             	mov    %eax,%cr3
        if (mm_count_dec(mm) == 0) {
c010a655:	83 ec 0c             	sub    $0xc,%esp
c010a658:	ff 75 f4             	pushl  -0xc(%ebp)
c010a65b:	e8 9d f4 ff ff       	call   c0109afd <mm_count_dec>
c010a660:	83 c4 10             	add    $0x10,%esp
c010a663:	85 c0                	test   %eax,%eax
c010a665:	75 2a                	jne    c010a691 <do_exit+0xad>
            exit_mmap(mm);
c010a667:	83 ec 0c             	sub    $0xc,%esp
c010a66a:	ff 75 f4             	pushl  -0xc(%ebp)
c010a66d:	e8 68 95 ff ff       	call   c0103bda <exit_mmap>
c010a672:	83 c4 10             	add    $0x10,%esp
            put_pgdir(mm);
c010a675:	83 ec 0c             	sub    $0xc,%esp
c010a678:	ff 75 f4             	pushl  -0xc(%ebp)
c010a67b:	e8 4b fc ff ff       	call   c010a2cb <put_pgdir>
c010a680:	83 c4 10             	add    $0x10,%esp
            mm_destroy(mm);
c010a683:	83 ec 0c             	sub    $0xc,%esp
c010a686:	ff 75 f4             	pushl  -0xc(%ebp)
c010a689:	e8 be 92 ff ff       	call   c010394c <mm_destroy>
c010a68e:	83 c4 10             	add    $0x10,%esp
        }
        current->mm = NULL;
c010a691:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010a696:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    current->state = PROC_ZOMBIE;
c010a69d:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010a6a2:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
    current->exit_code = error_code;
c010a6a8:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010a6ad:	8b 55 08             	mov    0x8(%ebp),%edx
c010a6b0:	89 90 8c 00 00 00    	mov    %edx,0x8c(%eax)
    
    bool intr_flag;
    struct proc_struct *proc;
    local_intr_save(intr_flag);
c010a6b6:	e8 03 f3 ff ff       	call   c01099be <__intr_save>
c010a6bb:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        proc = current->parent;
c010a6be:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010a6c3:	8b 40 14             	mov    0x14(%eax),%eax
c010a6c6:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (proc->wait_state == WT_CHILD) {
c010a6c9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a6cc:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010a6d2:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c010a6d7:	0f 85 be 00 00 00    	jne    c010a79b <do_exit+0x1b7>
            wakeup_proc(proc);
c010a6dd:	83 ec 0c             	sub    $0xc,%esp
c010a6e0:	ff 75 ec             	pushl  -0x14(%ebp)
c010a6e3:	e8 bc 0f 00 00       	call   c010b6a4 <wakeup_proc>
c010a6e8:	83 c4 10             	add    $0x10,%esp
        }
        while (current->cptr != NULL) {
c010a6eb:	e9 ab 00 00 00       	jmp    c010a79b <do_exit+0x1b7>
            proc = current->cptr;
c010a6f0:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010a6f5:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010a6fb:	89 45 ec             	mov    %eax,-0x14(%ebp)
            current->cptr = proc->optr;
c010a6fe:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010a703:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010a706:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c010a70c:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    
            proc->yptr = NULL;
c010a712:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a715:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
c010a71c:	00 00 00 
            if ((proc->optr = initproc->cptr) != NULL) {
c010a71f:	a1 24 50 1c c0       	mov    0xc01c5024,%eax
c010a724:	8b 90 94 00 00 00    	mov    0x94(%eax),%edx
c010a72a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a72d:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010a733:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a736:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010a73c:	85 c0                	test   %eax,%eax
c010a73e:	74 14                	je     c010a754 <do_exit+0x170>
                initproc->cptr->yptr = proc;
c010a740:	a1 24 50 1c c0       	mov    0xc01c5024,%eax
c010a745:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010a74b:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010a74e:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
            }
            proc->parent = initproc;
c010a754:	8b 15 24 50 1c c0    	mov    0xc01c5024,%edx
c010a75a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a75d:	89 50 14             	mov    %edx,0x14(%eax)
            initproc->cptr = proc;
c010a760:	a1 24 50 1c c0       	mov    0xc01c5024,%eax
c010a765:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010a768:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
            if (proc->state == PROC_ZOMBIE) {
c010a76e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a771:	8b 00                	mov    (%eax),%eax
c010a773:	83 f8 03             	cmp    $0x3,%eax
c010a776:	75 23                	jne    c010a79b <do_exit+0x1b7>
                if (initproc->wait_state == WT_CHILD) {
c010a778:	a1 24 50 1c c0       	mov    0xc01c5024,%eax
c010a77d:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010a783:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c010a788:	75 11                	jne    c010a79b <do_exit+0x1b7>
                    wakeup_proc(initproc);
c010a78a:	a1 24 50 1c c0       	mov    0xc01c5024,%eax
c010a78f:	83 ec 0c             	sub    $0xc,%esp
c010a792:	50                   	push   %eax
c010a793:	e8 0c 0f 00 00       	call   c010b6a4 <wakeup_proc>
c010a798:	83 c4 10             	add    $0x10,%esp
    {
        proc = current->parent;
        if (proc->wait_state == WT_CHILD) {
            wakeup_proc(proc);
        }
        while (current->cptr != NULL) {
c010a79b:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010a7a0:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010a7a6:	85 c0                	test   %eax,%eax
c010a7a8:	0f 85 42 ff ff ff    	jne    c010a6f0 <do_exit+0x10c>
                    wakeup_proc(initproc);
                }
            }
        }
    }
    local_intr_restore(intr_flag);
c010a7ae:	83 ec 0c             	sub    $0xc,%esp
c010a7b1:	ff 75 f0             	pushl  -0x10(%ebp)
c010a7b4:	e8 2f f2 ff ff       	call   c01099e8 <__intr_restore>
c010a7b9:	83 c4 10             	add    $0x10,%esp
    
    schedule();
c010a7bc:	e8 73 0f 00 00       	call   c010b734 <schedule>
    panic("do_exit will not return!! %d.\n", current->pid);
c010a7c1:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010a7c6:	8b 40 04             	mov    0x4(%eax),%eax
c010a7c9:	50                   	push   %eax
c010a7ca:	68 40 f1 10 c0       	push   $0xc010f140
c010a7cf:	68 1e 02 00 00       	push   $0x21e
c010a7d4:	68 dc f0 10 c0       	push   $0xc010f0dc
c010a7d9:	e8 1f 5c ff ff       	call   c01003fd <__panic>

c010a7de <load_icode>:
/* load_icode - load the content of binary program(ELF format) as the new content of current process
 * @binary:  the memory addr of the content of binary program
 * @size:  the size of the content of binary program
 */
static int
load_icode(unsigned char *binary, size_t size) {
c010a7de:	55                   	push   %ebp
c010a7df:	89 e5                	mov    %esp,%ebp
c010a7e1:	83 ec 58             	sub    $0x58,%esp
    if (current->mm != NULL) {
c010a7e4:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010a7e9:	8b 40 18             	mov    0x18(%eax),%eax
c010a7ec:	85 c0                	test   %eax,%eax
c010a7ee:	74 17                	je     c010a807 <load_icode+0x29>
        panic("load_icode: current->mm must be empty.\n");
c010a7f0:	83 ec 04             	sub    $0x4,%esp
c010a7f3:	68 60 f1 10 c0       	push   $0xc010f160
c010a7f8:	68 28 02 00 00       	push   $0x228
c010a7fd:	68 dc f0 10 c0       	push   $0xc010f0dc
c010a802:	e8 f6 5b ff ff       	call   c01003fd <__panic>
    }

    int ret = -E_NO_MEM;
c010a807:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    struct mm_struct *mm;
    //(1) create a new mm for current process
    if ((mm = mm_create()) == NULL) {
c010a80e:	e8 0d 8e ff ff       	call   c0103620 <mm_create>
c010a813:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010a816:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c010a81a:	0f 84 8d 05 00 00    	je     c010adad <load_icode+0x5cf>
        goto bad_mm;
    }
    //(2) create a new PDT, and mm->pgdir= kernel virtual addr of PDT
    if (setup_pgdir(mm) != 0) {
c010a820:	83 ec 0c             	sub    $0xc,%esp
c010a823:	ff 75 d0             	pushl  -0x30(%ebp)
c010a826:	e8 07 fa ff ff       	call   c010a232 <setup_pgdir>
c010a82b:	83 c4 10             	add    $0x10,%esp
c010a82e:	85 c0                	test   %eax,%eax
c010a830:	0f 85 66 05 00 00    	jne    c010ad9c <load_icode+0x5be>
        goto bad_pgdir_cleanup_mm;
    }
    //(3) copy TEXT/DATA section, build BSS parts in binary to memory space of process
    struct Page *page;
    //(3.1) get the file header of the bianry program (ELF format)
    struct elfhdr *elf = (struct elfhdr *)binary;
c010a836:	8b 45 08             	mov    0x8(%ebp),%eax
c010a839:	89 45 cc             	mov    %eax,-0x34(%ebp)
    //(3.2) get the entry of the program section headers of the bianry program (ELF format)
    struct proghdr *ph = (struct proghdr *)(binary + elf->e_phoff);
c010a83c:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010a83f:	8b 50 1c             	mov    0x1c(%eax),%edx
c010a842:	8b 45 08             	mov    0x8(%ebp),%eax
c010a845:	01 d0                	add    %edx,%eax
c010a847:	89 45 ec             	mov    %eax,-0x14(%ebp)
    //(3.3) This program is valid?
    if (elf->e_magic != ELF_MAGIC) {
c010a84a:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010a84d:	8b 00                	mov    (%eax),%eax
c010a84f:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
c010a854:	74 0c                	je     c010a862 <load_icode+0x84>
        ret = -E_INVAL_ELF;
c010a856:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
        goto bad_elf_cleanup_pgdir;
c010a85d:	e9 2a 05 00 00       	jmp    c010ad8c <load_icode+0x5ae>
    }

    uint32_t vm_flags, perm;
    struct proghdr *ph_end = ph + elf->e_phnum;
c010a862:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010a865:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c010a869:	0f b7 c0             	movzwl %ax,%eax
c010a86c:	c1 e0 05             	shl    $0x5,%eax
c010a86f:	89 c2                	mov    %eax,%edx
c010a871:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a874:	01 d0                	add    %edx,%eax
c010a876:	89 45 c8             	mov    %eax,-0x38(%ebp)
    for (; ph < ph_end; ph ++) {
c010a879:	e9 e0 02 00 00       	jmp    c010ab5e <load_icode+0x380>
    //(3.4) find every program section headers
        if (ph->p_type != ELF_PT_LOAD) {
c010a87e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a881:	8b 00                	mov    (%eax),%eax
c010a883:	83 f8 01             	cmp    $0x1,%eax
c010a886:	0f 85 c7 02 00 00    	jne    c010ab53 <load_icode+0x375>
            continue ;
        }
        if (ph->p_filesz > ph->p_memsz) {
c010a88c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a88f:	8b 50 10             	mov    0x10(%eax),%edx
c010a892:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a895:	8b 40 14             	mov    0x14(%eax),%eax
c010a898:	39 c2                	cmp    %eax,%edx
c010a89a:	76 0c                	jbe    c010a8a8 <load_icode+0xca>
            ret = -E_INVAL_ELF;
c010a89c:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
            goto bad_cleanup_mmap;
c010a8a3:	e9 d6 04 00 00       	jmp    c010ad7e <load_icode+0x5a0>
        }
        if (ph->p_filesz == 0) {
c010a8a8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a8ab:	8b 40 10             	mov    0x10(%eax),%eax
c010a8ae:	85 c0                	test   %eax,%eax
c010a8b0:	0f 84 a0 02 00 00    	je     c010ab56 <load_icode+0x378>
            continue ;
        }
    //(3.5) call mm_map fun to setup the new vma ( ph->p_va, ph->p_memsz)
        vm_flags = 0, perm = PTE_U;
c010a8b6:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c010a8bd:	c7 45 e4 04 00 00 00 	movl   $0x4,-0x1c(%ebp)
        if (ph->p_flags & ELF_PF_X) vm_flags |= VM_EXEC;
c010a8c4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a8c7:	8b 40 18             	mov    0x18(%eax),%eax
c010a8ca:	83 e0 01             	and    $0x1,%eax
c010a8cd:	85 c0                	test   %eax,%eax
c010a8cf:	74 04                	je     c010a8d5 <load_icode+0xf7>
c010a8d1:	83 4d e8 04          	orl    $0x4,-0x18(%ebp)
        if (ph->p_flags & ELF_PF_W) vm_flags |= VM_WRITE;
c010a8d5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a8d8:	8b 40 18             	mov    0x18(%eax),%eax
c010a8db:	83 e0 02             	and    $0x2,%eax
c010a8de:	85 c0                	test   %eax,%eax
c010a8e0:	74 04                	je     c010a8e6 <load_icode+0x108>
c010a8e2:	83 4d e8 02          	orl    $0x2,-0x18(%ebp)
        if (ph->p_flags & ELF_PF_R) vm_flags |= VM_READ;
c010a8e6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a8e9:	8b 40 18             	mov    0x18(%eax),%eax
c010a8ec:	83 e0 04             	and    $0x4,%eax
c010a8ef:	85 c0                	test   %eax,%eax
c010a8f1:	74 04                	je     c010a8f7 <load_icode+0x119>
c010a8f3:	83 4d e8 01          	orl    $0x1,-0x18(%ebp)
        if (vm_flags & VM_WRITE) perm |= PTE_W;
c010a8f7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a8fa:	83 e0 02             	and    $0x2,%eax
c010a8fd:	85 c0                	test   %eax,%eax
c010a8ff:	74 04                	je     c010a905 <load_icode+0x127>
c010a901:	83 4d e4 02          	orl    $0x2,-0x1c(%ebp)
        if ((ret = mm_map(mm, ph->p_va, ph->p_memsz, vm_flags, NULL)) != 0) {
c010a905:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a908:	8b 50 14             	mov    0x14(%eax),%edx
c010a90b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a90e:	8b 40 08             	mov    0x8(%eax),%eax
c010a911:	83 ec 0c             	sub    $0xc,%esp
c010a914:	6a 00                	push   $0x0
c010a916:	ff 75 e8             	pushl  -0x18(%ebp)
c010a919:	52                   	push   %edx
c010a91a:	50                   	push   %eax
c010a91b:	ff 75 d0             	pushl  -0x30(%ebp)
c010a91e:	e8 c8 90 ff ff       	call   c01039eb <mm_map>
c010a923:	83 c4 20             	add    $0x20,%esp
c010a926:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a929:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a92d:	0f 85 41 04 00 00    	jne    c010ad74 <load_icode+0x596>
            goto bad_cleanup_mmap;
        }
        unsigned char *from = binary + ph->p_offset;
c010a933:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a936:	8b 50 04             	mov    0x4(%eax),%edx
c010a939:	8b 45 08             	mov    0x8(%ebp),%eax
c010a93c:	01 d0                	add    %edx,%eax
c010a93e:	89 45 e0             	mov    %eax,-0x20(%ebp)
        size_t off, size;
        uintptr_t start = ph->p_va, end, la = ROUNDDOWN(start, PGSIZE);
c010a941:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a944:	8b 40 08             	mov    0x8(%eax),%eax
c010a947:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010a94a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010a94d:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c010a950:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010a953:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010a958:	89 45 d4             	mov    %eax,-0x2c(%ebp)

        ret = -E_NO_MEM;
c010a95b:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
        end = ph->p_va + ph->p_filesz;
c010a962:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a965:	8b 50 08             	mov    0x8(%eax),%edx
c010a968:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a96b:	8b 40 10             	mov    0x10(%eax),%eax
c010a96e:	01 d0                	add    %edx,%eax
c010a970:	89 45 c0             	mov    %eax,-0x40(%ebp)
     //(3.6.1) copy TEXT/DATA section of bianry program
        while (start < end) {
c010a973:	e9 84 00 00 00       	jmp    c010a9fc <load_icode+0x21e>
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
c010a978:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010a97b:	8b 40 0c             	mov    0xc(%eax),%eax
c010a97e:	83 ec 04             	sub    $0x4,%esp
c010a981:	ff 75 e4             	pushl  -0x1c(%ebp)
c010a984:	ff 75 d4             	pushl  -0x2c(%ebp)
c010a987:	50                   	push   %eax
c010a988:	e8 3b d4 ff ff       	call   c0107dc8 <pgdir_alloc_page>
c010a98d:	83 c4 10             	add    $0x10,%esp
c010a990:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010a993:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010a997:	0f 84 da 03 00 00    	je     c010ad77 <load_icode+0x599>
                goto bad_cleanup_mmap;
            }
            off = start - la, size = PGSIZE - off, la += PGSIZE;
c010a99d:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010a9a0:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c010a9a3:	89 45 bc             	mov    %eax,-0x44(%ebp)
c010a9a6:	b8 00 10 00 00       	mov    $0x1000,%eax
c010a9ab:	2b 45 bc             	sub    -0x44(%ebp),%eax
c010a9ae:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010a9b1:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
            if (end < la) {
c010a9b8:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010a9bb:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010a9be:	73 09                	jae    c010a9c9 <load_icode+0x1eb>
                size -= la - end;
c010a9c0:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010a9c3:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c010a9c6:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memcpy(page2kva(page) + off, from, size);
c010a9c9:	83 ec 0c             	sub    $0xc,%esp
c010a9cc:	ff 75 f0             	pushl  -0x10(%ebp)
c010a9cf:	e8 8b f0 ff ff       	call   c0109a5f <page2kva>
c010a9d4:	83 c4 10             	add    $0x10,%esp
c010a9d7:	89 c2                	mov    %eax,%edx
c010a9d9:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010a9dc:	01 d0                	add    %edx,%eax
c010a9de:	83 ec 04             	sub    $0x4,%esp
c010a9e1:	ff 75 dc             	pushl  -0x24(%ebp)
c010a9e4:	ff 75 e0             	pushl  -0x20(%ebp)
c010a9e7:	50                   	push   %eax
c010a9e8:	e8 82 1a 00 00       	call   c010c46f <memcpy>
c010a9ed:	83 c4 10             	add    $0x10,%esp
            start += size, from += size;
c010a9f0:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a9f3:	01 45 d8             	add    %eax,-0x28(%ebp)
c010a9f6:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a9f9:	01 45 e0             	add    %eax,-0x20(%ebp)
        ret = -E_NO_MEM;

     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
        end = ph->p_va + ph->p_filesz;
     //(3.6.1) copy TEXT/DATA section of bianry program
        while (start < end) {
c010a9fc:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010a9ff:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010aa02:	0f 82 70 ff ff ff    	jb     c010a978 <load_icode+0x19a>
            memcpy(page2kva(page) + off, from, size);
            start += size, from += size;
        }

      //(3.6.2) build BSS section of binary program
        end = ph->p_va + ph->p_memsz;
c010aa08:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aa0b:	8b 50 08             	mov    0x8(%eax),%edx
c010aa0e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aa11:	8b 40 14             	mov    0x14(%eax),%eax
c010aa14:	01 d0                	add    %edx,%eax
c010aa16:	89 45 c0             	mov    %eax,-0x40(%ebp)
        if (start < la) {
c010aa19:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010aa1c:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010aa1f:	0f 83 20 01 00 00    	jae    c010ab45 <load_icode+0x367>
            /* ph->p_memsz == ph->p_filesz */
            if (start == end) {
c010aa25:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010aa28:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010aa2b:	0f 84 28 01 00 00    	je     c010ab59 <load_icode+0x37b>
                continue ;
            }
            off = start + PGSIZE - la, size = PGSIZE - off;
c010aa31:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010aa34:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c010aa37:	05 00 10 00 00       	add    $0x1000,%eax
c010aa3c:	89 45 bc             	mov    %eax,-0x44(%ebp)
c010aa3f:	b8 00 10 00 00       	mov    $0x1000,%eax
c010aa44:	2b 45 bc             	sub    -0x44(%ebp),%eax
c010aa47:	89 45 dc             	mov    %eax,-0x24(%ebp)
            if (end < la) {
c010aa4a:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010aa4d:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010aa50:	73 09                	jae    c010aa5b <load_icode+0x27d>
                size -= la - end;
c010aa52:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010aa55:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c010aa58:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
c010aa5b:	83 ec 0c             	sub    $0xc,%esp
c010aa5e:	ff 75 f0             	pushl  -0x10(%ebp)
c010aa61:	e8 f9 ef ff ff       	call   c0109a5f <page2kva>
c010aa66:	83 c4 10             	add    $0x10,%esp
c010aa69:	89 c2                	mov    %eax,%edx
c010aa6b:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010aa6e:	01 d0                	add    %edx,%eax
c010aa70:	83 ec 04             	sub    $0x4,%esp
c010aa73:	ff 75 dc             	pushl  -0x24(%ebp)
c010aa76:	6a 00                	push   $0x0
c010aa78:	50                   	push   %eax
c010aa79:	e8 0e 19 00 00       	call   c010c38c <memset>
c010aa7e:	83 c4 10             	add    $0x10,%esp
            start += size;
c010aa81:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010aa84:	01 45 d8             	add    %eax,-0x28(%ebp)
            assert((end < la && start == end) || (end >= la && start == la));
c010aa87:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010aa8a:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010aa8d:	73 0c                	jae    c010aa9b <load_icode+0x2bd>
c010aa8f:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010aa92:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010aa95:	0f 84 aa 00 00 00    	je     c010ab45 <load_icode+0x367>
c010aa9b:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010aa9e:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010aaa1:	72 0c                	jb     c010aaaf <load_icode+0x2d1>
c010aaa3:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010aaa6:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010aaa9:	0f 84 96 00 00 00    	je     c010ab45 <load_icode+0x367>
c010aaaf:	68 88 f1 10 c0       	push   $0xc010f188
c010aab4:	68 09 f1 10 c0       	push   $0xc010f109
c010aab9:	68 7a 02 00 00       	push   $0x27a
c010aabe:	68 dc f0 10 c0       	push   $0xc010f0dc
c010aac3:	e8 35 59 ff ff       	call   c01003fd <__panic>
        }
        while (start < end) {
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
c010aac8:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010aacb:	8b 40 0c             	mov    0xc(%eax),%eax
c010aace:	83 ec 04             	sub    $0x4,%esp
c010aad1:	ff 75 e4             	pushl  -0x1c(%ebp)
c010aad4:	ff 75 d4             	pushl  -0x2c(%ebp)
c010aad7:	50                   	push   %eax
c010aad8:	e8 eb d2 ff ff       	call   c0107dc8 <pgdir_alloc_page>
c010aadd:	83 c4 10             	add    $0x10,%esp
c010aae0:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010aae3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010aae7:	0f 84 8d 02 00 00    	je     c010ad7a <load_icode+0x59c>
                goto bad_cleanup_mmap;
            }
            off = start - la, size = PGSIZE - off, la += PGSIZE;
c010aaed:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010aaf0:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c010aaf3:	89 45 bc             	mov    %eax,-0x44(%ebp)
c010aaf6:	b8 00 10 00 00       	mov    $0x1000,%eax
c010aafb:	2b 45 bc             	sub    -0x44(%ebp),%eax
c010aafe:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010ab01:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
            if (end < la) {
c010ab08:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010ab0b:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010ab0e:	73 09                	jae    c010ab19 <load_icode+0x33b>
                size -= la - end;
c010ab10:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010ab13:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c010ab16:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
c010ab19:	83 ec 0c             	sub    $0xc,%esp
c010ab1c:	ff 75 f0             	pushl  -0x10(%ebp)
c010ab1f:	e8 3b ef ff ff       	call   c0109a5f <page2kva>
c010ab24:	83 c4 10             	add    $0x10,%esp
c010ab27:	89 c2                	mov    %eax,%edx
c010ab29:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010ab2c:	01 d0                	add    %edx,%eax
c010ab2e:	83 ec 04             	sub    $0x4,%esp
c010ab31:	ff 75 dc             	pushl  -0x24(%ebp)
c010ab34:	6a 00                	push   $0x0
c010ab36:	50                   	push   %eax
c010ab37:	e8 50 18 00 00       	call   c010c38c <memset>
c010ab3c:	83 c4 10             	add    $0x10,%esp
            start += size;
c010ab3f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010ab42:	01 45 d8             	add    %eax,-0x28(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
            start += size;
            assert((end < la && start == end) || (end >= la && start == la));
        }
        while (start < end) {
c010ab45:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010ab48:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010ab4b:	0f 82 77 ff ff ff    	jb     c010aac8 <load_icode+0x2ea>
c010ab51:	eb 07                	jmp    c010ab5a <load_icode+0x37c>
    uint32_t vm_flags, perm;
    struct proghdr *ph_end = ph + elf->e_phnum;
    for (; ph < ph_end; ph ++) {
    //(3.4) find every program section headers
        if (ph->p_type != ELF_PT_LOAD) {
            continue ;
c010ab53:	90                   	nop
c010ab54:	eb 04                	jmp    c010ab5a <load_icode+0x37c>
        if (ph->p_filesz > ph->p_memsz) {
            ret = -E_INVAL_ELF;
            goto bad_cleanup_mmap;
        }
        if (ph->p_filesz == 0) {
            continue ;
c010ab56:	90                   	nop
c010ab57:	eb 01                	jmp    c010ab5a <load_icode+0x37c>
      //(3.6.2) build BSS section of binary program
        end = ph->p_va + ph->p_memsz;
        if (start < la) {
            /* ph->p_memsz == ph->p_filesz */
            if (start == end) {
                continue ;
c010ab59:	90                   	nop
        goto bad_elf_cleanup_pgdir;
    }

    uint32_t vm_flags, perm;
    struct proghdr *ph_end = ph + elf->e_phnum;
    for (; ph < ph_end; ph ++) {
c010ab5a:	83 45 ec 20          	addl   $0x20,-0x14(%ebp)
c010ab5e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ab61:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c010ab64:	0f 82 14 fd ff ff    	jb     c010a87e <load_icode+0xa0>
            memset(page2kva(page) + off, 0, size);
            start += size;
        }
    }
    //(4) build user stack memory
    vm_flags = VM_READ | VM_WRITE | VM_STACK;
c010ab6a:	c7 45 e8 0b 00 00 00 	movl   $0xb,-0x18(%ebp)
    if ((ret = mm_map(mm, USTACKTOP - USTACKSIZE, USTACKSIZE, vm_flags, NULL)) != 0) {
c010ab71:	83 ec 0c             	sub    $0xc,%esp
c010ab74:	6a 00                	push   $0x0
c010ab76:	ff 75 e8             	pushl  -0x18(%ebp)
c010ab79:	68 00 00 10 00       	push   $0x100000
c010ab7e:	68 00 00 f0 af       	push   $0xaff00000
c010ab83:	ff 75 d0             	pushl  -0x30(%ebp)
c010ab86:	e8 60 8e ff ff       	call   c01039eb <mm_map>
c010ab8b:	83 c4 20             	add    $0x20,%esp
c010ab8e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ab91:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ab95:	0f 85 e2 01 00 00    	jne    c010ad7d <load_icode+0x59f>
        goto bad_cleanup_mmap;
    }
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-PGSIZE , PTE_USER) != NULL);
c010ab9b:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010ab9e:	8b 40 0c             	mov    0xc(%eax),%eax
c010aba1:	83 ec 04             	sub    $0x4,%esp
c010aba4:	6a 07                	push   $0x7
c010aba6:	68 00 f0 ff af       	push   $0xaffff000
c010abab:	50                   	push   %eax
c010abac:	e8 17 d2 ff ff       	call   c0107dc8 <pgdir_alloc_page>
c010abb1:	83 c4 10             	add    $0x10,%esp
c010abb4:	85 c0                	test   %eax,%eax
c010abb6:	75 19                	jne    c010abd1 <load_icode+0x3f3>
c010abb8:	68 c4 f1 10 c0       	push   $0xc010f1c4
c010abbd:	68 09 f1 10 c0       	push   $0xc010f109
c010abc2:	68 8d 02 00 00       	push   $0x28d
c010abc7:	68 dc f0 10 c0       	push   $0xc010f0dc
c010abcc:	e8 2c 58 ff ff       	call   c01003fd <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-2*PGSIZE , PTE_USER) != NULL);
c010abd1:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010abd4:	8b 40 0c             	mov    0xc(%eax),%eax
c010abd7:	83 ec 04             	sub    $0x4,%esp
c010abda:	6a 07                	push   $0x7
c010abdc:	68 00 e0 ff af       	push   $0xafffe000
c010abe1:	50                   	push   %eax
c010abe2:	e8 e1 d1 ff ff       	call   c0107dc8 <pgdir_alloc_page>
c010abe7:	83 c4 10             	add    $0x10,%esp
c010abea:	85 c0                	test   %eax,%eax
c010abec:	75 19                	jne    c010ac07 <load_icode+0x429>
c010abee:	68 08 f2 10 c0       	push   $0xc010f208
c010abf3:	68 09 f1 10 c0       	push   $0xc010f109
c010abf8:	68 8e 02 00 00       	push   $0x28e
c010abfd:	68 dc f0 10 c0       	push   $0xc010f0dc
c010ac02:	e8 f6 57 ff ff       	call   c01003fd <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-3*PGSIZE , PTE_USER) != NULL);
c010ac07:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010ac0a:	8b 40 0c             	mov    0xc(%eax),%eax
c010ac0d:	83 ec 04             	sub    $0x4,%esp
c010ac10:	6a 07                	push   $0x7
c010ac12:	68 00 d0 ff af       	push   $0xafffd000
c010ac17:	50                   	push   %eax
c010ac18:	e8 ab d1 ff ff       	call   c0107dc8 <pgdir_alloc_page>
c010ac1d:	83 c4 10             	add    $0x10,%esp
c010ac20:	85 c0                	test   %eax,%eax
c010ac22:	75 19                	jne    c010ac3d <load_icode+0x45f>
c010ac24:	68 4c f2 10 c0       	push   $0xc010f24c
c010ac29:	68 09 f1 10 c0       	push   $0xc010f109
c010ac2e:	68 8f 02 00 00       	push   $0x28f
c010ac33:	68 dc f0 10 c0       	push   $0xc010f0dc
c010ac38:	e8 c0 57 ff ff       	call   c01003fd <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-4*PGSIZE , PTE_USER) != NULL);
c010ac3d:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010ac40:	8b 40 0c             	mov    0xc(%eax),%eax
c010ac43:	83 ec 04             	sub    $0x4,%esp
c010ac46:	6a 07                	push   $0x7
c010ac48:	68 00 c0 ff af       	push   $0xafffc000
c010ac4d:	50                   	push   %eax
c010ac4e:	e8 75 d1 ff ff       	call   c0107dc8 <pgdir_alloc_page>
c010ac53:	83 c4 10             	add    $0x10,%esp
c010ac56:	85 c0                	test   %eax,%eax
c010ac58:	75 19                	jne    c010ac73 <load_icode+0x495>
c010ac5a:	68 90 f2 10 c0       	push   $0xc010f290
c010ac5f:	68 09 f1 10 c0       	push   $0xc010f109
c010ac64:	68 90 02 00 00       	push   $0x290
c010ac69:	68 dc f0 10 c0       	push   $0xc010f0dc
c010ac6e:	e8 8a 57 ff ff       	call   c01003fd <__panic>
    
    //(5) set current process's mm, sr3, and set CR3 reg = physical addr of Page Directory
    mm_count_inc(mm);
c010ac73:	83 ec 0c             	sub    $0xc,%esp
c010ac76:	ff 75 d0             	pushl  -0x30(%ebp)
c010ac79:	e8 65 ee ff ff       	call   c0109ae3 <mm_count_inc>
c010ac7e:	83 c4 10             	add    $0x10,%esp
    current->mm = mm;
c010ac81:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010ac86:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010ac89:	89 50 18             	mov    %edx,0x18(%eax)
    current->cr3 = PADDR(mm->pgdir);
c010ac8c:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010ac91:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010ac94:	8b 52 0c             	mov    0xc(%edx),%edx
c010ac97:	89 55 b8             	mov    %edx,-0x48(%ebp)
c010ac9a:	81 7d b8 ff ff ff bf 	cmpl   $0xbfffffff,-0x48(%ebp)
c010aca1:	77 17                	ja     c010acba <load_icode+0x4dc>
c010aca3:	ff 75 b8             	pushl  -0x48(%ebp)
c010aca6:	68 b8 f0 10 c0       	push   $0xc010f0b8
c010acab:	68 95 02 00 00       	push   $0x295
c010acb0:	68 dc f0 10 c0       	push   $0xc010f0dc
c010acb5:	e8 43 57 ff ff       	call   c01003fd <__panic>
c010acba:	8b 55 b8             	mov    -0x48(%ebp),%edx
c010acbd:	81 c2 00 00 00 40    	add    $0x40000000,%edx
c010acc3:	89 50 40             	mov    %edx,0x40(%eax)
    lcr3(PADDR(mm->pgdir));
c010acc6:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010acc9:	8b 40 0c             	mov    0xc(%eax),%eax
c010accc:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c010accf:	81 7d b4 ff ff ff bf 	cmpl   $0xbfffffff,-0x4c(%ebp)
c010acd6:	77 17                	ja     c010acef <load_icode+0x511>
c010acd8:	ff 75 b4             	pushl  -0x4c(%ebp)
c010acdb:	68 b8 f0 10 c0       	push   $0xc010f0b8
c010ace0:	68 96 02 00 00       	push   $0x296
c010ace5:	68 dc f0 10 c0       	push   $0xc010f0dc
c010acea:	e8 0e 57 ff ff       	call   c01003fd <__panic>
c010acef:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010acf2:	05 00 00 00 40       	add    $0x40000000,%eax
c010acf7:	89 45 ac             	mov    %eax,-0x54(%ebp)
c010acfa:	8b 45 ac             	mov    -0x54(%ebp),%eax
c010acfd:	0f 22 d8             	mov    %eax,%cr3

    //(6) setup trapframe for user environment
    struct trapframe *tf = current->tf;
c010ad00:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010ad05:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ad08:	89 45 b0             	mov    %eax,-0x50(%ebp)
    memset(tf, 0, sizeof(struct trapframe));
c010ad0b:	83 ec 04             	sub    $0x4,%esp
c010ad0e:	6a 4c                	push   $0x4c
c010ad10:	6a 00                	push   $0x0
c010ad12:	ff 75 b0             	pushl  -0x50(%ebp)
c010ad15:	e8 72 16 00 00       	call   c010c38c <memset>
c010ad1a:	83 c4 10             	add    $0x10,%esp
     *          tf_ds=tf_es=tf_ss should be USER_DS segment
     *          tf_esp should be the top addr of user stack (USTACKTOP)
     *          tf_eip should be the entry point of this binary program (elf->e_entry)
     *          tf_eflags should be set to enable computer to produce Interrupt
     */
    tf->tf_cs = USER_CS;
c010ad1d:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010ad20:	66 c7 40 3c 1b 00    	movw   $0x1b,0x3c(%eax)
    tf->tf_ds = USER_DS;
c010ad26:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010ad29:	66 c7 40 2c 23 00    	movw   $0x23,0x2c(%eax)
    tf->tf_es = USER_DS;
c010ad2f:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010ad32:	66 c7 40 28 23 00    	movw   $0x23,0x28(%eax)
    tf->tf_ss = USER_DS;
c010ad38:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010ad3b:	66 c7 40 48 23 00    	movw   $0x23,0x48(%eax)
    tf->tf_esp = USTACKTOP;
c010ad41:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010ad44:	c7 40 44 00 00 00 b0 	movl   $0xb0000000,0x44(%eax)
    tf->tf_eip = elf->e_entry;
c010ad4b:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010ad4e:	8b 50 18             	mov    0x18(%eax),%edx
c010ad51:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010ad54:	89 50 38             	mov    %edx,0x38(%eax)
    tf->tf_eflags |= FL_IF;     // enable intr
c010ad57:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010ad5a:	8b 40 40             	mov    0x40(%eax),%eax
c010ad5d:	80 cc 02             	or     $0x2,%ah
c010ad60:	89 c2                	mov    %eax,%edx
c010ad62:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010ad65:	89 50 40             	mov    %edx,0x40(%eax)
    ret = 0;
c010ad68:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
out:
    return ret;
c010ad6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ad72:	eb 3c                	jmp    c010adb0 <load_icode+0x5d2>
        if (ph->p_flags & ELF_PF_X) vm_flags |= VM_EXEC;
        if (ph->p_flags & ELF_PF_W) vm_flags |= VM_WRITE;
        if (ph->p_flags & ELF_PF_R) vm_flags |= VM_READ;
        if (vm_flags & VM_WRITE) perm |= PTE_W;
        if ((ret = mm_map(mm, ph->p_va, ph->p_memsz, vm_flags, NULL)) != 0) {
            goto bad_cleanup_mmap;
c010ad74:	90                   	nop
c010ad75:	eb 07                	jmp    c010ad7e <load_icode+0x5a0>
     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
        end = ph->p_va + ph->p_filesz;
     //(3.6.1) copy TEXT/DATA section of bianry program
        while (start < end) {
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
                goto bad_cleanup_mmap;
c010ad77:	90                   	nop
c010ad78:	eb 04                	jmp    c010ad7e <load_icode+0x5a0>
            start += size;
            assert((end < la && start == end) || (end >= la && start == la));
        }
        while (start < end) {
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
                goto bad_cleanup_mmap;
c010ad7a:	90                   	nop
c010ad7b:	eb 01                	jmp    c010ad7e <load_icode+0x5a0>
        }
    }
    //(4) build user stack memory
    vm_flags = VM_READ | VM_WRITE | VM_STACK;
    if ((ret = mm_map(mm, USTACKTOP - USTACKSIZE, USTACKSIZE, vm_flags, NULL)) != 0) {
        goto bad_cleanup_mmap;
c010ad7d:	90                   	nop
    tf->tf_eflags |= FL_IF;     // enable intr
    ret = 0;
out:
    return ret;
bad_cleanup_mmap:
    exit_mmap(mm);
c010ad7e:	83 ec 0c             	sub    $0xc,%esp
c010ad81:	ff 75 d0             	pushl  -0x30(%ebp)
c010ad84:	e8 51 8e ff ff       	call   c0103bda <exit_mmap>
c010ad89:	83 c4 10             	add    $0x10,%esp
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
c010ad8c:	83 ec 0c             	sub    $0xc,%esp
c010ad8f:	ff 75 d0             	pushl  -0x30(%ebp)
c010ad92:	e8 34 f5 ff ff       	call   c010a2cb <put_pgdir>
c010ad97:	83 c4 10             	add    $0x10,%esp
c010ad9a:	eb 01                	jmp    c010ad9d <load_icode+0x5bf>
    if ((mm = mm_create()) == NULL) {
        goto bad_mm;
    }
    //(2) create a new PDT, and mm->pgdir= kernel virtual addr of PDT
    if (setup_pgdir(mm) != 0) {
        goto bad_pgdir_cleanup_mm;
c010ad9c:	90                   	nop
bad_cleanup_mmap:
    exit_mmap(mm);
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
c010ad9d:	83 ec 0c             	sub    $0xc,%esp
c010ada0:	ff 75 d0             	pushl  -0x30(%ebp)
c010ada3:	e8 a4 8b ff ff       	call   c010394c <mm_destroy>
c010ada8:	83 c4 10             	add    $0x10,%esp
bad_mm:
    goto out;
c010adab:	eb c2                	jmp    c010ad6f <load_icode+0x591>

    int ret = -E_NO_MEM;
    struct mm_struct *mm;
    //(1) create a new mm for current process
    if ((mm = mm_create()) == NULL) {
        goto bad_mm;
c010adad:	90                   	nop
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
bad_mm:
    goto out;
c010adae:	eb bf                	jmp    c010ad6f <load_icode+0x591>
}
c010adb0:	c9                   	leave  
c010adb1:	c3                   	ret    

c010adb2 <do_execve>:

// do_execve - call exit_mmap(mm)&put_pgdir(mm) to reclaim memory space of current process
//           - call load_icode to setup new memory space accroding binary prog.
int
do_execve(const char *name, size_t len, unsigned char *binary, size_t size) {
c010adb2:	55                   	push   %ebp
c010adb3:	89 e5                	mov    %esp,%ebp
c010adb5:	83 ec 48             	sub    $0x48,%esp
    struct mm_struct *mm = current->mm;
c010adb8:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010adbd:	8b 40 18             	mov    0x18(%eax),%eax
c010adc0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!user_mem_check(mm, (uintptr_t)name, len, 0)) {
c010adc3:	8b 45 08             	mov    0x8(%ebp),%eax
c010adc6:	6a 00                	push   $0x0
c010adc8:	ff 75 0c             	pushl  0xc(%ebp)
c010adcb:	50                   	push   %eax
c010adcc:	ff 75 f4             	pushl  -0xc(%ebp)
c010adcf:	e8 97 97 ff ff       	call   c010456b <user_mem_check>
c010add4:	83 c4 10             	add    $0x10,%esp
c010add7:	85 c0                	test   %eax,%eax
c010add9:	75 0a                	jne    c010ade5 <do_execve+0x33>
        return -E_INVAL;
c010addb:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010ade0:	e9 ed 00 00 00       	jmp    c010aed2 <do_execve+0x120>
    }
    if (len > PROC_NAME_LEN) {
c010ade5:	83 7d 0c 32          	cmpl   $0x32,0xc(%ebp)
c010ade9:	76 07                	jbe    c010adf2 <do_execve+0x40>
        len = PROC_NAME_LEN;
c010adeb:	c7 45 0c 32 00 00 00 	movl   $0x32,0xc(%ebp)
    }

    char local_name[PROC_NAME_LEN + 1];
    memset(local_name, 0, sizeof(local_name));
c010adf2:	83 ec 04             	sub    $0x4,%esp
c010adf5:	6a 33                	push   $0x33
c010adf7:	6a 00                	push   $0x0
c010adf9:	8d 45 b9             	lea    -0x47(%ebp),%eax
c010adfc:	50                   	push   %eax
c010adfd:	e8 8a 15 00 00       	call   c010c38c <memset>
c010ae02:	83 c4 10             	add    $0x10,%esp
    memcpy(local_name, name, len);
c010ae05:	83 ec 04             	sub    $0x4,%esp
c010ae08:	ff 75 0c             	pushl  0xc(%ebp)
c010ae0b:	ff 75 08             	pushl  0x8(%ebp)
c010ae0e:	8d 45 b9             	lea    -0x47(%ebp),%eax
c010ae11:	50                   	push   %eax
c010ae12:	e8 58 16 00 00       	call   c010c46f <memcpy>
c010ae17:	83 c4 10             	add    $0x10,%esp

    if (mm != NULL) {
c010ae1a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ae1e:	74 56                	je     c010ae76 <do_execve+0xc4>
        lcr3(boot_cr3);
c010ae20:	a1 f4 71 1c c0       	mov    0xc01c71f4,%eax
c010ae25:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010ae28:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ae2b:	0f 22 d8             	mov    %eax,%cr3
        if (mm_count_dec(mm) == 0) {
c010ae2e:	83 ec 0c             	sub    $0xc,%esp
c010ae31:	ff 75 f4             	pushl  -0xc(%ebp)
c010ae34:	e8 c4 ec ff ff       	call   c0109afd <mm_count_dec>
c010ae39:	83 c4 10             	add    $0x10,%esp
c010ae3c:	85 c0                	test   %eax,%eax
c010ae3e:	75 2a                	jne    c010ae6a <do_execve+0xb8>
            exit_mmap(mm);
c010ae40:	83 ec 0c             	sub    $0xc,%esp
c010ae43:	ff 75 f4             	pushl  -0xc(%ebp)
c010ae46:	e8 8f 8d ff ff       	call   c0103bda <exit_mmap>
c010ae4b:	83 c4 10             	add    $0x10,%esp
            put_pgdir(mm);
c010ae4e:	83 ec 0c             	sub    $0xc,%esp
c010ae51:	ff 75 f4             	pushl  -0xc(%ebp)
c010ae54:	e8 72 f4 ff ff       	call   c010a2cb <put_pgdir>
c010ae59:	83 c4 10             	add    $0x10,%esp
            mm_destroy(mm);
c010ae5c:	83 ec 0c             	sub    $0xc,%esp
c010ae5f:	ff 75 f4             	pushl  -0xc(%ebp)
c010ae62:	e8 e5 8a ff ff       	call   c010394c <mm_destroy>
c010ae67:	83 c4 10             	add    $0x10,%esp
        }
        current->mm = NULL;
c010ae6a:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010ae6f:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    int ret;
    if ((ret = load_icode(binary, size)) != 0) {
c010ae76:	83 ec 08             	sub    $0x8,%esp
c010ae79:	ff 75 14             	pushl  0x14(%ebp)
c010ae7c:	ff 75 10             	pushl  0x10(%ebp)
c010ae7f:	e8 5a f9 ff ff       	call   c010a7de <load_icode>
c010ae84:	83 c4 10             	add    $0x10,%esp
c010ae87:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010ae8a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010ae8e:	75 1c                	jne    c010aeac <do_execve+0xfa>
        goto execve_exit;
    }
    set_proc_name(current, local_name);
c010ae90:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010ae95:	83 ec 08             	sub    $0x8,%esp
c010ae98:	8d 55 b9             	lea    -0x47(%ebp),%edx
c010ae9b:	52                   	push   %edx
c010ae9c:	50                   	push   %eax
c010ae9d:	e8 43 ee ff ff       	call   c0109ce5 <set_proc_name>
c010aea2:	83 c4 10             	add    $0x10,%esp
    return 0;
c010aea5:	b8 00 00 00 00       	mov    $0x0,%eax
c010aeaa:	eb 26                	jmp    c010aed2 <do_execve+0x120>
        }
        current->mm = NULL;
    }
    int ret;
    if ((ret = load_icode(binary, size)) != 0) {
        goto execve_exit;
c010aeac:	90                   	nop
    }
    set_proc_name(current, local_name);
    return 0;

execve_exit:
    do_exit(ret);
c010aead:	83 ec 0c             	sub    $0xc,%esp
c010aeb0:	ff 75 f0             	pushl  -0x10(%ebp)
c010aeb3:	e8 2c f7 ff ff       	call   c010a5e4 <do_exit>
c010aeb8:	83 c4 10             	add    $0x10,%esp
    panic("already exit: %e.\n", ret);
c010aebb:	ff 75 f0             	pushl  -0x10(%ebp)
c010aebe:	68 d3 f2 10 c0       	push   $0xc010f2d3
c010aec3:	68 da 02 00 00       	push   $0x2da
c010aec8:	68 dc f0 10 c0       	push   $0xc010f0dc
c010aecd:	e8 2b 55 ff ff       	call   c01003fd <__panic>
}
c010aed2:	c9                   	leave  
c010aed3:	c3                   	ret    

c010aed4 <do_yield>:

// do_yield - ask the scheduler to reschedule
int
do_yield(void) {
c010aed4:	55                   	push   %ebp
c010aed5:	89 e5                	mov    %esp,%ebp
    current->need_resched = 1;
c010aed7:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010aedc:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    return 0;
c010aee3:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010aee8:	5d                   	pop    %ebp
c010aee9:	c3                   	ret    

c010aeea <do_wait>:

// do_wait - wait one OR any children with PROC_ZOMBIE state, and free memory space of kernel stack
//         - proc struct of this child.
// NOTE: only after do_wait function, all resources of the child proces are free.
int
do_wait(int pid, int *code_store) {
c010aeea:	55                   	push   %ebp
c010aeeb:	89 e5                	mov    %esp,%ebp
c010aeed:	83 ec 18             	sub    $0x18,%esp
    struct mm_struct *mm = current->mm;
c010aef0:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010aef5:	8b 40 18             	mov    0x18(%eax),%eax
c010aef8:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (code_store != NULL) {
c010aefb:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010aeff:	74 21                	je     c010af22 <do_wait+0x38>
        if (!user_mem_check(mm, (uintptr_t)code_store, sizeof(int), 1)) {
c010af01:	8b 45 0c             	mov    0xc(%ebp),%eax
c010af04:	6a 01                	push   $0x1
c010af06:	6a 04                	push   $0x4
c010af08:	50                   	push   %eax
c010af09:	ff 75 ec             	pushl  -0x14(%ebp)
c010af0c:	e8 5a 96 ff ff       	call   c010456b <user_mem_check>
c010af11:	83 c4 10             	add    $0x10,%esp
c010af14:	85 c0                	test   %eax,%eax
c010af16:	75 0a                	jne    c010af22 <do_wait+0x38>
            return -E_INVAL;
c010af18:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010af1d:	e9 63 01 00 00       	jmp    c010b085 <do_wait+0x19b>
    }

    struct proc_struct *proc;
    bool intr_flag, haskid;
repeat:
    haskid = 0;
c010af22:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    if (pid != 0) {
c010af29:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010af2d:	74 3c                	je     c010af6b <do_wait+0x81>
        proc = find_proc(pid);
c010af2f:	83 ec 0c             	sub    $0xc,%esp
c010af32:	ff 75 08             	pushl  0x8(%ebp)
c010af35:	e8 b8 f1 ff ff       	call   c010a0f2 <find_proc>
c010af3a:	83 c4 10             	add    $0x10,%esp
c010af3d:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (proc != NULL && proc->parent == current) {
c010af40:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010af44:	74 58                	je     c010af9e <do_wait+0xb4>
c010af46:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010af49:	8b 50 14             	mov    0x14(%eax),%edx
c010af4c:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010af51:	39 c2                	cmp    %eax,%edx
c010af53:	75 49                	jne    c010af9e <do_wait+0xb4>
            haskid = 1;
c010af55:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c010af5c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010af5f:	8b 00                	mov    (%eax),%eax
c010af61:	83 f8 03             	cmp    $0x3,%eax
c010af64:	75 38                	jne    c010af9e <do_wait+0xb4>
                goto found;
c010af66:	e9 88 00 00 00       	jmp    c010aff3 <do_wait+0x109>
            }
        }
    }
    else {
        proc = current->cptr;
c010af6b:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010af70:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010af76:	89 45 f4             	mov    %eax,-0xc(%ebp)
        for (; proc != NULL; proc = proc->optr) {
c010af79:	eb 1d                	jmp    c010af98 <do_wait+0xae>
            haskid = 1;
c010af7b:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c010af82:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010af85:	8b 00                	mov    (%eax),%eax
c010af87:	83 f8 03             	cmp    $0x3,%eax
c010af8a:	74 66                	je     c010aff2 <do_wait+0x108>
            }
        }
    }
    else {
        proc = current->cptr;
        for (; proc != NULL; proc = proc->optr) {
c010af8c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010af8f:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010af95:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010af98:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010af9c:	75 dd                	jne    c010af7b <do_wait+0x91>
            if (proc->state == PROC_ZOMBIE) {
                goto found;
            }
        }
    }
    if (haskid) {
c010af9e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010afa2:	74 44                	je     c010afe8 <do_wait+0xfe>
        current->state = PROC_SLEEPING;
c010afa4:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010afa9:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        current->wait_state = WT_CHILD;
c010afaf:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010afb4:	c7 80 90 00 00 00 01 	movl   $0x80000001,0x90(%eax)
c010afbb:	00 00 80 
        schedule();
c010afbe:	e8 71 07 00 00       	call   c010b734 <schedule>
        if (current->flags & PF_EXITING) {
c010afc3:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010afc8:	8b 40 44             	mov    0x44(%eax),%eax
c010afcb:	83 e0 01             	and    $0x1,%eax
c010afce:	85 c0                	test   %eax,%eax
c010afd0:	0f 84 4c ff ff ff    	je     c010af22 <do_wait+0x38>
            do_exit(-E_KILLED);
c010afd6:	83 ec 0c             	sub    $0xc,%esp
c010afd9:	6a f7                	push   $0xfffffff7
c010afdb:	e8 04 f6 ff ff       	call   c010a5e4 <do_exit>
c010afe0:	83 c4 10             	add    $0x10,%esp
        }
        goto repeat;
c010afe3:	e9 3a ff ff ff       	jmp    c010af22 <do_wait+0x38>
    }
    return -E_BAD_PROC;
c010afe8:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
c010afed:	e9 93 00 00 00       	jmp    c010b085 <do_wait+0x19b>
    else {
        proc = current->cptr;
        for (; proc != NULL; proc = proc->optr) {
            haskid = 1;
            if (proc->state == PROC_ZOMBIE) {
                goto found;
c010aff2:	90                   	nop
        goto repeat;
    }
    return -E_BAD_PROC;

found:
    if (proc == idleproc || proc == initproc) {
c010aff3:	a1 20 50 1c c0       	mov    0xc01c5020,%eax
c010aff8:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010affb:	74 0a                	je     c010b007 <do_wait+0x11d>
c010affd:	a1 24 50 1c c0       	mov    0xc01c5024,%eax
c010b002:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010b005:	75 17                	jne    c010b01e <do_wait+0x134>
        panic("wait idleproc or initproc.\n");
c010b007:	83 ec 04             	sub    $0x4,%esp
c010b00a:	68 e6 f2 10 c0       	push   $0xc010f2e6
c010b00f:	68 13 03 00 00       	push   $0x313
c010b014:	68 dc f0 10 c0       	push   $0xc010f0dc
c010b019:	e8 df 53 ff ff       	call   c01003fd <__panic>
    }
    if (code_store != NULL) {
c010b01e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010b022:	74 0e                	je     c010b032 <do_wait+0x148>
        *code_store = proc->exit_code;
c010b024:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b027:	8b 90 8c 00 00 00    	mov    0x8c(%eax),%edx
c010b02d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b030:	89 10                	mov    %edx,(%eax)
    }
    local_intr_save(intr_flag);
c010b032:	e8 87 e9 ff ff       	call   c01099be <__intr_save>
c010b037:	89 45 e8             	mov    %eax,-0x18(%ebp)
    {
        unhash_proc(proc);
c010b03a:	83 ec 0c             	sub    $0xc,%esp
c010b03d:	ff 75 f4             	pushl  -0xc(%ebp)
c010b040:	e8 77 f0 ff ff       	call   c010a0bc <unhash_proc>
c010b045:	83 c4 10             	add    $0x10,%esp
        remove_links(proc);
c010b048:	83 ec 0c             	sub    $0xc,%esp
c010b04b:	ff 75 f4             	pushl  -0xc(%ebp)
c010b04e:	e8 b7 ed ff ff       	call   c0109e0a <remove_links>
c010b053:	83 c4 10             	add    $0x10,%esp
    }
    local_intr_restore(intr_flag);
c010b056:	83 ec 0c             	sub    $0xc,%esp
c010b059:	ff 75 e8             	pushl  -0x18(%ebp)
c010b05c:	e8 87 e9 ff ff       	call   c01099e8 <__intr_restore>
c010b061:	83 c4 10             	add    $0x10,%esp
    put_kstack(proc);
c010b064:	83 ec 0c             	sub    $0xc,%esp
c010b067:	ff 75 f4             	pushl  -0xc(%ebp)
c010b06a:	e8 9a f1 ff ff       	call   c010a209 <put_kstack>
c010b06f:	83 c4 10             	add    $0x10,%esp
    kfree(proc);
c010b072:	83 ec 0c             	sub    $0xc,%esp
c010b075:	ff 75 f4             	pushl  -0xc(%ebp)
c010b078:	e8 e3 a0 ff ff       	call   c0105160 <kfree>
c010b07d:	83 c4 10             	add    $0x10,%esp
    return 0;
c010b080:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010b085:	c9                   	leave  
c010b086:	c3                   	ret    

c010b087 <do_kill>:

// do_kill - kill process with pid by set this process's flags with PF_EXITING
int
do_kill(int pid) {
c010b087:	55                   	push   %ebp
c010b088:	89 e5                	mov    %esp,%ebp
c010b08a:	83 ec 18             	sub    $0x18,%esp
    struct proc_struct *proc;
    if ((proc = find_proc(pid)) != NULL) {
c010b08d:	83 ec 0c             	sub    $0xc,%esp
c010b090:	ff 75 08             	pushl  0x8(%ebp)
c010b093:	e8 5a f0 ff ff       	call   c010a0f2 <find_proc>
c010b098:	83 c4 10             	add    $0x10,%esp
c010b09b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b09e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b0a2:	74 47                	je     c010b0eb <do_kill+0x64>
        if (!(proc->flags & PF_EXITING)) {
c010b0a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b0a7:	8b 40 44             	mov    0x44(%eax),%eax
c010b0aa:	83 e0 01             	and    $0x1,%eax
c010b0ad:	85 c0                	test   %eax,%eax
c010b0af:	75 33                	jne    c010b0e4 <do_kill+0x5d>
            proc->flags |= PF_EXITING;
c010b0b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b0b4:	8b 40 44             	mov    0x44(%eax),%eax
c010b0b7:	83 c8 01             	or     $0x1,%eax
c010b0ba:	89 c2                	mov    %eax,%edx
c010b0bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b0bf:	89 50 44             	mov    %edx,0x44(%eax)
            if (proc->wait_state & WT_INTERRUPTED) {
c010b0c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b0c5:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010b0cb:	85 c0                	test   %eax,%eax
c010b0cd:	79 0e                	jns    c010b0dd <do_kill+0x56>
                wakeup_proc(proc);
c010b0cf:	83 ec 0c             	sub    $0xc,%esp
c010b0d2:	ff 75 f4             	pushl  -0xc(%ebp)
c010b0d5:	e8 ca 05 00 00       	call   c010b6a4 <wakeup_proc>
c010b0da:	83 c4 10             	add    $0x10,%esp
            }
            return 0;
c010b0dd:	b8 00 00 00 00       	mov    $0x0,%eax
c010b0e2:	eb 0c                	jmp    c010b0f0 <do_kill+0x69>
        }
        return -E_KILLED;
c010b0e4:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
c010b0e9:	eb 05                	jmp    c010b0f0 <do_kill+0x69>
    }
    return -E_INVAL;
c010b0eb:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c010b0f0:	c9                   	leave  
c010b0f1:	c3                   	ret    

c010b0f2 <kernel_execve>:

// kernel_execve - do SYS_exec syscall to exec a user program called by user_main kernel_thread
static int
kernel_execve(const char *name, unsigned char *binary, size_t size) {
c010b0f2:	55                   	push   %ebp
c010b0f3:	89 e5                	mov    %esp,%ebp
c010b0f5:	57                   	push   %edi
c010b0f6:	56                   	push   %esi
c010b0f7:	53                   	push   %ebx
c010b0f8:	83 ec 1c             	sub    $0x1c,%esp
    int ret, len = strlen(name);
c010b0fb:	83 ec 0c             	sub    $0xc,%esp
c010b0fe:	ff 75 08             	pushl  0x8(%ebp)
c010b101:	e8 55 0f 00 00       	call   c010c05b <strlen>
c010b106:	83 c4 10             	add    $0x10,%esp
c010b109:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    asm volatile (
c010b10c:	b8 04 00 00 00       	mov    $0x4,%eax
c010b111:	8b 55 08             	mov    0x8(%ebp),%edx
c010b114:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c010b117:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c010b11a:	8b 75 10             	mov    0x10(%ebp),%esi
c010b11d:	89 f7                	mov    %esi,%edi
c010b11f:	cd 80                	int    $0x80
c010b121:	89 45 e0             	mov    %eax,-0x20(%ebp)
        "int %1;"
        : "=a" (ret)
        : "i" (T_SYSCALL), "0" (SYS_exec), "d" (name), "c" (len), "b" (binary), "D" (size)
        : "memory");
    return ret;
c010b124:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
c010b127:	8d 65 f4             	lea    -0xc(%ebp),%esp
c010b12a:	5b                   	pop    %ebx
c010b12b:	5e                   	pop    %esi
c010b12c:	5f                   	pop    %edi
c010b12d:	5d                   	pop    %ebp
c010b12e:	c3                   	ret    

c010b12f <user_main>:

#define KERNEL_EXECVE2(x, xstart, xsize)        __KERNEL_EXECVE2(x, xstart, xsize)

// user_main - kernel thread used to exec a user program
static int
user_main(void *arg) {
c010b12f:	55                   	push   %ebp
c010b130:	89 e5                	mov    %esp,%ebp
c010b132:	83 ec 08             	sub    $0x8,%esp
#ifdef TEST
    KERNEL_EXECVE2(TEST, TESTSTART, TESTSIZE);
#else
    KERNEL_EXECVE(exit);
c010b135:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010b13a:	8b 40 04             	mov    0x4(%eax),%eax
c010b13d:	83 ec 04             	sub    $0x4,%esp
c010b140:	68 02 f3 10 c0       	push   $0xc010f302
c010b145:	50                   	push   %eax
c010b146:	68 08 f3 10 c0       	push   $0xc010f308
c010b14b:	e8 47 51 ff ff       	call   c0100297 <cprintf>
c010b150:	83 c4 10             	add    $0x10,%esp
c010b153:	b8 08 79 00 00       	mov    $0x7908,%eax
c010b158:	83 ec 04             	sub    $0x4,%esp
c010b15b:	50                   	push   %eax
c010b15c:	68 d4 f4 15 c0       	push   $0xc015f4d4
c010b161:	68 02 f3 10 c0       	push   $0xc010f302
c010b166:	e8 87 ff ff ff       	call   c010b0f2 <kernel_execve>
c010b16b:	83 c4 10             	add    $0x10,%esp
#endif
    panic("user_main execve failed.\n");
c010b16e:	83 ec 04             	sub    $0x4,%esp
c010b171:	68 2f f3 10 c0       	push   $0xc010f32f
c010b176:	68 5c 03 00 00       	push   $0x35c
c010b17b:	68 dc f0 10 c0       	push   $0xc010f0dc
c010b180:	e8 78 52 ff ff       	call   c01003fd <__panic>

c010b185 <init_main>:
}

// init_main - the second kernel thread used to create user_main kernel threads
static int
init_main(void *arg) {
c010b185:	55                   	push   %ebp
c010b186:	89 e5                	mov    %esp,%ebp
c010b188:	83 ec 28             	sub    $0x28,%esp
    size_t nr_free_pages_store = nr_free_pages();
c010b18b:	e8 83 bf ff ff       	call   c0107113 <nr_free_pages>
c010b190:	89 45 f4             	mov    %eax,-0xc(%ebp)
    size_t kernel_allocated_store = kallocated();
c010b193:	e8 93 9e ff ff       	call   c010502b <kallocated>
c010b198:	89 45 f0             	mov    %eax,-0x10(%ebp)

    int pid = kernel_thread(user_main, NULL, 0);
c010b19b:	83 ec 04             	sub    $0x4,%esp
c010b19e:	6a 00                	push   $0x0
c010b1a0:	6a 00                	push   $0x0
c010b1a2:	68 2f b1 10 c0       	push   $0xc010b12f
c010b1a7:	e8 b8 ef ff ff       	call   c010a164 <kernel_thread>
c010b1ac:	83 c4 10             	add    $0x10,%esp
c010b1af:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (pid <= 0) {
c010b1b2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010b1b6:	7f 17                	jg     c010b1cf <init_main+0x4a>
        panic("create user_main failed.\n");
c010b1b8:	83 ec 04             	sub    $0x4,%esp
c010b1bb:	68 49 f3 10 c0       	push   $0xc010f349
c010b1c0:	68 67 03 00 00       	push   $0x367
c010b1c5:	68 dc f0 10 c0       	push   $0xc010f0dc
c010b1ca:	e8 2e 52 ff ff       	call   c01003fd <__panic>
    }
 extern void check_sync(void);
    check_sync();                // check philosopher sync problem
c010b1cf:	e8 84 dc ff ff       	call   c0108e58 <check_sync>

    while (do_wait(0, NULL) == 0) {
c010b1d4:	eb 05                	jmp    c010b1db <init_main+0x56>
        schedule();
c010b1d6:	e8 59 05 00 00       	call   c010b734 <schedule>
        panic("create user_main failed.\n");
    }
 extern void check_sync(void);
    check_sync();                // check philosopher sync problem

    while (do_wait(0, NULL) == 0) {
c010b1db:	83 ec 08             	sub    $0x8,%esp
c010b1de:	6a 00                	push   $0x0
c010b1e0:	6a 00                	push   $0x0
c010b1e2:	e8 03 fd ff ff       	call   c010aeea <do_wait>
c010b1e7:	83 c4 10             	add    $0x10,%esp
c010b1ea:	85 c0                	test   %eax,%eax
c010b1ec:	74 e8                	je     c010b1d6 <init_main+0x51>
        schedule();
    }

    cprintf("all user-mode processes have quit.\n");
c010b1ee:	83 ec 0c             	sub    $0xc,%esp
c010b1f1:	68 64 f3 10 c0       	push   $0xc010f364
c010b1f6:	e8 9c 50 ff ff       	call   c0100297 <cprintf>
c010b1fb:	83 c4 10             	add    $0x10,%esp
    assert(initproc->cptr == NULL && initproc->yptr == NULL && initproc->optr == NULL);
c010b1fe:	a1 24 50 1c c0       	mov    0xc01c5024,%eax
c010b203:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010b209:	85 c0                	test   %eax,%eax
c010b20b:	75 1e                	jne    c010b22b <init_main+0xa6>
c010b20d:	a1 24 50 1c c0       	mov    0xc01c5024,%eax
c010b212:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010b218:	85 c0                	test   %eax,%eax
c010b21a:	75 0f                	jne    c010b22b <init_main+0xa6>
c010b21c:	a1 24 50 1c c0       	mov    0xc01c5024,%eax
c010b221:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010b227:	85 c0                	test   %eax,%eax
c010b229:	74 19                	je     c010b244 <init_main+0xbf>
c010b22b:	68 88 f3 10 c0       	push   $0xc010f388
c010b230:	68 09 f1 10 c0       	push   $0xc010f109
c010b235:	68 71 03 00 00       	push   $0x371
c010b23a:	68 dc f0 10 c0       	push   $0xc010f0dc
c010b23f:	e8 b9 51 ff ff       	call   c01003fd <__panic>
    assert(nr_process == 2);
c010b244:	a1 40 70 1c c0       	mov    0xc01c7040,%eax
c010b249:	83 f8 02             	cmp    $0x2,%eax
c010b24c:	74 19                	je     c010b267 <init_main+0xe2>
c010b24e:	68 d3 f3 10 c0       	push   $0xc010f3d3
c010b253:	68 09 f1 10 c0       	push   $0xc010f109
c010b258:	68 72 03 00 00       	push   $0x372
c010b25d:	68 dc f0 10 c0       	push   $0xc010f0dc
c010b262:	e8 96 51 ff ff       	call   c01003fd <__panic>
c010b267:	c7 45 e4 dc 72 1c c0 	movl   $0xc01c72dc,-0x1c(%ebp)
c010b26e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b271:	8b 40 04             	mov    0x4(%eax),%eax
    assert(list_next(&proc_list) == &(initproc->list_link));
c010b274:	8b 15 24 50 1c c0    	mov    0xc01c5024,%edx
c010b27a:	83 c2 7c             	add    $0x7c,%edx
c010b27d:	39 d0                	cmp    %edx,%eax
c010b27f:	74 19                	je     c010b29a <init_main+0x115>
c010b281:	68 e4 f3 10 c0       	push   $0xc010f3e4
c010b286:	68 09 f1 10 c0       	push   $0xc010f109
c010b28b:	68 73 03 00 00       	push   $0x373
c010b290:	68 dc f0 10 c0       	push   $0xc010f0dc
c010b295:	e8 63 51 ff ff       	call   c01003fd <__panic>
c010b29a:	c7 45 e8 dc 72 1c c0 	movl   $0xc01c72dc,-0x18(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c010b2a1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b2a4:	8b 00                	mov    (%eax),%eax
    assert(list_prev(&proc_list) == &(initproc->list_link));
c010b2a6:	8b 15 24 50 1c c0    	mov    0xc01c5024,%edx
c010b2ac:	83 c2 7c             	add    $0x7c,%edx
c010b2af:	39 d0                	cmp    %edx,%eax
c010b2b1:	74 19                	je     c010b2cc <init_main+0x147>
c010b2b3:	68 14 f4 10 c0       	push   $0xc010f414
c010b2b8:	68 09 f1 10 c0       	push   $0xc010f109
c010b2bd:	68 74 03 00 00       	push   $0x374
c010b2c2:	68 dc f0 10 c0       	push   $0xc010f0dc
c010b2c7:	e8 31 51 ff ff       	call   c01003fd <__panic>

    cprintf("init check memory pass.\n");
c010b2cc:	83 ec 0c             	sub    $0xc,%esp
c010b2cf:	68 44 f4 10 c0       	push   $0xc010f444
c010b2d4:	e8 be 4f ff ff       	call   c0100297 <cprintf>
c010b2d9:	83 c4 10             	add    $0x10,%esp
    return 0;
c010b2dc:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010b2e1:	c9                   	leave  
c010b2e2:	c3                   	ret    

c010b2e3 <proc_init>:

// proc_init - set up the first kernel thread idleproc "idle" by itself and 
//           - create the second kernel thread init_main
void
proc_init(void) {
c010b2e3:	55                   	push   %ebp
c010b2e4:	89 e5                	mov    %esp,%ebp
c010b2e6:	83 ec 18             	sub    $0x18,%esp
c010b2e9:	c7 45 e8 dc 72 1c c0 	movl   $0xc01c72dc,-0x18(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010b2f0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b2f3:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010b2f6:	89 50 04             	mov    %edx,0x4(%eax)
c010b2f9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b2fc:	8b 50 04             	mov    0x4(%eax),%edx
c010b2ff:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b302:	89 10                	mov    %edx,(%eax)
    int i;

    list_init(&proc_list);
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c010b304:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010b30b:	eb 26                	jmp    c010b333 <proc_init+0x50>
        list_init(hash_list + i);
c010b30d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b310:	c1 e0 03             	shl    $0x3,%eax
c010b313:	05 40 50 1c c0       	add    $0xc01c5040,%eax
c010b318:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b31b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b31e:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010b321:	89 50 04             	mov    %edx,0x4(%eax)
c010b324:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b327:	8b 50 04             	mov    0x4(%eax),%edx
c010b32a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b32d:	89 10                	mov    %edx,(%eax)
void
proc_init(void) {
    int i;

    list_init(&proc_list);
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c010b32f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010b333:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
c010b33a:	7e d1                	jle    c010b30d <proc_init+0x2a>
        list_init(hash_list + i);
    }

    if ((idleproc = alloc_proc()) == NULL) {
c010b33c:	e8 39 e8 ff ff       	call   c0109b7a <alloc_proc>
c010b341:	a3 20 50 1c c0       	mov    %eax,0xc01c5020
c010b346:	a1 20 50 1c c0       	mov    0xc01c5020,%eax
c010b34b:	85 c0                	test   %eax,%eax
c010b34d:	75 17                	jne    c010b366 <proc_init+0x83>
        panic("cannot alloc idleproc.\n");
c010b34f:	83 ec 04             	sub    $0x4,%esp
c010b352:	68 5d f4 10 c0       	push   $0xc010f45d
c010b357:	68 86 03 00 00       	push   $0x386
c010b35c:	68 dc f0 10 c0       	push   $0xc010f0dc
c010b361:	e8 97 50 ff ff       	call   c01003fd <__panic>
    }

    idleproc->pid = 0;
c010b366:	a1 20 50 1c c0       	mov    0xc01c5020,%eax
c010b36b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    idleproc->state = PROC_RUNNABLE;
c010b372:	a1 20 50 1c c0       	mov    0xc01c5020,%eax
c010b377:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    idleproc->kstack = (uintptr_t)bootstack;
c010b37d:	a1 20 50 1c c0       	mov    0xc01c5020,%eax
c010b382:	ba 00 f0 12 c0       	mov    $0xc012f000,%edx
c010b387:	89 50 0c             	mov    %edx,0xc(%eax)
    idleproc->need_resched = 1;
c010b38a:	a1 20 50 1c c0       	mov    0xc01c5020,%eax
c010b38f:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    set_proc_name(idleproc, "idle");
c010b396:	a1 20 50 1c c0       	mov    0xc01c5020,%eax
c010b39b:	83 ec 08             	sub    $0x8,%esp
c010b39e:	68 75 f4 10 c0       	push   $0xc010f475
c010b3a3:	50                   	push   %eax
c010b3a4:	e8 3c e9 ff ff       	call   c0109ce5 <set_proc_name>
c010b3a9:	83 c4 10             	add    $0x10,%esp
    nr_process ++;
c010b3ac:	a1 40 70 1c c0       	mov    0xc01c7040,%eax
c010b3b1:	83 c0 01             	add    $0x1,%eax
c010b3b4:	a3 40 70 1c c0       	mov    %eax,0xc01c7040

    current = idleproc;
c010b3b9:	a1 20 50 1c c0       	mov    0xc01c5020,%eax
c010b3be:	a3 28 50 1c c0       	mov    %eax,0xc01c5028

    int pid = kernel_thread(init_main, NULL, 0);
c010b3c3:	83 ec 04             	sub    $0x4,%esp
c010b3c6:	6a 00                	push   $0x0
c010b3c8:	6a 00                	push   $0x0
c010b3ca:	68 85 b1 10 c0       	push   $0xc010b185
c010b3cf:	e8 90 ed ff ff       	call   c010a164 <kernel_thread>
c010b3d4:	83 c4 10             	add    $0x10,%esp
c010b3d7:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (pid <= 0) {
c010b3da:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010b3de:	7f 17                	jg     c010b3f7 <proc_init+0x114>
        panic("create init_main failed.\n");
c010b3e0:	83 ec 04             	sub    $0x4,%esp
c010b3e3:	68 7a f4 10 c0       	push   $0xc010f47a
c010b3e8:	68 94 03 00 00       	push   $0x394
c010b3ed:	68 dc f0 10 c0       	push   $0xc010f0dc
c010b3f2:	e8 06 50 ff ff       	call   c01003fd <__panic>
    }

    initproc = find_proc(pid);
c010b3f7:	83 ec 0c             	sub    $0xc,%esp
c010b3fa:	ff 75 ec             	pushl  -0x14(%ebp)
c010b3fd:	e8 f0 ec ff ff       	call   c010a0f2 <find_proc>
c010b402:	83 c4 10             	add    $0x10,%esp
c010b405:	a3 24 50 1c c0       	mov    %eax,0xc01c5024
    set_proc_name(initproc, "init");
c010b40a:	a1 24 50 1c c0       	mov    0xc01c5024,%eax
c010b40f:	83 ec 08             	sub    $0x8,%esp
c010b412:	68 94 f4 10 c0       	push   $0xc010f494
c010b417:	50                   	push   %eax
c010b418:	e8 c8 e8 ff ff       	call   c0109ce5 <set_proc_name>
c010b41d:	83 c4 10             	add    $0x10,%esp

    assert(idleproc != NULL && idleproc->pid == 0);
c010b420:	a1 20 50 1c c0       	mov    0xc01c5020,%eax
c010b425:	85 c0                	test   %eax,%eax
c010b427:	74 0c                	je     c010b435 <proc_init+0x152>
c010b429:	a1 20 50 1c c0       	mov    0xc01c5020,%eax
c010b42e:	8b 40 04             	mov    0x4(%eax),%eax
c010b431:	85 c0                	test   %eax,%eax
c010b433:	74 19                	je     c010b44e <proc_init+0x16b>
c010b435:	68 9c f4 10 c0       	push   $0xc010f49c
c010b43a:	68 09 f1 10 c0       	push   $0xc010f109
c010b43f:	68 9a 03 00 00       	push   $0x39a
c010b444:	68 dc f0 10 c0       	push   $0xc010f0dc
c010b449:	e8 af 4f ff ff       	call   c01003fd <__panic>
    assert(initproc != NULL && initproc->pid == 1);
c010b44e:	a1 24 50 1c c0       	mov    0xc01c5024,%eax
c010b453:	85 c0                	test   %eax,%eax
c010b455:	74 0d                	je     c010b464 <proc_init+0x181>
c010b457:	a1 24 50 1c c0       	mov    0xc01c5024,%eax
c010b45c:	8b 40 04             	mov    0x4(%eax),%eax
c010b45f:	83 f8 01             	cmp    $0x1,%eax
c010b462:	74 19                	je     c010b47d <proc_init+0x19a>
c010b464:	68 c4 f4 10 c0       	push   $0xc010f4c4
c010b469:	68 09 f1 10 c0       	push   $0xc010f109
c010b46e:	68 9b 03 00 00       	push   $0x39b
c010b473:	68 dc f0 10 c0       	push   $0xc010f0dc
c010b478:	e8 80 4f ff ff       	call   c01003fd <__panic>
}
c010b47d:	90                   	nop
c010b47e:	c9                   	leave  
c010b47f:	c3                   	ret    

c010b480 <cpu_idle>:

// cpu_idle - at the end of kern_init, the first kernel thread idleproc will do below works
void
cpu_idle(void) {
c010b480:	55                   	push   %ebp
c010b481:	89 e5                	mov    %esp,%ebp
c010b483:	83 ec 08             	sub    $0x8,%esp
    while (1) {
        if (current->need_resched) {
c010b486:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010b48b:	8b 40 10             	mov    0x10(%eax),%eax
c010b48e:	85 c0                	test   %eax,%eax
c010b490:	74 f4                	je     c010b486 <cpu_idle+0x6>
            schedule();
c010b492:	e8 9d 02 00 00       	call   c010b734 <schedule>
        }
    }
c010b497:	eb ed                	jmp    c010b486 <cpu_idle+0x6>

c010b499 <lab6_set_priority>:
}

//FOR LAB6, set the process's priority (bigger value will get more CPU time) 
void
lab6_set_priority(uint32_t priority)
{
c010b499:	55                   	push   %ebp
c010b49a:	89 e5                	mov    %esp,%ebp
    if (priority == 0)
c010b49c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b4a0:	75 11                	jne    c010b4b3 <lab6_set_priority+0x1a>
        current->lab6_priority = 1;
c010b4a2:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010b4a7:	c7 80 c0 00 00 00 01 	movl   $0x1,0xc0(%eax)
c010b4ae:	00 00 00 
    else current->lab6_priority = priority;
}
c010b4b1:	eb 0e                	jmp    c010b4c1 <lab6_set_priority+0x28>
void
lab6_set_priority(uint32_t priority)
{
    if (priority == 0)
        current->lab6_priority = 1;
    else current->lab6_priority = priority;
c010b4b3:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010b4b8:	8b 55 08             	mov    0x8(%ebp),%edx
c010b4bb:	89 90 c0 00 00 00    	mov    %edx,0xc0(%eax)
}
c010b4c1:	90                   	nop
c010b4c2:	5d                   	pop    %ebp
c010b4c3:	c3                   	ret    

c010b4c4 <do_sleep>:

// do_sleep - set current process state to sleep and add timer with "time"
//          - then call scheduler. if process run again, delete timer first.
int
do_sleep(unsigned int time) {
c010b4c4:	55                   	push   %ebp
c010b4c5:	89 e5                	mov    %esp,%ebp
c010b4c7:	83 ec 28             	sub    $0x28,%esp
    if (time == 0) {
c010b4ca:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b4ce:	75 07                	jne    c010b4d7 <do_sleep+0x13>
        return 0;
c010b4d0:	b8 00 00 00 00       	mov    $0x0,%eax
c010b4d5:	eb 72                	jmp    c010b549 <do_sleep+0x85>
    }
    bool intr_flag;
    local_intr_save(intr_flag);
c010b4d7:	e8 e2 e4 ff ff       	call   c01099be <__intr_save>
c010b4dc:	89 45 f4             	mov    %eax,-0xc(%ebp)
    timer_t __timer, *timer = timer_init(&__timer, current, time);
c010b4df:	8b 55 08             	mov    0x8(%ebp),%edx
c010b4e2:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010b4e7:	83 ec 04             	sub    $0x4,%esp
c010b4ea:	52                   	push   %edx
c010b4eb:	50                   	push   %eax
c010b4ec:	8d 45 e0             	lea    -0x20(%ebp),%eax
c010b4ef:	50                   	push   %eax
c010b4f0:	e8 90 e4 ff ff       	call   c0109985 <timer_init>
c010b4f5:	83 c4 10             	add    $0x10,%esp
c010b4f8:	89 45 f0             	mov    %eax,-0x10(%ebp)
    current->state = PROC_SLEEPING;
c010b4fb:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010b500:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    current->wait_state = WT_TIMER;
c010b506:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010b50b:	c7 80 90 00 00 00 02 	movl   $0x80000002,0x90(%eax)
c010b512:	00 00 80 
    add_timer(timer);
c010b515:	83 ec 0c             	sub    $0xc,%esp
c010b518:	ff 75 f0             	pushl  -0x10(%ebp)
c010b51b:	e8 ad 02 00 00       	call   c010b7cd <add_timer>
c010b520:	83 c4 10             	add    $0x10,%esp
    local_intr_restore(intr_flag);
c010b523:	83 ec 0c             	sub    $0xc,%esp
c010b526:	ff 75 f4             	pushl  -0xc(%ebp)
c010b529:	e8 ba e4 ff ff       	call   c01099e8 <__intr_restore>
c010b52e:	83 c4 10             	add    $0x10,%esp

    schedule();
c010b531:	e8 fe 01 00 00       	call   c010b734 <schedule>

    del_timer(timer);
c010b536:	83 ec 0c             	sub    $0xc,%esp
c010b539:	ff 75 f0             	pushl  -0x10(%ebp)
c010b53c:	e8 b2 03 00 00       	call   c010b8f3 <del_timer>
c010b541:	83 c4 10             	add    $0x10,%esp
    return 0;
c010b544:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010b549:	c9                   	leave  
c010b54a:	c3                   	ret    

c010b54b <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c010b54b:	55                   	push   %ebp
c010b54c:	89 e5                	mov    %esp,%ebp
c010b54e:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010b551:	9c                   	pushf  
c010b552:	58                   	pop    %eax
c010b553:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010b556:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010b559:	25 00 02 00 00       	and    $0x200,%eax
c010b55e:	85 c0                	test   %eax,%eax
c010b560:	74 0c                	je     c010b56e <__intr_save+0x23>
        intr_disable();
c010b562:	e8 55 6c ff ff       	call   c01021bc <intr_disable>
        return 1;
c010b567:	b8 01 00 00 00       	mov    $0x1,%eax
c010b56c:	eb 05                	jmp    c010b573 <__intr_save+0x28>
    }
    return 0;
c010b56e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010b573:	c9                   	leave  
c010b574:	c3                   	ret    

c010b575 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010b575:	55                   	push   %ebp
c010b576:	89 e5                	mov    %esp,%ebp
c010b578:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010b57b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b57f:	74 05                	je     c010b586 <__intr_restore+0x11>
        intr_enable();
c010b581:	e8 2f 6c ff ff       	call   c01021b5 <intr_enable>
    }
}
c010b586:	90                   	nop
c010b587:	c9                   	leave  
c010b588:	c3                   	ret    

c010b589 <sched_class_enqueue>:
static struct sched_class *sched_class;

static struct run_queue *rq;

static inline void
sched_class_enqueue(struct proc_struct *proc) {
c010b589:	55                   	push   %ebp
c010b58a:	89 e5                	mov    %esp,%ebp
c010b58c:	83 ec 08             	sub    $0x8,%esp
    if (proc != idleproc) {
c010b58f:	a1 20 50 1c c0       	mov    0xc01c5020,%eax
c010b594:	39 45 08             	cmp    %eax,0x8(%ebp)
c010b597:	74 1a                	je     c010b5b3 <sched_class_enqueue+0x2a>
        sched_class->enqueue(rq, proc);
c010b599:	a1 9c 70 1c c0       	mov    0xc01c709c,%eax
c010b59e:	8b 40 08             	mov    0x8(%eax),%eax
c010b5a1:	8b 15 a0 70 1c c0    	mov    0xc01c70a0,%edx
c010b5a7:	83 ec 08             	sub    $0x8,%esp
c010b5aa:	ff 75 08             	pushl  0x8(%ebp)
c010b5ad:	52                   	push   %edx
c010b5ae:	ff d0                	call   *%eax
c010b5b0:	83 c4 10             	add    $0x10,%esp
    }
}
c010b5b3:	90                   	nop
c010b5b4:	c9                   	leave  
c010b5b5:	c3                   	ret    

c010b5b6 <sched_class_dequeue>:

static inline void
sched_class_dequeue(struct proc_struct *proc) {
c010b5b6:	55                   	push   %ebp
c010b5b7:	89 e5                	mov    %esp,%ebp
c010b5b9:	83 ec 08             	sub    $0x8,%esp
    sched_class->dequeue(rq, proc);
c010b5bc:	a1 9c 70 1c c0       	mov    0xc01c709c,%eax
c010b5c1:	8b 40 0c             	mov    0xc(%eax),%eax
c010b5c4:	8b 15 a0 70 1c c0    	mov    0xc01c70a0,%edx
c010b5ca:	83 ec 08             	sub    $0x8,%esp
c010b5cd:	ff 75 08             	pushl  0x8(%ebp)
c010b5d0:	52                   	push   %edx
c010b5d1:	ff d0                	call   *%eax
c010b5d3:	83 c4 10             	add    $0x10,%esp
}
c010b5d6:	90                   	nop
c010b5d7:	c9                   	leave  
c010b5d8:	c3                   	ret    

c010b5d9 <sched_class_pick_next>:

static inline struct proc_struct *
sched_class_pick_next(void) {
c010b5d9:	55                   	push   %ebp
c010b5da:	89 e5                	mov    %esp,%ebp
c010b5dc:	83 ec 08             	sub    $0x8,%esp
    return sched_class->pick_next(rq);
c010b5df:	a1 9c 70 1c c0       	mov    0xc01c709c,%eax
c010b5e4:	8b 40 10             	mov    0x10(%eax),%eax
c010b5e7:	8b 15 a0 70 1c c0    	mov    0xc01c70a0,%edx
c010b5ed:	83 ec 0c             	sub    $0xc,%esp
c010b5f0:	52                   	push   %edx
c010b5f1:	ff d0                	call   *%eax
c010b5f3:	83 c4 10             	add    $0x10,%esp
}
c010b5f6:	c9                   	leave  
c010b5f7:	c3                   	ret    

c010b5f8 <sched_class_proc_tick>:

static void
sched_class_proc_tick(struct proc_struct *proc) {
c010b5f8:	55                   	push   %ebp
c010b5f9:	89 e5                	mov    %esp,%ebp
c010b5fb:	83 ec 08             	sub    $0x8,%esp
    if (proc != idleproc) {
c010b5fe:	a1 20 50 1c c0       	mov    0xc01c5020,%eax
c010b603:	39 45 08             	cmp    %eax,0x8(%ebp)
c010b606:	74 1c                	je     c010b624 <sched_class_proc_tick+0x2c>
        sched_class->proc_tick(rq, proc);
c010b608:	a1 9c 70 1c c0       	mov    0xc01c709c,%eax
c010b60d:	8b 40 14             	mov    0x14(%eax),%eax
c010b610:	8b 15 a0 70 1c c0    	mov    0xc01c70a0,%edx
c010b616:	83 ec 08             	sub    $0x8,%esp
c010b619:	ff 75 08             	pushl  0x8(%ebp)
c010b61c:	52                   	push   %edx
c010b61d:	ff d0                	call   *%eax
c010b61f:	83 c4 10             	add    $0x10,%esp
    }
    else {
        proc->need_resched = 1;
    }
}
c010b622:	eb 0a                	jmp    c010b62e <sched_class_proc_tick+0x36>
sched_class_proc_tick(struct proc_struct *proc) {
    if (proc != idleproc) {
        sched_class->proc_tick(rq, proc);
    }
    else {
        proc->need_resched = 1;
c010b624:	8b 45 08             	mov    0x8(%ebp),%eax
c010b627:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    }
}
c010b62e:	90                   	nop
c010b62f:	c9                   	leave  
c010b630:	c3                   	ret    

c010b631 <sched_init>:

static struct run_queue __rq;

void
sched_init(void) {
c010b631:	55                   	push   %ebp
c010b632:	89 e5                	mov    %esp,%ebp
c010b634:	83 ec 18             	sub    $0x18,%esp
c010b637:	c7 45 f4 94 70 1c c0 	movl   $0xc01c7094,-0xc(%ebp)
c010b63e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b641:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b644:	89 50 04             	mov    %edx,0x4(%eax)
c010b647:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b64a:	8b 50 04             	mov    0x4(%eax),%edx
c010b64d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b650:	89 10                	mov    %edx,(%eax)
    list_init(&timer_list);

    sched_class = &default_sched_class;
c010b652:	c7 05 9c 70 1c c0 84 	movl   $0xc0131a84,0xc01c709c
c010b659:	1a 13 c0 

    rq = &__rq;
c010b65c:	c7 05 a0 70 1c c0 a4 	movl   $0xc01c70a4,0xc01c70a0
c010b663:	70 1c c0 
    rq->max_time_slice = 5;
c010b666:	a1 a0 70 1c c0       	mov    0xc01c70a0,%eax
c010b66b:	c7 40 0c 05 00 00 00 	movl   $0x5,0xc(%eax)
    sched_class->init(rq);
c010b672:	a1 9c 70 1c c0       	mov    0xc01c709c,%eax
c010b677:	8b 40 04             	mov    0x4(%eax),%eax
c010b67a:	8b 15 a0 70 1c c0    	mov    0xc01c70a0,%edx
c010b680:	83 ec 0c             	sub    $0xc,%esp
c010b683:	52                   	push   %edx
c010b684:	ff d0                	call   *%eax
c010b686:	83 c4 10             	add    $0x10,%esp

    cprintf("sched class: %s\n", sched_class->name);
c010b689:	a1 9c 70 1c c0       	mov    0xc01c709c,%eax
c010b68e:	8b 00                	mov    (%eax),%eax
c010b690:	83 ec 08             	sub    $0x8,%esp
c010b693:	50                   	push   %eax
c010b694:	68 ec f4 10 c0       	push   $0xc010f4ec
c010b699:	e8 f9 4b ff ff       	call   c0100297 <cprintf>
c010b69e:	83 c4 10             	add    $0x10,%esp
}
c010b6a1:	90                   	nop
c010b6a2:	c9                   	leave  
c010b6a3:	c3                   	ret    

c010b6a4 <wakeup_proc>:

void
wakeup_proc(struct proc_struct *proc) {
c010b6a4:	55                   	push   %ebp
c010b6a5:	89 e5                	mov    %esp,%ebp
c010b6a7:	83 ec 18             	sub    $0x18,%esp
    assert(proc->state != PROC_ZOMBIE);
c010b6aa:	8b 45 08             	mov    0x8(%ebp),%eax
c010b6ad:	8b 00                	mov    (%eax),%eax
c010b6af:	83 f8 03             	cmp    $0x3,%eax
c010b6b2:	75 16                	jne    c010b6ca <wakeup_proc+0x26>
c010b6b4:	68 fd f4 10 c0       	push   $0xc010f4fd
c010b6b9:	68 18 f5 10 c0       	push   $0xc010f518
c010b6be:	6a 3c                	push   $0x3c
c010b6c0:	68 2d f5 10 c0       	push   $0xc010f52d
c010b6c5:	e8 33 4d ff ff       	call   c01003fd <__panic>
    bool intr_flag;
    local_intr_save(intr_flag);
c010b6ca:	e8 7c fe ff ff       	call   c010b54b <__intr_save>
c010b6cf:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        if (proc->state != PROC_RUNNABLE) {
c010b6d2:	8b 45 08             	mov    0x8(%ebp),%eax
c010b6d5:	8b 00                	mov    (%eax),%eax
c010b6d7:	83 f8 02             	cmp    $0x2,%eax
c010b6da:	74 30                	je     c010b70c <wakeup_proc+0x68>
            proc->state = PROC_RUNNABLE;
c010b6dc:	8b 45 08             	mov    0x8(%ebp),%eax
c010b6df:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
            proc->wait_state = 0;
c010b6e5:	8b 45 08             	mov    0x8(%ebp),%eax
c010b6e8:	c7 80 90 00 00 00 00 	movl   $0x0,0x90(%eax)
c010b6ef:	00 00 00 
            if (proc != current) {
c010b6f2:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010b6f7:	39 45 08             	cmp    %eax,0x8(%ebp)
c010b6fa:	74 27                	je     c010b723 <wakeup_proc+0x7f>
                sched_class_enqueue(proc);
c010b6fc:	83 ec 0c             	sub    $0xc,%esp
c010b6ff:	ff 75 08             	pushl  0x8(%ebp)
c010b702:	e8 82 fe ff ff       	call   c010b589 <sched_class_enqueue>
c010b707:	83 c4 10             	add    $0x10,%esp
c010b70a:	eb 17                	jmp    c010b723 <wakeup_proc+0x7f>
            }
        }
        else {
            warn("wakeup runnable process.\n");
c010b70c:	83 ec 04             	sub    $0x4,%esp
c010b70f:	68 43 f5 10 c0       	push   $0xc010f543
c010b714:	6a 48                	push   $0x48
c010b716:	68 2d f5 10 c0       	push   $0xc010f52d
c010b71b:	e8 60 4d ff ff       	call   c0100480 <__warn>
c010b720:	83 c4 10             	add    $0x10,%esp
        }
    }
    local_intr_restore(intr_flag);
c010b723:	83 ec 0c             	sub    $0xc,%esp
c010b726:	ff 75 f4             	pushl  -0xc(%ebp)
c010b729:	e8 47 fe ff ff       	call   c010b575 <__intr_restore>
c010b72e:	83 c4 10             	add    $0x10,%esp
}
c010b731:	90                   	nop
c010b732:	c9                   	leave  
c010b733:	c3                   	ret    

c010b734 <schedule>:

void
schedule(void) {
c010b734:	55                   	push   %ebp
c010b735:	89 e5                	mov    %esp,%ebp
c010b737:	83 ec 18             	sub    $0x18,%esp
    bool intr_flag;
    struct proc_struct *next;
    local_intr_save(intr_flag);
c010b73a:	e8 0c fe ff ff       	call   c010b54b <__intr_save>
c010b73f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        current->need_resched = 0;
c010b742:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010b747:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
        if (current->state == PROC_RUNNABLE) {
c010b74e:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010b753:	8b 00                	mov    (%eax),%eax
c010b755:	83 f8 02             	cmp    $0x2,%eax
c010b758:	75 11                	jne    c010b76b <schedule+0x37>
            sched_class_enqueue(current);
c010b75a:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010b75f:	83 ec 0c             	sub    $0xc,%esp
c010b762:	50                   	push   %eax
c010b763:	e8 21 fe ff ff       	call   c010b589 <sched_class_enqueue>
c010b768:	83 c4 10             	add    $0x10,%esp
        }
        if ((next = sched_class_pick_next()) != NULL) {
c010b76b:	e8 69 fe ff ff       	call   c010b5d9 <sched_class_pick_next>
c010b770:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b773:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b777:	74 0e                	je     c010b787 <schedule+0x53>
            sched_class_dequeue(next);
c010b779:	83 ec 0c             	sub    $0xc,%esp
c010b77c:	ff 75 f4             	pushl  -0xc(%ebp)
c010b77f:	e8 32 fe ff ff       	call   c010b5b6 <sched_class_dequeue>
c010b784:	83 c4 10             	add    $0x10,%esp
        }
        if (next == NULL) {
c010b787:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b78b:	75 08                	jne    c010b795 <schedule+0x61>
            next = idleproc;
c010b78d:	a1 20 50 1c c0       	mov    0xc01c5020,%eax
c010b792:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        next->runs ++;
c010b795:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b798:	8b 40 08             	mov    0x8(%eax),%eax
c010b79b:	8d 50 01             	lea    0x1(%eax),%edx
c010b79e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b7a1:	89 50 08             	mov    %edx,0x8(%eax)
        if (next != current) {
c010b7a4:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010b7a9:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010b7ac:	74 0e                	je     c010b7bc <schedule+0x88>
            proc_run(next);
c010b7ae:	83 ec 0c             	sub    $0xc,%esp
c010b7b1:	ff 75 f4             	pushl  -0xc(%ebp)
c010b7b4:	e8 eb e7 ff ff       	call   c0109fa4 <proc_run>
c010b7b9:	83 c4 10             	add    $0x10,%esp
        }
    }
    local_intr_restore(intr_flag);
c010b7bc:	83 ec 0c             	sub    $0xc,%esp
c010b7bf:	ff 75 f0             	pushl  -0x10(%ebp)
c010b7c2:	e8 ae fd ff ff       	call   c010b575 <__intr_restore>
c010b7c7:	83 c4 10             	add    $0x10,%esp
}
c010b7ca:	90                   	nop
c010b7cb:	c9                   	leave  
c010b7cc:	c3                   	ret    

c010b7cd <add_timer>:

// add timer to timer_list
void
add_timer(timer_t *timer) {
c010b7cd:	55                   	push   %ebp
c010b7ce:	89 e5                	mov    %esp,%ebp
c010b7d0:	83 ec 38             	sub    $0x38,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010b7d3:	e8 73 fd ff ff       	call   c010b54b <__intr_save>
c010b7d8:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        assert(timer->expires > 0 && timer->proc != NULL);
c010b7db:	8b 45 08             	mov    0x8(%ebp),%eax
c010b7de:	8b 00                	mov    (%eax),%eax
c010b7e0:	85 c0                	test   %eax,%eax
c010b7e2:	74 0a                	je     c010b7ee <add_timer+0x21>
c010b7e4:	8b 45 08             	mov    0x8(%ebp),%eax
c010b7e7:	8b 40 04             	mov    0x4(%eax),%eax
c010b7ea:	85 c0                	test   %eax,%eax
c010b7ec:	75 16                	jne    c010b804 <add_timer+0x37>
c010b7ee:	68 60 f5 10 c0       	push   $0xc010f560
c010b7f3:	68 18 f5 10 c0       	push   $0xc010f518
c010b7f8:	6a 6c                	push   $0x6c
c010b7fa:	68 2d f5 10 c0       	push   $0xc010f52d
c010b7ff:	e8 f9 4b ff ff       	call   c01003fd <__panic>
        assert(list_empty(&(timer->timer_link)));
c010b804:	8b 45 08             	mov    0x8(%ebp),%eax
c010b807:	83 c0 08             	add    $0x8,%eax
c010b80a:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010b80d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b810:	8b 40 04             	mov    0x4(%eax),%eax
c010b813:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c010b816:	0f 94 c0             	sete   %al
c010b819:	0f b6 c0             	movzbl %al,%eax
c010b81c:	85 c0                	test   %eax,%eax
c010b81e:	75 16                	jne    c010b836 <add_timer+0x69>
c010b820:	68 8c f5 10 c0       	push   $0xc010f58c
c010b825:	68 18 f5 10 c0       	push   $0xc010f518
c010b82a:	6a 6d                	push   $0x6d
c010b82c:	68 2d f5 10 c0       	push   $0xc010f52d
c010b831:	e8 c7 4b ff ff       	call   c01003fd <__panic>
c010b836:	c7 45 ec 94 70 1c c0 	movl   $0xc01c7094,-0x14(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010b83d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b840:	8b 40 04             	mov    0x4(%eax),%eax
        list_entry_t *le = list_next(&timer_list);
c010b843:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while (le != &timer_list) {
c010b846:	eb 4a                	jmp    c010b892 <add_timer+0xc5>
            timer_t *next = le2timer(le, timer_link);
c010b848:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b84b:	83 e8 08             	sub    $0x8,%eax
c010b84e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            if (timer->expires < next->expires) {
c010b851:	8b 45 08             	mov    0x8(%ebp),%eax
c010b854:	8b 10                	mov    (%eax),%edx
c010b856:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b859:	8b 00                	mov    (%eax),%eax
c010b85b:	39 c2                	cmp    %eax,%edx
c010b85d:	73 13                	jae    c010b872 <add_timer+0xa5>
                next->expires -= timer->expires;
c010b85f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b862:	8b 10                	mov    (%eax),%edx
c010b864:	8b 45 08             	mov    0x8(%ebp),%eax
c010b867:	8b 00                	mov    (%eax),%eax
c010b869:	29 c2                	sub    %eax,%edx
c010b86b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b86e:	89 10                	mov    %edx,(%eax)
                break;
c010b870:	eb 29                	jmp    c010b89b <add_timer+0xce>
            }
            timer->expires -= next->expires;
c010b872:	8b 45 08             	mov    0x8(%ebp),%eax
c010b875:	8b 10                	mov    (%eax),%edx
c010b877:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b87a:	8b 00                	mov    (%eax),%eax
c010b87c:	29 c2                	sub    %eax,%edx
c010b87e:	8b 45 08             	mov    0x8(%ebp),%eax
c010b881:	89 10                	mov    %edx,(%eax)
c010b883:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b886:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010b889:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b88c:	8b 40 04             	mov    0x4(%eax),%eax
            le = list_next(le);
c010b88f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    local_intr_save(intr_flag);
    {
        assert(timer->expires > 0 && timer->proc != NULL);
        assert(list_empty(&(timer->timer_link)));
        list_entry_t *le = list_next(&timer_list);
        while (le != &timer_list) {
c010b892:	81 7d f4 94 70 1c c0 	cmpl   $0xc01c7094,-0xc(%ebp)
c010b899:	75 ad                	jne    c010b848 <add_timer+0x7b>
                break;
            }
            timer->expires -= next->expires;
            le = list_next(le);
        }
        list_add_before(le, &(timer->timer_link));
c010b89b:	8b 45 08             	mov    0x8(%ebp),%eax
c010b89e:	8d 50 08             	lea    0x8(%eax),%edx
c010b8a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b8a4:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010b8a7:	89 55 d8             	mov    %edx,-0x28(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c010b8aa:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b8ad:	8b 00                	mov    (%eax),%eax
c010b8af:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010b8b2:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010b8b5:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010b8b8:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b8bb:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010b8be:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b8c1:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010b8c4:	89 10                	mov    %edx,(%eax)
c010b8c6:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b8c9:	8b 10                	mov    (%eax),%edx
c010b8cb:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b8ce:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010b8d1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010b8d4:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010b8d7:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010b8da:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010b8dd:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010b8e0:	89 10                	mov    %edx,(%eax)
    }
    local_intr_restore(intr_flag);
c010b8e2:	83 ec 0c             	sub    $0xc,%esp
c010b8e5:	ff 75 f0             	pushl  -0x10(%ebp)
c010b8e8:	e8 88 fc ff ff       	call   c010b575 <__intr_restore>
c010b8ed:	83 c4 10             	add    $0x10,%esp
}
c010b8f0:	90                   	nop
c010b8f1:	c9                   	leave  
c010b8f2:	c3                   	ret    

c010b8f3 <del_timer>:

// del timer from timer_list
void
del_timer(timer_t *timer) {
c010b8f3:	55                   	push   %ebp
c010b8f4:	89 e5                	mov    %esp,%ebp
c010b8f6:	83 ec 38             	sub    $0x38,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010b8f9:	e8 4d fc ff ff       	call   c010b54b <__intr_save>
c010b8fe:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        if (!list_empty(&(timer->timer_link))) {
c010b901:	8b 45 08             	mov    0x8(%ebp),%eax
c010b904:	83 c0 08             	add    $0x8,%eax
c010b907:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010b90a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b90d:	8b 40 04             	mov    0x4(%eax),%eax
c010b910:	39 45 e0             	cmp    %eax,-0x20(%ebp)
c010b913:	0f 94 c0             	sete   %al
c010b916:	0f b6 c0             	movzbl %al,%eax
c010b919:	85 c0                	test   %eax,%eax
c010b91b:	0f 85 89 00 00 00    	jne    c010b9aa <del_timer+0xb7>
            if (timer->expires != 0) {
c010b921:	8b 45 08             	mov    0x8(%ebp),%eax
c010b924:	8b 00                	mov    (%eax),%eax
c010b926:	85 c0                	test   %eax,%eax
c010b928:	74 35                	je     c010b95f <del_timer+0x6c>
                list_entry_t *le = list_next(&(timer->timer_link));
c010b92a:	8b 45 08             	mov    0x8(%ebp),%eax
c010b92d:	83 c0 08             	add    $0x8,%eax
c010b930:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010b933:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b936:	8b 40 04             	mov    0x4(%eax),%eax
c010b939:	89 45 e8             	mov    %eax,-0x18(%ebp)
                if (le != &timer_list) {
c010b93c:	81 7d e8 94 70 1c c0 	cmpl   $0xc01c7094,-0x18(%ebp)
c010b943:	74 1a                	je     c010b95f <del_timer+0x6c>
                    timer_t *next = le2timer(le, timer_link);
c010b945:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b948:	83 e8 08             	sub    $0x8,%eax
c010b94b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                    next->expires += timer->expires;
c010b94e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b951:	8b 10                	mov    (%eax),%edx
c010b953:	8b 45 08             	mov    0x8(%ebp),%eax
c010b956:	8b 00                	mov    (%eax),%eax
c010b958:	01 c2                	add    %eax,%edx
c010b95a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b95d:	89 10                	mov    %edx,(%eax)
                }
            }
            list_del_init(&(timer->timer_link));
c010b95f:	8b 45 08             	mov    0x8(%ebp),%eax
c010b962:	83 c0 08             	add    $0x8,%eax
c010b965:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010b968:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b96b:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010b96e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b971:	8b 40 04             	mov    0x4(%eax),%eax
c010b974:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010b977:	8b 12                	mov    (%edx),%edx
c010b979:	89 55 d8             	mov    %edx,-0x28(%ebp)
c010b97c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010b97f:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b982:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010b985:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010b988:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010b98b:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010b98e:	89 10                	mov    %edx,(%eax)
c010b990:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b993:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010b996:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b999:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010b99c:	89 50 04             	mov    %edx,0x4(%eax)
c010b99f:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b9a2:	8b 50 04             	mov    0x4(%eax),%edx
c010b9a5:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b9a8:	89 10                	mov    %edx,(%eax)
        }
    }
    local_intr_restore(intr_flag);
c010b9aa:	83 ec 0c             	sub    $0xc,%esp
c010b9ad:	ff 75 f4             	pushl  -0xc(%ebp)
c010b9b0:	e8 c0 fb ff ff       	call   c010b575 <__intr_restore>
c010b9b5:	83 c4 10             	add    $0x10,%esp
}
c010b9b8:	90                   	nop
c010b9b9:	c9                   	leave  
c010b9ba:	c3                   	ret    

c010b9bb <run_timer_list>:

// call scheduler to update tick related info, and check the timer is expired? If expired, then wakup proc
void
run_timer_list(void) {
c010b9bb:	55                   	push   %ebp
c010b9bc:	89 e5                	mov    %esp,%ebp
c010b9be:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010b9c1:	e8 85 fb ff ff       	call   c010b54b <__intr_save>
c010b9c6:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010b9c9:	c7 45 e0 94 70 1c c0 	movl   $0xc01c7094,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010b9d0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b9d3:	8b 40 04             	mov    0x4(%eax),%eax
    {
        list_entry_t *le = list_next(&timer_list);
c010b9d6:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (le != &timer_list) {
c010b9d9:	81 7d f4 94 70 1c c0 	cmpl   $0xc01c7094,-0xc(%ebp)
c010b9e0:	0f 84 e4 00 00 00    	je     c010baca <run_timer_list+0x10f>
            timer_t *timer = le2timer(le, timer_link);
c010b9e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b9e9:	83 e8 08             	sub    $0x8,%eax
c010b9ec:	89 45 f0             	mov    %eax,-0x10(%ebp)
            assert(timer->expires != 0);
c010b9ef:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b9f2:	8b 00                	mov    (%eax),%eax
c010b9f4:	85 c0                	test   %eax,%eax
c010b9f6:	75 19                	jne    c010ba11 <run_timer_list+0x56>
c010b9f8:	68 ad f5 10 c0       	push   $0xc010f5ad
c010b9fd:	68 18 f5 10 c0       	push   $0xc010f518
c010ba02:	68 9a 00 00 00       	push   $0x9a
c010ba07:	68 2d f5 10 c0       	push   $0xc010f52d
c010ba0c:	e8 ec 49 ff ff       	call   c01003fd <__panic>
            timer->expires --;
c010ba11:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ba14:	8b 00                	mov    (%eax),%eax
c010ba16:	8d 50 ff             	lea    -0x1(%eax),%edx
c010ba19:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ba1c:	89 10                	mov    %edx,(%eax)
            while (timer->expires == 0) {
c010ba1e:	e9 97 00 00 00       	jmp    c010baba <run_timer_list+0xff>
c010ba23:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ba26:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010ba29:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ba2c:	8b 40 04             	mov    0x4(%eax),%eax
                le = list_next(le);
c010ba2f:	89 45 f4             	mov    %eax,-0xc(%ebp)
                struct proc_struct *proc = timer->proc;
c010ba32:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ba35:	8b 40 04             	mov    0x4(%eax),%eax
c010ba38:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                if (proc->wait_state != 0) {
c010ba3b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ba3e:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010ba44:	85 c0                	test   %eax,%eax
c010ba46:	74 26                	je     c010ba6e <run_timer_list+0xb3>
                    assert(proc->wait_state & WT_INTERRUPTED);
c010ba48:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ba4b:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010ba51:	85 c0                	test   %eax,%eax
c010ba53:	78 37                	js     c010ba8c <run_timer_list+0xd1>
c010ba55:	68 c4 f5 10 c0       	push   $0xc010f5c4
c010ba5a:	68 18 f5 10 c0       	push   $0xc010f518
c010ba5f:	68 a0 00 00 00       	push   $0xa0
c010ba64:	68 2d f5 10 c0       	push   $0xc010f52d
c010ba69:	e8 8f 49 ff ff       	call   c01003fd <__panic>
                }
                else {
                    warn("process %d's wait_state == 0.\n", proc->pid);
c010ba6e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ba71:	8b 40 04             	mov    0x4(%eax),%eax
c010ba74:	50                   	push   %eax
c010ba75:	68 e8 f5 10 c0       	push   $0xc010f5e8
c010ba7a:	68 a3 00 00 00       	push   $0xa3
c010ba7f:	68 2d f5 10 c0       	push   $0xc010f52d
c010ba84:	e8 f7 49 ff ff       	call   c0100480 <__warn>
c010ba89:	83 c4 10             	add    $0x10,%esp
                }
                wakeup_proc(proc);
c010ba8c:	83 ec 0c             	sub    $0xc,%esp
c010ba8f:	ff 75 e4             	pushl  -0x1c(%ebp)
c010ba92:	e8 0d fc ff ff       	call   c010b6a4 <wakeup_proc>
c010ba97:	83 c4 10             	add    $0x10,%esp
                del_timer(timer);
c010ba9a:	83 ec 0c             	sub    $0xc,%esp
c010ba9d:	ff 75 f0             	pushl  -0x10(%ebp)
c010baa0:	e8 4e fe ff ff       	call   c010b8f3 <del_timer>
c010baa5:	83 c4 10             	add    $0x10,%esp
                if (le == &timer_list) {
c010baa8:	81 7d f4 94 70 1c c0 	cmpl   $0xc01c7094,-0xc(%ebp)
c010baaf:	74 18                	je     c010bac9 <run_timer_list+0x10e>
                    break;
                }
                timer = le2timer(le, timer_link);
c010bab1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bab4:	83 e8 08             	sub    $0x8,%eax
c010bab7:	89 45 f0             	mov    %eax,-0x10(%ebp)
        list_entry_t *le = list_next(&timer_list);
        if (le != &timer_list) {
            timer_t *timer = le2timer(le, timer_link);
            assert(timer->expires != 0);
            timer->expires --;
            while (timer->expires == 0) {
c010baba:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010babd:	8b 00                	mov    (%eax),%eax
c010babf:	85 c0                	test   %eax,%eax
c010bac1:	0f 84 5c ff ff ff    	je     c010ba23 <run_timer_list+0x68>
c010bac7:	eb 01                	jmp    c010baca <run_timer_list+0x10f>
                    warn("process %d's wait_state == 0.\n", proc->pid);
                }
                wakeup_proc(proc);
                del_timer(timer);
                if (le == &timer_list) {
                    break;
c010bac9:	90                   	nop
                }
                timer = le2timer(le, timer_link);
            }
        }
        sched_class_proc_tick(current);
c010baca:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010bacf:	83 ec 0c             	sub    $0xc,%esp
c010bad2:	50                   	push   %eax
c010bad3:	e8 20 fb ff ff       	call   c010b5f8 <sched_class_proc_tick>
c010bad8:	83 c4 10             	add    $0x10,%esp
    }
    local_intr_restore(intr_flag);
c010badb:	83 ec 0c             	sub    $0xc,%esp
c010bade:	ff 75 ec             	pushl  -0x14(%ebp)
c010bae1:	e8 8f fa ff ff       	call   c010b575 <__intr_restore>
c010bae6:	83 c4 10             	add    $0x10,%esp
}
c010bae9:	90                   	nop
c010baea:	c9                   	leave  
c010baeb:	c3                   	ret    

c010baec <skew_heap_merge>:
}

static inline skew_heap_entry_t *
skew_heap_merge(skew_heap_entry_t *a, skew_heap_entry_t *b,
                compare_f comp)
{
c010baec:	55                   	push   %ebp
c010baed:	89 e5                	mov    %esp,%ebp
c010baef:	83 ec 18             	sub    $0x18,%esp
     if (a == NULL) return b;
c010baf2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010baf6:	75 08                	jne    c010bb00 <skew_heap_merge+0x14>
c010baf8:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bafb:	e9 b4 00 00 00       	jmp    c010bbb4 <skew_heap_merge+0xc8>
     else if (b == NULL) return a;
c010bb00:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010bb04:	75 08                	jne    c010bb0e <skew_heap_merge+0x22>
c010bb06:	8b 45 08             	mov    0x8(%ebp),%eax
c010bb09:	e9 a6 00 00 00       	jmp    c010bbb4 <skew_heap_merge+0xc8>
     
     skew_heap_entry_t *l, *r;
     if (comp(a, b) == -1)
c010bb0e:	83 ec 08             	sub    $0x8,%esp
c010bb11:	ff 75 0c             	pushl  0xc(%ebp)
c010bb14:	ff 75 08             	pushl  0x8(%ebp)
c010bb17:	8b 45 10             	mov    0x10(%ebp),%eax
c010bb1a:	ff d0                	call   *%eax
c010bb1c:	83 c4 10             	add    $0x10,%esp
c010bb1f:	83 f8 ff             	cmp    $0xffffffff,%eax
c010bb22:	75 49                	jne    c010bb6d <skew_heap_merge+0x81>
     {
          r = a->left;
c010bb24:	8b 45 08             	mov    0x8(%ebp),%eax
c010bb27:	8b 40 04             	mov    0x4(%eax),%eax
c010bb2a:	89 45 f4             	mov    %eax,-0xc(%ebp)
          l = skew_heap_merge(a->right, b, comp);
c010bb2d:	8b 45 08             	mov    0x8(%ebp),%eax
c010bb30:	8b 40 08             	mov    0x8(%eax),%eax
c010bb33:	83 ec 04             	sub    $0x4,%esp
c010bb36:	ff 75 10             	pushl  0x10(%ebp)
c010bb39:	ff 75 0c             	pushl  0xc(%ebp)
c010bb3c:	50                   	push   %eax
c010bb3d:	e8 aa ff ff ff       	call   c010baec <skew_heap_merge>
c010bb42:	83 c4 10             	add    $0x10,%esp
c010bb45:	89 45 f0             	mov    %eax,-0x10(%ebp)
          
          a->left = l;
c010bb48:	8b 45 08             	mov    0x8(%ebp),%eax
c010bb4b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010bb4e:	89 50 04             	mov    %edx,0x4(%eax)
          a->right = r;
c010bb51:	8b 45 08             	mov    0x8(%ebp),%eax
c010bb54:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010bb57:	89 50 08             	mov    %edx,0x8(%eax)
          if (l) l->parent = a;
c010bb5a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010bb5e:	74 08                	je     c010bb68 <skew_heap_merge+0x7c>
c010bb60:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bb63:	8b 55 08             	mov    0x8(%ebp),%edx
c010bb66:	89 10                	mov    %edx,(%eax)

          return a;
c010bb68:	8b 45 08             	mov    0x8(%ebp),%eax
c010bb6b:	eb 47                	jmp    c010bbb4 <skew_heap_merge+0xc8>
     }
     else
     {
          r = b->left;
c010bb6d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bb70:	8b 40 04             	mov    0x4(%eax),%eax
c010bb73:	89 45 f4             	mov    %eax,-0xc(%ebp)
          l = skew_heap_merge(a, b->right, comp);
c010bb76:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bb79:	8b 40 08             	mov    0x8(%eax),%eax
c010bb7c:	83 ec 04             	sub    $0x4,%esp
c010bb7f:	ff 75 10             	pushl  0x10(%ebp)
c010bb82:	50                   	push   %eax
c010bb83:	ff 75 08             	pushl  0x8(%ebp)
c010bb86:	e8 61 ff ff ff       	call   c010baec <skew_heap_merge>
c010bb8b:	83 c4 10             	add    $0x10,%esp
c010bb8e:	89 45 f0             	mov    %eax,-0x10(%ebp)
          
          b->left = l;
c010bb91:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bb94:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010bb97:	89 50 04             	mov    %edx,0x4(%eax)
          b->right = r;
c010bb9a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bb9d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010bba0:	89 50 08             	mov    %edx,0x8(%eax)
          if (l) l->parent = b;
c010bba3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010bba7:	74 08                	je     c010bbb1 <skew_heap_merge+0xc5>
c010bba9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bbac:	8b 55 0c             	mov    0xc(%ebp),%edx
c010bbaf:	89 10                	mov    %edx,(%eax)

          return b;
c010bbb1:	8b 45 0c             	mov    0xc(%ebp),%eax
     }
}
c010bbb4:	c9                   	leave  
c010bbb5:	c3                   	ret    

c010bbb6 <proc_stride_comp_f>:

/* The compare function for two skew_heap_node_t's and the
 * corresponding procs*/
static int
proc_stride_comp_f(void *a, void *b)
{
c010bbb6:	55                   	push   %ebp
c010bbb7:	89 e5                	mov    %esp,%ebp
c010bbb9:	83 ec 10             	sub    $0x10,%esp
     struct proc_struct *p = le2proc(a, lab6_run_pool);
c010bbbc:	8b 45 08             	mov    0x8(%ebp),%eax
c010bbbf:	2d b0 00 00 00       	sub    $0xb0,%eax
c010bbc4:	89 45 fc             	mov    %eax,-0x4(%ebp)
     struct proc_struct *q = le2proc(b, lab6_run_pool);
c010bbc7:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bbca:	2d b0 00 00 00       	sub    $0xb0,%eax
c010bbcf:	89 45 f8             	mov    %eax,-0x8(%ebp)
     int32_t c = p->lab6_stride - q->lab6_stride;
c010bbd2:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010bbd5:	8b 90 bc 00 00 00    	mov    0xbc(%eax),%edx
c010bbdb:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010bbde:	8b 80 bc 00 00 00    	mov    0xbc(%eax),%eax
c010bbe4:	29 c2                	sub    %eax,%edx
c010bbe6:	89 d0                	mov    %edx,%eax
c010bbe8:	89 45 f4             	mov    %eax,-0xc(%ebp)
     if (c > 0) return 1;
c010bbeb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bbef:	7e 07                	jle    c010bbf8 <proc_stride_comp_f+0x42>
c010bbf1:	b8 01 00 00 00       	mov    $0x1,%eax
c010bbf6:	eb 12                	jmp    c010bc0a <proc_stride_comp_f+0x54>
     else if (c == 0) return 0;
c010bbf8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bbfc:	75 07                	jne    c010bc05 <proc_stride_comp_f+0x4f>
c010bbfe:	b8 00 00 00 00       	mov    $0x0,%eax
c010bc03:	eb 05                	jmp    c010bc0a <proc_stride_comp_f+0x54>
     else return -1;
c010bc05:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
c010bc0a:	c9                   	leave  
c010bc0b:	c3                   	ret    

c010bc0c <stride_init>:
 *   - max_time_slice: no need here, the variable would be assigned by the caller.
 *
 * hint: see libs/list.h for routines of the list structures.
 */
static void
stride_init(struct run_queue *rq) {
c010bc0c:	55                   	push   %ebp
c010bc0d:	89 e5                	mov    %esp,%ebp
c010bc0f:	83 ec 10             	sub    $0x10,%esp
      * (1) init the ready process list: rq->run_list
      * (2) init the run pool: rq->lab6_run_pool
      * (3) set number of process: rq->proc_num to 0       
      */
    // (1) init the ready process list: rq->run_list
    list_init(&(rq->run_list));
c010bc12:	8b 45 08             	mov    0x8(%ebp),%eax
c010bc15:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010bc18:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010bc1b:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010bc1e:	89 50 04             	mov    %edx,0x4(%eax)
c010bc21:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010bc24:	8b 50 04             	mov    0x4(%eax),%edx
c010bc27:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010bc2a:	89 10                	mov    %edx,(%eax)
    // (2) init the run pool: rq->lab6_run_pool
    rq->lab6_run_pool = NULL;
c010bc2c:	8b 45 08             	mov    0x8(%ebp),%eax
c010bc2f:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
    //(3) set number of process: rq->proc_num to 0 
    rq->proc_num = 0;
c010bc36:	8b 45 08             	mov    0x8(%ebp),%eax
c010bc39:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
c010bc40:	90                   	nop
c010bc41:	c9                   	leave  
c010bc42:	c3                   	ret    

c010bc43 <stride_enqueue>:
 * 
 * hint: see libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static void
stride_enqueue(struct run_queue *rq, struct proc_struct *proc) {
c010bc43:	55                   	push   %ebp
c010bc44:	89 e5                	mov    %esp,%ebp
c010bc46:	83 ec 18             	sub    $0x18,%esp
      * (2) recalculate proc->time_slice
      * (3) set proc->rq pointer to rq
      * (4) increase rq->proc_num
      */
    // (1) insert the proc into rq correctly
    rq->lab6_run_pool = skew_heap_insert(rq->lab6_run_pool, &(proc->lab6_run_pool), (compare_f)proc_stride_comp_f);
c010bc49:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bc4c:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
c010bc52:	8b 45 08             	mov    0x8(%ebp),%eax
c010bc55:	8b 40 10             	mov    0x10(%eax),%eax
c010bc58:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bc5b:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010bc5e:	c7 45 ec b6 bb 10 c0 	movl   $0xc010bbb6,-0x14(%ebp)
c010bc65:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bc68:	89 45 e8             	mov    %eax,-0x18(%ebp)
     compare_f comp) __attribute__((always_inline));

static inline void
skew_heap_init(skew_heap_entry_t *a)
{
     a->left = a->right = a->parent = NULL;
c010bc6b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010bc6e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c010bc74:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010bc77:	8b 10                	mov    (%eax),%edx
c010bc79:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010bc7c:	89 50 08             	mov    %edx,0x8(%eax)
c010bc7f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010bc82:	8b 50 08             	mov    0x8(%eax),%edx
c010bc85:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010bc88:	89 50 04             	mov    %edx,0x4(%eax)
static inline skew_heap_entry_t *
skew_heap_insert(skew_heap_entry_t *a, skew_heap_entry_t *b,
                 compare_f comp)
{
     skew_heap_init(b);
     return skew_heap_merge(a, b, comp);
c010bc8b:	83 ec 04             	sub    $0x4,%esp
c010bc8e:	ff 75 ec             	pushl  -0x14(%ebp)
c010bc91:	ff 75 f0             	pushl  -0x10(%ebp)
c010bc94:	ff 75 f4             	pushl  -0xc(%ebp)
c010bc97:	e8 50 fe ff ff       	call   c010baec <skew_heap_merge>
c010bc9c:	83 c4 10             	add    $0x10,%esp
c010bc9f:	89 c2                	mov    %eax,%edx
c010bca1:	8b 45 08             	mov    0x8(%ebp),%eax
c010bca4:	89 50 10             	mov    %edx,0x10(%eax)
    // (2) recalculate proc->time_slice
    if (proc->time_slice == 0 || proc->time_slice > rq->max_time_slice) {
c010bca7:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bcaa:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010bcb0:	85 c0                	test   %eax,%eax
c010bcb2:	74 13                	je     c010bcc7 <stride_enqueue+0x84>
c010bcb4:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bcb7:	8b 90 ac 00 00 00    	mov    0xac(%eax),%edx
c010bcbd:	8b 45 08             	mov    0x8(%ebp),%eax
c010bcc0:	8b 40 0c             	mov    0xc(%eax),%eax
c010bcc3:	39 c2                	cmp    %eax,%edx
c010bcc5:	7e 0f                	jle    c010bcd6 <stride_enqueue+0x93>
        proc->time_slice = rq->max_time_slice;
c010bcc7:	8b 45 08             	mov    0x8(%ebp),%eax
c010bcca:	8b 50 0c             	mov    0xc(%eax),%edx
c010bccd:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bcd0:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
    }
    // (3) set proc->rq pointer to rq
    proc->rq = rq;
c010bcd6:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bcd9:	8b 55 08             	mov    0x8(%ebp),%edx
c010bcdc:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
    // (4) increase rq->proc_num
    rq->proc_num ++;
c010bce2:	8b 45 08             	mov    0x8(%ebp),%eax
c010bce5:	8b 40 08             	mov    0x8(%eax),%eax
c010bce8:	8d 50 01             	lea    0x1(%eax),%edx
c010bceb:	8b 45 08             	mov    0x8(%ebp),%eax
c010bcee:	89 50 08             	mov    %edx,0x8(%eax)
}
c010bcf1:	90                   	nop
c010bcf2:	c9                   	leave  
c010bcf3:	c3                   	ret    

c010bcf4 <stride_dequeue>:
 *
 * hint: see libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static void
stride_dequeue(struct run_queue *rq, struct proc_struct *proc) {
c010bcf4:	55                   	push   %ebp
c010bcf5:	89 e5                	mov    %esp,%ebp
c010bcf7:	83 ec 28             	sub    $0x28,%esp
      * NOTICE: you can use skew_heap or list. Important functions
      *         skew_heap_remove: remove a entry from skew_heap
      *         list_del_init: remove a entry from the  list
      */
    // (1) remove the proc from rq correctly
    rq->lab6_run_pool = skew_heap_remove(rq->lab6_run_pool, &(proc->lab6_run_pool), (compare_f)proc_stride_comp_f);
c010bcfa:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bcfd:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
c010bd03:	8b 45 08             	mov    0x8(%ebp),%eax
c010bd06:	8b 40 10             	mov    0x10(%eax),%eax
c010bd09:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bd0c:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010bd0f:	c7 45 ec b6 bb 10 c0 	movl   $0xc010bbb6,-0x14(%ebp)

static inline skew_heap_entry_t *
skew_heap_remove(skew_heap_entry_t *a, skew_heap_entry_t *b,
                 compare_f comp)
{
     skew_heap_entry_t *p   = b->parent;
c010bd16:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bd19:	8b 00                	mov    (%eax),%eax
c010bd1b:	89 45 e8             	mov    %eax,-0x18(%ebp)
     skew_heap_entry_t *rep = skew_heap_merge(b->left, b->right, comp);
c010bd1e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bd21:	8b 50 08             	mov    0x8(%eax),%edx
c010bd24:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bd27:	8b 40 04             	mov    0x4(%eax),%eax
c010bd2a:	83 ec 04             	sub    $0x4,%esp
c010bd2d:	ff 75 ec             	pushl  -0x14(%ebp)
c010bd30:	52                   	push   %edx
c010bd31:	50                   	push   %eax
c010bd32:	e8 b5 fd ff ff       	call   c010baec <skew_heap_merge>
c010bd37:	83 c4 10             	add    $0x10,%esp
c010bd3a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
     if (rep) rep->parent = p;
c010bd3d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010bd41:	74 08                	je     c010bd4b <stride_dequeue+0x57>
c010bd43:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010bd46:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010bd49:	89 10                	mov    %edx,(%eax)
     
     if (p)
c010bd4b:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010bd4f:	74 24                	je     c010bd75 <stride_dequeue+0x81>
     {
          if (p->left == b)
c010bd51:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010bd54:	8b 40 04             	mov    0x4(%eax),%eax
c010bd57:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010bd5a:	75 0b                	jne    c010bd67 <stride_dequeue+0x73>
               p->left = rep;
c010bd5c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010bd5f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010bd62:	89 50 04             	mov    %edx,0x4(%eax)
c010bd65:	eb 09                	jmp    c010bd70 <stride_dequeue+0x7c>
          else p->right = rep;
c010bd67:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010bd6a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010bd6d:	89 50 08             	mov    %edx,0x8(%eax)
          return a;
c010bd70:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bd73:	eb 03                	jmp    c010bd78 <stride_dequeue+0x84>
     }
     else return rep;
c010bd75:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010bd78:	8b 55 08             	mov    0x8(%ebp),%edx
c010bd7b:	89 42 10             	mov    %eax,0x10(%edx)
    rq->proc_num --;
c010bd7e:	8b 45 08             	mov    0x8(%ebp),%eax
c010bd81:	8b 40 08             	mov    0x8(%eax),%eax
c010bd84:	8d 50 ff             	lea    -0x1(%eax),%edx
c010bd87:	8b 45 08             	mov    0x8(%ebp),%eax
c010bd8a:	89 50 08             	mov    %edx,0x8(%eax)
}
c010bd8d:	90                   	nop
c010bd8e:	c9                   	leave  
c010bd8f:	c3                   	ret    

c010bd90 <stride_pick_next>:
 *
 * hint: see libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static struct proc_struct *
stride_pick_next(struct run_queue *rq) {
c010bd90:	55                   	push   %ebp
c010bd91:	89 e5                	mov    %esp,%ebp
c010bd93:	53                   	push   %ebx
c010bd94:	83 ec 10             	sub    $0x10,%esp
      * (3) return p
      */
    // (1) get a  proc_struct pointer p  with the minimum value of stride
    //        (1.1) If using skew_heap, we can use le2proc get the p from rq->lab6_run_poll
    // cprintf("in pick next()...\n");
    if (rq->lab6_run_pool == NULL) {
c010bd97:	8b 45 08             	mov    0x8(%ebp),%eax
c010bd9a:	8b 40 10             	mov    0x10(%eax),%eax
c010bd9d:	85 c0                	test   %eax,%eax
c010bd9f:	75 07                	jne    c010bda8 <stride_pick_next+0x18>
        return NULL;
c010bda1:	b8 00 00 00 00       	mov    $0x0,%eax
c010bda6:	eb 3b                	jmp    c010bde3 <stride_pick_next+0x53>
    }
    struct proc_struct * proc = le2proc(rq->lab6_run_pool, lab6_run_pool);
c010bda8:	8b 45 08             	mov    0x8(%ebp),%eax
c010bdab:	8b 40 10             	mov    0x10(%eax),%eax
c010bdae:	2d b0 00 00 00       	sub    $0xb0,%eax
c010bdb3:	89 45 f8             	mov    %eax,-0x8(%ebp)
    // (2) update p's stride value: p->lab6_stride
    proc->lab6_stride += BIG_STRIDE / proc->lab6_priority;
c010bdb6:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010bdb9:	8b 88 bc 00 00 00    	mov    0xbc(%eax),%ecx
c010bdbf:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010bdc2:	8b 98 c0 00 00 00    	mov    0xc0(%eax),%ebx
c010bdc8:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
c010bdcd:	ba 00 00 00 00       	mov    $0x0,%edx
c010bdd2:	f7 f3                	div    %ebx
c010bdd4:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c010bdd7:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010bdda:	89 90 bc 00 00 00    	mov    %edx,0xbc(%eax)
    // (3) return p
    // cprintf("next is %s\n", proc->name);
    return proc;
c010bde0:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c010bde3:	83 c4 10             	add    $0x10,%esp
c010bde6:	5b                   	pop    %ebx
c010bde7:	5d                   	pop    %ebp
c010bde8:	c3                   	ret    

c010bde9 <stride_proc_tick>:
 * denotes the time slices left for current
 * process. proc->need_resched is the flag variable for process
 * switching.
 */
static void
stride_proc_tick(struct run_queue *rq, struct proc_struct *proc) {
c010bde9:	55                   	push   %ebp
c010bdea:	89 e5                	mov    %esp,%ebp
     /* LAB6: YOUR CODE */
    if (proc->time_slice > 0) {
c010bdec:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bdef:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010bdf5:	85 c0                	test   %eax,%eax
c010bdf7:	7e 15                	jle    c010be0e <stride_proc_tick+0x25>
        proc->time_slice --;
c010bdf9:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bdfc:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010be02:	8d 50 ff             	lea    -0x1(%eax),%edx
c010be05:	8b 45 0c             	mov    0xc(%ebp),%eax
c010be08:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
    }
    if (proc->time_slice == 0) {
c010be0e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010be11:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010be17:	85 c0                	test   %eax,%eax
c010be19:	75 0a                	jne    c010be25 <stride_proc_tick+0x3c>
        proc->need_resched = 1;
c010be1b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010be1e:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    }
}
c010be25:	90                   	nop
c010be26:	5d                   	pop    %ebp
c010be27:	c3                   	ret    

c010be28 <sys_exit>:
#include <pmm.h>
#include <assert.h>
#include <clock.h>

static int
sys_exit(uint32_t arg[]) {
c010be28:	55                   	push   %ebp
c010be29:	89 e5                	mov    %esp,%ebp
c010be2b:	83 ec 18             	sub    $0x18,%esp
    int error_code = (int)arg[0];
c010be2e:	8b 45 08             	mov    0x8(%ebp),%eax
c010be31:	8b 00                	mov    (%eax),%eax
c010be33:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_exit(error_code);
c010be36:	83 ec 0c             	sub    $0xc,%esp
c010be39:	ff 75 f4             	pushl  -0xc(%ebp)
c010be3c:	e8 a3 e7 ff ff       	call   c010a5e4 <do_exit>
c010be41:	83 c4 10             	add    $0x10,%esp
}
c010be44:	c9                   	leave  
c010be45:	c3                   	ret    

c010be46 <sys_fork>:

static int
sys_fork(uint32_t arg[]) {
c010be46:	55                   	push   %ebp
c010be47:	89 e5                	mov    %esp,%ebp
c010be49:	83 ec 18             	sub    $0x18,%esp
    struct trapframe *tf = current->tf;
c010be4c:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010be51:	8b 40 3c             	mov    0x3c(%eax),%eax
c010be54:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uintptr_t stack = tf->tf_esp;
c010be57:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010be5a:	8b 40 44             	mov    0x44(%eax),%eax
c010be5d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_fork(0, stack, tf);
c010be60:	83 ec 04             	sub    $0x4,%esp
c010be63:	ff 75 f4             	pushl  -0xc(%ebp)
c010be66:	ff 75 f0             	pushl  -0x10(%ebp)
c010be69:	6a 00                	push   $0x0
c010be6b:	e8 46 e6 ff ff       	call   c010a4b6 <do_fork>
c010be70:	83 c4 10             	add    $0x10,%esp
}
c010be73:	c9                   	leave  
c010be74:	c3                   	ret    

c010be75 <sys_wait>:

static int
sys_wait(uint32_t arg[]) {
c010be75:	55                   	push   %ebp
c010be76:	89 e5                	mov    %esp,%ebp
c010be78:	83 ec 18             	sub    $0x18,%esp
    int pid = (int)arg[0];
c010be7b:	8b 45 08             	mov    0x8(%ebp),%eax
c010be7e:	8b 00                	mov    (%eax),%eax
c010be80:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int *store = (int *)arg[1];
c010be83:	8b 45 08             	mov    0x8(%ebp),%eax
c010be86:	83 c0 04             	add    $0x4,%eax
c010be89:	8b 00                	mov    (%eax),%eax
c010be8b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_wait(pid, store);
c010be8e:	83 ec 08             	sub    $0x8,%esp
c010be91:	ff 75 f0             	pushl  -0x10(%ebp)
c010be94:	ff 75 f4             	pushl  -0xc(%ebp)
c010be97:	e8 4e f0 ff ff       	call   c010aeea <do_wait>
c010be9c:	83 c4 10             	add    $0x10,%esp
}
c010be9f:	c9                   	leave  
c010bea0:	c3                   	ret    

c010bea1 <sys_exec>:

static int
sys_exec(uint32_t arg[]) {
c010bea1:	55                   	push   %ebp
c010bea2:	89 e5                	mov    %esp,%ebp
c010bea4:	83 ec 18             	sub    $0x18,%esp
    const char *name = (const char *)arg[0];
c010bea7:	8b 45 08             	mov    0x8(%ebp),%eax
c010beaa:	8b 00                	mov    (%eax),%eax
c010beac:	89 45 f4             	mov    %eax,-0xc(%ebp)
    size_t len = (size_t)arg[1];
c010beaf:	8b 45 08             	mov    0x8(%ebp),%eax
c010beb2:	83 c0 04             	add    $0x4,%eax
c010beb5:	8b 00                	mov    (%eax),%eax
c010beb7:	89 45 f0             	mov    %eax,-0x10(%ebp)
    unsigned char *binary = (unsigned char *)arg[2];
c010beba:	8b 45 08             	mov    0x8(%ebp),%eax
c010bebd:	83 c0 08             	add    $0x8,%eax
c010bec0:	8b 00                	mov    (%eax),%eax
c010bec2:	89 45 ec             	mov    %eax,-0x14(%ebp)
    size_t size = (size_t)arg[3];
c010bec5:	8b 45 08             	mov    0x8(%ebp),%eax
c010bec8:	83 c0 0c             	add    $0xc,%eax
c010becb:	8b 00                	mov    (%eax),%eax
c010becd:	89 45 e8             	mov    %eax,-0x18(%ebp)
    return do_execve(name, len, binary, size);
c010bed0:	ff 75 e8             	pushl  -0x18(%ebp)
c010bed3:	ff 75 ec             	pushl  -0x14(%ebp)
c010bed6:	ff 75 f0             	pushl  -0x10(%ebp)
c010bed9:	ff 75 f4             	pushl  -0xc(%ebp)
c010bedc:	e8 d1 ee ff ff       	call   c010adb2 <do_execve>
c010bee1:	83 c4 10             	add    $0x10,%esp
}
c010bee4:	c9                   	leave  
c010bee5:	c3                   	ret    

c010bee6 <sys_yield>:

static int
sys_yield(uint32_t arg[]) {
c010bee6:	55                   	push   %ebp
c010bee7:	89 e5                	mov    %esp,%ebp
c010bee9:	83 ec 08             	sub    $0x8,%esp
    return do_yield();
c010beec:	e8 e3 ef ff ff       	call   c010aed4 <do_yield>
}
c010bef1:	c9                   	leave  
c010bef2:	c3                   	ret    

c010bef3 <sys_kill>:

static int
sys_kill(uint32_t arg[]) {
c010bef3:	55                   	push   %ebp
c010bef4:	89 e5                	mov    %esp,%ebp
c010bef6:	83 ec 18             	sub    $0x18,%esp
    int pid = (int)arg[0];
c010bef9:	8b 45 08             	mov    0x8(%ebp),%eax
c010befc:	8b 00                	mov    (%eax),%eax
c010befe:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_kill(pid);
c010bf01:	83 ec 0c             	sub    $0xc,%esp
c010bf04:	ff 75 f4             	pushl  -0xc(%ebp)
c010bf07:	e8 7b f1 ff ff       	call   c010b087 <do_kill>
c010bf0c:	83 c4 10             	add    $0x10,%esp
}
c010bf0f:	c9                   	leave  
c010bf10:	c3                   	ret    

c010bf11 <sys_getpid>:

static int
sys_getpid(uint32_t arg[]) {
c010bf11:	55                   	push   %ebp
c010bf12:	89 e5                	mov    %esp,%ebp
    return current->pid;
c010bf14:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010bf19:	8b 40 04             	mov    0x4(%eax),%eax
}
c010bf1c:	5d                   	pop    %ebp
c010bf1d:	c3                   	ret    

c010bf1e <sys_putc>:

static int
sys_putc(uint32_t arg[]) {
c010bf1e:	55                   	push   %ebp
c010bf1f:	89 e5                	mov    %esp,%ebp
c010bf21:	83 ec 18             	sub    $0x18,%esp
    int c = (int)arg[0];
c010bf24:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf27:	8b 00                	mov    (%eax),%eax
c010bf29:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cputchar(c);
c010bf2c:	83 ec 0c             	sub    $0xc,%esp
c010bf2f:	ff 75 f4             	pushl  -0xc(%ebp)
c010bf32:	e8 86 43 ff ff       	call   c01002bd <cputchar>
c010bf37:	83 c4 10             	add    $0x10,%esp
    return 0;
c010bf3a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010bf3f:	c9                   	leave  
c010bf40:	c3                   	ret    

c010bf41 <sys_pgdir>:

static int
sys_pgdir(uint32_t arg[]) {
c010bf41:	55                   	push   %ebp
c010bf42:	89 e5                	mov    %esp,%ebp
c010bf44:	83 ec 08             	sub    $0x8,%esp
    print_pgdir();
c010bf47:	e8 b1 c8 ff ff       	call   c01087fd <print_pgdir>
    return 0;
c010bf4c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010bf51:	c9                   	leave  
c010bf52:	c3                   	ret    

c010bf53 <sys_gettime>:

static int
sys_gettime(uint32_t arg[]) {
c010bf53:	55                   	push   %ebp
c010bf54:	89 e5                	mov    %esp,%ebp
    return (int)ticks;
c010bf56:	a1 b8 70 1c c0       	mov    0xc01c70b8,%eax
}
c010bf5b:	5d                   	pop    %ebp
c010bf5c:	c3                   	ret    

c010bf5d <sys_lab6_set_priority>:
static int
sys_lab6_set_priority(uint32_t arg[])
{
c010bf5d:	55                   	push   %ebp
c010bf5e:	89 e5                	mov    %esp,%ebp
c010bf60:	83 ec 18             	sub    $0x18,%esp
    uint32_t priority = (uint32_t)arg[0];
c010bf63:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf66:	8b 00                	mov    (%eax),%eax
c010bf68:	89 45 f4             	mov    %eax,-0xc(%ebp)
    lab6_set_priority(priority);
c010bf6b:	83 ec 0c             	sub    $0xc,%esp
c010bf6e:	ff 75 f4             	pushl  -0xc(%ebp)
c010bf71:	e8 23 f5 ff ff       	call   c010b499 <lab6_set_priority>
c010bf76:	83 c4 10             	add    $0x10,%esp
    return 0;
c010bf79:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010bf7e:	c9                   	leave  
c010bf7f:	c3                   	ret    

c010bf80 <sys_sleep>:

static int
sys_sleep(uint32_t arg[]) {
c010bf80:	55                   	push   %ebp
c010bf81:	89 e5                	mov    %esp,%ebp
c010bf83:	83 ec 18             	sub    $0x18,%esp
    unsigned int time = (unsigned int)arg[0];
c010bf86:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf89:	8b 00                	mov    (%eax),%eax
c010bf8b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_sleep(time);
c010bf8e:	83 ec 0c             	sub    $0xc,%esp
c010bf91:	ff 75 f4             	pushl  -0xc(%ebp)
c010bf94:	e8 2b f5 ff ff       	call   c010b4c4 <do_sleep>
c010bf99:	83 c4 10             	add    $0x10,%esp
}
c010bf9c:	c9                   	leave  
c010bf9d:	c3                   	ret    

c010bf9e <syscall>:
};

#define NUM_SYSCALLS        ((sizeof(syscalls)) / (sizeof(syscalls[0])))

void
syscall(void) {
c010bf9e:	55                   	push   %ebp
c010bf9f:	89 e5                	mov    %esp,%ebp
c010bfa1:	83 ec 28             	sub    $0x28,%esp
    struct trapframe *tf = current->tf;
c010bfa4:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010bfa9:	8b 40 3c             	mov    0x3c(%eax),%eax
c010bfac:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t arg[5];
    int num = tf->tf_regs.reg_eax;
c010bfaf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bfb2:	8b 40 1c             	mov    0x1c(%eax),%eax
c010bfb5:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (num >= 0 && num < NUM_SYSCALLS) {
c010bfb8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010bfbc:	78 64                	js     c010c022 <syscall+0x84>
c010bfbe:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bfc1:	3d ff 00 00 00       	cmp    $0xff,%eax
c010bfc6:	77 5a                	ja     c010c022 <syscall+0x84>
        if (syscalls[num] != NULL) {
c010bfc8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bfcb:	8b 04 85 a0 1a 13 c0 	mov    -0x3fece560(,%eax,4),%eax
c010bfd2:	85 c0                	test   %eax,%eax
c010bfd4:	74 4c                	je     c010c022 <syscall+0x84>
            arg[0] = tf->tf_regs.reg_edx;
c010bfd6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bfd9:	8b 40 14             	mov    0x14(%eax),%eax
c010bfdc:	89 45 dc             	mov    %eax,-0x24(%ebp)
            arg[1] = tf->tf_regs.reg_ecx;
c010bfdf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bfe2:	8b 40 18             	mov    0x18(%eax),%eax
c010bfe5:	89 45 e0             	mov    %eax,-0x20(%ebp)
            arg[2] = tf->tf_regs.reg_ebx;
c010bfe8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bfeb:	8b 40 10             	mov    0x10(%eax),%eax
c010bfee:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            arg[3] = tf->tf_regs.reg_edi;
c010bff1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bff4:	8b 00                	mov    (%eax),%eax
c010bff6:	89 45 e8             	mov    %eax,-0x18(%ebp)
            arg[4] = tf->tf_regs.reg_esi;
c010bff9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bffc:	8b 40 04             	mov    0x4(%eax),%eax
c010bfff:	89 45 ec             	mov    %eax,-0x14(%ebp)
            tf->tf_regs.reg_eax = syscalls[num](arg);
c010c002:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c005:	8b 04 85 a0 1a 13 c0 	mov    -0x3fece560(,%eax,4),%eax
c010c00c:	83 ec 0c             	sub    $0xc,%esp
c010c00f:	8d 55 dc             	lea    -0x24(%ebp),%edx
c010c012:	52                   	push   %edx
c010c013:	ff d0                	call   *%eax
c010c015:	83 c4 10             	add    $0x10,%esp
c010c018:	89 c2                	mov    %eax,%edx
c010c01a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c01d:	89 50 1c             	mov    %edx,0x1c(%eax)
            return ;
c010c020:	eb 37                	jmp    c010c059 <syscall+0xbb>
        }
    }
    print_trapframe(tf);
c010c022:	83 ec 0c             	sub    $0xc,%esp
c010c025:	ff 75 f4             	pushl  -0xc(%ebp)
c010c028:	e8 e5 63 ff ff       	call   c0102412 <print_trapframe>
c010c02d:	83 c4 10             	add    $0x10,%esp
    panic("undefined syscall %d, pid = %d, name = %s.\n",
c010c030:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010c035:	8d 50 48             	lea    0x48(%eax),%edx
c010c038:	a1 28 50 1c c0       	mov    0xc01c5028,%eax
c010c03d:	8b 40 04             	mov    0x4(%eax),%eax
c010c040:	83 ec 08             	sub    $0x8,%esp
c010c043:	52                   	push   %edx
c010c044:	50                   	push   %eax
c010c045:	ff 75 f0             	pushl  -0x10(%ebp)
c010c048:	68 18 f6 10 c0       	push   $0xc010f618
c010c04d:	6a 79                	push   $0x79
c010c04f:	68 44 f6 10 c0       	push   $0xc010f644
c010c054:	e8 a4 43 ff ff       	call   c01003fd <__panic>
            num, current->pid, current->name);
}
c010c059:	c9                   	leave  
c010c05a:	c3                   	ret    

c010c05b <strlen>:
 * @s:      the input string
 *
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
c010c05b:	55                   	push   %ebp
c010c05c:	89 e5                	mov    %esp,%ebp
c010c05e:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c010c061:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (*s ++ != '\0') {
c010c068:	eb 04                	jmp    c010c06e <strlen+0x13>
        cnt ++;
c010c06a:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
    size_t cnt = 0;
    while (*s ++ != '\0') {
c010c06e:	8b 45 08             	mov    0x8(%ebp),%eax
c010c071:	8d 50 01             	lea    0x1(%eax),%edx
c010c074:	89 55 08             	mov    %edx,0x8(%ebp)
c010c077:	0f b6 00             	movzbl (%eax),%eax
c010c07a:	84 c0                	test   %al,%al
c010c07c:	75 ec                	jne    c010c06a <strlen+0xf>
        cnt ++;
    }
    return cnt;
c010c07e:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010c081:	c9                   	leave  
c010c082:	c3                   	ret    

c010c083 <strnlen>:
 * The return value is strlen(s), if that is less than @len, or
 * @len if there is no '\0' character among the first @len characters
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
c010c083:	55                   	push   %ebp
c010c084:	89 e5                	mov    %esp,%ebp
c010c086:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c010c089:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (cnt < len && *s ++ != '\0') {
c010c090:	eb 04                	jmp    c010c096 <strnlen+0x13>
        cnt ++;
c010c092:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
    size_t cnt = 0;
    while (cnt < len && *s ++ != '\0') {
c010c096:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c099:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010c09c:	73 10                	jae    c010c0ae <strnlen+0x2b>
c010c09e:	8b 45 08             	mov    0x8(%ebp),%eax
c010c0a1:	8d 50 01             	lea    0x1(%eax),%edx
c010c0a4:	89 55 08             	mov    %edx,0x8(%ebp)
c010c0a7:	0f b6 00             	movzbl (%eax),%eax
c010c0aa:	84 c0                	test   %al,%al
c010c0ac:	75 e4                	jne    c010c092 <strnlen+0xf>
        cnt ++;
    }
    return cnt;
c010c0ae:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010c0b1:	c9                   	leave  
c010c0b2:	c3                   	ret    

c010c0b3 <strcpy>:
 * To avoid overflows, the size of array pointed by @dst should be long enough to
 * contain the same string as @src (including the terminating null character), and
 * should not overlap in memory with @src.
 * */
char *
strcpy(char *dst, const char *src) {
c010c0b3:	55                   	push   %ebp
c010c0b4:	89 e5                	mov    %esp,%ebp
c010c0b6:	57                   	push   %edi
c010c0b7:	56                   	push   %esi
c010c0b8:	83 ec 20             	sub    $0x20,%esp
c010c0bb:	8b 45 08             	mov    0x8(%ebp),%eax
c010c0be:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c0c1:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c0c4:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_STRCPY
#define __HAVE_ARCH_STRCPY
static inline char *
__strcpy(char *dst, const char *src) {
    int d0, d1, d2;
    asm volatile (
c010c0c7:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010c0ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c0cd:	89 d1                	mov    %edx,%ecx
c010c0cf:	89 c2                	mov    %eax,%edx
c010c0d1:	89 ce                	mov    %ecx,%esi
c010c0d3:	89 d7                	mov    %edx,%edi
c010c0d5:	ac                   	lods   %ds:(%esi),%al
c010c0d6:	aa                   	stos   %al,%es:(%edi)
c010c0d7:	84 c0                	test   %al,%al
c010c0d9:	75 fa                	jne    c010c0d5 <strcpy+0x22>
c010c0db:	89 fa                	mov    %edi,%edx
c010c0dd:	89 f1                	mov    %esi,%ecx
c010c0df:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c010c0e2:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010c0e5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        "stosb;"
        "testb %%al, %%al;"
        "jne 1b;"
        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
        : "0" (src), "1" (dst) : "memory");
    return dst;
c010c0e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
#ifdef __HAVE_ARCH_STRCPY
    return __strcpy(dst, src);
c010c0eb:	90                   	nop
    char *p = dst;
    while ((*p ++ = *src ++) != '\0')
        /* nothing */;
    return dst;
#endif /* __HAVE_ARCH_STRCPY */
}
c010c0ec:	83 c4 20             	add    $0x20,%esp
c010c0ef:	5e                   	pop    %esi
c010c0f0:	5f                   	pop    %edi
c010c0f1:	5d                   	pop    %ebp
c010c0f2:	c3                   	ret    

c010c0f3 <strncpy>:
 * @len:    maximum number of characters to be copied from @src
 *
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
c010c0f3:	55                   	push   %ebp
c010c0f4:	89 e5                	mov    %esp,%ebp
c010c0f6:	83 ec 10             	sub    $0x10,%esp
    char *p = dst;
c010c0f9:	8b 45 08             	mov    0x8(%ebp),%eax
c010c0fc:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (len > 0) {
c010c0ff:	eb 21                	jmp    c010c122 <strncpy+0x2f>
        if ((*p = *src) != '\0') {
c010c101:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c104:	0f b6 10             	movzbl (%eax),%edx
c010c107:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c10a:	88 10                	mov    %dl,(%eax)
c010c10c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c10f:	0f b6 00             	movzbl (%eax),%eax
c010c112:	84 c0                	test   %al,%al
c010c114:	74 04                	je     c010c11a <strncpy+0x27>
            src ++;
c010c116:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
        }
        p ++, len --;
c010c11a:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010c11e:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
    char *p = dst;
    while (len > 0) {
c010c122:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010c126:	75 d9                	jne    c010c101 <strncpy+0xe>
        if ((*p = *src) != '\0') {
            src ++;
        }
        p ++, len --;
    }
    return dst;
c010c128:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010c12b:	c9                   	leave  
c010c12c:	c3                   	ret    

c010c12d <strcmp>:
 * - A value greater than zero indicates that the first character that does
 *   not match has a greater value in @s1 than in @s2;
 * - And a value less than zero indicates the opposite.
 * */
int
strcmp(const char *s1, const char *s2) {
c010c12d:	55                   	push   %ebp
c010c12e:	89 e5                	mov    %esp,%ebp
c010c130:	57                   	push   %edi
c010c131:	56                   	push   %esi
c010c132:	83 ec 20             	sub    $0x20,%esp
c010c135:	8b 45 08             	mov    0x8(%ebp),%eax
c010c138:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c13b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c13e:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_STRCMP
#define __HAVE_ARCH_STRCMP
static inline int
__strcmp(const char *s1, const char *s2) {
    int d0, d1, ret;
    asm volatile (
c010c141:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c144:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c147:	89 d1                	mov    %edx,%ecx
c010c149:	89 c2                	mov    %eax,%edx
c010c14b:	89 ce                	mov    %ecx,%esi
c010c14d:	89 d7                	mov    %edx,%edi
c010c14f:	ac                   	lods   %ds:(%esi),%al
c010c150:	ae                   	scas   %es:(%edi),%al
c010c151:	75 08                	jne    c010c15b <strcmp+0x2e>
c010c153:	84 c0                	test   %al,%al
c010c155:	75 f8                	jne    c010c14f <strcmp+0x22>
c010c157:	31 c0                	xor    %eax,%eax
c010c159:	eb 04                	jmp    c010c15f <strcmp+0x32>
c010c15b:	19 c0                	sbb    %eax,%eax
c010c15d:	0c 01                	or     $0x1,%al
c010c15f:	89 fa                	mov    %edi,%edx
c010c161:	89 f1                	mov    %esi,%ecx
c010c163:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010c166:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c010c169:	89 55 e4             	mov    %edx,-0x1c(%ebp)
        "orb $1, %%al;"
        "3:"
        : "=a" (ret), "=&S" (d0), "=&D" (d1)
        : "1" (s1), "2" (s2)
        : "memory");
    return ret;
c010c16c:	8b 45 ec             	mov    -0x14(%ebp),%eax
#ifdef __HAVE_ARCH_STRCMP
    return __strcmp(s1, s2);
c010c16f:	90                   	nop
    while (*s1 != '\0' && *s1 == *s2) {
        s1 ++, s2 ++;
    }
    return (int)((unsigned char)*s1 - (unsigned char)*s2);
#endif /* __HAVE_ARCH_STRCMP */
}
c010c170:	83 c4 20             	add    $0x20,%esp
c010c173:	5e                   	pop    %esi
c010c174:	5f                   	pop    %edi
c010c175:	5d                   	pop    %ebp
c010c176:	c3                   	ret    

c010c177 <strncmp>:
 * they are equal to each other, it continues with the following pairs until
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
c010c177:	55                   	push   %ebp
c010c178:	89 e5                	mov    %esp,%ebp
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c010c17a:	eb 0c                	jmp    c010c188 <strncmp+0x11>
        n --, s1 ++, s2 ++;
c010c17c:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c010c180:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010c184:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c010c188:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010c18c:	74 1a                	je     c010c1a8 <strncmp+0x31>
c010c18e:	8b 45 08             	mov    0x8(%ebp),%eax
c010c191:	0f b6 00             	movzbl (%eax),%eax
c010c194:	84 c0                	test   %al,%al
c010c196:	74 10                	je     c010c1a8 <strncmp+0x31>
c010c198:	8b 45 08             	mov    0x8(%ebp),%eax
c010c19b:	0f b6 10             	movzbl (%eax),%edx
c010c19e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c1a1:	0f b6 00             	movzbl (%eax),%eax
c010c1a4:	38 c2                	cmp    %al,%dl
c010c1a6:	74 d4                	je     c010c17c <strncmp+0x5>
        n --, s1 ++, s2 ++;
    }
    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
c010c1a8:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010c1ac:	74 18                	je     c010c1c6 <strncmp+0x4f>
c010c1ae:	8b 45 08             	mov    0x8(%ebp),%eax
c010c1b1:	0f b6 00             	movzbl (%eax),%eax
c010c1b4:	0f b6 d0             	movzbl %al,%edx
c010c1b7:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c1ba:	0f b6 00             	movzbl (%eax),%eax
c010c1bd:	0f b6 c0             	movzbl %al,%eax
c010c1c0:	29 c2                	sub    %eax,%edx
c010c1c2:	89 d0                	mov    %edx,%eax
c010c1c4:	eb 05                	jmp    c010c1cb <strncmp+0x54>
c010c1c6:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c1cb:	5d                   	pop    %ebp
c010c1cc:	c3                   	ret    

c010c1cd <strchr>:
 *
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
c010c1cd:	55                   	push   %ebp
c010c1ce:	89 e5                	mov    %esp,%ebp
c010c1d0:	83 ec 04             	sub    $0x4,%esp
c010c1d3:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c1d6:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c010c1d9:	eb 14                	jmp    c010c1ef <strchr+0x22>
        if (*s == c) {
c010c1db:	8b 45 08             	mov    0x8(%ebp),%eax
c010c1de:	0f b6 00             	movzbl (%eax),%eax
c010c1e1:	3a 45 fc             	cmp    -0x4(%ebp),%al
c010c1e4:	75 05                	jne    c010c1eb <strchr+0x1e>
            return (char *)s;
c010c1e6:	8b 45 08             	mov    0x8(%ebp),%eax
c010c1e9:	eb 13                	jmp    c010c1fe <strchr+0x31>
        }
        s ++;
c010c1eb:	83 45 08 01          	addl   $0x1,0x8(%ebp)
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
    while (*s != '\0') {
c010c1ef:	8b 45 08             	mov    0x8(%ebp),%eax
c010c1f2:	0f b6 00             	movzbl (%eax),%eax
c010c1f5:	84 c0                	test   %al,%al
c010c1f7:	75 e2                	jne    c010c1db <strchr+0xe>
        if (*s == c) {
            return (char *)s;
        }
        s ++;
    }
    return NULL;
c010c1f9:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c1fe:	c9                   	leave  
c010c1ff:	c3                   	ret    

c010c200 <strfind>:
 * The strfind() function is like strchr() except that if @c is
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
c010c200:	55                   	push   %ebp
c010c201:	89 e5                	mov    %esp,%ebp
c010c203:	83 ec 04             	sub    $0x4,%esp
c010c206:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c209:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c010c20c:	eb 0f                	jmp    c010c21d <strfind+0x1d>
        if (*s == c) {
c010c20e:	8b 45 08             	mov    0x8(%ebp),%eax
c010c211:	0f b6 00             	movzbl (%eax),%eax
c010c214:	3a 45 fc             	cmp    -0x4(%ebp),%al
c010c217:	74 10                	je     c010c229 <strfind+0x29>
            break;
        }
        s ++;
c010c219:	83 45 08 01          	addl   $0x1,0x8(%ebp)
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
    while (*s != '\0') {
c010c21d:	8b 45 08             	mov    0x8(%ebp),%eax
c010c220:	0f b6 00             	movzbl (%eax),%eax
c010c223:	84 c0                	test   %al,%al
c010c225:	75 e7                	jne    c010c20e <strfind+0xe>
c010c227:	eb 01                	jmp    c010c22a <strfind+0x2a>
        if (*s == c) {
            break;
c010c229:	90                   	nop
        }
        s ++;
    }
    return (char *)s;
c010c22a:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010c22d:	c9                   	leave  
c010c22e:	c3                   	ret    

c010c22f <strtol>:
 * an optional "0x" or "0X" prefix.
 *
 * The strtol() function returns the converted integral number as a long int value.
 * */
long
strtol(const char *s, char **endptr, int base) {
c010c22f:	55                   	push   %ebp
c010c230:	89 e5                	mov    %esp,%ebp
c010c232:	83 ec 10             	sub    $0x10,%esp
    int neg = 0;
c010c235:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    long val = 0;
c010c23c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
c010c243:	eb 04                	jmp    c010c249 <strtol+0x1a>
        s ++;
c010c245:	83 45 08 01          	addl   $0x1,0x8(%ebp)
strtol(const char *s, char **endptr, int base) {
    int neg = 0;
    long val = 0;

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
c010c249:	8b 45 08             	mov    0x8(%ebp),%eax
c010c24c:	0f b6 00             	movzbl (%eax),%eax
c010c24f:	3c 20                	cmp    $0x20,%al
c010c251:	74 f2                	je     c010c245 <strtol+0x16>
c010c253:	8b 45 08             	mov    0x8(%ebp),%eax
c010c256:	0f b6 00             	movzbl (%eax),%eax
c010c259:	3c 09                	cmp    $0x9,%al
c010c25b:	74 e8                	je     c010c245 <strtol+0x16>
        s ++;
    }

    // plus/minus sign
    if (*s == '+') {
c010c25d:	8b 45 08             	mov    0x8(%ebp),%eax
c010c260:	0f b6 00             	movzbl (%eax),%eax
c010c263:	3c 2b                	cmp    $0x2b,%al
c010c265:	75 06                	jne    c010c26d <strtol+0x3e>
        s ++;
c010c267:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010c26b:	eb 15                	jmp    c010c282 <strtol+0x53>
    }
    else if (*s == '-') {
c010c26d:	8b 45 08             	mov    0x8(%ebp),%eax
c010c270:	0f b6 00             	movzbl (%eax),%eax
c010c273:	3c 2d                	cmp    $0x2d,%al
c010c275:	75 0b                	jne    c010c282 <strtol+0x53>
        s ++, neg = 1;
c010c277:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010c27b:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
    }

    // hex or octal base prefix
    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
c010c282:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010c286:	74 06                	je     c010c28e <strtol+0x5f>
c010c288:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
c010c28c:	75 24                	jne    c010c2b2 <strtol+0x83>
c010c28e:	8b 45 08             	mov    0x8(%ebp),%eax
c010c291:	0f b6 00             	movzbl (%eax),%eax
c010c294:	3c 30                	cmp    $0x30,%al
c010c296:	75 1a                	jne    c010c2b2 <strtol+0x83>
c010c298:	8b 45 08             	mov    0x8(%ebp),%eax
c010c29b:	83 c0 01             	add    $0x1,%eax
c010c29e:	0f b6 00             	movzbl (%eax),%eax
c010c2a1:	3c 78                	cmp    $0x78,%al
c010c2a3:	75 0d                	jne    c010c2b2 <strtol+0x83>
        s += 2, base = 16;
c010c2a5:	83 45 08 02          	addl   $0x2,0x8(%ebp)
c010c2a9:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
c010c2b0:	eb 2a                	jmp    c010c2dc <strtol+0xad>
    }
    else if (base == 0 && s[0] == '0') {
c010c2b2:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010c2b6:	75 17                	jne    c010c2cf <strtol+0xa0>
c010c2b8:	8b 45 08             	mov    0x8(%ebp),%eax
c010c2bb:	0f b6 00             	movzbl (%eax),%eax
c010c2be:	3c 30                	cmp    $0x30,%al
c010c2c0:	75 0d                	jne    c010c2cf <strtol+0xa0>
        s ++, base = 8;
c010c2c2:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010c2c6:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
c010c2cd:	eb 0d                	jmp    c010c2dc <strtol+0xad>
    }
    else if (base == 0) {
c010c2cf:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010c2d3:	75 07                	jne    c010c2dc <strtol+0xad>
        base = 10;
c010c2d5:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

    // digits
    while (1) {
        int dig;

        if (*s >= '0' && *s <= '9') {
c010c2dc:	8b 45 08             	mov    0x8(%ebp),%eax
c010c2df:	0f b6 00             	movzbl (%eax),%eax
c010c2e2:	3c 2f                	cmp    $0x2f,%al
c010c2e4:	7e 1b                	jle    c010c301 <strtol+0xd2>
c010c2e6:	8b 45 08             	mov    0x8(%ebp),%eax
c010c2e9:	0f b6 00             	movzbl (%eax),%eax
c010c2ec:	3c 39                	cmp    $0x39,%al
c010c2ee:	7f 11                	jg     c010c301 <strtol+0xd2>
            dig = *s - '0';
c010c2f0:	8b 45 08             	mov    0x8(%ebp),%eax
c010c2f3:	0f b6 00             	movzbl (%eax),%eax
c010c2f6:	0f be c0             	movsbl %al,%eax
c010c2f9:	83 e8 30             	sub    $0x30,%eax
c010c2fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c2ff:	eb 48                	jmp    c010c349 <strtol+0x11a>
        }
        else if (*s >= 'a' && *s <= 'z') {
c010c301:	8b 45 08             	mov    0x8(%ebp),%eax
c010c304:	0f b6 00             	movzbl (%eax),%eax
c010c307:	3c 60                	cmp    $0x60,%al
c010c309:	7e 1b                	jle    c010c326 <strtol+0xf7>
c010c30b:	8b 45 08             	mov    0x8(%ebp),%eax
c010c30e:	0f b6 00             	movzbl (%eax),%eax
c010c311:	3c 7a                	cmp    $0x7a,%al
c010c313:	7f 11                	jg     c010c326 <strtol+0xf7>
            dig = *s - 'a' + 10;
c010c315:	8b 45 08             	mov    0x8(%ebp),%eax
c010c318:	0f b6 00             	movzbl (%eax),%eax
c010c31b:	0f be c0             	movsbl %al,%eax
c010c31e:	83 e8 57             	sub    $0x57,%eax
c010c321:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c324:	eb 23                	jmp    c010c349 <strtol+0x11a>
        }
        else if (*s >= 'A' && *s <= 'Z') {
c010c326:	8b 45 08             	mov    0x8(%ebp),%eax
c010c329:	0f b6 00             	movzbl (%eax),%eax
c010c32c:	3c 40                	cmp    $0x40,%al
c010c32e:	7e 3c                	jle    c010c36c <strtol+0x13d>
c010c330:	8b 45 08             	mov    0x8(%ebp),%eax
c010c333:	0f b6 00             	movzbl (%eax),%eax
c010c336:	3c 5a                	cmp    $0x5a,%al
c010c338:	7f 32                	jg     c010c36c <strtol+0x13d>
            dig = *s - 'A' + 10;
c010c33a:	8b 45 08             	mov    0x8(%ebp),%eax
c010c33d:	0f b6 00             	movzbl (%eax),%eax
c010c340:	0f be c0             	movsbl %al,%eax
c010c343:	83 e8 37             	sub    $0x37,%eax
c010c346:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        else {
            break;
        }
        if (dig >= base) {
c010c349:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c34c:	3b 45 10             	cmp    0x10(%ebp),%eax
c010c34f:	7d 1a                	jge    c010c36b <strtol+0x13c>
            break;
        }
        s ++, val = (val * base) + dig;
c010c351:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010c355:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c358:	0f af 45 10          	imul   0x10(%ebp),%eax
c010c35c:	89 c2                	mov    %eax,%edx
c010c35e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c361:	01 d0                	add    %edx,%eax
c010c363:	89 45 f8             	mov    %eax,-0x8(%ebp)
        // we don't properly detect overflow!
    }
c010c366:	e9 71 ff ff ff       	jmp    c010c2dc <strtol+0xad>
        }
        else {
            break;
        }
        if (dig >= base) {
            break;
c010c36b:	90                   	nop
        }
        s ++, val = (val * base) + dig;
        // we don't properly detect overflow!
    }

    if (endptr) {
c010c36c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010c370:	74 08                	je     c010c37a <strtol+0x14b>
        *endptr = (char *) s;
c010c372:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c375:	8b 55 08             	mov    0x8(%ebp),%edx
c010c378:	89 10                	mov    %edx,(%eax)
    }
    return (neg ? -val : val);
c010c37a:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c010c37e:	74 07                	je     c010c387 <strtol+0x158>
c010c380:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c383:	f7 d8                	neg    %eax
c010c385:	eb 03                	jmp    c010c38a <strtol+0x15b>
c010c387:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c010c38a:	c9                   	leave  
c010c38b:	c3                   	ret    

c010c38c <memset>:
 * @n:      number of bytes to be set to the value
 *
 * The memset() function returns @s.
 * */
void *
memset(void *s, char c, size_t n) {
c010c38c:	55                   	push   %ebp
c010c38d:	89 e5                	mov    %esp,%ebp
c010c38f:	57                   	push   %edi
c010c390:	83 ec 24             	sub    $0x24,%esp
c010c393:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c396:	88 45 d8             	mov    %al,-0x28(%ebp)
#ifdef __HAVE_ARCH_MEMSET
    return __memset(s, c, n);
c010c399:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
c010c39d:	8b 55 08             	mov    0x8(%ebp),%edx
c010c3a0:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010c3a3:	88 45 f7             	mov    %al,-0x9(%ebp)
c010c3a6:	8b 45 10             	mov    0x10(%ebp),%eax
c010c3a9:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_MEMSET
#define __HAVE_ARCH_MEMSET
static inline void *
__memset(void *s, char c, size_t n) {
    int d0, d1;
    asm volatile (
c010c3ac:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010c3af:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c010c3b3:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010c3b6:	89 d7                	mov    %edx,%edi
c010c3b8:	f3 aa                	rep stos %al,%es:(%edi)
c010c3ba:	89 fa                	mov    %edi,%edx
c010c3bc:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c010c3bf:	89 55 e8             	mov    %edx,-0x18(%ebp)
        "rep; stosb;"
        : "=&c" (d0), "=&D" (d1)
        : "0" (n), "a" (c), "1" (s)
        : "memory");
    return s;
c010c3c2:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c3c5:	90                   	nop
    while (n -- > 0) {
        *p ++ = c;
    }
    return s;
#endif /* __HAVE_ARCH_MEMSET */
}
c010c3c6:	83 c4 24             	add    $0x24,%esp
c010c3c9:	5f                   	pop    %edi
c010c3ca:	5d                   	pop    %ebp
c010c3cb:	c3                   	ret    

c010c3cc <memmove>:
 * @n:      number of bytes to copy
 *
 * The memmove() function returns @dst.
 * */
void *
memmove(void *dst, const void *src, size_t n) {
c010c3cc:	55                   	push   %ebp
c010c3cd:	89 e5                	mov    %esp,%ebp
c010c3cf:	57                   	push   %edi
c010c3d0:	56                   	push   %esi
c010c3d1:	53                   	push   %ebx
c010c3d2:	83 ec 30             	sub    $0x30,%esp
c010c3d5:	8b 45 08             	mov    0x8(%ebp),%eax
c010c3d8:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c3db:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c3de:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010c3e1:	8b 45 10             	mov    0x10(%ebp),%eax
c010c3e4:	89 45 e8             	mov    %eax,-0x18(%ebp)

#ifndef __HAVE_ARCH_MEMMOVE
#define __HAVE_ARCH_MEMMOVE
static inline void *
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
c010c3e7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c3ea:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010c3ed:	73 42                	jae    c010c431 <memmove+0x65>
c010c3ef:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c3f2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010c3f5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c3f8:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010c3fb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c3fe:	89 45 dc             	mov    %eax,-0x24(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c010c401:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c404:	c1 e8 02             	shr    $0x2,%eax
c010c407:	89 c1                	mov    %eax,%ecx
#ifndef __HAVE_ARCH_MEMCPY
#define __HAVE_ARCH_MEMCPY
static inline void *
__memcpy(void *dst, const void *src, size_t n) {
    int d0, d1, d2;
    asm volatile (
c010c409:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010c40c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c40f:	89 d7                	mov    %edx,%edi
c010c411:	89 c6                	mov    %eax,%esi
c010c413:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010c415:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c010c418:	83 e1 03             	and    $0x3,%ecx
c010c41b:	74 02                	je     c010c41f <memmove+0x53>
c010c41d:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010c41f:	89 f0                	mov    %esi,%eax
c010c421:	89 fa                	mov    %edi,%edx
c010c423:	89 4d d8             	mov    %ecx,-0x28(%ebp)
c010c426:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010c429:	89 45 d0             	mov    %eax,-0x30(%ebp)
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
        : "memory");
    return dst;
c010c42c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
#ifdef __HAVE_ARCH_MEMMOVE
    return __memmove(dst, src, n);
c010c42f:	eb 36                	jmp    c010c467 <memmove+0x9b>
    asm volatile (
        "std;"
        "rep; movsb;"
        "cld;"
        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
c010c431:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c434:	8d 50 ff             	lea    -0x1(%eax),%edx
c010c437:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c43a:	01 c2                	add    %eax,%edx
c010c43c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c43f:	8d 48 ff             	lea    -0x1(%eax),%ecx
c010c442:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c445:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
        return __memcpy(dst, src, n);
    }
    int d0, d1, d2;
    asm volatile (
c010c448:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c44b:	89 c1                	mov    %eax,%ecx
c010c44d:	89 d8                	mov    %ebx,%eax
c010c44f:	89 d6                	mov    %edx,%esi
c010c451:	89 c7                	mov    %eax,%edi
c010c453:	fd                   	std    
c010c454:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010c456:	fc                   	cld    
c010c457:	89 f8                	mov    %edi,%eax
c010c459:	89 f2                	mov    %esi,%edx
c010c45b:	89 4d cc             	mov    %ecx,-0x34(%ebp)
c010c45e:	89 55 c8             	mov    %edx,-0x38(%ebp)
c010c461:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        "rep; movsb;"
        "cld;"
        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
        : "memory");
    return dst;
c010c464:	8b 45 f0             	mov    -0x10(%ebp),%eax
            *d ++ = *s ++;
        }
    }
    return dst;
#endif /* __HAVE_ARCH_MEMMOVE */
}
c010c467:	83 c4 30             	add    $0x30,%esp
c010c46a:	5b                   	pop    %ebx
c010c46b:	5e                   	pop    %esi
c010c46c:	5f                   	pop    %edi
c010c46d:	5d                   	pop    %ebp
c010c46e:	c3                   	ret    

c010c46f <memcpy>:
 * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
 * by both @src and @dst, should be at least @n bytes, and should not overlap
 * (for overlapping memory area, memmove is a safer approach).
 * */
void *
memcpy(void *dst, const void *src, size_t n) {
c010c46f:	55                   	push   %ebp
c010c470:	89 e5                	mov    %esp,%ebp
c010c472:	57                   	push   %edi
c010c473:	56                   	push   %esi
c010c474:	83 ec 20             	sub    $0x20,%esp
c010c477:	8b 45 08             	mov    0x8(%ebp),%eax
c010c47a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c47d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c480:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c483:	8b 45 10             	mov    0x10(%ebp),%eax
c010c486:	89 45 ec             	mov    %eax,-0x14(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c010c489:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c48c:	c1 e8 02             	shr    $0x2,%eax
c010c48f:	89 c1                	mov    %eax,%ecx
#ifndef __HAVE_ARCH_MEMCPY
#define __HAVE_ARCH_MEMCPY
static inline void *
__memcpy(void *dst, const void *src, size_t n) {
    int d0, d1, d2;
    asm volatile (
c010c491:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c494:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c497:	89 d7                	mov    %edx,%edi
c010c499:	89 c6                	mov    %eax,%esi
c010c49b:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010c49d:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c010c4a0:	83 e1 03             	and    $0x3,%ecx
c010c4a3:	74 02                	je     c010c4a7 <memcpy+0x38>
c010c4a5:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010c4a7:	89 f0                	mov    %esi,%eax
c010c4a9:	89 fa                	mov    %edi,%edx
c010c4ab:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c010c4ae:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c010c4b1:	89 45 e0             	mov    %eax,-0x20(%ebp)
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
        : "memory");
    return dst;
c010c4b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
#ifdef __HAVE_ARCH_MEMCPY
    return __memcpy(dst, src, n);
c010c4b7:	90                   	nop
    while (n -- > 0) {
        *d ++ = *s ++;
    }
    return dst;
#endif /* __HAVE_ARCH_MEMCPY */
}
c010c4b8:	83 c4 20             	add    $0x20,%esp
c010c4bb:	5e                   	pop    %esi
c010c4bc:	5f                   	pop    %edi
c010c4bd:	5d                   	pop    %ebp
c010c4be:	c3                   	ret    

c010c4bf <memcmp>:
 *   match in both memory blocks has a greater value in @v1 than in @v2
 *   as if evaluated as unsigned char values;
 * - And a value less than zero indicates the opposite.
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
c010c4bf:	55                   	push   %ebp
c010c4c0:	89 e5                	mov    %esp,%ebp
c010c4c2:	83 ec 10             	sub    $0x10,%esp
    const char *s1 = (const char *)v1;
c010c4c5:	8b 45 08             	mov    0x8(%ebp),%eax
c010c4c8:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s2 = (const char *)v2;
c010c4cb:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c4ce:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (n -- > 0) {
c010c4d1:	eb 30                	jmp    c010c503 <memcmp+0x44>
        if (*s1 != *s2) {
c010c4d3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c4d6:	0f b6 10             	movzbl (%eax),%edx
c010c4d9:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c4dc:	0f b6 00             	movzbl (%eax),%eax
c010c4df:	38 c2                	cmp    %al,%dl
c010c4e1:	74 18                	je     c010c4fb <memcmp+0x3c>
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
c010c4e3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c4e6:	0f b6 00             	movzbl (%eax),%eax
c010c4e9:	0f b6 d0             	movzbl %al,%edx
c010c4ec:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c4ef:	0f b6 00             	movzbl (%eax),%eax
c010c4f2:	0f b6 c0             	movzbl %al,%eax
c010c4f5:	29 c2                	sub    %eax,%edx
c010c4f7:	89 d0                	mov    %edx,%eax
c010c4f9:	eb 1a                	jmp    c010c515 <memcmp+0x56>
        }
        s1 ++, s2 ++;
c010c4fb:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010c4ff:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
    const char *s1 = (const char *)v1;
    const char *s2 = (const char *)v2;
    while (n -- > 0) {
c010c503:	8b 45 10             	mov    0x10(%ebp),%eax
c010c506:	8d 50 ff             	lea    -0x1(%eax),%edx
c010c509:	89 55 10             	mov    %edx,0x10(%ebp)
c010c50c:	85 c0                	test   %eax,%eax
c010c50e:	75 c3                	jne    c010c4d3 <memcmp+0x14>
        if (*s1 != *s2) {
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
        }
        s1 ++, s2 ++;
    }
    return 0;
c010c510:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c515:	c9                   	leave  
c010c516:	c3                   	ret    

c010c517 <printnum>:
 * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
 * @padc:       character that padded on the left if the actual width is less than @width
 * */
static void
printnum(void (*putch)(int, void*), void *putdat,
        unsigned long long num, unsigned base, int width, int padc) {
c010c517:	55                   	push   %ebp
c010c518:	89 e5                	mov    %esp,%ebp
c010c51a:	83 ec 38             	sub    $0x38,%esp
c010c51d:	8b 45 10             	mov    0x10(%ebp),%eax
c010c520:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010c523:	8b 45 14             	mov    0x14(%ebp),%eax
c010c526:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    unsigned long long result = num;
c010c529:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010c52c:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010c52f:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010c532:	89 55 ec             	mov    %edx,-0x14(%ebp)
    unsigned mod = do_div(result, base);
c010c535:	8b 45 18             	mov    0x18(%ebp),%eax
c010c538:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010c53b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c53e:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010c541:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010c544:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010c547:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c54a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c54d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010c551:	74 1c                	je     c010c56f <printnum+0x58>
c010c553:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c556:	ba 00 00 00 00       	mov    $0x0,%edx
c010c55b:	f7 75 e4             	divl   -0x1c(%ebp)
c010c55e:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010c561:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c564:	ba 00 00 00 00       	mov    $0x0,%edx
c010c569:	f7 75 e4             	divl   -0x1c(%ebp)
c010c56c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c56f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c572:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c575:	f7 75 e4             	divl   -0x1c(%ebp)
c010c578:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010c57b:	89 55 dc             	mov    %edx,-0x24(%ebp)
c010c57e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c581:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010c584:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010c587:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010c58a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c58d:	89 45 d8             	mov    %eax,-0x28(%ebp)

    // first recursively print all preceding (more significant) digits
    if (num >= base) {
c010c590:	8b 45 18             	mov    0x18(%ebp),%eax
c010c593:	ba 00 00 00 00       	mov    $0x0,%edx
c010c598:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c010c59b:	77 41                	ja     c010c5de <printnum+0xc7>
c010c59d:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c010c5a0:	72 05                	jb     c010c5a7 <printnum+0x90>
c010c5a2:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c010c5a5:	77 37                	ja     c010c5de <printnum+0xc7>
        printnum(putch, putdat, result, base, width - 1, padc);
c010c5a7:	8b 45 1c             	mov    0x1c(%ebp),%eax
c010c5aa:	83 e8 01             	sub    $0x1,%eax
c010c5ad:	83 ec 04             	sub    $0x4,%esp
c010c5b0:	ff 75 20             	pushl  0x20(%ebp)
c010c5b3:	50                   	push   %eax
c010c5b4:	ff 75 18             	pushl  0x18(%ebp)
c010c5b7:	ff 75 ec             	pushl  -0x14(%ebp)
c010c5ba:	ff 75 e8             	pushl  -0x18(%ebp)
c010c5bd:	ff 75 0c             	pushl  0xc(%ebp)
c010c5c0:	ff 75 08             	pushl  0x8(%ebp)
c010c5c3:	e8 4f ff ff ff       	call   c010c517 <printnum>
c010c5c8:	83 c4 20             	add    $0x20,%esp
c010c5cb:	eb 1b                	jmp    c010c5e8 <printnum+0xd1>
    } else {
        // print any needed pad characters before first digit
        while (-- width > 0)
            putch(padc, putdat);
c010c5cd:	83 ec 08             	sub    $0x8,%esp
c010c5d0:	ff 75 0c             	pushl  0xc(%ebp)
c010c5d3:	ff 75 20             	pushl  0x20(%ebp)
c010c5d6:	8b 45 08             	mov    0x8(%ebp),%eax
c010c5d9:	ff d0                	call   *%eax
c010c5db:	83 c4 10             	add    $0x10,%esp
    // first recursively print all preceding (more significant) digits
    if (num >= base) {
        printnum(putch, putdat, result, base, width - 1, padc);
    } else {
        // print any needed pad characters before first digit
        while (-- width > 0)
c010c5de:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
c010c5e2:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c010c5e6:	7f e5                	jg     c010c5cd <printnum+0xb6>
            putch(padc, putdat);
    }
    // then print this (the least significant) digit
    putch("0123456789abcdef"[mod], putdat);
c010c5e8:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010c5eb:	05 64 f7 10 c0       	add    $0xc010f764,%eax
c010c5f0:	0f b6 00             	movzbl (%eax),%eax
c010c5f3:	0f be c0             	movsbl %al,%eax
c010c5f6:	83 ec 08             	sub    $0x8,%esp
c010c5f9:	ff 75 0c             	pushl  0xc(%ebp)
c010c5fc:	50                   	push   %eax
c010c5fd:	8b 45 08             	mov    0x8(%ebp),%eax
c010c600:	ff d0                	call   *%eax
c010c602:	83 c4 10             	add    $0x10,%esp
}
c010c605:	90                   	nop
c010c606:	c9                   	leave  
c010c607:	c3                   	ret    

c010c608 <getuint>:
 * getuint - get an unsigned int of various possible sizes from a varargs list
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static unsigned long long
getuint(va_list *ap, int lflag) {
c010c608:	55                   	push   %ebp
c010c609:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c010c60b:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c010c60f:	7e 14                	jle    c010c625 <getuint+0x1d>
        return va_arg(*ap, unsigned long long);
c010c611:	8b 45 08             	mov    0x8(%ebp),%eax
c010c614:	8b 00                	mov    (%eax),%eax
c010c616:	8d 48 08             	lea    0x8(%eax),%ecx
c010c619:	8b 55 08             	mov    0x8(%ebp),%edx
c010c61c:	89 0a                	mov    %ecx,(%edx)
c010c61e:	8b 50 04             	mov    0x4(%eax),%edx
c010c621:	8b 00                	mov    (%eax),%eax
c010c623:	eb 30                	jmp    c010c655 <getuint+0x4d>
    }
    else if (lflag) {
c010c625:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010c629:	74 16                	je     c010c641 <getuint+0x39>
        return va_arg(*ap, unsigned long);
c010c62b:	8b 45 08             	mov    0x8(%ebp),%eax
c010c62e:	8b 00                	mov    (%eax),%eax
c010c630:	8d 48 04             	lea    0x4(%eax),%ecx
c010c633:	8b 55 08             	mov    0x8(%ebp),%edx
c010c636:	89 0a                	mov    %ecx,(%edx)
c010c638:	8b 00                	mov    (%eax),%eax
c010c63a:	ba 00 00 00 00       	mov    $0x0,%edx
c010c63f:	eb 14                	jmp    c010c655 <getuint+0x4d>
    }
    else {
        return va_arg(*ap, unsigned int);
c010c641:	8b 45 08             	mov    0x8(%ebp),%eax
c010c644:	8b 00                	mov    (%eax),%eax
c010c646:	8d 48 04             	lea    0x4(%eax),%ecx
c010c649:	8b 55 08             	mov    0x8(%ebp),%edx
c010c64c:	89 0a                	mov    %ecx,(%edx)
c010c64e:	8b 00                	mov    (%eax),%eax
c010c650:	ba 00 00 00 00       	mov    $0x0,%edx
    }
}
c010c655:	5d                   	pop    %ebp
c010c656:	c3                   	ret    

c010c657 <getint>:
 * getint - same as getuint but signed, we can't use getuint because of sign extension
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static long long
getint(va_list *ap, int lflag) {
c010c657:	55                   	push   %ebp
c010c658:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c010c65a:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c010c65e:	7e 14                	jle    c010c674 <getint+0x1d>
        return va_arg(*ap, long long);
c010c660:	8b 45 08             	mov    0x8(%ebp),%eax
c010c663:	8b 00                	mov    (%eax),%eax
c010c665:	8d 48 08             	lea    0x8(%eax),%ecx
c010c668:	8b 55 08             	mov    0x8(%ebp),%edx
c010c66b:	89 0a                	mov    %ecx,(%edx)
c010c66d:	8b 50 04             	mov    0x4(%eax),%edx
c010c670:	8b 00                	mov    (%eax),%eax
c010c672:	eb 28                	jmp    c010c69c <getint+0x45>
    }
    else if (lflag) {
c010c674:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010c678:	74 12                	je     c010c68c <getint+0x35>
        return va_arg(*ap, long);
c010c67a:	8b 45 08             	mov    0x8(%ebp),%eax
c010c67d:	8b 00                	mov    (%eax),%eax
c010c67f:	8d 48 04             	lea    0x4(%eax),%ecx
c010c682:	8b 55 08             	mov    0x8(%ebp),%edx
c010c685:	89 0a                	mov    %ecx,(%edx)
c010c687:	8b 00                	mov    (%eax),%eax
c010c689:	99                   	cltd   
c010c68a:	eb 10                	jmp    c010c69c <getint+0x45>
    }
    else {
        return va_arg(*ap, int);
c010c68c:	8b 45 08             	mov    0x8(%ebp),%eax
c010c68f:	8b 00                	mov    (%eax),%eax
c010c691:	8d 48 04             	lea    0x4(%eax),%ecx
c010c694:	8b 55 08             	mov    0x8(%ebp),%edx
c010c697:	89 0a                	mov    %ecx,(%edx)
c010c699:	8b 00                	mov    (%eax),%eax
c010c69b:	99                   	cltd   
    }
}
c010c69c:	5d                   	pop    %ebp
c010c69d:	c3                   	ret    

c010c69e <printfmt>:
 * @putch:      specified putch function, print a single character
 * @putdat:     used by @putch function
 * @fmt:        the format string to use
 * */
void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
c010c69e:	55                   	push   %ebp
c010c69f:	89 e5                	mov    %esp,%ebp
c010c6a1:	83 ec 18             	sub    $0x18,%esp
    va_list ap;

    va_start(ap, fmt);
c010c6a4:	8d 45 14             	lea    0x14(%ebp),%eax
c010c6a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    vprintfmt(putch, putdat, fmt, ap);
c010c6aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c6ad:	50                   	push   %eax
c010c6ae:	ff 75 10             	pushl  0x10(%ebp)
c010c6b1:	ff 75 0c             	pushl  0xc(%ebp)
c010c6b4:	ff 75 08             	pushl  0x8(%ebp)
c010c6b7:	e8 06 00 00 00       	call   c010c6c2 <vprintfmt>
c010c6bc:	83 c4 10             	add    $0x10,%esp
    va_end(ap);
}
c010c6bf:	90                   	nop
c010c6c0:	c9                   	leave  
c010c6c1:	c3                   	ret    

c010c6c2 <vprintfmt>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want printfmt() instead.
 * */
void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
c010c6c2:	55                   	push   %ebp
c010c6c3:	89 e5                	mov    %esp,%ebp
c010c6c5:	56                   	push   %esi
c010c6c6:	53                   	push   %ebx
c010c6c7:	83 ec 20             	sub    $0x20,%esp
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c010c6ca:	eb 17                	jmp    c010c6e3 <vprintfmt+0x21>
            if (ch == '\0') {
c010c6cc:	85 db                	test   %ebx,%ebx
c010c6ce:	0f 84 8e 03 00 00    	je     c010ca62 <vprintfmt+0x3a0>
                return;
            }
            putch(ch, putdat);
c010c6d4:	83 ec 08             	sub    $0x8,%esp
c010c6d7:	ff 75 0c             	pushl  0xc(%ebp)
c010c6da:	53                   	push   %ebx
c010c6db:	8b 45 08             	mov    0x8(%ebp),%eax
c010c6de:	ff d0                	call   *%eax
c010c6e0:	83 c4 10             	add    $0x10,%esp
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c010c6e3:	8b 45 10             	mov    0x10(%ebp),%eax
c010c6e6:	8d 50 01             	lea    0x1(%eax),%edx
c010c6e9:	89 55 10             	mov    %edx,0x10(%ebp)
c010c6ec:	0f b6 00             	movzbl (%eax),%eax
c010c6ef:	0f b6 d8             	movzbl %al,%ebx
c010c6f2:	83 fb 25             	cmp    $0x25,%ebx
c010c6f5:	75 d5                	jne    c010c6cc <vprintfmt+0xa>
            }
            putch(ch, putdat);
        }

        // Process a %-escape sequence
        char padc = ' ';
c010c6f7:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
        width = precision = -1;
c010c6fb:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
c010c702:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c705:	89 45 e8             	mov    %eax,-0x18(%ebp)
        lflag = altflag = 0;
c010c708:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c010c70f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c712:	89 45 e0             	mov    %eax,-0x20(%ebp)

    reswitch:
        switch (ch = *(unsigned char *)fmt ++) {
c010c715:	8b 45 10             	mov    0x10(%ebp),%eax
c010c718:	8d 50 01             	lea    0x1(%eax),%edx
c010c71b:	89 55 10             	mov    %edx,0x10(%ebp)
c010c71e:	0f b6 00             	movzbl (%eax),%eax
c010c721:	0f b6 d8             	movzbl %al,%ebx
c010c724:	8d 43 dd             	lea    -0x23(%ebx),%eax
c010c727:	83 f8 55             	cmp    $0x55,%eax
c010c72a:	0f 87 05 03 00 00    	ja     c010ca35 <vprintfmt+0x373>
c010c730:	8b 04 85 88 f7 10 c0 	mov    -0x3fef0878(,%eax,4),%eax
c010c737:	ff e0                	jmp    *%eax

        // flag to pad on the right
        case '-':
            padc = '-';
c010c739:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
            goto reswitch;
c010c73d:	eb d6                	jmp    c010c715 <vprintfmt+0x53>

        // flag to pad with 0's instead of spaces
        case '0':
            padc = '0';
c010c73f:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
            goto reswitch;
c010c743:	eb d0                	jmp    c010c715 <vprintfmt+0x53>

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
c010c745:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
                precision = precision * 10 + ch - '0';
c010c74c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010c74f:	89 d0                	mov    %edx,%eax
c010c751:	c1 e0 02             	shl    $0x2,%eax
c010c754:	01 d0                	add    %edx,%eax
c010c756:	01 c0                	add    %eax,%eax
c010c758:	01 d8                	add    %ebx,%eax
c010c75a:	83 e8 30             	sub    $0x30,%eax
c010c75d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                ch = *fmt;
c010c760:	8b 45 10             	mov    0x10(%ebp),%eax
c010c763:	0f b6 00             	movzbl (%eax),%eax
c010c766:	0f be d8             	movsbl %al,%ebx
                if (ch < '0' || ch > '9') {
c010c769:	83 fb 2f             	cmp    $0x2f,%ebx
c010c76c:	7e 39                	jle    c010c7a7 <vprintfmt+0xe5>
c010c76e:	83 fb 39             	cmp    $0x39,%ebx
c010c771:	7f 34                	jg     c010c7a7 <vprintfmt+0xe5>
            padc = '0';
            goto reswitch;

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
c010c773:	83 45 10 01          	addl   $0x1,0x10(%ebp)
                precision = precision * 10 + ch - '0';
                ch = *fmt;
                if (ch < '0' || ch > '9') {
                    break;
                }
            }
c010c777:	eb d3                	jmp    c010c74c <vprintfmt+0x8a>
            goto process_precision;

        case '*':
            precision = va_arg(ap, int);
c010c779:	8b 45 14             	mov    0x14(%ebp),%eax
c010c77c:	8d 50 04             	lea    0x4(%eax),%edx
c010c77f:	89 55 14             	mov    %edx,0x14(%ebp)
c010c782:	8b 00                	mov    (%eax),%eax
c010c784:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            goto process_precision;
c010c787:	eb 1f                	jmp    c010c7a8 <vprintfmt+0xe6>

        case '.':
            if (width < 0)
c010c789:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010c78d:	79 86                	jns    c010c715 <vprintfmt+0x53>
                width = 0;
c010c78f:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
            goto reswitch;
c010c796:	e9 7a ff ff ff       	jmp    c010c715 <vprintfmt+0x53>

        case '#':
            altflag = 1;
c010c79b:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
            goto reswitch;
c010c7a2:	e9 6e ff ff ff       	jmp    c010c715 <vprintfmt+0x53>
                ch = *fmt;
                if (ch < '0' || ch > '9') {
                    break;
                }
            }
            goto process_precision;
c010c7a7:	90                   	nop
        case '#':
            altflag = 1;
            goto reswitch;

        process_precision:
            if (width < 0)
c010c7a8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010c7ac:	0f 89 63 ff ff ff    	jns    c010c715 <vprintfmt+0x53>
                width = precision, precision = -1;
c010c7b2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c7b5:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010c7b8:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
            goto reswitch;
c010c7bf:	e9 51 ff ff ff       	jmp    c010c715 <vprintfmt+0x53>

        // long flag (doubled for long long)
        case 'l':
            lflag ++;
c010c7c4:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
            goto reswitch;
c010c7c8:	e9 48 ff ff ff       	jmp    c010c715 <vprintfmt+0x53>

        // character
        case 'c':
            putch(va_arg(ap, int), putdat);
c010c7cd:	8b 45 14             	mov    0x14(%ebp),%eax
c010c7d0:	8d 50 04             	lea    0x4(%eax),%edx
c010c7d3:	89 55 14             	mov    %edx,0x14(%ebp)
c010c7d6:	8b 00                	mov    (%eax),%eax
c010c7d8:	83 ec 08             	sub    $0x8,%esp
c010c7db:	ff 75 0c             	pushl  0xc(%ebp)
c010c7de:	50                   	push   %eax
c010c7df:	8b 45 08             	mov    0x8(%ebp),%eax
c010c7e2:	ff d0                	call   *%eax
c010c7e4:	83 c4 10             	add    $0x10,%esp
            break;
c010c7e7:	e9 71 02 00 00       	jmp    c010ca5d <vprintfmt+0x39b>

        // error message
        case 'e':
            err = va_arg(ap, int);
c010c7ec:	8b 45 14             	mov    0x14(%ebp),%eax
c010c7ef:	8d 50 04             	lea    0x4(%eax),%edx
c010c7f2:	89 55 14             	mov    %edx,0x14(%ebp)
c010c7f5:	8b 18                	mov    (%eax),%ebx
            if (err < 0) {
c010c7f7:	85 db                	test   %ebx,%ebx
c010c7f9:	79 02                	jns    c010c7fd <vprintfmt+0x13b>
                err = -err;
c010c7fb:	f7 db                	neg    %ebx
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
c010c7fd:	83 fb 18             	cmp    $0x18,%ebx
c010c800:	7f 0b                	jg     c010c80d <vprintfmt+0x14b>
c010c802:	8b 34 9d 00 f7 10 c0 	mov    -0x3fef0900(,%ebx,4),%esi
c010c809:	85 f6                	test   %esi,%esi
c010c80b:	75 19                	jne    c010c826 <vprintfmt+0x164>
                printfmt(putch, putdat, "error %d", err);
c010c80d:	53                   	push   %ebx
c010c80e:	68 75 f7 10 c0       	push   $0xc010f775
c010c813:	ff 75 0c             	pushl  0xc(%ebp)
c010c816:	ff 75 08             	pushl  0x8(%ebp)
c010c819:	e8 80 fe ff ff       	call   c010c69e <printfmt>
c010c81e:	83 c4 10             	add    $0x10,%esp
            }
            else {
                printfmt(putch, putdat, "%s", p);
            }
            break;
c010c821:	e9 37 02 00 00       	jmp    c010ca5d <vprintfmt+0x39b>
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
                printfmt(putch, putdat, "error %d", err);
            }
            else {
                printfmt(putch, putdat, "%s", p);
c010c826:	56                   	push   %esi
c010c827:	68 7e f7 10 c0       	push   $0xc010f77e
c010c82c:	ff 75 0c             	pushl  0xc(%ebp)
c010c82f:	ff 75 08             	pushl  0x8(%ebp)
c010c832:	e8 67 fe ff ff       	call   c010c69e <printfmt>
c010c837:	83 c4 10             	add    $0x10,%esp
            }
            break;
c010c83a:	e9 1e 02 00 00       	jmp    c010ca5d <vprintfmt+0x39b>

        // string
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
c010c83f:	8b 45 14             	mov    0x14(%ebp),%eax
c010c842:	8d 50 04             	lea    0x4(%eax),%edx
c010c845:	89 55 14             	mov    %edx,0x14(%ebp)
c010c848:	8b 30                	mov    (%eax),%esi
c010c84a:	85 f6                	test   %esi,%esi
c010c84c:	75 05                	jne    c010c853 <vprintfmt+0x191>
                p = "(null)";
c010c84e:	be 81 f7 10 c0       	mov    $0xc010f781,%esi
            }
            if (width > 0 && padc != '-') {
c010c853:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010c857:	7e 76                	jle    c010c8cf <vprintfmt+0x20d>
c010c859:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
c010c85d:	74 70                	je     c010c8cf <vprintfmt+0x20d>
                for (width -= strnlen(p, precision); width > 0; width --) {
c010c85f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c862:	83 ec 08             	sub    $0x8,%esp
c010c865:	50                   	push   %eax
c010c866:	56                   	push   %esi
c010c867:	e8 17 f8 ff ff       	call   c010c083 <strnlen>
c010c86c:	83 c4 10             	add    $0x10,%esp
c010c86f:	89 c2                	mov    %eax,%edx
c010c871:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c874:	29 d0                	sub    %edx,%eax
c010c876:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010c879:	eb 17                	jmp    c010c892 <vprintfmt+0x1d0>
                    putch(padc, putdat);
c010c87b:	0f be 45 db          	movsbl -0x25(%ebp),%eax
c010c87f:	83 ec 08             	sub    $0x8,%esp
c010c882:	ff 75 0c             	pushl  0xc(%ebp)
c010c885:	50                   	push   %eax
c010c886:	8b 45 08             	mov    0x8(%ebp),%eax
c010c889:	ff d0                	call   *%eax
c010c88b:	83 c4 10             	add    $0x10,%esp
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
                p = "(null)";
            }
            if (width > 0 && padc != '-') {
                for (width -= strnlen(p, precision); width > 0; width --) {
c010c88e:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c010c892:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010c896:	7f e3                	jg     c010c87b <vprintfmt+0x1b9>
                    putch(padc, putdat);
                }
            }
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c010c898:	eb 35                	jmp    c010c8cf <vprintfmt+0x20d>
                if (altflag && (ch < ' ' || ch > '~')) {
c010c89a:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010c89e:	74 1c                	je     c010c8bc <vprintfmt+0x1fa>
c010c8a0:	83 fb 1f             	cmp    $0x1f,%ebx
c010c8a3:	7e 05                	jle    c010c8aa <vprintfmt+0x1e8>
c010c8a5:	83 fb 7e             	cmp    $0x7e,%ebx
c010c8a8:	7e 12                	jle    c010c8bc <vprintfmt+0x1fa>
                    putch('?', putdat);
c010c8aa:	83 ec 08             	sub    $0x8,%esp
c010c8ad:	ff 75 0c             	pushl  0xc(%ebp)
c010c8b0:	6a 3f                	push   $0x3f
c010c8b2:	8b 45 08             	mov    0x8(%ebp),%eax
c010c8b5:	ff d0                	call   *%eax
c010c8b7:	83 c4 10             	add    $0x10,%esp
c010c8ba:	eb 0f                	jmp    c010c8cb <vprintfmt+0x209>
                }
                else {
                    putch(ch, putdat);
c010c8bc:	83 ec 08             	sub    $0x8,%esp
c010c8bf:	ff 75 0c             	pushl  0xc(%ebp)
c010c8c2:	53                   	push   %ebx
c010c8c3:	8b 45 08             	mov    0x8(%ebp),%eax
c010c8c6:	ff d0                	call   *%eax
c010c8c8:	83 c4 10             	add    $0x10,%esp
            if (width > 0 && padc != '-') {
                for (width -= strnlen(p, precision); width > 0; width --) {
                    putch(padc, putdat);
                }
            }
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c010c8cb:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c010c8cf:	89 f0                	mov    %esi,%eax
c010c8d1:	8d 70 01             	lea    0x1(%eax),%esi
c010c8d4:	0f b6 00             	movzbl (%eax),%eax
c010c8d7:	0f be d8             	movsbl %al,%ebx
c010c8da:	85 db                	test   %ebx,%ebx
c010c8dc:	74 26                	je     c010c904 <vprintfmt+0x242>
c010c8de:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010c8e2:	78 b6                	js     c010c89a <vprintfmt+0x1d8>
c010c8e4:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
c010c8e8:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010c8ec:	79 ac                	jns    c010c89a <vprintfmt+0x1d8>
                }
                else {
                    putch(ch, putdat);
                }
            }
            for (; width > 0; width --) {
c010c8ee:	eb 14                	jmp    c010c904 <vprintfmt+0x242>
                putch(' ', putdat);
c010c8f0:	83 ec 08             	sub    $0x8,%esp
c010c8f3:	ff 75 0c             	pushl  0xc(%ebp)
c010c8f6:	6a 20                	push   $0x20
c010c8f8:	8b 45 08             	mov    0x8(%ebp),%eax
c010c8fb:	ff d0                	call   *%eax
c010c8fd:	83 c4 10             	add    $0x10,%esp
                }
                else {
                    putch(ch, putdat);
                }
            }
            for (; width > 0; width --) {
c010c900:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c010c904:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010c908:	7f e6                	jg     c010c8f0 <vprintfmt+0x22e>
                putch(' ', putdat);
            }
            break;
c010c90a:	e9 4e 01 00 00       	jmp    c010ca5d <vprintfmt+0x39b>

        // (signed) decimal
        case 'd':
            num = getint(&ap, lflag);
c010c90f:	83 ec 08             	sub    $0x8,%esp
c010c912:	ff 75 e0             	pushl  -0x20(%ebp)
c010c915:	8d 45 14             	lea    0x14(%ebp),%eax
c010c918:	50                   	push   %eax
c010c919:	e8 39 fd ff ff       	call   c010c657 <getint>
c010c91e:	83 c4 10             	add    $0x10,%esp
c010c921:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c924:	89 55 f4             	mov    %edx,-0xc(%ebp)
            if ((long long)num < 0) {
c010c927:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c92a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c92d:	85 d2                	test   %edx,%edx
c010c92f:	79 23                	jns    c010c954 <vprintfmt+0x292>
                putch('-', putdat);
c010c931:	83 ec 08             	sub    $0x8,%esp
c010c934:	ff 75 0c             	pushl  0xc(%ebp)
c010c937:	6a 2d                	push   $0x2d
c010c939:	8b 45 08             	mov    0x8(%ebp),%eax
c010c93c:	ff d0                	call   *%eax
c010c93e:	83 c4 10             	add    $0x10,%esp
                num = -(long long)num;
c010c941:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c944:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c947:	f7 d8                	neg    %eax
c010c949:	83 d2 00             	adc    $0x0,%edx
c010c94c:	f7 da                	neg    %edx
c010c94e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c951:	89 55 f4             	mov    %edx,-0xc(%ebp)
            }
            base = 10;
c010c954:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c010c95b:	e9 9f 00 00 00       	jmp    c010c9ff <vprintfmt+0x33d>

        // unsigned decimal
        case 'u':
            num = getuint(&ap, lflag);
c010c960:	83 ec 08             	sub    $0x8,%esp
c010c963:	ff 75 e0             	pushl  -0x20(%ebp)
c010c966:	8d 45 14             	lea    0x14(%ebp),%eax
c010c969:	50                   	push   %eax
c010c96a:	e8 99 fc ff ff       	call   c010c608 <getuint>
c010c96f:	83 c4 10             	add    $0x10,%esp
c010c972:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c975:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 10;
c010c978:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c010c97f:	eb 7e                	jmp    c010c9ff <vprintfmt+0x33d>

        // (unsigned) octal
        case 'o':
            num = getuint(&ap, lflag);
c010c981:	83 ec 08             	sub    $0x8,%esp
c010c984:	ff 75 e0             	pushl  -0x20(%ebp)
c010c987:	8d 45 14             	lea    0x14(%ebp),%eax
c010c98a:	50                   	push   %eax
c010c98b:	e8 78 fc ff ff       	call   c010c608 <getuint>
c010c990:	83 c4 10             	add    $0x10,%esp
c010c993:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c996:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 8;
c010c999:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
            goto number;
c010c9a0:	eb 5d                	jmp    c010c9ff <vprintfmt+0x33d>

        // pointer
        case 'p':
            putch('0', putdat);
c010c9a2:	83 ec 08             	sub    $0x8,%esp
c010c9a5:	ff 75 0c             	pushl  0xc(%ebp)
c010c9a8:	6a 30                	push   $0x30
c010c9aa:	8b 45 08             	mov    0x8(%ebp),%eax
c010c9ad:	ff d0                	call   *%eax
c010c9af:	83 c4 10             	add    $0x10,%esp
            putch('x', putdat);
c010c9b2:	83 ec 08             	sub    $0x8,%esp
c010c9b5:	ff 75 0c             	pushl  0xc(%ebp)
c010c9b8:	6a 78                	push   $0x78
c010c9ba:	8b 45 08             	mov    0x8(%ebp),%eax
c010c9bd:	ff d0                	call   *%eax
c010c9bf:	83 c4 10             	add    $0x10,%esp
            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
c010c9c2:	8b 45 14             	mov    0x14(%ebp),%eax
c010c9c5:	8d 50 04             	lea    0x4(%eax),%edx
c010c9c8:	89 55 14             	mov    %edx,0x14(%ebp)
c010c9cb:	8b 00                	mov    (%eax),%eax
c010c9cd:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c9d0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            base = 16;
c010c9d7:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
            goto number;
c010c9de:	eb 1f                	jmp    c010c9ff <vprintfmt+0x33d>

        // (unsigned) hexadecimal
        case 'x':
            num = getuint(&ap, lflag);
c010c9e0:	83 ec 08             	sub    $0x8,%esp
c010c9e3:	ff 75 e0             	pushl  -0x20(%ebp)
c010c9e6:	8d 45 14             	lea    0x14(%ebp),%eax
c010c9e9:	50                   	push   %eax
c010c9ea:	e8 19 fc ff ff       	call   c010c608 <getuint>
c010c9ef:	83 c4 10             	add    $0x10,%esp
c010c9f2:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c9f5:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 16;
c010c9f8:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
        number:
            printnum(putch, putdat, num, base, width, padc);
c010c9ff:	0f be 55 db          	movsbl -0x25(%ebp),%edx
c010ca03:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ca06:	83 ec 04             	sub    $0x4,%esp
c010ca09:	52                   	push   %edx
c010ca0a:	ff 75 e8             	pushl  -0x18(%ebp)
c010ca0d:	50                   	push   %eax
c010ca0e:	ff 75 f4             	pushl  -0xc(%ebp)
c010ca11:	ff 75 f0             	pushl  -0x10(%ebp)
c010ca14:	ff 75 0c             	pushl  0xc(%ebp)
c010ca17:	ff 75 08             	pushl  0x8(%ebp)
c010ca1a:	e8 f8 fa ff ff       	call   c010c517 <printnum>
c010ca1f:	83 c4 20             	add    $0x20,%esp
            break;
c010ca22:	eb 39                	jmp    c010ca5d <vprintfmt+0x39b>

        // escaped '%' character
        case '%':
            putch(ch, putdat);
c010ca24:	83 ec 08             	sub    $0x8,%esp
c010ca27:	ff 75 0c             	pushl  0xc(%ebp)
c010ca2a:	53                   	push   %ebx
c010ca2b:	8b 45 08             	mov    0x8(%ebp),%eax
c010ca2e:	ff d0                	call   *%eax
c010ca30:	83 c4 10             	add    $0x10,%esp
            break;
c010ca33:	eb 28                	jmp    c010ca5d <vprintfmt+0x39b>

        // unrecognized escape sequence - just print it literally
        default:
            putch('%', putdat);
c010ca35:	83 ec 08             	sub    $0x8,%esp
c010ca38:	ff 75 0c             	pushl  0xc(%ebp)
c010ca3b:	6a 25                	push   $0x25
c010ca3d:	8b 45 08             	mov    0x8(%ebp),%eax
c010ca40:	ff d0                	call   *%eax
c010ca42:	83 c4 10             	add    $0x10,%esp
            for (fmt --; fmt[-1] != '%'; fmt --)
c010ca45:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c010ca49:	eb 04                	jmp    c010ca4f <vprintfmt+0x38d>
c010ca4b:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c010ca4f:	8b 45 10             	mov    0x10(%ebp),%eax
c010ca52:	83 e8 01             	sub    $0x1,%eax
c010ca55:	0f b6 00             	movzbl (%eax),%eax
c010ca58:	3c 25                	cmp    $0x25,%al
c010ca5a:	75 ef                	jne    c010ca4b <vprintfmt+0x389>
                /* do nothing */;
            break;
c010ca5c:	90                   	nop
        }
    }
c010ca5d:	e9 68 fc ff ff       	jmp    c010c6ca <vprintfmt+0x8>
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
            if (ch == '\0') {
                return;
c010ca62:	90                   	nop
            for (fmt --; fmt[-1] != '%'; fmt --)
                /* do nothing */;
            break;
        }
    }
}
c010ca63:	8d 65 f8             	lea    -0x8(%ebp),%esp
c010ca66:	5b                   	pop    %ebx
c010ca67:	5e                   	pop    %esi
c010ca68:	5d                   	pop    %ebp
c010ca69:	c3                   	ret    

c010ca6a <sprintputch>:
 * sprintputch - 'print' a single character in a buffer
 * @ch:         the character will be printed
 * @b:          the buffer to place the character @ch
 * */
static void
sprintputch(int ch, struct sprintbuf *b) {
c010ca6a:	55                   	push   %ebp
c010ca6b:	89 e5                	mov    %esp,%ebp
    b->cnt ++;
c010ca6d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ca70:	8b 40 08             	mov    0x8(%eax),%eax
c010ca73:	8d 50 01             	lea    0x1(%eax),%edx
c010ca76:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ca79:	89 50 08             	mov    %edx,0x8(%eax)
    if (b->buf < b->ebuf) {
c010ca7c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ca7f:	8b 10                	mov    (%eax),%edx
c010ca81:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ca84:	8b 40 04             	mov    0x4(%eax),%eax
c010ca87:	39 c2                	cmp    %eax,%edx
c010ca89:	73 12                	jae    c010ca9d <sprintputch+0x33>
        *b->buf ++ = ch;
c010ca8b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ca8e:	8b 00                	mov    (%eax),%eax
c010ca90:	8d 48 01             	lea    0x1(%eax),%ecx
c010ca93:	8b 55 0c             	mov    0xc(%ebp),%edx
c010ca96:	89 0a                	mov    %ecx,(%edx)
c010ca98:	8b 55 08             	mov    0x8(%ebp),%edx
c010ca9b:	88 10                	mov    %dl,(%eax)
    }
}
c010ca9d:	90                   	nop
c010ca9e:	5d                   	pop    %ebp
c010ca9f:	c3                   	ret    

c010caa0 <snprintf>:
 * @str:        the buffer to place the result into
 * @size:       the size of buffer, including the trailing null space
 * @fmt:        the format string to use
 * */
int
snprintf(char *str, size_t size, const char *fmt, ...) {
c010caa0:	55                   	push   %ebp
c010caa1:	89 e5                	mov    %esp,%ebp
c010caa3:	83 ec 18             	sub    $0x18,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c010caa6:	8d 45 14             	lea    0x14(%ebp),%eax
c010caa9:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cnt = vsnprintf(str, size, fmt, ap);
c010caac:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010caaf:	50                   	push   %eax
c010cab0:	ff 75 10             	pushl  0x10(%ebp)
c010cab3:	ff 75 0c             	pushl  0xc(%ebp)
c010cab6:	ff 75 08             	pushl  0x8(%ebp)
c010cab9:	e8 0b 00 00 00       	call   c010cac9 <vsnprintf>
c010cabe:	83 c4 10             	add    $0x10,%esp
c010cac1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c010cac4:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010cac7:	c9                   	leave  
c010cac8:	c3                   	ret    

c010cac9 <vsnprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want snprintf() instead.
 * */
int
vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
c010cac9:	55                   	push   %ebp
c010caca:	89 e5                	mov    %esp,%ebp
c010cacc:	83 ec 18             	sub    $0x18,%esp
    struct sprintbuf b = {str, str + size - 1, 0};
c010cacf:	8b 45 08             	mov    0x8(%ebp),%eax
c010cad2:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010cad5:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cad8:	8d 50 ff             	lea    -0x1(%eax),%edx
c010cadb:	8b 45 08             	mov    0x8(%ebp),%eax
c010cade:	01 d0                	add    %edx,%eax
c010cae0:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010cae3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if (str == NULL || b.buf > b.ebuf) {
c010caea:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010caee:	74 0a                	je     c010cafa <vsnprintf+0x31>
c010caf0:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010caf3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010caf6:	39 c2                	cmp    %eax,%edx
c010caf8:	76 07                	jbe    c010cb01 <vsnprintf+0x38>
        return -E_INVAL;
c010cafa:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010caff:	eb 20                	jmp    c010cb21 <vsnprintf+0x58>
    }
    // print the string to the buffer
    vprintfmt((void*)sprintputch, &b, fmt, ap);
c010cb01:	ff 75 14             	pushl  0x14(%ebp)
c010cb04:	ff 75 10             	pushl  0x10(%ebp)
c010cb07:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010cb0a:	50                   	push   %eax
c010cb0b:	68 6a ca 10 c0       	push   $0xc010ca6a
c010cb10:	e8 ad fb ff ff       	call   c010c6c2 <vprintfmt>
c010cb15:	83 c4 10             	add    $0x10,%esp
    // null terminate the buffer
    *b.buf = '\0';
c010cb18:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cb1b:	c6 00 00             	movb   $0x0,(%eax)
    return b.cnt;
c010cb1e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010cb21:	c9                   	leave  
c010cb22:	c3                   	ret    

c010cb23 <hash32>:
 * @bits:   the number of bits in a return value
 *
 * High bits are more random, so we use them.
 * */
uint32_t
hash32(uint32_t val, unsigned int bits) {
c010cb23:	55                   	push   %ebp
c010cb24:	89 e5                	mov    %esp,%ebp
c010cb26:	83 ec 10             	sub    $0x10,%esp
    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
c010cb29:	8b 45 08             	mov    0x8(%ebp),%eax
c010cb2c:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
c010cb32:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return (hash >> (32 - bits));
c010cb35:	b8 20 00 00 00       	mov    $0x20,%eax
c010cb3a:	2b 45 0c             	sub    0xc(%ebp),%eax
c010cb3d:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010cb40:	89 c1                	mov    %eax,%ecx
c010cb42:	d3 ea                	shr    %cl,%edx
c010cb44:	89 d0                	mov    %edx,%eax
}
c010cb46:	c9                   	leave  
c010cb47:	c3                   	ret    

c010cb48 <rand>:
 * rand - returns a pseudo-random integer
 *
 * The rand() function return a value in the range [0, RAND_MAX].
 * */
int
rand(void) {
c010cb48:	55                   	push   %ebp
c010cb49:	89 e5                	mov    %esp,%ebp
c010cb4b:	57                   	push   %edi
c010cb4c:	56                   	push   %esi
c010cb4d:	53                   	push   %ebx
c010cb4e:	83 ec 24             	sub    $0x24,%esp
    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
c010cb51:	a1 a0 1e 13 c0       	mov    0xc0131ea0,%eax
c010cb56:	8b 15 a4 1e 13 c0    	mov    0xc0131ea4,%edx
c010cb5c:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
c010cb62:	6b f0 05             	imul   $0x5,%eax,%esi
c010cb65:	01 fe                	add    %edi,%esi
c010cb67:	bf 6d e6 ec de       	mov    $0xdeece66d,%edi
c010cb6c:	f7 e7                	mul    %edi
c010cb6e:	01 d6                	add    %edx,%esi
c010cb70:	89 f2                	mov    %esi,%edx
c010cb72:	83 c0 0b             	add    $0xb,%eax
c010cb75:	83 d2 00             	adc    $0x0,%edx
c010cb78:	89 c7                	mov    %eax,%edi
c010cb7a:	83 e7 ff             	and    $0xffffffff,%edi
c010cb7d:	89 f9                	mov    %edi,%ecx
c010cb7f:	0f b7 da             	movzwl %dx,%ebx
c010cb82:	89 0d a0 1e 13 c0    	mov    %ecx,0xc0131ea0
c010cb88:	89 1d a4 1e 13 c0    	mov    %ebx,0xc0131ea4
    unsigned long long result = (next >> 12);
c010cb8e:	a1 a0 1e 13 c0       	mov    0xc0131ea0,%eax
c010cb93:	8b 15 a4 1e 13 c0    	mov    0xc0131ea4,%edx
c010cb99:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c010cb9d:	c1 ea 0c             	shr    $0xc,%edx
c010cba0:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010cba3:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    return (int)do_div(result, RAND_MAX + 1);
c010cba6:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
c010cbad:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010cbb0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010cbb3:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010cbb6:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010cbb9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010cbbc:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010cbbf:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010cbc3:	74 1c                	je     c010cbe1 <rand+0x99>
c010cbc5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010cbc8:	ba 00 00 00 00       	mov    $0x0,%edx
c010cbcd:	f7 75 dc             	divl   -0x24(%ebp)
c010cbd0:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010cbd3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010cbd6:	ba 00 00 00 00       	mov    $0x0,%edx
c010cbdb:	f7 75 dc             	divl   -0x24(%ebp)
c010cbde:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010cbe1:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010cbe4:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010cbe7:	f7 75 dc             	divl   -0x24(%ebp)
c010cbea:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010cbed:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010cbf0:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010cbf3:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010cbf6:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010cbf9:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c010cbfc:	8b 45 d4             	mov    -0x2c(%ebp),%eax
}
c010cbff:	83 c4 24             	add    $0x24,%esp
c010cc02:	5b                   	pop    %ebx
c010cc03:	5e                   	pop    %esi
c010cc04:	5f                   	pop    %edi
c010cc05:	5d                   	pop    %ebp
c010cc06:	c3                   	ret    

c010cc07 <srand>:
/* *
 * srand - seed the random number generator with the given number
 * @seed:   the required seed number
 * */
void
srand(unsigned int seed) {
c010cc07:	55                   	push   %ebp
c010cc08:	89 e5                	mov    %esp,%ebp
    next = seed;
c010cc0a:	8b 45 08             	mov    0x8(%ebp),%eax
c010cc0d:	ba 00 00 00 00       	mov    $0x0,%edx
c010cc12:	a3 a0 1e 13 c0       	mov    %eax,0xc0131ea0
c010cc17:	89 15 a4 1e 13 c0    	mov    %edx,0xc0131ea4
}
c010cc1d:	90                   	nop
c010cc1e:	5d                   	pop    %ebp
c010cc1f:	c3                   	ret    

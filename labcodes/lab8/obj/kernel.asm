
bin/kernel:     file format elf32-i386


Disassembly of section .text:

c0100000 <kern_entry>:

.text
.globl kern_entry
kern_entry:
    # load pa of boot pgdir
    movl $REALLOC(__boot_pgdir), %eax
c0100000:	b8 00 f0 14 00       	mov    $0x14f000,%eax
    movl %eax, %cr3
c0100005:	0f 22 d8             	mov    %eax,%cr3

    # enable paging
    movl %cr0, %eax
c0100008:	0f 20 c0             	mov    %cr0,%eax
    orl $(CR0_PE | CR0_PG | CR0_AM | CR0_WP | CR0_NE | CR0_TS | CR0_EM | CR0_MP), %eax
c010000b:	0d 2f 00 05 80       	or     $0x8005002f,%eax
    andl $~(CR0_TS | CR0_EM), %eax
c0100010:	83 e0 f3             	and    $0xfffffff3,%eax
    movl %eax, %cr0
c0100013:	0f 22 c0             	mov    %eax,%cr0

    # update eip
    # now, eip = 0x1.....
    leal next, %eax
c0100016:	8d 05 1e 00 10 c0    	lea    0xc010001e,%eax
    # set eip = KERNBASE + 0x1.....
    jmp *%eax
c010001c:	ff e0                	jmp    *%eax

c010001e <next>:
next:

    # unmap va 0 ~ 4M, it's temporary mapping
    xorl %eax, %eax
c010001e:	31 c0                	xor    %eax,%eax
    movl %eax, __boot_pgdir
c0100020:	a3 00 f0 14 c0       	mov    %eax,0xc014f000

    # set ebp, esp
    movl $0x0, %ebp
c0100025:	bd 00 00 00 00       	mov    $0x0,%ebp
    # the kernel stack region is from bootstack -- bootstacktop,
    # the kernel stack size is KSTACKSIZE (8KB)defined in memlayout.h
    movl $bootstacktop, %esp
c010002a:	bc 00 e0 14 c0       	mov    $0xc014e000,%esp
    # now kernel stack is ready , call the first C function
    call kern_init
c010002f:	e8 02 00 00 00       	call   c0100036 <kern_init>

c0100034 <spin>:

# should never get here
spin:
    jmp spin
c0100034:	eb fe                	jmp    c0100034 <spin>

c0100036 <kern_init>:
int kern_init(void) __attribute__((noreturn));
void grade_backtrace(void);
static void lab1_switch_test(void);

int
kern_init(void) {
c0100036:	55                   	push   %ebp
c0100037:	89 e5                	mov    %esp,%ebp
c0100039:	83 ec 18             	sub    $0x18,%esp
    extern char edata[], end[];
    memset(edata, 0, end - edata);
c010003c:	ba 44 53 15 c0       	mov    $0xc0155344,%edx
c0100041:	b8 00 10 15 c0       	mov    $0xc0151000,%eax
c0100046:	29 c2                	sub    %eax,%edx
c0100048:	89 d0                	mov    %edx,%eax
c010004a:	83 ec 04             	sub    $0x4,%esp
c010004d:	50                   	push   %eax
c010004e:	6a 00                	push   $0x0
c0100050:	68 00 10 15 c0       	push   $0xc0151000
c0100055:	e8 08 3a 01 00       	call   c0113a62 <memset>
c010005a:	83 c4 10             	add    $0x10,%esp

    cons_init();                // init the console
c010005d:	e8 9e 1f 00 00       	call   c0102000 <cons_init>

    const char *message = "(THU.CST) os is loading ...";
c0100062:	c7 45 f4 40 43 11 c0 	movl   $0xc0114340,-0xc(%ebp)
    cprintf("%s\n\n", message);
c0100069:	83 ec 08             	sub    $0x8,%esp
c010006c:	ff 75 f4             	pushl  -0xc(%ebp)
c010006f:	68 5c 43 11 c0       	push   $0xc011435c
c0100074:	e8 0e 03 00 00       	call   c0100387 <cprintf>
c0100079:	83 c4 10             	add    $0x10,%esp

    print_kerninfo();
c010007c:	e8 7c 0a 00 00       	call   c0100afd <print_kerninfo>

    grade_backtrace();
c0100081:	e8 95 00 00 00       	call   c010011b <grade_backtrace>

    pmm_init();                 // init physical memory management
c0100086:	e8 48 77 00 00       	call   c01077d3 <pmm_init>

    pic_init();                 // init interrupt controller
c010008b:	e8 e2 20 00 00       	call   c0102172 <pic_init>
    idt_init();                 // init interrupt descriptor table
c0100090:	e8 64 22 00 00       	call   c01022f9 <idt_init>

    vmm_init();                 // init virtual memory management
c0100095:	e8 73 3d 00 00       	call   c0103e0d <vmm_init>
    sched_init();               // init scheduler
c010009a:	e8 ca d6 00 00       	call   c010d769 <sched_init>
    proc_init();                // init process table
c010009f:	e8 2a d3 00 00       	call   c010d3ce <proc_init>
    
    ide_init();                 // init ide devices
c01000a4:	e8 1c 0f 00 00       	call   c0100fc5 <ide_init>
    swap_init();                // init swap
c01000a9:	e8 4d 54 00 00       	call   c01054fb <swap_init>
    fs_init();                  // init fs
c01000ae:	e8 09 b1 00 00       	call   c010b1bc <fs_init>
    
    clock_init();               // init clock interrupt
c01000b3:	e8 ef 16 00 00       	call   c01017a7 <clock_init>
    intr_enable();              // enable irq interrupt
c01000b8:	e8 f2 21 00 00       	call   c01022af <intr_enable>

    //LAB1: CAHLLENGE 1 If you try to do it, uncomment lab1_switch_test()
    // user/kernel mode switch test
    //lab1_switch_test();
    
    cpu_idle();                 // run idle process
c01000bd:	e8 f6 d4 00 00       	call   c010d5b8 <cpu_idle>

c01000c2 <grade_backtrace2>:
}

void __attribute__((noinline))
grade_backtrace2(int arg0, int arg1, int arg2, int arg3) {
c01000c2:	55                   	push   %ebp
c01000c3:	89 e5                	mov    %esp,%ebp
c01000c5:	83 ec 08             	sub    $0x8,%esp
    mon_backtrace(0, NULL, NULL);
c01000c8:	83 ec 04             	sub    $0x4,%esp
c01000cb:	6a 00                	push   $0x0
c01000cd:	6a 00                	push   $0x0
c01000cf:	6a 00                	push   $0x0
c01000d1:	e8 83 0e 00 00       	call   c0100f59 <mon_backtrace>
c01000d6:	83 c4 10             	add    $0x10,%esp
}
c01000d9:	90                   	nop
c01000da:	c9                   	leave  
c01000db:	c3                   	ret    

c01000dc <grade_backtrace1>:

void __attribute__((noinline))
grade_backtrace1(int arg0, int arg1) {
c01000dc:	55                   	push   %ebp
c01000dd:	89 e5                	mov    %esp,%ebp
c01000df:	53                   	push   %ebx
c01000e0:	83 ec 04             	sub    $0x4,%esp
    grade_backtrace2(arg0, (int)&arg0, arg1, (int)&arg1);
c01000e3:	8d 4d 0c             	lea    0xc(%ebp),%ecx
c01000e6:	8b 55 0c             	mov    0xc(%ebp),%edx
c01000e9:	8d 5d 08             	lea    0x8(%ebp),%ebx
c01000ec:	8b 45 08             	mov    0x8(%ebp),%eax
c01000ef:	51                   	push   %ecx
c01000f0:	52                   	push   %edx
c01000f1:	53                   	push   %ebx
c01000f2:	50                   	push   %eax
c01000f3:	e8 ca ff ff ff       	call   c01000c2 <grade_backtrace2>
c01000f8:	83 c4 10             	add    $0x10,%esp
}
c01000fb:	90                   	nop
c01000fc:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c01000ff:	c9                   	leave  
c0100100:	c3                   	ret    

c0100101 <grade_backtrace0>:

void __attribute__((noinline))
grade_backtrace0(int arg0, int arg1, int arg2) {
c0100101:	55                   	push   %ebp
c0100102:	89 e5                	mov    %esp,%ebp
c0100104:	83 ec 08             	sub    $0x8,%esp
    grade_backtrace1(arg0, arg2);
c0100107:	83 ec 08             	sub    $0x8,%esp
c010010a:	ff 75 10             	pushl  0x10(%ebp)
c010010d:	ff 75 08             	pushl  0x8(%ebp)
c0100110:	e8 c7 ff ff ff       	call   c01000dc <grade_backtrace1>
c0100115:	83 c4 10             	add    $0x10,%esp
}
c0100118:	90                   	nop
c0100119:	c9                   	leave  
c010011a:	c3                   	ret    

c010011b <grade_backtrace>:

void
grade_backtrace(void) {
c010011b:	55                   	push   %ebp
c010011c:	89 e5                	mov    %esp,%ebp
c010011e:	83 ec 08             	sub    $0x8,%esp
    grade_backtrace0(0, (int)kern_init, 0xffff0000);
c0100121:	b8 36 00 10 c0       	mov    $0xc0100036,%eax
c0100126:	83 ec 04             	sub    $0x4,%esp
c0100129:	68 00 00 ff ff       	push   $0xffff0000
c010012e:	50                   	push   %eax
c010012f:	6a 00                	push   $0x0
c0100131:	e8 cb ff ff ff       	call   c0100101 <grade_backtrace0>
c0100136:	83 c4 10             	add    $0x10,%esp
}
c0100139:	90                   	nop
c010013a:	c9                   	leave  
c010013b:	c3                   	ret    

c010013c <lab1_print_cur_status>:

static void
lab1_print_cur_status(void) {
c010013c:	55                   	push   %ebp
c010013d:	89 e5                	mov    %esp,%ebp
c010013f:	83 ec 18             	sub    $0x18,%esp
    static int round = 0;
    uint16_t reg1, reg2, reg3, reg4;
    asm volatile (
c0100142:	8c 4d f6             	mov    %cs,-0xa(%ebp)
c0100145:	8c 5d f4             	mov    %ds,-0xc(%ebp)
c0100148:	8c 45 f2             	mov    %es,-0xe(%ebp)
c010014b:	8c 55 f0             	mov    %ss,-0x10(%ebp)
            "mov %%cs, %0;"
            "mov %%ds, %1;"
            "mov %%es, %2;"
            "mov %%ss, %3;"
            : "=m"(reg1), "=m"(reg2), "=m"(reg3), "=m"(reg4));
    cprintf("%d: @ring %d\n", round, reg1 & 3);
c010014e:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100152:	0f b7 c0             	movzwl %ax,%eax
c0100155:	83 e0 03             	and    $0x3,%eax
c0100158:	89 c2                	mov    %eax,%edx
c010015a:	a1 00 10 15 c0       	mov    0xc0151000,%eax
c010015f:	83 ec 04             	sub    $0x4,%esp
c0100162:	52                   	push   %edx
c0100163:	50                   	push   %eax
c0100164:	68 61 43 11 c0       	push   $0xc0114361
c0100169:	e8 19 02 00 00       	call   c0100387 <cprintf>
c010016e:	83 c4 10             	add    $0x10,%esp
    cprintf("%d:  cs = %x\n", round, reg1);
c0100171:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100175:	0f b7 d0             	movzwl %ax,%edx
c0100178:	a1 00 10 15 c0       	mov    0xc0151000,%eax
c010017d:	83 ec 04             	sub    $0x4,%esp
c0100180:	52                   	push   %edx
c0100181:	50                   	push   %eax
c0100182:	68 6f 43 11 c0       	push   $0xc011436f
c0100187:	e8 fb 01 00 00       	call   c0100387 <cprintf>
c010018c:	83 c4 10             	add    $0x10,%esp
    cprintf("%d:  ds = %x\n", round, reg2);
c010018f:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c0100193:	0f b7 d0             	movzwl %ax,%edx
c0100196:	a1 00 10 15 c0       	mov    0xc0151000,%eax
c010019b:	83 ec 04             	sub    $0x4,%esp
c010019e:	52                   	push   %edx
c010019f:	50                   	push   %eax
c01001a0:	68 7d 43 11 c0       	push   $0xc011437d
c01001a5:	e8 dd 01 00 00       	call   c0100387 <cprintf>
c01001aa:	83 c4 10             	add    $0x10,%esp
    cprintf("%d:  es = %x\n", round, reg3);
c01001ad:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01001b1:	0f b7 d0             	movzwl %ax,%edx
c01001b4:	a1 00 10 15 c0       	mov    0xc0151000,%eax
c01001b9:	83 ec 04             	sub    $0x4,%esp
c01001bc:	52                   	push   %edx
c01001bd:	50                   	push   %eax
c01001be:	68 8b 43 11 c0       	push   $0xc011438b
c01001c3:	e8 bf 01 00 00       	call   c0100387 <cprintf>
c01001c8:	83 c4 10             	add    $0x10,%esp
    cprintf("%d:  ss = %x\n", round, reg4);
c01001cb:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c01001cf:	0f b7 d0             	movzwl %ax,%edx
c01001d2:	a1 00 10 15 c0       	mov    0xc0151000,%eax
c01001d7:	83 ec 04             	sub    $0x4,%esp
c01001da:	52                   	push   %edx
c01001db:	50                   	push   %eax
c01001dc:	68 99 43 11 c0       	push   $0xc0114399
c01001e1:	e8 a1 01 00 00       	call   c0100387 <cprintf>
c01001e6:	83 c4 10             	add    $0x10,%esp
    round ++;
c01001e9:	a1 00 10 15 c0       	mov    0xc0151000,%eax
c01001ee:	83 c0 01             	add    $0x1,%eax
c01001f1:	a3 00 10 15 c0       	mov    %eax,0xc0151000
}
c01001f6:	90                   	nop
c01001f7:	c9                   	leave  
c01001f8:	c3                   	ret    

c01001f9 <lab1_switch_to_user>:

static void
lab1_switch_to_user(void) {
c01001f9:	55                   	push   %ebp
c01001fa:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 : TODO
    asm volatile (
c01001fc:	cd 78                	int    $0x78
c01001fe:	89 ec                	mov    %ebp,%esp
	    "int %0;"
        "movl %%ebp, %%esp"
	    : 
	    : "i"(T_SWITCH_TOU)
	);
}
c0100200:	90                   	nop
c0100201:	5d                   	pop    %ebp
c0100202:	c3                   	ret    

c0100203 <lab1_switch_to_kernel>:

static void
lab1_switch_to_kernel(void) {
c0100203:	55                   	push   %ebp
c0100204:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 :  TODO
    // cprintf("in lab1_switch_to_kernel\n");
    asm volatile (
c0100206:	cd 79                	int    $0x79
c0100208:	89 ec                	mov    %ebp,%esp
	    "int %0;"
        "movl %%ebp, %%esp"
        : 
	    : "i"(T_SWITCH_TOK)
	);
}
c010020a:	90                   	nop
c010020b:	5d                   	pop    %ebp
c010020c:	c3                   	ret    

c010020d <lab1_switch_test>:

static void
lab1_switch_test(void) {
c010020d:	55                   	push   %ebp
c010020e:	89 e5                	mov    %esp,%ebp
c0100210:	83 ec 08             	sub    $0x8,%esp
    lab1_print_cur_status();
c0100213:	e8 24 ff ff ff       	call   c010013c <lab1_print_cur_status>
    cprintf("+++ switch to  user  mode +++\n");
c0100218:	83 ec 0c             	sub    $0xc,%esp
c010021b:	68 a8 43 11 c0       	push   $0xc01143a8
c0100220:	e8 62 01 00 00       	call   c0100387 <cprintf>
c0100225:	83 c4 10             	add    $0x10,%esp
    lab1_switch_to_user();
c0100228:	e8 cc ff ff ff       	call   c01001f9 <lab1_switch_to_user>
    lab1_print_cur_status();
c010022d:	e8 0a ff ff ff       	call   c010013c <lab1_print_cur_status>
    cprintf("+++ switch to kernel mode +++\n");
c0100232:	83 ec 0c             	sub    $0xc,%esp
c0100235:	68 c8 43 11 c0       	push   $0xc01143c8
c010023a:	e8 48 01 00 00       	call   c0100387 <cprintf>
c010023f:	83 c4 10             	add    $0x10,%esp
    lab1_switch_to_kernel();
c0100242:	e8 bc ff ff ff       	call   c0100203 <lab1_switch_to_kernel>
    lab1_print_cur_status();
c0100247:	e8 f0 fe ff ff       	call   c010013c <lab1_print_cur_status>
}
c010024c:	90                   	nop
c010024d:	c9                   	leave  
c010024e:	c3                   	ret    

c010024f <strdup>:
#include <string.h>
#include <kmalloc.h>

char *
strdup(const char *src) {
c010024f:	55                   	push   %ebp
c0100250:	89 e5                	mov    %esp,%ebp
c0100252:	83 ec 18             	sub    $0x18,%esp
    char *dst;
    size_t len = strlen(src);
c0100255:	83 ec 0c             	sub    $0xc,%esp
c0100258:	ff 75 08             	pushl  0x8(%ebp)
c010025b:	e8 a8 34 01 00       	call   c0113708 <strlen>
c0100260:	83 c4 10             	add    $0x10,%esp
c0100263:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if ((dst = kmalloc(len + 1)) != NULL) {
c0100266:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100269:	83 c0 01             	add    $0x1,%eax
c010026c:	83 ec 0c             	sub    $0xc,%esp
c010026f:	50                   	push   %eax
c0100270:	e8 8d 50 00 00       	call   c0105302 <kmalloc>
c0100275:	83 c4 10             	add    $0x10,%esp
c0100278:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010027b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010027f:	74 1f                	je     c01002a0 <strdup+0x51>
        memcpy(dst, src, len);
c0100281:	83 ec 04             	sub    $0x4,%esp
c0100284:	ff 75 f4             	pushl  -0xc(%ebp)
c0100287:	ff 75 08             	pushl  0x8(%ebp)
c010028a:	ff 75 f0             	pushl  -0x10(%ebp)
c010028d:	e8 b3 38 01 00       	call   c0113b45 <memcpy>
c0100292:	83 c4 10             	add    $0x10,%esp
        dst[len] = '\0';
c0100295:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100298:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010029b:	01 d0                	add    %edx,%eax
c010029d:	c6 00 00             	movb   $0x0,(%eax)
    }
    return dst;
c01002a0:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c01002a3:	c9                   	leave  
c01002a4:	c3                   	ret    

c01002a5 <stradd>:

char *
stradd(const char *src1, const char *src2) {
c01002a5:	55                   	push   %ebp
c01002a6:	89 e5                	mov    %esp,%ebp
c01002a8:	83 ec 18             	sub    $0x18,%esp
    char *ret, *dst;
    size_t len1 = strlen(src1), len2 = strlen(src2);
c01002ab:	83 ec 0c             	sub    $0xc,%esp
c01002ae:	ff 75 08             	pushl  0x8(%ebp)
c01002b1:	e8 52 34 01 00       	call   c0113708 <strlen>
c01002b6:	83 c4 10             	add    $0x10,%esp
c01002b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01002bc:	83 ec 0c             	sub    $0xc,%esp
c01002bf:	ff 75 0c             	pushl  0xc(%ebp)
c01002c2:	e8 41 34 01 00       	call   c0113708 <strlen>
c01002c7:	83 c4 10             	add    $0x10,%esp
c01002ca:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = dst = kmalloc(len1 + len2 + 1)) != NULL) {
c01002cd:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01002d0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002d3:	01 d0                	add    %edx,%eax
c01002d5:	83 c0 01             	add    $0x1,%eax
c01002d8:	83 ec 0c             	sub    $0xc,%esp
c01002db:	50                   	push   %eax
c01002dc:	e8 21 50 00 00       	call   c0105302 <kmalloc>
c01002e1:	83 c4 10             	add    $0x10,%esp
c01002e4:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01002e7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01002ea:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01002ed:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01002f1:	74 3a                	je     c010032d <stradd+0x88>
        memcpy(dst, src1, len1), dst += len1;
c01002f3:	83 ec 04             	sub    $0x4,%esp
c01002f6:	ff 75 f4             	pushl  -0xc(%ebp)
c01002f9:	ff 75 08             	pushl  0x8(%ebp)
c01002fc:	ff 75 ec             	pushl  -0x14(%ebp)
c01002ff:	e8 41 38 01 00       	call   c0113b45 <memcpy>
c0100304:	83 c4 10             	add    $0x10,%esp
c0100307:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010030a:	01 45 ec             	add    %eax,-0x14(%ebp)
        memcpy(dst, src2, len2), dst += len2;
c010030d:	83 ec 04             	sub    $0x4,%esp
c0100310:	ff 75 f0             	pushl  -0x10(%ebp)
c0100313:	ff 75 0c             	pushl  0xc(%ebp)
c0100316:	ff 75 ec             	pushl  -0x14(%ebp)
c0100319:	e8 27 38 01 00       	call   c0113b45 <memcpy>
c010031e:	83 c4 10             	add    $0x10,%esp
c0100321:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100324:	01 45 ec             	add    %eax,-0x14(%ebp)
        *dst = '\0';
c0100327:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010032a:	c6 00 00             	movb   $0x0,(%eax)
    }
    return ret;
c010032d:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
c0100330:	c9                   	leave  
c0100331:	c3                   	ret    

c0100332 <cputch>:
/* *
 * cputch - writes a single character @c to stdout, and it will
 * increace the value of counter pointed by @cnt.
 * */
static void
cputch(int c, int *cnt) {
c0100332:	55                   	push   %ebp
c0100333:	89 e5                	mov    %esp,%ebp
c0100335:	83 ec 08             	sub    $0x8,%esp
    cons_putc(c);
c0100338:	83 ec 0c             	sub    $0xc,%esp
c010033b:	ff 75 08             	pushl  0x8(%ebp)
c010033e:	e8 ee 1c 00 00       	call   c0102031 <cons_putc>
c0100343:	83 c4 10             	add    $0x10,%esp
    (*cnt) ++;
c0100346:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100349:	8b 00                	mov    (%eax),%eax
c010034b:	8d 50 01             	lea    0x1(%eax),%edx
c010034e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100351:	89 10                	mov    %edx,(%eax)
}
c0100353:	90                   	nop
c0100354:	c9                   	leave  
c0100355:	c3                   	ret    

c0100356 <vcprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want cprintf() instead.
 * */
int
vcprintf(const char *fmt, va_list ap) {
c0100356:	55                   	push   %ebp
c0100357:	89 e5                	mov    %esp,%ebp
c0100359:	83 ec 18             	sub    $0x18,%esp
    int cnt = 0;
c010035c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    vprintfmt((void*)cputch, NO_FD, &cnt, fmt, ap);
c0100363:	83 ec 0c             	sub    $0xc,%esp
c0100366:	ff 75 0c             	pushl  0xc(%ebp)
c0100369:	ff 75 08             	pushl  0x8(%ebp)
c010036c:	8d 45 f4             	lea    -0xc(%ebp),%eax
c010036f:	50                   	push   %eax
c0100370:	68 d9 6a ff ff       	push   $0xffff6ad9
c0100375:	68 32 03 10 c0       	push   $0xc0100332
c010037a:	e8 25 3a 01 00       	call   c0113da4 <vprintfmt>
c010037f:	83 c4 20             	add    $0x20,%esp
    return cnt;
c0100382:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100385:	c9                   	leave  
c0100386:	c3                   	ret    

c0100387 <cprintf>:
 *
 * The return value is the number of characters which would be
 * written to stdout.
 * */
int
cprintf(const char *fmt, ...) {
c0100387:	55                   	push   %ebp
c0100388:	89 e5                	mov    %esp,%ebp
c010038a:	83 ec 18             	sub    $0x18,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c010038d:	8d 45 0c             	lea    0xc(%ebp),%eax
c0100390:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cnt = vcprintf(fmt, ap);
c0100393:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100396:	83 ec 08             	sub    $0x8,%esp
c0100399:	50                   	push   %eax
c010039a:	ff 75 08             	pushl  0x8(%ebp)
c010039d:	e8 b4 ff ff ff       	call   c0100356 <vcprintf>
c01003a2:	83 c4 10             	add    $0x10,%esp
c01003a5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c01003a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01003ab:	c9                   	leave  
c01003ac:	c3                   	ret    

c01003ad <cputchar>:

/* cputchar - writes a single character to stdout */
void
cputchar(int c) {
c01003ad:	55                   	push   %ebp
c01003ae:	89 e5                	mov    %esp,%ebp
c01003b0:	83 ec 08             	sub    $0x8,%esp
    cons_putc(c);
c01003b3:	83 ec 0c             	sub    $0xc,%esp
c01003b6:	ff 75 08             	pushl  0x8(%ebp)
c01003b9:	e8 73 1c 00 00       	call   c0102031 <cons_putc>
c01003be:	83 c4 10             	add    $0x10,%esp
}
c01003c1:	90                   	nop
c01003c2:	c9                   	leave  
c01003c3:	c3                   	ret    

c01003c4 <cputs>:
/* *
 * cputs- writes the string pointed by @str to stdout and
 * appends a newline character.
 * */
int
cputs(const char *str) {
c01003c4:	55                   	push   %ebp
c01003c5:	89 e5                	mov    %esp,%ebp
c01003c7:	83 ec 18             	sub    $0x18,%esp
    int cnt = 0;
c01003ca:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    char c;
    while ((c = *str ++) != '\0') {
c01003d1:	eb 14                	jmp    c01003e7 <cputs+0x23>
        cputch(c, &cnt);
c01003d3:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
c01003d7:	83 ec 08             	sub    $0x8,%esp
c01003da:	8d 55 f0             	lea    -0x10(%ebp),%edx
c01003dd:	52                   	push   %edx
c01003de:	50                   	push   %eax
c01003df:	e8 4e ff ff ff       	call   c0100332 <cputch>
c01003e4:	83 c4 10             	add    $0x10,%esp
 * */
int
cputs(const char *str) {
    int cnt = 0;
    char c;
    while ((c = *str ++) != '\0') {
c01003e7:	8b 45 08             	mov    0x8(%ebp),%eax
c01003ea:	8d 50 01             	lea    0x1(%eax),%edx
c01003ed:	89 55 08             	mov    %edx,0x8(%ebp)
c01003f0:	0f b6 00             	movzbl (%eax),%eax
c01003f3:	88 45 f7             	mov    %al,-0x9(%ebp)
c01003f6:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
c01003fa:	75 d7                	jne    c01003d3 <cputs+0xf>
        cputch(c, &cnt);
    }
    cputch('\n', &cnt);
c01003fc:	83 ec 08             	sub    $0x8,%esp
c01003ff:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0100402:	50                   	push   %eax
c0100403:	6a 0a                	push   $0xa
c0100405:	e8 28 ff ff ff       	call   c0100332 <cputch>
c010040a:	83 c4 10             	add    $0x10,%esp
    return cnt;
c010040d:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0100410:	c9                   	leave  
c0100411:	c3                   	ret    

c0100412 <getchar>:

/* getchar - reads a single non-zero character from stdin */
int
getchar(void) {
c0100412:	55                   	push   %ebp
c0100413:	89 e5                	mov    %esp,%ebp
c0100415:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = cons_getc()) == 0)
c0100418:	e8 5d 1c 00 00       	call   c010207a <cons_getc>
c010041d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100420:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100424:	74 f2                	je     c0100418 <getchar+0x6>
        /* do nothing */;
    return c;
c0100426:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100429:	c9                   	leave  
c010042a:	c3                   	ret    

c010042b <readline>:
 * The readline() function returns the text of the line read. If some errors
 * are happened, NULL is returned. The return value is a global variable,
 * thus it should be copied before it is used.
 * */
char *
readline(const char *prompt) {
c010042b:	55                   	push   %ebp
c010042c:	89 e5                	mov    %esp,%ebp
c010042e:	83 ec 18             	sub    $0x18,%esp
    if (prompt != NULL) {
c0100431:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0100435:	74 13                	je     c010044a <readline+0x1f>
        cprintf("%s", prompt);
c0100437:	83 ec 08             	sub    $0x8,%esp
c010043a:	ff 75 08             	pushl  0x8(%ebp)
c010043d:	68 e7 43 11 c0       	push   $0xc01143e7
c0100442:	e8 40 ff ff ff       	call   c0100387 <cprintf>
c0100447:	83 c4 10             	add    $0x10,%esp
    }
    int i = 0, c;
c010044a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        c = getchar();
c0100451:	e8 bc ff ff ff       	call   c0100412 <getchar>
c0100456:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (c < 0) {
c0100459:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010045d:	79 0a                	jns    c0100469 <readline+0x3e>
            return NULL;
c010045f:	b8 00 00 00 00       	mov    $0x0,%eax
c0100464:	e9 82 00 00 00       	jmp    c01004eb <readline+0xc0>
        }
        else if (c >= ' ' && i < BUFSIZE - 1) {
c0100469:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
c010046d:	7e 2b                	jle    c010049a <readline+0x6f>
c010046f:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
c0100476:	7f 22                	jg     c010049a <readline+0x6f>
            cputchar(c);
c0100478:	83 ec 0c             	sub    $0xc,%esp
c010047b:	ff 75 f0             	pushl  -0x10(%ebp)
c010047e:	e8 2a ff ff ff       	call   c01003ad <cputchar>
c0100483:	83 c4 10             	add    $0x10,%esp
            buf[i ++] = c;
c0100486:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100489:	8d 50 01             	lea    0x1(%eax),%edx
c010048c:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010048f:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100492:	88 90 20 10 15 c0    	mov    %dl,-0x3feaefe0(%eax)
c0100498:	eb 4c                	jmp    c01004e6 <readline+0xbb>
        }
        else if (c == '\b' && i > 0) {
c010049a:	83 7d f0 08          	cmpl   $0x8,-0x10(%ebp)
c010049e:	75 1a                	jne    c01004ba <readline+0x8f>
c01004a0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01004a4:	7e 14                	jle    c01004ba <readline+0x8f>
            cputchar(c);
c01004a6:	83 ec 0c             	sub    $0xc,%esp
c01004a9:	ff 75 f0             	pushl  -0x10(%ebp)
c01004ac:	e8 fc fe ff ff       	call   c01003ad <cputchar>
c01004b1:	83 c4 10             	add    $0x10,%esp
            i --;
c01004b4:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c01004b8:	eb 2c                	jmp    c01004e6 <readline+0xbb>
        }
        else if (c == '\n' || c == '\r') {
c01004ba:	83 7d f0 0a          	cmpl   $0xa,-0x10(%ebp)
c01004be:	74 06                	je     c01004c6 <readline+0x9b>
c01004c0:	83 7d f0 0d          	cmpl   $0xd,-0x10(%ebp)
c01004c4:	75 8b                	jne    c0100451 <readline+0x26>
            cputchar(c);
c01004c6:	83 ec 0c             	sub    $0xc,%esp
c01004c9:	ff 75 f0             	pushl  -0x10(%ebp)
c01004cc:	e8 dc fe ff ff       	call   c01003ad <cputchar>
c01004d1:	83 c4 10             	add    $0x10,%esp
            buf[i] = '\0';
c01004d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01004d7:	05 20 10 15 c0       	add    $0xc0151020,%eax
c01004dc:	c6 00 00             	movb   $0x0,(%eax)
            return buf;
c01004df:	b8 20 10 15 c0       	mov    $0xc0151020,%eax
c01004e4:	eb 05                	jmp    c01004eb <readline+0xc0>
        }
    }
c01004e6:	e9 66 ff ff ff       	jmp    c0100451 <readline+0x26>
}
c01004eb:	c9                   	leave  
c01004ec:	c3                   	ret    

c01004ed <__panic>:
/* *
 * __panic - __panic is called on unresolvable fatal errors. it prints
 * "panic: 'message'", and then enters the kernel monitor.
 * */
void
__panic(const char *file, int line, const char *fmt, ...) {
c01004ed:	55                   	push   %ebp
c01004ee:	89 e5                	mov    %esp,%ebp
c01004f0:	83 ec 18             	sub    $0x18,%esp
    if (is_panic) {
c01004f3:	a1 20 14 15 c0       	mov    0xc0151420,%eax
c01004f8:	85 c0                	test   %eax,%eax
c01004fa:	75 5f                	jne    c010055b <__panic+0x6e>
        goto panic_dead;
    }
    is_panic = 1;
c01004fc:	c7 05 20 14 15 c0 01 	movl   $0x1,0xc0151420
c0100503:	00 00 00 

    // print the 'message'
    va_list ap;
    va_start(ap, fmt);
c0100506:	8d 45 14             	lea    0x14(%ebp),%eax
c0100509:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cprintf("kernel panic at %s:%d:\n    ", file, line);
c010050c:	83 ec 04             	sub    $0x4,%esp
c010050f:	ff 75 0c             	pushl  0xc(%ebp)
c0100512:	ff 75 08             	pushl  0x8(%ebp)
c0100515:	68 ea 43 11 c0       	push   $0xc01143ea
c010051a:	e8 68 fe ff ff       	call   c0100387 <cprintf>
c010051f:	83 c4 10             	add    $0x10,%esp
    vcprintf(fmt, ap);
c0100522:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100525:	83 ec 08             	sub    $0x8,%esp
c0100528:	50                   	push   %eax
c0100529:	ff 75 10             	pushl  0x10(%ebp)
c010052c:	e8 25 fe ff ff       	call   c0100356 <vcprintf>
c0100531:	83 c4 10             	add    $0x10,%esp
    cprintf("\n");
c0100534:	83 ec 0c             	sub    $0xc,%esp
c0100537:	68 06 44 11 c0       	push   $0xc0114406
c010053c:	e8 46 fe ff ff       	call   c0100387 <cprintf>
c0100541:	83 c4 10             	add    $0x10,%esp
    
    cprintf("stack trackback:\n");
c0100544:	83 ec 0c             	sub    $0xc,%esp
c0100547:	68 08 44 11 c0       	push   $0xc0114408
c010054c:	e8 36 fe ff ff       	call   c0100387 <cprintf>
c0100551:	83 c4 10             	add    $0x10,%esp
    print_stackframe();
c0100554:	e8 ee 06 00 00       	call   c0100c47 <print_stackframe>
c0100559:	eb 01                	jmp    c010055c <__panic+0x6f>
 * "panic: 'message'", and then enters the kernel monitor.
 * */
void
__panic(const char *file, int line, const char *fmt, ...) {
    if (is_panic) {
        goto panic_dead;
c010055b:	90                   	nop
    print_stackframe();
    
    va_end(ap);

panic_dead:
    intr_disable();
c010055c:	e8 55 1d 00 00       	call   c01022b6 <intr_disable>
    while (1) {
        kmonitor(NULL);
c0100561:	83 ec 0c             	sub    $0xc,%esp
c0100564:	6a 00                	push   $0x0
c0100566:	e8 14 09 00 00       	call   c0100e7f <kmonitor>
c010056b:	83 c4 10             	add    $0x10,%esp
    }
c010056e:	eb f1                	jmp    c0100561 <__panic+0x74>

c0100570 <__warn>:
}

/* __warn - like panic, but don't */
void
__warn(const char *file, int line, const char *fmt, ...) {
c0100570:	55                   	push   %ebp
c0100571:	89 e5                	mov    %esp,%ebp
c0100573:	83 ec 18             	sub    $0x18,%esp
    va_list ap;
    va_start(ap, fmt);
c0100576:	8d 45 14             	lea    0x14(%ebp),%eax
c0100579:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cprintf("kernel warning at %s:%d:\n    ", file, line);
c010057c:	83 ec 04             	sub    $0x4,%esp
c010057f:	ff 75 0c             	pushl  0xc(%ebp)
c0100582:	ff 75 08             	pushl  0x8(%ebp)
c0100585:	68 1a 44 11 c0       	push   $0xc011441a
c010058a:	e8 f8 fd ff ff       	call   c0100387 <cprintf>
c010058f:	83 c4 10             	add    $0x10,%esp
    vcprintf(fmt, ap);
c0100592:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100595:	83 ec 08             	sub    $0x8,%esp
c0100598:	50                   	push   %eax
c0100599:	ff 75 10             	pushl  0x10(%ebp)
c010059c:	e8 b5 fd ff ff       	call   c0100356 <vcprintf>
c01005a1:	83 c4 10             	add    $0x10,%esp
    cprintf("\n");
c01005a4:	83 ec 0c             	sub    $0xc,%esp
c01005a7:	68 06 44 11 c0       	push   $0xc0114406
c01005ac:	e8 d6 fd ff ff       	call   c0100387 <cprintf>
c01005b1:	83 c4 10             	add    $0x10,%esp
    va_end(ap);
}
c01005b4:	90                   	nop
c01005b5:	c9                   	leave  
c01005b6:	c3                   	ret    

c01005b7 <is_kernel_panic>:

bool
is_kernel_panic(void) {
c01005b7:	55                   	push   %ebp
c01005b8:	89 e5                	mov    %esp,%ebp
    return is_panic;
c01005ba:	a1 20 14 15 c0       	mov    0xc0151420,%eax
}
c01005bf:	5d                   	pop    %ebp
c01005c0:	c3                   	ret    

c01005c1 <stab_binsearch>:
 *      stab_binsearch(stabs, &left, &right, N_SO, 0xf0100184);
 * will exit setting left = 118, right = 554.
 * */
static void
stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
           int type, uintptr_t addr) {
c01005c1:	55                   	push   %ebp
c01005c2:	89 e5                	mov    %esp,%ebp
c01005c4:	83 ec 20             	sub    $0x20,%esp
    int l = *region_left, r = *region_right, any_matches = 0;
c01005c7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01005ca:	8b 00                	mov    (%eax),%eax
c01005cc:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01005cf:	8b 45 10             	mov    0x10(%ebp),%eax
c01005d2:	8b 00                	mov    (%eax),%eax
c01005d4:	89 45 f8             	mov    %eax,-0x8(%ebp)
c01005d7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    while (l <= r) {
c01005de:	e9 d2 00 00 00       	jmp    c01006b5 <stab_binsearch+0xf4>
        int true_m = (l + r) / 2, m = true_m;
c01005e3:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01005e6:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01005e9:	01 d0                	add    %edx,%eax
c01005eb:	89 c2                	mov    %eax,%edx
c01005ed:	c1 ea 1f             	shr    $0x1f,%edx
c01005f0:	01 d0                	add    %edx,%eax
c01005f2:	d1 f8                	sar    %eax
c01005f4:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01005f7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01005fa:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // search for earliest stab with right type
        while (m >= l && stabs[m].n_type != type) {
c01005fd:	eb 04                	jmp    c0100603 <stab_binsearch+0x42>
            m --;
c01005ff:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)

    while (l <= r) {
        int true_m = (l + r) / 2, m = true_m;

        // search for earliest stab with right type
        while (m >= l && stabs[m].n_type != type) {
c0100603:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100606:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100609:	7c 1f                	jl     c010062a <stab_binsearch+0x69>
c010060b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010060e:	89 d0                	mov    %edx,%eax
c0100610:	01 c0                	add    %eax,%eax
c0100612:	01 d0                	add    %edx,%eax
c0100614:	c1 e0 02             	shl    $0x2,%eax
c0100617:	89 c2                	mov    %eax,%edx
c0100619:	8b 45 08             	mov    0x8(%ebp),%eax
c010061c:	01 d0                	add    %edx,%eax
c010061e:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100622:	0f b6 c0             	movzbl %al,%eax
c0100625:	3b 45 14             	cmp    0x14(%ebp),%eax
c0100628:	75 d5                	jne    c01005ff <stab_binsearch+0x3e>
            m --;
        }
        if (m < l) {    // no match in [l, m]
c010062a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010062d:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100630:	7d 0b                	jge    c010063d <stab_binsearch+0x7c>
            l = true_m + 1;
c0100632:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100635:	83 c0 01             	add    $0x1,%eax
c0100638:	89 45 fc             	mov    %eax,-0x4(%ebp)
            continue;
c010063b:	eb 78                	jmp    c01006b5 <stab_binsearch+0xf4>
        }

        // actual binary search
        any_matches = 1;
c010063d:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
        if (stabs[m].n_value < addr) {
c0100644:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100647:	89 d0                	mov    %edx,%eax
c0100649:	01 c0                	add    %eax,%eax
c010064b:	01 d0                	add    %edx,%eax
c010064d:	c1 e0 02             	shl    $0x2,%eax
c0100650:	89 c2                	mov    %eax,%edx
c0100652:	8b 45 08             	mov    0x8(%ebp),%eax
c0100655:	01 d0                	add    %edx,%eax
c0100657:	8b 40 08             	mov    0x8(%eax),%eax
c010065a:	3b 45 18             	cmp    0x18(%ebp),%eax
c010065d:	73 13                	jae    c0100672 <stab_binsearch+0xb1>
            *region_left = m;
c010065f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100662:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100665:	89 10                	mov    %edx,(%eax)
            l = true_m + 1;
c0100667:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010066a:	83 c0 01             	add    $0x1,%eax
c010066d:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0100670:	eb 43                	jmp    c01006b5 <stab_binsearch+0xf4>
        } else if (stabs[m].n_value > addr) {
c0100672:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100675:	89 d0                	mov    %edx,%eax
c0100677:	01 c0                	add    %eax,%eax
c0100679:	01 d0                	add    %edx,%eax
c010067b:	c1 e0 02             	shl    $0x2,%eax
c010067e:	89 c2                	mov    %eax,%edx
c0100680:	8b 45 08             	mov    0x8(%ebp),%eax
c0100683:	01 d0                	add    %edx,%eax
c0100685:	8b 40 08             	mov    0x8(%eax),%eax
c0100688:	3b 45 18             	cmp    0x18(%ebp),%eax
c010068b:	76 16                	jbe    c01006a3 <stab_binsearch+0xe2>
            *region_right = m - 1;
c010068d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100690:	8d 50 ff             	lea    -0x1(%eax),%edx
c0100693:	8b 45 10             	mov    0x10(%ebp),%eax
c0100696:	89 10                	mov    %edx,(%eax)
            r = m - 1;
c0100698:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010069b:	83 e8 01             	sub    $0x1,%eax
c010069e:	89 45 f8             	mov    %eax,-0x8(%ebp)
c01006a1:	eb 12                	jmp    c01006b5 <stab_binsearch+0xf4>
        } else {
            // exact match for 'addr', but continue loop to find
            // *region_right
            *region_left = m;
c01006a3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01006a6:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01006a9:	89 10                	mov    %edx,(%eax)
            l = m;
c01006ab:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01006ae:	89 45 fc             	mov    %eax,-0x4(%ebp)
            addr ++;
c01006b1:	83 45 18 01          	addl   $0x1,0x18(%ebp)
static void
stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
           int type, uintptr_t addr) {
    int l = *region_left, r = *region_right, any_matches = 0;

    while (l <= r) {
c01006b5:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01006b8:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c01006bb:	0f 8e 22 ff ff ff    	jle    c01005e3 <stab_binsearch+0x22>
            l = m;
            addr ++;
        }
    }

    if (!any_matches) {
c01006c1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01006c5:	75 0f                	jne    c01006d6 <stab_binsearch+0x115>
        *region_right = *region_left - 1;
c01006c7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01006ca:	8b 00                	mov    (%eax),%eax
c01006cc:	8d 50 ff             	lea    -0x1(%eax),%edx
c01006cf:	8b 45 10             	mov    0x10(%ebp),%eax
c01006d2:	89 10                	mov    %edx,(%eax)
        l = *region_right;
        for (; l > *region_left && stabs[l].n_type != type; l --)
            /* do nothing */;
        *region_left = l;
    }
}
c01006d4:	eb 3f                	jmp    c0100715 <stab_binsearch+0x154>
    if (!any_matches) {
        *region_right = *region_left - 1;
    }
    else {
        // find rightmost region containing 'addr'
        l = *region_right;
c01006d6:	8b 45 10             	mov    0x10(%ebp),%eax
c01006d9:	8b 00                	mov    (%eax),%eax
c01006db:	89 45 fc             	mov    %eax,-0x4(%ebp)
        for (; l > *region_left && stabs[l].n_type != type; l --)
c01006de:	eb 04                	jmp    c01006e4 <stab_binsearch+0x123>
c01006e0:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
c01006e4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01006e7:	8b 00                	mov    (%eax),%eax
c01006e9:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c01006ec:	7d 1f                	jge    c010070d <stab_binsearch+0x14c>
c01006ee:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01006f1:	89 d0                	mov    %edx,%eax
c01006f3:	01 c0                	add    %eax,%eax
c01006f5:	01 d0                	add    %edx,%eax
c01006f7:	c1 e0 02             	shl    $0x2,%eax
c01006fa:	89 c2                	mov    %eax,%edx
c01006fc:	8b 45 08             	mov    0x8(%ebp),%eax
c01006ff:	01 d0                	add    %edx,%eax
c0100701:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100705:	0f b6 c0             	movzbl %al,%eax
c0100708:	3b 45 14             	cmp    0x14(%ebp),%eax
c010070b:	75 d3                	jne    c01006e0 <stab_binsearch+0x11f>
            /* do nothing */;
        *region_left = l;
c010070d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100710:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0100713:	89 10                	mov    %edx,(%eax)
    }
}
c0100715:	90                   	nop
c0100716:	c9                   	leave  
c0100717:	c3                   	ret    

c0100718 <debuginfo_eip>:
 * the specified instruction address, @addr.  Returns 0 if information
 * was found, and negative if not.  But even if it returns negative it
 * has stored some information into '*info'.
 * */
int
debuginfo_eip(uintptr_t addr, struct eipdebuginfo *info) {
c0100718:	55                   	push   %ebp
c0100719:	89 e5                	mov    %esp,%ebp
c010071b:	83 ec 38             	sub    $0x38,%esp
    const struct stab *stabs, *stab_end;
    const char *stabstr, *stabstr_end;

    info->eip_file = "<unknown>";
c010071e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100721:	c7 00 38 44 11 c0    	movl   $0xc0114438,(%eax)
    info->eip_line = 0;
c0100727:	8b 45 0c             	mov    0xc(%ebp),%eax
c010072a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    info->eip_fn_name = "<unknown>";
c0100731:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100734:	c7 40 08 38 44 11 c0 	movl   $0xc0114438,0x8(%eax)
    info->eip_fn_namelen = 9;
c010073b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010073e:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
    info->eip_fn_addr = addr;
c0100745:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100748:	8b 55 08             	mov    0x8(%ebp),%edx
c010074b:	89 50 10             	mov    %edx,0x10(%eax)
    info->eip_fn_narg = 0;
c010074e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100751:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

    // find the relevant set of stabs
    if (addr >= KERNBASE) {
c0100758:	81 7d 08 ff ff ff bf 	cmpl   $0xbfffffff,0x8(%ebp)
c010075f:	76 21                	jbe    c0100782 <debuginfo_eip+0x6a>
        stabs = __STAB_BEGIN__;
c0100761:	c7 45 f4 e0 89 11 c0 	movl   $0xc01189e0,-0xc(%ebp)
        stab_end = __STAB_END__;
c0100768:	c7 45 f0 50 f3 13 c0 	movl   $0xc013f350,-0x10(%ebp)
        stabstr = __STABSTR_BEGIN__;
c010076f:	c7 45 ec 51 f3 13 c0 	movl   $0xc013f351,-0x14(%ebp)
        stabstr_end = __STABSTR_END__;
c0100776:	c7 45 e8 e6 bb 14 c0 	movl   $0xc014bbe6,-0x18(%ebp)
c010077d:	e9 c3 00 00 00       	jmp    c0100845 <debuginfo_eip+0x12d>
    }
    else {
        // user-program linker script, tools/user.ld puts the information about the
        // program's stabs (included __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__,
        // and __STABSTR_END__) in a structure located at virtual address USTAB.
        const struct userstabdata *usd = (struct userstabdata *)USTAB;
c0100782:	c7 45 e4 00 00 20 00 	movl   $0x200000,-0x1c(%ebp)

        // make sure that debugger (current process) can access this memory
        struct mm_struct *mm;
        if (current == NULL || (mm = current->mm) == NULL) {
c0100789:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010078e:	85 c0                	test   %eax,%eax
c0100790:	74 11                	je     c01007a3 <debuginfo_eip+0x8b>
c0100792:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c0100797:	8b 40 18             	mov    0x18(%eax),%eax
c010079a:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010079d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01007a1:	75 0a                	jne    c01007ad <debuginfo_eip+0x95>
            return -1;
c01007a3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01007a8:	e9 4e 03 00 00       	jmp    c0100afb <debuginfo_eip+0x3e3>
        }
        if (!user_mem_check(mm, (uintptr_t)usd, sizeof(struct userstabdata), 0)) {
c01007ad:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01007b0:	6a 00                	push   $0x0
c01007b2:	6a 10                	push   $0x10
c01007b4:	50                   	push   %eax
c01007b5:	ff 75 e0             	pushl  -0x20(%ebp)
c01007b8:	e8 98 3e 00 00       	call   c0104655 <user_mem_check>
c01007bd:	83 c4 10             	add    $0x10,%esp
c01007c0:	85 c0                	test   %eax,%eax
c01007c2:	75 0a                	jne    c01007ce <debuginfo_eip+0xb6>
            return -1;
c01007c4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01007c9:	e9 2d 03 00 00       	jmp    c0100afb <debuginfo_eip+0x3e3>
        }

        stabs = usd->stabs;
c01007ce:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01007d1:	8b 00                	mov    (%eax),%eax
c01007d3:	89 45 f4             	mov    %eax,-0xc(%ebp)
        stab_end = usd->stab_end;
c01007d6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01007d9:	8b 40 04             	mov    0x4(%eax),%eax
c01007dc:	89 45 f0             	mov    %eax,-0x10(%ebp)
        stabstr = usd->stabstr;
c01007df:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01007e2:	8b 40 08             	mov    0x8(%eax),%eax
c01007e5:	89 45 ec             	mov    %eax,-0x14(%ebp)
        stabstr_end = usd->stabstr_end;
c01007e8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01007eb:	8b 40 0c             	mov    0xc(%eax),%eax
c01007ee:	89 45 e8             	mov    %eax,-0x18(%ebp)

        // make sure the STABS and string table memory is valid
        if (!user_mem_check(mm, (uintptr_t)stabs, (uintptr_t)stab_end - (uintptr_t)stabs, 0)) {
c01007f1:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01007f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01007f7:	29 c2                	sub    %eax,%edx
c01007f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01007fc:	6a 00                	push   $0x0
c01007fe:	52                   	push   %edx
c01007ff:	50                   	push   %eax
c0100800:	ff 75 e0             	pushl  -0x20(%ebp)
c0100803:	e8 4d 3e 00 00       	call   c0104655 <user_mem_check>
c0100808:	83 c4 10             	add    $0x10,%esp
c010080b:	85 c0                	test   %eax,%eax
c010080d:	75 0a                	jne    c0100819 <debuginfo_eip+0x101>
            return -1;
c010080f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100814:	e9 e2 02 00 00       	jmp    c0100afb <debuginfo_eip+0x3e3>
        }
        if (!user_mem_check(mm, (uintptr_t)stabstr, stabstr_end - stabstr, 0)) {
c0100819:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010081c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010081f:	29 c2                	sub    %eax,%edx
c0100821:	89 d0                	mov    %edx,%eax
c0100823:	89 c2                	mov    %eax,%edx
c0100825:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100828:	6a 00                	push   $0x0
c010082a:	52                   	push   %edx
c010082b:	50                   	push   %eax
c010082c:	ff 75 e0             	pushl  -0x20(%ebp)
c010082f:	e8 21 3e 00 00       	call   c0104655 <user_mem_check>
c0100834:	83 c4 10             	add    $0x10,%esp
c0100837:	85 c0                	test   %eax,%eax
c0100839:	75 0a                	jne    c0100845 <debuginfo_eip+0x12d>
            return -1;
c010083b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100840:	e9 b6 02 00 00       	jmp    c0100afb <debuginfo_eip+0x3e3>
        }
    }

    // String table validity checks
    if (stabstr_end <= stabstr || stabstr_end[-1] != 0) {
c0100845:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100848:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010084b:	76 0d                	jbe    c010085a <debuginfo_eip+0x142>
c010084d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100850:	83 e8 01             	sub    $0x1,%eax
c0100853:	0f b6 00             	movzbl (%eax),%eax
c0100856:	84 c0                	test   %al,%al
c0100858:	74 0a                	je     c0100864 <debuginfo_eip+0x14c>
        return -1;
c010085a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010085f:	e9 97 02 00 00       	jmp    c0100afb <debuginfo_eip+0x3e3>
    // 'eip'.  First, we find the basic source file containing 'eip'.
    // Then, we look in that source file for the function.  Then we look
    // for the line number.

    // Search the entire set of stabs for the source file (type N_SO).
    int lfile = 0, rfile = (stab_end - stabs) - 1;
c0100864:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c010086b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010086e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100871:	29 c2                	sub    %eax,%edx
c0100873:	89 d0                	mov    %edx,%eax
c0100875:	c1 f8 02             	sar    $0x2,%eax
c0100878:	69 c0 ab aa aa aa    	imul   $0xaaaaaaab,%eax,%eax
c010087e:	83 e8 01             	sub    $0x1,%eax
c0100881:	89 45 d8             	mov    %eax,-0x28(%ebp)
    stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
c0100884:	83 ec 0c             	sub    $0xc,%esp
c0100887:	ff 75 08             	pushl  0x8(%ebp)
c010088a:	6a 64                	push   $0x64
c010088c:	8d 45 d8             	lea    -0x28(%ebp),%eax
c010088f:	50                   	push   %eax
c0100890:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0100893:	50                   	push   %eax
c0100894:	ff 75 f4             	pushl  -0xc(%ebp)
c0100897:	e8 25 fd ff ff       	call   c01005c1 <stab_binsearch>
c010089c:	83 c4 20             	add    $0x20,%esp
    if (lfile == 0)
c010089f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01008a2:	85 c0                	test   %eax,%eax
c01008a4:	75 0a                	jne    c01008b0 <debuginfo_eip+0x198>
        return -1;
c01008a6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01008ab:	e9 4b 02 00 00       	jmp    c0100afb <debuginfo_eip+0x3e3>

    // Search within that file's stabs for the function definition
    // (N_FUN).
    int lfun = lfile, rfun = rfile;
c01008b0:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01008b3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c01008b6:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01008b9:	89 45 d0             	mov    %eax,-0x30(%ebp)
    int lline, rline;
    stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
c01008bc:	83 ec 0c             	sub    $0xc,%esp
c01008bf:	ff 75 08             	pushl  0x8(%ebp)
c01008c2:	6a 24                	push   $0x24
c01008c4:	8d 45 d0             	lea    -0x30(%ebp),%eax
c01008c7:	50                   	push   %eax
c01008c8:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c01008cb:	50                   	push   %eax
c01008cc:	ff 75 f4             	pushl  -0xc(%ebp)
c01008cf:	e8 ed fc ff ff       	call   c01005c1 <stab_binsearch>
c01008d4:	83 c4 20             	add    $0x20,%esp

    if (lfun <= rfun) {
c01008d7:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01008da:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01008dd:	39 c2                	cmp    %eax,%edx
c01008df:	7f 7c                	jg     c010095d <debuginfo_eip+0x245>
        // stabs[lfun] points to the function name
        // in the string table, but check bounds just in case.
        if (stabs[lfun].n_strx < stabstr_end - stabstr) {
c01008e1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01008e4:	89 c2                	mov    %eax,%edx
c01008e6:	89 d0                	mov    %edx,%eax
c01008e8:	01 c0                	add    %eax,%eax
c01008ea:	01 d0                	add    %edx,%eax
c01008ec:	c1 e0 02             	shl    $0x2,%eax
c01008ef:	89 c2                	mov    %eax,%edx
c01008f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01008f4:	01 d0                	add    %edx,%eax
c01008f6:	8b 00                	mov    (%eax),%eax
c01008f8:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c01008fb:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01008fe:	29 d1                	sub    %edx,%ecx
c0100900:	89 ca                	mov    %ecx,%edx
c0100902:	39 d0                	cmp    %edx,%eax
c0100904:	73 22                	jae    c0100928 <debuginfo_eip+0x210>
            info->eip_fn_name = stabstr + stabs[lfun].n_strx;
c0100906:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100909:	89 c2                	mov    %eax,%edx
c010090b:	89 d0                	mov    %edx,%eax
c010090d:	01 c0                	add    %eax,%eax
c010090f:	01 d0                	add    %edx,%eax
c0100911:	c1 e0 02             	shl    $0x2,%eax
c0100914:	89 c2                	mov    %eax,%edx
c0100916:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100919:	01 d0                	add    %edx,%eax
c010091b:	8b 10                	mov    (%eax),%edx
c010091d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100920:	01 c2                	add    %eax,%edx
c0100922:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100925:	89 50 08             	mov    %edx,0x8(%eax)
        }
        info->eip_fn_addr = stabs[lfun].n_value;
c0100928:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010092b:	89 c2                	mov    %eax,%edx
c010092d:	89 d0                	mov    %edx,%eax
c010092f:	01 c0                	add    %eax,%eax
c0100931:	01 d0                	add    %edx,%eax
c0100933:	c1 e0 02             	shl    $0x2,%eax
c0100936:	89 c2                	mov    %eax,%edx
c0100938:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010093b:	01 d0                	add    %edx,%eax
c010093d:	8b 50 08             	mov    0x8(%eax),%edx
c0100940:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100943:	89 50 10             	mov    %edx,0x10(%eax)
        addr -= info->eip_fn_addr;
c0100946:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100949:	8b 40 10             	mov    0x10(%eax),%eax
c010094c:	29 45 08             	sub    %eax,0x8(%ebp)
        // Search within the function definition for the line number.
        lline = lfun;
c010094f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100952:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfun;
c0100955:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0100958:	89 45 c8             	mov    %eax,-0x38(%ebp)
c010095b:	eb 15                	jmp    c0100972 <debuginfo_eip+0x25a>
    } else {
        // Couldn't find function stab!  Maybe we're in an assembly
        // file.  Search the whole file for the line number.
        info->eip_fn_addr = addr;
c010095d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100960:	8b 55 08             	mov    0x8(%ebp),%edx
c0100963:	89 50 10             	mov    %edx,0x10(%eax)
        lline = lfile;
c0100966:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100969:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfile;
c010096c:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010096f:	89 45 c8             	mov    %eax,-0x38(%ebp)
    }
    info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
c0100972:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100975:	8b 40 08             	mov    0x8(%eax),%eax
c0100978:	83 ec 08             	sub    $0x8,%esp
c010097b:	6a 3a                	push   $0x3a
c010097d:	50                   	push   %eax
c010097e:	e8 53 2f 01 00       	call   c01138d6 <strfind>
c0100983:	83 c4 10             	add    $0x10,%esp
c0100986:	89 c2                	mov    %eax,%edx
c0100988:	8b 45 0c             	mov    0xc(%ebp),%eax
c010098b:	8b 40 08             	mov    0x8(%eax),%eax
c010098e:	29 c2                	sub    %eax,%edx
c0100990:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100993:	89 50 0c             	mov    %edx,0xc(%eax)

    // Search within [lline, rline] for the line number stab.
    // If found, set info->eip_line to the right line number.
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
c0100996:	83 ec 0c             	sub    $0xc,%esp
c0100999:	ff 75 08             	pushl  0x8(%ebp)
c010099c:	6a 44                	push   $0x44
c010099e:	8d 45 c8             	lea    -0x38(%ebp),%eax
c01009a1:	50                   	push   %eax
c01009a2:	8d 45 cc             	lea    -0x34(%ebp),%eax
c01009a5:	50                   	push   %eax
c01009a6:	ff 75 f4             	pushl  -0xc(%ebp)
c01009a9:	e8 13 fc ff ff       	call   c01005c1 <stab_binsearch>
c01009ae:	83 c4 20             	add    $0x20,%esp
    if (lline <= rline) {
c01009b1:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01009b4:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01009b7:	39 c2                	cmp    %eax,%edx
c01009b9:	7f 24                	jg     c01009df <debuginfo_eip+0x2c7>
        info->eip_line = stabs[rline].n_desc;
c01009bb:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01009be:	89 c2                	mov    %eax,%edx
c01009c0:	89 d0                	mov    %edx,%eax
c01009c2:	01 c0                	add    %eax,%eax
c01009c4:	01 d0                	add    %edx,%eax
c01009c6:	c1 e0 02             	shl    $0x2,%eax
c01009c9:	89 c2                	mov    %eax,%edx
c01009cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01009ce:	01 d0                	add    %edx,%eax
c01009d0:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c01009d4:	0f b7 d0             	movzwl %ax,%edx
c01009d7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01009da:	89 50 04             	mov    %edx,0x4(%eax)

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c01009dd:	eb 13                	jmp    c01009f2 <debuginfo_eip+0x2da>
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
    if (lline <= rline) {
        info->eip_line = stabs[rline].n_desc;
    } else {
        return -1;
c01009df:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01009e4:	e9 12 01 00 00       	jmp    c0100afb <debuginfo_eip+0x3e3>
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
           && stabs[lline].n_type != N_SOL
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
        lline --;
c01009e9:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01009ec:	83 e8 01             	sub    $0x1,%eax
c01009ef:	89 45 cc             	mov    %eax,-0x34(%ebp)

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c01009f2:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01009f5:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01009f8:	39 c2                	cmp    %eax,%edx
c01009fa:	7c 56                	jl     c0100a52 <debuginfo_eip+0x33a>
           && stabs[lline].n_type != N_SOL
c01009fc:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01009ff:	89 c2                	mov    %eax,%edx
c0100a01:	89 d0                	mov    %edx,%eax
c0100a03:	01 c0                	add    %eax,%eax
c0100a05:	01 d0                	add    %edx,%eax
c0100a07:	c1 e0 02             	shl    $0x2,%eax
c0100a0a:	89 c2                	mov    %eax,%edx
c0100a0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a0f:	01 d0                	add    %edx,%eax
c0100a11:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100a15:	3c 84                	cmp    $0x84,%al
c0100a17:	74 39                	je     c0100a52 <debuginfo_eip+0x33a>
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
c0100a19:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100a1c:	89 c2                	mov    %eax,%edx
c0100a1e:	89 d0                	mov    %edx,%eax
c0100a20:	01 c0                	add    %eax,%eax
c0100a22:	01 d0                	add    %edx,%eax
c0100a24:	c1 e0 02             	shl    $0x2,%eax
c0100a27:	89 c2                	mov    %eax,%edx
c0100a29:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a2c:	01 d0                	add    %edx,%eax
c0100a2e:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100a32:	3c 64                	cmp    $0x64,%al
c0100a34:	75 b3                	jne    c01009e9 <debuginfo_eip+0x2d1>
c0100a36:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100a39:	89 c2                	mov    %eax,%edx
c0100a3b:	89 d0                	mov    %edx,%eax
c0100a3d:	01 c0                	add    %eax,%eax
c0100a3f:	01 d0                	add    %edx,%eax
c0100a41:	c1 e0 02             	shl    $0x2,%eax
c0100a44:	89 c2                	mov    %eax,%edx
c0100a46:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a49:	01 d0                	add    %edx,%eax
c0100a4b:	8b 40 08             	mov    0x8(%eax),%eax
c0100a4e:	85 c0                	test   %eax,%eax
c0100a50:	74 97                	je     c01009e9 <debuginfo_eip+0x2d1>
        lline --;
    }
    if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr) {
c0100a52:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0100a55:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100a58:	39 c2                	cmp    %eax,%edx
c0100a5a:	7c 46                	jl     c0100aa2 <debuginfo_eip+0x38a>
c0100a5c:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100a5f:	89 c2                	mov    %eax,%edx
c0100a61:	89 d0                	mov    %edx,%eax
c0100a63:	01 c0                	add    %eax,%eax
c0100a65:	01 d0                	add    %edx,%eax
c0100a67:	c1 e0 02             	shl    $0x2,%eax
c0100a6a:	89 c2                	mov    %eax,%edx
c0100a6c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a6f:	01 d0                	add    %edx,%eax
c0100a71:	8b 00                	mov    (%eax),%eax
c0100a73:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c0100a76:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0100a79:	29 d1                	sub    %edx,%ecx
c0100a7b:	89 ca                	mov    %ecx,%edx
c0100a7d:	39 d0                	cmp    %edx,%eax
c0100a7f:	73 21                	jae    c0100aa2 <debuginfo_eip+0x38a>
        info->eip_file = stabstr + stabs[lline].n_strx;
c0100a81:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100a84:	89 c2                	mov    %eax,%edx
c0100a86:	89 d0                	mov    %edx,%eax
c0100a88:	01 c0                	add    %eax,%eax
c0100a8a:	01 d0                	add    %edx,%eax
c0100a8c:	c1 e0 02             	shl    $0x2,%eax
c0100a8f:	89 c2                	mov    %eax,%edx
c0100a91:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a94:	01 d0                	add    %edx,%eax
c0100a96:	8b 10                	mov    (%eax),%edx
c0100a98:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100a9b:	01 c2                	add    %eax,%edx
c0100a9d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100aa0:	89 10                	mov    %edx,(%eax)
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
c0100aa2:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0100aa5:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0100aa8:	39 c2                	cmp    %eax,%edx
c0100aaa:	7d 4a                	jge    c0100af6 <debuginfo_eip+0x3de>
        for (lline = lfun + 1;
c0100aac:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100aaf:	83 c0 01             	add    $0x1,%eax
c0100ab2:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0100ab5:	eb 18                	jmp    c0100acf <debuginfo_eip+0x3b7>
             lline < rfun && stabs[lline].n_type == N_PSYM;
             lline ++) {
            info->eip_fn_narg ++;
c0100ab7:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100aba:	8b 40 14             	mov    0x14(%eax),%eax
c0100abd:	8d 50 01             	lea    0x1(%eax),%edx
c0100ac0:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100ac3:	89 50 14             	mov    %edx,0x14(%eax)
    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
             lline < rfun && stabs[lline].n_type == N_PSYM;
             lline ++) {
c0100ac6:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100ac9:	83 c0 01             	add    $0x1,%eax
c0100acc:	89 45 cc             	mov    %eax,-0x34(%ebp)

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
             lline < rfun && stabs[lline].n_type == N_PSYM;
c0100acf:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0100ad2:	8b 45 d0             	mov    -0x30(%ebp),%eax
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
c0100ad5:	39 c2                	cmp    %eax,%edx
c0100ad7:	7d 1d                	jge    c0100af6 <debuginfo_eip+0x3de>
             lline < rfun && stabs[lline].n_type == N_PSYM;
c0100ad9:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100adc:	89 c2                	mov    %eax,%edx
c0100ade:	89 d0                	mov    %edx,%eax
c0100ae0:	01 c0                	add    %eax,%eax
c0100ae2:	01 d0                	add    %edx,%eax
c0100ae4:	c1 e0 02             	shl    $0x2,%eax
c0100ae7:	89 c2                	mov    %eax,%edx
c0100ae9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100aec:	01 d0                	add    %edx,%eax
c0100aee:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100af2:	3c a0                	cmp    $0xa0,%al
c0100af4:	74 c1                	je     c0100ab7 <debuginfo_eip+0x39f>
             lline ++) {
            info->eip_fn_narg ++;
        }
    }
    return 0;
c0100af6:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100afb:	c9                   	leave  
c0100afc:	c3                   	ret    

c0100afd <print_kerninfo>:
 * print_kerninfo - print the information about kernel, including the location
 * of kernel entry, the start addresses of data and text segements, the start
 * address of free memory and how many memory that kernel has used.
 * */
void
print_kerninfo(void) {
c0100afd:	55                   	push   %ebp
c0100afe:	89 e5                	mov    %esp,%ebp
c0100b00:	83 ec 08             	sub    $0x8,%esp
    extern char etext[], edata[], end[], kern_init[];
    cprintf("Special kernel symbols:\n");
c0100b03:	83 ec 0c             	sub    $0xc,%esp
c0100b06:	68 42 44 11 c0       	push   $0xc0114442
c0100b0b:	e8 77 f8 ff ff       	call   c0100387 <cprintf>
c0100b10:	83 c4 10             	add    $0x10,%esp
    cprintf("  entry  0x%08x (phys)\n", kern_init);
c0100b13:	83 ec 08             	sub    $0x8,%esp
c0100b16:	68 36 00 10 c0       	push   $0xc0100036
c0100b1b:	68 5b 44 11 c0       	push   $0xc011445b
c0100b20:	e8 62 f8 ff ff       	call   c0100387 <cprintf>
c0100b25:	83 c4 10             	add    $0x10,%esp
    cprintf("  etext  0x%08x (phys)\n", etext);
c0100b28:	83 ec 08             	sub    $0x8,%esp
c0100b2b:	68 3a 43 11 c0       	push   $0xc011433a
c0100b30:	68 73 44 11 c0       	push   $0xc0114473
c0100b35:	e8 4d f8 ff ff       	call   c0100387 <cprintf>
c0100b3a:	83 c4 10             	add    $0x10,%esp
    cprintf("  edata  0x%08x (phys)\n", edata);
c0100b3d:	83 ec 08             	sub    $0x8,%esp
c0100b40:	68 00 10 15 c0       	push   $0xc0151000
c0100b45:	68 8b 44 11 c0       	push   $0xc011448b
c0100b4a:	e8 38 f8 ff ff       	call   c0100387 <cprintf>
c0100b4f:	83 c4 10             	add    $0x10,%esp
    cprintf("  end    0x%08x (phys)\n", end);
c0100b52:	83 ec 08             	sub    $0x8,%esp
c0100b55:	68 44 53 15 c0       	push   $0xc0155344
c0100b5a:	68 a3 44 11 c0       	push   $0xc01144a3
c0100b5f:	e8 23 f8 ff ff       	call   c0100387 <cprintf>
c0100b64:	83 c4 10             	add    $0x10,%esp
    cprintf("Kernel executable memory footprint: %dKB\n", (end - kern_init + 1023)/1024);
c0100b67:	b8 44 53 15 c0       	mov    $0xc0155344,%eax
c0100b6c:	05 ff 03 00 00       	add    $0x3ff,%eax
c0100b71:	ba 36 00 10 c0       	mov    $0xc0100036,%edx
c0100b76:	29 d0                	sub    %edx,%eax
c0100b78:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
c0100b7e:	85 c0                	test   %eax,%eax
c0100b80:	0f 48 c2             	cmovs  %edx,%eax
c0100b83:	c1 f8 0a             	sar    $0xa,%eax
c0100b86:	83 ec 08             	sub    $0x8,%esp
c0100b89:	50                   	push   %eax
c0100b8a:	68 bc 44 11 c0       	push   $0xc01144bc
c0100b8f:	e8 f3 f7 ff ff       	call   c0100387 <cprintf>
c0100b94:	83 c4 10             	add    $0x10,%esp
}
c0100b97:	90                   	nop
c0100b98:	c9                   	leave  
c0100b99:	c3                   	ret    

c0100b9a <print_debuginfo>:
/* *
 * print_debuginfo - read and print the stat information for the address @eip,
 * and info.eip_fn_addr should be the first address of the related function.
 * */
void
print_debuginfo(uintptr_t eip) {
c0100b9a:	55                   	push   %ebp
c0100b9b:	89 e5                	mov    %esp,%ebp
c0100b9d:	81 ec 28 01 00 00    	sub    $0x128,%esp
    struct eipdebuginfo info;
    if (debuginfo_eip(eip, &info) != 0) {
c0100ba3:	83 ec 08             	sub    $0x8,%esp
c0100ba6:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0100ba9:	50                   	push   %eax
c0100baa:	ff 75 08             	pushl  0x8(%ebp)
c0100bad:	e8 66 fb ff ff       	call   c0100718 <debuginfo_eip>
c0100bb2:	83 c4 10             	add    $0x10,%esp
c0100bb5:	85 c0                	test   %eax,%eax
c0100bb7:	74 15                	je     c0100bce <print_debuginfo+0x34>
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
c0100bb9:	83 ec 08             	sub    $0x8,%esp
c0100bbc:	ff 75 08             	pushl  0x8(%ebp)
c0100bbf:	68 e6 44 11 c0       	push   $0xc01144e6
c0100bc4:	e8 be f7 ff ff       	call   c0100387 <cprintf>
c0100bc9:	83 c4 10             	add    $0x10,%esp
        }
        fnname[j] = '\0';
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
                fnname, eip - info.eip_fn_addr);
    }
}
c0100bcc:	eb 65                	jmp    c0100c33 <print_debuginfo+0x99>
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
    }
    else {
        char fnname[256];
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0100bce:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100bd5:	eb 1c                	jmp    c0100bf3 <print_debuginfo+0x59>
            fnname[j] = info.eip_fn_name[j];
c0100bd7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0100bda:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100bdd:	01 d0                	add    %edx,%eax
c0100bdf:	0f b6 00             	movzbl (%eax),%eax
c0100be2:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
c0100be8:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100beb:	01 ca                	add    %ecx,%edx
c0100bed:	88 02                	mov    %al,(%edx)
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
    }
    else {
        char fnname[256];
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0100bef:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100bf3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100bf6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0100bf9:	7f dc                	jg     c0100bd7 <print_debuginfo+0x3d>
            fnname[j] = info.eip_fn_name[j];
        }
        fnname[j] = '\0';
c0100bfb:	8d 95 dc fe ff ff    	lea    -0x124(%ebp),%edx
c0100c01:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100c04:	01 d0                	add    %edx,%eax
c0100c06:	c6 00 00             	movb   $0x0,(%eax)
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
                fnname, eip - info.eip_fn_addr);
c0100c09:	8b 45 ec             	mov    -0x14(%ebp),%eax
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
            fnname[j] = info.eip_fn_name[j];
        }
        fnname[j] = '\0';
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
c0100c0c:	8b 55 08             	mov    0x8(%ebp),%edx
c0100c0f:	89 d1                	mov    %edx,%ecx
c0100c11:	29 c1                	sub    %eax,%ecx
c0100c13:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0100c16:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100c19:	83 ec 0c             	sub    $0xc,%esp
c0100c1c:	51                   	push   %ecx
c0100c1d:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
c0100c23:	51                   	push   %ecx
c0100c24:	52                   	push   %edx
c0100c25:	50                   	push   %eax
c0100c26:	68 02 45 11 c0       	push   $0xc0114502
c0100c2b:	e8 57 f7 ff ff       	call   c0100387 <cprintf>
c0100c30:	83 c4 20             	add    $0x20,%esp
                fnname, eip - info.eip_fn_addr);
    }
}
c0100c33:	90                   	nop
c0100c34:	c9                   	leave  
c0100c35:	c3                   	ret    

c0100c36 <read_eip>:

static __noinline uint32_t
read_eip(void) {
c0100c36:	55                   	push   %ebp
c0100c37:	89 e5                	mov    %esp,%ebp
c0100c39:	83 ec 10             	sub    $0x10,%esp
    uint32_t eip;
    asm volatile("movl 4(%%ebp), %0" : "=r" (eip));
c0100c3c:	8b 45 04             	mov    0x4(%ebp),%eax
c0100c3f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eip;
c0100c42:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0100c45:	c9                   	leave  
c0100c46:	c3                   	ret    

c0100c47 <print_stackframe>:
 *
 * Note that, the length of ebp-chain is limited. In boot/bootasm.S, before jumping
 * to the kernel entry, the value of ebp has been set to zero, that's the boundary.
 * */
void
print_stackframe(void) {
c0100c47:	55                   	push   %ebp
c0100c48:	89 e5                	mov    %esp,%ebp
c0100c4a:	53                   	push   %ebx
c0100c4b:	83 ec 34             	sub    $0x34,%esp
}

static inline uint32_t
read_ebp(void) {
    uint32_t ebp;
    asm volatile ("movl %%ebp, %0" : "=r" (ebp));
c0100c4e:	89 e8                	mov    %ebp,%eax
c0100c50:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return ebp;
c0100c53:	8b 45 e4             	mov    -0x1c(%ebp),%eax
      *    (3.5) popup a calling stackframe
      *           NOTICE: the calling funciton's return addr eip  = ss:[ebp+4]
      *                   the calling funciton's ebp = ss:[ebp]
      */
    // 1. read_ebp
    uint32_t stack_val_ebp = read_ebp();
c0100c56:	89 45 f4             	mov    %eax,-0xc(%ebp)
    // 2. read_eip
    uint32_t stack_val_eip = read_eip();
c0100c59:	e8 d8 ff ff ff       	call   c0100c36 <read_eip>
c0100c5e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    // 3. iterate stacks
    uint32_t stack_val_args[4];
    for (int i = 0; i < STACKFRAME_DEPTH; i++) {
c0100c61:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0100c68:	e9 93 00 00 00       	jmp    c0100d00 <print_stackframe+0xb9>
        cprintf("ebp:0x%08x eip:0x%08x ", stack_val_ebp, stack_val_eip);
c0100c6d:	83 ec 04             	sub    $0x4,%esp
c0100c70:	ff 75 f0             	pushl  -0x10(%ebp)
c0100c73:	ff 75 f4             	pushl  -0xc(%ebp)
c0100c76:	68 14 45 11 c0       	push   $0xc0114514
c0100c7b:	e8 07 f7 ff ff       	call   c0100387 <cprintf>
c0100c80:	83 c4 10             	add    $0x10,%esp
        // get args
        for (int j = 0; j < 4; j++) {
c0100c83:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c0100c8a:	eb 1f                	jmp    c0100cab <print_stackframe+0x64>
            stack_val_args[j] = *(((uint32_t*) stack_val_ebp) + 2 + j);
c0100c8c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100c8f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0100c96:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100c99:	01 d0                	add    %edx,%eax
c0100c9b:	83 c0 08             	add    $0x8,%eax
c0100c9e:	8b 10                	mov    (%eax),%edx
c0100ca0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100ca3:	89 54 85 d4          	mov    %edx,-0x2c(%ebp,%eax,4)
    // 3. iterate stacks
    uint32_t stack_val_args[4];
    for (int i = 0; i < STACKFRAME_DEPTH; i++) {
        cprintf("ebp:0x%08x eip:0x%08x ", stack_val_ebp, stack_val_eip);
        // get args
        for (int j = 0; j < 4; j++) {
c0100ca7:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
c0100cab:	83 7d e8 03          	cmpl   $0x3,-0x18(%ebp)
c0100caf:	7e db                	jle    c0100c8c <print_stackframe+0x45>
            stack_val_args[j] = *(((uint32_t*) stack_val_ebp) + 2 + j);
        }
        cprintf("args:0x%08x 0x%08x 0x%08x 0x%08x\n", stack_val_args[0], 
c0100cb1:	8b 5d e0             	mov    -0x20(%ebp),%ebx
c0100cb4:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0100cb7:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0100cba:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100cbd:	83 ec 0c             	sub    $0xc,%esp
c0100cc0:	53                   	push   %ebx
c0100cc1:	51                   	push   %ecx
c0100cc2:	52                   	push   %edx
c0100cc3:	50                   	push   %eax
c0100cc4:	68 2c 45 11 c0       	push   $0xc011452c
c0100cc9:	e8 b9 f6 ff ff       	call   c0100387 <cprintf>
c0100cce:	83 c4 20             	add    $0x20,%esp
                stack_val_args[1], stack_val_args[2], stack_val_args[3]);
        // print function info
        print_debuginfo(stack_val_eip - 1);
c0100cd1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100cd4:	83 e8 01             	sub    $0x1,%eax
c0100cd7:	83 ec 0c             	sub    $0xc,%esp
c0100cda:	50                   	push   %eax
c0100cdb:	e8 ba fe ff ff       	call   c0100b9a <print_debuginfo>
c0100ce0:	83 c4 10             	add    $0x10,%esp
        // pop up stackframe, refresh ebp & eip
        stack_val_eip = *(((uint32_t*) stack_val_ebp) + 1);
c0100ce3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100ce6:	83 c0 04             	add    $0x4,%eax
c0100ce9:	8b 00                	mov    (%eax),%eax
c0100ceb:	89 45 f0             	mov    %eax,-0x10(%ebp)
        stack_val_ebp = *(((uint32_t*) stack_val_ebp));
c0100cee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100cf1:	8b 00                	mov    (%eax),%eax
c0100cf3:	89 45 f4             	mov    %eax,-0xc(%ebp)
        // ebp should be valid
        if (stack_val_ebp <= 0) {
c0100cf6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100cfa:	74 10                	je     c0100d0c <print_stackframe+0xc5>
    uint32_t stack_val_ebp = read_ebp();
    // 2. read_eip
    uint32_t stack_val_eip = read_eip();
    // 3. iterate stacks
    uint32_t stack_val_args[4];
    for (int i = 0; i < STACKFRAME_DEPTH; i++) {
c0100cfc:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0100d00:	83 7d ec 13          	cmpl   $0x13,-0x14(%ebp)
c0100d04:	0f 8e 63 ff ff ff    	jle    c0100c6d <print_stackframe+0x26>
        // ebp should be valid
        if (stack_val_ebp <= 0) {
            break;
        }
    }
}
c0100d0a:	eb 01                	jmp    c0100d0d <print_stackframe+0xc6>
        // pop up stackframe, refresh ebp & eip
        stack_val_eip = *(((uint32_t*) stack_val_ebp) + 1);
        stack_val_ebp = *(((uint32_t*) stack_val_ebp));
        // ebp should be valid
        if (stack_val_ebp <= 0) {
            break;
c0100d0c:	90                   	nop
        }
    }
}
c0100d0d:	90                   	nop
c0100d0e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0100d11:	c9                   	leave  
c0100d12:	c3                   	ret    

c0100d13 <parse>:
#define MAXARGS         16
#define WHITESPACE      " \t\n\r"

/* parse - parse the command buffer into whitespace-separated arguments */
static int
parse(char *buf, char **argv) {
c0100d13:	55                   	push   %ebp
c0100d14:	89 e5                	mov    %esp,%ebp
c0100d16:	83 ec 18             	sub    $0x18,%esp
    int argc = 0;
c0100d19:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100d20:	eb 0c                	jmp    c0100d2e <parse+0x1b>
            *buf ++ = '\0';
c0100d22:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d25:	8d 50 01             	lea    0x1(%eax),%edx
c0100d28:	89 55 08             	mov    %edx,0x8(%ebp)
c0100d2b:	c6 00 00             	movb   $0x0,(%eax)
static int
parse(char *buf, char **argv) {
    int argc = 0;
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100d2e:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d31:	0f b6 00             	movzbl (%eax),%eax
c0100d34:	84 c0                	test   %al,%al
c0100d36:	74 1e                	je     c0100d56 <parse+0x43>
c0100d38:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d3b:	0f b6 00             	movzbl (%eax),%eax
c0100d3e:	0f be c0             	movsbl %al,%eax
c0100d41:	83 ec 08             	sub    $0x8,%esp
c0100d44:	50                   	push   %eax
c0100d45:	68 d0 45 11 c0       	push   $0xc01145d0
c0100d4a:	e8 54 2b 01 00       	call   c01138a3 <strchr>
c0100d4f:	83 c4 10             	add    $0x10,%esp
c0100d52:	85 c0                	test   %eax,%eax
c0100d54:	75 cc                	jne    c0100d22 <parse+0xf>
            *buf ++ = '\0';
        }
        if (*buf == '\0') {
c0100d56:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d59:	0f b6 00             	movzbl (%eax),%eax
c0100d5c:	84 c0                	test   %al,%al
c0100d5e:	74 69                	je     c0100dc9 <parse+0xb6>
            break;
        }

        // save and scan past next arg
        if (argc == MAXARGS - 1) {
c0100d60:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
c0100d64:	75 12                	jne    c0100d78 <parse+0x65>
            cprintf("Too many arguments (max %d).\n", MAXARGS);
c0100d66:	83 ec 08             	sub    $0x8,%esp
c0100d69:	6a 10                	push   $0x10
c0100d6b:	68 d5 45 11 c0       	push   $0xc01145d5
c0100d70:	e8 12 f6 ff ff       	call   c0100387 <cprintf>
c0100d75:	83 c4 10             	add    $0x10,%esp
        }
        argv[argc ++] = buf;
c0100d78:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100d7b:	8d 50 01             	lea    0x1(%eax),%edx
c0100d7e:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0100d81:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0100d88:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100d8b:	01 c2                	add    %eax,%edx
c0100d8d:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d90:	89 02                	mov    %eax,(%edx)
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c0100d92:	eb 04                	jmp    c0100d98 <parse+0x85>
            buf ++;
c0100d94:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        // save and scan past next arg
        if (argc == MAXARGS - 1) {
            cprintf("Too many arguments (max %d).\n", MAXARGS);
        }
        argv[argc ++] = buf;
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c0100d98:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d9b:	0f b6 00             	movzbl (%eax),%eax
c0100d9e:	84 c0                	test   %al,%al
c0100da0:	0f 84 7a ff ff ff    	je     c0100d20 <parse+0xd>
c0100da6:	8b 45 08             	mov    0x8(%ebp),%eax
c0100da9:	0f b6 00             	movzbl (%eax),%eax
c0100dac:	0f be c0             	movsbl %al,%eax
c0100daf:	83 ec 08             	sub    $0x8,%esp
c0100db2:	50                   	push   %eax
c0100db3:	68 d0 45 11 c0       	push   $0xc01145d0
c0100db8:	e8 e6 2a 01 00       	call   c01138a3 <strchr>
c0100dbd:	83 c4 10             	add    $0x10,%esp
c0100dc0:	85 c0                	test   %eax,%eax
c0100dc2:	74 d0                	je     c0100d94 <parse+0x81>
            buf ++;
        }
    }
c0100dc4:	e9 57 ff ff ff       	jmp    c0100d20 <parse+0xd>
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
            *buf ++ = '\0';
        }
        if (*buf == '\0') {
            break;
c0100dc9:	90                   	nop
        argv[argc ++] = buf;
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
            buf ++;
        }
    }
    return argc;
c0100dca:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100dcd:	c9                   	leave  
c0100dce:	c3                   	ret    

c0100dcf <runcmd>:
/* *
 * runcmd - parse the input string, split it into separated arguments
 * and then lookup and invoke some related commands/
 * */
static int
runcmd(char *buf, struct trapframe *tf) {
c0100dcf:	55                   	push   %ebp
c0100dd0:	89 e5                	mov    %esp,%ebp
c0100dd2:	83 ec 58             	sub    $0x58,%esp
    char *argv[MAXARGS];
    int argc = parse(buf, argv);
c0100dd5:	83 ec 08             	sub    $0x8,%esp
c0100dd8:	8d 45 b0             	lea    -0x50(%ebp),%eax
c0100ddb:	50                   	push   %eax
c0100ddc:	ff 75 08             	pushl  0x8(%ebp)
c0100ddf:	e8 2f ff ff ff       	call   c0100d13 <parse>
c0100de4:	83 c4 10             	add    $0x10,%esp
c0100de7:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (argc == 0) {
c0100dea:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0100dee:	75 0a                	jne    c0100dfa <runcmd+0x2b>
        return 0;
c0100df0:	b8 00 00 00 00       	mov    $0x0,%eax
c0100df5:	e9 83 00 00 00       	jmp    c0100e7d <runcmd+0xae>
    }
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100dfa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100e01:	eb 59                	jmp    c0100e5c <runcmd+0x8d>
        if (strcmp(commands[i].name, argv[0]) == 0) {
c0100e03:	8b 4d b0             	mov    -0x50(%ebp),%ecx
c0100e06:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100e09:	89 d0                	mov    %edx,%eax
c0100e0b:	01 c0                	add    %eax,%eax
c0100e0d:	01 d0                	add    %edx,%eax
c0100e0f:	c1 e0 02             	shl    $0x2,%eax
c0100e12:	05 00 e0 14 c0       	add    $0xc014e000,%eax
c0100e17:	8b 00                	mov    (%eax),%eax
c0100e19:	83 ec 08             	sub    $0x8,%esp
c0100e1c:	51                   	push   %ecx
c0100e1d:	50                   	push   %eax
c0100e1e:	e8 e0 29 01 00       	call   c0113803 <strcmp>
c0100e23:	83 c4 10             	add    $0x10,%esp
c0100e26:	85 c0                	test   %eax,%eax
c0100e28:	75 2e                	jne    c0100e58 <runcmd+0x89>
            return commands[i].func(argc - 1, argv + 1, tf);
c0100e2a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100e2d:	89 d0                	mov    %edx,%eax
c0100e2f:	01 c0                	add    %eax,%eax
c0100e31:	01 d0                	add    %edx,%eax
c0100e33:	c1 e0 02             	shl    $0x2,%eax
c0100e36:	05 08 e0 14 c0       	add    $0xc014e008,%eax
c0100e3b:	8b 10                	mov    (%eax),%edx
c0100e3d:	8d 45 b0             	lea    -0x50(%ebp),%eax
c0100e40:	83 c0 04             	add    $0x4,%eax
c0100e43:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c0100e46:	83 e9 01             	sub    $0x1,%ecx
c0100e49:	83 ec 04             	sub    $0x4,%esp
c0100e4c:	ff 75 0c             	pushl  0xc(%ebp)
c0100e4f:	50                   	push   %eax
c0100e50:	51                   	push   %ecx
c0100e51:	ff d2                	call   *%edx
c0100e53:	83 c4 10             	add    $0x10,%esp
c0100e56:	eb 25                	jmp    c0100e7d <runcmd+0xae>
    int argc = parse(buf, argv);
    if (argc == 0) {
        return 0;
    }
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100e58:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100e5c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100e5f:	83 f8 02             	cmp    $0x2,%eax
c0100e62:	76 9f                	jbe    c0100e03 <runcmd+0x34>
        if (strcmp(commands[i].name, argv[0]) == 0) {
            return commands[i].func(argc - 1, argv + 1, tf);
        }
    }
    cprintf("Unknown command '%s'\n", argv[0]);
c0100e64:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0100e67:	83 ec 08             	sub    $0x8,%esp
c0100e6a:	50                   	push   %eax
c0100e6b:	68 f3 45 11 c0       	push   $0xc01145f3
c0100e70:	e8 12 f5 ff ff       	call   c0100387 <cprintf>
c0100e75:	83 c4 10             	add    $0x10,%esp
    return 0;
c0100e78:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100e7d:	c9                   	leave  
c0100e7e:	c3                   	ret    

c0100e7f <kmonitor>:

/***** Implementations of basic kernel monitor commands *****/

void
kmonitor(struct trapframe *tf) {
c0100e7f:	55                   	push   %ebp
c0100e80:	89 e5                	mov    %esp,%ebp
c0100e82:	83 ec 18             	sub    $0x18,%esp
    cprintf("Welcome to the kernel debug monitor!!\n");
c0100e85:	83 ec 0c             	sub    $0xc,%esp
c0100e88:	68 0c 46 11 c0       	push   $0xc011460c
c0100e8d:	e8 f5 f4 ff ff       	call   c0100387 <cprintf>
c0100e92:	83 c4 10             	add    $0x10,%esp
    cprintf("Type 'help' for a list of commands.\n");
c0100e95:	83 ec 0c             	sub    $0xc,%esp
c0100e98:	68 34 46 11 c0       	push   $0xc0114634
c0100e9d:	e8 e5 f4 ff ff       	call   c0100387 <cprintf>
c0100ea2:	83 c4 10             	add    $0x10,%esp

    if (tf != NULL) {
c0100ea5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0100ea9:	74 0e                	je     c0100eb9 <kmonitor+0x3a>
        print_trapframe(tf);
c0100eab:	83 ec 0c             	sub    $0xc,%esp
c0100eae:	ff 75 08             	pushl  0x8(%ebp)
c0100eb1:	e8 77 16 00 00       	call   c010252d <print_trapframe>
c0100eb6:	83 c4 10             	add    $0x10,%esp
    }

    char *buf;
    while (1) {
        if ((buf = readline("K> ")) != NULL) {
c0100eb9:	83 ec 0c             	sub    $0xc,%esp
c0100ebc:	68 59 46 11 c0       	push   $0xc0114659
c0100ec1:	e8 65 f5 ff ff       	call   c010042b <readline>
c0100ec6:	83 c4 10             	add    $0x10,%esp
c0100ec9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100ecc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100ed0:	74 e7                	je     c0100eb9 <kmonitor+0x3a>
            if (runcmd(buf, tf) < 0) {
c0100ed2:	83 ec 08             	sub    $0x8,%esp
c0100ed5:	ff 75 08             	pushl  0x8(%ebp)
c0100ed8:	ff 75 f4             	pushl  -0xc(%ebp)
c0100edb:	e8 ef fe ff ff       	call   c0100dcf <runcmd>
c0100ee0:	83 c4 10             	add    $0x10,%esp
c0100ee3:	85 c0                	test   %eax,%eax
c0100ee5:	78 02                	js     c0100ee9 <kmonitor+0x6a>
                break;
            }
        }
    }
c0100ee7:	eb d0                	jmp    c0100eb9 <kmonitor+0x3a>

    char *buf;
    while (1) {
        if ((buf = readline("K> ")) != NULL) {
            if (runcmd(buf, tf) < 0) {
                break;
c0100ee9:	90                   	nop
            }
        }
    }
}
c0100eea:	90                   	nop
c0100eeb:	c9                   	leave  
c0100eec:	c3                   	ret    

c0100eed <mon_help>:

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
c0100eed:	55                   	push   %ebp
c0100eee:	89 e5                	mov    %esp,%ebp
c0100ef0:	83 ec 18             	sub    $0x18,%esp
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100ef3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100efa:	eb 3c                	jmp    c0100f38 <mon_help+0x4b>
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
c0100efc:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100eff:	89 d0                	mov    %edx,%eax
c0100f01:	01 c0                	add    %eax,%eax
c0100f03:	01 d0                	add    %edx,%eax
c0100f05:	c1 e0 02             	shl    $0x2,%eax
c0100f08:	05 04 e0 14 c0       	add    $0xc014e004,%eax
c0100f0d:	8b 08                	mov    (%eax),%ecx
c0100f0f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100f12:	89 d0                	mov    %edx,%eax
c0100f14:	01 c0                	add    %eax,%eax
c0100f16:	01 d0                	add    %edx,%eax
c0100f18:	c1 e0 02             	shl    $0x2,%eax
c0100f1b:	05 00 e0 14 c0       	add    $0xc014e000,%eax
c0100f20:	8b 00                	mov    (%eax),%eax
c0100f22:	83 ec 04             	sub    $0x4,%esp
c0100f25:	51                   	push   %ecx
c0100f26:	50                   	push   %eax
c0100f27:	68 5d 46 11 c0       	push   $0xc011465d
c0100f2c:	e8 56 f4 ff ff       	call   c0100387 <cprintf>
c0100f31:	83 c4 10             	add    $0x10,%esp

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100f34:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100f38:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100f3b:	83 f8 02             	cmp    $0x2,%eax
c0100f3e:	76 bc                	jbe    c0100efc <mon_help+0xf>
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
    }
    return 0;
c0100f40:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100f45:	c9                   	leave  
c0100f46:	c3                   	ret    

c0100f47 <mon_kerninfo>:
/* *
 * mon_kerninfo - call print_kerninfo in kern/debug/kdebug.c to
 * print the memory occupancy in kernel.
 * */
int
mon_kerninfo(int argc, char **argv, struct trapframe *tf) {
c0100f47:	55                   	push   %ebp
c0100f48:	89 e5                	mov    %esp,%ebp
c0100f4a:	83 ec 08             	sub    $0x8,%esp
    print_kerninfo();
c0100f4d:	e8 ab fb ff ff       	call   c0100afd <print_kerninfo>
    return 0;
c0100f52:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100f57:	c9                   	leave  
c0100f58:	c3                   	ret    

c0100f59 <mon_backtrace>:
/* *
 * mon_backtrace - call print_stackframe in kern/debug/kdebug.c to
 * print a backtrace of the stack.
 * */
int
mon_backtrace(int argc, char **argv, struct trapframe *tf) {
c0100f59:	55                   	push   %ebp
c0100f5a:	89 e5                	mov    %esp,%ebp
c0100f5c:	83 ec 08             	sub    $0x8,%esp
    print_stackframe();
c0100f5f:	e8 e3 fc ff ff       	call   c0100c47 <print_stackframe>
    return 0;
c0100f64:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100f69:	c9                   	leave  
c0100f6a:	c3                   	ret    

c0100f6b <ide_wait_ready>:
    unsigned int size;          // Size in Sectors
    unsigned char model[41];    // Model in String
} ide_devices[MAX_IDE];

static int
ide_wait_ready(unsigned short iobase, bool check_error) {
c0100f6b:	55                   	push   %ebp
c0100f6c:	89 e5                	mov    %esp,%ebp
c0100f6e:	83 ec 14             	sub    $0x14,%esp
c0100f71:	8b 45 08             	mov    0x8(%ebp),%eax
c0100f74:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    int r;
    while ((r = inb(iobase + ISA_STATUS)) & IDE_BSY)
c0100f78:	90                   	nop
c0100f79:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0100f7d:	83 c0 07             	add    $0x7,%eax
c0100f80:	0f b7 c0             	movzwl %ax,%eax
c0100f83:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0100f87:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0100f8b:	89 c2                	mov    %eax,%edx
c0100f8d:	ec                   	in     (%dx),%al
c0100f8e:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c0100f91:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c0100f95:	0f b6 c0             	movzbl %al,%eax
c0100f98:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0100f9b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100f9e:	25 80 00 00 00       	and    $0x80,%eax
c0100fa3:	85 c0                	test   %eax,%eax
c0100fa5:	75 d2                	jne    c0100f79 <ide_wait_ready+0xe>
        /* nothing */;
    if (check_error && (r & (IDE_DF | IDE_ERR)) != 0) {
c0100fa7:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0100fab:	74 11                	je     c0100fbe <ide_wait_ready+0x53>
c0100fad:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100fb0:	83 e0 21             	and    $0x21,%eax
c0100fb3:	85 c0                	test   %eax,%eax
c0100fb5:	74 07                	je     c0100fbe <ide_wait_ready+0x53>
        return -1;
c0100fb7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100fbc:	eb 05                	jmp    c0100fc3 <ide_wait_ready+0x58>
    }
    return 0;
c0100fbe:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100fc3:	c9                   	leave  
c0100fc4:	c3                   	ret    

c0100fc5 <ide_init>:

void
ide_init(void) {
c0100fc5:	55                   	push   %ebp
c0100fc6:	89 e5                	mov    %esp,%ebp
c0100fc8:	57                   	push   %edi
c0100fc9:	53                   	push   %ebx
c0100fca:	81 ec 40 02 00 00    	sub    $0x240,%esp
    static_assert((SECTSIZE % 4) == 0);
    unsigned short ideno, iobase;
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c0100fd0:	66 c7 45 f6 00 00    	movw   $0x0,-0xa(%ebp)
c0100fd6:	e9 c1 02 00 00       	jmp    c010129c <ide_init+0x2d7>
        /* assume that no device here */
        ide_devices[ideno].valid = 0;
c0100fdb:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100fdf:	c1 e0 03             	shl    $0x3,%eax
c0100fe2:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0100fe9:	29 c2                	sub    %eax,%edx
c0100feb:	89 d0                	mov    %edx,%eax
c0100fed:	05 40 14 15 c0       	add    $0xc0151440,%eax
c0100ff2:	c6 00 00             	movb   $0x0,(%eax)

        iobase = IO_BASE(ideno);
c0100ff5:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100ff9:	66 d1 e8             	shr    %ax
c0100ffc:	0f b7 c0             	movzwl %ax,%eax
c0100fff:	0f b7 04 85 68 46 11 	movzwl -0x3feeb998(,%eax,4),%eax
c0101006:	c0 
c0101007:	66 89 45 ea          	mov    %ax,-0x16(%ebp)

        /* wait device ready */
        ide_wait_ready(iobase, 0);
c010100b:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c010100f:	6a 00                	push   $0x0
c0101011:	50                   	push   %eax
c0101012:	e8 54 ff ff ff       	call   c0100f6b <ide_wait_ready>
c0101017:	83 c4 08             	add    $0x8,%esp

        /* step1: select drive */
        outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4));
c010101a:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010101e:	83 e0 01             	and    $0x1,%eax
c0101021:	c1 e0 04             	shl    $0x4,%eax
c0101024:	83 c8 e0             	or     $0xffffffe0,%eax
c0101027:	0f b6 c0             	movzbl %al,%eax
c010102a:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c010102e:	83 c2 06             	add    $0x6,%edx
c0101031:	0f b7 d2             	movzwl %dx,%edx
c0101034:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c0101038:	88 45 c7             	mov    %al,-0x39(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010103b:	0f b6 45 c7          	movzbl -0x39(%ebp),%eax
c010103f:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0101043:	ee                   	out    %al,(%dx)
        ide_wait_ready(iobase, 0);
c0101044:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0101048:	6a 00                	push   $0x0
c010104a:	50                   	push   %eax
c010104b:	e8 1b ff ff ff       	call   c0100f6b <ide_wait_ready>
c0101050:	83 c4 08             	add    $0x8,%esp

        /* step2: send ATA identify command */
        outb(iobase + ISA_COMMAND, IDE_CMD_IDENTIFY);
c0101053:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0101057:	83 c0 07             	add    $0x7,%eax
c010105a:	0f b7 c0             	movzwl %ax,%eax
c010105d:	66 89 45 e0          	mov    %ax,-0x20(%ebp)
c0101061:	c6 45 c8 ec          	movb   $0xec,-0x38(%ebp)
c0101065:	0f b6 45 c8          	movzbl -0x38(%ebp),%eax
c0101069:	0f b7 55 e0          	movzwl -0x20(%ebp),%edx
c010106d:	ee                   	out    %al,(%dx)
        ide_wait_ready(iobase, 0);
c010106e:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0101072:	6a 00                	push   $0x0
c0101074:	50                   	push   %eax
c0101075:	e8 f1 fe ff ff       	call   c0100f6b <ide_wait_ready>
c010107a:	83 c4 08             	add    $0x8,%esp

        /* step3: polling */
        if (inb(iobase + ISA_STATUS) == 0 || ide_wait_ready(iobase, 1) != 0) {
c010107d:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0101081:	83 c0 07             	add    $0x7,%eax
c0101084:	0f b7 c0             	movzwl %ax,%eax
c0101087:	66 89 45 ca          	mov    %ax,-0x36(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c010108b:	0f b7 45 ca          	movzwl -0x36(%ebp),%eax
c010108f:	89 c2                	mov    %eax,%edx
c0101091:	ec                   	in     (%dx),%al
c0101092:	88 45 c9             	mov    %al,-0x37(%ebp)
    return data;
c0101095:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
c0101099:	84 c0                	test   %al,%al
c010109b:	0f 84 ef 01 00 00    	je     c0101290 <ide_init+0x2cb>
c01010a1:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01010a5:	6a 01                	push   $0x1
c01010a7:	50                   	push   %eax
c01010a8:	e8 be fe ff ff       	call   c0100f6b <ide_wait_ready>
c01010ad:	83 c4 08             	add    $0x8,%esp
c01010b0:	85 c0                	test   %eax,%eax
c01010b2:	0f 85 d8 01 00 00    	jne    c0101290 <ide_init+0x2cb>
            continue ;
        }

        /* device is ok */
        ide_devices[ideno].valid = 1;
c01010b8:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c01010bc:	c1 e0 03             	shl    $0x3,%eax
c01010bf:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c01010c6:	29 c2                	sub    %eax,%edx
c01010c8:	89 d0                	mov    %edx,%eax
c01010ca:	05 40 14 15 c0       	add    $0xc0151440,%eax
c01010cf:	c6 00 01             	movb   $0x1,(%eax)

        /* read identification space of the device */
        unsigned int buffer[128];
        insl(iobase + ISA_DATA, buffer, sizeof(buffer) / sizeof(unsigned int));
c01010d2:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01010d6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01010d9:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
c01010df:	89 45 c0             	mov    %eax,-0x40(%ebp)
c01010e2:	c7 45 bc 80 00 00 00 	movl   $0x80,-0x44(%ebp)
    return data;
}

static inline void
insl(uint32_t port, void *addr, int cnt) {
    asm volatile (
c01010e9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01010ec:	8b 4d c0             	mov    -0x40(%ebp),%ecx
c01010ef:	8b 45 bc             	mov    -0x44(%ebp),%eax
c01010f2:	89 cb                	mov    %ecx,%ebx
c01010f4:	89 df                	mov    %ebx,%edi
c01010f6:	89 c1                	mov    %eax,%ecx
c01010f8:	fc                   	cld    
c01010f9:	f2 6d                	repnz insl (%dx),%es:(%edi)
c01010fb:	89 c8                	mov    %ecx,%eax
c01010fd:	89 fb                	mov    %edi,%ebx
c01010ff:	89 5d c0             	mov    %ebx,-0x40(%ebp)
c0101102:	89 45 bc             	mov    %eax,-0x44(%ebp)

        unsigned char *ident = (unsigned char *)buffer;
c0101105:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
c010110b:	89 45 dc             	mov    %eax,-0x24(%ebp)
        unsigned int sectors;
        unsigned int cmdsets = *(unsigned int *)(ident + IDE_IDENT_CMDSETS);
c010110e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101111:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
c0101117:	89 45 d8             	mov    %eax,-0x28(%ebp)
        /* device use 48-bits or 28-bits addressing */
        if (cmdsets & (1 << 26)) {
c010111a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010111d:	25 00 00 00 04       	and    $0x4000000,%eax
c0101122:	85 c0                	test   %eax,%eax
c0101124:	74 0e                	je     c0101134 <ide_init+0x16f>
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA_EXT);
c0101126:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101129:	8b 80 c8 00 00 00    	mov    0xc8(%eax),%eax
c010112f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0101132:	eb 09                	jmp    c010113d <ide_init+0x178>
        }
        else {
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA);
c0101134:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101137:	8b 40 78             	mov    0x78(%eax),%eax
c010113a:	89 45 f0             	mov    %eax,-0x10(%ebp)
        }
        ide_devices[ideno].sets = cmdsets;
c010113d:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101141:	c1 e0 03             	shl    $0x3,%eax
c0101144:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c010114b:	29 c2                	sub    %eax,%edx
c010114d:	89 d0                	mov    %edx,%eax
c010114f:	8d 90 44 14 15 c0    	lea    -0x3feaebbc(%eax),%edx
c0101155:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0101158:	89 02                	mov    %eax,(%edx)
        ide_devices[ideno].size = sectors;
c010115a:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010115e:	c1 e0 03             	shl    $0x3,%eax
c0101161:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101168:	29 c2                	sub    %eax,%edx
c010116a:	89 d0                	mov    %edx,%eax
c010116c:	8d 90 48 14 15 c0    	lea    -0x3feaebb8(%eax),%edx
c0101172:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0101175:	89 02                	mov    %eax,(%edx)

        /* check if supports LBA */
        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);
c0101177:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010117a:	83 c0 62             	add    $0x62,%eax
c010117d:	0f b7 00             	movzwl (%eax),%eax
c0101180:	0f b7 c0             	movzwl %ax,%eax
c0101183:	25 00 02 00 00       	and    $0x200,%eax
c0101188:	85 c0                	test   %eax,%eax
c010118a:	75 16                	jne    c01011a2 <ide_init+0x1dd>
c010118c:	68 70 46 11 c0       	push   $0xc0114670
c0101191:	68 b3 46 11 c0       	push   $0xc01146b3
c0101196:	6a 7d                	push   $0x7d
c0101198:	68 c8 46 11 c0       	push   $0xc01146c8
c010119d:	e8 4b f3 ff ff       	call   c01004ed <__panic>

        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
c01011a2:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c01011a6:	89 c2                	mov    %eax,%edx
c01011a8:	8d 04 d5 00 00 00 00 	lea    0x0(,%edx,8),%eax
c01011af:	89 c2                	mov    %eax,%edx
c01011b1:	8d 04 d5 00 00 00 00 	lea    0x0(,%edx,8),%eax
c01011b8:	29 d0                	sub    %edx,%eax
c01011ba:	05 40 14 15 c0       	add    $0xc0151440,%eax
c01011bf:	83 c0 0c             	add    $0xc,%eax
c01011c2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c01011c5:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01011c8:	83 c0 36             	add    $0x36,%eax
c01011cb:	89 45 d0             	mov    %eax,-0x30(%ebp)
        unsigned int i, length = 40;
c01011ce:	c7 45 cc 28 00 00 00 	movl   $0x28,-0x34(%ebp)
        for (i = 0; i < length; i += 2) {
c01011d5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01011dc:	eb 34                	jmp    c0101212 <ide_init+0x24d>
            model[i] = data[i + 1], model[i + 1] = data[i];
c01011de:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01011e1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01011e4:	01 c2                	add    %eax,%edx
c01011e6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01011e9:	8d 48 01             	lea    0x1(%eax),%ecx
c01011ec:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01011ef:	01 c8                	add    %ecx,%eax
c01011f1:	0f b6 00             	movzbl (%eax),%eax
c01011f4:	88 02                	mov    %al,(%edx)
c01011f6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01011f9:	8d 50 01             	lea    0x1(%eax),%edx
c01011fc:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01011ff:	01 c2                	add    %eax,%edx
c0101201:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c0101204:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101207:	01 c8                	add    %ecx,%eax
c0101209:	0f b6 00             	movzbl (%eax),%eax
c010120c:	88 02                	mov    %al,(%edx)
        /* check if supports LBA */
        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);

        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
        unsigned int i, length = 40;
        for (i = 0; i < length; i += 2) {
c010120e:	83 45 ec 02          	addl   $0x2,-0x14(%ebp)
c0101212:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101215:	3b 45 cc             	cmp    -0x34(%ebp),%eax
c0101218:	72 c4                	jb     c01011de <ide_init+0x219>
            model[i] = data[i + 1], model[i + 1] = data[i];
        }
        do {
            model[i] = '\0';
c010121a:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010121d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101220:	01 d0                	add    %edx,%eax
c0101222:	c6 00 00             	movb   $0x0,(%eax)
        } while (i -- > 0 && model[i] == ' ');
c0101225:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101228:	8d 50 ff             	lea    -0x1(%eax),%edx
c010122b:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010122e:	85 c0                	test   %eax,%eax
c0101230:	74 0f                	je     c0101241 <ide_init+0x27c>
c0101232:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0101235:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101238:	01 d0                	add    %edx,%eax
c010123a:	0f b6 00             	movzbl (%eax),%eax
c010123d:	3c 20                	cmp    $0x20,%al
c010123f:	74 d9                	je     c010121a <ide_init+0x255>

        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
c0101241:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101245:	89 c2                	mov    %eax,%edx
c0101247:	8d 04 d5 00 00 00 00 	lea    0x0(,%edx,8),%eax
c010124e:	89 c2                	mov    %eax,%edx
c0101250:	8d 04 d5 00 00 00 00 	lea    0x0(,%edx,8),%eax
c0101257:	29 d0                	sub    %edx,%eax
c0101259:	05 40 14 15 c0       	add    $0xc0151440,%eax
c010125e:	8d 48 0c             	lea    0xc(%eax),%ecx
c0101261:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101265:	c1 e0 03             	shl    $0x3,%eax
c0101268:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c010126f:	29 c2                	sub    %eax,%edx
c0101271:	89 d0                	mov    %edx,%eax
c0101273:	05 48 14 15 c0       	add    $0xc0151448,%eax
c0101278:	8b 10                	mov    (%eax),%edx
c010127a:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010127e:	51                   	push   %ecx
c010127f:	52                   	push   %edx
c0101280:	50                   	push   %eax
c0101281:	68 da 46 11 c0       	push   $0xc01146da
c0101286:	e8 fc f0 ff ff       	call   c0100387 <cprintf>
c010128b:	83 c4 10             	add    $0x10,%esp
c010128e:	eb 01                	jmp    c0101291 <ide_init+0x2cc>
        outb(iobase + ISA_COMMAND, IDE_CMD_IDENTIFY);
        ide_wait_ready(iobase, 0);

        /* step3: polling */
        if (inb(iobase + ISA_STATUS) == 0 || ide_wait_ready(iobase, 1) != 0) {
            continue ;
c0101290:	90                   	nop

void
ide_init(void) {
    static_assert((SECTSIZE % 4) == 0);
    unsigned short ideno, iobase;
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c0101291:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101295:	83 c0 01             	add    $0x1,%eax
c0101298:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
c010129c:	66 83 7d f6 03       	cmpw   $0x3,-0xa(%ebp)
c01012a1:	0f 86 34 fd ff ff    	jbe    c0100fdb <ide_init+0x16>

        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
    }

    // enable ide interrupt
    pic_enable(IRQ_IDE1);
c01012a7:	83 ec 0c             	sub    $0xc,%esp
c01012aa:	6a 0e                	push   $0xe
c01012ac:	e8 94 0e 00 00       	call   c0102145 <pic_enable>
c01012b1:	83 c4 10             	add    $0x10,%esp
    pic_enable(IRQ_IDE2);
c01012b4:	83 ec 0c             	sub    $0xc,%esp
c01012b7:	6a 0f                	push   $0xf
c01012b9:	e8 87 0e 00 00       	call   c0102145 <pic_enable>
c01012be:	83 c4 10             	add    $0x10,%esp
}
c01012c1:	90                   	nop
c01012c2:	8d 65 f8             	lea    -0x8(%ebp),%esp
c01012c5:	5b                   	pop    %ebx
c01012c6:	5f                   	pop    %edi
c01012c7:	5d                   	pop    %ebp
c01012c8:	c3                   	ret    

c01012c9 <ide_device_valid>:

bool
ide_device_valid(unsigned short ideno) {
c01012c9:	55                   	push   %ebp
c01012ca:	89 e5                	mov    %esp,%ebp
c01012cc:	83 ec 04             	sub    $0x4,%esp
c01012cf:	8b 45 08             	mov    0x8(%ebp),%eax
c01012d2:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    return VALID_IDE(ideno);
c01012d6:	66 83 7d fc 03       	cmpw   $0x3,-0x4(%ebp)
c01012db:	77 25                	ja     c0101302 <ide_device_valid+0x39>
c01012dd:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c01012e1:	c1 e0 03             	shl    $0x3,%eax
c01012e4:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c01012eb:	29 c2                	sub    %eax,%edx
c01012ed:	89 d0                	mov    %edx,%eax
c01012ef:	05 40 14 15 c0       	add    $0xc0151440,%eax
c01012f4:	0f b6 00             	movzbl (%eax),%eax
c01012f7:	84 c0                	test   %al,%al
c01012f9:	74 07                	je     c0101302 <ide_device_valid+0x39>
c01012fb:	b8 01 00 00 00       	mov    $0x1,%eax
c0101300:	eb 05                	jmp    c0101307 <ide_device_valid+0x3e>
c0101302:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101307:	c9                   	leave  
c0101308:	c3                   	ret    

c0101309 <ide_device_size>:

size_t
ide_device_size(unsigned short ideno) {
c0101309:	55                   	push   %ebp
c010130a:	89 e5                	mov    %esp,%ebp
c010130c:	83 ec 04             	sub    $0x4,%esp
c010130f:	8b 45 08             	mov    0x8(%ebp),%eax
c0101312:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    if (ide_device_valid(ideno)) {
c0101316:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c010131a:	50                   	push   %eax
c010131b:	e8 a9 ff ff ff       	call   c01012c9 <ide_device_valid>
c0101320:	83 c4 04             	add    $0x4,%esp
c0101323:	85 c0                	test   %eax,%eax
c0101325:	74 1b                	je     c0101342 <ide_device_size+0x39>
        return ide_devices[ideno].size;
c0101327:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c010132b:	c1 e0 03             	shl    $0x3,%eax
c010132e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101335:	29 c2                	sub    %eax,%edx
c0101337:	89 d0                	mov    %edx,%eax
c0101339:	05 48 14 15 c0       	add    $0xc0151448,%eax
c010133e:	8b 00                	mov    (%eax),%eax
c0101340:	eb 05                	jmp    c0101347 <ide_device_size+0x3e>
    }
    return 0;
c0101342:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101347:	c9                   	leave  
c0101348:	c3                   	ret    

c0101349 <ide_read_secs>:

int
ide_read_secs(unsigned short ideno, uint32_t secno, void *dst, size_t nsecs) {
c0101349:	55                   	push   %ebp
c010134a:	89 e5                	mov    %esp,%ebp
c010134c:	57                   	push   %edi
c010134d:	53                   	push   %ebx
c010134e:	83 ec 40             	sub    $0x40,%esp
c0101351:	8b 45 08             	mov    0x8(%ebp),%eax
c0101354:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c0101358:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c010135f:	77 25                	ja     c0101386 <ide_read_secs+0x3d>
c0101361:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
c0101366:	77 1e                	ja     c0101386 <ide_read_secs+0x3d>
c0101368:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c010136c:	c1 e0 03             	shl    $0x3,%eax
c010136f:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101376:	29 c2                	sub    %eax,%edx
c0101378:	89 d0                	mov    %edx,%eax
c010137a:	05 40 14 15 c0       	add    $0xc0151440,%eax
c010137f:	0f b6 00             	movzbl (%eax),%eax
c0101382:	84 c0                	test   %al,%al
c0101384:	75 19                	jne    c010139f <ide_read_secs+0x56>
c0101386:	68 f8 46 11 c0       	push   $0xc01146f8
c010138b:	68 b3 46 11 c0       	push   $0xc01146b3
c0101390:	68 9f 00 00 00       	push   $0x9f
c0101395:	68 c8 46 11 c0       	push   $0xc01146c8
c010139a:	e8 4e f1 ff ff       	call   c01004ed <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c010139f:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c01013a6:	77 0f                	ja     c01013b7 <ide_read_secs+0x6e>
c01013a8:	8b 55 0c             	mov    0xc(%ebp),%edx
c01013ab:	8b 45 14             	mov    0x14(%ebp),%eax
c01013ae:	01 d0                	add    %edx,%eax
c01013b0:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c01013b5:	76 19                	jbe    c01013d0 <ide_read_secs+0x87>
c01013b7:	68 20 47 11 c0       	push   $0xc0114720
c01013bc:	68 b3 46 11 c0       	push   $0xc01146b3
c01013c1:	68 a0 00 00 00       	push   $0xa0
c01013c6:	68 c8 46 11 c0       	push   $0xc01146c8
c01013cb:	e8 1d f1 ff ff       	call   c01004ed <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c01013d0:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c01013d4:	66 d1 e8             	shr    %ax
c01013d7:	0f b7 c0             	movzwl %ax,%eax
c01013da:	0f b7 04 85 68 46 11 	movzwl -0x3feeb998(,%eax,4),%eax
c01013e1:	c0 
c01013e2:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c01013e6:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c01013ea:	66 d1 e8             	shr    %ax
c01013ed:	0f b7 c0             	movzwl %ax,%eax
c01013f0:	0f b7 04 85 6a 46 11 	movzwl -0x3feeb996(,%eax,4),%eax
c01013f7:	c0 
c01013f8:	66 89 45 f0          	mov    %ax,-0x10(%ebp)

    ide_wait_ready(iobase, 0);
c01013fc:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101400:	83 ec 08             	sub    $0x8,%esp
c0101403:	6a 00                	push   $0x0
c0101405:	50                   	push   %eax
c0101406:	e8 60 fb ff ff       	call   c0100f6b <ide_wait_ready>
c010140b:	83 c4 10             	add    $0x10,%esp

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c010140e:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c0101412:	83 c0 02             	add    $0x2,%eax
c0101415:	0f b7 c0             	movzwl %ax,%eax
c0101418:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
c010141c:	c6 45 d7 00          	movb   $0x0,-0x29(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101420:	0f b6 45 d7          	movzbl -0x29(%ebp),%eax
c0101424:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101428:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECCNT, nsecs);
c0101429:	8b 45 14             	mov    0x14(%ebp),%eax
c010142c:	0f b6 c0             	movzbl %al,%eax
c010142f:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101433:	83 c2 02             	add    $0x2,%edx
c0101436:	0f b7 d2             	movzwl %dx,%edx
c0101439:	66 89 55 e8          	mov    %dx,-0x18(%ebp)
c010143d:	88 45 d8             	mov    %al,-0x28(%ebp)
c0101440:	0f b6 45 d8          	movzbl -0x28(%ebp),%eax
c0101444:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c0101448:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c0101449:	8b 45 0c             	mov    0xc(%ebp),%eax
c010144c:	0f b6 c0             	movzbl %al,%eax
c010144f:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101453:	83 c2 03             	add    $0x3,%edx
c0101456:	0f b7 d2             	movzwl %dx,%edx
c0101459:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c010145d:	88 45 d9             	mov    %al,-0x27(%ebp)
c0101460:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c0101464:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0101468:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c0101469:	8b 45 0c             	mov    0xc(%ebp),%eax
c010146c:	c1 e8 08             	shr    $0x8,%eax
c010146f:	0f b6 c0             	movzbl %al,%eax
c0101472:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101476:	83 c2 04             	add    $0x4,%edx
c0101479:	0f b7 d2             	movzwl %dx,%edx
c010147c:	66 89 55 e4          	mov    %dx,-0x1c(%ebp)
c0101480:	88 45 da             	mov    %al,-0x26(%ebp)
c0101483:	0f b6 45 da          	movzbl -0x26(%ebp),%eax
c0101487:	0f b7 55 e4          	movzwl -0x1c(%ebp),%edx
c010148b:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c010148c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010148f:	c1 e8 10             	shr    $0x10,%eax
c0101492:	0f b6 c0             	movzbl %al,%eax
c0101495:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101499:	83 c2 05             	add    $0x5,%edx
c010149c:	0f b7 d2             	movzwl %dx,%edx
c010149f:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c01014a3:	88 45 db             	mov    %al,-0x25(%ebp)
c01014a6:	0f b6 45 db          	movzbl -0x25(%ebp),%eax
c01014aa:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c01014ae:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c01014af:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c01014b3:	83 e0 01             	and    $0x1,%eax
c01014b6:	c1 e0 04             	shl    $0x4,%eax
c01014b9:	89 c2                	mov    %eax,%edx
c01014bb:	8b 45 0c             	mov    0xc(%ebp),%eax
c01014be:	c1 e8 18             	shr    $0x18,%eax
c01014c1:	83 e0 0f             	and    $0xf,%eax
c01014c4:	09 d0                	or     %edx,%eax
c01014c6:	83 c8 e0             	or     $0xffffffe0,%eax
c01014c9:	0f b6 c0             	movzbl %al,%eax
c01014cc:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01014d0:	83 c2 06             	add    $0x6,%edx
c01014d3:	0f b7 d2             	movzwl %dx,%edx
c01014d6:	66 89 55 e0          	mov    %dx,-0x20(%ebp)
c01014da:	88 45 dc             	mov    %al,-0x24(%ebp)
c01014dd:	0f b6 45 dc          	movzbl -0x24(%ebp),%eax
c01014e1:	0f b7 55 e0          	movzwl -0x20(%ebp),%edx
c01014e5:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_COMMAND, IDE_CMD_READ);
c01014e6:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01014ea:	83 c0 07             	add    $0x7,%eax
c01014ed:	0f b7 c0             	movzwl %ax,%eax
c01014f0:	66 89 45 de          	mov    %ax,-0x22(%ebp)
c01014f4:	c6 45 dd 20          	movb   $0x20,-0x23(%ebp)
c01014f8:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c01014fc:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c0101500:	ee                   	out    %al,(%dx)

    int ret = 0;
c0101501:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c0101508:	eb 56                	jmp    c0101560 <ide_read_secs+0x217>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c010150a:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c010150e:	83 ec 08             	sub    $0x8,%esp
c0101511:	6a 01                	push   $0x1
c0101513:	50                   	push   %eax
c0101514:	e8 52 fa ff ff       	call   c0100f6b <ide_wait_ready>
c0101519:	83 c4 10             	add    $0x10,%esp
c010151c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010151f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0101523:	75 43                	jne    c0101568 <ide_read_secs+0x21f>
            goto out;
        }
        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
c0101525:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101529:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010152c:	8b 45 10             	mov    0x10(%ebp),%eax
c010152f:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0101532:	c7 45 cc 80 00 00 00 	movl   $0x80,-0x34(%ebp)
    return data;
}

static inline void
insl(uint32_t port, void *addr, int cnt) {
    asm volatile (
c0101539:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010153c:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c010153f:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0101542:	89 cb                	mov    %ecx,%ebx
c0101544:	89 df                	mov    %ebx,%edi
c0101546:	89 c1                	mov    %eax,%ecx
c0101548:	fc                   	cld    
c0101549:	f2 6d                	repnz insl (%dx),%es:(%edi)
c010154b:	89 c8                	mov    %ecx,%eax
c010154d:	89 fb                	mov    %edi,%ebx
c010154f:	89 5d d0             	mov    %ebx,-0x30(%ebp)
c0101552:	89 45 cc             	mov    %eax,-0x34(%ebp)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
    outb(iobase + ISA_COMMAND, IDE_CMD_READ);

    int ret = 0;
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c0101555:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0101559:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c0101560:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0101564:	75 a4                	jne    c010150a <ide_read_secs+0x1c1>
c0101566:	eb 01                	jmp    c0101569 <ide_read_secs+0x220>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
            goto out;
c0101568:	90                   	nop
        }
        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
    }

out:
    return ret;
c0101569:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010156c:	8d 65 f8             	lea    -0x8(%ebp),%esp
c010156f:	5b                   	pop    %ebx
c0101570:	5f                   	pop    %edi
c0101571:	5d                   	pop    %ebp
c0101572:	c3                   	ret    

c0101573 <ide_write_secs>:

int
ide_write_secs(unsigned short ideno, uint32_t secno, const void *src, size_t nsecs) {
c0101573:	55                   	push   %ebp
c0101574:	89 e5                	mov    %esp,%ebp
c0101576:	56                   	push   %esi
c0101577:	53                   	push   %ebx
c0101578:	83 ec 40             	sub    $0x40,%esp
c010157b:	8b 45 08             	mov    0x8(%ebp),%eax
c010157e:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c0101582:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c0101589:	77 25                	ja     c01015b0 <ide_write_secs+0x3d>
c010158b:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
c0101590:	77 1e                	ja     c01015b0 <ide_write_secs+0x3d>
c0101592:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101596:	c1 e0 03             	shl    $0x3,%eax
c0101599:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c01015a0:	29 c2                	sub    %eax,%edx
c01015a2:	89 d0                	mov    %edx,%eax
c01015a4:	05 40 14 15 c0       	add    $0xc0151440,%eax
c01015a9:	0f b6 00             	movzbl (%eax),%eax
c01015ac:	84 c0                	test   %al,%al
c01015ae:	75 19                	jne    c01015c9 <ide_write_secs+0x56>
c01015b0:	68 f8 46 11 c0       	push   $0xc01146f8
c01015b5:	68 b3 46 11 c0       	push   $0xc01146b3
c01015ba:	68 bc 00 00 00       	push   $0xbc
c01015bf:	68 c8 46 11 c0       	push   $0xc01146c8
c01015c4:	e8 24 ef ff ff       	call   c01004ed <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c01015c9:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c01015d0:	77 0f                	ja     c01015e1 <ide_write_secs+0x6e>
c01015d2:	8b 55 0c             	mov    0xc(%ebp),%edx
c01015d5:	8b 45 14             	mov    0x14(%ebp),%eax
c01015d8:	01 d0                	add    %edx,%eax
c01015da:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c01015df:	76 19                	jbe    c01015fa <ide_write_secs+0x87>
c01015e1:	68 20 47 11 c0       	push   $0xc0114720
c01015e6:	68 b3 46 11 c0       	push   $0xc01146b3
c01015eb:	68 bd 00 00 00       	push   $0xbd
c01015f0:	68 c8 46 11 c0       	push   $0xc01146c8
c01015f5:	e8 f3 ee ff ff       	call   c01004ed <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c01015fa:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c01015fe:	66 d1 e8             	shr    %ax
c0101601:	0f b7 c0             	movzwl %ax,%eax
c0101604:	0f b7 04 85 68 46 11 	movzwl -0x3feeb998(,%eax,4),%eax
c010160b:	c0 
c010160c:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0101610:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101614:	66 d1 e8             	shr    %ax
c0101617:	0f b7 c0             	movzwl %ax,%eax
c010161a:	0f b7 04 85 6a 46 11 	movzwl -0x3feeb996(,%eax,4),%eax
c0101621:	c0 
c0101622:	66 89 45 f0          	mov    %ax,-0x10(%ebp)

    ide_wait_ready(iobase, 0);
c0101626:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c010162a:	83 ec 08             	sub    $0x8,%esp
c010162d:	6a 00                	push   $0x0
c010162f:	50                   	push   %eax
c0101630:	e8 36 f9 ff ff       	call   c0100f6b <ide_wait_ready>
c0101635:	83 c4 10             	add    $0x10,%esp

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c0101638:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c010163c:	83 c0 02             	add    $0x2,%eax
c010163f:	0f b7 c0             	movzwl %ax,%eax
c0101642:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
c0101646:	c6 45 d7 00          	movb   $0x0,-0x29(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010164a:	0f b6 45 d7          	movzbl -0x29(%ebp),%eax
c010164e:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101652:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECCNT, nsecs);
c0101653:	8b 45 14             	mov    0x14(%ebp),%eax
c0101656:	0f b6 c0             	movzbl %al,%eax
c0101659:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010165d:	83 c2 02             	add    $0x2,%edx
c0101660:	0f b7 d2             	movzwl %dx,%edx
c0101663:	66 89 55 e8          	mov    %dx,-0x18(%ebp)
c0101667:	88 45 d8             	mov    %al,-0x28(%ebp)
c010166a:	0f b6 45 d8          	movzbl -0x28(%ebp),%eax
c010166e:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c0101672:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c0101673:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101676:	0f b6 c0             	movzbl %al,%eax
c0101679:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010167d:	83 c2 03             	add    $0x3,%edx
c0101680:	0f b7 d2             	movzwl %dx,%edx
c0101683:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c0101687:	88 45 d9             	mov    %al,-0x27(%ebp)
c010168a:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c010168e:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0101692:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c0101693:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101696:	c1 e8 08             	shr    $0x8,%eax
c0101699:	0f b6 c0             	movzbl %al,%eax
c010169c:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01016a0:	83 c2 04             	add    $0x4,%edx
c01016a3:	0f b7 d2             	movzwl %dx,%edx
c01016a6:	66 89 55 e4          	mov    %dx,-0x1c(%ebp)
c01016aa:	88 45 da             	mov    %al,-0x26(%ebp)
c01016ad:	0f b6 45 da          	movzbl -0x26(%ebp),%eax
c01016b1:	0f b7 55 e4          	movzwl -0x1c(%ebp),%edx
c01016b5:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c01016b6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01016b9:	c1 e8 10             	shr    $0x10,%eax
c01016bc:	0f b6 c0             	movzbl %al,%eax
c01016bf:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01016c3:	83 c2 05             	add    $0x5,%edx
c01016c6:	0f b7 d2             	movzwl %dx,%edx
c01016c9:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c01016cd:	88 45 db             	mov    %al,-0x25(%ebp)
c01016d0:	0f b6 45 db          	movzbl -0x25(%ebp),%eax
c01016d4:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c01016d8:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c01016d9:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c01016dd:	83 e0 01             	and    $0x1,%eax
c01016e0:	c1 e0 04             	shl    $0x4,%eax
c01016e3:	89 c2                	mov    %eax,%edx
c01016e5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01016e8:	c1 e8 18             	shr    $0x18,%eax
c01016eb:	83 e0 0f             	and    $0xf,%eax
c01016ee:	09 d0                	or     %edx,%eax
c01016f0:	83 c8 e0             	or     $0xffffffe0,%eax
c01016f3:	0f b6 c0             	movzbl %al,%eax
c01016f6:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01016fa:	83 c2 06             	add    $0x6,%edx
c01016fd:	0f b7 d2             	movzwl %dx,%edx
c0101700:	66 89 55 e0          	mov    %dx,-0x20(%ebp)
c0101704:	88 45 dc             	mov    %al,-0x24(%ebp)
c0101707:	0f b6 45 dc          	movzbl -0x24(%ebp),%eax
c010170b:	0f b7 55 e0          	movzwl -0x20(%ebp),%edx
c010170f:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);
c0101710:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101714:	83 c0 07             	add    $0x7,%eax
c0101717:	0f b7 c0             	movzwl %ax,%eax
c010171a:	66 89 45 de          	mov    %ax,-0x22(%ebp)
c010171e:	c6 45 dd 30          	movb   $0x30,-0x23(%ebp)
c0101722:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0101726:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c010172a:	ee                   	out    %al,(%dx)

    int ret = 0;
c010172b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c0101732:	eb 56                	jmp    c010178a <ide_write_secs+0x217>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c0101734:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101738:	83 ec 08             	sub    $0x8,%esp
c010173b:	6a 01                	push   $0x1
c010173d:	50                   	push   %eax
c010173e:	e8 28 f8 ff ff       	call   c0100f6b <ide_wait_ready>
c0101743:	83 c4 10             	add    $0x10,%esp
c0101746:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0101749:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010174d:	75 43                	jne    c0101792 <ide_write_secs+0x21f>
            goto out;
        }
        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
c010174f:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101753:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0101756:	8b 45 10             	mov    0x10(%ebp),%eax
c0101759:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010175c:	c7 45 cc 80 00 00 00 	movl   $0x80,-0x34(%ebp)
    asm volatile ("outw %0, %1" :: "a" (data), "d" (port) : "memory");
}

static inline void
outsl(uint32_t port, const void *addr, int cnt) {
    asm volatile (
c0101763:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0101766:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c0101769:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010176c:	89 cb                	mov    %ecx,%ebx
c010176e:	89 de                	mov    %ebx,%esi
c0101770:	89 c1                	mov    %eax,%ecx
c0101772:	fc                   	cld    
c0101773:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
c0101775:	89 c8                	mov    %ecx,%eax
c0101777:	89 f3                	mov    %esi,%ebx
c0101779:	89 5d d0             	mov    %ebx,-0x30(%ebp)
c010177c:	89 45 cc             	mov    %eax,-0x34(%ebp)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);

    int ret = 0;
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c010177f:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0101783:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c010178a:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010178e:	75 a4                	jne    c0101734 <ide_write_secs+0x1c1>
c0101790:	eb 01                	jmp    c0101793 <ide_write_secs+0x220>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
            goto out;
c0101792:	90                   	nop
        }
        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
    }

out:
    return ret;
c0101793:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0101796:	8d 65 f8             	lea    -0x8(%ebp),%esp
c0101799:	5b                   	pop    %ebx
c010179a:	5e                   	pop    %esi
c010179b:	5d                   	pop    %ebp
c010179c:	c3                   	ret    

c010179d <SYSTEM_READ_TIMER>:
#define TIMER_RATEGEN   0x04                    // mode 2, rate generator
#define TIMER_16BIT     0x30                    // r/w counter 16 bits, LSB first

volatile size_t ticks;

long SYSTEM_READ_TIMER( void ){
c010179d:	55                   	push   %ebp
c010179e:	89 e5                	mov    %esp,%ebp
    return ticks;
c01017a0:	a1 00 51 15 c0       	mov    0xc0155100,%eax
}
c01017a5:	5d                   	pop    %ebp
c01017a6:	c3                   	ret    

c01017a7 <clock_init>:
/* *
 * clock_init - initialize 8253 clock to interrupt 100 times per second,
 * and then enable IRQ_TIMER.
 * */
void
clock_init(void) {
c01017a7:	55                   	push   %ebp
c01017a8:	89 e5                	mov    %esp,%ebp
c01017aa:	83 ec 18             	sub    $0x18,%esp
c01017ad:	66 c7 45 f6 43 00    	movw   $0x43,-0xa(%ebp)
c01017b3:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01017b7:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
c01017bb:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c01017bf:	ee                   	out    %al,(%dx)
c01017c0:	66 c7 45 f4 40 00    	movw   $0x40,-0xc(%ebp)
c01017c6:	c6 45 f0 9c          	movb   $0x9c,-0x10(%ebp)
c01017ca:	0f b6 45 f0          	movzbl -0x10(%ebp),%eax
c01017ce:	0f b7 55 f4          	movzwl -0xc(%ebp),%edx
c01017d2:	ee                   	out    %al,(%dx)
c01017d3:	66 c7 45 f2 40 00    	movw   $0x40,-0xe(%ebp)
c01017d9:	c6 45 f1 2e          	movb   $0x2e,-0xf(%ebp)
c01017dd:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c01017e1:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01017e5:	ee                   	out    %al,(%dx)
    outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
    outb(IO_TIMER1, TIMER_DIV(100) % 256);
    outb(IO_TIMER1, TIMER_DIV(100) / 256);

    // initialize time counter 'ticks' to zero
    ticks = 0;
c01017e6:	c7 05 00 51 15 c0 00 	movl   $0x0,0xc0155100
c01017ed:	00 00 00 

    cprintf("++ setup timer interrupts\n");
c01017f0:	83 ec 0c             	sub    $0xc,%esp
c01017f3:	68 5a 47 11 c0       	push   $0xc011475a
c01017f8:	e8 8a eb ff ff       	call   c0100387 <cprintf>
c01017fd:	83 c4 10             	add    $0x10,%esp
    pic_enable(IRQ_TIMER);
c0101800:	83 ec 0c             	sub    $0xc,%esp
c0101803:	6a 00                	push   $0x0
c0101805:	e8 3b 09 00 00       	call   c0102145 <pic_enable>
c010180a:	83 c4 10             	add    $0x10,%esp
}
c010180d:	90                   	nop
c010180e:	c9                   	leave  
c010180f:	c3                   	ret    

c0101810 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0101810:	55                   	push   %ebp
c0101811:	89 e5                	mov    %esp,%ebp
c0101813:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0101816:	9c                   	pushf  
c0101817:	58                   	pop    %eax
c0101818:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010181b:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010181e:	25 00 02 00 00       	and    $0x200,%eax
c0101823:	85 c0                	test   %eax,%eax
c0101825:	74 0c                	je     c0101833 <__intr_save+0x23>
        intr_disable();
c0101827:	e8 8a 0a 00 00       	call   c01022b6 <intr_disable>
        return 1;
c010182c:	b8 01 00 00 00       	mov    $0x1,%eax
c0101831:	eb 05                	jmp    c0101838 <__intr_save+0x28>
    }
    return 0;
c0101833:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101838:	c9                   	leave  
c0101839:	c3                   	ret    

c010183a <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010183a:	55                   	push   %ebp
c010183b:	89 e5                	mov    %esp,%ebp
c010183d:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0101840:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0101844:	74 05                	je     c010184b <__intr_restore+0x11>
        intr_enable();
c0101846:	e8 64 0a 00 00       	call   c01022af <intr_enable>
    }
}
c010184b:	90                   	nop
c010184c:	c9                   	leave  
c010184d:	c3                   	ret    

c010184e <delay>:
#include <memlayout.h>
#include <sync.h>

/* stupid I/O delay routine necessitated by historical PC design flaws */
static void
delay(void) {
c010184e:	55                   	push   %ebp
c010184f:	89 e5                	mov    %esp,%ebp
c0101851:	83 ec 10             	sub    $0x10,%esp
c0101854:	66 c7 45 fe 84 00    	movw   $0x84,-0x2(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c010185a:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c010185e:	89 c2                	mov    %eax,%edx
c0101860:	ec                   	in     (%dx),%al
c0101861:	88 45 f4             	mov    %al,-0xc(%ebp)
c0101864:	66 c7 45 fc 84 00    	movw   $0x84,-0x4(%ebp)
c010186a:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c010186e:	89 c2                	mov    %eax,%edx
c0101870:	ec                   	in     (%dx),%al
c0101871:	88 45 f5             	mov    %al,-0xb(%ebp)
c0101874:	66 c7 45 fa 84 00    	movw   $0x84,-0x6(%ebp)
c010187a:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c010187e:	89 c2                	mov    %eax,%edx
c0101880:	ec                   	in     (%dx),%al
c0101881:	88 45 f6             	mov    %al,-0xa(%ebp)
c0101884:	66 c7 45 f8 84 00    	movw   $0x84,-0x8(%ebp)
c010188a:	0f b7 45 f8          	movzwl -0x8(%ebp),%eax
c010188e:	89 c2                	mov    %eax,%edx
c0101890:	ec                   	in     (%dx),%al
c0101891:	88 45 f7             	mov    %al,-0x9(%ebp)
    inb(0x84);
    inb(0x84);
    inb(0x84);
    inb(0x84);
}
c0101894:	90                   	nop
c0101895:	c9                   	leave  
c0101896:	c3                   	ret    

c0101897 <cga_init>:
static uint16_t addr_6845;

/* TEXT-mode CGA/VGA display output */

static void
cga_init(void) {
c0101897:	55                   	push   %ebp
c0101898:	89 e5                	mov    %esp,%ebp
c010189a:	83 ec 20             	sub    $0x20,%esp
    volatile uint16_t *cp = (uint16_t *)(CGA_BUF + KERNBASE);
c010189d:	c7 45 fc 00 80 0b c0 	movl   $0xc00b8000,-0x4(%ebp)
    uint16_t was = *cp;
c01018a4:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01018a7:	0f b7 00             	movzwl (%eax),%eax
c01018aa:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    *cp = (uint16_t) 0xA55A;
c01018ae:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01018b1:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
    if (*cp != 0xA55A) {
c01018b6:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01018b9:	0f b7 00             	movzwl (%eax),%eax
c01018bc:	66 3d 5a a5          	cmp    $0xa55a,%ax
c01018c0:	74 12                	je     c01018d4 <cga_init+0x3d>
        cp = (uint16_t*)(MONO_BUF + KERNBASE);
c01018c2:	c7 45 fc 00 00 0b c0 	movl   $0xc00b0000,-0x4(%ebp)
        addr_6845 = MONO_BASE;
c01018c9:	66 c7 05 26 15 15 c0 	movw   $0x3b4,0xc0151526
c01018d0:	b4 03 
c01018d2:	eb 13                	jmp    c01018e7 <cga_init+0x50>
    } else {
        *cp = was;
c01018d4:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01018d7:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c01018db:	66 89 10             	mov    %dx,(%eax)
        addr_6845 = CGA_BASE;
c01018de:	66 c7 05 26 15 15 c0 	movw   $0x3d4,0xc0151526
c01018e5:	d4 03 
    }

    // Extract cursor location
    uint32_t pos;
    outb(addr_6845, 14);
c01018e7:	0f b7 05 26 15 15 c0 	movzwl 0xc0151526,%eax
c01018ee:	0f b7 c0             	movzwl %ax,%eax
c01018f1:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
c01018f5:	c6 45 ea 0e          	movb   $0xe,-0x16(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01018f9:	0f b6 45 ea          	movzbl -0x16(%ebp),%eax
c01018fd:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
c0101901:	ee                   	out    %al,(%dx)
    pos = inb(addr_6845 + 1) << 8;
c0101902:	0f b7 05 26 15 15 c0 	movzwl 0xc0151526,%eax
c0101909:	83 c0 01             	add    $0x1,%eax
c010190c:	0f b7 c0             	movzwl %ax,%eax
c010190f:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101913:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101917:	89 c2                	mov    %eax,%edx
c0101919:	ec                   	in     (%dx),%al
c010191a:	88 45 eb             	mov    %al,-0x15(%ebp)
    return data;
c010191d:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
c0101921:	0f b6 c0             	movzbl %al,%eax
c0101924:	c1 e0 08             	shl    $0x8,%eax
c0101927:	89 45 f4             	mov    %eax,-0xc(%ebp)
    outb(addr_6845, 15);
c010192a:	0f b7 05 26 15 15 c0 	movzwl 0xc0151526,%eax
c0101931:	0f b7 c0             	movzwl %ax,%eax
c0101934:	66 89 45 f0          	mov    %ax,-0x10(%ebp)
c0101938:	c6 45 ec 0f          	movb   $0xf,-0x14(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010193c:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
c0101940:	0f b7 55 f0          	movzwl -0x10(%ebp),%edx
c0101944:	ee                   	out    %al,(%dx)
    pos |= inb(addr_6845 + 1);
c0101945:	0f b7 05 26 15 15 c0 	movzwl 0xc0151526,%eax
c010194c:	83 c0 01             	add    $0x1,%eax
c010194f:	0f b7 c0             	movzwl %ax,%eax
c0101952:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101956:	0f b7 45 ee          	movzwl -0x12(%ebp),%eax
c010195a:	89 c2                	mov    %eax,%edx
c010195c:	ec                   	in     (%dx),%al
c010195d:	88 45 ed             	mov    %al,-0x13(%ebp)
    return data;
c0101960:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101964:	0f b6 c0             	movzbl %al,%eax
c0101967:	09 45 f4             	or     %eax,-0xc(%ebp)

    crt_buf = (uint16_t*) cp;
c010196a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010196d:	a3 20 15 15 c0       	mov    %eax,0xc0151520
    crt_pos = pos;
c0101972:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101975:	66 a3 24 15 15 c0    	mov    %ax,0xc0151524
}
c010197b:	90                   	nop
c010197c:	c9                   	leave  
c010197d:	c3                   	ret    

c010197e <serial_init>:

static bool serial_exists = 0;

static void
serial_init(void) {
c010197e:	55                   	push   %ebp
c010197f:	89 e5                	mov    %esp,%ebp
c0101981:	83 ec 28             	sub    $0x28,%esp
c0101984:	66 c7 45 f6 fa 03    	movw   $0x3fa,-0xa(%ebp)
c010198a:	c6 45 da 00          	movb   $0x0,-0x26(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010198e:	0f b6 45 da          	movzbl -0x26(%ebp),%eax
c0101992:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0101996:	ee                   	out    %al,(%dx)
c0101997:	66 c7 45 f4 fb 03    	movw   $0x3fb,-0xc(%ebp)
c010199d:	c6 45 db 80          	movb   $0x80,-0x25(%ebp)
c01019a1:	0f b6 45 db          	movzbl -0x25(%ebp),%eax
c01019a5:	0f b7 55 f4          	movzwl -0xc(%ebp),%edx
c01019a9:	ee                   	out    %al,(%dx)
c01019aa:	66 c7 45 f2 f8 03    	movw   $0x3f8,-0xe(%ebp)
c01019b0:	c6 45 dc 0c          	movb   $0xc,-0x24(%ebp)
c01019b4:	0f b6 45 dc          	movzbl -0x24(%ebp),%eax
c01019b8:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01019bc:	ee                   	out    %al,(%dx)
c01019bd:	66 c7 45 f0 f9 03    	movw   $0x3f9,-0x10(%ebp)
c01019c3:	c6 45 dd 00          	movb   $0x0,-0x23(%ebp)
c01019c7:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c01019cb:	0f b7 55 f0          	movzwl -0x10(%ebp),%edx
c01019cf:	ee                   	out    %al,(%dx)
c01019d0:	66 c7 45 ee fb 03    	movw   $0x3fb,-0x12(%ebp)
c01019d6:	c6 45 de 03          	movb   $0x3,-0x22(%ebp)
c01019da:	0f b6 45 de          	movzbl -0x22(%ebp),%eax
c01019de:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c01019e2:	ee                   	out    %al,(%dx)
c01019e3:	66 c7 45 ec fc 03    	movw   $0x3fc,-0x14(%ebp)
c01019e9:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
c01019ed:	0f b6 45 df          	movzbl -0x21(%ebp),%eax
c01019f1:	0f b7 55 ec          	movzwl -0x14(%ebp),%edx
c01019f5:	ee                   	out    %al,(%dx)
c01019f6:	66 c7 45 ea f9 03    	movw   $0x3f9,-0x16(%ebp)
c01019fc:	c6 45 e0 01          	movb   $0x1,-0x20(%ebp)
c0101a00:	0f b6 45 e0          	movzbl -0x20(%ebp),%eax
c0101a04:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101a08:	ee                   	out    %al,(%dx)
c0101a09:	66 c7 45 e8 fd 03    	movw   $0x3fd,-0x18(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101a0f:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
c0101a13:	89 c2                	mov    %eax,%edx
c0101a15:	ec                   	in     (%dx),%al
c0101a16:	88 45 e1             	mov    %al,-0x1f(%ebp)
    return data;
c0101a19:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
    // Enable rcv interrupts
    outb(COM1 + COM_IER, COM_IER_RDI);

    // Clear any preexisting overrun indications and interrupts
    // Serial port doesn't exist if COM_LSR returns 0xFF
    serial_exists = (inb(COM1 + COM_LSR) != 0xFF);
c0101a1d:	3c ff                	cmp    $0xff,%al
c0101a1f:	0f 95 c0             	setne  %al
c0101a22:	0f b6 c0             	movzbl %al,%eax
c0101a25:	a3 28 15 15 c0       	mov    %eax,0xc0151528
c0101a2a:	66 c7 45 e6 fa 03    	movw   $0x3fa,-0x1a(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101a30:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c0101a34:	89 c2                	mov    %eax,%edx
c0101a36:	ec                   	in     (%dx),%al
c0101a37:	88 45 e2             	mov    %al,-0x1e(%ebp)
c0101a3a:	66 c7 45 e4 f8 03    	movw   $0x3f8,-0x1c(%ebp)
c0101a40:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
c0101a44:	89 c2                	mov    %eax,%edx
c0101a46:	ec                   	in     (%dx),%al
c0101a47:	88 45 e3             	mov    %al,-0x1d(%ebp)
    (void) inb(COM1+COM_IIR);
    (void) inb(COM1+COM_RX);

    if (serial_exists) {
c0101a4a:	a1 28 15 15 c0       	mov    0xc0151528,%eax
c0101a4f:	85 c0                	test   %eax,%eax
c0101a51:	74 0d                	je     c0101a60 <serial_init+0xe2>
        pic_enable(IRQ_COM1);
c0101a53:	83 ec 0c             	sub    $0xc,%esp
c0101a56:	6a 04                	push   $0x4
c0101a58:	e8 e8 06 00 00       	call   c0102145 <pic_enable>
c0101a5d:	83 c4 10             	add    $0x10,%esp
    }
}
c0101a60:	90                   	nop
c0101a61:	c9                   	leave  
c0101a62:	c3                   	ret    

c0101a63 <lpt_putc_sub>:

static void
lpt_putc_sub(int c) {
c0101a63:	55                   	push   %ebp
c0101a64:	89 e5                	mov    %esp,%ebp
c0101a66:	83 ec 10             	sub    $0x10,%esp
    int i;
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c0101a69:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0101a70:	eb 09                	jmp    c0101a7b <lpt_putc_sub+0x18>
        delay();
c0101a72:	e8 d7 fd ff ff       	call   c010184e <delay>
}

static void
lpt_putc_sub(int c) {
    int i;
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c0101a77:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0101a7b:	66 c7 45 f4 79 03    	movw   $0x379,-0xc(%ebp)
c0101a81:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c0101a85:	89 c2                	mov    %eax,%edx
c0101a87:	ec                   	in     (%dx),%al
c0101a88:	88 45 f3             	mov    %al,-0xd(%ebp)
    return data;
c0101a8b:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101a8f:	84 c0                	test   %al,%al
c0101a91:	78 09                	js     c0101a9c <lpt_putc_sub+0x39>
c0101a93:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
c0101a9a:	7e d6                	jle    c0101a72 <lpt_putc_sub+0xf>
        delay();
    }
    outb(LPTPORT + 0, c);
c0101a9c:	8b 45 08             	mov    0x8(%ebp),%eax
c0101a9f:	0f b6 c0             	movzbl %al,%eax
c0101aa2:	66 c7 45 f8 78 03    	movw   $0x378,-0x8(%ebp)
c0101aa8:	88 45 f0             	mov    %al,-0x10(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101aab:	0f b6 45 f0          	movzbl -0x10(%ebp),%eax
c0101aaf:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
c0101ab3:	ee                   	out    %al,(%dx)
c0101ab4:	66 c7 45 f6 7a 03    	movw   $0x37a,-0xa(%ebp)
c0101aba:	c6 45 f1 0d          	movb   $0xd,-0xf(%ebp)
c0101abe:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0101ac2:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0101ac6:	ee                   	out    %al,(%dx)
c0101ac7:	66 c7 45 fa 7a 03    	movw   $0x37a,-0x6(%ebp)
c0101acd:	c6 45 f2 08          	movb   $0x8,-0xe(%ebp)
c0101ad1:	0f b6 45 f2          	movzbl -0xe(%ebp),%eax
c0101ad5:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c0101ad9:	ee                   	out    %al,(%dx)
    outb(LPTPORT + 2, 0x08 | 0x04 | 0x01);
    outb(LPTPORT + 2, 0x08);
}
c0101ada:	90                   	nop
c0101adb:	c9                   	leave  
c0101adc:	c3                   	ret    

c0101add <lpt_putc>:

/* lpt_putc - copy console output to parallel port */
static void
lpt_putc(int c) {
c0101add:	55                   	push   %ebp
c0101ade:	89 e5                	mov    %esp,%ebp
    if (c != '\b') {
c0101ae0:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c0101ae4:	74 0d                	je     c0101af3 <lpt_putc+0x16>
        lpt_putc_sub(c);
c0101ae6:	ff 75 08             	pushl  0x8(%ebp)
c0101ae9:	e8 75 ff ff ff       	call   c0101a63 <lpt_putc_sub>
c0101aee:	83 c4 04             	add    $0x4,%esp
    else {
        lpt_putc_sub('\b');
        lpt_putc_sub(' ');
        lpt_putc_sub('\b');
    }
}
c0101af1:	eb 1e                	jmp    c0101b11 <lpt_putc+0x34>
lpt_putc(int c) {
    if (c != '\b') {
        lpt_putc_sub(c);
    }
    else {
        lpt_putc_sub('\b');
c0101af3:	6a 08                	push   $0x8
c0101af5:	e8 69 ff ff ff       	call   c0101a63 <lpt_putc_sub>
c0101afa:	83 c4 04             	add    $0x4,%esp
        lpt_putc_sub(' ');
c0101afd:	6a 20                	push   $0x20
c0101aff:	e8 5f ff ff ff       	call   c0101a63 <lpt_putc_sub>
c0101b04:	83 c4 04             	add    $0x4,%esp
        lpt_putc_sub('\b');
c0101b07:	6a 08                	push   $0x8
c0101b09:	e8 55 ff ff ff       	call   c0101a63 <lpt_putc_sub>
c0101b0e:	83 c4 04             	add    $0x4,%esp
    }
}
c0101b11:	90                   	nop
c0101b12:	c9                   	leave  
c0101b13:	c3                   	ret    

c0101b14 <cga_putc>:

/* cga_putc - print character to console */
static void
cga_putc(int c) {
c0101b14:	55                   	push   %ebp
c0101b15:	89 e5                	mov    %esp,%ebp
c0101b17:	53                   	push   %ebx
c0101b18:	83 ec 14             	sub    $0x14,%esp
    // set black on white
    if (!(c & ~0xFF)) {
c0101b1b:	8b 45 08             	mov    0x8(%ebp),%eax
c0101b1e:	b0 00                	mov    $0x0,%al
c0101b20:	85 c0                	test   %eax,%eax
c0101b22:	75 07                	jne    c0101b2b <cga_putc+0x17>
        c |= 0x0700;
c0101b24:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)
    }

    switch (c & 0xff) {
c0101b2b:	8b 45 08             	mov    0x8(%ebp),%eax
c0101b2e:	0f b6 c0             	movzbl %al,%eax
c0101b31:	83 f8 0a             	cmp    $0xa,%eax
c0101b34:	74 4e                	je     c0101b84 <cga_putc+0x70>
c0101b36:	83 f8 0d             	cmp    $0xd,%eax
c0101b39:	74 59                	je     c0101b94 <cga_putc+0x80>
c0101b3b:	83 f8 08             	cmp    $0x8,%eax
c0101b3e:	0f 85 8a 00 00 00    	jne    c0101bce <cga_putc+0xba>
    case '\b':
        if (crt_pos > 0) {
c0101b44:	0f b7 05 24 15 15 c0 	movzwl 0xc0151524,%eax
c0101b4b:	66 85 c0             	test   %ax,%ax
c0101b4e:	0f 84 a0 00 00 00    	je     c0101bf4 <cga_putc+0xe0>
            crt_pos --;
c0101b54:	0f b7 05 24 15 15 c0 	movzwl 0xc0151524,%eax
c0101b5b:	83 e8 01             	sub    $0x1,%eax
c0101b5e:	66 a3 24 15 15 c0    	mov    %ax,0xc0151524
            crt_buf[crt_pos] = (c & ~0xff) | ' ';
c0101b64:	a1 20 15 15 c0       	mov    0xc0151520,%eax
c0101b69:	0f b7 15 24 15 15 c0 	movzwl 0xc0151524,%edx
c0101b70:	0f b7 d2             	movzwl %dx,%edx
c0101b73:	01 d2                	add    %edx,%edx
c0101b75:	01 d0                	add    %edx,%eax
c0101b77:	8b 55 08             	mov    0x8(%ebp),%edx
c0101b7a:	b2 00                	mov    $0x0,%dl
c0101b7c:	83 ca 20             	or     $0x20,%edx
c0101b7f:	66 89 10             	mov    %dx,(%eax)
        }
        break;
c0101b82:	eb 70                	jmp    c0101bf4 <cga_putc+0xe0>
    case '\n':
        crt_pos += CRT_COLS;
c0101b84:	0f b7 05 24 15 15 c0 	movzwl 0xc0151524,%eax
c0101b8b:	83 c0 50             	add    $0x50,%eax
c0101b8e:	66 a3 24 15 15 c0    	mov    %ax,0xc0151524
    case '\r':
        crt_pos -= (crt_pos % CRT_COLS);
c0101b94:	0f b7 1d 24 15 15 c0 	movzwl 0xc0151524,%ebx
c0101b9b:	0f b7 0d 24 15 15 c0 	movzwl 0xc0151524,%ecx
c0101ba2:	0f b7 c1             	movzwl %cx,%eax
c0101ba5:	69 c0 cd cc 00 00    	imul   $0xcccd,%eax,%eax
c0101bab:	c1 e8 10             	shr    $0x10,%eax
c0101bae:	89 c2                	mov    %eax,%edx
c0101bb0:	66 c1 ea 06          	shr    $0x6,%dx
c0101bb4:	89 d0                	mov    %edx,%eax
c0101bb6:	c1 e0 02             	shl    $0x2,%eax
c0101bb9:	01 d0                	add    %edx,%eax
c0101bbb:	c1 e0 04             	shl    $0x4,%eax
c0101bbe:	29 c1                	sub    %eax,%ecx
c0101bc0:	89 ca                	mov    %ecx,%edx
c0101bc2:	89 d8                	mov    %ebx,%eax
c0101bc4:	29 d0                	sub    %edx,%eax
c0101bc6:	66 a3 24 15 15 c0    	mov    %ax,0xc0151524
        break;
c0101bcc:	eb 27                	jmp    c0101bf5 <cga_putc+0xe1>
    default:
        crt_buf[crt_pos ++] = c;     // write the character
c0101bce:	8b 0d 20 15 15 c0    	mov    0xc0151520,%ecx
c0101bd4:	0f b7 05 24 15 15 c0 	movzwl 0xc0151524,%eax
c0101bdb:	8d 50 01             	lea    0x1(%eax),%edx
c0101bde:	66 89 15 24 15 15 c0 	mov    %dx,0xc0151524
c0101be5:	0f b7 c0             	movzwl %ax,%eax
c0101be8:	01 c0                	add    %eax,%eax
c0101bea:	01 c8                	add    %ecx,%eax
c0101bec:	8b 55 08             	mov    0x8(%ebp),%edx
c0101bef:	66 89 10             	mov    %dx,(%eax)
        break;
c0101bf2:	eb 01                	jmp    c0101bf5 <cga_putc+0xe1>
    case '\b':
        if (crt_pos > 0) {
            crt_pos --;
            crt_buf[crt_pos] = (c & ~0xff) | ' ';
        }
        break;
c0101bf4:	90                   	nop
        crt_buf[crt_pos ++] = c;     // write the character
        break;
    }

    // What is the purpose of this?
    if (crt_pos >= CRT_SIZE) {
c0101bf5:	0f b7 05 24 15 15 c0 	movzwl 0xc0151524,%eax
c0101bfc:	66 3d cf 07          	cmp    $0x7cf,%ax
c0101c00:	76 59                	jbe    c0101c5b <cga_putc+0x147>
        int i;
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
c0101c02:	a1 20 15 15 c0       	mov    0xc0151520,%eax
c0101c07:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
c0101c0d:	a1 20 15 15 c0       	mov    0xc0151520,%eax
c0101c12:	83 ec 04             	sub    $0x4,%esp
c0101c15:	68 00 0f 00 00       	push   $0xf00
c0101c1a:	52                   	push   %edx
c0101c1b:	50                   	push   %eax
c0101c1c:	e8 81 1e 01 00       	call   c0113aa2 <memmove>
c0101c21:	83 c4 10             	add    $0x10,%esp
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c0101c24:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
c0101c2b:	eb 15                	jmp    c0101c42 <cga_putc+0x12e>
            crt_buf[i] = 0x0700 | ' ';
c0101c2d:	a1 20 15 15 c0       	mov    0xc0151520,%eax
c0101c32:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0101c35:	01 d2                	add    %edx,%edx
c0101c37:	01 d0                	add    %edx,%eax
c0101c39:	66 c7 00 20 07       	movw   $0x720,(%eax)

    // What is the purpose of this?
    if (crt_pos >= CRT_SIZE) {
        int i;
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c0101c3e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0101c42:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
c0101c49:	7e e2                	jle    c0101c2d <cga_putc+0x119>
            crt_buf[i] = 0x0700 | ' ';
        }
        crt_pos -= CRT_COLS;
c0101c4b:	0f b7 05 24 15 15 c0 	movzwl 0xc0151524,%eax
c0101c52:	83 e8 50             	sub    $0x50,%eax
c0101c55:	66 a3 24 15 15 c0    	mov    %ax,0xc0151524
    }

    // move that little blinky thing
    outb(addr_6845, 14);
c0101c5b:	0f b7 05 26 15 15 c0 	movzwl 0xc0151526,%eax
c0101c62:	0f b7 c0             	movzwl %ax,%eax
c0101c65:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0101c69:	c6 45 e8 0e          	movb   $0xe,-0x18(%ebp)
c0101c6d:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
c0101c71:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101c75:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos >> 8);
c0101c76:	0f b7 05 24 15 15 c0 	movzwl 0xc0151524,%eax
c0101c7d:	66 c1 e8 08          	shr    $0x8,%ax
c0101c81:	0f b6 c0             	movzbl %al,%eax
c0101c84:	0f b7 15 26 15 15 c0 	movzwl 0xc0151526,%edx
c0101c8b:	83 c2 01             	add    $0x1,%edx
c0101c8e:	0f b7 d2             	movzwl %dx,%edx
c0101c91:	66 89 55 f0          	mov    %dx,-0x10(%ebp)
c0101c95:	88 45 e9             	mov    %al,-0x17(%ebp)
c0101c98:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101c9c:	0f b7 55 f0          	movzwl -0x10(%ebp),%edx
c0101ca0:	ee                   	out    %al,(%dx)
    outb(addr_6845, 15);
c0101ca1:	0f b7 05 26 15 15 c0 	movzwl 0xc0151526,%eax
c0101ca8:	0f b7 c0             	movzwl %ax,%eax
c0101cab:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
c0101caf:	c6 45 ea 0f          	movb   $0xf,-0x16(%ebp)
c0101cb3:	0f b6 45 ea          	movzbl -0x16(%ebp),%eax
c0101cb7:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101cbb:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos);
c0101cbc:	0f b7 05 24 15 15 c0 	movzwl 0xc0151524,%eax
c0101cc3:	0f b6 c0             	movzbl %al,%eax
c0101cc6:	0f b7 15 26 15 15 c0 	movzwl 0xc0151526,%edx
c0101ccd:	83 c2 01             	add    $0x1,%edx
c0101cd0:	0f b7 d2             	movzwl %dx,%edx
c0101cd3:	66 89 55 ec          	mov    %dx,-0x14(%ebp)
c0101cd7:	88 45 eb             	mov    %al,-0x15(%ebp)
c0101cda:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
c0101cde:	0f b7 55 ec          	movzwl -0x14(%ebp),%edx
c0101ce2:	ee                   	out    %al,(%dx)
}
c0101ce3:	90                   	nop
c0101ce4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0101ce7:	c9                   	leave  
c0101ce8:	c3                   	ret    

c0101ce9 <serial_putc_sub>:

static void
serial_putc_sub(int c) {
c0101ce9:	55                   	push   %ebp
c0101cea:	89 e5                	mov    %esp,%ebp
c0101cec:	83 ec 10             	sub    $0x10,%esp
    int i;
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c0101cef:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0101cf6:	eb 09                	jmp    c0101d01 <serial_putc_sub+0x18>
        delay();
c0101cf8:	e8 51 fb ff ff       	call   c010184e <delay>
}

static void
serial_putc_sub(int c) {
    int i;
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c0101cfd:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0101d01:	66 c7 45 f8 fd 03    	movw   $0x3fd,-0x8(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101d07:	0f b7 45 f8          	movzwl -0x8(%ebp),%eax
c0101d0b:	89 c2                	mov    %eax,%edx
c0101d0d:	ec                   	in     (%dx),%al
c0101d0e:	88 45 f7             	mov    %al,-0x9(%ebp)
    return data;
c0101d11:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0101d15:	0f b6 c0             	movzbl %al,%eax
c0101d18:	83 e0 20             	and    $0x20,%eax
c0101d1b:	85 c0                	test   %eax,%eax
c0101d1d:	75 09                	jne    c0101d28 <serial_putc_sub+0x3f>
c0101d1f:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
c0101d26:	7e d0                	jle    c0101cf8 <serial_putc_sub+0xf>
        delay();
    }
    outb(COM1 + COM_TX, c);
c0101d28:	8b 45 08             	mov    0x8(%ebp),%eax
c0101d2b:	0f b6 c0             	movzbl %al,%eax
c0101d2e:	66 c7 45 fa f8 03    	movw   $0x3f8,-0x6(%ebp)
c0101d34:	88 45 f6             	mov    %al,-0xa(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101d37:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
c0101d3b:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c0101d3f:	ee                   	out    %al,(%dx)
}
c0101d40:	90                   	nop
c0101d41:	c9                   	leave  
c0101d42:	c3                   	ret    

c0101d43 <serial_putc>:

/* serial_putc - print character to serial port */
static void
serial_putc(int c) {
c0101d43:	55                   	push   %ebp
c0101d44:	89 e5                	mov    %esp,%ebp
    if (c != '\b') {
c0101d46:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c0101d4a:	74 0d                	je     c0101d59 <serial_putc+0x16>
        serial_putc_sub(c);
c0101d4c:	ff 75 08             	pushl  0x8(%ebp)
c0101d4f:	e8 95 ff ff ff       	call   c0101ce9 <serial_putc_sub>
c0101d54:	83 c4 04             	add    $0x4,%esp
    else {
        serial_putc_sub('\b');
        serial_putc_sub(' ');
        serial_putc_sub('\b');
    }
}
c0101d57:	eb 1e                	jmp    c0101d77 <serial_putc+0x34>
serial_putc(int c) {
    if (c != '\b') {
        serial_putc_sub(c);
    }
    else {
        serial_putc_sub('\b');
c0101d59:	6a 08                	push   $0x8
c0101d5b:	e8 89 ff ff ff       	call   c0101ce9 <serial_putc_sub>
c0101d60:	83 c4 04             	add    $0x4,%esp
        serial_putc_sub(' ');
c0101d63:	6a 20                	push   $0x20
c0101d65:	e8 7f ff ff ff       	call   c0101ce9 <serial_putc_sub>
c0101d6a:	83 c4 04             	add    $0x4,%esp
        serial_putc_sub('\b');
c0101d6d:	6a 08                	push   $0x8
c0101d6f:	e8 75 ff ff ff       	call   c0101ce9 <serial_putc_sub>
c0101d74:	83 c4 04             	add    $0x4,%esp
    }
}
c0101d77:	90                   	nop
c0101d78:	c9                   	leave  
c0101d79:	c3                   	ret    

c0101d7a <cons_intr>:
/* *
 * cons_intr - called by device interrupt routines to feed input
 * characters into the circular console input buffer.
 * */
static void
cons_intr(int (*proc)(void)) {
c0101d7a:	55                   	push   %ebp
c0101d7b:	89 e5                	mov    %esp,%ebp
c0101d7d:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = (*proc)()) != -1) {
c0101d80:	eb 33                	jmp    c0101db5 <cons_intr+0x3b>
        if (c != 0) {
c0101d82:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0101d86:	74 2d                	je     c0101db5 <cons_intr+0x3b>
            cons.buf[cons.wpos ++] = c;
c0101d88:	a1 44 17 15 c0       	mov    0xc0151744,%eax
c0101d8d:	8d 50 01             	lea    0x1(%eax),%edx
c0101d90:	89 15 44 17 15 c0    	mov    %edx,0xc0151744
c0101d96:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0101d99:	88 90 40 15 15 c0    	mov    %dl,-0x3feaeac0(%eax)
            if (cons.wpos == CONSBUFSIZE) {
c0101d9f:	a1 44 17 15 c0       	mov    0xc0151744,%eax
c0101da4:	3d 00 02 00 00       	cmp    $0x200,%eax
c0101da9:	75 0a                	jne    c0101db5 <cons_intr+0x3b>
                cons.wpos = 0;
c0101dab:	c7 05 44 17 15 c0 00 	movl   $0x0,0xc0151744
c0101db2:	00 00 00 
 * characters into the circular console input buffer.
 * */
static void
cons_intr(int (*proc)(void)) {
    int c;
    while ((c = (*proc)()) != -1) {
c0101db5:	8b 45 08             	mov    0x8(%ebp),%eax
c0101db8:	ff d0                	call   *%eax
c0101dba:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0101dbd:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
c0101dc1:	75 bf                	jne    c0101d82 <cons_intr+0x8>
            if (cons.wpos == CONSBUFSIZE) {
                cons.wpos = 0;
            }
        }
    }
}
c0101dc3:	90                   	nop
c0101dc4:	c9                   	leave  
c0101dc5:	c3                   	ret    

c0101dc6 <serial_proc_data>:

/* serial_proc_data - get data from serial port */
static int
serial_proc_data(void) {
c0101dc6:	55                   	push   %ebp
c0101dc7:	89 e5                	mov    %esp,%ebp
c0101dc9:	83 ec 10             	sub    $0x10,%esp
c0101dcc:	66 c7 45 f8 fd 03    	movw   $0x3fd,-0x8(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101dd2:	0f b7 45 f8          	movzwl -0x8(%ebp),%eax
c0101dd6:	89 c2                	mov    %eax,%edx
c0101dd8:	ec                   	in     (%dx),%al
c0101dd9:	88 45 f7             	mov    %al,-0x9(%ebp)
    return data;
c0101ddc:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
    if (!(inb(COM1 + COM_LSR) & COM_LSR_DATA)) {
c0101de0:	0f b6 c0             	movzbl %al,%eax
c0101de3:	83 e0 01             	and    $0x1,%eax
c0101de6:	85 c0                	test   %eax,%eax
c0101de8:	75 07                	jne    c0101df1 <serial_proc_data+0x2b>
        return -1;
c0101dea:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101def:	eb 2a                	jmp    c0101e1b <serial_proc_data+0x55>
c0101df1:	66 c7 45 fa f8 03    	movw   $0x3f8,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101df7:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0101dfb:	89 c2                	mov    %eax,%edx
c0101dfd:	ec                   	in     (%dx),%al
c0101dfe:	88 45 f6             	mov    %al,-0xa(%ebp)
    return data;
c0101e01:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
    }
    int c = inb(COM1 + COM_RX);
c0101e05:	0f b6 c0             	movzbl %al,%eax
c0101e08:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (c == 127) {
c0101e0b:	83 7d fc 7f          	cmpl   $0x7f,-0x4(%ebp)
c0101e0f:	75 07                	jne    c0101e18 <serial_proc_data+0x52>
        c = '\b';
c0101e11:	c7 45 fc 08 00 00 00 	movl   $0x8,-0x4(%ebp)
    }
    return c;
c0101e18:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0101e1b:	c9                   	leave  
c0101e1c:	c3                   	ret    

c0101e1d <serial_intr>:

/* serial_intr - try to feed input characters from serial port */
void
serial_intr(void) {
c0101e1d:	55                   	push   %ebp
c0101e1e:	89 e5                	mov    %esp,%ebp
c0101e20:	83 ec 08             	sub    $0x8,%esp
    if (serial_exists) {
c0101e23:	a1 28 15 15 c0       	mov    0xc0151528,%eax
c0101e28:	85 c0                	test   %eax,%eax
c0101e2a:	74 10                	je     c0101e3c <serial_intr+0x1f>
        cons_intr(serial_proc_data);
c0101e2c:	83 ec 0c             	sub    $0xc,%esp
c0101e2f:	68 c6 1d 10 c0       	push   $0xc0101dc6
c0101e34:	e8 41 ff ff ff       	call   c0101d7a <cons_intr>
c0101e39:	83 c4 10             	add    $0x10,%esp
    }
}
c0101e3c:	90                   	nop
c0101e3d:	c9                   	leave  
c0101e3e:	c3                   	ret    

c0101e3f <kbd_proc_data>:
 *
 * The kbd_proc_data() function gets data from the keyboard.
 * If we finish a character, return it, else 0. And return -1 if no data.
 * */
static int
kbd_proc_data(void) {
c0101e3f:	55                   	push   %ebp
c0101e40:	89 e5                	mov    %esp,%ebp
c0101e42:	83 ec 18             	sub    $0x18,%esp
c0101e45:	66 c7 45 ec 64 00    	movw   $0x64,-0x14(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101e4b:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0101e4f:	89 c2                	mov    %eax,%edx
c0101e51:	ec                   	in     (%dx),%al
c0101e52:	88 45 eb             	mov    %al,-0x15(%ebp)
    return data;
c0101e55:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
    int c;
    uint8_t data;
    static uint32_t shift;

    if ((inb(KBSTATP) & KBS_DIB) == 0) {
c0101e59:	0f b6 c0             	movzbl %al,%eax
c0101e5c:	83 e0 01             	and    $0x1,%eax
c0101e5f:	85 c0                	test   %eax,%eax
c0101e61:	75 0a                	jne    c0101e6d <kbd_proc_data+0x2e>
        return -1;
c0101e63:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101e68:	e9 5d 01 00 00       	jmp    c0101fca <kbd_proc_data+0x18b>
c0101e6d:	66 c7 45 f0 60 00    	movw   $0x60,-0x10(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101e73:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c0101e77:	89 c2                	mov    %eax,%edx
c0101e79:	ec                   	in     (%dx),%al
c0101e7a:	88 45 ea             	mov    %al,-0x16(%ebp)
    return data;
c0101e7d:	0f b6 45 ea          	movzbl -0x16(%ebp),%eax
    }

    data = inb(KBDATAP);
c0101e81:	88 45 f3             	mov    %al,-0xd(%ebp)

    if (data == 0xE0) {
c0101e84:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
c0101e88:	75 17                	jne    c0101ea1 <kbd_proc_data+0x62>
        // E0 escape character
        shift |= E0ESC;
c0101e8a:	a1 48 17 15 c0       	mov    0xc0151748,%eax
c0101e8f:	83 c8 40             	or     $0x40,%eax
c0101e92:	a3 48 17 15 c0       	mov    %eax,0xc0151748
        return 0;
c0101e97:	b8 00 00 00 00       	mov    $0x0,%eax
c0101e9c:	e9 29 01 00 00       	jmp    c0101fca <kbd_proc_data+0x18b>
    } else if (data & 0x80) {
c0101ea1:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101ea5:	84 c0                	test   %al,%al
c0101ea7:	79 47                	jns    c0101ef0 <kbd_proc_data+0xb1>
        // Key released
        data = (shift & E0ESC ? data : data & 0x7F);
c0101ea9:	a1 48 17 15 c0       	mov    0xc0151748,%eax
c0101eae:	83 e0 40             	and    $0x40,%eax
c0101eb1:	85 c0                	test   %eax,%eax
c0101eb3:	75 09                	jne    c0101ebe <kbd_proc_data+0x7f>
c0101eb5:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101eb9:	83 e0 7f             	and    $0x7f,%eax
c0101ebc:	eb 04                	jmp    c0101ec2 <kbd_proc_data+0x83>
c0101ebe:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101ec2:	88 45 f3             	mov    %al,-0xd(%ebp)
        shift &= ~(shiftcode[data] | E0ESC);
c0101ec5:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101ec9:	0f b6 80 40 e0 14 c0 	movzbl -0x3feb1fc0(%eax),%eax
c0101ed0:	83 c8 40             	or     $0x40,%eax
c0101ed3:	0f b6 c0             	movzbl %al,%eax
c0101ed6:	f7 d0                	not    %eax
c0101ed8:	89 c2                	mov    %eax,%edx
c0101eda:	a1 48 17 15 c0       	mov    0xc0151748,%eax
c0101edf:	21 d0                	and    %edx,%eax
c0101ee1:	a3 48 17 15 c0       	mov    %eax,0xc0151748
        return 0;
c0101ee6:	b8 00 00 00 00       	mov    $0x0,%eax
c0101eeb:	e9 da 00 00 00       	jmp    c0101fca <kbd_proc_data+0x18b>
    } else if (shift & E0ESC) {
c0101ef0:	a1 48 17 15 c0       	mov    0xc0151748,%eax
c0101ef5:	83 e0 40             	and    $0x40,%eax
c0101ef8:	85 c0                	test   %eax,%eax
c0101efa:	74 11                	je     c0101f0d <kbd_proc_data+0xce>
        // Last character was an E0 escape; or with 0x80
        data |= 0x80;
c0101efc:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
        shift &= ~E0ESC;
c0101f00:	a1 48 17 15 c0       	mov    0xc0151748,%eax
c0101f05:	83 e0 bf             	and    $0xffffffbf,%eax
c0101f08:	a3 48 17 15 c0       	mov    %eax,0xc0151748
    }

    shift |= shiftcode[data];
c0101f0d:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101f11:	0f b6 80 40 e0 14 c0 	movzbl -0x3feb1fc0(%eax),%eax
c0101f18:	0f b6 d0             	movzbl %al,%edx
c0101f1b:	a1 48 17 15 c0       	mov    0xc0151748,%eax
c0101f20:	09 d0                	or     %edx,%eax
c0101f22:	a3 48 17 15 c0       	mov    %eax,0xc0151748
    shift ^= togglecode[data];
c0101f27:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101f2b:	0f b6 80 40 e1 14 c0 	movzbl -0x3feb1ec0(%eax),%eax
c0101f32:	0f b6 d0             	movzbl %al,%edx
c0101f35:	a1 48 17 15 c0       	mov    0xc0151748,%eax
c0101f3a:	31 d0                	xor    %edx,%eax
c0101f3c:	a3 48 17 15 c0       	mov    %eax,0xc0151748

    c = charcode[shift & (CTL | SHIFT)][data];
c0101f41:	a1 48 17 15 c0       	mov    0xc0151748,%eax
c0101f46:	83 e0 03             	and    $0x3,%eax
c0101f49:	8b 14 85 40 e5 14 c0 	mov    -0x3feb1ac0(,%eax,4),%edx
c0101f50:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101f54:	01 d0                	add    %edx,%eax
c0101f56:	0f b6 00             	movzbl (%eax),%eax
c0101f59:	0f b6 c0             	movzbl %al,%eax
c0101f5c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (shift & CAPSLOCK) {
c0101f5f:	a1 48 17 15 c0       	mov    0xc0151748,%eax
c0101f64:	83 e0 08             	and    $0x8,%eax
c0101f67:	85 c0                	test   %eax,%eax
c0101f69:	74 22                	je     c0101f8d <kbd_proc_data+0x14e>
        if ('a' <= c && c <= 'z')
c0101f6b:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
c0101f6f:	7e 0c                	jle    c0101f7d <kbd_proc_data+0x13e>
c0101f71:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
c0101f75:	7f 06                	jg     c0101f7d <kbd_proc_data+0x13e>
            c += 'A' - 'a';
c0101f77:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
c0101f7b:	eb 10                	jmp    c0101f8d <kbd_proc_data+0x14e>
        else if ('A' <= c && c <= 'Z')
c0101f7d:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
c0101f81:	7e 0a                	jle    c0101f8d <kbd_proc_data+0x14e>
c0101f83:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
c0101f87:	7f 04                	jg     c0101f8d <kbd_proc_data+0x14e>
            c += 'a' - 'A';
c0101f89:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
    }

    // Process special keys
    // Ctrl-Alt-Del: reboot
    if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
c0101f8d:	a1 48 17 15 c0       	mov    0xc0151748,%eax
c0101f92:	f7 d0                	not    %eax
c0101f94:	83 e0 06             	and    $0x6,%eax
c0101f97:	85 c0                	test   %eax,%eax
c0101f99:	75 2c                	jne    c0101fc7 <kbd_proc_data+0x188>
c0101f9b:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
c0101fa2:	75 23                	jne    c0101fc7 <kbd_proc_data+0x188>
        cprintf("Rebooting!\n");
c0101fa4:	83 ec 0c             	sub    $0xc,%esp
c0101fa7:	68 75 47 11 c0       	push   $0xc0114775
c0101fac:	e8 d6 e3 ff ff       	call   c0100387 <cprintf>
c0101fb1:	83 c4 10             	add    $0x10,%esp
c0101fb4:	66 c7 45 ee 92 00    	movw   $0x92,-0x12(%ebp)
c0101fba:	c6 45 e9 03          	movb   $0x3,-0x17(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101fbe:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101fc2:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101fc6:	ee                   	out    %al,(%dx)
        outb(0x92, 0x3); // courtesy of Chris Frost
    }
    return c;
c0101fc7:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0101fca:	c9                   	leave  
c0101fcb:	c3                   	ret    

c0101fcc <kbd_intr>:

/* kbd_intr - try to feed input characters from keyboard */
static void
kbd_intr(void) {
c0101fcc:	55                   	push   %ebp
c0101fcd:	89 e5                	mov    %esp,%ebp
c0101fcf:	83 ec 08             	sub    $0x8,%esp
    cons_intr(kbd_proc_data);
c0101fd2:	83 ec 0c             	sub    $0xc,%esp
c0101fd5:	68 3f 1e 10 c0       	push   $0xc0101e3f
c0101fda:	e8 9b fd ff ff       	call   c0101d7a <cons_intr>
c0101fdf:	83 c4 10             	add    $0x10,%esp
}
c0101fe2:	90                   	nop
c0101fe3:	c9                   	leave  
c0101fe4:	c3                   	ret    

c0101fe5 <kbd_init>:

static void
kbd_init(void) {
c0101fe5:	55                   	push   %ebp
c0101fe6:	89 e5                	mov    %esp,%ebp
c0101fe8:	83 ec 08             	sub    $0x8,%esp
    // drain the kbd buffer
    kbd_intr();
c0101feb:	e8 dc ff ff ff       	call   c0101fcc <kbd_intr>
    pic_enable(IRQ_KBD);
c0101ff0:	83 ec 0c             	sub    $0xc,%esp
c0101ff3:	6a 01                	push   $0x1
c0101ff5:	e8 4b 01 00 00       	call   c0102145 <pic_enable>
c0101ffa:	83 c4 10             	add    $0x10,%esp
}
c0101ffd:	90                   	nop
c0101ffe:	c9                   	leave  
c0101fff:	c3                   	ret    

c0102000 <cons_init>:

/* cons_init - initializes the console devices */
void
cons_init(void) {
c0102000:	55                   	push   %ebp
c0102001:	89 e5                	mov    %esp,%ebp
c0102003:	83 ec 08             	sub    $0x8,%esp
    cga_init();
c0102006:	e8 8c f8 ff ff       	call   c0101897 <cga_init>
    serial_init();
c010200b:	e8 6e f9 ff ff       	call   c010197e <serial_init>
    kbd_init();
c0102010:	e8 d0 ff ff ff       	call   c0101fe5 <kbd_init>
    if (!serial_exists) {
c0102015:	a1 28 15 15 c0       	mov    0xc0151528,%eax
c010201a:	85 c0                	test   %eax,%eax
c010201c:	75 10                	jne    c010202e <cons_init+0x2e>
        cprintf("serial port does not exist!!\n");
c010201e:	83 ec 0c             	sub    $0xc,%esp
c0102021:	68 81 47 11 c0       	push   $0xc0114781
c0102026:	e8 5c e3 ff ff       	call   c0100387 <cprintf>
c010202b:	83 c4 10             	add    $0x10,%esp
    }
}
c010202e:	90                   	nop
c010202f:	c9                   	leave  
c0102030:	c3                   	ret    

c0102031 <cons_putc>:

/* cons_putc - print a single character @c to console devices */
void
cons_putc(int c) {
c0102031:	55                   	push   %ebp
c0102032:	89 e5                	mov    %esp,%ebp
c0102034:	83 ec 18             	sub    $0x18,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c0102037:	e8 d4 f7 ff ff       	call   c0101810 <__intr_save>
c010203c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        lpt_putc(c);
c010203f:	83 ec 0c             	sub    $0xc,%esp
c0102042:	ff 75 08             	pushl  0x8(%ebp)
c0102045:	e8 93 fa ff ff       	call   c0101add <lpt_putc>
c010204a:	83 c4 10             	add    $0x10,%esp
        cga_putc(c);
c010204d:	83 ec 0c             	sub    $0xc,%esp
c0102050:	ff 75 08             	pushl  0x8(%ebp)
c0102053:	e8 bc fa ff ff       	call   c0101b14 <cga_putc>
c0102058:	83 c4 10             	add    $0x10,%esp
        serial_putc(c);
c010205b:	83 ec 0c             	sub    $0xc,%esp
c010205e:	ff 75 08             	pushl  0x8(%ebp)
c0102061:	e8 dd fc ff ff       	call   c0101d43 <serial_putc>
c0102066:	83 c4 10             	add    $0x10,%esp
    }
    local_intr_restore(intr_flag);
c0102069:	83 ec 0c             	sub    $0xc,%esp
c010206c:	ff 75 f4             	pushl  -0xc(%ebp)
c010206f:	e8 c6 f7 ff ff       	call   c010183a <__intr_restore>
c0102074:	83 c4 10             	add    $0x10,%esp
}
c0102077:	90                   	nop
c0102078:	c9                   	leave  
c0102079:	c3                   	ret    

c010207a <cons_getc>:
/* *
 * cons_getc - return the next input character from console,
 * or 0 if none waiting.
 * */
int
cons_getc(void) {
c010207a:	55                   	push   %ebp
c010207b:	89 e5                	mov    %esp,%ebp
c010207d:	83 ec 18             	sub    $0x18,%esp
    int c = 0;
c0102080:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    local_intr_save(intr_flag);
c0102087:	e8 84 f7 ff ff       	call   c0101810 <__intr_save>
c010208c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        // poll for any pending input characters,
        // so that this function works even when interrupts are disabled
        // (e.g., when called from the kernel monitor).
        serial_intr();
c010208f:	e8 89 fd ff ff       	call   c0101e1d <serial_intr>
        kbd_intr();
c0102094:	e8 33 ff ff ff       	call   c0101fcc <kbd_intr>

        // grab the next character from the input buffer.
        if (cons.rpos != cons.wpos) {
c0102099:	8b 15 40 17 15 c0    	mov    0xc0151740,%edx
c010209f:	a1 44 17 15 c0       	mov    0xc0151744,%eax
c01020a4:	39 c2                	cmp    %eax,%edx
c01020a6:	74 31                	je     c01020d9 <cons_getc+0x5f>
            c = cons.buf[cons.rpos ++];
c01020a8:	a1 40 17 15 c0       	mov    0xc0151740,%eax
c01020ad:	8d 50 01             	lea    0x1(%eax),%edx
c01020b0:	89 15 40 17 15 c0    	mov    %edx,0xc0151740
c01020b6:	0f b6 80 40 15 15 c0 	movzbl -0x3feaeac0(%eax),%eax
c01020bd:	0f b6 c0             	movzbl %al,%eax
c01020c0:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (cons.rpos == CONSBUFSIZE) {
c01020c3:	a1 40 17 15 c0       	mov    0xc0151740,%eax
c01020c8:	3d 00 02 00 00       	cmp    $0x200,%eax
c01020cd:	75 0a                	jne    c01020d9 <cons_getc+0x5f>
                cons.rpos = 0;
c01020cf:	c7 05 40 17 15 c0 00 	movl   $0x0,0xc0151740
c01020d6:	00 00 00 
            }
        }
    }
    local_intr_restore(intr_flag);
c01020d9:	83 ec 0c             	sub    $0xc,%esp
c01020dc:	ff 75 f0             	pushl  -0x10(%ebp)
c01020df:	e8 56 f7 ff ff       	call   c010183a <__intr_restore>
c01020e4:	83 c4 10             	add    $0x10,%esp
    return c;
c01020e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01020ea:	c9                   	leave  
c01020eb:	c3                   	ret    

c01020ec <pic_setmask>:
// Initial IRQ mask has interrupt 2 enabled (for slave 8259A).
static uint16_t irq_mask = 0xFFFF & ~(1 << IRQ_SLAVE);
static bool did_init = 0;

static void
pic_setmask(uint16_t mask) {
c01020ec:	55                   	push   %ebp
c01020ed:	89 e5                	mov    %esp,%ebp
c01020ef:	83 ec 14             	sub    $0x14,%esp
c01020f2:	8b 45 08             	mov    0x8(%ebp),%eax
c01020f5:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    irq_mask = mask;
c01020f9:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c01020fd:	66 a3 50 e5 14 c0    	mov    %ax,0xc014e550
    if (did_init) {
c0102103:	a1 4c 17 15 c0       	mov    0xc015174c,%eax
c0102108:	85 c0                	test   %eax,%eax
c010210a:	74 36                	je     c0102142 <pic_setmask+0x56>
        outb(IO_PIC1 + 1, mask);
c010210c:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0102110:	0f b6 c0             	movzbl %al,%eax
c0102113:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
c0102119:	88 45 fa             	mov    %al,-0x6(%ebp)
c010211c:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
c0102120:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c0102124:	ee                   	out    %al,(%dx)
        outb(IO_PIC2 + 1, mask >> 8);
c0102125:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0102129:	66 c1 e8 08          	shr    $0x8,%ax
c010212d:	0f b6 c0             	movzbl %al,%eax
c0102130:	66 c7 45 fc a1 00    	movw   $0xa1,-0x4(%ebp)
c0102136:	88 45 fb             	mov    %al,-0x5(%ebp)
c0102139:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
c010213d:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c0102141:	ee                   	out    %al,(%dx)
    }
}
c0102142:	90                   	nop
c0102143:	c9                   	leave  
c0102144:	c3                   	ret    

c0102145 <pic_enable>:

void
pic_enable(unsigned int irq) {
c0102145:	55                   	push   %ebp
c0102146:	89 e5                	mov    %esp,%ebp
    pic_setmask(irq_mask & ~(1 << irq));
c0102148:	8b 45 08             	mov    0x8(%ebp),%eax
c010214b:	ba 01 00 00 00       	mov    $0x1,%edx
c0102150:	89 c1                	mov    %eax,%ecx
c0102152:	d3 e2                	shl    %cl,%edx
c0102154:	89 d0                	mov    %edx,%eax
c0102156:	f7 d0                	not    %eax
c0102158:	89 c2                	mov    %eax,%edx
c010215a:	0f b7 05 50 e5 14 c0 	movzwl 0xc014e550,%eax
c0102161:	21 d0                	and    %edx,%eax
c0102163:	0f b7 c0             	movzwl %ax,%eax
c0102166:	50                   	push   %eax
c0102167:	e8 80 ff ff ff       	call   c01020ec <pic_setmask>
c010216c:	83 c4 04             	add    $0x4,%esp
}
c010216f:	90                   	nop
c0102170:	c9                   	leave  
c0102171:	c3                   	ret    

c0102172 <pic_init>:

/* pic_init - initialize the 8259A interrupt controllers */
void
pic_init(void) {
c0102172:	55                   	push   %ebp
c0102173:	89 e5                	mov    %esp,%ebp
c0102175:	83 ec 30             	sub    $0x30,%esp
    did_init = 1;
c0102178:	c7 05 4c 17 15 c0 01 	movl   $0x1,0xc015174c
c010217f:	00 00 00 
c0102182:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
c0102188:	c6 45 d6 ff          	movb   $0xff,-0x2a(%ebp)
c010218c:	0f b6 45 d6          	movzbl -0x2a(%ebp),%eax
c0102190:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c0102194:	ee                   	out    %al,(%dx)
c0102195:	66 c7 45 fc a1 00    	movw   $0xa1,-0x4(%ebp)
c010219b:	c6 45 d7 ff          	movb   $0xff,-0x29(%ebp)
c010219f:	0f b6 45 d7          	movzbl -0x29(%ebp),%eax
c01021a3:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c01021a7:	ee                   	out    %al,(%dx)
c01021a8:	66 c7 45 fa 20 00    	movw   $0x20,-0x6(%ebp)
c01021ae:	c6 45 d8 11          	movb   $0x11,-0x28(%ebp)
c01021b2:	0f b6 45 d8          	movzbl -0x28(%ebp),%eax
c01021b6:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c01021ba:	ee                   	out    %al,(%dx)
c01021bb:	66 c7 45 f8 21 00    	movw   $0x21,-0x8(%ebp)
c01021c1:	c6 45 d9 20          	movb   $0x20,-0x27(%ebp)
c01021c5:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c01021c9:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
c01021cd:	ee                   	out    %al,(%dx)
c01021ce:	66 c7 45 f6 21 00    	movw   $0x21,-0xa(%ebp)
c01021d4:	c6 45 da 04          	movb   $0x4,-0x26(%ebp)
c01021d8:	0f b6 45 da          	movzbl -0x26(%ebp),%eax
c01021dc:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c01021e0:	ee                   	out    %al,(%dx)
c01021e1:	66 c7 45 f4 21 00    	movw   $0x21,-0xc(%ebp)
c01021e7:	c6 45 db 03          	movb   $0x3,-0x25(%ebp)
c01021eb:	0f b6 45 db          	movzbl -0x25(%ebp),%eax
c01021ef:	0f b7 55 f4          	movzwl -0xc(%ebp),%edx
c01021f3:	ee                   	out    %al,(%dx)
c01021f4:	66 c7 45 f2 a0 00    	movw   $0xa0,-0xe(%ebp)
c01021fa:	c6 45 dc 11          	movb   $0x11,-0x24(%ebp)
c01021fe:	0f b6 45 dc          	movzbl -0x24(%ebp),%eax
c0102202:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0102206:	ee                   	out    %al,(%dx)
c0102207:	66 c7 45 f0 a1 00    	movw   $0xa1,-0x10(%ebp)
c010220d:	c6 45 dd 28          	movb   $0x28,-0x23(%ebp)
c0102211:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0102215:	0f b7 55 f0          	movzwl -0x10(%ebp),%edx
c0102219:	ee                   	out    %al,(%dx)
c010221a:	66 c7 45 ee a1 00    	movw   $0xa1,-0x12(%ebp)
c0102220:	c6 45 de 02          	movb   $0x2,-0x22(%ebp)
c0102224:	0f b6 45 de          	movzbl -0x22(%ebp),%eax
c0102228:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c010222c:	ee                   	out    %al,(%dx)
c010222d:	66 c7 45 ec a1 00    	movw   $0xa1,-0x14(%ebp)
c0102233:	c6 45 df 03          	movb   $0x3,-0x21(%ebp)
c0102237:	0f b6 45 df          	movzbl -0x21(%ebp),%eax
c010223b:	0f b7 55 ec          	movzwl -0x14(%ebp),%edx
c010223f:	ee                   	out    %al,(%dx)
c0102240:	66 c7 45 ea 20 00    	movw   $0x20,-0x16(%ebp)
c0102246:	c6 45 e0 68          	movb   $0x68,-0x20(%ebp)
c010224a:	0f b6 45 e0          	movzbl -0x20(%ebp),%eax
c010224e:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0102252:	ee                   	out    %al,(%dx)
c0102253:	66 c7 45 e8 20 00    	movw   $0x20,-0x18(%ebp)
c0102259:	c6 45 e1 0a          	movb   $0xa,-0x1f(%ebp)
c010225d:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0102261:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c0102265:	ee                   	out    %al,(%dx)
c0102266:	66 c7 45 e6 a0 00    	movw   $0xa0,-0x1a(%ebp)
c010226c:	c6 45 e2 68          	movb   $0x68,-0x1e(%ebp)
c0102270:	0f b6 45 e2          	movzbl -0x1e(%ebp),%eax
c0102274:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0102278:	ee                   	out    %al,(%dx)
c0102279:	66 c7 45 e4 a0 00    	movw   $0xa0,-0x1c(%ebp)
c010227f:	c6 45 e3 0a          	movb   $0xa,-0x1d(%ebp)
c0102283:	0f b6 45 e3          	movzbl -0x1d(%ebp),%eax
c0102287:	0f b7 55 e4          	movzwl -0x1c(%ebp),%edx
c010228b:	ee                   	out    %al,(%dx)
    outb(IO_PIC1, 0x0a);    // read IRR by default

    outb(IO_PIC2, 0x68);    // OCW3
    outb(IO_PIC2, 0x0a);    // OCW3

    if (irq_mask != 0xFFFF) {
c010228c:	0f b7 05 50 e5 14 c0 	movzwl 0xc014e550,%eax
c0102293:	66 83 f8 ff          	cmp    $0xffff,%ax
c0102297:	74 13                	je     c01022ac <pic_init+0x13a>
        pic_setmask(irq_mask);
c0102299:	0f b7 05 50 e5 14 c0 	movzwl 0xc014e550,%eax
c01022a0:	0f b7 c0             	movzwl %ax,%eax
c01022a3:	50                   	push   %eax
c01022a4:	e8 43 fe ff ff       	call   c01020ec <pic_setmask>
c01022a9:	83 c4 04             	add    $0x4,%esp
    }
}
c01022ac:	90                   	nop
c01022ad:	c9                   	leave  
c01022ae:	c3                   	ret    

c01022af <intr_enable>:
#include <x86.h>
#include <intr.h>

/* intr_enable - enable irq interrupt */
void
intr_enable(void) {
c01022af:	55                   	push   %ebp
c01022b0:	89 e5                	mov    %esp,%ebp
    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
}

static inline void
sti(void) {
    asm volatile ("sti");
c01022b2:	fb                   	sti    
    sti();
}
c01022b3:	90                   	nop
c01022b4:	5d                   	pop    %ebp
c01022b5:	c3                   	ret    

c01022b6 <intr_disable>:

/* intr_disable - disable irq interrupt */
void
intr_disable(void) {
c01022b6:	55                   	push   %ebp
c01022b7:	89 e5                	mov    %esp,%ebp
}

static inline void
cli(void) {
    asm volatile ("cli" ::: "memory");
c01022b9:	fa                   	cli    
    cli();
}
c01022ba:	90                   	nop
c01022bb:	5d                   	pop    %ebp
c01022bc:	c3                   	ret    

c01022bd <print_ticks>:
#include <sync.h>
#include <proc.h>

#define TICK_NUM 100

static void print_ticks() {
c01022bd:	55                   	push   %ebp
c01022be:	89 e5                	mov    %esp,%ebp
c01022c0:	83 ec 08             	sub    $0x8,%esp
    cprintf("%d ticks\n",TICK_NUM);
c01022c3:	83 ec 08             	sub    $0x8,%esp
c01022c6:	6a 64                	push   $0x64
c01022c8:	68 a0 47 11 c0       	push   $0xc01147a0
c01022cd:	e8 b5 e0 ff ff       	call   c0100387 <cprintf>
c01022d2:	83 c4 10             	add    $0x10,%esp
#ifdef DEBUG_GRADE
    cprintf("End of Test.\n");
c01022d5:	83 ec 0c             	sub    $0xc,%esp
c01022d8:	68 aa 47 11 c0       	push   $0xc01147aa
c01022dd:	e8 a5 e0 ff ff       	call   c0100387 <cprintf>
c01022e2:	83 c4 10             	add    $0x10,%esp
    panic("EOT: kernel seems ok.");
c01022e5:	83 ec 04             	sub    $0x4,%esp
c01022e8:	68 b8 47 11 c0       	push   $0xc01147b8
c01022ed:	6a 1a                	push   $0x1a
c01022ef:	68 ce 47 11 c0       	push   $0xc01147ce
c01022f4:	e8 f4 e1 ff ff       	call   c01004ed <__panic>

c01022f9 <idt_init>:
/* temporary trapframe or pointer to trapframe */
struct trapframe switchk2u, *switchu2k;

/* idt_init - initialize IDT to each of the entry points in kern/trap/vectors.S */
void
idt_init(void) {
c01022f9:	55                   	push   %ebp
c01022fa:	89 e5                	mov    %esp,%ebp
c01022fc:	83 ec 10             	sub    $0x10,%esp
     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
     //so you should setup the syscall interrupt gate in here
    // 1. get vectors
    extern uintptr_t __vectors[];
    // 2. setup entries
    for (int i = 0; i < 256; i++) {
c01022ff:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0102306:	e9 c3 00 00 00       	jmp    c01023ce <idt_init+0xd5>
        SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);
c010230b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010230e:	8b 04 85 e0 e5 14 c0 	mov    -0x3feb1a20(,%eax,4),%eax
c0102315:	89 c2                	mov    %eax,%edx
c0102317:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010231a:	66 89 14 c5 60 17 15 	mov    %dx,-0x3feae8a0(,%eax,8)
c0102321:	c0 
c0102322:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102325:	66 c7 04 c5 62 17 15 	movw   $0x8,-0x3feae89e(,%eax,8)
c010232c:	c0 08 00 
c010232f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102332:	0f b6 14 c5 64 17 15 	movzbl -0x3feae89c(,%eax,8),%edx
c0102339:	c0 
c010233a:	83 e2 e0             	and    $0xffffffe0,%edx
c010233d:	88 14 c5 64 17 15 c0 	mov    %dl,-0x3feae89c(,%eax,8)
c0102344:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102347:	0f b6 14 c5 64 17 15 	movzbl -0x3feae89c(,%eax,8),%edx
c010234e:	c0 
c010234f:	83 e2 1f             	and    $0x1f,%edx
c0102352:	88 14 c5 64 17 15 c0 	mov    %dl,-0x3feae89c(,%eax,8)
c0102359:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010235c:	0f b6 14 c5 65 17 15 	movzbl -0x3feae89b(,%eax,8),%edx
c0102363:	c0 
c0102364:	83 e2 f0             	and    $0xfffffff0,%edx
c0102367:	83 ca 0e             	or     $0xe,%edx
c010236a:	88 14 c5 65 17 15 c0 	mov    %dl,-0x3feae89b(,%eax,8)
c0102371:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102374:	0f b6 14 c5 65 17 15 	movzbl -0x3feae89b(,%eax,8),%edx
c010237b:	c0 
c010237c:	83 e2 ef             	and    $0xffffffef,%edx
c010237f:	88 14 c5 65 17 15 c0 	mov    %dl,-0x3feae89b(,%eax,8)
c0102386:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102389:	0f b6 14 c5 65 17 15 	movzbl -0x3feae89b(,%eax,8),%edx
c0102390:	c0 
c0102391:	83 e2 9f             	and    $0xffffff9f,%edx
c0102394:	88 14 c5 65 17 15 c0 	mov    %dl,-0x3feae89b(,%eax,8)
c010239b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010239e:	0f b6 14 c5 65 17 15 	movzbl -0x3feae89b(,%eax,8),%edx
c01023a5:	c0 
c01023a6:	83 ca 80             	or     $0xffffff80,%edx
c01023a9:	88 14 c5 65 17 15 c0 	mov    %dl,-0x3feae89b(,%eax,8)
c01023b0:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01023b3:	8b 04 85 e0 e5 14 c0 	mov    -0x3feb1a20(,%eax,4),%eax
c01023ba:	c1 e8 10             	shr    $0x10,%eax
c01023bd:	89 c2                	mov    %eax,%edx
c01023bf:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01023c2:	66 89 14 c5 66 17 15 	mov    %dx,-0x3feae89a(,%eax,8)
c01023c9:	c0 
     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
     //so you should setup the syscall interrupt gate in here
    // 1. get vectors
    extern uintptr_t __vectors[];
    // 2. setup entries
    for (int i = 0; i < 256; i++) {
c01023ca:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c01023ce:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
c01023d5:	0f 8e 30 ff ff ff    	jle    c010230b <idt_init+0x12>
        SETGATE(idt[i], 0, GD_KTEXT, __vectors[i], DPL_KERNEL);
    }
	// set RPL of switch_to_kernel as user 
    SETGATE(idt[T_SWITCH_TOK], 0, GD_KTEXT, __vectors[T_SWITCH_TOK], DPL_USER);
c01023db:	a1 c4 e7 14 c0       	mov    0xc014e7c4,%eax
c01023e0:	66 a3 28 1b 15 c0    	mov    %ax,0xc0151b28
c01023e6:	66 c7 05 2a 1b 15 c0 	movw   $0x8,0xc0151b2a
c01023ed:	08 00 
c01023ef:	0f b6 05 2c 1b 15 c0 	movzbl 0xc0151b2c,%eax
c01023f6:	83 e0 e0             	and    $0xffffffe0,%eax
c01023f9:	a2 2c 1b 15 c0       	mov    %al,0xc0151b2c
c01023fe:	0f b6 05 2c 1b 15 c0 	movzbl 0xc0151b2c,%eax
c0102405:	83 e0 1f             	and    $0x1f,%eax
c0102408:	a2 2c 1b 15 c0       	mov    %al,0xc0151b2c
c010240d:	0f b6 05 2d 1b 15 c0 	movzbl 0xc0151b2d,%eax
c0102414:	83 e0 f0             	and    $0xfffffff0,%eax
c0102417:	83 c8 0e             	or     $0xe,%eax
c010241a:	a2 2d 1b 15 c0       	mov    %al,0xc0151b2d
c010241f:	0f b6 05 2d 1b 15 c0 	movzbl 0xc0151b2d,%eax
c0102426:	83 e0 ef             	and    $0xffffffef,%eax
c0102429:	a2 2d 1b 15 c0       	mov    %al,0xc0151b2d
c010242e:	0f b6 05 2d 1b 15 c0 	movzbl 0xc0151b2d,%eax
c0102435:	83 c8 60             	or     $0x60,%eax
c0102438:	a2 2d 1b 15 c0       	mov    %al,0xc0151b2d
c010243d:	0f b6 05 2d 1b 15 c0 	movzbl 0xc0151b2d,%eax
c0102444:	83 c8 80             	or     $0xffffff80,%eax
c0102447:	a2 2d 1b 15 c0       	mov    %al,0xc0151b2d
c010244c:	a1 c4 e7 14 c0       	mov    0xc014e7c4,%eax
c0102451:	c1 e8 10             	shr    $0x10,%eax
c0102454:	66 a3 2e 1b 15 c0    	mov    %ax,0xc0151b2e
    // set trap gate
    SETGATE(idt[T_SYSCALL], 1, GD_KTEXT, __vectors[T_SYSCALL], DPL_USER);
c010245a:	a1 e0 e7 14 c0       	mov    0xc014e7e0,%eax
c010245f:	66 a3 60 1b 15 c0    	mov    %ax,0xc0151b60
c0102465:	66 c7 05 62 1b 15 c0 	movw   $0x8,0xc0151b62
c010246c:	08 00 
c010246e:	0f b6 05 64 1b 15 c0 	movzbl 0xc0151b64,%eax
c0102475:	83 e0 e0             	and    $0xffffffe0,%eax
c0102478:	a2 64 1b 15 c0       	mov    %al,0xc0151b64
c010247d:	0f b6 05 64 1b 15 c0 	movzbl 0xc0151b64,%eax
c0102484:	83 e0 1f             	and    $0x1f,%eax
c0102487:	a2 64 1b 15 c0       	mov    %al,0xc0151b64
c010248c:	0f b6 05 65 1b 15 c0 	movzbl 0xc0151b65,%eax
c0102493:	83 c8 0f             	or     $0xf,%eax
c0102496:	a2 65 1b 15 c0       	mov    %al,0xc0151b65
c010249b:	0f b6 05 65 1b 15 c0 	movzbl 0xc0151b65,%eax
c01024a2:	83 e0 ef             	and    $0xffffffef,%eax
c01024a5:	a2 65 1b 15 c0       	mov    %al,0xc0151b65
c01024aa:	0f b6 05 65 1b 15 c0 	movzbl 0xc0151b65,%eax
c01024b1:	83 c8 60             	or     $0x60,%eax
c01024b4:	a2 65 1b 15 c0       	mov    %al,0xc0151b65
c01024b9:	0f b6 05 65 1b 15 c0 	movzbl 0xc0151b65,%eax
c01024c0:	83 c8 80             	or     $0xffffff80,%eax
c01024c3:	a2 65 1b 15 c0       	mov    %al,0xc0151b65
c01024c8:	a1 e0 e7 14 c0       	mov    0xc014e7e0,%eax
c01024cd:	c1 e8 10             	shr    $0x10,%eax
c01024d0:	66 a3 66 1b 15 c0    	mov    %ax,0xc0151b66
c01024d6:	c7 45 f8 60 e5 14 c0 	movl   $0xc014e560,-0x8(%ebp)
    }
}

static inline void
lidt(struct pseudodesc *pd) {
    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
c01024dd:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01024e0:	0f 01 18             	lidtl  (%eax)
    // 3. LIDT
    lidt(&idt_pd);
}
c01024e3:	90                   	nop
c01024e4:	c9                   	leave  
c01024e5:	c3                   	ret    

c01024e6 <trapname>:

static const char *
trapname(int trapno) {
c01024e6:	55                   	push   %ebp
c01024e7:	89 e5                	mov    %esp,%ebp
        "Alignment Check",
        "Machine-Check",
        "SIMD Floating-Point Exception"
    };

    if (trapno < sizeof(excnames)/sizeof(const char * const)) {
c01024e9:	8b 45 08             	mov    0x8(%ebp),%eax
c01024ec:	83 f8 13             	cmp    $0x13,%eax
c01024ef:	77 0c                	ja     c01024fd <trapname+0x17>
        return excnames[trapno];
c01024f1:	8b 45 08             	mov    0x8(%ebp),%eax
c01024f4:	8b 04 85 20 4c 11 c0 	mov    -0x3feeb3e0(,%eax,4),%eax
c01024fb:	eb 18                	jmp    c0102515 <trapname+0x2f>
    }
    if (trapno >= IRQ_OFFSET && trapno < IRQ_OFFSET + 16) {
c01024fd:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
c0102501:	7e 0d                	jle    c0102510 <trapname+0x2a>
c0102503:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
c0102507:	7f 07                	jg     c0102510 <trapname+0x2a>
        return "Hardware Interrupt";
c0102509:	b8 df 47 11 c0       	mov    $0xc01147df,%eax
c010250e:	eb 05                	jmp    c0102515 <trapname+0x2f>
    }
    return "(unknown trap)";
c0102510:	b8 f2 47 11 c0       	mov    $0xc01147f2,%eax
}
c0102515:	5d                   	pop    %ebp
c0102516:	c3                   	ret    

c0102517 <trap_in_kernel>:

/* trap_in_kernel - test if trap happened in kernel */
bool
trap_in_kernel(struct trapframe *tf) {
c0102517:	55                   	push   %ebp
c0102518:	89 e5                	mov    %esp,%ebp
    return (tf->tf_cs == (uint16_t)KERNEL_CS);
c010251a:	8b 45 08             	mov    0x8(%ebp),%eax
c010251d:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c0102521:	66 83 f8 08          	cmp    $0x8,%ax
c0102525:	0f 94 c0             	sete   %al
c0102528:	0f b6 c0             	movzbl %al,%eax
}
c010252b:	5d                   	pop    %ebp
c010252c:	c3                   	ret    

c010252d <print_trapframe>:
    "TF", "IF", "DF", "OF", NULL, NULL, "NT", NULL,
    "RF", "VM", "AC", "VIF", "VIP", "ID", NULL, NULL,
};

void
print_trapframe(struct trapframe *tf) {
c010252d:	55                   	push   %ebp
c010252e:	89 e5                	mov    %esp,%ebp
c0102530:	83 ec 18             	sub    $0x18,%esp
    cprintf("trapframe at %p\n", tf);
c0102533:	83 ec 08             	sub    $0x8,%esp
c0102536:	ff 75 08             	pushl  0x8(%ebp)
c0102539:	68 33 48 11 c0       	push   $0xc0114833
c010253e:	e8 44 de ff ff       	call   c0100387 <cprintf>
c0102543:	83 c4 10             	add    $0x10,%esp
    print_regs(&tf->tf_regs);
c0102546:	8b 45 08             	mov    0x8(%ebp),%eax
c0102549:	83 ec 0c             	sub    $0xc,%esp
c010254c:	50                   	push   %eax
c010254d:	e8 b8 01 00 00       	call   c010270a <print_regs>
c0102552:	83 c4 10             	add    $0x10,%esp
    cprintf("  ds   0x----%04x\n", tf->tf_ds);
c0102555:	8b 45 08             	mov    0x8(%ebp),%eax
c0102558:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c010255c:	0f b7 c0             	movzwl %ax,%eax
c010255f:	83 ec 08             	sub    $0x8,%esp
c0102562:	50                   	push   %eax
c0102563:	68 44 48 11 c0       	push   $0xc0114844
c0102568:	e8 1a de ff ff       	call   c0100387 <cprintf>
c010256d:	83 c4 10             	add    $0x10,%esp
    cprintf("  es   0x----%04x\n", tf->tf_es);
c0102570:	8b 45 08             	mov    0x8(%ebp),%eax
c0102573:	0f b7 40 28          	movzwl 0x28(%eax),%eax
c0102577:	0f b7 c0             	movzwl %ax,%eax
c010257a:	83 ec 08             	sub    $0x8,%esp
c010257d:	50                   	push   %eax
c010257e:	68 57 48 11 c0       	push   $0xc0114857
c0102583:	e8 ff dd ff ff       	call   c0100387 <cprintf>
c0102588:	83 c4 10             	add    $0x10,%esp
    cprintf("  fs   0x----%04x\n", tf->tf_fs);
c010258b:	8b 45 08             	mov    0x8(%ebp),%eax
c010258e:	0f b7 40 24          	movzwl 0x24(%eax),%eax
c0102592:	0f b7 c0             	movzwl %ax,%eax
c0102595:	83 ec 08             	sub    $0x8,%esp
c0102598:	50                   	push   %eax
c0102599:	68 6a 48 11 c0       	push   $0xc011486a
c010259e:	e8 e4 dd ff ff       	call   c0100387 <cprintf>
c01025a3:	83 c4 10             	add    $0x10,%esp
    cprintf("  gs   0x----%04x\n", tf->tf_gs);
c01025a6:	8b 45 08             	mov    0x8(%ebp),%eax
c01025a9:	0f b7 40 20          	movzwl 0x20(%eax),%eax
c01025ad:	0f b7 c0             	movzwl %ax,%eax
c01025b0:	83 ec 08             	sub    $0x8,%esp
c01025b3:	50                   	push   %eax
c01025b4:	68 7d 48 11 c0       	push   $0xc011487d
c01025b9:	e8 c9 dd ff ff       	call   c0100387 <cprintf>
c01025be:	83 c4 10             	add    $0x10,%esp
    cprintf("  trap 0x%08x %s\n", tf->tf_trapno, trapname(tf->tf_trapno));
c01025c1:	8b 45 08             	mov    0x8(%ebp),%eax
c01025c4:	8b 40 30             	mov    0x30(%eax),%eax
c01025c7:	83 ec 0c             	sub    $0xc,%esp
c01025ca:	50                   	push   %eax
c01025cb:	e8 16 ff ff ff       	call   c01024e6 <trapname>
c01025d0:	83 c4 10             	add    $0x10,%esp
c01025d3:	89 c2                	mov    %eax,%edx
c01025d5:	8b 45 08             	mov    0x8(%ebp),%eax
c01025d8:	8b 40 30             	mov    0x30(%eax),%eax
c01025db:	83 ec 04             	sub    $0x4,%esp
c01025de:	52                   	push   %edx
c01025df:	50                   	push   %eax
c01025e0:	68 90 48 11 c0       	push   $0xc0114890
c01025e5:	e8 9d dd ff ff       	call   c0100387 <cprintf>
c01025ea:	83 c4 10             	add    $0x10,%esp
    cprintf("  err  0x%08x\n", tf->tf_err);
c01025ed:	8b 45 08             	mov    0x8(%ebp),%eax
c01025f0:	8b 40 34             	mov    0x34(%eax),%eax
c01025f3:	83 ec 08             	sub    $0x8,%esp
c01025f6:	50                   	push   %eax
c01025f7:	68 a2 48 11 c0       	push   $0xc01148a2
c01025fc:	e8 86 dd ff ff       	call   c0100387 <cprintf>
c0102601:	83 c4 10             	add    $0x10,%esp
    cprintf("  eip  0x%08x\n", tf->tf_eip);
c0102604:	8b 45 08             	mov    0x8(%ebp),%eax
c0102607:	8b 40 38             	mov    0x38(%eax),%eax
c010260a:	83 ec 08             	sub    $0x8,%esp
c010260d:	50                   	push   %eax
c010260e:	68 b1 48 11 c0       	push   $0xc01148b1
c0102613:	e8 6f dd ff ff       	call   c0100387 <cprintf>
c0102618:	83 c4 10             	add    $0x10,%esp
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
c010261b:	8b 45 08             	mov    0x8(%ebp),%eax
c010261e:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c0102622:	0f b7 c0             	movzwl %ax,%eax
c0102625:	83 ec 08             	sub    $0x8,%esp
c0102628:	50                   	push   %eax
c0102629:	68 c0 48 11 c0       	push   $0xc01148c0
c010262e:	e8 54 dd ff ff       	call   c0100387 <cprintf>
c0102633:	83 c4 10             	add    $0x10,%esp
    cprintf("  flag 0x%08x ", tf->tf_eflags);
c0102636:	8b 45 08             	mov    0x8(%ebp),%eax
c0102639:	8b 40 40             	mov    0x40(%eax),%eax
c010263c:	83 ec 08             	sub    $0x8,%esp
c010263f:	50                   	push   %eax
c0102640:	68 d3 48 11 c0       	push   $0xc01148d3
c0102645:	e8 3d dd ff ff       	call   c0100387 <cprintf>
c010264a:	83 c4 10             	add    $0x10,%esp

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c010264d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0102654:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c010265b:	eb 3f                	jmp    c010269c <print_trapframe+0x16f>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
c010265d:	8b 45 08             	mov    0x8(%ebp),%eax
c0102660:	8b 50 40             	mov    0x40(%eax),%edx
c0102663:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0102666:	21 d0                	and    %edx,%eax
c0102668:	85 c0                	test   %eax,%eax
c010266a:	74 29                	je     c0102695 <print_trapframe+0x168>
c010266c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010266f:	8b 04 85 80 e5 14 c0 	mov    -0x3feb1a80(,%eax,4),%eax
c0102676:	85 c0                	test   %eax,%eax
c0102678:	74 1b                	je     c0102695 <print_trapframe+0x168>
            cprintf("%s,", IA32flags[i]);
c010267a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010267d:	8b 04 85 80 e5 14 c0 	mov    -0x3feb1a80(,%eax,4),%eax
c0102684:	83 ec 08             	sub    $0x8,%esp
c0102687:	50                   	push   %eax
c0102688:	68 e2 48 11 c0       	push   $0xc01148e2
c010268d:	e8 f5 dc ff ff       	call   c0100387 <cprintf>
c0102692:	83 c4 10             	add    $0x10,%esp
    cprintf("  eip  0x%08x\n", tf->tf_eip);
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
    cprintf("  flag 0x%08x ", tf->tf_eflags);

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c0102695:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0102699:	d1 65 f0             	shll   -0x10(%ebp)
c010269c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010269f:	83 f8 17             	cmp    $0x17,%eax
c01026a2:	76 b9                	jbe    c010265d <print_trapframe+0x130>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
            cprintf("%s,", IA32flags[i]);
        }
    }
    cprintf("IOPL=%d\n", (tf->tf_eflags & FL_IOPL_MASK) >> 12);
c01026a4:	8b 45 08             	mov    0x8(%ebp),%eax
c01026a7:	8b 40 40             	mov    0x40(%eax),%eax
c01026aa:	25 00 30 00 00       	and    $0x3000,%eax
c01026af:	c1 e8 0c             	shr    $0xc,%eax
c01026b2:	83 ec 08             	sub    $0x8,%esp
c01026b5:	50                   	push   %eax
c01026b6:	68 e6 48 11 c0       	push   $0xc01148e6
c01026bb:	e8 c7 dc ff ff       	call   c0100387 <cprintf>
c01026c0:	83 c4 10             	add    $0x10,%esp

    if (!trap_in_kernel(tf)) {
c01026c3:	83 ec 0c             	sub    $0xc,%esp
c01026c6:	ff 75 08             	pushl  0x8(%ebp)
c01026c9:	e8 49 fe ff ff       	call   c0102517 <trap_in_kernel>
c01026ce:	83 c4 10             	add    $0x10,%esp
c01026d1:	85 c0                	test   %eax,%eax
c01026d3:	75 32                	jne    c0102707 <print_trapframe+0x1da>
        cprintf("  esp  0x%08x\n", tf->tf_esp);
c01026d5:	8b 45 08             	mov    0x8(%ebp),%eax
c01026d8:	8b 40 44             	mov    0x44(%eax),%eax
c01026db:	83 ec 08             	sub    $0x8,%esp
c01026de:	50                   	push   %eax
c01026df:	68 ef 48 11 c0       	push   $0xc01148ef
c01026e4:	e8 9e dc ff ff       	call   c0100387 <cprintf>
c01026e9:	83 c4 10             	add    $0x10,%esp
        cprintf("  ss   0x----%04x\n", tf->tf_ss);
c01026ec:	8b 45 08             	mov    0x8(%ebp),%eax
c01026ef:	0f b7 40 48          	movzwl 0x48(%eax),%eax
c01026f3:	0f b7 c0             	movzwl %ax,%eax
c01026f6:	83 ec 08             	sub    $0x8,%esp
c01026f9:	50                   	push   %eax
c01026fa:	68 fe 48 11 c0       	push   $0xc01148fe
c01026ff:	e8 83 dc ff ff       	call   c0100387 <cprintf>
c0102704:	83 c4 10             	add    $0x10,%esp
    }
}
c0102707:	90                   	nop
c0102708:	c9                   	leave  
c0102709:	c3                   	ret    

c010270a <print_regs>:

void
print_regs(struct pushregs *regs) {
c010270a:	55                   	push   %ebp
c010270b:	89 e5                	mov    %esp,%ebp
c010270d:	83 ec 08             	sub    $0x8,%esp
    cprintf("  edi  0x%08x\n", regs->reg_edi);
c0102710:	8b 45 08             	mov    0x8(%ebp),%eax
c0102713:	8b 00                	mov    (%eax),%eax
c0102715:	83 ec 08             	sub    $0x8,%esp
c0102718:	50                   	push   %eax
c0102719:	68 11 49 11 c0       	push   $0xc0114911
c010271e:	e8 64 dc ff ff       	call   c0100387 <cprintf>
c0102723:	83 c4 10             	add    $0x10,%esp
    cprintf("  esi  0x%08x\n", regs->reg_esi);
c0102726:	8b 45 08             	mov    0x8(%ebp),%eax
c0102729:	8b 40 04             	mov    0x4(%eax),%eax
c010272c:	83 ec 08             	sub    $0x8,%esp
c010272f:	50                   	push   %eax
c0102730:	68 20 49 11 c0       	push   $0xc0114920
c0102735:	e8 4d dc ff ff       	call   c0100387 <cprintf>
c010273a:	83 c4 10             	add    $0x10,%esp
    cprintf("  ebp  0x%08x\n", regs->reg_ebp);
c010273d:	8b 45 08             	mov    0x8(%ebp),%eax
c0102740:	8b 40 08             	mov    0x8(%eax),%eax
c0102743:	83 ec 08             	sub    $0x8,%esp
c0102746:	50                   	push   %eax
c0102747:	68 2f 49 11 c0       	push   $0xc011492f
c010274c:	e8 36 dc ff ff       	call   c0100387 <cprintf>
c0102751:	83 c4 10             	add    $0x10,%esp
    cprintf("  oesp 0x%08x\n", regs->reg_oesp);
c0102754:	8b 45 08             	mov    0x8(%ebp),%eax
c0102757:	8b 40 0c             	mov    0xc(%eax),%eax
c010275a:	83 ec 08             	sub    $0x8,%esp
c010275d:	50                   	push   %eax
c010275e:	68 3e 49 11 c0       	push   $0xc011493e
c0102763:	e8 1f dc ff ff       	call   c0100387 <cprintf>
c0102768:	83 c4 10             	add    $0x10,%esp
    cprintf("  ebx  0x%08x\n", regs->reg_ebx);
c010276b:	8b 45 08             	mov    0x8(%ebp),%eax
c010276e:	8b 40 10             	mov    0x10(%eax),%eax
c0102771:	83 ec 08             	sub    $0x8,%esp
c0102774:	50                   	push   %eax
c0102775:	68 4d 49 11 c0       	push   $0xc011494d
c010277a:	e8 08 dc ff ff       	call   c0100387 <cprintf>
c010277f:	83 c4 10             	add    $0x10,%esp
    cprintf("  edx  0x%08x\n", regs->reg_edx);
c0102782:	8b 45 08             	mov    0x8(%ebp),%eax
c0102785:	8b 40 14             	mov    0x14(%eax),%eax
c0102788:	83 ec 08             	sub    $0x8,%esp
c010278b:	50                   	push   %eax
c010278c:	68 5c 49 11 c0       	push   $0xc011495c
c0102791:	e8 f1 db ff ff       	call   c0100387 <cprintf>
c0102796:	83 c4 10             	add    $0x10,%esp
    cprintf("  ecx  0x%08x\n", regs->reg_ecx);
c0102799:	8b 45 08             	mov    0x8(%ebp),%eax
c010279c:	8b 40 18             	mov    0x18(%eax),%eax
c010279f:	83 ec 08             	sub    $0x8,%esp
c01027a2:	50                   	push   %eax
c01027a3:	68 6b 49 11 c0       	push   $0xc011496b
c01027a8:	e8 da db ff ff       	call   c0100387 <cprintf>
c01027ad:	83 c4 10             	add    $0x10,%esp
    cprintf("  eax  0x%08x\n", regs->reg_eax);
c01027b0:	8b 45 08             	mov    0x8(%ebp),%eax
c01027b3:	8b 40 1c             	mov    0x1c(%eax),%eax
c01027b6:	83 ec 08             	sub    $0x8,%esp
c01027b9:	50                   	push   %eax
c01027ba:	68 7a 49 11 c0       	push   $0xc011497a
c01027bf:	e8 c3 db ff ff       	call   c0100387 <cprintf>
c01027c4:	83 c4 10             	add    $0x10,%esp
}
c01027c7:	90                   	nop
c01027c8:	c9                   	leave  
c01027c9:	c3                   	ret    

c01027ca <print_pgfault>:

static inline void
print_pgfault(struct trapframe *tf) {
c01027ca:	55                   	push   %ebp
c01027cb:	89 e5                	mov    %esp,%ebp
c01027cd:	53                   	push   %ebx
c01027ce:	83 ec 14             	sub    $0x14,%esp
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
            (tf->tf_err & 1) ? "protection fault" : "no page found");
c01027d1:	8b 45 08             	mov    0x8(%ebp),%eax
c01027d4:	8b 40 34             	mov    0x34(%eax),%eax
c01027d7:	83 e0 01             	and    $0x1,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c01027da:	85 c0                	test   %eax,%eax
c01027dc:	74 07                	je     c01027e5 <print_pgfault+0x1b>
c01027de:	bb 89 49 11 c0       	mov    $0xc0114989,%ebx
c01027e3:	eb 05                	jmp    c01027ea <print_pgfault+0x20>
c01027e5:	bb 9a 49 11 c0       	mov    $0xc011499a,%ebx
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
c01027ea:	8b 45 08             	mov    0x8(%ebp),%eax
c01027ed:	8b 40 34             	mov    0x34(%eax),%eax
c01027f0:	83 e0 02             	and    $0x2,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c01027f3:	85 c0                	test   %eax,%eax
c01027f5:	74 07                	je     c01027fe <print_pgfault+0x34>
c01027f7:	b9 57 00 00 00       	mov    $0x57,%ecx
c01027fc:	eb 05                	jmp    c0102803 <print_pgfault+0x39>
c01027fe:	b9 52 00 00 00       	mov    $0x52,%ecx
            (tf->tf_err & 4) ? 'U' : 'K',
c0102803:	8b 45 08             	mov    0x8(%ebp),%eax
c0102806:	8b 40 34             	mov    0x34(%eax),%eax
c0102809:	83 e0 04             	and    $0x4,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c010280c:	85 c0                	test   %eax,%eax
c010280e:	74 07                	je     c0102817 <print_pgfault+0x4d>
c0102810:	ba 55 00 00 00       	mov    $0x55,%edx
c0102815:	eb 05                	jmp    c010281c <print_pgfault+0x52>
c0102817:	ba 4b 00 00 00       	mov    $0x4b,%edx
}

static inline uintptr_t
rcr2(void) {
    uintptr_t cr2;
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c010281c:	0f 20 d0             	mov    %cr2,%eax
c010281f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return cr2;
c0102822:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102825:	83 ec 0c             	sub    $0xc,%esp
c0102828:	53                   	push   %ebx
c0102829:	51                   	push   %ecx
c010282a:	52                   	push   %edx
c010282b:	50                   	push   %eax
c010282c:	68 a8 49 11 c0       	push   $0xc01149a8
c0102831:	e8 51 db ff ff       	call   c0100387 <cprintf>
c0102836:	83 c4 20             	add    $0x20,%esp
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
            (tf->tf_err & 1) ? "protection fault" : "no page found");
}
c0102839:	90                   	nop
c010283a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c010283d:	c9                   	leave  
c010283e:	c3                   	ret    

c010283f <pgfault_handler>:

static int
pgfault_handler(struct trapframe *tf) {
c010283f:	55                   	push   %ebp
c0102840:	89 e5                	mov    %esp,%ebp
c0102842:	83 ec 18             	sub    $0x18,%esp
    extern struct mm_struct *check_mm_struct;
    if(check_mm_struct !=NULL) { //used for test check_swap
c0102845:	a1 70 51 15 c0       	mov    0xc0155170,%eax
c010284a:	85 c0                	test   %eax,%eax
c010284c:	74 0e                	je     c010285c <pgfault_handler+0x1d>
            print_pgfault(tf);
c010284e:	83 ec 0c             	sub    $0xc,%esp
c0102851:	ff 75 08             	pushl  0x8(%ebp)
c0102854:	e8 71 ff ff ff       	call   c01027ca <print_pgfault>
c0102859:	83 c4 10             	add    $0x10,%esp
        }
    struct mm_struct *mm;
    if (check_mm_struct != NULL) {
c010285c:	a1 70 51 15 c0       	mov    0xc0155170,%eax
c0102861:	85 c0                	test   %eax,%eax
c0102863:	74 32                	je     c0102897 <pgfault_handler+0x58>
        assert(current == idleproc);
c0102865:	8b 15 28 20 15 c0    	mov    0xc0152028,%edx
c010286b:	a1 20 20 15 c0       	mov    0xc0152020,%eax
c0102870:	39 c2                	cmp    %eax,%edx
c0102872:	74 19                	je     c010288d <pgfault_handler+0x4e>
c0102874:	68 cb 49 11 c0       	push   $0xc01149cb
c0102879:	68 df 49 11 c0       	push   $0xc01149df
c010287e:	68 b9 00 00 00       	push   $0xb9
c0102883:	68 ce 47 11 c0       	push   $0xc01147ce
c0102888:	e8 60 dc ff ff       	call   c01004ed <__panic>
        mm = check_mm_struct;
c010288d:	a1 70 51 15 c0       	mov    0xc0155170,%eax
c0102892:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0102895:	eb 47                	jmp    c01028de <pgfault_handler+0x9f>
    }
    else {
        if (current == NULL) {
c0102897:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010289c:	85 c0                	test   %eax,%eax
c010289e:	75 33                	jne    c01028d3 <pgfault_handler+0x94>
            print_trapframe(tf);
c01028a0:	83 ec 0c             	sub    $0xc,%esp
c01028a3:	ff 75 08             	pushl  0x8(%ebp)
c01028a6:	e8 82 fc ff ff       	call   c010252d <print_trapframe>
c01028ab:	83 c4 10             	add    $0x10,%esp
            print_pgfault(tf);
c01028ae:	83 ec 0c             	sub    $0xc,%esp
c01028b1:	ff 75 08             	pushl  0x8(%ebp)
c01028b4:	e8 11 ff ff ff       	call   c01027ca <print_pgfault>
c01028b9:	83 c4 10             	add    $0x10,%esp
            panic("unhandled page fault.\n");
c01028bc:	83 ec 04             	sub    $0x4,%esp
c01028bf:	68 f4 49 11 c0       	push   $0xc01149f4
c01028c4:	68 c0 00 00 00       	push   $0xc0
c01028c9:	68 ce 47 11 c0       	push   $0xc01147ce
c01028ce:	e8 1a dc ff ff       	call   c01004ed <__panic>
        }
        mm = current->mm;
c01028d3:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c01028d8:	8b 40 18             	mov    0x18(%eax),%eax
c01028db:	89 45 f4             	mov    %eax,-0xc(%ebp)
}

static inline uintptr_t
rcr2(void) {
    uintptr_t cr2;
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c01028de:	0f 20 d0             	mov    %cr2,%eax
c01028e1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return cr2;
c01028e4:	8b 55 f0             	mov    -0x10(%ebp),%edx
    }
    return do_pgfault(mm, tf->tf_err, rcr2());
c01028e7:	8b 45 08             	mov    0x8(%ebp),%eax
c01028ea:	8b 40 34             	mov    0x34(%eax),%eax
c01028ed:	83 ec 04             	sub    $0x4,%esp
c01028f0:	52                   	push   %edx
c01028f1:	50                   	push   %eax
c01028f2:	ff 75 f4             	pushl  -0xc(%ebp)
c01028f5:	e8 4e 1b 00 00       	call   c0104448 <do_pgfault>
c01028fa:	83 c4 10             	add    $0x10,%esp
}
c01028fd:	c9                   	leave  
c01028fe:	c3                   	ret    

c01028ff <trap_dispatch>:

static volatile int in_swap_tick_event = 0;
extern struct mm_struct *check_mm_struct;

static void
trap_dispatch(struct trapframe *tf) {
c01028ff:	55                   	push   %ebp
c0102900:	89 e5                	mov    %esp,%ebp
c0102902:	57                   	push   %edi
c0102903:	56                   	push   %esi
c0102904:	53                   	push   %ebx
c0102905:	83 ec 1c             	sub    $0x1c,%esp
    char c;

    int ret=0;
c0102908:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

    switch (tf->tf_trapno) {
c010290f:	8b 45 08             	mov    0x8(%ebp),%eax
c0102912:	8b 40 30             	mov    0x30(%eax),%eax
c0102915:	83 f8 2f             	cmp    $0x2f,%eax
c0102918:	77 38                	ja     c0102952 <trap_dispatch+0x53>
c010291a:	83 f8 2e             	cmp    $0x2e,%eax
c010291d:	0f 83 38 02 00 00    	jae    c0102b5b <trap_dispatch+0x25c>
c0102923:	83 f8 20             	cmp    $0x20,%eax
c0102926:	0f 84 eb 00 00 00    	je     c0102a17 <trap_dispatch+0x118>
c010292c:	83 f8 20             	cmp    $0x20,%eax
c010292f:	77 0a                	ja     c010293b <trap_dispatch+0x3c>
c0102931:	83 f8 0e             	cmp    $0xe,%eax
c0102934:	74 3e                	je     c0102974 <trap_dispatch+0x75>
c0102936:	e9 d5 01 00 00       	jmp    c0102b10 <trap_dispatch+0x211>
c010293b:	83 f8 21             	cmp    $0x21,%eax
c010293e:	0f 84 0c 01 00 00    	je     c0102a50 <trap_dispatch+0x151>
c0102944:	83 f8 24             	cmp    $0x24,%eax
c0102947:	0f 84 03 01 00 00    	je     c0102a50 <trap_dispatch+0x151>
c010294d:	e9 be 01 00 00       	jmp    c0102b10 <trap_dispatch+0x211>
c0102952:	83 f8 79             	cmp    $0x79,%eax
c0102955:	0f 84 87 01 00 00    	je     c0102ae2 <trap_dispatch+0x1e3>
c010295b:	3d 80 00 00 00       	cmp    $0x80,%eax
c0102960:	0f 84 a7 00 00 00    	je     c0102a0d <trap_dispatch+0x10e>
c0102966:	83 f8 78             	cmp    $0x78,%eax
c0102969:	0f 84 fe 00 00 00    	je     c0102a6d <trap_dispatch+0x16e>
c010296f:	e9 9c 01 00 00       	jmp    c0102b10 <trap_dispatch+0x211>
    case T_PGFLT:  //page fault
        if ((ret = pgfault_handler(tf)) != 0) {
c0102974:	83 ec 0c             	sub    $0xc,%esp
c0102977:	ff 75 08             	pushl  0x8(%ebp)
c010297a:	e8 c0 fe ff ff       	call   c010283f <pgfault_handler>
c010297f:	83 c4 10             	add    $0x10,%esp
c0102982:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0102985:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0102989:	0f 84 cf 01 00 00    	je     c0102b5e <trap_dispatch+0x25f>
            print_trapframe(tf);
c010298f:	83 ec 0c             	sub    $0xc,%esp
c0102992:	ff 75 08             	pushl  0x8(%ebp)
c0102995:	e8 93 fb ff ff       	call   c010252d <print_trapframe>
c010299a:	83 c4 10             	add    $0x10,%esp
            if (current == NULL) {
c010299d:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c01029a2:	85 c0                	test   %eax,%eax
c01029a4:	75 17                	jne    c01029bd <trap_dispatch+0xbe>
                panic("handle pgfault failed. ret=%d\n", ret);
c01029a6:	ff 75 e4             	pushl  -0x1c(%ebp)
c01029a9:	68 0c 4a 11 c0       	push   $0xc0114a0c
c01029ae:	68 d5 00 00 00       	push   $0xd5
c01029b3:	68 ce 47 11 c0       	push   $0xc01147ce
c01029b8:	e8 30 db ff ff       	call   c01004ed <__panic>
            }
            else {
                if (trap_in_kernel(tf)) {
c01029bd:	83 ec 0c             	sub    $0xc,%esp
c01029c0:	ff 75 08             	pushl  0x8(%ebp)
c01029c3:	e8 4f fb ff ff       	call   c0102517 <trap_in_kernel>
c01029c8:	83 c4 10             	add    $0x10,%esp
c01029cb:	85 c0                	test   %eax,%eax
c01029cd:	74 17                	je     c01029e6 <trap_dispatch+0xe7>
                    panic("handle pgfault failed in kernel mode. ret=%d\n", ret);
c01029cf:	ff 75 e4             	pushl  -0x1c(%ebp)
c01029d2:	68 2c 4a 11 c0       	push   $0xc0114a2c
c01029d7:	68 d9 00 00 00       	push   $0xd9
c01029dc:	68 ce 47 11 c0       	push   $0xc01147ce
c01029e1:	e8 07 db ff ff       	call   c01004ed <__panic>
                }
                cprintf("killed by kernel.\n");
c01029e6:	83 ec 0c             	sub    $0xc,%esp
c01029e9:	68 5a 4a 11 c0       	push   $0xc0114a5a
c01029ee:	e8 94 d9 ff ff       	call   c0100387 <cprintf>
c01029f3:	83 c4 10             	add    $0x10,%esp
                panic("handle user mode pgfault failed. ret=%d\n", ret); 
c01029f6:	ff 75 e4             	pushl  -0x1c(%ebp)
c01029f9:	68 70 4a 11 c0       	push   $0xc0114a70
c01029fe:	68 dc 00 00 00       	push   $0xdc
c0102a03:	68 ce 47 11 c0       	push   $0xc01147ce
c0102a08:	e8 e0 da ff ff       	call   c01004ed <__panic>
                do_exit(-E_KILLED);
            }
        }
        break;
    case T_SYSCALL:
        syscall();
c0102a0d:	e8 7f b8 00 00       	call   c010e291 <syscall>
        break;
c0102a12:	e9 48 01 00 00       	jmp    c0102b5f <trap_dispatch+0x260>
        /* LAB7 YOUR CODE */
        /* you should upate you lab6 code
         * IMPORTANT FUNCTIONS:
	     * run_timer_list
         */
        ticks++;
c0102a17:	a1 00 51 15 c0       	mov    0xc0155100,%eax
c0102a1c:	83 c0 01             	add    $0x1,%eax
c0102a1f:	a3 00 51 15 c0       	mov    %eax,0xc0155100
        assert(current != NULL);
c0102a24:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c0102a29:	85 c0                	test   %eax,%eax
c0102a2b:	75 19                	jne    c0102a46 <trap_dispatch+0x147>
c0102a2d:	68 99 4a 11 c0       	push   $0xc0114a99
c0102a32:	68 df 49 11 c0       	push   $0xc01149df
c0102a37:	68 fe 00 00 00       	push   $0xfe
c0102a3c:	68 ce 47 11 c0       	push   $0xc01147ce
c0102a41:	e8 a7 da ff ff       	call   c01004ed <__panic>
        run_timer_list();
c0102a46:	e8 a8 b0 00 00       	call   c010daf3 <run_timer_list>
        break;
c0102a4b:	e9 0f 01 00 00       	jmp    c0102b5f <trap_dispatch+0x260>
    case IRQ_OFFSET + IRQ_COM1:
    case IRQ_OFFSET + IRQ_KBD:
        // There are user level shell in LAB8, so we need change COM/KBD interrupt processing.
        c = cons_getc();
c0102a50:	e8 25 f6 ff ff       	call   c010207a <cons_getc>
c0102a55:	88 45 e3             	mov    %al,-0x1d(%ebp)
        {
          extern void dev_stdin_write(char c);
          dev_stdin_write(c);
c0102a58:	0f be 45 e3          	movsbl -0x1d(%ebp),%eax
c0102a5c:	83 ec 0c             	sub    $0xc,%esp
c0102a5f:	50                   	push   %eax
c0102a60:	e8 85 d0 00 00       	call   c010faea <dev_stdin_write>
c0102a65:	83 c4 10             	add    $0x10,%esp
        }
        break;
c0102a68:	e9 f2 00 00 00       	jmp    c0102b5f <trap_dispatch+0x260>
    //LAB1 CHALLENGE 1 : YOUR CODE you should modify below codes.
    case T_SWITCH_TOU:
        switchk2u = *tf;
c0102a6d:	8b 55 08             	mov    0x8(%ebp),%edx
c0102a70:	b8 20 51 15 c0       	mov    $0xc0155120,%eax
c0102a75:	89 d3                	mov    %edx,%ebx
c0102a77:	ba 4c 00 00 00       	mov    $0x4c,%edx
c0102a7c:	8b 0b                	mov    (%ebx),%ecx
c0102a7e:	89 08                	mov    %ecx,(%eax)
c0102a80:	8b 4c 13 fc          	mov    -0x4(%ebx,%edx,1),%ecx
c0102a84:	89 4c 10 fc          	mov    %ecx,-0x4(%eax,%edx,1)
c0102a88:	8d 78 04             	lea    0x4(%eax),%edi
c0102a8b:	83 e7 fc             	and    $0xfffffffc,%edi
c0102a8e:	29 f8                	sub    %edi,%eax
c0102a90:	29 c3                	sub    %eax,%ebx
c0102a92:	01 c2                	add    %eax,%edx
c0102a94:	83 e2 fc             	and    $0xfffffffc,%edx
c0102a97:	89 d0                	mov    %edx,%eax
c0102a99:	c1 e8 02             	shr    $0x2,%eax
c0102a9c:	89 de                	mov    %ebx,%esi
c0102a9e:	89 c1                	mov    %eax,%ecx
c0102aa0:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
        switchk2u.tf_cs = USER_CS;
c0102aa2:	66 c7 05 5c 51 15 c0 	movw   $0x1b,0xc015515c
c0102aa9:	1b 00 
        switchk2u.tf_ds = USER_DS;
c0102aab:	66 c7 05 4c 51 15 c0 	movw   $0x23,0xc015514c
c0102ab2:	23 00 
        switchk2u.tf_es = USER_DS;
c0102ab4:	66 c7 05 48 51 15 c0 	movw   $0x23,0xc0155148
c0102abb:	23 00 
        switchk2u.tf_ss = USER_DS;
c0102abd:	66 c7 05 68 51 15 c0 	movw   $0x23,0xc0155168
c0102ac4:	23 00 
        switchk2u.tf_eflags |= FL_IOPL_MASK;
c0102ac6:	a1 60 51 15 c0       	mov    0xc0155160,%eax
c0102acb:	80 cc 30             	or     $0x30,%ah
c0102ace:	a3 60 51 15 c0       	mov    %eax,0xc0155160
        *((uint32_t *)tf - 1) = (uint32_t)&switchk2u;
c0102ad3:	8b 45 08             	mov    0x8(%ebp),%eax
c0102ad6:	83 e8 04             	sub    $0x4,%eax
c0102ad9:	ba 20 51 15 c0       	mov    $0xc0155120,%edx
c0102ade:	89 10                	mov    %edx,(%eax)
        break;
c0102ae0:	eb 7d                	jmp    c0102b5f <trap_dispatch+0x260>
    case T_SWITCH_TOK:
        tf->tf_cs = KERNEL_CS;
c0102ae2:	8b 45 08             	mov    0x8(%ebp),%eax
c0102ae5:	66 c7 40 3c 08 00    	movw   $0x8,0x3c(%eax)
        tf->tf_ds = KERNEL_DS;
c0102aeb:	8b 45 08             	mov    0x8(%ebp),%eax
c0102aee:	66 c7 40 2c 10 00    	movw   $0x10,0x2c(%eax)
        tf->tf_es = KERNEL_DS;
c0102af4:	8b 45 08             	mov    0x8(%ebp),%eax
c0102af7:	66 c7 40 28 10 00    	movw   $0x10,0x28(%eax)
        tf->tf_eflags &= ~FL_IOPL_MASK;
c0102afd:	8b 45 08             	mov    0x8(%ebp),%eax
c0102b00:	8b 40 40             	mov    0x40(%eax),%eax
c0102b03:	80 e4 cf             	and    $0xcf,%ah
c0102b06:	89 c2                	mov    %eax,%edx
c0102b08:	8b 45 08             	mov    0x8(%ebp),%eax
c0102b0b:	89 50 40             	mov    %edx,0x40(%eax)
        break;
c0102b0e:	eb 4f                	jmp    c0102b5f <trap_dispatch+0x260>
    case IRQ_OFFSET + IRQ_IDE1:
    case IRQ_OFFSET + IRQ_IDE2:
        /* do nothing */
        break;
    default:
        print_trapframe(tf);
c0102b10:	83 ec 0c             	sub    $0xc,%esp
c0102b13:	ff 75 08             	pushl  0x8(%ebp)
c0102b16:	e8 12 fa ff ff       	call   c010252d <print_trapframe>
c0102b1b:	83 c4 10             	add    $0x10,%esp
        if (current != NULL) {
c0102b1e:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c0102b23:	85 c0                	test   %eax,%eax
c0102b25:	74 1d                	je     c0102b44 <trap_dispatch+0x245>
            cprintf("unhandled trap.\n");
c0102b27:	83 ec 0c             	sub    $0xc,%esp
c0102b2a:	68 a9 4a 11 c0       	push   $0xc0114aa9
c0102b2f:	e8 53 d8 ff ff       	call   c0100387 <cprintf>
c0102b34:	83 c4 10             	add    $0x10,%esp
            do_exit(-E_KILLED);
c0102b37:	83 ec 0c             	sub    $0xc,%esp
c0102b3a:	6a f7                	push   $0xfffffff7
c0102b3c:	e8 3d 97 00 00       	call   c010c27e <do_exit>
c0102b41:	83 c4 10             	add    $0x10,%esp
        }
        // in kernel, it must be a mistake
        panic("unexpected trap in kernel.\n");
c0102b44:	83 ec 04             	sub    $0x4,%esp
c0102b47:	68 ba 4a 11 c0       	push   $0xc0114aba
c0102b4c:	68 26 01 00 00       	push   $0x126
c0102b51:	68 ce 47 11 c0       	push   $0xc01147ce
c0102b56:	e8 92 d9 ff ff       	call   c01004ed <__panic>
        break;
    // end of copy
    case IRQ_OFFSET + IRQ_IDE1:
    case IRQ_OFFSET + IRQ_IDE2:
        /* do nothing */
        break;
c0102b5b:	90                   	nop
c0102b5c:	eb 01                	jmp    c0102b5f <trap_dispatch+0x260>
                cprintf("killed by kernel.\n");
                panic("handle user mode pgfault failed. ret=%d\n", ret); 
                do_exit(-E_KILLED);
            }
        }
        break;
c0102b5e:	90                   	nop
        }
        // in kernel, it must be a mistake
        panic("unexpected trap in kernel.\n");

    }
}
c0102b5f:	90                   	nop
c0102b60:	8d 65 f4             	lea    -0xc(%ebp),%esp
c0102b63:	5b                   	pop    %ebx
c0102b64:	5e                   	pop    %esi
c0102b65:	5f                   	pop    %edi
c0102b66:	5d                   	pop    %ebp
c0102b67:	c3                   	ret    

c0102b68 <trap>:
 * trap - handles or dispatches an exception/interrupt. if and when trap() returns,
 * the code in kern/trap/trapentry.S restores the old CPU state saved in the
 * trapframe and then uses the iret instruction to return from the exception.
 * */
void
trap(struct trapframe *tf) {
c0102b68:	55                   	push   %ebp
c0102b69:	89 e5                	mov    %esp,%ebp
c0102b6b:	83 ec 18             	sub    $0x18,%esp
    // dispatch based on what type of trap occurred
    // used for previous projects
    if (current == NULL) {
c0102b6e:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c0102b73:	85 c0                	test   %eax,%eax
c0102b75:	75 10                	jne    c0102b87 <trap+0x1f>
        trap_dispatch(tf);
c0102b77:	83 ec 0c             	sub    $0xc,%esp
c0102b7a:	ff 75 08             	pushl  0x8(%ebp)
c0102b7d:	e8 7d fd ff ff       	call   c01028ff <trap_dispatch>
c0102b82:	83 c4 10             	add    $0x10,%esp
            if (current->need_resched) {
                schedule();
            }
        }
    }
}
c0102b85:	eb 73                	jmp    c0102bfa <trap+0x92>
    if (current == NULL) {
        trap_dispatch(tf);
    }
    else {
        // keep a trapframe chain in stack
        struct trapframe *otf = current->tf;
c0102b87:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c0102b8c:	8b 40 3c             	mov    0x3c(%eax),%eax
c0102b8f:	89 45 f4             	mov    %eax,-0xc(%ebp)
        current->tf = tf;
c0102b92:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c0102b97:	8b 55 08             	mov    0x8(%ebp),%edx
c0102b9a:	89 50 3c             	mov    %edx,0x3c(%eax)
    
        bool in_kernel = trap_in_kernel(tf);
c0102b9d:	83 ec 0c             	sub    $0xc,%esp
c0102ba0:	ff 75 08             	pushl  0x8(%ebp)
c0102ba3:	e8 6f f9 ff ff       	call   c0102517 <trap_in_kernel>
c0102ba8:	83 c4 10             	add    $0x10,%esp
c0102bab:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
        trap_dispatch(tf);
c0102bae:	83 ec 0c             	sub    $0xc,%esp
c0102bb1:	ff 75 08             	pushl  0x8(%ebp)
c0102bb4:	e8 46 fd ff ff       	call   c01028ff <trap_dispatch>
c0102bb9:	83 c4 10             	add    $0x10,%esp
    
        current->tf = otf;
c0102bbc:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c0102bc1:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0102bc4:	89 50 3c             	mov    %edx,0x3c(%eax)
        if (!in_kernel) {
c0102bc7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0102bcb:	75 2d                	jne    c0102bfa <trap+0x92>
            if (current->flags & PF_EXITING) {
c0102bcd:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c0102bd2:	8b 40 44             	mov    0x44(%eax),%eax
c0102bd5:	83 e0 01             	and    $0x1,%eax
c0102bd8:	85 c0                	test   %eax,%eax
c0102bda:	74 0d                	je     c0102be9 <trap+0x81>
                do_exit(-E_KILLED);
c0102bdc:	83 ec 0c             	sub    $0xc,%esp
c0102bdf:	6a f7                	push   $0xfffffff7
c0102be1:	e8 98 96 00 00       	call   c010c27e <do_exit>
c0102be6:	83 c4 10             	add    $0x10,%esp
            }
            if (current->need_resched) {
c0102be9:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c0102bee:	8b 40 10             	mov    0x10(%eax),%eax
c0102bf1:	85 c0                	test   %eax,%eax
c0102bf3:	74 05                	je     c0102bfa <trap+0x92>
                schedule();
c0102bf5:	e8 72 ac 00 00       	call   c010d86c <schedule>
            }
        }
    }
}
c0102bfa:	90                   	nop
c0102bfb:	c9                   	leave  
c0102bfc:	c3                   	ret    

c0102bfd <vector0>:
# handler
.text
.globl __alltraps
.globl vector0
vector0:
  pushl $0
c0102bfd:	6a 00                	push   $0x0
  pushl $0
c0102bff:	6a 00                	push   $0x0
  jmp __alltraps
c0102c01:	e9 69 0a 00 00       	jmp    c010366f <__alltraps>

c0102c06 <vector1>:
.globl vector1
vector1:
  pushl $0
c0102c06:	6a 00                	push   $0x0
  pushl $1
c0102c08:	6a 01                	push   $0x1
  jmp __alltraps
c0102c0a:	e9 60 0a 00 00       	jmp    c010366f <__alltraps>

c0102c0f <vector2>:
.globl vector2
vector2:
  pushl $0
c0102c0f:	6a 00                	push   $0x0
  pushl $2
c0102c11:	6a 02                	push   $0x2
  jmp __alltraps
c0102c13:	e9 57 0a 00 00       	jmp    c010366f <__alltraps>

c0102c18 <vector3>:
.globl vector3
vector3:
  pushl $0
c0102c18:	6a 00                	push   $0x0
  pushl $3
c0102c1a:	6a 03                	push   $0x3
  jmp __alltraps
c0102c1c:	e9 4e 0a 00 00       	jmp    c010366f <__alltraps>

c0102c21 <vector4>:
.globl vector4
vector4:
  pushl $0
c0102c21:	6a 00                	push   $0x0
  pushl $4
c0102c23:	6a 04                	push   $0x4
  jmp __alltraps
c0102c25:	e9 45 0a 00 00       	jmp    c010366f <__alltraps>

c0102c2a <vector5>:
.globl vector5
vector5:
  pushl $0
c0102c2a:	6a 00                	push   $0x0
  pushl $5
c0102c2c:	6a 05                	push   $0x5
  jmp __alltraps
c0102c2e:	e9 3c 0a 00 00       	jmp    c010366f <__alltraps>

c0102c33 <vector6>:
.globl vector6
vector6:
  pushl $0
c0102c33:	6a 00                	push   $0x0
  pushl $6
c0102c35:	6a 06                	push   $0x6
  jmp __alltraps
c0102c37:	e9 33 0a 00 00       	jmp    c010366f <__alltraps>

c0102c3c <vector7>:
.globl vector7
vector7:
  pushl $0
c0102c3c:	6a 00                	push   $0x0
  pushl $7
c0102c3e:	6a 07                	push   $0x7
  jmp __alltraps
c0102c40:	e9 2a 0a 00 00       	jmp    c010366f <__alltraps>

c0102c45 <vector8>:
.globl vector8
vector8:
  pushl $8
c0102c45:	6a 08                	push   $0x8
  jmp __alltraps
c0102c47:	e9 23 0a 00 00       	jmp    c010366f <__alltraps>

c0102c4c <vector9>:
.globl vector9
vector9:
  pushl $0
c0102c4c:	6a 00                	push   $0x0
  pushl $9
c0102c4e:	6a 09                	push   $0x9
  jmp __alltraps
c0102c50:	e9 1a 0a 00 00       	jmp    c010366f <__alltraps>

c0102c55 <vector10>:
.globl vector10
vector10:
  pushl $10
c0102c55:	6a 0a                	push   $0xa
  jmp __alltraps
c0102c57:	e9 13 0a 00 00       	jmp    c010366f <__alltraps>

c0102c5c <vector11>:
.globl vector11
vector11:
  pushl $11
c0102c5c:	6a 0b                	push   $0xb
  jmp __alltraps
c0102c5e:	e9 0c 0a 00 00       	jmp    c010366f <__alltraps>

c0102c63 <vector12>:
.globl vector12
vector12:
  pushl $12
c0102c63:	6a 0c                	push   $0xc
  jmp __alltraps
c0102c65:	e9 05 0a 00 00       	jmp    c010366f <__alltraps>

c0102c6a <vector13>:
.globl vector13
vector13:
  pushl $13
c0102c6a:	6a 0d                	push   $0xd
  jmp __alltraps
c0102c6c:	e9 fe 09 00 00       	jmp    c010366f <__alltraps>

c0102c71 <vector14>:
.globl vector14
vector14:
  pushl $14
c0102c71:	6a 0e                	push   $0xe
  jmp __alltraps
c0102c73:	e9 f7 09 00 00       	jmp    c010366f <__alltraps>

c0102c78 <vector15>:
.globl vector15
vector15:
  pushl $0
c0102c78:	6a 00                	push   $0x0
  pushl $15
c0102c7a:	6a 0f                	push   $0xf
  jmp __alltraps
c0102c7c:	e9 ee 09 00 00       	jmp    c010366f <__alltraps>

c0102c81 <vector16>:
.globl vector16
vector16:
  pushl $0
c0102c81:	6a 00                	push   $0x0
  pushl $16
c0102c83:	6a 10                	push   $0x10
  jmp __alltraps
c0102c85:	e9 e5 09 00 00       	jmp    c010366f <__alltraps>

c0102c8a <vector17>:
.globl vector17
vector17:
  pushl $17
c0102c8a:	6a 11                	push   $0x11
  jmp __alltraps
c0102c8c:	e9 de 09 00 00       	jmp    c010366f <__alltraps>

c0102c91 <vector18>:
.globl vector18
vector18:
  pushl $0
c0102c91:	6a 00                	push   $0x0
  pushl $18
c0102c93:	6a 12                	push   $0x12
  jmp __alltraps
c0102c95:	e9 d5 09 00 00       	jmp    c010366f <__alltraps>

c0102c9a <vector19>:
.globl vector19
vector19:
  pushl $0
c0102c9a:	6a 00                	push   $0x0
  pushl $19
c0102c9c:	6a 13                	push   $0x13
  jmp __alltraps
c0102c9e:	e9 cc 09 00 00       	jmp    c010366f <__alltraps>

c0102ca3 <vector20>:
.globl vector20
vector20:
  pushl $0
c0102ca3:	6a 00                	push   $0x0
  pushl $20
c0102ca5:	6a 14                	push   $0x14
  jmp __alltraps
c0102ca7:	e9 c3 09 00 00       	jmp    c010366f <__alltraps>

c0102cac <vector21>:
.globl vector21
vector21:
  pushl $0
c0102cac:	6a 00                	push   $0x0
  pushl $21
c0102cae:	6a 15                	push   $0x15
  jmp __alltraps
c0102cb0:	e9 ba 09 00 00       	jmp    c010366f <__alltraps>

c0102cb5 <vector22>:
.globl vector22
vector22:
  pushl $0
c0102cb5:	6a 00                	push   $0x0
  pushl $22
c0102cb7:	6a 16                	push   $0x16
  jmp __alltraps
c0102cb9:	e9 b1 09 00 00       	jmp    c010366f <__alltraps>

c0102cbe <vector23>:
.globl vector23
vector23:
  pushl $0
c0102cbe:	6a 00                	push   $0x0
  pushl $23
c0102cc0:	6a 17                	push   $0x17
  jmp __alltraps
c0102cc2:	e9 a8 09 00 00       	jmp    c010366f <__alltraps>

c0102cc7 <vector24>:
.globl vector24
vector24:
  pushl $0
c0102cc7:	6a 00                	push   $0x0
  pushl $24
c0102cc9:	6a 18                	push   $0x18
  jmp __alltraps
c0102ccb:	e9 9f 09 00 00       	jmp    c010366f <__alltraps>

c0102cd0 <vector25>:
.globl vector25
vector25:
  pushl $0
c0102cd0:	6a 00                	push   $0x0
  pushl $25
c0102cd2:	6a 19                	push   $0x19
  jmp __alltraps
c0102cd4:	e9 96 09 00 00       	jmp    c010366f <__alltraps>

c0102cd9 <vector26>:
.globl vector26
vector26:
  pushl $0
c0102cd9:	6a 00                	push   $0x0
  pushl $26
c0102cdb:	6a 1a                	push   $0x1a
  jmp __alltraps
c0102cdd:	e9 8d 09 00 00       	jmp    c010366f <__alltraps>

c0102ce2 <vector27>:
.globl vector27
vector27:
  pushl $0
c0102ce2:	6a 00                	push   $0x0
  pushl $27
c0102ce4:	6a 1b                	push   $0x1b
  jmp __alltraps
c0102ce6:	e9 84 09 00 00       	jmp    c010366f <__alltraps>

c0102ceb <vector28>:
.globl vector28
vector28:
  pushl $0
c0102ceb:	6a 00                	push   $0x0
  pushl $28
c0102ced:	6a 1c                	push   $0x1c
  jmp __alltraps
c0102cef:	e9 7b 09 00 00       	jmp    c010366f <__alltraps>

c0102cf4 <vector29>:
.globl vector29
vector29:
  pushl $0
c0102cf4:	6a 00                	push   $0x0
  pushl $29
c0102cf6:	6a 1d                	push   $0x1d
  jmp __alltraps
c0102cf8:	e9 72 09 00 00       	jmp    c010366f <__alltraps>

c0102cfd <vector30>:
.globl vector30
vector30:
  pushl $0
c0102cfd:	6a 00                	push   $0x0
  pushl $30
c0102cff:	6a 1e                	push   $0x1e
  jmp __alltraps
c0102d01:	e9 69 09 00 00       	jmp    c010366f <__alltraps>

c0102d06 <vector31>:
.globl vector31
vector31:
  pushl $0
c0102d06:	6a 00                	push   $0x0
  pushl $31
c0102d08:	6a 1f                	push   $0x1f
  jmp __alltraps
c0102d0a:	e9 60 09 00 00       	jmp    c010366f <__alltraps>

c0102d0f <vector32>:
.globl vector32
vector32:
  pushl $0
c0102d0f:	6a 00                	push   $0x0
  pushl $32
c0102d11:	6a 20                	push   $0x20
  jmp __alltraps
c0102d13:	e9 57 09 00 00       	jmp    c010366f <__alltraps>

c0102d18 <vector33>:
.globl vector33
vector33:
  pushl $0
c0102d18:	6a 00                	push   $0x0
  pushl $33
c0102d1a:	6a 21                	push   $0x21
  jmp __alltraps
c0102d1c:	e9 4e 09 00 00       	jmp    c010366f <__alltraps>

c0102d21 <vector34>:
.globl vector34
vector34:
  pushl $0
c0102d21:	6a 00                	push   $0x0
  pushl $34
c0102d23:	6a 22                	push   $0x22
  jmp __alltraps
c0102d25:	e9 45 09 00 00       	jmp    c010366f <__alltraps>

c0102d2a <vector35>:
.globl vector35
vector35:
  pushl $0
c0102d2a:	6a 00                	push   $0x0
  pushl $35
c0102d2c:	6a 23                	push   $0x23
  jmp __alltraps
c0102d2e:	e9 3c 09 00 00       	jmp    c010366f <__alltraps>

c0102d33 <vector36>:
.globl vector36
vector36:
  pushl $0
c0102d33:	6a 00                	push   $0x0
  pushl $36
c0102d35:	6a 24                	push   $0x24
  jmp __alltraps
c0102d37:	e9 33 09 00 00       	jmp    c010366f <__alltraps>

c0102d3c <vector37>:
.globl vector37
vector37:
  pushl $0
c0102d3c:	6a 00                	push   $0x0
  pushl $37
c0102d3e:	6a 25                	push   $0x25
  jmp __alltraps
c0102d40:	e9 2a 09 00 00       	jmp    c010366f <__alltraps>

c0102d45 <vector38>:
.globl vector38
vector38:
  pushl $0
c0102d45:	6a 00                	push   $0x0
  pushl $38
c0102d47:	6a 26                	push   $0x26
  jmp __alltraps
c0102d49:	e9 21 09 00 00       	jmp    c010366f <__alltraps>

c0102d4e <vector39>:
.globl vector39
vector39:
  pushl $0
c0102d4e:	6a 00                	push   $0x0
  pushl $39
c0102d50:	6a 27                	push   $0x27
  jmp __alltraps
c0102d52:	e9 18 09 00 00       	jmp    c010366f <__alltraps>

c0102d57 <vector40>:
.globl vector40
vector40:
  pushl $0
c0102d57:	6a 00                	push   $0x0
  pushl $40
c0102d59:	6a 28                	push   $0x28
  jmp __alltraps
c0102d5b:	e9 0f 09 00 00       	jmp    c010366f <__alltraps>

c0102d60 <vector41>:
.globl vector41
vector41:
  pushl $0
c0102d60:	6a 00                	push   $0x0
  pushl $41
c0102d62:	6a 29                	push   $0x29
  jmp __alltraps
c0102d64:	e9 06 09 00 00       	jmp    c010366f <__alltraps>

c0102d69 <vector42>:
.globl vector42
vector42:
  pushl $0
c0102d69:	6a 00                	push   $0x0
  pushl $42
c0102d6b:	6a 2a                	push   $0x2a
  jmp __alltraps
c0102d6d:	e9 fd 08 00 00       	jmp    c010366f <__alltraps>

c0102d72 <vector43>:
.globl vector43
vector43:
  pushl $0
c0102d72:	6a 00                	push   $0x0
  pushl $43
c0102d74:	6a 2b                	push   $0x2b
  jmp __alltraps
c0102d76:	e9 f4 08 00 00       	jmp    c010366f <__alltraps>

c0102d7b <vector44>:
.globl vector44
vector44:
  pushl $0
c0102d7b:	6a 00                	push   $0x0
  pushl $44
c0102d7d:	6a 2c                	push   $0x2c
  jmp __alltraps
c0102d7f:	e9 eb 08 00 00       	jmp    c010366f <__alltraps>

c0102d84 <vector45>:
.globl vector45
vector45:
  pushl $0
c0102d84:	6a 00                	push   $0x0
  pushl $45
c0102d86:	6a 2d                	push   $0x2d
  jmp __alltraps
c0102d88:	e9 e2 08 00 00       	jmp    c010366f <__alltraps>

c0102d8d <vector46>:
.globl vector46
vector46:
  pushl $0
c0102d8d:	6a 00                	push   $0x0
  pushl $46
c0102d8f:	6a 2e                	push   $0x2e
  jmp __alltraps
c0102d91:	e9 d9 08 00 00       	jmp    c010366f <__alltraps>

c0102d96 <vector47>:
.globl vector47
vector47:
  pushl $0
c0102d96:	6a 00                	push   $0x0
  pushl $47
c0102d98:	6a 2f                	push   $0x2f
  jmp __alltraps
c0102d9a:	e9 d0 08 00 00       	jmp    c010366f <__alltraps>

c0102d9f <vector48>:
.globl vector48
vector48:
  pushl $0
c0102d9f:	6a 00                	push   $0x0
  pushl $48
c0102da1:	6a 30                	push   $0x30
  jmp __alltraps
c0102da3:	e9 c7 08 00 00       	jmp    c010366f <__alltraps>

c0102da8 <vector49>:
.globl vector49
vector49:
  pushl $0
c0102da8:	6a 00                	push   $0x0
  pushl $49
c0102daa:	6a 31                	push   $0x31
  jmp __alltraps
c0102dac:	e9 be 08 00 00       	jmp    c010366f <__alltraps>

c0102db1 <vector50>:
.globl vector50
vector50:
  pushl $0
c0102db1:	6a 00                	push   $0x0
  pushl $50
c0102db3:	6a 32                	push   $0x32
  jmp __alltraps
c0102db5:	e9 b5 08 00 00       	jmp    c010366f <__alltraps>

c0102dba <vector51>:
.globl vector51
vector51:
  pushl $0
c0102dba:	6a 00                	push   $0x0
  pushl $51
c0102dbc:	6a 33                	push   $0x33
  jmp __alltraps
c0102dbe:	e9 ac 08 00 00       	jmp    c010366f <__alltraps>

c0102dc3 <vector52>:
.globl vector52
vector52:
  pushl $0
c0102dc3:	6a 00                	push   $0x0
  pushl $52
c0102dc5:	6a 34                	push   $0x34
  jmp __alltraps
c0102dc7:	e9 a3 08 00 00       	jmp    c010366f <__alltraps>

c0102dcc <vector53>:
.globl vector53
vector53:
  pushl $0
c0102dcc:	6a 00                	push   $0x0
  pushl $53
c0102dce:	6a 35                	push   $0x35
  jmp __alltraps
c0102dd0:	e9 9a 08 00 00       	jmp    c010366f <__alltraps>

c0102dd5 <vector54>:
.globl vector54
vector54:
  pushl $0
c0102dd5:	6a 00                	push   $0x0
  pushl $54
c0102dd7:	6a 36                	push   $0x36
  jmp __alltraps
c0102dd9:	e9 91 08 00 00       	jmp    c010366f <__alltraps>

c0102dde <vector55>:
.globl vector55
vector55:
  pushl $0
c0102dde:	6a 00                	push   $0x0
  pushl $55
c0102de0:	6a 37                	push   $0x37
  jmp __alltraps
c0102de2:	e9 88 08 00 00       	jmp    c010366f <__alltraps>

c0102de7 <vector56>:
.globl vector56
vector56:
  pushl $0
c0102de7:	6a 00                	push   $0x0
  pushl $56
c0102de9:	6a 38                	push   $0x38
  jmp __alltraps
c0102deb:	e9 7f 08 00 00       	jmp    c010366f <__alltraps>

c0102df0 <vector57>:
.globl vector57
vector57:
  pushl $0
c0102df0:	6a 00                	push   $0x0
  pushl $57
c0102df2:	6a 39                	push   $0x39
  jmp __alltraps
c0102df4:	e9 76 08 00 00       	jmp    c010366f <__alltraps>

c0102df9 <vector58>:
.globl vector58
vector58:
  pushl $0
c0102df9:	6a 00                	push   $0x0
  pushl $58
c0102dfb:	6a 3a                	push   $0x3a
  jmp __alltraps
c0102dfd:	e9 6d 08 00 00       	jmp    c010366f <__alltraps>

c0102e02 <vector59>:
.globl vector59
vector59:
  pushl $0
c0102e02:	6a 00                	push   $0x0
  pushl $59
c0102e04:	6a 3b                	push   $0x3b
  jmp __alltraps
c0102e06:	e9 64 08 00 00       	jmp    c010366f <__alltraps>

c0102e0b <vector60>:
.globl vector60
vector60:
  pushl $0
c0102e0b:	6a 00                	push   $0x0
  pushl $60
c0102e0d:	6a 3c                	push   $0x3c
  jmp __alltraps
c0102e0f:	e9 5b 08 00 00       	jmp    c010366f <__alltraps>

c0102e14 <vector61>:
.globl vector61
vector61:
  pushl $0
c0102e14:	6a 00                	push   $0x0
  pushl $61
c0102e16:	6a 3d                	push   $0x3d
  jmp __alltraps
c0102e18:	e9 52 08 00 00       	jmp    c010366f <__alltraps>

c0102e1d <vector62>:
.globl vector62
vector62:
  pushl $0
c0102e1d:	6a 00                	push   $0x0
  pushl $62
c0102e1f:	6a 3e                	push   $0x3e
  jmp __alltraps
c0102e21:	e9 49 08 00 00       	jmp    c010366f <__alltraps>

c0102e26 <vector63>:
.globl vector63
vector63:
  pushl $0
c0102e26:	6a 00                	push   $0x0
  pushl $63
c0102e28:	6a 3f                	push   $0x3f
  jmp __alltraps
c0102e2a:	e9 40 08 00 00       	jmp    c010366f <__alltraps>

c0102e2f <vector64>:
.globl vector64
vector64:
  pushl $0
c0102e2f:	6a 00                	push   $0x0
  pushl $64
c0102e31:	6a 40                	push   $0x40
  jmp __alltraps
c0102e33:	e9 37 08 00 00       	jmp    c010366f <__alltraps>

c0102e38 <vector65>:
.globl vector65
vector65:
  pushl $0
c0102e38:	6a 00                	push   $0x0
  pushl $65
c0102e3a:	6a 41                	push   $0x41
  jmp __alltraps
c0102e3c:	e9 2e 08 00 00       	jmp    c010366f <__alltraps>

c0102e41 <vector66>:
.globl vector66
vector66:
  pushl $0
c0102e41:	6a 00                	push   $0x0
  pushl $66
c0102e43:	6a 42                	push   $0x42
  jmp __alltraps
c0102e45:	e9 25 08 00 00       	jmp    c010366f <__alltraps>

c0102e4a <vector67>:
.globl vector67
vector67:
  pushl $0
c0102e4a:	6a 00                	push   $0x0
  pushl $67
c0102e4c:	6a 43                	push   $0x43
  jmp __alltraps
c0102e4e:	e9 1c 08 00 00       	jmp    c010366f <__alltraps>

c0102e53 <vector68>:
.globl vector68
vector68:
  pushl $0
c0102e53:	6a 00                	push   $0x0
  pushl $68
c0102e55:	6a 44                	push   $0x44
  jmp __alltraps
c0102e57:	e9 13 08 00 00       	jmp    c010366f <__alltraps>

c0102e5c <vector69>:
.globl vector69
vector69:
  pushl $0
c0102e5c:	6a 00                	push   $0x0
  pushl $69
c0102e5e:	6a 45                	push   $0x45
  jmp __alltraps
c0102e60:	e9 0a 08 00 00       	jmp    c010366f <__alltraps>

c0102e65 <vector70>:
.globl vector70
vector70:
  pushl $0
c0102e65:	6a 00                	push   $0x0
  pushl $70
c0102e67:	6a 46                	push   $0x46
  jmp __alltraps
c0102e69:	e9 01 08 00 00       	jmp    c010366f <__alltraps>

c0102e6e <vector71>:
.globl vector71
vector71:
  pushl $0
c0102e6e:	6a 00                	push   $0x0
  pushl $71
c0102e70:	6a 47                	push   $0x47
  jmp __alltraps
c0102e72:	e9 f8 07 00 00       	jmp    c010366f <__alltraps>

c0102e77 <vector72>:
.globl vector72
vector72:
  pushl $0
c0102e77:	6a 00                	push   $0x0
  pushl $72
c0102e79:	6a 48                	push   $0x48
  jmp __alltraps
c0102e7b:	e9 ef 07 00 00       	jmp    c010366f <__alltraps>

c0102e80 <vector73>:
.globl vector73
vector73:
  pushl $0
c0102e80:	6a 00                	push   $0x0
  pushl $73
c0102e82:	6a 49                	push   $0x49
  jmp __alltraps
c0102e84:	e9 e6 07 00 00       	jmp    c010366f <__alltraps>

c0102e89 <vector74>:
.globl vector74
vector74:
  pushl $0
c0102e89:	6a 00                	push   $0x0
  pushl $74
c0102e8b:	6a 4a                	push   $0x4a
  jmp __alltraps
c0102e8d:	e9 dd 07 00 00       	jmp    c010366f <__alltraps>

c0102e92 <vector75>:
.globl vector75
vector75:
  pushl $0
c0102e92:	6a 00                	push   $0x0
  pushl $75
c0102e94:	6a 4b                	push   $0x4b
  jmp __alltraps
c0102e96:	e9 d4 07 00 00       	jmp    c010366f <__alltraps>

c0102e9b <vector76>:
.globl vector76
vector76:
  pushl $0
c0102e9b:	6a 00                	push   $0x0
  pushl $76
c0102e9d:	6a 4c                	push   $0x4c
  jmp __alltraps
c0102e9f:	e9 cb 07 00 00       	jmp    c010366f <__alltraps>

c0102ea4 <vector77>:
.globl vector77
vector77:
  pushl $0
c0102ea4:	6a 00                	push   $0x0
  pushl $77
c0102ea6:	6a 4d                	push   $0x4d
  jmp __alltraps
c0102ea8:	e9 c2 07 00 00       	jmp    c010366f <__alltraps>

c0102ead <vector78>:
.globl vector78
vector78:
  pushl $0
c0102ead:	6a 00                	push   $0x0
  pushl $78
c0102eaf:	6a 4e                	push   $0x4e
  jmp __alltraps
c0102eb1:	e9 b9 07 00 00       	jmp    c010366f <__alltraps>

c0102eb6 <vector79>:
.globl vector79
vector79:
  pushl $0
c0102eb6:	6a 00                	push   $0x0
  pushl $79
c0102eb8:	6a 4f                	push   $0x4f
  jmp __alltraps
c0102eba:	e9 b0 07 00 00       	jmp    c010366f <__alltraps>

c0102ebf <vector80>:
.globl vector80
vector80:
  pushl $0
c0102ebf:	6a 00                	push   $0x0
  pushl $80
c0102ec1:	6a 50                	push   $0x50
  jmp __alltraps
c0102ec3:	e9 a7 07 00 00       	jmp    c010366f <__alltraps>

c0102ec8 <vector81>:
.globl vector81
vector81:
  pushl $0
c0102ec8:	6a 00                	push   $0x0
  pushl $81
c0102eca:	6a 51                	push   $0x51
  jmp __alltraps
c0102ecc:	e9 9e 07 00 00       	jmp    c010366f <__alltraps>

c0102ed1 <vector82>:
.globl vector82
vector82:
  pushl $0
c0102ed1:	6a 00                	push   $0x0
  pushl $82
c0102ed3:	6a 52                	push   $0x52
  jmp __alltraps
c0102ed5:	e9 95 07 00 00       	jmp    c010366f <__alltraps>

c0102eda <vector83>:
.globl vector83
vector83:
  pushl $0
c0102eda:	6a 00                	push   $0x0
  pushl $83
c0102edc:	6a 53                	push   $0x53
  jmp __alltraps
c0102ede:	e9 8c 07 00 00       	jmp    c010366f <__alltraps>

c0102ee3 <vector84>:
.globl vector84
vector84:
  pushl $0
c0102ee3:	6a 00                	push   $0x0
  pushl $84
c0102ee5:	6a 54                	push   $0x54
  jmp __alltraps
c0102ee7:	e9 83 07 00 00       	jmp    c010366f <__alltraps>

c0102eec <vector85>:
.globl vector85
vector85:
  pushl $0
c0102eec:	6a 00                	push   $0x0
  pushl $85
c0102eee:	6a 55                	push   $0x55
  jmp __alltraps
c0102ef0:	e9 7a 07 00 00       	jmp    c010366f <__alltraps>

c0102ef5 <vector86>:
.globl vector86
vector86:
  pushl $0
c0102ef5:	6a 00                	push   $0x0
  pushl $86
c0102ef7:	6a 56                	push   $0x56
  jmp __alltraps
c0102ef9:	e9 71 07 00 00       	jmp    c010366f <__alltraps>

c0102efe <vector87>:
.globl vector87
vector87:
  pushl $0
c0102efe:	6a 00                	push   $0x0
  pushl $87
c0102f00:	6a 57                	push   $0x57
  jmp __alltraps
c0102f02:	e9 68 07 00 00       	jmp    c010366f <__alltraps>

c0102f07 <vector88>:
.globl vector88
vector88:
  pushl $0
c0102f07:	6a 00                	push   $0x0
  pushl $88
c0102f09:	6a 58                	push   $0x58
  jmp __alltraps
c0102f0b:	e9 5f 07 00 00       	jmp    c010366f <__alltraps>

c0102f10 <vector89>:
.globl vector89
vector89:
  pushl $0
c0102f10:	6a 00                	push   $0x0
  pushl $89
c0102f12:	6a 59                	push   $0x59
  jmp __alltraps
c0102f14:	e9 56 07 00 00       	jmp    c010366f <__alltraps>

c0102f19 <vector90>:
.globl vector90
vector90:
  pushl $0
c0102f19:	6a 00                	push   $0x0
  pushl $90
c0102f1b:	6a 5a                	push   $0x5a
  jmp __alltraps
c0102f1d:	e9 4d 07 00 00       	jmp    c010366f <__alltraps>

c0102f22 <vector91>:
.globl vector91
vector91:
  pushl $0
c0102f22:	6a 00                	push   $0x0
  pushl $91
c0102f24:	6a 5b                	push   $0x5b
  jmp __alltraps
c0102f26:	e9 44 07 00 00       	jmp    c010366f <__alltraps>

c0102f2b <vector92>:
.globl vector92
vector92:
  pushl $0
c0102f2b:	6a 00                	push   $0x0
  pushl $92
c0102f2d:	6a 5c                	push   $0x5c
  jmp __alltraps
c0102f2f:	e9 3b 07 00 00       	jmp    c010366f <__alltraps>

c0102f34 <vector93>:
.globl vector93
vector93:
  pushl $0
c0102f34:	6a 00                	push   $0x0
  pushl $93
c0102f36:	6a 5d                	push   $0x5d
  jmp __alltraps
c0102f38:	e9 32 07 00 00       	jmp    c010366f <__alltraps>

c0102f3d <vector94>:
.globl vector94
vector94:
  pushl $0
c0102f3d:	6a 00                	push   $0x0
  pushl $94
c0102f3f:	6a 5e                	push   $0x5e
  jmp __alltraps
c0102f41:	e9 29 07 00 00       	jmp    c010366f <__alltraps>

c0102f46 <vector95>:
.globl vector95
vector95:
  pushl $0
c0102f46:	6a 00                	push   $0x0
  pushl $95
c0102f48:	6a 5f                	push   $0x5f
  jmp __alltraps
c0102f4a:	e9 20 07 00 00       	jmp    c010366f <__alltraps>

c0102f4f <vector96>:
.globl vector96
vector96:
  pushl $0
c0102f4f:	6a 00                	push   $0x0
  pushl $96
c0102f51:	6a 60                	push   $0x60
  jmp __alltraps
c0102f53:	e9 17 07 00 00       	jmp    c010366f <__alltraps>

c0102f58 <vector97>:
.globl vector97
vector97:
  pushl $0
c0102f58:	6a 00                	push   $0x0
  pushl $97
c0102f5a:	6a 61                	push   $0x61
  jmp __alltraps
c0102f5c:	e9 0e 07 00 00       	jmp    c010366f <__alltraps>

c0102f61 <vector98>:
.globl vector98
vector98:
  pushl $0
c0102f61:	6a 00                	push   $0x0
  pushl $98
c0102f63:	6a 62                	push   $0x62
  jmp __alltraps
c0102f65:	e9 05 07 00 00       	jmp    c010366f <__alltraps>

c0102f6a <vector99>:
.globl vector99
vector99:
  pushl $0
c0102f6a:	6a 00                	push   $0x0
  pushl $99
c0102f6c:	6a 63                	push   $0x63
  jmp __alltraps
c0102f6e:	e9 fc 06 00 00       	jmp    c010366f <__alltraps>

c0102f73 <vector100>:
.globl vector100
vector100:
  pushl $0
c0102f73:	6a 00                	push   $0x0
  pushl $100
c0102f75:	6a 64                	push   $0x64
  jmp __alltraps
c0102f77:	e9 f3 06 00 00       	jmp    c010366f <__alltraps>

c0102f7c <vector101>:
.globl vector101
vector101:
  pushl $0
c0102f7c:	6a 00                	push   $0x0
  pushl $101
c0102f7e:	6a 65                	push   $0x65
  jmp __alltraps
c0102f80:	e9 ea 06 00 00       	jmp    c010366f <__alltraps>

c0102f85 <vector102>:
.globl vector102
vector102:
  pushl $0
c0102f85:	6a 00                	push   $0x0
  pushl $102
c0102f87:	6a 66                	push   $0x66
  jmp __alltraps
c0102f89:	e9 e1 06 00 00       	jmp    c010366f <__alltraps>

c0102f8e <vector103>:
.globl vector103
vector103:
  pushl $0
c0102f8e:	6a 00                	push   $0x0
  pushl $103
c0102f90:	6a 67                	push   $0x67
  jmp __alltraps
c0102f92:	e9 d8 06 00 00       	jmp    c010366f <__alltraps>

c0102f97 <vector104>:
.globl vector104
vector104:
  pushl $0
c0102f97:	6a 00                	push   $0x0
  pushl $104
c0102f99:	6a 68                	push   $0x68
  jmp __alltraps
c0102f9b:	e9 cf 06 00 00       	jmp    c010366f <__alltraps>

c0102fa0 <vector105>:
.globl vector105
vector105:
  pushl $0
c0102fa0:	6a 00                	push   $0x0
  pushl $105
c0102fa2:	6a 69                	push   $0x69
  jmp __alltraps
c0102fa4:	e9 c6 06 00 00       	jmp    c010366f <__alltraps>

c0102fa9 <vector106>:
.globl vector106
vector106:
  pushl $0
c0102fa9:	6a 00                	push   $0x0
  pushl $106
c0102fab:	6a 6a                	push   $0x6a
  jmp __alltraps
c0102fad:	e9 bd 06 00 00       	jmp    c010366f <__alltraps>

c0102fb2 <vector107>:
.globl vector107
vector107:
  pushl $0
c0102fb2:	6a 00                	push   $0x0
  pushl $107
c0102fb4:	6a 6b                	push   $0x6b
  jmp __alltraps
c0102fb6:	e9 b4 06 00 00       	jmp    c010366f <__alltraps>

c0102fbb <vector108>:
.globl vector108
vector108:
  pushl $0
c0102fbb:	6a 00                	push   $0x0
  pushl $108
c0102fbd:	6a 6c                	push   $0x6c
  jmp __alltraps
c0102fbf:	e9 ab 06 00 00       	jmp    c010366f <__alltraps>

c0102fc4 <vector109>:
.globl vector109
vector109:
  pushl $0
c0102fc4:	6a 00                	push   $0x0
  pushl $109
c0102fc6:	6a 6d                	push   $0x6d
  jmp __alltraps
c0102fc8:	e9 a2 06 00 00       	jmp    c010366f <__alltraps>

c0102fcd <vector110>:
.globl vector110
vector110:
  pushl $0
c0102fcd:	6a 00                	push   $0x0
  pushl $110
c0102fcf:	6a 6e                	push   $0x6e
  jmp __alltraps
c0102fd1:	e9 99 06 00 00       	jmp    c010366f <__alltraps>

c0102fd6 <vector111>:
.globl vector111
vector111:
  pushl $0
c0102fd6:	6a 00                	push   $0x0
  pushl $111
c0102fd8:	6a 6f                	push   $0x6f
  jmp __alltraps
c0102fda:	e9 90 06 00 00       	jmp    c010366f <__alltraps>

c0102fdf <vector112>:
.globl vector112
vector112:
  pushl $0
c0102fdf:	6a 00                	push   $0x0
  pushl $112
c0102fe1:	6a 70                	push   $0x70
  jmp __alltraps
c0102fe3:	e9 87 06 00 00       	jmp    c010366f <__alltraps>

c0102fe8 <vector113>:
.globl vector113
vector113:
  pushl $0
c0102fe8:	6a 00                	push   $0x0
  pushl $113
c0102fea:	6a 71                	push   $0x71
  jmp __alltraps
c0102fec:	e9 7e 06 00 00       	jmp    c010366f <__alltraps>

c0102ff1 <vector114>:
.globl vector114
vector114:
  pushl $0
c0102ff1:	6a 00                	push   $0x0
  pushl $114
c0102ff3:	6a 72                	push   $0x72
  jmp __alltraps
c0102ff5:	e9 75 06 00 00       	jmp    c010366f <__alltraps>

c0102ffa <vector115>:
.globl vector115
vector115:
  pushl $0
c0102ffa:	6a 00                	push   $0x0
  pushl $115
c0102ffc:	6a 73                	push   $0x73
  jmp __alltraps
c0102ffe:	e9 6c 06 00 00       	jmp    c010366f <__alltraps>

c0103003 <vector116>:
.globl vector116
vector116:
  pushl $0
c0103003:	6a 00                	push   $0x0
  pushl $116
c0103005:	6a 74                	push   $0x74
  jmp __alltraps
c0103007:	e9 63 06 00 00       	jmp    c010366f <__alltraps>

c010300c <vector117>:
.globl vector117
vector117:
  pushl $0
c010300c:	6a 00                	push   $0x0
  pushl $117
c010300e:	6a 75                	push   $0x75
  jmp __alltraps
c0103010:	e9 5a 06 00 00       	jmp    c010366f <__alltraps>

c0103015 <vector118>:
.globl vector118
vector118:
  pushl $0
c0103015:	6a 00                	push   $0x0
  pushl $118
c0103017:	6a 76                	push   $0x76
  jmp __alltraps
c0103019:	e9 51 06 00 00       	jmp    c010366f <__alltraps>

c010301e <vector119>:
.globl vector119
vector119:
  pushl $0
c010301e:	6a 00                	push   $0x0
  pushl $119
c0103020:	6a 77                	push   $0x77
  jmp __alltraps
c0103022:	e9 48 06 00 00       	jmp    c010366f <__alltraps>

c0103027 <vector120>:
.globl vector120
vector120:
  pushl $0
c0103027:	6a 00                	push   $0x0
  pushl $120
c0103029:	6a 78                	push   $0x78
  jmp __alltraps
c010302b:	e9 3f 06 00 00       	jmp    c010366f <__alltraps>

c0103030 <vector121>:
.globl vector121
vector121:
  pushl $0
c0103030:	6a 00                	push   $0x0
  pushl $121
c0103032:	6a 79                	push   $0x79
  jmp __alltraps
c0103034:	e9 36 06 00 00       	jmp    c010366f <__alltraps>

c0103039 <vector122>:
.globl vector122
vector122:
  pushl $0
c0103039:	6a 00                	push   $0x0
  pushl $122
c010303b:	6a 7a                	push   $0x7a
  jmp __alltraps
c010303d:	e9 2d 06 00 00       	jmp    c010366f <__alltraps>

c0103042 <vector123>:
.globl vector123
vector123:
  pushl $0
c0103042:	6a 00                	push   $0x0
  pushl $123
c0103044:	6a 7b                	push   $0x7b
  jmp __alltraps
c0103046:	e9 24 06 00 00       	jmp    c010366f <__alltraps>

c010304b <vector124>:
.globl vector124
vector124:
  pushl $0
c010304b:	6a 00                	push   $0x0
  pushl $124
c010304d:	6a 7c                	push   $0x7c
  jmp __alltraps
c010304f:	e9 1b 06 00 00       	jmp    c010366f <__alltraps>

c0103054 <vector125>:
.globl vector125
vector125:
  pushl $0
c0103054:	6a 00                	push   $0x0
  pushl $125
c0103056:	6a 7d                	push   $0x7d
  jmp __alltraps
c0103058:	e9 12 06 00 00       	jmp    c010366f <__alltraps>

c010305d <vector126>:
.globl vector126
vector126:
  pushl $0
c010305d:	6a 00                	push   $0x0
  pushl $126
c010305f:	6a 7e                	push   $0x7e
  jmp __alltraps
c0103061:	e9 09 06 00 00       	jmp    c010366f <__alltraps>

c0103066 <vector127>:
.globl vector127
vector127:
  pushl $0
c0103066:	6a 00                	push   $0x0
  pushl $127
c0103068:	6a 7f                	push   $0x7f
  jmp __alltraps
c010306a:	e9 00 06 00 00       	jmp    c010366f <__alltraps>

c010306f <vector128>:
.globl vector128
vector128:
  pushl $0
c010306f:	6a 00                	push   $0x0
  pushl $128
c0103071:	68 80 00 00 00       	push   $0x80
  jmp __alltraps
c0103076:	e9 f4 05 00 00       	jmp    c010366f <__alltraps>

c010307b <vector129>:
.globl vector129
vector129:
  pushl $0
c010307b:	6a 00                	push   $0x0
  pushl $129
c010307d:	68 81 00 00 00       	push   $0x81
  jmp __alltraps
c0103082:	e9 e8 05 00 00       	jmp    c010366f <__alltraps>

c0103087 <vector130>:
.globl vector130
vector130:
  pushl $0
c0103087:	6a 00                	push   $0x0
  pushl $130
c0103089:	68 82 00 00 00       	push   $0x82
  jmp __alltraps
c010308e:	e9 dc 05 00 00       	jmp    c010366f <__alltraps>

c0103093 <vector131>:
.globl vector131
vector131:
  pushl $0
c0103093:	6a 00                	push   $0x0
  pushl $131
c0103095:	68 83 00 00 00       	push   $0x83
  jmp __alltraps
c010309a:	e9 d0 05 00 00       	jmp    c010366f <__alltraps>

c010309f <vector132>:
.globl vector132
vector132:
  pushl $0
c010309f:	6a 00                	push   $0x0
  pushl $132
c01030a1:	68 84 00 00 00       	push   $0x84
  jmp __alltraps
c01030a6:	e9 c4 05 00 00       	jmp    c010366f <__alltraps>

c01030ab <vector133>:
.globl vector133
vector133:
  pushl $0
c01030ab:	6a 00                	push   $0x0
  pushl $133
c01030ad:	68 85 00 00 00       	push   $0x85
  jmp __alltraps
c01030b2:	e9 b8 05 00 00       	jmp    c010366f <__alltraps>

c01030b7 <vector134>:
.globl vector134
vector134:
  pushl $0
c01030b7:	6a 00                	push   $0x0
  pushl $134
c01030b9:	68 86 00 00 00       	push   $0x86
  jmp __alltraps
c01030be:	e9 ac 05 00 00       	jmp    c010366f <__alltraps>

c01030c3 <vector135>:
.globl vector135
vector135:
  pushl $0
c01030c3:	6a 00                	push   $0x0
  pushl $135
c01030c5:	68 87 00 00 00       	push   $0x87
  jmp __alltraps
c01030ca:	e9 a0 05 00 00       	jmp    c010366f <__alltraps>

c01030cf <vector136>:
.globl vector136
vector136:
  pushl $0
c01030cf:	6a 00                	push   $0x0
  pushl $136
c01030d1:	68 88 00 00 00       	push   $0x88
  jmp __alltraps
c01030d6:	e9 94 05 00 00       	jmp    c010366f <__alltraps>

c01030db <vector137>:
.globl vector137
vector137:
  pushl $0
c01030db:	6a 00                	push   $0x0
  pushl $137
c01030dd:	68 89 00 00 00       	push   $0x89
  jmp __alltraps
c01030e2:	e9 88 05 00 00       	jmp    c010366f <__alltraps>

c01030e7 <vector138>:
.globl vector138
vector138:
  pushl $0
c01030e7:	6a 00                	push   $0x0
  pushl $138
c01030e9:	68 8a 00 00 00       	push   $0x8a
  jmp __alltraps
c01030ee:	e9 7c 05 00 00       	jmp    c010366f <__alltraps>

c01030f3 <vector139>:
.globl vector139
vector139:
  pushl $0
c01030f3:	6a 00                	push   $0x0
  pushl $139
c01030f5:	68 8b 00 00 00       	push   $0x8b
  jmp __alltraps
c01030fa:	e9 70 05 00 00       	jmp    c010366f <__alltraps>

c01030ff <vector140>:
.globl vector140
vector140:
  pushl $0
c01030ff:	6a 00                	push   $0x0
  pushl $140
c0103101:	68 8c 00 00 00       	push   $0x8c
  jmp __alltraps
c0103106:	e9 64 05 00 00       	jmp    c010366f <__alltraps>

c010310b <vector141>:
.globl vector141
vector141:
  pushl $0
c010310b:	6a 00                	push   $0x0
  pushl $141
c010310d:	68 8d 00 00 00       	push   $0x8d
  jmp __alltraps
c0103112:	e9 58 05 00 00       	jmp    c010366f <__alltraps>

c0103117 <vector142>:
.globl vector142
vector142:
  pushl $0
c0103117:	6a 00                	push   $0x0
  pushl $142
c0103119:	68 8e 00 00 00       	push   $0x8e
  jmp __alltraps
c010311e:	e9 4c 05 00 00       	jmp    c010366f <__alltraps>

c0103123 <vector143>:
.globl vector143
vector143:
  pushl $0
c0103123:	6a 00                	push   $0x0
  pushl $143
c0103125:	68 8f 00 00 00       	push   $0x8f
  jmp __alltraps
c010312a:	e9 40 05 00 00       	jmp    c010366f <__alltraps>

c010312f <vector144>:
.globl vector144
vector144:
  pushl $0
c010312f:	6a 00                	push   $0x0
  pushl $144
c0103131:	68 90 00 00 00       	push   $0x90
  jmp __alltraps
c0103136:	e9 34 05 00 00       	jmp    c010366f <__alltraps>

c010313b <vector145>:
.globl vector145
vector145:
  pushl $0
c010313b:	6a 00                	push   $0x0
  pushl $145
c010313d:	68 91 00 00 00       	push   $0x91
  jmp __alltraps
c0103142:	e9 28 05 00 00       	jmp    c010366f <__alltraps>

c0103147 <vector146>:
.globl vector146
vector146:
  pushl $0
c0103147:	6a 00                	push   $0x0
  pushl $146
c0103149:	68 92 00 00 00       	push   $0x92
  jmp __alltraps
c010314e:	e9 1c 05 00 00       	jmp    c010366f <__alltraps>

c0103153 <vector147>:
.globl vector147
vector147:
  pushl $0
c0103153:	6a 00                	push   $0x0
  pushl $147
c0103155:	68 93 00 00 00       	push   $0x93
  jmp __alltraps
c010315a:	e9 10 05 00 00       	jmp    c010366f <__alltraps>

c010315f <vector148>:
.globl vector148
vector148:
  pushl $0
c010315f:	6a 00                	push   $0x0
  pushl $148
c0103161:	68 94 00 00 00       	push   $0x94
  jmp __alltraps
c0103166:	e9 04 05 00 00       	jmp    c010366f <__alltraps>

c010316b <vector149>:
.globl vector149
vector149:
  pushl $0
c010316b:	6a 00                	push   $0x0
  pushl $149
c010316d:	68 95 00 00 00       	push   $0x95
  jmp __alltraps
c0103172:	e9 f8 04 00 00       	jmp    c010366f <__alltraps>

c0103177 <vector150>:
.globl vector150
vector150:
  pushl $0
c0103177:	6a 00                	push   $0x0
  pushl $150
c0103179:	68 96 00 00 00       	push   $0x96
  jmp __alltraps
c010317e:	e9 ec 04 00 00       	jmp    c010366f <__alltraps>

c0103183 <vector151>:
.globl vector151
vector151:
  pushl $0
c0103183:	6a 00                	push   $0x0
  pushl $151
c0103185:	68 97 00 00 00       	push   $0x97
  jmp __alltraps
c010318a:	e9 e0 04 00 00       	jmp    c010366f <__alltraps>

c010318f <vector152>:
.globl vector152
vector152:
  pushl $0
c010318f:	6a 00                	push   $0x0
  pushl $152
c0103191:	68 98 00 00 00       	push   $0x98
  jmp __alltraps
c0103196:	e9 d4 04 00 00       	jmp    c010366f <__alltraps>

c010319b <vector153>:
.globl vector153
vector153:
  pushl $0
c010319b:	6a 00                	push   $0x0
  pushl $153
c010319d:	68 99 00 00 00       	push   $0x99
  jmp __alltraps
c01031a2:	e9 c8 04 00 00       	jmp    c010366f <__alltraps>

c01031a7 <vector154>:
.globl vector154
vector154:
  pushl $0
c01031a7:	6a 00                	push   $0x0
  pushl $154
c01031a9:	68 9a 00 00 00       	push   $0x9a
  jmp __alltraps
c01031ae:	e9 bc 04 00 00       	jmp    c010366f <__alltraps>

c01031b3 <vector155>:
.globl vector155
vector155:
  pushl $0
c01031b3:	6a 00                	push   $0x0
  pushl $155
c01031b5:	68 9b 00 00 00       	push   $0x9b
  jmp __alltraps
c01031ba:	e9 b0 04 00 00       	jmp    c010366f <__alltraps>

c01031bf <vector156>:
.globl vector156
vector156:
  pushl $0
c01031bf:	6a 00                	push   $0x0
  pushl $156
c01031c1:	68 9c 00 00 00       	push   $0x9c
  jmp __alltraps
c01031c6:	e9 a4 04 00 00       	jmp    c010366f <__alltraps>

c01031cb <vector157>:
.globl vector157
vector157:
  pushl $0
c01031cb:	6a 00                	push   $0x0
  pushl $157
c01031cd:	68 9d 00 00 00       	push   $0x9d
  jmp __alltraps
c01031d2:	e9 98 04 00 00       	jmp    c010366f <__alltraps>

c01031d7 <vector158>:
.globl vector158
vector158:
  pushl $0
c01031d7:	6a 00                	push   $0x0
  pushl $158
c01031d9:	68 9e 00 00 00       	push   $0x9e
  jmp __alltraps
c01031de:	e9 8c 04 00 00       	jmp    c010366f <__alltraps>

c01031e3 <vector159>:
.globl vector159
vector159:
  pushl $0
c01031e3:	6a 00                	push   $0x0
  pushl $159
c01031e5:	68 9f 00 00 00       	push   $0x9f
  jmp __alltraps
c01031ea:	e9 80 04 00 00       	jmp    c010366f <__alltraps>

c01031ef <vector160>:
.globl vector160
vector160:
  pushl $0
c01031ef:	6a 00                	push   $0x0
  pushl $160
c01031f1:	68 a0 00 00 00       	push   $0xa0
  jmp __alltraps
c01031f6:	e9 74 04 00 00       	jmp    c010366f <__alltraps>

c01031fb <vector161>:
.globl vector161
vector161:
  pushl $0
c01031fb:	6a 00                	push   $0x0
  pushl $161
c01031fd:	68 a1 00 00 00       	push   $0xa1
  jmp __alltraps
c0103202:	e9 68 04 00 00       	jmp    c010366f <__alltraps>

c0103207 <vector162>:
.globl vector162
vector162:
  pushl $0
c0103207:	6a 00                	push   $0x0
  pushl $162
c0103209:	68 a2 00 00 00       	push   $0xa2
  jmp __alltraps
c010320e:	e9 5c 04 00 00       	jmp    c010366f <__alltraps>

c0103213 <vector163>:
.globl vector163
vector163:
  pushl $0
c0103213:	6a 00                	push   $0x0
  pushl $163
c0103215:	68 a3 00 00 00       	push   $0xa3
  jmp __alltraps
c010321a:	e9 50 04 00 00       	jmp    c010366f <__alltraps>

c010321f <vector164>:
.globl vector164
vector164:
  pushl $0
c010321f:	6a 00                	push   $0x0
  pushl $164
c0103221:	68 a4 00 00 00       	push   $0xa4
  jmp __alltraps
c0103226:	e9 44 04 00 00       	jmp    c010366f <__alltraps>

c010322b <vector165>:
.globl vector165
vector165:
  pushl $0
c010322b:	6a 00                	push   $0x0
  pushl $165
c010322d:	68 a5 00 00 00       	push   $0xa5
  jmp __alltraps
c0103232:	e9 38 04 00 00       	jmp    c010366f <__alltraps>

c0103237 <vector166>:
.globl vector166
vector166:
  pushl $0
c0103237:	6a 00                	push   $0x0
  pushl $166
c0103239:	68 a6 00 00 00       	push   $0xa6
  jmp __alltraps
c010323e:	e9 2c 04 00 00       	jmp    c010366f <__alltraps>

c0103243 <vector167>:
.globl vector167
vector167:
  pushl $0
c0103243:	6a 00                	push   $0x0
  pushl $167
c0103245:	68 a7 00 00 00       	push   $0xa7
  jmp __alltraps
c010324a:	e9 20 04 00 00       	jmp    c010366f <__alltraps>

c010324f <vector168>:
.globl vector168
vector168:
  pushl $0
c010324f:	6a 00                	push   $0x0
  pushl $168
c0103251:	68 a8 00 00 00       	push   $0xa8
  jmp __alltraps
c0103256:	e9 14 04 00 00       	jmp    c010366f <__alltraps>

c010325b <vector169>:
.globl vector169
vector169:
  pushl $0
c010325b:	6a 00                	push   $0x0
  pushl $169
c010325d:	68 a9 00 00 00       	push   $0xa9
  jmp __alltraps
c0103262:	e9 08 04 00 00       	jmp    c010366f <__alltraps>

c0103267 <vector170>:
.globl vector170
vector170:
  pushl $0
c0103267:	6a 00                	push   $0x0
  pushl $170
c0103269:	68 aa 00 00 00       	push   $0xaa
  jmp __alltraps
c010326e:	e9 fc 03 00 00       	jmp    c010366f <__alltraps>

c0103273 <vector171>:
.globl vector171
vector171:
  pushl $0
c0103273:	6a 00                	push   $0x0
  pushl $171
c0103275:	68 ab 00 00 00       	push   $0xab
  jmp __alltraps
c010327a:	e9 f0 03 00 00       	jmp    c010366f <__alltraps>

c010327f <vector172>:
.globl vector172
vector172:
  pushl $0
c010327f:	6a 00                	push   $0x0
  pushl $172
c0103281:	68 ac 00 00 00       	push   $0xac
  jmp __alltraps
c0103286:	e9 e4 03 00 00       	jmp    c010366f <__alltraps>

c010328b <vector173>:
.globl vector173
vector173:
  pushl $0
c010328b:	6a 00                	push   $0x0
  pushl $173
c010328d:	68 ad 00 00 00       	push   $0xad
  jmp __alltraps
c0103292:	e9 d8 03 00 00       	jmp    c010366f <__alltraps>

c0103297 <vector174>:
.globl vector174
vector174:
  pushl $0
c0103297:	6a 00                	push   $0x0
  pushl $174
c0103299:	68 ae 00 00 00       	push   $0xae
  jmp __alltraps
c010329e:	e9 cc 03 00 00       	jmp    c010366f <__alltraps>

c01032a3 <vector175>:
.globl vector175
vector175:
  pushl $0
c01032a3:	6a 00                	push   $0x0
  pushl $175
c01032a5:	68 af 00 00 00       	push   $0xaf
  jmp __alltraps
c01032aa:	e9 c0 03 00 00       	jmp    c010366f <__alltraps>

c01032af <vector176>:
.globl vector176
vector176:
  pushl $0
c01032af:	6a 00                	push   $0x0
  pushl $176
c01032b1:	68 b0 00 00 00       	push   $0xb0
  jmp __alltraps
c01032b6:	e9 b4 03 00 00       	jmp    c010366f <__alltraps>

c01032bb <vector177>:
.globl vector177
vector177:
  pushl $0
c01032bb:	6a 00                	push   $0x0
  pushl $177
c01032bd:	68 b1 00 00 00       	push   $0xb1
  jmp __alltraps
c01032c2:	e9 a8 03 00 00       	jmp    c010366f <__alltraps>

c01032c7 <vector178>:
.globl vector178
vector178:
  pushl $0
c01032c7:	6a 00                	push   $0x0
  pushl $178
c01032c9:	68 b2 00 00 00       	push   $0xb2
  jmp __alltraps
c01032ce:	e9 9c 03 00 00       	jmp    c010366f <__alltraps>

c01032d3 <vector179>:
.globl vector179
vector179:
  pushl $0
c01032d3:	6a 00                	push   $0x0
  pushl $179
c01032d5:	68 b3 00 00 00       	push   $0xb3
  jmp __alltraps
c01032da:	e9 90 03 00 00       	jmp    c010366f <__alltraps>

c01032df <vector180>:
.globl vector180
vector180:
  pushl $0
c01032df:	6a 00                	push   $0x0
  pushl $180
c01032e1:	68 b4 00 00 00       	push   $0xb4
  jmp __alltraps
c01032e6:	e9 84 03 00 00       	jmp    c010366f <__alltraps>

c01032eb <vector181>:
.globl vector181
vector181:
  pushl $0
c01032eb:	6a 00                	push   $0x0
  pushl $181
c01032ed:	68 b5 00 00 00       	push   $0xb5
  jmp __alltraps
c01032f2:	e9 78 03 00 00       	jmp    c010366f <__alltraps>

c01032f7 <vector182>:
.globl vector182
vector182:
  pushl $0
c01032f7:	6a 00                	push   $0x0
  pushl $182
c01032f9:	68 b6 00 00 00       	push   $0xb6
  jmp __alltraps
c01032fe:	e9 6c 03 00 00       	jmp    c010366f <__alltraps>

c0103303 <vector183>:
.globl vector183
vector183:
  pushl $0
c0103303:	6a 00                	push   $0x0
  pushl $183
c0103305:	68 b7 00 00 00       	push   $0xb7
  jmp __alltraps
c010330a:	e9 60 03 00 00       	jmp    c010366f <__alltraps>

c010330f <vector184>:
.globl vector184
vector184:
  pushl $0
c010330f:	6a 00                	push   $0x0
  pushl $184
c0103311:	68 b8 00 00 00       	push   $0xb8
  jmp __alltraps
c0103316:	e9 54 03 00 00       	jmp    c010366f <__alltraps>

c010331b <vector185>:
.globl vector185
vector185:
  pushl $0
c010331b:	6a 00                	push   $0x0
  pushl $185
c010331d:	68 b9 00 00 00       	push   $0xb9
  jmp __alltraps
c0103322:	e9 48 03 00 00       	jmp    c010366f <__alltraps>

c0103327 <vector186>:
.globl vector186
vector186:
  pushl $0
c0103327:	6a 00                	push   $0x0
  pushl $186
c0103329:	68 ba 00 00 00       	push   $0xba
  jmp __alltraps
c010332e:	e9 3c 03 00 00       	jmp    c010366f <__alltraps>

c0103333 <vector187>:
.globl vector187
vector187:
  pushl $0
c0103333:	6a 00                	push   $0x0
  pushl $187
c0103335:	68 bb 00 00 00       	push   $0xbb
  jmp __alltraps
c010333a:	e9 30 03 00 00       	jmp    c010366f <__alltraps>

c010333f <vector188>:
.globl vector188
vector188:
  pushl $0
c010333f:	6a 00                	push   $0x0
  pushl $188
c0103341:	68 bc 00 00 00       	push   $0xbc
  jmp __alltraps
c0103346:	e9 24 03 00 00       	jmp    c010366f <__alltraps>

c010334b <vector189>:
.globl vector189
vector189:
  pushl $0
c010334b:	6a 00                	push   $0x0
  pushl $189
c010334d:	68 bd 00 00 00       	push   $0xbd
  jmp __alltraps
c0103352:	e9 18 03 00 00       	jmp    c010366f <__alltraps>

c0103357 <vector190>:
.globl vector190
vector190:
  pushl $0
c0103357:	6a 00                	push   $0x0
  pushl $190
c0103359:	68 be 00 00 00       	push   $0xbe
  jmp __alltraps
c010335e:	e9 0c 03 00 00       	jmp    c010366f <__alltraps>

c0103363 <vector191>:
.globl vector191
vector191:
  pushl $0
c0103363:	6a 00                	push   $0x0
  pushl $191
c0103365:	68 bf 00 00 00       	push   $0xbf
  jmp __alltraps
c010336a:	e9 00 03 00 00       	jmp    c010366f <__alltraps>

c010336f <vector192>:
.globl vector192
vector192:
  pushl $0
c010336f:	6a 00                	push   $0x0
  pushl $192
c0103371:	68 c0 00 00 00       	push   $0xc0
  jmp __alltraps
c0103376:	e9 f4 02 00 00       	jmp    c010366f <__alltraps>

c010337b <vector193>:
.globl vector193
vector193:
  pushl $0
c010337b:	6a 00                	push   $0x0
  pushl $193
c010337d:	68 c1 00 00 00       	push   $0xc1
  jmp __alltraps
c0103382:	e9 e8 02 00 00       	jmp    c010366f <__alltraps>

c0103387 <vector194>:
.globl vector194
vector194:
  pushl $0
c0103387:	6a 00                	push   $0x0
  pushl $194
c0103389:	68 c2 00 00 00       	push   $0xc2
  jmp __alltraps
c010338e:	e9 dc 02 00 00       	jmp    c010366f <__alltraps>

c0103393 <vector195>:
.globl vector195
vector195:
  pushl $0
c0103393:	6a 00                	push   $0x0
  pushl $195
c0103395:	68 c3 00 00 00       	push   $0xc3
  jmp __alltraps
c010339a:	e9 d0 02 00 00       	jmp    c010366f <__alltraps>

c010339f <vector196>:
.globl vector196
vector196:
  pushl $0
c010339f:	6a 00                	push   $0x0
  pushl $196
c01033a1:	68 c4 00 00 00       	push   $0xc4
  jmp __alltraps
c01033a6:	e9 c4 02 00 00       	jmp    c010366f <__alltraps>

c01033ab <vector197>:
.globl vector197
vector197:
  pushl $0
c01033ab:	6a 00                	push   $0x0
  pushl $197
c01033ad:	68 c5 00 00 00       	push   $0xc5
  jmp __alltraps
c01033b2:	e9 b8 02 00 00       	jmp    c010366f <__alltraps>

c01033b7 <vector198>:
.globl vector198
vector198:
  pushl $0
c01033b7:	6a 00                	push   $0x0
  pushl $198
c01033b9:	68 c6 00 00 00       	push   $0xc6
  jmp __alltraps
c01033be:	e9 ac 02 00 00       	jmp    c010366f <__alltraps>

c01033c3 <vector199>:
.globl vector199
vector199:
  pushl $0
c01033c3:	6a 00                	push   $0x0
  pushl $199
c01033c5:	68 c7 00 00 00       	push   $0xc7
  jmp __alltraps
c01033ca:	e9 a0 02 00 00       	jmp    c010366f <__alltraps>

c01033cf <vector200>:
.globl vector200
vector200:
  pushl $0
c01033cf:	6a 00                	push   $0x0
  pushl $200
c01033d1:	68 c8 00 00 00       	push   $0xc8
  jmp __alltraps
c01033d6:	e9 94 02 00 00       	jmp    c010366f <__alltraps>

c01033db <vector201>:
.globl vector201
vector201:
  pushl $0
c01033db:	6a 00                	push   $0x0
  pushl $201
c01033dd:	68 c9 00 00 00       	push   $0xc9
  jmp __alltraps
c01033e2:	e9 88 02 00 00       	jmp    c010366f <__alltraps>

c01033e7 <vector202>:
.globl vector202
vector202:
  pushl $0
c01033e7:	6a 00                	push   $0x0
  pushl $202
c01033e9:	68 ca 00 00 00       	push   $0xca
  jmp __alltraps
c01033ee:	e9 7c 02 00 00       	jmp    c010366f <__alltraps>

c01033f3 <vector203>:
.globl vector203
vector203:
  pushl $0
c01033f3:	6a 00                	push   $0x0
  pushl $203
c01033f5:	68 cb 00 00 00       	push   $0xcb
  jmp __alltraps
c01033fa:	e9 70 02 00 00       	jmp    c010366f <__alltraps>

c01033ff <vector204>:
.globl vector204
vector204:
  pushl $0
c01033ff:	6a 00                	push   $0x0
  pushl $204
c0103401:	68 cc 00 00 00       	push   $0xcc
  jmp __alltraps
c0103406:	e9 64 02 00 00       	jmp    c010366f <__alltraps>

c010340b <vector205>:
.globl vector205
vector205:
  pushl $0
c010340b:	6a 00                	push   $0x0
  pushl $205
c010340d:	68 cd 00 00 00       	push   $0xcd
  jmp __alltraps
c0103412:	e9 58 02 00 00       	jmp    c010366f <__alltraps>

c0103417 <vector206>:
.globl vector206
vector206:
  pushl $0
c0103417:	6a 00                	push   $0x0
  pushl $206
c0103419:	68 ce 00 00 00       	push   $0xce
  jmp __alltraps
c010341e:	e9 4c 02 00 00       	jmp    c010366f <__alltraps>

c0103423 <vector207>:
.globl vector207
vector207:
  pushl $0
c0103423:	6a 00                	push   $0x0
  pushl $207
c0103425:	68 cf 00 00 00       	push   $0xcf
  jmp __alltraps
c010342a:	e9 40 02 00 00       	jmp    c010366f <__alltraps>

c010342f <vector208>:
.globl vector208
vector208:
  pushl $0
c010342f:	6a 00                	push   $0x0
  pushl $208
c0103431:	68 d0 00 00 00       	push   $0xd0
  jmp __alltraps
c0103436:	e9 34 02 00 00       	jmp    c010366f <__alltraps>

c010343b <vector209>:
.globl vector209
vector209:
  pushl $0
c010343b:	6a 00                	push   $0x0
  pushl $209
c010343d:	68 d1 00 00 00       	push   $0xd1
  jmp __alltraps
c0103442:	e9 28 02 00 00       	jmp    c010366f <__alltraps>

c0103447 <vector210>:
.globl vector210
vector210:
  pushl $0
c0103447:	6a 00                	push   $0x0
  pushl $210
c0103449:	68 d2 00 00 00       	push   $0xd2
  jmp __alltraps
c010344e:	e9 1c 02 00 00       	jmp    c010366f <__alltraps>

c0103453 <vector211>:
.globl vector211
vector211:
  pushl $0
c0103453:	6a 00                	push   $0x0
  pushl $211
c0103455:	68 d3 00 00 00       	push   $0xd3
  jmp __alltraps
c010345a:	e9 10 02 00 00       	jmp    c010366f <__alltraps>

c010345f <vector212>:
.globl vector212
vector212:
  pushl $0
c010345f:	6a 00                	push   $0x0
  pushl $212
c0103461:	68 d4 00 00 00       	push   $0xd4
  jmp __alltraps
c0103466:	e9 04 02 00 00       	jmp    c010366f <__alltraps>

c010346b <vector213>:
.globl vector213
vector213:
  pushl $0
c010346b:	6a 00                	push   $0x0
  pushl $213
c010346d:	68 d5 00 00 00       	push   $0xd5
  jmp __alltraps
c0103472:	e9 f8 01 00 00       	jmp    c010366f <__alltraps>

c0103477 <vector214>:
.globl vector214
vector214:
  pushl $0
c0103477:	6a 00                	push   $0x0
  pushl $214
c0103479:	68 d6 00 00 00       	push   $0xd6
  jmp __alltraps
c010347e:	e9 ec 01 00 00       	jmp    c010366f <__alltraps>

c0103483 <vector215>:
.globl vector215
vector215:
  pushl $0
c0103483:	6a 00                	push   $0x0
  pushl $215
c0103485:	68 d7 00 00 00       	push   $0xd7
  jmp __alltraps
c010348a:	e9 e0 01 00 00       	jmp    c010366f <__alltraps>

c010348f <vector216>:
.globl vector216
vector216:
  pushl $0
c010348f:	6a 00                	push   $0x0
  pushl $216
c0103491:	68 d8 00 00 00       	push   $0xd8
  jmp __alltraps
c0103496:	e9 d4 01 00 00       	jmp    c010366f <__alltraps>

c010349b <vector217>:
.globl vector217
vector217:
  pushl $0
c010349b:	6a 00                	push   $0x0
  pushl $217
c010349d:	68 d9 00 00 00       	push   $0xd9
  jmp __alltraps
c01034a2:	e9 c8 01 00 00       	jmp    c010366f <__alltraps>

c01034a7 <vector218>:
.globl vector218
vector218:
  pushl $0
c01034a7:	6a 00                	push   $0x0
  pushl $218
c01034a9:	68 da 00 00 00       	push   $0xda
  jmp __alltraps
c01034ae:	e9 bc 01 00 00       	jmp    c010366f <__alltraps>

c01034b3 <vector219>:
.globl vector219
vector219:
  pushl $0
c01034b3:	6a 00                	push   $0x0
  pushl $219
c01034b5:	68 db 00 00 00       	push   $0xdb
  jmp __alltraps
c01034ba:	e9 b0 01 00 00       	jmp    c010366f <__alltraps>

c01034bf <vector220>:
.globl vector220
vector220:
  pushl $0
c01034bf:	6a 00                	push   $0x0
  pushl $220
c01034c1:	68 dc 00 00 00       	push   $0xdc
  jmp __alltraps
c01034c6:	e9 a4 01 00 00       	jmp    c010366f <__alltraps>

c01034cb <vector221>:
.globl vector221
vector221:
  pushl $0
c01034cb:	6a 00                	push   $0x0
  pushl $221
c01034cd:	68 dd 00 00 00       	push   $0xdd
  jmp __alltraps
c01034d2:	e9 98 01 00 00       	jmp    c010366f <__alltraps>

c01034d7 <vector222>:
.globl vector222
vector222:
  pushl $0
c01034d7:	6a 00                	push   $0x0
  pushl $222
c01034d9:	68 de 00 00 00       	push   $0xde
  jmp __alltraps
c01034de:	e9 8c 01 00 00       	jmp    c010366f <__alltraps>

c01034e3 <vector223>:
.globl vector223
vector223:
  pushl $0
c01034e3:	6a 00                	push   $0x0
  pushl $223
c01034e5:	68 df 00 00 00       	push   $0xdf
  jmp __alltraps
c01034ea:	e9 80 01 00 00       	jmp    c010366f <__alltraps>

c01034ef <vector224>:
.globl vector224
vector224:
  pushl $0
c01034ef:	6a 00                	push   $0x0
  pushl $224
c01034f1:	68 e0 00 00 00       	push   $0xe0
  jmp __alltraps
c01034f6:	e9 74 01 00 00       	jmp    c010366f <__alltraps>

c01034fb <vector225>:
.globl vector225
vector225:
  pushl $0
c01034fb:	6a 00                	push   $0x0
  pushl $225
c01034fd:	68 e1 00 00 00       	push   $0xe1
  jmp __alltraps
c0103502:	e9 68 01 00 00       	jmp    c010366f <__alltraps>

c0103507 <vector226>:
.globl vector226
vector226:
  pushl $0
c0103507:	6a 00                	push   $0x0
  pushl $226
c0103509:	68 e2 00 00 00       	push   $0xe2
  jmp __alltraps
c010350e:	e9 5c 01 00 00       	jmp    c010366f <__alltraps>

c0103513 <vector227>:
.globl vector227
vector227:
  pushl $0
c0103513:	6a 00                	push   $0x0
  pushl $227
c0103515:	68 e3 00 00 00       	push   $0xe3
  jmp __alltraps
c010351a:	e9 50 01 00 00       	jmp    c010366f <__alltraps>

c010351f <vector228>:
.globl vector228
vector228:
  pushl $0
c010351f:	6a 00                	push   $0x0
  pushl $228
c0103521:	68 e4 00 00 00       	push   $0xe4
  jmp __alltraps
c0103526:	e9 44 01 00 00       	jmp    c010366f <__alltraps>

c010352b <vector229>:
.globl vector229
vector229:
  pushl $0
c010352b:	6a 00                	push   $0x0
  pushl $229
c010352d:	68 e5 00 00 00       	push   $0xe5
  jmp __alltraps
c0103532:	e9 38 01 00 00       	jmp    c010366f <__alltraps>

c0103537 <vector230>:
.globl vector230
vector230:
  pushl $0
c0103537:	6a 00                	push   $0x0
  pushl $230
c0103539:	68 e6 00 00 00       	push   $0xe6
  jmp __alltraps
c010353e:	e9 2c 01 00 00       	jmp    c010366f <__alltraps>

c0103543 <vector231>:
.globl vector231
vector231:
  pushl $0
c0103543:	6a 00                	push   $0x0
  pushl $231
c0103545:	68 e7 00 00 00       	push   $0xe7
  jmp __alltraps
c010354a:	e9 20 01 00 00       	jmp    c010366f <__alltraps>

c010354f <vector232>:
.globl vector232
vector232:
  pushl $0
c010354f:	6a 00                	push   $0x0
  pushl $232
c0103551:	68 e8 00 00 00       	push   $0xe8
  jmp __alltraps
c0103556:	e9 14 01 00 00       	jmp    c010366f <__alltraps>

c010355b <vector233>:
.globl vector233
vector233:
  pushl $0
c010355b:	6a 00                	push   $0x0
  pushl $233
c010355d:	68 e9 00 00 00       	push   $0xe9
  jmp __alltraps
c0103562:	e9 08 01 00 00       	jmp    c010366f <__alltraps>

c0103567 <vector234>:
.globl vector234
vector234:
  pushl $0
c0103567:	6a 00                	push   $0x0
  pushl $234
c0103569:	68 ea 00 00 00       	push   $0xea
  jmp __alltraps
c010356e:	e9 fc 00 00 00       	jmp    c010366f <__alltraps>

c0103573 <vector235>:
.globl vector235
vector235:
  pushl $0
c0103573:	6a 00                	push   $0x0
  pushl $235
c0103575:	68 eb 00 00 00       	push   $0xeb
  jmp __alltraps
c010357a:	e9 f0 00 00 00       	jmp    c010366f <__alltraps>

c010357f <vector236>:
.globl vector236
vector236:
  pushl $0
c010357f:	6a 00                	push   $0x0
  pushl $236
c0103581:	68 ec 00 00 00       	push   $0xec
  jmp __alltraps
c0103586:	e9 e4 00 00 00       	jmp    c010366f <__alltraps>

c010358b <vector237>:
.globl vector237
vector237:
  pushl $0
c010358b:	6a 00                	push   $0x0
  pushl $237
c010358d:	68 ed 00 00 00       	push   $0xed
  jmp __alltraps
c0103592:	e9 d8 00 00 00       	jmp    c010366f <__alltraps>

c0103597 <vector238>:
.globl vector238
vector238:
  pushl $0
c0103597:	6a 00                	push   $0x0
  pushl $238
c0103599:	68 ee 00 00 00       	push   $0xee
  jmp __alltraps
c010359e:	e9 cc 00 00 00       	jmp    c010366f <__alltraps>

c01035a3 <vector239>:
.globl vector239
vector239:
  pushl $0
c01035a3:	6a 00                	push   $0x0
  pushl $239
c01035a5:	68 ef 00 00 00       	push   $0xef
  jmp __alltraps
c01035aa:	e9 c0 00 00 00       	jmp    c010366f <__alltraps>

c01035af <vector240>:
.globl vector240
vector240:
  pushl $0
c01035af:	6a 00                	push   $0x0
  pushl $240
c01035b1:	68 f0 00 00 00       	push   $0xf0
  jmp __alltraps
c01035b6:	e9 b4 00 00 00       	jmp    c010366f <__alltraps>

c01035bb <vector241>:
.globl vector241
vector241:
  pushl $0
c01035bb:	6a 00                	push   $0x0
  pushl $241
c01035bd:	68 f1 00 00 00       	push   $0xf1
  jmp __alltraps
c01035c2:	e9 a8 00 00 00       	jmp    c010366f <__alltraps>

c01035c7 <vector242>:
.globl vector242
vector242:
  pushl $0
c01035c7:	6a 00                	push   $0x0
  pushl $242
c01035c9:	68 f2 00 00 00       	push   $0xf2
  jmp __alltraps
c01035ce:	e9 9c 00 00 00       	jmp    c010366f <__alltraps>

c01035d3 <vector243>:
.globl vector243
vector243:
  pushl $0
c01035d3:	6a 00                	push   $0x0
  pushl $243
c01035d5:	68 f3 00 00 00       	push   $0xf3
  jmp __alltraps
c01035da:	e9 90 00 00 00       	jmp    c010366f <__alltraps>

c01035df <vector244>:
.globl vector244
vector244:
  pushl $0
c01035df:	6a 00                	push   $0x0
  pushl $244
c01035e1:	68 f4 00 00 00       	push   $0xf4
  jmp __alltraps
c01035e6:	e9 84 00 00 00       	jmp    c010366f <__alltraps>

c01035eb <vector245>:
.globl vector245
vector245:
  pushl $0
c01035eb:	6a 00                	push   $0x0
  pushl $245
c01035ed:	68 f5 00 00 00       	push   $0xf5
  jmp __alltraps
c01035f2:	e9 78 00 00 00       	jmp    c010366f <__alltraps>

c01035f7 <vector246>:
.globl vector246
vector246:
  pushl $0
c01035f7:	6a 00                	push   $0x0
  pushl $246
c01035f9:	68 f6 00 00 00       	push   $0xf6
  jmp __alltraps
c01035fe:	e9 6c 00 00 00       	jmp    c010366f <__alltraps>

c0103603 <vector247>:
.globl vector247
vector247:
  pushl $0
c0103603:	6a 00                	push   $0x0
  pushl $247
c0103605:	68 f7 00 00 00       	push   $0xf7
  jmp __alltraps
c010360a:	e9 60 00 00 00       	jmp    c010366f <__alltraps>

c010360f <vector248>:
.globl vector248
vector248:
  pushl $0
c010360f:	6a 00                	push   $0x0
  pushl $248
c0103611:	68 f8 00 00 00       	push   $0xf8
  jmp __alltraps
c0103616:	e9 54 00 00 00       	jmp    c010366f <__alltraps>

c010361b <vector249>:
.globl vector249
vector249:
  pushl $0
c010361b:	6a 00                	push   $0x0
  pushl $249
c010361d:	68 f9 00 00 00       	push   $0xf9
  jmp __alltraps
c0103622:	e9 48 00 00 00       	jmp    c010366f <__alltraps>

c0103627 <vector250>:
.globl vector250
vector250:
  pushl $0
c0103627:	6a 00                	push   $0x0
  pushl $250
c0103629:	68 fa 00 00 00       	push   $0xfa
  jmp __alltraps
c010362e:	e9 3c 00 00 00       	jmp    c010366f <__alltraps>

c0103633 <vector251>:
.globl vector251
vector251:
  pushl $0
c0103633:	6a 00                	push   $0x0
  pushl $251
c0103635:	68 fb 00 00 00       	push   $0xfb
  jmp __alltraps
c010363a:	e9 30 00 00 00       	jmp    c010366f <__alltraps>

c010363f <vector252>:
.globl vector252
vector252:
  pushl $0
c010363f:	6a 00                	push   $0x0
  pushl $252
c0103641:	68 fc 00 00 00       	push   $0xfc
  jmp __alltraps
c0103646:	e9 24 00 00 00       	jmp    c010366f <__alltraps>

c010364b <vector253>:
.globl vector253
vector253:
  pushl $0
c010364b:	6a 00                	push   $0x0
  pushl $253
c010364d:	68 fd 00 00 00       	push   $0xfd
  jmp __alltraps
c0103652:	e9 18 00 00 00       	jmp    c010366f <__alltraps>

c0103657 <vector254>:
.globl vector254
vector254:
  pushl $0
c0103657:	6a 00                	push   $0x0
  pushl $254
c0103659:	68 fe 00 00 00       	push   $0xfe
  jmp __alltraps
c010365e:	e9 0c 00 00 00       	jmp    c010366f <__alltraps>

c0103663 <vector255>:
.globl vector255
vector255:
  pushl $0
c0103663:	6a 00                	push   $0x0
  pushl $255
c0103665:	68 ff 00 00 00       	push   $0xff
  jmp __alltraps
c010366a:	e9 00 00 00 00       	jmp    c010366f <__alltraps>

c010366f <__alltraps>:
.text
.globl __alltraps
__alltraps:
    # push registers to build a trap frame
    # therefore make the stack look like a struct trapframe
    pushl %ds
c010366f:	1e                   	push   %ds
    pushl %es
c0103670:	06                   	push   %es
    pushl %fs
c0103671:	0f a0                	push   %fs
    pushl %gs
c0103673:	0f a8                	push   %gs
    pushal
c0103675:	60                   	pusha  

    # load GD_KDATA into %ds and %es to set up data segments for kernel
    movl $GD_KDATA, %eax
c0103676:	b8 10 00 00 00       	mov    $0x10,%eax
    movw %ax, %ds
c010367b:	8e d8                	mov    %eax,%ds
    movw %ax, %es
c010367d:	8e c0                	mov    %eax,%es

    # push %esp to pass a pointer to the trapframe as an argument to trap()
    pushl %esp
c010367f:	54                   	push   %esp

    # call trap(tf), where tf=%esp
    call trap
c0103680:	e8 e3 f4 ff ff       	call   c0102b68 <trap>

    # pop the pushed stack pointer
    popl %esp
c0103685:	5c                   	pop    %esp

c0103686 <__trapret>:

    # return falls through to trapret...
.globl __trapret
__trapret:
    # restore registers from stack
    popal
c0103686:	61                   	popa   

    # restore %ds, %es, %fs and %gs
    popl %gs
c0103687:	0f a9                	pop    %gs
    popl %fs
c0103689:	0f a1                	pop    %fs
    popl %es
c010368b:	07                   	pop    %es
    popl %ds
c010368c:	1f                   	pop    %ds

    # get rid of the trap number and error code
    addl $0x8, %esp
c010368d:	83 c4 08             	add    $0x8,%esp
    iret
c0103690:	cf                   	iret   

c0103691 <forkrets>:

.globl forkrets
forkrets:
    # set stack to this new process's trapframe
    movl 4(%esp), %esp
c0103691:	8b 64 24 04          	mov    0x4(%esp),%esp
    jmp __trapret
c0103695:	eb ef                	jmp    c0103686 <__trapret>

c0103697 <mm_count>:
bool copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable);
bool copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len);
bool copy_string(struct mm_struct *mm, char *dst, const char *src, size_t maxn);

static inline int
mm_count(struct mm_struct *mm) {
c0103697:	55                   	push   %ebp
c0103698:	89 e5                	mov    %esp,%ebp
    return mm->mm_count;
c010369a:	8b 45 08             	mov    0x8(%ebp),%eax
c010369d:	8b 40 18             	mov    0x18(%eax),%eax
}
c01036a0:	5d                   	pop    %ebp
c01036a1:	c3                   	ret    

c01036a2 <set_mm_count>:

static inline void
set_mm_count(struct mm_struct *mm, int val) {
c01036a2:	55                   	push   %ebp
c01036a3:	89 e5                	mov    %esp,%ebp
    mm->mm_count = val;
c01036a5:	8b 45 08             	mov    0x8(%ebp),%eax
c01036a8:	8b 55 0c             	mov    0xc(%ebp),%edx
c01036ab:	89 50 18             	mov    %edx,0x18(%eax)
}
c01036ae:	90                   	nop
c01036af:	5d                   	pop    %ebp
c01036b0:	c3                   	ret    

c01036b1 <pa2page>:
page2pa(struct Page *page) {
    return page2ppn(page) << PGSHIFT;
}

static inline struct Page *
pa2page(uintptr_t pa) {
c01036b1:	55                   	push   %ebp
c01036b2:	89 e5                	mov    %esp,%ebp
c01036b4:	83 ec 08             	sub    $0x8,%esp
    if (PPN(pa) >= npage) {
c01036b7:	8b 45 08             	mov    0x8(%ebp),%eax
c01036ba:	c1 e8 0c             	shr    $0xc,%eax
c01036bd:	89 c2                	mov    %eax,%edx
c01036bf:	a1 80 1f 15 c0       	mov    0xc0151f80,%eax
c01036c4:	39 c2                	cmp    %eax,%edx
c01036c6:	72 14                	jb     c01036dc <pa2page+0x2b>
        panic("pa2page called with invalid pa");
c01036c8:	83 ec 04             	sub    $0x4,%esp
c01036cb:	68 70 4c 11 c0       	push   $0xc0114c70
c01036d0:	6a 5e                	push   $0x5e
c01036d2:	68 8f 4c 11 c0       	push   $0xc0114c8f
c01036d7:	e8 11 ce ff ff       	call   c01004ed <__panic>
    }
    return &pages[PPN(pa)];
c01036dc:	a1 58 52 15 c0       	mov    0xc0155258,%eax
c01036e1:	8b 55 08             	mov    0x8(%ebp),%edx
c01036e4:	c1 ea 0c             	shr    $0xc,%edx
c01036e7:	c1 e2 05             	shl    $0x5,%edx
c01036ea:	01 d0                	add    %edx,%eax
}
c01036ec:	c9                   	leave  
c01036ed:	c3                   	ret    

c01036ee <pde2page>:
    }
    return pa2page(PTE_ADDR(pte));
}

static inline struct Page *
pde2page(pde_t pde) {
c01036ee:	55                   	push   %ebp
c01036ef:	89 e5                	mov    %esp,%ebp
c01036f1:	83 ec 08             	sub    $0x8,%esp
    return pa2page(PDE_ADDR(pde));
c01036f4:	8b 45 08             	mov    0x8(%ebp),%eax
c01036f7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01036fc:	83 ec 0c             	sub    $0xc,%esp
c01036ff:	50                   	push   %eax
c0103700:	e8 ac ff ff ff       	call   c01036b1 <pa2page>
c0103705:	83 c4 10             	add    $0x10,%esp
}
c0103708:	c9                   	leave  
c0103709:	c3                   	ret    

c010370a <mm_create>:
static void check_vma_struct(void);
static void check_pgfault(void);

// mm_create -  alloc a mm_struct & initialize it.
struct mm_struct *
mm_create(void) {
c010370a:	55                   	push   %ebp
c010370b:	89 e5                	mov    %esp,%ebp
c010370d:	83 ec 18             	sub    $0x18,%esp
    struct mm_struct *mm = kmalloc(sizeof(struct mm_struct));
c0103710:	83 ec 0c             	sub    $0xc,%esp
c0103713:	6a 2c                	push   $0x2c
c0103715:	e8 e8 1b 00 00       	call   c0105302 <kmalloc>
c010371a:	83 c4 10             	add    $0x10,%esp
c010371d:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (mm != NULL) {
c0103720:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0103724:	74 7f                	je     c01037a5 <mm_create+0x9b>
        list_init(&(mm->mmap_list));
c0103726:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103729:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010372c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010372f:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0103732:	89 50 04             	mov    %edx,0x4(%eax)
c0103735:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103738:	8b 50 04             	mov    0x4(%eax),%edx
c010373b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010373e:	89 10                	mov    %edx,(%eax)
        mm->mmap_cache = NULL;
c0103740:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103743:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        mm->pgdir = NULL;
c010374a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010374d:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        mm->map_count = 0;
c0103754:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103757:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)

        if (swap_init_ok) swap_init_mm(mm);
c010375e:	a1 6c 1f 15 c0       	mov    0xc0151f6c,%eax
c0103763:	85 c0                	test   %eax,%eax
c0103765:	74 10                	je     c0103777 <mm_create+0x6d>
c0103767:	83 ec 0c             	sub    $0xc,%esp
c010376a:	ff 75 f4             	pushl  -0xc(%ebp)
c010376d:	e8 0c 1e 00 00       	call   c010557e <swap_init_mm>
c0103772:	83 c4 10             	add    $0x10,%esp
c0103775:	eb 0a                	jmp    c0103781 <mm_create+0x77>
        else mm->sm_priv = NULL;
c0103777:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010377a:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
        
        set_mm_count(mm, 0);
c0103781:	83 ec 08             	sub    $0x8,%esp
c0103784:	6a 00                	push   $0x0
c0103786:	ff 75 f4             	pushl  -0xc(%ebp)
c0103789:	e8 14 ff ff ff       	call   c01036a2 <set_mm_count>
c010378e:	83 c4 10             	add    $0x10,%esp
        sem_init(&(mm->mm_sem), 1);
c0103791:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103794:	83 c0 1c             	add    $0x1c,%eax
c0103797:	83 ec 08             	sub    $0x8,%esp
c010379a:	6a 01                	push   $0x1
c010379c:	50                   	push   %eax
c010379d:	e8 82 5e 00 00       	call   c0109624 <sem_init>
c01037a2:	83 c4 10             	add    $0x10,%esp
    }    
    return mm;
c01037a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01037a8:	c9                   	leave  
c01037a9:	c3                   	ret    

c01037aa <vma_create>:

// vma_create - alloc a vma_struct & initialize it. (addr range: vm_start~vm_end)
struct vma_struct *
vma_create(uintptr_t vm_start, uintptr_t vm_end, uint32_t vm_flags) {
c01037aa:	55                   	push   %ebp
c01037ab:	89 e5                	mov    %esp,%ebp
c01037ad:	83 ec 18             	sub    $0x18,%esp
    struct vma_struct *vma = kmalloc(sizeof(struct vma_struct));
c01037b0:	83 ec 0c             	sub    $0xc,%esp
c01037b3:	6a 18                	push   $0x18
c01037b5:	e8 48 1b 00 00       	call   c0105302 <kmalloc>
c01037ba:	83 c4 10             	add    $0x10,%esp
c01037bd:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (vma != NULL) {
c01037c0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01037c4:	74 1b                	je     c01037e1 <vma_create+0x37>
        vma->vm_start = vm_start;
c01037c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01037c9:	8b 55 08             	mov    0x8(%ebp),%edx
c01037cc:	89 50 04             	mov    %edx,0x4(%eax)
        vma->vm_end = vm_end;
c01037cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01037d2:	8b 55 0c             	mov    0xc(%ebp),%edx
c01037d5:	89 50 08             	mov    %edx,0x8(%eax)
        vma->vm_flags = vm_flags;
c01037d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01037db:	8b 55 10             	mov    0x10(%ebp),%edx
c01037de:	89 50 0c             	mov    %edx,0xc(%eax)
    }
    return vma;
c01037e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01037e4:	c9                   	leave  
c01037e5:	c3                   	ret    

c01037e6 <find_vma>:


// find_vma - find a vma  (vma->vm_start <= addr <= vma_vm_end)
struct vma_struct *
find_vma(struct mm_struct *mm, uintptr_t addr) {
c01037e6:	55                   	push   %ebp
c01037e7:	89 e5                	mov    %esp,%ebp
c01037e9:	83 ec 20             	sub    $0x20,%esp
    struct vma_struct *vma = NULL;
c01037ec:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    if (mm != NULL) {
c01037f3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01037f7:	0f 84 95 00 00 00    	je     c0103892 <find_vma+0xac>
        vma = mm->mmap_cache;
c01037fd:	8b 45 08             	mov    0x8(%ebp),%eax
c0103800:	8b 40 08             	mov    0x8(%eax),%eax
c0103803:	89 45 fc             	mov    %eax,-0x4(%ebp)
        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
c0103806:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c010380a:	74 16                	je     c0103822 <find_vma+0x3c>
c010380c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010380f:	8b 40 04             	mov    0x4(%eax),%eax
c0103812:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0103815:	77 0b                	ja     c0103822 <find_vma+0x3c>
c0103817:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010381a:	8b 40 08             	mov    0x8(%eax),%eax
c010381d:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0103820:	77 61                	ja     c0103883 <find_vma+0x9d>
                bool found = 0;
c0103822:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
                list_entry_t *list = &(mm->mmap_list), *le = list;
c0103829:	8b 45 08             	mov    0x8(%ebp),%eax
c010382c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010382f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103832:	89 45 f4             	mov    %eax,-0xc(%ebp)
                while ((le = list_next(le)) != list) {
c0103835:	eb 28                	jmp    c010385f <find_vma+0x79>
                    vma = le2vma(le, list_link);
c0103837:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010383a:	83 e8 10             	sub    $0x10,%eax
c010383d:	89 45 fc             	mov    %eax,-0x4(%ebp)
                    if (vma->vm_start<=addr && addr < vma->vm_end) {
c0103840:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103843:	8b 40 04             	mov    0x4(%eax),%eax
c0103846:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0103849:	77 14                	ja     c010385f <find_vma+0x79>
c010384b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010384e:	8b 40 08             	mov    0x8(%eax),%eax
c0103851:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0103854:	76 09                	jbe    c010385f <find_vma+0x79>
                        found = 1;
c0103856:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
                        break;
c010385d:	eb 17                	jmp    c0103876 <find_vma+0x90>
c010385f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103862:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0103865:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103868:	8b 40 04             	mov    0x4(%eax),%eax
    if (mm != NULL) {
        vma = mm->mmap_cache;
        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
                bool found = 0;
                list_entry_t *list = &(mm->mmap_list), *le = list;
                while ((le = list_next(le)) != list) {
c010386b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010386e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103871:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0103874:	75 c1                	jne    c0103837 <find_vma+0x51>
                    if (vma->vm_start<=addr && addr < vma->vm_end) {
                        found = 1;
                        break;
                    }
                }
                if (!found) {
c0103876:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
c010387a:	75 07                	jne    c0103883 <find_vma+0x9d>
                    vma = NULL;
c010387c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
                }
        }
        if (vma != NULL) {
c0103883:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0103887:	74 09                	je     c0103892 <find_vma+0xac>
            mm->mmap_cache = vma;
c0103889:	8b 45 08             	mov    0x8(%ebp),%eax
c010388c:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010388f:	89 50 08             	mov    %edx,0x8(%eax)
        }
    }
    return vma;
c0103892:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0103895:	c9                   	leave  
c0103896:	c3                   	ret    

c0103897 <check_vma_overlap>:


// check_vma_overlap - check if vma1 overlaps vma2 ?
static inline void
check_vma_overlap(struct vma_struct *prev, struct vma_struct *next) {
c0103897:	55                   	push   %ebp
c0103898:	89 e5                	mov    %esp,%ebp
c010389a:	83 ec 08             	sub    $0x8,%esp
    assert(prev->vm_start < prev->vm_end);
c010389d:	8b 45 08             	mov    0x8(%ebp),%eax
c01038a0:	8b 50 04             	mov    0x4(%eax),%edx
c01038a3:	8b 45 08             	mov    0x8(%ebp),%eax
c01038a6:	8b 40 08             	mov    0x8(%eax),%eax
c01038a9:	39 c2                	cmp    %eax,%edx
c01038ab:	72 16                	jb     c01038c3 <check_vma_overlap+0x2c>
c01038ad:	68 9d 4c 11 c0       	push   $0xc0114c9d
c01038b2:	68 bb 4c 11 c0       	push   $0xc0114cbb
c01038b7:	6a 6b                	push   $0x6b
c01038b9:	68 d0 4c 11 c0       	push   $0xc0114cd0
c01038be:	e8 2a cc ff ff       	call   c01004ed <__panic>
    assert(prev->vm_end <= next->vm_start);
c01038c3:	8b 45 08             	mov    0x8(%ebp),%eax
c01038c6:	8b 50 08             	mov    0x8(%eax),%edx
c01038c9:	8b 45 0c             	mov    0xc(%ebp),%eax
c01038cc:	8b 40 04             	mov    0x4(%eax),%eax
c01038cf:	39 c2                	cmp    %eax,%edx
c01038d1:	76 16                	jbe    c01038e9 <check_vma_overlap+0x52>
c01038d3:	68 e0 4c 11 c0       	push   $0xc0114ce0
c01038d8:	68 bb 4c 11 c0       	push   $0xc0114cbb
c01038dd:	6a 6c                	push   $0x6c
c01038df:	68 d0 4c 11 c0       	push   $0xc0114cd0
c01038e4:	e8 04 cc ff ff       	call   c01004ed <__panic>
    assert(next->vm_start < next->vm_end);
c01038e9:	8b 45 0c             	mov    0xc(%ebp),%eax
c01038ec:	8b 50 04             	mov    0x4(%eax),%edx
c01038ef:	8b 45 0c             	mov    0xc(%ebp),%eax
c01038f2:	8b 40 08             	mov    0x8(%eax),%eax
c01038f5:	39 c2                	cmp    %eax,%edx
c01038f7:	72 16                	jb     c010390f <check_vma_overlap+0x78>
c01038f9:	68 ff 4c 11 c0       	push   $0xc0114cff
c01038fe:	68 bb 4c 11 c0       	push   $0xc0114cbb
c0103903:	6a 6d                	push   $0x6d
c0103905:	68 d0 4c 11 c0       	push   $0xc0114cd0
c010390a:	e8 de cb ff ff       	call   c01004ed <__panic>
}
c010390f:	90                   	nop
c0103910:	c9                   	leave  
c0103911:	c3                   	ret    

c0103912 <insert_vma_struct>:


// insert_vma_struct -insert vma in mm's list link
void
insert_vma_struct(struct mm_struct *mm, struct vma_struct *vma) {
c0103912:	55                   	push   %ebp
c0103913:	89 e5                	mov    %esp,%ebp
c0103915:	83 ec 38             	sub    $0x38,%esp
    assert(vma->vm_start < vma->vm_end);
c0103918:	8b 45 0c             	mov    0xc(%ebp),%eax
c010391b:	8b 50 04             	mov    0x4(%eax),%edx
c010391e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103921:	8b 40 08             	mov    0x8(%eax),%eax
c0103924:	39 c2                	cmp    %eax,%edx
c0103926:	72 16                	jb     c010393e <insert_vma_struct+0x2c>
c0103928:	68 1d 4d 11 c0       	push   $0xc0114d1d
c010392d:	68 bb 4c 11 c0       	push   $0xc0114cbb
c0103932:	6a 74                	push   $0x74
c0103934:	68 d0 4c 11 c0       	push   $0xc0114cd0
c0103939:	e8 af cb ff ff       	call   c01004ed <__panic>
    list_entry_t *list = &(mm->mmap_list);
c010393e:	8b 45 08             	mov    0x8(%ebp),%eax
c0103941:	89 45 ec             	mov    %eax,-0x14(%ebp)
    list_entry_t *le_prev = list, *le_next;
c0103944:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103947:	89 45 f4             	mov    %eax,-0xc(%ebp)

        list_entry_t *le = list;
c010394a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010394d:	89 45 f0             	mov    %eax,-0x10(%ebp)
        while ((le = list_next(le)) != list) {
c0103950:	eb 1f                	jmp    c0103971 <insert_vma_struct+0x5f>
            struct vma_struct *mmap_prev = le2vma(le, list_link);
c0103952:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103955:	83 e8 10             	sub    $0x10,%eax
c0103958:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            if (mmap_prev->vm_start > vma->vm_start) {
c010395b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010395e:	8b 50 04             	mov    0x4(%eax),%edx
c0103961:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103964:	8b 40 04             	mov    0x4(%eax),%eax
c0103967:	39 c2                	cmp    %eax,%edx
c0103969:	77 1f                	ja     c010398a <insert_vma_struct+0x78>
                break;
            }
            le_prev = le;
c010396b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010396e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103971:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103974:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0103977:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010397a:	8b 40 04             	mov    0x4(%eax),%eax
    assert(vma->vm_start < vma->vm_end);
    list_entry_t *list = &(mm->mmap_list);
    list_entry_t *le_prev = list, *le_next;

        list_entry_t *le = list;
        while ((le = list_next(le)) != list) {
c010397d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103980:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103983:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0103986:	75 ca                	jne    c0103952 <insert_vma_struct+0x40>
c0103988:	eb 01                	jmp    c010398b <insert_vma_struct+0x79>
            struct vma_struct *mmap_prev = le2vma(le, list_link);
            if (mmap_prev->vm_start > vma->vm_start) {
                break;
c010398a:	90                   	nop
c010398b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010398e:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0103991:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103994:	8b 40 04             	mov    0x4(%eax),%eax
            }
            le_prev = le;
        }

    le_next = list_next(le_prev);
c0103997:	89 45 dc             	mov    %eax,-0x24(%ebp)

    /* check overlap */
    if (le_prev != list) {
c010399a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010399d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01039a0:	74 15                	je     c01039b7 <insert_vma_struct+0xa5>
        check_vma_overlap(le2vma(le_prev, list_link), vma);
c01039a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01039a5:	83 e8 10             	sub    $0x10,%eax
c01039a8:	83 ec 08             	sub    $0x8,%esp
c01039ab:	ff 75 0c             	pushl  0xc(%ebp)
c01039ae:	50                   	push   %eax
c01039af:	e8 e3 fe ff ff       	call   c0103897 <check_vma_overlap>
c01039b4:	83 c4 10             	add    $0x10,%esp
    }
    if (le_next != list) {
c01039b7:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01039ba:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01039bd:	74 15                	je     c01039d4 <insert_vma_struct+0xc2>
        check_vma_overlap(vma, le2vma(le_next, list_link));
c01039bf:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01039c2:	83 e8 10             	sub    $0x10,%eax
c01039c5:	83 ec 08             	sub    $0x8,%esp
c01039c8:	50                   	push   %eax
c01039c9:	ff 75 0c             	pushl  0xc(%ebp)
c01039cc:	e8 c6 fe ff ff       	call   c0103897 <check_vma_overlap>
c01039d1:	83 c4 10             	add    $0x10,%esp
    }

    vma->vm_mm = mm;
c01039d4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01039d7:	8b 55 08             	mov    0x8(%ebp),%edx
c01039da:	89 10                	mov    %edx,(%eax)
    list_add_after(le_prev, &(vma->list_link));
c01039dc:	8b 45 0c             	mov    0xc(%ebp),%eax
c01039df:	8d 50 10             	lea    0x10(%eax),%edx
c01039e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01039e5:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01039e8:	89 55 d4             	mov    %edx,-0x2c(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c01039eb:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01039ee:	8b 40 04             	mov    0x4(%eax),%eax
c01039f1:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01039f4:	89 55 d0             	mov    %edx,-0x30(%ebp)
c01039f7:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01039fa:	89 55 cc             	mov    %edx,-0x34(%ebp)
c01039fd:	89 45 c8             	mov    %eax,-0x38(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0103a00:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0103a03:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0103a06:	89 10                	mov    %edx,(%eax)
c0103a08:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0103a0b:	8b 10                	mov    (%eax),%edx
c0103a0d:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0103a10:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0103a13:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0103a16:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0103a19:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0103a1c:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0103a1f:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0103a22:	89 10                	mov    %edx,(%eax)

    mm->map_count ++;
c0103a24:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a27:	8b 40 10             	mov    0x10(%eax),%eax
c0103a2a:	8d 50 01             	lea    0x1(%eax),%edx
c0103a2d:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a30:	89 50 10             	mov    %edx,0x10(%eax)
}
c0103a33:	90                   	nop
c0103a34:	c9                   	leave  
c0103a35:	c3                   	ret    

c0103a36 <mm_destroy>:

// mm_destroy - free mm and mm internal fields
void
mm_destroy(struct mm_struct *mm) {
c0103a36:	55                   	push   %ebp
c0103a37:	89 e5                	mov    %esp,%ebp
c0103a39:	83 ec 28             	sub    $0x28,%esp
    assert(mm_count(mm) == 0);
c0103a3c:	ff 75 08             	pushl  0x8(%ebp)
c0103a3f:	e8 53 fc ff ff       	call   c0103697 <mm_count>
c0103a44:	83 c4 04             	add    $0x4,%esp
c0103a47:	85 c0                	test   %eax,%eax
c0103a49:	74 19                	je     c0103a64 <mm_destroy+0x2e>
c0103a4b:	68 39 4d 11 c0       	push   $0xc0114d39
c0103a50:	68 bb 4c 11 c0       	push   $0xc0114cbb
c0103a55:	68 94 00 00 00       	push   $0x94
c0103a5a:	68 d0 4c 11 c0       	push   $0xc0114cd0
c0103a5f:	e8 89 ca ff ff       	call   c01004ed <__panic>

    list_entry_t *list = &(mm->mmap_list), *le;
c0103a64:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a67:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(list)) != list) {
c0103a6a:	eb 3a                	jmp    c0103aa6 <mm_destroy+0x70>
c0103a6c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103a6f:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0103a72:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103a75:	8b 40 04             	mov    0x4(%eax),%eax
c0103a78:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0103a7b:	8b 12                	mov    (%edx),%edx
c0103a7d:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0103a80:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0103a83:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103a86:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0103a89:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0103a8c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103a8f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0103a92:	89 10                	mov    %edx,(%eax)
        list_del(le);
        kfree(le2vma(le, list_link));  //kfree vma        
c0103a94:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103a97:	83 e8 10             	sub    $0x10,%eax
c0103a9a:	83 ec 0c             	sub    $0xc,%esp
c0103a9d:	50                   	push   %eax
c0103a9e:	e8 77 18 00 00       	call   c010531a <kfree>
c0103aa3:	83 c4 10             	add    $0x10,%esp
c0103aa6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103aa9:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0103aac:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103aaf:	8b 40 04             	mov    0x4(%eax),%eax
void
mm_destroy(struct mm_struct *mm) {
    assert(mm_count(mm) == 0);

    list_entry_t *list = &(mm->mmap_list), *le;
    while ((le = list_next(list)) != list) {
c0103ab2:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103ab5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103ab8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103abb:	75 af                	jne    c0103a6c <mm_destroy+0x36>
        list_del(le);
        kfree(le2vma(le, list_link));  //kfree vma        
    }
    kfree(mm); //kfree mm
c0103abd:	83 ec 0c             	sub    $0xc,%esp
c0103ac0:	ff 75 08             	pushl  0x8(%ebp)
c0103ac3:	e8 52 18 00 00       	call   c010531a <kfree>
c0103ac8:	83 c4 10             	add    $0x10,%esp
    mm=NULL;
c0103acb:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
}
c0103ad2:	90                   	nop
c0103ad3:	c9                   	leave  
c0103ad4:	c3                   	ret    

c0103ad5 <mm_map>:

int
mm_map(struct mm_struct *mm, uintptr_t addr, size_t len, uint32_t vm_flags,
       struct vma_struct **vma_store) {
c0103ad5:	55                   	push   %ebp
c0103ad6:	89 e5                	mov    %esp,%ebp
c0103ad8:	83 ec 28             	sub    $0x28,%esp
    uintptr_t start = ROUNDDOWN(addr, PGSIZE), end = ROUNDUP(addr + len, PGSIZE);
c0103adb:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103ade:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103ae1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103ae4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0103ae9:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0103aec:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
c0103af3:	8b 55 0c             	mov    0xc(%ebp),%edx
c0103af6:	8b 45 10             	mov    0x10(%ebp),%eax
c0103af9:	01 c2                	add    %eax,%edx
c0103afb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103afe:	01 d0                	add    %edx,%eax
c0103b00:	83 e8 01             	sub    $0x1,%eax
c0103b03:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0103b06:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103b09:	ba 00 00 00 00       	mov    $0x0,%edx
c0103b0e:	f7 75 e8             	divl   -0x18(%ebp)
c0103b11:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103b14:	29 d0                	sub    %edx,%eax
c0103b16:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if (!USER_ACCESS(start, end)) {
c0103b19:	81 7d ec ff ff 1f 00 	cmpl   $0x1fffff,-0x14(%ebp)
c0103b20:	76 11                	jbe    c0103b33 <mm_map+0x5e>
c0103b22:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103b25:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0103b28:	73 09                	jae    c0103b33 <mm_map+0x5e>
c0103b2a:	81 7d e0 00 00 00 b0 	cmpl   $0xb0000000,-0x20(%ebp)
c0103b31:	76 0a                	jbe    c0103b3d <mm_map+0x68>
        return -E_INVAL;
c0103b33:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0103b38:	e9 9e 00 00 00       	jmp    c0103bdb <mm_map+0x106>
    }

    assert(mm != NULL);
c0103b3d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0103b41:	75 19                	jne    c0103b5c <mm_map+0x87>
c0103b43:	68 4b 4d 11 c0       	push   $0xc0114d4b
c0103b48:	68 bb 4c 11 c0       	push   $0xc0114cbb
c0103b4d:	68 a7 00 00 00       	push   $0xa7
c0103b52:	68 d0 4c 11 c0       	push   $0xc0114cd0
c0103b57:	e8 91 c9 ff ff       	call   c01004ed <__panic>

    int ret = -E_INVAL;
c0103b5c:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)

    struct vma_struct *vma;
    if ((vma = find_vma(mm, start)) != NULL && end > vma->vm_start) {
c0103b63:	83 ec 08             	sub    $0x8,%esp
c0103b66:	ff 75 ec             	pushl  -0x14(%ebp)
c0103b69:	ff 75 08             	pushl  0x8(%ebp)
c0103b6c:	e8 75 fc ff ff       	call   c01037e6 <find_vma>
c0103b71:	83 c4 10             	add    $0x10,%esp
c0103b74:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0103b77:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0103b7b:	74 0b                	je     c0103b88 <mm_map+0xb3>
c0103b7d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103b80:	8b 40 04             	mov    0x4(%eax),%eax
c0103b83:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0103b86:	72 4c                	jb     c0103bd4 <mm_map+0xff>
        goto out;
    }
    ret = -E_NO_MEM;
c0103b88:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    if ((vma = vma_create(start, end, vm_flags)) == NULL) {
c0103b8f:	83 ec 04             	sub    $0x4,%esp
c0103b92:	ff 75 14             	pushl  0x14(%ebp)
c0103b95:	ff 75 e0             	pushl  -0x20(%ebp)
c0103b98:	ff 75 ec             	pushl  -0x14(%ebp)
c0103b9b:	e8 0a fc ff ff       	call   c01037aa <vma_create>
c0103ba0:	83 c4 10             	add    $0x10,%esp
c0103ba3:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0103ba6:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0103baa:	74 2b                	je     c0103bd7 <mm_map+0x102>
        goto out;
    }
    insert_vma_struct(mm, vma);
c0103bac:	83 ec 08             	sub    $0x8,%esp
c0103baf:	ff 75 dc             	pushl  -0x24(%ebp)
c0103bb2:	ff 75 08             	pushl  0x8(%ebp)
c0103bb5:	e8 58 fd ff ff       	call   c0103912 <insert_vma_struct>
c0103bba:	83 c4 10             	add    $0x10,%esp
    if (vma_store != NULL) {
c0103bbd:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0103bc1:	74 08                	je     c0103bcb <mm_map+0xf6>
        *vma_store = vma;
c0103bc3:	8b 45 18             	mov    0x18(%ebp),%eax
c0103bc6:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0103bc9:	89 10                	mov    %edx,(%eax)
    }
    ret = 0;
c0103bcb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0103bd2:	eb 04                	jmp    c0103bd8 <mm_map+0x103>

    int ret = -E_INVAL;

    struct vma_struct *vma;
    if ((vma = find_vma(mm, start)) != NULL && end > vma->vm_start) {
        goto out;
c0103bd4:	90                   	nop
c0103bd5:	eb 01                	jmp    c0103bd8 <mm_map+0x103>
    }
    ret = -E_NO_MEM;

    if ((vma = vma_create(start, end, vm_flags)) == NULL) {
        goto out;
c0103bd7:	90                   	nop
        *vma_store = vma;
    }
    ret = 0;

out:
    return ret;
c0103bd8:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0103bdb:	c9                   	leave  
c0103bdc:	c3                   	ret    

c0103bdd <dup_mmap>:

int
dup_mmap(struct mm_struct *to, struct mm_struct *from) {
c0103bdd:	55                   	push   %ebp
c0103bde:	89 e5                	mov    %esp,%ebp
c0103be0:	53                   	push   %ebx
c0103be1:	83 ec 24             	sub    $0x24,%esp
    assert(to != NULL && from != NULL);
c0103be4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0103be8:	74 06                	je     c0103bf0 <dup_mmap+0x13>
c0103bea:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0103bee:	75 19                	jne    c0103c09 <dup_mmap+0x2c>
c0103bf0:	68 56 4d 11 c0       	push   $0xc0114d56
c0103bf5:	68 bb 4c 11 c0       	push   $0xc0114cbb
c0103bfa:	68 c0 00 00 00       	push   $0xc0
c0103bff:	68 d0 4c 11 c0       	push   $0xc0114cd0
c0103c04:	e8 e4 c8 ff ff       	call   c01004ed <__panic>
    list_entry_t *list = &(from->mmap_list), *le = list;
c0103c09:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103c0c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103c0f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103c12:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_prev(le)) != list) {
c0103c15:	e9 86 00 00 00       	jmp    c0103ca0 <dup_mmap+0xc3>
        struct vma_struct *vma, *nvma;
        vma = le2vma(le, list_link);
c0103c1a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103c1d:	83 e8 10             	sub    $0x10,%eax
c0103c20:	89 45 ec             	mov    %eax,-0x14(%ebp)
        nvma = vma_create(vma->vm_start, vma->vm_end, vma->vm_flags);
c0103c23:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103c26:	8b 48 0c             	mov    0xc(%eax),%ecx
c0103c29:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103c2c:	8b 50 08             	mov    0x8(%eax),%edx
c0103c2f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103c32:	8b 40 04             	mov    0x4(%eax),%eax
c0103c35:	83 ec 04             	sub    $0x4,%esp
c0103c38:	51                   	push   %ecx
c0103c39:	52                   	push   %edx
c0103c3a:	50                   	push   %eax
c0103c3b:	e8 6a fb ff ff       	call   c01037aa <vma_create>
c0103c40:	83 c4 10             	add    $0x10,%esp
c0103c43:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (nvma == NULL) {
c0103c46:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0103c4a:	75 07                	jne    c0103c53 <dup_mmap+0x76>
            return -E_NO_MEM;
c0103c4c:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0103c51:	eb 6c                	jmp    c0103cbf <dup_mmap+0xe2>
        }

        insert_vma_struct(to, nvma);
c0103c53:	83 ec 08             	sub    $0x8,%esp
c0103c56:	ff 75 e8             	pushl  -0x18(%ebp)
c0103c59:	ff 75 08             	pushl  0x8(%ebp)
c0103c5c:	e8 b1 fc ff ff       	call   c0103912 <insert_vma_struct>
c0103c61:	83 c4 10             	add    $0x10,%esp

        bool share = 0;
c0103c64:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
c0103c6b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103c6e:	8b 58 08             	mov    0x8(%eax),%ebx
c0103c71:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103c74:	8b 48 04             	mov    0x4(%eax),%ecx
c0103c77:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103c7a:	8b 50 0c             	mov    0xc(%eax),%edx
c0103c7d:	8b 45 08             	mov    0x8(%ebp),%eax
c0103c80:	8b 40 0c             	mov    0xc(%eax),%eax
c0103c83:	83 ec 0c             	sub    $0xc,%esp
c0103c86:	ff 75 e4             	pushl  -0x1c(%ebp)
c0103c89:	53                   	push   %ebx
c0103c8a:	51                   	push   %ecx
c0103c8b:	52                   	push   %edx
c0103c8c:	50                   	push   %eax
c0103c8d:	e8 d3 3f 00 00       	call   c0107c65 <copy_range>
c0103c92:	83 c4 20             	add    $0x20,%esp
c0103c95:	85 c0                	test   %eax,%eax
c0103c97:	74 07                	je     c0103ca0 <dup_mmap+0xc3>
            return -E_NO_MEM;
c0103c99:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0103c9e:	eb 1f                	jmp    c0103cbf <dup_mmap+0xe2>
c0103ca0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103ca3:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c0103ca6:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103ca9:	8b 00                	mov    (%eax),%eax

int
dup_mmap(struct mm_struct *to, struct mm_struct *from) {
    assert(to != NULL && from != NULL);
    list_entry_t *list = &(from->mmap_list), *le = list;
    while ((le = list_prev(le)) != list) {
c0103cab:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103cae:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103cb1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0103cb4:	0f 85 60 ff ff ff    	jne    c0103c1a <dup_mmap+0x3d>
        bool share = 0;
        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
            return -E_NO_MEM;
        }
    }
    return 0;
c0103cba:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0103cbf:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0103cc2:	c9                   	leave  
c0103cc3:	c3                   	ret    

c0103cc4 <exit_mmap>:

void
exit_mmap(struct mm_struct *mm) {
c0103cc4:	55                   	push   %ebp
c0103cc5:	89 e5                	mov    %esp,%ebp
c0103cc7:	83 ec 28             	sub    $0x28,%esp
    assert(mm != NULL && mm_count(mm) == 0);
c0103cca:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0103cce:	74 0f                	je     c0103cdf <exit_mmap+0x1b>
c0103cd0:	ff 75 08             	pushl  0x8(%ebp)
c0103cd3:	e8 bf f9 ff ff       	call   c0103697 <mm_count>
c0103cd8:	83 c4 04             	add    $0x4,%esp
c0103cdb:	85 c0                	test   %eax,%eax
c0103cdd:	74 19                	je     c0103cf8 <exit_mmap+0x34>
c0103cdf:	68 74 4d 11 c0       	push   $0xc0114d74
c0103ce4:	68 bb 4c 11 c0       	push   $0xc0114cbb
c0103ce9:	68 d6 00 00 00       	push   $0xd6
c0103cee:	68 d0 4c 11 c0       	push   $0xc0114cd0
c0103cf3:	e8 f5 c7 ff ff       	call   c01004ed <__panic>
    pde_t *pgdir = mm->pgdir;
c0103cf8:	8b 45 08             	mov    0x8(%ebp),%eax
c0103cfb:	8b 40 0c             	mov    0xc(%eax),%eax
c0103cfe:	89 45 f0             	mov    %eax,-0x10(%ebp)
    list_entry_t *list = &(mm->mmap_list), *le = list;
c0103d01:	8b 45 08             	mov    0x8(%ebp),%eax
c0103d04:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0103d07:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103d0a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c0103d0d:	eb 25                	jmp    c0103d34 <exit_mmap+0x70>
        struct vma_struct *vma = le2vma(le, list_link);
c0103d0f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103d12:	83 e8 10             	sub    $0x10,%eax
c0103d15:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
c0103d18:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103d1b:	8b 50 08             	mov    0x8(%eax),%edx
c0103d1e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103d21:	8b 40 04             	mov    0x4(%eax),%eax
c0103d24:	83 ec 04             	sub    $0x4,%esp
c0103d27:	52                   	push   %edx
c0103d28:	50                   	push   %eax
c0103d29:	ff 75 f0             	pushl  -0x10(%ebp)
c0103d2c:	e8 6d 3d 00 00       	call   c0107a9e <unmap_range>
c0103d31:	83 c4 10             	add    $0x10,%esp
c0103d34:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103d37:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0103d3a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103d3d:	8b 40 04             	mov    0x4(%eax),%eax
void
exit_mmap(struct mm_struct *mm) {
    assert(mm != NULL && mm_count(mm) == 0);
    pde_t *pgdir = mm->pgdir;
    list_entry_t *list = &(mm->mmap_list), *le = list;
    while ((le = list_next(le)) != list) {
c0103d40:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103d43:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103d46:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0103d49:	75 c4                	jne    c0103d0f <exit_mmap+0x4b>
        struct vma_struct *vma = le2vma(le, list_link);
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
    }
    while ((le = list_next(le)) != list) {
c0103d4b:	eb 25                	jmp    c0103d72 <exit_mmap+0xae>
        struct vma_struct *vma = le2vma(le, list_link);
c0103d4d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103d50:	83 e8 10             	sub    $0x10,%eax
c0103d53:	89 45 e0             	mov    %eax,-0x20(%ebp)
        exit_range(pgdir, vma->vm_start, vma->vm_end);
c0103d56:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103d59:	8b 50 08             	mov    0x8(%eax),%edx
c0103d5c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103d5f:	8b 40 04             	mov    0x4(%eax),%eax
c0103d62:	83 ec 04             	sub    $0x4,%esp
c0103d65:	52                   	push   %edx
c0103d66:	50                   	push   %eax
c0103d67:	ff 75 f0             	pushl  -0x10(%ebp)
c0103d6a:	e8 02 3e 00 00       	call   c0107b71 <exit_range>
c0103d6f:	83 c4 10             	add    $0x10,%esp
c0103d72:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103d75:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0103d78:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103d7b:	8b 40 04             	mov    0x4(%eax),%eax
    list_entry_t *list = &(mm->mmap_list), *le = list;
    while ((le = list_next(le)) != list) {
        struct vma_struct *vma = le2vma(le, list_link);
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
    }
    while ((le = list_next(le)) != list) {
c0103d7e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103d81:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103d84:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0103d87:	75 c4                	jne    c0103d4d <exit_mmap+0x89>
        struct vma_struct *vma = le2vma(le, list_link);
        exit_range(pgdir, vma->vm_start, vma->vm_end);
    }
}
c0103d89:	90                   	nop
c0103d8a:	c9                   	leave  
c0103d8b:	c3                   	ret    

c0103d8c <copy_from_user>:

bool
copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable) {
c0103d8c:	55                   	push   %ebp
c0103d8d:	89 e5                	mov    %esp,%ebp
c0103d8f:	83 ec 08             	sub    $0x8,%esp
    if (!user_mem_check(mm, (uintptr_t)src, len, writable)) {
c0103d92:	8b 45 10             	mov    0x10(%ebp),%eax
c0103d95:	ff 75 18             	pushl  0x18(%ebp)
c0103d98:	ff 75 14             	pushl  0x14(%ebp)
c0103d9b:	50                   	push   %eax
c0103d9c:	ff 75 08             	pushl  0x8(%ebp)
c0103d9f:	e8 b1 08 00 00       	call   c0104655 <user_mem_check>
c0103da4:	83 c4 10             	add    $0x10,%esp
c0103da7:	85 c0                	test   %eax,%eax
c0103da9:	75 07                	jne    c0103db2 <copy_from_user+0x26>
        return 0;
c0103dab:	b8 00 00 00 00       	mov    $0x0,%eax
c0103db0:	eb 19                	jmp    c0103dcb <copy_from_user+0x3f>
    }
    memcpy(dst, src, len);
c0103db2:	83 ec 04             	sub    $0x4,%esp
c0103db5:	ff 75 14             	pushl  0x14(%ebp)
c0103db8:	ff 75 10             	pushl  0x10(%ebp)
c0103dbb:	ff 75 0c             	pushl  0xc(%ebp)
c0103dbe:	e8 82 fd 00 00       	call   c0113b45 <memcpy>
c0103dc3:	83 c4 10             	add    $0x10,%esp
    return 1;
c0103dc6:	b8 01 00 00 00       	mov    $0x1,%eax
}
c0103dcb:	c9                   	leave  
c0103dcc:	c3                   	ret    

c0103dcd <copy_to_user>:

bool
copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len) {
c0103dcd:	55                   	push   %ebp
c0103dce:	89 e5                	mov    %esp,%ebp
c0103dd0:	83 ec 08             	sub    $0x8,%esp
    if (!user_mem_check(mm, (uintptr_t)dst, len, 1)) {
c0103dd3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103dd6:	6a 01                	push   $0x1
c0103dd8:	ff 75 14             	pushl  0x14(%ebp)
c0103ddb:	50                   	push   %eax
c0103ddc:	ff 75 08             	pushl  0x8(%ebp)
c0103ddf:	e8 71 08 00 00       	call   c0104655 <user_mem_check>
c0103de4:	83 c4 10             	add    $0x10,%esp
c0103de7:	85 c0                	test   %eax,%eax
c0103de9:	75 07                	jne    c0103df2 <copy_to_user+0x25>
        return 0;
c0103deb:	b8 00 00 00 00       	mov    $0x0,%eax
c0103df0:	eb 19                	jmp    c0103e0b <copy_to_user+0x3e>
    }
    memcpy(dst, src, len);
c0103df2:	83 ec 04             	sub    $0x4,%esp
c0103df5:	ff 75 14             	pushl  0x14(%ebp)
c0103df8:	ff 75 10             	pushl  0x10(%ebp)
c0103dfb:	ff 75 0c             	pushl  0xc(%ebp)
c0103dfe:	e8 42 fd 00 00       	call   c0113b45 <memcpy>
c0103e03:	83 c4 10             	add    $0x10,%esp
    return 1;
c0103e06:	b8 01 00 00 00       	mov    $0x1,%eax
}
c0103e0b:	c9                   	leave  
c0103e0c:	c3                   	ret    

c0103e0d <vmm_init>:

// vmm_init - initialize virtual memory management
//          - now just call check_vmm to check correctness of vmm
void
vmm_init(void) {
c0103e0d:	55                   	push   %ebp
c0103e0e:	89 e5                	mov    %esp,%ebp
c0103e10:	83 ec 08             	sub    $0x8,%esp
    check_vmm();
c0103e13:	e8 03 00 00 00       	call   c0103e1b <check_vmm>
}
c0103e18:	90                   	nop
c0103e19:	c9                   	leave  
c0103e1a:	c3                   	ret    

c0103e1b <check_vmm>:

// check_vmm - check correctness of vmm
static void
check_vmm(void) {
c0103e1b:	55                   	push   %ebp
c0103e1c:	89 e5                	mov    %esp,%ebp
c0103e1e:	83 ec 18             	sub    $0x18,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0103e21:	e8 a7 34 00 00       	call   c01072cd <nr_free_pages>
c0103e26:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    check_vma_struct();
c0103e29:	e8 18 00 00 00       	call   c0103e46 <check_vma_struct>
    check_pgfault();
c0103e2e:	e8 10 04 00 00       	call   c0104243 <check_pgfault>

    cprintf("check_vmm() succeeded.\n");
c0103e33:	83 ec 0c             	sub    $0xc,%esp
c0103e36:	68 94 4d 11 c0       	push   $0xc0114d94
c0103e3b:	e8 47 c5 ff ff       	call   c0100387 <cprintf>
c0103e40:	83 c4 10             	add    $0x10,%esp
}
c0103e43:	90                   	nop
c0103e44:	c9                   	leave  
c0103e45:	c3                   	ret    

c0103e46 <check_vma_struct>:

static void
check_vma_struct(void) {
c0103e46:	55                   	push   %ebp
c0103e47:	89 e5                	mov    %esp,%ebp
c0103e49:	83 ec 58             	sub    $0x58,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0103e4c:	e8 7c 34 00 00       	call   c01072cd <nr_free_pages>
c0103e51:	89 45 ec             	mov    %eax,-0x14(%ebp)

    struct mm_struct *mm = mm_create();
c0103e54:	e8 b1 f8 ff ff       	call   c010370a <mm_create>
c0103e59:	89 45 e8             	mov    %eax,-0x18(%ebp)
    assert(mm != NULL);
c0103e5c:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0103e60:	75 19                	jne    c0103e7b <check_vma_struct+0x35>
c0103e62:	68 4b 4d 11 c0       	push   $0xc0114d4b
c0103e67:	68 bb 4c 11 c0       	push   $0xc0114cbb
c0103e6c:	68 0c 01 00 00       	push   $0x10c
c0103e71:	68 d0 4c 11 c0       	push   $0xc0114cd0
c0103e76:	e8 72 c6 ff ff       	call   c01004ed <__panic>

    int step1 = 10, step2 = step1 * 10;
c0103e7b:	c7 45 e4 0a 00 00 00 	movl   $0xa,-0x1c(%ebp)
c0103e82:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0103e85:	89 d0                	mov    %edx,%eax
c0103e87:	c1 e0 02             	shl    $0x2,%eax
c0103e8a:	01 d0                	add    %edx,%eax
c0103e8c:	01 c0                	add    %eax,%eax
c0103e8e:	89 45 e0             	mov    %eax,-0x20(%ebp)

    int i;
    for (i = step1; i >= 1; i --) {
c0103e91:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103e94:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103e97:	eb 5f                	jmp    c0103ef8 <check_vma_struct+0xb2>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c0103e99:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0103e9c:	89 d0                	mov    %edx,%eax
c0103e9e:	c1 e0 02             	shl    $0x2,%eax
c0103ea1:	01 d0                	add    %edx,%eax
c0103ea3:	83 c0 02             	add    $0x2,%eax
c0103ea6:	89 c1                	mov    %eax,%ecx
c0103ea8:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0103eab:	89 d0                	mov    %edx,%eax
c0103ead:	c1 e0 02             	shl    $0x2,%eax
c0103eb0:	01 d0                	add    %edx,%eax
c0103eb2:	83 ec 04             	sub    $0x4,%esp
c0103eb5:	6a 00                	push   $0x0
c0103eb7:	51                   	push   %ecx
c0103eb8:	50                   	push   %eax
c0103eb9:	e8 ec f8 ff ff       	call   c01037aa <vma_create>
c0103ebe:	83 c4 10             	add    $0x10,%esp
c0103ec1:	89 45 dc             	mov    %eax,-0x24(%ebp)
        assert(vma != NULL);
c0103ec4:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0103ec8:	75 19                	jne    c0103ee3 <check_vma_struct+0x9d>
c0103eca:	68 ac 4d 11 c0       	push   $0xc0114dac
c0103ecf:	68 bb 4c 11 c0       	push   $0xc0114cbb
c0103ed4:	68 13 01 00 00       	push   $0x113
c0103ed9:	68 d0 4c 11 c0       	push   $0xc0114cd0
c0103ede:	e8 0a c6 ff ff       	call   c01004ed <__panic>
        insert_vma_struct(mm, vma);
c0103ee3:	83 ec 08             	sub    $0x8,%esp
c0103ee6:	ff 75 dc             	pushl  -0x24(%ebp)
c0103ee9:	ff 75 e8             	pushl  -0x18(%ebp)
c0103eec:	e8 21 fa ff ff       	call   c0103912 <insert_vma_struct>
c0103ef1:	83 c4 10             	add    $0x10,%esp
    assert(mm != NULL);

    int step1 = 10, step2 = step1 * 10;

    int i;
    for (i = step1; i >= 1; i --) {
c0103ef4:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0103ef8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0103efc:	7f 9b                	jg     c0103e99 <check_vma_struct+0x53>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    for (i = step1 + 1; i <= step2; i ++) {
c0103efe:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103f01:	83 c0 01             	add    $0x1,%eax
c0103f04:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103f07:	eb 5f                	jmp    c0103f68 <check_vma_struct+0x122>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c0103f09:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0103f0c:	89 d0                	mov    %edx,%eax
c0103f0e:	c1 e0 02             	shl    $0x2,%eax
c0103f11:	01 d0                	add    %edx,%eax
c0103f13:	83 c0 02             	add    $0x2,%eax
c0103f16:	89 c1                	mov    %eax,%ecx
c0103f18:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0103f1b:	89 d0                	mov    %edx,%eax
c0103f1d:	c1 e0 02             	shl    $0x2,%eax
c0103f20:	01 d0                	add    %edx,%eax
c0103f22:	83 ec 04             	sub    $0x4,%esp
c0103f25:	6a 00                	push   $0x0
c0103f27:	51                   	push   %ecx
c0103f28:	50                   	push   %eax
c0103f29:	e8 7c f8 ff ff       	call   c01037aa <vma_create>
c0103f2e:	83 c4 10             	add    $0x10,%esp
c0103f31:	89 45 d8             	mov    %eax,-0x28(%ebp)
        assert(vma != NULL);
c0103f34:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c0103f38:	75 19                	jne    c0103f53 <check_vma_struct+0x10d>
c0103f3a:	68 ac 4d 11 c0       	push   $0xc0114dac
c0103f3f:	68 bb 4c 11 c0       	push   $0xc0114cbb
c0103f44:	68 19 01 00 00       	push   $0x119
c0103f49:	68 d0 4c 11 c0       	push   $0xc0114cd0
c0103f4e:	e8 9a c5 ff ff       	call   c01004ed <__panic>
        insert_vma_struct(mm, vma);
c0103f53:	83 ec 08             	sub    $0x8,%esp
c0103f56:	ff 75 d8             	pushl  -0x28(%ebp)
c0103f59:	ff 75 e8             	pushl  -0x18(%ebp)
c0103f5c:	e8 b1 f9 ff ff       	call   c0103912 <insert_vma_struct>
c0103f61:	83 c4 10             	add    $0x10,%esp
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    for (i = step1 + 1; i <= step2; i ++) {
c0103f64:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0103f68:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103f6b:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0103f6e:	7e 99                	jle    c0103f09 <check_vma_struct+0xc3>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    list_entry_t *le = list_next(&(mm->mmap_list));
c0103f70:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103f73:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c0103f76:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0103f79:	8b 40 04             	mov    0x4(%eax),%eax
c0103f7c:	89 45 f0             	mov    %eax,-0x10(%ebp)

    for (i = 1; i <= step2; i ++) {
c0103f7f:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
c0103f86:	e9 81 00 00 00       	jmp    c010400c <check_vma_struct+0x1c6>
        assert(le != &(mm->mmap_list));
c0103f8b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103f8e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0103f91:	75 19                	jne    c0103fac <check_vma_struct+0x166>
c0103f93:	68 b8 4d 11 c0       	push   $0xc0114db8
c0103f98:	68 bb 4c 11 c0       	push   $0xc0114cbb
c0103f9d:	68 20 01 00 00       	push   $0x120
c0103fa2:	68 d0 4c 11 c0       	push   $0xc0114cd0
c0103fa7:	e8 41 c5 ff ff       	call   c01004ed <__panic>
        struct vma_struct *mmap = le2vma(le, list_link);
c0103fac:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103faf:	83 e8 10             	sub    $0x10,%eax
c0103fb2:	89 45 d0             	mov    %eax,-0x30(%ebp)
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
c0103fb5:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0103fb8:	8b 48 04             	mov    0x4(%eax),%ecx
c0103fbb:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0103fbe:	89 d0                	mov    %edx,%eax
c0103fc0:	c1 e0 02             	shl    $0x2,%eax
c0103fc3:	01 d0                	add    %edx,%eax
c0103fc5:	39 c1                	cmp    %eax,%ecx
c0103fc7:	75 17                	jne    c0103fe0 <check_vma_struct+0x19a>
c0103fc9:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0103fcc:	8b 48 08             	mov    0x8(%eax),%ecx
c0103fcf:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0103fd2:	89 d0                	mov    %edx,%eax
c0103fd4:	c1 e0 02             	shl    $0x2,%eax
c0103fd7:	01 d0                	add    %edx,%eax
c0103fd9:	83 c0 02             	add    $0x2,%eax
c0103fdc:	39 c1                	cmp    %eax,%ecx
c0103fde:	74 19                	je     c0103ff9 <check_vma_struct+0x1b3>
c0103fe0:	68 d0 4d 11 c0       	push   $0xc0114dd0
c0103fe5:	68 bb 4c 11 c0       	push   $0xc0114cbb
c0103fea:	68 22 01 00 00       	push   $0x122
c0103fef:	68 d0 4c 11 c0       	push   $0xc0114cd0
c0103ff4:	e8 f4 c4 ff ff       	call   c01004ed <__panic>
c0103ff9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103ffc:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c0103fff:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0104002:	8b 40 04             	mov    0x4(%eax),%eax
        le = list_next(le);
c0104005:	89 45 f0             	mov    %eax,-0x10(%ebp)
        insert_vma_struct(mm, vma);
    }

    list_entry_t *le = list_next(&(mm->mmap_list));

    for (i = 1; i <= step2; i ++) {
c0104008:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010400c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010400f:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0104012:	0f 8e 73 ff ff ff    	jle    c0103f8b <check_vma_struct+0x145>
        struct vma_struct *mmap = le2vma(le, list_link);
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
        le = list_next(le);
    }

    for (i = 5; i <= 5 * step2; i +=5) {
c0104018:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
c010401f:	e9 80 01 00 00       	jmp    c01041a4 <check_vma_struct+0x35e>
        struct vma_struct *vma1 = find_vma(mm, i);
c0104024:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104027:	83 ec 08             	sub    $0x8,%esp
c010402a:	50                   	push   %eax
c010402b:	ff 75 e8             	pushl  -0x18(%ebp)
c010402e:	e8 b3 f7 ff ff       	call   c01037e6 <find_vma>
c0104033:	83 c4 10             	add    $0x10,%esp
c0104036:	89 45 cc             	mov    %eax,-0x34(%ebp)
        assert(vma1 != NULL);
c0104039:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c010403d:	75 19                	jne    c0104058 <check_vma_struct+0x212>
c010403f:	68 05 4e 11 c0       	push   $0xc0114e05
c0104044:	68 bb 4c 11 c0       	push   $0xc0114cbb
c0104049:	68 28 01 00 00       	push   $0x128
c010404e:	68 d0 4c 11 c0       	push   $0xc0114cd0
c0104053:	e8 95 c4 ff ff       	call   c01004ed <__panic>
        struct vma_struct *vma2 = find_vma(mm, i+1);
c0104058:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010405b:	83 c0 01             	add    $0x1,%eax
c010405e:	83 ec 08             	sub    $0x8,%esp
c0104061:	50                   	push   %eax
c0104062:	ff 75 e8             	pushl  -0x18(%ebp)
c0104065:	e8 7c f7 ff ff       	call   c01037e6 <find_vma>
c010406a:	83 c4 10             	add    $0x10,%esp
c010406d:	89 45 c8             	mov    %eax,-0x38(%ebp)
        assert(vma2 != NULL);
c0104070:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c0104074:	75 19                	jne    c010408f <check_vma_struct+0x249>
c0104076:	68 12 4e 11 c0       	push   $0xc0114e12
c010407b:	68 bb 4c 11 c0       	push   $0xc0114cbb
c0104080:	68 2a 01 00 00       	push   $0x12a
c0104085:	68 d0 4c 11 c0       	push   $0xc0114cd0
c010408a:	e8 5e c4 ff ff       	call   c01004ed <__panic>
        struct vma_struct *vma3 = find_vma(mm, i+2);
c010408f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104092:	83 c0 02             	add    $0x2,%eax
c0104095:	83 ec 08             	sub    $0x8,%esp
c0104098:	50                   	push   %eax
c0104099:	ff 75 e8             	pushl  -0x18(%ebp)
c010409c:	e8 45 f7 ff ff       	call   c01037e6 <find_vma>
c01040a1:	83 c4 10             	add    $0x10,%esp
c01040a4:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        assert(vma3 == NULL);
c01040a7:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
c01040ab:	74 19                	je     c01040c6 <check_vma_struct+0x280>
c01040ad:	68 1f 4e 11 c0       	push   $0xc0114e1f
c01040b2:	68 bb 4c 11 c0       	push   $0xc0114cbb
c01040b7:	68 2c 01 00 00       	push   $0x12c
c01040bc:	68 d0 4c 11 c0       	push   $0xc0114cd0
c01040c1:	e8 27 c4 ff ff       	call   c01004ed <__panic>
        struct vma_struct *vma4 = find_vma(mm, i+3);
c01040c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01040c9:	83 c0 03             	add    $0x3,%eax
c01040cc:	83 ec 08             	sub    $0x8,%esp
c01040cf:	50                   	push   %eax
c01040d0:	ff 75 e8             	pushl  -0x18(%ebp)
c01040d3:	e8 0e f7 ff ff       	call   c01037e6 <find_vma>
c01040d8:	83 c4 10             	add    $0x10,%esp
c01040db:	89 45 c0             	mov    %eax,-0x40(%ebp)
        assert(vma4 == NULL);
c01040de:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
c01040e2:	74 19                	je     c01040fd <check_vma_struct+0x2b7>
c01040e4:	68 2c 4e 11 c0       	push   $0xc0114e2c
c01040e9:	68 bb 4c 11 c0       	push   $0xc0114cbb
c01040ee:	68 2e 01 00 00       	push   $0x12e
c01040f3:	68 d0 4c 11 c0       	push   $0xc0114cd0
c01040f8:	e8 f0 c3 ff ff       	call   c01004ed <__panic>
        struct vma_struct *vma5 = find_vma(mm, i+4);
c01040fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104100:	83 c0 04             	add    $0x4,%eax
c0104103:	83 ec 08             	sub    $0x8,%esp
c0104106:	50                   	push   %eax
c0104107:	ff 75 e8             	pushl  -0x18(%ebp)
c010410a:	e8 d7 f6 ff ff       	call   c01037e6 <find_vma>
c010410f:	83 c4 10             	add    $0x10,%esp
c0104112:	89 45 bc             	mov    %eax,-0x44(%ebp)
        assert(vma5 == NULL);
c0104115:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0104119:	74 19                	je     c0104134 <check_vma_struct+0x2ee>
c010411b:	68 39 4e 11 c0       	push   $0xc0114e39
c0104120:	68 bb 4c 11 c0       	push   $0xc0114cbb
c0104125:	68 30 01 00 00       	push   $0x130
c010412a:	68 d0 4c 11 c0       	push   $0xc0114cd0
c010412f:	e8 b9 c3 ff ff       	call   c01004ed <__panic>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
c0104134:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0104137:	8b 50 04             	mov    0x4(%eax),%edx
c010413a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010413d:	39 c2                	cmp    %eax,%edx
c010413f:	75 10                	jne    c0104151 <check_vma_struct+0x30b>
c0104141:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0104144:	8b 40 08             	mov    0x8(%eax),%eax
c0104147:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010414a:	83 c2 02             	add    $0x2,%edx
c010414d:	39 d0                	cmp    %edx,%eax
c010414f:	74 19                	je     c010416a <check_vma_struct+0x324>
c0104151:	68 48 4e 11 c0       	push   $0xc0114e48
c0104156:	68 bb 4c 11 c0       	push   $0xc0114cbb
c010415b:	68 32 01 00 00       	push   $0x132
c0104160:	68 d0 4c 11 c0       	push   $0xc0114cd0
c0104165:	e8 83 c3 ff ff       	call   c01004ed <__panic>
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
c010416a:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010416d:	8b 50 04             	mov    0x4(%eax),%edx
c0104170:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104173:	39 c2                	cmp    %eax,%edx
c0104175:	75 10                	jne    c0104187 <check_vma_struct+0x341>
c0104177:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010417a:	8b 40 08             	mov    0x8(%eax),%eax
c010417d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0104180:	83 c2 02             	add    $0x2,%edx
c0104183:	39 d0                	cmp    %edx,%eax
c0104185:	74 19                	je     c01041a0 <check_vma_struct+0x35a>
c0104187:	68 78 4e 11 c0       	push   $0xc0114e78
c010418c:	68 bb 4c 11 c0       	push   $0xc0114cbb
c0104191:	68 33 01 00 00       	push   $0x133
c0104196:	68 d0 4c 11 c0       	push   $0xc0114cd0
c010419b:	e8 4d c3 ff ff       	call   c01004ed <__panic>
        struct vma_struct *mmap = le2vma(le, list_link);
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
        le = list_next(le);
    }

    for (i = 5; i <= 5 * step2; i +=5) {
c01041a0:	83 45 f4 05          	addl   $0x5,-0xc(%ebp)
c01041a4:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01041a7:	89 d0                	mov    %edx,%eax
c01041a9:	c1 e0 02             	shl    $0x2,%eax
c01041ac:	01 d0                	add    %edx,%eax
c01041ae:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01041b1:	0f 8d 6d fe ff ff    	jge    c0104024 <check_vma_struct+0x1de>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
    }

    for (i =4; i>=0; i--) {
c01041b7:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%ebp)
c01041be:	eb 5c                	jmp    c010421c <check_vma_struct+0x3d6>
        struct vma_struct *vma_below_5= find_vma(mm,i);
c01041c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01041c3:	83 ec 08             	sub    $0x8,%esp
c01041c6:	50                   	push   %eax
c01041c7:	ff 75 e8             	pushl  -0x18(%ebp)
c01041ca:	e8 17 f6 ff ff       	call   c01037e6 <find_vma>
c01041cf:	83 c4 10             	add    $0x10,%esp
c01041d2:	89 45 b8             	mov    %eax,-0x48(%ebp)
        if (vma_below_5 != NULL ) {
c01041d5:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
c01041d9:	74 1e                	je     c01041f9 <check_vma_struct+0x3b3>
           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
c01041db:	8b 45 b8             	mov    -0x48(%ebp),%eax
c01041de:	8b 50 08             	mov    0x8(%eax),%edx
c01041e1:	8b 45 b8             	mov    -0x48(%ebp),%eax
c01041e4:	8b 40 04             	mov    0x4(%eax),%eax
c01041e7:	52                   	push   %edx
c01041e8:	50                   	push   %eax
c01041e9:	ff 75 f4             	pushl  -0xc(%ebp)
c01041ec:	68 a8 4e 11 c0       	push   $0xc0114ea8
c01041f1:	e8 91 c1 ff ff       	call   c0100387 <cprintf>
c01041f6:	83 c4 10             	add    $0x10,%esp
        }
        assert(vma_below_5 == NULL);
c01041f9:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
c01041fd:	74 19                	je     c0104218 <check_vma_struct+0x3d2>
c01041ff:	68 cd 4e 11 c0       	push   $0xc0114ecd
c0104204:	68 bb 4c 11 c0       	push   $0xc0114cbb
c0104209:	68 3b 01 00 00       	push   $0x13b
c010420e:	68 d0 4c 11 c0       	push   $0xc0114cd0
c0104213:	e8 d5 c2 ff ff       	call   c01004ed <__panic>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
    }

    for (i =4; i>=0; i--) {
c0104218:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c010421c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104220:	79 9e                	jns    c01041c0 <check_vma_struct+0x37a>
           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
        }
        assert(vma_below_5 == NULL);
    }

    mm_destroy(mm);
c0104222:	83 ec 0c             	sub    $0xc,%esp
c0104225:	ff 75 e8             	pushl  -0x18(%ebp)
c0104228:	e8 09 f8 ff ff       	call   c0103a36 <mm_destroy>
c010422d:	83 c4 10             	add    $0x10,%esp

    cprintf("check_vma_struct() succeeded!\n");
c0104230:	83 ec 0c             	sub    $0xc,%esp
c0104233:	68 e4 4e 11 c0       	push   $0xc0114ee4
c0104238:	e8 4a c1 ff ff       	call   c0100387 <cprintf>
c010423d:	83 c4 10             	add    $0x10,%esp
}
c0104240:	90                   	nop
c0104241:	c9                   	leave  
c0104242:	c3                   	ret    

c0104243 <check_pgfault>:

struct mm_struct *check_mm_struct;

// check_pgfault - check correctness of pgfault handler
static void
check_pgfault(void) {
c0104243:	55                   	push   %ebp
c0104244:	89 e5                	mov    %esp,%ebp
c0104246:	83 ec 28             	sub    $0x28,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0104249:	e8 7f 30 00 00       	call   c01072cd <nr_free_pages>
c010424e:	89 45 ec             	mov    %eax,-0x14(%ebp)

    check_mm_struct = mm_create();
c0104251:	e8 b4 f4 ff ff       	call   c010370a <mm_create>
c0104256:	a3 70 51 15 c0       	mov    %eax,0xc0155170
    assert(check_mm_struct != NULL);
c010425b:	a1 70 51 15 c0       	mov    0xc0155170,%eax
c0104260:	85 c0                	test   %eax,%eax
c0104262:	75 19                	jne    c010427d <check_pgfault+0x3a>
c0104264:	68 03 4f 11 c0       	push   $0xc0114f03
c0104269:	68 bb 4c 11 c0       	push   $0xc0114cbb
c010426e:	68 4b 01 00 00       	push   $0x14b
c0104273:	68 d0 4c 11 c0       	push   $0xc0114cd0
c0104278:	e8 70 c2 ff ff       	call   c01004ed <__panic>

    struct mm_struct *mm = check_mm_struct;
c010427d:	a1 70 51 15 c0       	mov    0xc0155170,%eax
c0104282:	89 45 e8             	mov    %eax,-0x18(%ebp)
    pde_t *pgdir = mm->pgdir = boot_pgdir;
c0104285:	8b 15 20 ea 14 c0    	mov    0xc014ea20,%edx
c010428b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010428e:	89 50 0c             	mov    %edx,0xc(%eax)
c0104291:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104294:	8b 40 0c             	mov    0xc(%eax),%eax
c0104297:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(pgdir[0] == 0);
c010429a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010429d:	8b 00                	mov    (%eax),%eax
c010429f:	85 c0                	test   %eax,%eax
c01042a1:	74 19                	je     c01042bc <check_pgfault+0x79>
c01042a3:	68 1b 4f 11 c0       	push   $0xc0114f1b
c01042a8:	68 bb 4c 11 c0       	push   $0xc0114cbb
c01042ad:	68 4f 01 00 00       	push   $0x14f
c01042b2:	68 d0 4c 11 c0       	push   $0xc0114cd0
c01042b7:	e8 31 c2 ff ff       	call   c01004ed <__panic>

    struct vma_struct *vma = vma_create(0, PTSIZE, VM_WRITE);
c01042bc:	83 ec 04             	sub    $0x4,%esp
c01042bf:	6a 02                	push   $0x2
c01042c1:	68 00 00 40 00       	push   $0x400000
c01042c6:	6a 00                	push   $0x0
c01042c8:	e8 dd f4 ff ff       	call   c01037aa <vma_create>
c01042cd:	83 c4 10             	add    $0x10,%esp
c01042d0:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(vma != NULL);
c01042d3:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01042d7:	75 19                	jne    c01042f2 <check_pgfault+0xaf>
c01042d9:	68 ac 4d 11 c0       	push   $0xc0114dac
c01042de:	68 bb 4c 11 c0       	push   $0xc0114cbb
c01042e3:	68 52 01 00 00       	push   $0x152
c01042e8:	68 d0 4c 11 c0       	push   $0xc0114cd0
c01042ed:	e8 fb c1 ff ff       	call   c01004ed <__panic>

    insert_vma_struct(mm, vma);
c01042f2:	83 ec 08             	sub    $0x8,%esp
c01042f5:	ff 75 e0             	pushl  -0x20(%ebp)
c01042f8:	ff 75 e8             	pushl  -0x18(%ebp)
c01042fb:	e8 12 f6 ff ff       	call   c0103912 <insert_vma_struct>
c0104300:	83 c4 10             	add    $0x10,%esp

    uintptr_t addr = 0x100;
c0104303:	c7 45 dc 00 01 00 00 	movl   $0x100,-0x24(%ebp)
    assert(find_vma(mm, addr) == vma);
c010430a:	83 ec 08             	sub    $0x8,%esp
c010430d:	ff 75 dc             	pushl  -0x24(%ebp)
c0104310:	ff 75 e8             	pushl  -0x18(%ebp)
c0104313:	e8 ce f4 ff ff       	call   c01037e6 <find_vma>
c0104318:	83 c4 10             	add    $0x10,%esp
c010431b:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c010431e:	74 19                	je     c0104339 <check_pgfault+0xf6>
c0104320:	68 29 4f 11 c0       	push   $0xc0114f29
c0104325:	68 bb 4c 11 c0       	push   $0xc0114cbb
c010432a:	68 57 01 00 00       	push   $0x157
c010432f:	68 d0 4c 11 c0       	push   $0xc0114cd0
c0104334:	e8 b4 c1 ff ff       	call   c01004ed <__panic>

    int i, sum = 0;
c0104339:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    for (i = 0; i < 100; i ++) {
c0104340:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0104347:	eb 19                	jmp    c0104362 <check_pgfault+0x11f>
        *(char *)(addr + i) = i;
c0104349:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010434c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010434f:	01 d0                	add    %edx,%eax
c0104351:	89 c2                	mov    %eax,%edx
c0104353:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104356:	88 02                	mov    %al,(%edx)
        sum += i;
c0104358:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010435b:	01 45 f0             	add    %eax,-0x10(%ebp)

    uintptr_t addr = 0x100;
    assert(find_vma(mm, addr) == vma);

    int i, sum = 0;
    for (i = 0; i < 100; i ++) {
c010435e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0104362:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c0104366:	7e e1                	jle    c0104349 <check_pgfault+0x106>
        *(char *)(addr + i) = i;
        sum += i;
    }
    for (i = 0; i < 100; i ++) {
c0104368:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010436f:	eb 15                	jmp    c0104386 <check_pgfault+0x143>
        sum -= *(char *)(addr + i);
c0104371:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0104374:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104377:	01 d0                	add    %edx,%eax
c0104379:	0f b6 00             	movzbl (%eax),%eax
c010437c:	0f be c0             	movsbl %al,%eax
c010437f:	29 45 f0             	sub    %eax,-0x10(%ebp)
    int i, sum = 0;
    for (i = 0; i < 100; i ++) {
        *(char *)(addr + i) = i;
        sum += i;
    }
    for (i = 0; i < 100; i ++) {
c0104382:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0104386:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c010438a:	7e e5                	jle    c0104371 <check_pgfault+0x12e>
        sum -= *(char *)(addr + i);
    }
    assert(sum == 0);
c010438c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0104390:	74 19                	je     c01043ab <check_pgfault+0x168>
c0104392:	68 43 4f 11 c0       	push   $0xc0114f43
c0104397:	68 bb 4c 11 c0       	push   $0xc0114cbb
c010439c:	68 61 01 00 00       	push   $0x161
c01043a1:	68 d0 4c 11 c0       	push   $0xc0114cd0
c01043a6:	e8 42 c1 ff ff       	call   c01004ed <__panic>

    page_remove(pgdir, ROUNDDOWN(addr, PGSIZE));
c01043ab:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01043ae:	89 45 d8             	mov    %eax,-0x28(%ebp)
c01043b1:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01043b4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01043b9:	83 ec 08             	sub    $0x8,%esp
c01043bc:	50                   	push   %eax
c01043bd:	ff 75 e4             	pushl  -0x1c(%ebp)
c01043c0:	e8 7b 3a 00 00       	call   c0107e40 <page_remove>
c01043c5:	83 c4 10             	add    $0x10,%esp
    free_page(pde2page(pgdir[0]));
c01043c8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01043cb:	8b 00                	mov    (%eax),%eax
c01043cd:	83 ec 0c             	sub    $0xc,%esp
c01043d0:	50                   	push   %eax
c01043d1:	e8 18 f3 ff ff       	call   c01036ee <pde2page>
c01043d6:	83 c4 10             	add    $0x10,%esp
c01043d9:	83 ec 08             	sub    $0x8,%esp
c01043dc:	6a 01                	push   $0x1
c01043de:	50                   	push   %eax
c01043df:	e8 b4 2e 00 00       	call   c0107298 <free_pages>
c01043e4:	83 c4 10             	add    $0x10,%esp
    pgdir[0] = 0;
c01043e7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01043ea:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    mm->pgdir = NULL;
c01043f0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01043f3:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
    mm_destroy(mm);
c01043fa:	83 ec 0c             	sub    $0xc,%esp
c01043fd:	ff 75 e8             	pushl  -0x18(%ebp)
c0104400:	e8 31 f6 ff ff       	call   c0103a36 <mm_destroy>
c0104405:	83 c4 10             	add    $0x10,%esp
    check_mm_struct = NULL;
c0104408:	c7 05 70 51 15 c0 00 	movl   $0x0,0xc0155170
c010440f:	00 00 00 

    assert(nr_free_pages_store == nr_free_pages());
c0104412:	e8 b6 2e 00 00       	call   c01072cd <nr_free_pages>
c0104417:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010441a:	74 19                	je     c0104435 <check_pgfault+0x1f2>
c010441c:	68 4c 4f 11 c0       	push   $0xc0114f4c
c0104421:	68 bb 4c 11 c0       	push   $0xc0114cbb
c0104426:	68 6b 01 00 00       	push   $0x16b
c010442b:	68 d0 4c 11 c0       	push   $0xc0114cd0
c0104430:	e8 b8 c0 ff ff       	call   c01004ed <__panic>

    cprintf("check_pgfault() succeeded!\n");
c0104435:	83 ec 0c             	sub    $0xc,%esp
c0104438:	68 73 4f 11 c0       	push   $0xc0114f73
c010443d:	e8 45 bf ff ff       	call   c0100387 <cprintf>
c0104442:	83 c4 10             	add    $0x10,%esp
}
c0104445:	90                   	nop
c0104446:	c9                   	leave  
c0104447:	c3                   	ret    

c0104448 <do_pgfault>:
 *            was a read (0) or write (1).
 *         -- The U/S flag (bit 2) indicates whether the processor was executing at user mode (1)
 *            or supervisor mode (0) at the time of the exception.
 */
int
do_pgfault(struct mm_struct *mm, uint32_t error_code, uintptr_t addr) {
c0104448:	55                   	push   %ebp
c0104449:	89 e5                	mov    %esp,%ebp
c010444b:	83 ec 28             	sub    $0x28,%esp
    int ret = -E_INVAL;
c010444e:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
    //try to find a vma which include addr
    struct vma_struct *vma = find_vma(mm, addr);
c0104455:	ff 75 10             	pushl  0x10(%ebp)
c0104458:	ff 75 08             	pushl  0x8(%ebp)
c010445b:	e8 86 f3 ff ff       	call   c01037e6 <find_vma>
c0104460:	83 c4 08             	add    $0x8,%esp
c0104463:	89 45 ec             	mov    %eax,-0x14(%ebp)

    pgfault_num++;
c0104466:	a1 64 1f 15 c0       	mov    0xc0151f64,%eax
c010446b:	83 c0 01             	add    $0x1,%eax
c010446e:	a3 64 1f 15 c0       	mov    %eax,0xc0151f64
    //If the addr is in the range of a mm's vma?
    if (vma == NULL || vma->vm_start > addr) {
c0104473:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0104477:	74 0b                	je     c0104484 <do_pgfault+0x3c>
c0104479:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010447c:	8b 40 04             	mov    0x4(%eax),%eax
c010447f:	3b 45 10             	cmp    0x10(%ebp),%eax
c0104482:	76 18                	jbe    c010449c <do_pgfault+0x54>
        cprintf("not valid addr %x, and  can not find it in vma\n", addr);
c0104484:	83 ec 08             	sub    $0x8,%esp
c0104487:	ff 75 10             	pushl  0x10(%ebp)
c010448a:	68 90 4f 11 c0       	push   $0xc0114f90
c010448f:	e8 f3 be ff ff       	call   c0100387 <cprintf>
c0104494:	83 c4 10             	add    $0x10,%esp
        goto failed;
c0104497:	e9 b4 01 00 00       	jmp    c0104650 <do_pgfault+0x208>
    }
    //check the error_code
    switch (error_code & 3) {
c010449c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010449f:	83 e0 03             	and    $0x3,%eax
c01044a2:	85 c0                	test   %eax,%eax
c01044a4:	74 3c                	je     c01044e2 <do_pgfault+0x9a>
c01044a6:	83 f8 01             	cmp    $0x1,%eax
c01044a9:	74 22                	je     c01044cd <do_pgfault+0x85>
    default:
            /* error code flag : default is 3 ( W/R=1, P=1): write, present */
    case 2: /* error code flag : (W/R=1, P=0): write, not present */
        if (!(vma->vm_flags & VM_WRITE)) {
c01044ab:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01044ae:	8b 40 0c             	mov    0xc(%eax),%eax
c01044b1:	83 e0 02             	and    $0x2,%eax
c01044b4:	85 c0                	test   %eax,%eax
c01044b6:	75 4c                	jne    c0104504 <do_pgfault+0xbc>
            cprintf("do_pgfault failed: error code flag = write AND not present, but the addr's vma cannot write\n");
c01044b8:	83 ec 0c             	sub    $0xc,%esp
c01044bb:	68 c0 4f 11 c0       	push   $0xc0114fc0
c01044c0:	e8 c2 be ff ff       	call   c0100387 <cprintf>
c01044c5:	83 c4 10             	add    $0x10,%esp
            goto failed;
c01044c8:	e9 83 01 00 00       	jmp    c0104650 <do_pgfault+0x208>
        }
        break;
    case 1: /* error code flag : (W/R=0, P=1): read, present */
        cprintf("do_pgfault failed: error code flag = read AND present\n");
c01044cd:	83 ec 0c             	sub    $0xc,%esp
c01044d0:	68 20 50 11 c0       	push   $0xc0115020
c01044d5:	e8 ad be ff ff       	call   c0100387 <cprintf>
c01044da:	83 c4 10             	add    $0x10,%esp
        goto failed;
c01044dd:	e9 6e 01 00 00       	jmp    c0104650 <do_pgfault+0x208>
    case 0: /* error code flag : (W/R=0, P=0): read, not present */
        if (!(vma->vm_flags & (VM_READ | VM_EXEC))) {
c01044e2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01044e5:	8b 40 0c             	mov    0xc(%eax),%eax
c01044e8:	83 e0 05             	and    $0x5,%eax
c01044eb:	85 c0                	test   %eax,%eax
c01044ed:	75 16                	jne    c0104505 <do_pgfault+0xbd>
            cprintf("do_pgfault failed: error code flag = read AND not present, but the addr's vma cannot read or exec\n");
c01044ef:	83 ec 0c             	sub    $0xc,%esp
c01044f2:	68 58 50 11 c0       	push   $0xc0115058
c01044f7:	e8 8b be ff ff       	call   c0100387 <cprintf>
c01044fc:	83 c4 10             	add    $0x10,%esp
            goto failed;
c01044ff:	e9 4c 01 00 00       	jmp    c0104650 <do_pgfault+0x208>
    case 2: /* error code flag : (W/R=1, P=0): write, not present */
        if (!(vma->vm_flags & VM_WRITE)) {
            cprintf("do_pgfault failed: error code flag = write AND not present, but the addr's vma cannot write\n");
            goto failed;
        }
        break;
c0104504:	90                   	nop
     *    (write an non_existed addr && addr is writable) OR
     *    (read  an non_existed addr && addr is readable)
     * THEN
     *    continue process
     */
    uint32_t perm = PTE_U;
c0104505:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
    if (vma->vm_flags & VM_WRITE) {
c010450c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010450f:	8b 40 0c             	mov    0xc(%eax),%eax
c0104512:	83 e0 02             	and    $0x2,%eax
c0104515:	85 c0                	test   %eax,%eax
c0104517:	74 04                	je     c010451d <do_pgfault+0xd5>
        perm |= PTE_W;
c0104519:	83 4d f0 02          	orl    $0x2,-0x10(%ebp)
    }
    addr = ROUNDDOWN(addr, PGSIZE);
c010451d:	8b 45 10             	mov    0x10(%ebp),%eax
c0104520:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0104523:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104526:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010452b:	89 45 10             	mov    %eax,0x10(%ebp)

    ret = -E_NO_MEM;
c010452e:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    pte_t *ptep=NULL;
c0104535:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    *   mm->pgdir : the PDT of these vma
    *
    */
    /*LAB3 EXERCISE 1: YOUR CODE*/
    //(1) try to find a pte, if pte's PT(Page Table) isn't existed, then create a PT.
    ptep = get_pte(mm->pgdir, addr, 1);
c010453c:	8b 45 08             	mov    0x8(%ebp),%eax
c010453f:	8b 40 0c             	mov    0xc(%eax),%eax
c0104542:	83 ec 04             	sub    $0x4,%esp
c0104545:	6a 01                	push   $0x1
c0104547:	ff 75 10             	pushl  0x10(%ebp)
c010454a:	50                   	push   %eax
c010454b:	e8 48 33 00 00       	call   c0107898 <get_pte>
c0104550:	83 c4 10             	add    $0x10,%esp
c0104553:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(ptep != NULL);
c0104556:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010455a:	75 19                	jne    c0104575 <do_pgfault+0x12d>
c010455c:	68 bb 50 11 c0       	push   $0xc01150bb
c0104561:	68 bb 4c 11 c0       	push   $0xc0114cbb
c0104566:	68 c9 01 00 00       	push   $0x1c9
c010456b:	68 d0 4c 11 c0       	push   $0xc0114cd0
c0104570:	e8 78 bf ff ff       	call   c01004ed <__panic>
    //(2) if the phy addr isn't exist, then alloc a page & map the phy addr with logical addr
    if (*ptep == 0) {
c0104575:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104578:	8b 00                	mov    (%eax),%eax
c010457a:	85 c0                	test   %eax,%eax
c010457c:	75 39                	jne    c01045b7 <do_pgfault+0x16f>
        assert(pgdir_alloc_page(mm->pgdir, addr, perm) != NULL);
c010457e:	8b 45 08             	mov    0x8(%ebp),%eax
c0104581:	8b 40 0c             	mov    0xc(%eax),%eax
c0104584:	83 ec 04             	sub    $0x4,%esp
c0104587:	ff 75 f0             	pushl  -0x10(%ebp)
c010458a:	ff 75 10             	pushl  0x10(%ebp)
c010458d:	50                   	push   %eax
c010458e:	e8 ef 39 00 00       	call   c0107f82 <pgdir_alloc_page>
c0104593:	83 c4 10             	add    $0x10,%esp
c0104596:	85 c0                	test   %eax,%eax
c0104598:	0f 85 ab 00 00 00    	jne    c0104649 <do_pgfault+0x201>
c010459e:	68 c8 50 11 c0       	push   $0xc01150c8
c01045a3:	68 bb 4c 11 c0       	push   $0xc0114cbb
c01045a8:	68 cc 01 00 00       	push   $0x1cc
c01045ad:	68 d0 4c 11 c0       	push   $0xc0114cd0
c01045b2:	e8 36 bf ff ff       	call   c01004ed <__panic>
    *    swap_in(mm, addr, &page) : alloc a memory page, then according to the swap entry in PTE for addr,
    *                               find the addr of disk page, read the content of disk page into this memroy page
    *    page_insert ： build the map of phy addr of an Page with the linear addr la
    *    swap_map_swappable ： set the page swappable
    */
        if(swap_init_ok) {
c01045b7:	a1 6c 1f 15 c0       	mov    0xc0151f6c,%eax
c01045bc:	85 c0                	test   %eax,%eax
c01045be:	74 71                	je     c0104631 <do_pgfault+0x1e9>
            struct Page *page=NULL;
c01045c0:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
            //(1）According to the mm AND addr, try to load the content of right disk page
            //    into the memory which page managed.
            assert(swap_in(mm, addr, &page) == 0);
c01045c7:	83 ec 04             	sub    $0x4,%esp
c01045ca:	8d 45 e0             	lea    -0x20(%ebp),%eax
c01045cd:	50                   	push   %eax
c01045ce:	ff 75 10             	pushl  0x10(%ebp)
c01045d1:	ff 75 08             	pushl  0x8(%ebp)
c01045d4:	e8 6b 11 00 00       	call   c0105744 <swap_in>
c01045d9:	83 c4 10             	add    $0x10,%esp
c01045dc:	85 c0                	test   %eax,%eax
c01045de:	74 19                	je     c01045f9 <do_pgfault+0x1b1>
c01045e0:	68 f8 50 11 c0       	push   $0xc01150f8
c01045e5:	68 bb 4c 11 c0       	push   $0xc0114cbb
c01045ea:	68 de 01 00 00       	push   $0x1de
c01045ef:	68 d0 4c 11 c0       	push   $0xc0114cd0
c01045f4:	e8 f4 be ff ff       	call   c01004ed <__panic>
            page->pra_vaddr = addr;
c01045f9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01045fc:	8b 55 10             	mov    0x10(%ebp),%edx
c01045ff:	89 50 1c             	mov    %edx,0x1c(%eax)
            //(2) According to the mm, addr AND page, setup the map of phy addr <---> logical addr
            page_insert(mm->pgdir, page, addr, perm);
c0104602:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0104605:	8b 45 08             	mov    0x8(%ebp),%eax
c0104608:	8b 40 0c             	mov    0xc(%eax),%eax
c010460b:	ff 75 f0             	pushl  -0x10(%ebp)
c010460e:	ff 75 10             	pushl  0x10(%ebp)
c0104611:	52                   	push   %edx
c0104612:	50                   	push   %eax
c0104613:	e8 61 38 00 00       	call   c0107e79 <page_insert>
c0104618:	83 c4 10             	add    $0x10,%esp
            //(3) make the page swappable.
            swap_map_swappable(mm, addr, page, 1);
c010461b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010461e:	6a 01                	push   $0x1
c0104620:	50                   	push   %eax
c0104621:	ff 75 10             	pushl  0x10(%ebp)
c0104624:	ff 75 08             	pushl  0x8(%ebp)
c0104627:	e8 88 0f 00 00       	call   c01055b4 <swap_map_swappable>
c010462c:	83 c4 10             	add    $0x10,%esp
c010462f:	eb 18                	jmp    c0104649 <do_pgfault+0x201>
        }
        else {
            cprintf("no swap_init_ok but ptep is %x, failed\n",*ptep);
c0104631:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104634:	8b 00                	mov    (%eax),%eax
c0104636:	83 ec 08             	sub    $0x8,%esp
c0104639:	50                   	push   %eax
c010463a:	68 18 51 11 c0       	push   $0xc0115118
c010463f:	e8 43 bd ff ff       	call   c0100387 <cprintf>
c0104644:	83 c4 10             	add    $0x10,%esp
            goto failed;
c0104647:	eb 07                	jmp    c0104650 <do_pgfault+0x208>
            cprintf("no swap_init_ok but ptep is %x, failed\n",*ptep);
            goto failed;
        }
#endif
   }
   ret = 0;
c0104649:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
failed:
    return ret;
c0104650:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0104653:	c9                   	leave  
c0104654:	c3                   	ret    

c0104655 <user_mem_check>:

bool
user_mem_check(struct mm_struct *mm, uintptr_t addr, size_t len, bool write) {
c0104655:	55                   	push   %ebp
c0104656:	89 e5                	mov    %esp,%ebp
c0104658:	83 ec 10             	sub    $0x10,%esp
    if (mm != NULL) {
c010465b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010465f:	0f 84 dc 00 00 00    	je     c0104741 <user_mem_check+0xec>
        if (!USER_ACCESS(addr, addr + len)) {
c0104665:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c010466c:	76 1c                	jbe    c010468a <user_mem_check+0x35>
c010466e:	8b 55 0c             	mov    0xc(%ebp),%edx
c0104671:	8b 45 10             	mov    0x10(%ebp),%eax
c0104674:	01 d0                	add    %edx,%eax
c0104676:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0104679:	76 0f                	jbe    c010468a <user_mem_check+0x35>
c010467b:	8b 55 0c             	mov    0xc(%ebp),%edx
c010467e:	8b 45 10             	mov    0x10(%ebp),%eax
c0104681:	01 d0                	add    %edx,%eax
c0104683:	3d 00 00 00 b0       	cmp    $0xb0000000,%eax
c0104688:	76 0a                	jbe    c0104694 <user_mem_check+0x3f>
            return 0;
c010468a:	b8 00 00 00 00       	mov    $0x0,%eax
c010468f:	e9 df 00 00 00       	jmp    c0104773 <user_mem_check+0x11e>
        }
        struct vma_struct *vma;
        uintptr_t start = addr, end = addr + len;
c0104694:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104697:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010469a:	8b 55 0c             	mov    0xc(%ebp),%edx
c010469d:	8b 45 10             	mov    0x10(%ebp),%eax
c01046a0:	01 d0                	add    %edx,%eax
c01046a2:	89 45 f8             	mov    %eax,-0x8(%ebp)
        while (start < end) {
c01046a5:	e9 84 00 00 00       	jmp    c010472e <user_mem_check+0xd9>
            if ((vma = find_vma(mm, start)) == NULL || start < vma->vm_start) {
c01046aa:	ff 75 fc             	pushl  -0x4(%ebp)
c01046ad:	ff 75 08             	pushl  0x8(%ebp)
c01046b0:	e8 31 f1 ff ff       	call   c01037e6 <find_vma>
c01046b5:	83 c4 08             	add    $0x8,%esp
c01046b8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01046bb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01046bf:	74 0b                	je     c01046cc <user_mem_check+0x77>
c01046c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01046c4:	8b 40 04             	mov    0x4(%eax),%eax
c01046c7:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c01046ca:	76 0a                	jbe    c01046d6 <user_mem_check+0x81>
                return 0;
c01046cc:	b8 00 00 00 00       	mov    $0x0,%eax
c01046d1:	e9 9d 00 00 00       	jmp    c0104773 <user_mem_check+0x11e>
            }
            if (!(vma->vm_flags & ((write) ? VM_WRITE : VM_READ))) {
c01046d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01046d9:	8b 40 0c             	mov    0xc(%eax),%eax
c01046dc:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c01046e0:	74 07                	je     c01046e9 <user_mem_check+0x94>
c01046e2:	ba 02 00 00 00       	mov    $0x2,%edx
c01046e7:	eb 05                	jmp    c01046ee <user_mem_check+0x99>
c01046e9:	ba 01 00 00 00       	mov    $0x1,%edx
c01046ee:	21 d0                	and    %edx,%eax
c01046f0:	85 c0                	test   %eax,%eax
c01046f2:	75 07                	jne    c01046fb <user_mem_check+0xa6>
                return 0;
c01046f4:	b8 00 00 00 00       	mov    $0x0,%eax
c01046f9:	eb 78                	jmp    c0104773 <user_mem_check+0x11e>
            }
            if (write && (vma->vm_flags & VM_STACK)) {
c01046fb:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c01046ff:	74 24                	je     c0104725 <user_mem_check+0xd0>
c0104701:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104704:	8b 40 0c             	mov    0xc(%eax),%eax
c0104707:	83 e0 08             	and    $0x8,%eax
c010470a:	85 c0                	test   %eax,%eax
c010470c:	74 17                	je     c0104725 <user_mem_check+0xd0>
                if (start < vma->vm_start + PGSIZE) { //check stack start & size
c010470e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104711:	8b 40 04             	mov    0x4(%eax),%eax
c0104714:	05 00 10 00 00       	add    $0x1000,%eax
c0104719:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c010471c:	76 07                	jbe    c0104725 <user_mem_check+0xd0>
                    return 0;
c010471e:	b8 00 00 00 00       	mov    $0x0,%eax
c0104723:	eb 4e                	jmp    c0104773 <user_mem_check+0x11e>
                }
            }
            start = vma->vm_end;
c0104725:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104728:	8b 40 08             	mov    0x8(%eax),%eax
c010472b:	89 45 fc             	mov    %eax,-0x4(%ebp)
        if (!USER_ACCESS(addr, addr + len)) {
            return 0;
        }
        struct vma_struct *vma;
        uintptr_t start = addr, end = addr + len;
        while (start < end) {
c010472e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0104731:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c0104734:	0f 82 70 ff ff ff    	jb     c01046aa <user_mem_check+0x55>
                    return 0;
                }
            }
            start = vma->vm_end;
        }
        return 1;
c010473a:	b8 01 00 00 00       	mov    $0x1,%eax
c010473f:	eb 32                	jmp    c0104773 <user_mem_check+0x11e>
    }
    return KERN_ACCESS(addr, addr + len);
c0104741:	81 7d 0c ff ff ff bf 	cmpl   $0xbfffffff,0xc(%ebp)
c0104748:	76 23                	jbe    c010476d <user_mem_check+0x118>
c010474a:	8b 55 0c             	mov    0xc(%ebp),%edx
c010474d:	8b 45 10             	mov    0x10(%ebp),%eax
c0104750:	01 d0                	add    %edx,%eax
c0104752:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0104755:	76 16                	jbe    c010476d <user_mem_check+0x118>
c0104757:	8b 55 0c             	mov    0xc(%ebp),%edx
c010475a:	8b 45 10             	mov    0x10(%ebp),%eax
c010475d:	01 d0                	add    %edx,%eax
c010475f:	3d 00 00 00 f8       	cmp    $0xf8000000,%eax
c0104764:	77 07                	ja     c010476d <user_mem_check+0x118>
c0104766:	b8 01 00 00 00       	mov    $0x1,%eax
c010476b:	eb 05                	jmp    c0104772 <user_mem_check+0x11d>
c010476d:	b8 00 00 00 00       	mov    $0x0,%eax
c0104772:	90                   	nop
}
c0104773:	c9                   	leave  
c0104774:	c3                   	ret    

c0104775 <copy_string>:

bool
copy_string(struct mm_struct *mm, char *dst, const char *src, size_t maxn) {
c0104775:	55                   	push   %ebp
c0104776:	89 e5                	mov    %esp,%ebp
c0104778:	83 ec 18             	sub    $0x18,%esp
    size_t alen, part = ROUNDDOWN((uintptr_t)src + PGSIZE, PGSIZE) - (uintptr_t)src;
c010477b:	8b 45 10             	mov    0x10(%ebp),%eax
c010477e:	05 00 10 00 00       	add    $0x1000,%eax
c0104783:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104786:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104789:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010478e:	89 c2                	mov    %eax,%edx
c0104790:	8b 45 10             	mov    0x10(%ebp),%eax
c0104793:	29 c2                	sub    %eax,%edx
c0104795:	89 d0                	mov    %edx,%eax
c0104797:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (1) {
        if (part > maxn) {
c010479a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010479d:	3b 45 14             	cmp    0x14(%ebp),%eax
c01047a0:	76 06                	jbe    c01047a8 <copy_string+0x33>
            part = maxn;
c01047a2:	8b 45 14             	mov    0x14(%ebp),%eax
c01047a5:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        if (!user_mem_check(mm, (uintptr_t)src, part, 0)) {
c01047a8:	8b 45 10             	mov    0x10(%ebp),%eax
c01047ab:	6a 00                	push   $0x0
c01047ad:	ff 75 f4             	pushl  -0xc(%ebp)
c01047b0:	50                   	push   %eax
c01047b1:	ff 75 08             	pushl  0x8(%ebp)
c01047b4:	e8 9c fe ff ff       	call   c0104655 <user_mem_check>
c01047b9:	83 c4 10             	add    $0x10,%esp
c01047bc:	85 c0                	test   %eax,%eax
c01047be:	75 07                	jne    c01047c7 <copy_string+0x52>
            return 0;
c01047c0:	b8 00 00 00 00       	mov    $0x0,%eax
c01047c5:	eb 7c                	jmp    c0104843 <copy_string+0xce>
        }
        if ((alen = strnlen(src, part)) < part) {
c01047c7:	83 ec 08             	sub    $0x8,%esp
c01047ca:	ff 75 f4             	pushl  -0xc(%ebp)
c01047cd:	ff 75 10             	pushl  0x10(%ebp)
c01047d0:	e8 5b ef 00 00       	call   c0113730 <strnlen>
c01047d5:	83 c4 10             	add    $0x10,%esp
c01047d8:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01047db:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01047de:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01047e1:	73 1f                	jae    c0104802 <copy_string+0x8d>
            memcpy(dst, src, alen + 1);
c01047e3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01047e6:	83 c0 01             	add    $0x1,%eax
c01047e9:	83 ec 04             	sub    $0x4,%esp
c01047ec:	50                   	push   %eax
c01047ed:	ff 75 10             	pushl  0x10(%ebp)
c01047f0:	ff 75 0c             	pushl  0xc(%ebp)
c01047f3:	e8 4d f3 00 00       	call   c0113b45 <memcpy>
c01047f8:	83 c4 10             	add    $0x10,%esp
            return 1;
c01047fb:	b8 01 00 00 00       	mov    $0x1,%eax
c0104800:	eb 41                	jmp    c0104843 <copy_string+0xce>
        }
        if (part == maxn) {
c0104802:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104805:	3b 45 14             	cmp    0x14(%ebp),%eax
c0104808:	75 07                	jne    c0104811 <copy_string+0x9c>
            return 0;
c010480a:	b8 00 00 00 00       	mov    $0x0,%eax
c010480f:	eb 32                	jmp    c0104843 <copy_string+0xce>
        }
        memcpy(dst, src, part);
c0104811:	83 ec 04             	sub    $0x4,%esp
c0104814:	ff 75 f4             	pushl  -0xc(%ebp)
c0104817:	ff 75 10             	pushl  0x10(%ebp)
c010481a:	ff 75 0c             	pushl  0xc(%ebp)
c010481d:	e8 23 f3 00 00       	call   c0113b45 <memcpy>
c0104822:	83 c4 10             	add    $0x10,%esp
        dst += part, src += part, maxn -= part;
c0104825:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104828:	01 45 0c             	add    %eax,0xc(%ebp)
c010482b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010482e:	01 45 10             	add    %eax,0x10(%ebp)
c0104831:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104834:	29 45 14             	sub    %eax,0x14(%ebp)
        part = PGSIZE;
c0104837:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
    }
c010483e:	e9 57 ff ff ff       	jmp    c010479a <copy_string+0x25>
}
c0104843:	c9                   	leave  
c0104844:	c3                   	ret    

c0104845 <_fifo_init_mm>:
 * (2) _fifo_init_mm: init pra_list_head and let  mm->sm_priv point to the addr of pra_list_head.
 *              Now, From the memory control struct mm_struct, we can access FIFO PRA
 */
static int
_fifo_init_mm(struct mm_struct *mm)
{     
c0104845:	55                   	push   %ebp
c0104846:	89 e5                	mov    %esp,%ebp
c0104848:	83 ec 10             	sub    $0x10,%esp
c010484b:	c7 45 fc 74 51 15 c0 	movl   $0xc0155174,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0104852:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0104855:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0104858:	89 50 04             	mov    %edx,0x4(%eax)
c010485b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010485e:	8b 50 04             	mov    0x4(%eax),%edx
c0104861:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0104864:	89 10                	mov    %edx,(%eax)
     list_init(&pra_list_head);
     mm->sm_priv = &pra_list_head;
c0104866:	8b 45 08             	mov    0x8(%ebp),%eax
c0104869:	c7 40 14 74 51 15 c0 	movl   $0xc0155174,0x14(%eax)
     //cprintf(" mm->sm_priv %x in fifo_init_mm\n",mm->sm_priv);
     return 0;
c0104870:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104875:	c9                   	leave  
c0104876:	c3                   	ret    

c0104877 <_fifo_map_swappable>:
/*
 * (3)_fifo_map_swappable: According FIFO PRA, we should link the most recent arrival page at the back of pra_list_head qeueue
 */
static int
_fifo_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c0104877:	55                   	push   %ebp
c0104878:	89 e5                	mov    %esp,%ebp
c010487a:	83 ec 48             	sub    $0x48,%esp
    list_entry_t *head=(list_entry_t*) mm->sm_priv;
c010487d:	8b 45 08             	mov    0x8(%ebp),%eax
c0104880:	8b 40 14             	mov    0x14(%eax),%eax
c0104883:	89 45 f0             	mov    %eax,-0x10(%ebp)
    list_entry_t *entry=&(page->pra_page_link);
c0104886:	8b 45 10             	mov    0x10(%ebp),%eax
c0104889:	83 c0 14             	add    $0x14,%eax
c010488c:	89 45 ec             	mov    %eax,-0x14(%ebp)
 
    assert(entry != NULL && head != NULL);
c010488f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0104893:	74 06                	je     c010489b <_fifo_map_swappable+0x24>
c0104895:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0104899:	75 16                	jne    c01048b1 <_fifo_map_swappable+0x3a>
c010489b:	68 40 51 11 c0       	push   $0xc0115140
c01048a0:	68 5e 51 11 c0       	push   $0xc011515e
c01048a5:	6a 32                	push   $0x32
c01048a7:	68 73 51 11 c0       	push   $0xc0115173
c01048ac:	e8 3c bc ff ff       	call   c01004ed <__panic>
    //record the page access situlation
    /*LAB3 EXERCISE 2: YOUR CODE*/ 
    // not swap in but call this func, means failed to swap out 
    if (swap_in == 0) {
c01048b1:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c01048b5:	75 57                	jne    c010490e <_fifo_map_swappable+0x97>
        list_entry_t *le_prev = head, *le;
c01048b7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01048ba:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while ((le = list_next(le_prev)) != head) {
c01048bd:	eb 38                	jmp    c01048f7 <_fifo_map_swappable+0x80>
            if (le == entry) {
c01048bf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01048c2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01048c5:	75 2a                	jne    c01048f1 <_fifo_map_swappable+0x7a>
c01048c7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01048ca:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c01048cd:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01048d0:	8b 40 04             	mov    0x4(%eax),%eax
c01048d3:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01048d6:	8b 12                	mov    (%edx),%edx
c01048d8:	89 55 d8             	mov    %edx,-0x28(%ebp)
c01048db:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c01048de:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01048e1:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01048e4:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c01048e7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01048ea:	8b 55 d8             	mov    -0x28(%ebp),%edx
c01048ed:	89 10                	mov    %edx,(%eax)
                list_del(le);
                break;
c01048ef:	eb 1d                	jmp    c010490e <_fifo_map_swappable+0x97>
            }
            le_prev = le;        
c01048f1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01048f4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01048f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01048fa:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01048fd:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104900:	8b 40 04             	mov    0x4(%eax),%eax
    //record the page access situlation
    /*LAB3 EXERCISE 2: YOUR CODE*/ 
    // not swap in but call this func, means failed to swap out 
    if (swap_in == 0) {
        list_entry_t *le_prev = head, *le;
        while ((le = list_next(le_prev)) != head) {
c0104903:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0104906:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104909:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010490c:	75 b1                	jne    c01048bf <_fifo_map_swappable+0x48>
c010490e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104911:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0104914:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104917:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c010491a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010491d:	8b 00                	mov    (%eax),%eax
c010491f:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0104922:	89 55 cc             	mov    %edx,-0x34(%ebp)
c0104925:	89 45 c8             	mov    %eax,-0x38(%ebp)
c0104928:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010492b:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010492e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0104931:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0104934:	89 10                	mov    %edx,(%eax)
c0104936:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0104939:	8b 10                	mov    (%eax),%edx
c010493b:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010493e:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0104941:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0104944:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0104947:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010494a:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010494d:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0104950:	89 10                	mov    %edx,(%eax)
            le_prev = le;        
        }
    }
    //(1)link the most recent arrival page at the back of the pra_list_head qeueue.
    list_add_before(head, entry);
    return 0;
c0104952:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104957:	c9                   	leave  
c0104958:	c3                   	ret    

c0104959 <_fifo_swap_out_victim>:
 *  (4)_fifo_swap_out_victim: According FIFO PRA, we should unlink the  earliest arrival page in front of pra_list_head qeueue,
 *                            then assign the value of *ptr_page to the addr of this page.
 */
static int
_fifo_swap_out_victim(struct mm_struct *mm, struct Page ** ptr_page, int in_tick)
{
c0104959:	55                   	push   %ebp
c010495a:	89 e5                	mov    %esp,%ebp
c010495c:	83 ec 28             	sub    $0x28,%esp
     list_entry_t *head=(list_entry_t*) mm->sm_priv;
c010495f:	8b 45 08             	mov    0x8(%ebp),%eax
c0104962:	8b 40 14             	mov    0x14(%eax),%eax
c0104965:	89 45 f4             	mov    %eax,-0xc(%ebp)
         assert(head != NULL);
c0104968:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010496c:	75 16                	jne    c0104984 <_fifo_swap_out_victim+0x2b>
c010496e:	68 87 51 11 c0       	push   $0xc0115187
c0104973:	68 5e 51 11 c0       	push   $0xc011515e
c0104978:	6a 4c                	push   $0x4c
c010497a:	68 73 51 11 c0       	push   $0xc0115173
c010497f:	e8 69 bb ff ff       	call   c01004ed <__panic>
     assert(in_tick==0);
c0104984:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0104988:	74 16                	je     c01049a0 <_fifo_swap_out_victim+0x47>
c010498a:	68 94 51 11 c0       	push   $0xc0115194
c010498f:	68 5e 51 11 c0       	push   $0xc011515e
c0104994:	6a 4d                	push   $0x4d
c0104996:	68 73 51 11 c0       	push   $0xc0115173
c010499b:	e8 4d bb ff ff       	call   c01004ed <__panic>
c01049a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01049a3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01049a6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01049a9:	8b 40 04             	mov    0x4(%eax),%eax
     /* Select the victim */
     /*LAB3 EXERCISE 2: YOUR CODE*/ 
    //(1)  unlink the  earliest arrival page in front of pra_list_head qeueue
    list_entry_t *front = list_next(head);
c01049ac:	89 45 ec             	mov    %eax,-0x14(%ebp)
    assert(front != head);
c01049af:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01049b2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01049b5:	75 16                	jne    c01049cd <_fifo_swap_out_victim+0x74>
c01049b7:	68 9f 51 11 c0       	push   $0xc011519f
c01049bc:	68 5e 51 11 c0       	push   $0xc011515e
c01049c1:	6a 52                	push   $0x52
c01049c3:	68 73 51 11 c0       	push   $0xc0115173
c01049c8:	e8 20 bb ff ff       	call   c01004ed <__panic>
c01049cd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01049d0:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c01049d3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01049d6:	8b 40 04             	mov    0x4(%eax),%eax
c01049d9:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01049dc:	8b 12                	mov    (%edx),%edx
c01049de:	89 55 e0             	mov    %edx,-0x20(%ebp)
c01049e1:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c01049e4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01049e7:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01049ea:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c01049ed:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01049f0:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01049f3:	89 10                	mov    %edx,(%eax)
    list_del(front);
    //(2)  assign the value of *ptr_page to the addr of this page
    struct Page *page = le2page(front, pra_page_link);
c01049f5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01049f8:	83 e8 14             	sub    $0x14,%eax
c01049fb:	89 45 e8             	mov    %eax,-0x18(%ebp)
    assert(page != NULL);
c01049fe:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0104a02:	75 16                	jne    c0104a1a <_fifo_swap_out_victim+0xc1>
c0104a04:	68 ad 51 11 c0       	push   $0xc01151ad
c0104a09:	68 5e 51 11 c0       	push   $0xc011515e
c0104a0e:	6a 56                	push   $0x56
c0104a10:	68 73 51 11 c0       	push   $0xc0115173
c0104a15:	e8 d3 ba ff ff       	call   c01004ed <__panic>
    *ptr_page = page;
c0104a1a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104a1d:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0104a20:	89 10                	mov    %edx,(%eax)
    return 0;
c0104a22:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104a27:	c9                   	leave  
c0104a28:	c3                   	ret    

c0104a29 <_fifo_check_swap>:

static int
_fifo_check_swap(void) {
c0104a29:	55                   	push   %ebp
c0104a2a:	89 e5                	mov    %esp,%ebp
c0104a2c:	83 ec 08             	sub    $0x8,%esp
    cprintf("write Virt Page c in fifo_check_swap\n");
c0104a2f:	83 ec 0c             	sub    $0xc,%esp
c0104a32:	68 bc 51 11 c0       	push   $0xc01151bc
c0104a37:	e8 4b b9 ff ff       	call   c0100387 <cprintf>
c0104a3c:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x3000 = 0x0c;
c0104a3f:	b8 00 30 00 00       	mov    $0x3000,%eax
c0104a44:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==4);
c0104a47:	a1 64 1f 15 c0       	mov    0xc0151f64,%eax
c0104a4c:	83 f8 04             	cmp    $0x4,%eax
c0104a4f:	74 16                	je     c0104a67 <_fifo_check_swap+0x3e>
c0104a51:	68 e2 51 11 c0       	push   $0xc01151e2
c0104a56:	68 5e 51 11 c0       	push   $0xc011515e
c0104a5b:	6a 5f                	push   $0x5f
c0104a5d:	68 73 51 11 c0       	push   $0xc0115173
c0104a62:	e8 86 ba ff ff       	call   c01004ed <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c0104a67:	83 ec 0c             	sub    $0xc,%esp
c0104a6a:	68 f4 51 11 c0       	push   $0xc01151f4
c0104a6f:	e8 13 b9 ff ff       	call   c0100387 <cprintf>
c0104a74:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x1000 = 0x0a;
c0104a77:	b8 00 10 00 00       	mov    $0x1000,%eax
c0104a7c:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==4);
c0104a7f:	a1 64 1f 15 c0       	mov    0xc0151f64,%eax
c0104a84:	83 f8 04             	cmp    $0x4,%eax
c0104a87:	74 16                	je     c0104a9f <_fifo_check_swap+0x76>
c0104a89:	68 e2 51 11 c0       	push   $0xc01151e2
c0104a8e:	68 5e 51 11 c0       	push   $0xc011515e
c0104a93:	6a 62                	push   $0x62
c0104a95:	68 73 51 11 c0       	push   $0xc0115173
c0104a9a:	e8 4e ba ff ff       	call   c01004ed <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c0104a9f:	83 ec 0c             	sub    $0xc,%esp
c0104aa2:	68 1c 52 11 c0       	push   $0xc011521c
c0104aa7:	e8 db b8 ff ff       	call   c0100387 <cprintf>
c0104aac:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x4000 = 0x0d;
c0104aaf:	b8 00 40 00 00       	mov    $0x4000,%eax
c0104ab4:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==4);
c0104ab7:	a1 64 1f 15 c0       	mov    0xc0151f64,%eax
c0104abc:	83 f8 04             	cmp    $0x4,%eax
c0104abf:	74 16                	je     c0104ad7 <_fifo_check_swap+0xae>
c0104ac1:	68 e2 51 11 c0       	push   $0xc01151e2
c0104ac6:	68 5e 51 11 c0       	push   $0xc011515e
c0104acb:	6a 65                	push   $0x65
c0104acd:	68 73 51 11 c0       	push   $0xc0115173
c0104ad2:	e8 16 ba ff ff       	call   c01004ed <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0104ad7:	83 ec 0c             	sub    $0xc,%esp
c0104ada:	68 44 52 11 c0       	push   $0xc0115244
c0104adf:	e8 a3 b8 ff ff       	call   c0100387 <cprintf>
c0104ae4:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x2000 = 0x0b;
c0104ae7:	b8 00 20 00 00       	mov    $0x2000,%eax
c0104aec:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==4);
c0104aef:	a1 64 1f 15 c0       	mov    0xc0151f64,%eax
c0104af4:	83 f8 04             	cmp    $0x4,%eax
c0104af7:	74 16                	je     c0104b0f <_fifo_check_swap+0xe6>
c0104af9:	68 e2 51 11 c0       	push   $0xc01151e2
c0104afe:	68 5e 51 11 c0       	push   $0xc011515e
c0104b03:	6a 68                	push   $0x68
c0104b05:	68 73 51 11 c0       	push   $0xc0115173
c0104b0a:	e8 de b9 ff ff       	call   c01004ed <__panic>
    cprintf("write Virt Page e in fifo_check_swap\n");
c0104b0f:	83 ec 0c             	sub    $0xc,%esp
c0104b12:	68 6c 52 11 c0       	push   $0xc011526c
c0104b17:	e8 6b b8 ff ff       	call   c0100387 <cprintf>
c0104b1c:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x5000 = 0x0e;
c0104b1f:	b8 00 50 00 00       	mov    $0x5000,%eax
c0104b24:	c6 00 0e             	movb   $0xe,(%eax)
    assert(pgfault_num==5);
c0104b27:	a1 64 1f 15 c0       	mov    0xc0151f64,%eax
c0104b2c:	83 f8 05             	cmp    $0x5,%eax
c0104b2f:	74 16                	je     c0104b47 <_fifo_check_swap+0x11e>
c0104b31:	68 92 52 11 c0       	push   $0xc0115292
c0104b36:	68 5e 51 11 c0       	push   $0xc011515e
c0104b3b:	6a 6b                	push   $0x6b
c0104b3d:	68 73 51 11 c0       	push   $0xc0115173
c0104b42:	e8 a6 b9 ff ff       	call   c01004ed <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0104b47:	83 ec 0c             	sub    $0xc,%esp
c0104b4a:	68 44 52 11 c0       	push   $0xc0115244
c0104b4f:	e8 33 b8 ff ff       	call   c0100387 <cprintf>
c0104b54:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x2000 = 0x0b;
c0104b57:	b8 00 20 00 00       	mov    $0x2000,%eax
c0104b5c:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==5);
c0104b5f:	a1 64 1f 15 c0       	mov    0xc0151f64,%eax
c0104b64:	83 f8 05             	cmp    $0x5,%eax
c0104b67:	74 16                	je     c0104b7f <_fifo_check_swap+0x156>
c0104b69:	68 92 52 11 c0       	push   $0xc0115292
c0104b6e:	68 5e 51 11 c0       	push   $0xc011515e
c0104b73:	6a 6e                	push   $0x6e
c0104b75:	68 73 51 11 c0       	push   $0xc0115173
c0104b7a:	e8 6e b9 ff ff       	call   c01004ed <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c0104b7f:	83 ec 0c             	sub    $0xc,%esp
c0104b82:	68 f4 51 11 c0       	push   $0xc01151f4
c0104b87:	e8 fb b7 ff ff       	call   c0100387 <cprintf>
c0104b8c:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x1000 = 0x0a;
c0104b8f:	b8 00 10 00 00       	mov    $0x1000,%eax
c0104b94:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==6);
c0104b97:	a1 64 1f 15 c0       	mov    0xc0151f64,%eax
c0104b9c:	83 f8 06             	cmp    $0x6,%eax
c0104b9f:	74 16                	je     c0104bb7 <_fifo_check_swap+0x18e>
c0104ba1:	68 a1 52 11 c0       	push   $0xc01152a1
c0104ba6:	68 5e 51 11 c0       	push   $0xc011515e
c0104bab:	6a 71                	push   $0x71
c0104bad:	68 73 51 11 c0       	push   $0xc0115173
c0104bb2:	e8 36 b9 ff ff       	call   c01004ed <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0104bb7:	83 ec 0c             	sub    $0xc,%esp
c0104bba:	68 44 52 11 c0       	push   $0xc0115244
c0104bbf:	e8 c3 b7 ff ff       	call   c0100387 <cprintf>
c0104bc4:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x2000 = 0x0b;
c0104bc7:	b8 00 20 00 00       	mov    $0x2000,%eax
c0104bcc:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==7);
c0104bcf:	a1 64 1f 15 c0       	mov    0xc0151f64,%eax
c0104bd4:	83 f8 07             	cmp    $0x7,%eax
c0104bd7:	74 16                	je     c0104bef <_fifo_check_swap+0x1c6>
c0104bd9:	68 b0 52 11 c0       	push   $0xc01152b0
c0104bde:	68 5e 51 11 c0       	push   $0xc011515e
c0104be3:	6a 74                	push   $0x74
c0104be5:	68 73 51 11 c0       	push   $0xc0115173
c0104bea:	e8 fe b8 ff ff       	call   c01004ed <__panic>
    cprintf("write Virt Page c in fifo_check_swap\n");
c0104bef:	83 ec 0c             	sub    $0xc,%esp
c0104bf2:	68 bc 51 11 c0       	push   $0xc01151bc
c0104bf7:	e8 8b b7 ff ff       	call   c0100387 <cprintf>
c0104bfc:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x3000 = 0x0c;
c0104bff:	b8 00 30 00 00       	mov    $0x3000,%eax
c0104c04:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==8);
c0104c07:	a1 64 1f 15 c0       	mov    0xc0151f64,%eax
c0104c0c:	83 f8 08             	cmp    $0x8,%eax
c0104c0f:	74 16                	je     c0104c27 <_fifo_check_swap+0x1fe>
c0104c11:	68 bf 52 11 c0       	push   $0xc01152bf
c0104c16:	68 5e 51 11 c0       	push   $0xc011515e
c0104c1b:	6a 77                	push   $0x77
c0104c1d:	68 73 51 11 c0       	push   $0xc0115173
c0104c22:	e8 c6 b8 ff ff       	call   c01004ed <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c0104c27:	83 ec 0c             	sub    $0xc,%esp
c0104c2a:	68 1c 52 11 c0       	push   $0xc011521c
c0104c2f:	e8 53 b7 ff ff       	call   c0100387 <cprintf>
c0104c34:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x4000 = 0x0d;
c0104c37:	b8 00 40 00 00       	mov    $0x4000,%eax
c0104c3c:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==9);
c0104c3f:	a1 64 1f 15 c0       	mov    0xc0151f64,%eax
c0104c44:	83 f8 09             	cmp    $0x9,%eax
c0104c47:	74 16                	je     c0104c5f <_fifo_check_swap+0x236>
c0104c49:	68 ce 52 11 c0       	push   $0xc01152ce
c0104c4e:	68 5e 51 11 c0       	push   $0xc011515e
c0104c53:	6a 7a                	push   $0x7a
c0104c55:	68 73 51 11 c0       	push   $0xc0115173
c0104c5a:	e8 8e b8 ff ff       	call   c01004ed <__panic>
    cprintf("write Virt Page e in fifo_check_swap\n");
c0104c5f:	83 ec 0c             	sub    $0xc,%esp
c0104c62:	68 6c 52 11 c0       	push   $0xc011526c
c0104c67:	e8 1b b7 ff ff       	call   c0100387 <cprintf>
c0104c6c:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x5000 = 0x0e;
c0104c6f:	b8 00 50 00 00       	mov    $0x5000,%eax
c0104c74:	c6 00 0e             	movb   $0xe,(%eax)
    assert(pgfault_num==10);
c0104c77:	a1 64 1f 15 c0       	mov    0xc0151f64,%eax
c0104c7c:	83 f8 0a             	cmp    $0xa,%eax
c0104c7f:	74 16                	je     c0104c97 <_fifo_check_swap+0x26e>
c0104c81:	68 dd 52 11 c0       	push   $0xc01152dd
c0104c86:	68 5e 51 11 c0       	push   $0xc011515e
c0104c8b:	6a 7d                	push   $0x7d
c0104c8d:	68 73 51 11 c0       	push   $0xc0115173
c0104c92:	e8 56 b8 ff ff       	call   c01004ed <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c0104c97:	83 ec 0c             	sub    $0xc,%esp
c0104c9a:	68 f4 51 11 c0       	push   $0xc01151f4
c0104c9f:	e8 e3 b6 ff ff       	call   c0100387 <cprintf>
c0104ca4:	83 c4 10             	add    $0x10,%esp
    assert(*(unsigned char *)0x1000 == 0x0a);
c0104ca7:	b8 00 10 00 00       	mov    $0x1000,%eax
c0104cac:	0f b6 00             	movzbl (%eax),%eax
c0104caf:	3c 0a                	cmp    $0xa,%al
c0104cb1:	74 16                	je     c0104cc9 <_fifo_check_swap+0x2a0>
c0104cb3:	68 f0 52 11 c0       	push   $0xc01152f0
c0104cb8:	68 5e 51 11 c0       	push   $0xc011515e
c0104cbd:	6a 7f                	push   $0x7f
c0104cbf:	68 73 51 11 c0       	push   $0xc0115173
c0104cc4:	e8 24 b8 ff ff       	call   c01004ed <__panic>
    *(unsigned char *)0x1000 = 0x0a;
c0104cc9:	b8 00 10 00 00       	mov    $0x1000,%eax
c0104cce:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==11);
c0104cd1:	a1 64 1f 15 c0       	mov    0xc0151f64,%eax
c0104cd6:	83 f8 0b             	cmp    $0xb,%eax
c0104cd9:	74 19                	je     c0104cf4 <_fifo_check_swap+0x2cb>
c0104cdb:	68 11 53 11 c0       	push   $0xc0115311
c0104ce0:	68 5e 51 11 c0       	push   $0xc011515e
c0104ce5:	68 81 00 00 00       	push   $0x81
c0104cea:	68 73 51 11 c0       	push   $0xc0115173
c0104cef:	e8 f9 b7 ff ff       	call   c01004ed <__panic>
    return 0;
c0104cf4:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104cf9:	c9                   	leave  
c0104cfa:	c3                   	ret    

c0104cfb <_fifo_init>:


static int
_fifo_init(void)
{
c0104cfb:	55                   	push   %ebp
c0104cfc:	89 e5                	mov    %esp,%ebp
    return 0;
c0104cfe:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104d03:	5d                   	pop    %ebp
c0104d04:	c3                   	ret    

c0104d05 <_fifo_set_unswappable>:

static int
_fifo_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c0104d05:	55                   	push   %ebp
c0104d06:	89 e5                	mov    %esp,%ebp
    return 0;
c0104d08:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104d0d:	5d                   	pop    %ebp
c0104d0e:	c3                   	ret    

c0104d0f <_fifo_tick_event>:

static int
_fifo_tick_event(struct mm_struct *mm)
{ return 0; }
c0104d0f:	55                   	push   %ebp
c0104d10:	89 e5                	mov    %esp,%ebp
c0104d12:	b8 00 00 00 00       	mov    $0x0,%eax
c0104d17:	5d                   	pop    %ebp
c0104d18:	c3                   	ret    

c0104d19 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0104d19:	55                   	push   %ebp
c0104d1a:	89 e5                	mov    %esp,%ebp
c0104d1c:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0104d1f:	9c                   	pushf  
c0104d20:	58                   	pop    %eax
c0104d21:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0104d24:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0104d27:	25 00 02 00 00       	and    $0x200,%eax
c0104d2c:	85 c0                	test   %eax,%eax
c0104d2e:	74 0c                	je     c0104d3c <__intr_save+0x23>
        intr_disable();
c0104d30:	e8 81 d5 ff ff       	call   c01022b6 <intr_disable>
        return 1;
c0104d35:	b8 01 00 00 00       	mov    $0x1,%eax
c0104d3a:	eb 05                	jmp    c0104d41 <__intr_save+0x28>
    }
    return 0;
c0104d3c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104d41:	c9                   	leave  
c0104d42:	c3                   	ret    

c0104d43 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0104d43:	55                   	push   %ebp
c0104d44:	89 e5                	mov    %esp,%ebp
c0104d46:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0104d49:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104d4d:	74 05                	je     c0104d54 <__intr_restore+0x11>
        intr_enable();
c0104d4f:	e8 5b d5 ff ff       	call   c01022af <intr_enable>
    }
}
c0104d54:	90                   	nop
c0104d55:	c9                   	leave  
c0104d56:	c3                   	ret    

c0104d57 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0104d57:	55                   	push   %ebp
c0104d58:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0104d5a:	8b 45 08             	mov    0x8(%ebp),%eax
c0104d5d:	8b 15 58 52 15 c0    	mov    0xc0155258,%edx
c0104d63:	29 d0                	sub    %edx,%eax
c0104d65:	c1 f8 05             	sar    $0x5,%eax
}
c0104d68:	5d                   	pop    %ebp
c0104d69:	c3                   	ret    

c0104d6a <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0104d6a:	55                   	push   %ebp
c0104d6b:	89 e5                	mov    %esp,%ebp
    return page2ppn(page) << PGSHIFT;
c0104d6d:	ff 75 08             	pushl  0x8(%ebp)
c0104d70:	e8 e2 ff ff ff       	call   c0104d57 <page2ppn>
c0104d75:	83 c4 04             	add    $0x4,%esp
c0104d78:	c1 e0 0c             	shl    $0xc,%eax
}
c0104d7b:	c9                   	leave  
c0104d7c:	c3                   	ret    

c0104d7d <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c0104d7d:	55                   	push   %ebp
c0104d7e:	89 e5                	mov    %esp,%ebp
c0104d80:	83 ec 08             	sub    $0x8,%esp
    if (PPN(pa) >= npage) {
c0104d83:	8b 45 08             	mov    0x8(%ebp),%eax
c0104d86:	c1 e8 0c             	shr    $0xc,%eax
c0104d89:	89 c2                	mov    %eax,%edx
c0104d8b:	a1 80 1f 15 c0       	mov    0xc0151f80,%eax
c0104d90:	39 c2                	cmp    %eax,%edx
c0104d92:	72 14                	jb     c0104da8 <pa2page+0x2b>
        panic("pa2page called with invalid pa");
c0104d94:	83 ec 04             	sub    $0x4,%esp
c0104d97:	68 34 53 11 c0       	push   $0xc0115334
c0104d9c:	6a 5e                	push   $0x5e
c0104d9e:	68 53 53 11 c0       	push   $0xc0115353
c0104da3:	e8 45 b7 ff ff       	call   c01004ed <__panic>
    }
    return &pages[PPN(pa)];
c0104da8:	a1 58 52 15 c0       	mov    0xc0155258,%eax
c0104dad:	8b 55 08             	mov    0x8(%ebp),%edx
c0104db0:	c1 ea 0c             	shr    $0xc,%edx
c0104db3:	c1 e2 05             	shl    $0x5,%edx
c0104db6:	01 d0                	add    %edx,%eax
}
c0104db8:	c9                   	leave  
c0104db9:	c3                   	ret    

c0104dba <page2kva>:

static inline void *
page2kva(struct Page *page) {
c0104dba:	55                   	push   %ebp
c0104dbb:	89 e5                	mov    %esp,%ebp
c0104dbd:	83 ec 18             	sub    $0x18,%esp
    return KADDR(page2pa(page));
c0104dc0:	ff 75 08             	pushl  0x8(%ebp)
c0104dc3:	e8 a2 ff ff ff       	call   c0104d6a <page2pa>
c0104dc8:	83 c4 04             	add    $0x4,%esp
c0104dcb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104dce:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104dd1:	c1 e8 0c             	shr    $0xc,%eax
c0104dd4:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104dd7:	a1 80 1f 15 c0       	mov    0xc0151f80,%eax
c0104ddc:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0104ddf:	72 14                	jb     c0104df5 <page2kva+0x3b>
c0104de1:	ff 75 f4             	pushl  -0xc(%ebp)
c0104de4:	68 64 53 11 c0       	push   $0xc0115364
c0104de9:	6a 65                	push   $0x65
c0104deb:	68 53 53 11 c0       	push   $0xc0115353
c0104df0:	e8 f8 b6 ff ff       	call   c01004ed <__panic>
c0104df5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104df8:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c0104dfd:	c9                   	leave  
c0104dfe:	c3                   	ret    

c0104dff <kva2page>:

static inline struct Page *
kva2page(void *kva) {
c0104dff:	55                   	push   %ebp
c0104e00:	89 e5                	mov    %esp,%ebp
c0104e02:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PADDR(kva));
c0104e05:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e08:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104e0b:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c0104e12:	77 14                	ja     c0104e28 <kva2page+0x29>
c0104e14:	ff 75 f4             	pushl  -0xc(%ebp)
c0104e17:	68 88 53 11 c0       	push   $0xc0115388
c0104e1c:	6a 6a                	push   $0x6a
c0104e1e:	68 53 53 11 c0       	push   $0xc0115353
c0104e23:	e8 c5 b6 ff ff       	call   c01004ed <__panic>
c0104e28:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e2b:	05 00 00 00 40       	add    $0x40000000,%eax
c0104e30:	83 ec 0c             	sub    $0xc,%esp
c0104e33:	50                   	push   %eax
c0104e34:	e8 44 ff ff ff       	call   c0104d7d <pa2page>
c0104e39:	83 c4 10             	add    $0x10,%esp
}
c0104e3c:	c9                   	leave  
c0104e3d:	c3                   	ret    

c0104e3e <__slob_get_free_pages>:
static slob_t *slobfree = &arena;
static bigblock_t *bigblocks;


static void* __slob_get_free_pages(gfp_t gfp, int order)
{
c0104e3e:	55                   	push   %ebp
c0104e3f:	89 e5                	mov    %esp,%ebp
c0104e41:	83 ec 18             	sub    $0x18,%esp
  struct Page * page = alloc_pages(1 << order);
c0104e44:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104e47:	ba 01 00 00 00       	mov    $0x1,%edx
c0104e4c:	89 c1                	mov    %eax,%ecx
c0104e4e:	d3 e2                	shl    %cl,%edx
c0104e50:	89 d0                	mov    %edx,%eax
c0104e52:	83 ec 0c             	sub    $0xc,%esp
c0104e55:	50                   	push   %eax
c0104e56:	e8 d1 23 00 00       	call   c010722c <alloc_pages>
c0104e5b:	83 c4 10             	add    $0x10,%esp
c0104e5e:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if(!page)
c0104e61:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104e65:	75 07                	jne    c0104e6e <__slob_get_free_pages+0x30>
    return NULL;
c0104e67:	b8 00 00 00 00       	mov    $0x0,%eax
c0104e6c:	eb 0e                	jmp    c0104e7c <__slob_get_free_pages+0x3e>
  return page2kva(page);
c0104e6e:	83 ec 0c             	sub    $0xc,%esp
c0104e71:	ff 75 f4             	pushl  -0xc(%ebp)
c0104e74:	e8 41 ff ff ff       	call   c0104dba <page2kva>
c0104e79:	83 c4 10             	add    $0x10,%esp
}
c0104e7c:	c9                   	leave  
c0104e7d:	c3                   	ret    

c0104e7e <__slob_free_pages>:

#define __slob_get_free_page(gfp) __slob_get_free_pages(gfp, 0)

static inline void __slob_free_pages(unsigned long kva, int order)
{
c0104e7e:	55                   	push   %ebp
c0104e7f:	89 e5                	mov    %esp,%ebp
c0104e81:	53                   	push   %ebx
c0104e82:	83 ec 04             	sub    $0x4,%esp
  free_pages(kva2page(kva), 1 << order);
c0104e85:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104e88:	ba 01 00 00 00       	mov    $0x1,%edx
c0104e8d:	89 c1                	mov    %eax,%ecx
c0104e8f:	d3 e2                	shl    %cl,%edx
c0104e91:	89 d0                	mov    %edx,%eax
c0104e93:	89 c3                	mov    %eax,%ebx
c0104e95:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e98:	83 ec 0c             	sub    $0xc,%esp
c0104e9b:	50                   	push   %eax
c0104e9c:	e8 5e ff ff ff       	call   c0104dff <kva2page>
c0104ea1:	83 c4 10             	add    $0x10,%esp
c0104ea4:	83 ec 08             	sub    $0x8,%esp
c0104ea7:	53                   	push   %ebx
c0104ea8:	50                   	push   %eax
c0104ea9:	e8 ea 23 00 00       	call   c0107298 <free_pages>
c0104eae:	83 c4 10             	add    $0x10,%esp
}
c0104eb1:	90                   	nop
c0104eb2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0104eb5:	c9                   	leave  
c0104eb6:	c3                   	ret    

c0104eb7 <slob_alloc>:

static void slob_free(void *b, int size);

static void *slob_alloc(size_t size, gfp_t gfp, int align)
{
c0104eb7:	55                   	push   %ebp
c0104eb8:	89 e5                	mov    %esp,%ebp
c0104eba:	83 ec 28             	sub    $0x28,%esp
  assert( (size + SLOB_UNIT) < PAGE_SIZE );
c0104ebd:	8b 45 08             	mov    0x8(%ebp),%eax
c0104ec0:	83 c0 08             	add    $0x8,%eax
c0104ec3:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c0104ec8:	76 16                	jbe    c0104ee0 <slob_alloc+0x29>
c0104eca:	68 ac 53 11 c0       	push   $0xc01153ac
c0104ecf:	68 cb 53 11 c0       	push   $0xc01153cb
c0104ed4:	6a 64                	push   $0x64
c0104ed6:	68 e0 53 11 c0       	push   $0xc01153e0
c0104edb:	e8 0d b6 ff ff       	call   c01004ed <__panic>

	slob_t *prev, *cur, *aligned = 0;
c0104ee0:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	int delta = 0, units = SLOB_UNITS(size);
c0104ee7:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c0104eee:	8b 45 08             	mov    0x8(%ebp),%eax
c0104ef1:	83 c0 07             	add    $0x7,%eax
c0104ef4:	c1 e8 03             	shr    $0x3,%eax
c0104ef7:	89 45 e0             	mov    %eax,-0x20(%ebp)
	unsigned long flags;

	spin_lock_irqsave(&slob_lock, flags);
c0104efa:	e8 1a fe ff ff       	call   c0104d19 <__intr_save>
c0104eff:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	prev = slobfree;
c0104f02:	a1 08 ea 14 c0       	mov    0xc014ea08,%eax
c0104f07:	89 45 f4             	mov    %eax,-0xc(%ebp)
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c0104f0a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104f0d:	8b 40 04             	mov    0x4(%eax),%eax
c0104f10:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (align) {
c0104f13:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0104f17:	74 25                	je     c0104f3e <slob_alloc+0x87>
			aligned = (slob_t *)ALIGN((unsigned long)cur, align);
c0104f19:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104f1c:	8b 45 10             	mov    0x10(%ebp),%eax
c0104f1f:	01 d0                	add    %edx,%eax
c0104f21:	8d 50 ff             	lea    -0x1(%eax),%edx
c0104f24:	8b 45 10             	mov    0x10(%ebp),%eax
c0104f27:	f7 d8                	neg    %eax
c0104f29:	21 d0                	and    %edx,%eax
c0104f2b:	89 45 ec             	mov    %eax,-0x14(%ebp)
			delta = aligned - cur;
c0104f2e:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0104f31:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104f34:	29 c2                	sub    %eax,%edx
c0104f36:	89 d0                	mov    %edx,%eax
c0104f38:	c1 f8 03             	sar    $0x3,%eax
c0104f3b:	89 45 e8             	mov    %eax,-0x18(%ebp)
		}
		if (cur->units >= units + delta) { /* room enough? */
c0104f3e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104f41:	8b 00                	mov    (%eax),%eax
c0104f43:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c0104f46:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0104f49:	01 ca                	add    %ecx,%edx
c0104f4b:	39 d0                	cmp    %edx,%eax
c0104f4d:	0f 8c b1 00 00 00    	jl     c0105004 <slob_alloc+0x14d>
			if (delta) { /* need to fragment head to align? */
c0104f53:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0104f57:	74 38                	je     c0104f91 <slob_alloc+0xda>
				aligned->units = cur->units - delta;
c0104f59:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104f5c:	8b 00                	mov    (%eax),%eax
c0104f5e:	2b 45 e8             	sub    -0x18(%ebp),%eax
c0104f61:	89 c2                	mov    %eax,%edx
c0104f63:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104f66:	89 10                	mov    %edx,(%eax)
				aligned->next = cur->next;
c0104f68:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104f6b:	8b 50 04             	mov    0x4(%eax),%edx
c0104f6e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104f71:	89 50 04             	mov    %edx,0x4(%eax)
				cur->next = aligned;
c0104f74:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104f77:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0104f7a:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = delta;
c0104f7d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104f80:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0104f83:	89 10                	mov    %edx,(%eax)
				prev = cur;
c0104f85:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104f88:	89 45 f4             	mov    %eax,-0xc(%ebp)
				cur = aligned;
c0104f8b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104f8e:	89 45 f0             	mov    %eax,-0x10(%ebp)
			}

			if (cur->units == units) /* exact fit? */
c0104f91:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104f94:	8b 00                	mov    (%eax),%eax
c0104f96:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0104f99:	75 0e                	jne    c0104fa9 <slob_alloc+0xf2>
				prev->next = cur->next; /* unlink */
c0104f9b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104f9e:	8b 50 04             	mov    0x4(%eax),%edx
c0104fa1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104fa4:	89 50 04             	mov    %edx,0x4(%eax)
c0104fa7:	eb 3c                	jmp    c0104fe5 <slob_alloc+0x12e>
			else { /* fragment */
				prev->next = cur + units;
c0104fa9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104fac:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0104fb3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104fb6:	01 c2                	add    %eax,%edx
c0104fb8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104fbb:	89 50 04             	mov    %edx,0x4(%eax)
				prev->next->units = cur->units - units;
c0104fbe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104fc1:	8b 40 04             	mov    0x4(%eax),%eax
c0104fc4:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104fc7:	8b 12                	mov    (%edx),%edx
c0104fc9:	2b 55 e0             	sub    -0x20(%ebp),%edx
c0104fcc:	89 10                	mov    %edx,(%eax)
				prev->next->next = cur->next;
c0104fce:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104fd1:	8b 40 04             	mov    0x4(%eax),%eax
c0104fd4:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104fd7:	8b 52 04             	mov    0x4(%edx),%edx
c0104fda:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = units;
c0104fdd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104fe0:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0104fe3:	89 10                	mov    %edx,(%eax)
			}

			slobfree = prev;
c0104fe5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104fe8:	a3 08 ea 14 c0       	mov    %eax,0xc014ea08
			spin_unlock_irqrestore(&slob_lock, flags);
c0104fed:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104ff0:	83 ec 0c             	sub    $0xc,%esp
c0104ff3:	50                   	push   %eax
c0104ff4:	e8 4a fd ff ff       	call   c0104d43 <__intr_restore>
c0104ff9:	83 c4 10             	add    $0x10,%esp
			return cur;
c0104ffc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104fff:	e9 80 00 00 00       	jmp    c0105084 <slob_alloc+0x1cd>
		}
		if (cur == slobfree) {
c0105004:	a1 08 ea 14 c0       	mov    0xc014ea08,%eax
c0105009:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010500c:	75 62                	jne    c0105070 <slob_alloc+0x1b9>
			spin_unlock_irqrestore(&slob_lock, flags);
c010500e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105011:	83 ec 0c             	sub    $0xc,%esp
c0105014:	50                   	push   %eax
c0105015:	e8 29 fd ff ff       	call   c0104d43 <__intr_restore>
c010501a:	83 c4 10             	add    $0x10,%esp

			if (size == PAGE_SIZE) /* trying to shrink arena? */
c010501d:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c0105024:	75 07                	jne    c010502d <slob_alloc+0x176>
				return 0;
c0105026:	b8 00 00 00 00       	mov    $0x0,%eax
c010502b:	eb 57                	jmp    c0105084 <slob_alloc+0x1cd>

			cur = (slob_t *)__slob_get_free_page(gfp);
c010502d:	83 ec 08             	sub    $0x8,%esp
c0105030:	6a 00                	push   $0x0
c0105032:	ff 75 0c             	pushl  0xc(%ebp)
c0105035:	e8 04 fe ff ff       	call   c0104e3e <__slob_get_free_pages>
c010503a:	83 c4 10             	add    $0x10,%esp
c010503d:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (!cur)
c0105040:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0105044:	75 07                	jne    c010504d <slob_alloc+0x196>
				return 0;
c0105046:	b8 00 00 00 00       	mov    $0x0,%eax
c010504b:	eb 37                	jmp    c0105084 <slob_alloc+0x1cd>

			slob_free(cur, PAGE_SIZE);
c010504d:	83 ec 08             	sub    $0x8,%esp
c0105050:	68 00 10 00 00       	push   $0x1000
c0105055:	ff 75 f0             	pushl  -0x10(%ebp)
c0105058:	e8 29 00 00 00       	call   c0105086 <slob_free>
c010505d:	83 c4 10             	add    $0x10,%esp
			spin_lock_irqsave(&slob_lock, flags);
c0105060:	e8 b4 fc ff ff       	call   c0104d19 <__intr_save>
c0105065:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			cur = slobfree;
c0105068:	a1 08 ea 14 c0       	mov    0xc014ea08,%eax
c010506d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int delta = 0, units = SLOB_UNITS(size);
	unsigned long flags;

	spin_lock_irqsave(&slob_lock, flags);
	prev = slobfree;
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c0105070:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105073:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105076:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105079:	8b 40 04             	mov    0x4(%eax),%eax
c010507c:	89 45 f0             	mov    %eax,-0x10(%ebp)

			slob_free(cur, PAGE_SIZE);
			spin_lock_irqsave(&slob_lock, flags);
			cur = slobfree;
		}
	}
c010507f:	e9 8f fe ff ff       	jmp    c0104f13 <slob_alloc+0x5c>
}
c0105084:	c9                   	leave  
c0105085:	c3                   	ret    

c0105086 <slob_free>:

static void slob_free(void *block, int size)
{
c0105086:	55                   	push   %ebp
c0105087:	89 e5                	mov    %esp,%ebp
c0105089:	83 ec 18             	sub    $0x18,%esp
	slob_t *cur, *b = (slob_t *)block;
c010508c:	8b 45 08             	mov    0x8(%ebp),%eax
c010508f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c0105092:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0105096:	0f 84 05 01 00 00    	je     c01051a1 <slob_free+0x11b>
		return;

	if (size)
c010509c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01050a0:	74 10                	je     c01050b2 <slob_free+0x2c>
		b->units = SLOB_UNITS(size);
c01050a2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01050a5:	83 c0 07             	add    $0x7,%eax
c01050a8:	c1 e8 03             	shr    $0x3,%eax
c01050ab:	89 c2                	mov    %eax,%edx
c01050ad:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01050b0:	89 10                	mov    %edx,(%eax)

	/* Find reinsertion point */
	spin_lock_irqsave(&slob_lock, flags);
c01050b2:	e8 62 fc ff ff       	call   c0104d19 <__intr_save>
c01050b7:	89 45 ec             	mov    %eax,-0x14(%ebp)
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c01050ba:	a1 08 ea 14 c0       	mov    0xc014ea08,%eax
c01050bf:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01050c2:	eb 27                	jmp    c01050eb <slob_free+0x65>
		if (cur >= cur->next && (b > cur || b < cur->next))
c01050c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01050c7:	8b 40 04             	mov    0x4(%eax),%eax
c01050ca:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01050cd:	77 13                	ja     c01050e2 <slob_free+0x5c>
c01050cf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01050d2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01050d5:	77 27                	ja     c01050fe <slob_free+0x78>
c01050d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01050da:	8b 40 04             	mov    0x4(%eax),%eax
c01050dd:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01050e0:	77 1c                	ja     c01050fe <slob_free+0x78>
	if (size)
		b->units = SLOB_UNITS(size);

	/* Find reinsertion point */
	spin_lock_irqsave(&slob_lock, flags);
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c01050e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01050e5:	8b 40 04             	mov    0x4(%eax),%eax
c01050e8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01050eb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01050ee:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01050f1:	76 d1                	jbe    c01050c4 <slob_free+0x3e>
c01050f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01050f6:	8b 40 04             	mov    0x4(%eax),%eax
c01050f9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01050fc:	76 c6                	jbe    c01050c4 <slob_free+0x3e>
		if (cur >= cur->next && (b > cur || b < cur->next))
			break;

	if (b + b->units == cur->next) {
c01050fe:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105101:	8b 00                	mov    (%eax),%eax
c0105103:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c010510a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010510d:	01 c2                	add    %eax,%edx
c010510f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105112:	8b 40 04             	mov    0x4(%eax),%eax
c0105115:	39 c2                	cmp    %eax,%edx
c0105117:	75 25                	jne    c010513e <slob_free+0xb8>
		b->units += cur->next->units;
c0105119:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010511c:	8b 10                	mov    (%eax),%edx
c010511e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105121:	8b 40 04             	mov    0x4(%eax),%eax
c0105124:	8b 00                	mov    (%eax),%eax
c0105126:	01 c2                	add    %eax,%edx
c0105128:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010512b:	89 10                	mov    %edx,(%eax)
		b->next = cur->next->next;
c010512d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105130:	8b 40 04             	mov    0x4(%eax),%eax
c0105133:	8b 50 04             	mov    0x4(%eax),%edx
c0105136:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105139:	89 50 04             	mov    %edx,0x4(%eax)
c010513c:	eb 0c                	jmp    c010514a <slob_free+0xc4>
	} else
		b->next = cur->next;
c010513e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105141:	8b 50 04             	mov    0x4(%eax),%edx
c0105144:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105147:	89 50 04             	mov    %edx,0x4(%eax)

	if (cur + cur->units == b) {
c010514a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010514d:	8b 00                	mov    (%eax),%eax
c010514f:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0105156:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105159:	01 d0                	add    %edx,%eax
c010515b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010515e:	75 1f                	jne    c010517f <slob_free+0xf9>
		cur->units += b->units;
c0105160:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105163:	8b 10                	mov    (%eax),%edx
c0105165:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105168:	8b 00                	mov    (%eax),%eax
c010516a:	01 c2                	add    %eax,%edx
c010516c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010516f:	89 10                	mov    %edx,(%eax)
		cur->next = b->next;
c0105171:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105174:	8b 50 04             	mov    0x4(%eax),%edx
c0105177:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010517a:	89 50 04             	mov    %edx,0x4(%eax)
c010517d:	eb 09                	jmp    c0105188 <slob_free+0x102>
	} else
		cur->next = b;
c010517f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105182:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0105185:	89 50 04             	mov    %edx,0x4(%eax)

	slobfree = cur;
c0105188:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010518b:	a3 08 ea 14 c0       	mov    %eax,0xc014ea08

	spin_unlock_irqrestore(&slob_lock, flags);
c0105190:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105193:	83 ec 0c             	sub    $0xc,%esp
c0105196:	50                   	push   %eax
c0105197:	e8 a7 fb ff ff       	call   c0104d43 <__intr_restore>
c010519c:	83 c4 10             	add    $0x10,%esp
c010519f:	eb 01                	jmp    c01051a2 <slob_free+0x11c>
{
	slob_t *cur, *b = (slob_t *)block;
	unsigned long flags;

	if (!block)
		return;
c01051a1:	90                   	nop
		cur->next = b;

	slobfree = cur;

	spin_unlock_irqrestore(&slob_lock, flags);
}
c01051a2:	c9                   	leave  
c01051a3:	c3                   	ret    

c01051a4 <slob_init>:



void
slob_init(void) {
c01051a4:	55                   	push   %ebp
c01051a5:	89 e5                	mov    %esp,%ebp
c01051a7:	83 ec 08             	sub    $0x8,%esp
  cprintf("use SLOB allocator\n");
c01051aa:	83 ec 0c             	sub    $0xc,%esp
c01051ad:	68 f2 53 11 c0       	push   $0xc01153f2
c01051b2:	e8 d0 b1 ff ff       	call   c0100387 <cprintf>
c01051b7:	83 c4 10             	add    $0x10,%esp
}
c01051ba:	90                   	nop
c01051bb:	c9                   	leave  
c01051bc:	c3                   	ret    

c01051bd <kmalloc_init>:

inline void 
kmalloc_init(void) {
c01051bd:	55                   	push   %ebp
c01051be:	89 e5                	mov    %esp,%ebp
c01051c0:	83 ec 08             	sub    $0x8,%esp
    slob_init();
c01051c3:	e8 dc ff ff ff       	call   c01051a4 <slob_init>
    cprintf("kmalloc_init() succeeded!\n");
c01051c8:	83 ec 0c             	sub    $0xc,%esp
c01051cb:	68 06 54 11 c0       	push   $0xc0115406
c01051d0:	e8 b2 b1 ff ff       	call   c0100387 <cprintf>
c01051d5:	83 c4 10             	add    $0x10,%esp
}
c01051d8:	90                   	nop
c01051d9:	c9                   	leave  
c01051da:	c3                   	ret    

c01051db <slob_allocated>:

size_t
slob_allocated(void) {
c01051db:	55                   	push   %ebp
c01051dc:	89 e5                	mov    %esp,%ebp
  return 0;
c01051de:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01051e3:	5d                   	pop    %ebp
c01051e4:	c3                   	ret    

c01051e5 <kallocated>:

size_t
kallocated(void) {
c01051e5:	55                   	push   %ebp
c01051e6:	89 e5                	mov    %esp,%ebp
   return slob_allocated();
c01051e8:	e8 ee ff ff ff       	call   c01051db <slob_allocated>
}
c01051ed:	5d                   	pop    %ebp
c01051ee:	c3                   	ret    

c01051ef <find_order>:

static int find_order(int size)
{
c01051ef:	55                   	push   %ebp
c01051f0:	89 e5                	mov    %esp,%ebp
c01051f2:	83 ec 10             	sub    $0x10,%esp
	int order = 0;
c01051f5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for ( ; size > 4096 ; size >>=1)
c01051fc:	eb 07                	jmp    c0105205 <find_order+0x16>
		order++;
c01051fe:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
}

static int find_order(int size)
{
	int order = 0;
	for ( ; size > 4096 ; size >>=1)
c0105202:	d1 7d 08             	sarl   0x8(%ebp)
c0105205:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c010520c:	7f f0                	jg     c01051fe <find_order+0xf>
		order++;
	return order;
c010520e:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0105211:	c9                   	leave  
c0105212:	c3                   	ret    

c0105213 <__kmalloc>:

static void *__kmalloc(size_t size, gfp_t gfp)
{
c0105213:	55                   	push   %ebp
c0105214:	89 e5                	mov    %esp,%ebp
c0105216:	83 ec 18             	sub    $0x18,%esp
	slob_t *m;
	bigblock_t *bb;
	unsigned long flags;

	if (size < PAGE_SIZE - SLOB_UNIT) {
c0105219:	81 7d 08 f7 0f 00 00 	cmpl   $0xff7,0x8(%ebp)
c0105220:	77 35                	ja     c0105257 <__kmalloc+0x44>
		m = slob_alloc(size + SLOB_UNIT, gfp, 0);
c0105222:	8b 45 08             	mov    0x8(%ebp),%eax
c0105225:	83 c0 08             	add    $0x8,%eax
c0105228:	83 ec 04             	sub    $0x4,%esp
c010522b:	6a 00                	push   $0x0
c010522d:	ff 75 0c             	pushl  0xc(%ebp)
c0105230:	50                   	push   %eax
c0105231:	e8 81 fc ff ff       	call   c0104eb7 <slob_alloc>
c0105236:	83 c4 10             	add    $0x10,%esp
c0105239:	89 45 f4             	mov    %eax,-0xc(%ebp)
		return m ? (void *)(m + 1) : 0;
c010523c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105240:	74 0b                	je     c010524d <__kmalloc+0x3a>
c0105242:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105245:	83 c0 08             	add    $0x8,%eax
c0105248:	e9 b3 00 00 00       	jmp    c0105300 <__kmalloc+0xed>
c010524d:	b8 00 00 00 00       	mov    $0x0,%eax
c0105252:	e9 a9 00 00 00       	jmp    c0105300 <__kmalloc+0xed>
	}

	bb = slob_alloc(sizeof(bigblock_t), gfp, 0);
c0105257:	83 ec 04             	sub    $0x4,%esp
c010525a:	6a 00                	push   $0x0
c010525c:	ff 75 0c             	pushl  0xc(%ebp)
c010525f:	6a 0c                	push   $0xc
c0105261:	e8 51 fc ff ff       	call   c0104eb7 <slob_alloc>
c0105266:	83 c4 10             	add    $0x10,%esp
c0105269:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (!bb)
c010526c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0105270:	75 0a                	jne    c010527c <__kmalloc+0x69>
		return 0;
c0105272:	b8 00 00 00 00       	mov    $0x0,%eax
c0105277:	e9 84 00 00 00       	jmp    c0105300 <__kmalloc+0xed>

	bb->order = find_order(size);
c010527c:	8b 45 08             	mov    0x8(%ebp),%eax
c010527f:	83 ec 0c             	sub    $0xc,%esp
c0105282:	50                   	push   %eax
c0105283:	e8 67 ff ff ff       	call   c01051ef <find_order>
c0105288:	83 c4 10             	add    $0x10,%esp
c010528b:	89 c2                	mov    %eax,%edx
c010528d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105290:	89 10                	mov    %edx,(%eax)
	bb->pages = (void *)__slob_get_free_pages(gfp, bb->order);
c0105292:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105295:	8b 00                	mov    (%eax),%eax
c0105297:	83 ec 08             	sub    $0x8,%esp
c010529a:	50                   	push   %eax
c010529b:	ff 75 0c             	pushl  0xc(%ebp)
c010529e:	e8 9b fb ff ff       	call   c0104e3e <__slob_get_free_pages>
c01052a3:	83 c4 10             	add    $0x10,%esp
c01052a6:	89 c2                	mov    %eax,%edx
c01052a8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01052ab:	89 50 04             	mov    %edx,0x4(%eax)

	if (bb->pages) {
c01052ae:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01052b1:	8b 40 04             	mov    0x4(%eax),%eax
c01052b4:	85 c0                	test   %eax,%eax
c01052b6:	74 33                	je     c01052eb <__kmalloc+0xd8>
		spin_lock_irqsave(&block_lock, flags);
c01052b8:	e8 5c fa ff ff       	call   c0104d19 <__intr_save>
c01052bd:	89 45 ec             	mov    %eax,-0x14(%ebp)
		bb->next = bigblocks;
c01052c0:	8b 15 68 1f 15 c0    	mov    0xc0151f68,%edx
c01052c6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01052c9:	89 50 08             	mov    %edx,0x8(%eax)
		bigblocks = bb;
c01052cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01052cf:	a3 68 1f 15 c0       	mov    %eax,0xc0151f68
		spin_unlock_irqrestore(&block_lock, flags);
c01052d4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01052d7:	83 ec 0c             	sub    $0xc,%esp
c01052da:	50                   	push   %eax
c01052db:	e8 63 fa ff ff       	call   c0104d43 <__intr_restore>
c01052e0:	83 c4 10             	add    $0x10,%esp
		return bb->pages;
c01052e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01052e6:	8b 40 04             	mov    0x4(%eax),%eax
c01052e9:	eb 15                	jmp    c0105300 <__kmalloc+0xed>
	}

	slob_free(bb, sizeof(bigblock_t));
c01052eb:	83 ec 08             	sub    $0x8,%esp
c01052ee:	6a 0c                	push   $0xc
c01052f0:	ff 75 f0             	pushl  -0x10(%ebp)
c01052f3:	e8 8e fd ff ff       	call   c0105086 <slob_free>
c01052f8:	83 c4 10             	add    $0x10,%esp
	return 0;
c01052fb:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105300:	c9                   	leave  
c0105301:	c3                   	ret    

c0105302 <kmalloc>:

void *
kmalloc(size_t size)
{
c0105302:	55                   	push   %ebp
c0105303:	89 e5                	mov    %esp,%ebp
c0105305:	83 ec 08             	sub    $0x8,%esp
  return __kmalloc(size, 0);
c0105308:	83 ec 08             	sub    $0x8,%esp
c010530b:	6a 00                	push   $0x0
c010530d:	ff 75 08             	pushl  0x8(%ebp)
c0105310:	e8 fe fe ff ff       	call   c0105213 <__kmalloc>
c0105315:	83 c4 10             	add    $0x10,%esp
}
c0105318:	c9                   	leave  
c0105319:	c3                   	ret    

c010531a <kfree>:


void kfree(void *block)
{
c010531a:	55                   	push   %ebp
c010531b:	89 e5                	mov    %esp,%ebp
c010531d:	83 ec 18             	sub    $0x18,%esp
	bigblock_t *bb, **last = &bigblocks;
c0105320:	c7 45 f0 68 1f 15 c0 	movl   $0xc0151f68,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c0105327:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010532b:	0f 84 ac 00 00 00    	je     c01053dd <kfree+0xc3>
		return;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c0105331:	8b 45 08             	mov    0x8(%ebp),%eax
c0105334:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105339:	85 c0                	test   %eax,%eax
c010533b:	0f 85 85 00 00 00    	jne    c01053c6 <kfree+0xac>
		/* might be on the big block list */
		spin_lock_irqsave(&block_lock, flags);
c0105341:	e8 d3 f9 ff ff       	call   c0104d19 <__intr_save>
c0105346:	89 45 ec             	mov    %eax,-0x14(%ebp)
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c0105349:	a1 68 1f 15 c0       	mov    0xc0151f68,%eax
c010534e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105351:	eb 5e                	jmp    c01053b1 <kfree+0x97>
			if (bb->pages == block) {
c0105353:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105356:	8b 40 04             	mov    0x4(%eax),%eax
c0105359:	3b 45 08             	cmp    0x8(%ebp),%eax
c010535c:	75 41                	jne    c010539f <kfree+0x85>
				*last = bb->next;
c010535e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105361:	8b 50 08             	mov    0x8(%eax),%edx
c0105364:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105367:	89 10                	mov    %edx,(%eax)
				spin_unlock_irqrestore(&block_lock, flags);
c0105369:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010536c:	83 ec 0c             	sub    $0xc,%esp
c010536f:	50                   	push   %eax
c0105370:	e8 ce f9 ff ff       	call   c0104d43 <__intr_restore>
c0105375:	83 c4 10             	add    $0x10,%esp
				__slob_free_pages((unsigned long)block, bb->order);
c0105378:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010537b:	8b 10                	mov    (%eax),%edx
c010537d:	8b 45 08             	mov    0x8(%ebp),%eax
c0105380:	83 ec 08             	sub    $0x8,%esp
c0105383:	52                   	push   %edx
c0105384:	50                   	push   %eax
c0105385:	e8 f4 fa ff ff       	call   c0104e7e <__slob_free_pages>
c010538a:	83 c4 10             	add    $0x10,%esp
				slob_free(bb, sizeof(bigblock_t));
c010538d:	83 ec 08             	sub    $0x8,%esp
c0105390:	6a 0c                	push   $0xc
c0105392:	ff 75 f4             	pushl  -0xc(%ebp)
c0105395:	e8 ec fc ff ff       	call   c0105086 <slob_free>
c010539a:	83 c4 10             	add    $0x10,%esp
				return;
c010539d:	eb 3f                	jmp    c01053de <kfree+0xc4>
		return;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
		/* might be on the big block list */
		spin_lock_irqsave(&block_lock, flags);
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c010539f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01053a2:	83 c0 08             	add    $0x8,%eax
c01053a5:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01053a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01053ab:	8b 40 08             	mov    0x8(%eax),%eax
c01053ae:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01053b1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01053b5:	75 9c                	jne    c0105353 <kfree+0x39>
				__slob_free_pages((unsigned long)block, bb->order);
				slob_free(bb, sizeof(bigblock_t));
				return;
			}
		}
		spin_unlock_irqrestore(&block_lock, flags);
c01053b7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01053ba:	83 ec 0c             	sub    $0xc,%esp
c01053bd:	50                   	push   %eax
c01053be:	e8 80 f9 ff ff       	call   c0104d43 <__intr_restore>
c01053c3:	83 c4 10             	add    $0x10,%esp
	}

	slob_free((slob_t *)block - 1, 0);
c01053c6:	8b 45 08             	mov    0x8(%ebp),%eax
c01053c9:	83 e8 08             	sub    $0x8,%eax
c01053cc:	83 ec 08             	sub    $0x8,%esp
c01053cf:	6a 00                	push   $0x0
c01053d1:	50                   	push   %eax
c01053d2:	e8 af fc ff ff       	call   c0105086 <slob_free>
c01053d7:	83 c4 10             	add    $0x10,%esp
	return;
c01053da:	90                   	nop
c01053db:	eb 01                	jmp    c01053de <kfree+0xc4>
{
	bigblock_t *bb, **last = &bigblocks;
	unsigned long flags;

	if (!block)
		return;
c01053dd:	90                   	nop
		spin_unlock_irqrestore(&block_lock, flags);
	}

	slob_free((slob_t *)block - 1, 0);
	return;
}
c01053de:	c9                   	leave  
c01053df:	c3                   	ret    

c01053e0 <ksize>:


unsigned int ksize(const void *block)
{
c01053e0:	55                   	push   %ebp
c01053e1:	89 e5                	mov    %esp,%ebp
c01053e3:	83 ec 18             	sub    $0x18,%esp
	bigblock_t *bb;
	unsigned long flags;

	if (!block)
c01053e6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01053ea:	75 07                	jne    c01053f3 <ksize+0x13>
		return 0;
c01053ec:	b8 00 00 00 00       	mov    $0x0,%eax
c01053f1:	eb 73                	jmp    c0105466 <ksize+0x86>

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c01053f3:	8b 45 08             	mov    0x8(%ebp),%eax
c01053f6:	25 ff 0f 00 00       	and    $0xfff,%eax
c01053fb:	85 c0                	test   %eax,%eax
c01053fd:	75 5c                	jne    c010545b <ksize+0x7b>
		spin_lock_irqsave(&block_lock, flags);
c01053ff:	e8 15 f9 ff ff       	call   c0104d19 <__intr_save>
c0105404:	89 45 f0             	mov    %eax,-0x10(%ebp)
		for (bb = bigblocks; bb; bb = bb->next)
c0105407:	a1 68 1f 15 c0       	mov    0xc0151f68,%eax
c010540c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010540f:	eb 35                	jmp    c0105446 <ksize+0x66>
			if (bb->pages == block) {
c0105411:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105414:	8b 40 04             	mov    0x4(%eax),%eax
c0105417:	3b 45 08             	cmp    0x8(%ebp),%eax
c010541a:	75 21                	jne    c010543d <ksize+0x5d>
				spin_unlock_irqrestore(&slob_lock, flags);
c010541c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010541f:	83 ec 0c             	sub    $0xc,%esp
c0105422:	50                   	push   %eax
c0105423:	e8 1b f9 ff ff       	call   c0104d43 <__intr_restore>
c0105428:	83 c4 10             	add    $0x10,%esp
				return PAGE_SIZE << bb->order;
c010542b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010542e:	8b 00                	mov    (%eax),%eax
c0105430:	ba 00 10 00 00       	mov    $0x1000,%edx
c0105435:	89 c1                	mov    %eax,%ecx
c0105437:	d3 e2                	shl    %cl,%edx
c0105439:	89 d0                	mov    %edx,%eax
c010543b:	eb 29                	jmp    c0105466 <ksize+0x86>
	if (!block)
		return 0;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
		spin_lock_irqsave(&block_lock, flags);
		for (bb = bigblocks; bb; bb = bb->next)
c010543d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105440:	8b 40 08             	mov    0x8(%eax),%eax
c0105443:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105446:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010544a:	75 c5                	jne    c0105411 <ksize+0x31>
			if (bb->pages == block) {
				spin_unlock_irqrestore(&slob_lock, flags);
				return PAGE_SIZE << bb->order;
			}
		spin_unlock_irqrestore(&block_lock, flags);
c010544c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010544f:	83 ec 0c             	sub    $0xc,%esp
c0105452:	50                   	push   %eax
c0105453:	e8 eb f8 ff ff       	call   c0104d43 <__intr_restore>
c0105458:	83 c4 10             	add    $0x10,%esp
	}

	return ((slob_t *)block - 1)->units * SLOB_UNIT;
c010545b:	8b 45 08             	mov    0x8(%ebp),%eax
c010545e:	83 e8 08             	sub    $0x8,%eax
c0105461:	8b 00                	mov    (%eax),%eax
c0105463:	c1 e0 03             	shl    $0x3,%eax
}
c0105466:	c9                   	leave  
c0105467:	c3                   	ret    

c0105468 <pa2page>:
page2pa(struct Page *page) {
    return page2ppn(page) << PGSHIFT;
}

static inline struct Page *
pa2page(uintptr_t pa) {
c0105468:	55                   	push   %ebp
c0105469:	89 e5                	mov    %esp,%ebp
c010546b:	83 ec 08             	sub    $0x8,%esp
    if (PPN(pa) >= npage) {
c010546e:	8b 45 08             	mov    0x8(%ebp),%eax
c0105471:	c1 e8 0c             	shr    $0xc,%eax
c0105474:	89 c2                	mov    %eax,%edx
c0105476:	a1 80 1f 15 c0       	mov    0xc0151f80,%eax
c010547b:	39 c2                	cmp    %eax,%edx
c010547d:	72 14                	jb     c0105493 <pa2page+0x2b>
        panic("pa2page called with invalid pa");
c010547f:	83 ec 04             	sub    $0x4,%esp
c0105482:	68 24 54 11 c0       	push   $0xc0115424
c0105487:	6a 5e                	push   $0x5e
c0105489:	68 43 54 11 c0       	push   $0xc0115443
c010548e:	e8 5a b0 ff ff       	call   c01004ed <__panic>
    }
    return &pages[PPN(pa)];
c0105493:	a1 58 52 15 c0       	mov    0xc0155258,%eax
c0105498:	8b 55 08             	mov    0x8(%ebp),%edx
c010549b:	c1 ea 0c             	shr    $0xc,%edx
c010549e:	c1 e2 05             	shl    $0x5,%edx
c01054a1:	01 d0                	add    %edx,%eax
}
c01054a3:	c9                   	leave  
c01054a4:	c3                   	ret    

c01054a5 <pte2page>:
kva2page(void *kva) {
    return pa2page(PADDR(kva));
}

static inline struct Page *
pte2page(pte_t pte) {
c01054a5:	55                   	push   %ebp
c01054a6:	89 e5                	mov    %esp,%ebp
c01054a8:	83 ec 08             	sub    $0x8,%esp
    if (!(pte & PTE_P)) {
c01054ab:	8b 45 08             	mov    0x8(%ebp),%eax
c01054ae:	83 e0 01             	and    $0x1,%eax
c01054b1:	85 c0                	test   %eax,%eax
c01054b3:	75 14                	jne    c01054c9 <pte2page+0x24>
        panic("pte2page called with invalid pte");
c01054b5:	83 ec 04             	sub    $0x4,%esp
c01054b8:	68 54 54 11 c0       	push   $0xc0115454
c01054bd:	6a 70                	push   $0x70
c01054bf:	68 43 54 11 c0       	push   $0xc0115443
c01054c4:	e8 24 b0 ff ff       	call   c01004ed <__panic>
    }
    return pa2page(PTE_ADDR(pte));
c01054c9:	8b 45 08             	mov    0x8(%ebp),%eax
c01054cc:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01054d1:	83 ec 0c             	sub    $0xc,%esp
c01054d4:	50                   	push   %eax
c01054d5:	e8 8e ff ff ff       	call   c0105468 <pa2page>
c01054da:	83 c4 10             	add    $0x10,%esp
}
c01054dd:	c9                   	leave  
c01054de:	c3                   	ret    

c01054df <pde2page>:

static inline struct Page *
pde2page(pde_t pde) {
c01054df:	55                   	push   %ebp
c01054e0:	89 e5                	mov    %esp,%ebp
c01054e2:	83 ec 08             	sub    $0x8,%esp
    return pa2page(PDE_ADDR(pde));
c01054e5:	8b 45 08             	mov    0x8(%ebp),%eax
c01054e8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01054ed:	83 ec 0c             	sub    $0xc,%esp
c01054f0:	50                   	push   %eax
c01054f1:	e8 72 ff ff ff       	call   c0105468 <pa2page>
c01054f6:	83 c4 10             	add    $0x10,%esp
}
c01054f9:	c9                   	leave  
c01054fa:	c3                   	ret    

c01054fb <swap_init>:

static void check_swap(void);

int
swap_init(void)
{
c01054fb:	55                   	push   %ebp
c01054fc:	89 e5                	mov    %esp,%ebp
c01054fe:	83 ec 18             	sub    $0x18,%esp
     swapfs_init();
c0105501:	e8 b6 8e 00 00       	call   c010e3bc <swapfs_init>

     if (!(1024 <= max_swap_offset && max_swap_offset < MAX_SWAP_OFFSET_LIMIT))
c0105506:	a1 1c 52 15 c0       	mov    0xc015521c,%eax
c010550b:	3d ff 03 00 00       	cmp    $0x3ff,%eax
c0105510:	76 0c                	jbe    c010551e <swap_init+0x23>
c0105512:	a1 1c 52 15 c0       	mov    0xc015521c,%eax
c0105517:	3d ff ff ff 00       	cmp    $0xffffff,%eax
c010551c:	76 17                	jbe    c0105535 <swap_init+0x3a>
     {
          panic("bad max_swap_offset %08x.\n", max_swap_offset);
c010551e:	a1 1c 52 15 c0       	mov    0xc015521c,%eax
c0105523:	50                   	push   %eax
c0105524:	68 75 54 11 c0       	push   $0xc0115475
c0105529:	6a 27                	push   $0x27
c010552b:	68 90 54 11 c0       	push   $0xc0115490
c0105530:	e8 b8 af ff ff       	call   c01004ed <__panic>
     }
     

     sm = &swap_manager_fifo;
c0105535:	c7 05 74 1f 15 c0 e0 	movl   $0xc014e9e0,0xc0151f74
c010553c:	e9 14 c0 
     int r = sm->init();
c010553f:	a1 74 1f 15 c0       	mov    0xc0151f74,%eax
c0105544:	8b 40 04             	mov    0x4(%eax),%eax
c0105547:	ff d0                	call   *%eax
c0105549:	89 45 f4             	mov    %eax,-0xc(%ebp)
     
     if (r == 0)
c010554c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105550:	75 27                	jne    c0105579 <swap_init+0x7e>
     {
          swap_init_ok = 1;
c0105552:	c7 05 6c 1f 15 c0 01 	movl   $0x1,0xc0151f6c
c0105559:	00 00 00 
          cprintf("SWAP: manager = %s\n", sm->name);
c010555c:	a1 74 1f 15 c0       	mov    0xc0151f74,%eax
c0105561:	8b 00                	mov    (%eax),%eax
c0105563:	83 ec 08             	sub    $0x8,%esp
c0105566:	50                   	push   %eax
c0105567:	68 9f 54 11 c0       	push   $0xc011549f
c010556c:	e8 16 ae ff ff       	call   c0100387 <cprintf>
c0105571:	83 c4 10             	add    $0x10,%esp
          check_swap();
c0105574:	e8 f7 03 00 00       	call   c0105970 <check_swap>
     }

     return r;
c0105579:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010557c:	c9                   	leave  
c010557d:	c3                   	ret    

c010557e <swap_init_mm>:

int
swap_init_mm(struct mm_struct *mm)
{
c010557e:	55                   	push   %ebp
c010557f:	89 e5                	mov    %esp,%ebp
c0105581:	83 ec 08             	sub    $0x8,%esp
     return sm->init_mm(mm);
c0105584:	a1 74 1f 15 c0       	mov    0xc0151f74,%eax
c0105589:	8b 40 08             	mov    0x8(%eax),%eax
c010558c:	83 ec 0c             	sub    $0xc,%esp
c010558f:	ff 75 08             	pushl  0x8(%ebp)
c0105592:	ff d0                	call   *%eax
c0105594:	83 c4 10             	add    $0x10,%esp
}
c0105597:	c9                   	leave  
c0105598:	c3                   	ret    

c0105599 <swap_tick_event>:

int
swap_tick_event(struct mm_struct *mm)
{
c0105599:	55                   	push   %ebp
c010559a:	89 e5                	mov    %esp,%ebp
c010559c:	83 ec 08             	sub    $0x8,%esp
     return sm->tick_event(mm);
c010559f:	a1 74 1f 15 c0       	mov    0xc0151f74,%eax
c01055a4:	8b 40 0c             	mov    0xc(%eax),%eax
c01055a7:	83 ec 0c             	sub    $0xc,%esp
c01055aa:	ff 75 08             	pushl  0x8(%ebp)
c01055ad:	ff d0                	call   *%eax
c01055af:	83 c4 10             	add    $0x10,%esp
}
c01055b2:	c9                   	leave  
c01055b3:	c3                   	ret    

c01055b4 <swap_map_swappable>:

int
swap_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c01055b4:	55                   	push   %ebp
c01055b5:	89 e5                	mov    %esp,%ebp
c01055b7:	83 ec 08             	sub    $0x8,%esp
     return sm->map_swappable(mm, addr, page, swap_in);
c01055ba:	a1 74 1f 15 c0       	mov    0xc0151f74,%eax
c01055bf:	8b 40 10             	mov    0x10(%eax),%eax
c01055c2:	ff 75 14             	pushl  0x14(%ebp)
c01055c5:	ff 75 10             	pushl  0x10(%ebp)
c01055c8:	ff 75 0c             	pushl  0xc(%ebp)
c01055cb:	ff 75 08             	pushl  0x8(%ebp)
c01055ce:	ff d0                	call   *%eax
c01055d0:	83 c4 10             	add    $0x10,%esp
}
c01055d3:	c9                   	leave  
c01055d4:	c3                   	ret    

c01055d5 <swap_set_unswappable>:

int
swap_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c01055d5:	55                   	push   %ebp
c01055d6:	89 e5                	mov    %esp,%ebp
c01055d8:	83 ec 08             	sub    $0x8,%esp
     return sm->set_unswappable(mm, addr);
c01055db:	a1 74 1f 15 c0       	mov    0xc0151f74,%eax
c01055e0:	8b 40 14             	mov    0x14(%eax),%eax
c01055e3:	83 ec 08             	sub    $0x8,%esp
c01055e6:	ff 75 0c             	pushl  0xc(%ebp)
c01055e9:	ff 75 08             	pushl  0x8(%ebp)
c01055ec:	ff d0                	call   *%eax
c01055ee:	83 c4 10             	add    $0x10,%esp
}
c01055f1:	c9                   	leave  
c01055f2:	c3                   	ret    

c01055f3 <swap_out>:

volatile unsigned int swap_out_num=0;

int
swap_out(struct mm_struct *mm, int n, int in_tick)
{
c01055f3:	55                   	push   %ebp
c01055f4:	89 e5                	mov    %esp,%ebp
c01055f6:	83 ec 28             	sub    $0x28,%esp
     int i;
     for (i = 0; i != n; ++ i)
c01055f9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0105600:	e9 2e 01 00 00       	jmp    c0105733 <swap_out+0x140>
     {
          uintptr_t v;
          //struct Page **ptr_page=NULL;
          struct Page *page;
          // cprintf("i %d, SWAP: call swap_out_victim\n",i);
          int r = sm->swap_out_victim(mm, &page, in_tick);
c0105605:	a1 74 1f 15 c0       	mov    0xc0151f74,%eax
c010560a:	8b 40 18             	mov    0x18(%eax),%eax
c010560d:	83 ec 04             	sub    $0x4,%esp
c0105610:	ff 75 10             	pushl  0x10(%ebp)
c0105613:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c0105616:	52                   	push   %edx
c0105617:	ff 75 08             	pushl  0x8(%ebp)
c010561a:	ff d0                	call   *%eax
c010561c:	83 c4 10             	add    $0x10,%esp
c010561f:	89 45 f0             	mov    %eax,-0x10(%ebp)
          if (r != 0) {
c0105622:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0105626:	74 18                	je     c0105640 <swap_out+0x4d>
                    cprintf("i %d, swap_out: call swap_out_victim failed\n",i);
c0105628:	83 ec 08             	sub    $0x8,%esp
c010562b:	ff 75 f4             	pushl  -0xc(%ebp)
c010562e:	68 b4 54 11 c0       	push   $0xc01154b4
c0105633:	e8 4f ad ff ff       	call   c0100387 <cprintf>
c0105638:	83 c4 10             	add    $0x10,%esp
c010563b:	e9 ff 00 00 00       	jmp    c010573f <swap_out+0x14c>
          }          
          //assert(!PageReserved(page));

          //cprintf("SWAP: choose victim page 0x%08x\n", page);
          
          v=page->pra_vaddr; 
c0105640:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105643:	8b 40 1c             	mov    0x1c(%eax),%eax
c0105646:	89 45 ec             	mov    %eax,-0x14(%ebp)
          pte_t *ptep = get_pte(mm->pgdir, v, 0);
c0105649:	8b 45 08             	mov    0x8(%ebp),%eax
c010564c:	8b 40 0c             	mov    0xc(%eax),%eax
c010564f:	83 ec 04             	sub    $0x4,%esp
c0105652:	6a 00                	push   $0x0
c0105654:	ff 75 ec             	pushl  -0x14(%ebp)
c0105657:	50                   	push   %eax
c0105658:	e8 3b 22 00 00       	call   c0107898 <get_pte>
c010565d:	83 c4 10             	add    $0x10,%esp
c0105660:	89 45 e8             	mov    %eax,-0x18(%ebp)
          assert((*ptep & PTE_P) != 0);
c0105663:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105666:	8b 00                	mov    (%eax),%eax
c0105668:	83 e0 01             	and    $0x1,%eax
c010566b:	85 c0                	test   %eax,%eax
c010566d:	75 16                	jne    c0105685 <swap_out+0x92>
c010566f:	68 e1 54 11 c0       	push   $0xc01154e1
c0105674:	68 f6 54 11 c0       	push   $0xc01154f6
c0105679:	6a 67                	push   $0x67
c010567b:	68 90 54 11 c0       	push   $0xc0115490
c0105680:	e8 68 ae ff ff       	call   c01004ed <__panic>

          if (swapfs_write( (page->pra_vaddr/PGSIZE+1)<<8, page) != 0) {
c0105685:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105688:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010568b:	8b 52 1c             	mov    0x1c(%edx),%edx
c010568e:	c1 ea 0c             	shr    $0xc,%edx
c0105691:	83 c2 01             	add    $0x1,%edx
c0105694:	c1 e2 08             	shl    $0x8,%edx
c0105697:	83 ec 08             	sub    $0x8,%esp
c010569a:	50                   	push   %eax
c010569b:	52                   	push   %edx
c010569c:	e8 b7 8d 00 00       	call   c010e458 <swapfs_write>
c01056a1:	83 c4 10             	add    $0x10,%esp
c01056a4:	85 c0                	test   %eax,%eax
c01056a6:	74 2b                	je     c01056d3 <swap_out+0xe0>
                    cprintf("SWAP: failed to save\n");
c01056a8:	83 ec 0c             	sub    $0xc,%esp
c01056ab:	68 0b 55 11 c0       	push   $0xc011550b
c01056b0:	e8 d2 ac ff ff       	call   c0100387 <cprintf>
c01056b5:	83 c4 10             	add    $0x10,%esp
                    sm->map_swappable(mm, v, page, 0);
c01056b8:	a1 74 1f 15 c0       	mov    0xc0151f74,%eax
c01056bd:	8b 40 10             	mov    0x10(%eax),%eax
c01056c0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01056c3:	6a 00                	push   $0x0
c01056c5:	52                   	push   %edx
c01056c6:	ff 75 ec             	pushl  -0x14(%ebp)
c01056c9:	ff 75 08             	pushl  0x8(%ebp)
c01056cc:	ff d0                	call   *%eax
c01056ce:	83 c4 10             	add    $0x10,%esp
c01056d1:	eb 5c                	jmp    c010572f <swap_out+0x13c>
                    continue;
          }
          else {
                    cprintf("swap_out: i %d, store page in vaddr 0x%x to disk swap entry %d\n", i, v, page->pra_vaddr/PGSIZE+1);
c01056d3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01056d6:	8b 40 1c             	mov    0x1c(%eax),%eax
c01056d9:	c1 e8 0c             	shr    $0xc,%eax
c01056dc:	83 c0 01             	add    $0x1,%eax
c01056df:	50                   	push   %eax
c01056e0:	ff 75 ec             	pushl  -0x14(%ebp)
c01056e3:	ff 75 f4             	pushl  -0xc(%ebp)
c01056e6:	68 24 55 11 c0       	push   $0xc0115524
c01056eb:	e8 97 ac ff ff       	call   c0100387 <cprintf>
c01056f0:	83 c4 10             	add    $0x10,%esp
                    *ptep = (page->pra_vaddr/PGSIZE+1)<<8;
c01056f3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01056f6:	8b 40 1c             	mov    0x1c(%eax),%eax
c01056f9:	c1 e8 0c             	shr    $0xc,%eax
c01056fc:	83 c0 01             	add    $0x1,%eax
c01056ff:	c1 e0 08             	shl    $0x8,%eax
c0105702:	89 c2                	mov    %eax,%edx
c0105704:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105707:	89 10                	mov    %edx,(%eax)
                    free_page(page);
c0105709:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010570c:	83 ec 08             	sub    $0x8,%esp
c010570f:	6a 01                	push   $0x1
c0105711:	50                   	push   %eax
c0105712:	e8 81 1b 00 00       	call   c0107298 <free_pages>
c0105717:	83 c4 10             	add    $0x10,%esp
          }
          
          tlb_invalidate(mm->pgdir, v);
c010571a:	8b 45 08             	mov    0x8(%ebp),%eax
c010571d:	8b 40 0c             	mov    0xc(%eax),%eax
c0105720:	83 ec 08             	sub    $0x8,%esp
c0105723:	ff 75 ec             	pushl  -0x14(%ebp)
c0105726:	50                   	push   %eax
c0105727:	e8 06 28 00 00       	call   c0107f32 <tlb_invalidate>
c010572c:	83 c4 10             	add    $0x10,%esp

int
swap_out(struct mm_struct *mm, int n, int in_tick)
{
     int i;
     for (i = 0; i != n; ++ i)
c010572f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0105733:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105736:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0105739:	0f 85 c6 fe ff ff    	jne    c0105605 <swap_out+0x12>
                    free_page(page);
          }
          
          tlb_invalidate(mm->pgdir, v);
     }
     return i;
c010573f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0105742:	c9                   	leave  
c0105743:	c3                   	ret    

c0105744 <swap_in>:

int
swap_in(struct mm_struct *mm, uintptr_t addr, struct Page **ptr_result)
{
c0105744:	55                   	push   %ebp
c0105745:	89 e5                	mov    %esp,%ebp
c0105747:	83 ec 18             	sub    $0x18,%esp
     struct Page *result = alloc_page();
c010574a:	83 ec 0c             	sub    $0xc,%esp
c010574d:	6a 01                	push   $0x1
c010574f:	e8 d8 1a 00 00       	call   c010722c <alloc_pages>
c0105754:	83 c4 10             	add    $0x10,%esp
c0105757:	89 45 f4             	mov    %eax,-0xc(%ebp)
     assert(result!=NULL);
c010575a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010575e:	75 16                	jne    c0105776 <swap_in+0x32>
c0105760:	68 64 55 11 c0       	push   $0xc0115564
c0105765:	68 f6 54 11 c0       	push   $0xc01154f6
c010576a:	6a 7d                	push   $0x7d
c010576c:	68 90 54 11 c0       	push   $0xc0115490
c0105771:	e8 77 ad ff ff       	call   c01004ed <__panic>

     pte_t *ptep = get_pte(mm->pgdir, addr, 0);
c0105776:	8b 45 08             	mov    0x8(%ebp),%eax
c0105779:	8b 40 0c             	mov    0xc(%eax),%eax
c010577c:	83 ec 04             	sub    $0x4,%esp
c010577f:	6a 00                	push   $0x0
c0105781:	ff 75 0c             	pushl  0xc(%ebp)
c0105784:	50                   	push   %eax
c0105785:	e8 0e 21 00 00       	call   c0107898 <get_pte>
c010578a:	83 c4 10             	add    $0x10,%esp
c010578d:	89 45 f0             	mov    %eax,-0x10(%ebp)
     // cprintf("SWAP: load ptep %x swap entry %d to vaddr 0x%08x, page %x, No %d\n", ptep, (*ptep)>>8, addr, result, (result-pages));
    
     int r;
     if ((r = swapfs_read((*ptep), result)) != 0)
c0105790:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105793:	8b 00                	mov    (%eax),%eax
c0105795:	83 ec 08             	sub    $0x8,%esp
c0105798:	ff 75 f4             	pushl  -0xc(%ebp)
c010579b:	50                   	push   %eax
c010579c:	e8 5e 8c 00 00       	call   c010e3ff <swapfs_read>
c01057a1:	83 c4 10             	add    $0x10,%esp
c01057a4:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01057a7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01057ab:	74 1f                	je     c01057cc <swap_in+0x88>
     {
        assert(r!=0);
c01057ad:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01057b1:	75 19                	jne    c01057cc <swap_in+0x88>
c01057b3:	68 71 55 11 c0       	push   $0xc0115571
c01057b8:	68 f6 54 11 c0       	push   $0xc01154f6
c01057bd:	68 85 00 00 00       	push   $0x85
c01057c2:	68 90 54 11 c0       	push   $0xc0115490
c01057c7:	e8 21 ad ff ff       	call   c01004ed <__panic>
     }
     cprintf("swap_in: load disk swap entry %d with swap_page in vadr 0x%x\n", (*ptep)>>8, addr);
c01057cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01057cf:	8b 00                	mov    (%eax),%eax
c01057d1:	c1 e8 08             	shr    $0x8,%eax
c01057d4:	83 ec 04             	sub    $0x4,%esp
c01057d7:	ff 75 0c             	pushl  0xc(%ebp)
c01057da:	50                   	push   %eax
c01057db:	68 78 55 11 c0       	push   $0xc0115578
c01057e0:	e8 a2 ab ff ff       	call   c0100387 <cprintf>
c01057e5:	83 c4 10             	add    $0x10,%esp
     *ptr_result=result;
c01057e8:	8b 45 10             	mov    0x10(%ebp),%eax
c01057eb:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01057ee:	89 10                	mov    %edx,(%eax)
     return 0;
c01057f0:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01057f5:	c9                   	leave  
c01057f6:	c3                   	ret    

c01057f7 <check_content_set>:



static inline void
check_content_set(void)
{
c01057f7:	55                   	push   %ebp
c01057f8:	89 e5                	mov    %esp,%ebp
c01057fa:	83 ec 08             	sub    $0x8,%esp
     *(unsigned char *)0x1000 = 0x0a;
c01057fd:	b8 00 10 00 00       	mov    $0x1000,%eax
c0105802:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c0105805:	a1 64 1f 15 c0       	mov    0xc0151f64,%eax
c010580a:	83 f8 01             	cmp    $0x1,%eax
c010580d:	74 19                	je     c0105828 <check_content_set+0x31>
c010580f:	68 b6 55 11 c0       	push   $0xc01155b6
c0105814:	68 f6 54 11 c0       	push   $0xc01154f6
c0105819:	68 92 00 00 00       	push   $0x92
c010581e:	68 90 54 11 c0       	push   $0xc0115490
c0105823:	e8 c5 ac ff ff       	call   c01004ed <__panic>
     *(unsigned char *)0x1010 = 0x0a;
c0105828:	b8 10 10 00 00       	mov    $0x1010,%eax
c010582d:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c0105830:	a1 64 1f 15 c0       	mov    0xc0151f64,%eax
c0105835:	83 f8 01             	cmp    $0x1,%eax
c0105838:	74 19                	je     c0105853 <check_content_set+0x5c>
c010583a:	68 b6 55 11 c0       	push   $0xc01155b6
c010583f:	68 f6 54 11 c0       	push   $0xc01154f6
c0105844:	68 94 00 00 00       	push   $0x94
c0105849:	68 90 54 11 c0       	push   $0xc0115490
c010584e:	e8 9a ac ff ff       	call   c01004ed <__panic>
     *(unsigned char *)0x2000 = 0x0b;
c0105853:	b8 00 20 00 00       	mov    $0x2000,%eax
c0105858:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c010585b:	a1 64 1f 15 c0       	mov    0xc0151f64,%eax
c0105860:	83 f8 02             	cmp    $0x2,%eax
c0105863:	74 19                	je     c010587e <check_content_set+0x87>
c0105865:	68 c5 55 11 c0       	push   $0xc01155c5
c010586a:	68 f6 54 11 c0       	push   $0xc01154f6
c010586f:	68 96 00 00 00       	push   $0x96
c0105874:	68 90 54 11 c0       	push   $0xc0115490
c0105879:	e8 6f ac ff ff       	call   c01004ed <__panic>
     *(unsigned char *)0x2010 = 0x0b;
c010587e:	b8 10 20 00 00       	mov    $0x2010,%eax
c0105883:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c0105886:	a1 64 1f 15 c0       	mov    0xc0151f64,%eax
c010588b:	83 f8 02             	cmp    $0x2,%eax
c010588e:	74 19                	je     c01058a9 <check_content_set+0xb2>
c0105890:	68 c5 55 11 c0       	push   $0xc01155c5
c0105895:	68 f6 54 11 c0       	push   $0xc01154f6
c010589a:	68 98 00 00 00       	push   $0x98
c010589f:	68 90 54 11 c0       	push   $0xc0115490
c01058a4:	e8 44 ac ff ff       	call   c01004ed <__panic>
     *(unsigned char *)0x3000 = 0x0c;
c01058a9:	b8 00 30 00 00       	mov    $0x3000,%eax
c01058ae:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c01058b1:	a1 64 1f 15 c0       	mov    0xc0151f64,%eax
c01058b6:	83 f8 03             	cmp    $0x3,%eax
c01058b9:	74 19                	je     c01058d4 <check_content_set+0xdd>
c01058bb:	68 d4 55 11 c0       	push   $0xc01155d4
c01058c0:	68 f6 54 11 c0       	push   $0xc01154f6
c01058c5:	68 9a 00 00 00       	push   $0x9a
c01058ca:	68 90 54 11 c0       	push   $0xc0115490
c01058cf:	e8 19 ac ff ff       	call   c01004ed <__panic>
     *(unsigned char *)0x3010 = 0x0c;
c01058d4:	b8 10 30 00 00       	mov    $0x3010,%eax
c01058d9:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c01058dc:	a1 64 1f 15 c0       	mov    0xc0151f64,%eax
c01058e1:	83 f8 03             	cmp    $0x3,%eax
c01058e4:	74 19                	je     c01058ff <check_content_set+0x108>
c01058e6:	68 d4 55 11 c0       	push   $0xc01155d4
c01058eb:	68 f6 54 11 c0       	push   $0xc01154f6
c01058f0:	68 9c 00 00 00       	push   $0x9c
c01058f5:	68 90 54 11 c0       	push   $0xc0115490
c01058fa:	e8 ee ab ff ff       	call   c01004ed <__panic>
     *(unsigned char *)0x4000 = 0x0d;
c01058ff:	b8 00 40 00 00       	mov    $0x4000,%eax
c0105904:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c0105907:	a1 64 1f 15 c0       	mov    0xc0151f64,%eax
c010590c:	83 f8 04             	cmp    $0x4,%eax
c010590f:	74 19                	je     c010592a <check_content_set+0x133>
c0105911:	68 e3 55 11 c0       	push   $0xc01155e3
c0105916:	68 f6 54 11 c0       	push   $0xc01154f6
c010591b:	68 9e 00 00 00       	push   $0x9e
c0105920:	68 90 54 11 c0       	push   $0xc0115490
c0105925:	e8 c3 ab ff ff       	call   c01004ed <__panic>
     *(unsigned char *)0x4010 = 0x0d;
c010592a:	b8 10 40 00 00       	mov    $0x4010,%eax
c010592f:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c0105932:	a1 64 1f 15 c0       	mov    0xc0151f64,%eax
c0105937:	83 f8 04             	cmp    $0x4,%eax
c010593a:	74 19                	je     c0105955 <check_content_set+0x15e>
c010593c:	68 e3 55 11 c0       	push   $0xc01155e3
c0105941:	68 f6 54 11 c0       	push   $0xc01154f6
c0105946:	68 a0 00 00 00       	push   $0xa0
c010594b:	68 90 54 11 c0       	push   $0xc0115490
c0105950:	e8 98 ab ff ff       	call   c01004ed <__panic>
}
c0105955:	90                   	nop
c0105956:	c9                   	leave  
c0105957:	c3                   	ret    

c0105958 <check_content_access>:

static inline int
check_content_access(void)
{
c0105958:	55                   	push   %ebp
c0105959:	89 e5                	mov    %esp,%ebp
c010595b:	83 ec 18             	sub    $0x18,%esp
    int ret = sm->check_swap();
c010595e:	a1 74 1f 15 c0       	mov    0xc0151f74,%eax
c0105963:	8b 40 1c             	mov    0x1c(%eax),%eax
c0105966:	ff d0                	call   *%eax
c0105968:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return ret;
c010596b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010596e:	c9                   	leave  
c010596f:	c3                   	ret    

c0105970 <check_swap>:
#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
check_swap(void)
{
c0105970:	55                   	push   %ebp
c0105971:	89 e5                	mov    %esp,%ebp
c0105973:	83 ec 68             	sub    $0x68,%esp
    //backup mem env
     int ret, count = 0, total = 0, i;
c0105976:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010597d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
     list_entry_t *le = &free_list;
c0105984:	c7 45 e8 44 52 15 c0 	movl   $0xc0155244,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c010598b:	eb 60                	jmp    c01059ed <check_swap+0x7d>
        struct Page *p = le2page(le, page_link);
c010598d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105990:	83 e8 0c             	sub    $0xc,%eax
c0105993:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(PageProperty(p));
c0105996:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105999:	83 c0 04             	add    $0x4,%eax
c010599c:	c7 45 b0 01 00 00 00 	movl   $0x1,-0x50(%ebp)
c01059a3:	89 45 ac             	mov    %eax,-0x54(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01059a6:	8b 45 ac             	mov    -0x54(%ebp),%eax
c01059a9:	8b 55 b0             	mov    -0x50(%ebp),%edx
c01059ac:	0f a3 10             	bt     %edx,(%eax)
c01059af:	19 c0                	sbb    %eax,%eax
c01059b1:	89 45 a8             	mov    %eax,-0x58(%ebp)
    return oldbit != 0;
c01059b4:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
c01059b8:	0f 95 c0             	setne  %al
c01059bb:	0f b6 c0             	movzbl %al,%eax
c01059be:	85 c0                	test   %eax,%eax
c01059c0:	75 19                	jne    c01059db <check_swap+0x6b>
c01059c2:	68 f2 55 11 c0       	push   $0xc01155f2
c01059c7:	68 f6 54 11 c0       	push   $0xc01154f6
c01059cc:	68 bb 00 00 00       	push   $0xbb
c01059d1:	68 90 54 11 c0       	push   $0xc0115490
c01059d6:	e8 12 ab ff ff       	call   c01004ed <__panic>
        count ++, total += p->property;
c01059db:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01059df:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01059e2:	8b 50 08             	mov    0x8(%eax),%edx
c01059e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01059e8:	01 d0                	add    %edx,%eax
c01059ea:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01059ed:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01059f0:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01059f3:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01059f6:	8b 40 04             	mov    0x4(%eax),%eax
check_swap(void)
{
    //backup mem env
     int ret, count = 0, total = 0, i;
     list_entry_t *le = &free_list;
     while ((le = list_next(le)) != &free_list) {
c01059f9:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01059fc:	81 7d e8 44 52 15 c0 	cmpl   $0xc0155244,-0x18(%ebp)
c0105a03:	75 88                	jne    c010598d <check_swap+0x1d>
        struct Page *p = le2page(le, page_link);
        assert(PageProperty(p));
        count ++, total += p->property;
     }
     assert(total == nr_free_pages());
c0105a05:	e8 c3 18 00 00       	call   c01072cd <nr_free_pages>
c0105a0a:	89 c2                	mov    %eax,%edx
c0105a0c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105a0f:	39 c2                	cmp    %eax,%edx
c0105a11:	74 19                	je     c0105a2c <check_swap+0xbc>
c0105a13:	68 02 56 11 c0       	push   $0xc0115602
c0105a18:	68 f6 54 11 c0       	push   $0xc01154f6
c0105a1d:	68 be 00 00 00       	push   $0xbe
c0105a22:	68 90 54 11 c0       	push   $0xc0115490
c0105a27:	e8 c1 aa ff ff       	call   c01004ed <__panic>
     cprintf("BEGIN check_swap: count %d, total %d\n",count,total);
c0105a2c:	83 ec 04             	sub    $0x4,%esp
c0105a2f:	ff 75 f0             	pushl  -0x10(%ebp)
c0105a32:	ff 75 f4             	pushl  -0xc(%ebp)
c0105a35:	68 1c 56 11 c0       	push   $0xc011561c
c0105a3a:	e8 48 a9 ff ff       	call   c0100387 <cprintf>
c0105a3f:	83 c4 10             	add    $0x10,%esp
     
     //now we set the phy pages env     
     struct mm_struct *mm = mm_create();
c0105a42:	e8 c3 dc ff ff       	call   c010370a <mm_create>
c0105a47:	89 45 d8             	mov    %eax,-0x28(%ebp)
     assert(mm != NULL);
c0105a4a:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c0105a4e:	75 19                	jne    c0105a69 <check_swap+0xf9>
c0105a50:	68 42 56 11 c0       	push   $0xc0115642
c0105a55:	68 f6 54 11 c0       	push   $0xc01154f6
c0105a5a:	68 c3 00 00 00       	push   $0xc3
c0105a5f:	68 90 54 11 c0       	push   $0xc0115490
c0105a64:	e8 84 aa ff ff       	call   c01004ed <__panic>

     extern struct mm_struct *check_mm_struct;
     assert(check_mm_struct == NULL);
c0105a69:	a1 70 51 15 c0       	mov    0xc0155170,%eax
c0105a6e:	85 c0                	test   %eax,%eax
c0105a70:	74 19                	je     c0105a8b <check_swap+0x11b>
c0105a72:	68 4d 56 11 c0       	push   $0xc011564d
c0105a77:	68 f6 54 11 c0       	push   $0xc01154f6
c0105a7c:	68 c6 00 00 00       	push   $0xc6
c0105a81:	68 90 54 11 c0       	push   $0xc0115490
c0105a86:	e8 62 aa ff ff       	call   c01004ed <__panic>

     check_mm_struct = mm;
c0105a8b:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0105a8e:	a3 70 51 15 c0       	mov    %eax,0xc0155170

     pde_t *pgdir = mm->pgdir = boot_pgdir;
c0105a93:	8b 15 20 ea 14 c0    	mov    0xc014ea20,%edx
c0105a99:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0105a9c:	89 50 0c             	mov    %edx,0xc(%eax)
c0105a9f:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0105aa2:	8b 40 0c             	mov    0xc(%eax),%eax
c0105aa5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
     assert(pgdir[0] == 0);
c0105aa8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0105aab:	8b 00                	mov    (%eax),%eax
c0105aad:	85 c0                	test   %eax,%eax
c0105aaf:	74 19                	je     c0105aca <check_swap+0x15a>
c0105ab1:	68 65 56 11 c0       	push   $0xc0115665
c0105ab6:	68 f6 54 11 c0       	push   $0xc01154f6
c0105abb:	68 cb 00 00 00       	push   $0xcb
c0105ac0:	68 90 54 11 c0       	push   $0xc0115490
c0105ac5:	e8 23 aa ff ff       	call   c01004ed <__panic>

     struct vma_struct *vma = vma_create(BEING_CHECK_VALID_VADDR, CHECK_VALID_VADDR, VM_WRITE | VM_READ);
c0105aca:	83 ec 04             	sub    $0x4,%esp
c0105acd:	6a 03                	push   $0x3
c0105acf:	68 00 60 00 00       	push   $0x6000
c0105ad4:	68 00 10 00 00       	push   $0x1000
c0105ad9:	e8 cc dc ff ff       	call   c01037aa <vma_create>
c0105ade:	83 c4 10             	add    $0x10,%esp
c0105ae1:	89 45 d0             	mov    %eax,-0x30(%ebp)
     assert(vma != NULL);
c0105ae4:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c0105ae8:	75 19                	jne    c0105b03 <check_swap+0x193>
c0105aea:	68 73 56 11 c0       	push   $0xc0115673
c0105aef:	68 f6 54 11 c0       	push   $0xc01154f6
c0105af4:	68 ce 00 00 00       	push   $0xce
c0105af9:	68 90 54 11 c0       	push   $0xc0115490
c0105afe:	e8 ea a9 ff ff       	call   c01004ed <__panic>

     insert_vma_struct(mm, vma);
c0105b03:	83 ec 08             	sub    $0x8,%esp
c0105b06:	ff 75 d0             	pushl  -0x30(%ebp)
c0105b09:	ff 75 d8             	pushl  -0x28(%ebp)
c0105b0c:	e8 01 de ff ff       	call   c0103912 <insert_vma_struct>
c0105b11:	83 c4 10             	add    $0x10,%esp

     //setup the temp Page Table vaddr 0~4MB
     cprintf("setup Page Table for vaddr 0X1000, so alloc a page\n");
c0105b14:	83 ec 0c             	sub    $0xc,%esp
c0105b17:	68 80 56 11 c0       	push   $0xc0115680
c0105b1c:	e8 66 a8 ff ff       	call   c0100387 <cprintf>
c0105b21:	83 c4 10             	add    $0x10,%esp
     pte_t *temp_ptep=NULL;
c0105b24:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
c0105b2b:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0105b2e:	8b 40 0c             	mov    0xc(%eax),%eax
c0105b31:	83 ec 04             	sub    $0x4,%esp
c0105b34:	6a 01                	push   $0x1
c0105b36:	68 00 10 00 00       	push   $0x1000
c0105b3b:	50                   	push   %eax
c0105b3c:	e8 57 1d 00 00       	call   c0107898 <get_pte>
c0105b41:	83 c4 10             	add    $0x10,%esp
c0105b44:	89 45 cc             	mov    %eax,-0x34(%ebp)
     assert(temp_ptep!= NULL);
c0105b47:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0105b4b:	75 19                	jne    c0105b66 <check_swap+0x1f6>
c0105b4d:	68 b4 56 11 c0       	push   $0xc01156b4
c0105b52:	68 f6 54 11 c0       	push   $0xc01154f6
c0105b57:	68 d6 00 00 00       	push   $0xd6
c0105b5c:	68 90 54 11 c0       	push   $0xc0115490
c0105b61:	e8 87 a9 ff ff       	call   c01004ed <__panic>
     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
c0105b66:	83 ec 0c             	sub    $0xc,%esp
c0105b69:	68 c8 56 11 c0       	push   $0xc01156c8
c0105b6e:	e8 14 a8 ff ff       	call   c0100387 <cprintf>
c0105b73:	83 c4 10             	add    $0x10,%esp
     
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0105b76:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0105b7d:	e9 90 00 00 00       	jmp    c0105c12 <check_swap+0x2a2>
          check_rp[i] = alloc_page();
c0105b82:	83 ec 0c             	sub    $0xc,%esp
c0105b85:	6a 01                	push   $0x1
c0105b87:	e8 a0 16 00 00       	call   c010722c <alloc_pages>
c0105b8c:	83 c4 10             	add    $0x10,%esp
c0105b8f:	89 c2                	mov    %eax,%edx
c0105b91:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105b94:	89 14 85 80 51 15 c0 	mov    %edx,-0x3feaae80(,%eax,4)
          assert(check_rp[i] != NULL );
c0105b9b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105b9e:	8b 04 85 80 51 15 c0 	mov    -0x3feaae80(,%eax,4),%eax
c0105ba5:	85 c0                	test   %eax,%eax
c0105ba7:	75 19                	jne    c0105bc2 <check_swap+0x252>
c0105ba9:	68 ec 56 11 c0       	push   $0xc01156ec
c0105bae:	68 f6 54 11 c0       	push   $0xc01154f6
c0105bb3:	68 db 00 00 00       	push   $0xdb
c0105bb8:	68 90 54 11 c0       	push   $0xc0115490
c0105bbd:	e8 2b a9 ff ff       	call   c01004ed <__panic>
          assert(!PageProperty(check_rp[i]));
c0105bc2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105bc5:	8b 04 85 80 51 15 c0 	mov    -0x3feaae80(,%eax,4),%eax
c0105bcc:	83 c0 04             	add    $0x4,%eax
c0105bcf:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
c0105bd6:	89 45 a4             	mov    %eax,-0x5c(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0105bd9:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0105bdc:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0105bdf:	0f a3 10             	bt     %edx,(%eax)
c0105be2:	19 c0                	sbb    %eax,%eax
c0105be4:	89 45 a0             	mov    %eax,-0x60(%ebp)
    return oldbit != 0;
c0105be7:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
c0105beb:	0f 95 c0             	setne  %al
c0105bee:	0f b6 c0             	movzbl %al,%eax
c0105bf1:	85 c0                	test   %eax,%eax
c0105bf3:	74 19                	je     c0105c0e <check_swap+0x29e>
c0105bf5:	68 00 57 11 c0       	push   $0xc0115700
c0105bfa:	68 f6 54 11 c0       	push   $0xc01154f6
c0105bff:	68 dc 00 00 00       	push   $0xdc
c0105c04:	68 90 54 11 c0       	push   $0xc0115490
c0105c09:	e8 df a8 ff ff       	call   c01004ed <__panic>
     pte_t *temp_ptep=NULL;
     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
     assert(temp_ptep!= NULL);
     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
     
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0105c0e:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0105c12:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0105c16:	0f 8e 66 ff ff ff    	jle    c0105b82 <check_swap+0x212>
          check_rp[i] = alloc_page();
          assert(check_rp[i] != NULL );
          assert(!PageProperty(check_rp[i]));
     }
     list_entry_t free_list_store = free_list;
c0105c1c:	a1 44 52 15 c0       	mov    0xc0155244,%eax
c0105c21:	8b 15 48 52 15 c0    	mov    0xc0155248,%edx
c0105c27:	89 45 98             	mov    %eax,-0x68(%ebp)
c0105c2a:	89 55 9c             	mov    %edx,-0x64(%ebp)
c0105c2d:	c7 45 c0 44 52 15 c0 	movl   $0xc0155244,-0x40(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0105c34:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0105c37:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0105c3a:	89 50 04             	mov    %edx,0x4(%eax)
c0105c3d:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0105c40:	8b 50 04             	mov    0x4(%eax),%edx
c0105c43:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0105c46:	89 10                	mov    %edx,(%eax)
c0105c48:	c7 45 c8 44 52 15 c0 	movl   $0xc0155244,-0x38(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0105c4f:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0105c52:	8b 40 04             	mov    0x4(%eax),%eax
c0105c55:	39 45 c8             	cmp    %eax,-0x38(%ebp)
c0105c58:	0f 94 c0             	sete   %al
c0105c5b:	0f b6 c0             	movzbl %al,%eax
     list_init(&free_list);
     assert(list_empty(&free_list));
c0105c5e:	85 c0                	test   %eax,%eax
c0105c60:	75 19                	jne    c0105c7b <check_swap+0x30b>
c0105c62:	68 1b 57 11 c0       	push   $0xc011571b
c0105c67:	68 f6 54 11 c0       	push   $0xc01154f6
c0105c6c:	68 e0 00 00 00       	push   $0xe0
c0105c71:	68 90 54 11 c0       	push   $0xc0115490
c0105c76:	e8 72 a8 ff ff       	call   c01004ed <__panic>
     
     //assert(alloc_page() == NULL);
     
     unsigned int nr_free_store = nr_free;
c0105c7b:	a1 4c 52 15 c0       	mov    0xc015524c,%eax
c0105c80:	89 45 bc             	mov    %eax,-0x44(%ebp)
     nr_free = 0;
c0105c83:	c7 05 4c 52 15 c0 00 	movl   $0x0,0xc015524c
c0105c8a:	00 00 00 
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0105c8d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0105c94:	eb 1c                	jmp    c0105cb2 <check_swap+0x342>
        free_pages(check_rp[i],1);
c0105c96:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105c99:	8b 04 85 80 51 15 c0 	mov    -0x3feaae80(,%eax,4),%eax
c0105ca0:	83 ec 08             	sub    $0x8,%esp
c0105ca3:	6a 01                	push   $0x1
c0105ca5:	50                   	push   %eax
c0105ca6:	e8 ed 15 00 00       	call   c0107298 <free_pages>
c0105cab:	83 c4 10             	add    $0x10,%esp
     
     //assert(alloc_page() == NULL);
     
     unsigned int nr_free_store = nr_free;
     nr_free = 0;
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0105cae:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0105cb2:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0105cb6:	7e de                	jle    c0105c96 <check_swap+0x326>
        free_pages(check_rp[i],1);
     }
     assert(nr_free==CHECK_VALID_PHY_PAGE_NUM);
c0105cb8:	a1 4c 52 15 c0       	mov    0xc015524c,%eax
c0105cbd:	83 f8 04             	cmp    $0x4,%eax
c0105cc0:	74 19                	je     c0105cdb <check_swap+0x36b>
c0105cc2:	68 34 57 11 c0       	push   $0xc0115734
c0105cc7:	68 f6 54 11 c0       	push   $0xc01154f6
c0105ccc:	68 e9 00 00 00       	push   $0xe9
c0105cd1:	68 90 54 11 c0       	push   $0xc0115490
c0105cd6:	e8 12 a8 ff ff       	call   c01004ed <__panic>
     
     cprintf("set up init env for check_swap begin!\n");
c0105cdb:	83 ec 0c             	sub    $0xc,%esp
c0105cde:	68 58 57 11 c0       	push   $0xc0115758
c0105ce3:	e8 9f a6 ff ff       	call   c0100387 <cprintf>
c0105ce8:	83 c4 10             	add    $0x10,%esp
     //setup initial vir_page<->phy_page environment for page relpacement algorithm 

     
     pgfault_num=0;
c0105ceb:	c7 05 64 1f 15 c0 00 	movl   $0x0,0xc0151f64
c0105cf2:	00 00 00 
     
     check_content_set();
c0105cf5:	e8 fd fa ff ff       	call   c01057f7 <check_content_set>
     assert( nr_free == 0);         
c0105cfa:	a1 4c 52 15 c0       	mov    0xc015524c,%eax
c0105cff:	85 c0                	test   %eax,%eax
c0105d01:	74 19                	je     c0105d1c <check_swap+0x3ac>
c0105d03:	68 7f 57 11 c0       	push   $0xc011577f
c0105d08:	68 f6 54 11 c0       	push   $0xc01154f6
c0105d0d:	68 f2 00 00 00       	push   $0xf2
c0105d12:	68 90 54 11 c0       	push   $0xc0115490
c0105d17:	e8 d1 a7 ff ff       	call   c01004ed <__panic>
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c0105d1c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0105d23:	eb 26                	jmp    c0105d4b <check_swap+0x3db>
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
c0105d25:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105d28:	c7 04 85 a0 51 15 c0 	movl   $0xffffffff,-0x3feaae60(,%eax,4)
c0105d2f:	ff ff ff ff 
c0105d33:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105d36:	8b 14 85 a0 51 15 c0 	mov    -0x3feaae60(,%eax,4),%edx
c0105d3d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105d40:	89 14 85 e0 51 15 c0 	mov    %edx,-0x3feaae20(,%eax,4)
     
     pgfault_num=0;
     
     check_content_set();
     assert( nr_free == 0);         
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c0105d47:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0105d4b:	83 7d ec 09          	cmpl   $0x9,-0x14(%ebp)
c0105d4f:	7e d4                	jle    c0105d25 <check_swap+0x3b5>
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
     
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0105d51:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0105d58:	e9 cc 00 00 00       	jmp    c0105e29 <check_swap+0x4b9>
         check_ptep[i]=0;
c0105d5d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105d60:	c7 04 85 34 52 15 c0 	movl   $0x0,-0x3feaadcc(,%eax,4)
c0105d67:	00 00 00 00 
         check_ptep[i] = get_pte(pgdir, (i+1)*0x1000, 0);
c0105d6b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105d6e:	83 c0 01             	add    $0x1,%eax
c0105d71:	c1 e0 0c             	shl    $0xc,%eax
c0105d74:	83 ec 04             	sub    $0x4,%esp
c0105d77:	6a 00                	push   $0x0
c0105d79:	50                   	push   %eax
c0105d7a:	ff 75 d4             	pushl  -0x2c(%ebp)
c0105d7d:	e8 16 1b 00 00       	call   c0107898 <get_pte>
c0105d82:	83 c4 10             	add    $0x10,%esp
c0105d85:	89 c2                	mov    %eax,%edx
c0105d87:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105d8a:	89 14 85 34 52 15 c0 	mov    %edx,-0x3feaadcc(,%eax,4)
         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
         assert(check_ptep[i] != NULL);
c0105d91:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105d94:	8b 04 85 34 52 15 c0 	mov    -0x3feaadcc(,%eax,4),%eax
c0105d9b:	85 c0                	test   %eax,%eax
c0105d9d:	75 19                	jne    c0105db8 <check_swap+0x448>
c0105d9f:	68 8c 57 11 c0       	push   $0xc011578c
c0105da4:	68 f6 54 11 c0       	push   $0xc01154f6
c0105da9:	68 fa 00 00 00       	push   $0xfa
c0105dae:	68 90 54 11 c0       	push   $0xc0115490
c0105db3:	e8 35 a7 ff ff       	call   c01004ed <__panic>
         assert(pte2page(*check_ptep[i]) == check_rp[i]);
c0105db8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105dbb:	8b 04 85 34 52 15 c0 	mov    -0x3feaadcc(,%eax,4),%eax
c0105dc2:	8b 00                	mov    (%eax),%eax
c0105dc4:	83 ec 0c             	sub    $0xc,%esp
c0105dc7:	50                   	push   %eax
c0105dc8:	e8 d8 f6 ff ff       	call   c01054a5 <pte2page>
c0105dcd:	83 c4 10             	add    $0x10,%esp
c0105dd0:	89 c2                	mov    %eax,%edx
c0105dd2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105dd5:	8b 04 85 80 51 15 c0 	mov    -0x3feaae80(,%eax,4),%eax
c0105ddc:	39 c2                	cmp    %eax,%edx
c0105dde:	74 19                	je     c0105df9 <check_swap+0x489>
c0105de0:	68 a4 57 11 c0       	push   $0xc01157a4
c0105de5:	68 f6 54 11 c0       	push   $0xc01154f6
c0105dea:	68 fb 00 00 00       	push   $0xfb
c0105def:	68 90 54 11 c0       	push   $0xc0115490
c0105df4:	e8 f4 a6 ff ff       	call   c01004ed <__panic>
         assert((*check_ptep[i] & PTE_P));          
c0105df9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105dfc:	8b 04 85 34 52 15 c0 	mov    -0x3feaadcc(,%eax,4),%eax
c0105e03:	8b 00                	mov    (%eax),%eax
c0105e05:	83 e0 01             	and    $0x1,%eax
c0105e08:	85 c0                	test   %eax,%eax
c0105e0a:	75 19                	jne    c0105e25 <check_swap+0x4b5>
c0105e0c:	68 cc 57 11 c0       	push   $0xc01157cc
c0105e11:	68 f6 54 11 c0       	push   $0xc01154f6
c0105e16:	68 fc 00 00 00       	push   $0xfc
c0105e1b:	68 90 54 11 c0       	push   $0xc0115490
c0105e20:	e8 c8 a6 ff ff       	call   c01004ed <__panic>
     check_content_set();
     assert( nr_free == 0);         
     for(i = 0; i<MAX_SEQ_NO ; i++) 
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
     
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0105e25:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0105e29:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0105e2d:	0f 8e 2a ff ff ff    	jle    c0105d5d <check_swap+0x3ed>
         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
         assert(check_ptep[i] != NULL);
         assert(pte2page(*check_ptep[i]) == check_rp[i]);
         assert((*check_ptep[i] & PTE_P));          
     }
     cprintf("set up init env for check_swap over!\n");
c0105e33:	83 ec 0c             	sub    $0xc,%esp
c0105e36:	68 e8 57 11 c0       	push   $0xc01157e8
c0105e3b:	e8 47 a5 ff ff       	call   c0100387 <cprintf>
c0105e40:	83 c4 10             	add    $0x10,%esp
     // now access the virt pages to test  page relpacement algorithm 
     ret=check_content_access();
c0105e43:	e8 10 fb ff ff       	call   c0105958 <check_content_access>
c0105e48:	89 45 b8             	mov    %eax,-0x48(%ebp)
     assert(ret==0);
c0105e4b:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
c0105e4f:	74 19                	je     c0105e6a <check_swap+0x4fa>
c0105e51:	68 0e 58 11 c0       	push   $0xc011580e
c0105e56:	68 f6 54 11 c0       	push   $0xc01154f6
c0105e5b:	68 01 01 00 00       	push   $0x101
c0105e60:	68 90 54 11 c0       	push   $0xc0115490
c0105e65:	e8 83 a6 ff ff       	call   c01004ed <__panic>
     
     //restore kernel mem env
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0105e6a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0105e71:	eb 1c                	jmp    c0105e8f <check_swap+0x51f>
         free_pages(check_rp[i],1);
c0105e73:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105e76:	8b 04 85 80 51 15 c0 	mov    -0x3feaae80(,%eax,4),%eax
c0105e7d:	83 ec 08             	sub    $0x8,%esp
c0105e80:	6a 01                	push   $0x1
c0105e82:	50                   	push   %eax
c0105e83:	e8 10 14 00 00       	call   c0107298 <free_pages>
c0105e88:	83 c4 10             	add    $0x10,%esp
     // now access the virt pages to test  page relpacement algorithm 
     ret=check_content_access();
     assert(ret==0);
     
     //restore kernel mem env
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0105e8b:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0105e8f:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0105e93:	7e de                	jle    c0105e73 <check_swap+0x503>
         free_pages(check_rp[i],1);
     } 

     //free_page(pte2page(*temp_ptep));
    free_page(pde2page(pgdir[0]));
c0105e95:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0105e98:	8b 00                	mov    (%eax),%eax
c0105e9a:	83 ec 0c             	sub    $0xc,%esp
c0105e9d:	50                   	push   %eax
c0105e9e:	e8 3c f6 ff ff       	call   c01054df <pde2page>
c0105ea3:	83 c4 10             	add    $0x10,%esp
c0105ea6:	83 ec 08             	sub    $0x8,%esp
c0105ea9:	6a 01                	push   $0x1
c0105eab:	50                   	push   %eax
c0105eac:	e8 e7 13 00 00       	call   c0107298 <free_pages>
c0105eb1:	83 c4 10             	add    $0x10,%esp
     pgdir[0] = 0;
c0105eb4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0105eb7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
     mm->pgdir = NULL;
c0105ebd:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0105ec0:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
     mm_destroy(mm);
c0105ec7:	83 ec 0c             	sub    $0xc,%esp
c0105eca:	ff 75 d8             	pushl  -0x28(%ebp)
c0105ecd:	e8 64 db ff ff       	call   c0103a36 <mm_destroy>
c0105ed2:	83 c4 10             	add    $0x10,%esp
     check_mm_struct = NULL;
c0105ed5:	c7 05 70 51 15 c0 00 	movl   $0x0,0xc0155170
c0105edc:	00 00 00 
     
     nr_free = nr_free_store;
c0105edf:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0105ee2:	a3 4c 52 15 c0       	mov    %eax,0xc015524c
     free_list = free_list_store;
c0105ee7:	8b 45 98             	mov    -0x68(%ebp),%eax
c0105eea:	8b 55 9c             	mov    -0x64(%ebp),%edx
c0105eed:	a3 44 52 15 c0       	mov    %eax,0xc0155244
c0105ef2:	89 15 48 52 15 c0    	mov    %edx,0xc0155248

     
     le = &free_list;
c0105ef8:	c7 45 e8 44 52 15 c0 	movl   $0xc0155244,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c0105eff:	eb 1d                	jmp    c0105f1e <check_swap+0x5ae>
         struct Page *p = le2page(le, page_link);
c0105f01:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105f04:	83 e8 0c             	sub    $0xc,%eax
c0105f07:	89 45 b4             	mov    %eax,-0x4c(%ebp)
         count --, total -= p->property;
c0105f0a:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0105f0e:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0105f11:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0105f14:	8b 40 08             	mov    0x8(%eax),%eax
c0105f17:	29 c2                	sub    %eax,%edx
c0105f19:	89 d0                	mov    %edx,%eax
c0105f1b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105f1e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105f21:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0105f24:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0105f27:	8b 40 04             	mov    0x4(%eax),%eax
     nr_free = nr_free_store;
     free_list = free_list_store;

     
     le = &free_list;
     while ((le = list_next(le)) != &free_list) {
c0105f2a:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0105f2d:	81 7d e8 44 52 15 c0 	cmpl   $0xc0155244,-0x18(%ebp)
c0105f34:	75 cb                	jne    c0105f01 <check_swap+0x591>
         struct Page *p = le2page(le, page_link);
         count --, total -= p->property;
     }
     cprintf("count is %d, total is %d\n",count,total);
c0105f36:	83 ec 04             	sub    $0x4,%esp
c0105f39:	ff 75 f0             	pushl  -0x10(%ebp)
c0105f3c:	ff 75 f4             	pushl  -0xc(%ebp)
c0105f3f:	68 15 58 11 c0       	push   $0xc0115815
c0105f44:	e8 3e a4 ff ff       	call   c0100387 <cprintf>
c0105f49:	83 c4 10             	add    $0x10,%esp
     //assert(count == 0);
     
     cprintf("check_swap() succeeded!\n");
c0105f4c:	83 ec 0c             	sub    $0xc,%esp
c0105f4f:	68 2f 58 11 c0       	push   $0xc011582f
c0105f54:	e8 2e a4 ff ff       	call   c0100387 <cprintf>
c0105f59:	83 c4 10             	add    $0x10,%esp
}
c0105f5c:	90                   	nop
c0105f5d:	c9                   	leave  
c0105f5e:	c3                   	ret    

c0105f5f <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0105f5f:	55                   	push   %ebp
c0105f60:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0105f62:	8b 45 08             	mov    0x8(%ebp),%eax
c0105f65:	8b 15 58 52 15 c0    	mov    0xc0155258,%edx
c0105f6b:	29 d0                	sub    %edx,%eax
c0105f6d:	c1 f8 05             	sar    $0x5,%eax
}
c0105f70:	5d                   	pop    %ebp
c0105f71:	c3                   	ret    

c0105f72 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0105f72:	55                   	push   %ebp
c0105f73:	89 e5                	mov    %esp,%ebp
    return page2ppn(page) << PGSHIFT;
c0105f75:	ff 75 08             	pushl  0x8(%ebp)
c0105f78:	e8 e2 ff ff ff       	call   c0105f5f <page2ppn>
c0105f7d:	83 c4 04             	add    $0x4,%esp
c0105f80:	c1 e0 0c             	shl    $0xc,%eax
}
c0105f83:	c9                   	leave  
c0105f84:	c3                   	ret    

c0105f85 <page_ref>:
pde2page(pde_t pde) {
    return pa2page(PDE_ADDR(pde));
}

static inline int
page_ref(struct Page *page) {
c0105f85:	55                   	push   %ebp
c0105f86:	89 e5                	mov    %esp,%ebp
    return page->ref;
c0105f88:	8b 45 08             	mov    0x8(%ebp),%eax
c0105f8b:	8b 00                	mov    (%eax),%eax
}
c0105f8d:	5d                   	pop    %ebp
c0105f8e:	c3                   	ret    

c0105f8f <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c0105f8f:	55                   	push   %ebp
c0105f90:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c0105f92:	8b 45 08             	mov    0x8(%ebp),%eax
c0105f95:	8b 55 0c             	mov    0xc(%ebp),%edx
c0105f98:	89 10                	mov    %edx,(%eax)
}
c0105f9a:	90                   	nop
c0105f9b:	5d                   	pop    %ebp
c0105f9c:	c3                   	ret    

c0105f9d <default_init>:

#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
default_init(void) {
c0105f9d:	55                   	push   %ebp
c0105f9e:	89 e5                	mov    %esp,%ebp
c0105fa0:	83 ec 10             	sub    $0x10,%esp
c0105fa3:	c7 45 fc 44 52 15 c0 	movl   $0xc0155244,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0105faa:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0105fad:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0105fb0:	89 50 04             	mov    %edx,0x4(%eax)
c0105fb3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0105fb6:	8b 50 04             	mov    0x4(%eax),%edx
c0105fb9:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0105fbc:	89 10                	mov    %edx,(%eax)
    list_init(&free_list);
    nr_free = 0;
c0105fbe:	c7 05 4c 52 15 c0 00 	movl   $0x0,0xc015524c
c0105fc5:	00 00 00 
}
c0105fc8:	90                   	nop
c0105fc9:	c9                   	leave  
c0105fca:	c3                   	ret    

c0105fcb <default_init_memmap>:

static void
default_init_memmap(struct Page *base, size_t n) {
c0105fcb:	55                   	push   %ebp
c0105fcc:	89 e5                	mov    %esp,%ebp
c0105fce:	83 ec 48             	sub    $0x48,%esp
    assert(n > 0);
c0105fd1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0105fd5:	75 16                	jne    c0105fed <default_init_memmap+0x22>
c0105fd7:	68 48 58 11 c0       	push   $0xc0115848
c0105fdc:	68 4e 58 11 c0       	push   $0xc011584e
c0105fe1:	6a 6d                	push   $0x6d
c0105fe3:	68 63 58 11 c0       	push   $0xc0115863
c0105fe8:	e8 00 a5 ff ff       	call   c01004ed <__panic>
    struct Page *p = base;
c0105fed:	8b 45 08             	mov    0x8(%ebp),%eax
c0105ff0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (; p != base + n; p ++) {
c0105ff3:	eb 6c                	jmp    c0106061 <default_init_memmap+0x96>
        assert(PageReserved(p));
c0105ff5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105ff8:	83 c0 04             	add    $0x4,%eax
c0105ffb:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c0106002:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0106005:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106008:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010600b:	0f a3 10             	bt     %edx,(%eax)
c010600e:	19 c0                	sbb    %eax,%eax
c0106010:	89 45 e0             	mov    %eax,-0x20(%ebp)
    return oldbit != 0;
c0106013:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0106017:	0f 95 c0             	setne  %al
c010601a:	0f b6 c0             	movzbl %al,%eax
c010601d:	85 c0                	test   %eax,%eax
c010601f:	75 16                	jne    c0106037 <default_init_memmap+0x6c>
c0106021:	68 79 58 11 c0       	push   $0xc0115879
c0106026:	68 4e 58 11 c0       	push   $0xc011584e
c010602b:	6a 70                	push   $0x70
c010602d:	68 63 58 11 c0       	push   $0xc0115863
c0106032:	e8 b6 a4 ff ff       	call   c01004ed <__panic>
        p->flags = p->property = 0;
c0106037:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010603a:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
c0106041:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106044:	8b 50 08             	mov    0x8(%eax),%edx
c0106047:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010604a:	89 50 04             	mov    %edx,0x4(%eax)
        set_page_ref(p, 0);
c010604d:	83 ec 08             	sub    $0x8,%esp
c0106050:	6a 00                	push   $0x0
c0106052:	ff 75 f4             	pushl  -0xc(%ebp)
c0106055:	e8 35 ff ff ff       	call   c0105f8f <set_page_ref>
c010605a:	83 c4 10             	add    $0x10,%esp

static void
default_init_memmap(struct Page *base, size_t n) {
    assert(n > 0);
    struct Page *p = base;
    for (; p != base + n; p ++) {
c010605d:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
c0106061:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106064:	c1 e0 05             	shl    $0x5,%eax
c0106067:	89 c2                	mov    %eax,%edx
c0106069:	8b 45 08             	mov    0x8(%ebp),%eax
c010606c:	01 d0                	add    %edx,%eax
c010606e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0106071:	75 82                	jne    c0105ff5 <default_init_memmap+0x2a>
        assert(PageReserved(p));
        p->flags = p->property = 0;
        set_page_ref(p, 0);
    }
    base->property = n;
c0106073:	8b 45 08             	mov    0x8(%ebp),%eax
c0106076:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106079:	89 50 08             	mov    %edx,0x8(%eax)
    SetPageProperty(base);
c010607c:	8b 45 08             	mov    0x8(%ebp),%eax
c010607f:	83 c0 04             	add    $0x4,%eax
c0106082:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
c0106089:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c010608c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010608f:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0106092:	0f ab 10             	bts    %edx,(%eax)
    nr_free += n;
c0106095:	8b 15 4c 52 15 c0    	mov    0xc015524c,%edx
c010609b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010609e:	01 d0                	add    %edx,%eax
c01060a0:	a3 4c 52 15 c0       	mov    %eax,0xc015524c
    list_add(&free_list, &(base->page_link));
c01060a5:	8b 45 08             	mov    0x8(%ebp),%eax
c01060a8:	83 c0 0c             	add    $0xc,%eax
c01060ab:	c7 45 f0 44 52 15 c0 	movl   $0xc0155244,-0x10(%ebp)
c01060b2:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01060b5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01060b8:	89 45 d8             	mov    %eax,-0x28(%ebp)
c01060bb:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01060be:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c01060c1:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01060c4:	8b 40 04             	mov    0x4(%eax),%eax
c01060c7:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01060ca:	89 55 d0             	mov    %edx,-0x30(%ebp)
c01060cd:	8b 55 d8             	mov    -0x28(%ebp),%edx
c01060d0:	89 55 cc             	mov    %edx,-0x34(%ebp)
c01060d3:	89 45 c8             	mov    %eax,-0x38(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c01060d6:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01060d9:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01060dc:	89 10                	mov    %edx,(%eax)
c01060de:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01060e1:	8b 10                	mov    (%eax),%edx
c01060e3:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01060e6:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c01060e9:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01060ec:	8b 55 c8             	mov    -0x38(%ebp),%edx
c01060ef:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c01060f2:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01060f5:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01060f8:	89 10                	mov    %edx,(%eax)
}
c01060fa:	90                   	nop
c01060fb:	c9                   	leave  
c01060fc:	c3                   	ret    

c01060fd <default_alloc_pages>:

// LAB2 MODIFIED need to be rewritten
static struct Page *
default_alloc_pages(size_t n) {
c01060fd:	55                   	push   %ebp
c01060fe:	89 e5                	mov    %esp,%ebp
c0106100:	83 ec 58             	sub    $0x58,%esp
    assert(n > 0);
c0106103:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0106107:	75 16                	jne    c010611f <default_alloc_pages+0x22>
c0106109:	68 48 58 11 c0       	push   $0xc0115848
c010610e:	68 4e 58 11 c0       	push   $0xc011584e
c0106113:	6a 7d                	push   $0x7d
c0106115:	68 63 58 11 c0       	push   $0xc0115863
c010611a:	e8 ce a3 ff ff       	call   c01004ed <__panic>
    if (n > nr_free) {
c010611f:	a1 4c 52 15 c0       	mov    0xc015524c,%eax
c0106124:	3b 45 08             	cmp    0x8(%ebp),%eax
c0106127:	73 0a                	jae    c0106133 <default_alloc_pages+0x36>
        return NULL;
c0106129:	b8 00 00 00 00       	mov    $0x0,%eax
c010612e:	e9 41 01 00 00       	jmp    c0106274 <default_alloc_pages+0x177>
    }
    struct Page *page = NULL;
c0106133:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    list_entry_t *le = &free_list;
c010613a:	c7 45 f0 44 52 15 c0 	movl   $0xc0155244,-0x10(%ebp)
    while ((le = list_next(le)) != &free_list) {
c0106141:	eb 1c                	jmp    c010615f <default_alloc_pages+0x62>
        struct Page *p = le2page(le, page_link);
c0106143:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106146:	83 e8 0c             	sub    $0xc,%eax
c0106149:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (p->property >= n) {
c010614c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010614f:	8b 40 08             	mov    0x8(%eax),%eax
c0106152:	3b 45 08             	cmp    0x8(%ebp),%eax
c0106155:	72 08                	jb     c010615f <default_alloc_pages+0x62>
            page = p;
c0106157:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010615a:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
c010615d:	eb 18                	jmp    c0106177 <default_alloc_pages+0x7a>
c010615f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106162:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0106165:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0106168:	8b 40 04             	mov    0x4(%eax),%eax
    if (n > nr_free) {
        return NULL;
    }
    struct Page *page = NULL;
    list_entry_t *le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c010616b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010616e:	81 7d f0 44 52 15 c0 	cmpl   $0xc0155244,-0x10(%ebp)
c0106175:	75 cc                	jne    c0106143 <default_alloc_pages+0x46>
        if (p->property >= n) {
            page = p;
            break;
        }
    }
    if (page != NULL) {
c0106177:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010617b:	0f 84 f0 00 00 00    	je     c0106271 <default_alloc_pages+0x174>
c0106181:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106184:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0106187:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010618a:	8b 40 04             	mov    0x4(%eax),%eax
        list_entry_t *following_le = list_next(le);
c010618d:	89 45 e0             	mov    %eax,-0x20(%ebp)
        list_del(&(page->page_link));
c0106190:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106193:	83 c0 0c             	add    $0xc,%eax
c0106196:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0106199:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010619c:	8b 40 04             	mov    0x4(%eax),%eax
c010619f:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01061a2:	8b 12                	mov    (%edx),%edx
c01061a4:	89 55 c8             	mov    %edx,-0x38(%ebp)
c01061a7:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c01061aa:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01061ad:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c01061b0:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c01061b3:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01061b6:	8b 55 c8             	mov    -0x38(%ebp),%edx
c01061b9:	89 10                	mov    %edx,(%eax)
        if (page->property > n) {
c01061bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01061be:	8b 40 08             	mov    0x8(%eax),%eax
c01061c1:	3b 45 08             	cmp    0x8(%ebp),%eax
c01061c4:	0f 86 81 00 00 00    	jbe    c010624b <default_alloc_pages+0x14e>
            struct Page *p = page + n;                      // split the allocated page
c01061ca:	8b 45 08             	mov    0x8(%ebp),%eax
c01061cd:	c1 e0 05             	shl    $0x5,%eax
c01061d0:	89 c2                	mov    %eax,%edx
c01061d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01061d5:	01 d0                	add    %edx,%eax
c01061d7:	89 45 d8             	mov    %eax,-0x28(%ebp)
            p->property = page->property - n;               // set page num
c01061da:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01061dd:	8b 40 08             	mov    0x8(%eax),%eax
c01061e0:	2b 45 08             	sub    0x8(%ebp),%eax
c01061e3:	89 c2                	mov    %eax,%edx
c01061e5:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01061e8:	89 50 08             	mov    %edx,0x8(%eax)
            SetPageProperty(p);                             // mark as the head page
c01061eb:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01061ee:	83 c0 04             	add    $0x4,%eax
c01061f1:	c7 45 d0 01 00 00 00 	movl   $0x1,-0x30(%ebp)
c01061f8:	89 45 b0             	mov    %eax,-0x50(%ebp)
c01061fb:	8b 45 b0             	mov    -0x50(%ebp),%eax
c01061fe:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0106201:	0f ab 10             	bts    %edx,(%eax)
            list_add_before(following_le, &(p->page_link)); // add the remaining block before the formerly following block
c0106204:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0106207:	8d 50 0c             	lea    0xc(%eax),%edx
c010620a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010620d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0106210:	89 55 c0             	mov    %edx,-0x40(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c0106213:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106216:	8b 00                	mov    (%eax),%eax
c0106218:	8b 55 c0             	mov    -0x40(%ebp),%edx
c010621b:	89 55 bc             	mov    %edx,-0x44(%ebp)
c010621e:	89 45 b8             	mov    %eax,-0x48(%ebp)
c0106221:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106224:	89 45 b4             	mov    %eax,-0x4c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0106227:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010622a:	8b 55 bc             	mov    -0x44(%ebp),%edx
c010622d:	89 10                	mov    %edx,(%eax)
c010622f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0106232:	8b 10                	mov    (%eax),%edx
c0106234:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0106237:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010623a:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010623d:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0106240:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0106243:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0106246:	8b 55 b8             	mov    -0x48(%ebp),%edx
c0106249:	89 10                	mov    %edx,(%eax)
        }
        nr_free -= n;
c010624b:	a1 4c 52 15 c0       	mov    0xc015524c,%eax
c0106250:	2b 45 08             	sub    0x8(%ebp),%eax
c0106253:	a3 4c 52 15 c0       	mov    %eax,0xc015524c
        ClearPageProperty(page);    // mark as "not head page"
c0106258:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010625b:	83 c0 04             	add    $0x4,%eax
c010625e:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
c0106265:	89 45 ac             	mov    %eax,-0x54(%ebp)
 * @nr:     the bit to clear
 * @addr:   the address to start counting from
 * */
static inline void
clear_bit(int nr, volatile void *addr) {
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0106268:	8b 45 ac             	mov    -0x54(%ebp),%eax
c010626b:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010626e:	0f b3 10             	btr    %edx,(%eax)
    }
    return page;
c0106271:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0106274:	c9                   	leave  
c0106275:	c3                   	ret    

c0106276 <default_free_pages>:

// LAB2 MODIFIED
static void
default_free_pages(struct Page *base, size_t n) {
c0106276:	55                   	push   %ebp
c0106277:	89 e5                	mov    %esp,%ebp
c0106279:	81 ec 88 00 00 00    	sub    $0x88,%esp
    assert(n > 0);
c010627f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0106283:	75 19                	jne    c010629e <default_free_pages+0x28>
c0106285:	68 48 58 11 c0       	push   $0xc0115848
c010628a:	68 4e 58 11 c0       	push   $0xc011584e
c010628f:	68 9c 00 00 00       	push   $0x9c
c0106294:	68 63 58 11 c0       	push   $0xc0115863
c0106299:	e8 4f a2 ff ff       	call   c01004ed <__panic>
    struct Page *p = base;
c010629e:	8b 45 08             	mov    0x8(%ebp),%eax
c01062a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (; p != base + n; p ++) {
c01062a4:	e9 8f 00 00 00       	jmp    c0106338 <default_free_pages+0xc2>
        assert(!PageReserved(p) && !PageProperty(p));
c01062a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01062ac:	83 c0 04             	add    $0x4,%eax
c01062af:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
c01062b6:	89 45 bc             	mov    %eax,-0x44(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01062b9:	8b 45 bc             	mov    -0x44(%ebp),%eax
c01062bc:	8b 55 c0             	mov    -0x40(%ebp),%edx
c01062bf:	0f a3 10             	bt     %edx,(%eax)
c01062c2:	19 c0                	sbb    %eax,%eax
c01062c4:	89 45 b8             	mov    %eax,-0x48(%ebp)
    return oldbit != 0;
c01062c7:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
c01062cb:	0f 95 c0             	setne  %al
c01062ce:	0f b6 c0             	movzbl %al,%eax
c01062d1:	85 c0                	test   %eax,%eax
c01062d3:	75 2c                	jne    c0106301 <default_free_pages+0x8b>
c01062d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01062d8:	83 c0 04             	add    $0x4,%eax
c01062db:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
c01062e2:	89 45 b4             	mov    %eax,-0x4c(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01062e5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01062e8:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01062eb:	0f a3 10             	bt     %edx,(%eax)
c01062ee:	19 c0                	sbb    %eax,%eax
c01062f0:	89 45 b0             	mov    %eax,-0x50(%ebp)
    return oldbit != 0;
c01062f3:	83 7d b0 00          	cmpl   $0x0,-0x50(%ebp)
c01062f7:	0f 95 c0             	setne  %al
c01062fa:	0f b6 c0             	movzbl %al,%eax
c01062fd:	85 c0                	test   %eax,%eax
c01062ff:	74 19                	je     c010631a <default_free_pages+0xa4>
c0106301:	68 8c 58 11 c0       	push   $0xc011588c
c0106306:	68 4e 58 11 c0       	push   $0xc011584e
c010630b:	68 9f 00 00 00       	push   $0x9f
c0106310:	68 63 58 11 c0       	push   $0xc0115863
c0106315:	e8 d3 a1 ff ff       	call   c01004ed <__panic>
        p->flags = 0;
c010631a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010631d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
        set_page_ref(p, 0);     // clear ref flag
c0106324:	83 ec 08             	sub    $0x8,%esp
c0106327:	6a 00                	push   $0x0
c0106329:	ff 75 f4             	pushl  -0xc(%ebp)
c010632c:	e8 5e fc ff ff       	call   c0105f8f <set_page_ref>
c0106331:	83 c4 10             	add    $0x10,%esp
// LAB2 MODIFIED
static void
default_free_pages(struct Page *base, size_t n) {
    assert(n > 0);
    struct Page *p = base;
    for (; p != base + n; p ++) {
c0106334:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
c0106338:	8b 45 0c             	mov    0xc(%ebp),%eax
c010633b:	c1 e0 05             	shl    $0x5,%eax
c010633e:	89 c2                	mov    %eax,%edx
c0106340:	8b 45 08             	mov    0x8(%ebp),%eax
c0106343:	01 d0                	add    %edx,%eax
c0106345:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0106348:	0f 85 5b ff ff ff    	jne    c01062a9 <default_free_pages+0x33>
        assert(!PageReserved(p) && !PageProperty(p));
        p->flags = 0;
        set_page_ref(p, 0);     // clear ref flag
    }
    base->property = n;
c010634e:	8b 45 08             	mov    0x8(%ebp),%eax
c0106351:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106354:	89 50 08             	mov    %edx,0x8(%eax)
    SetPageProperty(base);
c0106357:	8b 45 08             	mov    0x8(%ebp),%eax
c010635a:	83 c0 04             	add    $0x4,%eax
c010635d:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
c0106364:	89 45 ac             	mov    %eax,-0x54(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0106367:	8b 45 ac             	mov    -0x54(%ebp),%eax
c010636a:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010636d:	0f ab 10             	bts    %edx,(%eax)
c0106370:	c7 45 e8 44 52 15 c0 	movl   $0xc0155244,-0x18(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0106377:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010637a:	8b 40 04             	mov    0x4(%eax),%eax
    // try to extend free block
    list_entry_t *le = list_next(&free_list);
c010637d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    while (le != &free_list) {
c0106380:	e9 0e 01 00 00       	jmp    c0106493 <default_free_pages+0x21d>
        p = le2page(le, page_link);
c0106385:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106388:	83 e8 0c             	sub    $0xc,%eax
c010638b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010638e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106391:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0106394:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106397:	8b 40 04             	mov    0x4(%eax),%eax
        le = list_next(le);
c010639a:	89 45 f0             	mov    %eax,-0x10(%ebp)
        // page is exactly before one page
        if (base + base->property == p) {
c010639d:	8b 45 08             	mov    0x8(%ebp),%eax
c01063a0:	8b 40 08             	mov    0x8(%eax),%eax
c01063a3:	c1 e0 05             	shl    $0x5,%eax
c01063a6:	89 c2                	mov    %eax,%edx
c01063a8:	8b 45 08             	mov    0x8(%ebp),%eax
c01063ab:	01 d0                	add    %edx,%eax
c01063ad:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01063b0:	75 64                	jne    c0106416 <default_free_pages+0x1a0>
            base->property += p->property;
c01063b2:	8b 45 08             	mov    0x8(%ebp),%eax
c01063b5:	8b 50 08             	mov    0x8(%eax),%edx
c01063b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01063bb:	8b 40 08             	mov    0x8(%eax),%eax
c01063be:	01 c2                	add    %eax,%edx
c01063c0:	8b 45 08             	mov    0x8(%ebp),%eax
c01063c3:	89 50 08             	mov    %edx,0x8(%eax)
            p->property = 0;     // clear properties of p
c01063c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01063c9:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
            ClearPageProperty(p);
c01063d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01063d3:	83 c0 04             	add    $0x4,%eax
c01063d6:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
c01063dd:	89 45 a0             	mov    %eax,-0x60(%ebp)
 * @nr:     the bit to clear
 * @addr:   the address to start counting from
 * */
static inline void
clear_bit(int nr, volatile void *addr) {
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c01063e0:	8b 45 a0             	mov    -0x60(%ebp),%eax
c01063e3:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01063e6:	0f b3 10             	btr    %edx,(%eax)
            list_del(&(p->page_link));
c01063e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01063ec:	83 c0 0c             	add    $0xc,%eax
c01063ef:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c01063f2:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01063f5:	8b 40 04             	mov    0x4(%eax),%eax
c01063f8:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01063fb:	8b 12                	mov    (%edx),%edx
c01063fd:	89 55 a8             	mov    %edx,-0x58(%ebp)
c0106400:	89 45 a4             	mov    %eax,-0x5c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0106403:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0106406:	8b 55 a4             	mov    -0x5c(%ebp),%edx
c0106409:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010640c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c010640f:	8b 55 a8             	mov    -0x58(%ebp),%edx
c0106412:	89 10                	mov    %edx,(%eax)
c0106414:	eb 7d                	jmp    c0106493 <default_free_pages+0x21d>
        }
        // page is exactly after one page
        else if (p + p->property == base) {
c0106416:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106419:	8b 40 08             	mov    0x8(%eax),%eax
c010641c:	c1 e0 05             	shl    $0x5,%eax
c010641f:	89 c2                	mov    %eax,%edx
c0106421:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106424:	01 d0                	add    %edx,%eax
c0106426:	3b 45 08             	cmp    0x8(%ebp),%eax
c0106429:	75 68                	jne    c0106493 <default_free_pages+0x21d>
            p->property += base->property;
c010642b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010642e:	8b 50 08             	mov    0x8(%eax),%edx
c0106431:	8b 45 08             	mov    0x8(%ebp),%eax
c0106434:	8b 40 08             	mov    0x8(%eax),%eax
c0106437:	01 c2                	add    %eax,%edx
c0106439:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010643c:	89 50 08             	mov    %edx,0x8(%eax)
            base->property = 0;     // clear properties of base
c010643f:	8b 45 08             	mov    0x8(%ebp),%eax
c0106442:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
            ClearPageProperty(base);
c0106449:	8b 45 08             	mov    0x8(%ebp),%eax
c010644c:	83 c0 04             	add    $0x4,%eax
c010644f:	c7 45 cc 01 00 00 00 	movl   $0x1,-0x34(%ebp)
c0106456:	89 45 94             	mov    %eax,-0x6c(%ebp)
c0106459:	8b 45 94             	mov    -0x6c(%ebp),%eax
c010645c:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010645f:	0f b3 10             	btr    %edx,(%eax)
            base = p;
c0106462:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106465:	89 45 08             	mov    %eax,0x8(%ebp)
            list_del(&(p->page_link));
c0106468:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010646b:	83 c0 0c             	add    $0xc,%eax
c010646e:	89 45 d8             	mov    %eax,-0x28(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0106471:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0106474:	8b 40 04             	mov    0x4(%eax),%eax
c0106477:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010647a:	8b 12                	mov    (%edx),%edx
c010647c:	89 55 9c             	mov    %edx,-0x64(%ebp)
c010647f:	89 45 98             	mov    %eax,-0x68(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0106482:	8b 45 9c             	mov    -0x64(%ebp),%eax
c0106485:	8b 55 98             	mov    -0x68(%ebp),%edx
c0106488:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010648b:	8b 45 98             	mov    -0x68(%ebp),%eax
c010648e:	8b 55 9c             	mov    -0x64(%ebp),%edx
c0106491:	89 10                	mov    %edx,(%eax)
    }
    base->property = n;
    SetPageProperty(base);
    // try to extend free block
    list_entry_t *le = list_next(&free_list);
    while (le != &free_list) {
c0106493:	81 7d f0 44 52 15 c0 	cmpl   $0xc0155244,-0x10(%ebp)
c010649a:	0f 85 e5 fe ff ff    	jne    c0106385 <default_free_pages+0x10f>
c01064a0:	c7 45 d0 44 52 15 c0 	movl   $0xc0155244,-0x30(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01064a7:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01064aa:	8b 40 04             	mov    0x4(%eax),%eax
            base = p;
            list_del(&(p->page_link));
        }
    }
    // search for a place to add page into list
    le = list_next(&free_list);
c01064ad:	89 45 f0             	mov    %eax,-0x10(%ebp)
    while (le != &free_list) {
c01064b0:	eb 20                	jmp    c01064d2 <default_free_pages+0x25c>
        p = le2page(le, page_link);
c01064b2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01064b5:	83 e8 0c             	sub    $0xc,%eax
c01064b8:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (p > base) {
c01064bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01064be:	3b 45 08             	cmp    0x8(%ebp),%eax
c01064c1:	77 1a                	ja     c01064dd <default_free_pages+0x267>
c01064c3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01064c6:	89 45 c8             	mov    %eax,-0x38(%ebp)
c01064c9:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01064cc:	8b 40 04             	mov    0x4(%eax),%eax
            break;
        }
        le = list_next(le);
c01064cf:	89 45 f0             	mov    %eax,-0x10(%ebp)
            list_del(&(p->page_link));
        }
    }
    // search for a place to add page into list
    le = list_next(&free_list);
    while (le != &free_list) {
c01064d2:	81 7d f0 44 52 15 c0 	cmpl   $0xc0155244,-0x10(%ebp)
c01064d9:	75 d7                	jne    c01064b2 <default_free_pages+0x23c>
c01064db:	eb 01                	jmp    c01064de <default_free_pages+0x268>
        p = le2page(le, page_link);
        if (p > base) {
            break;
c01064dd:	90                   	nop
        }
        le = list_next(le);
    }
    nr_free += n;
c01064de:	8b 15 4c 52 15 c0    	mov    0xc015524c,%edx
c01064e4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01064e7:	01 d0                	add    %edx,%eax
c01064e9:	a3 4c 52 15 c0       	mov    %eax,0xc015524c
    list_add_before(le, &(base->page_link)); 
c01064ee:	8b 45 08             	mov    0x8(%ebp),%eax
c01064f1:	8d 50 0c             	lea    0xc(%eax),%edx
c01064f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01064f7:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c01064fa:	89 55 90             	mov    %edx,-0x70(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c01064fd:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0106500:	8b 00                	mov    (%eax),%eax
c0106502:	8b 55 90             	mov    -0x70(%ebp),%edx
c0106505:	89 55 8c             	mov    %edx,-0x74(%ebp)
c0106508:	89 45 88             	mov    %eax,-0x78(%ebp)
c010650b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010650e:	89 45 84             	mov    %eax,-0x7c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0106511:	8b 45 84             	mov    -0x7c(%ebp),%eax
c0106514:	8b 55 8c             	mov    -0x74(%ebp),%edx
c0106517:	89 10                	mov    %edx,(%eax)
c0106519:	8b 45 84             	mov    -0x7c(%ebp),%eax
c010651c:	8b 10                	mov    (%eax),%edx
c010651e:	8b 45 88             	mov    -0x78(%ebp),%eax
c0106521:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0106524:	8b 45 8c             	mov    -0x74(%ebp),%eax
c0106527:	8b 55 84             	mov    -0x7c(%ebp),%edx
c010652a:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010652d:	8b 45 8c             	mov    -0x74(%ebp),%eax
c0106530:	8b 55 88             	mov    -0x78(%ebp),%edx
c0106533:	89 10                	mov    %edx,(%eax)
}
c0106535:	90                   	nop
c0106536:	c9                   	leave  
c0106537:	c3                   	ret    

c0106538 <default_nr_free_pages>:

static size_t
default_nr_free_pages(void) {
c0106538:	55                   	push   %ebp
c0106539:	89 e5                	mov    %esp,%ebp
    return nr_free;
c010653b:	a1 4c 52 15 c0       	mov    0xc015524c,%eax
}
c0106540:	5d                   	pop    %ebp
c0106541:	c3                   	ret    

c0106542 <basic_check>:

static void
basic_check(void) {
c0106542:	55                   	push   %ebp
c0106543:	89 e5                	mov    %esp,%ebp
c0106545:	83 ec 38             	sub    $0x38,%esp
    struct Page *p0, *p1, *p2;
    p0 = p1 = p2 = NULL;
c0106548:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010654f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106552:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106555:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106558:	89 45 ec             	mov    %eax,-0x14(%ebp)
    assert((p0 = alloc_page()) != NULL);
c010655b:	83 ec 0c             	sub    $0xc,%esp
c010655e:	6a 01                	push   $0x1
c0106560:	e8 c7 0c 00 00       	call   c010722c <alloc_pages>
c0106565:	83 c4 10             	add    $0x10,%esp
c0106568:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010656b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010656f:	75 19                	jne    c010658a <basic_check+0x48>
c0106571:	68 b1 58 11 c0       	push   $0xc01158b1
c0106576:	68 4e 58 11 c0       	push   $0xc011584e
c010657b:	68 d0 00 00 00       	push   $0xd0
c0106580:	68 63 58 11 c0       	push   $0xc0115863
c0106585:	e8 63 9f ff ff       	call   c01004ed <__panic>
    assert((p1 = alloc_page()) != NULL);
c010658a:	83 ec 0c             	sub    $0xc,%esp
c010658d:	6a 01                	push   $0x1
c010658f:	e8 98 0c 00 00       	call   c010722c <alloc_pages>
c0106594:	83 c4 10             	add    $0x10,%esp
c0106597:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010659a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010659e:	75 19                	jne    c01065b9 <basic_check+0x77>
c01065a0:	68 cd 58 11 c0       	push   $0xc01158cd
c01065a5:	68 4e 58 11 c0       	push   $0xc011584e
c01065aa:	68 d1 00 00 00       	push   $0xd1
c01065af:	68 63 58 11 c0       	push   $0xc0115863
c01065b4:	e8 34 9f ff ff       	call   c01004ed <__panic>
    assert((p2 = alloc_page()) != NULL);
c01065b9:	83 ec 0c             	sub    $0xc,%esp
c01065bc:	6a 01                	push   $0x1
c01065be:	e8 69 0c 00 00       	call   c010722c <alloc_pages>
c01065c3:	83 c4 10             	add    $0x10,%esp
c01065c6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01065c9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01065cd:	75 19                	jne    c01065e8 <basic_check+0xa6>
c01065cf:	68 e9 58 11 c0       	push   $0xc01158e9
c01065d4:	68 4e 58 11 c0       	push   $0xc011584e
c01065d9:	68 d2 00 00 00       	push   $0xd2
c01065de:	68 63 58 11 c0       	push   $0xc0115863
c01065e3:	e8 05 9f ff ff       	call   c01004ed <__panic>

    assert(p0 != p1 && p0 != p2 && p1 != p2);
c01065e8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01065eb:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01065ee:	74 10                	je     c0106600 <basic_check+0xbe>
c01065f0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01065f3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01065f6:	74 08                	je     c0106600 <basic_check+0xbe>
c01065f8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01065fb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01065fe:	75 19                	jne    c0106619 <basic_check+0xd7>
c0106600:	68 08 59 11 c0       	push   $0xc0115908
c0106605:	68 4e 58 11 c0       	push   $0xc011584e
c010660a:	68 d4 00 00 00       	push   $0xd4
c010660f:	68 63 58 11 c0       	push   $0xc0115863
c0106614:	e8 d4 9e ff ff       	call   c01004ed <__panic>
    assert(page_ref(p0) == 0 && page_ref(p1) == 0 && page_ref(p2) == 0);
c0106619:	83 ec 0c             	sub    $0xc,%esp
c010661c:	ff 75 ec             	pushl  -0x14(%ebp)
c010661f:	e8 61 f9 ff ff       	call   c0105f85 <page_ref>
c0106624:	83 c4 10             	add    $0x10,%esp
c0106627:	85 c0                	test   %eax,%eax
c0106629:	75 24                	jne    c010664f <basic_check+0x10d>
c010662b:	83 ec 0c             	sub    $0xc,%esp
c010662e:	ff 75 f0             	pushl  -0x10(%ebp)
c0106631:	e8 4f f9 ff ff       	call   c0105f85 <page_ref>
c0106636:	83 c4 10             	add    $0x10,%esp
c0106639:	85 c0                	test   %eax,%eax
c010663b:	75 12                	jne    c010664f <basic_check+0x10d>
c010663d:	83 ec 0c             	sub    $0xc,%esp
c0106640:	ff 75 f4             	pushl  -0xc(%ebp)
c0106643:	e8 3d f9 ff ff       	call   c0105f85 <page_ref>
c0106648:	83 c4 10             	add    $0x10,%esp
c010664b:	85 c0                	test   %eax,%eax
c010664d:	74 19                	je     c0106668 <basic_check+0x126>
c010664f:	68 2c 59 11 c0       	push   $0xc011592c
c0106654:	68 4e 58 11 c0       	push   $0xc011584e
c0106659:	68 d5 00 00 00       	push   $0xd5
c010665e:	68 63 58 11 c0       	push   $0xc0115863
c0106663:	e8 85 9e ff ff       	call   c01004ed <__panic>

    assert(page2pa(p0) < npage * PGSIZE);
c0106668:	83 ec 0c             	sub    $0xc,%esp
c010666b:	ff 75 ec             	pushl  -0x14(%ebp)
c010666e:	e8 ff f8 ff ff       	call   c0105f72 <page2pa>
c0106673:	83 c4 10             	add    $0x10,%esp
c0106676:	89 c2                	mov    %eax,%edx
c0106678:	a1 80 1f 15 c0       	mov    0xc0151f80,%eax
c010667d:	c1 e0 0c             	shl    $0xc,%eax
c0106680:	39 c2                	cmp    %eax,%edx
c0106682:	72 19                	jb     c010669d <basic_check+0x15b>
c0106684:	68 68 59 11 c0       	push   $0xc0115968
c0106689:	68 4e 58 11 c0       	push   $0xc011584e
c010668e:	68 d7 00 00 00       	push   $0xd7
c0106693:	68 63 58 11 c0       	push   $0xc0115863
c0106698:	e8 50 9e ff ff       	call   c01004ed <__panic>
    assert(page2pa(p1) < npage * PGSIZE);
c010669d:	83 ec 0c             	sub    $0xc,%esp
c01066a0:	ff 75 f0             	pushl  -0x10(%ebp)
c01066a3:	e8 ca f8 ff ff       	call   c0105f72 <page2pa>
c01066a8:	83 c4 10             	add    $0x10,%esp
c01066ab:	89 c2                	mov    %eax,%edx
c01066ad:	a1 80 1f 15 c0       	mov    0xc0151f80,%eax
c01066b2:	c1 e0 0c             	shl    $0xc,%eax
c01066b5:	39 c2                	cmp    %eax,%edx
c01066b7:	72 19                	jb     c01066d2 <basic_check+0x190>
c01066b9:	68 85 59 11 c0       	push   $0xc0115985
c01066be:	68 4e 58 11 c0       	push   $0xc011584e
c01066c3:	68 d8 00 00 00       	push   $0xd8
c01066c8:	68 63 58 11 c0       	push   $0xc0115863
c01066cd:	e8 1b 9e ff ff       	call   c01004ed <__panic>
    assert(page2pa(p2) < npage * PGSIZE);
c01066d2:	83 ec 0c             	sub    $0xc,%esp
c01066d5:	ff 75 f4             	pushl  -0xc(%ebp)
c01066d8:	e8 95 f8 ff ff       	call   c0105f72 <page2pa>
c01066dd:	83 c4 10             	add    $0x10,%esp
c01066e0:	89 c2                	mov    %eax,%edx
c01066e2:	a1 80 1f 15 c0       	mov    0xc0151f80,%eax
c01066e7:	c1 e0 0c             	shl    $0xc,%eax
c01066ea:	39 c2                	cmp    %eax,%edx
c01066ec:	72 19                	jb     c0106707 <basic_check+0x1c5>
c01066ee:	68 a2 59 11 c0       	push   $0xc01159a2
c01066f3:	68 4e 58 11 c0       	push   $0xc011584e
c01066f8:	68 d9 00 00 00       	push   $0xd9
c01066fd:	68 63 58 11 c0       	push   $0xc0115863
c0106702:	e8 e6 9d ff ff       	call   c01004ed <__panic>

    list_entry_t free_list_store = free_list;
c0106707:	a1 44 52 15 c0       	mov    0xc0155244,%eax
c010670c:	8b 15 48 52 15 c0    	mov    0xc0155248,%edx
c0106712:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0106715:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0106718:	c7 45 e4 44 52 15 c0 	movl   $0xc0155244,-0x1c(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010671f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106722:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106725:	89 50 04             	mov    %edx,0x4(%eax)
c0106728:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010672b:	8b 50 04             	mov    0x4(%eax),%edx
c010672e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106731:	89 10                	mov    %edx,(%eax)
c0106733:	c7 45 d8 44 52 15 c0 	movl   $0xc0155244,-0x28(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010673a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010673d:	8b 40 04             	mov    0x4(%eax),%eax
c0106740:	39 45 d8             	cmp    %eax,-0x28(%ebp)
c0106743:	0f 94 c0             	sete   %al
c0106746:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c0106749:	85 c0                	test   %eax,%eax
c010674b:	75 19                	jne    c0106766 <basic_check+0x224>
c010674d:	68 bf 59 11 c0       	push   $0xc01159bf
c0106752:	68 4e 58 11 c0       	push   $0xc011584e
c0106757:	68 dd 00 00 00       	push   $0xdd
c010675c:	68 63 58 11 c0       	push   $0xc0115863
c0106761:	e8 87 9d ff ff       	call   c01004ed <__panic>

    unsigned int nr_free_store = nr_free;
c0106766:	a1 4c 52 15 c0       	mov    0xc015524c,%eax
c010676b:	89 45 e0             	mov    %eax,-0x20(%ebp)
    nr_free = 0;
c010676e:	c7 05 4c 52 15 c0 00 	movl   $0x0,0xc015524c
c0106775:	00 00 00 

    assert(alloc_page() == NULL);
c0106778:	83 ec 0c             	sub    $0xc,%esp
c010677b:	6a 01                	push   $0x1
c010677d:	e8 aa 0a 00 00       	call   c010722c <alloc_pages>
c0106782:	83 c4 10             	add    $0x10,%esp
c0106785:	85 c0                	test   %eax,%eax
c0106787:	74 19                	je     c01067a2 <basic_check+0x260>
c0106789:	68 d6 59 11 c0       	push   $0xc01159d6
c010678e:	68 4e 58 11 c0       	push   $0xc011584e
c0106793:	68 e2 00 00 00       	push   $0xe2
c0106798:	68 63 58 11 c0       	push   $0xc0115863
c010679d:	e8 4b 9d ff ff       	call   c01004ed <__panic>

    free_page(p0);
c01067a2:	83 ec 08             	sub    $0x8,%esp
c01067a5:	6a 01                	push   $0x1
c01067a7:	ff 75 ec             	pushl  -0x14(%ebp)
c01067aa:	e8 e9 0a 00 00       	call   c0107298 <free_pages>
c01067af:	83 c4 10             	add    $0x10,%esp
    free_page(p1);
c01067b2:	83 ec 08             	sub    $0x8,%esp
c01067b5:	6a 01                	push   $0x1
c01067b7:	ff 75 f0             	pushl  -0x10(%ebp)
c01067ba:	e8 d9 0a 00 00       	call   c0107298 <free_pages>
c01067bf:	83 c4 10             	add    $0x10,%esp
    free_page(p2);
c01067c2:	83 ec 08             	sub    $0x8,%esp
c01067c5:	6a 01                	push   $0x1
c01067c7:	ff 75 f4             	pushl  -0xc(%ebp)
c01067ca:	e8 c9 0a 00 00       	call   c0107298 <free_pages>
c01067cf:	83 c4 10             	add    $0x10,%esp
    assert(nr_free == 3);
c01067d2:	a1 4c 52 15 c0       	mov    0xc015524c,%eax
c01067d7:	83 f8 03             	cmp    $0x3,%eax
c01067da:	74 19                	je     c01067f5 <basic_check+0x2b3>
c01067dc:	68 eb 59 11 c0       	push   $0xc01159eb
c01067e1:	68 4e 58 11 c0       	push   $0xc011584e
c01067e6:	68 e7 00 00 00       	push   $0xe7
c01067eb:	68 63 58 11 c0       	push   $0xc0115863
c01067f0:	e8 f8 9c ff ff       	call   c01004ed <__panic>

    assert((p0 = alloc_page()) != NULL);
c01067f5:	83 ec 0c             	sub    $0xc,%esp
c01067f8:	6a 01                	push   $0x1
c01067fa:	e8 2d 0a 00 00       	call   c010722c <alloc_pages>
c01067ff:	83 c4 10             	add    $0x10,%esp
c0106802:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0106805:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0106809:	75 19                	jne    c0106824 <basic_check+0x2e2>
c010680b:	68 b1 58 11 c0       	push   $0xc01158b1
c0106810:	68 4e 58 11 c0       	push   $0xc011584e
c0106815:	68 e9 00 00 00       	push   $0xe9
c010681a:	68 63 58 11 c0       	push   $0xc0115863
c010681f:	e8 c9 9c ff ff       	call   c01004ed <__panic>
    assert((p1 = alloc_page()) != NULL);
c0106824:	83 ec 0c             	sub    $0xc,%esp
c0106827:	6a 01                	push   $0x1
c0106829:	e8 fe 09 00 00       	call   c010722c <alloc_pages>
c010682e:	83 c4 10             	add    $0x10,%esp
c0106831:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106834:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106838:	75 19                	jne    c0106853 <basic_check+0x311>
c010683a:	68 cd 58 11 c0       	push   $0xc01158cd
c010683f:	68 4e 58 11 c0       	push   $0xc011584e
c0106844:	68 ea 00 00 00       	push   $0xea
c0106849:	68 63 58 11 c0       	push   $0xc0115863
c010684e:	e8 9a 9c ff ff       	call   c01004ed <__panic>
    assert((p2 = alloc_page()) != NULL);
c0106853:	83 ec 0c             	sub    $0xc,%esp
c0106856:	6a 01                	push   $0x1
c0106858:	e8 cf 09 00 00       	call   c010722c <alloc_pages>
c010685d:	83 c4 10             	add    $0x10,%esp
c0106860:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0106863:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106867:	75 19                	jne    c0106882 <basic_check+0x340>
c0106869:	68 e9 58 11 c0       	push   $0xc01158e9
c010686e:	68 4e 58 11 c0       	push   $0xc011584e
c0106873:	68 eb 00 00 00       	push   $0xeb
c0106878:	68 63 58 11 c0       	push   $0xc0115863
c010687d:	e8 6b 9c ff ff       	call   c01004ed <__panic>

    assert(alloc_page() == NULL);
c0106882:	83 ec 0c             	sub    $0xc,%esp
c0106885:	6a 01                	push   $0x1
c0106887:	e8 a0 09 00 00       	call   c010722c <alloc_pages>
c010688c:	83 c4 10             	add    $0x10,%esp
c010688f:	85 c0                	test   %eax,%eax
c0106891:	74 19                	je     c01068ac <basic_check+0x36a>
c0106893:	68 d6 59 11 c0       	push   $0xc01159d6
c0106898:	68 4e 58 11 c0       	push   $0xc011584e
c010689d:	68 ed 00 00 00       	push   $0xed
c01068a2:	68 63 58 11 c0       	push   $0xc0115863
c01068a7:	e8 41 9c ff ff       	call   c01004ed <__panic>

    free_page(p0);
c01068ac:	83 ec 08             	sub    $0x8,%esp
c01068af:	6a 01                	push   $0x1
c01068b1:	ff 75 ec             	pushl  -0x14(%ebp)
c01068b4:	e8 df 09 00 00       	call   c0107298 <free_pages>
c01068b9:	83 c4 10             	add    $0x10,%esp
c01068bc:	c7 45 e8 44 52 15 c0 	movl   $0xc0155244,-0x18(%ebp)
c01068c3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01068c6:	8b 40 04             	mov    0x4(%eax),%eax
c01068c9:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c01068cc:	0f 94 c0             	sete   %al
c01068cf:	0f b6 c0             	movzbl %al,%eax
    assert(!list_empty(&free_list));
c01068d2:	85 c0                	test   %eax,%eax
c01068d4:	74 19                	je     c01068ef <basic_check+0x3ad>
c01068d6:	68 f8 59 11 c0       	push   $0xc01159f8
c01068db:	68 4e 58 11 c0       	push   $0xc011584e
c01068e0:	68 f0 00 00 00       	push   $0xf0
c01068e5:	68 63 58 11 c0       	push   $0xc0115863
c01068ea:	e8 fe 9b ff ff       	call   c01004ed <__panic>

    struct Page *p;
    assert((p = alloc_page()) == p0);
c01068ef:	83 ec 0c             	sub    $0xc,%esp
c01068f2:	6a 01                	push   $0x1
c01068f4:	e8 33 09 00 00       	call   c010722c <alloc_pages>
c01068f9:	83 c4 10             	add    $0x10,%esp
c01068fc:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01068ff:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106902:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0106905:	74 19                	je     c0106920 <basic_check+0x3de>
c0106907:	68 10 5a 11 c0       	push   $0xc0115a10
c010690c:	68 4e 58 11 c0       	push   $0xc011584e
c0106911:	68 f3 00 00 00       	push   $0xf3
c0106916:	68 63 58 11 c0       	push   $0xc0115863
c010691b:	e8 cd 9b ff ff       	call   c01004ed <__panic>
    assert(alloc_page() == NULL);
c0106920:	83 ec 0c             	sub    $0xc,%esp
c0106923:	6a 01                	push   $0x1
c0106925:	e8 02 09 00 00       	call   c010722c <alloc_pages>
c010692a:	83 c4 10             	add    $0x10,%esp
c010692d:	85 c0                	test   %eax,%eax
c010692f:	74 19                	je     c010694a <basic_check+0x408>
c0106931:	68 d6 59 11 c0       	push   $0xc01159d6
c0106936:	68 4e 58 11 c0       	push   $0xc011584e
c010693b:	68 f4 00 00 00       	push   $0xf4
c0106940:	68 63 58 11 c0       	push   $0xc0115863
c0106945:	e8 a3 9b ff ff       	call   c01004ed <__panic>

    assert(nr_free == 0);
c010694a:	a1 4c 52 15 c0       	mov    0xc015524c,%eax
c010694f:	85 c0                	test   %eax,%eax
c0106951:	74 19                	je     c010696c <basic_check+0x42a>
c0106953:	68 29 5a 11 c0       	push   $0xc0115a29
c0106958:	68 4e 58 11 c0       	push   $0xc011584e
c010695d:	68 f6 00 00 00       	push   $0xf6
c0106962:	68 63 58 11 c0       	push   $0xc0115863
c0106967:	e8 81 9b ff ff       	call   c01004ed <__panic>
    free_list = free_list_store;
c010696c:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010696f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0106972:	a3 44 52 15 c0       	mov    %eax,0xc0155244
c0106977:	89 15 48 52 15 c0    	mov    %edx,0xc0155248
    nr_free = nr_free_store;
c010697d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106980:	a3 4c 52 15 c0       	mov    %eax,0xc015524c

    free_page(p);
c0106985:	83 ec 08             	sub    $0x8,%esp
c0106988:	6a 01                	push   $0x1
c010698a:	ff 75 dc             	pushl  -0x24(%ebp)
c010698d:	e8 06 09 00 00       	call   c0107298 <free_pages>
c0106992:	83 c4 10             	add    $0x10,%esp
    free_page(p1);
c0106995:	83 ec 08             	sub    $0x8,%esp
c0106998:	6a 01                	push   $0x1
c010699a:	ff 75 f0             	pushl  -0x10(%ebp)
c010699d:	e8 f6 08 00 00       	call   c0107298 <free_pages>
c01069a2:	83 c4 10             	add    $0x10,%esp
    free_page(p2);
c01069a5:	83 ec 08             	sub    $0x8,%esp
c01069a8:	6a 01                	push   $0x1
c01069aa:	ff 75 f4             	pushl  -0xc(%ebp)
c01069ad:	e8 e6 08 00 00       	call   c0107298 <free_pages>
c01069b2:	83 c4 10             	add    $0x10,%esp
}
c01069b5:	90                   	nop
c01069b6:	c9                   	leave  
c01069b7:	c3                   	ret    

c01069b8 <default_check>:

// LAB2: below code is used to check the first fit allocation algorithm (your EXERCISE 1) 
// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
static void
default_check(void) {
c01069b8:	55                   	push   %ebp
c01069b9:	89 e5                	mov    %esp,%ebp
c01069bb:	81 ec 88 00 00 00    	sub    $0x88,%esp
    int count = 0, total = 0;
c01069c1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01069c8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    list_entry_t *le = &free_list;
c01069cf:	c7 45 ec 44 52 15 c0 	movl   $0xc0155244,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c01069d6:	eb 60                	jmp    c0106a38 <default_check+0x80>
        struct Page *p = le2page(le, page_link);
c01069d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01069db:	83 e8 0c             	sub    $0xc,%eax
c01069de:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        assert(PageProperty(p));
c01069e1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01069e4:	83 c0 04             	add    $0x4,%eax
c01069e7:	c7 45 b0 01 00 00 00 	movl   $0x1,-0x50(%ebp)
c01069ee:	89 45 ac             	mov    %eax,-0x54(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01069f1:	8b 45 ac             	mov    -0x54(%ebp),%eax
c01069f4:	8b 55 b0             	mov    -0x50(%ebp),%edx
c01069f7:	0f a3 10             	bt     %edx,(%eax)
c01069fa:	19 c0                	sbb    %eax,%eax
c01069fc:	89 45 a8             	mov    %eax,-0x58(%ebp)
    return oldbit != 0;
c01069ff:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
c0106a03:	0f 95 c0             	setne  %al
c0106a06:	0f b6 c0             	movzbl %al,%eax
c0106a09:	85 c0                	test   %eax,%eax
c0106a0b:	75 19                	jne    c0106a26 <default_check+0x6e>
c0106a0d:	68 36 5a 11 c0       	push   $0xc0115a36
c0106a12:	68 4e 58 11 c0       	push   $0xc011584e
c0106a17:	68 07 01 00 00       	push   $0x107
c0106a1c:	68 63 58 11 c0       	push   $0xc0115863
c0106a21:	e8 c7 9a ff ff       	call   c01004ed <__panic>
        count ++, total += p->property;
c0106a26:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0106a2a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106a2d:	8b 50 08             	mov    0x8(%eax),%edx
c0106a30:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106a33:	01 d0                	add    %edx,%eax
c0106a35:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106a38:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106a3b:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0106a3e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106a41:	8b 40 04             	mov    0x4(%eax),%eax
// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
static void
default_check(void) {
    int count = 0, total = 0;
    list_entry_t *le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c0106a44:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0106a47:	81 7d ec 44 52 15 c0 	cmpl   $0xc0155244,-0x14(%ebp)
c0106a4e:	75 88                	jne    c01069d8 <default_check+0x20>
        struct Page *p = le2page(le, page_link);
        assert(PageProperty(p));
        count ++, total += p->property;
    }
    assert(total == nr_free_pages());
c0106a50:	e8 78 08 00 00       	call   c01072cd <nr_free_pages>
c0106a55:	89 c2                	mov    %eax,%edx
c0106a57:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106a5a:	39 c2                	cmp    %eax,%edx
c0106a5c:	74 19                	je     c0106a77 <default_check+0xbf>
c0106a5e:	68 46 5a 11 c0       	push   $0xc0115a46
c0106a63:	68 4e 58 11 c0       	push   $0xc011584e
c0106a68:	68 0a 01 00 00       	push   $0x10a
c0106a6d:	68 63 58 11 c0       	push   $0xc0115863
c0106a72:	e8 76 9a ff ff       	call   c01004ed <__panic>

    basic_check();
c0106a77:	e8 c6 fa ff ff       	call   c0106542 <basic_check>

    struct Page *p0 = alloc_pages(5), *p1, *p2;
c0106a7c:	83 ec 0c             	sub    $0xc,%esp
c0106a7f:	6a 05                	push   $0x5
c0106a81:	e8 a6 07 00 00       	call   c010722c <alloc_pages>
c0106a86:	83 c4 10             	add    $0x10,%esp
c0106a89:	89 45 dc             	mov    %eax,-0x24(%ebp)
    assert(p0 != NULL);
c0106a8c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0106a90:	75 19                	jne    c0106aab <default_check+0xf3>
c0106a92:	68 5f 5a 11 c0       	push   $0xc0115a5f
c0106a97:	68 4e 58 11 c0       	push   $0xc011584e
c0106a9c:	68 0f 01 00 00       	push   $0x10f
c0106aa1:	68 63 58 11 c0       	push   $0xc0115863
c0106aa6:	e8 42 9a ff ff       	call   c01004ed <__panic>
    assert(!PageProperty(p0));
c0106aab:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106aae:	83 c0 04             	add    $0x4,%eax
c0106ab1:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
c0106ab8:	89 45 a4             	mov    %eax,-0x5c(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0106abb:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0106abe:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0106ac1:	0f a3 10             	bt     %edx,(%eax)
c0106ac4:	19 c0                	sbb    %eax,%eax
c0106ac6:	89 45 a0             	mov    %eax,-0x60(%ebp)
    return oldbit != 0;
c0106ac9:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
c0106acd:	0f 95 c0             	setne  %al
c0106ad0:	0f b6 c0             	movzbl %al,%eax
c0106ad3:	85 c0                	test   %eax,%eax
c0106ad5:	74 19                	je     c0106af0 <default_check+0x138>
c0106ad7:	68 6a 5a 11 c0       	push   $0xc0115a6a
c0106adc:	68 4e 58 11 c0       	push   $0xc011584e
c0106ae1:	68 10 01 00 00       	push   $0x110
c0106ae6:	68 63 58 11 c0       	push   $0xc0115863
c0106aeb:	e8 fd 99 ff ff       	call   c01004ed <__panic>

    list_entry_t free_list_store = free_list;
c0106af0:	a1 44 52 15 c0       	mov    0xc0155244,%eax
c0106af5:	8b 15 48 52 15 c0    	mov    0xc0155248,%edx
c0106afb:	89 45 80             	mov    %eax,-0x80(%ebp)
c0106afe:	89 55 84             	mov    %edx,-0x7c(%ebp)
c0106b01:	c7 45 d0 44 52 15 c0 	movl   $0xc0155244,-0x30(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0106b08:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0106b0b:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0106b0e:	89 50 04             	mov    %edx,0x4(%eax)
c0106b11:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0106b14:	8b 50 04             	mov    0x4(%eax),%edx
c0106b17:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0106b1a:	89 10                	mov    %edx,(%eax)
c0106b1c:	c7 45 d8 44 52 15 c0 	movl   $0xc0155244,-0x28(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0106b23:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0106b26:	8b 40 04             	mov    0x4(%eax),%eax
c0106b29:	39 45 d8             	cmp    %eax,-0x28(%ebp)
c0106b2c:	0f 94 c0             	sete   %al
c0106b2f:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c0106b32:	85 c0                	test   %eax,%eax
c0106b34:	75 19                	jne    c0106b4f <default_check+0x197>
c0106b36:	68 bf 59 11 c0       	push   $0xc01159bf
c0106b3b:	68 4e 58 11 c0       	push   $0xc011584e
c0106b40:	68 14 01 00 00       	push   $0x114
c0106b45:	68 63 58 11 c0       	push   $0xc0115863
c0106b4a:	e8 9e 99 ff ff       	call   c01004ed <__panic>
    assert(alloc_page() == NULL);
c0106b4f:	83 ec 0c             	sub    $0xc,%esp
c0106b52:	6a 01                	push   $0x1
c0106b54:	e8 d3 06 00 00       	call   c010722c <alloc_pages>
c0106b59:	83 c4 10             	add    $0x10,%esp
c0106b5c:	85 c0                	test   %eax,%eax
c0106b5e:	74 19                	je     c0106b79 <default_check+0x1c1>
c0106b60:	68 d6 59 11 c0       	push   $0xc01159d6
c0106b65:	68 4e 58 11 c0       	push   $0xc011584e
c0106b6a:	68 15 01 00 00       	push   $0x115
c0106b6f:	68 63 58 11 c0       	push   $0xc0115863
c0106b74:	e8 74 99 ff ff       	call   c01004ed <__panic>

    unsigned int nr_free_store = nr_free;
c0106b79:	a1 4c 52 15 c0       	mov    0xc015524c,%eax
c0106b7e:	89 45 cc             	mov    %eax,-0x34(%ebp)
    nr_free = 0;
c0106b81:	c7 05 4c 52 15 c0 00 	movl   $0x0,0xc015524c
c0106b88:	00 00 00 

    free_pages(p0 + 2, 3);
c0106b8b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106b8e:	83 c0 40             	add    $0x40,%eax
c0106b91:	83 ec 08             	sub    $0x8,%esp
c0106b94:	6a 03                	push   $0x3
c0106b96:	50                   	push   %eax
c0106b97:	e8 fc 06 00 00       	call   c0107298 <free_pages>
c0106b9c:	83 c4 10             	add    $0x10,%esp
    assert(alloc_pages(4) == NULL);
c0106b9f:	83 ec 0c             	sub    $0xc,%esp
c0106ba2:	6a 04                	push   $0x4
c0106ba4:	e8 83 06 00 00       	call   c010722c <alloc_pages>
c0106ba9:	83 c4 10             	add    $0x10,%esp
c0106bac:	85 c0                	test   %eax,%eax
c0106bae:	74 19                	je     c0106bc9 <default_check+0x211>
c0106bb0:	68 7c 5a 11 c0       	push   $0xc0115a7c
c0106bb5:	68 4e 58 11 c0       	push   $0xc011584e
c0106bba:	68 1b 01 00 00       	push   $0x11b
c0106bbf:	68 63 58 11 c0       	push   $0xc0115863
c0106bc4:	e8 24 99 ff ff       	call   c01004ed <__panic>
    assert(PageProperty(p0 + 2) && p0[2].property == 3);
c0106bc9:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106bcc:	83 c0 40             	add    $0x40,%eax
c0106bcf:	83 c0 04             	add    $0x4,%eax
c0106bd2:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
c0106bd9:	89 45 9c             	mov    %eax,-0x64(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0106bdc:	8b 45 9c             	mov    -0x64(%ebp),%eax
c0106bdf:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0106be2:	0f a3 10             	bt     %edx,(%eax)
c0106be5:	19 c0                	sbb    %eax,%eax
c0106be7:	89 45 98             	mov    %eax,-0x68(%ebp)
    return oldbit != 0;
c0106bea:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
c0106bee:	0f 95 c0             	setne  %al
c0106bf1:	0f b6 c0             	movzbl %al,%eax
c0106bf4:	85 c0                	test   %eax,%eax
c0106bf6:	74 0e                	je     c0106c06 <default_check+0x24e>
c0106bf8:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106bfb:	83 c0 40             	add    $0x40,%eax
c0106bfe:	8b 40 08             	mov    0x8(%eax),%eax
c0106c01:	83 f8 03             	cmp    $0x3,%eax
c0106c04:	74 19                	je     c0106c1f <default_check+0x267>
c0106c06:	68 94 5a 11 c0       	push   $0xc0115a94
c0106c0b:	68 4e 58 11 c0       	push   $0xc011584e
c0106c10:	68 1c 01 00 00       	push   $0x11c
c0106c15:	68 63 58 11 c0       	push   $0xc0115863
c0106c1a:	e8 ce 98 ff ff       	call   c01004ed <__panic>
    assert((p1 = alloc_pages(3)) != NULL);
c0106c1f:	83 ec 0c             	sub    $0xc,%esp
c0106c22:	6a 03                	push   $0x3
c0106c24:	e8 03 06 00 00       	call   c010722c <alloc_pages>
c0106c29:	83 c4 10             	add    $0x10,%esp
c0106c2c:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c0106c2f:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
c0106c33:	75 19                	jne    c0106c4e <default_check+0x296>
c0106c35:	68 c0 5a 11 c0       	push   $0xc0115ac0
c0106c3a:	68 4e 58 11 c0       	push   $0xc011584e
c0106c3f:	68 1d 01 00 00       	push   $0x11d
c0106c44:	68 63 58 11 c0       	push   $0xc0115863
c0106c49:	e8 9f 98 ff ff       	call   c01004ed <__panic>
    assert(alloc_page() == NULL);
c0106c4e:	83 ec 0c             	sub    $0xc,%esp
c0106c51:	6a 01                	push   $0x1
c0106c53:	e8 d4 05 00 00       	call   c010722c <alloc_pages>
c0106c58:	83 c4 10             	add    $0x10,%esp
c0106c5b:	85 c0                	test   %eax,%eax
c0106c5d:	74 19                	je     c0106c78 <default_check+0x2c0>
c0106c5f:	68 d6 59 11 c0       	push   $0xc01159d6
c0106c64:	68 4e 58 11 c0       	push   $0xc011584e
c0106c69:	68 1e 01 00 00       	push   $0x11e
c0106c6e:	68 63 58 11 c0       	push   $0xc0115863
c0106c73:	e8 75 98 ff ff       	call   c01004ed <__panic>
    assert(p0 + 2 == p1);
c0106c78:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106c7b:	83 c0 40             	add    $0x40,%eax
c0106c7e:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
c0106c81:	74 19                	je     c0106c9c <default_check+0x2e4>
c0106c83:	68 de 5a 11 c0       	push   $0xc0115ade
c0106c88:	68 4e 58 11 c0       	push   $0xc011584e
c0106c8d:	68 1f 01 00 00       	push   $0x11f
c0106c92:	68 63 58 11 c0       	push   $0xc0115863
c0106c97:	e8 51 98 ff ff       	call   c01004ed <__panic>

    p2 = p0 + 1;
c0106c9c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106c9f:	83 c0 20             	add    $0x20,%eax
c0106ca2:	89 45 c0             	mov    %eax,-0x40(%ebp)
    free_page(p0);
c0106ca5:	83 ec 08             	sub    $0x8,%esp
c0106ca8:	6a 01                	push   $0x1
c0106caa:	ff 75 dc             	pushl  -0x24(%ebp)
c0106cad:	e8 e6 05 00 00       	call   c0107298 <free_pages>
c0106cb2:	83 c4 10             	add    $0x10,%esp
    free_pages(p1, 3);
c0106cb5:	83 ec 08             	sub    $0x8,%esp
c0106cb8:	6a 03                	push   $0x3
c0106cba:	ff 75 c4             	pushl  -0x3c(%ebp)
c0106cbd:	e8 d6 05 00 00       	call   c0107298 <free_pages>
c0106cc2:	83 c4 10             	add    $0x10,%esp
    assert(PageProperty(p0) && p0->property == 1);
c0106cc5:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106cc8:	83 c0 04             	add    $0x4,%eax
c0106ccb:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
c0106cd2:	89 45 94             	mov    %eax,-0x6c(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0106cd5:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0106cd8:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0106cdb:	0f a3 10             	bt     %edx,(%eax)
c0106cde:	19 c0                	sbb    %eax,%eax
c0106ce0:	89 45 90             	mov    %eax,-0x70(%ebp)
    return oldbit != 0;
c0106ce3:	83 7d 90 00          	cmpl   $0x0,-0x70(%ebp)
c0106ce7:	0f 95 c0             	setne  %al
c0106cea:	0f b6 c0             	movzbl %al,%eax
c0106ced:	85 c0                	test   %eax,%eax
c0106cef:	74 0b                	je     c0106cfc <default_check+0x344>
c0106cf1:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106cf4:	8b 40 08             	mov    0x8(%eax),%eax
c0106cf7:	83 f8 01             	cmp    $0x1,%eax
c0106cfa:	74 19                	je     c0106d15 <default_check+0x35d>
c0106cfc:	68 ec 5a 11 c0       	push   $0xc0115aec
c0106d01:	68 4e 58 11 c0       	push   $0xc011584e
c0106d06:	68 24 01 00 00       	push   $0x124
c0106d0b:	68 63 58 11 c0       	push   $0xc0115863
c0106d10:	e8 d8 97 ff ff       	call   c01004ed <__panic>
    assert(PageProperty(p1) && p1->property == 3);
c0106d15:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0106d18:	83 c0 04             	add    $0x4,%eax
c0106d1b:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
c0106d22:	89 45 8c             	mov    %eax,-0x74(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0106d25:	8b 45 8c             	mov    -0x74(%ebp),%eax
c0106d28:	8b 55 bc             	mov    -0x44(%ebp),%edx
c0106d2b:	0f a3 10             	bt     %edx,(%eax)
c0106d2e:	19 c0                	sbb    %eax,%eax
c0106d30:	89 45 88             	mov    %eax,-0x78(%ebp)
    return oldbit != 0;
c0106d33:	83 7d 88 00          	cmpl   $0x0,-0x78(%ebp)
c0106d37:	0f 95 c0             	setne  %al
c0106d3a:	0f b6 c0             	movzbl %al,%eax
c0106d3d:	85 c0                	test   %eax,%eax
c0106d3f:	74 0b                	je     c0106d4c <default_check+0x394>
c0106d41:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0106d44:	8b 40 08             	mov    0x8(%eax),%eax
c0106d47:	83 f8 03             	cmp    $0x3,%eax
c0106d4a:	74 19                	je     c0106d65 <default_check+0x3ad>
c0106d4c:	68 14 5b 11 c0       	push   $0xc0115b14
c0106d51:	68 4e 58 11 c0       	push   $0xc011584e
c0106d56:	68 25 01 00 00       	push   $0x125
c0106d5b:	68 63 58 11 c0       	push   $0xc0115863
c0106d60:	e8 88 97 ff ff       	call   c01004ed <__panic>

    assert((p0 = alloc_page()) == p2 - 1);
c0106d65:	83 ec 0c             	sub    $0xc,%esp
c0106d68:	6a 01                	push   $0x1
c0106d6a:	e8 bd 04 00 00       	call   c010722c <alloc_pages>
c0106d6f:	83 c4 10             	add    $0x10,%esp
c0106d72:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0106d75:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0106d78:	83 e8 20             	sub    $0x20,%eax
c0106d7b:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c0106d7e:	74 19                	je     c0106d99 <default_check+0x3e1>
c0106d80:	68 3a 5b 11 c0       	push   $0xc0115b3a
c0106d85:	68 4e 58 11 c0       	push   $0xc011584e
c0106d8a:	68 27 01 00 00       	push   $0x127
c0106d8f:	68 63 58 11 c0       	push   $0xc0115863
c0106d94:	e8 54 97 ff ff       	call   c01004ed <__panic>
    free_page(p0);
c0106d99:	83 ec 08             	sub    $0x8,%esp
c0106d9c:	6a 01                	push   $0x1
c0106d9e:	ff 75 dc             	pushl  -0x24(%ebp)
c0106da1:	e8 f2 04 00 00       	call   c0107298 <free_pages>
c0106da6:	83 c4 10             	add    $0x10,%esp
    assert((p0 = alloc_pages(2)) == p2 + 1);
c0106da9:	83 ec 0c             	sub    $0xc,%esp
c0106dac:	6a 02                	push   $0x2
c0106dae:	e8 79 04 00 00       	call   c010722c <alloc_pages>
c0106db3:	83 c4 10             	add    $0x10,%esp
c0106db6:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0106db9:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0106dbc:	83 c0 20             	add    $0x20,%eax
c0106dbf:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c0106dc2:	74 19                	je     c0106ddd <default_check+0x425>
c0106dc4:	68 58 5b 11 c0       	push   $0xc0115b58
c0106dc9:	68 4e 58 11 c0       	push   $0xc011584e
c0106dce:	68 29 01 00 00       	push   $0x129
c0106dd3:	68 63 58 11 c0       	push   $0xc0115863
c0106dd8:	e8 10 97 ff ff       	call   c01004ed <__panic>

    free_pages(p0, 2);
c0106ddd:	83 ec 08             	sub    $0x8,%esp
c0106de0:	6a 02                	push   $0x2
c0106de2:	ff 75 dc             	pushl  -0x24(%ebp)
c0106de5:	e8 ae 04 00 00       	call   c0107298 <free_pages>
c0106dea:	83 c4 10             	add    $0x10,%esp
    free_page(p2);
c0106ded:	83 ec 08             	sub    $0x8,%esp
c0106df0:	6a 01                	push   $0x1
c0106df2:	ff 75 c0             	pushl  -0x40(%ebp)
c0106df5:	e8 9e 04 00 00       	call   c0107298 <free_pages>
c0106dfa:	83 c4 10             	add    $0x10,%esp

    assert((p0 = alloc_pages(5)) != NULL);
c0106dfd:	83 ec 0c             	sub    $0xc,%esp
c0106e00:	6a 05                	push   $0x5
c0106e02:	e8 25 04 00 00       	call   c010722c <alloc_pages>
c0106e07:	83 c4 10             	add    $0x10,%esp
c0106e0a:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0106e0d:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0106e11:	75 19                	jne    c0106e2c <default_check+0x474>
c0106e13:	68 78 5b 11 c0       	push   $0xc0115b78
c0106e18:	68 4e 58 11 c0       	push   $0xc011584e
c0106e1d:	68 2e 01 00 00       	push   $0x12e
c0106e22:	68 63 58 11 c0       	push   $0xc0115863
c0106e27:	e8 c1 96 ff ff       	call   c01004ed <__panic>
    assert(alloc_page() == NULL);
c0106e2c:	83 ec 0c             	sub    $0xc,%esp
c0106e2f:	6a 01                	push   $0x1
c0106e31:	e8 f6 03 00 00       	call   c010722c <alloc_pages>
c0106e36:	83 c4 10             	add    $0x10,%esp
c0106e39:	85 c0                	test   %eax,%eax
c0106e3b:	74 19                	je     c0106e56 <default_check+0x49e>
c0106e3d:	68 d6 59 11 c0       	push   $0xc01159d6
c0106e42:	68 4e 58 11 c0       	push   $0xc011584e
c0106e47:	68 2f 01 00 00       	push   $0x12f
c0106e4c:	68 63 58 11 c0       	push   $0xc0115863
c0106e51:	e8 97 96 ff ff       	call   c01004ed <__panic>

    assert(nr_free == 0);
c0106e56:	a1 4c 52 15 c0       	mov    0xc015524c,%eax
c0106e5b:	85 c0                	test   %eax,%eax
c0106e5d:	74 19                	je     c0106e78 <default_check+0x4c0>
c0106e5f:	68 29 5a 11 c0       	push   $0xc0115a29
c0106e64:	68 4e 58 11 c0       	push   $0xc011584e
c0106e69:	68 31 01 00 00       	push   $0x131
c0106e6e:	68 63 58 11 c0       	push   $0xc0115863
c0106e73:	e8 75 96 ff ff       	call   c01004ed <__panic>
    nr_free = nr_free_store;
c0106e78:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0106e7b:	a3 4c 52 15 c0       	mov    %eax,0xc015524c

    free_list = free_list_store;
c0106e80:	8b 45 80             	mov    -0x80(%ebp),%eax
c0106e83:	8b 55 84             	mov    -0x7c(%ebp),%edx
c0106e86:	a3 44 52 15 c0       	mov    %eax,0xc0155244
c0106e8b:	89 15 48 52 15 c0    	mov    %edx,0xc0155248
    free_pages(p0, 5);
c0106e91:	83 ec 08             	sub    $0x8,%esp
c0106e94:	6a 05                	push   $0x5
c0106e96:	ff 75 dc             	pushl  -0x24(%ebp)
c0106e99:	e8 fa 03 00 00       	call   c0107298 <free_pages>
c0106e9e:	83 c4 10             	add    $0x10,%esp

    le = &free_list;
c0106ea1:	c7 45 ec 44 52 15 c0 	movl   $0xc0155244,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c0106ea8:	eb 1d                	jmp    c0106ec7 <default_check+0x50f>
        struct Page *p = le2page(le, page_link);
c0106eaa:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106ead:	83 e8 0c             	sub    $0xc,%eax
c0106eb0:	89 45 b4             	mov    %eax,-0x4c(%ebp)
        count --, total -= p->property;
c0106eb3:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0106eb7:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0106eba:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0106ebd:	8b 40 08             	mov    0x8(%eax),%eax
c0106ec0:	29 c2                	sub    %eax,%edx
c0106ec2:	89 d0                	mov    %edx,%eax
c0106ec4:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106ec7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106eca:	89 45 b8             	mov    %eax,-0x48(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0106ecd:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0106ed0:	8b 40 04             	mov    0x4(%eax),%eax

    free_list = free_list_store;
    free_pages(p0, 5);

    le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c0106ed3:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0106ed6:	81 7d ec 44 52 15 c0 	cmpl   $0xc0155244,-0x14(%ebp)
c0106edd:	75 cb                	jne    c0106eaa <default_check+0x4f2>
        struct Page *p = le2page(le, page_link);
        count --, total -= p->property;
    }
    assert(count == 0);
c0106edf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106ee3:	74 19                	je     c0106efe <default_check+0x546>
c0106ee5:	68 96 5b 11 c0       	push   $0xc0115b96
c0106eea:	68 4e 58 11 c0       	push   $0xc011584e
c0106eef:	68 3c 01 00 00       	push   $0x13c
c0106ef4:	68 63 58 11 c0       	push   $0xc0115863
c0106ef9:	e8 ef 95 ff ff       	call   c01004ed <__panic>
    assert(total == 0);
c0106efe:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106f02:	74 19                	je     c0106f1d <default_check+0x565>
c0106f04:	68 a1 5b 11 c0       	push   $0xc0115ba1
c0106f09:	68 4e 58 11 c0       	push   $0xc011584e
c0106f0e:	68 3d 01 00 00       	push   $0x13d
c0106f13:	68 63 58 11 c0       	push   $0xc0115863
c0106f18:	e8 d0 95 ff ff       	call   c01004ed <__panic>
}
c0106f1d:	90                   	nop
c0106f1e:	c9                   	leave  
c0106f1f:	c3                   	ret    

c0106f20 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0106f20:	55                   	push   %ebp
c0106f21:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0106f23:	8b 45 08             	mov    0x8(%ebp),%eax
c0106f26:	8b 15 58 52 15 c0    	mov    0xc0155258,%edx
c0106f2c:	29 d0                	sub    %edx,%eax
c0106f2e:	c1 f8 05             	sar    $0x5,%eax
}
c0106f31:	5d                   	pop    %ebp
c0106f32:	c3                   	ret    

c0106f33 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0106f33:	55                   	push   %ebp
c0106f34:	89 e5                	mov    %esp,%ebp
    return page2ppn(page) << PGSHIFT;
c0106f36:	ff 75 08             	pushl  0x8(%ebp)
c0106f39:	e8 e2 ff ff ff       	call   c0106f20 <page2ppn>
c0106f3e:	83 c4 04             	add    $0x4,%esp
c0106f41:	c1 e0 0c             	shl    $0xc,%eax
}
c0106f44:	c9                   	leave  
c0106f45:	c3                   	ret    

c0106f46 <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c0106f46:	55                   	push   %ebp
c0106f47:	89 e5                	mov    %esp,%ebp
c0106f49:	83 ec 08             	sub    $0x8,%esp
    if (PPN(pa) >= npage) {
c0106f4c:	8b 45 08             	mov    0x8(%ebp),%eax
c0106f4f:	c1 e8 0c             	shr    $0xc,%eax
c0106f52:	89 c2                	mov    %eax,%edx
c0106f54:	a1 80 1f 15 c0       	mov    0xc0151f80,%eax
c0106f59:	39 c2                	cmp    %eax,%edx
c0106f5b:	72 14                	jb     c0106f71 <pa2page+0x2b>
        panic("pa2page called with invalid pa");
c0106f5d:	83 ec 04             	sub    $0x4,%esp
c0106f60:	68 dc 5b 11 c0       	push   $0xc0115bdc
c0106f65:	6a 5e                	push   $0x5e
c0106f67:	68 fb 5b 11 c0       	push   $0xc0115bfb
c0106f6c:	e8 7c 95 ff ff       	call   c01004ed <__panic>
    }
    return &pages[PPN(pa)];
c0106f71:	a1 58 52 15 c0       	mov    0xc0155258,%eax
c0106f76:	8b 55 08             	mov    0x8(%ebp),%edx
c0106f79:	c1 ea 0c             	shr    $0xc,%edx
c0106f7c:	c1 e2 05             	shl    $0x5,%edx
c0106f7f:	01 d0                	add    %edx,%eax
}
c0106f81:	c9                   	leave  
c0106f82:	c3                   	ret    

c0106f83 <page2kva>:

static inline void *
page2kva(struct Page *page) {
c0106f83:	55                   	push   %ebp
c0106f84:	89 e5                	mov    %esp,%ebp
c0106f86:	83 ec 18             	sub    $0x18,%esp
    return KADDR(page2pa(page));
c0106f89:	ff 75 08             	pushl  0x8(%ebp)
c0106f8c:	e8 a2 ff ff ff       	call   c0106f33 <page2pa>
c0106f91:	83 c4 04             	add    $0x4,%esp
c0106f94:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0106f97:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106f9a:	c1 e8 0c             	shr    $0xc,%eax
c0106f9d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106fa0:	a1 80 1f 15 c0       	mov    0xc0151f80,%eax
c0106fa5:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0106fa8:	72 14                	jb     c0106fbe <page2kva+0x3b>
c0106faa:	ff 75 f4             	pushl  -0xc(%ebp)
c0106fad:	68 0c 5c 11 c0       	push   $0xc0115c0c
c0106fb2:	6a 65                	push   $0x65
c0106fb4:	68 fb 5b 11 c0       	push   $0xc0115bfb
c0106fb9:	e8 2f 95 ff ff       	call   c01004ed <__panic>
c0106fbe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106fc1:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c0106fc6:	c9                   	leave  
c0106fc7:	c3                   	ret    

c0106fc8 <pte2page>:
kva2page(void *kva) {
    return pa2page(PADDR(kva));
}

static inline struct Page *
pte2page(pte_t pte) {
c0106fc8:	55                   	push   %ebp
c0106fc9:	89 e5                	mov    %esp,%ebp
c0106fcb:	83 ec 08             	sub    $0x8,%esp
    if (!(pte & PTE_P)) {
c0106fce:	8b 45 08             	mov    0x8(%ebp),%eax
c0106fd1:	83 e0 01             	and    $0x1,%eax
c0106fd4:	85 c0                	test   %eax,%eax
c0106fd6:	75 14                	jne    c0106fec <pte2page+0x24>
        panic("pte2page called with invalid pte");
c0106fd8:	83 ec 04             	sub    $0x4,%esp
c0106fdb:	68 30 5c 11 c0       	push   $0xc0115c30
c0106fe0:	6a 70                	push   $0x70
c0106fe2:	68 fb 5b 11 c0       	push   $0xc0115bfb
c0106fe7:	e8 01 95 ff ff       	call   c01004ed <__panic>
    }
    return pa2page(PTE_ADDR(pte));
c0106fec:	8b 45 08             	mov    0x8(%ebp),%eax
c0106fef:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106ff4:	83 ec 0c             	sub    $0xc,%esp
c0106ff7:	50                   	push   %eax
c0106ff8:	e8 49 ff ff ff       	call   c0106f46 <pa2page>
c0106ffd:	83 c4 10             	add    $0x10,%esp
}
c0107000:	c9                   	leave  
c0107001:	c3                   	ret    

c0107002 <pde2page>:

static inline struct Page *
pde2page(pde_t pde) {
c0107002:	55                   	push   %ebp
c0107003:	89 e5                	mov    %esp,%ebp
c0107005:	83 ec 08             	sub    $0x8,%esp
    return pa2page(PDE_ADDR(pde));
c0107008:	8b 45 08             	mov    0x8(%ebp),%eax
c010700b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0107010:	83 ec 0c             	sub    $0xc,%esp
c0107013:	50                   	push   %eax
c0107014:	e8 2d ff ff ff       	call   c0106f46 <pa2page>
c0107019:	83 c4 10             	add    $0x10,%esp
}
c010701c:	c9                   	leave  
c010701d:	c3                   	ret    

c010701e <page_ref>:

static inline int
page_ref(struct Page *page) {
c010701e:	55                   	push   %ebp
c010701f:	89 e5                	mov    %esp,%ebp
    return page->ref;
c0107021:	8b 45 08             	mov    0x8(%ebp),%eax
c0107024:	8b 00                	mov    (%eax),%eax
}
c0107026:	5d                   	pop    %ebp
c0107027:	c3                   	ret    

c0107028 <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c0107028:	55                   	push   %ebp
c0107029:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c010702b:	8b 45 08             	mov    0x8(%ebp),%eax
c010702e:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107031:	89 10                	mov    %edx,(%eax)
}
c0107033:	90                   	nop
c0107034:	5d                   	pop    %ebp
c0107035:	c3                   	ret    

c0107036 <page_ref_inc>:

static inline int
page_ref_inc(struct Page *page) {
c0107036:	55                   	push   %ebp
c0107037:	89 e5                	mov    %esp,%ebp
    page->ref += 1;
c0107039:	8b 45 08             	mov    0x8(%ebp),%eax
c010703c:	8b 00                	mov    (%eax),%eax
c010703e:	8d 50 01             	lea    0x1(%eax),%edx
c0107041:	8b 45 08             	mov    0x8(%ebp),%eax
c0107044:	89 10                	mov    %edx,(%eax)
    return page->ref;
c0107046:	8b 45 08             	mov    0x8(%ebp),%eax
c0107049:	8b 00                	mov    (%eax),%eax
}
c010704b:	5d                   	pop    %ebp
c010704c:	c3                   	ret    

c010704d <page_ref_dec>:

static inline int
page_ref_dec(struct Page *page) {
c010704d:	55                   	push   %ebp
c010704e:	89 e5                	mov    %esp,%ebp
    page->ref -= 1;
c0107050:	8b 45 08             	mov    0x8(%ebp),%eax
c0107053:	8b 00                	mov    (%eax),%eax
c0107055:	8d 50 ff             	lea    -0x1(%eax),%edx
c0107058:	8b 45 08             	mov    0x8(%ebp),%eax
c010705b:	89 10                	mov    %edx,(%eax)
    return page->ref;
c010705d:	8b 45 08             	mov    0x8(%ebp),%eax
c0107060:	8b 00                	mov    (%eax),%eax
}
c0107062:	5d                   	pop    %ebp
c0107063:	c3                   	ret    

c0107064 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0107064:	55                   	push   %ebp
c0107065:	89 e5                	mov    %esp,%ebp
c0107067:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010706a:	9c                   	pushf  
c010706b:	58                   	pop    %eax
c010706c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010706f:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0107072:	25 00 02 00 00       	and    $0x200,%eax
c0107077:	85 c0                	test   %eax,%eax
c0107079:	74 0c                	je     c0107087 <__intr_save+0x23>
        intr_disable();
c010707b:	e8 36 b2 ff ff       	call   c01022b6 <intr_disable>
        return 1;
c0107080:	b8 01 00 00 00       	mov    $0x1,%eax
c0107085:	eb 05                	jmp    c010708c <__intr_save+0x28>
    }
    return 0;
c0107087:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010708c:	c9                   	leave  
c010708d:	c3                   	ret    

c010708e <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010708e:	55                   	push   %ebp
c010708f:	89 e5                	mov    %esp,%ebp
c0107091:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0107094:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0107098:	74 05                	je     c010709f <__intr_restore+0x11>
        intr_enable();
c010709a:	e8 10 b2 ff ff       	call   c01022af <intr_enable>
    }
}
c010709f:	90                   	nop
c01070a0:	c9                   	leave  
c01070a1:	c3                   	ret    

c01070a2 <lgdt>:
/* *
 * lgdt - load the global descriptor table register and reset the
 * data/code segement registers for kernel.
 * */
static inline void
lgdt(struct pseudodesc *pd) {
c01070a2:	55                   	push   %ebp
c01070a3:	89 e5                	mov    %esp,%ebp
    asm volatile ("lgdt (%0)" :: "r" (pd));
c01070a5:	8b 45 08             	mov    0x8(%ebp),%eax
c01070a8:	0f 01 10             	lgdtl  (%eax)
    asm volatile ("movw %%ax, %%gs" :: "a" (USER_DS));
c01070ab:	b8 23 00 00 00       	mov    $0x23,%eax
c01070b0:	8e e8                	mov    %eax,%gs
    asm volatile ("movw %%ax, %%fs" :: "a" (USER_DS));
c01070b2:	b8 23 00 00 00       	mov    $0x23,%eax
c01070b7:	8e e0                	mov    %eax,%fs
    asm volatile ("movw %%ax, %%es" :: "a" (KERNEL_DS));
c01070b9:	b8 10 00 00 00       	mov    $0x10,%eax
c01070be:	8e c0                	mov    %eax,%es
    asm volatile ("movw %%ax, %%ds" :: "a" (KERNEL_DS));
c01070c0:	b8 10 00 00 00       	mov    $0x10,%eax
c01070c5:	8e d8                	mov    %eax,%ds
    asm volatile ("movw %%ax, %%ss" :: "a" (KERNEL_DS));
c01070c7:	b8 10 00 00 00       	mov    $0x10,%eax
c01070cc:	8e d0                	mov    %eax,%ss
    // reload cs
    asm volatile ("ljmp %0, $1f\n 1:\n" :: "i" (KERNEL_CS));
c01070ce:	ea d5 70 10 c0 08 00 	ljmp   $0x8,$0xc01070d5
}
c01070d5:	90                   	nop
c01070d6:	5d                   	pop    %ebp
c01070d7:	c3                   	ret    

c01070d8 <load_esp0>:
 * load_esp0 - change the ESP0 in default task state segment,
 * so that we can use different kernel stack when we trap frame
 * user to kernel.
 * */
void
load_esp0(uintptr_t esp0) {
c01070d8:	55                   	push   %ebp
c01070d9:	89 e5                	mov    %esp,%ebp
    ts.ts_esp0 = esp0;
c01070db:	8b 45 08             	mov    0x8(%ebp),%eax
c01070de:	a3 a4 1f 15 c0       	mov    %eax,0xc0151fa4
}
c01070e3:	90                   	nop
c01070e4:	5d                   	pop    %ebp
c01070e5:	c3                   	ret    

c01070e6 <gdt_init>:

/* gdt_init - initialize the default GDT and TSS */
static void
gdt_init(void) {
c01070e6:	55                   	push   %ebp
c01070e7:	89 e5                	mov    %esp,%ebp
c01070e9:	83 ec 10             	sub    $0x10,%esp
    // set boot kernel stack and default SS0
    load_esp0((uintptr_t)bootstacktop);
c01070ec:	b8 00 e0 14 c0       	mov    $0xc014e000,%eax
c01070f1:	50                   	push   %eax
c01070f2:	e8 e1 ff ff ff       	call   c01070d8 <load_esp0>
c01070f7:	83 c4 04             	add    $0x4,%esp
    ts.ts_ss0 = KERNEL_DS;
c01070fa:	66 c7 05 a8 1f 15 c0 	movw   $0x10,0xc0151fa8
c0107101:	10 00 

    // initialize the TSS filed of the gdt
    gdt[SEG_TSS] = SEGTSS(STS_T32A, (uintptr_t)&ts, sizeof(ts), DPL_KERNEL);
c0107103:	66 c7 05 68 ea 14 c0 	movw   $0x68,0xc014ea68
c010710a:	68 00 
c010710c:	b8 a0 1f 15 c0       	mov    $0xc0151fa0,%eax
c0107111:	66 a3 6a ea 14 c0    	mov    %ax,0xc014ea6a
c0107117:	b8 a0 1f 15 c0       	mov    $0xc0151fa0,%eax
c010711c:	c1 e8 10             	shr    $0x10,%eax
c010711f:	a2 6c ea 14 c0       	mov    %al,0xc014ea6c
c0107124:	0f b6 05 6d ea 14 c0 	movzbl 0xc014ea6d,%eax
c010712b:	83 e0 f0             	and    $0xfffffff0,%eax
c010712e:	83 c8 09             	or     $0x9,%eax
c0107131:	a2 6d ea 14 c0       	mov    %al,0xc014ea6d
c0107136:	0f b6 05 6d ea 14 c0 	movzbl 0xc014ea6d,%eax
c010713d:	83 e0 ef             	and    $0xffffffef,%eax
c0107140:	a2 6d ea 14 c0       	mov    %al,0xc014ea6d
c0107145:	0f b6 05 6d ea 14 c0 	movzbl 0xc014ea6d,%eax
c010714c:	83 e0 9f             	and    $0xffffff9f,%eax
c010714f:	a2 6d ea 14 c0       	mov    %al,0xc014ea6d
c0107154:	0f b6 05 6d ea 14 c0 	movzbl 0xc014ea6d,%eax
c010715b:	83 c8 80             	or     $0xffffff80,%eax
c010715e:	a2 6d ea 14 c0       	mov    %al,0xc014ea6d
c0107163:	0f b6 05 6e ea 14 c0 	movzbl 0xc014ea6e,%eax
c010716a:	83 e0 f0             	and    $0xfffffff0,%eax
c010716d:	a2 6e ea 14 c0       	mov    %al,0xc014ea6e
c0107172:	0f b6 05 6e ea 14 c0 	movzbl 0xc014ea6e,%eax
c0107179:	83 e0 ef             	and    $0xffffffef,%eax
c010717c:	a2 6e ea 14 c0       	mov    %al,0xc014ea6e
c0107181:	0f b6 05 6e ea 14 c0 	movzbl 0xc014ea6e,%eax
c0107188:	83 e0 df             	and    $0xffffffdf,%eax
c010718b:	a2 6e ea 14 c0       	mov    %al,0xc014ea6e
c0107190:	0f b6 05 6e ea 14 c0 	movzbl 0xc014ea6e,%eax
c0107197:	83 c8 40             	or     $0x40,%eax
c010719a:	a2 6e ea 14 c0       	mov    %al,0xc014ea6e
c010719f:	0f b6 05 6e ea 14 c0 	movzbl 0xc014ea6e,%eax
c01071a6:	83 e0 7f             	and    $0x7f,%eax
c01071a9:	a2 6e ea 14 c0       	mov    %al,0xc014ea6e
c01071ae:	b8 a0 1f 15 c0       	mov    $0xc0151fa0,%eax
c01071b3:	c1 e8 18             	shr    $0x18,%eax
c01071b6:	a2 6f ea 14 c0       	mov    %al,0xc014ea6f

    // reload all segment registers
    lgdt(&gdt_pd);
c01071bb:	68 70 ea 14 c0       	push   $0xc014ea70
c01071c0:	e8 dd fe ff ff       	call   c01070a2 <lgdt>
c01071c5:	83 c4 04             	add    $0x4,%esp
c01071c8:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
    asm volatile ("cli" ::: "memory");
}

static inline void
ltr(uint16_t sel) {
    asm volatile ("ltr %0" :: "r" (sel) : "memory");
c01071ce:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c01071d2:	0f 00 d8             	ltr    %ax

    // load the TSS
    ltr(GD_TSS);
}
c01071d5:	90                   	nop
c01071d6:	c9                   	leave  
c01071d7:	c3                   	ret    

c01071d8 <init_pmm_manager>:

//init_pmm_manager - initialize a pmm_manager instance
static void
init_pmm_manager(void) {
c01071d8:	55                   	push   %ebp
c01071d9:	89 e5                	mov    %esp,%ebp
c01071db:	83 ec 08             	sub    $0x8,%esp
    pmm_manager = &default_pmm_manager;
c01071de:	c7 05 50 52 15 c0 c0 	movl   $0xc0115bc0,0xc0155250
c01071e5:	5b 11 c0 
    cprintf("memory management: %s\n", pmm_manager->name);
c01071e8:	a1 50 52 15 c0       	mov    0xc0155250,%eax
c01071ed:	8b 00                	mov    (%eax),%eax
c01071ef:	83 ec 08             	sub    $0x8,%esp
c01071f2:	50                   	push   %eax
c01071f3:	68 5c 5c 11 c0       	push   $0xc0115c5c
c01071f8:	e8 8a 91 ff ff       	call   c0100387 <cprintf>
c01071fd:	83 c4 10             	add    $0x10,%esp
    pmm_manager->init();
c0107200:	a1 50 52 15 c0       	mov    0xc0155250,%eax
c0107205:	8b 40 04             	mov    0x4(%eax),%eax
c0107208:	ff d0                	call   *%eax
}
c010720a:	90                   	nop
c010720b:	c9                   	leave  
c010720c:	c3                   	ret    

c010720d <init_memmap>:

//init_memmap - call pmm->init_memmap to build Page struct for free memory  
static void
init_memmap(struct Page *base, size_t n) {
c010720d:	55                   	push   %ebp
c010720e:	89 e5                	mov    %esp,%ebp
c0107210:	83 ec 08             	sub    $0x8,%esp
    pmm_manager->init_memmap(base, n);
c0107213:	a1 50 52 15 c0       	mov    0xc0155250,%eax
c0107218:	8b 40 08             	mov    0x8(%eax),%eax
c010721b:	83 ec 08             	sub    $0x8,%esp
c010721e:	ff 75 0c             	pushl  0xc(%ebp)
c0107221:	ff 75 08             	pushl  0x8(%ebp)
c0107224:	ff d0                	call   *%eax
c0107226:	83 c4 10             	add    $0x10,%esp
}
c0107229:	90                   	nop
c010722a:	c9                   	leave  
c010722b:	c3                   	ret    

c010722c <alloc_pages>:

//alloc_pages - call pmm->alloc_pages to allocate a continuous n*PAGESIZE memory 
struct Page *
alloc_pages(size_t n) {
c010722c:	55                   	push   %ebp
c010722d:	89 e5                	mov    %esp,%ebp
c010722f:	83 ec 18             	sub    $0x18,%esp
    struct Page *page=NULL;
c0107232:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    
    while (1)
    {
         local_intr_save(intr_flag);
c0107239:	e8 26 fe ff ff       	call   c0107064 <__intr_save>
c010723e:	89 45 f0             	mov    %eax,-0x10(%ebp)
         {
              page = pmm_manager->alloc_pages(n);
c0107241:	a1 50 52 15 c0       	mov    0xc0155250,%eax
c0107246:	8b 40 0c             	mov    0xc(%eax),%eax
c0107249:	83 ec 0c             	sub    $0xc,%esp
c010724c:	ff 75 08             	pushl  0x8(%ebp)
c010724f:	ff d0                	call   *%eax
c0107251:	83 c4 10             	add    $0x10,%esp
c0107254:	89 45 f4             	mov    %eax,-0xc(%ebp)
         }
         local_intr_restore(intr_flag);
c0107257:	83 ec 0c             	sub    $0xc,%esp
c010725a:	ff 75 f0             	pushl  -0x10(%ebp)
c010725d:	e8 2c fe ff ff       	call   c010708e <__intr_restore>
c0107262:	83 c4 10             	add    $0x10,%esp

         if (page != NULL || n > 1 || swap_init_ok == 0) break;
c0107265:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107269:	75 28                	jne    c0107293 <alloc_pages+0x67>
c010726b:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c010726f:	77 22                	ja     c0107293 <alloc_pages+0x67>
c0107271:	a1 6c 1f 15 c0       	mov    0xc0151f6c,%eax
c0107276:	85 c0                	test   %eax,%eax
c0107278:	74 19                	je     c0107293 <alloc_pages+0x67>
         
         extern struct mm_struct *check_mm_struct;
         //cprintf("page %x, call swap_out in alloc_pages %d\n",page, n);
         swap_out(check_mm_struct, n, 0);
c010727a:	8b 55 08             	mov    0x8(%ebp),%edx
c010727d:	a1 70 51 15 c0       	mov    0xc0155170,%eax
c0107282:	83 ec 04             	sub    $0x4,%esp
c0107285:	6a 00                	push   $0x0
c0107287:	52                   	push   %edx
c0107288:	50                   	push   %eax
c0107289:	e8 65 e3 ff ff       	call   c01055f3 <swap_out>
c010728e:	83 c4 10             	add    $0x10,%esp
    }
c0107291:	eb a6                	jmp    c0107239 <alloc_pages+0xd>
    //cprintf("n %d,get page %x, No %d in alloc_pages\n",n,page,(page-pages));
    return page;
c0107293:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0107296:	c9                   	leave  
c0107297:	c3                   	ret    

c0107298 <free_pages>:

//free_pages - call pmm->free_pages to free a continuous n*PAGESIZE memory 
void
free_pages(struct Page *base, size_t n) {
c0107298:	55                   	push   %ebp
c0107299:	89 e5                	mov    %esp,%ebp
c010729b:	83 ec 18             	sub    $0x18,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010729e:	e8 c1 fd ff ff       	call   c0107064 <__intr_save>
c01072a3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        pmm_manager->free_pages(base, n);
c01072a6:	a1 50 52 15 c0       	mov    0xc0155250,%eax
c01072ab:	8b 40 10             	mov    0x10(%eax),%eax
c01072ae:	83 ec 08             	sub    $0x8,%esp
c01072b1:	ff 75 0c             	pushl  0xc(%ebp)
c01072b4:	ff 75 08             	pushl  0x8(%ebp)
c01072b7:	ff d0                	call   *%eax
c01072b9:	83 c4 10             	add    $0x10,%esp
    }
    local_intr_restore(intr_flag);
c01072bc:	83 ec 0c             	sub    $0xc,%esp
c01072bf:	ff 75 f4             	pushl  -0xc(%ebp)
c01072c2:	e8 c7 fd ff ff       	call   c010708e <__intr_restore>
c01072c7:	83 c4 10             	add    $0x10,%esp
}
c01072ca:	90                   	nop
c01072cb:	c9                   	leave  
c01072cc:	c3                   	ret    

c01072cd <nr_free_pages>:

//nr_free_pages - call pmm->nr_free_pages to get the size (nr*PAGESIZE) 
//of current free memory
size_t
nr_free_pages(void) {
c01072cd:	55                   	push   %ebp
c01072ce:	89 e5                	mov    %esp,%ebp
c01072d0:	83 ec 18             	sub    $0x18,%esp
    size_t ret;
    bool intr_flag;
    local_intr_save(intr_flag);
c01072d3:	e8 8c fd ff ff       	call   c0107064 <__intr_save>
c01072d8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        ret = pmm_manager->nr_free_pages();
c01072db:	a1 50 52 15 c0       	mov    0xc0155250,%eax
c01072e0:	8b 40 14             	mov    0x14(%eax),%eax
c01072e3:	ff d0                	call   *%eax
c01072e5:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    local_intr_restore(intr_flag);
c01072e8:	83 ec 0c             	sub    $0xc,%esp
c01072eb:	ff 75 f4             	pushl  -0xc(%ebp)
c01072ee:	e8 9b fd ff ff       	call   c010708e <__intr_restore>
c01072f3:	83 c4 10             	add    $0x10,%esp
    return ret;
c01072f6:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c01072f9:	c9                   	leave  
c01072fa:	c3                   	ret    

c01072fb <page_init>:

/* pmm_init - initialize the physical memory management */
static void
page_init(void) {
c01072fb:	55                   	push   %ebp
c01072fc:	89 e5                	mov    %esp,%ebp
c01072fe:	57                   	push   %edi
c01072ff:	56                   	push   %esi
c0107300:	53                   	push   %ebx
c0107301:	83 ec 7c             	sub    $0x7c,%esp
    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
c0107304:	c7 45 c4 00 80 00 c0 	movl   $0xc0008000,-0x3c(%ebp)
    uint64_t maxpa = 0;
c010730b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
c0107312:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

    cprintf("e820map:\n");
c0107319:	83 ec 0c             	sub    $0xc,%esp
c010731c:	68 73 5c 11 c0       	push   $0xc0115c73
c0107321:	e8 61 90 ff ff       	call   c0100387 <cprintf>
c0107326:	83 c4 10             	add    $0x10,%esp
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
c0107329:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0107330:	e9 fc 00 00 00       	jmp    c0107431 <page_init+0x136>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c0107335:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0107338:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010733b:	89 d0                	mov    %edx,%eax
c010733d:	c1 e0 02             	shl    $0x2,%eax
c0107340:	01 d0                	add    %edx,%eax
c0107342:	c1 e0 02             	shl    $0x2,%eax
c0107345:	01 c8                	add    %ecx,%eax
c0107347:	8b 50 08             	mov    0x8(%eax),%edx
c010734a:	8b 40 04             	mov    0x4(%eax),%eax
c010734d:	89 45 b8             	mov    %eax,-0x48(%ebp)
c0107350:	89 55 bc             	mov    %edx,-0x44(%ebp)
c0107353:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0107356:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0107359:	89 d0                	mov    %edx,%eax
c010735b:	c1 e0 02             	shl    $0x2,%eax
c010735e:	01 d0                	add    %edx,%eax
c0107360:	c1 e0 02             	shl    $0x2,%eax
c0107363:	01 c8                	add    %ecx,%eax
c0107365:	8b 48 0c             	mov    0xc(%eax),%ecx
c0107368:	8b 58 10             	mov    0x10(%eax),%ebx
c010736b:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010736e:	8b 55 bc             	mov    -0x44(%ebp),%edx
c0107371:	01 c8                	add    %ecx,%eax
c0107373:	11 da                	adc    %ebx,%edx
c0107375:	89 45 b0             	mov    %eax,-0x50(%ebp)
c0107378:	89 55 b4             	mov    %edx,-0x4c(%ebp)
        cprintf("  memory: %08llx, [%08llx, %08llx], type = %d.\n",
c010737b:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c010737e:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0107381:	89 d0                	mov    %edx,%eax
c0107383:	c1 e0 02             	shl    $0x2,%eax
c0107386:	01 d0                	add    %edx,%eax
c0107388:	c1 e0 02             	shl    $0x2,%eax
c010738b:	01 c8                	add    %ecx,%eax
c010738d:	83 c0 14             	add    $0x14,%eax
c0107390:	8b 00                	mov    (%eax),%eax
c0107392:	89 45 84             	mov    %eax,-0x7c(%ebp)
c0107395:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0107398:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c010739b:	83 c0 ff             	add    $0xffffffff,%eax
c010739e:	83 d2 ff             	adc    $0xffffffff,%edx
c01073a1:	89 c1                	mov    %eax,%ecx
c01073a3:	89 d3                	mov    %edx,%ebx
c01073a5:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c01073a8:	89 55 80             	mov    %edx,-0x80(%ebp)
c01073ab:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01073ae:	89 d0                	mov    %edx,%eax
c01073b0:	c1 e0 02             	shl    $0x2,%eax
c01073b3:	01 d0                	add    %edx,%eax
c01073b5:	c1 e0 02             	shl    $0x2,%eax
c01073b8:	03 45 80             	add    -0x80(%ebp),%eax
c01073bb:	8b 50 10             	mov    0x10(%eax),%edx
c01073be:	8b 40 0c             	mov    0xc(%eax),%eax
c01073c1:	ff 75 84             	pushl  -0x7c(%ebp)
c01073c4:	53                   	push   %ebx
c01073c5:	51                   	push   %ecx
c01073c6:	ff 75 bc             	pushl  -0x44(%ebp)
c01073c9:	ff 75 b8             	pushl  -0x48(%ebp)
c01073cc:	52                   	push   %edx
c01073cd:	50                   	push   %eax
c01073ce:	68 80 5c 11 c0       	push   $0xc0115c80
c01073d3:	e8 af 8f ff ff       	call   c0100387 <cprintf>
c01073d8:	83 c4 20             	add    $0x20,%esp
                memmap->map[i].size, begin, end - 1, memmap->map[i].type);
        if (memmap->map[i].type == E820_ARM) {
c01073db:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01073de:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01073e1:	89 d0                	mov    %edx,%eax
c01073e3:	c1 e0 02             	shl    $0x2,%eax
c01073e6:	01 d0                	add    %edx,%eax
c01073e8:	c1 e0 02             	shl    $0x2,%eax
c01073eb:	01 c8                	add    %ecx,%eax
c01073ed:	83 c0 14             	add    $0x14,%eax
c01073f0:	8b 00                	mov    (%eax),%eax
c01073f2:	83 f8 01             	cmp    $0x1,%eax
c01073f5:	75 36                	jne    c010742d <page_init+0x132>
            if (maxpa < end && begin < KMEMSIZE) {
c01073f7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01073fa:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01073fd:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c0107400:	77 2b                	ja     c010742d <page_init+0x132>
c0107402:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c0107405:	72 05                	jb     c010740c <page_init+0x111>
c0107407:	3b 45 b0             	cmp    -0x50(%ebp),%eax
c010740a:	73 21                	jae    c010742d <page_init+0x132>
c010740c:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0107410:	77 1b                	ja     c010742d <page_init+0x132>
c0107412:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0107416:	72 09                	jb     c0107421 <page_init+0x126>
c0107418:	81 7d b8 ff ff ff 37 	cmpl   $0x37ffffff,-0x48(%ebp)
c010741f:	77 0c                	ja     c010742d <page_init+0x132>
                maxpa = end;
c0107421:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0107424:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0107427:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010742a:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
    uint64_t maxpa = 0;

    cprintf("e820map:\n");
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
c010742d:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c0107431:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0107434:	8b 00                	mov    (%eax),%eax
c0107436:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c0107439:	0f 8f f6 fe ff ff    	jg     c0107335 <page_init+0x3a>
            if (maxpa < end && begin < KMEMSIZE) {
                maxpa = end;
            }
        }
    }
    if (maxpa > KMEMSIZE) {
c010743f:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0107443:	72 1d                	jb     c0107462 <page_init+0x167>
c0107445:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0107449:	77 09                	ja     c0107454 <page_init+0x159>
c010744b:	81 7d e0 00 00 00 38 	cmpl   $0x38000000,-0x20(%ebp)
c0107452:	76 0e                	jbe    c0107462 <page_init+0x167>
        maxpa = KMEMSIZE;
c0107454:	c7 45 e0 00 00 00 38 	movl   $0x38000000,-0x20(%ebp)
c010745b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    }

    extern char end[];

    npage = maxpa / PGSIZE;
c0107462:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107465:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0107468:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c010746c:	c1 ea 0c             	shr    $0xc,%edx
c010746f:	a3 80 1f 15 c0       	mov    %eax,0xc0151f80
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);
c0107474:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
c010747b:	b8 44 53 15 c0       	mov    $0xc0155344,%eax
c0107480:	8d 50 ff             	lea    -0x1(%eax),%edx
c0107483:	8b 45 ac             	mov    -0x54(%ebp),%eax
c0107486:	01 d0                	add    %edx,%eax
c0107488:	89 45 a8             	mov    %eax,-0x58(%ebp)
c010748b:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010748e:	ba 00 00 00 00       	mov    $0x0,%edx
c0107493:	f7 75 ac             	divl   -0x54(%ebp)
c0107496:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0107499:	29 d0                	sub    %edx,%eax
c010749b:	a3 58 52 15 c0       	mov    %eax,0xc0155258

    for (i = 0; i < npage; i ++) {
c01074a0:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c01074a7:	eb 27                	jmp    c01074d0 <page_init+0x1d5>
        SetPageReserved(pages + i);
c01074a9:	a1 58 52 15 c0       	mov    0xc0155258,%eax
c01074ae:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01074b1:	c1 e2 05             	shl    $0x5,%edx
c01074b4:	01 d0                	add    %edx,%eax
c01074b6:	83 c0 04             	add    $0x4,%eax
c01074b9:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
c01074c0:	89 45 8c             	mov    %eax,-0x74(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c01074c3:	8b 45 8c             	mov    -0x74(%ebp),%eax
c01074c6:	8b 55 90             	mov    -0x70(%ebp),%edx
c01074c9:	0f ab 10             	bts    %edx,(%eax)
    extern char end[];

    npage = maxpa / PGSIZE;
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);

    for (i = 0; i < npage; i ++) {
c01074cc:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c01074d0:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01074d3:	a1 80 1f 15 c0       	mov    0xc0151f80,%eax
c01074d8:	39 c2                	cmp    %eax,%edx
c01074da:	72 cd                	jb     c01074a9 <page_init+0x1ae>
        SetPageReserved(pages + i);
    }

    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);
c01074dc:	a1 80 1f 15 c0       	mov    0xc0151f80,%eax
c01074e1:	c1 e0 05             	shl    $0x5,%eax
c01074e4:	89 c2                	mov    %eax,%edx
c01074e6:	a1 58 52 15 c0       	mov    0xc0155258,%eax
c01074eb:	01 d0                	add    %edx,%eax
c01074ed:	89 45 a4             	mov    %eax,-0x5c(%ebp)
c01074f0:	81 7d a4 ff ff ff bf 	cmpl   $0xbfffffff,-0x5c(%ebp)
c01074f7:	77 17                	ja     c0107510 <page_init+0x215>
c01074f9:	ff 75 a4             	pushl  -0x5c(%ebp)
c01074fc:	68 b0 5c 11 c0       	push   $0xc0115cb0
c0107501:	68 ea 00 00 00       	push   $0xea
c0107506:	68 d4 5c 11 c0       	push   $0xc0115cd4
c010750b:	e8 dd 8f ff ff       	call   c01004ed <__panic>
c0107510:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0107513:	05 00 00 00 40       	add    $0x40000000,%eax
c0107518:	89 45 a0             	mov    %eax,-0x60(%ebp)

    for (i = 0; i < memmap->nr_map; i ++) {
c010751b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0107522:	e9 69 01 00 00       	jmp    c0107690 <page_init+0x395>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c0107527:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c010752a:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010752d:	89 d0                	mov    %edx,%eax
c010752f:	c1 e0 02             	shl    $0x2,%eax
c0107532:	01 d0                	add    %edx,%eax
c0107534:	c1 e0 02             	shl    $0x2,%eax
c0107537:	01 c8                	add    %ecx,%eax
c0107539:	8b 50 08             	mov    0x8(%eax),%edx
c010753c:	8b 40 04             	mov    0x4(%eax),%eax
c010753f:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0107542:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0107545:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0107548:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010754b:	89 d0                	mov    %edx,%eax
c010754d:	c1 e0 02             	shl    $0x2,%eax
c0107550:	01 d0                	add    %edx,%eax
c0107552:	c1 e0 02             	shl    $0x2,%eax
c0107555:	01 c8                	add    %ecx,%eax
c0107557:	8b 48 0c             	mov    0xc(%eax),%ecx
c010755a:	8b 58 10             	mov    0x10(%eax),%ebx
c010755d:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0107560:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0107563:	01 c8                	add    %ecx,%eax
c0107565:	11 da                	adc    %ebx,%edx
c0107567:	89 45 c8             	mov    %eax,-0x38(%ebp)
c010756a:	89 55 cc             	mov    %edx,-0x34(%ebp)
        if (memmap->map[i].type == E820_ARM) {
c010756d:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0107570:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0107573:	89 d0                	mov    %edx,%eax
c0107575:	c1 e0 02             	shl    $0x2,%eax
c0107578:	01 d0                	add    %edx,%eax
c010757a:	c1 e0 02             	shl    $0x2,%eax
c010757d:	01 c8                	add    %ecx,%eax
c010757f:	83 c0 14             	add    $0x14,%eax
c0107582:	8b 00                	mov    (%eax),%eax
c0107584:	83 f8 01             	cmp    $0x1,%eax
c0107587:	0f 85 ff 00 00 00    	jne    c010768c <page_init+0x391>
            if (begin < freemem) {
c010758d:	8b 45 a0             	mov    -0x60(%ebp),%eax
c0107590:	ba 00 00 00 00       	mov    $0x0,%edx
c0107595:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c0107598:	72 17                	jb     c01075b1 <page_init+0x2b6>
c010759a:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c010759d:	77 05                	ja     c01075a4 <page_init+0x2a9>
c010759f:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c01075a2:	76 0d                	jbe    c01075b1 <page_init+0x2b6>
                begin = freemem;
c01075a4:	8b 45 a0             	mov    -0x60(%ebp),%eax
c01075a7:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01075aa:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
            }
            if (end > KMEMSIZE) {
c01075b1:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c01075b5:	72 1d                	jb     c01075d4 <page_init+0x2d9>
c01075b7:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c01075bb:	77 09                	ja     c01075c6 <page_init+0x2cb>
c01075bd:	81 7d c8 00 00 00 38 	cmpl   $0x38000000,-0x38(%ebp)
c01075c4:	76 0e                	jbe    c01075d4 <page_init+0x2d9>
                end = KMEMSIZE;
c01075c6:	c7 45 c8 00 00 00 38 	movl   $0x38000000,-0x38(%ebp)
c01075cd:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
            }
            if (begin < end) {
c01075d4:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01075d7:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01075da:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c01075dd:	0f 87 a9 00 00 00    	ja     c010768c <page_init+0x391>
c01075e3:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c01075e6:	72 09                	jb     c01075f1 <page_init+0x2f6>
c01075e8:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c01075eb:	0f 83 9b 00 00 00    	jae    c010768c <page_init+0x391>
                begin = ROUNDUP(begin, PGSIZE);
c01075f1:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
c01075f8:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01075fb:	8b 45 9c             	mov    -0x64(%ebp),%eax
c01075fe:	01 d0                	add    %edx,%eax
c0107600:	83 e8 01             	sub    $0x1,%eax
c0107603:	89 45 98             	mov    %eax,-0x68(%ebp)
c0107606:	8b 45 98             	mov    -0x68(%ebp),%eax
c0107609:	ba 00 00 00 00       	mov    $0x0,%edx
c010760e:	f7 75 9c             	divl   -0x64(%ebp)
c0107611:	8b 45 98             	mov    -0x68(%ebp),%eax
c0107614:	29 d0                	sub    %edx,%eax
c0107616:	ba 00 00 00 00       	mov    $0x0,%edx
c010761b:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010761e:	89 55 d4             	mov    %edx,-0x2c(%ebp)
                end = ROUNDDOWN(end, PGSIZE);
c0107621:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0107624:	89 45 94             	mov    %eax,-0x6c(%ebp)
c0107627:	8b 45 94             	mov    -0x6c(%ebp),%eax
c010762a:	ba 00 00 00 00       	mov    $0x0,%edx
c010762f:	89 c3                	mov    %eax,%ebx
c0107631:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
c0107637:	89 de                	mov    %ebx,%esi
c0107639:	89 d0                	mov    %edx,%eax
c010763b:	83 e0 00             	and    $0x0,%eax
c010763e:	89 c7                	mov    %eax,%edi
c0107640:	89 75 c8             	mov    %esi,-0x38(%ebp)
c0107643:	89 7d cc             	mov    %edi,-0x34(%ebp)
                if (begin < end) {
c0107646:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0107649:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010764c:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c010764f:	77 3b                	ja     c010768c <page_init+0x391>
c0107651:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c0107654:	72 05                	jb     c010765b <page_init+0x360>
c0107656:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c0107659:	73 31                	jae    c010768c <page_init+0x391>
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
c010765b:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010765e:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0107661:	2b 45 d0             	sub    -0x30(%ebp),%eax
c0107664:	1b 55 d4             	sbb    -0x2c(%ebp),%edx
c0107667:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c010766b:	c1 ea 0c             	shr    $0xc,%edx
c010766e:	89 c3                	mov    %eax,%ebx
c0107670:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0107673:	83 ec 0c             	sub    $0xc,%esp
c0107676:	50                   	push   %eax
c0107677:	e8 ca f8 ff ff       	call   c0106f46 <pa2page>
c010767c:	83 c4 10             	add    $0x10,%esp
c010767f:	83 ec 08             	sub    $0x8,%esp
c0107682:	53                   	push   %ebx
c0107683:	50                   	push   %eax
c0107684:	e8 84 fb ff ff       	call   c010720d <init_memmap>
c0107689:	83 c4 10             	add    $0x10,%esp
        SetPageReserved(pages + i);
    }

    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);

    for (i = 0; i < memmap->nr_map; i ++) {
c010768c:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c0107690:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0107693:	8b 00                	mov    (%eax),%eax
c0107695:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c0107698:	0f 8f 89 fe ff ff    	jg     c0107527 <page_init+0x22c>
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
                }
            }
        }
    }
}
c010769e:	90                   	nop
c010769f:	8d 65 f4             	lea    -0xc(%ebp),%esp
c01076a2:	5b                   	pop    %ebx
c01076a3:	5e                   	pop    %esi
c01076a4:	5f                   	pop    %edi
c01076a5:	5d                   	pop    %ebp
c01076a6:	c3                   	ret    

c01076a7 <boot_map_segment>:
//  la:   linear address of this memory need to map (after x86 segment map)
//  size: memory size
//  pa:   physical address of this memory
//  perm: permission of this memory  
static void
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
c01076a7:	55                   	push   %ebp
c01076a8:	89 e5                	mov    %esp,%ebp
c01076aa:	83 ec 28             	sub    $0x28,%esp
    assert(PGOFF(la) == PGOFF(pa));
c01076ad:	8b 45 0c             	mov    0xc(%ebp),%eax
c01076b0:	33 45 14             	xor    0x14(%ebp),%eax
c01076b3:	25 ff 0f 00 00       	and    $0xfff,%eax
c01076b8:	85 c0                	test   %eax,%eax
c01076ba:	74 19                	je     c01076d5 <boot_map_segment+0x2e>
c01076bc:	68 e2 5c 11 c0       	push   $0xc0115ce2
c01076c1:	68 f9 5c 11 c0       	push   $0xc0115cf9
c01076c6:	68 08 01 00 00       	push   $0x108
c01076cb:	68 d4 5c 11 c0       	push   $0xc0115cd4
c01076d0:	e8 18 8e ff ff       	call   c01004ed <__panic>
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
c01076d5:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
c01076dc:	8b 45 0c             	mov    0xc(%ebp),%eax
c01076df:	25 ff 0f 00 00       	and    $0xfff,%eax
c01076e4:	89 c2                	mov    %eax,%edx
c01076e6:	8b 45 10             	mov    0x10(%ebp),%eax
c01076e9:	01 c2                	add    %eax,%edx
c01076eb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01076ee:	01 d0                	add    %edx,%eax
c01076f0:	83 e8 01             	sub    $0x1,%eax
c01076f3:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01076f6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01076f9:	ba 00 00 00 00       	mov    $0x0,%edx
c01076fe:	f7 75 f0             	divl   -0x10(%ebp)
c0107701:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107704:	29 d0                	sub    %edx,%eax
c0107706:	c1 e8 0c             	shr    $0xc,%eax
c0107709:	89 45 f4             	mov    %eax,-0xc(%ebp)
    la = ROUNDDOWN(la, PGSIZE);
c010770c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010770f:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0107712:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107715:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010771a:	89 45 0c             	mov    %eax,0xc(%ebp)
    pa = ROUNDDOWN(pa, PGSIZE);
c010771d:	8b 45 14             	mov    0x14(%ebp),%eax
c0107720:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0107723:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107726:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010772b:	89 45 14             	mov    %eax,0x14(%ebp)
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c010772e:	eb 57                	jmp    c0107787 <boot_map_segment+0xe0>
        pte_t *ptep = get_pte(pgdir, la, 1);
c0107730:	83 ec 04             	sub    $0x4,%esp
c0107733:	6a 01                	push   $0x1
c0107735:	ff 75 0c             	pushl  0xc(%ebp)
c0107738:	ff 75 08             	pushl  0x8(%ebp)
c010773b:	e8 58 01 00 00       	call   c0107898 <get_pte>
c0107740:	83 c4 10             	add    $0x10,%esp
c0107743:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(ptep != NULL);
c0107746:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c010774a:	75 19                	jne    c0107765 <boot_map_segment+0xbe>
c010774c:	68 0e 5d 11 c0       	push   $0xc0115d0e
c0107751:	68 f9 5c 11 c0       	push   $0xc0115cf9
c0107756:	68 0e 01 00 00       	push   $0x10e
c010775b:	68 d4 5c 11 c0       	push   $0xc0115cd4
c0107760:	e8 88 8d ff ff       	call   c01004ed <__panic>
        *ptep = pa | PTE_P | perm;
c0107765:	8b 45 14             	mov    0x14(%ebp),%eax
c0107768:	0b 45 18             	or     0x18(%ebp),%eax
c010776b:	83 c8 01             	or     $0x1,%eax
c010776e:	89 c2                	mov    %eax,%edx
c0107770:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107773:	89 10                	mov    %edx,(%eax)
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
    assert(PGOFF(la) == PGOFF(pa));
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
    la = ROUNDDOWN(la, PGSIZE);
    pa = ROUNDDOWN(pa, PGSIZE);
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c0107775:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0107779:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
c0107780:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
c0107787:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010778b:	75 a3                	jne    c0107730 <boot_map_segment+0x89>
        pte_t *ptep = get_pte(pgdir, la, 1);
        assert(ptep != NULL);
        *ptep = pa | PTE_P | perm;
    }
}
c010778d:	90                   	nop
c010778e:	c9                   	leave  
c010778f:	c3                   	ret    

c0107790 <boot_alloc_page>:

//boot_alloc_page - allocate one page using pmm->alloc_pages(1) 
// return value: the kernel virtual address of this allocated page
//note: this function is used to get the memory for PDT(Page Directory Table)&PT(Page Table)
static void *
boot_alloc_page(void) {
c0107790:	55                   	push   %ebp
c0107791:	89 e5                	mov    %esp,%ebp
c0107793:	83 ec 18             	sub    $0x18,%esp
    struct Page *p = alloc_page();
c0107796:	83 ec 0c             	sub    $0xc,%esp
c0107799:	6a 01                	push   $0x1
c010779b:	e8 8c fa ff ff       	call   c010722c <alloc_pages>
c01077a0:	83 c4 10             	add    $0x10,%esp
c01077a3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (p == NULL) {
c01077a6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01077aa:	75 17                	jne    c01077c3 <boot_alloc_page+0x33>
        panic("boot_alloc_page failed.\n");
c01077ac:	83 ec 04             	sub    $0x4,%esp
c01077af:	68 1b 5d 11 c0       	push   $0xc0115d1b
c01077b4:	68 1a 01 00 00       	push   $0x11a
c01077b9:	68 d4 5c 11 c0       	push   $0xc0115cd4
c01077be:	e8 2a 8d ff ff       	call   c01004ed <__panic>
    }
    return page2kva(p);
c01077c3:	83 ec 0c             	sub    $0xc,%esp
c01077c6:	ff 75 f4             	pushl  -0xc(%ebp)
c01077c9:	e8 b5 f7 ff ff       	call   c0106f83 <page2kva>
c01077ce:	83 c4 10             	add    $0x10,%esp
}
c01077d1:	c9                   	leave  
c01077d2:	c3                   	ret    

c01077d3 <pmm_init>:

//pmm_init - setup a pmm to manage physical memory, build PDT&PT to setup paging mechanism 
//         - check the correctness of pmm & paging mechanism, print PDT&PT
void
pmm_init(void) {
c01077d3:	55                   	push   %ebp
c01077d4:	89 e5                	mov    %esp,%ebp
c01077d6:	83 ec 18             	sub    $0x18,%esp
    // We've already enabled paging
    boot_cr3 = PADDR(boot_pgdir);
c01077d9:	a1 20 ea 14 c0       	mov    0xc014ea20,%eax
c01077de:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01077e1:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c01077e8:	77 17                	ja     c0107801 <pmm_init+0x2e>
c01077ea:	ff 75 f4             	pushl  -0xc(%ebp)
c01077ed:	68 b0 5c 11 c0       	push   $0xc0115cb0
c01077f2:	68 24 01 00 00       	push   $0x124
c01077f7:	68 d4 5c 11 c0       	push   $0xc0115cd4
c01077fc:	e8 ec 8c ff ff       	call   c01004ed <__panic>
c0107801:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107804:	05 00 00 00 40       	add    $0x40000000,%eax
c0107809:	a3 54 52 15 c0       	mov    %eax,0xc0155254
    //We need to alloc/free the physical memory (granularity is 4KB or other size). 
    //So a framework of physical memory manager (struct pmm_manager)is defined in pmm.h
    //First we should init a physical memory manager(pmm) based on the framework.
    //Then pmm can alloc/free the physical memory. 
    //Now the first_fit/best_fit/worst_fit/buddy_system pmm are available.
    init_pmm_manager();
c010780e:	e8 c5 f9 ff ff       	call   c01071d8 <init_pmm_manager>

    // detect physical memory space, reserve already used memory,
    // then use pmm->init_memmap to create free page list
    page_init();
c0107813:	e8 e3 fa ff ff       	call   c01072fb <page_init>

    //use pmm->check to verify the correctness of the alloc/free function in a pmm
    check_alloc_page();
c0107818:	e8 16 08 00 00       	call   c0108033 <check_alloc_page>

    check_pgdir();
c010781d:	e8 34 08 00 00       	call   c0108056 <check_pgdir>

    static_assert(KERNBASE % PTSIZE == 0 && KERNTOP % PTSIZE == 0);

    // recursively insert boot_pgdir in itself
    // to form a virtual page table at virtual address VPT
    boot_pgdir[PDX(VPT)] = PADDR(boot_pgdir) | PTE_P | PTE_W;
c0107822:	a1 20 ea 14 c0       	mov    0xc014ea20,%eax
c0107827:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
c010782d:	a1 20 ea 14 c0       	mov    0xc014ea20,%eax
c0107832:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107835:	81 7d f0 ff ff ff bf 	cmpl   $0xbfffffff,-0x10(%ebp)
c010783c:	77 17                	ja     c0107855 <pmm_init+0x82>
c010783e:	ff 75 f0             	pushl  -0x10(%ebp)
c0107841:	68 b0 5c 11 c0       	push   $0xc0115cb0
c0107846:	68 3a 01 00 00       	push   $0x13a
c010784b:	68 d4 5c 11 c0       	push   $0xc0115cd4
c0107850:	e8 98 8c ff ff       	call   c01004ed <__panic>
c0107855:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107858:	05 00 00 00 40       	add    $0x40000000,%eax
c010785d:	83 c8 03             	or     $0x3,%eax
c0107860:	89 02                	mov    %eax,(%edx)

    // map all physical memory to linear memory with base linear addr KERNBASE
    // linear_addr KERNBASE ~ KERNBASE + KMEMSIZE = phy_addr 0 ~ KMEMSIZE
    boot_map_segment(boot_pgdir, KERNBASE, KMEMSIZE, 0, PTE_W);
c0107862:	a1 20 ea 14 c0       	mov    0xc014ea20,%eax
c0107867:	83 ec 0c             	sub    $0xc,%esp
c010786a:	6a 02                	push   $0x2
c010786c:	6a 00                	push   $0x0
c010786e:	68 00 00 00 38       	push   $0x38000000
c0107873:	68 00 00 00 c0       	push   $0xc0000000
c0107878:	50                   	push   %eax
c0107879:	e8 29 fe ff ff       	call   c01076a7 <boot_map_segment>
c010787e:	83 c4 20             	add    $0x20,%esp

    // Since we are using bootloader's GDT,
    // we should reload gdt (second time, the last time) to get user segments and the TSS
    // map virtual_addr 0 ~ 4G = linear_addr 0 ~ 4G
    // then set kernel stack (ss:esp) in TSS, setup TSS in gdt, load TSS
    gdt_init();
c0107881:	e8 60 f8 ff ff       	call   c01070e6 <gdt_init>

    //now the basic virtual memory map(see memalyout.h) is established.
    //check the correctness of the basic virtual memory map.
    check_boot_pgdir();
c0107886:	e8 31 0d 00 00       	call   c01085bc <check_boot_pgdir>

    print_pgdir();
c010788b:	e8 27 11 00 00       	call   c01089b7 <print_pgdir>
    
    kmalloc_init();
c0107890:	e8 28 d9 ff ff       	call   c01051bd <kmalloc_init>

}
c0107895:	90                   	nop
c0107896:	c9                   	leave  
c0107897:	c3                   	ret    

c0107898 <get_pte>:
//  pgdir:  the kernel virtual base address of PDT
//  la:     the linear address need to map
//  create: a logical value to decide if alloc a page for PT
// return vaule: the kernel virtual address of this pte
pte_t *
get_pte(pde_t *pgdir, uintptr_t la, bool create) {
c0107898:	55                   	push   %ebp
c0107899:	89 e5                	mov    %esp,%ebp
c010789b:	83 ec 38             	sub    $0x38,%esp
                          // (7) set page directory entry's permission
    }
    return NULL;          // (8) return page table entry
#endif
    // (1) find page directory entry
    size_t pdx = PDX(la);       // index of this la in page dir table
c010789e:	8b 45 0c             	mov    0xc(%ebp),%eax
c01078a1:	c1 e8 16             	shr    $0x16,%eax
c01078a4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    pde_t * pdep = pgdir + pdx; // NOTE: this is a virtual addr
c01078a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01078aa:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01078b1:	8b 45 08             	mov    0x8(%ebp),%eax
c01078b4:	01 d0                	add    %edx,%eax
c01078b6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    // (2) check if entry is not present
    if (!(*pdep & PTE_P)) {
c01078b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01078bc:	8b 00                	mov    (%eax),%eax
c01078be:	83 e0 01             	and    $0x1,%eax
c01078c1:	85 c0                	test   %eax,%eax
c01078c3:	0f 85 ae 00 00 00    	jne    c0107977 <get_pte+0xdf>
        // (3) check if creating is needed
        if (!create) {
c01078c9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01078cd:	75 0a                	jne    c01078d9 <get_pte+0x41>
            return NULL;
c01078cf:	b8 00 00 00 00       	mov    $0x0,%eax
c01078d4:	e9 01 01 00 00       	jmp    c01079da <get_pte+0x142>
        }
        // alloc page for page table
        struct Page * pt_page =  alloc_page();
c01078d9:	83 ec 0c             	sub    $0xc,%esp
c01078dc:	6a 01                	push   $0x1
c01078de:	e8 49 f9 ff ff       	call   c010722c <alloc_pages>
c01078e3:	83 c4 10             	add    $0x10,%esp
c01078e6:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (pt_page == NULL) {
c01078e9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01078ed:	75 0a                	jne    c01078f9 <get_pte+0x61>
            return NULL;
c01078ef:	b8 00 00 00 00       	mov    $0x0,%eax
c01078f4:	e9 e1 00 00 00       	jmp    c01079da <get_pte+0x142>
        }
        // (4) set page reference
        set_page_ref(pt_page, 1);
c01078f9:	83 ec 08             	sub    $0x8,%esp
c01078fc:	6a 01                	push   $0x1
c01078fe:	ff 75 ec             	pushl  -0x14(%ebp)
c0107901:	e8 22 f7 ff ff       	call   c0107028 <set_page_ref>
c0107906:	83 c4 10             	add    $0x10,%esp
        // (5) get linear address of page
        uintptr_t pt_addr = page2pa(pt_page);
c0107909:	83 ec 0c             	sub    $0xc,%esp
c010790c:	ff 75 ec             	pushl  -0x14(%ebp)
c010790f:	e8 1f f6 ff ff       	call   c0106f33 <page2pa>
c0107914:	83 c4 10             	add    $0x10,%esp
c0107917:	89 45 e8             	mov    %eax,-0x18(%ebp)
        // (6) clear page content using memset
        memset(KADDR(pt_addr), 0, PGSIZE);
c010791a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010791d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0107920:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107923:	c1 e8 0c             	shr    $0xc,%eax
c0107926:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0107929:	a1 80 1f 15 c0       	mov    0xc0151f80,%eax
c010792e:	39 45 e0             	cmp    %eax,-0x20(%ebp)
c0107931:	72 17                	jb     c010794a <get_pte+0xb2>
c0107933:	ff 75 e4             	pushl  -0x1c(%ebp)
c0107936:	68 0c 5c 11 c0       	push   $0xc0115c0c
c010793b:	68 8d 01 00 00       	push   $0x18d
c0107940:	68 d4 5c 11 c0       	push   $0xc0115cd4
c0107945:	e8 a3 8b ff ff       	call   c01004ed <__panic>
c010794a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010794d:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0107952:	83 ec 04             	sub    $0x4,%esp
c0107955:	68 00 10 00 00       	push   $0x1000
c010795a:	6a 00                	push   $0x0
c010795c:	50                   	push   %eax
c010795d:	e8 00 c1 00 00       	call   c0113a62 <memset>
c0107962:	83 c4 10             	add    $0x10,%esp
        // (7) set page directory entry's permission
        *pdep = (PDE_ADDR(pt_addr)) | PTE_U | PTE_W | PTE_P; // PDE_ADDR: get pa &= ~0xFFF
c0107965:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107968:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010796d:	83 c8 07             	or     $0x7,%eax
c0107970:	89 c2                	mov    %eax,%edx
c0107972:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107975:	89 10                	mov    %edx,(%eax)
    }
    // (8) return page table entry
    size_t ptx = PTX(la);   // index of this la in page dir table
c0107977:	8b 45 0c             	mov    0xc(%ebp),%eax
c010797a:	c1 e8 0c             	shr    $0xc,%eax
c010797d:	25 ff 03 00 00       	and    $0x3ff,%eax
c0107982:	89 45 dc             	mov    %eax,-0x24(%ebp)
    uintptr_t pt_pa = PDE_ADDR(*pdep);
c0107985:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107988:	8b 00                	mov    (%eax),%eax
c010798a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010798f:	89 45 d8             	mov    %eax,-0x28(%ebp)
    pte_t * ptep = (pte_t *)KADDR(pt_pa) + ptx;
c0107992:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0107995:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c0107998:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010799b:	c1 e8 0c             	shr    $0xc,%eax
c010799e:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01079a1:	a1 80 1f 15 c0       	mov    0xc0151f80,%eax
c01079a6:	39 45 d0             	cmp    %eax,-0x30(%ebp)
c01079a9:	72 17                	jb     c01079c2 <get_pte+0x12a>
c01079ab:	ff 75 d4             	pushl  -0x2c(%ebp)
c01079ae:	68 0c 5c 11 c0       	push   $0xc0115c0c
c01079b3:	68 94 01 00 00       	push   $0x194
c01079b8:	68 d4 5c 11 c0       	push   $0xc0115cd4
c01079bd:	e8 2b 8b ff ff       	call   c01004ed <__panic>
c01079c2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01079c5:	2d 00 00 00 40       	sub    $0x40000000,%eax
c01079ca:	89 c2                	mov    %eax,%edx
c01079cc:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01079cf:	c1 e0 02             	shl    $0x2,%eax
c01079d2:	01 d0                	add    %edx,%eax
c01079d4:	89 45 cc             	mov    %eax,-0x34(%ebp)
    return ptep;
c01079d7:	8b 45 cc             	mov    -0x34(%ebp),%eax
}
c01079da:	c9                   	leave  
c01079db:	c3                   	ret    

c01079dc <get_page>:

//get_page - get related Page struct for linear address la using PDT pgdir
struct Page *
get_page(pde_t *pgdir, uintptr_t la, pte_t **ptep_store) {
c01079dc:	55                   	push   %ebp
c01079dd:	89 e5                	mov    %esp,%ebp
c01079df:	83 ec 18             	sub    $0x18,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c01079e2:	83 ec 04             	sub    $0x4,%esp
c01079e5:	6a 00                	push   $0x0
c01079e7:	ff 75 0c             	pushl  0xc(%ebp)
c01079ea:	ff 75 08             	pushl  0x8(%ebp)
c01079ed:	e8 a6 fe ff ff       	call   c0107898 <get_pte>
c01079f2:	83 c4 10             	add    $0x10,%esp
c01079f5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep_store != NULL) {
c01079f8:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01079fc:	74 08                	je     c0107a06 <get_page+0x2a>
        *ptep_store = ptep;
c01079fe:	8b 45 10             	mov    0x10(%ebp),%eax
c0107a01:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0107a04:	89 10                	mov    %edx,(%eax)
    }
    if (ptep != NULL && *ptep & PTE_P) {
c0107a06:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107a0a:	74 1f                	je     c0107a2b <get_page+0x4f>
c0107a0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107a0f:	8b 00                	mov    (%eax),%eax
c0107a11:	83 e0 01             	and    $0x1,%eax
c0107a14:	85 c0                	test   %eax,%eax
c0107a16:	74 13                	je     c0107a2b <get_page+0x4f>
        return pte2page(*ptep);
c0107a18:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107a1b:	8b 00                	mov    (%eax),%eax
c0107a1d:	83 ec 0c             	sub    $0xc,%esp
c0107a20:	50                   	push   %eax
c0107a21:	e8 a2 f5 ff ff       	call   c0106fc8 <pte2page>
c0107a26:	83 c4 10             	add    $0x10,%esp
c0107a29:	eb 05                	jmp    c0107a30 <get_page+0x54>
    }
    return NULL;
c0107a2b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107a30:	c9                   	leave  
c0107a31:	c3                   	ret    

c0107a32 <page_remove_pte>:

//page_remove_pte - free an Page sturct which is related linear address la
//                - and clean(invalidate) pte which is related linear address la
//note: PT is changed, so the TLB need to be invalidate 
static inline void
page_remove_pte(pde_t *pgdir, uintptr_t la, pte_t *ptep) {
c0107a32:	55                   	push   %ebp
c0107a33:	89 e5                	mov    %esp,%ebp
c0107a35:	83 ec 18             	sub    $0x18,%esp
                                  //(5) clear second page table entry
                                  //(6) flush tlb
    }
#endif
    //(1) check if this page table entry is present
    if (!(*ptep & PTE_P)) {
c0107a38:	8b 45 10             	mov    0x10(%ebp),%eax
c0107a3b:	8b 00                	mov    (%eax),%eax
c0107a3d:	83 e0 01             	and    $0x1,%eax
c0107a40:	85 c0                	test   %eax,%eax
c0107a42:	74 57                	je     c0107a9b <page_remove_pte+0x69>
        return;
    }
    //(2) find corresponding page to pte
    struct Page *page = pte2page(*ptep);
c0107a44:	8b 45 10             	mov    0x10(%ebp),%eax
c0107a47:	8b 00                	mov    (%eax),%eax
c0107a49:	83 ec 0c             	sub    $0xc,%esp
c0107a4c:	50                   	push   %eax
c0107a4d:	e8 76 f5 ff ff       	call   c0106fc8 <pte2page>
c0107a52:	83 c4 10             	add    $0x10,%esp
c0107a55:	89 45 f4             	mov    %eax,-0xc(%ebp)
    //(3) decrease page reference
    page_ref_dec(page);
c0107a58:	83 ec 0c             	sub    $0xc,%esp
c0107a5b:	ff 75 f4             	pushl  -0xc(%ebp)
c0107a5e:	e8 ea f5 ff ff       	call   c010704d <page_ref_dec>
c0107a63:	83 c4 10             	add    $0x10,%esp
    //(4) and free this page when page reference reachs 0
    if (page->ref == 0) {
c0107a66:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107a69:	8b 00                	mov    (%eax),%eax
c0107a6b:	85 c0                	test   %eax,%eax
c0107a6d:	75 10                	jne    c0107a7f <page_remove_pte+0x4d>
        free_page(page);
c0107a6f:	83 ec 08             	sub    $0x8,%esp
c0107a72:	6a 01                	push   $0x1
c0107a74:	ff 75 f4             	pushl  -0xc(%ebp)
c0107a77:	e8 1c f8 ff ff       	call   c0107298 <free_pages>
c0107a7c:	83 c4 10             	add    $0x10,%esp
    }
    //(5) clear second page table entry
    *ptep = 0;
c0107a7f:	8b 45 10             	mov    0x10(%ebp),%eax
c0107a82:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    //(6) flush tlb
    tlb_invalidate(pgdir, la);
c0107a88:	83 ec 08             	sub    $0x8,%esp
c0107a8b:	ff 75 0c             	pushl  0xc(%ebp)
c0107a8e:	ff 75 08             	pushl  0x8(%ebp)
c0107a91:	e8 9c 04 00 00       	call   c0107f32 <tlb_invalidate>
c0107a96:	83 c4 10             	add    $0x10,%esp
c0107a99:	eb 01                	jmp    c0107a9c <page_remove_pte+0x6a>
                                  //(6) flush tlb
    }
#endif
    //(1) check if this page table entry is present
    if (!(*ptep & PTE_P)) {
        return;
c0107a9b:	90                   	nop
    }
    //(5) clear second page table entry
    *ptep = 0;
    //(6) flush tlb
    tlb_invalidate(pgdir, la);
}
c0107a9c:	c9                   	leave  
c0107a9d:	c3                   	ret    

c0107a9e <unmap_range>:

void
unmap_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c0107a9e:	55                   	push   %ebp
c0107a9f:	89 e5                	mov    %esp,%ebp
c0107aa1:	83 ec 18             	sub    $0x18,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0107aa4:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107aa7:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107aac:	85 c0                	test   %eax,%eax
c0107aae:	75 0c                	jne    c0107abc <unmap_range+0x1e>
c0107ab0:	8b 45 10             	mov    0x10(%ebp),%eax
c0107ab3:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107ab8:	85 c0                	test   %eax,%eax
c0107aba:	74 19                	je     c0107ad5 <unmap_range+0x37>
c0107abc:	68 34 5d 11 c0       	push   $0xc0115d34
c0107ac1:	68 f9 5c 11 c0       	push   $0xc0115cf9
c0107ac6:	68 d7 01 00 00       	push   $0x1d7
c0107acb:	68 d4 5c 11 c0       	push   $0xc0115cd4
c0107ad0:	e8 18 8a ff ff       	call   c01004ed <__panic>
    assert(USER_ACCESS(start, end));
c0107ad5:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0107adc:	76 11                	jbe    c0107aef <unmap_range+0x51>
c0107ade:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107ae1:	3b 45 10             	cmp    0x10(%ebp),%eax
c0107ae4:	73 09                	jae    c0107aef <unmap_range+0x51>
c0107ae6:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c0107aed:	76 19                	jbe    c0107b08 <unmap_range+0x6a>
c0107aef:	68 5d 5d 11 c0       	push   $0xc0115d5d
c0107af4:	68 f9 5c 11 c0       	push   $0xc0115cf9
c0107af9:	68 d8 01 00 00       	push   $0x1d8
c0107afe:	68 d4 5c 11 c0       	push   $0xc0115cd4
c0107b03:	e8 e5 89 ff ff       	call   c01004ed <__panic>

    do {
        pte_t *ptep = get_pte(pgdir, start, 0);
c0107b08:	83 ec 04             	sub    $0x4,%esp
c0107b0b:	6a 00                	push   $0x0
c0107b0d:	ff 75 0c             	pushl  0xc(%ebp)
c0107b10:	ff 75 08             	pushl  0x8(%ebp)
c0107b13:	e8 80 fd ff ff       	call   c0107898 <get_pte>
c0107b18:	83 c4 10             	add    $0x10,%esp
c0107b1b:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ptep == NULL) {
c0107b1e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107b22:	75 18                	jne    c0107b3c <unmap_range+0x9e>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
c0107b24:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107b27:	05 00 00 40 00       	add    $0x400000,%eax
c0107b2c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107b2f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107b32:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0107b37:	89 45 0c             	mov    %eax,0xc(%ebp)
            continue ;
c0107b3a:	eb 24                	jmp    c0107b60 <unmap_range+0xc2>
        }
        if (*ptep != 0) {
c0107b3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107b3f:	8b 00                	mov    (%eax),%eax
c0107b41:	85 c0                	test   %eax,%eax
c0107b43:	74 14                	je     c0107b59 <unmap_range+0xbb>
            page_remove_pte(pgdir, start, ptep);
c0107b45:	83 ec 04             	sub    $0x4,%esp
c0107b48:	ff 75 f4             	pushl  -0xc(%ebp)
c0107b4b:	ff 75 0c             	pushl  0xc(%ebp)
c0107b4e:	ff 75 08             	pushl  0x8(%ebp)
c0107b51:	e8 dc fe ff ff       	call   c0107a32 <page_remove_pte>
c0107b56:	83 c4 10             	add    $0x10,%esp
        }
        start += PGSIZE;
c0107b59:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
    } while (start != 0 && start < end);
c0107b60:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0107b64:	74 08                	je     c0107b6e <unmap_range+0xd0>
c0107b66:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107b69:	3b 45 10             	cmp    0x10(%ebp),%eax
c0107b6c:	72 9a                	jb     c0107b08 <unmap_range+0x6a>
}
c0107b6e:	90                   	nop
c0107b6f:	c9                   	leave  
c0107b70:	c3                   	ret    

c0107b71 <exit_range>:

void
exit_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c0107b71:	55                   	push   %ebp
c0107b72:	89 e5                	mov    %esp,%ebp
c0107b74:	83 ec 18             	sub    $0x18,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0107b77:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107b7a:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107b7f:	85 c0                	test   %eax,%eax
c0107b81:	75 0c                	jne    c0107b8f <exit_range+0x1e>
c0107b83:	8b 45 10             	mov    0x10(%ebp),%eax
c0107b86:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107b8b:	85 c0                	test   %eax,%eax
c0107b8d:	74 19                	je     c0107ba8 <exit_range+0x37>
c0107b8f:	68 34 5d 11 c0       	push   $0xc0115d34
c0107b94:	68 f9 5c 11 c0       	push   $0xc0115cf9
c0107b99:	68 e9 01 00 00       	push   $0x1e9
c0107b9e:	68 d4 5c 11 c0       	push   $0xc0115cd4
c0107ba3:	e8 45 89 ff ff       	call   c01004ed <__panic>
    assert(USER_ACCESS(start, end));
c0107ba8:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0107baf:	76 11                	jbe    c0107bc2 <exit_range+0x51>
c0107bb1:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107bb4:	3b 45 10             	cmp    0x10(%ebp),%eax
c0107bb7:	73 09                	jae    c0107bc2 <exit_range+0x51>
c0107bb9:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c0107bc0:	76 19                	jbe    c0107bdb <exit_range+0x6a>
c0107bc2:	68 5d 5d 11 c0       	push   $0xc0115d5d
c0107bc7:	68 f9 5c 11 c0       	push   $0xc0115cf9
c0107bcc:	68 ea 01 00 00       	push   $0x1ea
c0107bd1:	68 d4 5c 11 c0       	push   $0xc0115cd4
c0107bd6:	e8 12 89 ff ff       	call   c01004ed <__panic>

    start = ROUNDDOWN(start, PTSIZE);
c0107bdb:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107bde:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0107be1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107be4:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0107be9:	89 45 0c             	mov    %eax,0xc(%ebp)
    do {
        int pde_idx = PDX(start);
c0107bec:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107bef:	c1 e8 16             	shr    $0x16,%eax
c0107bf2:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pgdir[pde_idx] & PTE_P) {
c0107bf5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107bf8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0107bff:	8b 45 08             	mov    0x8(%ebp),%eax
c0107c02:	01 d0                	add    %edx,%eax
c0107c04:	8b 00                	mov    (%eax),%eax
c0107c06:	83 e0 01             	and    $0x1,%eax
c0107c09:	85 c0                	test   %eax,%eax
c0107c0b:	74 40                	je     c0107c4d <exit_range+0xdc>
            free_page(pde2page(pgdir[pde_idx]));
c0107c0d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107c10:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0107c17:	8b 45 08             	mov    0x8(%ebp),%eax
c0107c1a:	01 d0                	add    %edx,%eax
c0107c1c:	8b 00                	mov    (%eax),%eax
c0107c1e:	83 ec 0c             	sub    $0xc,%esp
c0107c21:	50                   	push   %eax
c0107c22:	e8 db f3 ff ff       	call   c0107002 <pde2page>
c0107c27:	83 c4 10             	add    $0x10,%esp
c0107c2a:	83 ec 08             	sub    $0x8,%esp
c0107c2d:	6a 01                	push   $0x1
c0107c2f:	50                   	push   %eax
c0107c30:	e8 63 f6 ff ff       	call   c0107298 <free_pages>
c0107c35:	83 c4 10             	add    $0x10,%esp
            pgdir[pde_idx] = 0;
c0107c38:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107c3b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0107c42:	8b 45 08             	mov    0x8(%ebp),%eax
c0107c45:	01 d0                	add    %edx,%eax
c0107c47:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        }
        start += PTSIZE;
c0107c4d:	81 45 0c 00 00 40 00 	addl   $0x400000,0xc(%ebp)
    } while (start != 0 && start < end);
c0107c54:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0107c58:	74 08                	je     c0107c62 <exit_range+0xf1>
c0107c5a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107c5d:	3b 45 10             	cmp    0x10(%ebp),%eax
c0107c60:	72 8a                	jb     c0107bec <exit_range+0x7b>
}
c0107c62:	90                   	nop
c0107c63:	c9                   	leave  
c0107c64:	c3                   	ret    

c0107c65 <copy_range>:
 * @share: flags to indicate to dup OR share. We just use dup method, so it didn't be used.
 *
 * CALL GRAPH: copy_mm-->dup_mmap-->copy_range
 */
int
copy_range(pde_t *to, pde_t *from, uintptr_t start, uintptr_t end, bool share) {
c0107c65:	55                   	push   %ebp
c0107c66:	89 e5                	mov    %esp,%ebp
c0107c68:	83 ec 38             	sub    $0x38,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0107c6b:	8b 45 10             	mov    0x10(%ebp),%eax
c0107c6e:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107c73:	85 c0                	test   %eax,%eax
c0107c75:	75 0c                	jne    c0107c83 <copy_range+0x1e>
c0107c77:	8b 45 14             	mov    0x14(%ebp),%eax
c0107c7a:	25 ff 0f 00 00       	and    $0xfff,%eax
c0107c7f:	85 c0                	test   %eax,%eax
c0107c81:	74 19                	je     c0107c9c <copy_range+0x37>
c0107c83:	68 34 5d 11 c0       	push   $0xc0115d34
c0107c88:	68 f9 5c 11 c0       	push   $0xc0115cf9
c0107c8d:	68 ff 01 00 00       	push   $0x1ff
c0107c92:	68 d4 5c 11 c0       	push   $0xc0115cd4
c0107c97:	e8 51 88 ff ff       	call   c01004ed <__panic>
    assert(USER_ACCESS(start, end));
c0107c9c:	81 7d 10 ff ff 1f 00 	cmpl   $0x1fffff,0x10(%ebp)
c0107ca3:	76 11                	jbe    c0107cb6 <copy_range+0x51>
c0107ca5:	8b 45 10             	mov    0x10(%ebp),%eax
c0107ca8:	3b 45 14             	cmp    0x14(%ebp),%eax
c0107cab:	73 09                	jae    c0107cb6 <copy_range+0x51>
c0107cad:	81 7d 14 00 00 00 b0 	cmpl   $0xb0000000,0x14(%ebp)
c0107cb4:	76 19                	jbe    c0107ccf <copy_range+0x6a>
c0107cb6:	68 5d 5d 11 c0       	push   $0xc0115d5d
c0107cbb:	68 f9 5c 11 c0       	push   $0xc0115cf9
c0107cc0:	68 00 02 00 00       	push   $0x200
c0107cc5:	68 d4 5c 11 c0       	push   $0xc0115cd4
c0107cca:	e8 1e 88 ff ff       	call   c01004ed <__panic>
    // copy content by page unit.
    do {
        //call get_pte to find process A's pte according to the addr start
        pte_t *ptep = get_pte(from, start, 0), *nptep;
c0107ccf:	83 ec 04             	sub    $0x4,%esp
c0107cd2:	6a 00                	push   $0x0
c0107cd4:	ff 75 10             	pushl  0x10(%ebp)
c0107cd7:	ff 75 0c             	pushl  0xc(%ebp)
c0107cda:	e8 b9 fb ff ff       	call   c0107898 <get_pte>
c0107cdf:	83 c4 10             	add    $0x10,%esp
c0107ce2:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ptep == NULL) {
c0107ce5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107ce9:	75 1b                	jne    c0107d06 <copy_range+0xa1>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
c0107ceb:	8b 45 10             	mov    0x10(%ebp),%eax
c0107cee:	05 00 00 40 00       	add    $0x400000,%eax
c0107cf3:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107cf6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107cf9:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0107cfe:	89 45 10             	mov    %eax,0x10(%ebp)
            continue ;
c0107d01:	e9 21 01 00 00       	jmp    c0107e27 <copy_range+0x1c2>
        }
        //call get_pte to find process B's pte according to the addr start. If pte is NULL, just alloc a PT
        if (*ptep & PTE_P) {
c0107d06:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107d09:	8b 00                	mov    (%eax),%eax
c0107d0b:	83 e0 01             	and    $0x1,%eax
c0107d0e:	85 c0                	test   %eax,%eax
c0107d10:	0f 84 0a 01 00 00    	je     c0107e20 <copy_range+0x1bb>
            if ((nptep = get_pte(to, start, 1)) == NULL) {
c0107d16:	83 ec 04             	sub    $0x4,%esp
c0107d19:	6a 01                	push   $0x1
c0107d1b:	ff 75 10             	pushl  0x10(%ebp)
c0107d1e:	ff 75 08             	pushl  0x8(%ebp)
c0107d21:	e8 72 fb ff ff       	call   c0107898 <get_pte>
c0107d26:	83 c4 10             	add    $0x10,%esp
c0107d29:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0107d2c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0107d30:	75 0a                	jne    c0107d3c <copy_range+0xd7>
                return -E_NO_MEM;
c0107d32:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0107d37:	e9 02 01 00 00       	jmp    c0107e3e <copy_range+0x1d9>
            }
            uint32_t perm = (*ptep & PTE_USER);
c0107d3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107d3f:	8b 00                	mov    (%eax),%eax
c0107d41:	83 e0 07             	and    $0x7,%eax
c0107d44:	89 45 e8             	mov    %eax,-0x18(%ebp)
            //get page from ptep
            struct Page *page = pte2page(*ptep);
c0107d47:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107d4a:	8b 00                	mov    (%eax),%eax
c0107d4c:	83 ec 0c             	sub    $0xc,%esp
c0107d4f:	50                   	push   %eax
c0107d50:	e8 73 f2 ff ff       	call   c0106fc8 <pte2page>
c0107d55:	83 c4 10             	add    $0x10,%esp
c0107d58:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            // alloc a page for process B
            struct Page *npage=alloc_page();
c0107d5b:	83 ec 0c             	sub    $0xc,%esp
c0107d5e:	6a 01                	push   $0x1
c0107d60:	e8 c7 f4 ff ff       	call   c010722c <alloc_pages>
c0107d65:	83 c4 10             	add    $0x10,%esp
c0107d68:	89 45 e0             	mov    %eax,-0x20(%ebp)
            assert(page!=NULL);
c0107d6b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0107d6f:	75 19                	jne    c0107d8a <copy_range+0x125>
c0107d71:	68 75 5d 11 c0       	push   $0xc0115d75
c0107d76:	68 f9 5c 11 c0       	push   $0xc0115cf9
c0107d7b:	68 13 02 00 00       	push   $0x213
c0107d80:	68 d4 5c 11 c0       	push   $0xc0115cd4
c0107d85:	e8 63 87 ff ff       	call   c01004ed <__panic>
            assert(npage!=NULL);
c0107d8a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0107d8e:	75 19                	jne    c0107da9 <copy_range+0x144>
c0107d90:	68 80 5d 11 c0       	push   $0xc0115d80
c0107d95:	68 f9 5c 11 c0       	push   $0xc0115cf9
c0107d9a:	68 14 02 00 00       	push   $0x214
c0107d9f:	68 d4 5c 11 c0       	push   $0xc0115cd4
c0107da4:	e8 44 87 ff ff       	call   c01004ed <__panic>
            int ret=0;
c0107da9:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
            * (2) find dst_kvaddr: the kernel virtual address of npage
            * (3) memory copy from src_kvaddr to dst_kvaddr, size is PGSIZE
            * (4) build the map of phy addr of  nage with the linear addr start
            */
            // (1) find src_kvaddr: the kernel virtual address of page
            uintptr_t src_kvaddr = page2kva(page);
c0107db0:	83 ec 0c             	sub    $0xc,%esp
c0107db3:	ff 75 e4             	pushl  -0x1c(%ebp)
c0107db6:	e8 c8 f1 ff ff       	call   c0106f83 <page2kva>
c0107dbb:	83 c4 10             	add    $0x10,%esp
c0107dbe:	89 45 d8             	mov    %eax,-0x28(%ebp)
            // (2) find dst_kvaddr: the kernel virtual address of npage
            uintptr_t dst_kvaddr = page2kva(npage);
c0107dc1:	83 ec 0c             	sub    $0xc,%esp
c0107dc4:	ff 75 e0             	pushl  -0x20(%ebp)
c0107dc7:	e8 b7 f1 ff ff       	call   c0106f83 <page2kva>
c0107dcc:	83 c4 10             	add    $0x10,%esp
c0107dcf:	89 45 d4             	mov    %eax,-0x2c(%ebp)
            // (3) memory copy from src_kvaddr to dst_kvaddr, size is PGSIZE
            memcpy(dst_kvaddr, src_kvaddr, PGSIZE);
c0107dd2:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0107dd5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0107dd8:	83 ec 04             	sub    $0x4,%esp
c0107ddb:	68 00 10 00 00       	push   $0x1000
c0107de0:	52                   	push   %edx
c0107de1:	50                   	push   %eax
c0107de2:	e8 5e bd 00 00       	call   c0113b45 <memcpy>
c0107de7:	83 c4 10             	add    $0x10,%esp
            // (4) build the map of phy addr of  nage with the linear addr start
            ret = page_insert(to, npage, start, perm);
c0107dea:	ff 75 e8             	pushl  -0x18(%ebp)
c0107ded:	ff 75 10             	pushl  0x10(%ebp)
c0107df0:	ff 75 e0             	pushl  -0x20(%ebp)
c0107df3:	ff 75 08             	pushl  0x8(%ebp)
c0107df6:	e8 7e 00 00 00       	call   c0107e79 <page_insert>
c0107dfb:	83 c4 10             	add    $0x10,%esp
c0107dfe:	89 45 dc             	mov    %eax,-0x24(%ebp)
            assert(ret == 0);
c0107e01:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0107e05:	74 19                	je     c0107e20 <copy_range+0x1bb>
c0107e07:	68 8c 5d 11 c0       	push   $0xc0115d8c
c0107e0c:	68 f9 5c 11 c0       	push   $0xc0115cf9
c0107e11:	68 2c 02 00 00       	push   $0x22c
c0107e16:	68 d4 5c 11 c0       	push   $0xc0115cd4
c0107e1b:	e8 cd 86 ff ff       	call   c01004ed <__panic>
        }
        start += PGSIZE;
c0107e20:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    } while (start != 0 && start < end);
c0107e27:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0107e2b:	74 0c                	je     c0107e39 <copy_range+0x1d4>
c0107e2d:	8b 45 10             	mov    0x10(%ebp),%eax
c0107e30:	3b 45 14             	cmp    0x14(%ebp),%eax
c0107e33:	0f 82 96 fe ff ff    	jb     c0107ccf <copy_range+0x6a>
    return 0;
c0107e39:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107e3e:	c9                   	leave  
c0107e3f:	c3                   	ret    

c0107e40 <page_remove>:

//page_remove - free an Page which is related linear address la and has an validated pte
void
page_remove(pde_t *pgdir, uintptr_t la) {
c0107e40:	55                   	push   %ebp
c0107e41:	89 e5                	mov    %esp,%ebp
c0107e43:	83 ec 18             	sub    $0x18,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c0107e46:	83 ec 04             	sub    $0x4,%esp
c0107e49:	6a 00                	push   $0x0
c0107e4b:	ff 75 0c             	pushl  0xc(%ebp)
c0107e4e:	ff 75 08             	pushl  0x8(%ebp)
c0107e51:	e8 42 fa ff ff       	call   c0107898 <get_pte>
c0107e56:	83 c4 10             	add    $0x10,%esp
c0107e59:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep != NULL) {
c0107e5c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107e60:	74 14                	je     c0107e76 <page_remove+0x36>
        page_remove_pte(pgdir, la, ptep);
c0107e62:	83 ec 04             	sub    $0x4,%esp
c0107e65:	ff 75 f4             	pushl  -0xc(%ebp)
c0107e68:	ff 75 0c             	pushl  0xc(%ebp)
c0107e6b:	ff 75 08             	pushl  0x8(%ebp)
c0107e6e:	e8 bf fb ff ff       	call   c0107a32 <page_remove_pte>
c0107e73:	83 c4 10             	add    $0x10,%esp
    }
}
c0107e76:	90                   	nop
c0107e77:	c9                   	leave  
c0107e78:	c3                   	ret    

c0107e79 <page_insert>:
//  la:    the linear address need to map
//  perm:  the permission of this Page which is setted in related pte
// return value: always 0
//note: PT is changed, so the TLB need to be invalidate 
int
page_insert(pde_t *pgdir, struct Page *page, uintptr_t la, uint32_t perm) {
c0107e79:	55                   	push   %ebp
c0107e7a:	89 e5                	mov    %esp,%ebp
c0107e7c:	83 ec 18             	sub    $0x18,%esp
    pte_t *ptep = get_pte(pgdir, la, 1);
c0107e7f:	83 ec 04             	sub    $0x4,%esp
c0107e82:	6a 01                	push   $0x1
c0107e84:	ff 75 10             	pushl  0x10(%ebp)
c0107e87:	ff 75 08             	pushl  0x8(%ebp)
c0107e8a:	e8 09 fa ff ff       	call   c0107898 <get_pte>
c0107e8f:	83 c4 10             	add    $0x10,%esp
c0107e92:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep == NULL) {
c0107e95:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107e99:	75 0a                	jne    c0107ea5 <page_insert+0x2c>
        return -E_NO_MEM;
c0107e9b:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0107ea0:	e9 8b 00 00 00       	jmp    c0107f30 <page_insert+0xb7>
    }
    page_ref_inc(page);
c0107ea5:	83 ec 0c             	sub    $0xc,%esp
c0107ea8:	ff 75 0c             	pushl  0xc(%ebp)
c0107eab:	e8 86 f1 ff ff       	call   c0107036 <page_ref_inc>
c0107eb0:	83 c4 10             	add    $0x10,%esp
    if (*ptep & PTE_P) {
c0107eb3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107eb6:	8b 00                	mov    (%eax),%eax
c0107eb8:	83 e0 01             	and    $0x1,%eax
c0107ebb:	85 c0                	test   %eax,%eax
c0107ebd:	74 40                	je     c0107eff <page_insert+0x86>
        struct Page *p = pte2page(*ptep);
c0107ebf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107ec2:	8b 00                	mov    (%eax),%eax
c0107ec4:	83 ec 0c             	sub    $0xc,%esp
c0107ec7:	50                   	push   %eax
c0107ec8:	e8 fb f0 ff ff       	call   c0106fc8 <pte2page>
c0107ecd:	83 c4 10             	add    $0x10,%esp
c0107ed0:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (p == page) {
c0107ed3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107ed6:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0107ed9:	75 10                	jne    c0107eeb <page_insert+0x72>
            page_ref_dec(page);
c0107edb:	83 ec 0c             	sub    $0xc,%esp
c0107ede:	ff 75 0c             	pushl  0xc(%ebp)
c0107ee1:	e8 67 f1 ff ff       	call   c010704d <page_ref_dec>
c0107ee6:	83 c4 10             	add    $0x10,%esp
c0107ee9:	eb 14                	jmp    c0107eff <page_insert+0x86>
        }
        else {
            page_remove_pte(pgdir, la, ptep);
c0107eeb:	83 ec 04             	sub    $0x4,%esp
c0107eee:	ff 75 f4             	pushl  -0xc(%ebp)
c0107ef1:	ff 75 10             	pushl  0x10(%ebp)
c0107ef4:	ff 75 08             	pushl  0x8(%ebp)
c0107ef7:	e8 36 fb ff ff       	call   c0107a32 <page_remove_pte>
c0107efc:	83 c4 10             	add    $0x10,%esp
        }
    }
    *ptep = page2pa(page) | PTE_P | perm;
c0107eff:	83 ec 0c             	sub    $0xc,%esp
c0107f02:	ff 75 0c             	pushl  0xc(%ebp)
c0107f05:	e8 29 f0 ff ff       	call   c0106f33 <page2pa>
c0107f0a:	83 c4 10             	add    $0x10,%esp
c0107f0d:	0b 45 14             	or     0x14(%ebp),%eax
c0107f10:	83 c8 01             	or     $0x1,%eax
c0107f13:	89 c2                	mov    %eax,%edx
c0107f15:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107f18:	89 10                	mov    %edx,(%eax)
    tlb_invalidate(pgdir, la);
c0107f1a:	83 ec 08             	sub    $0x8,%esp
c0107f1d:	ff 75 10             	pushl  0x10(%ebp)
c0107f20:	ff 75 08             	pushl  0x8(%ebp)
c0107f23:	e8 0a 00 00 00       	call   c0107f32 <tlb_invalidate>
c0107f28:	83 c4 10             	add    $0x10,%esp
    return 0;
c0107f2b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107f30:	c9                   	leave  
c0107f31:	c3                   	ret    

c0107f32 <tlb_invalidate>:

// invalidate a TLB entry, but only if the page tables being
// edited are the ones currently in use by the processor.
void
tlb_invalidate(pde_t *pgdir, uintptr_t la) {
c0107f32:	55                   	push   %ebp
c0107f33:	89 e5                	mov    %esp,%ebp
c0107f35:	83 ec 18             	sub    $0x18,%esp
}

static inline uintptr_t
rcr3(void) {
    uintptr_t cr3;
    asm volatile ("mov %%cr3, %0" : "=r" (cr3) :: "memory");
c0107f38:	0f 20 d8             	mov    %cr3,%eax
c0107f3b:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return cr3;
c0107f3e:	8b 55 ec             	mov    -0x14(%ebp),%edx
    if (rcr3() == PADDR(pgdir)) {
c0107f41:	8b 45 08             	mov    0x8(%ebp),%eax
c0107f44:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107f47:	81 7d f0 ff ff ff bf 	cmpl   $0xbfffffff,-0x10(%ebp)
c0107f4e:	77 17                	ja     c0107f67 <tlb_invalidate+0x35>
c0107f50:	ff 75 f0             	pushl  -0x10(%ebp)
c0107f53:	68 b0 5c 11 c0       	push   $0xc0115cb0
c0107f58:	68 5d 02 00 00       	push   $0x25d
c0107f5d:	68 d4 5c 11 c0       	push   $0xc0115cd4
c0107f62:	e8 86 85 ff ff       	call   c01004ed <__panic>
c0107f67:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107f6a:	05 00 00 00 40       	add    $0x40000000,%eax
c0107f6f:	39 c2                	cmp    %eax,%edx
c0107f71:	75 0c                	jne    c0107f7f <tlb_invalidate+0x4d>
        invlpg((void *)la);
c0107f73:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107f76:	89 45 f4             	mov    %eax,-0xc(%ebp)
}

static inline void
invlpg(void *addr) {
    asm volatile ("invlpg (%0)" :: "r" (addr) : "memory");
c0107f79:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107f7c:	0f 01 38             	invlpg (%eax)
    }
}
c0107f7f:	90                   	nop
c0107f80:	c9                   	leave  
c0107f81:	c3                   	ret    

c0107f82 <pgdir_alloc_page>:

// pgdir_alloc_page - call alloc_page & page_insert functions to 
//                  - allocate a page size memory & setup an addr map
//                  - pa<->la with linear address la and the PDT pgdir
struct Page *
pgdir_alloc_page(pde_t *pgdir, uintptr_t la, uint32_t perm) {
c0107f82:	55                   	push   %ebp
c0107f83:	89 e5                	mov    %esp,%ebp
c0107f85:	83 ec 18             	sub    $0x18,%esp
    struct Page *page = alloc_page();
c0107f88:	83 ec 0c             	sub    $0xc,%esp
c0107f8b:	6a 01                	push   $0x1
c0107f8d:	e8 9a f2 ff ff       	call   c010722c <alloc_pages>
c0107f92:	83 c4 10             	add    $0x10,%esp
c0107f95:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c0107f98:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107f9c:	0f 84 8c 00 00 00    	je     c010802e <pgdir_alloc_page+0xac>
        if (page_insert(pgdir, page, la, perm) != 0) {
c0107fa2:	ff 75 10             	pushl  0x10(%ebp)
c0107fa5:	ff 75 0c             	pushl  0xc(%ebp)
c0107fa8:	ff 75 f4             	pushl  -0xc(%ebp)
c0107fab:	ff 75 08             	pushl  0x8(%ebp)
c0107fae:	e8 c6 fe ff ff       	call   c0107e79 <page_insert>
c0107fb3:	83 c4 10             	add    $0x10,%esp
c0107fb6:	85 c0                	test   %eax,%eax
c0107fb8:	74 17                	je     c0107fd1 <pgdir_alloc_page+0x4f>
            free_page(page);
c0107fba:	83 ec 08             	sub    $0x8,%esp
c0107fbd:	6a 01                	push   $0x1
c0107fbf:	ff 75 f4             	pushl  -0xc(%ebp)
c0107fc2:	e8 d1 f2 ff ff       	call   c0107298 <free_pages>
c0107fc7:	83 c4 10             	add    $0x10,%esp
            return NULL;
c0107fca:	b8 00 00 00 00       	mov    $0x0,%eax
c0107fcf:	eb 60                	jmp    c0108031 <pgdir_alloc_page+0xaf>
        }
        if (swap_init_ok){
c0107fd1:	a1 6c 1f 15 c0       	mov    0xc0151f6c,%eax
c0107fd6:	85 c0                	test   %eax,%eax
c0107fd8:	74 54                	je     c010802e <pgdir_alloc_page+0xac>
            if(check_mm_struct!=NULL) {
c0107fda:	a1 70 51 15 c0       	mov    0xc0155170,%eax
c0107fdf:	85 c0                	test   %eax,%eax
c0107fe1:	74 4b                	je     c010802e <pgdir_alloc_page+0xac>
                swap_map_swappable(check_mm_struct, la, page, 0);
c0107fe3:	a1 70 51 15 c0       	mov    0xc0155170,%eax
c0107fe8:	6a 00                	push   $0x0
c0107fea:	ff 75 f4             	pushl  -0xc(%ebp)
c0107fed:	ff 75 0c             	pushl  0xc(%ebp)
c0107ff0:	50                   	push   %eax
c0107ff1:	e8 be d5 ff ff       	call   c01055b4 <swap_map_swappable>
c0107ff6:	83 c4 10             	add    $0x10,%esp
                page->pra_vaddr=la;
c0107ff9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107ffc:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107fff:	89 50 1c             	mov    %edx,0x1c(%eax)
                assert(page_ref(page) == 1);
c0108002:	83 ec 0c             	sub    $0xc,%esp
c0108005:	ff 75 f4             	pushl  -0xc(%ebp)
c0108008:	e8 11 f0 ff ff       	call   c010701e <page_ref>
c010800d:	83 c4 10             	add    $0x10,%esp
c0108010:	83 f8 01             	cmp    $0x1,%eax
c0108013:	74 19                	je     c010802e <pgdir_alloc_page+0xac>
c0108015:	68 95 5d 11 c0       	push   $0xc0115d95
c010801a:	68 f9 5c 11 c0       	push   $0xc0115cf9
c010801f:	68 71 02 00 00       	push   $0x271
c0108024:	68 d4 5c 11 c0       	push   $0xc0115cd4
c0108029:	e8 bf 84 ff ff       	call   c01004ed <__panic>
            }
        }

    }

    return page;
c010802e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0108031:	c9                   	leave  
c0108032:	c3                   	ret    

c0108033 <check_alloc_page>:

static void
check_alloc_page(void) {
c0108033:	55                   	push   %ebp
c0108034:	89 e5                	mov    %esp,%ebp
c0108036:	83 ec 08             	sub    $0x8,%esp
    pmm_manager->check();
c0108039:	a1 50 52 15 c0       	mov    0xc0155250,%eax
c010803e:	8b 40 18             	mov    0x18(%eax),%eax
c0108041:	ff d0                	call   *%eax
    cprintf("check_alloc_page() succeeded!\n");
c0108043:	83 ec 0c             	sub    $0xc,%esp
c0108046:	68 ac 5d 11 c0       	push   $0xc0115dac
c010804b:	e8 37 83 ff ff       	call   c0100387 <cprintf>
c0108050:	83 c4 10             	add    $0x10,%esp
}
c0108053:	90                   	nop
c0108054:	c9                   	leave  
c0108055:	c3                   	ret    

c0108056 <check_pgdir>:

static void
check_pgdir(void) {
c0108056:	55                   	push   %ebp
c0108057:	89 e5                	mov    %esp,%ebp
c0108059:	83 ec 28             	sub    $0x28,%esp
    assert(npage <= KMEMSIZE / PGSIZE);
c010805c:	a1 80 1f 15 c0       	mov    0xc0151f80,%eax
c0108061:	3d 00 80 03 00       	cmp    $0x38000,%eax
c0108066:	76 19                	jbe    c0108081 <check_pgdir+0x2b>
c0108068:	68 cb 5d 11 c0       	push   $0xc0115dcb
c010806d:	68 f9 5c 11 c0       	push   $0xc0115cf9
c0108072:	68 89 02 00 00       	push   $0x289
c0108077:	68 d4 5c 11 c0       	push   $0xc0115cd4
c010807c:	e8 6c 84 ff ff       	call   c01004ed <__panic>
    assert(boot_pgdir != NULL && (uint32_t)PGOFF(boot_pgdir) == 0);
c0108081:	a1 20 ea 14 c0       	mov    0xc014ea20,%eax
c0108086:	85 c0                	test   %eax,%eax
c0108088:	74 0e                	je     c0108098 <check_pgdir+0x42>
c010808a:	a1 20 ea 14 c0       	mov    0xc014ea20,%eax
c010808f:	25 ff 0f 00 00       	and    $0xfff,%eax
c0108094:	85 c0                	test   %eax,%eax
c0108096:	74 19                	je     c01080b1 <check_pgdir+0x5b>
c0108098:	68 e8 5d 11 c0       	push   $0xc0115de8
c010809d:	68 f9 5c 11 c0       	push   $0xc0115cf9
c01080a2:	68 8a 02 00 00       	push   $0x28a
c01080a7:	68 d4 5c 11 c0       	push   $0xc0115cd4
c01080ac:	e8 3c 84 ff ff       	call   c01004ed <__panic>
    assert(get_page(boot_pgdir, 0x0, NULL) == NULL);
c01080b1:	a1 20 ea 14 c0       	mov    0xc014ea20,%eax
c01080b6:	83 ec 04             	sub    $0x4,%esp
c01080b9:	6a 00                	push   $0x0
c01080bb:	6a 00                	push   $0x0
c01080bd:	50                   	push   %eax
c01080be:	e8 19 f9 ff ff       	call   c01079dc <get_page>
c01080c3:	83 c4 10             	add    $0x10,%esp
c01080c6:	85 c0                	test   %eax,%eax
c01080c8:	74 19                	je     c01080e3 <check_pgdir+0x8d>
c01080ca:	68 20 5e 11 c0       	push   $0xc0115e20
c01080cf:	68 f9 5c 11 c0       	push   $0xc0115cf9
c01080d4:	68 8b 02 00 00       	push   $0x28b
c01080d9:	68 d4 5c 11 c0       	push   $0xc0115cd4
c01080de:	e8 0a 84 ff ff       	call   c01004ed <__panic>

    struct Page *p1, *p2;
    p1 = alloc_page();
c01080e3:	83 ec 0c             	sub    $0xc,%esp
c01080e6:	6a 01                	push   $0x1
c01080e8:	e8 3f f1 ff ff       	call   c010722c <alloc_pages>
c01080ed:	83 c4 10             	add    $0x10,%esp
c01080f0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(page_insert(boot_pgdir, p1, 0x0, 0) == 0);
c01080f3:	a1 20 ea 14 c0       	mov    0xc014ea20,%eax
c01080f8:	6a 00                	push   $0x0
c01080fa:	6a 00                	push   $0x0
c01080fc:	ff 75 f4             	pushl  -0xc(%ebp)
c01080ff:	50                   	push   %eax
c0108100:	e8 74 fd ff ff       	call   c0107e79 <page_insert>
c0108105:	83 c4 10             	add    $0x10,%esp
c0108108:	85 c0                	test   %eax,%eax
c010810a:	74 19                	je     c0108125 <check_pgdir+0xcf>
c010810c:	68 48 5e 11 c0       	push   $0xc0115e48
c0108111:	68 f9 5c 11 c0       	push   $0xc0115cf9
c0108116:	68 8f 02 00 00       	push   $0x28f
c010811b:	68 d4 5c 11 c0       	push   $0xc0115cd4
c0108120:	e8 c8 83 ff ff       	call   c01004ed <__panic>

    pte_t *ptep;
    assert((ptep = get_pte(boot_pgdir, 0x0, 0)) != NULL);
c0108125:	a1 20 ea 14 c0       	mov    0xc014ea20,%eax
c010812a:	83 ec 04             	sub    $0x4,%esp
c010812d:	6a 00                	push   $0x0
c010812f:	6a 00                	push   $0x0
c0108131:	50                   	push   %eax
c0108132:	e8 61 f7 ff ff       	call   c0107898 <get_pte>
c0108137:	83 c4 10             	add    $0x10,%esp
c010813a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010813d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0108141:	75 19                	jne    c010815c <check_pgdir+0x106>
c0108143:	68 74 5e 11 c0       	push   $0xc0115e74
c0108148:	68 f9 5c 11 c0       	push   $0xc0115cf9
c010814d:	68 92 02 00 00       	push   $0x292
c0108152:	68 d4 5c 11 c0       	push   $0xc0115cd4
c0108157:	e8 91 83 ff ff       	call   c01004ed <__panic>
    assert(pte2page(*ptep) == p1);
c010815c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010815f:	8b 00                	mov    (%eax),%eax
c0108161:	83 ec 0c             	sub    $0xc,%esp
c0108164:	50                   	push   %eax
c0108165:	e8 5e ee ff ff       	call   c0106fc8 <pte2page>
c010816a:	83 c4 10             	add    $0x10,%esp
c010816d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0108170:	74 19                	je     c010818b <check_pgdir+0x135>
c0108172:	68 a1 5e 11 c0       	push   $0xc0115ea1
c0108177:	68 f9 5c 11 c0       	push   $0xc0115cf9
c010817c:	68 93 02 00 00       	push   $0x293
c0108181:	68 d4 5c 11 c0       	push   $0xc0115cd4
c0108186:	e8 62 83 ff ff       	call   c01004ed <__panic>
    assert(page_ref(p1) == 1);
c010818b:	83 ec 0c             	sub    $0xc,%esp
c010818e:	ff 75 f4             	pushl  -0xc(%ebp)
c0108191:	e8 88 ee ff ff       	call   c010701e <page_ref>
c0108196:	83 c4 10             	add    $0x10,%esp
c0108199:	83 f8 01             	cmp    $0x1,%eax
c010819c:	74 19                	je     c01081b7 <check_pgdir+0x161>
c010819e:	68 b7 5e 11 c0       	push   $0xc0115eb7
c01081a3:	68 f9 5c 11 c0       	push   $0xc0115cf9
c01081a8:	68 94 02 00 00       	push   $0x294
c01081ad:	68 d4 5c 11 c0       	push   $0xc0115cd4
c01081b2:	e8 36 83 ff ff       	call   c01004ed <__panic>

    ptep = &((pte_t *)KADDR(PDE_ADDR(boot_pgdir[0])))[1];
c01081b7:	a1 20 ea 14 c0       	mov    0xc014ea20,%eax
c01081bc:	8b 00                	mov    (%eax),%eax
c01081be:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01081c3:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01081c6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01081c9:	c1 e8 0c             	shr    $0xc,%eax
c01081cc:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01081cf:	a1 80 1f 15 c0       	mov    0xc0151f80,%eax
c01081d4:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c01081d7:	72 17                	jb     c01081f0 <check_pgdir+0x19a>
c01081d9:	ff 75 ec             	pushl  -0x14(%ebp)
c01081dc:	68 0c 5c 11 c0       	push   $0xc0115c0c
c01081e1:	68 96 02 00 00       	push   $0x296
c01081e6:	68 d4 5c 11 c0       	push   $0xc0115cd4
c01081eb:	e8 fd 82 ff ff       	call   c01004ed <__panic>
c01081f0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01081f3:	2d 00 00 00 40       	sub    $0x40000000,%eax
c01081f8:	83 c0 04             	add    $0x4,%eax
c01081fb:	89 45 f0             	mov    %eax,-0x10(%ebp)
    assert(get_pte(boot_pgdir, PGSIZE, 0) == ptep);
c01081fe:	a1 20 ea 14 c0       	mov    0xc014ea20,%eax
c0108203:	83 ec 04             	sub    $0x4,%esp
c0108206:	6a 00                	push   $0x0
c0108208:	68 00 10 00 00       	push   $0x1000
c010820d:	50                   	push   %eax
c010820e:	e8 85 f6 ff ff       	call   c0107898 <get_pte>
c0108213:	83 c4 10             	add    $0x10,%esp
c0108216:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0108219:	74 19                	je     c0108234 <check_pgdir+0x1de>
c010821b:	68 cc 5e 11 c0       	push   $0xc0115ecc
c0108220:	68 f9 5c 11 c0       	push   $0xc0115cf9
c0108225:	68 97 02 00 00       	push   $0x297
c010822a:	68 d4 5c 11 c0       	push   $0xc0115cd4
c010822f:	e8 b9 82 ff ff       	call   c01004ed <__panic>

    p2 = alloc_page();
c0108234:	83 ec 0c             	sub    $0xc,%esp
c0108237:	6a 01                	push   $0x1
c0108239:	e8 ee ef ff ff       	call   c010722c <alloc_pages>
c010823e:	83 c4 10             	add    $0x10,%esp
c0108241:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(page_insert(boot_pgdir, p2, PGSIZE, PTE_U | PTE_W) == 0);
c0108244:	a1 20 ea 14 c0       	mov    0xc014ea20,%eax
c0108249:	6a 06                	push   $0x6
c010824b:	68 00 10 00 00       	push   $0x1000
c0108250:	ff 75 e4             	pushl  -0x1c(%ebp)
c0108253:	50                   	push   %eax
c0108254:	e8 20 fc ff ff       	call   c0107e79 <page_insert>
c0108259:	83 c4 10             	add    $0x10,%esp
c010825c:	85 c0                	test   %eax,%eax
c010825e:	74 19                	je     c0108279 <check_pgdir+0x223>
c0108260:	68 f4 5e 11 c0       	push   $0xc0115ef4
c0108265:	68 f9 5c 11 c0       	push   $0xc0115cf9
c010826a:	68 9a 02 00 00       	push   $0x29a
c010826f:	68 d4 5c 11 c0       	push   $0xc0115cd4
c0108274:	e8 74 82 ff ff       	call   c01004ed <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c0108279:	a1 20 ea 14 c0       	mov    0xc014ea20,%eax
c010827e:	83 ec 04             	sub    $0x4,%esp
c0108281:	6a 00                	push   $0x0
c0108283:	68 00 10 00 00       	push   $0x1000
c0108288:	50                   	push   %eax
c0108289:	e8 0a f6 ff ff       	call   c0107898 <get_pte>
c010828e:	83 c4 10             	add    $0x10,%esp
c0108291:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108294:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0108298:	75 19                	jne    c01082b3 <check_pgdir+0x25d>
c010829a:	68 2c 5f 11 c0       	push   $0xc0115f2c
c010829f:	68 f9 5c 11 c0       	push   $0xc0115cf9
c01082a4:	68 9b 02 00 00       	push   $0x29b
c01082a9:	68 d4 5c 11 c0       	push   $0xc0115cd4
c01082ae:	e8 3a 82 ff ff       	call   c01004ed <__panic>
    assert(*ptep & PTE_U);
c01082b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01082b6:	8b 00                	mov    (%eax),%eax
c01082b8:	83 e0 04             	and    $0x4,%eax
c01082bb:	85 c0                	test   %eax,%eax
c01082bd:	75 19                	jne    c01082d8 <check_pgdir+0x282>
c01082bf:	68 5c 5f 11 c0       	push   $0xc0115f5c
c01082c4:	68 f9 5c 11 c0       	push   $0xc0115cf9
c01082c9:	68 9c 02 00 00       	push   $0x29c
c01082ce:	68 d4 5c 11 c0       	push   $0xc0115cd4
c01082d3:	e8 15 82 ff ff       	call   c01004ed <__panic>
    assert(*ptep & PTE_W);
c01082d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01082db:	8b 00                	mov    (%eax),%eax
c01082dd:	83 e0 02             	and    $0x2,%eax
c01082e0:	85 c0                	test   %eax,%eax
c01082e2:	75 19                	jne    c01082fd <check_pgdir+0x2a7>
c01082e4:	68 6a 5f 11 c0       	push   $0xc0115f6a
c01082e9:	68 f9 5c 11 c0       	push   $0xc0115cf9
c01082ee:	68 9d 02 00 00       	push   $0x29d
c01082f3:	68 d4 5c 11 c0       	push   $0xc0115cd4
c01082f8:	e8 f0 81 ff ff       	call   c01004ed <__panic>
    assert(boot_pgdir[0] & PTE_U);
c01082fd:	a1 20 ea 14 c0       	mov    0xc014ea20,%eax
c0108302:	8b 00                	mov    (%eax),%eax
c0108304:	83 e0 04             	and    $0x4,%eax
c0108307:	85 c0                	test   %eax,%eax
c0108309:	75 19                	jne    c0108324 <check_pgdir+0x2ce>
c010830b:	68 78 5f 11 c0       	push   $0xc0115f78
c0108310:	68 f9 5c 11 c0       	push   $0xc0115cf9
c0108315:	68 9e 02 00 00       	push   $0x29e
c010831a:	68 d4 5c 11 c0       	push   $0xc0115cd4
c010831f:	e8 c9 81 ff ff       	call   c01004ed <__panic>
    assert(page_ref(p2) == 1);
c0108324:	83 ec 0c             	sub    $0xc,%esp
c0108327:	ff 75 e4             	pushl  -0x1c(%ebp)
c010832a:	e8 ef ec ff ff       	call   c010701e <page_ref>
c010832f:	83 c4 10             	add    $0x10,%esp
c0108332:	83 f8 01             	cmp    $0x1,%eax
c0108335:	74 19                	je     c0108350 <check_pgdir+0x2fa>
c0108337:	68 8e 5f 11 c0       	push   $0xc0115f8e
c010833c:	68 f9 5c 11 c0       	push   $0xc0115cf9
c0108341:	68 9f 02 00 00       	push   $0x29f
c0108346:	68 d4 5c 11 c0       	push   $0xc0115cd4
c010834b:	e8 9d 81 ff ff       	call   c01004ed <__panic>

    assert(page_insert(boot_pgdir, p1, PGSIZE, 0) == 0);
c0108350:	a1 20 ea 14 c0       	mov    0xc014ea20,%eax
c0108355:	6a 00                	push   $0x0
c0108357:	68 00 10 00 00       	push   $0x1000
c010835c:	ff 75 f4             	pushl  -0xc(%ebp)
c010835f:	50                   	push   %eax
c0108360:	e8 14 fb ff ff       	call   c0107e79 <page_insert>
c0108365:	83 c4 10             	add    $0x10,%esp
c0108368:	85 c0                	test   %eax,%eax
c010836a:	74 19                	je     c0108385 <check_pgdir+0x32f>
c010836c:	68 a0 5f 11 c0       	push   $0xc0115fa0
c0108371:	68 f9 5c 11 c0       	push   $0xc0115cf9
c0108376:	68 a1 02 00 00       	push   $0x2a1
c010837b:	68 d4 5c 11 c0       	push   $0xc0115cd4
c0108380:	e8 68 81 ff ff       	call   c01004ed <__panic>
    assert(page_ref(p1) == 2);
c0108385:	83 ec 0c             	sub    $0xc,%esp
c0108388:	ff 75 f4             	pushl  -0xc(%ebp)
c010838b:	e8 8e ec ff ff       	call   c010701e <page_ref>
c0108390:	83 c4 10             	add    $0x10,%esp
c0108393:	83 f8 02             	cmp    $0x2,%eax
c0108396:	74 19                	je     c01083b1 <check_pgdir+0x35b>
c0108398:	68 cc 5f 11 c0       	push   $0xc0115fcc
c010839d:	68 f9 5c 11 c0       	push   $0xc0115cf9
c01083a2:	68 a2 02 00 00       	push   $0x2a2
c01083a7:	68 d4 5c 11 c0       	push   $0xc0115cd4
c01083ac:	e8 3c 81 ff ff       	call   c01004ed <__panic>
    assert(page_ref(p2) == 0);
c01083b1:	83 ec 0c             	sub    $0xc,%esp
c01083b4:	ff 75 e4             	pushl  -0x1c(%ebp)
c01083b7:	e8 62 ec ff ff       	call   c010701e <page_ref>
c01083bc:	83 c4 10             	add    $0x10,%esp
c01083bf:	85 c0                	test   %eax,%eax
c01083c1:	74 19                	je     c01083dc <check_pgdir+0x386>
c01083c3:	68 de 5f 11 c0       	push   $0xc0115fde
c01083c8:	68 f9 5c 11 c0       	push   $0xc0115cf9
c01083cd:	68 a3 02 00 00       	push   $0x2a3
c01083d2:	68 d4 5c 11 c0       	push   $0xc0115cd4
c01083d7:	e8 11 81 ff ff       	call   c01004ed <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c01083dc:	a1 20 ea 14 c0       	mov    0xc014ea20,%eax
c01083e1:	83 ec 04             	sub    $0x4,%esp
c01083e4:	6a 00                	push   $0x0
c01083e6:	68 00 10 00 00       	push   $0x1000
c01083eb:	50                   	push   %eax
c01083ec:	e8 a7 f4 ff ff       	call   c0107898 <get_pte>
c01083f1:	83 c4 10             	add    $0x10,%esp
c01083f4:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01083f7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01083fb:	75 19                	jne    c0108416 <check_pgdir+0x3c0>
c01083fd:	68 2c 5f 11 c0       	push   $0xc0115f2c
c0108402:	68 f9 5c 11 c0       	push   $0xc0115cf9
c0108407:	68 a4 02 00 00       	push   $0x2a4
c010840c:	68 d4 5c 11 c0       	push   $0xc0115cd4
c0108411:	e8 d7 80 ff ff       	call   c01004ed <__panic>
    assert(pte2page(*ptep) == p1);
c0108416:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108419:	8b 00                	mov    (%eax),%eax
c010841b:	83 ec 0c             	sub    $0xc,%esp
c010841e:	50                   	push   %eax
c010841f:	e8 a4 eb ff ff       	call   c0106fc8 <pte2page>
c0108424:	83 c4 10             	add    $0x10,%esp
c0108427:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010842a:	74 19                	je     c0108445 <check_pgdir+0x3ef>
c010842c:	68 a1 5e 11 c0       	push   $0xc0115ea1
c0108431:	68 f9 5c 11 c0       	push   $0xc0115cf9
c0108436:	68 a5 02 00 00       	push   $0x2a5
c010843b:	68 d4 5c 11 c0       	push   $0xc0115cd4
c0108440:	e8 a8 80 ff ff       	call   c01004ed <__panic>
    assert((*ptep & PTE_U) == 0);
c0108445:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108448:	8b 00                	mov    (%eax),%eax
c010844a:	83 e0 04             	and    $0x4,%eax
c010844d:	85 c0                	test   %eax,%eax
c010844f:	74 19                	je     c010846a <check_pgdir+0x414>
c0108451:	68 f0 5f 11 c0       	push   $0xc0115ff0
c0108456:	68 f9 5c 11 c0       	push   $0xc0115cf9
c010845b:	68 a6 02 00 00       	push   $0x2a6
c0108460:	68 d4 5c 11 c0       	push   $0xc0115cd4
c0108465:	e8 83 80 ff ff       	call   c01004ed <__panic>

    page_remove(boot_pgdir, 0x0);
c010846a:	a1 20 ea 14 c0       	mov    0xc014ea20,%eax
c010846f:	83 ec 08             	sub    $0x8,%esp
c0108472:	6a 00                	push   $0x0
c0108474:	50                   	push   %eax
c0108475:	e8 c6 f9 ff ff       	call   c0107e40 <page_remove>
c010847a:	83 c4 10             	add    $0x10,%esp
    assert(page_ref(p1) == 1);
c010847d:	83 ec 0c             	sub    $0xc,%esp
c0108480:	ff 75 f4             	pushl  -0xc(%ebp)
c0108483:	e8 96 eb ff ff       	call   c010701e <page_ref>
c0108488:	83 c4 10             	add    $0x10,%esp
c010848b:	83 f8 01             	cmp    $0x1,%eax
c010848e:	74 19                	je     c01084a9 <check_pgdir+0x453>
c0108490:	68 b7 5e 11 c0       	push   $0xc0115eb7
c0108495:	68 f9 5c 11 c0       	push   $0xc0115cf9
c010849a:	68 a9 02 00 00       	push   $0x2a9
c010849f:	68 d4 5c 11 c0       	push   $0xc0115cd4
c01084a4:	e8 44 80 ff ff       	call   c01004ed <__panic>
    assert(page_ref(p2) == 0);
c01084a9:	83 ec 0c             	sub    $0xc,%esp
c01084ac:	ff 75 e4             	pushl  -0x1c(%ebp)
c01084af:	e8 6a eb ff ff       	call   c010701e <page_ref>
c01084b4:	83 c4 10             	add    $0x10,%esp
c01084b7:	85 c0                	test   %eax,%eax
c01084b9:	74 19                	je     c01084d4 <check_pgdir+0x47e>
c01084bb:	68 de 5f 11 c0       	push   $0xc0115fde
c01084c0:	68 f9 5c 11 c0       	push   $0xc0115cf9
c01084c5:	68 aa 02 00 00       	push   $0x2aa
c01084ca:	68 d4 5c 11 c0       	push   $0xc0115cd4
c01084cf:	e8 19 80 ff ff       	call   c01004ed <__panic>

    page_remove(boot_pgdir, PGSIZE);
c01084d4:	a1 20 ea 14 c0       	mov    0xc014ea20,%eax
c01084d9:	83 ec 08             	sub    $0x8,%esp
c01084dc:	68 00 10 00 00       	push   $0x1000
c01084e1:	50                   	push   %eax
c01084e2:	e8 59 f9 ff ff       	call   c0107e40 <page_remove>
c01084e7:	83 c4 10             	add    $0x10,%esp
    assert(page_ref(p1) == 0);
c01084ea:	83 ec 0c             	sub    $0xc,%esp
c01084ed:	ff 75 f4             	pushl  -0xc(%ebp)
c01084f0:	e8 29 eb ff ff       	call   c010701e <page_ref>
c01084f5:	83 c4 10             	add    $0x10,%esp
c01084f8:	85 c0                	test   %eax,%eax
c01084fa:	74 19                	je     c0108515 <check_pgdir+0x4bf>
c01084fc:	68 05 60 11 c0       	push   $0xc0116005
c0108501:	68 f9 5c 11 c0       	push   $0xc0115cf9
c0108506:	68 ad 02 00 00       	push   $0x2ad
c010850b:	68 d4 5c 11 c0       	push   $0xc0115cd4
c0108510:	e8 d8 7f ff ff       	call   c01004ed <__panic>
    assert(page_ref(p2) == 0);
c0108515:	83 ec 0c             	sub    $0xc,%esp
c0108518:	ff 75 e4             	pushl  -0x1c(%ebp)
c010851b:	e8 fe ea ff ff       	call   c010701e <page_ref>
c0108520:	83 c4 10             	add    $0x10,%esp
c0108523:	85 c0                	test   %eax,%eax
c0108525:	74 19                	je     c0108540 <check_pgdir+0x4ea>
c0108527:	68 de 5f 11 c0       	push   $0xc0115fde
c010852c:	68 f9 5c 11 c0       	push   $0xc0115cf9
c0108531:	68 ae 02 00 00       	push   $0x2ae
c0108536:	68 d4 5c 11 c0       	push   $0xc0115cd4
c010853b:	e8 ad 7f ff ff       	call   c01004ed <__panic>

    assert(page_ref(pde2page(boot_pgdir[0])) == 1);
c0108540:	a1 20 ea 14 c0       	mov    0xc014ea20,%eax
c0108545:	8b 00                	mov    (%eax),%eax
c0108547:	83 ec 0c             	sub    $0xc,%esp
c010854a:	50                   	push   %eax
c010854b:	e8 b2 ea ff ff       	call   c0107002 <pde2page>
c0108550:	83 c4 10             	add    $0x10,%esp
c0108553:	83 ec 0c             	sub    $0xc,%esp
c0108556:	50                   	push   %eax
c0108557:	e8 c2 ea ff ff       	call   c010701e <page_ref>
c010855c:	83 c4 10             	add    $0x10,%esp
c010855f:	83 f8 01             	cmp    $0x1,%eax
c0108562:	74 19                	je     c010857d <check_pgdir+0x527>
c0108564:	68 18 60 11 c0       	push   $0xc0116018
c0108569:	68 f9 5c 11 c0       	push   $0xc0115cf9
c010856e:	68 b0 02 00 00       	push   $0x2b0
c0108573:	68 d4 5c 11 c0       	push   $0xc0115cd4
c0108578:	e8 70 7f ff ff       	call   c01004ed <__panic>
    free_page(pde2page(boot_pgdir[0]));
c010857d:	a1 20 ea 14 c0       	mov    0xc014ea20,%eax
c0108582:	8b 00                	mov    (%eax),%eax
c0108584:	83 ec 0c             	sub    $0xc,%esp
c0108587:	50                   	push   %eax
c0108588:	e8 75 ea ff ff       	call   c0107002 <pde2page>
c010858d:	83 c4 10             	add    $0x10,%esp
c0108590:	83 ec 08             	sub    $0x8,%esp
c0108593:	6a 01                	push   $0x1
c0108595:	50                   	push   %eax
c0108596:	e8 fd ec ff ff       	call   c0107298 <free_pages>
c010859b:	83 c4 10             	add    $0x10,%esp
    boot_pgdir[0] = 0;
c010859e:	a1 20 ea 14 c0       	mov    0xc014ea20,%eax
c01085a3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    cprintf("check_pgdir() succeeded!\n");
c01085a9:	83 ec 0c             	sub    $0xc,%esp
c01085ac:	68 3f 60 11 c0       	push   $0xc011603f
c01085b1:	e8 d1 7d ff ff       	call   c0100387 <cprintf>
c01085b6:	83 c4 10             	add    $0x10,%esp
}
c01085b9:	90                   	nop
c01085ba:	c9                   	leave  
c01085bb:	c3                   	ret    

c01085bc <check_boot_pgdir>:

static void
check_boot_pgdir(void) {
c01085bc:	55                   	push   %ebp
c01085bd:	89 e5                	mov    %esp,%ebp
c01085bf:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
c01085c2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01085c9:	e9 a3 00 00 00       	jmp    c0108671 <check_boot_pgdir+0xb5>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
c01085ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01085d1:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01085d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01085d7:	c1 e8 0c             	shr    $0xc,%eax
c01085da:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01085dd:	a1 80 1f 15 c0       	mov    0xc0151f80,%eax
c01085e2:	39 45 ec             	cmp    %eax,-0x14(%ebp)
c01085e5:	72 17                	jb     c01085fe <check_boot_pgdir+0x42>
c01085e7:	ff 75 f0             	pushl  -0x10(%ebp)
c01085ea:	68 0c 5c 11 c0       	push   $0xc0115c0c
c01085ef:	68 bc 02 00 00       	push   $0x2bc
c01085f4:	68 d4 5c 11 c0       	push   $0xc0115cd4
c01085f9:	e8 ef 7e ff ff       	call   c01004ed <__panic>
c01085fe:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108601:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0108606:	89 c2                	mov    %eax,%edx
c0108608:	a1 20 ea 14 c0       	mov    0xc014ea20,%eax
c010860d:	83 ec 04             	sub    $0x4,%esp
c0108610:	6a 00                	push   $0x0
c0108612:	52                   	push   %edx
c0108613:	50                   	push   %eax
c0108614:	e8 7f f2 ff ff       	call   c0107898 <get_pte>
c0108619:	83 c4 10             	add    $0x10,%esp
c010861c:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010861f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0108623:	75 19                	jne    c010863e <check_boot_pgdir+0x82>
c0108625:	68 5c 60 11 c0       	push   $0xc011605c
c010862a:	68 f9 5c 11 c0       	push   $0xc0115cf9
c010862f:	68 bc 02 00 00       	push   $0x2bc
c0108634:	68 d4 5c 11 c0       	push   $0xc0115cd4
c0108639:	e8 af 7e ff ff       	call   c01004ed <__panic>
        assert(PTE_ADDR(*ptep) == i);
c010863e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108641:	8b 00                	mov    (%eax),%eax
c0108643:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0108648:	89 c2                	mov    %eax,%edx
c010864a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010864d:	39 c2                	cmp    %eax,%edx
c010864f:	74 19                	je     c010866a <check_boot_pgdir+0xae>
c0108651:	68 99 60 11 c0       	push   $0xc0116099
c0108656:	68 f9 5c 11 c0       	push   $0xc0115cf9
c010865b:	68 bd 02 00 00       	push   $0x2bd
c0108660:	68 d4 5c 11 c0       	push   $0xc0115cd4
c0108665:	e8 83 7e ff ff       	call   c01004ed <__panic>

static void
check_boot_pgdir(void) {
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
c010866a:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
c0108671:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108674:	a1 80 1f 15 c0       	mov    0xc0151f80,%eax
c0108679:	39 c2                	cmp    %eax,%edx
c010867b:	0f 82 4d ff ff ff    	jb     c01085ce <check_boot_pgdir+0x12>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
        assert(PTE_ADDR(*ptep) == i);
    }

    assert(PDE_ADDR(boot_pgdir[PDX(VPT)]) == PADDR(boot_pgdir));
c0108681:	a1 20 ea 14 c0       	mov    0xc014ea20,%eax
c0108686:	05 ac 0f 00 00       	add    $0xfac,%eax
c010868b:	8b 00                	mov    (%eax),%eax
c010868d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0108692:	89 c2                	mov    %eax,%edx
c0108694:	a1 20 ea 14 c0       	mov    0xc014ea20,%eax
c0108699:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010869c:	81 7d e4 ff ff ff bf 	cmpl   $0xbfffffff,-0x1c(%ebp)
c01086a3:	77 17                	ja     c01086bc <check_boot_pgdir+0x100>
c01086a5:	ff 75 e4             	pushl  -0x1c(%ebp)
c01086a8:	68 b0 5c 11 c0       	push   $0xc0115cb0
c01086ad:	68 c0 02 00 00       	push   $0x2c0
c01086b2:	68 d4 5c 11 c0       	push   $0xc0115cd4
c01086b7:	e8 31 7e ff ff       	call   c01004ed <__panic>
c01086bc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01086bf:	05 00 00 00 40       	add    $0x40000000,%eax
c01086c4:	39 c2                	cmp    %eax,%edx
c01086c6:	74 19                	je     c01086e1 <check_boot_pgdir+0x125>
c01086c8:	68 b0 60 11 c0       	push   $0xc01160b0
c01086cd:	68 f9 5c 11 c0       	push   $0xc0115cf9
c01086d2:	68 c0 02 00 00       	push   $0x2c0
c01086d7:	68 d4 5c 11 c0       	push   $0xc0115cd4
c01086dc:	e8 0c 7e ff ff       	call   c01004ed <__panic>

    assert(boot_pgdir[0] == 0);
c01086e1:	a1 20 ea 14 c0       	mov    0xc014ea20,%eax
c01086e6:	8b 00                	mov    (%eax),%eax
c01086e8:	85 c0                	test   %eax,%eax
c01086ea:	74 19                	je     c0108705 <check_boot_pgdir+0x149>
c01086ec:	68 e4 60 11 c0       	push   $0xc01160e4
c01086f1:	68 f9 5c 11 c0       	push   $0xc0115cf9
c01086f6:	68 c2 02 00 00       	push   $0x2c2
c01086fb:	68 d4 5c 11 c0       	push   $0xc0115cd4
c0108700:	e8 e8 7d ff ff       	call   c01004ed <__panic>

    struct Page *p;
    p = alloc_page();
c0108705:	83 ec 0c             	sub    $0xc,%esp
c0108708:	6a 01                	push   $0x1
c010870a:	e8 1d eb ff ff       	call   c010722c <alloc_pages>
c010870f:	83 c4 10             	add    $0x10,%esp
c0108712:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(page_insert(boot_pgdir, p, 0x100, PTE_W) == 0);
c0108715:	a1 20 ea 14 c0       	mov    0xc014ea20,%eax
c010871a:	6a 02                	push   $0x2
c010871c:	68 00 01 00 00       	push   $0x100
c0108721:	ff 75 e0             	pushl  -0x20(%ebp)
c0108724:	50                   	push   %eax
c0108725:	e8 4f f7 ff ff       	call   c0107e79 <page_insert>
c010872a:	83 c4 10             	add    $0x10,%esp
c010872d:	85 c0                	test   %eax,%eax
c010872f:	74 19                	je     c010874a <check_boot_pgdir+0x18e>
c0108731:	68 f8 60 11 c0       	push   $0xc01160f8
c0108736:	68 f9 5c 11 c0       	push   $0xc0115cf9
c010873b:	68 c6 02 00 00       	push   $0x2c6
c0108740:	68 d4 5c 11 c0       	push   $0xc0115cd4
c0108745:	e8 a3 7d ff ff       	call   c01004ed <__panic>
    assert(page_ref(p) == 1);
c010874a:	83 ec 0c             	sub    $0xc,%esp
c010874d:	ff 75 e0             	pushl  -0x20(%ebp)
c0108750:	e8 c9 e8 ff ff       	call   c010701e <page_ref>
c0108755:	83 c4 10             	add    $0x10,%esp
c0108758:	83 f8 01             	cmp    $0x1,%eax
c010875b:	74 19                	je     c0108776 <check_boot_pgdir+0x1ba>
c010875d:	68 26 61 11 c0       	push   $0xc0116126
c0108762:	68 f9 5c 11 c0       	push   $0xc0115cf9
c0108767:	68 c7 02 00 00       	push   $0x2c7
c010876c:	68 d4 5c 11 c0       	push   $0xc0115cd4
c0108771:	e8 77 7d ff ff       	call   c01004ed <__panic>
    assert(page_insert(boot_pgdir, p, 0x100 + PGSIZE, PTE_W) == 0);
c0108776:	a1 20 ea 14 c0       	mov    0xc014ea20,%eax
c010877b:	6a 02                	push   $0x2
c010877d:	68 00 11 00 00       	push   $0x1100
c0108782:	ff 75 e0             	pushl  -0x20(%ebp)
c0108785:	50                   	push   %eax
c0108786:	e8 ee f6 ff ff       	call   c0107e79 <page_insert>
c010878b:	83 c4 10             	add    $0x10,%esp
c010878e:	85 c0                	test   %eax,%eax
c0108790:	74 19                	je     c01087ab <check_boot_pgdir+0x1ef>
c0108792:	68 38 61 11 c0       	push   $0xc0116138
c0108797:	68 f9 5c 11 c0       	push   $0xc0115cf9
c010879c:	68 c8 02 00 00       	push   $0x2c8
c01087a1:	68 d4 5c 11 c0       	push   $0xc0115cd4
c01087a6:	e8 42 7d ff ff       	call   c01004ed <__panic>
    assert(page_ref(p) == 2);
c01087ab:	83 ec 0c             	sub    $0xc,%esp
c01087ae:	ff 75 e0             	pushl  -0x20(%ebp)
c01087b1:	e8 68 e8 ff ff       	call   c010701e <page_ref>
c01087b6:	83 c4 10             	add    $0x10,%esp
c01087b9:	83 f8 02             	cmp    $0x2,%eax
c01087bc:	74 19                	je     c01087d7 <check_boot_pgdir+0x21b>
c01087be:	68 6f 61 11 c0       	push   $0xc011616f
c01087c3:	68 f9 5c 11 c0       	push   $0xc0115cf9
c01087c8:	68 c9 02 00 00       	push   $0x2c9
c01087cd:	68 d4 5c 11 c0       	push   $0xc0115cd4
c01087d2:	e8 16 7d ff ff       	call   c01004ed <__panic>

    const char *str = "ucore: Hello world!!";
c01087d7:	c7 45 dc 80 61 11 c0 	movl   $0xc0116180,-0x24(%ebp)
    strcpy((void *)0x100, str);
c01087de:	83 ec 08             	sub    $0x8,%esp
c01087e1:	ff 75 dc             	pushl  -0x24(%ebp)
c01087e4:	68 00 01 00 00       	push   $0x100
c01087e9:	e8 9b af 00 00       	call   c0113789 <strcpy>
c01087ee:	83 c4 10             	add    $0x10,%esp
    assert(strcmp((void *)0x100, (void *)(0x100 + PGSIZE)) == 0);
c01087f1:	83 ec 08             	sub    $0x8,%esp
c01087f4:	68 00 11 00 00       	push   $0x1100
c01087f9:	68 00 01 00 00       	push   $0x100
c01087fe:	e8 00 b0 00 00       	call   c0113803 <strcmp>
c0108803:	83 c4 10             	add    $0x10,%esp
c0108806:	85 c0                	test   %eax,%eax
c0108808:	74 19                	je     c0108823 <check_boot_pgdir+0x267>
c010880a:	68 98 61 11 c0       	push   $0xc0116198
c010880f:	68 f9 5c 11 c0       	push   $0xc0115cf9
c0108814:	68 cd 02 00 00       	push   $0x2cd
c0108819:	68 d4 5c 11 c0       	push   $0xc0115cd4
c010881e:	e8 ca 7c ff ff       	call   c01004ed <__panic>

    *(char *)(page2kva(p) + 0x100) = '\0';
c0108823:	83 ec 0c             	sub    $0xc,%esp
c0108826:	ff 75 e0             	pushl  -0x20(%ebp)
c0108829:	e8 55 e7 ff ff       	call   c0106f83 <page2kva>
c010882e:	83 c4 10             	add    $0x10,%esp
c0108831:	05 00 01 00 00       	add    $0x100,%eax
c0108836:	c6 00 00             	movb   $0x0,(%eax)
    assert(strlen((const char *)0x100) == 0);
c0108839:	83 ec 0c             	sub    $0xc,%esp
c010883c:	68 00 01 00 00       	push   $0x100
c0108841:	e8 c2 ae 00 00       	call   c0113708 <strlen>
c0108846:	83 c4 10             	add    $0x10,%esp
c0108849:	85 c0                	test   %eax,%eax
c010884b:	74 19                	je     c0108866 <check_boot_pgdir+0x2aa>
c010884d:	68 d0 61 11 c0       	push   $0xc01161d0
c0108852:	68 f9 5c 11 c0       	push   $0xc0115cf9
c0108857:	68 d0 02 00 00       	push   $0x2d0
c010885c:	68 d4 5c 11 c0       	push   $0xc0115cd4
c0108861:	e8 87 7c ff ff       	call   c01004ed <__panic>

    free_page(p);
c0108866:	83 ec 08             	sub    $0x8,%esp
c0108869:	6a 01                	push   $0x1
c010886b:	ff 75 e0             	pushl  -0x20(%ebp)
c010886e:	e8 25 ea ff ff       	call   c0107298 <free_pages>
c0108873:	83 c4 10             	add    $0x10,%esp
    free_page(pde2page(boot_pgdir[0]));
c0108876:	a1 20 ea 14 c0       	mov    0xc014ea20,%eax
c010887b:	8b 00                	mov    (%eax),%eax
c010887d:	83 ec 0c             	sub    $0xc,%esp
c0108880:	50                   	push   %eax
c0108881:	e8 7c e7 ff ff       	call   c0107002 <pde2page>
c0108886:	83 c4 10             	add    $0x10,%esp
c0108889:	83 ec 08             	sub    $0x8,%esp
c010888c:	6a 01                	push   $0x1
c010888e:	50                   	push   %eax
c010888f:	e8 04 ea ff ff       	call   c0107298 <free_pages>
c0108894:	83 c4 10             	add    $0x10,%esp
    boot_pgdir[0] = 0;
c0108897:	a1 20 ea 14 c0       	mov    0xc014ea20,%eax
c010889c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    cprintf("check_boot_pgdir() succeeded!\n");
c01088a2:	83 ec 0c             	sub    $0xc,%esp
c01088a5:	68 f4 61 11 c0       	push   $0xc01161f4
c01088aa:	e8 d8 7a ff ff       	call   c0100387 <cprintf>
c01088af:	83 c4 10             	add    $0x10,%esp
}
c01088b2:	90                   	nop
c01088b3:	c9                   	leave  
c01088b4:	c3                   	ret    

c01088b5 <perm2str>:

//perm2str - use string 'u,r,w,-' to present the permission
static const char *
perm2str(int perm) {
c01088b5:	55                   	push   %ebp
c01088b6:	89 e5                	mov    %esp,%ebp
    static char str[4];
    str[0] = (perm & PTE_U) ? 'u' : '-';
c01088b8:	8b 45 08             	mov    0x8(%ebp),%eax
c01088bb:	83 e0 04             	and    $0x4,%eax
c01088be:	85 c0                	test   %eax,%eax
c01088c0:	74 07                	je     c01088c9 <perm2str+0x14>
c01088c2:	b8 75 00 00 00       	mov    $0x75,%eax
c01088c7:	eb 05                	jmp    c01088ce <perm2str+0x19>
c01088c9:	b8 2d 00 00 00       	mov    $0x2d,%eax
c01088ce:	a2 08 20 15 c0       	mov    %al,0xc0152008
    str[1] = 'r';
c01088d3:	c6 05 09 20 15 c0 72 	movb   $0x72,0xc0152009
    str[2] = (perm & PTE_W) ? 'w' : '-';
c01088da:	8b 45 08             	mov    0x8(%ebp),%eax
c01088dd:	83 e0 02             	and    $0x2,%eax
c01088e0:	85 c0                	test   %eax,%eax
c01088e2:	74 07                	je     c01088eb <perm2str+0x36>
c01088e4:	b8 77 00 00 00       	mov    $0x77,%eax
c01088e9:	eb 05                	jmp    c01088f0 <perm2str+0x3b>
c01088eb:	b8 2d 00 00 00       	mov    $0x2d,%eax
c01088f0:	a2 0a 20 15 c0       	mov    %al,0xc015200a
    str[3] = '\0';
c01088f5:	c6 05 0b 20 15 c0 00 	movb   $0x0,0xc015200b
    return str;
c01088fc:	b8 08 20 15 c0       	mov    $0xc0152008,%eax
}
c0108901:	5d                   	pop    %ebp
c0108902:	c3                   	ret    

c0108903 <get_pgtable_items>:
//  table:       the beginning addr of table
//  left_store:  the pointer of the high side of table's next range
//  right_store: the pointer of the low side of table's next range
// return value: 0 - not a invalid item range, perm - a valid item range with perm permission 
static int
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
c0108903:	55                   	push   %ebp
c0108904:	89 e5                	mov    %esp,%ebp
c0108906:	83 ec 10             	sub    $0x10,%esp
    if (start >= right) {
c0108909:	8b 45 10             	mov    0x10(%ebp),%eax
c010890c:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010890f:	72 0e                	jb     c010891f <get_pgtable_items+0x1c>
        return 0;
c0108911:	b8 00 00 00 00       	mov    $0x0,%eax
c0108916:	e9 9a 00 00 00       	jmp    c01089b5 <get_pgtable_items+0xb2>
    }
    while (start < right && !(table[start] & PTE_P)) {
        start ++;
c010891b:	83 45 10 01          	addl   $0x1,0x10(%ebp)
static int
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
    if (start >= right) {
        return 0;
    }
    while (start < right && !(table[start] & PTE_P)) {
c010891f:	8b 45 10             	mov    0x10(%ebp),%eax
c0108922:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0108925:	73 18                	jae    c010893f <get_pgtable_items+0x3c>
c0108927:	8b 45 10             	mov    0x10(%ebp),%eax
c010892a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0108931:	8b 45 14             	mov    0x14(%ebp),%eax
c0108934:	01 d0                	add    %edx,%eax
c0108936:	8b 00                	mov    (%eax),%eax
c0108938:	83 e0 01             	and    $0x1,%eax
c010893b:	85 c0                	test   %eax,%eax
c010893d:	74 dc                	je     c010891b <get_pgtable_items+0x18>
        start ++;
    }
    if (start < right) {
c010893f:	8b 45 10             	mov    0x10(%ebp),%eax
c0108942:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0108945:	73 69                	jae    c01089b0 <get_pgtable_items+0xad>
        if (left_store != NULL) {
c0108947:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c010894b:	74 08                	je     c0108955 <get_pgtable_items+0x52>
            *left_store = start;
c010894d:	8b 45 18             	mov    0x18(%ebp),%eax
c0108950:	8b 55 10             	mov    0x10(%ebp),%edx
c0108953:	89 10                	mov    %edx,(%eax)
        }
        int perm = (table[start ++] & PTE_USER);
c0108955:	8b 45 10             	mov    0x10(%ebp),%eax
c0108958:	8d 50 01             	lea    0x1(%eax),%edx
c010895b:	89 55 10             	mov    %edx,0x10(%ebp)
c010895e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0108965:	8b 45 14             	mov    0x14(%ebp),%eax
c0108968:	01 d0                	add    %edx,%eax
c010896a:	8b 00                	mov    (%eax),%eax
c010896c:	83 e0 07             	and    $0x7,%eax
c010896f:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while (start < right && (table[start] & PTE_USER) == perm) {
c0108972:	eb 04                	jmp    c0108978 <get_pgtable_items+0x75>
            start ++;
c0108974:	83 45 10 01          	addl   $0x1,0x10(%ebp)
    if (start < right) {
        if (left_store != NULL) {
            *left_store = start;
        }
        int perm = (table[start ++] & PTE_USER);
        while (start < right && (table[start] & PTE_USER) == perm) {
c0108978:	8b 45 10             	mov    0x10(%ebp),%eax
c010897b:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010897e:	73 1d                	jae    c010899d <get_pgtable_items+0x9a>
c0108980:	8b 45 10             	mov    0x10(%ebp),%eax
c0108983:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010898a:	8b 45 14             	mov    0x14(%ebp),%eax
c010898d:	01 d0                	add    %edx,%eax
c010898f:	8b 00                	mov    (%eax),%eax
c0108991:	83 e0 07             	and    $0x7,%eax
c0108994:	89 c2                	mov    %eax,%edx
c0108996:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108999:	39 c2                	cmp    %eax,%edx
c010899b:	74 d7                	je     c0108974 <get_pgtable_items+0x71>
            start ++;
        }
        if (right_store != NULL) {
c010899d:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c01089a1:	74 08                	je     c01089ab <get_pgtable_items+0xa8>
            *right_store = start;
c01089a3:	8b 45 1c             	mov    0x1c(%ebp),%eax
c01089a6:	8b 55 10             	mov    0x10(%ebp),%edx
c01089a9:	89 10                	mov    %edx,(%eax)
        }
        return perm;
c01089ab:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01089ae:	eb 05                	jmp    c01089b5 <get_pgtable_items+0xb2>
    }
    return 0;
c01089b0:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01089b5:	c9                   	leave  
c01089b6:	c3                   	ret    

c01089b7 <print_pgdir>:

//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
c01089b7:	55                   	push   %ebp
c01089b8:	89 e5                	mov    %esp,%ebp
c01089ba:	57                   	push   %edi
c01089bb:	56                   	push   %esi
c01089bc:	53                   	push   %ebx
c01089bd:	83 ec 2c             	sub    $0x2c,%esp
    cprintf("-------------------- BEGIN --------------------\n");
c01089c0:	83 ec 0c             	sub    $0xc,%esp
c01089c3:	68 14 62 11 c0       	push   $0xc0116214
c01089c8:	e8 ba 79 ff ff       	call   c0100387 <cprintf>
c01089cd:	83 c4 10             	add    $0x10,%esp
    size_t left, right = 0, perm;
c01089d0:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c01089d7:	e9 e5 00 00 00       	jmp    c0108ac1 <print_pgdir+0x10a>
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c01089dc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01089df:	83 ec 0c             	sub    $0xc,%esp
c01089e2:	50                   	push   %eax
c01089e3:	e8 cd fe ff ff       	call   c01088b5 <perm2str>
c01089e8:	83 c4 10             	add    $0x10,%esp
c01089eb:	89 c7                	mov    %eax,%edi
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
c01089ed:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01089f0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01089f3:	29 c2                	sub    %eax,%edx
c01089f5:	89 d0                	mov    %edx,%eax
void
print_pgdir(void) {
    cprintf("-------------------- BEGIN --------------------\n");
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c01089f7:	c1 e0 16             	shl    $0x16,%eax
c01089fa:	89 c3                	mov    %eax,%ebx
c01089fc:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01089ff:	c1 e0 16             	shl    $0x16,%eax
c0108a02:	89 c1                	mov    %eax,%ecx
c0108a04:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108a07:	c1 e0 16             	shl    $0x16,%eax
c0108a0a:	89 c2                	mov    %eax,%edx
c0108a0c:	8b 75 dc             	mov    -0x24(%ebp),%esi
c0108a0f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108a12:	29 c6                	sub    %eax,%esi
c0108a14:	89 f0                	mov    %esi,%eax
c0108a16:	83 ec 08             	sub    $0x8,%esp
c0108a19:	57                   	push   %edi
c0108a1a:	53                   	push   %ebx
c0108a1b:	51                   	push   %ecx
c0108a1c:	52                   	push   %edx
c0108a1d:	50                   	push   %eax
c0108a1e:	68 45 62 11 c0       	push   $0xc0116245
c0108a23:	e8 5f 79 ff ff       	call   c0100387 <cprintf>
c0108a28:	83 c4 20             	add    $0x20,%esp
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
c0108a2b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108a2e:	c1 e0 0a             	shl    $0xa,%eax
c0108a31:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c0108a34:	eb 4f                	jmp    c0108a85 <print_pgdir+0xce>
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c0108a36:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108a39:	83 ec 0c             	sub    $0xc,%esp
c0108a3c:	50                   	push   %eax
c0108a3d:	e8 73 fe ff ff       	call   c01088b5 <perm2str>
c0108a42:	83 c4 10             	add    $0x10,%esp
c0108a45:	89 c7                	mov    %eax,%edi
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
c0108a47:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0108a4a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0108a4d:	29 c2                	sub    %eax,%edx
c0108a4f:	89 d0                	mov    %edx,%eax
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c0108a51:	c1 e0 0c             	shl    $0xc,%eax
c0108a54:	89 c3                	mov    %eax,%ebx
c0108a56:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0108a59:	c1 e0 0c             	shl    $0xc,%eax
c0108a5c:	89 c1                	mov    %eax,%ecx
c0108a5e:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0108a61:	c1 e0 0c             	shl    $0xc,%eax
c0108a64:	89 c2                	mov    %eax,%edx
c0108a66:	8b 75 d4             	mov    -0x2c(%ebp),%esi
c0108a69:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0108a6c:	29 c6                	sub    %eax,%esi
c0108a6e:	89 f0                	mov    %esi,%eax
c0108a70:	83 ec 08             	sub    $0x8,%esp
c0108a73:	57                   	push   %edi
c0108a74:	53                   	push   %ebx
c0108a75:	51                   	push   %ecx
c0108a76:	52                   	push   %edx
c0108a77:	50                   	push   %eax
c0108a78:	68 64 62 11 c0       	push   $0xc0116264
c0108a7d:	e8 05 79 ff ff       	call   c0100387 <cprintf>
c0108a82:	83 c4 20             	add    $0x20,%esp
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c0108a85:	be 00 00 c0 fa       	mov    $0xfac00000,%esi
c0108a8a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0108a8d:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0108a90:	89 d3                	mov    %edx,%ebx
c0108a92:	c1 e3 0a             	shl    $0xa,%ebx
c0108a95:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0108a98:	89 d1                	mov    %edx,%ecx
c0108a9a:	c1 e1 0a             	shl    $0xa,%ecx
c0108a9d:	83 ec 08             	sub    $0x8,%esp
c0108aa0:	8d 55 d4             	lea    -0x2c(%ebp),%edx
c0108aa3:	52                   	push   %edx
c0108aa4:	8d 55 d8             	lea    -0x28(%ebp),%edx
c0108aa7:	52                   	push   %edx
c0108aa8:	56                   	push   %esi
c0108aa9:	50                   	push   %eax
c0108aaa:	53                   	push   %ebx
c0108aab:	51                   	push   %ecx
c0108aac:	e8 52 fe ff ff       	call   c0108903 <get_pgtable_items>
c0108ab1:	83 c4 20             	add    $0x20,%esp
c0108ab4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0108ab7:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0108abb:	0f 85 75 ff ff ff    	jne    c0108a36 <print_pgdir+0x7f>
//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
    cprintf("-------------------- BEGIN --------------------\n");
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c0108ac1:	b9 00 b0 fe fa       	mov    $0xfafeb000,%ecx
c0108ac6:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108ac9:	83 ec 08             	sub    $0x8,%esp
c0108acc:	8d 55 dc             	lea    -0x24(%ebp),%edx
c0108acf:	52                   	push   %edx
c0108ad0:	8d 55 e0             	lea    -0x20(%ebp),%edx
c0108ad3:	52                   	push   %edx
c0108ad4:	51                   	push   %ecx
c0108ad5:	50                   	push   %eax
c0108ad6:	68 00 04 00 00       	push   $0x400
c0108adb:	6a 00                	push   $0x0
c0108add:	e8 21 fe ff ff       	call   c0108903 <get_pgtable_items>
c0108ae2:	83 c4 20             	add    $0x20,%esp
c0108ae5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0108ae8:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0108aec:	0f 85 ea fe ff ff    	jne    c01089dc <print_pgdir+0x25>
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
        }
    }
    cprintf("--------------------- END ---------------------\n");
c0108af2:	83 ec 0c             	sub    $0xc,%esp
c0108af5:	68 88 62 11 c0       	push   $0xc0116288
c0108afa:	e8 88 78 ff ff       	call   c0100387 <cprintf>
c0108aff:	83 c4 10             	add    $0x10,%esp
}
c0108b02:	90                   	nop
c0108b03:	8d 65 f4             	lea    -0xc(%ebp),%esp
c0108b06:	5b                   	pop    %ebx
c0108b07:	5e                   	pop    %esi
c0108b08:	5f                   	pop    %edi
c0108b09:	5d                   	pop    %ebp
c0108b0a:	c3                   	ret    

c0108b0b <phi_test_sema>:
semaphore_t s[N]; /* 每个哲学家一个信号量 */

struct proc_struct *philosopher_proc_sema[N];

void phi_test_sema(i) /* i：哲学家号码从0到N-1 */
{ 
c0108b0b:	55                   	push   %ebp
c0108b0c:	89 e5                	mov    %esp,%ebp
c0108b0e:	83 ec 08             	sub    $0x8,%esp
    if(state_sema[i]==HUNGRY&&state_sema[LEFT]!=EATING
c0108b11:	8b 45 08             	mov    0x8(%ebp),%eax
c0108b14:	8b 04 85 60 52 15 c0 	mov    -0x3feaada0(,%eax,4),%eax
c0108b1b:	83 f8 01             	cmp    $0x1,%eax
c0108b1e:	0f 85 8d 00 00 00    	jne    c0108bb1 <phi_test_sema+0xa6>
c0108b24:	8b 45 08             	mov    0x8(%ebp),%eax
c0108b27:	8d 48 04             	lea    0x4(%eax),%ecx
c0108b2a:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0108b2f:	89 c8                	mov    %ecx,%eax
c0108b31:	f7 ea                	imul   %edx
c0108b33:	d1 fa                	sar    %edx
c0108b35:	89 c8                	mov    %ecx,%eax
c0108b37:	c1 f8 1f             	sar    $0x1f,%eax
c0108b3a:	29 c2                	sub    %eax,%edx
c0108b3c:	89 d0                	mov    %edx,%eax
c0108b3e:	89 c2                	mov    %eax,%edx
c0108b40:	c1 e2 02             	shl    $0x2,%edx
c0108b43:	01 c2                	add    %eax,%edx
c0108b45:	89 c8                	mov    %ecx,%eax
c0108b47:	29 d0                	sub    %edx,%eax
c0108b49:	8b 04 85 60 52 15 c0 	mov    -0x3feaada0(,%eax,4),%eax
c0108b50:	83 f8 02             	cmp    $0x2,%eax
c0108b53:	74 5c                	je     c0108bb1 <phi_test_sema+0xa6>
            &&state_sema[RIGHT]!=EATING)
c0108b55:	8b 45 08             	mov    0x8(%ebp),%eax
c0108b58:	8d 48 01             	lea    0x1(%eax),%ecx
c0108b5b:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0108b60:	89 c8                	mov    %ecx,%eax
c0108b62:	f7 ea                	imul   %edx
c0108b64:	d1 fa                	sar    %edx
c0108b66:	89 c8                	mov    %ecx,%eax
c0108b68:	c1 f8 1f             	sar    $0x1f,%eax
c0108b6b:	29 c2                	sub    %eax,%edx
c0108b6d:	89 d0                	mov    %edx,%eax
c0108b6f:	89 c2                	mov    %eax,%edx
c0108b71:	c1 e2 02             	shl    $0x2,%edx
c0108b74:	01 c2                	add    %eax,%edx
c0108b76:	89 c8                	mov    %ecx,%eax
c0108b78:	29 d0                	sub    %edx,%eax
c0108b7a:	8b 04 85 60 52 15 c0 	mov    -0x3feaada0(,%eax,4),%eax
c0108b81:	83 f8 02             	cmp    $0x2,%eax
c0108b84:	74 2b                	je     c0108bb1 <phi_test_sema+0xa6>
    {
        state_sema[i]=EATING;
c0108b86:	8b 45 08             	mov    0x8(%ebp),%eax
c0108b89:	c7 04 85 60 52 15 c0 	movl   $0x2,-0x3feaada0(,%eax,4)
c0108b90:	02 00 00 00 
        up(&s[i]);
c0108b94:	8b 55 08             	mov    0x8(%ebp),%edx
c0108b97:	89 d0                	mov    %edx,%eax
c0108b99:	01 c0                	add    %eax,%eax
c0108b9b:	01 d0                	add    %edx,%eax
c0108b9d:	c1 e0 02             	shl    $0x2,%eax
c0108ba0:	05 00 53 15 c0       	add    $0xc0155300,%eax
c0108ba5:	83 ec 0c             	sub    $0xc,%esp
c0108ba8:	50                   	push   %eax
c0108ba9:	e8 e3 0b 00 00       	call   c0109791 <up>
c0108bae:	83 c4 10             	add    $0x10,%esp
    }
}
c0108bb1:	90                   	nop
c0108bb2:	c9                   	leave  
c0108bb3:	c3                   	ret    

c0108bb4 <phi_take_forks_sema>:

void phi_take_forks_sema(int i) /* i：哲学家号码从0到N-1 */
{ 
c0108bb4:	55                   	push   %ebp
c0108bb5:	89 e5                	mov    %esp,%ebp
c0108bb7:	83 ec 08             	sub    $0x8,%esp
        down(&mutex); /* 进入临界区 */
c0108bba:	83 ec 0c             	sub    $0xc,%esp
c0108bbd:	68 88 52 15 c0       	push   $0xc0155288
c0108bc2:	e8 e6 0b 00 00       	call   c01097ad <down>
c0108bc7:	83 c4 10             	add    $0x10,%esp
        state_sema[i]=HUNGRY; /* 记录下哲学家i饥饿的事实 */
c0108bca:	8b 45 08             	mov    0x8(%ebp),%eax
c0108bcd:	c7 04 85 60 52 15 c0 	movl   $0x1,-0x3feaada0(,%eax,4)
c0108bd4:	01 00 00 00 
        phi_test_sema(i); /* 试图得到两只叉子 */
c0108bd8:	83 ec 0c             	sub    $0xc,%esp
c0108bdb:	ff 75 08             	pushl  0x8(%ebp)
c0108bde:	e8 28 ff ff ff       	call   c0108b0b <phi_test_sema>
c0108be3:	83 c4 10             	add    $0x10,%esp
        up(&mutex); /* 离开临界区 */
c0108be6:	83 ec 0c             	sub    $0xc,%esp
c0108be9:	68 88 52 15 c0       	push   $0xc0155288
c0108bee:	e8 9e 0b 00 00       	call   c0109791 <up>
c0108bf3:	83 c4 10             	add    $0x10,%esp
        down(&s[i]); /* 如果得不到叉子就阻塞 */
c0108bf6:	8b 55 08             	mov    0x8(%ebp),%edx
c0108bf9:	89 d0                	mov    %edx,%eax
c0108bfb:	01 c0                	add    %eax,%eax
c0108bfd:	01 d0                	add    %edx,%eax
c0108bff:	c1 e0 02             	shl    $0x2,%eax
c0108c02:	05 00 53 15 c0       	add    $0xc0155300,%eax
c0108c07:	83 ec 0c             	sub    $0xc,%esp
c0108c0a:	50                   	push   %eax
c0108c0b:	e8 9d 0b 00 00       	call   c01097ad <down>
c0108c10:	83 c4 10             	add    $0x10,%esp
}
c0108c13:	90                   	nop
c0108c14:	c9                   	leave  
c0108c15:	c3                   	ret    

c0108c16 <phi_put_forks_sema>:

void phi_put_forks_sema(int i) /* i：哲学家号码从0到N-1 */
{ 
c0108c16:	55                   	push   %ebp
c0108c17:	89 e5                	mov    %esp,%ebp
c0108c19:	83 ec 08             	sub    $0x8,%esp
        down(&mutex); /* 进入临界区 */
c0108c1c:	83 ec 0c             	sub    $0xc,%esp
c0108c1f:	68 88 52 15 c0       	push   $0xc0155288
c0108c24:	e8 84 0b 00 00       	call   c01097ad <down>
c0108c29:	83 c4 10             	add    $0x10,%esp
        state_sema[i]=THINKING; /* 哲学家进餐结束 */
c0108c2c:	8b 45 08             	mov    0x8(%ebp),%eax
c0108c2f:	c7 04 85 60 52 15 c0 	movl   $0x0,-0x3feaada0(,%eax,4)
c0108c36:	00 00 00 00 
        phi_test_sema(LEFT); /* 看一下左邻居现在是否能进餐 */
c0108c3a:	8b 45 08             	mov    0x8(%ebp),%eax
c0108c3d:	8d 48 04             	lea    0x4(%eax),%ecx
c0108c40:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0108c45:	89 c8                	mov    %ecx,%eax
c0108c47:	f7 ea                	imul   %edx
c0108c49:	d1 fa                	sar    %edx
c0108c4b:	89 c8                	mov    %ecx,%eax
c0108c4d:	c1 f8 1f             	sar    $0x1f,%eax
c0108c50:	29 c2                	sub    %eax,%edx
c0108c52:	89 d0                	mov    %edx,%eax
c0108c54:	89 c2                	mov    %eax,%edx
c0108c56:	c1 e2 02             	shl    $0x2,%edx
c0108c59:	01 c2                	add    %eax,%edx
c0108c5b:	89 c8                	mov    %ecx,%eax
c0108c5d:	29 d0                	sub    %edx,%eax
c0108c5f:	83 ec 0c             	sub    $0xc,%esp
c0108c62:	50                   	push   %eax
c0108c63:	e8 a3 fe ff ff       	call   c0108b0b <phi_test_sema>
c0108c68:	83 c4 10             	add    $0x10,%esp
        phi_test_sema(RIGHT); /* 看一下右邻居现在是否能进餐 */
c0108c6b:	8b 45 08             	mov    0x8(%ebp),%eax
c0108c6e:	8d 48 01             	lea    0x1(%eax),%ecx
c0108c71:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0108c76:	89 c8                	mov    %ecx,%eax
c0108c78:	f7 ea                	imul   %edx
c0108c7a:	d1 fa                	sar    %edx
c0108c7c:	89 c8                	mov    %ecx,%eax
c0108c7e:	c1 f8 1f             	sar    $0x1f,%eax
c0108c81:	29 c2                	sub    %eax,%edx
c0108c83:	89 d0                	mov    %edx,%eax
c0108c85:	89 c2                	mov    %eax,%edx
c0108c87:	c1 e2 02             	shl    $0x2,%edx
c0108c8a:	01 c2                	add    %eax,%edx
c0108c8c:	89 c8                	mov    %ecx,%eax
c0108c8e:	29 d0                	sub    %edx,%eax
c0108c90:	83 ec 0c             	sub    $0xc,%esp
c0108c93:	50                   	push   %eax
c0108c94:	e8 72 fe ff ff       	call   c0108b0b <phi_test_sema>
c0108c99:	83 c4 10             	add    $0x10,%esp
        up(&mutex); /* 离开临界区 */
c0108c9c:	83 ec 0c             	sub    $0xc,%esp
c0108c9f:	68 88 52 15 c0       	push   $0xc0155288
c0108ca4:	e8 e8 0a 00 00       	call   c0109791 <up>
c0108ca9:	83 c4 10             	add    $0x10,%esp
}
c0108cac:	90                   	nop
c0108cad:	c9                   	leave  
c0108cae:	c3                   	ret    

c0108caf <philosopher_using_semaphore>:

int philosopher_using_semaphore(void * arg) /* i：哲学家号码，从0到N-1 */
{
c0108caf:	55                   	push   %ebp
c0108cb0:	89 e5                	mov    %esp,%ebp
c0108cb2:	83 ec 18             	sub    $0x18,%esp
    int i, iter=0;
c0108cb5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    i=(int)arg;
c0108cbc:	8b 45 08             	mov    0x8(%ebp),%eax
c0108cbf:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cprintf("I am No.%d philosopher_sema\n",i);
c0108cc2:	83 ec 08             	sub    $0x8,%esp
c0108cc5:	ff 75 f0             	pushl  -0x10(%ebp)
c0108cc8:	68 bc 62 11 c0       	push   $0xc01162bc
c0108ccd:	e8 b5 76 ff ff       	call   c0100387 <cprintf>
c0108cd2:	83 c4 10             	add    $0x10,%esp
    while(iter++<TIMES)
c0108cd5:	eb 62                	jmp    c0108d39 <philosopher_using_semaphore+0x8a>
    { /* 无限循环 */
        cprintf("Iter %d, No.%d philosopher_sema is thinking\n",iter,i); /* 哲学家正在思考 */
c0108cd7:	83 ec 04             	sub    $0x4,%esp
c0108cda:	ff 75 f0             	pushl  -0x10(%ebp)
c0108cdd:	ff 75 f4             	pushl  -0xc(%ebp)
c0108ce0:	68 dc 62 11 c0       	push   $0xc01162dc
c0108ce5:	e8 9d 76 ff ff       	call   c0100387 <cprintf>
c0108cea:	83 c4 10             	add    $0x10,%esp
        do_sleep(SLEEP_TIME);
c0108ced:	83 ec 0c             	sub    $0xc,%esp
c0108cf0:	6a 0a                	push   $0xa
c0108cf2:	e8 05 49 00 00       	call   c010d5fc <do_sleep>
c0108cf7:	83 c4 10             	add    $0x10,%esp
        phi_take_forks_sema(i); 
c0108cfa:	83 ec 0c             	sub    $0xc,%esp
c0108cfd:	ff 75 f0             	pushl  -0x10(%ebp)
c0108d00:	e8 af fe ff ff       	call   c0108bb4 <phi_take_forks_sema>
c0108d05:	83 c4 10             	add    $0x10,%esp
        /* 需要两只叉子，或者阻塞 */
        cprintf("Iter %d, No.%d philosopher_sema is eating\n",iter,i); /* 进餐 */
c0108d08:	83 ec 04             	sub    $0x4,%esp
c0108d0b:	ff 75 f0             	pushl  -0x10(%ebp)
c0108d0e:	ff 75 f4             	pushl  -0xc(%ebp)
c0108d11:	68 0c 63 11 c0       	push   $0xc011630c
c0108d16:	e8 6c 76 ff ff       	call   c0100387 <cprintf>
c0108d1b:	83 c4 10             	add    $0x10,%esp
        do_sleep(SLEEP_TIME);
c0108d1e:	83 ec 0c             	sub    $0xc,%esp
c0108d21:	6a 0a                	push   $0xa
c0108d23:	e8 d4 48 00 00       	call   c010d5fc <do_sleep>
c0108d28:	83 c4 10             	add    $0x10,%esp
        phi_put_forks_sema(i); 
c0108d2b:	83 ec 0c             	sub    $0xc,%esp
c0108d2e:	ff 75 f0             	pushl  -0x10(%ebp)
c0108d31:	e8 e0 fe ff ff       	call   c0108c16 <phi_put_forks_sema>
c0108d36:	83 c4 10             	add    $0x10,%esp
int philosopher_using_semaphore(void * arg) /* i：哲学家号码，从0到N-1 */
{
    int i, iter=0;
    i=(int)arg;
    cprintf("I am No.%d philosopher_sema\n",i);
    while(iter++<TIMES)
c0108d39:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108d3c:	8d 50 01             	lea    0x1(%eax),%edx
c0108d3f:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0108d42:	83 f8 03             	cmp    $0x3,%eax
c0108d45:	7e 90                	jle    c0108cd7 <philosopher_using_semaphore+0x28>
        cprintf("Iter %d, No.%d philosopher_sema is eating\n",iter,i); /* 进餐 */
        do_sleep(SLEEP_TIME);
        phi_put_forks_sema(i); 
        /* 把两把叉子同时放回桌子 */
    }
    cprintf("No.%d philosopher_sema quit\n",i);
c0108d47:	83 ec 08             	sub    $0x8,%esp
c0108d4a:	ff 75 f0             	pushl  -0x10(%ebp)
c0108d4d:	68 37 63 11 c0       	push   $0xc0116337
c0108d52:	e8 30 76 ff ff       	call   c0100387 <cprintf>
c0108d57:	83 c4 10             	add    $0x10,%esp
    return 0;    
c0108d5a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0108d5f:	c9                   	leave  
c0108d60:	c3                   	ret    

c0108d61 <phi_test_condvar>:

struct proc_struct *philosopher_proc_condvar[N]; // N philosopher
int state_condvar[N];                            // the philosopher's state: EATING, HUNGARY, THINKING  
monitor_t mt, *mtp=&mt;                          // monitor

void phi_test_condvar (i) { 
c0108d61:	55                   	push   %ebp
c0108d62:	89 e5                	mov    %esp,%ebp
c0108d64:	83 ec 08             	sub    $0x8,%esp
    if(state_condvar[i]==HUNGRY&&state_condvar[LEFT]!=EATING
c0108d67:	8b 45 08             	mov    0x8(%ebp),%eax
c0108d6a:	8b 04 85 c0 52 15 c0 	mov    -0x3feaad40(,%eax,4),%eax
c0108d71:	83 f8 01             	cmp    $0x1,%eax
c0108d74:	0f 85 bd 00 00 00    	jne    c0108e37 <phi_test_condvar+0xd6>
c0108d7a:	8b 45 08             	mov    0x8(%ebp),%eax
c0108d7d:	8d 48 04             	lea    0x4(%eax),%ecx
c0108d80:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0108d85:	89 c8                	mov    %ecx,%eax
c0108d87:	f7 ea                	imul   %edx
c0108d89:	d1 fa                	sar    %edx
c0108d8b:	89 c8                	mov    %ecx,%eax
c0108d8d:	c1 f8 1f             	sar    $0x1f,%eax
c0108d90:	29 c2                	sub    %eax,%edx
c0108d92:	89 d0                	mov    %edx,%eax
c0108d94:	89 c2                	mov    %eax,%edx
c0108d96:	c1 e2 02             	shl    $0x2,%edx
c0108d99:	01 c2                	add    %eax,%edx
c0108d9b:	89 c8                	mov    %ecx,%eax
c0108d9d:	29 d0                	sub    %edx,%eax
c0108d9f:	8b 04 85 c0 52 15 c0 	mov    -0x3feaad40(,%eax,4),%eax
c0108da6:	83 f8 02             	cmp    $0x2,%eax
c0108da9:	0f 84 88 00 00 00    	je     c0108e37 <phi_test_condvar+0xd6>
            &&state_condvar[RIGHT]!=EATING) {
c0108daf:	8b 45 08             	mov    0x8(%ebp),%eax
c0108db2:	8d 48 01             	lea    0x1(%eax),%ecx
c0108db5:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0108dba:	89 c8                	mov    %ecx,%eax
c0108dbc:	f7 ea                	imul   %edx
c0108dbe:	d1 fa                	sar    %edx
c0108dc0:	89 c8                	mov    %ecx,%eax
c0108dc2:	c1 f8 1f             	sar    $0x1f,%eax
c0108dc5:	29 c2                	sub    %eax,%edx
c0108dc7:	89 d0                	mov    %edx,%eax
c0108dc9:	89 c2                	mov    %eax,%edx
c0108dcb:	c1 e2 02             	shl    $0x2,%edx
c0108dce:	01 c2                	add    %eax,%edx
c0108dd0:	89 c8                	mov    %ecx,%eax
c0108dd2:	29 d0                	sub    %edx,%eax
c0108dd4:	8b 04 85 c0 52 15 c0 	mov    -0x3feaad40(,%eax,4),%eax
c0108ddb:	83 f8 02             	cmp    $0x2,%eax
c0108dde:	74 57                	je     c0108e37 <phi_test_condvar+0xd6>
        cprintf("phi_test_condvar: state_condvar[%d] will eating\n",i);
c0108de0:	83 ec 08             	sub    $0x8,%esp
c0108de3:	ff 75 08             	pushl  0x8(%ebp)
c0108de6:	68 54 63 11 c0       	push   $0xc0116354
c0108deb:	e8 97 75 ff ff       	call   c0100387 <cprintf>
c0108df0:	83 c4 10             	add    $0x10,%esp
        state_condvar[i] = EATING ;
c0108df3:	8b 45 08             	mov    0x8(%ebp),%eax
c0108df6:	c7 04 85 c0 52 15 c0 	movl   $0x2,-0x3feaad40(,%eax,4)
c0108dfd:	02 00 00 00 
        cprintf("phi_test_condvar: signal self_cv[%d] \n",i);
c0108e01:	83 ec 08             	sub    $0x8,%esp
c0108e04:	ff 75 08             	pushl  0x8(%ebp)
c0108e07:	68 88 63 11 c0       	push   $0xc0116388
c0108e0c:	e8 76 75 ff ff       	call   c0100387 <cprintf>
c0108e11:	83 c4 10             	add    $0x10,%esp
        cond_signal(&mtp->cv[i]) ;
c0108e14:	a1 78 ea 14 c0       	mov    0xc014ea78,%eax
c0108e19:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0108e1c:	8b 55 08             	mov    0x8(%ebp),%edx
c0108e1f:	89 d0                	mov    %edx,%eax
c0108e21:	c1 e0 02             	shl    $0x2,%eax
c0108e24:	01 d0                	add    %edx,%eax
c0108e26:	c1 e0 02             	shl    $0x2,%eax
c0108e29:	01 c8                	add    %ecx,%eax
c0108e2b:	83 ec 0c             	sub    $0xc,%esp
c0108e2e:	50                   	push   %eax
c0108e2f:	e8 08 0b 00 00       	call   c010993c <cond_signal>
c0108e34:	83 c4 10             	add    $0x10,%esp
    }
}
c0108e37:	90                   	nop
c0108e38:	c9                   	leave  
c0108e39:	c3                   	ret    

c0108e3a <phi_take_forks_condvar>:


void phi_take_forks_condvar(int i) {
c0108e3a:	55                   	push   %ebp
c0108e3b:	89 e5                	mov    %esp,%ebp
c0108e3d:	83 ec 08             	sub    $0x8,%esp
     down(&(mtp->mutex));
c0108e40:	a1 78 ea 14 c0       	mov    0xc014ea78,%eax
c0108e45:	83 ec 0c             	sub    $0xc,%esp
c0108e48:	50                   	push   %eax
c0108e49:	e8 5f 09 00 00       	call   c01097ad <down>
c0108e4e:	83 c4 10             	add    $0x10,%esp
//--------into routine in monitor--------------
     // LAB7 EXERCISE1: YOUR CODE
     // I am hungry
     // try to get fork
    state_condvar[i] = HUNGRY; /* 记录下哲学家i饥饿的事实 */
c0108e51:	8b 45 08             	mov    0x8(%ebp),%eax
c0108e54:	c7 04 85 c0 52 15 c0 	movl   $0x1,-0x3feaad40(,%eax,4)
c0108e5b:	01 00 00 00 
    phi_test_condvar(i); /* 试图得到两只叉子 */
c0108e5f:	83 ec 0c             	sub    $0xc,%esp
c0108e62:	ff 75 08             	pushl  0x8(%ebp)
c0108e65:	e8 f7 fe ff ff       	call   c0108d61 <phi_test_condvar>
c0108e6a:	83 c4 10             	add    $0x10,%esp

    if (state_condvar[i] != EATING) {
c0108e6d:	8b 45 08             	mov    0x8(%ebp),%eax
c0108e70:	8b 04 85 c0 52 15 c0 	mov    -0x3feaad40(,%eax,4),%eax
c0108e77:	83 f8 02             	cmp    $0x2,%eax
c0108e7a:	74 23                	je     c0108e9f <phi_take_forks_condvar+0x65>
        cond_wait(&(mtp->cv[i]));
c0108e7c:	a1 78 ea 14 c0       	mov    0xc014ea78,%eax
c0108e81:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0108e84:	8b 55 08             	mov    0x8(%ebp),%edx
c0108e87:	89 d0                	mov    %edx,%eax
c0108e89:	c1 e0 02             	shl    $0x2,%eax
c0108e8c:	01 d0                	add    %edx,%eax
c0108e8e:	c1 e0 02             	shl    $0x2,%eax
c0108e91:	01 c8                	add    %ecx,%eax
c0108e93:	83 ec 0c             	sub    $0xc,%esp
c0108e96:	50                   	push   %eax
c0108e97:	e8 3d 0b 00 00       	call   c01099d9 <cond_wait>
c0108e9c:	83 c4 10             	add    $0x10,%esp
    }
//--------leave routine in monitor--------------
      if(mtp->next_count>0)
c0108e9f:	a1 78 ea 14 c0       	mov    0xc014ea78,%eax
c0108ea4:	8b 40 18             	mov    0x18(%eax),%eax
c0108ea7:	85 c0                	test   %eax,%eax
c0108ea9:	7e 16                	jle    c0108ec1 <phi_take_forks_condvar+0x87>
         up(&(mtp->next));
c0108eab:	a1 78 ea 14 c0       	mov    0xc014ea78,%eax
c0108eb0:	83 c0 0c             	add    $0xc,%eax
c0108eb3:	83 ec 0c             	sub    $0xc,%esp
c0108eb6:	50                   	push   %eax
c0108eb7:	e8 d5 08 00 00       	call   c0109791 <up>
c0108ebc:	83 c4 10             	add    $0x10,%esp
      else
         up(&(mtp->mutex));
}
c0108ebf:	eb 11                	jmp    c0108ed2 <phi_take_forks_condvar+0x98>
    }
//--------leave routine in monitor--------------
      if(mtp->next_count>0)
         up(&(mtp->next));
      else
         up(&(mtp->mutex));
c0108ec1:	a1 78 ea 14 c0       	mov    0xc014ea78,%eax
c0108ec6:	83 ec 0c             	sub    $0xc,%esp
c0108ec9:	50                   	push   %eax
c0108eca:	e8 c2 08 00 00       	call   c0109791 <up>
c0108ecf:	83 c4 10             	add    $0x10,%esp
}
c0108ed2:	90                   	nop
c0108ed3:	c9                   	leave  
c0108ed4:	c3                   	ret    

c0108ed5 <phi_put_forks_condvar>:

void phi_put_forks_condvar(int i) {
c0108ed5:	55                   	push   %ebp
c0108ed6:	89 e5                	mov    %esp,%ebp
c0108ed8:	83 ec 08             	sub    $0x8,%esp
     down(&(mtp->mutex));
c0108edb:	a1 78 ea 14 c0       	mov    0xc014ea78,%eax
c0108ee0:	83 ec 0c             	sub    $0xc,%esp
c0108ee3:	50                   	push   %eax
c0108ee4:	e8 c4 08 00 00       	call   c01097ad <down>
c0108ee9:	83 c4 10             	add    $0x10,%esp

//--------into routine in monitor--------------
     // LAB7 EXERCISE1: YOUR CODE
     // I ate over
     // test left and right neighbors
    state_condvar[i] = THINKING; /* 哲学家进餐结束 */
c0108eec:	8b 45 08             	mov    0x8(%ebp),%eax
c0108eef:	c7 04 85 c0 52 15 c0 	movl   $0x0,-0x3feaad40(,%eax,4)
c0108ef6:	00 00 00 00 
    phi_test_condvar(LEFT); /* 看一下左邻居现在是否能进餐 */
c0108efa:	8b 45 08             	mov    0x8(%ebp),%eax
c0108efd:	8d 48 04             	lea    0x4(%eax),%ecx
c0108f00:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0108f05:	89 c8                	mov    %ecx,%eax
c0108f07:	f7 ea                	imul   %edx
c0108f09:	d1 fa                	sar    %edx
c0108f0b:	89 c8                	mov    %ecx,%eax
c0108f0d:	c1 f8 1f             	sar    $0x1f,%eax
c0108f10:	29 c2                	sub    %eax,%edx
c0108f12:	89 d0                	mov    %edx,%eax
c0108f14:	89 c2                	mov    %eax,%edx
c0108f16:	c1 e2 02             	shl    $0x2,%edx
c0108f19:	01 c2                	add    %eax,%edx
c0108f1b:	89 c8                	mov    %ecx,%eax
c0108f1d:	29 d0                	sub    %edx,%eax
c0108f1f:	83 ec 0c             	sub    $0xc,%esp
c0108f22:	50                   	push   %eax
c0108f23:	e8 39 fe ff ff       	call   c0108d61 <phi_test_condvar>
c0108f28:	83 c4 10             	add    $0x10,%esp
    phi_test_condvar(RIGHT); /* 看一下右邻居现在是否能进餐 */
c0108f2b:	8b 45 08             	mov    0x8(%ebp),%eax
c0108f2e:	8d 48 01             	lea    0x1(%eax),%ecx
c0108f31:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0108f36:	89 c8                	mov    %ecx,%eax
c0108f38:	f7 ea                	imul   %edx
c0108f3a:	d1 fa                	sar    %edx
c0108f3c:	89 c8                	mov    %ecx,%eax
c0108f3e:	c1 f8 1f             	sar    $0x1f,%eax
c0108f41:	29 c2                	sub    %eax,%edx
c0108f43:	89 d0                	mov    %edx,%eax
c0108f45:	89 c2                	mov    %eax,%edx
c0108f47:	c1 e2 02             	shl    $0x2,%edx
c0108f4a:	01 c2                	add    %eax,%edx
c0108f4c:	89 c8                	mov    %ecx,%eax
c0108f4e:	29 d0                	sub    %edx,%eax
c0108f50:	83 ec 0c             	sub    $0xc,%esp
c0108f53:	50                   	push   %eax
c0108f54:	e8 08 fe ff ff       	call   c0108d61 <phi_test_condvar>
c0108f59:	83 c4 10             	add    $0x10,%esp
//--------leave routine in monitor--------------
     if(mtp->next_count>0)
c0108f5c:	a1 78 ea 14 c0       	mov    0xc014ea78,%eax
c0108f61:	8b 40 18             	mov    0x18(%eax),%eax
c0108f64:	85 c0                	test   %eax,%eax
c0108f66:	7e 16                	jle    c0108f7e <phi_put_forks_condvar+0xa9>
        up(&(mtp->next));
c0108f68:	a1 78 ea 14 c0       	mov    0xc014ea78,%eax
c0108f6d:	83 c0 0c             	add    $0xc,%eax
c0108f70:	83 ec 0c             	sub    $0xc,%esp
c0108f73:	50                   	push   %eax
c0108f74:	e8 18 08 00 00       	call   c0109791 <up>
c0108f79:	83 c4 10             	add    $0x10,%esp
     else
        up(&(mtp->mutex));
}
c0108f7c:	eb 11                	jmp    c0108f8f <phi_put_forks_condvar+0xba>
    phi_test_condvar(RIGHT); /* 看一下右邻居现在是否能进餐 */
//--------leave routine in monitor--------------
     if(mtp->next_count>0)
        up(&(mtp->next));
     else
        up(&(mtp->mutex));
c0108f7e:	a1 78 ea 14 c0       	mov    0xc014ea78,%eax
c0108f83:	83 ec 0c             	sub    $0xc,%esp
c0108f86:	50                   	push   %eax
c0108f87:	e8 05 08 00 00       	call   c0109791 <up>
c0108f8c:	83 c4 10             	add    $0x10,%esp
}
c0108f8f:	90                   	nop
c0108f90:	c9                   	leave  
c0108f91:	c3                   	ret    

c0108f92 <philosopher_using_condvar>:

//---------- philosophers using monitor (condition variable) ----------------------
int philosopher_using_condvar(void * arg) { /* arg is the No. of philosopher 0~N-1*/
c0108f92:	55                   	push   %ebp
c0108f93:	89 e5                	mov    %esp,%ebp
c0108f95:	83 ec 18             	sub    $0x18,%esp
  
    int i, iter=0;
c0108f98:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    i=(int)arg;
c0108f9f:	8b 45 08             	mov    0x8(%ebp),%eax
c0108fa2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cprintf("I am No.%d philosopher_condvar\n",i);
c0108fa5:	83 ec 08             	sub    $0x8,%esp
c0108fa8:	ff 75 f0             	pushl  -0x10(%ebp)
c0108fab:	68 b0 63 11 c0       	push   $0xc01163b0
c0108fb0:	e8 d2 73 ff ff       	call   c0100387 <cprintf>
c0108fb5:	83 c4 10             	add    $0x10,%esp
    while(iter++<TIMES)
c0108fb8:	eb 62                	jmp    c010901c <philosopher_using_condvar+0x8a>
    { /* iterate*/
        cprintf("Iter %d, No.%d philosopher_condvar is thinking\n",iter,i); /* thinking*/
c0108fba:	83 ec 04             	sub    $0x4,%esp
c0108fbd:	ff 75 f0             	pushl  -0x10(%ebp)
c0108fc0:	ff 75 f4             	pushl  -0xc(%ebp)
c0108fc3:	68 d0 63 11 c0       	push   $0xc01163d0
c0108fc8:	e8 ba 73 ff ff       	call   c0100387 <cprintf>
c0108fcd:	83 c4 10             	add    $0x10,%esp
        do_sleep(SLEEP_TIME);
c0108fd0:	83 ec 0c             	sub    $0xc,%esp
c0108fd3:	6a 0a                	push   $0xa
c0108fd5:	e8 22 46 00 00       	call   c010d5fc <do_sleep>
c0108fda:	83 c4 10             	add    $0x10,%esp
        phi_take_forks_condvar(i); 
c0108fdd:	83 ec 0c             	sub    $0xc,%esp
c0108fe0:	ff 75 f0             	pushl  -0x10(%ebp)
c0108fe3:	e8 52 fe ff ff       	call   c0108e3a <phi_take_forks_condvar>
c0108fe8:	83 c4 10             	add    $0x10,%esp
        /* need two forks, maybe blocked */
        cprintf("Iter %d, No.%d philosopher_condvar is eating\n",iter,i); /* eating*/
c0108feb:	83 ec 04             	sub    $0x4,%esp
c0108fee:	ff 75 f0             	pushl  -0x10(%ebp)
c0108ff1:	ff 75 f4             	pushl  -0xc(%ebp)
c0108ff4:	68 00 64 11 c0       	push   $0xc0116400
c0108ff9:	e8 89 73 ff ff       	call   c0100387 <cprintf>
c0108ffe:	83 c4 10             	add    $0x10,%esp
        do_sleep(SLEEP_TIME);
c0109001:	83 ec 0c             	sub    $0xc,%esp
c0109004:	6a 0a                	push   $0xa
c0109006:	e8 f1 45 00 00       	call   c010d5fc <do_sleep>
c010900b:	83 c4 10             	add    $0x10,%esp
        phi_put_forks_condvar(i); 
c010900e:	83 ec 0c             	sub    $0xc,%esp
c0109011:	ff 75 f0             	pushl  -0x10(%ebp)
c0109014:	e8 bc fe ff ff       	call   c0108ed5 <phi_put_forks_condvar>
c0109019:	83 c4 10             	add    $0x10,%esp
int philosopher_using_condvar(void * arg) { /* arg is the No. of philosopher 0~N-1*/
  
    int i, iter=0;
    i=(int)arg;
    cprintf("I am No.%d philosopher_condvar\n",i);
    while(iter++<TIMES)
c010901c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010901f:	8d 50 01             	lea    0x1(%eax),%edx
c0109022:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0109025:	83 f8 03             	cmp    $0x3,%eax
c0109028:	7e 90                	jle    c0108fba <philosopher_using_condvar+0x28>
        cprintf("Iter %d, No.%d philosopher_condvar is eating\n",iter,i); /* eating*/
        do_sleep(SLEEP_TIME);
        phi_put_forks_condvar(i); 
        /* return two forks back*/
    }
    cprintf("No.%d philosopher_condvar quit\n",i);
c010902a:	83 ec 08             	sub    $0x8,%esp
c010902d:	ff 75 f0             	pushl  -0x10(%ebp)
c0109030:	68 30 64 11 c0       	push   $0xc0116430
c0109035:	e8 4d 73 ff ff       	call   c0100387 <cprintf>
c010903a:	83 c4 10             	add    $0x10,%esp
    return 0;    
c010903d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109042:	c9                   	leave  
c0109043:	c3                   	ret    

c0109044 <check_sync>:

void check_sync(void){
c0109044:	55                   	push   %ebp
c0109045:	89 e5                	mov    %esp,%ebp
c0109047:	83 ec 18             	sub    $0x18,%esp

    int i;

    //check semaphore
    sem_init(&mutex, 1);
c010904a:	83 ec 08             	sub    $0x8,%esp
c010904d:	6a 01                	push   $0x1
c010904f:	68 88 52 15 c0       	push   $0xc0155288
c0109054:	e8 cb 05 00 00       	call   c0109624 <sem_init>
c0109059:	83 c4 10             	add    $0x10,%esp
    for(i=0;i<N;i++){
c010905c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0109063:	e9 8e 00 00 00       	jmp    c01090f6 <check_sync+0xb2>
        sem_init(&s[i], 0);
c0109068:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010906b:	89 d0                	mov    %edx,%eax
c010906d:	01 c0                	add    %eax,%eax
c010906f:	01 d0                	add    %edx,%eax
c0109071:	c1 e0 02             	shl    $0x2,%eax
c0109074:	05 00 53 15 c0       	add    $0xc0155300,%eax
c0109079:	83 ec 08             	sub    $0x8,%esp
c010907c:	6a 00                	push   $0x0
c010907e:	50                   	push   %eax
c010907f:	e8 a0 05 00 00       	call   c0109624 <sem_init>
c0109084:	83 c4 10             	add    $0x10,%esp
        int pid = kernel_thread(philosopher_using_semaphore, (void *)i, 0);
c0109087:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010908a:	83 ec 04             	sub    $0x4,%esp
c010908d:	6a 00                	push   $0x0
c010908f:	50                   	push   %eax
c0109090:	68 af 8c 10 c0       	push   $0xc0108caf
c0109095:	e8 54 2c 00 00       	call   c010bcee <kernel_thread>
c010909a:	83 c4 10             	add    $0x10,%esp
c010909d:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pid <= 0) {
c01090a0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01090a4:	7f 17                	jg     c01090bd <check_sync+0x79>
            panic("create No.%d philosopher_using_semaphore failed.\n");
c01090a6:	83 ec 04             	sub    $0x4,%esp
c01090a9:	68 50 64 11 c0       	push   $0xc0116450
c01090ae:	68 f8 00 00 00       	push   $0xf8
c01090b3:	68 82 64 11 c0       	push   $0xc0116482
c01090b8:	e8 30 74 ff ff       	call   c01004ed <__panic>
        }
        philosopher_proc_sema[i] = find_proc(pid);
c01090bd:	83 ec 0c             	sub    $0xc,%esp
c01090c0:	ff 75 f0             	pushl  -0x10(%ebp)
c01090c3:	e8 b4 2b 00 00       	call   c010bc7c <find_proc>
c01090c8:	83 c4 10             	add    $0x10,%esp
c01090cb:	89 c2                	mov    %eax,%edx
c01090cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01090d0:	89 14 85 d4 52 15 c0 	mov    %edx,-0x3feaad2c(,%eax,4)
        set_proc_name(philosopher_proc_sema[i], "philosopher_sema_proc");
c01090d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01090da:	8b 04 85 d4 52 15 c0 	mov    -0x3feaad2c(,%eax,4),%eax
c01090e1:	83 ec 08             	sub    $0x8,%esp
c01090e4:	68 99 64 11 c0       	push   $0xc0116499
c01090e9:	50                   	push   %eax
c01090ea:	e8 80 27 00 00       	call   c010b86f <set_proc_name>
c01090ef:	83 c4 10             	add    $0x10,%esp

    int i;

    //check semaphore
    sem_init(&mutex, 1);
    for(i=0;i<N;i++){
c01090f2:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01090f6:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
c01090fa:	0f 8e 68 ff ff ff    	jle    c0109068 <check_sync+0x24>
        philosopher_proc_sema[i] = find_proc(pid);
        set_proc_name(philosopher_proc_sema[i], "philosopher_sema_proc");
    }

    //check condition variable
    monitor_init(&mt, N);
c0109100:	83 ec 08             	sub    $0x8,%esp
c0109103:	6a 05                	push   $0x5
c0109105:	68 a0 52 15 c0       	push   $0xc01552a0
c010910a:	e8 1e 07 00 00       	call   c010982d <monitor_init>
c010910f:	83 c4 10             	add    $0x10,%esp
    for(i=0;i<N;i++){
c0109112:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0109119:	eb 7d                	jmp    c0109198 <check_sync+0x154>
        state_condvar[i]=THINKING;
c010911b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010911e:	c7 04 85 c0 52 15 c0 	movl   $0x0,-0x3feaad40(,%eax,4)
c0109125:	00 00 00 00 
        int pid = kernel_thread(philosopher_using_condvar, (void *)i, 0);
c0109129:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010912c:	83 ec 04             	sub    $0x4,%esp
c010912f:	6a 00                	push   $0x0
c0109131:	50                   	push   %eax
c0109132:	68 92 8f 10 c0       	push   $0xc0108f92
c0109137:	e8 b2 2b 00 00       	call   c010bcee <kernel_thread>
c010913c:	83 c4 10             	add    $0x10,%esp
c010913f:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (pid <= 0) {
c0109142:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0109146:	7f 17                	jg     c010915f <check_sync+0x11b>
            panic("create No.%d philosopher_using_condvar failed.\n");
c0109148:	83 ec 04             	sub    $0x4,%esp
c010914b:	68 b0 64 11 c0       	push   $0xc01164b0
c0109150:	68 04 01 00 00       	push   $0x104
c0109155:	68 82 64 11 c0       	push   $0xc0116482
c010915a:	e8 8e 73 ff ff       	call   c01004ed <__panic>
        }
        philosopher_proc_condvar[i] = find_proc(pid);
c010915f:	83 ec 0c             	sub    $0xc,%esp
c0109162:	ff 75 ec             	pushl  -0x14(%ebp)
c0109165:	e8 12 2b 00 00       	call   c010bc7c <find_proc>
c010916a:	83 c4 10             	add    $0x10,%esp
c010916d:	89 c2                	mov    %eax,%edx
c010916f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109172:	89 14 85 74 52 15 c0 	mov    %edx,-0x3feaad8c(,%eax,4)
        set_proc_name(philosopher_proc_condvar[i], "philosopher_condvar_proc");
c0109179:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010917c:	8b 04 85 74 52 15 c0 	mov    -0x3feaad8c(,%eax,4),%eax
c0109183:	83 ec 08             	sub    $0x8,%esp
c0109186:	68 e0 64 11 c0       	push   $0xc01164e0
c010918b:	50                   	push   %eax
c010918c:	e8 de 26 00 00       	call   c010b86f <set_proc_name>
c0109191:	83 c4 10             	add    $0x10,%esp
        set_proc_name(philosopher_proc_sema[i], "philosopher_sema_proc");
    }

    //check condition variable
    monitor_init(&mt, N);
    for(i=0;i<N;i++){
c0109194:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0109198:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
c010919c:	0f 8e 79 ff ff ff    	jle    c010911b <check_sync+0xd7>
            panic("create No.%d philosopher_using_condvar failed.\n");
        }
        philosopher_proc_condvar[i] = find_proc(pid);
        set_proc_name(philosopher_proc_condvar[i], "philosopher_condvar_proc");
    }
}
c01091a2:	90                   	nop
c01091a3:	c9                   	leave  
c01091a4:	c3                   	ret    

c01091a5 <wait_init>:
#include <sync.h>
#include <wait.h>
#include <proc.h>

void
wait_init(wait_t *wait, struct proc_struct *proc) {
c01091a5:	55                   	push   %ebp
c01091a6:	89 e5                	mov    %esp,%ebp
c01091a8:	83 ec 10             	sub    $0x10,%esp
    wait->proc = proc;
c01091ab:	8b 45 08             	mov    0x8(%ebp),%eax
c01091ae:	8b 55 0c             	mov    0xc(%ebp),%edx
c01091b1:	89 10                	mov    %edx,(%eax)
    wait->wakeup_flags = WT_INTERRUPTED;
c01091b3:	8b 45 08             	mov    0x8(%ebp),%eax
c01091b6:	c7 40 04 00 00 00 80 	movl   $0x80000000,0x4(%eax)
    list_init(&(wait->wait_link));
c01091bd:	8b 45 08             	mov    0x8(%ebp),%eax
c01091c0:	83 c0 0c             	add    $0xc,%eax
c01091c3:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c01091c6:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01091c9:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01091cc:	89 50 04             	mov    %edx,0x4(%eax)
c01091cf:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01091d2:	8b 50 04             	mov    0x4(%eax),%edx
c01091d5:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01091d8:	89 10                	mov    %edx,(%eax)
}
c01091da:	90                   	nop
c01091db:	c9                   	leave  
c01091dc:	c3                   	ret    

c01091dd <wait_queue_init>:

void
wait_queue_init(wait_queue_t *queue) {
c01091dd:	55                   	push   %ebp
c01091de:	89 e5                	mov    %esp,%ebp
c01091e0:	83 ec 10             	sub    $0x10,%esp
    list_init(&(queue->wait_head));
c01091e3:	8b 45 08             	mov    0x8(%ebp),%eax
c01091e6:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01091e9:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01091ec:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01091ef:	89 50 04             	mov    %edx,0x4(%eax)
c01091f2:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01091f5:	8b 50 04             	mov    0x4(%eax),%edx
c01091f8:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01091fb:	89 10                	mov    %edx,(%eax)
}
c01091fd:	90                   	nop
c01091fe:	c9                   	leave  
c01091ff:	c3                   	ret    

c0109200 <wait_queue_add>:

void
wait_queue_add(wait_queue_t *queue, wait_t *wait) {
c0109200:	55                   	push   %ebp
c0109201:	89 e5                	mov    %esp,%ebp
c0109203:	83 ec 28             	sub    $0x28,%esp
    assert(list_empty(&(wait->wait_link)) && wait->proc != NULL);
c0109206:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109209:	83 c0 0c             	add    $0xc,%eax
c010920c:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010920f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109212:	8b 40 04             	mov    0x4(%eax),%eax
c0109215:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0109218:	0f 94 c0             	sete   %al
c010921b:	0f b6 c0             	movzbl %al,%eax
c010921e:	85 c0                	test   %eax,%eax
c0109220:	74 09                	je     c010922b <wait_queue_add+0x2b>
c0109222:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109225:	8b 00                	mov    (%eax),%eax
c0109227:	85 c0                	test   %eax,%eax
c0109229:	75 16                	jne    c0109241 <wait_queue_add+0x41>
c010922b:	68 fc 64 11 c0       	push   $0xc01164fc
c0109230:	68 31 65 11 c0       	push   $0xc0116531
c0109235:	6a 15                	push   $0x15
c0109237:	68 46 65 11 c0       	push   $0xc0116546
c010923c:	e8 ac 72 ff ff       	call   c01004ed <__panic>
    wait->wait_queue = queue;
c0109241:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109244:	8b 55 08             	mov    0x8(%ebp),%edx
c0109247:	89 50 08             	mov    %edx,0x8(%eax)
    list_add_before(&(queue->wait_head), &(wait->wait_link));
c010924a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010924d:	8d 50 0c             	lea    0xc(%eax),%edx
c0109250:	8b 45 08             	mov    0x8(%ebp),%eax
c0109253:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109256:	89 55 ec             	mov    %edx,-0x14(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c0109259:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010925c:	8b 00                	mov    (%eax),%eax
c010925e:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0109261:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0109264:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0109267:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010926a:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010926d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109270:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0109273:	89 10                	mov    %edx,(%eax)
c0109275:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109278:	8b 10                	mov    (%eax),%edx
c010927a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010927d:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0109280:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109283:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0109286:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0109289:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010928c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010928f:	89 10                	mov    %edx,(%eax)
}
c0109291:	90                   	nop
c0109292:	c9                   	leave  
c0109293:	c3                   	ret    

c0109294 <wait_queue_del>:

void
wait_queue_del(wait_queue_t *queue, wait_t *wait) {
c0109294:	55                   	push   %ebp
c0109295:	89 e5                	mov    %esp,%ebp
c0109297:	83 ec 28             	sub    $0x28,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c010929a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010929d:	83 c0 0c             	add    $0xc,%eax
c01092a0:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c01092a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01092a6:	8b 40 04             	mov    0x4(%eax),%eax
c01092a9:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c01092ac:	0f 94 c0             	sete   %al
c01092af:	0f b6 c0             	movzbl %al,%eax
c01092b2:	85 c0                	test   %eax,%eax
c01092b4:	75 0b                	jne    c01092c1 <wait_queue_del+0x2d>
c01092b6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01092b9:	8b 40 08             	mov    0x8(%eax),%eax
c01092bc:	3b 45 08             	cmp    0x8(%ebp),%eax
c01092bf:	74 16                	je     c01092d7 <wait_queue_del+0x43>
c01092c1:	68 58 65 11 c0       	push   $0xc0116558
c01092c6:	68 31 65 11 c0       	push   $0xc0116531
c01092cb:	6a 1c                	push   $0x1c
c01092cd:	68 46 65 11 c0       	push   $0xc0116546
c01092d2:	e8 16 72 ff ff       	call   c01004ed <__panic>
    list_del_init(&(wait->wait_link));
c01092d7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01092da:	83 c0 0c             	add    $0xc,%eax
c01092dd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01092e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01092e3:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c01092e6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01092e9:	8b 40 04             	mov    0x4(%eax),%eax
c01092ec:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01092ef:	8b 12                	mov    (%edx),%edx
c01092f1:	89 55 e8             	mov    %edx,-0x18(%ebp)
c01092f4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c01092f7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01092fa:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01092fd:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0109300:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109303:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0109306:	89 10                	mov    %edx,(%eax)
c0109308:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010930b:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010930e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109311:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0109314:	89 50 04             	mov    %edx,0x4(%eax)
c0109317:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010931a:	8b 50 04             	mov    0x4(%eax),%edx
c010931d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109320:	89 10                	mov    %edx,(%eax)
}
c0109322:	90                   	nop
c0109323:	c9                   	leave  
c0109324:	c3                   	ret    

c0109325 <wait_queue_next>:

wait_t *
wait_queue_next(wait_queue_t *queue, wait_t *wait) {
c0109325:	55                   	push   %ebp
c0109326:	89 e5                	mov    %esp,%ebp
c0109328:	83 ec 18             	sub    $0x18,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c010932b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010932e:	83 c0 0c             	add    $0xc,%eax
c0109331:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0109334:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109337:	8b 40 04             	mov    0x4(%eax),%eax
c010933a:	39 45 ec             	cmp    %eax,-0x14(%ebp)
c010933d:	0f 94 c0             	sete   %al
c0109340:	0f b6 c0             	movzbl %al,%eax
c0109343:	85 c0                	test   %eax,%eax
c0109345:	75 0b                	jne    c0109352 <wait_queue_next+0x2d>
c0109347:	8b 45 0c             	mov    0xc(%ebp),%eax
c010934a:	8b 40 08             	mov    0x8(%eax),%eax
c010934d:	3b 45 08             	cmp    0x8(%ebp),%eax
c0109350:	74 16                	je     c0109368 <wait_queue_next+0x43>
c0109352:	68 58 65 11 c0       	push   $0xc0116558
c0109357:	68 31 65 11 c0       	push   $0xc0116531
c010935c:	6a 22                	push   $0x22
c010935e:	68 46 65 11 c0       	push   $0xc0116546
c0109363:	e8 85 71 ff ff       	call   c01004ed <__panic>
    list_entry_t *le = list_next(&(wait->wait_link));
c0109368:	8b 45 0c             	mov    0xc(%ebp),%eax
c010936b:	83 c0 0c             	add    $0xc,%eax
c010936e:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0109371:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109374:	8b 40 04             	mov    0x4(%eax),%eax
c0109377:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (le != &(queue->wait_head)) {
c010937a:	8b 45 08             	mov    0x8(%ebp),%eax
c010937d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0109380:	74 08                	je     c010938a <wait_queue_next+0x65>
        return le2wait(le, wait_link);
c0109382:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109385:	83 e8 0c             	sub    $0xc,%eax
c0109388:	eb 05                	jmp    c010938f <wait_queue_next+0x6a>
    }
    return NULL;
c010938a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010938f:	c9                   	leave  
c0109390:	c3                   	ret    

c0109391 <wait_queue_prev>:

wait_t *
wait_queue_prev(wait_queue_t *queue, wait_t *wait) {
c0109391:	55                   	push   %ebp
c0109392:	89 e5                	mov    %esp,%ebp
c0109394:	83 ec 18             	sub    $0x18,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c0109397:	8b 45 0c             	mov    0xc(%ebp),%eax
c010939a:	83 c0 0c             	add    $0xc,%eax
c010939d:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c01093a0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01093a3:	8b 40 04             	mov    0x4(%eax),%eax
c01093a6:	39 45 ec             	cmp    %eax,-0x14(%ebp)
c01093a9:	0f 94 c0             	sete   %al
c01093ac:	0f b6 c0             	movzbl %al,%eax
c01093af:	85 c0                	test   %eax,%eax
c01093b1:	75 0b                	jne    c01093be <wait_queue_prev+0x2d>
c01093b3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01093b6:	8b 40 08             	mov    0x8(%eax),%eax
c01093b9:	3b 45 08             	cmp    0x8(%ebp),%eax
c01093bc:	74 16                	je     c01093d4 <wait_queue_prev+0x43>
c01093be:	68 58 65 11 c0       	push   $0xc0116558
c01093c3:	68 31 65 11 c0       	push   $0xc0116531
c01093c8:	6a 2c                	push   $0x2c
c01093ca:	68 46 65 11 c0       	push   $0xc0116546
c01093cf:	e8 19 71 ff ff       	call   c01004ed <__panic>
    list_entry_t *le = list_prev(&(wait->wait_link));
c01093d4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01093d7:	83 c0 0c             	add    $0xc,%eax
c01093da:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c01093dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01093e0:	8b 00                	mov    (%eax),%eax
c01093e2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (le != &(queue->wait_head)) {
c01093e5:	8b 45 08             	mov    0x8(%ebp),%eax
c01093e8:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01093eb:	74 08                	je     c01093f5 <wait_queue_prev+0x64>
        return le2wait(le, wait_link);
c01093ed:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01093f0:	83 e8 0c             	sub    $0xc,%eax
c01093f3:	eb 05                	jmp    c01093fa <wait_queue_prev+0x69>
    }
    return NULL;
c01093f5:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01093fa:	c9                   	leave  
c01093fb:	c3                   	ret    

c01093fc <wait_queue_first>:

wait_t *
wait_queue_first(wait_queue_t *queue) {
c01093fc:	55                   	push   %ebp
c01093fd:	89 e5                	mov    %esp,%ebp
c01093ff:	83 ec 10             	sub    $0x10,%esp
    list_entry_t *le = list_next(&(queue->wait_head));
c0109402:	8b 45 08             	mov    0x8(%ebp),%eax
c0109405:	89 45 f8             	mov    %eax,-0x8(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0109408:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010940b:	8b 40 04             	mov    0x4(%eax),%eax
c010940e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (le != &(queue->wait_head)) {
c0109411:	8b 45 08             	mov    0x8(%ebp),%eax
c0109414:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0109417:	74 08                	je     c0109421 <wait_queue_first+0x25>
        return le2wait(le, wait_link);
c0109419:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010941c:	83 e8 0c             	sub    $0xc,%eax
c010941f:	eb 05                	jmp    c0109426 <wait_queue_first+0x2a>
    }
    return NULL;
c0109421:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109426:	c9                   	leave  
c0109427:	c3                   	ret    

c0109428 <wait_queue_last>:

wait_t *
wait_queue_last(wait_queue_t *queue) {
c0109428:	55                   	push   %ebp
c0109429:	89 e5                	mov    %esp,%ebp
c010942b:	83 ec 10             	sub    $0x10,%esp
    list_entry_t *le = list_prev(&(queue->wait_head));
c010942e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109431:	89 45 f8             	mov    %eax,-0x8(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c0109434:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0109437:	8b 00                	mov    (%eax),%eax
c0109439:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (le != &(queue->wait_head)) {
c010943c:	8b 45 08             	mov    0x8(%ebp),%eax
c010943f:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0109442:	74 08                	je     c010944c <wait_queue_last+0x24>
        return le2wait(le, wait_link);
c0109444:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109447:	83 e8 0c             	sub    $0xc,%eax
c010944a:	eb 05                	jmp    c0109451 <wait_queue_last+0x29>
    }
    return NULL;
c010944c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109451:	c9                   	leave  
c0109452:	c3                   	ret    

c0109453 <wait_queue_empty>:

bool
wait_queue_empty(wait_queue_t *queue) {
c0109453:	55                   	push   %ebp
c0109454:	89 e5                	mov    %esp,%ebp
c0109456:	83 ec 10             	sub    $0x10,%esp
    return list_empty(&(queue->wait_head));
c0109459:	8b 45 08             	mov    0x8(%ebp),%eax
c010945c:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010945f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109462:	8b 40 04             	mov    0x4(%eax),%eax
c0109465:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c0109468:	0f 94 c0             	sete   %al
c010946b:	0f b6 c0             	movzbl %al,%eax
c010946e:	90                   	nop
}
c010946f:	c9                   	leave  
c0109470:	c3                   	ret    

c0109471 <wait_in_queue>:

bool
wait_in_queue(wait_t *wait) {
c0109471:	55                   	push   %ebp
c0109472:	89 e5                	mov    %esp,%ebp
c0109474:	83 ec 10             	sub    $0x10,%esp
    return !list_empty(&(wait->wait_link));
c0109477:	8b 45 08             	mov    0x8(%ebp),%eax
c010947a:	83 c0 0c             	add    $0xc,%eax
c010947d:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0109480:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109483:	8b 40 04             	mov    0x4(%eax),%eax
c0109486:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c0109489:	0f 94 c0             	sete   %al
c010948c:	0f b6 c0             	movzbl %al,%eax
c010948f:	85 c0                	test   %eax,%eax
c0109491:	0f 94 c0             	sete   %al
c0109494:	0f b6 c0             	movzbl %al,%eax
}
c0109497:	c9                   	leave  
c0109498:	c3                   	ret    

c0109499 <wakeup_wait>:

void
wakeup_wait(wait_queue_t *queue, wait_t *wait, uint32_t wakeup_flags, bool del) {
c0109499:	55                   	push   %ebp
c010949a:	89 e5                	mov    %esp,%ebp
c010949c:	83 ec 08             	sub    $0x8,%esp
    if (del) {
c010949f:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c01094a3:	74 11                	je     c01094b6 <wakeup_wait+0x1d>
        wait_queue_del(queue, wait);
c01094a5:	83 ec 08             	sub    $0x8,%esp
c01094a8:	ff 75 0c             	pushl  0xc(%ebp)
c01094ab:	ff 75 08             	pushl  0x8(%ebp)
c01094ae:	e8 e1 fd ff ff       	call   c0109294 <wait_queue_del>
c01094b3:	83 c4 10             	add    $0x10,%esp
    }
    wait->wakeup_flags = wakeup_flags;
c01094b6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01094b9:	8b 55 10             	mov    0x10(%ebp),%edx
c01094bc:	89 50 04             	mov    %edx,0x4(%eax)
    wakeup_proc(wait->proc);
c01094bf:	8b 45 0c             	mov    0xc(%ebp),%eax
c01094c2:	8b 00                	mov    (%eax),%eax
c01094c4:	83 ec 0c             	sub    $0xc,%esp
c01094c7:	50                   	push   %eax
c01094c8:	e8 0f 43 00 00       	call   c010d7dc <wakeup_proc>
c01094cd:	83 c4 10             	add    $0x10,%esp
}
c01094d0:	90                   	nop
c01094d1:	c9                   	leave  
c01094d2:	c3                   	ret    

c01094d3 <wakeup_first>:

void
wakeup_first(wait_queue_t *queue, uint32_t wakeup_flags, bool del) {
c01094d3:	55                   	push   %ebp
c01094d4:	89 e5                	mov    %esp,%ebp
c01094d6:	83 ec 18             	sub    $0x18,%esp
    wait_t *wait;
    if ((wait = wait_queue_first(queue)) != NULL) {
c01094d9:	ff 75 08             	pushl  0x8(%ebp)
c01094dc:	e8 1b ff ff ff       	call   c01093fc <wait_queue_first>
c01094e1:	83 c4 04             	add    $0x4,%esp
c01094e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01094e7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01094eb:	74 14                	je     c0109501 <wakeup_first+0x2e>
        wakeup_wait(queue, wait, wakeup_flags, del);
c01094ed:	ff 75 10             	pushl  0x10(%ebp)
c01094f0:	ff 75 0c             	pushl  0xc(%ebp)
c01094f3:	ff 75 f4             	pushl  -0xc(%ebp)
c01094f6:	ff 75 08             	pushl  0x8(%ebp)
c01094f9:	e8 9b ff ff ff       	call   c0109499 <wakeup_wait>
c01094fe:	83 c4 10             	add    $0x10,%esp
    }
}
c0109501:	90                   	nop
c0109502:	c9                   	leave  
c0109503:	c3                   	ret    

c0109504 <wakeup_queue>:

void
wakeup_queue(wait_queue_t *queue, uint32_t wakeup_flags, bool del) {
c0109504:	55                   	push   %ebp
c0109505:	89 e5                	mov    %esp,%ebp
c0109507:	83 ec 18             	sub    $0x18,%esp
    wait_t *wait;
    if ((wait = wait_queue_first(queue)) != NULL) {
c010950a:	ff 75 08             	pushl  0x8(%ebp)
c010950d:	e8 ea fe ff ff       	call   c01093fc <wait_queue_first>
c0109512:	83 c4 04             	add    $0x4,%esp
c0109515:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109518:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010951c:	74 5f                	je     c010957d <wakeup_queue+0x79>
        if (del) {
c010951e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0109522:	74 2c                	je     c0109550 <wakeup_queue+0x4c>
            do {
                wakeup_wait(queue, wait, wakeup_flags, 1);
c0109524:	6a 01                	push   $0x1
c0109526:	ff 75 0c             	pushl  0xc(%ebp)
c0109529:	ff 75 f4             	pushl  -0xc(%ebp)
c010952c:	ff 75 08             	pushl  0x8(%ebp)
c010952f:	e8 65 ff ff ff       	call   c0109499 <wakeup_wait>
c0109534:	83 c4 10             	add    $0x10,%esp
            } while ((wait = wait_queue_first(queue)) != NULL);
c0109537:	83 ec 0c             	sub    $0xc,%esp
c010953a:	ff 75 08             	pushl  0x8(%ebp)
c010953d:	e8 ba fe ff ff       	call   c01093fc <wait_queue_first>
c0109542:	83 c4 10             	add    $0x10,%esp
c0109545:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109548:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010954c:	75 d6                	jne    c0109524 <wakeup_queue+0x20>
            do {
                wakeup_wait(queue, wait, wakeup_flags, 0);
            } while ((wait = wait_queue_next(queue, wait)) != NULL);
        }
    }
}
c010954e:	eb 2d                	jmp    c010957d <wakeup_queue+0x79>
                wakeup_wait(queue, wait, wakeup_flags, 1);
            } while ((wait = wait_queue_first(queue)) != NULL);
        }
        else {
            do {
                wakeup_wait(queue, wait, wakeup_flags, 0);
c0109550:	6a 00                	push   $0x0
c0109552:	ff 75 0c             	pushl  0xc(%ebp)
c0109555:	ff 75 f4             	pushl  -0xc(%ebp)
c0109558:	ff 75 08             	pushl  0x8(%ebp)
c010955b:	e8 39 ff ff ff       	call   c0109499 <wakeup_wait>
c0109560:	83 c4 10             	add    $0x10,%esp
            } while ((wait = wait_queue_next(queue, wait)) != NULL);
c0109563:	83 ec 08             	sub    $0x8,%esp
c0109566:	ff 75 f4             	pushl  -0xc(%ebp)
c0109569:	ff 75 08             	pushl  0x8(%ebp)
c010956c:	e8 b4 fd ff ff       	call   c0109325 <wait_queue_next>
c0109571:	83 c4 10             	add    $0x10,%esp
c0109574:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109577:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010957b:	75 d3                	jne    c0109550 <wakeup_queue+0x4c>
        }
    }
}
c010957d:	90                   	nop
c010957e:	c9                   	leave  
c010957f:	c3                   	ret    

c0109580 <wait_current_set>:

void
wait_current_set(wait_queue_t *queue, wait_t *wait, uint32_t wait_state) {
c0109580:	55                   	push   %ebp
c0109581:	89 e5                	mov    %esp,%ebp
c0109583:	83 ec 08             	sub    $0x8,%esp
    assert(current != NULL);
c0109586:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010958b:	85 c0                	test   %eax,%eax
c010958d:	75 16                	jne    c01095a5 <wait_current_set+0x25>
c010958f:	68 95 65 11 c0       	push   $0xc0116595
c0109594:	68 31 65 11 c0       	push   $0xc0116531
c0109599:	6a 74                	push   $0x74
c010959b:	68 46 65 11 c0       	push   $0xc0116546
c01095a0:	e8 48 6f ff ff       	call   c01004ed <__panic>
    wait_init(wait, current);
c01095a5:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c01095aa:	83 ec 08             	sub    $0x8,%esp
c01095ad:	50                   	push   %eax
c01095ae:	ff 75 0c             	pushl  0xc(%ebp)
c01095b1:	e8 ef fb ff ff       	call   c01091a5 <wait_init>
c01095b6:	83 c4 10             	add    $0x10,%esp
    current->state = PROC_SLEEPING;
c01095b9:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c01095be:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    current->wait_state = wait_state;
c01095c4:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c01095c9:	8b 55 10             	mov    0x10(%ebp),%edx
c01095cc:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)
    wait_queue_add(queue, wait);
c01095d2:	83 ec 08             	sub    $0x8,%esp
c01095d5:	ff 75 0c             	pushl  0xc(%ebp)
c01095d8:	ff 75 08             	pushl  0x8(%ebp)
c01095db:	e8 20 fc ff ff       	call   c0109200 <wait_queue_add>
c01095e0:	83 c4 10             	add    $0x10,%esp
}
c01095e3:	90                   	nop
c01095e4:	c9                   	leave  
c01095e5:	c3                   	ret    

c01095e6 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c01095e6:	55                   	push   %ebp
c01095e7:	89 e5                	mov    %esp,%ebp
c01095e9:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c01095ec:	9c                   	pushf  
c01095ed:	58                   	pop    %eax
c01095ee:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c01095f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c01095f4:	25 00 02 00 00       	and    $0x200,%eax
c01095f9:	85 c0                	test   %eax,%eax
c01095fb:	74 0c                	je     c0109609 <__intr_save+0x23>
        intr_disable();
c01095fd:	e8 b4 8c ff ff       	call   c01022b6 <intr_disable>
        return 1;
c0109602:	b8 01 00 00 00       	mov    $0x1,%eax
c0109607:	eb 05                	jmp    c010960e <__intr_save+0x28>
    }
    return 0;
c0109609:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010960e:	c9                   	leave  
c010960f:	c3                   	ret    

c0109610 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0109610:	55                   	push   %ebp
c0109611:	89 e5                	mov    %esp,%ebp
c0109613:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0109616:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010961a:	74 05                	je     c0109621 <__intr_restore+0x11>
        intr_enable();
c010961c:	e8 8e 8c ff ff       	call   c01022af <intr_enable>
    }
}
c0109621:	90                   	nop
c0109622:	c9                   	leave  
c0109623:	c3                   	ret    

c0109624 <sem_init>:
#include <proc.h>
#include <sync.h>
#include <assert.h>

void
sem_init(semaphore_t *sem, int value) {
c0109624:	55                   	push   %ebp
c0109625:	89 e5                	mov    %esp,%ebp
c0109627:	83 ec 08             	sub    $0x8,%esp
    sem->value = value;
c010962a:	8b 45 08             	mov    0x8(%ebp),%eax
c010962d:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109630:	89 10                	mov    %edx,(%eax)
    wait_queue_init(&(sem->wait_queue));
c0109632:	8b 45 08             	mov    0x8(%ebp),%eax
c0109635:	83 c0 04             	add    $0x4,%eax
c0109638:	83 ec 0c             	sub    $0xc,%esp
c010963b:	50                   	push   %eax
c010963c:	e8 9c fb ff ff       	call   c01091dd <wait_queue_init>
c0109641:	83 c4 10             	add    $0x10,%esp
}
c0109644:	90                   	nop
c0109645:	c9                   	leave  
c0109646:	c3                   	ret    

c0109647 <__up>:

static __noinline void __up(semaphore_t *sem, uint32_t wait_state) {
c0109647:	55                   	push   %ebp
c0109648:	89 e5                	mov    %esp,%ebp
c010964a:	83 ec 18             	sub    $0x18,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010964d:	e8 94 ff ff ff       	call   c01095e6 <__intr_save>
c0109652:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        wait_t *wait;
        if ((wait = wait_queue_first(&(sem->wait_queue))) == NULL) {
c0109655:	8b 45 08             	mov    0x8(%ebp),%eax
c0109658:	83 c0 04             	add    $0x4,%eax
c010965b:	83 ec 0c             	sub    $0xc,%esp
c010965e:	50                   	push   %eax
c010965f:	e8 98 fd ff ff       	call   c01093fc <wait_queue_first>
c0109664:	83 c4 10             	add    $0x10,%esp
c0109667:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010966a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010966e:	75 0f                	jne    c010967f <__up+0x38>
            sem->value ++;
c0109670:	8b 45 08             	mov    0x8(%ebp),%eax
c0109673:	8b 00                	mov    (%eax),%eax
c0109675:	8d 50 01             	lea    0x1(%eax),%edx
c0109678:	8b 45 08             	mov    0x8(%ebp),%eax
c010967b:	89 10                	mov    %edx,(%eax)
c010967d:	eb 3d                	jmp    c01096bc <__up+0x75>
        }
        else {
            assert(wait->proc->wait_state == wait_state);
c010967f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109682:	8b 00                	mov    (%eax),%eax
c0109684:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010968a:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010968d:	74 16                	je     c01096a5 <__up+0x5e>
c010968f:	68 a8 65 11 c0       	push   $0xc01165a8
c0109694:	68 cd 65 11 c0       	push   $0xc01165cd
c0109699:	6a 19                	push   $0x19
c010969b:	68 e2 65 11 c0       	push   $0xc01165e2
c01096a0:	e8 48 6e ff ff       	call   c01004ed <__panic>
            wakeup_wait(&(sem->wait_queue), wait, wait_state, 1);
c01096a5:	8b 45 08             	mov    0x8(%ebp),%eax
c01096a8:	83 c0 04             	add    $0x4,%eax
c01096ab:	6a 01                	push   $0x1
c01096ad:	ff 75 0c             	pushl  0xc(%ebp)
c01096b0:	ff 75 f0             	pushl  -0x10(%ebp)
c01096b3:	50                   	push   %eax
c01096b4:	e8 e0 fd ff ff       	call   c0109499 <wakeup_wait>
c01096b9:	83 c4 10             	add    $0x10,%esp
        }
    }
    local_intr_restore(intr_flag);
c01096bc:	83 ec 0c             	sub    $0xc,%esp
c01096bf:	ff 75 f4             	pushl  -0xc(%ebp)
c01096c2:	e8 49 ff ff ff       	call   c0109610 <__intr_restore>
c01096c7:	83 c4 10             	add    $0x10,%esp
}
c01096ca:	90                   	nop
c01096cb:	c9                   	leave  
c01096cc:	c3                   	ret    

c01096cd <__down>:

static __noinline uint32_t __down(semaphore_t *sem, uint32_t wait_state) {
c01096cd:	55                   	push   %ebp
c01096ce:	89 e5                	mov    %esp,%ebp
c01096d0:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c01096d3:	e8 0e ff ff ff       	call   c01095e6 <__intr_save>
c01096d8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (sem->value > 0) {
c01096db:	8b 45 08             	mov    0x8(%ebp),%eax
c01096de:	8b 00                	mov    (%eax),%eax
c01096e0:	85 c0                	test   %eax,%eax
c01096e2:	7e 25                	jle    c0109709 <__down+0x3c>
        sem->value --;
c01096e4:	8b 45 08             	mov    0x8(%ebp),%eax
c01096e7:	8b 00                	mov    (%eax),%eax
c01096e9:	8d 50 ff             	lea    -0x1(%eax),%edx
c01096ec:	8b 45 08             	mov    0x8(%ebp),%eax
c01096ef:	89 10                	mov    %edx,(%eax)
        local_intr_restore(intr_flag);
c01096f1:	83 ec 0c             	sub    $0xc,%esp
c01096f4:	ff 75 f4             	pushl  -0xc(%ebp)
c01096f7:	e8 14 ff ff ff       	call   c0109610 <__intr_restore>
c01096fc:	83 c4 10             	add    $0x10,%esp
        return 0;
c01096ff:	b8 00 00 00 00       	mov    $0x0,%eax
c0109704:	e9 86 00 00 00       	jmp    c010978f <__down+0xc2>
    }
    wait_t __wait, *wait = &__wait;
c0109709:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010970c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    wait_current_set(&(sem->wait_queue), wait, wait_state);
c010970f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109712:	83 c0 04             	add    $0x4,%eax
c0109715:	83 ec 04             	sub    $0x4,%esp
c0109718:	ff 75 0c             	pushl  0xc(%ebp)
c010971b:	ff 75 f0             	pushl  -0x10(%ebp)
c010971e:	50                   	push   %eax
c010971f:	e8 5c fe ff ff       	call   c0109580 <wait_current_set>
c0109724:	83 c4 10             	add    $0x10,%esp
    local_intr_restore(intr_flag);
c0109727:	83 ec 0c             	sub    $0xc,%esp
c010972a:	ff 75 f4             	pushl  -0xc(%ebp)
c010972d:	e8 de fe ff ff       	call   c0109610 <__intr_restore>
c0109732:	83 c4 10             	add    $0x10,%esp

    schedule();
c0109735:	e8 32 41 00 00       	call   c010d86c <schedule>

    local_intr_save(intr_flag);
c010973a:	e8 a7 fe ff ff       	call   c01095e6 <__intr_save>
c010973f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    wait_current_del(&(sem->wait_queue), wait);
c0109742:	83 ec 0c             	sub    $0xc,%esp
c0109745:	ff 75 f0             	pushl  -0x10(%ebp)
c0109748:	e8 24 fd ff ff       	call   c0109471 <wait_in_queue>
c010974d:	83 c4 10             	add    $0x10,%esp
c0109750:	85 c0                	test   %eax,%eax
c0109752:	74 15                	je     c0109769 <__down+0x9c>
c0109754:	8b 45 08             	mov    0x8(%ebp),%eax
c0109757:	83 c0 04             	add    $0x4,%eax
c010975a:	83 ec 08             	sub    $0x8,%esp
c010975d:	ff 75 f0             	pushl  -0x10(%ebp)
c0109760:	50                   	push   %eax
c0109761:	e8 2e fb ff ff       	call   c0109294 <wait_queue_del>
c0109766:	83 c4 10             	add    $0x10,%esp
    local_intr_restore(intr_flag);
c0109769:	83 ec 0c             	sub    $0xc,%esp
c010976c:	ff 75 f4             	pushl  -0xc(%ebp)
c010976f:	e8 9c fe ff ff       	call   c0109610 <__intr_restore>
c0109774:	83 c4 10             	add    $0x10,%esp

    if (wait->wakeup_flags != wait_state) {
c0109777:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010977a:	8b 40 04             	mov    0x4(%eax),%eax
c010977d:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0109780:	74 08                	je     c010978a <__down+0xbd>
        return wait->wakeup_flags;
c0109782:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109785:	8b 40 04             	mov    0x4(%eax),%eax
c0109788:	eb 05                	jmp    c010978f <__down+0xc2>
    }
    return 0;
c010978a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010978f:	c9                   	leave  
c0109790:	c3                   	ret    

c0109791 <up>:

void
up(semaphore_t *sem) {
c0109791:	55                   	push   %ebp
c0109792:	89 e5                	mov    %esp,%ebp
c0109794:	83 ec 08             	sub    $0x8,%esp
    __up(sem, WT_KSEM);
c0109797:	83 ec 08             	sub    $0x8,%esp
c010979a:	68 00 01 00 00       	push   $0x100
c010979f:	ff 75 08             	pushl  0x8(%ebp)
c01097a2:	e8 a0 fe ff ff       	call   c0109647 <__up>
c01097a7:	83 c4 10             	add    $0x10,%esp
}
c01097aa:	90                   	nop
c01097ab:	c9                   	leave  
c01097ac:	c3                   	ret    

c01097ad <down>:

void
down(semaphore_t *sem) {
c01097ad:	55                   	push   %ebp
c01097ae:	89 e5                	mov    %esp,%ebp
c01097b0:	83 ec 18             	sub    $0x18,%esp
    uint32_t flags = __down(sem, WT_KSEM);
c01097b3:	83 ec 08             	sub    $0x8,%esp
c01097b6:	68 00 01 00 00       	push   $0x100
c01097bb:	ff 75 08             	pushl  0x8(%ebp)
c01097be:	e8 0a ff ff ff       	call   c01096cd <__down>
c01097c3:	83 c4 10             	add    $0x10,%esp
c01097c6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(flags == 0);
c01097c9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01097cd:	74 16                	je     c01097e5 <down+0x38>
c01097cf:	68 f2 65 11 c0       	push   $0xc01165f2
c01097d4:	68 cd 65 11 c0       	push   $0xc01165cd
c01097d9:	6a 40                	push   $0x40
c01097db:	68 e2 65 11 c0       	push   $0xc01165e2
c01097e0:	e8 08 6d ff ff       	call   c01004ed <__panic>
}
c01097e5:	90                   	nop
c01097e6:	c9                   	leave  
c01097e7:	c3                   	ret    

c01097e8 <try_down>:

bool
try_down(semaphore_t *sem) {
c01097e8:	55                   	push   %ebp
c01097e9:	89 e5                	mov    %esp,%ebp
c01097eb:	83 ec 18             	sub    $0x18,%esp
    bool intr_flag, ret = 0;
c01097ee:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    local_intr_save(intr_flag);
c01097f5:	e8 ec fd ff ff       	call   c01095e6 <__intr_save>
c01097fa:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (sem->value > 0) {
c01097fd:	8b 45 08             	mov    0x8(%ebp),%eax
c0109800:	8b 00                	mov    (%eax),%eax
c0109802:	85 c0                	test   %eax,%eax
c0109804:	7e 14                	jle    c010981a <try_down+0x32>
        sem->value --, ret = 1;
c0109806:	8b 45 08             	mov    0x8(%ebp),%eax
c0109809:	8b 00                	mov    (%eax),%eax
c010980b:	8d 50 ff             	lea    -0x1(%eax),%edx
c010980e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109811:	89 10                	mov    %edx,(%eax)
c0109813:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    }
    local_intr_restore(intr_flag);
c010981a:	83 ec 0c             	sub    $0xc,%esp
c010981d:	ff 75 f0             	pushl  -0x10(%ebp)
c0109820:	e8 eb fd ff ff       	call   c0109610 <__intr_restore>
c0109825:	83 c4 10             	add    $0x10,%esp
    return ret;
c0109828:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010982b:	c9                   	leave  
c010982c:	c3                   	ret    

c010982d <monitor_init>:
#include <assert.h>


// Initialize monitor.
void     
monitor_init (monitor_t * mtp, size_t num_cv) {
c010982d:	55                   	push   %ebp
c010982e:	89 e5                	mov    %esp,%ebp
c0109830:	83 ec 18             	sub    $0x18,%esp
    int i;
    assert(num_cv>0);
c0109833:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0109837:	75 16                	jne    c010984f <monitor_init+0x22>
c0109839:	68 00 66 11 c0       	push   $0xc0116600
c010983e:	68 09 66 11 c0       	push   $0xc0116609
c0109843:	6a 0b                	push   $0xb
c0109845:	68 1e 66 11 c0       	push   $0xc011661e
c010984a:	e8 9e 6c ff ff       	call   c01004ed <__panic>
    mtp->next_count = 0;
c010984f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109852:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    mtp->cv = NULL;
c0109859:	8b 45 08             	mov    0x8(%ebp),%eax
c010985c:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    sem_init(&(mtp->mutex), 1); //unlocked
c0109863:	8b 45 08             	mov    0x8(%ebp),%eax
c0109866:	83 ec 08             	sub    $0x8,%esp
c0109869:	6a 01                	push   $0x1
c010986b:	50                   	push   %eax
c010986c:	e8 b3 fd ff ff       	call   c0109624 <sem_init>
c0109871:	83 c4 10             	add    $0x10,%esp
    sem_init(&(mtp->next), 0);
c0109874:	8b 45 08             	mov    0x8(%ebp),%eax
c0109877:	83 c0 0c             	add    $0xc,%eax
c010987a:	83 ec 08             	sub    $0x8,%esp
c010987d:	6a 00                	push   $0x0
c010987f:	50                   	push   %eax
c0109880:	e8 9f fd ff ff       	call   c0109624 <sem_init>
c0109885:	83 c4 10             	add    $0x10,%esp
    mtp->cv =(condvar_t *) kmalloc(sizeof(condvar_t)*num_cv);
c0109888:	8b 55 0c             	mov    0xc(%ebp),%edx
c010988b:	89 d0                	mov    %edx,%eax
c010988d:	c1 e0 02             	shl    $0x2,%eax
c0109890:	01 d0                	add    %edx,%eax
c0109892:	c1 e0 02             	shl    $0x2,%eax
c0109895:	83 ec 0c             	sub    $0xc,%esp
c0109898:	50                   	push   %eax
c0109899:	e8 64 ba ff ff       	call   c0105302 <kmalloc>
c010989e:	83 c4 10             	add    $0x10,%esp
c01098a1:	89 c2                	mov    %eax,%edx
c01098a3:	8b 45 08             	mov    0x8(%ebp),%eax
c01098a6:	89 50 1c             	mov    %edx,0x1c(%eax)
    assert(mtp->cv!=NULL);
c01098a9:	8b 45 08             	mov    0x8(%ebp),%eax
c01098ac:	8b 40 1c             	mov    0x1c(%eax),%eax
c01098af:	85 c0                	test   %eax,%eax
c01098b1:	75 16                	jne    c01098c9 <monitor_init+0x9c>
c01098b3:	68 32 66 11 c0       	push   $0xc0116632
c01098b8:	68 09 66 11 c0       	push   $0xc0116609
c01098bd:	6a 11                	push   $0x11
c01098bf:	68 1e 66 11 c0       	push   $0xc011661e
c01098c4:	e8 24 6c ff ff       	call   c01004ed <__panic>
    for(i=0; i<num_cv; i++){
c01098c9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01098d0:	eb 5f                	jmp    c0109931 <monitor_init+0x104>
        mtp->cv[i].count=0;
c01098d2:	8b 45 08             	mov    0x8(%ebp),%eax
c01098d5:	8b 48 1c             	mov    0x1c(%eax),%ecx
c01098d8:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01098db:	89 d0                	mov    %edx,%eax
c01098dd:	c1 e0 02             	shl    $0x2,%eax
c01098e0:	01 d0                	add    %edx,%eax
c01098e2:	c1 e0 02             	shl    $0x2,%eax
c01098e5:	01 c8                	add    %ecx,%eax
c01098e7:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        sem_init(&(mtp->cv[i].sem),0);
c01098ee:	8b 45 08             	mov    0x8(%ebp),%eax
c01098f1:	8b 48 1c             	mov    0x1c(%eax),%ecx
c01098f4:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01098f7:	89 d0                	mov    %edx,%eax
c01098f9:	c1 e0 02             	shl    $0x2,%eax
c01098fc:	01 d0                	add    %edx,%eax
c01098fe:	c1 e0 02             	shl    $0x2,%eax
c0109901:	01 c8                	add    %ecx,%eax
c0109903:	83 ec 08             	sub    $0x8,%esp
c0109906:	6a 00                	push   $0x0
c0109908:	50                   	push   %eax
c0109909:	e8 16 fd ff ff       	call   c0109624 <sem_init>
c010990e:	83 c4 10             	add    $0x10,%esp
        mtp->cv[i].owner=mtp;
c0109911:	8b 45 08             	mov    0x8(%ebp),%eax
c0109914:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0109917:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010991a:	89 d0                	mov    %edx,%eax
c010991c:	c1 e0 02             	shl    $0x2,%eax
c010991f:	01 d0                	add    %edx,%eax
c0109921:	c1 e0 02             	shl    $0x2,%eax
c0109924:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c0109927:	8b 45 08             	mov    0x8(%ebp),%eax
c010992a:	89 42 10             	mov    %eax,0x10(%edx)
    mtp->cv = NULL;
    sem_init(&(mtp->mutex), 1); //unlocked
    sem_init(&(mtp->next), 0);
    mtp->cv =(condvar_t *) kmalloc(sizeof(condvar_t)*num_cv);
    assert(mtp->cv!=NULL);
    for(i=0; i<num_cv; i++){
c010992d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0109931:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109934:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0109937:	72 99                	jb     c01098d2 <monitor_init+0xa5>
        mtp->cv[i].count=0;
        sem_init(&(mtp->cv[i].sem),0);
        mtp->cv[i].owner=mtp;
    }
}
c0109939:	90                   	nop
c010993a:	c9                   	leave  
c010993b:	c3                   	ret    

c010993c <cond_signal>:

// Unlock one of threads waiting on the condition variable. 
void 
cond_signal (condvar_t *cvp) {
c010993c:	55                   	push   %ebp
c010993d:	89 e5                	mov    %esp,%ebp
c010993f:	83 ec 18             	sub    $0x18,%esp
    //LAB7 EXERCISE1: YOUR CODE
    cprintf("cond_signal begin: cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);  
c0109942:	8b 45 08             	mov    0x8(%ebp),%eax
c0109945:	8b 40 10             	mov    0x10(%eax),%eax
c0109948:	8b 50 18             	mov    0x18(%eax),%edx
c010994b:	8b 45 08             	mov    0x8(%ebp),%eax
c010994e:	8b 40 0c             	mov    0xc(%eax),%eax
c0109951:	52                   	push   %edx
c0109952:	50                   	push   %eax
c0109953:	ff 75 08             	pushl  0x8(%ebp)
c0109956:	68 40 66 11 c0       	push   $0xc0116640
c010995b:	e8 27 6a ff ff       	call   c0100387 <cprintf>
c0109960:	83 c4 10             	add    $0x10,%esp
   *             wait(mt.next);
   *             mt.next_count--;
   *          }
   *       }
   */
    if(cvp->count > 0) {
c0109963:	8b 45 08             	mov    0x8(%ebp),%eax
c0109966:	8b 40 0c             	mov    0xc(%eax),%eax
c0109969:	85 c0                	test   %eax,%eax
c010996b:	7e 48                	jle    c01099b5 <cond_signal+0x79>
        monitor_t * mt = cvp->owner;
c010996d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109970:	8b 40 10             	mov    0x10(%eax),%eax
c0109973:	89 45 f4             	mov    %eax,-0xc(%ebp)
        mt->next_count ++;
c0109976:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109979:	8b 40 18             	mov    0x18(%eax),%eax
c010997c:	8d 50 01             	lea    0x1(%eax),%edx
c010997f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109982:	89 50 18             	mov    %edx,0x18(%eax)
        up(&(cvp->sem));
c0109985:	8b 45 08             	mov    0x8(%ebp),%eax
c0109988:	83 ec 0c             	sub    $0xc,%esp
c010998b:	50                   	push   %eax
c010998c:	e8 00 fe ff ff       	call   c0109791 <up>
c0109991:	83 c4 10             	add    $0x10,%esp
        down(&(mt->next));
c0109994:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109997:	83 c0 0c             	add    $0xc,%eax
c010999a:	83 ec 0c             	sub    $0xc,%esp
c010999d:	50                   	push   %eax
c010999e:	e8 0a fe ff ff       	call   c01097ad <down>
c01099a3:	83 c4 10             	add    $0x10,%esp
        // after woken up
        mt->next_count--;
c01099a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01099a9:	8b 40 18             	mov    0x18(%eax),%eax
c01099ac:	8d 50 ff             	lea    -0x1(%eax),%edx
c01099af:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01099b2:	89 50 18             	mov    %edx,0x18(%eax)
    }
    cprintf("cond_signal end: cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c01099b5:	8b 45 08             	mov    0x8(%ebp),%eax
c01099b8:	8b 40 10             	mov    0x10(%eax),%eax
c01099bb:	8b 50 18             	mov    0x18(%eax),%edx
c01099be:	8b 45 08             	mov    0x8(%ebp),%eax
c01099c1:	8b 40 0c             	mov    0xc(%eax),%eax
c01099c4:	52                   	push   %edx
c01099c5:	50                   	push   %eax
c01099c6:	ff 75 08             	pushl  0x8(%ebp)
c01099c9:	68 88 66 11 c0       	push   $0xc0116688
c01099ce:	e8 b4 69 ff ff       	call   c0100387 <cprintf>
c01099d3:	83 c4 10             	add    $0x10,%esp
}
c01099d6:	90                   	nop
c01099d7:	c9                   	leave  
c01099d8:	c3                   	ret    

c01099d9 <cond_wait>:

// Suspend calling thread on a condition variable waiting for condition Atomically unlocks 
// mutex and suspends calling thread on conditional variable after waking up locks mutex. Notice: mp is mutex semaphore for monitor's procedures
void
cond_wait (condvar_t *cvp) {
c01099d9:	55                   	push   %ebp
c01099da:	89 e5                	mov    %esp,%ebp
c01099dc:	83 ec 18             	sub    $0x18,%esp
    //LAB7 EXERCISE1: YOUR CODE
    cprintf("cond_wait begin:  cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c01099df:	8b 45 08             	mov    0x8(%ebp),%eax
c01099e2:	8b 40 10             	mov    0x10(%eax),%eax
c01099e5:	8b 50 18             	mov    0x18(%eax),%edx
c01099e8:	8b 45 08             	mov    0x8(%ebp),%eax
c01099eb:	8b 40 0c             	mov    0xc(%eax),%eax
c01099ee:	52                   	push   %edx
c01099ef:	50                   	push   %eax
c01099f0:	ff 75 08             	pushl  0x8(%ebp)
c01099f3:	68 cc 66 11 c0       	push   $0xc01166cc
c01099f8:	e8 8a 69 ff ff       	call   c0100387 <cprintf>
c01099fd:	83 c4 10             	add    $0x10,%esp
    *         else
    *            signal(mt.mutex);
    *         wait(cv.sem);
    *         cv.count --;
    */
    cvp->count ++;
c0109a00:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a03:	8b 40 0c             	mov    0xc(%eax),%eax
c0109a06:	8d 50 01             	lea    0x1(%eax),%edx
c0109a09:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a0c:	89 50 0c             	mov    %edx,0xc(%eax)
    monitor_t * mt = cvp->owner;
c0109a0f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a12:	8b 40 10             	mov    0x10(%eax),%eax
c0109a15:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if(mt->next_count > 0) {
c0109a18:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109a1b:	8b 40 18             	mov    0x18(%eax),%eax
c0109a1e:	85 c0                	test   %eax,%eax
c0109a20:	7e 14                	jle    c0109a36 <cond_wait+0x5d>
        up(&(mt->next));
c0109a22:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109a25:	83 c0 0c             	add    $0xc,%eax
c0109a28:	83 ec 0c             	sub    $0xc,%esp
c0109a2b:	50                   	push   %eax
c0109a2c:	e8 60 fd ff ff       	call   c0109791 <up>
c0109a31:	83 c4 10             	add    $0x10,%esp
c0109a34:	eb 0f                	jmp    c0109a45 <cond_wait+0x6c>
    }
    else {
        up(&(mt->mutex));
c0109a36:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109a39:	83 ec 0c             	sub    $0xc,%esp
c0109a3c:	50                   	push   %eax
c0109a3d:	e8 4f fd ff ff       	call   c0109791 <up>
c0109a42:	83 c4 10             	add    $0x10,%esp
    }
    down(&(cvp->sem));
c0109a45:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a48:	83 ec 0c             	sub    $0xc,%esp
c0109a4b:	50                   	push   %eax
c0109a4c:	e8 5c fd ff ff       	call   c01097ad <down>
c0109a51:	83 c4 10             	add    $0x10,%esp
    // after woken up
    cvp->count --;
c0109a54:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a57:	8b 40 0c             	mov    0xc(%eax),%eax
c0109a5a:	8d 50 ff             	lea    -0x1(%eax),%edx
c0109a5d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a60:	89 50 0c             	mov    %edx,0xc(%eax)
    cprintf("cond_wait end:  cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c0109a63:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a66:	8b 40 10             	mov    0x10(%eax),%eax
c0109a69:	8b 50 18             	mov    0x18(%eax),%edx
c0109a6c:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a6f:	8b 40 0c             	mov    0xc(%eax),%eax
c0109a72:	52                   	push   %edx
c0109a73:	50                   	push   %eax
c0109a74:	ff 75 08             	pushl  0x8(%ebp)
c0109a77:	68 10 67 11 c0       	push   $0xc0116710
c0109a7c:	e8 06 69 ff ff       	call   c0100387 <cprintf>
c0109a81:	83 c4 10             	add    $0x10,%esp
}
c0109a84:	90                   	nop
c0109a85:	c9                   	leave  
c0109a86:	c3                   	ret    

c0109a87 <lock_mm>:
    mm->mm_count -= 1;
    return mm->mm_count;
}

static inline void
lock_mm(struct mm_struct *mm) {
c0109a87:	55                   	push   %ebp
c0109a88:	89 e5                	mov    %esp,%ebp
c0109a8a:	83 ec 08             	sub    $0x8,%esp
    if (mm != NULL) {
c0109a8d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0109a91:	74 29                	je     c0109abc <lock_mm+0x35>
        down(&(mm->mm_sem));
c0109a93:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a96:	83 c0 1c             	add    $0x1c,%eax
c0109a99:	83 ec 0c             	sub    $0xc,%esp
c0109a9c:	50                   	push   %eax
c0109a9d:	e8 0b fd ff ff       	call   c01097ad <down>
c0109aa2:	83 c4 10             	add    $0x10,%esp
        if (current != NULL) {
c0109aa5:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c0109aaa:	85 c0                	test   %eax,%eax
c0109aac:	74 0e                	je     c0109abc <lock_mm+0x35>
            mm->locked_by = current->pid;
c0109aae:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c0109ab3:	8b 50 04             	mov    0x4(%eax),%edx
c0109ab6:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ab9:	89 50 28             	mov    %edx,0x28(%eax)
        }
    }
}
c0109abc:	90                   	nop
c0109abd:	c9                   	leave  
c0109abe:	c3                   	ret    

c0109abf <unlock_mm>:

static inline void
unlock_mm(struct mm_struct *mm) {
c0109abf:	55                   	push   %ebp
c0109ac0:	89 e5                	mov    %esp,%ebp
c0109ac2:	83 ec 08             	sub    $0x8,%esp
    if (mm != NULL) {
c0109ac5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0109ac9:	74 1c                	je     c0109ae7 <unlock_mm+0x28>
        up(&(mm->mm_sem));
c0109acb:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ace:	83 c0 1c             	add    $0x1c,%eax
c0109ad1:	83 ec 0c             	sub    $0xc,%esp
c0109ad4:	50                   	push   %eax
c0109ad5:	e8 b7 fc ff ff       	call   c0109791 <up>
c0109ada:	83 c4 10             	add    $0x10,%esp
        mm->locked_by = 0;
c0109add:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ae0:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    }
}
c0109ae7:	90                   	nop
c0109ae8:	c9                   	leave  
c0109ae9:	c3                   	ret    

c0109aea <copy_path>:

#define IOBUF_SIZE                          4096

/* copy_path - copy path name */
static int
copy_path(char **to, const char *from) {
c0109aea:	55                   	push   %ebp
c0109aeb:	89 e5                	mov    %esp,%ebp
c0109aed:	83 ec 18             	sub    $0x18,%esp
    struct mm_struct *mm = current->mm;
c0109af0:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c0109af5:	8b 40 18             	mov    0x18(%eax),%eax
c0109af8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    char *buffer;
    if ((buffer = kmalloc(FS_MAX_FPATH_LEN + 1)) == NULL) {
c0109afb:	83 ec 0c             	sub    $0xc,%esp
c0109afe:	68 00 10 00 00       	push   $0x1000
c0109b03:	e8 fa b7 ff ff       	call   c0105302 <kmalloc>
c0109b08:	83 c4 10             	add    $0x10,%esp
c0109b0b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109b0e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0109b12:	75 07                	jne    c0109b1b <copy_path+0x31>
        return -E_NO_MEM;
c0109b14:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0109b19:	eb 67                	jmp    c0109b82 <copy_path+0x98>
    }
    lock_mm(mm);
c0109b1b:	83 ec 0c             	sub    $0xc,%esp
c0109b1e:	ff 75 f4             	pushl  -0xc(%ebp)
c0109b21:	e8 61 ff ff ff       	call   c0109a87 <lock_mm>
c0109b26:	83 c4 10             	add    $0x10,%esp
    if (!copy_string(mm, buffer, from, FS_MAX_FPATH_LEN + 1)) {
c0109b29:	68 00 10 00 00       	push   $0x1000
c0109b2e:	ff 75 0c             	pushl  0xc(%ebp)
c0109b31:	ff 75 f0             	pushl  -0x10(%ebp)
c0109b34:	ff 75 f4             	pushl  -0xc(%ebp)
c0109b37:	e8 39 ac ff ff       	call   c0104775 <copy_string>
c0109b3c:	83 c4 10             	add    $0x10,%esp
c0109b3f:	85 c0                	test   %eax,%eax
c0109b41:	75 24                	jne    c0109b67 <copy_path+0x7d>
        unlock_mm(mm);
c0109b43:	83 ec 0c             	sub    $0xc,%esp
c0109b46:	ff 75 f4             	pushl  -0xc(%ebp)
c0109b49:	e8 71 ff ff ff       	call   c0109abf <unlock_mm>
c0109b4e:	83 c4 10             	add    $0x10,%esp
        goto failed_cleanup;
c0109b51:	90                   	nop
    unlock_mm(mm);
    *to = buffer;
    return 0;

failed_cleanup:
    kfree(buffer);
c0109b52:	83 ec 0c             	sub    $0xc,%esp
c0109b55:	ff 75 f0             	pushl  -0x10(%ebp)
c0109b58:	e8 bd b7 ff ff       	call   c010531a <kfree>
c0109b5d:	83 c4 10             	add    $0x10,%esp
    return -E_INVAL;
c0109b60:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0109b65:	eb 1b                	jmp    c0109b82 <copy_path+0x98>
    lock_mm(mm);
    if (!copy_string(mm, buffer, from, FS_MAX_FPATH_LEN + 1)) {
        unlock_mm(mm);
        goto failed_cleanup;
    }
    unlock_mm(mm);
c0109b67:	83 ec 0c             	sub    $0xc,%esp
c0109b6a:	ff 75 f4             	pushl  -0xc(%ebp)
c0109b6d:	e8 4d ff ff ff       	call   c0109abf <unlock_mm>
c0109b72:	83 c4 10             	add    $0x10,%esp
    *to = buffer;
c0109b75:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b78:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0109b7b:	89 10                	mov    %edx,(%eax)
    return 0;
c0109b7d:	b8 00 00 00 00       	mov    $0x0,%eax

failed_cleanup:
    kfree(buffer);
    return -E_INVAL;
}
c0109b82:	c9                   	leave  
c0109b83:	c3                   	ret    

c0109b84 <sysfile_open>:

/* sysfile_open - open file */
int
sysfile_open(const char *__path, uint32_t open_flags) {
c0109b84:	55                   	push   %ebp
c0109b85:	89 e5                	mov    %esp,%ebp
c0109b87:	83 ec 18             	sub    $0x18,%esp
    int ret;
    char *path;
    if ((ret = copy_path(&path, __path)) != 0) {
c0109b8a:	83 ec 08             	sub    $0x8,%esp
c0109b8d:	ff 75 08             	pushl  0x8(%ebp)
c0109b90:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0109b93:	50                   	push   %eax
c0109b94:	e8 51 ff ff ff       	call   c0109aea <copy_path>
c0109b99:	83 c4 10             	add    $0x10,%esp
c0109b9c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109b9f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109ba3:	74 05                	je     c0109baa <sysfile_open+0x26>
        return ret;
c0109ba5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109ba8:	eb 27                	jmp    c0109bd1 <sysfile_open+0x4d>
    }
    ret = file_open(path, open_flags);
c0109baa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109bad:	83 ec 08             	sub    $0x8,%esp
c0109bb0:	ff 75 0c             	pushl  0xc(%ebp)
c0109bb3:	50                   	push   %eax
c0109bb4:	e8 c3 0b 00 00       	call   c010a77c <file_open>
c0109bb9:	83 c4 10             	add    $0x10,%esp
c0109bbc:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kfree(path);
c0109bbf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109bc2:	83 ec 0c             	sub    $0xc,%esp
c0109bc5:	50                   	push   %eax
c0109bc6:	e8 4f b7 ff ff       	call   c010531a <kfree>
c0109bcb:	83 c4 10             	add    $0x10,%esp
    return ret;
c0109bce:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0109bd1:	c9                   	leave  
c0109bd2:	c3                   	ret    

c0109bd3 <sysfile_close>:

/* sysfile_close - close file */
int
sysfile_close(int fd) {
c0109bd3:	55                   	push   %ebp
c0109bd4:	89 e5                	mov    %esp,%ebp
c0109bd6:	83 ec 08             	sub    $0x8,%esp
    return file_close(fd);
c0109bd9:	83 ec 0c             	sub    $0xc,%esp
c0109bdc:	ff 75 08             	pushl  0x8(%ebp)
c0109bdf:	e8 37 0d 00 00       	call   c010a91b <file_close>
c0109be4:	83 c4 10             	add    $0x10,%esp
}
c0109be7:	c9                   	leave  
c0109be8:	c3                   	ret    

c0109be9 <sysfile_read>:

/* sysfile_read - read file */
int
sysfile_read(int fd, void *base, size_t len) {
c0109be9:	55                   	push   %ebp
c0109bea:	89 e5                	mov    %esp,%ebp
c0109bec:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = current->mm;
c0109bef:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c0109bf4:	8b 40 18             	mov    0x18(%eax),%eax
c0109bf7:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (len == 0) {
c0109bfa:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0109bfe:	75 0a                	jne    c0109c0a <sysfile_read+0x21>
        return 0;
c0109c00:	b8 00 00 00 00       	mov    $0x0,%eax
c0109c05:	e9 32 01 00 00       	jmp    c0109d3c <sysfile_read+0x153>
    }
    if (!file_testfd(fd, 1, 0)) {
c0109c0a:	83 ec 04             	sub    $0x4,%esp
c0109c0d:	6a 00                	push   $0x0
c0109c0f:	6a 01                	push   $0x1
c0109c11:	ff 75 08             	pushl  0x8(%ebp)
c0109c14:	e8 06 0b 00 00       	call   c010a71f <file_testfd>
c0109c19:	83 c4 10             	add    $0x10,%esp
c0109c1c:	85 c0                	test   %eax,%eax
c0109c1e:	75 0a                	jne    c0109c2a <sysfile_read+0x41>
        return -E_INVAL;
c0109c20:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0109c25:	e9 12 01 00 00       	jmp    c0109d3c <sysfile_read+0x153>
    }
    void *buffer;
    if ((buffer = kmalloc(IOBUF_SIZE)) == NULL) {
c0109c2a:	83 ec 0c             	sub    $0xc,%esp
c0109c2d:	68 00 10 00 00       	push   $0x1000
c0109c32:	e8 cb b6 ff ff       	call   c0105302 <kmalloc>
c0109c37:	83 c4 10             	add    $0x10,%esp
c0109c3a:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0109c3d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0109c41:	75 0a                	jne    c0109c4d <sysfile_read+0x64>
        return -E_NO_MEM;
c0109c43:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0109c48:	e9 ef 00 00 00       	jmp    c0109d3c <sysfile_read+0x153>
    }

    int ret = 0;
c0109c4d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    size_t copied = 0, alen;
c0109c54:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    while (len != 0) {
c0109c5b:	e9 b6 00 00 00       	jmp    c0109d16 <sysfile_read+0x12d>
        if ((alen = IOBUF_SIZE) > len) {
c0109c60:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
c0109c67:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109c6a:	3b 45 10             	cmp    0x10(%ebp),%eax
c0109c6d:	76 06                	jbe    c0109c75 <sysfile_read+0x8c>
            alen = len;
c0109c6f:	8b 45 10             	mov    0x10(%ebp),%eax
c0109c72:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        }
        ret = file_read(fd, buffer, alen, &alen);
c0109c75:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109c78:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c0109c7b:	52                   	push   %edx
c0109c7c:	50                   	push   %eax
c0109c7d:	ff 75 e8             	pushl  -0x18(%ebp)
c0109c80:	ff 75 08             	pushl  0x8(%ebp)
c0109c83:	e8 cf 0c 00 00       	call   c010a957 <file_read>
c0109c88:	83 c4 10             	add    $0x10,%esp
c0109c8b:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (alen != 0) {
c0109c8e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109c91:	85 c0                	test   %eax,%eax
c0109c93:	74 74                	je     c0109d09 <sysfile_read+0x120>
            lock_mm(mm);
c0109c95:	83 ec 0c             	sub    $0xc,%esp
c0109c98:	ff 75 ec             	pushl  -0x14(%ebp)
c0109c9b:	e8 e7 fd ff ff       	call   c0109a87 <lock_mm>
c0109ca0:	83 c4 10             	add    $0x10,%esp
            {
                if (copy_to_user(mm, base, buffer, alen)) {
c0109ca3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109ca6:	50                   	push   %eax
c0109ca7:	ff 75 e8             	pushl  -0x18(%ebp)
c0109caa:	ff 75 0c             	pushl  0xc(%ebp)
c0109cad:	ff 75 ec             	pushl  -0x14(%ebp)
c0109cb0:	e8 18 a1 ff ff       	call   c0103dcd <copy_to_user>
c0109cb5:	83 c4 10             	add    $0x10,%esp
c0109cb8:	85 c0                	test   %eax,%eax
c0109cba:	74 32                	je     c0109cee <sysfile_read+0x105>
                    assert(len >= alen);
c0109cbc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109cbf:	39 45 10             	cmp    %eax,0x10(%ebp)
c0109cc2:	73 16                	jae    c0109cda <sysfile_read+0xf1>
c0109cc4:	68 52 67 11 c0       	push   $0xc0116752
c0109cc9:	68 5e 67 11 c0       	push   $0xc011675e
c0109cce:	6a 55                	push   $0x55
c0109cd0:	68 73 67 11 c0       	push   $0xc0116773
c0109cd5:	e8 13 68 ff ff       	call   c01004ed <__panic>
                    base += alen, len -= alen, copied += alen;
c0109cda:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109cdd:	01 45 0c             	add    %eax,0xc(%ebp)
c0109ce0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109ce3:	29 45 10             	sub    %eax,0x10(%ebp)
c0109ce6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109ce9:	01 45 f0             	add    %eax,-0x10(%ebp)
c0109cec:	eb 0d                	jmp    c0109cfb <sysfile_read+0x112>
                }
                else if (ret == 0) {
c0109cee:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109cf2:	75 07                	jne    c0109cfb <sysfile_read+0x112>
                    ret = -E_INVAL;
c0109cf4:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
                }
            }
            unlock_mm(mm);
c0109cfb:	83 ec 0c             	sub    $0xc,%esp
c0109cfe:	ff 75 ec             	pushl  -0x14(%ebp)
c0109d01:	e8 b9 fd ff ff       	call   c0109abf <unlock_mm>
c0109d06:	83 c4 10             	add    $0x10,%esp
        }
        if (ret != 0 || alen == 0) {
c0109d09:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109d0d:	75 11                	jne    c0109d20 <sysfile_read+0x137>
c0109d0f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109d12:	85 c0                	test   %eax,%eax
c0109d14:	74 0a                	je     c0109d20 <sysfile_read+0x137>
        return -E_NO_MEM;
    }

    int ret = 0;
    size_t copied = 0, alen;
    while (len != 0) {
c0109d16:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0109d1a:	0f 85 40 ff ff ff    	jne    c0109c60 <sysfile_read+0x77>
            goto out;
        }
    }

out:
    kfree(buffer);
c0109d20:	83 ec 0c             	sub    $0xc,%esp
c0109d23:	ff 75 e8             	pushl  -0x18(%ebp)
c0109d26:	e8 ef b5 ff ff       	call   c010531a <kfree>
c0109d2b:	83 c4 10             	add    $0x10,%esp
    if (copied != 0) {
c0109d2e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0109d32:	74 05                	je     c0109d39 <sysfile_read+0x150>
        return copied;
c0109d34:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109d37:	eb 03                	jmp    c0109d3c <sysfile_read+0x153>
    }
    return ret;
c0109d39:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0109d3c:	c9                   	leave  
c0109d3d:	c3                   	ret    

c0109d3e <sysfile_write>:

/* sysfile_write - write file */
int
sysfile_write(int fd, void *base, size_t len) {
c0109d3e:	55                   	push   %ebp
c0109d3f:	89 e5                	mov    %esp,%ebp
c0109d41:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = current->mm;
c0109d44:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c0109d49:	8b 40 18             	mov    0x18(%eax),%eax
c0109d4c:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (len == 0) {
c0109d4f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0109d53:	75 0a                	jne    c0109d5f <sysfile_write+0x21>
        return 0;
c0109d55:	b8 00 00 00 00       	mov    $0x0,%eax
c0109d5a:	e9 38 01 00 00       	jmp    c0109e97 <sysfile_write+0x159>
    }
    if (!file_testfd(fd, 0, 1)) {
c0109d5f:	83 ec 04             	sub    $0x4,%esp
c0109d62:	6a 01                	push   $0x1
c0109d64:	6a 00                	push   $0x0
c0109d66:	ff 75 08             	pushl  0x8(%ebp)
c0109d69:	e8 b1 09 00 00       	call   c010a71f <file_testfd>
c0109d6e:	83 c4 10             	add    $0x10,%esp
c0109d71:	85 c0                	test   %eax,%eax
c0109d73:	75 0a                	jne    c0109d7f <sysfile_write+0x41>
        return -E_INVAL;
c0109d75:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0109d7a:	e9 18 01 00 00       	jmp    c0109e97 <sysfile_write+0x159>
    }
    void *buffer;
    if ((buffer = kmalloc(IOBUF_SIZE)) == NULL) {
c0109d7f:	83 ec 0c             	sub    $0xc,%esp
c0109d82:	68 00 10 00 00       	push   $0x1000
c0109d87:	e8 76 b5 ff ff       	call   c0105302 <kmalloc>
c0109d8c:	83 c4 10             	add    $0x10,%esp
c0109d8f:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0109d92:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0109d96:	75 0a                	jne    c0109da2 <sysfile_write+0x64>
        return -E_NO_MEM;
c0109d98:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0109d9d:	e9 f5 00 00 00       	jmp    c0109e97 <sysfile_write+0x159>
    }

    int ret = 0;
c0109da2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    size_t copied = 0, alen;
c0109da9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    while (len != 0) {
c0109db0:	e9 bc 00 00 00       	jmp    c0109e71 <sysfile_write+0x133>
        if ((alen = IOBUF_SIZE) > len) {
c0109db5:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
c0109dbc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109dbf:	3b 45 10             	cmp    0x10(%ebp),%eax
c0109dc2:	76 06                	jbe    c0109dca <sysfile_write+0x8c>
            alen = len;
c0109dc4:	8b 45 10             	mov    0x10(%ebp),%eax
c0109dc7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        }
        lock_mm(mm);
c0109dca:	83 ec 0c             	sub    $0xc,%esp
c0109dcd:	ff 75 ec             	pushl  -0x14(%ebp)
c0109dd0:	e8 b2 fc ff ff       	call   c0109a87 <lock_mm>
c0109dd5:	83 c4 10             	add    $0x10,%esp
        {
            if (!copy_from_user(mm, buffer, base, alen, 0)) {
c0109dd8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109ddb:	83 ec 0c             	sub    $0xc,%esp
c0109dde:	6a 00                	push   $0x0
c0109de0:	50                   	push   %eax
c0109de1:	ff 75 0c             	pushl  0xc(%ebp)
c0109de4:	ff 75 e8             	pushl  -0x18(%ebp)
c0109de7:	ff 75 ec             	pushl  -0x14(%ebp)
c0109dea:	e8 9d 9f ff ff       	call   c0103d8c <copy_from_user>
c0109def:	83 c4 20             	add    $0x20,%esp
c0109df2:	85 c0                	test   %eax,%eax
c0109df4:	75 07                	jne    c0109dfd <sysfile_write+0xbf>
                ret = -E_INVAL;
c0109df6:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
            }
        }
        unlock_mm(mm);
c0109dfd:	83 ec 0c             	sub    $0xc,%esp
c0109e00:	ff 75 ec             	pushl  -0x14(%ebp)
c0109e03:	e8 b7 fc ff ff       	call   c0109abf <unlock_mm>
c0109e08:	83 c4 10             	add    $0x10,%esp
        if (ret == 0) {
c0109e0b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109e0f:	75 53                	jne    c0109e64 <sysfile_write+0x126>
            ret = file_write(fd, buffer, alen, &alen);
c0109e11:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109e14:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c0109e17:	52                   	push   %edx
c0109e18:	50                   	push   %eax
c0109e19:	ff 75 e8             	pushl  -0x18(%ebp)
c0109e1c:	ff 75 08             	pushl  0x8(%ebp)
c0109e1f:	e8 60 0c 00 00       	call   c010aa84 <file_write>
c0109e24:	83 c4 10             	add    $0x10,%esp
c0109e27:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (alen != 0) {
c0109e2a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109e2d:	85 c0                	test   %eax,%eax
c0109e2f:	74 33                	je     c0109e64 <sysfile_write+0x126>
                assert(len >= alen);
c0109e31:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109e34:	39 45 10             	cmp    %eax,0x10(%ebp)
c0109e37:	73 19                	jae    c0109e52 <sysfile_write+0x114>
c0109e39:	68 52 67 11 c0       	push   $0xc0116752
c0109e3e:	68 5e 67 11 c0       	push   $0xc011675e
c0109e43:	68 8a 00 00 00       	push   $0x8a
c0109e48:	68 73 67 11 c0       	push   $0xc0116773
c0109e4d:	e8 9b 66 ff ff       	call   c01004ed <__panic>
                base += alen, len -= alen, copied += alen;
c0109e52:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109e55:	01 45 0c             	add    %eax,0xc(%ebp)
c0109e58:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109e5b:	29 45 10             	sub    %eax,0x10(%ebp)
c0109e5e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109e61:	01 45 f0             	add    %eax,-0x10(%ebp)
            }
        }
        if (ret != 0 || alen == 0) {
c0109e64:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109e68:	75 11                	jne    c0109e7b <sysfile_write+0x13d>
c0109e6a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109e6d:	85 c0                	test   %eax,%eax
c0109e6f:	74 0a                	je     c0109e7b <sysfile_write+0x13d>
        return -E_NO_MEM;
    }

    int ret = 0;
    size_t copied = 0, alen;
    while (len != 0) {
c0109e71:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0109e75:	0f 85 3a ff ff ff    	jne    c0109db5 <sysfile_write+0x77>
            goto out;
        }
    }

out:
    kfree(buffer);
c0109e7b:	83 ec 0c             	sub    $0xc,%esp
c0109e7e:	ff 75 e8             	pushl  -0x18(%ebp)
c0109e81:	e8 94 b4 ff ff       	call   c010531a <kfree>
c0109e86:	83 c4 10             	add    $0x10,%esp
    if (copied != 0) {
c0109e89:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0109e8d:	74 05                	je     c0109e94 <sysfile_write+0x156>
        return copied;
c0109e8f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109e92:	eb 03                	jmp    c0109e97 <sysfile_write+0x159>
    }
    return ret;
c0109e94:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0109e97:	c9                   	leave  
c0109e98:	c3                   	ret    

c0109e99 <sysfile_seek>:

/* sysfile_seek - seek file */
int
sysfile_seek(int fd, off_t pos, int whence) {
c0109e99:	55                   	push   %ebp
c0109e9a:	89 e5                	mov    %esp,%ebp
c0109e9c:	83 ec 08             	sub    $0x8,%esp
    return file_seek(fd, pos, whence);
c0109e9f:	83 ec 04             	sub    $0x4,%esp
c0109ea2:	ff 75 10             	pushl  0x10(%ebp)
c0109ea5:	ff 75 0c             	pushl  0xc(%ebp)
c0109ea8:	ff 75 08             	pushl  0x8(%ebp)
c0109eab:	e8 01 0d 00 00       	call   c010abb1 <file_seek>
c0109eb0:	83 c4 10             	add    $0x10,%esp
}
c0109eb3:	c9                   	leave  
c0109eb4:	c3                   	ret    

c0109eb5 <sysfile_fstat>:

/* sysfile_fstat - stat file */
int
sysfile_fstat(int fd, struct stat *__stat) {
c0109eb5:	55                   	push   %ebp
c0109eb6:	89 e5                	mov    %esp,%ebp
c0109eb8:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = current->mm;
c0109ebb:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c0109ec0:	8b 40 18             	mov    0x18(%eax),%eax
c0109ec3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int ret;
    struct stat __local_stat, *stat = &__local_stat;
c0109ec6:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0109ec9:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if ((ret = file_fstat(fd, stat)) != 0) {
c0109ecc:	83 ec 08             	sub    $0x8,%esp
c0109ecf:	ff 75 ec             	pushl  -0x14(%ebp)
c0109ed2:	ff 75 08             	pushl  0x8(%ebp)
c0109ed5:	e8 69 0e 00 00       	call   c010ad43 <file_fstat>
c0109eda:	83 c4 10             	add    $0x10,%esp
c0109edd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109ee0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109ee4:	74 05                	je     c0109eeb <sysfile_fstat+0x36>
        return ret;
c0109ee6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109ee9:	eb 3d                	jmp    c0109f28 <sysfile_fstat+0x73>
    }

    lock_mm(mm);
c0109eeb:	83 ec 0c             	sub    $0xc,%esp
c0109eee:	ff 75 f0             	pushl  -0x10(%ebp)
c0109ef1:	e8 91 fb ff ff       	call   c0109a87 <lock_mm>
c0109ef6:	83 c4 10             	add    $0x10,%esp
    {
        if (!copy_to_user(mm, __stat, stat, sizeof(struct stat))) {
c0109ef9:	6a 10                	push   $0x10
c0109efb:	ff 75 ec             	pushl  -0x14(%ebp)
c0109efe:	ff 75 0c             	pushl  0xc(%ebp)
c0109f01:	ff 75 f0             	pushl  -0x10(%ebp)
c0109f04:	e8 c4 9e ff ff       	call   c0103dcd <copy_to_user>
c0109f09:	83 c4 10             	add    $0x10,%esp
c0109f0c:	85 c0                	test   %eax,%eax
c0109f0e:	75 07                	jne    c0109f17 <sysfile_fstat+0x62>
            ret = -E_INVAL;
c0109f10:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
        }
    }
    unlock_mm(mm);
c0109f17:	83 ec 0c             	sub    $0xc,%esp
c0109f1a:	ff 75 f0             	pushl  -0x10(%ebp)
c0109f1d:	e8 9d fb ff ff       	call   c0109abf <unlock_mm>
c0109f22:	83 c4 10             	add    $0x10,%esp
    return ret;
c0109f25:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0109f28:	c9                   	leave  
c0109f29:	c3                   	ret    

c0109f2a <sysfile_fsync>:

/* sysfile_fsync - sync file */
int
sysfile_fsync(int fd) {
c0109f2a:	55                   	push   %ebp
c0109f2b:	89 e5                	mov    %esp,%ebp
c0109f2d:	83 ec 08             	sub    $0x8,%esp
    return file_fsync(fd);
c0109f30:	83 ec 0c             	sub    $0xc,%esp
c0109f33:	ff 75 08             	pushl  0x8(%ebp)
c0109f36:	e8 c4 0e 00 00       	call   c010adff <file_fsync>
c0109f3b:	83 c4 10             	add    $0x10,%esp
}
c0109f3e:	c9                   	leave  
c0109f3f:	c3                   	ret    

c0109f40 <sysfile_chdir>:

/* sysfile_chdir - change dir */
int
sysfile_chdir(const char *__path) {
c0109f40:	55                   	push   %ebp
c0109f41:	89 e5                	mov    %esp,%ebp
c0109f43:	83 ec 18             	sub    $0x18,%esp
    int ret;
    char *path;
    if ((ret = copy_path(&path, __path)) != 0) {
c0109f46:	83 ec 08             	sub    $0x8,%esp
c0109f49:	ff 75 08             	pushl  0x8(%ebp)
c0109f4c:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0109f4f:	50                   	push   %eax
c0109f50:	e8 95 fb ff ff       	call   c0109aea <copy_path>
c0109f55:	83 c4 10             	add    $0x10,%esp
c0109f58:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109f5b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109f5f:	74 05                	je     c0109f66 <sysfile_chdir+0x26>
        return ret;
c0109f61:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109f64:	eb 24                	jmp    c0109f8a <sysfile_chdir+0x4a>
    }
    ret = vfs_chdir(path);
c0109f66:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109f69:	83 ec 0c             	sub    $0xc,%esp
c0109f6c:	50                   	push   %eax
c0109f6d:	e8 e6 4e 00 00       	call   c010ee58 <vfs_chdir>
c0109f72:	83 c4 10             	add    $0x10,%esp
c0109f75:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kfree(path);
c0109f78:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109f7b:	83 ec 0c             	sub    $0xc,%esp
c0109f7e:	50                   	push   %eax
c0109f7f:	e8 96 b3 ff ff       	call   c010531a <kfree>
c0109f84:	83 c4 10             	add    $0x10,%esp
    return ret;
c0109f87:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0109f8a:	c9                   	leave  
c0109f8b:	c3                   	ret    

c0109f8c <sysfile_link>:

/* sysfile_link - link file */
int
sysfile_link(const char *__path1, const char *__path2) {
c0109f8c:	55                   	push   %ebp
c0109f8d:	89 e5                	mov    %esp,%ebp
c0109f8f:	83 ec 18             	sub    $0x18,%esp
    int ret;
    char *old_path, *new_path;
    if ((ret = copy_path(&old_path, __path1)) != 0) {
c0109f92:	83 ec 08             	sub    $0x8,%esp
c0109f95:	ff 75 08             	pushl  0x8(%ebp)
c0109f98:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0109f9b:	50                   	push   %eax
c0109f9c:	e8 49 fb ff ff       	call   c0109aea <copy_path>
c0109fa1:	83 c4 10             	add    $0x10,%esp
c0109fa4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109fa7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109fab:	74 05                	je     c0109fb2 <sysfile_link+0x26>
        return ret;
c0109fad:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109fb0:	eb 66                	jmp    c010a018 <sysfile_link+0x8c>
    }
    if ((ret = copy_path(&new_path, __path2)) != 0) {
c0109fb2:	83 ec 08             	sub    $0x8,%esp
c0109fb5:	ff 75 0c             	pushl  0xc(%ebp)
c0109fb8:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0109fbb:	50                   	push   %eax
c0109fbc:	e8 29 fb ff ff       	call   c0109aea <copy_path>
c0109fc1:	83 c4 10             	add    $0x10,%esp
c0109fc4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109fc7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109fcb:	74 14                	je     c0109fe1 <sysfile_link+0x55>
        kfree(old_path);
c0109fcd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109fd0:	83 ec 0c             	sub    $0xc,%esp
c0109fd3:	50                   	push   %eax
c0109fd4:	e8 41 b3 ff ff       	call   c010531a <kfree>
c0109fd9:	83 c4 10             	add    $0x10,%esp
        return ret;
c0109fdc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109fdf:	eb 37                	jmp    c010a018 <sysfile_link+0x8c>
    }
    ret = vfs_link(old_path, new_path);
c0109fe1:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0109fe4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109fe7:	83 ec 08             	sub    $0x8,%esp
c0109fea:	52                   	push   %edx
c0109feb:	50                   	push   %eax
c0109fec:	e8 f3 58 00 00       	call   c010f8e4 <vfs_link>
c0109ff1:	83 c4 10             	add    $0x10,%esp
c0109ff4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kfree(old_path), kfree(new_path);
c0109ff7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109ffa:	83 ec 0c             	sub    $0xc,%esp
c0109ffd:	50                   	push   %eax
c0109ffe:	e8 17 b3 ff ff       	call   c010531a <kfree>
c010a003:	83 c4 10             	add    $0x10,%esp
c010a006:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a009:	83 ec 0c             	sub    $0xc,%esp
c010a00c:	50                   	push   %eax
c010a00d:	e8 08 b3 ff ff       	call   c010531a <kfree>
c010a012:	83 c4 10             	add    $0x10,%esp
    return ret;
c010a015:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010a018:	c9                   	leave  
c010a019:	c3                   	ret    

c010a01a <sysfile_rename>:

/* sysfile_rename - rename file */
int
sysfile_rename(const char *__path1, const char *__path2) {
c010a01a:	55                   	push   %ebp
c010a01b:	89 e5                	mov    %esp,%ebp
c010a01d:	83 ec 18             	sub    $0x18,%esp
    int ret;
    char *old_path, *new_path;
    if ((ret = copy_path(&old_path, __path1)) != 0) {
c010a020:	83 ec 08             	sub    $0x8,%esp
c010a023:	ff 75 08             	pushl  0x8(%ebp)
c010a026:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010a029:	50                   	push   %eax
c010a02a:	e8 bb fa ff ff       	call   c0109aea <copy_path>
c010a02f:	83 c4 10             	add    $0x10,%esp
c010a032:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a035:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a039:	74 05                	je     c010a040 <sysfile_rename+0x26>
        return ret;
c010a03b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a03e:	eb 66                	jmp    c010a0a6 <sysfile_rename+0x8c>
    }
    if ((ret = copy_path(&new_path, __path2)) != 0) {
c010a040:	83 ec 08             	sub    $0x8,%esp
c010a043:	ff 75 0c             	pushl  0xc(%ebp)
c010a046:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010a049:	50                   	push   %eax
c010a04a:	e8 9b fa ff ff       	call   c0109aea <copy_path>
c010a04f:	83 c4 10             	add    $0x10,%esp
c010a052:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a055:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a059:	74 14                	je     c010a06f <sysfile_rename+0x55>
        kfree(old_path);
c010a05b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a05e:	83 ec 0c             	sub    $0xc,%esp
c010a061:	50                   	push   %eax
c010a062:	e8 b3 b2 ff ff       	call   c010531a <kfree>
c010a067:	83 c4 10             	add    $0x10,%esp
        return ret;
c010a06a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a06d:	eb 37                	jmp    c010a0a6 <sysfile_rename+0x8c>
    }
    ret = vfs_rename(old_path, new_path);
c010a06f:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010a072:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a075:	83 ec 08             	sub    $0x8,%esp
c010a078:	52                   	push   %edx
c010a079:	50                   	push   %eax
c010a07a:	e8 5b 58 00 00       	call   c010f8da <vfs_rename>
c010a07f:	83 c4 10             	add    $0x10,%esp
c010a082:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kfree(old_path), kfree(new_path);
c010a085:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a088:	83 ec 0c             	sub    $0xc,%esp
c010a08b:	50                   	push   %eax
c010a08c:	e8 89 b2 ff ff       	call   c010531a <kfree>
c010a091:	83 c4 10             	add    $0x10,%esp
c010a094:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a097:	83 ec 0c             	sub    $0xc,%esp
c010a09a:	50                   	push   %eax
c010a09b:	e8 7a b2 ff ff       	call   c010531a <kfree>
c010a0a0:	83 c4 10             	add    $0x10,%esp
    return ret;
c010a0a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010a0a6:	c9                   	leave  
c010a0a7:	c3                   	ret    

c010a0a8 <sysfile_unlink>:

/* sysfile_unlink - unlink file */
int
sysfile_unlink(const char *__path) {
c010a0a8:	55                   	push   %ebp
c010a0a9:	89 e5                	mov    %esp,%ebp
c010a0ab:	83 ec 18             	sub    $0x18,%esp
    int ret;
    char *path;
    if ((ret = copy_path(&path, __path)) != 0) {
c010a0ae:	83 ec 08             	sub    $0x8,%esp
c010a0b1:	ff 75 08             	pushl  0x8(%ebp)
c010a0b4:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010a0b7:	50                   	push   %eax
c010a0b8:	e8 2d fa ff ff       	call   c0109aea <copy_path>
c010a0bd:	83 c4 10             	add    $0x10,%esp
c010a0c0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a0c3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a0c7:	74 05                	je     c010a0ce <sysfile_unlink+0x26>
        return ret;
c010a0c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a0cc:	eb 24                	jmp    c010a0f2 <sysfile_unlink+0x4a>
    }
    ret = vfs_unlink(path);
c010a0ce:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a0d1:	83 ec 0c             	sub    $0xc,%esp
c010a0d4:	50                   	push   %eax
c010a0d5:	e8 f6 57 00 00       	call   c010f8d0 <vfs_unlink>
c010a0da:	83 c4 10             	add    $0x10,%esp
c010a0dd:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kfree(path);
c010a0e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a0e3:	83 ec 0c             	sub    $0xc,%esp
c010a0e6:	50                   	push   %eax
c010a0e7:	e8 2e b2 ff ff       	call   c010531a <kfree>
c010a0ec:	83 c4 10             	add    $0x10,%esp
    return ret;
c010a0ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010a0f2:	c9                   	leave  
c010a0f3:	c3                   	ret    

c010a0f4 <sysfile_getcwd>:

/* sysfile_get cwd - get current working directory */
int
sysfile_getcwd(char *buf, size_t len) {
c010a0f4:	55                   	push   %ebp
c010a0f5:	89 e5                	mov    %esp,%ebp
c010a0f7:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = current->mm;
c010a0fa:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010a0ff:	8b 40 18             	mov    0x18(%eax),%eax
c010a102:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (len == 0) {
c010a105:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010a109:	75 07                	jne    c010a112 <sysfile_getcwd+0x1e>
        return -E_INVAL;
c010a10b:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010a110:	eb 66                	jmp    c010a178 <sysfile_getcwd+0x84>
    }

    int ret = -E_INVAL;
c010a112:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
    lock_mm(mm);
c010a119:	83 ec 0c             	sub    $0xc,%esp
c010a11c:	ff 75 f0             	pushl  -0x10(%ebp)
c010a11f:	e8 63 f9 ff ff       	call   c0109a87 <lock_mm>
c010a124:	83 c4 10             	add    $0x10,%esp
    {
        if (user_mem_check(mm, (uintptr_t)buf, len, 1)) {
c010a127:	8b 45 08             	mov    0x8(%ebp),%eax
c010a12a:	6a 01                	push   $0x1
c010a12c:	ff 75 0c             	pushl  0xc(%ebp)
c010a12f:	50                   	push   %eax
c010a130:	ff 75 f0             	pushl  -0x10(%ebp)
c010a133:	e8 1d a5 ff ff       	call   c0104655 <user_mem_check>
c010a138:	83 c4 10             	add    $0x10,%esp
c010a13b:	85 c0                	test   %eax,%eax
c010a13d:	74 28                	je     c010a167 <sysfile_getcwd+0x73>
            struct iobuf __iob, *iob = iobuf_init(&__iob, buf, len, 0);
c010a13f:	6a 00                	push   $0x0
c010a141:	ff 75 0c             	pushl  0xc(%ebp)
c010a144:	ff 75 08             	pushl  0x8(%ebp)
c010a147:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010a14a:	50                   	push   %eax
c010a14b:	e8 cc 0e 00 00       	call   c010b01c <iobuf_init>
c010a150:	83 c4 10             	add    $0x10,%esp
c010a153:	89 45 ec             	mov    %eax,-0x14(%ebp)
            ret = vfs_getcwd(iob);
c010a156:	83 ec 0c             	sub    $0xc,%esp
c010a159:	ff 75 ec             	pushl  -0x14(%ebp)
c010a15c:	e8 3e 4d 00 00       	call   c010ee9f <vfs_getcwd>
c010a161:	83 c4 10             	add    $0x10,%esp
c010a164:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
    }
    unlock_mm(mm);
c010a167:	83 ec 0c             	sub    $0xc,%esp
c010a16a:	ff 75 f0             	pushl  -0x10(%ebp)
c010a16d:	e8 4d f9 ff ff       	call   c0109abf <unlock_mm>
c010a172:	83 c4 10             	add    $0x10,%esp
    return ret;
c010a175:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010a178:	c9                   	leave  
c010a179:	c3                   	ret    

c010a17a <sysfile_getdirentry>:

/* sysfile_getdirentry - get the file entry in DIR */
int
sysfile_getdirentry(int fd, struct dirent *__direntp) {
c010a17a:	55                   	push   %ebp
c010a17b:	89 e5                	mov    %esp,%ebp
c010a17d:	83 ec 18             	sub    $0x18,%esp
    struct mm_struct *mm = current->mm;
c010a180:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010a185:	8b 40 18             	mov    0x18(%eax),%eax
c010a188:	89 45 f0             	mov    %eax,-0x10(%ebp)
    struct dirent *direntp;
    if ((direntp = kmalloc(sizeof(struct dirent))) == NULL) {
c010a18b:	83 ec 0c             	sub    $0xc,%esp
c010a18e:	68 04 01 00 00       	push   $0x104
c010a193:	e8 6a b1 ff ff       	call   c0105302 <kmalloc>
c010a198:	83 c4 10             	add    $0x10,%esp
c010a19b:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010a19e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010a1a2:	75 0a                	jne    c010a1ae <sysfile_getdirentry+0x34>
        return -E_NO_MEM;
c010a1a4:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010a1a9:	e9 b6 00 00 00       	jmp    c010a264 <sysfile_getdirentry+0xea>
    }

    int ret = 0;
c010a1ae:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    lock_mm(mm);
c010a1b5:	83 ec 0c             	sub    $0xc,%esp
c010a1b8:	ff 75 f0             	pushl  -0x10(%ebp)
c010a1bb:	e8 c7 f8 ff ff       	call   c0109a87 <lock_mm>
c010a1c0:	83 c4 10             	add    $0x10,%esp
    {
        if (!copy_from_user(mm, &(direntp->offset), &(__direntp->offset), sizeof(direntp->offset), 1)) {
c010a1c3:	8b 55 0c             	mov    0xc(%ebp),%edx
c010a1c6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a1c9:	83 ec 0c             	sub    $0xc,%esp
c010a1cc:	6a 01                	push   $0x1
c010a1ce:	6a 04                	push   $0x4
c010a1d0:	52                   	push   %edx
c010a1d1:	50                   	push   %eax
c010a1d2:	ff 75 f0             	pushl  -0x10(%ebp)
c010a1d5:	e8 b2 9b ff ff       	call   c0103d8c <copy_from_user>
c010a1da:	83 c4 20             	add    $0x20,%esp
c010a1dd:	85 c0                	test   %eax,%eax
c010a1df:	75 07                	jne    c010a1e8 <sysfile_getdirentry+0x6e>
            ret = -E_INVAL;
c010a1e1:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
        }
    }
    unlock_mm(mm);
c010a1e8:	83 ec 0c             	sub    $0xc,%esp
c010a1eb:	ff 75 f0             	pushl  -0x10(%ebp)
c010a1ee:	e8 cc f8 ff ff       	call   c0109abf <unlock_mm>
c010a1f3:	83 c4 10             	add    $0x10,%esp

    if (ret != 0 || (ret = file_getdirentry(fd, direntp)) != 0) {
c010a1f6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a1fa:	75 57                	jne    c010a253 <sysfile_getdirentry+0xd9>
c010a1fc:	83 ec 08             	sub    $0x8,%esp
c010a1ff:	ff 75 ec             	pushl  -0x14(%ebp)
c010a202:	ff 75 08             	pushl  0x8(%ebp)
c010a205:	e8 ae 0c 00 00       	call   c010aeb8 <file_getdirentry>
c010a20a:	83 c4 10             	add    $0x10,%esp
c010a20d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a210:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a214:	75 3d                	jne    c010a253 <sysfile_getdirentry+0xd9>
        goto out;
    }

    lock_mm(mm);
c010a216:	83 ec 0c             	sub    $0xc,%esp
c010a219:	ff 75 f0             	pushl  -0x10(%ebp)
c010a21c:	e8 66 f8 ff ff       	call   c0109a87 <lock_mm>
c010a221:	83 c4 10             	add    $0x10,%esp
    {
        if (!copy_to_user(mm, __direntp, direntp, sizeof(struct dirent))) {
c010a224:	68 04 01 00 00       	push   $0x104
c010a229:	ff 75 ec             	pushl  -0x14(%ebp)
c010a22c:	ff 75 0c             	pushl  0xc(%ebp)
c010a22f:	ff 75 f0             	pushl  -0x10(%ebp)
c010a232:	e8 96 9b ff ff       	call   c0103dcd <copy_to_user>
c010a237:	83 c4 10             	add    $0x10,%esp
c010a23a:	85 c0                	test   %eax,%eax
c010a23c:	75 07                	jne    c010a245 <sysfile_getdirentry+0xcb>
            ret = -E_INVAL;
c010a23e:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
        }
    }
    unlock_mm(mm);
c010a245:	83 ec 0c             	sub    $0xc,%esp
c010a248:	ff 75 f0             	pushl  -0x10(%ebp)
c010a24b:	e8 6f f8 ff ff       	call   c0109abf <unlock_mm>
c010a250:	83 c4 10             	add    $0x10,%esp

out:
    kfree(direntp);
c010a253:	83 ec 0c             	sub    $0xc,%esp
c010a256:	ff 75 ec             	pushl  -0x14(%ebp)
c010a259:	e8 bc b0 ff ff       	call   c010531a <kfree>
c010a25e:	83 c4 10             	add    $0x10,%esp
    return ret;
c010a261:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010a264:	c9                   	leave  
c010a265:	c3                   	ret    

c010a266 <sysfile_dup>:

/* sysfile_dup -  duplicate fd1 to fd2 */
int
sysfile_dup(int fd1, int fd2) {
c010a266:	55                   	push   %ebp
c010a267:	89 e5                	mov    %esp,%ebp
c010a269:	83 ec 08             	sub    $0x8,%esp
    return file_dup(fd1, fd2);
c010a26c:	83 ec 08             	sub    $0x8,%esp
c010a26f:	ff 75 0c             	pushl  0xc(%ebp)
c010a272:	ff 75 08             	pushl  0x8(%ebp)
c010a275:	e8 41 0d 00 00       	call   c010afbb <file_dup>
c010a27a:	83 c4 10             	add    $0x10,%esp
}
c010a27d:	c9                   	leave  
c010a27e:	c3                   	ret    

c010a27f <sysfile_pipe>:

int
sysfile_pipe(int *fd_store) {
c010a27f:	55                   	push   %ebp
c010a280:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c010a282:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c010a287:	5d                   	pop    %ebp
c010a288:	c3                   	ret    

c010a289 <sysfile_mkfifo>:

int
sysfile_mkfifo(const char *__name, uint32_t open_flags) {
c010a289:	55                   	push   %ebp
c010a28a:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c010a28c:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c010a291:	5d                   	pop    %ebp
c010a292:	c3                   	ret    

c010a293 <files_count>:
void files_destroy(struct files_struct *filesp);
void files_closeall(struct files_struct *filesp);
int dup_files(struct files_struct *to, struct files_struct *from);

static inline int
files_count(struct files_struct *filesp) {
c010a293:	55                   	push   %ebp
c010a294:	89 e5                	mov    %esp,%ebp
    return filesp->files_count;
c010a296:	8b 45 08             	mov    0x8(%ebp),%eax
c010a299:	8b 40 08             	mov    0x8(%eax),%eax
}
c010a29c:	5d                   	pop    %ebp
c010a29d:	c3                   	ret    

c010a29e <fopen_count>:
int file_dup(int fd1, int fd2);
int file_pipe(int fd[]);
int file_mkfifo(const char *name, uint32_t open_flags);

static inline int
fopen_count(struct file *file) {
c010a29e:	55                   	push   %ebp
c010a29f:	89 e5                	mov    %esp,%ebp
    return file->open_count;
c010a2a1:	8b 45 08             	mov    0x8(%ebp),%eax
c010a2a4:	8b 40 18             	mov    0x18(%eax),%eax
}
c010a2a7:	5d                   	pop    %ebp
c010a2a8:	c3                   	ret    

c010a2a9 <fopen_count_inc>:

static inline int
fopen_count_inc(struct file *file) {
c010a2a9:	55                   	push   %ebp
c010a2aa:	89 e5                	mov    %esp,%ebp
    file->open_count += 1;
c010a2ac:	8b 45 08             	mov    0x8(%ebp),%eax
c010a2af:	8b 40 18             	mov    0x18(%eax),%eax
c010a2b2:	8d 50 01             	lea    0x1(%eax),%edx
c010a2b5:	8b 45 08             	mov    0x8(%ebp),%eax
c010a2b8:	89 50 18             	mov    %edx,0x18(%eax)
    return file->open_count;
c010a2bb:	8b 45 08             	mov    0x8(%ebp),%eax
c010a2be:	8b 40 18             	mov    0x18(%eax),%eax
}
c010a2c1:	5d                   	pop    %ebp
c010a2c2:	c3                   	ret    

c010a2c3 <fopen_count_dec>:

static inline int
fopen_count_dec(struct file *file) {
c010a2c3:	55                   	push   %ebp
c010a2c4:	89 e5                	mov    %esp,%ebp
    file->open_count -= 1;
c010a2c6:	8b 45 08             	mov    0x8(%ebp),%eax
c010a2c9:	8b 40 18             	mov    0x18(%eax),%eax
c010a2cc:	8d 50 ff             	lea    -0x1(%eax),%edx
c010a2cf:	8b 45 08             	mov    0x8(%ebp),%eax
c010a2d2:	89 50 18             	mov    %edx,0x18(%eax)
    return file->open_count;
c010a2d5:	8b 45 08             	mov    0x8(%ebp),%eax
c010a2d8:	8b 40 18             	mov    0x18(%eax),%eax
}
c010a2db:	5d                   	pop    %ebp
c010a2dc:	c3                   	ret    

c010a2dd <get_fd_array>:

#define testfd(fd)                          ((fd) >= 0 && (fd) < FILES_STRUCT_NENTRY)

// get_fd_array - get current process's open files table
static struct file *
get_fd_array(void) {
c010a2dd:	55                   	push   %ebp
c010a2de:	89 e5                	mov    %esp,%ebp
c010a2e0:	83 ec 18             	sub    $0x18,%esp
    struct files_struct *filesp = current->filesp;
c010a2e3:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010a2e8:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010a2ee:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(filesp != NULL && files_count(filesp) > 0);
c010a2f1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a2f5:	74 0f                	je     c010a306 <get_fd_array+0x29>
c010a2f7:	ff 75 f4             	pushl  -0xc(%ebp)
c010a2fa:	e8 94 ff ff ff       	call   c010a293 <files_count>
c010a2ff:	83 c4 04             	add    $0x4,%esp
c010a302:	85 c0                	test   %eax,%eax
c010a304:	7f 16                	jg     c010a31c <get_fd_array+0x3f>
c010a306:	68 88 67 11 c0       	push   $0xc0116788
c010a30b:	68 b2 67 11 c0       	push   $0xc01167b2
c010a310:	6a 14                	push   $0x14
c010a312:	68 c7 67 11 c0       	push   $0xc01167c7
c010a317:	e8 d1 61 ff ff       	call   c01004ed <__panic>
    return filesp->fd_array;
c010a31c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a31f:	8b 40 04             	mov    0x4(%eax),%eax
}
c010a322:	c9                   	leave  
c010a323:	c3                   	ret    

c010a324 <fd_array_init>:

// fd_array_init - initialize the open files table
void
fd_array_init(struct file *fd_array) {
c010a324:	55                   	push   %ebp
c010a325:	89 e5                	mov    %esp,%ebp
c010a327:	83 ec 10             	sub    $0x10,%esp
    int fd;
    struct file *file = fd_array;
c010a32a:	8b 45 08             	mov    0x8(%ebp),%eax
c010a32d:	89 45 f8             	mov    %eax,-0x8(%ebp)
    for (fd = 0; fd < FILES_STRUCT_NENTRY; fd ++, file ++) {
c010a330:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c010a337:	eb 24                	jmp    c010a35d <fd_array_init+0x39>
        file->open_count = 0;
c010a339:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010a33c:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
        file->status = FD_NONE, file->fd = fd;
c010a343:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010a346:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c010a34c:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010a34f:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010a352:	89 50 0c             	mov    %edx,0xc(%eax)
// fd_array_init - initialize the open files table
void
fd_array_init(struct file *fd_array) {
    int fd;
    struct file *file = fd_array;
    for (fd = 0; fd < FILES_STRUCT_NENTRY; fd ++, file ++) {
c010a355:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010a359:	83 45 f8 1c          	addl   $0x1c,-0x8(%ebp)
c010a35d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a360:	3d 90 00 00 00       	cmp    $0x90,%eax
c010a365:	76 d2                	jbe    c010a339 <fd_array_init+0x15>
        file->open_count = 0;
        file->status = FD_NONE, file->fd = fd;
    }
}
c010a367:	90                   	nop
c010a368:	c9                   	leave  
c010a369:	c3                   	ret    

c010a36a <fd_array_alloc>:

// fs_array_alloc - allocate a free file item (with FD_NONE status) in open files table
static int
fd_array_alloc(int fd, struct file **file_store) {
c010a36a:	55                   	push   %ebp
c010a36b:	89 e5                	mov    %esp,%ebp
c010a36d:	83 ec 18             	sub    $0x18,%esp
//    panic("debug");
    struct file *file = get_fd_array();
c010a370:	e8 68 ff ff ff       	call   c010a2dd <get_fd_array>
c010a375:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (fd == NO_FD) {
c010a378:	81 7d 08 d9 6a ff ff 	cmpl   $0xffff6ad9,0x8(%ebp)
c010a37f:	75 2e                	jne    c010a3af <fd_array_alloc+0x45>
        for (fd = 0; fd < FILES_STRUCT_NENTRY; fd ++, file ++) {
c010a381:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
c010a388:	eb 11                	jmp    c010a39b <fd_array_alloc+0x31>
            if (file->status == FD_NONE) {
c010a38a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a38d:	8b 00                	mov    (%eax),%eax
c010a38f:	85 c0                	test   %eax,%eax
c010a391:	74 57                	je     c010a3ea <fd_array_alloc+0x80>
static int
fd_array_alloc(int fd, struct file **file_store) {
//    panic("debug");
    struct file *file = get_fd_array();
    if (fd == NO_FD) {
        for (fd = 0; fd < FILES_STRUCT_NENTRY; fd ++, file ++) {
c010a393:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010a397:	83 45 f4 1c          	addl   $0x1c,-0xc(%ebp)
c010a39b:	8b 45 08             	mov    0x8(%ebp),%eax
c010a39e:	3d 90 00 00 00       	cmp    $0x90,%eax
c010a3a3:	76 e5                	jbe    c010a38a <fd_array_alloc+0x20>
            if (file->status == FD_NONE) {
                goto found;
            }
        }
        return -E_MAX_OPEN;
c010a3a5:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
c010a3aa:	e9 87 00 00 00       	jmp    c010a436 <fd_array_alloc+0xcc>
    }
    else {
        if (testfd(fd)) {
c010a3af:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a3b3:	78 2e                	js     c010a3e3 <fd_array_alloc+0x79>
c010a3b5:	8b 45 08             	mov    0x8(%ebp),%eax
c010a3b8:	3d 90 00 00 00       	cmp    $0x90,%eax
c010a3bd:	77 24                	ja     c010a3e3 <fd_array_alloc+0x79>
            file += fd;
c010a3bf:	8b 45 08             	mov    0x8(%ebp),%eax
c010a3c2:	c1 e0 02             	shl    $0x2,%eax
c010a3c5:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c010a3cc:	29 c2                	sub    %eax,%edx
c010a3ce:	89 d0                	mov    %edx,%eax
c010a3d0:	01 45 f4             	add    %eax,-0xc(%ebp)
            if (file->status == FD_NONE) {
c010a3d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a3d6:	8b 00                	mov    (%eax),%eax
c010a3d8:	85 c0                	test   %eax,%eax
c010a3da:	74 11                	je     c010a3ed <fd_array_alloc+0x83>
                goto found;
            }
            return -E_BUSY;
c010a3dc:	b8 f1 ff ff ff       	mov    $0xfffffff1,%eax
c010a3e1:	eb 53                	jmp    c010a436 <fd_array_alloc+0xcc>
        }
        return -E_INVAL;
c010a3e3:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010a3e8:	eb 4c                	jmp    c010a436 <fd_array_alloc+0xcc>
//    panic("debug");
    struct file *file = get_fd_array();
    if (fd == NO_FD) {
        for (fd = 0; fd < FILES_STRUCT_NENTRY; fd ++, file ++) {
            if (file->status == FD_NONE) {
                goto found;
c010a3ea:	90                   	nop
c010a3eb:	eb 01                	jmp    c010a3ee <fd_array_alloc+0x84>
    }
    else {
        if (testfd(fd)) {
            file += fd;
            if (file->status == FD_NONE) {
                goto found;
c010a3ed:	90                   	nop
            return -E_BUSY;
        }
        return -E_INVAL;
    }
found:
    assert(fopen_count(file) == 0);
c010a3ee:	83 ec 0c             	sub    $0xc,%esp
c010a3f1:	ff 75 f4             	pushl  -0xc(%ebp)
c010a3f4:	e8 a5 fe ff ff       	call   c010a29e <fopen_count>
c010a3f9:	83 c4 10             	add    $0x10,%esp
c010a3fc:	85 c0                	test   %eax,%eax
c010a3fe:	74 16                	je     c010a416 <fd_array_alloc+0xac>
c010a400:	68 d6 67 11 c0       	push   $0xc01167d6
c010a405:	68 b2 67 11 c0       	push   $0xc01167b2
c010a40a:	6a 3b                	push   $0x3b
c010a40c:	68 c7 67 11 c0       	push   $0xc01167c7
c010a411:	e8 d7 60 ff ff       	call   c01004ed <__panic>
    file->status = FD_INIT, file->node = NULL;
c010a416:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a419:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c010a41f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a422:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
    *file_store = file;
c010a429:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a42c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a42f:	89 10                	mov    %edx,(%eax)
    return 0;
c010a431:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a436:	c9                   	leave  
c010a437:	c3                   	ret    

c010a438 <fd_array_free>:

// fd_array_free - free a file item in open files table
static void
fd_array_free(struct file *file) {
c010a438:	55                   	push   %ebp
c010a439:	89 e5                	mov    %esp,%ebp
c010a43b:	83 ec 08             	sub    $0x8,%esp
    assert(file->status == FD_INIT || file->status == FD_CLOSED);
c010a43e:	8b 45 08             	mov    0x8(%ebp),%eax
c010a441:	8b 00                	mov    (%eax),%eax
c010a443:	83 f8 01             	cmp    $0x1,%eax
c010a446:	74 20                	je     c010a468 <fd_array_free+0x30>
c010a448:	8b 45 08             	mov    0x8(%ebp),%eax
c010a44b:	8b 00                	mov    (%eax),%eax
c010a44d:	83 f8 03             	cmp    $0x3,%eax
c010a450:	74 16                	je     c010a468 <fd_array_free+0x30>
c010a452:	68 f0 67 11 c0       	push   $0xc01167f0
c010a457:	68 b2 67 11 c0       	push   $0xc01167b2
c010a45c:	6a 44                	push   $0x44
c010a45e:	68 c7 67 11 c0       	push   $0xc01167c7
c010a463:	e8 85 60 ff ff       	call   c01004ed <__panic>
    assert(fopen_count(file) == 0);
c010a468:	83 ec 0c             	sub    $0xc,%esp
c010a46b:	ff 75 08             	pushl  0x8(%ebp)
c010a46e:	e8 2b fe ff ff       	call   c010a29e <fopen_count>
c010a473:	83 c4 10             	add    $0x10,%esp
c010a476:	85 c0                	test   %eax,%eax
c010a478:	74 16                	je     c010a490 <fd_array_free+0x58>
c010a47a:	68 d6 67 11 c0       	push   $0xc01167d6
c010a47f:	68 b2 67 11 c0       	push   $0xc01167b2
c010a484:	6a 45                	push   $0x45
c010a486:	68 c7 67 11 c0       	push   $0xc01167c7
c010a48b:	e8 5d 60 ff ff       	call   c01004ed <__panic>
    if (file->status == FD_CLOSED) {
c010a490:	8b 45 08             	mov    0x8(%ebp),%eax
c010a493:	8b 00                	mov    (%eax),%eax
c010a495:	83 f8 03             	cmp    $0x3,%eax
c010a498:	75 12                	jne    c010a4ac <fd_array_free+0x74>
        vfs_close(file->node);
c010a49a:	8b 45 08             	mov    0x8(%ebp),%eax
c010a49d:	8b 40 14             	mov    0x14(%eax),%eax
c010a4a0:	83 ec 0c             	sub    $0xc,%esp
c010a4a3:	50                   	push   %eax
c010a4a4:	e8 fe 53 00 00       	call   c010f8a7 <vfs_close>
c010a4a9:	83 c4 10             	add    $0x10,%esp
    }
    file->status = FD_NONE;
c010a4ac:	8b 45 08             	mov    0x8(%ebp),%eax
c010a4af:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
c010a4b5:	90                   	nop
c010a4b6:	c9                   	leave  
c010a4b7:	c3                   	ret    

c010a4b8 <fd_array_acquire>:

static void
fd_array_acquire(struct file *file) {
c010a4b8:	55                   	push   %ebp
c010a4b9:	89 e5                	mov    %esp,%ebp
c010a4bb:	83 ec 08             	sub    $0x8,%esp
    assert(file->status == FD_OPENED);
c010a4be:	8b 45 08             	mov    0x8(%ebp),%eax
c010a4c1:	8b 00                	mov    (%eax),%eax
c010a4c3:	83 f8 02             	cmp    $0x2,%eax
c010a4c6:	74 16                	je     c010a4de <fd_array_acquire+0x26>
c010a4c8:	68 25 68 11 c0       	push   $0xc0116825
c010a4cd:	68 b2 67 11 c0       	push   $0xc01167b2
c010a4d2:	6a 4e                	push   $0x4e
c010a4d4:	68 c7 67 11 c0       	push   $0xc01167c7
c010a4d9:	e8 0f 60 ff ff       	call   c01004ed <__panic>
    fopen_count_inc(file);
c010a4de:	83 ec 0c             	sub    $0xc,%esp
c010a4e1:	ff 75 08             	pushl  0x8(%ebp)
c010a4e4:	e8 c0 fd ff ff       	call   c010a2a9 <fopen_count_inc>
c010a4e9:	83 c4 10             	add    $0x10,%esp
}
c010a4ec:	90                   	nop
c010a4ed:	c9                   	leave  
c010a4ee:	c3                   	ret    

c010a4ef <fd_array_release>:

// fd_array_release - file's open_count--; if file's open_count-- == 0 , then call fd_array_free to free this file item
static void
fd_array_release(struct file *file) {
c010a4ef:	55                   	push   %ebp
c010a4f0:	89 e5                	mov    %esp,%ebp
c010a4f2:	83 ec 08             	sub    $0x8,%esp
    assert(file->status == FD_OPENED || file->status == FD_CLOSED);
c010a4f5:	8b 45 08             	mov    0x8(%ebp),%eax
c010a4f8:	8b 00                	mov    (%eax),%eax
c010a4fa:	83 f8 02             	cmp    $0x2,%eax
c010a4fd:	74 20                	je     c010a51f <fd_array_release+0x30>
c010a4ff:	8b 45 08             	mov    0x8(%ebp),%eax
c010a502:	8b 00                	mov    (%eax),%eax
c010a504:	83 f8 03             	cmp    $0x3,%eax
c010a507:	74 16                	je     c010a51f <fd_array_release+0x30>
c010a509:	68 40 68 11 c0       	push   $0xc0116840
c010a50e:	68 b2 67 11 c0       	push   $0xc01167b2
c010a513:	6a 55                	push   $0x55
c010a515:	68 c7 67 11 c0       	push   $0xc01167c7
c010a51a:	e8 ce 5f ff ff       	call   c01004ed <__panic>
    assert(fopen_count(file) > 0);
c010a51f:	83 ec 0c             	sub    $0xc,%esp
c010a522:	ff 75 08             	pushl  0x8(%ebp)
c010a525:	e8 74 fd ff ff       	call   c010a29e <fopen_count>
c010a52a:	83 c4 10             	add    $0x10,%esp
c010a52d:	85 c0                	test   %eax,%eax
c010a52f:	7f 16                	jg     c010a547 <fd_array_release+0x58>
c010a531:	68 77 68 11 c0       	push   $0xc0116877
c010a536:	68 b2 67 11 c0       	push   $0xc01167b2
c010a53b:	6a 56                	push   $0x56
c010a53d:	68 c7 67 11 c0       	push   $0xc01167c7
c010a542:	e8 a6 5f ff ff       	call   c01004ed <__panic>
    if (fopen_count_dec(file) == 0) {
c010a547:	83 ec 0c             	sub    $0xc,%esp
c010a54a:	ff 75 08             	pushl  0x8(%ebp)
c010a54d:	e8 71 fd ff ff       	call   c010a2c3 <fopen_count_dec>
c010a552:	83 c4 10             	add    $0x10,%esp
c010a555:	85 c0                	test   %eax,%eax
c010a557:	75 0e                	jne    c010a567 <fd_array_release+0x78>
        fd_array_free(file);
c010a559:	83 ec 0c             	sub    $0xc,%esp
c010a55c:	ff 75 08             	pushl  0x8(%ebp)
c010a55f:	e8 d4 fe ff ff       	call   c010a438 <fd_array_free>
c010a564:	83 c4 10             	add    $0x10,%esp
    }
}
c010a567:	90                   	nop
c010a568:	c9                   	leave  
c010a569:	c3                   	ret    

c010a56a <fd_array_open>:

// fd_array_open - file's open_count++, set status to FD_OPENED
void
fd_array_open(struct file *file) {
c010a56a:	55                   	push   %ebp
c010a56b:	89 e5                	mov    %esp,%ebp
c010a56d:	83 ec 08             	sub    $0x8,%esp
    assert(file->status == FD_INIT && file->node != NULL);
c010a570:	8b 45 08             	mov    0x8(%ebp),%eax
c010a573:	8b 00                	mov    (%eax),%eax
c010a575:	83 f8 01             	cmp    $0x1,%eax
c010a578:	75 0a                	jne    c010a584 <fd_array_open+0x1a>
c010a57a:	8b 45 08             	mov    0x8(%ebp),%eax
c010a57d:	8b 40 14             	mov    0x14(%eax),%eax
c010a580:	85 c0                	test   %eax,%eax
c010a582:	75 16                	jne    c010a59a <fd_array_open+0x30>
c010a584:	68 90 68 11 c0       	push   $0xc0116890
c010a589:	68 b2 67 11 c0       	push   $0xc01167b2
c010a58e:	6a 5f                	push   $0x5f
c010a590:	68 c7 67 11 c0       	push   $0xc01167c7
c010a595:	e8 53 5f ff ff       	call   c01004ed <__panic>
    file->status = FD_OPENED;
c010a59a:	8b 45 08             	mov    0x8(%ebp),%eax
c010a59d:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    fopen_count_inc(file);
c010a5a3:	83 ec 0c             	sub    $0xc,%esp
c010a5a6:	ff 75 08             	pushl  0x8(%ebp)
c010a5a9:	e8 fb fc ff ff       	call   c010a2a9 <fopen_count_inc>
c010a5ae:	83 c4 10             	add    $0x10,%esp
}
c010a5b1:	90                   	nop
c010a5b2:	c9                   	leave  
c010a5b3:	c3                   	ret    

c010a5b4 <fd_array_close>:

// fd_array_close - file's open_count--; if file's open_count-- == 0 , then call fd_array_free to free this file item
void
fd_array_close(struct file *file) {
c010a5b4:	55                   	push   %ebp
c010a5b5:	89 e5                	mov    %esp,%ebp
c010a5b7:	83 ec 08             	sub    $0x8,%esp
    assert(file->status == FD_OPENED);
c010a5ba:	8b 45 08             	mov    0x8(%ebp),%eax
c010a5bd:	8b 00                	mov    (%eax),%eax
c010a5bf:	83 f8 02             	cmp    $0x2,%eax
c010a5c2:	74 16                	je     c010a5da <fd_array_close+0x26>
c010a5c4:	68 25 68 11 c0       	push   $0xc0116825
c010a5c9:	68 b2 67 11 c0       	push   $0xc01167b2
c010a5ce:	6a 67                	push   $0x67
c010a5d0:	68 c7 67 11 c0       	push   $0xc01167c7
c010a5d5:	e8 13 5f ff ff       	call   c01004ed <__panic>
    assert(fopen_count(file) > 0);
c010a5da:	83 ec 0c             	sub    $0xc,%esp
c010a5dd:	ff 75 08             	pushl  0x8(%ebp)
c010a5e0:	e8 b9 fc ff ff       	call   c010a29e <fopen_count>
c010a5e5:	83 c4 10             	add    $0x10,%esp
c010a5e8:	85 c0                	test   %eax,%eax
c010a5ea:	7f 16                	jg     c010a602 <fd_array_close+0x4e>
c010a5ec:	68 77 68 11 c0       	push   $0xc0116877
c010a5f1:	68 b2 67 11 c0       	push   $0xc01167b2
c010a5f6:	6a 68                	push   $0x68
c010a5f8:	68 c7 67 11 c0       	push   $0xc01167c7
c010a5fd:	e8 eb 5e ff ff       	call   c01004ed <__panic>
    file->status = FD_CLOSED;
c010a602:	8b 45 08             	mov    0x8(%ebp),%eax
c010a605:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
    if (fopen_count_dec(file) == 0) {
c010a60b:	83 ec 0c             	sub    $0xc,%esp
c010a60e:	ff 75 08             	pushl  0x8(%ebp)
c010a611:	e8 ad fc ff ff       	call   c010a2c3 <fopen_count_dec>
c010a616:	83 c4 10             	add    $0x10,%esp
c010a619:	85 c0                	test   %eax,%eax
c010a61b:	75 0e                	jne    c010a62b <fd_array_close+0x77>
        fd_array_free(file);
c010a61d:	83 ec 0c             	sub    $0xc,%esp
c010a620:	ff 75 08             	pushl  0x8(%ebp)
c010a623:	e8 10 fe ff ff       	call   c010a438 <fd_array_free>
c010a628:	83 c4 10             	add    $0x10,%esp
    }
}
c010a62b:	90                   	nop
c010a62c:	c9                   	leave  
c010a62d:	c3                   	ret    

c010a62e <fd_array_dup>:

//fs_array_dup - duplicate file 'from'  to file 'to'
void
fd_array_dup(struct file *to, struct file *from) {
c010a62e:	55                   	push   %ebp
c010a62f:	89 e5                	mov    %esp,%ebp
c010a631:	83 ec 18             	sub    $0x18,%esp
    //cprintf("[fd_array_dup]from fd=%d, to fd=%d\n",from->fd, to->fd);
    assert(to->status == FD_INIT && from->status == FD_OPENED);
c010a634:	8b 45 08             	mov    0x8(%ebp),%eax
c010a637:	8b 00                	mov    (%eax),%eax
c010a639:	83 f8 01             	cmp    $0x1,%eax
c010a63c:	75 0a                	jne    c010a648 <fd_array_dup+0x1a>
c010a63e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a641:	8b 00                	mov    (%eax),%eax
c010a643:	83 f8 02             	cmp    $0x2,%eax
c010a646:	74 16                	je     c010a65e <fd_array_dup+0x30>
c010a648:	68 c0 68 11 c0       	push   $0xc01168c0
c010a64d:	68 b2 67 11 c0       	push   $0xc01167b2
c010a652:	6a 73                	push   $0x73
c010a654:	68 c7 67 11 c0       	push   $0xc01167c7
c010a659:	e8 8f 5e ff ff       	call   c01004ed <__panic>
    to->pos = from->pos;
c010a65e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a661:	8b 50 10             	mov    0x10(%eax),%edx
c010a664:	8b 45 08             	mov    0x8(%ebp),%eax
c010a667:	89 50 10             	mov    %edx,0x10(%eax)
    to->readable = from->readable;
c010a66a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a66d:	8b 50 04             	mov    0x4(%eax),%edx
c010a670:	8b 45 08             	mov    0x8(%ebp),%eax
c010a673:	89 50 04             	mov    %edx,0x4(%eax)
    to->writable = from->writable;
c010a676:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a679:	8b 50 08             	mov    0x8(%eax),%edx
c010a67c:	8b 45 08             	mov    0x8(%ebp),%eax
c010a67f:	89 50 08             	mov    %edx,0x8(%eax)
    struct inode *node = from->node;
c010a682:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a685:	8b 40 14             	mov    0x14(%eax),%eax
c010a688:	89 45 f4             	mov    %eax,-0xc(%ebp)
    vop_ref_inc(node), vop_open_inc(node);
c010a68b:	83 ec 0c             	sub    $0xc,%esp
c010a68e:	ff 75 f4             	pushl  -0xc(%ebp)
c010a691:	e8 c5 4c 00 00       	call   c010f35b <inode_ref_inc>
c010a696:	83 c4 10             	add    $0x10,%esp
c010a699:	83 ec 0c             	sub    $0xc,%esp
c010a69c:	ff 75 f4             	pushl  -0xc(%ebp)
c010a69f:	e8 a5 4d 00 00       	call   c010f449 <inode_open_inc>
c010a6a4:	83 c4 10             	add    $0x10,%esp
    to->node = node;
c010a6a7:	8b 45 08             	mov    0x8(%ebp),%eax
c010a6aa:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a6ad:	89 50 14             	mov    %edx,0x14(%eax)
    fd_array_open(to);
c010a6b0:	83 ec 0c             	sub    $0xc,%esp
c010a6b3:	ff 75 08             	pushl  0x8(%ebp)
c010a6b6:	e8 af fe ff ff       	call   c010a56a <fd_array_open>
c010a6bb:	83 c4 10             	add    $0x10,%esp
}
c010a6be:	90                   	nop
c010a6bf:	c9                   	leave  
c010a6c0:	c3                   	ret    

c010a6c1 <fd2file>:

// fd2file - use fd as index of fd_array, return the array item (file)
static inline int
fd2file(int fd, struct file **file_store) {
c010a6c1:	55                   	push   %ebp
c010a6c2:	89 e5                	mov    %esp,%ebp
c010a6c4:	83 ec 18             	sub    $0x18,%esp
    if (testfd(fd)) {
c010a6c7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a6cb:	78 4b                	js     c010a718 <fd2file+0x57>
c010a6cd:	8b 45 08             	mov    0x8(%ebp),%eax
c010a6d0:	3d 90 00 00 00       	cmp    $0x90,%eax
c010a6d5:	77 41                	ja     c010a718 <fd2file+0x57>
        struct file *file = get_fd_array() + fd;
c010a6d7:	e8 01 fc ff ff       	call   c010a2dd <get_fd_array>
c010a6dc:	89 c1                	mov    %eax,%ecx
c010a6de:	8b 45 08             	mov    0x8(%ebp),%eax
c010a6e1:	c1 e0 02             	shl    $0x2,%eax
c010a6e4:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c010a6eb:	29 c2                	sub    %eax,%edx
c010a6ed:	89 d0                	mov    %edx,%eax
c010a6ef:	01 c8                	add    %ecx,%eax
c010a6f1:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (file->status == FD_OPENED && file->fd == fd) {
c010a6f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a6f7:	8b 00                	mov    (%eax),%eax
c010a6f9:	83 f8 02             	cmp    $0x2,%eax
c010a6fc:	75 1a                	jne    c010a718 <fd2file+0x57>
c010a6fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a701:	8b 40 0c             	mov    0xc(%eax),%eax
c010a704:	3b 45 08             	cmp    0x8(%ebp),%eax
c010a707:	75 0f                	jne    c010a718 <fd2file+0x57>
            *file_store = file;
c010a709:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a70c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a70f:	89 10                	mov    %edx,(%eax)
            return 0;
c010a711:	b8 00 00 00 00       	mov    $0x0,%eax
c010a716:	eb 05                	jmp    c010a71d <fd2file+0x5c>
        }
    }
    return -E_INVAL;
c010a718:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c010a71d:	c9                   	leave  
c010a71e:	c3                   	ret    

c010a71f <file_testfd>:

// file_testfd - test file is readble or writable?
bool
file_testfd(int fd, bool readable, bool writable) {
c010a71f:	55                   	push   %ebp
c010a720:	89 e5                	mov    %esp,%ebp
c010a722:	83 ec 18             	sub    $0x18,%esp
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c010a725:	83 ec 08             	sub    $0x8,%esp
c010a728:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010a72b:	50                   	push   %eax
c010a72c:	ff 75 08             	pushl  0x8(%ebp)
c010a72f:	e8 8d ff ff ff       	call   c010a6c1 <fd2file>
c010a734:	83 c4 10             	add    $0x10,%esp
c010a737:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a73a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a73e:	74 07                	je     c010a747 <file_testfd+0x28>
        return 0;
c010a740:	b8 00 00 00 00       	mov    $0x0,%eax
c010a745:	eb 33                	jmp    c010a77a <file_testfd+0x5b>
    }
    if (readable && !file->readable) {
c010a747:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010a74b:	74 11                	je     c010a75e <file_testfd+0x3f>
c010a74d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a750:	8b 40 04             	mov    0x4(%eax),%eax
c010a753:	85 c0                	test   %eax,%eax
c010a755:	75 07                	jne    c010a75e <file_testfd+0x3f>
        return 0;
c010a757:	b8 00 00 00 00       	mov    $0x0,%eax
c010a75c:	eb 1c                	jmp    c010a77a <file_testfd+0x5b>
    }
    if (writable && !file->writable) {
c010a75e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010a762:	74 11                	je     c010a775 <file_testfd+0x56>
c010a764:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a767:	8b 40 08             	mov    0x8(%eax),%eax
c010a76a:	85 c0                	test   %eax,%eax
c010a76c:	75 07                	jne    c010a775 <file_testfd+0x56>
        return 0;
c010a76e:	b8 00 00 00 00       	mov    $0x0,%eax
c010a773:	eb 05                	jmp    c010a77a <file_testfd+0x5b>
    }
    return 1;
c010a775:	b8 01 00 00 00       	mov    $0x1,%eax
}
c010a77a:	c9                   	leave  
c010a77b:	c3                   	ret    

c010a77c <file_open>:

// open file
int
file_open(char *path, uint32_t open_flags) {
c010a77c:	55                   	push   %ebp
c010a77d:	89 e5                	mov    %esp,%ebp
c010a77f:	83 ec 38             	sub    $0x38,%esp
    bool readable = 0, writable = 0;
c010a782:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010a789:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    switch (open_flags & O_ACCMODE) {
c010a790:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a793:	83 e0 03             	and    $0x3,%eax
c010a796:	83 f8 01             	cmp    $0x1,%eax
c010a799:	74 15                	je     c010a7b0 <file_open+0x34>
c010a79b:	83 f8 01             	cmp    $0x1,%eax
c010a79e:	72 07                	jb     c010a7a7 <file_open+0x2b>
c010a7a0:	83 f8 02             	cmp    $0x2,%eax
c010a7a3:	74 14                	je     c010a7b9 <file_open+0x3d>
c010a7a5:	eb 21                	jmp    c010a7c8 <file_open+0x4c>
    case O_RDONLY: readable = 1; break;
c010a7a7:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
c010a7ae:	eb 22                	jmp    c010a7d2 <file_open+0x56>
    case O_WRONLY: writable = 1; break;
c010a7b0:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c010a7b7:	eb 19                	jmp    c010a7d2 <file_open+0x56>
    case O_RDWR:
        readable = writable = 1;
c010a7b9:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c010a7c0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a7c3:	89 45 f4             	mov    %eax,-0xc(%ebp)
        break;
c010a7c6:	eb 0a                	jmp    c010a7d2 <file_open+0x56>
    default:
        return -E_INVAL;
c010a7c8:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010a7cd:	e9 47 01 00 00       	jmp    c010a919 <file_open+0x19d>
    }

    int ret;
    struct file *file;
    if ((ret = fd_array_alloc(NO_FD, &file)) != 0) {
c010a7d2:	83 ec 08             	sub    $0x8,%esp
c010a7d5:	8d 45 e0             	lea    -0x20(%ebp),%eax
c010a7d8:	50                   	push   %eax
c010a7d9:	68 d9 6a ff ff       	push   $0xffff6ad9
c010a7de:	e8 87 fb ff ff       	call   c010a36a <fd_array_alloc>
c010a7e3:	83 c4 10             	add    $0x10,%esp
c010a7e6:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010a7e9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010a7ed:	74 08                	je     c010a7f7 <file_open+0x7b>
        return ret;
c010a7ef:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a7f2:	e9 22 01 00 00       	jmp    c010a919 <file_open+0x19d>
    }

    struct inode *node;
    if ((ret = vfs_open(path, open_flags, &node)) != 0) {
c010a7f7:	83 ec 04             	sub    $0x4,%esp
c010a7fa:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010a7fd:	50                   	push   %eax
c010a7fe:	ff 75 0c             	pushl  0xc(%ebp)
c010a801:	ff 75 08             	pushl  0x8(%ebp)
c010a804:	e8 e6 4d 00 00       	call   c010f5ef <vfs_open>
c010a809:	83 c4 10             	add    $0x10,%esp
c010a80c:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010a80f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010a813:	74 17                	je     c010a82c <file_open+0xb0>
        fd_array_free(file);
c010a815:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a818:	83 ec 0c             	sub    $0xc,%esp
c010a81b:	50                   	push   %eax
c010a81c:	e8 17 fc ff ff       	call   c010a438 <fd_array_free>
c010a821:	83 c4 10             	add    $0x10,%esp
        return ret;
c010a824:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a827:	e9 ed 00 00 00       	jmp    c010a919 <file_open+0x19d>
    }

    file->pos = 0;
c010a82c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a82f:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
    if (open_flags & O_APPEND) {
c010a836:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a839:	83 e0 20             	and    $0x20,%eax
c010a83c:	85 c0                	test   %eax,%eax
c010a83e:	0f 84 a5 00 00 00    	je     c010a8e9 <file_open+0x16d>
        struct stat __stat, *stat = &__stat;
c010a844:	8d 45 cc             	lea    -0x34(%ebp),%eax
c010a847:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if ((ret = vop_fstat(node, stat)) != 0) {
c010a84a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a84d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010a850:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010a854:	74 17                	je     c010a86d <file_open+0xf1>
c010a856:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a859:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a85c:	85 c0                	test   %eax,%eax
c010a85e:	74 0d                	je     c010a86d <file_open+0xf1>
c010a860:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a863:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a866:	8b 40 14             	mov    0x14(%eax),%eax
c010a869:	85 c0                	test   %eax,%eax
c010a86b:	75 19                	jne    c010a886 <file_open+0x10a>
c010a86d:	68 f4 68 11 c0       	push   $0xc01168f4
c010a872:	68 b2 67 11 c0       	push   $0xc01167b2
c010a877:	68 b8 00 00 00       	push   $0xb8
c010a87c:	68 c7 67 11 c0       	push   $0xc01167c7
c010a881:	e8 67 5c ff ff       	call   c01004ed <__panic>
c010a886:	83 ec 08             	sub    $0x8,%esp
c010a889:	68 42 69 11 c0       	push   $0xc0116942
c010a88e:	ff 75 e4             	pushl  -0x1c(%ebp)
c010a891:	e8 97 4c 00 00       	call   c010f52d <inode_check>
c010a896:	83 c4 10             	add    $0x10,%esp
c010a899:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a89c:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a89f:	8b 40 14             	mov    0x14(%eax),%eax
c010a8a2:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010a8a5:	83 ec 08             	sub    $0x8,%esp
c010a8a8:	ff 75 e8             	pushl  -0x18(%ebp)
c010a8ab:	52                   	push   %edx
c010a8ac:	ff d0                	call   *%eax
c010a8ae:	83 c4 10             	add    $0x10,%esp
c010a8b1:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010a8b4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010a8b8:	74 23                	je     c010a8dd <file_open+0x161>
            vfs_close(node);
c010a8ba:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a8bd:	83 ec 0c             	sub    $0xc,%esp
c010a8c0:	50                   	push   %eax
c010a8c1:	e8 e1 4f 00 00       	call   c010f8a7 <vfs_close>
c010a8c6:	83 c4 10             	add    $0x10,%esp
            fd_array_free(file);
c010a8c9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a8cc:	83 ec 0c             	sub    $0xc,%esp
c010a8cf:	50                   	push   %eax
c010a8d0:	e8 63 fb ff ff       	call   c010a438 <fd_array_free>
c010a8d5:	83 c4 10             	add    $0x10,%esp
            return ret;
c010a8d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a8db:	eb 3c                	jmp    c010a919 <file_open+0x19d>
        }
        file->pos = stat->st_size;
c010a8dd:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a8e0:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010a8e3:	8b 52 0c             	mov    0xc(%edx),%edx
c010a8e6:	89 50 10             	mov    %edx,0x10(%eax)
    }

    file->node = node;
c010a8e9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a8ec:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010a8ef:	89 50 14             	mov    %edx,0x14(%eax)
    file->readable = readable;
c010a8f2:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a8f5:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a8f8:	89 50 04             	mov    %edx,0x4(%eax)
    file->writable = writable;
c010a8fb:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a8fe:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010a901:	89 50 08             	mov    %edx,0x8(%eax)
    fd_array_open(file);
c010a904:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a907:	83 ec 0c             	sub    $0xc,%esp
c010a90a:	50                   	push   %eax
c010a90b:	e8 5a fc ff ff       	call   c010a56a <fd_array_open>
c010a910:	83 c4 10             	add    $0x10,%esp
    return file->fd;
c010a913:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a916:	8b 40 0c             	mov    0xc(%eax),%eax
}
c010a919:	c9                   	leave  
c010a91a:	c3                   	ret    

c010a91b <file_close>:

// close file
int
file_close(int fd) {
c010a91b:	55                   	push   %ebp
c010a91c:	89 e5                	mov    %esp,%ebp
c010a91e:	83 ec 18             	sub    $0x18,%esp
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c010a921:	83 ec 08             	sub    $0x8,%esp
c010a924:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010a927:	50                   	push   %eax
c010a928:	ff 75 08             	pushl  0x8(%ebp)
c010a92b:	e8 91 fd ff ff       	call   c010a6c1 <fd2file>
c010a930:	83 c4 10             	add    $0x10,%esp
c010a933:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a936:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a93a:	74 05                	je     c010a941 <file_close+0x26>
        return ret;
c010a93c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a93f:	eb 14                	jmp    c010a955 <file_close+0x3a>
    }
    fd_array_close(file);
c010a941:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a944:	83 ec 0c             	sub    $0xc,%esp
c010a947:	50                   	push   %eax
c010a948:	e8 67 fc ff ff       	call   c010a5b4 <fd_array_close>
c010a94d:	83 c4 10             	add    $0x10,%esp
    return 0;
c010a950:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a955:	c9                   	leave  
c010a956:	c3                   	ret    

c010a957 <file_read>:

// read file
int
file_read(int fd, void *base, size_t len, size_t *copied_store) {
c010a957:	55                   	push   %ebp
c010a958:	89 e5                	mov    %esp,%ebp
c010a95a:	83 ec 38             	sub    $0x38,%esp
    int ret;
    struct file *file;
    *copied_store = 0;
c010a95d:	8b 45 14             	mov    0x14(%ebp),%eax
c010a960:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    if ((ret = fd2file(fd, &file)) != 0) {
c010a966:	83 ec 08             	sub    $0x8,%esp
c010a969:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c010a96c:	50                   	push   %eax
c010a96d:	ff 75 08             	pushl  0x8(%ebp)
c010a970:	e8 4c fd ff ff       	call   c010a6c1 <fd2file>
c010a975:	83 c4 10             	add    $0x10,%esp
c010a978:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a97b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a97f:	74 08                	je     c010a989 <file_read+0x32>
        return ret;
c010a981:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a984:	e9 f9 00 00 00       	jmp    c010aa82 <file_read+0x12b>
    }
    if (!file->readable) {
c010a989:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a98c:	8b 40 04             	mov    0x4(%eax),%eax
c010a98f:	85 c0                	test   %eax,%eax
c010a991:	75 0a                	jne    c010a99d <file_read+0x46>
        return -E_INVAL;
c010a993:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010a998:	e9 e5 00 00 00       	jmp    c010aa82 <file_read+0x12b>
    }
    fd_array_acquire(file);
c010a99d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a9a0:	83 ec 0c             	sub    $0xc,%esp
c010a9a3:	50                   	push   %eax
c010a9a4:	e8 0f fb ff ff       	call   c010a4b8 <fd_array_acquire>
c010a9a9:	83 c4 10             	add    $0x10,%esp

    struct iobuf __iob, *iob = iobuf_init(&__iob, base, len, file->pos);
c010a9ac:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a9af:	8b 40 10             	mov    0x10(%eax),%eax
c010a9b2:	50                   	push   %eax
c010a9b3:	ff 75 10             	pushl  0x10(%ebp)
c010a9b6:	ff 75 0c             	pushl  0xc(%ebp)
c010a9b9:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c010a9bc:	50                   	push   %eax
c010a9bd:	e8 5a 06 00 00       	call   c010b01c <iobuf_init>
c010a9c2:	83 c4 10             	add    $0x10,%esp
c010a9c5:	89 45 f0             	mov    %eax,-0x10(%ebp)
    ret = vop_read(file->node, iob);
c010a9c8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a9cb:	8b 40 14             	mov    0x14(%eax),%eax
c010a9ce:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010a9d1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010a9d5:	74 17                	je     c010a9ee <file_read+0x97>
c010a9d7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a9da:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a9dd:	85 c0                	test   %eax,%eax
c010a9df:	74 0d                	je     c010a9ee <file_read+0x97>
c010a9e1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a9e4:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a9e7:	8b 40 0c             	mov    0xc(%eax),%eax
c010a9ea:	85 c0                	test   %eax,%eax
c010a9ec:	75 19                	jne    c010aa07 <file_read+0xb0>
c010a9ee:	68 48 69 11 c0       	push   $0xc0116948
c010a9f3:	68 b2 67 11 c0       	push   $0xc01167b2
c010a9f8:	68 e2 00 00 00       	push   $0xe2
c010a9fd:	68 c7 67 11 c0       	push   $0xc01167c7
c010aa02:	e8 e6 5a ff ff       	call   c01004ed <__panic>
c010aa07:	83 ec 08             	sub    $0x8,%esp
c010aa0a:	68 95 69 11 c0       	push   $0xc0116995
c010aa0f:	ff 75 ec             	pushl  -0x14(%ebp)
c010aa12:	e8 16 4b 00 00       	call   c010f52d <inode_check>
c010aa17:	83 c4 10             	add    $0x10,%esp
c010aa1a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aa1d:	8b 40 3c             	mov    0x3c(%eax),%eax
c010aa20:	8b 40 0c             	mov    0xc(%eax),%eax
c010aa23:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010aa26:	8b 52 14             	mov    0x14(%edx),%edx
c010aa29:	83 ec 08             	sub    $0x8,%esp
c010aa2c:	ff 75 f0             	pushl  -0x10(%ebp)
c010aa2f:	52                   	push   %edx
c010aa30:	ff d0                	call   *%eax
c010aa32:	83 c4 10             	add    $0x10,%esp
c010aa35:	89 45 f4             	mov    %eax,-0xc(%ebp)

    size_t copied = iobuf_used(iob);
c010aa38:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aa3b:	8b 50 08             	mov    0x8(%eax),%edx
c010aa3e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aa41:	8b 40 0c             	mov    0xc(%eax),%eax
c010aa44:	29 c2                	sub    %eax,%edx
c010aa46:	89 d0                	mov    %edx,%eax
c010aa48:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (file->status == FD_OPENED) {
c010aa4b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010aa4e:	8b 00                	mov    (%eax),%eax
c010aa50:	83 f8 02             	cmp    $0x2,%eax
c010aa53:	75 13                	jne    c010aa68 <file_read+0x111>
        file->pos += copied;
c010aa55:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010aa58:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010aa5b:	8b 52 10             	mov    0x10(%edx),%edx
c010aa5e:	89 d1                	mov    %edx,%ecx
c010aa60:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010aa63:	01 ca                	add    %ecx,%edx
c010aa65:	89 50 10             	mov    %edx,0x10(%eax)
    }
    *copied_store = copied;
c010aa68:	8b 45 14             	mov    0x14(%ebp),%eax
c010aa6b:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010aa6e:	89 10                	mov    %edx,(%eax)
    fd_array_release(file);
c010aa70:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010aa73:	83 ec 0c             	sub    $0xc,%esp
c010aa76:	50                   	push   %eax
c010aa77:	e8 73 fa ff ff       	call   c010a4ef <fd_array_release>
c010aa7c:	83 c4 10             	add    $0x10,%esp
    return ret;
c010aa7f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010aa82:	c9                   	leave  
c010aa83:	c3                   	ret    

c010aa84 <file_write>:

// write file
int
file_write(int fd, void *base, size_t len, size_t *copied_store) {
c010aa84:	55                   	push   %ebp
c010aa85:	89 e5                	mov    %esp,%ebp
c010aa87:	83 ec 38             	sub    $0x38,%esp
    int ret;
    struct file *file;
    *copied_store = 0;
c010aa8a:	8b 45 14             	mov    0x14(%ebp),%eax
c010aa8d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    if ((ret = fd2file(fd, &file)) != 0) {
c010aa93:	83 ec 08             	sub    $0x8,%esp
c010aa96:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c010aa99:	50                   	push   %eax
c010aa9a:	ff 75 08             	pushl  0x8(%ebp)
c010aa9d:	e8 1f fc ff ff       	call   c010a6c1 <fd2file>
c010aaa2:	83 c4 10             	add    $0x10,%esp
c010aaa5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010aaa8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010aaac:	74 08                	je     c010aab6 <file_write+0x32>
        return ret;
c010aaae:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aab1:	e9 f9 00 00 00       	jmp    c010abaf <file_write+0x12b>
    }
    if (!file->writable) {
c010aab6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010aab9:	8b 40 08             	mov    0x8(%eax),%eax
c010aabc:	85 c0                	test   %eax,%eax
c010aabe:	75 0a                	jne    c010aaca <file_write+0x46>
        return -E_INVAL;
c010aac0:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010aac5:	e9 e5 00 00 00       	jmp    c010abaf <file_write+0x12b>
    }
    fd_array_acquire(file);
c010aaca:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010aacd:	83 ec 0c             	sub    $0xc,%esp
c010aad0:	50                   	push   %eax
c010aad1:	e8 e2 f9 ff ff       	call   c010a4b8 <fd_array_acquire>
c010aad6:	83 c4 10             	add    $0x10,%esp

    struct iobuf __iob, *iob = iobuf_init(&__iob, base, len, file->pos);
c010aad9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010aadc:	8b 40 10             	mov    0x10(%eax),%eax
c010aadf:	50                   	push   %eax
c010aae0:	ff 75 10             	pushl  0x10(%ebp)
c010aae3:	ff 75 0c             	pushl  0xc(%ebp)
c010aae6:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c010aae9:	50                   	push   %eax
c010aaea:	e8 2d 05 00 00       	call   c010b01c <iobuf_init>
c010aaef:	83 c4 10             	add    $0x10,%esp
c010aaf2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    ret = vop_write(file->node, iob);
c010aaf5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010aaf8:	8b 40 14             	mov    0x14(%eax),%eax
c010aafb:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010aafe:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010ab02:	74 17                	je     c010ab1b <file_write+0x97>
c010ab04:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ab07:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ab0a:	85 c0                	test   %eax,%eax
c010ab0c:	74 0d                	je     c010ab1b <file_write+0x97>
c010ab0e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ab11:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ab14:	8b 40 10             	mov    0x10(%eax),%eax
c010ab17:	85 c0                	test   %eax,%eax
c010ab19:	75 19                	jne    c010ab34 <file_write+0xb0>
c010ab1b:	68 9c 69 11 c0       	push   $0xc011699c
c010ab20:	68 b2 67 11 c0       	push   $0xc01167b2
c010ab25:	68 fc 00 00 00       	push   $0xfc
c010ab2a:	68 c7 67 11 c0       	push   $0xc01167c7
c010ab2f:	e8 b9 59 ff ff       	call   c01004ed <__panic>
c010ab34:	83 ec 08             	sub    $0x8,%esp
c010ab37:	68 ea 69 11 c0       	push   $0xc01169ea
c010ab3c:	ff 75 ec             	pushl  -0x14(%ebp)
c010ab3f:	e8 e9 49 00 00       	call   c010f52d <inode_check>
c010ab44:	83 c4 10             	add    $0x10,%esp
c010ab47:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ab4a:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ab4d:	8b 40 10             	mov    0x10(%eax),%eax
c010ab50:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010ab53:	8b 52 14             	mov    0x14(%edx),%edx
c010ab56:	83 ec 08             	sub    $0x8,%esp
c010ab59:	ff 75 f0             	pushl  -0x10(%ebp)
c010ab5c:	52                   	push   %edx
c010ab5d:	ff d0                	call   *%eax
c010ab5f:	83 c4 10             	add    $0x10,%esp
c010ab62:	89 45 f4             	mov    %eax,-0xc(%ebp)

    size_t copied = iobuf_used(iob);
c010ab65:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ab68:	8b 50 08             	mov    0x8(%eax),%edx
c010ab6b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ab6e:	8b 40 0c             	mov    0xc(%eax),%eax
c010ab71:	29 c2                	sub    %eax,%edx
c010ab73:	89 d0                	mov    %edx,%eax
c010ab75:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (file->status == FD_OPENED) {
c010ab78:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ab7b:	8b 00                	mov    (%eax),%eax
c010ab7d:	83 f8 02             	cmp    $0x2,%eax
c010ab80:	75 13                	jne    c010ab95 <file_write+0x111>
        file->pos += copied;
c010ab82:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ab85:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010ab88:	8b 52 10             	mov    0x10(%edx),%edx
c010ab8b:	89 d1                	mov    %edx,%ecx
c010ab8d:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010ab90:	01 ca                	add    %ecx,%edx
c010ab92:	89 50 10             	mov    %edx,0x10(%eax)
    }
    *copied_store = copied;
c010ab95:	8b 45 14             	mov    0x14(%ebp),%eax
c010ab98:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010ab9b:	89 10                	mov    %edx,(%eax)
    fd_array_release(file);
c010ab9d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010aba0:	83 ec 0c             	sub    $0xc,%esp
c010aba3:	50                   	push   %eax
c010aba4:	e8 46 f9 ff ff       	call   c010a4ef <fd_array_release>
c010aba9:	83 c4 10             	add    $0x10,%esp
    return ret;
c010abac:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010abaf:	c9                   	leave  
c010abb0:	c3                   	ret    

c010abb1 <file_seek>:

// seek file
int
file_seek(int fd, off_t pos, int whence) {
c010abb1:	55                   	push   %ebp
c010abb2:	89 e5                	mov    %esp,%ebp
c010abb4:	83 ec 38             	sub    $0x38,%esp
    struct stat __stat, *stat = &__stat;
c010abb7:	8d 45 d8             	lea    -0x28(%ebp),%eax
c010abba:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c010abbd:	83 ec 08             	sub    $0x8,%esp
c010abc0:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c010abc3:	50                   	push   %eax
c010abc4:	ff 75 08             	pushl  0x8(%ebp)
c010abc7:	e8 f5 fa ff ff       	call   c010a6c1 <fd2file>
c010abcc:	83 c4 10             	add    $0x10,%esp
c010abcf:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010abd2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010abd6:	74 08                	je     c010abe0 <file_seek+0x2f>
        return ret;
c010abd8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010abdb:	e9 61 01 00 00       	jmp    c010ad41 <file_seek+0x190>
    }
    fd_array_acquire(file);
c010abe0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010abe3:	83 ec 0c             	sub    $0xc,%esp
c010abe6:	50                   	push   %eax
c010abe7:	e8 cc f8 ff ff       	call   c010a4b8 <fd_array_acquire>
c010abec:	83 c4 10             	add    $0x10,%esp

    switch (whence) {
c010abef:	8b 45 10             	mov    0x10(%ebp),%eax
c010abf2:	83 f8 01             	cmp    $0x1,%eax
c010abf5:	74 12                	je     c010ac09 <file_seek+0x58>
c010abf7:	83 f8 02             	cmp    $0x2,%eax
c010abfa:	74 1b                	je     c010ac17 <file_seek+0x66>
c010abfc:	85 c0                	test   %eax,%eax
c010abfe:	0f 84 a2 00 00 00    	je     c010aca6 <file_seek+0xf5>
c010ac04:	e9 94 00 00 00       	jmp    c010ac9d <file_seek+0xec>
    case LSEEK_SET: break;
    case LSEEK_CUR: pos += file->pos; break;
c010ac09:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010ac0c:	8b 40 10             	mov    0x10(%eax),%eax
c010ac0f:	01 45 0c             	add    %eax,0xc(%ebp)
c010ac12:	e9 93 00 00 00       	jmp    c010acaa <file_seek+0xf9>
    case LSEEK_END:
        if ((ret = vop_fstat(file->node, stat)) == 0) {
c010ac17:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010ac1a:	8b 40 14             	mov    0x14(%eax),%eax
c010ac1d:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010ac20:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010ac24:	74 17                	je     c010ac3d <file_seek+0x8c>
c010ac26:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ac29:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ac2c:	85 c0                	test   %eax,%eax
c010ac2e:	74 0d                	je     c010ac3d <file_seek+0x8c>
c010ac30:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ac33:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ac36:	8b 40 14             	mov    0x14(%eax),%eax
c010ac39:	85 c0                	test   %eax,%eax
c010ac3b:	75 19                	jne    c010ac56 <file_seek+0xa5>
c010ac3d:	68 f4 68 11 c0       	push   $0xc01168f4
c010ac42:	68 b2 67 11 c0       	push   $0xc01167b2
c010ac47:	68 16 01 00 00       	push   $0x116
c010ac4c:	68 c7 67 11 c0       	push   $0xc01167c7
c010ac51:	e8 97 58 ff ff       	call   c01004ed <__panic>
c010ac56:	83 ec 08             	sub    $0x8,%esp
c010ac59:	68 42 69 11 c0       	push   $0xc0116942
c010ac5e:	ff 75 ec             	pushl  -0x14(%ebp)
c010ac61:	e8 c7 48 00 00       	call   c010f52d <inode_check>
c010ac66:	83 c4 10             	add    $0x10,%esp
c010ac69:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ac6c:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ac6f:	8b 40 14             	mov    0x14(%eax),%eax
c010ac72:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010ac75:	8b 52 14             	mov    0x14(%edx),%edx
c010ac78:	83 ec 08             	sub    $0x8,%esp
c010ac7b:	ff 75 f0             	pushl  -0x10(%ebp)
c010ac7e:	52                   	push   %edx
c010ac7f:	ff d0                	call   *%eax
c010ac81:	83 c4 10             	add    $0x10,%esp
c010ac84:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ac87:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ac8b:	75 1c                	jne    c010aca9 <file_seek+0xf8>
            pos += stat->st_size;
c010ac8d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ac90:	8b 50 0c             	mov    0xc(%eax),%edx
c010ac93:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ac96:	01 d0                	add    %edx,%eax
c010ac98:	89 45 0c             	mov    %eax,0xc(%ebp)
        }
        break;
c010ac9b:	eb 0c                	jmp    c010aca9 <file_seek+0xf8>
    default: ret = -E_INVAL;
c010ac9d:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
c010aca4:	eb 04                	jmp    c010acaa <file_seek+0xf9>
        return ret;
    }
    fd_array_acquire(file);

    switch (whence) {
    case LSEEK_SET: break;
c010aca6:	90                   	nop
c010aca7:	eb 01                	jmp    c010acaa <file_seek+0xf9>
    case LSEEK_CUR: pos += file->pos; break;
    case LSEEK_END:
        if ((ret = vop_fstat(file->node, stat)) == 0) {
            pos += stat->st_size;
        }
        break;
c010aca9:	90                   	nop
    default: ret = -E_INVAL;
    }

    if (ret == 0) {
c010acaa:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010acae:	75 7f                	jne    c010ad2f <file_seek+0x17e>
        if ((ret = vop_tryseek(file->node, pos)) == 0) {
c010acb0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010acb3:	8b 40 14             	mov    0x14(%eax),%eax
c010acb6:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010acb9:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010acbd:	74 17                	je     c010acd6 <file_seek+0x125>
c010acbf:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010acc2:	8b 40 3c             	mov    0x3c(%eax),%eax
c010acc5:	85 c0                	test   %eax,%eax
c010acc7:	74 0d                	je     c010acd6 <file_seek+0x125>
c010acc9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010accc:	8b 40 3c             	mov    0x3c(%eax),%eax
c010accf:	8b 40 2c             	mov    0x2c(%eax),%eax
c010acd2:	85 c0                	test   %eax,%eax
c010acd4:	75 19                	jne    c010acef <file_seek+0x13e>
c010acd6:	68 f0 69 11 c0       	push   $0xc01169f0
c010acdb:	68 b2 67 11 c0       	push   $0xc01167b2
c010ace0:	68 1e 01 00 00       	push   $0x11e
c010ace5:	68 c7 67 11 c0       	push   $0xc01167c7
c010acea:	e8 fe 57 ff ff       	call   c01004ed <__panic>
c010acef:	83 ec 08             	sub    $0x8,%esp
c010acf2:	68 40 6a 11 c0       	push   $0xc0116a40
c010acf7:	ff 75 e8             	pushl  -0x18(%ebp)
c010acfa:	e8 2e 48 00 00       	call   c010f52d <inode_check>
c010acff:	83 c4 10             	add    $0x10,%esp
c010ad02:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ad05:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ad08:	8b 40 2c             	mov    0x2c(%eax),%eax
c010ad0b:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010ad0e:	8b 52 14             	mov    0x14(%edx),%edx
c010ad11:	83 ec 08             	sub    $0x8,%esp
c010ad14:	ff 75 0c             	pushl  0xc(%ebp)
c010ad17:	52                   	push   %edx
c010ad18:	ff d0                	call   *%eax
c010ad1a:	83 c4 10             	add    $0x10,%esp
c010ad1d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ad20:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ad24:	75 09                	jne    c010ad2f <file_seek+0x17e>
            file->pos = pos;
c010ad26:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010ad29:	8b 55 0c             	mov    0xc(%ebp),%edx
c010ad2c:	89 50 10             	mov    %edx,0x10(%eax)
        }
//    cprintf("file_seek, pos=%d, whence=%d, ret=%d\n", pos, whence, ret);
    }
    fd_array_release(file);
c010ad2f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010ad32:	83 ec 0c             	sub    $0xc,%esp
c010ad35:	50                   	push   %eax
c010ad36:	e8 b4 f7 ff ff       	call   c010a4ef <fd_array_release>
c010ad3b:	83 c4 10             	add    $0x10,%esp
    return ret;
c010ad3e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010ad41:	c9                   	leave  
c010ad42:	c3                   	ret    

c010ad43 <file_fstat>:

// stat file
int
file_fstat(int fd, struct stat *stat) {
c010ad43:	55                   	push   %ebp
c010ad44:	89 e5                	mov    %esp,%ebp
c010ad46:	83 ec 18             	sub    $0x18,%esp
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c010ad49:	83 ec 08             	sub    $0x8,%esp
c010ad4c:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010ad4f:	50                   	push   %eax
c010ad50:	ff 75 08             	pushl  0x8(%ebp)
c010ad53:	e8 69 f9 ff ff       	call   c010a6c1 <fd2file>
c010ad58:	83 c4 10             	add    $0x10,%esp
c010ad5b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ad5e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ad62:	74 08                	je     c010ad6c <file_fstat+0x29>
        return ret;
c010ad64:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ad67:	e9 91 00 00 00       	jmp    c010adfd <file_fstat+0xba>
    }
    fd_array_acquire(file);
c010ad6c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ad6f:	83 ec 0c             	sub    $0xc,%esp
c010ad72:	50                   	push   %eax
c010ad73:	e8 40 f7 ff ff       	call   c010a4b8 <fd_array_acquire>
c010ad78:	83 c4 10             	add    $0x10,%esp
    ret = vop_fstat(file->node, stat);
c010ad7b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ad7e:	8b 40 14             	mov    0x14(%eax),%eax
c010ad81:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010ad84:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010ad88:	74 17                	je     c010ada1 <file_fstat+0x5e>
c010ad8a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ad8d:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ad90:	85 c0                	test   %eax,%eax
c010ad92:	74 0d                	je     c010ada1 <file_fstat+0x5e>
c010ad94:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ad97:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ad9a:	8b 40 14             	mov    0x14(%eax),%eax
c010ad9d:	85 c0                	test   %eax,%eax
c010ad9f:	75 19                	jne    c010adba <file_fstat+0x77>
c010ada1:	68 f4 68 11 c0       	push   $0xc01168f4
c010ada6:	68 b2 67 11 c0       	push   $0xc01167b2
c010adab:	68 30 01 00 00       	push   $0x130
c010adb0:	68 c7 67 11 c0       	push   $0xc01167c7
c010adb5:	e8 33 57 ff ff       	call   c01004ed <__panic>
c010adba:	83 ec 08             	sub    $0x8,%esp
c010adbd:	68 42 69 11 c0       	push   $0xc0116942
c010adc2:	ff 75 f0             	pushl  -0x10(%ebp)
c010adc5:	e8 63 47 00 00       	call   c010f52d <inode_check>
c010adca:	83 c4 10             	add    $0x10,%esp
c010adcd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010add0:	8b 40 3c             	mov    0x3c(%eax),%eax
c010add3:	8b 40 14             	mov    0x14(%eax),%eax
c010add6:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010add9:	8b 52 14             	mov    0x14(%edx),%edx
c010addc:	83 ec 08             	sub    $0x8,%esp
c010addf:	ff 75 0c             	pushl  0xc(%ebp)
c010ade2:	52                   	push   %edx
c010ade3:	ff d0                	call   *%eax
c010ade5:	83 c4 10             	add    $0x10,%esp
c010ade8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    fd_array_release(file);
c010adeb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010adee:	83 ec 0c             	sub    $0xc,%esp
c010adf1:	50                   	push   %eax
c010adf2:	e8 f8 f6 ff ff       	call   c010a4ef <fd_array_release>
c010adf7:	83 c4 10             	add    $0x10,%esp
    return ret;
c010adfa:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010adfd:	c9                   	leave  
c010adfe:	c3                   	ret    

c010adff <file_fsync>:

// sync file
int
file_fsync(int fd) {
c010adff:	55                   	push   %ebp
c010ae00:	89 e5                	mov    %esp,%ebp
c010ae02:	83 ec 18             	sub    $0x18,%esp
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c010ae05:	83 ec 08             	sub    $0x8,%esp
c010ae08:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010ae0b:	50                   	push   %eax
c010ae0c:	ff 75 08             	pushl  0x8(%ebp)
c010ae0f:	e8 ad f8 ff ff       	call   c010a6c1 <fd2file>
c010ae14:	83 c4 10             	add    $0x10,%esp
c010ae17:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ae1a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ae1e:	74 08                	je     c010ae28 <file_fsync+0x29>
        return ret;
c010ae20:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ae23:	e9 8e 00 00 00       	jmp    c010aeb6 <file_fsync+0xb7>
    }
    fd_array_acquire(file);
c010ae28:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ae2b:	83 ec 0c             	sub    $0xc,%esp
c010ae2e:	50                   	push   %eax
c010ae2f:	e8 84 f6 ff ff       	call   c010a4b8 <fd_array_acquire>
c010ae34:	83 c4 10             	add    $0x10,%esp
    ret = vop_fsync(file->node);
c010ae37:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ae3a:	8b 40 14             	mov    0x14(%eax),%eax
c010ae3d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010ae40:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010ae44:	74 17                	je     c010ae5d <file_fsync+0x5e>
c010ae46:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ae49:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ae4c:	85 c0                	test   %eax,%eax
c010ae4e:	74 0d                	je     c010ae5d <file_fsync+0x5e>
c010ae50:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ae53:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ae56:	8b 40 18             	mov    0x18(%eax),%eax
c010ae59:	85 c0                	test   %eax,%eax
c010ae5b:	75 19                	jne    c010ae76 <file_fsync+0x77>
c010ae5d:	68 48 6a 11 c0       	push   $0xc0116a48
c010ae62:	68 b2 67 11 c0       	push   $0xc01167b2
c010ae67:	68 3e 01 00 00       	push   $0x13e
c010ae6c:	68 c7 67 11 c0       	push   $0xc01167c7
c010ae71:	e8 77 56 ff ff       	call   c01004ed <__panic>
c010ae76:	83 ec 08             	sub    $0x8,%esp
c010ae79:	68 96 6a 11 c0       	push   $0xc0116a96
c010ae7e:	ff 75 f0             	pushl  -0x10(%ebp)
c010ae81:	e8 a7 46 00 00       	call   c010f52d <inode_check>
c010ae86:	83 c4 10             	add    $0x10,%esp
c010ae89:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ae8c:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ae8f:	8b 40 18             	mov    0x18(%eax),%eax
c010ae92:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010ae95:	8b 52 14             	mov    0x14(%edx),%edx
c010ae98:	83 ec 0c             	sub    $0xc,%esp
c010ae9b:	52                   	push   %edx
c010ae9c:	ff d0                	call   *%eax
c010ae9e:	83 c4 10             	add    $0x10,%esp
c010aea1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    fd_array_release(file);
c010aea4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aea7:	83 ec 0c             	sub    $0xc,%esp
c010aeaa:	50                   	push   %eax
c010aeab:	e8 3f f6 ff ff       	call   c010a4ef <fd_array_release>
c010aeb0:	83 c4 10             	add    $0x10,%esp
    return ret;
c010aeb3:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010aeb6:	c9                   	leave  
c010aeb7:	c3                   	ret    

c010aeb8 <file_getdirentry>:

// get file entry in DIR
int
file_getdirentry(int fd, struct dirent *direntp) {
c010aeb8:	55                   	push   %ebp
c010aeb9:	89 e5                	mov    %esp,%ebp
c010aebb:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c010aebe:	83 ec 08             	sub    $0x8,%esp
c010aec1:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010aec4:	50                   	push   %eax
c010aec5:	ff 75 08             	pushl  0x8(%ebp)
c010aec8:	e8 f4 f7 ff ff       	call   c010a6c1 <fd2file>
c010aecd:	83 c4 10             	add    $0x10,%esp
c010aed0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010aed3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010aed7:	74 08                	je     c010aee1 <file_getdirentry+0x29>
        return ret;
c010aed9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aedc:	e9 d8 00 00 00       	jmp    c010afb9 <file_getdirentry+0x101>
    }
    fd_array_acquire(file);
c010aee1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010aee4:	83 ec 0c             	sub    $0xc,%esp
c010aee7:	50                   	push   %eax
c010aee8:	e8 cb f5 ff ff       	call   c010a4b8 <fd_array_acquire>
c010aeed:	83 c4 10             	add    $0x10,%esp

    struct iobuf __iob, *iob = iobuf_init(&__iob, direntp->name, sizeof(direntp->name), direntp->offset);
c010aef0:	8b 45 0c             	mov    0xc(%ebp),%eax
c010aef3:	8b 00                	mov    (%eax),%eax
c010aef5:	8b 55 0c             	mov    0xc(%ebp),%edx
c010aef8:	83 c2 04             	add    $0x4,%edx
c010aefb:	50                   	push   %eax
c010aefc:	68 00 01 00 00       	push   $0x100
c010af01:	52                   	push   %edx
c010af02:	8d 45 d8             	lea    -0x28(%ebp),%eax
c010af05:	50                   	push   %eax
c010af06:	e8 11 01 00 00       	call   c010b01c <iobuf_init>
c010af0b:	83 c4 10             	add    $0x10,%esp
c010af0e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = vop_getdirentry(file->node, iob)) == 0) {
c010af11:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010af14:	8b 40 14             	mov    0x14(%eax),%eax
c010af17:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010af1a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010af1e:	74 17                	je     c010af37 <file_getdirentry+0x7f>
c010af20:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010af23:	8b 40 3c             	mov    0x3c(%eax),%eax
c010af26:	85 c0                	test   %eax,%eax
c010af28:	74 0d                	je     c010af37 <file_getdirentry+0x7f>
c010af2a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010af2d:	8b 40 3c             	mov    0x3c(%eax),%eax
c010af30:	8b 40 20             	mov    0x20(%eax),%eax
c010af33:	85 c0                	test   %eax,%eax
c010af35:	75 19                	jne    c010af50 <file_getdirentry+0x98>
c010af37:	68 9c 6a 11 c0       	push   $0xc0116a9c
c010af3c:	68 b2 67 11 c0       	push   $0xc01167b2
c010af41:	68 4e 01 00 00       	push   $0x14e
c010af46:	68 c7 67 11 c0       	push   $0xc01167c7
c010af4b:	e8 9d 55 ff ff       	call   c01004ed <__panic>
c010af50:	83 ec 08             	sub    $0x8,%esp
c010af53:	68 f0 6a 11 c0       	push   $0xc0116af0
c010af58:	ff 75 ec             	pushl  -0x14(%ebp)
c010af5b:	e8 cd 45 00 00       	call   c010f52d <inode_check>
c010af60:	83 c4 10             	add    $0x10,%esp
c010af63:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010af66:	8b 40 3c             	mov    0x3c(%eax),%eax
c010af69:	8b 40 20             	mov    0x20(%eax),%eax
c010af6c:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010af6f:	8b 52 14             	mov    0x14(%edx),%edx
c010af72:	83 ec 08             	sub    $0x8,%esp
c010af75:	ff 75 f0             	pushl  -0x10(%ebp)
c010af78:	52                   	push   %edx
c010af79:	ff d0                	call   *%eax
c010af7b:	83 c4 10             	add    $0x10,%esp
c010af7e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010af81:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010af85:	75 20                	jne    c010afa7 <file_getdirentry+0xef>
        direntp->offset += iobuf_used(iob);
c010af87:	8b 45 0c             	mov    0xc(%ebp),%eax
c010af8a:	8b 00                	mov    (%eax),%eax
c010af8c:	89 c1                	mov    %eax,%ecx
c010af8e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010af91:	8b 50 08             	mov    0x8(%eax),%edx
c010af94:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010af97:	8b 40 0c             	mov    0xc(%eax),%eax
c010af9a:	29 c2                	sub    %eax,%edx
c010af9c:	89 d0                	mov    %edx,%eax
c010af9e:	01 c8                	add    %ecx,%eax
c010afa0:	89 c2                	mov    %eax,%edx
c010afa2:	8b 45 0c             	mov    0xc(%ebp),%eax
c010afa5:	89 10                	mov    %edx,(%eax)
    }
    fd_array_release(file);
c010afa7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010afaa:	83 ec 0c             	sub    $0xc,%esp
c010afad:	50                   	push   %eax
c010afae:	e8 3c f5 ff ff       	call   c010a4ef <fd_array_release>
c010afb3:	83 c4 10             	add    $0x10,%esp
    return ret;
c010afb6:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010afb9:	c9                   	leave  
c010afba:	c3                   	ret    

c010afbb <file_dup>:

// duplicate file
int
file_dup(int fd1, int fd2) {
c010afbb:	55                   	push   %ebp
c010afbc:	89 e5                	mov    %esp,%ebp
c010afbe:	83 ec 18             	sub    $0x18,%esp
    int ret;
    struct file *file1, *file2;
    if ((ret = fd2file(fd1, &file1)) != 0) {
c010afc1:	83 ec 08             	sub    $0x8,%esp
c010afc4:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010afc7:	50                   	push   %eax
c010afc8:	ff 75 08             	pushl  0x8(%ebp)
c010afcb:	e8 f1 f6 ff ff       	call   c010a6c1 <fd2file>
c010afd0:	83 c4 10             	add    $0x10,%esp
c010afd3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010afd6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010afda:	74 05                	je     c010afe1 <file_dup+0x26>
        return ret;
c010afdc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010afdf:	eb 39                	jmp    c010b01a <file_dup+0x5f>
    }
    if ((ret = fd_array_alloc(fd2, &file2)) != 0) {
c010afe1:	83 ec 08             	sub    $0x8,%esp
c010afe4:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010afe7:	50                   	push   %eax
c010afe8:	ff 75 0c             	pushl  0xc(%ebp)
c010afeb:	e8 7a f3 ff ff       	call   c010a36a <fd_array_alloc>
c010aff0:	83 c4 10             	add    $0x10,%esp
c010aff3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010aff6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010affa:	74 05                	je     c010b001 <file_dup+0x46>
        return ret;
c010affc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010afff:	eb 19                	jmp    c010b01a <file_dup+0x5f>
    }
    fd_array_dup(file2, file1);
c010b001:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010b004:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b007:	83 ec 08             	sub    $0x8,%esp
c010b00a:	52                   	push   %edx
c010b00b:	50                   	push   %eax
c010b00c:	e8 1d f6 ff ff       	call   c010a62e <fd_array_dup>
c010b011:	83 c4 10             	add    $0x10,%esp
    return file2->fd;
c010b014:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b017:	8b 40 0c             	mov    0xc(%eax),%eax
}
c010b01a:	c9                   	leave  
c010b01b:	c3                   	ret    

c010b01c <iobuf_init>:
 *                set up io_base to point to the buffer you want to transfer to, and set io_len to the length of buffer;
 *                initialize io_offset as desired;
 *                initialize io_resid to the total amount of data that can be transferred through this io.
 */
struct iobuf *
iobuf_init(struct iobuf *iob, void *base, size_t len, off_t offset) {
c010b01c:	55                   	push   %ebp
c010b01d:	89 e5                	mov    %esp,%ebp
    iob->io_base = base;
c010b01f:	8b 45 08             	mov    0x8(%ebp),%eax
c010b022:	8b 55 0c             	mov    0xc(%ebp),%edx
c010b025:	89 10                	mov    %edx,(%eax)
    iob->io_offset = offset;
c010b027:	8b 45 08             	mov    0x8(%ebp),%eax
c010b02a:	8b 55 14             	mov    0x14(%ebp),%edx
c010b02d:	89 50 04             	mov    %edx,0x4(%eax)
    iob->io_len = iob->io_resid = len;
c010b030:	8b 45 08             	mov    0x8(%ebp),%eax
c010b033:	8b 55 10             	mov    0x10(%ebp),%edx
c010b036:	89 50 0c             	mov    %edx,0xc(%eax)
c010b039:	8b 45 08             	mov    0x8(%ebp),%eax
c010b03c:	8b 50 0c             	mov    0xc(%eax),%edx
c010b03f:	8b 45 08             	mov    0x8(%ebp),%eax
c010b042:	89 50 08             	mov    %edx,0x8(%eax)
    return iob;
c010b045:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010b048:	5d                   	pop    %ebp
c010b049:	c3                   	ret    

c010b04a <iobuf_move>:
 * iobuf_move may be called repeatedly on the same io to transfer
 * additional data until the available buffer space the io refers to
 * is exhausted.
 */
int
iobuf_move(struct iobuf *iob, void *data, size_t len, bool m2b, size_t *copiedp) {
c010b04a:	55                   	push   %ebp
c010b04b:	89 e5                	mov    %esp,%ebp
c010b04d:	83 ec 18             	sub    $0x18,%esp
    size_t alen;
    if ((alen = iob->io_resid) > len) {
c010b050:	8b 45 08             	mov    0x8(%ebp),%eax
c010b053:	8b 40 0c             	mov    0xc(%eax),%eax
c010b056:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b059:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b05c:	3b 45 10             	cmp    0x10(%ebp),%eax
c010b05f:	76 06                	jbe    c010b067 <iobuf_move+0x1d>
        alen = len;
c010b061:	8b 45 10             	mov    0x10(%ebp),%eax
c010b064:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    if (alen > 0) {
c010b067:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b06b:	74 51                	je     c010b0be <iobuf_move+0x74>
        void *src = iob->io_base, *dst = data;
c010b06d:	8b 45 08             	mov    0x8(%ebp),%eax
c010b070:	8b 00                	mov    (%eax),%eax
c010b072:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b075:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b078:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (m2b) {
c010b07b:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010b07f:	74 12                	je     c010b093 <iobuf_move+0x49>
            void *tmp = src;
c010b081:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b084:	89 45 e8             	mov    %eax,-0x18(%ebp)
            src = dst, dst = tmp;
c010b087:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b08a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b08d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b090:	89 45 ec             	mov    %eax,-0x14(%ebp)
        }
        memmove(dst, src, alen);
c010b093:	83 ec 04             	sub    $0x4,%esp
c010b096:	ff 75 f4             	pushl  -0xc(%ebp)
c010b099:	ff 75 f0             	pushl  -0x10(%ebp)
c010b09c:	ff 75 ec             	pushl  -0x14(%ebp)
c010b09f:	e8 fe 89 00 00       	call   c0113aa2 <memmove>
c010b0a4:	83 c4 10             	add    $0x10,%esp
        iobuf_skip(iob, alen), len -= alen;
c010b0a7:	83 ec 08             	sub    $0x8,%esp
c010b0aa:	ff 75 f4             	pushl  -0xc(%ebp)
c010b0ad:	ff 75 08             	pushl  0x8(%ebp)
c010b0b0:	e8 9d 00 00 00       	call   c010b152 <iobuf_skip>
c010b0b5:	83 c4 10             	add    $0x10,%esp
c010b0b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b0bb:	29 45 10             	sub    %eax,0x10(%ebp)
    }
    if (copiedp != NULL) {
c010b0be:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c010b0c2:	74 08                	je     c010b0cc <iobuf_move+0x82>
        *copiedp = alen;
c010b0c4:	8b 45 18             	mov    0x18(%ebp),%eax
c010b0c7:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b0ca:	89 10                	mov    %edx,(%eax)
    }
    return (len == 0) ? 0 : -E_NO_MEM;
c010b0cc:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010b0d0:	75 07                	jne    c010b0d9 <iobuf_move+0x8f>
c010b0d2:	b8 00 00 00 00       	mov    $0x0,%eax
c010b0d7:	eb 05                	jmp    c010b0de <iobuf_move+0x94>
c010b0d9:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c010b0de:	c9                   	leave  
c010b0df:	c3                   	ret    

c010b0e0 <iobuf_move_zeros>:
/*
 * iobuf_move_zeros - set io buffer zero
 * @copiedp:  the size of data memcopied
 */
int
iobuf_move_zeros(struct iobuf *iob, size_t len, size_t *copiedp) {
c010b0e0:	55                   	push   %ebp
c010b0e1:	89 e5                	mov    %esp,%ebp
c010b0e3:	83 ec 18             	sub    $0x18,%esp
    size_t alen;
    if ((alen = iob->io_resid) > len) {
c010b0e6:	8b 45 08             	mov    0x8(%ebp),%eax
c010b0e9:	8b 40 0c             	mov    0xc(%eax),%eax
c010b0ec:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b0ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b0f2:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010b0f5:	76 06                	jbe    c010b0fd <iobuf_move_zeros+0x1d>
        alen = len;
c010b0f7:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b0fa:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    if (alen > 0) {
c010b0fd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b101:	74 2d                	je     c010b130 <iobuf_move_zeros+0x50>
        memset(iob->io_base, 0, alen);
c010b103:	8b 45 08             	mov    0x8(%ebp),%eax
c010b106:	8b 00                	mov    (%eax),%eax
c010b108:	83 ec 04             	sub    $0x4,%esp
c010b10b:	ff 75 f4             	pushl  -0xc(%ebp)
c010b10e:	6a 00                	push   $0x0
c010b110:	50                   	push   %eax
c010b111:	e8 4c 89 00 00       	call   c0113a62 <memset>
c010b116:	83 c4 10             	add    $0x10,%esp
        iobuf_skip(iob, alen), len -= alen;
c010b119:	83 ec 08             	sub    $0x8,%esp
c010b11c:	ff 75 f4             	pushl  -0xc(%ebp)
c010b11f:	ff 75 08             	pushl  0x8(%ebp)
c010b122:	e8 2b 00 00 00       	call   c010b152 <iobuf_skip>
c010b127:	83 c4 10             	add    $0x10,%esp
c010b12a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b12d:	29 45 0c             	sub    %eax,0xc(%ebp)
    }
    if (copiedp != NULL) {
c010b130:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010b134:	74 08                	je     c010b13e <iobuf_move_zeros+0x5e>
        *copiedp = alen;
c010b136:	8b 45 10             	mov    0x10(%ebp),%eax
c010b139:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b13c:	89 10                	mov    %edx,(%eax)
    }
    return (len == 0) ? 0 : -E_NO_MEM;
c010b13e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010b142:	75 07                	jne    c010b14b <iobuf_move_zeros+0x6b>
c010b144:	b8 00 00 00 00       	mov    $0x0,%eax
c010b149:	eb 05                	jmp    c010b150 <iobuf_move_zeros+0x70>
c010b14b:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c010b150:	c9                   	leave  
c010b151:	c3                   	ret    

c010b152 <iobuf_skip>:

/*
 * iobuf_skip - change the current position of io buffer
 */
void
iobuf_skip(struct iobuf *iob, size_t n) {
c010b152:	55                   	push   %ebp
c010b153:	89 e5                	mov    %esp,%ebp
c010b155:	83 ec 08             	sub    $0x8,%esp
    assert(iob->io_resid >= n);
c010b158:	8b 45 08             	mov    0x8(%ebp),%eax
c010b15b:	8b 40 0c             	mov    0xc(%eax),%eax
c010b15e:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010b161:	73 16                	jae    c010b179 <iobuf_skip+0x27>
c010b163:	68 fc 6a 11 c0       	push   $0xc0116afc
c010b168:	68 0f 6b 11 c0       	push   $0xc0116b0f
c010b16d:	6a 4a                	push   $0x4a
c010b16f:	68 24 6b 11 c0       	push   $0xc0116b24
c010b174:	e8 74 53 ff ff       	call   c01004ed <__panic>
    iob->io_base += n, iob->io_offset += n, iob->io_resid -= n;
c010b179:	8b 45 08             	mov    0x8(%ebp),%eax
c010b17c:	8b 10                	mov    (%eax),%edx
c010b17e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b181:	01 c2                	add    %eax,%edx
c010b183:	8b 45 08             	mov    0x8(%ebp),%eax
c010b186:	89 10                	mov    %edx,(%eax)
c010b188:	8b 45 08             	mov    0x8(%ebp),%eax
c010b18b:	8b 40 04             	mov    0x4(%eax),%eax
c010b18e:	89 c2                	mov    %eax,%edx
c010b190:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b193:	01 d0                	add    %edx,%eax
c010b195:	89 c2                	mov    %eax,%edx
c010b197:	8b 45 08             	mov    0x8(%ebp),%eax
c010b19a:	89 50 04             	mov    %edx,0x4(%eax)
c010b19d:	8b 45 08             	mov    0x8(%ebp),%eax
c010b1a0:	8b 40 0c             	mov    0xc(%eax),%eax
c010b1a3:	2b 45 0c             	sub    0xc(%ebp),%eax
c010b1a6:	89 c2                	mov    %eax,%edx
c010b1a8:	8b 45 08             	mov    0x8(%ebp),%eax
c010b1ab:	89 50 0c             	mov    %edx,0xc(%eax)
}
c010b1ae:	90                   	nop
c010b1af:	c9                   	leave  
c010b1b0:	c3                   	ret    

c010b1b1 <files_count>:
void files_destroy(struct files_struct *filesp);
void files_closeall(struct files_struct *filesp);
int dup_files(struct files_struct *to, struct files_struct *from);

static inline int
files_count(struct files_struct *filesp) {
c010b1b1:	55                   	push   %ebp
c010b1b2:	89 e5                	mov    %esp,%ebp
    return filesp->files_count;
c010b1b4:	8b 45 08             	mov    0x8(%ebp),%eax
c010b1b7:	8b 40 08             	mov    0x8(%eax),%eax
}
c010b1ba:	5d                   	pop    %ebp
c010b1bb:	c3                   	ret    

c010b1bc <fs_init>:
#include <sfs.h>
#include <inode.h>
#include <assert.h>
//called when init_main proc start
void
fs_init(void) {
c010b1bc:	55                   	push   %ebp
c010b1bd:	89 e5                	mov    %esp,%ebp
c010b1bf:	83 ec 08             	sub    $0x8,%esp
    vfs_init();
c010b1c2:	e8 72 47 00 00       	call   c010f939 <vfs_init>
    dev_init();
c010b1c7:	e8 31 55 00 00       	call   c01106fd <dev_init>
    sfs_init();
c010b1cc:	e8 7d 55 00 00       	call   c011074e <sfs_init>
}
c010b1d1:	90                   	nop
c010b1d2:	c9                   	leave  
c010b1d3:	c3                   	ret    

c010b1d4 <fs_cleanup>:

void
fs_cleanup(void) {
c010b1d4:	55                   	push   %ebp
c010b1d5:	89 e5                	mov    %esp,%ebp
c010b1d7:	83 ec 08             	sub    $0x8,%esp
    vfs_cleanup();
c010b1da:	e8 3a 33 00 00       	call   c010e519 <vfs_cleanup>
}
c010b1df:	90                   	nop
c010b1e0:	c9                   	leave  
c010b1e1:	c3                   	ret    

c010b1e2 <lock_files>:

void
lock_files(struct files_struct *filesp) {
c010b1e2:	55                   	push   %ebp
c010b1e3:	89 e5                	mov    %esp,%ebp
c010b1e5:	83 ec 08             	sub    $0x8,%esp
    down(&(filesp->files_sem));
c010b1e8:	8b 45 08             	mov    0x8(%ebp),%eax
c010b1eb:	83 c0 0c             	add    $0xc,%eax
c010b1ee:	83 ec 0c             	sub    $0xc,%esp
c010b1f1:	50                   	push   %eax
c010b1f2:	e8 b6 e5 ff ff       	call   c01097ad <down>
c010b1f7:	83 c4 10             	add    $0x10,%esp
}
c010b1fa:	90                   	nop
c010b1fb:	c9                   	leave  
c010b1fc:	c3                   	ret    

c010b1fd <unlock_files>:

void
unlock_files(struct files_struct *filesp) {
c010b1fd:	55                   	push   %ebp
c010b1fe:	89 e5                	mov    %esp,%ebp
c010b200:	83 ec 08             	sub    $0x8,%esp
    up(&(filesp->files_sem));
c010b203:	8b 45 08             	mov    0x8(%ebp),%eax
c010b206:	83 c0 0c             	add    $0xc,%eax
c010b209:	83 ec 0c             	sub    $0xc,%esp
c010b20c:	50                   	push   %eax
c010b20d:	e8 7f e5 ff ff       	call   c0109791 <up>
c010b212:	83 c4 10             	add    $0x10,%esp
}
c010b215:	90                   	nop
c010b216:	c9                   	leave  
c010b217:	c3                   	ret    

c010b218 <files_create>:
//Called when a new proc init
struct files_struct *
files_create(void) {
c010b218:	55                   	push   %ebp
c010b219:	89 e5                	mov    %esp,%ebp
c010b21b:	83 ec 18             	sub    $0x18,%esp
    //cprintf("[files_create]\n");
    static_assert((int)FILES_STRUCT_NENTRY > 128);
    struct files_struct *filesp;
    if ((filesp = kmalloc(sizeof(struct files_struct) + FILES_STRUCT_BUFSIZE)) != NULL) {
c010b21e:	83 ec 0c             	sub    $0xc,%esp
c010b221:	68 00 10 00 00       	push   $0x1000
c010b226:	e8 d7 a0 ff ff       	call   c0105302 <kmalloc>
c010b22b:	83 c4 10             	add    $0x10,%esp
c010b22e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b231:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b235:	74 45                	je     c010b27c <files_create+0x64>
        filesp->pwd = NULL;
c010b237:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b23a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        filesp->fd_array = (void *)(filesp + 1);
c010b240:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b243:	8d 50 18             	lea    0x18(%eax),%edx
c010b246:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b249:	89 50 04             	mov    %edx,0x4(%eax)
        filesp->files_count = 0;
c010b24c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b24f:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        sem_init(&(filesp->files_sem), 1);
c010b256:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b259:	83 c0 0c             	add    $0xc,%eax
c010b25c:	83 ec 08             	sub    $0x8,%esp
c010b25f:	6a 01                	push   $0x1
c010b261:	50                   	push   %eax
c010b262:	e8 bd e3 ff ff       	call   c0109624 <sem_init>
c010b267:	83 c4 10             	add    $0x10,%esp
        fd_array_init(filesp->fd_array);
c010b26a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b26d:	8b 40 04             	mov    0x4(%eax),%eax
c010b270:	83 ec 0c             	sub    $0xc,%esp
c010b273:	50                   	push   %eax
c010b274:	e8 ab f0 ff ff       	call   c010a324 <fd_array_init>
c010b279:	83 c4 10             	add    $0x10,%esp
    }
    return filesp;
c010b27c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010b27f:	c9                   	leave  
c010b280:	c3                   	ret    

c010b281 <files_destroy>:
//Called when a proc exit
void
files_destroy(struct files_struct *filesp) {
c010b281:	55                   	push   %ebp
c010b282:	89 e5                	mov    %esp,%ebp
c010b284:	83 ec 18             	sub    $0x18,%esp
//    cprintf("[files_destroy]\n");
    assert(filesp != NULL && files_count(filesp) == 0);
c010b287:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b28b:	74 0f                	je     c010b29c <files_destroy+0x1b>
c010b28d:	ff 75 08             	pushl  0x8(%ebp)
c010b290:	e8 1c ff ff ff       	call   c010b1b1 <files_count>
c010b295:	83 c4 04             	add    $0x4,%esp
c010b298:	85 c0                	test   %eax,%eax
c010b29a:	74 16                	je     c010b2b2 <files_destroy+0x31>
c010b29c:	68 34 6b 11 c0       	push   $0xc0116b34
c010b2a1:	68 5f 6b 11 c0       	push   $0xc0116b5f
c010b2a6:	6a 33                	push   $0x33
c010b2a8:	68 74 6b 11 c0       	push   $0xc0116b74
c010b2ad:	e8 3b 52 ff ff       	call   c01004ed <__panic>
    if (filesp->pwd != NULL) {
c010b2b2:	8b 45 08             	mov    0x8(%ebp),%eax
c010b2b5:	8b 00                	mov    (%eax),%eax
c010b2b7:	85 c0                	test   %eax,%eax
c010b2b9:	74 11                	je     c010b2cc <files_destroy+0x4b>
        vop_ref_dec(filesp->pwd);
c010b2bb:	8b 45 08             	mov    0x8(%ebp),%eax
c010b2be:	8b 00                	mov    (%eax),%eax
c010b2c0:	83 ec 0c             	sub    $0xc,%esp
c010b2c3:	50                   	push   %eax
c010b2c4:	e8 ac 40 00 00       	call   c010f375 <inode_ref_dec>
c010b2c9:	83 c4 10             	add    $0x10,%esp
    }
    int i;
    struct file *file = filesp->fd_array;
c010b2cc:	8b 45 08             	mov    0x8(%ebp),%eax
c010b2cf:	8b 40 04             	mov    0x4(%eax),%eax
c010b2d2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    for (i = 0; i < FILES_STRUCT_NENTRY; i ++, file ++) {
c010b2d5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010b2dc:	eb 3f                	jmp    c010b31d <files_destroy+0x9c>
        if (file->status == FD_OPENED) {
c010b2de:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b2e1:	8b 00                	mov    (%eax),%eax
c010b2e3:	83 f8 02             	cmp    $0x2,%eax
c010b2e6:	75 0e                	jne    c010b2f6 <files_destroy+0x75>
            fd_array_close(file);
c010b2e8:	83 ec 0c             	sub    $0xc,%esp
c010b2eb:	ff 75 f0             	pushl  -0x10(%ebp)
c010b2ee:	e8 c1 f2 ff ff       	call   c010a5b4 <fd_array_close>
c010b2f3:	83 c4 10             	add    $0x10,%esp
        }
        assert(file->status == FD_NONE);
c010b2f6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b2f9:	8b 00                	mov    (%eax),%eax
c010b2fb:	85 c0                	test   %eax,%eax
c010b2fd:	74 16                	je     c010b315 <files_destroy+0x94>
c010b2ff:	68 81 6b 11 c0       	push   $0xc0116b81
c010b304:	68 5f 6b 11 c0       	push   $0xc0116b5f
c010b309:	6a 3d                	push   $0x3d
c010b30b:	68 74 6b 11 c0       	push   $0xc0116b74
c010b310:	e8 d8 51 ff ff       	call   c01004ed <__panic>
    if (filesp->pwd != NULL) {
        vop_ref_dec(filesp->pwd);
    }
    int i;
    struct file *file = filesp->fd_array;
    for (i = 0; i < FILES_STRUCT_NENTRY; i ++, file ++) {
c010b315:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010b319:	83 45 f0 1c          	addl   $0x1c,-0x10(%ebp)
c010b31d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b320:	3d 90 00 00 00       	cmp    $0x90,%eax
c010b325:	76 b7                	jbe    c010b2de <files_destroy+0x5d>
        if (file->status == FD_OPENED) {
            fd_array_close(file);
        }
        assert(file->status == FD_NONE);
    }
    kfree(filesp);
c010b327:	83 ec 0c             	sub    $0xc,%esp
c010b32a:	ff 75 08             	pushl  0x8(%ebp)
c010b32d:	e8 e8 9f ff ff       	call   c010531a <kfree>
c010b332:	83 c4 10             	add    $0x10,%esp
}
c010b335:	90                   	nop
c010b336:	c9                   	leave  
c010b337:	c3                   	ret    

c010b338 <files_closeall>:

void
files_closeall(struct files_struct *filesp) {
c010b338:	55                   	push   %ebp
c010b339:	89 e5                	mov    %esp,%ebp
c010b33b:	83 ec 18             	sub    $0x18,%esp
//    cprintf("[files_closeall]\n");
    assert(filesp != NULL && files_count(filesp) > 0);
c010b33e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b342:	74 0f                	je     c010b353 <files_closeall+0x1b>
c010b344:	ff 75 08             	pushl  0x8(%ebp)
c010b347:	e8 65 fe ff ff       	call   c010b1b1 <files_count>
c010b34c:	83 c4 04             	add    $0x4,%esp
c010b34f:	85 c0                	test   %eax,%eax
c010b351:	7f 16                	jg     c010b369 <files_closeall+0x31>
c010b353:	68 9c 6b 11 c0       	push   $0xc0116b9c
c010b358:	68 5f 6b 11 c0       	push   $0xc0116b5f
c010b35d:	6a 45                	push   $0x45
c010b35f:	68 74 6b 11 c0       	push   $0xc0116b74
c010b364:	e8 84 51 ff ff       	call   c01004ed <__panic>
    int i;
    struct file *file = filesp->fd_array;
c010b369:	8b 45 08             	mov    0x8(%ebp),%eax
c010b36c:	8b 40 04             	mov    0x4(%eax),%eax
c010b36f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    //skip the stdin & stdout
    for (i = 2, file += 2; i < FILES_STRUCT_NENTRY; i ++, file ++) {
c010b372:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
c010b379:	83 45 f0 38          	addl   $0x38,-0x10(%ebp)
c010b37d:	eb 20                	jmp    c010b39f <files_closeall+0x67>
        if (file->status == FD_OPENED) {
c010b37f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b382:	8b 00                	mov    (%eax),%eax
c010b384:	83 f8 02             	cmp    $0x2,%eax
c010b387:	75 0e                	jne    c010b397 <files_closeall+0x5f>
            fd_array_close(file);
c010b389:	83 ec 0c             	sub    $0xc,%esp
c010b38c:	ff 75 f0             	pushl  -0x10(%ebp)
c010b38f:	e8 20 f2 ff ff       	call   c010a5b4 <fd_array_close>
c010b394:	83 c4 10             	add    $0x10,%esp
//    cprintf("[files_closeall]\n");
    assert(filesp != NULL && files_count(filesp) > 0);
    int i;
    struct file *file = filesp->fd_array;
    //skip the stdin & stdout
    for (i = 2, file += 2; i < FILES_STRUCT_NENTRY; i ++, file ++) {
c010b397:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010b39b:	83 45 f0 1c          	addl   $0x1c,-0x10(%ebp)
c010b39f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b3a2:	3d 90 00 00 00       	cmp    $0x90,%eax
c010b3a7:	76 d6                	jbe    c010b37f <files_closeall+0x47>
        if (file->status == FD_OPENED) {
            fd_array_close(file);
        }
    }
}
c010b3a9:	90                   	nop
c010b3aa:	c9                   	leave  
c010b3ab:	c3                   	ret    

c010b3ac <dup_files>:

int
dup_files(struct files_struct *to, struct files_struct *from) {
c010b3ac:	55                   	push   %ebp
c010b3ad:	89 e5                	mov    %esp,%ebp
c010b3af:	83 ec 18             	sub    $0x18,%esp
//    cprintf("[dup_fs]\n");
    assert(to != NULL && from != NULL);
c010b3b2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b3b6:	74 06                	je     c010b3be <dup_files+0x12>
c010b3b8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010b3bc:	75 16                	jne    c010b3d4 <dup_files+0x28>
c010b3be:	68 c6 6b 11 c0       	push   $0xc0116bc6
c010b3c3:	68 5f 6b 11 c0       	push   $0xc0116b5f
c010b3c8:	6a 53                	push   $0x53
c010b3ca:	68 74 6b 11 c0       	push   $0xc0116b74
c010b3cf:	e8 19 51 ff ff       	call   c01004ed <__panic>
    assert(files_count(to) == 0 && files_count(from) > 0);
c010b3d4:	83 ec 0c             	sub    $0xc,%esp
c010b3d7:	ff 75 08             	pushl  0x8(%ebp)
c010b3da:	e8 d2 fd ff ff       	call   c010b1b1 <files_count>
c010b3df:	83 c4 10             	add    $0x10,%esp
c010b3e2:	85 c0                	test   %eax,%eax
c010b3e4:	75 12                	jne    c010b3f8 <dup_files+0x4c>
c010b3e6:	83 ec 0c             	sub    $0xc,%esp
c010b3e9:	ff 75 0c             	pushl  0xc(%ebp)
c010b3ec:	e8 c0 fd ff ff       	call   c010b1b1 <files_count>
c010b3f1:	83 c4 10             	add    $0x10,%esp
c010b3f4:	85 c0                	test   %eax,%eax
c010b3f6:	7f 16                	jg     c010b40e <dup_files+0x62>
c010b3f8:	68 e4 6b 11 c0       	push   $0xc0116be4
c010b3fd:	68 5f 6b 11 c0       	push   $0xc0116b5f
c010b402:	6a 54                	push   $0x54
c010b404:	68 74 6b 11 c0       	push   $0xc0116b74
c010b409:	e8 df 50 ff ff       	call   c01004ed <__panic>
    if ((to->pwd = from->pwd) != NULL) {
c010b40e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b411:	8b 10                	mov    (%eax),%edx
c010b413:	8b 45 08             	mov    0x8(%ebp),%eax
c010b416:	89 10                	mov    %edx,(%eax)
c010b418:	8b 45 08             	mov    0x8(%ebp),%eax
c010b41b:	8b 00                	mov    (%eax),%eax
c010b41d:	85 c0                	test   %eax,%eax
c010b41f:	74 11                	je     c010b432 <dup_files+0x86>
        vop_ref_inc(to->pwd);
c010b421:	8b 45 08             	mov    0x8(%ebp),%eax
c010b424:	8b 00                	mov    (%eax),%eax
c010b426:	83 ec 0c             	sub    $0xc,%esp
c010b429:	50                   	push   %eax
c010b42a:	e8 2c 3f 00 00       	call   c010f35b <inode_ref_inc>
c010b42f:	83 c4 10             	add    $0x10,%esp
    }
    int i;
    struct file *to_file = to->fd_array, *from_file = from->fd_array;
c010b432:	8b 45 08             	mov    0x8(%ebp),%eax
c010b435:	8b 40 04             	mov    0x4(%eax),%eax
c010b438:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b43b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b43e:	8b 40 04             	mov    0x4(%eax),%eax
c010b441:	89 45 ec             	mov    %eax,-0x14(%ebp)
    for (i = 0; i < FILES_STRUCT_NENTRY; i ++, to_file ++, from_file ++) {
c010b444:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010b44b:	eb 30                	jmp    c010b47d <dup_files+0xd1>
        if (from_file->status == FD_OPENED) {
c010b44d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b450:	8b 00                	mov    (%eax),%eax
c010b452:	83 f8 02             	cmp    $0x2,%eax
c010b455:	75 1a                	jne    c010b471 <dup_files+0xc5>
            /* alloc_fd first */
            to_file->status = FD_INIT;
c010b457:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b45a:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
            fd_array_dup(to_file, from_file);
c010b460:	83 ec 08             	sub    $0x8,%esp
c010b463:	ff 75 ec             	pushl  -0x14(%ebp)
c010b466:	ff 75 f0             	pushl  -0x10(%ebp)
c010b469:	e8 c0 f1 ff ff       	call   c010a62e <fd_array_dup>
c010b46e:	83 c4 10             	add    $0x10,%esp
    if ((to->pwd = from->pwd) != NULL) {
        vop_ref_inc(to->pwd);
    }
    int i;
    struct file *to_file = to->fd_array, *from_file = from->fd_array;
    for (i = 0; i < FILES_STRUCT_NENTRY; i ++, to_file ++, from_file ++) {
c010b471:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010b475:	83 45 f0 1c          	addl   $0x1c,-0x10(%ebp)
c010b479:	83 45 ec 1c          	addl   $0x1c,-0x14(%ebp)
c010b47d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b480:	3d 90 00 00 00       	cmp    $0x90,%eax
c010b485:	76 c6                	jbe    c010b44d <dup_files+0xa1>
            /* alloc_fd first */
            to_file->status = FD_INIT;
            fd_array_dup(to_file, from_file);
        }
    }
    return 0;
c010b487:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010b48c:	c9                   	leave  
c010b48d:	c3                   	ret    

c010b48e <kernel_thread_entry>:
.text
.globl kernel_thread_entry
kernel_thread_entry:        # void kernel_thread(void)

    pushl %edx              # push arg
c010b48e:	52                   	push   %edx
    call *%ebx              # call fn
c010b48f:	ff d3                	call   *%ebx

    pushl %eax              # save the return value of fn(arg)
c010b491:	50                   	push   %eax
    call do_exit            # call do_exit to terminate current thread
c010b492:	e8 e7 0d 00 00       	call   c010c27e <do_exit>

c010b497 <switch_to>:
.text
.globl switch_to
switch_to:                      # switch_to(from, to)

    # save from's registers
    movl 4(%esp), %eax          # eax points to from
c010b497:	8b 44 24 04          	mov    0x4(%esp),%eax
    popl 0(%eax)                # save eip !popl
c010b49b:	8f 00                	popl   (%eax)
    movl %esp, 4(%eax)
c010b49d:	89 60 04             	mov    %esp,0x4(%eax)
    movl %ebx, 8(%eax)
c010b4a0:	89 58 08             	mov    %ebx,0x8(%eax)
    movl %ecx, 12(%eax)
c010b4a3:	89 48 0c             	mov    %ecx,0xc(%eax)
    movl %edx, 16(%eax)
c010b4a6:	89 50 10             	mov    %edx,0x10(%eax)
    movl %esi, 20(%eax)
c010b4a9:	89 70 14             	mov    %esi,0x14(%eax)
    movl %edi, 24(%eax)
c010b4ac:	89 78 18             	mov    %edi,0x18(%eax)
    movl %ebp, 28(%eax)
c010b4af:	89 68 1c             	mov    %ebp,0x1c(%eax)

    # restore to's registers
    movl 4(%esp), %eax          # not 8(%esp): popped return address already
c010b4b2:	8b 44 24 04          	mov    0x4(%esp),%eax
                                # eax now points to to
    movl 28(%eax), %ebp
c010b4b6:	8b 68 1c             	mov    0x1c(%eax),%ebp
    movl 24(%eax), %edi
c010b4b9:	8b 78 18             	mov    0x18(%eax),%edi
    movl 20(%eax), %esi
c010b4bc:	8b 70 14             	mov    0x14(%eax),%esi
    movl 16(%eax), %edx
c010b4bf:	8b 50 10             	mov    0x10(%eax),%edx
    movl 12(%eax), %ecx
c010b4c2:	8b 48 0c             	mov    0xc(%eax),%ecx
    movl 8(%eax), %ebx
c010b4c5:	8b 58 08             	mov    0x8(%eax),%ebx
    movl 4(%eax), %esp
c010b4c8:	8b 60 04             	mov    0x4(%eax),%esp

    pushl 0(%eax)               # push eip
c010b4cb:	ff 30                	pushl  (%eax)

    ret
c010b4cd:	c3                   	ret    

c010b4ce <timer_init>:
#define le2timer(le, member)            \
to_struct((le), timer_t, member)

// init a timer
static inline timer_t *
timer_init(timer_t *timer, struct proc_struct *proc, int expires) {
c010b4ce:	55                   	push   %ebp
c010b4cf:	89 e5                	mov    %esp,%ebp
c010b4d1:	83 ec 10             	sub    $0x10,%esp
    timer->expires = expires;
c010b4d4:	8b 55 10             	mov    0x10(%ebp),%edx
c010b4d7:	8b 45 08             	mov    0x8(%ebp),%eax
c010b4da:	89 10                	mov    %edx,(%eax)
    timer->proc = proc;
c010b4dc:	8b 45 08             	mov    0x8(%ebp),%eax
c010b4df:	8b 55 0c             	mov    0xc(%ebp),%edx
c010b4e2:	89 50 04             	mov    %edx,0x4(%eax)
    list_init(&(timer->timer_link));
c010b4e5:	8b 45 08             	mov    0x8(%ebp),%eax
c010b4e8:	83 c0 08             	add    $0x8,%eax
c010b4eb:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010b4ee:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010b4f1:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010b4f4:	89 50 04             	mov    %edx,0x4(%eax)
c010b4f7:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010b4fa:	8b 50 04             	mov    0x4(%eax),%edx
c010b4fd:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010b500:	89 10                	mov    %edx,(%eax)
    return timer;
c010b502:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010b505:	c9                   	leave  
c010b506:	c3                   	ret    

c010b507 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c010b507:	55                   	push   %ebp
c010b508:	89 e5                	mov    %esp,%ebp
c010b50a:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010b50d:	9c                   	pushf  
c010b50e:	58                   	pop    %eax
c010b50f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010b512:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010b515:	25 00 02 00 00       	and    $0x200,%eax
c010b51a:	85 c0                	test   %eax,%eax
c010b51c:	74 0c                	je     c010b52a <__intr_save+0x23>
        intr_disable();
c010b51e:	e8 93 6d ff ff       	call   c01022b6 <intr_disable>
        return 1;
c010b523:	b8 01 00 00 00       	mov    $0x1,%eax
c010b528:	eb 05                	jmp    c010b52f <__intr_save+0x28>
    }
    return 0;
c010b52a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010b52f:	c9                   	leave  
c010b530:	c3                   	ret    

c010b531 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010b531:	55                   	push   %ebp
c010b532:	89 e5                	mov    %esp,%ebp
c010b534:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010b537:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b53b:	74 05                	je     c010b542 <__intr_restore+0x11>
        intr_enable();
c010b53d:	e8 6d 6d ff ff       	call   c01022af <intr_enable>
    }
}
c010b542:	90                   	nop
c010b543:	c9                   	leave  
c010b544:	c3                   	ret    

c010b545 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c010b545:	55                   	push   %ebp
c010b546:	89 e5                	mov    %esp,%ebp
    return page - pages;
c010b548:	8b 45 08             	mov    0x8(%ebp),%eax
c010b54b:	8b 15 58 52 15 c0    	mov    0xc0155258,%edx
c010b551:	29 d0                	sub    %edx,%eax
c010b553:	c1 f8 05             	sar    $0x5,%eax
}
c010b556:	5d                   	pop    %ebp
c010b557:	c3                   	ret    

c010b558 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c010b558:	55                   	push   %ebp
c010b559:	89 e5                	mov    %esp,%ebp
    return page2ppn(page) << PGSHIFT;
c010b55b:	ff 75 08             	pushl  0x8(%ebp)
c010b55e:	e8 e2 ff ff ff       	call   c010b545 <page2ppn>
c010b563:	83 c4 04             	add    $0x4,%esp
c010b566:	c1 e0 0c             	shl    $0xc,%eax
}
c010b569:	c9                   	leave  
c010b56a:	c3                   	ret    

c010b56b <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c010b56b:	55                   	push   %ebp
c010b56c:	89 e5                	mov    %esp,%ebp
c010b56e:	83 ec 08             	sub    $0x8,%esp
    if (PPN(pa) >= npage) {
c010b571:	8b 45 08             	mov    0x8(%ebp),%eax
c010b574:	c1 e8 0c             	shr    $0xc,%eax
c010b577:	89 c2                	mov    %eax,%edx
c010b579:	a1 80 1f 15 c0       	mov    0xc0151f80,%eax
c010b57e:	39 c2                	cmp    %eax,%edx
c010b580:	72 14                	jb     c010b596 <pa2page+0x2b>
        panic("pa2page called with invalid pa");
c010b582:	83 ec 04             	sub    $0x4,%esp
c010b585:	68 14 6c 11 c0       	push   $0xc0116c14
c010b58a:	6a 5e                	push   $0x5e
c010b58c:	68 33 6c 11 c0       	push   $0xc0116c33
c010b591:	e8 57 4f ff ff       	call   c01004ed <__panic>
    }
    return &pages[PPN(pa)];
c010b596:	a1 58 52 15 c0       	mov    0xc0155258,%eax
c010b59b:	8b 55 08             	mov    0x8(%ebp),%edx
c010b59e:	c1 ea 0c             	shr    $0xc,%edx
c010b5a1:	c1 e2 05             	shl    $0x5,%edx
c010b5a4:	01 d0                	add    %edx,%eax
}
c010b5a6:	c9                   	leave  
c010b5a7:	c3                   	ret    

c010b5a8 <page2kva>:

static inline void *
page2kva(struct Page *page) {
c010b5a8:	55                   	push   %ebp
c010b5a9:	89 e5                	mov    %esp,%ebp
c010b5ab:	83 ec 18             	sub    $0x18,%esp
    return KADDR(page2pa(page));
c010b5ae:	ff 75 08             	pushl  0x8(%ebp)
c010b5b1:	e8 a2 ff ff ff       	call   c010b558 <page2pa>
c010b5b6:	83 c4 04             	add    $0x4,%esp
c010b5b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b5bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b5bf:	c1 e8 0c             	shr    $0xc,%eax
c010b5c2:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b5c5:	a1 80 1f 15 c0       	mov    0xc0151f80,%eax
c010b5ca:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010b5cd:	72 14                	jb     c010b5e3 <page2kva+0x3b>
c010b5cf:	ff 75 f4             	pushl  -0xc(%ebp)
c010b5d2:	68 44 6c 11 c0       	push   $0xc0116c44
c010b5d7:	6a 65                	push   $0x65
c010b5d9:	68 33 6c 11 c0       	push   $0xc0116c33
c010b5de:	e8 0a 4f ff ff       	call   c01004ed <__panic>
c010b5e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b5e6:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c010b5eb:	c9                   	leave  
c010b5ec:	c3                   	ret    

c010b5ed <kva2page>:

static inline struct Page *
kva2page(void *kva) {
c010b5ed:	55                   	push   %ebp
c010b5ee:	89 e5                	mov    %esp,%ebp
c010b5f0:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PADDR(kva));
c010b5f3:	8b 45 08             	mov    0x8(%ebp),%eax
c010b5f6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b5f9:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c010b600:	77 14                	ja     c010b616 <kva2page+0x29>
c010b602:	ff 75 f4             	pushl  -0xc(%ebp)
c010b605:	68 68 6c 11 c0       	push   $0xc0116c68
c010b60a:	6a 6a                	push   $0x6a
c010b60c:	68 33 6c 11 c0       	push   $0xc0116c33
c010b611:	e8 d7 4e ff ff       	call   c01004ed <__panic>
c010b616:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b619:	05 00 00 00 40       	add    $0x40000000,%eax
c010b61e:	83 ec 0c             	sub    $0xc,%esp
c010b621:	50                   	push   %eax
c010b622:	e8 44 ff ff ff       	call   c010b56b <pa2page>
c010b627:	83 c4 10             	add    $0x10,%esp
}
c010b62a:	c9                   	leave  
c010b62b:	c3                   	ret    

c010b62c <mm_count_inc>:
set_mm_count(struct mm_struct *mm, int val) {
    mm->mm_count = val;
}

static inline int
mm_count_inc(struct mm_struct *mm) {
c010b62c:	55                   	push   %ebp
c010b62d:	89 e5                	mov    %esp,%ebp
    mm->mm_count += 1;
c010b62f:	8b 45 08             	mov    0x8(%ebp),%eax
c010b632:	8b 40 18             	mov    0x18(%eax),%eax
c010b635:	8d 50 01             	lea    0x1(%eax),%edx
c010b638:	8b 45 08             	mov    0x8(%ebp),%eax
c010b63b:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c010b63e:	8b 45 08             	mov    0x8(%ebp),%eax
c010b641:	8b 40 18             	mov    0x18(%eax),%eax
}
c010b644:	5d                   	pop    %ebp
c010b645:	c3                   	ret    

c010b646 <mm_count_dec>:

static inline int
mm_count_dec(struct mm_struct *mm) {
c010b646:	55                   	push   %ebp
c010b647:	89 e5                	mov    %esp,%ebp
    mm->mm_count -= 1;
c010b649:	8b 45 08             	mov    0x8(%ebp),%eax
c010b64c:	8b 40 18             	mov    0x18(%eax),%eax
c010b64f:	8d 50 ff             	lea    -0x1(%eax),%edx
c010b652:	8b 45 08             	mov    0x8(%ebp),%eax
c010b655:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c010b658:	8b 45 08             	mov    0x8(%ebp),%eax
c010b65b:	8b 40 18             	mov    0x18(%eax),%eax
}
c010b65e:	5d                   	pop    %ebp
c010b65f:	c3                   	ret    

c010b660 <lock_mm>:

static inline void
lock_mm(struct mm_struct *mm) {
c010b660:	55                   	push   %ebp
c010b661:	89 e5                	mov    %esp,%ebp
c010b663:	83 ec 08             	sub    $0x8,%esp
    if (mm != NULL) {
c010b666:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b66a:	74 29                	je     c010b695 <lock_mm+0x35>
        down(&(mm->mm_sem));
c010b66c:	8b 45 08             	mov    0x8(%ebp),%eax
c010b66f:	83 c0 1c             	add    $0x1c,%eax
c010b672:	83 ec 0c             	sub    $0xc,%esp
c010b675:	50                   	push   %eax
c010b676:	e8 32 e1 ff ff       	call   c01097ad <down>
c010b67b:	83 c4 10             	add    $0x10,%esp
        if (current != NULL) {
c010b67e:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010b683:	85 c0                	test   %eax,%eax
c010b685:	74 0e                	je     c010b695 <lock_mm+0x35>
            mm->locked_by = current->pid;
c010b687:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010b68c:	8b 50 04             	mov    0x4(%eax),%edx
c010b68f:	8b 45 08             	mov    0x8(%ebp),%eax
c010b692:	89 50 28             	mov    %edx,0x28(%eax)
        }
    }
}
c010b695:	90                   	nop
c010b696:	c9                   	leave  
c010b697:	c3                   	ret    

c010b698 <unlock_mm>:

static inline void
unlock_mm(struct mm_struct *mm) {
c010b698:	55                   	push   %ebp
c010b699:	89 e5                	mov    %esp,%ebp
c010b69b:	83 ec 08             	sub    $0x8,%esp
    if (mm != NULL) {
c010b69e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b6a2:	74 1c                	je     c010b6c0 <unlock_mm+0x28>
        up(&(mm->mm_sem));
c010b6a4:	8b 45 08             	mov    0x8(%ebp),%eax
c010b6a7:	83 c0 1c             	add    $0x1c,%eax
c010b6aa:	83 ec 0c             	sub    $0xc,%esp
c010b6ad:	50                   	push   %eax
c010b6ae:	e8 de e0 ff ff       	call   c0109791 <up>
c010b6b3:	83 c4 10             	add    $0x10,%esp
        mm->locked_by = 0;
c010b6b6:	8b 45 08             	mov    0x8(%ebp),%eax
c010b6b9:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    }
}
c010b6c0:	90                   	nop
c010b6c1:	c9                   	leave  
c010b6c2:	c3                   	ret    

c010b6c3 <files_count_inc>:

static inline int
files_count_inc(struct files_struct *filesp) {
c010b6c3:	55                   	push   %ebp
c010b6c4:	89 e5                	mov    %esp,%ebp
    filesp->files_count += 1;
c010b6c6:	8b 45 08             	mov    0x8(%ebp),%eax
c010b6c9:	8b 40 08             	mov    0x8(%eax),%eax
c010b6cc:	8d 50 01             	lea    0x1(%eax),%edx
c010b6cf:	8b 45 08             	mov    0x8(%ebp),%eax
c010b6d2:	89 50 08             	mov    %edx,0x8(%eax)
    return filesp->files_count;
c010b6d5:	8b 45 08             	mov    0x8(%ebp),%eax
c010b6d8:	8b 40 08             	mov    0x8(%eax),%eax
}
c010b6db:	5d                   	pop    %ebp
c010b6dc:	c3                   	ret    

c010b6dd <files_count_dec>:

static inline int
files_count_dec(struct files_struct *filesp) {
c010b6dd:	55                   	push   %ebp
c010b6de:	89 e5                	mov    %esp,%ebp
    filesp->files_count -= 1;
c010b6e0:	8b 45 08             	mov    0x8(%ebp),%eax
c010b6e3:	8b 40 08             	mov    0x8(%eax),%eax
c010b6e6:	8d 50 ff             	lea    -0x1(%eax),%edx
c010b6e9:	8b 45 08             	mov    0x8(%ebp),%eax
c010b6ec:	89 50 08             	mov    %edx,0x8(%eax)
    return filesp->files_count;
c010b6ef:	8b 45 08             	mov    0x8(%ebp),%eax
c010b6f2:	8b 40 08             	mov    0x8(%eax),%eax
}
c010b6f5:	5d                   	pop    %ebp
c010b6f6:	c3                   	ret    

c010b6f7 <alloc_proc>:
void forkrets(struct trapframe *tf);
void switch_to(struct context *from, struct context *to);

// alloc_proc - alloc a proc_struct and init all fields of proc_struct
static struct proc_struct *
alloc_proc(void) {
c010b6f7:	55                   	push   %ebp
c010b6f8:	89 e5                	mov    %esp,%ebp
c010b6fa:	83 ec 18             	sub    $0x18,%esp
    struct proc_struct *proc = kmalloc(sizeof(struct proc_struct));
c010b6fd:	83 ec 0c             	sub    $0xc,%esp
c010b700:	68 c8 00 00 00       	push   $0xc8
c010b705:	e8 f8 9b ff ff       	call   c0105302 <kmalloc>
c010b70a:	83 c4 10             	add    $0x10,%esp
c010b70d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (proc != NULL) {
c010b710:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b714:	0f 84 50 01 00 00    	je     c010b86a <alloc_proc+0x173>
     *     skew_heap_entry_t lab6_run_pool;            // FOR LAB6 ONLY: the entry in the run pool
     *     uint32_t lab6_stride;                       // FOR LAB6 ONLY: the current stride of the process
     *     uint32_t lab6_priority;                     // FOR LAB6 ONLY: the priority of process, set by lab6_set_priority(uint32_t)
     */
    //LAB8:EXERCISE2 2015010062 HINT:need add some code to init fs in proc_struct, ...
        proc->state = PROC_UNINIT;
c010b71a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b71d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        proc->pid = -1;         // an invalid pid
c010b723:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b726:	c7 40 04 ff ff ff ff 	movl   $0xffffffff,0x4(%eax)
        proc->runs = 0;
c010b72d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b730:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        proc->kstack = 0;
c010b737:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b73a:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        proc->need_resched = 0;
c010b741:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b744:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
        proc->parent = NULL;
c010b74b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b74e:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
        proc->mm = NULL;
c010b755:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b758:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
        proc->tf = NULL;
c010b75f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b762:	c7 40 3c 00 00 00 00 	movl   $0x0,0x3c(%eax)
        proc->cr3 = boot_cr3;   // kernel threads share boot_cr3
c010b769:	8b 15 54 52 15 c0    	mov    0xc0155254,%edx
c010b76f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b772:	89 50 40             	mov    %edx,0x40(%eax)
        proc->flags = 0;
c010b775:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b778:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
        // NEW
        proc->wait_state = 0;
c010b77f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b782:	c7 80 90 00 00 00 00 	movl   $0x0,0x90(%eax)
c010b789:	00 00 00 
        proc->cptr = NULL;
c010b78c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b78f:	c7 80 94 00 00 00 00 	movl   $0x0,0x94(%eax)
c010b796:	00 00 00 
        proc->yptr = NULL;
c010b799:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b79c:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
c010b7a3:	00 00 00 
        proc->optr = NULL;
c010b7a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b7a9:	c7 80 9c 00 00 00 00 	movl   $0x0,0x9c(%eax)
c010b7b0:	00 00 00 
        // NEW IN LAB 6
        proc->rq = NULL;
c010b7b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b7b6:	c7 80 a0 00 00 00 00 	movl   $0x0,0xa0(%eax)
c010b7bd:	00 00 00 
        list_init(&(proc->run_link));
c010b7c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b7c3:	05 a4 00 00 00       	add    $0xa4,%eax
c010b7c8:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b7cb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b7ce:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010b7d1:	89 50 04             	mov    %edx,0x4(%eax)
c010b7d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b7d7:	8b 50 04             	mov    0x4(%eax),%edx
c010b7da:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b7dd:	89 10                	mov    %edx,(%eax)
        proc->time_slice = 0;
c010b7df:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b7e2:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
c010b7e9:	00 00 00 
        // for stride
        skew_heap_init(&(proc->lab6_run_pool));
c010b7ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b7ef:	05 b0 00 00 00       	add    $0xb0,%eax
c010b7f4:	89 45 ec             	mov    %eax,-0x14(%ebp)
     compare_f comp) __attribute__((always_inline));

static inline void
skew_heap_init(skew_heap_entry_t *a)
{
     a->left = a->right = a->parent = NULL;
c010b7f7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b7fa:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c010b800:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b803:	8b 10                	mov    (%eax),%edx
c010b805:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b808:	89 50 08             	mov    %edx,0x8(%eax)
c010b80b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b80e:	8b 50 08             	mov    0x8(%eax),%edx
c010b811:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b814:	89 50 04             	mov    %edx,0x4(%eax)
        proc->lab6_stride = 0;
c010b817:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b81a:	c7 80 bc 00 00 00 00 	movl   $0x0,0xbc(%eax)
c010b821:	00 00 00 
        proc->lab6_priority = 1;
c010b824:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b827:	c7 80 c0 00 00 00 01 	movl   $0x1,0xc0(%eax)
c010b82e:	00 00 00 
        // NEW IN LAB8
        proc->filesp = NULL;
c010b831:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b834:	c7 80 c4 00 00 00 00 	movl   $0x0,0xc4(%eax)
c010b83b:	00 00 00 

        memset(&(proc->context), 0, sizeof(struct context));
c010b83e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b841:	83 c0 1c             	add    $0x1c,%eax
c010b844:	83 ec 04             	sub    $0x4,%esp
c010b847:	6a 20                	push   $0x20
c010b849:	6a 00                	push   $0x0
c010b84b:	50                   	push   %eax
c010b84c:	e8 11 82 00 00       	call   c0113a62 <memset>
c010b851:	83 c4 10             	add    $0x10,%esp
        memset(proc->name, 0, sizeof(char) * (PROC_NAME_LEN + 1));
c010b854:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b857:	83 c0 48             	add    $0x48,%eax
c010b85a:	83 ec 04             	sub    $0x4,%esp
c010b85d:	6a 33                	push   $0x33
c010b85f:	6a 00                	push   $0x0
c010b861:	50                   	push   %eax
c010b862:	e8 fb 81 00 00       	call   c0113a62 <memset>
c010b867:	83 c4 10             	add    $0x10,%esp
    }
    return proc;
c010b86a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010b86d:	c9                   	leave  
c010b86e:	c3                   	ret    

c010b86f <set_proc_name>:

// set_proc_name - set the name of proc
char *
set_proc_name(struct proc_struct *proc, const char *name) {
c010b86f:	55                   	push   %ebp
c010b870:	89 e5                	mov    %esp,%ebp
c010b872:	83 ec 08             	sub    $0x8,%esp
    memset(proc->name, 0, sizeof(proc->name));
c010b875:	8b 45 08             	mov    0x8(%ebp),%eax
c010b878:	83 c0 48             	add    $0x48,%eax
c010b87b:	83 ec 04             	sub    $0x4,%esp
c010b87e:	6a 33                	push   $0x33
c010b880:	6a 00                	push   $0x0
c010b882:	50                   	push   %eax
c010b883:	e8 da 81 00 00       	call   c0113a62 <memset>
c010b888:	83 c4 10             	add    $0x10,%esp
    return memcpy(proc->name, name, PROC_NAME_LEN);
c010b88b:	8b 45 08             	mov    0x8(%ebp),%eax
c010b88e:	83 c0 48             	add    $0x48,%eax
c010b891:	83 ec 04             	sub    $0x4,%esp
c010b894:	6a 32                	push   $0x32
c010b896:	ff 75 0c             	pushl  0xc(%ebp)
c010b899:	50                   	push   %eax
c010b89a:	e8 a6 82 00 00       	call   c0113b45 <memcpy>
c010b89f:	83 c4 10             	add    $0x10,%esp
}
c010b8a2:	c9                   	leave  
c010b8a3:	c3                   	ret    

c010b8a4 <get_proc_name>:

// get_proc_name - get the name of proc
char *
get_proc_name(struct proc_struct *proc) {
c010b8a4:	55                   	push   %ebp
c010b8a5:	89 e5                	mov    %esp,%ebp
c010b8a7:	83 ec 08             	sub    $0x8,%esp
    static char name[PROC_NAME_LEN + 1];
    memset(name, 0, sizeof(name));
c010b8aa:	83 ec 04             	sub    $0x4,%esp
c010b8ad:	6a 33                	push   $0x33
c010b8af:	6a 00                	push   $0x0
c010b8b1:	68 60 40 15 c0       	push   $0xc0154060
c010b8b6:	e8 a7 81 00 00       	call   c0113a62 <memset>
c010b8bb:	83 c4 10             	add    $0x10,%esp
    return memcpy(name, proc->name, PROC_NAME_LEN);
c010b8be:	8b 45 08             	mov    0x8(%ebp),%eax
c010b8c1:	83 c0 48             	add    $0x48,%eax
c010b8c4:	83 ec 04             	sub    $0x4,%esp
c010b8c7:	6a 32                	push   $0x32
c010b8c9:	50                   	push   %eax
c010b8ca:	68 60 40 15 c0       	push   $0xc0154060
c010b8cf:	e8 71 82 00 00       	call   c0113b45 <memcpy>
c010b8d4:	83 c4 10             	add    $0x10,%esp
}
c010b8d7:	c9                   	leave  
c010b8d8:	c3                   	ret    

c010b8d9 <set_links>:

// set_links - set the relation links of process
static void
set_links(struct proc_struct *proc) {
c010b8d9:	55                   	push   %ebp
c010b8da:	89 e5                	mov    %esp,%ebp
c010b8dc:	83 ec 20             	sub    $0x20,%esp
    list_add(&proc_list, &(proc->list_link));
c010b8df:	8b 45 08             	mov    0x8(%ebp),%eax
c010b8e2:	83 c0 7c             	add    $0x7c,%eax
c010b8e5:	c7 45 fc 3c 53 15 c0 	movl   $0xc015533c,-0x4(%ebp)
c010b8ec:	89 45 f8             	mov    %eax,-0x8(%ebp)
c010b8ef:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010b8f2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b8f5:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010b8f8:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010b8fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b8fe:	8b 40 04             	mov    0x4(%eax),%eax
c010b901:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010b904:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010b907:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b90a:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010b90d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010b910:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b913:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010b916:	89 10                	mov    %edx,(%eax)
c010b918:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b91b:	8b 10                	mov    (%eax),%edx
c010b91d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b920:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010b923:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b926:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010b929:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010b92c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b92f:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010b932:	89 10                	mov    %edx,(%eax)
    proc->yptr = NULL;
c010b934:	8b 45 08             	mov    0x8(%ebp),%eax
c010b937:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
c010b93e:	00 00 00 
    if ((proc->optr = proc->parent->cptr) != NULL) {
c010b941:	8b 45 08             	mov    0x8(%ebp),%eax
c010b944:	8b 40 14             	mov    0x14(%eax),%eax
c010b947:	8b 90 94 00 00 00    	mov    0x94(%eax),%edx
c010b94d:	8b 45 08             	mov    0x8(%ebp),%eax
c010b950:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010b956:	8b 45 08             	mov    0x8(%ebp),%eax
c010b959:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010b95f:	85 c0                	test   %eax,%eax
c010b961:	74 12                	je     c010b975 <set_links+0x9c>
        proc->optr->yptr = proc;
c010b963:	8b 45 08             	mov    0x8(%ebp),%eax
c010b966:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010b96c:	8b 55 08             	mov    0x8(%ebp),%edx
c010b96f:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    }
    proc->parent->cptr = proc;
c010b975:	8b 45 08             	mov    0x8(%ebp),%eax
c010b978:	8b 40 14             	mov    0x14(%eax),%eax
c010b97b:	8b 55 08             	mov    0x8(%ebp),%edx
c010b97e:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    nr_process ++;
c010b984:	a1 40 40 15 c0       	mov    0xc0154040,%eax
c010b989:	83 c0 01             	add    $0x1,%eax
c010b98c:	a3 40 40 15 c0       	mov    %eax,0xc0154040
}
c010b991:	90                   	nop
c010b992:	c9                   	leave  
c010b993:	c3                   	ret    

c010b994 <remove_links>:

// remove_links - clean the relation links of process
static void
remove_links(struct proc_struct *proc) {
c010b994:	55                   	push   %ebp
c010b995:	89 e5                	mov    %esp,%ebp
c010b997:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->list_link));
c010b99a:	8b 45 08             	mov    0x8(%ebp),%eax
c010b99d:	83 c0 7c             	add    $0x7c,%eax
c010b9a0:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010b9a3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010b9a6:	8b 40 04             	mov    0x4(%eax),%eax
c010b9a9:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010b9ac:	8b 12                	mov    (%edx),%edx
c010b9ae:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010b9b1:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010b9b4:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010b9b7:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b9ba:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010b9bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b9c0:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010b9c3:	89 10                	mov    %edx,(%eax)
    if (proc->optr != NULL) {
c010b9c5:	8b 45 08             	mov    0x8(%ebp),%eax
c010b9c8:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010b9ce:	85 c0                	test   %eax,%eax
c010b9d0:	74 18                	je     c010b9ea <remove_links+0x56>
        proc->optr->yptr = proc->yptr;
c010b9d2:	8b 45 08             	mov    0x8(%ebp),%eax
c010b9d5:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010b9db:	8b 55 08             	mov    0x8(%ebp),%edx
c010b9de:	8b 92 98 00 00 00    	mov    0x98(%edx),%edx
c010b9e4:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    }
    if (proc->yptr != NULL) {
c010b9ea:	8b 45 08             	mov    0x8(%ebp),%eax
c010b9ed:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010b9f3:	85 c0                	test   %eax,%eax
c010b9f5:	74 1a                	je     c010ba11 <remove_links+0x7d>
        proc->yptr->optr = proc->optr;
c010b9f7:	8b 45 08             	mov    0x8(%ebp),%eax
c010b9fa:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010ba00:	8b 55 08             	mov    0x8(%ebp),%edx
c010ba03:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c010ba09:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010ba0f:	eb 15                	jmp    c010ba26 <remove_links+0x92>
    }
    else {
       proc->parent->cptr = proc->optr;
c010ba11:	8b 45 08             	mov    0x8(%ebp),%eax
c010ba14:	8b 40 14             	mov    0x14(%eax),%eax
c010ba17:	8b 55 08             	mov    0x8(%ebp),%edx
c010ba1a:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c010ba20:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    }
    nr_process --;
c010ba26:	a1 40 40 15 c0       	mov    0xc0154040,%eax
c010ba2b:	83 e8 01             	sub    $0x1,%eax
c010ba2e:	a3 40 40 15 c0       	mov    %eax,0xc0154040
}
c010ba33:	90                   	nop
c010ba34:	c9                   	leave  
c010ba35:	c3                   	ret    

c010ba36 <get_pid>:

// get_pid - alloc a unique pid for process
static int
get_pid(void) {
c010ba36:	55                   	push   %ebp
c010ba37:	89 e5                	mov    %esp,%ebp
c010ba39:	83 ec 10             	sub    $0x10,%esp
    static_assert(MAX_PID > MAX_PROCESS);
    struct proc_struct *proc;
    list_entry_t *list = &proc_list, *le;
c010ba3c:	c7 45 f8 3c 53 15 c0 	movl   $0xc015533c,-0x8(%ebp)
    static int next_safe = MAX_PID, last_pid = MAX_PID;
    if (++ last_pid >= MAX_PID) {
c010ba43:	a1 7c ea 14 c0       	mov    0xc014ea7c,%eax
c010ba48:	83 c0 01             	add    $0x1,%eax
c010ba4b:	a3 7c ea 14 c0       	mov    %eax,0xc014ea7c
c010ba50:	a1 7c ea 14 c0       	mov    0xc014ea7c,%eax
c010ba55:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c010ba5a:	7e 0c                	jle    c010ba68 <get_pid+0x32>
        last_pid = 1;
c010ba5c:	c7 05 7c ea 14 c0 01 	movl   $0x1,0xc014ea7c
c010ba63:	00 00 00 
        goto inside;
c010ba66:	eb 13                	jmp    c010ba7b <get_pid+0x45>
    }
    if (last_pid >= next_safe) {
c010ba68:	8b 15 7c ea 14 c0    	mov    0xc014ea7c,%edx
c010ba6e:	a1 80 ea 14 c0       	mov    0xc014ea80,%eax
c010ba73:	39 c2                	cmp    %eax,%edx
c010ba75:	0f 8c ac 00 00 00    	jl     c010bb27 <get_pid+0xf1>
    inside:
        next_safe = MAX_PID;
c010ba7b:	c7 05 80 ea 14 c0 00 	movl   $0x2000,0xc014ea80
c010ba82:	20 00 00 
    repeat:
        le = list;
c010ba85:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010ba88:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while ((le = list_next(le)) != list) {
c010ba8b:	eb 7f                	jmp    c010bb0c <get_pid+0xd6>
            proc = le2proc(le, list_link);
c010ba8d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010ba90:	83 e8 7c             	sub    $0x7c,%eax
c010ba93:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (proc->pid == last_pid) {
c010ba96:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ba99:	8b 50 04             	mov    0x4(%eax),%edx
c010ba9c:	a1 7c ea 14 c0       	mov    0xc014ea7c,%eax
c010baa1:	39 c2                	cmp    %eax,%edx
c010baa3:	75 3e                	jne    c010bae3 <get_pid+0xad>
                if (++ last_pid >= next_safe) {
c010baa5:	a1 7c ea 14 c0       	mov    0xc014ea7c,%eax
c010baaa:	83 c0 01             	add    $0x1,%eax
c010baad:	a3 7c ea 14 c0       	mov    %eax,0xc014ea7c
c010bab2:	8b 15 7c ea 14 c0    	mov    0xc014ea7c,%edx
c010bab8:	a1 80 ea 14 c0       	mov    0xc014ea80,%eax
c010babd:	39 c2                	cmp    %eax,%edx
c010babf:	7c 4b                	jl     c010bb0c <get_pid+0xd6>
                    if (last_pid >= MAX_PID) {
c010bac1:	a1 7c ea 14 c0       	mov    0xc014ea7c,%eax
c010bac6:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c010bacb:	7e 0a                	jle    c010bad7 <get_pid+0xa1>
                        last_pid = 1;
c010bacd:	c7 05 7c ea 14 c0 01 	movl   $0x1,0xc014ea7c
c010bad4:	00 00 00 
                    }
                    next_safe = MAX_PID;
c010bad7:	c7 05 80 ea 14 c0 00 	movl   $0x2000,0xc014ea80
c010bade:	20 00 00 
                    goto repeat;
c010bae1:	eb a2                	jmp    c010ba85 <get_pid+0x4f>
                }
            }
            else if (proc->pid > last_pid && next_safe > proc->pid) {
c010bae3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bae6:	8b 50 04             	mov    0x4(%eax),%edx
c010bae9:	a1 7c ea 14 c0       	mov    0xc014ea7c,%eax
c010baee:	39 c2                	cmp    %eax,%edx
c010baf0:	7e 1a                	jle    c010bb0c <get_pid+0xd6>
c010baf2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010baf5:	8b 50 04             	mov    0x4(%eax),%edx
c010baf8:	a1 80 ea 14 c0       	mov    0xc014ea80,%eax
c010bafd:	39 c2                	cmp    %eax,%edx
c010baff:	7d 0b                	jge    c010bb0c <get_pid+0xd6>
                next_safe = proc->pid;
c010bb01:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bb04:	8b 40 04             	mov    0x4(%eax),%eax
c010bb07:	a3 80 ea 14 c0       	mov    %eax,0xc014ea80
c010bb0c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010bb0f:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010bb12:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bb15:	8b 40 04             	mov    0x4(%eax),%eax
    if (last_pid >= next_safe) {
    inside:
        next_safe = MAX_PID;
    repeat:
        le = list;
        while ((le = list_next(le)) != list) {
c010bb18:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010bb1b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010bb1e:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c010bb21:	0f 85 66 ff ff ff    	jne    c010ba8d <get_pid+0x57>
            else if (proc->pid > last_pid && next_safe > proc->pid) {
                next_safe = proc->pid;
            }
        }
    }
    return last_pid;
c010bb27:	a1 7c ea 14 c0       	mov    0xc014ea7c,%eax
}
c010bb2c:	c9                   	leave  
c010bb2d:	c3                   	ret    

c010bb2e <proc_run>:

// proc_run - make process "proc" running on cpu
// NOTE: before call switch_to, should load  base addr of "proc"'s new PDT
void
proc_run(struct proc_struct *proc) {
c010bb2e:	55                   	push   %ebp
c010bb2f:	89 e5                	mov    %esp,%ebp
c010bb31:	83 ec 18             	sub    $0x18,%esp
    if (proc != current) {
c010bb34:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010bb39:	39 45 08             	cmp    %eax,0x8(%ebp)
c010bb3c:	74 6b                	je     c010bba9 <proc_run+0x7b>
        bool intr_flag;
        struct proc_struct *prev = current, *next = proc;
c010bb3e:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010bb43:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bb46:	8b 45 08             	mov    0x8(%ebp),%eax
c010bb49:	89 45 f0             	mov    %eax,-0x10(%ebp)
        local_intr_save(intr_flag);
c010bb4c:	e8 b6 f9 ff ff       	call   c010b507 <__intr_save>
c010bb51:	89 45 ec             	mov    %eax,-0x14(%ebp)
        {
            current = proc;
c010bb54:	8b 45 08             	mov    0x8(%ebp),%eax
c010bb57:	a3 28 20 15 c0       	mov    %eax,0xc0152028
            load_esp0(next->kstack + KSTACKSIZE);
c010bb5c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bb5f:	8b 40 0c             	mov    0xc(%eax),%eax
c010bb62:	05 00 20 00 00       	add    $0x2000,%eax
c010bb67:	83 ec 0c             	sub    $0xc,%esp
c010bb6a:	50                   	push   %eax
c010bb6b:	e8 68 b5 ff ff       	call   c01070d8 <load_esp0>
c010bb70:	83 c4 10             	add    $0x10,%esp
            lcr3(next->cr3);
c010bb73:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bb76:	8b 40 40             	mov    0x40(%eax),%eax
c010bb79:	89 45 e8             	mov    %eax,-0x18(%ebp)
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
}

static inline void
lcr3(uintptr_t cr3) {
    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
c010bb7c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010bb7f:	0f 22 d8             	mov    %eax,%cr3
            switch_to(&(prev->context), &(next->context));
c010bb82:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bb85:	8d 50 1c             	lea    0x1c(%eax),%edx
c010bb88:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bb8b:	83 c0 1c             	add    $0x1c,%eax
c010bb8e:	83 ec 08             	sub    $0x8,%esp
c010bb91:	52                   	push   %edx
c010bb92:	50                   	push   %eax
c010bb93:	e8 ff f8 ff ff       	call   c010b497 <switch_to>
c010bb98:	83 c4 10             	add    $0x10,%esp
        }
        local_intr_restore(intr_flag);
c010bb9b:	83 ec 0c             	sub    $0xc,%esp
c010bb9e:	ff 75 ec             	pushl  -0x14(%ebp)
c010bba1:	e8 8b f9 ff ff       	call   c010b531 <__intr_restore>
c010bba6:	83 c4 10             	add    $0x10,%esp
    }
}
c010bba9:	90                   	nop
c010bbaa:	c9                   	leave  
c010bbab:	c3                   	ret    

c010bbac <forkret>:

// forkret -- the first kernel entry point of a new thread/process
// NOTE: the addr of forkret is setted in copy_thread function
//       after switch_to, the current proc will execute here.
static void
forkret(void) {
c010bbac:	55                   	push   %ebp
c010bbad:	89 e5                	mov    %esp,%ebp
c010bbaf:	83 ec 08             	sub    $0x8,%esp
    forkrets(current->tf);
c010bbb2:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010bbb7:	8b 40 3c             	mov    0x3c(%eax),%eax
c010bbba:	83 ec 0c             	sub    $0xc,%esp
c010bbbd:	50                   	push   %eax
c010bbbe:	e8 ce 7a ff ff       	call   c0103691 <forkrets>
c010bbc3:	83 c4 10             	add    $0x10,%esp
}
c010bbc6:	90                   	nop
c010bbc7:	c9                   	leave  
c010bbc8:	c3                   	ret    

c010bbc9 <hash_proc>:

// hash_proc - add proc into proc hash_list
static void
hash_proc(struct proc_struct *proc) {
c010bbc9:	55                   	push   %ebp
c010bbca:	89 e5                	mov    %esp,%ebp
c010bbcc:	53                   	push   %ebx
c010bbcd:	83 ec 24             	sub    $0x24,%esp
    list_add(hash_list + pid_hashfn(proc->pid), &(proc->hash_link));
c010bbd0:	8b 45 08             	mov    0x8(%ebp),%eax
c010bbd3:	8d 98 84 00 00 00    	lea    0x84(%eax),%ebx
c010bbd9:	8b 45 08             	mov    0x8(%ebp),%eax
c010bbdc:	8b 40 04             	mov    0x4(%eax),%eax
c010bbdf:	83 ec 08             	sub    $0x8,%esp
c010bbe2:	6a 0a                	push   $0xa
c010bbe4:	50                   	push   %eax
c010bbe5:	e8 53 86 00 00       	call   c011423d <hash32>
c010bbea:	83 c4 10             	add    $0x10,%esp
c010bbed:	c1 e0 03             	shl    $0x3,%eax
c010bbf0:	05 40 20 15 c0       	add    $0xc0152040,%eax
c010bbf5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bbf8:	89 5d f0             	mov    %ebx,-0x10(%ebp)
c010bbfb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bbfe:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010bc01:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bc04:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010bc07:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bc0a:	8b 40 04             	mov    0x4(%eax),%eax
c010bc0d:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010bc10:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c010bc13:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010bc16:	89 55 e0             	mov    %edx,-0x20(%ebp)
c010bc19:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010bc1c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010bc1f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010bc22:	89 10                	mov    %edx,(%eax)
c010bc24:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010bc27:	8b 10                	mov    (%eax),%edx
c010bc29:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010bc2c:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010bc2f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010bc32:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010bc35:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010bc38:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010bc3b:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010bc3e:	89 10                	mov    %edx,(%eax)
}
c010bc40:	90                   	nop
c010bc41:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c010bc44:	c9                   	leave  
c010bc45:	c3                   	ret    

c010bc46 <unhash_proc>:

// unhash_proc - delete proc from proc hash_list
static void
unhash_proc(struct proc_struct *proc) {
c010bc46:	55                   	push   %ebp
c010bc47:	89 e5                	mov    %esp,%ebp
c010bc49:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->hash_link));
c010bc4c:	8b 45 08             	mov    0x8(%ebp),%eax
c010bc4f:	05 84 00 00 00       	add    $0x84,%eax
c010bc54:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010bc57:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010bc5a:	8b 40 04             	mov    0x4(%eax),%eax
c010bc5d:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010bc60:	8b 12                	mov    (%edx),%edx
c010bc62:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010bc65:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010bc68:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010bc6b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010bc6e:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010bc71:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bc74:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010bc77:	89 10                	mov    %edx,(%eax)
}
c010bc79:	90                   	nop
c010bc7a:	c9                   	leave  
c010bc7b:	c3                   	ret    

c010bc7c <find_proc>:

// find_proc - find proc frome proc hash_list according to pid
struct proc_struct *
find_proc(int pid) {
c010bc7c:	55                   	push   %ebp
c010bc7d:	89 e5                	mov    %esp,%ebp
c010bc7f:	83 ec 18             	sub    $0x18,%esp
    if (0 < pid && pid < MAX_PID) {
c010bc82:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010bc86:	7e 5f                	jle    c010bce7 <find_proc+0x6b>
c010bc88:	81 7d 08 ff 1f 00 00 	cmpl   $0x1fff,0x8(%ebp)
c010bc8f:	7f 56                	jg     c010bce7 <find_proc+0x6b>
        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
c010bc91:	8b 45 08             	mov    0x8(%ebp),%eax
c010bc94:	83 ec 08             	sub    $0x8,%esp
c010bc97:	6a 0a                	push   $0xa
c010bc99:	50                   	push   %eax
c010bc9a:	e8 9e 85 00 00       	call   c011423d <hash32>
c010bc9f:	83 c4 10             	add    $0x10,%esp
c010bca2:	c1 e0 03             	shl    $0x3,%eax
c010bca5:	05 40 20 15 c0       	add    $0xc0152040,%eax
c010bcaa:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010bcad:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bcb0:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while ((le = list_next(le)) != list) {
c010bcb3:	eb 1b                	jmp    c010bcd0 <find_proc+0x54>
            struct proc_struct *proc = le2proc(le, hash_link);
c010bcb5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bcb8:	2d 84 00 00 00       	sub    $0x84,%eax
c010bcbd:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if (proc->pid == pid) {
c010bcc0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bcc3:	8b 40 04             	mov    0x4(%eax),%eax
c010bcc6:	3b 45 08             	cmp    0x8(%ebp),%eax
c010bcc9:	75 05                	jne    c010bcd0 <find_proc+0x54>
                return proc;
c010bccb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bcce:	eb 1c                	jmp    c010bcec <find_proc+0x70>
c010bcd0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bcd3:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010bcd6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010bcd9:	8b 40 04             	mov    0x4(%eax),%eax
// find_proc - find proc frome proc hash_list according to pid
struct proc_struct *
find_proc(int pid) {
    if (0 < pid && pid < MAX_PID) {
        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
        while ((le = list_next(le)) != list) {
c010bcdc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bcdf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bce2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010bce5:	75 ce                	jne    c010bcb5 <find_proc+0x39>
            if (proc->pid == pid) {
                return proc;
            }
        }
    }
    return NULL;
c010bce7:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010bcec:	c9                   	leave  
c010bced:	c3                   	ret    

c010bcee <kernel_thread>:

// kernel_thread - create a kernel thread using "fn" function
// NOTE: the contents of temp trapframe tf will be copied to 
//       proc->tf in do_fork-->copy_thread function
int
kernel_thread(int (*fn)(void *), void *arg, uint32_t clone_flags) {
c010bcee:	55                   	push   %ebp
c010bcef:	89 e5                	mov    %esp,%ebp
c010bcf1:	83 ec 58             	sub    $0x58,%esp
    struct trapframe tf;
    memset(&tf, 0, sizeof(struct trapframe));
c010bcf4:	83 ec 04             	sub    $0x4,%esp
c010bcf7:	6a 4c                	push   $0x4c
c010bcf9:	6a 00                	push   $0x0
c010bcfb:	8d 45 ac             	lea    -0x54(%ebp),%eax
c010bcfe:	50                   	push   %eax
c010bcff:	e8 5e 7d 00 00       	call   c0113a62 <memset>
c010bd04:	83 c4 10             	add    $0x10,%esp
    tf.tf_cs = KERNEL_CS;
c010bd07:	66 c7 45 e8 08 00    	movw   $0x8,-0x18(%ebp)
    tf.tf_ds = tf.tf_es = tf.tf_ss = KERNEL_DS;
c010bd0d:	66 c7 45 f4 10 00    	movw   $0x10,-0xc(%ebp)
c010bd13:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c010bd17:	66 89 45 d4          	mov    %ax,-0x2c(%ebp)
c010bd1b:	0f b7 45 d4          	movzwl -0x2c(%ebp),%eax
c010bd1f:	66 89 45 d8          	mov    %ax,-0x28(%ebp)
    tf.tf_regs.reg_ebx = (uint32_t)fn;
c010bd23:	8b 45 08             	mov    0x8(%ebp),%eax
c010bd26:	89 45 bc             	mov    %eax,-0x44(%ebp)
    tf.tf_regs.reg_edx = (uint32_t)arg;
c010bd29:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bd2c:	89 45 c0             	mov    %eax,-0x40(%ebp)
    tf.tf_eip = (uint32_t)kernel_thread_entry;
c010bd2f:	b8 8e b4 10 c0       	mov    $0xc010b48e,%eax
c010bd34:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return do_fork(clone_flags | CLONE_VM, 0, &tf);
c010bd37:	8b 45 10             	mov    0x10(%ebp),%eax
c010bd3a:	80 cc 01             	or     $0x1,%ah
c010bd3d:	89 c2                	mov    %eax,%edx
c010bd3f:	83 ec 04             	sub    $0x4,%esp
c010bd42:	8d 45 ac             	lea    -0x54(%ebp),%eax
c010bd45:	50                   	push   %eax
c010bd46:	6a 00                	push   $0x0
c010bd48:	52                   	push   %edx
c010bd49:	e8 d8 03 00 00       	call   c010c126 <do_fork>
c010bd4e:	83 c4 10             	add    $0x10,%esp
}
c010bd51:	c9                   	leave  
c010bd52:	c3                   	ret    

c010bd53 <setup_kstack>:

// setup_kstack - alloc pages with size KSTACKPAGE as process kernel stack
static int
setup_kstack(struct proc_struct *proc) {
c010bd53:	55                   	push   %ebp
c010bd54:	89 e5                	mov    %esp,%ebp
c010bd56:	83 ec 18             	sub    $0x18,%esp
    struct Page *page = alloc_pages(KSTACKPAGE);
c010bd59:	83 ec 0c             	sub    $0xc,%esp
c010bd5c:	6a 02                	push   $0x2
c010bd5e:	e8 c9 b4 ff ff       	call   c010722c <alloc_pages>
c010bd63:	83 c4 10             	add    $0x10,%esp
c010bd66:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c010bd69:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bd6d:	74 1d                	je     c010bd8c <setup_kstack+0x39>
        proc->kstack = (uintptr_t)page2kva(page);
c010bd6f:	83 ec 0c             	sub    $0xc,%esp
c010bd72:	ff 75 f4             	pushl  -0xc(%ebp)
c010bd75:	e8 2e f8 ff ff       	call   c010b5a8 <page2kva>
c010bd7a:	83 c4 10             	add    $0x10,%esp
c010bd7d:	89 c2                	mov    %eax,%edx
c010bd7f:	8b 45 08             	mov    0x8(%ebp),%eax
c010bd82:	89 50 0c             	mov    %edx,0xc(%eax)
        return 0;
c010bd85:	b8 00 00 00 00       	mov    $0x0,%eax
c010bd8a:	eb 05                	jmp    c010bd91 <setup_kstack+0x3e>
    }
    return -E_NO_MEM;
c010bd8c:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c010bd91:	c9                   	leave  
c010bd92:	c3                   	ret    

c010bd93 <put_kstack>:

// put_kstack - free the memory space of process kernel stack
static void
put_kstack(struct proc_struct *proc) {
c010bd93:	55                   	push   %ebp
c010bd94:	89 e5                	mov    %esp,%ebp
c010bd96:	83 ec 08             	sub    $0x8,%esp
    free_pages(kva2page((void *)(proc->kstack)), KSTACKPAGE);
c010bd99:	8b 45 08             	mov    0x8(%ebp),%eax
c010bd9c:	8b 40 0c             	mov    0xc(%eax),%eax
c010bd9f:	83 ec 0c             	sub    $0xc,%esp
c010bda2:	50                   	push   %eax
c010bda3:	e8 45 f8 ff ff       	call   c010b5ed <kva2page>
c010bda8:	83 c4 10             	add    $0x10,%esp
c010bdab:	83 ec 08             	sub    $0x8,%esp
c010bdae:	6a 02                	push   $0x2
c010bdb0:	50                   	push   %eax
c010bdb1:	e8 e2 b4 ff ff       	call   c0107298 <free_pages>
c010bdb6:	83 c4 10             	add    $0x10,%esp
}
c010bdb9:	90                   	nop
c010bdba:	c9                   	leave  
c010bdbb:	c3                   	ret    

c010bdbc <setup_pgdir>:

// setup_pgdir - alloc one page as PDT
static int
setup_pgdir(struct mm_struct *mm) {
c010bdbc:	55                   	push   %ebp
c010bdbd:	89 e5                	mov    %esp,%ebp
c010bdbf:	83 ec 18             	sub    $0x18,%esp
    struct Page *page;
    if ((page = alloc_page()) == NULL) {
c010bdc2:	83 ec 0c             	sub    $0xc,%esp
c010bdc5:	6a 01                	push   $0x1
c010bdc7:	e8 60 b4 ff ff       	call   c010722c <alloc_pages>
c010bdcc:	83 c4 10             	add    $0x10,%esp
c010bdcf:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bdd2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bdd6:	75 07                	jne    c010bddf <setup_pgdir+0x23>
        return -E_NO_MEM;
c010bdd8:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010bddd:	eb 74                	jmp    c010be53 <setup_pgdir+0x97>
    }
    pde_t *pgdir = page2kva(page);
c010bddf:	83 ec 0c             	sub    $0xc,%esp
c010bde2:	ff 75 f4             	pushl  -0xc(%ebp)
c010bde5:	e8 be f7 ff ff       	call   c010b5a8 <page2kva>
c010bdea:	83 c4 10             	add    $0x10,%esp
c010bded:	89 45 f0             	mov    %eax,-0x10(%ebp)
    memcpy(pgdir, boot_pgdir, PGSIZE);
c010bdf0:	a1 20 ea 14 c0       	mov    0xc014ea20,%eax
c010bdf5:	83 ec 04             	sub    $0x4,%esp
c010bdf8:	68 00 10 00 00       	push   $0x1000
c010bdfd:	50                   	push   %eax
c010bdfe:	ff 75 f0             	pushl  -0x10(%ebp)
c010be01:	e8 3f 7d 00 00       	call   c0113b45 <memcpy>
c010be06:	83 c4 10             	add    $0x10,%esp
    pgdir[PDX(VPT)] = PADDR(pgdir) | PTE_P | PTE_W;
c010be09:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010be0c:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
c010be12:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010be15:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010be18:	81 7d ec ff ff ff bf 	cmpl   $0xbfffffff,-0x14(%ebp)
c010be1f:	77 17                	ja     c010be38 <setup_pgdir+0x7c>
c010be21:	ff 75 ec             	pushl  -0x14(%ebp)
c010be24:	68 68 6c 11 c0       	push   $0xc0116c68
c010be29:	68 4a 01 00 00       	push   $0x14a
c010be2e:	68 8c 6c 11 c0       	push   $0xc0116c8c
c010be33:	e8 b5 46 ff ff       	call   c01004ed <__panic>
c010be38:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010be3b:	05 00 00 00 40       	add    $0x40000000,%eax
c010be40:	83 c8 03             	or     $0x3,%eax
c010be43:	89 02                	mov    %eax,(%edx)
    mm->pgdir = pgdir;
c010be45:	8b 45 08             	mov    0x8(%ebp),%eax
c010be48:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010be4b:	89 50 0c             	mov    %edx,0xc(%eax)
    return 0;
c010be4e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010be53:	c9                   	leave  
c010be54:	c3                   	ret    

c010be55 <put_pgdir>:

// put_pgdir - free the memory space of PDT
static void
put_pgdir(struct mm_struct *mm) {
c010be55:	55                   	push   %ebp
c010be56:	89 e5                	mov    %esp,%ebp
c010be58:	83 ec 08             	sub    $0x8,%esp
    free_page(kva2page(mm->pgdir));
c010be5b:	8b 45 08             	mov    0x8(%ebp),%eax
c010be5e:	8b 40 0c             	mov    0xc(%eax),%eax
c010be61:	83 ec 0c             	sub    $0xc,%esp
c010be64:	50                   	push   %eax
c010be65:	e8 83 f7 ff ff       	call   c010b5ed <kva2page>
c010be6a:	83 c4 10             	add    $0x10,%esp
c010be6d:	83 ec 08             	sub    $0x8,%esp
c010be70:	6a 01                	push   $0x1
c010be72:	50                   	push   %eax
c010be73:	e8 20 b4 ff ff       	call   c0107298 <free_pages>
c010be78:	83 c4 10             	add    $0x10,%esp
}
c010be7b:	90                   	nop
c010be7c:	c9                   	leave  
c010be7d:	c3                   	ret    

c010be7e <copy_mm>:

// copy_mm - process "proc" duplicate OR share process "current"'s mm according clone_flags
//         - if clone_flags & CLONE_VM, then "share" ; else "duplicate"
static int
copy_mm(uint32_t clone_flags, struct proc_struct *proc) {
c010be7e:	55                   	push   %ebp
c010be7f:	89 e5                	mov    %esp,%ebp
c010be81:	83 ec 18             	sub    $0x18,%esp
    struct mm_struct *mm, *oldmm = current->mm;
c010be84:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010be89:	8b 40 18             	mov    0x18(%eax),%eax
c010be8c:	89 45 ec             	mov    %eax,-0x14(%ebp)

    /* current is a kernel thread */
    if (oldmm == NULL) {
c010be8f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010be93:	75 0a                	jne    c010be9f <copy_mm+0x21>
        return 0;
c010be95:	b8 00 00 00 00       	mov    $0x0,%eax
c010be9a:	e9 03 01 00 00       	jmp    c010bfa2 <copy_mm+0x124>
    }
    if (clone_flags & CLONE_VM) {
c010be9f:	8b 45 08             	mov    0x8(%ebp),%eax
c010bea2:	25 00 01 00 00       	and    $0x100,%eax
c010bea7:	85 c0                	test   %eax,%eax
c010bea9:	74 08                	je     c010beb3 <copy_mm+0x35>
        mm = oldmm;
c010beab:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010beae:	89 45 f4             	mov    %eax,-0xc(%ebp)
        goto good_mm;
c010beb1:	eb 65                	jmp    c010bf18 <copy_mm+0x9a>
    }

    int ret = -E_NO_MEM;
c010beb3:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
    if ((mm = mm_create()) == NULL) {
c010beba:	e8 4b 78 ff ff       	call   c010370a <mm_create>
c010bebf:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bec2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bec6:	0f 84 d2 00 00 00    	je     c010bf9e <copy_mm+0x120>
        goto bad_mm;
    }
    if (setup_pgdir(mm) != 0) {
c010becc:	83 ec 0c             	sub    $0xc,%esp
c010becf:	ff 75 f4             	pushl  -0xc(%ebp)
c010bed2:	e8 e5 fe ff ff       	call   c010bdbc <setup_pgdir>
c010bed7:	83 c4 10             	add    $0x10,%esp
c010beda:	85 c0                	test   %eax,%eax
c010bedc:	0f 85 ab 00 00 00    	jne    c010bf8d <copy_mm+0x10f>
        goto bad_pgdir_cleanup_mm;
    }

    lock_mm(oldmm);
c010bee2:	83 ec 0c             	sub    $0xc,%esp
c010bee5:	ff 75 ec             	pushl  -0x14(%ebp)
c010bee8:	e8 73 f7 ff ff       	call   c010b660 <lock_mm>
c010beed:	83 c4 10             	add    $0x10,%esp
    {
        ret = dup_mmap(mm, oldmm);
c010bef0:	83 ec 08             	sub    $0x8,%esp
c010bef3:	ff 75 ec             	pushl  -0x14(%ebp)
c010bef6:	ff 75 f4             	pushl  -0xc(%ebp)
c010bef9:	e8 df 7c ff ff       	call   c0103bdd <dup_mmap>
c010befe:	83 c4 10             	add    $0x10,%esp
c010bf01:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    unlock_mm(oldmm);
c010bf04:	83 ec 0c             	sub    $0xc,%esp
c010bf07:	ff 75 ec             	pushl  -0x14(%ebp)
c010bf0a:	e8 89 f7 ff ff       	call   c010b698 <unlock_mm>
c010bf0f:	83 c4 10             	add    $0x10,%esp

    if (ret != 0) {
c010bf12:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010bf16:	75 56                	jne    c010bf6e <copy_mm+0xf0>
        goto bad_dup_cleanup_mmap;
    }

good_mm:
    mm_count_inc(mm);
c010bf18:	83 ec 0c             	sub    $0xc,%esp
c010bf1b:	ff 75 f4             	pushl  -0xc(%ebp)
c010bf1e:	e8 09 f7 ff ff       	call   c010b62c <mm_count_inc>
c010bf23:	83 c4 10             	add    $0x10,%esp
    proc->mm = mm;
c010bf26:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bf29:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010bf2c:	89 50 18             	mov    %edx,0x18(%eax)
    proc->cr3 = PADDR(mm->pgdir);
c010bf2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bf32:	8b 40 0c             	mov    0xc(%eax),%eax
c010bf35:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010bf38:	81 7d e8 ff ff ff bf 	cmpl   $0xbfffffff,-0x18(%ebp)
c010bf3f:	77 17                	ja     c010bf58 <copy_mm+0xda>
c010bf41:	ff 75 e8             	pushl  -0x18(%ebp)
c010bf44:	68 68 6c 11 c0       	push   $0xc0116c68
c010bf49:	68 79 01 00 00       	push   $0x179
c010bf4e:	68 8c 6c 11 c0       	push   $0xc0116c8c
c010bf53:	e8 95 45 ff ff       	call   c01004ed <__panic>
c010bf58:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010bf5b:	8d 90 00 00 00 40    	lea    0x40000000(%eax),%edx
c010bf61:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bf64:	89 50 40             	mov    %edx,0x40(%eax)
    return 0;
c010bf67:	b8 00 00 00 00       	mov    $0x0,%eax
c010bf6c:	eb 34                	jmp    c010bfa2 <copy_mm+0x124>
        ret = dup_mmap(mm, oldmm);
    }
    unlock_mm(oldmm);

    if (ret != 0) {
        goto bad_dup_cleanup_mmap;
c010bf6e:	90                   	nop
    mm_count_inc(mm);
    proc->mm = mm;
    proc->cr3 = PADDR(mm->pgdir);
    return 0;
bad_dup_cleanup_mmap:
    exit_mmap(mm);
c010bf6f:	83 ec 0c             	sub    $0xc,%esp
c010bf72:	ff 75 f4             	pushl  -0xc(%ebp)
c010bf75:	e8 4a 7d ff ff       	call   c0103cc4 <exit_mmap>
c010bf7a:	83 c4 10             	add    $0x10,%esp
    put_pgdir(mm);
c010bf7d:	83 ec 0c             	sub    $0xc,%esp
c010bf80:	ff 75 f4             	pushl  -0xc(%ebp)
c010bf83:	e8 cd fe ff ff       	call   c010be55 <put_pgdir>
c010bf88:	83 c4 10             	add    $0x10,%esp
c010bf8b:	eb 01                	jmp    c010bf8e <copy_mm+0x110>
    int ret = -E_NO_MEM;
    if ((mm = mm_create()) == NULL) {
        goto bad_mm;
    }
    if (setup_pgdir(mm) != 0) {
        goto bad_pgdir_cleanup_mm;
c010bf8d:	90                   	nop
    return 0;
bad_dup_cleanup_mmap:
    exit_mmap(mm);
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
c010bf8e:	83 ec 0c             	sub    $0xc,%esp
c010bf91:	ff 75 f4             	pushl  -0xc(%ebp)
c010bf94:	e8 9d 7a ff ff       	call   c0103a36 <mm_destroy>
c010bf99:	83 c4 10             	add    $0x10,%esp
c010bf9c:	eb 01                	jmp    c010bf9f <copy_mm+0x121>
        goto good_mm;
    }

    int ret = -E_NO_MEM;
    if ((mm = mm_create()) == NULL) {
        goto bad_mm;
c010bf9e:	90                   	nop
    exit_mmap(mm);
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
bad_mm:
    return ret;
c010bf9f:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010bfa2:	c9                   	leave  
c010bfa3:	c3                   	ret    

c010bfa4 <copy_thread>:

// copy_thread - setup the trapframe on the  process's kernel stack top and
//             - setup the kernel entry point and stack of process
static void
copy_thread(struct proc_struct *proc, uintptr_t esp, struct trapframe *tf) {
c010bfa4:	55                   	push   %ebp
c010bfa5:	89 e5                	mov    %esp,%ebp
c010bfa7:	57                   	push   %edi
c010bfa8:	56                   	push   %esi
c010bfa9:	53                   	push   %ebx
    proc->tf = (struct trapframe *)(proc->kstack + KSTACKSIZE) - 1;
c010bfaa:	8b 45 08             	mov    0x8(%ebp),%eax
c010bfad:	8b 40 0c             	mov    0xc(%eax),%eax
c010bfb0:	05 b4 1f 00 00       	add    $0x1fb4,%eax
c010bfb5:	89 c2                	mov    %eax,%edx
c010bfb7:	8b 45 08             	mov    0x8(%ebp),%eax
c010bfba:	89 50 3c             	mov    %edx,0x3c(%eax)
    *(proc->tf) = *tf;
c010bfbd:	8b 45 08             	mov    0x8(%ebp),%eax
c010bfc0:	8b 40 3c             	mov    0x3c(%eax),%eax
c010bfc3:	8b 55 10             	mov    0x10(%ebp),%edx
c010bfc6:	89 d3                	mov    %edx,%ebx
c010bfc8:	ba 4c 00 00 00       	mov    $0x4c,%edx
c010bfcd:	8b 0b                	mov    (%ebx),%ecx
c010bfcf:	89 08                	mov    %ecx,(%eax)
c010bfd1:	8b 4c 13 fc          	mov    -0x4(%ebx,%edx,1),%ecx
c010bfd5:	89 4c 10 fc          	mov    %ecx,-0x4(%eax,%edx,1)
c010bfd9:	8d 78 04             	lea    0x4(%eax),%edi
c010bfdc:	83 e7 fc             	and    $0xfffffffc,%edi
c010bfdf:	29 f8                	sub    %edi,%eax
c010bfe1:	29 c3                	sub    %eax,%ebx
c010bfe3:	01 c2                	add    %eax,%edx
c010bfe5:	83 e2 fc             	and    $0xfffffffc,%edx
c010bfe8:	89 d0                	mov    %edx,%eax
c010bfea:	c1 e8 02             	shr    $0x2,%eax
c010bfed:	89 de                	mov    %ebx,%esi
c010bfef:	89 c1                	mov    %eax,%ecx
c010bff1:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
    proc->tf->tf_regs.reg_eax = 0;
c010bff3:	8b 45 08             	mov    0x8(%ebp),%eax
c010bff6:	8b 40 3c             	mov    0x3c(%eax),%eax
c010bff9:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    proc->tf->tf_esp = esp;
c010c000:	8b 45 08             	mov    0x8(%ebp),%eax
c010c003:	8b 40 3c             	mov    0x3c(%eax),%eax
c010c006:	8b 55 0c             	mov    0xc(%ebp),%edx
c010c009:	89 50 44             	mov    %edx,0x44(%eax)
    proc->tf->tf_eflags |= FL_IF;
c010c00c:	8b 45 08             	mov    0x8(%ebp),%eax
c010c00f:	8b 40 3c             	mov    0x3c(%eax),%eax
c010c012:	8b 55 08             	mov    0x8(%ebp),%edx
c010c015:	8b 52 3c             	mov    0x3c(%edx),%edx
c010c018:	8b 52 40             	mov    0x40(%edx),%edx
c010c01b:	80 ce 02             	or     $0x2,%dh
c010c01e:	89 50 40             	mov    %edx,0x40(%eax)

    proc->context.eip = (uintptr_t)forkret;
c010c021:	ba ac bb 10 c0       	mov    $0xc010bbac,%edx
c010c026:	8b 45 08             	mov    0x8(%ebp),%eax
c010c029:	89 50 1c             	mov    %edx,0x1c(%eax)
    proc->context.esp = (uintptr_t)(proc->tf);
c010c02c:	8b 45 08             	mov    0x8(%ebp),%eax
c010c02f:	8b 40 3c             	mov    0x3c(%eax),%eax
c010c032:	89 c2                	mov    %eax,%edx
c010c034:	8b 45 08             	mov    0x8(%ebp),%eax
c010c037:	89 50 20             	mov    %edx,0x20(%eax)
}
c010c03a:	90                   	nop
c010c03b:	5b                   	pop    %ebx
c010c03c:	5e                   	pop    %esi
c010c03d:	5f                   	pop    %edi
c010c03e:	5d                   	pop    %ebp
c010c03f:	c3                   	ret    

c010c040 <copy_files>:

//copy_files&put_files function used by do_fork in LAB8
//copy the files_struct from current to proc
static int
copy_files(uint32_t clone_flags, struct proc_struct *proc) {
c010c040:	55                   	push   %ebp
c010c041:	89 e5                	mov    %esp,%ebp
c010c043:	83 ec 18             	sub    $0x18,%esp
    struct files_struct *filesp, *old_filesp = current->filesp;
c010c046:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010c04b:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010c051:	89 45 ec             	mov    %eax,-0x14(%ebp)
    assert(old_filesp != NULL);
c010c054:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010c058:	75 19                	jne    c010c073 <copy_files+0x33>
c010c05a:	68 a0 6c 11 c0       	push   $0xc0116ca0
c010c05f:	68 b3 6c 11 c0       	push   $0xc0116cb3
c010c064:	68 97 01 00 00       	push   $0x197
c010c069:	68 8c 6c 11 c0       	push   $0xc0116c8c
c010c06e:	e8 7a 44 ff ff       	call   c01004ed <__panic>

    if (clone_flags & CLONE_FS) {
c010c073:	8b 45 08             	mov    0x8(%ebp),%eax
c010c076:	25 00 08 00 00       	and    $0x800,%eax
c010c07b:	85 c0                	test   %eax,%eax
c010c07d:	74 08                	je     c010c087 <copy_files+0x47>
        filesp = old_filesp;
c010c07f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c082:	89 45 f4             	mov    %eax,-0xc(%ebp)
        goto good_files_struct;
c010c085:	eb 2f                	jmp    c010c0b6 <copy_files+0x76>
    }

    int ret = -E_NO_MEM;
c010c087:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
    if ((filesp = files_create()) == NULL) {
c010c08e:	e8 85 f1 ff ff       	call   c010b218 <files_create>
c010c093:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c096:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c09a:	74 4c                	je     c010c0e8 <copy_files+0xa8>
        goto bad_files_struct;
    }

    if ((ret = dup_files(filesp, old_filesp)) != 0) {
c010c09c:	83 ec 08             	sub    $0x8,%esp
c010c09f:	ff 75 ec             	pushl  -0x14(%ebp)
c010c0a2:	ff 75 f4             	pushl  -0xc(%ebp)
c010c0a5:	e8 02 f3 ff ff       	call   c010b3ac <dup_files>
c010c0aa:	83 c4 10             	add    $0x10,%esp
c010c0ad:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c0b0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010c0b4:	75 21                	jne    c010c0d7 <copy_files+0x97>
        goto bad_dup_cleanup_fs;
    }

good_files_struct:
    files_count_inc(filesp);
c010c0b6:	83 ec 0c             	sub    $0xc,%esp
c010c0b9:	ff 75 f4             	pushl  -0xc(%ebp)
c010c0bc:	e8 02 f6 ff ff       	call   c010b6c3 <files_count_inc>
c010c0c1:	83 c4 10             	add    $0x10,%esp
    proc->filesp = filesp;
c010c0c4:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c0c7:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c0ca:	89 90 c4 00 00 00    	mov    %edx,0xc4(%eax)
    return 0;
c010c0d0:	b8 00 00 00 00       	mov    $0x0,%eax
c010c0d5:	eb 15                	jmp    c010c0ec <copy_files+0xac>
    if ((filesp = files_create()) == NULL) {
        goto bad_files_struct;
    }

    if ((ret = dup_files(filesp, old_filesp)) != 0) {
        goto bad_dup_cleanup_fs;
c010c0d7:	90                   	nop
    files_count_inc(filesp);
    proc->filesp = filesp;
    return 0;

bad_dup_cleanup_fs:
    files_destroy(filesp);
c010c0d8:	83 ec 0c             	sub    $0xc,%esp
c010c0db:	ff 75 f4             	pushl  -0xc(%ebp)
c010c0de:	e8 9e f1 ff ff       	call   c010b281 <files_destroy>
c010c0e3:	83 c4 10             	add    $0x10,%esp
c010c0e6:	eb 01                	jmp    c010c0e9 <copy_files+0xa9>
        goto good_files_struct;
    }

    int ret = -E_NO_MEM;
    if ((filesp = files_create()) == NULL) {
        goto bad_files_struct;
c010c0e8:	90                   	nop
    return 0;

bad_dup_cleanup_fs:
    files_destroy(filesp);
bad_files_struct:
    return ret;
c010c0e9:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010c0ec:	c9                   	leave  
c010c0ed:	c3                   	ret    

c010c0ee <put_files>:

//decrease the ref_count of files, and if ref_count==0, then destroy files_struct
static void
put_files(struct proc_struct *proc) {
c010c0ee:	55                   	push   %ebp
c010c0ef:	89 e5                	mov    %esp,%ebp
c010c0f1:	83 ec 18             	sub    $0x18,%esp
    struct files_struct *filesp = proc->filesp;
c010c0f4:	8b 45 08             	mov    0x8(%ebp),%eax
c010c0f7:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010c0fd:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (filesp != NULL) {
c010c100:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c104:	74 1d                	je     c010c123 <put_files+0x35>
        if (files_count_dec(filesp) == 0) {
c010c106:	ff 75 f4             	pushl  -0xc(%ebp)
c010c109:	e8 cf f5 ff ff       	call   c010b6dd <files_count_dec>
c010c10e:	83 c4 04             	add    $0x4,%esp
c010c111:	85 c0                	test   %eax,%eax
c010c113:	75 0e                	jne    c010c123 <put_files+0x35>
            files_destroy(filesp);
c010c115:	83 ec 0c             	sub    $0xc,%esp
c010c118:	ff 75 f4             	pushl  -0xc(%ebp)
c010c11b:	e8 61 f1 ff ff       	call   c010b281 <files_destroy>
c010c120:	83 c4 10             	add    $0x10,%esp
        }
    }
}
c010c123:	90                   	nop
c010c124:	c9                   	leave  
c010c125:	c3                   	ret    

c010c126 <do_fork>:
 * @clone_flags: used to guide how to clone the child process
 * @stack:       the parent's user stack pointer. if stack==0, It means to fork a kernel thread.
 * @tf:          the trapframe info, which will be copied to child process's proc->tf
 */
int
do_fork(uint32_t clone_flags, uintptr_t stack, struct trapframe *tf) {
c010c126:	55                   	push   %ebp
c010c127:	89 e5                	mov    %esp,%ebp
c010c129:	83 ec 18             	sub    $0x18,%esp
    int ret = -E_NO_FREE_PROC;
c010c12c:	c7 45 f4 fb ff ff ff 	movl   $0xfffffffb,-0xc(%ebp)
    struct proc_struct *proc;
    if (nr_process >= MAX_PROCESS) {
c010c133:	a1 40 40 15 c0       	mov    0xc0154040,%eax
c010c138:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c010c13d:	0f 8f fd 00 00 00    	jg     c010c240 <do_fork+0x11a>
        goto fork_out;
    }
    ret = -E_NO_MEM;
c010c143:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    *    -------------------
	*    update step 1: set child proc's parent to current process, make sure current process's wait_state is 0
	*    update step 5: insert proc_struct into hash_list && proc_list, set the relation links of process
    */
   //    1. call alloc_proc to allocate a proc_struct
    proc = alloc_proc();
c010c14a:	e8 a8 f5 ff ff       	call   c010b6f7 <alloc_proc>
c010c14f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (proc == NULL) {
c010c152:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010c156:	0f 84 e7 00 00 00    	je     c010c243 <do_fork+0x11d>
        goto fork_out;
    }
    // update
    assert(current->wait_state == 0);
c010c15c:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010c161:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010c167:	85 c0                	test   %eax,%eax
c010c169:	74 19                	je     c010c184 <do_fork+0x5e>
c010c16b:	68 c8 6c 11 c0       	push   $0xc0116cc8
c010c170:	68 b3 6c 11 c0       	push   $0xc0116cb3
c010c175:	68 f2 01 00 00       	push   $0x1f2
c010c17a:	68 8c 6c 11 c0       	push   $0xc0116c8c
c010c17f:	e8 69 43 ff ff       	call   c01004ed <__panic>
    proc->parent = current;
c010c184:	8b 15 28 20 15 c0    	mov    0xc0152028,%edx
c010c18a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c18d:	89 50 14             	mov    %edx,0x14(%eax)
    //    2. call setup_kstack to allocate a kernel stack for child process
    if (setup_kstack(proc) != 0) {
c010c190:	83 ec 0c             	sub    $0xc,%esp
c010c193:	ff 75 f0             	pushl  -0x10(%ebp)
c010c196:	e8 b8 fb ff ff       	call   c010bd53 <setup_kstack>
c010c19b:	83 c4 10             	add    $0x10,%esp
c010c19e:	85 c0                	test   %eax,%eax
c010c1a0:	0f 85 c5 00 00 00    	jne    c010c26b <do_fork+0x145>
        goto bad_fork_cleanup_proc;
    }
    //    2.5 copy files
    if (copy_files(clone_flags, proc) != 0) {
c010c1a6:	83 ec 08             	sub    $0x8,%esp
c010c1a9:	ff 75 f0             	pushl  -0x10(%ebp)
c010c1ac:	ff 75 08             	pushl  0x8(%ebp)
c010c1af:	e8 8c fe ff ff       	call   c010c040 <copy_files>
c010c1b4:	83 c4 10             	add    $0x10,%esp
c010c1b7:	85 c0                	test   %eax,%eax
c010c1b9:	0f 85 9b 00 00 00    	jne    c010c25a <do_fork+0x134>
        goto bad_fork_cleanup_kstack;
    }
    //    3. call copy_mm to dup OR share mm according clone_flag
    if (copy_mm(clone_flags, proc) != 0) {
c010c1bf:	83 ec 08             	sub    $0x8,%esp
c010c1c2:	ff 75 f0             	pushl  -0x10(%ebp)
c010c1c5:	ff 75 08             	pushl  0x8(%ebp)
c010c1c8:	e8 b1 fc ff ff       	call   c010be7e <copy_mm>
c010c1cd:	83 c4 10             	add    $0x10,%esp
c010c1d0:	85 c0                	test   %eax,%eax
c010c1d2:	75 75                	jne    c010c249 <do_fork+0x123>
        goto bad_fork_cleanup_fs;
    }
    
    //    4. call copy_thread to setup tf & context in proc_struct
    copy_thread(proc, stack, tf);   // note: if stack == 0, this is a kernel thread
c010c1d4:	83 ec 04             	sub    $0x4,%esp
c010c1d7:	ff 75 10             	pushl  0x10(%ebp)
c010c1da:	ff 75 0c             	pushl  0xc(%ebp)
c010c1dd:	ff 75 f0             	pushl  -0x10(%ebp)
c010c1e0:	e8 bf fd ff ff       	call   c010bfa4 <copy_thread>
c010c1e5:	83 c4 10             	add    $0x10,%esp
    //    5. insert proc_struct into hash_list && proc_list
    // this need disabling interrupt
    bool intr_flag;
    local_intr_save(intr_flag);
c010c1e8:	e8 1a f3 ff ff       	call   c010b507 <__intr_save>
c010c1ed:	89 45 ec             	mov    %eax,-0x14(%ebp)
    {
        proc->pid = get_pid();
c010c1f0:	e8 41 f8 ff ff       	call   c010ba36 <get_pid>
c010c1f5:	89 c2                	mov    %eax,%edx
c010c1f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c1fa:	89 50 04             	mov    %edx,0x4(%eax)
        hash_proc(proc);
c010c1fd:	83 ec 0c             	sub    $0xc,%esp
c010c200:	ff 75 f0             	pushl  -0x10(%ebp)
c010c203:	e8 c1 f9 ff ff       	call   c010bbc9 <hash_proc>
c010c208:	83 c4 10             	add    $0x10,%esp
        // list_add(&proc_list, &(proc->list_link));
        // nr_process++;
        // update
        set_links(proc);
c010c20b:	83 ec 0c             	sub    $0xc,%esp
c010c20e:	ff 75 f0             	pushl  -0x10(%ebp)
c010c211:	e8 c3 f6 ff ff       	call   c010b8d9 <set_links>
c010c216:	83 c4 10             	add    $0x10,%esp
    }
    local_intr_restore(intr_flag);
c010c219:	83 ec 0c             	sub    $0xc,%esp
c010c21c:	ff 75 ec             	pushl  -0x14(%ebp)
c010c21f:	e8 0d f3 ff ff       	call   c010b531 <__intr_restore>
c010c224:	83 c4 10             	add    $0x10,%esp
    //    6. call wakeup_proc to make the new child process RUNNABLE
    wakeup_proc(proc);
c010c227:	83 ec 0c             	sub    $0xc,%esp
c010c22a:	ff 75 f0             	pushl  -0x10(%ebp)
c010c22d:	e8 aa 15 00 00       	call   c010d7dc <wakeup_proc>
c010c232:	83 c4 10             	add    $0x10,%esp
    //    7. set ret vaule using child proc's pid
    ret = proc->pid;
c010c235:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c238:	8b 40 04             	mov    0x4(%eax),%eax
c010c23b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c23e:	eb 04                	jmp    c010c244 <do_fork+0x11e>
int
do_fork(uint32_t clone_flags, uintptr_t stack, struct trapframe *tf) {
    int ret = -E_NO_FREE_PROC;
    struct proc_struct *proc;
    if (nr_process >= MAX_PROCESS) {
        goto fork_out;
c010c240:	90                   	nop
c010c241:	eb 01                	jmp    c010c244 <do_fork+0x11e>
	*    update step 5: insert proc_struct into hash_list && proc_list, set the relation links of process
    */
   //    1. call alloc_proc to allocate a proc_struct
    proc = alloc_proc();
    if (proc == NULL) {
        goto fork_out;
c010c243:	90                   	nop
    wakeup_proc(proc);
    //    7. set ret vaule using child proc's pid
    ret = proc->pid;
	
fork_out:
    return ret;
c010c244:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c247:	eb 33                	jmp    c010c27c <do_fork+0x156>
    if (copy_files(clone_flags, proc) != 0) {
        goto bad_fork_cleanup_kstack;
    }
    //    3. call copy_mm to dup OR share mm according clone_flag
    if (copy_mm(clone_flags, proc) != 0) {
        goto bad_fork_cleanup_fs;
c010c249:	90                   	nop
	
fork_out:
    return ret;

bad_fork_cleanup_fs:  //for LAB8
    put_files(proc);
c010c24a:	83 ec 0c             	sub    $0xc,%esp
c010c24d:	ff 75 f0             	pushl  -0x10(%ebp)
c010c250:	e8 99 fe ff ff       	call   c010c0ee <put_files>
c010c255:	83 c4 10             	add    $0x10,%esp
c010c258:	eb 01                	jmp    c010c25b <do_fork+0x135>
    if (setup_kstack(proc) != 0) {
        goto bad_fork_cleanup_proc;
    }
    //    2.5 copy files
    if (copy_files(clone_flags, proc) != 0) {
        goto bad_fork_cleanup_kstack;
c010c25a:	90                   	nop
    return ret;

bad_fork_cleanup_fs:  //for LAB8
    put_files(proc);
bad_fork_cleanup_kstack:
    put_kstack(proc);
c010c25b:	83 ec 0c             	sub    $0xc,%esp
c010c25e:	ff 75 f0             	pushl  -0x10(%ebp)
c010c261:	e8 2d fb ff ff       	call   c010bd93 <put_kstack>
c010c266:	83 c4 10             	add    $0x10,%esp
c010c269:	eb 01                	jmp    c010c26c <do_fork+0x146>
    // update
    assert(current->wait_state == 0);
    proc->parent = current;
    //    2. call setup_kstack to allocate a kernel stack for child process
    if (setup_kstack(proc) != 0) {
        goto bad_fork_cleanup_proc;
c010c26b:	90                   	nop
bad_fork_cleanup_fs:  //for LAB8
    put_files(proc);
bad_fork_cleanup_kstack:
    put_kstack(proc);
bad_fork_cleanup_proc:
    kfree(proc);
c010c26c:	83 ec 0c             	sub    $0xc,%esp
c010c26f:	ff 75 f0             	pushl  -0x10(%ebp)
c010c272:	e8 a3 90 ff ff       	call   c010531a <kfree>
c010c277:	83 c4 10             	add    $0x10,%esp
    goto fork_out;
c010c27a:	eb c8                	jmp    c010c244 <do_fork+0x11e>
}
c010c27c:	c9                   	leave  
c010c27d:	c3                   	ret    

c010c27e <do_exit>:
// do_exit - called by sys_exit
//   1. call exit_mmap & put_pgdir & mm_destroy to free the almost all memory space of process
//   2. set process' state as PROC_ZOMBIE, then call wakeup_proc(parent) to ask parent reclaim itself.
//   3. call scheduler to switch to other process
int
do_exit(int error_code) {
c010c27e:	55                   	push   %ebp
c010c27f:	89 e5                	mov    %esp,%ebp
c010c281:	83 ec 18             	sub    $0x18,%esp
    if (current == idleproc) {
c010c284:	8b 15 28 20 15 c0    	mov    0xc0152028,%edx
c010c28a:	a1 20 20 15 c0       	mov    0xc0152020,%eax
c010c28f:	39 c2                	cmp    %eax,%edx
c010c291:	75 17                	jne    c010c2aa <do_exit+0x2c>
        panic("idleproc exit.\n");
c010c293:	83 ec 04             	sub    $0x4,%esp
c010c296:	68 e1 6c 11 c0       	push   $0xc0116ce1
c010c29b:	68 28 02 00 00       	push   $0x228
c010c2a0:	68 8c 6c 11 c0       	push   $0xc0116c8c
c010c2a5:	e8 43 42 ff ff       	call   c01004ed <__panic>
    }
    if (current == initproc) {
c010c2aa:	8b 15 28 20 15 c0    	mov    0xc0152028,%edx
c010c2b0:	a1 24 20 15 c0       	mov    0xc0152024,%eax
c010c2b5:	39 c2                	cmp    %eax,%edx
c010c2b7:	75 17                	jne    c010c2d0 <do_exit+0x52>
        panic("initproc exit.\n");
c010c2b9:	83 ec 04             	sub    $0x4,%esp
c010c2bc:	68 f1 6c 11 c0       	push   $0xc0116cf1
c010c2c1:	68 2b 02 00 00       	push   $0x22b
c010c2c6:	68 8c 6c 11 c0       	push   $0xc0116c8c
c010c2cb:	e8 1d 42 ff ff       	call   c01004ed <__panic>
    }
    
    struct mm_struct *mm = current->mm;
c010c2d0:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010c2d5:	8b 40 18             	mov    0x18(%eax),%eax
c010c2d8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (mm != NULL) {
c010c2db:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c2df:	74 56                	je     c010c337 <do_exit+0xb9>
        lcr3(boot_cr3);
c010c2e1:	a1 54 52 15 c0       	mov    0xc0155254,%eax
c010c2e6:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010c2e9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c2ec:	0f 22 d8             	mov    %eax,%cr3
        if (mm_count_dec(mm) == 0) {
c010c2ef:	83 ec 0c             	sub    $0xc,%esp
c010c2f2:	ff 75 f4             	pushl  -0xc(%ebp)
c010c2f5:	e8 4c f3 ff ff       	call   c010b646 <mm_count_dec>
c010c2fa:	83 c4 10             	add    $0x10,%esp
c010c2fd:	85 c0                	test   %eax,%eax
c010c2ff:	75 2a                	jne    c010c32b <do_exit+0xad>
            exit_mmap(mm);
c010c301:	83 ec 0c             	sub    $0xc,%esp
c010c304:	ff 75 f4             	pushl  -0xc(%ebp)
c010c307:	e8 b8 79 ff ff       	call   c0103cc4 <exit_mmap>
c010c30c:	83 c4 10             	add    $0x10,%esp
            put_pgdir(mm);
c010c30f:	83 ec 0c             	sub    $0xc,%esp
c010c312:	ff 75 f4             	pushl  -0xc(%ebp)
c010c315:	e8 3b fb ff ff       	call   c010be55 <put_pgdir>
c010c31a:	83 c4 10             	add    $0x10,%esp
            mm_destroy(mm);
c010c31d:	83 ec 0c             	sub    $0xc,%esp
c010c320:	ff 75 f4             	pushl  -0xc(%ebp)
c010c323:	e8 0e 77 ff ff       	call   c0103a36 <mm_destroy>
c010c328:	83 c4 10             	add    $0x10,%esp
        }
        current->mm = NULL;
c010c32b:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010c330:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    put_files(current); //for LAB8
c010c337:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010c33c:	83 ec 0c             	sub    $0xc,%esp
c010c33f:	50                   	push   %eax
c010c340:	e8 a9 fd ff ff       	call   c010c0ee <put_files>
c010c345:	83 c4 10             	add    $0x10,%esp
    current->state = PROC_ZOMBIE;
c010c348:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010c34d:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
    current->exit_code = error_code;
c010c353:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010c358:	8b 55 08             	mov    0x8(%ebp),%edx
c010c35b:	89 90 8c 00 00 00    	mov    %edx,0x8c(%eax)
    
    bool intr_flag;
    struct proc_struct *proc;
    local_intr_save(intr_flag);
c010c361:	e8 a1 f1 ff ff       	call   c010b507 <__intr_save>
c010c366:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        proc = current->parent;
c010c369:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010c36e:	8b 40 14             	mov    0x14(%eax),%eax
c010c371:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (proc->wait_state == WT_CHILD) {
c010c374:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c377:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010c37d:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c010c382:	0f 85 be 00 00 00    	jne    c010c446 <do_exit+0x1c8>
            wakeup_proc(proc);
c010c388:	83 ec 0c             	sub    $0xc,%esp
c010c38b:	ff 75 ec             	pushl  -0x14(%ebp)
c010c38e:	e8 49 14 00 00       	call   c010d7dc <wakeup_proc>
c010c393:	83 c4 10             	add    $0x10,%esp
        }
        while (current->cptr != NULL) {
c010c396:	e9 ab 00 00 00       	jmp    c010c446 <do_exit+0x1c8>
            proc = current->cptr;
c010c39b:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010c3a0:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010c3a6:	89 45 ec             	mov    %eax,-0x14(%ebp)
            current->cptr = proc->optr;
c010c3a9:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010c3ae:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010c3b1:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c010c3b7:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    
            proc->yptr = NULL;
c010c3bd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c3c0:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
c010c3c7:	00 00 00 
            if ((proc->optr = initproc->cptr) != NULL) {
c010c3ca:	a1 24 20 15 c0       	mov    0xc0152024,%eax
c010c3cf:	8b 90 94 00 00 00    	mov    0x94(%eax),%edx
c010c3d5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c3d8:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010c3de:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c3e1:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010c3e7:	85 c0                	test   %eax,%eax
c010c3e9:	74 14                	je     c010c3ff <do_exit+0x181>
                initproc->cptr->yptr = proc;
c010c3eb:	a1 24 20 15 c0       	mov    0xc0152024,%eax
c010c3f0:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010c3f6:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010c3f9:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
            }
            proc->parent = initproc;
c010c3ff:	8b 15 24 20 15 c0    	mov    0xc0152024,%edx
c010c405:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c408:	89 50 14             	mov    %edx,0x14(%eax)
            initproc->cptr = proc;
c010c40b:	a1 24 20 15 c0       	mov    0xc0152024,%eax
c010c410:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010c413:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
            if (proc->state == PROC_ZOMBIE) {
c010c419:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c41c:	8b 00                	mov    (%eax),%eax
c010c41e:	83 f8 03             	cmp    $0x3,%eax
c010c421:	75 23                	jne    c010c446 <do_exit+0x1c8>
                if (initproc->wait_state == WT_CHILD) {
c010c423:	a1 24 20 15 c0       	mov    0xc0152024,%eax
c010c428:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010c42e:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c010c433:	75 11                	jne    c010c446 <do_exit+0x1c8>
                    wakeup_proc(initproc);
c010c435:	a1 24 20 15 c0       	mov    0xc0152024,%eax
c010c43a:	83 ec 0c             	sub    $0xc,%esp
c010c43d:	50                   	push   %eax
c010c43e:	e8 99 13 00 00       	call   c010d7dc <wakeup_proc>
c010c443:	83 c4 10             	add    $0x10,%esp
    {
        proc = current->parent;
        if (proc->wait_state == WT_CHILD) {
            wakeup_proc(proc);
        }
        while (current->cptr != NULL) {
c010c446:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010c44b:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010c451:	85 c0                	test   %eax,%eax
c010c453:	0f 85 42 ff ff ff    	jne    c010c39b <do_exit+0x11d>
                    wakeup_proc(initproc);
                }
            }
        }
    }
    local_intr_restore(intr_flag);
c010c459:	83 ec 0c             	sub    $0xc,%esp
c010c45c:	ff 75 f0             	pushl  -0x10(%ebp)
c010c45f:	e8 cd f0 ff ff       	call   c010b531 <__intr_restore>
c010c464:	83 c4 10             	add    $0x10,%esp
    
    schedule();
c010c467:	e8 00 14 00 00       	call   c010d86c <schedule>
    panic("do_exit will not return!! %d.\n", current->pid);
c010c46c:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010c471:	8b 40 04             	mov    0x4(%eax),%eax
c010c474:	50                   	push   %eax
c010c475:	68 04 6d 11 c0       	push   $0xc0116d04
c010c47a:	68 58 02 00 00       	push   $0x258
c010c47f:	68 8c 6c 11 c0       	push   $0xc0116c8c
c010c484:	e8 64 40 ff ff       	call   c01004ed <__panic>

c010c489 <load_icode_read>:
}

//load_icode_read is used by load_icode in LAB8
static int
load_icode_read(int fd, void *buf, size_t len, off_t offset) {
c010c489:	55                   	push   %ebp
c010c48a:	89 e5                	mov    %esp,%ebp
c010c48c:	83 ec 18             	sub    $0x18,%esp
    int ret;
    if ((ret = sysfile_seek(fd, offset, LSEEK_SET)) != 0) {
c010c48f:	83 ec 04             	sub    $0x4,%esp
c010c492:	6a 00                	push   $0x0
c010c494:	ff 75 14             	pushl  0x14(%ebp)
c010c497:	ff 75 08             	pushl  0x8(%ebp)
c010c49a:	e8 fa d9 ff ff       	call   c0109e99 <sysfile_seek>
c010c49f:	83 c4 10             	add    $0x10,%esp
c010c4a2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c4a5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c4a9:	74 05                	je     c010c4b0 <load_icode_read+0x27>
        return ret;
c010c4ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c4ae:	eb 33                	jmp    c010c4e3 <load_icode_read+0x5a>
    }
    if ((ret = sysfile_read(fd, buf, len)) != len) {
c010c4b0:	83 ec 04             	sub    $0x4,%esp
c010c4b3:	ff 75 10             	pushl  0x10(%ebp)
c010c4b6:	ff 75 0c             	pushl  0xc(%ebp)
c010c4b9:	ff 75 08             	pushl  0x8(%ebp)
c010c4bc:	e8 28 d7 ff ff       	call   c0109be9 <sysfile_read>
c010c4c1:	83 c4 10             	add    $0x10,%esp
c010c4c4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c4c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c4ca:	3b 45 10             	cmp    0x10(%ebp),%eax
c010c4cd:	74 0f                	je     c010c4de <load_icode_read+0x55>
        return (ret < 0) ? ret : -1;
c010c4cf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010c4d4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c4d8:	0f 48 45 f4          	cmovs  -0xc(%ebp),%eax
c010c4dc:	eb 05                	jmp    c010c4e3 <load_icode_read+0x5a>
    }
    return 0;
c010c4de:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c4e3:	c9                   	leave  
c010c4e4:	c3                   	ret    

c010c4e5 <load_icode>:

// load_icode -  called by sys_exec-->do_execve
  
static int
load_icode(int fd, int argc, char **kargv) {
c010c4e5:	55                   	push   %ebp
c010c4e6:	89 e5                	mov    %esp,%ebp
c010c4e8:	53                   	push   %ebx
c010c4e9:	81 ec c4 00 00 00    	sub    $0xc4,%esp
     * (5) setup current process's mm, cr3, reset pgidr (using lcr3 MARCO)
     * (6) setup uargc and uargv in user stacks
     * (7) setup trapframe for user environment
     * (8) if up steps failed, you should cleanup the env.
     */
    assert(argc >= 0 && argc <= EXEC_MAX_ARG_NUM);
c010c4ef:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010c4f3:	78 06                	js     c010c4fb <load_icode+0x16>
c010c4f5:	83 7d 0c 20          	cmpl   $0x20,0xc(%ebp)
c010c4f9:	7e 19                	jle    c010c514 <load_icode+0x2f>
c010c4fb:	68 24 6d 11 c0       	push   $0xc0116d24
c010c500:	68 b3 6c 11 c0       	push   $0xc0116cb3
c010c505:	68 84 02 00 00       	push   $0x284
c010c50a:	68 8c 6c 11 c0       	push   $0xc0116c8c
c010c50f:	e8 d9 3f ff ff       	call   c01004ed <__panic>
    if (current->mm != NULL) {
c010c514:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010c519:	8b 40 18             	mov    0x18(%eax),%eax
c010c51c:	85 c0                	test   %eax,%eax
c010c51e:	74 17                	je     c010c537 <load_icode+0x52>
        panic("load_icode: current->mm must be empty.\n");
c010c520:	83 ec 04             	sub    $0x4,%esp
c010c523:	68 4c 6d 11 c0       	push   $0xc0116d4c
c010c528:	68 86 02 00 00       	push   $0x286
c010c52d:	68 8c 6c 11 c0       	push   $0xc0116c8c
c010c532:	e8 b6 3f ff ff       	call   c01004ed <__panic>
    }

    int ret = -E_NO_MEM;
c010c537:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    struct mm_struct *mm;
    //(1) create a new mm for current process
    if ((mm = mm_create()) == NULL) {
c010c53e:	e8 c7 71 ff ff       	call   c010370a <mm_create>
c010c543:	89 45 c8             	mov    %eax,-0x38(%ebp)
c010c546:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c010c54a:	0f 84 fc 06 00 00    	je     c010cc4c <load_icode+0x767>
        goto bad_mm;
    }
    //(2) create a new PDT, and mm->pgdir= kernel virtual addr of PDT
    if (setup_pgdir(mm) != 0) {
c010c550:	83 ec 0c             	sub    $0xc,%esp
c010c553:	ff 75 c8             	pushl  -0x38(%ebp)
c010c556:	e8 61 f8 ff ff       	call   c010bdbc <setup_pgdir>
c010c55b:	83 c4 10             	add    $0x10,%esp
c010c55e:	85 c0                	test   %eax,%eax
c010c560:	0f 85 d5 06 00 00    	jne    c010cc3b <load_icode+0x756>
        goto bad_pgdir_cleanup_mm;
    }
    // (3) copy TEXT/DATA/BSS parts in binary to memory space of process
    struct Page *page;
    struct elfhdr __elf, *elf = &__elf;
c010c566:	8d 85 64 ff ff ff    	lea    -0x9c(%ebp),%eax
c010c56c:	89 45 c4             	mov    %eax,-0x3c(%ebp)
    
    //  *    (3.1) read raw data content in file and resolve elfhdr
    if ((ret = load_icode_read(fd, elf, sizeof(struct elfhdr), 0)) != 0) {
c010c56f:	6a 00                	push   $0x0
c010c571:	6a 34                	push   $0x34
c010c573:	ff 75 c4             	pushl  -0x3c(%ebp)
c010c576:	ff 75 08             	pushl  0x8(%ebp)
c010c579:	e8 0b ff ff ff       	call   c010c489 <load_icode_read>
c010c57e:	83 c4 10             	add    $0x10,%esp
c010c581:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c584:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c588:	0f 85 9c 06 00 00    	jne    c010cc2a <load_icode+0x745>
        goto bad_elf_cleanup_pgdir;
    }

    if (elf->e_magic != ELF_MAGIC) {
c010c58e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010c591:	8b 00                	mov    (%eax),%eax
c010c593:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
c010c598:	74 0c                	je     c010c5a6 <load_icode+0xc1>
        ret = -E_INVAL_ELF;
c010c59a:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
        goto bad_elf_cleanup_pgdir;
c010c5a1:	e9 85 06 00 00       	jmp    c010cc2b <load_icode+0x746>
    }

    //  *    (3.2) read raw data content in file and resolve proghdr based on info in elfhdr
    struct proghdr __ph, *ph = &__ph;
c010c5a6:	8d 85 44 ff ff ff    	lea    -0xbc(%ebp),%eax
c010c5ac:	89 45 c0             	mov    %eax,-0x40(%ebp)
    uint32_t vm_flags, perm, phnum;
    for (phnum = 0; phnum < elf->e_phnum; phnum ++) {
c010c5af:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
c010c5b6:	e9 2e 03 00 00       	jmp    c010c8e9 <load_icode+0x404>
        off_t phoff = elf->e_phoff + sizeof(struct proghdr) * phnum;
c010c5bb:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010c5be:	8b 40 1c             	mov    0x1c(%eax),%eax
c010c5c1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010c5c4:	c1 e2 05             	shl    $0x5,%edx
c010c5c7:	01 d0                	add    %edx,%eax
c010c5c9:	89 45 bc             	mov    %eax,-0x44(%ebp)
        // read
        if ((ret = load_icode_read(fd, ph, sizeof(struct proghdr), phoff)) != 0) {
c010c5cc:	ff 75 bc             	pushl  -0x44(%ebp)
c010c5cf:	6a 20                	push   $0x20
c010c5d1:	ff 75 c0             	pushl  -0x40(%ebp)
c010c5d4:	ff 75 08             	pushl  0x8(%ebp)
c010c5d7:	e8 ad fe ff ff       	call   c010c489 <load_icode_read>
c010c5dc:	83 c4 10             	add    $0x10,%esp
c010c5df:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c5e2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c5e6:	0f 85 24 06 00 00    	jne    c010cc10 <load_icode+0x72b>
            goto bad_cleanup_mmap;
        }
        if (ph->p_type != ELF_PT_LOAD) {
c010c5ec:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010c5ef:	8b 00                	mov    (%eax),%eax
c010c5f1:	83 f8 01             	cmp    $0x1,%eax
c010c5f4:	0f 85 e4 02 00 00    	jne    c010c8de <load_icode+0x3f9>
            continue ;
        }
        if (ph->p_filesz > ph->p_memsz) {
c010c5fa:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010c5fd:	8b 50 10             	mov    0x10(%eax),%edx
c010c600:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010c603:	8b 40 14             	mov    0x14(%eax),%eax
c010c606:	39 c2                	cmp    %eax,%edx
c010c608:	76 0c                	jbe    c010c616 <load_icode+0x131>
            ret = -E_INVAL_ELF;
c010c60a:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
            goto bad_cleanup_mmap;
c010c611:	e9 04 06 00 00       	jmp    c010cc1a <load_icode+0x735>
        }
        if (ph->p_filesz == 0) {
c010c616:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010c619:	8b 40 10             	mov    0x10(%eax),%eax
c010c61c:	85 c0                	test   %eax,%eax
c010c61e:	0f 84 bd 02 00 00    	je     c010c8e1 <load_icode+0x3fc>
            continue ;
        }

        //  *    (3.3) call mm_map to build vma related to TEXT/DATA
        vm_flags = 0, perm = PTE_U;
c010c624:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c010c62b:	c7 45 e8 04 00 00 00 	movl   $0x4,-0x18(%ebp)
        if (ph->p_flags & ELF_PF_X) vm_flags |= VM_EXEC;
c010c632:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010c635:	8b 40 18             	mov    0x18(%eax),%eax
c010c638:	83 e0 01             	and    $0x1,%eax
c010c63b:	85 c0                	test   %eax,%eax
c010c63d:	74 04                	je     c010c643 <load_icode+0x15e>
c010c63f:	83 4d ec 04          	orl    $0x4,-0x14(%ebp)
        if (ph->p_flags & ELF_PF_W) vm_flags |= VM_WRITE;
c010c643:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010c646:	8b 40 18             	mov    0x18(%eax),%eax
c010c649:	83 e0 02             	and    $0x2,%eax
c010c64c:	85 c0                	test   %eax,%eax
c010c64e:	74 04                	je     c010c654 <load_icode+0x16f>
c010c650:	83 4d ec 02          	orl    $0x2,-0x14(%ebp)
        if (ph->p_flags & ELF_PF_R) vm_flags |= VM_READ;
c010c654:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010c657:	8b 40 18             	mov    0x18(%eax),%eax
c010c65a:	83 e0 04             	and    $0x4,%eax
c010c65d:	85 c0                	test   %eax,%eax
c010c65f:	74 04                	je     c010c665 <load_icode+0x180>
c010c661:	83 4d ec 01          	orl    $0x1,-0x14(%ebp)
        if (vm_flags & VM_WRITE) perm |= PTE_W;
c010c665:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c668:	83 e0 02             	and    $0x2,%eax
c010c66b:	85 c0                	test   %eax,%eax
c010c66d:	74 04                	je     c010c673 <load_icode+0x18e>
c010c66f:	83 4d e8 02          	orl    $0x2,-0x18(%ebp)
        if ((ret = mm_map(mm, ph->p_va, ph->p_memsz, vm_flags, NULL)) != 0) {
c010c673:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010c676:	8b 50 14             	mov    0x14(%eax),%edx
c010c679:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010c67c:	8b 40 08             	mov    0x8(%eax),%eax
c010c67f:	83 ec 0c             	sub    $0xc,%esp
c010c682:	6a 00                	push   $0x0
c010c684:	ff 75 ec             	pushl  -0x14(%ebp)
c010c687:	52                   	push   %edx
c010c688:	50                   	push   %eax
c010c689:	ff 75 c8             	pushl  -0x38(%ebp)
c010c68c:	e8 44 74 ff ff       	call   c0103ad5 <mm_map>
c010c691:	83 c4 20             	add    $0x20,%esp
c010c694:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c697:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c69b:	0f 85 72 05 00 00    	jne    c010cc13 <load_icode+0x72e>
            goto bad_cleanup_mmap;
        }

        //  *    (3.4) callpgdir_alloc_page to allocate page for TEXT/DATA, read contents in file
        //  *          and copy them into the new allocated pages
        off_t offset = ph->p_offset;
c010c6a1:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010c6a4:	8b 40 04             	mov    0x4(%eax),%eax
c010c6a7:	89 45 e0             	mov    %eax,-0x20(%ebp)
        size_t off, size;
        uintptr_t start = ph->p_va, end, la = ROUNDDOWN(start, PGSIZE);
c010c6aa:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010c6ad:	8b 40 08             	mov    0x8(%eax),%eax
c010c6b0:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010c6b3:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010c6b6:	89 45 b8             	mov    %eax,-0x48(%ebp)
c010c6b9:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010c6bc:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010c6c1:	89 45 d4             	mov    %eax,-0x2c(%ebp)

        ret = -E_NO_MEM;
c010c6c4:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

        end = ph->p_va + ph->p_filesz;
c010c6cb:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010c6ce:	8b 50 08             	mov    0x8(%eax),%edx
c010c6d1:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010c6d4:	8b 40 10             	mov    0x10(%eax),%eax
c010c6d7:	01 d0                	add    %edx,%eax
c010c6d9:	89 45 b4             	mov    %eax,-0x4c(%ebp)
        while (start < end) {
c010c6dc:	e9 9e 00 00 00       	jmp    c010c77f <load_icode+0x29a>
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
c010c6e1:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010c6e4:	8b 40 0c             	mov    0xc(%eax),%eax
c010c6e7:	83 ec 04             	sub    $0x4,%esp
c010c6ea:	ff 75 e8             	pushl  -0x18(%ebp)
c010c6ed:	ff 75 d4             	pushl  -0x2c(%ebp)
c010c6f0:	50                   	push   %eax
c010c6f1:	e8 8c b8 ff ff       	call   c0107f82 <pgdir_alloc_page>
c010c6f6:	83 c4 10             	add    $0x10,%esp
c010c6f9:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c6fc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010c700:	75 0c                	jne    c010c70e <load_icode+0x229>
                ret = -E_NO_MEM;
c010c702:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
                goto bad_cleanup_mmap;
c010c709:	e9 0c 05 00 00       	jmp    c010cc1a <load_icode+0x735>
            }
            off = start - la, size = PGSIZE - off, la += PGSIZE;
c010c70e:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010c711:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c010c714:	89 45 b0             	mov    %eax,-0x50(%ebp)
c010c717:	b8 00 10 00 00       	mov    $0x1000,%eax
c010c71c:	2b 45 b0             	sub    -0x50(%ebp),%eax
c010c71f:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010c722:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
            if (end < la) {
c010c729:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010c72c:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010c72f:	73 09                	jae    c010c73a <load_icode+0x255>
                size -= la - end;
c010c731:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010c734:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c010c737:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            // read
            if ((ret = load_icode_read(fd, page2kva(page) + off, size, offset)) != 0) {
c010c73a:	83 ec 0c             	sub    $0xc,%esp
c010c73d:	ff 75 f0             	pushl  -0x10(%ebp)
c010c740:	e8 63 ee ff ff       	call   c010b5a8 <page2kva>
c010c745:	83 c4 10             	add    $0x10,%esp
c010c748:	89 c2                	mov    %eax,%edx
c010c74a:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010c74d:	01 d0                	add    %edx,%eax
c010c74f:	ff 75 e0             	pushl  -0x20(%ebp)
c010c752:	ff 75 dc             	pushl  -0x24(%ebp)
c010c755:	50                   	push   %eax
c010c756:	ff 75 08             	pushl  0x8(%ebp)
c010c759:	e8 2b fd ff ff       	call   c010c489 <load_icode_read>
c010c75e:	83 c4 10             	add    $0x10,%esp
c010c761:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c764:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c768:	0f 85 a8 04 00 00    	jne    c010cc16 <load_icode+0x731>
                goto bad_cleanup_mmap;
            }
            start += size, offset += size;
c010c76e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c771:	01 45 d8             	add    %eax,-0x28(%ebp)
c010c774:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010c777:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c77a:	01 d0                	add    %edx,%eax
c010c77c:	89 45 e0             	mov    %eax,-0x20(%ebp)
        uintptr_t start = ph->p_va, end, la = ROUNDDOWN(start, PGSIZE);

        ret = -E_NO_MEM;

        end = ph->p_va + ph->p_filesz;
        while (start < end) {
c010c77f:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010c782:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
c010c785:	0f 82 56 ff ff ff    	jb     c010c6e1 <load_icode+0x1fc>
            }
            start += size, offset += size;
        }

        //  *    (3.5) callpgdir_alloc_page to allocate pages for BSS, memset zero in these pages
        end = ph->p_va + ph->p_memsz;
c010c78b:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010c78e:	8b 50 08             	mov    0x8(%eax),%edx
c010c791:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010c794:	8b 40 14             	mov    0x14(%eax),%eax
c010c797:	01 d0                	add    %edx,%eax
c010c799:	89 45 b4             	mov    %eax,-0x4c(%ebp)
        if (start < la) {
c010c79c:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010c79f:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010c7a2:	0f 83 28 01 00 00    	jae    c010c8d0 <load_icode+0x3eb>
            /* ph->p_memsz == ph->p_filesz */
            if (start == end) {
c010c7a8:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010c7ab:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
c010c7ae:	0f 84 30 01 00 00    	je     c010c8e4 <load_icode+0x3ff>
                continue ;
            }
            off = start + PGSIZE - la, size = PGSIZE - off;
c010c7b4:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010c7b7:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c010c7ba:	05 00 10 00 00       	add    $0x1000,%eax
c010c7bf:	89 45 b0             	mov    %eax,-0x50(%ebp)
c010c7c2:	b8 00 10 00 00       	mov    $0x1000,%eax
c010c7c7:	2b 45 b0             	sub    -0x50(%ebp),%eax
c010c7ca:	89 45 dc             	mov    %eax,-0x24(%ebp)
            if (end < la) {
c010c7cd:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010c7d0:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010c7d3:	73 09                	jae    c010c7de <load_icode+0x2f9>
                size -= la - end;
c010c7d5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010c7d8:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c010c7db:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
c010c7de:	83 ec 0c             	sub    $0xc,%esp
c010c7e1:	ff 75 f0             	pushl  -0x10(%ebp)
c010c7e4:	e8 bf ed ff ff       	call   c010b5a8 <page2kva>
c010c7e9:	83 c4 10             	add    $0x10,%esp
c010c7ec:	89 c2                	mov    %eax,%edx
c010c7ee:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010c7f1:	01 d0                	add    %edx,%eax
c010c7f3:	83 ec 04             	sub    $0x4,%esp
c010c7f6:	ff 75 dc             	pushl  -0x24(%ebp)
c010c7f9:	6a 00                	push   $0x0
c010c7fb:	50                   	push   %eax
c010c7fc:	e8 61 72 00 00       	call   c0113a62 <memset>
c010c801:	83 c4 10             	add    $0x10,%esp
            start += size;
c010c804:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c807:	01 45 d8             	add    %eax,-0x28(%ebp)
            assert((end < la && start == end) || (end >= la && start == la));
c010c80a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010c80d:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010c810:	73 0c                	jae    c010c81e <load_icode+0x339>
c010c812:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010c815:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
c010c818:	0f 84 b2 00 00 00    	je     c010c8d0 <load_icode+0x3eb>
c010c81e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010c821:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010c824:	72 0c                	jb     c010c832 <load_icode+0x34d>
c010c826:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010c829:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010c82c:	0f 84 9e 00 00 00    	je     c010c8d0 <load_icode+0x3eb>
c010c832:	68 74 6d 11 c0       	push   $0xc0116d74
c010c837:	68 b3 6c 11 c0       	push   $0xc0116cb3
c010c83c:	68 e5 02 00 00       	push   $0x2e5
c010c841:	68 8c 6c 11 c0       	push   $0xc0116c8c
c010c846:	e8 a2 3c ff ff       	call   c01004ed <__panic>
        }
        while (start < end) {
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
c010c84b:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010c84e:	8b 40 0c             	mov    0xc(%eax),%eax
c010c851:	83 ec 04             	sub    $0x4,%esp
c010c854:	ff 75 e8             	pushl  -0x18(%ebp)
c010c857:	ff 75 d4             	pushl  -0x2c(%ebp)
c010c85a:	50                   	push   %eax
c010c85b:	e8 22 b7 ff ff       	call   c0107f82 <pgdir_alloc_page>
c010c860:	83 c4 10             	add    $0x10,%esp
c010c863:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c866:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010c86a:	75 0c                	jne    c010c878 <load_icode+0x393>
                // change ret
                ret = -E_NO_MEM;
c010c86c:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
                goto bad_cleanup_mmap;
c010c873:	e9 a2 03 00 00       	jmp    c010cc1a <load_icode+0x735>
            }
            off = start - la, size = PGSIZE - off, la += PGSIZE;
c010c878:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010c87b:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c010c87e:	89 45 b0             	mov    %eax,-0x50(%ebp)
c010c881:	b8 00 10 00 00       	mov    $0x1000,%eax
c010c886:	2b 45 b0             	sub    -0x50(%ebp),%eax
c010c889:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010c88c:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
            if (end < la) {
c010c893:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010c896:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010c899:	73 09                	jae    c010c8a4 <load_icode+0x3bf>
                size -= la - end;
c010c89b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010c89e:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c010c8a1:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
c010c8a4:	83 ec 0c             	sub    $0xc,%esp
c010c8a7:	ff 75 f0             	pushl  -0x10(%ebp)
c010c8aa:	e8 f9 ec ff ff       	call   c010b5a8 <page2kva>
c010c8af:	83 c4 10             	add    $0x10,%esp
c010c8b2:	89 c2                	mov    %eax,%edx
c010c8b4:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010c8b7:	01 d0                	add    %edx,%eax
c010c8b9:	83 ec 04             	sub    $0x4,%esp
c010c8bc:	ff 75 dc             	pushl  -0x24(%ebp)
c010c8bf:	6a 00                	push   $0x0
c010c8c1:	50                   	push   %eax
c010c8c2:	e8 9b 71 00 00       	call   c0113a62 <memset>
c010c8c7:	83 c4 10             	add    $0x10,%esp
            start += size;
c010c8ca:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c8cd:	01 45 d8             	add    %eax,-0x28(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
            start += size;
            assert((end < la && start == end) || (end >= la && start == la));
        }
        while (start < end) {
c010c8d0:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010c8d3:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
c010c8d6:	0f 82 6f ff ff ff    	jb     c010c84b <load_icode+0x366>
c010c8dc:	eb 07                	jmp    c010c8e5 <load_icode+0x400>
        // read
        if ((ret = load_icode_read(fd, ph, sizeof(struct proghdr), phoff)) != 0) {
            goto bad_cleanup_mmap;
        }
        if (ph->p_type != ELF_PT_LOAD) {
            continue ;
c010c8de:	90                   	nop
c010c8df:	eb 04                	jmp    c010c8e5 <load_icode+0x400>
        if (ph->p_filesz > ph->p_memsz) {
            ret = -E_INVAL_ELF;
            goto bad_cleanup_mmap;
        }
        if (ph->p_filesz == 0) {
            continue ;
c010c8e1:	90                   	nop
c010c8e2:	eb 01                	jmp    c010c8e5 <load_icode+0x400>
        //  *    (3.5) callpgdir_alloc_page to allocate pages for BSS, memset zero in these pages
        end = ph->p_va + ph->p_memsz;
        if (start < la) {
            /* ph->p_memsz == ph->p_filesz */
            if (start == end) {
                continue ;
c010c8e4:	90                   	nop
    }

    //  *    (3.2) read raw data content in file and resolve proghdr based on info in elfhdr
    struct proghdr __ph, *ph = &__ph;
    uint32_t vm_flags, perm, phnum;
    for (phnum = 0; phnum < elf->e_phnum; phnum ++) {
c010c8e5:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
c010c8e9:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010c8ec:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c010c8f0:	0f b7 c0             	movzwl %ax,%eax
c010c8f3:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
c010c8f6:	0f 87 bf fc ff ff    	ja     c010c5bb <load_icode+0xd6>
            memset(page2kva(page) + off, 0, size);
            start += size;
        }
    }
    // close file
    sysfile_close(fd);
c010c8fc:	83 ec 0c             	sub    $0xc,%esp
c010c8ff:	ff 75 08             	pushl  0x8(%ebp)
c010c902:	e8 cc d2 ff ff       	call   c0109bd3 <sysfile_close>
c010c907:	83 c4 10             	add    $0x10,%esp

    //(4) call mm_map to setup user stack, and put parameters into user stack
    vm_flags = VM_READ | VM_WRITE | VM_STACK;
c010c90a:	c7 45 ec 0b 00 00 00 	movl   $0xb,-0x14(%ebp)
    if ((ret = mm_map(mm, USTACKTOP - USTACKSIZE, USTACKSIZE, vm_flags, NULL)) != 0) {
c010c911:	83 ec 0c             	sub    $0xc,%esp
c010c914:	6a 00                	push   $0x0
c010c916:	ff 75 ec             	pushl  -0x14(%ebp)
c010c919:	68 00 00 10 00       	push   $0x100000
c010c91e:	68 00 00 f0 af       	push   $0xaff00000
c010c923:	ff 75 c8             	pushl  -0x38(%ebp)
c010c926:	e8 aa 71 ff ff       	call   c0103ad5 <mm_map>
c010c92b:	83 c4 20             	add    $0x20,%esp
c010c92e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c931:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c935:	0f 85 de 02 00 00    	jne    c010cc19 <load_icode+0x734>
        goto bad_cleanup_mmap;
    }
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-PGSIZE , PTE_USER) != NULL);
c010c93b:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010c93e:	8b 40 0c             	mov    0xc(%eax),%eax
c010c941:	83 ec 04             	sub    $0x4,%esp
c010c944:	6a 07                	push   $0x7
c010c946:	68 00 f0 ff af       	push   $0xaffff000
c010c94b:	50                   	push   %eax
c010c94c:	e8 31 b6 ff ff       	call   c0107f82 <pgdir_alloc_page>
c010c951:	83 c4 10             	add    $0x10,%esp
c010c954:	85 c0                	test   %eax,%eax
c010c956:	75 19                	jne    c010c971 <load_icode+0x48c>
c010c958:	68 b0 6d 11 c0       	push   $0xc0116db0
c010c95d:	68 b3 6c 11 c0       	push   $0xc0116cb3
c010c962:	68 fd 02 00 00       	push   $0x2fd
c010c967:	68 8c 6c 11 c0       	push   $0xc0116c8c
c010c96c:	e8 7c 3b ff ff       	call   c01004ed <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-2*PGSIZE , PTE_USER) != NULL);
c010c971:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010c974:	8b 40 0c             	mov    0xc(%eax),%eax
c010c977:	83 ec 04             	sub    $0x4,%esp
c010c97a:	6a 07                	push   $0x7
c010c97c:	68 00 e0 ff af       	push   $0xafffe000
c010c981:	50                   	push   %eax
c010c982:	e8 fb b5 ff ff       	call   c0107f82 <pgdir_alloc_page>
c010c987:	83 c4 10             	add    $0x10,%esp
c010c98a:	85 c0                	test   %eax,%eax
c010c98c:	75 19                	jne    c010c9a7 <load_icode+0x4c2>
c010c98e:	68 f4 6d 11 c0       	push   $0xc0116df4
c010c993:	68 b3 6c 11 c0       	push   $0xc0116cb3
c010c998:	68 fe 02 00 00       	push   $0x2fe
c010c99d:	68 8c 6c 11 c0       	push   $0xc0116c8c
c010c9a2:	e8 46 3b ff ff       	call   c01004ed <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-3*PGSIZE , PTE_USER) != NULL);
c010c9a7:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010c9aa:	8b 40 0c             	mov    0xc(%eax),%eax
c010c9ad:	83 ec 04             	sub    $0x4,%esp
c010c9b0:	6a 07                	push   $0x7
c010c9b2:	68 00 d0 ff af       	push   $0xafffd000
c010c9b7:	50                   	push   %eax
c010c9b8:	e8 c5 b5 ff ff       	call   c0107f82 <pgdir_alloc_page>
c010c9bd:	83 c4 10             	add    $0x10,%esp
c010c9c0:	85 c0                	test   %eax,%eax
c010c9c2:	75 19                	jne    c010c9dd <load_icode+0x4f8>
c010c9c4:	68 38 6e 11 c0       	push   $0xc0116e38
c010c9c9:	68 b3 6c 11 c0       	push   $0xc0116cb3
c010c9ce:	68 ff 02 00 00       	push   $0x2ff
c010c9d3:	68 8c 6c 11 c0       	push   $0xc0116c8c
c010c9d8:	e8 10 3b ff ff       	call   c01004ed <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-4*PGSIZE , PTE_USER) != NULL);
c010c9dd:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010c9e0:	8b 40 0c             	mov    0xc(%eax),%eax
c010c9e3:	83 ec 04             	sub    $0x4,%esp
c010c9e6:	6a 07                	push   $0x7
c010c9e8:	68 00 c0 ff af       	push   $0xafffc000
c010c9ed:	50                   	push   %eax
c010c9ee:	e8 8f b5 ff ff       	call   c0107f82 <pgdir_alloc_page>
c010c9f3:	83 c4 10             	add    $0x10,%esp
c010c9f6:	85 c0                	test   %eax,%eax
c010c9f8:	75 19                	jne    c010ca13 <load_icode+0x52e>
c010c9fa:	68 7c 6e 11 c0       	push   $0xc0116e7c
c010c9ff:	68 b3 6c 11 c0       	push   $0xc0116cb3
c010ca04:	68 00 03 00 00       	push   $0x300
c010ca09:	68 8c 6c 11 c0       	push   $0xc0116c8c
c010ca0e:	e8 da 3a ff ff       	call   c01004ed <__panic>
    
    //(5) setup current process's mm, cr3, reset pgidr (using lcr3 MARCO)
    mm_count_inc(mm);
c010ca13:	83 ec 0c             	sub    $0xc,%esp
c010ca16:	ff 75 c8             	pushl  -0x38(%ebp)
c010ca19:	e8 0e ec ff ff       	call   c010b62c <mm_count_inc>
c010ca1e:	83 c4 10             	add    $0x10,%esp
    current->mm = mm;
c010ca21:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010ca26:	8b 55 c8             	mov    -0x38(%ebp),%edx
c010ca29:	89 50 18             	mov    %edx,0x18(%eax)
    current->cr3 = PADDR(mm->pgdir);
c010ca2c:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010ca31:	8b 55 c8             	mov    -0x38(%ebp),%edx
c010ca34:	8b 52 0c             	mov    0xc(%edx),%edx
c010ca37:	89 55 ac             	mov    %edx,-0x54(%ebp)
c010ca3a:	81 7d ac ff ff ff bf 	cmpl   $0xbfffffff,-0x54(%ebp)
c010ca41:	77 17                	ja     c010ca5a <load_icode+0x575>
c010ca43:	ff 75 ac             	pushl  -0x54(%ebp)
c010ca46:	68 68 6c 11 c0       	push   $0xc0116c68
c010ca4b:	68 05 03 00 00       	push   $0x305
c010ca50:	68 8c 6c 11 c0       	push   $0xc0116c8c
c010ca55:	e8 93 3a ff ff       	call   c01004ed <__panic>
c010ca5a:	8b 55 ac             	mov    -0x54(%ebp),%edx
c010ca5d:	81 c2 00 00 00 40    	add    $0x40000000,%edx
c010ca63:	89 50 40             	mov    %edx,0x40(%eax)
    lcr3(PADDR(mm->pgdir));
c010ca66:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010ca69:	8b 40 0c             	mov    0xc(%eax),%eax
c010ca6c:	89 45 a8             	mov    %eax,-0x58(%ebp)
c010ca6f:	81 7d a8 ff ff ff bf 	cmpl   $0xbfffffff,-0x58(%ebp)
c010ca76:	77 17                	ja     c010ca8f <load_icode+0x5aa>
c010ca78:	ff 75 a8             	pushl  -0x58(%ebp)
c010ca7b:	68 68 6c 11 c0       	push   $0xc0116c68
c010ca80:	68 06 03 00 00       	push   $0x306
c010ca85:	68 8c 6c 11 c0       	push   $0xc0116c8c
c010ca8a:	e8 5e 3a ff ff       	call   c01004ed <__panic>
c010ca8f:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010ca92:	05 00 00 00 40       	add    $0x40000000,%eax
c010ca97:	89 45 98             	mov    %eax,-0x68(%ebp)
c010ca9a:	8b 45 98             	mov    -0x68(%ebp),%eax
c010ca9d:	0f 22 d8             	mov    %eax,%cr3

    //  * (6) setup uargc and uargv in user stacks
    // count size of all arg
    uint32_t argv_size = 0;
c010caa0:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
    uint32_t i;
    for (i = 0; i < argc; i ++) {
c010caa7:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
c010caae:	eb 2c                	jmp    c010cadc <load_icode+0x5f7>
        argv_size += strnlen(kargv[i], EXEC_MAX_ARG_LEN + 1)+1;
c010cab0:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010cab3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010caba:	8b 45 10             	mov    0x10(%ebp),%eax
c010cabd:	01 d0                	add    %edx,%eax
c010cabf:	8b 00                	mov    (%eax),%eax
c010cac1:	83 ec 08             	sub    $0x8,%esp
c010cac4:	68 00 10 00 00       	push   $0x1000
c010cac9:	50                   	push   %eax
c010caca:	e8 61 6c 00 00       	call   c0113730 <strnlen>
c010cacf:	83 c4 10             	add    $0x10,%esp
c010cad2:	83 c0 01             	add    $0x1,%eax
c010cad5:	01 45 d0             	add    %eax,-0x30(%ebp)

    //  * (6) setup uargc and uargv in user stacks
    // count size of all arg
    uint32_t argv_size = 0;
    uint32_t i;
    for (i = 0; i < argc; i ++) {
c010cad8:	83 45 cc 01          	addl   $0x1,-0x34(%ebp)
c010cadc:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cadf:	39 45 cc             	cmp    %eax,-0x34(%ebp)
c010cae2:	72 cc                	jb     c010cab0 <load_icode+0x5cb>
        argv_size += strnlen(kargv[i], EXEC_MAX_ARG_LEN + 1)+1;
    }

    // make place for real args in high addr
    uintptr_t stacktop = USTACKTOP - (argv_size/sizeof(long) + 1) * sizeof(long);
c010cae4:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010cae7:	c1 e8 02             	shr    $0x2,%eax
c010caea:	89 c2                	mov    %eax,%edx
c010caec:	b8 00 00 00 00       	mov    $0x0,%eax
c010caf1:	29 d0                	sub    %edx,%eax
c010caf3:	c1 e0 02             	shl    $0x2,%eax
c010caf6:	2d 04 00 00 50       	sub    $0x50000004,%eax
c010cafb:	89 45 a4             	mov    %eax,-0x5c(%ebp)
    char** uargv=(char **)(stacktop - argc * sizeof(char *));
c010cafe:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cb01:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010cb08:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c010cb0b:	29 d0                	sub    %edx,%eax
c010cb0d:	89 45 a0             	mov    %eax,-0x60(%ebp)
    
    // copy argv, low addr to high addr
    argv_size = 0;
c010cb10:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
    for (i = 0; i < argc; i ++) {
c010cb17:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
c010cb1e:	eb 64                	jmp    c010cb84 <load_icode+0x69f>
        uargv[i] = strcpy((char *)(stacktop + argv_size), kargv[i]);
c010cb20:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010cb23:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010cb2a:	8b 45 a0             	mov    -0x60(%ebp),%eax
c010cb2d:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
c010cb30:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010cb33:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010cb3a:	8b 45 10             	mov    0x10(%ebp),%eax
c010cb3d:	01 d0                	add    %edx,%eax
c010cb3f:	8b 00                	mov    (%eax),%eax
c010cb41:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
c010cb44:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010cb47:	01 ca                	add    %ecx,%edx
c010cb49:	83 ec 08             	sub    $0x8,%esp
c010cb4c:	50                   	push   %eax
c010cb4d:	52                   	push   %edx
c010cb4e:	e8 36 6c 00 00       	call   c0113789 <strcpy>
c010cb53:	83 c4 10             	add    $0x10,%esp
c010cb56:	89 03                	mov    %eax,(%ebx)
        argv_size +=  strnlen(kargv[i], EXEC_MAX_ARG_LEN + 1) + 1;  // '1' for '\0'
c010cb58:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010cb5b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010cb62:	8b 45 10             	mov    0x10(%ebp),%eax
c010cb65:	01 d0                	add    %edx,%eax
c010cb67:	8b 00                	mov    (%eax),%eax
c010cb69:	83 ec 08             	sub    $0x8,%esp
c010cb6c:	68 00 10 00 00       	push   $0x1000
c010cb71:	50                   	push   %eax
c010cb72:	e8 b9 6b 00 00       	call   c0113730 <strnlen>
c010cb77:	83 c4 10             	add    $0x10,%esp
c010cb7a:	83 c0 01             	add    $0x1,%eax
c010cb7d:	01 45 d0             	add    %eax,-0x30(%ebp)
    uintptr_t stacktop = USTACKTOP - (argv_size/sizeof(long) + 1) * sizeof(long);
    char** uargv=(char **)(stacktop - argc * sizeof(char *));
    
    // copy argv, low addr to high addr
    argv_size = 0;
    for (i = 0; i < argc; i ++) {
c010cb80:	83 45 cc 01          	addl   $0x1,-0x34(%ebp)
c010cb84:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cb87:	39 45 cc             	cmp    %eax,-0x34(%ebp)
c010cb8a:	72 94                	jb     c010cb20 <load_icode+0x63b>
        uargv[i] = strcpy((char *)(stacktop + argv_size), kargv[i]);
        argv_size +=  strnlen(kargv[i], EXEC_MAX_ARG_LEN + 1) + 1;  // '1' for '\0'
    }
    
    // save argc to esp(stack top)
    stacktop = (uintptr_t)uargv - sizeof(int);
c010cb8c:	8b 45 a0             	mov    -0x60(%ebp),%eax
c010cb8f:	83 e8 04             	sub    $0x4,%eax
c010cb92:	89 45 a4             	mov    %eax,-0x5c(%ebp)
    *(int *)stacktop = argc;
c010cb95:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c010cb98:	8b 55 0c             	mov    0xc(%ebp),%edx
c010cb9b:	89 10                	mov    %edx,(%eax)

    //(7) setup trapframe for user environment
    struct trapframe *tf = current->tf;
c010cb9d:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010cba2:	8b 40 3c             	mov    0x3c(%eax),%eax
c010cba5:	89 45 9c             	mov    %eax,-0x64(%ebp)
    memset(tf, 0, sizeof(struct trapframe));
c010cba8:	83 ec 04             	sub    $0x4,%esp
c010cbab:	6a 4c                	push   $0x4c
c010cbad:	6a 00                	push   $0x0
c010cbaf:	ff 75 9c             	pushl  -0x64(%ebp)
c010cbb2:	e8 ab 6e 00 00       	call   c0113a62 <memset>
c010cbb7:	83 c4 10             	add    $0x10,%esp
     *          tf_ds=tf_es=tf_ss should be USER_DS segment
     *          tf_esp should be the top addr of user stack (USTACKTOP)
     *          tf_eip should be the entry point of this binary program (elf->e_entry)
     *          tf_eflags should be set to enable computer to produce Interrupt
     */
    tf->tf_cs = USER_CS;
c010cbba:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010cbbd:	66 c7 40 3c 1b 00    	movw   $0x1b,0x3c(%eax)
    tf->tf_ds = USER_DS;
c010cbc3:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010cbc6:	66 c7 40 2c 23 00    	movw   $0x23,0x2c(%eax)
    tf->tf_es = USER_DS;
c010cbcc:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010cbcf:	66 c7 40 28 23 00    	movw   $0x23,0x28(%eax)
    tf->tf_ss = USER_DS;
c010cbd5:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010cbd8:	66 c7 40 48 23 00    	movw   $0x23,0x48(%eax)
    tf->tf_esp = stacktop;      // NOTE: LAB8, new user stack top
c010cbde:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010cbe1:	8b 55 a4             	mov    -0x5c(%ebp),%edx
c010cbe4:	89 50 44             	mov    %edx,0x44(%eax)
    tf->tf_eip = elf->e_entry;
c010cbe7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010cbea:	8b 50 18             	mov    0x18(%eax),%edx
c010cbed:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010cbf0:	89 50 38             	mov    %edx,0x38(%eax)
    tf->tf_eflags |= FL_IF;     // enable intr
c010cbf3:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010cbf6:	8b 40 40             	mov    0x40(%eax),%eax
c010cbf9:	80 cc 02             	or     $0x2,%ah
c010cbfc:	89 c2                	mov    %eax,%edx
c010cbfe:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010cc01:	89 50 40             	mov    %edx,0x40(%eax)
    ret = 0;
c010cc04:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

out:
    return ret;
c010cc0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cc0e:	eb 3f                	jmp    c010cc4f <load_icode+0x76a>
    uint32_t vm_flags, perm, phnum;
    for (phnum = 0; phnum < elf->e_phnum; phnum ++) {
        off_t phoff = elf->e_phoff + sizeof(struct proghdr) * phnum;
        // read
        if ((ret = load_icode_read(fd, ph, sizeof(struct proghdr), phoff)) != 0) {
            goto bad_cleanup_mmap;
c010cc10:	90                   	nop
c010cc11:	eb 07                	jmp    c010cc1a <load_icode+0x735>
        if (ph->p_flags & ELF_PF_X) vm_flags |= VM_EXEC;
        if (ph->p_flags & ELF_PF_W) vm_flags |= VM_WRITE;
        if (ph->p_flags & ELF_PF_R) vm_flags |= VM_READ;
        if (vm_flags & VM_WRITE) perm |= PTE_W;
        if ((ret = mm_map(mm, ph->p_va, ph->p_memsz, vm_flags, NULL)) != 0) {
            goto bad_cleanup_mmap;
c010cc13:	90                   	nop
c010cc14:	eb 04                	jmp    c010cc1a <load_icode+0x735>
            if (end < la) {
                size -= la - end;
            }
            // read
            if ((ret = load_icode_read(fd, page2kva(page) + off, size, offset)) != 0) {
                goto bad_cleanup_mmap;
c010cc16:	90                   	nop
c010cc17:	eb 01                	jmp    c010cc1a <load_icode+0x735>
    sysfile_close(fd);

    //(4) call mm_map to setup user stack, and put parameters into user stack
    vm_flags = VM_READ | VM_WRITE | VM_STACK;
    if ((ret = mm_map(mm, USTACKTOP - USTACKSIZE, USTACKSIZE, vm_flags, NULL)) != 0) {
        goto bad_cleanup_mmap;
c010cc19:	90                   	nop
out:
    return ret;

    //  * (8) if up steps failed, you should cleanup the env.
bad_cleanup_mmap:
    exit_mmap(mm);
c010cc1a:	83 ec 0c             	sub    $0xc,%esp
c010cc1d:	ff 75 c8             	pushl  -0x38(%ebp)
c010cc20:	e8 9f 70 ff ff       	call   c0103cc4 <exit_mmap>
c010cc25:	83 c4 10             	add    $0x10,%esp
c010cc28:	eb 01                	jmp    c010cc2b <load_icode+0x746>
    struct Page *page;
    struct elfhdr __elf, *elf = &__elf;
    
    //  *    (3.1) read raw data content in file and resolve elfhdr
    if ((ret = load_icode_read(fd, elf, sizeof(struct elfhdr), 0)) != 0) {
        goto bad_elf_cleanup_pgdir;
c010cc2a:	90                   	nop

    //  * (8) if up steps failed, you should cleanup the env.
bad_cleanup_mmap:
    exit_mmap(mm);
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
c010cc2b:	83 ec 0c             	sub    $0xc,%esp
c010cc2e:	ff 75 c8             	pushl  -0x38(%ebp)
c010cc31:	e8 1f f2 ff ff       	call   c010be55 <put_pgdir>
c010cc36:	83 c4 10             	add    $0x10,%esp
c010cc39:	eb 01                	jmp    c010cc3c <load_icode+0x757>
    if ((mm = mm_create()) == NULL) {
        goto bad_mm;
    }
    //(2) create a new PDT, and mm->pgdir= kernel virtual addr of PDT
    if (setup_pgdir(mm) != 0) {
        goto bad_pgdir_cleanup_mm;
c010cc3b:	90                   	nop
bad_cleanup_mmap:
    exit_mmap(mm);
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
c010cc3c:	83 ec 0c             	sub    $0xc,%esp
c010cc3f:	ff 75 c8             	pushl  -0x38(%ebp)
c010cc42:	e8 ef 6d ff ff       	call   c0103a36 <mm_destroy>
c010cc47:	83 c4 10             	add    $0x10,%esp
bad_mm:
    goto out;
c010cc4a:	eb bf                	jmp    c010cc0b <load_icode+0x726>

    int ret = -E_NO_MEM;
    struct mm_struct *mm;
    //(1) create a new mm for current process
    if ((mm = mm_create()) == NULL) {
        goto bad_mm;
c010cc4c:	90                   	nop
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
bad_mm:
    goto out;
c010cc4d:	eb bc                	jmp    c010cc0b <load_icode+0x726>
}
c010cc4f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c010cc52:	c9                   	leave  
c010cc53:	c3                   	ret    

c010cc54 <put_kargv>:

// this function isn't very correct in LAB8
static void
put_kargv(int argc, char **kargv) {
c010cc54:	55                   	push   %ebp
c010cc55:	89 e5                	mov    %esp,%ebp
c010cc57:	83 ec 08             	sub    $0x8,%esp
    while (argc > 0) {
c010cc5a:	eb 21                	jmp    c010cc7d <put_kargv+0x29>
        kfree(kargv[-- argc]);
c010cc5c:	83 6d 08 01          	subl   $0x1,0x8(%ebp)
c010cc60:	8b 45 08             	mov    0x8(%ebp),%eax
c010cc63:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010cc6a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cc6d:	01 d0                	add    %edx,%eax
c010cc6f:	8b 00                	mov    (%eax),%eax
c010cc71:	83 ec 0c             	sub    $0xc,%esp
c010cc74:	50                   	push   %eax
c010cc75:	e8 a0 86 ff ff       	call   c010531a <kfree>
c010cc7a:	83 c4 10             	add    $0x10,%esp
}

// this function isn't very correct in LAB8
static void
put_kargv(int argc, char **kargv) {
    while (argc > 0) {
c010cc7d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010cc81:	7f d9                	jg     c010cc5c <put_kargv+0x8>
        kfree(kargv[-- argc]);
    }
}
c010cc83:	90                   	nop
c010cc84:	c9                   	leave  
c010cc85:	c3                   	ret    

c010cc86 <copy_kargv>:

static int
copy_kargv(struct mm_struct *mm, int argc, char **kargv, const char **argv) {
c010cc86:	55                   	push   %ebp
c010cc87:	89 e5                	mov    %esp,%ebp
c010cc89:	83 ec 18             	sub    $0x18,%esp
    int i, ret = -E_INVAL;
c010cc8c:	c7 45 f0 fd ff ff ff 	movl   $0xfffffffd,-0x10(%ebp)
    if (!user_mem_check(mm, (uintptr_t)argv, sizeof(const char *) * argc, 0)) {
c010cc93:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cc96:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010cc9d:	8b 45 14             	mov    0x14(%ebp),%eax
c010cca0:	6a 00                	push   $0x0
c010cca2:	52                   	push   %edx
c010cca3:	50                   	push   %eax
c010cca4:	ff 75 08             	pushl  0x8(%ebp)
c010cca7:	e8 a9 79 ff ff       	call   c0104655 <user_mem_check>
c010ccac:	83 c4 10             	add    $0x10,%esp
c010ccaf:	85 c0                	test   %eax,%eax
c010ccb1:	75 08                	jne    c010ccbb <copy_kargv+0x35>
        return ret;
c010ccb3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ccb6:	e9 9e 00 00 00       	jmp    c010cd59 <copy_kargv+0xd3>
    }
    for (i = 0; i < argc; i ++) {
c010ccbb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010ccc2:	eb 6a                	jmp    c010cd2e <copy_kargv+0xa8>
        char *buffer;
        if ((buffer = kmalloc(EXEC_MAX_ARG_LEN + 1)) == NULL) {
c010ccc4:	83 ec 0c             	sub    $0xc,%esp
c010ccc7:	68 00 10 00 00       	push   $0x1000
c010cccc:	e8 31 86 ff ff       	call   c0105302 <kmalloc>
c010ccd1:	83 c4 10             	add    $0x10,%esp
c010ccd4:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010ccd7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010ccdb:	74 60                	je     c010cd3d <copy_kargv+0xb7>
            goto failed_nomem;
        }
        if (!copy_string(mm, buffer, argv[i], EXEC_MAX_ARG_LEN + 1)) {
c010ccdd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cce0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010cce7:	8b 45 14             	mov    0x14(%ebp),%eax
c010ccea:	01 d0                	add    %edx,%eax
c010ccec:	8b 00                	mov    (%eax),%eax
c010ccee:	68 00 10 00 00       	push   $0x1000
c010ccf3:	50                   	push   %eax
c010ccf4:	ff 75 ec             	pushl  -0x14(%ebp)
c010ccf7:	ff 75 08             	pushl  0x8(%ebp)
c010ccfa:	e8 76 7a ff ff       	call   c0104775 <copy_string>
c010ccff:	83 c4 10             	add    $0x10,%esp
c010cd02:	85 c0                	test   %eax,%eax
c010cd04:	75 10                	jne    c010cd16 <copy_kargv+0x90>
            kfree(buffer);
c010cd06:	83 ec 0c             	sub    $0xc,%esp
c010cd09:	ff 75 ec             	pushl  -0x14(%ebp)
c010cd0c:	e8 09 86 ff ff       	call   c010531a <kfree>
c010cd11:	83 c4 10             	add    $0x10,%esp
            goto failed_cleanup;
c010cd14:	eb 2f                	jmp    c010cd45 <copy_kargv+0xbf>
        }
        kargv[i] = buffer;
c010cd16:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cd19:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010cd20:	8b 45 10             	mov    0x10(%ebp),%eax
c010cd23:	01 c2                	add    %eax,%edx
c010cd25:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cd28:	89 02                	mov    %eax,(%edx)
copy_kargv(struct mm_struct *mm, int argc, char **kargv, const char **argv) {
    int i, ret = -E_INVAL;
    if (!user_mem_check(mm, (uintptr_t)argv, sizeof(const char *) * argc, 0)) {
        return ret;
    }
    for (i = 0; i < argc; i ++) {
c010cd2a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010cd2e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cd31:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010cd34:	7c 8e                	jl     c010ccc4 <copy_kargv+0x3e>
            kfree(buffer);
            goto failed_cleanup;
        }
        kargv[i] = buffer;
    }
    return 0;
c010cd36:	b8 00 00 00 00       	mov    $0x0,%eax
c010cd3b:	eb 1c                	jmp    c010cd59 <copy_kargv+0xd3>
        return ret;
    }
    for (i = 0; i < argc; i ++) {
        char *buffer;
        if ((buffer = kmalloc(EXEC_MAX_ARG_LEN + 1)) == NULL) {
            goto failed_nomem;
c010cd3d:	90                   	nop
        kargv[i] = buffer;
    }
    return 0;

failed_nomem:
    ret = -E_NO_MEM;
c010cd3e:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
failed_cleanup:
    put_kargv(i, kargv);
c010cd45:	83 ec 08             	sub    $0x8,%esp
c010cd48:	ff 75 10             	pushl  0x10(%ebp)
c010cd4b:	ff 75 f4             	pushl  -0xc(%ebp)
c010cd4e:	e8 01 ff ff ff       	call   c010cc54 <put_kargv>
c010cd53:	83 c4 10             	add    $0x10,%esp
    return ret;
c010cd56:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010cd59:	c9                   	leave  
c010cd5a:	c3                   	ret    

c010cd5b <do_execve>:

// do_execve - call exit_mmap(mm)&put_pgdir(mm) to reclaim memory space of current process
//           - call load_icode to setup new memory space accroding binary prog.
int
do_execve(const char *name, int argc, const char **argv) {
c010cd5b:	55                   	push   %ebp
c010cd5c:	89 e5                	mov    %esp,%ebp
c010cd5e:	81 ec d8 00 00 00    	sub    $0xd8,%esp
    static_assert(EXEC_MAX_ARG_LEN >= FS_MAX_FPATH_LEN);
    struct mm_struct *mm = current->mm;
c010cd64:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010cd69:	8b 40 18             	mov    0x18(%eax),%eax
c010cd6c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (!(argc >= 1 && argc <= EXEC_MAX_ARG_NUM)) {
c010cd6f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010cd73:	7e 06                	jle    c010cd7b <do_execve+0x20>
c010cd75:	83 7d 0c 20          	cmpl   $0x20,0xc(%ebp)
c010cd79:	7e 0a                	jle    c010cd85 <do_execve+0x2a>
        return -E_INVAL;
c010cd7b:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010cd80:	e9 f4 01 00 00       	jmp    c010cf79 <do_execve+0x21e>
    }

    char local_name[PROC_NAME_LEN + 1];
    memset(local_name, 0, sizeof(local_name));
c010cd85:	83 ec 04             	sub    $0x4,%esp
c010cd88:	6a 33                	push   $0x33
c010cd8a:	6a 00                	push   $0x0
c010cd8c:	8d 45 b1             	lea    -0x4f(%ebp),%eax
c010cd8f:	50                   	push   %eax
c010cd90:	e8 cd 6c 00 00       	call   c0113a62 <memset>
c010cd95:	83 c4 10             	add    $0x10,%esp
    
    char *kargv[EXEC_MAX_ARG_NUM];
    const char *path;
    
    int ret = -E_INVAL;
c010cd98:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
    
    lock_mm(mm);
c010cd9f:	83 ec 0c             	sub    $0xc,%esp
c010cda2:	ff 75 f0             	pushl  -0x10(%ebp)
c010cda5:	e8 b6 e8 ff ff       	call   c010b660 <lock_mm>
c010cdaa:	83 c4 10             	add    $0x10,%esp
    if (name == NULL) {
c010cdad:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010cdb1:	75 1e                	jne    c010cdd1 <do_execve+0x76>
        snprintf(local_name, sizeof(local_name), "<null> %d", current->pid);
c010cdb3:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010cdb8:	8b 40 04             	mov    0x4(%eax),%eax
c010cdbb:	50                   	push   %eax
c010cdbc:	68 bf 6e 11 c0       	push   $0xc0116ebf
c010cdc1:	6a 33                	push   $0x33
c010cdc3:	8d 45 b1             	lea    -0x4f(%ebp),%eax
c010cdc6:	50                   	push   %eax
c010cdc7:	e8 e6 73 00 00       	call   c01141b2 <snprintf>
c010cdcc:	83 c4 10             	add    $0x10,%esp
c010cdcf:	eb 2e                	jmp    c010cdff <do_execve+0xa4>
    }
    else {
        if (!copy_string(mm, local_name, name, sizeof(local_name))) {
c010cdd1:	6a 33                	push   $0x33
c010cdd3:	ff 75 08             	pushl  0x8(%ebp)
c010cdd6:	8d 45 b1             	lea    -0x4f(%ebp),%eax
c010cdd9:	50                   	push   %eax
c010cdda:	ff 75 f0             	pushl  -0x10(%ebp)
c010cddd:	e8 93 79 ff ff       	call   c0104775 <copy_string>
c010cde2:	83 c4 10             	add    $0x10,%esp
c010cde5:	85 c0                	test   %eax,%eax
c010cde7:	75 16                	jne    c010cdff <do_execve+0xa4>
            unlock_mm(mm);
c010cde9:	83 ec 0c             	sub    $0xc,%esp
c010cdec:	ff 75 f0             	pushl  -0x10(%ebp)
c010cdef:	e8 a4 e8 ff ff       	call   c010b698 <unlock_mm>
c010cdf4:	83 c4 10             	add    $0x10,%esp
            return ret;
c010cdf7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cdfa:	e9 7a 01 00 00       	jmp    c010cf79 <do_execve+0x21e>
        }
    }
    if ((ret = copy_kargv(mm, argc, kargv, argv)) != 0) {
c010cdff:	ff 75 10             	pushl  0x10(%ebp)
c010ce02:	8d 85 30 ff ff ff    	lea    -0xd0(%ebp),%eax
c010ce08:	50                   	push   %eax
c010ce09:	ff 75 0c             	pushl  0xc(%ebp)
c010ce0c:	ff 75 f0             	pushl  -0x10(%ebp)
c010ce0f:	e8 72 fe ff ff       	call   c010cc86 <copy_kargv>
c010ce14:	83 c4 10             	add    $0x10,%esp
c010ce17:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ce1a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ce1e:	74 16                	je     c010ce36 <do_execve+0xdb>
        unlock_mm(mm);
c010ce20:	83 ec 0c             	sub    $0xc,%esp
c010ce23:	ff 75 f0             	pushl  -0x10(%ebp)
c010ce26:	e8 6d e8 ff ff       	call   c010b698 <unlock_mm>
c010ce2b:	83 c4 10             	add    $0x10,%esp
        return ret;
c010ce2e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ce31:	e9 43 01 00 00       	jmp    c010cf79 <do_execve+0x21e>
    }
    path = argv[0];
c010ce36:	8b 45 10             	mov    0x10(%ebp),%eax
c010ce39:	8b 00                	mov    (%eax),%eax
c010ce3b:	89 45 ec             	mov    %eax,-0x14(%ebp)
    unlock_mm(mm);
c010ce3e:	83 ec 0c             	sub    $0xc,%esp
c010ce41:	ff 75 f0             	pushl  -0x10(%ebp)
c010ce44:	e8 4f e8 ff ff       	call   c010b698 <unlock_mm>
c010ce49:	83 c4 10             	add    $0x10,%esp
    files_closeall(current->filesp);
c010ce4c:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010ce51:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010ce57:	83 ec 0c             	sub    $0xc,%esp
c010ce5a:	50                   	push   %eax
c010ce5b:	e8 d8 e4 ff ff       	call   c010b338 <files_closeall>
c010ce60:	83 c4 10             	add    $0x10,%esp

    /* sysfile_open will check the first argument path, thus we have to use a user-space pointer, and argv[0] may be incorrect */    
    int fd;
    if ((ret = fd = sysfile_open(path, O_RDONLY)) < 0) {
c010ce63:	83 ec 08             	sub    $0x8,%esp
c010ce66:	6a 00                	push   $0x0
c010ce68:	ff 75 ec             	pushl  -0x14(%ebp)
c010ce6b:	e8 14 cd ff ff       	call   c0109b84 <sysfile_open>
c010ce70:	83 c4 10             	add    $0x10,%esp
c010ce73:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010ce76:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ce79:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ce7c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ce80:	0f 88 b5 00 00 00    	js     c010cf3b <do_execve+0x1e0>
        goto execve_exit;
    }
    if (mm != NULL) {
c010ce86:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010ce8a:	74 56                	je     c010cee2 <do_execve+0x187>
        lcr3(boot_cr3);
c010ce8c:	a1 54 52 15 c0       	mov    0xc0155254,%eax
c010ce91:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010ce94:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ce97:	0f 22 d8             	mov    %eax,%cr3
        if (mm_count_dec(mm) == 0) {
c010ce9a:	83 ec 0c             	sub    $0xc,%esp
c010ce9d:	ff 75 f0             	pushl  -0x10(%ebp)
c010cea0:	e8 a1 e7 ff ff       	call   c010b646 <mm_count_dec>
c010cea5:	83 c4 10             	add    $0x10,%esp
c010cea8:	85 c0                	test   %eax,%eax
c010ceaa:	75 2a                	jne    c010ced6 <do_execve+0x17b>
            exit_mmap(mm);
c010ceac:	83 ec 0c             	sub    $0xc,%esp
c010ceaf:	ff 75 f0             	pushl  -0x10(%ebp)
c010ceb2:	e8 0d 6e ff ff       	call   c0103cc4 <exit_mmap>
c010ceb7:	83 c4 10             	add    $0x10,%esp
            put_pgdir(mm);
c010ceba:	83 ec 0c             	sub    $0xc,%esp
c010cebd:	ff 75 f0             	pushl  -0x10(%ebp)
c010cec0:	e8 90 ef ff ff       	call   c010be55 <put_pgdir>
c010cec5:	83 c4 10             	add    $0x10,%esp
            mm_destroy(mm);
c010cec8:	83 ec 0c             	sub    $0xc,%esp
c010cecb:	ff 75 f0             	pushl  -0x10(%ebp)
c010cece:	e8 63 6b ff ff       	call   c0103a36 <mm_destroy>
c010ced3:	83 c4 10             	add    $0x10,%esp
        }
        current->mm = NULL;
c010ced6:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010cedb:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    ret= -E_NO_MEM;
c010cee2:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    if ((ret = load_icode(fd, argc, kargv)) != 0) {
c010cee9:	83 ec 04             	sub    $0x4,%esp
c010ceec:	8d 85 30 ff ff ff    	lea    -0xd0(%ebp),%eax
c010cef2:	50                   	push   %eax
c010cef3:	ff 75 0c             	pushl  0xc(%ebp)
c010cef6:	ff 75 e8             	pushl  -0x18(%ebp)
c010cef9:	e8 e7 f5 ff ff       	call   c010c4e5 <load_icode>
c010cefe:	83 c4 10             	add    $0x10,%esp
c010cf01:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010cf04:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010cf08:	75 34                	jne    c010cf3e <do_execve+0x1e3>
        goto execve_exit;
    }
    put_kargv(argc, kargv);
c010cf0a:	83 ec 08             	sub    $0x8,%esp
c010cf0d:	8d 85 30 ff ff ff    	lea    -0xd0(%ebp),%eax
c010cf13:	50                   	push   %eax
c010cf14:	ff 75 0c             	pushl  0xc(%ebp)
c010cf17:	e8 38 fd ff ff       	call   c010cc54 <put_kargv>
c010cf1c:	83 c4 10             	add    $0x10,%esp
    set_proc_name(current, local_name);
c010cf1f:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010cf24:	83 ec 08             	sub    $0x8,%esp
c010cf27:	8d 55 b1             	lea    -0x4f(%ebp),%edx
c010cf2a:	52                   	push   %edx
c010cf2b:	50                   	push   %eax
c010cf2c:	e8 3e e9 ff ff       	call   c010b86f <set_proc_name>
c010cf31:	83 c4 10             	add    $0x10,%esp
    return 0;
c010cf34:	b8 00 00 00 00       	mov    $0x0,%eax
c010cf39:	eb 3e                	jmp    c010cf79 <do_execve+0x21e>
    files_closeall(current->filesp);

    /* sysfile_open will check the first argument path, thus we have to use a user-space pointer, and argv[0] may be incorrect */    
    int fd;
    if ((ret = fd = sysfile_open(path, O_RDONLY)) < 0) {
        goto execve_exit;
c010cf3b:	90                   	nop
c010cf3c:	eb 01                	jmp    c010cf3f <do_execve+0x1e4>
        }
        current->mm = NULL;
    }
    ret= -E_NO_MEM;
    if ((ret = load_icode(fd, argc, kargv)) != 0) {
        goto execve_exit;
c010cf3e:	90                   	nop
    put_kargv(argc, kargv);
    set_proc_name(current, local_name);
    return 0;

execve_exit:
    put_kargv(argc, kargv);
c010cf3f:	83 ec 08             	sub    $0x8,%esp
c010cf42:	8d 85 30 ff ff ff    	lea    -0xd0(%ebp),%eax
c010cf48:	50                   	push   %eax
c010cf49:	ff 75 0c             	pushl  0xc(%ebp)
c010cf4c:	e8 03 fd ff ff       	call   c010cc54 <put_kargv>
c010cf51:	83 c4 10             	add    $0x10,%esp
    do_exit(ret);
c010cf54:	83 ec 0c             	sub    $0xc,%esp
c010cf57:	ff 75 f4             	pushl  -0xc(%ebp)
c010cf5a:	e8 1f f3 ff ff       	call   c010c27e <do_exit>
c010cf5f:	83 c4 10             	add    $0x10,%esp
    panic("already exit: %e.\n", ret);
c010cf62:	ff 75 f4             	pushl  -0xc(%ebp)
c010cf65:	68 c9 6e 11 c0       	push   $0xc0116ec9
c010cf6a:	68 a1 03 00 00       	push   $0x3a1
c010cf6f:	68 8c 6c 11 c0       	push   $0xc0116c8c
c010cf74:	e8 74 35 ff ff       	call   c01004ed <__panic>
}
c010cf79:	c9                   	leave  
c010cf7a:	c3                   	ret    

c010cf7b <do_yield>:

// do_yield - ask the scheduler to reschedule
int
do_yield(void) {
c010cf7b:	55                   	push   %ebp
c010cf7c:	89 e5                	mov    %esp,%ebp
    current->need_resched = 1;
c010cf7e:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010cf83:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    return 0;
c010cf8a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010cf8f:	5d                   	pop    %ebp
c010cf90:	c3                   	ret    

c010cf91 <do_wait>:

// do_wait - wait one OR any children with PROC_ZOMBIE state, and free memory space of kernel stack
//         - proc struct of this child.
// NOTE: only after do_wait function, all resources of the child proces are free.
int
do_wait(int pid, int *code_store) {
c010cf91:	55                   	push   %ebp
c010cf92:	89 e5                	mov    %esp,%ebp
c010cf94:	83 ec 18             	sub    $0x18,%esp
    struct mm_struct *mm = current->mm;
c010cf97:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010cf9c:	8b 40 18             	mov    0x18(%eax),%eax
c010cf9f:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (code_store != NULL) {
c010cfa2:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010cfa6:	74 21                	je     c010cfc9 <do_wait+0x38>
        if (!user_mem_check(mm, (uintptr_t)code_store, sizeof(int), 1)) {
c010cfa8:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cfab:	6a 01                	push   $0x1
c010cfad:	6a 04                	push   $0x4
c010cfaf:	50                   	push   %eax
c010cfb0:	ff 75 ec             	pushl  -0x14(%ebp)
c010cfb3:	e8 9d 76 ff ff       	call   c0104655 <user_mem_check>
c010cfb8:	83 c4 10             	add    $0x10,%esp
c010cfbb:	85 c0                	test   %eax,%eax
c010cfbd:	75 0a                	jne    c010cfc9 <do_wait+0x38>
            return -E_INVAL;
c010cfbf:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010cfc4:	e9 63 01 00 00       	jmp    c010d12c <do_wait+0x19b>
    }

    struct proc_struct *proc;
    bool intr_flag, haskid;
repeat:
    haskid = 0;
c010cfc9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    if (pid != 0) {
c010cfd0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010cfd4:	74 3c                	je     c010d012 <do_wait+0x81>
        proc = find_proc(pid);
c010cfd6:	83 ec 0c             	sub    $0xc,%esp
c010cfd9:	ff 75 08             	pushl  0x8(%ebp)
c010cfdc:	e8 9b ec ff ff       	call   c010bc7c <find_proc>
c010cfe1:	83 c4 10             	add    $0x10,%esp
c010cfe4:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (proc != NULL && proc->parent == current) {
c010cfe7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010cfeb:	74 58                	je     c010d045 <do_wait+0xb4>
c010cfed:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cff0:	8b 50 14             	mov    0x14(%eax),%edx
c010cff3:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010cff8:	39 c2                	cmp    %eax,%edx
c010cffa:	75 49                	jne    c010d045 <do_wait+0xb4>
            haskid = 1;
c010cffc:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c010d003:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d006:	8b 00                	mov    (%eax),%eax
c010d008:	83 f8 03             	cmp    $0x3,%eax
c010d00b:	75 38                	jne    c010d045 <do_wait+0xb4>
                goto found;
c010d00d:	e9 88 00 00 00       	jmp    c010d09a <do_wait+0x109>
            }
        }
    }
    else {
        proc = current->cptr;
c010d012:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010d017:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010d01d:	89 45 f4             	mov    %eax,-0xc(%ebp)
        for (; proc != NULL; proc = proc->optr) {
c010d020:	eb 1d                	jmp    c010d03f <do_wait+0xae>
            haskid = 1;
c010d022:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c010d029:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d02c:	8b 00                	mov    (%eax),%eax
c010d02e:	83 f8 03             	cmp    $0x3,%eax
c010d031:	74 66                	je     c010d099 <do_wait+0x108>
            }
        }
    }
    else {
        proc = current->cptr;
        for (; proc != NULL; proc = proc->optr) {
c010d033:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d036:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010d03c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d03f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d043:	75 dd                	jne    c010d022 <do_wait+0x91>
            if (proc->state == PROC_ZOMBIE) {
                goto found;
            }
        }
    }
    if (haskid) {
c010d045:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010d049:	74 44                	je     c010d08f <do_wait+0xfe>
        current->state = PROC_SLEEPING;
c010d04b:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010d050:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        current->wait_state = WT_CHILD;
c010d056:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010d05b:	c7 80 90 00 00 00 01 	movl   $0x80000001,0x90(%eax)
c010d062:	00 00 80 
        schedule();
c010d065:	e8 02 08 00 00       	call   c010d86c <schedule>
        if (current->flags & PF_EXITING) {
c010d06a:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010d06f:	8b 40 44             	mov    0x44(%eax),%eax
c010d072:	83 e0 01             	and    $0x1,%eax
c010d075:	85 c0                	test   %eax,%eax
c010d077:	0f 84 4c ff ff ff    	je     c010cfc9 <do_wait+0x38>
            do_exit(-E_KILLED);
c010d07d:	83 ec 0c             	sub    $0xc,%esp
c010d080:	6a f7                	push   $0xfffffff7
c010d082:	e8 f7 f1 ff ff       	call   c010c27e <do_exit>
c010d087:	83 c4 10             	add    $0x10,%esp
        }
        goto repeat;
c010d08a:	e9 3a ff ff ff       	jmp    c010cfc9 <do_wait+0x38>
    }
    return -E_BAD_PROC;
c010d08f:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
c010d094:	e9 93 00 00 00       	jmp    c010d12c <do_wait+0x19b>
    else {
        proc = current->cptr;
        for (; proc != NULL; proc = proc->optr) {
            haskid = 1;
            if (proc->state == PROC_ZOMBIE) {
                goto found;
c010d099:	90                   	nop
        goto repeat;
    }
    return -E_BAD_PROC;

found:
    if (proc == idleproc || proc == initproc) {
c010d09a:	a1 20 20 15 c0       	mov    0xc0152020,%eax
c010d09f:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010d0a2:	74 0a                	je     c010d0ae <do_wait+0x11d>
c010d0a4:	a1 24 20 15 c0       	mov    0xc0152024,%eax
c010d0a9:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010d0ac:	75 17                	jne    c010d0c5 <do_wait+0x134>
        panic("wait idleproc or initproc.\n");
c010d0ae:	83 ec 04             	sub    $0x4,%esp
c010d0b1:	68 dc 6e 11 c0       	push   $0xc0116edc
c010d0b6:	68 da 03 00 00       	push   $0x3da
c010d0bb:	68 8c 6c 11 c0       	push   $0xc0116c8c
c010d0c0:	e8 28 34 ff ff       	call   c01004ed <__panic>
    }
    if (code_store != NULL) {
c010d0c5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010d0c9:	74 0e                	je     c010d0d9 <do_wait+0x148>
        *code_store = proc->exit_code;
c010d0cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d0ce:	8b 90 8c 00 00 00    	mov    0x8c(%eax),%edx
c010d0d4:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d0d7:	89 10                	mov    %edx,(%eax)
    }
    local_intr_save(intr_flag);
c010d0d9:	e8 29 e4 ff ff       	call   c010b507 <__intr_save>
c010d0de:	89 45 e8             	mov    %eax,-0x18(%ebp)
    {
        unhash_proc(proc);
c010d0e1:	83 ec 0c             	sub    $0xc,%esp
c010d0e4:	ff 75 f4             	pushl  -0xc(%ebp)
c010d0e7:	e8 5a eb ff ff       	call   c010bc46 <unhash_proc>
c010d0ec:	83 c4 10             	add    $0x10,%esp
        remove_links(proc);
c010d0ef:	83 ec 0c             	sub    $0xc,%esp
c010d0f2:	ff 75 f4             	pushl  -0xc(%ebp)
c010d0f5:	e8 9a e8 ff ff       	call   c010b994 <remove_links>
c010d0fa:	83 c4 10             	add    $0x10,%esp
    }
    local_intr_restore(intr_flag);
c010d0fd:	83 ec 0c             	sub    $0xc,%esp
c010d100:	ff 75 e8             	pushl  -0x18(%ebp)
c010d103:	e8 29 e4 ff ff       	call   c010b531 <__intr_restore>
c010d108:	83 c4 10             	add    $0x10,%esp
    put_kstack(proc);
c010d10b:	83 ec 0c             	sub    $0xc,%esp
c010d10e:	ff 75 f4             	pushl  -0xc(%ebp)
c010d111:	e8 7d ec ff ff       	call   c010bd93 <put_kstack>
c010d116:	83 c4 10             	add    $0x10,%esp
    kfree(proc);
c010d119:	83 ec 0c             	sub    $0xc,%esp
c010d11c:	ff 75 f4             	pushl  -0xc(%ebp)
c010d11f:	e8 f6 81 ff ff       	call   c010531a <kfree>
c010d124:	83 c4 10             	add    $0x10,%esp
    return 0;
c010d127:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010d12c:	c9                   	leave  
c010d12d:	c3                   	ret    

c010d12e <do_kill>:

// do_kill - kill process with pid by set this process's flags with PF_EXITING
int
do_kill(int pid) {
c010d12e:	55                   	push   %ebp
c010d12f:	89 e5                	mov    %esp,%ebp
c010d131:	83 ec 18             	sub    $0x18,%esp
    struct proc_struct *proc;
    if ((proc = find_proc(pid)) != NULL) {
c010d134:	83 ec 0c             	sub    $0xc,%esp
c010d137:	ff 75 08             	pushl  0x8(%ebp)
c010d13a:	e8 3d eb ff ff       	call   c010bc7c <find_proc>
c010d13f:	83 c4 10             	add    $0x10,%esp
c010d142:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d145:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d149:	74 47                	je     c010d192 <do_kill+0x64>
        if (!(proc->flags & PF_EXITING)) {
c010d14b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d14e:	8b 40 44             	mov    0x44(%eax),%eax
c010d151:	83 e0 01             	and    $0x1,%eax
c010d154:	85 c0                	test   %eax,%eax
c010d156:	75 33                	jne    c010d18b <do_kill+0x5d>
            proc->flags |= PF_EXITING;
c010d158:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d15b:	8b 40 44             	mov    0x44(%eax),%eax
c010d15e:	83 c8 01             	or     $0x1,%eax
c010d161:	89 c2                	mov    %eax,%edx
c010d163:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d166:	89 50 44             	mov    %edx,0x44(%eax)
            if (proc->wait_state & WT_INTERRUPTED) {
c010d169:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d16c:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010d172:	85 c0                	test   %eax,%eax
c010d174:	79 0e                	jns    c010d184 <do_kill+0x56>
                wakeup_proc(proc);
c010d176:	83 ec 0c             	sub    $0xc,%esp
c010d179:	ff 75 f4             	pushl  -0xc(%ebp)
c010d17c:	e8 5b 06 00 00       	call   c010d7dc <wakeup_proc>
c010d181:	83 c4 10             	add    $0x10,%esp
            }
            return 0;
c010d184:	b8 00 00 00 00       	mov    $0x0,%eax
c010d189:	eb 0c                	jmp    c010d197 <do_kill+0x69>
        }
        return -E_KILLED;
c010d18b:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
c010d190:	eb 05                	jmp    c010d197 <do_kill+0x69>
    }
    return -E_INVAL;
c010d192:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c010d197:	c9                   	leave  
c010d198:	c3                   	ret    

c010d199 <kernel_execve>:

// kernel_execve - do SYS_exec syscall to exec a user program called by user_main kernel_thread
static int
kernel_execve(const char *name, const char **argv) {
c010d199:	55                   	push   %ebp
c010d19a:	89 e5                	mov    %esp,%ebp
c010d19c:	53                   	push   %ebx
c010d19d:	83 ec 10             	sub    $0x10,%esp
    int argc = 0, ret;
c010d1a0:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (argv[argc] != NULL) {
c010d1a7:	eb 04                	jmp    c010d1ad <kernel_execve+0x14>
        argc ++;
c010d1a9:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)

// kernel_execve - do SYS_exec syscall to exec a user program called by user_main kernel_thread
static int
kernel_execve(const char *name, const char **argv) {
    int argc = 0, ret;
    while (argv[argc] != NULL) {
c010d1ad:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010d1b0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010d1b7:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d1ba:	01 d0                	add    %edx,%eax
c010d1bc:	8b 00                	mov    (%eax),%eax
c010d1be:	85 c0                	test   %eax,%eax
c010d1c0:	75 e7                	jne    c010d1a9 <kernel_execve+0x10>
        argc ++;
    }
    asm volatile (
c010d1c2:	b8 04 00 00 00       	mov    $0x4,%eax
c010d1c7:	8b 55 08             	mov    0x8(%ebp),%edx
c010d1ca:	8b 4d f8             	mov    -0x8(%ebp),%ecx
c010d1cd:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c010d1d0:	cd 80                	int    $0x80
c010d1d2:	89 45 f4             	mov    %eax,-0xc(%ebp)
        "int %1;"
        : "=a" (ret)
        : "i" (T_SYSCALL), "0" (SYS_exec), "d" (name), "c" (argc), "b" (argv)
        : "memory");
    return ret;
c010d1d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010d1d8:	83 c4 10             	add    $0x10,%esp
c010d1db:	5b                   	pop    %ebx
c010d1dc:	5d                   	pop    %ebp
c010d1dd:	c3                   	ret    

c010d1de <user_main>:

#define KERNEL_EXECVE3(x, s, ...)               __KERNEL_EXECVE3(x, s, ##__VA_ARGS__)

// user_main - kernel thread used to exec a user program
static int
user_main(void *arg) {
c010d1de:	55                   	push   %ebp
c010d1df:	89 e5                	mov    %esp,%ebp
c010d1e1:	83 ec 18             	sub    $0x18,%esp
#ifdef TEST
#ifdef TESTSCRIPT
    KERNEL_EXECVE3(TEST, TESTSCRIPT);
#else
    KERNEL_EXECVE2(TEST);
c010d1e4:	c7 45 f0 f8 6e 11 c0 	movl   $0xc0116ef8,-0x10(%ebp)
c010d1eb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010d1f2:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010d1f7:	8b 40 04             	mov    0x4(%eax),%eax
c010d1fa:	83 ec 04             	sub    $0x4,%esp
c010d1fd:	68 f8 6e 11 c0       	push   $0xc0116ef8
c010d202:	50                   	push   %eax
c010d203:	68 00 6f 11 c0       	push   $0xc0116f00
c010d208:	e8 7a 31 ff ff       	call   c0100387 <cprintf>
c010d20d:	83 c4 10             	add    $0x10,%esp
c010d210:	83 ec 08             	sub    $0x8,%esp
c010d213:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010d216:	50                   	push   %eax
c010d217:	68 f8 6e 11 c0       	push   $0xc0116ef8
c010d21c:	e8 78 ff ff ff       	call   c010d199 <kernel_execve>
c010d221:	83 c4 10             	add    $0x10,%esp
#endif
#else
    KERNEL_EXECVE(sh);
#endif
    panic("user_main execve failed.\n");
c010d224:	83 ec 04             	sub    $0x4,%esp
c010d227:	68 27 6f 11 c0       	push   $0xc0116f27
c010d22c:	68 25 04 00 00       	push   $0x425
c010d231:	68 8c 6c 11 c0       	push   $0xc0116c8c
c010d236:	e8 b2 32 ff ff       	call   c01004ed <__panic>

c010d23b <init_main>:
}

// init_main - the second kernel thread used to create user_main kernel threads
static int
init_main(void *arg) {
c010d23b:	55                   	push   %ebp
c010d23c:	89 e5                	mov    %esp,%ebp
c010d23e:	83 ec 28             	sub    $0x28,%esp
    int ret;
    if ((ret = vfs_set_bootfs("disk0:")) != 0) {
c010d241:	83 ec 0c             	sub    $0xc,%esp
c010d244:	68 41 6f 11 c0       	push   $0xc0116f41
c010d249:	e8 74 27 00 00       	call   c010f9c2 <vfs_set_bootfs>
c010d24e:	83 c4 10             	add    $0x10,%esp
c010d251:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d254:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d258:	74 17                	je     c010d271 <init_main+0x36>
        panic("set boot fs failed: %e.\n", ret);
c010d25a:	ff 75 f4             	pushl  -0xc(%ebp)
c010d25d:	68 48 6f 11 c0       	push   $0xc0116f48
c010d262:	68 2d 04 00 00       	push   $0x42d
c010d267:	68 8c 6c 11 c0       	push   $0xc0116c8c
c010d26c:	e8 7c 32 ff ff       	call   c01004ed <__panic>
    }
    
    size_t nr_free_pages_store = nr_free_pages();
c010d271:	e8 57 a0 ff ff       	call   c01072cd <nr_free_pages>
c010d276:	89 45 f0             	mov    %eax,-0x10(%ebp)
    size_t kernel_allocated_store = kallocated();
c010d279:	e8 67 7f ff ff       	call   c01051e5 <kallocated>
c010d27e:	89 45 ec             	mov    %eax,-0x14(%ebp)

    int pid = kernel_thread(user_main, NULL, 0);
c010d281:	83 ec 04             	sub    $0x4,%esp
c010d284:	6a 00                	push   $0x0
c010d286:	6a 00                	push   $0x0
c010d288:	68 de d1 10 c0       	push   $0xc010d1de
c010d28d:	e8 5c ea ff ff       	call   c010bcee <kernel_thread>
c010d292:	83 c4 10             	add    $0x10,%esp
c010d295:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (pid <= 0) {
c010d298:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010d29c:	7f 17                	jg     c010d2b5 <init_main+0x7a>
        panic("create user_main failed.\n");
c010d29e:	83 ec 04             	sub    $0x4,%esp
c010d2a1:	68 61 6f 11 c0       	push   $0xc0116f61
c010d2a6:	68 35 04 00 00       	push   $0x435
c010d2ab:	68 8c 6c 11 c0       	push   $0xc0116c8c
c010d2b0:	e8 38 32 ff ff       	call   c01004ed <__panic>
    }
 extern void check_sync(void);
    check_sync();                // check philosopher sync problem
c010d2b5:	e8 8a bd ff ff       	call   c0109044 <check_sync>

    while (do_wait(0, NULL) == 0) {
c010d2ba:	eb 05                	jmp    c010d2c1 <init_main+0x86>
        schedule();
c010d2bc:	e8 ab 05 00 00       	call   c010d86c <schedule>
        panic("create user_main failed.\n");
    }
 extern void check_sync(void);
    check_sync();                // check philosopher sync problem

    while (do_wait(0, NULL) == 0) {
c010d2c1:	83 ec 08             	sub    $0x8,%esp
c010d2c4:	6a 00                	push   $0x0
c010d2c6:	6a 00                	push   $0x0
c010d2c8:	e8 c4 fc ff ff       	call   c010cf91 <do_wait>
c010d2cd:	83 c4 10             	add    $0x10,%esp
c010d2d0:	85 c0                	test   %eax,%eax
c010d2d2:	74 e8                	je     c010d2bc <init_main+0x81>
        schedule();
    }

    fs_cleanup();
c010d2d4:	e8 fb de ff ff       	call   c010b1d4 <fs_cleanup>
        
    cprintf("all user-mode processes have quit.\n");
c010d2d9:	83 ec 0c             	sub    $0xc,%esp
c010d2dc:	68 7c 6f 11 c0       	push   $0xc0116f7c
c010d2e1:	e8 a1 30 ff ff       	call   c0100387 <cprintf>
c010d2e6:	83 c4 10             	add    $0x10,%esp
    assert(initproc->cptr == NULL && initproc->yptr == NULL && initproc->optr == NULL);
c010d2e9:	a1 24 20 15 c0       	mov    0xc0152024,%eax
c010d2ee:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010d2f4:	85 c0                	test   %eax,%eax
c010d2f6:	75 1e                	jne    c010d316 <init_main+0xdb>
c010d2f8:	a1 24 20 15 c0       	mov    0xc0152024,%eax
c010d2fd:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010d303:	85 c0                	test   %eax,%eax
c010d305:	75 0f                	jne    c010d316 <init_main+0xdb>
c010d307:	a1 24 20 15 c0       	mov    0xc0152024,%eax
c010d30c:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010d312:	85 c0                	test   %eax,%eax
c010d314:	74 19                	je     c010d32f <init_main+0xf4>
c010d316:	68 a0 6f 11 c0       	push   $0xc0116fa0
c010d31b:	68 b3 6c 11 c0       	push   $0xc0116cb3
c010d320:	68 41 04 00 00       	push   $0x441
c010d325:	68 8c 6c 11 c0       	push   $0xc0116c8c
c010d32a:	e8 be 31 ff ff       	call   c01004ed <__panic>
    assert(nr_process == 2);
c010d32f:	a1 40 40 15 c0       	mov    0xc0154040,%eax
c010d334:	83 f8 02             	cmp    $0x2,%eax
c010d337:	74 19                	je     c010d352 <init_main+0x117>
c010d339:	68 eb 6f 11 c0       	push   $0xc0116feb
c010d33e:	68 b3 6c 11 c0       	push   $0xc0116cb3
c010d343:	68 42 04 00 00       	push   $0x442
c010d348:	68 8c 6c 11 c0       	push   $0xc0116c8c
c010d34d:	e8 9b 31 ff ff       	call   c01004ed <__panic>
c010d352:	c7 45 e0 3c 53 15 c0 	movl   $0xc015533c,-0x20(%ebp)
c010d359:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010d35c:	8b 40 04             	mov    0x4(%eax),%eax
    assert(list_next(&proc_list) == &(initproc->list_link));
c010d35f:	8b 15 24 20 15 c0    	mov    0xc0152024,%edx
c010d365:	83 c2 7c             	add    $0x7c,%edx
c010d368:	39 d0                	cmp    %edx,%eax
c010d36a:	74 19                	je     c010d385 <init_main+0x14a>
c010d36c:	68 fc 6f 11 c0       	push   $0xc0116ffc
c010d371:	68 b3 6c 11 c0       	push   $0xc0116cb3
c010d376:	68 43 04 00 00       	push   $0x443
c010d37b:	68 8c 6c 11 c0       	push   $0xc0116c8c
c010d380:	e8 68 31 ff ff       	call   c01004ed <__panic>
c010d385:	c7 45 e4 3c 53 15 c0 	movl   $0xc015533c,-0x1c(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c010d38c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010d38f:	8b 00                	mov    (%eax),%eax
    assert(list_prev(&proc_list) == &(initproc->list_link));
c010d391:	8b 15 24 20 15 c0    	mov    0xc0152024,%edx
c010d397:	83 c2 7c             	add    $0x7c,%edx
c010d39a:	39 d0                	cmp    %edx,%eax
c010d39c:	74 19                	je     c010d3b7 <init_main+0x17c>
c010d39e:	68 2c 70 11 c0       	push   $0xc011702c
c010d3a3:	68 b3 6c 11 c0       	push   $0xc0116cb3
c010d3a8:	68 44 04 00 00       	push   $0x444
c010d3ad:	68 8c 6c 11 c0       	push   $0xc0116c8c
c010d3b2:	e8 36 31 ff ff       	call   c01004ed <__panic>

    cprintf("init check memory pass.\n");
c010d3b7:	83 ec 0c             	sub    $0xc,%esp
c010d3ba:	68 5c 70 11 c0       	push   $0xc011705c
c010d3bf:	e8 c3 2f ff ff       	call   c0100387 <cprintf>
c010d3c4:	83 c4 10             	add    $0x10,%esp
    return 0;
c010d3c7:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010d3cc:	c9                   	leave  
c010d3cd:	c3                   	ret    

c010d3ce <proc_init>:

// proc_init - set up the first kernel thread idleproc "idle" by itself and 
//           - create the second kernel thread init_main
void
proc_init(void) {
c010d3ce:	55                   	push   %ebp
c010d3cf:	89 e5                	mov    %esp,%ebp
c010d3d1:	53                   	push   %ebx
c010d3d2:	83 ec 14             	sub    $0x14,%esp
c010d3d5:	c7 45 e8 3c 53 15 c0 	movl   $0xc015533c,-0x18(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010d3dc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d3df:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010d3e2:	89 50 04             	mov    %edx,0x4(%eax)
c010d3e5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d3e8:	8b 50 04             	mov    0x4(%eax),%edx
c010d3eb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d3ee:	89 10                	mov    %edx,(%eax)
    int i;

    list_init(&proc_list);
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c010d3f0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010d3f7:	eb 26                	jmp    c010d41f <proc_init+0x51>
        list_init(hash_list + i);
c010d3f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d3fc:	c1 e0 03             	shl    $0x3,%eax
c010d3ff:	05 40 20 15 c0       	add    $0xc0152040,%eax
c010d404:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d407:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d40a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010d40d:	89 50 04             	mov    %edx,0x4(%eax)
c010d410:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d413:	8b 50 04             	mov    0x4(%eax),%edx
c010d416:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d419:	89 10                	mov    %edx,(%eax)
void
proc_init(void) {
    int i;

    list_init(&proc_list);
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c010d41b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010d41f:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
c010d426:	7e d1                	jle    c010d3f9 <proc_init+0x2b>
        list_init(hash_list + i);
    }

    if ((idleproc = alloc_proc()) == NULL) {
c010d428:	e8 ca e2 ff ff       	call   c010b6f7 <alloc_proc>
c010d42d:	a3 20 20 15 c0       	mov    %eax,0xc0152020
c010d432:	a1 20 20 15 c0       	mov    0xc0152020,%eax
c010d437:	85 c0                	test   %eax,%eax
c010d439:	75 17                	jne    c010d452 <proc_init+0x84>
        panic("cannot alloc idleproc.\n");
c010d43b:	83 ec 04             	sub    $0x4,%esp
c010d43e:	68 75 70 11 c0       	push   $0xc0117075
c010d443:	68 56 04 00 00       	push   $0x456
c010d448:	68 8c 6c 11 c0       	push   $0xc0116c8c
c010d44d:	e8 9b 30 ff ff       	call   c01004ed <__panic>
    }

    idleproc->pid = 0;
c010d452:	a1 20 20 15 c0       	mov    0xc0152020,%eax
c010d457:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    idleproc->state = PROC_RUNNABLE;
c010d45e:	a1 20 20 15 c0       	mov    0xc0152020,%eax
c010d463:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    idleproc->kstack = (uintptr_t)bootstack;
c010d469:	a1 20 20 15 c0       	mov    0xc0152020,%eax
c010d46e:	ba 00 c0 14 c0       	mov    $0xc014c000,%edx
c010d473:	89 50 0c             	mov    %edx,0xc(%eax)
    idleproc->need_resched = 1;
c010d476:	a1 20 20 15 c0       	mov    0xc0152020,%eax
c010d47b:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    
    if ((idleproc->filesp = files_create()) == NULL) {
c010d482:	8b 1d 20 20 15 c0    	mov    0xc0152020,%ebx
c010d488:	e8 8b dd ff ff       	call   c010b218 <files_create>
c010d48d:	89 83 c4 00 00 00    	mov    %eax,0xc4(%ebx)
c010d493:	8b 83 c4 00 00 00    	mov    0xc4(%ebx),%eax
c010d499:	85 c0                	test   %eax,%eax
c010d49b:	75 17                	jne    c010d4b4 <proc_init+0xe6>
        panic("create filesp (idleproc) failed.\n");
c010d49d:	83 ec 04             	sub    $0x4,%esp
c010d4a0:	68 90 70 11 c0       	push   $0xc0117090
c010d4a5:	68 5f 04 00 00       	push   $0x45f
c010d4aa:	68 8c 6c 11 c0       	push   $0xc0116c8c
c010d4af:	e8 39 30 ff ff       	call   c01004ed <__panic>
    }
    files_count_inc(idleproc->filesp);
c010d4b4:	a1 20 20 15 c0       	mov    0xc0152020,%eax
c010d4b9:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010d4bf:	83 ec 0c             	sub    $0xc,%esp
c010d4c2:	50                   	push   %eax
c010d4c3:	e8 fb e1 ff ff       	call   c010b6c3 <files_count_inc>
c010d4c8:	83 c4 10             	add    $0x10,%esp
    
    set_proc_name(idleproc, "idle");
c010d4cb:	a1 20 20 15 c0       	mov    0xc0152020,%eax
c010d4d0:	83 ec 08             	sub    $0x8,%esp
c010d4d3:	68 b2 70 11 c0       	push   $0xc01170b2
c010d4d8:	50                   	push   %eax
c010d4d9:	e8 91 e3 ff ff       	call   c010b86f <set_proc_name>
c010d4de:	83 c4 10             	add    $0x10,%esp
    nr_process ++;
c010d4e1:	a1 40 40 15 c0       	mov    0xc0154040,%eax
c010d4e6:	83 c0 01             	add    $0x1,%eax
c010d4e9:	a3 40 40 15 c0       	mov    %eax,0xc0154040

    current = idleproc;
c010d4ee:	a1 20 20 15 c0       	mov    0xc0152020,%eax
c010d4f3:	a3 28 20 15 c0       	mov    %eax,0xc0152028

    int pid = kernel_thread(init_main, NULL, 0);
c010d4f8:	83 ec 04             	sub    $0x4,%esp
c010d4fb:	6a 00                	push   $0x0
c010d4fd:	6a 00                	push   $0x0
c010d4ff:	68 3b d2 10 c0       	push   $0xc010d23b
c010d504:	e8 e5 e7 ff ff       	call   c010bcee <kernel_thread>
c010d509:	83 c4 10             	add    $0x10,%esp
c010d50c:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (pid <= 0) {
c010d50f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010d513:	7f 17                	jg     c010d52c <proc_init+0x15e>
        panic("create init_main failed.\n");
c010d515:	83 ec 04             	sub    $0x4,%esp
c010d518:	68 b7 70 11 c0       	push   $0xc01170b7
c010d51d:	68 6a 04 00 00       	push   $0x46a
c010d522:	68 8c 6c 11 c0       	push   $0xc0116c8c
c010d527:	e8 c1 2f ff ff       	call   c01004ed <__panic>
    }

    initproc = find_proc(pid);
c010d52c:	83 ec 0c             	sub    $0xc,%esp
c010d52f:	ff 75 ec             	pushl  -0x14(%ebp)
c010d532:	e8 45 e7 ff ff       	call   c010bc7c <find_proc>
c010d537:	83 c4 10             	add    $0x10,%esp
c010d53a:	a3 24 20 15 c0       	mov    %eax,0xc0152024
    set_proc_name(initproc, "init");
c010d53f:	a1 24 20 15 c0       	mov    0xc0152024,%eax
c010d544:	83 ec 08             	sub    $0x8,%esp
c010d547:	68 d1 70 11 c0       	push   $0xc01170d1
c010d54c:	50                   	push   %eax
c010d54d:	e8 1d e3 ff ff       	call   c010b86f <set_proc_name>
c010d552:	83 c4 10             	add    $0x10,%esp

    assert(idleproc != NULL && idleproc->pid == 0);
c010d555:	a1 20 20 15 c0       	mov    0xc0152020,%eax
c010d55a:	85 c0                	test   %eax,%eax
c010d55c:	74 0c                	je     c010d56a <proc_init+0x19c>
c010d55e:	a1 20 20 15 c0       	mov    0xc0152020,%eax
c010d563:	8b 40 04             	mov    0x4(%eax),%eax
c010d566:	85 c0                	test   %eax,%eax
c010d568:	74 19                	je     c010d583 <proc_init+0x1b5>
c010d56a:	68 d8 70 11 c0       	push   $0xc01170d8
c010d56f:	68 b3 6c 11 c0       	push   $0xc0116cb3
c010d574:	68 70 04 00 00       	push   $0x470
c010d579:	68 8c 6c 11 c0       	push   $0xc0116c8c
c010d57e:	e8 6a 2f ff ff       	call   c01004ed <__panic>
    assert(initproc != NULL && initproc->pid == 1);
c010d583:	a1 24 20 15 c0       	mov    0xc0152024,%eax
c010d588:	85 c0                	test   %eax,%eax
c010d58a:	74 0d                	je     c010d599 <proc_init+0x1cb>
c010d58c:	a1 24 20 15 c0       	mov    0xc0152024,%eax
c010d591:	8b 40 04             	mov    0x4(%eax),%eax
c010d594:	83 f8 01             	cmp    $0x1,%eax
c010d597:	74 19                	je     c010d5b2 <proc_init+0x1e4>
c010d599:	68 00 71 11 c0       	push   $0xc0117100
c010d59e:	68 b3 6c 11 c0       	push   $0xc0116cb3
c010d5a3:	68 71 04 00 00       	push   $0x471
c010d5a8:	68 8c 6c 11 c0       	push   $0xc0116c8c
c010d5ad:	e8 3b 2f ff ff       	call   c01004ed <__panic>
}
c010d5b2:	90                   	nop
c010d5b3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c010d5b6:	c9                   	leave  
c010d5b7:	c3                   	ret    

c010d5b8 <cpu_idle>:

// cpu_idle - at the end of kern_init, the first kernel thread idleproc will do below works
void
cpu_idle(void) {
c010d5b8:	55                   	push   %ebp
c010d5b9:	89 e5                	mov    %esp,%ebp
c010d5bb:	83 ec 08             	sub    $0x8,%esp
    while (1) {
        if (current->need_resched) {
c010d5be:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010d5c3:	8b 40 10             	mov    0x10(%eax),%eax
c010d5c6:	85 c0                	test   %eax,%eax
c010d5c8:	74 f4                	je     c010d5be <cpu_idle+0x6>
            schedule();
c010d5ca:	e8 9d 02 00 00       	call   c010d86c <schedule>
        }
    }
c010d5cf:	eb ed                	jmp    c010d5be <cpu_idle+0x6>

c010d5d1 <lab6_set_priority>:
}

//FOR LAB6, set the process's priority (bigger value will get more CPU time) 
void
lab6_set_priority(uint32_t priority)
{
c010d5d1:	55                   	push   %ebp
c010d5d2:	89 e5                	mov    %esp,%ebp
    if (priority == 0)
c010d5d4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010d5d8:	75 11                	jne    c010d5eb <lab6_set_priority+0x1a>
        current->lab6_priority = 1;
c010d5da:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010d5df:	c7 80 c0 00 00 00 01 	movl   $0x1,0xc0(%eax)
c010d5e6:	00 00 00 
    else current->lab6_priority = priority;
}
c010d5e9:	eb 0e                	jmp    c010d5f9 <lab6_set_priority+0x28>
void
lab6_set_priority(uint32_t priority)
{
    if (priority == 0)
        current->lab6_priority = 1;
    else current->lab6_priority = priority;
c010d5eb:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010d5f0:	8b 55 08             	mov    0x8(%ebp),%edx
c010d5f3:	89 90 c0 00 00 00    	mov    %edx,0xc0(%eax)
}
c010d5f9:	90                   	nop
c010d5fa:	5d                   	pop    %ebp
c010d5fb:	c3                   	ret    

c010d5fc <do_sleep>:

// do_sleep - set current process state to sleep and add timer with "time"
//          - then call scheduler. if process run again, delete timer first.
int
do_sleep(unsigned int time) {
c010d5fc:	55                   	push   %ebp
c010d5fd:	89 e5                	mov    %esp,%ebp
c010d5ff:	83 ec 28             	sub    $0x28,%esp
    if (time == 0) {
c010d602:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010d606:	75 07                	jne    c010d60f <do_sleep+0x13>
        return 0;
c010d608:	b8 00 00 00 00       	mov    $0x0,%eax
c010d60d:	eb 72                	jmp    c010d681 <do_sleep+0x85>
    }
    bool intr_flag;
    local_intr_save(intr_flag);
c010d60f:	e8 f3 de ff ff       	call   c010b507 <__intr_save>
c010d614:	89 45 f4             	mov    %eax,-0xc(%ebp)
    timer_t __timer, *timer = timer_init(&__timer, current, time);
c010d617:	8b 55 08             	mov    0x8(%ebp),%edx
c010d61a:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010d61f:	83 ec 04             	sub    $0x4,%esp
c010d622:	52                   	push   %edx
c010d623:	50                   	push   %eax
c010d624:	8d 45 e0             	lea    -0x20(%ebp),%eax
c010d627:	50                   	push   %eax
c010d628:	e8 a1 de ff ff       	call   c010b4ce <timer_init>
c010d62d:	83 c4 10             	add    $0x10,%esp
c010d630:	89 45 f0             	mov    %eax,-0x10(%ebp)
    current->state = PROC_SLEEPING;
c010d633:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010d638:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    current->wait_state = WT_TIMER;
c010d63e:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010d643:	c7 80 90 00 00 00 02 	movl   $0x80000002,0x90(%eax)
c010d64a:	00 00 80 
    add_timer(timer);
c010d64d:	83 ec 0c             	sub    $0xc,%esp
c010d650:	ff 75 f0             	pushl  -0x10(%ebp)
c010d653:	e8 ad 02 00 00       	call   c010d905 <add_timer>
c010d658:	83 c4 10             	add    $0x10,%esp
    local_intr_restore(intr_flag);
c010d65b:	83 ec 0c             	sub    $0xc,%esp
c010d65e:	ff 75 f4             	pushl  -0xc(%ebp)
c010d661:	e8 cb de ff ff       	call   c010b531 <__intr_restore>
c010d666:	83 c4 10             	add    $0x10,%esp

    schedule();
c010d669:	e8 fe 01 00 00       	call   c010d86c <schedule>

    del_timer(timer);
c010d66e:	83 ec 0c             	sub    $0xc,%esp
c010d671:	ff 75 f0             	pushl  -0x10(%ebp)
c010d674:	e8 b2 03 00 00       	call   c010da2b <del_timer>
c010d679:	83 c4 10             	add    $0x10,%esp
    return 0;
c010d67c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010d681:	c9                   	leave  
c010d682:	c3                   	ret    

c010d683 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c010d683:	55                   	push   %ebp
c010d684:	89 e5                	mov    %esp,%ebp
c010d686:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010d689:	9c                   	pushf  
c010d68a:	58                   	pop    %eax
c010d68b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010d68e:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010d691:	25 00 02 00 00       	and    $0x200,%eax
c010d696:	85 c0                	test   %eax,%eax
c010d698:	74 0c                	je     c010d6a6 <__intr_save+0x23>
        intr_disable();
c010d69a:	e8 17 4c ff ff       	call   c01022b6 <intr_disable>
        return 1;
c010d69f:	b8 01 00 00 00       	mov    $0x1,%eax
c010d6a4:	eb 05                	jmp    c010d6ab <__intr_save+0x28>
    }
    return 0;
c010d6a6:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010d6ab:	c9                   	leave  
c010d6ac:	c3                   	ret    

c010d6ad <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010d6ad:	55                   	push   %ebp
c010d6ae:	89 e5                	mov    %esp,%ebp
c010d6b0:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010d6b3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010d6b7:	74 05                	je     c010d6be <__intr_restore+0x11>
        intr_enable();
c010d6b9:	e8 f1 4b ff ff       	call   c01022af <intr_enable>
    }
}
c010d6be:	90                   	nop
c010d6bf:	c9                   	leave  
c010d6c0:	c3                   	ret    

c010d6c1 <sched_class_enqueue>:
static struct sched_class *sched_class;

static struct run_queue *rq;

static inline void
sched_class_enqueue(struct proc_struct *proc) {
c010d6c1:	55                   	push   %ebp
c010d6c2:	89 e5                	mov    %esp,%ebp
c010d6c4:	83 ec 08             	sub    $0x8,%esp
    if (proc != idleproc) {
c010d6c7:	a1 20 20 15 c0       	mov    0xc0152020,%eax
c010d6cc:	39 45 08             	cmp    %eax,0x8(%ebp)
c010d6cf:	74 1a                	je     c010d6eb <sched_class_enqueue+0x2a>
        sched_class->enqueue(rq, proc);
c010d6d1:	a1 9c 40 15 c0       	mov    0xc015409c,%eax
c010d6d6:	8b 40 08             	mov    0x8(%eax),%eax
c010d6d9:	8b 15 a0 40 15 c0    	mov    0xc01540a0,%edx
c010d6df:	83 ec 08             	sub    $0x8,%esp
c010d6e2:	ff 75 08             	pushl  0x8(%ebp)
c010d6e5:	52                   	push   %edx
c010d6e6:	ff d0                	call   *%eax
c010d6e8:	83 c4 10             	add    $0x10,%esp
    }
}
c010d6eb:	90                   	nop
c010d6ec:	c9                   	leave  
c010d6ed:	c3                   	ret    

c010d6ee <sched_class_dequeue>:

static inline void
sched_class_dequeue(struct proc_struct *proc) {
c010d6ee:	55                   	push   %ebp
c010d6ef:	89 e5                	mov    %esp,%ebp
c010d6f1:	83 ec 08             	sub    $0x8,%esp
    sched_class->dequeue(rq, proc);
c010d6f4:	a1 9c 40 15 c0       	mov    0xc015409c,%eax
c010d6f9:	8b 40 0c             	mov    0xc(%eax),%eax
c010d6fc:	8b 15 a0 40 15 c0    	mov    0xc01540a0,%edx
c010d702:	83 ec 08             	sub    $0x8,%esp
c010d705:	ff 75 08             	pushl  0x8(%ebp)
c010d708:	52                   	push   %edx
c010d709:	ff d0                	call   *%eax
c010d70b:	83 c4 10             	add    $0x10,%esp
}
c010d70e:	90                   	nop
c010d70f:	c9                   	leave  
c010d710:	c3                   	ret    

c010d711 <sched_class_pick_next>:

static inline struct proc_struct *
sched_class_pick_next(void) {
c010d711:	55                   	push   %ebp
c010d712:	89 e5                	mov    %esp,%ebp
c010d714:	83 ec 08             	sub    $0x8,%esp
    return sched_class->pick_next(rq);
c010d717:	a1 9c 40 15 c0       	mov    0xc015409c,%eax
c010d71c:	8b 40 10             	mov    0x10(%eax),%eax
c010d71f:	8b 15 a0 40 15 c0    	mov    0xc01540a0,%edx
c010d725:	83 ec 0c             	sub    $0xc,%esp
c010d728:	52                   	push   %edx
c010d729:	ff d0                	call   *%eax
c010d72b:	83 c4 10             	add    $0x10,%esp
}
c010d72e:	c9                   	leave  
c010d72f:	c3                   	ret    

c010d730 <sched_class_proc_tick>:

static void
sched_class_proc_tick(struct proc_struct *proc) {
c010d730:	55                   	push   %ebp
c010d731:	89 e5                	mov    %esp,%ebp
c010d733:	83 ec 08             	sub    $0x8,%esp
    if (proc != idleproc) {
c010d736:	a1 20 20 15 c0       	mov    0xc0152020,%eax
c010d73b:	39 45 08             	cmp    %eax,0x8(%ebp)
c010d73e:	74 1c                	je     c010d75c <sched_class_proc_tick+0x2c>
        sched_class->proc_tick(rq, proc);
c010d740:	a1 9c 40 15 c0       	mov    0xc015409c,%eax
c010d745:	8b 40 14             	mov    0x14(%eax),%eax
c010d748:	8b 15 a0 40 15 c0    	mov    0xc01540a0,%edx
c010d74e:	83 ec 08             	sub    $0x8,%esp
c010d751:	ff 75 08             	pushl  0x8(%ebp)
c010d754:	52                   	push   %edx
c010d755:	ff d0                	call   *%eax
c010d757:	83 c4 10             	add    $0x10,%esp
    }
    else {
        proc->need_resched = 1;
    }
}
c010d75a:	eb 0a                	jmp    c010d766 <sched_class_proc_tick+0x36>
sched_class_proc_tick(struct proc_struct *proc) {
    if (proc != idleproc) {
        sched_class->proc_tick(rq, proc);
    }
    else {
        proc->need_resched = 1;
c010d75c:	8b 45 08             	mov    0x8(%ebp),%eax
c010d75f:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    }
}
c010d766:	90                   	nop
c010d767:	c9                   	leave  
c010d768:	c3                   	ret    

c010d769 <sched_init>:

static struct run_queue __rq;

void
sched_init(void) {
c010d769:	55                   	push   %ebp
c010d76a:	89 e5                	mov    %esp,%ebp
c010d76c:	83 ec 18             	sub    $0x18,%esp
c010d76f:	c7 45 f4 94 40 15 c0 	movl   $0xc0154094,-0xc(%ebp)
c010d776:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d779:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010d77c:	89 50 04             	mov    %edx,0x4(%eax)
c010d77f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d782:	8b 50 04             	mov    0x4(%eax),%edx
c010d785:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d788:	89 10                	mov    %edx,(%eax)
    list_init(&timer_list);

    sched_class = &default_sched_class;
c010d78a:	c7 05 9c 40 15 c0 84 	movl   $0xc014ea84,0xc015409c
c010d791:	ea 14 c0 

    rq = &__rq;
c010d794:	c7 05 a0 40 15 c0 a4 	movl   $0xc01540a4,0xc01540a0
c010d79b:	40 15 c0 
    rq->max_time_slice = MAX_TIME_SLICE;
c010d79e:	a1 a0 40 15 c0       	mov    0xc01540a0,%eax
c010d7a3:	c7 40 0c 05 00 00 00 	movl   $0x5,0xc(%eax)
    sched_class->init(rq);
c010d7aa:	a1 9c 40 15 c0       	mov    0xc015409c,%eax
c010d7af:	8b 40 04             	mov    0x4(%eax),%eax
c010d7b2:	8b 15 a0 40 15 c0    	mov    0xc01540a0,%edx
c010d7b8:	83 ec 0c             	sub    $0xc,%esp
c010d7bb:	52                   	push   %edx
c010d7bc:	ff d0                	call   *%eax
c010d7be:	83 c4 10             	add    $0x10,%esp

    cprintf("sched class: %s\n", sched_class->name);
c010d7c1:	a1 9c 40 15 c0       	mov    0xc015409c,%eax
c010d7c6:	8b 00                	mov    (%eax),%eax
c010d7c8:	83 ec 08             	sub    $0x8,%esp
c010d7cb:	50                   	push   %eax
c010d7cc:	68 28 71 11 c0       	push   $0xc0117128
c010d7d1:	e8 b1 2b ff ff       	call   c0100387 <cprintf>
c010d7d6:	83 c4 10             	add    $0x10,%esp
}
c010d7d9:	90                   	nop
c010d7da:	c9                   	leave  
c010d7db:	c3                   	ret    

c010d7dc <wakeup_proc>:

void
wakeup_proc(struct proc_struct *proc) {
c010d7dc:	55                   	push   %ebp
c010d7dd:	89 e5                	mov    %esp,%ebp
c010d7df:	83 ec 18             	sub    $0x18,%esp
    assert(proc->state != PROC_ZOMBIE);
c010d7e2:	8b 45 08             	mov    0x8(%ebp),%eax
c010d7e5:	8b 00                	mov    (%eax),%eax
c010d7e7:	83 f8 03             	cmp    $0x3,%eax
c010d7ea:	75 16                	jne    c010d802 <wakeup_proc+0x26>
c010d7ec:	68 39 71 11 c0       	push   $0xc0117139
c010d7f1:	68 54 71 11 c0       	push   $0xc0117154
c010d7f6:	6a 3c                	push   $0x3c
c010d7f8:	68 69 71 11 c0       	push   $0xc0117169
c010d7fd:	e8 eb 2c ff ff       	call   c01004ed <__panic>
    bool intr_flag;
    local_intr_save(intr_flag);
c010d802:	e8 7c fe ff ff       	call   c010d683 <__intr_save>
c010d807:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        if (proc->state != PROC_RUNNABLE) {
c010d80a:	8b 45 08             	mov    0x8(%ebp),%eax
c010d80d:	8b 00                	mov    (%eax),%eax
c010d80f:	83 f8 02             	cmp    $0x2,%eax
c010d812:	74 30                	je     c010d844 <wakeup_proc+0x68>
            proc->state = PROC_RUNNABLE;
c010d814:	8b 45 08             	mov    0x8(%ebp),%eax
c010d817:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
            proc->wait_state = 0;
c010d81d:	8b 45 08             	mov    0x8(%ebp),%eax
c010d820:	c7 80 90 00 00 00 00 	movl   $0x0,0x90(%eax)
c010d827:	00 00 00 
            if (proc != current) {
c010d82a:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010d82f:	39 45 08             	cmp    %eax,0x8(%ebp)
c010d832:	74 27                	je     c010d85b <wakeup_proc+0x7f>
                sched_class_enqueue(proc);
c010d834:	83 ec 0c             	sub    $0xc,%esp
c010d837:	ff 75 08             	pushl  0x8(%ebp)
c010d83a:	e8 82 fe ff ff       	call   c010d6c1 <sched_class_enqueue>
c010d83f:	83 c4 10             	add    $0x10,%esp
c010d842:	eb 17                	jmp    c010d85b <wakeup_proc+0x7f>
            }
        }
        else {
            warn("wakeup runnable process.\n");
c010d844:	83 ec 04             	sub    $0x4,%esp
c010d847:	68 7f 71 11 c0       	push   $0xc011717f
c010d84c:	6a 48                	push   $0x48
c010d84e:	68 69 71 11 c0       	push   $0xc0117169
c010d853:	e8 18 2d ff ff       	call   c0100570 <__warn>
c010d858:	83 c4 10             	add    $0x10,%esp
        }
    }
    local_intr_restore(intr_flag);
c010d85b:	83 ec 0c             	sub    $0xc,%esp
c010d85e:	ff 75 f4             	pushl  -0xc(%ebp)
c010d861:	e8 47 fe ff ff       	call   c010d6ad <__intr_restore>
c010d866:	83 c4 10             	add    $0x10,%esp
}
c010d869:	90                   	nop
c010d86a:	c9                   	leave  
c010d86b:	c3                   	ret    

c010d86c <schedule>:

void
schedule(void) {
c010d86c:	55                   	push   %ebp
c010d86d:	89 e5                	mov    %esp,%ebp
c010d86f:	83 ec 18             	sub    $0x18,%esp
    bool intr_flag;
    struct proc_struct *next;
    local_intr_save(intr_flag);
c010d872:	e8 0c fe ff ff       	call   c010d683 <__intr_save>
c010d877:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        current->need_resched = 0;
c010d87a:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010d87f:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
        if (current->state == PROC_RUNNABLE) {
c010d886:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010d88b:	8b 00                	mov    (%eax),%eax
c010d88d:	83 f8 02             	cmp    $0x2,%eax
c010d890:	75 11                	jne    c010d8a3 <schedule+0x37>
            sched_class_enqueue(current);
c010d892:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010d897:	83 ec 0c             	sub    $0xc,%esp
c010d89a:	50                   	push   %eax
c010d89b:	e8 21 fe ff ff       	call   c010d6c1 <sched_class_enqueue>
c010d8a0:	83 c4 10             	add    $0x10,%esp
        }
        if ((next = sched_class_pick_next()) != NULL) {
c010d8a3:	e8 69 fe ff ff       	call   c010d711 <sched_class_pick_next>
c010d8a8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d8ab:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d8af:	74 0e                	je     c010d8bf <schedule+0x53>
            sched_class_dequeue(next);
c010d8b1:	83 ec 0c             	sub    $0xc,%esp
c010d8b4:	ff 75 f4             	pushl  -0xc(%ebp)
c010d8b7:	e8 32 fe ff ff       	call   c010d6ee <sched_class_dequeue>
c010d8bc:	83 c4 10             	add    $0x10,%esp
        }
        if (next == NULL) {
c010d8bf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d8c3:	75 08                	jne    c010d8cd <schedule+0x61>
            next = idleproc;
c010d8c5:	a1 20 20 15 c0       	mov    0xc0152020,%eax
c010d8ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        next->runs ++;
c010d8cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d8d0:	8b 40 08             	mov    0x8(%eax),%eax
c010d8d3:	8d 50 01             	lea    0x1(%eax),%edx
c010d8d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d8d9:	89 50 08             	mov    %edx,0x8(%eax)
        if (next != current) {
c010d8dc:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010d8e1:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010d8e4:	74 0e                	je     c010d8f4 <schedule+0x88>
            proc_run(next);
c010d8e6:	83 ec 0c             	sub    $0xc,%esp
c010d8e9:	ff 75 f4             	pushl  -0xc(%ebp)
c010d8ec:	e8 3d e2 ff ff       	call   c010bb2e <proc_run>
c010d8f1:	83 c4 10             	add    $0x10,%esp
        }
    }
    local_intr_restore(intr_flag);
c010d8f4:	83 ec 0c             	sub    $0xc,%esp
c010d8f7:	ff 75 f0             	pushl  -0x10(%ebp)
c010d8fa:	e8 ae fd ff ff       	call   c010d6ad <__intr_restore>
c010d8ff:	83 c4 10             	add    $0x10,%esp
}
c010d902:	90                   	nop
c010d903:	c9                   	leave  
c010d904:	c3                   	ret    

c010d905 <add_timer>:

void
add_timer(timer_t *timer) {
c010d905:	55                   	push   %ebp
c010d906:	89 e5                	mov    %esp,%ebp
c010d908:	83 ec 38             	sub    $0x38,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010d90b:	e8 73 fd ff ff       	call   c010d683 <__intr_save>
c010d910:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        assert(timer->expires > 0 && timer->proc != NULL);
c010d913:	8b 45 08             	mov    0x8(%ebp),%eax
c010d916:	8b 00                	mov    (%eax),%eax
c010d918:	85 c0                	test   %eax,%eax
c010d91a:	74 0a                	je     c010d926 <add_timer+0x21>
c010d91c:	8b 45 08             	mov    0x8(%ebp),%eax
c010d91f:	8b 40 04             	mov    0x4(%eax),%eax
c010d922:	85 c0                	test   %eax,%eax
c010d924:	75 16                	jne    c010d93c <add_timer+0x37>
c010d926:	68 9c 71 11 c0       	push   $0xc011719c
c010d92b:	68 54 71 11 c0       	push   $0xc0117154
c010d930:	6a 6b                	push   $0x6b
c010d932:	68 69 71 11 c0       	push   $0xc0117169
c010d937:	e8 b1 2b ff ff       	call   c01004ed <__panic>
        assert(list_empty(&(timer->timer_link)));
c010d93c:	8b 45 08             	mov    0x8(%ebp),%eax
c010d93f:	83 c0 08             	add    $0x8,%eax
c010d942:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010d945:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010d948:	8b 40 04             	mov    0x4(%eax),%eax
c010d94b:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c010d94e:	0f 94 c0             	sete   %al
c010d951:	0f b6 c0             	movzbl %al,%eax
c010d954:	85 c0                	test   %eax,%eax
c010d956:	75 16                	jne    c010d96e <add_timer+0x69>
c010d958:	68 c8 71 11 c0       	push   $0xc01171c8
c010d95d:	68 54 71 11 c0       	push   $0xc0117154
c010d962:	6a 6c                	push   $0x6c
c010d964:	68 69 71 11 c0       	push   $0xc0117169
c010d969:	e8 7f 2b ff ff       	call   c01004ed <__panic>
c010d96e:	c7 45 ec 94 40 15 c0 	movl   $0xc0154094,-0x14(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010d975:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d978:	8b 40 04             	mov    0x4(%eax),%eax
        list_entry_t *le = list_next(&timer_list);
c010d97b:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while (le != &timer_list) {
c010d97e:	eb 4a                	jmp    c010d9ca <add_timer+0xc5>
            timer_t *next = le2timer(le, timer_link);
c010d980:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d983:	83 e8 08             	sub    $0x8,%eax
c010d986:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            if (timer->expires < next->expires) {
c010d989:	8b 45 08             	mov    0x8(%ebp),%eax
c010d98c:	8b 10                	mov    (%eax),%edx
c010d98e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010d991:	8b 00                	mov    (%eax),%eax
c010d993:	39 c2                	cmp    %eax,%edx
c010d995:	73 13                	jae    c010d9aa <add_timer+0xa5>
                next->expires -= timer->expires;
c010d997:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010d99a:	8b 10                	mov    (%eax),%edx
c010d99c:	8b 45 08             	mov    0x8(%ebp),%eax
c010d99f:	8b 00                	mov    (%eax),%eax
c010d9a1:	29 c2                	sub    %eax,%edx
c010d9a3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010d9a6:	89 10                	mov    %edx,(%eax)
                break;
c010d9a8:	eb 29                	jmp    c010d9d3 <add_timer+0xce>
            }
            timer->expires -= next->expires;
c010d9aa:	8b 45 08             	mov    0x8(%ebp),%eax
c010d9ad:	8b 10                	mov    (%eax),%edx
c010d9af:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010d9b2:	8b 00                	mov    (%eax),%eax
c010d9b4:	29 c2                	sub    %eax,%edx
c010d9b6:	8b 45 08             	mov    0x8(%ebp),%eax
c010d9b9:	89 10                	mov    %edx,(%eax)
c010d9bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d9be:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010d9c1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d9c4:	8b 40 04             	mov    0x4(%eax),%eax
            le = list_next(le);
c010d9c7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    local_intr_save(intr_flag);
    {
        assert(timer->expires > 0 && timer->proc != NULL);
        assert(list_empty(&(timer->timer_link)));
        list_entry_t *le = list_next(&timer_list);
        while (le != &timer_list) {
c010d9ca:	81 7d f4 94 40 15 c0 	cmpl   $0xc0154094,-0xc(%ebp)
c010d9d1:	75 ad                	jne    c010d980 <add_timer+0x7b>
                break;
            }
            timer->expires -= next->expires;
            le = list_next(le);
        }
        list_add_before(le, &(timer->timer_link));
c010d9d3:	8b 45 08             	mov    0x8(%ebp),%eax
c010d9d6:	8d 50 08             	lea    0x8(%eax),%edx
c010d9d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d9dc:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010d9df:	89 55 d8             	mov    %edx,-0x28(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c010d9e2:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010d9e5:	8b 00                	mov    (%eax),%eax
c010d9e7:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010d9ea:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010d9ed:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010d9f0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010d9f3:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010d9f6:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010d9f9:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010d9fc:	89 10                	mov    %edx,(%eax)
c010d9fe:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010da01:	8b 10                	mov    (%eax),%edx
c010da03:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010da06:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010da09:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010da0c:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010da0f:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010da12:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010da15:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010da18:	89 10                	mov    %edx,(%eax)
    }
    local_intr_restore(intr_flag);
c010da1a:	83 ec 0c             	sub    $0xc,%esp
c010da1d:	ff 75 f0             	pushl  -0x10(%ebp)
c010da20:	e8 88 fc ff ff       	call   c010d6ad <__intr_restore>
c010da25:	83 c4 10             	add    $0x10,%esp
}
c010da28:	90                   	nop
c010da29:	c9                   	leave  
c010da2a:	c3                   	ret    

c010da2b <del_timer>:

// del timer from timer_list
void
del_timer(timer_t *timer) {
c010da2b:	55                   	push   %ebp
c010da2c:	89 e5                	mov    %esp,%ebp
c010da2e:	83 ec 38             	sub    $0x38,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010da31:	e8 4d fc ff ff       	call   c010d683 <__intr_save>
c010da36:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        if (!list_empty(&(timer->timer_link))) {
c010da39:	8b 45 08             	mov    0x8(%ebp),%eax
c010da3c:	83 c0 08             	add    $0x8,%eax
c010da3f:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010da42:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010da45:	8b 40 04             	mov    0x4(%eax),%eax
c010da48:	39 45 e0             	cmp    %eax,-0x20(%ebp)
c010da4b:	0f 94 c0             	sete   %al
c010da4e:	0f b6 c0             	movzbl %al,%eax
c010da51:	85 c0                	test   %eax,%eax
c010da53:	0f 85 89 00 00 00    	jne    c010dae2 <del_timer+0xb7>
            if (timer->expires != 0) {
c010da59:	8b 45 08             	mov    0x8(%ebp),%eax
c010da5c:	8b 00                	mov    (%eax),%eax
c010da5e:	85 c0                	test   %eax,%eax
c010da60:	74 35                	je     c010da97 <del_timer+0x6c>
                list_entry_t *le = list_next(&(timer->timer_link));
c010da62:	8b 45 08             	mov    0x8(%ebp),%eax
c010da65:	83 c0 08             	add    $0x8,%eax
c010da68:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010da6b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010da6e:	8b 40 04             	mov    0x4(%eax),%eax
c010da71:	89 45 e8             	mov    %eax,-0x18(%ebp)
                if (le != &timer_list) {
c010da74:	81 7d e8 94 40 15 c0 	cmpl   $0xc0154094,-0x18(%ebp)
c010da7b:	74 1a                	je     c010da97 <del_timer+0x6c>
                    timer_t *next = le2timer(le, timer_link);
c010da7d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010da80:	83 e8 08             	sub    $0x8,%eax
c010da83:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                    next->expires += timer->expires;
c010da86:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010da89:	8b 10                	mov    (%eax),%edx
c010da8b:	8b 45 08             	mov    0x8(%ebp),%eax
c010da8e:	8b 00                	mov    (%eax),%eax
c010da90:	01 c2                	add    %eax,%edx
c010da92:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010da95:	89 10                	mov    %edx,(%eax)
                }
            }
            list_del_init(&(timer->timer_link));
c010da97:	8b 45 08             	mov    0x8(%ebp),%eax
c010da9a:	83 c0 08             	add    $0x8,%eax
c010da9d:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010daa0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010daa3:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010daa6:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010daa9:	8b 40 04             	mov    0x4(%eax),%eax
c010daac:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010daaf:	8b 12                	mov    (%edx),%edx
c010dab1:	89 55 d8             	mov    %edx,-0x28(%ebp)
c010dab4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010dab7:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010daba:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010dabd:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010dac0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010dac3:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010dac6:	89 10                	mov    %edx,(%eax)
c010dac8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010dacb:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010dace:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010dad1:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010dad4:	89 50 04             	mov    %edx,0x4(%eax)
c010dad7:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010dada:	8b 50 04             	mov    0x4(%eax),%edx
c010dadd:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010dae0:	89 10                	mov    %edx,(%eax)
        }
    }
    local_intr_restore(intr_flag);
c010dae2:	83 ec 0c             	sub    $0xc,%esp
c010dae5:	ff 75 f4             	pushl  -0xc(%ebp)
c010dae8:	e8 c0 fb ff ff       	call   c010d6ad <__intr_restore>
c010daed:	83 c4 10             	add    $0x10,%esp
}
c010daf0:	90                   	nop
c010daf1:	c9                   	leave  
c010daf2:	c3                   	ret    

c010daf3 <run_timer_list>:

// call scheduler to update tick related info, and check the timer is expired? If expired, then wakup proc
void
run_timer_list(void) {
c010daf3:	55                   	push   %ebp
c010daf4:	89 e5                	mov    %esp,%ebp
c010daf6:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010daf9:	e8 85 fb ff ff       	call   c010d683 <__intr_save>
c010dafe:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010db01:	c7 45 e0 94 40 15 c0 	movl   $0xc0154094,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010db08:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010db0b:	8b 40 04             	mov    0x4(%eax),%eax
    {
        list_entry_t *le = list_next(&timer_list);
c010db0e:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (le != &timer_list) {
c010db11:	81 7d f4 94 40 15 c0 	cmpl   $0xc0154094,-0xc(%ebp)
c010db18:	0f 84 e4 00 00 00    	je     c010dc02 <run_timer_list+0x10f>
            timer_t *timer = le2timer(le, timer_link);
c010db1e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010db21:	83 e8 08             	sub    $0x8,%eax
c010db24:	89 45 f0             	mov    %eax,-0x10(%ebp)
            assert(timer->expires != 0);
c010db27:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010db2a:	8b 00                	mov    (%eax),%eax
c010db2c:	85 c0                	test   %eax,%eax
c010db2e:	75 19                	jne    c010db49 <run_timer_list+0x56>
c010db30:	68 e9 71 11 c0       	push   $0xc01171e9
c010db35:	68 54 71 11 c0       	push   $0xc0117154
c010db3a:	68 99 00 00 00       	push   $0x99
c010db3f:	68 69 71 11 c0       	push   $0xc0117169
c010db44:	e8 a4 29 ff ff       	call   c01004ed <__panic>
            timer->expires --;
c010db49:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010db4c:	8b 00                	mov    (%eax),%eax
c010db4e:	8d 50 ff             	lea    -0x1(%eax),%edx
c010db51:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010db54:	89 10                	mov    %edx,(%eax)
            while (timer->expires == 0) {
c010db56:	e9 97 00 00 00       	jmp    c010dbf2 <run_timer_list+0xff>
c010db5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010db5e:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010db61:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010db64:	8b 40 04             	mov    0x4(%eax),%eax
                le = list_next(le);
c010db67:	89 45 f4             	mov    %eax,-0xc(%ebp)
                struct proc_struct *proc = timer->proc;
c010db6a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010db6d:	8b 40 04             	mov    0x4(%eax),%eax
c010db70:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                if (proc->wait_state != 0) {
c010db73:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010db76:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010db7c:	85 c0                	test   %eax,%eax
c010db7e:	74 26                	je     c010dba6 <run_timer_list+0xb3>
                    assert(proc->wait_state & WT_INTERRUPTED);
c010db80:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010db83:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010db89:	85 c0                	test   %eax,%eax
c010db8b:	78 37                	js     c010dbc4 <run_timer_list+0xd1>
c010db8d:	68 00 72 11 c0       	push   $0xc0117200
c010db92:	68 54 71 11 c0       	push   $0xc0117154
c010db97:	68 9f 00 00 00       	push   $0x9f
c010db9c:	68 69 71 11 c0       	push   $0xc0117169
c010dba1:	e8 47 29 ff ff       	call   c01004ed <__panic>
                }
                else {
                    warn("process %d's wait_state == 0.\n", proc->pid);
c010dba6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010dba9:	8b 40 04             	mov    0x4(%eax),%eax
c010dbac:	50                   	push   %eax
c010dbad:	68 24 72 11 c0       	push   $0xc0117224
c010dbb2:	68 a2 00 00 00       	push   $0xa2
c010dbb7:	68 69 71 11 c0       	push   $0xc0117169
c010dbbc:	e8 af 29 ff ff       	call   c0100570 <__warn>
c010dbc1:	83 c4 10             	add    $0x10,%esp
                }
                wakeup_proc(proc);
c010dbc4:	83 ec 0c             	sub    $0xc,%esp
c010dbc7:	ff 75 e4             	pushl  -0x1c(%ebp)
c010dbca:	e8 0d fc ff ff       	call   c010d7dc <wakeup_proc>
c010dbcf:	83 c4 10             	add    $0x10,%esp
                del_timer(timer);
c010dbd2:	83 ec 0c             	sub    $0xc,%esp
c010dbd5:	ff 75 f0             	pushl  -0x10(%ebp)
c010dbd8:	e8 4e fe ff ff       	call   c010da2b <del_timer>
c010dbdd:	83 c4 10             	add    $0x10,%esp
                if (le == &timer_list) {
c010dbe0:	81 7d f4 94 40 15 c0 	cmpl   $0xc0154094,-0xc(%ebp)
c010dbe7:	74 18                	je     c010dc01 <run_timer_list+0x10e>
                    break;
                }
                timer = le2timer(le, timer_link);
c010dbe9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dbec:	83 e8 08             	sub    $0x8,%eax
c010dbef:	89 45 f0             	mov    %eax,-0x10(%ebp)
        list_entry_t *le = list_next(&timer_list);
        if (le != &timer_list) {
            timer_t *timer = le2timer(le, timer_link);
            assert(timer->expires != 0);
            timer->expires --;
            while (timer->expires == 0) {
c010dbf2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010dbf5:	8b 00                	mov    (%eax),%eax
c010dbf7:	85 c0                	test   %eax,%eax
c010dbf9:	0f 84 5c ff ff ff    	je     c010db5b <run_timer_list+0x68>
c010dbff:	eb 01                	jmp    c010dc02 <run_timer_list+0x10f>
                    warn("process %d's wait_state == 0.\n", proc->pid);
                }
                wakeup_proc(proc);
                del_timer(timer);
                if (le == &timer_list) {
                    break;
c010dc01:	90                   	nop
                }
                timer = le2timer(le, timer_link);
            }
        }
        sched_class_proc_tick(current);
c010dc02:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010dc07:	83 ec 0c             	sub    $0xc,%esp
c010dc0a:	50                   	push   %eax
c010dc0b:	e8 20 fb ff ff       	call   c010d730 <sched_class_proc_tick>
c010dc10:	83 c4 10             	add    $0x10,%esp
    }
    local_intr_restore(intr_flag);
c010dc13:	83 ec 0c             	sub    $0xc,%esp
c010dc16:	ff 75 ec             	pushl  -0x14(%ebp)
c010dc19:	e8 8f fa ff ff       	call   c010d6ad <__intr_restore>
c010dc1e:	83 c4 10             	add    $0x10,%esp
}
c010dc21:	90                   	nop
c010dc22:	c9                   	leave  
c010dc23:	c3                   	ret    

c010dc24 <skew_heap_merge>:
}

static inline skew_heap_entry_t *
skew_heap_merge(skew_heap_entry_t *a, skew_heap_entry_t *b,
                compare_f comp)
{
c010dc24:	55                   	push   %ebp
c010dc25:	89 e5                	mov    %esp,%ebp
c010dc27:	83 ec 18             	sub    $0x18,%esp
     if (a == NULL) return b;
c010dc2a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010dc2e:	75 08                	jne    c010dc38 <skew_heap_merge+0x14>
c010dc30:	8b 45 0c             	mov    0xc(%ebp),%eax
c010dc33:	e9 b4 00 00 00       	jmp    c010dcec <skew_heap_merge+0xc8>
     else if (b == NULL) return a;
c010dc38:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010dc3c:	75 08                	jne    c010dc46 <skew_heap_merge+0x22>
c010dc3e:	8b 45 08             	mov    0x8(%ebp),%eax
c010dc41:	e9 a6 00 00 00       	jmp    c010dcec <skew_heap_merge+0xc8>
     
     skew_heap_entry_t *l, *r;
     if (comp(a, b) == -1)
c010dc46:	83 ec 08             	sub    $0x8,%esp
c010dc49:	ff 75 0c             	pushl  0xc(%ebp)
c010dc4c:	ff 75 08             	pushl  0x8(%ebp)
c010dc4f:	8b 45 10             	mov    0x10(%ebp),%eax
c010dc52:	ff d0                	call   *%eax
c010dc54:	83 c4 10             	add    $0x10,%esp
c010dc57:	83 f8 ff             	cmp    $0xffffffff,%eax
c010dc5a:	75 49                	jne    c010dca5 <skew_heap_merge+0x81>
     {
          r = a->left;
c010dc5c:	8b 45 08             	mov    0x8(%ebp),%eax
c010dc5f:	8b 40 04             	mov    0x4(%eax),%eax
c010dc62:	89 45 f4             	mov    %eax,-0xc(%ebp)
          l = skew_heap_merge(a->right, b, comp);
c010dc65:	8b 45 08             	mov    0x8(%ebp),%eax
c010dc68:	8b 40 08             	mov    0x8(%eax),%eax
c010dc6b:	83 ec 04             	sub    $0x4,%esp
c010dc6e:	ff 75 10             	pushl  0x10(%ebp)
c010dc71:	ff 75 0c             	pushl  0xc(%ebp)
c010dc74:	50                   	push   %eax
c010dc75:	e8 aa ff ff ff       	call   c010dc24 <skew_heap_merge>
c010dc7a:	83 c4 10             	add    $0x10,%esp
c010dc7d:	89 45 f0             	mov    %eax,-0x10(%ebp)
          
          a->left = l;
c010dc80:	8b 45 08             	mov    0x8(%ebp),%eax
c010dc83:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010dc86:	89 50 04             	mov    %edx,0x4(%eax)
          a->right = r;
c010dc89:	8b 45 08             	mov    0x8(%ebp),%eax
c010dc8c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010dc8f:	89 50 08             	mov    %edx,0x8(%eax)
          if (l) l->parent = a;
c010dc92:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010dc96:	74 08                	je     c010dca0 <skew_heap_merge+0x7c>
c010dc98:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010dc9b:	8b 55 08             	mov    0x8(%ebp),%edx
c010dc9e:	89 10                	mov    %edx,(%eax)

          return a;
c010dca0:	8b 45 08             	mov    0x8(%ebp),%eax
c010dca3:	eb 47                	jmp    c010dcec <skew_heap_merge+0xc8>
     }
     else
     {
          r = b->left;
c010dca5:	8b 45 0c             	mov    0xc(%ebp),%eax
c010dca8:	8b 40 04             	mov    0x4(%eax),%eax
c010dcab:	89 45 f4             	mov    %eax,-0xc(%ebp)
          l = skew_heap_merge(a, b->right, comp);
c010dcae:	8b 45 0c             	mov    0xc(%ebp),%eax
c010dcb1:	8b 40 08             	mov    0x8(%eax),%eax
c010dcb4:	83 ec 04             	sub    $0x4,%esp
c010dcb7:	ff 75 10             	pushl  0x10(%ebp)
c010dcba:	50                   	push   %eax
c010dcbb:	ff 75 08             	pushl  0x8(%ebp)
c010dcbe:	e8 61 ff ff ff       	call   c010dc24 <skew_heap_merge>
c010dcc3:	83 c4 10             	add    $0x10,%esp
c010dcc6:	89 45 f0             	mov    %eax,-0x10(%ebp)
          
          b->left = l;
c010dcc9:	8b 45 0c             	mov    0xc(%ebp),%eax
c010dccc:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010dccf:	89 50 04             	mov    %edx,0x4(%eax)
          b->right = r;
c010dcd2:	8b 45 0c             	mov    0xc(%ebp),%eax
c010dcd5:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010dcd8:	89 50 08             	mov    %edx,0x8(%eax)
          if (l) l->parent = b;
c010dcdb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010dcdf:	74 08                	je     c010dce9 <skew_heap_merge+0xc5>
c010dce1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010dce4:	8b 55 0c             	mov    0xc(%ebp),%edx
c010dce7:	89 10                	mov    %edx,(%eax)

          return b;
c010dce9:	8b 45 0c             	mov    0xc(%ebp),%eax
     }
}
c010dcec:	c9                   	leave  
c010dced:	c3                   	ret    

c010dcee <proc_stride_comp_f>:

/* The compare function for two skew_heap_node_t's and the
 * corresponding procs*/
static int
proc_stride_comp_f(void *a, void *b)
{
c010dcee:	55                   	push   %ebp
c010dcef:	89 e5                	mov    %esp,%ebp
c010dcf1:	83 ec 10             	sub    $0x10,%esp
     struct proc_struct *p = le2proc(a, lab6_run_pool);
c010dcf4:	8b 45 08             	mov    0x8(%ebp),%eax
c010dcf7:	2d b0 00 00 00       	sub    $0xb0,%eax
c010dcfc:	89 45 fc             	mov    %eax,-0x4(%ebp)
     struct proc_struct *q = le2proc(b, lab6_run_pool);
c010dcff:	8b 45 0c             	mov    0xc(%ebp),%eax
c010dd02:	2d b0 00 00 00       	sub    $0xb0,%eax
c010dd07:	89 45 f8             	mov    %eax,-0x8(%ebp)
     int32_t c = p->lab6_stride - q->lab6_stride;
c010dd0a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010dd0d:	8b 90 bc 00 00 00    	mov    0xbc(%eax),%edx
c010dd13:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010dd16:	8b 80 bc 00 00 00    	mov    0xbc(%eax),%eax
c010dd1c:	29 c2                	sub    %eax,%edx
c010dd1e:	89 d0                	mov    %edx,%eax
c010dd20:	89 45 f4             	mov    %eax,-0xc(%ebp)
     if (c > 0) return 1;
c010dd23:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010dd27:	7e 07                	jle    c010dd30 <proc_stride_comp_f+0x42>
c010dd29:	b8 01 00 00 00       	mov    $0x1,%eax
c010dd2e:	eb 12                	jmp    c010dd42 <proc_stride_comp_f+0x54>
     else if (c == 0) return 0;
c010dd30:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010dd34:	75 07                	jne    c010dd3d <proc_stride_comp_f+0x4f>
c010dd36:	b8 00 00 00 00       	mov    $0x0,%eax
c010dd3b:	eb 05                	jmp    c010dd42 <proc_stride_comp_f+0x54>
     else return -1;
c010dd3d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
c010dd42:	c9                   	leave  
c010dd43:	c3                   	ret    

c010dd44 <stride_init>:
 *   - max_time_slice: no need here, the variable would be assigned by the caller.
 *
 * hint: see libs/list.h for routines of the list structures.
 */
static void
stride_init(struct run_queue *rq) {
c010dd44:	55                   	push   %ebp
c010dd45:	89 e5                	mov    %esp,%ebp
c010dd47:	83 ec 10             	sub    $0x10,%esp
      * (1) init the ready process list: rq->run_list
      * (2) init the run pool: rq->lab6_run_pool
      * (3) set number of process: rq->proc_num to 0       
      */
    // (1) init the ready process list: rq->run_list
    list_init(&(rq->run_list));
c010dd4a:	8b 45 08             	mov    0x8(%ebp),%eax
c010dd4d:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010dd50:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010dd53:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010dd56:	89 50 04             	mov    %edx,0x4(%eax)
c010dd59:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010dd5c:	8b 50 04             	mov    0x4(%eax),%edx
c010dd5f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010dd62:	89 10                	mov    %edx,(%eax)
    // (2) init the run pool: rq->lab6_run_pool
    rq->lab6_run_pool = NULL;
c010dd64:	8b 45 08             	mov    0x8(%ebp),%eax
c010dd67:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
    //(3) set number of process: rq->proc_num to 0 
    rq->proc_num = 0;
c010dd6e:	8b 45 08             	mov    0x8(%ebp),%eax
c010dd71:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
c010dd78:	90                   	nop
c010dd79:	c9                   	leave  
c010dd7a:	c3                   	ret    

c010dd7b <stride_enqueue>:
 * 
 * hint: see libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static void
stride_enqueue(struct run_queue *rq, struct proc_struct *proc) {
c010dd7b:	55                   	push   %ebp
c010dd7c:	89 e5                	mov    %esp,%ebp
c010dd7e:	83 ec 18             	sub    $0x18,%esp
      * (2) recalculate proc->time_slice
      * (3) set proc->rq pointer to rq
      * (4) increase rq->proc_num
      */
    // (1) insert the proc into rq correctly
    rq->lab6_run_pool = skew_heap_insert(rq->lab6_run_pool, &(proc->lab6_run_pool), (compare_f)proc_stride_comp_f);
c010dd81:	8b 45 0c             	mov    0xc(%ebp),%eax
c010dd84:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
c010dd8a:	8b 45 08             	mov    0x8(%ebp),%eax
c010dd8d:	8b 40 10             	mov    0x10(%eax),%eax
c010dd90:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010dd93:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010dd96:	c7 45 ec ee dc 10 c0 	movl   $0xc010dcee,-0x14(%ebp)
c010dd9d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010dda0:	89 45 e8             	mov    %eax,-0x18(%ebp)
     compare_f comp) __attribute__((always_inline));

static inline void
skew_heap_init(skew_heap_entry_t *a)
{
     a->left = a->right = a->parent = NULL;
c010dda3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010dda6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c010ddac:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ddaf:	8b 10                	mov    (%eax),%edx
c010ddb1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ddb4:	89 50 08             	mov    %edx,0x8(%eax)
c010ddb7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ddba:	8b 50 08             	mov    0x8(%eax),%edx
c010ddbd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ddc0:	89 50 04             	mov    %edx,0x4(%eax)
static inline skew_heap_entry_t *
skew_heap_insert(skew_heap_entry_t *a, skew_heap_entry_t *b,
                 compare_f comp)
{
     skew_heap_init(b);
     return skew_heap_merge(a, b, comp);
c010ddc3:	83 ec 04             	sub    $0x4,%esp
c010ddc6:	ff 75 ec             	pushl  -0x14(%ebp)
c010ddc9:	ff 75 f0             	pushl  -0x10(%ebp)
c010ddcc:	ff 75 f4             	pushl  -0xc(%ebp)
c010ddcf:	e8 50 fe ff ff       	call   c010dc24 <skew_heap_merge>
c010ddd4:	83 c4 10             	add    $0x10,%esp
c010ddd7:	89 c2                	mov    %eax,%edx
c010ddd9:	8b 45 08             	mov    0x8(%ebp),%eax
c010dddc:	89 50 10             	mov    %edx,0x10(%eax)
    // (2) recalculate proc->time_slice
    if (proc->time_slice == 0 || proc->time_slice > rq->max_time_slice) {
c010dddf:	8b 45 0c             	mov    0xc(%ebp),%eax
c010dde2:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010dde8:	85 c0                	test   %eax,%eax
c010ddea:	74 13                	je     c010ddff <stride_enqueue+0x84>
c010ddec:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ddef:	8b 90 ac 00 00 00    	mov    0xac(%eax),%edx
c010ddf5:	8b 45 08             	mov    0x8(%ebp),%eax
c010ddf8:	8b 40 0c             	mov    0xc(%eax),%eax
c010ddfb:	39 c2                	cmp    %eax,%edx
c010ddfd:	7e 0f                	jle    c010de0e <stride_enqueue+0x93>
        proc->time_slice = rq->max_time_slice;
c010ddff:	8b 45 08             	mov    0x8(%ebp),%eax
c010de02:	8b 50 0c             	mov    0xc(%eax),%edx
c010de05:	8b 45 0c             	mov    0xc(%ebp),%eax
c010de08:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
    }
    // (3) set proc->rq pointer to rq
    proc->rq = rq;
c010de0e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010de11:	8b 55 08             	mov    0x8(%ebp),%edx
c010de14:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
    // (4) increase rq->proc_num
    rq->proc_num ++;
c010de1a:	8b 45 08             	mov    0x8(%ebp),%eax
c010de1d:	8b 40 08             	mov    0x8(%eax),%eax
c010de20:	8d 50 01             	lea    0x1(%eax),%edx
c010de23:	8b 45 08             	mov    0x8(%ebp),%eax
c010de26:	89 50 08             	mov    %edx,0x8(%eax)
}
c010de29:	90                   	nop
c010de2a:	c9                   	leave  
c010de2b:	c3                   	ret    

c010de2c <stride_dequeue>:
 *
 * hint: see libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static void
stride_dequeue(struct run_queue *rq, struct proc_struct *proc) {
c010de2c:	55                   	push   %ebp
c010de2d:	89 e5                	mov    %esp,%ebp
c010de2f:	83 ec 28             	sub    $0x28,%esp
      * NOTICE: you can use skew_heap or list. Important functions
      *         skew_heap_remove: remove a entry from skew_heap
      *         list_del_init: remove a entry from the  list
      */
    // (1) remove the proc from rq correctly
    rq->lab6_run_pool = skew_heap_remove(rq->lab6_run_pool, &(proc->lab6_run_pool), (compare_f)proc_stride_comp_f);
c010de32:	8b 45 0c             	mov    0xc(%ebp),%eax
c010de35:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
c010de3b:	8b 45 08             	mov    0x8(%ebp),%eax
c010de3e:	8b 40 10             	mov    0x10(%eax),%eax
c010de41:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010de44:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010de47:	c7 45 ec ee dc 10 c0 	movl   $0xc010dcee,-0x14(%ebp)

static inline skew_heap_entry_t *
skew_heap_remove(skew_heap_entry_t *a, skew_heap_entry_t *b,
                 compare_f comp)
{
     skew_heap_entry_t *p   = b->parent;
c010de4e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010de51:	8b 00                	mov    (%eax),%eax
c010de53:	89 45 e8             	mov    %eax,-0x18(%ebp)
     skew_heap_entry_t *rep = skew_heap_merge(b->left, b->right, comp);
c010de56:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010de59:	8b 50 08             	mov    0x8(%eax),%edx
c010de5c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010de5f:	8b 40 04             	mov    0x4(%eax),%eax
c010de62:	83 ec 04             	sub    $0x4,%esp
c010de65:	ff 75 ec             	pushl  -0x14(%ebp)
c010de68:	52                   	push   %edx
c010de69:	50                   	push   %eax
c010de6a:	e8 b5 fd ff ff       	call   c010dc24 <skew_heap_merge>
c010de6f:	83 c4 10             	add    $0x10,%esp
c010de72:	89 45 e4             	mov    %eax,-0x1c(%ebp)
     if (rep) rep->parent = p;
c010de75:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010de79:	74 08                	je     c010de83 <stride_dequeue+0x57>
c010de7b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010de7e:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010de81:	89 10                	mov    %edx,(%eax)
     
     if (p)
c010de83:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010de87:	74 24                	je     c010dead <stride_dequeue+0x81>
     {
          if (p->left == b)
c010de89:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010de8c:	8b 40 04             	mov    0x4(%eax),%eax
c010de8f:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010de92:	75 0b                	jne    c010de9f <stride_dequeue+0x73>
               p->left = rep;
c010de94:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010de97:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010de9a:	89 50 04             	mov    %edx,0x4(%eax)
c010de9d:	eb 09                	jmp    c010dea8 <stride_dequeue+0x7c>
          else p->right = rep;
c010de9f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010dea2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010dea5:	89 50 08             	mov    %edx,0x8(%eax)
          return a;
c010dea8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010deab:	eb 03                	jmp    c010deb0 <stride_dequeue+0x84>
     }
     else return rep;
c010dead:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010deb0:	8b 55 08             	mov    0x8(%ebp),%edx
c010deb3:	89 42 10             	mov    %eax,0x10(%edx)
    rq->proc_num --;
c010deb6:	8b 45 08             	mov    0x8(%ebp),%eax
c010deb9:	8b 40 08             	mov    0x8(%eax),%eax
c010debc:	8d 50 ff             	lea    -0x1(%eax),%edx
c010debf:	8b 45 08             	mov    0x8(%ebp),%eax
c010dec2:	89 50 08             	mov    %edx,0x8(%eax)
}
c010dec5:	90                   	nop
c010dec6:	c9                   	leave  
c010dec7:	c3                   	ret    

c010dec8 <stride_pick_next>:
 *
 * hint: see libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static struct proc_struct *
stride_pick_next(struct run_queue *rq) {
c010dec8:	55                   	push   %ebp
c010dec9:	89 e5                	mov    %esp,%ebp
c010decb:	53                   	push   %ebx
c010decc:	83 ec 10             	sub    $0x10,%esp
      * (3) return p
      */
    // (1) get a  proc_struct pointer p  with the minimum value of stride
    //        (1.1) If using skew_heap, we can use le2proc get the p from rq->lab6_run_poll
    // cprintf("in pick next()...\n");
    if (rq->lab6_run_pool == NULL) {
c010decf:	8b 45 08             	mov    0x8(%ebp),%eax
c010ded2:	8b 40 10             	mov    0x10(%eax),%eax
c010ded5:	85 c0                	test   %eax,%eax
c010ded7:	75 07                	jne    c010dee0 <stride_pick_next+0x18>
        return NULL;
c010ded9:	b8 00 00 00 00       	mov    $0x0,%eax
c010dede:	eb 3b                	jmp    c010df1b <stride_pick_next+0x53>
    }
    struct proc_struct * proc = le2proc(rq->lab6_run_pool, lab6_run_pool);
c010dee0:	8b 45 08             	mov    0x8(%ebp),%eax
c010dee3:	8b 40 10             	mov    0x10(%eax),%eax
c010dee6:	2d b0 00 00 00       	sub    $0xb0,%eax
c010deeb:	89 45 f8             	mov    %eax,-0x8(%ebp)
    // (2) update p's stride value: p->lab6_stride
    proc->lab6_stride += BIG_STRIDE / proc->lab6_priority;
c010deee:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010def1:	8b 88 bc 00 00 00    	mov    0xbc(%eax),%ecx
c010def7:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010defa:	8b 98 c0 00 00 00    	mov    0xc0(%eax),%ebx
c010df00:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
c010df05:	ba 00 00 00 00       	mov    $0x0,%edx
c010df0a:	f7 f3                	div    %ebx
c010df0c:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c010df0f:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010df12:	89 90 bc 00 00 00    	mov    %edx,0xbc(%eax)
    // (3) return p
    // cprintf("next is %s\n", proc->name);
    return proc;
c010df18:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c010df1b:	83 c4 10             	add    $0x10,%esp
c010df1e:	5b                   	pop    %ebx
c010df1f:	5d                   	pop    %ebp
c010df20:	c3                   	ret    

c010df21 <stride_proc_tick>:
 * denotes the time slices left for current
 * process. proc->need_resched is the flag variable for process
 * switching.
 */
static void
stride_proc_tick(struct run_queue *rq, struct proc_struct *proc) {
c010df21:	55                   	push   %ebp
c010df22:	89 e5                	mov    %esp,%ebp
     /* LAB6: YOUR CODE */
    if (proc->time_slice > 0) {
c010df24:	8b 45 0c             	mov    0xc(%ebp),%eax
c010df27:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010df2d:	85 c0                	test   %eax,%eax
c010df2f:	7e 15                	jle    c010df46 <stride_proc_tick+0x25>
        proc->time_slice --;
c010df31:	8b 45 0c             	mov    0xc(%ebp),%eax
c010df34:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010df3a:	8d 50 ff             	lea    -0x1(%eax),%edx
c010df3d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010df40:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
    }
    if (proc->time_slice == 0) {
c010df46:	8b 45 0c             	mov    0xc(%ebp),%eax
c010df49:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010df4f:	85 c0                	test   %eax,%eax
c010df51:	75 0a                	jne    c010df5d <stride_proc_tick+0x3c>
        proc->need_resched = 1;
c010df53:	8b 45 0c             	mov    0xc(%ebp),%eax
c010df56:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    }
}
c010df5d:	90                   	nop
c010df5e:	5d                   	pop    %ebp
c010df5f:	c3                   	ret    

c010df60 <sys_exit>:
#include <stat.h>
#include <dirent.h>
#include <sysfile.h>

static int
sys_exit(uint32_t arg[]) {
c010df60:	55                   	push   %ebp
c010df61:	89 e5                	mov    %esp,%ebp
c010df63:	83 ec 18             	sub    $0x18,%esp
    int error_code = (int)arg[0];
c010df66:	8b 45 08             	mov    0x8(%ebp),%eax
c010df69:	8b 00                	mov    (%eax),%eax
c010df6b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_exit(error_code);
c010df6e:	83 ec 0c             	sub    $0xc,%esp
c010df71:	ff 75 f4             	pushl  -0xc(%ebp)
c010df74:	e8 05 e3 ff ff       	call   c010c27e <do_exit>
c010df79:	83 c4 10             	add    $0x10,%esp
}
c010df7c:	c9                   	leave  
c010df7d:	c3                   	ret    

c010df7e <sys_fork>:

static int
sys_fork(uint32_t arg[]) {
c010df7e:	55                   	push   %ebp
c010df7f:	89 e5                	mov    %esp,%ebp
c010df81:	83 ec 18             	sub    $0x18,%esp
    struct trapframe *tf = current->tf;
c010df84:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010df89:	8b 40 3c             	mov    0x3c(%eax),%eax
c010df8c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uintptr_t stack = tf->tf_esp;
c010df8f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010df92:	8b 40 44             	mov    0x44(%eax),%eax
c010df95:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_fork(0, stack, tf);
c010df98:	83 ec 04             	sub    $0x4,%esp
c010df9b:	ff 75 f4             	pushl  -0xc(%ebp)
c010df9e:	ff 75 f0             	pushl  -0x10(%ebp)
c010dfa1:	6a 00                	push   $0x0
c010dfa3:	e8 7e e1 ff ff       	call   c010c126 <do_fork>
c010dfa8:	83 c4 10             	add    $0x10,%esp
}
c010dfab:	c9                   	leave  
c010dfac:	c3                   	ret    

c010dfad <sys_wait>:

static int
sys_wait(uint32_t arg[]) {
c010dfad:	55                   	push   %ebp
c010dfae:	89 e5                	mov    %esp,%ebp
c010dfb0:	83 ec 18             	sub    $0x18,%esp
    int pid = (int)arg[0];
c010dfb3:	8b 45 08             	mov    0x8(%ebp),%eax
c010dfb6:	8b 00                	mov    (%eax),%eax
c010dfb8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int *store = (int *)arg[1];
c010dfbb:	8b 45 08             	mov    0x8(%ebp),%eax
c010dfbe:	83 c0 04             	add    $0x4,%eax
c010dfc1:	8b 00                	mov    (%eax),%eax
c010dfc3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_wait(pid, store);
c010dfc6:	83 ec 08             	sub    $0x8,%esp
c010dfc9:	ff 75 f0             	pushl  -0x10(%ebp)
c010dfcc:	ff 75 f4             	pushl  -0xc(%ebp)
c010dfcf:	e8 bd ef ff ff       	call   c010cf91 <do_wait>
c010dfd4:	83 c4 10             	add    $0x10,%esp
}
c010dfd7:	c9                   	leave  
c010dfd8:	c3                   	ret    

c010dfd9 <sys_exec>:

static int
sys_exec(uint32_t arg[]) {
c010dfd9:	55                   	push   %ebp
c010dfda:	89 e5                	mov    %esp,%ebp
c010dfdc:	83 ec 18             	sub    $0x18,%esp
    const char *name = (const char *)arg[0];
c010dfdf:	8b 45 08             	mov    0x8(%ebp),%eax
c010dfe2:	8b 00                	mov    (%eax),%eax
c010dfe4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int argc = (int)arg[1];
c010dfe7:	8b 45 08             	mov    0x8(%ebp),%eax
c010dfea:	83 c0 04             	add    $0x4,%eax
c010dfed:	8b 00                	mov    (%eax),%eax
c010dfef:	89 45 f0             	mov    %eax,-0x10(%ebp)
    const char **argv = (const char **)arg[2];
c010dff2:	8b 45 08             	mov    0x8(%ebp),%eax
c010dff5:	83 c0 08             	add    $0x8,%eax
c010dff8:	8b 00                	mov    (%eax),%eax
c010dffa:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return do_execve(name, argc, argv);
c010dffd:	83 ec 04             	sub    $0x4,%esp
c010e000:	ff 75 ec             	pushl  -0x14(%ebp)
c010e003:	ff 75 f0             	pushl  -0x10(%ebp)
c010e006:	ff 75 f4             	pushl  -0xc(%ebp)
c010e009:	e8 4d ed ff ff       	call   c010cd5b <do_execve>
c010e00e:	83 c4 10             	add    $0x10,%esp
}
c010e011:	c9                   	leave  
c010e012:	c3                   	ret    

c010e013 <sys_yield>:

static int
sys_yield(uint32_t arg[]) {
c010e013:	55                   	push   %ebp
c010e014:	89 e5                	mov    %esp,%ebp
c010e016:	83 ec 08             	sub    $0x8,%esp
    return do_yield();
c010e019:	e8 5d ef ff ff       	call   c010cf7b <do_yield>
}
c010e01e:	c9                   	leave  
c010e01f:	c3                   	ret    

c010e020 <sys_kill>:

static int
sys_kill(uint32_t arg[]) {
c010e020:	55                   	push   %ebp
c010e021:	89 e5                	mov    %esp,%ebp
c010e023:	83 ec 18             	sub    $0x18,%esp
    int pid = (int)arg[0];
c010e026:	8b 45 08             	mov    0x8(%ebp),%eax
c010e029:	8b 00                	mov    (%eax),%eax
c010e02b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_kill(pid);
c010e02e:	83 ec 0c             	sub    $0xc,%esp
c010e031:	ff 75 f4             	pushl  -0xc(%ebp)
c010e034:	e8 f5 f0 ff ff       	call   c010d12e <do_kill>
c010e039:	83 c4 10             	add    $0x10,%esp
}
c010e03c:	c9                   	leave  
c010e03d:	c3                   	ret    

c010e03e <sys_getpid>:

static int
sys_getpid(uint32_t arg[]) {
c010e03e:	55                   	push   %ebp
c010e03f:	89 e5                	mov    %esp,%ebp
    return current->pid;
c010e041:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010e046:	8b 40 04             	mov    0x4(%eax),%eax
}
c010e049:	5d                   	pop    %ebp
c010e04a:	c3                   	ret    

c010e04b <sys_putc>:

static int
sys_putc(uint32_t arg[]) {
c010e04b:	55                   	push   %ebp
c010e04c:	89 e5                	mov    %esp,%ebp
c010e04e:	83 ec 18             	sub    $0x18,%esp
    int c = (int)arg[0];
c010e051:	8b 45 08             	mov    0x8(%ebp),%eax
c010e054:	8b 00                	mov    (%eax),%eax
c010e056:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cputchar(c);
c010e059:	83 ec 0c             	sub    $0xc,%esp
c010e05c:	ff 75 f4             	pushl  -0xc(%ebp)
c010e05f:	e8 49 23 ff ff       	call   c01003ad <cputchar>
c010e064:	83 c4 10             	add    $0x10,%esp
    return 0;
c010e067:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010e06c:	c9                   	leave  
c010e06d:	c3                   	ret    

c010e06e <sys_pgdir>:

static int
sys_pgdir(uint32_t arg[]) {
c010e06e:	55                   	push   %ebp
c010e06f:	89 e5                	mov    %esp,%ebp
c010e071:	83 ec 08             	sub    $0x8,%esp
    print_pgdir();
c010e074:	e8 3e a9 ff ff       	call   c01089b7 <print_pgdir>
    return 0;
c010e079:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010e07e:	c9                   	leave  
c010e07f:	c3                   	ret    

c010e080 <sys_gettime>:

static int
sys_gettime(uint32_t arg[]) {
c010e080:	55                   	push   %ebp
c010e081:	89 e5                	mov    %esp,%ebp
    return (int)ticks;
c010e083:	a1 00 51 15 c0       	mov    0xc0155100,%eax
}
c010e088:	5d                   	pop    %ebp
c010e089:	c3                   	ret    

c010e08a <sys_lab6_set_priority>:
static int
sys_lab6_set_priority(uint32_t arg[])
{
c010e08a:	55                   	push   %ebp
c010e08b:	89 e5                	mov    %esp,%ebp
c010e08d:	83 ec 18             	sub    $0x18,%esp
    uint32_t priority = (uint32_t)arg[0];
c010e090:	8b 45 08             	mov    0x8(%ebp),%eax
c010e093:	8b 00                	mov    (%eax),%eax
c010e095:	89 45 f4             	mov    %eax,-0xc(%ebp)
    lab6_set_priority(priority);
c010e098:	83 ec 0c             	sub    $0xc,%esp
c010e09b:	ff 75 f4             	pushl  -0xc(%ebp)
c010e09e:	e8 2e f5 ff ff       	call   c010d5d1 <lab6_set_priority>
c010e0a3:	83 c4 10             	add    $0x10,%esp
    return 0;
c010e0a6:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010e0ab:	c9                   	leave  
c010e0ac:	c3                   	ret    

c010e0ad <sys_sleep>:

static int
sys_sleep(uint32_t arg[]) {
c010e0ad:	55                   	push   %ebp
c010e0ae:	89 e5                	mov    %esp,%ebp
c010e0b0:	83 ec 18             	sub    $0x18,%esp
    unsigned int time = (unsigned int)arg[0];
c010e0b3:	8b 45 08             	mov    0x8(%ebp),%eax
c010e0b6:	8b 00                	mov    (%eax),%eax
c010e0b8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_sleep(time);
c010e0bb:	83 ec 0c             	sub    $0xc,%esp
c010e0be:	ff 75 f4             	pushl  -0xc(%ebp)
c010e0c1:	e8 36 f5 ff ff       	call   c010d5fc <do_sleep>
c010e0c6:	83 c4 10             	add    $0x10,%esp
}
c010e0c9:	c9                   	leave  
c010e0ca:	c3                   	ret    

c010e0cb <sys_open>:

static int
sys_open(uint32_t arg[]) {
c010e0cb:	55                   	push   %ebp
c010e0cc:	89 e5                	mov    %esp,%ebp
c010e0ce:	83 ec 18             	sub    $0x18,%esp
    const char *path = (const char *)arg[0];
c010e0d1:	8b 45 08             	mov    0x8(%ebp),%eax
c010e0d4:	8b 00                	mov    (%eax),%eax
c010e0d6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t open_flags = (uint32_t)arg[1];
c010e0d9:	8b 45 08             	mov    0x8(%ebp),%eax
c010e0dc:	83 c0 04             	add    $0x4,%eax
c010e0df:	8b 00                	mov    (%eax),%eax
c010e0e1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sysfile_open(path, open_flags);
c010e0e4:	83 ec 08             	sub    $0x8,%esp
c010e0e7:	ff 75 f0             	pushl  -0x10(%ebp)
c010e0ea:	ff 75 f4             	pushl  -0xc(%ebp)
c010e0ed:	e8 92 ba ff ff       	call   c0109b84 <sysfile_open>
c010e0f2:	83 c4 10             	add    $0x10,%esp
}
c010e0f5:	c9                   	leave  
c010e0f6:	c3                   	ret    

c010e0f7 <sys_close>:

static int
sys_close(uint32_t arg[]) {
c010e0f7:	55                   	push   %ebp
c010e0f8:	89 e5                	mov    %esp,%ebp
c010e0fa:	83 ec 18             	sub    $0x18,%esp
    int fd = (int)arg[0];
c010e0fd:	8b 45 08             	mov    0x8(%ebp),%eax
c010e100:	8b 00                	mov    (%eax),%eax
c010e102:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return sysfile_close(fd);
c010e105:	83 ec 0c             	sub    $0xc,%esp
c010e108:	ff 75 f4             	pushl  -0xc(%ebp)
c010e10b:	e8 c3 ba ff ff       	call   c0109bd3 <sysfile_close>
c010e110:	83 c4 10             	add    $0x10,%esp
}
c010e113:	c9                   	leave  
c010e114:	c3                   	ret    

c010e115 <sys_read>:

static int
sys_read(uint32_t arg[]) {
c010e115:	55                   	push   %ebp
c010e116:	89 e5                	mov    %esp,%ebp
c010e118:	83 ec 18             	sub    $0x18,%esp
    int fd = (int)arg[0];
c010e11b:	8b 45 08             	mov    0x8(%ebp),%eax
c010e11e:	8b 00                	mov    (%eax),%eax
c010e120:	89 45 f4             	mov    %eax,-0xc(%ebp)
    void *base = (void *)arg[1];
c010e123:	8b 45 08             	mov    0x8(%ebp),%eax
c010e126:	83 c0 04             	add    $0x4,%eax
c010e129:	8b 00                	mov    (%eax),%eax
c010e12b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    size_t len = (size_t)arg[2];
c010e12e:	8b 45 08             	mov    0x8(%ebp),%eax
c010e131:	83 c0 08             	add    $0x8,%eax
c010e134:	8b 00                	mov    (%eax),%eax
c010e136:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return sysfile_read(fd, base, len);
c010e139:	83 ec 04             	sub    $0x4,%esp
c010e13c:	ff 75 ec             	pushl  -0x14(%ebp)
c010e13f:	ff 75 f0             	pushl  -0x10(%ebp)
c010e142:	ff 75 f4             	pushl  -0xc(%ebp)
c010e145:	e8 9f ba ff ff       	call   c0109be9 <sysfile_read>
c010e14a:	83 c4 10             	add    $0x10,%esp
}
c010e14d:	c9                   	leave  
c010e14e:	c3                   	ret    

c010e14f <sys_write>:

static int
sys_write(uint32_t arg[]) {
c010e14f:	55                   	push   %ebp
c010e150:	89 e5                	mov    %esp,%ebp
c010e152:	83 ec 18             	sub    $0x18,%esp
    int fd = (int)arg[0];
c010e155:	8b 45 08             	mov    0x8(%ebp),%eax
c010e158:	8b 00                	mov    (%eax),%eax
c010e15a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    void *base = (void *)arg[1];
c010e15d:	8b 45 08             	mov    0x8(%ebp),%eax
c010e160:	83 c0 04             	add    $0x4,%eax
c010e163:	8b 00                	mov    (%eax),%eax
c010e165:	89 45 f0             	mov    %eax,-0x10(%ebp)
    size_t len = (size_t)arg[2];
c010e168:	8b 45 08             	mov    0x8(%ebp),%eax
c010e16b:	83 c0 08             	add    $0x8,%eax
c010e16e:	8b 00                	mov    (%eax),%eax
c010e170:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return sysfile_write(fd, base, len);
c010e173:	83 ec 04             	sub    $0x4,%esp
c010e176:	ff 75 ec             	pushl  -0x14(%ebp)
c010e179:	ff 75 f0             	pushl  -0x10(%ebp)
c010e17c:	ff 75 f4             	pushl  -0xc(%ebp)
c010e17f:	e8 ba bb ff ff       	call   c0109d3e <sysfile_write>
c010e184:	83 c4 10             	add    $0x10,%esp
}
c010e187:	c9                   	leave  
c010e188:	c3                   	ret    

c010e189 <sys_seek>:

static int
sys_seek(uint32_t arg[]) {
c010e189:	55                   	push   %ebp
c010e18a:	89 e5                	mov    %esp,%ebp
c010e18c:	83 ec 18             	sub    $0x18,%esp
    int fd = (int)arg[0];
c010e18f:	8b 45 08             	mov    0x8(%ebp),%eax
c010e192:	8b 00                	mov    (%eax),%eax
c010e194:	89 45 f4             	mov    %eax,-0xc(%ebp)
    off_t pos = (off_t)arg[1];
c010e197:	8b 45 08             	mov    0x8(%ebp),%eax
c010e19a:	83 c0 04             	add    $0x4,%eax
c010e19d:	8b 00                	mov    (%eax),%eax
c010e19f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int whence = (int)arg[2];
c010e1a2:	8b 45 08             	mov    0x8(%ebp),%eax
c010e1a5:	83 c0 08             	add    $0x8,%eax
c010e1a8:	8b 00                	mov    (%eax),%eax
c010e1aa:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return sysfile_seek(fd, pos, whence);
c010e1ad:	83 ec 04             	sub    $0x4,%esp
c010e1b0:	ff 75 ec             	pushl  -0x14(%ebp)
c010e1b3:	ff 75 f0             	pushl  -0x10(%ebp)
c010e1b6:	ff 75 f4             	pushl  -0xc(%ebp)
c010e1b9:	e8 db bc ff ff       	call   c0109e99 <sysfile_seek>
c010e1be:	83 c4 10             	add    $0x10,%esp
}
c010e1c1:	c9                   	leave  
c010e1c2:	c3                   	ret    

c010e1c3 <sys_fstat>:

static int
sys_fstat(uint32_t arg[]) {
c010e1c3:	55                   	push   %ebp
c010e1c4:	89 e5                	mov    %esp,%ebp
c010e1c6:	83 ec 18             	sub    $0x18,%esp
    int fd = (int)arg[0];
c010e1c9:	8b 45 08             	mov    0x8(%ebp),%eax
c010e1cc:	8b 00                	mov    (%eax),%eax
c010e1ce:	89 45 f4             	mov    %eax,-0xc(%ebp)
    struct stat *stat = (struct stat *)arg[1];
c010e1d1:	8b 45 08             	mov    0x8(%ebp),%eax
c010e1d4:	83 c0 04             	add    $0x4,%eax
c010e1d7:	8b 00                	mov    (%eax),%eax
c010e1d9:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sysfile_fstat(fd, stat);
c010e1dc:	83 ec 08             	sub    $0x8,%esp
c010e1df:	ff 75 f0             	pushl  -0x10(%ebp)
c010e1e2:	ff 75 f4             	pushl  -0xc(%ebp)
c010e1e5:	e8 cb bc ff ff       	call   c0109eb5 <sysfile_fstat>
c010e1ea:	83 c4 10             	add    $0x10,%esp
}
c010e1ed:	c9                   	leave  
c010e1ee:	c3                   	ret    

c010e1ef <sys_fsync>:

static int
sys_fsync(uint32_t arg[]) {
c010e1ef:	55                   	push   %ebp
c010e1f0:	89 e5                	mov    %esp,%ebp
c010e1f2:	83 ec 18             	sub    $0x18,%esp
    int fd = (int)arg[0];
c010e1f5:	8b 45 08             	mov    0x8(%ebp),%eax
c010e1f8:	8b 00                	mov    (%eax),%eax
c010e1fa:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return sysfile_fsync(fd);
c010e1fd:	83 ec 0c             	sub    $0xc,%esp
c010e200:	ff 75 f4             	pushl  -0xc(%ebp)
c010e203:	e8 22 bd ff ff       	call   c0109f2a <sysfile_fsync>
c010e208:	83 c4 10             	add    $0x10,%esp
}
c010e20b:	c9                   	leave  
c010e20c:	c3                   	ret    

c010e20d <sys_getcwd>:

static int
sys_getcwd(uint32_t arg[]) {
c010e20d:	55                   	push   %ebp
c010e20e:	89 e5                	mov    %esp,%ebp
c010e210:	83 ec 18             	sub    $0x18,%esp
    char *buf = (char *)arg[0];
c010e213:	8b 45 08             	mov    0x8(%ebp),%eax
c010e216:	8b 00                	mov    (%eax),%eax
c010e218:	89 45 f4             	mov    %eax,-0xc(%ebp)
    size_t len = (size_t)arg[1];
c010e21b:	8b 45 08             	mov    0x8(%ebp),%eax
c010e21e:	83 c0 04             	add    $0x4,%eax
c010e221:	8b 00                	mov    (%eax),%eax
c010e223:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sysfile_getcwd(buf, len);
c010e226:	83 ec 08             	sub    $0x8,%esp
c010e229:	ff 75 f0             	pushl  -0x10(%ebp)
c010e22c:	ff 75 f4             	pushl  -0xc(%ebp)
c010e22f:	e8 c0 be ff ff       	call   c010a0f4 <sysfile_getcwd>
c010e234:	83 c4 10             	add    $0x10,%esp
}
c010e237:	c9                   	leave  
c010e238:	c3                   	ret    

c010e239 <sys_getdirentry>:

static int
sys_getdirentry(uint32_t arg[]) {
c010e239:	55                   	push   %ebp
c010e23a:	89 e5                	mov    %esp,%ebp
c010e23c:	83 ec 18             	sub    $0x18,%esp
    int fd = (int)arg[0];
c010e23f:	8b 45 08             	mov    0x8(%ebp),%eax
c010e242:	8b 00                	mov    (%eax),%eax
c010e244:	89 45 f4             	mov    %eax,-0xc(%ebp)
    struct dirent *direntp = (struct dirent *)arg[1];
c010e247:	8b 45 08             	mov    0x8(%ebp),%eax
c010e24a:	83 c0 04             	add    $0x4,%eax
c010e24d:	8b 00                	mov    (%eax),%eax
c010e24f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sysfile_getdirentry(fd, direntp);
c010e252:	83 ec 08             	sub    $0x8,%esp
c010e255:	ff 75 f0             	pushl  -0x10(%ebp)
c010e258:	ff 75 f4             	pushl  -0xc(%ebp)
c010e25b:	e8 1a bf ff ff       	call   c010a17a <sysfile_getdirentry>
c010e260:	83 c4 10             	add    $0x10,%esp
}
c010e263:	c9                   	leave  
c010e264:	c3                   	ret    

c010e265 <sys_dup>:

static int
sys_dup(uint32_t arg[]) {
c010e265:	55                   	push   %ebp
c010e266:	89 e5                	mov    %esp,%ebp
c010e268:	83 ec 18             	sub    $0x18,%esp
    int fd1 = (int)arg[0];
c010e26b:	8b 45 08             	mov    0x8(%ebp),%eax
c010e26e:	8b 00                	mov    (%eax),%eax
c010e270:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int fd2 = (int)arg[1];
c010e273:	8b 45 08             	mov    0x8(%ebp),%eax
c010e276:	83 c0 04             	add    $0x4,%eax
c010e279:	8b 00                	mov    (%eax),%eax
c010e27b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sysfile_dup(fd1, fd2);
c010e27e:	83 ec 08             	sub    $0x8,%esp
c010e281:	ff 75 f0             	pushl  -0x10(%ebp)
c010e284:	ff 75 f4             	pushl  -0xc(%ebp)
c010e287:	e8 da bf ff ff       	call   c010a266 <sysfile_dup>
c010e28c:	83 c4 10             	add    $0x10,%esp
}
c010e28f:	c9                   	leave  
c010e290:	c3                   	ret    

c010e291 <syscall>:
};

#define NUM_SYSCALLS        ((sizeof(syscalls)) / (sizeof(syscalls[0])))

void
syscall(void) {
c010e291:	55                   	push   %ebp
c010e292:	89 e5                	mov    %esp,%ebp
c010e294:	83 ec 28             	sub    $0x28,%esp
    struct trapframe *tf = current->tf;
c010e297:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010e29c:	8b 40 3c             	mov    0x3c(%eax),%eax
c010e29f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t arg[5];
    int num = tf->tf_regs.reg_eax;
c010e2a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e2a5:	8b 40 1c             	mov    0x1c(%eax),%eax
c010e2a8:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (num >= 0 && num < NUM_SYSCALLS) {
c010e2ab:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010e2af:	78 64                	js     c010e315 <syscall+0x84>
c010e2b1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e2b4:	3d ff 00 00 00       	cmp    $0xff,%eax
c010e2b9:	77 5a                	ja     c010e315 <syscall+0x84>
        if (syscalls[num] != NULL) {
c010e2bb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e2be:	8b 04 85 a0 ea 14 c0 	mov    -0x3feb1560(,%eax,4),%eax
c010e2c5:	85 c0                	test   %eax,%eax
c010e2c7:	74 4c                	je     c010e315 <syscall+0x84>
            arg[0] = tf->tf_regs.reg_edx;
c010e2c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e2cc:	8b 40 14             	mov    0x14(%eax),%eax
c010e2cf:	89 45 dc             	mov    %eax,-0x24(%ebp)
            arg[1] = tf->tf_regs.reg_ecx;
c010e2d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e2d5:	8b 40 18             	mov    0x18(%eax),%eax
c010e2d8:	89 45 e0             	mov    %eax,-0x20(%ebp)
            arg[2] = tf->tf_regs.reg_ebx;
c010e2db:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e2de:	8b 40 10             	mov    0x10(%eax),%eax
c010e2e1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            arg[3] = tf->tf_regs.reg_edi;
c010e2e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e2e7:	8b 00                	mov    (%eax),%eax
c010e2e9:	89 45 e8             	mov    %eax,-0x18(%ebp)
            arg[4] = tf->tf_regs.reg_esi;
c010e2ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e2ef:	8b 40 04             	mov    0x4(%eax),%eax
c010e2f2:	89 45 ec             	mov    %eax,-0x14(%ebp)
            tf->tf_regs.reg_eax = syscalls[num](arg);
c010e2f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e2f8:	8b 04 85 a0 ea 14 c0 	mov    -0x3feb1560(,%eax,4),%eax
c010e2ff:	83 ec 0c             	sub    $0xc,%esp
c010e302:	8d 55 dc             	lea    -0x24(%ebp),%edx
c010e305:	52                   	push   %edx
c010e306:	ff d0                	call   *%eax
c010e308:	83 c4 10             	add    $0x10,%esp
c010e30b:	89 c2                	mov    %eax,%edx
c010e30d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e310:	89 50 1c             	mov    %edx,0x1c(%eax)
            return ;
c010e313:	eb 3a                	jmp    c010e34f <syscall+0xbe>
        }
    }
    print_trapframe(tf);
c010e315:	83 ec 0c             	sub    $0xc,%esp
c010e318:	ff 75 f4             	pushl  -0xc(%ebp)
c010e31b:	e8 0d 42 ff ff       	call   c010252d <print_trapframe>
c010e320:	83 c4 10             	add    $0x10,%esp
    panic("undefined syscall %d, pid = %d, name = %s.\n",
c010e323:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010e328:	8d 50 48             	lea    0x48(%eax),%edx
c010e32b:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010e330:	8b 40 04             	mov    0x4(%eax),%eax
c010e333:	83 ec 08             	sub    $0x8,%esp
c010e336:	52                   	push   %edx
c010e337:	50                   	push   %eax
c010e338:	ff 75 f0             	pushl  -0x10(%ebp)
c010e33b:	68 54 72 11 c0       	push   $0xc0117254
c010e340:	68 cd 00 00 00       	push   $0xcd
c010e345:	68 80 72 11 c0       	push   $0xc0117280
c010e34a:	e8 9e 21 ff ff       	call   c01004ed <__panic>
            num, current->pid, current->name);
}
c010e34f:	c9                   	leave  
c010e350:	c3                   	ret    

c010e351 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c010e351:	55                   	push   %ebp
c010e352:	89 e5                	mov    %esp,%ebp
    return page - pages;
c010e354:	8b 45 08             	mov    0x8(%ebp),%eax
c010e357:	8b 15 58 52 15 c0    	mov    0xc0155258,%edx
c010e35d:	29 d0                	sub    %edx,%eax
c010e35f:	c1 f8 05             	sar    $0x5,%eax
}
c010e362:	5d                   	pop    %ebp
c010e363:	c3                   	ret    

c010e364 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c010e364:	55                   	push   %ebp
c010e365:	89 e5                	mov    %esp,%ebp
    return page2ppn(page) << PGSHIFT;
c010e367:	ff 75 08             	pushl  0x8(%ebp)
c010e36a:	e8 e2 ff ff ff       	call   c010e351 <page2ppn>
c010e36f:	83 c4 04             	add    $0x4,%esp
c010e372:	c1 e0 0c             	shl    $0xc,%eax
}
c010e375:	c9                   	leave  
c010e376:	c3                   	ret    

c010e377 <page2kva>:
    }
    return &pages[PPN(pa)];
}

static inline void *
page2kva(struct Page *page) {
c010e377:	55                   	push   %ebp
c010e378:	89 e5                	mov    %esp,%ebp
c010e37a:	83 ec 18             	sub    $0x18,%esp
    return KADDR(page2pa(page));
c010e37d:	ff 75 08             	pushl  0x8(%ebp)
c010e380:	e8 df ff ff ff       	call   c010e364 <page2pa>
c010e385:	83 c4 04             	add    $0x4,%esp
c010e388:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010e38b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e38e:	c1 e8 0c             	shr    $0xc,%eax
c010e391:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010e394:	a1 80 1f 15 c0       	mov    0xc0151f80,%eax
c010e399:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010e39c:	72 14                	jb     c010e3b2 <page2kva+0x3b>
c010e39e:	ff 75 f4             	pushl  -0xc(%ebp)
c010e3a1:	68 98 72 11 c0       	push   $0xc0117298
c010e3a6:	6a 65                	push   $0x65
c010e3a8:	68 bb 72 11 c0       	push   $0xc01172bb
c010e3ad:	e8 3b 21 ff ff       	call   c01004ed <__panic>
c010e3b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e3b5:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c010e3ba:	c9                   	leave  
c010e3bb:	c3                   	ret    

c010e3bc <swapfs_init>:
#include <ide.h>
#include <pmm.h>
#include <assert.h>

void
swapfs_init(void) {
c010e3bc:	55                   	push   %ebp
c010e3bd:	89 e5                	mov    %esp,%ebp
c010e3bf:	83 ec 08             	sub    $0x8,%esp
    static_assert((PGSIZE % SECTSIZE) == 0);
    if (!ide_device_valid(SWAP_DEV_NO)) {
c010e3c2:	83 ec 0c             	sub    $0xc,%esp
c010e3c5:	6a 01                	push   $0x1
c010e3c7:	e8 fd 2e ff ff       	call   c01012c9 <ide_device_valid>
c010e3cc:	83 c4 10             	add    $0x10,%esp
c010e3cf:	85 c0                	test   %eax,%eax
c010e3d1:	75 14                	jne    c010e3e7 <swapfs_init+0x2b>
        panic("swap fs isn't available.\n");
c010e3d3:	83 ec 04             	sub    $0x4,%esp
c010e3d6:	68 c9 72 11 c0       	push   $0xc01172c9
c010e3db:	6a 0d                	push   $0xd
c010e3dd:	68 e3 72 11 c0       	push   $0xc01172e3
c010e3e2:	e8 06 21 ff ff       	call   c01004ed <__panic>
    }
    max_swap_offset = ide_device_size(SWAP_DEV_NO) / (PGSIZE / SECTSIZE);
c010e3e7:	83 ec 0c             	sub    $0xc,%esp
c010e3ea:	6a 01                	push   $0x1
c010e3ec:	e8 18 2f ff ff       	call   c0101309 <ide_device_size>
c010e3f1:	83 c4 10             	add    $0x10,%esp
c010e3f4:	c1 e8 03             	shr    $0x3,%eax
c010e3f7:	a3 1c 52 15 c0       	mov    %eax,0xc015521c
}
c010e3fc:	90                   	nop
c010e3fd:	c9                   	leave  
c010e3fe:	c3                   	ret    

c010e3ff <swapfs_read>:

int
swapfs_read(swap_entry_t entry, struct Page *page) {
c010e3ff:	55                   	push   %ebp
c010e400:	89 e5                	mov    %esp,%ebp
c010e402:	83 ec 18             	sub    $0x18,%esp
    return ide_read_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c010e405:	83 ec 0c             	sub    $0xc,%esp
c010e408:	ff 75 0c             	pushl  0xc(%ebp)
c010e40b:	e8 67 ff ff ff       	call   c010e377 <page2kva>
c010e410:	83 c4 10             	add    $0x10,%esp
c010e413:	89 c2                	mov    %eax,%edx
c010e415:	8b 45 08             	mov    0x8(%ebp),%eax
c010e418:	c1 e8 08             	shr    $0x8,%eax
c010e41b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010e41e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010e422:	74 0a                	je     c010e42e <swapfs_read+0x2f>
c010e424:	a1 1c 52 15 c0       	mov    0xc015521c,%eax
c010e429:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010e42c:	72 14                	jb     c010e442 <swapfs_read+0x43>
c010e42e:	ff 75 08             	pushl  0x8(%ebp)
c010e431:	68 f9 72 11 c0       	push   $0xc01172f9
c010e436:	6a 14                	push   $0x14
c010e438:	68 e3 72 11 c0       	push   $0xc01172e3
c010e43d:	e8 ab 20 ff ff       	call   c01004ed <__panic>
c010e442:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e445:	c1 e0 03             	shl    $0x3,%eax
c010e448:	6a 08                	push   $0x8
c010e44a:	52                   	push   %edx
c010e44b:	50                   	push   %eax
c010e44c:	6a 01                	push   $0x1
c010e44e:	e8 f6 2e ff ff       	call   c0101349 <ide_read_secs>
c010e453:	83 c4 10             	add    $0x10,%esp
}
c010e456:	c9                   	leave  
c010e457:	c3                   	ret    

c010e458 <swapfs_write>:

int
swapfs_write(swap_entry_t entry, struct Page *page) {
c010e458:	55                   	push   %ebp
c010e459:	89 e5                	mov    %esp,%ebp
c010e45b:	83 ec 18             	sub    $0x18,%esp
    return ide_write_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c010e45e:	83 ec 0c             	sub    $0xc,%esp
c010e461:	ff 75 0c             	pushl  0xc(%ebp)
c010e464:	e8 0e ff ff ff       	call   c010e377 <page2kva>
c010e469:	83 c4 10             	add    $0x10,%esp
c010e46c:	89 c2                	mov    %eax,%edx
c010e46e:	8b 45 08             	mov    0x8(%ebp),%eax
c010e471:	c1 e8 08             	shr    $0x8,%eax
c010e474:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010e477:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010e47b:	74 0a                	je     c010e487 <swapfs_write+0x2f>
c010e47d:	a1 1c 52 15 c0       	mov    0xc015521c,%eax
c010e482:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010e485:	72 14                	jb     c010e49b <swapfs_write+0x43>
c010e487:	ff 75 08             	pushl  0x8(%ebp)
c010e48a:	68 f9 72 11 c0       	push   $0xc01172f9
c010e48f:	6a 19                	push   $0x19
c010e491:	68 e3 72 11 c0       	push   $0xc01172e3
c010e496:	e8 52 20 ff ff       	call   c01004ed <__panic>
c010e49b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e49e:	c1 e0 03             	shl    $0x3,%eax
c010e4a1:	6a 08                	push   $0x8
c010e4a3:	52                   	push   %edx
c010e4a4:	50                   	push   %eax
c010e4a5:	6a 01                	push   $0x1
c010e4a7:	e8 c7 30 ff ff       	call   c0101573 <ide_write_secs>
c010e4ac:	83 c4 10             	add    $0x10,%esp
}
c010e4af:	c9                   	leave  
c010e4b0:	c3                   	ret    

c010e4b1 <lock_vdev_list>:

static list_entry_t vdev_list;     // device info list in vfs layer
static semaphore_t vdev_list_sem;

static void
lock_vdev_list(void) {
c010e4b1:	55                   	push   %ebp
c010e4b2:	89 e5                	mov    %esp,%ebp
c010e4b4:	83 ec 08             	sub    $0x8,%esp
    down(&vdev_list_sem);
c010e4b7:	83 ec 0c             	sub    $0xc,%esp
c010e4ba:	68 c0 40 15 c0       	push   $0xc01540c0
c010e4bf:	e8 e9 b2 ff ff       	call   c01097ad <down>
c010e4c4:	83 c4 10             	add    $0x10,%esp
}
c010e4c7:	90                   	nop
c010e4c8:	c9                   	leave  
c010e4c9:	c3                   	ret    

c010e4ca <unlock_vdev_list>:

static void
unlock_vdev_list(void) {
c010e4ca:	55                   	push   %ebp
c010e4cb:	89 e5                	mov    %esp,%ebp
c010e4cd:	83 ec 08             	sub    $0x8,%esp
    up(&vdev_list_sem);
c010e4d0:	83 ec 0c             	sub    $0xc,%esp
c010e4d3:	68 c0 40 15 c0       	push   $0xc01540c0
c010e4d8:	e8 b4 b2 ff ff       	call   c0109791 <up>
c010e4dd:	83 c4 10             	add    $0x10,%esp
}
c010e4e0:	90                   	nop
c010e4e1:	c9                   	leave  
c010e4e2:	c3                   	ret    

c010e4e3 <vfs_devlist_init>:

void
vfs_devlist_init(void) {
c010e4e3:	55                   	push   %ebp
c010e4e4:	89 e5                	mov    %esp,%ebp
c010e4e6:	83 ec 18             	sub    $0x18,%esp
c010e4e9:	c7 45 f4 b8 40 15 c0 	movl   $0xc01540b8,-0xc(%ebp)
c010e4f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e4f3:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010e4f6:	89 50 04             	mov    %edx,0x4(%eax)
c010e4f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e4fc:	8b 50 04             	mov    0x4(%eax),%edx
c010e4ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e502:	89 10                	mov    %edx,(%eax)
    list_init(&vdev_list);
    sem_init(&vdev_list_sem, 1);
c010e504:	83 ec 08             	sub    $0x8,%esp
c010e507:	6a 01                	push   $0x1
c010e509:	68 c0 40 15 c0       	push   $0xc01540c0
c010e50e:	e8 11 b1 ff ff       	call   c0109624 <sem_init>
c010e513:	83 c4 10             	add    $0x10,%esp
}
c010e516:	90                   	nop
c010e517:	c9                   	leave  
c010e518:	c3                   	ret    

c010e519 <vfs_cleanup>:

// vfs_cleanup - finally clean (or sync) fs
void
vfs_cleanup(void) {
c010e519:	55                   	push   %ebp
c010e51a:	89 e5                	mov    %esp,%ebp
c010e51c:	83 ec 28             	sub    $0x28,%esp
c010e51f:	c7 45 e4 b8 40 15 c0 	movl   $0xc01540b8,-0x1c(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010e526:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010e529:	8b 40 04             	mov    0x4(%eax),%eax
c010e52c:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c010e52f:	0f 94 c0             	sete   %al
c010e532:	0f b6 c0             	movzbl %al,%eax
    if (!list_empty(&vdev_list)) {
c010e535:	85 c0                	test   %eax,%eax
c010e537:	75 5b                	jne    c010e594 <vfs_cleanup+0x7b>
        lock_vdev_list();
c010e539:	e8 73 ff ff ff       	call   c010e4b1 <lock_vdev_list>
        {
            list_entry_t *list = &vdev_list, *le = list;
c010e53e:	c7 45 ec b8 40 15 c0 	movl   $0xc01540b8,-0x14(%ebp)
c010e545:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e548:	89 45 f4             	mov    %eax,-0xc(%ebp)
            while ((le = list_next(le)) != list) {
c010e54b:	eb 2b                	jmp    c010e578 <vfs_cleanup+0x5f>
                vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010e54d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e550:	83 e8 10             	sub    $0x10,%eax
c010e553:	89 45 e8             	mov    %eax,-0x18(%ebp)
                if (vdev->fs != NULL) {
c010e556:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e559:	8b 40 08             	mov    0x8(%eax),%eax
c010e55c:	85 c0                	test   %eax,%eax
c010e55e:	74 18                	je     c010e578 <vfs_cleanup+0x5f>
                    fsop_cleanup(vdev->fs);
c010e560:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e563:	8b 40 08             	mov    0x8(%eax),%eax
c010e566:	8b 40 7c             	mov    0x7c(%eax),%eax
c010e569:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010e56c:	8b 52 08             	mov    0x8(%edx),%edx
c010e56f:	83 ec 0c             	sub    $0xc,%esp
c010e572:	52                   	push   %edx
c010e573:	ff d0                	call   *%eax
c010e575:	83 c4 10             	add    $0x10,%esp
c010e578:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e57b:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010e57e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e581:	8b 40 04             	mov    0x4(%eax),%eax
vfs_cleanup(void) {
    if (!list_empty(&vdev_list)) {
        lock_vdev_list();
        {
            list_entry_t *list = &vdev_list, *le = list;
            while ((le = list_next(le)) != list) {
c010e584:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010e587:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e58a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010e58d:	75 be                	jne    c010e54d <vfs_cleanup+0x34>
                if (vdev->fs != NULL) {
                    fsop_cleanup(vdev->fs);
                }
            }
        }
        unlock_vdev_list();
c010e58f:	e8 36 ff ff ff       	call   c010e4ca <unlock_vdev_list>
    }
}
c010e594:	90                   	nop
c010e595:	c9                   	leave  
c010e596:	c3                   	ret    

c010e597 <vfs_get_root>:
/*
 * vfs_get_root - Given a device name (stdin, stdout, etc.), hand
 *                back an appropriate inode.
 */
int
vfs_get_root(const char *devname, struct inode **node_store) {
c010e597:	55                   	push   %ebp
c010e598:	89 e5                	mov    %esp,%ebp
c010e59a:	83 ec 28             	sub    $0x28,%esp
    assert(devname != NULL);
c010e59d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010e5a1:	75 16                	jne    c010e5b9 <vfs_get_root+0x22>
c010e5a3:	68 18 73 11 c0       	push   $0xc0117318
c010e5a8:	68 28 73 11 c0       	push   $0xc0117328
c010e5ad:	6a 45                	push   $0x45
c010e5af:	68 3d 73 11 c0       	push   $0xc011733d
c010e5b4:	e8 34 1f ff ff       	call   c01004ed <__panic>
    int ret = -E_NO_DEV;
c010e5b9:	c7 45 f4 f3 ff ff ff 	movl   $0xfffffff3,-0xc(%ebp)
c010e5c0:	c7 45 dc b8 40 15 c0 	movl   $0xc01540b8,-0x24(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010e5c7:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010e5ca:	8b 40 04             	mov    0x4(%eax),%eax
c010e5cd:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c010e5d0:	0f 94 c0             	sete   %al
c010e5d3:	0f b6 c0             	movzbl %al,%eax
    if (!list_empty(&vdev_list)) {
c010e5d6:	85 c0                	test   %eax,%eax
c010e5d8:	0f 85 cb 00 00 00    	jne    c010e6a9 <vfs_get_root+0x112>
        lock_vdev_list();
c010e5de:	e8 ce fe ff ff       	call   c010e4b1 <lock_vdev_list>
        {
            list_entry_t *list = &vdev_list, *le = list;
c010e5e3:	c7 45 e4 b8 40 15 c0 	movl   $0xc01540b8,-0x1c(%ebp)
c010e5ea:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010e5ed:	89 45 f0             	mov    %eax,-0x10(%ebp)
            while ((le = list_next(le)) != list) {
c010e5f0:	e9 94 00 00 00       	jmp    c010e689 <vfs_get_root+0xf2>
                vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010e5f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e5f8:	83 e8 10             	sub    $0x10,%eax
c010e5fb:	89 45 e0             	mov    %eax,-0x20(%ebp)
                if (strcmp(devname, vdev->devname) == 0) {
c010e5fe:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010e601:	8b 00                	mov    (%eax),%eax
c010e603:	83 ec 08             	sub    $0x8,%esp
c010e606:	50                   	push   %eax
c010e607:	ff 75 08             	pushl  0x8(%ebp)
c010e60a:	e8 f4 51 00 00       	call   c0113803 <strcmp>
c010e60f:	83 c4 10             	add    $0x10,%esp
c010e612:	85 c0                	test   %eax,%eax
c010e614:	75 73                	jne    c010e689 <vfs_get_root+0xf2>
                    struct inode *found = NULL;
c010e616:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
                    if (vdev->fs != NULL) {
c010e61d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010e620:	8b 40 08             	mov    0x8(%eax),%eax
c010e623:	85 c0                	test   %eax,%eax
c010e625:	74 1d                	je     c010e644 <vfs_get_root+0xad>
                        found = fsop_get_root(vdev->fs);
c010e627:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010e62a:	8b 40 08             	mov    0x8(%eax),%eax
c010e62d:	8b 40 74             	mov    0x74(%eax),%eax
c010e630:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010e633:	8b 52 08             	mov    0x8(%edx),%edx
c010e636:	83 ec 0c             	sub    $0xc,%esp
c010e639:	52                   	push   %edx
c010e63a:	ff d0                	call   *%eax
c010e63c:	83 c4 10             	add    $0x10,%esp
c010e63f:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010e642:	eb 25                	jmp    c010e669 <vfs_get_root+0xd2>
                    }
                    else if (!vdev->mountable) {
c010e644:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010e647:	8b 40 0c             	mov    0xc(%eax),%eax
c010e64a:	85 c0                	test   %eax,%eax
c010e64c:	75 1b                	jne    c010e669 <vfs_get_root+0xd2>
                        vop_ref_inc(vdev->devnode);
c010e64e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010e651:	8b 40 04             	mov    0x4(%eax),%eax
c010e654:	83 ec 0c             	sub    $0xc,%esp
c010e657:	50                   	push   %eax
c010e658:	e8 fe 0c 00 00       	call   c010f35b <inode_ref_inc>
c010e65d:	83 c4 10             	add    $0x10,%esp
                        found = vdev->devnode;
c010e660:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010e663:	8b 40 04             	mov    0x4(%eax),%eax
c010e666:	89 45 ec             	mov    %eax,-0x14(%ebp)
                    }
                    if (found != NULL) {
c010e669:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010e66d:	74 11                	je     c010e680 <vfs_get_root+0xe9>
                        ret = 0, *node_store = found;
c010e66f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010e676:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e679:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010e67c:	89 10                	mov    %edx,(%eax)
                    }
                    else {
                        ret = -E_NA_DEV;
                    }
                    break;
c010e67e:	eb 24                	jmp    c010e6a4 <vfs_get_root+0x10d>
                    }
                    if (found != NULL) {
                        ret = 0, *node_store = found;
                    }
                    else {
                        ret = -E_NA_DEV;
c010e680:	c7 45 f4 f2 ff ff ff 	movl   $0xfffffff2,-0xc(%ebp)
                    }
                    break;
c010e687:	eb 1b                	jmp    c010e6a4 <vfs_get_root+0x10d>
c010e689:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e68c:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010e68f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e692:	8b 40 04             	mov    0x4(%eax),%eax
    int ret = -E_NO_DEV;
    if (!list_empty(&vdev_list)) {
        lock_vdev_list();
        {
            list_entry_t *list = &vdev_list, *le = list;
            while ((le = list_next(le)) != list) {
c010e695:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010e698:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e69b:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
c010e69e:	0f 85 51 ff ff ff    	jne    c010e5f5 <vfs_get_root+0x5e>
                    }
                    break;
                }
            }
        }
        unlock_vdev_list();
c010e6a4:	e8 21 fe ff ff       	call   c010e4ca <unlock_vdev_list>
    }
    return ret;
c010e6a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010e6ac:	c9                   	leave  
c010e6ad:	c3                   	ret    

c010e6ae <vfs_get_devname>:

/*
 * vfs_get_devname - Given a filesystem, hand back the name of the device it's mounted on.
 */
const char *
vfs_get_devname(struct fs *fs) {
c010e6ae:	55                   	push   %ebp
c010e6af:	89 e5                	mov    %esp,%ebp
c010e6b1:	83 ec 18             	sub    $0x18,%esp
    assert(fs != NULL);
c010e6b4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010e6b8:	75 16                	jne    c010e6d0 <vfs_get_devname+0x22>
c010e6ba:	68 52 73 11 c0       	push   $0xc0117352
c010e6bf:	68 28 73 11 c0       	push   $0xc0117328
c010e6c4:	6a 6a                	push   $0x6a
c010e6c6:	68 3d 73 11 c0       	push   $0xc011733d
c010e6cb:	e8 1d 1e ff ff       	call   c01004ed <__panic>
    list_entry_t *list = &vdev_list, *le = list;
c010e6d0:	c7 45 f0 b8 40 15 c0 	movl   $0xc01540b8,-0x10(%ebp)
c010e6d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e6da:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c010e6dd:	eb 1b                	jmp    c010e6fa <vfs_get_devname+0x4c>
        vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010e6df:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e6e2:	83 e8 10             	sub    $0x10,%eax
c010e6e5:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (vdev->fs == fs) {
c010e6e8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e6eb:	8b 40 08             	mov    0x8(%eax),%eax
c010e6ee:	3b 45 08             	cmp    0x8(%ebp),%eax
c010e6f1:	75 07                	jne    c010e6fa <vfs_get_devname+0x4c>
            return vdev->devname;
c010e6f3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e6f6:	8b 00                	mov    (%eax),%eax
c010e6f8:	eb 1c                	jmp    c010e716 <vfs_get_devname+0x68>
c010e6fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e6fd:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010e700:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e703:	8b 40 04             	mov    0x4(%eax),%eax
 */
const char *
vfs_get_devname(struct fs *fs) {
    assert(fs != NULL);
    list_entry_t *list = &vdev_list, *le = list;
    while ((le = list_next(le)) != list) {
c010e706:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010e709:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e70c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010e70f:	75 ce                	jne    c010e6df <vfs_get_devname+0x31>
        vfs_dev_t *vdev = le2vdev(le, vdev_link);
        if (vdev->fs == fs) {
            return vdev->devname;
        }
    }
    return NULL;
c010e711:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010e716:	c9                   	leave  
c010e717:	c3                   	ret    

c010e718 <check_devname_conflict>:

/*
 * check_devname_confilct - Is there alreadily device which has the same name?
 */
static bool
check_devname_conflict(const char *devname) {
c010e718:	55                   	push   %ebp
c010e719:	89 e5                	mov    %esp,%ebp
c010e71b:	83 ec 18             	sub    $0x18,%esp
    list_entry_t *list = &vdev_list, *le = list;
c010e71e:	c7 45 f0 b8 40 15 c0 	movl   $0xc01540b8,-0x10(%ebp)
c010e725:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e728:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c010e72b:	eb 28                	jmp    c010e755 <check_devname_conflict+0x3d>
        vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010e72d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e730:	83 e8 10             	sub    $0x10,%eax
c010e733:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (strcmp(vdev->devname, devname) == 0) {
c010e736:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e739:	8b 00                	mov    (%eax),%eax
c010e73b:	83 ec 08             	sub    $0x8,%esp
c010e73e:	ff 75 08             	pushl  0x8(%ebp)
c010e741:	50                   	push   %eax
c010e742:	e8 bc 50 00 00       	call   c0113803 <strcmp>
c010e747:	83 c4 10             	add    $0x10,%esp
c010e74a:	85 c0                	test   %eax,%eax
c010e74c:	75 07                	jne    c010e755 <check_devname_conflict+0x3d>
            return 0;
c010e74e:	b8 00 00 00 00       	mov    $0x0,%eax
c010e753:	eb 1c                	jmp    c010e771 <check_devname_conflict+0x59>
c010e755:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e758:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010e75b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e75e:	8b 40 04             	mov    0x4(%eax),%eax
 * check_devname_confilct - Is there alreadily device which has the same name?
 */
static bool
check_devname_conflict(const char *devname) {
    list_entry_t *list = &vdev_list, *le = list;
    while ((le = list_next(le)) != list) {
c010e761:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010e764:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e767:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010e76a:	75 c1                	jne    c010e72d <check_devname_conflict+0x15>
        vfs_dev_t *vdev = le2vdev(le, vdev_link);
        if (strcmp(vdev->devname, devname) == 0) {
            return 0;
        }
    }
    return 1;
c010e76c:	b8 01 00 00 00       	mov    $0x1,%eax
}
c010e771:	c9                   	leave  
c010e772:	c3                   	ret    

c010e773 <vfs_do_add>:
* If "mountable" is set, the device will be treated as one that expects
* to have a filesystem mounted on it, and a raw device will be created
* for direct access.
*/
static int
vfs_do_add(const char *devname, struct inode *devnode, struct fs *fs, bool mountable) {
c010e773:	55                   	push   %ebp
c010e774:	89 e5                	mov    %esp,%ebp
c010e776:	83 ec 38             	sub    $0x38,%esp
    assert(devname != NULL);
c010e779:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010e77d:	75 19                	jne    c010e798 <vfs_do_add+0x25>
c010e77f:	68 18 73 11 c0       	push   $0xc0117318
c010e784:	68 28 73 11 c0       	push   $0xc0117328
c010e789:	68 8e 00 00 00       	push   $0x8e
c010e78e:	68 3d 73 11 c0       	push   $0xc011733d
c010e793:	e8 55 1d ff ff       	call   c01004ed <__panic>
    assert((devnode == NULL && !mountable) || (devnode != NULL && check_inode_type(devnode, device)));
c010e798:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010e79c:	75 06                	jne    c010e7a4 <vfs_do_add+0x31>
c010e79e:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010e7a2:	74 2c                	je     c010e7d0 <vfs_do_add+0x5d>
c010e7a4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010e7a8:	74 0d                	je     c010e7b7 <vfs_do_add+0x44>
c010e7aa:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e7ad:	8b 40 2c             	mov    0x2c(%eax),%eax
c010e7b0:	3d 34 12 00 00       	cmp    $0x1234,%eax
c010e7b5:	74 19                	je     c010e7d0 <vfs_do_add+0x5d>
c010e7b7:	68 60 73 11 c0       	push   $0xc0117360
c010e7bc:	68 28 73 11 c0       	push   $0xc0117328
c010e7c1:	68 8f 00 00 00       	push   $0x8f
c010e7c6:	68 3d 73 11 c0       	push   $0xc011733d
c010e7cb:	e8 1d 1d ff ff       	call   c01004ed <__panic>
    if (strlen(devname) > FS_MAX_DNAME_LEN) {
c010e7d0:	83 ec 0c             	sub    $0xc,%esp
c010e7d3:	ff 75 08             	pushl  0x8(%ebp)
c010e7d6:	e8 2d 4f 00 00       	call   c0113708 <strlen>
c010e7db:	83 c4 10             	add    $0x10,%esp
c010e7de:	83 f8 1f             	cmp    $0x1f,%eax
c010e7e1:	76 0a                	jbe    c010e7ed <vfs_do_add+0x7a>
        return -E_TOO_BIG;
c010e7e3:	b8 f4 ff ff ff       	mov    $0xfffffff4,%eax
c010e7e8:	e9 0d 01 00 00       	jmp    c010e8fa <vfs_do_add+0x187>
    }

    int ret = -E_NO_MEM;
c010e7ed:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    char *s_devname;
    if ((s_devname = strdup(devname)) == NULL) {
c010e7f4:	83 ec 0c             	sub    $0xc,%esp
c010e7f7:	ff 75 08             	pushl  0x8(%ebp)
c010e7fa:	e8 50 1a ff ff       	call   c010024f <strdup>
c010e7ff:	83 c4 10             	add    $0x10,%esp
c010e802:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010e805:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010e809:	75 08                	jne    c010e813 <vfs_do_add+0xa0>
        return ret;
c010e80b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e80e:	e9 e7 00 00 00       	jmp    c010e8fa <vfs_do_add+0x187>
    }

    vfs_dev_t *vdev;
    if ((vdev = kmalloc(sizeof(vfs_dev_t))) == NULL) {
c010e813:	83 ec 0c             	sub    $0xc,%esp
c010e816:	6a 18                	push   $0x18
c010e818:	e8 e5 6a ff ff       	call   c0105302 <kmalloc>
c010e81d:	83 c4 10             	add    $0x10,%esp
c010e820:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010e823:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010e827:	0f 84 bb 00 00 00    	je     c010e8e8 <vfs_do_add+0x175>
        goto failed_cleanup_name;
    }

    ret = -E_EXISTS;
c010e82d:	c7 45 f4 e9 ff ff ff 	movl   $0xffffffe9,-0xc(%ebp)
    lock_vdev_list();
c010e834:	e8 78 fc ff ff       	call   c010e4b1 <lock_vdev_list>
    if (!check_devname_conflict(s_devname)) {
c010e839:	83 ec 0c             	sub    $0xc,%esp
c010e83c:	ff 75 f0             	pushl  -0x10(%ebp)
c010e83f:	e8 d4 fe ff ff       	call   c010e718 <check_devname_conflict>
c010e844:	83 c4 10             	add    $0x10,%esp
c010e847:	85 c0                	test   %eax,%eax
c010e849:	75 19                	jne    c010e864 <vfs_do_add+0xf1>
        unlock_vdev_list();
c010e84b:	e8 7a fc ff ff       	call   c010e4ca <unlock_vdev_list>
        goto failed_cleanup_vdev;
c010e850:	90                   	nop
    list_add(&vdev_list, &(vdev->vdev_link));
    unlock_vdev_list();
    return 0;

failed_cleanup_vdev:
    kfree(vdev);
c010e851:	83 ec 0c             	sub    $0xc,%esp
c010e854:	ff 75 ec             	pushl  -0x14(%ebp)
c010e857:	e8 be 6a ff ff       	call   c010531a <kfree>
c010e85c:	83 c4 10             	add    $0x10,%esp
c010e85f:	e9 85 00 00 00       	jmp    c010e8e9 <vfs_do_add+0x176>
    lock_vdev_list();
    if (!check_devname_conflict(s_devname)) {
        unlock_vdev_list();
        goto failed_cleanup_vdev;
    }
    vdev->devname = s_devname;
c010e864:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e867:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010e86a:	89 10                	mov    %edx,(%eax)
    vdev->devnode = devnode;
c010e86c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e86f:	8b 55 0c             	mov    0xc(%ebp),%edx
c010e872:	89 50 04             	mov    %edx,0x4(%eax)
    vdev->mountable = mountable;
c010e875:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e878:	8b 55 14             	mov    0x14(%ebp),%edx
c010e87b:	89 50 0c             	mov    %edx,0xc(%eax)
    vdev->fs = fs;
c010e87e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e881:	8b 55 10             	mov    0x10(%ebp),%edx
c010e884:	89 50 08             	mov    %edx,0x8(%eax)

    list_add(&vdev_list, &(vdev->vdev_link));
c010e887:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e88a:	83 c0 10             	add    $0x10,%eax
c010e88d:	c7 45 e8 b8 40 15 c0 	movl   $0xc01540b8,-0x18(%ebp)
c010e894:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010e897:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e89a:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010e89d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010e8a0:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010e8a3:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010e8a6:	8b 40 04             	mov    0x4(%eax),%eax
c010e8a9:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010e8ac:	89 55 d8             	mov    %edx,-0x28(%ebp)
c010e8af:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010e8b2:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010e8b5:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010e8b8:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010e8bb:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010e8be:	89 10                	mov    %edx,(%eax)
c010e8c0:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010e8c3:	8b 10                	mov    (%eax),%edx
c010e8c5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010e8c8:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010e8cb:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010e8ce:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010e8d1:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010e8d4:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010e8d7:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010e8da:	89 10                	mov    %edx,(%eax)
    unlock_vdev_list();
c010e8dc:	e8 e9 fb ff ff       	call   c010e4ca <unlock_vdev_list>
    return 0;
c010e8e1:	b8 00 00 00 00       	mov    $0x0,%eax
c010e8e6:	eb 12                	jmp    c010e8fa <vfs_do_add+0x187>
        return ret;
    }

    vfs_dev_t *vdev;
    if ((vdev = kmalloc(sizeof(vfs_dev_t))) == NULL) {
        goto failed_cleanup_name;
c010e8e8:	90                   	nop
    return 0;

failed_cleanup_vdev:
    kfree(vdev);
failed_cleanup_name:
    kfree(s_devname);
c010e8e9:	83 ec 0c             	sub    $0xc,%esp
c010e8ec:	ff 75 f0             	pushl  -0x10(%ebp)
c010e8ef:	e8 26 6a ff ff       	call   c010531a <kfree>
c010e8f4:	83 c4 10             	add    $0x10,%esp
    return ret;
c010e8f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010e8fa:	c9                   	leave  
c010e8fb:	c3                   	ret    

c010e8fc <vfs_add_fs>:
/*
 * vfs_add_fs - Add a new fs,  by name. See  vfs_do_add information for the description of
 *              mountable.
 */
int
vfs_add_fs(const char *devname, struct fs *fs) {
c010e8fc:	55                   	push   %ebp
c010e8fd:	89 e5                	mov    %esp,%ebp
c010e8ff:	83 ec 08             	sub    $0x8,%esp
    return vfs_do_add(devname, NULL, fs, 0);
c010e902:	6a 00                	push   $0x0
c010e904:	ff 75 0c             	pushl  0xc(%ebp)
c010e907:	6a 00                	push   $0x0
c010e909:	ff 75 08             	pushl  0x8(%ebp)
c010e90c:	e8 62 fe ff ff       	call   c010e773 <vfs_do_add>
c010e911:	83 c4 10             	add    $0x10,%esp
}
c010e914:	c9                   	leave  
c010e915:	c3                   	ret    

c010e916 <vfs_add_dev>:
/*
 * vfs_add_dev - Add a new device, by name. See  vfs_do_add information for the description of
 *               mountable.
 */
int
vfs_add_dev(const char *devname, struct inode *devnode, bool mountable) {
c010e916:	55                   	push   %ebp
c010e917:	89 e5                	mov    %esp,%ebp
c010e919:	83 ec 08             	sub    $0x8,%esp
    return vfs_do_add(devname, devnode, NULL, mountable);
c010e91c:	ff 75 10             	pushl  0x10(%ebp)
c010e91f:	6a 00                	push   $0x0
c010e921:	ff 75 0c             	pushl  0xc(%ebp)
c010e924:	ff 75 08             	pushl  0x8(%ebp)
c010e927:	e8 47 fe ff ff       	call   c010e773 <vfs_do_add>
c010e92c:	83 c4 10             	add    $0x10,%esp
}
c010e92f:	c9                   	leave  
c010e930:	c3                   	ret    

c010e931 <find_mount>:
/*
 * find_mount - Look for a mountable device named DEVNAME.
 *              Should already hold vdev_list lock.
 */
static int
find_mount(const char *devname, vfs_dev_t **vdev_store) {
c010e931:	55                   	push   %ebp
c010e932:	89 e5                	mov    %esp,%ebp
c010e934:	83 ec 18             	sub    $0x18,%esp
    assert(devname != NULL);
c010e937:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010e93b:	75 19                	jne    c010e956 <find_mount+0x25>
c010e93d:	68 18 73 11 c0       	push   $0xc0117318
c010e942:	68 28 73 11 c0       	push   $0xc0117328
c010e947:	68 cd 00 00 00       	push   $0xcd
c010e94c:	68 3d 73 11 c0       	push   $0xc011733d
c010e951:	e8 97 1b ff ff       	call   c01004ed <__panic>
    list_entry_t *list = &vdev_list, *le = list;
c010e956:	c7 45 f0 b8 40 15 c0 	movl   $0xc01540b8,-0x10(%ebp)
c010e95d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e960:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c010e963:	eb 3a                	jmp    c010e99f <find_mount+0x6e>
        vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010e965:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e968:	83 e8 10             	sub    $0x10,%eax
c010e96b:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (vdev->mountable && strcmp(vdev->devname, devname) == 0) {
c010e96e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e971:	8b 40 0c             	mov    0xc(%eax),%eax
c010e974:	85 c0                	test   %eax,%eax
c010e976:	74 27                	je     c010e99f <find_mount+0x6e>
c010e978:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e97b:	8b 00                	mov    (%eax),%eax
c010e97d:	83 ec 08             	sub    $0x8,%esp
c010e980:	ff 75 08             	pushl  0x8(%ebp)
c010e983:	50                   	push   %eax
c010e984:	e8 7a 4e 00 00       	call   c0113803 <strcmp>
c010e989:	83 c4 10             	add    $0x10,%esp
c010e98c:	85 c0                	test   %eax,%eax
c010e98e:	75 0f                	jne    c010e99f <find_mount+0x6e>
            *vdev_store = vdev;
c010e990:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e993:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010e996:	89 10                	mov    %edx,(%eax)
            return 0;
c010e998:	b8 00 00 00 00       	mov    $0x0,%eax
c010e99d:	eb 1c                	jmp    c010e9bb <find_mount+0x8a>
c010e99f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e9a2:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010e9a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e9a8:	8b 40 04             	mov    0x4(%eax),%eax
 */
static int
find_mount(const char *devname, vfs_dev_t **vdev_store) {
    assert(devname != NULL);
    list_entry_t *list = &vdev_list, *le = list;
    while ((le = list_next(le)) != list) {
c010e9ab:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010e9ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e9b1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010e9b4:	75 af                	jne    c010e965 <find_mount+0x34>
        if (vdev->mountable && strcmp(vdev->devname, devname) == 0) {
            *vdev_store = vdev;
            return 0;
        }
    }
    return -E_NO_DEV;
c010e9b6:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
}
c010e9bb:	c9                   	leave  
c010e9bc:	c3                   	ret    

c010e9bd <vfs_mount>:
 *             set up the filesystem and hand back a struct fs.
 *
 * The DATA argument is passed through unchanged to MOUNTFUNC.
 */
int
vfs_mount(const char *devname, int (*mountfunc)(struct device *dev, struct fs **fs_store)) {
c010e9bd:	55                   	push   %ebp
c010e9be:	89 e5                	mov    %esp,%ebp
c010e9c0:	83 ec 18             	sub    $0x18,%esp
    int ret;
    lock_vdev_list();
c010e9c3:	e8 e9 fa ff ff       	call   c010e4b1 <lock_vdev_list>
    vfs_dev_t *vdev;
    if ((ret = find_mount(devname, &vdev)) != 0) {
c010e9c8:	83 ec 08             	sub    $0x8,%esp
c010e9cb:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010e9ce:	50                   	push   %eax
c010e9cf:	ff 75 08             	pushl  0x8(%ebp)
c010e9d2:	e8 5a ff ff ff       	call   c010e931 <find_mount>
c010e9d7:	83 c4 10             	add    $0x10,%esp
c010e9da:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010e9dd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010e9e1:	0f 85 d6 00 00 00    	jne    c010eabd <vfs_mount+0x100>
        goto out;
    }
    if (vdev->fs != NULL) {
c010e9e7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e9ea:	8b 40 08             	mov    0x8(%eax),%eax
c010e9ed:	85 c0                	test   %eax,%eax
c010e9ef:	74 0c                	je     c010e9fd <vfs_mount+0x40>
        ret = -E_BUSY;
c010e9f1:	c7 45 f4 f1 ff ff ff 	movl   $0xfffffff1,-0xc(%ebp)
        goto out;
c010e9f8:	e9 c1 00 00 00       	jmp    c010eabe <vfs_mount+0x101>
    }
    assert(vdev->devname != NULL && vdev->mountable);
c010e9fd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ea00:	8b 00                	mov    (%eax),%eax
c010ea02:	85 c0                	test   %eax,%eax
c010ea04:	74 0a                	je     c010ea10 <vfs_mount+0x53>
c010ea06:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ea09:	8b 40 0c             	mov    0xc(%eax),%eax
c010ea0c:	85 c0                	test   %eax,%eax
c010ea0e:	75 19                	jne    c010ea29 <vfs_mount+0x6c>
c010ea10:	68 bc 73 11 c0       	push   $0xc01173bc
c010ea15:	68 28 73 11 c0       	push   $0xc0117328
c010ea1a:	68 eb 00 00 00       	push   $0xeb
c010ea1f:	68 3d 73 11 c0       	push   $0xc011733d
c010ea24:	e8 c4 1a ff ff       	call   c01004ed <__panic>

    struct device *dev = vop_info(vdev->devnode, device);
c010ea29:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ea2c:	8b 40 04             	mov    0x4(%eax),%eax
c010ea2f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010ea32:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010ea36:	74 0d                	je     c010ea45 <vfs_mount+0x88>
c010ea38:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ea3b:	8b 40 2c             	mov    0x2c(%eax),%eax
c010ea3e:	3d 34 12 00 00       	cmp    $0x1234,%eax
c010ea43:	74 19                	je     c010ea5e <vfs_mount+0xa1>
c010ea45:	68 e8 73 11 c0       	push   $0xc01173e8
c010ea4a:	68 28 73 11 c0       	push   $0xc0117328
c010ea4f:	68 ed 00 00 00       	push   $0xed
c010ea54:	68 3d 73 11 c0       	push   $0xc011733d
c010ea59:	e8 8f 1a ff ff       	call   c01004ed <__panic>
c010ea5e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ea61:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if ((ret = mountfunc(dev, &(vdev->fs))) == 0) {
c010ea64:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ea67:	83 c0 08             	add    $0x8,%eax
c010ea6a:	83 ec 08             	sub    $0x8,%esp
c010ea6d:	50                   	push   %eax
c010ea6e:	ff 75 ec             	pushl  -0x14(%ebp)
c010ea71:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ea74:	ff d0                	call   *%eax
c010ea76:	83 c4 10             	add    $0x10,%esp
c010ea79:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ea7c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ea80:	75 3c                	jne    c010eabe <vfs_mount+0x101>
        assert(vdev->fs != NULL);
c010ea82:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ea85:	8b 40 08             	mov    0x8(%eax),%eax
c010ea88:	85 c0                	test   %eax,%eax
c010ea8a:	75 19                	jne    c010eaa5 <vfs_mount+0xe8>
c010ea8c:	68 1b 74 11 c0       	push   $0xc011741b
c010ea91:	68 28 73 11 c0       	push   $0xc0117328
c010ea96:	68 ef 00 00 00       	push   $0xef
c010ea9b:	68 3d 73 11 c0       	push   $0xc011733d
c010eaa0:	e8 48 1a ff ff       	call   c01004ed <__panic>
        cprintf("vfs: mount %s.\n", vdev->devname);
c010eaa5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010eaa8:	8b 00                	mov    (%eax),%eax
c010eaaa:	83 ec 08             	sub    $0x8,%esp
c010eaad:	50                   	push   %eax
c010eaae:	68 2c 74 11 c0       	push   $0xc011742c
c010eab3:	e8 cf 18 ff ff       	call   c0100387 <cprintf>
c010eab8:	83 c4 10             	add    $0x10,%esp
c010eabb:	eb 01                	jmp    c010eabe <vfs_mount+0x101>
vfs_mount(const char *devname, int (*mountfunc)(struct device *dev, struct fs **fs_store)) {
    int ret;
    lock_vdev_list();
    vfs_dev_t *vdev;
    if ((ret = find_mount(devname, &vdev)) != 0) {
        goto out;
c010eabd:	90                   	nop
        assert(vdev->fs != NULL);
        cprintf("vfs: mount %s.\n", vdev->devname);
    }

out:
    unlock_vdev_list();
c010eabe:	e8 07 fa ff ff       	call   c010e4ca <unlock_vdev_list>
    return ret;
c010eac3:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010eac6:	c9                   	leave  
c010eac7:	c3                   	ret    

c010eac8 <vfs_unmount>:
/*
 * vfs_unmount - Unmount a filesystem/device by name.
 *               First calls FSOP_SYNC on the filesystem; then calls FSOP_UNMOUNT.
 */
int
vfs_unmount(const char *devname) {
c010eac8:	55                   	push   %ebp
c010eac9:	89 e5                	mov    %esp,%ebp
c010eacb:	83 ec 18             	sub    $0x18,%esp
    int ret;
    lock_vdev_list();
c010eace:	e8 de f9 ff ff       	call   c010e4b1 <lock_vdev_list>
    vfs_dev_t *vdev;
    if ((ret = find_mount(devname, &vdev)) != 0) {
c010ead3:	83 ec 08             	sub    $0x8,%esp
c010ead6:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010ead9:	50                   	push   %eax
c010eada:	ff 75 08             	pushl  0x8(%ebp)
c010eadd:	e8 4f fe ff ff       	call   c010e931 <find_mount>
c010eae2:	83 c4 10             	add    $0x10,%esp
c010eae5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010eae8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010eaec:	0f 85 a6 00 00 00    	jne    c010eb98 <vfs_unmount+0xd0>
        goto out;
    }
    if (vdev->fs == NULL) {
c010eaf2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010eaf5:	8b 40 08             	mov    0x8(%eax),%eax
c010eaf8:	85 c0                	test   %eax,%eax
c010eafa:	75 0c                	jne    c010eb08 <vfs_unmount+0x40>
        ret = -E_INVAL;
c010eafc:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
        goto out;
c010eb03:	e9 94 00 00 00       	jmp    c010eb9c <vfs_unmount+0xd4>
    }
    assert(vdev->devname != NULL && vdev->mountable);
c010eb08:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010eb0b:	8b 00                	mov    (%eax),%eax
c010eb0d:	85 c0                	test   %eax,%eax
c010eb0f:	74 0a                	je     c010eb1b <vfs_unmount+0x53>
c010eb11:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010eb14:	8b 40 0c             	mov    0xc(%eax),%eax
c010eb17:	85 c0                	test   %eax,%eax
c010eb19:	75 19                	jne    c010eb34 <vfs_unmount+0x6c>
c010eb1b:	68 bc 73 11 c0       	push   $0xc01173bc
c010eb20:	68 28 73 11 c0       	push   $0xc0117328
c010eb25:	68 08 01 00 00       	push   $0x108
c010eb2a:	68 3d 73 11 c0       	push   $0xc011733d
c010eb2f:	e8 b9 19 ff ff       	call   c01004ed <__panic>

    if ((ret = fsop_sync(vdev->fs)) != 0) {
c010eb34:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010eb37:	8b 40 08             	mov    0x8(%eax),%eax
c010eb3a:	8b 40 70             	mov    0x70(%eax),%eax
c010eb3d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010eb40:	8b 52 08             	mov    0x8(%edx),%edx
c010eb43:	83 ec 0c             	sub    $0xc,%esp
c010eb46:	52                   	push   %edx
c010eb47:	ff d0                	call   *%eax
c010eb49:	83 c4 10             	add    $0x10,%esp
c010eb4c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010eb4f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010eb53:	75 46                	jne    c010eb9b <vfs_unmount+0xd3>
        goto out;
    }
    if ((ret = fsop_unmount(vdev->fs)) == 0) {
c010eb55:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010eb58:	8b 40 08             	mov    0x8(%eax),%eax
c010eb5b:	8b 40 78             	mov    0x78(%eax),%eax
c010eb5e:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010eb61:	8b 52 08             	mov    0x8(%edx),%edx
c010eb64:	83 ec 0c             	sub    $0xc,%esp
c010eb67:	52                   	push   %edx
c010eb68:	ff d0                	call   *%eax
c010eb6a:	83 c4 10             	add    $0x10,%esp
c010eb6d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010eb70:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010eb74:	75 26                	jne    c010eb9c <vfs_unmount+0xd4>
        vdev->fs = NULL;
c010eb76:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010eb79:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        cprintf("vfs: unmount %s.\n", vdev->devname);
c010eb80:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010eb83:	8b 00                	mov    (%eax),%eax
c010eb85:	83 ec 08             	sub    $0x8,%esp
c010eb88:	50                   	push   %eax
c010eb89:	68 3c 74 11 c0       	push   $0xc011743c
c010eb8e:	e8 f4 17 ff ff       	call   c0100387 <cprintf>
c010eb93:	83 c4 10             	add    $0x10,%esp
c010eb96:	eb 04                	jmp    c010eb9c <vfs_unmount+0xd4>
vfs_unmount(const char *devname) {
    int ret;
    lock_vdev_list();
    vfs_dev_t *vdev;
    if ((ret = find_mount(devname, &vdev)) != 0) {
        goto out;
c010eb98:	90                   	nop
c010eb99:	eb 01                	jmp    c010eb9c <vfs_unmount+0xd4>
        goto out;
    }
    assert(vdev->devname != NULL && vdev->mountable);

    if ((ret = fsop_sync(vdev->fs)) != 0) {
        goto out;
c010eb9b:	90                   	nop
        vdev->fs = NULL;
        cprintf("vfs: unmount %s.\n", vdev->devname);
    }

out:
    unlock_vdev_list();
c010eb9c:	e8 29 f9 ff ff       	call   c010e4ca <unlock_vdev_list>
    return ret;
c010eba1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010eba4:	c9                   	leave  
c010eba5:	c3                   	ret    

c010eba6 <vfs_unmount_all>:

/*
 * vfs_unmount_all - Global unmount function.
 */
int
vfs_unmount_all(void) {
c010eba6:	55                   	push   %ebp
c010eba7:	89 e5                	mov    %esp,%ebp
c010eba9:	83 ec 28             	sub    $0x28,%esp
c010ebac:	c7 45 e0 b8 40 15 c0 	movl   $0xc01540b8,-0x20(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010ebb3:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010ebb6:	8b 40 04             	mov    0x4(%eax),%eax
c010ebb9:	39 45 e0             	cmp    %eax,-0x20(%ebp)
c010ebbc:	0f 94 c0             	sete   %al
c010ebbf:	0f b6 c0             	movzbl %al,%eax
    if (!list_empty(&vdev_list)) {
c010ebc2:	85 c0                	test   %eax,%eax
c010ebc4:	0f 85 f4 00 00 00    	jne    c010ecbe <vfs_unmount_all+0x118>
        lock_vdev_list();
c010ebca:	e8 e2 f8 ff ff       	call   c010e4b1 <lock_vdev_list>
        {
            list_entry_t *list = &vdev_list, *le = list;
c010ebcf:	c7 45 ec b8 40 15 c0 	movl   $0xc01540b8,-0x14(%ebp)
c010ebd6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ebd9:	89 45 f4             	mov    %eax,-0xc(%ebp)
            while ((le = list_next(le)) != list) {
c010ebdc:	e9 bd 00 00 00       	jmp    c010ec9e <vfs_unmount_all+0xf8>
                vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010ebe1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ebe4:	83 e8 10             	sub    $0x10,%eax
c010ebe7:	89 45 e8             	mov    %eax,-0x18(%ebp)
                if (vdev->mountable && vdev->fs != NULL) {
c010ebea:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ebed:	8b 40 0c             	mov    0xc(%eax),%eax
c010ebf0:	85 c0                	test   %eax,%eax
c010ebf2:	0f 84 a6 00 00 00    	je     c010ec9e <vfs_unmount_all+0xf8>
c010ebf8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ebfb:	8b 40 08             	mov    0x8(%eax),%eax
c010ebfe:	85 c0                	test   %eax,%eax
c010ec00:	0f 84 98 00 00 00    	je     c010ec9e <vfs_unmount_all+0xf8>
                    int ret;
                    if ((ret = fsop_sync(vdev->fs)) != 0) {
c010ec06:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ec09:	8b 40 08             	mov    0x8(%eax),%eax
c010ec0c:	8b 40 70             	mov    0x70(%eax),%eax
c010ec0f:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010ec12:	8b 52 08             	mov    0x8(%edx),%edx
c010ec15:	83 ec 0c             	sub    $0xc,%esp
c010ec18:	52                   	push   %edx
c010ec19:	ff d0                	call   *%eax
c010ec1b:	83 c4 10             	add    $0x10,%esp
c010ec1e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010ec21:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010ec25:	74 1b                	je     c010ec42 <vfs_unmount_all+0x9c>
                        cprintf("vfs: warning: sync failed for %s: %e.\n", vdev->devname, ret);
c010ec27:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ec2a:	8b 00                	mov    (%eax),%eax
c010ec2c:	83 ec 04             	sub    $0x4,%esp
c010ec2f:	ff 75 e4             	pushl  -0x1c(%ebp)
c010ec32:	50                   	push   %eax
c010ec33:	68 50 74 11 c0       	push   $0xc0117450
c010ec38:	e8 4a 17 ff ff       	call   c0100387 <cprintf>
c010ec3d:	83 c4 10             	add    $0x10,%esp
                        continue ;
c010ec40:	eb 5c                	jmp    c010ec9e <vfs_unmount_all+0xf8>
                    }
                    if ((ret = fsop_unmount(vdev->fs)) != 0) {
c010ec42:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ec45:	8b 40 08             	mov    0x8(%eax),%eax
c010ec48:	8b 40 78             	mov    0x78(%eax),%eax
c010ec4b:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010ec4e:	8b 52 08             	mov    0x8(%edx),%edx
c010ec51:	83 ec 0c             	sub    $0xc,%esp
c010ec54:	52                   	push   %edx
c010ec55:	ff d0                	call   *%eax
c010ec57:	83 c4 10             	add    $0x10,%esp
c010ec5a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010ec5d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010ec61:	74 1b                	je     c010ec7e <vfs_unmount_all+0xd8>
                        cprintf("vfs: warning: unmount failed for %s: %e.\n", vdev->devname, ret);
c010ec63:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ec66:	8b 00                	mov    (%eax),%eax
c010ec68:	83 ec 04             	sub    $0x4,%esp
c010ec6b:	ff 75 e4             	pushl  -0x1c(%ebp)
c010ec6e:	50                   	push   %eax
c010ec6f:	68 78 74 11 c0       	push   $0xc0117478
c010ec74:	e8 0e 17 ff ff       	call   c0100387 <cprintf>
c010ec79:	83 c4 10             	add    $0x10,%esp
                        continue ;
c010ec7c:	eb 20                	jmp    c010ec9e <vfs_unmount_all+0xf8>
                    }
                    vdev->fs = NULL;
c010ec7e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ec81:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
                    cprintf("vfs: unmount %s.\n", vdev->devname);
c010ec88:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ec8b:	8b 00                	mov    (%eax),%eax
c010ec8d:	83 ec 08             	sub    $0x8,%esp
c010ec90:	50                   	push   %eax
c010ec91:	68 3c 74 11 c0       	push   $0xc011743c
c010ec96:	e8 ec 16 ff ff       	call   c0100387 <cprintf>
c010ec9b:	83 c4 10             	add    $0x10,%esp
c010ec9e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eca1:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010eca4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010eca7:	8b 40 04             	mov    0x4(%eax),%eax
vfs_unmount_all(void) {
    if (!list_empty(&vdev_list)) {
        lock_vdev_list();
        {
            list_entry_t *list = &vdev_list, *le = list;
            while ((le = list_next(le)) != list) {
c010ecaa:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ecad:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ecb0:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010ecb3:	0f 85 28 ff ff ff    	jne    c010ebe1 <vfs_unmount_all+0x3b>
                    vdev->fs = NULL;
                    cprintf("vfs: unmount %s.\n", vdev->devname);
                }
            }
        }
        unlock_vdev_list();
c010ecb9:	e8 0c f8 ff ff       	call   c010e4ca <unlock_vdev_list>
    }
    return 0;
c010ecbe:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ecc3:	c9                   	leave  
c010ecc4:	c3                   	ret    

c010ecc5 <get_cwd_nolock>:

/*
 * get_cwd_nolock - retrieve current process's working directory. without lock protect
 */
static struct inode *
get_cwd_nolock(void) {
c010ecc5:	55                   	push   %ebp
c010ecc6:	89 e5                	mov    %esp,%ebp
    return current->filesp->pwd;
c010ecc8:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010eccd:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010ecd3:	8b 00                	mov    (%eax),%eax
}
c010ecd5:	5d                   	pop    %ebp
c010ecd6:	c3                   	ret    

c010ecd7 <set_cwd_nolock>:
/*
 * set_cwd_nolock - set current working directory.
 */
static void
set_cwd_nolock(struct inode *pwd) {
c010ecd7:	55                   	push   %ebp
c010ecd8:	89 e5                	mov    %esp,%ebp
    current->filesp->pwd = pwd;
c010ecda:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010ecdf:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010ece5:	8b 55 08             	mov    0x8(%ebp),%edx
c010ece8:	89 10                	mov    %edx,(%eax)
}
c010ecea:	90                   	nop
c010eceb:	5d                   	pop    %ebp
c010ecec:	c3                   	ret    

c010eced <lock_cfs>:

/*
 * lock_cfs - lock the fs related process on current process 
 */
static void
lock_cfs(void) {
c010eced:	55                   	push   %ebp
c010ecee:	89 e5                	mov    %esp,%ebp
c010ecf0:	83 ec 08             	sub    $0x8,%esp
    lock_files(current->filesp);
c010ecf3:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010ecf8:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010ecfe:	83 ec 0c             	sub    $0xc,%esp
c010ed01:	50                   	push   %eax
c010ed02:	e8 db c4 ff ff       	call   c010b1e2 <lock_files>
c010ed07:	83 c4 10             	add    $0x10,%esp
}
c010ed0a:	90                   	nop
c010ed0b:	c9                   	leave  
c010ed0c:	c3                   	ret    

c010ed0d <unlock_cfs>:
/*
 * unlock_cfs - unlock the fs related process on current process 
 */
static void
unlock_cfs(void) {
c010ed0d:	55                   	push   %ebp
c010ed0e:	89 e5                	mov    %esp,%ebp
c010ed10:	83 ec 08             	sub    $0x8,%esp
    unlock_files(current->filesp);
c010ed13:	a1 28 20 15 c0       	mov    0xc0152028,%eax
c010ed18:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010ed1e:	83 ec 0c             	sub    $0xc,%esp
c010ed21:	50                   	push   %eax
c010ed22:	e8 d6 c4 ff ff       	call   c010b1fd <unlock_files>
c010ed27:	83 c4 10             	add    $0x10,%esp
}
c010ed2a:	90                   	nop
c010ed2b:	c9                   	leave  
c010ed2c:	c3                   	ret    

c010ed2d <vfs_get_curdir>:

/*
 *  vfs_get_curdir - Get current directory as a inode.
 */
int
vfs_get_curdir(struct inode **dir_store) {
c010ed2d:	55                   	push   %ebp
c010ed2e:	89 e5                	mov    %esp,%ebp
c010ed30:	83 ec 18             	sub    $0x18,%esp
    struct inode *node;
    if ((node = get_cwd_nolock()) != NULL) {
c010ed33:	e8 8d ff ff ff       	call   c010ecc5 <get_cwd_nolock>
c010ed38:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ed3b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ed3f:	74 1d                	je     c010ed5e <vfs_get_curdir+0x31>
        vop_ref_inc(node);
c010ed41:	83 ec 0c             	sub    $0xc,%esp
c010ed44:	ff 75 f4             	pushl  -0xc(%ebp)
c010ed47:	e8 0f 06 00 00       	call   c010f35b <inode_ref_inc>
c010ed4c:	83 c4 10             	add    $0x10,%esp
        *dir_store = node;
c010ed4f:	8b 45 08             	mov    0x8(%ebp),%eax
c010ed52:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010ed55:	89 10                	mov    %edx,(%eax)
        return 0;
c010ed57:	b8 00 00 00 00       	mov    $0x0,%eax
c010ed5c:	eb 05                	jmp    c010ed63 <vfs_get_curdir+0x36>
    }
    return -E_NOENT;
c010ed5e:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
c010ed63:	c9                   	leave  
c010ed64:	c3                   	ret    

c010ed65 <vfs_set_curdir>:
/*
 * vfs_set_curdir - Set current directory as a inode.
 *                  The passed inode must in fact be a directory.
 */
int
vfs_set_curdir(struct inode *dir) {
c010ed65:	55                   	push   %ebp
c010ed66:	89 e5                	mov    %esp,%ebp
c010ed68:	83 ec 18             	sub    $0x18,%esp
    int ret = 0;
c010ed6b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    lock_cfs();
c010ed72:	e8 76 ff ff ff       	call   c010eced <lock_cfs>
    struct inode *old_dir;
    if ((old_dir = get_cwd_nolock()) != dir) {
c010ed77:	e8 49 ff ff ff       	call   c010ecc5 <get_cwd_nolock>
c010ed7c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010ed7f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ed82:	3b 45 08             	cmp    0x8(%ebp),%eax
c010ed85:	0f 84 c3 00 00 00    	je     c010ee4e <vfs_set_curdir+0xe9>
        if (dir != NULL) {
c010ed8b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010ed8f:	0f 84 94 00 00 00    	je     c010ee29 <vfs_set_curdir+0xc4>
            uint32_t type;
            if ((ret = vop_gettype(dir, &type)) != 0) {
c010ed95:	8b 45 08             	mov    0x8(%ebp),%eax
c010ed98:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010ed9b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010ed9f:	74 17                	je     c010edb8 <vfs_set_curdir+0x53>
c010eda1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010eda4:	8b 40 3c             	mov    0x3c(%eax),%eax
c010eda7:	85 c0                	test   %eax,%eax
c010eda9:	74 0d                	je     c010edb8 <vfs_set_curdir+0x53>
c010edab:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010edae:	8b 40 3c             	mov    0x3c(%eax),%eax
c010edb1:	8b 40 28             	mov    0x28(%eax),%eax
c010edb4:	85 c0                	test   %eax,%eax
c010edb6:	75 16                	jne    c010edce <vfs_set_curdir+0x69>
c010edb8:	68 a4 74 11 c0       	push   $0xc01174a4
c010edbd:	68 f4 74 11 c0       	push   $0xc01174f4
c010edc2:	6a 43                	push   $0x43
c010edc4:	68 09 75 11 c0       	push   $0xc0117509
c010edc9:	e8 1f 17 ff ff       	call   c01004ed <__panic>
c010edce:	83 ec 08             	sub    $0x8,%esp
c010edd1:	68 1f 75 11 c0       	push   $0xc011751f
c010edd6:	ff 75 ec             	pushl  -0x14(%ebp)
c010edd9:	e8 4f 07 00 00       	call   c010f52d <inode_check>
c010edde:	83 c4 10             	add    $0x10,%esp
c010ede1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ede4:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ede7:	8b 40 28             	mov    0x28(%eax),%eax
c010edea:	83 ec 08             	sub    $0x8,%esp
c010eded:	8d 55 e8             	lea    -0x18(%ebp),%edx
c010edf0:	52                   	push   %edx
c010edf1:	ff 75 08             	pushl  0x8(%ebp)
c010edf4:	ff d0                	call   *%eax
c010edf6:	83 c4 10             	add    $0x10,%esp
c010edf9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010edfc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ee00:	75 4b                	jne    c010ee4d <vfs_set_curdir+0xe8>
                goto out;
            }
            if (!S_ISDIR(type)) {
c010ee02:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ee05:	25 00 70 00 00       	and    $0x7000,%eax
c010ee0a:	3d 00 20 00 00       	cmp    $0x2000,%eax
c010ee0f:	74 0a                	je     c010ee1b <vfs_set_curdir+0xb6>
                ret = -E_NOTDIR;
c010ee11:	c7 45 f4 ee ff ff ff 	movl   $0xffffffee,-0xc(%ebp)
                goto out;
c010ee18:	90                   	nop
c010ee19:	eb 33                	jmp    c010ee4e <vfs_set_curdir+0xe9>
            }
            vop_ref_inc(dir);
c010ee1b:	83 ec 0c             	sub    $0xc,%esp
c010ee1e:	ff 75 08             	pushl  0x8(%ebp)
c010ee21:	e8 35 05 00 00       	call   c010f35b <inode_ref_inc>
c010ee26:	83 c4 10             	add    $0x10,%esp
        }
        set_cwd_nolock(dir);
c010ee29:	83 ec 0c             	sub    $0xc,%esp
c010ee2c:	ff 75 08             	pushl  0x8(%ebp)
c010ee2f:	e8 a3 fe ff ff       	call   c010ecd7 <set_cwd_nolock>
c010ee34:	83 c4 10             	add    $0x10,%esp
        if (old_dir != NULL) {
c010ee37:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010ee3b:	74 11                	je     c010ee4e <vfs_set_curdir+0xe9>
            vop_ref_dec(old_dir);
c010ee3d:	83 ec 0c             	sub    $0xc,%esp
c010ee40:	ff 75 f0             	pushl  -0x10(%ebp)
c010ee43:	e8 2d 05 00 00       	call   c010f375 <inode_ref_dec>
c010ee48:	83 c4 10             	add    $0x10,%esp
c010ee4b:	eb 01                	jmp    c010ee4e <vfs_set_curdir+0xe9>
    struct inode *old_dir;
    if ((old_dir = get_cwd_nolock()) != dir) {
        if (dir != NULL) {
            uint32_t type;
            if ((ret = vop_gettype(dir, &type)) != 0) {
                goto out;
c010ee4d:	90                   	nop
        if (old_dir != NULL) {
            vop_ref_dec(old_dir);
        }
    }
out:
    unlock_cfs();
c010ee4e:	e8 ba fe ff ff       	call   c010ed0d <unlock_cfs>
    return ret;
c010ee53:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010ee56:	c9                   	leave  
c010ee57:	c3                   	ret    

c010ee58 <vfs_chdir>:
/*
 * vfs_chdir - Set current directory, as a pathname. Use vfs_lookup to translate
 *             it to a inode.
 */
int
vfs_chdir(char *path) {
c010ee58:	55                   	push   %ebp
c010ee59:	89 e5                	mov    %esp,%ebp
c010ee5b:	83 ec 18             	sub    $0x18,%esp
    int ret;
    struct inode *node;
    if ((ret = vfs_lookup(path, &node)) == 0) {
c010ee5e:	83 ec 08             	sub    $0x8,%esp
c010ee61:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010ee64:	50                   	push   %eax
c010ee65:	ff 75 08             	pushl  0x8(%ebp)
c010ee68:	e8 05 03 00 00       	call   c010f172 <vfs_lookup>
c010ee6d:	83 c4 10             	add    $0x10,%esp
c010ee70:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ee73:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ee77:	75 21                	jne    c010ee9a <vfs_chdir+0x42>
        ret = vfs_set_curdir(node);
c010ee79:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ee7c:	83 ec 0c             	sub    $0xc,%esp
c010ee7f:	50                   	push   %eax
c010ee80:	e8 e0 fe ff ff       	call   c010ed65 <vfs_set_curdir>
c010ee85:	83 c4 10             	add    $0x10,%esp
c010ee88:	89 45 f4             	mov    %eax,-0xc(%ebp)
        vop_ref_dec(node);
c010ee8b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ee8e:	83 ec 0c             	sub    $0xc,%esp
c010ee91:	50                   	push   %eax
c010ee92:	e8 de 04 00 00       	call   c010f375 <inode_ref_dec>
c010ee97:	83 c4 10             	add    $0x10,%esp
    }
    return ret;
c010ee9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010ee9d:	c9                   	leave  
c010ee9e:	c3                   	ret    

c010ee9f <vfs_getcwd>:
/*
 * vfs_getcwd - retrieve current working directory(cwd).
 */
int
vfs_getcwd(struct iobuf *iob) {
c010ee9f:	55                   	push   %ebp
c010eea0:	89 e5                	mov    %esp,%ebp
c010eea2:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct inode *node;
    if ((ret = vfs_get_curdir(&node)) != 0) {
c010eea5:	83 ec 0c             	sub    $0xc,%esp
c010eea8:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010eeab:	50                   	push   %eax
c010eeac:	e8 7c fe ff ff       	call   c010ed2d <vfs_get_curdir>
c010eeb1:	83 c4 10             	add    $0x10,%esp
c010eeb4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010eeb7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010eebb:	74 08                	je     c010eec5 <vfs_getcwd+0x26>
        return ret;
c010eebd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eec0:	e9 0a 01 00 00       	jmp    c010efcf <vfs_getcwd+0x130>
    }
    assert(node->in_fs != NULL);
c010eec5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010eec8:	8b 40 38             	mov    0x38(%eax),%eax
c010eecb:	85 c0                	test   %eax,%eax
c010eecd:	75 16                	jne    c010eee5 <vfs_getcwd+0x46>
c010eecf:	68 27 75 11 c0       	push   $0xc0117527
c010eed4:	68 f4 74 11 c0       	push   $0xc01174f4
c010eed9:	6a 6e                	push   $0x6e
c010eedb:	68 09 75 11 c0       	push   $0xc0117509
c010eee0:	e8 08 16 ff ff       	call   c01004ed <__panic>

    const char *devname = vfs_get_devname(node->in_fs);
c010eee5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010eee8:	8b 40 38             	mov    0x38(%eax),%eax
c010eeeb:	83 ec 0c             	sub    $0xc,%esp
c010eeee:	50                   	push   %eax
c010eeef:	e8 ba f7 ff ff       	call   c010e6ae <vfs_get_devname>
c010eef4:	83 c4 10             	add    $0x10,%esp
c010eef7:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = iobuf_move(iob, (char *)devname, strlen(devname), 1, NULL)) != 0) {
c010eefa:	83 ec 0c             	sub    $0xc,%esp
c010eefd:	ff 75 f0             	pushl  -0x10(%ebp)
c010ef00:	e8 03 48 00 00       	call   c0113708 <strlen>
c010ef05:	83 c4 10             	add    $0x10,%esp
c010ef08:	83 ec 0c             	sub    $0xc,%esp
c010ef0b:	6a 00                	push   $0x0
c010ef0d:	6a 01                	push   $0x1
c010ef0f:	50                   	push   %eax
c010ef10:	ff 75 f0             	pushl  -0x10(%ebp)
c010ef13:	ff 75 08             	pushl  0x8(%ebp)
c010ef16:	e8 2f c1 ff ff       	call   c010b04a <iobuf_move>
c010ef1b:	83 c4 20             	add    $0x20,%esp
c010ef1e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ef21:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ef25:	0f 85 8e 00 00 00    	jne    c010efb9 <vfs_getcwd+0x11a>
        goto out;
    }
    char colon = ':';
c010ef2b:	c6 45 e7 3a          	movb   $0x3a,-0x19(%ebp)
    if ((ret = iobuf_move(iob, &colon, sizeof(colon), 1, NULL)) != 0) {
c010ef2f:	83 ec 0c             	sub    $0xc,%esp
c010ef32:	6a 00                	push   $0x0
c010ef34:	6a 01                	push   $0x1
c010ef36:	6a 01                	push   $0x1
c010ef38:	8d 45 e7             	lea    -0x19(%ebp),%eax
c010ef3b:	50                   	push   %eax
c010ef3c:	ff 75 08             	pushl  0x8(%ebp)
c010ef3f:	e8 06 c1 ff ff       	call   c010b04a <iobuf_move>
c010ef44:	83 c4 20             	add    $0x20,%esp
c010ef47:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ef4a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ef4e:	75 6c                	jne    c010efbc <vfs_getcwd+0x11d>
        goto out;
    }
    ret = vop_namefile(node, iob);
c010ef50:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ef53:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010ef56:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010ef5a:	74 17                	je     c010ef73 <vfs_getcwd+0xd4>
c010ef5c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ef5f:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ef62:	85 c0                	test   %eax,%eax
c010ef64:	74 0d                	je     c010ef73 <vfs_getcwd+0xd4>
c010ef66:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ef69:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ef6c:	8b 40 1c             	mov    0x1c(%eax),%eax
c010ef6f:	85 c0                	test   %eax,%eax
c010ef71:	75 16                	jne    c010ef89 <vfs_getcwd+0xea>
c010ef73:	68 3c 75 11 c0       	push   $0xc011753c
c010ef78:	68 f4 74 11 c0       	push   $0xc01174f4
c010ef7d:	6a 78                	push   $0x78
c010ef7f:	68 09 75 11 c0       	push   $0xc0117509
c010ef84:	e8 64 15 ff ff       	call   c01004ed <__panic>
c010ef89:	83 ec 08             	sub    $0x8,%esp
c010ef8c:	68 8d 75 11 c0       	push   $0xc011758d
c010ef91:	ff 75 ec             	pushl  -0x14(%ebp)
c010ef94:	e8 94 05 00 00       	call   c010f52d <inode_check>
c010ef99:	83 c4 10             	add    $0x10,%esp
c010ef9c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ef9f:	8b 40 3c             	mov    0x3c(%eax),%eax
c010efa2:	8b 40 1c             	mov    0x1c(%eax),%eax
c010efa5:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010efa8:	83 ec 08             	sub    $0x8,%esp
c010efab:	ff 75 08             	pushl  0x8(%ebp)
c010efae:	52                   	push   %edx
c010efaf:	ff d0                	call   *%eax
c010efb1:	83 c4 10             	add    $0x10,%esp
c010efb4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010efb7:	eb 04                	jmp    c010efbd <vfs_getcwd+0x11e>
    }
    assert(node->in_fs != NULL);

    const char *devname = vfs_get_devname(node->in_fs);
    if ((ret = iobuf_move(iob, (char *)devname, strlen(devname), 1, NULL)) != 0) {
        goto out;
c010efb9:	90                   	nop
c010efba:	eb 01                	jmp    c010efbd <vfs_getcwd+0x11e>
    }
    char colon = ':';
    if ((ret = iobuf_move(iob, &colon, sizeof(colon), 1, NULL)) != 0) {
        goto out;
c010efbc:	90                   	nop
    }
    ret = vop_namefile(node, iob);

out:
    vop_ref_dec(node);
c010efbd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010efc0:	83 ec 0c             	sub    $0xc,%esp
c010efc3:	50                   	push   %eax
c010efc4:	e8 ac 03 00 00       	call   c010f375 <inode_ref_dec>
c010efc9:	83 c4 10             	add    $0x10,%esp
    return ret;
c010efcc:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010efcf:	c9                   	leave  
c010efd0:	c3                   	ret    

c010efd1 <get_device>:
 * get_device- Common code to pull the device name, if any, off the front of a
 *             path and choose the inode to begin the name lookup relative to.
 */

static int
get_device(char *path, char **subpath, struct inode **node_store) {
c010efd1:	55                   	push   %ebp
c010efd2:	89 e5                	mov    %esp,%ebp
c010efd4:	83 ec 28             	sub    $0x28,%esp
    int i, slash = -1, colon = -1;
c010efd7:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
c010efde:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%ebp)
    for (i = 0; path[i] != '\0'; i ++) {
c010efe5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010efec:	eb 32                	jmp    c010f020 <get_device+0x4f>
        if (path[i] == ':') { colon = i; break; }
c010efee:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010eff1:	8b 45 08             	mov    0x8(%ebp),%eax
c010eff4:	01 d0                	add    %edx,%eax
c010eff6:	0f b6 00             	movzbl (%eax),%eax
c010eff9:	3c 3a                	cmp    $0x3a,%al
c010effb:	75 08                	jne    c010f005 <get_device+0x34>
c010effd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f000:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010f003:	eb 2a                	jmp    c010f02f <get_device+0x5e>
        if (path[i] == '/') { slash = i; break; }
c010f005:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010f008:	8b 45 08             	mov    0x8(%ebp),%eax
c010f00b:	01 d0                	add    %edx,%eax
c010f00d:	0f b6 00             	movzbl (%eax),%eax
c010f010:	3c 2f                	cmp    $0x2f,%al
c010f012:	75 08                	jne    c010f01c <get_device+0x4b>
c010f014:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f017:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010f01a:	eb 13                	jmp    c010f02f <get_device+0x5e>
 */

static int
get_device(char *path, char **subpath, struct inode **node_store) {
    int i, slash = -1, colon = -1;
    for (i = 0; path[i] != '\0'; i ++) {
c010f01c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010f020:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010f023:	8b 45 08             	mov    0x8(%ebp),%eax
c010f026:	01 d0                	add    %edx,%eax
c010f028:	0f b6 00             	movzbl (%eax),%eax
c010f02b:	84 c0                	test   %al,%al
c010f02d:	75 bf                	jne    c010efee <get_device+0x1d>
        if (path[i] == ':') { colon = i; break; }
        if (path[i] == '/') { slash = i; break; }
    }
    if (colon < 0 && slash != 0) {
c010f02f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010f033:	79 21                	jns    c010f056 <get_device+0x85>
c010f035:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010f039:	74 1b                	je     c010f056 <get_device+0x85>
        /* *
         * No colon before a slash, so no device name specified, and the slash isn't leading
         * or is also absent, so this is a relative path or just a bare filename. Start from
         * the current directory, and use the whole thing as the subpath.
         * */
        *subpath = path;
c010f03b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f03e:	8b 55 08             	mov    0x8(%ebp),%edx
c010f041:	89 10                	mov    %edx,(%eax)
        return vfs_get_curdir(node_store);
c010f043:	83 ec 0c             	sub    $0xc,%esp
c010f046:	ff 75 10             	pushl  0x10(%ebp)
c010f049:	e8 df fc ff ff       	call   c010ed2d <vfs_get_curdir>
c010f04e:	83 c4 10             	add    $0x10,%esp
c010f051:	e9 1a 01 00 00       	jmp    c010f170 <get_device+0x19f>
    }
    if (colon > 0) {
c010f056:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010f05a:	7e 41                	jle    c010f09d <get_device+0xcc>
        /* device:path - get root of device's filesystem */
        path[colon] = '\0';
c010f05c:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010f05f:	8b 45 08             	mov    0x8(%ebp),%eax
c010f062:	01 d0                	add    %edx,%eax
c010f064:	c6 00 00             	movb   $0x0,(%eax)

        /* device:/path - skip slash, treat as device:path */
        while (path[++ colon] == '/');
c010f067:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c010f06b:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010f06e:	8b 45 08             	mov    0x8(%ebp),%eax
c010f071:	01 d0                	add    %edx,%eax
c010f073:	0f b6 00             	movzbl (%eax),%eax
c010f076:	3c 2f                	cmp    $0x2f,%al
c010f078:	74 ed                	je     c010f067 <get_device+0x96>
        *subpath = path + colon;
c010f07a:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010f07d:	8b 45 08             	mov    0x8(%ebp),%eax
c010f080:	01 c2                	add    %eax,%edx
c010f082:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f085:	89 10                	mov    %edx,(%eax)
        return vfs_get_root(path, node_store);
c010f087:	83 ec 08             	sub    $0x8,%esp
c010f08a:	ff 75 10             	pushl  0x10(%ebp)
c010f08d:	ff 75 08             	pushl  0x8(%ebp)
c010f090:	e8 02 f5 ff ff       	call   c010e597 <vfs_get_root>
c010f095:	83 c4 10             	add    $0x10,%esp
c010f098:	e9 d3 00 00 00       	jmp    c010f170 <get_device+0x19f>
     * we have either /path or :path
     * /path is a path relative to the root of the "boot filesystem"
     * :path is a path relative to the root of the current filesystem
     * */
    int ret;
    if (*path == '/') {
c010f09d:	8b 45 08             	mov    0x8(%ebp),%eax
c010f0a0:	0f b6 00             	movzbl (%eax),%eax
c010f0a3:	3c 2f                	cmp    $0x2f,%al
c010f0a5:	75 23                	jne    c010f0ca <get_device+0xf9>
        if ((ret = vfs_get_bootfs(node_store)) != 0) {
c010f0a7:	83 ec 0c             	sub    $0xc,%esp
c010f0aa:	ff 75 10             	pushl  0x10(%ebp)
c010f0ad:	e8 9f 09 00 00       	call   c010fa51 <vfs_get_bootfs>
c010f0b2:	83 c4 10             	add    $0x10,%esp
c010f0b5:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010f0b8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010f0bc:	0f 84 93 00 00 00    	je     c010f155 <get_device+0x184>
            return ret;
c010f0c2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f0c5:	e9 a6 00 00 00       	jmp    c010f170 <get_device+0x19f>
        }
    }
    else {
        assert(*path == ':');
c010f0ca:	8b 45 08             	mov    0x8(%ebp),%eax
c010f0cd:	0f b6 00             	movzbl (%eax),%eax
c010f0d0:	3c 3a                	cmp    $0x3a,%al
c010f0d2:	74 16                	je     c010f0ea <get_device+0x119>
c010f0d4:	68 98 75 11 c0       	push   $0xc0117598
c010f0d9:	68 a5 75 11 c0       	push   $0xc01175a5
c010f0de:	6a 33                	push   $0x33
c010f0e0:	68 ba 75 11 c0       	push   $0xc01175ba
c010f0e5:	e8 03 14 ff ff       	call   c01004ed <__panic>
        struct inode *node;
        if ((ret = vfs_get_curdir(&node)) != 0) {
c010f0ea:	83 ec 0c             	sub    $0xc,%esp
c010f0ed:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c010f0f0:	50                   	push   %eax
c010f0f1:	e8 37 fc ff ff       	call   c010ed2d <vfs_get_curdir>
c010f0f6:	83 c4 10             	add    $0x10,%esp
c010f0f9:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010f0fc:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010f100:	74 05                	je     c010f107 <get_device+0x136>
            return ret;
c010f102:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f105:	eb 69                	jmp    c010f170 <get_device+0x19f>
        }
        /* The current directory may not be a device, so it must have a fs. */
        assert(node->in_fs != NULL);
c010f107:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f10a:	8b 40 38             	mov    0x38(%eax),%eax
c010f10d:	85 c0                	test   %eax,%eax
c010f10f:	75 16                	jne    c010f127 <get_device+0x156>
c010f111:	68 d2 75 11 c0       	push   $0xc01175d2
c010f116:	68 a5 75 11 c0       	push   $0xc01175a5
c010f11b:	6a 39                	push   $0x39
c010f11d:	68 ba 75 11 c0       	push   $0xc01175ba
c010f122:	e8 c6 13 ff ff       	call   c01004ed <__panic>
        *node_store = fsop_get_root(node->in_fs);
c010f127:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f12a:	8b 40 38             	mov    0x38(%eax),%eax
c010f12d:	8b 40 74             	mov    0x74(%eax),%eax
c010f130:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010f133:	8b 52 38             	mov    0x38(%edx),%edx
c010f136:	83 ec 0c             	sub    $0xc,%esp
c010f139:	52                   	push   %edx
c010f13a:	ff d0                	call   *%eax
c010f13c:	83 c4 10             	add    $0x10,%esp
c010f13f:	89 c2                	mov    %eax,%edx
c010f141:	8b 45 10             	mov    0x10(%ebp),%eax
c010f144:	89 10                	mov    %edx,(%eax)
        vop_ref_dec(node);
c010f146:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f149:	83 ec 0c             	sub    $0xc,%esp
c010f14c:	50                   	push   %eax
c010f14d:	e8 23 02 00 00       	call   c010f375 <inode_ref_dec>
c010f152:	83 c4 10             	add    $0x10,%esp
    }

    /* ///... or :/... */
    while (*(++ path) == '/');
c010f155:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010f159:	8b 45 08             	mov    0x8(%ebp),%eax
c010f15c:	0f b6 00             	movzbl (%eax),%eax
c010f15f:	3c 2f                	cmp    $0x2f,%al
c010f161:	74 f2                	je     c010f155 <get_device+0x184>
    *subpath = path;
c010f163:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f166:	8b 55 08             	mov    0x8(%ebp),%edx
c010f169:	89 10                	mov    %edx,(%eax)
    return 0;
c010f16b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010f170:	c9                   	leave  
c010f171:	c3                   	ret    

c010f172 <vfs_lookup>:

/*
 * vfs_lookup - get the inode according to the path filename
 */
int
vfs_lookup(char *path, struct inode **node_store) {
c010f172:	55                   	push   %ebp
c010f173:	89 e5                	mov    %esp,%ebp
c010f175:	83 ec 18             	sub    $0x18,%esp
    int ret;
    struct inode *node;
    if ((ret = get_device(path, &path, &node)) != 0) {
c010f178:	8b 45 08             	mov    0x8(%ebp),%eax
c010f17b:	83 ec 04             	sub    $0x4,%esp
c010f17e:	8d 55 ec             	lea    -0x14(%ebp),%edx
c010f181:	52                   	push   %edx
c010f182:	8d 55 08             	lea    0x8(%ebp),%edx
c010f185:	52                   	push   %edx
c010f186:	50                   	push   %eax
c010f187:	e8 45 fe ff ff       	call   c010efd1 <get_device>
c010f18c:	83 c4 10             	add    $0x10,%esp
c010f18f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f192:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f196:	74 08                	je     c010f1a0 <vfs_lookup+0x2e>
        return ret;
c010f198:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f19b:	e9 96 00 00 00       	jmp    c010f236 <vfs_lookup+0xc4>
    }
    if (*path != '\0') {
c010f1a0:	8b 45 08             	mov    0x8(%ebp),%eax
c010f1a3:	0f b6 00             	movzbl (%eax),%eax
c010f1a6:	84 c0                	test   %al,%al
c010f1a8:	74 7f                	je     c010f229 <vfs_lookup+0xb7>
        ret = vop_lookup(node, path, node_store);
c010f1aa:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f1ad:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010f1b0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010f1b4:	74 17                	je     c010f1cd <vfs_lookup+0x5b>
c010f1b6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f1b9:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f1bc:	85 c0                	test   %eax,%eax
c010f1be:	74 0d                	je     c010f1cd <vfs_lookup+0x5b>
c010f1c0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f1c3:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f1c6:	8b 40 38             	mov    0x38(%eax),%eax
c010f1c9:	85 c0                	test   %eax,%eax
c010f1cb:	75 16                	jne    c010f1e3 <vfs_lookup+0x71>
c010f1cd:	68 e8 75 11 c0       	push   $0xc01175e8
c010f1d2:	68 a5 75 11 c0       	push   $0xc01175a5
c010f1d7:	6a 4f                	push   $0x4f
c010f1d9:	68 ba 75 11 c0       	push   $0xc01175ba
c010f1de:	e8 0a 13 ff ff       	call   c01004ed <__panic>
c010f1e3:	83 ec 08             	sub    $0x8,%esp
c010f1e6:	68 37 76 11 c0       	push   $0xc0117637
c010f1eb:	ff 75 f0             	pushl  -0x10(%ebp)
c010f1ee:	e8 3a 03 00 00       	call   c010f52d <inode_check>
c010f1f3:	83 c4 10             	add    $0x10,%esp
c010f1f6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f1f9:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f1fc:	8b 40 38             	mov    0x38(%eax),%eax
c010f1ff:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010f202:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010f205:	83 ec 04             	sub    $0x4,%esp
c010f208:	ff 75 0c             	pushl  0xc(%ebp)
c010f20b:	51                   	push   %ecx
c010f20c:	52                   	push   %edx
c010f20d:	ff d0                	call   *%eax
c010f20f:	83 c4 10             	add    $0x10,%esp
c010f212:	89 45 f4             	mov    %eax,-0xc(%ebp)
        vop_ref_dec(node);
c010f215:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f218:	83 ec 0c             	sub    $0xc,%esp
c010f21b:	50                   	push   %eax
c010f21c:	e8 54 01 00 00       	call   c010f375 <inode_ref_dec>
c010f221:	83 c4 10             	add    $0x10,%esp
        return ret;
c010f224:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f227:	eb 0d                	jmp    c010f236 <vfs_lookup+0xc4>
    }
    *node_store = node;
c010f229:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010f22c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f22f:	89 10                	mov    %edx,(%eax)
    return 0;
c010f231:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010f236:	c9                   	leave  
c010f237:	c3                   	ret    

c010f238 <vfs_lookup_parent>:
/*
 * vfs_lookup_parent - Name-to-vnode translation.
 *  (In BSD, both of these are subsumed by namei().)
 */
int
vfs_lookup_parent(char *path, struct inode **node_store, char **endp){
c010f238:	55                   	push   %ebp
c010f239:	89 e5                	mov    %esp,%ebp
c010f23b:	83 ec 18             	sub    $0x18,%esp
    int ret;
    struct inode *node;
    if ((ret = get_device(path, &path, &node)) != 0) {
c010f23e:	8b 45 08             	mov    0x8(%ebp),%eax
c010f241:	83 ec 04             	sub    $0x4,%esp
c010f244:	8d 55 f0             	lea    -0x10(%ebp),%edx
c010f247:	52                   	push   %edx
c010f248:	8d 55 08             	lea    0x8(%ebp),%edx
c010f24b:	52                   	push   %edx
c010f24c:	50                   	push   %eax
c010f24d:	e8 7f fd ff ff       	call   c010efd1 <get_device>
c010f252:	83 c4 10             	add    $0x10,%esp
c010f255:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f258:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f25c:	74 05                	je     c010f263 <vfs_lookup_parent+0x2b>
        return ret;
c010f25e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f261:	eb 15                	jmp    c010f278 <vfs_lookup_parent+0x40>
    }
    *endp = path;
c010f263:	8b 55 08             	mov    0x8(%ebp),%edx
c010f266:	8b 45 10             	mov    0x10(%ebp),%eax
c010f269:	89 10                	mov    %edx,(%eax)
    *node_store = node;
c010f26b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010f26e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f271:	89 10                	mov    %edx,(%eax)
    return 0;
c010f273:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010f278:	c9                   	leave  
c010f279:	c3                   	ret    

c010f27a <inode_ref_count>:
#define vop_open_inc(node)                                          inode_open_inc(node)
#define vop_open_dec(node)                                          inode_open_dec(node)


static inline int
inode_ref_count(struct inode *node) {
c010f27a:	55                   	push   %ebp
c010f27b:	89 e5                	mov    %esp,%ebp
    return node->ref_count;
c010f27d:	8b 45 08             	mov    0x8(%ebp),%eax
c010f280:	8b 40 30             	mov    0x30(%eax),%eax
}
c010f283:	5d                   	pop    %ebp
c010f284:	c3                   	ret    

c010f285 <inode_open_count>:

static inline int
inode_open_count(struct inode *node) {
c010f285:	55                   	push   %ebp
c010f286:	89 e5                	mov    %esp,%ebp
    return node->open_count;
c010f288:	8b 45 08             	mov    0x8(%ebp),%eax
c010f28b:	8b 40 34             	mov    0x34(%eax),%eax
}
c010f28e:	5d                   	pop    %ebp
c010f28f:	c3                   	ret    

c010f290 <__alloc_inode>:

/* *
 * __alloc_inode - alloc a inode structure and initialize in_type
 * */
struct inode *
__alloc_inode(int type) {
c010f290:	55                   	push   %ebp
c010f291:	89 e5                	mov    %esp,%ebp
c010f293:	83 ec 18             	sub    $0x18,%esp
    struct inode *node;
    if ((node = kmalloc(sizeof(struct inode))) != NULL) {
c010f296:	83 ec 0c             	sub    $0xc,%esp
c010f299:	6a 40                	push   $0x40
c010f29b:	e8 62 60 ff ff       	call   c0105302 <kmalloc>
c010f2a0:	83 c4 10             	add    $0x10,%esp
c010f2a3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f2a6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f2aa:	74 09                	je     c010f2b5 <__alloc_inode+0x25>
        node->in_type = type;
c010f2ac:	8b 55 08             	mov    0x8(%ebp),%edx
c010f2af:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f2b2:	89 50 2c             	mov    %edx,0x2c(%eax)
    }
    return node;
c010f2b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010f2b8:	c9                   	leave  
c010f2b9:	c3                   	ret    

c010f2ba <inode_init>:
/* *
 * inode_init - initialize a inode structure
 * invoked by vop_init
 * */
void
inode_init(struct inode *node, const struct inode_ops *ops, struct fs *fs) {
c010f2ba:	55                   	push   %ebp
c010f2bb:	89 e5                	mov    %esp,%ebp
c010f2bd:	83 ec 08             	sub    $0x8,%esp
    node->ref_count = 0;
c010f2c0:	8b 45 08             	mov    0x8(%ebp),%eax
c010f2c3:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%eax)
    node->open_count = 0;
c010f2ca:	8b 45 08             	mov    0x8(%ebp),%eax
c010f2cd:	c7 40 34 00 00 00 00 	movl   $0x0,0x34(%eax)
    node->in_ops = ops, node->in_fs = fs;
c010f2d4:	8b 45 08             	mov    0x8(%ebp),%eax
c010f2d7:	8b 55 0c             	mov    0xc(%ebp),%edx
c010f2da:	89 50 3c             	mov    %edx,0x3c(%eax)
c010f2dd:	8b 45 08             	mov    0x8(%ebp),%eax
c010f2e0:	8b 55 10             	mov    0x10(%ebp),%edx
c010f2e3:	89 50 38             	mov    %edx,0x38(%eax)
    vop_ref_inc(node);
c010f2e6:	83 ec 0c             	sub    $0xc,%esp
c010f2e9:	ff 75 08             	pushl  0x8(%ebp)
c010f2ec:	e8 6a 00 00 00       	call   c010f35b <inode_ref_inc>
c010f2f1:	83 c4 10             	add    $0x10,%esp
}
c010f2f4:	90                   	nop
c010f2f5:	c9                   	leave  
c010f2f6:	c3                   	ret    

c010f2f7 <inode_kill>:
/* *
 * inode_kill - kill a inode structure
 * invoked by vop_kill
 * */
void
inode_kill(struct inode *node) {
c010f2f7:	55                   	push   %ebp
c010f2f8:	89 e5                	mov    %esp,%ebp
c010f2fa:	83 ec 08             	sub    $0x8,%esp
    assert(inode_ref_count(node) == 0);
c010f2fd:	ff 75 08             	pushl  0x8(%ebp)
c010f300:	e8 75 ff ff ff       	call   c010f27a <inode_ref_count>
c010f305:	83 c4 04             	add    $0x4,%esp
c010f308:	85 c0                	test   %eax,%eax
c010f30a:	74 16                	je     c010f322 <inode_kill+0x2b>
c010f30c:	68 40 76 11 c0       	push   $0xc0117640
c010f311:	68 5b 76 11 c0       	push   $0xc011765b
c010f316:	6a 29                	push   $0x29
c010f318:	68 70 76 11 c0       	push   $0xc0117670
c010f31d:	e8 cb 11 ff ff       	call   c01004ed <__panic>
    assert(inode_open_count(node) == 0);
c010f322:	83 ec 0c             	sub    $0xc,%esp
c010f325:	ff 75 08             	pushl  0x8(%ebp)
c010f328:	e8 58 ff ff ff       	call   c010f285 <inode_open_count>
c010f32d:	83 c4 10             	add    $0x10,%esp
c010f330:	85 c0                	test   %eax,%eax
c010f332:	74 16                	je     c010f34a <inode_kill+0x53>
c010f334:	68 84 76 11 c0       	push   $0xc0117684
c010f339:	68 5b 76 11 c0       	push   $0xc011765b
c010f33e:	6a 2a                	push   $0x2a
c010f340:	68 70 76 11 c0       	push   $0xc0117670
c010f345:	e8 a3 11 ff ff       	call   c01004ed <__panic>
    kfree(node);
c010f34a:	83 ec 0c             	sub    $0xc,%esp
c010f34d:	ff 75 08             	pushl  0x8(%ebp)
c010f350:	e8 c5 5f ff ff       	call   c010531a <kfree>
c010f355:	83 c4 10             	add    $0x10,%esp
}
c010f358:	90                   	nop
c010f359:	c9                   	leave  
c010f35a:	c3                   	ret    

c010f35b <inode_ref_inc>:
/* *
 * inode_ref_inc - increment ref_count
 * invoked by vop_ref_inc
 * */
int
inode_ref_inc(struct inode *node) {
c010f35b:	55                   	push   %ebp
c010f35c:	89 e5                	mov    %esp,%ebp
    node->ref_count += 1;
c010f35e:	8b 45 08             	mov    0x8(%ebp),%eax
c010f361:	8b 40 30             	mov    0x30(%eax),%eax
c010f364:	8d 50 01             	lea    0x1(%eax),%edx
c010f367:	8b 45 08             	mov    0x8(%ebp),%eax
c010f36a:	89 50 30             	mov    %edx,0x30(%eax)
    return node->ref_count;
c010f36d:	8b 45 08             	mov    0x8(%ebp),%eax
c010f370:	8b 40 30             	mov    0x30(%eax),%eax
}
c010f373:	5d                   	pop    %ebp
c010f374:	c3                   	ret    

c010f375 <inode_ref_dec>:
 * inode_ref_dec - decrement ref_count
 * invoked by vop_ref_dec
 * calls vop_reclaim if the ref_count hits zero
 * */
int
inode_ref_dec(struct inode *node) {
c010f375:	55                   	push   %ebp
c010f376:	89 e5                	mov    %esp,%ebp
c010f378:	83 ec 18             	sub    $0x18,%esp
    assert(inode_ref_count(node) > 0);
c010f37b:	ff 75 08             	pushl  0x8(%ebp)
c010f37e:	e8 f7 fe ff ff       	call   c010f27a <inode_ref_count>
c010f383:	83 c4 04             	add    $0x4,%esp
c010f386:	85 c0                	test   %eax,%eax
c010f388:	7f 16                	jg     c010f3a0 <inode_ref_dec+0x2b>
c010f38a:	68 a0 76 11 c0       	push   $0xc01176a0
c010f38f:	68 5b 76 11 c0       	push   $0xc011765b
c010f394:	6a 3f                	push   $0x3f
c010f396:	68 70 76 11 c0       	push   $0xc0117670
c010f39b:	e8 4d 11 ff ff       	call   c01004ed <__panic>
    int ref_count, ret;
    node->ref_count-= 1;
c010f3a0:	8b 45 08             	mov    0x8(%ebp),%eax
c010f3a3:	8b 40 30             	mov    0x30(%eax),%eax
c010f3a6:	8d 50 ff             	lea    -0x1(%eax),%edx
c010f3a9:	8b 45 08             	mov    0x8(%ebp),%eax
c010f3ac:	89 50 30             	mov    %edx,0x30(%eax)
    ref_count = node->ref_count;
c010f3af:	8b 45 08             	mov    0x8(%ebp),%eax
c010f3b2:	8b 40 30             	mov    0x30(%eax),%eax
c010f3b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ref_count == 0) {
c010f3b8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f3bc:	0f 85 82 00 00 00    	jne    c010f444 <inode_ref_dec+0xcf>
        if ((ret = vop_reclaim(node)) != 0 && ret != -E_BUSY) {
c010f3c2:	8b 45 08             	mov    0x8(%ebp),%eax
c010f3c5:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010f3c8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010f3cc:	74 17                	je     c010f3e5 <inode_ref_dec+0x70>
c010f3ce:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f3d1:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f3d4:	85 c0                	test   %eax,%eax
c010f3d6:	74 0d                	je     c010f3e5 <inode_ref_dec+0x70>
c010f3d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f3db:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f3de:	8b 40 24             	mov    0x24(%eax),%eax
c010f3e1:	85 c0                	test   %eax,%eax
c010f3e3:	75 16                	jne    c010f3fb <inode_ref_dec+0x86>
c010f3e5:	68 bc 76 11 c0       	push   $0xc01176bc
c010f3ea:	68 5b 76 11 c0       	push   $0xc011765b
c010f3ef:	6a 44                	push   $0x44
c010f3f1:	68 70 76 11 c0       	push   $0xc0117670
c010f3f6:	e8 f2 10 ff ff       	call   c01004ed <__panic>
c010f3fb:	83 ec 08             	sub    $0x8,%esp
c010f3fe:	68 0c 77 11 c0       	push   $0xc011770c
c010f403:	ff 75 f0             	pushl  -0x10(%ebp)
c010f406:	e8 22 01 00 00       	call   c010f52d <inode_check>
c010f40b:	83 c4 10             	add    $0x10,%esp
c010f40e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f411:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f414:	8b 40 24             	mov    0x24(%eax),%eax
c010f417:	83 ec 0c             	sub    $0xc,%esp
c010f41a:	ff 75 08             	pushl  0x8(%ebp)
c010f41d:	ff d0                	call   *%eax
c010f41f:	83 c4 10             	add    $0x10,%esp
c010f422:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010f425:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010f429:	74 19                	je     c010f444 <inode_ref_dec+0xcf>
c010f42b:	83 7d ec f1          	cmpl   $0xfffffff1,-0x14(%ebp)
c010f42f:	74 13                	je     c010f444 <inode_ref_dec+0xcf>
            cprintf("vfs: warning: vop_reclaim: %e.\n", ret);
c010f431:	83 ec 08             	sub    $0x8,%esp
c010f434:	ff 75 ec             	pushl  -0x14(%ebp)
c010f437:	68 14 77 11 c0       	push   $0xc0117714
c010f43c:	e8 46 0f ff ff       	call   c0100387 <cprintf>
c010f441:	83 c4 10             	add    $0x10,%esp
        }
    }
    return ref_count;
c010f444:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010f447:	c9                   	leave  
c010f448:	c3                   	ret    

c010f449 <inode_open_inc>:
/* *
 * inode_open_inc - increment the open_count
 * invoked by vop_open_inc
 * */
int
inode_open_inc(struct inode *node) {
c010f449:	55                   	push   %ebp
c010f44a:	89 e5                	mov    %esp,%ebp
    node->open_count += 1;
c010f44c:	8b 45 08             	mov    0x8(%ebp),%eax
c010f44f:	8b 40 34             	mov    0x34(%eax),%eax
c010f452:	8d 50 01             	lea    0x1(%eax),%edx
c010f455:	8b 45 08             	mov    0x8(%ebp),%eax
c010f458:	89 50 34             	mov    %edx,0x34(%eax)
    return node->open_count;
c010f45b:	8b 45 08             	mov    0x8(%ebp),%eax
c010f45e:	8b 40 34             	mov    0x34(%eax),%eax
}
c010f461:	5d                   	pop    %ebp
c010f462:	c3                   	ret    

c010f463 <inode_open_dec>:
 * inode_open_dec - decrement the open_count
 * invoked by vop_open_dec
 * calls vop_close if the open_count hits zero
 * */
int
inode_open_dec(struct inode *node) {
c010f463:	55                   	push   %ebp
c010f464:	89 e5                	mov    %esp,%ebp
c010f466:	83 ec 18             	sub    $0x18,%esp
    assert(inode_open_count(node) > 0);
c010f469:	ff 75 08             	pushl  0x8(%ebp)
c010f46c:	e8 14 fe ff ff       	call   c010f285 <inode_open_count>
c010f471:	83 c4 04             	add    $0x4,%esp
c010f474:	85 c0                	test   %eax,%eax
c010f476:	7f 16                	jg     c010f48e <inode_open_dec+0x2b>
c010f478:	68 34 77 11 c0       	push   $0xc0117734
c010f47d:	68 5b 76 11 c0       	push   $0xc011765b
c010f482:	6a 5c                	push   $0x5c
c010f484:	68 70 76 11 c0       	push   $0xc0117670
c010f489:	e8 5f 10 ff ff       	call   c01004ed <__panic>
    int open_count, ret;
    node->open_count -= 1;
c010f48e:	8b 45 08             	mov    0x8(%ebp),%eax
c010f491:	8b 40 34             	mov    0x34(%eax),%eax
c010f494:	8d 50 ff             	lea    -0x1(%eax),%edx
c010f497:	8b 45 08             	mov    0x8(%ebp),%eax
c010f49a:	89 50 34             	mov    %edx,0x34(%eax)
    open_count = node->open_count;
c010f49d:	8b 45 08             	mov    0x8(%ebp),%eax
c010f4a0:	8b 40 34             	mov    0x34(%eax),%eax
c010f4a3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (open_count == 0) {
c010f4a6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f4aa:	75 7c                	jne    c010f528 <inode_open_dec+0xc5>
        if ((ret = vop_close(node)) != 0) {
c010f4ac:	8b 45 08             	mov    0x8(%ebp),%eax
c010f4af:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010f4b2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010f4b6:	74 17                	je     c010f4cf <inode_open_dec+0x6c>
c010f4b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f4bb:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f4be:	85 c0                	test   %eax,%eax
c010f4c0:	74 0d                	je     c010f4cf <inode_open_dec+0x6c>
c010f4c2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f4c5:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f4c8:	8b 40 08             	mov    0x8(%eax),%eax
c010f4cb:	85 c0                	test   %eax,%eax
c010f4cd:	75 16                	jne    c010f4e5 <inode_open_dec+0x82>
c010f4cf:	68 50 77 11 c0       	push   $0xc0117750
c010f4d4:	68 5b 76 11 c0       	push   $0xc011765b
c010f4d9:	6a 61                	push   $0x61
c010f4db:	68 70 76 11 c0       	push   $0xc0117670
c010f4e0:	e8 08 10 ff ff       	call   c01004ed <__panic>
c010f4e5:	83 ec 08             	sub    $0x8,%esp
c010f4e8:	68 9e 77 11 c0       	push   $0xc011779e
c010f4ed:	ff 75 f0             	pushl  -0x10(%ebp)
c010f4f0:	e8 38 00 00 00       	call   c010f52d <inode_check>
c010f4f5:	83 c4 10             	add    $0x10,%esp
c010f4f8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f4fb:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f4fe:	8b 40 08             	mov    0x8(%eax),%eax
c010f501:	83 ec 0c             	sub    $0xc,%esp
c010f504:	ff 75 08             	pushl  0x8(%ebp)
c010f507:	ff d0                	call   *%eax
c010f509:	83 c4 10             	add    $0x10,%esp
c010f50c:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010f50f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010f513:	74 13                	je     c010f528 <inode_open_dec+0xc5>
            cprintf("vfs: warning: vop_close: %e.\n", ret);
c010f515:	83 ec 08             	sub    $0x8,%esp
c010f518:	ff 75 ec             	pushl  -0x14(%ebp)
c010f51b:	68 a4 77 11 c0       	push   $0xc01177a4
c010f520:	e8 62 0e ff ff       	call   c0100387 <cprintf>
c010f525:	83 c4 10             	add    $0x10,%esp
        }
    }
    return open_count;
c010f528:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010f52b:	c9                   	leave  
c010f52c:	c3                   	ret    

c010f52d <inode_check>:
/* *
 * inode_check - check the various things being valid
 * called before all vop_* calls
 * */
void
inode_check(struct inode *node, const char *opstr) {
c010f52d:	55                   	push   %ebp
c010f52e:	89 e5                	mov    %esp,%ebp
c010f530:	83 ec 18             	sub    $0x18,%esp
    assert(node != NULL && node->in_ops != NULL);
c010f533:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010f537:	74 0a                	je     c010f543 <inode_check+0x16>
c010f539:	8b 45 08             	mov    0x8(%ebp),%eax
c010f53c:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f53f:	85 c0                	test   %eax,%eax
c010f541:	75 16                	jne    c010f559 <inode_check+0x2c>
c010f543:	68 c4 77 11 c0       	push   $0xc01177c4
c010f548:	68 5b 76 11 c0       	push   $0xc011765b
c010f54d:	6a 6e                	push   $0x6e
c010f54f:	68 70 76 11 c0       	push   $0xc0117670
c010f554:	e8 94 0f ff ff       	call   c01004ed <__panic>
    assert(node->in_ops->vop_magic == VOP_MAGIC);
c010f559:	8b 45 08             	mov    0x8(%ebp),%eax
c010f55c:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f55f:	8b 00                	mov    (%eax),%eax
c010f561:	3d 76 a4 4b 8c       	cmp    $0x8c4ba476,%eax
c010f566:	74 16                	je     c010f57e <inode_check+0x51>
c010f568:	68 ec 77 11 c0       	push   $0xc01177ec
c010f56d:	68 5b 76 11 c0       	push   $0xc011765b
c010f572:	6a 6f                	push   $0x6f
c010f574:	68 70 76 11 c0       	push   $0xc0117670
c010f579:	e8 6f 0f ff ff       	call   c01004ed <__panic>
    int ref_count = inode_ref_count(node), open_count = inode_open_count(node);
c010f57e:	83 ec 0c             	sub    $0xc,%esp
c010f581:	ff 75 08             	pushl  0x8(%ebp)
c010f584:	e8 f1 fc ff ff       	call   c010f27a <inode_ref_count>
c010f589:	83 c4 10             	add    $0x10,%esp
c010f58c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f58f:	83 ec 0c             	sub    $0xc,%esp
c010f592:	ff 75 08             	pushl  0x8(%ebp)
c010f595:	e8 eb fc ff ff       	call   c010f285 <inode_open_count>
c010f59a:	83 c4 10             	add    $0x10,%esp
c010f59d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    assert(ref_count >= open_count && open_count >= 0);
c010f5a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f5a3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010f5a6:	7c 06                	jl     c010f5ae <inode_check+0x81>
c010f5a8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010f5ac:	79 16                	jns    c010f5c4 <inode_check+0x97>
c010f5ae:	68 14 78 11 c0       	push   $0xc0117814
c010f5b3:	68 5b 76 11 c0       	push   $0xc011765b
c010f5b8:	6a 71                	push   $0x71
c010f5ba:	68 70 76 11 c0       	push   $0xc0117670
c010f5bf:	e8 29 0f ff ff       	call   c01004ed <__panic>
    assert(ref_count < MAX_INODE_COUNT && open_count < MAX_INODE_COUNT);
c010f5c4:	81 7d f4 ff ff 00 00 	cmpl   $0xffff,-0xc(%ebp)
c010f5cb:	7f 09                	jg     c010f5d6 <inode_check+0xa9>
c010f5cd:	81 7d f0 ff ff 00 00 	cmpl   $0xffff,-0x10(%ebp)
c010f5d4:	7e 16                	jle    c010f5ec <inode_check+0xbf>
c010f5d6:	68 40 78 11 c0       	push   $0xc0117840
c010f5db:	68 5b 76 11 c0       	push   $0xc011765b
c010f5e0:	6a 72                	push   $0x72
c010f5e2:	68 70 76 11 c0       	push   $0xc0117670
c010f5e7:	e8 01 0f ff ff       	call   c01004ed <__panic>
}
c010f5ec:	90                   	nop
c010f5ed:	c9                   	leave  
c010f5ee:	c3                   	ret    

c010f5ef <vfs_open>:
#include <assert.h>


// open file in vfs, get/create inode for file with filename path.
int
vfs_open(char *path, uint32_t open_flags, struct inode **node_store) {
c010f5ef:	55                   	push   %ebp
c010f5f0:	89 e5                	mov    %esp,%ebp
c010f5f2:	53                   	push   %ebx
c010f5f3:	83 ec 34             	sub    $0x34,%esp
    bool can_write = 0;
c010f5f6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    switch (open_flags & O_ACCMODE) {
c010f5fd:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f600:	83 e0 03             	and    $0x3,%eax
c010f603:	85 c0                	test   %eax,%eax
c010f605:	74 18                	je     c010f61f <vfs_open+0x30>
c010f607:	83 f8 02             	cmp    $0x2,%eax
c010f60a:	77 09                	ja     c010f615 <vfs_open+0x26>
    case O_RDONLY:
        break;
    case O_WRONLY:
    case O_RDWR:
        can_write = 1;
c010f60c:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
        break;
c010f613:	eb 0b                	jmp    c010f620 <vfs_open+0x31>
    default:
        return -E_INVAL;
c010f615:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010f61a:	e9 83 02 00 00       	jmp    c010f8a2 <vfs_open+0x2b3>
int
vfs_open(char *path, uint32_t open_flags, struct inode **node_store) {
    bool can_write = 0;
    switch (open_flags & O_ACCMODE) {
    case O_RDONLY:
        break;
c010f61f:	90                   	nop
        break;
    default:
        return -E_INVAL;
    }

    if (open_flags & O_TRUNC) {
c010f620:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f623:	83 e0 10             	and    $0x10,%eax
c010f626:	85 c0                	test   %eax,%eax
c010f628:	74 10                	je     c010f63a <vfs_open+0x4b>
        if (!can_write) {
c010f62a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f62e:	75 0a                	jne    c010f63a <vfs_open+0x4b>
            return -E_INVAL;
c010f630:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010f635:	e9 68 02 00 00       	jmp    c010f8a2 <vfs_open+0x2b3>
        }
    }

    int ret; 
    struct inode *node;
    bool excl = (open_flags & O_EXCL) != 0;
c010f63a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f63d:	83 e0 08             	and    $0x8,%eax
c010f640:	85 c0                	test   %eax,%eax
c010f642:	0f 95 c0             	setne  %al
c010f645:	0f b6 c0             	movzbl %al,%eax
c010f648:	89 45 f0             	mov    %eax,-0x10(%ebp)
    bool create = (open_flags & O_CREAT) != 0;
c010f64b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f64e:	83 e0 04             	and    $0x4,%eax
c010f651:	85 c0                	test   %eax,%eax
c010f653:	0f 95 c0             	setne  %al
c010f656:	0f b6 c0             	movzbl %al,%eax
c010f659:	89 45 ec             	mov    %eax,-0x14(%ebp)
    ret = vfs_lookup(path, &node);
c010f65c:	83 ec 08             	sub    $0x8,%esp
c010f65f:	8d 45 d8             	lea    -0x28(%ebp),%eax
c010f662:	50                   	push   %eax
c010f663:	ff 75 08             	pushl  0x8(%ebp)
c010f666:	e8 07 fb ff ff       	call   c010f172 <vfs_lookup>
c010f66b:	83 c4 10             	add    $0x10,%esp
c010f66e:	89 45 e8             	mov    %eax,-0x18(%ebp)

    if (ret != 0) {
c010f671:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010f675:	0f 84 b1 00 00 00    	je     c010f72c <vfs_open+0x13d>
        if (ret == -16 && (create)) {
c010f67b:	83 7d e8 f0          	cmpl   $0xfffffff0,-0x18(%ebp)
c010f67f:	0f 85 9f 00 00 00    	jne    c010f724 <vfs_open+0x135>
c010f685:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010f689:	0f 84 95 00 00 00    	je     c010f724 <vfs_open+0x135>
            char *name;
            struct inode *dir;
            if ((ret = vfs_lookup_parent(path, &dir, &name)) != 0) {
c010f68f:	83 ec 04             	sub    $0x4,%esp
c010f692:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c010f695:	50                   	push   %eax
c010f696:	8d 45 d0             	lea    -0x30(%ebp),%eax
c010f699:	50                   	push   %eax
c010f69a:	ff 75 08             	pushl  0x8(%ebp)
c010f69d:	e8 96 fb ff ff       	call   c010f238 <vfs_lookup_parent>
c010f6a2:	83 c4 10             	add    $0x10,%esp
c010f6a5:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010f6a8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010f6ac:	74 08                	je     c010f6b6 <vfs_open+0xc7>
                return ret;
c010f6ae:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f6b1:	e9 ec 01 00 00       	jmp    c010f8a2 <vfs_open+0x2b3>
            }
            ret = vop_create(dir, name, excl, &node);
c010f6b6:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010f6b9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010f6bc:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010f6c0:	74 17                	je     c010f6d9 <vfs_open+0xea>
c010f6c2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f6c5:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f6c8:	85 c0                	test   %eax,%eax
c010f6ca:	74 0d                	je     c010f6d9 <vfs_open+0xea>
c010f6cc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f6cf:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f6d2:	8b 40 34             	mov    0x34(%eax),%eax
c010f6d5:	85 c0                	test   %eax,%eax
c010f6d7:	75 16                	jne    c010f6ef <vfs_open+0x100>
c010f6d9:	68 7c 78 11 c0       	push   $0xc011787c
c010f6de:	68 cb 78 11 c0       	push   $0xc01178cb
c010f6e3:	6a 2c                	push   $0x2c
c010f6e5:	68 e0 78 11 c0       	push   $0xc01178e0
c010f6ea:	e8 fe 0d ff ff       	call   c01004ed <__panic>
c010f6ef:	83 ec 08             	sub    $0x8,%esp
c010f6f2:	68 f6 78 11 c0       	push   $0xc01178f6
c010f6f7:	ff 75 e4             	pushl  -0x1c(%ebp)
c010f6fa:	e8 2e fe ff ff       	call   c010f52d <inode_check>
c010f6ff:	83 c4 10             	add    $0x10,%esp
c010f702:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f705:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f708:	8b 40 34             	mov    0x34(%eax),%eax
c010f70b:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
c010f70e:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010f711:	8d 5d d8             	lea    -0x28(%ebp),%ebx
c010f714:	53                   	push   %ebx
c010f715:	ff 75 f0             	pushl  -0x10(%ebp)
c010f718:	51                   	push   %ecx
c010f719:	52                   	push   %edx
c010f71a:	ff d0                	call   *%eax
c010f71c:	83 c4 10             	add    $0x10,%esp
c010f71f:	89 45 e8             	mov    %eax,-0x18(%ebp)
    bool excl = (open_flags & O_EXCL) != 0;
    bool create = (open_flags & O_CREAT) != 0;
    ret = vfs_lookup(path, &node);

    if (ret != 0) {
        if (ret == -16 && (create)) {
c010f722:	eb 1e                	jmp    c010f742 <vfs_open+0x153>
            struct inode *dir;
            if ((ret = vfs_lookup_parent(path, &dir, &name)) != 0) {
                return ret;
            }
            ret = vop_create(dir, name, excl, &node);
        } else return ret;
c010f724:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f727:	e9 76 01 00 00       	jmp    c010f8a2 <vfs_open+0x2b3>
    } else if (excl && create) {
c010f72c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010f730:	74 10                	je     c010f742 <vfs_open+0x153>
c010f732:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010f736:	74 0a                	je     c010f742 <vfs_open+0x153>
        return -E_EXISTS;
c010f738:	b8 e9 ff ff ff       	mov    $0xffffffe9,%eax
c010f73d:	e9 60 01 00 00       	jmp    c010f8a2 <vfs_open+0x2b3>
    }
    assert(node != NULL);
c010f742:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010f745:	85 c0                	test   %eax,%eax
c010f747:	75 16                	jne    c010f75f <vfs_open+0x170>
c010f749:	68 fd 78 11 c0       	push   $0xc01178fd
c010f74e:	68 cb 78 11 c0       	push   $0xc01178cb
c010f753:	6a 31                	push   $0x31
c010f755:	68 e0 78 11 c0       	push   $0xc01178e0
c010f75a:	e8 8e 0d ff ff       	call   c01004ed <__panic>
    
    if ((ret = vop_open(node, open_flags)) != 0) {
c010f75f:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010f762:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010f765:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c010f769:	74 17                	je     c010f782 <vfs_open+0x193>
c010f76b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010f76e:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f771:	85 c0                	test   %eax,%eax
c010f773:	74 0d                	je     c010f782 <vfs_open+0x193>
c010f775:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010f778:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f77b:	8b 40 04             	mov    0x4(%eax),%eax
c010f77e:	85 c0                	test   %eax,%eax
c010f780:	75 16                	jne    c010f798 <vfs_open+0x1a9>
c010f782:	68 0c 79 11 c0       	push   $0xc011790c
c010f787:	68 cb 78 11 c0       	push   $0xc01178cb
c010f78c:	6a 33                	push   $0x33
c010f78e:	68 e0 78 11 c0       	push   $0xc01178e0
c010f793:	e8 55 0d ff ff       	call   c01004ed <__panic>
c010f798:	83 ec 08             	sub    $0x8,%esp
c010f79b:	68 59 79 11 c0       	push   $0xc0117959
c010f7a0:	ff 75 e0             	pushl  -0x20(%ebp)
c010f7a3:	e8 85 fd ff ff       	call   c010f52d <inode_check>
c010f7a8:	83 c4 10             	add    $0x10,%esp
c010f7ab:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010f7ae:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f7b1:	8b 40 04             	mov    0x4(%eax),%eax
c010f7b4:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010f7b7:	83 ec 08             	sub    $0x8,%esp
c010f7ba:	ff 75 0c             	pushl  0xc(%ebp)
c010f7bd:	52                   	push   %edx
c010f7be:	ff d0                	call   *%eax
c010f7c0:	83 c4 10             	add    $0x10,%esp
c010f7c3:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010f7c6:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010f7ca:	74 17                	je     c010f7e3 <vfs_open+0x1f4>
        vop_ref_dec(node);
c010f7cc:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010f7cf:	83 ec 0c             	sub    $0xc,%esp
c010f7d2:	50                   	push   %eax
c010f7d3:	e8 9d fb ff ff       	call   c010f375 <inode_ref_dec>
c010f7d8:	83 c4 10             	add    $0x10,%esp
        return ret;
c010f7db:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f7de:	e9 bf 00 00 00       	jmp    c010f8a2 <vfs_open+0x2b3>
    }

    vop_open_inc(node);
c010f7e3:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010f7e6:	83 ec 0c             	sub    $0xc,%esp
c010f7e9:	50                   	push   %eax
c010f7ea:	e8 5a fc ff ff       	call   c010f449 <inode_open_inc>
c010f7ef:	83 c4 10             	add    $0x10,%esp
    if (open_flags & O_TRUNC || create) {
c010f7f2:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f7f5:	83 e0 10             	and    $0x10,%eax
c010f7f8:	85 c0                	test   %eax,%eax
c010f7fa:	75 0a                	jne    c010f806 <vfs_open+0x217>
c010f7fc:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010f800:	0f 84 8f 00 00 00    	je     c010f895 <vfs_open+0x2a6>
        if ((ret = vop_truncate(node, 0)) != 0) {
c010f806:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010f809:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010f80c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010f810:	74 17                	je     c010f829 <vfs_open+0x23a>
c010f812:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010f815:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f818:	85 c0                	test   %eax,%eax
c010f81a:	74 0d                	je     c010f829 <vfs_open+0x23a>
c010f81c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010f81f:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f822:	8b 40 30             	mov    0x30(%eax),%eax
c010f825:	85 c0                	test   %eax,%eax
c010f827:	75 16                	jne    c010f83f <vfs_open+0x250>
c010f829:	68 60 79 11 c0       	push   $0xc0117960
c010f82e:	68 cb 78 11 c0       	push   $0xc01178cb
c010f833:	6a 3a                	push   $0x3a
c010f835:	68 e0 78 11 c0       	push   $0xc01178e0
c010f83a:	e8 ae 0c ff ff       	call   c01004ed <__panic>
c010f83f:	83 ec 08             	sub    $0x8,%esp
c010f842:	68 b1 79 11 c0       	push   $0xc01179b1
c010f847:	ff 75 dc             	pushl  -0x24(%ebp)
c010f84a:	e8 de fc ff ff       	call   c010f52d <inode_check>
c010f84f:	83 c4 10             	add    $0x10,%esp
c010f852:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010f855:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f858:	8b 40 30             	mov    0x30(%eax),%eax
c010f85b:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010f85e:	83 ec 08             	sub    $0x8,%esp
c010f861:	6a 00                	push   $0x0
c010f863:	52                   	push   %edx
c010f864:	ff d0                	call   *%eax
c010f866:	83 c4 10             	add    $0x10,%esp
c010f869:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010f86c:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010f870:	74 23                	je     c010f895 <vfs_open+0x2a6>
            vop_open_dec(node);
c010f872:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010f875:	83 ec 0c             	sub    $0xc,%esp
c010f878:	50                   	push   %eax
c010f879:	e8 e5 fb ff ff       	call   c010f463 <inode_open_dec>
c010f87e:	83 c4 10             	add    $0x10,%esp
            vop_ref_dec(node);
c010f881:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010f884:	83 ec 0c             	sub    $0xc,%esp
c010f887:	50                   	push   %eax
c010f888:	e8 e8 fa ff ff       	call   c010f375 <inode_ref_dec>
c010f88d:	83 c4 10             	add    $0x10,%esp
            return ret;
c010f890:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f893:	eb 0d                	jmp    c010f8a2 <vfs_open+0x2b3>
        }
    }
    *node_store = node;
c010f895:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010f898:	8b 45 10             	mov    0x10(%ebp),%eax
c010f89b:	89 10                	mov    %edx,(%eax)
    return 0;
c010f89d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010f8a2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c010f8a5:	c9                   	leave  
c010f8a6:	c3                   	ret    

c010f8a7 <vfs_close>:

// close file in vfs
int
vfs_close(struct inode *node) {
c010f8a7:	55                   	push   %ebp
c010f8a8:	89 e5                	mov    %esp,%ebp
c010f8aa:	83 ec 08             	sub    $0x8,%esp
    vop_open_dec(node);
c010f8ad:	83 ec 0c             	sub    $0xc,%esp
c010f8b0:	ff 75 08             	pushl  0x8(%ebp)
c010f8b3:	e8 ab fb ff ff       	call   c010f463 <inode_open_dec>
c010f8b8:	83 c4 10             	add    $0x10,%esp
    vop_ref_dec(node);
c010f8bb:	83 ec 0c             	sub    $0xc,%esp
c010f8be:	ff 75 08             	pushl  0x8(%ebp)
c010f8c1:	e8 af fa ff ff       	call   c010f375 <inode_ref_dec>
c010f8c6:	83 c4 10             	add    $0x10,%esp
    return 0;
c010f8c9:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010f8ce:	c9                   	leave  
c010f8cf:	c3                   	ret    

c010f8d0 <vfs_unlink>:

// unimplement
int
vfs_unlink(char *path) {
c010f8d0:	55                   	push   %ebp
c010f8d1:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c010f8d3:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c010f8d8:	5d                   	pop    %ebp
c010f8d9:	c3                   	ret    

c010f8da <vfs_rename>:

// unimplement
int
vfs_rename(char *old_path, char *new_path) {
c010f8da:	55                   	push   %ebp
c010f8db:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c010f8dd:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c010f8e2:	5d                   	pop    %ebp
c010f8e3:	c3                   	ret    

c010f8e4 <vfs_link>:

// unimplement
int
vfs_link(char *old_path, char *new_path) {
c010f8e4:	55                   	push   %ebp
c010f8e5:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c010f8e7:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c010f8ec:	5d                   	pop    %ebp
c010f8ed:	c3                   	ret    

c010f8ee <vfs_symlink>:

// unimplement
int
vfs_symlink(char *old_path, char *new_path) {
c010f8ee:	55                   	push   %ebp
c010f8ef:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c010f8f1:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c010f8f6:	5d                   	pop    %ebp
c010f8f7:	c3                   	ret    

c010f8f8 <vfs_readlink>:

// unimplement
int
vfs_readlink(char *path, struct iobuf *iob) {
c010f8f8:	55                   	push   %ebp
c010f8f9:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c010f8fb:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c010f900:	5d                   	pop    %ebp
c010f901:	c3                   	ret    

c010f902 <vfs_mkdir>:

// unimplement
int
vfs_mkdir(char *path){
c010f902:	55                   	push   %ebp
c010f903:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c010f905:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c010f90a:	5d                   	pop    %ebp
c010f90b:	c3                   	ret    

c010f90c <__alloc_fs>:

extern void vfs_devlist_init(void);

// __alloc_fs - allocate memory for fs, and set fs type
struct fs *
__alloc_fs(int type) {
c010f90c:	55                   	push   %ebp
c010f90d:	89 e5                	mov    %esp,%ebp
c010f90f:	83 ec 18             	sub    $0x18,%esp
    struct fs *fs;
    if ((fs = kmalloc(sizeof(struct fs))) != NULL) {
c010f912:	83 ec 0c             	sub    $0xc,%esp
c010f915:	68 80 00 00 00       	push   $0x80
c010f91a:	e8 e3 59 ff ff       	call   c0105302 <kmalloc>
c010f91f:	83 c4 10             	add    $0x10,%esp
c010f922:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f925:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f929:	74 09                	je     c010f934 <__alloc_fs+0x28>
        fs->fs_type = type;
c010f92b:	8b 55 08             	mov    0x8(%ebp),%edx
c010f92e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f931:	89 50 6c             	mov    %edx,0x6c(%eax)
    }
    return fs;
c010f934:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010f937:	c9                   	leave  
c010f938:	c3                   	ret    

c010f939 <vfs_init>:

// vfs_init -  vfs initialize
void
vfs_init(void) {
c010f939:	55                   	push   %ebp
c010f93a:	89 e5                	mov    %esp,%ebp
c010f93c:	83 ec 08             	sub    $0x8,%esp
    sem_init(&bootfs_sem, 1);
c010f93f:	83 ec 08             	sub    $0x8,%esp
c010f942:	6a 01                	push   $0x1
c010f944:	68 cc 40 15 c0       	push   $0xc01540cc
c010f949:	e8 d6 9c ff ff       	call   c0109624 <sem_init>
c010f94e:	83 c4 10             	add    $0x10,%esp
    vfs_devlist_init();
c010f951:	e8 8d eb ff ff       	call   c010e4e3 <vfs_devlist_init>
}
c010f956:	90                   	nop
c010f957:	c9                   	leave  
c010f958:	c3                   	ret    

c010f959 <lock_bootfs>:

// lock_bootfs - lock  for bootfs
static void
lock_bootfs(void) {
c010f959:	55                   	push   %ebp
c010f95a:	89 e5                	mov    %esp,%ebp
c010f95c:	83 ec 08             	sub    $0x8,%esp
    down(&bootfs_sem);
c010f95f:	83 ec 0c             	sub    $0xc,%esp
c010f962:	68 cc 40 15 c0       	push   $0xc01540cc
c010f967:	e8 41 9e ff ff       	call   c01097ad <down>
c010f96c:	83 c4 10             	add    $0x10,%esp
}
c010f96f:	90                   	nop
c010f970:	c9                   	leave  
c010f971:	c3                   	ret    

c010f972 <unlock_bootfs>:
// ulock_bootfs - ulock for bootfs
static void
unlock_bootfs(void) {
c010f972:	55                   	push   %ebp
c010f973:	89 e5                	mov    %esp,%ebp
c010f975:	83 ec 08             	sub    $0x8,%esp
    up(&bootfs_sem);
c010f978:	83 ec 0c             	sub    $0xc,%esp
c010f97b:	68 cc 40 15 c0       	push   $0xc01540cc
c010f980:	e8 0c 9e ff ff       	call   c0109791 <up>
c010f985:	83 c4 10             	add    $0x10,%esp
}
c010f988:	90                   	nop
c010f989:	c9                   	leave  
c010f98a:	c3                   	ret    

c010f98b <change_bootfs>:

// change_bootfs - set the new fs inode 
static void
change_bootfs(struct inode *node) {
c010f98b:	55                   	push   %ebp
c010f98c:	89 e5                	mov    %esp,%ebp
c010f98e:	83 ec 18             	sub    $0x18,%esp
    struct inode *old;
    lock_bootfs();
c010f991:	e8 c3 ff ff ff       	call   c010f959 <lock_bootfs>
    {
        old = bootfs_node, bootfs_node = node;
c010f996:	a1 d8 40 15 c0       	mov    0xc01540d8,%eax
c010f99b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f99e:	8b 45 08             	mov    0x8(%ebp),%eax
c010f9a1:	a3 d8 40 15 c0       	mov    %eax,0xc01540d8
    }
    unlock_bootfs();
c010f9a6:	e8 c7 ff ff ff       	call   c010f972 <unlock_bootfs>
    if (old != NULL) {
c010f9ab:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f9af:	74 0e                	je     c010f9bf <change_bootfs+0x34>
        vop_ref_dec(old);
c010f9b1:	83 ec 0c             	sub    $0xc,%esp
c010f9b4:	ff 75 f4             	pushl  -0xc(%ebp)
c010f9b7:	e8 b9 f9 ff ff       	call   c010f375 <inode_ref_dec>
c010f9bc:	83 c4 10             	add    $0x10,%esp
    }
}
c010f9bf:	90                   	nop
c010f9c0:	c9                   	leave  
c010f9c1:	c3                   	ret    

c010f9c2 <vfs_set_bootfs>:

// vfs_set_bootfs - change the dir of file system
int
vfs_set_bootfs(char *fsname) {
c010f9c2:	55                   	push   %ebp
c010f9c3:	89 e5                	mov    %esp,%ebp
c010f9c5:	83 ec 18             	sub    $0x18,%esp
    struct inode *node = NULL;
c010f9c8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    if (fsname != NULL) {
c010f9cf:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010f9d3:	74 66                	je     c010fa3b <vfs_set_bootfs+0x79>
        char *s;
        if ((s = strchr(fsname, ':')) == NULL || s[1] != '\0') {
c010f9d5:	83 ec 08             	sub    $0x8,%esp
c010f9d8:	6a 3a                	push   $0x3a
c010f9da:	ff 75 08             	pushl  0x8(%ebp)
c010f9dd:	e8 c1 3e 00 00       	call   c01138a3 <strchr>
c010f9e2:	83 c4 10             	add    $0x10,%esp
c010f9e5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f9e8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f9ec:	74 0d                	je     c010f9fb <vfs_set_bootfs+0x39>
c010f9ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f9f1:	83 c0 01             	add    $0x1,%eax
c010f9f4:	0f b6 00             	movzbl (%eax),%eax
c010f9f7:	84 c0                	test   %al,%al
c010f9f9:	74 07                	je     c010fa02 <vfs_set_bootfs+0x40>
            return -E_INVAL;
c010f9fb:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010fa00:	eb 4d                	jmp    c010fa4f <vfs_set_bootfs+0x8d>
        }
        int ret;
        if ((ret = vfs_chdir(fsname)) != 0) {
c010fa02:	83 ec 0c             	sub    $0xc,%esp
c010fa05:	ff 75 08             	pushl  0x8(%ebp)
c010fa08:	e8 4b f4 ff ff       	call   c010ee58 <vfs_chdir>
c010fa0d:	83 c4 10             	add    $0x10,%esp
c010fa10:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010fa13:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010fa17:	74 05                	je     c010fa1e <vfs_set_bootfs+0x5c>
            return ret;
c010fa19:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fa1c:	eb 31                	jmp    c010fa4f <vfs_set_bootfs+0x8d>
        }
        if ((ret = vfs_get_curdir(&node)) != 0) {
c010fa1e:	83 ec 0c             	sub    $0xc,%esp
c010fa21:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010fa24:	50                   	push   %eax
c010fa25:	e8 03 f3 ff ff       	call   c010ed2d <vfs_get_curdir>
c010fa2a:	83 c4 10             	add    $0x10,%esp
c010fa2d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010fa30:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010fa34:	74 05                	je     c010fa3b <vfs_set_bootfs+0x79>
            return ret;
c010fa36:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fa39:	eb 14                	jmp    c010fa4f <vfs_set_bootfs+0x8d>
        }
    }
    change_bootfs(node);
c010fa3b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fa3e:	83 ec 0c             	sub    $0xc,%esp
c010fa41:	50                   	push   %eax
c010fa42:	e8 44 ff ff ff       	call   c010f98b <change_bootfs>
c010fa47:	83 c4 10             	add    $0x10,%esp
    return 0;
c010fa4a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010fa4f:	c9                   	leave  
c010fa50:	c3                   	ret    

c010fa51 <vfs_get_bootfs>:

// vfs_get_bootfs - get the inode of bootfs
int
vfs_get_bootfs(struct inode **node_store) {
c010fa51:	55                   	push   %ebp
c010fa52:	89 e5                	mov    %esp,%ebp
c010fa54:	83 ec 18             	sub    $0x18,%esp
    struct inode *node = NULL;
c010fa57:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if (bootfs_node != NULL) {
c010fa5e:	a1 d8 40 15 c0       	mov    0xc01540d8,%eax
c010fa63:	85 c0                	test   %eax,%eax
c010fa65:	74 29                	je     c010fa90 <vfs_get_bootfs+0x3f>
        lock_bootfs();
c010fa67:	e8 ed fe ff ff       	call   c010f959 <lock_bootfs>
        {
            if ((node = bootfs_node) != NULL) {
c010fa6c:	a1 d8 40 15 c0       	mov    0xc01540d8,%eax
c010fa71:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010fa74:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010fa78:	74 11                	je     c010fa8b <vfs_get_bootfs+0x3a>
                vop_ref_inc(bootfs_node);
c010fa7a:	a1 d8 40 15 c0       	mov    0xc01540d8,%eax
c010fa7f:	83 ec 0c             	sub    $0xc,%esp
c010fa82:	50                   	push   %eax
c010fa83:	e8 d3 f8 ff ff       	call   c010f35b <inode_ref_inc>
c010fa88:	83 c4 10             	add    $0x10,%esp
            }
        }
        unlock_bootfs();
c010fa8b:	e8 e2 fe ff ff       	call   c010f972 <unlock_bootfs>
    }
    if (node == NULL) {
c010fa90:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010fa94:	75 07                	jne    c010fa9d <vfs_get_bootfs+0x4c>
        return -E_NOENT;
c010fa96:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
c010fa9b:	eb 0d                	jmp    c010faaa <vfs_get_bootfs+0x59>
    }
    *node_store = node;
c010fa9d:	8b 45 08             	mov    0x8(%ebp),%eax
c010faa0:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010faa3:	89 10                	mov    %edx,(%eax)
    return 0;
c010faa5:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010faaa:	c9                   	leave  
c010faab:	c3                   	ret    

c010faac <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c010faac:	55                   	push   %ebp
c010faad:	89 e5                	mov    %esp,%ebp
c010faaf:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010fab2:	9c                   	pushf  
c010fab3:	58                   	pop    %eax
c010fab4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010fab7:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010faba:	25 00 02 00 00       	and    $0x200,%eax
c010fabf:	85 c0                	test   %eax,%eax
c010fac1:	74 0c                	je     c010facf <__intr_save+0x23>
        intr_disable();
c010fac3:	e8 ee 27 ff ff       	call   c01022b6 <intr_disable>
        return 1;
c010fac8:	b8 01 00 00 00       	mov    $0x1,%eax
c010facd:	eb 05                	jmp    c010fad4 <__intr_save+0x28>
    }
    return 0;
c010facf:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010fad4:	c9                   	leave  
c010fad5:	c3                   	ret    

c010fad6 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010fad6:	55                   	push   %ebp
c010fad7:	89 e5                	mov    %esp,%ebp
c010fad9:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010fadc:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010fae0:	74 05                	je     c010fae7 <__intr_restore+0x11>
        intr_enable();
c010fae2:	e8 c8 27 ff ff       	call   c01022af <intr_enable>
    }
}
c010fae7:	90                   	nop
c010fae8:	c9                   	leave  
c010fae9:	c3                   	ret    

c010faea <dev_stdin_write>:
static char stdin_buffer[STDIN_BUFSIZE];
static off_t p_rpos, p_wpos;
static wait_queue_t __wait_queue, *wait_queue = &__wait_queue;

void
dev_stdin_write(char c) {
c010faea:	55                   	push   %ebp
c010faeb:	89 e5                	mov    %esp,%ebp
c010faed:	83 ec 28             	sub    $0x28,%esp
c010faf0:	8b 45 08             	mov    0x8(%ebp),%eax
c010faf3:	88 45 e4             	mov    %al,-0x1c(%ebp)
    bool intr_flag;
    if (c != '\0') {
c010faf6:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
c010fafa:	0f 84 84 00 00 00    	je     c010fb84 <dev_stdin_write+0x9a>
        local_intr_save(intr_flag);
c010fb00:	e8 a7 ff ff ff       	call   c010faac <__intr_save>
c010fb05:	89 45 f4             	mov    %eax,-0xc(%ebp)
        {
            stdin_buffer[p_wpos % STDIN_BUFSIZE] = c;
c010fb08:	a1 e4 50 15 c0       	mov    0xc01550e4,%eax
c010fb0d:	99                   	cltd   
c010fb0e:	c1 ea 14             	shr    $0x14,%edx
c010fb11:	01 d0                	add    %edx,%eax
c010fb13:	25 ff 0f 00 00       	and    $0xfff,%eax
c010fb18:	29 d0                	sub    %edx,%eax
c010fb1a:	89 c2                	mov    %eax,%edx
c010fb1c:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c010fb20:	88 82 e0 40 15 c0    	mov    %al,-0x3feabf20(%edx)
            if (p_wpos - p_rpos < STDIN_BUFSIZE) {
c010fb26:	8b 15 e4 50 15 c0    	mov    0xc01550e4,%edx
c010fb2c:	a1 e0 50 15 c0       	mov    0xc01550e0,%eax
c010fb31:	29 c2                	sub    %eax,%edx
c010fb33:	89 d0                	mov    %edx,%eax
c010fb35:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c010fb3a:	7f 0d                	jg     c010fb49 <dev_stdin_write+0x5f>
                p_wpos ++;
c010fb3c:	a1 e4 50 15 c0       	mov    0xc01550e4,%eax
c010fb41:	83 c0 01             	add    $0x1,%eax
c010fb44:	a3 e4 50 15 c0       	mov    %eax,0xc01550e4
            }
            if (!wait_queue_empty(wait_queue)) {
c010fb49:	a1 a0 ee 14 c0       	mov    0xc014eea0,%eax
c010fb4e:	83 ec 0c             	sub    $0xc,%esp
c010fb51:	50                   	push   %eax
c010fb52:	e8 fc 98 ff ff       	call   c0109453 <wait_queue_empty>
c010fb57:	83 c4 10             	add    $0x10,%esp
c010fb5a:	85 c0                	test   %eax,%eax
c010fb5c:	75 18                	jne    c010fb76 <dev_stdin_write+0x8c>
                wakeup_queue(wait_queue, WT_KBD, 1);
c010fb5e:	a1 a0 ee 14 c0       	mov    0xc014eea0,%eax
c010fb63:	83 ec 04             	sub    $0x4,%esp
c010fb66:	6a 01                	push   $0x1
c010fb68:	68 04 00 00 80       	push   $0x80000004
c010fb6d:	50                   	push   %eax
c010fb6e:	e8 91 99 ff ff       	call   c0109504 <wakeup_queue>
c010fb73:	83 c4 10             	add    $0x10,%esp
            }
        }
        local_intr_restore(intr_flag);
c010fb76:	83 ec 0c             	sub    $0xc,%esp
c010fb79:	ff 75 f4             	pushl  -0xc(%ebp)
c010fb7c:	e8 55 ff ff ff       	call   c010fad6 <__intr_restore>
c010fb81:	83 c4 10             	add    $0x10,%esp
    }
}
c010fb84:	90                   	nop
c010fb85:	c9                   	leave  
c010fb86:	c3                   	ret    

c010fb87 <dev_stdin_read>:

static int
dev_stdin_read(char *buf, size_t len) {
c010fb87:	55                   	push   %ebp
c010fb88:	89 e5                	mov    %esp,%ebp
c010fb8a:	83 ec 28             	sub    $0x28,%esp
    int ret = 0;
c010fb8d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    local_intr_save(intr_flag);
c010fb94:	e8 13 ff ff ff       	call   c010faac <__intr_save>
c010fb99:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        for (; ret < len; ret ++, p_rpos ++) {
c010fb9c:	e9 be 00 00 00       	jmp    c010fc5f <dev_stdin_read+0xd8>
        try_again:
            if (p_rpos < p_wpos) {
c010fba1:	8b 15 e0 50 15 c0    	mov    0xc01550e0,%edx
c010fba7:	a1 e4 50 15 c0       	mov    0xc01550e4,%eax
c010fbac:	39 c2                	cmp    %eax,%edx
c010fbae:	7d 2c                	jge    c010fbdc <dev_stdin_read+0x55>
                *buf ++ = stdin_buffer[p_rpos % STDIN_BUFSIZE];
c010fbb0:	8b 45 08             	mov    0x8(%ebp),%eax
c010fbb3:	8d 50 01             	lea    0x1(%eax),%edx
c010fbb6:	89 55 08             	mov    %edx,0x8(%ebp)
c010fbb9:	8b 15 e0 50 15 c0    	mov    0xc01550e0,%edx
c010fbbf:	89 d1                	mov    %edx,%ecx
c010fbc1:	c1 f9 1f             	sar    $0x1f,%ecx
c010fbc4:	c1 e9 14             	shr    $0x14,%ecx
c010fbc7:	01 ca                	add    %ecx,%edx
c010fbc9:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
c010fbcf:	29 ca                	sub    %ecx,%edx
c010fbd1:	0f b6 92 e0 40 15 c0 	movzbl -0x3feabf20(%edx),%edx
c010fbd8:	88 10                	mov    %dl,(%eax)
c010fbda:	eb 72                	jmp    c010fc4e <dev_stdin_read+0xc7>
            }
            else {
                wait_t __wait, *wait = &__wait;
c010fbdc:	8d 45 d8             	lea    -0x28(%ebp),%eax
c010fbdf:	89 45 ec             	mov    %eax,-0x14(%ebp)
                wait_current_set(wait_queue, wait, WT_KBD);
c010fbe2:	a1 a0 ee 14 c0       	mov    0xc014eea0,%eax
c010fbe7:	83 ec 04             	sub    $0x4,%esp
c010fbea:	68 04 00 00 80       	push   $0x80000004
c010fbef:	ff 75 ec             	pushl  -0x14(%ebp)
c010fbf2:	50                   	push   %eax
c010fbf3:	e8 88 99 ff ff       	call   c0109580 <wait_current_set>
c010fbf8:	83 c4 10             	add    $0x10,%esp
                local_intr_restore(intr_flag);
c010fbfb:	83 ec 0c             	sub    $0xc,%esp
c010fbfe:	ff 75 f0             	pushl  -0x10(%ebp)
c010fc01:	e8 d0 fe ff ff       	call   c010fad6 <__intr_restore>
c010fc06:	83 c4 10             	add    $0x10,%esp

                schedule();
c010fc09:	e8 5e dc ff ff       	call   c010d86c <schedule>

                local_intr_save(intr_flag);
c010fc0e:	e8 99 fe ff ff       	call   c010faac <__intr_save>
c010fc13:	89 45 f0             	mov    %eax,-0x10(%ebp)
                wait_current_del(wait_queue, wait);
c010fc16:	83 ec 0c             	sub    $0xc,%esp
c010fc19:	ff 75 ec             	pushl  -0x14(%ebp)
c010fc1c:	e8 50 98 ff ff       	call   c0109471 <wait_in_queue>
c010fc21:	83 c4 10             	add    $0x10,%esp
c010fc24:	85 c0                	test   %eax,%eax
c010fc26:	74 14                	je     c010fc3c <dev_stdin_read+0xb5>
c010fc28:	a1 a0 ee 14 c0       	mov    0xc014eea0,%eax
c010fc2d:	83 ec 08             	sub    $0x8,%esp
c010fc30:	ff 75 ec             	pushl  -0x14(%ebp)
c010fc33:	50                   	push   %eax
c010fc34:	e8 5b 96 ff ff       	call   c0109294 <wait_queue_del>
c010fc39:	83 c4 10             	add    $0x10,%esp
                if (wait->wakeup_flags == WT_KBD) {
c010fc3c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fc3f:	8b 40 04             	mov    0x4(%eax),%eax
c010fc42:	3d 04 00 00 80       	cmp    $0x80000004,%eax
c010fc47:	75 24                	jne    c010fc6d <dev_stdin_read+0xe6>
c010fc49:	e9 53 ff ff ff       	jmp    c010fba1 <dev_stdin_read+0x1a>
dev_stdin_read(char *buf, size_t len) {
    int ret = 0;
    bool intr_flag;
    local_intr_save(intr_flag);
    {
        for (; ret < len; ret ++, p_rpos ++) {
c010fc4e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010fc52:	a1 e0 50 15 c0       	mov    0xc01550e0,%eax
c010fc57:	83 c0 01             	add    $0x1,%eax
c010fc5a:	a3 e0 50 15 c0       	mov    %eax,0xc01550e0
c010fc5f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010fc62:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010fc65:	0f 82 36 ff ff ff    	jb     c010fba1 <dev_stdin_read+0x1a>
c010fc6b:	eb 01                	jmp    c010fc6e <dev_stdin_read+0xe7>
                local_intr_save(intr_flag);
                wait_current_del(wait_queue, wait);
                if (wait->wakeup_flags == WT_KBD) {
                    goto try_again;
                }
                break;
c010fc6d:	90                   	nop
            }
        }
    }
    local_intr_restore(intr_flag);
c010fc6e:	83 ec 0c             	sub    $0xc,%esp
c010fc71:	ff 75 f0             	pushl  -0x10(%ebp)
c010fc74:	e8 5d fe ff ff       	call   c010fad6 <__intr_restore>
c010fc79:	83 c4 10             	add    $0x10,%esp
    return ret;
c010fc7c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010fc7f:	c9                   	leave  
c010fc80:	c3                   	ret    

c010fc81 <stdin_open>:

static int
stdin_open(struct device *dev, uint32_t open_flags) {
c010fc81:	55                   	push   %ebp
c010fc82:	89 e5                	mov    %esp,%ebp
    if (open_flags != O_RDONLY) {
c010fc84:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010fc88:	74 07                	je     c010fc91 <stdin_open+0x10>
        return -E_INVAL;
c010fc8a:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010fc8f:	eb 05                	jmp    c010fc96 <stdin_open+0x15>
    }
    return 0;
c010fc91:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010fc96:	5d                   	pop    %ebp
c010fc97:	c3                   	ret    

c010fc98 <stdin_close>:

static int
stdin_close(struct device *dev) {
c010fc98:	55                   	push   %ebp
c010fc99:	89 e5                	mov    %esp,%ebp
    return 0;
c010fc9b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010fca0:	5d                   	pop    %ebp
c010fca1:	c3                   	ret    

c010fca2 <stdin_io>:

static int
stdin_io(struct device *dev, struct iobuf *iob, bool write) {
c010fca2:	55                   	push   %ebp
c010fca3:	89 e5                	mov    %esp,%ebp
c010fca5:	83 ec 18             	sub    $0x18,%esp
    if (!write) {
c010fca8:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010fcac:	75 37                	jne    c010fce5 <stdin_io+0x43>
        int ret;
        if ((ret = dev_stdin_read(iob->io_base, iob->io_resid)) > 0) {
c010fcae:	8b 45 0c             	mov    0xc(%ebp),%eax
c010fcb1:	8b 50 0c             	mov    0xc(%eax),%edx
c010fcb4:	8b 45 0c             	mov    0xc(%ebp),%eax
c010fcb7:	8b 00                	mov    (%eax),%eax
c010fcb9:	83 ec 08             	sub    $0x8,%esp
c010fcbc:	52                   	push   %edx
c010fcbd:	50                   	push   %eax
c010fcbe:	e8 c4 fe ff ff       	call   c010fb87 <dev_stdin_read>
c010fcc3:	83 c4 10             	add    $0x10,%esp
c010fcc6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010fcc9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010fccd:	7e 11                	jle    c010fce0 <stdin_io+0x3e>
            iob->io_resid -= ret;
c010fccf:	8b 45 0c             	mov    0xc(%ebp),%eax
c010fcd2:	8b 50 0c             	mov    0xc(%eax),%edx
c010fcd5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010fcd8:	29 c2                	sub    %eax,%edx
c010fcda:	8b 45 0c             	mov    0xc(%ebp),%eax
c010fcdd:	89 50 0c             	mov    %edx,0xc(%eax)
        }
        return ret;
c010fce0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010fce3:	eb 05                	jmp    c010fcea <stdin_io+0x48>
    }
    return -E_INVAL;
c010fce5:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c010fcea:	c9                   	leave  
c010fceb:	c3                   	ret    

c010fcec <stdin_ioctl>:

static int
stdin_ioctl(struct device *dev, int op, void *data) {
c010fcec:	55                   	push   %ebp
c010fced:	89 e5                	mov    %esp,%ebp
    return -E_INVAL;
c010fcef:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c010fcf4:	5d                   	pop    %ebp
c010fcf5:	c3                   	ret    

c010fcf6 <stdin_device_init>:

static void
stdin_device_init(struct device *dev) {
c010fcf6:	55                   	push   %ebp
c010fcf7:	89 e5                	mov    %esp,%ebp
c010fcf9:	83 ec 08             	sub    $0x8,%esp
    dev->d_blocks = 0;
c010fcfc:	8b 45 08             	mov    0x8(%ebp),%eax
c010fcff:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    dev->d_blocksize = 1;
c010fd05:	8b 45 08             	mov    0x8(%ebp),%eax
c010fd08:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
    dev->d_open = stdin_open;
c010fd0f:	8b 45 08             	mov    0x8(%ebp),%eax
c010fd12:	c7 40 08 81 fc 10 c0 	movl   $0xc010fc81,0x8(%eax)
    dev->d_close = stdin_close;
c010fd19:	8b 45 08             	mov    0x8(%ebp),%eax
c010fd1c:	c7 40 0c 98 fc 10 c0 	movl   $0xc010fc98,0xc(%eax)
    dev->d_io = stdin_io;
c010fd23:	8b 45 08             	mov    0x8(%ebp),%eax
c010fd26:	c7 40 10 a2 fc 10 c0 	movl   $0xc010fca2,0x10(%eax)
    dev->d_ioctl = stdin_ioctl;
c010fd2d:	8b 45 08             	mov    0x8(%ebp),%eax
c010fd30:	c7 40 14 ec fc 10 c0 	movl   $0xc010fcec,0x14(%eax)

    p_rpos = p_wpos = 0;
c010fd37:	c7 05 e4 50 15 c0 00 	movl   $0x0,0xc01550e4
c010fd3e:	00 00 00 
c010fd41:	a1 e4 50 15 c0       	mov    0xc01550e4,%eax
c010fd46:	a3 e0 50 15 c0       	mov    %eax,0xc01550e0
    wait_queue_init(wait_queue);
c010fd4b:	a1 a0 ee 14 c0       	mov    0xc014eea0,%eax
c010fd50:	83 ec 0c             	sub    $0xc,%esp
c010fd53:	50                   	push   %eax
c010fd54:	e8 84 94 ff ff       	call   c01091dd <wait_queue_init>
c010fd59:	83 c4 10             	add    $0x10,%esp
}
c010fd5c:	90                   	nop
c010fd5d:	c9                   	leave  
c010fd5e:	c3                   	ret    

c010fd5f <dev_init_stdin>:

void
dev_init_stdin(void) {
c010fd5f:	55                   	push   %ebp
c010fd60:	89 e5                	mov    %esp,%ebp
c010fd62:	83 ec 18             	sub    $0x18,%esp
    struct inode *node;
    if ((node = dev_create_inode()) == NULL) {
c010fd65:	e8 ab 09 00 00       	call   c0110715 <dev_create_inode>
c010fd6a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010fd6d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010fd71:	75 14                	jne    c010fd87 <dev_init_stdin+0x28>
        panic("stdin: dev_create_node.\n");
c010fd73:	83 ec 04             	sub    $0x4,%esp
c010fd76:	68 bc 79 11 c0       	push   $0xc01179bc
c010fd7b:	6a 75                	push   $0x75
c010fd7d:	68 d5 79 11 c0       	push   $0xc01179d5
c010fd82:	e8 66 07 ff ff       	call   c01004ed <__panic>
    }
    stdin_device_init(vop_info(node, device));
c010fd87:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010fd8a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010fd8d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010fd91:	74 0d                	je     c010fda0 <dev_init_stdin+0x41>
c010fd93:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fd96:	8b 40 2c             	mov    0x2c(%eax),%eax
c010fd99:	3d 34 12 00 00       	cmp    $0x1234,%eax
c010fd9e:	74 16                	je     c010fdb6 <dev_init_stdin+0x57>
c010fda0:	68 f0 79 11 c0       	push   $0xc01179f0
c010fda5:	68 23 7a 11 c0       	push   $0xc0117a23
c010fdaa:	6a 77                	push   $0x77
c010fdac:	68 d5 79 11 c0       	push   $0xc01179d5
c010fdb1:	e8 37 07 ff ff       	call   c01004ed <__panic>
c010fdb6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fdb9:	83 ec 0c             	sub    $0xc,%esp
c010fdbc:	50                   	push   %eax
c010fdbd:	e8 34 ff ff ff       	call   c010fcf6 <stdin_device_init>
c010fdc2:	83 c4 10             	add    $0x10,%esp

    int ret;
    if ((ret = vfs_add_dev("stdin", node, 0)) != 0) {
c010fdc5:	83 ec 04             	sub    $0x4,%esp
c010fdc8:	6a 00                	push   $0x0
c010fdca:	ff 75 f4             	pushl  -0xc(%ebp)
c010fdcd:	68 38 7a 11 c0       	push   $0xc0117a38
c010fdd2:	e8 3f eb ff ff       	call   c010e916 <vfs_add_dev>
c010fdd7:	83 c4 10             	add    $0x10,%esp
c010fdda:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010fddd:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010fde1:	74 14                	je     c010fdf7 <dev_init_stdin+0x98>
        panic("stdin: vfs_add_dev: %e.\n", ret);
c010fde3:	ff 75 ec             	pushl  -0x14(%ebp)
c010fde6:	68 3e 7a 11 c0       	push   $0xc0117a3e
c010fdeb:	6a 7b                	push   $0x7b
c010fded:	68 d5 79 11 c0       	push   $0xc01179d5
c010fdf2:	e8 f6 06 ff ff       	call   c01004ed <__panic>
    }
}
c010fdf7:	90                   	nop
c010fdf8:	c9                   	leave  
c010fdf9:	c3                   	ret    

c010fdfa <lock_disk0>:

static char *disk0_buffer;
static semaphore_t disk0_sem;

static void
lock_disk0(void) {
c010fdfa:	55                   	push   %ebp
c010fdfb:	89 e5                	mov    %esp,%ebp
c010fdfd:	83 ec 08             	sub    $0x8,%esp
    down(&(disk0_sem));
c010fe00:	83 ec 0c             	sub    $0xc,%esp
c010fe03:	68 f4 50 15 c0       	push   $0xc01550f4
c010fe08:	e8 a0 99 ff ff       	call   c01097ad <down>
c010fe0d:	83 c4 10             	add    $0x10,%esp
}
c010fe10:	90                   	nop
c010fe11:	c9                   	leave  
c010fe12:	c3                   	ret    

c010fe13 <unlock_disk0>:

static void
unlock_disk0(void) {
c010fe13:	55                   	push   %ebp
c010fe14:	89 e5                	mov    %esp,%ebp
c010fe16:	83 ec 08             	sub    $0x8,%esp
    up(&(disk0_sem));
c010fe19:	83 ec 0c             	sub    $0xc,%esp
c010fe1c:	68 f4 50 15 c0       	push   $0xc01550f4
c010fe21:	e8 6b 99 ff ff       	call   c0109791 <up>
c010fe26:	83 c4 10             	add    $0x10,%esp
}
c010fe29:	90                   	nop
c010fe2a:	c9                   	leave  
c010fe2b:	c3                   	ret    

c010fe2c <disk0_open>:

static int
disk0_open(struct device *dev, uint32_t open_flags) {
c010fe2c:	55                   	push   %ebp
c010fe2d:	89 e5                	mov    %esp,%ebp
    return 0;
c010fe2f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010fe34:	5d                   	pop    %ebp
c010fe35:	c3                   	ret    

c010fe36 <disk0_close>:

static int
disk0_close(struct device *dev) {
c010fe36:	55                   	push   %ebp
c010fe37:	89 e5                	mov    %esp,%ebp
    return 0;
c010fe39:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010fe3e:	5d                   	pop    %ebp
c010fe3f:	c3                   	ret    

c010fe40 <disk0_read_blks_nolock>:

static void
disk0_read_blks_nolock(uint32_t blkno, uint32_t nblks) {
c010fe40:	55                   	push   %ebp
c010fe41:	89 e5                	mov    %esp,%ebp
c010fe43:	83 ec 18             	sub    $0x18,%esp
    int ret;
    uint32_t sectno = blkno * DISK0_BLK_NSECT, nsecs = nblks * DISK0_BLK_NSECT;
c010fe46:	8b 45 08             	mov    0x8(%ebp),%eax
c010fe49:	c1 e0 03             	shl    $0x3,%eax
c010fe4c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010fe4f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010fe52:	c1 e0 03             	shl    $0x3,%eax
c010fe55:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = ide_read_secs(DISK0_DEV_NO, sectno, disk0_buffer, nsecs)) != 0) {
c010fe58:	a1 f0 50 15 c0       	mov    0xc01550f0,%eax
c010fe5d:	ff 75 f0             	pushl  -0x10(%ebp)
c010fe60:	50                   	push   %eax
c010fe61:	ff 75 f4             	pushl  -0xc(%ebp)
c010fe64:	6a 02                	push   $0x2
c010fe66:	e8 de 14 ff ff       	call   c0101349 <ide_read_secs>
c010fe6b:	83 c4 10             	add    $0x10,%esp
c010fe6e:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010fe71:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010fe75:	74 20                	je     c010fe97 <disk0_read_blks_nolock+0x57>
        panic("disk0: read blkno = %d (sectno = %d), nblks = %d (nsecs = %d): 0x%08x.\n",
c010fe77:	ff 75 ec             	pushl  -0x14(%ebp)
c010fe7a:	ff 75 f0             	pushl  -0x10(%ebp)
c010fe7d:	ff 75 0c             	pushl  0xc(%ebp)
c010fe80:	ff 75 f4             	pushl  -0xc(%ebp)
c010fe83:	ff 75 08             	pushl  0x8(%ebp)
c010fe86:	68 58 7a 11 c0       	push   $0xc0117a58
c010fe8b:	6a 2e                	push   $0x2e
c010fe8d:	68 a0 7a 11 c0       	push   $0xc0117aa0
c010fe92:	e8 56 06 ff ff       	call   c01004ed <__panic>
                blkno, sectno, nblks, nsecs, ret);
    }
}
c010fe97:	90                   	nop
c010fe98:	c9                   	leave  
c010fe99:	c3                   	ret    

c010fe9a <disk0_write_blks_nolock>:

static void
disk0_write_blks_nolock(uint32_t blkno, uint32_t nblks) {
c010fe9a:	55                   	push   %ebp
c010fe9b:	89 e5                	mov    %esp,%ebp
c010fe9d:	83 ec 18             	sub    $0x18,%esp
    int ret;
    uint32_t sectno = blkno * DISK0_BLK_NSECT, nsecs = nblks * DISK0_BLK_NSECT;
c010fea0:	8b 45 08             	mov    0x8(%ebp),%eax
c010fea3:	c1 e0 03             	shl    $0x3,%eax
c010fea6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010fea9:	8b 45 0c             	mov    0xc(%ebp),%eax
c010feac:	c1 e0 03             	shl    $0x3,%eax
c010feaf:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = ide_write_secs(DISK0_DEV_NO, sectno, disk0_buffer, nsecs)) != 0) {
c010feb2:	a1 f0 50 15 c0       	mov    0xc01550f0,%eax
c010feb7:	ff 75 f0             	pushl  -0x10(%ebp)
c010feba:	50                   	push   %eax
c010febb:	ff 75 f4             	pushl  -0xc(%ebp)
c010febe:	6a 02                	push   $0x2
c010fec0:	e8 ae 16 ff ff       	call   c0101573 <ide_write_secs>
c010fec5:	83 c4 10             	add    $0x10,%esp
c010fec8:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010fecb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010fecf:	74 20                	je     c010fef1 <disk0_write_blks_nolock+0x57>
        panic("disk0: write blkno = %d (sectno = %d), nblks = %d (nsecs = %d): 0x%08x.\n",
c010fed1:	ff 75 ec             	pushl  -0x14(%ebp)
c010fed4:	ff 75 f0             	pushl  -0x10(%ebp)
c010fed7:	ff 75 0c             	pushl  0xc(%ebp)
c010feda:	ff 75 f4             	pushl  -0xc(%ebp)
c010fedd:	ff 75 08             	pushl  0x8(%ebp)
c010fee0:	68 bc 7a 11 c0       	push   $0xc0117abc
c010fee5:	6a 38                	push   $0x38
c010fee7:	68 a0 7a 11 c0       	push   $0xc0117aa0
c010feec:	e8 fc 05 ff ff       	call   c01004ed <__panic>
                blkno, sectno, nblks, nsecs, ret);
    }
}
c010fef1:	90                   	nop
c010fef2:	c9                   	leave  
c010fef3:	c3                   	ret    

c010fef4 <disk0_io>:

static int
disk0_io(struct device *dev, struct iobuf *iob, bool write) {
c010fef4:	55                   	push   %ebp
c010fef5:	89 e5                	mov    %esp,%ebp
c010fef7:	83 ec 28             	sub    $0x28,%esp
    off_t offset = iob->io_offset;
c010fefa:	8b 45 0c             	mov    0xc(%ebp),%eax
c010fefd:	8b 40 04             	mov    0x4(%eax),%eax
c010ff00:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    size_t resid = iob->io_resid;
c010ff03:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ff06:	8b 40 0c             	mov    0xc(%eax),%eax
c010ff09:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t blkno = offset / DISK0_BLKSIZE;
c010ff0c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ff0f:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
c010ff15:	85 c0                	test   %eax,%eax
c010ff17:	0f 48 c2             	cmovs  %edx,%eax
c010ff1a:	c1 f8 0c             	sar    $0xc,%eax
c010ff1d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    uint32_t nblks = resid / DISK0_BLKSIZE;
c010ff20:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ff23:	c1 e8 0c             	shr    $0xc,%eax
c010ff26:	89 45 ec             	mov    %eax,-0x14(%ebp)

    /* don't allow I/O that isn't block-aligned */
    if ((offset % DISK0_BLKSIZE) != 0 || (resid % DISK0_BLKSIZE) != 0) {
c010ff29:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ff2c:	25 ff 0f 00 00       	and    $0xfff,%eax
c010ff31:	85 c0                	test   %eax,%eax
c010ff33:	75 0c                	jne    c010ff41 <disk0_io+0x4d>
c010ff35:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ff38:	25 ff 0f 00 00       	and    $0xfff,%eax
c010ff3d:	85 c0                	test   %eax,%eax
c010ff3f:	74 0a                	je     c010ff4b <disk0_io+0x57>
        return -E_INVAL;
c010ff41:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010ff46:	e9 3b 01 00 00       	jmp    c0110086 <disk0_io+0x192>
    }

    /* don't allow I/O past the end of disk0 */
    if (blkno + nblks > dev->d_blocks) {
c010ff4b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010ff4e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ff51:	01 c2                	add    %eax,%edx
c010ff53:	8b 45 08             	mov    0x8(%ebp),%eax
c010ff56:	8b 00                	mov    (%eax),%eax
c010ff58:	39 c2                	cmp    %eax,%edx
c010ff5a:	76 0a                	jbe    c010ff66 <disk0_io+0x72>
        return -E_INVAL;
c010ff5c:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010ff61:	e9 20 01 00 00       	jmp    c0110086 <disk0_io+0x192>
    }

    /* read/write nothing ? */
    if (nblks == 0) {
c010ff66:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010ff6a:	75 0a                	jne    c010ff76 <disk0_io+0x82>
        return 0;
c010ff6c:	b8 00 00 00 00       	mov    $0x0,%eax
c010ff71:	e9 10 01 00 00       	jmp    c0110086 <disk0_io+0x192>
    }

    lock_disk0();
c010ff76:	e8 7f fe ff ff       	call   c010fdfa <lock_disk0>
    while (resid != 0) {
c010ff7b:	e9 f2 00 00 00       	jmp    c0110072 <disk0_io+0x17e>
        size_t copied, alen = DISK0_BUFSIZE;
c010ff80:	c7 45 e8 00 40 00 00 	movl   $0x4000,-0x18(%ebp)
        if (write) {
c010ff87:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010ff8b:	74 6a                	je     c010fff7 <disk0_io+0x103>
            iobuf_move(iob, disk0_buffer, alen, 0, &copied);
c010ff8d:	a1 f0 50 15 c0       	mov    0xc01550f0,%eax
c010ff92:	83 ec 0c             	sub    $0xc,%esp
c010ff95:	8d 55 e0             	lea    -0x20(%ebp),%edx
c010ff98:	52                   	push   %edx
c010ff99:	6a 00                	push   $0x0
c010ff9b:	ff 75 e8             	pushl  -0x18(%ebp)
c010ff9e:	50                   	push   %eax
c010ff9f:	ff 75 0c             	pushl  0xc(%ebp)
c010ffa2:	e8 a3 b0 ff ff       	call   c010b04a <iobuf_move>
c010ffa7:	83 c4 20             	add    $0x20,%esp
            assert(copied != 0 && copied <= resid && copied % DISK0_BLKSIZE == 0);
c010ffaa:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010ffad:	85 c0                	test   %eax,%eax
c010ffaf:	74 14                	je     c010ffc5 <disk0_io+0xd1>
c010ffb1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010ffb4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010ffb7:	77 0c                	ja     c010ffc5 <disk0_io+0xd1>
c010ffb9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010ffbc:	25 ff 0f 00 00       	and    $0xfff,%eax
c010ffc1:	85 c0                	test   %eax,%eax
c010ffc3:	74 16                	je     c010ffdb <disk0_io+0xe7>
c010ffc5:	68 08 7b 11 c0       	push   $0xc0117b08
c010ffca:	68 46 7b 11 c0       	push   $0xc0117b46
c010ffcf:	6a 57                	push   $0x57
c010ffd1:	68 a0 7a 11 c0       	push   $0xc0117aa0
c010ffd6:	e8 12 05 ff ff       	call   c01004ed <__panic>
            nblks = copied / DISK0_BLKSIZE;
c010ffdb:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010ffde:	c1 e8 0c             	shr    $0xc,%eax
c010ffe1:	89 45 ec             	mov    %eax,-0x14(%ebp)
            disk0_write_blks_nolock(blkno, nblks);
c010ffe4:	83 ec 08             	sub    $0x8,%esp
c010ffe7:	ff 75 ec             	pushl  -0x14(%ebp)
c010ffea:	ff 75 f0             	pushl  -0x10(%ebp)
c010ffed:	e8 a8 fe ff ff       	call   c010fe9a <disk0_write_blks_nolock>
c010fff2:	83 c4 10             	add    $0x10,%esp
c010fff5:	eb 6f                	jmp    c0110066 <disk0_io+0x172>
        }
        else {
            if (alen > resid) {
c010fff7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fffa:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010fffd:	76 06                	jbe    c0110005 <disk0_io+0x111>
                alen = resid;
c010ffff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110002:	89 45 e8             	mov    %eax,-0x18(%ebp)
            }
            nblks = alen / DISK0_BLKSIZE;
c0110005:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110008:	c1 e8 0c             	shr    $0xc,%eax
c011000b:	89 45 ec             	mov    %eax,-0x14(%ebp)
            disk0_read_blks_nolock(blkno, nblks);
c011000e:	83 ec 08             	sub    $0x8,%esp
c0110011:	ff 75 ec             	pushl  -0x14(%ebp)
c0110014:	ff 75 f0             	pushl  -0x10(%ebp)
c0110017:	e8 24 fe ff ff       	call   c010fe40 <disk0_read_blks_nolock>
c011001c:	83 c4 10             	add    $0x10,%esp
            iobuf_move(iob, disk0_buffer, alen, 1, &copied);
c011001f:	a1 f0 50 15 c0       	mov    0xc01550f0,%eax
c0110024:	83 ec 0c             	sub    $0xc,%esp
c0110027:	8d 55 e0             	lea    -0x20(%ebp),%edx
c011002a:	52                   	push   %edx
c011002b:	6a 01                	push   $0x1
c011002d:	ff 75 e8             	pushl  -0x18(%ebp)
c0110030:	50                   	push   %eax
c0110031:	ff 75 0c             	pushl  0xc(%ebp)
c0110034:	e8 11 b0 ff ff       	call   c010b04a <iobuf_move>
c0110039:	83 c4 20             	add    $0x20,%esp
            assert(copied == alen && copied % DISK0_BLKSIZE == 0);
c011003c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011003f:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c0110042:	75 0c                	jne    c0110050 <disk0_io+0x15c>
c0110044:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110047:	25 ff 0f 00 00       	and    $0xfff,%eax
c011004c:	85 c0                	test   %eax,%eax
c011004e:	74 16                	je     c0110066 <disk0_io+0x172>
c0110050:	68 5c 7b 11 c0       	push   $0xc0117b5c
c0110055:	68 46 7b 11 c0       	push   $0xc0117b46
c011005a:	6a 62                	push   $0x62
c011005c:	68 a0 7a 11 c0       	push   $0xc0117aa0
c0110061:	e8 87 04 ff ff       	call   c01004ed <__panic>
        }
        resid -= copied, blkno += nblks;
c0110066:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110069:	29 45 f4             	sub    %eax,-0xc(%ebp)
c011006c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011006f:	01 45 f0             	add    %eax,-0x10(%ebp)
    if (nblks == 0) {
        return 0;
    }

    lock_disk0();
    while (resid != 0) {
c0110072:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110076:	0f 85 04 ff ff ff    	jne    c010ff80 <disk0_io+0x8c>
            iobuf_move(iob, disk0_buffer, alen, 1, &copied);
            assert(copied == alen && copied % DISK0_BLKSIZE == 0);
        }
        resid -= copied, blkno += nblks;
    }
    unlock_disk0();
c011007c:	e8 92 fd ff ff       	call   c010fe13 <unlock_disk0>
    return 0;
c0110081:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110086:	c9                   	leave  
c0110087:	c3                   	ret    

c0110088 <disk0_ioctl>:

static int
disk0_ioctl(struct device *dev, int op, void *data) {
c0110088:	55                   	push   %ebp
c0110089:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c011008b:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c0110090:	5d                   	pop    %ebp
c0110091:	c3                   	ret    

c0110092 <disk0_device_init>:

static void
disk0_device_init(struct device *dev) {
c0110092:	55                   	push   %ebp
c0110093:	89 e5                	mov    %esp,%ebp
c0110095:	83 ec 08             	sub    $0x8,%esp
    static_assert(DISK0_BLKSIZE % SECTSIZE == 0);
    if (!ide_device_valid(DISK0_DEV_NO)) {
c0110098:	83 ec 0c             	sub    $0xc,%esp
c011009b:	6a 02                	push   $0x2
c011009d:	e8 27 12 ff ff       	call   c01012c9 <ide_device_valid>
c01100a2:	83 c4 10             	add    $0x10,%esp
c01100a5:	85 c0                	test   %eax,%eax
c01100a7:	75 14                	jne    c01100bd <disk0_device_init+0x2b>
        panic("disk0 device isn't available.\n");
c01100a9:	83 ec 04             	sub    $0x4,%esp
c01100ac:	68 8c 7b 11 c0       	push   $0xc0117b8c
c01100b1:	6a 73                	push   $0x73
c01100b3:	68 a0 7a 11 c0       	push   $0xc0117aa0
c01100b8:	e8 30 04 ff ff       	call   c01004ed <__panic>
    }
    dev->d_blocks = ide_device_size(DISK0_DEV_NO) / DISK0_BLK_NSECT;
c01100bd:	83 ec 0c             	sub    $0xc,%esp
c01100c0:	6a 02                	push   $0x2
c01100c2:	e8 42 12 ff ff       	call   c0101309 <ide_device_size>
c01100c7:	83 c4 10             	add    $0x10,%esp
c01100ca:	c1 e8 03             	shr    $0x3,%eax
c01100cd:	89 c2                	mov    %eax,%edx
c01100cf:	8b 45 08             	mov    0x8(%ebp),%eax
c01100d2:	89 10                	mov    %edx,(%eax)
    dev->d_blocksize = DISK0_BLKSIZE;
c01100d4:	8b 45 08             	mov    0x8(%ebp),%eax
c01100d7:	c7 40 04 00 10 00 00 	movl   $0x1000,0x4(%eax)
    dev->d_open = disk0_open;
c01100de:	8b 45 08             	mov    0x8(%ebp),%eax
c01100e1:	c7 40 08 2c fe 10 c0 	movl   $0xc010fe2c,0x8(%eax)
    dev->d_close = disk0_close;
c01100e8:	8b 45 08             	mov    0x8(%ebp),%eax
c01100eb:	c7 40 0c 36 fe 10 c0 	movl   $0xc010fe36,0xc(%eax)
    dev->d_io = disk0_io;
c01100f2:	8b 45 08             	mov    0x8(%ebp),%eax
c01100f5:	c7 40 10 f4 fe 10 c0 	movl   $0xc010fef4,0x10(%eax)
    dev->d_ioctl = disk0_ioctl;
c01100fc:	8b 45 08             	mov    0x8(%ebp),%eax
c01100ff:	c7 40 14 88 00 11 c0 	movl   $0xc0110088,0x14(%eax)
    sem_init(&(disk0_sem), 1);
c0110106:	83 ec 08             	sub    $0x8,%esp
c0110109:	6a 01                	push   $0x1
c011010b:	68 f4 50 15 c0       	push   $0xc01550f4
c0110110:	e8 0f 95 ff ff       	call   c0109624 <sem_init>
c0110115:	83 c4 10             	add    $0x10,%esp

    static_assert(DISK0_BUFSIZE % DISK0_BLKSIZE == 0);
    if ((disk0_buffer = kmalloc(DISK0_BUFSIZE)) == NULL) {
c0110118:	83 ec 0c             	sub    $0xc,%esp
c011011b:	68 00 40 00 00       	push   $0x4000
c0110120:	e8 dd 51 ff ff       	call   c0105302 <kmalloc>
c0110125:	83 c4 10             	add    $0x10,%esp
c0110128:	a3 f0 50 15 c0       	mov    %eax,0xc01550f0
c011012d:	a1 f0 50 15 c0       	mov    0xc01550f0,%eax
c0110132:	85 c0                	test   %eax,%eax
c0110134:	75 14                	jne    c011014a <disk0_device_init+0xb8>
        panic("disk0 alloc buffer failed.\n");
c0110136:	83 ec 04             	sub    $0x4,%esp
c0110139:	68 ab 7b 11 c0       	push   $0xc0117bab
c011013e:	6a 7f                	push   $0x7f
c0110140:	68 a0 7a 11 c0       	push   $0xc0117aa0
c0110145:	e8 a3 03 ff ff       	call   c01004ed <__panic>
    }
}
c011014a:	90                   	nop
c011014b:	c9                   	leave  
c011014c:	c3                   	ret    

c011014d <dev_init_disk0>:

void
dev_init_disk0(void) {
c011014d:	55                   	push   %ebp
c011014e:	89 e5                	mov    %esp,%ebp
c0110150:	83 ec 18             	sub    $0x18,%esp
    struct inode *node;
    if ((node = dev_create_inode()) == NULL) {
c0110153:	e8 bd 05 00 00       	call   c0110715 <dev_create_inode>
c0110158:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011015b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011015f:	75 17                	jne    c0110178 <dev_init_disk0+0x2b>
        panic("disk0: dev_create_node.\n");
c0110161:	83 ec 04             	sub    $0x4,%esp
c0110164:	68 c7 7b 11 c0       	push   $0xc0117bc7
c0110169:	68 87 00 00 00       	push   $0x87
c011016e:	68 a0 7a 11 c0       	push   $0xc0117aa0
c0110173:	e8 75 03 ff ff       	call   c01004ed <__panic>
    }
    disk0_device_init(vop_info(node, device));
c0110178:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011017b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011017e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0110182:	74 0d                	je     c0110191 <dev_init_disk0+0x44>
c0110184:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110187:	8b 40 2c             	mov    0x2c(%eax),%eax
c011018a:	3d 34 12 00 00       	cmp    $0x1234,%eax
c011018f:	74 19                	je     c01101aa <dev_init_disk0+0x5d>
c0110191:	68 e0 7b 11 c0       	push   $0xc0117be0
c0110196:	68 46 7b 11 c0       	push   $0xc0117b46
c011019b:	68 89 00 00 00       	push   $0x89
c01101a0:	68 a0 7a 11 c0       	push   $0xc0117aa0
c01101a5:	e8 43 03 ff ff       	call   c01004ed <__panic>
c01101aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01101ad:	83 ec 0c             	sub    $0xc,%esp
c01101b0:	50                   	push   %eax
c01101b1:	e8 dc fe ff ff       	call   c0110092 <disk0_device_init>
c01101b6:	83 c4 10             	add    $0x10,%esp

    int ret;
    if ((ret = vfs_add_dev("disk0", node, 1)) != 0) {
c01101b9:	83 ec 04             	sub    $0x4,%esp
c01101bc:	6a 01                	push   $0x1
c01101be:	ff 75 f4             	pushl  -0xc(%ebp)
c01101c1:	68 13 7c 11 c0       	push   $0xc0117c13
c01101c6:	e8 4b e7 ff ff       	call   c010e916 <vfs_add_dev>
c01101cb:	83 c4 10             	add    $0x10,%esp
c01101ce:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01101d1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01101d5:	74 17                	je     c01101ee <dev_init_disk0+0xa1>
        panic("disk0: vfs_add_dev: %e.\n", ret);
c01101d7:	ff 75 ec             	pushl  -0x14(%ebp)
c01101da:	68 19 7c 11 c0       	push   $0xc0117c19
c01101df:	68 8d 00 00 00       	push   $0x8d
c01101e4:	68 a0 7a 11 c0       	push   $0xc0117aa0
c01101e9:	e8 ff 02 ff ff       	call   c01004ed <__panic>
    }
}
c01101ee:	90                   	nop
c01101ef:	c9                   	leave  
c01101f0:	c3                   	ret    

c01101f1 <stdout_open>:
#include <unistd.h>
#include <error.h>
#include <assert.h>

static int
stdout_open(struct device *dev, uint32_t open_flags) {
c01101f1:	55                   	push   %ebp
c01101f2:	89 e5                	mov    %esp,%ebp
    if (open_flags != O_WRONLY) {
c01101f4:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c01101f8:	74 07                	je     c0110201 <stdout_open+0x10>
        return -E_INVAL;
c01101fa:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c01101ff:	eb 05                	jmp    c0110206 <stdout_open+0x15>
    }
    return 0;
c0110201:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110206:	5d                   	pop    %ebp
c0110207:	c3                   	ret    

c0110208 <stdout_close>:

static int
stdout_close(struct device *dev) {
c0110208:	55                   	push   %ebp
c0110209:	89 e5                	mov    %esp,%ebp
    return 0;
c011020b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110210:	5d                   	pop    %ebp
c0110211:	c3                   	ret    

c0110212 <stdout_io>:

static int
stdout_io(struct device *dev, struct iobuf *iob, bool write) {
c0110212:	55                   	push   %ebp
c0110213:	89 e5                	mov    %esp,%ebp
c0110215:	83 ec 18             	sub    $0x18,%esp
    if (write) {
c0110218:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c011021c:	74 45                	je     c0110263 <stdout_io+0x51>
        char *data = iob->io_base;
c011021e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110221:	8b 00                	mov    (%eax),%eax
c0110223:	89 45 f4             	mov    %eax,-0xc(%ebp)
        for (; iob->io_resid != 0; iob->io_resid --) {
c0110226:	eb 2a                	jmp    c0110252 <stdout_io+0x40>
            cputchar(*data ++);
c0110228:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011022b:	8d 50 01             	lea    0x1(%eax),%edx
c011022e:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0110231:	0f b6 00             	movzbl (%eax),%eax
c0110234:	0f be c0             	movsbl %al,%eax
c0110237:	83 ec 0c             	sub    $0xc,%esp
c011023a:	50                   	push   %eax
c011023b:	e8 6d 01 ff ff       	call   c01003ad <cputchar>
c0110240:	83 c4 10             	add    $0x10,%esp

static int
stdout_io(struct device *dev, struct iobuf *iob, bool write) {
    if (write) {
        char *data = iob->io_base;
        for (; iob->io_resid != 0; iob->io_resid --) {
c0110243:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110246:	8b 40 0c             	mov    0xc(%eax),%eax
c0110249:	8d 50 ff             	lea    -0x1(%eax),%edx
c011024c:	8b 45 0c             	mov    0xc(%ebp),%eax
c011024f:	89 50 0c             	mov    %edx,0xc(%eax)
c0110252:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110255:	8b 40 0c             	mov    0xc(%eax),%eax
c0110258:	85 c0                	test   %eax,%eax
c011025a:	75 cc                	jne    c0110228 <stdout_io+0x16>
            cputchar(*data ++);
        }
        return 0;
c011025c:	b8 00 00 00 00       	mov    $0x0,%eax
c0110261:	eb 05                	jmp    c0110268 <stdout_io+0x56>
    }
    return -E_INVAL;
c0110263:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c0110268:	c9                   	leave  
c0110269:	c3                   	ret    

c011026a <stdout_ioctl>:

static int
stdout_ioctl(struct device *dev, int op, void *data) {
c011026a:	55                   	push   %ebp
c011026b:	89 e5                	mov    %esp,%ebp
    return -E_INVAL;
c011026d:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c0110272:	5d                   	pop    %ebp
c0110273:	c3                   	ret    

c0110274 <stdout_device_init>:

static void
stdout_device_init(struct device *dev) {
c0110274:	55                   	push   %ebp
c0110275:	89 e5                	mov    %esp,%ebp
    dev->d_blocks = 0;
c0110277:	8b 45 08             	mov    0x8(%ebp),%eax
c011027a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    dev->d_blocksize = 1;
c0110280:	8b 45 08             	mov    0x8(%ebp),%eax
c0110283:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
    dev->d_open = stdout_open;
c011028a:	8b 45 08             	mov    0x8(%ebp),%eax
c011028d:	c7 40 08 f1 01 11 c0 	movl   $0xc01101f1,0x8(%eax)
    dev->d_close = stdout_close;
c0110294:	8b 45 08             	mov    0x8(%ebp),%eax
c0110297:	c7 40 0c 08 02 11 c0 	movl   $0xc0110208,0xc(%eax)
    dev->d_io = stdout_io;
c011029e:	8b 45 08             	mov    0x8(%ebp),%eax
c01102a1:	c7 40 10 12 02 11 c0 	movl   $0xc0110212,0x10(%eax)
    dev->d_ioctl = stdout_ioctl;
c01102a8:	8b 45 08             	mov    0x8(%ebp),%eax
c01102ab:	c7 40 14 6a 02 11 c0 	movl   $0xc011026a,0x14(%eax)
}
c01102b2:	90                   	nop
c01102b3:	5d                   	pop    %ebp
c01102b4:	c3                   	ret    

c01102b5 <dev_init_stdout>:

void
dev_init_stdout(void) {
c01102b5:	55                   	push   %ebp
c01102b6:	89 e5                	mov    %esp,%ebp
c01102b8:	83 ec 18             	sub    $0x18,%esp
    struct inode *node;
    if ((node = dev_create_inode()) == NULL) {
c01102bb:	e8 55 04 00 00       	call   c0110715 <dev_create_inode>
c01102c0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01102c3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01102c7:	75 14                	jne    c01102dd <dev_init_stdout+0x28>
        panic("stdout: dev_create_node.\n");
c01102c9:	83 ec 04             	sub    $0x4,%esp
c01102cc:	68 34 7c 11 c0       	push   $0xc0117c34
c01102d1:	6a 37                	push   $0x37
c01102d3:	68 4e 7c 11 c0       	push   $0xc0117c4e
c01102d8:	e8 10 02 ff ff       	call   c01004ed <__panic>
    }
    stdout_device_init(vop_info(node, device));
c01102dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01102e0:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01102e3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01102e7:	74 0d                	je     c01102f6 <dev_init_stdout+0x41>
c01102e9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01102ec:	8b 40 2c             	mov    0x2c(%eax),%eax
c01102ef:	3d 34 12 00 00       	cmp    $0x1234,%eax
c01102f4:	74 16                	je     c011030c <dev_init_stdout+0x57>
c01102f6:	68 68 7c 11 c0       	push   $0xc0117c68
c01102fb:	68 9b 7c 11 c0       	push   $0xc0117c9b
c0110300:	6a 39                	push   $0x39
c0110302:	68 4e 7c 11 c0       	push   $0xc0117c4e
c0110307:	e8 e1 01 ff ff       	call   c01004ed <__panic>
c011030c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011030f:	83 ec 0c             	sub    $0xc,%esp
c0110312:	50                   	push   %eax
c0110313:	e8 5c ff ff ff       	call   c0110274 <stdout_device_init>
c0110318:	83 c4 10             	add    $0x10,%esp

    int ret;
    if ((ret = vfs_add_dev("stdout", node, 0)) != 0) {
c011031b:	83 ec 04             	sub    $0x4,%esp
c011031e:	6a 00                	push   $0x0
c0110320:	ff 75 f4             	pushl  -0xc(%ebp)
c0110323:	68 b0 7c 11 c0       	push   $0xc0117cb0
c0110328:	e8 e9 e5 ff ff       	call   c010e916 <vfs_add_dev>
c011032d:	83 c4 10             	add    $0x10,%esp
c0110330:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0110333:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0110337:	74 14                	je     c011034d <dev_init_stdout+0x98>
        panic("stdout: vfs_add_dev: %e.\n", ret);
c0110339:	ff 75 ec             	pushl  -0x14(%ebp)
c011033c:	68 b7 7c 11 c0       	push   $0xc0117cb7
c0110341:	6a 3d                	push   $0x3d
c0110343:	68 4e 7c 11 c0       	push   $0xc0117c4e
c0110348:	e8 a0 01 ff ff       	call   c01004ed <__panic>
    }
}
c011034d:	90                   	nop
c011034e:	c9                   	leave  
c011034f:	c3                   	ret    

c0110350 <dev_open>:

/*
 * dev_open - Called for each open().
 */
static int
dev_open(struct inode *node, uint32_t open_flags) {
c0110350:	55                   	push   %ebp
c0110351:	89 e5                	mov    %esp,%ebp
c0110353:	83 ec 18             	sub    $0x18,%esp
    if (open_flags & (O_CREAT | O_TRUNC | O_EXCL | O_APPEND)) {
c0110356:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110359:	83 e0 3c             	and    $0x3c,%eax
c011035c:	85 c0                	test   %eax,%eax
c011035e:	74 07                	je     c0110367 <dev_open+0x17>
        return -E_INVAL;
c0110360:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0110365:	eb 49                	jmp    c01103b0 <dev_open+0x60>
    }
    struct device *dev = vop_info(node, device);
c0110367:	8b 45 08             	mov    0x8(%ebp),%eax
c011036a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011036d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110371:	74 0d                	je     c0110380 <dev_open+0x30>
c0110373:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110376:	8b 40 2c             	mov    0x2c(%eax),%eax
c0110379:	3d 34 12 00 00       	cmp    $0x1234,%eax
c011037e:	74 16                	je     c0110396 <dev_open+0x46>
c0110380:	68 e0 7c 11 c0       	push   $0xc0117ce0
c0110385:	68 13 7d 11 c0       	push   $0xc0117d13
c011038a:	6a 11                	push   $0x11
c011038c:	68 28 7d 11 c0       	push   $0xc0117d28
c0110391:	e8 57 01 ff ff       	call   c01004ed <__panic>
c0110396:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110399:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return dop_open(dev, open_flags);
c011039c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011039f:	8b 40 08             	mov    0x8(%eax),%eax
c01103a2:	83 ec 08             	sub    $0x8,%esp
c01103a5:	ff 75 0c             	pushl  0xc(%ebp)
c01103a8:	ff 75 f0             	pushl  -0x10(%ebp)
c01103ab:	ff d0                	call   *%eax
c01103ad:	83 c4 10             	add    $0x10,%esp
}
c01103b0:	c9                   	leave  
c01103b1:	c3                   	ret    

c01103b2 <dev_close>:

/*
 * dev_close - Called on the last close(). Just pass through.
 */
static int
dev_close(struct inode *node) {
c01103b2:	55                   	push   %ebp
c01103b3:	89 e5                	mov    %esp,%ebp
c01103b5:	83 ec 18             	sub    $0x18,%esp
    struct device *dev = vop_info(node, device);
c01103b8:	8b 45 08             	mov    0x8(%ebp),%eax
c01103bb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01103be:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01103c2:	74 0d                	je     c01103d1 <dev_close+0x1f>
c01103c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01103c7:	8b 40 2c             	mov    0x2c(%eax),%eax
c01103ca:	3d 34 12 00 00       	cmp    $0x1234,%eax
c01103cf:	74 16                	je     c01103e7 <dev_close+0x35>
c01103d1:	68 e0 7c 11 c0       	push   $0xc0117ce0
c01103d6:	68 13 7d 11 c0       	push   $0xc0117d13
c01103db:	6a 1a                	push   $0x1a
c01103dd:	68 28 7d 11 c0       	push   $0xc0117d28
c01103e2:	e8 06 01 ff ff       	call   c01004ed <__panic>
c01103e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01103ea:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return dop_close(dev);
c01103ed:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01103f0:	8b 40 0c             	mov    0xc(%eax),%eax
c01103f3:	83 ec 0c             	sub    $0xc,%esp
c01103f6:	ff 75 f0             	pushl  -0x10(%ebp)
c01103f9:	ff d0                	call   *%eax
c01103fb:	83 c4 10             	add    $0x10,%esp
}
c01103fe:	c9                   	leave  
c01103ff:	c3                   	ret    

c0110400 <dev_read>:

/*
 * dev_read -Called for read. Hand off to iobuf.
 */
static int
dev_read(struct inode *node, struct iobuf *iob) {
c0110400:	55                   	push   %ebp
c0110401:	89 e5                	mov    %esp,%ebp
c0110403:	83 ec 18             	sub    $0x18,%esp
    struct device *dev = vop_info(node, device);
c0110406:	8b 45 08             	mov    0x8(%ebp),%eax
c0110409:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011040c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110410:	74 0d                	je     c011041f <dev_read+0x1f>
c0110412:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110415:	8b 40 2c             	mov    0x2c(%eax),%eax
c0110418:	3d 34 12 00 00       	cmp    $0x1234,%eax
c011041d:	74 16                	je     c0110435 <dev_read+0x35>
c011041f:	68 e0 7c 11 c0       	push   $0xc0117ce0
c0110424:	68 13 7d 11 c0       	push   $0xc0117d13
c0110429:	6a 23                	push   $0x23
c011042b:	68 28 7d 11 c0       	push   $0xc0117d28
c0110430:	e8 b8 00 ff ff       	call   c01004ed <__panic>
c0110435:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110438:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return dop_io(dev, iob, 0);
c011043b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011043e:	8b 40 10             	mov    0x10(%eax),%eax
c0110441:	83 ec 04             	sub    $0x4,%esp
c0110444:	6a 00                	push   $0x0
c0110446:	ff 75 0c             	pushl  0xc(%ebp)
c0110449:	ff 75 f0             	pushl  -0x10(%ebp)
c011044c:	ff d0                	call   *%eax
c011044e:	83 c4 10             	add    $0x10,%esp
}
c0110451:	c9                   	leave  
c0110452:	c3                   	ret    

c0110453 <dev_write>:

/*
 * dev_write -Called for write. Hand off to iobuf.
 */
static int
dev_write(struct inode *node, struct iobuf *iob) {
c0110453:	55                   	push   %ebp
c0110454:	89 e5                	mov    %esp,%ebp
c0110456:	83 ec 18             	sub    $0x18,%esp
    struct device *dev = vop_info(node, device);
c0110459:	8b 45 08             	mov    0x8(%ebp),%eax
c011045c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011045f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110463:	74 0d                	je     c0110472 <dev_write+0x1f>
c0110465:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110468:	8b 40 2c             	mov    0x2c(%eax),%eax
c011046b:	3d 34 12 00 00       	cmp    $0x1234,%eax
c0110470:	74 16                	je     c0110488 <dev_write+0x35>
c0110472:	68 e0 7c 11 c0       	push   $0xc0117ce0
c0110477:	68 13 7d 11 c0       	push   $0xc0117d13
c011047c:	6a 2c                	push   $0x2c
c011047e:	68 28 7d 11 c0       	push   $0xc0117d28
c0110483:	e8 65 00 ff ff       	call   c01004ed <__panic>
c0110488:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011048b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return dop_io(dev, iob, 1);
c011048e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110491:	8b 40 10             	mov    0x10(%eax),%eax
c0110494:	83 ec 04             	sub    $0x4,%esp
c0110497:	6a 01                	push   $0x1
c0110499:	ff 75 0c             	pushl  0xc(%ebp)
c011049c:	ff 75 f0             	pushl  -0x10(%ebp)
c011049f:	ff d0                	call   *%eax
c01104a1:	83 c4 10             	add    $0x10,%esp
}
c01104a4:	c9                   	leave  
c01104a5:	c3                   	ret    

c01104a6 <dev_ioctl>:

/*
 * dev_ioctl - Called for ioctl(). Just pass through.
 */
static int
dev_ioctl(struct inode *node, int op, void *data) {
c01104a6:	55                   	push   %ebp
c01104a7:	89 e5                	mov    %esp,%ebp
c01104a9:	83 ec 18             	sub    $0x18,%esp
    struct device *dev = vop_info(node, device);
c01104ac:	8b 45 08             	mov    0x8(%ebp),%eax
c01104af:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01104b2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01104b6:	74 0d                	je     c01104c5 <dev_ioctl+0x1f>
c01104b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01104bb:	8b 40 2c             	mov    0x2c(%eax),%eax
c01104be:	3d 34 12 00 00       	cmp    $0x1234,%eax
c01104c3:	74 16                	je     c01104db <dev_ioctl+0x35>
c01104c5:	68 e0 7c 11 c0       	push   $0xc0117ce0
c01104ca:	68 13 7d 11 c0       	push   $0xc0117d13
c01104cf:	6a 35                	push   $0x35
c01104d1:	68 28 7d 11 c0       	push   $0xc0117d28
c01104d6:	e8 12 00 ff ff       	call   c01004ed <__panic>
c01104db:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01104de:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return dop_ioctl(dev, op, data);
c01104e1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01104e4:	8b 40 14             	mov    0x14(%eax),%eax
c01104e7:	83 ec 04             	sub    $0x4,%esp
c01104ea:	ff 75 10             	pushl  0x10(%ebp)
c01104ed:	ff 75 0c             	pushl  0xc(%ebp)
c01104f0:	ff 75 f0             	pushl  -0x10(%ebp)
c01104f3:	ff d0                	call   *%eax
c01104f5:	83 c4 10             	add    $0x10,%esp
}
c01104f8:	c9                   	leave  
c01104f9:	c3                   	ret    

c01104fa <dev_fstat>:
 * dev_fstat - Called for stat().
 *             Set the type and the size (block devices only).
 *             The link count for a device is always 1.
 */
static int
dev_fstat(struct inode *node, struct stat *stat) {
c01104fa:	55                   	push   %ebp
c01104fb:	89 e5                	mov    %esp,%ebp
c01104fd:	83 ec 18             	sub    $0x18,%esp
    int ret;
    memset(stat, 0, sizeof(struct stat));
c0110500:	83 ec 04             	sub    $0x4,%esp
c0110503:	6a 10                	push   $0x10
c0110505:	6a 00                	push   $0x0
c0110507:	ff 75 0c             	pushl  0xc(%ebp)
c011050a:	e8 53 35 00 00       	call   c0113a62 <memset>
c011050f:	83 c4 10             	add    $0x10,%esp
    if ((ret = vop_gettype(node, &(stat->st_mode))) != 0) {
c0110512:	8b 45 08             	mov    0x8(%ebp),%eax
c0110515:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110518:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011051c:	74 17                	je     c0110535 <dev_fstat+0x3b>
c011051e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110521:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110524:	85 c0                	test   %eax,%eax
c0110526:	74 0d                	je     c0110535 <dev_fstat+0x3b>
c0110528:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011052b:	8b 40 3c             	mov    0x3c(%eax),%eax
c011052e:	8b 40 28             	mov    0x28(%eax),%eax
c0110531:	85 c0                	test   %eax,%eax
c0110533:	75 16                	jne    c011054b <dev_fstat+0x51>
c0110535:	68 3c 7d 11 c0       	push   $0xc0117d3c
c011053a:	68 13 7d 11 c0       	push   $0xc0117d13
c011053f:	6a 42                	push   $0x42
c0110541:	68 28 7d 11 c0       	push   $0xc0117d28
c0110546:	e8 a2 ff fe ff       	call   c01004ed <__panic>
c011054b:	83 ec 08             	sub    $0x8,%esp
c011054e:	68 8c 7d 11 c0       	push   $0xc0117d8c
c0110553:	ff 75 f4             	pushl  -0xc(%ebp)
c0110556:	e8 d2 ef ff ff       	call   c010f52d <inode_check>
c011055b:	83 c4 10             	add    $0x10,%esp
c011055e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110561:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110564:	8b 40 28             	mov    0x28(%eax),%eax
c0110567:	8b 55 0c             	mov    0xc(%ebp),%edx
c011056a:	83 ec 08             	sub    $0x8,%esp
c011056d:	52                   	push   %edx
c011056e:	ff 75 08             	pushl  0x8(%ebp)
c0110571:	ff d0                	call   *%eax
c0110573:	83 c4 10             	add    $0x10,%esp
c0110576:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0110579:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011057d:	74 05                	je     c0110584 <dev_fstat+0x8a>
        return ret;
c011057f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110582:	eb 64                	jmp    c01105e8 <dev_fstat+0xee>
    }
    struct device *dev = vop_info(node, device);
c0110584:	8b 45 08             	mov    0x8(%ebp),%eax
c0110587:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011058a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011058e:	74 0d                	je     c011059d <dev_fstat+0xa3>
c0110590:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110593:	8b 40 2c             	mov    0x2c(%eax),%eax
c0110596:	3d 34 12 00 00       	cmp    $0x1234,%eax
c011059b:	74 16                	je     c01105b3 <dev_fstat+0xb9>
c011059d:	68 e0 7c 11 c0       	push   $0xc0117ce0
c01105a2:	68 13 7d 11 c0       	push   $0xc0117d13
c01105a7:	6a 45                	push   $0x45
c01105a9:	68 28 7d 11 c0       	push   $0xc0117d28
c01105ae:	e8 3a ff fe ff       	call   c01004ed <__panic>
c01105b3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01105b6:	89 45 e8             	mov    %eax,-0x18(%ebp)
    stat->st_nlinks = 1;
c01105b9:	8b 45 0c             	mov    0xc(%ebp),%eax
c01105bc:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
    stat->st_blocks = dev->d_blocks;
c01105c3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01105c6:	8b 10                	mov    (%eax),%edx
c01105c8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01105cb:	89 50 08             	mov    %edx,0x8(%eax)
    stat->st_size = stat->st_blocks * dev->d_blocksize;
c01105ce:	8b 45 0c             	mov    0xc(%ebp),%eax
c01105d1:	8b 50 08             	mov    0x8(%eax),%edx
c01105d4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01105d7:	8b 40 04             	mov    0x4(%eax),%eax
c01105da:	0f af d0             	imul   %eax,%edx
c01105dd:	8b 45 0c             	mov    0xc(%ebp),%eax
c01105e0:	89 50 0c             	mov    %edx,0xc(%eax)
    return 0;
c01105e3:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01105e8:	c9                   	leave  
c01105e9:	c3                   	ret    

c01105ea <dev_gettype>:
 * dev_gettype - Return the type. A device is a "block device" if it has a known
 *               length. A device that generates data in a stream is a "character
 *               device".
 */
static int
dev_gettype(struct inode *node, uint32_t *type_store) {
c01105ea:	55                   	push   %ebp
c01105eb:	89 e5                	mov    %esp,%ebp
c01105ed:	83 ec 18             	sub    $0x18,%esp
    struct device *dev = vop_info(node, device);
c01105f0:	8b 45 08             	mov    0x8(%ebp),%eax
c01105f3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01105f6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01105fa:	74 0d                	je     c0110609 <dev_gettype+0x1f>
c01105fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01105ff:	8b 40 2c             	mov    0x2c(%eax),%eax
c0110602:	3d 34 12 00 00       	cmp    $0x1234,%eax
c0110607:	74 16                	je     c011061f <dev_gettype+0x35>
c0110609:	68 e0 7c 11 c0       	push   $0xc0117ce0
c011060e:	68 13 7d 11 c0       	push   $0xc0117d13
c0110613:	6a 53                	push   $0x53
c0110615:	68 28 7d 11 c0       	push   $0xc0117d28
c011061a:	e8 ce fe fe ff       	call   c01004ed <__panic>
c011061f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110622:	89 45 f0             	mov    %eax,-0x10(%ebp)
    *type_store = (dev->d_blocks > 0) ? S_IFBLK : S_IFCHR;
c0110625:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110628:	8b 00                	mov    (%eax),%eax
c011062a:	85 c0                	test   %eax,%eax
c011062c:	74 07                	je     c0110635 <dev_gettype+0x4b>
c011062e:	ba 00 50 00 00       	mov    $0x5000,%edx
c0110633:	eb 05                	jmp    c011063a <dev_gettype+0x50>
c0110635:	ba 00 40 00 00       	mov    $0x4000,%edx
c011063a:	8b 45 0c             	mov    0xc(%ebp),%eax
c011063d:	89 10                	mov    %edx,(%eax)
    return 0;
c011063f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110644:	c9                   	leave  
c0110645:	c3                   	ret    

c0110646 <dev_tryseek>:
 * dev_tryseek - Attempt a seek.
 *               For block devices, require block alignment.
 *               For character devices, prohibit seeking entirely.
 */
static int
dev_tryseek(struct inode *node, off_t pos) {
c0110646:	55                   	push   %ebp
c0110647:	89 e5                	mov    %esp,%ebp
c0110649:	83 ec 18             	sub    $0x18,%esp
    struct device *dev = vop_info(node, device);
c011064c:	8b 45 08             	mov    0x8(%ebp),%eax
c011064f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110652:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110656:	74 0d                	je     c0110665 <dev_tryseek+0x1f>
c0110658:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011065b:	8b 40 2c             	mov    0x2c(%eax),%eax
c011065e:	3d 34 12 00 00       	cmp    $0x1234,%eax
c0110663:	74 16                	je     c011067b <dev_tryseek+0x35>
c0110665:	68 e0 7c 11 c0       	push   $0xc0117ce0
c011066a:	68 13 7d 11 c0       	push   $0xc0117d13
c011066f:	6a 5f                	push   $0x5f
c0110671:	68 28 7d 11 c0       	push   $0xc0117d28
c0110676:	e8 72 fe fe ff       	call   c01004ed <__panic>
c011067b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011067e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (dev->d_blocks > 0) {
c0110681:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110684:	8b 00                	mov    (%eax),%eax
c0110686:	85 c0                	test   %eax,%eax
c0110688:	74 38                	je     c01106c2 <dev_tryseek+0x7c>
        if ((pos % dev->d_blocksize) == 0) {
c011068a:	8b 45 0c             	mov    0xc(%ebp),%eax
c011068d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0110690:	8b 4a 04             	mov    0x4(%edx),%ecx
c0110693:	ba 00 00 00 00       	mov    $0x0,%edx
c0110698:	f7 f1                	div    %ecx
c011069a:	89 d0                	mov    %edx,%eax
c011069c:	85 c0                	test   %eax,%eax
c011069e:	75 22                	jne    c01106c2 <dev_tryseek+0x7c>
            if (pos >= 0 && pos < dev->d_blocks * dev->d_blocksize) {
c01106a0:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01106a4:	78 1c                	js     c01106c2 <dev_tryseek+0x7c>
c01106a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01106a9:	8b 10                	mov    (%eax),%edx
c01106ab:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01106ae:	8b 40 04             	mov    0x4(%eax),%eax
c01106b1:	0f af d0             	imul   %eax,%edx
c01106b4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01106b7:	39 c2                	cmp    %eax,%edx
c01106b9:	76 07                	jbe    c01106c2 <dev_tryseek+0x7c>
                return 0;
c01106bb:	b8 00 00 00 00       	mov    $0x0,%eax
c01106c0:	eb 05                	jmp    c01106c7 <dev_tryseek+0x81>
            }
        }
    }
    return -E_INVAL;
c01106c2:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c01106c7:	c9                   	leave  
c01106c8:	c3                   	ret    

c01106c9 <dev_lookup>:
 * mode.
 *
 * However, we have no support for this in the base system.
 */
static int
dev_lookup(struct inode *node, char *path, struct inode **node_store) {
c01106c9:	55                   	push   %ebp
c01106ca:	89 e5                	mov    %esp,%ebp
c01106cc:	83 ec 08             	sub    $0x8,%esp
    if (*path != '\0') {
c01106cf:	8b 45 0c             	mov    0xc(%ebp),%eax
c01106d2:	0f b6 00             	movzbl (%eax),%eax
c01106d5:	84 c0                	test   %al,%al
c01106d7:	74 07                	je     c01106e0 <dev_lookup+0x17>
        return -E_NOENT;
c01106d9:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
c01106de:	eb 1b                	jmp    c01106fb <dev_lookup+0x32>
    }
    vop_ref_inc(node);
c01106e0:	83 ec 0c             	sub    $0xc,%esp
c01106e3:	ff 75 08             	pushl  0x8(%ebp)
c01106e6:	e8 70 ec ff ff       	call   c010f35b <inode_ref_inc>
c01106eb:	83 c4 10             	add    $0x10,%esp
    *node_store = node;
c01106ee:	8b 45 10             	mov    0x10(%ebp),%eax
c01106f1:	8b 55 08             	mov    0x8(%ebp),%edx
c01106f4:	89 10                	mov    %edx,(%eax)
    return 0;
c01106f6:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01106fb:	c9                   	leave  
c01106fc:	c3                   	ret    

c01106fd <dev_init>:
        dev_init_##x();                                 \
    } while (0)

/* dev_init - Initialization functions for builtin vfs-level devices. */
void
dev_init(void) {
c01106fd:	55                   	push   %ebp
c01106fe:	89 e5                	mov    %esp,%ebp
c0110700:	83 ec 08             	sub    $0x8,%esp
   // init_device(null);
    init_device(stdin);
c0110703:	e8 57 f6 ff ff       	call   c010fd5f <dev_init_stdin>
    init_device(stdout);
c0110708:	e8 a8 fb ff ff       	call   c01102b5 <dev_init_stdout>
    init_device(disk0);
c011070d:	e8 3b fa ff ff       	call   c011014d <dev_init_disk0>
}
c0110712:	90                   	nop
c0110713:	c9                   	leave  
c0110714:	c3                   	ret    

c0110715 <dev_create_inode>:
/* dev_create_inode - Create inode for a vfs-level device. */
struct inode *
dev_create_inode(void) {
c0110715:	55                   	push   %ebp
c0110716:	89 e5                	mov    %esp,%ebp
c0110718:	83 ec 18             	sub    $0x18,%esp
    struct inode *node;
    if ((node = alloc_inode(device)) != NULL) {
c011071b:	83 ec 0c             	sub    $0xc,%esp
c011071e:	68 34 12 00 00       	push   $0x1234
c0110723:	e8 68 eb ff ff       	call   c010f290 <__alloc_inode>
c0110728:	83 c4 10             	add    $0x10,%esp
c011072b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011072e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110732:	74 15                	je     c0110749 <dev_create_inode+0x34>
        vop_init(node, &dev_node_ops, NULL);
c0110734:	83 ec 04             	sub    $0x4,%esp
c0110737:	6a 00                	push   $0x0
c0110739:	68 a0 7d 11 c0       	push   $0xc0117da0
c011073e:	ff 75 f4             	pushl  -0xc(%ebp)
c0110741:	e8 74 eb ff ff       	call   c010f2ba <inode_init>
c0110746:	83 c4 10             	add    $0x10,%esp
    }
    return node;
c0110749:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c011074c:	c9                   	leave  
c011074d:	c3                   	ret    

c011074e <sfs_init>:
 *
 * CALL GRAPH:
 *   kern_init-->fs_init-->sfs_init
 */
void
sfs_init(void) {
c011074e:	55                   	push   %ebp
c011074f:	89 e5                	mov    %esp,%ebp
c0110751:	83 ec 18             	sub    $0x18,%esp
    int ret;
    if ((ret = sfs_mount("disk0")) != 0) {
c0110754:	83 ec 0c             	sub    $0xc,%esp
c0110757:	68 e0 7d 11 c0       	push   $0xc0117de0
c011075c:	e8 88 08 00 00       	call   c0110fe9 <sfs_mount>
c0110761:	83 c4 10             	add    $0x10,%esp
c0110764:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110767:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011076b:	74 14                	je     c0110781 <sfs_init+0x33>
        panic("failed: sfs: sfs_mount: %e.\n", ret);
c011076d:	ff 75 f4             	pushl  -0xc(%ebp)
c0110770:	68 e6 7d 11 c0       	push   $0xc0117de6
c0110775:	6a 10                	push   $0x10
c0110777:	68 03 7e 11 c0       	push   $0xc0117e03
c011077c:	e8 6c fd fe ff       	call   c01004ed <__panic>
    }
}
c0110781:	90                   	nop
c0110782:	c9                   	leave  
c0110783:	c3                   	ret    

c0110784 <lock_sfs_fs>:
 * lock_sfs_fs - lock the process of  SFS Filesystem Rd/Wr Disk Block
 *
 * called by: sfs_load_inode, sfs_sync, sfs_reclaim
 */
void
lock_sfs_fs(struct sfs_fs *sfs) {
c0110784:	55                   	push   %ebp
c0110785:	89 e5                	mov    %esp,%ebp
c0110787:	83 ec 08             	sub    $0x8,%esp
    down(&(sfs->fs_sem));
c011078a:	8b 45 08             	mov    0x8(%ebp),%eax
c011078d:	83 c0 3c             	add    $0x3c,%eax
c0110790:	83 ec 0c             	sub    $0xc,%esp
c0110793:	50                   	push   %eax
c0110794:	e8 14 90 ff ff       	call   c01097ad <down>
c0110799:	83 c4 10             	add    $0x10,%esp
}
c011079c:	90                   	nop
c011079d:	c9                   	leave  
c011079e:	c3                   	ret    

c011079f <lock_sfs_io>:
 * lock_sfs_io - lock the process of SFS File Rd/Wr Disk Block
 *
 * called by: sfs_rwblock, sfs_clear_block, sfs_sync_super
 */
void
lock_sfs_io(struct sfs_fs *sfs) {
c011079f:	55                   	push   %ebp
c01107a0:	89 e5                	mov    %esp,%ebp
c01107a2:	83 ec 08             	sub    $0x8,%esp
    down(&(sfs->io_sem));
c01107a5:	8b 45 08             	mov    0x8(%ebp),%eax
c01107a8:	83 c0 48             	add    $0x48,%eax
c01107ab:	83 ec 0c             	sub    $0xc,%esp
c01107ae:	50                   	push   %eax
c01107af:	e8 f9 8f ff ff       	call   c01097ad <down>
c01107b4:	83 c4 10             	add    $0x10,%esp
}
c01107b7:	90                   	nop
c01107b8:	c9                   	leave  
c01107b9:	c3                   	ret    

c01107ba <unlock_sfs_fs>:
 * unlock_sfs_fs - unlock the process of  SFS Filesystem Rd/Wr Disk Block
 *
 * called by: sfs_load_inode, sfs_sync, sfs_reclaim
 */
void
unlock_sfs_fs(struct sfs_fs *sfs) {
c01107ba:	55                   	push   %ebp
c01107bb:	89 e5                	mov    %esp,%ebp
c01107bd:	83 ec 08             	sub    $0x8,%esp
    up(&(sfs->fs_sem));
c01107c0:	8b 45 08             	mov    0x8(%ebp),%eax
c01107c3:	83 c0 3c             	add    $0x3c,%eax
c01107c6:	83 ec 0c             	sub    $0xc,%esp
c01107c9:	50                   	push   %eax
c01107ca:	e8 c2 8f ff ff       	call   c0109791 <up>
c01107cf:	83 c4 10             	add    $0x10,%esp
}
c01107d2:	90                   	nop
c01107d3:	c9                   	leave  
c01107d4:	c3                   	ret    

c01107d5 <unlock_sfs_io>:
 * unlock_sfs_io - unlock the process of sfs Rd/Wr Disk Block
 *
 * called by: sfs_rwblock sfs_clear_block sfs_sync_super
 */
void
unlock_sfs_io(struct sfs_fs *sfs) {
c01107d5:	55                   	push   %ebp
c01107d6:	89 e5                	mov    %esp,%ebp
c01107d8:	83 ec 08             	sub    $0x8,%esp
    up(&(sfs->io_sem));
c01107db:	8b 45 08             	mov    0x8(%ebp),%eax
c01107de:	83 c0 48             	add    $0x48,%eax
c01107e1:	83 ec 0c             	sub    $0xc,%esp
c01107e4:	50                   	push   %eax
c01107e5:	e8 a7 8f ff ff       	call   c0109791 <up>
c01107ea:	83 c4 10             	add    $0x10,%esp
}
c01107ed:	90                   	nop
c01107ee:	c9                   	leave  
c01107ef:	c3                   	ret    

c01107f0 <sfs_sync>:

/*
 * sfs_sync - sync sfs's superblock and freemap in memroy into disk
 */
static int
sfs_sync(struct fs *fs) {
c01107f0:	55                   	push   %ebp
c01107f1:	89 e5                	mov    %esp,%ebp
c01107f3:	83 ec 28             	sub    $0x28,%esp
    struct sfs_fs *sfs = fsop_info(fs, sfs);
c01107f6:	8b 45 08             	mov    0x8(%ebp),%eax
c01107f9:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01107fc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0110800:	74 0a                	je     c011080c <sfs_sync+0x1c>
c0110802:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110805:	8b 40 6c             	mov    0x6c(%eax),%eax
c0110808:	85 c0                	test   %eax,%eax
c011080a:	74 16                	je     c0110822 <sfs_sync+0x32>
c011080c:	68 18 7e 11 c0       	push   $0xc0117e18
c0110811:	68 41 7e 11 c0       	push   $0xc0117e41
c0110816:	6a 15                	push   $0x15
c0110818:	68 56 7e 11 c0       	push   $0xc0117e56
c011081d:	e8 cb fc fe ff       	call   c01004ed <__panic>
c0110822:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110825:	89 45 ec             	mov    %eax,-0x14(%ebp)
    lock_sfs_fs(sfs);
c0110828:	83 ec 0c             	sub    $0xc,%esp
c011082b:	ff 75 ec             	pushl  -0x14(%ebp)
c011082e:	e8 51 ff ff ff       	call   c0110784 <lock_sfs_fs>
c0110833:	83 c4 10             	add    $0x10,%esp
    {
        list_entry_t *list = &(sfs->inode_list), *le = list;
c0110836:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110839:	83 c0 60             	add    $0x60,%eax
c011083c:	89 45 e8             	mov    %eax,-0x18(%ebp)
c011083f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110842:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while ((le = list_next(le)) != list) {
c0110845:	eb 69                	jmp    c01108b0 <sfs_sync+0xc0>
            struct sfs_inode *sin = le2sin(le, inode_link);
c0110847:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011084a:	83 e8 1c             	sub    $0x1c,%eax
c011084d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            vop_fsync(info2node(sin, sfs_inode));
c0110850:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0110853:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0110856:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c011085a:	74 17                	je     c0110873 <sfs_sync+0x83>
c011085c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011085f:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110862:	85 c0                	test   %eax,%eax
c0110864:	74 0d                	je     c0110873 <sfs_sync+0x83>
c0110866:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110869:	8b 40 3c             	mov    0x3c(%eax),%eax
c011086c:	8b 40 18             	mov    0x18(%eax),%eax
c011086f:	85 c0                	test   %eax,%eax
c0110871:	75 16                	jne    c0110889 <sfs_sync+0x99>
c0110873:	68 6c 7e 11 c0       	push   $0xc0117e6c
c0110878:	68 41 7e 11 c0       	push   $0xc0117e41
c011087d:	6a 1b                	push   $0x1b
c011087f:	68 56 7e 11 c0       	push   $0xc0117e56
c0110884:	e8 64 fc fe ff       	call   c01004ed <__panic>
c0110889:	83 ec 08             	sub    $0x8,%esp
c011088c:	68 ba 7e 11 c0       	push   $0xc0117eba
c0110891:	ff 75 e0             	pushl  -0x20(%ebp)
c0110894:	e8 94 ec ff ff       	call   c010f52d <inode_check>
c0110899:	83 c4 10             	add    $0x10,%esp
c011089c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011089f:	8b 40 3c             	mov    0x3c(%eax),%eax
c01108a2:	8b 40 18             	mov    0x18(%eax),%eax
c01108a5:	83 ec 0c             	sub    $0xc,%esp
c01108a8:	ff 75 e4             	pushl  -0x1c(%ebp)
c01108ab:	ff d0                	call   *%eax
c01108ad:	83 c4 10             	add    $0x10,%esp
c01108b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01108b3:	89 45 d8             	mov    %eax,-0x28(%ebp)
c01108b6:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01108b9:	8b 40 04             	mov    0x4(%eax),%eax
sfs_sync(struct fs *fs) {
    struct sfs_fs *sfs = fsop_info(fs, sfs);
    lock_sfs_fs(sfs);
    {
        list_entry_t *list = &(sfs->inode_list), *le = list;
        while ((le = list_next(le)) != list) {
c01108bc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01108bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01108c2:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c01108c5:	75 80                	jne    c0110847 <sfs_sync+0x57>
            struct sfs_inode *sin = le2sin(le, inode_link);
            vop_fsync(info2node(sin, sfs_inode));
        }
    }
    unlock_sfs_fs(sfs);
c01108c7:	83 ec 0c             	sub    $0xc,%esp
c01108ca:	ff 75 ec             	pushl  -0x14(%ebp)
c01108cd:	e8 e8 fe ff ff       	call   c01107ba <unlock_sfs_fs>
c01108d2:	83 c4 10             	add    $0x10,%esp

    int ret;
    if (sfs->super_dirty) {
c01108d5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01108d8:	8b 40 34             	mov    0x34(%eax),%eax
c01108db:	85 c0                	test   %eax,%eax
c01108dd:	74 56                	je     c0110935 <sfs_sync+0x145>
        sfs->super_dirty = 0;
c01108df:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01108e2:	c7 40 34 00 00 00 00 	movl   $0x0,0x34(%eax)
        if ((ret = sfs_sync_super(sfs)) != 0) {
c01108e9:	83 ec 0c             	sub    $0xc,%esp
c01108ec:	ff 75 ec             	pushl  -0x14(%ebp)
c01108ef:	e8 d9 2c 00 00       	call   c01135cd <sfs_sync_super>
c01108f4:	83 c4 10             	add    $0x10,%esp
c01108f7:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01108fa:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c01108fe:	74 0f                	je     c011090f <sfs_sync+0x11f>
            sfs->super_dirty = 1;
c0110900:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110903:	c7 40 34 01 00 00 00 	movl   $0x1,0x34(%eax)
            return ret;
c011090a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011090d:	eb 2b                	jmp    c011093a <sfs_sync+0x14a>
        }
        if ((ret = sfs_sync_freemap(sfs)) != 0) {
c011090f:	83 ec 0c             	sub    $0xc,%esp
c0110912:	ff 75 ec             	pushl  -0x14(%ebp)
c0110915:	e8 29 2d 00 00       	call   c0113643 <sfs_sync_freemap>
c011091a:	83 c4 10             	add    $0x10,%esp
c011091d:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0110920:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0110924:	74 0f                	je     c0110935 <sfs_sync+0x145>
            sfs->super_dirty = 1;
c0110926:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110929:	c7 40 34 01 00 00 00 	movl   $0x1,0x34(%eax)
            return ret;
c0110930:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0110933:	eb 05                	jmp    c011093a <sfs_sync+0x14a>
        }
    }
    return 0;
c0110935:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011093a:	c9                   	leave  
c011093b:	c3                   	ret    

c011093c <sfs_get_root>:

/*
 * sfs_get_root - get the root directory inode  from disk (SFS_BLKN_ROOT,1)
 */
static struct inode *
sfs_get_root(struct fs *fs) {
c011093c:	55                   	push   %ebp
c011093d:	89 e5                	mov    %esp,%ebp
c011093f:	83 ec 18             	sub    $0x18,%esp
    struct inode *node;
    int ret;
    if ((ret = sfs_load_inode(fsop_info(fs, sfs), &node, SFS_BLKN_ROOT)) != 0) {
c0110942:	8b 45 08             	mov    0x8(%ebp),%eax
c0110945:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110948:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011094c:	74 0a                	je     c0110958 <sfs_get_root+0x1c>
c011094e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110951:	8b 40 6c             	mov    0x6c(%eax),%eax
c0110954:	85 c0                	test   %eax,%eax
c0110956:	74 16                	je     c011096e <sfs_get_root+0x32>
c0110958:	68 18 7e 11 c0       	push   $0xc0117e18
c011095d:	68 41 7e 11 c0       	push   $0xc0117e41
c0110962:	6a 36                	push   $0x36
c0110964:	68 56 7e 11 c0       	push   $0xc0117e56
c0110969:	e8 7f fb fe ff       	call   c01004ed <__panic>
c011096e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110971:	83 ec 04             	sub    $0x4,%esp
c0110974:	6a 01                	push   $0x1
c0110976:	8d 55 ec             	lea    -0x14(%ebp),%edx
c0110979:	52                   	push   %edx
c011097a:	50                   	push   %eax
c011097b:	e8 06 0b 00 00       	call   c0111486 <sfs_load_inode>
c0110980:	83 c4 10             	add    $0x10,%esp
c0110983:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0110986:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011098a:	74 14                	je     c01109a0 <sfs_get_root+0x64>
        panic("load sfs root failed: %e", ret);
c011098c:	ff 75 f0             	pushl  -0x10(%ebp)
c011098f:	68 c0 7e 11 c0       	push   $0xc0117ec0
c0110994:	6a 37                	push   $0x37
c0110996:	68 56 7e 11 c0       	push   $0xc0117e56
c011099b:	e8 4d fb fe ff       	call   c01004ed <__panic>
    }
    return node;
c01109a0:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
c01109a3:	c9                   	leave  
c01109a4:	c3                   	ret    

c01109a5 <sfs_unmount>:

/*
 * sfs_unmount - unmount sfs, and free the memorys contain sfs->freemap/sfs_buffer/hash_liskt and sfs itself.
 */
static int
sfs_unmount(struct fs *fs) {
c01109a5:	55                   	push   %ebp
c01109a6:	89 e5                	mov    %esp,%ebp
c01109a8:	83 ec 18             	sub    $0x18,%esp
    struct sfs_fs *sfs = fsop_info(fs, sfs);
c01109ab:	8b 45 08             	mov    0x8(%ebp),%eax
c01109ae:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01109b1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01109b5:	74 0a                	je     c01109c1 <sfs_unmount+0x1c>
c01109b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01109ba:	8b 40 6c             	mov    0x6c(%eax),%eax
c01109bd:	85 c0                	test   %eax,%eax
c01109bf:	74 16                	je     c01109d7 <sfs_unmount+0x32>
c01109c1:	68 18 7e 11 c0       	push   $0xc0117e18
c01109c6:	68 41 7e 11 c0       	push   $0xc0117e41
c01109cb:	6a 41                	push   $0x41
c01109cd:	68 56 7e 11 c0       	push   $0xc0117e56
c01109d2:	e8 16 fb fe ff       	call   c01004ed <__panic>
c01109d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01109da:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (!list_empty(&(sfs->inode_list))) {
c01109dd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01109e0:	83 c0 60             	add    $0x60,%eax
c01109e3:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c01109e6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01109e9:	8b 40 04             	mov    0x4(%eax),%eax
c01109ec:	39 45 ec             	cmp    %eax,-0x14(%ebp)
c01109ef:	0f 94 c0             	sete   %al
c01109f2:	0f b6 c0             	movzbl %al,%eax
c01109f5:	85 c0                	test   %eax,%eax
c01109f7:	75 07                	jne    c0110a00 <sfs_unmount+0x5b>
        return -E_BUSY;
c01109f9:	b8 f1 ff ff ff       	mov    $0xfffffff1,%eax
c01109fe:	eb 69                	jmp    c0110a69 <sfs_unmount+0xc4>
    }
    assert(!sfs->super_dirty);
c0110a00:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110a03:	8b 40 34             	mov    0x34(%eax),%eax
c0110a06:	85 c0                	test   %eax,%eax
c0110a08:	74 16                	je     c0110a20 <sfs_unmount+0x7b>
c0110a0a:	68 d9 7e 11 c0       	push   $0xc0117ed9
c0110a0f:	68 41 7e 11 c0       	push   $0xc0117e41
c0110a14:	6a 45                	push   $0x45
c0110a16:	68 56 7e 11 c0       	push   $0xc0117e56
c0110a1b:	e8 cd fa fe ff       	call   c01004ed <__panic>
    bitmap_destroy(sfs->freemap);
c0110a20:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110a23:	8b 40 30             	mov    0x30(%eax),%eax
c0110a26:	83 ec 0c             	sub    $0xc,%esp
c0110a29:	50                   	push   %eax
c0110a2a:	e8 dc 28 00 00       	call   c011330b <bitmap_destroy>
c0110a2f:	83 c4 10             	add    $0x10,%esp
    kfree(sfs->sfs_buffer);
c0110a32:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110a35:	8b 40 38             	mov    0x38(%eax),%eax
c0110a38:	83 ec 0c             	sub    $0xc,%esp
c0110a3b:	50                   	push   %eax
c0110a3c:	e8 d9 48 ff ff       	call   c010531a <kfree>
c0110a41:	83 c4 10             	add    $0x10,%esp
    kfree(sfs->hash_list);
c0110a44:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110a47:	8b 40 68             	mov    0x68(%eax),%eax
c0110a4a:	83 ec 0c             	sub    $0xc,%esp
c0110a4d:	50                   	push   %eax
c0110a4e:	e8 c7 48 ff ff       	call   c010531a <kfree>
c0110a53:	83 c4 10             	add    $0x10,%esp
    kfree(sfs);
c0110a56:	83 ec 0c             	sub    $0xc,%esp
c0110a59:	ff 75 f0             	pushl  -0x10(%ebp)
c0110a5c:	e8 b9 48 ff ff       	call   c010531a <kfree>
c0110a61:	83 c4 10             	add    $0x10,%esp
    return 0;
c0110a64:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110a69:	c9                   	leave  
c0110a6a:	c3                   	ret    

c0110a6b <sfs_cleanup>:
 * sfs_cleanup - when sfs failed, then should call this function to sync sfs by calling sfs_sync
 *
 * NOTICE: nouse now.
 */
static void
sfs_cleanup(struct fs *fs) {
c0110a6b:	55                   	push   %ebp
c0110a6c:	89 e5                	mov    %esp,%ebp
c0110a6e:	83 ec 28             	sub    $0x28,%esp
    struct sfs_fs *sfs = fsop_info(fs, sfs);
c0110a71:	8b 45 08             	mov    0x8(%ebp),%eax
c0110a74:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0110a77:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0110a7b:	74 0a                	je     c0110a87 <sfs_cleanup+0x1c>
c0110a7d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110a80:	8b 40 6c             	mov    0x6c(%eax),%eax
c0110a83:	85 c0                	test   %eax,%eax
c0110a85:	74 16                	je     c0110a9d <sfs_cleanup+0x32>
c0110a87:	68 18 7e 11 c0       	push   $0xc0117e18
c0110a8c:	68 41 7e 11 c0       	push   $0xc0117e41
c0110a91:	6a 54                	push   $0x54
c0110a93:	68 56 7e 11 c0       	push   $0xc0117e56
c0110a98:	e8 50 fa fe ff       	call   c01004ed <__panic>
c0110a9d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110aa0:	89 45 e8             	mov    %eax,-0x18(%ebp)
    uint32_t blocks = sfs->super.blocks, unused_blocks = sfs->super.unused_blocks;
c0110aa3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110aa6:	8b 40 04             	mov    0x4(%eax),%eax
c0110aa9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0110aac:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110aaf:	8b 40 08             	mov    0x8(%eax),%eax
c0110ab2:	89 45 e0             	mov    %eax,-0x20(%ebp)
    cprintf("sfs: cleanup: '%s' (%d/%d/%d)\n", sfs->super.info,
c0110ab5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0110ab8:	2b 45 e0             	sub    -0x20(%ebp),%eax
c0110abb:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0110abe:	83 c2 0c             	add    $0xc,%edx
c0110ac1:	83 ec 0c             	sub    $0xc,%esp
c0110ac4:	ff 75 e4             	pushl  -0x1c(%ebp)
c0110ac7:	ff 75 e0             	pushl  -0x20(%ebp)
c0110aca:	50                   	push   %eax
c0110acb:	52                   	push   %edx
c0110acc:	68 ec 7e 11 c0       	push   $0xc0117eec
c0110ad1:	e8 b1 f8 fe ff       	call   c0100387 <cprintf>
c0110ad6:	83 c4 20             	add    $0x20,%esp
            blocks - unused_blocks, unused_blocks, blocks);
    int i, ret;
    for (i = 0; i < 32; i ++) {
c0110ad9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0110ae0:	eb 1e                	jmp    c0110b00 <sfs_cleanup+0x95>
        if ((ret = fsop_sync(fs)) == 0) {
c0110ae2:	8b 45 08             	mov    0x8(%ebp),%eax
c0110ae5:	8b 40 70             	mov    0x70(%eax),%eax
c0110ae8:	83 ec 0c             	sub    $0xc,%esp
c0110aeb:	ff 75 08             	pushl  0x8(%ebp)
c0110aee:	ff d0                	call   *%eax
c0110af0:	83 c4 10             	add    $0x10,%esp
c0110af3:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0110af6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0110afa:	74 0c                	je     c0110b08 <sfs_cleanup+0x9d>
    struct sfs_fs *sfs = fsop_info(fs, sfs);
    uint32_t blocks = sfs->super.blocks, unused_blocks = sfs->super.unused_blocks;
    cprintf("sfs: cleanup: '%s' (%d/%d/%d)\n", sfs->super.info,
            blocks - unused_blocks, unused_blocks, blocks);
    int i, ret;
    for (i = 0; i < 32; i ++) {
c0110afc:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0110b00:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
c0110b04:	7e dc                	jle    c0110ae2 <sfs_cleanup+0x77>
c0110b06:	eb 01                	jmp    c0110b09 <sfs_cleanup+0x9e>
        if ((ret = fsop_sync(fs)) == 0) {
            break;
c0110b08:	90                   	nop
        }
    }
    if (ret != 0) {
c0110b09:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0110b0d:	74 21                	je     c0110b30 <sfs_cleanup+0xc5>
        warn("sfs: sync error: '%s': %e.\n", sfs->super.info, ret);
c0110b0f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110b12:	83 c0 0c             	add    $0xc,%eax
c0110b15:	83 ec 0c             	sub    $0xc,%esp
c0110b18:	ff 75 f0             	pushl  -0x10(%ebp)
c0110b1b:	50                   	push   %eax
c0110b1c:	68 0b 7f 11 c0       	push   $0xc0117f0b
c0110b21:	6a 5f                	push   $0x5f
c0110b23:	68 56 7e 11 c0       	push   $0xc0117e56
c0110b28:	e8 43 fa fe ff       	call   c0100570 <__warn>
c0110b2d:	83 c4 20             	add    $0x20,%esp
    }
}
c0110b30:	90                   	nop
c0110b31:	c9                   	leave  
c0110b32:	c3                   	ret    

c0110b33 <sfs_init_read>:
 *
 *      (1) init iobuf
 *      (2) read dev into iobuf
 */
static int
sfs_init_read(struct device *dev, uint32_t blkno, void *blk_buffer) {
c0110b33:	55                   	push   %ebp
c0110b34:	89 e5                	mov    %esp,%ebp
c0110b36:	83 ec 28             	sub    $0x28,%esp
    struct iobuf __iob, *iob = iobuf_init(&__iob, blk_buffer, SFS_BLKSIZE, blkno * SFS_BLKSIZE);
c0110b39:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110b3c:	c1 e0 0c             	shl    $0xc,%eax
c0110b3f:	50                   	push   %eax
c0110b40:	68 00 10 00 00       	push   $0x1000
c0110b45:	ff 75 10             	pushl  0x10(%ebp)
c0110b48:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c0110b4b:	50                   	push   %eax
c0110b4c:	e8 cb a4 ff ff       	call   c010b01c <iobuf_init>
c0110b51:	83 c4 10             	add    $0x10,%esp
c0110b54:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dop_io(dev, iob, 0);
c0110b57:	8b 45 08             	mov    0x8(%ebp),%eax
c0110b5a:	8b 40 10             	mov    0x10(%eax),%eax
c0110b5d:	83 ec 04             	sub    $0x4,%esp
c0110b60:	6a 00                	push   $0x0
c0110b62:	ff 75 f4             	pushl  -0xc(%ebp)
c0110b65:	ff 75 08             	pushl  0x8(%ebp)
c0110b68:	ff d0                	call   *%eax
c0110b6a:	83 c4 10             	add    $0x10,%esp
}
c0110b6d:	c9                   	leave  
c0110b6e:	c3                   	ret    

c0110b6f <sfs_init_freemap>:
 *
 *      (1) get data addr in bitmap
 *      (2) read dev into iobuf
 */
static int
sfs_init_freemap(struct device *dev, struct bitmap *freemap, uint32_t blkno, uint32_t nblks, void *blk_buffer) {
c0110b6f:	55                   	push   %ebp
c0110b70:	89 e5                	mov    %esp,%ebp
c0110b72:	83 ec 18             	sub    $0x18,%esp
    size_t len;
    void *data = bitmap_getdata(freemap, &len);
c0110b75:	83 ec 08             	sub    $0x8,%esp
c0110b78:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0110b7b:	50                   	push   %eax
c0110b7c:	ff 75 0c             	pushl  0xc(%ebp)
c0110b7f:	e8 b0 27 00 00       	call   c0113334 <bitmap_getdata>
c0110b84:	83 c4 10             	add    $0x10,%esp
c0110b87:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(data != NULL && len == nblks * SFS_BLKSIZE);
c0110b8a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110b8e:	74 0f                	je     c0110b9f <sfs_init_freemap+0x30>
c0110b90:	8b 45 14             	mov    0x14(%ebp),%eax
c0110b93:	c1 e0 0c             	shl    $0xc,%eax
c0110b96:	89 c2                	mov    %eax,%edx
c0110b98:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110b9b:	39 c2                	cmp    %eax,%edx
c0110b9d:	74 4a                	je     c0110be9 <sfs_init_freemap+0x7a>
c0110b9f:	68 28 7f 11 c0       	push   $0xc0117f28
c0110ba4:	68 41 7e 11 c0       	push   $0xc0117e41
c0110ba9:	68 83 00 00 00       	push   $0x83
c0110bae:	68 56 7e 11 c0       	push   $0xc0117e56
c0110bb3:	e8 35 f9 fe ff       	call   c01004ed <__panic>
    while (nblks != 0) {
        int ret;
        if ((ret = sfs_init_read(dev, blkno, data)) != 0) {
c0110bb8:	83 ec 04             	sub    $0x4,%esp
c0110bbb:	ff 75 f4             	pushl  -0xc(%ebp)
c0110bbe:	ff 75 10             	pushl  0x10(%ebp)
c0110bc1:	ff 75 08             	pushl  0x8(%ebp)
c0110bc4:	e8 6a ff ff ff       	call   c0110b33 <sfs_init_read>
c0110bc9:	83 c4 10             	add    $0x10,%esp
c0110bcc:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0110bcf:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0110bd3:	74 05                	je     c0110bda <sfs_init_freemap+0x6b>
            return ret;
c0110bd5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110bd8:	eb 1a                	jmp    c0110bf4 <sfs_init_freemap+0x85>
        }
        blkno ++, nblks --, data += SFS_BLKSIZE;
c0110bda:	83 45 10 01          	addl   $0x1,0x10(%ebp)
c0110bde:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0110be2:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
static int
sfs_init_freemap(struct device *dev, struct bitmap *freemap, uint32_t blkno, uint32_t nblks, void *blk_buffer) {
    size_t len;
    void *data = bitmap_getdata(freemap, &len);
    assert(data != NULL && len == nblks * SFS_BLKSIZE);
    while (nblks != 0) {
c0110be9:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0110bed:	75 c9                	jne    c0110bb8 <sfs_init_freemap+0x49>
        if ((ret = sfs_init_read(dev, blkno, data)) != 0) {
            return ret;
        }
        blkno ++, nblks --, data += SFS_BLKSIZE;
    }
    return 0;
c0110bef:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110bf4:	c9                   	leave  
c0110bf5:	c3                   	ret    

c0110bf6 <sfs_do_mount>:
 *
 * @dev:        the block device contains sfs file system
 * @fs_store:   the fs struct in memroy
 */
static int
sfs_do_mount(struct device *dev, struct fs **fs_store) {
c0110bf6:	55                   	push   %ebp
c0110bf7:	89 e5                	mov    %esp,%ebp
c0110bf9:	83 ec 58             	sub    $0x58,%esp
    static_assert(SFS_BLKSIZE >= sizeof(struct sfs_super));
    static_assert(SFS_BLKSIZE >= sizeof(struct sfs_disk_inode));
    static_assert(SFS_BLKSIZE >= sizeof(struct sfs_disk_entry));

    if (dev->d_blocksize != SFS_BLKSIZE) {
c0110bfc:	8b 45 08             	mov    0x8(%ebp),%eax
c0110bff:	8b 40 04             	mov    0x4(%eax),%eax
c0110c02:	3d 00 10 00 00       	cmp    $0x1000,%eax
c0110c07:	74 0a                	je     c0110c13 <sfs_do_mount+0x1d>
        return -E_NA_DEV;
c0110c09:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
c0110c0e:	e9 d4 03 00 00       	jmp    c0110fe7 <sfs_do_mount+0x3f1>
    }

    /* allocate fs structure */
    struct fs *fs;
    if ((fs = alloc_fs(sfs)) == NULL) {
c0110c13:	83 ec 0c             	sub    $0xc,%esp
c0110c16:	6a 00                	push   $0x0
c0110c18:	e8 ef ec ff ff       	call   c010f90c <__alloc_fs>
c0110c1d:	83 c4 10             	add    $0x10,%esp
c0110c20:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0110c23:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0110c27:	75 0a                	jne    c0110c33 <sfs_do_mount+0x3d>
        return -E_NO_MEM;
c0110c29:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0110c2e:	e9 b4 03 00 00       	jmp    c0110fe7 <sfs_do_mount+0x3f1>
    }
    struct sfs_fs *sfs = fsop_info(fs, sfs);
c0110c33:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110c36:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0110c39:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0110c3d:	74 0a                	je     c0110c49 <sfs_do_mount+0x53>
c0110c3f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0110c42:	8b 40 6c             	mov    0x6c(%eax),%eax
c0110c45:	85 c0                	test   %eax,%eax
c0110c47:	74 19                	je     c0110c62 <sfs_do_mount+0x6c>
c0110c49:	68 18 7e 11 c0       	push   $0xc0117e18
c0110c4e:	68 41 7e 11 c0       	push   $0xc0117e41
c0110c53:	68 a3 00 00 00       	push   $0xa3
c0110c58:	68 56 7e 11 c0       	push   $0xc0117e56
c0110c5d:	e8 8b f8 fe ff       	call   c01004ed <__panic>
c0110c62:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0110c65:	89 45 e0             	mov    %eax,-0x20(%ebp)
    sfs->dev = dev;
c0110c68:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110c6b:	8b 55 08             	mov    0x8(%ebp),%edx
c0110c6e:	89 50 2c             	mov    %edx,0x2c(%eax)

    int ret = -E_NO_MEM;
c0110c71:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    void *sfs_buffer;
    if ((sfs->sfs_buffer = sfs_buffer = kmalloc(SFS_BLKSIZE)) == NULL) {
c0110c78:	83 ec 0c             	sub    $0xc,%esp
c0110c7b:	68 00 10 00 00       	push   $0x1000
c0110c80:	e8 7d 46 ff ff       	call   c0105302 <kmalloc>
c0110c85:	83 c4 10             	add    $0x10,%esp
c0110c88:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0110c8b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110c8e:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0110c91:	89 50 38             	mov    %edx,0x38(%eax)
c0110c94:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110c97:	8b 40 38             	mov    0x38(%eax),%eax
c0110c9a:	85 c0                	test   %eax,%eax
c0110c9c:	0f 84 33 03 00 00    	je     c0110fd5 <sfs_do_mount+0x3df>
        goto failed_cleanup_fs;
    }

    /* load and check superblock */
    if ((ret = sfs_init_read(dev, SFS_BLKN_SUPER, sfs_buffer)) != 0) {
c0110ca2:	83 ec 04             	sub    $0x4,%esp
c0110ca5:	ff 75 dc             	pushl  -0x24(%ebp)
c0110ca8:	6a 00                	push   $0x0
c0110caa:	ff 75 08             	pushl  0x8(%ebp)
c0110cad:	e8 81 fe ff ff       	call   c0110b33 <sfs_init_read>
c0110cb2:	83 c4 10             	add    $0x10,%esp
c0110cb5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110cb8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110cbc:	0f 85 ff 02 00 00    	jne    c0110fc1 <sfs_do_mount+0x3cb>
        goto failed_cleanup_sfs_buffer;
    }

    ret = -E_INVAL;
c0110cc2:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)

    struct sfs_super *super = sfs_buffer;
c0110cc9:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0110ccc:	89 45 d8             	mov    %eax,-0x28(%ebp)
    if (super->magic != SFS_MAGIC) {
c0110ccf:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0110cd2:	8b 00                	mov    (%eax),%eax
c0110cd4:	3d 2a be 8d 2f       	cmp    $0x2f8dbe2a,%eax
c0110cd9:	74 20                	je     c0110cfb <sfs_do_mount+0x105>
        cprintf("sfs: wrong magic in superblock. (%08x should be %08x).\n",
c0110cdb:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0110cde:	8b 00                	mov    (%eax),%eax
c0110ce0:	83 ec 04             	sub    $0x4,%esp
c0110ce3:	68 2a be 8d 2f       	push   $0x2f8dbe2a
c0110ce8:	50                   	push   %eax
c0110ce9:	68 54 7f 11 c0       	push   $0xc0117f54
c0110cee:	e8 94 f6 fe ff       	call   c0100387 <cprintf>
c0110cf3:	83 c4 10             	add    $0x10,%esp
                super->magic, SFS_MAGIC);
        goto failed_cleanup_sfs_buffer;
c0110cf6:	e9 ca 02 00 00       	jmp    c0110fc5 <sfs_do_mount+0x3cf>
    }
    if (super->blocks > dev->d_blocks) {
c0110cfb:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0110cfe:	8b 50 04             	mov    0x4(%eax),%edx
c0110d01:	8b 45 08             	mov    0x8(%ebp),%eax
c0110d04:	8b 00                	mov    (%eax),%eax
c0110d06:	39 c2                	cmp    %eax,%edx
c0110d08:	76 22                	jbe    c0110d2c <sfs_do_mount+0x136>
        cprintf("sfs: fs has %u blocks, device has %u blocks.\n",
c0110d0a:	8b 45 08             	mov    0x8(%ebp),%eax
c0110d0d:	8b 10                	mov    (%eax),%edx
c0110d0f:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0110d12:	8b 40 04             	mov    0x4(%eax),%eax
c0110d15:	83 ec 04             	sub    $0x4,%esp
c0110d18:	52                   	push   %edx
c0110d19:	50                   	push   %eax
c0110d1a:	68 8c 7f 11 c0       	push   $0xc0117f8c
c0110d1f:	e8 63 f6 fe ff       	call   c0100387 <cprintf>
c0110d24:	83 c4 10             	add    $0x10,%esp
                super->blocks, dev->d_blocks);
        goto failed_cleanup_sfs_buffer;
c0110d27:	e9 99 02 00 00       	jmp    c0110fc5 <sfs_do_mount+0x3cf>
    }
    super->info[SFS_MAX_INFO_LEN] = '\0';
c0110d2c:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0110d2f:	c6 40 2b 00          	movb   $0x0,0x2b(%eax)
    sfs->super = *super;
c0110d33:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110d36:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0110d39:	8b 0a                	mov    (%edx),%ecx
c0110d3b:	89 08                	mov    %ecx,(%eax)
c0110d3d:	8b 4a 04             	mov    0x4(%edx),%ecx
c0110d40:	89 48 04             	mov    %ecx,0x4(%eax)
c0110d43:	8b 4a 08             	mov    0x8(%edx),%ecx
c0110d46:	89 48 08             	mov    %ecx,0x8(%eax)
c0110d49:	8b 4a 0c             	mov    0xc(%edx),%ecx
c0110d4c:	89 48 0c             	mov    %ecx,0xc(%eax)
c0110d4f:	8b 4a 10             	mov    0x10(%edx),%ecx
c0110d52:	89 48 10             	mov    %ecx,0x10(%eax)
c0110d55:	8b 4a 14             	mov    0x14(%edx),%ecx
c0110d58:	89 48 14             	mov    %ecx,0x14(%eax)
c0110d5b:	8b 4a 18             	mov    0x18(%edx),%ecx
c0110d5e:	89 48 18             	mov    %ecx,0x18(%eax)
c0110d61:	8b 4a 1c             	mov    0x1c(%edx),%ecx
c0110d64:	89 48 1c             	mov    %ecx,0x1c(%eax)
c0110d67:	8b 4a 20             	mov    0x20(%edx),%ecx
c0110d6a:	89 48 20             	mov    %ecx,0x20(%eax)
c0110d6d:	8b 4a 24             	mov    0x24(%edx),%ecx
c0110d70:	89 48 24             	mov    %ecx,0x24(%eax)
c0110d73:	8b 52 28             	mov    0x28(%edx),%edx
c0110d76:	89 50 28             	mov    %edx,0x28(%eax)

    ret = -E_NO_MEM;
c0110d79:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    uint32_t i;

    /* alloc and initialize hash list */
    list_entry_t *hash_list;
    if ((sfs->hash_list = hash_list = kmalloc(sizeof(list_entry_t) * SFS_HLIST_SIZE)) == NULL) {
c0110d80:	83 ec 0c             	sub    $0xc,%esp
c0110d83:	68 00 20 00 00       	push   $0x2000
c0110d88:	e8 75 45 ff ff       	call   c0105302 <kmalloc>
c0110d8d:	83 c4 10             	add    $0x10,%esp
c0110d90:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c0110d93:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110d96:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0110d99:	89 50 68             	mov    %edx,0x68(%eax)
c0110d9c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110d9f:	8b 40 68             	mov    0x68(%eax),%eax
c0110da2:	85 c0                	test   %eax,%eax
c0110da4:	0f 84 1a 02 00 00    	je     c0110fc4 <sfs_do_mount+0x3ce>
        goto failed_cleanup_sfs_buffer;
    }
    for (i = 0; i < SFS_HLIST_SIZE; i ++) {
c0110daa:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0110db1:	eb 2a                	jmp    c0110ddd <sfs_do_mount+0x1e7>
        list_init(hash_list + i);
c0110db3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110db6:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0110dbd:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0110dc0:	01 d0                	add    %edx,%eax
c0110dc2:	89 45 b0             	mov    %eax,-0x50(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0110dc5:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0110dc8:	8b 55 b0             	mov    -0x50(%ebp),%edx
c0110dcb:	89 50 04             	mov    %edx,0x4(%eax)
c0110dce:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0110dd1:	8b 50 04             	mov    0x4(%eax),%edx
c0110dd4:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0110dd7:	89 10                	mov    %edx,(%eax)
    /* alloc and initialize hash list */
    list_entry_t *hash_list;
    if ((sfs->hash_list = hash_list = kmalloc(sizeof(list_entry_t) * SFS_HLIST_SIZE)) == NULL) {
        goto failed_cleanup_sfs_buffer;
    }
    for (i = 0; i < SFS_HLIST_SIZE; i ++) {
c0110dd9:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c0110ddd:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
c0110de4:	76 cd                	jbe    c0110db3 <sfs_do_mount+0x1bd>
        list_init(hash_list + i);
    }

    /* load and check freemap */
    struct bitmap *freemap;
    uint32_t freemap_size_nbits = sfs_freemap_bits(super);
c0110de6:	c7 45 cc 00 80 00 00 	movl   $0x8000,-0x34(%ebp)
c0110ded:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0110df0:	8b 50 04             	mov    0x4(%eax),%edx
c0110df3:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0110df6:	01 d0                	add    %edx,%eax
c0110df8:	83 e8 01             	sub    $0x1,%eax
c0110dfb:	89 45 c8             	mov    %eax,-0x38(%ebp)
c0110dfe:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0110e01:	ba 00 00 00 00       	mov    $0x0,%edx
c0110e06:	f7 75 cc             	divl   -0x34(%ebp)
c0110e09:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0110e0c:	29 d0                	sub    %edx,%eax
c0110e0e:	89 45 c4             	mov    %eax,-0x3c(%ebp)
    if ((sfs->freemap = freemap = bitmap_create(freemap_size_nbits)) == NULL) {
c0110e11:	83 ec 0c             	sub    $0xc,%esp
c0110e14:	ff 75 c4             	pushl  -0x3c(%ebp)
c0110e17:	e8 b0 21 00 00       	call   c0112fcc <bitmap_create>
c0110e1c:	83 c4 10             	add    $0x10,%esp
c0110e1f:	89 45 c0             	mov    %eax,-0x40(%ebp)
c0110e22:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110e25:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0110e28:	89 50 30             	mov    %edx,0x30(%eax)
c0110e2b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110e2e:	8b 40 30             	mov    0x30(%eax),%eax
c0110e31:	85 c0                	test   %eax,%eax
c0110e33:	0f 84 77 01 00 00    	je     c0110fb0 <sfs_do_mount+0x3ba>
        goto failed_cleanup_hash_list;
    }
    uint32_t freemap_size_nblks = sfs_freemap_blocks(super);
c0110e39:	c7 45 bc 00 80 00 00 	movl   $0x8000,-0x44(%ebp)
c0110e40:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0110e43:	8b 50 04             	mov    0x4(%eax),%edx
c0110e46:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0110e49:	01 d0                	add    %edx,%eax
c0110e4b:	83 e8 01             	sub    $0x1,%eax
c0110e4e:	ba 00 00 00 00       	mov    $0x0,%edx
c0110e53:	f7 75 bc             	divl   -0x44(%ebp)
c0110e56:	89 45 b8             	mov    %eax,-0x48(%ebp)
    if ((ret = sfs_init_freemap(dev, freemap, SFS_BLKN_FREEMAP, freemap_size_nblks, sfs_buffer)) != 0) {
c0110e59:	83 ec 0c             	sub    $0xc,%esp
c0110e5c:	ff 75 dc             	pushl  -0x24(%ebp)
c0110e5f:	ff 75 b8             	pushl  -0x48(%ebp)
c0110e62:	6a 02                	push   $0x2
c0110e64:	ff 75 c0             	pushl  -0x40(%ebp)
c0110e67:	ff 75 08             	pushl  0x8(%ebp)
c0110e6a:	e8 00 fd ff ff       	call   c0110b6f <sfs_init_freemap>
c0110e6f:	83 c4 20             	add    $0x20,%esp
c0110e72:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110e75:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110e79:	0f 85 20 01 00 00    	jne    c0110f9f <sfs_do_mount+0x3a9>
        goto failed_cleanup_freemap;
    }

    uint32_t blocks = sfs->super.blocks, unused_blocks = 0;
c0110e7f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110e82:	8b 40 04             	mov    0x4(%eax),%eax
c0110e85:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c0110e88:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    for (i = 0; i < freemap_size_nbits; i ++) {
c0110e8f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0110e96:	eb 1d                	jmp    c0110eb5 <sfs_do_mount+0x2bf>
        if (bitmap_test(freemap, i)) {
c0110e98:	83 ec 08             	sub    $0x8,%esp
c0110e9b:	ff 75 f0             	pushl  -0x10(%ebp)
c0110e9e:	ff 75 c0             	pushl  -0x40(%ebp)
c0110ea1:	e8 eb 23 00 00       	call   c0113291 <bitmap_test>
c0110ea6:	83 c4 10             	add    $0x10,%esp
c0110ea9:	85 c0                	test   %eax,%eax
c0110eab:	74 04                	je     c0110eb1 <sfs_do_mount+0x2bb>
            unused_blocks ++;
c0110ead:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
    if ((ret = sfs_init_freemap(dev, freemap, SFS_BLKN_FREEMAP, freemap_size_nblks, sfs_buffer)) != 0) {
        goto failed_cleanup_freemap;
    }

    uint32_t blocks = sfs->super.blocks, unused_blocks = 0;
    for (i = 0; i < freemap_size_nbits; i ++) {
c0110eb1:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c0110eb5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110eb8:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
c0110ebb:	72 db                	jb     c0110e98 <sfs_do_mount+0x2a2>
        if (bitmap_test(freemap, i)) {
            unused_blocks ++;
        }
    }
    assert(unused_blocks == sfs->super.unused_blocks);
c0110ebd:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110ec0:	8b 40 08             	mov    0x8(%eax),%eax
c0110ec3:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0110ec6:	74 19                	je     c0110ee1 <sfs_do_mount+0x2eb>
c0110ec8:	68 bc 7f 11 c0       	push   $0xc0117fbc
c0110ecd:	68 41 7e 11 c0       	push   $0xc0117e41
c0110ed2:	68 e0 00 00 00       	push   $0xe0
c0110ed7:	68 56 7e 11 c0       	push   $0xc0117e56
c0110edc:	e8 0c f6 fe ff       	call   c01004ed <__panic>

    /* and other fields */
    sfs->super_dirty = 0;
c0110ee1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110ee4:	c7 40 34 00 00 00 00 	movl   $0x0,0x34(%eax)
    sem_init(&(sfs->fs_sem), 1);
c0110eeb:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110eee:	83 c0 3c             	add    $0x3c,%eax
c0110ef1:	83 ec 08             	sub    $0x8,%esp
c0110ef4:	6a 01                	push   $0x1
c0110ef6:	50                   	push   %eax
c0110ef7:	e8 28 87 ff ff       	call   c0109624 <sem_init>
c0110efc:	83 c4 10             	add    $0x10,%esp
    sem_init(&(sfs->io_sem), 1);
c0110eff:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110f02:	83 c0 48             	add    $0x48,%eax
c0110f05:	83 ec 08             	sub    $0x8,%esp
c0110f08:	6a 01                	push   $0x1
c0110f0a:	50                   	push   %eax
c0110f0b:	e8 14 87 ff ff       	call   c0109624 <sem_init>
c0110f10:	83 c4 10             	add    $0x10,%esp
    sem_init(&(sfs->mutex_sem), 1);
c0110f13:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110f16:	83 c0 54             	add    $0x54,%eax
c0110f19:	83 ec 08             	sub    $0x8,%esp
c0110f1c:	6a 01                	push   $0x1
c0110f1e:	50                   	push   %eax
c0110f1f:	e8 00 87 ff ff       	call   c0109624 <sem_init>
c0110f24:	83 c4 10             	add    $0x10,%esp
    list_init(&(sfs->inode_list));
c0110f27:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110f2a:	83 c0 60             	add    $0x60,%eax
c0110f2d:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0110f30:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0110f33:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0110f36:	89 50 04             	mov    %edx,0x4(%eax)
c0110f39:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0110f3c:	8b 50 04             	mov    0x4(%eax),%edx
c0110f3f:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0110f42:	89 10                	mov    %edx,(%eax)
    cprintf("sfs: mount: '%s' (%d/%d/%d)\n", sfs->super.info,
c0110f44:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0110f47:	2b 45 ec             	sub    -0x14(%ebp),%eax
c0110f4a:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0110f4d:	83 c2 0c             	add    $0xc,%edx
c0110f50:	83 ec 0c             	sub    $0xc,%esp
c0110f53:	ff 75 b4             	pushl  -0x4c(%ebp)
c0110f56:	ff 75 ec             	pushl  -0x14(%ebp)
c0110f59:	50                   	push   %eax
c0110f5a:	52                   	push   %edx
c0110f5b:	68 e6 7f 11 c0       	push   $0xc0117fe6
c0110f60:	e8 22 f4 fe ff       	call   c0100387 <cprintf>
c0110f65:	83 c4 20             	add    $0x20,%esp
            blocks - unused_blocks, unused_blocks, blocks);

    /* link addr of sync/get_root/unmount/cleanup funciton  fs's function pointers*/
    fs->fs_sync = sfs_sync;
c0110f68:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110f6b:	c7 40 70 f0 07 11 c0 	movl   $0xc01107f0,0x70(%eax)
    fs->fs_get_root = sfs_get_root;
c0110f72:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110f75:	c7 40 74 3c 09 11 c0 	movl   $0xc011093c,0x74(%eax)
    fs->fs_unmount = sfs_unmount;
c0110f7c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110f7f:	c7 40 78 a5 09 11 c0 	movl   $0xc01109a5,0x78(%eax)
    fs->fs_cleanup = sfs_cleanup;
c0110f86:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110f89:	c7 40 7c 6b 0a 11 c0 	movl   $0xc0110a6b,0x7c(%eax)
    *fs_store = fs;
c0110f90:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110f93:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0110f96:	89 10                	mov    %edx,(%eax)
    return 0;
c0110f98:	b8 00 00 00 00       	mov    $0x0,%eax
c0110f9d:	eb 48                	jmp    c0110fe7 <sfs_do_mount+0x3f1>
    if ((sfs->freemap = freemap = bitmap_create(freemap_size_nbits)) == NULL) {
        goto failed_cleanup_hash_list;
    }
    uint32_t freemap_size_nblks = sfs_freemap_blocks(super);
    if ((ret = sfs_init_freemap(dev, freemap, SFS_BLKN_FREEMAP, freemap_size_nblks, sfs_buffer)) != 0) {
        goto failed_cleanup_freemap;
c0110f9f:	90                   	nop
    fs->fs_cleanup = sfs_cleanup;
    *fs_store = fs;
    return 0;

failed_cleanup_freemap:
    bitmap_destroy(freemap);
c0110fa0:	83 ec 0c             	sub    $0xc,%esp
c0110fa3:	ff 75 c0             	pushl  -0x40(%ebp)
c0110fa6:	e8 60 23 00 00       	call   c011330b <bitmap_destroy>
c0110fab:	83 c4 10             	add    $0x10,%esp
c0110fae:	eb 01                	jmp    c0110fb1 <sfs_do_mount+0x3bb>

    /* load and check freemap */
    struct bitmap *freemap;
    uint32_t freemap_size_nbits = sfs_freemap_bits(super);
    if ((sfs->freemap = freemap = bitmap_create(freemap_size_nbits)) == NULL) {
        goto failed_cleanup_hash_list;
c0110fb0:	90                   	nop
    return 0;

failed_cleanup_freemap:
    bitmap_destroy(freemap);
failed_cleanup_hash_list:
    kfree(hash_list);
c0110fb1:	83 ec 0c             	sub    $0xc,%esp
c0110fb4:	ff 75 d4             	pushl  -0x2c(%ebp)
c0110fb7:	e8 5e 43 ff ff       	call   c010531a <kfree>
c0110fbc:	83 c4 10             	add    $0x10,%esp
c0110fbf:	eb 04                	jmp    c0110fc5 <sfs_do_mount+0x3cf>
        goto failed_cleanup_fs;
    }

    /* load and check superblock */
    if ((ret = sfs_init_read(dev, SFS_BLKN_SUPER, sfs_buffer)) != 0) {
        goto failed_cleanup_sfs_buffer;
c0110fc1:	90                   	nop
c0110fc2:	eb 01                	jmp    c0110fc5 <sfs_do_mount+0x3cf>
    uint32_t i;

    /* alloc and initialize hash list */
    list_entry_t *hash_list;
    if ((sfs->hash_list = hash_list = kmalloc(sizeof(list_entry_t) * SFS_HLIST_SIZE)) == NULL) {
        goto failed_cleanup_sfs_buffer;
c0110fc4:	90                   	nop
failed_cleanup_freemap:
    bitmap_destroy(freemap);
failed_cleanup_hash_list:
    kfree(hash_list);
failed_cleanup_sfs_buffer:
    kfree(sfs_buffer);
c0110fc5:	83 ec 0c             	sub    $0xc,%esp
c0110fc8:	ff 75 dc             	pushl  -0x24(%ebp)
c0110fcb:	e8 4a 43 ff ff       	call   c010531a <kfree>
c0110fd0:	83 c4 10             	add    $0x10,%esp
c0110fd3:	eb 01                	jmp    c0110fd6 <sfs_do_mount+0x3e0>

    int ret = -E_NO_MEM;

    void *sfs_buffer;
    if ((sfs->sfs_buffer = sfs_buffer = kmalloc(SFS_BLKSIZE)) == NULL) {
        goto failed_cleanup_fs;
c0110fd5:	90                   	nop
failed_cleanup_hash_list:
    kfree(hash_list);
failed_cleanup_sfs_buffer:
    kfree(sfs_buffer);
failed_cleanup_fs:
    kfree(fs);
c0110fd6:	83 ec 0c             	sub    $0xc,%esp
c0110fd9:	ff 75 e8             	pushl  -0x18(%ebp)
c0110fdc:	e8 39 43 ff ff       	call   c010531a <kfree>
c0110fe1:	83 c4 10             	add    $0x10,%esp
    return ret;
c0110fe4:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0110fe7:	c9                   	leave  
c0110fe8:	c3                   	ret    

c0110fe9 <sfs_mount>:

int
sfs_mount(const char *devname) {
c0110fe9:	55                   	push   %ebp
c0110fea:	89 e5                	mov    %esp,%ebp
c0110fec:	83 ec 08             	sub    $0x8,%esp
    return vfs_mount(devname, sfs_do_mount);
c0110fef:	83 ec 08             	sub    $0x8,%esp
c0110ff2:	68 f6 0b 11 c0       	push   $0xc0110bf6
c0110ff7:	ff 75 08             	pushl  0x8(%ebp)
c0110ffa:	e8 be d9 ff ff       	call   c010e9bd <vfs_mount>
c0110fff:	83 c4 10             	add    $0x10,%esp
}
c0111002:	c9                   	leave  
c0111003:	c3                   	ret    

c0111004 <inode_ref_count>:
#define vop_open_inc(node)                                          inode_open_inc(node)
#define vop_open_dec(node)                                          inode_open_dec(node)


static inline int
inode_ref_count(struct inode *node) {
c0111004:	55                   	push   %ebp
c0111005:	89 e5                	mov    %esp,%ebp
    return node->ref_count;
c0111007:	8b 45 08             	mov    0x8(%ebp),%eax
c011100a:	8b 40 30             	mov    0x30(%eax),%eax
}
c011100d:	5d                   	pop    %ebp
c011100e:	c3                   	ret    

c011100f <lock_sin>:

/*
 * lock_sin - lock the process of inode Rd/Wr
 */
static void
lock_sin(struct sfs_inode *sin) {
c011100f:	55                   	push   %ebp
c0111010:	89 e5                	mov    %esp,%ebp
c0111012:	83 ec 08             	sub    $0x8,%esp
    down(&(sin->sem));
c0111015:	8b 45 08             	mov    0x8(%ebp),%eax
c0111018:	83 c0 10             	add    $0x10,%eax
c011101b:	83 ec 0c             	sub    $0xc,%esp
c011101e:	50                   	push   %eax
c011101f:	e8 89 87 ff ff       	call   c01097ad <down>
c0111024:	83 c4 10             	add    $0x10,%esp
}
c0111027:	90                   	nop
c0111028:	c9                   	leave  
c0111029:	c3                   	ret    

c011102a <unlock_sin>:

/*
 * unlock_sin - unlock the process of inode Rd/Wr
 */
static void
unlock_sin(struct sfs_inode *sin) {
c011102a:	55                   	push   %ebp
c011102b:	89 e5                	mov    %esp,%ebp
c011102d:	83 ec 08             	sub    $0x8,%esp
    up(&(sin->sem));
c0111030:	8b 45 08             	mov    0x8(%ebp),%eax
c0111033:	83 c0 10             	add    $0x10,%eax
c0111036:	83 ec 0c             	sub    $0xc,%esp
c0111039:	50                   	push   %eax
c011103a:	e8 52 87 ff ff       	call   c0109791 <up>
c011103f:	83 c4 10             	add    $0x10,%esp
}
c0111042:	90                   	nop
c0111043:	c9                   	leave  
c0111044:	c3                   	ret    

c0111045 <sfs_get_ops>:

/*
 * sfs_get_ops - return function addr of fs_node_dirops/sfs_node_fileops
 */
static const struct inode_ops *
sfs_get_ops(uint16_t type) {
c0111045:	55                   	push   %ebp
c0111046:	89 e5                	mov    %esp,%ebp
c0111048:	83 ec 18             	sub    $0x18,%esp
c011104b:	8b 45 08             	mov    0x8(%ebp),%eax
c011104e:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
    switch (type) {
c0111052:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c0111056:	83 f8 01             	cmp    $0x1,%eax
c0111059:	74 0c                	je     c0111067 <sfs_get_ops+0x22>
c011105b:	83 f8 02             	cmp    $0x2,%eax
c011105e:	75 0e                	jne    c011106e <sfs_get_ops+0x29>
    case SFS_TYPE_DIR:
        return &sfs_node_dirops;
c0111060:	b8 20 80 11 c0       	mov    $0xc0118020,%eax
c0111065:	eb 1d                	jmp    c0111084 <sfs_get_ops+0x3f>
    case SFS_TYPE_FILE:
        return &sfs_node_fileops;
c0111067:	b8 60 80 11 c0       	mov    $0xc0118060,%eax
c011106c:	eb 16                	jmp    c0111084 <sfs_get_ops+0x3f>
    }
    panic("invalid file type %d.\n", type);
c011106e:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c0111072:	50                   	push   %eax
c0111073:	68 a0 80 11 c0       	push   $0xc01180a0
c0111078:	6a 2e                	push   $0x2e
c011107a:	68 b7 80 11 c0       	push   $0xc01180b7
c011107f:	e8 69 f4 fe ff       	call   c01004ed <__panic>
}
c0111084:	c9                   	leave  
c0111085:	c3                   	ret    

c0111086 <sfs_hash_list>:

/*
 * sfs_hash_list - return inode entry in sfs->hash_list
 */
static list_entry_t *
sfs_hash_list(struct sfs_fs *sfs, uint32_t ino) {
c0111086:	55                   	push   %ebp
c0111087:	89 e5                	mov    %esp,%ebp
c0111089:	53                   	push   %ebx
c011108a:	83 ec 04             	sub    $0x4,%esp
    return sfs->hash_list + sin_hashfn(ino);
c011108d:	8b 45 08             	mov    0x8(%ebp),%eax
c0111090:	8b 58 68             	mov    0x68(%eax),%ebx
c0111093:	83 ec 08             	sub    $0x8,%esp
c0111096:	6a 0a                	push   $0xa
c0111098:	ff 75 0c             	pushl  0xc(%ebp)
c011109b:	e8 9d 31 00 00       	call   c011423d <hash32>
c01110a0:	83 c4 10             	add    $0x10,%esp
c01110a3:	c1 e0 03             	shl    $0x3,%eax
c01110a6:	01 d8                	add    %ebx,%eax
}
c01110a8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c01110ab:	c9                   	leave  
c01110ac:	c3                   	ret    

c01110ad <sfs_set_links>:

/*
 * sfs_set_links - link inode sin in sfs->linked-list AND sfs->hash_link
 */
static void
sfs_set_links(struct sfs_fs *sfs, struct sfs_inode *sin) {
c01110ad:	55                   	push   %ebp
c01110ae:	89 e5                	mov    %esp,%ebp
c01110b0:	53                   	push   %ebx
c01110b1:	83 ec 44             	sub    $0x44,%esp
    list_add(&(sfs->inode_list), &(sin->inode_link));
c01110b4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01110b7:	83 c0 1c             	add    $0x1c,%eax
c01110ba:	8b 55 08             	mov    0x8(%ebp),%edx
c01110bd:	83 c2 60             	add    $0x60,%edx
c01110c0:	89 55 f4             	mov    %edx,-0xc(%ebp)
c01110c3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c01110c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01110c9:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01110cc:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01110cf:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c01110d2:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01110d5:	8b 40 04             	mov    0x4(%eax),%eax
c01110d8:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01110db:	89 55 c8             	mov    %edx,-0x38(%ebp)
c01110de:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01110e1:	89 55 c4             	mov    %edx,-0x3c(%ebp)
c01110e4:	89 45 c0             	mov    %eax,-0x40(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c01110e7:	8b 45 c0             	mov    -0x40(%ebp),%eax
c01110ea:	8b 55 c8             	mov    -0x38(%ebp),%edx
c01110ed:	89 10                	mov    %edx,(%eax)
c01110ef:	8b 45 c0             	mov    -0x40(%ebp),%eax
c01110f2:	8b 10                	mov    (%eax),%edx
c01110f4:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01110f7:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c01110fa:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01110fd:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0111100:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0111103:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0111106:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0111109:	89 10                	mov    %edx,(%eax)
    list_add(sfs_hash_list(sfs, sin->ino), &(sin->hash_link));
c011110b:	8b 45 0c             	mov    0xc(%ebp),%eax
c011110e:	8d 58 24             	lea    0x24(%eax),%ebx
c0111111:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111114:	8b 40 04             	mov    0x4(%eax),%eax
c0111117:	83 ec 08             	sub    $0x8,%esp
c011111a:	50                   	push   %eax
c011111b:	ff 75 08             	pushl  0x8(%ebp)
c011111e:	e8 63 ff ff ff       	call   c0111086 <sfs_hash_list>
c0111123:	83 c4 10             	add    $0x10,%esp
c0111126:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0111129:	89 5d ec             	mov    %ebx,-0x14(%ebp)
c011112c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011112f:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0111132:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111135:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0111138:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011113b:	8b 40 04             	mov    0x4(%eax),%eax
c011113e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0111141:	89 55 e0             	mov    %edx,-0x20(%ebp)
c0111144:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0111147:	89 55 dc             	mov    %edx,-0x24(%ebp)
c011114a:	89 45 d8             	mov    %eax,-0x28(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c011114d:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0111150:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0111153:	89 10                	mov    %edx,(%eax)
c0111155:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0111158:	8b 10                	mov    (%eax),%edx
c011115a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011115d:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0111160:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111163:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0111166:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0111169:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011116c:	8b 55 dc             	mov    -0x24(%ebp),%edx
c011116f:	89 10                	mov    %edx,(%eax)
}
c0111171:	90                   	nop
c0111172:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0111175:	c9                   	leave  
c0111176:	c3                   	ret    

c0111177 <sfs_remove_links>:

/*
 * sfs_remove_links - unlink inode sin in sfs->linked-list AND sfs->hash_link
 */
static void
sfs_remove_links(struct sfs_inode *sin) {
c0111177:	55                   	push   %ebp
c0111178:	89 e5                	mov    %esp,%ebp
c011117a:	83 ec 20             	sub    $0x20,%esp
    list_del(&(sin->inode_link));
c011117d:	8b 45 08             	mov    0x8(%ebp),%eax
c0111180:	83 c0 1c             	add    $0x1c,%eax
c0111183:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0111186:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0111189:	8b 40 04             	mov    0x4(%eax),%eax
c011118c:	8b 55 fc             	mov    -0x4(%ebp),%edx
c011118f:	8b 12                	mov    (%edx),%edx
c0111191:	89 55 ec             	mov    %edx,-0x14(%ebp)
c0111194:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0111197:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011119a:	8b 55 e8             	mov    -0x18(%ebp),%edx
c011119d:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c01111a0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01111a3:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01111a6:	89 10                	mov    %edx,(%eax)
    list_del(&(sin->hash_link));
c01111a8:	8b 45 08             	mov    0x8(%ebp),%eax
c01111ab:	83 c0 24             	add    $0x24,%eax
c01111ae:	89 45 f8             	mov    %eax,-0x8(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c01111b1:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01111b4:	8b 40 04             	mov    0x4(%eax),%eax
c01111b7:	8b 55 f8             	mov    -0x8(%ebp),%edx
c01111ba:	8b 12                	mov    (%edx),%edx
c01111bc:	89 55 f4             	mov    %edx,-0xc(%ebp)
c01111bf:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c01111c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01111c5:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01111c8:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c01111cb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01111ce:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01111d1:	89 10                	mov    %edx,(%eax)
}
c01111d3:	90                   	nop
c01111d4:	c9                   	leave  
c01111d5:	c3                   	ret    

c01111d6 <sfs_block_inuse>:

/*
 * sfs_block_inuse - check the inode with NO. ino inuse info in bitmap
 */
static bool
sfs_block_inuse(struct sfs_fs *sfs, uint32_t ino) {
c01111d6:	55                   	push   %ebp
c01111d7:	89 e5                	mov    %esp,%ebp
c01111d9:	83 ec 08             	sub    $0x8,%esp
    if (ino != 0 && ino < sfs->super.blocks) {
c01111dc:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01111e0:	74 2a                	je     c011120c <sfs_block_inuse+0x36>
c01111e2:	8b 45 08             	mov    0x8(%ebp),%eax
c01111e5:	8b 40 04             	mov    0x4(%eax),%eax
c01111e8:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01111eb:	76 1f                	jbe    c011120c <sfs_block_inuse+0x36>
        return !bitmap_test(sfs->freemap, ino);
c01111ed:	8b 45 08             	mov    0x8(%ebp),%eax
c01111f0:	8b 40 30             	mov    0x30(%eax),%eax
c01111f3:	83 ec 08             	sub    $0x8,%esp
c01111f6:	ff 75 0c             	pushl  0xc(%ebp)
c01111f9:	50                   	push   %eax
c01111fa:	e8 92 20 00 00       	call   c0113291 <bitmap_test>
c01111ff:	83 c4 10             	add    $0x10,%esp
c0111202:	85 c0                	test   %eax,%eax
c0111204:	0f 94 c0             	sete   %al
c0111207:	0f b6 c0             	movzbl %al,%eax
c011120a:	eb 1e                	jmp    c011122a <sfs_block_inuse+0x54>
    }
    panic("sfs_block_inuse: called out of range (0, %u) %u.\n", sfs->super.blocks, ino);
c011120c:	8b 45 08             	mov    0x8(%ebp),%eax
c011120f:	8b 40 04             	mov    0x4(%eax),%eax
c0111212:	83 ec 0c             	sub    $0xc,%esp
c0111215:	ff 75 0c             	pushl  0xc(%ebp)
c0111218:	50                   	push   %eax
c0111219:	68 d0 80 11 c0       	push   $0xc01180d0
c011121e:	6a 53                	push   $0x53
c0111220:	68 b7 80 11 c0       	push   $0xc01180b7
c0111225:	e8 c3 f2 fe ff       	call   c01004ed <__panic>
}
c011122a:	c9                   	leave  
c011122b:	c3                   	ret    

c011122c <sfs_block_alloc>:

/*
 * sfs_block_alloc -  check and get a free disk block
 */
static int
sfs_block_alloc(struct sfs_fs *sfs, uint32_t *ino_store) {
c011122c:	55                   	push   %ebp
c011122d:	89 e5                	mov    %esp,%ebp
c011122f:	83 ec 18             	sub    $0x18,%esp
    int ret;
    if ((ret = bitmap_alloc(sfs->freemap, ino_store)) != 0) {
c0111232:	8b 45 08             	mov    0x8(%ebp),%eax
c0111235:	8b 40 30             	mov    0x30(%eax),%eax
c0111238:	83 ec 08             	sub    $0x8,%esp
c011123b:	ff 75 0c             	pushl  0xc(%ebp)
c011123e:	50                   	push   %eax
c011123f:	e8 06 1f 00 00       	call   c011314a <bitmap_alloc>
c0111244:	83 c4 10             	add    $0x10,%esp
c0111247:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011124a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011124e:	74 05                	je     c0111255 <sfs_block_alloc+0x29>
        return ret;
c0111250:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111253:	eb 7d                	jmp    c01112d2 <sfs_block_alloc+0xa6>
    }
    assert(sfs->super.unused_blocks > 0);
c0111255:	8b 45 08             	mov    0x8(%ebp),%eax
c0111258:	8b 40 08             	mov    0x8(%eax),%eax
c011125b:	85 c0                	test   %eax,%eax
c011125d:	75 16                	jne    c0111275 <sfs_block_alloc+0x49>
c011125f:	68 02 81 11 c0       	push   $0xc0118102
c0111264:	68 1f 81 11 c0       	push   $0xc011811f
c0111269:	6a 5f                	push   $0x5f
c011126b:	68 b7 80 11 c0       	push   $0xc01180b7
c0111270:	e8 78 f2 fe ff       	call   c01004ed <__panic>
    sfs->super.unused_blocks --, sfs->super_dirty = 1;
c0111275:	8b 45 08             	mov    0x8(%ebp),%eax
c0111278:	8b 40 08             	mov    0x8(%eax),%eax
c011127b:	8d 50 ff             	lea    -0x1(%eax),%edx
c011127e:	8b 45 08             	mov    0x8(%ebp),%eax
c0111281:	89 50 08             	mov    %edx,0x8(%eax)
c0111284:	8b 45 08             	mov    0x8(%ebp),%eax
c0111287:	c7 40 34 01 00 00 00 	movl   $0x1,0x34(%eax)
    assert(sfs_block_inuse(sfs, *ino_store));
c011128e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111291:	8b 00                	mov    (%eax),%eax
c0111293:	83 ec 08             	sub    $0x8,%esp
c0111296:	50                   	push   %eax
c0111297:	ff 75 08             	pushl  0x8(%ebp)
c011129a:	e8 37 ff ff ff       	call   c01111d6 <sfs_block_inuse>
c011129f:	83 c4 10             	add    $0x10,%esp
c01112a2:	85 c0                	test   %eax,%eax
c01112a4:	75 16                	jne    c01112bc <sfs_block_alloc+0x90>
c01112a6:	68 34 81 11 c0       	push   $0xc0118134
c01112ab:	68 1f 81 11 c0       	push   $0xc011811f
c01112b0:	6a 61                	push   $0x61
c01112b2:	68 b7 80 11 c0       	push   $0xc01180b7
c01112b7:	e8 31 f2 fe ff       	call   c01004ed <__panic>
    return sfs_clear_block(sfs, *ino_store, 1);
c01112bc:	8b 45 0c             	mov    0xc(%ebp),%eax
c01112bf:	8b 00                	mov    (%eax),%eax
c01112c1:	83 ec 04             	sub    $0x4,%esp
c01112c4:	6a 01                	push   $0x1
c01112c6:	50                   	push   %eax
c01112c7:	ff 75 08             	pushl  0x8(%ebp)
c01112ca:	e8 c1 23 00 00       	call   c0113690 <sfs_clear_block>
c01112cf:	83 c4 10             	add    $0x10,%esp
}
c01112d2:	c9                   	leave  
c01112d3:	c3                   	ret    

c01112d4 <sfs_block_free>:

/*
 * sfs_block_free - set related bits for ino block to 1(means free) in bitmap, add sfs->super.unused_blocks, set superblock dirty *
 */
static void
sfs_block_free(struct sfs_fs *sfs, uint32_t ino) {
c01112d4:	55                   	push   %ebp
c01112d5:	89 e5                	mov    %esp,%ebp
c01112d7:	83 ec 08             	sub    $0x8,%esp
    assert(sfs_block_inuse(sfs, ino));
c01112da:	83 ec 08             	sub    $0x8,%esp
c01112dd:	ff 75 0c             	pushl  0xc(%ebp)
c01112e0:	ff 75 08             	pushl  0x8(%ebp)
c01112e3:	e8 ee fe ff ff       	call   c01111d6 <sfs_block_inuse>
c01112e8:	83 c4 10             	add    $0x10,%esp
c01112eb:	85 c0                	test   %eax,%eax
c01112ed:	75 16                	jne    c0111305 <sfs_block_free+0x31>
c01112ef:	68 55 81 11 c0       	push   $0xc0118155
c01112f4:	68 1f 81 11 c0       	push   $0xc011811f
c01112f9:	6a 6a                	push   $0x6a
c01112fb:	68 b7 80 11 c0       	push   $0xc01180b7
c0111300:	e8 e8 f1 fe ff       	call   c01004ed <__panic>
    bitmap_free(sfs->freemap, ino);
c0111305:	8b 45 08             	mov    0x8(%ebp),%eax
c0111308:	8b 40 30             	mov    0x30(%eax),%eax
c011130b:	83 ec 08             	sub    $0x8,%esp
c011130e:	ff 75 0c             	pushl  0xc(%ebp)
c0111311:	50                   	push   %eax
c0111312:	e8 a2 1f 00 00       	call   c01132b9 <bitmap_free>
c0111317:	83 c4 10             	add    $0x10,%esp
    sfs->super.unused_blocks ++, sfs->super_dirty = 1;
c011131a:	8b 45 08             	mov    0x8(%ebp),%eax
c011131d:	8b 40 08             	mov    0x8(%eax),%eax
c0111320:	8d 50 01             	lea    0x1(%eax),%edx
c0111323:	8b 45 08             	mov    0x8(%ebp),%eax
c0111326:	89 50 08             	mov    %edx,0x8(%eax)
c0111329:	8b 45 08             	mov    0x8(%ebp),%eax
c011132c:	c7 40 34 01 00 00 00 	movl   $0x1,0x34(%eax)
}
c0111333:	90                   	nop
c0111334:	c9                   	leave  
c0111335:	c3                   	ret    

c0111336 <sfs_create_inode>:

/*
 * sfs_create_inode - alloc a inode in memroy, and init din/ino/dirty/reclian_count/sem fields in sfs_inode in inode
 */
static int
sfs_create_inode(struct sfs_fs *sfs, struct sfs_disk_inode *din, uint32_t ino, struct inode **node_store) {
c0111336:	55                   	push   %ebp
c0111337:	89 e5                	mov    %esp,%ebp
c0111339:	83 ec 18             	sub    $0x18,%esp
    struct inode *node;
    if ((node = alloc_inode(sfs_inode)) != NULL) {
c011133c:	83 ec 0c             	sub    $0xc,%esp
c011133f:	68 35 12 00 00       	push   $0x1235
c0111344:	e8 47 df ff ff       	call   c010f290 <__alloc_inode>
c0111349:	83 c4 10             	add    $0x10,%esp
c011134c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011134f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111353:	0f 84 a5 00 00 00    	je     c01113fe <sfs_create_inode+0xc8>
        vop_init(node, sfs_get_ops(din->type), info2fs(sfs, sfs));
c0111359:	8b 45 0c             	mov    0xc(%ebp),%eax
c011135c:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c0111360:	0f b7 c0             	movzwl %ax,%eax
c0111363:	83 ec 0c             	sub    $0xc,%esp
c0111366:	50                   	push   %eax
c0111367:	e8 d9 fc ff ff       	call   c0111045 <sfs_get_ops>
c011136c:	83 c4 10             	add    $0x10,%esp
c011136f:	83 ec 04             	sub    $0x4,%esp
c0111372:	ff 75 08             	pushl  0x8(%ebp)
c0111375:	50                   	push   %eax
c0111376:	ff 75 f4             	pushl  -0xc(%ebp)
c0111379:	e8 3c df ff ff       	call   c010f2ba <inode_init>
c011137e:	83 c4 10             	add    $0x10,%esp
        struct sfs_inode *sin = vop_info(node, sfs_inode);
c0111381:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111384:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0111387:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011138b:	74 0d                	je     c011139a <sfs_create_inode+0x64>
c011138d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111390:	8b 40 2c             	mov    0x2c(%eax),%eax
c0111393:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0111398:	74 16                	je     c01113b0 <sfs_create_inode+0x7a>
c011139a:	68 70 81 11 c0       	push   $0xc0118170
c011139f:	68 1f 81 11 c0       	push   $0xc011811f
c01113a4:	6a 77                	push   $0x77
c01113a6:	68 b7 80 11 c0       	push   $0xc01180b7
c01113ab:	e8 3d f1 fe ff       	call   c01004ed <__panic>
c01113b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01113b3:	89 45 ec             	mov    %eax,-0x14(%ebp)
        sin->din = din, sin->ino = ino, sin->dirty = 0, sin->reclaim_count = 1;
c01113b6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01113b9:	8b 55 0c             	mov    0xc(%ebp),%edx
c01113bc:	89 10                	mov    %edx,(%eax)
c01113be:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01113c1:	8b 55 10             	mov    0x10(%ebp),%edx
c01113c4:	89 50 04             	mov    %edx,0x4(%eax)
c01113c7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01113ca:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
c01113d1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01113d4:	c7 40 0c 01 00 00 00 	movl   $0x1,0xc(%eax)
        sem_init(&(sin->sem), 1);
c01113db:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01113de:	83 c0 10             	add    $0x10,%eax
c01113e1:	83 ec 08             	sub    $0x8,%esp
c01113e4:	6a 01                	push   $0x1
c01113e6:	50                   	push   %eax
c01113e7:	e8 38 82 ff ff       	call   c0109624 <sem_init>
c01113ec:	83 c4 10             	add    $0x10,%esp
        *node_store = node;
c01113ef:	8b 45 14             	mov    0x14(%ebp),%eax
c01113f2:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01113f5:	89 10                	mov    %edx,(%eax)
        return 0;
c01113f7:	b8 00 00 00 00       	mov    $0x0,%eax
c01113fc:	eb 05                	jmp    c0111403 <sfs_create_inode+0xcd>
    }
    return -E_NO_MEM;
c01113fe:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c0111403:	c9                   	leave  
c0111404:	c3                   	ret    

c0111405 <lookup_sfs_nolock>:
 * lookup_sfs_nolock - according ino, find related inode
 *
 * NOTICE: le2sin, info2node MACRO
 */
static struct inode *
lookup_sfs_nolock(struct sfs_fs *sfs, uint32_t ino) {
c0111405:	55                   	push   %ebp
c0111406:	89 e5                	mov    %esp,%ebp
c0111408:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    list_entry_t *list = sfs_hash_list(sfs, ino), *le = list;
c011140b:	83 ec 08             	sub    $0x8,%esp
c011140e:	ff 75 0c             	pushl  0xc(%ebp)
c0111411:	ff 75 08             	pushl  0x8(%ebp)
c0111414:	e8 6d fc ff ff       	call   c0111086 <sfs_hash_list>
c0111419:	83 c4 10             	add    $0x10,%esp
c011141c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011141f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111422:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c0111425:	eb 41                	jmp    c0111468 <lookup_sfs_nolock+0x63>
        struct sfs_inode *sin = le2sin(le, hash_link);
c0111427:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011142a:	83 e8 24             	sub    $0x24,%eax
c011142d:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (sin->ino == ino) {
c0111430:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111433:	8b 40 04             	mov    0x4(%eax),%eax
c0111436:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0111439:	75 2d                	jne    c0111468 <lookup_sfs_nolock+0x63>
            node = info2node(sin, sfs_inode);
c011143b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011143e:	89 45 e8             	mov    %eax,-0x18(%ebp)
            if (vop_ref_inc(node) == 1) {
c0111441:	83 ec 0c             	sub    $0xc,%esp
c0111444:	ff 75 e8             	pushl  -0x18(%ebp)
c0111447:	e8 0f df ff ff       	call   c010f35b <inode_ref_inc>
c011144c:	83 c4 10             	add    $0x10,%esp
c011144f:	83 f8 01             	cmp    $0x1,%eax
c0111452:	75 0f                	jne    c0111463 <lookup_sfs_nolock+0x5e>
                sin->reclaim_count ++;
c0111454:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111457:	8b 40 0c             	mov    0xc(%eax),%eax
c011145a:	8d 50 01             	lea    0x1(%eax),%edx
c011145d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111460:	89 50 0c             	mov    %edx,0xc(%eax)
            }
            return node;
c0111463:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111466:	eb 1c                	jmp    c0111484 <lookup_sfs_nolock+0x7f>
c0111468:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011146b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c011146e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0111471:	8b 40 04             	mov    0x4(%eax),%eax
 */
static struct inode *
lookup_sfs_nolock(struct sfs_fs *sfs, uint32_t ino) {
    struct inode *node;
    list_entry_t *list = sfs_hash_list(sfs, ino), *le = list;
    while ((le = list_next(le)) != list) {
c0111474:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111477:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011147a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c011147d:	75 a8                	jne    c0111427 <lookup_sfs_nolock+0x22>
                sin->reclaim_count ++;
            }
            return node;
        }
    }
    return NULL;
c011147f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0111484:	c9                   	leave  
c0111485:	c3                   	ret    

c0111486 <sfs_load_inode>:
/*
 * sfs_load_inode - If the inode isn't existed, load inode related ino disk block data into a new created inode.
 *                  If the inode is in memory alreadily, then do nothing
 */
int
sfs_load_inode(struct sfs_fs *sfs, struct inode **node_store, uint32_t ino) {
c0111486:	55                   	push   %ebp
c0111487:	89 e5                	mov    %esp,%ebp
c0111489:	83 ec 18             	sub    $0x18,%esp
    lock_sfs_fs(sfs);
c011148c:	83 ec 0c             	sub    $0xc,%esp
c011148f:	ff 75 08             	pushl  0x8(%ebp)
c0111492:	e8 ed f2 ff ff       	call   c0110784 <lock_sfs_fs>
c0111497:	83 c4 10             	add    $0x10,%esp
    struct inode *node;
    if ((node = lookup_sfs_nolock(sfs, ino)) != NULL) {
c011149a:	83 ec 08             	sub    $0x8,%esp
c011149d:	ff 75 10             	pushl  0x10(%ebp)
c01114a0:	ff 75 08             	pushl  0x8(%ebp)
c01114a3:	e8 5d ff ff ff       	call   c0111405 <lookup_sfs_nolock>
c01114a8:	83 c4 10             	add    $0x10,%esp
c01114ab:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01114ae:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01114b1:	85 c0                	test   %eax,%eax
c01114b3:	0f 85 fd 00 00 00    	jne    c01115b6 <sfs_load_inode+0x130>
        goto out_unlock;
    }

    int ret = -E_NO_MEM;
c01114b9:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    struct sfs_disk_inode *din;
    if ((din = kmalloc(sizeof(struct sfs_disk_inode))) == NULL) {
c01114c0:	83 ec 0c             	sub    $0xc,%esp
c01114c3:	6a 40                	push   $0x40
c01114c5:	e8 38 3e ff ff       	call   c0105302 <kmalloc>
c01114ca:	83 c4 10             	add    $0x10,%esp
c01114cd:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01114d0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01114d4:	0f 84 0e 01 00 00    	je     c01115e8 <sfs_load_inode+0x162>
        goto failed_unlock;
    }

    assert(sfs_block_inuse(sfs, ino));
c01114da:	83 ec 08             	sub    $0x8,%esp
c01114dd:	ff 75 10             	pushl  0x10(%ebp)
c01114e0:	ff 75 08             	pushl  0x8(%ebp)
c01114e3:	e8 ee fc ff ff       	call   c01111d6 <sfs_block_inuse>
c01114e8:	83 c4 10             	add    $0x10,%esp
c01114eb:	85 c0                	test   %eax,%eax
c01114ed:	75 19                	jne    c0111508 <sfs_load_inode+0x82>
c01114ef:	68 55 81 11 c0       	push   $0xc0118155
c01114f4:	68 1f 81 11 c0       	push   $0xc011811f
c01114f9:	68 a8 00 00 00       	push   $0xa8
c01114fe:	68 b7 80 11 c0       	push   $0xc01180b7
c0111503:	e8 e5 ef fe ff       	call   c01004ed <__panic>
    if ((ret = sfs_rbuf(sfs, din, sizeof(struct sfs_disk_inode), ino, 0)) != 0) {
c0111508:	83 ec 0c             	sub    $0xc,%esp
c011150b:	6a 00                	push   $0x0
c011150d:	ff 75 10             	pushl  0x10(%ebp)
c0111510:	6a 40                	push   $0x40
c0111512:	ff 75 f0             	pushl  -0x10(%ebp)
c0111515:	ff 75 08             	pushl  0x8(%ebp)
c0111518:	e8 57 1f 00 00       	call   c0113474 <sfs_rbuf>
c011151d:	83 c4 20             	add    $0x20,%esp
c0111520:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111523:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111527:	0f 85 a7 00 00 00    	jne    c01115d4 <sfs_load_inode+0x14e>
        goto failed_cleanup_din;
    }

    assert(din->nlinks != 0);
c011152d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111530:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c0111534:	66 85 c0             	test   %ax,%ax
c0111537:	75 19                	jne    c0111552 <sfs_load_inode+0xcc>
c0111539:	68 a6 81 11 c0       	push   $0xc01181a6
c011153e:	68 1f 81 11 c0       	push   $0xc011811f
c0111543:	68 ad 00 00 00       	push   $0xad
c0111548:	68 b7 80 11 c0       	push   $0xc01180b7
c011154d:	e8 9b ef fe ff       	call   c01004ed <__panic>
    if ((ret = sfs_create_inode(sfs, din, ino, &node)) != 0) {
c0111552:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0111555:	50                   	push   %eax
c0111556:	ff 75 10             	pushl  0x10(%ebp)
c0111559:	ff 75 f0             	pushl  -0x10(%ebp)
c011155c:	ff 75 08             	pushl  0x8(%ebp)
c011155f:	e8 d2 fd ff ff       	call   c0111336 <sfs_create_inode>
c0111564:	83 c4 10             	add    $0x10,%esp
c0111567:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011156a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011156e:	75 67                	jne    c01115d7 <sfs_load_inode+0x151>
        goto failed_cleanup_din;
    }
    sfs_set_links(sfs, vop_info(node, sfs_inode));
c0111570:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111573:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0111576:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011157a:	74 0d                	je     c0111589 <sfs_load_inode+0x103>
c011157c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011157f:	8b 40 2c             	mov    0x2c(%eax),%eax
c0111582:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0111587:	74 19                	je     c01115a2 <sfs_load_inode+0x11c>
c0111589:	68 70 81 11 c0       	push   $0xc0118170
c011158e:	68 1f 81 11 c0       	push   $0xc011811f
c0111593:	68 b1 00 00 00       	push   $0xb1
c0111598:	68 b7 80 11 c0       	push   $0xc01180b7
c011159d:	e8 4b ef fe ff       	call   c01004ed <__panic>
c01115a2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01115a5:	83 ec 08             	sub    $0x8,%esp
c01115a8:	50                   	push   %eax
c01115a9:	ff 75 08             	pushl  0x8(%ebp)
c01115ac:	e8 fc fa ff ff       	call   c01110ad <sfs_set_links>
c01115b1:	83 c4 10             	add    $0x10,%esp
c01115b4:	eb 01                	jmp    c01115b7 <sfs_load_inode+0x131>
int
sfs_load_inode(struct sfs_fs *sfs, struct inode **node_store, uint32_t ino) {
    lock_sfs_fs(sfs);
    struct inode *node;
    if ((node = lookup_sfs_nolock(sfs, ino)) != NULL) {
        goto out_unlock;
c01115b6:	90                   	nop
        goto failed_cleanup_din;
    }
    sfs_set_links(sfs, vop_info(node, sfs_inode));

out_unlock:
    unlock_sfs_fs(sfs);
c01115b7:	83 ec 0c             	sub    $0xc,%esp
c01115ba:	ff 75 08             	pushl  0x8(%ebp)
c01115bd:	e8 f8 f1 ff ff       	call   c01107ba <unlock_sfs_fs>
c01115c2:	83 c4 10             	add    $0x10,%esp
    *node_store = node;
c01115c5:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01115c8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01115cb:	89 10                	mov    %edx,(%eax)
    return 0;
c01115cd:	b8 00 00 00 00       	mov    $0x0,%eax
c01115d2:	eb 26                	jmp    c01115fa <sfs_load_inode+0x174>
        goto failed_unlock;
    }

    assert(sfs_block_inuse(sfs, ino));
    if ((ret = sfs_rbuf(sfs, din, sizeof(struct sfs_disk_inode), ino, 0)) != 0) {
        goto failed_cleanup_din;
c01115d4:	90                   	nop
c01115d5:	eb 01                	jmp    c01115d8 <sfs_load_inode+0x152>
    }

    assert(din->nlinks != 0);
    if ((ret = sfs_create_inode(sfs, din, ino, &node)) != 0) {
        goto failed_cleanup_din;
c01115d7:	90                   	nop
    unlock_sfs_fs(sfs);
    *node_store = node;
    return 0;

failed_cleanup_din:
    kfree(din);
c01115d8:	83 ec 0c             	sub    $0xc,%esp
c01115db:	ff 75 f0             	pushl  -0x10(%ebp)
c01115de:	e8 37 3d ff ff       	call   c010531a <kfree>
c01115e3:	83 c4 10             	add    $0x10,%esp
c01115e6:	eb 01                	jmp    c01115e9 <sfs_load_inode+0x163>
    }

    int ret = -E_NO_MEM;
    struct sfs_disk_inode *din;
    if ((din = kmalloc(sizeof(struct sfs_disk_inode))) == NULL) {
        goto failed_unlock;
c01115e8:	90                   	nop
    return 0;

failed_cleanup_din:
    kfree(din);
failed_unlock:
    unlock_sfs_fs(sfs);
c01115e9:	83 ec 0c             	sub    $0xc,%esp
c01115ec:	ff 75 08             	pushl  0x8(%ebp)
c01115ef:	e8 c6 f1 ff ff       	call   c01107ba <unlock_sfs_fs>
c01115f4:	83 c4 10             	add    $0x10,%esp
    return ret;
c01115f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01115fa:	c9                   	leave  
c01115fb:	c3                   	ret    

c01115fc <sfs_bmap_get_sub_nolock>:
 * @index:    the index of block in indrect block
 * @create:   BOOL, if the block isn't allocated, if create = 1 the alloc a block,  otherwise just do nothing
 * @ino_store: 0 OR the index of already inused block or new allocated block.
 */
static int
sfs_bmap_get_sub_nolock(struct sfs_fs *sfs, uint32_t *entp, uint32_t index, bool create, uint32_t *ino_store) {
c01115fc:	55                   	push   %ebp
c01115fd:	89 e5                	mov    %esp,%ebp
c01115ff:	83 ec 18             	sub    $0x18,%esp
    assert(index < SFS_BLK_NENTRY);
c0111602:	81 7d 10 ff 03 00 00 	cmpl   $0x3ff,0x10(%ebp)
c0111609:	76 19                	jbe    c0111624 <sfs_bmap_get_sub_nolock+0x28>
c011160b:	68 b7 81 11 c0       	push   $0xc01181b7
c0111610:	68 1f 81 11 c0       	push   $0xc011811f
c0111615:	68 ca 00 00 00       	push   $0xca
c011161a:	68 b7 80 11 c0       	push   $0xc01180b7
c011161f:	e8 c9 ee fe ff       	call   c01004ed <__panic>
    int ret;
    uint32_t ent, ino = 0;
c0111624:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
    off_t offset = index * sizeof(uint32_t);  // the offset of entry in entry block
c011162b:	8b 45 10             	mov    0x10(%ebp),%eax
c011162e:	c1 e0 02             	shl    $0x2,%eax
c0111631:	89 45 f0             	mov    %eax,-0x10(%ebp)
	// if entry block is existd, read the content of entry block into  sfs->sfs_buffer
    if ((ent = *entp) != 0) {
c0111634:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111637:	8b 00                	mov    (%eax),%eax
c0111639:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011163c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011163f:	85 c0                	test   %eax,%eax
c0111641:	74 3f                	je     c0111682 <sfs_bmap_get_sub_nolock+0x86>
        if ((ret = sfs_rbuf(sfs, &ino, sizeof(uint32_t), ent, offset)) != 0) {
c0111643:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111646:	83 ec 0c             	sub    $0xc,%esp
c0111649:	ff 75 f0             	pushl  -0x10(%ebp)
c011164c:	50                   	push   %eax
c011164d:	6a 04                	push   $0x4
c011164f:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0111652:	50                   	push   %eax
c0111653:	ff 75 08             	pushl  0x8(%ebp)
c0111656:	e8 19 1e 00 00       	call   c0113474 <sfs_rbuf>
c011165b:	83 c4 20             	add    $0x20,%esp
c011165e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111661:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111665:	74 08                	je     c011166f <sfs_bmap_get_sub_nolock+0x73>
            return ret;
c0111667:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011166a:	e9 d5 00 00 00       	jmp    c0111744 <sfs_bmap_get_sub_nolock+0x148>
        }
        if (ino != 0 || !create) {
c011166f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111672:	85 c0                	test   %eax,%eax
c0111674:	0f 85 85 00 00 00    	jne    c01116ff <sfs_bmap_get_sub_nolock+0x103>
c011167a:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c011167e:	74 7f                	je     c01116ff <sfs_bmap_get_sub_nolock+0x103>
c0111680:	eb 29                	jmp    c01116ab <sfs_bmap_get_sub_nolock+0xaf>
            goto out;
        }
    }
    else {
        if (!create) {
c0111682:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0111686:	74 76                	je     c01116fe <sfs_bmap_get_sub_nolock+0x102>
            goto out;
        }
		//if entry block isn't existd, allocated a entry block (for indrect block)
        if ((ret = sfs_block_alloc(sfs, &ent)) != 0) {
c0111688:	83 ec 08             	sub    $0x8,%esp
c011168b:	8d 45 ec             	lea    -0x14(%ebp),%eax
c011168e:	50                   	push   %eax
c011168f:	ff 75 08             	pushl  0x8(%ebp)
c0111692:	e8 95 fb ff ff       	call   c011122c <sfs_block_alloc>
c0111697:	83 c4 10             	add    $0x10,%esp
c011169a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011169d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01116a1:	74 08                	je     c01116ab <sfs_bmap_get_sub_nolock+0xaf>
            return ret;
c01116a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01116a6:	e9 99 00 00 00       	jmp    c0111744 <sfs_bmap_get_sub_nolock+0x148>
        }
    }
    
    if ((ret = sfs_block_alloc(sfs, &ino)) != 0) {
c01116ab:	83 ec 08             	sub    $0x8,%esp
c01116ae:	8d 45 e8             	lea    -0x18(%ebp),%eax
c01116b1:	50                   	push   %eax
c01116b2:	ff 75 08             	pushl  0x8(%ebp)
c01116b5:	e8 72 fb ff ff       	call   c011122c <sfs_block_alloc>
c01116ba:	83 c4 10             	add    $0x10,%esp
c01116bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01116c0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01116c4:	75 5c                	jne    c0111722 <sfs_bmap_get_sub_nolock+0x126>
        goto failed_cleanup;
    }
    if ((ret = sfs_wbuf(sfs, &ino, sizeof(uint32_t), ent, offset)) != 0) {
c01116c6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01116c9:	83 ec 0c             	sub    $0xc,%esp
c01116cc:	ff 75 f0             	pushl  -0x10(%ebp)
c01116cf:	50                   	push   %eax
c01116d0:	6a 04                	push   $0x4
c01116d2:	8d 45 e8             	lea    -0x18(%ebp),%eax
c01116d5:	50                   	push   %eax
c01116d6:	ff 75 08             	pushl  0x8(%ebp)
c01116d9:	e8 33 1e 00 00       	call   c0113511 <sfs_wbuf>
c01116de:	83 c4 20             	add    $0x20,%esp
c01116e1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01116e4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01116e8:	74 15                	je     c01116ff <sfs_bmap_get_sub_nolock+0x103>
        sfs_block_free(sfs, ino);
c01116ea:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01116ed:	83 ec 08             	sub    $0x8,%esp
c01116f0:	50                   	push   %eax
c01116f1:	ff 75 08             	pushl  0x8(%ebp)
c01116f4:	e8 db fb ff ff       	call   c01112d4 <sfs_block_free>
c01116f9:	83 c4 10             	add    $0x10,%esp
        goto failed_cleanup;
c01116fc:	eb 25                	jmp    c0111723 <sfs_bmap_get_sub_nolock+0x127>
            goto out;
        }
    }
    else {
        if (!create) {
            goto out;
c01116fe:	90                   	nop
        sfs_block_free(sfs, ino);
        goto failed_cleanup;
    }

out:
    if (ent != *entp) {
c01116ff:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111702:	8b 10                	mov    (%eax),%edx
c0111704:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111707:	39 c2                	cmp    %eax,%edx
c0111709:	74 08                	je     c0111713 <sfs_bmap_get_sub_nolock+0x117>
        *entp = ent;
c011170b:	8b 55 ec             	mov    -0x14(%ebp),%edx
c011170e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111711:	89 10                	mov    %edx,(%eax)
    }
    *ino_store = ino;
c0111713:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0111716:	8b 45 18             	mov    0x18(%ebp),%eax
c0111719:	89 10                	mov    %edx,(%eax)
    return 0;
c011171b:	b8 00 00 00 00       	mov    $0x0,%eax
c0111720:	eb 22                	jmp    c0111744 <sfs_bmap_get_sub_nolock+0x148>
            return ret;
        }
    }
    
    if ((ret = sfs_block_alloc(sfs, &ino)) != 0) {
        goto failed_cleanup;
c0111722:	90                   	nop
    }
    *ino_store = ino;
    return 0;

failed_cleanup:
    if (ent != *entp) {
c0111723:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111726:	8b 10                	mov    (%eax),%edx
c0111728:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011172b:	39 c2                	cmp    %eax,%edx
c011172d:	74 12                	je     c0111741 <sfs_bmap_get_sub_nolock+0x145>
        sfs_block_free(sfs, ent);
c011172f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111732:	83 ec 08             	sub    $0x8,%esp
c0111735:	50                   	push   %eax
c0111736:	ff 75 08             	pushl  0x8(%ebp)
c0111739:	e8 96 fb ff ff       	call   c01112d4 <sfs_block_free>
c011173e:	83 c4 10             	add    $0x10,%esp
    }
    return ret;
c0111741:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0111744:	c9                   	leave  
c0111745:	c3                   	ret    

c0111746 <sfs_bmap_get_nolock>:
 * @index:    the index of block in inode
 * @create:   BOOL, if the block isn't allocated, if create = 1 the alloc a block,  otherwise just do nothing
 * @ino_store: 0 OR the index of already inused block or new allocated block.
 */
static int
sfs_bmap_get_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, uint32_t index, bool create, uint32_t *ino_store) {
c0111746:	55                   	push   %ebp
c0111747:	89 e5                	mov    %esp,%ebp
c0111749:	83 ec 18             	sub    $0x18,%esp
    struct sfs_disk_inode *din = sin->din;
c011174c:	8b 45 0c             	mov    0xc(%ebp),%eax
c011174f:	8b 00                	mov    (%eax),%eax
c0111751:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int ret;
    uint32_t ent, ino;
	// the index of disk block is in the fist SFS_NDIRECT  direct blocks
    if (index < SFS_NDIRECT) {
c0111754:	83 7d 10 0b          	cmpl   $0xb,0x10(%ebp)
c0111758:	77 61                	ja     c01117bb <sfs_bmap_get_nolock+0x75>
        if ((ino = din->direct[index]) == 0 && create) {
c011175a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011175d:	8b 55 10             	mov    0x10(%ebp),%edx
c0111760:	8b 44 90 0c          	mov    0xc(%eax,%edx,4),%eax
c0111764:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0111767:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011176a:	85 c0                	test   %eax,%eax
c011176c:	0f 85 e8 00 00 00    	jne    c011185a <sfs_bmap_get_nolock+0x114>
c0111772:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0111776:	0f 84 de 00 00 00    	je     c011185a <sfs_bmap_get_nolock+0x114>
            if ((ret = sfs_block_alloc(sfs, &ino)) != 0) {
c011177c:	83 ec 08             	sub    $0x8,%esp
c011177f:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0111782:	50                   	push   %eax
c0111783:	ff 75 08             	pushl  0x8(%ebp)
c0111786:	e8 a1 fa ff ff       	call   c011122c <sfs_block_alloc>
c011178b:	83 c4 10             	add    $0x10,%esp
c011178e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0111791:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0111795:	74 08                	je     c011179f <sfs_bmap_get_nolock+0x59>
                return ret;
c0111797:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011179a:	e9 02 01 00 00       	jmp    c01118a1 <sfs_bmap_get_nolock+0x15b>
            }
            din->direct[index] = ino;
c011179f:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c01117a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01117a5:	8b 55 10             	mov    0x10(%ebp),%edx
c01117a8:	89 4c 90 0c          	mov    %ecx,0xc(%eax,%edx,4)
            sin->dirty = 1;
c01117ac:	8b 45 0c             	mov    0xc(%ebp),%eax
c01117af:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
        }
        goto out;
c01117b6:	e9 9f 00 00 00       	jmp    c011185a <sfs_bmap_get_nolock+0x114>
    }
    // the index of disk block is in the indirect blocks.
    index -= SFS_NDIRECT;
c01117bb:	83 6d 10 0c          	subl   $0xc,0x10(%ebp)
    if (index < SFS_BLK_NENTRY) {
c01117bf:	81 7d 10 ff 03 00 00 	cmpl   $0x3ff,0x10(%ebp)
c01117c6:	77 7b                	ja     c0111843 <sfs_bmap_get_nolock+0xfd>
        ent = din->indirect;
c01117c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01117cb:	8b 40 3c             	mov    0x3c(%eax),%eax
c01117ce:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if ((ret = sfs_bmap_get_sub_nolock(sfs, &ent, index, create, &ino)) != 0) {
c01117d1:	83 ec 0c             	sub    $0xc,%esp
c01117d4:	8d 45 e8             	lea    -0x18(%ebp),%eax
c01117d7:	50                   	push   %eax
c01117d8:	ff 75 14             	pushl  0x14(%ebp)
c01117db:	ff 75 10             	pushl  0x10(%ebp)
c01117de:	8d 45 ec             	lea    -0x14(%ebp),%eax
c01117e1:	50                   	push   %eax
c01117e2:	ff 75 08             	pushl  0x8(%ebp)
c01117e5:	e8 12 fe ff ff       	call   c01115fc <sfs_bmap_get_sub_nolock>
c01117ea:	83 c4 20             	add    $0x20,%esp
c01117ed:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01117f0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01117f4:	74 08                	je     c01117fe <sfs_bmap_get_nolock+0xb8>
            return ret;
c01117f6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01117f9:	e9 a3 00 00 00       	jmp    c01118a1 <sfs_bmap_get_nolock+0x15b>
        }
        if (ent != din->indirect) {
c01117fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111801:	8b 50 3c             	mov    0x3c(%eax),%edx
c0111804:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111807:	39 c2                	cmp    %eax,%edx
c0111809:	74 52                	je     c011185d <sfs_bmap_get_nolock+0x117>
            assert(din->indirect == 0);
c011180b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011180e:	8b 40 3c             	mov    0x3c(%eax),%eax
c0111811:	85 c0                	test   %eax,%eax
c0111813:	74 19                	je     c011182e <sfs_bmap_get_nolock+0xe8>
c0111815:	68 ce 81 11 c0       	push   $0xc01181ce
c011181a:	68 1f 81 11 c0       	push   $0xc011811f
c011181f:	68 18 01 00 00       	push   $0x118
c0111824:	68 b7 80 11 c0       	push   $0xc01180b7
c0111829:	e8 bf ec fe ff       	call   c01004ed <__panic>
            din->indirect = ent;
c011182e:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0111831:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111834:	89 50 3c             	mov    %edx,0x3c(%eax)
            sin->dirty = 1;
c0111837:	8b 45 0c             	mov    0xc(%ebp),%eax
c011183a:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
        }
        goto out;
c0111841:	eb 1a                	jmp    c011185d <sfs_bmap_get_nolock+0x117>
    } else {
		panic ("sfs_bmap_get_nolock - index out of range");
c0111843:	83 ec 04             	sub    $0x4,%esp
c0111846:	68 e4 81 11 c0       	push   $0xc01181e4
c011184b:	68 1e 01 00 00       	push   $0x11e
c0111850:	68 b7 80 11 c0       	push   $0xc01180b7
c0111855:	e8 93 ec fe ff       	call   c01004ed <__panic>
                return ret;
            }
            din->direct[index] = ino;
            sin->dirty = 1;
        }
        goto out;
c011185a:	90                   	nop
c011185b:	eb 01                	jmp    c011185e <sfs_bmap_get_nolock+0x118>
        if (ent != din->indirect) {
            assert(din->indirect == 0);
            din->indirect = ent;
            sin->dirty = 1;
        }
        goto out;
c011185d:	90                   	nop
    } else {
		panic ("sfs_bmap_get_nolock - index out of range");
	}
out:
    assert(ino == 0 || sfs_block_inuse(sfs, ino));
c011185e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111861:	85 c0                	test   %eax,%eax
c0111863:	74 2f                	je     c0111894 <sfs_bmap_get_nolock+0x14e>
c0111865:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111868:	83 ec 08             	sub    $0x8,%esp
c011186b:	50                   	push   %eax
c011186c:	ff 75 08             	pushl  0x8(%ebp)
c011186f:	e8 62 f9 ff ff       	call   c01111d6 <sfs_block_inuse>
c0111874:	83 c4 10             	add    $0x10,%esp
c0111877:	85 c0                	test   %eax,%eax
c0111879:	75 19                	jne    c0111894 <sfs_bmap_get_nolock+0x14e>
c011187b:	68 10 82 11 c0       	push   $0xc0118210
c0111880:	68 1f 81 11 c0       	push   $0xc011811f
c0111885:	68 21 01 00 00       	push   $0x121
c011188a:	68 b7 80 11 c0       	push   $0xc01180b7
c011188f:	e8 59 ec fe ff       	call   c01004ed <__panic>
    *ino_store = ino;
c0111894:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0111897:	8b 45 18             	mov    0x18(%ebp),%eax
c011189a:	89 10                	mov    %edx,(%eax)
    return 0;
c011189c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01118a1:	c9                   	leave  
c01118a2:	c3                   	ret    

c01118a3 <sfs_bmap_free_sub_nolock>:

/*
 * sfs_bmap_free_sub_nolock - set the entry item to 0 (free) in the indirect block
 */
static int
sfs_bmap_free_sub_nolock(struct sfs_fs *sfs, uint32_t ent, uint32_t index) {
c01118a3:	55                   	push   %ebp
c01118a4:	89 e5                	mov    %esp,%ebp
c01118a6:	83 ec 18             	sub    $0x18,%esp
    assert(sfs_block_inuse(sfs, ent) && index < SFS_BLK_NENTRY);
c01118a9:	83 ec 08             	sub    $0x8,%esp
c01118ac:	ff 75 0c             	pushl  0xc(%ebp)
c01118af:	ff 75 08             	pushl  0x8(%ebp)
c01118b2:	e8 1f f9 ff ff       	call   c01111d6 <sfs_block_inuse>
c01118b7:	83 c4 10             	add    $0x10,%esp
c01118ba:	85 c0                	test   %eax,%eax
c01118bc:	74 09                	je     c01118c7 <sfs_bmap_free_sub_nolock+0x24>
c01118be:	81 7d 10 ff 03 00 00 	cmpl   $0x3ff,0x10(%ebp)
c01118c5:	76 19                	jbe    c01118e0 <sfs_bmap_free_sub_nolock+0x3d>
c01118c7:	68 38 82 11 c0       	push   $0xc0118238
c01118cc:	68 1f 81 11 c0       	push   $0xc011811f
c01118d1:	68 2b 01 00 00       	push   $0x12b
c01118d6:	68 b7 80 11 c0       	push   $0xc01180b7
c01118db:	e8 0d ec fe ff       	call   c01004ed <__panic>
    int ret;
    uint32_t ino, zero = 0;
c01118e0:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
    off_t offset = index * sizeof(uint32_t);
c01118e7:	8b 45 10             	mov    0x10(%ebp),%eax
c01118ea:	c1 e0 02             	shl    $0x2,%eax
c01118ed:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if ((ret = sfs_rbuf(sfs, &ino, sizeof(uint32_t), ent, offset)) != 0) {
c01118f0:	83 ec 0c             	sub    $0xc,%esp
c01118f3:	ff 75 f4             	pushl  -0xc(%ebp)
c01118f6:	ff 75 0c             	pushl  0xc(%ebp)
c01118f9:	6a 04                	push   $0x4
c01118fb:	8d 45 ec             	lea    -0x14(%ebp),%eax
c01118fe:	50                   	push   %eax
c01118ff:	ff 75 08             	pushl  0x8(%ebp)
c0111902:	e8 6d 1b 00 00       	call   c0113474 <sfs_rbuf>
c0111907:	83 c4 20             	add    $0x20,%esp
c011190a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011190d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0111911:	74 05                	je     c0111918 <sfs_bmap_free_sub_nolock+0x75>
        return ret;
c0111913:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111916:	eb 46                	jmp    c011195e <sfs_bmap_free_sub_nolock+0xbb>
    }
    if (ino != 0) {
c0111918:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011191b:	85 c0                	test   %eax,%eax
c011191d:	74 3a                	je     c0111959 <sfs_bmap_free_sub_nolock+0xb6>
        if ((ret = sfs_wbuf(sfs, &zero, sizeof(uint32_t), ent, offset)) != 0) {
c011191f:	83 ec 0c             	sub    $0xc,%esp
c0111922:	ff 75 f4             	pushl  -0xc(%ebp)
c0111925:	ff 75 0c             	pushl  0xc(%ebp)
c0111928:	6a 04                	push   $0x4
c011192a:	8d 45 e8             	lea    -0x18(%ebp),%eax
c011192d:	50                   	push   %eax
c011192e:	ff 75 08             	pushl  0x8(%ebp)
c0111931:	e8 db 1b 00 00       	call   c0113511 <sfs_wbuf>
c0111936:	83 c4 20             	add    $0x20,%esp
c0111939:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011193c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0111940:	74 05                	je     c0111947 <sfs_bmap_free_sub_nolock+0xa4>
            return ret;
c0111942:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111945:	eb 17                	jmp    c011195e <sfs_bmap_free_sub_nolock+0xbb>
        }
        sfs_block_free(sfs, ino);
c0111947:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011194a:	83 ec 08             	sub    $0x8,%esp
c011194d:	50                   	push   %eax
c011194e:	ff 75 08             	pushl  0x8(%ebp)
c0111951:	e8 7e f9 ff ff       	call   c01112d4 <sfs_block_free>
c0111956:	83 c4 10             	add    $0x10,%esp
    }
    return 0;
c0111959:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011195e:	c9                   	leave  
c011195f:	c3                   	ret    

c0111960 <sfs_bmap_free_nolock>:

/*
 * sfs_bmap_free_nolock - free a block with logical index in inode and reset the inode's fields
 */
static int
sfs_bmap_free_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, uint32_t index) {
c0111960:	55                   	push   %ebp
c0111961:	89 e5                	mov    %esp,%ebp
c0111963:	83 ec 18             	sub    $0x18,%esp
    struct sfs_disk_inode *din = sin->din;
c0111966:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111969:	8b 00                	mov    (%eax),%eax
c011196b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int ret;
    uint32_t ent, ino;
    if (index < SFS_NDIRECT) {
c011196e:	83 7d 10 0b          	cmpl   $0xb,0x10(%ebp)
c0111972:	77 43                	ja     c01119b7 <sfs_bmap_free_nolock+0x57>
        if ((ino = din->direct[index]) != 0) {
c0111974:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111977:	8b 55 10             	mov    0x10(%ebp),%edx
c011197a:	8b 44 90 0c          	mov    0xc(%eax,%edx,4),%eax
c011197e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0111981:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0111985:	74 29                	je     c01119b0 <sfs_bmap_free_nolock+0x50>
			// free the block
            sfs_block_free(sfs, ino);
c0111987:	83 ec 08             	sub    $0x8,%esp
c011198a:	ff 75 f0             	pushl  -0x10(%ebp)
c011198d:	ff 75 08             	pushl  0x8(%ebp)
c0111990:	e8 3f f9 ff ff       	call   c01112d4 <sfs_block_free>
c0111995:	83 c4 10             	add    $0x10,%esp
            din->direct[index] = 0;
c0111998:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011199b:	8b 55 10             	mov    0x10(%ebp),%edx
c011199e:	c7 44 90 0c 00 00 00 	movl   $0x0,0xc(%eax,%edx,4)
c01119a5:	00 
            sin->dirty = 1;
c01119a6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01119a9:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
        }
        return 0;
c01119b0:	b8 00 00 00 00       	mov    $0x0,%eax
c01119b5:	eb 4a                	jmp    c0111a01 <sfs_bmap_free_nolock+0xa1>
    }

    index -= SFS_NDIRECT;
c01119b7:	83 6d 10 0c          	subl   $0xc,0x10(%ebp)
    if (index < SFS_BLK_NENTRY) {
c01119bb:	81 7d 10 ff 03 00 00 	cmpl   $0x3ff,0x10(%ebp)
c01119c2:	77 38                	ja     c01119fc <sfs_bmap_free_nolock+0x9c>
        if ((ent = din->indirect) != 0) {
c01119c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01119c7:	8b 40 3c             	mov    0x3c(%eax),%eax
c01119ca:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01119cd:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01119d1:	74 22                	je     c01119f5 <sfs_bmap_free_nolock+0x95>
			// set the entry item to 0 in the indirect block
            if ((ret = sfs_bmap_free_sub_nolock(sfs, ent, index)) != 0) {
c01119d3:	83 ec 04             	sub    $0x4,%esp
c01119d6:	ff 75 10             	pushl  0x10(%ebp)
c01119d9:	ff 75 ec             	pushl  -0x14(%ebp)
c01119dc:	ff 75 08             	pushl  0x8(%ebp)
c01119df:	e8 bf fe ff ff       	call   c01118a3 <sfs_bmap_free_sub_nolock>
c01119e4:	83 c4 10             	add    $0x10,%esp
c01119e7:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01119ea:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01119ee:	74 05                	je     c01119f5 <sfs_bmap_free_nolock+0x95>
                return ret;
c01119f0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01119f3:	eb 0c                	jmp    c0111a01 <sfs_bmap_free_nolock+0xa1>
            }
        }
        return 0;
c01119f5:	b8 00 00 00 00       	mov    $0x0,%eax
c01119fa:	eb 05                	jmp    c0111a01 <sfs_bmap_free_nolock+0xa1>
    }
    return 0;
c01119fc:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0111a01:	c9                   	leave  
c0111a02:	c3                   	ret    

c0111a03 <sfs_bmap_load_nolock>:
 * @sin:      sfs inode in memory
 * @index:    the logical index of disk block in inode
 * @ino_store:the NO. of disk block
 */
static int
sfs_bmap_load_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, uint32_t index, uint32_t *ino_store) {
c0111a03:	55                   	push   %ebp
c0111a04:	89 e5                	mov    %esp,%ebp
c0111a06:	83 ec 18             	sub    $0x18,%esp
    struct sfs_disk_inode *din = sin->din;
c0111a09:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111a0c:	8b 00                	mov    (%eax),%eax
c0111a0e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(index <= din->blocks);
c0111a11:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111a14:	8b 40 08             	mov    0x8(%eax),%eax
c0111a17:	3b 45 10             	cmp    0x10(%ebp),%eax
c0111a1a:	73 19                	jae    c0111a35 <sfs_bmap_load_nolock+0x32>
c0111a1c:	68 6c 82 11 c0       	push   $0xc011826c
c0111a21:	68 1f 81 11 c0       	push   $0xc011811f
c0111a26:	68 64 01 00 00       	push   $0x164
c0111a2b:	68 b7 80 11 c0       	push   $0xc01180b7
c0111a30:	e8 b8 ea fe ff       	call   c01004ed <__panic>
    int ret;
    uint32_t ino;
    bool create = (index == din->blocks);
c0111a35:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111a38:	8b 40 08             	mov    0x8(%eax),%eax
c0111a3b:	3b 45 10             	cmp    0x10(%ebp),%eax
c0111a3e:	0f 94 c0             	sete   %al
c0111a41:	0f b6 c0             	movzbl %al,%eax
c0111a44:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = sfs_bmap_get_nolock(sfs, sin, index, create, &ino)) != 0) {
c0111a47:	83 ec 0c             	sub    $0xc,%esp
c0111a4a:	8d 45 e8             	lea    -0x18(%ebp),%eax
c0111a4d:	50                   	push   %eax
c0111a4e:	ff 75 f0             	pushl  -0x10(%ebp)
c0111a51:	ff 75 10             	pushl  0x10(%ebp)
c0111a54:	ff 75 0c             	pushl  0xc(%ebp)
c0111a57:	ff 75 08             	pushl  0x8(%ebp)
c0111a5a:	e8 e7 fc ff ff       	call   c0111746 <sfs_bmap_get_nolock>
c0111a5f:	83 c4 20             	add    $0x20,%esp
c0111a62:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0111a65:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0111a69:	74 05                	je     c0111a70 <sfs_bmap_load_nolock+0x6d>
        return ret;
c0111a6b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111a6e:	eb 57                	jmp    c0111ac7 <sfs_bmap_load_nolock+0xc4>
    }
    assert(sfs_block_inuse(sfs, ino));
c0111a70:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111a73:	83 ec 08             	sub    $0x8,%esp
c0111a76:	50                   	push   %eax
c0111a77:	ff 75 08             	pushl  0x8(%ebp)
c0111a7a:	e8 57 f7 ff ff       	call   c01111d6 <sfs_block_inuse>
c0111a7f:	83 c4 10             	add    $0x10,%esp
c0111a82:	85 c0                	test   %eax,%eax
c0111a84:	75 19                	jne    c0111a9f <sfs_bmap_load_nolock+0x9c>
c0111a86:	68 55 81 11 c0       	push   $0xc0118155
c0111a8b:	68 1f 81 11 c0       	push   $0xc011811f
c0111a90:	68 6b 01 00 00       	push   $0x16b
c0111a95:	68 b7 80 11 c0       	push   $0xc01180b7
c0111a9a:	e8 4e ea fe ff       	call   c01004ed <__panic>
    if (create) {
c0111a9f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0111aa3:	74 0f                	je     c0111ab4 <sfs_bmap_load_nolock+0xb1>
        din->blocks ++;
c0111aa5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111aa8:	8b 40 08             	mov    0x8(%eax),%eax
c0111aab:	8d 50 01             	lea    0x1(%eax),%edx
c0111aae:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111ab1:	89 50 08             	mov    %edx,0x8(%eax)
    }
    if (ino_store != NULL) {
c0111ab4:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0111ab8:	74 08                	je     c0111ac2 <sfs_bmap_load_nolock+0xbf>
        *ino_store = ino;
c0111aba:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0111abd:	8b 45 14             	mov    0x14(%ebp),%eax
c0111ac0:	89 10                	mov    %edx,(%eax)
    }
    return 0;
c0111ac2:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0111ac7:	c9                   	leave  
c0111ac8:	c3                   	ret    

c0111ac9 <sfs_bmap_truncate_nolock>:

/*
 * sfs_bmap_truncate_nolock - free the disk block at the end of file
 */
static int
sfs_bmap_truncate_nolock(struct sfs_fs *sfs, struct sfs_inode *sin) {
c0111ac9:	55                   	push   %ebp
c0111aca:	89 e5                	mov    %esp,%ebp
c0111acc:	83 ec 18             	sub    $0x18,%esp
    struct sfs_disk_inode *din = sin->din;
c0111acf:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111ad2:	8b 00                	mov    (%eax),%eax
c0111ad4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(din->blocks != 0);
c0111ad7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111ada:	8b 40 08             	mov    0x8(%eax),%eax
c0111add:	85 c0                	test   %eax,%eax
c0111adf:	75 19                	jne    c0111afa <sfs_bmap_truncate_nolock+0x31>
c0111ae1:	68 81 82 11 c0       	push   $0xc0118281
c0111ae6:	68 1f 81 11 c0       	push   $0xc011811f
c0111aeb:	68 7b 01 00 00       	push   $0x17b
c0111af0:	68 b7 80 11 c0       	push   $0xc01180b7
c0111af5:	e8 f3 e9 fe ff       	call   c01004ed <__panic>
    int ret;
    if ((ret = sfs_bmap_free_nolock(sfs, sin, din->blocks - 1)) != 0) {
c0111afa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111afd:	8b 40 08             	mov    0x8(%eax),%eax
c0111b00:	83 e8 01             	sub    $0x1,%eax
c0111b03:	83 ec 04             	sub    $0x4,%esp
c0111b06:	50                   	push   %eax
c0111b07:	ff 75 0c             	pushl  0xc(%ebp)
c0111b0a:	ff 75 08             	pushl  0x8(%ebp)
c0111b0d:	e8 4e fe ff ff       	call   c0111960 <sfs_bmap_free_nolock>
c0111b12:	83 c4 10             	add    $0x10,%esp
c0111b15:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0111b18:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0111b1c:	74 05                	je     c0111b23 <sfs_bmap_truncate_nolock+0x5a>
        return ret;
c0111b1e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111b21:	eb 1e                	jmp    c0111b41 <sfs_bmap_truncate_nolock+0x78>
    }
    din->blocks --;
c0111b23:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111b26:	8b 40 08             	mov    0x8(%eax),%eax
c0111b29:	8d 50 ff             	lea    -0x1(%eax),%edx
c0111b2c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111b2f:	89 50 08             	mov    %edx,0x8(%eax)
    sin->dirty = 1;
c0111b32:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111b35:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
    return 0;
c0111b3c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0111b41:	c9                   	leave  
c0111b42:	c3                   	ret    

c0111b43 <sfs_dirent_read_nolock>:
 * @sin:      sfs inode in memory
 * @slot:     the index of file entry
 * @entry:    file entry
 */
static int
sfs_dirent_read_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, int slot, struct sfs_disk_entry *entry) {
c0111b43:	55                   	push   %ebp
c0111b44:	89 e5                	mov    %esp,%ebp
c0111b46:	83 ec 18             	sub    $0x18,%esp
    assert(sin->din->type == SFS_TYPE_DIR && (slot >= 0 && slot < sin->din->blocks));
c0111b49:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111b4c:	8b 00                	mov    (%eax),%eax
c0111b4e:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c0111b52:	66 83 f8 02          	cmp    $0x2,%ax
c0111b56:	75 15                	jne    c0111b6d <sfs_dirent_read_nolock+0x2a>
c0111b58:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0111b5c:	78 0f                	js     c0111b6d <sfs_dirent_read_nolock+0x2a>
c0111b5e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111b61:	8b 00                	mov    (%eax),%eax
c0111b63:	8b 50 08             	mov    0x8(%eax),%edx
c0111b66:	8b 45 10             	mov    0x10(%ebp),%eax
c0111b69:	39 c2                	cmp    %eax,%edx
c0111b6b:	77 19                	ja     c0111b86 <sfs_dirent_read_nolock+0x43>
c0111b6d:	68 94 82 11 c0       	push   $0xc0118294
c0111b72:	68 1f 81 11 c0       	push   $0xc011811f
c0111b77:	68 8e 01 00 00       	push   $0x18e
c0111b7c:	68 b7 80 11 c0       	push   $0xc01180b7
c0111b81:	e8 67 e9 fe ff       	call   c01004ed <__panic>
    int ret;
    uint32_t ino;
	// according to the DIR's inode and the slot of file entry, find the index of disk block which contains this file entry
    if ((ret = sfs_bmap_load_nolock(sfs, sin, slot, &ino)) != 0) {
c0111b86:	8b 45 10             	mov    0x10(%ebp),%eax
c0111b89:	8d 55 f0             	lea    -0x10(%ebp),%edx
c0111b8c:	52                   	push   %edx
c0111b8d:	50                   	push   %eax
c0111b8e:	ff 75 0c             	pushl  0xc(%ebp)
c0111b91:	ff 75 08             	pushl  0x8(%ebp)
c0111b94:	e8 6a fe ff ff       	call   c0111a03 <sfs_bmap_load_nolock>
c0111b99:	83 c4 10             	add    $0x10,%esp
c0111b9c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111b9f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111ba3:	74 05                	je     c0111baa <sfs_dirent_read_nolock+0x67>
        return ret;
c0111ba5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111ba8:	eb 68                	jmp    c0111c12 <sfs_dirent_read_nolock+0xcf>
    }
    assert(sfs_block_inuse(sfs, ino));
c0111baa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111bad:	83 ec 08             	sub    $0x8,%esp
c0111bb0:	50                   	push   %eax
c0111bb1:	ff 75 08             	pushl  0x8(%ebp)
c0111bb4:	e8 1d f6 ff ff       	call   c01111d6 <sfs_block_inuse>
c0111bb9:	83 c4 10             	add    $0x10,%esp
c0111bbc:	85 c0                	test   %eax,%eax
c0111bbe:	75 19                	jne    c0111bd9 <sfs_dirent_read_nolock+0x96>
c0111bc0:	68 55 81 11 c0       	push   $0xc0118155
c0111bc5:	68 1f 81 11 c0       	push   $0xc011811f
c0111bca:	68 95 01 00 00       	push   $0x195
c0111bcf:	68 b7 80 11 c0       	push   $0xc01180b7
c0111bd4:	e8 14 e9 fe ff       	call   c01004ed <__panic>
	// read the content of file entry in the disk block 
    if ((ret = sfs_rbuf(sfs, entry, sizeof(struct sfs_disk_entry), ino, 0)) != 0) {
c0111bd9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111bdc:	83 ec 0c             	sub    $0xc,%esp
c0111bdf:	6a 00                	push   $0x0
c0111be1:	50                   	push   %eax
c0111be2:	68 04 01 00 00       	push   $0x104
c0111be7:	ff 75 14             	pushl  0x14(%ebp)
c0111bea:	ff 75 08             	pushl  0x8(%ebp)
c0111bed:	e8 82 18 00 00       	call   c0113474 <sfs_rbuf>
c0111bf2:	83 c4 20             	add    $0x20,%esp
c0111bf5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111bf8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111bfc:	74 05                	je     c0111c03 <sfs_dirent_read_nolock+0xc0>
        return ret;
c0111bfe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111c01:	eb 0f                	jmp    c0111c12 <sfs_dirent_read_nolock+0xcf>
    }
    entry->name[SFS_MAX_FNAME_LEN] = '\0';
c0111c03:	8b 45 14             	mov    0x14(%ebp),%eax
c0111c06:	c6 80 03 01 00 00 00 	movb   $0x0,0x103(%eax)
    return 0;
c0111c0d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0111c12:	c9                   	leave  
c0111c13:	c3                   	ret    

c0111c14 <sfs_dirent_search_nolock>:
 * @ino_store:  NO. of disk of this file (with the filename)'s inode
 * @slot:       logical index of file entry (NOTICE: each file entry ocupied one  disk block)
 * @empty_slot: the empty logical index of file entry.
 */
static int
sfs_dirent_search_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, const char *name, uint32_t *ino_store, int *slot, int *empty_slot) {
c0111c14:	55                   	push   %ebp
c0111c15:	89 e5                	mov    %esp,%ebp
c0111c17:	83 ec 18             	sub    $0x18,%esp
    assert(strlen(name) <= SFS_MAX_FNAME_LEN);
c0111c1a:	83 ec 0c             	sub    $0xc,%esp
c0111c1d:	ff 75 10             	pushl  0x10(%ebp)
c0111c20:	e8 e3 1a 00 00       	call   c0113708 <strlen>
c0111c25:	83 c4 10             	add    $0x10,%esp
c0111c28:	3d ff 00 00 00       	cmp    $0xff,%eax
c0111c2d:	76 19                	jbe    c0111c48 <sfs_dirent_search_nolock+0x34>
c0111c2f:	68 e0 82 11 c0       	push   $0xc01182e0
c0111c34:	68 1f 81 11 c0       	push   $0xc011811f
c0111c39:	68 ba 01 00 00       	push   $0x1ba
c0111c3e:	68 b7 80 11 c0       	push   $0xc01180b7
c0111c43:	e8 a5 e8 fe ff       	call   c01004ed <__panic>
    struct sfs_disk_entry *entry;
    if ((entry = kmalloc(sizeof(struct sfs_disk_entry))) == NULL) {
c0111c48:	83 ec 0c             	sub    $0xc,%esp
c0111c4b:	68 04 01 00 00       	push   $0x104
c0111c50:	e8 ad 36 ff ff       	call   c0105302 <kmalloc>
c0111c55:	83 c4 10             	add    $0x10,%esp
c0111c58:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0111c5b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0111c5f:	75 0a                	jne    c0111c6b <sfs_dirent_search_nolock+0x57>
        return -E_NO_MEM;
c0111c61:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0111c66:	e9 bc 00 00 00       	jmp    c0111d27 <sfs_dirent_search_nolock+0x113>
    }

#define set_pvalue(x, v)            do { if ((x) != NULL) { *(x) = (v); } } while (0)
    int ret, i, nslots = sin->din->blocks;
c0111c6b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111c6e:	8b 00                	mov    (%eax),%eax
c0111c70:	8b 40 08             	mov    0x8(%eax),%eax
c0111c73:	89 45 e8             	mov    %eax,-0x18(%ebp)
    set_pvalue(empty_slot, nslots);
c0111c76:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c0111c7a:	74 08                	je     c0111c84 <sfs_dirent_search_nolock+0x70>
c0111c7c:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0111c7f:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0111c82:	89 10                	mov    %edx,(%eax)
    for (i = 0; i < nslots; i ++) {
c0111c84:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0111c8b:	eb 74                	jmp    c0111d01 <sfs_dirent_search_nolock+0xed>
        if ((ret = sfs_dirent_read_nolock(sfs, sin, i, entry)) != 0) {
c0111c8d:	ff 75 ec             	pushl  -0x14(%ebp)
c0111c90:	ff 75 f0             	pushl  -0x10(%ebp)
c0111c93:	ff 75 0c             	pushl  0xc(%ebp)
c0111c96:	ff 75 08             	pushl  0x8(%ebp)
c0111c99:	e8 a5 fe ff ff       	call   c0111b43 <sfs_dirent_read_nolock>
c0111c9e:	83 c4 10             	add    $0x10,%esp
c0111ca1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111ca4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111ca8:	75 68                	jne    c0111d12 <sfs_dirent_search_nolock+0xfe>
            goto out;
        }
        if (entry->ino == 0) {
c0111caa:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111cad:	8b 00                	mov    (%eax),%eax
c0111caf:	85 c0                	test   %eax,%eax
c0111cb1:	75 10                	jne    c0111cc3 <sfs_dirent_search_nolock+0xaf>
            set_pvalue(empty_slot, i);
c0111cb3:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c0111cb7:	74 43                	je     c0111cfc <sfs_dirent_search_nolock+0xe8>
c0111cb9:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0111cbc:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0111cbf:	89 10                	mov    %edx,(%eax)
            continue ;
c0111cc1:	eb 39                	jmp    c0111cfc <sfs_dirent_search_nolock+0xe8>
        }
        if (strcmp(name, entry->name) == 0) {
c0111cc3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111cc6:	83 c0 04             	add    $0x4,%eax
c0111cc9:	83 ec 08             	sub    $0x8,%esp
c0111ccc:	50                   	push   %eax
c0111ccd:	ff 75 10             	pushl  0x10(%ebp)
c0111cd0:	e8 2e 1b 00 00       	call   c0113803 <strcmp>
c0111cd5:	83 c4 10             	add    $0x10,%esp
c0111cd8:	85 c0                	test   %eax,%eax
c0111cda:	75 21                	jne    c0111cfd <sfs_dirent_search_nolock+0xe9>
            set_pvalue(slot, i);
c0111cdc:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0111ce0:	74 08                	je     c0111cea <sfs_dirent_search_nolock+0xd6>
c0111ce2:	8b 45 18             	mov    0x18(%ebp),%eax
c0111ce5:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0111ce8:	89 10                	mov    %edx,(%eax)
            set_pvalue(ino_store, entry->ino);
c0111cea:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0111cee:	74 25                	je     c0111d15 <sfs_dirent_search_nolock+0x101>
c0111cf0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111cf3:	8b 10                	mov    (%eax),%edx
c0111cf5:	8b 45 14             	mov    0x14(%ebp),%eax
c0111cf8:	89 10                	mov    %edx,(%eax)
            goto out;
c0111cfa:	eb 19                	jmp    c0111d15 <sfs_dirent_search_nolock+0x101>
        if ((ret = sfs_dirent_read_nolock(sfs, sin, i, entry)) != 0) {
            goto out;
        }
        if (entry->ino == 0) {
            set_pvalue(empty_slot, i);
            continue ;
c0111cfc:	90                   	nop
    }

#define set_pvalue(x, v)            do { if ((x) != NULL) { *(x) = (v); } } while (0)
    int ret, i, nslots = sin->din->blocks;
    set_pvalue(empty_slot, nslots);
    for (i = 0; i < nslots; i ++) {
c0111cfd:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c0111d01:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111d04:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c0111d07:	7c 84                	jl     c0111c8d <sfs_dirent_search_nolock+0x79>
            set_pvalue(ino_store, entry->ino);
            goto out;
        }
    }
#undef set_pvalue
    ret = -E_NOENT;
c0111d09:	c7 45 f4 f0 ff ff ff 	movl   $0xfffffff0,-0xc(%ebp)
c0111d10:	eb 04                	jmp    c0111d16 <sfs_dirent_search_nolock+0x102>
#define set_pvalue(x, v)            do { if ((x) != NULL) { *(x) = (v); } } while (0)
    int ret, i, nslots = sin->din->blocks;
    set_pvalue(empty_slot, nslots);
    for (i = 0; i < nslots; i ++) {
        if ((ret = sfs_dirent_read_nolock(sfs, sin, i, entry)) != 0) {
            goto out;
c0111d12:	90                   	nop
c0111d13:	eb 01                	jmp    c0111d16 <sfs_dirent_search_nolock+0x102>
            continue ;
        }
        if (strcmp(name, entry->name) == 0) {
            set_pvalue(slot, i);
            set_pvalue(ino_store, entry->ino);
            goto out;
c0111d15:	90                   	nop
        }
    }
#undef set_pvalue
    ret = -E_NOENT;
out:
    kfree(entry);
c0111d16:	83 ec 0c             	sub    $0xc,%esp
c0111d19:	ff 75 ec             	pushl  -0x14(%ebp)
c0111d1c:	e8 f9 35 ff ff       	call   c010531a <kfree>
c0111d21:	83 c4 10             	add    $0x10,%esp
    return ret;
c0111d24:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0111d27:	c9                   	leave  
c0111d28:	c3                   	ret    

c0111d29 <sfs_dirent_findino_nolock>:
/*
 * sfs_dirent_findino_nolock - read all file entries in DIR's inode and find a entry->ino == ino
 */

static int
sfs_dirent_findino_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, uint32_t ino, struct sfs_disk_entry *entry) {
c0111d29:	55                   	push   %ebp
c0111d2a:	89 e5                	mov    %esp,%ebp
c0111d2c:	83 ec 18             	sub    $0x18,%esp
    int ret, i, nslots = sin->din->blocks;
c0111d2f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111d32:	8b 00                	mov    (%eax),%eax
c0111d34:	8b 40 08             	mov    0x8(%eax),%eax
c0111d37:	89 45 f0             	mov    %eax,-0x10(%ebp)
    for (i = 0; i < nslots; i ++) {
c0111d3a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0111d41:	eb 37                	jmp    c0111d7a <sfs_dirent_findino_nolock+0x51>
        if ((ret = sfs_dirent_read_nolock(sfs, sin, i, entry)) != 0) {
c0111d43:	ff 75 14             	pushl  0x14(%ebp)
c0111d46:	ff 75 f4             	pushl  -0xc(%ebp)
c0111d49:	ff 75 0c             	pushl  0xc(%ebp)
c0111d4c:	ff 75 08             	pushl  0x8(%ebp)
c0111d4f:	e8 ef fd ff ff       	call   c0111b43 <sfs_dirent_read_nolock>
c0111d54:	83 c4 10             	add    $0x10,%esp
c0111d57:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0111d5a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0111d5e:	74 05                	je     c0111d65 <sfs_dirent_findino_nolock+0x3c>
            return ret;
c0111d60:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111d63:	eb 22                	jmp    c0111d87 <sfs_dirent_findino_nolock+0x5e>
        }
        if (entry->ino == ino) {
c0111d65:	8b 45 14             	mov    0x14(%ebp),%eax
c0111d68:	8b 00                	mov    (%eax),%eax
c0111d6a:	3b 45 10             	cmp    0x10(%ebp),%eax
c0111d6d:	75 07                	jne    c0111d76 <sfs_dirent_findino_nolock+0x4d>
            return 0;
c0111d6f:	b8 00 00 00 00       	mov    $0x0,%eax
c0111d74:	eb 11                	jmp    c0111d87 <sfs_dirent_findino_nolock+0x5e>
 */

static int
sfs_dirent_findino_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, uint32_t ino, struct sfs_disk_entry *entry) {
    int ret, i, nslots = sin->din->blocks;
    for (i = 0; i < nslots; i ++) {
c0111d76:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0111d7a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111d7d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0111d80:	7c c1                	jl     c0111d43 <sfs_dirent_findino_nolock+0x1a>
        }
        if (entry->ino == ino) {
            return 0;
        }
    }
    return -E_NOENT;
c0111d82:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
c0111d87:	c9                   	leave  
c0111d88:	c3                   	ret    

c0111d89 <sfs_lookup_once>:
 * @name:       the file name in DIR
 * @node_store: the inode corresponding the file name in DIR
 * @slot:       the logical index of file entry
 */
static int
sfs_lookup_once(struct sfs_fs *sfs, struct sfs_inode *sin, const char *name, struct inode **node_store, int *slot) {
c0111d89:	55                   	push   %ebp
c0111d8a:	89 e5                	mov    %esp,%ebp
c0111d8c:	83 ec 18             	sub    $0x18,%esp
    int ret;
    uint32_t ino;
    lock_sin(sin);
c0111d8f:	83 ec 0c             	sub    $0xc,%esp
c0111d92:	ff 75 0c             	pushl  0xc(%ebp)
c0111d95:	e8 75 f2 ff ff       	call   c011100f <lock_sin>
c0111d9a:	83 c4 10             	add    $0x10,%esp
    {   // find the NO. of disk block and logical index of file entry
        ret = sfs_dirent_search_nolock(sfs, sin, name, &ino, slot, NULL);
c0111d9d:	83 ec 08             	sub    $0x8,%esp
c0111da0:	6a 00                	push   $0x0
c0111da2:	ff 75 18             	pushl  0x18(%ebp)
c0111da5:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0111da8:	50                   	push   %eax
c0111da9:	ff 75 10             	pushl  0x10(%ebp)
c0111dac:	ff 75 0c             	pushl  0xc(%ebp)
c0111daf:	ff 75 08             	pushl  0x8(%ebp)
c0111db2:	e8 5d fe ff ff       	call   c0111c14 <sfs_dirent_search_nolock>
c0111db7:	83 c4 20             	add    $0x20,%esp
c0111dba:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    unlock_sin(sin);
c0111dbd:	83 ec 0c             	sub    $0xc,%esp
c0111dc0:	ff 75 0c             	pushl  0xc(%ebp)
c0111dc3:	e8 62 f2 ff ff       	call   c011102a <unlock_sin>
c0111dc8:	83 c4 10             	add    $0x10,%esp
    if (ret == 0) {
c0111dcb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111dcf:	75 18                	jne    c0111de9 <sfs_lookup_once+0x60>
		// load the content of inode with the the NO. of disk block
        ret = sfs_load_inode(sfs, node_store, ino);
c0111dd1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111dd4:	83 ec 04             	sub    $0x4,%esp
c0111dd7:	50                   	push   %eax
c0111dd8:	ff 75 14             	pushl  0x14(%ebp)
c0111ddb:	ff 75 08             	pushl  0x8(%ebp)
c0111dde:	e8 a3 f6 ff ff       	call   c0111486 <sfs_load_inode>
c0111de3:	83 c4 10             	add    $0x10,%esp
c0111de6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    return ret;
c0111de9:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0111dec:	c9                   	leave  
c0111ded:	c3                   	ret    

c0111dee <sfs_opendir>:

// sfs_opendir - just check the opne_flags, now support readonly
static int
sfs_opendir(struct inode *node, uint32_t open_flags) {
c0111dee:	55                   	push   %ebp
c0111def:	89 e5                	mov    %esp,%ebp
    switch (open_flags & O_ACCMODE) {
c0111df1:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111df4:	83 e0 03             	and    $0x3,%eax
c0111df7:	85 c0                	test   %eax,%eax
c0111df9:	74 07                	je     c0111e02 <sfs_opendir+0x14>
    case O_RDONLY:
        break;
    case O_WRONLY:
    case O_RDWR:
    default:
        return -E_ISDIR;
c0111dfb:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
c0111e00:	eb 17                	jmp    c0111e19 <sfs_opendir+0x2b>
// sfs_opendir - just check the opne_flags, now support readonly
static int
sfs_opendir(struct inode *node, uint32_t open_flags) {
    switch (open_flags & O_ACCMODE) {
    case O_RDONLY:
        break;
c0111e02:	90                   	nop
    case O_WRONLY:
    case O_RDWR:
    default:
        return -E_ISDIR;
    }
    if (open_flags & O_APPEND) {
c0111e03:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111e06:	83 e0 20             	and    $0x20,%eax
c0111e09:	85 c0                	test   %eax,%eax
c0111e0b:	74 07                	je     c0111e14 <sfs_opendir+0x26>
        return -E_ISDIR;
c0111e0d:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
c0111e12:	eb 05                	jmp    c0111e19 <sfs_opendir+0x2b>
    }
    return 0;
c0111e14:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0111e19:	5d                   	pop    %ebp
c0111e1a:	c3                   	ret    

c0111e1b <sfs_openfile>:

// sfs_openfile - open file (no use)
static int
sfs_openfile(struct inode *node, uint32_t open_flags) {
c0111e1b:	55                   	push   %ebp
c0111e1c:	89 e5                	mov    %esp,%ebp
    return 0;
c0111e1e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0111e23:	5d                   	pop    %ebp
c0111e24:	c3                   	ret    

c0111e25 <sfs_close>:

// sfs_close - close file
static int
sfs_close(struct inode *node) {
c0111e25:	55                   	push   %ebp
c0111e26:	89 e5                	mov    %esp,%ebp
c0111e28:	83 ec 18             	sub    $0x18,%esp
    return vop_fsync(node);
c0111e2b:	8b 45 08             	mov    0x8(%ebp),%eax
c0111e2e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111e31:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111e35:	74 17                	je     c0111e4e <sfs_close+0x29>
c0111e37:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111e3a:	8b 40 3c             	mov    0x3c(%eax),%eax
c0111e3d:	85 c0                	test   %eax,%eax
c0111e3f:	74 0d                	je     c0111e4e <sfs_close+0x29>
c0111e41:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111e44:	8b 40 3c             	mov    0x3c(%eax),%eax
c0111e47:	8b 40 18             	mov    0x18(%eax),%eax
c0111e4a:	85 c0                	test   %eax,%eax
c0111e4c:	75 19                	jne    c0111e67 <sfs_close+0x42>
c0111e4e:	68 04 83 11 c0       	push   $0xc0118304
c0111e53:	68 1f 81 11 c0       	push   $0xc011811f
c0111e58:	68 1c 02 00 00       	push   $0x21c
c0111e5d:	68 b7 80 11 c0       	push   $0xc01180b7
c0111e62:	e8 86 e6 fe ff       	call   c01004ed <__panic>
c0111e67:	83 ec 08             	sub    $0x8,%esp
c0111e6a:	68 52 83 11 c0       	push   $0xc0118352
c0111e6f:	ff 75 f4             	pushl  -0xc(%ebp)
c0111e72:	e8 b6 d6 ff ff       	call   c010f52d <inode_check>
c0111e77:	83 c4 10             	add    $0x10,%esp
c0111e7a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111e7d:	8b 40 3c             	mov    0x3c(%eax),%eax
c0111e80:	8b 40 18             	mov    0x18(%eax),%eax
c0111e83:	83 ec 0c             	sub    $0xc,%esp
c0111e86:	ff 75 08             	pushl  0x8(%ebp)
c0111e89:	ff d0                	call   *%eax
c0111e8b:	83 c4 10             	add    $0x10,%esp
}
c0111e8e:	c9                   	leave  
c0111e8f:	c3                   	ret    

c0111e90 <sfs_io_nolock>:
 * @offset:   the offset of file
 * @alenp:    the length need to read (is a pointer). and will RETURN the really Rd/Wr lenght
 * @write:    BOOL, 0 read, 1 write
 */
static int
sfs_io_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, void *buf, off_t offset, size_t *alenp, bool write) {
c0111e90:	55                   	push   %ebp
c0111e91:	89 e5                	mov    %esp,%ebp
c0111e93:	83 ec 38             	sub    $0x38,%esp
    struct sfs_disk_inode *din = sin->din;
c0111e96:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111e99:	8b 00                	mov    (%eax),%eax
c0111e9b:	89 45 d8             	mov    %eax,-0x28(%ebp)
    assert(din->type != SFS_TYPE_DIR);
c0111e9e:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0111ea1:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c0111ea5:	66 83 f8 02          	cmp    $0x2,%ax
c0111ea9:	75 19                	jne    c0111ec4 <sfs_io_nolock+0x34>
c0111eab:	68 58 83 11 c0       	push   $0xc0118358
c0111eb0:	68 1f 81 11 c0       	push   $0xc011811f
c0111eb5:	68 2b 02 00 00       	push   $0x22b
c0111eba:	68 b7 80 11 c0       	push   $0xc01180b7
c0111ebf:	e8 29 e6 fe ff       	call   c01004ed <__panic>
    off_t endpos = offset + *alenp, blkoff;
c0111ec4:	8b 45 18             	mov    0x18(%ebp),%eax
c0111ec7:	8b 10                	mov    (%eax),%edx
c0111ec9:	8b 45 14             	mov    0x14(%ebp),%eax
c0111ecc:	01 d0                	add    %edx,%eax
c0111ece:	89 45 f4             	mov    %eax,-0xc(%ebp)
    *alenp = 0;
c0111ed1:	8b 45 18             	mov    0x18(%ebp),%eax
c0111ed4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	// calculate the Rd/Wr end position
    if (offset < 0 || offset >= SFS_MAX_FILE_SIZE || offset > endpos) {
c0111eda:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0111ede:	78 12                	js     c0111ef2 <sfs_io_nolock+0x62>
c0111ee0:	8b 45 14             	mov    0x14(%ebp),%eax
c0111ee3:	3d ff ff ff 07       	cmp    $0x7ffffff,%eax
c0111ee8:	77 08                	ja     c0111ef2 <sfs_io_nolock+0x62>
c0111eea:	8b 45 14             	mov    0x14(%ebp),%eax
c0111eed:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0111ef0:	7e 0a                	jle    c0111efc <sfs_io_nolock+0x6c>
        return -E_INVAL;
c0111ef2:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0111ef7:	e9 60 02 00 00       	jmp    c011215c <sfs_io_nolock+0x2cc>
    }
    if (offset == endpos) {
c0111efc:	8b 45 14             	mov    0x14(%ebp),%eax
c0111eff:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0111f02:	75 0a                	jne    c0111f0e <sfs_io_nolock+0x7e>
        return 0;
c0111f04:	b8 00 00 00 00       	mov    $0x0,%eax
c0111f09:	e9 4e 02 00 00       	jmp    c011215c <sfs_io_nolock+0x2cc>
    }
    if (endpos > SFS_MAX_FILE_SIZE) {
c0111f0e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111f11:	3d 00 00 00 08       	cmp    $0x8000000,%eax
c0111f16:	76 07                	jbe    c0111f1f <sfs_io_nolock+0x8f>
        endpos = SFS_MAX_FILE_SIZE;
c0111f18:	c7 45 f4 00 00 00 08 	movl   $0x8000000,-0xc(%ebp)
    }
    if (!write) {
c0111f1f:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c0111f23:	75 2a                	jne    c0111f4f <sfs_io_nolock+0xbf>
        if (offset >= din->size) {
c0111f25:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0111f28:	8b 10                	mov    (%eax),%edx
c0111f2a:	8b 45 14             	mov    0x14(%ebp),%eax
c0111f2d:	39 c2                	cmp    %eax,%edx
c0111f2f:	77 0a                	ja     c0111f3b <sfs_io_nolock+0xab>
            return 0;
c0111f31:	b8 00 00 00 00       	mov    $0x0,%eax
c0111f36:	e9 21 02 00 00       	jmp    c011215c <sfs_io_nolock+0x2cc>
        }
        if (endpos > din->size) {
c0111f3b:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0111f3e:	8b 10                	mov    (%eax),%edx
c0111f40:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111f43:	39 c2                	cmp    %eax,%edx
c0111f45:	73 08                	jae    c0111f4f <sfs_io_nolock+0xbf>
            endpos = din->size;
c0111f47:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0111f4a:	8b 00                	mov    (%eax),%eax
c0111f4c:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
    }

    int (*sfs_buf_op)(struct sfs_fs *sfs, void *buf, size_t len, uint32_t blkno, off_t offset);
    int (*sfs_block_op)(struct sfs_fs *sfs, void *buf, uint32_t blkno, uint32_t nblks);
    if (write) {
c0111f4f:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c0111f53:	74 10                	je     c0111f65 <sfs_io_nolock+0xd5>
        sfs_buf_op = sfs_wbuf, sfs_block_op = sfs_wblock;
c0111f55:	c7 45 f0 11 35 11 c0 	movl   $0xc0113511,-0x10(%ebp)
c0111f5c:	c7 45 ec 53 34 11 c0 	movl   $0xc0113453,-0x14(%ebp)
c0111f63:	eb 0e                	jmp    c0111f73 <sfs_io_nolock+0xe3>
    }
    else {
        sfs_buf_op = sfs_rbuf, sfs_block_op = sfs_rblock;
c0111f65:	c7 45 f0 74 34 11 c0 	movl   $0xc0113474,-0x10(%ebp)
c0111f6c:	c7 45 ec 32 34 11 c0 	movl   $0xc0113432,-0x14(%ebp)
    }

    int ret = 0;
c0111f73:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
    size_t size, alen = 0;
c0111f7a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    uint32_t ino;
    uint32_t blkno = offset / SFS_BLKSIZE;          // The NO. of Rd/Wr begin block
c0111f81:	8b 45 14             	mov    0x14(%ebp),%eax
c0111f84:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
c0111f8a:	85 c0                	test   %eax,%eax
c0111f8c:	0f 48 c2             	cmovs  %edx,%eax
c0111f8f:	c1 f8 0c             	sar    $0xc,%eax
c0111f92:	89 45 e0             	mov    %eax,-0x20(%ebp)
    uint32_t nblks = endpos / SFS_BLKSIZE - blkno;  // The size of Rd/Wr blocks
c0111f95:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111f98:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
c0111f9e:	85 c0                	test   %eax,%eax
c0111fa0:	0f 48 c2             	cmovs  %edx,%eax
c0111fa3:	c1 f8 0c             	sar    $0xc,%eax
c0111fa6:	2b 45 e0             	sub    -0x20(%ebp),%eax
c0111fa9:	89 45 dc             	mov    %eax,-0x24(%ebp)
	 *       NOTICE: useful function: sfs_bmap_load_nolock, sfs_block_op
     * (3) If end position isn't aligned with the last block, Rd/Wr some content from begin to the (endpos % SFS_BLKSIZE) of the last block
	 *       NOTICE: useful function: sfs_bmap_load_nolock, sfs_buf_op	
	*/
    // (1) If offset isn't aligned with the first block, Rd/Wr some content from offset to the end of the first block
    blkoff = offset % SFS_BLKSIZE;
c0111fac:	8b 45 14             	mov    0x14(%ebp),%eax
c0111faf:	99                   	cltd   
c0111fb0:	c1 ea 14             	shr    $0x14,%edx
c0111fb3:	01 d0                	add    %edx,%eax
c0111fb5:	25 ff 0f 00 00       	and    $0xfff,%eax
c0111fba:	29 d0                	sub    %edx,%eax
c0111fbc:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    if (blkoff != 0) {
c0111fbf:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c0111fc3:	0f 84 81 00 00 00    	je     c011204a <sfs_io_nolock+0x1ba>
        // Rd/Wr size = (nblks != 0) ? (SFS_BLKSIZE - blkoff) : (endpos - offset)
        size = (nblks != 0) ? (SFS_BLKSIZE - blkoff) : (endpos - offset);
c0111fc9:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0111fcd:	74 0a                	je     c0111fd9 <sfs_io_nolock+0x149>
c0111fcf:	b8 00 10 00 00       	mov    $0x1000,%eax
c0111fd4:	2b 45 d4             	sub    -0x2c(%ebp),%eax
c0111fd7:	eb 06                	jmp    c0111fdf <sfs_io_nolock+0x14f>
c0111fd9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111fdc:	2b 45 14             	sub    0x14(%ebp),%eax
c0111fdf:	89 45 d0             	mov    %eax,-0x30(%ebp)
        if ((ret = sfs_bmap_load_nolock(sfs, sin, blkno, &ino)) != 0) {
c0111fe2:	8d 45 cc             	lea    -0x34(%ebp),%eax
c0111fe5:	50                   	push   %eax
c0111fe6:	ff 75 e0             	pushl  -0x20(%ebp)
c0111fe9:	ff 75 0c             	pushl  0xc(%ebp)
c0111fec:	ff 75 08             	pushl  0x8(%ebp)
c0111fef:	e8 0f fa ff ff       	call   c0111a03 <sfs_bmap_load_nolock>
c0111ff4:	83 c4 10             	add    $0x10,%esp
c0111ff7:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0111ffa:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0111ffe:	0f 85 0e 01 00 00    	jne    c0112112 <sfs_io_nolock+0x282>
            goto out;
        }
        if ((ret = sfs_buf_op(sfs, buf, size, ino, blkoff)) != 0) {
c0112004:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0112007:	83 ec 0c             	sub    $0xc,%esp
c011200a:	ff 75 d4             	pushl  -0x2c(%ebp)
c011200d:	50                   	push   %eax
c011200e:	ff 75 d0             	pushl  -0x30(%ebp)
c0112011:	ff 75 10             	pushl  0x10(%ebp)
c0112014:	ff 75 08             	pushl  0x8(%ebp)
c0112017:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011201a:	ff d0                	call   *%eax
c011201c:	83 c4 20             	add    $0x20,%esp
c011201f:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0112022:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0112026:	0f 85 e9 00 00 00    	jne    c0112115 <sfs_io_nolock+0x285>
            goto out;
        }
        alen += size;
c011202c:	8b 45 d0             	mov    -0x30(%ebp),%eax
c011202f:	01 45 e4             	add    %eax,-0x1c(%ebp)
        // if nothing left
        if (nblks == 0) {
c0112032:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0112036:	0f 84 dc 00 00 00    	je     c0112118 <sfs_io_nolock+0x288>
            goto out;
        }
        // else, update buf pos
        buf += size;
c011203c:	8b 45 d0             	mov    -0x30(%ebp),%eax
c011203f:	01 45 10             	add    %eax,0x10(%ebp)
        blkno++;
c0112042:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
        nblks--;
c0112046:	83 6d dc 01          	subl   $0x1,-0x24(%ebp)
    }

    // (2) Rd/Wr aligned blocks 
    size = SFS_BLKSIZE;
c011204a:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
    while (nblks > 0) {
c0112051:	eb 57                	jmp    c01120aa <sfs_io_nolock+0x21a>
        if ((ret = sfs_bmap_load_nolock(sfs, sin, blkno, &ino)) != 0) {
c0112053:	8d 45 cc             	lea    -0x34(%ebp),%eax
c0112056:	50                   	push   %eax
c0112057:	ff 75 e0             	pushl  -0x20(%ebp)
c011205a:	ff 75 0c             	pushl  0xc(%ebp)
c011205d:	ff 75 08             	pushl  0x8(%ebp)
c0112060:	e8 9e f9 ff ff       	call   c0111a03 <sfs_bmap_load_nolock>
c0112065:	83 c4 10             	add    $0x10,%esp
c0112068:	89 45 e8             	mov    %eax,-0x18(%ebp)
c011206b:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c011206f:	0f 85 a6 00 00 00    	jne    c011211b <sfs_io_nolock+0x28b>
            goto out;
        }
        if ((ret = sfs_block_op(sfs, buf, ino, 1)) != 0) {
c0112075:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0112078:	6a 01                	push   $0x1
c011207a:	50                   	push   %eax
c011207b:	ff 75 10             	pushl  0x10(%ebp)
c011207e:	ff 75 08             	pushl  0x8(%ebp)
c0112081:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112084:	ff d0                	call   *%eax
c0112086:	83 c4 10             	add    $0x10,%esp
c0112089:	89 45 e8             	mov    %eax,-0x18(%ebp)
c011208c:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0112090:	0f 85 88 00 00 00    	jne    c011211e <sfs_io_nolock+0x28e>
            goto out;
        }
        alen += size;
c0112096:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0112099:	01 45 e4             	add    %eax,-0x1c(%ebp)
        // update buf pos
        buf += size;
c011209c:	8b 45 d0             	mov    -0x30(%ebp),%eax
c011209f:	01 45 10             	add    %eax,0x10(%ebp)
        blkno++;
c01120a2:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
        nblks--;
c01120a6:	83 6d dc 01          	subl   $0x1,-0x24(%ebp)
        nblks--;
    }

    // (2) Rd/Wr aligned blocks 
    size = SFS_BLKSIZE;
    while (nblks > 0) {
c01120aa:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c01120ae:	75 a3                	jne    c0112053 <sfs_io_nolock+0x1c3>
        blkno++;
        nblks--;
    }

    // (3) If end position isn't aligned with the last block, Rd/Wr some content from begin to the (endpos % SFS_BLKSIZE) of the last block
    size = endpos % SFS_BLKSIZE;
c01120b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01120b3:	99                   	cltd   
c01120b4:	c1 ea 14             	shr    $0x14,%edx
c01120b7:	01 d0                	add    %edx,%eax
c01120b9:	25 ff 0f 00 00       	and    $0xfff,%eax
c01120be:	29 d0                	sub    %edx,%eax
c01120c0:	89 45 d0             	mov    %eax,-0x30(%ebp)
    if (size != 0) {
c01120c3:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c01120c7:	74 5c                	je     c0112125 <sfs_io_nolock+0x295>
        if ((ret = sfs_bmap_load_nolock(sfs, sin, blkno, &ino)) != 0) {
c01120c9:	8d 45 cc             	lea    -0x34(%ebp),%eax
c01120cc:	50                   	push   %eax
c01120cd:	ff 75 e0             	pushl  -0x20(%ebp)
c01120d0:	ff 75 0c             	pushl  0xc(%ebp)
c01120d3:	ff 75 08             	pushl  0x8(%ebp)
c01120d6:	e8 28 f9 ff ff       	call   c0111a03 <sfs_bmap_load_nolock>
c01120db:	83 c4 10             	add    $0x10,%esp
c01120de:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01120e1:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01120e5:	75 3a                	jne    c0112121 <sfs_io_nolock+0x291>
            goto out;
        }
        if ((ret = sfs_buf_op(sfs, buf, size, ino, 0)) != 0) {
c01120e7:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01120ea:	83 ec 0c             	sub    $0xc,%esp
c01120ed:	6a 00                	push   $0x0
c01120ef:	50                   	push   %eax
c01120f0:	ff 75 d0             	pushl  -0x30(%ebp)
c01120f3:	ff 75 10             	pushl  0x10(%ebp)
c01120f6:	ff 75 08             	pushl  0x8(%ebp)
c01120f9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01120fc:	ff d0                	call   *%eax
c01120fe:	83 c4 20             	add    $0x20,%esp
c0112101:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0112104:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0112108:	75 1a                	jne    c0112124 <sfs_io_nolock+0x294>
            goto out;
        }
        alen += size;
c011210a:	8b 45 d0             	mov    -0x30(%ebp),%eax
c011210d:	01 45 e4             	add    %eax,-0x1c(%ebp)
c0112110:	eb 13                	jmp    c0112125 <sfs_io_nolock+0x295>
    blkoff = offset % SFS_BLKSIZE;
    if (blkoff != 0) {
        // Rd/Wr size = (nblks != 0) ? (SFS_BLKSIZE - blkoff) : (endpos - offset)
        size = (nblks != 0) ? (SFS_BLKSIZE - blkoff) : (endpos - offset);
        if ((ret = sfs_bmap_load_nolock(sfs, sin, blkno, &ino)) != 0) {
            goto out;
c0112112:	90                   	nop
c0112113:	eb 10                	jmp    c0112125 <sfs_io_nolock+0x295>
        }
        if ((ret = sfs_buf_op(sfs, buf, size, ino, blkoff)) != 0) {
            goto out;
c0112115:	90                   	nop
c0112116:	eb 0d                	jmp    c0112125 <sfs_io_nolock+0x295>
        }
        alen += size;
        // if nothing left
        if (nblks == 0) {
            goto out;
c0112118:	90                   	nop
c0112119:	eb 0a                	jmp    c0112125 <sfs_io_nolock+0x295>

    // (2) Rd/Wr aligned blocks 
    size = SFS_BLKSIZE;
    while (nblks > 0) {
        if ((ret = sfs_bmap_load_nolock(sfs, sin, blkno, &ino)) != 0) {
            goto out;
c011211b:	90                   	nop
c011211c:	eb 07                	jmp    c0112125 <sfs_io_nolock+0x295>
        }
        if ((ret = sfs_block_op(sfs, buf, ino, 1)) != 0) {
            goto out;
c011211e:	90                   	nop
c011211f:	eb 04                	jmp    c0112125 <sfs_io_nolock+0x295>

    // (3) If end position isn't aligned with the last block, Rd/Wr some content from begin to the (endpos % SFS_BLKSIZE) of the last block
    size = endpos % SFS_BLKSIZE;
    if (size != 0) {
        if ((ret = sfs_bmap_load_nolock(sfs, sin, blkno, &ino)) != 0) {
            goto out;
c0112121:	90                   	nop
c0112122:	eb 01                	jmp    c0112125 <sfs_io_nolock+0x295>
        }
        if ((ret = sfs_buf_op(sfs, buf, size, ino, 0)) != 0) {
            goto out;
c0112124:	90                   	nop
        }
        alen += size;
    }

out:
    *alenp = alen;
c0112125:	8b 45 18             	mov    0x18(%ebp),%eax
c0112128:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c011212b:	89 10                	mov    %edx,(%eax)
    if (offset + alen > sin->din->size) {
c011212d:	8b 55 14             	mov    0x14(%ebp),%edx
c0112130:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0112133:	01 c2                	add    %eax,%edx
c0112135:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112138:	8b 00                	mov    (%eax),%eax
c011213a:	8b 00                	mov    (%eax),%eax
c011213c:	39 c2                	cmp    %eax,%edx
c011213e:	76 19                	jbe    c0112159 <sfs_io_nolock+0x2c9>
        sin->din->size = offset + alen;
c0112140:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112143:	8b 00                	mov    (%eax),%eax
c0112145:	8b 4d 14             	mov    0x14(%ebp),%ecx
c0112148:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c011214b:	01 ca                	add    %ecx,%edx
c011214d:	89 10                	mov    %edx,(%eax)
        sin->dirty = 1;
c011214f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112152:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
    }
    return ret;
c0112159:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
c011215c:	c9                   	leave  
c011215d:	c3                   	ret    

c011215e <sfs_io>:
/*
 * sfs_io - Rd/Wr file. the wrapper of sfs_io_nolock
            with lock protect
 */
static inline int
sfs_io(struct inode *node, struct iobuf *iob, bool write) {
c011215e:	55                   	push   %ebp
c011215f:	89 e5                	mov    %esp,%ebp
c0112161:	83 ec 28             	sub    $0x28,%esp
    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c0112164:	8b 45 08             	mov    0x8(%ebp),%eax
c0112167:	8b 40 38             	mov    0x38(%eax),%eax
c011216a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011216d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112171:	74 0a                	je     c011217d <sfs_io+0x1f>
c0112173:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112176:	8b 40 6c             	mov    0x6c(%eax),%eax
c0112179:	85 c0                	test   %eax,%eax
c011217b:	74 19                	je     c0112196 <sfs_io+0x38>
c011217d:	68 74 83 11 c0       	push   $0xc0118374
c0112182:	68 1f 81 11 c0       	push   $0xc011811f
c0112187:	68 9b 02 00 00       	push   $0x29b
c011218c:	68 b7 80 11 c0       	push   $0xc01180b7
c0112191:	e8 57 e3 fe ff       	call   c01004ed <__panic>
c0112196:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112199:	89 45 f0             	mov    %eax,-0x10(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c011219c:	8b 45 08             	mov    0x8(%ebp),%eax
c011219f:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01121a2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01121a6:	74 0d                	je     c01121b5 <sfs_io+0x57>
c01121a8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01121ab:	8b 40 2c             	mov    0x2c(%eax),%eax
c01121ae:	3d 35 12 00 00       	cmp    $0x1235,%eax
c01121b3:	74 19                	je     c01121ce <sfs_io+0x70>
c01121b5:	68 70 81 11 c0       	push   $0xc0118170
c01121ba:	68 1f 81 11 c0       	push   $0xc011811f
c01121bf:	68 9c 02 00 00       	push   $0x29c
c01121c4:	68 b7 80 11 c0       	push   $0xc01180b7
c01121c9:	e8 1f e3 fe ff       	call   c01004ed <__panic>
c01121ce:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01121d1:	89 45 e8             	mov    %eax,-0x18(%ebp)
    int ret;
    lock_sin(sin);
c01121d4:	83 ec 0c             	sub    $0xc,%esp
c01121d7:	ff 75 e8             	pushl  -0x18(%ebp)
c01121da:	e8 30 ee ff ff       	call   c011100f <lock_sin>
c01121df:	83 c4 10             	add    $0x10,%esp
    {
        size_t alen = iob->io_resid;
c01121e2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01121e5:	8b 40 0c             	mov    0xc(%eax),%eax
c01121e8:	89 45 e0             	mov    %eax,-0x20(%ebp)
        ret = sfs_io_nolock(sfs, sin, iob->io_base, iob->io_offset, &alen, write);
c01121eb:	8b 45 0c             	mov    0xc(%ebp),%eax
c01121ee:	8b 50 04             	mov    0x4(%eax),%edx
c01121f1:	8b 45 0c             	mov    0xc(%ebp),%eax
c01121f4:	8b 00                	mov    (%eax),%eax
c01121f6:	83 ec 08             	sub    $0x8,%esp
c01121f9:	ff 75 10             	pushl  0x10(%ebp)
c01121fc:	8d 4d e0             	lea    -0x20(%ebp),%ecx
c01121ff:	51                   	push   %ecx
c0112200:	52                   	push   %edx
c0112201:	50                   	push   %eax
c0112202:	ff 75 e8             	pushl  -0x18(%ebp)
c0112205:	ff 75 f0             	pushl  -0x10(%ebp)
c0112208:	e8 83 fc ff ff       	call   c0111e90 <sfs_io_nolock>
c011220d:	83 c4 20             	add    $0x20,%esp
c0112210:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (alen != 0) {
c0112213:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112216:	85 c0                	test   %eax,%eax
c0112218:	74 12                	je     c011222c <sfs_io+0xce>
            iobuf_skip(iob, alen);
c011221a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011221d:	83 ec 08             	sub    $0x8,%esp
c0112220:	50                   	push   %eax
c0112221:	ff 75 0c             	pushl  0xc(%ebp)
c0112224:	e8 29 8f ff ff       	call   c010b152 <iobuf_skip>
c0112229:	83 c4 10             	add    $0x10,%esp
        }
    }
    unlock_sin(sin);
c011222c:	83 ec 0c             	sub    $0xc,%esp
c011222f:	ff 75 e8             	pushl  -0x18(%ebp)
c0112232:	e8 f3 ed ff ff       	call   c011102a <unlock_sin>
c0112237:	83 c4 10             	add    $0x10,%esp
    return ret;
c011223a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
}
c011223d:	c9                   	leave  
c011223e:	c3                   	ret    

c011223f <sfs_read>:

// sfs_read - read file
static int
sfs_read(struct inode *node, struct iobuf *iob) {
c011223f:	55                   	push   %ebp
c0112240:	89 e5                	mov    %esp,%ebp
c0112242:	83 ec 08             	sub    $0x8,%esp
    return sfs_io(node, iob, 0);
c0112245:	83 ec 04             	sub    $0x4,%esp
c0112248:	6a 00                	push   $0x0
c011224a:	ff 75 0c             	pushl  0xc(%ebp)
c011224d:	ff 75 08             	pushl  0x8(%ebp)
c0112250:	e8 09 ff ff ff       	call   c011215e <sfs_io>
c0112255:	83 c4 10             	add    $0x10,%esp
}
c0112258:	c9                   	leave  
c0112259:	c3                   	ret    

c011225a <sfs_write>:

// sfs_write - write file
static int
sfs_write(struct inode *node, struct iobuf *iob) {
c011225a:	55                   	push   %ebp
c011225b:	89 e5                	mov    %esp,%ebp
c011225d:	83 ec 08             	sub    $0x8,%esp
    return sfs_io(node, iob, 1);
c0112260:	83 ec 04             	sub    $0x4,%esp
c0112263:	6a 01                	push   $0x1
c0112265:	ff 75 0c             	pushl  0xc(%ebp)
c0112268:	ff 75 08             	pushl  0x8(%ebp)
c011226b:	e8 ee fe ff ff       	call   c011215e <sfs_io>
c0112270:	83 c4 10             	add    $0x10,%esp
}
c0112273:	c9                   	leave  
c0112274:	c3                   	ret    

c0112275 <sfs_fstat>:

/*
 * sfs_fstat - Return nlinks/block/size, etc. info about a file. The pointer is a pointer to struct stat;
 */
static int
sfs_fstat(struct inode *node, struct stat *stat) {
c0112275:	55                   	push   %ebp
c0112276:	89 e5                	mov    %esp,%ebp
c0112278:	83 ec 18             	sub    $0x18,%esp
    int ret;
    memset(stat, 0, sizeof(struct stat));
c011227b:	83 ec 04             	sub    $0x4,%esp
c011227e:	6a 10                	push   $0x10
c0112280:	6a 00                	push   $0x0
c0112282:	ff 75 0c             	pushl  0xc(%ebp)
c0112285:	e8 d8 17 00 00       	call   c0113a62 <memset>
c011228a:	83 c4 10             	add    $0x10,%esp
    if ((ret = vop_gettype(node, &(stat->st_mode))) != 0) {
c011228d:	8b 45 08             	mov    0x8(%ebp),%eax
c0112290:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112293:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112297:	74 17                	je     c01122b0 <sfs_fstat+0x3b>
c0112299:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011229c:	8b 40 3c             	mov    0x3c(%eax),%eax
c011229f:	85 c0                	test   %eax,%eax
c01122a1:	74 0d                	je     c01122b0 <sfs_fstat+0x3b>
c01122a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01122a6:	8b 40 3c             	mov    0x3c(%eax),%eax
c01122a9:	8b 40 28             	mov    0x28(%eax),%eax
c01122ac:	85 c0                	test   %eax,%eax
c01122ae:	75 19                	jne    c01122c9 <sfs_fstat+0x54>
c01122b0:	68 a0 83 11 c0       	push   $0xc01183a0
c01122b5:	68 1f 81 11 c0       	push   $0xc011811f
c01122ba:	68 bd 02 00 00       	push   $0x2bd
c01122bf:	68 b7 80 11 c0       	push   $0xc01180b7
c01122c4:	e8 24 e2 fe ff       	call   c01004ed <__panic>
c01122c9:	83 ec 08             	sub    $0x8,%esp
c01122cc:	68 f0 83 11 c0       	push   $0xc01183f0
c01122d1:	ff 75 f4             	pushl  -0xc(%ebp)
c01122d4:	e8 54 d2 ff ff       	call   c010f52d <inode_check>
c01122d9:	83 c4 10             	add    $0x10,%esp
c01122dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01122df:	8b 40 3c             	mov    0x3c(%eax),%eax
c01122e2:	8b 40 28             	mov    0x28(%eax),%eax
c01122e5:	8b 55 0c             	mov    0xc(%ebp),%edx
c01122e8:	83 ec 08             	sub    $0x8,%esp
c01122eb:	52                   	push   %edx
c01122ec:	ff 75 08             	pushl  0x8(%ebp)
c01122ef:	ff d0                	call   *%eax
c01122f1:	83 c4 10             	add    $0x10,%esp
c01122f4:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01122f7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01122fb:	74 05                	je     c0112302 <sfs_fstat+0x8d>
        return ret;
c01122fd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112300:	eb 66                	jmp    c0112368 <sfs_fstat+0xf3>
    }
    struct sfs_disk_inode *din = vop_info(node, sfs_inode)->din;
c0112302:	8b 45 08             	mov    0x8(%ebp),%eax
c0112305:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0112308:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011230c:	74 0d                	je     c011231b <sfs_fstat+0xa6>
c011230e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112311:	8b 40 2c             	mov    0x2c(%eax),%eax
c0112314:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0112319:	74 19                	je     c0112334 <sfs_fstat+0xbf>
c011231b:	68 70 81 11 c0       	push   $0xc0118170
c0112320:	68 1f 81 11 c0       	push   $0xc011811f
c0112325:	68 c0 02 00 00       	push   $0x2c0
c011232a:	68 b7 80 11 c0       	push   $0xc01180b7
c011232f:	e8 b9 e1 fe ff       	call   c01004ed <__panic>
c0112334:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112337:	8b 00                	mov    (%eax),%eax
c0112339:	89 45 e8             	mov    %eax,-0x18(%ebp)
    stat->st_nlinks = din->nlinks;
c011233c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011233f:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c0112343:	0f b7 d0             	movzwl %ax,%edx
c0112346:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112349:	89 50 04             	mov    %edx,0x4(%eax)
    stat->st_blocks = din->blocks;
c011234c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011234f:	8b 50 08             	mov    0x8(%eax),%edx
c0112352:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112355:	89 50 08             	mov    %edx,0x8(%eax)
    stat->st_size = din->size;
c0112358:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011235b:	8b 10                	mov    (%eax),%edx
c011235d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112360:	89 50 0c             	mov    %edx,0xc(%eax)
    return 0;
c0112363:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0112368:	c9                   	leave  
c0112369:	c3                   	ret    

c011236a <sfs_fsync>:

/*
 * sfs_fsync - Force any dirty inode info associated with this file to stable storage.
 */
static int
sfs_fsync(struct inode *node) {
c011236a:	55                   	push   %ebp
c011236b:	89 e5                	mov    %esp,%ebp
c011236d:	83 ec 28             	sub    $0x28,%esp
    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c0112370:	8b 45 08             	mov    0x8(%ebp),%eax
c0112373:	8b 40 38             	mov    0x38(%eax),%eax
c0112376:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0112379:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011237d:	74 0a                	je     c0112389 <sfs_fsync+0x1f>
c011237f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112382:	8b 40 6c             	mov    0x6c(%eax),%eax
c0112385:	85 c0                	test   %eax,%eax
c0112387:	74 19                	je     c01123a2 <sfs_fsync+0x38>
c0112389:	68 74 83 11 c0       	push   $0xc0118374
c011238e:	68 1f 81 11 c0       	push   $0xc011811f
c0112393:	68 cc 02 00 00       	push   $0x2cc
c0112398:	68 b7 80 11 c0       	push   $0xc01180b7
c011239d:	e8 4b e1 fe ff       	call   c01004ed <__panic>
c01123a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01123a5:	89 45 ec             	mov    %eax,-0x14(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c01123a8:	8b 45 08             	mov    0x8(%ebp),%eax
c01123ab:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01123ae:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01123b2:	74 0d                	je     c01123c1 <sfs_fsync+0x57>
c01123b4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01123b7:	8b 40 2c             	mov    0x2c(%eax),%eax
c01123ba:	3d 35 12 00 00       	cmp    $0x1235,%eax
c01123bf:	74 19                	je     c01123da <sfs_fsync+0x70>
c01123c1:	68 70 81 11 c0       	push   $0xc0118170
c01123c6:	68 1f 81 11 c0       	push   $0xc011811f
c01123cb:	68 cd 02 00 00       	push   $0x2cd
c01123d0:	68 b7 80 11 c0       	push   $0xc01180b7
c01123d5:	e8 13 e1 fe ff       	call   c01004ed <__panic>
c01123da:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01123dd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    int ret = 0;
c01123e0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if (sin->dirty) {
c01123e7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01123ea:	8b 40 08             	mov    0x8(%eax),%eax
c01123ed:	85 c0                	test   %eax,%eax
c01123ef:	74 62                	je     c0112453 <sfs_fsync+0xe9>
        lock_sin(sin);
c01123f1:	83 ec 0c             	sub    $0xc,%esp
c01123f4:	ff 75 e4             	pushl  -0x1c(%ebp)
c01123f7:	e8 13 ec ff ff       	call   c011100f <lock_sin>
c01123fc:	83 c4 10             	add    $0x10,%esp
        {
            if (sin->dirty) {
c01123ff:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0112402:	8b 40 08             	mov    0x8(%eax),%eax
c0112405:	85 c0                	test   %eax,%eax
c0112407:	74 3c                	je     c0112445 <sfs_fsync+0xdb>
                sin->dirty = 0;
c0112409:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011240c:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
                if ((ret = sfs_wbuf(sfs, sin->din, sizeof(struct sfs_disk_inode), sin->ino, 0)) != 0) {
c0112413:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0112416:	8b 50 04             	mov    0x4(%eax),%edx
c0112419:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011241c:	8b 00                	mov    (%eax),%eax
c011241e:	83 ec 0c             	sub    $0xc,%esp
c0112421:	6a 00                	push   $0x0
c0112423:	52                   	push   %edx
c0112424:	6a 40                	push   $0x40
c0112426:	50                   	push   %eax
c0112427:	ff 75 ec             	pushl  -0x14(%ebp)
c011242a:	e8 e2 10 00 00       	call   c0113511 <sfs_wbuf>
c011242f:	83 c4 20             	add    $0x20,%esp
c0112432:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112435:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112439:	74 0a                	je     c0112445 <sfs_fsync+0xdb>
                    sin->dirty = 1;
c011243b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011243e:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
                }
            }
        }
        unlock_sin(sin);
c0112445:	83 ec 0c             	sub    $0xc,%esp
c0112448:	ff 75 e4             	pushl  -0x1c(%ebp)
c011244b:	e8 da eb ff ff       	call   c011102a <unlock_sin>
c0112450:	83 c4 10             	add    $0x10,%esp
    }
    return ret;
c0112453:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0112456:	c9                   	leave  
c0112457:	c3                   	ret    

c0112458 <sfs_namefile>:
/*
 *sfs_namefile -Compute pathname relative to filesystem root of the file and copy to the specified io buffer.
 *  
 */
static int
sfs_namefile(struct inode *node, struct iobuf *iob) {
c0112458:	55                   	push   %ebp
c0112459:	89 e5                	mov    %esp,%ebp
c011245b:	83 ec 38             	sub    $0x38,%esp
    struct sfs_disk_entry *entry;
    if (iob->io_resid <= 2 || (entry = kmalloc(sizeof(struct sfs_disk_entry))) == NULL) {
c011245e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112461:	8b 40 0c             	mov    0xc(%eax),%eax
c0112464:	83 f8 02             	cmp    $0x2,%eax
c0112467:	76 19                	jbe    c0112482 <sfs_namefile+0x2a>
c0112469:	83 ec 0c             	sub    $0xc,%esp
c011246c:	68 04 01 00 00       	push   $0x104
c0112471:	e8 8c 2e ff ff       	call   c0105302 <kmalloc>
c0112476:	83 c4 10             	add    $0x10,%esp
c0112479:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c011247c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0112480:	75 0a                	jne    c011248c <sfs_namefile+0x34>
        return -E_NO_MEM;
c0112482:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0112487:	e9 8d 02 00 00       	jmp    c0112719 <sfs_namefile+0x2c1>
    }

    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c011248c:	8b 45 08             	mov    0x8(%ebp),%eax
c011248f:	8b 40 38             	mov    0x38(%eax),%eax
c0112492:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0112495:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0112499:	74 0a                	je     c01124a5 <sfs_namefile+0x4d>
c011249b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011249e:	8b 40 6c             	mov    0x6c(%eax),%eax
c01124a1:	85 c0                	test   %eax,%eax
c01124a3:	74 19                	je     c01124be <sfs_namefile+0x66>
c01124a5:	68 74 83 11 c0       	push   $0xc0118374
c01124aa:	68 1f 81 11 c0       	push   $0xc011811f
c01124af:	68 e9 02 00 00       	push   $0x2e9
c01124b4:	68 b7 80 11 c0       	push   $0xc01180b7
c01124b9:	e8 2f e0 fe ff       	call   c01004ed <__panic>
c01124be:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01124c1:	89 45 dc             	mov    %eax,-0x24(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c01124c4:	8b 45 08             	mov    0x8(%ebp),%eax
c01124c7:	89 45 d8             	mov    %eax,-0x28(%ebp)
c01124ca:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c01124ce:	74 0d                	je     c01124dd <sfs_namefile+0x85>
c01124d0:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01124d3:	8b 40 2c             	mov    0x2c(%eax),%eax
c01124d6:	3d 35 12 00 00       	cmp    $0x1235,%eax
c01124db:	74 19                	je     c01124f6 <sfs_namefile+0x9e>
c01124dd:	68 70 81 11 c0       	push   $0xc0118170
c01124e2:	68 1f 81 11 c0       	push   $0xc011811f
c01124e7:	68 ea 02 00 00       	push   $0x2ea
c01124ec:	68 b7 80 11 c0       	push   $0xc01180b7
c01124f1:	e8 f7 df fe ff       	call   c01004ed <__panic>
c01124f6:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01124f9:	89 45 f4             	mov    %eax,-0xc(%ebp)

    int ret;
    char *ptr = iob->io_base + iob->io_resid;
c01124fc:	8b 45 0c             	mov    0xc(%ebp),%eax
c01124ff:	8b 10                	mov    (%eax),%edx
c0112501:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112504:	8b 40 0c             	mov    0xc(%eax),%eax
c0112507:	01 d0                	add    %edx,%eax
c0112509:	89 45 ec             	mov    %eax,-0x14(%ebp)
    size_t alen, resid = iob->io_resid - 2;
c011250c:	8b 45 0c             	mov    0xc(%ebp),%eax
c011250f:	8b 40 0c             	mov    0xc(%eax),%eax
c0112512:	83 e8 02             	sub    $0x2,%eax
c0112515:	89 45 e8             	mov    %eax,-0x18(%ebp)
    vop_ref_inc(node);
c0112518:	83 ec 0c             	sub    $0xc,%esp
c011251b:	ff 75 08             	pushl  0x8(%ebp)
c011251e:	e8 38 ce ff ff       	call   c010f35b <inode_ref_inc>
c0112523:	83 c4 10             	add    $0x10,%esp
    while (1) {
        struct inode *parent;
        if ((ret = sfs_lookup_once(sfs, sin, "..", &parent, NULL)) != 0) {
c0112526:	83 ec 0c             	sub    $0xc,%esp
c0112529:	6a 00                	push   $0x0
c011252b:	8d 45 c8             	lea    -0x38(%ebp),%eax
c011252e:	50                   	push   %eax
c011252f:	68 f8 83 11 c0       	push   $0xc01183f8
c0112534:	ff 75 f4             	pushl  -0xc(%ebp)
c0112537:	ff 75 dc             	pushl  -0x24(%ebp)
c011253a:	e8 4a f8 ff ff       	call   c0111d89 <sfs_lookup_once>
c011253f:	83 c4 20             	add    $0x20,%esp
c0112542:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0112545:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0112549:	0f 85 a7 01 00 00    	jne    c01126f6 <sfs_namefile+0x29e>
            goto failed;
        }

        uint32_t ino = sin->ino;
c011254f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112552:	8b 40 04             	mov    0x4(%eax),%eax
c0112555:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        vop_ref_dec(node);
c0112558:	83 ec 0c             	sub    $0xc,%esp
c011255b:	ff 75 08             	pushl  0x8(%ebp)
c011255e:	e8 12 ce ff ff       	call   c010f375 <inode_ref_dec>
c0112563:	83 c4 10             	add    $0x10,%esp
        if (node == parent) {
c0112566:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0112569:	39 45 08             	cmp    %eax,0x8(%ebp)
c011256c:	75 77                	jne    c01125e5 <sfs_namefile+0x18d>
            vop_ref_dec(node);
c011256e:	83 ec 0c             	sub    $0xc,%esp
c0112571:	ff 75 08             	pushl  0x8(%ebp)
c0112574:	e8 fc cd ff ff       	call   c010f375 <inode_ref_dec>
c0112579:	83 c4 10             	add    $0x10,%esp
        }
        resid -= alen, ptr -= alen;
        memcpy(ptr, entry->name, alen - 1);
        ptr[alen - 1] = '/';
    }
    alen = iob->io_resid - resid - 2;
c011257c:	8b 45 0c             	mov    0xc(%ebp),%eax
c011257f:	8b 40 0c             	mov    0xc(%eax),%eax
c0112582:	2b 45 e8             	sub    -0x18(%ebp),%eax
c0112585:	83 e8 02             	sub    $0x2,%eax
c0112588:	89 45 cc             	mov    %eax,-0x34(%ebp)
    ptr = memmove(iob->io_base + 1, ptr, alen);
c011258b:	8b 45 0c             	mov    0xc(%ebp),%eax
c011258e:	8b 00                	mov    (%eax),%eax
c0112590:	83 c0 01             	add    $0x1,%eax
c0112593:	83 ec 04             	sub    $0x4,%esp
c0112596:	ff 75 cc             	pushl  -0x34(%ebp)
c0112599:	ff 75 ec             	pushl  -0x14(%ebp)
c011259c:	50                   	push   %eax
c011259d:	e8 00 15 00 00       	call   c0113aa2 <memmove>
c01125a2:	83 c4 10             	add    $0x10,%esp
c01125a5:	89 45 ec             	mov    %eax,-0x14(%ebp)
    ptr[-1] = '/', ptr[alen] = '\0';
c01125a8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01125ab:	83 e8 01             	sub    $0x1,%eax
c01125ae:	c6 00 2f             	movb   $0x2f,(%eax)
c01125b1:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01125b4:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01125b7:	01 d0                	add    %edx,%eax
c01125b9:	c6 00 00             	movb   $0x0,(%eax)
    iobuf_skip(iob, alen);
c01125bc:	83 ec 08             	sub    $0x8,%esp
c01125bf:	ff 75 cc             	pushl  -0x34(%ebp)
c01125c2:	ff 75 0c             	pushl  0xc(%ebp)
c01125c5:	e8 88 8b ff ff       	call   c010b152 <iobuf_skip>
c01125ca:	83 c4 10             	add    $0x10,%esp
    kfree(entry);
c01125cd:	83 ec 0c             	sub    $0xc,%esp
c01125d0:	ff 75 e4             	pushl  -0x1c(%ebp)
c01125d3:	e8 42 2d ff ff       	call   c010531a <kfree>
c01125d8:	83 c4 10             	add    $0x10,%esp
    return 0;
c01125db:	b8 00 00 00 00       	mov    $0x0,%eax
c01125e0:	e9 34 01 00 00       	jmp    c0112719 <sfs_namefile+0x2c1>
        if (node == parent) {
            vop_ref_dec(node);
            break;
        }

        node = parent, sin = vop_info(node, sfs_inode);
c01125e5:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01125e8:	89 45 08             	mov    %eax,0x8(%ebp)
c01125eb:	8b 45 08             	mov    0x8(%ebp),%eax
c01125ee:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01125f1:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c01125f5:	74 0d                	je     c0112604 <sfs_namefile+0x1ac>
c01125f7:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01125fa:	8b 40 2c             	mov    0x2c(%eax),%eax
c01125fd:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0112602:	74 19                	je     c011261d <sfs_namefile+0x1c5>
c0112604:	68 70 81 11 c0       	push   $0xc0118170
c0112609:	68 1f 81 11 c0       	push   $0xc011811f
c011260e:	68 fd 02 00 00       	push   $0x2fd
c0112613:	68 b7 80 11 c0       	push   $0xc01180b7
c0112618:	e8 d0 de fe ff       	call   c01004ed <__panic>
c011261d:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0112620:	89 45 f4             	mov    %eax,-0xc(%ebp)
        assert(ino != sin->ino && sin->din->type == SFS_TYPE_DIR);
c0112623:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112626:	8b 40 04             	mov    0x4(%eax),%eax
c0112629:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c011262c:	74 0f                	je     c011263d <sfs_namefile+0x1e5>
c011262e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112631:	8b 00                	mov    (%eax),%eax
c0112633:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c0112637:	66 83 f8 02          	cmp    $0x2,%ax
c011263b:	74 19                	je     c0112656 <sfs_namefile+0x1fe>
c011263d:	68 fc 83 11 c0       	push   $0xc01183fc
c0112642:	68 1f 81 11 c0       	push   $0xc011811f
c0112647:	68 fe 02 00 00       	push   $0x2fe
c011264c:	68 b7 80 11 c0       	push   $0xc01180b7
c0112651:	e8 97 de fe ff       	call   c01004ed <__panic>

        lock_sin(sin);
c0112656:	83 ec 0c             	sub    $0xc,%esp
c0112659:	ff 75 f4             	pushl  -0xc(%ebp)
c011265c:	e8 ae e9 ff ff       	call   c011100f <lock_sin>
c0112661:	83 c4 10             	add    $0x10,%esp
        {
            ret = sfs_dirent_findino_nolock(sfs, sin, ino, entry);
c0112664:	ff 75 e4             	pushl  -0x1c(%ebp)
c0112667:	ff 75 d4             	pushl  -0x2c(%ebp)
c011266a:	ff 75 f4             	pushl  -0xc(%ebp)
c011266d:	ff 75 dc             	pushl  -0x24(%ebp)
c0112670:	e8 b4 f6 ff ff       	call   c0111d29 <sfs_dirent_findino_nolock>
c0112675:	83 c4 10             	add    $0x10,%esp
c0112678:	89 45 f0             	mov    %eax,-0x10(%ebp)
        }
        unlock_sin(sin);
c011267b:	83 ec 0c             	sub    $0xc,%esp
c011267e:	ff 75 f4             	pushl  -0xc(%ebp)
c0112681:	e8 a4 e9 ff ff       	call   c011102a <unlock_sin>
c0112686:	83 c4 10             	add    $0x10,%esp

        if (ret != 0) {
c0112689:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011268d:	75 6a                	jne    c01126f9 <sfs_namefile+0x2a1>
            goto failed;
        }

        if ((alen = strlen(entry->name) + 1) > resid) {
c011268f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0112692:	83 c0 04             	add    $0x4,%eax
c0112695:	83 ec 0c             	sub    $0xc,%esp
c0112698:	50                   	push   %eax
c0112699:	e8 6a 10 00 00       	call   c0113708 <strlen>
c011269e:	83 c4 10             	add    $0x10,%esp
c01126a1:	83 c0 01             	add    $0x1,%eax
c01126a4:	89 45 cc             	mov    %eax,-0x34(%ebp)
c01126a7:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01126aa:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c01126ad:	77 3d                	ja     c01126ec <sfs_namefile+0x294>
            goto failed_nomem;
        }
        resid -= alen, ptr -= alen;
c01126af:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01126b2:	29 45 e8             	sub    %eax,-0x18(%ebp)
c01126b5:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01126b8:	f7 d8                	neg    %eax
c01126ba:	01 45 ec             	add    %eax,-0x14(%ebp)
        memcpy(ptr, entry->name, alen - 1);
c01126bd:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01126c0:	8d 50 ff             	lea    -0x1(%eax),%edx
c01126c3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01126c6:	83 c0 04             	add    $0x4,%eax
c01126c9:	83 ec 04             	sub    $0x4,%esp
c01126cc:	52                   	push   %edx
c01126cd:	50                   	push   %eax
c01126ce:	ff 75 ec             	pushl  -0x14(%ebp)
c01126d1:	e8 6f 14 00 00       	call   c0113b45 <memcpy>
c01126d6:	83 c4 10             	add    $0x10,%esp
        ptr[alen - 1] = '/';
c01126d9:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01126dc:	8d 50 ff             	lea    -0x1(%eax),%edx
c01126df:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01126e2:	01 d0                	add    %edx,%eax
c01126e4:	c6 00 2f             	movb   $0x2f,(%eax)
    }
c01126e7:	e9 3a fe ff ff       	jmp    c0112526 <sfs_namefile+0xce>
        if (ret != 0) {
            goto failed;
        }

        if ((alen = strlen(entry->name) + 1) > resid) {
            goto failed_nomem;
c01126ec:	90                   	nop
    iobuf_skip(iob, alen);
    kfree(entry);
    return 0;

failed_nomem:
    ret = -E_NO_MEM;
c01126ed:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
c01126f4:	eb 04                	jmp    c01126fa <sfs_namefile+0x2a2>
    size_t alen, resid = iob->io_resid - 2;
    vop_ref_inc(node);
    while (1) {
        struct inode *parent;
        if ((ret = sfs_lookup_once(sfs, sin, "..", &parent, NULL)) != 0) {
            goto failed;
c01126f6:	90                   	nop
c01126f7:	eb 01                	jmp    c01126fa <sfs_namefile+0x2a2>
            ret = sfs_dirent_findino_nolock(sfs, sin, ino, entry);
        }
        unlock_sin(sin);

        if (ret != 0) {
            goto failed;
c01126f9:	90                   	nop
    return 0;

failed_nomem:
    ret = -E_NO_MEM;
failed:
    vop_ref_dec(node);
c01126fa:	83 ec 0c             	sub    $0xc,%esp
c01126fd:	ff 75 08             	pushl  0x8(%ebp)
c0112700:	e8 70 cc ff ff       	call   c010f375 <inode_ref_dec>
c0112705:	83 c4 10             	add    $0x10,%esp
    kfree(entry);
c0112708:	83 ec 0c             	sub    $0xc,%esp
c011270b:	ff 75 e4             	pushl  -0x1c(%ebp)
c011270e:	e8 07 2c ff ff       	call   c010531a <kfree>
c0112713:	83 c4 10             	add    $0x10,%esp
    return ret;
c0112716:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0112719:	c9                   	leave  
c011271a:	c3                   	ret    

c011271b <sfs_getdirentry_sub_nolock>:

/*
 * sfs_getdirentry_sub_noblock - get the content of file entry in DIR
 */
static int
sfs_getdirentry_sub_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, int slot, struct sfs_disk_entry *entry) {
c011271b:	55                   	push   %ebp
c011271c:	89 e5                	mov    %esp,%ebp
c011271e:	83 ec 18             	sub    $0x18,%esp
    int ret, i, nslots = sin->din->blocks;
c0112721:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112724:	8b 00                	mov    (%eax),%eax
c0112726:	8b 40 08             	mov    0x8(%eax),%eax
c0112729:	89 45 f0             	mov    %eax,-0x10(%ebp)
    for (i = 0; i < nslots; i ++) {
c011272c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0112733:	eb 40                	jmp    c0112775 <sfs_getdirentry_sub_nolock+0x5a>
        if ((ret = sfs_dirent_read_nolock(sfs, sin, i, entry)) != 0) {
c0112735:	ff 75 14             	pushl  0x14(%ebp)
c0112738:	ff 75 f4             	pushl  -0xc(%ebp)
c011273b:	ff 75 0c             	pushl  0xc(%ebp)
c011273e:	ff 75 08             	pushl  0x8(%ebp)
c0112741:	e8 fd f3 ff ff       	call   c0111b43 <sfs_dirent_read_nolock>
c0112746:	83 c4 10             	add    $0x10,%esp
c0112749:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011274c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0112750:	74 05                	je     c0112757 <sfs_getdirentry_sub_nolock+0x3c>
            return ret;
c0112752:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112755:	eb 2b                	jmp    c0112782 <sfs_getdirentry_sub_nolock+0x67>
        }
        if (entry->ino != 0) {
c0112757:	8b 45 14             	mov    0x14(%ebp),%eax
c011275a:	8b 00                	mov    (%eax),%eax
c011275c:	85 c0                	test   %eax,%eax
c011275e:	74 11                	je     c0112771 <sfs_getdirentry_sub_nolock+0x56>
            if (slot == 0) {
c0112760:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0112764:	75 07                	jne    c011276d <sfs_getdirentry_sub_nolock+0x52>
                return 0;
c0112766:	b8 00 00 00 00       	mov    $0x0,%eax
c011276b:	eb 15                	jmp    c0112782 <sfs_getdirentry_sub_nolock+0x67>
            }
            slot --;
c011276d:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
 * sfs_getdirentry_sub_noblock - get the content of file entry in DIR
 */
static int
sfs_getdirentry_sub_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, int slot, struct sfs_disk_entry *entry) {
    int ret, i, nslots = sin->din->blocks;
    for (i = 0; i < nslots; i ++) {
c0112771:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0112775:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112778:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c011277b:	7c b8                	jl     c0112735 <sfs_getdirentry_sub_nolock+0x1a>
                return 0;
            }
            slot --;
        }
    }
    return -E_NOENT;
c011277d:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
c0112782:	c9                   	leave  
c0112783:	c3                   	ret    

c0112784 <sfs_getdirentry>:
/*
 * sfs_getdirentry - according to the iob->io_offset, calculate the dir entry's slot in disk block,
                     get dir entry content from the disk 
 */
static int
sfs_getdirentry(struct inode *node, struct iobuf *iob) {
c0112784:	55                   	push   %ebp
c0112785:	89 e5                	mov    %esp,%ebp
c0112787:	83 ec 28             	sub    $0x28,%esp
    struct sfs_disk_entry *entry;
    if ((entry = kmalloc(sizeof(struct sfs_disk_entry))) == NULL) {
c011278a:	83 ec 0c             	sub    $0xc,%esp
c011278d:	68 04 01 00 00       	push   $0x104
c0112792:	e8 6b 2b ff ff       	call   c0105302 <kmalloc>
c0112797:	83 c4 10             	add    $0x10,%esp
c011279a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011279d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01127a1:	75 0a                	jne    c01127ad <sfs_getdirentry+0x29>
        return -E_NO_MEM;
c01127a3:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c01127a8:	e9 49 01 00 00       	jmp    c01128f6 <sfs_getdirentry+0x172>
    }

    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c01127ad:	8b 45 08             	mov    0x8(%ebp),%eax
c01127b0:	8b 40 38             	mov    0x38(%eax),%eax
c01127b3:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01127b6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01127ba:	74 0a                	je     c01127c6 <sfs_getdirentry+0x42>
c01127bc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01127bf:	8b 40 6c             	mov    0x6c(%eax),%eax
c01127c2:	85 c0                	test   %eax,%eax
c01127c4:	74 19                	je     c01127df <sfs_getdirentry+0x5b>
c01127c6:	68 74 83 11 c0       	push   $0xc0118374
c01127cb:	68 1f 81 11 c0       	push   $0xc011811f
c01127d0:	68 3f 03 00 00       	push   $0x33f
c01127d5:	68 b7 80 11 c0       	push   $0xc01180b7
c01127da:	e8 0e dd fe ff       	call   c01004ed <__panic>
c01127df:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01127e2:	89 45 e8             	mov    %eax,-0x18(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c01127e5:	8b 45 08             	mov    0x8(%ebp),%eax
c01127e8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01127eb:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c01127ef:	74 0d                	je     c01127fe <sfs_getdirentry+0x7a>
c01127f1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01127f4:	8b 40 2c             	mov    0x2c(%eax),%eax
c01127f7:	3d 35 12 00 00       	cmp    $0x1235,%eax
c01127fc:	74 19                	je     c0112817 <sfs_getdirentry+0x93>
c01127fe:	68 70 81 11 c0       	push   $0xc0118170
c0112803:	68 1f 81 11 c0       	push   $0xc011811f
c0112808:	68 40 03 00 00       	push   $0x340
c011280d:	68 b7 80 11 c0       	push   $0xc01180b7
c0112812:	e8 d6 dc fe ff       	call   c01004ed <__panic>
c0112817:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011281a:	89 45 e0             	mov    %eax,-0x20(%ebp)

    int ret, slot;
    off_t offset = iob->io_offset;
c011281d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112820:	8b 40 04             	mov    0x4(%eax),%eax
c0112823:	89 45 dc             	mov    %eax,-0x24(%ebp)
    if (offset < 0 || offset % sfs_dentry_size != 0) {
c0112826:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c011282a:	78 0a                	js     c0112836 <sfs_getdirentry+0xb2>
c011282c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011282f:	0f b6 c0             	movzbl %al,%eax
c0112832:	85 c0                	test   %eax,%eax
c0112834:	74 18                	je     c011284e <sfs_getdirentry+0xca>
        kfree(entry);
c0112836:	83 ec 0c             	sub    $0xc,%esp
c0112839:	ff 75 f0             	pushl  -0x10(%ebp)
c011283c:	e8 d9 2a ff ff       	call   c010531a <kfree>
c0112841:	83 c4 10             	add    $0x10,%esp
        return -E_INVAL;
c0112844:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0112849:	e9 a8 00 00 00       	jmp    c01128f6 <sfs_getdirentry+0x172>
    }
    if ((slot = offset / sfs_dentry_size) > sin->din->blocks) {
c011284e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0112851:	c1 e8 08             	shr    $0x8,%eax
c0112854:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0112857:	8b 55 d8             	mov    -0x28(%ebp),%edx
c011285a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011285d:	8b 00                	mov    (%eax),%eax
c011285f:	8b 40 08             	mov    0x8(%eax),%eax
c0112862:	39 c2                	cmp    %eax,%edx
c0112864:	76 15                	jbe    c011287b <sfs_getdirentry+0xf7>
        kfree(entry);
c0112866:	83 ec 0c             	sub    $0xc,%esp
c0112869:	ff 75 f0             	pushl  -0x10(%ebp)
c011286c:	e8 a9 2a ff ff       	call   c010531a <kfree>
c0112871:	83 c4 10             	add    $0x10,%esp
        return -E_NOENT;
c0112874:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
c0112879:	eb 7b                	jmp    c01128f6 <sfs_getdirentry+0x172>
    }
    lock_sin(sin);
c011287b:	83 ec 0c             	sub    $0xc,%esp
c011287e:	ff 75 e0             	pushl  -0x20(%ebp)
c0112881:	e8 89 e7 ff ff       	call   c011100f <lock_sin>
c0112886:	83 c4 10             	add    $0x10,%esp
    if ((ret = sfs_getdirentry_sub_nolock(sfs, sin, slot, entry)) != 0) {
c0112889:	ff 75 f0             	pushl  -0x10(%ebp)
c011288c:	ff 75 d8             	pushl  -0x28(%ebp)
c011288f:	ff 75 e0             	pushl  -0x20(%ebp)
c0112892:	ff 75 e8             	pushl  -0x18(%ebp)
c0112895:	e8 81 fe ff ff       	call   c011271b <sfs_getdirentry_sub_nolock>
c011289a:	83 c4 10             	add    $0x10,%esp
c011289d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01128a0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01128a4:	74 10                	je     c01128b6 <sfs_getdirentry+0x132>
        unlock_sin(sin);
c01128a6:	83 ec 0c             	sub    $0xc,%esp
c01128a9:	ff 75 e0             	pushl  -0x20(%ebp)
c01128ac:	e8 79 e7 ff ff       	call   c011102a <unlock_sin>
c01128b1:	83 c4 10             	add    $0x10,%esp
        goto out;
c01128b4:	eb 2f                	jmp    c01128e5 <sfs_getdirentry+0x161>
    }
    unlock_sin(sin);
c01128b6:	83 ec 0c             	sub    $0xc,%esp
c01128b9:	ff 75 e0             	pushl  -0x20(%ebp)
c01128bc:	e8 69 e7 ff ff       	call   c011102a <unlock_sin>
c01128c1:	83 c4 10             	add    $0x10,%esp
    ret = iobuf_move(iob, entry->name, sfs_dentry_size, 1, NULL);
c01128c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01128c7:	83 c0 04             	add    $0x4,%eax
c01128ca:	83 ec 0c             	sub    $0xc,%esp
c01128cd:	6a 00                	push   $0x0
c01128cf:	6a 01                	push   $0x1
c01128d1:	68 00 01 00 00       	push   $0x100
c01128d6:	50                   	push   %eax
c01128d7:	ff 75 0c             	pushl  0xc(%ebp)
c01128da:	e8 6b 87 ff ff       	call   c010b04a <iobuf_move>
c01128df:	83 c4 20             	add    $0x20,%esp
c01128e2:	89 45 f4             	mov    %eax,-0xc(%ebp)
out:
    kfree(entry);
c01128e5:	83 ec 0c             	sub    $0xc,%esp
c01128e8:	ff 75 f0             	pushl  -0x10(%ebp)
c01128eb:	e8 2a 2a ff ff       	call   c010531a <kfree>
c01128f0:	83 c4 10             	add    $0x10,%esp
    return ret;
c01128f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01128f6:	c9                   	leave  
c01128f7:	c3                   	ret    

c01128f8 <sfs_reclaim>:

/*
 * sfs_reclaim - Free all resources inode occupied . Called when inode is no longer in use. 
 */
static int
sfs_reclaim(struct inode *node) {
c01128f8:	55                   	push   %ebp
c01128f9:	89 e5                	mov    %esp,%ebp
c01128fb:	83 ec 28             	sub    $0x28,%esp
    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c01128fe:	8b 45 08             	mov    0x8(%ebp),%eax
c0112901:	8b 40 38             	mov    0x38(%eax),%eax
c0112904:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0112907:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011290b:	74 0a                	je     c0112917 <sfs_reclaim+0x1f>
c011290d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112910:	8b 40 6c             	mov    0x6c(%eax),%eax
c0112913:	85 c0                	test   %eax,%eax
c0112915:	74 19                	je     c0112930 <sfs_reclaim+0x38>
c0112917:	68 74 83 11 c0       	push   $0xc0118374
c011291c:	68 1f 81 11 c0       	push   $0xc011811f
c0112921:	68 5d 03 00 00       	push   $0x35d
c0112926:	68 b7 80 11 c0       	push   $0xc01180b7
c011292b:	e8 bd db fe ff       	call   c01004ed <__panic>
c0112930:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112933:	89 45 ec             	mov    %eax,-0x14(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c0112936:	8b 45 08             	mov    0x8(%ebp),%eax
c0112939:	89 45 e8             	mov    %eax,-0x18(%ebp)
c011293c:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0112940:	74 0d                	je     c011294f <sfs_reclaim+0x57>
c0112942:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112945:	8b 40 2c             	mov    0x2c(%eax),%eax
c0112948:	3d 35 12 00 00       	cmp    $0x1235,%eax
c011294d:	74 19                	je     c0112968 <sfs_reclaim+0x70>
c011294f:	68 70 81 11 c0       	push   $0xc0118170
c0112954:	68 1f 81 11 c0       	push   $0xc011811f
c0112959:	68 5e 03 00 00       	push   $0x35e
c011295e:	68 b7 80 11 c0       	push   $0xc01180b7
c0112963:	e8 85 db fe ff       	call   c01004ed <__panic>
c0112968:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011296b:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    int  ret = -E_BUSY;
c011296e:	c7 45 f4 f1 ff ff ff 	movl   $0xfffffff1,-0xc(%ebp)
    uint32_t ent;
    lock_sfs_fs(sfs);
c0112975:	83 ec 0c             	sub    $0xc,%esp
c0112978:	ff 75 ec             	pushl  -0x14(%ebp)
c011297b:	e8 04 de ff ff       	call   c0110784 <lock_sfs_fs>
c0112980:	83 c4 10             	add    $0x10,%esp
    assert(sin->reclaim_count > 0);
c0112983:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0112986:	8b 40 0c             	mov    0xc(%eax),%eax
c0112989:	85 c0                	test   %eax,%eax
c011298b:	7f 19                	jg     c01129a6 <sfs_reclaim+0xae>
c011298d:	68 2e 84 11 c0       	push   $0xc011842e
c0112992:	68 1f 81 11 c0       	push   $0xc011811f
c0112997:	68 63 03 00 00       	push   $0x363
c011299c:	68 b7 80 11 c0       	push   $0xc01180b7
c01129a1:	e8 47 db fe ff       	call   c01004ed <__panic>
    if ((-- sin->reclaim_count) != 0 || inode_ref_count(node) != 0) {
c01129a6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01129a9:	8b 40 0c             	mov    0xc(%eax),%eax
c01129ac:	8d 50 ff             	lea    -0x1(%eax),%edx
c01129af:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01129b2:	89 50 0c             	mov    %edx,0xc(%eax)
c01129b5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01129b8:	8b 40 0c             	mov    0xc(%eax),%eax
c01129bb:	85 c0                	test   %eax,%eax
c01129bd:	0f 85 9b 01 00 00    	jne    c0112b5e <sfs_reclaim+0x266>
c01129c3:	83 ec 0c             	sub    $0xc,%esp
c01129c6:	ff 75 08             	pushl  0x8(%ebp)
c01129c9:	e8 36 e6 ff ff       	call   c0111004 <inode_ref_count>
c01129ce:	83 c4 10             	add    $0x10,%esp
c01129d1:	85 c0                	test   %eax,%eax
c01129d3:	0f 85 85 01 00 00    	jne    c0112b5e <sfs_reclaim+0x266>
        goto failed_unlock;
    }
    if (sin->din->nlinks == 0) {
c01129d9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01129dc:	8b 00                	mov    (%eax),%eax
c01129de:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c01129e2:	66 85 c0             	test   %ax,%ax
c01129e5:	75 72                	jne    c0112a59 <sfs_reclaim+0x161>
        if ((ret = vop_truncate(node, 0)) != 0) {
c01129e7:	8b 45 08             	mov    0x8(%ebp),%eax
c01129ea:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01129ed:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01129f1:	74 17                	je     c0112a0a <sfs_reclaim+0x112>
c01129f3:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01129f6:	8b 40 3c             	mov    0x3c(%eax),%eax
c01129f9:	85 c0                	test   %eax,%eax
c01129fb:	74 0d                	je     c0112a0a <sfs_reclaim+0x112>
c01129fd:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112a00:	8b 40 3c             	mov    0x3c(%eax),%eax
c0112a03:	8b 40 30             	mov    0x30(%eax),%eax
c0112a06:	85 c0                	test   %eax,%eax
c0112a08:	75 19                	jne    c0112a23 <sfs_reclaim+0x12b>
c0112a0a:	68 48 84 11 c0       	push   $0xc0118448
c0112a0f:	68 1f 81 11 c0       	push   $0xc011811f
c0112a14:	68 68 03 00 00       	push   $0x368
c0112a19:	68 b7 80 11 c0       	push   $0xc01180b7
c0112a1e:	e8 ca da fe ff       	call   c01004ed <__panic>
c0112a23:	83 ec 08             	sub    $0x8,%esp
c0112a26:	68 99 84 11 c0       	push   $0xc0118499
c0112a2b:	ff 75 e0             	pushl  -0x20(%ebp)
c0112a2e:	e8 fa ca ff ff       	call   c010f52d <inode_check>
c0112a33:	83 c4 10             	add    $0x10,%esp
c0112a36:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112a39:	8b 40 3c             	mov    0x3c(%eax),%eax
c0112a3c:	8b 40 30             	mov    0x30(%eax),%eax
c0112a3f:	83 ec 08             	sub    $0x8,%esp
c0112a42:	6a 00                	push   $0x0
c0112a44:	ff 75 08             	pushl  0x8(%ebp)
c0112a47:	ff d0                	call   *%eax
c0112a49:	83 c4 10             	add    $0x10,%esp
c0112a4c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112a4f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112a53:	0f 85 01 01 00 00    	jne    c0112b5a <sfs_reclaim+0x262>
            goto failed_unlock;
        }
    }
    if (sin->dirty) {
c0112a59:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0112a5c:	8b 40 08             	mov    0x8(%eax),%eax
c0112a5f:	85 c0                	test   %eax,%eax
c0112a61:	74 70                	je     c0112ad3 <sfs_reclaim+0x1db>
        if ((ret = vop_fsync(node)) != 0) {
c0112a63:	8b 45 08             	mov    0x8(%ebp),%eax
c0112a66:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0112a69:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0112a6d:	74 17                	je     c0112a86 <sfs_reclaim+0x18e>
c0112a6f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0112a72:	8b 40 3c             	mov    0x3c(%eax),%eax
c0112a75:	85 c0                	test   %eax,%eax
c0112a77:	74 0d                	je     c0112a86 <sfs_reclaim+0x18e>
c0112a79:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0112a7c:	8b 40 3c             	mov    0x3c(%eax),%eax
c0112a7f:	8b 40 18             	mov    0x18(%eax),%eax
c0112a82:	85 c0                	test   %eax,%eax
c0112a84:	75 19                	jne    c0112a9f <sfs_reclaim+0x1a7>
c0112a86:	68 04 83 11 c0       	push   $0xc0118304
c0112a8b:	68 1f 81 11 c0       	push   $0xc011811f
c0112a90:	68 6d 03 00 00       	push   $0x36d
c0112a95:	68 b7 80 11 c0       	push   $0xc01180b7
c0112a9a:	e8 4e da fe ff       	call   c01004ed <__panic>
c0112a9f:	83 ec 08             	sub    $0x8,%esp
c0112aa2:	68 52 83 11 c0       	push   $0xc0118352
c0112aa7:	ff 75 dc             	pushl  -0x24(%ebp)
c0112aaa:	e8 7e ca ff ff       	call   c010f52d <inode_check>
c0112aaf:	83 c4 10             	add    $0x10,%esp
c0112ab2:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0112ab5:	8b 40 3c             	mov    0x3c(%eax),%eax
c0112ab8:	8b 40 18             	mov    0x18(%eax),%eax
c0112abb:	83 ec 0c             	sub    $0xc,%esp
c0112abe:	ff 75 08             	pushl  0x8(%ebp)
c0112ac1:	ff d0                	call   *%eax
c0112ac3:	83 c4 10             	add    $0x10,%esp
c0112ac6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112ac9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112acd:	0f 85 8a 00 00 00    	jne    c0112b5d <sfs_reclaim+0x265>
            goto failed_unlock;
        }
    }
    sfs_remove_links(sin);
c0112ad3:	83 ec 0c             	sub    $0xc,%esp
c0112ad6:	ff 75 e4             	pushl  -0x1c(%ebp)
c0112ad9:	e8 99 e6 ff ff       	call   c0111177 <sfs_remove_links>
c0112ade:	83 c4 10             	add    $0x10,%esp
    unlock_sfs_fs(sfs);
c0112ae1:	83 ec 0c             	sub    $0xc,%esp
c0112ae4:	ff 75 ec             	pushl  -0x14(%ebp)
c0112ae7:	e8 ce dc ff ff       	call   c01107ba <unlock_sfs_fs>
c0112aec:	83 c4 10             	add    $0x10,%esp

    if (sin->din->nlinks == 0) {
c0112aef:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0112af2:	8b 00                	mov    (%eax),%eax
c0112af4:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c0112af8:	66 85 c0             	test   %ax,%ax
c0112afb:	75 37                	jne    c0112b34 <sfs_reclaim+0x23c>
        sfs_block_free(sfs, sin->ino);
c0112afd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0112b00:	8b 40 04             	mov    0x4(%eax),%eax
c0112b03:	83 ec 08             	sub    $0x8,%esp
c0112b06:	50                   	push   %eax
c0112b07:	ff 75 ec             	pushl  -0x14(%ebp)
c0112b0a:	e8 c5 e7 ff ff       	call   c01112d4 <sfs_block_free>
c0112b0f:	83 c4 10             	add    $0x10,%esp
        if ((ent = sin->din->indirect) != 0) {
c0112b12:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0112b15:	8b 00                	mov    (%eax),%eax
c0112b17:	8b 40 3c             	mov    0x3c(%eax),%eax
c0112b1a:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0112b1d:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c0112b21:	74 11                	je     c0112b34 <sfs_reclaim+0x23c>
            sfs_block_free(sfs, ent);
c0112b23:	83 ec 08             	sub    $0x8,%esp
c0112b26:	ff 75 d8             	pushl  -0x28(%ebp)
c0112b29:	ff 75 ec             	pushl  -0x14(%ebp)
c0112b2c:	e8 a3 e7 ff ff       	call   c01112d4 <sfs_block_free>
c0112b31:	83 c4 10             	add    $0x10,%esp
        }
    }
    kfree(sin->din);
c0112b34:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0112b37:	8b 00                	mov    (%eax),%eax
c0112b39:	83 ec 0c             	sub    $0xc,%esp
c0112b3c:	50                   	push   %eax
c0112b3d:	e8 d8 27 ff ff       	call   c010531a <kfree>
c0112b42:	83 c4 10             	add    $0x10,%esp
    vop_kill(node);
c0112b45:	83 ec 0c             	sub    $0xc,%esp
c0112b48:	ff 75 08             	pushl  0x8(%ebp)
c0112b4b:	e8 a7 c7 ff ff       	call   c010f2f7 <inode_kill>
c0112b50:	83 c4 10             	add    $0x10,%esp
    return 0;
c0112b53:	b8 00 00 00 00       	mov    $0x0,%eax
c0112b58:	eb 15                	jmp    c0112b6f <sfs_reclaim+0x277>
    if ((-- sin->reclaim_count) != 0 || inode_ref_count(node) != 0) {
        goto failed_unlock;
    }
    if (sin->din->nlinks == 0) {
        if ((ret = vop_truncate(node, 0)) != 0) {
            goto failed_unlock;
c0112b5a:	90                   	nop
c0112b5b:	eb 01                	jmp    c0112b5e <sfs_reclaim+0x266>
        }
    }
    if (sin->dirty) {
        if ((ret = vop_fsync(node)) != 0) {
            goto failed_unlock;
c0112b5d:	90                   	nop
    kfree(sin->din);
    vop_kill(node);
    return 0;

failed_unlock:
    unlock_sfs_fs(sfs);
c0112b5e:	83 ec 0c             	sub    $0xc,%esp
c0112b61:	ff 75 ec             	pushl  -0x14(%ebp)
c0112b64:	e8 51 dc ff ff       	call   c01107ba <unlock_sfs_fs>
c0112b69:	83 c4 10             	add    $0x10,%esp
    return ret;
c0112b6c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0112b6f:	c9                   	leave  
c0112b70:	c3                   	ret    

c0112b71 <sfs_gettype>:

/*
 * sfs_gettype - Return type of file. The values for file types are in sfs.h.
 */
static int
sfs_gettype(struct inode *node, uint32_t *type_store) {
c0112b71:	55                   	push   %ebp
c0112b72:	89 e5                	mov    %esp,%ebp
c0112b74:	83 ec 18             	sub    $0x18,%esp
    struct sfs_disk_inode *din = vop_info(node, sfs_inode)->din;
c0112b77:	8b 45 08             	mov    0x8(%ebp),%eax
c0112b7a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112b7d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112b81:	74 0d                	je     c0112b90 <sfs_gettype+0x1f>
c0112b83:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112b86:	8b 40 2c             	mov    0x2c(%eax),%eax
c0112b89:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0112b8e:	74 19                	je     c0112ba9 <sfs_gettype+0x38>
c0112b90:	68 70 81 11 c0       	push   $0xc0118170
c0112b95:	68 1f 81 11 c0       	push   $0xc011811f
c0112b9a:	68 88 03 00 00       	push   $0x388
c0112b9f:	68 b7 80 11 c0       	push   $0xc01180b7
c0112ba4:	e8 44 d9 fe ff       	call   c01004ed <__panic>
c0112ba9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112bac:	8b 00                	mov    (%eax),%eax
c0112bae:	89 45 f0             	mov    %eax,-0x10(%ebp)
    switch (din->type) {
c0112bb1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112bb4:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c0112bb8:	0f b7 c0             	movzwl %ax,%eax
c0112bbb:	83 f8 02             	cmp    $0x2,%eax
c0112bbe:	74 0c                	je     c0112bcc <sfs_gettype+0x5b>
c0112bc0:	83 f8 03             	cmp    $0x3,%eax
c0112bc3:	74 27                	je     c0112bec <sfs_gettype+0x7b>
c0112bc5:	83 f8 01             	cmp    $0x1,%eax
c0112bc8:	74 12                	je     c0112bdc <sfs_gettype+0x6b>
c0112bca:	eb 30                	jmp    c0112bfc <sfs_gettype+0x8b>
    case SFS_TYPE_DIR:
        *type_store = S_IFDIR;
c0112bcc:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112bcf:	c7 00 00 20 00 00    	movl   $0x2000,(%eax)
        return 0;
c0112bd5:	b8 00 00 00 00       	mov    $0x0,%eax
c0112bda:	eb 3f                	jmp    c0112c1b <sfs_gettype+0xaa>
    case SFS_TYPE_FILE:
        *type_store = S_IFREG;
c0112bdc:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112bdf:	c7 00 00 10 00 00    	movl   $0x1000,(%eax)
        return 0;
c0112be5:	b8 00 00 00 00       	mov    $0x0,%eax
c0112bea:	eb 2f                	jmp    c0112c1b <sfs_gettype+0xaa>
    case SFS_TYPE_LINK:
        *type_store = S_IFLNK;
c0112bec:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112bef:	c7 00 00 30 00 00    	movl   $0x3000,(%eax)
        return 0;
c0112bf5:	b8 00 00 00 00       	mov    $0x0,%eax
c0112bfa:	eb 1f                	jmp    c0112c1b <sfs_gettype+0xaa>
    }
    panic("invalid file type %d.\n", din->type);
c0112bfc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112bff:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c0112c03:	0f b7 c0             	movzwl %ax,%eax
c0112c06:	50                   	push   %eax
c0112c07:	68 a0 80 11 c0       	push   $0xc01180a0
c0112c0c:	68 94 03 00 00       	push   $0x394
c0112c11:	68 b7 80 11 c0       	push   $0xc01180b7
c0112c16:	e8 d2 d8 fe ff       	call   c01004ed <__panic>
}
c0112c1b:	c9                   	leave  
c0112c1c:	c3                   	ret    

c0112c1d <sfs_tryseek>:

/* 
 * sfs_tryseek - Check if seeking to the specified position within the file is legal.
 */
static int
sfs_tryseek(struct inode *node, off_t pos) {
c0112c1d:	55                   	push   %ebp
c0112c1e:	89 e5                	mov    %esp,%ebp
c0112c20:	83 ec 18             	sub    $0x18,%esp
    if (pos < 0 || pos >= SFS_MAX_FILE_SIZE) {
c0112c23:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0112c27:	78 0a                	js     c0112c33 <sfs_tryseek+0x16>
c0112c29:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112c2c:	3d ff ff ff 07       	cmp    $0x7ffffff,%eax
c0112c31:	76 0a                	jbe    c0112c3d <sfs_tryseek+0x20>
        return -E_INVAL;
c0112c33:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0112c38:	e9 b3 00 00 00       	jmp    c0112cf0 <sfs_tryseek+0xd3>
    }
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c0112c3d:	8b 45 08             	mov    0x8(%ebp),%eax
c0112c40:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112c43:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112c47:	74 0d                	je     c0112c56 <sfs_tryseek+0x39>
c0112c49:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112c4c:	8b 40 2c             	mov    0x2c(%eax),%eax
c0112c4f:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0112c54:	74 19                	je     c0112c6f <sfs_tryseek+0x52>
c0112c56:	68 70 81 11 c0       	push   $0xc0118170
c0112c5b:	68 1f 81 11 c0       	push   $0xc011811f
c0112c60:	68 9f 03 00 00       	push   $0x39f
c0112c65:	68 b7 80 11 c0       	push   $0xc01180b7
c0112c6a:	e8 7e d8 fe ff       	call   c01004ed <__panic>
c0112c6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112c72:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pos > sin->din->size) {
c0112c75:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112c78:	8b 00                	mov    (%eax),%eax
c0112c7a:	8b 10                	mov    (%eax),%edx
c0112c7c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112c7f:	39 c2                	cmp    %eax,%edx
c0112c81:	73 68                	jae    c0112ceb <sfs_tryseek+0xce>
        return vop_truncate(node, pos);
c0112c83:	8b 45 08             	mov    0x8(%ebp),%eax
c0112c86:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0112c89:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0112c8d:	74 17                	je     c0112ca6 <sfs_tryseek+0x89>
c0112c8f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112c92:	8b 40 3c             	mov    0x3c(%eax),%eax
c0112c95:	85 c0                	test   %eax,%eax
c0112c97:	74 0d                	je     c0112ca6 <sfs_tryseek+0x89>
c0112c99:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112c9c:	8b 40 3c             	mov    0x3c(%eax),%eax
c0112c9f:	8b 40 30             	mov    0x30(%eax),%eax
c0112ca2:	85 c0                	test   %eax,%eax
c0112ca4:	75 19                	jne    c0112cbf <sfs_tryseek+0xa2>
c0112ca6:	68 48 84 11 c0       	push   $0xc0118448
c0112cab:	68 1f 81 11 c0       	push   $0xc011811f
c0112cb0:	68 a1 03 00 00       	push   $0x3a1
c0112cb5:	68 b7 80 11 c0       	push   $0xc01180b7
c0112cba:	e8 2e d8 fe ff       	call   c01004ed <__panic>
c0112cbf:	83 ec 08             	sub    $0x8,%esp
c0112cc2:	68 99 84 11 c0       	push   $0xc0118499
c0112cc7:	ff 75 ec             	pushl  -0x14(%ebp)
c0112cca:	e8 5e c8 ff ff       	call   c010f52d <inode_check>
c0112ccf:	83 c4 10             	add    $0x10,%esp
c0112cd2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112cd5:	8b 40 3c             	mov    0x3c(%eax),%eax
c0112cd8:	8b 40 30             	mov    0x30(%eax),%eax
c0112cdb:	83 ec 08             	sub    $0x8,%esp
c0112cde:	ff 75 0c             	pushl  0xc(%ebp)
c0112ce1:	ff 75 08             	pushl  0x8(%ebp)
c0112ce4:	ff d0                	call   *%eax
c0112ce6:	83 c4 10             	add    $0x10,%esp
c0112ce9:	eb 05                	jmp    c0112cf0 <sfs_tryseek+0xd3>
    }
    return 0;
c0112ceb:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0112cf0:	c9                   	leave  
c0112cf1:	c3                   	ret    

c0112cf2 <sfs_truncfile>:

/*
 * sfs_truncfile : reszie the file with new length
 */
static int
sfs_truncfile(struct inode *node, off_t len) {
c0112cf2:	55                   	push   %ebp
c0112cf3:	89 e5                	mov    %esp,%ebp
c0112cf5:	83 ec 38             	sub    $0x38,%esp
    if (len < 0 || len > SFS_MAX_FILE_SIZE) {
c0112cf8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0112cfc:	78 0a                	js     c0112d08 <sfs_truncfile+0x16>
c0112cfe:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112d01:	3d 00 00 00 08       	cmp    $0x8000000,%eax
c0112d06:	76 0a                	jbe    c0112d12 <sfs_truncfile+0x20>
        return -E_INVAL;
c0112d08:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0112d0d:	e9 9e 01 00 00       	jmp    c0112eb0 <sfs_truncfile+0x1be>
    }
    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c0112d12:	8b 45 08             	mov    0x8(%ebp),%eax
c0112d15:	8b 40 38             	mov    0x38(%eax),%eax
c0112d18:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0112d1b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0112d1f:	74 0a                	je     c0112d2b <sfs_truncfile+0x39>
c0112d21:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112d24:	8b 40 6c             	mov    0x6c(%eax),%eax
c0112d27:	85 c0                	test   %eax,%eax
c0112d29:	74 19                	je     c0112d44 <sfs_truncfile+0x52>
c0112d2b:	68 74 83 11 c0       	push   $0xc0118374
c0112d30:	68 1f 81 11 c0       	push   $0xc011811f
c0112d35:	68 ae 03 00 00       	push   $0x3ae
c0112d3a:	68 b7 80 11 c0       	push   $0xc01180b7
c0112d3f:	e8 a9 d7 fe ff       	call   c01004ed <__panic>
c0112d44:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112d47:	89 45 e8             	mov    %eax,-0x18(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c0112d4a:	8b 45 08             	mov    0x8(%ebp),%eax
c0112d4d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0112d50:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0112d54:	74 0d                	je     c0112d63 <sfs_truncfile+0x71>
c0112d56:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0112d59:	8b 40 2c             	mov    0x2c(%eax),%eax
c0112d5c:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0112d61:	74 19                	je     c0112d7c <sfs_truncfile+0x8a>
c0112d63:	68 70 81 11 c0       	push   $0xc0118170
c0112d68:	68 1f 81 11 c0       	push   $0xc011811f
c0112d6d:	68 af 03 00 00       	push   $0x3af
c0112d72:	68 b7 80 11 c0       	push   $0xc01180b7
c0112d77:	e8 71 d7 fe ff       	call   c01004ed <__panic>
c0112d7c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0112d7f:	89 45 e0             	mov    %eax,-0x20(%ebp)
    struct sfs_disk_inode *din = sin->din;
c0112d82:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112d85:	8b 00                	mov    (%eax),%eax
c0112d87:	89 45 dc             	mov    %eax,-0x24(%ebp)

    int ret = 0;
c0112d8a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//new number of disk blocks of file
    uint32_t nblks, tblks = ROUNDUP_DIV(len, SFS_BLKSIZE);
c0112d91:	c7 45 d8 00 10 00 00 	movl   $0x1000,-0x28(%ebp)
c0112d98:	8b 55 0c             	mov    0xc(%ebp),%edx
c0112d9b:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0112d9e:	01 d0                	add    %edx,%eax
c0112da0:	83 e8 01             	sub    $0x1,%eax
c0112da3:	ba 00 00 00 00       	mov    $0x0,%edx
c0112da8:	f7 75 d8             	divl   -0x28(%ebp)
c0112dab:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    if (din->size == len) {
c0112dae:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0112db1:	8b 10                	mov    (%eax),%edx
c0112db3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112db6:	39 c2                	cmp    %eax,%edx
c0112db8:	75 2e                	jne    c0112de8 <sfs_truncfile+0xf6>
        assert(tblks == din->blocks);
c0112dba:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0112dbd:	8b 40 08             	mov    0x8(%eax),%eax
c0112dc0:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0112dc3:	74 19                	je     c0112dde <sfs_truncfile+0xec>
c0112dc5:	68 a2 84 11 c0       	push   $0xc01184a2
c0112dca:	68 1f 81 11 c0       	push   $0xc011811f
c0112dcf:	68 b6 03 00 00       	push   $0x3b6
c0112dd4:	68 b7 80 11 c0       	push   $0xc01180b7
c0112dd9:	e8 0f d7 fe ff       	call   c01004ed <__panic>
        return 0;
c0112dde:	b8 00 00 00 00       	mov    $0x0,%eax
c0112de3:	e9 c8 00 00 00       	jmp    c0112eb0 <sfs_truncfile+0x1be>
    }

    lock_sin(sin);
c0112de8:	83 ec 0c             	sub    $0xc,%esp
c0112deb:	ff 75 e0             	pushl  -0x20(%ebp)
c0112dee:	e8 1c e2 ff ff       	call   c011100f <lock_sin>
c0112df3:	83 c4 10             	add    $0x10,%esp
	// old number of disk blocks of file
    nblks = din->blocks;
c0112df6:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0112df9:	8b 40 08             	mov    0x8(%eax),%eax
c0112dfc:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (nblks < tblks) {
c0112dff:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112e02:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0112e05:	73 2c                	jae    c0112e33 <sfs_truncfile+0x141>
		// try to enlarge the file size by add new disk block at the end of file
        while (nblks != tblks) {
c0112e07:	eb 20                	jmp    c0112e29 <sfs_truncfile+0x137>
            if ((ret = sfs_bmap_load_nolock(sfs, sin, nblks, NULL)) != 0) {
c0112e09:	6a 00                	push   $0x0
c0112e0b:	ff 75 f0             	pushl  -0x10(%ebp)
c0112e0e:	ff 75 e0             	pushl  -0x20(%ebp)
c0112e11:	ff 75 e8             	pushl  -0x18(%ebp)
c0112e14:	e8 ea eb ff ff       	call   c0111a03 <sfs_bmap_load_nolock>
c0112e19:	83 c4 10             	add    $0x10,%esp
c0112e1c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112e1f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112e23:	75 76                	jne    c0112e9b <sfs_truncfile+0x1a9>
                goto out_unlock;
            }
            nblks ++;
c0112e25:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
    lock_sin(sin);
	// old number of disk blocks of file
    nblks = din->blocks;
    if (nblks < tblks) {
		// try to enlarge the file size by add new disk block at the end of file
        while (nblks != tblks) {
c0112e29:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112e2c:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0112e2f:	75 d8                	jne    c0112e09 <sfs_truncfile+0x117>
c0112e31:	eb 30                	jmp    c0112e63 <sfs_truncfile+0x171>
                goto out_unlock;
            }
            nblks ++;
        }
    }
    else if (tblks < nblks) {
c0112e33:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0112e36:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0112e39:	73 28                	jae    c0112e63 <sfs_truncfile+0x171>
		// try to reduce the file size 
        while (tblks != nblks) {
c0112e3b:	eb 1e                	jmp    c0112e5b <sfs_truncfile+0x169>
            if ((ret = sfs_bmap_truncate_nolock(sfs, sin)) != 0) {
c0112e3d:	83 ec 08             	sub    $0x8,%esp
c0112e40:	ff 75 e0             	pushl  -0x20(%ebp)
c0112e43:	ff 75 e8             	pushl  -0x18(%ebp)
c0112e46:	e8 7e ec ff ff       	call   c0111ac9 <sfs_bmap_truncate_nolock>
c0112e4b:	83 c4 10             	add    $0x10,%esp
c0112e4e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112e51:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112e55:	75 47                	jne    c0112e9e <sfs_truncfile+0x1ac>
                goto out_unlock;
            }
            nblks --;
c0112e57:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)
            nblks ++;
        }
    }
    else if (tblks < nblks) {
		// try to reduce the file size 
        while (tblks != nblks) {
c0112e5b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0112e5e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0112e61:	75 da                	jne    c0112e3d <sfs_truncfile+0x14b>
                goto out_unlock;
            }
            nblks --;
        }
    }
    assert(din->blocks == tblks);
c0112e63:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0112e66:	8b 40 08             	mov    0x8(%eax),%eax
c0112e69:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0112e6c:	74 19                	je     c0112e87 <sfs_truncfile+0x195>
c0112e6e:	68 b7 84 11 c0       	push   $0xc01184b7
c0112e73:	68 1f 81 11 c0       	push   $0xc011811f
c0112e78:	68 cf 03 00 00       	push   $0x3cf
c0112e7d:	68 b7 80 11 c0       	push   $0xc01180b7
c0112e82:	e8 66 d6 fe ff       	call   c01004ed <__panic>
    din->size = len;
c0112e87:	8b 55 0c             	mov    0xc(%ebp),%edx
c0112e8a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0112e8d:	89 10                	mov    %edx,(%eax)
    sin->dirty = 1;
c0112e8f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112e92:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
c0112e99:	eb 04                	jmp    c0112e9f <sfs_truncfile+0x1ad>
    nblks = din->blocks;
    if (nblks < tblks) {
		// try to enlarge the file size by add new disk block at the end of file
        while (nblks != tblks) {
            if ((ret = sfs_bmap_load_nolock(sfs, sin, nblks, NULL)) != 0) {
                goto out_unlock;
c0112e9b:	90                   	nop
c0112e9c:	eb 01                	jmp    c0112e9f <sfs_truncfile+0x1ad>
    }
    else if (tblks < nblks) {
		// try to reduce the file size 
        while (tblks != nblks) {
            if ((ret = sfs_bmap_truncate_nolock(sfs, sin)) != 0) {
                goto out_unlock;
c0112e9e:	90                   	nop
    assert(din->blocks == tblks);
    din->size = len;
    sin->dirty = 1;

out_unlock:
    unlock_sin(sin);
c0112e9f:	83 ec 0c             	sub    $0xc,%esp
c0112ea2:	ff 75 e0             	pushl  -0x20(%ebp)
c0112ea5:	e8 80 e1 ff ff       	call   c011102a <unlock_sin>
c0112eaa:	83 c4 10             	add    $0x10,%esp
    return ret;
c0112ead:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0112eb0:	c9                   	leave  
c0112eb1:	c3                   	ret    

c0112eb2 <sfs_lookup>:
 * sfs_lookup - Parse path relative to the passed directory
 *              DIR, and hand back the inode for the file it
 *              refers to.
 */
static int
sfs_lookup(struct inode *node, char *path, struct inode **node_store) {
c0112eb2:	55                   	push   %ebp
c0112eb3:	89 e5                	mov    %esp,%ebp
c0112eb5:	83 ec 28             	sub    $0x28,%esp
    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c0112eb8:	8b 45 08             	mov    0x8(%ebp),%eax
c0112ebb:	8b 40 38             	mov    0x38(%eax),%eax
c0112ebe:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112ec1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112ec5:	74 0a                	je     c0112ed1 <sfs_lookup+0x1f>
c0112ec7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112eca:	8b 40 6c             	mov    0x6c(%eax),%eax
c0112ecd:	85 c0                	test   %eax,%eax
c0112ecf:	74 19                	je     c0112eea <sfs_lookup+0x38>
c0112ed1:	68 74 83 11 c0       	push   $0xc0118374
c0112ed6:	68 1f 81 11 c0       	push   $0xc011811f
c0112edb:	68 df 03 00 00       	push   $0x3df
c0112ee0:	68 b7 80 11 c0       	push   $0xc01180b7
c0112ee5:	e8 03 d6 fe ff       	call   c01004ed <__panic>
c0112eea:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112eed:	89 45 f0             	mov    %eax,-0x10(%ebp)
    assert(*path != '\0' && *path != '/');
c0112ef0:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112ef3:	0f b6 00             	movzbl (%eax),%eax
c0112ef6:	84 c0                	test   %al,%al
c0112ef8:	74 0a                	je     c0112f04 <sfs_lookup+0x52>
c0112efa:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112efd:	0f b6 00             	movzbl (%eax),%eax
c0112f00:	3c 2f                	cmp    $0x2f,%al
c0112f02:	75 19                	jne    c0112f1d <sfs_lookup+0x6b>
c0112f04:	68 cc 84 11 c0       	push   $0xc01184cc
c0112f09:	68 1f 81 11 c0       	push   $0xc011811f
c0112f0e:	68 e0 03 00 00       	push   $0x3e0
c0112f13:	68 b7 80 11 c0       	push   $0xc01180b7
c0112f18:	e8 d0 d5 fe ff       	call   c01004ed <__panic>
    vop_ref_inc(node);
c0112f1d:	83 ec 0c             	sub    $0xc,%esp
c0112f20:	ff 75 08             	pushl  0x8(%ebp)
c0112f23:	e8 33 c4 ff ff       	call   c010f35b <inode_ref_inc>
c0112f28:	83 c4 10             	add    $0x10,%esp
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c0112f2b:	8b 45 08             	mov    0x8(%ebp),%eax
c0112f2e:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0112f31:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0112f35:	74 0d                	je     c0112f44 <sfs_lookup+0x92>
c0112f37:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112f3a:	8b 40 2c             	mov    0x2c(%eax),%eax
c0112f3d:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0112f42:	74 19                	je     c0112f5d <sfs_lookup+0xab>
c0112f44:	68 70 81 11 c0       	push   $0xc0118170
c0112f49:	68 1f 81 11 c0       	push   $0xc011811f
c0112f4e:	68 e2 03 00 00       	push   $0x3e2
c0112f53:	68 b7 80 11 c0       	push   $0xc01180b7
c0112f58:	e8 90 d5 fe ff       	call   c01004ed <__panic>
c0112f5d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112f60:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (sin->din->type != SFS_TYPE_DIR) {
c0112f63:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112f66:	8b 00                	mov    (%eax),%eax
c0112f68:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c0112f6c:	66 83 f8 02          	cmp    $0x2,%ax
c0112f70:	74 15                	je     c0112f87 <sfs_lookup+0xd5>
        vop_ref_dec(node);
c0112f72:	83 ec 0c             	sub    $0xc,%esp
c0112f75:	ff 75 08             	pushl  0x8(%ebp)
c0112f78:	e8 f8 c3 ff ff       	call   c010f375 <inode_ref_dec>
c0112f7d:	83 c4 10             	add    $0x10,%esp
        return -E_NOTDIR;
c0112f80:	b8 ee ff ff ff       	mov    $0xffffffee,%eax
c0112f85:	eb 43                	jmp    c0112fca <sfs_lookup+0x118>
    }
    struct inode *subnode;
    int ret = sfs_lookup_once(sfs, sin, path, &subnode, NULL);
c0112f87:	83 ec 0c             	sub    $0xc,%esp
c0112f8a:	6a 00                	push   $0x0
c0112f8c:	8d 45 e0             	lea    -0x20(%ebp),%eax
c0112f8f:	50                   	push   %eax
c0112f90:	ff 75 0c             	pushl  0xc(%ebp)
c0112f93:	ff 75 e8             	pushl  -0x18(%ebp)
c0112f96:	ff 75 f0             	pushl  -0x10(%ebp)
c0112f99:	e8 eb ed ff ff       	call   c0111d89 <sfs_lookup_once>
c0112f9e:	83 c4 20             	add    $0x20,%esp
c0112fa1:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    vop_ref_dec(node);
c0112fa4:	83 ec 0c             	sub    $0xc,%esp
c0112fa7:	ff 75 08             	pushl  0x8(%ebp)
c0112faa:	e8 c6 c3 ff ff       	call   c010f375 <inode_ref_dec>
c0112faf:	83 c4 10             	add    $0x10,%esp
    if (ret != 0) {
c0112fb2:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0112fb6:	74 05                	je     c0112fbd <sfs_lookup+0x10b>
        return ret;
c0112fb8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0112fbb:	eb 0d                	jmp    c0112fca <sfs_lookup+0x118>
    }
    *node_store = subnode;
c0112fbd:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0112fc0:	8b 45 10             	mov    0x10(%ebp),%eax
c0112fc3:	89 10                	mov    %edx,(%eax)
    return 0;
c0112fc5:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0112fca:	c9                   	leave  
c0112fcb:	c3                   	ret    

c0112fcc <bitmap_create>:
    WORD_TYPE *map;
};

// bitmap_create - allocate a new bitmap object.
struct bitmap *
bitmap_create(uint32_t nbits) {
c0112fcc:	55                   	push   %ebp
c0112fcd:	89 e5                	mov    %esp,%ebp
c0112fcf:	56                   	push   %esi
c0112fd0:	53                   	push   %ebx
c0112fd1:	83 ec 20             	sub    $0x20,%esp
    static_assert(WORD_BITS != 0);
    assert(nbits != 0 && nbits + WORD_BITS > nbits);
c0112fd4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0112fd8:	74 0b                	je     c0112fe5 <bitmap_create+0x19>
c0112fda:	8b 45 08             	mov    0x8(%ebp),%eax
c0112fdd:	83 c0 20             	add    $0x20,%eax
c0112fe0:	3b 45 08             	cmp    0x8(%ebp),%eax
c0112fe3:	77 16                	ja     c0112ffb <bitmap_create+0x2f>
c0112fe5:	68 ec 84 11 c0       	push   $0xc01184ec
c0112fea:	68 14 85 11 c0       	push   $0xc0118514
c0112fef:	6a 15                	push   $0x15
c0112ff1:	68 29 85 11 c0       	push   $0xc0118529
c0112ff6:	e8 f2 d4 fe ff       	call   c01004ed <__panic>

    struct bitmap *bitmap;
    if ((bitmap = kmalloc(sizeof(struct bitmap))) == NULL) {
c0112ffb:	83 ec 0c             	sub    $0xc,%esp
c0112ffe:	6a 0c                	push   $0xc
c0113000:	e8 fd 22 ff ff       	call   c0105302 <kmalloc>
c0113005:	83 c4 10             	add    $0x10,%esp
c0113008:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011300b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011300f:	75 0a                	jne    c011301b <bitmap_create+0x4f>
        return NULL;
c0113011:	b8 00 00 00 00       	mov    $0x0,%eax
c0113016:	e9 28 01 00 00       	jmp    c0113143 <bitmap_create+0x177>
    }

    uint32_t nwords = ROUNDUP_DIV(nbits, WORD_BITS);
c011301b:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%ebp)
c0113022:	8b 55 08             	mov    0x8(%ebp),%edx
c0113025:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113028:	01 d0                	add    %edx,%eax
c011302a:	83 e8 01             	sub    $0x1,%eax
c011302d:	ba 00 00 00 00       	mov    $0x0,%edx
c0113032:	f7 75 ec             	divl   -0x14(%ebp)
c0113035:	89 45 e8             	mov    %eax,-0x18(%ebp)
    WORD_TYPE *map;
    if ((map = kmalloc(sizeof(WORD_TYPE) * nwords)) == NULL) {
c0113038:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011303b:	c1 e0 02             	shl    $0x2,%eax
c011303e:	83 ec 0c             	sub    $0xc,%esp
c0113041:	50                   	push   %eax
c0113042:	e8 bb 22 ff ff       	call   c0105302 <kmalloc>
c0113047:	83 c4 10             	add    $0x10,%esp
c011304a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c011304d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0113051:	75 18                	jne    c011306b <bitmap_create+0x9f>
        kfree(bitmap);
c0113053:	83 ec 0c             	sub    $0xc,%esp
c0113056:	ff 75 f0             	pushl  -0x10(%ebp)
c0113059:	e8 bc 22 ff ff       	call   c010531a <kfree>
c011305e:	83 c4 10             	add    $0x10,%esp
        return NULL;
c0113061:	b8 00 00 00 00       	mov    $0x0,%eax
c0113066:	e9 d8 00 00 00       	jmp    c0113143 <bitmap_create+0x177>
    }

    bitmap->nbits = nbits, bitmap->nwords = nwords;
c011306b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011306e:	8b 55 08             	mov    0x8(%ebp),%edx
c0113071:	89 10                	mov    %edx,(%eax)
c0113073:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113076:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0113079:	89 50 04             	mov    %edx,0x4(%eax)
    bitmap->map = memset(map, 0xFF, sizeof(WORD_TYPE) * nwords);
c011307c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011307f:	c1 e0 02             	shl    $0x2,%eax
c0113082:	83 ec 04             	sub    $0x4,%esp
c0113085:	50                   	push   %eax
c0113086:	6a ff                	push   $0xffffffff
c0113088:	ff 75 e4             	pushl  -0x1c(%ebp)
c011308b:	e8 d2 09 00 00       	call   c0113a62 <memset>
c0113090:	83 c4 10             	add    $0x10,%esp
c0113093:	89 c2                	mov    %eax,%edx
c0113095:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113098:	89 50 08             	mov    %edx,0x8(%eax)

    /* mark any leftover bits at the end in use(0) */
    if (nbits != nwords * WORD_BITS) {
c011309b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011309e:	c1 e0 05             	shl    $0x5,%eax
c01130a1:	3b 45 08             	cmp    0x8(%ebp),%eax
c01130a4:	0f 84 96 00 00 00    	je     c0113140 <bitmap_create+0x174>
        uint32_t ix = nwords - 1, overbits = nbits - ix * WORD_BITS;
c01130aa:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01130ad:	83 e8 01             	sub    $0x1,%eax
c01130b0:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01130b3:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01130b6:	c1 e0 05             	shl    $0x5,%eax
c01130b9:	89 c2                	mov    %eax,%edx
c01130bb:	8b 45 08             	mov    0x8(%ebp),%eax
c01130be:	29 d0                	sub    %edx,%eax
c01130c0:	89 45 f4             	mov    %eax,-0xc(%ebp)

        assert(nbits / WORD_BITS == ix);
c01130c3:	8b 45 08             	mov    0x8(%ebp),%eax
c01130c6:	c1 e8 05             	shr    $0x5,%eax
c01130c9:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01130cc:	74 16                	je     c01130e4 <bitmap_create+0x118>
c01130ce:	68 3e 85 11 c0       	push   $0xc011853e
c01130d3:	68 14 85 11 c0       	push   $0xc0118514
c01130d8:	6a 2a                	push   $0x2a
c01130da:	68 29 85 11 c0       	push   $0xc0118529
c01130df:	e8 09 d4 fe ff       	call   c01004ed <__panic>
        assert(overbits > 0 && overbits < WORD_BITS);
c01130e4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01130e8:	74 06                	je     c01130f0 <bitmap_create+0x124>
c01130ea:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
c01130ee:	76 4a                	jbe    c011313a <bitmap_create+0x16e>
c01130f0:	68 58 85 11 c0       	push   $0xc0118558
c01130f5:	68 14 85 11 c0       	push   $0xc0118514
c01130fa:	6a 2b                	push   $0x2b
c01130fc:	68 29 85 11 c0       	push   $0xc0118529
c0113101:	e8 e7 d3 fe ff       	call   c01004ed <__panic>

        for (; overbits < WORD_BITS; overbits ++) {
            bitmap->map[ix] ^= (1 << overbits);
c0113106:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113109:	8b 40 08             	mov    0x8(%eax),%eax
c011310c:	8b 55 e0             	mov    -0x20(%ebp),%edx
c011310f:	c1 e2 02             	shl    $0x2,%edx
c0113112:	01 c2                	add    %eax,%edx
c0113114:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113117:	8b 40 08             	mov    0x8(%eax),%eax
c011311a:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c011311d:	c1 e1 02             	shl    $0x2,%ecx
c0113120:	01 c8                	add    %ecx,%eax
c0113122:	8b 18                	mov    (%eax),%ebx
c0113124:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113127:	be 01 00 00 00       	mov    $0x1,%esi
c011312c:	89 c1                	mov    %eax,%ecx
c011312e:	d3 e6                	shl    %cl,%esi
c0113130:	89 f0                	mov    %esi,%eax
c0113132:	31 d8                	xor    %ebx,%eax
c0113134:	89 02                	mov    %eax,(%edx)
        uint32_t ix = nwords - 1, overbits = nbits - ix * WORD_BITS;

        assert(nbits / WORD_BITS == ix);
        assert(overbits > 0 && overbits < WORD_BITS);

        for (; overbits < WORD_BITS; overbits ++) {
c0113136:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c011313a:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
c011313e:	76 c6                	jbe    c0113106 <bitmap_create+0x13a>
            bitmap->map[ix] ^= (1 << overbits);
        }
    }
    return bitmap;
c0113140:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0113143:	8d 65 f8             	lea    -0x8(%ebp),%esp
c0113146:	5b                   	pop    %ebx
c0113147:	5e                   	pop    %esi
c0113148:	5d                   	pop    %ebp
c0113149:	c3                   	ret    

c011314a <bitmap_alloc>:

// bitmap_alloc - locate a cleared bit, set it, and return its index.
int
bitmap_alloc(struct bitmap *bitmap, uint32_t *index_store) {
c011314a:	55                   	push   %ebp
c011314b:	89 e5                	mov    %esp,%ebp
c011314d:	83 ec 28             	sub    $0x28,%esp
    WORD_TYPE *map = bitmap->map;
c0113150:	8b 45 08             	mov    0x8(%ebp),%eax
c0113153:	8b 40 08             	mov    0x8(%eax),%eax
c0113156:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32_t ix, offset, nwords = bitmap->nwords;
c0113159:	8b 45 08             	mov    0x8(%ebp),%eax
c011315c:	8b 40 04             	mov    0x4(%eax),%eax
c011315f:	89 45 e8             	mov    %eax,-0x18(%ebp)
    for (ix = 0; ix < nwords; ix ++) {
c0113162:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0113169:	e9 ad 00 00 00       	jmp    c011321b <bitmap_alloc+0xd1>
        if (map[ix] != 0) {
c011316e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113171:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0113178:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011317b:	01 d0                	add    %edx,%eax
c011317d:	8b 00                	mov    (%eax),%eax
c011317f:	85 c0                	test   %eax,%eax
c0113181:	0f 84 90 00 00 00    	je     c0113217 <bitmap_alloc+0xcd>
            for (offset = 0; offset < WORD_BITS; offset ++) {
c0113187:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c011318e:	eb 6b                	jmp    c01131fb <bitmap_alloc+0xb1>
                WORD_TYPE mask = (1 << offset);
c0113190:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113193:	ba 01 00 00 00       	mov    $0x1,%edx
c0113198:	89 c1                	mov    %eax,%ecx
c011319a:	d3 e2                	shl    %cl,%edx
c011319c:	89 d0                	mov    %edx,%eax
c011319e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                if (map[ix] & mask) {
c01131a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01131a4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01131ab:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01131ae:	01 d0                	add    %edx,%eax
c01131b0:	8b 00                	mov    (%eax),%eax
c01131b2:	23 45 e4             	and    -0x1c(%ebp),%eax
c01131b5:	85 c0                	test   %eax,%eax
c01131b7:	74 3e                	je     c01131f7 <bitmap_alloc+0xad>
                    map[ix] ^= mask;
c01131b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01131bc:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c01131c3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01131c6:	01 c2                	add    %eax,%edx
c01131c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01131cb:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
c01131d2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01131d5:	01 c8                	add    %ecx,%eax
c01131d7:	8b 00                	mov    (%eax),%eax
c01131d9:	33 45 e4             	xor    -0x1c(%ebp),%eax
c01131dc:	89 02                	mov    %eax,(%edx)
                    *index_store = ix * WORD_BITS + offset;
c01131de:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01131e1:	c1 e0 05             	shl    $0x5,%eax
c01131e4:	89 c2                	mov    %eax,%edx
c01131e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01131e9:	01 c2                	add    %eax,%edx
c01131eb:	8b 45 0c             	mov    0xc(%ebp),%eax
c01131ee:	89 10                	mov    %edx,(%eax)
                    return 0;
c01131f0:	b8 00 00 00 00       	mov    $0x0,%eax
c01131f5:	eb 35                	jmp    c011322c <bitmap_alloc+0xe2>
bitmap_alloc(struct bitmap *bitmap, uint32_t *index_store) {
    WORD_TYPE *map = bitmap->map;
    uint32_t ix, offset, nwords = bitmap->nwords;
    for (ix = 0; ix < nwords; ix ++) {
        if (map[ix] != 0) {
            for (offset = 0; offset < WORD_BITS; offset ++) {
c01131f7:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c01131fb:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
c01131ff:	76 8f                	jbe    c0113190 <bitmap_alloc+0x46>
                    map[ix] ^= mask;
                    *index_store = ix * WORD_BITS + offset;
                    return 0;
                }
            }
            assert(0);
c0113201:	68 7d 85 11 c0       	push   $0xc011857d
c0113206:	68 14 85 11 c0       	push   $0xc0118514
c011320b:	6a 43                	push   $0x43
c011320d:	68 29 85 11 c0       	push   $0xc0118529
c0113212:	e8 d6 d2 fe ff       	call   c01004ed <__panic>
// bitmap_alloc - locate a cleared bit, set it, and return its index.
int
bitmap_alloc(struct bitmap *bitmap, uint32_t *index_store) {
    WORD_TYPE *map = bitmap->map;
    uint32_t ix, offset, nwords = bitmap->nwords;
    for (ix = 0; ix < nwords; ix ++) {
c0113217:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c011321b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011321e:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c0113221:	0f 82 47 ff ff ff    	jb     c011316e <bitmap_alloc+0x24>
                }
            }
            assert(0);
        }
    }
    return -E_NO_MEM;
c0113227:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c011322c:	c9                   	leave  
c011322d:	c3                   	ret    

c011322e <bitmap_translate>:

// bitmap_translate - according index, get the related word and mask
static void
bitmap_translate(struct bitmap *bitmap, uint32_t index, WORD_TYPE **word, WORD_TYPE *mask) {
c011322e:	55                   	push   %ebp
c011322f:	89 e5                	mov    %esp,%ebp
c0113231:	83 ec 18             	sub    $0x18,%esp
    assert(index < bitmap->nbits);
c0113234:	8b 45 08             	mov    0x8(%ebp),%eax
c0113237:	8b 00                	mov    (%eax),%eax
c0113239:	3b 45 0c             	cmp    0xc(%ebp),%eax
c011323c:	77 16                	ja     c0113254 <bitmap_translate+0x26>
c011323e:	68 7f 85 11 c0       	push   $0xc011857f
c0113243:	68 14 85 11 c0       	push   $0xc0118514
c0113248:	6a 4c                	push   $0x4c
c011324a:	68 29 85 11 c0       	push   $0xc0118529
c011324f:	e8 99 d2 fe ff       	call   c01004ed <__panic>
    uint32_t ix = index / WORD_BITS, offset = index % WORD_BITS;
c0113254:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113257:	c1 e8 05             	shr    $0x5,%eax
c011325a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011325d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113260:	83 e0 1f             	and    $0x1f,%eax
c0113263:	89 45 f0             	mov    %eax,-0x10(%ebp)
    *word = bitmap->map + ix;
c0113266:	8b 45 08             	mov    0x8(%ebp),%eax
c0113269:	8b 40 08             	mov    0x8(%eax),%eax
c011326c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c011326f:	c1 e2 02             	shl    $0x2,%edx
c0113272:	01 c2                	add    %eax,%edx
c0113274:	8b 45 10             	mov    0x10(%ebp),%eax
c0113277:	89 10                	mov    %edx,(%eax)
    *mask = (1 << offset);
c0113279:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011327c:	ba 01 00 00 00       	mov    $0x1,%edx
c0113281:	89 c1                	mov    %eax,%ecx
c0113283:	d3 e2                	shl    %cl,%edx
c0113285:	89 d0                	mov    %edx,%eax
c0113287:	89 c2                	mov    %eax,%edx
c0113289:	8b 45 14             	mov    0x14(%ebp),%eax
c011328c:	89 10                	mov    %edx,(%eax)
}
c011328e:	90                   	nop
c011328f:	c9                   	leave  
c0113290:	c3                   	ret    

c0113291 <bitmap_test>:

// bitmap_test - according index, get the related value (0 OR 1) in the bitmap
bool
bitmap_test(struct bitmap *bitmap, uint32_t index) {
c0113291:	55                   	push   %ebp
c0113292:	89 e5                	mov    %esp,%ebp
c0113294:	83 ec 18             	sub    $0x18,%esp
    WORD_TYPE *word, mask;
    bitmap_translate(bitmap, index, &word, &mask);
c0113297:	8d 45 f0             	lea    -0x10(%ebp),%eax
c011329a:	50                   	push   %eax
c011329b:	8d 45 f4             	lea    -0xc(%ebp),%eax
c011329e:	50                   	push   %eax
c011329f:	ff 75 0c             	pushl  0xc(%ebp)
c01132a2:	ff 75 08             	pushl  0x8(%ebp)
c01132a5:	e8 84 ff ff ff       	call   c011322e <bitmap_translate>
c01132aa:	83 c4 10             	add    $0x10,%esp
    return (*word & mask);
c01132ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01132b0:	8b 10                	mov    (%eax),%edx
c01132b2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01132b5:	21 d0                	and    %edx,%eax
}
c01132b7:	c9                   	leave  
c01132b8:	c3                   	ret    

c01132b9 <bitmap_free>:

// bitmap_free - according index, set related bit to 1
void
bitmap_free(struct bitmap *bitmap, uint32_t index) {
c01132b9:	55                   	push   %ebp
c01132ba:	89 e5                	mov    %esp,%ebp
c01132bc:	83 ec 18             	sub    $0x18,%esp
    WORD_TYPE *word, mask;
    bitmap_translate(bitmap, index, &word, &mask);
c01132bf:	8d 45 f0             	lea    -0x10(%ebp),%eax
c01132c2:	50                   	push   %eax
c01132c3:	8d 45 f4             	lea    -0xc(%ebp),%eax
c01132c6:	50                   	push   %eax
c01132c7:	ff 75 0c             	pushl  0xc(%ebp)
c01132ca:	ff 75 08             	pushl  0x8(%ebp)
c01132cd:	e8 5c ff ff ff       	call   c011322e <bitmap_translate>
c01132d2:	83 c4 10             	add    $0x10,%esp
    assert(!(*word & mask));
c01132d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01132d8:	8b 10                	mov    (%eax),%edx
c01132da:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01132dd:	21 d0                	and    %edx,%eax
c01132df:	85 c0                	test   %eax,%eax
c01132e1:	74 16                	je     c01132f9 <bitmap_free+0x40>
c01132e3:	68 95 85 11 c0       	push   $0xc0118595
c01132e8:	68 14 85 11 c0       	push   $0xc0118514
c01132ed:	6a 5f                	push   $0x5f
c01132ef:	68 29 85 11 c0       	push   $0xc0118529
c01132f4:	e8 f4 d1 fe ff       	call   c01004ed <__panic>
    *word |= mask;
c01132f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01132fc:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01132ff:	8b 0a                	mov    (%edx),%ecx
c0113301:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0113304:	09 ca                	or     %ecx,%edx
c0113306:	89 10                	mov    %edx,(%eax)
}
c0113308:	90                   	nop
c0113309:	c9                   	leave  
c011330a:	c3                   	ret    

c011330b <bitmap_destroy>:

// bitmap_destroy - free memory contains bitmap
void
bitmap_destroy(struct bitmap *bitmap) {
c011330b:	55                   	push   %ebp
c011330c:	89 e5                	mov    %esp,%ebp
c011330e:	83 ec 08             	sub    $0x8,%esp
    kfree(bitmap->map);
c0113311:	8b 45 08             	mov    0x8(%ebp),%eax
c0113314:	8b 40 08             	mov    0x8(%eax),%eax
c0113317:	83 ec 0c             	sub    $0xc,%esp
c011331a:	50                   	push   %eax
c011331b:	e8 fa 1f ff ff       	call   c010531a <kfree>
c0113320:	83 c4 10             	add    $0x10,%esp
    kfree(bitmap);
c0113323:	83 ec 0c             	sub    $0xc,%esp
c0113326:	ff 75 08             	pushl  0x8(%ebp)
c0113329:	e8 ec 1f ff ff       	call   c010531a <kfree>
c011332e:	83 c4 10             	add    $0x10,%esp
}
c0113331:	90                   	nop
c0113332:	c9                   	leave  
c0113333:	c3                   	ret    

c0113334 <bitmap_getdata>:

// bitmap_getdata - return bitmap->map, return the length of bits to len_store
void *
bitmap_getdata(struct bitmap *bitmap, size_t *len_store) {
c0113334:	55                   	push   %ebp
c0113335:	89 e5                	mov    %esp,%ebp
    if (len_store != NULL) {
c0113337:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c011333b:	74 12                	je     c011334f <bitmap_getdata+0x1b>
        *len_store = sizeof(WORD_TYPE) * bitmap->nwords;
c011333d:	8b 45 08             	mov    0x8(%ebp),%eax
c0113340:	8b 40 04             	mov    0x4(%eax),%eax
c0113343:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c011334a:	8b 45 0c             	mov    0xc(%ebp),%eax
c011334d:	89 10                	mov    %edx,(%eax)
    }
    return bitmap->map;
c011334f:	8b 45 08             	mov    0x8(%ebp),%eax
c0113352:	8b 40 08             	mov    0x8(%eax),%eax
}
c0113355:	5d                   	pop    %ebp
c0113356:	c3                   	ret    

c0113357 <sfs_rwblock_nolock>:
 * @blkno: the NO. of disk block
 * @write: BOOL: Read or Write
 * @check: BOOL: if check (blono < sfs super.blocks)
 */
static int
sfs_rwblock_nolock(struct sfs_fs *sfs, void *buf, uint32_t blkno, bool write, bool check) {
c0113357:	55                   	push   %ebp
c0113358:	89 e5                	mov    %esp,%ebp
c011335a:	83 ec 28             	sub    $0x28,%esp
    assert((blkno != 0 || !check) && blkno < sfs->super.blocks);
c011335d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0113361:	75 06                	jne    c0113369 <sfs_rwblock_nolock+0x12>
c0113363:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0113367:	75 0b                	jne    c0113374 <sfs_rwblock_nolock+0x1d>
c0113369:	8b 45 08             	mov    0x8(%ebp),%eax
c011336c:	8b 40 04             	mov    0x4(%eax),%eax
c011336f:	3b 45 10             	cmp    0x10(%ebp),%eax
c0113372:	77 16                	ja     c011338a <sfs_rwblock_nolock+0x33>
c0113374:	68 a8 85 11 c0       	push   $0xc01185a8
c0113379:	68 dc 85 11 c0       	push   $0xc01185dc
c011337e:	6a 15                	push   $0x15
c0113380:	68 f1 85 11 c0       	push   $0xc01185f1
c0113385:	e8 63 d1 fe ff       	call   c01004ed <__panic>
    struct iobuf __iob, *iob = iobuf_init(&__iob, buf, SFS_BLKSIZE, blkno * SFS_BLKSIZE);
c011338a:	8b 45 10             	mov    0x10(%ebp),%eax
c011338d:	c1 e0 0c             	shl    $0xc,%eax
c0113390:	50                   	push   %eax
c0113391:	68 00 10 00 00       	push   $0x1000
c0113396:	ff 75 0c             	pushl  0xc(%ebp)
c0113399:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c011339c:	50                   	push   %eax
c011339d:	e8 7a 7c ff ff       	call   c010b01c <iobuf_init>
c01133a2:	83 c4 10             	add    $0x10,%esp
c01133a5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dop_io(sfs->dev, iob, write);
c01133a8:	8b 45 08             	mov    0x8(%ebp),%eax
c01133ab:	8b 40 2c             	mov    0x2c(%eax),%eax
c01133ae:	8b 40 10             	mov    0x10(%eax),%eax
c01133b1:	8b 55 08             	mov    0x8(%ebp),%edx
c01133b4:	8b 52 2c             	mov    0x2c(%edx),%edx
c01133b7:	83 ec 04             	sub    $0x4,%esp
c01133ba:	ff 75 14             	pushl  0x14(%ebp)
c01133bd:	ff 75 f4             	pushl  -0xc(%ebp)
c01133c0:	52                   	push   %edx
c01133c1:	ff d0                	call   *%eax
c01133c3:	83 c4 10             	add    $0x10,%esp
}
c01133c6:	c9                   	leave  
c01133c7:	c3                   	ret    

c01133c8 <sfs_rwblock>:
 * @blkno: the NO. of disk block
 * @nblks: Rd/Wr number of disk block
 * @write: BOOL: Read - 0 or Write - 1
 */
static int
sfs_rwblock(struct sfs_fs *sfs, void *buf, uint32_t blkno, uint32_t nblks, bool write) {
c01133c8:	55                   	push   %ebp
c01133c9:	89 e5                	mov    %esp,%ebp
c01133cb:	83 ec 18             	sub    $0x18,%esp
    int ret = 0;
c01133ce:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    lock_sfs_io(sfs);
c01133d5:	83 ec 0c             	sub    $0xc,%esp
c01133d8:	ff 75 08             	pushl  0x8(%ebp)
c01133db:	e8 bf d3 ff ff       	call   c011079f <lock_sfs_io>
c01133e0:	83 c4 10             	add    $0x10,%esp
    {
        while (nblks != 0) {
c01133e3:	eb 31                	jmp    c0113416 <sfs_rwblock+0x4e>
            if ((ret = sfs_rwblock_nolock(sfs, buf, blkno, write, 1)) != 0) {
c01133e5:	83 ec 0c             	sub    $0xc,%esp
c01133e8:	6a 01                	push   $0x1
c01133ea:	ff 75 18             	pushl  0x18(%ebp)
c01133ed:	ff 75 10             	pushl  0x10(%ebp)
c01133f0:	ff 75 0c             	pushl  0xc(%ebp)
c01133f3:	ff 75 08             	pushl  0x8(%ebp)
c01133f6:	e8 5c ff ff ff       	call   c0113357 <sfs_rwblock_nolock>
c01133fb:	83 c4 20             	add    $0x20,%esp
c01133fe:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113401:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0113405:	75 17                	jne    c011341e <sfs_rwblock+0x56>
                break;
            }
            blkno ++, nblks --;
c0113407:	83 45 10 01          	addl   $0x1,0x10(%ebp)
c011340b:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
            buf += SFS_BLKSIZE;
c011340f:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
static int
sfs_rwblock(struct sfs_fs *sfs, void *buf, uint32_t blkno, uint32_t nblks, bool write) {
    int ret = 0;
    lock_sfs_io(sfs);
    {
        while (nblks != 0) {
c0113416:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c011341a:	75 c9                	jne    c01133e5 <sfs_rwblock+0x1d>
c011341c:	eb 01                	jmp    c011341f <sfs_rwblock+0x57>
            if ((ret = sfs_rwblock_nolock(sfs, buf, blkno, write, 1)) != 0) {
                break;
c011341e:	90                   	nop
            }
            blkno ++, nblks --;
            buf += SFS_BLKSIZE;
        }
    }
    unlock_sfs_io(sfs);
c011341f:	83 ec 0c             	sub    $0xc,%esp
c0113422:	ff 75 08             	pushl  0x8(%ebp)
c0113425:	e8 ab d3 ff ff       	call   c01107d5 <unlock_sfs_io>
c011342a:	83 c4 10             	add    $0x10,%esp
    return ret;
c011342d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0113430:	c9                   	leave  
c0113431:	c3                   	ret    

c0113432 <sfs_rblock>:
 * @buf:   the buffer uesed for Rd/Wr
 * @blkno: the NO. of disk block
 * @nblks: Rd/Wr number of disk block
 */
int
sfs_rblock(struct sfs_fs *sfs, void *buf, uint32_t blkno, uint32_t nblks) {
c0113432:	55                   	push   %ebp
c0113433:	89 e5                	mov    %esp,%ebp
c0113435:	83 ec 08             	sub    $0x8,%esp
    return sfs_rwblock(sfs, buf, blkno, nblks, 0);
c0113438:	83 ec 0c             	sub    $0xc,%esp
c011343b:	6a 00                	push   $0x0
c011343d:	ff 75 14             	pushl  0x14(%ebp)
c0113440:	ff 75 10             	pushl  0x10(%ebp)
c0113443:	ff 75 0c             	pushl  0xc(%ebp)
c0113446:	ff 75 08             	pushl  0x8(%ebp)
c0113449:	e8 7a ff ff ff       	call   c01133c8 <sfs_rwblock>
c011344e:	83 c4 20             	add    $0x20,%esp
}
c0113451:	c9                   	leave  
c0113452:	c3                   	ret    

c0113453 <sfs_wblock>:
 * @buf:   the buffer uesed for Rd/Wr
 * @blkno: the NO. of disk block
 * @nblks: Rd/Wr number of disk block
 */
int
sfs_wblock(struct sfs_fs *sfs, void *buf, uint32_t blkno, uint32_t nblks) {
c0113453:	55                   	push   %ebp
c0113454:	89 e5                	mov    %esp,%ebp
c0113456:	83 ec 08             	sub    $0x8,%esp
    return sfs_rwblock(sfs, buf, blkno, nblks, 1);
c0113459:	83 ec 0c             	sub    $0xc,%esp
c011345c:	6a 01                	push   $0x1
c011345e:	ff 75 14             	pushl  0x14(%ebp)
c0113461:	ff 75 10             	pushl  0x10(%ebp)
c0113464:	ff 75 0c             	pushl  0xc(%ebp)
c0113467:	ff 75 08             	pushl  0x8(%ebp)
c011346a:	e8 59 ff ff ff       	call   c01133c8 <sfs_rwblock>
c011346f:	83 c4 20             	add    $0x20,%esp
}
c0113472:	c9                   	leave  
c0113473:	c3                   	ret    

c0113474 <sfs_rbuf>:
 * @len:    the length need to Rd
 * @blkno:  the NO. of disk block
 * @offset: the offset in the content of disk block
 */
int
sfs_rbuf(struct sfs_fs *sfs, void *buf, size_t len, uint32_t blkno, off_t offset) {
c0113474:	55                   	push   %ebp
c0113475:	89 e5                	mov    %esp,%ebp
c0113477:	83 ec 18             	sub    $0x18,%esp
    assert(offset >= 0 && offset < SFS_BLKSIZE && offset + len <= SFS_BLKSIZE);
c011347a:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c011347e:	78 18                	js     c0113498 <sfs_rbuf+0x24>
c0113480:	81 7d 18 ff 0f 00 00 	cmpl   $0xfff,0x18(%ebp)
c0113487:	7f 0f                	jg     c0113498 <sfs_rbuf+0x24>
c0113489:	8b 55 18             	mov    0x18(%ebp),%edx
c011348c:	8b 45 10             	mov    0x10(%ebp),%eax
c011348f:	01 d0                	add    %edx,%eax
c0113491:	3d 00 10 00 00       	cmp    $0x1000,%eax
c0113496:	76 16                	jbe    c01134ae <sfs_rbuf+0x3a>
c0113498:	68 08 86 11 c0       	push   $0xc0118608
c011349d:	68 dc 85 11 c0       	push   $0xc01185dc
c01134a2:	6a 55                	push   $0x55
c01134a4:	68 f1 85 11 c0       	push   $0xc01185f1
c01134a9:	e8 3f d0 fe ff       	call   c01004ed <__panic>
    int ret;
    lock_sfs_io(sfs);
c01134ae:	83 ec 0c             	sub    $0xc,%esp
c01134b1:	ff 75 08             	pushl  0x8(%ebp)
c01134b4:	e8 e6 d2 ff ff       	call   c011079f <lock_sfs_io>
c01134b9:	83 c4 10             	add    $0x10,%esp
    {
        if ((ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, blkno, 0, 1)) == 0) {
c01134bc:	8b 45 08             	mov    0x8(%ebp),%eax
c01134bf:	8b 40 38             	mov    0x38(%eax),%eax
c01134c2:	83 ec 0c             	sub    $0xc,%esp
c01134c5:	6a 01                	push   $0x1
c01134c7:	6a 00                	push   $0x0
c01134c9:	ff 75 14             	pushl  0x14(%ebp)
c01134cc:	50                   	push   %eax
c01134cd:	ff 75 08             	pushl  0x8(%ebp)
c01134d0:	e8 82 fe ff ff       	call   c0113357 <sfs_rwblock_nolock>
c01134d5:	83 c4 20             	add    $0x20,%esp
c01134d8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01134db:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01134df:	75 1d                	jne    c01134fe <sfs_rbuf+0x8a>
            memcpy(buf, sfs->sfs_buffer + offset, len);
c01134e1:	8b 45 08             	mov    0x8(%ebp),%eax
c01134e4:	8b 50 38             	mov    0x38(%eax),%edx
c01134e7:	8b 45 18             	mov    0x18(%ebp),%eax
c01134ea:	01 d0                	add    %edx,%eax
c01134ec:	83 ec 04             	sub    $0x4,%esp
c01134ef:	ff 75 10             	pushl  0x10(%ebp)
c01134f2:	50                   	push   %eax
c01134f3:	ff 75 0c             	pushl  0xc(%ebp)
c01134f6:	e8 4a 06 00 00       	call   c0113b45 <memcpy>
c01134fb:	83 c4 10             	add    $0x10,%esp
        }
    }
    unlock_sfs_io(sfs);
c01134fe:	83 ec 0c             	sub    $0xc,%esp
c0113501:	ff 75 08             	pushl  0x8(%ebp)
c0113504:	e8 cc d2 ff ff       	call   c01107d5 <unlock_sfs_io>
c0113509:	83 c4 10             	add    $0x10,%esp
    return ret;
c011350c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c011350f:	c9                   	leave  
c0113510:	c3                   	ret    

c0113511 <sfs_wbuf>:
 * @len:    the length need to Wr
 * @blkno:  the NO. of disk block
 * @offset: the offset in the content of disk block
 */
int
sfs_wbuf(struct sfs_fs *sfs, void *buf, size_t len, uint32_t blkno, off_t offset) {
c0113511:	55                   	push   %ebp
c0113512:	89 e5                	mov    %esp,%ebp
c0113514:	83 ec 18             	sub    $0x18,%esp
    assert(offset >= 0 && offset < SFS_BLKSIZE && offset + len <= SFS_BLKSIZE);
c0113517:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c011351b:	78 18                	js     c0113535 <sfs_wbuf+0x24>
c011351d:	81 7d 18 ff 0f 00 00 	cmpl   $0xfff,0x18(%ebp)
c0113524:	7f 0f                	jg     c0113535 <sfs_wbuf+0x24>
c0113526:	8b 55 18             	mov    0x18(%ebp),%edx
c0113529:	8b 45 10             	mov    0x10(%ebp),%eax
c011352c:	01 d0                	add    %edx,%eax
c011352e:	3d 00 10 00 00       	cmp    $0x1000,%eax
c0113533:	76 16                	jbe    c011354b <sfs_wbuf+0x3a>
c0113535:	68 08 86 11 c0       	push   $0xc0118608
c011353a:	68 dc 85 11 c0       	push   $0xc01185dc
c011353f:	6a 6b                	push   $0x6b
c0113541:	68 f1 85 11 c0       	push   $0xc01185f1
c0113546:	e8 a2 cf fe ff       	call   c01004ed <__panic>
    int ret;
    lock_sfs_io(sfs);
c011354b:	83 ec 0c             	sub    $0xc,%esp
c011354e:	ff 75 08             	pushl  0x8(%ebp)
c0113551:	e8 49 d2 ff ff       	call   c011079f <lock_sfs_io>
c0113556:	83 c4 10             	add    $0x10,%esp
    {
        if ((ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, blkno, 0, 1)) == 0) {
c0113559:	8b 45 08             	mov    0x8(%ebp),%eax
c011355c:	8b 40 38             	mov    0x38(%eax),%eax
c011355f:	83 ec 0c             	sub    $0xc,%esp
c0113562:	6a 01                	push   $0x1
c0113564:	6a 00                	push   $0x0
c0113566:	ff 75 14             	pushl  0x14(%ebp)
c0113569:	50                   	push   %eax
c011356a:	ff 75 08             	pushl  0x8(%ebp)
c011356d:	e8 e5 fd ff ff       	call   c0113357 <sfs_rwblock_nolock>
c0113572:	83 c4 20             	add    $0x20,%esp
c0113575:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113578:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011357c:	75 3c                	jne    c01135ba <sfs_wbuf+0xa9>
            memcpy(sfs->sfs_buffer + offset, buf, len);
c011357e:	8b 45 08             	mov    0x8(%ebp),%eax
c0113581:	8b 50 38             	mov    0x38(%eax),%edx
c0113584:	8b 45 18             	mov    0x18(%ebp),%eax
c0113587:	01 d0                	add    %edx,%eax
c0113589:	83 ec 04             	sub    $0x4,%esp
c011358c:	ff 75 10             	pushl  0x10(%ebp)
c011358f:	ff 75 0c             	pushl  0xc(%ebp)
c0113592:	50                   	push   %eax
c0113593:	e8 ad 05 00 00       	call   c0113b45 <memcpy>
c0113598:	83 c4 10             	add    $0x10,%esp
            ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, blkno, 1, 1);
c011359b:	8b 45 08             	mov    0x8(%ebp),%eax
c011359e:	8b 40 38             	mov    0x38(%eax),%eax
c01135a1:	83 ec 0c             	sub    $0xc,%esp
c01135a4:	6a 01                	push   $0x1
c01135a6:	6a 01                	push   $0x1
c01135a8:	ff 75 14             	pushl  0x14(%ebp)
c01135ab:	50                   	push   %eax
c01135ac:	ff 75 08             	pushl  0x8(%ebp)
c01135af:	e8 a3 fd ff ff       	call   c0113357 <sfs_rwblock_nolock>
c01135b4:	83 c4 20             	add    $0x20,%esp
c01135b7:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
    }
    unlock_sfs_io(sfs);
c01135ba:	83 ec 0c             	sub    $0xc,%esp
c01135bd:	ff 75 08             	pushl  0x8(%ebp)
c01135c0:	e8 10 d2 ff ff       	call   c01107d5 <unlock_sfs_io>
c01135c5:	83 c4 10             	add    $0x10,%esp
    return ret;
c01135c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01135cb:	c9                   	leave  
c01135cc:	c3                   	ret    

c01135cd <sfs_sync_super>:

/*
 * sfs_sync_super - write sfs->super (in memory) into disk (SFS_BLKN_SUPER, 1) with lock protect.
 */
int
sfs_sync_super(struct sfs_fs *sfs) {
c01135cd:	55                   	push   %ebp
c01135ce:	89 e5                	mov    %esp,%ebp
c01135d0:	83 ec 18             	sub    $0x18,%esp
    int ret;
    lock_sfs_io(sfs);
c01135d3:	83 ec 0c             	sub    $0xc,%esp
c01135d6:	ff 75 08             	pushl  0x8(%ebp)
c01135d9:	e8 c1 d1 ff ff       	call   c011079f <lock_sfs_io>
c01135de:	83 c4 10             	add    $0x10,%esp
    {
        memset(sfs->sfs_buffer, 0, SFS_BLKSIZE);
c01135e1:	8b 45 08             	mov    0x8(%ebp),%eax
c01135e4:	8b 40 38             	mov    0x38(%eax),%eax
c01135e7:	83 ec 04             	sub    $0x4,%esp
c01135ea:	68 00 10 00 00       	push   $0x1000
c01135ef:	6a 00                	push   $0x0
c01135f1:	50                   	push   %eax
c01135f2:	e8 6b 04 00 00       	call   c0113a62 <memset>
c01135f7:	83 c4 10             	add    $0x10,%esp
        memcpy(sfs->sfs_buffer, &(sfs->super), sizeof(sfs->super));
c01135fa:	8b 55 08             	mov    0x8(%ebp),%edx
c01135fd:	8b 45 08             	mov    0x8(%ebp),%eax
c0113600:	8b 40 38             	mov    0x38(%eax),%eax
c0113603:	83 ec 04             	sub    $0x4,%esp
c0113606:	6a 2c                	push   $0x2c
c0113608:	52                   	push   %edx
c0113609:	50                   	push   %eax
c011360a:	e8 36 05 00 00       	call   c0113b45 <memcpy>
c011360f:	83 c4 10             	add    $0x10,%esp
        ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, SFS_BLKN_SUPER, 1, 0);
c0113612:	8b 45 08             	mov    0x8(%ebp),%eax
c0113615:	8b 40 38             	mov    0x38(%eax),%eax
c0113618:	83 ec 0c             	sub    $0xc,%esp
c011361b:	6a 00                	push   $0x0
c011361d:	6a 01                	push   $0x1
c011361f:	6a 00                	push   $0x0
c0113621:	50                   	push   %eax
c0113622:	ff 75 08             	pushl  0x8(%ebp)
c0113625:	e8 2d fd ff ff       	call   c0113357 <sfs_rwblock_nolock>
c011362a:	83 c4 20             	add    $0x20,%esp
c011362d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    unlock_sfs_io(sfs);
c0113630:	83 ec 0c             	sub    $0xc,%esp
c0113633:	ff 75 08             	pushl  0x8(%ebp)
c0113636:	e8 9a d1 ff ff       	call   c01107d5 <unlock_sfs_io>
c011363b:	83 c4 10             	add    $0x10,%esp
    return ret;
c011363e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0113641:	c9                   	leave  
c0113642:	c3                   	ret    

c0113643 <sfs_sync_freemap>:

/*
 * sfs_sync_freemap - write sfs bitmap into disk (SFS_BLKN_FREEMAP, nblks)  without lock protect.
 */
int
sfs_sync_freemap(struct sfs_fs *sfs) {
c0113643:	55                   	push   %ebp
c0113644:	89 e5                	mov    %esp,%ebp
c0113646:	83 ec 18             	sub    $0x18,%esp
    uint32_t nblks = sfs_freemap_blocks(&(sfs->super));
c0113649:	c7 45 f4 00 80 00 00 	movl   $0x8000,-0xc(%ebp)
c0113650:	8b 45 08             	mov    0x8(%ebp),%eax
c0113653:	8b 50 04             	mov    0x4(%eax),%edx
c0113656:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113659:	01 d0                	add    %edx,%eax
c011365b:	83 e8 01             	sub    $0x1,%eax
c011365e:	ba 00 00 00 00       	mov    $0x0,%edx
c0113663:	f7 75 f4             	divl   -0xc(%ebp)
c0113666:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sfs_wblock(sfs, bitmap_getdata(sfs->freemap, NULL), SFS_BLKN_FREEMAP, nblks);
c0113669:	8b 45 08             	mov    0x8(%ebp),%eax
c011366c:	8b 40 30             	mov    0x30(%eax),%eax
c011366f:	83 ec 08             	sub    $0x8,%esp
c0113672:	6a 00                	push   $0x0
c0113674:	50                   	push   %eax
c0113675:	e8 ba fc ff ff       	call   c0113334 <bitmap_getdata>
c011367a:	83 c4 10             	add    $0x10,%esp
c011367d:	ff 75 f0             	pushl  -0x10(%ebp)
c0113680:	6a 02                	push   $0x2
c0113682:	50                   	push   %eax
c0113683:	ff 75 08             	pushl  0x8(%ebp)
c0113686:	e8 c8 fd ff ff       	call   c0113453 <sfs_wblock>
c011368b:	83 c4 10             	add    $0x10,%esp
}
c011368e:	c9                   	leave  
c011368f:	c3                   	ret    

c0113690 <sfs_clear_block>:
 * @sfs:   sfs_fs which will be process
 * @blkno: the NO. of disk block
 * @nblks: Rd/Wr number of disk block
 */
int
sfs_clear_block(struct sfs_fs *sfs, uint32_t blkno, uint32_t nblks) {
c0113690:	55                   	push   %ebp
c0113691:	89 e5                	mov    %esp,%ebp
c0113693:	83 ec 18             	sub    $0x18,%esp
    int ret;
    lock_sfs_io(sfs);
c0113696:	83 ec 0c             	sub    $0xc,%esp
c0113699:	ff 75 08             	pushl  0x8(%ebp)
c011369c:	e8 fe d0 ff ff       	call   c011079f <lock_sfs_io>
c01136a1:	83 c4 10             	add    $0x10,%esp
    {
        memset(sfs->sfs_buffer, 0, SFS_BLKSIZE);
c01136a4:	8b 45 08             	mov    0x8(%ebp),%eax
c01136a7:	8b 40 38             	mov    0x38(%eax),%eax
c01136aa:	83 ec 04             	sub    $0x4,%esp
c01136ad:	68 00 10 00 00       	push   $0x1000
c01136b2:	6a 00                	push   $0x0
c01136b4:	50                   	push   %eax
c01136b5:	e8 a8 03 00 00       	call   c0113a62 <memset>
c01136ba:	83 c4 10             	add    $0x10,%esp
        while (nblks != 0) {
c01136bd:	eb 2d                	jmp    c01136ec <sfs_clear_block+0x5c>
            if ((ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, blkno, 1, 1)) != 0) {
c01136bf:	8b 45 08             	mov    0x8(%ebp),%eax
c01136c2:	8b 40 38             	mov    0x38(%eax),%eax
c01136c5:	83 ec 0c             	sub    $0xc,%esp
c01136c8:	6a 01                	push   $0x1
c01136ca:	6a 01                	push   $0x1
c01136cc:	ff 75 0c             	pushl  0xc(%ebp)
c01136cf:	50                   	push   %eax
c01136d0:	ff 75 08             	pushl  0x8(%ebp)
c01136d3:	e8 7f fc ff ff       	call   c0113357 <sfs_rwblock_nolock>
c01136d8:	83 c4 20             	add    $0x20,%esp
c01136db:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01136de:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01136e2:	75 10                	jne    c01136f4 <sfs_clear_block+0x64>
                break;
            }
            blkno ++, nblks --;
c01136e4:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
c01136e8:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
sfs_clear_block(struct sfs_fs *sfs, uint32_t blkno, uint32_t nblks) {
    int ret;
    lock_sfs_io(sfs);
    {
        memset(sfs->sfs_buffer, 0, SFS_BLKSIZE);
        while (nblks != 0) {
c01136ec:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01136f0:	75 cd                	jne    c01136bf <sfs_clear_block+0x2f>
c01136f2:	eb 01                	jmp    c01136f5 <sfs_clear_block+0x65>
            if ((ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, blkno, 1, 1)) != 0) {
                break;
c01136f4:	90                   	nop
            }
            blkno ++, nblks --;
        }
    }
    unlock_sfs_io(sfs);
c01136f5:	83 ec 0c             	sub    $0xc,%esp
c01136f8:	ff 75 08             	pushl  0x8(%ebp)
c01136fb:	e8 d5 d0 ff ff       	call   c01107d5 <unlock_sfs_io>
c0113700:	83 c4 10             	add    $0x10,%esp
    return ret;
c0113703:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0113706:	c9                   	leave  
c0113707:	c3                   	ret    

c0113708 <strlen>:
 * @s:      the input string
 *
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
c0113708:	55                   	push   %ebp
c0113709:	89 e5                	mov    %esp,%ebp
c011370b:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c011370e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (*s ++ != '\0') {
c0113715:	eb 04                	jmp    c011371b <strlen+0x13>
        cnt ++;
c0113717:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
    size_t cnt = 0;
    while (*s ++ != '\0') {
c011371b:	8b 45 08             	mov    0x8(%ebp),%eax
c011371e:	8d 50 01             	lea    0x1(%eax),%edx
c0113721:	89 55 08             	mov    %edx,0x8(%ebp)
c0113724:	0f b6 00             	movzbl (%eax),%eax
c0113727:	84 c0                	test   %al,%al
c0113729:	75 ec                	jne    c0113717 <strlen+0xf>
        cnt ++;
    }
    return cnt;
c011372b:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c011372e:	c9                   	leave  
c011372f:	c3                   	ret    

c0113730 <strnlen>:
 * The return value is strlen(s), if that is less than @len, or
 * @len if there is no '\0' character among the first @len characters
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
c0113730:	55                   	push   %ebp
c0113731:	89 e5                	mov    %esp,%ebp
c0113733:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c0113736:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (cnt < len && *s ++ != '\0') {
c011373d:	eb 04                	jmp    c0113743 <strnlen+0x13>
        cnt ++;
c011373f:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
    size_t cnt = 0;
    while (cnt < len && *s ++ != '\0') {
c0113743:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0113746:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0113749:	73 10                	jae    c011375b <strnlen+0x2b>
c011374b:	8b 45 08             	mov    0x8(%ebp),%eax
c011374e:	8d 50 01             	lea    0x1(%eax),%edx
c0113751:	89 55 08             	mov    %edx,0x8(%ebp)
c0113754:	0f b6 00             	movzbl (%eax),%eax
c0113757:	84 c0                	test   %al,%al
c0113759:	75 e4                	jne    c011373f <strnlen+0xf>
        cnt ++;
    }
    return cnt;
c011375b:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c011375e:	c9                   	leave  
c011375f:	c3                   	ret    

c0113760 <strcat>:
 * @dst:    pointer to the @dst array, which should be large enough to contain the concatenated
 *          resulting string.
 * @src:    string to be appended, this should not overlap @dst
 * */
char *
strcat(char *dst, const char *src) {
c0113760:	55                   	push   %ebp
c0113761:	89 e5                	mov    %esp,%ebp
c0113763:	83 ec 08             	sub    $0x8,%esp
    return strcpy(dst + strlen(dst), src);
c0113766:	ff 75 08             	pushl  0x8(%ebp)
c0113769:	e8 9a ff ff ff       	call   c0113708 <strlen>
c011376e:	83 c4 04             	add    $0x4,%esp
c0113771:	89 c2                	mov    %eax,%edx
c0113773:	8b 45 08             	mov    0x8(%ebp),%eax
c0113776:	01 d0                	add    %edx,%eax
c0113778:	83 ec 08             	sub    $0x8,%esp
c011377b:	ff 75 0c             	pushl  0xc(%ebp)
c011377e:	50                   	push   %eax
c011377f:	e8 05 00 00 00       	call   c0113789 <strcpy>
c0113784:	83 c4 10             	add    $0x10,%esp
}
c0113787:	c9                   	leave  
c0113788:	c3                   	ret    

c0113789 <strcpy>:
 * To avoid overflows, the size of array pointed by @dst should be long enough to
 * contain the same string as @src (including the terminating null character), and
 * should not overlap in memory with @src.
 * */
char *
strcpy(char *dst, const char *src) {
c0113789:	55                   	push   %ebp
c011378a:	89 e5                	mov    %esp,%ebp
c011378c:	57                   	push   %edi
c011378d:	56                   	push   %esi
c011378e:	83 ec 20             	sub    $0x20,%esp
c0113791:	8b 45 08             	mov    0x8(%ebp),%eax
c0113794:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113797:	8b 45 0c             	mov    0xc(%ebp),%eax
c011379a:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_STRCPY
#define __HAVE_ARCH_STRCPY
static inline char *
__strcpy(char *dst, const char *src) {
    int d0, d1, d2;
    asm volatile (
c011379d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01137a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01137a3:	89 d1                	mov    %edx,%ecx
c01137a5:	89 c2                	mov    %eax,%edx
c01137a7:	89 ce                	mov    %ecx,%esi
c01137a9:	89 d7                	mov    %edx,%edi
c01137ab:	ac                   	lods   %ds:(%esi),%al
c01137ac:	aa                   	stos   %al,%es:(%edi)
c01137ad:	84 c0                	test   %al,%al
c01137af:	75 fa                	jne    c01137ab <strcpy+0x22>
c01137b1:	89 fa                	mov    %edi,%edx
c01137b3:	89 f1                	mov    %esi,%ecx
c01137b5:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c01137b8:	89 55 e8             	mov    %edx,-0x18(%ebp)
c01137bb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        "stosb;"
        "testb %%al, %%al;"
        "jne 1b;"
        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
        : "0" (src), "1" (dst) : "memory");
    return dst;
c01137be:	8b 45 f4             	mov    -0xc(%ebp),%eax
#ifdef __HAVE_ARCH_STRCPY
    return __strcpy(dst, src);
c01137c1:	90                   	nop
    char *p = dst;
    while ((*p ++ = *src ++) != '\0')
        /* nothing */;
    return dst;
#endif /* __HAVE_ARCH_STRCPY */
}
c01137c2:	83 c4 20             	add    $0x20,%esp
c01137c5:	5e                   	pop    %esi
c01137c6:	5f                   	pop    %edi
c01137c7:	5d                   	pop    %ebp
c01137c8:	c3                   	ret    

c01137c9 <strncpy>:
 * @len:    maximum number of characters to be copied from @src
 *
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
c01137c9:	55                   	push   %ebp
c01137ca:	89 e5                	mov    %esp,%ebp
c01137cc:	83 ec 10             	sub    $0x10,%esp
    char *p = dst;
c01137cf:	8b 45 08             	mov    0x8(%ebp),%eax
c01137d2:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (len > 0) {
c01137d5:	eb 21                	jmp    c01137f8 <strncpy+0x2f>
        if ((*p = *src) != '\0') {
c01137d7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01137da:	0f b6 10             	movzbl (%eax),%edx
c01137dd:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01137e0:	88 10                	mov    %dl,(%eax)
c01137e2:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01137e5:	0f b6 00             	movzbl (%eax),%eax
c01137e8:	84 c0                	test   %al,%al
c01137ea:	74 04                	je     c01137f0 <strncpy+0x27>
            src ++;
c01137ec:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
        }
        p ++, len --;
c01137f0:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c01137f4:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
    char *p = dst;
    while (len > 0) {
c01137f8:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01137fc:	75 d9                	jne    c01137d7 <strncpy+0xe>
        if ((*p = *src) != '\0') {
            src ++;
        }
        p ++, len --;
    }
    return dst;
c01137fe:	8b 45 08             	mov    0x8(%ebp),%eax
}
c0113801:	c9                   	leave  
c0113802:	c3                   	ret    

c0113803 <strcmp>:
 * - A value greater than zero indicates that the first character that does
 *   not match has a greater value in @s1 than in @s2;
 * - And a value less than zero indicates the opposite.
 * */
int
strcmp(const char *s1, const char *s2) {
c0113803:	55                   	push   %ebp
c0113804:	89 e5                	mov    %esp,%ebp
c0113806:	57                   	push   %edi
c0113807:	56                   	push   %esi
c0113808:	83 ec 20             	sub    $0x20,%esp
c011380b:	8b 45 08             	mov    0x8(%ebp),%eax
c011380e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113811:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113814:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_STRCMP
#define __HAVE_ARCH_STRCMP
static inline int
__strcmp(const char *s1, const char *s2) {
    int d0, d1, ret;
    asm volatile (
c0113817:	8b 55 f4             	mov    -0xc(%ebp),%edx
c011381a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011381d:	89 d1                	mov    %edx,%ecx
c011381f:	89 c2                	mov    %eax,%edx
c0113821:	89 ce                	mov    %ecx,%esi
c0113823:	89 d7                	mov    %edx,%edi
c0113825:	ac                   	lods   %ds:(%esi),%al
c0113826:	ae                   	scas   %es:(%edi),%al
c0113827:	75 08                	jne    c0113831 <strcmp+0x2e>
c0113829:	84 c0                	test   %al,%al
c011382b:	75 f8                	jne    c0113825 <strcmp+0x22>
c011382d:	31 c0                	xor    %eax,%eax
c011382f:	eb 04                	jmp    c0113835 <strcmp+0x32>
c0113831:	19 c0                	sbb    %eax,%eax
c0113833:	0c 01                	or     $0x1,%al
c0113835:	89 fa                	mov    %edi,%edx
c0113837:	89 f1                	mov    %esi,%ecx
c0113839:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011383c:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c011383f:	89 55 e4             	mov    %edx,-0x1c(%ebp)
        "orb $1, %%al;"
        "3:"
        : "=a" (ret), "=&S" (d0), "=&D" (d1)
        : "1" (s1), "2" (s2)
        : "memory");
    return ret;
c0113842:	8b 45 ec             	mov    -0x14(%ebp),%eax
#ifdef __HAVE_ARCH_STRCMP
    return __strcmp(s1, s2);
c0113845:	90                   	nop
    while (*s1 != '\0' && *s1 == *s2) {
        s1 ++, s2 ++;
    }
    return (int)((unsigned char)*s1 - (unsigned char)*s2);
#endif /* __HAVE_ARCH_STRCMP */
}
c0113846:	83 c4 20             	add    $0x20,%esp
c0113849:	5e                   	pop    %esi
c011384a:	5f                   	pop    %edi
c011384b:	5d                   	pop    %ebp
c011384c:	c3                   	ret    

c011384d <strncmp>:
 * they are equal to each other, it continues with the following pairs until
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
c011384d:	55                   	push   %ebp
c011384e:	89 e5                	mov    %esp,%ebp
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c0113850:	eb 0c                	jmp    c011385e <strncmp+0x11>
        n --, s1 ++, s2 ++;
c0113852:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c0113856:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c011385a:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c011385e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0113862:	74 1a                	je     c011387e <strncmp+0x31>
c0113864:	8b 45 08             	mov    0x8(%ebp),%eax
c0113867:	0f b6 00             	movzbl (%eax),%eax
c011386a:	84 c0                	test   %al,%al
c011386c:	74 10                	je     c011387e <strncmp+0x31>
c011386e:	8b 45 08             	mov    0x8(%ebp),%eax
c0113871:	0f b6 10             	movzbl (%eax),%edx
c0113874:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113877:	0f b6 00             	movzbl (%eax),%eax
c011387a:	38 c2                	cmp    %al,%dl
c011387c:	74 d4                	je     c0113852 <strncmp+0x5>
        n --, s1 ++, s2 ++;
    }
    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
c011387e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0113882:	74 18                	je     c011389c <strncmp+0x4f>
c0113884:	8b 45 08             	mov    0x8(%ebp),%eax
c0113887:	0f b6 00             	movzbl (%eax),%eax
c011388a:	0f b6 d0             	movzbl %al,%edx
c011388d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113890:	0f b6 00             	movzbl (%eax),%eax
c0113893:	0f b6 c0             	movzbl %al,%eax
c0113896:	29 c2                	sub    %eax,%edx
c0113898:	89 d0                	mov    %edx,%eax
c011389a:	eb 05                	jmp    c01138a1 <strncmp+0x54>
c011389c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01138a1:	5d                   	pop    %ebp
c01138a2:	c3                   	ret    

c01138a3 <strchr>:
 *
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
c01138a3:	55                   	push   %ebp
c01138a4:	89 e5                	mov    %esp,%ebp
c01138a6:	83 ec 04             	sub    $0x4,%esp
c01138a9:	8b 45 0c             	mov    0xc(%ebp),%eax
c01138ac:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c01138af:	eb 14                	jmp    c01138c5 <strchr+0x22>
        if (*s == c) {
c01138b1:	8b 45 08             	mov    0x8(%ebp),%eax
c01138b4:	0f b6 00             	movzbl (%eax),%eax
c01138b7:	3a 45 fc             	cmp    -0x4(%ebp),%al
c01138ba:	75 05                	jne    c01138c1 <strchr+0x1e>
            return (char *)s;
c01138bc:	8b 45 08             	mov    0x8(%ebp),%eax
c01138bf:	eb 13                	jmp    c01138d4 <strchr+0x31>
        }
        s ++;
c01138c1:	83 45 08 01          	addl   $0x1,0x8(%ebp)
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
    while (*s != '\0') {
c01138c5:	8b 45 08             	mov    0x8(%ebp),%eax
c01138c8:	0f b6 00             	movzbl (%eax),%eax
c01138cb:	84 c0                	test   %al,%al
c01138cd:	75 e2                	jne    c01138b1 <strchr+0xe>
        if (*s == c) {
            return (char *)s;
        }
        s ++;
    }
    return NULL;
c01138cf:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01138d4:	c9                   	leave  
c01138d5:	c3                   	ret    

c01138d6 <strfind>:
 * The strfind() function is like strchr() except that if @c is
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
c01138d6:	55                   	push   %ebp
c01138d7:	89 e5                	mov    %esp,%ebp
c01138d9:	83 ec 04             	sub    $0x4,%esp
c01138dc:	8b 45 0c             	mov    0xc(%ebp),%eax
c01138df:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c01138e2:	eb 0f                	jmp    c01138f3 <strfind+0x1d>
        if (*s == c) {
c01138e4:	8b 45 08             	mov    0x8(%ebp),%eax
c01138e7:	0f b6 00             	movzbl (%eax),%eax
c01138ea:	3a 45 fc             	cmp    -0x4(%ebp),%al
c01138ed:	74 10                	je     c01138ff <strfind+0x29>
            break;
        }
        s ++;
c01138ef:	83 45 08 01          	addl   $0x1,0x8(%ebp)
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
    while (*s != '\0') {
c01138f3:	8b 45 08             	mov    0x8(%ebp),%eax
c01138f6:	0f b6 00             	movzbl (%eax),%eax
c01138f9:	84 c0                	test   %al,%al
c01138fb:	75 e7                	jne    c01138e4 <strfind+0xe>
c01138fd:	eb 01                	jmp    c0113900 <strfind+0x2a>
        if (*s == c) {
            break;
c01138ff:	90                   	nop
        }
        s ++;
    }
    return (char *)s;
c0113900:	8b 45 08             	mov    0x8(%ebp),%eax
}
c0113903:	c9                   	leave  
c0113904:	c3                   	ret    

c0113905 <strtol>:
 * an optional "0x" or "0X" prefix.
 *
 * The strtol() function returns the converted integral number as a long int value.
 * */
long
strtol(const char *s, char **endptr, int base) {
c0113905:	55                   	push   %ebp
c0113906:	89 e5                	mov    %esp,%ebp
c0113908:	83 ec 10             	sub    $0x10,%esp
    int neg = 0;
c011390b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    long val = 0;
c0113912:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
c0113919:	eb 04                	jmp    c011391f <strtol+0x1a>
        s ++;
c011391b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
strtol(const char *s, char **endptr, int base) {
    int neg = 0;
    long val = 0;

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
c011391f:	8b 45 08             	mov    0x8(%ebp),%eax
c0113922:	0f b6 00             	movzbl (%eax),%eax
c0113925:	3c 20                	cmp    $0x20,%al
c0113927:	74 f2                	je     c011391b <strtol+0x16>
c0113929:	8b 45 08             	mov    0x8(%ebp),%eax
c011392c:	0f b6 00             	movzbl (%eax),%eax
c011392f:	3c 09                	cmp    $0x9,%al
c0113931:	74 e8                	je     c011391b <strtol+0x16>
        s ++;
    }

    // plus/minus sign
    if (*s == '+') {
c0113933:	8b 45 08             	mov    0x8(%ebp),%eax
c0113936:	0f b6 00             	movzbl (%eax),%eax
c0113939:	3c 2b                	cmp    $0x2b,%al
c011393b:	75 06                	jne    c0113943 <strtol+0x3e>
        s ++;
c011393d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c0113941:	eb 15                	jmp    c0113958 <strtol+0x53>
    }
    else if (*s == '-') {
c0113943:	8b 45 08             	mov    0x8(%ebp),%eax
c0113946:	0f b6 00             	movzbl (%eax),%eax
c0113949:	3c 2d                	cmp    $0x2d,%al
c011394b:	75 0b                	jne    c0113958 <strtol+0x53>
        s ++, neg = 1;
c011394d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c0113951:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
    }

    // hex or octal base prefix
    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
c0113958:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c011395c:	74 06                	je     c0113964 <strtol+0x5f>
c011395e:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
c0113962:	75 24                	jne    c0113988 <strtol+0x83>
c0113964:	8b 45 08             	mov    0x8(%ebp),%eax
c0113967:	0f b6 00             	movzbl (%eax),%eax
c011396a:	3c 30                	cmp    $0x30,%al
c011396c:	75 1a                	jne    c0113988 <strtol+0x83>
c011396e:	8b 45 08             	mov    0x8(%ebp),%eax
c0113971:	83 c0 01             	add    $0x1,%eax
c0113974:	0f b6 00             	movzbl (%eax),%eax
c0113977:	3c 78                	cmp    $0x78,%al
c0113979:	75 0d                	jne    c0113988 <strtol+0x83>
        s += 2, base = 16;
c011397b:	83 45 08 02          	addl   $0x2,0x8(%ebp)
c011397f:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
c0113986:	eb 2a                	jmp    c01139b2 <strtol+0xad>
    }
    else if (base == 0 && s[0] == '0') {
c0113988:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c011398c:	75 17                	jne    c01139a5 <strtol+0xa0>
c011398e:	8b 45 08             	mov    0x8(%ebp),%eax
c0113991:	0f b6 00             	movzbl (%eax),%eax
c0113994:	3c 30                	cmp    $0x30,%al
c0113996:	75 0d                	jne    c01139a5 <strtol+0xa0>
        s ++, base = 8;
c0113998:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c011399c:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
c01139a3:	eb 0d                	jmp    c01139b2 <strtol+0xad>
    }
    else if (base == 0) {
c01139a5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01139a9:	75 07                	jne    c01139b2 <strtol+0xad>
        base = 10;
c01139ab:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

    // digits
    while (1) {
        int dig;

        if (*s >= '0' && *s <= '9') {
c01139b2:	8b 45 08             	mov    0x8(%ebp),%eax
c01139b5:	0f b6 00             	movzbl (%eax),%eax
c01139b8:	3c 2f                	cmp    $0x2f,%al
c01139ba:	7e 1b                	jle    c01139d7 <strtol+0xd2>
c01139bc:	8b 45 08             	mov    0x8(%ebp),%eax
c01139bf:	0f b6 00             	movzbl (%eax),%eax
c01139c2:	3c 39                	cmp    $0x39,%al
c01139c4:	7f 11                	jg     c01139d7 <strtol+0xd2>
            dig = *s - '0';
c01139c6:	8b 45 08             	mov    0x8(%ebp),%eax
c01139c9:	0f b6 00             	movzbl (%eax),%eax
c01139cc:	0f be c0             	movsbl %al,%eax
c01139cf:	83 e8 30             	sub    $0x30,%eax
c01139d2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01139d5:	eb 48                	jmp    c0113a1f <strtol+0x11a>
        }
        else if (*s >= 'a' && *s <= 'z') {
c01139d7:	8b 45 08             	mov    0x8(%ebp),%eax
c01139da:	0f b6 00             	movzbl (%eax),%eax
c01139dd:	3c 60                	cmp    $0x60,%al
c01139df:	7e 1b                	jle    c01139fc <strtol+0xf7>
c01139e1:	8b 45 08             	mov    0x8(%ebp),%eax
c01139e4:	0f b6 00             	movzbl (%eax),%eax
c01139e7:	3c 7a                	cmp    $0x7a,%al
c01139e9:	7f 11                	jg     c01139fc <strtol+0xf7>
            dig = *s - 'a' + 10;
c01139eb:	8b 45 08             	mov    0x8(%ebp),%eax
c01139ee:	0f b6 00             	movzbl (%eax),%eax
c01139f1:	0f be c0             	movsbl %al,%eax
c01139f4:	83 e8 57             	sub    $0x57,%eax
c01139f7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01139fa:	eb 23                	jmp    c0113a1f <strtol+0x11a>
        }
        else if (*s >= 'A' && *s <= 'Z') {
c01139fc:	8b 45 08             	mov    0x8(%ebp),%eax
c01139ff:	0f b6 00             	movzbl (%eax),%eax
c0113a02:	3c 40                	cmp    $0x40,%al
c0113a04:	7e 3c                	jle    c0113a42 <strtol+0x13d>
c0113a06:	8b 45 08             	mov    0x8(%ebp),%eax
c0113a09:	0f b6 00             	movzbl (%eax),%eax
c0113a0c:	3c 5a                	cmp    $0x5a,%al
c0113a0e:	7f 32                	jg     c0113a42 <strtol+0x13d>
            dig = *s - 'A' + 10;
c0113a10:	8b 45 08             	mov    0x8(%ebp),%eax
c0113a13:	0f b6 00             	movzbl (%eax),%eax
c0113a16:	0f be c0             	movsbl %al,%eax
c0113a19:	83 e8 37             	sub    $0x37,%eax
c0113a1c:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        else {
            break;
        }
        if (dig >= base) {
c0113a1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113a22:	3b 45 10             	cmp    0x10(%ebp),%eax
c0113a25:	7d 1a                	jge    c0113a41 <strtol+0x13c>
            break;
        }
        s ++, val = (val * base) + dig;
c0113a27:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c0113a2b:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0113a2e:	0f af 45 10          	imul   0x10(%ebp),%eax
c0113a32:	89 c2                	mov    %eax,%edx
c0113a34:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113a37:	01 d0                	add    %edx,%eax
c0113a39:	89 45 f8             	mov    %eax,-0x8(%ebp)
        // we don't properly detect overflow!
    }
c0113a3c:	e9 71 ff ff ff       	jmp    c01139b2 <strtol+0xad>
        }
        else {
            break;
        }
        if (dig >= base) {
            break;
c0113a41:	90                   	nop
        }
        s ++, val = (val * base) + dig;
        // we don't properly detect overflow!
    }

    if (endptr) {
c0113a42:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0113a46:	74 08                	je     c0113a50 <strtol+0x14b>
        *endptr = (char *) s;
c0113a48:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113a4b:	8b 55 08             	mov    0x8(%ebp),%edx
c0113a4e:	89 10                	mov    %edx,(%eax)
    }
    return (neg ? -val : val);
c0113a50:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0113a54:	74 07                	je     c0113a5d <strtol+0x158>
c0113a56:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0113a59:	f7 d8                	neg    %eax
c0113a5b:	eb 03                	jmp    c0113a60 <strtol+0x15b>
c0113a5d:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c0113a60:	c9                   	leave  
c0113a61:	c3                   	ret    

c0113a62 <memset>:
 * @n:      number of bytes to be set to the value
 *
 * The memset() function returns @s.
 * */
void *
memset(void *s, char c, size_t n) {
c0113a62:	55                   	push   %ebp
c0113a63:	89 e5                	mov    %esp,%ebp
c0113a65:	57                   	push   %edi
c0113a66:	83 ec 24             	sub    $0x24,%esp
c0113a69:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113a6c:	88 45 d8             	mov    %al,-0x28(%ebp)
#ifdef __HAVE_ARCH_MEMSET
    return __memset(s, c, n);
c0113a6f:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
c0113a73:	8b 55 08             	mov    0x8(%ebp),%edx
c0113a76:	89 55 f8             	mov    %edx,-0x8(%ebp)
c0113a79:	88 45 f7             	mov    %al,-0x9(%ebp)
c0113a7c:	8b 45 10             	mov    0x10(%ebp),%eax
c0113a7f:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_MEMSET
#define __HAVE_ARCH_MEMSET
static inline void *
__memset(void *s, char c, size_t n) {
    int d0, d1;
    asm volatile (
c0113a82:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c0113a85:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0113a89:	8b 55 f8             	mov    -0x8(%ebp),%edx
c0113a8c:	89 d7                	mov    %edx,%edi
c0113a8e:	f3 aa                	rep stos %al,%es:(%edi)
c0113a90:	89 fa                	mov    %edi,%edx
c0113a92:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c0113a95:	89 55 e8             	mov    %edx,-0x18(%ebp)
        "rep; stosb;"
        : "=&c" (d0), "=&D" (d1)
        : "0" (n), "a" (c), "1" (s)
        : "memory");
    return s;
c0113a98:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0113a9b:	90                   	nop
    while (n -- > 0) {
        *p ++ = c;
    }
    return s;
#endif /* __HAVE_ARCH_MEMSET */
}
c0113a9c:	83 c4 24             	add    $0x24,%esp
c0113a9f:	5f                   	pop    %edi
c0113aa0:	5d                   	pop    %ebp
c0113aa1:	c3                   	ret    

c0113aa2 <memmove>:
 * @n:      number of bytes to copy
 *
 * The memmove() function returns @dst.
 * */
void *
memmove(void *dst, const void *src, size_t n) {
c0113aa2:	55                   	push   %ebp
c0113aa3:	89 e5                	mov    %esp,%ebp
c0113aa5:	57                   	push   %edi
c0113aa6:	56                   	push   %esi
c0113aa7:	53                   	push   %ebx
c0113aa8:	83 ec 30             	sub    $0x30,%esp
c0113aab:	8b 45 08             	mov    0x8(%ebp),%eax
c0113aae:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0113ab1:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113ab4:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0113ab7:	8b 45 10             	mov    0x10(%ebp),%eax
c0113aba:	89 45 e8             	mov    %eax,-0x18(%ebp)

#ifndef __HAVE_ARCH_MEMMOVE
#define __HAVE_ARCH_MEMMOVE
static inline void *
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
c0113abd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113ac0:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0113ac3:	73 42                	jae    c0113b07 <memmove+0x65>
c0113ac5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113ac8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0113acb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113ace:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0113ad1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113ad4:	89 45 dc             	mov    %eax,-0x24(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c0113ad7:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0113ada:	c1 e8 02             	shr    $0x2,%eax
c0113add:	89 c1                	mov    %eax,%ecx
#ifndef __HAVE_ARCH_MEMCPY
#define __HAVE_ARCH_MEMCPY
static inline void *
__memcpy(void *dst, const void *src, size_t n) {
    int d0, d1, d2;
    asm volatile (
c0113adf:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0113ae2:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113ae5:	89 d7                	mov    %edx,%edi
c0113ae7:	89 c6                	mov    %eax,%esi
c0113ae9:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c0113aeb:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0113aee:	83 e1 03             	and    $0x3,%ecx
c0113af1:	74 02                	je     c0113af5 <memmove+0x53>
c0113af3:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c0113af5:	89 f0                	mov    %esi,%eax
c0113af7:	89 fa                	mov    %edi,%edx
c0113af9:	89 4d d8             	mov    %ecx,-0x28(%ebp)
c0113afc:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0113aff:	89 45 d0             	mov    %eax,-0x30(%ebp)
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
        : "memory");
    return dst;
c0113b02:	8b 45 e4             	mov    -0x1c(%ebp),%eax
#ifdef __HAVE_ARCH_MEMMOVE
    return __memmove(dst, src, n);
c0113b05:	eb 36                	jmp    c0113b3d <memmove+0x9b>
    asm volatile (
        "std;"
        "rep; movsb;"
        "cld;"
        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
c0113b07:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113b0a:	8d 50 ff             	lea    -0x1(%eax),%edx
c0113b0d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113b10:	01 c2                	add    %eax,%edx
c0113b12:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113b15:	8d 48 ff             	lea    -0x1(%eax),%ecx
c0113b18:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113b1b:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
        return __memcpy(dst, src, n);
    }
    int d0, d1, d2;
    asm volatile (
c0113b1e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113b21:	89 c1                	mov    %eax,%ecx
c0113b23:	89 d8                	mov    %ebx,%eax
c0113b25:	89 d6                	mov    %edx,%esi
c0113b27:	89 c7                	mov    %eax,%edi
c0113b29:	fd                   	std    
c0113b2a:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c0113b2c:	fc                   	cld    
c0113b2d:	89 f8                	mov    %edi,%eax
c0113b2f:	89 f2                	mov    %esi,%edx
c0113b31:	89 4d cc             	mov    %ecx,-0x34(%ebp)
c0113b34:	89 55 c8             	mov    %edx,-0x38(%ebp)
c0113b37:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        "rep; movsb;"
        "cld;"
        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
        : "memory");
    return dst;
c0113b3a:	8b 45 f0             	mov    -0x10(%ebp),%eax
            *d ++ = *s ++;
        }
    }
    return dst;
#endif /* __HAVE_ARCH_MEMMOVE */
}
c0113b3d:	83 c4 30             	add    $0x30,%esp
c0113b40:	5b                   	pop    %ebx
c0113b41:	5e                   	pop    %esi
c0113b42:	5f                   	pop    %edi
c0113b43:	5d                   	pop    %ebp
c0113b44:	c3                   	ret    

c0113b45 <memcpy>:
 * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
 * by both @src and @dst, should be at least @n bytes, and should not overlap
 * (for overlapping memory area, memmove is a safer approach).
 * */
void *
memcpy(void *dst, const void *src, size_t n) {
c0113b45:	55                   	push   %ebp
c0113b46:	89 e5                	mov    %esp,%ebp
c0113b48:	57                   	push   %edi
c0113b49:	56                   	push   %esi
c0113b4a:	83 ec 20             	sub    $0x20,%esp
c0113b4d:	8b 45 08             	mov    0x8(%ebp),%eax
c0113b50:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113b53:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113b56:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0113b59:	8b 45 10             	mov    0x10(%ebp),%eax
c0113b5c:	89 45 ec             	mov    %eax,-0x14(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c0113b5f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0113b62:	c1 e8 02             	shr    $0x2,%eax
c0113b65:	89 c1                	mov    %eax,%ecx
#ifndef __HAVE_ARCH_MEMCPY
#define __HAVE_ARCH_MEMCPY
static inline void *
__memcpy(void *dst, const void *src, size_t n) {
    int d0, d1, d2;
    asm volatile (
c0113b67:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0113b6a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113b6d:	89 d7                	mov    %edx,%edi
c0113b6f:	89 c6                	mov    %eax,%esi
c0113b71:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c0113b73:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c0113b76:	83 e1 03             	and    $0x3,%ecx
c0113b79:	74 02                	je     c0113b7d <memcpy+0x38>
c0113b7b:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c0113b7d:	89 f0                	mov    %esi,%eax
c0113b7f:	89 fa                	mov    %edi,%edx
c0113b81:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c0113b84:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0113b87:	89 45 e0             	mov    %eax,-0x20(%ebp)
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
        : "memory");
    return dst;
c0113b8a:	8b 45 f4             	mov    -0xc(%ebp),%eax
#ifdef __HAVE_ARCH_MEMCPY
    return __memcpy(dst, src, n);
c0113b8d:	90                   	nop
    while (n -- > 0) {
        *d ++ = *s ++;
    }
    return dst;
#endif /* __HAVE_ARCH_MEMCPY */
}
c0113b8e:	83 c4 20             	add    $0x20,%esp
c0113b91:	5e                   	pop    %esi
c0113b92:	5f                   	pop    %edi
c0113b93:	5d                   	pop    %ebp
c0113b94:	c3                   	ret    

c0113b95 <memcmp>:
 *   match in both memory blocks has a greater value in @v1 than in @v2
 *   as if evaluated as unsigned char values;
 * - And a value less than zero indicates the opposite.
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
c0113b95:	55                   	push   %ebp
c0113b96:	89 e5                	mov    %esp,%ebp
c0113b98:	83 ec 10             	sub    $0x10,%esp
    const char *s1 = (const char *)v1;
c0113b9b:	8b 45 08             	mov    0x8(%ebp),%eax
c0113b9e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s2 = (const char *)v2;
c0113ba1:	8b 45 0c             	mov    0xc(%ebp),%eax
c0113ba4:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (n -- > 0) {
c0113ba7:	eb 30                	jmp    c0113bd9 <memcmp+0x44>
        if (*s1 != *s2) {
c0113ba9:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0113bac:	0f b6 10             	movzbl (%eax),%edx
c0113baf:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0113bb2:	0f b6 00             	movzbl (%eax),%eax
c0113bb5:	38 c2                	cmp    %al,%dl
c0113bb7:	74 18                	je     c0113bd1 <memcmp+0x3c>
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
c0113bb9:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0113bbc:	0f b6 00             	movzbl (%eax),%eax
c0113bbf:	0f b6 d0             	movzbl %al,%edx
c0113bc2:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0113bc5:	0f b6 00             	movzbl (%eax),%eax
c0113bc8:	0f b6 c0             	movzbl %al,%eax
c0113bcb:	29 c2                	sub    %eax,%edx
c0113bcd:	89 d0                	mov    %edx,%eax
c0113bcf:	eb 1a                	jmp    c0113beb <memcmp+0x56>
        }
        s1 ++, s2 ++;
c0113bd1:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0113bd5:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
    const char *s1 = (const char *)v1;
    const char *s2 = (const char *)v2;
    while (n -- > 0) {
c0113bd9:	8b 45 10             	mov    0x10(%ebp),%eax
c0113bdc:	8d 50 ff             	lea    -0x1(%eax),%edx
c0113bdf:	89 55 10             	mov    %edx,0x10(%ebp)
c0113be2:	85 c0                	test   %eax,%eax
c0113be4:	75 c3                	jne    c0113ba9 <memcmp+0x14>
        if (*s1 != *s2) {
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
        }
        s1 ++, s2 ++;
    }
    return 0;
c0113be6:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0113beb:	c9                   	leave  
c0113bec:	c3                   	ret    

c0113bed <printnum>:
 * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
 * @padc:       character that padded on the left if the actual width is less than @width
 * */
static void
printnum(void (*putch)(int, void*, int), int fd, void *putdat,
        unsigned long long num, unsigned base, int width, int padc) {
c0113bed:	55                   	push   %ebp
c0113bee:	89 e5                	mov    %esp,%ebp
c0113bf0:	83 ec 38             	sub    $0x38,%esp
c0113bf3:	8b 45 14             	mov    0x14(%ebp),%eax
c0113bf6:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0113bf9:	8b 45 18             	mov    0x18(%ebp),%eax
c0113bfc:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    unsigned long long result = num;
c0113bff:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0113c02:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0113c05:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0113c08:	89 55 ec             	mov    %edx,-0x14(%ebp)
    unsigned mod = do_div(result, base);
c0113c0b:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0113c0e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0113c11:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113c14:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0113c17:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0113c1a:	89 55 f0             	mov    %edx,-0x10(%ebp)
c0113c1d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113c20:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0113c23:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0113c27:	74 1c                	je     c0113c45 <printnum+0x58>
c0113c29:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113c2c:	ba 00 00 00 00       	mov    $0x0,%edx
c0113c31:	f7 75 e4             	divl   -0x1c(%ebp)
c0113c34:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0113c37:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0113c3a:	ba 00 00 00 00       	mov    $0x0,%edx
c0113c3f:	f7 75 e4             	divl   -0x1c(%ebp)
c0113c42:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0113c45:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113c48:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0113c4b:	f7 75 e4             	divl   -0x1c(%ebp)
c0113c4e:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0113c51:	89 55 dc             	mov    %edx,-0x24(%ebp)
c0113c54:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0113c57:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0113c5a:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0113c5d:	89 55 ec             	mov    %edx,-0x14(%ebp)
c0113c60:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0113c63:	89 45 d8             	mov    %eax,-0x28(%ebp)

    // first recursively print all preceding (more significant) digits
    if (num >= base) {
c0113c66:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0113c69:	ba 00 00 00 00       	mov    $0x0,%edx
c0113c6e:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c0113c71:	77 44                	ja     c0113cb7 <printnum+0xca>
c0113c73:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c0113c76:	72 05                	jb     c0113c7d <printnum+0x90>
c0113c78:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c0113c7b:	77 3a                	ja     c0113cb7 <printnum+0xca>
        printnum(putch, fd, putdat, result, base, width - 1, padc);
c0113c7d:	8b 45 20             	mov    0x20(%ebp),%eax
c0113c80:	83 e8 01             	sub    $0x1,%eax
c0113c83:	ff 75 24             	pushl  0x24(%ebp)
c0113c86:	50                   	push   %eax
c0113c87:	ff 75 1c             	pushl  0x1c(%ebp)
c0113c8a:	ff 75 ec             	pushl  -0x14(%ebp)
c0113c8d:	ff 75 e8             	pushl  -0x18(%ebp)
c0113c90:	ff 75 10             	pushl  0x10(%ebp)
c0113c93:	ff 75 0c             	pushl  0xc(%ebp)
c0113c96:	ff 75 08             	pushl  0x8(%ebp)
c0113c99:	e8 4f ff ff ff       	call   c0113bed <printnum>
c0113c9e:	83 c4 20             	add    $0x20,%esp
c0113ca1:	eb 1e                	jmp    c0113cc1 <printnum+0xd4>
    } else {
        // print any needed pad characters before first digit
        while (-- width > 0)
            putch(padc, putdat, fd);
c0113ca3:	83 ec 04             	sub    $0x4,%esp
c0113ca6:	ff 75 0c             	pushl  0xc(%ebp)
c0113ca9:	ff 75 10             	pushl  0x10(%ebp)
c0113cac:	ff 75 24             	pushl  0x24(%ebp)
c0113caf:	8b 45 08             	mov    0x8(%ebp),%eax
c0113cb2:	ff d0                	call   *%eax
c0113cb4:	83 c4 10             	add    $0x10,%esp
    // first recursively print all preceding (more significant) digits
    if (num >= base) {
        printnum(putch, fd, putdat, result, base, width - 1, padc);
    } else {
        // print any needed pad characters before first digit
        while (-- width > 0)
c0113cb7:	83 6d 20 01          	subl   $0x1,0x20(%ebp)
c0113cbb:	83 7d 20 00          	cmpl   $0x0,0x20(%ebp)
c0113cbf:	7f e2                	jg     c0113ca3 <printnum+0xb6>
            putch(padc, putdat, fd);
    }
    // then print this (the least significant) digit
    putch("0123456789abcdef"[mod], putdat, fd);
c0113cc1:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0113cc4:	05 64 88 11 c0       	add    $0xc0118864,%eax
c0113cc9:	0f b6 00             	movzbl (%eax),%eax
c0113ccc:	0f be c0             	movsbl %al,%eax
c0113ccf:	83 ec 04             	sub    $0x4,%esp
c0113cd2:	ff 75 0c             	pushl  0xc(%ebp)
c0113cd5:	ff 75 10             	pushl  0x10(%ebp)
c0113cd8:	50                   	push   %eax
c0113cd9:	8b 45 08             	mov    0x8(%ebp),%eax
c0113cdc:	ff d0                	call   *%eax
c0113cde:	83 c4 10             	add    $0x10,%esp
}
c0113ce1:	90                   	nop
c0113ce2:	c9                   	leave  
c0113ce3:	c3                   	ret    

c0113ce4 <getuint>:
 * getuint - get an unsigned int of various possible sizes from a varargs list
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static unsigned long long
getuint(va_list *ap, int lflag) {
c0113ce4:	55                   	push   %ebp
c0113ce5:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c0113ce7:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c0113ceb:	7e 14                	jle    c0113d01 <getuint+0x1d>
        return va_arg(*ap, unsigned long long);
c0113ced:	8b 45 08             	mov    0x8(%ebp),%eax
c0113cf0:	8b 00                	mov    (%eax),%eax
c0113cf2:	8d 48 08             	lea    0x8(%eax),%ecx
c0113cf5:	8b 55 08             	mov    0x8(%ebp),%edx
c0113cf8:	89 0a                	mov    %ecx,(%edx)
c0113cfa:	8b 50 04             	mov    0x4(%eax),%edx
c0113cfd:	8b 00                	mov    (%eax),%eax
c0113cff:	eb 30                	jmp    c0113d31 <getuint+0x4d>
    }
    else if (lflag) {
c0113d01:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0113d05:	74 16                	je     c0113d1d <getuint+0x39>
        return va_arg(*ap, unsigned long);
c0113d07:	8b 45 08             	mov    0x8(%ebp),%eax
c0113d0a:	8b 00                	mov    (%eax),%eax
c0113d0c:	8d 48 04             	lea    0x4(%eax),%ecx
c0113d0f:	8b 55 08             	mov    0x8(%ebp),%edx
c0113d12:	89 0a                	mov    %ecx,(%edx)
c0113d14:	8b 00                	mov    (%eax),%eax
c0113d16:	ba 00 00 00 00       	mov    $0x0,%edx
c0113d1b:	eb 14                	jmp    c0113d31 <getuint+0x4d>
    }
    else {
        return va_arg(*ap, unsigned int);
c0113d1d:	8b 45 08             	mov    0x8(%ebp),%eax
c0113d20:	8b 00                	mov    (%eax),%eax
c0113d22:	8d 48 04             	lea    0x4(%eax),%ecx
c0113d25:	8b 55 08             	mov    0x8(%ebp),%edx
c0113d28:	89 0a                	mov    %ecx,(%edx)
c0113d2a:	8b 00                	mov    (%eax),%eax
c0113d2c:	ba 00 00 00 00       	mov    $0x0,%edx
    }
}
c0113d31:	5d                   	pop    %ebp
c0113d32:	c3                   	ret    

c0113d33 <getint>:
 * getint - same as getuint but signed, we can't use getuint because of sign extension
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static long long
getint(va_list *ap, int lflag) {
c0113d33:	55                   	push   %ebp
c0113d34:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c0113d36:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c0113d3a:	7e 14                	jle    c0113d50 <getint+0x1d>
        return va_arg(*ap, long long);
c0113d3c:	8b 45 08             	mov    0x8(%ebp),%eax
c0113d3f:	8b 00                	mov    (%eax),%eax
c0113d41:	8d 48 08             	lea    0x8(%eax),%ecx
c0113d44:	8b 55 08             	mov    0x8(%ebp),%edx
c0113d47:	89 0a                	mov    %ecx,(%edx)
c0113d49:	8b 50 04             	mov    0x4(%eax),%edx
c0113d4c:	8b 00                	mov    (%eax),%eax
c0113d4e:	eb 28                	jmp    c0113d78 <getint+0x45>
    }
    else if (lflag) {
c0113d50:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0113d54:	74 12                	je     c0113d68 <getint+0x35>
        return va_arg(*ap, long);
c0113d56:	8b 45 08             	mov    0x8(%ebp),%eax
c0113d59:	8b 00                	mov    (%eax),%eax
c0113d5b:	8d 48 04             	lea    0x4(%eax),%ecx
c0113d5e:	8b 55 08             	mov    0x8(%ebp),%edx
c0113d61:	89 0a                	mov    %ecx,(%edx)
c0113d63:	8b 00                	mov    (%eax),%eax
c0113d65:	99                   	cltd   
c0113d66:	eb 10                	jmp    c0113d78 <getint+0x45>
    }
    else {
        return va_arg(*ap, int);
c0113d68:	8b 45 08             	mov    0x8(%ebp),%eax
c0113d6b:	8b 00                	mov    (%eax),%eax
c0113d6d:	8d 48 04             	lea    0x4(%eax),%ecx
c0113d70:	8b 55 08             	mov    0x8(%ebp),%edx
c0113d73:	89 0a                	mov    %ecx,(%edx)
c0113d75:	8b 00                	mov    (%eax),%eax
c0113d77:	99                   	cltd   
    }
}
c0113d78:	5d                   	pop    %ebp
c0113d79:	c3                   	ret    

c0113d7a <printfmt>:
 * @fd:         file descriptor
 * @putdat:     used by @putch function
 * @fmt:        the format string to use
 * */
void
printfmt(void (*putch)(int, void*, int), int fd, void *putdat, const char *fmt, ...) {
c0113d7a:	55                   	push   %ebp
c0113d7b:	89 e5                	mov    %esp,%ebp
c0113d7d:	83 ec 18             	sub    $0x18,%esp
    va_list ap;

    va_start(ap, fmt);
c0113d80:	8d 45 18             	lea    0x18(%ebp),%eax
c0113d83:	89 45 f4             	mov    %eax,-0xc(%ebp)
    vprintfmt(putch, fd, putdat, fmt, ap);
c0113d86:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0113d89:	83 ec 0c             	sub    $0xc,%esp
c0113d8c:	50                   	push   %eax
c0113d8d:	ff 75 14             	pushl  0x14(%ebp)
c0113d90:	ff 75 10             	pushl  0x10(%ebp)
c0113d93:	ff 75 0c             	pushl  0xc(%ebp)
c0113d96:	ff 75 08             	pushl  0x8(%ebp)
c0113d99:	e8 06 00 00 00       	call   c0113da4 <vprintfmt>
c0113d9e:	83 c4 20             	add    $0x20,%esp
    va_end(ap);
}
c0113da1:	90                   	nop
c0113da2:	c9                   	leave  
c0113da3:	c3                   	ret    

c0113da4 <vprintfmt>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want printfmt() instead.
 * */
void
vprintfmt(void (*putch)(int, void*, int), int fd, void *putdat, const char *fmt, va_list ap) {
c0113da4:	55                   	push   %ebp
c0113da5:	89 e5                	mov    %esp,%ebp
c0113da7:	56                   	push   %esi
c0113da8:	53                   	push   %ebx
c0113da9:	83 ec 20             	sub    $0x20,%esp
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c0113dac:	eb 1a                	jmp    c0113dc8 <vprintfmt+0x24>
            if (ch == '\0') {
c0113dae:	85 db                	test   %ebx,%ebx
c0113db0:	0f 84 be 03 00 00    	je     c0114174 <vprintfmt+0x3d0>
                return;
            }
            putch(ch, putdat, fd);
c0113db6:	83 ec 04             	sub    $0x4,%esp
c0113db9:	ff 75 0c             	pushl  0xc(%ebp)
c0113dbc:	ff 75 10             	pushl  0x10(%ebp)
c0113dbf:	53                   	push   %ebx
c0113dc0:	8b 45 08             	mov    0x8(%ebp),%eax
c0113dc3:	ff d0                	call   *%eax
c0113dc5:	83 c4 10             	add    $0x10,%esp
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c0113dc8:	8b 45 14             	mov    0x14(%ebp),%eax
c0113dcb:	8d 50 01             	lea    0x1(%eax),%edx
c0113dce:	89 55 14             	mov    %edx,0x14(%ebp)
c0113dd1:	0f b6 00             	movzbl (%eax),%eax
c0113dd4:	0f b6 d8             	movzbl %al,%ebx
c0113dd7:	83 fb 25             	cmp    $0x25,%ebx
c0113dda:	75 d2                	jne    c0113dae <vprintfmt+0xa>
            }
            putch(ch, putdat, fd);
        }

        // Process a %-escape sequence
        char padc = ' ';
c0113ddc:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
        width = precision = -1;
c0113de0:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
c0113de7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113dea:	89 45 e8             	mov    %eax,-0x18(%ebp)
        lflag = altflag = 0;
c0113ded:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0113df4:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0113df7:	89 45 e0             	mov    %eax,-0x20(%ebp)

    reswitch:
        switch (ch = *(unsigned char *)fmt ++) {
c0113dfa:	8b 45 14             	mov    0x14(%ebp),%eax
c0113dfd:	8d 50 01             	lea    0x1(%eax),%edx
c0113e00:	89 55 14             	mov    %edx,0x14(%ebp)
c0113e03:	0f b6 00             	movzbl (%eax),%eax
c0113e06:	0f b6 d8             	movzbl %al,%ebx
c0113e09:	8d 43 dd             	lea    -0x23(%ebx),%eax
c0113e0c:	83 f8 55             	cmp    $0x55,%eax
c0113e0f:	0f 87 2f 03 00 00    	ja     c0114144 <vprintfmt+0x3a0>
c0113e15:	8b 04 85 88 88 11 c0 	mov    -0x3fee7778(,%eax,4),%eax
c0113e1c:	ff e0                	jmp    *%eax

        // flag to pad on the right
        case '-':
            padc = '-';
c0113e1e:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
            goto reswitch;
c0113e22:	eb d6                	jmp    c0113dfa <vprintfmt+0x56>

        // flag to pad with 0's instead of spaces
        case '0':
            padc = '0';
c0113e24:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
            goto reswitch;
c0113e28:	eb d0                	jmp    c0113dfa <vprintfmt+0x56>

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
c0113e2a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
                precision = precision * 10 + ch - '0';
c0113e31:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0113e34:	89 d0                	mov    %edx,%eax
c0113e36:	c1 e0 02             	shl    $0x2,%eax
c0113e39:	01 d0                	add    %edx,%eax
c0113e3b:	01 c0                	add    %eax,%eax
c0113e3d:	01 d8                	add    %ebx,%eax
c0113e3f:	83 e8 30             	sub    $0x30,%eax
c0113e42:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                ch = *fmt;
c0113e45:	8b 45 14             	mov    0x14(%ebp),%eax
c0113e48:	0f b6 00             	movzbl (%eax),%eax
c0113e4b:	0f be d8             	movsbl %al,%ebx
                if (ch < '0' || ch > '9') {
c0113e4e:	83 fb 2f             	cmp    $0x2f,%ebx
c0113e51:	7e 39                	jle    c0113e8c <vprintfmt+0xe8>
c0113e53:	83 fb 39             	cmp    $0x39,%ebx
c0113e56:	7f 34                	jg     c0113e8c <vprintfmt+0xe8>
            padc = '0';
            goto reswitch;

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
c0113e58:	83 45 14 01          	addl   $0x1,0x14(%ebp)
                precision = precision * 10 + ch - '0';
                ch = *fmt;
                if (ch < '0' || ch > '9') {
                    break;
                }
            }
c0113e5c:	eb d3                	jmp    c0113e31 <vprintfmt+0x8d>
            goto process_precision;

        case '*':
            precision = va_arg(ap, int);
c0113e5e:	8b 45 18             	mov    0x18(%ebp),%eax
c0113e61:	8d 50 04             	lea    0x4(%eax),%edx
c0113e64:	89 55 18             	mov    %edx,0x18(%ebp)
c0113e67:	8b 00                	mov    (%eax),%eax
c0113e69:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            goto process_precision;
c0113e6c:	eb 1f                	jmp    c0113e8d <vprintfmt+0xe9>

        case '.':
            if (width < 0)
c0113e6e:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0113e72:	79 86                	jns    c0113dfa <vprintfmt+0x56>
                width = 0;
c0113e74:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
            goto reswitch;
c0113e7b:	e9 7a ff ff ff       	jmp    c0113dfa <vprintfmt+0x56>

        case '#':
            altflag = 1;
c0113e80:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
            goto reswitch;
c0113e87:	e9 6e ff ff ff       	jmp    c0113dfa <vprintfmt+0x56>
                ch = *fmt;
                if (ch < '0' || ch > '9') {
                    break;
                }
            }
            goto process_precision;
c0113e8c:	90                   	nop
        case '#':
            altflag = 1;
            goto reswitch;

        process_precision:
            if (width < 0)
c0113e8d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0113e91:	0f 89 63 ff ff ff    	jns    c0113dfa <vprintfmt+0x56>
                width = precision, precision = -1;
c0113e97:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113e9a:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0113e9d:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
            goto reswitch;
c0113ea4:	e9 51 ff ff ff       	jmp    c0113dfa <vprintfmt+0x56>

        // long flag (doubled for long long)
        case 'l':
            lflag ++;
c0113ea9:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
            goto reswitch;
c0113ead:	e9 48 ff ff ff       	jmp    c0113dfa <vprintfmt+0x56>

        // character
        case 'c':
            putch(va_arg(ap, int), putdat, fd);
c0113eb2:	8b 45 18             	mov    0x18(%ebp),%eax
c0113eb5:	8d 50 04             	lea    0x4(%eax),%edx
c0113eb8:	89 55 18             	mov    %edx,0x18(%ebp)
c0113ebb:	8b 00                	mov    (%eax),%eax
c0113ebd:	83 ec 04             	sub    $0x4,%esp
c0113ec0:	ff 75 0c             	pushl  0xc(%ebp)
c0113ec3:	ff 75 10             	pushl  0x10(%ebp)
c0113ec6:	50                   	push   %eax
c0113ec7:	8b 45 08             	mov    0x8(%ebp),%eax
c0113eca:	ff d0                	call   *%eax
c0113ecc:	83 c4 10             	add    $0x10,%esp
            break;
c0113ecf:	e9 9b 02 00 00       	jmp    c011416f <vprintfmt+0x3cb>

        // error message
        case 'e':
            err = va_arg(ap, int);
c0113ed4:	8b 45 18             	mov    0x18(%ebp),%eax
c0113ed7:	8d 50 04             	lea    0x4(%eax),%edx
c0113eda:	89 55 18             	mov    %edx,0x18(%ebp)
c0113edd:	8b 18                	mov    (%eax),%ebx
            if (err < 0) {
c0113edf:	85 db                	test   %ebx,%ebx
c0113ee1:	79 02                	jns    c0113ee5 <vprintfmt+0x141>
                err = -err;
c0113ee3:	f7 db                	neg    %ebx
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
c0113ee5:	83 fb 18             	cmp    $0x18,%ebx
c0113ee8:	7f 0b                	jg     c0113ef5 <vprintfmt+0x151>
c0113eea:	8b 34 9d 00 88 11 c0 	mov    -0x3fee7800(,%ebx,4),%esi
c0113ef1:	85 f6                	test   %esi,%esi
c0113ef3:	75 1f                	jne    c0113f14 <vprintfmt+0x170>
                printfmt(putch, fd, putdat, "error %d", err);
c0113ef5:	83 ec 0c             	sub    $0xc,%esp
c0113ef8:	53                   	push   %ebx
c0113ef9:	68 75 88 11 c0       	push   $0xc0118875
c0113efe:	ff 75 10             	pushl  0x10(%ebp)
c0113f01:	ff 75 0c             	pushl  0xc(%ebp)
c0113f04:	ff 75 08             	pushl  0x8(%ebp)
c0113f07:	e8 6e fe ff ff       	call   c0113d7a <printfmt>
c0113f0c:	83 c4 20             	add    $0x20,%esp
            }
            else {
                printfmt(putch, fd, putdat, "%s", p);
            }
            break;
c0113f0f:	e9 5b 02 00 00       	jmp    c011416f <vprintfmt+0x3cb>
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
                printfmt(putch, fd, putdat, "error %d", err);
            }
            else {
                printfmt(putch, fd, putdat, "%s", p);
c0113f14:	83 ec 0c             	sub    $0xc,%esp
c0113f17:	56                   	push   %esi
c0113f18:	68 7e 88 11 c0       	push   $0xc011887e
c0113f1d:	ff 75 10             	pushl  0x10(%ebp)
c0113f20:	ff 75 0c             	pushl  0xc(%ebp)
c0113f23:	ff 75 08             	pushl  0x8(%ebp)
c0113f26:	e8 4f fe ff ff       	call   c0113d7a <printfmt>
c0113f2b:	83 c4 20             	add    $0x20,%esp
            }
            break;
c0113f2e:	e9 3c 02 00 00       	jmp    c011416f <vprintfmt+0x3cb>

        // string
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
c0113f33:	8b 45 18             	mov    0x18(%ebp),%eax
c0113f36:	8d 50 04             	lea    0x4(%eax),%edx
c0113f39:	89 55 18             	mov    %edx,0x18(%ebp)
c0113f3c:	8b 30                	mov    (%eax),%esi
c0113f3e:	85 f6                	test   %esi,%esi
c0113f40:	75 05                	jne    c0113f47 <vprintfmt+0x1a3>
                p = "(null)";
c0113f42:	be 81 88 11 c0       	mov    $0xc0118881,%esi
            }
            if (width > 0 && padc != '-') {
c0113f47:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0113f4b:	7e 7f                	jle    c0113fcc <vprintfmt+0x228>
c0113f4d:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
c0113f51:	74 79                	je     c0113fcc <vprintfmt+0x228>
                for (width -= strnlen(p, precision); width > 0; width --) {
c0113f53:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0113f56:	83 ec 08             	sub    $0x8,%esp
c0113f59:	50                   	push   %eax
c0113f5a:	56                   	push   %esi
c0113f5b:	e8 d0 f7 ff ff       	call   c0113730 <strnlen>
c0113f60:	83 c4 10             	add    $0x10,%esp
c0113f63:	89 c2                	mov    %eax,%edx
c0113f65:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0113f68:	29 d0                	sub    %edx,%eax
c0113f6a:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0113f6d:	eb 1a                	jmp    c0113f89 <vprintfmt+0x1e5>
                    putch(padc, putdat, fd);
c0113f6f:	0f be 45 db          	movsbl -0x25(%ebp),%eax
c0113f73:	83 ec 04             	sub    $0x4,%esp
c0113f76:	ff 75 0c             	pushl  0xc(%ebp)
c0113f79:	ff 75 10             	pushl  0x10(%ebp)
c0113f7c:	50                   	push   %eax
c0113f7d:	8b 45 08             	mov    0x8(%ebp),%eax
c0113f80:	ff d0                	call   *%eax
c0113f82:	83 c4 10             	add    $0x10,%esp
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
                p = "(null)";
            }
            if (width > 0 && padc != '-') {
                for (width -= strnlen(p, precision); width > 0; width --) {
c0113f85:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c0113f89:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0113f8d:	7f e0                	jg     c0113f6f <vprintfmt+0x1cb>
                    putch(padc, putdat, fd);
                }
            }
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c0113f8f:	eb 3b                	jmp    c0113fcc <vprintfmt+0x228>
                if (altflag && (ch < ' ' || ch > '~')) {
c0113f91:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0113f95:	74 1f                	je     c0113fb6 <vprintfmt+0x212>
c0113f97:	83 fb 1f             	cmp    $0x1f,%ebx
c0113f9a:	7e 05                	jle    c0113fa1 <vprintfmt+0x1fd>
c0113f9c:	83 fb 7e             	cmp    $0x7e,%ebx
c0113f9f:	7e 15                	jle    c0113fb6 <vprintfmt+0x212>
                    putch('?', putdat, fd);
c0113fa1:	83 ec 04             	sub    $0x4,%esp
c0113fa4:	ff 75 0c             	pushl  0xc(%ebp)
c0113fa7:	ff 75 10             	pushl  0x10(%ebp)
c0113faa:	6a 3f                	push   $0x3f
c0113fac:	8b 45 08             	mov    0x8(%ebp),%eax
c0113faf:	ff d0                	call   *%eax
c0113fb1:	83 c4 10             	add    $0x10,%esp
c0113fb4:	eb 12                	jmp    c0113fc8 <vprintfmt+0x224>
                }
                else {
                    putch(ch, putdat, fd);
c0113fb6:	83 ec 04             	sub    $0x4,%esp
c0113fb9:	ff 75 0c             	pushl  0xc(%ebp)
c0113fbc:	ff 75 10             	pushl  0x10(%ebp)
c0113fbf:	53                   	push   %ebx
c0113fc0:	8b 45 08             	mov    0x8(%ebp),%eax
c0113fc3:	ff d0                	call   *%eax
c0113fc5:	83 c4 10             	add    $0x10,%esp
            if (width > 0 && padc != '-') {
                for (width -= strnlen(p, precision); width > 0; width --) {
                    putch(padc, putdat, fd);
                }
            }
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c0113fc8:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c0113fcc:	89 f0                	mov    %esi,%eax
c0113fce:	8d 70 01             	lea    0x1(%eax),%esi
c0113fd1:	0f b6 00             	movzbl (%eax),%eax
c0113fd4:	0f be d8             	movsbl %al,%ebx
c0113fd7:	85 db                	test   %ebx,%ebx
c0113fd9:	74 29                	je     c0114004 <vprintfmt+0x260>
c0113fdb:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0113fdf:	78 b0                	js     c0113f91 <vprintfmt+0x1ed>
c0113fe1:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
c0113fe5:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0113fe9:	79 a6                	jns    c0113f91 <vprintfmt+0x1ed>
                }
                else {
                    putch(ch, putdat, fd);
                }
            }
            for (; width > 0; width --) {
c0113feb:	eb 17                	jmp    c0114004 <vprintfmt+0x260>
                putch(' ', putdat, fd);
c0113fed:	83 ec 04             	sub    $0x4,%esp
c0113ff0:	ff 75 0c             	pushl  0xc(%ebp)
c0113ff3:	ff 75 10             	pushl  0x10(%ebp)
c0113ff6:	6a 20                	push   $0x20
c0113ff8:	8b 45 08             	mov    0x8(%ebp),%eax
c0113ffb:	ff d0                	call   *%eax
c0113ffd:	83 c4 10             	add    $0x10,%esp
                }
                else {
                    putch(ch, putdat, fd);
                }
            }
            for (; width > 0; width --) {
c0114000:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c0114004:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0114008:	7f e3                	jg     c0113fed <vprintfmt+0x249>
                putch(' ', putdat, fd);
            }
            break;
c011400a:	e9 60 01 00 00       	jmp    c011416f <vprintfmt+0x3cb>

        // (signed) decimal
        case 'd':
            num = getint(&ap, lflag);
c011400f:	83 ec 08             	sub    $0x8,%esp
c0114012:	ff 75 e0             	pushl  -0x20(%ebp)
c0114015:	8d 45 18             	lea    0x18(%ebp),%eax
c0114018:	50                   	push   %eax
c0114019:	e8 15 fd ff ff       	call   c0113d33 <getint>
c011401e:	83 c4 10             	add    $0x10,%esp
c0114021:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0114024:	89 55 f4             	mov    %edx,-0xc(%ebp)
            if ((long long)num < 0) {
c0114027:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011402a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c011402d:	85 d2                	test   %edx,%edx
c011402f:	79 26                	jns    c0114057 <vprintfmt+0x2b3>
                putch('-', putdat, fd);
c0114031:	83 ec 04             	sub    $0x4,%esp
c0114034:	ff 75 0c             	pushl  0xc(%ebp)
c0114037:	ff 75 10             	pushl  0x10(%ebp)
c011403a:	6a 2d                	push   $0x2d
c011403c:	8b 45 08             	mov    0x8(%ebp),%eax
c011403f:	ff d0                	call   *%eax
c0114041:	83 c4 10             	add    $0x10,%esp
                num = -(long long)num;
c0114044:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114047:	8b 55 f4             	mov    -0xc(%ebp),%edx
c011404a:	f7 d8                	neg    %eax
c011404c:	83 d2 00             	adc    $0x0,%edx
c011404f:	f7 da                	neg    %edx
c0114051:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0114054:	89 55 f4             	mov    %edx,-0xc(%ebp)
            }
            base = 10;
c0114057:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c011405e:	e9 a8 00 00 00       	jmp    c011410b <vprintfmt+0x367>

        // unsigned decimal
        case 'u':
            num = getuint(&ap, lflag);
c0114063:	83 ec 08             	sub    $0x8,%esp
c0114066:	ff 75 e0             	pushl  -0x20(%ebp)
c0114069:	8d 45 18             	lea    0x18(%ebp),%eax
c011406c:	50                   	push   %eax
c011406d:	e8 72 fc ff ff       	call   c0113ce4 <getuint>
c0114072:	83 c4 10             	add    $0x10,%esp
c0114075:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0114078:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 10;
c011407b:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c0114082:	e9 84 00 00 00       	jmp    c011410b <vprintfmt+0x367>

        // (unsigned) octal
        case 'o':
            num = getuint(&ap, lflag);
c0114087:	83 ec 08             	sub    $0x8,%esp
c011408a:	ff 75 e0             	pushl  -0x20(%ebp)
c011408d:	8d 45 18             	lea    0x18(%ebp),%eax
c0114090:	50                   	push   %eax
c0114091:	e8 4e fc ff ff       	call   c0113ce4 <getuint>
c0114096:	83 c4 10             	add    $0x10,%esp
c0114099:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011409c:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 8;
c011409f:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
            goto number;
c01140a6:	eb 63                	jmp    c011410b <vprintfmt+0x367>

        // pointer
        case 'p':
            putch('0', putdat, fd);
c01140a8:	83 ec 04             	sub    $0x4,%esp
c01140ab:	ff 75 0c             	pushl  0xc(%ebp)
c01140ae:	ff 75 10             	pushl  0x10(%ebp)
c01140b1:	6a 30                	push   $0x30
c01140b3:	8b 45 08             	mov    0x8(%ebp),%eax
c01140b6:	ff d0                	call   *%eax
c01140b8:	83 c4 10             	add    $0x10,%esp
            putch('x', putdat, fd);
c01140bb:	83 ec 04             	sub    $0x4,%esp
c01140be:	ff 75 0c             	pushl  0xc(%ebp)
c01140c1:	ff 75 10             	pushl  0x10(%ebp)
c01140c4:	6a 78                	push   $0x78
c01140c6:	8b 45 08             	mov    0x8(%ebp),%eax
c01140c9:	ff d0                	call   *%eax
c01140cb:	83 c4 10             	add    $0x10,%esp
            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
c01140ce:	8b 45 18             	mov    0x18(%ebp),%eax
c01140d1:	8d 50 04             	lea    0x4(%eax),%edx
c01140d4:	89 55 18             	mov    %edx,0x18(%ebp)
c01140d7:	8b 00                	mov    (%eax),%eax
c01140d9:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01140dc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            base = 16;
c01140e3:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
            goto number;
c01140ea:	eb 1f                	jmp    c011410b <vprintfmt+0x367>

        // (unsigned) hexadecimal
        case 'x':
            num = getuint(&ap, lflag);
c01140ec:	83 ec 08             	sub    $0x8,%esp
c01140ef:	ff 75 e0             	pushl  -0x20(%ebp)
c01140f2:	8d 45 18             	lea    0x18(%ebp),%eax
c01140f5:	50                   	push   %eax
c01140f6:	e8 e9 fb ff ff       	call   c0113ce4 <getuint>
c01140fb:	83 c4 10             	add    $0x10,%esp
c01140fe:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0114101:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 16;
c0114104:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
        number:
            printnum(putch, fd, putdat, num, base, width, padc);
c011410b:	0f be 55 db          	movsbl -0x25(%ebp),%edx
c011410f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0114112:	52                   	push   %edx
c0114113:	ff 75 e8             	pushl  -0x18(%ebp)
c0114116:	50                   	push   %eax
c0114117:	ff 75 f4             	pushl  -0xc(%ebp)
c011411a:	ff 75 f0             	pushl  -0x10(%ebp)
c011411d:	ff 75 10             	pushl  0x10(%ebp)
c0114120:	ff 75 0c             	pushl  0xc(%ebp)
c0114123:	ff 75 08             	pushl  0x8(%ebp)
c0114126:	e8 c2 fa ff ff       	call   c0113bed <printnum>
c011412b:	83 c4 20             	add    $0x20,%esp
            break;
c011412e:	eb 3f                	jmp    c011416f <vprintfmt+0x3cb>

        // escaped '%' character
        case '%':
            putch(ch, putdat, fd);
c0114130:	83 ec 04             	sub    $0x4,%esp
c0114133:	ff 75 0c             	pushl  0xc(%ebp)
c0114136:	ff 75 10             	pushl  0x10(%ebp)
c0114139:	53                   	push   %ebx
c011413a:	8b 45 08             	mov    0x8(%ebp),%eax
c011413d:	ff d0                	call   *%eax
c011413f:	83 c4 10             	add    $0x10,%esp
            break;
c0114142:	eb 2b                	jmp    c011416f <vprintfmt+0x3cb>

        // unrecognized escape sequence - just print it literally
        default:
            putch('%', putdat, fd);
c0114144:	83 ec 04             	sub    $0x4,%esp
c0114147:	ff 75 0c             	pushl  0xc(%ebp)
c011414a:	ff 75 10             	pushl  0x10(%ebp)
c011414d:	6a 25                	push   $0x25
c011414f:	8b 45 08             	mov    0x8(%ebp),%eax
c0114152:	ff d0                	call   *%eax
c0114154:	83 c4 10             	add    $0x10,%esp
            for (fmt --; fmt[-1] != '%'; fmt --)
c0114157:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c011415b:	eb 04                	jmp    c0114161 <vprintfmt+0x3bd>
c011415d:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0114161:	8b 45 14             	mov    0x14(%ebp),%eax
c0114164:	83 e8 01             	sub    $0x1,%eax
c0114167:	0f b6 00             	movzbl (%eax),%eax
c011416a:	3c 25                	cmp    $0x25,%al
c011416c:	75 ef                	jne    c011415d <vprintfmt+0x3b9>
                /* do nothing */;
            break;
c011416e:	90                   	nop
        }
    }
c011416f:	e9 38 fc ff ff       	jmp    c0113dac <vprintfmt+0x8>
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
            if (ch == '\0') {
                return;
c0114174:	90                   	nop
            for (fmt --; fmt[-1] != '%'; fmt --)
                /* do nothing */;
            break;
        }
    }
}
c0114175:	8d 65 f8             	lea    -0x8(%ebp),%esp
c0114178:	5b                   	pop    %ebx
c0114179:	5e                   	pop    %esi
c011417a:	5d                   	pop    %ebp
c011417b:	c3                   	ret    

c011417c <sprintputch>:
 * sprintputch - 'print' a single character in a buffer
 * @ch:         the character will be printed
 * @b:          the buffer to place the character @ch
 * */
static void
sprintputch(int ch, struct sprintbuf *b) {
c011417c:	55                   	push   %ebp
c011417d:	89 e5                	mov    %esp,%ebp
    b->cnt ++;
c011417f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114182:	8b 40 08             	mov    0x8(%eax),%eax
c0114185:	8d 50 01             	lea    0x1(%eax),%edx
c0114188:	8b 45 0c             	mov    0xc(%ebp),%eax
c011418b:	89 50 08             	mov    %edx,0x8(%eax)
    if (b->buf < b->ebuf) {
c011418e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114191:	8b 10                	mov    (%eax),%edx
c0114193:	8b 45 0c             	mov    0xc(%ebp),%eax
c0114196:	8b 40 04             	mov    0x4(%eax),%eax
c0114199:	39 c2                	cmp    %eax,%edx
c011419b:	73 12                	jae    c01141af <sprintputch+0x33>
        *b->buf ++ = ch;
c011419d:	8b 45 0c             	mov    0xc(%ebp),%eax
c01141a0:	8b 00                	mov    (%eax),%eax
c01141a2:	8d 48 01             	lea    0x1(%eax),%ecx
c01141a5:	8b 55 0c             	mov    0xc(%ebp),%edx
c01141a8:	89 0a                	mov    %ecx,(%edx)
c01141aa:	8b 55 08             	mov    0x8(%ebp),%edx
c01141ad:	88 10                	mov    %dl,(%eax)
    }
}
c01141af:	90                   	nop
c01141b0:	5d                   	pop    %ebp
c01141b1:	c3                   	ret    

c01141b2 <snprintf>:
 * @str:        the buffer to place the result into
 * @size:       the size of buffer, including the trailing null space
 * @fmt:        the format string to use
 * */
int
snprintf(char *str, size_t size, const char *fmt, ...) {
c01141b2:	55                   	push   %ebp
c01141b3:	89 e5                	mov    %esp,%ebp
c01141b5:	83 ec 18             	sub    $0x18,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c01141b8:	8d 45 14             	lea    0x14(%ebp),%eax
c01141bb:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cnt = vsnprintf(str, size, fmt, ap);
c01141be:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01141c1:	50                   	push   %eax
c01141c2:	ff 75 10             	pushl  0x10(%ebp)
c01141c5:	ff 75 0c             	pushl  0xc(%ebp)
c01141c8:	ff 75 08             	pushl  0x8(%ebp)
c01141cb:	e8 0b 00 00 00       	call   c01141db <vsnprintf>
c01141d0:	83 c4 10             	add    $0x10,%esp
c01141d3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c01141d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01141d9:	c9                   	leave  
c01141da:	c3                   	ret    

c01141db <vsnprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want snprintf() instead.
 * */
int
vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
c01141db:	55                   	push   %ebp
c01141dc:	89 e5                	mov    %esp,%ebp
c01141de:	83 ec 18             	sub    $0x18,%esp
    struct sprintbuf b = {str, str + size - 1, 0};
c01141e1:	8b 45 08             	mov    0x8(%ebp),%eax
c01141e4:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01141e7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01141ea:	8d 50 ff             	lea    -0x1(%eax),%edx
c01141ed:	8b 45 08             	mov    0x8(%ebp),%eax
c01141f0:	01 d0                	add    %edx,%eax
c01141f2:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01141f5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if (str == NULL || b.buf > b.ebuf) {
c01141fc:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0114200:	74 0a                	je     c011420c <vsnprintf+0x31>
c0114202:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0114205:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0114208:	39 c2                	cmp    %eax,%edx
c011420a:	76 07                	jbe    c0114213 <vsnprintf+0x38>
        return -E_INVAL;
c011420c:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0114211:	eb 28                	jmp    c011423b <vsnprintf+0x60>
    }
    // print the string to the buffer
    vprintfmt((void*)sprintputch, NO_FD, &b, fmt, ap);
c0114213:	83 ec 0c             	sub    $0xc,%esp
c0114216:	ff 75 14             	pushl  0x14(%ebp)
c0114219:	ff 75 10             	pushl  0x10(%ebp)
c011421c:	8d 45 ec             	lea    -0x14(%ebp),%eax
c011421f:	50                   	push   %eax
c0114220:	68 d9 6a ff ff       	push   $0xffff6ad9
c0114225:	68 7c 41 11 c0       	push   $0xc011417c
c011422a:	e8 75 fb ff ff       	call   c0113da4 <vprintfmt>
c011422f:	83 c4 20             	add    $0x20,%esp
    // null terminate the buffer
    *b.buf = '\0';
c0114232:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0114235:	c6 00 00             	movb   $0x0,(%eax)
    return b.cnt;
c0114238:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c011423b:	c9                   	leave  
c011423c:	c3                   	ret    

c011423d <hash32>:
 * @bits:   the number of bits in a return value
 *
 * High bits are more random, so we use them.
 * */
uint32_t
hash32(uint32_t val, unsigned int bits) {
c011423d:	55                   	push   %ebp
c011423e:	89 e5                	mov    %esp,%ebp
c0114240:	83 ec 10             	sub    $0x10,%esp
    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
c0114243:	8b 45 08             	mov    0x8(%ebp),%eax
c0114246:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
c011424c:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return (hash >> (32 - bits));
c011424f:	b8 20 00 00 00       	mov    $0x20,%eax
c0114254:	2b 45 0c             	sub    0xc(%ebp),%eax
c0114257:	8b 55 fc             	mov    -0x4(%ebp),%edx
c011425a:	89 c1                	mov    %eax,%ecx
c011425c:	d3 ea                	shr    %cl,%edx
c011425e:	89 d0                	mov    %edx,%eax
}
c0114260:	c9                   	leave  
c0114261:	c3                   	ret    

c0114262 <rand>:
 * rand - returns a pseudo-random integer
 *
 * The rand() function return a value in the range [0, RAND_MAX].
 * */
int
rand(void) {
c0114262:	55                   	push   %ebp
c0114263:	89 e5                	mov    %esp,%ebp
c0114265:	57                   	push   %edi
c0114266:	56                   	push   %esi
c0114267:	53                   	push   %ebx
c0114268:	83 ec 24             	sub    $0x24,%esp
    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
c011426b:	a1 a8 ee 14 c0       	mov    0xc014eea8,%eax
c0114270:	8b 15 ac ee 14 c0    	mov    0xc014eeac,%edx
c0114276:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
c011427c:	6b f0 05             	imul   $0x5,%eax,%esi
c011427f:	01 fe                	add    %edi,%esi
c0114281:	bf 6d e6 ec de       	mov    $0xdeece66d,%edi
c0114286:	f7 e7                	mul    %edi
c0114288:	01 d6                	add    %edx,%esi
c011428a:	89 f2                	mov    %esi,%edx
c011428c:	83 c0 0b             	add    $0xb,%eax
c011428f:	83 d2 00             	adc    $0x0,%edx
c0114292:	89 c7                	mov    %eax,%edi
c0114294:	83 e7 ff             	and    $0xffffffff,%edi
c0114297:	89 f9                	mov    %edi,%ecx
c0114299:	0f b7 da             	movzwl %dx,%ebx
c011429c:	89 0d a8 ee 14 c0    	mov    %ecx,0xc014eea8
c01142a2:	89 1d ac ee 14 c0    	mov    %ebx,0xc014eeac
    unsigned long long result = (next >> 12);
c01142a8:	a1 a8 ee 14 c0       	mov    0xc014eea8,%eax
c01142ad:	8b 15 ac ee 14 c0    	mov    0xc014eeac,%edx
c01142b3:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c01142b7:	c1 ea 0c             	shr    $0xc,%edx
c01142ba:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01142bd:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    return (int)do_div(result, RAND_MAX + 1);
c01142c0:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
c01142c7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01142ca:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01142cd:	89 45 d8             	mov    %eax,-0x28(%ebp)
c01142d0:	89 55 e8             	mov    %edx,-0x18(%ebp)
c01142d3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01142d6:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01142d9:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01142dd:	74 1c                	je     c01142fb <rand+0x99>
c01142df:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01142e2:	ba 00 00 00 00       	mov    $0x0,%edx
c01142e7:	f7 75 dc             	divl   -0x24(%ebp)
c01142ea:	89 55 ec             	mov    %edx,-0x14(%ebp)
c01142ed:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01142f0:	ba 00 00 00 00       	mov    $0x0,%edx
c01142f5:	f7 75 dc             	divl   -0x24(%ebp)
c01142f8:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01142fb:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01142fe:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0114301:	f7 75 dc             	divl   -0x24(%ebp)
c0114304:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0114307:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c011430a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c011430d:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0114310:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0114313:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0114316:	8b 45 d4             	mov    -0x2c(%ebp),%eax
}
c0114319:	83 c4 24             	add    $0x24,%esp
c011431c:	5b                   	pop    %ebx
c011431d:	5e                   	pop    %esi
c011431e:	5f                   	pop    %edi
c011431f:	5d                   	pop    %ebp
c0114320:	c3                   	ret    

c0114321 <srand>:
/* *
 * srand - seed the random number generator with the given number
 * @seed:   the required seed number
 * */
void
srand(unsigned int seed) {
c0114321:	55                   	push   %ebp
c0114322:	89 e5                	mov    %esp,%ebp
    next = seed;
c0114324:	8b 45 08             	mov    0x8(%ebp),%eax
c0114327:	ba 00 00 00 00       	mov    $0x0,%edx
c011432c:	a3 a8 ee 14 c0       	mov    %eax,0xc014eea8
c0114331:	89 15 ac ee 14 c0    	mov    %edx,0xc014eeac
}
c0114337:	90                   	nop
c0114338:	5d                   	pop    %ebp
c0114339:	c3                   	ret    
